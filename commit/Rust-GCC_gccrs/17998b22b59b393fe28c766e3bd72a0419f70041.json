{"sha": "17998b22b59b393fe28c766e3bd72a0419f70041", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc5OThiMjJiNTliMzkzZmUyOGM3NjZlM2JkNzJhMDQxOWY3MDA0MQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-03-25T04:41:41Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-03-25T04:41:41Z"}, "message": "libiberty.h (xstrndup): Declare.\n\ninclude:\n\t* libiberty.h (xstrndup): Declare.\n\nlibiberty:\n\t* Makefile.in (CFILES): Add strndup.c and xstrndup.c.\n\t(REQUIRED_OFILES): Add xstrndup.o.\n\t(CONFIGURED_OFILES): Add strndup.o.\n\tRegenerate dependencies.\n\n\t* configure.ac (funcs, AC_CHECK_FUNCS): Add strndup.\n\n\t* strndup.c, xstrndup.c: New.\n\n\t* config.in, configure, functions.texi: Regenerate.\n\nFrom-SVN: r97034", "tree": {"sha": "69b832401346b668037c811e96ccd1486e1163a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69b832401346b668037c811e96ccd1486e1163a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17998b22b59b393fe28c766e3bd72a0419f70041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17998b22b59b393fe28c766e3bd72a0419f70041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17998b22b59b393fe28c766e3bd72a0419f70041", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17998b22b59b393fe28c766e3bd72a0419f70041/comments", "author": null, "committer": null, "parents": [{"sha": "bb99744fd4346bc283e19ecc2236f320a6901242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb99744fd4346bc283e19ecc2236f320a6901242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb99744fd4346bc283e19ecc2236f320a6901242"}], "stats": {"total": 216, "additions": 209, "deletions": 7}, "files": [{"sha": "795101e3543b8b4f7d293c458e5bd36b0a472451", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17998b22b59b393fe28c766e3bd72a0419f70041/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17998b22b59b393fe28c766e3bd72a0419f70041/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=17998b22b59b393fe28c766e3bd72a0419f70041", "patch": "@@ -1,3 +1,7 @@\n+2005-03-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libiberty.h (xstrndup): Declare.\n+\n 2005-03-22  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* libiberty.h (make_relative_prefix): Add ATTRIBUTE_MALLOC."}, {"sha": "49a2fb6fd526172810405938ce972c9bedfc6626", "filename": "include/libiberty.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17998b22b59b393fe28c766e3bd72a0419f70041/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17998b22b59b393fe28c766e3bd72a0419f70041/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=17998b22b59b393fe28c766e3bd72a0419f70041", "patch": "@@ -255,6 +255,10 @@ extern PTR xcalloc PARAMS ((size_t, size_t)) ATTRIBUTE_MALLOC;\n \n extern char *xstrdup PARAMS ((const char *)) ATTRIBUTE_MALLOC;\n \n+/* Copy at most N characters from string into a buffer without fail.  */\n+\n+extern char *xstrndup PARAMS ((const char *, size_t)) ATTRIBUTE_MALLOC;\n+\n /* Copy an existing memory buffer to a new memory buffer without fail.  */\n \n extern PTR xmemdup PARAMS ((const PTR, size_t, size_t)) ATTRIBUTE_MALLOC;"}, {"sha": "62e8d1eb99ce664da8f193e8f4c1084531598422", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=17998b22b59b393fe28c766e3bd72a0419f70041", "patch": "@@ -1,3 +1,16 @@\n+2005-03-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (CFILES): Add strndup.c and xstrndup.c.\n+\t(REQUIRED_OFILES): Add xstrndup.o.\n+\t(CONFIGURED_OFILES): Add strndup.o.\n+\tRegenerate dependencies.\n+\n+\t* configure.ac (funcs, AC_CHECK_FUNCS): Add strndup.\n+\n+\t* strndup.c, xstrndup.c: New.\n+\n+\t* config.in, configure, functions.texi: Regenerate.\n+\n 2005-03-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* xmemdup.c, xstrdup.c: Expose the tail call."}, {"sha": "092d8d5ec4d96b9827500cfaeeb1b227f373b617", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=17998b22b59b393fe28c766e3bd72a0419f70041", "patch": "@@ -150,12 +150,13 @@ CFILES = alloca.c argv.c asprintf.c atexit.c\t\t\t\t\\\n \tsafe-ctype.c setenv.c sigsetmask.c snprintf.c sort.c spaces.c\t\\\n \t splay-tree.c stpcpy.c stpncpy.c strcasecmp.c strchr.c strdup.c\t\\\n \t strerror.c strncasecmp.c strncmp.c strrchr.c strsignal.c\t\\\n-\t strstr.c strtod.c strtol.c strtoul.c\t\t\t\t\\\n+\t strstr.c strtod.c strtol.c strtoul.c strndup.c\t\t\t\\\n \tternary.c tmpnam.c\t\t\t\t\t\t\\\n \tunlink-if-ordinary.c\t\t\t\t\t\t\\\n \tvasprintf.c vfork.c vfprintf.c vprintf.c vsnprintf.c vsprintf.c\t\\\n \twaitpid.c\t\t\t\t\t\t\t\\\n-\txatexit.c xexit.c xmalloc.c xmemdup.c xstrdup.c xstrerror.c\n+\txatexit.c xexit.c xmalloc.c xmemdup.c xstrdup.c xstrerror.c\t\\\n+\t xstrndup.c\n \n # These are always included in the library.  The first four are listed\n # first and by compile time to optimize parallel builds.\n@@ -175,7 +176,7 @@ REQUIRED_OFILES = ./regex.o ./cplus-dem.o ./cp-demangle.o ./md5.o\t\\\n \t./ternary.o\t\t\t\t\t\t\t\\\n \t./unlink-if-ordinary.o\t\t\t\t\t\t\\\n \t./xatexit.o ./xexit.o ./xmalloc.o ./xmemdup.o ./xstrdup.o\t\\\n-\t ./xstrerror.o\n+\t ./xstrerror.o ./xstrndup.o\n \n # These are all the objects that configure may add to the library via\n # $funcs or EXTRA_OFILES.  This list exists here only for \"make\n@@ -195,7 +196,7 @@ CONFIGURED_OFILES = ./asprintf.o ./atexit.o\t\t\t\t\\\n \t./random.o ./rename.o ./rindex.o\t\t\t\t\\\n \t./setenv.o ./sigsetmask.o ./snprintf.o ./stpcpy.o ./stpncpy.o\t\\\n \t ./strcasecmp.o ./strchr.o ./strdup.o ./strncasecmp.o\t\t\\\n-\t ./strncmp.o ./strrchr.o ./strstr.o\t\t\t\t\\\n+\t ./strncmp.o ./strndup.o ./strrchr.o ./strstr.o\t\t\t\\\n \t ./strtod.o ./strtol.o ./strtoul.o\t\t\t\t\\\n \t./tmpnam.o\t\t\t\t\t\t\t\\\n \t./vasprintf.o ./vfork.o ./vfprintf.o ./vprintf.o ./vsnprintf.o\t\\\n@@ -916,6 +917,12 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/strncmp.c $(OUTPUT_OPTION)\n \n+./strndup.o: $(srcdir)/strndup.c $(INCDIR)/ansidecl.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/strndup.c -o pic/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/strndup.c $(OUTPUT_OPTION)\n+\n ./strrchr.o: $(srcdir)/strrchr.c $(INCDIR)/ansidecl.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/strrchr.c -o pic/$@; \\\n@@ -1058,3 +1065,10 @@ $(CONFIGURED_OFILES): stamp-picdir\n \telse true; fi\n \t$(COMPILE.c) $(srcdir)/xstrerror.c $(OUTPUT_OPTION)\n \n+./xstrndup.o: $(srcdir)/xstrndup.c config.h $(INCDIR)/ansidecl.h \\\n+\t$(INCDIR)/libiberty.h\n+\tif [ x\"$(PICFLAG)\" != x ]; then \\\n+\t  $(COMPILE.c) $(PICFLAG) $(srcdir)/xstrndup.c -o pic/$@; \\\n+\telse true; fi\n+\t$(COMPILE.c) $(srcdir)/xstrndup.c $(OUTPUT_OPTION)\n+"}, {"sha": "6eb169e2eec3e805ffe435844bec04291a6b28b2", "filename": "libiberty/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=17998b22b59b393fe28c766e3bd72a0419f70041", "patch": "@@ -181,6 +181,9 @@\n /* Define to 1 if you have the `strncasecmp' function. */\n #undef HAVE_STRNCASECMP\n \n+/* Define to 1 if you have the `strndup' function. */\n+#undef HAVE_STRNDUP\n+\n /* Define to 1 if you have the `strrchr' function. */\n #undef HAVE_STRRCHR\n "}, {"sha": "88da64294dbafd3d7cab59e0845e89b4f1c40a64", "filename": "libiberty/configure", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=17998b22b59b393fe28c766e3bd72a0419f70041", "patch": "@@ -4775,6 +4775,7 @@ funcs=\"$funcs clock\"\n funcs=\"$funcs ffs\"\n funcs=\"$funcs getcwd\"\n funcs=\"$funcs getpagesize\"\n+funcs=\"$funcs gettimeofday\"\n funcs=\"$funcs index\"\n funcs=\"$funcs insque\"\n funcs=\"$funcs memchr\"\n@@ -4797,6 +4798,7 @@ funcs=\"$funcs strcasecmp\"\n funcs=\"$funcs strchr\"\n funcs=\"$funcs strdup\"\n funcs=\"$funcs strncasecmp\"\n+funcs=\"$funcs strndup\"\n funcs=\"$funcs strrchr\"\n funcs=\"$funcs strstr\"\n funcs=\"$funcs strtod\"\n@@ -4881,13 +4883,15 @@ if test \"x\" = \"y\"; then\n \n \n \n+\n+\n \n \n \n for ac_func in asprintf atexit basename bcmp bcopy bsearch bzero calloc clock \\\n-  getcwd getpagesize index insque mkstemps memchr memcmp memcpy \\\n+  getcwd getpagesize gettimeofday index insque mkstemps memchr memcmp memcpy \\\n   memmove mempcpy memset putenv random rename rindex sigsetmask \\\n-  strcasecmp setenv stpcpy stpncpy strchr strdup strncasecmp strrchr strstr \\\n+  strcasecmp setenv stpcpy stpncpy strchr strdup strncasecmp strndup strrchr strstr \\\n   strtod strtol strtoul tmpnam vasprintf vfprintf vprintf \\\n   vsprintf waitpid getrusage on_exit psignal strerror strsignal \\\n   sysconf times sbrk gettimeofday ffs snprintf vsnprintf \\"}, {"sha": "99250533cd65b86b5ab828736bb0a14b640d4309", "filename": "libiberty/configure.ac", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=17998b22b59b393fe28c766e3bd72a0419f70041", "patch": "@@ -248,6 +248,7 @@ funcs=\"$funcs strcasecmp\"\n funcs=\"$funcs strchr\"\n funcs=\"$funcs strdup\"\n funcs=\"$funcs strncasecmp\"\n+funcs=\"$funcs strndup\"\n funcs=\"$funcs strrchr\"\n funcs=\"$funcs strstr\"\n funcs=\"$funcs strtod\"\n@@ -275,7 +276,7 @@ if test \"x\" = \"y\"; then\n   AC_CHECK_FUNCS(asprintf atexit basename bcmp bcopy bsearch bzero calloc clock \\\n   getcwd getpagesize gettimeofday index insque mkstemps memchr memcmp memcpy \\\n   memmove mempcpy memset putenv random rename rindex sigsetmask \\\n-  strcasecmp setenv stpcpy stpncpy strchr strdup strncasecmp strrchr strstr \\\n+  strcasecmp setenv stpcpy stpncpy strchr strdup strncasecmp strndup strrchr strstr \\\n   strtod strtol strtoul tmpnam vasprintf vfprintf vprintf \\\n   vsprintf waitpid getrusage on_exit psignal strerror strsignal \\\n   sysconf times sbrk gettimeofday ffs snprintf vsnprintf \\"}, {"sha": "79c8a35b3ca4003671029bb74e411ae84cd7a33d", "filename": "libiberty/functions.texi", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=17998b22b59b393fe28c766e3bd72a0419f70041", "patch": "@@ -339,6 +339,14 @@ between calls to @code{getpwd}.\n \n @end deftypefn\n \n+@c gettimeofday.c:12\n+@deftypefn int gettimeofday (struct timeval *@var{tp}, void *@var{tz})\n+\n+Writes the current time to @var{tp}.  This implementation requires\n+that @var{tz} be NULL.  Returns 0 on success, -1 on failure.\n+\n+@end deftypefn\n+\n @c hex.c:30\n @deftypefn Extension void hex_init (void)\n \n@@ -893,6 +901,15 @@ Compares the first @var{n} bytes of two strings, returning a value as\n \n @end deftypefn\n \n+@c strndup.c:23\n+@deftypefn Extension char* strndup (const char *@var{s}, size_t @var{n})\n+\n+Returns a pointer to a copy of @var{s} with at most @var{n} characters\n+in memory obtained from @code{malloc}, or @code{NULL} if insufficient\n+memory was available.  The result is always NUL terminated.\n+\n+@end deftypefn\n+\n @c strrchr.c:6\n @deftypefn Supplemental char* strrchr (const char *@var{s}, int @var{c})\n \n@@ -1008,6 +1025,16 @@ not be used in new projects.  Use @code{mkstemp} instead.\n \n @end deftypefn\n \n+@c unlink-if-ordinary.c:27\n+@deftypefn Supplemental int unlink_if_ordinary (const char*)\n+\n+Unlinks the named file, unless it is special (e.g. a device file).\n+Returns 0 when the file was unlinked, a negative value (and errno set) when\n+there was an error deleting the file, and a positive value if no attempt\n+was made to unlink the file because it is special.\n+\n+@end deftypefn\n+\n @c vasprintf.c:51\n @deftypefn Extension int vasprintf (char **@var{resptr}, const char *@var{format}, va_list @var{args})\n \n@@ -1153,4 +1180,13 @@ will never return a @code{NULL} pointer.\n \n @end deftypefn\n \n+@c xstrndup.c:23\n+@deftypefn Replacement char* xstrndup (const char *@var{s}, size_t @var{n})\n+\n+Returns a pointer to a copy of @var{s} with at most @var{n} characters\n+without fail, using @code{xmalloc} to obtain memory.  The result is\n+always NUL terminated.\n+\n+@end deftypefn\n+\n "}, {"sha": "3d6b93d3143574f2e680ccf53f207003e721a39f", "filename": "libiberty/strndup.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2Fstrndup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2Fstrndup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrndup.c?ref=17998b22b59b393fe28c766e3bd72a0419f70041", "patch": "@@ -0,0 +1,61 @@\n+/* Implement the strndup function.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Written by Kaveh R. Ghazi <ghazi@caip.rutgers.edu>.\n+\n+This file is part of the libiberty library.\n+Libiberty is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Library General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+Libiberty is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public\n+License along with libiberty; see the file COPYING.LIB.  If\n+not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/*\n+\n+@deftypefn Extension char* strndup (const char *@var{s}, size_t @var{n})\n+\n+Returns a pointer to a copy of @var{s} with at most @var{n} characters\n+in memory obtained from @code{malloc}, or @code{NULL} if insufficient\n+memory was available.  The result is always NUL terminated.\n+\n+@end deftypefn\n+\n+*/\n+\n+#include \"ansidecl.h\"\n+#ifdef ANSI_PROTOTYPES\n+#include <stddef.h>\n+#else\n+#define size_t unsigned long\n+#endif\n+\n+extern size_t\tstrlen PARAMS ((const char*));\n+extern PTR\tmalloc PARAMS ((size_t));\n+extern PTR\tmemcpy PARAMS ((PTR, const PTR, size_t));\n+\n+char *\n+strndup(s, n)\n+     const char *s;\n+     size_t n;\n+{\n+  char *result;\n+  size_t len = strlen (s);\n+\n+  if (n < len)\n+    len = n;\n+\n+  result = malloc (len + 1);\n+  if (!result)\n+    return 0;\n+\n+  result[len] = '\\0';\n+  return memcpy (result, s, len);\n+}"}, {"sha": "b481e4ad712ec37c9889c8a6ada5ac1b819486f7", "filename": "libiberty/xstrndup.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2Fxstrndup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17998b22b59b393fe28c766e3bd72a0419f70041/libiberty%2Fxstrndup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxstrndup.c?ref=17998b22b59b393fe28c766e3bd72a0419f70041", "patch": "@@ -0,0 +1,62 @@\n+/* Implement the xstrndup function.\n+   Copyright (C) 2005 Free Software Foundation, Inc.\n+   Written by Kaveh R. Ghazi <ghazi@caip.rutgers.edu>.\n+\n+This file is part of the libiberty library.\n+Libiberty is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Library General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+Libiberty is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public\n+License along with libiberty; see the file COPYING.LIB.  If\n+not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/*\n+\n+@deftypefn Replacement char* xstrndup (const char *@var{s}, size_t @var{n})\n+\n+Returns a pointer to a copy of @var{s} with at most @var{n} characters\n+without fail, using @code{xmalloc} to obtain memory.  The result is\n+always NUL terminated.\n+\n+@end deftypefn\n+\n+*/\n+\n+#ifdef HAVE_CONFIG_H\n+#include \"config.h\"\n+#endif\n+#include <sys/types.h>\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+# ifdef HAVE_STRINGS_H\n+#  include <strings.h>\n+# endif\n+#endif\n+#include \"ansidecl.h\"\n+#include \"libiberty.h\"\n+\n+char *\n+xstrndup (s, n)\n+     const char *s;\n+     size_t n;\n+{\n+  char *result;\n+  size_t len = strlen (s);\n+\n+  if (n < len)\n+    len = n;\n+\n+  result = xmalloc (len + 1);\n+\n+  result[len] = '\\0';\n+  return memcpy (result, s, len);\n+}"}]}