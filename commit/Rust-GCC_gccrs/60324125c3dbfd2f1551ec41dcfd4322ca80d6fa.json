{"sha": "60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "node_id": "C_kwDOANBUbNoAKDYwMzI0MTI1YzNkYmZkMmYxNTUxZWM0MWRjZmQ0MzIyY2E4MGQ2ZmE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-13T14:17:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-13T14:17:42Z"}, "message": "Merge #1088\n\n1088: rust-session-manager: better crate name handling logic r=philberty a=liushuyu\n\n- rust-session-manager: set and validate crate name properly\r\n- testsuite/rust: fix the testcases and add more testcases for testing crate name handling\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>", "tree": {"sha": "5b14afb96ad6767da71274de0547328cc5227969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b14afb96ad6767da71274de0547328cc5227969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVtuGCRBK7hj4Ov3rIwAAdOwIAEEAZTC9FlECLqlkQxhbflEQ\nBZAVFJ2hA+WNTty00OuKmhYb7pmPES6CNwHq/iAFtv4ojzrTHW/MyBeajXaTZTZu\nyO0YnNTEIbsvbwBOWPdo0cB8Z4oFmK3YTboChREMXMxTXceKlEaWDMx8sNkkl3ew\nW451o59n2MFhg1cu7vzBOBU7sFvLNeSOvSerd3LWzrpIm88QB8i/4jfLGepH3bYX\nPG0GoUG+dN2tCjHl7z5rvLc1Y46uP5/S3EnYw9TJriHT02rXl/GHfKMstlokAyhy\ne234VU1cMhCd1ehwiJ1VHPuKGpVCsk/V/ok5ME2RwMivSOFeDM7OlmvALHYtc/Q=\n=pNIW\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b14afb96ad6767da71274de0547328cc5227969\nparent 497ee70b776574aa3559c7d49a5cc7cf359d320e\nparent a125901c55ea18dc7aa1d34b5d938d1e8352d5f1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649859462 +0000\ncommitter GitHub <noreply@github.com> 1649859462 +0000\n\nMerge #1088\n\n1088: rust-session-manager: better crate name handling logic r=philberty a=liushuyu\n\n- rust-session-manager: set and validate crate name properly\r\n- testsuite/rust: fix the testcases and add more testcases for testing crate name handling\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497ee70b776574aa3559c7d49a5cc7cf359d320e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/497ee70b776574aa3559c7d49a5cc7cf359d320e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/497ee70b776574aa3559c7d49a5cc7cf359d320e"}, {"sha": "a125901c55ea18dc7aa1d34b5d938d1e8352d5f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a125901c55ea18dc7aa1d34b5d938d1e8352d5f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a125901c55ea18dc7aa1d34b5d938d1e8352d5f1"}], "stats": {"total": 181, "additions": 170, "deletions": 11}, "files": [{"sha": "4584c93cea1cfa483ee234d97c6352c1504dbc49", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "patch": "@@ -458,6 +458,7 @@ run_rust_tests ()\n   simple_assert ();\n   rust_cfg_parser_test ();\n   rust_privacy_ctx_test ();\n+  rust_crate_name_validation_test ();\n }\n } // namespace selftest\n "}, {"sha": "bdab0d89feb8c9579826ad4598984f2924ef57cb", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 127, "deletions": 6, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "patch": "@@ -35,6 +35,7 @@\n #include \"diagnostic.h\"\n #include \"input.h\"\n #include \"rust-target.h\"\n+#include \"selftest.h\"\n \n extern bool\n saw_errors (void);\n@@ -54,7 +55,65 @@ const char *kHIRDumpFile = \"gccrs.hir.dump\";\n const char *kHIRTypeResolutionDumpFile = \"gccrs.type-resolution.dump\";\n const char *kTargetOptionsDumpFile = \"gccrs.target-options.dump\";\n \n-const std::string kDefaultCrateName = \"example\";\n+const std::string kDefaultCrateName = \"rust_out\";\n+const size_t kMaxNameLength = 64;\n+\n+static std::string\n+infer_crate_name (const std::string &filename)\n+{\n+  if (filename == \"-\")\n+    return kDefaultCrateName;\n+\n+  std::string crate = std::string (filename);\n+  size_t path_sep = crate.find_last_of (file_separator);\n+\n+  // find the base filename\n+  if (path_sep != std::string::npos)\n+    crate.erase (0, path_sep + 1);\n+\n+  // find the file stem name (remove file extension)\n+  size_t ext_position = crate.find_last_of ('.');\n+  if (ext_position != std::string::npos)\n+    crate.erase (ext_position);\n+\n+  // Replace all the '-' symbols with '_' per Rust rules\n+  for (auto &c : crate)\n+    {\n+      if (c == '-')\n+\tc = '_';\n+    }\n+  return crate;\n+}\n+\n+/* Validate the crate name using the ASCII rules\n+   TODO: Support Unicode version of the rules */\n+\n+static bool\n+validate_crate_name (const std::string &crate_name, Error &error)\n+{\n+  if (crate_name.empty ())\n+    {\n+      error = Error (Location (), \"crate name cannot be empty\");\n+      return false;\n+    }\n+  if (crate_name.length () > kMaxNameLength)\n+    {\n+      error = Error (Location (), \"crate name cannot exceed %ld characters\",\n+\t\t     kMaxNameLength);\n+      return false;\n+    }\n+  for (auto &c : crate_name)\n+    {\n+      if (!(ISALNUM (c) || c == '_'))\n+\t{\n+\t  error = Error (Location (),\n+\t\t\t \"invalid character %<%c%> in crate name: %<%s%>\", c,\n+\t\t\t crate_name.c_str ());\n+\t  return false;\n+\t}\n+    }\n+  return true;\n+}\n \n // Implicitly enable a target_feature (and recursively enable dependencies).\n void\n@@ -311,10 +370,6 @@ Session::init ()\n \n   // setup backend to GCC GIMPLE\n   backend = rust_get_backend ();\n-\n-  // set the default crate name if crate name was unset\n-  if (options.crate_name.empty ())\n-    options.set_crate_name (kDefaultCrateName);\n }\n \n /* Initialise default options. Actually called before handle_option, unlike init\n@@ -347,7 +402,16 @@ Session::handle_option (\n     case OPT_frust_crate_:\n       // set the crate name\n       if (arg != nullptr)\n-\tret = options.set_crate_name (arg);\n+\t{\n+\t  auto error = Error (Location (), std::string ());\n+\t  if ((ret = validate_crate_name (arg, error)))\n+\t    options.set_crate_name (arg);\n+\t  else\n+\t    {\n+\t      rust_assert (!error.message.empty ());\n+\t      error.emit_error ();\n+\t    }\n+\t}\n       else\n \tret = false;\n       break;\n@@ -479,6 +543,32 @@ Session::enable_dump (std::string arg)\n void\n Session::parse_files (int num_files, const char **files)\n {\n+  if (options.crate_name.empty ())\n+    {\n+      /* HACK: We use the first file to infer the crate name, which might be\n+       * incorrect: since rustc only allows one file to be supplied in the\n+       * command-line */\n+      auto filename = \"-\";\n+      if (num_files > 0)\n+\tfilename = files[0];\n+\n+      auto crate_name = infer_crate_name (filename);\n+      Error error ((Location ()), std::string ());\n+      rust_debug (\"inferred crate name: %s\", crate_name.c_str ());\n+      if (!validate_crate_name (crate_name, error))\n+\t{\n+\t  // fake a linemapping so that we can show the filename\n+\t  linemap->start_file (filename, 0);\n+\t  linemap->start_line (0, 1);\n+\t  error.emit_error ();\n+\t  rust_inform (linemap->get_location (0),\n+\t\t       \"crate name inferred from this file\");\n+\t  linemap->stop ();\n+\t  return;\n+\t}\n+      options.set_crate_name (crate_name);\n+    }\n+\n   auto mappings = Analysis::Mappings::get ();\n   CrateNum crate_num = mappings->setup_crate_mappings (options.crate_name);\n   mappings->set_current_crate (crate_num);\n@@ -1121,3 +1211,34 @@ TargetOptions::enable_implicit_feature_reqs (std::string feature)\n  *  - code generation\n  *  - link */\n } // namespace Rust\n+\n+#if CHECKING_P\n+namespace selftest {\n+void\n+rust_crate_name_validation_test (void)\n+{\n+  auto error = Rust::Error (Location (), std::string ());\n+  ASSERT_TRUE (Rust::validate_crate_name (\"example\", error));\n+  ASSERT_TRUE (Rust::validate_crate_name (\"abcdefg_1234\", error));\n+  ASSERT_TRUE (Rust::validate_crate_name (\"1\", error));\n+  // FIXME: The next test does not pass as of current implementation\n+  // ASSERT_TRUE (Rust::CompileOptions::validate_crate_name (\"\u60ca\u5413\"));\n+  // NOTE: - is not allowed in the crate name ...\n+\n+  ASSERT_FALSE (Rust::validate_crate_name (\"abcdefg-1234\", error));\n+  ASSERT_FALSE (Rust::validate_crate_name (\"a+b\", error));\n+  ASSERT_FALSE (Rust::validate_crate_name (\"/a+b/\", error));\n+\n+  /* Tests for crate name inference */\n+  ASSERT_EQ (Rust::infer_crate_name (\"c.rs\"), \"c\");\n+  // NOTE: ... but - is allowed when in the filename\n+  ASSERT_EQ (Rust::infer_crate_name (\"a-b.rs\"), \"a_b\");\n+  ASSERT_EQ (Rust::infer_crate_name (\"book.rs.txt\"), \"book.rs\");\n+#if defined(HAVE_DOS_BASED_FILE_SYSTEM)\n+  ASSERT_EQ (Rust::infer_crate_name (\"a\\\\c\\\\a-b.rs\"), \"a_b\");\n+#else\n+  ASSERT_EQ (Rust::infer_crate_name (\"a/c/a-b.rs\"), \"a_b\");\n+#endif\n+}\n+} // namespace selftest\n+#endif // CHECKING_P"}, {"sha": "6fa83d97ca656b48ea743a5b447c663df9828e2f", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "patch": "@@ -22,6 +22,7 @@\n \n #include \"rust-linemap.h\"\n #include \"rust-backend.h\"\n+#include \"safe-ctype.h\"\n \n #include \"config.h\"\n #include \"rust-system.h\"\n@@ -212,11 +213,11 @@ struct CompileOptions\n     enable_dump_option (DumpOption::TYPE_RESOLUTION_DUMP);\n   }\n \n-  bool set_crate_name (std::string name)\n+  void set_crate_name (std::string name)\n   {\n-    // TODO: validate the crate name?\n+    rust_assert (!name.empty ());\n+\n     crate_name = std::move (name);\n-    return true;\n   }\n \n   void set_edition (int raw_edition)\n@@ -304,4 +305,11 @@ struct Session\n };\n } // namespace Rust\n \n+#if CHECKING_P\n+namespace selftest {\n+extern void\n+rust_crate_name_validation_test (void);\n+}\n+#endif // CHECKING_P\n+\n #endif"}, {"sha": "6c59c255cc2f278eb2b401754dc8de07f764441e", "filename": "gcc/testsuite/rust/compile/bad-crate-name.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad-crate-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad-crate-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad-crate-name.rs?ref=60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options \"-frust-crate=bad+name\" }\n+// { dg-excess-errors \"invalid crate name: ....\" }\n+// { dg-excess-errors \"unrecognized command-line option ....\" }\n+fn main() {}"}, {"sha": "cfbebb0698d4a256fda86f5142c66cd1ba8c4590", "filename": "gcc/testsuite/rust/compile/bad=file-name.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad%3Dfile-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad%3Dfile-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad%3Dfile-name.rs?ref=60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-fdump-tree-gimple -frust-crate=good_name\" }\n+pub fn does_nothing() {}\n+fn main() {\n+    does_nothing()\n+}\n+// { dg-final { scan-tree-dump-times {good_name::does_nothing} 2 gimple } }\n+// { dg-final { scan-tree-dump-times {good_name::main} 1 gimple } }"}, {"sha": "56e2093b27c7ff880c0b14d91bfe5d6614a1df0d", "filename": "gcc/testsuite/rust/compile/bad_file_name.txt.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_file_name.txt.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_file_name.txt.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_file_name.txt.rs?ref=60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "patch": "@@ -0,0 +1,3 @@\n+// { dg-excess-errors \"invalid crate name: ....\" }\n+// { dg-bogus \"unrecognized command-line option ....\" }\n+fn main() {}"}, {"sha": "193e7b5b6980fb69a9b3a32f2888cb4bced5842b", "filename": "gcc/testsuite/rust/compile/canonical_paths1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcanonical_paths1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcanonical_paths1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fcanonical_paths1.rs?ref=60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "patch": "@@ -1,4 +1,4 @@\n-// { dg-additional-options \"-w -fdump-tree-gimple\" }\n+// { dg-additional-options \"-w -fdump-tree-gimple -frust-crate=example\" }\n struct Foo(i32);\n \n trait TR {"}, {"sha": "b0c0086c04c0e72bbca4b68e11c061004e657583", "filename": "gcc/testsuite/rust/compile/infer-crate-name.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Finfer-crate-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Finfer-crate-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Finfer-crate-name.rs?ref=60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n+pub fn does_nothing() {}\n+fn main() {\n+    does_nothing()\n+}\n+// { dg-final { scan-tree-dump-times {infer_crate_name::does_nothing} 2 gimple } }\n+// { dg-final { scan-tree-dump-times {infer_crate_name::main} 1 gimple } }"}, {"sha": "a86791570243ad5fe7f8e17b593ff24bc2b1c279", "filename": "gcc/testsuite/rust/compile/specify-crate-name.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Fspecify-crate-name.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Fspecify-crate-name.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fspecify-crate-name.rs?ref=60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options \"-frust-crate=fancy_crate_name -fdump-tree-gimple\" }\n+pub fn does_nothing() {}\n+fn main() {\n+    does_nothing()\n+}\n+// { dg-final { scan-tree-dump-times {fancy_crate_name::does_nothing} 2 gimple } }\n+// { dg-final { scan-tree-dump-times {fancy_crate_name::main} 1 gimple } }"}, {"sha": "9e8ea6b100bb490247508fa2a95b7d8fc811fed8", "filename": "gcc/testsuite/rust/compile/torture/struct_decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_decl.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_decl.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_decl.rs?ref=60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "patch": "@@ -1,4 +1,4 @@\n-// { dg-additional-options -fdump-tree-gimple }\n+// { dg-additional-options \"-fdump-tree-gimple -frust-crate=example\" }\n \n struct Foo {\n     a: u16,"}, {"sha": "8d81bae6a3eb30ebc7fdf462e30d453d84fbe19d", "filename": "gcc/testsuite/rust/compile/traits9.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits9.rs?ref=60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "patch": "@@ -1,3 +1,4 @@\n+// { dg-additional-options -frust-crate=example }\n struct Foo(i32);\n trait Bar {\n     fn baz(&self);"}]}