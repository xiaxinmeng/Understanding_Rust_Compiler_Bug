{"sha": "38693e39b6de02d0e868e18a73de39e62fee3936", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg2OTNlMzliNmRlMDJkMGU4NjhlMThhNzNkZTM5ZTYyZmVlMzkzNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2013-11-06T21:49:36Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2013-11-06T21:49:36Z"}, "message": "Cast pointers to uptr for 64-bit syscalls\n\n\tPR sanitizer/59018\n\t* sanitizer_common/sanitizer_linux.cc (internal_mmap,\n\tinternal_munmap, internal_open, internal_read, internal_write,\n\tinternal_stat, internal_lstat, internal_fstat, internal_readlink,\n\tinternal_unlink, internal_execve, NanoTime, BlockingMutex::Lock,\n\tBlockingMutex::Unlock, internal_ptrace, internal_getdents,\n\tinternal_sigaltstack): Cast pointers to uptr for 64-bit syscalls.\n\nFrom-SVN: r204480", "tree": {"sha": "9f673c770c0056fd051200261678d64649b1e506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f673c770c0056fd051200261678d64649b1e506"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38693e39b6de02d0e868e18a73de39e62fee3936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38693e39b6de02d0e868e18a73de39e62fee3936", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38693e39b6de02d0e868e18a73de39e62fee3936", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38693e39b6de02d0e868e18a73de39e62fee3936/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2baa574d5c09d9425fafaca92c7a287403a7d0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2baa574d5c09d9425fafaca92c7a287403a7d0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2baa574d5c09d9425fafaca92c7a287403a7d0b"}], "stats": {"total": 48, "additions": 29, "deletions": 19}, "files": [{"sha": "b874b13c4f39425e61b14569b951fdf8eaa373fb", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38693e39b6de02d0e868e18a73de39e62fee3936/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38693e39b6de02d0e868e18a73de39e62fee3936/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=38693e39b6de02d0e868e18a73de39e62fee3936", "patch": "@@ -1,3 +1,13 @@\n+2013-11-05  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR sanitizer/59018\n+\t* sanitizer_common/sanitizer_linux.cc (internal_mmap,\n+\tinternal_munmap, internal_open, internal_read, internal_write,\n+\tinternal_stat, internal_lstat, internal_fstat, internal_readlink,\n+\tinternal_unlink, internal_execve, NanoTime, BlockingMutex::Lock,\n+\tBlockingMutex::Unlock, internal_ptrace, internal_getdents,\n+\tinternal_sigaltstack): Cast pointers to uptr for 64-bit syscalls.\n+\n 2013-11-04  Kostya Serebryany  <kcc@google.com>\n \n \t* All source files: Merge from upstream r191666."}, {"sha": "e48bee5be6e2ae8ee72d23d74b1628107a1f3cda", "filename": "libsanitizer/sanitizer_common/sanitizer_linux.cc", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38693e39b6de02d0e868e18a73de39e62fee3936/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38693e39b6de02d0e868e18a73de39e62fee3936/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cc?ref=38693e39b6de02d0e868e18a73de39e62fee3936", "patch": "@@ -77,26 +77,26 @@ namespace __sanitizer {\n uptr internal_mmap(void *addr, uptr length, int prot, int flags,\n                     int fd, u64 offset) {\n #if SANITIZER_LINUX_USES_64BIT_SYSCALLS\n-  return internal_syscall(__NR_mmap, addr, length, prot, flags, fd, offset);\n+  return internal_syscall(__NR_mmap, (uptr)addr, length, prot, flags, fd, offset);\n #else\n   return internal_syscall(__NR_mmap2, addr, length, prot, flags, fd, offset);\n #endif\n }\n \n uptr internal_munmap(void *addr, uptr length) {\n-  return internal_syscall(__NR_munmap, addr, length);\n+  return internal_syscall(__NR_munmap, (uptr)addr, length);\n }\n \n uptr internal_close(fd_t fd) {\n   return internal_syscall(__NR_close, fd);\n }\n \n uptr internal_open(const char *filename, int flags) {\n-  return internal_syscall(__NR_open, filename, flags);\n+  return internal_syscall(__NR_open, (uptr)filename, flags);\n }\n \n uptr internal_open(const char *filename, int flags, u32 mode) {\n-  return internal_syscall(__NR_open, filename, flags, mode);\n+  return internal_syscall(__NR_open, (uptr)filename, flags, mode);\n }\n \n uptr OpenFile(const char *filename, bool write) {\n@@ -106,13 +106,13 @@ uptr OpenFile(const char *filename, bool write) {\n \n uptr internal_read(fd_t fd, void *buf, uptr count) {\n   sptr res;\n-  HANDLE_EINTR(res, (sptr)internal_syscall(__NR_read, fd, buf, count));\n+  HANDLE_EINTR(res, (sptr)internal_syscall(__NR_read, fd, (uptr)buf, count));\n   return res;\n }\n \n uptr internal_write(fd_t fd, const void *buf, uptr count) {\n   sptr res;\n-  HANDLE_EINTR(res, (sptr)internal_syscall(__NR_write, fd, buf, count));\n+  HANDLE_EINTR(res, (sptr)internal_syscall(__NR_write, fd, (uptr)buf, count));\n   return res;\n }\n \n@@ -138,7 +138,7 @@ static void stat64_to_stat(struct stat64 *in, struct stat *out) {\n \n uptr internal_stat(const char *path, void *buf) {\n #if SANITIZER_LINUX_USES_64BIT_SYSCALLS\n-  return internal_syscall(__NR_stat, path, buf);\n+  return internal_syscall(__NR_stat, (uptr)path, (uptr)buf);\n #else\n   struct stat64 buf64;\n   int res = internal_syscall(__NR_stat64, path, &buf64);\n@@ -149,7 +149,7 @@ uptr internal_stat(const char *path, void *buf) {\n \n uptr internal_lstat(const char *path, void *buf) {\n #if SANITIZER_LINUX_USES_64BIT_SYSCALLS\n-  return internal_syscall(__NR_lstat, path, buf);\n+  return internal_syscall(__NR_lstat, (uptr)path, (uptr)buf);\n #else\n   struct stat64 buf64;\n   int res = internal_syscall(__NR_lstat64, path, &buf64);\n@@ -160,7 +160,7 @@ uptr internal_lstat(const char *path, void *buf) {\n \n uptr internal_fstat(fd_t fd, void *buf) {\n #if SANITIZER_LINUX_USES_64BIT_SYSCALLS\n-  return internal_syscall(__NR_fstat, fd, buf);\n+  return internal_syscall(__NR_fstat, fd, (uptr)buf);\n #else\n   struct stat64 buf64;\n   int res = internal_syscall(__NR_fstat64, fd, &buf64);\n@@ -181,11 +181,11 @@ uptr internal_dup2(int oldfd, int newfd) {\n }\n \n uptr internal_readlink(const char *path, char *buf, uptr bufsize) {\n-  return internal_syscall(__NR_readlink, path, buf, bufsize);\n+  return internal_syscall(__NR_readlink, (uptr)path, (uptr)buf, bufsize);\n }\n \n uptr internal_unlink(const char *path) {\n-  return internal_syscall(__NR_unlink, path);\n+  return internal_syscall(__NR_unlink, (uptr)path);\n }\n \n uptr internal_sched_yield() {\n@@ -199,7 +199,7 @@ void internal__exit(int exitcode) {\n \n uptr internal_execve(const char *filename, char *const argv[],\n                      char *const envp[]) {\n-  return internal_syscall(__NR_execve, filename, argv, envp);\n+  return internal_syscall(__NR_execve, (uptr)filename, (uptr)argv, (uptr)envp);\n }\n \n // ----------------- sanitizer_common.h\n@@ -217,7 +217,7 @@ uptr GetTid() {\n \n u64 NanoTime() {\n   kernel_timeval tv = {};\n-  internal_syscall(__NR_gettimeofday, &tv, 0);\n+  internal_syscall(__NR_gettimeofday, (uptr)&tv, 0);\n   return (u64)tv.tv_sec * 1000*1000*1000 + tv.tv_usec * 1000;\n }\n \n@@ -539,15 +539,15 @@ void BlockingMutex::Lock() {\n   if (atomic_exchange(m, MtxLocked, memory_order_acquire) == MtxUnlocked)\n     return;\n   while (atomic_exchange(m, MtxSleeping, memory_order_acquire) != MtxUnlocked)\n-    internal_syscall(__NR_futex, m, FUTEX_WAIT, MtxSleeping, 0, 0, 0);\n+    internal_syscall(__NR_futex, (uptr)m, FUTEX_WAIT, MtxSleeping, 0, 0, 0);\n }\n \n void BlockingMutex::Unlock() {\n   atomic_uint32_t *m = reinterpret_cast<atomic_uint32_t *>(&opaque_storage_);\n   u32 v = atomic_exchange(m, MtxUnlocked, memory_order_relaxed);\n   CHECK_NE(v, MtxUnlocked);\n   if (v == MtxSleeping)\n-    internal_syscall(__NR_futex, m, FUTEX_WAKE, 1, 0, 0, 0);\n+    internal_syscall(__NR_futex, (uptr)m, FUTEX_WAKE, 1, 0, 0, 0);\n }\n \n void BlockingMutex::CheckLocked() {\n@@ -568,11 +568,11 @@ struct linux_dirent {\n \n // Syscall wrappers.\n uptr internal_ptrace(int request, int pid, void *addr, void *data) {\n-  return internal_syscall(__NR_ptrace, request, pid, addr, data);\n+  return internal_syscall(__NR_ptrace, request, pid, (uptr)addr, (uptr)data);\n }\n \n uptr internal_waitpid(int pid, int *status, int options) {\n-  return internal_syscall(__NR_wait4, pid, status, options, 0 /* rusage */);\n+  return internal_syscall(__NR_wait4, pid, (uptr)status, options, 0 /* rusage */);\n }\n \n uptr internal_getpid() {\n@@ -584,7 +584,7 @@ uptr internal_getppid() {\n }\n \n uptr internal_getdents(fd_t fd, struct linux_dirent *dirp, unsigned int count) {\n-  return internal_syscall(__NR_getdents, fd, dirp, count);\n+  return internal_syscall(__NR_getdents, fd, (uptr)dirp, count);\n }\n \n uptr internal_lseek(fd_t fd, OFF_T offset, int whence) {\n@@ -597,7 +597,7 @@ uptr internal_prctl(int option, uptr arg2, uptr arg3, uptr arg4, uptr arg5) {\n \n uptr internal_sigaltstack(const struct sigaltstack *ss,\n                          struct sigaltstack *oss) {\n-  return internal_syscall(__NR_sigaltstack, ss, oss);\n+  return internal_syscall(__NR_sigaltstack, (uptr)ss, (uptr)oss);\n }\n \n // ThreadLister implementation."}]}