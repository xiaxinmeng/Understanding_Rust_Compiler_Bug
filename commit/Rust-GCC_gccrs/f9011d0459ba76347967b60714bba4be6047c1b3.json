{"sha": "f9011d0459ba76347967b60714bba4be6047c1b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkwMTFkMDQ1OWJhNzYzNDc5NjdiNjA3MTRiYmE0YmU2MDQ3YzFiMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1999-11-29T23:02:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1999-11-29T23:02:14Z"}, "message": "Install proper change\n\nFrom-SVN: r30715", "tree": {"sha": "3a7215d454a748914aba1add03a9b5e2c31d4d06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a7215d454a748914aba1add03a9b5e2c31d4d06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9011d0459ba76347967b60714bba4be6047c1b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9011d0459ba76347967b60714bba4be6047c1b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9011d0459ba76347967b60714bba4be6047c1b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9011d0459ba76347967b60714bba4be6047c1b3/comments", "author": null, "committer": null, "parents": [{"sha": "59adecfa8c8fbb80e89a30775f9e0e1f324e52ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59adecfa8c8fbb80e89a30775f9e0e1f324e52ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59adecfa8c8fbb80e89a30775f9e0e1f324e52ca"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "021a7d0b233a48dddae0aea9772e682db3eed90f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9011d0459ba76347967b60714bba4be6047c1b3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9011d0459ba76347967b60714bba4be6047c1b3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f9011d0459ba76347967b60714bba4be6047c1b3", "patch": "@@ -4367,14 +4367,15 @@ extract_muldiv (t, c, code, wide_type)\n       if (t1 != 0 && t2 != 0)\n \treturn fold (build (tcode, ctype, convert (ctype, t1),\n \t\t\t    convert (ctype, t2)));\n-      else if (TREE_CODE (op1) != INTEGER_CST)\n-\tbreak;\n \n       /* If this was a subtraction, negate OP1 and set it to be an addition.\n \t This simplifies the logic below.  */\n       if (tcode == MINUS_EXPR)\n \ttcode = PLUS_EXPR, op1 = negate_expr (op1);\n \n+      if (TREE_CODE (op1) != INTEGER_CST)\n+\tbreak;\n+\n       /* If either OP1 or C are negative, this optimization is not safe for\n \t some of the division and remainder types while for others we need\n \t to change the code.  */"}]}