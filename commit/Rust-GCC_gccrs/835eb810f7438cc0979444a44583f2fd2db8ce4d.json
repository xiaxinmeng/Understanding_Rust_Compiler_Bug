{"sha": "835eb810f7438cc0979444a44583f2fd2db8ce4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM1ZWI4MTBmNzQzOGNjMDk3OTQ0NGE0NDU4M2YyZmQyZGI4Y2U0ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-04-16T15:34:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-04-16T15:34:47Z"}, "message": "re PR debug/43762 (VLA artificial length var loclist is missing DW_OP_stack_value)\n\n\tPR debug/43762\n\t* dwarf2out.c (add_bound_info): Always call loc_list_from_tree\n\twith want_address 2 and in case a single element list might be\n\tpossible, call it again with want_address 0.\n\nFrom-SVN: r158430", "tree": {"sha": "26a80bc0dca583583b55827d2866fc920e0edb4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26a80bc0dca583583b55827d2866fc920e0edb4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/835eb810f7438cc0979444a44583f2fd2db8ce4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/835eb810f7438cc0979444a44583f2fd2db8ce4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/835eb810f7438cc0979444a44583f2fd2db8ce4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/835eb810f7438cc0979444a44583f2fd2db8ce4d/comments", "author": null, "committer": null, "parents": [{"sha": "db624ecb93ff1f8c8953fd1caadf64b1f1d71122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db624ecb93ff1f8c8953fd1caadf64b1f1d71122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db624ecb93ff1f8c8953fd1caadf64b1f1d71122"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "3060efd37cfeb45bedb9845f573ca2ba6c84f5c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835eb810f7438cc0979444a44583f2fd2db8ce4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835eb810f7438cc0979444a44583f2fd2db8ce4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=835eb810f7438cc0979444a44583f2fd2db8ce4d", "patch": "@@ -1,4 +1,11 @@\n-2010-04-12  Kaushik Phatak<kaushik.phatak@kpitcummins.com>\n+2010-04-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/43762\n+\t* dwarf2out.c (add_bound_info): Always call loc_list_from_tree\n+\twith want_address 2 and in case a single element list might be\n+\tpossible, call it again with want_address 0.\n+\n+2010-04-12  Kaushik Phatak  <kaushik.phatak@kpitcummins.com>\n \n \t* config/h8300/predicate.md (bit_operand): Allow immediate values that\n \tsatisfy 'U' constraint."}, {"sha": "5a9a3b89dc0a1361dc1e5f3261e986baa052680f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/835eb810f7438cc0979444a44583f2fd2db8ce4d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/835eb810f7438cc0979444a44583f2fd2db8ce4d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=835eb810f7438cc0979444a44583f2fd2db8ce4d", "patch": "@@ -16355,8 +16355,6 @@ lower_bound_default (void)\n static void\n add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree bound)\n {\n-  int want_address = 2;\n-\n   switch (TREE_CODE (bound))\n     {\n     case ERROR_MARK:\n@@ -16419,7 +16417,6 @@ add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree b\n \t    add_AT_die_ref (subrange_die, bound_attr, decl_die);\n \t    break;\n \t  }\n-\twant_address = 0;\n       }\n       /* FALLTHRU */\n \n@@ -16431,15 +16428,23 @@ add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree b\n \tdw_die_ref ctx, decl_die;\n \tdw_loc_list_ref list;\n \n-\tlist = loc_list_from_tree (bound, want_address);\n-\tif (list == NULL)\n-\t  break;\n-\n-\tif (single_element_loc_list_p (list))\n+\tlist = loc_list_from_tree (bound, 2);\n+\tif (list == NULL || single_element_loc_list_p (list))\n \t  {\n-\t    add_AT_loc (subrange_die, bound_attr, list->expr);\n-\t    break;\n+\t    /* If DW_AT_*bound is not a reference nor constant, it is\n+\t       a DWARF expression rather than location description.\n+\t       For that loc_list_from_tree (bound, 0) is needed.\n+\t       If that fails to give a single element list,\n+\t       fall back to outputting this as a reference anyway.  */\n+\t    dw_loc_list_ref list2 = loc_list_from_tree (bound, 0);\n+\t    if (list2 && single_element_loc_list_p (list2))\n+\t      {\n+\t\tadd_AT_loc (subrange_die, bound_attr, list2->expr);\n+\t\tbreak;\n+\t      }\n \t  }\n+\tif (list == NULL)\n+\t  break;\n \n \tif (current_function_decl == 0)\n \t  ctx = comp_unit_die;"}]}