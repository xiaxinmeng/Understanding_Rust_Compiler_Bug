{"sha": "d09847357b965a2c2cda063827ce362d4c9c86f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA5ODQ3MzU3Yjk2NWEyYzJjZGEwNjM4MjdjZTM2MmQ0YzljODZmMg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-12-30T10:43:38Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-12-30T10:43:38Z"}, "message": "Remove KIND argument from INDEX so it does not mess up scalarization.\n\n2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/91541\n\t* intrinsic.c (add_sym_4ind): New function.\n\t(add_functions): Use it for INDEX.\n\t(resolve_intrinsic): Also call f1m for INDEX.\n\t* intrinsic.h (gfc_resolve_index_func): Adjust prototype to\n\ttake a gfc_arglist instead of individual arguments.\n\t* iresolve.c (gfc_resolve_index_func): Adjust arguments.\n\tRemove KIND argument if present, and make sure this is\n\tnot done twice.\n\t* trans-decl.c: Include \"intrinsic.h\".\n\t(gfc_get_extern_function_decl): Special case for resolving INDEX.\n\n2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/91541\n\t* gfortran.dg/index_3.f90: New test.\n\nFrom-SVN: r279763", "tree": {"sha": "4ba267b816f649e42c6fda947c92832f81c01fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ba267b816f649e42c6fda947c92832f81c01fc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d09847357b965a2c2cda063827ce362d4c9c86f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09847357b965a2c2cda063827ce362d4c9c86f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d09847357b965a2c2cda063827ce362d4c9c86f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09847357b965a2c2cda063827ce362d4c9c86f2/comments", "author": null, "committer": null, "parents": [{"sha": "672511187345d30ccd725214ac4b34b181bd6569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672511187345d30ccd725214ac4b34b181bd6569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672511187345d30ccd725214ac4b34b181bd6569"}], "stats": {"total": 127, "additions": 113, "deletions": 14}, "files": [{"sha": "1e6d236910f8bd9b67bcf3310608c268d03deb6a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d09847357b965a2c2cda063827ce362d4c9c86f2", "patch": "@@ -1,3 +1,17 @@\n+2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/91541\n+\t* intrinsic.c (add_sym_4ind): New function.\n+\t(add_functions): Use it for INDEX.\n+\t(resolve_intrinsic): Also call f1m for INDEX.\n+\t* intrinsic.h (gfc_resolve_index_func): Adjust prototype to\n+\ttake a gfc_arglist instead of individual arguments.\n+\t* iresolve.c (gfc_resolve_index_func): Adjust arguments.\n+\tRemove KIND argument if present, and make sure this is\n+\tnot done twice.\n+\t* trans-decl.c: Include \"intrinsic.h\".\n+\t(gfc_get_extern_function_decl): Special case for resolving INDEX.\n+\n 2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/92961"}, {"sha": "9596018fe0aa99179568be2fe492a881f7ad0c14", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 41, "deletions": 7, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=d09847357b965a2c2cda063827ce362d4c9c86f2", "patch": "@@ -851,6 +851,39 @@ add_sym_4 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt ty\n \t   (void *) 0);\n }\n \n+/* Add a symbol to the function list where the function takes 4\n+   arguments and resolution may need to change the number or\n+   arrangement of arguments. This is the case for INDEX, which needs\n+   its KIND argument removed.  */\n+\n+static void\n+add_sym_4ind (const char *name, gfc_isym_id id, enum klass cl, int actual_ok,\n+\t      bt type, int kind, int standard,\n+\t      bool (*check) (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *),\n+\t      gfc_expr *(*simplify) (gfc_expr *, gfc_expr *, gfc_expr *,\n+\t\t\t\t     gfc_expr *),\n+\t      void (*resolve) (gfc_expr *, gfc_actual_arglist *),\n+\t      const char *a1, bt type1, int kind1, int optional1,\n+\t      const char *a2, bt type2, int kind2, int optional2,\n+\t      const char *a3, bt type3, int kind3, int optional3,\n+\t      const char *a4, bt type4, int kind4, int optional4 )\n+{\n+  gfc_check_f cf;\n+  gfc_simplify_f sf;\n+  gfc_resolve_f rf;\n+\n+  cf.f4 = check;\n+  sf.f4 = simplify;\n+  rf.f1m = resolve;\n+\n+  add_sym (name, id, cl, actual_ok, type, kind, standard, cf, sf, rf,\n+\t   a1, type1, kind1, optional1, INTENT_IN,\n+\t   a2, type2, kind2, optional2, INTENT_IN,\n+\t   a3, type3, kind3, optional3, INTENT_IN,\n+\t   a4, type4, kind4, optional4, INTENT_IN,\n+\t   (void *) 0);\n+}\n+\n \n /* Add a symbol to the subroutine list where the subroutine takes\n    4 arguments.  */\n@@ -2153,11 +2186,11 @@ add_functions (void)\n \n   /* The resolution function for INDEX is called gfc_resolve_index_func\n      because the name gfc_resolve_index is already used in resolve.c.  */\n-  add_sym_4 (\"index\", GFC_ISYM_INDEX, CLASS_ELEMENTAL, ACTUAL_YES,\n-\t     BT_INTEGER, di, GFC_STD_F77,\n-\t     gfc_check_index, gfc_simplify_index, gfc_resolve_index_func,\n-\t     stg, BT_CHARACTER, dc, REQUIRED, ssg, BT_CHARACTER, dc, REQUIRED,\n-\t     bck, BT_LOGICAL, dl, OPTIONAL, kind, BT_INTEGER, di, OPTIONAL);\n+  add_sym_4ind (\"index\", GFC_ISYM_INDEX, CLASS_ELEMENTAL, ACTUAL_YES,\n+\t\tBT_INTEGER, di, GFC_STD_F77,\n+\t\tgfc_check_index, gfc_simplify_index, gfc_resolve_index_func,\n+\t\tstg, BT_CHARACTER, dc, REQUIRED, ssg, BT_CHARACTER, dc, REQUIRED,\n+\t\tbck, BT_LOGICAL, dl, OPTIONAL, kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"index\", GFC_ISYM_INDEX, GFC_STD_F77);\n \n@@ -4434,9 +4467,10 @@ resolve_intrinsic (gfc_intrinsic_sym *specific, gfc_expr *e)\n \n   arg = e->value.function.actual;\n \n-  /* Special case hacks for MIN and MAX.  */\n+  /* Special case hacks for MIN, MAX and INDEX.  */\n   if (specific->resolve.f1m == gfc_resolve_max\n-      || specific->resolve.f1m == gfc_resolve_min)\n+      || specific->resolve.f1m == gfc_resolve_min\n+      || specific->resolve.f1m == gfc_resolve_index_func)\n     {\n       (*specific->resolve.f1m) (e, arg);\n       return;"}, {"sha": "f7d0a15f379f25ec83a6e098ce06f305eec087a5", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=d09847357b965a2c2cda063827ce362d4c9c86f2", "patch": "@@ -517,8 +517,7 @@ void gfc_resolve_ibits (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ibset (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_image_index (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_image_status (gfc_expr *, gfc_expr *, gfc_expr *);\n-void gfc_resolve_index_func (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n-\t\t\t     gfc_expr *);\n+void gfc_resolve_index_func (gfc_expr *, gfc_actual_arglist *);\n void gfc_resolve_ierrno (gfc_expr *);\n void gfc_resolve_ieor (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_ichar (gfc_expr *, gfc_expr *, gfc_expr *);"}, {"sha": "2a44a0a9978f528a87f036240ed1c58458045876", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=d09847357b965a2c2cda063827ce362d4c9c86f2", "patch": "@@ -1352,16 +1352,31 @@ gfc_resolve_ior (gfc_expr *f, gfc_expr *i, gfc_expr *j)\n \n \n void\n-gfc_resolve_index_func (gfc_expr *f, gfc_expr *str,\n-\t\t\tgfc_expr *sub_str ATTRIBUTE_UNUSED, gfc_expr *back,\n-\t\t\tgfc_expr *kind)\n+gfc_resolve_index_func (gfc_expr *f, gfc_actual_arglist *a)\n {\n   gfc_typespec ts;\n   gfc_clear_ts (&ts);\n+  gfc_expr *str, *back, *kind;\n+  gfc_actual_arglist *a_sub_str, *a_back, *a_kind;\n+\n+  if (f->do_not_resolve_again)\n+    return;\n+\n+  a_sub_str = a->next;\n+  a_back = a_sub_str->next;\n+  a_kind = a_back->next;\n+\n+  str = a->expr;\n+  back = a_back->expr;\n+  kind = a_kind->expr;\n \n   f->ts.type = BT_INTEGER;\n   if (kind)\n-    f->ts.kind = mpz_get_si (kind->value.integer);\n+    {\n+      f->ts.kind = mpz_get_si ((kind)->value.integer);\n+      a_back->next = NULL;\n+      gfc_free_actual_arglist (a_kind);\n+    }\n   else\n     f->ts.kind = gfc_default_integer_kind;\n \n@@ -1376,6 +1391,8 @@ gfc_resolve_index_func (gfc_expr *f, gfc_expr *str,\n \n   f->value.function.name\n     = gfc_get_string (\"__index_%d_i%d\", str->ts.kind, f->ts.kind);\n+\n+  f->do_not_resolve_again = 1;\n }\n \n "}, {"sha": "a8fe7b997c2b74fe5ac5bfcc4d02cadefaf9e0c6", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=d09847357b965a2c2cda063827ce362d4c9c86f2", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"trans-types.h\"\n #include \"trans-array.h\"\n #include \"trans-const.h\"\n+#include \"intrinsic.h\" \t\t/* For gfc_resolve_index_func.  */\n /* Only for gfc_trans_code.  Shouldn't need to include this.  */\n #include \"trans-stmt.h\"\n #include \"gomp-constants.h\"\n@@ -2210,7 +2211,28 @@ gfc_get_extern_function_decl (gfc_symbol * sym, gfc_actual_arglist *actual_args)\n \t\t{\n \t\t  /* All specific intrinsics take less than 5 arguments.  */\n \t\t  gcc_assert (isym->formal->next->next->next->next == NULL);\n-\t\t  isym->resolve.f4 (&e, &argexpr, NULL, NULL, NULL);\n+\t\t  if (isym->resolve.f1m == gfc_resolve_index_func)\n+\t\t    {\n+\t\t      /* gfc_resolve_index_func is special because it takes a\n+\t\t\t gfc_actual_arglist instead of individual arguments.  */\n+\t\t      gfc_actual_arglist *a, *n;\n+\t\t      int i;\n+\t\t      a = gfc_get_actual_arglist();\n+\t\t      n = a;\n+\n+\t\t      for (i = 0; i < 4; i++)\n+\t\t\t{\n+\t\t\t  n->next = gfc_get_actual_arglist();\n+\t\t\t  n = n->next;\n+\t\t\t}\n+\n+\t\t      a->expr = &argexpr;\n+\t\t      isym->resolve.f1m (&e, a);\n+\t\t      a->expr = NULL;\n+\t\t      gfc_free_actual_arglist (a);\n+\t\t    }\n+\t\t  else\n+\t\t    isym->resolve.f4 (&e, &argexpr, NULL, NULL, NULL);\n \t\t}\n \t    }\n \t}"}, {"sha": "8cb6f299f7cb60f048d35f44037971c70de19e25", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d09847357b965a2c2cda063827ce362d4c9c86f2", "patch": "@@ -1,3 +1,8 @@\n+2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/91541\n+\t* gfortran.dg/index_3.f90: New test.\n+\n 2019-12-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/92961"}, {"sha": "40c476a261311ddfe0d33e5075581d2d89e16150", "filename": "gcc/testsuite/gfortran.dg/index_3.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ftestsuite%2Fgfortran.dg%2Findex_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09847357b965a2c2cda063827ce362d4c9c86f2/gcc%2Ftestsuite%2Fgfortran.dg%2Findex_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Findex_3.f90?ref=d09847357b965a2c2cda063827ce362d4c9c86f2", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do run }\n+! PR 91541 - this used to give an ICE.\n+! Bug report by Gerhard Steinmetz.\n+program p\n+   integer :: z(2)\n+   z = index('100101', '10', [.false.,.true.],kind=4)\n+   if (z(1) /= 1 .or. z(2) /= 4) stop 1\n+end"}]}