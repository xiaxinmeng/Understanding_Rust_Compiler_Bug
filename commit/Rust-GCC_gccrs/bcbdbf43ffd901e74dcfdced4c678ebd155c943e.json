{"sha": "bcbdbf43ffd901e74dcfdced4c678ebd155c943e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNiZGJmNDNmZmQ5MDFlNzRkY2ZkY2VkNGM2NzhlYmQxNTVjOTQzZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-06-20T19:41:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-06-20T19:41:51Z"}, "message": "random.tcc (struct _Private::_Mod_w<>, [...]): Remove.\n\n2006-06-20  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random.tcc (struct _Private::_Mod_w<>,\n\t_Private::__mod_w<>): Remove.\n\t(struct _Private::_Shift<>): New.\n\t(struct _Private::_Max_w<>): Rename to _Max, use the latter.\n\t(mersenne_twister<>::seed(unsigned long), seed(_Gen&, false_type),\n\tmax()): Adjust.\n\nFrom-SVN: r114826", "tree": {"sha": "2fe3093ef584f8c01edbe7af30ae5749bf819146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fe3093ef584f8c01edbe7af30ae5749bf819146"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcbdbf43ffd901e74dcfdced4c678ebd155c943e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbdbf43ffd901e74dcfdced4c678ebd155c943e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcbdbf43ffd901e74dcfdced4c678ebd155c943e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbdbf43ffd901e74dcfdced4c678ebd155c943e/comments", "author": null, "committer": null, "parents": [{"sha": "fb5b5d977f7ea0fbbdf67380c5b4c114328994b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5b5d977f7ea0fbbdf67380c5b4c114328994b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5b5d977f7ea0fbbdf67380c5b4c114328994b7"}], "stats": {"total": 74, "additions": 27, "deletions": 47}, "files": [{"sha": "a5b5ef17e2ea5e35cce831a3879649b561b0caff", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbdbf43ffd901e74dcfdced4c678ebd155c943e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbdbf43ffd901e74dcfdced4c678ebd155c943e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bcbdbf43ffd901e74dcfdced4c678ebd155c943e", "patch": "@@ -1,3 +1,12 @@\n+2006-06-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random.tcc (struct _Private::_Mod_w<>,\n+\t_Private::__mod_w<>): Remove.\n+\t(struct _Private::_Shift<>): New.\n+\t(struct _Private::_Max_w<>): Rename to _Max, use the latter.\n+\t(mersenne_twister<>::seed(unsigned long), seed(_Gen&, false_type),\n+\tmax()): Adjust.\n+\n 2006-06-20  Vladimir Prus  <vladimir@codesourcery.com>\n \n \t* libsupc++/eh_arm.cc (__cxa_begin_cleanup): Always return 'true'."}, {"sha": "93bc498c67e41ed5e13d60cca896b884eec404de", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 18, "deletions": 47, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcbdbf43ffd901e74dcfdced4c678ebd155c943e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcbdbf43ffd901e74dcfdced4c678ebd155c943e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=bcbdbf43ffd901e74dcfdced4c678ebd155c943e", "patch": "@@ -96,46 +96,19 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       __mod(_Tp __x)\n       { return _Mod<_Tp, __a, __c, __m, __m == 0>::__calc(__x); }\n \n-    // Like the above, for a == 1, c == 0, in terms of w.\n-    template<typename _Tp, _Tp __w, bool>\n-      struct _Mod_w\n-      {\n-\tstatic _Tp\n-\t__calc(_Tp __x)\n-\t{ return __x % (_Tp(1) << __w); }\n-      };\n-\n-    template<typename _Tp, _Tp __w>\n-      struct _Mod_w<_Tp, __w, true>\n-      {\n-\tstatic _Tp\n-\t__calc(_Tp __x)\n-\t{ return __x; }\n-      };\n+    template<typename _UIntType, int __w, bool = \n+\t     __w != std::numeric_limits<_UIntType>::digits>\n+      struct _Shift\n+      { static const _UIntType __value = 0; };\n \n-    template<typename _Tp, _Tp __w>\n-      inline _Tp\n-      __mod_w(_Tp __x)\n-      { return _Mod_w<_Tp, __w,\n-\t              __w == std::numeric_limits<_Tp>::digits>::__calc(__x); }\n-\n-    // Selector to return the maximum value possible that will fit in \n-    // @p __w bits of @p _Tp.\n-    template<typename _Tp, _Tp __w, bool>\n-      struct _Max_w\n-      {\n-\tstatic _Tp\n-\t__value()\n-\t{ return (_Tp(1) << __w) - 1; }\n-      };\n+    template<typename _UIntType, int __w>\n+      struct _Shift<_UIntType, __w, true>\n+      { static const _UIntType __value = _UIntType(1) << __w; };\n \n-    template<typename _Tp, _Tp __w>\n-      struct _Max_w<_Tp, __w, true>\n-      {\n-\tstatic _Tp\n-\t__value()\n-\t{ return std::numeric_limits<_Tp>::max(); }\n-      };\n+    // The maximum value that will fit in @p __w bits of @p _UIntType.\n+    template<typename _UIntType, int __w>\n+      struct _Max\n+      { static const _UIntType __value = _Shift<_UIntType, __w>::__value - 1; };\n \n   } // namespace _Private\n \n@@ -236,15 +209,17 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t     __b, __t, __c, __l>::\n     seed(unsigned long __value)\n     {\n-      _M_x[0] = _Private::__mod_w<_UIntType, __w>(__value);\n+      _M_x[0] = _Private::__mod<_UIntType, 1, 0,\n+\t_Private::_Shift<_UIntType, __w>::__value>(__value);\n \n       for (int __i = 1; __i < state_size; ++__i)\n \t{\n \t  _UIntType __x = _M_x[__i - 1];\n \t  __x ^= __x >> (__w - 2);\n \t  __x *= 1812433253ul;\n \t  __x += __i;\n-\t  _M_x[__i] = _Private::__mod_w<_UIntType, __w>(__x);\t  \n+\t  _M_x[__i] = _Private::__mod<_UIntType, 1, 0,\n+\t    _Private::_Shift<_UIntType, __w>::__value>(__x);\t  \n \t}\n       _M_p = state_size;\n     }\n@@ -259,7 +234,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       seed(_Gen& __gen, false_type)\n       {\n \tfor (int __i = 0; __i < state_size; ++__i)\n-\t  _M_x[__i] = _Private::__mod_w<_UIntType, __w>(__gen());\n+\t  _M_x[__i] = _Private::__mod<_UIntType, 1, 0,\n+\t    _Private::_Shift<_UIntType, __w>::__value>(__gen());\n \t_M_p = state_size;\n       }\n \n@@ -272,12 +248,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n \t\t     __b, __t, __c, __l>::\n     max() const\n-    {\n-      using _Private::_Max_w;\n-      using std::numeric_limits;\n-      return _Max_w<_UIntType, __w,\n-\t            __w == numeric_limits<_UIntType>::digits>::__value();\n-    }\n+    { return _Private::_Max<_UIntType, __w>::__value; }\n \n   template<class _UIntType, int __w, int __n, int __m, int __r,\n \t   _UIntType __a, int __u, int __s,"}]}