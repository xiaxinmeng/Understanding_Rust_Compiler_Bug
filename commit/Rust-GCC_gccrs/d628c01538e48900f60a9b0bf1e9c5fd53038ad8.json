{"sha": "d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYyOGMwMTUzOGU0ODkwMGY2MGE5YjBiZjFlOWM1ZmQ1MzAzOGFkOA==", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2008-08-01T07:56:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-01T07:56:20Z"}, "message": "gnat_rm.texi: Document new mechanism Short_Descriptor.\n\n2008-08-01  Doug Rupp  <rupp@adacore.com>\n\n\t* gnat_rm.texi: Document new mechanism Short_Descriptor.\n\t\n\t* types.ads (Mechanism_Type): Modify range for new Short_Descriptor\n\tmechanism values.\n\n\t* sem_prag.adb (Set_Mechanism_Value): Enhance for Short_Descriptor\n\tmechanism and Short_Descriptor mechanism values.\n\n\t* snames.adb (preset_names): Add short_descriptor entry.\n\n\t* snames.ads: Add Name_Short_Descriptor.\n\n\t* types.h: Add new By_Short_Descriptor mechanism values.\n\n\t* sem_mech.adb (Set_Mechanism_Value): Enhance for Short_Descriptor\n\tmechanism and Short_Descriptor mechanism values.\n\n\t* sem_mech.ads (Mechanism_Type): Add new By_Short_Descriptor mechanism\n\tvalues.\n\t(Descriptor_Codes): Modify range for new mechanism values.\n\n\t* treepr.adb (Print_Entity_Enfo): Handle new By_Short_Descriptor\n\tmechanism values.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Handle By_Short_Descriptor.\n\t(gnat_to_gnu_param): Handle By_Short_Descriptor.\n\n\t* gcc-interface/gigi.h (build_vms_descriptor64): Remove prototype.\n\t(build_vms_descriptor32): New prototype.\n\t(fill_vms_descriptor): Remove unneeded gnat_actual parameter.\n\n\t* gcc-interface/trans.c (call_to_gnu): Removed unneeded gnat_actual\n\targument in call fill_vms_descriptor.\n\n\t* gcc-interface/utils.c (build_vms_descriptor32): Renamed from\n\tbuild_vms_descriptor and enhanced to hande Short_Descriptor mechanism.\n\t(build_vms_descriptor): Renamed from build_vms_descriptor64. \n\t(convert_vms_descriptor32): New function.\n\t(convert_vms_descriptor64): New function.\n\t(convert_vms_descriptor): Rewrite to handle both 32bit and 64bit\n\tdescriptors.\n\n\t* gcc-interface/utils2.c (fill_vms_descriptor): Revert previous changes,\n\tno longer needed.\n\nFrom-SVN: r138473", "tree": {"sha": "725f4c3218fbf2332443fb1018002094c5a23852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/725f4c3218fbf2332443fb1018002094c5a23852"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73f0dc7a66c5a9481671e2870b64b8e175fc43f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f0dc7a66c5a9481671e2870b64b8e175fc43f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f0dc7a66c5a9481671e2870b64b8e175fc43f4"}], "stats": {"total": 1426, "additions": 907, "deletions": 519}, "files": [{"sha": "f7f4a0d1b61b58b9893cb6634abe1100c0908afa", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -3872,6 +3872,11 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      ;\n \t    else if (By_Descriptor_Last <= mech && mech <= By_Descriptor)\n \t      mech = By_Descriptor;\n+\n+\t    else if (By_Short_Descriptor_Last <= mech &&\n+                     mech <= By_Short_Descriptor)\n+\t      mech = By_Short_Descriptor;\n+\n \t    else if (mech > 0)\n \t      {\n \t\tif (TREE_CODE (gnu_param_type) == UNCONSTRAINED_ARRAY_TYPE\n@@ -3913,7 +3918,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t      = chainon (gnu_param, gnu_stub_param_list);\n \t\t    /* Change By_Descriptor parameter to By_Reference for\n \t\t       the internal version of an exported subprogram.  */\n-\t\t    if (mech == By_Descriptor)\n+\t\t    if (mech == By_Descriptor || mech == By_Short_Descriptor)\n \t\t      {\n \t\t\tgnu_param\n \t\t\t  = gnat_to_gnu_param (gnat_param, By_Reference,\n@@ -4828,18 +4833,27 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n \n   /* VMS descriptors are themselves passed by reference.\n      Build both a 32bit and 64bit descriptor, one of which will be chosen\n-     in fill_vms_descriptor based on the allocator size */\n+     in fill_vms_descriptor. */\n   if (mech == By_Descriptor)\n     {\n       gnu_param_type_alt\n-        = build_pointer_type (build_vms_descriptor64 (gnu_param_type,\n+        = build_pointer_type (build_vms_descriptor32 (gnu_param_type,\n \t\t\t\t\t\t      Mechanism (gnat_param),\n \t\t\t\t\t\t      gnat_subprog));\n       gnu_param_type\n         = build_pointer_type (build_vms_descriptor (gnu_param_type,\n \t\t\t\t\t\t    Mechanism (gnat_param),\n \t\t\t\t\t\t    gnat_subprog));\n     }\n+  else if (mech == By_Short_Descriptor)\n+    {\n+      gnu_param_type_alt = NULL_TREE;\n+\n+      gnu_param_type\n+        = build_pointer_type (build_vms_descriptor32 (gnu_param_type,\n+\t\t\t\t\t\t    Mechanism (gnat_param),\n+\t\t\t\t\t\t    gnat_subprog));\n+    }\n \n   /* Arrays are passed as pointers to element type for foreign conventions.  */\n   else if (foreign\n@@ -4920,6 +4934,7 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n       && !by_ref\n       && (by_return\n \t  || (mech != By_Descriptor\n+              && mech != By_Short_Descriptor\n \t      && !POINTER_TYPE_P (gnu_param_type)\n \t      && !AGGREGATE_TYPE_P (gnu_param_type)))\n       && !(Is_Array_Type (Etype (gnat_param))\n@@ -4931,11 +4946,12 @@ gnat_to_gnu_param (Entity_Id gnat_param, Mechanism_Type mech,\n \t\t\t\t ro_param || by_ref || by_component_ptr);\n   DECL_BY_REF_P (gnu_param) = by_ref;\n   DECL_BY_COMPONENT_PTR_P (gnu_param) = by_component_ptr;\n-  DECL_BY_DESCRIPTOR_P (gnu_param) = (mech == By_Descriptor);\n+  DECL_BY_DESCRIPTOR_P (gnu_param) = (mech == By_Descriptor ||\n+                                      mech == By_Short_Descriptor);\n   DECL_POINTS_TO_READONLY_P (gnu_param)\n     = (ro_param && (by_ref || by_component_ptr));\n \n-  /* Save the 64bit descriptor for later. */\n+  /* Save the alternate descriptor for later. */\n   SET_DECL_PARM_ALT (gnu_param, gnu_param_type_alt);\n \n   /* If no Mechanism was specified, indicate what we're using, then"}, {"sha": "915e44f0e0e333e81f0a3f705a8810112660af7f", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -683,7 +683,7 @@ extern void end_subprog_body (tree body, bool elab_p);\n    Return a constructor for the template.  */\n extern tree build_template (tree template_type, tree array_type, tree expr);\n \n-/* Build a 32bit VMS descriptor from a Mechanism_Type, which must specify\n+/* Build a 64bit VMS descriptor from a Mechanism_Type, which must specify\n    a descriptor type, and the GCC type of an object.  Each FIELD_DECL\n    in the type contains in its DECL_INITIAL the expression to use when\n    a constructor is made for the type.  GNAT_ENTITY is a gnat node used\n@@ -692,8 +692,8 @@ extern tree build_template (tree template_type, tree array_type, tree expr);\n extern tree build_vms_descriptor (tree type, Mechanism_Type mech,\n                                   Entity_Id gnat_entity);\n \n-/* Build a 64bit VMS descriptor from a Mechanism_Type. See above. */\n-extern tree build_vms_descriptor64 (tree type, Mechanism_Type mech,\n+/* Build a 32bit VMS descriptor from a Mechanism_Type. See above. */\n+extern tree build_vms_descriptor32 (tree type, Mechanism_Type mech,\n                                   Entity_Id gnat_entity);\n \n /* Build a stub for the subprogram specified by the GCC tree GNU_SUBPROG\n@@ -853,9 +853,8 @@ extern tree build_allocator (tree type, tree init, tree result_type,\n                              Node_Id gnat_node, bool);\n \n /* Fill in a VMS descriptor for EXPR and return a constructor for it.\n-   GNAT_FORMAL is how we find the descriptor record. GNAT_ACTUAL is how we\n-   find the size of the allocator. */\n-extern tree fill_vms_descriptor (tree expr, Entity_Id gnat_formal, Node_Id gnat_actual);\n+   GNAT_FORMAL is how we find the descriptor record. */\n+extern tree fill_vms_descriptor (tree expr, Entity_Id gnat_formal);\n \n /* Indicate that we need to make the address of EXPR_NODE and it therefore\n    should not be allocated in a register.  Return true if successful.  */"}, {"sha": "677ec01356a2be8699dfe3e86a77ceed4129381b", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -2392,8 +2392,7 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n \t  else\n \t    gnu_actual = build_unary_op (ADDR_EXPR, NULL_TREE,\n \t\t\t\t\t fill_vms_descriptor (gnu_actual,\n-\t\t\t\t\t\t\t      gnat_formal,\n-\t\t\t\t\t\t\t      gnat_actual));\n+\t\t\t\t\t\t\t      gnat_formal));\n \t}\n       else\n \t{\n@@ -5910,7 +5909,7 @@ build_unary_op_trapv (enum tree_code code,\n {\n   gcc_assert ((code == NEGATE_EXPR) || (code == ABS_EXPR));\n \n-  operand = save_expr (operand);\n+  operand = protect_multiple_eval (operand);\n \n   return emit_check (build_binary_op (EQ_EXPR, integer_type_node,\n \t\t\t\t      operand, TYPE_MIN_VALUE (gnu_type)),\n@@ -5929,8 +5928,8 @@ build_binary_op_trapv (enum tree_code code,\n \t\t       tree left,\n \t\t       tree right)\n {\n-  tree lhs = save_expr (left);\n-  tree rhs = save_expr (right);\n+  tree lhs = protect_multiple_eval (left);\n+  tree rhs = protect_multiple_eval (right);\n   tree type_max = TYPE_MAX_VALUE (gnu_type);\n   tree type_min = TYPE_MIN_VALUE (gnu_type);\n   tree gnu_expr;"}, {"sha": "f94d4bad609d53f947dc4194a2d91547c3a4c603", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 232, "deletions": 19, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -2659,7 +2659,7 @@ build_template (tree template_type, tree array_type, tree expr)\n    an object of that type and also for the name.  */\n \n tree\n-build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n+build_vms_descriptor32 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n {\n   tree record_type = make_node (RECORD_TYPE);\n   tree pointer32_type;\n@@ -2689,7 +2689,7 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \n   idx_arr = (tree *) alloca (ndim * sizeof (tree));\n \n-  if (mech != By_Descriptor_NCA\n+  if (mech != By_Descriptor_NCA && mech != By_Short_Descriptor_NCA\n       && TREE_CODE (type) == ARRAY_TYPE && TYPE_CONVENTION_FORTRAN_P (type))\n     for (i = ndim - 1, inner_type = type;\n \t i >= 0;\n@@ -2775,16 +2775,21 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n   switch (mech)\n     {\n     case By_Descriptor_A:\n+    case By_Short_Descriptor_A:\n       class = 4;\n       break;\n     case By_Descriptor_NCA:\n+    case By_Short_Descriptor_NCA:\n       class = 10;\n       break;\n     case By_Descriptor_SB:\n+    case By_Short_Descriptor_SB:\n       class = 15;\n       break;\n     case By_Descriptor:\n+    case By_Short_Descriptor:\n     case By_Descriptor_S:\n+    case By_Short_Descriptor_S:\n     default:\n       class = 1;\n       break;\n@@ -2797,7 +2802,9 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n     = chainon (field_list,\n \t       make_descriptor_field\n \t       (\"LENGTH\", gnat_type_for_size (16, 1), record_type,\n-\t\tsize_in_bytes (mech == By_Descriptor_A ? inner_type : type)));\n+\t\tsize_in_bytes ((mech == By_Descriptor_A ||\n+                                mech == By_Short_Descriptor_A)\n+                               ? inner_type : type)));\n \n   field_list = chainon (field_list,\n \t\t\tmake_descriptor_field (\"DTYPE\",\n@@ -2823,10 +2830,13 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n   switch (mech)\n     {\n     case By_Descriptor:\n+    case By_Short_Descriptor:\n     case By_Descriptor_S:\n+    case By_Short_Descriptor_S:\n       break;\n \n     case By_Descriptor_SB:\n+    case By_Short_Descriptor_SB:\n       field_list\n \t= chainon (field_list,\n \t\t   make_descriptor_field\n@@ -2842,7 +2852,9 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n       break;\n \n     case By_Descriptor_A:\n+    case By_Short_Descriptor_A:\n     case By_Descriptor_NCA:\n+    case By_Short_Descriptor_NCA:\n       field_list = chainon (field_list,\n \t\t\t    make_descriptor_field (\"SCALE\",\n \t\t\t\t\t\t   gnat_type_for_size (8, 1),\n@@ -2859,7 +2871,8 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \t= chainon (field_list,\n \t\t   make_descriptor_field\n \t\t   (\"AFLAGS\", gnat_type_for_size (8, 1), record_type,\n-\t\t    size_int (mech == By_Descriptor_NCA\n+\t\t    size_int ((mech == By_Descriptor_NCA ||\n+                              mech == By_Short_Descriptor_NCA)\n \t\t\t      ? 0\n \t\t\t      /* Set FL_COLUMN, FL_COEFF, and FL_BOUNDS.  */\n \t\t\t      : (TREE_CODE (type) == ARRAY_TYPE\n@@ -2910,15 +2923,16 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n \t\t\t\t\t\t  TYPE_MIN_VALUE (idx_arr[i])),\n \t\t\t\t      size_int (1)));\n \n-\t  fname[0] = (mech == By_Descriptor_NCA ? 'S' : 'M');\n+\t  fname[0] = ((mech == By_Descriptor_NCA ||\n+                       mech == By_Short_Descriptor_NCA) ? 'S' : 'M');\n \t  fname[1] = '0' + i, fname[2] = 0;\n \t  field_list\n \t    = chainon (field_list,\n \t\t       make_descriptor_field (fname,\n \t\t\t\t\t      gnat_type_for_size (32, 1),\n \t\t\t\t\t      record_type, idx_length));\n \n-\t  if (mech == By_Descriptor_NCA)\n+\t  if (mech == By_Descriptor_NCA || mech == By_Short_Descriptor_NCA)\n \t    tem = idx_length;\n \t}\n \n@@ -2962,7 +2976,7 @@ build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n    an object of that type and also for the name.  */\n \n tree\n-build_vms_descriptor64 (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n+build_vms_descriptor (tree type, Mechanism_Type mech, Entity_Id gnat_entity)\n {\n   tree record64_type = make_node (RECORD_TYPE);\n   tree pointer64_type;\n@@ -3283,12 +3297,160 @@ make_descriptor_field (const char *name, tree type,\n   return field;\n }\n \n-/* Convert GNU_EXPR, a pointer to a VMS descriptor, to GNU_TYPE, a regular\n-   pointer or fat pointer type.  GNAT_SUBPROG is the subprogram to which\n-   the VMS descriptor is passed.  */\n+/* Convert GNU_EXPR, a pointer to a 64bit VMS descriptor, to GNU_TYPE, a\n+   regular pointer or fat pointer type.  GNAT_SUBPROG is the subprogram to\n+   which the VMS descriptor is passed.  */\n \n static tree\n-convert_vms_descriptor (tree gnu_type, tree gnu_expr, Entity_Id gnat_subprog)\n+convert_vms_descriptor64 (tree gnu_type, tree gnu_expr, Entity_Id gnat_subprog)\n+{\n+  tree desc_type = TREE_TYPE (TREE_TYPE (gnu_expr));\n+  tree desc = build1 (INDIRECT_REF, desc_type, gnu_expr);\n+  /* The CLASS field is the 3rd field in the descriptor.  */\n+  tree class = TREE_CHAIN (TREE_CHAIN (TYPE_FIELDS (desc_type)));\n+  /* The POINTER field is the 6th field in the descriptor.  */\n+  tree pointer64 = TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (class)));\n+\n+  /* Retrieve the value of the POINTER field.  */\n+  tree gnu_expr64\n+    = build3 (COMPONENT_REF, TREE_TYPE (pointer64), desc, pointer64, NULL_TREE);\n+\n+  if (POINTER_TYPE_P (gnu_type))\n+    return convert (gnu_type, gnu_expr64);\n+\n+  else if (TYPE_FAT_POINTER_P (gnu_type))\n+    {\n+      tree p_array_type = TREE_TYPE (TYPE_FIELDS (gnu_type));\n+      tree p_bounds_type = TREE_TYPE (TREE_CHAIN (TYPE_FIELDS (gnu_type)));\n+      tree template_type = TREE_TYPE (p_bounds_type);\n+      tree min_field = TYPE_FIELDS (template_type);\n+      tree max_field = TREE_CHAIN (TYPE_FIELDS (template_type));\n+      tree template, template_addr, aflags, dimct, t, u;\n+      /* See the head comment of build_vms_descriptor.  */\n+      int iclass = TREE_INT_CST_LOW (DECL_INITIAL (class));\n+      tree lfield, ufield;\n+\n+      /* Convert POINTER to the type of the P_ARRAY field.  */\n+      gnu_expr64 = convert (p_array_type, gnu_expr64);\n+\n+      switch (iclass)\n+\t{\n+\tcase 1:  /* Class S  */\n+\tcase 15: /* Class SB */\n+\t  /* Build {1, LENGTH} template; LENGTH64 is the 5th field.  */\n+\t  t = TREE_CHAIN (TREE_CHAIN (class));\n+\t  t = build3 (COMPONENT_REF, TREE_TYPE (t), desc, t, NULL_TREE);\n+\t  t = tree_cons (min_field,\n+\t\t\t convert (TREE_TYPE (min_field), integer_one_node),\n+\t\t\t tree_cons (max_field,\n+\t\t\t\t    convert (TREE_TYPE (max_field), t),\n+\t\t\t\t    NULL_TREE));\n+\t  template = gnat_build_constructor (template_type, t);\n+\t  template_addr = build_unary_op (ADDR_EXPR, NULL_TREE, template);\n+\n+\t  /* For class S, we are done.  */\n+\t  if (iclass == 1)\n+\t    break;\n+\n+\t  /* Test that we really have a SB descriptor, like DEC Ada.  */\n+\t  t = build3 (COMPONENT_REF, TREE_TYPE (class), desc, class, NULL);\n+\t  u = convert (TREE_TYPE (class), DECL_INITIAL (class));\n+\t  u = build_binary_op (EQ_EXPR, integer_type_node, t, u);\n+\t  /* If so, there is already a template in the descriptor and\n+\t     it is located right after the POINTER field.  The fields are\n+             64bits so they must be repacked. */\n+\t  t = TREE_CHAIN (pointer64);\n+          lfield = build3 (COMPONENT_REF, TREE_TYPE (t), desc, t, NULL_TREE);\n+          lfield = convert (TREE_TYPE (TYPE_FIELDS (template_type)), lfield);\n+\n+\t  t = TREE_CHAIN (t);\n+          ufield = build3 (COMPONENT_REF, TREE_TYPE (t), desc, t, NULL_TREE);\n+          ufield = convert\n+           (TREE_TYPE (TREE_CHAIN (TYPE_FIELDS (template_type))), ufield);\n+\n+\t  /* Build the template in the form of a constructor. */\n+\t  t = tree_cons (TYPE_FIELDS (template_type), lfield,\n+\t\t\t tree_cons (TREE_CHAIN (TYPE_FIELDS (template_type)),\n+                                    ufield, NULL_TREE));\n+\t  template = gnat_build_constructor (template_type, t);\n+\n+\t  /* Otherwise use the {1, LENGTH} template we build above.  */\n+\t  template_addr = build3 (COND_EXPR, p_bounds_type, u,\n+\t\t\t\t  build_unary_op (ADDR_EXPR, p_bounds_type,\n+\t\t\t\t \t\t template),\n+\t\t\t\t  template_addr);\n+\t  break;\n+\n+\tcase 4:  /* Class A */\n+\t  /* The AFLAGS field is the 3rd field after the pointer in the\n+             descriptor.  */\n+\t  t = TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (pointer64)));\n+\t  aflags = build3 (COMPONENT_REF, TREE_TYPE (t), desc, t, NULL_TREE);\n+\t  /* The DIMCT field is the next field in the descriptor after\n+             aflags.  */\n+\t  t = TREE_CHAIN (t);\n+\t  dimct = build3 (COMPONENT_REF, TREE_TYPE (t), desc, t, NULL_TREE);\n+\t  /* Raise CONSTRAINT_ERROR if either more than 1 dimension\n+\t     or FL_COEFF or FL_BOUNDS not set.  */\n+\t  u = build_int_cst (TREE_TYPE (aflags), 192);\n+\t  u = build_binary_op (TRUTH_OR_EXPR, integer_type_node,\n+\t\t\t       build_binary_op (NE_EXPR, integer_type_node,\n+\t\t\t\t\t\tdimct,\n+\t\t\t\t\t\tconvert (TREE_TYPE (dimct),\n+\t\t\t\t\t\t\t size_one_node)),\n+\t\t\t       build_binary_op (NE_EXPR, integer_type_node,\n+\t\t\t\t\t\tbuild2 (BIT_AND_EXPR,\n+\t\t\t\t\t\t\tTREE_TYPE (aflags),\n+\t\t\t\t\t\t\taflags, u),\n+\t\t\t\t\t\tu));\n+\t  /* There is already a template in the descriptor and it is located\n+             in block 3.  The fields are 64bits so they must be repacked. */\n+\t  t = TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (TREE_CHAIN\n+              (t)))));\n+          lfield = build3 (COMPONENT_REF, TREE_TYPE (t), desc, t, NULL_TREE);\n+          lfield = convert (TREE_TYPE (TYPE_FIELDS (template_type)), lfield);\n+\n+\t  t = TREE_CHAIN (t);\n+          ufield = build3 (COMPONENT_REF, TREE_TYPE (t), desc, t, NULL_TREE);\n+          ufield = convert\n+           (TREE_TYPE (TREE_CHAIN (TYPE_FIELDS (template_type))), ufield);\n+\n+\t  /* Build the template in the form of a constructor. */\n+\t  t = tree_cons (TYPE_FIELDS (template_type), lfield,\n+\t\t\t tree_cons (TREE_CHAIN (TYPE_FIELDS (template_type)),\n+                                    ufield, NULL_TREE));\n+\t  template = gnat_build_constructor (template_type, t);\n+\t  template = build3 (COND_EXPR, p_bounds_type, u,\n+\t\t\t    build_call_raise (CE_Length_Check_Failed, Empty,\n+\t\t\t\t\t      N_Raise_Constraint_Error),\n+\t\t\t    template);\n+\t  template_addr = build_unary_op (ADDR_EXPR, p_bounds_type, template);\n+\t  break;\n+\n+\tcase 10: /* Class NCA */\n+\tdefault:\n+\t  post_error (\"unsupported descriptor type for &\", gnat_subprog);\n+\t  template_addr = integer_zero_node;\n+\t  break;\n+\t}\n+\n+      /* Build the fat pointer in the form of a constructor.  */\n+      t = tree_cons (TYPE_FIELDS (gnu_type), gnu_expr64,\n+\t\t     tree_cons (TREE_CHAIN (TYPE_FIELDS (gnu_type)),\n+\t\t\t\ttemplate_addr, NULL_TREE));\n+      return gnat_build_constructor (gnu_type, t);\n+    }\n+\n+  else\n+    gcc_unreachable ();\n+}\n+\n+/* Convert GNU_EXPR, a pointer to a 32bit VMS descriptor, to GNU_TYPE, a\n+   regular pointer or fat pointer type.  GNAT_SUBPROG is the subprogram to\n+   which the VMS descriptor is passed.  */\n+\n+static tree\n+convert_vms_descriptor32 (tree gnu_type, tree gnu_expr, Entity_Id gnat_subprog)\n {\n   tree desc_type = TREE_TYPE (TREE_TYPE (gnu_expr));\n   tree desc = build1 (INDIRECT_REF, desc_type, gnu_expr);\n@@ -3298,11 +3460,11 @@ convert_vms_descriptor (tree gnu_type, tree gnu_expr, Entity_Id gnat_subprog)\n   tree pointer = TREE_CHAIN (class);\n \n   /* Retrieve the value of the POINTER field.  */\n-  gnu_expr\n+  tree gnu_expr32\n     = build3 (COMPONENT_REF, TREE_TYPE (pointer), desc, pointer, NULL_TREE);\n \n   if (POINTER_TYPE_P (gnu_type))\n-    return convert (gnu_type, gnu_expr);\n+    return convert (gnu_type, gnu_expr32);\n \n   else if (TYPE_FAT_POINTER_P (gnu_type))\n     {\n@@ -3316,7 +3478,7 @@ convert_vms_descriptor (tree gnu_type, tree gnu_expr, Entity_Id gnat_subprog)\n       int iclass = TREE_INT_CST_LOW (DECL_INITIAL (class));\n \n       /* Convert POINTER to the type of the P_ARRAY field.  */\n-      gnu_expr = convert (p_array_type, gnu_expr);\n+      gnu_expr32 = convert (p_array_type, gnu_expr32);\n \n       switch (iclass)\n \t{\n@@ -3372,14 +3534,14 @@ convert_vms_descriptor (tree gnu_type, tree gnu_expr, Entity_Id gnat_subprog)\n \t\t\t\t\t\t\tTREE_TYPE (aflags),\n \t\t\t\t\t\t\taflags, u),\n \t\t\t\t\t\tu));\n-\t  add_stmt (build3 (COND_EXPR, void_type_node, u,\n-\t\t\t    build_call_raise (CE_Length_Check_Failed, Empty,\n-\t\t\t\t\t      N_Raise_Constraint_Error),\n-\t\t\t    NULL_TREE));\n \t  /* There is already a template in the descriptor and it is\n \t     located at the start of block 3 (12th field).  */\n \t  t = TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (t))));\n \t  template = build3 (COMPONENT_REF, TREE_TYPE (t), desc, t, NULL_TREE);\n+\t  template = build3 (COND_EXPR, p_bounds_type, u,\n+\t\t\t    build_call_raise (CE_Length_Check_Failed, Empty,\n+\t\t\t\t\t      N_Raise_Constraint_Error),\n+\t\t\t    template);\n \t  template_addr = build_unary_op (ADDR_EXPR, p_bounds_type, template);\n \t  break;\n \n@@ -3391,16 +3553,67 @@ convert_vms_descriptor (tree gnu_type, tree gnu_expr, Entity_Id gnat_subprog)\n \t}\n \n       /* Build the fat pointer in the form of a constructor.  */\n-      t = tree_cons (TYPE_FIELDS (gnu_type), gnu_expr,\n+      t = tree_cons (TYPE_FIELDS (gnu_type), gnu_expr32,\n \t\t     tree_cons (TREE_CHAIN (TYPE_FIELDS (gnu_type)),\n \t\t\t\ttemplate_addr, NULL_TREE));\n+\n       return gnat_build_constructor (gnu_type, t);\n     }\n \n   else\n     gcc_unreachable ();\n }\n \n+/* Convert GNU_EXPR, a pointer to a VMS descriptor, to GNU_TYPE, a\n+   regular pointer or fat pointer type.  GNAT_SUBPROG is the subprogram to\n+   which the VMS descriptor is passed.  */\n+\n+static tree\n+convert_vms_descriptor (tree gnu_type, tree gnu_expr, Entity_Id gnat_subprog)\n+{\n+  tree desc_type = TREE_TYPE (TREE_TYPE (gnu_expr));\n+  tree desc = build1 (INDIRECT_REF, desc_type, gnu_expr);\n+  tree mbo = TYPE_FIELDS (desc_type);\n+  const char *mbostr = IDENTIFIER_POINTER (DECL_NAME (mbo));\n+  tree mbmo = TREE_CHAIN (TREE_CHAIN (TREE_CHAIN (mbo)));\n+  tree is64bit;\n+  tree save_type = TREE_TYPE (gnu_expr);\n+  tree gnu_expr32, gnu_expr64;\n+\n+  if (strcmp (mbostr, \"MBO\") != 0)\n+    /* If the field name is not MBO, it must be 32bit and no alternate */\n+    return convert_vms_descriptor32 (gnu_type, gnu_expr, gnat_subprog);\n+\n+  /* Otherwise primary must be 64bit and alternate 32bit */\n+\n+  /* Test for 64bit descriptor */\n+  mbo = build3 (COMPONENT_REF, TREE_TYPE (mbo), desc, mbo, NULL_TREE);\n+  mbmo = build3 (COMPONENT_REF, TREE_TYPE (mbmo), desc, mbmo, NULL_TREE);\n+  is64bit = build_binary_op (TRUTH_ANDIF_EXPR, integer_type_node,\n+            build_binary_op (EQ_EXPR, integer_type_node,\n+                                convert (integer_type_node, mbo),\n+                                integer_one_node),\n+            build_binary_op (EQ_EXPR, integer_type_node,\n+                                convert (integer_type_node, mbmo),\n+                                integer_minus_one_node));\n+\n+  gnu_expr64 = convert_vms_descriptor64 (gnu_type, gnu_expr,\n+                                         gnat_subprog);\n+  /* Convert 32bit alternate. Hack alert ??? */\n+  TREE_TYPE (gnu_expr) = DECL_PARM_ALT (gnu_expr);\n+  gnu_expr32 = convert_vms_descriptor32 (gnu_type, gnu_expr,\n+                                         gnat_subprog);\n+  TREE_TYPE (gnu_expr) = save_type;\n+\n+  if (POINTER_TYPE_P (gnu_type))\n+     return build3 (COND_EXPR, gnu_type, is64bit, gnu_expr64, gnu_expr32);\n+\n+  else if (TYPE_FAT_POINTER_P (gnu_type))\n+      return build3 (COND_EXPR, gnu_type, is64bit, gnu_expr64, gnu_expr32);\n+  else\n+    gcc_unreachable ();\n+}\n+\n /* Build a stub for the subprogram specified by the GCC tree GNU_SUBPROG\n    and the GNAT node GNAT_SUBPROG.  */\n "}, {"sha": "1424ac8649afbba4dfc7c9207ff003452e4ddb19", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -2156,37 +2156,13 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n    alternate 64bit descriptor. */\n \n tree\n-fill_vms_descriptor (tree expr, Entity_Id gnat_formal, Node_Id gnat_actual)\n+fill_vms_descriptor (tree expr, Entity_Id gnat_formal)\n {\n   tree field;\n   tree parm_decl = get_gnu_tree (gnat_formal);\n   tree const_list = NULL_TREE;\n-  int size;\n   tree record_type;\n \n-  /* A string literal will always be in 32bit space on VMS. Where\n-     will it be on other 64bit systems???\n-     An identifier's allocation may be unknown at compile time.\n-     An explicit dereference could be either in 32bit or 64bit space.\n-     Don't know about other possibilities, so assume unknown which\n-     will result in fetching the 64bit descriptor. ??? */\n-  if (Nkind (gnat_actual) == N_String_Literal)\n-    size = 32;\n-  else if (Nkind (gnat_actual) == N_Identifier)\n-    size = UI_To_Int (Esize (Etype (gnat_actual)));\n-  else if (Nkind (gnat_actual) == N_Explicit_Dereference)\n-    size = UI_To_Int (Esize (Etype (Prefix (gnat_actual))));\n-  else\n-    size = 0;\n-\n-  /* If size is unknown, make it POINTER_SIZE */\n-  if (size == 0)\n-    size = POINTER_SIZE;\n-\n-  /* If size is 64bits grab the alternate 64bit descriptor. */\n-  if (size == 64)\n-    TREE_TYPE (parm_decl) = DECL_PARM_ALT (parm_decl);\n-\n   record_type = TREE_TYPE (TREE_TYPE (parm_decl));\n   expr = maybe_unconstrained_array (expr);\n   gnat_mark_addressable (expr);"}, {"sha": "50af374938a937187c658016fd172d147d45f7c3", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -1852,6 +1852,7 @@ MECHANISM_NAME ::=\n   Value\n | Reference\n | Descriptor [([Class =>] CLASS_NAME)]\n+| Short_Descriptor [([Class =>] CLASS_NAME)]\n \n CLASS_NAME ::= ubs | ubsb | uba | s | sb | a\n @end smallexample\n@@ -1884,6 +1885,9 @@ anonymous access parameter.\n @cindex OpenVMS\n @cindex Passing by descriptor\n Passing by descriptor is supported only on the OpenVMS ports of GNAT@.\n+The default behavior for Export_Function is to accept either 64bit or\n+32bit descriptors unless short_descriptor is specified, then only 32bit\n+descriptors are accepted.\n \n @cindex Suppressing external name\n Special treatment is given if the EXTERNAL is an explicit null\n@@ -1953,6 +1957,7 @@ MECHANISM_NAME ::=\n   Value\n | Reference\n | Descriptor [([Class =>] CLASS_NAME)]\n+| Short_Descriptor [([Class =>] CLASS_NAME)]\n \n CLASS_NAME ::= ubs | ubsb | uba | s | sb | a\n @end smallexample\n@@ -1970,6 +1975,9 @@ pragma that specifies the desired foreign convention.\n @cindex OpenVMS\n @cindex Passing by descriptor\n Passing by descriptor is supported only on the OpenVMS ports of GNAT@.\n+The default behavior for Export_Procedure is to accept either 64bit or\n+32bit descriptors unless short_descriptor is specified, then only 32bit\n+descriptors are accepted.\n \n @cindex Suppressing external name\n Special treatment is given if the EXTERNAL is an explicit null\n@@ -2035,6 +2043,7 @@ MECHANISM_NAME ::=\n   Value\n | Reference\n | Descriptor [([Class =>] CLASS_NAME)]\n+| Short_Descriptor [([Class =>] CLASS_NAME)]\n \n CLASS_NAME ::= ubs | ubsb | uba | s | sb | a\n @end smallexample\n@@ -2057,6 +2066,9 @@ pragma that specifies the desired foreign convention.\n @cindex OpenVMS\n @cindex Passing by descriptor\n Passing by descriptor is supported only on the OpenVMS ports of GNAT@.\n+The default behavior for Export_Valued_Procedure is to accept either 64bit or\n+32bit descriptors unless short_descriptor is specified, then only 32bit\n+descriptors are accepted.\n \n @cindex Suppressing external name\n Special treatment is given if the EXTERNAL is an explicit null\n@@ -2483,6 +2495,7 @@ MECHANISM_NAME ::=\n   Value\n | Reference\n | Descriptor [([Class =>] CLASS_NAME)]\n+| Short_Descriptor [([Class =>] CLASS_NAME)]\n \n CLASS_NAME ::= ubs | ubsb | uba | s | sb | a | nca\n @end smallexample\n@@ -2516,6 +2529,8 @@ is used.\n @cindex OpenVMS\n @cindex Passing by descriptor\n Passing by descriptor is supported only on the OpenVMS ports of GNAT@.\n+The default behavior for Import_Function is to pass a 64bit descriptor\n+unless short_descriptor is specified, then a 32bit descriptor is passed.\n \n @code{First_Optional_Parameter} applies only to OpenVMS ports of GNAT@.\n It specifies that the designated parameter and all following parameters\n@@ -2589,6 +2604,7 @@ MECHANISM_NAME ::=\n   Value\n | Reference\n | Descriptor [([Class =>] CLASS_NAME)]\n+| Short_Descriptor [([Class =>] CLASS_NAME)]\n \n CLASS_NAME ::= ubs | ubsb | uba | s | sb | a | nca\n @end smallexample\n@@ -2635,6 +2651,7 @@ MECHANISM_NAME ::=\n   Value\n | Reference\n | Descriptor [([Class =>] CLASS_NAME)]\n+| Short_Descriptor [([Class =>] CLASS_NAME)]\n \n CLASS_NAME ::= ubs | ubsb | uba | s | sb | a | nca\n @end smallexample"}, {"sha": "87a0d054451e5e54ae4588c4b081f0fea12945ab", "filename": "gcc/ada/sem_mech.adb", "status": "modified", "additions": 70, "deletions": 12, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fsem_mech.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fsem_mech.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_mech.adb?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -69,7 +69,7 @@ package body Sem_Mech is\n            (\"mechanism for & has already been set\", Mech_Name, Ent);\n       end if;\n \n-      --  MECHANISM_NAME ::= value | reference | descriptor\n+      --  MECHANISM_NAME ::= value | reference | descriptor | short_descriptor\n \n       if Nkind (Mech_Name) = N_Identifier then\n          if Chars (Mech_Name) = Name_Value then\n@@ -85,6 +85,11 @@ package body Sem_Mech is\n             Set_Mechanism_With_Checks (Ent, By_Descriptor, Mech_Name);\n             return;\n \n+         elsif Chars (Mech_Name) = Name_Short_Descriptor then\n+            Check_VMS (Mech_Name);\n+            Set_Mechanism_With_Checks (Ent, By_Short_Descriptor, Mech_Name);\n+            return;\n+\n          elsif Chars (Mech_Name) = Name_Copy then\n             Error_Msg_N\n               (\"bad mechanism name, Value assumed\", Mech_Name);\n@@ -95,7 +100,8 @@ package body Sem_Mech is\n             return;\n          end if;\n \n-      --  MECHANISM_NAME ::= descriptor (CLASS_NAME)\n+      --  MECHANISM_NAME ::= descriptor (CLASS_NAME) |\n+      --                     short_descriptor (CLASS_NAME)\n       --  CLASS_NAME     ::= ubs | ubsb | uba | s | sb | a | nca\n \n       --  Note: this form is parsed as an indexed component\n@@ -104,14 +110,16 @@ package body Sem_Mech is\n          Class := First (Expressions (Mech_Name));\n \n          if Nkind (Prefix (Mech_Name)) /= N_Identifier\n-           or else Chars (Prefix (Mech_Name)) /= Name_Descriptor\n+           or else not (Chars (Prefix (Mech_Name)) = Name_Descriptor or else\n+                        Chars (Prefix (Mech_Name)) = Name_Short_Descriptor)\n            or else Present (Next (Class))\n          then\n             Bad_Mechanism;\n             return;\n          end if;\n \n-      --  MECHANISM_NAME ::= descriptor (Class => CLASS_NAME)\n+      --  MECHANISM_NAME ::= descriptor (Class => CLASS_NAME) |\n+      --                     short_descriptor (Class => CLASS_NAME)\n       --  CLASS_NAME     ::= ubs | ubsb | uba | s | sb | a | nca\n \n       --  Note: this form is parsed as a function call\n@@ -121,7 +129,8 @@ package body Sem_Mech is\n          Param := First (Parameter_Associations (Mech_Name));\n \n          if Nkind (Name (Mech_Name)) /= N_Identifier\n-           or else Chars (Name (Mech_Name)) /= Name_Descriptor\n+           or else not (Chars (Name (Mech_Name)) = Name_Descriptor or else\n+                        Chars (Name (Mech_Name)) = Name_Short_Descriptor)\n            or else Present (Next (Param))\n            or else No (Selector_Name (Param))\n            or else Chars (Selector_Name (Param)) /= Name_Class\n@@ -145,27 +154,76 @@ package body Sem_Mech is\n          Bad_Class;\n          return;\n \n-      elsif Chars (Class) = Name_UBS then\n+      elsif Chars (Name (Mech_Name)) = Name_Descriptor\n+        and then Chars (Class) = Name_UBS\n+      then\n          Set_Mechanism_With_Checks (Ent, By_Descriptor_UBS,  Mech_Name);\n \n-      elsif Chars (Class) = Name_UBSB then\n+      elsif Chars (Name (Mech_Name)) = Name_Descriptor\n+        and then Chars (Class) = Name_UBSB\n+      then\n          Set_Mechanism_With_Checks (Ent, By_Descriptor_UBSB, Mech_Name);\n \n-      elsif Chars (Class) = Name_UBA then\n+      elsif Chars (Name (Mech_Name)) = Name_Descriptor\n+        and then Chars (Class) = Name_UBA\n+      then\n          Set_Mechanism_With_Checks (Ent, By_Descriptor_UBA,  Mech_Name);\n \n-      elsif Chars (Class) = Name_S then\n+      elsif Chars (Name (Mech_Name)) = Name_Descriptor\n+        and then Chars (Class) = Name_S\n+      then\n          Set_Mechanism_With_Checks (Ent, By_Descriptor_S,    Mech_Name);\n \n-      elsif Chars (Class) = Name_SB then\n+      elsif Chars (Name (Mech_Name)) = Name_Descriptor\n+        and then Chars (Class) = Name_SB\n+      then\n          Set_Mechanism_With_Checks (Ent, By_Descriptor_SB,   Mech_Name);\n \n-      elsif Chars (Class) = Name_A then\n+      elsif Chars (Name (Mech_Name)) = Name_Descriptor\n+        and then Chars (Class) = Name_A\n+      then\n          Set_Mechanism_With_Checks (Ent, By_Descriptor_A,    Mech_Name);\n \n-      elsif Chars (Class) = Name_NCA then\n+      elsif Chars (Name (Mech_Name)) = Name_Descriptor\n+        and then Chars (Class) = Name_NCA\n+      then\n          Set_Mechanism_With_Checks (Ent, By_Descriptor_NCA,  Mech_Name);\n \n+      elsif Chars (Name (Mech_Name)) = Name_Short_Descriptor\n+        and then Chars (Class) = Name_UBS\n+      then\n+         Set_Mechanism_With_Checks (Ent, By_Short_Descriptor_UBS,  Mech_Name);\n+\n+      elsif Chars (Name (Mech_Name)) = Name_Short_Descriptor\n+        and then Chars (Class) = Name_UBSB\n+      then\n+         Set_Mechanism_With_Checks (Ent, By_Short_Descriptor_UBSB, Mech_Name);\n+\n+      elsif Chars (Name (Mech_Name)) = Name_Short_Descriptor\n+        and then Chars (Class) = Name_UBA\n+      then\n+         Set_Mechanism_With_Checks (Ent, By_Short_Descriptor_UBA,  Mech_Name);\n+\n+      elsif Chars (Name (Mech_Name)) = Name_Short_Descriptor\n+        and then Chars (Class) = Name_S\n+      then\n+         Set_Mechanism_With_Checks (Ent, By_Short_Descriptor_S,    Mech_Name);\n+\n+      elsif Chars (Name (Mech_Name)) = Name_Short_Descriptor\n+        and then Chars (Class) = Name_SB\n+      then\n+         Set_Mechanism_With_Checks (Ent, By_Short_Descriptor_SB,   Mech_Name);\n+\n+      elsif Chars (Name (Mech_Name)) = Name_Short_Descriptor\n+        and then Chars (Class) = Name_A\n+      then\n+         Set_Mechanism_With_Checks (Ent, By_Short_Descriptor_A,    Mech_Name);\n+\n+      elsif Chars (Name (Mech_Name)) = Name_Short_Descriptor\n+        and then Chars (Class) = Name_NCA\n+      then\n+         Set_Mechanism_With_Checks (Ent, By_Short_Descriptor_NCA,  Mech_Name);\n+\n       else\n          Bad_Class;\n          return;"}, {"sha": "93f6080f1f4e0e7bb46ec4ae6d15f05bc897873d", "filename": "gcc/ada/sem_mech.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fsem_mech.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fsem_mech.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_mech.ads?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -95,6 +95,14 @@ package Sem_Mech is\n    By_Descriptor_SB   : constant Mechanism_Type := -8;\n    By_Descriptor_A    : constant Mechanism_Type := -9;\n    By_Descriptor_NCA  : constant Mechanism_Type := -10;\n+   By_Short_Descriptor      : constant Mechanism_Type := -11;\n+   By_Short_Descriptor_UBS  : constant Mechanism_Type := -12;\n+   By_Short_Descriptor_UBSB : constant Mechanism_Type := -13;\n+   By_Short_Descriptor_UBA  : constant Mechanism_Type := -14;\n+   By_Short_Descriptor_S    : constant Mechanism_Type := -15;\n+   By_Short_Descriptor_SB   : constant Mechanism_Type := -16;\n+   By_Short_Descriptor_A    : constant Mechanism_Type := -17;\n+   By_Short_Descriptor_NCA  : constant Mechanism_Type := -18;\n    --  These values are used only in OpenVMS ports of GNAT. Pass by descriptor\n    --  is forced, as described in the OpenVMS ABI. The suffix indicates the\n    --  descriptor type:\n@@ -113,7 +121,7 @@ package Sem_Mech is\n    --  type based on the Ada type in accordance with the OpenVMS ABI.\n \n    subtype Descriptor_Codes is Mechanism_Type\n-     range By_Descriptor_NCA .. By_Descriptor;\n+     range By_Short_Descriptor_NCA .. By_Descriptor;\n    --  Subtype including all descriptor mechanisms\n \n    --  All the above special values are non-positive. Positive values for"}, {"sha": "803f054ce4f19a2307a08ba91033a0dcd4207d38", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 77, "deletions": 13, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -4622,6 +4622,7 @@ package body Sem_Prag is\n       procedure Set_Mechanism_Value (Ent : Entity_Id; Mech_Name : Node_Id) is\n          Class : Node_Id;\n          Param : Node_Id;\n+         Mech_Name_Id : Name_Id;\n \n          procedure Bad_Class;\n          --  Signal bad descriptor class name\n@@ -4655,7 +4656,8 @@ package body Sem_Prag is\n               (\"mechanism for & has already been set\", Mech_Name, Ent);\n          end if;\n \n-         --  MECHANISM_NAME ::= value | reference | descriptor\n+         --  MECHANISM_NAME ::= value | reference | descriptor |\n+         --                     short_descriptor\n \n          if Nkind (Mech_Name) = N_Identifier then\n             if Chars (Mech_Name) = Name_Value then\n@@ -4671,6 +4673,11 @@ package body Sem_Prag is\n                Set_Mechanism (Ent, By_Descriptor);\n                return;\n \n+            elsif Chars (Mech_Name) = Name_Short_Descriptor then\n+               Check_VMS (Mech_Name);\n+               Set_Mechanism (Ent, By_Short_Descriptor);\n+               return;\n+\n             elsif Chars (Mech_Name) = Name_Copy then\n                Error_Pragma_Arg\n                  (\"bad mechanism name, Value assumed\", Mech_Name);\n@@ -4679,22 +4686,28 @@ package body Sem_Prag is\n                Bad_Mechanism;\n             end if;\n \n-         --  MECHANISM_NAME ::= descriptor (CLASS_NAME)\n+         --  MECHANISM_NAME ::= descriptor (CLASS_NAME) |\n+         --                     short_descriptor (CLASS_NAME)\n          --  CLASS_NAME     ::= ubs | ubsb | uba | s | sb | a | nca\n \n          --  Note: this form is parsed as an indexed component\n \n          elsif Nkind (Mech_Name) = N_Indexed_Component then\n+\n             Class := First (Expressions (Mech_Name));\n \n             if Nkind (Prefix (Mech_Name)) /= N_Identifier\n-              or else Chars (Prefix (Mech_Name)) /= Name_Descriptor\n-              or else Present (Next (Class))\n+             or else not (Chars (Prefix (Mech_Name)) = Name_Descriptor or else\n+                          Chars (Prefix (Mech_Name)) = Name_Short_Descriptor)\n+             or else Present (Next (Class))\n             then\n                Bad_Mechanism;\n+            else\n+               Mech_Name_Id := Chars (Prefix (Mech_Name));\n             end if;\n \n-         --  MECHANISM_NAME ::= descriptor (Class => CLASS_NAME)\n+         --  MECHANISM_NAME ::= descriptor (Class => CLASS_NAME) |\n+         --                     short_descriptor (Class => CLASS_NAME)\n          --  CLASS_NAME     ::= ubs | ubsb | uba | s | sb | a | nca\n \n          --  Note: this form is parsed as a function call\n@@ -4704,14 +4717,16 @@ package body Sem_Prag is\n             Param := First (Parameter_Associations (Mech_Name));\n \n             if Nkind (Name (Mech_Name)) /= N_Identifier\n-              or else Chars (Name (Mech_Name)) /= Name_Descriptor\n+              or else not (Chars (Name (Mech_Name)) = Name_Descriptor or else\n+                           Chars (Name (Mech_Name)) = Name_Short_Descriptor)\n               or else Present (Next (Param))\n               or else No (Selector_Name (Param))\n               or else Chars (Selector_Name (Param)) /= Name_Class\n             then\n                Bad_Mechanism;\n             else\n                Class := Explicit_Actual_Parameter (Param);\n+               Mech_Name_Id := Chars (Name (Mech_Name));\n             end if;\n \n          else\n@@ -4725,27 +4740,76 @@ package body Sem_Prag is\n          if Nkind (Class) /= N_Identifier then\n             Bad_Class;\n \n-         elsif Chars (Class) = Name_UBS then\n+         elsif Mech_Name_Id = Name_Descriptor\n+               and then Chars (Class) = Name_UBS\n+         then\n             Set_Mechanism (Ent, By_Descriptor_UBS);\n \n-         elsif Chars (Class) = Name_UBSB then\n+         elsif Mech_Name_Id = Name_Descriptor\n+               and then Chars (Class) = Name_UBSB\n+         then\n             Set_Mechanism (Ent, By_Descriptor_UBSB);\n \n-         elsif Chars (Class) = Name_UBA then\n+         elsif Mech_Name_Id = Name_Descriptor\n+               and then Chars (Class) = Name_UBA\n+         then\n             Set_Mechanism (Ent, By_Descriptor_UBA);\n \n-         elsif Chars (Class) = Name_S then\n+         elsif Mech_Name_Id = Name_Descriptor\n+               and then Chars (Class) = Name_S\n+         then\n             Set_Mechanism (Ent, By_Descriptor_S);\n \n-         elsif Chars (Class) = Name_SB then\n+         elsif Mech_Name_Id = Name_Descriptor\n+               and then Chars (Class) = Name_SB\n+         then\n             Set_Mechanism (Ent, By_Descriptor_SB);\n \n-         elsif Chars (Class) = Name_A then\n+         elsif Mech_Name_Id = Name_Descriptor\n+               and then Chars (Class) = Name_A\n+         then\n             Set_Mechanism (Ent, By_Descriptor_A);\n \n-         elsif Chars (Class) = Name_NCA then\n+         elsif Mech_Name_Id = Name_Descriptor\n+               and then Chars (Class) = Name_NCA\n+         then\n             Set_Mechanism (Ent, By_Descriptor_NCA);\n \n+         elsif Mech_Name_Id = Name_Short_Descriptor\n+               and then Chars (Class) = Name_UBS\n+         then\n+            Set_Mechanism (Ent, By_Short_Descriptor_UBS);\n+\n+         elsif Mech_Name_Id = Name_Short_Descriptor\n+               and then Chars (Class) = Name_UBSB\n+         then\n+            Set_Mechanism (Ent, By_Short_Descriptor_UBSB);\n+\n+         elsif Mech_Name_Id = Name_Short_Descriptor\n+               and then Chars (Class) = Name_UBA\n+         then\n+            Set_Mechanism (Ent, By_Short_Descriptor_UBA);\n+\n+         elsif Mech_Name_Id = Name_Short_Descriptor\n+               and then Chars (Class) = Name_S\n+         then\n+            Set_Mechanism (Ent, By_Short_Descriptor_S);\n+\n+         elsif Mech_Name_Id = Name_Short_Descriptor\n+               and then Chars (Class) = Name_SB\n+         then\n+            Set_Mechanism (Ent, By_Short_Descriptor_SB);\n+\n+         elsif Mech_Name_Id = Name_Short_Descriptor\n+               and then Chars (Class) = Name_A\n+         then\n+            Set_Mechanism (Ent, By_Short_Descriptor_A);\n+\n+         elsif Mech_Name_Id = Name_Short_Descriptor\n+               and then Chars (Class) = Name_NCA\n+         then\n+            Set_Mechanism (Ent, By_Short_Descriptor_NCA);\n+\n          else\n             Bad_Class;\n          end if;"}, {"sha": "d23edf9ad6b7127a908d6ab147290526e72d2b66", "filename": "gcc/ada/snames.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fsnames.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fsnames.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -415,6 +415,7 @@ package body Snames is\n      \"secondary_stack_size#\" &\n      \"section#\" &\n      \"semaphore#\" &\n+     \"short_descriptor#\" &\n      \"simple_barriers#\" &\n      \"spec_file_name#\" &\n      \"state#\" &"}, {"sha": "5a47de55c896872a20ba0e6fb95a2c2bcb6324ab", "filename": "gcc/ada/snames.ads", "status": "modified", "additions": 422, "deletions": 421, "changes": 843, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fsnames.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Fsnames.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -643,28 +643,29 @@ package Snames is\n    Name_Secondary_Stack_Size           : constant Name_Id := N + 354;\n    Name_Section                        : constant Name_Id := N + 355;\n    Name_Semaphore                      : constant Name_Id := N + 356;\n-   Name_Simple_Barriers                : constant Name_Id := N + 357;\n-   Name_Spec_File_Name                 : constant Name_Id := N + 358;\n-   Name_State                          : constant Name_Id := N + 359;\n-   Name_Static                         : constant Name_Id := N + 360;\n-   Name_Stack_Size                     : constant Name_Id := N + 361;\n-   Name_Subunit_File_Name              : constant Name_Id := N + 362;\n-   Name_Task_Stack_Size_Default        : constant Name_Id := N + 363;\n-   Name_Task_Type                      : constant Name_Id := N + 364;\n-   Name_Time_Slicing_Enabled           : constant Name_Id := N + 365;\n-   Name_Top_Guard                      : constant Name_Id := N + 366;\n-   Name_UBA                            : constant Name_Id := N + 367;\n-   Name_UBS                            : constant Name_Id := N + 368;\n-   Name_UBSB                           : constant Name_Id := N + 369;\n-   Name_Unit_Name                      : constant Name_Id := N + 370;\n-   Name_Unknown                        : constant Name_Id := N + 371;\n-   Name_Unrestricted                   : constant Name_Id := N + 372;\n-   Name_Uppercase                      : constant Name_Id := N + 373;\n-   Name_User                           : constant Name_Id := N + 374;\n-   Name_VAX_Float                      : constant Name_Id := N + 375;\n-   Name_VMS                            : constant Name_Id := N + 376;\n-   Name_Vtable_Ptr                     : constant Name_Id := N + 377;\n-   Name_Working_Storage                : constant Name_Id := N + 378;\n+   Name_Short_Descriptor               : constant Name_Id := N + 357;\n+   Name_Simple_Barriers                : constant Name_Id := N + 358;\n+   Name_Spec_File_Name                 : constant Name_Id := N + 359;\n+   Name_State                          : constant Name_Id := N + 360;\n+   Name_Static                         : constant Name_Id := N + 361;\n+   Name_Stack_Size                     : constant Name_Id := N + 362;\n+   Name_Subunit_File_Name              : constant Name_Id := N + 363;\n+   Name_Task_Stack_Size_Default        : constant Name_Id := N + 364;\n+   Name_Task_Type                      : constant Name_Id := N + 365;\n+   Name_Time_Slicing_Enabled           : constant Name_Id := N + 366;\n+   Name_Top_Guard                      : constant Name_Id := N + 367;\n+   Name_UBA                            : constant Name_Id := N + 368;\n+   Name_UBS                            : constant Name_Id := N + 369;\n+   Name_UBSB                           : constant Name_Id := N + 370;\n+   Name_Unit_Name                      : constant Name_Id := N + 371;\n+   Name_Unknown                        : constant Name_Id := N + 372;\n+   Name_Unrestricted                   : constant Name_Id := N + 373;\n+   Name_Uppercase                      : constant Name_Id := N + 374;\n+   Name_User                           : constant Name_Id := N + 375;\n+   Name_VAX_Float                      : constant Name_Id := N + 376;\n+   Name_VMS                            : constant Name_Id := N + 377;\n+   Name_Vtable_Ptr                     : constant Name_Id := N + 378;\n+   Name_Working_Storage                : constant Name_Id := N + 379;\n \n    --  Names of recognized attributes. The entries with the comment \"Ada 83\"\n    --  are attributes that are defined in Ada 83, but not in Ada 95. These\n@@ -678,481 +679,481 @@ package Snames is\n    --  The entries marked VMS are recognized only in OpenVMS implementations\n    --  of GNAT, and are treated as illegal in all other contexts.\n \n-   First_Attribute_Name                : constant Name_Id := N + 379;\n-   Name_Abort_Signal                   : constant Name_Id := N + 379; -- GNAT\n-   Name_Access                         : constant Name_Id := N + 380;\n-   Name_Address                        : constant Name_Id := N + 381;\n-   Name_Address_Size                   : constant Name_Id := N + 382; -- GNAT\n-   Name_Aft                            : constant Name_Id := N + 383;\n-   Name_Alignment                      : constant Name_Id := N + 384;\n-   Name_Asm_Input                      : constant Name_Id := N + 385; -- GNAT\n-   Name_Asm_Output                     : constant Name_Id := N + 386; -- GNAT\n-   Name_AST_Entry                      : constant Name_Id := N + 387; -- VMS\n-   Name_Bit                            : constant Name_Id := N + 388; -- GNAT\n-   Name_Bit_Order                      : constant Name_Id := N + 389;\n-   Name_Bit_Position                   : constant Name_Id := N + 390; -- GNAT\n-   Name_Body_Version                   : constant Name_Id := N + 391;\n-   Name_Callable                       : constant Name_Id := N + 392;\n-   Name_Caller                         : constant Name_Id := N + 393;\n-   Name_Code_Address                   : constant Name_Id := N + 394; -- GNAT\n-   Name_Component_Size                 : constant Name_Id := N + 395;\n-   Name_Compose                        : constant Name_Id := N + 396;\n-   Name_Constrained                    : constant Name_Id := N + 397;\n-   Name_Count                          : constant Name_Id := N + 398;\n-   Name_Default_Bit_Order              : constant Name_Id := N + 399; -- GNAT\n-   Name_Definite                       : constant Name_Id := N + 400;\n-   Name_Delta                          : constant Name_Id := N + 401;\n-   Name_Denorm                         : constant Name_Id := N + 402;\n-   Name_Digits                         : constant Name_Id := N + 403;\n-   Name_Elaborated                     : constant Name_Id := N + 404; -- GNAT\n-   Name_Emax                           : constant Name_Id := N + 405; -- Ada 83\n-   Name_Enabled                        : constant Name_Id := N + 406; -- GNAT\n-   Name_Enum_Rep                       : constant Name_Id := N + 407; -- GNAT\n-   Name_Enum_Val                       : constant Name_Id := N + 408; -- GNAT\n-   Name_Epsilon                        : constant Name_Id := N + 409; -- Ada 83\n-   Name_Exponent                       : constant Name_Id := N + 410;\n-   Name_External_Tag                   : constant Name_Id := N + 411;\n-   Name_Fast_Math                      : constant Name_Id := N + 412; -- GNAT\n-   Name_First                          : constant Name_Id := N + 413;\n-   Name_First_Bit                      : constant Name_Id := N + 414;\n-   Name_Fixed_Value                    : constant Name_Id := N + 415; -- GNAT\n-   Name_Fore                           : constant Name_Id := N + 416;\n-   Name_Has_Access_Values              : constant Name_Id := N + 417; -- GNAT\n-   Name_Has_Discriminants              : constant Name_Id := N + 418; -- GNAT\n-   Name_Has_Tagged_Values              : constant Name_Id := N + 419; -- GNAT\n-   Name_Identity                       : constant Name_Id := N + 420;\n-   Name_Img                            : constant Name_Id := N + 421; -- GNAT\n-   Name_Integer_Value                  : constant Name_Id := N + 422; -- GNAT\n-   Name_Invalid_Value                  : constant Name_Id := N + 423; -- GNAT\n-   Name_Large                          : constant Name_Id := N + 424; -- Ada 83\n-   Name_Last                           : constant Name_Id := N + 425;\n-   Name_Last_Bit                       : constant Name_Id := N + 426;\n-   Name_Leading_Part                   : constant Name_Id := N + 427;\n-   Name_Length                         : constant Name_Id := N + 428;\n-   Name_Machine_Emax                   : constant Name_Id := N + 429;\n-   Name_Machine_Emin                   : constant Name_Id := N + 430;\n-   Name_Machine_Mantissa               : constant Name_Id := N + 431;\n-   Name_Machine_Overflows              : constant Name_Id := N + 432;\n-   Name_Machine_Radix                  : constant Name_Id := N + 433;\n-   Name_Machine_Rounding               : constant Name_Id := N + 434; -- Ada 05\n-   Name_Machine_Rounds                 : constant Name_Id := N + 435;\n-   Name_Machine_Size                   : constant Name_Id := N + 436; -- GNAT\n-   Name_Mantissa                       : constant Name_Id := N + 437; -- Ada 83\n-   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 438;\n-   Name_Maximum_Alignment              : constant Name_Id := N + 439; -- GNAT\n-   Name_Mechanism_Code                 : constant Name_Id := N + 440; -- GNAT\n-   Name_Mod                            : constant Name_Id := N + 441; -- Ada 05\n-   Name_Model_Emin                     : constant Name_Id := N + 442;\n-   Name_Model_Epsilon                  : constant Name_Id := N + 443;\n-   Name_Model_Mantissa                 : constant Name_Id := N + 444;\n-   Name_Model_Small                    : constant Name_Id := N + 445;\n-   Name_Modulus                        : constant Name_Id := N + 446;\n-   Name_Null_Parameter                 : constant Name_Id := N + 447; -- GNAT\n-   Name_Object_Size                    : constant Name_Id := N + 448; -- GNAT\n-   Name_Old                            : constant Name_Id := N + 449; -- GNAT\n-   Name_Partition_ID                   : constant Name_Id := N + 450;\n-   Name_Passed_By_Reference            : constant Name_Id := N + 451; -- GNAT\n-   Name_Pool_Address                   : constant Name_Id := N + 452;\n-   Name_Pos                            : constant Name_Id := N + 453;\n-   Name_Position                       : constant Name_Id := N + 454;\n-   Name_Priority                       : constant Name_Id := N + 455; -- Ada 05\n-   Name_Range                          : constant Name_Id := N + 456;\n-   Name_Range_Length                   : constant Name_Id := N + 457; -- GNAT\n-   Name_Result                         : constant Name_Id := N + 458; -- GNAT\n-   Name_Round                          : constant Name_Id := N + 459;\n-   Name_Safe_Emax                      : constant Name_Id := N + 460; -- Ada 83\n-   Name_Safe_First                     : constant Name_Id := N + 461;\n-   Name_Safe_Large                     : constant Name_Id := N + 462; -- Ada 83\n-   Name_Safe_Last                      : constant Name_Id := N + 463;\n-   Name_Safe_Small                     : constant Name_Id := N + 464; -- Ada 83\n-   Name_Scale                          : constant Name_Id := N + 465;\n-   Name_Scaling                        : constant Name_Id := N + 466;\n-   Name_Signed_Zeros                   : constant Name_Id := N + 467;\n-   Name_Size                           : constant Name_Id := N + 468;\n-   Name_Small                          : constant Name_Id := N + 469;\n-   Name_Storage_Size                   : constant Name_Id := N + 470;\n-   Name_Storage_Unit                   : constant Name_Id := N + 471; -- GNAT\n-   Name_Stream_Size                    : constant Name_Id := N + 472; -- Ada 05\n-   Name_Tag                            : constant Name_Id := N + 473;\n-   Name_Target_Name                    : constant Name_Id := N + 474; -- GNAT\n-   Name_Terminated                     : constant Name_Id := N + 475;\n-   Name_To_Address                     : constant Name_Id := N + 476; -- GNAT\n-   Name_Type_Class                     : constant Name_Id := N + 477; -- GNAT\n-   Name_UET_Address                    : constant Name_Id := N + 478; -- GNAT\n-   Name_Unbiased_Rounding              : constant Name_Id := N + 479;\n-   Name_Unchecked_Access               : constant Name_Id := N + 480;\n-   Name_Unconstrained_Array            : constant Name_Id := N + 481;\n-   Name_Universal_Literal_String       : constant Name_Id := N + 482; -- GNAT\n-   Name_Unrestricted_Access            : constant Name_Id := N + 483; -- GNAT\n-   Name_VADS_Size                      : constant Name_Id := N + 484; -- GNAT\n-   Name_Val                            : constant Name_Id := N + 485;\n-   Name_Valid                          : constant Name_Id := N + 486;\n-   Name_Value_Size                     : constant Name_Id := N + 487; -- GNAT\n-   Name_Version                        : constant Name_Id := N + 488;\n-   Name_Wchar_T_Size                   : constant Name_Id := N + 489; -- GNAT\n-   Name_Wide_Wide_Width                : constant Name_Id := N + 490; -- Ada 05\n-   Name_Wide_Width                     : constant Name_Id := N + 491;\n-   Name_Width                          : constant Name_Id := N + 492;\n-   Name_Word_Size                      : constant Name_Id := N + 493; -- GNAT\n+   First_Attribute_Name                : constant Name_Id := N + 380;\n+   Name_Abort_Signal                   : constant Name_Id := N + 380; -- GNAT\n+   Name_Access                         : constant Name_Id := N + 381;\n+   Name_Address                        : constant Name_Id := N + 382;\n+   Name_Address_Size                   : constant Name_Id := N + 383; -- GNAT\n+   Name_Aft                            : constant Name_Id := N + 384;\n+   Name_Alignment                      : constant Name_Id := N + 385;\n+   Name_Asm_Input                      : constant Name_Id := N + 386; -- GNAT\n+   Name_Asm_Output                     : constant Name_Id := N + 387; -- GNAT\n+   Name_AST_Entry                      : constant Name_Id := N + 388; -- VMS\n+   Name_Bit                            : constant Name_Id := N + 389; -- GNAT\n+   Name_Bit_Order                      : constant Name_Id := N + 390;\n+   Name_Bit_Position                   : constant Name_Id := N + 391; -- GNAT\n+   Name_Body_Version                   : constant Name_Id := N + 392;\n+   Name_Callable                       : constant Name_Id := N + 393;\n+   Name_Caller                         : constant Name_Id := N + 394;\n+   Name_Code_Address                   : constant Name_Id := N + 395; -- GNAT\n+   Name_Component_Size                 : constant Name_Id := N + 396;\n+   Name_Compose                        : constant Name_Id := N + 397;\n+   Name_Constrained                    : constant Name_Id := N + 398;\n+   Name_Count                          : constant Name_Id := N + 399;\n+   Name_Default_Bit_Order              : constant Name_Id := N + 400; -- GNAT\n+   Name_Definite                       : constant Name_Id := N + 401;\n+   Name_Delta                          : constant Name_Id := N + 402;\n+   Name_Denorm                         : constant Name_Id := N + 403;\n+   Name_Digits                         : constant Name_Id := N + 404;\n+   Name_Elaborated                     : constant Name_Id := N + 405; -- GNAT\n+   Name_Emax                           : constant Name_Id := N + 406; -- Ada 83\n+   Name_Enabled                        : constant Name_Id := N + 407; -- GNAT\n+   Name_Enum_Rep                       : constant Name_Id := N + 408; -- GNAT\n+   Name_Enum_Val                       : constant Name_Id := N + 409; -- GNAT\n+   Name_Epsilon                        : constant Name_Id := N + 410; -- Ada 83\n+   Name_Exponent                       : constant Name_Id := N + 411;\n+   Name_External_Tag                   : constant Name_Id := N + 412;\n+   Name_Fast_Math                      : constant Name_Id := N + 413; -- GNAT\n+   Name_First                          : constant Name_Id := N + 414;\n+   Name_First_Bit                      : constant Name_Id := N + 415;\n+   Name_Fixed_Value                    : constant Name_Id := N + 416; -- GNAT\n+   Name_Fore                           : constant Name_Id := N + 417;\n+   Name_Has_Access_Values              : constant Name_Id := N + 418; -- GNAT\n+   Name_Has_Discriminants              : constant Name_Id := N + 419; -- GNAT\n+   Name_Has_Tagged_Values              : constant Name_Id := N + 420; -- GNAT\n+   Name_Identity                       : constant Name_Id := N + 421;\n+   Name_Img                            : constant Name_Id := N + 422; -- GNAT\n+   Name_Integer_Value                  : constant Name_Id := N + 423; -- GNAT\n+   Name_Invalid_Value                  : constant Name_Id := N + 424; -- GNAT\n+   Name_Large                          : constant Name_Id := N + 425; -- Ada 83\n+   Name_Last                           : constant Name_Id := N + 426;\n+   Name_Last_Bit                       : constant Name_Id := N + 427;\n+   Name_Leading_Part                   : constant Name_Id := N + 428;\n+   Name_Length                         : constant Name_Id := N + 429;\n+   Name_Machine_Emax                   : constant Name_Id := N + 430;\n+   Name_Machine_Emin                   : constant Name_Id := N + 431;\n+   Name_Machine_Mantissa               : constant Name_Id := N + 432;\n+   Name_Machine_Overflows              : constant Name_Id := N + 433;\n+   Name_Machine_Radix                  : constant Name_Id := N + 434;\n+   Name_Machine_Rounding               : constant Name_Id := N + 435; -- Ada 05\n+   Name_Machine_Rounds                 : constant Name_Id := N + 436;\n+   Name_Machine_Size                   : constant Name_Id := N + 437; -- GNAT\n+   Name_Mantissa                       : constant Name_Id := N + 438; -- Ada 83\n+   Name_Max_Size_In_Storage_Elements   : constant Name_Id := N + 439;\n+   Name_Maximum_Alignment              : constant Name_Id := N + 440; -- GNAT\n+   Name_Mechanism_Code                 : constant Name_Id := N + 441; -- GNAT\n+   Name_Mod                            : constant Name_Id := N + 442; -- Ada 05\n+   Name_Model_Emin                     : constant Name_Id := N + 443;\n+   Name_Model_Epsilon                  : constant Name_Id := N + 444;\n+   Name_Model_Mantissa                 : constant Name_Id := N + 445;\n+   Name_Model_Small                    : constant Name_Id := N + 446;\n+   Name_Modulus                        : constant Name_Id := N + 447;\n+   Name_Null_Parameter                 : constant Name_Id := N + 448; -- GNAT\n+   Name_Object_Size                    : constant Name_Id := N + 449; -- GNAT\n+   Name_Old                            : constant Name_Id := N + 450; -- GNAT\n+   Name_Partition_ID                   : constant Name_Id := N + 451;\n+   Name_Passed_By_Reference            : constant Name_Id := N + 452; -- GNAT\n+   Name_Pool_Address                   : constant Name_Id := N + 453;\n+   Name_Pos                            : constant Name_Id := N + 454;\n+   Name_Position                       : constant Name_Id := N + 455;\n+   Name_Priority                       : constant Name_Id := N + 456; -- Ada 05\n+   Name_Range                          : constant Name_Id := N + 457;\n+   Name_Range_Length                   : constant Name_Id := N + 458; -- GNAT\n+   Name_Result                         : constant Name_Id := N + 459; -- GNAT\n+   Name_Round                          : constant Name_Id := N + 460;\n+   Name_Safe_Emax                      : constant Name_Id := N + 461; -- Ada 83\n+   Name_Safe_First                     : constant Name_Id := N + 462;\n+   Name_Safe_Large                     : constant Name_Id := N + 463; -- Ada 83\n+   Name_Safe_Last                      : constant Name_Id := N + 464;\n+   Name_Safe_Small                     : constant Name_Id := N + 465; -- Ada 83\n+   Name_Scale                          : constant Name_Id := N + 466;\n+   Name_Scaling                        : constant Name_Id := N + 467;\n+   Name_Signed_Zeros                   : constant Name_Id := N + 468;\n+   Name_Size                           : constant Name_Id := N + 469;\n+   Name_Small                          : constant Name_Id := N + 470;\n+   Name_Storage_Size                   : constant Name_Id := N + 471;\n+   Name_Storage_Unit                   : constant Name_Id := N + 472; -- GNAT\n+   Name_Stream_Size                    : constant Name_Id := N + 473; -- Ada 05\n+   Name_Tag                            : constant Name_Id := N + 474;\n+   Name_Target_Name                    : constant Name_Id := N + 475; -- GNAT\n+   Name_Terminated                     : constant Name_Id := N + 476;\n+   Name_To_Address                     : constant Name_Id := N + 477; -- GNAT\n+   Name_Type_Class                     : constant Name_Id := N + 478; -- GNAT\n+   Name_UET_Address                    : constant Name_Id := N + 479; -- GNAT\n+   Name_Unbiased_Rounding              : constant Name_Id := N + 480;\n+   Name_Unchecked_Access               : constant Name_Id := N + 481;\n+   Name_Unconstrained_Array            : constant Name_Id := N + 482;\n+   Name_Universal_Literal_String       : constant Name_Id := N + 483; -- GNAT\n+   Name_Unrestricted_Access            : constant Name_Id := N + 484; -- GNAT\n+   Name_VADS_Size                      : constant Name_Id := N + 485; -- GNAT\n+   Name_Val                            : constant Name_Id := N + 486;\n+   Name_Valid                          : constant Name_Id := N + 487;\n+   Name_Value_Size                     : constant Name_Id := N + 488; -- GNAT\n+   Name_Version                        : constant Name_Id := N + 489;\n+   Name_Wchar_T_Size                   : constant Name_Id := N + 490; -- GNAT\n+   Name_Wide_Wide_Width                : constant Name_Id := N + 491; -- Ada 05\n+   Name_Wide_Width                     : constant Name_Id := N + 492;\n+   Name_Width                          : constant Name_Id := N + 493;\n+   Name_Word_Size                      : constant Name_Id := N + 494; -- GNAT\n \n    --  Attributes that designate attributes returning renamable functions,\n    --  i.e. functions that return other than a universal value and that\n    --  have non-universal arguments.\n \n-   First_Renamable_Function_Attribute  : constant Name_Id := N + 494;\n-   Name_Adjacent                       : constant Name_Id := N + 494;\n-   Name_Ceiling                        : constant Name_Id := N + 495;\n-   Name_Copy_Sign                      : constant Name_Id := N + 496;\n-   Name_Floor                          : constant Name_Id := N + 497;\n-   Name_Fraction                       : constant Name_Id := N + 498;\n-   Name_Image                          : constant Name_Id := N + 499;\n-   Name_Input                          : constant Name_Id := N + 500;\n-   Name_Machine                        : constant Name_Id := N + 501;\n-   Name_Max                            : constant Name_Id := N + 502;\n-   Name_Min                            : constant Name_Id := N + 503;\n-   Name_Model                          : constant Name_Id := N + 504;\n-   Name_Pred                           : constant Name_Id := N + 505;\n-   Name_Remainder                      : constant Name_Id := N + 506;\n-   Name_Rounding                       : constant Name_Id := N + 507;\n-   Name_Succ                           : constant Name_Id := N + 508;\n-   Name_Truncation                     : constant Name_Id := N + 509;\n-   Name_Value                          : constant Name_Id := N + 510;\n-   Name_Wide_Image                     : constant Name_Id := N + 511;\n-   Name_Wide_Wide_Image                : constant Name_Id := N + 512;\n-   Name_Wide_Value                     : constant Name_Id := N + 513;\n-   Name_Wide_Wide_Value                : constant Name_Id := N + 514;\n-   Last_Renamable_Function_Attribute   : constant Name_Id := N + 514;\n+   First_Renamable_Function_Attribute  : constant Name_Id := N + 495;\n+   Name_Adjacent                       : constant Name_Id := N + 495;\n+   Name_Ceiling                        : constant Name_Id := N + 496;\n+   Name_Copy_Sign                      : constant Name_Id := N + 497;\n+   Name_Floor                          : constant Name_Id := N + 498;\n+   Name_Fraction                       : constant Name_Id := N + 499;\n+   Name_Image                          : constant Name_Id := N + 500;\n+   Name_Input                          : constant Name_Id := N + 501;\n+   Name_Machine                        : constant Name_Id := N + 502;\n+   Name_Max                            : constant Name_Id := N + 503;\n+   Name_Min                            : constant Name_Id := N + 504;\n+   Name_Model                          : constant Name_Id := N + 505;\n+   Name_Pred                           : constant Name_Id := N + 506;\n+   Name_Remainder                      : constant Name_Id := N + 507;\n+   Name_Rounding                       : constant Name_Id := N + 508;\n+   Name_Succ                           : constant Name_Id := N + 509;\n+   Name_Truncation                     : constant Name_Id := N + 510;\n+   Name_Value                          : constant Name_Id := N + 511;\n+   Name_Wide_Image                     : constant Name_Id := N + 512;\n+   Name_Wide_Wide_Image                : constant Name_Id := N + 513;\n+   Name_Wide_Value                     : constant Name_Id := N + 514;\n+   Name_Wide_Wide_Value                : constant Name_Id := N + 515;\n+   Last_Renamable_Function_Attribute   : constant Name_Id := N + 515;\n \n    --  Attributes that designate procedures\n \n-   First_Procedure_Attribute           : constant Name_Id := N + 515;\n-   Name_Output                         : constant Name_Id := N + 515;\n-   Name_Read                           : constant Name_Id := N + 516;\n-   Name_Write                          : constant Name_Id := N + 517;\n-   Last_Procedure_Attribute            : constant Name_Id := N + 517;\n+   First_Procedure_Attribute           : constant Name_Id := N + 516;\n+   Name_Output                         : constant Name_Id := N + 516;\n+   Name_Read                           : constant Name_Id := N + 517;\n+   Name_Write                          : constant Name_Id := N + 518;\n+   Last_Procedure_Attribute            : constant Name_Id := N + 518;\n \n    --  Remaining attributes are ones that return entities\n \n-   First_Entity_Attribute_Name         : constant Name_Id := N + 518;\n-   Name_Elab_Body                      : constant Name_Id := N + 518; -- GNAT\n-   Name_Elab_Spec                      : constant Name_Id := N + 519; -- GNAT\n-   Name_Storage_Pool                   : constant Name_Id := N + 520;\n+   First_Entity_Attribute_Name         : constant Name_Id := N + 519;\n+   Name_Elab_Body                      : constant Name_Id := N + 519; -- GNAT\n+   Name_Elab_Spec                      : constant Name_Id := N + 520; -- GNAT\n+   Name_Storage_Pool                   : constant Name_Id := N + 521;\n \n    --  These attributes are the ones that return types\n \n-   First_Type_Attribute_Name           : constant Name_Id := N + 521;\n-   Name_Base                           : constant Name_Id := N + 521;\n-   Name_Class                          : constant Name_Id := N + 522;\n-   Name_Stub_Type                      : constant Name_Id := N + 523;\n-   Last_Type_Attribute_Name            : constant Name_Id := N + 523;\n-   Last_Entity_Attribute_Name          : constant Name_Id := N + 523;\n-   Last_Attribute_Name                 : constant Name_Id := N + 523;\n+   First_Type_Attribute_Name           : constant Name_Id := N + 522;\n+   Name_Base                           : constant Name_Id := N + 522;\n+   Name_Class                          : constant Name_Id := N + 523;\n+   Name_Stub_Type                      : constant Name_Id := N + 524;\n+   Last_Type_Attribute_Name            : constant Name_Id := N + 524;\n+   Last_Entity_Attribute_Name          : constant Name_Id := N + 524;\n+   Last_Attribute_Name                 : constant Name_Id := N + 524;\n \n    --  Names of recognized locking policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. C for Ceiling_Locking). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Locking_Policy_Name           : constant Name_Id := N + 524;\n-   Name_Ceiling_Locking                : constant Name_Id := N + 524;\n-   Name_Inheritance_Locking            : constant Name_Id := N + 525;\n-   Last_Locking_Policy_Name            : constant Name_Id := N + 525;\n+   First_Locking_Policy_Name           : constant Name_Id := N + 525;\n+   Name_Ceiling_Locking                : constant Name_Id := N + 525;\n+   Name_Inheritance_Locking            : constant Name_Id := N + 526;\n+   Last_Locking_Policy_Name            : constant Name_Id := N + 526;\n \n    --  Names of recognized queuing policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Queuing). If new policy names are added,\n    --  the first character must be distinct.\n \n-   First_Queuing_Policy_Name           : constant Name_Id := N + 526;\n-   Name_FIFO_Queuing                   : constant Name_Id := N + 526;\n-   Name_Priority_Queuing               : constant Name_Id := N + 527;\n-   Last_Queuing_Policy_Name            : constant Name_Id := N + 527;\n+   First_Queuing_Policy_Name           : constant Name_Id := N + 527;\n+   Name_FIFO_Queuing                   : constant Name_Id := N + 527;\n+   Name_Priority_Queuing               : constant Name_Id := N + 528;\n+   Last_Queuing_Policy_Name            : constant Name_Id := N + 528;\n \n    --  Names of recognized task dispatching policy identifiers\n \n    --  Note: policies are identified by the first character of the\n    --  name (e.g. F for FIFO_Within_Priorities). If new policy names\n    --  are added, the first character must be distinct.\n \n-   First_Task_Dispatching_Policy_Name    : constant Name_Id := N + 528;\n-   Name_EDF_Across_Priorities            : constant Name_Id := N + 528;\n-   Name_FIFO_Within_Priorities           : constant Name_Id := N + 529;\n-   Name_Non_Preemptive_Within_Priorities : constant Name_Id := N + 530;\n-   Name_Round_Robin_Within_Priorities    : constant Name_Id := N + 531;\n-   Last_Task_Dispatching_Policy_Name     : constant Name_Id := N + 531;\n+   First_Task_Dispatching_Policy_Name    : constant Name_Id := N + 529;\n+   Name_EDF_Across_Priorities            : constant Name_Id := N + 529;\n+   Name_FIFO_Within_Priorities           : constant Name_Id := N + 530;\n+   Name_Non_Preemptive_Within_Priorities : constant Name_Id := N + 531;\n+   Name_Round_Robin_Within_Priorities    : constant Name_Id := N + 532;\n+   Last_Task_Dispatching_Policy_Name     : constant Name_Id := N + 532;\n \n    --  Names of recognized checks for pragma Suppress\n \n-   First_Check_Name                    : constant Name_Id := N + 532;\n-   Name_Access_Check                   : constant Name_Id := N + 532;\n-   Name_Accessibility_Check            : constant Name_Id := N + 533;\n-   Name_Alignment_Check                : constant Name_Id := N + 534; -- GNAT\n-   Name_Discriminant_Check             : constant Name_Id := N + 535;\n-   Name_Division_Check                 : constant Name_Id := N + 536;\n-   Name_Elaboration_Check              : constant Name_Id := N + 537;\n-   Name_Index_Check                    : constant Name_Id := N + 538;\n-   Name_Length_Check                   : constant Name_Id := N + 539;\n-   Name_Overflow_Check                 : constant Name_Id := N + 540;\n-   Name_Range_Check                    : constant Name_Id := N + 541;\n-   Name_Storage_Check                  : constant Name_Id := N + 542;\n-   Name_Tag_Check                      : constant Name_Id := N + 543;\n-   Name_Validity_Check                 : constant Name_Id := N + 544; -- GNAT\n-   Name_All_Checks                     : constant Name_Id := N + 545;\n-   Last_Check_Name                     : constant Name_Id := N + 545;\n+   First_Check_Name                    : constant Name_Id := N + 533;\n+   Name_Access_Check                   : constant Name_Id := N + 533;\n+   Name_Accessibility_Check            : constant Name_Id := N + 534;\n+   Name_Alignment_Check                : constant Name_Id := N + 535; -- GNAT\n+   Name_Discriminant_Check             : constant Name_Id := N + 536;\n+   Name_Division_Check                 : constant Name_Id := N + 537;\n+   Name_Elaboration_Check              : constant Name_Id := N + 538;\n+   Name_Index_Check                    : constant Name_Id := N + 539;\n+   Name_Length_Check                   : constant Name_Id := N + 540;\n+   Name_Overflow_Check                 : constant Name_Id := N + 541;\n+   Name_Range_Check                    : constant Name_Id := N + 542;\n+   Name_Storage_Check                  : constant Name_Id := N + 543;\n+   Name_Tag_Check                      : constant Name_Id := N + 544;\n+   Name_Validity_Check                 : constant Name_Id := N + 545; -- GNAT\n+   Name_All_Checks                     : constant Name_Id := N + 546;\n+   Last_Check_Name                     : constant Name_Id := N + 546;\n \n    --  Names corresponding to reserved keywords, excluding those already\n    --  declared in the attribute list (Access, Delta, Digits, Mod, Range).\n \n-   Name_Abort                          : constant Name_Id := N + 546;\n-   Name_Abs                            : constant Name_Id := N + 547;\n-   Name_Accept                         : constant Name_Id := N + 548;\n-   Name_And                            : constant Name_Id := N + 549;\n-   Name_All                            : constant Name_Id := N + 550;\n-   Name_Array                          : constant Name_Id := N + 551;\n-   Name_At                             : constant Name_Id := N + 552;\n-   Name_Begin                          : constant Name_Id := N + 553;\n-   Name_Body                           : constant Name_Id := N + 554;\n-   Name_Case                           : constant Name_Id := N + 555;\n-   Name_Constant                       : constant Name_Id := N + 556;\n-   Name_Declare                        : constant Name_Id := N + 557;\n-   Name_Delay                          : constant Name_Id := N + 558;\n-   Name_Do                             : constant Name_Id := N + 559;\n-   Name_Else                           : constant Name_Id := N + 560;\n-   Name_Elsif                          : constant Name_Id := N + 561;\n-   Name_End                            : constant Name_Id := N + 562;\n-   Name_Entry                          : constant Name_Id := N + 563;\n-   Name_Exception                      : constant Name_Id := N + 564;\n-   Name_Exit                           : constant Name_Id := N + 565;\n-   Name_For                            : constant Name_Id := N + 566;\n-   Name_Function                       : constant Name_Id := N + 567;\n-   Name_Generic                        : constant Name_Id := N + 568;\n-   Name_Goto                           : constant Name_Id := N + 569;\n-   Name_If                             : constant Name_Id := N + 570;\n-   Name_In                             : constant Name_Id := N + 571;\n-   Name_Is                             : constant Name_Id := N + 572;\n-   Name_Limited                        : constant Name_Id := N + 573;\n-   Name_Loop                           : constant Name_Id := N + 574;\n-   Name_New                            : constant Name_Id := N + 575;\n-   Name_Not                            : constant Name_Id := N + 576;\n-   Name_Null                           : constant Name_Id := N + 577;\n-   Name_Of                             : constant Name_Id := N + 578;\n-   Name_Or                             : constant Name_Id := N + 579;\n-   Name_Others                         : constant Name_Id := N + 580;\n-   Name_Out                            : constant Name_Id := N + 581;\n-   Name_Package                        : constant Name_Id := N + 582;\n-   Name_Pragma                         : constant Name_Id := N + 583;\n-   Name_Private                        : constant Name_Id := N + 584;\n-   Name_Procedure                      : constant Name_Id := N + 585;\n-   Name_Raise                          : constant Name_Id := N + 586;\n-   Name_Record                         : constant Name_Id := N + 587;\n-   Name_Rem                            : constant Name_Id := N + 588;\n-   Name_Renames                        : constant Name_Id := N + 589;\n-   Name_Return                         : constant Name_Id := N + 590;\n-   Name_Reverse                        : constant Name_Id := N + 591;\n-   Name_Select                         : constant Name_Id := N + 592;\n-   Name_Separate                       : constant Name_Id := N + 593;\n-   Name_Subtype                        : constant Name_Id := N + 594;\n-   Name_Task                           : constant Name_Id := N + 595;\n-   Name_Terminate                      : constant Name_Id := N + 596;\n-   Name_Then                           : constant Name_Id := N + 597;\n-   Name_Type                           : constant Name_Id := N + 598;\n-   Name_Use                            : constant Name_Id := N + 599;\n-   Name_When                           : constant Name_Id := N + 600;\n-   Name_While                          : constant Name_Id := N + 601;\n-   Name_With                           : constant Name_Id := N + 602;\n-   Name_Xor                            : constant Name_Id := N + 603;\n+   Name_Abort                          : constant Name_Id := N + 547;\n+   Name_Abs                            : constant Name_Id := N + 548;\n+   Name_Accept                         : constant Name_Id := N + 549;\n+   Name_And                            : constant Name_Id := N + 550;\n+   Name_All                            : constant Name_Id := N + 551;\n+   Name_Array                          : constant Name_Id := N + 552;\n+   Name_At                             : constant Name_Id := N + 553;\n+   Name_Begin                          : constant Name_Id := N + 554;\n+   Name_Body                           : constant Name_Id := N + 555;\n+   Name_Case                           : constant Name_Id := N + 556;\n+   Name_Constant                       : constant Name_Id := N + 557;\n+   Name_Declare                        : constant Name_Id := N + 558;\n+   Name_Delay                          : constant Name_Id := N + 559;\n+   Name_Do                             : constant Name_Id := N + 560;\n+   Name_Else                           : constant Name_Id := N + 561;\n+   Name_Elsif                          : constant Name_Id := N + 562;\n+   Name_End                            : constant Name_Id := N + 563;\n+   Name_Entry                          : constant Name_Id := N + 564;\n+   Name_Exception                      : constant Name_Id := N + 565;\n+   Name_Exit                           : constant Name_Id := N + 566;\n+   Name_For                            : constant Name_Id := N + 567;\n+   Name_Function                       : constant Name_Id := N + 568;\n+   Name_Generic                        : constant Name_Id := N + 569;\n+   Name_Goto                           : constant Name_Id := N + 570;\n+   Name_If                             : constant Name_Id := N + 571;\n+   Name_In                             : constant Name_Id := N + 572;\n+   Name_Is                             : constant Name_Id := N + 573;\n+   Name_Limited                        : constant Name_Id := N + 574;\n+   Name_Loop                           : constant Name_Id := N + 575;\n+   Name_New                            : constant Name_Id := N + 576;\n+   Name_Not                            : constant Name_Id := N + 577;\n+   Name_Null                           : constant Name_Id := N + 578;\n+   Name_Of                             : constant Name_Id := N + 579;\n+   Name_Or                             : constant Name_Id := N + 580;\n+   Name_Others                         : constant Name_Id := N + 581;\n+   Name_Out                            : constant Name_Id := N + 582;\n+   Name_Package                        : constant Name_Id := N + 583;\n+   Name_Pragma                         : constant Name_Id := N + 584;\n+   Name_Private                        : constant Name_Id := N + 585;\n+   Name_Procedure                      : constant Name_Id := N + 586;\n+   Name_Raise                          : constant Name_Id := N + 587;\n+   Name_Record                         : constant Name_Id := N + 588;\n+   Name_Rem                            : constant Name_Id := N + 589;\n+   Name_Renames                        : constant Name_Id := N + 590;\n+   Name_Return                         : constant Name_Id := N + 591;\n+   Name_Reverse                        : constant Name_Id := N + 592;\n+   Name_Select                         : constant Name_Id := N + 593;\n+   Name_Separate                       : constant Name_Id := N + 594;\n+   Name_Subtype                        : constant Name_Id := N + 595;\n+   Name_Task                           : constant Name_Id := N + 596;\n+   Name_Terminate                      : constant Name_Id := N + 597;\n+   Name_Then                           : constant Name_Id := N + 598;\n+   Name_Type                           : constant Name_Id := N + 599;\n+   Name_Use                            : constant Name_Id := N + 600;\n+   Name_When                           : constant Name_Id := N + 601;\n+   Name_While                          : constant Name_Id := N + 602;\n+   Name_With                           : constant Name_Id := N + 603;\n+   Name_Xor                            : constant Name_Id := N + 604;\n \n    --  Names of intrinsic subprograms\n \n    --  Note: Asm is missing from this list, since Asm is a legitimate\n    --  convention name. So is To_Address, which is a GNAT attribute.\n \n-   First_Intrinsic_Name                 : constant Name_Id := N + 604;\n-   Name_Divide                          : constant Name_Id := N + 604;\n-   Name_Enclosing_Entity                : constant Name_Id := N + 605;\n-   Name_Exception_Information           : constant Name_Id := N + 606;\n-   Name_Exception_Message               : constant Name_Id := N + 607;\n-   Name_Exception_Name                  : constant Name_Id := N + 608;\n-   Name_File                            : constant Name_Id := N + 609;\n-   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 610;\n-   Name_Import_Address                  : constant Name_Id := N + 611;\n-   Name_Import_Largest_Value            : constant Name_Id := N + 612;\n-   Name_Import_Value                    : constant Name_Id := N + 613;\n-   Name_Is_Negative                     : constant Name_Id := N + 614;\n-   Name_Line                            : constant Name_Id := N + 615;\n-   Name_Rotate_Left                     : constant Name_Id := N + 616;\n-   Name_Rotate_Right                    : constant Name_Id := N + 617;\n-   Name_Shift_Left                      : constant Name_Id := N + 618;\n-   Name_Shift_Right                     : constant Name_Id := N + 619;\n-   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 620;\n-   Name_Source_Location                 : constant Name_Id := N + 621;\n-   Name_Unchecked_Conversion            : constant Name_Id := N + 622;\n-   Name_Unchecked_Deallocation          : constant Name_Id := N + 623;\n-   Name_To_Pointer                      : constant Name_Id := N + 624;\n-   Last_Intrinsic_Name                  : constant Name_Id := N + 624;\n+   First_Intrinsic_Name                 : constant Name_Id := N + 605;\n+   Name_Divide                          : constant Name_Id := N + 605;\n+   Name_Enclosing_Entity                : constant Name_Id := N + 606;\n+   Name_Exception_Information           : constant Name_Id := N + 607;\n+   Name_Exception_Message               : constant Name_Id := N + 608;\n+   Name_Exception_Name                  : constant Name_Id := N + 609;\n+   Name_File                            : constant Name_Id := N + 610;\n+   Name_Generic_Dispatching_Constructor : constant Name_Id := N + 611;\n+   Name_Import_Address                  : constant Name_Id := N + 612;\n+   Name_Import_Largest_Value            : constant Name_Id := N + 613;\n+   Name_Import_Value                    : constant Name_Id := N + 614;\n+   Name_Is_Negative                     : constant Name_Id := N + 615;\n+   Name_Line                            : constant Name_Id := N + 616;\n+   Name_Rotate_Left                     : constant Name_Id := N + 617;\n+   Name_Rotate_Right                    : constant Name_Id := N + 618;\n+   Name_Shift_Left                      : constant Name_Id := N + 619;\n+   Name_Shift_Right                     : constant Name_Id := N + 620;\n+   Name_Shift_Right_Arithmetic          : constant Name_Id := N + 621;\n+   Name_Source_Location                 : constant Name_Id := N + 622;\n+   Name_Unchecked_Conversion            : constant Name_Id := N + 623;\n+   Name_Unchecked_Deallocation          : constant Name_Id := N + 624;\n+   Name_To_Pointer                      : constant Name_Id := N + 625;\n+   Last_Intrinsic_Name                  : constant Name_Id := N + 625;\n \n    --  Names used in processing intrinsic calls\n \n-   Name_Free                           : constant Name_Id := N + 625;\n+   Name_Free                           : constant Name_Id := N + 626;\n \n    --  Reserved words used only in Ada 95\n \n-   First_95_Reserved_Word              : constant Name_Id := N + 626;\n-   Name_Abstract                       : constant Name_Id := N + 626;\n-   Name_Aliased                        : constant Name_Id := N + 627;\n-   Name_Protected                      : constant Name_Id := N + 628;\n-   Name_Until                          : constant Name_Id := N + 629;\n-   Name_Requeue                        : constant Name_Id := N + 630;\n-   Name_Tagged                         : constant Name_Id := N + 631;\n-   Last_95_Reserved_Word               : constant Name_Id := N + 631;\n+   First_95_Reserved_Word              : constant Name_Id := N + 627;\n+   Name_Abstract                       : constant Name_Id := N + 627;\n+   Name_Aliased                        : constant Name_Id := N + 628;\n+   Name_Protected                      : constant Name_Id := N + 629;\n+   Name_Until                          : constant Name_Id := N + 630;\n+   Name_Requeue                        : constant Name_Id := N + 631;\n+   Name_Tagged                         : constant Name_Id := N + 632;\n+   Last_95_Reserved_Word               : constant Name_Id := N + 632;\n \n    subtype Ada_95_Reserved_Words is\n      Name_Id range First_95_Reserved_Word .. Last_95_Reserved_Word;\n \n    --  Miscellaneous names used in semantic checking\n \n-   Name_Raise_Exception                : constant Name_Id := N + 632;\n+   Name_Raise_Exception                : constant Name_Id := N + 633;\n \n    --  Additional reserved words and identifiers used in GNAT Project Files\n    --  Note that Name_External is already previously declared\n \n-   Name_Ada_Roots                      : constant Name_Id := N + 633;\n-   Name_Aggregate                      : constant Name_Id := N + 634;\n-   Name_Archive_Builder                : constant Name_Id := N + 635;\n-   Name_Archive_Builder_Append_Option  : constant Name_Id := N + 636;\n-   Name_Archive_Indexer                : constant Name_Id := N + 637;\n-   Name_Archive_Suffix                 : constant Name_Id := N + 638;\n-   Name_Binder                         : constant Name_Id := N + 639;\n-   Name_Binder_Prefix                  : constant Name_Id := N + 640;\n-   Name_Body_Suffix                    : constant Name_Id := N + 641;\n-   Name_Builder                        : constant Name_Id := N + 642;\n-   Name_Builder_Switches               : constant Name_Id := N + 643;\n-   Name_Compiler                       : constant Name_Id := N + 644;\n-   Name_Compiler_Kind                  : constant Name_Id := N + 645;\n-   Name_Config_Body_File_Name          : constant Name_Id := N + 646;\n-   Name_Config_Body_File_Name_Pattern  : constant Name_Id := N + 647;\n-   Name_Config_File_Switches           : constant Name_Id := N + 648;\n-   Name_Config_File_Unique             : constant Name_Id := N + 649;\n-   Name_Config_Spec_File_Name          : constant Name_Id := N + 650;\n-   Name_Config_Spec_File_Name_Pattern  : constant Name_Id := N + 651;\n-   Name_Configuration                  : constant Name_Id := N + 652;\n-   Name_Cross_Reference                : constant Name_Id := N + 653;\n-   Name_Default_Language               : constant Name_Id := N + 654;\n-   Name_Default_Switches               : constant Name_Id := N + 655;\n-   Name_Dependency_Driver              : constant Name_Id := N + 656;\n-   Name_Dependency_File_Kind           : constant Name_Id := N + 657;\n-   Name_Dependency_Switches            : constant Name_Id := N + 658;\n-   Name_Driver                         : constant Name_Id := N + 659;\n-   Name_Excluded_Source_Dirs           : constant Name_Id := N + 660;\n-   Name_Excluded_Source_Files          : constant Name_Id := N + 661;\n-   Name_Excluded_Source_List_File      : constant Name_Id := N + 662;\n-   Name_Exec_Dir                       : constant Name_Id := N + 663;\n-   Name_Executable                     : constant Name_Id := N + 664;\n-   Name_Executable_Suffix              : constant Name_Id := N + 665;\n-   Name_Extends                        : constant Name_Id := N + 666;\n-   Name_Externally_Built               : constant Name_Id := N + 667;\n-   Name_Finder                         : constant Name_Id := N + 668;\n-   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 669;\n-   Name_Global_Config_File             : constant Name_Id := N + 670;\n-   Name_Gnatls                         : constant Name_Id := N + 671;\n-   Name_Gnatstub                       : constant Name_Id := N + 672;\n-   Name_Implementation                 : constant Name_Id := N + 673;\n-   Name_Implementation_Exceptions      : constant Name_Id := N + 674;\n-   Name_Implementation_Suffix          : constant Name_Id := N + 675;\n-   Name_Include_Switches               : constant Name_Id := N + 676;\n-   Name_Include_Path                   : constant Name_Id := N + 677;\n-   Name_Include_Path_File              : constant Name_Id := N + 678;\n-   Name_Inherit_Source_Path            : constant Name_Id := N + 679;\n-   Name_Language_Kind                  : constant Name_Id := N + 680;\n-   Name_Language_Processing            : constant Name_Id := N + 681;\n-   Name_Languages                      : constant Name_Id := N + 682;\n-   Name_Library                        : constant Name_Id := N + 683;\n-   Name_Library_Ali_Dir                : constant Name_Id := N + 684;\n-   Name_Library_Auto_Init              : constant Name_Id := N + 685;\n-   Name_Library_Auto_Init_Supported    : constant Name_Id := N + 686;\n-   Name_Library_Builder                : constant Name_Id := N + 687;\n-   Name_Library_Dir                    : constant Name_Id := N + 688;\n-   Name_Library_GCC                    : constant Name_Id := N + 689;\n-   Name_Library_Interface              : constant Name_Id := N + 690;\n-   Name_Library_Kind                   : constant Name_Id := N + 691;\n-   Name_Library_Name                   : constant Name_Id := N + 692;\n-   Name_Library_Major_Minor_Id_Supported : constant Name_Id := N + 693;\n-   Name_Library_Options                : constant Name_Id := N + 694;\n-   Name_Library_Partial_Linker         : constant Name_Id := N + 695;\n-   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 696;\n-   Name_Library_Src_Dir                : constant Name_Id := N + 697;\n-   Name_Library_Support                : constant Name_Id := N + 698;\n-   Name_Library_Symbol_File            : constant Name_Id := N + 699;\n-   Name_Library_Symbol_Policy          : constant Name_Id := N + 700;\n-   Name_Library_Version                : constant Name_Id := N + 701;\n-   Name_Library_Version_Switches       : constant Name_Id := N + 702;\n-   Name_Linker                         : constant Name_Id := N + 703;\n-   Name_Linker_Executable_Option       : constant Name_Id := N + 704;\n-   Name_Linker_Lib_Dir_Option          : constant Name_Id := N + 705;\n-   Name_Linker_Lib_Name_Option         : constant Name_Id := N + 706;\n-   Name_Local_Config_File              : constant Name_Id := N + 707;\n-   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 708;\n-   Name_Locally_Removed_Files          : constant Name_Id := N + 709;\n-   Name_Map_File_Option                : constant Name_Id := N + 710;\n-   Name_Mapping_File_Switches          : constant Name_Id := N + 711;\n-   Name_Mapping_Spec_Suffix            : constant Name_Id := N + 712;\n-   Name_Mapping_Body_Suffix            : constant Name_Id := N + 713;\n-   Name_Metrics                        : constant Name_Id := N + 714;\n-   Name_Naming                         : constant Name_Id := N + 715;\n-   Name_Object_Generated               : constant Name_Id := N + 716;\n-   Name_Objects_Linked                 : constant Name_Id := N + 717;\n-   Name_Objects_Path                   : constant Name_Id := N + 718;\n-   Name_Objects_Path_File              : constant Name_Id := N + 719;\n-   Name_Object_Dir                     : constant Name_Id := N + 720;\n-   Name_Pic_Option                     : constant Name_Id := N + 721;\n-   Name_Pretty_Printer                 : constant Name_Id := N + 722;\n-   Name_Prefix                         : constant Name_Id := N + 723;\n-   Name_Project                        : constant Name_Id := N + 724;\n-   Name_Roots                          : constant Name_Id := N + 725;\n-   Name_Required_Switches              : constant Name_Id := N + 726;\n-   Name_Run_Path_Option                : constant Name_Id := N + 727;\n-   Name_Runtime_Project                : constant Name_Id := N + 728;\n-   Name_Shared_Library_Minimum_Switches : constant Name_Id := N + 729;\n-   Name_Shared_Library_Prefix          : constant Name_Id := N + 730;\n-   Name_Shared_Library_Suffix          : constant Name_Id := N + 731;\n-   Name_Separate_Suffix                : constant Name_Id := N + 732;\n-   Name_Source_Dirs                    : constant Name_Id := N + 733;\n-   Name_Source_Files                   : constant Name_Id := N + 734;\n-   Name_Source_List_File               : constant Name_Id := N + 735;\n-   Name_Spec                           : constant Name_Id := N + 736;\n-   Name_Spec_Suffix                    : constant Name_Id := N + 737;\n-   Name_Specification                  : constant Name_Id := N + 738;\n-   Name_Specification_Exceptions       : constant Name_Id := N + 739;\n-   Name_Specification_Suffix           : constant Name_Id := N + 740;\n-   Name_Stack                          : constant Name_Id := N + 741;\n-   Name_Switches                       : constant Name_Id := N + 742;\n-   Name_Symbolic_Link_Supported        : constant Name_Id := N + 743;\n-   Name_Sync                           : constant Name_Id := N + 744;\n-   Name_Synchronize                    : constant Name_Id := N + 745;\n-   Name_Toolchain_Description          : constant Name_Id := N + 746;\n-   Name_Toolchain_Version              : constant Name_Id := N + 747;\n-   Name_Runtime_Library_Dir            : constant Name_Id := N + 748;\n+   Name_Ada_Roots                      : constant Name_Id := N + 634;\n+   Name_Aggregate                      : constant Name_Id := N + 635;\n+   Name_Archive_Builder                : constant Name_Id := N + 636;\n+   Name_Archive_Builder_Append_Option  : constant Name_Id := N + 637;\n+   Name_Archive_Indexer                : constant Name_Id := N + 638;\n+   Name_Archive_Suffix                 : constant Name_Id := N + 639;\n+   Name_Binder                         : constant Name_Id := N + 640;\n+   Name_Binder_Prefix                  : constant Name_Id := N + 641;\n+   Name_Body_Suffix                    : constant Name_Id := N + 642;\n+   Name_Builder                        : constant Name_Id := N + 643;\n+   Name_Builder_Switches               : constant Name_Id := N + 644;\n+   Name_Compiler                       : constant Name_Id := N + 645;\n+   Name_Compiler_Kind                  : constant Name_Id := N + 646;\n+   Name_Config_Body_File_Name          : constant Name_Id := N + 647;\n+   Name_Config_Body_File_Name_Pattern  : constant Name_Id := N + 648;\n+   Name_Config_File_Switches           : constant Name_Id := N + 649;\n+   Name_Config_File_Unique             : constant Name_Id := N + 650;\n+   Name_Config_Spec_File_Name          : constant Name_Id := N + 651;\n+   Name_Config_Spec_File_Name_Pattern  : constant Name_Id := N + 652;\n+   Name_Configuration                  : constant Name_Id := N + 653;\n+   Name_Cross_Reference                : constant Name_Id := N + 654;\n+   Name_Default_Language               : constant Name_Id := N + 655;\n+   Name_Default_Switches               : constant Name_Id := N + 656;\n+   Name_Dependency_Driver              : constant Name_Id := N + 657;\n+   Name_Dependency_File_Kind           : constant Name_Id := N + 658;\n+   Name_Dependency_Switches            : constant Name_Id := N + 659;\n+   Name_Driver                         : constant Name_Id := N + 660;\n+   Name_Excluded_Source_Dirs           : constant Name_Id := N + 661;\n+   Name_Excluded_Source_Files          : constant Name_Id := N + 662;\n+   Name_Excluded_Source_List_File      : constant Name_Id := N + 663;\n+   Name_Exec_Dir                       : constant Name_Id := N + 664;\n+   Name_Executable                     : constant Name_Id := N + 665;\n+   Name_Executable_Suffix              : constant Name_Id := N + 666;\n+   Name_Extends                        : constant Name_Id := N + 667;\n+   Name_Externally_Built               : constant Name_Id := N + 668;\n+   Name_Finder                         : constant Name_Id := N + 669;\n+   Name_Global_Configuration_Pragmas   : constant Name_Id := N + 670;\n+   Name_Global_Config_File             : constant Name_Id := N + 671;\n+   Name_Gnatls                         : constant Name_Id := N + 672;\n+   Name_Gnatstub                       : constant Name_Id := N + 673;\n+   Name_Implementation                 : constant Name_Id := N + 674;\n+   Name_Implementation_Exceptions      : constant Name_Id := N + 675;\n+   Name_Implementation_Suffix          : constant Name_Id := N + 676;\n+   Name_Include_Switches               : constant Name_Id := N + 677;\n+   Name_Include_Path                   : constant Name_Id := N + 678;\n+   Name_Include_Path_File              : constant Name_Id := N + 679;\n+   Name_Inherit_Source_Path            : constant Name_Id := N + 680;\n+   Name_Language_Kind                  : constant Name_Id := N + 681;\n+   Name_Language_Processing            : constant Name_Id := N + 682;\n+   Name_Languages                      : constant Name_Id := N + 683;\n+   Name_Library                        : constant Name_Id := N + 684;\n+   Name_Library_Ali_Dir                : constant Name_Id := N + 685;\n+   Name_Library_Auto_Init              : constant Name_Id := N + 686;\n+   Name_Library_Auto_Init_Supported    : constant Name_Id := N + 687;\n+   Name_Library_Builder                : constant Name_Id := N + 688;\n+   Name_Library_Dir                    : constant Name_Id := N + 689;\n+   Name_Library_GCC                    : constant Name_Id := N + 690;\n+   Name_Library_Interface              : constant Name_Id := N + 691;\n+   Name_Library_Kind                   : constant Name_Id := N + 692;\n+   Name_Library_Name                   : constant Name_Id := N + 693;\n+   Name_Library_Major_Minor_Id_Supported : constant Name_Id := N + 694;\n+   Name_Library_Options                : constant Name_Id := N + 695;\n+   Name_Library_Partial_Linker         : constant Name_Id := N + 696;\n+   Name_Library_Reference_Symbol_File  : constant Name_Id := N + 697;\n+   Name_Library_Src_Dir                : constant Name_Id := N + 698;\n+   Name_Library_Support                : constant Name_Id := N + 699;\n+   Name_Library_Symbol_File            : constant Name_Id := N + 700;\n+   Name_Library_Symbol_Policy          : constant Name_Id := N + 701;\n+   Name_Library_Version                : constant Name_Id := N + 702;\n+   Name_Library_Version_Switches       : constant Name_Id := N + 703;\n+   Name_Linker                         : constant Name_Id := N + 704;\n+   Name_Linker_Executable_Option       : constant Name_Id := N + 705;\n+   Name_Linker_Lib_Dir_Option          : constant Name_Id := N + 706;\n+   Name_Linker_Lib_Name_Option         : constant Name_Id := N + 707;\n+   Name_Local_Config_File              : constant Name_Id := N + 708;\n+   Name_Local_Configuration_Pragmas    : constant Name_Id := N + 709;\n+   Name_Locally_Removed_Files          : constant Name_Id := N + 710;\n+   Name_Map_File_Option                : constant Name_Id := N + 711;\n+   Name_Mapping_File_Switches          : constant Name_Id := N + 712;\n+   Name_Mapping_Spec_Suffix            : constant Name_Id := N + 713;\n+   Name_Mapping_Body_Suffix            : constant Name_Id := N + 714;\n+   Name_Metrics                        : constant Name_Id := N + 715;\n+   Name_Naming                         : constant Name_Id := N + 716;\n+   Name_Object_Generated               : constant Name_Id := N + 717;\n+   Name_Objects_Linked                 : constant Name_Id := N + 718;\n+   Name_Objects_Path                   : constant Name_Id := N + 719;\n+   Name_Objects_Path_File              : constant Name_Id := N + 720;\n+   Name_Object_Dir                     : constant Name_Id := N + 721;\n+   Name_Pic_Option                     : constant Name_Id := N + 722;\n+   Name_Pretty_Printer                 : constant Name_Id := N + 723;\n+   Name_Prefix                         : constant Name_Id := N + 724;\n+   Name_Project                        : constant Name_Id := N + 725;\n+   Name_Roots                          : constant Name_Id := N + 726;\n+   Name_Required_Switches              : constant Name_Id := N + 727;\n+   Name_Run_Path_Option                : constant Name_Id := N + 728;\n+   Name_Runtime_Project                : constant Name_Id := N + 729;\n+   Name_Shared_Library_Minimum_Switches : constant Name_Id := N + 730;\n+   Name_Shared_Library_Prefix          : constant Name_Id := N + 731;\n+   Name_Shared_Library_Suffix          : constant Name_Id := N + 732;\n+   Name_Separate_Suffix                : constant Name_Id := N + 733;\n+   Name_Source_Dirs                    : constant Name_Id := N + 734;\n+   Name_Source_Files                   : constant Name_Id := N + 735;\n+   Name_Source_List_File               : constant Name_Id := N + 736;\n+   Name_Spec                           : constant Name_Id := N + 737;\n+   Name_Spec_Suffix                    : constant Name_Id := N + 738;\n+   Name_Specification                  : constant Name_Id := N + 739;\n+   Name_Specification_Exceptions       : constant Name_Id := N + 740;\n+   Name_Specification_Suffix           : constant Name_Id := N + 741;\n+   Name_Stack                          : constant Name_Id := N + 742;\n+   Name_Switches                       : constant Name_Id := N + 743;\n+   Name_Symbolic_Link_Supported        : constant Name_Id := N + 744;\n+   Name_Sync                           : constant Name_Id := N + 745;\n+   Name_Synchronize                    : constant Name_Id := N + 746;\n+   Name_Toolchain_Description          : constant Name_Id := N + 747;\n+   Name_Toolchain_Version              : constant Name_Id := N + 748;\n+   Name_Runtime_Library_Dir            : constant Name_Id := N + 749;\n \n    --  Other miscellaneous names used in front end\n \n-   Name_Unaligned_Valid                : constant Name_Id := N + 749;\n+   Name_Unaligned_Valid                : constant Name_Id := N + 750;\n \n    --  Ada 2005 reserved words\n \n-   First_2005_Reserved_Word            : constant Name_Id := N + 750;\n-   Name_Interface                      : constant Name_Id := N + 750;\n-   Name_Overriding                     : constant Name_Id := N + 751;\n-   Name_Synchronized                   : constant Name_Id := N + 752;\n-   Last_2005_Reserved_Word             : constant Name_Id := N + 752;\n+   First_2005_Reserved_Word            : constant Name_Id := N + 751;\n+   Name_Interface                      : constant Name_Id := N + 751;\n+   Name_Overriding                     : constant Name_Id := N + 752;\n+   Name_Synchronized                   : constant Name_Id := N + 753;\n+   Last_2005_Reserved_Word             : constant Name_Id := N + 753;\n \n    subtype Ada_2005_Reserved_Words is\n      Name_Id range First_2005_Reserved_Word .. Last_2005_Reserved_Word;\n \n    --  Mark last defined name for consistency check in Snames body\n \n-   Last_Predefined_Name                : constant Name_Id := N + 752;\n+   Last_Predefined_Name                : constant Name_Id := N + 753;\n \n    ---------------------------------------\n    -- Subtypes Defining Name Categories --"}, {"sha": "5fb53ae339ea1b15ab76939bf91cc695d3bbee1b", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -531,17 +531,44 @@ package body Treepr is\n \n             begin\n                case M is\n-                  when Default_Mechanism  => Write_Str (\"Default\");\n-                  when By_Copy            => Write_Str (\"By_Copy\");\n-                  when By_Reference       => Write_Str (\"By_Reference\");\n-                  when By_Descriptor      => Write_Str (\"By_Descriptor\");\n-                  when By_Descriptor_UBS  => Write_Str (\"By_Descriptor_UBS\");\n-                  when By_Descriptor_UBSB => Write_Str (\"By_Descriptor_UBSB\");\n-                  when By_Descriptor_UBA  => Write_Str (\"By_Descriptor_UBA\");\n-                  when By_Descriptor_S    => Write_Str (\"By_Descriptor_S\");\n-                  when By_Descriptor_SB   => Write_Str (\"By_Descriptor_SB\");\n-                  when By_Descriptor_A    => Write_Str (\"By_Descriptor_A\");\n-                  when By_Descriptor_NCA  => Write_Str (\"By_Descriptor_NCA\");\n+                  when Default_Mechanism\n+                                    => Write_Str (\"Default\");\n+                  when By_Copy\n+                                    => Write_Str (\"By_Copy\");\n+                  when By_Reference\n+                                    => Write_Str (\"By_Reference\");\n+                  when By_Descriptor\n+                                    => Write_Str (\"By_Descriptor\");\n+                  when By_Descriptor_UBS\n+                                    => Write_Str (\"By_Descriptor_UBS\");\n+                  when By_Descriptor_UBSB\n+                                    => Write_Str (\"By_Descriptor_UBSB\");\n+                  when By_Descriptor_UBA\n+                                    => Write_Str (\"By_Descriptor_UBA\");\n+                  when By_Descriptor_S\n+                                    => Write_Str (\"By_Descriptor_S\");\n+                  when By_Descriptor_SB\n+                                    => Write_Str (\"By_Descriptor_SB\");\n+                  when By_Descriptor_A\n+                                    => Write_Str (\"By_Descriptor_A\");\n+                  when By_Descriptor_NCA\n+                                    => Write_Str (\"By_Descriptor_NCA\");\n+                  when By_Short_Descriptor\n+                                    => Write_Str (\"By_Short_Descriptor\");\n+                  when By_Short_Descriptor_UBS\n+                                    => Write_Str (\"By_Short_Descriptor_UBS\");\n+                  when By_Short_Descriptor_UBSB\n+                                    => Write_Str (\"By_Short_Descriptor_UBSB\");\n+                  when By_Short_Descriptor_UBA\n+                                    => Write_Str (\"By_Short_Descriptor_UBA\");\n+                  when By_Short_Descriptor_S\n+                                    => Write_Str (\"By_Short_Descriptor_S\");\n+                  when By_Short_Descriptor_SB\n+                                    => Write_Str (\"By_Short_Descriptor_SB\");\n+                  when By_Short_Descriptor_A\n+                                    => Write_Str (\"By_Short_Descriptor_A\");\n+                  when By_Short_Descriptor_NCA\n+                                    => Write_Str (\"By_Short_Descriptor_NCA\");\n \n                   when 1 .. Mechanism_Type'Last =>\n                      Write_Str (\"By_Copy if size <= \");"}, {"sha": "de9c54bfe5f67e2b06c66f195d7fd0e89bf6a7e7", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -736,7 +736,7 @@ package Types is\n    --  passing mechanism. See specification of Sem_Mech for full details.\n    --  The following subtype is used to represent values of this type:\n \n-   subtype Mechanism_Type is Int range -10 .. Int'Last;\n+   subtype Mechanism_Type is Int range -18 .. Int'Last;\n    --  Type used to represent a mechanism value. This is a subtype rather\n    --  than a type to avoid some annoying processing problems with certain\n    --  routines in Einfo (processing them to create the corresponding C)."}, {"sha": "1d4fd67065bf6df64cc5209eeee73c538f3837de", "filename": "gcc/ada/types.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d628c01538e48900f60a9b0bf1e9c5fd53038ad8/gcc%2Fada%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.h?ref=d628c01538e48900f60a9b0bf1e9c5fd53038ad8", "patch": "@@ -328,6 +328,15 @@ typedef Int Mechanism_Type;\n #define By_Descriptor_A    (-9)\n #define By_Descriptor_NCA  (-10)\n #define By_Descriptor_Last (-10)\n+#define By_Short_Descriptor      (-11)\n+#define By_Short_Descriptor_UBS  (-12)\n+#define By_Short_Descriptor_UBSB (-13)\n+#define By_Short_Descriptor_UBA  (-14)\n+#define By_Short_Descriptor_S    (-15)\n+#define By_Short_Descriptor_SB   (-16)\n+#define By_Short_Descriptor_A    (-17)\n+#define By_Short_Descriptor_NCA  (-18)\n+#define By_Short_Descriptor_Last (-18)\n \n /* Internal to Gigi.  */\n #define By_Copy_Return     (-128)"}]}