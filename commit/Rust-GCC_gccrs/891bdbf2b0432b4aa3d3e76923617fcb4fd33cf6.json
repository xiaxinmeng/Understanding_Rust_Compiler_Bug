{"sha": "891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkxYmRiZjJiMDQzMmI0YWEzZDNlNzY5MjM2MTdmY2I0ZmQzM2NmNg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-08-17T08:50:56Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-08-17T09:39:15Z"}, "message": "Special case -TYPE_MIN_VALUE for flag_wrapv in operator_abs::op1_range.\n\nWith flag_wrapv, -TYPE_MIN_VALUE = TYPE_MIN_VALUE which is\nunrepresentable.  We currently special case this in the ABS folding\nroutine, but are missing similar treatment in operator_abs::op1_range.\n\nTested on x86-64 Linux.\n\n\tPR tree-optimization/101938\n\ngcc/ChangeLog:\n\n\t* range-op.cc (operator_abs::op1_range): Special case\n\t-TYPE_MIN_VALUE for flag_wrapv.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr101938.c: New test.", "tree": {"sha": "c93c4b18b2ba3f502656545506092147ff369ec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c93c4b18b2ba3f502656545506092147ff369ec8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6/comments", "author": null, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ed779689631ff8f398dcde06d5efa2a3c43ef27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ed779689631ff8f398dcde06d5efa2a3c43ef27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ed779689631ff8f398dcde06d5efa2a3c43ef27"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "56eccf471a20bcb1343e8598065f5e926c38c498", "filename": "gcc/range-op.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6", "patch": "@@ -3642,6 +3642,12 @@ operator_abs::op1_range (irange &r, tree type,\n     r.union_ (int_range<1> (type,\n \t\t\t    -positives.upper_bound (i),\n \t\t\t    -positives.lower_bound (i)));\n+  // With flag_wrapv, -TYPE_MIN_VALUE = TYPE_MIN_VALUE which is\n+  // unrepresentable.  Add -TYPE_MIN_VALUE in this case.\n+  wide_int min_value = wi::min_value (TYPE_PRECISION (type), TYPE_SIGN (type));\n+  wide_int lb = lhs.lower_bound ();\n+  if (!TYPE_OVERFLOW_UNDEFINED (type) && wi::eq_p (lb, min_value))\n+    r.union_ (int_range<2> (type, lb, lb));\n   return true;\n }\n "}, {"sha": "82777554eaf7b1948ac4c2698b5eb374bb28cdc4", "filename": "gcc/testsuite/gcc.dg/pr101938.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101938.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101938.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101938.c?ref=891bdbf2b0432b4aa3d3e76923617fcb4fd33cf6", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do run }\n+// { dg-require-effective-target lp64 }\n+// { dg-options \"-O2 -fwrapv\" }\n+\n+typedef long long int int64;\n+#define INT64CONST(x) (x##LL)\n+/* -9223372036854775808ULL */\n+#define INT64_MIN (-INT64CONST(0x7FFFFFFFFFFFFFFF) - 1)\n+\n+static void __attribute__((noipa)) foo(int64 arg1, int64 arg2) {\n+  int64 a1 = -arg1;\n+  int64 a2 = (arg2 < 0) ? arg2 : -arg2;\n+\n+  if (a1 > a2) {\n+    int64 swap = arg1;\n+    arg1 = arg2;\n+    arg2 = swap;\n+  }\n+\n+  if (arg1 == INT64_MIN && arg2 == -1) return;\n+\n+  __builtin_abort();\n+}\n+\n+int main() {\n+  foo(-1, INT64_MIN);\n+  return 0;\n+}"}]}