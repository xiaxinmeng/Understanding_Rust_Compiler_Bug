{"sha": "cb4132fe11e1852aa1bb108d69ace94f09296c5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I0MTMyZmUxMWUxODUyYWExYmIxMDhkNjlhY2U5NGYwOTI5NmM1Yg==", "commit": {"author": {"name": "Torsten Schoenfeld", "email": "kaffeetisch@gmx.de", "date": "2006-07-25T20:01:22Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2006-07-25T20:01:22Z"}, "message": "ffi.h.in (ffi_type_ulong, [...]): Define correctly for 32-bit architectures.\n\n2006-07-25  Torsten Schoenfeld  <kaffeetisch@gmx.de>\n\n\t* include/ffi.h.in (ffi_type_ulong, ffi_type_slong): Define correctly\n\tfor 32-bit architectures.\n\t* testsuite/libffi.call/return_ul.c: New test case.\n\nFrom-SVN: r115739", "tree": {"sha": "75a10258420b179909b785eb7bb52eb01ba11601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75a10258420b179909b785eb7bb52eb01ba11601"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb4132fe11e1852aa1bb108d69ace94f09296c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4132fe11e1852aa1bb108d69ace94f09296c5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb4132fe11e1852aa1bb108d69ace94f09296c5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb4132fe11e1852aa1bb108d69ace94f09296c5b/comments", "author": {"login": "tsch", "id": 173190, "node_id": "MDQ6VXNlcjE3MzE5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/173190?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tsch", "html_url": "https://github.com/tsch", "followers_url": "https://api.github.com/users/tsch/followers", "following_url": "https://api.github.com/users/tsch/following{/other_user}", "gists_url": "https://api.github.com/users/tsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/tsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tsch/subscriptions", "organizations_url": "https://api.github.com/users/tsch/orgs", "repos_url": "https://api.github.com/users/tsch/repos", "events_url": "https://api.github.com/users/tsch/events{/privacy}", "received_events_url": "https://api.github.com/users/tsch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6583cf153de60fde983298105321deb3e5b0b3cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6583cf153de60fde983298105321deb3e5b0b3cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6583cf153de60fde983298105321deb3e5b0b3cd"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "c55db3c81c16427eef022ded5f16fdd946847ce4", "filename": "libffi/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4132fe11e1852aa1bb108d69ace94f09296c5b/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4132fe11e1852aa1bb108d69ace94f09296c5b/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=cb4132fe11e1852aa1bb108d69ace94f09296c5b", "patch": "@@ -1,3 +1,9 @@\n+2006-07-25  Torsten Schoenfeld  <kaffeetisch@gmx.de>\n+\n+\t* include/ffi.h.in (ffi_type_ulong, ffi_type_slong): Define correctly\n+\tfor 32-bit architectures.\n+\t* testsuite/libffi.call/return_ul.c: New test case.\n+\n 2006-07-19  David Daney  <ddaney@avtrex.com>\n \n \t* testsuite/libffi.call/closure_fn6.c: Remove xfail for mips,"}, {"sha": "f6f6e1a2e1076e0b343e1228bd8acb8d6475ad8f", "filename": "libffi/include/ffi.h.in", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4132fe11e1852aa1bb108d69ace94f09296c5b/libffi%2Finclude%2Fffi.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4132fe11e1852aa1bb108d69ace94f09296c5b/libffi%2Finclude%2Fffi.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Finclude%2Fffi.h.in?ref=cb4132fe11e1852aa1bb108d69ace94f09296c5b", "patch": "@@ -112,16 +112,24 @@ extern \"C\" {\n  #error \"int size not supported\"\n #endif\n \n-#define ffi_type_ulong         ffi_type_uint64\n-#define ffi_type_slong         ffi_type_sint64\n #if LONG_MAX == 2147483647\n # if FFI_LONG_LONG_MAX != 9223372036854775807\n-  #error \"no 64-bit data type supported\"\n+ #error \"no 64-bit data type supported\"\n # endif\n #elif LONG_MAX != 9223372036854775807\n  #error \"long size not supported\"\n #endif\n \n+#if LONG_MAX == 2147483647\n+# define ffi_type_ulong        ffi_type_uint32\n+# define ffi_type_slong        ffi_type_sint32\n+#elif LONG_MAX == 9223372036854775807\n+# define ffi_type_ulong        ffi_type_uint64\n+# define ffi_type_slong        ffi_type_sint64\n+#else\n+ #error \"long size not supported\"\n+#endif\n+\n /* The closure code assumes that this works on pointers, i.e. a size_t\t*/\n /* can hold a pointer.\t\t\t\t\t\t\t*/\n "}, {"sha": "25102240bc855c15a1f2e8111fbbb5ca6d5c00b2", "filename": "libffi/testsuite/libffi.call/return_ul.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb4132fe11e1852aa1bb108d69ace94f09296c5b/libffi%2Ftestsuite%2Flibffi.call%2Freturn_ul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb4132fe11e1852aa1bb108d69ace94f09296c5b/libffi%2Ftestsuite%2Flibffi.call%2Freturn_ul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Freturn_ul.c?ref=cb4132fe11e1852aa1bb108d69ace94f09296c5b", "patch": "@@ -0,0 +1,38 @@\n+/* Area:\tffi_call\n+   Purpose:\tCheck if unsigned long as return type is handled correctly.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<kaffeetisch at gmx dot de> 20060724  */\n+\n+/* { dg-do run } */\n+#include \"ffitest.h\"\n+static unsigned long return_ul(unsigned long ul1, unsigned long ul2)\n+{\n+  return ul1 + ul2;\n+}\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+  ffi_type *args[MAX_ARGS];\n+  void *values[MAX_ARGS];\n+  unsigned long res;\n+  unsigned long ul1, ul2;\n+\n+  args[0] = &ffi_type_ulong;\n+  args[1] = &ffi_type_ulong;\n+  values[0] = &ul1;\n+  values[1] = &ul2;\n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2,\n+\t\t     &ffi_type_ulong, args) == FFI_OK);\n+\n+  ul1 = 1073741823L;\n+  ul2 = 1073741824L;\n+\n+  ffi_call(&cif, FFI_FN(return_ul), &res, values);\n+  printf(\"res: %ld, %ld\\n\", res, ul1 + ul2);\n+  /* { dg-output \"res: 2147483647, 2147483647\" } */\n+\n+  exit(0);\n+}"}]}