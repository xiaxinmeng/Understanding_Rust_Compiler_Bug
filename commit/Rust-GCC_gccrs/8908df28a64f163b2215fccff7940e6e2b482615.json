{"sha": "8908df28a64f163b2215fccff7940e6e2b482615", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkwOGRmMjhhNjRmMTYzYjIyMTVmY2NmZjc5NDBlNmUyYjQ4MjYxNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-10-13T21:43:42Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-10-13T21:43:42Z"}, "message": "re PR rtl-optimization/45912 (Patch for PR tree-optimization/44972 caused 2500+ FAILs on Solaris 2/SPARC)\n\n\tPR rtl-optimization/45912\n\t* ira-costs.c (ira_tune_allocno_costs_and_cover_classes): Test the\n\tregno of registers instead of their index to compute the alignment.\n\nFrom-SVN: r165437", "tree": {"sha": "bdb90237b6cec0a8cd6c6ba17503d4263d5cbe5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdb90237b6cec0a8cd6c6ba17503d4263d5cbe5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8908df28a64f163b2215fccff7940e6e2b482615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8908df28a64f163b2215fccff7940e6e2b482615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8908df28a64f163b2215fccff7940e6e2b482615", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8908df28a64f163b2215fccff7940e6e2b482615/comments", "author": null, "committer": null, "parents": [{"sha": "1e27129f2e48fd6752e6d329e1294ed1e922df6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e27129f2e48fd6752e6d329e1294ed1e922df6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e27129f2e48fd6752e6d329e1294ed1e922df6d"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "3ad8dfd16a2c8913b2b3a808046aaee46a335089", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8908df28a64f163b2215fccff7940e6e2b482615/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8908df28a64f163b2215fccff7940e6e2b482615/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8908df28a64f163b2215fccff7940e6e2b482615", "patch": "@@ -1,3 +1,9 @@\n+2010-10-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/45912\n+\t* ira-costs.c (ira_tune_allocno_costs_and_cover_classes): Test the\n+\tregno of registers instead of their index to compute the alignment.\n+\n 2010-10-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_build_const_vector): Check vector"}, {"sha": "db9ed7cd03dde1d2a712ba0ecb790643972e898b", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8908df28a64f163b2215fccff7940e6e2b482615/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8908df28a64f163b2215fccff7940e6e2b482615/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=8908df28a64f163b2215fccff7940e6e2b482615", "patch": "@@ -1789,26 +1789,25 @@ ira_tune_allocno_costs_and_cover_classes (void)\n       if (min_cost != INT_MAX)\n \tALLOCNO_COVER_CLASS_COST (a) = min_cost;\n \n-      /* Some targets allow pseudos to be allocated to unaligned\n-         sequences of hard registers.  However, selecting an unaligned\n-         sequence can unnecessarily restrict later allocations.  So\n-         increase the cost of unaligned hard regs to encourage the use\n-         of aligned hard regs.  */\n+      /* Some targets allow pseudos to be allocated to unaligned sequences\n+\t of hard registers.  However, selecting an unaligned sequence can\n+\t unnecessarily restrict later allocations.  So increase the cost of\n+\t unaligned hard regs to encourage the use of aligned hard regs.  */\n       {\n-\tint nregs, index;\n+\tconst int nregs = ira_reg_class_nregs[cover_class][ALLOCNO_MODE (a)];\n \n-\tif ((nregs = ira_reg_class_nregs[cover_class][ALLOCNO_MODE (a)]) > 1)\n+\tif (nregs > 1)\n \t  {\n \t    ira_allocate_and_set_costs\n \t      (&ALLOCNO_HARD_REG_COSTS (a), cover_class,\n \t       ALLOCNO_COVER_CLASS_COST (a));\n \t    reg_costs = ALLOCNO_HARD_REG_COSTS (a);\n \t    for (j = n - 1; j >= 0; j--)\n \t      {\n-\t\tif (j % nregs != 0)\n+\t\tregno = ira_non_ordered_class_hard_regs[cover_class][j];\n+\t\tif ((regno % nregs) != 0)\n \t\t  {\n-\t\t    regno = ira_non_ordered_class_hard_regs[cover_class][j];\n-\t\t    index = ira_class_hard_reg_index[cover_class][regno];\n+\t\t    int index = ira_class_hard_reg_index[cover_class][regno];\n \t\t    ira_assert (index != -1);\n \t\t    reg_costs[index] += ALLOCNO_FREQ (a);\n \t\t  }"}, {"sha": "5d99bd69befc333edee391bb4a52165a28936a60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8908df28a64f163b2215fccff7940e6e2b482615/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8908df28a64f163b2215fccff7940e6e2b482615/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8908df28a64f163b2215fccff7940e6e2b482615", "patch": "@@ -1,3 +1,7 @@\n+2010-10-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/execute/20101013-1.c: New test.\n+\n 2010-10-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR objc/45878"}, {"sha": "7d477aff046bfdb652db9abd0caa1f1721bdc372", "filename": "gcc/testsuite/gcc.c-torture/execute/20101013-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8908df28a64f163b2215fccff7940e6e2b482615/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101013-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8908df28a64f163b2215fccff7940e6e2b482615/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101013-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20101013-1.c?ref=8908df28a64f163b2215fccff7940e6e2b482615", "patch": "@@ -0,0 +1,36 @@\n+/* PR rtl-optimization/45912 */\n+\n+extern void abort (void);\n+\n+static void* __attribute__((noinline,noclone))\n+get_addr_base_and_unit_offset (void *base, long long *i)\n+{\n+  *i = 0;\n+  return base;\n+}\n+\n+static void* __attribute__((noinline,noclone))\n+build_int_cst (void *base, long long offset)\n+{\n+  if (offset != 4)\n+    abort ();\n+\n+  return base;\n+}\n+\n+static void* __attribute__((noinline,noclone))\n+build_ref_for_offset (void *base, long long offset)\n+{\n+  long long base_offset;\n+  base = get_addr_base_and_unit_offset (base, &base_offset);\n+  return build_int_cst (base, base_offset + offset / 8);\n+}\n+\n+int\n+main (void)\n+{\n+  void *ret = build_ref_for_offset ((void *)0, 32);\n+  if (ret != (void *)0)\n+    abort ();\n+  return 0;\n+}"}]}