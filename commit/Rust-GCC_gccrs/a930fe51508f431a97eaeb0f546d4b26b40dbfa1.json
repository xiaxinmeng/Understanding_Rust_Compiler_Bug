{"sha": "a930fe51508f431a97eaeb0f546d4b26b40dbfa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkzMGZlNTE1MDhmNDMxYTk3ZWFlYjBmNTQ2ZDRiMjZiNDBkYmZhMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T07:18:05Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T07:18:05Z"}, "message": "poly_int: emit_single_push_insn_1\n\nThis patch makes emit_single_push_insn_1 cope with polynomial mode sizes.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* expr.c (emit_single_push_insn_1): Treat mode sizes as polynomial.\n\tUse plus_constant instead of gen_rtx_PLUS.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256154", "tree": {"sha": "6c4f6fe2cb98157e4624550c81d5f1dae2f7ef32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c4f6fe2cb98157e4624550c81d5f1dae2f7ef32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a930fe51508f431a97eaeb0f546d4b26b40dbfa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a930fe51508f431a97eaeb0f546d4b26b40dbfa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a930fe51508f431a97eaeb0f546d4b26b40dbfa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a930fe51508f431a97eaeb0f546d4b26b40dbfa1/comments", "author": null, "committer": null, "parents": [{"sha": "b2e894a84ec130c7e8d849728720b29cae1c6063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2e894a84ec130c7e8d849728720b29cae1c6063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2e894a84ec130c7e8d849728720b29cae1c6063"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "d37f05a5cfe2d5c70f8b12c44a819d4e92b5f228", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a930fe51508f431a97eaeb0f546d4b26b40dbfa1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a930fe51508f431a97eaeb0f546d4b26b40dbfa1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a930fe51508f431a97eaeb0f546d4b26b40dbfa1", "patch": "@@ -1,3 +1,10 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* expr.c (emit_single_push_insn_1): Treat mode sizes as polynomial.\n+\tUse plus_constant instead of gen_rtx_PLUS.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "336673f059aaddf372422de001c98b944b2a6d3a", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a930fe51508f431a97eaeb0f546d4b26b40dbfa1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a930fe51508f431a97eaeb0f546d4b26b40dbfa1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a930fe51508f431a97eaeb0f546d4b26b40dbfa1", "patch": "@@ -4155,9 +4155,6 @@ emit_single_push_insn_1 (machine_mode mode, rtx x, tree type)\n      access to type.  */\n   else if (targetm.calls.function_arg_padding (mode, type) == PAD_DOWNWARD)\n     {\n-      unsigned padding_size = rounded_size - GET_MODE_SIZE (mode);\n-      HOST_WIDE_INT offset;\n-\n       emit_move_insn (stack_pointer_rtx,\n \t\t      expand_binop (Pmode,\n \t\t\t\t    STACK_GROWS_DOWNWARD ? sub_optab\n@@ -4166,31 +4163,27 @@ emit_single_push_insn_1 (machine_mode mode, rtx x, tree type)\n \t\t\t\t    gen_int_mode (rounded_size, Pmode),\n \t\t\t\t    NULL_RTX, 0, OPTAB_LIB_WIDEN));\n \n-      offset = (HOST_WIDE_INT) padding_size;\n+      poly_int64 offset = rounded_size - GET_MODE_SIZE (mode);\n       if (STACK_GROWS_DOWNWARD && STACK_PUSH_CODE == POST_DEC)\n \t/* We have already decremented the stack pointer, so get the\n \t   previous value.  */\n-\toffset += (HOST_WIDE_INT) rounded_size;\n+\toffset += rounded_size;\n \n       if (!STACK_GROWS_DOWNWARD && STACK_PUSH_CODE == POST_INC)\n \t/* We have already incremented the stack pointer, so get the\n \t   previous value.  */\n-\toffset -= (HOST_WIDE_INT) rounded_size;\n+\toffset -= rounded_size;\n \n-      dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\tgen_int_mode (offset, Pmode));\n+      dest_addr = plus_constant (Pmode, stack_pointer_rtx, offset);\n     }\n   else\n     {\n       if (STACK_GROWS_DOWNWARD)\n \t/* ??? This seems wrong if STACK_PUSH_CODE == POST_DEC.  */\n-\tdest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\t  gen_int_mode (-(HOST_WIDE_INT) rounded_size,\n-\t\t\t\t\t\tPmode));\n+\tdest_addr = plus_constant (Pmode, stack_pointer_rtx, -rounded_size);\n       else\n \t/* ??? This seems wrong if STACK_PUSH_CODE == POST_INC.  */\n-\tdest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n-\t\t\t\t  gen_int_mode (rounded_size, Pmode));\n+\tdest_addr = plus_constant (Pmode, stack_pointer_rtx, rounded_size);\n \n       dest_addr = gen_rtx_PRE_MODIFY (Pmode, stack_pointer_rtx, dest_addr);\n     }"}]}