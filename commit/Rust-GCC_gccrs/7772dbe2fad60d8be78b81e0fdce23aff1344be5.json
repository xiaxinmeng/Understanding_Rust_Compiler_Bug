{"sha": "7772dbe2fad60d8be78b81e0fdce23aff1344be5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc3MmRiZTJmYWQ2MGQ4YmU3OGI4MWUwZmRjZTIzYWZmMTM0NGJlNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-06-20T15:37:35Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-06-20T15:37:35Z"}, "message": "re PR c++/87512 (Error: the type \u2018const auto\u2019 of \u2018constexpr\u2019 variable is not literal)\n\n\tPR c++/87512\n\t* g++.dg/cpp1z/inline-var7.C: New test.\n\nFrom-SVN: r272512", "tree": {"sha": "02579aa9dc2362d4960542cf01e593de8848e4a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02579aa9dc2362d4960542cf01e593de8848e4a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7772dbe2fad60d8be78b81e0fdce23aff1344be5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7772dbe2fad60d8be78b81e0fdce23aff1344be5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7772dbe2fad60d8be78b81e0fdce23aff1344be5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7772dbe2fad60d8be78b81e0fdce23aff1344be5/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac173024954b4e620c80ab81715bc5d50907369a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac173024954b4e620c80ab81715bc5d50907369a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac173024954b4e620c80ab81715bc5d50907369a"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "2d741d8df46025d23156b807fea8abdb199a177d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7772dbe2fad60d8be78b81e0fdce23aff1344be5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7772dbe2fad60d8be78b81e0fdce23aff1344be5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7772dbe2fad60d8be78b81e0fdce23aff1344be5", "patch": "@@ -1,3 +1,8 @@\n+2019-06-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87512\n+\t* g++.dg/cpp1z/inline-var7.C: New test.\n+\n 2019-06-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/54855"}, {"sha": "71fa1d3b7da6dc4c2dc56fa86b2b87098b4898d7", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var7.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7772dbe2fad60d8be78b81e0fdce23aff1344be5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7772dbe2fad60d8be78b81e0fdce23aff1344be5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var7.C?ref=7772dbe2fad60d8be78b81e0fdce23aff1344be5", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/87512\n+// { dg-do compile { target c++17 } }\n+\n+template <int, typename T = int> using enable_if_t = int;\n+template<typename T> struct is_pointer { enum { value = 0 }; };\n+\n+template <typename T>\n+inline constexpr auto IsPtr = is_pointer<T>::value;\n+\n+class Foo;\n+class Bar;\n+\n+template <typename T1, typename T2>\n+void foo(T1, T2);\n+\n+template <typename T>\n+enable_if_t<IsPtr<T>> foo(T, Foo);\n+\n+template <>\n+void foo<Bar>(Bar, Bar);"}]}