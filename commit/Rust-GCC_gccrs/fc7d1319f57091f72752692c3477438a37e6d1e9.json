{"sha": "fc7d1319f57091f72752692c3477438a37e6d1e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM3ZDEzMTlmNTcwOTFmNzI3NTI2OTJjMzQ3NzQzOGEzN2U2ZDFlOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-12T12:32:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-06-12T12:32:29Z"}, "message": "[multiple changes]\n\n\n2012-06-12  Arnaud Charlet  <charlet@adacore.com>\n\n\t* xref_lib.adb (Get_Full_Type): Add support for 'G'.\n\n2012-06-12  Tristan Gingold  <gingold@adacore.com>\n\n\t* a-exexpr-gcc.adb (Unwind_Exception): Add 4 more private fields.\n\n2012-06-12  Fedor Rybin  <frybin@adacore.com>\n\n\t* gnat_ugn.texi: Update doc on gnattest.\n\n2012-06-12  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch12.adb: Add comments.\n\nFrom-SVN: r188453", "tree": {"sha": "f2520b9aa140a75b13d4c6cec31d386485f865b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2520b9aa140a75b13d4c6cec31d386485f865b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc7d1319f57091f72752692c3477438a37e6d1e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7d1319f57091f72752692c3477438a37e6d1e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc7d1319f57091f72752692c3477438a37e6d1e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7d1319f57091f72752692c3477438a37e6d1e9/comments", "author": null, "committer": null, "parents": [{"sha": "2137e8a657d6a1e851d2926309031f6d16807c84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2137e8a657d6a1e851d2926309031f6d16807c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2137e8a657d6a1e851d2926309031f6d16807c84"}], "stats": {"total": 247, "additions": 149, "deletions": 98}, "files": [{"sha": "cadead57b755fb3cc090d15822c6f6160a8f5e7c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7d1319f57091f72752692c3477438a37e6d1e9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7d1319f57091f72752692c3477438a37e6d1e9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fc7d1319f57091f72752692c3477438a37e6d1e9", "patch": "@@ -1,3 +1,19 @@\n+2012-06-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* xref_lib.adb (Get_Full_Type): Add support for 'G'.\n+\n+2012-06-12  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* a-exexpr-gcc.adb (Unwind_Exception): Add 4 more private fields.\n+\n+2012-06-12  Fedor Rybin  <frybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Update doc on gnattest.\n+\n+2012-06-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch12.adb: Add comments.\n+\n 2012-06-12  Robert Dewar  <dewar@adacore.com>\n \n \t* switch-c.adb, inline.adb, usage.adb, opt.ads: Minor reformatting."}, {"sha": "f43c345dca5cef7d9061ad1663297009375c32ff", "filename": "gcc/ada/a-exexpr-gcc.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7d1319f57091f72752692c3477438a37e6d1e9/gcc%2Fada%2Fa-exexpr-gcc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7d1319f57091f72752692c3477438a37e6d1e9/gcc%2Fada%2Fa-exexpr-gcc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr-gcc.adb?ref=fc7d1319f57091f72752692c3477438a37e6d1e9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -108,6 +108,14 @@ package body Exception_Propagation is\n       Cleanup  : System.Address;\n       Private1 : Unwind_Word;\n       Private2 : Unwind_Word;\n+\n+      --  Usual exception structure has only 2 private fields, but the SEH\n+      --  one has 6.  To avoid makeing this file more complex, we use 6 fields\n+      --  on all platforms, wasting a few bytes on some.\n+      Private3 : Unwind_Word;\n+      Private4 : Unwind_Word;\n+      Private5 : Unwind_Word;\n+      Private6 : Unwind_Word;\n    end record;\n    pragma Convention (C, Unwind_Exception);\n    --  Map the GCC struct used for exception handling\n@@ -475,8 +483,7 @@ package body Exception_Propagation is\n         new GNAT_GCC_Exception'\n           (Header     => (Class => GNAT_Exception_Class,\n                           Cleanup => GNAT_GCC_Exception_Cleanup'Address,\n-                          Private1 => 0,\n-                          Private2 => 0),\n+                          others => 0),\n            Occurrence => Excep.all);\n \n       --  Propagate it"}, {"sha": "4a1baf2aadf412c92c33c74cf51691892b232851", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 120, "deletions": 94, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7d1319f57091f72752692c3477438a37e6d1e9/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7d1319f57091f72752692c3477438a37e6d1e9/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=fc7d1319f57091f72752692c3477438a37e6d1e9", "patch": "@@ -18068,24 +18068,24 @@ Verbose mode: generate version information.\n @findex gnattest\n \n @noindent\n-@command{gnattest} is an ASIS-based utility that creates unit-test stubs\n+@command{gnattest} is an ASIS-based utility that creates unit-test skeletons\n as well as a test driver infrastructure (harness). @command{gnattest} creates\n-a stub for each visible subprogram in the packages under consideration when\n+a skeleton for each visible subprogram in the packages under consideration when\n they do not exist already.\n \n In order to process source files from a project, @command{gnattest} has to\n-semantically analyze the sources. Therefore, test stubs can only be\n+semantically analyze the sources. Therefore, test skeletons can only be\n generated for legal Ada units. If a unit is dependent on other units,\n those units should be among the source files of the project or of other projects\n imported by this one.\n \n-Generated stubs and harnesses are based on the AUnit testing framework. AUnit is\n-an Ada adaptation of the xxxUnit testing frameworks, similar to JUnit for Java\n-or CppUnit for C++. While it is advised that gnattest users read the AUnit\n-manual, deep knowledge of AUnit is not necessary for using gnattest. For correct\n-operation of @command{gnattest}, AUnit should be installed and aunit.gpr must be\n-on the project path. This happens automatically when Aunit is installed at its\n-default location.\n+Generated skeletons and harnesses are based on the AUnit testing framework.\n+AUnit is an Ada adaptation of the xxxUnit testing frameworks, similar to JUnit\n+for Java or CppUnit for C++. While it is advised that gnattest users read\n+the AUnit manual, deep knowledge of AUnit is not necessary for using gnattest.\n+For correct operation of @command{gnattest}, AUnit should be installed and\n+aunit.gpr must be on the project path. This happens automatically when Aunit\n+is installed at its default location.\n @menu\n * Running gnattest::\n * Switches for gnattest::\n@@ -18124,11 +18124,6 @@ specifies the project defining the location of source files. When no\n file names are provided on the command line, all sources in the project\n are used as input. This switch is required.\n \n-@item --harness-dir=dirname\n-specifies the directory that will hold the harness packages and project file\n-for the test driver. The harness directory should be specified either by that\n-switch or by the corresponding attribute in the project file.\n-\n @item filename\n is the name of the source file containing the library unit package declaration\n for which a test package will be created. The file name may be given with a\n@@ -18137,7 +18132,7 @@ path.\n @item @samp{@var{gcc_switches}}\n is a list of switches for\n @command{gcc}. These switches will be passed on to all compiler invocations\n-made by @command{gnatstub} to generate a set of ASIS trees. Here you can provide\n+made by @command{gnattest} to generate a set of ASIS trees. Here you can provide\n @option{^-I^/INCLUDE_DIRS=^} switches to form the source search path,\n use the @option{-gnatec} switch to set the configuration file,\n use the @option{-gnat05} switch if sources should be compiled in\n@@ -18152,13 +18147,13 @@ is an optional sequence of switches as described in the next section.\n \n @itemize @bullet\n @item automatic harness:\n-the harness code, which is located either in the harness-dir as specified on\n-the command line or in the project file. All of this code is generated\n-completely automatically and can be destroyed and regenerated at will. It is not\n-recommended to modify this code manually, since it could easily be overridden\n-by mistake. The entry point in the harness code is the project file named\n-@command{test_driver.gpr}. Tests can be compiled and run using a command\n-such as:\n+the harness code, which is located by default in \"gnattest/harness\" directory\n+that is created in the object directory of corresponding project file. All of\n+this code is generated completely automatically and can be destroyed and\n+regenerated at will. It is not recommended to modify this code manually, since\n+it could easily be overridden by mistake. The entry point in the harness code is\n+the project file named @command{test_driver.gpr}. Tests can be compiled and run\n+using a command such as:\n \n @smallexample\n gnatmake -P<harness-dir>/test_driver\n@@ -18168,18 +18163,17 @@ test_runner\n Note that you might need to specify the necessary values of scenario variables\n when you are not using the AUnit defaults.\n \n-@item actual unit test stubs:\n-a test stub for each visible subprogram is created in a separate file, if it\n+@item actual unit test skeletons:\n+a test skeleton for each visible subprogram is created in a separate file, if it\n doesn't exist already. By default, those separate test files are located in a\n-\"tests\" directory that is created in the directory containing the source file\n-itself. If it is not appropriate to create the tests in subdirectories of the\n-source, option @option{--separate-root} can be used. For example, if a source\n-file my_unit.ads in directory src contains a visible subprogram Proc, then\n-the corresponding unit test will be found in file\n-src/tests/my_unit-tests-proc_<code>.adb. <code> is a signature encoding used to\n-differentiate test names in case of overloading.\n-\n-Note that if the project already has both my_unit.ads and my_unit-tests.ads,\n+\"gnattest/tests\" directory that is created in the object directory of\n+corresponding project file. For example, if a source file my_unit.ads in\n+directory src contains a visible subprogram Proc, then the corresponding unit\n+test will be found in file src/tests/my_unit-test_data-tests-proc_<code>.adb.\n+<code> is a signature encoding used to differentiate test names in case of\n+overloading.\n+\n+Note that if the project already has both my_unit.ads and my_unit-test_data.ads,\n this will cause a name conflict with the generated test package.\n @end itemize\n \n@@ -18215,30 +18209,48 @@ Suppresses noncritical output messages.\n @cindex @option{-v} (@command{gnattest})\n Verbose mode: generates version information.\n \n-@item --liskov\n-@cindex @option{--liskov} (@command{gnattest})\n-Enables Liskov verification: run all tests from all parents in order\n+@item --validate-type-extensions\n+@cindex @option{--validate-type-extensions} (@command{gnattest})\n+Enables substitution check: run all tests from all parents in order\n to check substitutability.\n \n-@item --stub-default=@var{val}\n-@cindex @option{--stub-default} (@command{gnattest})\n-Specifies the default behavior of generated stubs. @var{val} can be either\n+@item --skeleton-default=@var{val}\n+@cindex @option{--skeleton-default} (@command{gnattest})\n+Specifies the default behavior of generated skeletons. @var{val} can be either\n \"fail\" or \"pass\", \"fail\" being the default.\n \n-@item --separate-root=@var{dirname}\n-@cindex @option{--separate-root} (@command{gnattest})\n+@item --tests-root=@var{dirname}\n+@cindex @option{--tests-root} (@command{gnattest})\n The directory hierarchy of tested sources is recreated in the @var{dirname}\n directory, and test packages are placed in corresponding directories.\n+If the @var{dirname} is a relative path, it is considered relative to the object\n+directory of the project file. When all sources from all projects are taken\n+recursively from all projects, directory hierarchies of tested sources are\n+recreated for each project in their object directories and test packages are\n+placed accordingly.\n \n @item --subdir=@var{dirname}\n @cindex @option{--subdir} (@command{gnattest})\n-Test packages are placed in subdirectories. This is the default output mode\n-since it does not require any additional input from the user. Subdirectories\n-named \"tests\" will be created by default.\n+Test packages are placed in subdirectories.\n+\n+@item --tests-dir=@var{dirname}\n+@cindex @option{--tests-dir} (@command{gnattest})\n+All test packages are placed in the @var{dirname} directory.\n+If the @var{dirname} is a relative path, it is considered relative to the object\n+directory of the project file. When all sources from all projects are taken\n+recursively from all projects, @var{dirname} directories are created for each\n+project in their object directories and test packages are placed accordingly.\n+\n+@item --harness-dir=@var{dirname}\n+@cindex @option{--harness-dir} (@command{gnattest})\n+specifies the directory that will hold the harness packages and project file\n+for the test driver. If the @var{dirname} is a relative path, it is considered\n+relative to the object directory of the project file.\n \n @end table\n \n-@option{--separate_root} and @option{--subdir} switches are mutually exclusive.\n+@option{--tests_root}, @option{--subdir} and @option{--tests-dir} switches are\n+mutually exclusive.\n \n @node Project Attributes for gnattest\n @section Project Attributes for @command{gnattest}\n@@ -18251,13 +18263,17 @@ package gnattest. Here is the list of attributes:\n \n @itemize @bullet\n \n-@item Separate_Stub_Root\n-is used to select the same output mode as with the --separate-root option.\n-This attribute cannot be used together with Stub_Subdir.\n+@item Tests_Root\n+is used to select the same output mode as with the --tests-root option.\n+This attribute cannot be used together with Subdir or Tests_Dir.\n \n-@item Stub_Subdir\n+@item Subdir\n is used to select the same output mode as with the --subdir option.\n-This attribute cannot be used together with Separate_Stub_Root.\n+This attribute cannot be used together with Tests_Root or Tests_Dir.\n+\n+@item Tests_Dir\n+is used to select the same output mode as with the --tests-dir option.\n+This attribute cannot be used together with Subdir or Tests_Root.\n \n @item Harness_Dir\n is used to specify the directory in which to place harness packages and project\n@@ -18267,9 +18283,9 @@ file for the test driver, otherwise specified by --harness-dir.\n is used to specify the project file, otherwise given by\n --additional-tests switch.\n \n-@item Stubs_Default\n-is used to specify the default behaviour of test stubs, otherwise\n-specified by --stub-default option. The value of this attribute\n+@item Skeletons_Default\n+is used to specify the default behaviour of test skeletons, otherwise\n+specified by --skeleton-default option. The value of this attribute\n should be either \"pass\" or \"fail\".\n \n @end itemize\n@@ -18309,16 +18325,16 @@ Since no special output option was specified, the test package Simple.Tests\n is located in:\n \n @smallexample\n-<install_prefix>/share/examples/gnattest/simple/src/tests\n+<install_prefix>/share/examples/gnattest/simple/obj/gnattest/tests\n @end smallexample\n \n For each package containing visible subprograms, a child test package is\n generated. It contains one test routine per tested subprogram. Each\n declaration of a test subprogram has a comment specifying which tested\n subprogram it corresponds to. All of the test routines have separate bodies.\n-The test routine located at simple-tests-test_inc_5eaee3.adb contains a single\n-statement: a call to procedure Assert. It has two arguments: the Boolean\n-expression we want to check and the diagnosis message to display if\n+The test routine located at simple-test_data-tests-test_inc_5eaee3.adb contains\n+a single statement: a call to procedure Assert. It has two arguments:\n+the Boolean expression we want to check and the diagnosis message to display if\n the condition is false.\n \n That is where actual testing code should be written after a proper setup.\n@@ -18336,22 +18352,24 @@ is reported.\n \n @noindent\n \n-Besides test routines themselves, each test package has an inner package\n-Env_Mgmt that has two procedures: User_Set_Up and User_Tear_Down.\n-User_Set_Up is called before each test routine of the package and\n-User_Tear_Down is called after each test routine. Those two procedures can\n-be used to perform necessary initialization and finalization,\n-memory allocation, etc.\n+Besides test routines themselves, each test package has a parent package\n+Test_Data that has two procedures: Set_Up and Tear_Down. This package is never\n+overwritten by the tool. Set_Up is called before each test routine of the\n+package and Tear_Down is called after each test routine. Those two procedures\n+can be used to perform necessary initialization and finalization,\n+memory allocation, etc. Test type declared in Test_Data package is parent type\n+for the test type of test package and can have user-defined components whose\n+values can be set by Set_Up routine and used in test routines afterwards.\n \n @node Regenerating Tests\n @section Regenerating Tests\n \n @noindent\n \n-Bodies of test routines and env_mgmt packages are never overridden after they\n+Bodies of test routines and test_data packages are never overridden after they\n have been created once. As long as the name of the subprogram, full expanded Ada\n names, and the order of its parameters is the same, the old test routine will\n-fit in its place and no test stub will be generated for the subprogram.\n+fit in its place and no test skeleton will be generated for the subprogram.\n \n This can be demonstrated with the previous example. By uncommenting declaration\n and body of function Dec in simple.ads and simple.adb, running\n@@ -18364,10 +18382,10 @@ gprbuild -Ptest_driver\n test_runner\n @end smallexample\n \n-the old test is not replaced with a stub, nor is it lost, but a new test stub is\n-created for function Dec.\n+the old test is not replaced with a stub, nor is it lost, but a new test\n+skeleton is created for function Dec.\n \n-The only way of regenerating tests stubs is to remove the previously created\n+The only way of regenerating tests skeletons is to remove the previously created\n tests.\n \n @node Default Test Behavior\n@@ -18380,8 +18398,9 @@ either count them all as failed (this is useful to see which tests are still\n left to implement) or as passed (to sort out unimplemented ones from those\n actually failing).\n \n-The test driver accepts a switch to specify this behavior: --stub-default=val,\n-where val is either \"pass\" or \"fail\" (exactly as for @command{gnattest}).\n+The test driver accepts a switch to specify this behavior:\n+--skeleton-default=val, where val is either \"pass\" or \"fail\" (exactly as for\n+@command{gnattest}).\n \n The default behavior of the test driver is set with the same switch\n as passed to gnattest when generating the test driver.\n@@ -18399,11 +18418,11 @@ makes both tests pass, even the unimplemented one.\n \n @noindent\n \n-Creation of test stubs for primitive operations of tagged types entails a number\n-of features. Test routines for all primitives of a given tagged type are\n-placed in a separate child package named according to the tagged type. For\n+Creation of test skeletons for primitive operations of tagged types entails\n+a number of features. Test routines for all primitives of a given tagged type\n+are placed in a separate child package named according to the tagged type. For\n example, if you have tagged type T in package P, all tests for primitives\n-of T will be in P.T_Tests.\n+of T will be in P.T_Test_Data.T_Tests.\n \n Consider running gnattest on the second example (note: actual tests for this\n example already exist, so there's no need to worry if the tool reports that\n@@ -18415,10 +18434,10 @@ gnattest --harness-dir=driver -Ptagged_rec.gpr\n @end smallexample\n \n Taking a closer look at the test type declared in the test package\n-Speed1.Controller_Tests is necessary. It is declared in:\n+Speed1.Controller_Test_Data is necessary. It is declared in:\n \n @smallexample\n-<install_prefix>/share/examples/gnattest/tagged_rec/src/tests\n+<install_prefix>/share/examples/gnattest/tagged_rec/obj/gnattest/tests\n @end smallexample\n \n Test types are direct or indirect descendants of\n@@ -18433,10 +18452,10 @@ package Speed2.Auto_Controller, you will see that Test_Auto_Controller\n actually derives from Test_Controller rather than AUnit type Test_Fixture.\n Thus, test types mirror the hierarchy of tested types.\n \n-The User_Set_Up procedure of Env_Mgmt package corresponding to a test package\n+The Set_Up procedure of Test_Data package corresponding to a test package\n of primitive operations of type T assigns to Fixture a reference to an\n object of that exact type T. Notice, however, that if the tagged type has\n-discriminants, the User_Set_Up only has a commented template for setting\n+discriminants, the Set_Up only has a commented template for setting\n up the fixture, since filling the discriminant with actual value is up\n to the user.\n \n@@ -18468,26 +18487,29 @@ derived type.\n \n @noindent\n \n-Tagged Types Substitutability Testing is a way of verifying the Liskov\n-substitution principle (LSP) by testing. LSP is a principle stating that if\n+Tagged Types Substitutability Testing is a way of verifying the global type\n+consistency by testing. Global type consistency is a principle stating that if\n S is a subtype of T (in Ada, S is a derived type of tagged type T),\n then objects of type T may be replaced with objects of type S (that is,\n objects of type S may be substituted for objects of type T), without\n altering any of the desirable properties of the program. When the properties\n of the program are expressed in the form of subprogram preconditions and\n-postconditions (let's call them pre and post), LSP is formulated as relations\n-between the pre and post of primitive operations and the pre and post of their\n-derived operations. The pre of a derived operation should not be stronger than\n-the original pre, and the post of the derived operation should not be weaker\n-than the original post. Those relations ensure that verifying if a dispatching\n-call is safe can be done just by using the pre and post of the root operation.\n-\n-Verifying LSP by testing consists of running all the unit tests associated with\n-the primitives of a given tagged type with objects of its derived types.\n+postconditions (let's call them pre and post), the principle is formulated as\n+relations between the pre and post of primitive operations and the pre and post\n+of their derived operations. The pre of a derived operation should not be\n+stronger than the original pre, and the post of the derived operation should\n+not be weaker than the original post. Those relations ensure that verifying if\n+a dispatching call is safe can be done just by using the pre and post of the\n+root operation.\n+\n+Verifying global type consistency by testing consists of running all the unit\n+tests associated with the primitives of a given tagged type with objects of its\n+derived types.\n \n In the example used in the previous section, there was clearly a violation of\n-LSP. The overriding primitive Adjust_Speed in package Speed2 removes the\n-functionality of the overridden primitive and thus doesn't respect LSP.\n+type consistency. The overriding primitive Adjust_Speed in package Speed2\n+removes the functionality of the overridden primitive and thus doesn't respect\n+the consistency principle.\n Gnattest has a special option to run overridden parent tests against objects\n of the type which have overriding primitives:\n \n@@ -18501,12 +18523,17 @@ test_runner\n While all the tests pass by themselves, the parent test for Adjust_Speed fails\n against objects of the derived type.\n \n+Non-overridden tests are already inherited for derived test types, so the\n+--validate-type-extensions enables the application of overriden tests to objects\n+of derived types.\n+\n @node Testing with Contracts\n @section Testing with Contracts\n \n @noindent\n \n-@command{gnattest} supports pragmas Precondition, Postcondition, and Test_Case.\n+@command{gnattest} supports pragmas Precondition, Postcondition, and Test_Case,\n+as well as corresponding aspects.\n Test routines are generated, one per each Test_Case associated with a tested\n subprogram. Those test routines have special wrappers for tested functions\n that have composition of pre- and postcondition of the subprogram with\n@@ -18615,7 +18642,6 @@ The tool currently does not support following features:\n @itemize @bullet\n @item generic tests for generic packages and package instantiations\n @item tests for protected subprograms and entries\n-@item aspects Precondition, Postcondition, and Test_Case\n @item generating test packages for code that is not conformant with ada 2005\n \n @end itemize"}, {"sha": "6e3cccbecb7d7a1966b17e61cec945373e7a98ac", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7d1319f57091f72752692c3477438a37e6d1e9/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7d1319f57091f72752692c3477438a37e6d1e9/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=fc7d1319f57091f72752692c3477438a37e6d1e9", "patch": "@@ -9449,7 +9449,8 @@ package body Sem_Ch12 is\n                Has_Untagged_Inc := True;\n             end if;\n \n-            --  Add comments for following code???\n+            --  This is a temporary implementation. Most of this code has\n+            --  to be moved to sem_ch8, and will be commented then ???\n \n             if Is_Entity_Name (Actual)\n               and then not Is_Overloaded (Actual)"}, {"sha": "4110368dac6fb38ebbc028a4906f1aa270d68e4e", "filename": "gcc/ada/xref_lib.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc7d1319f57091f72752692c3477438a37e6d1e9/gcc%2Fada%2Fxref_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc7d1319f57091f72752692c3477438a37e6d1e9/gcc%2Fada%2Fxref_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxref_lib.adb?ref=fc7d1319f57091f72752692c3477438a37e6d1e9", "patch": "@@ -538,6 +538,7 @@ package body Xref_Lib is\n \n          when 'h' => return \"interface\";\n          when 'g' => return \"macro\";\n+         when 'G' => return \"function macro\";\n          when 'J' => return \"class\";\n          when 'K' => return \"package\";\n          when 'k' => return \"generic package\";"}]}