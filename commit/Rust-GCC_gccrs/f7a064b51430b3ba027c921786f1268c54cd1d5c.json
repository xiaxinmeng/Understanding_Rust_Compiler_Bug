{"sha": "f7a064b51430b3ba027c921786f1268c54cd1d5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdhMDY0YjUxNDMwYjNiYTAyN2M5MjE3ODZmMTI2OGM1NGNkMWQ1Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2005-08-06T11:05:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-08-06T11:05:48Z"}, "message": "re PR rtl-optimization/23233 (Loop optimisation ICE for subreg addresses)\n\n\tPR rtl-optimization/23233\n\t* loop.c (combine_movables): Require the modes to be the same.\n\t(move_movables): Remove handling of cases where the replacement\n\thad a different mode to the original.\n\nFrom-SVN: r102804", "tree": {"sha": "258bd91dcb3ed6c0101dfa2405103e1853dac6d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/258bd91dcb3ed6c0101dfa2405103e1853dac6d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7a064b51430b3ba027c921786f1268c54cd1d5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a064b51430b3ba027c921786f1268c54cd1d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7a064b51430b3ba027c921786f1268c54cd1d5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7a064b51430b3ba027c921786f1268c54cd1d5c/comments", "author": null, "committer": null, "parents": [{"sha": "a8006d0933c8c954b134152c1fb60a379c7fb846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8006d0933c8c954b134152c1fb60a379c7fb846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8006d0933c8c954b134152c1fb60a379c7fb846"}], "stats": {"total": 52, "additions": 22, "deletions": 30}, "files": [{"sha": "7f7405124ab75704d729850670e976f8b2d8315d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a064b51430b3ba027c921786f1268c54cd1d5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a064b51430b3ba027c921786f1268c54cd1d5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7a064b51430b3ba027c921786f1268c54cd1d5c", "patch": "@@ -1,3 +1,10 @@\n+2005-08-06  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR rtl-optimization/23233\n+\t* loop.c (combine_movables): Require the modes to be the same.\n+\t(move_movables): Remove handling of cases where the replacement\n+\thad a different mode to the original.\n+\n 2005-08-05  James A. Morrison  <phython@gcc.gnu.org>\n \n \tPR tree-optimization/23128"}, {"sha": "bc6ddec97a2bae4a8c527231d14a516439994517", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a064b51430b3ba027c921786f1268c54cd1d5c/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a064b51430b3ba027c921786f1268c54cd1d5c/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=f7a064b51430b3ba027c921786f1268c54cd1d5c", "patch": "@@ -1881,19 +1881,7 @@ combine_movables (struct loop_movables *movables, struct loop_regs *regs)\n \t      && !m1->partial\n \t      && (matched_regs[m1->regno]\n \t\t  ||\n-\t\t  (\n-\t\t   /* Can combine regs with different modes loaded from the\n-\t\t      same constant only if the modes are the same or\n-\t\t      if both are integer modes with M wider or the same\n-\t\t      width as M1.  The check for integer is redundant, but\n-\t\t      safe, since the only case of differing destination\n-\t\t      modes with equal sources is when both sources are\n-\t\t      VOIDmode, i.e., CONST_INT.  */\n-\t\t   (GET_MODE (m->set_dest) == GET_MODE (m1->set_dest)\n-\t\t    || (GET_MODE_CLASS (GET_MODE (m->set_dest)) == MODE_INT\n-\t\t\t&& GET_MODE_CLASS (GET_MODE (m1->set_dest)) == MODE_INT\n-\t\t\t&& (GET_MODE_BITSIZE (GET_MODE (m->set_dest))\n-\t\t\t    >= GET_MODE_BITSIZE (GET_MODE (m1->set_dest)))))\n+\t\t  (GET_MODE (m->set_dest) == GET_MODE (m1->set_dest)\n \t\t   /* See if the source of M1 says it matches M.  */\n \t\t   && ((REG_P (m1->set_src)\n \t\t\t&& matched_regs[REGNO (m1->set_src)])\n@@ -2657,23 +2645,7 @@ move_movables (struct loop *loop, struct loop_movables *movables,\n \t\t    {\n \t\t      rtx temp;\n \n-\t\t      /* Schedule the reg loaded by M1\n-\t\t\t for replacement so that shares the reg of M.\n-\t\t\t If the modes differ (only possible in restricted\n-\t\t\t circumstances, make a SUBREG.\n-\n-\t\t\t Note this assumes that the target dependent files\n-\t\t\t treat REG and SUBREG equally, including within\n-\t\t\t GO_IF_LEGITIMATE_ADDRESS and in all the\n-\t\t\t predicates since we never verify that replacing the\n-\t\t\t original register with a SUBREG results in a\n-\t\t\t recognizable insn.  */\n-\t\t      if (GET_MODE (m->set_dest) == GET_MODE (m1->set_dest))\n-\t\t\treg_map[m1->regno] = m->set_dest;\n-\t\t      else\n-\t\t\treg_map[m1->regno]\n-\t\t\t  = gen_lowpart_common (GET_MODE (m1->set_dest),\n-\t\t\t\t\t\tm->set_dest);\n+\t\t      reg_map[m1->regno] = m->set_dest;\n \n \t\t      /* Get rid of the matching insn\n \t\t\t and prevent further processing of it.  */"}, {"sha": "0097a9d2cfa3fd5e2a15deaa69d0c4fcfb1bd95c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a064b51430b3ba027c921786f1268c54cd1d5c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a064b51430b3ba027c921786f1268c54cd1d5c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7a064b51430b3ba027c921786f1268c54cd1d5c", "patch": "@@ -1,3 +1,8 @@\n+2005-08-06  Richard Sandiford  <richard@codesourcery.com>\n+\n+\tPR rtl-optimization/23233\n+\t* gcc.c-torture/compile/pr23233-1.c: New test.\n+\n 2005-08-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/18833"}, {"sha": "356c06335cfa92b452b02ddc39559318ec7d6a18", "filename": "gcc/testsuite/gcc.c-torture/compile/pr23233-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7a064b51430b3ba027c921786f1268c54cd1d5c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr23233-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7a064b51430b3ba027c921786f1268c54cd1d5c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr23233-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr23233-1.c?ref=f7a064b51430b3ba027c921786f1268c54cd1d5c", "patch": "@@ -0,0 +1,8 @@\n+void foo (volatile long long *x)\n+{\n+  while (*x)\n+    {\n+      *x = 0;\n+      *((volatile char *) 0) = 0;\n+    }\n+}"}]}