{"sha": "e8326772b37d81b232634e2ec43da4f4f4ea5567", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgzMjY3NzJiMzdkODFiMjMyNjM0ZTJlYzQzZGE0ZjRmNGVhNTU2Nw==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2014-07-25T13:39:49Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2014-07-25T13:39:49Z"}, "message": "Convert lto streamer out hashing to inchash\n\nNo substantial changes, although the hash values will be slightly\ndifferent.\n\nv2: add_flag moved to inchash. Some minor changes.\n\ngcc/:\n\n2014-07-25  Andi Kleen  <ak@linux.intel.com>\n\n\t* lto-streamer-out.c (hash_tree): Convert to inchash.\n\nFrom-SVN: r213057", "tree": {"sha": "dec92e2e234aa74b1258711dc95e3d0359ef31bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dec92e2e234aa74b1258711dc95e3d0359ef31bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8326772b37d81b232634e2ec43da4f4f4ea5567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8326772b37d81b232634e2ec43da4f4f4ea5567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8326772b37d81b232634e2ec43da4f4f4ea5567", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8326772b37d81b232634e2ec43da4f4f4ea5567/comments", "author": null, "committer": null, "parents": [{"sha": "56fdfd3e85567d87889962e0b08d9190b53bbea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fdfd3e85567d87889962e0b08d9190b53bbea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56fdfd3e85567d87889962e0b08d9190b53bbea1"}], "stats": {"total": 255, "additions": 134, "deletions": 121}, "files": [{"sha": "264a02bb91b00ea920a8e0e9047387ff93374c6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8326772b37d81b232634e2ec43da4f4f4ea5567/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8326772b37d81b232634e2ec43da4f4f4ea5567/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8326772b37d81b232634e2ec43da4f4f4ea5567", "patch": "@@ -1,3 +1,7 @@\n+2014-07-25  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* lto-streamer-out.c (hash_tree): Convert to inchash.\n+\n 2014-07-25  Andi Kleen  <ak@linux.intel.com>\n \n \t* tree.c (build_type_attribute_qual_variant): Use inchash."}, {"sha": "0ea971bf36d0fbfb94eb92382b0fd68113a6e514", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 130, "deletions": 121, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8326772b37d81b232634e2ec43da4f4f4ea5567/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8326772b37d81b232634e2ec43da4f4f4ea5567/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=e8326772b37d81b232634e2ec43da4f4f4ea5567", "patch": "@@ -695,207 +695,213 @@ DFS_write_tree_body (struct output_block *ob,\n static hashval_t\n hash_tree (struct streamer_tree_cache_d *cache, tree t)\n {\n+  inchash hstate;\n+\n #define visit(SIBLING) \\\n   do { \\\n     unsigned ix; \\\n     if (SIBLING && streamer_tree_cache_lookup (cache, SIBLING, &ix)) \\\n-      v = iterative_hash_hashval_t (streamer_tree_cache_get_hash (cache, ix), v); \\\n+      hstate.add_int (streamer_tree_cache_get_hash (cache, ix)); \\\n   } while (0)\n \n   /* Hash TS_BASE.  */\n   enum tree_code code = TREE_CODE (t);\n-  hashval_t v = iterative_hash_host_wide_int (code, 0);\n+  hstate.add_int (code);\n   if (!TYPE_P (t))\n     {\n-      v = iterative_hash_host_wide_int (TREE_SIDE_EFFECTS (t)\n-\t\t\t\t\t| (TREE_CONSTANT (t) << 1)\n-\t\t\t\t\t| (TREE_READONLY (t) << 2)\n-\t\t\t\t\t| (TREE_PUBLIC (t) << 3), v);\n+      hstate.add_flag (TREE_SIDE_EFFECTS (t));\n+      hstate.add_flag (TREE_CONSTANT (t));\n+      hstate.add_flag (TREE_READONLY (t));\n+      hstate.add_flag (TREE_PUBLIC (t));\n     }\n-  v = iterative_hash_host_wide_int (TREE_ADDRESSABLE (t)\n-\t\t\t\t    | (TREE_THIS_VOLATILE (t) << 1), v);\n+  hstate.add_flag (TREE_ADDRESSABLE (t));\n+  hstate.add_flag (TREE_THIS_VOLATILE (t));\n   if (DECL_P (t))\n-    v = iterative_hash_host_wide_int (DECL_UNSIGNED (t), v);\n+    hstate.add_flag (DECL_UNSIGNED (t));\n   else if (TYPE_P (t))\n-    v = iterative_hash_host_wide_int (TYPE_UNSIGNED (t), v);\n+    hstate.add_flag (TYPE_UNSIGNED (t));\n   if (TYPE_P (t))\n-    v = iterative_hash_host_wide_int (TYPE_ARTIFICIAL (t), v);\n+    hstate.add_flag (TYPE_ARTIFICIAL (t));\n   else\n-    v = iterative_hash_host_wide_int (TREE_NO_WARNING (t), v);\n-  v = iterative_hash_host_wide_int (TREE_NOTHROW (t)\n-\t\t\t\t    | (TREE_STATIC (t) << 1)\n-\t\t\t\t    | (TREE_PROTECTED (t) << 2)\n-\t\t\t\t    | (TREE_DEPRECATED (t) << 3), v);\n+    hstate.add_flag (TREE_NO_WARNING (t));\n+  hstate.add_flag (TREE_NOTHROW (t));\n+  hstate.add_flag (TREE_STATIC (t));\n+  hstate.add_flag (TREE_PROTECTED (t));\n+  hstate.add_flag (TREE_DEPRECATED (t));\n   if (code != TREE_BINFO)\n-    v = iterative_hash_host_wide_int (TREE_PRIVATE (t), v);\n+    hstate.add_flag (TREE_PRIVATE (t));\n   if (TYPE_P (t))\n-    v = iterative_hash_host_wide_int (TYPE_SATURATING (t)\n-\t\t\t\t      | (TYPE_ADDR_SPACE (t) << 1), v);\n+    {\n+      hstate.add_flag (TYPE_SATURATING (t));\n+      hstate.add_flag (TYPE_ADDR_SPACE (t));\n+    }\n   else if (code == SSA_NAME)\n-    v = iterative_hash_host_wide_int (SSA_NAME_IS_DEFAULT_DEF (t), v);\n+    hstate.add_flag (SSA_NAME_IS_DEFAULT_DEF (t));\n+  hstate.commit_flag ();\n \n   if (CODE_CONTAINS_STRUCT (code, TS_INT_CST))\n     {\n       int i;\n-      v = iterative_hash_host_wide_int (TREE_INT_CST_NUNITS (t), v);\n-      v = iterative_hash_host_wide_int (TREE_INT_CST_EXT_NUNITS (t), v);\n+      hstate.add_wide_int (TREE_INT_CST_NUNITS (t));\n+      hstate.add_wide_int (TREE_INT_CST_EXT_NUNITS (t));\n       for (i = 0; i < TREE_INT_CST_NUNITS (t); i++)\n-\tv = iterative_hash_host_wide_int (TREE_INT_CST_ELT (t, i), v);\n+\thstate.add_wide_int (TREE_INT_CST_ELT (t, i));\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_REAL_CST))\n     {\n       REAL_VALUE_TYPE r = TREE_REAL_CST (t);\n-      v = iterative_hash_host_wide_int (r.cl, v);\n-      v = iterative_hash_host_wide_int (r.decimal\n-\t\t\t\t\t| (r.sign << 1)\n-\t\t\t\t\t| (r.signalling << 2)\n-\t\t\t\t\t| (r.canonical << 3), v);\n-      v = iterative_hash_host_wide_int (r.uexp, v);\n-      for (unsigned i = 0; i < SIGSZ; ++i)\n-\tv = iterative_hash_host_wide_int (r.sig[i], v);\n+      hstate.add_flag (r.cl);\n+      hstate.add_flag (r.sign);\n+      hstate.add_flag (r.signalling);\n+      hstate.add_flag (r.canonical);\n+      hstate.commit_flag ();\n+      hstate.add_int (r.uexp);\n+      hstate.add (r.sig, sizeof (r.sig));\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_FIXED_CST))\n     {\n       FIXED_VALUE_TYPE f = TREE_FIXED_CST (t);\n-      v = iterative_hash_host_wide_int (f.mode, v);\n-      v = iterative_hash_host_wide_int (f.data.low, v);\n-      v = iterative_hash_host_wide_int (f.data.high, v);\n+      hstate.add_int (f.mode);\n+      hstate.add_int (f.data.low);\n+      hstate.add_int (f.data.high);\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_COMMON))\n     {\n-      v = iterative_hash_host_wide_int (DECL_MODE (t), v);\n-      v = iterative_hash_host_wide_int (DECL_NONLOCAL (t)\n-\t\t\t\t\t| (DECL_VIRTUAL_P (t) << 1)\n-\t\t\t\t\t| (DECL_IGNORED_P (t) << 2)\n-\t\t\t\t\t| (DECL_ABSTRACT (t) << 3)\n-\t\t\t\t\t| (DECL_ARTIFICIAL (t) << 4)\n-\t\t\t\t\t| (DECL_USER_ALIGN (t) << 5)\n-\t\t\t\t\t| (DECL_PRESERVE_P (t) << 6)\n-\t\t\t\t\t| (DECL_EXTERNAL (t) << 7)\n-\t\t\t\t\t| (DECL_GIMPLE_REG_P (t) << 8), v);\n-      v = iterative_hash_host_wide_int (DECL_ALIGN (t), v);\n+      hstate.add_wide_int (DECL_MODE (t));\n+      hstate.add_flag (DECL_NONLOCAL (t));\n+      hstate.add_flag (DECL_VIRTUAL_P (t));\n+      hstate.add_flag (DECL_IGNORED_P (t));\n+      hstate.add_flag (DECL_ABSTRACT (t));\n+      hstate.add_flag (DECL_ARTIFICIAL (t));\n+      hstate.add_flag (DECL_USER_ALIGN (t));\n+      hstate.add_flag (DECL_PRESERVE_P (t));\n+      hstate.add_flag (DECL_EXTERNAL (t));\n+      hstate.add_flag (DECL_GIMPLE_REG_P (t));\n+      hstate.commit_flag ();\n+      hstate.add_int (DECL_ALIGN (t));\n       if (code == LABEL_DECL)\n \t{\n-\t  v = iterative_hash_host_wide_int (EH_LANDING_PAD_NR (t), v);\n-\t  v = iterative_hash_host_wide_int (LABEL_DECL_UID (t), v);\n+          hstate.add_int (EH_LANDING_PAD_NR (t));\n+\t  hstate.add_int (LABEL_DECL_UID (t));\n \t}\n       else if (code == FIELD_DECL)\n \t{\n-\t  v = iterative_hash_host_wide_int (DECL_PACKED (t)\n-\t\t\t\t\t    | (DECL_NONADDRESSABLE_P (t) << 1),\n-\t\t\t\t\t    v);\n-\t  v = iterative_hash_host_wide_int (DECL_OFFSET_ALIGN (t), v);\n+\t  hstate.add_flag (DECL_PACKED (t));\n+\t  hstate.add_flag (DECL_NONADDRESSABLE_P (t));\n+\t  hstate.add_int (DECL_OFFSET_ALIGN (t));\n \t}\n       else if (code == VAR_DECL)\n \t{\n-\t  v = iterative_hash_host_wide_int (DECL_HAS_DEBUG_EXPR_P (t)\n-\t\t\t\t\t    | (DECL_NONLOCAL_FRAME (t) << 1),\n-\t\t\t\t\t    v);\n+\t  hstate.add_flag (DECL_HAS_DEBUG_EXPR_P (t));\n+\t  hstate.add_flag (DECL_NONLOCAL_FRAME (t));\n \t}\n       if (code == RESULT_DECL\n \t  || code == PARM_DECL\n \t  || code == VAR_DECL)\n \t{\n-\t  v = iterative_hash_host_wide_int (DECL_BY_REFERENCE (t), v);\n+\t  hstate.add_flag (DECL_BY_REFERENCE (t));\n \t  if (code == VAR_DECL\n \t      || code == PARM_DECL)\n-\t    v = iterative_hash_host_wide_int (DECL_HAS_VALUE_EXPR_P (t), v);\n+\t    hstate.add_flag (DECL_HAS_VALUE_EXPR_P (t));\n \t}\n+      hstate.commit_flag ();\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_WRTL))\n-    v = iterative_hash_host_wide_int (DECL_REGISTER (t), v);\n+    hstate.add_int (DECL_REGISTER (t));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_WITH_VIS))\n     {\n-      v = iterative_hash_host_wide_int ((DECL_COMMON (t))\n-\t\t\t\t\t| (DECL_DLLIMPORT_P (t) << 1)\n-\t\t\t\t\t| (DECL_WEAK (t) << 2)\n-\t\t\t\t\t| (DECL_SEEN_IN_BIND_EXPR_P (t) << 3)\n-\t\t\t\t\t| (DECL_COMDAT (t) << 4)\n-\t\t\t\t\t| (DECL_VISIBILITY_SPECIFIED (t) << 6),\n-\t\t\t\t\tv);\n-      v = iterative_hash_host_wide_int (DECL_VISIBILITY (t), v);\n+      hstate.add_flag (DECL_COMMON (t));\n+      hstate.add_flag (DECL_DLLIMPORT_P (t));\n+      hstate.add_flag (DECL_WEAK (t));\n+      hstate.add_flag (DECL_SEEN_IN_BIND_EXPR_P (t));\n+      hstate.add_flag (DECL_COMDAT (t));\n+      hstate.add_flag (DECL_VISIBILITY_SPECIFIED (t));\n+      hstate.add_int (DECL_VISIBILITY (t));\n       if (code == VAR_DECL)\n \t{\n \t  /* DECL_IN_TEXT_SECTION is set during final asm output only.  */\n-\t  v = iterative_hash_host_wide_int (DECL_HARD_REGISTER (t)\n-\t\t\t\t\t    | (DECL_IN_CONSTANT_POOL (t) << 1),\n-\t\t\t\t\t    v);\n+\t  hstate.add_flag (DECL_HARD_REGISTER (t));\n+\t  hstate.add_flag (DECL_IN_CONSTANT_POOL (t));\n \t}\n       if (TREE_CODE (t) == FUNCTION_DECL)\n-\tv = iterative_hash_host_wide_int (DECL_FINAL_P (t)\n-\t\t\t\t\t  | (DECL_CXX_CONSTRUCTOR_P (t) << 1)\n-\t\t\t\t\t  | (DECL_CXX_DESTRUCTOR_P (t) << 2),\n-\t\t\t\t\t  v);\n+        {\n+\t  hstate.add_flag (DECL_FINAL_P (t));\n+\t  hstate.add_flag (DECL_CXX_CONSTRUCTOR_P (t));\n+\t  hstate.add_flag (DECL_CXX_DESTRUCTOR_P (t));\n+\t}\n+      hstate.commit_flag ();\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_FUNCTION_DECL))\n     {\n-      v = iterative_hash_host_wide_int (DECL_BUILT_IN_CLASS (t), v);\n-      v = iterative_hash_host_wide_int (DECL_STATIC_CONSTRUCTOR (t)\n-\t\t\t\t\t| (DECL_STATIC_DESTRUCTOR (t) << 1)\n-\t\t\t\t\t| (DECL_UNINLINABLE (t) << 2)\n-\t\t\t\t\t| (DECL_POSSIBLY_INLINED (t) << 3)\n-\t\t\t\t\t| (DECL_IS_NOVOPS (t) << 4)\n-\t\t\t\t\t| (DECL_IS_RETURNS_TWICE (t) << 5)\n-\t\t\t\t\t| (DECL_IS_MALLOC (t) << 6)\n-\t\t\t\t\t| (DECL_IS_OPERATOR_NEW (t) << 7)\n-\t\t\t\t\t| (DECL_DECLARED_INLINE_P (t) << 8)\n-\t\t\t\t\t| (DECL_STATIC_CHAIN (t) << 9)\n-\t\t\t\t\t| (DECL_NO_INLINE_WARNING_P (t) << 10)\n-\t\t\t\t\t| (DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (t) << 11)\n-\t\t\t\t\t| (DECL_NO_LIMIT_STACK (t) << 12)\n-\t\t\t\t\t| (DECL_DISREGARD_INLINE_LIMITS (t) << 13)\n-\t\t\t\t\t| (DECL_PURE_P (t) << 14)\n-\t\t\t\t\t| (DECL_LOOPING_CONST_OR_PURE_P (t) << 15), v);\n+      hstate.add_int (DECL_BUILT_IN_CLASS (t));\n+      hstate.add_flag (DECL_STATIC_CONSTRUCTOR (t));\n+      hstate.add_flag (DECL_STATIC_DESTRUCTOR (t));\n+      hstate.add_flag (DECL_UNINLINABLE (t));\n+      hstate.add_flag (DECL_POSSIBLY_INLINED (t));\n+      hstate.add_flag (DECL_IS_NOVOPS (t));\n+      hstate.add_flag (DECL_IS_RETURNS_TWICE (t));\n+      hstate.add_flag (DECL_IS_MALLOC (t));\n+      hstate.add_flag (DECL_IS_OPERATOR_NEW (t));\n+      hstate.add_flag (DECL_DECLARED_INLINE_P (t));\n+      hstate.add_flag (DECL_STATIC_CHAIN (t));\n+      hstate.add_flag (DECL_NO_INLINE_WARNING_P (t));\n+      hstate.add_flag (DECL_NO_INSTRUMENT_FUNCTION_ENTRY_EXIT (t));\n+      hstate.add_flag (DECL_NO_LIMIT_STACK (t));\n+      hstate.add_flag (DECL_DISREGARD_INLINE_LIMITS (t));\n+      hstate.add_flag (DECL_PURE_P (t));\n+      hstate.add_flag (DECL_LOOPING_CONST_OR_PURE_P (t));\n+      hstate.commit_flag ();\n       if (DECL_BUILT_IN_CLASS (t) != NOT_BUILT_IN)\n-\tv = iterative_hash_host_wide_int (DECL_FUNCTION_CODE (t), v);\n+\thstate.add_int (DECL_FUNCTION_CODE (t));\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_COMMON))\n     {\n-      v = iterative_hash_host_wide_int (TYPE_MODE (t), v);\n-      v = iterative_hash_host_wide_int (TYPE_STRING_FLAG (t)\n-\t\t\t\t\t| (TYPE_NO_FORCE_BLK (t) << 1)\n-\t\t\t\t\t| (TYPE_NEEDS_CONSTRUCTING (t) << 2)\n-\t\t\t\t\t| (TYPE_PACKED (t) << 3)\n-\t\t\t\t\t| (TYPE_RESTRICT (t) << 4)\n-\t\t\t\t\t| (TYPE_USER_ALIGN (t) << 5)\n-\t\t\t\t\t| (TYPE_READONLY (t) << 6), v);\n+      hstate.add_wide_int (TYPE_MODE (t));\n+      hstate.add_flag (TYPE_STRING_FLAG (t));\n+      hstate.add_flag (TYPE_NO_FORCE_BLK (t));\n+      hstate.add_flag (TYPE_NEEDS_CONSTRUCTING (t));\n+      hstate.add_flag (TYPE_PACKED (t));\n+      hstate.add_flag (TYPE_RESTRICT (t));\n+      hstate.add_flag (TYPE_USER_ALIGN (t));\n+      hstate.add_flag (TYPE_READONLY (t));\n       if (RECORD_OR_UNION_TYPE_P (t))\n \t{\n-\t  v = iterative_hash_host_wide_int (TYPE_TRANSPARENT_AGGR (t)\n-\t\t\t\t\t    | (TYPE_FINAL_P (t) << 1), v);\n+\t  hstate.add_flag (TYPE_TRANSPARENT_AGGR (t));\n+\t  hstate.add_flag (TYPE_FINAL_P (t));\n \t}\n       else if (code == ARRAY_TYPE)\n-\tv = iterative_hash_host_wide_int (TYPE_NONALIASED_COMPONENT (t), v);\n-      v = iterative_hash_host_wide_int (TYPE_PRECISION (t), v);\n-      v = iterative_hash_host_wide_int (TYPE_ALIGN (t), v);\n-      v = iterative_hash_host_wide_int ((TYPE_ALIAS_SET (t) == 0\n+\thstate.add_flag (TYPE_NONALIASED_COMPONENT (t));\n+      hstate.commit_flag ();\n+      hstate.add_int (TYPE_PRECISION (t));\n+      hstate.add_int (TYPE_ALIGN (t));\n+      hstate.add_int ((TYPE_ALIAS_SET (t) == 0\n \t\t\t\t\t || (!in_lto_p\n \t\t\t\t\t     && get_alias_set (t) == 0))\n-\t\t\t\t\t? 0 : -1, v);\n+\t\t\t\t\t? 0 : -1);\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n-    v = iterative_hash (TRANSLATION_UNIT_LANGUAGE (t),\n-\t\t\tstrlen (TRANSLATION_UNIT_LANGUAGE (t)), v);\n+    hstate.add (TRANSLATION_UNIT_LANGUAGE (t),\n+\t\t\tstrlen (TRANSLATION_UNIT_LANGUAGE (t)));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n     gcc_unreachable ();\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n-    v = iterative_hash (t, sizeof (struct cl_optimization), v);\n+    hstate.add (t, sizeof (struct cl_optimization));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_IDENTIFIER))\n-    v = iterative_hash_host_wide_int (IDENTIFIER_HASH_VALUE (t), v);\n+    hstate.merge_hash (IDENTIFIER_HASH_VALUE (t));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_STRING))\n-    v = iterative_hash (TREE_STRING_POINTER (t), TREE_STRING_LENGTH (t), v);\n+    hstate.add (TREE_STRING_POINTER (t), TREE_STRING_LENGTH (t));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TYPED))\n     {\n@@ -913,7 +919,7 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n \t    x = streamer_tree_cache_get_hash (cache, ix);\n \t  else\n \t    x = hash_tree (cache, TREE_TYPE (t));\n-\t  v = iterative_hash_hashval_t (x, v);\n+\t  hstate.merge_hash (x);\n \t}\n       else if (code != IDENTIFIER_NODE)\n \tvisit (TREE_TYPE (t));\n@@ -1035,7 +1041,7 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n \n   if (CODE_CONTAINS_STRUCT (code, TS_EXP))\n     {\n-      v = iterative_hash_host_wide_int (TREE_OPERAND_LENGTH (t), v);\n+      hstate.add_wide_int (TREE_OPERAND_LENGTH (t));\n       for (int i = 0; i < TREE_OPERAND_LENGTH (t); ++i)\n \tvisit (TREE_OPERAND (t, i));\n     }\n@@ -1059,7 +1065,7 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n     {\n       unsigned i;\n       tree index, value;\n-      v = iterative_hash_host_wide_int (CONSTRUCTOR_NELTS (t), v);\n+      hstate.add_wide_int (CONSTRUCTOR_NELTS (t));\n       FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (t), i, index, value)\n \t{\n \t  visit (index);\n@@ -1070,37 +1076,40 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n   if (code == OMP_CLAUSE)\n     {\n       int i;\n+      HOST_WIDE_INT val;\n \n-      v = iterative_hash_host_wide_int (OMP_CLAUSE_CODE (t), v);\n+      hstate.add_wide_int (OMP_CLAUSE_CODE (t));\n       switch (OMP_CLAUSE_CODE (t))\n \t{\n \tcase OMP_CLAUSE_DEFAULT:\n-\t  v = iterative_hash_host_wide_int (OMP_CLAUSE_DEFAULT_KIND (t), v);\n+\t  val = OMP_CLAUSE_DEFAULT_KIND (t);\n \t  break;\n \tcase OMP_CLAUSE_SCHEDULE:\n-\t  v = iterative_hash_host_wide_int (OMP_CLAUSE_SCHEDULE_KIND (t), v);\n+\t  val = OMP_CLAUSE_SCHEDULE_KIND (t);\n \t  break;\n \tcase OMP_CLAUSE_DEPEND:\n-\t  v = iterative_hash_host_wide_int (OMP_CLAUSE_DEPEND_KIND (t), v);\n+\t  val = OMP_CLAUSE_DEPEND_KIND (t);\n \t  break;\n \tcase OMP_CLAUSE_MAP:\n-\t  v = iterative_hash_host_wide_int (OMP_CLAUSE_MAP_KIND (t), v);\n+\t  val = OMP_CLAUSE_MAP_KIND (t);\n \t  break;\n \tcase OMP_CLAUSE_PROC_BIND:\n-\t  v = iterative_hash_host_wide_int (OMP_CLAUSE_PROC_BIND_KIND (t), v);\n+\t  val = OMP_CLAUSE_PROC_BIND_KIND (t);\n \t  break;\n \tcase OMP_CLAUSE_REDUCTION:\n-\t  v = iterative_hash_host_wide_int (OMP_CLAUSE_REDUCTION_CODE (t), v);\n+\t  val = OMP_CLAUSE_REDUCTION_CODE (t);\n \t  break;\n \tdefault:\n+\t  val = 0;\n \t  break;\n \t}\n+      hstate.add_wide_int (val);\n       for (i = 0; i < omp_clause_num_ops[OMP_CLAUSE_CODE (t)]; i++)\n \tvisit (OMP_CLAUSE_OPERAND (t, i));\n       visit (OMP_CLAUSE_CHAIN (t));\n     }\n \n-  return v;\n+  return hstate.end ();\n \n #undef visit\n }"}]}