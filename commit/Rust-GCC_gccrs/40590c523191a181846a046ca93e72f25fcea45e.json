{"sha": "40590c523191a181846a046ca93e72f25fcea45e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1OTBjNTIzMTkxYTE4MTg0NmEwNDZjYTkzZTcyZjI1ZmNlYTQ1ZQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-02T21:20:26Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-02T21:20:26Z"}, "message": "Package.java: Remerged from classpath.\n\n2003-03-02  Michael Koch  <konqueror@gmx.de>\n\n\t* java/lang/Package.java:\n\tRemerged from classpath.\n\nFrom-SVN: r63689", "tree": {"sha": "76aa0f42aefd7389a212508858697b335abb6bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76aa0f42aefd7389a212508858697b335abb6bc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40590c523191a181846a046ca93e72f25fcea45e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40590c523191a181846a046ca93e72f25fcea45e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40590c523191a181846a046ca93e72f25fcea45e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40590c523191a181846a046ca93e72f25fcea45e/comments", "author": null, "committer": null, "parents": [{"sha": "bc52247263d666d1e942145d1f643491a0c2d81a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc52247263d666d1e942145d1f643491a0c2d81a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc52247263d666d1e942145d1f643491a0c2d81a"}], "stats": {"total": 187, "additions": 109, "deletions": 78}, "files": [{"sha": "53df85b35a86e43f194a3e95528fbb0b04d3d39e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40590c523191a181846a046ca93e72f25fcea45e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40590c523191a181846a046ca93e72f25fcea45e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=40590c523191a181846a046ca93e72f25fcea45e", "patch": "@@ -1,3 +1,8 @@\n+2003-03-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/lang/Package.java:\n+\tRemerged from classpath.\n+\n 2003-03-02  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/HttpURLConnection.java"}, {"sha": "5c9dd30c65981a6cd989fe18ae1ca97ff917b7fe", "filename": "libjava/java/lang/Package.java", "status": "modified", "additions": 104, "deletions": 78, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40590c523191a181846a046ca93e72f25fcea45e/libjava%2Fjava%2Flang%2FPackage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40590c523191a181846a046ca93e72f25fcea45e/libjava%2Fjava%2Flang%2FPackage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FPackage.java?ref=40590c523191a181846a046ca93e72f25fcea45e", "patch": "@@ -1,5 +1,5 @@\n-/* java.lang.Package - Everything you ever wanted to know about a package.\n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+/* Package.java -- information about a package\n+   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -49,8 +49,8 @@\n  * section of the\n  * <a href=\"http://java.sun.com/products/jdk/1.3/docs/guide/versioning/spec/VersioningSpecification.html\">Product Versioning Specification</a>.\n  * It also allows packages to be sealed with respect to the originating URL.\n- * <p>\n- * The most useful method is the <code>isCompatibleWith()</code> method that\n+ *\n+ * <p>The most useful method is the <code>isCompatibleWith()</code> method that\n  * compares a desired version of a specification with the version of the\n  * specification as implemented by a package. A package is considered\n  * compatible with another version if the version of the specification is\n@@ -63,8 +63,11 @@\n  * then the other version, etc. (If a version has no minor, micro, etc numbers\n  * then they are considered the be 0.)\n  *\n+ * @author Mark Wielaard <mark@klomp.org>\n+ * @see ClassLoader#definePackage(String, String, String, String, String,\n+ *      String, String, URL)\n  * @since 1.2\n- * @author Mark Wielaard (mark@klomp.org)\n+ * @status updated to 1.4\n  */\n public class Package\n {\n@@ -73,26 +76,29 @@\n \n   /** The name if the implementation */\n   final private String implTitle;\n+\n   /** The vendor that wrote this implementation */\n   final private String implVendor;\n+\n   /** The version of this implementation */\n   final private String implVersion;\n \n   /** The name of the specification */\n   final private String specTitle;\n+\n   /** The name of the specification designer */\n   final private String specVendor;\n+\n   /** The version of this specification */\n   final private String specVersion;\n \n   /** If sealed the origin of the package classes, otherwise null */\n   final private URL sealed;\n \n-  /** \n-   * A package local constructor for the Package class.\n-   * All parameters except the <code>name</code> of the package may be\n-   * <code>null</code>.\n-   * There are no public constructors defined for Package this is a package\n+  /**\n+   * A package local constructor for the Package class. All parameters except\n+   * the <code>name</code> of the package may be <code>null</code>.\n+   * There are no public constructors defined for Package; this is a package\n    * local constructor that is used by java.lang.Classloader.definePackage().\n    * \n    * @param name The name of the Package\n@@ -112,87 +118,102 @@\n       throw new IllegalArgumentException(\"null Package name\");\n \n     this.name = name;\n-\n     this.implTitle = implTitle;\n     this.implVendor = implVendor;\n     this.implVersion = implVersion;\n-\n     this.specTitle = specTitle;\n     this.specVendor = specVendor;\n     this.specVersion = specVersion;\n-\n     this.sealed = sealed;\n   }\n \n-  /** \n-   * Returns the Package name.\n+  /**\n+   * Returns the Package name in dot-notation.\n+   *\n+   * @return the non-null package name\n    */\n   public String getName()\n   {\n     return name;\n   }\n \n-  /** \n-   * Returns the name of the implementation or null if unknown.\n+  /**\n+   * Returns the name of the specification, or null if unknown.\n+   *\n+   * @return the specification title\n    */\n-  public String getImplementationTitle()\n+  public String getSpecificationTitle()\n   {\n-    return implTitle;\n+    return specTitle;\n   }\n \n-  /** \n-   * Returns the vendor that wrote this implementation or null if unknown.\n+  /**\n+   * Returns the version of the specification, or null if unknown.\n+   *\n+   * @return the specification version\n    */\n-  public String getImplementationVendor()\n+  public String getSpecificationVersion()\n   {\n-    return implVendor;\n+    return specVersion;\n   }\n \n-  /** \n-   * Returns the version of this implementation or null if unknown.\n+  /**\n+   * Returns the name of the specification designer, or null if unknown.\n+   *\n+   * @return the specification vendor\n    */\n-  public String getImplementationVersion()\n+  public String getSpecificationVendor()\n   {\n-    return implVersion;\n+    return specVendor;\n   }\n \n-  /** \n-   * Returns the name of the specification or null if unknown.\n+  /**\n+   * Returns the name of the implementation, or null if unknown.\n+   *\n+   * @return the implementation title\n    */\n-  public String getSpecificationTitle()\n+  public String getImplementationTitle()\n   {\n-    return specTitle;\n+    return implTitle;\n   }\n \n-  /** \n-   * Returns the name of the specification designer or null if unknown.\n+  /**\n+   * Returns the version of this implementation, or null if unknown.\n+   *\n+   * @return the implementation version\n    */\n-  public String getSpecificationVendor()\n+  public String getImplementationVersion()\n   {\n-    return specVendor;\n+    return implVersion;\n   }\n \n-  /** \n-   * Returns the version of the specification or null if unknown.\n+  /**\n+   * Returns the vendor that wrote this implementation, or null if unknown.\n+   *\n+   * @return the implementation vendor\n    */\n-  public String getSpecificationVersion()\n+  public String getImplementationVendor()\n   {\n-    return specVersion;\n+    return implVendor;\n   }\n \n-  /** \n+  /**\n    * Returns true if this Package is sealed.\n+   *\n+   * @return true if the package is sealed\n    */\n   public boolean isSealed()\n   {\n-    return (sealed != null);\n+    return sealed != null;\n   }\n \n-  /** \n+  /**\n    * Returns true if this Package is sealed and the origin of the classes is\n    * the given URL.\n-   * \n-   * @param url \n+   *\n+   * @param url the URL to test\n+   * @return true if the package is sealed by this URL\n+   * @throws NullPointerException if url is null\n    */\n   public boolean isSealed(URL url)\n   {\n@@ -201,36 +222,36 @@ public boolean isSealed(URL url)\n \n   /**\n    * Checks if the version of the specification is higher or at least as high\n-   * as the desired version.\n+   * as the desired version. Comparison is done by sequentially comparing\n+   * dotted decimal numbers from the parameter and from\n+   * <code>getSpecificationVersion</code>.\n+   *\n    * @param version the (minimal) desired version of the specification\n-   * @exception NumberFormatException when either version or the\n-   * specification version is not a correctly formatted version number\n-   * @exception NullPointerException if the supplied version or the\n-   * Package specification version is null.\n+   * @throws NumberFormatException if either version string is invalid\n+   * @throws NullPointerException if either version string is null\n    */\n-  public boolean isCompatibleWith(String version) throws NumberFormatException\n+  public boolean isCompatibleWith(String version)\n   {\n     StringTokenizer versionTokens = new StringTokenizer(version, \".\");\n     StringTokenizer specTokens = new StringTokenizer(specVersion, \".\");\n     try\n       {\n-\twhile (versionTokens.hasMoreElements())\n-\t  {\n-\t    int vers = Integer.parseInt(versionTokens.nextToken());\n-\t    int spec = Integer.parseInt(specTokens.nextToken());\n-\t    if (spec < vers)\n-\t      return false;\n-\t    else if (spec > vers)\n-\t      return true;\n-\t    // They must be equal, next Token please!\n-\t  }\n+        while (versionTokens.hasMoreElements())\n+          {\n+            int vers = Integer.parseInt(versionTokens.nextToken());\n+            int spec = Integer.parseInt(specTokens.nextToken());\n+            if (spec < vers)\n+              return false;\n+            else if (spec > vers)\n+              return true;\n+            // They must be equal, next Token please!\n+          }\n       }\n     catch (NoSuchElementException e)\n       {\n-\t// this must have been thrown by spec.netToken() so return false\n-\treturn false;\n+        // This must have been thrown by spec.nextToken() so return false.\n+        return false;\n       }\n-\n     // They must have been exactly the same version.\n     // Or the specVersion has more subversions. That is also good.\n     return true;\n@@ -241,49 +262,54 @@ else if (spec > vers)\n    * It may return null if the package is unknown, when there is no\n    * information on that particular package available or when the callers\n    * classloader is null.\n+   *\n    * @param name the name of the desired package\n+   * @return the package by that name in the current ClassLoader\n    */\n   public static Package getPackage(String name)\n   {\n     // Get the caller's classloader\n     SecurityManager sm = System.getSecurityManager();\n     Class c = sm.getClassContext()[1];\n     ClassLoader cl = c.getClassLoader();\n-\n-    if (cl != null)\n-      return cl.getPackage(name);\n-    else\n-      return null;\n+    return cl != null ? cl.getPackage(name) : null;\n   }\n \n   /**\n    * Returns all the packages that are known to the callers class loader.\n    * It may return an empty array if the classloader of the caller is null.\n+   *\n+   * @return an array of all known packages\n    */\n   public static Package[] getPackages()\n   {\n     // Get the caller's classloader\n     SecurityManager sm = System.getSecurityManager();\n     Class c = sm.getClassContext()[1];\n     ClassLoader cl = c.getClassLoader();\n-\n-    if (cl != null)\n-      return cl.getPackages();\n-    else\n-      return new Package[0];\n+    // Sun's implementation returns the packages loaded by the bootstrap\n+    // classloader if cl is null, but right now our bootstrap classloader\n+    // does not create any Packages.\n+    return cl != null ? cl.getPackages() : new Package[0];\n   }\n \n-  /** \n+  /**\n    * Returns the hashCode of the name of this package.\n+   *\n+   * @return the hash code\n    */\n   public int hashCode()\n   {\n     return name.hashCode();\n   }\n \n-  /** \n-   * Returns a string representation of this package name, specification,\n-   * implementation and class origin if sealed.\n+  /**\n+   * Returns a string representation of this package. It is specified to\n+   * be <code>\"package \" + getName() + (getSpecificationTitle() == null\n+   * ? \"\" : \", \" + getSpecificationTitle()) + (getSpecificationVersion()\n+   * == null ? \"\" : \", version \" + getSpecificationVersion())</code>.\n+   *\n+   * @return the string representation of the package\n    */\n   public String toString()\n   {\n@@ -295,4 +321,4 @@ public String toString()\n \t   \" version: \" + implVersion +\n \t   \" vendor: \" + implVendor + \" sealed: \" + sealed;\n   }\n-}\n+} // class Package"}]}