{"sha": "dbfb1116b34897645d29db19c7557348cd69d21b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJmYjExMTZiMzQ4OTc2NDVkMjlkYjE5Yzc1NTczNDhjZDY5ZDIxYg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-05-10T22:24:13Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-05-10T22:24:13Z"}, "message": "fold-const.c (build_range_check): Optimize (c>=1) && (c<=127) into the equivalent (signed char)c > 0.\n\n\t* fold-const.c (build_range_check): Optimize (c>=1) && (c<=127)\n\tinto the equivalent (signed char)c > 0.\n\n\t* gcc.c-torture/execute/20020510-1.c: New test case.\n\nFrom-SVN: r53373", "tree": {"sha": "8a995b794b7a305a3fea68fbd495596f5a3b2c15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a995b794b7a305a3fea68fbd495596f5a3b2c15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbfb1116b34897645d29db19c7557348cd69d21b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfb1116b34897645d29db19c7557348cd69d21b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbfb1116b34897645d29db19c7557348cd69d21b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbfb1116b34897645d29db19c7557348cd69d21b/comments", "author": null, "committer": null, "parents": [{"sha": "79a497cd1dd6b3f6b0d9195bdbff2eb13c8919dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a497cd1dd6b3f6b0d9195bdbff2eb13c8919dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a497cd1dd6b3f6b0d9195bdbff2eb13c8919dd"}], "stats": {"total": 156, "additions": 141, "deletions": 15}, "files": [{"sha": "192b2be851dede7fc341562ef8b6c71c8b6e46a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfb1116b34897645d29db19c7557348cd69d21b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfb1116b34897645d29db19c7557348cd69d21b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbfb1116b34897645d29db19c7557348cd69d21b", "patch": "@@ -1,3 +1,8 @@\n+2002-05-10  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (build_range_check): Optimize (c>=1) && (c<=127)\n+\tinto the equivalent (signed char)c > 0.\n+\n 2002-05-10  Janis Johnson  <janis187@us.ibm.com>\n \n \t* loop.c: (PREFETCH_EXTREME_DIFFERENCE, PREFETCH_BEFORE_LOOP): New."}, {"sha": "2a9f6c6ee7cc462fa971f3deb272d223b63cb1ab", "filename": "gcc/fold-const.c", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfb1116b34897645d29db19c7557348cd69d21b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfb1116b34897645d29db19c7557348cd69d21b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=dbfb1116b34897645d29db19c7557348cd69d21b", "patch": "@@ -3091,41 +3091,73 @@ build_range_check (type, exp, in_p, low, high)\n      tree low, high;\n {\n   tree etype = TREE_TYPE (exp);\n-  tree utype, value;\n+  tree value;\n \n   if (! in_p\n       && (0 != (value = build_range_check (type, exp, 1, low, high))))\n     return invert_truthvalue (value);\n \n-  else if (low == 0 && high == 0)\n+  if (low == 0 && high == 0)\n     return convert (type, integer_one_node);\n \n-  else if (low == 0)\n+  if (low == 0)\n     return fold (build (LE_EXPR, type, exp, high));\n \n-  else if (high == 0)\n+  if (high == 0)\n     return fold (build (GE_EXPR, type, exp, low));\n \n-  else if (operand_equal_p (low, high, 0))\n+  if (operand_equal_p (low, high, 0))\n     return fold (build (EQ_EXPR, type, exp, low));\n \n-  else if (TREE_UNSIGNED (etype) && integer_zerop (low))\n-    return build_range_check (type, exp, 1, 0, high);\n+  if (integer_zerop (low))\n+    {\n+      if (! TREE_UNSIGNED (etype))\n+        {\n+          etype = (*lang_hooks.types.unsigned_type) (etype);\n+          high = convert (etype, high);\n+          exp = convert (etype, exp);\n+        }\n+      return build_range_check (type, exp, 1, 0, high);\n+    }\n \n-  else if (integer_zerop (low))\n+  /* Optimize (c>=1) && (c<=127) into (signed char)c > 0.  */\n+  if (integer_onep (low) && TREE_CODE (high) == INTEGER_CST)\n     {\n-      utype = (*lang_hooks.types.unsigned_type) (etype);\n-      return build_range_check (type, convert (utype, exp), 1, 0,\n-\t\t\t\tconvert (utype, high));\n+      unsigned HOST_WIDE_INT lo;\n+      HOST_WIDE_INT hi;\n+      int prec;\n+\n+      prec = TYPE_PRECISION (etype);\n+      if (prec <= HOST_BITS_PER_WIDE_INT)\n+        {\n+          hi = 0;\n+          lo = ((unsigned HOST_WIDE_INT) 1 << (prec - 1)) - 1;\n+        }\n+      else\n+        {\n+          hi = ((HOST_WIDE_INT) 1 << (prec - HOST_BITS_PER_WIDE_INT - 1)) - 1;\n+          lo = (unsigned HOST_WIDE_INT) -1;\n+        }\n+\n+      if (TREE_INT_CST_HIGH (high) == hi && TREE_INT_CST_LOW (high) == lo)\n+        {\n+          if (TREE_UNSIGNED (etype))\n+            {\n+              etype = (*lang_hooks.types.signed_type) (etype);\n+              exp = convert (etype, exp);\n+            }\n+          return fold (build (GT_EXPR, type, exp,\n+                              convert (etype, integer_zero_node)));\n+        }\n     }\n \n-  else if (0 != (value = const_binop (MINUS_EXPR, high, low, 0))\n-\t   && ! TREE_OVERFLOW (value))\n+  if (0 != (value = const_binop (MINUS_EXPR, high, low, 0))\n+      && ! TREE_OVERFLOW (value))\n     return build_range_check (type,\n \t\t\t      fold (build (MINUS_EXPR, etype, exp, low)),\n \t\t\t      1, convert (etype, integer_zero_node), value);\n-  else\n-    return 0;\n+\n+  return 0;\n }\n \f\n /* Given two ranges, see if we can merge them into one.  Return 1 if we"}, {"sha": "d0f2142e0876581ad397903ef59ba8d692e6fb7e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfb1116b34897645d29db19c7557348cd69d21b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfb1116b34897645d29db19c7557348cd69d21b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dbfb1116b34897645d29db19c7557348cd69d21b", "patch": "@@ -1,3 +1,7 @@\n+2002-05-10  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.c-torture/execute/20020510-1.c: New test case.\n+\n 2002-05-10  David S. Miller  <davem@redhat.com>\n \n \t* gcc.c-torture/execute/conversion.c: Test long double too."}, {"sha": "90fb277555788ca32a323aed79da76ae62504346", "filename": "gcc/testsuite/gcc.c-torture/execute/20020510-1.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbfb1116b34897645d29db19c7557348cd69d21b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020510-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbfb1116b34897645d29db19c7557348cd69d21b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020510-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020510-1.c?ref=dbfb1116b34897645d29db19c7557348cd69d21b", "patch": "@@ -0,0 +1,85 @@\n+/* Copyright (C) 2002  Free Software Foundation.\n+\n+   Test that optimizing ((c>=1) && (c<=127)) into (signed char)c < 0\n+   doesn't cause any problems for the compiler and behaves correctly.\n+\n+   Written by Roger Sayle, 8th May 2002.  */\n+\n+#include <limits.h>\n+\n+extern void abort (void);\n+\n+void\n+testc (unsigned char c, int ok)\n+{\n+  if ((c>=1) && (c<=SCHAR_MAX))\n+    {\n+      if (!ok) abort ();\n+    }\n+  else\n+    if (ok) abort ();\n+}\n+\n+void\n+tests (unsigned short s, int ok)\n+{\n+  if ((s>=1) && (s<=SHRT_MAX))\n+    {\n+      if (!ok) abort ();\n+    }\n+  else\n+    if (ok) abort ();\n+}\n+\n+void\n+testi (unsigned int i, int ok)\n+{\n+  if ((i>=1) && (i<=INT_MAX))\n+    {\n+      if (!ok) abort ();\n+    }\n+  else\n+    if (ok) abort ();\n+}\n+\n+void\n+testl (unsigned long l, int ok)\n+{\n+  if ((l>=1) && (l<=LONG_MAX))\n+    {\n+      if (!ok) abort ();\n+    }\n+  else\n+    if (ok) abort ();\n+}\n+\n+int\n+main ()\n+{\n+  testc (0, 0);\n+  testc (1, 1);\n+  testc (SCHAR_MAX, 1);\n+  testc (SCHAR_MAX+1, 0);\n+  testc (UCHAR_MAX, 0);\n+\n+  tests (0, 0);\n+  tests (1, 1);\n+  tests (SHRT_MAX, 1);\n+  tests (SHRT_MAX+1, 0);\n+  tests (USHRT_MAX, 0);\n+\n+  testi (0, 0);\n+  testi (1, 1);\n+  testi (INT_MAX, 1);\n+  testi (INT_MAX+1U, 0);\n+  testi (UINT_MAX, 0);\n+\n+  testl (0, 0);\n+  testl (1, 1);\n+  testl (LONG_MAX, 1);\n+  testl (LONG_MAX+1UL, 0);\n+  testl (ULONG_MAX, 0);\n+\n+  return 0;\n+}\n+"}]}