{"sha": "419af06a35933fb1bb7c87fe9c7306755afce9a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE5YWYwNmEzNTkzM2ZiMWJiN2M4N2ZlOWM3MzA2NzU1YWZjZTlhMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-23T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-06-23T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "a584835d551c7bccdd57fe4bde6e6b0fbe1942aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a584835d551c7bccdd57fe4bde6e6b0fbe1942aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/419af06a35933fb1bb7c87fe9c7306755afce9a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419af06a35933fb1bb7c87fe9c7306755afce9a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/419af06a35933fb1bb7c87fe9c7306755afce9a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419af06a35933fb1bb7c87fe9c7306755afce9a0/comments", "author": null, "committer": null, "parents": [{"sha": "c556596119307f9ef1c9079ef2bd3a035dea355d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c556596119307f9ef1c9079ef2bd3a035dea355d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c556596119307f9ef1c9079ef2bd3a035dea355d"}], "stats": {"total": 346, "additions": 345, "deletions": 1}, "files": [{"sha": "285648def9c1fc9de634ebbdd277390ef01e54cb", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af06a35933fb1bb7c87fe9c7306755afce9a0/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af06a35933fb1bb7c87fe9c7306755afce9a0/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=419af06a35933fb1bb7c87fe9c7306755afce9a0", "patch": "@@ -1,3 +1,7 @@\n+2021-06-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* MAINTAINERS: Remove my Write After Approval entry.\n+\n 2021-06-21  liuhongt  <hongtao.liu@intel.com>\n \n \t* MAINTAINERS: Add myself as maintainer of the i386 vector"}, {"sha": "b46a2154db27f1527f77939349d6b9d43e7d7c7c", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af06a35933fb1bb7c87fe9c7306755afce9a0/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af06a35933fb1bb7c87fe9c7306755afce9a0/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=419af06a35933fb1bb7c87fe9c7306755afce9a0", "patch": "@@ -1,3 +1,7 @@\n+2021-06-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* mklog.py: Fix flake8 issue.\n+\n 2021-06-21  Tobias Burnus  <tobias@codesourcery.com>\n \t    Martin Sebor  <msebor@redhat.com>\n "}, {"sha": "502a81421b51b8040d16dbecc1fbd63a24c8624f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af06a35933fb1bb7c87fe9c7306755afce9a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af06a35933fb1bb7c87fe9c7306755afce9a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=419af06a35933fb1bb7c87fe9c7306755afce9a0", "patch": "@@ -1,3 +1,196 @@\n+2021-06-22  Sergei Trofimovich  <siarheit@google.com>\n+\n+\t* doc/rtl.texi: drop unbalanced parenthesis.\n+\n+2021-06-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101156\n+\t* gimplify.c (gimplify_expr): Remove premature incorrect\n+\toptimization.\n+\n+2021-06-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/101159\n+\t* tree-vect-patterns.c (vect_recog_popcount_pattern): Fix some\n+\tcomment typos.\n+\n+2021-06-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101160\n+\t* function.c (assign_parms): For decl_result with TYPE_EMPTY_P type\n+\tclear crtl->return_rtx instead of keeping it referencing a pseudo.\n+\n+2021-06-22  Jakub Jelinek  <jakub@redhat.com>\n+\t    Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/101162\n+\t* fold-const.c (range_check_type): Handle OFFSET_TYPE like pointer\n+\ttypes.\n+\n+2021-06-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc (range_relational_tests): New.\n+\t(range_op_tests): Call range_relational_tests.\n+\n+2021-06-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc (operator_cast::lhs_op1_relation): New.\n+\t(operator_identity::lhs_op1_relation): Mew.\n+\n+2021-06-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc (operator_minus::op1_op2_relation_effect): New.\n+\n+2021-06-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc (operator_plus::lhs_op1_relation): New.\n+\t(operator_plus::lhs_op2_relation): New.\n+\n+2021-06-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::ranger_cache): Create a\n+\trelation_oracle if dominators exist.\n+\t(ranger_cache::~ranger_cache): Dispose of oracle.\n+\t(ranger_cache::dump_bb): Dump oracle.\n+\t* gimple-range.cc (fur_source::fur_source): New.\n+\t(fur_source::get_operand): Use mmeber query.\n+\t(fur_source::get_phi_operand): Use member_query.\n+\t(fur_source::query_relation): New.\n+\t(fur_source::register_dependency): Delete.\n+\t(fur_source::register_relation): New.\n+\t(fur_edge::fur_edge): Adjust.\n+\t(fur_edge::get_phi_operand): Fix comment.\n+\t(fur_edge::query): Delete.\n+\t(fur_stmt::fur_stmt): Adjust.\n+\t(fur_stmt::query): Delete.\n+\t(fur_depend::fur_depend): Adjust.\n+\t(fur_depend::register_relation): New.\n+\t(fur_depend::register_relation): New.\n+\t(fur_list::fur_list): Adjust.\n+\t(fur_list::get_operand): Use member query.\n+\t(fold_using_range::range_of_range_op): Process and query relations.\n+\t(fold_using_range::range_of_address): Adjust dependency call.\n+\t(fold_using_range::range_of_phi): Ditto.\n+\t(gimple_ranger::gimple_ranger): New.  Use ranger_ache oracle.\n+\t(fold_using_range::relation_fold_and_or): New.\n+\t(fold_using_range::postfold_gcond_edges): New.\n+\t* gimple-range.h (class gimple_ranger): Adjust.\n+\t(class fur_source): Adjust members.\n+\t(class fur_stmt): Ditto.\n+\t(class fold_using_range): Ditto.\n+\n+2021-06-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* range-op.cc (range_operator::wi_fold): Apply relation effect.\n+\t(range_operator::fold_range): Adjust and apply relation effect.\n+\t(*::fold_range): Add relation parameters.\n+\t(*::op1_range): Ditto.\n+\t(*::op2_range): Ditto.\n+\t(range_operator::lhs_op1_relation): New.\n+\t(range_operator::lhs_op2_relation): New.\n+\t(range_operator::op1_op2_relation): New.\n+\t(range_operator::op1_op2_relation_effect): New.\n+\t(relop_early_resolve): New.\n+\t(operator_equal::op1_op2_relation): New.\n+\t(operator_equal::fold_range): Call relop_early_resolve.\n+\t(operator_not_equal::op1_op2_relation): New.\n+\t(operator_not_equal::fold_range): Call relop_early_resolve.\n+\t(operator_lt::op1_op2_relation): New.\n+\t(operator_lt::fold_range): Call relop_early_resolve.\n+\t(operator_le::op1_op2_relation): New.\n+\t(operator_le::fold_range): Call relop_early_resolve.\n+\t(operator_gt::op1_op2_relation): New.\n+\t(operator_gt::fold_range): Call relop_early_resolve.\n+\t(operator_ge::op1_op2_relation): New.\n+\t(operator_ge::fold_range): Call relop_early_resolve.\n+\t* range-op.h (class range_operator): Adjust parameters and methods.\n+\n+2021-06-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add value-relation.o.\n+\t* gimple-range.h: Adjust include files.\n+\t* tree-data-ref.c: Adjust include file order.\n+\t* value-query.cc (range_query::get_value_range): Default to no oracle.\n+\t(range_query::query_relation): New.\n+\t(range_query::query_relation): New.\n+\t* value-query.h (class range_query): Adjust.\n+\t* value-relation.cc: New.\n+\t* value-relation.h: New.\n+\n+2021-06-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101151\n+\t* tree-ssa-sink.c (statement_sink_location): Expand irreducible\n+\tregion check.\n+\n+2021-06-22  Jojo R  <rjiejie@linux.alibaba.com>\n+\n+\t* config/riscv/riscv.c (thead_c906_tune_info): New.\n+\t(riscv_tune_info_table): Use new tune.\n+\n+2021-06-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101158\n+\t* tree-vect-slp.c (vect_build_slp_tree_1): Move same operand\n+\tchecking after checking for matching operation.\n+\n+2021-06-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101159\n+\t* tree-vect-patterns.c (vect_recog_popcount_pattern): Add\n+\tmissing NULL vectype check.\n+\n+2021-06-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101154\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Fix out-of-bound access.\n+\n+2021-06-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/11877\n+\t* config/i386/i386-protos.h (ix86_last_zero_store_uid): Declare.\n+\t* config/i386/i386-expand.c (ix86_last_zero_store_uid): New variable.\n+\t* config/i386/i386.c (ix86_expand_prologue): Clear it.\n+\t* config/i386/i386.md (peephole2s for 1/2/4 stores of const0_rtx):\n+\tRemove \"\" from match_operand.  Emit new insns using emit_move_insn and\n+\tset ix86_last_zero_store_uid to INSN_UID of the last store.\n+\tAdd peephole2s for 1/2/4 stores of const0_rtx following previous\n+\tsuccessful peep2s.\n+\n+2021-06-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* auto-profile.c (AUTO_PROFILE_VERSION): Bump as string format\n+\twas changed.\n+\n+2021-06-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcov-io.h: Remove padding entries.\n+\n+2021-06-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/97770\n+\t* tree-vect-patterns.c (vect_recog_popcount_pattern):\n+\tNew.\n+\t(vect_recog_func vect_vect_recog_func_ptrs): Add new pattern.\n+\n+2021-06-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/100267\n+\t* config/i386/i386-builtin.def (BDESC): Adjust builtin name.\n+\t* config/i386/sse.md (<avx512>_expand<mode>_mask): Rename to ..\n+\t(expand<mode>_mask): this ..\n+\t(*expand<mode>_mask): New pre_reload splitter to transform\n+\tv{,p}expand* to vmov* when mask is zero, all ones, or has all\n+\tones in it's lower part, otherwise still generate\n+\tv{,p}expand*.\n+\n+2021-06-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/100310\n+\t* config/i386/i386-expand.c\n+\t(ix86_expand_special_args_builtin): Keep constm1_operand only\n+\tif it satisfies insn's operand predicate.\n+\n 2021-06-21  Jason Merrill  <jason@redhat.com>\n \n \tPR target/88529"}, {"sha": "e8c8a9f1fb4d03c0ae08ccccc197d8b0feb02108", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af06a35933fb1bb7c87fe9c7306755afce9a0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af06a35933fb1bb7c87fe9c7306755afce9a0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=419af06a35933fb1bb7c87fe9c7306755afce9a0", "patch": "@@ -1 +1 @@\n-20210622\n+20210623"}, {"sha": "3630b2e6833559aead6c094ba28b4fdad5ee9275", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af06a35933fb1bb7c87fe9c7306755afce9a0/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af06a35933fb1bb7c87fe9c7306755afce9a0/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=419af06a35933fb1bb7c87fe9c7306755afce9a0", "patch": "@@ -1,3 +1,11 @@\n+2021-06-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101143\n+\t* region-model.cc (compat_types_p): New function.\n+\t(region_model::create_region_for_heap_alloc): Convert assertion to\n+\tan error check.\n+\t(region_model::create_region_for_alloca): Likewise.\n+\n 2021-06-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* store.cc (binding_cluster::get_any_binding): Make symbolic reads"}, {"sha": "b2de8408ec8205a5f745f84278a71fd32212003c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af06a35933fb1bb7c87fe9c7306755afce9a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af06a35933fb1bb7c87fe9c7306755afce9a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=419af06a35933fb1bb7c87fe9c7306755afce9a0", "patch": "@@ -1,3 +1,90 @@\n+2021-06-22  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/93524\n+\t* gfortran.dg/pr93524.c: New.\n+\t* gfortran.dg/pr93524.f90: New.\n+\n+2021-06-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101143\n+\t* gcc.dg/analyzer/pr101143.c: New test.\n+\n+2021-06-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/101156\n+\t* gcc.dg/pr101156.c: New testcase.\n+\n+2021-06-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/101159\n+\t* gcc.c-torture/compile/pr101159.c: New test.\n+\n+2021-06-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101160\n+\t* g++.target/i386/empty-class1.C: Require lp64 effective target\n+\tinstead of x86_64-*-*.\n+\t* g++.target/i386/empty-class2.C: New test.\n+\n+2021-06-22  Jakub Jelinek  <jakub@redhat.com>\n+\t    Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR tree-optimization/101162\n+\t* g++.dg/opt/pr101162.C: New test.\n+\n+2021-06-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101151\n+\t* gcc.dg/torture/pr101151.c: New testcase.\n+\n+2021-06-22  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* g++.dg/modules/omp-1_a.C: Check pthread is available for\n+\tdg-module-cmi.\n+\t* g++.dg/modules/omp-2_a.C: Ditto.\n+\n+2021-06-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101158\n+\t* gfortran.dg/pr101158.f90: New testcase.\n+\n+2021-06-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/11877\n+\t* gcc.target/i386/pr11877-2.c: New test.\n+\n+2021-06-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/97770\n+\t* gcc.target/i386/avx512bitalg-pr97770-1.c: Remove xfail.\n+\t* gcc.target/i386/avx512vpopcntdq-pr97770-1.c: Remove xfail.\n+\n+2021-06-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/100267\n+\t* gcc.target/i386/avx512bw-pr100267-1.c: New test.\n+\t* gcc.target/i386/avx512bw-pr100267-b-2.c: New test.\n+\t* gcc.target/i386/avx512bw-pr100267-d-2.c: New test.\n+\t* gcc.target/i386/avx512bw-pr100267-q-2.c: New test.\n+\t* gcc.target/i386/avx512bw-pr100267-w-2.c: New test.\n+\t* gcc.target/i386/avx512f-pr100267-1.c: New test.\n+\t* gcc.target/i386/avx512f-pr100267-pd-2.c: New test.\n+\t* gcc.target/i386/avx512f-pr100267-ps-2.c: New test.\n+\t* gcc.target/i386/avx512vl-pr100267-1.c: New test.\n+\t* gcc.target/i386/avx512vl-pr100267-pd-2.c: New test.\n+\t* gcc.target/i386/avx512vl-pr100267-ps-2.c: New test.\n+\t* gcc.target/i386/avx512vlbw-pr100267-1.c: New test.\n+\t* gcc.target/i386/avx512vlbw-pr100267-b-2.c: New test.\n+\t* gcc.target/i386/avx512vlbw-pr100267-d-2.c: New test.\n+\t* gcc.target/i386/avx512vlbw-pr100267-q-2.c: New test.\n+\t* gcc.target/i386/avx512vlbw-pr100267-w-2.c: New test.\n+\n+2021-06-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/100310\n+\t* gcc.target/i386/pr100310.c: New test.\n+\n 2021-06-21  Jason Merrill  <jason@redhat.com>\n \n \tPR target/88529"}, {"sha": "b763a22f621db8df5baf27c0b5695c25222acd22", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af06a35933fb1bb7c87fe9c7306755afce9a0/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af06a35933fb1bb7c87fe9c7306755afce9a0/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=419af06a35933fb1bb7c87fe9c7306755afce9a0", "patch": "@@ -1,3 +1,10 @@\n+2021-06-22  Sandra Loosemore  <sandra@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/93524\n+\t* runtime/ISO_Fortran_binding.c (CFI_allocate): Fix\n+\tsm computation.\n+\n 2021-06-08  Martin Liska  <mliska@suse.cz>\n \n \t* intrinsics/chmod.c (chmod_internal): Fix typo."}, {"sha": "c1c04be3b21e963eb71951eb4e570cf730cc5027", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af06a35933fb1bb7c87fe9c7306755afce9a0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af06a35933fb1bb7c87fe9c7306755afce9a0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=419af06a35933fb1bb7c87fe9c7306755afce9a0", "patch": "@@ -1,3 +1,44 @@\n+2021-06-22  Jonathan Wakely  <jwakely@redhat.com>\n+\t    Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/std/mutex (lock): Replace recursion with iteration\n+\twhen lockables all have the same type.\n+\t(__detail::__try_lock_impl): Likewise. Pass lockables as\n+\tparameters, instead of a tuple. Always lock the first one, and\n+\trecurse for the rest.\n+\t(__detail::__lock_impl): Adjust call to __try_lock_impl.\n+\t(__detail::__try_to_lock): Remove.\n+\t* testsuite/30_threads/lock/3.cc: Check that mutexes are locked.\n+\t* testsuite/30_threads/lock/4.cc: Also test non-heterogeneous\n+\targuments.\n+\t* testsuite/30_threads/unique_lock/cons/60497.cc: Also check\n+\tstd::try_lock.\n+\t* testsuite/30_threads/try_lock/5.cc: New test.\n+\n+2021-06-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/memory (declare_reachable, undeclare_reachable)\n+\t(declare_no_pointers, undeclare_no_pointers, get_pointer_safety)\n+\t(pointer_safety): Only define for C++11 to C++20 inclusive.\n+\t* testsuite/20_util/pointer_safety/1.cc: Do not run for C++23.\n+\n+2021-06-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.h (seed_seq): Constrain initializer-list\n+\tconstructor.\n+\t* include/bits/random.tcc (seed_seq): Add template parameter.\n+\t* testsuite/26_numerics/random/seed_seq/cons/default.cc: Check\n+\tfor noexcept.\n+\t* testsuite/26_numerics/random/seed_seq/cons/initlist.cc: Check\n+\tconstraints.\n+\n+2021-06-22  Thomas Rodgers  <rodgert@appliantology.com>\n+\n+\tPR libstdc++/100806\n+\t* include/bits/semaphore_base.h (__atomic_semaphore::_M_release):\n+\tForce _M_release() to wake all waiting threads.\n+\t* testsuite/30_threads/semaphore/100806.cc: New test.\n+\n 2021-06-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/mutex (__try_to_lock): Move to __detail namespace."}]}