{"sha": "f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg4NmM0YTc5NTczZjFmMWI0NmMzN2ExZDVkNjhhNGNmNWQxMzE5ZA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-26T10:23:11Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-27T20:27:13Z"}, "message": "libphobos: Merge upstream druntime d37ef985.\n\nAdds support for FreeBSD/x86 53-bit precision reals, updates bindings\nfor FreeBSD 12.x, and removes all support code and tests for the\nextern(Pascal) calling convention.\n\nReviewed-on: https://github.com/dlang/druntime/pull/3286\n\t     https://github.com/dlang/druntime/pull/3287\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/MERGE: Merge upstream druntime d37ef985.\n\t* libdruntime/Makefile.am (DRUNTIME_DSOURCES_FREEBSD): Add\n\tcore/sys/freebsd/config.d\n\t* libdruntime/Makefile.in: Regenerate.", "tree": {"sha": "498cf75f8c473444a553fe80239d9d5966298b6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/498cf75f8c473444a553fe80239d9d5966298b6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ac67dddc31e6ab4f954e27e1f86e005537efc12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac67dddc31e6ab4f954e27e1f86e005537efc12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ac67dddc31e6ab4f954e27e1f86e005537efc12"}], "stats": {"total": 313, "additions": 214, "deletions": 99}, "files": [{"sha": "6b65a44e6d2d13278e344d0882ed49d7ff0bc71a", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -1,4 +1,4 @@\n-5e4492c45172110b035591f5961b9f9f5adf6f13\n+d37ef985a97eb446371ab4b2315a52b87233fbf3\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "4798bdf777d778dba4379b1111492b4a827c68bd", "filename": "libphobos/libdruntime/Makefile.am", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.am?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -237,16 +237,16 @@ DRUNTIME_DSOURCES_DRAGONFLYBSD = core/sys/dragonflybsd/dlfcn.d \\\n \tcore/sys/dragonflybsd/sys/mman.d core/sys/dragonflybsd/sys/socket.d \\\n \tcore/sys/dragonflybsd/time.d\n \n-DRUNTIME_DSOURCES_FREEBSD = core/sys/freebsd/dlfcn.d \\\n-\tcore/sys/freebsd/execinfo.d core/sys/freebsd/netinet/in_.d \\\n-\tcore/sys/freebsd/pthread_np.d core/sys/freebsd/string.d \\\n-\tcore/sys/freebsd/sys/_bitset.d core/sys/freebsd/sys/_cpuset.d \\\n-\tcore/sys/freebsd/sys/cdefs.d core/sys/freebsd/sys/elf.d \\\n-\tcore/sys/freebsd/sys/elf32.d core/sys/freebsd/sys/elf64.d \\\n-\tcore/sys/freebsd/sys/elf_common.d core/sys/freebsd/sys/event.d \\\n-\tcore/sys/freebsd/sys/link_elf.d core/sys/freebsd/sys/mman.d \\\n-\tcore/sys/freebsd/sys/mount.d core/sys/freebsd/time.d \\\n-\tcore/sys/freebsd/unistd.d\n+DRUNTIME_DSOURCES_FREEBSD = core/sys/freebsd/config.d \\\n+\tcore/sys/freebsd/dlfcn.d core/sys/freebsd/execinfo.d \\\n+\tcore/sys/freebsd/netinet/in_.d core/sys/freebsd/pthread_np.d \\\n+\tcore/sys/freebsd/string.d core/sys/freebsd/sys/_bitset.d \\\n+\tcore/sys/freebsd/sys/_cpuset.d core/sys/freebsd/sys/cdefs.d \\\n+\tcore/sys/freebsd/sys/elf.d core/sys/freebsd/sys/elf32.d \\\n+\tcore/sys/freebsd/sys/elf64.d core/sys/freebsd/sys/elf_common.d \\\n+\tcore/sys/freebsd/sys/event.d core/sys/freebsd/sys/link_elf.d \\\n+\tcore/sys/freebsd/sys/mman.d core/sys/freebsd/sys/mount.d \\\n+\tcore/sys/freebsd/time.d core/sys/freebsd/unistd.d\n \n DRUNTIME_DSOURCES_LINUX = core/sys/linux/config.d \\\n \tcore/sys/linux/dlfcn.d core/sys/linux/elf.d core/sys/linux/epoll.d \\"}, {"sha": "0b895142a136b4c42725a0431e2e389e3c5bb7d3", "filename": "libphobos/libdruntime/Makefile.in", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.in?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -299,7 +299,7 @@ am__objects_7 = core/sys/dragonflybsd/dlfcn.lo \\\n am__objects_9 = core/sys/bionic/fcntl.lo core/sys/bionic/string.lo \\\n \tcore/sys/bionic/unistd.lo\n @DRUNTIME_OS_ANDROID_TRUE@am__objects_10 = $(am__objects_9)\n-am__objects_11 = core/sys/freebsd/dlfcn.lo \\\n+am__objects_11 = core/sys/freebsd/config.lo core/sys/freebsd/dlfcn.lo \\\n \tcore/sys/freebsd/execinfo.lo core/sys/freebsd/netinet/in_.lo \\\n \tcore/sys/freebsd/pthread_np.lo core/sys/freebsd/string.lo \\\n \tcore/sys/freebsd/sys/_bitset.lo \\\n@@ -861,16 +861,16 @@ DRUNTIME_DSOURCES_DRAGONFLYBSD = core/sys/dragonflybsd/dlfcn.d \\\n \tcore/sys/dragonflybsd/sys/mman.d core/sys/dragonflybsd/sys/socket.d \\\n \tcore/sys/dragonflybsd/time.d\n \n-DRUNTIME_DSOURCES_FREEBSD = core/sys/freebsd/dlfcn.d \\\n-\tcore/sys/freebsd/execinfo.d core/sys/freebsd/netinet/in_.d \\\n-\tcore/sys/freebsd/pthread_np.d core/sys/freebsd/string.d \\\n-\tcore/sys/freebsd/sys/_bitset.d core/sys/freebsd/sys/_cpuset.d \\\n-\tcore/sys/freebsd/sys/cdefs.d core/sys/freebsd/sys/elf.d \\\n-\tcore/sys/freebsd/sys/elf32.d core/sys/freebsd/sys/elf64.d \\\n-\tcore/sys/freebsd/sys/elf_common.d core/sys/freebsd/sys/event.d \\\n-\tcore/sys/freebsd/sys/link_elf.d core/sys/freebsd/sys/mman.d \\\n-\tcore/sys/freebsd/sys/mount.d core/sys/freebsd/time.d \\\n-\tcore/sys/freebsd/unistd.d\n+DRUNTIME_DSOURCES_FREEBSD = core/sys/freebsd/config.d \\\n+\tcore/sys/freebsd/dlfcn.d core/sys/freebsd/execinfo.d \\\n+\tcore/sys/freebsd/netinet/in_.d core/sys/freebsd/pthread_np.d \\\n+\tcore/sys/freebsd/string.d core/sys/freebsd/sys/_bitset.d \\\n+\tcore/sys/freebsd/sys/_cpuset.d core/sys/freebsd/sys/cdefs.d \\\n+\tcore/sys/freebsd/sys/elf.d core/sys/freebsd/sys/elf32.d \\\n+\tcore/sys/freebsd/sys/elf64.d core/sys/freebsd/sys/elf_common.d \\\n+\tcore/sys/freebsd/sys/event.d core/sys/freebsd/sys/link_elf.d \\\n+\tcore/sys/freebsd/sys/mman.d core/sys/freebsd/sys/mount.d \\\n+\tcore/sys/freebsd/time.d core/sys/freebsd/unistd.d\n \n DRUNTIME_DSOURCES_LINUX = core/sys/linux/config.d \\\n \tcore/sys/linux/dlfcn.d core/sys/linux/elf.d core/sys/linux/epoll.d \\\n@@ -1435,6 +1435,7 @@ core/sys/bionic/unistd.lo: core/sys/bionic/$(am__dirstamp)\n core/sys/freebsd/$(am__dirstamp):\n \t@$(MKDIR_P) core/sys/freebsd\n \t@: > core/sys/freebsd/$(am__dirstamp)\n+core/sys/freebsd/config.lo: core/sys/freebsd/$(am__dirstamp)\n core/sys/freebsd/dlfcn.lo: core/sys/freebsd/$(am__dirstamp)\n core/sys/freebsd/execinfo.lo: core/sys/freebsd/$(am__dirstamp)\n core/sys/freebsd/netinet/$(am__dirstamp):"}, {"sha": "4458b70122be4e566a7df3792b13ee67d27a5da0", "filename": "libphobos/libdruntime/core/demangle.d", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fdemangle.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fdemangle.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fdemangle.d?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -1009,7 +1009,6 @@ pure @safe:\n         F       // D\n         U       // C\n         W       // Windows\n-        V       // Pascal\n         R       // C++\n \n     FuncAttrs:\n@@ -1089,10 +1088,6 @@ pure @safe:\n             popFront();\n             put( \"extern (Windows) \" );\n             break;\n-        case 'V': // Pascal\n-            popFront();\n-            put( \"extern (Pascal) \" );\n-            break;\n         case 'R': // C++\n             popFront();\n             put( \"extern (C++) \" );\n@@ -2380,15 +2375,14 @@ private template isExternCPP(FT) if (is(FT == function))\n private template hasPlainMangling(FT) if (is(FT == function))\n {\n     enum lnk = __traits(getLinkage, FT);\n-    // C || Pascal || Windows\n-    enum hasPlainMangling = lnk == \"C\" || lnk == \"Pascal\" || lnk == \"Windows\";\n+    // C || Windows\n+    enum hasPlainMangling = lnk == \"C\" || lnk == \"Windows\";\n }\n \n @safe pure nothrow unittest\n {\n     static extern(D) void fooD();\n     static extern(C) void fooC();\n-    static extern(Pascal) void fooP();\n     static extern(Windows) void fooW();\n     static extern(C++) void fooCPP();\n \n@@ -2399,13 +2393,11 @@ private template hasPlainMangling(FT) if (is(FT == function))\n     }\n     static assert(check!(typeof(fooD))(true, false, false));\n     static assert(check!(typeof(fooC))(false, false, true));\n-    static assert(check!(typeof(fooP))(false, false, true));\n     static assert(check!(typeof(fooW))(false, false, true));\n     static assert(check!(typeof(fooCPP))(false, true, false));\n \n     static assert(__traits(compiles, mangleFunc!(typeof(&fooD))(\"\")));\n     static assert(__traits(compiles, mangleFunc!(typeof(&fooC))(\"\")));\n-    static assert(__traits(compiles, mangleFunc!(typeof(&fooP))(\"\")));\n     static assert(__traits(compiles, mangleFunc!(typeof(&fooW))(\"\")));\n     static assert(!__traits(compiles, mangleFunc!(typeof(&fooCPP))(\"\")));\n }\n@@ -2505,7 +2497,8 @@ version (unittest)\n          \"pure @safe void testexpansion.s!(testexpansion.s!(int).s(int).Result).s(testexpansion.s!(int).s(int).Result).Result.foo()\"],\n         [\"_D13testexpansion__T1sTSQw__TQjTiZQoFiZ6ResultZQBbFQBcZQq3fooMFNaNfZv\",\n          \"pure @safe void testexpansion.s!(testexpansion.s!(int).s(int).Result).s(testexpansion.s!(int).s(int).Result).Result.foo()\"],\n-        // ambiguity on 'V', template value argument or pascal function\n+        // formerly ambiguous on 'V', template value argument or pascal function\n+        // pascal functions have now been removed (in v2.095.0)\n         [\"_D3std4conv__T7enumRepTyAaTEQBa12experimental9allocator15building_blocks15stats_collector7OptionsVQCti64ZQDnyQDh\",\n          \"immutable(char[]) std.conv.enumRep!(immutable(char[]), std.experimental.allocator.building_blocks.stats_collector.Options, 64).enumRep\"],\n         // symbol back reference to location with symbol back reference"}, {"sha": "d92204902fa19c34b71049bfb6f117bb8d0df42e", "filename": "libphobos/libdruntime/core/internal/convert.d", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fconvert.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fconvert.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Finternal%2Fconvert.d?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -39,7 +39,7 @@ const(ubyte)[] toUbyte(T)(const ref T val) if (is(Unqual!T == float) || is(Unqua\n {\n     if (__ctfe)\n     {\n-        static if (T.mant_dig == float.mant_dig || T.mant_dig == double.mant_dig)\n+        static if (floatFormat!T == FloatFormat.Float || floatFormat!T == FloatFormat.Double)\n         {\n             static if (is(T : ireal)) // https://issues.dlang.org/show_bug.cgi?id=19932\n                 const f = val.im;\n@@ -628,7 +628,14 @@ template floatFormat(T) if (is(T:real) || is(T:ireal))\n     static if (T.mant_dig == 24)\n         enum floatFormat = FloatFormat.Float;\n     else static if (T.mant_dig == 53)\n-        enum floatFormat = FloatFormat.Double;\n+    {\n+        // Double precision, or real == double\n+        static if (T.sizeof == double.sizeof)\n+            enum floatFormat = FloatFormat.Double;\n+        // 80-bit real with rounding precision set to 53 bits.\n+        else static if (T.sizeof == real.sizeof)\n+            enum floatFormat = FloatFormat.Real80;\n+    }\n     else static if (T.mant_dig == 64)\n         enum floatFormat = FloatFormat.Real80;\n     else static if (T.mant_dig == 106)"}, {"sha": "4eda066b293eedac2199ce4044ed9fd9860a614a", "filename": "libphobos/libdruntime/core/sys/freebsd/config.d", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fconfig.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fconfig.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fconfig.d?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -0,0 +1,24 @@\n+/**\n+ * D header file for FreeBSD\n+ *\n+ * Authors: Iain Buclaw\n+ */\n+module core.sys.freebsd.config;\n+\n+version (FreeBSD):\n+\n+public import core.sys.posix.config;\n+\n+// https://svnweb.freebsd.org/base/head/sys/sys/param.h?view=markup\n+// __FreeBSD_version numbers are documented in the Porter's Handbook.\n+// NOTE: When adding newer versions of FreeBSD, verify all current versioned\n+// bindings are still compatible with the release.\n+     version (FreeBSD_12) enum __FreeBSD_version = 1202000;\n+else version (FreeBSD_11) enum __FreeBSD_version = 1104000;\n+else version (FreeBSD_10) enum __FreeBSD_version = 1004000;\n+else version (FreeBSD_9)  enum __FreeBSD_version = 903000;\n+else version (FreeBSD_8)  enum __FreeBSD_version = 804000;\n+else static assert(false, \"Unsupported version of FreeBSD\");\n+\n+// First version of FreeBSD to support 64-bit stat buffer.\n+enum INO64_FIRST = 1200031;"}, {"sha": "8ac7c3b4758d8bb3f5fc094a419c3ed00fff7f69", "filename": "libphobos/libdruntime/core/sys/freebsd/sys/event.d", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fevent.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fevent.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fevent.d?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -18,6 +18,7 @@ extern (C):\n nothrow:\n @nogc:\n \n+import core.sys.freebsd.config;\n import core.stdc.stdint;    // intptr_t, uintptr_t\n import core.sys.posix.time; // timespec\n \n@@ -38,19 +39,35 @@ enum\n     EVFILT_SYSCOUNT =  11,\n }\n \n-extern(D) void EV_SET(kevent_t* kevp, typeof(kevent_t.tupleof) args)\n+static if (__FreeBSD_version >= 1200000)\n {\n-    *kevp = kevent_t(args);\n+    struct kevent_t\n+    {\n+        uintptr_t ident;\n+        short     filter;\n+        ushort    flags;\n+        uint      fflags;\n+        long      data;\n+        void*     udata;\n+        ulong[4]  ext;\n+    }\n+}\n+else\n+{\n+    struct kevent_t\n+    {\n+        uintptr_t    ident; /* identifier for this event */\n+        short       filter; /* filter for event */\n+        ushort       flags;\n+        uint        fflags;\n+        intptr_t      data;\n+        void        *udata; /* opaque user data identifier */\n+    }\n }\n \n-struct kevent_t\n+extern(D) void EV_SET(kevent_t* kevp, typeof(kevent_t.tupleof) args)\n {\n-    uintptr_t    ident; /* identifier for this event */\n-    short       filter; /* filter for event */\n-    ushort       flags;\n-    uint        fflags;\n-    intptr_t      data;\n-    void        *udata; /* opaque user data identifier */\n+    *kevp = kevent_t(args);\n }\n \n enum"}, {"sha": "e45c46006618a706b7d538881f1cbe703eb98398", "filename": "libphobos/libdruntime/core/sys/freebsd/sys/mount.d", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fmount.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fmount.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Ffreebsd%2Fsys%2Fmount.d?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -11,6 +11,7 @@ module core.sys.freebsd.sys.mount;\n \n version (FreeBSD):\n \n+import core.sys.freebsd.config;\n import core.stdc.config : c_long;\n import core.sys.posix.sys.stat : stat_t;\n import core.sys.posix.sys.types : uid_t;\n@@ -32,8 +33,17 @@ struct fid\n }\n \n enum MFSNAMELEN = 16;\n-enum MNAMELEN   = 88;\n-enum STATFS_VERSION = 0x20030518;\n+\n+static if (__FreeBSD_version >= 1200000)\n+{\n+    enum MNAMELEN   = 1024;\n+    enum STATFS_VERSION = 0x20140518;\n+}\n+else\n+{\n+    enum MNAMELEN   = 88;\n+    enum STATFS_VERSION = 0x20030518;\n+}\n \n struct statfs_t\n {"}, {"sha": "b12d6b157d5b3fa40f8cf25f1cd8de93efae550e", "filename": "libphobos/libdruntime/core/sys/posix/dirent.d", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdirent.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdirent.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fdirent.d?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -135,6 +135,8 @@ else version (Darwin)\n }\n else version (FreeBSD)\n {\n+    import core.sys.freebsd.config;\n+\n     // https://github.com/freebsd/freebsd/blob/master/sys/sys/dirent.h\n     enum\n     {\n@@ -149,14 +151,31 @@ else version (FreeBSD)\n         DT_WHT      = 14\n     }\n \n-    align(4)\n-    struct dirent\n+    static if (__FreeBSD_version >= 1200000)\n     {\n-        uint      d_fileno;\n-        ushort    d_reclen;\n-        ubyte     d_type;\n-        ubyte     d_namlen;\n-        char[256] d_name = 0;\n+        struct dirent\n+        {\n+            ino_t     d_fileno;\n+            off_t     d_off;\n+            ushort    d_reclen;\n+            ubyte     d_type;\n+            ubyte     d_pad0;\n+            ushort    d_namlen;\n+            ushort    d_pad1;\n+            char[256] d_name = 0;\n+        }\n+    }\n+    else\n+    {\n+        align(4)\n+        struct dirent\n+        {\n+            uint      d_fileno;\n+            ushort    d_reclen;\n+            ubyte     d_type;\n+            ubyte     d_namlen;\n+            char[256] d_name = 0;\n+        }\n     }\n \n     alias void* DIR;"}, {"sha": "35b1f1cffee42c52dc542961aa1d1e8d80d8b713", "filename": "libphobos/libdruntime/core/sys/posix/sys/stat.d", "status": "modified", "additions": 70, "deletions": 24, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Fstat.d?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -1060,36 +1060,82 @@ else version (Darwin)\n }\n else version (FreeBSD)\n {\n-    // https://github.com/freebsd/freebsd/blob/master/sys/sys/stat.h\n+    import core.sys.freebsd.config;\n \n-    struct stat_t\n+    // https://github.com/freebsd/freebsd/blob/master/sys/sys/stat.h\n+    static if (__FreeBSD_version >= INO64_FIRST)\n     {\n-        dev_t       st_dev;\n-        ino_t       st_ino;\n-        mode_t      st_mode;\n-        nlink_t     st_nlink;\n-        uid_t       st_uid;\n-        gid_t       st_gid;\n-        dev_t       st_rdev;\n+        struct stat_t\n+        {\n+            dev_t     st_dev;\n+            ino_t     st_ino;\n+            nlink_t   st_nlink;\n+            mode_t    st_mode;\n+            short st_padding0;\n+            uid_t     st_uid;\n+            gid_t     st_gid;\n+            int st_padding1;\n+            dev_t     st_rdev;\n \n-        time_t      st_atime;\n-        c_long      __st_atimensec;\n-        time_t      st_mtime;\n-        c_long      __st_mtimensec;\n-        time_t      st_ctime;\n-        c_long      __st_ctimensec;\n+            version (X86) int st_atim_ext;\n+            timespec  st_atim;\n \n-        off_t       st_size;\n-        blkcnt_t    st_blocks;\n-        blksize_t   st_blksize;\n-        fflags_t    st_flags;\n-        uint        st_gen;\n-        int         st_lspare;\n+            version (X86) int st_mtim_ext;\n+            timespec  st_mtim;\n+\n+            version (X86) int st_ctim_ext;\n+            timespec  st_ctim;\n \n-        time_t      st_birthtime;\n-        c_long      st_birthtimensec;\n+            version (X86) int st_btim_ext;\n+            timespec  st_birthtim;\n \n-        ubyte[16 - timespec.sizeof] padding;\n+            off_t     st_size;\n+            blkcnt_t st_blocks;\n+            blksize_t st_blksize;\n+            fflags_t  st_flags;\n+            ulong st_gen;\n+            ulong[10] st_spare;\n+\n+            extern(D) @safe @property inout pure nothrow\n+            {\n+                ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n+                ref inout(time_t) st_birthtime() return { return st_birthtim.tv_sec; }\n+            }\n+        }\n+    }\n+    else\n+    {\n+        struct stat_t\n+        {\n+            uint        st_dev;\n+            uint        st_ino;\n+            mode_t      st_mode;\n+            ushort      st_nlink;\n+            uid_t       st_uid;\n+            gid_t       st_gid;\n+            uint        st_rdev;\n+            timespec    st_atim;\n+            timespec    st_mtim;\n+            timespec    st_ctim;\n+            off_t       st_size;\n+            blkcnt_t    st_blocks;\n+            blksize_t   st_blksize;\n+            fflags_t    st_flags;\n+            uint        st_gen;\n+            int         st_lspare;\n+            timespec    st_birthtim;\n+            ubyte[16 - timespec.sizeof] padding;\n+\n+            extern(D) @safe @property inout pure nothrow\n+            {\n+                ref inout(time_t) st_atime() return { return st_atim.tv_sec; }\n+                ref inout(time_t) st_mtime() return { return st_mtim.tv_sec; }\n+                ref inout(time_t) st_ctime() return { return st_ctim.tv_sec; }\n+                ref inout(time_t) st_birthtime() return { return st_birthtim.tv_sec; }\n+            }\n+        }\n     }\n \n     enum S_IRUSR    = 0x100; // octal 0000400"}, {"sha": "2d8ef92720ef441d5bddff6edcaac10dc4f98539", "filename": "libphobos/libdruntime/core/sys/posix/sys/types.d", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fsys%2Ftypes.d?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -168,14 +168,27 @@ else version (Darwin)\n }\n else version (FreeBSD)\n {\n+    import core.sys.freebsd.config;\n+\n     // https://github.com/freebsd/freebsd/blob/master/sys/sys/_types.h\n     alias long      blkcnt_t;\n     alias uint      blksize_t;\n-    alias uint      dev_t;\n+\n+    static if (__FreeBSD_version >= 1200000)\n+    {\n+        alias ulong dev_t;\n+        alias ulong ino_t;\n+        alias ulong nlink_t;\n+    }\n+    else\n+    {\n+        alias uint   dev_t;\n+        alias uint   ino_t;\n+        alias ushort nlink_t;\n+    }\n+\n     alias uint      gid_t;\n-    alias uint      ino_t;\n     alias ushort    mode_t;\n-    alias ushort    nlink_t;\n     alias long      off_t;\n     alias int       pid_t;\n     //size_t (defined in core.stdc.stddef)"}, {"sha": "15c460aac6f0d306502bf13c24739bcd291f309d", "filename": "libphobos/libdruntime/rt/critical_.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Frt%2Fcritical_.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Frt%2Fcritical_.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fcritical_.d?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -43,7 +43,7 @@ extern (C) void _d_criticalenter2(D_CRITICAL_SECTION** pcs)\n         lockMutex(cast(Mutex*)&gcs.mtx);\n         if (atomicLoad!(MemoryOrder.raw)(*cast(shared) pcs) is null)\n         {\n-            auto cs = new shared D_CRITICAL_SECTION;\n+            auto cs = new shared(D_CRITICAL_SECTION);\n             initMutex(cast(Mutex*)&cs.mtx);\n             atomicStore!(MemoryOrder.rel)(*cast(shared) pcs, cs);\n         }"}, {"sha": "3d5ba29986370d585f2d3099e090d8a9cc22a147", "filename": "libphobos/libdruntime/rt/dmain2.d", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d/libphobos%2Flibdruntime%2Frt%2Fdmain2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Frt%2Fdmain2.d?ref=f886c4a79573f1f1b46c37a1d5d68a4cf5d1319d", "patch": "@@ -9,9 +9,6 @@\n  * Source: $(DRUNTIMESRC src/rt/_dmain2.d)\n  */\n \n-/* NOTE: This file has been patched from the original DMD distribution to\n- * work with the GDC compiler.\n- */\n module rt.dmain2;\n \n private\n@@ -340,15 +337,8 @@ extern (C) int _d_run_main(int argc, char **argv, MainFunc mainFunc)\n     version (CRuntime_Microsoft)\n     {\n         // enable full precision for reals\n-        version (GNU)\n+        version (D_InlineAsm_X86_64)\n         {\n-            size_t fpu_cw;\n-            asm { \"fstcw %0\" : \"=m\" (fpu_cw); }\n-            fpu_cw |= 0b11_00_111111;  // 11: use 64 bit extended-precision\n-                                       // 111111: mask all FP exceptions\n-            asm { \"fldcw %0\" : \"=m\" (fpu_cw); }\n-        }\n-        else version (Win64)\n             asm\n             {\n                 push    RAX;\n@@ -358,7 +348,8 @@ extern (C) int _d_run_main(int argc, char **argv, MainFunc mainFunc)\n                 fldcw   word ptr [RSP];\n                 pop     RAX;\n             }\n-        else version (Win32)\n+        }\n+        else version (D_InlineAsm_X86)\n         {\n             asm\n             {\n@@ -455,12 +446,6 @@ extern (C) int _d_run_main(int argc, char **argv, MainFunc mainFunc)\n     {\n         if (IsDebuggerPresent())\n             trapExceptions = false;\n-        version (GNU)\n-        {\n-            /* IsDebuggerPresent doesn't detect GDC.  Would be nice to have\n-               some way of detecting valid console output */\n-            trapExceptions = true;\n-        }\n     }\n \n     void tryExec(scope void delegate() dg)"}]}