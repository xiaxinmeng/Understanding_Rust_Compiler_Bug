{"sha": "6edf4f24f34264cfa6c78bd5659b26bdcadafaf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVkZjRmMjRmMzQyNjRjZmE2Yzc4YmQ1NjU5YjI2YmRjYWRhZmFmNQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-08-28T06:35:36Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-08-28T06:35:36Z"}, "message": "AVX-512. Support 512-bit/masked interleave.\n\ngcc/\n\t* config/i386/sse.md\n\t(define_insn \"avx512bw_interleave_highv64qi<mask_name>\"): New.\n\t(define_insn \"avx2_interleave_highv32qi<mask_name>\"): Add masking.\n\t(define_insn \"vec_interleave_highv16qi<mask_name>\"): Ditto.\n\t(define_insn \"avx2_interleave_lowv32qi<mask_name>\"): Ditto.\n\t(define_insn \"vec_interleave_lowv16qi<mask_name>\"): Ditto.\n\t(define_insn \"avx2_interleave_highv16hi<mask_name>\"): Ditto.\n\t(define_insn \"vec_interleave_highv8hi<mask_name>\"): Ditto.\n\t(define_insn \"avx2_interleave_lowv16hi<mask_name>\"): Ditto.\n\t(define_insn \"vec_interleave_lowv8hi<mask_name>\"): Ditto.\n\t(define_insn \"avx2_interleave_highv8si<mask_name>\"): Ditto.\n\t(define_insn \"vec_interleave_highv4si<mask_name>\"): Ditto.\n\t(define_insn \"avx2_interleave_lowv8si<mask_name>\"): Ditto.\n\t(define_insn \"vec_interleave_lowv4si<mask_name>\"): Ditto.\n\t(define_insn \"vec_interleave_highv16qi<mask_name>\"): New.\n\t(define_insn \"avx512bw_interleave_highv32hi<mask_name>\"): Ditto.\n\t(define_insn \"<mask_codefor>avx512bw_interleave_lowv32hi<mask_name>\"): Ditto.\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r214671", "tree": {"sha": "bf228d7155346b25a9bc41083eb997032d38ea46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf228d7155346b25a9bc41083eb997032d38ea46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6edf4f24f34264cfa6c78bd5659b26bdcadafaf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6edf4f24f34264cfa6c78bd5659b26bdcadafaf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6edf4f24f34264cfa6c78bd5659b26bdcadafaf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6edf4f24f34264cfa6c78bd5659b26bdcadafaf5/comments", "author": null, "committer": null, "parents": [{"sha": "98ee4d9bb726a0e6a5ca09f5cd62b47db5a5416f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ee4d9bb726a0e6a5ca09f5cd62b47db5a5416f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ee4d9bb726a0e6a5ca09f5cd62b47db5a5416f"}], "stats": {"total": 335, "additions": 253, "deletions": 82}, "files": [{"sha": "9d545feaa6e3b323bc323ff8aa9489489f3f984b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6edf4f24f34264cfa6c78bd5659b26bdcadafaf5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6edf4f24f34264cfa6c78bd5659b26bdcadafaf5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6edf4f24f34264cfa6c78bd5659b26bdcadafaf5", "patch": "@@ -1,3 +1,30 @@\n+2014-08-28  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md\n+\t(define_insn \"avx512bw_interleave_highv64qi<mask_name>\"): New.\n+\t(define_insn \"avx2_interleave_highv32qi<mask_name>\"): Add masking.\n+\t(define_insn \"vec_interleave_highv16qi<mask_name>\"): Ditto.\n+\t(define_insn \"avx2_interleave_lowv32qi<mask_name>\"): Ditto.\n+\t(define_insn \"vec_interleave_lowv16qi<mask_name>\"): Ditto.\n+\t(define_insn \"avx2_interleave_highv16hi<mask_name>\"): Ditto.\n+\t(define_insn \"vec_interleave_highv8hi<mask_name>\"): Ditto.\n+\t(define_insn \"avx2_interleave_lowv16hi<mask_name>\"): Ditto.\n+\t(define_insn \"vec_interleave_lowv8hi<mask_name>\"): Ditto.\n+\t(define_insn \"avx2_interleave_highv8si<mask_name>\"): Ditto.\n+\t(define_insn \"vec_interleave_highv4si<mask_name>\"): Ditto.\n+\t(define_insn \"avx2_interleave_lowv8si<mask_name>\"): Ditto.\n+\t(define_insn \"vec_interleave_lowv4si<mask_name>\"): Ditto.\n+\t(define_insn \"vec_interleave_highv16qi<mask_name>\"): New.\n+\t(define_insn \"avx512bw_interleave_highv32hi<mask_name>\"): Ditto.\n+\t(define_insn \"<mask_codefor>avx512bw_interleave_lowv32hi<mask_name>\"): Ditto.\n+\n 2014-08-28  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "03512a5c55a1ef5c4ed8da20c46b1464c01b476b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 226, "deletions": 82, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6edf4f24f34264cfa6c78bd5659b26bdcadafaf5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6edf4f24f34264cfa6c78bd5659b26bdcadafaf5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6edf4f24f34264cfa6c78bd5659b26bdcadafaf5", "patch": "@@ -9740,12 +9740,56 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"avx2_interleave_highv32qi\"\n-  [(set (match_operand:V32QI 0 \"register_operand\" \"=x\")\n+(define_insn \"avx512bw_interleave_highv64qi<mask_name>\"\n+  [(set (match_operand:V64QI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V64QI\n+\t  (vec_concat:V128QI\n+\t    (match_operand:V64QI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V64QI 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(const_int 8)  (const_int 72)\n+\t\t     (const_int 9)  (const_int 73)\n+\t\t     (const_int 10) (const_int 74)\n+\t\t     (const_int 11) (const_int 75)\n+\t\t     (const_int 12) (const_int 76)\n+\t\t     (const_int 13) (const_int 77)\n+\t\t     (const_int 14) (const_int 78)\n+\t\t     (const_int 15) (const_int 79)\n+\t\t     (const_int 24) (const_int 88)\n+\t\t     (const_int 25) (const_int 89)\n+\t\t     (const_int 26) (const_int 90)\n+\t\t     (const_int 27) (const_int 91)\n+\t\t     (const_int 28) (const_int 92)\n+\t\t     (const_int 29) (const_int 93)\n+\t\t     (const_int 30) (const_int 94)\n+\t\t     (const_int 31) (const_int 95)\n+\t\t     (const_int 40) (const_int 104)\n+\t\t     (const_int 41) (const_int 105)\n+\t\t     (const_int 42) (const_int 106)\n+\t\t     (const_int 43) (const_int 107)\n+\t\t     (const_int 44) (const_int 108)\n+\t\t     (const_int 45) (const_int 109)\n+\t\t     (const_int 46) (const_int 110)\n+\t\t     (const_int 47) (const_int 111)\n+\t\t     (const_int 56) (const_int 120)\n+\t\t     (const_int 57) (const_int 121)\n+\t\t     (const_int 58) (const_int 122)\n+\t\t     (const_int 59) (const_int 123)\n+\t\t     (const_int 60) (const_int 124)\n+\t\t     (const_int 61) (const_int 125)\n+\t\t     (const_int 62) (const_int 126)\n+\t\t     (const_int 63) (const_int 127)])))]\n+  \"TARGET_AVX512BW\"\n+  \"vpunpckhbw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"avx2_interleave_highv32qi<mask_name>\"\n+  [(set (match_operand:V32QI 0 \"register_operand\" \"=v\")\n \t(vec_select:V32QI\n \t  (vec_concat:V64QI\n-\t    (match_operand:V32QI 1 \"register_operand\" \"x\")\n-\t    (match_operand:V32QI 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V32QI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V32QI 2 \"nonimmediate_operand\" \"vm\"))\n \t  (parallel [(const_int 8)  (const_int 40)\n \t\t     (const_int 9)  (const_int 41)\n \t\t     (const_int 10) (const_int 42)\n@@ -9762,18 +9806,18 @@\n \t\t     (const_int 29) (const_int 61)\n \t\t     (const_int 30) (const_int 62)\n \t\t     (const_int 31) (const_int 63)])))]\n-  \"TARGET_AVX2\"\n-  \"vpunpckhbw\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"TARGET_AVX2 && <mask_avx512vl_condition>\"\n+  \"vpunpckhbw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"<mask_prefix>\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_insn \"vec_interleave_highv16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x\")\n+(define_insn \"vec_interleave_highv16qi<mask_name>\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,v\")\n \t(vec_select:V16QI\n \t  (vec_concat:V32QI\n-\t    (match_operand:V16QI 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:V16QI 1 \"register_operand\" \"0,v\")\n+\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,vm\"))\n \t  (parallel [(const_int 8)  (const_int 24)\n \t\t     (const_int 9)  (const_int 25)\n \t\t     (const_int 10) (const_int 26)\n@@ -9782,22 +9826,66 @@\n \t\t     (const_int 13) (const_int 29)\n \t\t     (const_int 14) (const_int 30)\n \t\t     (const_int 15) (const_int 31)])))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n   \"@\n    punpckhbw\\t{%2, %0|%0, %2}\n-   vpunpckhbw\\t{%2, %1, %0|%0, %1, %2}\"\n+   vpunpckhbw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,<mask_prefix>\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx2_interleave_lowv32qi\"\n-  [(set (match_operand:V32QI 0 \"register_operand\" \"=x\")\n+(define_insn \"avx512bw_interleave_lowv64qi<mask_name>\"\n+  [(set (match_operand:V64QI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V64QI\n+\t  (vec_concat:V128QI\n+\t    (match_operand:V64QI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V64QI 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(const_int 0) (const_int 64)\n+\t\t     (const_int 1) (const_int 65)\n+\t\t     (const_int 2) (const_int 66)\n+\t\t     (const_int 3) (const_int 67)\n+\t\t     (const_int 4) (const_int 68)\n+\t\t     (const_int 5) (const_int 69)\n+\t\t     (const_int 6) (const_int 70)\n+\t\t     (const_int 7) (const_int 71)\n+\t\t     (const_int 16) (const_int 80)\n+\t\t     (const_int 17) (const_int 81)\n+\t\t     (const_int 18) (const_int 82)\n+\t\t     (const_int 19) (const_int 83)\n+\t\t     (const_int 20) (const_int 84)\n+\t\t     (const_int 21) (const_int 85)\n+\t\t     (const_int 22) (const_int 86)\n+\t\t     (const_int 23) (const_int 87)\n+\t\t     (const_int 32) (const_int 96)\n+\t\t     (const_int 33) (const_int 97)\n+\t\t     (const_int 34) (const_int 98)\n+\t\t     (const_int 35) (const_int 99)\n+\t\t     (const_int 36) (const_int 100)\n+\t\t     (const_int 37) (const_int 101)\n+\t\t     (const_int 38) (const_int 102)\n+\t\t     (const_int 39) (const_int 103)\n+\t\t     (const_int 48) (const_int 112)\n+\t\t     (const_int 49) (const_int 113)\n+\t\t     (const_int 50) (const_int 114)\n+\t\t     (const_int 51) (const_int 115)\n+\t\t     (const_int 52) (const_int 116)\n+\t\t     (const_int 53) (const_int 117)\n+\t\t     (const_int 54) (const_int 118)\n+\t\t     (const_int 55) (const_int 119)])))]\n+  \"TARGET_AVX512BW\"\n+  \"vpunpcklbw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"avx2_interleave_lowv32qi<mask_name>\"\n+  [(set (match_operand:V32QI 0 \"register_operand\" \"=v\")\n \t(vec_select:V32QI\n \t  (vec_concat:V64QI\n-\t    (match_operand:V32QI 1 \"register_operand\" \"x\")\n-\t    (match_operand:V32QI 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V32QI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V32QI 2 \"nonimmediate_operand\" \"vm\"))\n \t  (parallel [(const_int 0) (const_int 32)\n \t\t     (const_int 1) (const_int 33)\n \t\t     (const_int 2) (const_int 34)\n@@ -9814,18 +9902,18 @@\n \t\t     (const_int 21) (const_int 53)\n \t\t     (const_int 22) (const_int 54)\n \t\t     (const_int 23) (const_int 55)])))]\n-  \"TARGET_AVX2\"\n-  \"vpunpcklbw\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"TARGET_AVX2 && <mask_avx512vl_condition> && <mask_avx512bw_condition>\"\n+  \"vpunpcklbw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_insn \"vec_interleave_lowv16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,x\")\n+(define_insn \"vec_interleave_lowv16qi<mask_name>\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=x,v\")\n \t(vec_select:V16QI\n \t  (vec_concat:V32QI\n-\t    (match_operand:V16QI 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:V16QI 1 \"register_operand\" \"0,v\")\n+\t    (match_operand:V16QI 2 \"nonimmediate_operand\" \"xm,vm\"))\n \t  (parallel [(const_int 0) (const_int 16)\n \t\t     (const_int 1) (const_int 17)\n \t\t     (const_int 2) (const_int 18)\n@@ -9834,22 +9922,50 @@\n \t\t     (const_int 5) (const_int 21)\n \t\t     (const_int 6) (const_int 22)\n \t\t     (const_int 7) (const_int 23)])))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && <mask_avx512vl_condition> && <mask_avx512bw_condition>\"\n   \"@\n    punpcklbw\\t{%2, %0|%0, %2}\n-   vpunpcklbw\\t{%2, %1, %0|%0, %1, %2}\"\n+   vpunpcklbw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1,*\")\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx2_interleave_highv16hi\"\n-  [(set (match_operand:V16HI 0 \"register_operand\" \"=x\")\n+(define_insn \"avx512bw_interleave_highv32hi<mask_name>\"\n+  [(set (match_operand:V32HI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V32HI\n+\t  (vec_concat:V64HI\n+\t    (match_operand:V32HI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V32HI 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(const_int 4) (const_int 36)\n+\t\t     (const_int 5) (const_int 37)\n+\t\t     (const_int 6) (const_int 38)\n+\t\t     (const_int 7) (const_int 39)\n+\t\t     (const_int 12) (const_int 44)\n+\t\t     (const_int 13) (const_int 45)\n+\t\t     (const_int 14) (const_int 46)\n+\t\t     (const_int 15) (const_int 47)\n+\t\t     (const_int 20) (const_int 52)\n+\t\t     (const_int 21) (const_int 53)\n+\t\t     (const_int 22) (const_int 54)\n+\t\t     (const_int 23) (const_int 55)\n+\t\t     (const_int 28) (const_int 60)\n+\t\t     (const_int 29) (const_int 61)\n+\t\t     (const_int 30) (const_int 62)\n+\t\t     (const_int 31) (const_int 63)])))]\n+  \"TARGET_AVX512BW\"\n+  \"vpunpckhwd\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"avx2_interleave_highv16hi<mask_name>\"\n+  [(set (match_operand:V16HI 0 \"register_operand\" \"=v\")\n \t(vec_select:V16HI\n \t  (vec_concat:V32HI\n-\t    (match_operand:V16HI 1 \"register_operand\" \"x\")\n-\t    (match_operand:V16HI 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V16HI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V16HI 2 \"nonimmediate_operand\" \"vm\"))\n \t  (parallel [(const_int 4) (const_int 20)\n \t\t     (const_int 5) (const_int 21)\n \t\t     (const_int 6) (const_int 22)\n@@ -9858,38 +9974,66 @@\n \t\t     (const_int 13) (const_int 29)\n \t\t     (const_int 14) (const_int 30)\n \t\t     (const_int 15) (const_int 31)])))]\n-  \"TARGET_AVX2\"\n-  \"vpunpckhwd\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"TARGET_AVX2 && <mask_avx512vl_condition> && <mask_avx512bw_condition>\"\n+  \"vpunpckhwd\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_insn \"vec_interleave_highv8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n+(define_insn \"vec_interleave_highv8hi<mask_name>\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,v\")\n \t(vec_select:V8HI\n \t  (vec_concat:V16HI\n-\t    (match_operand:V8HI 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:V8HI 1 \"register_operand\" \"0,v\")\n+\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,vm\"))\n \t  (parallel [(const_int 4) (const_int 12)\n \t\t     (const_int 5) (const_int 13)\n \t\t     (const_int 6) (const_int 14)\n \t\t     (const_int 7) (const_int 15)])))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && <mask_avx512vl_condition> && <mask_avx512bw_condition>\"\n   \"@\n    punpckhwd\\t{%2, %0|%0, %2}\n-   vpunpckhwd\\t{%2, %1, %0|%0, %1, %2}\"\n+   vpunpckhwd\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx2_interleave_lowv16hi\"\n-  [(set (match_operand:V16HI 0 \"register_operand\" \"=x\")\n+(define_insn \"<mask_codefor>avx512bw_interleave_lowv32hi<mask_name>\"\n+  [(set (match_operand:V32HI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V32HI\n+\t  (vec_concat:V64HI\n+\t    (match_operand:V32HI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V32HI 2 \"nonimmediate_operand\" \"vm\"))\n+\t  (parallel [(const_int 0) (const_int 32)\n+\t\t     (const_int 1) (const_int 33)\n+\t\t     (const_int 2) (const_int 34)\n+\t\t     (const_int 3) (const_int 35)\n+\t\t     (const_int 8) (const_int 40)\n+\t\t     (const_int 9) (const_int 41)\n+\t\t     (const_int 10) (const_int 42)\n+\t\t     (const_int 11) (const_int 43)\n+\t\t     (const_int 16) (const_int 48)\n+\t\t     (const_int 17) (const_int 49)\n+\t\t     (const_int 18) (const_int 50)\n+\t\t     (const_int 19) (const_int 51)\n+\t\t     (const_int 24) (const_int 56)\n+\t\t     (const_int 25) (const_int 57)\n+\t\t     (const_int 26) (const_int 58)\n+\t\t     (const_int 27) (const_int 59)])))]\n+  \"TARGET_AVX512BW\"\n+  \"vpunpcklwd\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n+(define_insn \"avx2_interleave_lowv16hi<mask_name>\"\n+  [(set (match_operand:V16HI 0 \"register_operand\" \"=v\")\n \t(vec_select:V16HI\n \t  (vec_concat:V32HI\n-\t    (match_operand:V16HI 1 \"register_operand\" \"x\")\n-\t    (match_operand:V16HI 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V16HI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V16HI 2 \"nonimmediate_operand\" \"vm\"))\n \t  (parallel [(const_int 0) (const_int 16)\n \t\t     (const_int 1) (const_int 17)\n \t\t     (const_int 2) (const_int 18)\n@@ -9898,46 +10042,46 @@\n \t\t     (const_int 9) (const_int 25)\n \t\t     (const_int 10) (const_int 26)\n \t\t     (const_int 11) (const_int 27)])))]\n-  \"TARGET_AVX2\"\n-  \"vpunpcklwd\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"TARGET_AVX2 && <mask_avx512vl_condition> && <mask_avx512bw_condition>\"\n+  \"vpunpcklwd\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_insn \"vec_interleave_lowv8hi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n+(define_insn \"vec_interleave_lowv8hi<mask_name>\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,v\")\n \t(vec_select:V8HI\n \t  (vec_concat:V16HI\n-\t    (match_operand:V8HI 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:V8HI 1 \"register_operand\" \"0,v\")\n+\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,vm\"))\n \t  (parallel [(const_int 0) (const_int 8)\n \t\t     (const_int 1) (const_int 9)\n \t\t     (const_int 2) (const_int 10)\n \t\t     (const_int 3) (const_int 11)])))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && <mask_avx512vl_condition> && <mask_avx512bw_condition>\"\n   \"@\n    punpcklwd\\t{%2, %0|%0, %2}\n-   vpunpcklwd\\t{%2, %1, %0|%0, %1, %2}\"\n+   vpunpcklwd\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx2_interleave_highv8si\"\n-  [(set (match_operand:V8SI 0 \"register_operand\" \"=x\")\n+(define_insn \"avx2_interleave_highv8si<mask_name>\"\n+  [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n \t(vec_select:V8SI\n \t  (vec_concat:V16SI\n-\t    (match_operand:V8SI 1 \"register_operand\" \"x\")\n-\t    (match_operand:V8SI 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V8SI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V8SI 2 \"nonimmediate_operand\" \"vm\"))\n \t  (parallel [(const_int 2) (const_int 10)\n \t\t     (const_int 3) (const_int 11)\n \t\t     (const_int 6) (const_int 14)\n \t\t     (const_int 7) (const_int 15)])))]\n-  \"TARGET_AVX2\"\n-  \"vpunpckhdq\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"TARGET_AVX2 && <mask_avx512vl_condition>\"\n+  \"vpunpckhdq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"<mask_codefor>avx512f_interleave_highv16si<mask_name>\"\n@@ -9961,38 +10105,38 @@\n    (set_attr \"mode\" \"XI\")])\n \n \n-(define_insn \"vec_interleave_highv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n+(define_insn \"vec_interleave_highv4si<mask_name>\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,v\")\n \t(vec_select:V4SI\n \t  (vec_concat:V8SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:V4SI 1 \"register_operand\" \"0,v\")\n+\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,vm\"))\n \t  (parallel [(const_int 2) (const_int 6)\n \t\t     (const_int 3) (const_int 7)])))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n   \"@\n    punpckhdq\\t{%2, %0|%0, %2}\n-   vpunpckhdq\\t{%2, %1, %0|%0, %1, %2}\"\n+   vpunpckhdq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx2_interleave_lowv8si\"\n-  [(set (match_operand:V8SI 0 \"register_operand\" \"=x\")\n+(define_insn \"avx2_interleave_lowv8si<mask_name>\"\n+  [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n \t(vec_select:V8SI\n \t  (vec_concat:V16SI\n-\t    (match_operand:V8SI 1 \"register_operand\" \"x\")\n-\t    (match_operand:V8SI 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V8SI 1 \"register_operand\" \"v\")\n+\t    (match_operand:V8SI 2 \"nonimmediate_operand\" \"vm\"))\n \t  (parallel [(const_int 0) (const_int 8)\n \t\t     (const_int 1) (const_int 9)\n \t\t     (const_int 4) (const_int 12)\n \t\t     (const_int 5) (const_int 13)])))]\n-  \"TARGET_AVX2\"\n-  \"vpunpckldq\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"TARGET_AVX2 && <mask_avx512vl_condition>\"\n+  \"vpunpckldq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"maybe_evex\")\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"<mask_codefor>avx512f_interleave_lowv16si<mask_name>\"\n@@ -10015,18 +10159,18 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"XI\")])\n \n-(define_insn \"vec_interleave_lowv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,x\")\n+(define_insn \"vec_interleave_lowv4si<mask_name>\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=x,v\")\n \t(vec_select:V4SI\n \t  (vec_concat:V8SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"0,x\")\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,xm\"))\n+\t    (match_operand:V4SI 1 \"register_operand\" \"0,v\")\n+\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,vm\"))\n \t  (parallel [(const_int 0) (const_int 4)\n \t\t     (const_int 1) (const_int 5)])))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && <mask_avx512vl_condition>\"\n   \"@\n    punpckldq\\t{%2, %0|%0, %2}\n-   vpunpckldq\\t{%2, %1, %0|%0, %1, %2}\"\n+   vpunpckldq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1,*\")"}]}