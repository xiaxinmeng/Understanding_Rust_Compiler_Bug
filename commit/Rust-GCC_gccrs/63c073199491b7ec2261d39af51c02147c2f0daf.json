{"sha": "63c073199491b7ec2261d39af51c02147c2f0daf", "node_id": "C_kwDOANBUbNoAKDYzYzA3MzE5OTQ5MWI3ZWMyMjYxZDM5YWY1MWMwMjE0N2MyZjBkYWY", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-06-15T21:44:14Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-06-15T21:44:14Z"}, "message": "analyzer: fix up paths for inlining (PR analyzer/105962)\n\n-fanalyzer runs late compared to other code analysis tools, in that in\nruns on the partially-optimized gimple-ssa representation.  I chose this\npoint to run in the hope of easy integration with LTO.\n\nAs PR analyzer/105962 notes, this means that function inlining can occur\nbefore the -fanalyzer \"sees\" the user's code.  For example given:\n\nvoid foo (void *p)\n{\n  __builtin_free (p);\n}\n\nvoid bar (void *q)\n{\n  foo (q);\n  foo (q);\n}\n\nBelow -O2, -fanalyzer shows the calls and returns:\n\ninline-1.c: In function \u2018foo\u2019:\ninline-1.c:3:3: warning: double-\u2018free\u2019 of \u2018p\u2019 [CWE-415] [-Wanalyzer-double-free]\n    3 |   __builtin_free (p);\n      |   ^~~~~~~~~~~~~~~~~~\n  \u2018bar\u2019: events 1-2\n    |\n    |    6 | void bar (void *q)\n    |      |      ^~~\n    |      |      |\n    |      |      (1) entry to \u2018bar\u2019\n    |    7 | {\n    |    8 |   foo (q);\n    |      |   ~~~~~~~\n    |      |   |\n    |      |   (2) calling \u2018foo\u2019 from \u2018bar\u2019\n    |\n    +--> \u2018foo\u2019: events 3-4\n           |\n           |    1 | void foo (void *p)\n           |      |      ^~~\n           |      |      |\n           |      |      (3) entry to \u2018foo\u2019\n           |    2 | {\n           |    3 |   __builtin_free (p);\n           |      |   ~~~~~~~~~~~~~~~~~~\n           |      |   |\n           |      |   (4) first \u2018free\u2019 here\n           |\n    <------+\n    |\n  \u2018bar\u2019: events 5-6\n    |\n    |    8 |   foo (q);\n    |      |   ^~~~~~~\n    |      |   |\n    |      |   (5) returning to \u2018bar\u2019 from \u2018foo\u2019\n    |    9 |   foo (q);\n    |      |   ~~~~~~~\n    |      |   |\n    |      |   (6) passing freed pointer \u2018q\u2019 in call to \u2018foo\u2019 from \u2018bar\u2019\n    |\n    +--> \u2018foo\u2019: events 7-8\n           |\n           |    1 | void foo (void *p)\n           |      |      ^~~\n           |      |      |\n           |      |      (7) entry to \u2018foo\u2019\n           |    2 | {\n           |    3 |   __builtin_free (p);\n           |      |   ~~~~~~~~~~~~~~~~~~\n           |      |   |\n           |      |   (8) second \u2018free\u2019 here; first \u2018free\u2019 was at (4)\n           |\n\nbut at -O2, -fanalyzer \"sees\" this gimple:\n\nvoid bar (void * q)\n{\n  <bb 2> [local count: 1073741824]:\n  __builtin_free (q_2(D));\n  __builtin_free (q_2(D));\n  return;\n}\n\nwhere \"foo\" has been inlined away, leading to this unhelpful output:\n\nIn function \u2018foo\u2019,\n    inlined from \u2018bar\u2019 at inline-1.c:9:3:\ninline-1.c:3:3: warning: double-\u2018free\u2019 of \u2018q\u2019 [CWE-415] [-Wanalyzer-double-free]\n    3 |   __builtin_free (p);\n      |   ^~~~~~~~~~~~~~~~~~\n  \u2018bar\u2019: events 1-2\n    |\n    |    3 |   __builtin_free (p);\n    |      |   ^~~~~~~~~~~~~~~~~~\n    |      |   |\n    |      |   (1) first \u2018free\u2019 here\n    |      |   (2) second \u2018free\u2019 here; first \u2018free\u2019 was at (1)\n\nwhere the stack frame information in the execution path suggests that these\nevents are happening in \"bar\", in the top stack frame.\n\nThis is what the analyzer sees, but I find it hard to decipher such\noutput.  Hence, as a workaround for the fact that -fanalyzer runs so\nlate, this patch attempts to reconstruct the \"true\" stack frame\ninformation, and to inject events showing inline calls, based on the\ninlining chain information recorded in the location_t values for the events.\n\nDoing so leads to this output at -O2 on the above example (with\n-fdiagnostics-show-path-depths):\n\nIn function \u2018foo\u2019,\n    inlined from \u2018bar\u2019 at inline-1.c:9:3:\ninline-1.c:3:3: warning: double-\u2018free\u2019 of \u2018q\u2019 [CWE-415] [-Wanalyzer-double-free]\n    3 |   __builtin_free (p);\n      |   ^~~~~~~~~~~~~~~~~~\n  \u2018bar\u2019: events 1-2 (depth 1)\n    |\n    |    6 | void bar (void *q)\n    |      |      ^~~\n    |      |      |\n    |      |      (1) entry to \u2018bar\u2019\n    |    7 | {\n    |    8 |   foo (q);\n    |      |   ~\n    |      |   |\n    |      |   (2) inlined call to \u2018foo\u2019 from \u2018bar\u2019\n    |\n    +--> \u2018foo\u2019: event 3 (depth 2)\n           |\n           |    3 |   __builtin_free (p);\n           |      |   ^~~~~~~~~~~~~~~~~~\n           |      |   |\n           |      |   (3) first \u2018free\u2019 here\n           |\n    <------+\n    |\n  \u2018bar\u2019: event 4 (depth 1)\n    |\n    |    9 |   foo (q);\n    |      |   ^\n    |      |   |\n    |      |   (4) inlined call to \u2018foo\u2019 from \u2018bar\u2019\n    |\n    +--> \u2018foo\u2019: event 5 (depth 2)\n           |\n           |    3 |   __builtin_free (p);\n           |      |   ^~~~~~~~~~~~~~~~~~\n           |      |   |\n           |      |   (5) second \u2018free\u2019 here; first \u2018free\u2019 was at (3)\n           |\n\nreconstructing the calls and returns.\n\nThe patch also adds a new option, -fno-analyzer-undo-inlining, which can\nbe used to disable this reconstruction, restoring the output listed\nabove (this time with -fdiagnostics-show-path-depths):\n\nIn function \u2018foo\u2019,\n    inlined from \u2018bar\u2019 at inline-1.c:9:3:\ninline-1.c:3:3: warning: double-\u2018free\u2019 of \u2018q\u2019 [CWE-415] [-Wanalyzer-double-free]\n    3 |   __builtin_free (p);\n      |   ^~~~~~~~~~~~~~~~~~\n  \u2018bar\u2019: events 1-2 (depth 1)\n    |\n    |    3 |   __builtin_free (p);\n    |      |   ^~~~~~~~~~~~~~~~~~\n    |      |   |\n    |      |   (1) first \u2018free\u2019 here\n    |      |   (2) second \u2018free\u2019 here; first \u2018free\u2019 was at (1)\n    |\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/105962\n\t* analyzer.opt (fanalyzer-undo-inlining): New option.\n\t* checker-path.cc: Include \"diagnostic-core.h\" and\n\t\"inlining-iterator.h\".\n\t(event_kind_to_string): Handle EK_INLINED_CALL.\n\t(class inlining_info): New class.\n\t(checker_event::checker_event): Move here from checker-path.h.\n\tStore original fndecl and depth, and calculate effective fndecl\n\tand depth based on inlining information.\n\t(checker_event::dump): Emit original depth as well as effective\n\tdepth when they differ; likewise for fndecl.\n\t(region_creation_event::get_desc): Use m_effective_fndecl.\n\t(inlined_call_event::get_desc): New.\n\t(inlined_call_event::get_meaning): New.\n\t(checker_path::inject_any_inlined_call_events): New.\n\t* checker-path.h (enum event_kind): Add EK_INLINED_CALL.\n\t(checker_event::checker_event): Make protected, and move\n\tdefinition to checker-path.cc.\n\t(checker_event::get_fndecl): Use effective fndecl.\n\t(checker_event::get_stack_depth): Use effective stack depth.\n\t(checker_event::get_logical_location): Use effective stack depth.\n\t(checker_event::get_original_stack_depth): New.\n\t(checker_event::m_fndecl): Rename to...\n\t(checker_event::m_original_fndecl): ...this.\n\t(checker_event::m_depth): Rename to...\n\t(checker_event::m_original_depth): ...this.\n\t(checker_event::m_effective_fndecl): New field.\n\t(checker_event::m_effective_depth): New field.\n\t(class inlined_call_event): New checker_event subclass.\n\t(checker_path::inject_any_inlined_call_events): New decl.\n\t* diagnostic-manager.cc: Include \"inlining-iterator.h\".\n\t(diagnostic_manager::emit_saved_diagnostic): Call\n\tchecker_path::inject_any_inlined_call_events.\n\t(diagnostic_manager::prune_for_sm_diagnostic): Handle\n\tEK_INLINED_CALL.\n\t* engine.cc (tainted_args_function_custom_event::get_desc): Use\n\teffective fndecl.\n\t* inlining-iterator.h: New file.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/105962\n\t* gcc.dg/analyzer/inlining-1-multiline.c: New test.\n\t* gcc.dg/analyzer/inlining-1-no-undo.c: New test.\n\t* gcc.dg/analyzer/inlining-1.c: New test.\n\t* gcc.dg/analyzer/inlining-2-multiline.c: New test.\n\t* gcc.dg/analyzer/inlining-2.c: New test.\n\t* gcc.dg/analyzer/inlining-3-multiline.c: New test.\n\t* gcc.dg/analyzer/inlining-3.c: New test.\n\t* gcc.dg/analyzer/inlining-4-multiline.c: New test.\n\t* gcc.dg/analyzer/inlining-4.c: New test.\n\t* gcc.dg/analyzer/inlining-5-multiline.c: New test.\n\t* gcc.dg/analyzer/inlining-5.c: New test.\n\t* gcc.dg/analyzer/inlining-6-multiline.c: New test.\n\t* gcc.dg/analyzer/inlining-6.c: New test.\n\t* gcc.dg/analyzer/inlining-7-multiline.c: New test.\n\t* gcc.dg/analyzer/inlining-7.c: New test.\n\ngcc/ChangeLog:\n\tPR analyzer/105962\n\t* doc/invoke.texi: Add -fno-analyzer-undo-inlining.\n\t* tree-diagnostic-path.cc (default_tree_diagnostic_path_printer):\n\tExtend -fdiagnostics-path-format=separate-events so that with\n\t-fdiagnostics-show-path-depths it prints fndecls as well as stack\n\tdepths.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "6a8c8e961f0c48d3d784883a71dbe04ce10102db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a8c8e961f0c48d3d784883a71dbe04ce10102db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63c073199491b7ec2261d39af51c02147c2f0daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63c073199491b7ec2261d39af51c02147c2f0daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63c073199491b7ec2261d39af51c02147c2f0daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63c073199491b7ec2261d39af51c02147c2f0daf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b06b84dbca5a11615da7193d74abfb74beaaf7ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06b84dbca5a11615da7193d74abfb74beaaf7ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b06b84dbca5a11615da7193d74abfb74beaaf7ac"}], "stats": {"total": 1187, "additions": 1165, "deletions": 22}, "files": [{"sha": "4aea52d3a877c23d56b8e4f9d6ae7c6baef9c01d", "filename": "gcc/analyzer/analyzer.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fanalyzer%2Fanalyzer.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fanalyzer%2Fanalyzer.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.opt?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -206,6 +206,10 @@ fanalyzer-call-summaries\n Common Var(flag_analyzer_call_summaries) Init(0)\n Approximate the effect of function calls to simplify analysis.\n \n+fanalyzer-undo-inlining\n+Common Var(flag_analyzer_undo_inlining) Init(1)\n+Try to reconstruct function calls and returns after inlining.\n+\n fanalyzer-verbose-edges\n Common Var(flag_analyzer_verbose_edges) Init(0)\n Emit more verbose descriptions of control flow in diagnostics."}, {"sha": "0133dc94137e913d31dcf7152ad849ed8e4772d1", "filename": "gcc/analyzer/checker-path.cc", "status": "modified", "additions": 259, "deletions": 5, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fanalyzer%2Fchecker-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fanalyzer%2Fchecker-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.cc?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"function.h\"\n #include \"basic-block.h\"\n #include \"gimple.h\"\n+#include \"diagnostic-core.h\"\n #include \"gimple-pretty-print.h\"\n #include \"fold-const.h\"\n #include \"function.h\"\n@@ -54,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"analyzer/program-state.h\"\n #include \"analyzer/checker-path.h\"\n #include \"gimple-iterator.h\"\n+#include \"inlining-iterator.h\"\n #include \"analyzer/supergraph.h\"\n #include \"analyzer/pending-diagnostic.h\"\n #include \"analyzer/diagnostic-manager.h\"\n@@ -99,6 +101,8 @@ event_kind_to_string (enum event_kind ek)\n       return \"EK_START_CONSOLIDATED_CFG_EDGES\";\n     case EK_END_CONSOLIDATED_CFG_EDGES:\n       return \"EK_END_CONSOLIDATED_CFG_EDGES\";\n+    case EK_INLINED_CALL:\n+      return \"EK_INLINED_CALL\";\n     case EK_SETJMP:\n       return \"EK_SETJMP\";\n     case EK_REWIND_FROM_LONGJMP:\n@@ -110,8 +114,71 @@ event_kind_to_string (enum event_kind ek)\n     }\n }\n \n+/* A class for fixing up fndecls and stack depths in checker_event, based\n+   on inlining records.\n+\n+   The early inliner runs before the analyzer, which can lead to confusing\n+   output.\n+\n+   Tne base fndecl and depth within a checker_event are from call strings\n+   in program_points, which reflect the call strings after inlining.\n+   This class lets us offset the depth and fix up the reported fndecl and\n+   stack depth to better reflect the user's original code.  */\n+\n+class inlining_info\n+{\n+public:\n+  inlining_info (location_t loc)\n+  {\n+    inlining_iterator iter (loc);\n+    m_inner_fndecl = iter.get_fndecl ();\n+    int num_frames = 0;\n+    while (!iter.done_p ())\n+      {\n+\tm_outer_fndecl = iter.get_fndecl ();\n+\tnum_frames++;\n+\titer.next ();\n+      }\n+    if (num_frames > 1)\n+      m_extra_frames = num_frames - 1;\n+    else\n+      m_extra_frames = 0;\n+  }\n+\n+  tree get_inner_fndecl () const { return m_inner_fndecl; }\n+  int get_extra_frames () const { return m_extra_frames; }\n+\n+private:\n+  tree m_outer_fndecl;\n+  tree m_inner_fndecl;\n+  int m_extra_frames;\n+};\n+\n /* class checker_event : public diagnostic_event.  */\n \n+/* checker_event's ctor.  */\n+\n+checker_event::checker_event (enum event_kind kind,\n+\t\t\t      location_t loc, tree fndecl, int depth)\n+: m_kind (kind), m_loc (loc),\n+  m_original_fndecl (fndecl), m_effective_fndecl (fndecl),\n+  m_original_depth (depth), m_effective_depth (depth),\n+  m_pending_diagnostic (NULL), m_emission_id (),\n+  m_logical_loc (fndecl)\n+{\n+  /* Update effective fndecl and depth if inlining has been recorded.  */\n+  if (flag_analyzer_undo_inlining)\n+    {\n+      inlining_info info (loc);\n+      if (info.get_inner_fndecl ())\n+\t{\n+\t  m_effective_fndecl = info.get_inner_fndecl ();\n+\t  m_effective_depth += info.get_extra_frames ();\n+\t  m_logical_loc = tree_logical_location (m_effective_fndecl);\n+\t}\n+    }\n+}\n+\n /* No-op implementation of diagnostic_event::get_meaning vfunc for\n    checker_event: checker events have no meaning by default.  */\n \n@@ -127,11 +194,21 @@ void\n checker_event::dump (pretty_printer *pp) const\n {\n   label_text event_desc (get_desc (false));\n-  pp_printf (pp, \"\\\"%s\\\" (depth %i, m_loc=%x)\",\n-\t     event_desc.m_buffer,\n-\t     get_stack_depth (),\n-\t     get_location ());\n+  pp_printf (pp, \"\\\"%s\\\" (depth %i\",\n+\t     event_desc.m_buffer, m_effective_depth);\n   event_desc.maybe_free ();\n+\n+  if (m_effective_depth != m_original_depth)\n+    pp_printf (pp, \" corrected from %i\",\n+\t       m_original_depth);\n+  if (m_effective_fndecl)\n+    {\n+      pp_printf (pp, \", fndecl %qE\", m_effective_fndecl);\n+      if (m_effective_fndecl != m_original_fndecl)\n+\tpp_printf (pp, \" corrected from %qE\", m_original_fndecl);\n+    }\n+  pp_printf (pp, \", m_loc=%x)\",\n+\t     get_location ());\n }\n \n /* Hook for being notified when this event has its final id EMISSION_ID\n@@ -248,7 +325,7 @@ region_creation_event::get_desc (bool) const\n label_text\n function_entry_event::get_desc (bool can_colorize) const\n {\n-  return make_label_text (can_colorize, \"entry to %qE\", m_fndecl);\n+  return make_label_text (can_colorize, \"entry to %qE\", m_effective_fndecl);\n }\n \n /* Implementation of diagnostic_event::get_meaning vfunc for\n@@ -867,6 +944,26 @@ start_consolidated_cfg_edges_event::get_meaning () const\n \t\t  (m_edge_sense ? PROPERTY_true : PROPERTY_false));\n }\n \n+/* class inlined_call_event : public checker_event.  */\n+\n+label_text\n+inlined_call_event::get_desc (bool can_colorize) const\n+{\n+  return make_label_text (can_colorize,\n+\t\t\t  \"inlined call to %qE from %qE\",\n+\t\t\t  m_apparent_callee_fndecl,\n+\t\t\t  m_apparent_caller_fndecl);\n+}\n+\n+/* Implementation of diagnostic_event::get_meaning vfunc for\n+   reconstructed inlined function calls.  */\n+\n+diagnostic_event::meaning\n+inlined_call_event::get_meaning () const\n+{\n+  return meaning (VERB_call, NOUN_function);\n+}\n+\n /* class setjmp_event : public checker_event.  */\n \n /* Implementation of diagnostic_event::get_desc vfunc for\n@@ -1180,6 +1277,163 @@ checker_path::cfg_edge_pair_at_p (unsigned idx) const\n \t  && m_events[idx + 1]->m_kind == EK_END_CFG_EDGE);\n }\n \n+/* Consider a call from \"outer\" to \"middle\" which calls \"inner\",\n+   where \"inner\" and \"middle\" have been inlined into \"outer\".\n+\n+   We expect the stmt locations for the inlined stmts to have a\n+   chain like:\n+\n+     [{fndecl: inner},\n+      {fndecl: middle, callsite: within middle to inner},\n+      {fndecl: outer, callsite: without outer to middle}]\n+\n+   The location for the stmt will already be fixed up to reflect\n+   the two extra frames, so that we have e.g. this as input\n+   (for gcc.dg/analyzer/inlining-4.c):\n+\n+    before[0]:\n+      EK_FUNCTION_ENTRY \"entry to \u2018outer\u2019\"\n+      (depth 1, fndecl \u2018outer\u2019, m_loc=511c4)\n+    before[1]:\n+      EK_START_CFG_EDGE \"following \u2018true\u2019 branch (when \u2018flag != 0\u2019)...\"\n+      (depth 3 corrected from 1,\n+       fndecl \u2018inner\u2019 corrected from \u2018outer\u2019, m_loc=8000000f)\n+    before[2]:\n+      EK_END_CFG_EDGE \"...to here\"\n+      (depth 1, fndecl \u2018outer\u2019, m_loc=0)\n+    before[3]:\n+      EK_WARNING \"here (\u2018<unknown>\u2019 is in state \u2018null\u2019)\"\n+      (depth 1, fndecl \u2018outer\u2019, m_loc=80000004)\n+\n+   We want to add inlined_call_events showing the calls, so that\n+   the above becomes:\n+\n+    after[0]:\n+      EK_FUNCTION_ENTRY \"entry to \u2018outer\u2019\"\n+      (depth 1, fndecl \u2018outer\u2019, m_loc=511c4)\n+    after[1]:\n+      EK_INLINED_CALL \"inlined call to \u2018middle\u2019 from \u2018outer\u2019\"\n+      (depth 1, fndecl \u2018outer\u2019, m_loc=53300)\n+    after[2]:\n+      EK_INLINED_CALL \"inlined call to \u2018inner\u2019 from \u2018middle\u2019\"\n+      (depth 2, fndecl \u2018middle\u2019, m_loc=4d2e0)\n+    after[3]:\n+      EK_START_CFG_EDGE \"following \u2018true\u2019 branch (when \u2018flag != 0\u2019)...\"\n+      (depth 3 corrected from 1,\n+       fndecl \u2018inner\u2019 corrected from \u2018outer\u2019, m_loc=8000000f)\n+    after[4]: EK_END_CFG_EDGE \"...to here\"\n+      (depth 1, fndecl \u2018outer\u2019, m_loc=0)\n+    after[5]: EK_WARNING \"here (\u2018<unknown>\u2019 is in state \u2018null\u2019)\"\n+      (depth 1, fndecl \u2018outer\u2019, m_loc=80000004)\n+\n+    where we've added events between before[0] and before[1] to show\n+    the inlined calls leading to the effective stack depths, making\n+    the generated path much easier for a user to read.\n+\n+    Note how in the above we have a branch (before[1] to before[2])\n+    where the locations were originally in different functions.\n+    Hence we have to add these events quite late when generating\n+    checker_path.  */\n+\n+void\n+checker_path::inject_any_inlined_call_events (logger *logger)\n+{\n+  LOG_SCOPE (logger);\n+\n+  if (!flag_analyzer_undo_inlining)\n+    return;\n+\n+  /* Build a copy of m_events with the new events inserted.  */\n+  auto_vec<checker_event *> updated_events;\n+\n+  maybe_log (logger, \"before\");\n+\n+  hash_set<tree> blocks_in_prev_event;\n+\n+  for (unsigned ev_idx = 0; ev_idx < m_events.length (); ev_idx++)\n+    {\n+      checker_event *curr_event = m_events[ev_idx];\n+      location_t curr_loc = curr_event->get_location ();\n+      hash_set<tree> blocks_in_curr_event;\n+\n+      if (logger)\n+\t{\n+\t  logger->start_log_line ();\n+\t  logger->log_partial (\"event[%i]: %s \", ev_idx,\n+\t\t\t       event_kind_to_string (curr_event->m_kind));\n+\t  curr_event->dump (logger->get_printer ());\n+\t  logger->end_log_line ();\n+\t  for (inlining_iterator iter (curr_event->get_location ());\n+\t       !iter.done_p (); iter.next ())\n+\t    {\n+\t      logger->start_log_line ();\n+\t      logger->log_partial (\"  %qE (%p), fndecl: %qE, callsite: 0x%x\",\n+\t\t\t\t   iter.get_block (), iter.get_block (),\n+\t\t\t\t   iter.get_fndecl (), iter.get_callsite ());\n+\t      if (iter.get_callsite ())\n+\t\tdump_location (logger->get_printer (), iter.get_callsite ());\n+\t      logger->end_log_line ();\n+\t    }\n+\t}\n+\n+      /* We want to add events to show inlined calls.\n+\n+\t We want to show changes relative to the previous event, omitting\n+\t the commonality between the inlining chain.\n+\n+\t The chain is ordered from innermost frame to outermost frame;\n+\t we want to walk it backwards to show the calls, so capture it\n+\t in a vec.  */\n+      struct chain_element { tree m_block; tree m_fndecl; };\n+      auto_vec<chain_element> elements;\n+      for (inlining_iterator iter (curr_loc); !iter.done_p (); iter.next ())\n+\t{\n+\t  chain_element ce;\n+\t  ce.m_block = iter.get_block ();\n+\t  ce.m_fndecl = iter.get_fndecl ();\n+\n+\t  if (!blocks_in_prev_event.contains (ce.m_block))\n+\t    elements.safe_push (ce);\n+\t  blocks_in_curr_event.add (ce.m_block);\n+\t}\n+\n+      /* Walk from outermost to innermost.  */\n+      if (elements.length () > 0)\n+\t{\n+\t  int orig_stack_depth = curr_event->get_original_stack_depth ();\n+\t  for (unsigned element_idx = elements.length () - 1; element_idx > 0;\n+\t       element_idx--)\n+\t    {\n+\t      const chain_element &ce = elements[element_idx];\n+\t      int stack_depth_adjustment\n+\t\t= (blocks_in_curr_event.elements () - element_idx) - 1;\n+\t      if (location_t callsite = BLOCK_SOURCE_LOCATION (ce.m_block))\n+\t\tupdated_events.safe_push\n+\t\t  (new inlined_call_event (callsite,\n+\t\t\t\t\t   elements[element_idx - 1].m_fndecl,\n+\t\t\t\t\t   ce.m_fndecl,\n+\t\t\t\t\t   orig_stack_depth,\n+\t\t\t\t\t   stack_depth_adjustment));\n+\t    }\n+\t}\n+\n+      /* Ideally we'd use assignment here:\n+\t   blocks_in_prev_event = blocks_in_curr_event; */\n+      blocks_in_prev_event.empty ();\n+      for (auto iter : blocks_in_curr_event)\n+\tblocks_in_prev_event.add (iter);\n+\n+      /* Add the existing event.  */\n+      updated_events.safe_push (curr_event);\n+    }\n+\n+  /* Replace m_events with updated_events.  */\n+  m_events.truncate (0);\n+  m_events.safe_splice (updated_events);\n+\n+  maybe_log (logger, \" after\");\n+}\n+\n } // namespace ana\n \n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "24decf5ce3d6e50f814f454cd98b6db7ee702cb8", "filename": "gcc/analyzer/checker-path.h", "status": "modified", "additions": 45, "deletions": 13, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fanalyzer%2Fchecker-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fanalyzer%2Fchecker-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.h?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -42,6 +42,7 @@ enum event_kind\n   EK_RETURN_EDGE,\n   EK_START_CONSOLIDATED_CFG_EDGES,\n   EK_END_CONSOLIDATED_CFG_EDGES,\n+  EK_INLINED_CALL,\n   EK_SETJMP,\n   EK_REWIND_FROM_LONGJMP,\n   EK_REWIND_TO_SETJMP,\n@@ -72,6 +73,7 @@ extern const char *event_kind_to_string (enum event_kind ek);\n          return_edge (EK_RETURN_EDGE)\n        start_consolidated_cfg_edges_event (EK_START_CONSOLIDATED_CFG_EDGES)\n        end_consolidated_cfg_edges_event (EK_END_CONSOLIDATED_CFG_EDGES)\n+       inlined_call_event (EK_INLINED_CALL)\n        setjmp_event (EK_SETJMP)\n        rewind_event\n          rewind_from_longjmp_event (EK_REWIND_FROM_LONGJMP)\n@@ -84,22 +86,14 @@ extern const char *event_kind_to_string (enum event_kind ek);\n class checker_event : public diagnostic_event\n {\n public:\n-  checker_event (enum event_kind kind,\n-\t\t location_t loc, tree fndecl, int depth)\n-    : m_kind (kind), m_loc (loc), m_fndecl (fndecl), m_depth (depth),\n-      m_pending_diagnostic (NULL), m_emission_id (),\n-      m_logical_loc (fndecl)\n-  {\n-  }\n-\n   /* Implementation of diagnostic_event.  */\n \n   location_t get_location () const final override { return m_loc; }\n-  tree get_fndecl () const final override { return m_fndecl; }\n-  int get_stack_depth () const final override { return m_depth; }\n+  tree get_fndecl () const final override { return m_effective_fndecl; }\n+  int get_stack_depth () const final override { return m_effective_depth; }\n   const logical_location *get_logical_location () const final override\n   {\n-    if (m_fndecl)\n+    if (m_effective_fndecl)\n       return &m_logical_loc;\n     else\n       return NULL;\n@@ -108,6 +102,8 @@ class checker_event : public diagnostic_event\n \n   /* Additional functionality.  */\n \n+  int get_original_stack_depth () const { return m_original_depth; }\n+\n   virtual void prepare_for_emission (checker_path *,\n \t\t\t\t     pending_diagnostic *pd,\n \t\t\t\t     diagnostic_event_id_t emission_id);\n@@ -125,12 +121,18 @@ class checker_event : public diagnostic_event\n \n   void set_location (location_t loc) { m_loc = loc; }\n \n+protected:\n+  checker_event (enum event_kind kind,\n+\t\t location_t loc, tree fndecl, int depth);\n+\n  public:\n   const enum event_kind m_kind;\n  protected:\n   location_t m_loc;\n-  tree m_fndecl;\n-  int m_depth;\n+  tree m_original_fndecl;\n+  tree m_effective_fndecl;\n+  int m_original_depth;\n+  int m_effective_depth;\n   pending_diagnostic *m_pending_diagnostic;\n   diagnostic_event_id_t m_emission_id; // only set once all pruning has occurred\n   tree_logical_location m_logical_loc;\n@@ -435,6 +437,34 @@ class end_consolidated_cfg_edges_event : public checker_event\n   }\n };\n \n+/* A concrete event subclass for describing an inlined call event\n+   e.g. \"inlined call to 'callee' from 'caller'\".  */\n+\n+class inlined_call_event : public checker_event\n+{\n+public:\n+  inlined_call_event (location_t loc,\n+\t\t      tree apparent_callee_fndecl,\n+\t\t      tree apparent_caller_fndecl,\n+\t\t      int actual_depth,\n+\t\t      int stack_depth_adjustment)\n+  : checker_event (EK_INLINED_CALL, loc,\n+\t\t   apparent_caller_fndecl,\n+\t\t   actual_depth + stack_depth_adjustment),\n+    m_apparent_callee_fndecl (apparent_callee_fndecl),\n+    m_apparent_caller_fndecl (apparent_caller_fndecl)\n+  {\n+    gcc_assert (LOCATION_BLOCK (loc) == NULL);\n+  }\n+\n+  label_text get_desc (bool /*can_colorize*/) const final override;\n+  meaning get_meaning () const override;\n+\n+private:\n+  tree m_apparent_callee_fndecl;\n+  tree m_apparent_caller_fndecl;\n+};\n+\n /* A concrete event subclass for a setjmp or sigsetjmp call.  */\n \n class setjmp_event : public checker_event\n@@ -643,6 +673,8 @@ class checker_path : public diagnostic_path\n \n   bool cfg_edge_pair_at_p (unsigned idx) const;\n \n+  void inject_any_inlined_call_events (logger *logger);\n+\n private:\n   DISABLE_COPY_AND_ASSIGN(checker_path);\n "}, {"sha": "8ea1f61776e952fccb270b4db77e8502fea3e6f2", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"basic-block.h\"\n #include \"gimple.h\"\n #include \"gimple-iterator.h\"\n+#include \"inlining-iterator.h\"\n #include \"cgraph.h\"\n #include \"digraph.h\"\n #include \"analyzer/supergraph.h\"\n@@ -1390,6 +1391,8 @@ diagnostic_manager::emit_saved_diagnostic (const exploded_graph &eg,\n   if (sd.m_trailing_eedge)\n     add_events_for_eedge (pb, *sd.m_trailing_eedge, &emission_path, NULL);\n \n+  emission_path.inject_any_inlined_call_events (get_logger ());\n+\n   emission_path.prepare_for_emission (sd.m_d);\n \n   location_t loc\n@@ -2454,6 +2457,11 @@ diagnostic_manager::prune_for_sm_diagnostic (checker_path *path,\n \t  }\n \t  break;\n \n+\tcase EK_INLINED_CALL:\n+\t  /* We don't expect to see these yet, as they're added later.\n+\t     We'd want to keep them around.  */\n+\t  break;\n+\n \tcase EK_SETJMP:\n \t  /* TODO: only show setjmp_events that matter i.e. those for which\n \t     there is a later rewind event using them.  */"}, {"sha": "7237cc1a1ca3e8adfc214be9bdb126a5a116126f", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -2904,7 +2904,7 @@ class tainted_args_callback_custom_event : public custom_event\n     return make_label_text (can_colorize,\n \t\t\t    \"function %qE used as initializer for field %qE\"\n \t\t\t    \" marked with %<__attribute__((tainted_args))%>\",\n-\t\t\t    m_fndecl, m_field);\n+\t\t\t    get_fndecl (), m_field);\n   }\n \n private:"}, {"sha": "a7adc7c6bf233ad39fbe0e98678efe8356ae7538", "filename": "gcc/analyzer/inlining-iterator.h", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fanalyzer%2Finlining-iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fanalyzer%2Finlining-iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Finlining-iterator.h?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,109 @@\n+/* Iterator for walking a chain of inlining locations.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+   Contributed by David Malcolm <dmalcolm@redhat.com>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_ANALYZER_INLINING_ITERATOR_H\n+#define GCC_ANALYZER_INLINING_ITERATOR_H\n+\n+/* Iterator for walking a chain of inlining locations.\n+\n+   The fndecls and locations will be traversed from innermost to outermost.\n+   For example, given:\n+\n+    inline void inner (void)\n+    {\n+       ...LOCATION HERE...\n+    }\n+    void outer (void)\n+    {\n+       inner (); <-- CALLSITE\n+    }\n+\n+   then the fndecl will be \"inner\" on the initial iteration, and \"outer\" on\n+   the second (final) iteration.\n+\n+   Compare with lhd_print_error_function, cp_print_error_function,\n+   and optrecord_json_writer::inlining_chain_to_json.  */\n+\n+class inlining_iterator\n+{\n+public:\n+  inlining_iterator (location_t loc)\n+  : m_abstract_origin (LOCATION_BLOCK (loc)),\n+    m_callsite (UNKNOWN_LOCATION), m_fndecl (NULL),\n+    m_next_abstract_origin (NULL)\n+  {\n+    prepare_iteration ();\n+  }\n+\n+  bool done_p () const { return m_abstract_origin == NULL; }\n+\n+  void next ()\n+  {\n+    m_abstract_origin = m_next_abstract_origin;\n+    prepare_iteration ();\n+  }\n+\n+  tree get_fndecl () const { return m_fndecl; }\n+  location_t get_callsite () const { return m_callsite; }\n+  tree get_block () const { return m_abstract_origin; }\n+\n+private:\n+  void prepare_iteration ()\n+  {\n+    if (done_p ())\n+      return;\n+    tree block = m_abstract_origin;\n+    m_callsite = BLOCK_SOURCE_LOCATION (block);\n+    m_fndecl = NULL;\n+    block = BLOCK_SUPERCONTEXT (block);\n+    while (block && TREE_CODE (block) == BLOCK\n+\t   && BLOCK_ABSTRACT_ORIGIN (block))\n+      {\n+\ttree ao = BLOCK_ABSTRACT_ORIGIN (block);\n+\tif (TREE_CODE (ao) == FUNCTION_DECL)\n+\t  {\n+\t    m_fndecl = ao;\n+\t    break;\n+\t  }\n+\telse if (TREE_CODE (ao) != BLOCK)\n+\t  break;\n+\n+\tblock = BLOCK_SUPERCONTEXT (block);\n+      }\n+    if (m_fndecl)\n+      m_next_abstract_origin = block;\n+    else\n+      {\n+\twhile (block && TREE_CODE (block) == BLOCK)\n+\t  block = BLOCK_SUPERCONTEXT (block);\n+\n+\tif (block && TREE_CODE (block) == FUNCTION_DECL)\n+\t  m_fndecl = block;\n+\tm_next_abstract_origin = NULL;\n+      }\n+  }\n+\n+  tree m_abstract_origin;\n+  location_t m_callsite;\n+  tree m_fndecl;\n+  tree m_next_abstract_origin;\n+};\n+\n+#endif /* GCC_ANALYZER_INLINING_ITERATOR_H */"}, {"sha": "0eab7e4d31bb2d066076d3a2ed958933fa2dc7fa", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -425,6 +425,7 @@ Objective-C and Objective-C++ Dialects}.\n -fno-analyzer-state-merge @gol\n -fno-analyzer-state-purge @gol\n -fanalyzer-transitivity @gol\n+-fno-analyzer-undo-inlining @gol\n -fanalyzer-verbose-edges @gol\n -fanalyzer-verbose-state-changes @gol\n -fanalyzer-verbosity=@var{level} @gol\n@@ -5233,7 +5234,10 @@ This option provides additional information when printing control-flow paths\n associated with a diagnostic.\n \n If this is option is provided then the stack depth will be printed for\n-each run of events within @option{-fdiagnostics-path-format=separate-events}.\n+each run of events within @option{-fdiagnostics-path-format=inline-events}.\n+If provided with @option{-fdiagnostics-path-format=separate-events}, then\n+the stack depth and function declaration will be appended when printing\n+each event.\n \n This is intended for use by GCC developers and plugin developers when\n debugging diagnostics that report interprocedural control flow.\n@@ -10202,6 +10206,25 @@ be suppressed, for debugging state-handling issues.\n @opindex fno-analyzer-transitivity\n This option enables transitivity of constraints within the analyzer.\n \n+@item -fno-analyzer-undo-inlining\n+@opindex fanalyzer-undo-inlining\n+@opindex fno-analyzer-undo-inlining\n+This option is intended for analyzer developers.\n+\n+@option{-fanalyzer} runs relatively late compared to other code analysis\n+tools, and some optimizations have already been applied to the code.  In\n+particular function inlining may have occurred, leading to the\n+interprocedural execution paths emitted by the analyzer containing\n+function frames that don't correspond to those in the original source\n+code.\n+\n+By default the analyzer attempts to reconstruct the original function\n+frames, and to emit events showing the inlined calls.\n+\n+With @option{-fno-analyzer-undo-inlining} this attempt to reconstruct\n+the original frame information can be be disabled, which may be of help\n+when debugging issues in the analyzer.\n+\n @item -fanalyzer-verbose-edges\n This option is intended for analyzer developers.  It enables more\n verbose, lower-level detail in the descriptions of control flow"}, {"sha": "79621f10e9be2cd8a17f541023d846bd40ff42b1", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-1-multiline.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-1-multiline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-1-multiline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-1-multiline.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,56 @@\n+/* As per inlining-1.c, but testing how the ASCII art version of\n+   the path looks.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+/* { dg-additional-options \"-fdiagnostics-path-format=inline-events -fdiagnostics-show-caret\" } */\n+\n+void foo (void *p)\n+{\n+  __builtin_free (p); /* { dg-warning \"double-'free' of 'q'\" \"warning\" } */\n+}\n+\n+void bar (void *q)\n+{\n+  foo (q);\n+  foo (q);\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+   __builtin_free (p);\n+   ^~~~~~~~~~~~~~~~~~\n+  'bar': events 1-2 (depth 1)\n+    |\n+    | void bar (void *q)\n+    |      ^~~\n+    |      |\n+    |      (1) entry to 'bar'\n+    |\n+    |   foo (q);\n+    |   ~   \n+    |   |\n+    |   (2) inlined call to 'foo' from 'bar'\n+    |\n+    +--> 'foo': event 3 (depth 2)\n+           |\n+           |   __builtin_free (p);\n+           |   ^~~~~~~~~~~~~~~~~~\n+           |   |\n+           |   (3) first 'free' here\n+           |\n+    <------+\n+    |\n+  'bar': event 4 (depth 1)\n+    |\n+    |   foo (q);\n+    |   ^\n+    |   |\n+    |   (4) inlined call to 'foo' from 'bar'\n+    |\n+    +--> 'foo': event 5 (depth 2)\n+           |\n+           |   __builtin_free (p);\n+           |   ^~~~~~~~~~~~~~~~~~\n+           |   |\n+           |   (5) second 'free' here; first 'free' was at (3)\n+           |\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "bad0f68fec05e1ab387031fb852a6b942bca98fd", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-1-no-undo.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-1-no-undo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-1-no-undo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-1-no-undo.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,18 @@\n+/* Test for -fno-analyzer-undo-inlining.\n+   Verify that we can disable reconstruction of fndecl and stack depth\n+   information.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths -fno-analyzer-undo-inlining\" } */\n+\n+void foo (void *p)\n+{\n+  __builtin_free (p); /* { dg-warning \"double-'free' of 'q'\" \"warning\" } */\n+  /* { dg-message \"\\\\(1\\\\) first 'free' here \\\\(fndecl 'bar', depth 1\\\\)\" \"1st free message\" { target *-*-* } .-1 } */\n+  /* { dg-message \"\\\\(2\\\\) second 'free' here; first 'free' was at \\\\(1\\\\) \\\\(fndecl 'bar', depth 1\\\\)\" \"2nd free message\" { target *-*-* } .-2 } */\n+}\n+\n+void bar (void *q)\n+{\n+  foo (q);\n+  foo (q);\n+}"}, {"sha": "a9797eace191fdbe87b67ca2661f328197cc660d", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-1.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,17 @@\n+/* Verify that we can reconstruct fndecl and stack depth information\n+   after early inlining.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+\n+void foo (void *p)\n+{\n+  __builtin_free (p); /* { dg-warning \"double-'free' of 'q'\" \"warning\" } */\n+  /* { dg-message \"\\\\(3\\\\) first 'free' here \\\\(fndecl 'foo', depth 2\\\\)\" \"1st free message\" { target *-*-* } .-1 } */\n+  /* { dg-message \"\\\\(5\\\\) second 'free' here; first 'free' was at \\\\(3\\\\) \\\\(fndecl 'foo', depth 2\\\\)\" \"2nd free message\" { target *-*-* } .-2 } */\n+}\n+\n+void bar (void *q) /* { dg-message \"\\\\(1\\\\) entry to 'bar' \\\\(fndecl 'bar', depth 1\\\\)\" } */\n+{\n+  foo (q); /* { dg-message \"\\\\(2\\\\) inlined call to 'foo' from 'bar' \\\\(fndecl 'bar', depth 1\\\\)\" } */\n+  foo (q); /* { dg-message \"\\\\(4\\\\) inlined call to 'foo' from 'bar' \\\\(fndecl 'bar', depth 1\\\\)\" } */\n+}"}, {"sha": "0a006b3a58fe7bde81453f4599e9d492d0b472c6", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-2-multiline.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-2-multiline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-2-multiline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-2-multiline.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,46 @@\n+/* As per inlining-2.c, but testing how the ASCII art version of\n+   the path looks.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+/* { dg-additional-options \"-fdiagnostics-path-format=inline-events -fdiagnostics-show-caret\" } */\n+\n+static void __analyzer_foo (void *p)\n+{\n+  __builtin_free (p);\n+\n+  __builtin_free (p); /* { dg-warning \"double-'free' of 'q'\" \"warning\" } */\n+}\n+\n+void bar (void *q)\n+{\n+  __analyzer_foo (q);\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+   __builtin_free (p);\n+   ^~~~~~~~~~~~~~~~~~\n+  'bar': events 1-2 (depth 1)\n+    |\n+    | void bar (void *q)\n+    |      ^~~\n+    |      |\n+    |      (1) entry to 'bar'\n+    |\n+    |   __analyzer_foo (q);\n+    |   ~   \n+    |   |\n+    |   (2) inlined call to '__analyzer_foo' from 'bar'\n+    |\n+    +--> '__analyzer_foo': events 3-4 (depth 2)\n+           |\n+           |   __builtin_free (p);\n+           |   ^~~~~~~~~~~~~~~~~~\n+           |   |\n+           |   (3) first 'free' here\n+           |\n+           |   __builtin_free (p);\n+           |   ~~~~~~~~~~~~~~~~~~\n+           |   |\n+           |   (4) second 'free' here; first 'free' was at (3)\n+           |\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "da06fa29d87b9767b3ba0516fad2a96b7baaf658", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-2.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,17 @@\n+/* Verify that we can reconstruct fndecl and stack depth information\n+   after early inlining.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+\n+static void __analyzer_foo (void *p)\n+{\n+  __builtin_free (p); /* { dg-message \"\\\\(3\\\\) first 'free' here \\\\(fndecl '__analyzer_foo', depth 2\\\\)\" \"1st free message\" } */\n+\n+  __builtin_free (p); /* { dg-warning \"double-'free' of 'q'\" \"warning\" } */\n+  /* { dg-message \"\\\\(4\\\\) second 'free' here; first 'free' was at \\\\(3\\\\) \\\\(fndecl '__analyzer_foo', depth 2\\\\)\" \"2nd free message\" { target *-*-* } .-1 } */\n+}\n+\n+void bar (void *q) /* { dg-message \"\\\\(1\\\\) entry to 'bar' \\\\(fndecl 'bar', depth 1\\\\)\" } */\n+{\n+  __analyzer_foo (q); /* { dg-message \"\\\\(2\\\\) inlined call to '__analyzer_foo' from 'bar' \\\\(fndecl 'bar', depth 1\\\\)\" } */\n+}"}, {"sha": "15a2dd8f0e134ed42bfacc936815d6f3b807b1bc", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-3-multiline.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-3-multiline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-3-multiline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-3-multiline.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,64 @@\n+/* As per inlining-3.c, but testing how the ASCII art version of\n+   the path looks.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+/* { dg-additional-options \"-fdiagnostics-path-format=inline-events -fdiagnostics-show-caret\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+#define NULL ((void *)0)\n+\n+struct input_file_st \n+{\n+  char inpname[1];\n+};\n+\n+typedef struct input_file_st input_file;\n+\n+static inline const char*\n+get_input_file_name (const input_file *inpf)\n+{\n+  if (inpf)\n+    return inpf->inpname;\n+  return NULL;\n+}\n+\n+size_t\n+test (const input_file *inpf)\n+{\n+  const char *f = get_input_file_name (inpf);\n+  return __builtin_strlen (f); /* { dg-warning \"use of NULL\" \"warning\" } */\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+   return __builtin_strlen (f);\n+          ^~~~~~~~~~~~~~~~~~~~\n+  'test': events 1-2 (depth 1)\n+    |\n+    | test (const input_file *inpf)\n+    | ^~~~\n+    | |\n+    | (1) entry to 'test'\n+    |\n+    |   const char *f = get_input_file_name (inpf);\n+    |                   ~\n+    |                   |\n+    |                   (2) inlined call to 'get_input_file_name' from 'test'\n+    |\n+    +--> 'get_input_file_name': event 3 (depth 2)\n+           |\n+           |   if (inpf)\n+           |      ^\n+           |      |\n+           |      (3) following 'false' branch (when 'inpf' is NULL)...\n+           |\n+    <------+\n+    |\n+  'test': events 4-5 (depth 1)\n+    |\n+    |   return __builtin_strlen (f);\n+    |          ^~~~~~~~~~~~~~~~~~~~\n+    |          |\n+    |          (4) ...to here\n+    |          (5) argument 1 ('<unknown>') NULL where non-null expected\n+    |\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "7a292ac87fa0eac6387c9a36b0724cae0ed0751a", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-3.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-3.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,30 @@\n+/* Verify that we can reconstruct fndecl and stack depth information\n+   after early inlining.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+#define NULL ((void *)0)\n+\n+struct input_file_st \n+{\n+  char inpname[1];\n+};\n+\n+typedef struct input_file_st input_file;\n+\n+static inline const char*\n+get_input_file_name (const input_file *inpf)\n+{\n+  if (inpf) /* { dg-message \"following 'false' branch \\\\(when 'inpf' is NULL\\\\)\\\\.\\\\.\\\\. \\\\(fndecl 'get_input_file_name', depth 2\\\\)\" } */\n+    return inpf->inpname;\n+  return NULL;\n+}\n+\n+size_t\n+test (const input_file *inpf)\n+{\n+  const char *f = get_input_file_name (inpf);\n+  return __builtin_strlen (f); /* { dg-warning \"use of NULL\" \"warning\" } */\n+  /* { dg-message \"NULL where non-null expected \\\\(fndecl 'test', depth 1\\\\)\" \"message\" { target *-*-* } .-1 } */\n+}"}, {"sha": "0413c39af038d7b7cd440f4649d6c2eea8617df6", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-4-multiline.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-4-multiline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-4-multiline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-4-multiline.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,72 @@\n+/* As per inlining-4.c, but testing how the ASCII art version of\n+   the path looks.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+/* { dg-additional-options \"-fdiagnostics-path-format=inline-events -fdiagnostics-show-caret\" } */\n+\n+#define NULL ((void *)0)\n+\n+static inline const char*\n+inner (int flag)\n+{\n+  if (flag)\n+    return NULL;\n+  return \"foo\";\n+}\n+\n+static inline const char*\n+middle (int flag)\n+{\n+  return inner (flag);\n+}\n+\n+char\n+outer (int flag)\n+{\n+  return *middle (flag); /* { dg-warning \"dereference of NULL\" \"warning\" } */\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+   return *middle (flag);\n+          ^~~~~~~~~~~~~~\n+  'outer': events 1-2 (depth 1)\n+    |\n+    | outer (int flag)\n+    | ^~~~~\n+    | |\n+    | (1) entry to 'outer'\n+    |\n+    |   return *middle (flag);\n+    |           ~\n+    |           |\n+    |           (2) inlined call to 'middle' from 'outer'\n+    |\n+    +--> 'middle': event 3 (depth 2)\n+           |\n+           |   return inner (flag);\n+           |          ^\n+           |          |\n+           |          (3) inlined call to 'inner' from 'middle'\n+           |\n+           +--> 'inner': event 4 (depth 3)\n+                  |\n+                  |   if (flag)\n+                  |      ^\n+                  |      |\n+                  |      (4) following 'true' branch (when 'flag != 0')...\n+                  |\n+    <-------------+\n+    |\n+  'outer': event 5 (depth 1)\n+    |\n+    |cc1:\n+    | (5): ...to here\n+    |\n+  'outer': event 6 (depth 1)\n+    |\n+    |   return *middle (flag);\n+    |          ^~~~~~~~~~~~~~\n+    |          |\n+    |          (6) dereference of NULL '<unknown>'\n+    |\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "f4e42084c918df7a6ab79db71bebfee1b89144d4", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-4.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-4.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,27 @@\n+/* Verify that we can reconstruct fndecl and stack depth information\n+   after early inlining.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+\n+#define NULL ((void *)0)\n+\n+static inline const char*\n+inner (int flag)\n+{\n+  if (flag) /* { dg-message \"following 'true' branch \\\\(when 'flag != 0'\\\\)\\\\.\\\\.\\\\. \\\\(fndecl 'inner', depth 3\\\\)\" } */\n+    return NULL;\n+  return \"foo\";\n+}\n+\n+static inline const char*\n+middle (int flag)\n+{\n+  return inner (flag);\n+}\n+\n+char\n+outer (int flag)\n+{\n+  return *middle (flag); /* { dg-warning \"dereference of NULL\" \"warning\" } */\n+  /* { dg-message \"\\\\(fndecl 'outer', depth 1\\\\)\" \"message\" { target *-*-* } .-1 } */\n+}"}, {"sha": "21b8fb978c89ad226b62eb823c4b4d1fc91a9a4b", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-5-multiline.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-5-multiline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-5-multiline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-5-multiline.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,59 @@\n+/* As per inlining-5.c, but testing how the ASCII art version of\n+   the path looks.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+/* { dg-additional-options \"-fdiagnostics-path-format=inline-events -fdiagnostics-show-caret\" } */\n+\n+static inline void\n+inner (void *p)\n+{\n+  __builtin_free (p); /* { dg-warning \"double-'free' of 'r'\" } */\n+}\n+\n+static inline void\n+middle (void *q)\n+{\n+  __builtin_free (q);\n+  inner (q);\n+}\n+\n+void\n+outer (void *r)\n+{\n+  middle (r);\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+   __builtin_free (p);\n+   ^~~~~~~~~~~~~~~~~~\n+  'outer': events 1-2 (depth 1)\n+    |\n+    | outer (void *r)\n+    | ^~~~~\n+    | |\n+    | (1) entry to 'outer'\n+    |\n+    |   middle (r);\n+    |   ~\n+    |   |\n+    |   (2) inlined call to 'middle' from 'outer'\n+    |\n+    +--> 'middle': events 3-4 (depth 2)\n+           |\n+           |   __builtin_free (q);\n+           |   ^~~~~~~~~~~~~~~~~~\n+           |   |\n+           |   (3) first 'free' here\n+           |   inner (q);\n+           |   ~\n+           |   |\n+           |   (4) inlined call to 'inner' from 'middle'\n+           |\n+           +--> 'inner': event 5 (depth 3)\n+                  |\n+                  |   __builtin_free (p);\n+                  |   ^~~~~~~~~~~~~~~~~~\n+                  |   |\n+                  |   (5) second 'free' here; first 'free' was at (3)\n+                  |\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "5104be0c615cc70e38964ca727198c9ff0c79848", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-5.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-5.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,24 @@\n+/* Verify that we can reconstruct fndecl and stack depth information\n+   after early inlining.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+\n+static inline void\n+inner (void *p)\n+{\n+  __builtin_free (p); /* { dg-warning \"double-'free' of 'r'\" } */\n+  /* { dg-message \"\\\\(5\\\\) second 'free' here; first 'free' was at \\\\(3\\\\) \\\\(fndecl 'inner', depth 3\\\\)\" \"2nd free message\" { target *-*-* } .-1 } */\n+}\n+\n+static inline void\n+middle (void *q)\n+{\n+  __builtin_free (q); /* { dg-message \"\\\\(3\\\\) first 'free' here \\\\(fndecl 'middle', depth 2\\\\)\" \"1st free message\" } */\n+  inner (q); /* { dg-message \"\\\\(4\\\\) inlined call to 'inner' from 'middle' \\\\(fndecl 'middle', depth 2\\\\)\" } */\n+}\n+\n+void\n+outer (void *r) /* { dg-message \"\\\\(1\\\\) entry to 'outer' \\\\(fndecl 'outer', depth 1\\\\)\" } */\n+{\n+  middle (r); /* { dg-message \"\\\\(2\\\\) inlined call to 'middle' from 'outer' \\\\(fndecl 'outer', depth 1\\\\)\" } */\n+}"}, {"sha": "9cec6146f3721bb28ea24854a6e072be5c81d2e3", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-6-multiline.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-6-multiline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-6-multiline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-6-multiline.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,64 @@\n+/* As per inlining-6.c, but testing how the ASCII art version of\n+   the path looks.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+/* { dg-additional-options \"-fdiagnostics-path-format=inline-events -fdiagnostics-show-caret\" } */\n+\n+static inline void\n+inner (void *p)\n+{\n+  __builtin_free (p);\n+}\n+\n+static inline void\n+middle (void *q)\n+{\n+  inner (q);\n+  __builtin_free (q); /* { dg-warning \"double-'free' of 'r'\" } */\n+}\n+\n+void\n+outer (void *r)\n+{\n+  middle (r);\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+   __builtin_free (q);\n+   ^~~~~~~~~~~~~~~~~~\n+  'outer': events 1-2 (depth 1)\n+    |\n+    | outer (void *r)\n+    | ^~~~~\n+    | |\n+    | (1) entry to 'outer'\n+    |\n+    |   middle (r);\n+    |   ~\n+    |   |\n+    |   (2) inlined call to 'middle' from 'outer'\n+    |\n+    +--> 'middle': event 3 (depth 2)\n+           |\n+           |   inner (q);\n+           |   ^\n+           |   |\n+           |   (3) inlined call to 'inner' from 'middle'\n+           |\n+           +--> 'inner': event 4 (depth 3)\n+                  |\n+                  |   __builtin_free (p);\n+                  |   ^~~~~~~~~~~~~~~~~~\n+                  |   |\n+                  |   (4) first 'free' here\n+                  |\n+           <------+\n+           |\n+         'middle': event 5 (depth 2)\n+           |\n+           |   __builtin_free (q);\n+           |   ^~~~~~~~~~~~~~~~~~\n+           |   |\n+           |   (5) second 'free' here; first 'free' was at (4)\n+           |\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "e19e85a78e9fc9ed4f07a83bcb4e3ed515842e82", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-6.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-6.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,23 @@\n+/* Verify that we can reconstruct fndecl and stack depth information\n+   after early inlining.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+\n+static inline void\n+inner (void *p)\n+{\n+  __builtin_free (p);\n+}\n+\n+static inline void\n+middle (void *q)\n+{\n+  inner (q);\n+  __builtin_free (q);  /* { dg-warning \"double-'free' of 'r'\" \"warning\" } */\n+}\n+\n+void\n+outer (void *r)\n+{\n+  middle (r);\n+}"}, {"sha": "956c6b90bb0715cba9a63b1e7d91a01ccb163218", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-7-multiline.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-7-multiline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-7-multiline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-7-multiline.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,128 @@\n+/* As per inlining-7.c, but testing how the ASCII art version of\n+   the path looks.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+/* { dg-additional-options \"-fdiagnostics-path-format=inline-events -fdiagnostics-show-caret\" } */\n+\n+static inline void\n+depth_6 (void *p)\n+{\n+  __builtin_free (p); /* { dg-warning \"double-'free' of 'p1'\" \"warning\" } */\n+}\n+\n+static inline void\n+depth_5 (void *p5)\n+{\n+  depth_6 (p5);\n+}\n+\n+static inline void\n+depth_4 (void *p4)\n+{\n+  depth_5 (p4);\n+}\n+\n+static inline void\n+depth_3 (void *p3)\n+{\n+  depth_4 (p3);\n+  depth_4 (p3);\n+}\n+\n+static inline void\n+depth_2 (void *p2)\n+{\n+  depth_3 (p2);\n+}\n+\n+void\n+depth_1 (void *p1)\n+{\n+  depth_2 (p1);\n+}\n+\n+/* We want the reconstructed call/return hierarchy to show\n+   that two calls happen at depth_3, without popping the stack\n+   back any further.  */\n+\n+/* { dg-begin-multiline-output \"\" }\n+   __builtin_free (p);\n+   ^~~~~~~~~~~~~~~~~~\n+  'depth_1': events 1-2 (depth 1)\n+    |\n+    | depth_1 (void *p1)\n+    | ^~~~~~~\n+    | |\n+    | (1) entry to 'depth_1'\n+    |\n+    |   depth_2 (p1);\n+    |   ~\n+    |   |\n+    |   (2) inlined call to 'depth_2' from 'depth_1'\n+    |\n+    +--> 'depth_2': event 3 (depth 2)\n+           |\n+           |   depth_3 (p2);\n+           |   ^\n+           |   |\n+           |   (3) inlined call to 'depth_3' from 'depth_2'\n+           |\n+           +--> 'depth_3': event 4 (depth 3)\n+                  |\n+                  |   depth_4 (p3);\n+                  |   ^\n+                  |   |\n+                  |   (4) inlined call to 'depth_4' from 'depth_3'\n+                  |\n+                  +--> 'depth_4': event 5 (depth 4)\n+                         |\n+                         |   depth_5 (p4);\n+                         |   ^\n+                         |   |\n+                         |   (5) inlined call to 'depth_5' from 'depth_4'\n+                         |\n+                         +--> 'depth_5': event 6 (depth 5)\n+                                |\n+                                |   depth_6 (p5);\n+                                |   ^\n+                                |   |\n+                                |   (6) inlined call to 'depth_6' from 'depth_5'\n+                                |\n+                                +--> 'depth_6': event 7 (depth 6)\n+                                       |\n+                                       |   __builtin_free (p);\n+                                       |   ^~~~~~~~~~~~~~~~~~\n+                                       |   |\n+                                       |   (7) first 'free' here\n+                                       |\n+                  <--------------------+\n+                  |\n+                'depth_3': event 8 (depth 3)\n+                  |\n+                  |   depth_4 (p3);\n+                  |   ^\n+                  |   |\n+                  |   (8) inlined call to 'depth_4' from 'depth_3'\n+                  |\n+                  +--> 'depth_4': event 9 (depth 4)\n+                         |\n+                         |   depth_5 (p4);\n+                         |   ^\n+                         |   |\n+                         |   (9) inlined call to 'depth_5' from 'depth_4'\n+                         |\n+                         +--> 'depth_5': event 10 (depth 5)\n+                                |\n+                                |   depth_6 (p5);\n+                                |   ^\n+                                |   |\n+                                |   (10) inlined call to 'depth_6' from 'depth_5'\n+                                |\n+                                +--> 'depth_6': event 11 (depth 6)\n+                                       |\n+                                       |   __builtin_free (p);\n+                                       |   ^~~~~~~~~~~~~~~~~~\n+                                       |   |\n+                                       |   (11) second 'free' here; first 'free' was at (7)\n+                                       |\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "fe0404253b6710b2be615b7da086ba466753eb9b", "filename": "gcc/testsuite/gcc.dg/analyzer/inlining-7.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Finlining-7.c?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -0,0 +1,49 @@\n+/* Verify that we can reconstruct fndecl and stack depth information\n+   after early inlining.  */\n+\n+/* { dg-additional-options \"-O2 -fdiagnostics-show-path-depths\" } */\n+\n+/* We want the reconstructed call/return hierarchy to show\n+   that two calls happen at depth_3, without any spurious events\n+   popping the stack back any further.  */\n+\n+static inline void\n+depth_6 (void *p)\n+{\n+  __builtin_free (p); /* { dg-warning \"double-'free' of 'p1'\" \"warning\" } */\n+ /* { dg-message \"\\\\(7\\\\) first 'free' here \\\\(fndecl 'depth_6', depth 6\\\\)\" \"1st free message\" { target *-*-* } .-1 } */\n+ /* { dg-message \"\\\\(11\\\\) second 'free' here; first 'free' was at \\\\(7\\\\) \\\\(fndecl 'depth_6', depth 6\\\\)\" \"2nd free message\" { target *-*-* } .-2 } */\n+}\n+\n+static inline void\n+depth_5 (void *p5)\n+{\n+  depth_6 (p5); /* { dg-message \"\\\\(6\\\\) inlined call to 'depth_6' from 'depth_5' \\\\(fndecl 'depth_5', depth 5\\\\)\" \"event 6\" } */\n+  /* { dg-message \"\\\\(10\\\\) inlined call to 'depth_6' from 'depth_5' \\\\(fndecl 'depth_5', depth 5\\\\)\" \"event 10\" { target *-*-* } .-1 } */\n+}\n+\n+static inline void\n+depth_4 (void *p4)\n+{\n+  depth_5 (p4); /* { dg-message \"\\\\(5\\\\) inlined call to 'depth_5' from 'depth_4' \\\\(fndecl 'depth_4', depth 4\\\\)\" \"event 5\" } */\n+  /* { dg-message \"\\\\(9\\\\) inlined call to 'depth_5' from 'depth_4' \\\\(fndecl 'depth_4', depth 4\\\\)\" \"event 9\" { target *-*-* } .-1 } */\n+}\n+\n+static inline void\n+depth_3 (void *p3)\n+{\n+  depth_4 (p3); /* { dg-message \"\\\\(4\\\\) inlined call to 'depth_4' from 'depth_3' \\\\(fndecl 'depth_3', depth 3\\\\)\" } */\n+  depth_4 (p3); /* { dg-message \"\\\\(8\\\\) inlined call to 'depth_4' from 'depth_3' \\\\(fndecl 'depth_3', depth 3\\\\)\" } */\n+}\n+\n+static inline void\n+depth_2 (void *p2)\n+{\n+  depth_3 (p2); /* { dg-message \"\\\\(3\\\\) inlined call to 'depth_3' from 'depth_2' \\\\(fndecl 'depth_2', depth 2\\\\)\" } */\n+}\n+\n+void\n+depth_1 (void *p1) /* { dg-message \"\\\\(1\\\\) entry to 'depth_1' \\\\(fndecl 'depth_1', depth 1\\\\)\" } */\n+{\n+  depth_2 (p1); /* { dg-message \"\\\\(2\\\\) inlined call to 'depth_2' from 'depth_1' \\\\(fndecl 'depth_1', depth 1\\\\)\" } */\n+}"}, {"sha": "ae2f8a2d26279d33515469ef717301538edd2c8c", "filename": "gcc/tree-diagnostic-path.cc", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftree-diagnostic-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63c073199491b7ec2261d39af51c02147c2f0daf/gcc%2Ftree-diagnostic-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic-path.cc?ref=63c073199491b7ec2261d39af51c02147c2f0daf", "patch": "@@ -463,8 +463,27 @@ default_tree_diagnostic_path_printer (diagnostic_context *context,\n \t    label_text event_text (event.get_desc (false));\n \t    gcc_assert (event_text.m_buffer);\n \t    diagnostic_event_id_t event_id (i);\n-\t    inform (event.get_location (),\n-\t\t    \"%@ %s\", &event_id, event_text.m_buffer);\n+\t    if (context->show_path_depths)\n+\t      {\n+\t\tint stack_depth = event.get_stack_depth ();\n+\t\ttree fndecl = event.get_fndecl ();\n+\t\t/* -fdiagnostics-path-format=separate-events doesn't print\n+\t\t   fndecl information, so with -fdiagnostics-show-path-depths\n+\t\t   print the fndecls too, if any.  */\n+\t\tif (fndecl)\n+\t\t  inform (event.get_location (),\n+\t\t\t  \"%@ %s (fndecl %qD, depth %i)\",\n+\t\t\t  &event_id, event_text.m_buffer,\n+\t\t\t  fndecl, stack_depth);\n+\t\telse\n+\t\t  inform (event.get_location (),\n+\t\t\t  \"%@ %s (depth %i)\",\n+\t\t\t  &event_id, event_text.m_buffer,\n+\t\t\t  stack_depth);\n+\t      }\n+\t    else\n+\t      inform (event.get_location (),\n+\t\t      \"%@ %s\", &event_id, event_text.m_buffer);\n \t    event_text.maybe_free ();\n \t  }\n       }"}]}