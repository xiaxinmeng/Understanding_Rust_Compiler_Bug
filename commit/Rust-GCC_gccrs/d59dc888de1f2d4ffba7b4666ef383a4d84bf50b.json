{"sha": "d59dc888de1f2d4ffba7b4666ef383a4d84bf50b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU5ZGM4ODhkZTFmMmQ0ZmZiYTdiNDY2NmVmMzgzYTRkODRiZjUwYg==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2010-10-13T07:43:10Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2010-10-13T07:43:10Z"}, "message": "tree-vect-slp.c (vect_get_constant_vectors): Fix comment.\n\n\n\t* tree-vect-slp.c (vect_get_constant_vectors): Fix comment.\n\tUse operand's type for POINTER_PLUS_EXPR.\n\nFrom-SVN: r165412", "tree": {"sha": "7b92b2f9356f22b66a896dfc156fb17d9382098c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b92b2f9356f22b66a896dfc156fb17d9382098c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d59dc888de1f2d4ffba7b4666ef383a4d84bf50b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d59dc888de1f2d4ffba7b4666ef383a4d84bf50b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d59dc888de1f2d4ffba7b4666ef383a4d84bf50b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d59dc888de1f2d4ffba7b4666ef383a4d84bf50b/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f6d4c520c14a9cf688ac59f8d8f8a48f61ef314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f6d4c520c14a9cf688ac59f8d8f8a48f61ef314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f6d4c520c14a9cf688ac59f8d8f8a48f61ef314"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "e847c4113afef0c054ca180f8e8a3c5488ef65d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59dc888de1f2d4ffba7b4666ef383a4d84bf50b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59dc888de1f2d4ffba7b4666ef383a4d84bf50b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d59dc888de1f2d4ffba7b4666ef383a4d84bf50b", "patch": "@@ -1,3 +1,8 @@\n+2010-10-13  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* tree-vect-slp.c (vect_get_constant_vectors): Fix comment.\n+\tUse operand's type for POINTER_PLUS_EXPR.\n+\n 2010-10-13  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* c-parser.c (c_parser_for_statement): Initialize incr."}, {"sha": "935c578b5e6aad42ee266b26b24198ead5e1e7c5", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d59dc888de1f2d4ffba7b4666ef383a4d84bf50b/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d59dc888de1f2d4ffba7b4666ef383a4d84bf50b/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=d59dc888de1f2d4ffba7b4666ef383a4d84bf50b", "patch": "@@ -1811,8 +1811,8 @@ vect_update_slp_costs_according_to_vf (loop_vec_info loop_vinfo)\n \n /* For constant and loop invariant defs of SLP_NODE this function returns\n    (vector) defs (VEC_OPRNDS) that will be used in the vectorized stmts.\n-   OP_NUM determines if we gather defs for operand 0 or operand 1 of the scalar\n-   stmts. NUMBER_OF_VECTORS is the number of vector defs to create.  \n+   OP_NUM determines if we gather defs for operand 0 or operand 1 of the RHS of\n+   scalar stmts.  NUMBER_OF_VECTORS is the number of vector defs to create.\n    REDUC_INDEX is the index of the reduction operand in the statements, unless\n    it is -1.  */\n \n@@ -1836,10 +1836,10 @@ vect_get_constant_vectors (slp_tree slp_node, VEC(tree,heap) **vec_oprnds,\n   VEC (tree, heap) *voprnds = VEC_alloc (tree, heap, number_of_vectors);\n   bool constant_p, is_store;\n   tree neutral_op = NULL;\n+  enum tree_code code = gimple_assign_rhs_code (stmt);\n \n   if (STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_reduction_def)\n     {\n-      enum tree_code code = gimple_assign_rhs_code (stmt);\n       if (reduc_index == -1)\n         {\n           VEC_free (tree, heap, *vec_oprnds);\n@@ -1895,18 +1895,18 @@ vect_get_constant_vectors (slp_tree slp_node, VEC(tree,heap) **vec_oprnds,\n     }\n \n   if (CONSTANT_CLASS_P (op))\n-    {\n-      constant_p = true;\n-      if (POINTER_TYPE_P (TREE_TYPE (gimple_assign_lhs (stmt))))\n-        vector_type = get_vectype_for_scalar_type (TREE_TYPE (op));\n-      else\n-        vector_type = STMT_VINFO_VECTYPE (stmt_vinfo);\n-    }\n+    constant_p = true;\n   else\n-    {\n-      constant_p = false;\n-      vector_type = get_vectype_for_scalar_type (TREE_TYPE (op));\n-    }\n+    constant_p = false;\n+\n+  /* For POINTER_PLUS_EXPR we use the type of the constant/invariant itself.\n+     If OP is the first operand of POINTER_PLUS_EXPR, its type is the type of\n+     the statement, so it's OK to use OP's type for both first and second\n+     operands.  */\n+  if (code == POINTER_PLUS_EXPR)\n+    vector_type = get_vectype_for_scalar_type (TREE_TYPE (op));\n+  else\n+    vector_type = STMT_VINFO_VECTYPE (stmt_vinfo);\n \n   gcc_assert (vector_type);\n   nunits = TYPE_VECTOR_SUBPARTS (vector_type);"}]}