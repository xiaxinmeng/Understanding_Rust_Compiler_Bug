{"sha": "a010954cc190e942994ed5d56fba503851b20b9a", "node_id": "C_kwDOANBUbNoAKGEwMTA5NTRjYzE5MGU5NDI5OTRlZDVkNTZmYmE1MDM4NTFiMjBiOWE", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-14T09:44:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-14T09:44:38Z"}, "message": "i386: Fix up _mm_loadu_si{16,32} [PR99754]\n\nThese intrinsics are supposed to do an unaligned may_alias load\nof a 16-bit or 32-bit value and store it as the first element of\na 128-bit integer vector, with all other elements cleared.\n\nThe current _mm_storeu_* implementation implements that correctly, uses\n__*_u types to do the store and extracts the first element of a vector into\nit.\nBut _mm_loadu_si{16,32} gets it all wrong.  It performs an aligned\nnon-may_alias load and because _mm_set_epi{16,32} has the args reversed,\nit also inserts it into the last vector element instead of first.\n\nThe following patch fixes that.\n\nNote, while the Intrinsics guide for _mm_loadu_si32 says SSE2,\nfor _mm_loadu_si16 it says strangely SSE.  But the intrinsics\nreturns __m128i, which is only defined in emmintrin.h, and\n_mm_set_epi16 is also only SSE2 and later in emmintrin.h.\nEven clang defines it in emmintrin.h and ends up with inlining\nfailure when calling _mm_loadu_si16 from sse,no-sse2 function.\nSo, isn't that a bug in the intrinsic guide instead?\n\n2022-03-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99754\n\t* config/i386/emmintrin.h (_mm_loadu_si32): Put loaded value into\n\tfirst \trather than last element of the vector, use __m32_u to do\n\ta really unaligned load, use just 0 instead of (int)0.\n\t(_mm_loadu_si16): Put loaded value into first rather than last\n\telement of the vector, use __m16_u to do a really unaligned load,\n\tuse just 0 instead of (short)0.\n\n\t* gcc.target/i386/pr99754-1.c: New test.\n\t* gcc.target/i386/pr99754-2.c: New test.", "tree": {"sha": "9c5a0f4771b3f4b5828ef4149350e4c553c54db9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c5a0f4771b3f4b5828ef4149350e4c553c54db9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a010954cc190e942994ed5d56fba503851b20b9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a010954cc190e942994ed5d56fba503851b20b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a010954cc190e942994ed5d56fba503851b20b9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a010954cc190e942994ed5d56fba503851b20b9a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b42446716607992655e967fddc36a672e52fe156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b42446716607992655e967fddc36a672e52fe156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b42446716607992655e967fddc36a672e52fe156"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "654a8e8c9adba856a9ce9507da053e3b09ea4777", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a010954cc190e942994ed5d56fba503851b20b9a/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a010954cc190e942994ed5d56fba503851b20b9a/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=a010954cc190e942994ed5d56fba503851b20b9a", "patch": "@@ -718,14 +718,13 @@ _mm_loadu_si64 (void const *__P)\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_loadu_si32 (void const *__P)\n {\n-  return _mm_set_epi32 (*(int *)__P, (int)0, (int)0, (int)0);\n+  return _mm_set_epi32 (0, 0, 0, (*(__m32_u *)__P)[0]);\n }\n \n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_loadu_si16 (void const *__P)\n {\n-  return _mm_set_epi16 (*(short *)__P, (short)0, (short)0, (short)0,\n-\t\t\t(short)0, (short)0, (short)0, (short)0);\n+  return _mm_set_epi16 (0, 0, 0, 0, 0, 0, 0, (*(__m16_u *)__P)[0]);\n }\n \n extern __inline void __attribute__((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "9c9537248813f73a2be4e5c6c1852707bea856ad", "filename": "gcc/testsuite/gcc.target/i386/pr99754-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a010954cc190e942994ed5d56fba503851b20b9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99754-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a010954cc190e942994ed5d56fba503851b20b9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99754-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99754-1.c?ref=a010954cc190e942994ed5d56fba503851b20b9a", "patch": "@@ -0,0 +1,20 @@\n+/* PR target/99754 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"sse2-check.h\"\n+#include <emmintrin.h>\n+\n+static void\n+sse2_test (void)\n+{\n+  union { unsigned char buf[32]; long long ll; } u;\n+  u.buf[1] = 0xfe;\n+  u.buf[2] = 0xca;\n+  u.buf[17] = 0xaa;\n+  u.buf[18] = 0x55;\n+  _mm_storeu_si16 (&u.buf[17], _mm_loadu_si16 (&u.buf[1]));\n+  if (u.buf[17] != 0xfe || u.buf[18] != 0xca)\n+    abort ();\n+}"}, {"sha": "f7a1dd3e124fa05e163b0bfa874362e76e5a1920", "filename": "gcc/testsuite/gcc.target/i386/pr99754-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a010954cc190e942994ed5d56fba503851b20b9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99754-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a010954cc190e942994ed5d56fba503851b20b9a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99754-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99754-2.c?ref=a010954cc190e942994ed5d56fba503851b20b9a", "patch": "@@ -0,0 +1,24 @@\n+/* PR target/99754 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+#include \"sse2-check.h\"\n+#include <emmintrin.h>\n+\n+static void\n+sse2_test (void)\n+{\n+  union { unsigned char buf[32]; long long ll; } u;\n+  u.buf[1] = 0xbe;\n+  u.buf[2] = 0xba;\n+  u.buf[3] = 0xfe;\n+  u.buf[4] = 0xca;\n+  u.buf[17] = 0xaa;\n+  u.buf[18] = 0x55;\n+  u.buf[19] = 0xaa;\n+  u.buf[20] = 0x55;\n+  _mm_storeu_si32 (&u.buf[17], _mm_loadu_si32 (&u.buf[1]));\n+  if (u.buf[17] != 0xbe || u.buf[18] != 0xba || u.buf[19] != 0xfe || u.buf[20] != 0xca)\n+    abort ();\n+}"}]}