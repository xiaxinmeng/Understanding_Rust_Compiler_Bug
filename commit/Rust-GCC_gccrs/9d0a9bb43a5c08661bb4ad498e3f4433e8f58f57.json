{"sha": "9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQwYTliYjQzYTVjMDg2NjFiYjRhZDQ5OGUzZjQ0MzNlOGY1OGY1Nw==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@vnet.ibm.com", "date": "2016-09-10T01:36:33Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2016-09-10T01:36:33Z"}, "message": "re PR rtl-optimization/77289 (ICE in extract_constrain_insn, at recog.c:2212 on powerpc64)\n\ngcc/\n\tPR rtl-optimization/77289\n\t* lra-constraints.c (get_final_hard_regno): Add support for non hard\n\tregister numbers.  Remove support for subregs.\n\t(get_hard_regno): Use SUBREG_P.  Don't call get_final_hard_regno().\n\t(get_reg_class): Delete removed get_final_hard_regno() argument.\n\t(uses_hard_regs_p): Call get_final_hard_regno().\n\ngcc/testsuite/\n\tPR rtl-optimization/77289\n\t* gcc.target/powerpc/pr77289.c: New test.\n\nFrom-SVN: r240065", "tree": {"sha": "c26256b01d78742b01f07daa23c8fa8aab2fae4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c26256b01d78742b01f07daa23c8fa8aab2fae4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "659edeaf8ee45af477aee19aa26e56faa7882a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659edeaf8ee45af477aee19aa26e56faa7882a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/659edeaf8ee45af477aee19aa26e56faa7882a3e"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "221933341658987680739f2f9c0ed0747c4497e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57", "patch": "@@ -1,3 +1,12 @@\n+2016-09-09  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR rtl-optimization/77289\n+\t* lra-constraints.c (get_final_hard_regno): Add support for non hard\n+\tregister numbers.  Remove support for subregs.\n+\t(get_hard_regno): Use SUBREG_P.  Don't call get_final_hard_regno().\n+\t(get_reg_class): Delete removed get_final_hard_regno() argument.\n+\t(uses_hard_regs_p): Call get_final_hard_regno().\n+\n 2016-09-09  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/77520"}, {"sha": "73cee924ea8d3622f3358b1424728965a331ba28", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57", "patch": "@@ -182,41 +182,42 @@ get_try_hard_regno (int regno)\n   return ira_class_hard_regs[rclass][0];\n }\n \n-/* Return final hard regno (plus offset) which will be after\n-   elimination.\t We do this for matching constraints because the final\n-   hard regno could have a different class.  */\n+/* Return the final hard regno which will be after elimination.\n+   We do this because the final hard regno could have a different class.  */\n static int\n-get_final_hard_regno (int hard_regno, int offset)\n+get_final_hard_regno (int regno)\n {\n-  if (hard_regno < 0)\n-    return hard_regno;\n-  hard_regno = lra_get_elimination_hard_regno (hard_regno);\n-  return hard_regno + offset;\n+  if (! HARD_REGISTER_NUM_P (regno))\n+    regno = lra_get_regno_hard_regno (regno);\n+  if (regno < 0)\n+    return regno;\n+  return lra_get_elimination_hard_regno (regno);\n }\n \n-/* Return hard regno of X after removing subreg and making\n-   elimination.  If X is not a register or subreg of register, return\n-   -1.  For pseudo use its assignment.  */\n+/* Return the hard regno of X after removing its subreg.  If X is not\n+   a register or a subreg of a register, return -1.  If X is a pseudo,\n+   use its assignment.  We do not process register eliminiations while\n+   matching constraints.  See PR77289.  */\n static int\n get_hard_regno (rtx x)\n {\n   rtx reg;\n   int offset, hard_regno;\n \n   reg = x;\n-  if (GET_CODE (x) == SUBREG)\n+  if (SUBREG_P (x))\n     reg = SUBREG_REG (x);\n   if (! REG_P (reg))\n     return -1;\n-  if ((hard_regno = REGNO (reg)) >= FIRST_PSEUDO_REGISTER)\n+  if (! HARD_REGISTER_NUM_P (hard_regno = REGNO (reg)))\n     hard_regno = lra_get_regno_hard_regno (hard_regno);\n   if (hard_regno < 0)\n     return -1;\n   offset = 0;\n-  if (GET_CODE (x) == SUBREG)\n+  if (SUBREG_P (x))\n     offset += subreg_regno_offset (hard_regno, GET_MODE (reg),\n \t\t\t\t   SUBREG_BYTE (x),  GET_MODE (x));\n-  return get_final_hard_regno (hard_regno, offset);\n+  return hard_regno + offset;\n }\n \n /* If REGNO is a hard register or has been allocated a hard register,\n@@ -232,7 +233,7 @@ get_reg_class (int regno)\n     hard_regno = lra_get_regno_hard_regno (regno);\n   if (hard_regno >= 0)\n     {\n-      hard_regno = get_final_hard_regno (hard_regno, 0);\n+      hard_regno = get_final_hard_regno (hard_regno);\n       return REGNO_REG_CLASS (hard_regno);\n     }\n   if (regno >= new_regno_start)\n@@ -1712,7 +1713,7 @@ uses_hard_regs_p (rtx x, HARD_REG_SET set)\n \n   if (REG_P (x))\n     {\n-      x_hard_regno = get_hard_regno (x);\n+      x_hard_regno = get_final_hard_regno (REGNO (x));\n       return (x_hard_regno >= 0\n \t      && overlaps_hard_reg_set_p (set, mode, x_hard_regno));\n     }"}, {"sha": "3d9e0b2a6da2cd7b0c3a738e2e6c2129ca8a840f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57", "patch": "@@ -1,3 +1,8 @@\n+2016-09-09  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR rtl-optimization/77289\n+\t* gcc.target/powerpc/pr77289.c: New test.\n+\n 2016-09-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/77420"}, {"sha": "f8ebf1f9309b502d53128fc68234d3882d4e0ae6", "filename": "gcc/testsuite/gcc.target/powerpc/pr77289.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr77289.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr77289.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr77289.c?ref=9d0a9bb43a5c08661bb4ad498e3f4433e8f58f57", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n+/* { dg-options \"-O3 -mcpu=power7 -funroll-loops -ffast-math -mlra -mupdate -fno-auto-inc-dec\" } */\n+\n+/* PR 77289: LRA ICEs due to invalid constraint checking.  */\n+\n+void dummy0 (float *);\n+float bar0 (float);\n+void\n+foo0 (long a, long b)\n+{\n+  float c[0];\n+  b = 0;\n+  for (; b < a; b++)\n+    c[b] = bar0 (c[b]);\n+  dummy0 (c);\n+}\n+\n+void dummy1 (long *);\n+long bar1 (long);\n+void\n+foo1 (long a, long b)\n+{\n+  long array[128];\n+  long *c = array;\n+  for (b=0; b < a; b++)\n+    c[b] = bar1 (c[b]);\n+  dummy1 (c);\n+}"}]}