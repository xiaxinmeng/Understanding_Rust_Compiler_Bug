{"sha": "66cce54da0e53c27e2b59ebb416c95e54191e9fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZjY2U1NGRhMGU1M2MyN2UyYjU5ZWJiNDE2Yzk1ZTU0MTkxZTlmYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-01-26T22:32:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-01-26T22:32:51Z"}, "message": "alias.c (objects_must_conflict_p): Read-only slots may not conflict despite having the same type.\n\n        * alias.c (objects_must_conflict_p): Read-only slots may not\n        conflict despite having the same type.\n\nFrom-SVN: r39285", "tree": {"sha": "4ab095b755e11bdca971d1ee0b306a5ff2acff6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ab095b755e11bdca971d1ee0b306a5ff2acff6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66cce54da0e53c27e2b59ebb416c95e54191e9fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66cce54da0e53c27e2b59ebb416c95e54191e9fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66cce54da0e53c27e2b59ebb416c95e54191e9fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66cce54da0e53c27e2b59ebb416c95e54191e9fc/comments", "author": null, "committer": null, "parents": [{"sha": "616fde536ecb92831bff313532f99121c9695c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616fde536ecb92831bff313532f99121c9695c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616fde536ecb92831bff313532f99121c9695c5a"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "1441a6f49f15366a4dcbe6141c46696d35aff2cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66cce54da0e53c27e2b59ebb416c95e54191e9fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66cce54da0e53c27e2b59ebb416c95e54191e9fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66cce54da0e53c27e2b59ebb416c95e54191e9fc", "patch": "@@ -1,3 +1,8 @@\n+2001-01-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* alias.c (objects_must_conflict_p): Read-only slots may not\n+\tconflict despite having the same type.\n+\n 2001-01-27  Michael Hayes  <mhayes@redhat.com>\n \n \t* loop.c (loop_giv_reduce_benefit): Copy mode size into"}, {"sha": "85bce38c70f0fd80e1d47d9cf256280a05abeccd", "filename": "gcc/alias.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66cce54da0e53c27e2b59ebb416c95e54191e9fc/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66cce54da0e53c27e2b59ebb416c95e54191e9fc/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=66cce54da0e53c27e2b59ebb416c95e54191e9fc", "patch": "@@ -309,21 +309,24 @@ int\n objects_must_conflict_p (t1, t2)\n      tree t1, t2;\n {\n+  /* If one or the other has readonly fields or is readonly,\n+     then they may not conflict.  */\n+  if ((t1 != 0 && readonly_fields_p (t1))\n+      || (t2 != 0 && readonly_fields_p (t2))\n+      || (t1 != 0 && TYPE_READONLY (t1))\n+      || (t2 != 0 && TYPE_READONLY (t2)))\n+    return 0;\n+\n   /* If they are the same type, they must conflict.  */\n   if (t1 == t2\n       /* Likewise if both are volatile.  */\n       || (t1 != 0 && TYPE_VOLATILE (t1) && t2 != 0 && TYPE_VOLATILE (t2)))\n     return 1;\n \n-  /* We now know they are different types.  If one or both has readonly fields\n-     or if one is readonly and the other not, they may not conflict.\n-     Likewise if one is aggregate and the other is scalar.  */\n-  if ((t1 != 0 && readonly_fields_p (t1))\n-      || (t2 != 0 && readonly_fields_p (t2))\n-      || ((t1 != 0 && TYPE_READONLY (t1))\n-\t  != (t2 != 0 && TYPE_READONLY (t2)))\n-      || ((t1 != 0 && AGGREGATE_TYPE_P (t1))\n-\t  != (t2 != 0 && AGGREGATE_TYPE_P (t2))))\n+  /* If one is aggregate and the other is scalar then they may not\n+     conflict.  */\n+  if ((t1 != 0 && AGGREGATE_TYPE_P (t1))\n+      != (t2 != 0 && AGGREGATE_TYPE_P (t2)))\n     return 0;\n \n   /* Otherwise they conflict only if the alias sets conflict. */"}]}