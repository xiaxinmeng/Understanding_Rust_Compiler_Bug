{"sha": "e22daa4bb5154115b93f2e7b86a7d1ae74203eab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIyZGFhNGJiNTE1NDExNWI5M2YyZTdiODZhN2QxYWU3NDIwM2VhYg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-07T01:43:12Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-07T01:43:12Z"}, "message": "sh-protos.h (sh_cbranch_distance): Declare new function.\n\ngcc/\n\t* config/sh/sh-protos.h (sh_cbranch_distance): Declare new function.\n\t* config/sh/sh.c (sh_cbranch_distance): Implement it.\n\t* config/sh/sh.md (branch_zero): Remove define_attr.\n\t(define_delay): Disable delay slot if branch distance is one insn.\n\nFrom-SVN: r235993", "tree": {"sha": "019549dc5101b56c3c0979da4c612e4f8e3c5791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/019549dc5101b56c3c0979da4c612e4f8e3c5791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e22daa4bb5154115b93f2e7b86a7d1ae74203eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e22daa4bb5154115b93f2e7b86a7d1ae74203eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e22daa4bb5154115b93f2e7b86a7d1ae74203eab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e22daa4bb5154115b93f2e7b86a7d1ae74203eab/comments", "author": null, "committer": null, "parents": [{"sha": "02ceba4404cb60d30370aebccf110b1240a69e12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ceba4404cb60d30370aebccf110b1240a69e12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ceba4404cb60d30370aebccf110b1240a69e12"}], "stats": {"total": 82, "additions": 71, "deletions": 11}, "files": [{"sha": "ce10e79d4e51f2c8ac892335d1dea643c950774b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e22daa4bb5154115b93f2e7b86a7d1ae74203eab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e22daa4bb5154115b93f2e7b86a7d1ae74203eab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e22daa4bb5154115b93f2e7b86a7d1ae74203eab", "patch": "@@ -1,3 +1,10 @@\n+2016-05-07  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh-protos.h (sh_cbranch_distance): Declare new function.\n+\t* config/sh/sh.c (sh_cbranch_distance): Implement it.\n+\t* config/sh/sh.md (branch_zero): Remove define_attr.\n+\t(define_delay): Disable delay slot if branch distance is one insn.\n+\n 2016-05-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (LEAMODE): New mode attribute."}, {"sha": "d302394d52e46897ffdf57dfc8bf5dbe30e22239", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e22daa4bb5154115b93f2e7b86a7d1ae74203eab/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e22daa4bb5154115b93f2e7b86a7d1ae74203eab/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=e22daa4bb5154115b93f2e7b86a7d1ae74203eab", "patch": "@@ -348,6 +348,18 @@ class sh_treg_insns\n \n extern sh_treg_insns sh_split_treg_set_expr (rtx x, rtx_insn* curr_insn);\n \n+enum\n+{\n+  /* An effective conditional branch distance of zero bytes is impossible.\n+     Hence we can use it to designate an unknown value.  */\n+  unknown_cbranch_distance = 0u,\n+  infinite_cbranch_distance = ~0u\n+};\n+\n+unsigned int\n+sh_cbranch_distance (rtx_insn* cbranch_insn,\n+\t\t     unsigned int max_dist = infinite_cbranch_distance);\n+\n #endif /* RTX_CODE */\n \n extern void sh_cpu_cpp_builtins (cpp_reader* pfile);"}, {"sha": "6d1d1a38eeb7aff05bd83e2a2b050ff09720d042", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e22daa4bb5154115b93f2e7b86a7d1ae74203eab/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e22daa4bb5154115b93f2e7b86a7d1ae74203eab/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e22daa4bb5154115b93f2e7b86a7d1ae74203eab", "patch": "@@ -1928,6 +1928,52 @@ sh_fixed_condition_code_regs (unsigned int* p1, unsigned int* p2)\n   return true;\n }\n \n+/* Try to calculate the branch distance of a conditional branch in bytes.\n+\n+   FIXME: Because of PR 59189 we can't use the CFG here.  Instead just\n+   walk from this insn into the next (fall-through) basic block and see if\n+   we hit the label.  */\n+unsigned int\n+sh_cbranch_distance (rtx_insn* _cbranch_insn, unsigned int max_dist)\n+{\n+  rtx_jump_insn* cbranch_insn = safe_as_a<rtx_jump_insn*> (_cbranch_insn);\n+\n+  if (dump_file)\n+    {\n+      fprintf (dump_file, \"sh_cbranch_distance insn = \\n\");\n+      print_rtl_single (dump_file, cbranch_insn);\n+    }\n+\n+  unsigned int dist = 0;\n+\n+  for (rtx_insn* i = next_nonnote_insn (cbranch_insn);\n+       i != NULL && dist < max_dist; i = next_nonnote_insn (i))\n+    {\n+      const unsigned int i_len = get_attr_length (i);\n+      dist += i_len;\n+\n+      if (dump_file)\n+\tfprintf (dump_file, \"  insn %d  length = %u  dist = %u\\n\",\n+\t\t INSN_UID (i), i_len, dist);\n+\n+      if (rtx_code_label* l = dyn_cast<rtx_code_label*> (i))\n+\t{\n+\t  if (l == cbranch_insn->jump_target ())\n+\t    {\n+\t      if (dump_file)\n+\t\tfprintf (dump_file, \"  cbranch dist = %u\\n\", dist);\n+\t      return dist;\n+\t    }\n+\t  break;\n+\t}\n+    }\n+\n+  if (dump_file)\n+    fprintf (dump_file, \"  cbranch dist = unknown\\n\");\n+\n+  return unknown_cbranch_distance;\n+}\n+\n enum rtx_code\n prepare_cbranch_operands (rtx *operands, machine_mode mode,\n \t\t\t  enum rtx_code comparison)"}, {"sha": "406721dc7369ff665f6001ee41f59d3025e63fab", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e22daa4bb5154115b93f2e7b86a7d1ae74203eab/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e22daa4bb5154115b93f2e7b86a7d1ae74203eab/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=e22daa4bb5154115b93f2e7b86a7d1ae74203eab", "patch": "@@ -477,16 +477,6 @@\n (define_attr \"is_sfunc\" \"\"\n   (if_then_else (eq_attr \"type\" \"sfunc\") (const_int 1) (const_int 0)))\n \n-(define_attr \"branch_zero\" \"yes,no\"\n-  (cond [(eq_attr \"type\" \"!cbranch\") (const_string \"no\")\n-\t (ne (symbol_ref \"(next_active_insn (insn)\\\n-\t\t\t   == (prev_active_insn\\\n-\t\t\t       (XEXP (SET_SRC (PATTERN (insn)), 1))))\\\n-\t\t\t  && get_attr_length (next_active_insn (insn)) == 2\")\n-\t     (const_int 0))\n-\t (const_string \"yes\")]\n-\t(const_string \"no\")))\n-\n ;; SH4 Double-precision computation with double-precision result -\n ;; the two halves are ready at different times.\n (define_attr \"dfp_comp\" \"yes,no\"\n@@ -539,8 +529,13 @@\n \t(eq_attr \"type\" \"!pstore,prget\")) (nil) (nil)])\n \n ;; Conditional branches with delay slots are available starting with SH2.\n+;; If zero displacement conditional branches are fast, disable the delay\n+;; slot if the branch jumps over only one 2-byte insn.\n (define_delay\n-  (and (eq_attr \"type\" \"cbranch\") (match_test \"TARGET_SH2\"))\n+  (and (eq_attr \"type\" \"cbranch\")\n+       (match_test \"TARGET_SH2\")\n+       (not (and (match_test \"TARGET_ZDCBRANCH\")\n+\t\t (match_test \"sh_cbranch_distance (insn, 4) == 2\"))))\n   [(eq_attr \"cond_delay_slot\" \"yes\") (nil) (nil)])\n \f\n ;; -------------------------------------------------------------------------"}]}