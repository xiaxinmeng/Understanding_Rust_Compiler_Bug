{"sha": "5efef981c87dfa6bbbf516775821cd8ed2ca7e81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVmZWY5ODFjODdkZmE2YmJiZjUxNjc3NTgyMWNkOGVkMmNhN2U4MQ==", "commit": {"author": {"name": "Ollie Wild", "email": "aaw@google.com", "date": "2012-08-31T15:47:29Z"}, "committer": {"name": "Ollie Wild", "email": "aaw@gcc.gnu.org", "date": "2012-08-31T15:47:29Z"}, "message": "re PR c++/54197 (Lifetime of reference not properly extended)\n\n2012-08-31  Ollie Wild  <aaw@google.com>\n\n\tPR c++/54197\n\t* gcc/cp/call.c (extend_ref_init_temps_1): Handle COMPOUND_EXPR trees.\n\t* gcc/testsuite/g++.dg/init/lifetime3.C: New test.\n\nFrom-SVN: r190834", "tree": {"sha": "589f7daabbc93367a0dc703715ace6fc0735ea07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/589f7daabbc93367a0dc703715ace6fc0735ea07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5efef981c87dfa6bbbf516775821cd8ed2ca7e81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efef981c87dfa6bbbf516775821cd8ed2ca7e81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5efef981c87dfa6bbbf516775821cd8ed2ca7e81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efef981c87dfa6bbbf516775821cd8ed2ca7e81/comments", "author": {"login": "olliewild", "id": 11523068, "node_id": "MDQ6VXNlcjExNTIzMDY4", "avatar_url": "https://avatars.githubusercontent.com/u/11523068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olliewild", "html_url": "https://github.com/olliewild", "followers_url": "https://api.github.com/users/olliewild/followers", "following_url": "https://api.github.com/users/olliewild/following{/other_user}", "gists_url": "https://api.github.com/users/olliewild/gists{/gist_id}", "starred_url": "https://api.github.com/users/olliewild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olliewild/subscriptions", "organizations_url": "https://api.github.com/users/olliewild/orgs", "repos_url": "https://api.github.com/users/olliewild/repos", "events_url": "https://api.github.com/users/olliewild/events{/privacy}", "received_events_url": "https://api.github.com/users/olliewild/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0336096575e3cf4dd0ac43d65097976631c609df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0336096575e3cf4dd0ac43d65097976631c609df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0336096575e3cf4dd0ac43d65097976631c609df"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "5fb1b41c149162bd9b2cecc1c9a225d23217f609", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efef981c87dfa6bbbf516775821cd8ed2ca7e81/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efef981c87dfa6bbbf516775821cd8ed2ca7e81/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5efef981c87dfa6bbbf516775821cd8ed2ca7e81", "patch": "@@ -1,3 +1,8 @@\n+2012-08-31  Ollie Wild  <aaw@google.com>\n+\n+\tPR c++/54197\n+\t* call.c (extend_ref_init_temps_1): Handle COMPOUND_EXPR trees.\n+\n 2012-08-30  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/50545"}, {"sha": "4d65b3e6dddeb0e86096ca5fbc275be16ed4ca86", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efef981c87dfa6bbbf516775821cd8ed2ca7e81/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efef981c87dfa6bbbf516775821cd8ed2ca7e81/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5efef981c87dfa6bbbf516775821cd8ed2ca7e81", "patch": "@@ -8916,6 +8916,12 @@ extend_ref_init_temps_1 (tree decl, tree init, VEC(tree,gc) **cleanups)\n   tree sub = init;\n   tree *p;\n   STRIP_NOPS (sub);\n+  if (TREE_CODE (sub) == COMPOUND_EXPR)\n+    {\n+      TREE_OPERAND (sub, 1)\n+        = extend_ref_init_temps_1 (decl, TREE_OPERAND (sub, 1), cleanups);\n+      return init;\n+    }\n   if (TREE_CODE (sub) != ADDR_EXPR)\n     return init;\n   /* Deal with binding to a subobject.  */"}, {"sha": "2d3bf4dd61f09eb49ee4bab555602b60ac374dc9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efef981c87dfa6bbbf516775821cd8ed2ca7e81/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efef981c87dfa6bbbf516775821cd8ed2ca7e81/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5efef981c87dfa6bbbf516775821cd8ed2ca7e81", "patch": "@@ -1,3 +1,8 @@\n+2012-08-31  Ollie Wild  <aaw@google.com>\n+\n+\tPR c++/54197\n+\t* g++.dg/init/lifetime3.C: New test.\n+\n 2012-08-31  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/54409"}, {"sha": "d099699f86827979b3a285a84f0c738a71ad2f41", "filename": "gcc/testsuite/g++.dg/init/lifetime3.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efef981c87dfa6bbbf516775821cd8ed2ca7e81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Flifetime3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efef981c87dfa6bbbf516775821cd8ed2ca7e81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Flifetime3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Flifetime3.C?ref=5efef981c87dfa6bbbf516775821cd8ed2ca7e81", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/26714\n+// { dg-do run }\n+\n+extern \"C\" void abort();\n+\n+bool ok = false;\n+struct A {\n+  A() { }\n+  ~A() { if (!ok) abort(); }\n+};\n+\n+struct B {\n+  static A foo() { return A(); }\n+};\n+\n+B b_g;\n+\n+struct scoped_ptr {\n+  B* operator->() const { return &b_g; }\n+  B* get() const { return &b_g; }\n+};\n+\n+B *get() { return &b_g; }\n+\n+int main()\n+{\n+  scoped_ptr f;\n+  const A& ref1 = f->foo();\n+  const A& ref2 = f.get()->foo();\n+  const A& ref3 = get()->foo();\n+  const A& ref4 = B::foo();\n+  B *pf = f.get();\n+  const A& ref5 = pf->foo();\n+\n+\n+  ok = true;\n+}"}]}