{"sha": "5a897a6b1b3e11677fcac3212d14e61d65e893ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE4OTdhNmIxYjNlMTE2NzdmY2FjMzIxMmQxNGU2MWQ2NWU4OTNlYQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-06-13T14:20:33Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-06-14T06:19:21Z"}, "message": "Pick up global ranges in ranger after inlining.\n\nRanger was not picking up global ranges because doing so could remove\n__builtin_unreachable calls too early to the detriment of LTO.  However,\nwe can safely remove these calls after inlining.  This patch removes the\nrestriction and allows ranger to pick up global ranges under these\ncircumstances.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* value-query.cc (gimple_range_global): Call get_range_global\n\tif called after inlining.", "tree": {"sha": "7d474e2047b1fa5cc2b64557971a2cfe27b4d7b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d474e2047b1fa5cc2b64557971a2cfe27b4d7b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a897a6b1b3e11677fcac3212d14e61d65e893ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a897a6b1b3e11677fcac3212d14e61d65e893ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a897a6b1b3e11677fcac3212d14e61d65e893ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a897a6b1b3e11677fcac3212d14e61d65e893ea/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed14a956aef878150e40130c99f9c1fbf2b548b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed14a956aef878150e40130c99f9c1fbf2b548b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed14a956aef878150e40130c99f9c1fbf2b548b1"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "93609f3c7c42ab6178da20d5a50790e465423e34", "filename": "gcc/value-query.cc", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a897a6b1b3e11677fcac3212d14e61d65e893ea/gcc%2Fvalue-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a897a6b1b3e11677fcac3212d14e61d65e893ea/gcc%2Fvalue-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.cc?ref=5a897a6b1b3e11677fcac3212d14e61d65e893ea", "patch": "@@ -397,22 +397,28 @@ get_range_global (irange &r, tree name)\n     r.set_varying (type);\n }\n \n-// ?? Like above, but only for default definitions of NAME.  This is\n-// so VRP passes using ranger do not start with known ranges,\n-// otherwise we'd eliminate builtin_unreachables too early because of\n-// inlining.\n+// This is where the ranger picks up global info to seed initial\n+// requests.  It is a slightly restricted version of\n+// get_range_global() above.\n+//\n+// The reason for the difference is that we can always pick the\n+// default definition of an SSA with no adverse effects, but for other\n+// SSAs, if we pick things up to early, we may prematurely eliminate\n+// builtin_unreachables.\n //\n // Without this restriction, the test in g++.dg/tree-ssa/pr61034.C has\n-// all of its unreachable calls removed too early.  We should\n-// investigate whether we should just adjust the test above.\n+// all of its unreachable calls removed too early.\n+//\n+// See discussion here:\n+// https://gcc.gnu.org/pipermail/gcc-patches/2021-June/571709.html\n \n value_range\n gimple_range_global (tree name)\n {\n   gcc_checking_assert (gimple_range_ssa_p (name));\n   tree type = TREE_TYPE (name);\n \n-  if (SSA_NAME_IS_DEFAULT_DEF (name))\n+  if (SSA_NAME_IS_DEFAULT_DEF (name) || (cfun && cfun->after_inlining))\n     {\n       value_range vr;\n       get_range_global (vr, name);"}]}