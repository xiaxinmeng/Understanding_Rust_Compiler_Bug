{"sha": "dea55da563cb79e1577cc2c6cfd7b3e3ace043bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVhNTVkYTU2M2NiNzllMTU3N2NjMmM2Y2ZkN2IzZTNhY2UwNDNiYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2003-07-11T05:49:47Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-07-11T05:49:47Z"}, "message": "cppcharset.c: Fix comment.\n\n\t* cppcharset.c: Fix comment.\n\t(iconv_close [!HAVE_ICONV]): #define to (void)0 to prevent warning.\n\t(EILSEQ): #define to EINVAL if not already defined.\n\t(convert_using_iconv): #if out when !HAVE_ICONV.\n\t(init_iconv_desc): Handle !HAVE_ICONV here...\n\t(cpp_init_iconv): ...not here.\n\nFrom-SVN: r69218", "tree": {"sha": "05205d4ede93891a8d88e5355c3fa54b1234f337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05205d4ede93891a8d88e5355c3fa54b1234f337"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dea55da563cb79e1577cc2c6cfd7b3e3ace043bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea55da563cb79e1577cc2c6cfd7b3e3ace043bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dea55da563cb79e1577cc2c6cfd7b3e3ace043bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dea55da563cb79e1577cc2c6cfd7b3e3ace043bb/comments", "author": null, "committer": null, "parents": [{"sha": "f3fdaec48d8cd520d5b7c70136ea551155a10257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3fdaec48d8cd520d5b7c70136ea551155a10257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3fdaec48d8cd520d5b7c70136ea551155a10257"}], "stats": {"total": 85, "additions": 48, "deletions": 37}, "files": [{"sha": "a9023445767df57d6ae2011aa3ac33e390819969", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea55da563cb79e1577cc2c6cfd7b3e3ace043bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea55da563cb79e1577cc2c6cfd7b3e3ace043bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dea55da563cb79e1577cc2c6cfd7b3e3ace043bb", "patch": "@@ -1,3 +1,12 @@\n+2003-07-10  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* cppcharset.c: Fix comment.\n+\t(iconv_close [!HAVE_ICONV]): #define to (void)0 to prevent warning.\n+\t(EILSEQ): #define to EINVAL if not already defined.\n+\t(convert_using_iconv): #if out when !HAVE_ICONV.\n+\t(init_iconv_desc): Handle !HAVE_ICONV here...\n+\t(cpp_init_iconv): ...not here.\n+\n 2003-07-11  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* common.opt: More --help messages."}, {"sha": "763176500aa7d67a9e6aded12b630ff2d955b3c2", "filename": "gcc/cppcharset.c", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dea55da563cb79e1577cc2c6cfd7b3e3ace043bb/gcc%2Fcppcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dea55da563cb79e1577cc2c6cfd7b3e3ace043bb/gcc%2Fcppcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppcharset.c?ref=dea55da563cb79e1577cc2c6cfd7b3e3ace043bb", "patch": "@@ -67,20 +67,17 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n    cpplib uses UTF-8 or UTF-EBCDIC for the source character set,\n    depending on whether the host is based on ASCII or EBCDIC (see\n    respectively Unicode section 2.3/ISO10646 Amendment 2, and Unicode\n-   Technical Report #16).  It relies on the system library's iconv()\n-   primitive to do charset conversion (specified in SUSv2).  If this\n-   primitive is not present, the source and execution character sets\n-   must be identical and are limited to the basic ASCII or EBCDIC\n-   range, and wide characters are implemented by padding narrow\n-   characters to the size of wchar_t.  */\n+   Technical Report #16).  With limited exceptions, it relies on the\n+   system library's iconv() primitive to do charset conversion\n+   (specified in SUSv2).  */\n \n #if !HAVE_ICONV\n /* Make certain that the uses of iconv(), iconv_open(), iconv_close()\n    below, which are guarded only by if statements with compile-time\n    constant conditions, do not cause link errors.  */\n #define iconv_open(x, y) (errno = EINVAL, (iconv_t)-1)\n #define iconv(a,b,c,d,e) (errno = EINVAL, (size_t)-1)\n-#define iconv_close(x)   0\n+#define iconv_close(x)   (void)0\n #define ICONV_CONST\n #endif\n \n@@ -92,6 +89,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #error \"Unrecognized basic host character set\"\n #endif\n \n+#ifndef EILSEQ\n+#define EILSEQ EINVAL\n+#endif\n+\n /* This structure is used for a resizable string buffer throughout.  */\n struct strbuf\n {\n@@ -545,7 +546,7 @@ convert_no_conversion (iconv_t cd ATTRIBUTE_UNUSED,\n \n /* And this one uses the system iconv primitive.  It's a little\n    different, since iconv's interface is a little different.  */\n-\n+#if HAVE_ICONV\n static bool\n convert_using_iconv (iconv_t cd, const uchar *from, size_t flen,\n \t\t     struct strbuf *to)\n@@ -580,6 +581,9 @@ convert_using_iconv (iconv_t cd, const uchar *from, size_t flen,\n       outbuf = (char *)to->text + to->asize - outbytesleft;\n     }\n }\n+#else\n+#define convert_using_iconv 0 /* prevent undefined symbol error below */\n+#endif\n \n /* Arrange for the above custom conversion logic to be used automatically\n    when conversion between a suitable pair of character sets is requested.  */\n@@ -637,19 +641,30 @@ init_iconv_desc (cpp_reader *pfile, const char *to, const char *from)\n       }\n \n   /* No custom converter - try iconv.  */\n-  ret.func = convert_using_iconv;\n-  ret.cd = iconv_open (to, from);\n-\n-  if (ret.cd == (iconv_t) -1)\n+  if (HAVE_ICONV)\n     {\n-      if (errno == EINVAL)\n-\tcpp_error (pfile, DL_ERROR, /* XXX should be DL_SORRY */\n-\t\t   \"conversion from %s to %s not supported by iconv\",\n-\t\t   from, to);\n-      else\n-\tcpp_errno (pfile, DL_ERROR, \"iconv_open\");\n+      ret.func = convert_using_iconv;\n+      ret.cd = iconv_open (to, from);\n \n+      if (ret.cd == (iconv_t) -1)\n+\t{\n+\t  if (errno == EINVAL)\n+\t    cpp_error (pfile, DL_ERROR, /* XXX should be DL_SORRY */\n+\t\t       \"conversion from %s to %s not supported by iconv\",\n+\t\t       from, to);\n+\t  else\n+\t    cpp_errno (pfile, DL_ERROR, \"iconv_open\");\n+\n+\t  ret.func = convert_no_conversion;\n+\t}\n+    }\n+  else\n+    {\n+      cpp_error (pfile, DL_ERROR, /* XXX should be DL_SORRY */\n+\t\t \"no iconv implementation, cannot convert from %s to %s\",\n+\t\t from, to);\n       ret.func = convert_no_conversion;\n+      ret.cd = (iconv_t) -1;\n     }\n   return ret;\n }\n@@ -677,26 +692,13 @@ cpp_init_iconv (cpp_reader *pfile)\n        so don't do any conversion at all.  */\n    default_wcset = SOURCE_CHARSET;\n \n-  if (!HAVE_ICONV)\n-    {\n-      if (ncset && strcmp (ncset, SOURCE_CHARSET))\n-\tcpp_error (pfile, DL_ERROR,  /* XXX should be DL_SORRY */\n-\t\t   \"no iconv implementation, cannot convert to %s\", ncset);\n-\n-      if (wcset && strcmp (wcset, default_wcset))\n-\tcpp_error (pfile, DL_ERROR,  /* XXX should be DL_SORRY */\n-\t\t   \"no iconv implementation, cannot convert to %s\", wcset);\n-    }\n-  else\n-    {\n-      if (!ncset)\n-\tncset = SOURCE_CHARSET;\n-      if (!wcset)\n-\twcset = default_wcset;\n+  if (!ncset)\n+    ncset = SOURCE_CHARSET;\n+  if (!wcset)\n+    wcset = default_wcset;\n \n-      pfile->narrow_cset_desc = init_iconv_desc (pfile, ncset, SOURCE_CHARSET);\n-      pfile->wide_cset_desc = init_iconv_desc (pfile, wcset, SOURCE_CHARSET);\n-    }\n+  pfile->narrow_cset_desc = init_iconv_desc (pfile, ncset, SOURCE_CHARSET);\n+  pfile->wide_cset_desc = init_iconv_desc (pfile, wcset, SOURCE_CHARSET);\n }\n \n void"}]}