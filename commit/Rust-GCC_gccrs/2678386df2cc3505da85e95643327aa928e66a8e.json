{"sha": "2678386df2cc3505da85e95643327aa928e66a8e", "node_id": "C_kwDOANBUbNoAKDI2NzgzODZkZjJjYzM1MDVkYTg1ZTk1NjQzMzI3YWE5MjhlNjZhOGU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-04T12:08:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-04T18:37:56Z"}, "message": "libstdc++: Make std::string_view(Range&&) constructor explicit\n\nThe P2499R0 paper was recently approved for C++23.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/string_view (basic_string_view(Range&&)): Add\n\texplicit as per P2499R0.\n\t* testsuite/21_strings/basic_string_view/cons/char/range_c++20.cc:\n\tAdjust implicit conversions. Check implicit conversions fail.\n\t* testsuite/21_strings/basic_string_view/cons/wchar_t/range_c++20.cc:\n\tLikewise.", "tree": {"sha": "e5846f2b93b3022285888ce36edf356341c551cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5846f2b93b3022285888ce36edf356341c551cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2678386df2cc3505da85e95643327aa928e66a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2678386df2cc3505da85e95643327aa928e66a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2678386df2cc3505da85e95643327aa928e66a8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2678386df2cc3505da85e95643327aa928e66a8e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db33daa4677997399485176303406794dc900987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db33daa4677997399485176303406794dc900987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db33daa4677997399485176303406794dc900987"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "30ff136b1cb725bee6c9b557429f201716adcc0a", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2678386df2cc3505da85e95643327aa928e66a8e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2678386df2cc3505da85e95643327aa928e66a8e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=2678386df2cc3505da85e95643327aa928e66a8e", "patch": "@@ -162,7 +162,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      })\n \t  && (!requires { typename _DRange::traits_type; }\n \t      || is_same_v<typename _DRange::traits_type, _Traits>)\n-\tconstexpr\n+\tconstexpr explicit\n \tbasic_string_view(_Range&& __r)\n \tnoexcept(noexcept(ranges::size(__r)) && noexcept(ranges::data(__r)))\n \t: _M_len(ranges::size(__r)), _M_str(ranges::data(__r))"}, {"sha": "a5745fcb6033da35edede89e0b5da0b4a25fc719", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/char/range_c++20.cc", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2678386df2cc3505da85e95643327aa928e66a8e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Frange_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2678386df2cc3505da85e95643327aa928e66a8e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Frange_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Frange_c%2B%2B20.cc?ref=2678386df2cc3505da85e95643327aa928e66a8e", "patch": "@@ -36,7 +36,7 @@ test01()\n   };\n \n   R r;\n-  std::string_view s = r;\n+  std::string_view s{r};\n   VERIFY( s == r.str );\n   VERIFY( s.data() == std::ranges::data(r) );\n   VERIFY( s.size() == std::ranges::size(r) );\n@@ -50,10 +50,15 @@ test01()\n   static_assert( std::ranges::contiguous_range<R2> );\n   static_assert( std::ranges::sized_range<R2> );\n   R2 r2;\n-  std::string_view s2 = r2; // uses conversion to string_view\n+  std::string_view s2(r2); // uses conversion to string_view\n   VERIFY( s2 == \"Out of range\" );\n   VERIFY( std::string_view(const_cast<const R2&>(r2)) == s2 );\n \n+  // And again using copy-initialization instead of direct-initialization.\n+  std::string_view s2_implicit = r2; // uses conversion to string_view\n+  VERIFY( s2_implicit == \"Out of range\" );\n+  VERIFY( std::string_view(const_cast<const R2&>(r2)) == s2_implicit );\n+\n   struct R3 : R\n   {\n     using R::begin;\n@@ -91,7 +96,7 @@ test01()\n   static_assert( std::ranges::contiguous_range<R5> );\n   static_assert( std::ranges::sized_range<R5> );\n   R5 r5;\n-  std::string_view s5 = r5; // Uses range constructor\n+  std::string_view s5(r5); // Uses range constructor\n   VERIFY( s5 == r5.str );\n   s5 = std::string_view(std::move(r5)); // In C++20 this used conversion op.\n   VERIFY( s5 == r5.str );\t        // In C++23 it uses range constructor.\n@@ -156,15 +161,30 @@ test04()\n   };\n \n   R r;\n-  std::basic_string_view s = r; // Use deduction guide.\n+  std::basic_string_view s(r); // Use deduction guide.\n \n   static_assert( std::is_same_v<decltype(s), std::string_view> );\n }\n \n+void\n+test05()\n+{\n+  struct R\n+  {\n+    const char* begin() const { return nullptr; }\n+    const char* end() const { return nullptr; }\n+  };\n+\n+  // P2499R0 string_view range constructor should be explicit\n+  // P2516R0 string_view is implicitly convertible from what?\n+  static_assert( ! std::is_convertible_v<R, std::string_view> );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n }"}, {"sha": "af3c986e56f5575aa1851b89e5546ef86e061373", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/wchar_t/range_c++20.cc", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2678386df2cc3505da85e95643327aa928e66a8e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2Frange_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2678386df2cc3505da85e95643327aa928e66a8e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2Frange_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2Frange_c%2B%2B20.cc?ref=2678386df2cc3505da85e95643327aa928e66a8e", "patch": "@@ -36,7 +36,7 @@ test01()\n   };\n \n   R r;\n-  std::wstring_view s = r;\n+  std::wstring_view s{r};\n   VERIFY( s == r.str );\n   VERIFY( s.data() == std::ranges::data(r) );\n   VERIFY( s.size() == std::ranges::size(r) );\n@@ -50,10 +50,15 @@ test01()\n   static_assert( std::ranges::contiguous_range<R2> );\n   static_assert( std::ranges::sized_range<R2> );\n   R2 r2;\n-  std::wstring_view s2 = r2; // uses conversion to wstring_view\n+  std::wstring_view s2(r2); // uses conversion to wstring_view\n   VERIFY( s2 == L\"Out of range\" );\n   VERIFY( std::wstring_view(const_cast<const R2&>(r2)) == s2 );\n \n+  // And again using copy-initialization instead of direct-initialization.\n+  std::wstring_view s2_implicit = r2; // uses conversion to wstring_view\n+  VERIFY( s2_implicit == L\"Out of range\" );\n+  VERIFY( std::wstring_view(const_cast<const R2&>(r2)) == s2_implicit );\n+\n   struct R3 : R\n   {\n     using R::begin;\n@@ -91,10 +96,10 @@ test01()\n   static_assert( std::ranges::contiguous_range<R5> );\n   static_assert( std::ranges::sized_range<R5> );\n   R5 r5;\n-  std::wstring_view s5 = r5; // Uses range constructor\n+  std::wstring_view s5(r5); // Uses range constructor\n   VERIFY( s5 == r5.str );\n   s5 = std::wstring_view(std::move(r5)); // In C++20 this used conversion op.\n-  VERIFY( s5 == r5.str );\t        // In C++23 it uses range constructor.\n+  VERIFY( s5 == r5.str );\t         // In C++23 it uses range constructor.\n \n   wchar_t arr[] = L\"arrangement\\0with\\0nulls\";\n   std::wstring_view sa = arr; // Does not use range constructor\n@@ -156,15 +161,30 @@ test04()\n   };\n \n   R r;\n-  std::basic_string_view s = r; // Use deduction guide.\n+  std::basic_string_view s(r); // Use deduction guide.\n \n   static_assert( std::is_same_v<decltype(s), std::wstring_view> );\n }\n \n+void\n+test05()\n+{\n+  struct R\n+  {\n+    const wchar_t* begin() const { return nullptr; }\n+    const wchar_t* end() const { return nullptr; }\n+  };\n+\n+  // P2499R0 string_view range constructor should be explicit\n+  // P2516R0 string_view is implicitly convertible from what?\n+  static_assert( ! std::is_convertible_v<R, std::wstring_view> );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n }"}]}