{"sha": "413581bae8721d0de4bfd7e3c1a419750697c560", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEzNTgxYmFlODcyMWQwZGU0YmZkN2UzYzFhNDE5NzUwNjk3YzU2MA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-04-29T12:00:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-04-29T12:00:55Z"}, "message": "tree-nested.c (get_trampoline_type): Use size_int.\n\n2011-04-29  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-nested.c (get_trampoline_type): Use size_int.\n\t(get_nl_goto_field): Likewise.\n\t* tree-eh.c (lower_try_finally_switch): Use integer_type_node\n\tfor all indexes.\n\t(lower_eh_constructs_2): Likewise.\n\t(lower_resx): Likewise.\n\t(lower_eh_dispatch): Likewise.\n\t* tree-mudflap.c (mf_build_string): Use size_int.\n\t(mudflap_register_call): Use integer_type_node for the flag.\n\t(mudflap_enqueue_constant): Use size_int.\n\t* tree-chrec.c (reset_evolution_in_loop): Copy CHREC_VAR\n\tinstead of rebuilding it.\n\nFrom-SVN: r173153", "tree": {"sha": "52dcec23eb32763b819accc2f89a34aabd9cc25c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52dcec23eb32763b819accc2f89a34aabd9cc25c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/413581bae8721d0de4bfd7e3c1a419750697c560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413581bae8721d0de4bfd7e3c1a419750697c560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/413581bae8721d0de4bfd7e3c1a419750697c560", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413581bae8721d0de4bfd7e3c1a419750697c560/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c04e9f475d8916abcecd7498ec506e3300f11ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c04e9f475d8916abcecd7498ec506e3300f11ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c04e9f475d8916abcecd7498ec506e3300f11ca"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "13f36591d26dbc2e4d9a1dac723df5a078e2484b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413581bae8721d0de4bfd7e3c1a419750697c560/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413581bae8721d0de4bfd7e3c1a419750697c560/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=413581bae8721d0de4bfd7e3c1a419750697c560", "patch": "@@ -1,3 +1,18 @@\n+2011-04-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-nested.c (get_trampoline_type): Use size_int.\n+\t(get_nl_goto_field): Likewise.\n+\t* tree-eh.c (lower_try_finally_switch): Use integer_type_node\n+\tfor all indexes.\n+\t(lower_eh_constructs_2): Likewise.\n+\t(lower_resx): Likewise.\n+\t(lower_eh_dispatch): Likewise.\n+\t* tree-mudflap.c (mf_build_string): Use size_int.\n+\t(mudflap_register_call): Use integer_type_node for the flag.\n+\t(mudflap_enqueue_constant): Use size_int.\n+\t* tree-chrec.c (reset_evolution_in_loop): Copy CHREC_VAR\n+\tinstead of rebuilding it.\n+\n 2011-04-29  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (get_fi_for_callee): Restructure."}, {"sha": "6d1dd22bbebf5cbb809953172324898d2230a0b0", "filename": "gcc/tree-chrec.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413581bae8721d0de4bfd7e3c1a419750697c560/gcc%2Ftree-chrec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413581bae8721d0de4bfd7e3c1a419750697c560/gcc%2Ftree-chrec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chrec.c?ref=413581bae8721d0de4bfd7e3c1a419750697c560", "patch": "@@ -843,8 +843,7 @@ reset_evolution_in_loop (unsigned loop_num,\n       tree right = reset_evolution_in_loop (loop_num, CHREC_RIGHT (chrec),\n \t\t\t\t\t    new_evol);\n       return build3 (POLYNOMIAL_CHREC, TREE_TYPE (left),\n-\t\t     build_int_cst (NULL_TREE, CHREC_VARIABLE (chrec)),\n-\t\t     left, right);\n+\t\t     CHREC_VAR (chrec), left, right);\n     }\n \n   while (TREE_CODE (chrec) == POLYNOMIAL_CHREC"}, {"sha": "ceb2ff4cd022dddb5b623f90fde5d75b77486e05", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413581bae8721d0de4bfd7e3c1a419750697c560/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413581bae8721d0de4bfd7e3c1a419750697c560/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=413581bae8721d0de4bfd7e3c1a419750697c560", "patch": "@@ -1336,11 +1336,12 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n   if (tf->may_fallthru)\n     {\n       x = gimple_build_assign (finally_tmp,\n-\t\t\t       build_int_cst (NULL, fallthru_index));\n+\t\t\t       build_int_cst (integer_type_node,\n+\t\t\t\t\t      fallthru_index));\n       gimple_seq_add_stmt (&tf->top_p_seq, x);\n \n       last_case = build3 (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t  build_int_cst (NULL, fallthru_index),\n+\t\t\t  build_int_cst (integer_type_node, fallthru_index),\n \t\t\t  NULL, create_artificial_label (tf_loc));\n       VEC_quick_push (tree, case_label_vec, last_case);\n       last_case_index++;\n@@ -1358,14 +1359,14 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n       emit_post_landing_pad (&eh_seq, tf->region);\n \n       x = gimple_build_assign (finally_tmp,\n-\t\t\t       build_int_cst (NULL, eh_index));\n+\t\t\t       build_int_cst (integer_type_node, eh_index));\n       gimple_seq_add_stmt (&eh_seq, x);\n \n       x = gimple_build_goto (finally_label);\n       gimple_seq_add_stmt (&eh_seq, x);\n \n       last_case = build3 (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t  build_int_cst (NULL, eh_index),\n+\t\t\t  build_int_cst (integer_type_node, eh_index),\n \t\t\t  NULL, create_artificial_label (tf_loc));\n       VEC_quick_push (tree, case_label_vec, last_case);\n       last_case_index++;\n@@ -1397,15 +1398,16 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n       if (q->index < 0)\n \t{\n \t  x = gimple_build_assign (finally_tmp,\n-\t\t\t\t   build_int_cst (NULL, return_index));\n+\t\t\t\t   build_int_cst (integer_type_node,\n+\t\t\t\t\t\t  return_index));\n \t  gimple_seq_add_stmt (&mod, x);\n \t  do_return_redirection (q, finally_label, mod, &return_val);\n \t  switch_id = return_index;\n \t}\n       else\n \t{\n \t  x = gimple_build_assign (finally_tmp,\n-\t\t\t\t   build_int_cst (NULL, q->index));\n+\t\t\t\t   build_int_cst (integer_type_node, q->index));\n \t  gimple_seq_add_stmt (&mod, x);\n \t  do_goto_redirection (q, finally_label, mod, tf);\n \t  switch_id = q->index;\n@@ -1418,7 +1420,7 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n           tree case_lab;\n           void **slot;\n           case_lab = build3 (CASE_LABEL_EXPR, void_type_node,\n-                             build_int_cst (NULL, switch_id),\n+                             build_int_cst (integer_type_node, switch_id),\n \t\t\t     NULL, create_artificial_label (tf_loc));\n           /* We store the cont_stmt in the pointer map, so that we can recover\n              it in the loop below.  */\n@@ -1863,7 +1865,8 @@ lower_eh_constructs_2 (struct leh_state *state, gimple_stmt_iterator *gsi)\n \t\t this zero argument with the current catch region number.  */\n \t      if (state->ehp_region)\n \t\t{\n-\t\t  tree nr = build_int_cst (NULL, state->ehp_region->index);\n+\t\t  tree nr = build_int_cst (integer_type_node,\n+\t\t\t\t\t   state->ehp_region->index);\n \t\t  gimple_call_set_arg (stmt, 0, nr);\n \t\t}\n \t      else\n@@ -2952,10 +2955,10 @@ lower_resx (basic_block bb, gimple stmt, struct pointer_map_t *mnt_map)\n       else\n \t{\n \t  edge_iterator ei;\n-\t  tree dst_nr = build_int_cst (NULL, dst_r->index);\n+\t  tree dst_nr = build_int_cst (integer_type_node, dst_r->index);\n \n \t  fn = implicit_built_in_decls[BUILT_IN_EH_COPY_VALUES];\n-\t  src_nr = build_int_cst (NULL, src_r->index);\n+\t  src_nr = build_int_cst (integer_type_node, src_r->index);\n \t  x = gimple_build_call (fn, 2, dst_nr, src_nr);\n \t  gsi_insert_before (&gsi, x, GSI_SAME_STMT);\n \n@@ -2996,7 +2999,7 @@ lower_resx (basic_block bb, gimple stmt, struct pointer_map_t *mnt_map)\n       else\n \t{\n \t  fn = implicit_built_in_decls[BUILT_IN_EH_POINTER];\n-\t  src_nr = build_int_cst (NULL, src_r->index);\n+\t  src_nr = build_int_cst (integer_type_node, src_r->index);\n \t  x = gimple_build_call (fn, 1, src_nr);\n \t  var = create_tmp_var (ptr_type_node, NULL);\n \t  var = make_ssa_name (var, x);\n@@ -3170,7 +3173,8 @@ lower_eh_dispatch (basic_block src, gimple stmt)\n \telse\n \t  {\n \t    fn = implicit_built_in_decls[BUILT_IN_EH_FILTER];\n-\t    x = gimple_build_call (fn, 1, build_int_cst (NULL, region_nr));\n+\t    x = gimple_build_call (fn, 1, build_int_cst (integer_type_node,\n+\t\t\t\t\t\t\t region_nr));\n \t    filter = create_tmp_var (TREE_TYPE (TREE_TYPE (fn)), NULL);\n \t    filter = make_ssa_name (filter, x);\n \t    gimple_call_set_lhs (x, filter);\n@@ -3196,7 +3200,8 @@ lower_eh_dispatch (basic_block src, gimple stmt)\n \tedge f_e = FALLTHRU_EDGE (src);\n \n \tfn = implicit_built_in_decls[BUILT_IN_EH_FILTER];\n-\tx = gimple_build_call (fn, 1, build_int_cst (NULL, region_nr));\n+\tx = gimple_build_call (fn, 1, build_int_cst (integer_type_node,\n+\t\t\t\t\t\t     region_nr));\n \tfilter = create_tmp_var (TREE_TYPE (TREE_TYPE (fn)), NULL);\n \tfilter = make_ssa_name (filter, x);\n \tgimple_call_set_lhs (x, filter);"}, {"sha": "40120b0dd4f267114abc29d894e857bfac356642", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413581bae8721d0de4bfd7e3c1a419750697c560/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413581bae8721d0de4bfd7e3c1a419750697c560/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=413581bae8721d0de4bfd7e3c1a419750697c560", "patch": "@@ -81,7 +81,7 @@ mf_build_string (const char *string)\n   tree result = mf_mark (build_string (len + 1, string));\n \n   TREE_TYPE (result) = build_array_type\n-    (char_type_node, build_index_type (build_int_cst (NULL_TREE, len)));\n+    (char_type_node, build_index_type (size_int (len)));\n   TREE_CONSTANT (result) = 1;\n   TREE_READONLY (result) = 1;\n   TREE_STATIC (result) = 1;\n@@ -1251,7 +1251,7 @@ mudflap_register_call (tree obj, tree object_size, tree varname)\n \t\t\t       arg,\n \t\t\t       convert (size_type_node, object_size),\n \t\t\t       /* __MF_TYPE_STATIC */\n-\t\t\t       build_int_cst (NULL_TREE, 4),\n+\t\t\t       build_int_cst (integer_type_node, 4),\n \t\t\t       varname);\n \n   append_to_statement_list (call_stmt, &enqueued_call_stmt_chain);\n@@ -1284,7 +1284,7 @@ mudflap_enqueue_constant (tree obj)\n     return;\n \n   if (TREE_CODE (obj) == STRING_CST)\n-    object_size = build_int_cst (NULL_TREE, TREE_STRING_LENGTH (obj));\n+    object_size = size_int (TREE_STRING_LENGTH (obj));\n   else\n     object_size = size_in_bytes (TREE_TYPE (obj));\n "}, {"sha": "1b26eca5a2a2cfb08978c4ec5859031489ebafd1", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/413581bae8721d0de4bfd7e3c1a419750697c560/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/413581bae8721d0de4bfd7e3c1a419750697c560/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=413581bae8721d0de4bfd7e3c1a419750697c560", "patch": "@@ -486,7 +486,7 @@ get_trampoline_type (struct nesting_info *info)\n       align = STACK_BOUNDARY;\n     }\n \n-  t = build_index_type (build_int_cst (NULL_TREE, size - 1));\n+  t = build_index_type (size_int (size - 1));\n   t = build_array_type (char_type_node, t);\n   t = build_decl (DECL_SOURCE_LOCATION (info->context),\n \t\t  FIELD_DECL, get_identifier (\"__data\"), t);\n@@ -561,7 +561,7 @@ get_nl_goto_field (struct nesting_info *info)\n       size = size + 1;\n \n       type = build_array_type\n-\t(type, build_index_type (build_int_cst (NULL_TREE, size)));\n+\t(type, build_index_type (size_int (size)));\n \n       field = make_node (FIELD_DECL);\n       DECL_NAME (field) = get_identifier (\"__nl_goto_buf\");"}]}