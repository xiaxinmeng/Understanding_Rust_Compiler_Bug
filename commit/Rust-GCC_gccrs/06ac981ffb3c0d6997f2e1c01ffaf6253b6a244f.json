{"sha": "06ac981ffb3c0d6997f2e1c01ffaf6253b6a244f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhYzk4MWZmYjNjMGQ2OTk3ZjJlMWMwMWZmYWY2MjUzYjZhMjQ0Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-31T08:29:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-08-31T08:29:23Z"}, "message": "tree-ssa-ccp: Fix up bit_value_binop on RSHIFT_EXPR [PR102134]\n\nAs mentioned in the PR, this hunk is guarded with !wi::neg_p (r1val | r1mask, sgn)\nwhich means if sgn is UNSIGNED, it is always true, but r1val | r1mask in\nwidest_int is still sign-extended.  That means wi::clz (arg) returns 0,\nwi::get_precision (arg) returns some very large number\n(WIDE_INT_MAX_PRECISION, on x86_64 576 bits) and width is 64, so we end up\nwith lzcount of -512 where the code afterwards expects a non-negative\nlzcount.  For arg without the sign bit set the code works right, those\nnumbers are zero extended and so wi::clz must return wi::get_precision (arg) - width\nplus number of leading zero bits within the width precision.\nThe patch fixes it by handling the sign-extension specially, either it could\nbe done through wi::neg_p (arg) check, but lzcount == 0 works identically.\n\n2021-08-31  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/102134\n\t* tree-ssa-ccp.c (bit_value_binop) <case RSHIFT_EXPR>: If sgn is\n\tUNSIGNED and r1val | r1mask has MSB set, ensure lzcount doesn't\n\tbecome negative.\n\n\t* gcc.c-torture/execute/pr102134.c: New test.", "tree": {"sha": "f591a07ea017fb479fc5641299b480a1920062bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f591a07ea017fb479fc5641299b480a1920062bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06ac981ffb3c0d6997f2e1c01ffaf6253b6a244f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ac981ffb3c0d6997f2e1c01ffaf6253b6a244f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ac981ffb3c0d6997f2e1c01ffaf6253b6a244f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ac981ffb3c0d6997f2e1c01ffaf6253b6a244f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd817ccd26fc9b4a961332da68ca62f050d7624d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd817ccd26fc9b4a961332da68ca62f050d7624d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd817ccd26fc9b4a961332da68ca62f050d7624d"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "55cf4eb70a310cc8811e4a7f100dca7119a9f04a", "filename": "gcc/testsuite/gcc.c-torture/execute/pr102134.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ac981ffb3c0d6997f2e1c01ffaf6253b6a244f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr102134.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ac981ffb3c0d6997f2e1c01ffaf6253b6a244f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr102134.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr102134.c?ref=06ac981ffb3c0d6997f2e1c01ffaf6253b6a244f", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/102134 */\n+\n+typedef unsigned long long u64;\n+\n+u64 g;\n+\n+void\n+foo (u64 a, u64 b, u64 c, u64 *r)\n+{\n+  b *= b;\n+  u64 x = a && ((b >> (c & 63)) | ((b << (c & 63)) & g));\n+  *r = x + a;\n+}\n+\n+int\n+main ()\n+{\n+  u64 x;\n+  foo (1, 3000, 0, &x);\n+  if (x != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "70ce6a4d5b8d1e88e3983ea52aab2944807893c1", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ac981ffb3c0d6997f2e1c01ffaf6253b6a244f/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ac981ffb3c0d6997f2e1c01ffaf6253b6a244f/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=06ac981ffb3c0d6997f2e1c01ffaf6253b6a244f", "patch": "@@ -1695,7 +1695,8 @@ bit_value_binop (enum tree_code code, signop sgn, int width,\n \t      /* Logical right shift, or zero sign bit.  */\n \t      widest_int arg = r1val | r1mask;\n \t      int lzcount = wi::clz (arg);\n-\t      lzcount -= wi::get_precision (arg) - width;\n+\t      if (lzcount)\n+\t\tlzcount -= wi::get_precision (arg) - width;\n \t      widest_int tmp = wi::mask <widest_int> (width, false);\n \t      tmp = wi::lrshift (tmp, lzcount);\n \t      tmp = wi::lrshift (tmp, wi::bit_and_not (r2val, r2mask));"}]}