{"sha": "97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdlZDU4NzJjNjYyOWE5NmZjYzRiNGZmNGNjYWNhNDE5NTBhZTI2Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T13:46:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-05T13:46:16Z"}, "message": "[multiple changes]\n\n2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb: (Check_Private_Overriding): better error message,\n\tsuggested by AI95-0068.\n\n2011-08-05  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Find_Last_Init): Use Next_Suitable_Statement to retrieve\n\tthe two potential initialization calls. This accounts for any\n\taccess-before-elaboration checks which may precede the initialization\n\tcalls.\n\t(Next_Suitable_Statement): New routine. Returns the next real statement\n\tafter the input node while skipping generated checks.\n\t* sem_elab.adb (Check_A_Call): New formal parameter In_Init_Proc along\n\twith comment on usage.\n\tDo not generate Elaborate_All when the trigger is a finalization call\n\tcoming from a type init proc.\n\t(Check_Elab_Call): Propagate the initialization procedure context to\n\tsubsequent calls to Check_A_Call.\n\t(Check_Internal_Call_Continue): Propagate the initialization procedure\n\tcontext to subsequent calls to Check_Elab_Call.\n\t(Is_Finalization_Procedure): New routine. Returns True if the input\n\tentity denotes a [Deep_]Finalize routine.\n\t* sem_elab.ads (Check_Elab_Call): New formal parameter In_Init_Proc\n\talong with comment on usage.\n\n2011-08-05  Vadim Godunko  <godunko@adacore.com>\n\n\t* s-atocou.ads: Add list of supported platforms.\n\n2011-08-05  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb, restrict.adb: Correct style for or'ing Boolean variables\n\n\t* opt.ads (Disable_ALI_File): new Boolean flag\n\t* lib-writ.adb (Write_ALI): when Disable_ALI_File is set, do nothing\n\n2011-08-05  Ed Falis  <falis@adacore.com>\n\n\t* env.c (__gnat_environ): Fix includes for RTPs and VTHREADS so that\n\tenviron is properly defined.\n\n2011-08-05  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb (Compilation_Phase): Exit immediately when all objects have\n\tbeen found up to date, to avoid multiple exit messages.\n\t* prj-nmsc.adb (Add_Source): Allow duplicate source file names in the\n\tsame project for languages with no compiler.\n\t* gnat_ugn.texi: Document compiler switch -gnateI and gnatmake switch\n\t-eI.\n\nFrom-SVN: r177434", "tree": {"sha": "3dba7c34a2887ecbc914d830d047ba0a816c8d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dba7c34a2887ecbc914d830d047ba0a816c8d6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/comments", "author": null, "committer": null, "parents": [{"sha": "9aff36e9f183e2f4590a9e03d79ee1e3d21724a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aff36e9f183e2f4590a9e03d79ee1e3d21724a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aff36e9f183e2f4590a9e03d79ee1e3d21724a2"}], "stats": {"total": 291, "additions": 230, "deletions": 61}, "files": [{"sha": "2ee5591451705d2f7400713626ba00d478f40917", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -1,3 +1,53 @@\n+2011-08-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb: (Check_Private_Overriding): better error message,\n+\tsuggested by AI95-0068.\n+\n+2011-08-05  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Find_Last_Init): Use Next_Suitable_Statement to retrieve\n+\tthe two potential initialization calls. This accounts for any\n+\taccess-before-elaboration checks which may precede the initialization\n+\tcalls.\n+\t(Next_Suitable_Statement): New routine. Returns the next real statement\n+\tafter the input node while skipping generated checks.\n+\t* sem_elab.adb (Check_A_Call): New formal parameter In_Init_Proc along\n+\twith comment on usage.\n+\tDo not generate Elaborate_All when the trigger is a finalization call\n+\tcoming from a type init proc.\n+\t(Check_Elab_Call): Propagate the initialization procedure context to\n+\tsubsequent calls to Check_A_Call.\n+\t(Check_Internal_Call_Continue): Propagate the initialization procedure\n+\tcontext to subsequent calls to Check_Elab_Call.\n+\t(Is_Finalization_Procedure): New routine. Returns True if the input\n+\tentity denotes a [Deep_]Finalize routine.\n+\t* sem_elab.ads (Check_Elab_Call): New formal parameter In_Init_Proc\n+\talong with comment on usage.\n+\n+2011-08-05  Vadim Godunko  <godunko@adacore.com>\n+\n+\t* s-atocou.ads: Add list of supported platforms.\n+\n+2011-08-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb, restrict.adb: Correct style for or'ing Boolean variables\n+\n+\t* opt.ads (Disable_ALI_File): new Boolean flag\n+\t* lib-writ.adb (Write_ALI): when Disable_ALI_File is set, do nothing\n+\n+2011-08-05  Ed Falis  <falis@adacore.com>\n+\n+\t* env.c (__gnat_environ): Fix includes for RTPs and VTHREADS so that\n+\tenviron is properly defined.\n+\n+2011-08-05  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb (Compilation_Phase): Exit immediately when all objects have\n+\tbeen found up to date, to avoid multiple exit messages.\n+\t* prj-nmsc.adb (Add_Source): Allow duplicate source file names in the\n+\tsame project for languages with no compiler.\n+\t* gnat_ugn.texi: Document compiler switch -gnateI and gnatmake switch\n+\t-eI.\n 2011-08-05  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch7.ads, sem_type.adb, make.adb, sem_prag.adb, sem_util.adb,"}, {"sha": "9d7301f182808209f0b5b2da6facf97bfac843d9", "filename": "gcc/ada/env.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fenv.c?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -56,10 +56,25 @@ extern \"C\" {\n #include <stdlib.h>\n #endif\n \n-#if defined (__vxworks) \\\n-  && ! (defined (__RTP__) || defined (__COREOS__) || defined (__VXWORKSMILS__))\n-#include \"envLib.h\"\n-extern char** ppGlobalEnviron;\n+#if defined (__vxworks)\n+  #if defined (__RTP__)\n+    /* On VxWorks 6 Real-Time process mode, environ is defined in unistd.h.  */\n+    #include <unistd.h>\n+  #elif defined (VTHREADS)\n+    /* VTHREADS mode applies to both VxWorks 653 and VxWorks MILS. The\n+       inclusion of vThreadsData.h is necessary to workaround a bug with\n+       envLib.h on VxWorks MILS.  */\n+    #include <vThreadsData.h>\n+    #include <envLib.h>\n+  #else\n+    /* This should work for kernel mode on both VxWorks 5 and VxWorks 6.  */\n+    #include <envLib.h>\n+\n+    /* In that mode environ is a macro which reference the following symbol.\n+       As the symbol is not defined in any VxWorks include files we declare\n+       it as extern.  */\n+    extern char** ppGlobalEnviron;\n+  #endif\n #endif\n \n /* We don't have libiberty, so use malloc.  */\n@@ -200,8 +215,7 @@ __gnat_setenv (char *name, char *value)\n char **\n __gnat_environ (void)\n {\n-#if defined (VMS) || defined (RTX) \\\n-   || (defined (VTHREADS) && ! defined (__VXWORKSMILS__))\n+#if defined (VMS) || defined (RTX)\n   /* Not implemented */\n   return NULL;\n #elif defined (__APPLE__)\n@@ -212,14 +226,10 @@ __gnat_environ (void)\n #elif defined (sun)\n   extern char **_environ;\n   return _environ;\n-#else\n-#if ! (defined (__vxworks) \\\n-   && ! (defined (__RTP__) || defined (__COREOS__) \\\n-   || defined (__VXWORKSMILS__)))\n-  /* in VxWorks kernel mode environ is macro and not a variable */\n-  /* same thing on 653 in the CoreOS and for VxWorks MILS vThreads */\n+#elif ! (defined (__vxworks))\n   extern char **environ;\n-#endif\n+  return environ;\n+#else\n   return environ;\n #endif\n }"}, {"sha": "735f86576a0112e5c23b2c1b532917bef43da16c", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -2270,6 +2270,10 @@ package body Exp_Ch7 is\n             --  call and if it is, try to match the name of the call with the\n             --  [Deep_]Initialize proc of Typ.\n \n+            function Next_Suitable_Statement (Stmt : Node_Id) return Node_Id;\n+            --  Given a statement which is part of a list, return the next\n+            --  real statement while skipping over generated checks.\n+\n             ------------------\n             -- Is_Init_Call --\n             ------------------\n@@ -2310,6 +2314,25 @@ package body Exp_Ch7 is\n                return False;\n             end Is_Init_Call;\n \n+            -----------------------------\n+            -- Next_Suitable_Statement --\n+            -----------------------------\n+\n+            function Next_Suitable_Statement (Stmt : Node_Id) return Node_Id is\n+               Result : Node_Id := Next (Stmt);\n+\n+            begin\n+               --  Skip over access-before-elaboration checks\n+\n+               if Dynamic_Elaboration_Checks\n+                 and then Nkind (Result) = N_Raise_Program_Error\n+               then\n+                  Result := Next (Result);\n+               end if;\n+\n+               return Result;\n+            end Next_Suitable_Statement;\n+\n          --  Start of processing for Find_Last_Init\n \n          begin\n@@ -2338,9 +2361,9 @@ package body Exp_Ch7 is\n             --  where the user-defined initialize may be optional or may appear\n             --  inside a block when abort deferral is needed.\n \n-            Nod_1 := Next (Decl);\n+            Nod_1 := Next_Suitable_Statement (Decl);\n             if Present (Nod_1) then\n-               Nod_2 := Next (Nod_1);\n+               Nod_2 := Next_Suitable_Statement (Nod_1);\n \n                --  The statement following an object declaration is always a\n                --  call to the type init proc."}, {"sha": "c256b488d2d6d5c0c1860a42882229b6eccd5ed6", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -4130,6 +4130,12 @@ Display full source path name in brief error messages.\n @cindex @option{-gnateG} (@command{gcc})\n Save result of preprocessing in a text file.\n \n+@item -gnateInnn\n+@cindex @option{-gnateI} (@command{gcc})\n+Indicates that the source is a multi-unit source and that the index of the\n+unit to compile is nnn. nnn needs to be a positive number and need to\n+be a valid index in the multi-unit source.\n+\n @item -gnatem=@var{path}\n @cindex @option{-gnatem} (@command{gcc})\n Specify a mapping file\n@@ -9500,6 +9506,13 @@ and ALI files go in the current working directory.\n \n This switch cannot be used when using a project file.\n \n+@item -eInnn\n+@cindex @option{-eI} (@command{gnatmake})\n+Indicates that the main source is a multi-unit source and the rank of the unit\n+in the source file is nnn. nnn needs to be a positive number and a valid\n+index in the source. This switch cannot be used when @command{gnatmake} is\n+invoked for several mains.\n+\n @ifclear vms\n @item -eL\n @cindex @option{-eL} (@command{gnatmake})"}, {"sha": "64ec01166b10ec2d9c3fa7b00864054977e2893d", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -870,6 +870,13 @@ package body Lib.Writ is\n          return;\n       end if;\n \n+      --  Generation of ALI files may be disabled, e.g. for formal verification\n+      --  back-end.\n+\n+      if Disable_ALI_File then\n+         return;\n+      end if;\n+\n       --  Build sorted source dependency table. We do this right away, because\n       --  it is referenced by Up_To_Date_ALI_File_Exists.\n "}, {"sha": "a725b9ab75d6256b7cdafa0b0b1d7715bcd34a89", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -4843,6 +4843,8 @@ package body Make is\n         and then Osint.Number_Of_Files = 1\n       then\n          Inform (Msg => \"objects up to date.\");\n+         Stop_Compile := True;\n+         return;\n \n       elsif Do_Not_Execute and then First_Compiled_File /= No_File then\n          Write_Name (First_Compiled_File);"}, {"sha": "84f8a2a633f669fb013d5fecc1122b3b049bfee2", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -602,6 +602,10 @@ package Opt is\n    --  Force generation of ALI file even if errors are encountered.\n    --  Also forces generation of tree file if -gnatt is also set.\n \n+   Disable_ALI_File : Boolean := False;\n+   --  GNAT2WHY\n+   --  Disable generation of ALI file\n+\n    Force_Checking_Of_Elaboration_Flags : Boolean := False;\n    --  GNATBIND\n    --  True if binding with forced checking of the elaboration flags"}, {"sha": "52cbdac9fa04de2542bde3077a5c64546563d608", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -673,7 +673,8 @@ package body Prj.Nmsc is\n       end if;\n \n       --  Duplication of file/unit in same project is allowed if order of\n-      --  source directories is known.\n+      --  source directories is known, or if there is no compiler for the\n+      --  language.\n \n       if Add_Src = False then\n          Add_Src := True;\n@@ -683,6 +684,9 @@ package body Prj.Nmsc is\n                if Data.Flags.Allow_Duplicate_Basenames then\n                   Add_Src := True;\n \n+               elsif Lang_Id.Config.Compiler_Driver = Empty_File then\n+                  Add_Src := True;\n+\n                elsif Source_Dir_Rank /= Source.Source_Dir_Rank then\n                   Add_Src := False;\n "}, {"sha": "acb1cf1260b94312a7500d9112fbab015ab469ce", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -380,7 +380,7 @@ package body Restrict is\n       --  set in gnat1drv.adb so that we have consistency between each\n       --  compilation.\n \n-      if CodePeer_Mode or else ALFA_Mode then\n+      if CodePeer_Mode or ALFA_Mode then\n          return;\n       end if;\n "}, {"sha": "a78c4fd26cd7b4d5c81bcd14073dd76336b98d84", "filename": "gcc/ada/s-atocou.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fs-atocou.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fs-atocou.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atocou.ads?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -30,7 +30,12 @@\n ------------------------------------------------------------------------------\n \n --  This package provides atomic counter on platforms where it is supported:\n---    ??? Please provide a list of such platforms\n+--    - all Alpha platforms\n+--    - all ia64 platforms\n+--    - all PowerPC platforms\n+--    - all SPARC V9 platforms\n+--    - all x86 platforms\n+--    - all x86_64 platforms\n \n --  Why isn't this package available to application programs???\n "}, {"sha": "fad454e5ec3b46fbf1849c1680ab5fdf2bcd10d1", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -9118,9 +9118,21 @@ package body Sem_Ch3 is\n                            end loop;\n \n                            Error_Msg_Sloc := Sloc (E);\n-                           Error_Msg_NE\n-                             (\"\\& has been inherited from subprogram #\",\n+\n+                           --  AI05-0068: report if there is an overriding\n+                           --  non-abstract subprogram that is invisible.\n+                           if Is_Hidden (E)\n+                             and then not Is_Abstract_Subprogram (E)\n+                           then\n+                              Error_Msg_NE\n+                             (\"\\& subprogram# is not visible\",\n                               T, Subp);\n+\n+                           else\n+                              Error_Msg_NE\n+                                (\"\\& has been inherited from subprogram #\",\n+                                 T, Subp);\n+                           end if;\n                         end;\n                      end if;\n                   end if;"}, {"sha": "a5130c159366cbac6367af1e879cd07379d46fa7", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 68, "deletions": 33, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -177,7 +177,8 @@ package body Sem_Elab is\n       E                 : Entity_Id;\n       Outer_Scope       : Entity_Id;\n       Inter_Unit_Only   : Boolean;\n-      Generate_Warnings : Boolean := True);\n+      Generate_Warnings : Boolean := True;\n+      In_Init_Proc      : Boolean := False);\n    --  This is the internal recursive routine that is called to check for a\n    --  possible elaboration error. The argument N is a subprogram call or\n    --  generic instantiation to be checked, and E is the entity of the called\n@@ -186,7 +187,8 @@ package body Sem_Elab is\n    --  call is only to be checked in the case where it is to another unit (and\n    --  skipped if within a unit). Generate_Warnings is set to False to suppress\n    --  warning messages about missing pragma Elaborate_All's. These messages\n-   --  are not wanted for inner calls in the dynamic model.\n+   --  are not wanted for inner calls in the dynamic model. Flag In_Init_Proc\n+   --  should be set whenever the current context is a type init proc.\n \n    procedure Check_Bad_Instantiation (N : Node_Id);\n    --  N is a node for an instantiation (if called with any other node kind,\n@@ -229,29 +231,6 @@ package body Sem_Elab is\n    --  Check_Internal_Call. Outer_Scope is the outer level scope for the\n    --  original call.\n \n-   procedure Set_Elaboration_Constraint\n-    (Call : Node_Id;\n-     Subp : Entity_Id;\n-     Scop : Entity_Id);\n-   --  The current unit U may depend semantically on some unit P which is not\n-   --  in the current context. If there is an elaboration call that reaches P,\n-   --  we need to indicate that P requires an Elaborate_All, but this is not\n-   --  effective in U's ali file, if there is no with_clause for P. In this\n-   --  case we add the Elaborate_All on the unit Q that directly or indirectly\n-   --  makes P available. This can happen in two cases:\n-   --\n-   --    a) Q declares a subtype of a type declared in P, and the call is an\n-   --    initialization call for an object of that subtype.\n-   --\n-   --    b) Q declares an object of some tagged type whose root type is\n-   --    declared in P, and the initialization call uses object notation on\n-   --    that object to reach a primitive operation or a classwide operation\n-   --    declared in P.\n-   --\n-   --  If P appears in the context of U, the current processing is correct.\n-   --  Otherwise we must identify these two cases to retrieve Q and place the\n-   --  Elaborate_All_Desirable on it.\n-\n    function Has_Generic_Body (N : Node_Id) return Boolean;\n    --  N is a generic package instantiation node, and this routine determines\n    --  if this package spec does in fact have a generic body. If so, then\n@@ -273,6 +252,9 @@ package body Sem_Elab is\n    --  or instantiation node for which the check code is required. C is the\n    --  test whose failure triggers the raise.\n \n+   function Is_Finalization_Procedure (Id : Entity_Id) return Boolean;\n+   --  Determine whether entity Id denotes a [Deep_]Finalize procedure\n+\n    procedure Output_Calls (N : Node_Id);\n    --  Outputs chain of calls stored in the Elab_Call table. The caller has\n    --  already generated the main warning message, so the warnings generated\n@@ -287,6 +269,29 @@ package body Sem_Elab is\n    --  On entry C_Scope is set to some scope. On return, C_Scope is reset\n    --  to be the enclosing compilation unit of this scope.\n \n+   procedure Set_Elaboration_Constraint\n+    (Call : Node_Id;\n+     Subp : Entity_Id;\n+     Scop : Entity_Id);\n+   --  The current unit U may depend semantically on some unit P which is not\n+   --  in the current context. If there is an elaboration call that reaches P,\n+   --  we need to indicate that P requires an Elaborate_All, but this is not\n+   --  effective in U's ali file, if there is no with_clause for P. In this\n+   --  case we add the Elaborate_All on the unit Q that directly or indirectly\n+   --  makes P available. This can happen in two cases:\n+   --\n+   --    a) Q declares a subtype of a type declared in P, and the call is an\n+   --    initialization call for an object of that subtype.\n+   --\n+   --    b) Q declares an object of some tagged type whose root type is\n+   --    declared in P, and the initialization call uses object notation on\n+   --    that object to reach a primitive operation or a classwide operation\n+   --    declared in P.\n+   --\n+   --  If P appears in the context of U, the current processing is correct.\n+   --  Otherwise we must identify these two cases to retrieve Q and place the\n+   --  Elaborate_All_Desirable on it.\n+\n    function Spec_Entity (E : Entity_Id) return Entity_Id;\n    --  Given a compilation unit entity, if it is a spec entity, it is returned\n    --  unchanged. If it is a body entity, then the spec for the corresponding\n@@ -472,7 +477,8 @@ package body Sem_Elab is\n       E                 : Entity_Id;\n       Outer_Scope       : Entity_Id;\n       Inter_Unit_Only   : Boolean;\n-      Generate_Warnings : Boolean := True)\n+      Generate_Warnings : Boolean := True;\n+      In_Init_Proc      : Boolean := False)\n    is\n       Loc  : constant Source_Ptr := Sloc (N);\n       Ent  : Entity_Id;\n@@ -965,6 +971,14 @@ package body Sem_Elab is\n             then\n                null;\n \n+            --  Do not generate an Elaborate_All for finalization routines\n+            --  which perform partial clean up as part of initialization.\n+\n+            elsif In_Init_Proc\n+              and then Is_Finalization_Procedure (Ent)\n+            then\n+               null;\n+\n             --  Here we need to generate an implicit elaborate all\n \n             else\n@@ -1104,8 +1118,9 @@ package body Sem_Elab is\n    ---------------------\n \n    procedure Check_Elab_Call\n-     (N           : Node_Id;\n-      Outer_Scope : Entity_Id := Empty)\n+     (N            : Node_Id;\n+      Outer_Scope  : Entity_Id := Empty;\n+      In_Init_Proc : Boolean := False)\n    is\n       Ent : Entity_Id;\n       P   : Node_Id;\n@@ -1414,14 +1429,19 @@ package body Sem_Elab is\n \n       C_Scope := Current_Scope;\n \n-      --  If not outer level call, then we follow it if it is within\n-      --  the original scope of the outer call.\n+      --  If not outer level call, then we follow it if it is within the\n+      --  original scope of the outer call.\n \n       if Present (Outer_Scope)\n         and then Within (Scope (Ent), Outer_Scope)\n       then\n          Set_C_Scope;\n-         Check_A_Call (N, Ent, Outer_Scope, Inter_Unit_Only => False);\n+         Check_A_Call\n+           (N               => N,\n+            E               => Ent,\n+            Outer_Scope     => Outer_Scope,\n+            Inter_Unit_Only => False,\n+            In_Init_Proc    => In_Init_Proc);\n \n       elsif Elaboration_Checks_Suppressed (Current_Scope) then\n          null;\n@@ -1446,7 +1466,7 @@ package body Sem_Elab is\n            (N,\n             Ent,\n             Standard_Standard,\n-            Inter_Unit_Only => True,\n+            Inter_Unit_Only   => True,\n             Generate_Warnings => False);\n \n       --  Otherwise nothing to do\n@@ -1978,7 +1998,7 @@ package body Sem_Elab is\n          --  arguments that are assignments (OUT or IN OUT mode formals).\n \n          elsif Nkind (N) = N_Procedure_Call_Statement then\n-            Check_Elab_Call (N, Outer_Scope);\n+            Check_Elab_Call (N, Outer_Scope, In_Init_Proc => Is_Init_Proc (E));\n \n             Actual := First_Actual (N);\n             while Present (Actual) loop\n@@ -2912,6 +2932,21 @@ package body Sem_Elab is\n       end if;\n    end Insert_Elab_Check;\n \n+   -------------------------------\n+   -- Is_Finalization_Procedure --\n+   -------------------------------\n+\n+   function Is_Finalization_Procedure (Id : Entity_Id) return Boolean is\n+   begin\n+      return\n+        Ekind (Id) = E_Procedure\n+          and then\n+            (Chars (Id) = Name_Finalize\n+               or else Is_TSS (Id, TSS_Deep_Finalize))\n+          and then Present (First_Formal (Id))\n+          and then Needs_Finalization (Etype (First_Formal (Id)));\n+   end Is_Finalization_Procedure;\n+\n    ------------------\n    -- Output_Calls --\n    ------------------"}, {"sha": "f7a52466a3008cd46d1514b05a66e0000f6dc03d", "filename": "gcc/ada/sem_elab.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fsem_elab.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fsem_elab.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.ads?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1997-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2011, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -118,12 +118,16 @@ package Sem_Elab is\n    --  the resulting code does not contain subprogram specs with no\n    --  corresponding bodies.\n \n-   procedure Check_Elab_Call (N : Node_Id; Outer_Scope : Entity_Id := Empty);\n+   procedure Check_Elab_Call\n+     (N            : Node_Id;\n+      Outer_Scope  : Entity_Id := Empty;\n+      In_Init_Proc : Boolean := False);\n    --  Check a call for possible elaboration problems. The node N is either\n    --  an N_Function_Call or N_Procedure_Call_Statement node. The Outer_Scope\n    --  argument indicates whether this is an outer level call from Sem_Res\n    --  (Outer_Scope set to Empty), or an internal recursive call (Outer_Scope\n-   --  set to entity of outermost call, see body).\n+   --  set to entity of outermost call, see body). Flag In_Init_Proc should be\n+   --  set whenever the current context is a type init proc.\n \n    procedure Check_Elab_Calls;\n    --  Not all the processing for Check_Elab_Call can be done at the time"}, {"sha": "32d38d8f8d236ea64e755cc4440ecfd89edcd0f7", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ed5872c6629a96fcc4b4ff4ccaca41950ae26c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=97ed5872c6629a96fcc4b4ff4ccaca41950ae26c", "patch": "@@ -5287,7 +5287,7 @@ package body Sem_Prag is\n          --  user code: we want to generate checks for analysis purposes, as\n          --  set respectively by -gnatC and -gnatd.F\n \n-         if (CodePeer_Mode or else ALFA_Mode)\n+         if (CodePeer_Mode or ALFA_Mode)\n            and then Comes_From_Source (N)\n          then\n             return;\n@@ -9452,7 +9452,7 @@ package body Sem_Prag is\n             --  in these modes.\n \n             if not Restriction_Active (No_Initialize_Scalars)\n-              and then not (CodePeer_Mode or else ALFA_Mode)\n+              and then not (CodePeer_Mode or ALFA_Mode)\n             then\n                Init_Or_Norm_Scalars := True;\n                Initialize_Scalars := True;\n@@ -9482,7 +9482,7 @@ package body Sem_Prag is\n             --  Pragma always active unless in CodePeer or ALFA mode, since\n             --  this causes walk order issues.\n \n-            if not (CodePeer_Mode or else ALFA_Mode) then\n+            if not (CodePeer_Mode or ALFA_Mode) then\n                Process_Inline (True);\n             end if;\n \n@@ -10925,7 +10925,7 @@ package body Sem_Prag is\n             --  incorrect negative results in ALFA mode, so ignore this pragma\n             --  in these modes.\n \n-            if not (CodePeer_Mode or else ALFA_Mode) then\n+            if not (CodePeer_Mode or ALFA_Mode) then\n                Normalize_Scalars := True;\n                Init_Or_Norm_Scalars := True;\n             end if;\n@@ -11294,7 +11294,7 @@ package body Sem_Prag is\n                   --  complex front-end expansions related to pragma Pack,\n                   --  so disable handling of pragma Pack in these cases.\n \n-                  if CodePeer_Mode or else ALFA_Mode then\n+                  if CodePeer_Mode or ALFA_Mode then\n                      null;\n \n                   --  Don't attempt any packing for VM targets. We possibly"}]}