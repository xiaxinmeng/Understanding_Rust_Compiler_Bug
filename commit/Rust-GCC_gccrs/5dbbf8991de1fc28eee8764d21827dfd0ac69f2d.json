{"sha": "5dbbf8991de1fc28eee8764d21827dfd0ac69f2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRiYmY4OTkxZGUxZmMyOGVlZTg3NjRkMjE4MjdkZmQwYWM2OWYyZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-03-09T01:10:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-03-09T01:10:02Z"}, "message": "PR libstdc++/84769 qualify std::get and std::get_if to avoid ADL\n\n\tPR libstdc++/84769\n\t* include/std/variant (get<_Tp, _Types...>, get_if<_Tp, _Types...>):\n\tQualify calls to get<_Np, Types...> and get_if<_Np, _Types...>.\n\nFrom-SVN: r258376", "tree": {"sha": "c6357d2352634a482d2a48b966e6cb5293249e61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6357d2352634a482d2a48b966e6cb5293249e61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dbbf8991de1fc28eee8764d21827dfd0ac69f2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dbbf8991de1fc28eee8764d21827dfd0ac69f2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dbbf8991de1fc28eee8764d21827dfd0ac69f2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dbbf8991de1fc28eee8764d21827dfd0ac69f2d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "311735dbc6783b8669850b0b882834bd41a4e1f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/311735dbc6783b8669850b0b882834bd41a4e1f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/311735dbc6783b8669850b0b882834bd41a4e1f1"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "ae464ddf9baf6e5470c53f3c65a628bd4176f985", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dbbf8991de1fc28eee8764d21827dfd0ac69f2d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dbbf8991de1fc28eee8764d21827dfd0ac69f2d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5dbbf8991de1fc28eee8764d21827dfd0ac69f2d", "patch": "@@ -1,5 +1,9 @@\n 2018-03-09  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/84769\n+\t* include/std/variant (get<_Tp, _Types...>, get_if<_Tp, _Types...>):\n+\tQualify calls to get<_Np, Types...> and get_if<_Np, _Types...>.\n+\n \tsrc/filesystem/ops.cc (create_dir): Pass error_code to is_directory.\n \tsrc/filesystem/std-ops.cc (create_dir): Likewise.\n "}, {"sha": "4aba131cb731ab45e6e0a0c5fdac20c036582d69", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dbbf8991de1fc28eee8764d21827dfd0ac69f2d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dbbf8991de1fc28eee8764d21827dfd0ac69f2d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=5dbbf8991de1fc28eee8764d21827dfd0ac69f2d", "patch": "@@ -891,7 +891,7 @@ namespace __variant\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T should occur for exactly once in alternatives\");\n       static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n-      return get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);\n+      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);\n     }\n \n   template<typename _Tp, typename... _Types>\n@@ -900,7 +900,7 @@ namespace __variant\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T should occur for exactly once in alternatives\");\n       static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n-      return get<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n+      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n \tstd::move(__v));\n     }\n \n@@ -910,7 +910,7 @@ namespace __variant\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T should occur for exactly once in alternatives\");\n       static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n-      return get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);\n+      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);\n     }\n \n   template<typename _Tp, typename... _Types>\n@@ -919,7 +919,7 @@ namespace __variant\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T should occur for exactly once in alternatives\");\n       static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n-      return get<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n+      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n \tstd::move(__v));\n     }\n \n@@ -958,7 +958,8 @@ namespace __variant\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T should occur for exactly once in alternatives\");\n       static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n-      return get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(__ptr);\n+      return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n+\t  __ptr);\n     }\n \n   template<typename _Tp, typename... _Types>\n@@ -969,7 +970,8 @@ namespace __variant\n       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,\n \t\t    \"T should occur for exactly once in alternatives\");\n       static_assert(!is_void_v<_Tp>, \"_Tp should not be void\");\n-      return get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(__ptr);\n+      return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(\n+\t  __ptr);\n     }\n \n   struct monostate { };"}]}