{"sha": "f8c59c050940a36f5aef5b1873bf253935c78fa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhjNTljMDUwOTQwYTM2ZjVhZWY1YjE4NzNiZjI1MzkzNWM3OGZhNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-11T12:55:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-11T12:55:03Z"}, "message": "[multiple changes]\n\n2014-06-11  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb: Minor reformatting.\n\n2014-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Check_Clause_Syntax): Add new\n\tlocal variable Outputs. Account for the case where multiple\n\toutput items appear as an aggregate.\n\n2014-06-11  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_warn.adb (Output_Obsolescent_Entity_Warnings): Tag warning\n\twith ?j? not ??.\n\n2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* einfo.ads: Minor reformatting.\n\n2014-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* a-cbdlli.adb, a-cdlili.adb, a-cidlli.adb, a-crdlli.adb (Insert): Add\n\tnew variable First_Node. Update the position after all insertions have\n\ttaken place to First_Node.\n\n2014-06-11  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb: Remove debug flag -gnatd.1, no longer needed.\n\t* layout.adb (Layout_Type): Remove test of -gnatd.1.\n\nFrom-SVN: r211465", "tree": {"sha": "f73f8b17c296c9fe0999681f9e00daaf7924bb08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f73f8b17c296c9fe0999681f9e00daaf7924bb08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8c59c050940a36f5aef5b1873bf253935c78fa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c59c050940a36f5aef5b1873bf253935c78fa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c59c050940a36f5aef5b1873bf253935c78fa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c59c050940a36f5aef5b1873bf253935c78fa7/comments", "author": null, "committer": null, "parents": [{"sha": "3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e65bfab4abd298b77ed3a91b13ac6bb5c5305bd"}], "stats": {"total": 184, "additions": 132, "deletions": 52}, "files": [{"sha": "57b9ce962a92f5d0b9e3aa6f7833262e2458854a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f8c59c050940a36f5aef5b1873bf253935c78fa7", "patch": "@@ -1,3 +1,63 @@\n+2014-06-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb: Minor reformatting.\n+\n+2014-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Check_Clause_Syntax): Add new\n+\tlocal variable Outputs. Account for the case where multiple\n+\toutput items appear as an aggregate.\n+\n+2014-06-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_warn.adb (Output_Obsolescent_Entity_Warnings): Tag warning\n+\twith ?j? not ??.\n+\n+2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads: Minor reformatting.\n+\n+2014-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-cbdlli.adb, a-cdlili.adb, a-cidlli.adb, a-crdlli.adb (Insert): Add\n+\tnew variable First_Node. Update the position after all insertions have\n+\ttaken place to First_Node.\n+\n+2014-06-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: Remove debug flag -gnatd.1, no longer needed.\n+\t* layout.adb (Layout_Type): Remove test of -gnatd.1.\n+\n+2014-06-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb: Minor reformatting.\n+\n+2014-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Check_Clause_Syntax): Add new\n+\tlocal variable Outputs. Account for the case where multiple\n+\toutput items appear as an aggregate.\n+\n+2014-06-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_warn.adb (Output_Obsolescent_Entity_Warnings): Tag warning\n+\twith ?j? not ??.\n+\n+2014-06-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* einfo.ads: Minor reformatting.\n+\n+2014-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-cbdlli.adb, a-cdlili.adb, a-cidlli.adb, a-crdlli.adb (Insert): Add\n+\tnew variable First_Node. Update the position after all insertions have\n+\ttaken place to First_Node.\n+\n+2014-06-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: Remove debug flag -gnatd.1, no longer needed.\n+\t* layout.adb (Layout_Type): Remove test of -gnatd.1.\n+\n 2014-06-11  Thomas Quinot  <quinot@adacore.com>\n \n \t* freeze.ads: Minor reformatting."}, {"sha": "d0b6c12d57892de8b4f2d8eecb187fe031ae9b08", "filename": "gcc/ada/a-cbdlli.adb", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.adb?ref=f8c59c050940a36f5aef5b1873bf253935c78fa7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1067,7 +1067,8 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       Position  : out Cursor;\n       Count     : Count_Type := 1)\n    is\n-      New_Node : Count_Type;\n+      First_Node : Count_Type;\n+      New_Node   : Count_Type;\n \n    begin\n       if Before.Container /= null then\n@@ -1094,13 +1095,15 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       end if;\n \n       Allocate (Container, New_Item, New_Node);\n-      Insert_Internal (Container, Before.Node, New_Node => New_Node);\n-      Position := Cursor'(Container'Unchecked_Access, Node => New_Node);\n+      First_Node := New_Node;\n+      Insert_Internal (Container, Before.Node, New_Node);\n \n       for Index in Count_Type'(2) .. Count loop\n-         Allocate (Container, New_Item, New_Node => New_Node);\n-         Insert_Internal (Container, Before.Node, New_Node => New_Node);\n+         Allocate (Container, New_Item, New_Node);\n+         Insert_Internal (Container, Before.Node, New_Node);\n       end loop;\n+\n+      Position := Cursor'(Container'Unchecked_Access, First_Node);\n    end Insert;\n \n    procedure Insert"}, {"sha": "eae608c05b22ed9652841ac5ea4b92135ee0731f", "filename": "gcc/ada/a-cdlili.adb", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fa-cdlili.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fa-cdlili.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cdlili.adb?ref=f8c59c050940a36f5aef5b1873bf253935c78fa7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -942,7 +942,8 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       Position  : out Cursor;\n       Count     : Count_Type := 1)\n    is\n-      New_Node : Node_Access;\n+      First_Node : Node_Access;\n+      New_Node   : Node_Access;\n \n    begin\n       if Before.Container /= null then\n@@ -966,15 +967,16 @@ package body Ada.Containers.Doubly_Linked_Lists is\n            \"attempt to tamper with cursors (list is busy)\";\n \n       else\n-         New_Node := new Node_Type'(New_Item, null, null);\n+         New_Node   := new Node_Type'(New_Item, null, null);\n+         First_Node := New_Node;\n          Insert_Internal (Container, Before.Node, New_Node);\n \n-         Position := Cursor'(Container'Unchecked_Access, New_Node);\n-\n          for J in 2 .. Count loop\n             New_Node := new Node_Type'(New_Item, null, null);\n             Insert_Internal (Container, Before.Node, New_Node);\n          end loop;\n+\n+         Position := Cursor'(Container'Unchecked_Access, First_Node);\n       end if;\n    end Insert;\n \n@@ -996,7 +998,8 @@ package body Ada.Containers.Doubly_Linked_Lists is\n       Position  : out Cursor;\n       Count     : Count_Type := 1)\n    is\n-      New_Node : Node_Access;\n+      First_Node : Node_Access;\n+      New_Node   : Node_Access;\n \n    begin\n       if Before.Container /= null then\n@@ -1021,15 +1024,16 @@ package body Ada.Containers.Doubly_Linked_Lists is\n            \"attempt to tamper with cursors (list is busy)\";\n \n       else\n-         New_Node := new Node_Type;\n+         New_Node   := new Node_Type;\n+         First_Node := New_Node;\n          Insert_Internal (Container, Before.Node, New_Node);\n \n-         Position := Cursor'(Container'Unchecked_Access, New_Node);\n-\n          for J in 2 .. Count loop\n             New_Node := new Node_Type;\n             Insert_Internal (Container, Before.Node, New_Node);\n          end loop;\n+\n+         Position := Cursor'(Container'Unchecked_Access, First_Node);\n       end if;\n    end Insert;\n "}, {"sha": "c41be78fcf3c77f678f8cacbbcb46ff20142ca86", "filename": "gcc/ada/a-cidlli.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fa-cidlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fa-cidlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cidlli.adb?ref=f8c59c050940a36f5aef5b1873bf253935c78fa7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -983,7 +983,8 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n       Position  : out Cursor;\n       Count     : Count_Type := 1)\n    is\n-      New_Node : Node_Access;\n+      First_Node : Node_Access;\n+      New_Node   : Node_Access;\n \n    begin\n       if Before.Container /= null then\n@@ -1026,7 +1027,8 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n          Element : Element_Access := new Element_Type'(New_Item);\n \n       begin\n-         New_Node := new Node_Type'(Element, null, null);\n+         New_Node   := new Node_Type'(Element, null, null);\n+         First_Node := New_Node;\n \n       exception\n          when others =>\n@@ -1035,7 +1037,6 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n       end;\n \n       Insert_Internal (Container, Before.Node, New_Node);\n-      Position := Cursor'(Container'Unchecked_Access, New_Node);\n \n       for J in 2 .. Count loop\n          declare\n@@ -1050,6 +1051,8 @@ package body Ada.Containers.Indefinite_Doubly_Linked_Lists is\n \n          Insert_Internal (Container, Before.Node, New_Node);\n       end loop;\n+\n+      Position := Cursor'(Container'Unchecked_Access, First_Node);\n    end Insert;\n \n    procedure Insert"}, {"sha": "0c6f5dccbb7aba845fd7a716676601c7b805bc7d", "filename": "gcc/ada/a-crdlli.adb", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fa-crdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fa-crdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-crdlli.adb?ref=f8c59c050940a36f5aef5b1873bf253935c78fa7", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -614,7 +614,8 @@ package body Ada.Containers.Restricted_Doubly_Linked_Lists is\n       Position  : out Cursor;\n       Count     : Count_Type := 1)\n    is\n-      J : Count_Type;\n+      First_Node : Count_Type;\n+      New_Node   : Count_Type;\n \n    begin\n       if Before.Container /= null then\n@@ -638,14 +639,16 @@ package body Ada.Containers.Restricted_Doubly_Linked_Lists is\n --       raise Program_Error;\n --    end if;\n \n-      Allocate (Container, New_Item, New_Node => J);\n-      Insert_Internal (Container, Before.Node, New_Node => J);\n-      Position := Cursor'(Container'Unrestricted_Access, Node => J);\n+      Allocate (Container, New_Item, New_Node);\n+      First_Node := New_Node;\n+      Insert_Internal (Container, Before.Node, New_Node);\n \n       for Index in 2 .. Count loop\n-         Allocate (Container, New_Item, New_Node => J);\n-         Insert_Internal (Container, Before.Node, New_Node => J);\n+         Allocate (Container, New_Item, New_Node);\n+         Insert_Internal (Container, Before.Node, New_Node);\n       end loop;\n+\n+      Position := Cursor'(Container'Unrestricted_Access, First_Node);\n    end Insert;\n \n    procedure Insert"}, {"sha": "eaab4ffbebebd4eb05b8de213493739393d1dc4e", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=f8c59c050940a36f5aef5b1873bf253935c78fa7", "patch": "@@ -155,7 +155,7 @@ package body Debug is\n    --  d8   Force opposite endianness in packed stuff\n    --  d9   Allow lock free implementation\n \n-   --  d.1  Activate thin-as-default for subprogram anonymous access types\n+   --  d.1\n    --  d.2\n    --  d.3\n    --  d.4\n@@ -733,15 +733,6 @@ package body Debug is\n    --  d9   This allows lock free implementation for protected objects\n    --       (see Exp_Ch9).\n \n-   --  d.1  Right now, we have a problem with anonymous access types in the\n-   --       context of subprogram formal parameter types and return types. The\n-   --       problem occurs when in one place (e.g. the subprogram spec), the\n-   --       designated type is unknown (e.g. private) and we choose to use a\n-   --       thin pointer representation. Then in another place, we can see the\n-   --       full declaration of the type, and choose a fat pointer. The fix is\n-   --       to always use thin pointers, but this is causing some other issues,\n-   --       so for now, this fix is under control of this debug flag.\n-\n    ------------------------------------------\n    -- Documentation for Binder Debug Flags --\n    ------------------------------------------"}, {"sha": "fdadf4bc5fa75120599ab685190a03e61685c9fa", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=f8c59c050940a36f5aef5b1873bf253935c78fa7", "patch": "@@ -4408,8 +4408,9 @@ package Einfo is\n       --  A special internal type used to label allocators and references to\n       --  objects using 'Reference. This is needed because special resolution\n       --  rules apply to these constructs. On the resolution pass, this type\n-      --  is always replaced by the actual access type, so Gigi should never\n-      --  see types with this Ekind.\n+      --  is almost always replaced by the actual access type, but if the\n+      --  context does not provide one Gigi can handle the Allocator_Type\n+      --  itself as long as it has been frozen.\n \n       E_General_Access_Type,\n       --  An access type created by an access type declaration with the all"}, {"sha": "f1a833bdb48f1e1121c6ee95b17379973b3ed713", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=f8c59c050940a36f5aef5b1873bf253935c78fa7", "patch": "@@ -2474,10 +2474,6 @@ package body Layout is\n                                N_Function_Specification,\n                                N_Procedure_Specification)\n                       or else Ekind (Scope (E))  = E_Return_Statement)\n-\n-           --  For now, debug flag -gnatd.1 must be set to enable this fix\n-\n-           and then Debug_Flag_Dot_1\n          then\n             Init_Size (E, System_Address_Size);\n "}, {"sha": "3e1398ba163692fc3e8a6af46d630d0a413826ba", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f8c59c050940a36f5aef5b1873bf253935c78fa7", "patch": "@@ -3214,7 +3214,7 @@ package body Sem_Ch13 is\n                Error_Msg_N (\"stream subprogram must not be abstract\", Expr);\n                return;\n \n-            --  Disable the following for now, until Polyorb issue is fixed.\n+            --  Test for stream subprogram for interface type being non-null\n \n             elsif Is_Interface (U_Ent)\n               and then not Inside_A_Generic\n@@ -3223,6 +3223,9 @@ package body Sem_Ch13 is\n                 not Null_Present\n                   (Specification\n                      (Unit_Declaration_Node (Ultimate_Alias (Subp))))\n+\n+              --  Disable this test for now till Polyorb issue is fixed???\n+\n               and then False\n             then\n                Error_Msg_N"}, {"sha": "dc8b0e8cde1061c0911836f613e1a9a43d329ba1", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f8c59c050940a36f5aef5b1873bf253935c78fa7", "patch": "@@ -24486,17 +24486,33 @@ package body Sem_Prag is\n       -------------------------\n \n       procedure Check_Clause_Syntax (Clause : Node_Id) is\n-         Input  : Node_Id;\n-         Inputs : Node_Id;\n-         Output : Node_Id;\n+         Input   : Node_Id;\n+         Inputs  : Node_Id;\n+         Output  : Node_Id;\n+         Outputs : Node_Id;\n \n       begin\n          --  Output items\n \n-         Output := First (Choices (Clause));\n-         while Present (Output) loop\n-            Check_Item_Syntax (Output);\n-            Next (Output);\n+         Outputs := First (Choices (Clause));\n+         while Present (Outputs) loop\n+\n+            --  Multiple output items\n+\n+            if Nkind (Outputs) = N_Aggregate then\n+               Output := First (Expressions (Outputs));\n+               while Present (Output) loop\n+                  Check_Item_Syntax (Output);\n+                  Next (Output);\n+               end loop;\n+\n+            --  Single output item\n+\n+            else\n+               Check_Item_Syntax (Outputs);\n+            end if;\n+\n+            Next (Outputs);\n          end loop;\n \n          Inputs := Expression (Clause);"}, {"sha": "0043ef61b7fefb1b1d36cf3913773a5933e06fe3", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8c59c050940a36f5aef5b1873bf253935c78fa7/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=f8c59c050940a36f5aef5b1873bf253935c78fa7", "patch": "@@ -2924,10 +2924,10 @@ package body Sem_Warn is\n       if Nkind (P) = N_With_Clause then\n          if Ekind (E) = E_Package then\n             Error_Msg_NE\n-              (\"??with of obsolescent package& declared#\", N, E);\n+              (\"?j?with of obsolescent package& declared#\", N, E);\n          elsif Ekind (E) = E_Procedure then\n             Error_Msg_NE\n-              (\"??with of obsolescent procedure& declared#\", N, E);\n+              (\"?j?with of obsolescent procedure& declared#\", N, E);\n          else\n             Error_Msg_NE\n               (\"??with of obsolescent function& declared#\", N, E);"}]}