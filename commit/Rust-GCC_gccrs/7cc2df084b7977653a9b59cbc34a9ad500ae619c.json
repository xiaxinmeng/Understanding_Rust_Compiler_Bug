{"sha": "7cc2df084b7977653a9b59cbc34a9ad500ae619c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NjMmRmMDg0Yjc5Nzc2NTNhOWI1OWNiYzM0YTlhZDUwMGFlNjE5Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-20T09:00:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-07-20T10:49:59Z"}, "message": "debug/101473 - apply debug prefix maps before checksumming DIEs\n\nThe following makes sure to apply the debug prefix maps to filenames\nbefore checksumming DIEs to create the global symbol for the CU DIE\nused by LTO to link the late debug to the early debug.  This avoids\nbinary differences (in said symbol) when compiling with toolchains\ninstalled under a different path and that compensated with appropriate\n-fdebug-prefix-map options.\n\nThe easiest and most scalable way is to record both the unmapped\nand the remapped filename in the dwarf_file_data so the remapping\nprocess takes place at a single point and only once (otherwise it\ncreates GC garbage at each point doing that).\n\n2021-07-20  Richard Biener  <rguenther@suse.de>\n\n\tPR debug/101473\n\t* dwarf2out.h (dwarf_file_data): Add key member.\n\t* dwarf2out.c (dwarf_file_hasher::equal): Compare key.\n\t(dwarf_file_hasher::hash): Hash key.\n\t(lookup_filename): Remap the filename and store it in the\n\tfilename member of dwarf_file_data when creating a new\n\tdwarf_file_data.\n\t(file_name_acquire): Do not remap the filename again.\n\t(maybe_emit_file): Likewise.", "tree": {"sha": "034a43aabc9f0ee4ee2653a0f1dfbd015ba50014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/034a43aabc9f0ee4ee2653a0f1dfbd015ba50014"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cc2df084b7977653a9b59cbc34a9ad500ae619c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc2df084b7977653a9b59cbc34a9ad500ae619c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cc2df084b7977653a9b59cbc34a9ad500ae619c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc2df084b7977653a9b59cbc34a9ad500ae619c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f79c7845c5ad7f624c1c4180206239b2511da93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f79c7845c5ad7f624c1c4180206239b2511da93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f79c7845c5ad7f624c1c4180206239b2511da93"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "884f1e191c6591a67acac580db8318e1afc09fe7", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc2df084b7977653a9b59cbc34a9ad500ae619c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc2df084b7977653a9b59cbc34a9ad500ae619c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7cc2df084b7977653a9b59cbc34a9ad500ae619c", "patch": "@@ -12424,7 +12424,7 @@ file_name_acquire (dwarf_file_data **slot, file_name_acquire_data *fnad)\n \n   fi = fnad->files + fnad->used_files++;\n \n-  f = remap_debug_filename (d->filename);\n+  f = d->filename;\n \n   /* Skip all leading \"./\".  */\n   while (f[0] == '.' && IS_DIR_SEPARATOR (f[1]))\n@@ -27460,13 +27460,13 @@ dwarf2out_ignore_block (const_tree block)\n bool\n dwarf_file_hasher::equal (dwarf_file_data *p1, const char *p2)\n {\n-  return filename_cmp (p1->filename, p2) == 0;\n+  return filename_cmp (p1->key, p2) == 0;\n }\n \n hashval_t\n dwarf_file_hasher::hash (dwarf_file_data *p)\n {\n-  return htab_hash_string (p->filename);\n+  return htab_hash_string (p->key);\n }\n \n /* Lookup FILE_NAME (in the list of filenames that we know about here in\n@@ -27496,7 +27496,8 @@ lookup_filename (const char *file_name)\n     return *slot;\n \n   created = ggc_alloc<dwarf_file_data> ();\n-  created->filename = file_name;\n+  created->key = file_name;\n+  created->filename = remap_debug_filename (file_name);\n   created->emitted_number = 0;\n   *slot = created;\n   return created;\n@@ -27522,8 +27523,7 @@ maybe_emit_file (struct dwarf_file_data * fd)\n       if (output_asm_line_debug_info ())\n \t{\n \t  fprintf (asm_out_file, \"\\t.file %u \", fd->emitted_number);\n-\t  output_quoted_string (asm_out_file,\n-\t\t\t\tremap_debug_filename (fd->filename));\n+\t  output_quoted_string (asm_out_file, fd->filename);\n \t  fputc ('\\n', asm_out_file);\n \t}\n     }"}, {"sha": "b2152a53bf96f7d7c3f3b7688d97d9325fe0240e", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cc2df084b7977653a9b59cbc34a9ad500ae619c/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cc2df084b7977653a9b59cbc34a9ad500ae619c/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=7cc2df084b7977653a9b59cbc34a9ad500ae619c", "patch": "@@ -424,6 +424,7 @@ extern enum dwarf_tag dw_get_die_tag (dw_die_ref);\n \n /* Data about a single source file.  */\n struct GTY((for_user)) dwarf_file_data {\n+  const char * key;\n   const char * filename;\n   int emitted_number;\n };"}]}