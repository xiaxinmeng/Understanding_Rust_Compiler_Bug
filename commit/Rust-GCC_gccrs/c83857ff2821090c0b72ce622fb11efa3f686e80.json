{"sha": "c83857ff2821090c0b72ce622fb11efa3f686e80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgzODU3ZmYyODIxMDkwYzBiNzJjZTYyMmZiMTFlZmEzZjY4NmU4MA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-06-02T05:48:30Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-06-02T05:48:30Z"}, "message": "c-opts.c (CL_REJECT_NEGATIVE): New.\n\n\n\t* c-opts.c (CL_REJECT_NEGATIVE): New.\n\t(c_common_decode_option): Update to use it.\n\t* c.opt: Update documentation; use RejectNegative.\n\t* opts.sh: Handle RejectNegative.\n\nFrom-SVN: r67325", "tree": {"sha": "225bc278bbb5b0d0114f226c9a902485d2440d1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/225bc278bbb5b0d0114f226c9a902485d2440d1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c83857ff2821090c0b72ce622fb11efa3f686e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83857ff2821090c0b72ce622fb11efa3f686e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c83857ff2821090c0b72ce622fb11efa3f686e80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83857ff2821090c0b72ce622fb11efa3f686e80/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d48b7f2a3f4c35153d9f4d96ec5b6951e6a6a9cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48b7f2a3f4c35153d9f4d96ec5b6951e6a6a9cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48b7f2a3f4c35153d9f4d96ec5b6951e6a6a9cd"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "16164f84b9747b4f874643e141ccea5a71251007", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83857ff2821090c0b72ce622fb11efa3f686e80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83857ff2821090c0b72ce622fb11efa3f686e80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c83857ff2821090c0b72ce622fb11efa3f686e80", "patch": "@@ -1,3 +1,10 @@\n+2003-06-02  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-opts.c (CL_REJECT_NEGATIVE): New.\n+\t(c_common_decode_option): Update to use it.\n+\t* c.opt: Update documentation; use RejectNegative.\n+\t* opts.sh: Handle RejectNegative.\n+\n 2003-06-01  Zack Weinberg  <zack@codesourcery.com>\n \n \t* ggc-page.c (init_ggc): Give better diagnostics on failure to"}, {"sha": "bd02e199079437b7c17509e7f3cc5ae6ce701029", "filename": "gcc/c-opts.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83857ff2821090c0b72ce622fb11efa3f686e80/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83857ff2821090c0b72ce622fb11efa3f686e80/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=c83857ff2821090c0b72ce622fb11efa3f686e80", "patch": "@@ -119,12 +119,13 @@ static void finish_options PARAMS ((void));\n #define STDC_0_IN_SYSTEM_HEADERS 0\n #endif\n \n-#define CL_C\t\t(1 << 0) /* Only C.  */\n-#define CL_OBJC\t\t(1 << 1) /* Only ObjC.  */\n-#define CL_CXX\t\t(1 << 2) /* Only C++.  */\n-#define CL_OBJCXX\t(1 << 3) /* Only ObjC++.  */\n-#define CL_JOINED\t(1 << 4) /* If takes joined argument.  */\n-#define CL_SEPARATE\t(1 << 5) /* If takes a separate argument.  */\n+#define CL_C\t\t\t(1 << 0) /* Only C.  */\n+#define CL_OBJC\t\t\t(1 << 1) /* Only ObjC.  */\n+#define CL_CXX\t\t\t(1 << 2) /* Only C++.  */\n+#define CL_OBJCXX\t\t(1 << 3) /* Only ObjC++.  */\n+#define CL_JOINED\t\t(1 << 4) /* If takes joined argument.  */\n+#define CL_SEPARATE\t\t(1 << 5) /* If takes a separate argument.  */\n+#define CL_REJECT_NEGATIVE\t(1 << 6) /* Reject no- form.  */\n \n #include \"c-options.c\"\n \n@@ -398,9 +399,15 @@ c_common_decode_option (argc, argv)\n   if (opt_index == N_OPTS)\n     goto done;\n \n-  result = 1;\n   option = &cl_options[opt_index];\n \n+  /* Reject negative form of switches that don't take negatives.  */\n+  if (!on && (option->flags & CL_REJECT_NEGATIVE))\n+    goto done;\n+\n+  /* We've recognised this switch.  */\n+  result = 1;\n+\n   /* Sort out any argument the switch takes.  */\n   if (option->flags & (CL_JOINED | CL_SEPARATE))\n     {\n@@ -629,10 +636,7 @@ c_common_decode_option (argc, argv)\n       break;\n \n     case OPT_Werror_implicit_function_declaration:\n-      if (!on)\n-\tresult = 0;\n-      else\n-\tmesg_implicit_function_declaration = 2;\n+      mesg_implicit_function_declaration = 2;\n       break;\n \n     case OPT_Wfloat_equal:\n@@ -908,7 +912,7 @@ c_common_decode_option (argc, argv)\n       break;\n \n     case OPT_fdump_:\n-      if (!on || !dump_switch_p (argv[0] + strlen (\"-f\")))\n+      if (!dump_switch_p (argv[0] + strlen (\"-f\")))\n \tresult = 0;\n       break;\n \n@@ -1072,10 +1076,6 @@ c_common_decode_option (argc, argv)\n       break;\n \n     case OPT_ftabstop_:\n-      /* Don't recognize -fno-tabstop=.  */\n-      if (!on)\n-\treturn 0;\n-\n       /* It is documented that we silently ignore silly values.  */\n \t{\n \t  char *endptr;"}, {"sha": "6cd9295dafc4b580fd5f73397a2e7b51ee3229e9", "filename": "gcc/c.opt", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83857ff2821090c0b72ce622fb11efa3f686e80/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83857ff2821090c0b72ce622fb11efa3f686e80/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=c83857ff2821090c0b72ce622fb11efa3f686e80", "patch": "@@ -24,7 +24,9 @@\n ; and each field appearing on its own line.  The first field is the\n ; command-line switch with the leading \"-\" removed.  All options\n ; beginning with \"f\" or \"W\" are implicitly assumed to take a \"no-\"\n-; form; this form should not be listed.\n+; form; this form should not be listed.  If you do not want this\n+; negative form and you want it to be automatically rejected, add\n+; RejectNegative to the second field.\n \n ; The second field is a space-separated list of which parts of the\n ; compiler recognize the switch.  Current valid entries are \"C\",\n@@ -144,7 +146,7 @@ Werror\n C ObjC C++ ObjC++\n \n Werror-implicit-function-declaration\n-C ObjC\n+C ObjC RejectNegative\n \n Wfloat-equal\n C ObjC C++ ObjC++\n@@ -339,7 +341,7 @@ fdollars-in-identifiers\n C ObjC C++ ObjC++\n \n fdump-\n-C ObjC C++ ObjC++ Joined\n+C ObjC C++ ObjC++ Joined RejectNegative\n \n felide-constructors\n C++ ObjC++\n@@ -465,7 +467,7 @@ fstrict-prototype\n C++ ObjC++\n \n ftabstop=\n-C ObjC C++ ObjC++ Joined\n+C ObjC C++ ObjC++ Joined RejectNegative\n \n ftemplate-depth-\n C++ ObjC++ Joined"}, {"sha": "4056946df10912130505ac1cb41dc146f23a8e78", "filename": "gcc/opts.sh", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83857ff2821090c0b72ce622fb11efa3f686e80/gcc%2Fopts.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83857ff2821090c0b72ce622fb11efa3f686e80/gcc%2Fopts.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.sh?ref=c83857ff2821090c0b72ce622fb11efa3f686e80", "patch": "@@ -48,8 +48,9 @@ cat \"$@\" | ${AWK} '\n         if (langs ~ \":ObjC:\") flags = flags \" | CL_OBJC\"\n         if (langs ~ \":C\\\\+\\\\+:\") flags = flags \" | CL_CXX\"\n         if (langs ~ \":ObjC\\\\+\\\\+:\") flags = flags \" | CL_OBJCXX\"\n-        if (langs ~ \":Joined\") flags = flags \" | CL_JOINED\"\n-        if (langs ~ \":Separate\") flags = flags \" | CL_SEPARATE\"\n+        if (langs ~ \":Joined:\") flags = flags \" | CL_JOINED\"\n+        if (langs ~ \":Separate:\") flags = flags \" | CL_SEPARATE\"\n+        if (langs ~ \":RejectNegative:\") flags = flags \" | CL_REJECT_NEGATIVE\"\n \tsub( \"^0 \\\\| \", \"\", flags )\n \treturn flags\n     }"}]}