{"sha": "43a4dd826c68ecf0f79df3e907db860fa460f691", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNhNGRkODI2YzY4ZWNmMGY3OWRmM2U5MDdkYjg2MGZhNDYwZjY5MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-05-18T17:59:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-05-18T17:59:58Z"}, "message": "decl.c (gnat_to_gnu_entity): Use Underlying_Type in lieu of more verbose construct.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use Underlying_Type in\n\tlieu of more verbose construct.\n\t* gcc-interface/trans.c (Call_to_gnu): Likewise.\n\t(gnat_to_gnu): Likewise.  Remove obsolete code.\n\nFrom-SVN: r210585", "tree": {"sha": "a6c2d68c4c26a332f0f3e10f6dfc96b421b72af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6c2d68c4c26a332f0f3e10f6dfc96b421b72af7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43a4dd826c68ecf0f79df3e907db860fa460f691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a4dd826c68ecf0f79df3e907db860fa460f691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43a4dd826c68ecf0f79df3e907db860fa460f691", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a4dd826c68ecf0f79df3e907db860fa460f691/comments", "author": null, "committer": null, "parents": [{"sha": "f9d7d7c14cc8fe8c62e22c1edc5d4e2db57394fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9d7d7c14cc8fe8c62e22c1edc5d4e2db57394fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9d7d7c14cc8fe8c62e22c1edc5d4e2db57394fb"}], "stats": {"total": 43, "additions": 15, "deletions": 28}, "files": [{"sha": "d624a8e6ff52d8e66076a68617414738acb26024", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a4dd826c68ecf0f79df3e907db860fa460f691/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a4dd826c68ecf0f79df3e907db860fa460f691/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=43a4dd826c68ecf0f79df3e907db860fa460f691", "patch": "@@ -1,3 +1,10 @@\n+2014-05-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use Underlying_Type in\n+\tlieu of more verbose construct.\n+\t* gcc-interface/trans.c (Call_to_gnu): Likewise.\n+\t(gnat_to_gnu): Likewise.  Remove obsolete code.\n+\n 2014-05-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Subtype>: Do not"}, {"sha": "33cf08424d5ea5f7a99ce07eb1f0bc385d9c45df", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a4dd826c68ecf0f79df3e907db860fa460f691/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a4dd826c68ecf0f79df3e907db860fa460f691/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=43a4dd826c68ecf0f79df3e907db860fa460f691", "patch": "@@ -543,10 +543,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t       This is a workaround for major problems in protected type\n \t       handling.  */\n \t    Entity_Id Scop = Scope (Scope (gnat_entity));\n-\t    if ((Is_Protected_Type (Scop)\n-\t\t || (Is_Private_Type (Scop)\n-\t\t     && Present (Full_View (Scop))\n-\t\t     && Is_Protected_Type (Full_View (Scop))))\n+\t    if (Is_Protected_Type (Underlying_Type (Scop))\n \t\t&& Present (Original_Record_Component (gnat_entity)))\n \t      {\n \t\tgnu_decl\n@@ -870,9 +867,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t/* If this is an aliased object with an unconstrained nominal subtype,\n \t   make a type that includes the template.  */\n \tif (Is_Constr_Subt_For_UN_Aliased (Etype (gnat_entity))\n-\t    && (Is_Array_Type (Etype (gnat_entity))\n-\t\t|| (Is_Private_Type (Etype (gnat_entity))\n-\t\t    && Is_Array_Type (Full_View (Etype (gnat_entity)))))\n+\t    && Is_Array_Type (Underlying_Type (Etype (gnat_entity)))\n \t    && !type_annotate_only)\n \t  {\n \t    tree gnu_array\n@@ -1383,9 +1378,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t   Note that we have to do that this late because of the couple of\n \t   allocation adjustments that might be made just above.  */\n \tif (Is_Constr_Subt_For_UN_Aliased (Etype (gnat_entity))\n-\t    && (Is_Array_Type (Etype (gnat_entity))\n-\t\t|| (Is_Private_Type (Etype (gnat_entity))\n-\t\t    && Is_Array_Type (Full_View (Etype (gnat_entity)))))\n+\t    && Is_Array_Type (Underlying_Type (Etype (gnat_entity)))\n \t    && !type_annotate_only)\n \t  {\n \t    tree gnu_array"}, {"sha": "35c6ff3f6fa16f43dec5a46708ff51203e162173", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a4dd826c68ecf0f79df3e907db860fa460f691/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a4dd826c68ecf0f79df3e907db860fa460f691/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=43a4dd826c68ecf0f79df3e907db860fa460f691", "patch": "@@ -4269,9 +4269,7 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t      if (TREE_CODE (TREE_TYPE (gnu_actual)) == RECORD_TYPE\n \t\t  && TYPE_CONTAINS_TEMPLATE_P (TREE_TYPE (gnu_actual))\n \t\t  && Is_Constr_Subt_For_UN_Aliased (Etype (gnat_actual))\n-\t\t  && (Is_Array_Type (Etype (gnat_actual))\n-\t\t      || (Is_Private_Type (Etype (gnat_actual))\n-\t\t\t  && Is_Array_Type (Full_View (Etype (gnat_actual))))))\n+\t\t  && Is_Array_Type (Underlying_Type (Etype (gnat_actual))))\n \t\tgnu_actual = convert (gnat_to_gnu_type (Etype (gnat_actual)),\n \t\t\t\t      gnu_actual);\n \t    }\n@@ -6192,8 +6190,7 @@ gnat_to_gnu (Node_Id gnat_node)\n       /* These can either be operations on booleans or on modular types.\n \t Fall through for boolean types since that's the way GNU_CODES is\n \t set up.  */\n-      if (IN (Ekind (Underlying_Type (Etype (gnat_node))),\n-\t      Modular_Integer_Kind))\n+      if (Is_Modular_Integer_Type (Underlying_Type (Etype (gnat_node))))\n \t{\n \t  enum tree_code code\n \t    = (kind == N_Op_Or ? BIT_IOR_EXPR\n@@ -6236,22 +6233,14 @@ gnat_to_gnu (Node_Id gnat_node)\n \tgnu_lhs = maybe_vector_array (gnu_lhs);\n \tgnu_rhs = maybe_vector_array (gnu_rhs);\n \n-\t/* If this is a comparison operator, convert any references to\n-\t   an unconstrained array value into a reference to the\n-\t   actual array.  */\n+\t/* If this is a comparison operator, convert any references to an\n+\t   unconstrained array value into a reference to the actual array.  */\n \tif (TREE_CODE_CLASS (code) == tcc_comparison)\n \t  {\n \t    gnu_lhs = maybe_unconstrained_array (gnu_lhs);\n \t    gnu_rhs = maybe_unconstrained_array (gnu_rhs);\n \t  }\n \n-\t/* If the result type is a private type, its full view may be a\n-\t   numeric subtype. The representation we need is that of its base\n-\t   type, given that it is the result of an arithmetic operation.  */\n-\telse if (Is_Private_Type (Etype (gnat_node)))\n-\t  gnu_type = gnu_result_type\n-\t    = get_unpadded_type (Base_Type (Full_View (Etype (gnat_node))));\n-\n \t/* If this is a shift whose count is not guaranteed to be correct,\n \t   we need to adjust the shift count.  */\n \tif (IN (kind, N_Op_Shift) && !Shift_Count_OK (gnat_node))\n@@ -6361,9 +6350,7 @@ gnat_to_gnu (Node_Id gnat_node)\n       /* This case can apply to a boolean or a modular type.\n \t Fall through for a boolean operand since GNU_CODES is set\n \t up to handle this.  */\n-      if (Is_Modular_Integer_Type (Etype (gnat_node))\n-\t  || (Is_Private_Type (Etype (gnat_node))\n-\t      && Is_Modular_Integer_Type (Full_View (Etype (gnat_node)))))\n+      if (Is_Modular_Integer_Type (Underlying_Type (Etype (gnat_node))))\n \t{\n \t  gnu_expr = gnat_to_gnu (Right_Opnd (gnat_node));\n \t  gnu_result_type = get_unpadded_type (Etype (gnat_node));"}]}