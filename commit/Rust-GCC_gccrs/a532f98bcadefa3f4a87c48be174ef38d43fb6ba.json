{"sha": "a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUzMmY5OGJjYWRlZmEzZjRhODdjNDhiZTE3NGVmMzhkNDNmYjZiYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T09:12:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T09:12:14Z"}, "message": "[multiple changes]\n\n2013-04-23  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Fix_Error): Rewrite to do more accurate job\n\tof getting proper name in the case where pragma comes from\n\taspect.\n\t* sem_ch3.adb, sinfo.ads, par-ch6.adb, exp_ch6.adb: Minor reformatting.\n\n2013-04-23  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch6.adb (Process_PPCs): Do not filter postconditions based on\n\tapplicable policy.\n\n2013-04-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb (Traverse_Aux_Decls): Minor code reorganization.\n\n2013-04-23  Doug Rupp  <rupp@adacore.com>\n\n\t* init.c: Move facility macros outside IN_RTS.\n\n2013-04-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* freeze.adb (Freeze_Entity): For the case of a bit-packed\n\tarray time that is known at compile time to have more that\n\tInteger'Last+1 elements, issue an error, since such arrays are\n\tnot supported.\n\nFrom-SVN: r198178", "tree": {"sha": "1ed92c2da809b2a957c113489c5298e026e0da1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ed92c2da809b2a957c113489c5298e026e0da1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/comments", "author": null, "committer": null, "parents": [{"sha": "cae64f1110a0f084dff19e7d2ded0d1ab1eb8ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cae64f1110a0f084dff19e7d2ded0d1ab1eb8ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cae64f1110a0f084dff19e7d2ded0d1ab1eb8ace"}], "stats": {"total": 221, "additions": 163, "deletions": 58}, "files": [{"sha": "9cb2680e01caefe64564eb987654140fc4199160", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "patch": "@@ -1,3 +1,30 @@\n+2013-04-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Fix_Error): Rewrite to do more accurate job\n+\tof getting proper name in the case where pragma comes from\n+\taspect.\n+\t* sem_ch3.adb, sinfo.ads, par-ch6.adb, exp_ch6.adb: Minor reformatting.\n+\n+2013-04-23  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch6.adb (Process_PPCs): Do not filter postconditions based on\n+\tapplicable policy.\n+\n+2013-04-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb (Traverse_Aux_Decls): Minor code reorganization.\n+\n+2013-04-23  Doug Rupp  <rupp@adacore.com>\n+\n+\t* init.c: Move facility macros outside IN_RTS.\n+\n+2013-04-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): For the case of a bit-packed\n+\tarray time that is known at compile time to have more that\n+\tInteger'Last+1 elements, issue an error, since such arrays are\n+\tnot supported.\n+\n 2013-04-23  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Analyze_Dependency_Clause): Update all calls to"}, {"sha": "1be6d729ee22e9b6d16592a0c906314af62e9a1f", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "patch": "@@ -1720,21 +1720,18 @@ package body Exp_Ch6 is\n             --  this is harder to verify, and there may be a redundant check.\n \n             if (Present (Find_Aspect (E_Actual, Aspect_Predicate))\n-              or else Present\n-                (Find_Aspect (E_Actual, Aspect_Dynamic_Predicate))\n-              or else Present\n-                (Find_Aspect (E_Actual, Aspect_Static_Predicate)))\n+                  or else\n+                Present (Find_Aspect (E_Actual, Aspect_Dynamic_Predicate))\n+                  or else\n+                Present (Find_Aspect (E_Actual, Aspect_Static_Predicate)))\n               and then not Is_Init_Proc (Subp)\n             then\n-               if Is_Derived_Type (E_Actual)\n-                 and then Is_Inherited_Operation_For_Type (Subp, E_Actual)\n+               if (Is_Derived_Type (E_Actual)\n+                    and then Is_Inherited_Operation_For_Type (Subp, E_Actual))\n+                 or else Is_Entity_Name (Actual)\n                then\n                   Append_To\n                     (Post_Call, Make_Predicate_Check (E_Actual, Actual));\n-\n-               elsif Is_Entity_Name (Actual) then\n-                  Append_To\n-                    (Post_Call, Make_Predicate_Check (E_Actual, Actual));\n                end if;\n             end if;\n "}, {"sha": "95a73a663dd54eb3a1a2d3013db920aff4736b9e", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 82, "deletions": 17, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "patch": "@@ -3913,27 +3913,92 @@ package body Freeze is\n                   end if;\n                end if;\n \n-               --  For bit-packed arrays, check the size\n+               --  Specific checks for bit-packed arrays\n \n-               if Is_Bit_Packed_Array (E) and then Known_RM_Size (E) then\n-                  declare\n-                     SizC : constant Node_Id := Size_Clause (E);\n+               if Is_Bit_Packed_Array (E) then\n \n-                     Discard : Boolean;\n-                     pragma Warnings (Off, Discard);\n+                  --  Check number of elements for bit packed arrays that come\n+                  --  from source and have compile time known ranges. The\n+                  --  bit-packed arrays circuitry does not support arrays\n+                  --  with more than Integer'Last + 1 elements, and when this\n+                  --  restriction is violated, causes incorrect data access.\n \n-                  begin\n-                     --  It is not clear if it is possible to have no size\n-                     --  clause at this stage, but it is not worth worrying\n-                     --  about. Post error on the entity name in the size\n-                     --  clause if present, else on the type entity itself.\n+                  --  For the case where this is not compile time known, a\n+                  --  run-time check should be generated???\n \n-                     if Present (SizC) then\n-                        Check_Size (Name (SizC), E, RM_Size (E), Discard);\n-                     else\n-                        Check_Size (E, E, RM_Size (E), Discard);\n-                     end if;\n-                  end;\n+                  if Comes_From_Source (E) and then Is_Constrained (E) then\n+                     declare\n+                        Elmts : Uint;\n+                        Index : Node_Id;\n+                        Ilen  : Node_Id;\n+                        Ityp  : Entity_Id;\n+\n+                     begin\n+                        Elmts := Uint_1;\n+                        Index := First_Index (E);\n+                        while Present (Index) loop\n+                           Ityp := Etype (Index);\n+\n+                           --  Never generate an error if any index is of a\n+                           --  generic type. We will check this in instances.\n+\n+                           if Is_Generic_Type (Ityp) then\n+                              Elmts := Uint_0;\n+                              exit;\n+                           end if;\n+\n+                           Ilen :=\n+                             Make_Attribute_Reference (Loc,\n+                               Prefix         =>\n+                                 New_Occurrence_Of (Ityp, Loc),\n+                               Attribute_Name => Name_Range_Length);\n+                           Analyze_And_Resolve (Ilen);\n+\n+                           --  No attempt is made to check number of elements\n+                           --  if not compile time known.\n+\n+                           if Nkind (Ilen) /= N_Integer_Literal then\n+                              Elmts := Uint_0;\n+                              exit;\n+                           end if;\n+\n+                           Elmts := Elmts * Intval (Ilen);\n+                           Next_Index (Index);\n+                        end loop;\n+\n+                        if Elmts > Intval (High_Bound\n+                                             (Scalar_Range\n+                                                (Standard_Integer))) + 1\n+                        then\n+                           Error_Msg_N\n+                             (\"bit packed array type may not have \"\n+                              & \"more than Integer''Last+1 elements\", E);\n+                        end if;\n+                     end;\n+                  end if;\n+\n+                  --  Check size\n+\n+                  if Known_RM_Size (E) then\n+                     declare\n+                        SizC : constant Node_Id := Size_Clause (E);\n+\n+                        Discard : Boolean;\n+                        pragma Warnings (Off, Discard);\n+\n+                     begin\n+                        --  It is not clear if it is possible to have no size\n+                        --  clause at this stage, but it is not worth worrying\n+                        --  about. Post error on the entity name in the size\n+                        --  clause if present, else on the type entity itself.\n+\n+                        if Present (SizC) then\n+                           Check_Size (Name (SizC), E, RM_Size (E), Discard);\n+                        else\n+                           Check_Size (E, E, RM_Size (E), Discard);\n+                        end if;\n+                     end;\n+                  end if;\n                end if;\n \n                --  If any of the index types was an enumeration type with a"}, {"sha": "f6f5b2aba22665376e7e13fbc22afe4ef8d9f192", "filename": "gcc/ada/init.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "patch": "@@ -816,6 +816,10 @@ void (*__gnat_ctrl_c_handler) (void) = 0;\n #define lib_get_invo_handle LIB$GET_INVO_HANDLE\n #endif\n \n+/* Masks for facility identification. */\n+#define FAC_MASK  \t\t0x0fff0000\n+#define DECADA_M_FACILITY\t0x00310000\n+\n /* Define macro symbols for the VMS conditions that become Ada exceptions.\n    It would be better to just include <ssdef.h> */\n \n@@ -914,9 +918,6 @@ extern Exception_Code Base_Code_In (Exception_Code);\n /* DEC Ada exceptions are not defined in a header file, so they\n    must be declared.  */\n \n-#define FAC_MASK  \t\t0x0fff0000\n-#define DECADA_M_FACILITY\t0x00310000\n-\n #define ADA$_ALREADY_OPEN\t0x0031a594\n #define ADA$_CONSTRAINT_ERRO\t0x00318324\n #define ADA$_DATA_ERROR\t\t0x003192c4"}, {"sha": "1e96cb246a5575b59278f84fd8e4925d0d2bc294", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "patch": "@@ -150,7 +150,7 @@ package body Ch6 is\n    --  PARAMETER_AND_RESULT_PROFILE ::= [FORMAL_PART] return SUBTYPE_MARK\n \n    --  SUBPROGRAM_BODY ::=\n-   --    SUBPROGRAM_SPECIFICATION is\n+   --    SUBPROGRAM_SPECIFICATION [ASPECT_SPECIFICATIONS] is\n    --      DECLARATIVE_PART\n    --    begin\n    --      HANDLED_SEQUENCE_OF_STATEMENTS"}, {"sha": "c7aa5c1a16ca2a4495d9cf1ca71a8fdc2149d7d9", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "patch": "@@ -917,7 +917,7 @@ package body Par_SCO is\n       From : Nat;\n \n       procedure Traverse_Aux_Decls (N : Node_Id);\n-      --  Traverse the Aux_Decl_Nodes of compilation unit N\n+      --  Traverse the Aux_Decls_Node of compilation unit N\n \n       ------------------------\n       -- Traverse_Aux_Decls --\n@@ -927,8 +927,14 @@ package body Par_SCO is\n          ADN : constant Node_Id := Aux_Decls_Node (N);\n       begin\n          Traverse_Declarations_Or_Statements (Config_Pragmas (ADN));\n-         Traverse_Declarations_Or_Statements (Declarations   (ADN));\n          Traverse_Declarations_Or_Statements (Pragmas_After  (ADN));\n+\n+         --  Declarations and Actions do not correspond to source constructs,\n+         --  they contain only nodes from expansion, so at this point they\n+         --  should still be empty:\n+\n+         pragma Assert (No (Declarations (ADN)));\n+         pragma Assert (No (Actions (ADN)));\n       end Traverse_Aux_Decls;\n \n    --  Start of processing for SCO_Record"}, {"sha": "55fce938cd3959d5038d152029dbf6f40c4c1c48", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "patch": "@@ -3410,7 +3410,7 @@ package body Sem_Ch3 is\n \n             if Aliased_Present (N)\n               and then (not Is_Entity_Name (E)\n-                 or else not Comes_From_Source (E))\n+                         or else not Comes_From_Source (E))\n             then\n                Set_Is_Constr_Subt_For_UN_Aliased (Act_T);\n             end if;"}, {"sha": "68f1d41703b1248d73115351b728eb3811352803", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "patch": "@@ -12174,13 +12174,10 @@ package body Sem_Ch6 is\n          Prag := First (Declarations (N));\n          while Present (Prag) loop\n             if Nkind (Prag) = N_Pragma then\n-               Check_Applicable_Policy (Prag);\n \n-               --  If pragma, capture if postconditions enabled, else ignore\n+               --  Capture postcondition pragmas\n \n-               if Pragma_Name (Prag) = Name_Postcondition\n-                 and then not Is_Ignored (Prag)\n-               then\n+               if Pragma_Name (Prag) = Name_Postcondition then\n                   if Plist = No_List then\n                      Plist := Empty_List;\n                   end if;"}, {"sha": "8d6a38e5c1a4f96fb37a570d2c4e7eb634e32e41", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "patch": "@@ -827,12 +827,12 @@ package body Sem_Prag is\n \n       procedure Fix_Error (Msg : in out String);\n       --  This is called prior to issuing an error message. Msg is a string\n-      --  that typically contains the substring \"pragma\". If the current pragma\n-      --  comes from an aspect, each such \"pragma\" substring is replaced with\n-      --  the characters \"aspect\", and if Error_Msg_Name_1 is Name_Precondition\n-      --  (resp Name_Postcondition) it is changed to Name_Pre (resp Name_Post).\n-      --  In addition, if the current pragma results from rewriting another\n-      --  pragma, Error_Msg_Name_1 is set to the original pragma name.\n+      --  that typically contains the substring \"pragma\". If the pragma comes\n+      --  from an aspect, each such \"pragma\" substring is replaced with the\n+      --  characters \"aspect\", and Error_Msg_Name_1 is set to the name of the\n+      --  aspect (which may be different from the pragma name). If the current\n+      --  pragma results from rewriting another pragma, then Error_Msg_Name_1\n+      --  is set to the original pragma name.\n \n       procedure Gather_Associations\n         (Names : Name_List;\n@@ -2864,24 +2864,33 @@ package body Sem_Prag is\n       ---------------\n \n       procedure Fix_Error (Msg : in out String) is\n-         Orig : constant Node_Id := Original_Node (N);\n-\n       begin\n+         --  If we have a rewriting of another pragma, go to that pragma\n+\n+         if Is_Rewrite_Substitution (N)\n+           and then Nkind (Original_Node (N)) = N_Pragma\n+         then\n+            Error_Msg_Name_1 := Pragma_Name (Original_Node (N));\n+         end if;\n+\n+         --  Case where pragma comes from an aspect specification\n+\n          if From_Aspect_Specification (N) then\n+\n+            --  Change appearence of \"pragma\" in message to \"aspect\"\n+\n             for J in Msg'First .. Msg'Last - 5 loop\n                if Msg (J .. J + 5) = \"pragma\" then\n                   Msg (J .. J + 5) := \"aspect\";\n                end if;\n             end loop;\n \n-            if Error_Msg_Name_1 = Name_Precondition then\n-               Error_Msg_Name_1 := Name_Pre;\n-            elsif Error_Msg_Name_1 = Name_Postcondition then\n-               Error_Msg_Name_1 := Name_Post;\n-            end if;\n+            --  Get name from corresponding aspect\n \n-         elsif Orig /= N and then Nkind (Orig) = N_Pragma then\n-            Error_Msg_Name_1 := Pragma_Name (Orig);\n+            if Present (Corresponding_Aspect (N)) then\n+               Error_Msg_Name_1 :=\n+                 Chars (Identifier (Corresponding_Aspect (N)));\n+            end if;\n          end if;\n       end Fix_Error;\n "}, {"sha": "90de0b07418c3e4c4d5d0f4da9bca35e1e28b160", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a532f98bcadefa3f4a87c48be174ef38d43fb6ba/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=a532f98bcadefa3f4a87c48be174ef38d43fb6ba", "patch": "@@ -1327,8 +1327,8 @@ package Sinfo is\n    --    an Assertion_Policy pragma), then Is_Ignored is set if assertions are\n    --    ignored because of the absence of a -gnata switch. For any other\n    --    aspects or pragmas, the flag is off. If this flag is set, the\n-   --    aspect/pragma is fully analyzed and checked for other\n-   --    syntactic/semantic errors, but it does not have any semantic effect.\n+   --    aspect/pragma is fully analyzed and checked for other syntactic\n+   --    and semantic errors, but it does not have any semantic effect.\n \n    --  Is_In_Discriminant_Check (Flag11-Sem)\n    --    This flag is present in a selected component, and is used to indicate\n@@ -2145,7 +2145,10 @@ package Sinfo is\n       --  where the interesting allowed cases (which do not fit the syntax of\n       --  the first alternative above) are\n \n-      --  ASPECT_MARK => Pre'Class | Post'Class | Type_Invariant'Class\n+      --  ASPECT_MARK => Pre'Class |\n+      --                 Post'Class |\n+      --                 Type_Invariant'Class |\n+      --                 Invariant'Class\n \n       --  We allow this special usage in all Ada modes, but it would be a\n       --  pain to allow these aspects to pervade the pragma syntax, and the\n@@ -4728,7 +4731,7 @@ package Sinfo is\n       --------------------------\n \n       --  SUBPROGRAM_BODY ::=\n-      --    SUBPROGRAM_SPECIFICATION is\n+      --    SUBPROGRAM_SPECIFICATION [ASPECT_SPECIFICATIONS] is\n       --      DECLARATIVE_PART\n       --    begin\n       --      HANDLED_SEQUENCE_OF_STATEMENTS"}]}