{"sha": "f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBjMmRmNjNjNjRjYjE4ZmYxZThiZTdkMDA0MjEwOGVmZDY0ODNiMw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-12-13T19:44:38Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-12-13T19:44:38Z"}, "message": "re PR fortran/46625 (libquadmath: Mangle internal symbols; rename __float128 <-> string functions)\n\n2010-12-13  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/46625\n        * gdtoa/gdtoaimp.h: Mangle internal functions by\n        prefixing them with __quadmath. Don't use gdtoa's strcp(y).\n        * gdtoa/g_Qfmt.c (g_Qfmt): Use strcpy instead of strcp.\n        * gdtoa/misc.c (strcpy): Renamed from strcp and only use\n        if NO_STRING_H is set.\n        * quadmath-imp.h (__quadmath_rem_pio2q,\n        * __quadmath_kernel_sincosq\n        __quadmath_kernel_sinq, __quadmath_kernel_cosq): Added\n        __quadmath prefix to internal functions.\n        * math/cosq.c (cosq): Ditto.\n        * math/sinq.c (cosq): Ditto.\n        * math/tanq.c (tanq,__quadmath_kernel_tanq): Ditto.\n        * math/rem_pio2q.c (rem_pio2, __quadmath_kernel_rem_pio2):\n        * Ditto.\n        * math/sinq_kernel.c (__quadmath_kernel_sinq): Ditto.\n        * math/cosq_kernel.c (__quadmath_kernel_cosq): Ditto.\n\nFrom-SVN: r167768", "tree": {"sha": "dcd344482f53be11c8fdb8b5221713e795bf5b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcd344482f53be11c8fdb8b5221713e795bf5b1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c58bb30d66b333fc184a6b53ae9479e4aaeae8c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c58bb30d66b333fc184a6b53ae9479e4aaeae8c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c58bb30d66b333fc184a6b53ae9479e4aaeae8c4"}], "stats": {"total": 198, "additions": 112, "deletions": 86}, "files": [{"sha": "de3eaa0643475047d3fcf117c63fa2402769fd4e", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "patch": "@@ -1,3 +1,21 @@\n+2010-12-13  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/46625\n+\t* gdtoa/gdtoaimp.h: Mangle internal functions by\n+\tprefixing them with __quadmath. Don't use gdtoa's strcp(y).\n+\t* gdtoa/g_Qfmt.c (g_Qfmt): Use strcpy instead of strcp.\n+\t* gdtoa/misc.c (strcpy): Renamed from strcp and only use\n+\tif NO_STRING_H is set.\n+\t* quadmath-imp.h (__quadmath_rem_pio2q, __quadmath_kernel_sincosq\n+\t__quadmath_kernel_sinq, __quadmath_kernel_cosq): Added\n+\t__quadmath prefix to internal functions.\n+\t* math/cosq.c (cosq): Ditto.\n+\t* math/sinq.c (cosq): Ditto.\n+\t* math/tanq.c (tanq,__quadmath_kernel_tanq): Ditto.\n+\t* math/rem_pio2q.c (rem_pio2, __quadmath_kernel_rem_pio2): Ditto.\n+\t* math/sinq_kernel.c (__quadmath_kernel_sinq): Ditto.\n+\t* math/cosq_kernel.c (__quadmath_kernel_cosq): Ditto.\n+\n 2010-12-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/46772"}, {"sha": "426c598cfc806fcbd9fc5dd146858a2fc7370cad", "filename": "libquadmath/gdtoa/g_Qfmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fgdtoa%2Fg_Qfmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fgdtoa%2Fg_Qfmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fg_Qfmt.c?ref=f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "patch": "@@ -82,12 +82,12 @@ g_Qfmt(char *buf, void *V, int ndig, size_t bufsize)\n \t\tif (ex == 0x7fff) {\n \t\t\t/* Infinity or NaN */\n \t\t\tif (bits[0] | bits[1] | bits[2] | bits[3])\n-\t\t\t\tb = strcp(b, \"NaN\");\n+\t\t\t\tb = strcpy(b, \"NaN\");\n \t\t\telse {\n \t\t\t\tb = buf;\n \t\t\t\tif (sign)\n \t\t\t\t\t*b++ = '-';\n-\t\t\t\tb = strcp(b, \"Infinity\");\n+\t\t\t\tb = strcpy(b, \"Infinity\");\n \t\t\t\t}\n \t\t\treturn b;\n \t\t\t}"}, {"sha": "4aa8f78d307263c14fe521fbc708ff67e40c7c56", "filename": "libquadmath/gdtoa/gdtoaimp.h", "status": "modified", "additions": 51, "deletions": 46, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fgdtoa%2Fgdtoaimp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fgdtoa%2Fgdtoaimp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fgdtoaimp.h?ref=f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "patch": "@@ -472,51 +472,54 @@ extern void memcpy_D2A ANSI((void*, const void*, size_t));\n #define Bcopy(x,y) memcpy(&x->sign,&y->sign,y->wds*sizeof(ULong) + 2*sizeof(int))\n #endif /* NO_STRING_H */\n \n-#define Balloc Balloc_D2A\n-#define Bfree Bfree_D2A\n-#define ULtoQ ULtoQ_D2A\n-#define ULtof ULtof_D2A\n-#define ULtod ULtod_D2A\n-#define ULtodd ULtodd_D2A\n-#define ULtox ULtox_D2A\n-#define ULtoxL ULtoxL_D2A\n-#define any_on any_on_D2A\n-#define b2d b2d_D2A\n-#define bigtens bigtens_D2A\n-#define cmp cmp_D2A\n-#define copybits copybits_D2A\n-#define d2b d2b_D2A\n-#define decrement decrement_D2A\n-#define diff diff_D2A\n-#define dtoa_result dtoa_result_D2A\n-#define g__fmt g__fmt_D2A\n-#define gethex gethex_D2A\n-#define hexdig hexdig_D2A\n-#define hexnan hexnan_D2A\n-#define hi0bits(x) hi0bits_D2A((ULong)(x))\n-#define i2b i2b_D2A\n-#define increment increment_D2A\n-#define lo0bits lo0bits_D2A\n-#define lshift lshift_D2A\n-#define match match_D2A\n-#define mult mult_D2A\n-#define multadd multadd_D2A\n-#define nrv_alloc nrv_alloc_D2A\n-#define pow5mult pow5mult_D2A\n-#define quorem quorem_D2A\n-#define ratio ratio_D2A\n-#define rshift rshift_D2A\n-#define rv_alloc rv_alloc_D2A\n-#define s2b s2b_D2A\n-#define set_ones set_ones_D2A\n-#define strcp strcp_D2A\n-#define strtoIg strtoIg_D2A\n-#define sum sum_D2A\n-#define tens tens_D2A\n-#define tinytens tinytens_D2A\n-#define tinytens tinytens_D2A\n-#define trailz trailz_D2A\n-#define ulp ulp_D2A\n+#define Balloc __quadmath_Balloc_D2A\n+#define Bfree __quadmath_Bfree_D2A\n+#define ULtoQ __quadmath_ULtoQ_D2A\n+#define ULtof __quadmath_ULtof_D2A\n+#define ULtod __quadmath_ULtod_D2A\n+#define ULtodd __quadmath_ULtodd_D2A\n+#define ULtox __quadmath_ULtox_D2A\n+#define ULtoxL __quadmath_ULtoxL_D2A\n+#define any_on __quadmath_any_on_D2A\n+#define b2d __quadmath_b2d_D2A\n+#define bigtens __quadmath_bigtens_D2A\n+#define cmp __quadmath_cmp_D2A\n+#define copybits __quadmath_copybits_D2A\n+#define d2b __quadmath_d2b_D2A\n+#define decrement __quadmath_decrement_D2A\n+#define diff __quadmath_diff_D2A\n+#define dtoa_result __quadmath_dtoa_result_D2A\n+#define g__fmt __quadmath_g__fmt_D2A\n+#define gethex __quadmath_gethex_D2A\n+#define hexdig __quadmath_hexdig_D2A\n+#define hexnan __quadmath_hexnan_D2A\n+#define hi0bits_D2A __quadmath_hi0bits_D2A\n+#define hi0bits(x) __quadmath_hi0bits_D2A((ULong)(x))\n+#define i2b __quadmath_i2b_D2A\n+#define increment __quadmath_increment_D2A\n+#define lo0bits __quadmath_lo0bits_D2A\n+#define lshift __quadmath_lshift_D2A\n+#define match __quadmath_match_D2A\n+#define mult __quadmath_mult_D2A\n+#define multadd __quadmath_multadd_D2A\n+#define nrv_alloc __quadmath_nrv_alloc_D2A\n+#define pow5mult __quadmath_pow5mult_D2A\n+#define quorem __quadmath_quorem_D2A\n+#define ratio __quadmath_ratio_D2A\n+#define rshift __quadmath_rshift_D2A\n+#define rv_alloc __quadmath_rv_alloc_D2A\n+#define s2b __quadmath_s2b_D2A\n+#define set_ones __quadmath_set_ones_D2A\n+#ifdef NO_STRING_H\n+#define strcp __quadmath_strcp_D2A\n+#endif\n+#define strtoIg __quadmath_strtoIg_D2A\n+#define sum __quadmath_sum_D2A\n+#define tens __quadmath_tens_D2A\n+#define tinytens __quadmath_tinytens_D2A\n+#define tinytens __quadmath_tinytens_D2A\n+#define trailz __quadmath_trailz_D2A\n+#define ulp __quadmath_ulp_D2A\n \n  extern char *dtoa_result;\n  extern CONST double bigtens[], tens[], tinytens[];\n@@ -559,7 +562,9 @@ extern void memcpy_D2A ANSI((void*, const void*, size_t));\n  extern char *rv_alloc ANSI((int));\n  extern Bigint *s2b ANSI((CONST char*, int, int, ULong, int));\n  extern Bigint *set_ones ANSI((Bigint*, int));\n- extern char *strcp ANSI((char*, const char*));\n+#ifdef NO_STRING_H\n+ extern char *strcpy ANSI((char*, const char*));\n+#endif\n  extern int strtoIg ANSI((CONST char*, char**, FPI*, Long*, Bigint**, int*));\n  extern Bigint *sum ANSI((Bigint*, Bigint*));\n  extern int trailz ANSI((Bigint*));"}, {"sha": "ed81c470fbaf88414e32257d5f6d1661d7bd36c8", "filename": "libquadmath/gdtoa/misc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fgdtoa%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fgdtoa%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fgdtoa%2Fmisc.c?ref=f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "patch": "@@ -844,19 +844,19 @@ tens[] = {\n #endif\n \t\t};\n \n+#ifdef NO_STRING_H\n  char *\n #ifdef KR_headers\n-strcp_D2A(a, b) char *a; char *b;\n+strcpy_D2A(a, b) char *a; char *b;\n #else\n-strcp_D2A(char *a, CONST char *b)\n+strcpy_D2A(char *a, CONST char *b)\n #endif\n {\n \twhile((*a = *b++))\n \t\ta++;\n \treturn a;\n \t}\n \n-#ifdef NO_STRING_H\n \n  Char *\n #ifdef KR_headers"}, {"sha": "16955511e04cec4a5dac42319ca0257965e704cd", "filename": "libquadmath/math/cosq.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Fcosq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Fcosq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcosq.c?ref=f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "patch": "@@ -58,7 +58,7 @@ cosq (__float128 x)\n     /* |x| ~< pi/4 */\n \tix &= 0x7fffffffffffffffLL;\n \tif(ix <= 0x3ffe921fb54442d1LL)\n-\t  return __kernel_cosq(x,z);\n+\t  return __quadmath_kernel_cosq(x,z);\n \n     /* cos(Inf or NaN) is NaN */\n \telse if (ix>=0x7fff000000000000LL) {\n@@ -70,13 +70,13 @@ cosq (__float128 x)\n \n     /* argument reduction needed */\n \telse {\n-\t    n = rem_pio2q(x,y);\n+\t    n = __quadmath_rem_pio2q(x,y);\n \t    switch(n&3) {\n-\t\tcase 0: return  __kernel_cosq(y[0],y[1]);\n-\t\tcase 1: return -__kernel_sinq(y[0],y[1],1);\n-\t\tcase 2: return -__kernel_cosq(y[0],y[1]);\n+\t\tcase 0: return  __quadmath_kernel_cosq(y[0],y[1]);\n+\t\tcase 1: return -__quadmath_kernel_sinq(y[0],y[1],1);\n+\t\tcase 2: return -__quadmath_kernel_cosq(y[0],y[1]);\n \t\tdefault:\n-\t\t        return  __kernel_sinq(y[0],y[1],1);\n+\t\t        return  __quadmath_kernel_sinq(y[0],y[1],1);\n \t    }\n \t}\n }"}, {"sha": "86f39551c3232d509f9950248a2f8af570a035e0", "filename": "libquadmath/math/cosq_kernel.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Fcosq_kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Fcosq_kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fcosq_kernel.c?ref=f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "patch": "@@ -77,7 +77,7 @@ static const __float128 c[] = {\n extern const __float128 __sincosq_table[];\n \n __float128\n-__kernel_cosq (__float128 x, __float128 y)\n+__quadmath_kernel_cosq (__float128 x, __float128 y)\n {\n   __float128 h, l, z, sin_l, cos_l_m1;\n   int64_t ix;"}, {"sha": "a1c0b831ddbd9bef788e9d8efedc82dc32b61fc0", "filename": "libquadmath/math/rem_pio2q.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Frem_pio2q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Frem_pio2q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Frem_pio2q.c?ref=f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "patch": "@@ -151,7 +151,7 @@ static const double\n \n \n static int\n-__kernel_rem_pio2 (double *x, double *y, int e0, int nx, int prec, const int32_t *ipio2)\n+__quadmath_kernel_rem_pio2 (double *x, double *y, int e0, int nx, int prec, const int32_t *ipio2)\n {\n \tint32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;\n \tdouble z,fw,f[20],fq[20],q[20];\n@@ -500,7 +500,7 @@ static const __float128 c[] = {\n \n \n int32_t\n-rem_pio2q (__float128 x, __float128 *y)\n+__quadmath_rem_pio2q (__float128 x, __float128 *y)\n {\n   __float128 z, w, t;\n   double tx[8];\n@@ -557,8 +557,9 @@ rem_pio2q (__float128 x, __float128 *y)\n   tx [3] = (double)((lx >> 17) & 0xffffff);\n   tx [4] = (double)((lx << 7) & 0xffffff);\n \n-  n = __kernel_rem_pio2 (tx, tx + 5, exp, ((lx << 7) & 0xffffff) ? 5 : 4,\n-\t\t\t 3, two_over_pi);\n+  n = __quadmath_kernel_rem_pio2 (tx, tx + 5, exp,\n+\t\t\t\t  ((lx << 7) & 0xffffff) ? 5 : 4,\n+\t\t\t\t  3, two_over_pi);\n \n   /* The result is now stored in 3 double values, we need to convert it into\n      two __float128 values.  */"}, {"sha": "b7c221486d7f60e7e418d1f6af44e21c5e722e92", "filename": "libquadmath/math/sincosq.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Fsincosq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Fsincosq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsincosq.c?ref=f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "patch": "@@ -32,7 +32,7 @@ sincosq (__float128 x, __float128 *sinx, __float128 *cosx)\n   /* |x| ~< pi/4 */\n   ix &= 0x7fffffffffffffffLL;\n   if (ix <= 0x3ffe921fb54442d1LL)\n-    __kernel_sincosq (x, 0.0Q, sinx, cosx, 0);\n+    __quadmath_kernel_sincosq (x, 0.0Q, sinx, cosx, 0);\n   else if (ix >= 0x7fff000000000000LL)\n     {\n       /* sin(Inf or NaN) is NaN */\n@@ -44,23 +44,23 @@ sincosq (__float128 x, __float128 *sinx, __float128 *cosx)\n       __float128 y[2];\n       int n;\n \n-      n = rem_pio2q (x, y);\n+      n = __quadmath_rem_pio2q (x, y);\n       switch (n & 3)\n \t{\n \tcase 0:\n-\t  __kernel_sincosq (y[0], y[1], sinx, cosx, 1);\n+\t  __quadmath_kernel_sincosq (y[0], y[1], sinx, cosx, 1);\n \t  break;\n \tcase 1:\n-\t  __kernel_sincosq (y[0], y[1], cosx, sinx, 1);\n+\t  __quadmath_kernel_sincosq (y[0], y[1], cosx, sinx, 1);\n \t  *cosx = -*cosx;\n \t  break;\n \tcase 2:\n-\t  __kernel_sincosq (y[0], y[1], sinx, cosx, 1);\n+\t  __quadmath_kernel_sincosq (y[0], y[1], sinx, cosx, 1);\n \t  *sinx = -*sinx;\n \t  *cosx = -*cosx;\n \t  break;\n \tdefault:\n-\t  __kernel_sincosq (y[0], y[1], cosx, sinx, 1);\n+\t  __quadmath_kernel_sincosq (y[0], y[1], cosx, sinx, 1);\n \t  *sinx = -*sinx;\n \t  break;\n \t}"}, {"sha": "578d1828f754cd8920ea7c1cdb24266f0f56bfde", "filename": "libquadmath/math/sincosq_kernel.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Fsincosq_kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Fsincosq_kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsincosq_kernel.c?ref=f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "patch": "@@ -96,7 +96,8 @@ static const __float128 c[] = {\n extern const __float128 __sincosq_table[];\n \n void\n-__kernel_sincosq(__float128 x, __float128 y, __float128 *sinx, __float128 *cosx, int iy)\n+__quadmath_kernel_sincosq(__float128 x, __float128 y, __float128 *sinx,\n+\t\t\t  __float128 *cosx, int iy)\n {\n   __float128 h, l, z, sin_l, cos_l_m1;\n   int64_t ix;"}, {"sha": "76254a373020464ec2eb8a42b021c43531e18215", "filename": "libquadmath/math/sinq.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Fsinq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Fsinq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsinq.c?ref=f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "patch": "@@ -58,7 +58,7 @@ sinq (__float128 x)\n     /* |x| ~< pi/4 */\n \tix &= 0x7fffffffffffffffLL;\n \tif(ix <= 0x3ffe921fb54442d1LL)\n-\t  return __kernel_sinq(x,z,0);\n+\t  return __quadmath_kernel_sinq(x,z,0);\n \n     /* sin(Inf or NaN) is NaN */\n \telse if (ix>=0x7fff000000000000LL) {\n@@ -70,13 +70,13 @@ sinq (__float128 x)\n \n     /* argument reduction needed */\n \telse {\n-\t    n = rem_pio2q(x,y);\n+\t    n = __quadmath_rem_pio2q(x,y);\n \t    switch(n&3) {\n-\t\tcase 0: return  __kernel_sinq(y[0],y[1],1);\n-\t\tcase 1: return  __kernel_cosq(y[0],y[1]);\n-\t\tcase 2: return -__kernel_sinq(y[0],y[1],1);\n+\t\tcase 0: return  __quadmath_kernel_sinq(y[0],y[1],1);\n+\t\tcase 1: return  __quadmath_kernel_cosq(y[0],y[1]);\n+\t\tcase 2: return -__quadmath_kernel_sinq(y[0],y[1],1);\n \t\tdefault:\n-\t\t\treturn -__kernel_cosq(y[0],y[1]);\n+\t\t\treturn -__quadmath_kernel_cosq(y[0],y[1]);\n \t    }\n \t}\n }"}, {"sha": "395fcaba9cb4d1dbef532764bb9d0391aa2a6e21", "filename": "libquadmath/math/sinq_kernel.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Fsinq_kernel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Fsinq_kernel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Fsinq_kernel.c?ref=f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "patch": "@@ -77,7 +77,7 @@ static const __float128 c[] = {\n extern const __float128 __sincosq_table[];\n \n __float128\n-__kernel_sinq (__float128 x, __float128 y, int iy)\n+__quadmath_kernel_sinq (__float128 x, __float128 y, int iy)\n {\n   __float128 h, l, z, sin_l, cos_l_m1;\n   int64_t ix;"}, {"sha": "e1ec6aae86c1cfed2f75a12e36d99fdacd50734e", "filename": "libquadmath/math/tanq.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Ftanq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fmath%2Ftanq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fmath%2Ftanq.c?ref=f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "patch": "@@ -31,7 +31,7 @@\n     License along with this library; if not, write to the Free Software\n     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA */\n \n-/* __kernel_tanq( x, y, k )\n+/* __quadmath_kernel_tanq( x, y, k )\n  * kernel tan function on [-pi/4, pi/4], pi/4 ~ 0.7854\n  * Input x is assumed to be bounded by ~pi/4 in magnitude.\n  * Input y is the tail of x.\n@@ -84,7 +84,7 @@ static const __float128\n \n \n static __float128\n-__kernel_tanq (__float128 x, __float128 y, int iy)\n+__quadmath_kernel_tanq (__float128 x, __float128 y, int iy)\n {\n   __float128 z, r, v, w, s;\n   int32_t ix, sign = 1;\n@@ -218,7 +218,7 @@ tanq (__float128 x)\n \n     /* |x| ~< pi/4 */\n \tix &= 0x7fffffffffffffffLL;\n-\tif(ix <= 0x3ffe921fb54442d1LL) return __kernel_tanq(x,z,1);\n+\tif(ix <= 0x3ffe921fb54442d1LL) return __quadmath_kernel_tanq(x,z,1);\n \n     /* tanl(Inf or NaN) is NaN */\n \telse if (ix>=0x7fff000000000000LL) {\n@@ -230,8 +230,8 @@ tanq (__float128 x)\n \n     /* argument reduction needed */\n \telse {\n-\t    n = rem_pio2q(x,y);\n-\t    return __kernel_tanq(y[0],y[1],1-((n&1)<<1)); /*   1 -- n even\n-\t\t\t\t\t\t\t-1 -- n odd */\n+\t    n = __quadmath_rem_pio2q(x,y);\n+\t\t\t\t\t/*   1 -- n even, -1 -- n odd */\n+\t    return __quadmath_kernel_tanq(y[0],y[1],1-((n&1)<<1));\n \t}\n }"}, {"sha": "e297529a1e693d24d606162f5f0fcde5d3a0e396", "filename": "libquadmath/quadmath-imp.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fquadmath-imp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0c2df63c64cb18ff1e8be7d0042108efd6483b3/libquadmath%2Fquadmath-imp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fquadmath-imp.h?ref=f0c2df63c64cb18ff1e8be7d0042108efd6483b3", "patch": "@@ -27,10 +27,11 @@ Boston, MA 02110-1301, USA.  */\n \n \n // Prototypes for internal functions\n-extern int32_t rem_pio2q (__float128, __float128 *);\n-extern void __kernel_sincosq (__float128, __float128, __float128 *, __float128 *, int);\n-extern __float128 __kernel_sinq (__float128, __float128, int);\n-extern __float128 __kernel_cosq (__float128, __float128);\n+extern int32_t __quadmath_rem_pio2q (__float128, __float128 *);\n+extern void __quadmath_kernel_sincosq (__float128, __float128, __float128 *,\n+\t\t\t\t       __float128 *, int);\n+extern __float128 __quadmath_kernel_sinq (__float128, __float128, int);\n+extern __float128 __quadmath_kernel_cosq (__float128, __float128);\n \n \n "}]}