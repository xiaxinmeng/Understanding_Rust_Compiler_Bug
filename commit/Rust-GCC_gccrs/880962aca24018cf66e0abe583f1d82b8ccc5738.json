{"sha": "880962aca24018cf66e0abe583f1d82b8ccc5738", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgwOTYyYWNhMjQwMThjZjY2ZTBhYmU1ODNmMWQ4MmI4Y2NjNTczOA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-06-28T07:26:09Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-06-28T07:26:09Z"}, "message": "config.gcc (tm_file): Add elfos.h and avr/elf.h for avr-*-* and avr-*-rtems* targets.\n\n\t* config.gcc (tm_file): Add elfos.h and avr/elf.h for \n\tavr-*-* and avr-*-rtems* targets.\n\t* config/avr/elf.h: New file.\n\t(ASM_OUTPUT_BEFORE_CASE_LABEL): Define.\n\t(TARGET_ASM_SELECT_SECTION): Define.\n\t(INIT_SECTION_ASM_OP): Undefine.\n\t(FINI_SECTION_ASM_OP): Undefine.\n\t(READONLY_DATA_SECTION_ASM_OP): Undefine.\n\t(PCC_BITFIELD_TYPE_MATTERS): Undefine.\n\t(TARGET_HAVE_SWITCHABLE_BSS_SECTIONS): Undefine.\n\t* config/avr/avr.h:\n\t(PREFERRED_DEBUGGING_TYPE): Move to elf.h.\n\t(TARGET_ASM_NAMED_SECTION): Move to elf.h.\n\t(MAX_OFILE_ALIGNMENT): Move to elf.h.\n\t(STRING_LIMIT): Move to elf.h.\n\t(ASM_DECLARE_FUNCTION_NAME): Move to elf.h.\n\t(ASM_DECLARE_OBJECT_NAME): Remove.\n\t(ESCAPES): Remove.\n\t(ASM_OUTPUT_SKIP): Remove.\n\t(DWARF2_DEBUGGING_INFO): Remove.\n\t(OBJECT_FORMAT_ELF): Remove.\n\t(USER_LABEL_PREFIX): Remove.\n\t(ASM_OUTPUT_EXTERNAL): Remove.\n\t(ASM_OUTPUT_ASCII): Remove.\n\t(TYPE_ASM_OP): Remove.\n\t(SIZE_ASM_OP): Remove.\n\t(WEAK_ASM_OP): Remove.\n\t(STRING_ASM_OP): Remove.\n\t(SET_ASM_OP): Remove.\n\t(ASM_WEAKEN_LABEL): Remove.\n\t(TYPE_OPERAND_FMT): Remove.\n\t(ASM_DECLARE_FUNCTION_SIZE): Remove.\n\t(ASM_FINISH_DECLARE_OBJECT): Remove.\n\t(NO_DOLLAR_IN_LABEL): Remove.\n\t(ASM_GENERATE_INTERNAL_LABEL): Remove.\n\t(ASM_OUTPUT_CASE_LABEL): Remove.\n\t* config/avr/avr.c (avr_asm_output_aligned_decl_common): Use\n\tASM_OUTPUT_ALIGNED_LOCAL, ASM_OUTPUT_ALIGNED_COMMON.\n\t(gas_output_ascii): Remove.\n\t(gas_output_limited_string): Remove.\n\t(TARGET_ASM_FILE_START_FILE_DIRECTIVE): Remove.\n\t* config/avr/avr-protos.h\n\t(gas_output_ascii): Remove prototye.\n\t(gas_output_limited_string): Remove prototype.\n\nFrom-SVN: r175575", "tree": {"sha": "4765b9218ba4793153a541d9c63846d6b909d44a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4765b9218ba4793153a541d9c63846d6b909d44a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/880962aca24018cf66e0abe583f1d82b8ccc5738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880962aca24018cf66e0abe583f1d82b8ccc5738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880962aca24018cf66e0abe583f1d82b8ccc5738", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880962aca24018cf66e0abe583f1d82b8ccc5738/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dd61d84943131714866b22a82362d92316d5e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd61d84943131714866b22a82362d92316d5e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dd61d84943131714866b22a82362d92316d5e40"}], "stats": {"total": 358, "additions": 111, "deletions": 247}, "files": [{"sha": "dbe0762455f507089009aa89131f8eda7767c046", "filename": "gcc/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880962aca24018cf66e0abe583f1d82b8ccc5738/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880962aca24018cf66e0abe583f1d82b8ccc5738/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=880962aca24018cf66e0abe583f1d82b8ccc5738", "patch": "@@ -1,3 +1,51 @@\n+2011-06-28  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config.gcc (tm_file): Add elfos.h and avr/elf.h for \n+\tavr-*-* and avr-*-rtems* targets.\n+\t\n+\t* config/avr/elf.h: New file.\n+\t(ASM_OUTPUT_BEFORE_CASE_LABEL): Define.\n+\t(TARGET_ASM_SELECT_SECTION): Define.\n+\t(INIT_SECTION_ASM_OP): Undefine.\n+\t(FINI_SECTION_ASM_OP): Undefine.\n+\t(READONLY_DATA_SECTION_ASM_OP): Undefine.\n+\t(PCC_BITFIELD_TYPE_MATTERS): Undefine.\n+\t(TARGET_HAVE_SWITCHABLE_BSS_SECTIONS): Undefine.\n+\t* config/avr/avr.h:\n+\t(PREFERRED_DEBUGGING_TYPE): Move to elf.h.\n+\t(TARGET_ASM_NAMED_SECTION): Move to elf.h.\n+\t(MAX_OFILE_ALIGNMENT): Move to elf.h.\n+\t(STRING_LIMIT): Move to elf.h.\n+\t(ASM_DECLARE_FUNCTION_NAME): Move to elf.h.\n+\t(ASM_DECLARE_OBJECT_NAME): Remove.\n+\t(ESCAPES): Remove.\n+\t(ASM_OUTPUT_SKIP): Remove.\n+\t(DWARF2_DEBUGGING_INFO): Remove.\n+\t(OBJECT_FORMAT_ELF): Remove.\n+\t(USER_LABEL_PREFIX): Remove.\n+\t(ASM_OUTPUT_EXTERNAL): Remove.\n+\t(ASM_OUTPUT_ASCII): Remove.\n+\t(TYPE_ASM_OP): Remove.\n+\t(SIZE_ASM_OP): Remove.\n+\t(WEAK_ASM_OP): Remove.\n+\t(STRING_ASM_OP): Remove.\n+\t(SET_ASM_OP): Remove.\n+\t(ASM_WEAKEN_LABEL): Remove.\n+\t(TYPE_OPERAND_FMT): Remove.\n+\t(ASM_DECLARE_FUNCTION_SIZE): Remove.\n+\t(ASM_FINISH_DECLARE_OBJECT): Remove.\n+\t(NO_DOLLAR_IN_LABEL): Remove.\n+\t(ASM_GENERATE_INTERNAL_LABEL): Remove.\n+\t(ASM_OUTPUT_CASE_LABEL): Remove.\n+\t* config/avr/avr.c (avr_asm_output_aligned_decl_common): Use\n+\tASM_OUTPUT_ALIGNED_LOCAL, ASM_OUTPUT_ALIGNED_COMMON.\n+\t(gas_output_ascii): Remove.\n+\t(gas_output_limited_string): Remove.\n+\t(TARGET_ASM_FILE_START_FILE_DIRECTIVE): Remove.\n+\t* config/avr/avr-protos.h\n+\t(gas_output_ascii): Remove prototye.\n+\t(gas_output_limited_string): Remove prototype.\n+\n 2011-06-27  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/48637"}, {"sha": "37dd5cd705c7646f871bf654fb2989c03b35d57d", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880962aca24018cf66e0abe583f1d82b8ccc5738/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880962aca24018cf66e0abe583f1d82b8ccc5738/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=880962aca24018cf66e0abe583f1d82b8ccc5738", "patch": "@@ -936,13 +936,13 @@ arm*-wince-pe*)\n \textra_objs=\"pe.o\"\n \t;;\n avr-*-rtems*)\n-\ttm_file=\"avr/avr.h dbxelf.h avr/rtems.h rtems.h newlib-stdint.h\"\n+\ttm_file=\"elfos.h avr/elf.h avr/avr.h dbxelf.h avr/rtems.h rtems.h newlib-stdint.h\"\n \ttmake_file=\"avr/t-avr t-rtems avr/t-rtems\"\n \textra_gcc_objs=\"driver-avr.o avr-devices.o\"\n \textra_objs=\"avr-devices.o\"\n \t;;\n avr-*-*)\n-\ttm_file=\"avr/avr.h dbxelf.h newlib-stdint.h\"\n+\ttm_file=\"elfos.h avr/elf.h avr/avr.h dbxelf.h newlib-stdint.h\"\n \tuse_gcc_stdint=wrap\n \textra_gcc_objs=\"driver-avr.o avr-devices.o\"\n \textra_objs=\"avr-devices.o\""}, {"sha": "6d06af8153ad5f11025f2ca9424878c4f00338f9", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880962aca24018cf66e0abe583f1d82b8ccc5738/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880962aca24018cf66e0abe583f1d82b8ccc5738/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=880962aca24018cf66e0abe583f1d82b8ccc5738", "patch": "@@ -30,8 +30,6 @@ extern void avr_asm_declare_function_name (FILE *, const char *, tree);\n extern void order_regs_for_local_alloc (void);\n extern int avr_initial_elimination_offset (int from, int to);\n extern int avr_simple_epilogue (void);\n-extern void gas_output_limited_string (FILE *file, const char *str);\n-extern void gas_output_ascii (FILE *file, const char *str, size_t length);\n extern int avr_hard_regno_rename_ok (unsigned int, unsigned int);\n extern rtx avr_return_addr_rtx (int count, rtx tem);\n "}, {"sha": "efd9f7209cb24168e812fad5b8bb03847733d3a2", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 3, "deletions": 106, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880962aca24018cf66e0abe583f1d82b8ccc5738/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880962aca24018cf66e0abe583f1d82b8ccc5738/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=880962aca24018cf66e0abe583f1d82b8ccc5738", "patch": "@@ -169,8 +169,6 @@ static const struct attribute_spec avr_attribute_table[] =\n #define TARGET_ASM_INTEGER avr_assemble_integer\n #undef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START avr_file_start\n-#undef TARGET_ASM_FILE_START_FILE_DIRECTIVE\n-#define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END avr_file_end\n \n@@ -4897,99 +4895,6 @@ avr_asm_declare_function_name (FILE *file, const char *name, tree decl)\n   ASM_OUTPUT_LABEL (file, name);\n }\n \n-/* The routine used to output NUL terminated strings.  We use a special\n-   version of this for most svr4 targets because doing so makes the\n-   generated assembly code more compact (and thus faster to assemble)\n-   as well as more readable, especially for targets like the i386\n-   (where the only alternative is to output character sequences as\n-   comma separated lists of numbers).  */\n-\n-void\n-gas_output_limited_string(FILE *file, const char *str)\n-{\n-  const unsigned char *_limited_str = (const unsigned char *) str;\n-  unsigned ch;\n-  fprintf (file, \"%s\\\"\", STRING_ASM_OP);\n-  for (; (ch = *_limited_str); _limited_str++)\n-    {\n-      int escape;\n-      switch (escape = ESCAPES[ch])\n-\t{\n-\tcase 0:\n-\t  putc (ch, file);\n-\t  break;\n-\tcase 1:\n-\t  fprintf (file, \"\\\\%03o\", ch);\n-\t  break;\n-\tdefault:\n-\t  putc ('\\\\', file);\n-\t  putc (escape, file);\n-\t  break;\n-\t}\n-    }\n-  fprintf (file, \"\\\"\\n\");\n-}\n-\n-/* The routine used to output sequences of byte values.  We use a special\n-   version of this for most svr4 targets because doing so makes the\n-   generated assembly code more compact (and thus faster to assemble)\n-   as well as more readable.  Note that if we find subparts of the\n-   character sequence which end with NUL (and which are shorter than\n-   STRING_LIMIT) we output those using ASM_OUTPUT_LIMITED_STRING.  */\n-\n-void\n-gas_output_ascii(FILE *file, const char *str, size_t length)\n-{\n-  const unsigned char *_ascii_bytes = (const unsigned char *) str;\n-  const unsigned char *limit = _ascii_bytes + length;\n-  unsigned bytes_in_chunk = 0;\n-  for (; _ascii_bytes < limit; _ascii_bytes++)\n-    {\n-      const unsigned char *p;\n-      if (bytes_in_chunk >= 60)\n-\t{\n-\t  fprintf (file, \"\\\"\\n\");\n-\t  bytes_in_chunk = 0;\n-\t}\n-      for (p = _ascii_bytes; p < limit && *p != '\\0'; p++)\n-\tcontinue;\n-      if (p < limit && (p - _ascii_bytes) <= (signed)STRING_LIMIT)\n-\t{\n-\t  if (bytes_in_chunk > 0)\n-\t    {\n-\t      fprintf (file, \"\\\"\\n\");\n-\t      bytes_in_chunk = 0;\n-\t    }\n-\t  gas_output_limited_string (file, (const char*)_ascii_bytes);\n-\t  _ascii_bytes = p;\n-\t}\n-      else\n-\t{\n-\t  int escape;\n-\t  unsigned ch;\n-\t  if (bytes_in_chunk == 0)\n-\t    fprintf (file, \"\\t.ascii\\t\\\"\");\n-\t  switch (escape = ESCAPES[ch = *_ascii_bytes])\n-\t    {\n-\t    case 0:\n-\t      putc (ch, file);\n-\t      bytes_in_chunk++;\n-\t      break;\n-\t    case 1:\n-\t      fprintf (file, \"\\\\%03o\", ch);\n-\t      bytes_in_chunk += 4;\n-\t      break;\n-\t    default:\n-\t      putc ('\\\\', file);\n-\t      putc (escape, file);\n-\t      bytes_in_chunk += 2;\n-\t      break;\n-\t    }\n-\t}\n-    }\n-  if (bytes_in_chunk > 0)\n-    fprintf (file, \"\\\"\\n\");\n-}\n \n /* Return value is nonzero if pseudos that have been\n    assigned to registers of class CLASS would likely be spilled\n@@ -5169,17 +5074,9 @@ avr_asm_output_aligned_decl_common (FILE * stream, const_tree decl ATTRIBUTE_UNU\n   avr_need_clear_bss_p = true;\n \n   if (local_p)\n-    {\n-      fputs (\"\\t.local\\t\", stream);\n-      assemble_name (stream, name);\n-      fputs (\"\\n\", stream);\n-    }\n-  \n-  fputs (\"\\t.comm\\t\", stream);\n-  assemble_name (stream, name);\n-  fprintf (stream,\n-           \",\" HOST_WIDE_INT_PRINT_UNSIGNED \",%u\\n\",\n-           size, align / BITS_PER_UNIT);\n+    ASM_OUTPUT_ALIGNED_LOCAL (stream, name, size, align);\n+  else\n+    ASM_OUTPUT_ALIGNED_COMMON (stream, name, size, align);\n }\n \n "}, {"sha": "9b27f703807c10ff5123544b63a589fcd6c6958f", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880962aca24018cf66e0abe583f1d82b8ccc5738/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880962aca24018cf66e0abe583f1d82b8ccc5738/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=880962aca24018cf66e0abe583f1d82b8ccc5738", "patch": "@@ -150,8 +150,6 @@ extern GTY(()) section *progmem_section;\n /* No data type wants to be aligned rounder than this.  */\n #define BIGGEST_ALIGNMENT 8\n \n-#define MAX_OFILE_ALIGNMENT (32768 * 8)\n-\n #define TARGET_VTABLE_ENTRY_ALIGN 8\n \n #define STRICT_ALIGNMENT 0\n@@ -457,11 +455,6 @@ do {\t\t\t\t\t\t\t\t\t    \\\n \n #define ASM_APP_OFF \"/* #NOAPP */\\n\"\n \n-/* Switch into a generic section.  */\n-#define TARGET_ASM_NAMED_SECTION avr_asm_named_section\n-\n-#define ASM_OUTPUT_ASCII(FILE, P, SIZE)\t gas_output_ascii (FILE,P,SIZE)\n-\n #define IS_ASM_LOGICAL_LINE_SEPARATOR(C, STR) ((C) == '\\n' || ((C) == '$'))\n \n #define ASM_OUTPUT_ALIGNED_DECL_COMMON(STREAM, DECL, NAME, SIZE, ALIGN) \\\n@@ -473,121 +466,11 @@ do {\t\t\t\t\t\t\t\t\t    \\\n #define ASM_OUTPUT_ALIGNED_DECL_LOCAL(STREAM, DECL, NAME, SIZE, ALIGN)  \\\n   avr_asm_output_aligned_decl_common (STREAM, DECL, NAME, SIZE, ALIGN, true)\n \n-#undef TYPE_ASM_OP\n-#undef SIZE_ASM_OP\n-#undef WEAK_ASM_OP\n-#define TYPE_ASM_OP\t\"\\t.type\\t\"\n-#define SIZE_ASM_OP\t\"\\t.size\\t\"\n-#define WEAK_ASM_OP\t\"\\t.weak\\t\"\n-/* Define the strings used for the special svr4 .type and .size directives.\n-   These strings generally do not vary from one system running svr4 to\n-   another, but if a given system (e.g. m88k running svr) needs to use\n-   different pseudo-op names for these, they may be overridden in the\n-   file which includes this one.  */\n-\n-\n-#undef TYPE_OPERAND_FMT\n-#define TYPE_OPERAND_FMT\t\"@%s\"\n-/* The following macro defines the format used to output the second\n-   operand of the .type assembler directive.  Different svr4 assemblers\n-   expect various different forms for this operand.  The one given here\n-   is just a default.  You may need to override it in your machine-\n-   specific tm.h file (depending upon the particulars of your assembler).  */\n-\n-#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n-avr_asm_declare_function_name ((FILE), (NAME), (DECL))\n-\n-#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n-      ASM_OUTPUT_MEASURED_SIZE (FILE, FNAME);\t\t\t\t\\\n-  } while (0)\n-\n-#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\\n-  size_directive_output = 0;\t\t\t\t\t\t\\\n-  if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      size_directive_output = 1;\t\t\t\t\t\\\n-      ASM_OUTPUT_SIZE_DIRECTIVE (FILE, NAME,\t\t\t\t\\\n-\t\t\t\t int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\t\\\n-} while (0)\n-\n-#undef ASM_FINISH_DECLARE_OBJECT\n-#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n-do {\t\t\t\t\t\t\t\t\t \\\n-     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n-     HOST_WIDE_INT size;\t\t\t\t\t\t \\\n-     if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n-         && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n-\t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n-\t && !size_directive_output)\t\t\t\t\t \\\n-       {\t\t\t\t\t\t\t\t \\\n-\t size_directive_output = 1;\t\t\t\t\t \\\n-\t size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\t \\\n-\t ASM_OUTPUT_SIZE_DIRECTIVE (FILE, name, size);\t\t\t \\\n-       }\t\t\t\t\t\t\t\t \\\n-   } while (0)\n-\n-\n-#define ESCAPES \\\n-\"\\1\\1\\1\\1\\1\\1\\1\\1btn\\1fr\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n-\\0\\0\\\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\\n-\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\\\\\0\\0\\0\\\n-\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1\\\n-\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n-\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n-\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n-\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\"\n-/* A table of bytes codes used by the ASM_OUTPUT_ASCII and\n-   ASM_OUTPUT_LIMITED_STRING macros.  Each byte in the table\n-   corresponds to a particular byte value [0..255].  For any\n-   given byte value, if the value in the corresponding table\n-   position is zero, the given character can be output directly.\n-   If the table value is 1, the byte must be output as a \\ooo\n-   octal escape.  If the tables value is anything else, then the\n-   byte value should be output as a \\ followed by the value\n-   in the table.  Note that we can use standard UN*X escape\n-   sequences for many control characters, but we don't use\n-   \\a to represent BEL because some svr4 assemblers (e.g. on\n-   the i386) don't know about that.  Also, we don't use \\v\n-   since some versions of gas, such as 2.2 did not accept it.  */\n-\n-#define STRING_LIMIT\t((unsigned) 64)\n-#define STRING_ASM_OP\t\"\\t.string\\t\"\n-/* Some svr4 assemblers have a limit on the number of characters which\n-   can appear in the operand of a .string directive.  If your assembler\n-   has such a limitation, you should define STRING_LIMIT to reflect that\n-   limit.  Note that at least some svr4 assemblers have a limit on the\n-   actual number of bytes in the double-quoted string, and that they\n-   count each character in an escape sequence as one byte.  Thus, an\n-   escape sequence like \\377 would count as four bytes.\n-\n-   If your target assembler doesn't support the .string directive, you\n-   should define this to zero.  */\n-\n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \".global\\t\"\n \n-#define SET_ASM_OP\t\"\\t.set\\t\"\n-\n-#define ASM_WEAKEN_LABEL(FILE, NAME)\t\\\n-  do\t\t\t\t\t\\\n-    {\t\t\t\t\t\\\n-      fputs (\"\\t.weak\\t\", (FILE));\t\\\n-      assemble_name ((FILE), (NAME));\t\\\n-      fputc ('\\n', (FILE));\t\t\\\n-    }\t\t\t\t\t\\\n-  while (0)\n-\n #define SUPPORTS_WEAK 1\n \n-#define ASM_GENERATE_INTERNAL_LABEL(STRING, PREFIX, NUM)\t\\\n-sprintf (STRING, \"*.%s%lu\", PREFIX, (unsigned long)(NUM))\n-\n #define HAS_INIT_SECTION 1\n \n #define REGISTER_NAMES {\t\t\t\t\\\n@@ -605,8 +488,6 @@ sprintf (STRING, \"*.%s%lu\", PREFIX, (unsigned long)(NUM))\n \n #define PRINT_OPERAND_ADDRESS(STREAM, X) print_operand_address(STREAM, X)\n \n-#define USER_LABEL_PREFIX \"\"\n-\n #define ASSEMBLER_DIALECT AVR_HAVE_MOVW\n \n #define ASM_OUTPUT_REG_PUSH(STREAM, REGNO)\t\\\n@@ -624,22 +505,12 @@ sprintf (STRING, \"*.%s%lu\", PREFIX, (unsigned long)(NUM))\n #define ASM_OUTPUT_ADDR_VEC_ELT(STREAM, VALUE)\t\t\\\n   avr_output_addr_vec_elt(STREAM, VALUE)\n \n-#define ASM_OUTPUT_CASE_LABEL(STREAM, PREFIX, NUM, TABLE) \\\n-  (switch_to_section (progmem_section), \\\n-   (*targetm.asm_out.internal_label) (STREAM, PREFIX, NUM))\n-\n-#define ASM_OUTPUT_SKIP(STREAM, N)\t\t\\\n-fprintf (STREAM, \"\\t.skip %lu,0\\n\", (unsigned long)(N))\n-\n #define ASM_OUTPUT_ALIGN(STREAM, POWER)\t\t\t\\\n   do {\t\t\t\t\t\t\t\\\n       if ((POWER) > 1)\t\t\t\t\t\\\n           fprintf (STREAM, \"\\t.p2align\\t%d\\n\", POWER);\t\\\n   } while (0)\n \n-#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME) \\\n-  default_elf_asm_output_external (FILE, DECL, NAME)\n-\n #define CASE_VECTOR_MODE HImode\n \n #undef WORD_REGISTER_OPERATIONS\n@@ -654,8 +525,6 @@ fprintf (STREAM, \"\\t.skip %lu,0\\n\", (unsigned long)(N))\n \n #define DOLLARS_IN_IDENTIFIERS 0\n \n-#define NO_DOLLAR_IN_LABEL 1\n-\n #define TRAMPOLINE_SIZE 4\n \n /* Store in cc_status the expressions\n@@ -757,14 +626,8 @@ mmcu=*:-mmcu=%*}\"\n #define OUT_AS2(a,b,c) output_asm_insn (AS2(a,b,c), operands)\n #define CR_TAB \"\\n\\t\"\n \n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n-#define DWARF2_DEBUGGING_INFO 1\n-\n #define DWARF2_ADDR_SIZE 4\n \n-#define OBJECT_FORMAT_ELF\n-\n #define INCOMING_RETURN_ADDR_RTX   avr_incoming_return_addr_rtx ()\n #define INCOMING_FRAME_SP_OFFSET   (AVR_3_BYTE_PC ? 3 : 2)\n "}, {"sha": "9bbd32fd7b132ba64bfec235c9985cd01f2149db", "filename": "gcc/config/avr/elf.h", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880962aca24018cf66e0abe583f1d82b8ccc5738/gcc%2Fconfig%2Favr%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880962aca24018cf66e0abe583f1d82b8ccc5738/gcc%2Fconfig%2Favr%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Felf.h?ref=880962aca24018cf66e0abe583f1d82b8ccc5738", "patch": "@@ -0,0 +1,58 @@\n+/* Copyright (C) 2011\n+   Free Software Foundation, Inc.\n+   Contributed by Georg-Johann Lay (avr@gjlay.de)\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+   \n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+   \n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+\n+/* Overriding some definitions from elfos.h for AVR.  */\n+\n+#undef PCC_BITFIELD_TYPE_MATTERS\n+\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+#undef TARGET_ASM_NAMED_SECTION\n+#define TARGET_ASM_NAMED_SECTION avr_asm_named_section\n+\n+/* Use lame default: no string merging, ...  */\n+#undef TARGET_ASM_SELECT_SECTION\n+#define TARGET_ASM_SELECT_SECTION default_select_section\n+\n+#undef MAX_OFILE_ALIGNMENT\n+#define MAX_OFILE_ALIGNMENT (32768 * 8)\n+\n+#undef TARGET_HAVE_SWITCHABLE_BSS_SECTIONS\n+\n+#undef STRING_LIMIT\n+#define STRING_LIMIT ((unsigned) 64)\n+\n+/* Setup `readonly_data_section' in `avr_asm_init_sections'.  */\n+#undef READONLY_DATA_SECTION_ASM_OP\n+\n+/* Take care of `signal' and `interrupt' attributes.  */\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)     \\\n+  avr_asm_declare_function_name ((FILE), (NAME), (DECL))\n+\n+#undef ASM_OUTPUT_BEFORE_CASE_LABEL\n+#define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE, PREFIX, NUM, TABLE) \\\n+  switch_to_section (progmem_section);\n+\n+/* Be conservative in crtstuff.c.  */\n+#undef INIT_SECTION_ASM_OP\n+#undef FINI_SECTION_ASM_OP"}]}