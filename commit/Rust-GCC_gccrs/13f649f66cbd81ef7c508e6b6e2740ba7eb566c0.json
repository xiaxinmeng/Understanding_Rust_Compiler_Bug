{"sha": "13f649f66cbd81ef7c508e6b6e2740ba7eb566c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNmNjQ5ZjY2Y2JkODFlZjdjNTA4ZTZiNmUyNzQwYmE3ZWI1NjZjMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-12-17T20:41:07Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-12-17T20:41:07Z"}, "message": "* constexpr.c: Tweak comments and formatting.\n\nFrom-SVN: r218830", "tree": {"sha": "90f79ff4ea180de659e55d8bc70c1171bae7a95e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90f79ff4ea180de659e55d8bc70c1171bae7a95e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13f649f66cbd81ef7c508e6b6e2740ba7eb566c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13f649f66cbd81ef7c508e6b6e2740ba7eb566c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13f649f66cbd81ef7c508e6b6e2740ba7eb566c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13f649f66cbd81ef7c508e6b6e2740ba7eb566c0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43a39cdd9649098ad4bb3ede4333f64539f4e542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a39cdd9649098ad4bb3ede4333f64539f4e542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43a39cdd9649098ad4bb3ede4333f64539f4e542"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "7c52b99a278d522070f7f59b6cf31d9fce690923", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f649f66cbd81ef7c508e6b6e2740ba7eb566c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f649f66cbd81ef7c508e6b6e2740ba7eb566c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=13f649f66cbd81ef7c508e6b6e2740ba7eb566c0", "patch": "@@ -1,3 +1,7 @@\n+2014-12-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c: Tweak comments and formatting.\n+\n 2014-12-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58650"}, {"sha": "1323111d3a9955bf269647b59f799618b33a33e8", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13f649f66cbd81ef7c508e6b6e2740ba7eb566c0/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13f649f66cbd81ef7c508e6b6e2740ba7eb566c0/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=13f649f66cbd81ef7c508e6b6e2740ba7eb566c0", "patch": "@@ -1,6 +1,5 @@\n-/* Perform the semantic phase of constexpr parsing, i.e., the process of\n-   building tree structure, checking semantic consistency, and\n-   building RTL.  These routines are used both during actual parsing\n+/* Perform -*- C++ -*- constant expression evaluation, including calls to\n+   constexpr functions.  These routines are used both during actual parsing\n    and during the instantiation of template functions.\n \n    Copyright (C) 1998-2014 Free Software Foundation, Inc.\n@@ -866,11 +865,20 @@ struct constexpr_call_hasher : ggc_hasher<constexpr_call *>\n    is a map of values of variables initialized within the expression.  */\n \n struct constexpr_ctx {\n+  /* The innermost call we're evaluating.  */\n   constexpr_call *call;\n+  /* Values for any temporaries or local variables within the\n+     constant-expression. */\n   hash_map<tree,tree> *values;\n+  /* The CONSTRUCTOR we're currently building up for an aggregate\n+     initializer.  */\n   tree ctor;\n+  /* The object we're building the CONSTRUCTOR for.  */\n   tree object;\n+  /* Whether we should error on a non-constant expression or fail quietly.  */\n   bool quiet;\n+  /* Whether we are strictly conforming to constant expression rules or\n+     trying harder to get a constant value.  */\n   bool strict;\n };\n \n@@ -3428,9 +3436,8 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n {\n   bool non_constant_p = false;\n   bool overflow_p = false;\n-  constexpr_ctx ctx = { NULL, NULL, NULL, NULL, allow_non_constant, strict };\n   hash_map<tree,tree> map;\n-  ctx.values = &map;\n+  constexpr_ctx ctx = { NULL, &map, NULL, NULL, allow_non_constant, strict };\n   tree type = initialized_type (t);\n   tree r = t;\n   if (AGGREGATE_TYPE_P (type) || VECTOR_TYPE_P (type))\n@@ -3537,9 +3544,8 @@ is_sub_constant_expr (tree t)\n {\n   bool non_constant_p = false;\n   bool overflow_p = false;\n-  constexpr_ctx ctx = { NULL, NULL, NULL, NULL, true, true };\n   hash_map <tree, tree> map;\n-  ctx.values = &map;\n+  constexpr_ctx ctx = { NULL, &map, NULL, NULL, true, true };\n   cxx_eval_constant_expression (&ctx, t, false, &non_constant_p,\n \t\t\t\t&overflow_p);\n   return !non_constant_p && !overflow_p;"}]}