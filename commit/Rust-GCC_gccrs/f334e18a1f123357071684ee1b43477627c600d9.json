{"sha": "f334e18a1f123357071684ee1b43477627c600d9", "node_id": "C_kwDOANBUbNoAKGYzMzRlMThhMWYxMjMzNTcwNzE2ODRlZTFiNDM0Nzc2MjdjNjAwZDk", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-09-29T08:34:18Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-09-30T21:54:07Z"}, "message": "rust: Implement TARGET_RUST_CPU_INFO for i[34567]86-*-* and x86_64-*-*\n\nThere are still quite a lot of the previously reverted i386-rust.cc\nmissing, so it's only a partial reimplementation.\n\ngcc/ChangeLog:\n\n\t* config/i386/t-i386 (i386-rust.o): New rule.\n\t* config/i386/i386-rust.cc: New file.\n\t* config/i386/i386-rust.h: New file.", "tree": {"sha": "d43f5620db603fafad9de9893e4d288b7866c2bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d43f5620db603fafad9de9893e4d288b7866c2bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f334e18a1f123357071684ee1b43477627c600d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f334e18a1f123357071684ee1b43477627c600d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f334e18a1f123357071684ee1b43477627c600d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f334e18a1f123357071684ee1b43477627c600d9/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b220923f96344397c584245c09234a700b0ca243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b220923f96344397c584245c09234a700b0ca243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b220923f96344397c584245c09234a700b0ca243"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "a00c4f8cee1efe4e8302802ab83fe5ddfd8fc19c", "filename": "gcc/config/i386/i386-rust.cc", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f334e18a1f123357071684ee1b43477627c600d9/gcc%2Fconfig%2Fi386%2Fi386-rust.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f334e18a1f123357071684ee1b43477627c600d9/gcc%2Fconfig%2Fi386%2Fi386-rust.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-rust.cc?ref=f334e18a1f123357071684ee1b43477627c600d9", "patch": "@@ -0,0 +1,129 @@\n+/* Subroutines for the Rust front end on the x86 architecture.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define IN_TARGET_CODE 1\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"tm_rust.h\"\n+#include \"rust/rust-target.h\"\n+\n+/* Implement TARGET_RUST_CPU_INFO for x86 targets.  */\n+\n+void\n+ix86_rust_target_cpu_info (void)\n+{\n+  if (TARGET_64BIT)\n+    rust_add_target_info (\"target_arch\", \"x86_64\");\n+  else\n+    rust_add_target_info (\"target_arch\", \"x86\");\n+\n+  // features officially \"stabilised\" in rustc\n+  if (TARGET_MMX)\n+    rust_add_target_info (\"target_feature\", \"mmx\");\n+  if (TARGET_SSE)\n+    rust_add_target_info (\"target_feature\", \"sse\");\n+  if (TARGET_SSE2)\n+    rust_add_target_info (\"target_feature\", \"sse2\");\n+  if (TARGET_SSE3)\n+    rust_add_target_info (\"target_feature\", \"sse3\");\n+  if (TARGET_SSSE3)\n+    rust_add_target_info (\"target_feature\", \"ssse3\");\n+  if (TARGET_SSE4_1)\n+    rust_add_target_info (\"target_feature\", \"sse4.1\");\n+  if (TARGET_SSE4_2)\n+    rust_add_target_info (\"target_feature\", \"sse4.2\");\n+  if (TARGET_AES)\n+    rust_add_target_info (\"target_feature\", \"aes\");\n+  if (TARGET_SHA)\n+    rust_add_target_info (\"target_feature\", \"sha\");\n+  if (TARGET_AVX)\n+    rust_add_target_info (\"target_feature\", \"avx\");\n+  if (TARGET_AVX2)\n+    rust_add_target_info (\"target_feature\", \"avx2\");\n+  if (TARGET_AVX512F)\n+    rust_add_target_info (\"target_feature\", \"avx512f\");\n+  if (TARGET_AVX512ER)\n+    rust_add_target_info (\"target_feature\", \"avx512er\");\n+  if (TARGET_AVX512CD)\n+    rust_add_target_info (\"target_feature\", \"avx512cd\");\n+  if (TARGET_AVX512PF)\n+    rust_add_target_info (\"target_feature\", \"avx512pf\");\n+  if (TARGET_AVX512DQ)\n+    rust_add_target_info (\"target_feature\", \"avx512dq\");\n+  if (TARGET_AVX512BW)\n+    rust_add_target_info (\"target_feature\", \"avx512bw\");\n+  if (TARGET_AVX512VL)\n+    rust_add_target_info (\"target_feature\", \"avx512vl\");\n+  if (TARGET_AVX512VBMI)\n+    rust_add_target_info (\"target_feature\", \"avx512vbmi\");\n+  if (TARGET_AVX512IFMA)\n+    rust_add_target_info (\"target_feature\", \"avx512ifma\");\n+  if (TARGET_AVX512VPOPCNTDQ)\n+    rust_add_target_info (\"target_feature\", \"avx512vpopcntdq\");\n+  if (TARGET_FMA)\n+    rust_add_target_info (\"target_feature\", \"fma\");\n+  if (TARGET_RTM)\n+    rust_add_target_info (\"target_feature\", \"rtm\");\n+  if (TARGET_SSE4A)\n+    rust_add_target_info (\"target_feature\", \"sse4a\");\n+  if (TARGET_BMI)\n+    {\n+      rust_add_target_info (\"target_feature\", \"bmi1\");\n+      rust_add_target_info (\"target_feature\", \"bmi\");\n+    }\n+  if (TARGET_BMI2)\n+    rust_add_target_info (\"target_feature\", \"bmi2\");\n+  if (TARGET_LZCNT)\n+    rust_add_target_info (\"target_feature\", \"lzcnt\");\n+  if (TARGET_TBM)\n+    rust_add_target_info (\"target_feature\", \"tbm\");\n+  if (TARGET_POPCNT)\n+    rust_add_target_info (\"target_feature\", \"popcnt\");\n+  if (TARGET_RDRND)\n+    {\n+      rust_add_target_info (\"target_feature\", \"rdrand\");\n+      rust_add_target_info (\"target_feature\", \"rdrnd\");\n+    }\n+  if (TARGET_F16C)\n+    rust_add_target_info (\"target_feature\", \"f16c\");\n+  if (TARGET_RDSEED)\n+    rust_add_target_info (\"target_feature\", \"rdseed\");\n+  if (TARGET_ADX)\n+    rust_add_target_info (\"target_feature\", \"adx\");\n+  if (TARGET_FXSR)\n+    rust_add_target_info (\"target_feature\", \"fxsr\");\n+  if (TARGET_XSAVE)\n+    rust_add_target_info (\"target_feature\", \"xsave\");\n+  if (TARGET_XSAVEOPT)\n+    rust_add_target_info (\"target_feature\", \"xsaveopt\");\n+  if (TARGET_XSAVEC)\n+    rust_add_target_info (\"target_feature\", \"xsavec\");\n+  if (TARGET_XSAVES)\n+    rust_add_target_info (\"target_feature\", \"xsaves\");\n+  if (TARGET_VPCLMULQDQ)\n+    {\n+      rust_add_target_info (\"target_feature\", \"pclmulqdq\");\n+      rust_add_target_info (\"target_feature\", \"vpclmulqdq\");\n+    }\n+  if (TARGET_CMPXCHG16B)\n+    rust_add_target_info (\"target_feature\", \"cmpxchg16b\");\n+  if (TARGET_MOVBE)\n+    rust_add_target_info (\"target_feature\", \"movbe\");\n+}"}, {"sha": "a837e2f1c740d34822f2f5350cbda91dc54a62e8", "filename": "gcc/config/i386/i386-rust.h", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f334e18a1f123357071684ee1b43477627c600d9/gcc%2Fconfig%2Fi386%2Fi386-rust.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f334e18a1f123357071684ee1b43477627c600d9/gcc%2Fconfig%2Fi386%2Fi386-rust.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-rust.h?ref=f334e18a1f123357071684ee1b43477627c600d9", "patch": "@@ -0,0 +1,22 @@\n+/* Definitions for the Rust front end on the x86 architecture.\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* In i386-rust.cc  */\n+extern void ix86_rust_target_cpu_info (void);\n+\n+/* Target CPU info for Rust.  */\n+#define TARGET_RUST_CPU_INFO ix86_rust_target_cpu_info"}, {"sha": "61ddfcab6baa4518f313ac51d23cc4309479ed44", "filename": "gcc/config/i386/t-i386", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f334e18a1f123357071684ee1b43477627c600d9/gcc%2Fconfig%2Fi386%2Ft-i386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f334e18a1f123357071684ee1b43477627c600d9/gcc%2Fconfig%2Fi386%2Ft-i386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-i386?ref=f334e18a1f123357071684ee1b43477627c600d9", "patch": "@@ -46,6 +46,10 @@ i386-d.o: $(srcdir)/config/i386/i386-d.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n+i386-rust.o: $(srcdir)/config/i386/i386-rust.cc\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n i386-options.o: $(srcdir)/config/i386/i386-options.cc\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}]}