{"sha": "76023293e6e82439643048a32cad36ddf9ba0e44", "node_id": "C_kwDOANBUbNoAKDc2MDIzMjkzZTZlODI0Mzk2NDMwNDhhMzJjYWQzNmRkZjliYTBlNDQ", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-12-14T08:15:48Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-12-19T14:23:22Z"}, "message": "RISC-V: Add testcases for VSETVL PASS 3\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-10.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-11.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-12.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-13.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-14.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-15.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-16.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-17.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-18.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-19.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-20.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-21.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-22.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-23.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-24.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-25.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-26.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-27.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-28.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-9.c: New test.", "tree": {"sha": "ae0c28f55a51ce45ce7bdad7510fd9d9fcb688ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae0c28f55a51ce45ce7bdad7510fd9d9fcb688ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76023293e6e82439643048a32cad36ddf9ba0e44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76023293e6e82439643048a32cad36ddf9ba0e44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76023293e6e82439643048a32cad36ddf9ba0e44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76023293e6e82439643048a32cad36ddf9ba0e44/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f18836ca035d3d029cdc503e2a0d7d685a4d072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f18836ca035d3d029cdc503e2a0d7d685a4d072", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f18836ca035d3d029cdc503e2a0d7d685a4d072"}], "stats": {"total": 1330, "additions": 1330, "deletions": 0}, "files": [{"sha": "db5f64ffad2224aabec683c3eb900f407165f570", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-1.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 100);\n+      *(vint8mf8_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 200);\n+      *(vint8mf8_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + 300);\n+      *(vint8mf8_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + i);\n+      *(vint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "d5c108c0872debb6b7543b0f12c51d21df410aeb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-10.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-10.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + 100);\n+      *(vuint16mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + 200);\n+      *(vuint16mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + 300);\n+      *(vuint16mf2_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + i);\n+      *(vuint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "2c8e0ba490bb70d262b884f69d56674a5fba3feb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-11.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-11.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + 100);\n+      *(vint32mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+      *(vint32mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + 300);\n+      *(vint32mf2_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + i);\n+      *(vint32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "50807adc3cd3c6dac50beec99d48c95a7b5816fd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-12.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-12.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + 100);\n+      *(vuint32mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + 200);\n+      *(vuint32mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + 300);\n+      *(vuint32mf2_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + i);\n+      *(vuint32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b9e0d207b84e4447d524ff6b5f1278c03ed8f3d9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-13.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-13.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 100);\n+      *(vfloat32mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 200);\n+      *(vfloat32mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 300);\n+      *(vfloat32mf2_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + i);\n+      *(vfloat32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "efe51b2e0f996c55a102bd83e8091de0508a2760", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-14.c", "status": "added", "additions": 189, "deletions": 0, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-14.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,189 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + 100);\n+      *(vbool64_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + 200);\n+      *(vbool64_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + 300);\n+      *(vbool64_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + i);\n+      *(vbool64_t*)(out + i) = v;\n+    }\n+}\n+\n+void f2 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + 100);\n+      *(vbool32_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + 200);\n+      *(vbool32_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + 300);\n+      *(vbool32_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + i);\n+      *(vbool32_t*)(out + i) = v;\n+    }\n+}\n+\n+void f3 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + 100);\n+      *(vbool16_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + 200);\n+      *(vbool16_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + 300);\n+      *(vbool16_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + i);\n+      *(vbool16_t*)(out + i) = v;\n+    }\n+}\n+\n+void f4 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + 100);\n+      *(vbool8_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + 200);\n+      *(vbool8_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + 300);\n+      *(vbool8_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + i);\n+      *(vbool8_t*)(out + i) = v;\n+    }\n+}\n+\n+void f5 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + 100);\n+      *(vbool4_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + 200);\n+      *(vbool4_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + 300);\n+      *(vbool4_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + i);\n+      *(vbool4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f6 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + 100);\n+      *(vbool2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + 200);\n+      *(vbool2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + 300);\n+      *(vbool2_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + i);\n+      *(vbool2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f7 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + 100);\n+      *(vbool1_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + 200);\n+      *(vbool1_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + 300);\n+      *(vbool1_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + i);\n+      *(vbool1_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "3d4568e3bf07ae3914cc168a461959779e2fc638", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-15.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-15.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 100);\n+    *(vint8mf8_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 200);\n+    *(vint8mf8_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vint8mf8_t v = *(vint8mf8_t*)(in + 300);\n+    *(vint8mf8_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = *(vint8mf8_t*)(in + i);\n+      *(vint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "1b70c90c430e9ada02c96c8117ba46874aad0246", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-16.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-16.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 100);\n+    *(vuint8mf8_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 200);\n+    *(vuint8mf8_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vuint8mf8_t v = *(vuint8mf8_t*)(in + 300);\n+    *(vuint8mf8_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + i);\n+      *(vuint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b32b5618be6c0d521752cf3f6104bdbbf31fd699", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-17.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-17.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 100);\n+    *(vint8mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 200);\n+    *(vint8mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vint8mf4_t v = *(vint8mf4_t*)(in + 300);\n+    *(vint8mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + i);\n+      *(vint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "bbbf40f1851eda5c1760799fcdb895e114fc318e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-18.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-18.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 100);\n+    *(vuint8mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 200);\n+    *(vuint8mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vuint8mf4_t v = *(vuint8mf4_t*)(in + 300);\n+    *(vuint8mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + i);\n+      *(vuint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "36197ff00c85b7314b329b712b5b15ffe44b086c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-19.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-19.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 100);\n+    *(vint8mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 200);\n+    *(vint8mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vint8mf2_t v = *(vint8mf2_t*)(in + 300);\n+    *(vint8mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + i);\n+      *(vint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "ab6c1b13aa265eeb32ee50d342342fd57d5f3232", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-2.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + 100);\n+      *(vuint8mf8_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + 200);\n+      *(vuint8mf8_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + 300);\n+      *(vuint8mf8_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf8_t v = *(vuint8mf8_t*)(in + i);\n+      *(vuint8mf8_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "4d5d55c1773a65f6bb76410f8356f7f804c60540", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-20.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-20.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 100);\n+    *(vuint8mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 200);\n+    *(vuint8mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vuint8mf2_t v = *(vuint8mf2_t*)(in + 300);\n+    *(vuint8mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + i);\n+      *(vuint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "87e34bcc2dab8d9574770f7b4c50b2f6f51b7bb1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-21.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-21.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 100);\n+    *(vint16mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 200);\n+    *(vint16mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vint16mf4_t v = *(vint16mf4_t*)(in + 300);\n+    *(vint16mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + i);\n+      *(vint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b9ebf57769f574590790833780cfff498ad86777", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-22.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-22.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 100);\n+    *(vuint16mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 200);\n+    *(vuint16mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vuint16mf4_t v = *(vuint16mf4_t*)(in + 300);\n+    *(vuint16mf4_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + i);\n+      *(vuint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "12415de5d1d493936bd275728f4cac7bc604ea6a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-23.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-23.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 100);\n+    *(vint16mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 200);\n+    *(vint16mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vint16mf2_t v = *(vint16mf2_t*)(in + 300);\n+    *(vint16mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + i);\n+      *(vint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "ee08fa8562e1ccdcedd47e3f507b970f5b923186", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-24.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-24.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 100);\n+    *(vuint16mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 200);\n+    *(vuint16mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vuint16mf2_t v = *(vuint16mf2_t*)(in + 300);\n+    *(vuint16mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf2_t v = *(vuint16mf2_t*)(in + i);\n+      *(vuint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "1f83d69a902d6d25f34a20bda3751486986539e5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-25.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-25.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 100);\n+    *(vint32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 200);\n+    *(vint32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vint32mf2_t v = *(vint32mf2_t*)(in + 300);\n+    *(vint32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint32mf2_t v = *(vint32mf2_t*)(in + i);\n+      *(vint32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "8498754797e0942f4ed8acb0be205b2d7f1c7bd1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-26.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-26.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 100);\n+    *(vuint32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 200);\n+    *(vuint32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 300);\n+    *(vuint32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint32mf2_t v = *(vuint32mf2_t*)(in + i);\n+      *(vuint32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "750681935bdca7379b622fcb3fef909659d112dc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-27.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-27.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 100);\n+    *(vfloat32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 200);\n+    *(vfloat32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vfloat32mf2_t v = *(vfloat32mf2_t*)(in + 300);\n+    *(vfloat32mf2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vfloat32mf2_t v = *(vfloat32mf2_t*)(in + i);\n+      *(vfloat32mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "17758e36a83990723692f9f958532c66a1d659eb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-28.c", "status": "added", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-28.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,231 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool64_t v = *(vbool64_t*)(in + 100);\n+    *(vbool64_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool64_t v = *(vbool64_t*)(in + 200);\n+    *(vbool64_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool64_t v = *(vbool64_t*)(in + 300);\n+    *(vbool64_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool64_t v = *(vbool64_t*)(in + i);\n+      *(vbool64_t*)(out + i) = v;\n+    }\n+}\n+\n+void f2 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool32_t v = *(vbool32_t*)(in + 100);\n+    *(vbool32_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool32_t v = *(vbool32_t*)(in + 200);\n+    *(vbool32_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool32_t v = *(vbool32_t*)(in + 300);\n+    *(vbool32_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool32_t v = *(vbool32_t*)(in + i);\n+      *(vbool32_t*)(out + i) = v;\n+    }\n+}\n+\n+void f3 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool16_t v = *(vbool16_t*)(in + 100);\n+    *(vbool16_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool16_t v = *(vbool16_t*)(in + 200);\n+    *(vbool16_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool16_t v = *(vbool16_t*)(in + 300);\n+    *(vbool16_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool16_t v = *(vbool16_t*)(in + i);\n+      *(vbool16_t*)(out + i) = v;\n+    }\n+}\n+\n+void f4 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool8_t v = *(vbool8_t*)(in + 100);\n+    *(vbool8_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool8_t v = *(vbool8_t*)(in + 200);\n+    *(vbool8_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool8_t v = *(vbool8_t*)(in + 300);\n+    *(vbool8_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool8_t v = *(vbool8_t*)(in + i);\n+      *(vbool8_t*)(out + i) = v;\n+    }\n+}\n+\n+void f5 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool4_t v = *(vbool4_t*)(in + 100);\n+    *(vbool4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool4_t v = *(vbool4_t*)(in + 200);\n+    *(vbool4_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool4_t v = *(vbool4_t*)(in + 300);\n+    *(vbool4_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool4_t v = *(vbool4_t*)(in + i);\n+      *(vbool4_t*)(out + i) = v;\n+    }\n+}\n+\n+void f6 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool2_t v = *(vbool2_t*)(in + 100);\n+    *(vbool2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool2_t v = *(vbool2_t*)(in + 200);\n+    *(vbool2_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool2_t v = *(vbool2_t*)(in + 300);\n+    *(vbool2_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool2_t v = *(vbool2_t*)(in + i);\n+      *(vbool2_t*)(out + i) = v;\n+    }\n+}\n+\n+void f7 (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  switch (cond)\n+  {\n+  case 1:{\n+    vbool1_t v = *(vbool1_t*)(in + 100);\n+    *(vbool1_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 2:{\n+    vbool1_t v = *(vbool1_t*)(in + 200);\n+    *(vbool1_t*)(out + 100) = v;\n+    break;\n+  }\n+  case 3:{\n+    vbool1_t v = *(vbool1_t*)(in + 300);\n+    *(vbool1_t*)(out + 100) = v;\n+    break;\n+  }\n+  default:{\n+    break;\n+  }\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vbool1_t v = *(vbool1_t*)(in + i);\n+      *(vbool1_t*)(out + i) = v;\n+    }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "eb1afa55aabc4b5eee5fc8f14529b3f5428f0afa", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-3.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-3.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + 100);\n+      *(vint8mf4_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + 200);\n+      *(vint8mf4_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + 300);\n+      *(vint8mf4_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf4_t v = *(vint8mf4_t*)(in + i);\n+      *(vint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "535f3261204a5d9245855c3f86cacf28a2a6f9d6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-4.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-4.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + 100);\n+      *(vuint8mf4_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + 200);\n+      *(vuint8mf4_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + 300);\n+      *(vuint8mf4_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf4_t v = *(vuint8mf4_t*)(in + i);\n+      *(vuint8mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "ea7f4e3d2de1577a01aec91a8363a918f9085cee", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-5.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-5.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + 100);\n+      *(vint8mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + 200);\n+      *(vint8mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + 300);\n+      *(vint8mf2_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf2_t v = *(vint8mf2_t*)(in + i);\n+      *(vint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "f340b44db31d94a2f3776084bba784610516b9c2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-6.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-6.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + 100);\n+      *(vuint8mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + 200);\n+      *(vuint8mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + 300);\n+      *(vuint8mf2_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint8mf2_t v = *(vuint8mf2_t*)(in + i);\n+      *(vuint8mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "70aea4e7ea6ee8c496b75a3236ec9e99f4c52e59", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-7.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-7.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 100);\n+      *(vint16mf4_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 200);\n+      *(vint16mf4_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + 300);\n+      *(vint16mf4_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf4_t v = *(vint16mf4_t*)(in + i);\n+      *(vint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "697d5faff2292fe3ad119787774fe2785093acb3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-8.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-8.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + 100);\n+      *(vuint16mf4_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + 200);\n+      *(vuint16mf4_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + 300);\n+      *(vuint16mf4_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vuint16mf4_t v = *(vuint16mf4_t*)(in + i);\n+      *(vuint16mf4_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "f1edf8f68ecb55b56ef984112c48384651b0db95", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-9.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76023293e6e82439643048a32cad36ddf9ba0e44/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-9.c?ref=76023293e6e82439643048a32cad36ddf9ba0e44", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+/* The for loop body should not have vsetvl instruction.  */\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  if (cond == 1)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + 100);\n+      *(vint16mf2_t*)(out + 100) = v;\n+    }\n+  else if (cond == 2)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + 200);\n+      *(vint16mf2_t*)(out + 200) = v;\n+    }\n+  else if (cond == 3)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + 300);\n+      *(vint16mf2_t*)(out + 300) = v;\n+    }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint16mf2_t v = *(vint16mf2_t*)(in + i);\n+      *(vint16mf2_t*)(out + i) = v;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"    no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}]}