{"sha": "d6cfb47fd4dfef990a4719aab6a36a0c1cfe6f76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZjZmI0N2ZkNGRmZWY5OTBhNDcxOWFhYjZhMzZhMGMxY2ZlNmY3Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-02-15T18:02:50Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-02-15T18:02:50Z"}, "message": "darwin.h (TARGET_FPMATH_DEFAULT_P): New define.\n\n\t* config/i386/darwin.h (TARGET_FPMATH_DEFAULT_P): New define.\n\nFrom-SVN: r268944", "tree": {"sha": "f30a5bd1a8fa98366cf1c429c82fb4ff58620a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f30a5bd1a8fa98366cf1c429c82fb4ff58620a84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6cfb47fd4dfef990a4719aab6a36a0c1cfe6f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cfb47fd4dfef990a4719aab6a36a0c1cfe6f76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6cfb47fd4dfef990a4719aab6a36a0c1cfe6f76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cfb47fd4dfef990a4719aab6a36a0c1cfe6f76/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75e2abe6f9a3b423e952b5741fcb2787834e19f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e2abe6f9a3b423e952b5741fcb2787834e19f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75e2abe6f9a3b423e952b5741fcb2787834e19f4"}], "stats": {"total": 132, "additions": 69, "deletions": 63}, "files": [{"sha": "d1083735e26e48a0701128d58177b49282a7aa86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cfb47fd4dfef990a4719aab6a36a0c1cfe6f76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cfb47fd4dfef990a4719aab6a36a0c1cfe6f76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6cfb47fd4dfef990a4719aab6a36a0c1cfe6f76", "patch": "@@ -1,3 +1,7 @@\n+2019-02-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/darwin.h (TARGET_FPMATH_DEFAULT_P): New define.\n+\n 2019-02-15  Aaron Sawdey  <acsawdey@linux.ibm.com>\n \n \tPR rtl-optimization/88308"}, {"sha": "d8e72ec69a57fc228ea933443467c454f557b518", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 65, "deletions": 63, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cfb47fd4dfef990a4719aab6a36a0c1cfe6f76/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cfb47fd4dfef990a4719aab6a36a0c1cfe6f76/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=d6cfb47fd4dfef990a4719aab6a36a0c1cfe6f76", "patch": "@@ -25,10 +25,10 @@ along with GCC; see the file COPYING3.  If not see\n #undef DARWIN_X86\n #define DARWIN_X86 1\n \n-#undef  TARGET_64BIT\n-#undef\tTARGET_64BIT_P\n+#undef TARGET_64BIT\n #define TARGET_64BIT TARGET_ISA_64BIT\n-#define\tTARGET_64BIT_P(x) TARGET_ISA_64BIT_P(x)\n+#undef TARGET_64BIT_P\n+#define TARGET_64BIT_P(x) TARGET_ISA_64BIT_P(x)\n \n #ifdef IN_LIBGCC2\n #undef TARGET_64BIT\n@@ -70,14 +70,15 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef TARGET_FPMATH_DEFAULT\n #define TARGET_FPMATH_DEFAULT (TARGET_SSE ? FPMATH_SSE : FPMATH_387)\n+#undef TARGET_FPMATH_DEFAULT_P\n+#define TARGET_FPMATH_DEFAULT_P(x) \\\n+  (TARGET_SSE_P(x) ? FPMATH_SSE : FPMATH_387)\n \n #define TARGET_OS_CPP_BUILTINS()                \\\n-  do                                            \\\n-    {                                           \\\n-      builtin_define (\"__LITTLE_ENDIAN__\");     \\\n-      darwin_cpp_builtins (pfile);\t\t\\\n-    }                                           \\\n-  while (0)\n+  do {\t\t\t\t\t\t\\\n+    builtin_define (\"__LITTLE_ENDIAN__\");\t\\\n+    darwin_cpp_builtins (pfile);\t\t\\\n+  } while (0)\n \n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE (TARGET_64BIT ? \"long int\" : \"int\")\n@@ -121,7 +122,7 @@ extern int darwin_emit_branch_islands;\n    than 128 bits for Darwin, but it's easier to up the alignment if\n    it's below the minimum.  */\n #undef PREFERRED_STACK_BOUNDARY\n-#define PREFERRED_STACK_BOUNDARY\t\t\t\\\n+#define PREFERRED_STACK_BOUNDARY \\\n   MAX (128, ix86_preferred_stack_boundary)\n \n /* We want -fPIC by default, unless we're using -static to compile for\n@@ -179,15 +180,15 @@ extern int darwin_emit_branch_islands;\n    and returns float values in the 387.  */\n \n #undef TARGET_SUBTARGET_DEFAULT\n-#define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_128BIT_LONG_DOUBLE)\n+#define TARGET_SUBTARGET_DEFAULT \\\n+  (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_128BIT_LONG_DOUBLE)\n \n /* For darwin we want to target specific processor features as a minimum,\n    but these unfortunately don't correspond to a specific processor.  */\n #undef TARGET_SUBTARGET32_ISA_DEFAULT\n-#define TARGET_SUBTARGET32_ISA_DEFAULT (OPTION_MASK_ISA_MMX\t\t\\\n-\t\t\t\t\t| OPTION_MASK_ISA_SSE\t\t\\\n-\t\t\t\t\t| OPTION_MASK_ISA_SSE2\t\t\\\n-\t\t\t\t\t| OPTION_MASK_ISA_SSE3)\n+#define TARGET_SUBTARGET32_ISA_DEFAULT\t\t\t\\\n+  (OPTION_MASK_ISA_MMX | OPTION_MASK_ISA_SSE\t\t\\\n+   | OPTION_MASK_ISA_SSE2 | OPTION_MASK_ISA_SSE3)\n \n #undef TARGET_SUBTARGET64_ISA_DEFAULT\n #define TARGET_SUBTARGET64_ISA_DEFAULT TARGET_SUBTARGET32_ISA_DEFAULT\n@@ -209,15 +210,16 @@ extern int darwin_emit_branch_islands;\n #define SUBTARGET_ENCODE_SECTION_INFO  darwin_encode_section_info\n \n #undef ASM_OUTPUT_ALIGN\n-#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n- do { if ((LOG) != 0)\t\t\t\\\n-        {\t\t\t\t\\\n-          if (in_section == text_section) \\\n-            fprintf (FILE, \"\\t%s %d,0x90\\n\", ALIGN_ASM_OP, (LOG)); \\\n-          else\t\t\t\t\\\n-            fprintf (FILE, \"\\t%s %d\\n\", ALIGN_ASM_OP, (LOG)); \\\n-        }\t\t\t\t\\\n-    } while (0)\n+#define ASM_OUTPUT_ALIGN(FILE,LOG)\t\t\t\t   \\\n+  do {\t\t\t\t\t\t\t\t   \\\n+    if ((LOG) != 0)\t\t\t\t\t\t   \\\n+      {\t\t\t\t\t\t\t\t   \\\n+\tif (in_section == text_section)\t\t\t\t   \\\n+\t  fprintf (FILE, \"\\t%s %d,0x90\\n\", ALIGN_ASM_OP, (LOG));   \\\n+\telse\t\t\t\t\t\t\t   \\\n+\t  fprintf (FILE, \"\\t%s %d\\n\", ALIGN_ASM_OP, (LOG));\t   \\\n+      }\t\t\t\t\t\t\t\t   \\\n+  } while (0)\n \n /* Darwin x86 assemblers support the .ident directive.  */\n \n@@ -227,28 +229,28 @@ extern int darwin_emit_branch_islands;\n /* Darwin profiling -- call mcount.  */\n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\t\\\n-    do {\t\t\t\t\t\t\t\t\\\n-      if (TARGET_MACHO_BRANCH_ISLANDS \t\t\t\t\t\\\n-\t   && MACHOPIC_INDIRECT && !TARGET_64BIT)\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  const char *name = machopic_mcount_stub_name ();\t\t\\\n-\t  fprintf (FILE, \"\\tcall %s\\n\", name+1);  /*  skip '&'  */\t\\\n-\t  machopic_validate_stub_or_non_lazy_ptr (name);\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else fprintf (FILE, \"\\tcall mcount\\n\");\t\t\t\t\\\n-    } while (0)\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (TARGET_MACHO_BRANCH_ISLANDS \t\t\t\t\t\\\n+\t&& MACHOPIC_INDIRECT && !TARGET_64BIT)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tconst char *name = machopic_mcount_stub_name ();\t\t\\\n+\tfprintf (FILE, \"\\tcall %s\\n\", name+1);  /*  skip '&'  */\t\\\n+\tmachopic_validate_stub_or_non_lazy_ptr (name);\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    else fprintf (FILE, \"\\tcall mcount\\n\");\t\t\t\t\\\n+  } while (0)\n \n #define C_COMMON_OVERRIDE_OPTIONS\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     SUBTARGET_C_COMMON_OVERRIDE_OPTIONS;\t\t\t\t\\\n   } while (0)\n \n #undef SUBTARGET_OVERRIDE_OPTIONS\n-#define SUBTARGET_OVERRIDE_OPTIONS \\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_64BIT && MACHO_DYNAMIC_NO_PIC_P)\t\t\t\t\\\n-    target_flags &= ~MASK_MACHO_DYNAMIC_NO_PIC;\t\t\t\t\\\n-} while (0)\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (TARGET_64BIT && MACHO_DYNAMIC_NO_PIC_P)\t\t\t\t\\\n+      target_flags &= ~MASK_MACHO_DYNAMIC_NO_PIC;\t\t\t\\\n+  } while (0)\n \n /* Darwin on x86_64 uses dwarf-2 by default.  Pre-darwin9 32-bit\n    compiles default to stabs+.  darwin9+ defaults to dwarf-2.  */\n@@ -289,24 +291,24 @@ do {\t\t\t\t\t\t\t\t\t\\\n    end of the instruction, but without the 4 we'd only have the right\n    address for the start of the instruction.  */\n #undef ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX\n-#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE)\t\\\n-  if (TARGET_64BIT)\t\t\t\t                                \\\n-    {                                                                           \\\n-      if ((SIZE) == 4 && ((ENCODING) & 0x70) == DW_EH_PE_pcrel)\t\t\t\\\n-        {                                                                       \\\n-\t   fputs (ASM_LONG, FILE);                                              \\\n-\t   assemble_name (FILE, XSTR (ADDR, 0));\t\t\t\t\\\n-\t   fputs (\"+4@GOTPCREL\", FILE);                                         \\\n-\t   goto DONE;                                                           \\\n-        }\t\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\t\\\n-  else                                                                          \\\n-    {\t\t\t\t\t\t\t\t\t\t\\\n-      if (ENCODING == ASM_PREFERRED_EH_DATA_FORMAT (2, 1))                      \\\n-        {                                                                       \\\n-          darwin_non_lazy_pcrel (FILE, ADDR);                                   \\\n-          goto DONE;\t\t\t\t\t\t\t\t\\\n-        }                                                                       \\\n+#define ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX(FILE, ENCODING, SIZE, ADDR, DONE) \\\n+  if (TARGET_64BIT)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if ((SIZE) == 4 && ((ENCODING) & 0x70) == DW_EH_PE_pcrel)\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  fputs (ASM_LONG, FILE);\t\t\t\t\t\\\n+\t  assemble_name (FILE, XSTR (ADDR, 0));\t\t\t\t\\\n+\t  fputs (\"+4@GOTPCREL\", FILE);\t\t\t\t\t\\\n+\t  goto DONE;\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (ENCODING == ASM_PREFERRED_EH_DATA_FORMAT (2, 1))\t\t\\\n+        {\t\t\t\t\t\t\t\t\\\n+          darwin_non_lazy_pcrel (FILE, ADDR);\t\t\t\t\\\n+          goto DONE;\t\t\t\t\t\t\t\\\n+        }\t\t\t\t\t\t\t\t\\\n     }\n \n /* This needs to move since i386 uses the first flag and other flags are\n@@ -321,9 +323,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define SUBTARGET32_DEFAULT_CPU \"i686\"\n \n #undef  SUBTARGET_INIT_BUILTINS\n-#define SUBTARGET_INIT_BUILTINS\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  ix86_builtins[(int) IX86_BUILTIN_CFSTRING]\t\t\t\\\n-    = darwin_init_cfstring_builtins ((unsigned) (IX86_BUILTIN_CFSTRING));\t\\\n-  darwin_rename_builtins ();\t\t\t\t\t\\\n-} while(0)\n+#define SUBTARGET_INIT_BUILTINS\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ix86_builtins[(int) IX86_BUILTIN_CFSTRING]\t\t\t\t\\\n+      = darwin_init_cfstring_builtins ((unsigned) (IX86_BUILTIN_CFSTRING)); \\\n+    darwin_rename_builtins ();\t\t\t\t\t\t\\\n+  } while(0)"}]}