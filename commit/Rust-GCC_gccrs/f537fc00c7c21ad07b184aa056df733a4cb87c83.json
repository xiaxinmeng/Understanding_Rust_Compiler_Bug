{"sha": "f537fc00c7c21ad07b184aa056df733a4cb87c83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUzN2ZjMDBjN2MyMWFkMDdiMTg0YWEwNTZkZjczM2E0Y2I4N2M4Mw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-05-30T08:56:18Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-30T08:56:18Z"}, "message": "[Ada] Minor reformatting\n\n2018-05-30  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb, exp_ch3.adb, exp_ch4.adb, exp_ch7.adb, exp_unst.adb,\n\texp_util.adb, exp_util.ads, libgnat/a-calcon.adb, libgnat/a-calcon.ads,\n\tlibgnat/s-os_lib.adb, repinfo.adb, sem_ch3.adb, sem_disp.adb,\n\tsem_disp.ads, sem_util.adb: Minor reformatting.\n\nFrom-SVN: r260923", "tree": {"sha": "d4fa45bb3c4db3faacf0f3298fa7bb2b081b5a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4fa45bb3c4db3faacf0f3298fa7bb2b081b5a90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f537fc00c7c21ad07b184aa056df733a4cb87c83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f537fc00c7c21ad07b184aa056df733a4cb87c83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f537fc00c7c21ad07b184aa056df733a4cb87c83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f537fc00c7c21ad07b184aa056df733a4cb87c83/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0368be1a18a9ae007ed3f4ef0f2b1400c6b43f6"}], "stats": {"total": 262, "additions": 137, "deletions": 125}, "files": [{"sha": "c3ea9db83ff58393341a47c34494db19c3c38c5a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -1,3 +1,10 @@\n+2018-05-30  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_aggr.adb, exp_ch3.adb, exp_ch4.adb, exp_ch7.adb, exp_unst.adb,\n+\texp_util.adb, exp_util.ads, libgnat/a-calcon.adb, libgnat/a-calcon.ads,\n+\tlibgnat/s-os_lib.adb, repinfo.adb, sem_ch3.adb, sem_disp.adb,\n+\tsem_disp.ads, sem_util.adb: Minor reformatting.\n+\n 2018-05-30  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Makefile.in: Move special flags for Ada runtime files"}, {"sha": "691ba4bf16420ba8cdca3f51f61d1f7ec8b02dd0", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -4490,7 +4490,7 @@ package body Exp_Aggr is\n                      return False;\n                   end if;\n \n-                  --  Duplicate expression for each index it covers.\n+                  --  Duplicate expression for each index it covers\n \n                   Vals (Num) := New_Copy_Tree (Elmt);\n                   Num := Num + 1;"}, {"sha": "354d6baf9e268cbc61dc034fbb7671a6e04c3d80", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -1554,22 +1554,20 @@ package body Exp_Ch3 is\n \n       if Needs_Conditional_Null_Excluding_Check (Full_Init_Type) then\n \n-         --  Look at the associated node for the object we are referencing and\n-         --  verify that we are expanding a call to an Init_Proc for an\n+         --  Look at the associated node for the object we are referencing\n+         --  and verify that we are expanding a call to an Init_Proc for an\n          --  internally generated object declaration before passing True and\n          --  skipping the relevant checks.\n \n          if Nkind (Id_Ref) in N_Has_Entity\n            and then Comes_From_Source (Associated_Node (Id_Ref))\n          then\n-            Append_To (Args,\n-              New_Occurrence_Of (Standard_True, Loc));\n+            Append_To (Args, New_Occurrence_Of (Standard_True, Loc));\n \n          --  Otherwise, we pass False to perform null-excluding checks\n \n          else\n-            Append_To (Args,\n-              New_Occurrence_Of (Standard_False, Loc));\n+            Append_To (Args, New_Occurrence_Of (Standard_False, Loc));\n          end if;\n       end if;\n "}, {"sha": "d110385a20c7a64cc9cb5157cd295e4164cd93e1", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 41, "deletions": 37, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -2435,10 +2435,10 @@ package body Exp_Ch4 is\n          else\n             declare\n                Comp_Typ : Entity_Id;\n+               Hi       : Node_Id;\n                Indx     : Node_Id;\n                Ityp     : Entity_Id;\n                Lo       : Node_Id;\n-               Hi       : Node_Id;\n \n             begin\n                --  Do the comparison in the type (or its full view) and not in\n@@ -10976,10 +10976,10 @@ package body Exp_Ch4 is\n          Xtyp : constant Entity_Id := Etype (Operand);\n \n          Conv   : Node_Id;\n-         Lo_Arg : Node_Id;\n-         Lo_Val : Node_Id;\n          Hi_Arg : Node_Id;\n          Hi_Val : Node_Id;\n+         Lo_Arg : Node_Id;\n+         Lo_Val : Node_Id;\n          Tnn    : Entity_Id;\n \n       begin\n@@ -11103,7 +11103,7 @@ package body Exp_Ch4 is\n          if Is_Ordinary_Fixed_Point_Type (Target_Type)\n            and then Is_Floating_Point_Type (Operand_Type)\n            and then RM_Size (Base_Type (Target_Type)) <=\n-             RM_Size (Standard_Long_Integer)\n+                    RM_Size (Standard_Long_Integer)\n            and then Nkind (Lo) = N_Real_Literal\n            and then Nkind (Hi) = N_Real_Literal\n          then\n@@ -11120,9 +11120,7 @@ package body Exp_Ch4 is\n                if RM_Size (Bfx_Type) > RM_Size (Standard_Integer) then\n                   Int_Type := Standard_Long_Integer;\n \n-               elsif\n-                 RM_Size (Bfx_Type) > RM_Size (Standard_Short_Integer)\n-               then\n+               elsif RM_Size (Bfx_Type) > RM_Size (Standard_Short_Integer) then\n                   Int_Type := Standard_Integer;\n \n                else\n@@ -11145,40 +11143,44 @@ package body Exp_Ch4 is\n \n                --  Create integer objects for range checking of result.\n \n-               Lo_Arg := Unchecked_Convert_To (Int_Type,\n-                           New_Occurrence_Of (Expr_Id, Loc));\n-               Lo_Val := Make_Integer_Literal (Loc,\n-                           Corresponding_Integer_Value (Lo));\n+               Lo_Arg :=\n+                 Unchecked_Convert_To\n+                   (Int_Type, New_Occurrence_Of (Expr_Id, Loc));\n+\n+               Lo_Val :=\n+                 Make_Integer_Literal (Loc, Corresponding_Integer_Value (Lo));\n \n-               Hi_Arg := Unchecked_Convert_To (Int_Type,\n-                           New_Occurrence_Of (Expr_Id, Loc));\n-               Hi_Val := Make_Integer_Literal (Loc,\n-                           Corresponding_Integer_Value (Hi));\n+               Hi_Arg :=\n+                 Unchecked_Convert_To\n+                   (Int_Type, New_Occurrence_Of (Expr_Id, Loc));\n+\n+               Hi_Val :=\n+                 Make_Integer_Literal (Loc, Corresponding_Integer_Value (Hi));\n \n                --  Rewrite conversion as an integer conversion of the\n                --  original floating-point expression, followed by an\n                --  unchecked conversion to the target fixed-point type.\n \n-               Conv   := Make_Unchecked_Type_Conversion (Loc,\n-                           Subtype_Mark =>\n-                             New_Occurrence_Of (Target_Type, Loc),\n-                           Expression   =>\n-                             New_Occurrence_Of (Expr_Id, Loc));\n+               Conv :=\n+                 Make_Unchecked_Type_Conversion (Loc,\n+                   Subtype_Mark => New_Occurrence_Of (Target_Type, Loc),\n+                   Expression   => New_Occurrence_Of (Expr_Id, Loc));\n             end;\n \n-         else  -- For all other conversions\n+         --  All other conversions\n \n+         else\n             Lo_Arg := New_Occurrence_Of (Tnn, Loc);\n-            Lo_Val := Make_Attribute_Reference (Loc,\n-                       Attribute_Name => Name_First,\n-                         Prefix =>\n-                           New_Occurrence_Of (Target_Type, Loc));\n+            Lo_Val :=\n+              Make_Attribute_Reference (Loc,\n+                Prefix         => New_Occurrence_Of (Target_Type, Loc),\n+                Attribute_Name => Name_First);\n \n             Hi_Arg := New_Occurrence_Of (Tnn, Loc);\n-            Hi_Val := Make_Attribute_Reference (Loc,\n-                       Attribute_Name => Name_Last,\n-                         Prefix =>\n-                           New_Occurrence_Of (Target_Type, Loc));\n+            Hi_Val :=\n+              Make_Attribute_Reference (Loc,\n+                Prefix         => New_Occurrence_Of (Target_Type, Loc),\n+                Attribute_Name => Name_Last);\n          end if;\n \n          --  Build code for range checking\n@@ -11189,18 +11191,20 @@ package body Exp_Ch4 is\n              Object_Definition   => New_Occurrence_Of (Btyp, Loc),\n              Constant_Present    => True,\n              Expression          => Conv),\n+\n            Make_Raise_Constraint_Error (Loc,\n-              Condition =>\n-              Make_Or_Else (Loc,\n-                  Make_Op_Lt (Loc,\n-                    Left_Opnd  => Lo_Arg,\n-                    Right_Opnd => Lo_Val),\n+             Condition =>\n+               Make_Or_Else (Loc,\n+                 Left_Opnd  =>\n+                   Make_Op_Lt (Loc,\n+                     Left_Opnd  => Lo_Arg,\n+                     Right_Opnd => Lo_Val),\n \n                 Right_Opnd =>\n                   Make_Op_Gt (Loc,\n                     Left_Opnd  => Hi_Arg,\n                     Right_Opnd => Hi_Val)),\n-              Reason => CE_Range_Check_Failed)));\n+              Reason   => CE_Range_Check_Failed)));\n \n          Rewrite (N, New_Occurrence_Of (Tnn, Loc));\n          Analyze_And_Resolve (N, Btyp);\n@@ -11210,8 +11214,8 @@ package body Exp_Ch4 is\n       -- Has_Extra_Accessibility --\n       -----------------------------\n \n-      --  Returns true for a formal of an anonymous access type or for\n-      --  an Ada 2012-style stand-alone object of an anonymous access type.\n+      --  Returns true for a formal of an anonymous access type or for an Ada\n+      --  2012-style stand-alone object of an anonymous access type.\n \n       function Has_Extra_Accessibility (Id : Entity_Id) return Boolean is\n       begin"}, {"sha": "e5285fa1f4f4f138028202efe5903a9ff0889cd2", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -3521,6 +3521,7 @@ package body Exp_Ch7 is\n       Set_At_End_Proc (HSS, New_Occurrence_Of (Fin_Id, Loc));\n \n       --  Attach reference to finalizer to tree, for LLVM use\n+\n       Set_Parent (At_End_Proc (HSS), HSS);\n \n       Analyze (At_End_Proc (HSS));"}, {"sha": "89d0172cf00295a0eb85cef77b0146bfdb05757d", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -367,7 +367,9 @@ package body Exp_Unst is\n             Callee : Entity_Id;\n \n             procedure Check_Static_Type\n-              (T : Entity_Id; N : Node_Id; DT : in out Boolean);\n+              (T  : Entity_Id;\n+               N  : Node_Id;\n+               DT : in out Boolean);\n             --  Given a type T, checks if it is a static type defined as a type\n             --  with no dynamic bounds in sight. If so, the only action is to\n             --  set Is_Static_Type True for T. If T is not a static type, then\n@@ -391,7 +393,9 @@ package body Exp_Unst is\n             -----------------------\n \n             procedure Check_Static_Type\n-              (T : Entity_Id; N : Node_Id; DT : in out Boolean)\n+              (T  : Entity_Id;\n+               N  : Node_Id;\n+               DT : in out Boolean)\n             is\n                procedure Note_Uplevel_Bound (N : Node_Id; Ref : Node_Id);\n                --  N is the bound of a dynamic type. This procedure notes that\n@@ -410,9 +414,9 @@ package body Exp_Unst is\n                begin\n                   --  Entity name case. Make sure that the entity is declared\n                   --  in a subprogram. This may not be the case for for a type\n-                  --  in a loop appearing in a precondition.\n-                  --  Exclude explicitly  discriminants (that can appear\n-                  --  in bounds of discriminated components).\n+                  --  in a loop appearing in a precondition. Exclude explicitly\n+                  --  discriminants (that can appear in bounds of discriminated\n+                  --  components).\n \n                   if Is_Entity_Name (N) then\n                      if Present (Entity (N))\n@@ -645,14 +649,14 @@ package body Exp_Unst is\n                   end if;\n                end if;\n \n-               --  for all calls where the formal is an unconstrained array\n-               --  and the actual is constrained we need to check the bounds.\n+               --  for all calls where the formal is an unconstrained array and\n+               --  the actual is constrained we need to check the bounds.\n \n                declare\n-                  Subp   : Entity_Id;\n                   Actual : Entity_Id;\n-                  Formal : Node_Id;\n                   DT     : Boolean := False;\n+                  Formal : Node_Id;\n+                  Subp   : Entity_Id;\n \n                begin\n                   if Nkind (Name (N)) = N_Explicit_Dereference then\n@@ -679,19 +683,19 @@ package body Exp_Unst is\n             elsif Nkind (N) = N_Handled_Sequence_Of_Statements\n               and then Present (At_End_Proc (N))\n             then\n+               --  An At_End_Proc means there's a call from this block to that\n+               --  subprogram.\n \n-               --  An At_End_Proc means there's a call from this block\n-               --  to that subprogram.\n-\n-               Append_Unique_Call ((N, Current_Subprogram,\n-                                     Entity (At_End_Proc (N))));\n+               Append_Unique_Call\n+                 ((N, Current_Subprogram, Entity (At_End_Proc (N))));\n \n             --  Handle a 'Access as a (potential) call\n \n             elsif Nkind (N) = N_Attribute_Reference then\n                declare\n                   Attr : constant Attribute_Id :=\n                            Get_Attribute_Id (Attribute_Name (N));\n+\n                begin\n                   case Attr is\n                      when Attribute_Access\n@@ -715,8 +719,8 @@ package body Exp_Unst is\n                            end if;\n                         end if;\n \n-                     --  References to bounds can be uplevel references if\n-                     --  the type isn't static.\n+                     --  References to bounds can be uplevel references if the\n+                     --  type isn't static.\n \n                      when Attribute_First\n                         | Attribute_Last\n@@ -733,8 +737,8 @@ package body Exp_Unst is\n                            declare\n                               DT : Boolean := False;\n                            begin\n-                              Check_Static_Type (Etype (Prefix (N)),\n-                                                 Empty, DT);\n+                              Check_Static_Type\n+                                (Etype (Prefix (N)), Empty, DT);\n                            end;\n \n                            return OK;\n@@ -759,13 +763,12 @@ package body Exp_Unst is\n                end;\n \n             --  A selected component can have an implicit up-level reference\n-            --  due to the bounds of previous fields in the record. We\n-            --  simplify the processing here by examining all components\n-            --  of the record.\n+            --  due to the bounds of previous fields in the record. We simplify\n+            --  the processing here by examining all components of the record.\n \n             --  Selected components appear as unit names and end labels for\n-            --  child units. The prefixes of these nodes denote parent\n-            --  units and carry no type information so they are skipped.\n+            --  child units. The prefixes of these nodes denote parent units\n+            --  and carry no type information so they are skipped.\n \n             elsif Nkind (N) = N_Selected_Component\n               and then Present (Etype (Prefix (N)))\n@@ -776,8 +779,8 @@ package body Exp_Unst is\n                   Check_Static_Type (Etype (Prefix (N)), Empty, DT);\n                end;\n \n-            --  Record a subprogram. We record a subprogram body that acts as\n-            --  a spec. Otherwise we record a subprogram declaration, providing\n+            --  Record a subprogram. We record a subprogram body that acts as a\n+            --  spec. Otherwise we record a subprogram declaration, providing\n             --  that it has a corresponding body we can get hold of. The case\n             --  of no corresponding body being available is ignored for now.\n "}, {"sha": "0c1d4b834cad53a33c51f4db71c1a8f1840b9c03", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -10449,8 +10449,8 @@ package body Exp_Util is\n      (Typ : Entity_Id) return Boolean\n    is\n    begin\n-      return Is_Array_Type (Typ)\n-               and then Can_Never_Be_Null (Component_Type (Typ));\n+      return\n+        Is_Array_Type (Typ) and then Can_Never_Be_Null (Component_Type (Typ));\n    end Needs_Conditional_Null_Excluding_Check;\n \n    ----------------------------\n@@ -10495,7 +10495,6 @@ package body Exp_Util is\n          return False;\n \n       else\n-\n          --  Otherwise, we require the address clause to be constant because\n          --  the call to the initialization procedure (or the attach code) has\n          --  to happen at the point of the declaration."}, {"sha": "708da2004ae8bb4e869981412982e2dd3fd542ac", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -506,9 +506,8 @@ package Exp_Util is\n    --  to repeat the checks.\n \n    function Enclosing_Init_Proc return Entity_Id;\n-   --  Obtain the entity associated with the enclosing type Init_Proc by\n-   --  examining the current scope. If not inside an Init_Proc at the point of\n-   --  call Empty will be returned.\n+   --  Obtain the entity of the type initialization procedure which encloses\n+   --  the current scope. Return Empty if no such procedure exists.\n \n    procedure Ensure_Defined (Typ : Entity_Id; N : Node_Id);\n    --  This procedure ensures that type referenced by Typ is defined. For the"}, {"sha": "509ff25c665939d849574e2ca4cde922534a18b5", "filename": "gcc/ada/libgnat/a-calcon.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Flibgnat%2Fa-calcon.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Flibgnat%2Fa-calcon.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-calcon.adb?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Interfaces.C; use Interfaces.C;\n+with Interfaces.C;            use Interfaces.C;\n with Interfaces.C.Extensions; use Interfaces.C.Extensions;\n \n package body Ada.Calendar.Conversions is\n@@ -141,7 +141,7 @@ package body Ada.Calendar.Conversions is\n \n    function To_Unix_Time (Ada_Time : Time) return long is\n       Val : constant Long_Integer :=\n-        Conversion_Operations.To_Unix_Time (Ada_Time);\n+              Conversion_Operations.To_Unix_Time (Ada_Time);\n    begin\n       return long (Val);\n    end To_Unix_Time;\n@@ -153,8 +153,10 @@ package body Ada.Calendar.Conversions is\n    function To_Unix_Nano_Time (Ada_Time : Time) return long_long is\n       pragma Unsuppress (Overflow_Check);\n       Ada_Rep : constant Time_Rep := Time_Rep (Ada_Time);\n+\n    begin\n       return long_long (Ada_Rep + Epoch_Offset);\n+\n    exception\n       when Constraint_Error =>\n          raise Time_Error;"}, {"sha": "fdf0125f89d26d422dada94fd157c8089034ba9e", "filename": "gcc/ada/libgnat/a-calcon.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Flibgnat%2Fa-calcon.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Flibgnat%2Fa-calcon.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-calcon.ads?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -111,8 +111,8 @@ package Ada.Calendar.Conversions is\n    --  units of the result are seconds. Raises Time_Error if the result cannot\n    --  fit into a Time value.\n \n-   function To_Unix_Nano_Time (Ada_Time : Time) return\n-      Interfaces.C.Extensions.long_long;\n+   function To_Unix_Nano_Time\n+     (Ada_Time : Time) return Interfaces.C.Extensions.long_long;\n    --  Convert a time value represented as number of time units since the Ada\n    --  implementation-defined Epoch to a value relative to the Unix Epoch. The\n    --  units of the result are nanoseconds. Raises Time_Error if the result"}, {"sha": "2569a83a8fd2d9db5b3b80cd6b7bb094a0c5dbf9", "filename": "gcc/ada/libgnat/s-os_lib.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Flibgnat%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Flibgnat%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-os_lib.adb?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -2235,8 +2235,9 @@ package body System.OS_Lib is\n       --  and additional fragments up to Max_Path in length in case\n       --  there are any symlinks.\n \n-      Start, Finish : Positive;\n-      Status        : Integer;\n+      Finish : Positive;\n+      Start  : Positive;\n+      Status : Integer;\n \n    --  Start of processing for Normalize_Pathname\n "}, {"sha": "874aa54d0d2a2480150c35ac88bf71059fe09a61", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -1279,11 +1279,11 @@ package body Repinfo is\n             Write_Str (\" .. \");\n          end if;\n \n-         --  Allowing Uint_0 here is an annoying special case. Really\n-         --  this should be a fine Esize value but currently it means\n-         --  unknown, except that we know after gigi has back annotated\n-         --  that a size of zero is real, since otherwise gigi back\n-         --  annotates using No_Uint as the value to indicate unknown.\n+         --  Allowing Uint_0 here is an annoying special case. Really this\n+         --  should be a fine Esize value but currently it means unknown,\n+         --  except that we know after gigi has back annotated that a size\n+         --  of zero is real, since otherwise gigi back annotates using\n+         --  No_Uint as the value to indicate unknown.\n \n          if (Esize (Ent) = Uint_0 or else Known_Static_Esize (Ent))\n            and then Known_Static_Normalized_First_Bit (Ent)\n@@ -1300,11 +1300,10 @@ package body Repinfo is\n                UI_Write (Lbit);\n             end if;\n \n-         --  The test for Esize (Ent) not Uint_0 here is an annoying\n-         --  special case. Officially a value of zero for Esize means\n-         --  unknown, but here we use the fact that we know that gigi\n-         --  annotates Esize with No_Uint, not Uint_0. Really everyone\n-         --  should use No_Uint???\n+         --  The test for Esize (Ent) not Uint_0 here is an annoying special\n+         --  case. Officially a value of zero for Esize means unknown, but\n+         --  here we use the fact that we know that gigi annotates Esize with\n+         --  No_Uint, not Uint_0. Really everyone should use No_Uint???\n \n          elsif List_Representation_Info < 3\n            or else (Esize (Ent) /= Uint_0 and then Unknown_Esize (Ent))\n@@ -1316,8 +1315,8 @@ package body Repinfo is\n          else\n             Write_Val (Esiz, Paren => not List_Representation_Info_To_JSON);\n \n-            --  If in front-end layout mode, then dynamic size is stored\n-            --  in storage units, so renormalize for output.\n+            --  If in front-end layout mode, then dynamic size is stored in\n+            --  storage units, so renormalize for output.\n \n             if not Back_End_Layout then\n                Write_Str (\" * \");\n@@ -1433,7 +1432,6 @@ package body Repinfo is\n          Variant   : Node_Id := Empty;\n          Indent    : Natural := 0)\n       is\n-\n          function Derived_Discriminant (Disc : Entity_Id) return Entity_Id;\n          --  This function assumes that Outer_Ent is an extension of Ent.\n          --  Disc is a discriminant of Ent that does not itself constrain a\n@@ -1445,7 +1443,8 @@ package body Repinfo is\n          ----------------------------\n \n          function Derived_Discriminant (Disc : Entity_Id) return Entity_Id is\n-            Corr_Disc, Derived_Disc : Entity_Id;\n+            Corr_Disc    : Entity_Id;\n+            Derived_Disc : Entity_Id;\n \n          begin\n             Derived_Disc := First_Stored_Discriminant (Outer_Ent);\n@@ -1465,8 +1464,8 @@ package body Repinfo is\n                      Corr_Disc := Corresponding_Discriminant (Corr_Disc);\n                   end loop;\n \n-                  if Original_Record_Component (Corr_Disc)\n-                                             = Original_Record_Component (Disc)\n+                  if Original_Record_Component (Corr_Disc) =\n+                     Original_Record_Component (Disc)\n                   then\n                      return Derived_Disc;\n                   end if;\n@@ -1484,8 +1483,8 @@ package body Repinfo is\n \n          Comp       : Node_Id;\n          Comp_List  : Node_Id;\n-         Var        : Node_Id;\n          First      : Boolean := True;\n+         Var        : Node_Id;\n \n       --  Start of processing for List_Structural_Record_Layout\n \n@@ -1501,12 +1500,15 @@ package body Repinfo is\n          else\n             declare\n                Definition : Node_Id :=\n-                 Type_Definition (Declaration_Node (Ent));\n+                              Type_Definition (Declaration_Node (Ent));\n+\n                Is_Extension : constant Boolean :=\n-                 Is_Tagged_Type (Ent)\n-                   and then\n-                 Nkind (Definition) = N_Derived_Type_Definition;\n-               Disc, Listed_Disc : Entity_Id;\n+                                Is_Tagged_Type (Ent)\n+                                  and then Nkind (Definition) =\n+                                             N_Derived_Type_Definition;\n+\n+               Disc        : Entity_Id;\n+               Listed_Disc : Entity_Id;\n \n             begin\n                --  If this is an extension, first list the layout of the parent"}, {"sha": "871686b661ca5850563d80079fb74aeec39f82aa", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -1299,8 +1299,8 @@ package body Sem_Ch3 is\n          Set_Ekind (T_Name, E_Access_Subprogram_Type);\n       end if;\n \n-      Set_Can_Use_Internal_Rep (T_Name, not Always_Compatible_Rep_On_Target);\n-\n+      Set_Can_Use_Internal_Rep     (T_Name,\n+                                      not Always_Compatible_Rep_On_Target);\n       Set_Etype                    (T_Name, T_Name);\n       Init_Size_Align              (T_Name);\n       Set_Directly_Designated_Type (T_Name, Desig_Type);\n@@ -14631,7 +14631,7 @@ package body Sem_Ch3 is\n \n          --  But it is a real entity, and a birth certificate must be properly\n          --  registered by entering it into the entity list, and setting its\n-         --  scope to the  given subtype. This turns out to be useful for the\n+         --  scope to the given subtype. This turns out to be useful for the\n          --  LLVM code generator, but that scope is not used otherwise.\n \n          Enter_Name (New_Compon);"}, {"sha": "f135bba8770e7a173c950ebd06f97c3a054f1775", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -2221,7 +2221,7 @@ package body Sem_Disp is\n          --  table, but it would be awfully heavy, and there is no way that we\n          --  could reasonably exceed this value.\n \n-         N      : Nat := 0;\n+         N : Nat := 0;\n          --  Number of entries in Result\n \n          Parent_Op : Entity_Id;\n@@ -2246,7 +2246,7 @@ package body Sem_Disp is\n             Result (N) := E;\n          end Store_IS;\n \n-         --  Start of processing for Inherited_Subprograms\n+      --  Start of processing for Inherited_Subprograms\n \n       begin\n          pragma Assert (not (No_Interfaces and Interfaces_Only));\n@@ -2258,18 +2258,15 @@ package body Sem_Disp is\n            and then Is_Dispatching_Operation (S)\n            and then Present (Find_DT (S))\n          then\n-\n             --  Deal with direct inheritance\n \n             if not Interfaces_Only then\n                Parent_Op := S;\n                loop\n                   Parent_Op := Overridden_Operation (Parent_Op);\n                   exit when No (Parent_Op)\n-                    or else\n-                      (No_Interfaces\n-                       and then\n-                       Is_Interface (Find_DT (Parent_Op)));\n+                    or else (No_Interfaces\n+                              and then Is_Interface (Find_DT (Parent_Op)));\n \n                   if Is_Subprogram_Or_Generic_Subprogram (Parent_Op) then\n                      Store_IS (Parent_Op);"}, {"sha": "870682fed1f6c51b4cfed773b72770c4dd8dbdde", "filename": "gcc/ada/sem_disp.ads", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fsem_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fsem_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.ads?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -105,9 +105,8 @@ package Sem_Disp is\n    package Inheritance_Utilities is\n \n       --  This package provides generic versions of inheritance utilities\n-      --  provided here. These versions are used in GNATprove backend to\n-      --  adapt these utilities to GNATprove specific version of visibility of\n-      --  types.\n+      --  provided here. These versions are used in GNATprove backend to adapt\n+      --  these utilities to GNATprove specific version of visibility of types.\n \n       function Inherited_Subprograms\n         (S               : Entity_Id;"}, {"sha": "7d881a1d10d9acccecf9fae7215bc0068b029f55", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f537fc00c7c21ad07b184aa056df733a4cb87c83/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f537fc00c7c21ad07b184aa056df733a4cb87c83", "patch": "@@ -5164,22 +5164,22 @@ package body Sem_Util is\n       --  Locate the primitive subprograms of the type\n \n       else\n-         --  The primitive operations appear after the base type, except\n-         --  if the derivation happens within the private part of B_Scope\n-         --  and the type is a private type, in which case both the type\n-         --  and some primitive operations may appear before the base\n-         --  type, and the list of candidates starts after the type.\n+         --  The primitive operations appear after the base type, except if the\n+         --  derivation happens within the private part of B_Scope and the type\n+         --  is a private type, in which case both the type and some primitive\n+         --  operations may appear before the base type, and the list of\n+         --  candidates starts after the type.\n \n          if In_Open_Scopes (B_Scope)\n            and then Scope (T) = B_Scope\n            and then In_Private_Part (B_Scope)\n          then\n             Id := Next_Entity (T);\n \n-         --  In Ada 2012, If the type has an incomplete partial view, there\n-         --  may be primitive operations declared before the full view, so\n-         --  we need to start scanning from the incomplete view, which is\n-         --  earlier on the entity chain.\n+         --  In Ada 2012, If the type has an incomplete partial view, there may\n+         --  be primitive operations declared before the full view, so we need\n+         --  to start scanning from the incomplete view, which is earlier on\n+         --  the entity chain.\n \n          elsif Nkind (Parent (B_Type)) = N_Full_Type_Declaration\n            and then Present (Incomplete_View (Parent (B_Type)))"}]}