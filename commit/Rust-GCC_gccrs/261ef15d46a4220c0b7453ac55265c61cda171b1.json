{"sha": "261ef15d46a4220c0b7453ac55265c61cda171b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYxZWYxNWQ0NmE0MjIwYzBiNzQ1M2FjNTUyNjVjNjFjZGExNzFiMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-06-04T07:37:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-06-04T07:37:56Z"}, "message": "re PR tree-optimization/69615 (0 to limit signed range checks don't always use unsigned compare)\n\n\tPR tree-optimization/69615\n\t* fold-const.c (merge_ranges): If range1 is - [x, x] and x is the\n\tmaximum or minimum of the type, try to merge it also as if\n\trange1 is + [-, x - 1] or + [x + 1, -].\n\n\t* gcc.dg/pr69615.c: New test.\n\nFrom-SVN: r261139", "tree": {"sha": "32e5e1d6f447d3cd145d1d5bc36670f50dbfcc38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32e5e1d6f447d3cd145d1d5bc36670f50dbfcc38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/261ef15d46a4220c0b7453ac55265c61cda171b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261ef15d46a4220c0b7453ac55265c61cda171b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261ef15d46a4220c0b7453ac55265c61cda171b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261ef15d46a4220c0b7453ac55265c61cda171b1/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20b11fd41a51d669eec3601571e21e0081f5c5e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b11fd41a51d669eec3601571e21e0081f5c5e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b11fd41a51d669eec3601571e21e0081f5c5e0"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "95c8d7de9b3379b2f83979647d705dcbadcfb51c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261ef15d46a4220c0b7453ac55265c61cda171b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261ef15d46a4220c0b7453ac55265c61cda171b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=261ef15d46a4220c0b7453ac55265c61cda171b1", "patch": "@@ -1,5 +1,10 @@\n 2018-06-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/69615\n+\t* fold-const.c (merge_ranges): If range1 is - [x, x] and x is the\n+\tmaximum or minimum of the type, try to merge it also as if\n+\trange1 is + [-, x - 1] or + [x + 1, -].\n+\n \tPR c++/86025\n \t* tree.c (inchash::add_expr): Handle IDENTIFIER_NODE.\n "}, {"sha": "1e8d79e40221ae93cc06b5896dc9312926917acf", "filename": "gcc/fold-const.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261ef15d46a4220c0b7453ac55265c61cda171b1/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261ef15d46a4220c0b7453ac55265c61cda171b1/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=261ef15d46a4220c0b7453ac55265c61cda171b1", "patch": "@@ -5084,6 +5084,29 @@ merge_ranges (int *pin_p, tree *plow, tree *phigh, int in0_p, tree low0,\n       tem = high0, high0 = high1, high1 = tem;\n     }\n \n+  /* If the second range is != high1 where high1 is the type maximum of\n+     the type, try first merging with < high1 range.  */\n+  if (low1\n+      && high1\n+      && TREE_CODE (low1) == INTEGER_CST\n+      && (TREE_CODE (TREE_TYPE (low1)) == INTEGER_TYPE\n+\t  || (TREE_CODE (TREE_TYPE (low1)) == ENUMERAL_TYPE\n+\t      && known_eq (TYPE_PRECISION (TREE_TYPE (low1)),\n+\t\t\t   GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (low1))))))\n+      && operand_equal_p (low1, high1, 0))\n+    {\n+      if (tree_int_cst_equal (low1, TYPE_MAX_VALUE (TREE_TYPE (low1)))\n+\t  && merge_ranges (pin_p, plow, phigh, in0_p, low0, high0,\n+\t\t\t   !in1_p, NULL_TREE, range_predecessor (low1)))\n+\treturn true;\n+      /* Similarly for the second range != low1 where low1 is the type minimum\n+\t of the type, try first merging with > low1 range.  */\n+      if (tree_int_cst_equal (low1, TYPE_MIN_VALUE (TREE_TYPE (low1)))\n+\t  && merge_ranges (pin_p, plow, phigh, in0_p, low0, high0,\n+\t\t\t   !in1_p, range_successor (low1), NULL_TREE))\n+\treturn true;\n+    }\n+\n   /* Now flag two cases, whether the ranges are disjoint or whether the\n      second range is totally subsumed in the first.  Note that the tests\n      below are simplified by the ones above.  */"}, {"sha": "f889ebb5cdea8465c1e83db15b06336a4a5697dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261ef15d46a4220c0b7453ac55265c61cda171b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261ef15d46a4220c0b7453ac55265c61cda171b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=261ef15d46a4220c0b7453ac55265c61cda171b1", "patch": "@@ -1,5 +1,8 @@\n 2018-06-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/69615\n+\t* gcc.dg/pr69615.c: New test.\n+\n \tPR c++/86025\n \t* c-c++-common/gomp/pr86025.c: New test.\n "}, {"sha": "43ecf6bd05d785daaa9271f13102fa039ca7ce21", "filename": "gcc/testsuite/gcc.dg/pr69615.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261ef15d46a4220c0b7453ac55265c61cda171b1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69615.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261ef15d46a4220c0b7453ac55265c61cda171b1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69615.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69615.c?ref=261ef15d46a4220c0b7453ac55265c61cda171b1", "patch": "@@ -0,0 +1,37 @@\n+/* PR tree-optimization/69615 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \" >= 0\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" < 0\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" <= 23\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" > 23\" \"optimized\" } } */\n+\n+extern void foo (void);\n+\n+void\n+f1 (int x)\n+{\n+  if (x >= 0 && x <= __INT_MAX__ - 1)\n+    foo ();\n+}\n+\n+void\n+f2 (int x, int y)\n+{\n+  if (x >= 0 && y && x <= __INT_MAX__ - 1)\n+    foo ();\n+}\n+\n+void\n+f3 (int x)\n+{\n+  if (x > -__INT_MAX__ - 1 && x <= 23)\n+    foo ();\n+}\n+\n+void\n+f4 (int x, int y)\n+{\n+  if (x > -__INT_MAX__ - 1 && y && x <= 23)\n+    foo ();\n+}"}]}