{"sha": "e952450aab6f37c9b15561033a09589a4870513d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk1MjQ1MGFhYjZmMzdjOWIxNTU2MTAzM2EwOTU4OWE0ODcwNTEzZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-17T15:44:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-17T15:44:04Z"}, "message": "compiler: Don't warn for unknown type when importing anonymous field.\n\nFrom-SVN: r203772", "tree": {"sha": "7cbd67a2bab16dc480954a4ff6aed76fb42f2dd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cbd67a2bab16dc480954a4ff6aed76fb42f2dd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e952450aab6f37c9b15561033a09589a4870513d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e952450aab6f37c9b15561033a09589a4870513d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e952450aab6f37c9b15561033a09589a4870513d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e952450aab6f37c9b15561033a09589a4870513d/comments", "author": null, "committer": null, "parents": [{"sha": "2ed3eba129b1d094aca2565fdb49a7fdd5416d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ed3eba129b1d094aca2565fdb49a7fdd5416d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ed3eba129b1d094aca2565fdb49a7fdd5416d8f"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "395882017dc8b9b197c406ccc4b62a92ccf56a0e", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e952450aab6f37c9b15561033a09589a4870513d/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e952450aab6f37c9b15561033a09589a4870513d/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=e952450aab6f37c9b15561033a09589a4870513d", "patch": "@@ -5263,11 +5263,25 @@ Struct_type::do_import(Import* imp)\n \t  // that an embedded builtin type is accessible from another\n \t  // package (we know that all the builtin types are not\n \t  // exported).\n-\t  if (name.empty() && ftype->deref()->named_type() != NULL)\n+\t  // This is called during parsing, before anything is\n+\t  // lowered, so we have to be careful to avoid dereferencing\n+\t  // an unknown type name.\n+\t  if (name.empty())\n \t    {\n-\t      const std::string fn(ftype->deref()->named_type()->name());\n-\t      if (fn[0] >= 'a' && fn[0] <= 'z')\n-\t\tname = '.' + imp->package()->pkgpath() + '.' + fn;\n+\t      Type *t = ftype;\n+\t      if (t->classification() == Type::TYPE_POINTER)\n+\t\t{\n+\t\t  // Very ugly.\n+\t\t  Pointer_type* ptype = static_cast<Pointer_type*>(t);\n+\t\t  t = ptype->points_to();\n+\t\t}\n+\t      std::string tname;\n+\t      if (t->forward_declaration_type() != NULL)\n+\t\ttname = t->forward_declaration_type()->name();\n+\t      else if (t->named_type() != NULL)\n+\t\ttname = t->named_type()->name();\n+\t      if (!tname.empty() && tname[0] >= 'a' && tname[0] <= 'z')\n+\t\tname = '.' + imp->package()->pkgpath() + '.' + tname;\n \t    }\n \n \t  Struct_field sf(Typed_identifier(name, ftype, imp->location()));"}]}