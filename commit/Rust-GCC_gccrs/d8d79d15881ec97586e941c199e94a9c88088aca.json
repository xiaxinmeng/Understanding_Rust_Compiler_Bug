{"sha": "d8d79d15881ec97586e941c199e94a9c88088aca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhkNzlkMTU4ODFlYzk3NTg2ZTk0MWMxOTllOTRhOWM4ODA4OGFjYQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "1999-10-26T17:44:42Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "1999-10-26T17:44:42Z"}, "message": "* output.h: Don't unnecessarily conditionalize prototypes on TREE_CODE.\n\nFrom-SVN: r30195", "tree": {"sha": "f0c03e3e4e6f97548a830828161fd2faf1307841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0c03e3e4e6f97548a830828161fd2faf1307841"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8d79d15881ec97586e941c199e94a9c88088aca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d79d15881ec97586e941c199e94a9c88088aca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d79d15881ec97586e941c199e94a9c88088aca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d79d15881ec97586e941c199e94a9c88088aca/comments", "author": null, "committer": null, "parents": [{"sha": "67e61fe7f39ac4eaeadf7bd5273e0ea128eceff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e61fe7f39ac4eaeadf7bd5273e0ea128eceff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67e61fe7f39ac4eaeadf7bd5273e0ea128eceff3"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "9baf2f178cb5abfcd7fc5de74be59a051b627ce0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d79d15881ec97586e941c199e94a9c88088aca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d79d15881ec97586e941c199e94a9c88088aca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8d79d15881ec97586e941c199e94a9c88088aca", "patch": "@@ -1,3 +1,7 @@\n+Tue Oct 26 18:35:25 1999  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* output.h: Don't unnecessarily conditionalize prototypes on TREE_CODE.\n+\n Tue Oct 26 15:42:56 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* reload.c (find_reloads): Compute mode and nregs fields of all"}, {"sha": "2fb6ae4e12325cf8ef74dc8962172811baf220fc", "filename": "gcc/output.h", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d79d15881ec97586e941c199e94a9c88088aca/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d79d15881ec97586e941c199e94a9c88088aca/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=d8d79d15881ec97586e941c199e94a9c88088aca", "patch": "@@ -229,21 +229,6 @@ extern void assemble_alias\t\tPROTO((tree, tree));\n    for an `asm' keyword used between functions.  */\n extern void assemble_asm\t\tPROTO((tree));\n \n-/* Record an element in the table of global destructors.\n-   How this is done depends on what sort of assembler and linker\n-   are in use.\n-\n-   NAME should be the name of a global function to be called\n-   at exit time.  This name is output using assemble_name.  */\n-extern void assemble_destructor\t\tPROTO((char *));\n-\n-/* Likewise for global constructors.  */\n-extern void assemble_constructor\tPROTO((char *));\n-\n-/* Likewise for entries we want to record for garbage collection.\n-   Garbage collection is still under development.  */\n-extern void assemble_gc_entry\t\tPROTO((char *));\n-\n /* Output assembler code for the constant pool of a function and associated\n    with defining the name of the function.  DECL describes the function.\n    NAME is the function's name.  For the constant pool, we use the current\n@@ -254,14 +239,6 @@ extern void assemble_start_function\tPROTO((tree, char *));\n    function.  DECL describes the function.  NAME is the function's name.  */\n extern void assemble_end_function\tPROTO((tree, char *));\n \n-/* Assemble code to leave SIZE bytes of zeros.  */\n-extern void assemble_zeros\t\tPROTO((int));\n-\n-/* Assemble an alignment pseudo op for an ALIGN-bit boundary.  */\n-extern void assemble_align\t\tPROTO((int));\n-\n-/* Assemble a string constant with the specified C string as contents.  */\n-extern void assemble_string\t\tPROTO((const char *, int));\n /* Assemble everything that is needed for a variable or function declaration.\n    Not used for automatic variables, and not used for function definitions.\n    Should not be called for variables of incomplete structure type.\n@@ -279,6 +256,30 @@ extern void assemble_variable\t\tPROTO((tree, int, int, int));\n extern void assemble_external\t\tPROTO((tree));\n #endif /* TREE_CODE */\n \n+/* Record an element in the table of global destructors.\n+   How this is done depends on what sort of assembler and linker\n+   are in use.\n+\n+   NAME should be the name of a global function to be called\n+   at exit time.  This name is output using assemble_name.  */\n+extern void assemble_destructor\t\tPROTO((char *));\n+\n+/* Likewise for global constructors.  */\n+extern void assemble_constructor\tPROTO((char *));\n+\n+/* Likewise for entries we want to record for garbage collection.\n+   Garbage collection is still under development.  */\n+extern void assemble_gc_entry\t\tPROTO((char *));\n+\n+/* Assemble code to leave SIZE bytes of zeros.  */\n+extern void assemble_zeros\t\tPROTO((int));\n+\n+/* Assemble an alignment pseudo op for an ALIGN-bit boundary.  */\n+extern void assemble_align\t\tPROTO((int));\n+\n+/* Assemble a string constant with the specified C string as contents.  */\n+extern void assemble_string\t\tPROTO((const char *, int));\n+\n #ifdef RTX_CODE\n /* Similar, for calling a library function FUN.  */\n extern void assemble_external_libcall\tPROTO((rtx));"}]}