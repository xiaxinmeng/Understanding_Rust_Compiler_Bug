{"sha": "644638bc02e9875d61844d38832c1d534a8f05fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ0NjM4YmMwMmU5ODc1ZDYxODQ0ZDM4ODMyYzFkNTM0YThmMDVmYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-26T20:22:01Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-26T20:22:01Z"}, "message": "[multiple changes]\n\n\n2000-06-13  Brent Verner <brent@rcfile.org>\n\n\t* bits/string.tcc (string::rfind): Fix.\n\t* testsuite/21_strings/rfind.cc: New file.\n\n2000-06-26  Anthony Williams  <anthony@anthonyw.cjb.net>\n\n\t* testsuite/21_strings/ctor_copy_dtor.cc: Fixed logic error.\n\n2000-06-26  Branko Cibej  <branko.cibej@hermes.si>\n\n        * testsuite/27_io/filebuf_members.cc (test_01): Fixed typos.\n\n        * mkcheck.in: Make the *.txt and *.tst files writable after\n\t  copying them to $TEST_DIR.\n\n        * testsuite/27_io/ostream_inserter_arith.cc: Renamed\n          __TEST_NUMPUT_VERBOSE to TEST_NUMPUT_VERBOSE.\n        Define TEST_NUMPUT_VERBOSE only if DEBUG_ASSERT.\n\nFrom-SVN: r34719", "tree": {"sha": "3c84540d40359c04272384d387191f13feb0cae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c84540d40359c04272384d387191f13feb0cae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/644638bc02e9875d61844d38832c1d534a8f05fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/644638bc02e9875d61844d38832c1d534a8f05fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/644638bc02e9875d61844d38832c1d534a8f05fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/644638bc02e9875d61844d38832c1d534a8f05fa/comments", "author": null, "committer": null, "parents": [{"sha": "913c27bf984f7d033c14d8f12780c7b5a3d52c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/913c27bf984f7d033c14d8f12780c7b5a3d52c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/913c27bf984f7d033c14d8f12780c7b5a3d52c77"}], "stats": {"total": 65, "additions": 42, "deletions": 23}, "files": [{"sha": "a5c10cef47fa44b89dc4eb582ac2afb18c6c3603", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644638bc02e9875d61844d38832c1d534a8f05fa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644638bc02e9875d61844d38832c1d534a8f05fa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=644638bc02e9875d61844d38832c1d534a8f05fa", "patch": "@@ -1,8 +1,23 @@\n+2000-06-13  Brent Verner <brent@rcfile.org>\n+\n+\t* bits/string.tcc (string::rfind): Fix.\n+\t* testsuite/21_strings/rfind.cc: New file.\n+\t\n+2000-06-26  Anthony Williams  <anthony@anthonyw.cjb.net>\n+\n+\t* testsuite/21_strings/ctor_copy_dtor.cc: Fixed logic error.\n+\t\n 2000-06-26  Branko Cibej  <branko.cibej@hermes.si>\n \n-\t* mkcheck.in:  Make the *.txt and *.tst files writable\n-\t  after copying them to $TEST_DIR.\n+        * testsuite/27_io/filebuf_members.cc (test_01): Fixed typos.\n+\n+        * mkcheck.in: Make the *.txt and *.tst files writable after\n+\t  copying them to $TEST_DIR.\n \n+        * testsuite/27_io/ostream_inserter_arith.cc: Renamed\n+          __TEST_NUMPUT_VERBOSE to TEST_NUMPUT_VERBOSE.\n+        Define TEST_NUMPUT_VERBOSE only if DEBUG_ASSERT.\n+\t\n 2000-06-23  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* bits/fstream.tcc (basic_filebuf::basic_filebuf(fd)): Use it."}, {"sha": "85179513548b70d0c554e0018ae2c40cfd188786", "filename": "libstdc++-v3/bits/string.tcc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644638bc02e9875d61844d38832c1d534a8f05fa/libstdc%2B%2B-v3%2Fbits%2Fstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644638bc02e9875d61844d38832c1d534a8f05fa/libstdc%2B%2B-v3%2Fbits%2Fstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstring.tcc?ref=644638bc02e9875d61844d38832c1d534a8f05fa", "patch": "@@ -634,14 +634,14 @@ namespace std\n       size_type __size = this->size();\n       if (__n <= __size)\n \t{\n-\t  size_t __xpos = __size - __n;\n-\t  if (__xpos > __pos)\n-\t    __xpos = __pos;\n-      \n-\t  for (++__xpos; __xpos-- > 0; )\n-\t    if (traits_type::eq(_M_data()[__xpos], *__s)\n-\t\t&& traits_type::compare(_M_data() + __xpos, __s, __n) == 0)\n-\t      return __xpos;\n+\t  __pos = std::min(__size - __n ,__pos);\n+\t  const _CharT* __data = _M_data();\n+\t  do \n+\t    {\n+\t      if (traits_type::compare(__data + __pos, __s, __n) == 0)\n+\t\treturn __pos;\n+\t    } \n+\t  while (__pos-- > 0);\n \t}\n       return npos;\n     }"}, {"sha": "24edff4ec9de72b291f2214df9ad8dfadcb5d0c8", "filename": "libstdc++-v3/testsuite/21_strings/ctor_copy_dtor.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644638bc02e9875d61844d38832c1d534a8f05fa/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644638bc02e9875d61844d38832c1d534a8f05fa/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fctor_copy_dtor.cc?ref=644638bc02e9875d61844d38832c1d534a8f05fa", "patch": "@@ -1,6 +1,6 @@\n // 1999-06-04 bkoz\n \n-// Copyright (C) 1999 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -79,8 +79,9 @@ int test01(void)\n \n   // NB: As strlen(str_lit01) != csz01, this test is undefined. It\n   // should not crash, but what gets constructed is a bit arbitrary.\n+  // The \"maverick's\" of all string objects.\n   try {\n-    std::string str04(str_lit01, npos); // the \"maverick's\" of all string objects.\n+    std::string str04(str_lit01, npos); \n     test &= true;\n   }\t\t \n   catch(std::length_error& fail) {\n@@ -90,9 +91,10 @@ int test01(void)\n     test &= false;\n   }\n \n+  // Build a maxsize-1 lengthed string consisting of all A's\n   try {\n-    std::string str03(str_lit01, csz01 - 1);\n-    test &= str03.size() != 0;\n+    std::string str03(csz01 - 1, 'A');\n+    test &= str03.size() == csz01 - 1;\n     test &= str03.size() <= str03.capacity();\n   }\t\t \n   // NB: bad_alloc is regrettable but entirely kosher for"}, {"sha": "5057074529bb2c8fa9297bd0a936caeb5e9ad6c4", "filename": "libstdc++-v3/testsuite/27_io/filebuf_members.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644638bc02e9875d61844d38832c1d534a8f05fa/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644638bc02e9875d61844d38832c1d534a8f05fa/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc?ref=644638bc02e9875d61844d38832c1d534a8f05fa", "patch": "@@ -47,7 +47,7 @@ test_01()\n   int close_num;\n \n   // read (ext)\n-  int fd = open(name01, O_RDONLY);\n+  int fd = open(name_01, O_RDONLY);\n   test &= fd >= 0;\n \n   {\n@@ -59,11 +59,11 @@ test_01()\n \n \n   // read (standard)\n-  FILE* f = fopen(name01, \"r\");\n+  FILE* f = fopen(name_01, \"r\");\n   test &= !f;\n \n   {\n-    std::ifstream ifstream1(name02);\n+    std::ifstream ifstream1(name_01);\n     test &= ifstream1.is_open();\n     std::ios_base::iostate st01 = ifstream1.rdstate();\n     test &= st01 == std::ios_base::goodbit;"}, {"sha": "88ec5e4818133b2ceb2ca68191ad6fde106e4e76", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_arith.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644638bc02e9875d61844d38832c1d534a8f05fa/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644638bc02e9875d61844d38832c1d534a8f05fa/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc?ref=644638bc02e9875d61844d38832c1d534a8f05fa", "patch": "@@ -28,7 +28,9 @@\n \n using namespace std;\n \n-#define __TEST_NUMPUT_VERBOSE 1\n+#ifndef DEBUG_ASSERT\n+#  define TEST_NUMPUT_VERBOSE 1\n+#endif\n \n struct _TestCase\n {\n@@ -190,7 +192,7 @@ void test01()\n   for (int j=0; j<sizeof(testcases)/sizeof(testcases[0]); j++)\n     {\n       _TestCase & tc = testcases[j];\n-#ifdef __TEST_NUMPUT_VERBOSE\n+#ifdef TEST_NUMPUT_VERBOSE\n       cout << \"expect: \" << tc.result << endl;\n #endif\n       // test double with char type\n@@ -201,7 +203,7 @@ void test01()\n         os.imbue(__loc);\n         apply_formatting(tc, os);\n         os << tc.val;\n-#ifdef __TEST_NUMPUT_VERBOSE\n+#ifdef TEST_NUMPUT_VERBOSE\n         cout << \"result: \" << os.str() << endl;\n #endif\n         assert(os && os.str() == tc.result);\n@@ -214,7 +216,7 @@ void test01()\n         os.imbue(__loc);\n         apply_formatting(tc, os);\n         os << (long double)tc.val;\n-#ifdef __TEST_NUMPUT_VERBOSE\n+#ifdef TEST_NUMPUT_VERBOSE\n         cout << \"result: \" << os.str() << endl;\n #endif\n         assert(os && os.str() == tc.result);\n@@ -257,7 +259,7 @@ void test02()\n \n   char largebuf[512];\n   sprintf(largebuf, \"%.*Le\", prec, val);\n-#ifdef __TEST_NUMPUT_VERBOSE\n+#ifdef TEST_NUMPUT_VERBOSE\n   cout << \"expect: \" << largebuf << endl;\n   cout << \"result: \" << os.str() << endl;\n #endif\n@@ -298,7 +300,7 @@ int main()\n {\n   test01();\n   test02();\n-#ifdef __TEST_NUMPUT_VERBOSE\n+#ifdef TEST_NUMPUT_VERBOSE\n   cout << \"Test passed!\" << endl;\n #endif\n   return 0;"}]}