{"sha": "0cd0559e8ceb1764a41c8964f30a7de025956e8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkMDU1OWU4Y2ViMTc2NGE0MWM4OTY0ZjMwYTdkZTAyNTk1NmU4YQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-08-27T19:17:45Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-08-27T19:17:45Z"}, "message": "re PR fortran/33197 (Fortran 2008: math functions)\n\ngcc/fortran/\n2010-08-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/33197\n        * gcc/fortran/intrinsic.c (add_functions): Add norm2 and parity.\n        * gcc/fortran/intrinsic.h (gfc_check_norm2, gfc_check_parity):\n        gfc_simplify_norm2, gfc_simplify_parity, gfc_resolve_norm2,\n        gfc_resolve_parity): New prototypes.\n        * gcc/fortran/gfortran.h (gfc_isym_id): New enum items\n        GFC_ISYM_NORM2 and GFC_ISYM_PARITY.\n        * gcc/fortran/iresolve.c (gfc_resolve_norm2,\n        gfc_resolve_parity): New functions.\n        * gcc/fortran/check.c (gfc_check_norm2, gfc_check_parity):\n        New functions.\n        * gcc/fortran/trans-intrinsic.c (gfc_conv_intrinsic_arith,\n        gfc_conv_intrinsic_function): Handle NORM2 and PARITY.\n        * gcc/fortran/intrinsic.texi (NORM2, PARITY): Add.\n        * gcc/fortran/simplify.c (simplify_transformation_to_array):\n        Add post-processing opterator.\n        (gfc_simplify_all, gfc_simplify_any, gfc_simplify_count,\n        gfc_simplify_product, gfc_simplify_sum): Update call.\n        (add_squared, do_sqrt, gfc_simplify_norm2, do_xor,\n        gfc_simplify_parity): New functions.\n\ngcc/testsuite/\n2010-08-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/33197\n        * gcc/testsuite/gfortran.dg/norm2_1.f90: New.\n        * gcc/testsuite/gfortran.dg/norm2_2.f90: New.\n        * gcc/testsuite/gfortran.dg/norm2_3.f90: New.\n        * gcc/testsuite/gfortran.dg/norm2_4.f90: New.\n        * gcc/testsuite/gfortran.dg/parity_1.f90: New.\n        * gcc/testsuite/gfortran.dg/parity_2.f90: New.\n        * gcc/testsuite/gfortran.dg/parity_3.f90: New.\n\nlibgfortran/\n2010-08-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/33197\n        * libgfortran/m4/ifunction.m4 (FINISH_ARRAY_FUNCTION,\n        ARRAY_FUNCTION): Allow expression after loop.\n        * libgfortran/m4/norm2.m4: New for _gfortran_norm2_r{4,8,10,16}.\n        * libgfortran/m4/parity.m4: New for\n        * _gfortran_parity_l{1,2,4,8,16}.\n        * libgfortran/gfortran.map: Add new functions.\n        * libgfortran/Makefile.am: Ditto.\n        * libgfortran/m4/minloc1.m4: Add empty argument for\n        * ARRAY_FUNCTION.\n        * libgfortran/m4/maxloc1.m4: Ditto.\n        * libgfortran/m4/all.m4: Ditto.\n        * libgfortran/m4/minval.m4: Ditto.\n        * libgfortran/m4/maxval.m4: Ditto.\n        * libgfortran/m4/count.m4: Ditto.\n        * libgfortran/m4/product.m4: Ditto.\n        * libgfortran/m4/any.m4: Ditto.\n        * Makefile.in: Regenerated.\n        * generated/minval_r8.c: Regenerated.\n        * generated/maxloc1_4_r8.c: Regenerated.\n        * generated/minloc1_16_r16.c: Regenerated.\n        * generated/norm2_r4.c: Regenerated.\n        * generated/sum_i8.c: Regenerated.\n        * generated/parity_l2.c: Regenerated.\n        * generated/any_l16.c: Regenerated.\n        * generated/maxval_i2.c: Regenerated.\n        * generated/any_l2.c: Regenerated.\n        * generated/product_r4.c: Regenerated.\n        * generated/maxloc1_8_i4.c: Regenerated.\n        * generated/parity_l16.c: Regenerated.\n        * generated/all_l1.c: Regenerated.\n        * generated/product_i2.c: Regenerated.\n        * generated/minloc1_8_r16.c: Regenerated.\n        * generated/maxloc1_8_r16.c: Regenerated.\n        * generated/sum_r16.c: Regenerated.\n        * generated/sum_i1.c: Regenerated.\n        * generated/minloc1_4_r8.c: Regenerated.\n        * generated/maxloc1_16_r16.c: Regenerated.\n        * generated/minloc1_16_i4.c: Regenerated.\n        * generated/maxloc1_16_i4.c: Regenerated.\n        * generated/maxval_r16.c: Regenerated.\n        * generated/product_c10.c: Regenerated.\n        * generated/minloc1_8_i4.c: Regenerated.\n        * generated/all_l2.c: Regenerated.\n        * generated/product_c4.c: Regenerated.\n        * generated/sum_r4.c: Regenerated.\n        * generated/all_l16.c: Regenerated.\n        * generated/minloc1_16_r10.c: Regenerated.\n        * generated/sum_i2.c: Regenerated.\n        * generated/maxloc1_8_r8.c: Regenerated.\n        * generated/minval_i16.c: Regenerated.\n        * generated/parity_l4.c: Regenerated.\n        * generated/maxval_i4.c: Regenerated.\n        * generated/any_l4.c: Regenerated.\n        * generated/minval_i8.c: Regenerated.\n        * generated/maxloc1_4_i8.c: Regenerated.\n        * generated/minloc1_4_i16.c: Regenerated.\n        * generated/maxloc1_4_i16.c: Regenerated.\n        * generated/minloc1_8_r10.c: Regenerated.\n        * generated/product_i4.c: Regenerated.\n        * generated/maxloc1_8_r10.c: Regenerated.\n        * generated/sum_c16.c: Regenerated.\n        * generated/minloc1_16_r8.c: Regenerated.\n        * generated/maxloc1_16_r8.c: Regenerated.\n        * generated/count_4_l.c: Regenerated.\n        * generated/sum_r10.c: Regenerated.\n        * generated/count_8_l.c: Regenerated.\n        * generated/sum_c4.c: Regenerated.\n        * generated/maxloc1_16_r10.c: Regenerated.\n        * generated/minloc1_8_r8.c: Regenerated.\n        * generated/maxval_r10.c: Regenerated.\n        * generated/minval_i1.c: Regenerated.\n        * generated/maxloc1_4_i1.c: Regenerated.\n        * generated/minloc1_4_i8.c: Regenerated.\n        * generated/product_i16.c: Regenerated.\n        * generated/all_l4.c: Regenerated.\n        * generated/norm2_r16.c: Regenerated.\n        * generated/minval_r4.c: Regenerated.\n        * generated/maxloc1_4_r4.c: Regenerated.\n        * generated/sum_i4.c: Regenerated.\n        * generated/maxval_r8.c: Regenerated.\n        * generated/norm2_r8.c: Regenerated.\n        * generated/minloc1_4_i1.c: Regenerated.\n        * generated/minval_r16.c: Regenerated.\n        * generated/minval_i2.c: Regenerated.\n        * generated/maxloc1_4_i2.c: Regenerated.\n        * generated/product_r8.c: Regenerated.\n        * generated/maxloc1_8_i8.c: Regenerated.\n        * generated/sum_c10.c: Regenerated.\n        * generated/minloc1_4_r16.c: Regenerated.\n        * generated/maxloc1_4_r16.c: Regenerated.\n        * generated/count_1_l.c: Regenerated.\n        * generated/minloc1_4_r4.c: Regenerated.\n        * generated/minloc1_16_i8.c: Regenerated.\n        * generated/maxloc1_16_i8.c: Regenerated.\n        * generated/minloc1_4_i2.c: Regenerated.\n        * generated/maxloc1_8_i1.c: Regenerated.\n        * generated/minloc1_8_i8.c: Regenerated.\n        * generated/product_r16.c: Regenerated.\n        * generated/product_c8.c: Regenerated.\n        * generated/sum_r8.c: Regenerated.\n        * generated/norm2_r10.c: Regenerated.\n        * generated/minloc1_16_i16.c: Regenerated.\n        * generated/maxloc1_8_r4.c: Regenerated.\n        * generated/minloc1_16_i1.c: Regenerated.\n        * generated/maxloc1_16_i1.c: Regenerated.\n        * generated/minval_r10.c: Regenerated.\n        * generated/count_16_l.c: Regenerated.\n        * generated/parity_l8.c: Regenerated.\n        * generated/minloc1_8_i1.c: Regenerated.\n        * generated/minval_i4.c: Regenerated.\n        * generated/maxloc1_4_i4.c: Regenerated.\n        * generated/maxloc1_8_i2.c: Regenerated.\n        * generated/maxval_i8.c: Regenerated.\n        * generated/any_l8.c: Regenerated.\n        * generated/minloc1_4_r10.c: Regenerated.\n        * generated/minloc1_8_i16.c: Regenerated.\n        * generated/maxloc1_4_r10.c: Regenerated.\n        * generated/maxloc1_8_i16.c: Regenerated.\n        * generated/minloc1_16_r4.c: Regenerated.\n        * generated/maxloc1_16_r4.c: Regenerated.\n        * generated/product_i8.c: Regenerated.\n        * generated/sum_i16.c: Regenerated.\n        * generated/count_2_l.c: Regenerated.\n        * generated/maxloc1_16_i16.c: Regenerated.\n        * generated/minloc1_8_r4.c: Regenerated.\n        * generated/sum_c8.c: Regenerated.\n        * generated/minloc1_16_i2.c: Regenerated.\n        * generated/maxloc1_16_i2.c: Regenerated.\n        * generated/parity_l1.c: Regenerated.\n        * generated/maxval_i16.c: Regenerated.\n        * generated/maxval_i1.c: Regenerated.\n        * generated/minloc1_4_i4.c: Regenerated.\n        * generated/any_l1.c: Regenerated.\n        * generated/minloc1_8_i2.c: Regenerated.\n        * generated/product_c16.c: Regenerated.\n        * generated/product_r10.c: Regenerated.\n        * generated/product_i1.c: Regenerated.\n        * generated/all_l8.c: Regenerated.\n        * generated/maxval_r4.c: Regenerated.\n\nFrom-SVN: r163595", "tree": {"sha": "def889db72c25844667547e301395013df023b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/def889db72c25844667547e301395013df023b00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cd0559e8ceb1764a41c8964f30a7de025956e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd0559e8ceb1764a41c8964f30a7de025956e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd0559e8ceb1764a41c8964f30a7de025956e8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd0559e8ceb1764a41c8964f30a7de025956e8a/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cbadd64af4764fe75658a20c229050453379841d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbadd64af4764fe75658a20c229050453379841d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbadd64af4764fe75658a20c229050453379841d"}], "stats": {"total": 3511, "additions": 3230, "deletions": 281}, "files": [{"sha": "ba1ee59c9170b6cd9190b3247d2eafb80aa29a84", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,3 +1,26 @@\n+2010-08-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/33197\n+\t* gcc/fortran/intrinsic.c (add_functions): Add norm2 and parity.\n+\t* gcc/fortran/intrinsic.h (gfc_check_norm2, gfc_check_parity):\n+\tgfc_simplify_norm2, gfc_simplify_parity, gfc_resolve_norm2,\n+\tgfc_resolve_parity): New prototypes.\n+\t* gcc/fortran/gfortran.h (gfc_isym_id): New enum items\n+\tGFC_ISYM_NORM2 and GFC_ISYM_PARITY.\n+\t* gcc/fortran/iresolve.c (gfc_resolve_norm2,\n+\tgfc_resolve_parity): New functions.\n+\t* gcc/fortran/check.c (gfc_check_norm2, gfc_check_parity):\n+\tNew functions.\n+\t* gcc/fortran/trans-intrinsic.c (gfc_conv_intrinsic_arith,\n+\tgfc_conv_intrinsic_function): Handle NORM2 and PARITY.\n+\t* gcc/fortran/intrinsic.texi (NORM2, PARITY): Add.\n+\t* gcc/fortran/simplify.c (simplify_transformation_to_array):\n+\tAdd post-processing opterator.\n+\t(gfc_simplify_all, gfc_simplify_any, gfc_simplify_count,\n+\tgfc_simplify_product, gfc_simplify_sum): Update call.\n+\t(add_squared, do_sqrt, gfc_simplify_norm2, do_xor,\n+\tgfc_simplify_parity): New functions.\n+\n 2010-08-27  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/45420"}, {"sha": "0ff6b6e4cee4b5330dd4ecc14a0603849e136f5f", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -2431,6 +2431,21 @@ gfc_check_new_line (gfc_expr *a)\n }\n \n \n+gfc_try\n+gfc_check_norm2 (gfc_expr *array, gfc_expr *dim)\n+{\n+  if (type_check (array, 0, BT_REAL) == FAILURE)\n+    return FAILURE;\n+\n+  if (array_check (array, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (dim_rank_check (dim, array, false) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n gfc_try\n gfc_check_null (gfc_expr *mold)\n {\n@@ -2539,6 +2554,22 @@ gfc_check_pack (gfc_expr *array, gfc_expr *mask, gfc_expr *vector)\n }\n \n \n+gfc_try\n+gfc_check_parity (gfc_expr *mask, gfc_expr *dim)\n+{\n+  if (type_check (mask, 0, BT_LOGICAL) == FAILURE)\n+    return FAILURE;\n+\n+  if (array_check (mask, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (dim_rank_check (dim, mask, false) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n gfc_try\n gfc_check_precision (gfc_expr *x)\n {"}, {"sha": "0a2f52f9e9ab8dc7f217a875e58b2a451568a254", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -464,11 +464,13 @@ enum gfc_isym_id\n   GFC_ISYM_NEAREST,\n   GFC_ISYM_NEW_LINE,\n   GFC_ISYM_NINT,\n+  GFC_ISYM_NORM2,\n   GFC_ISYM_NOT,\n   GFC_ISYM_NULL,\n   GFC_ISYM_NUMIMAGES,\n   GFC_ISYM_OR,\n   GFC_ISYM_PACK,\n+  GFC_ISYM_PARITY,\n   GFC_ISYM_PERROR,\n   GFC_ISYM_PRECISION,\n   GFC_ISYM_PRESENT,"}, {"sha": "2ce3482e3a1cc4ae1d0bf8a6a1a514ad399a04f7", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -2268,6 +2268,13 @@ add_functions (void)\n \n   make_generic (\"not\", GFC_ISYM_NOT, GFC_STD_F95);\n \n+  add_sym_2 (\"norm2\", GFC_ISYM_NORM2, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_REAL, dr,\n+\t     GFC_STD_F2008, gfc_check_norm2, gfc_simplify_norm2, gfc_resolve_norm2,\n+\t     x, BT_REAL, dr, REQUIRED,\n+\t     dm, BT_INTEGER, ii, OPTIONAL);\n+\n+  make_generic (\"norm2\", GFC_ISYM_NORM2, GFC_STD_F2008);\n+\n   add_sym_1 (\"null\", GFC_ISYM_NULL, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_null, gfc_simplify_null, NULL,\n \t     mo, BT_INTEGER, di, OPTIONAL);\n@@ -2284,6 +2291,14 @@ add_functions (void)\n \n   make_generic (\"pack\", GFC_ISYM_PACK, GFC_STD_F95);\n \n+\n+  add_sym_2 (\"parity\", GFC_ISYM_PARITY, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_LOGICAL, dl,\n+\t     GFC_STD_F2008, gfc_check_parity, gfc_simplify_parity, gfc_resolve_parity,\n+\t     msk, BT_LOGICAL, dl, REQUIRED,\n+\t     dm, BT_INTEGER, ii, OPTIONAL);\n+\n+  make_generic (\"parity\", GFC_ISYM_PARITY, GFC_STD_F2008);\n+\n   add_sym_1 (\"precision\", GFC_ISYM_PRECISION, CLASS_INQUIRY, ACTUAL_NO, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_precision, gfc_simplify_precision, NULL,\n \t     x, BT_UNKNOWN, 0, REQUIRED);"}, {"sha": "2c101d391be6a00f347e7fe6be17a97a54bfb210", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -108,8 +108,10 @@ gfc_try gfc_check_minloc_maxloc (gfc_actual_arglist *);\n gfc_try gfc_check_minval_maxval (gfc_actual_arglist *);\n gfc_try gfc_check_nearest (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_new_line (gfc_expr *);\n+gfc_try gfc_check_norm2 (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_null (gfc_expr *);\n gfc_try gfc_check_pack (gfc_expr *, gfc_expr *, gfc_expr *);\n+gfc_try gfc_check_parity (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_precision (gfc_expr *);\n gfc_try gfc_check_present (gfc_expr *);\n gfc_try gfc_check_product_sum (gfc_actual_arglist *);\n@@ -307,12 +309,14 @@ gfc_expr *gfc_simplify_mvbits (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n gfc_expr *gfc_simplify_nearest (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_new_line (gfc_expr *);\n gfc_expr *gfc_simplify_nint (gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_norm2 (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_null (gfc_expr *);\n gfc_expr *gfc_simplify_num_images (void);\n gfc_expr *gfc_simplify_idnint (gfc_expr *);\n gfc_expr *gfc_simplify_not (gfc_expr *);\n gfc_expr *gfc_simplify_or (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_pack (gfc_expr *, gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_parity (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_precision (gfc_expr *);\n gfc_expr *gfc_simplify_product (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_radix (gfc_expr *);\n@@ -473,9 +477,11 @@ void gfc_resolve_mod (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_modulo (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_nearest (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_nint (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_norm2 (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_not (gfc_expr *, gfc_expr *);\n void gfc_resolve_or (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_pack (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_parity (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_product (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_real (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_realpart (gfc_expr *, gfc_expr *);"}, {"sha": "c4767f5a6eb2bb93ca3bfa72db427a5196650689", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -203,11 +203,13 @@ Some basic guidelines for editing this document:\n * @code{NEAREST}:       NEAREST,   Nearest representable number\n * @code{NEW_LINE}:      NEW_LINE,  New line character\n * @code{NINT}:          NINT,      Nearest whole number\n+* @code{NORM2}:         NORM2,     Euclidean vector norm\n * @code{NOT}:           NOT,       Logical negation\n * @code{NULL}:          NULL,      Function that returns an disassociated pointer\n * @code{NUM_IMAGES}:    NUM_IMAGES, Number of images\n * @code{OR}:            OR,        Bitwise logical OR\n * @code{PACK}:          PACK,      Pack an array into an array of rank one\n+* @code{PARITY}:        PARITY,    Reduction with exclusive OR\n * @code{PERROR}:        PERROR,    Print system error message\n * @code{PRECISION}:     PRECISION, Decimal precision of a real kind\n * @code{PRESENT}:       PRESENT,   Determine whether an optional dummy argument is specified\n@@ -8471,6 +8473,57 @@ end program test_nint\n \n \n \n+@node NORM2\n+@section @code{NORM2} --- Euclidean vector norms\n+@fnindex NORM2\n+@cindex Euclidean vector norm\n+@cindex L2 vector norm\n+@cindex norm, Euclidean\n+\n+@table @asis\n+@item @emph{Description}:\n+Calculates the Euclidean vector norm (@math{L_2}) norm of\n+of @var{ARRAY} along dimension @var{DIM}.\n+\n+@item @emph{Standard}:\n+Fortran 2008 and later\n+\n+@item @emph{Class}:\n+Transformational function\n+\n+@item @emph{Syntax}:\n+@multitable @columnfractions .80\n+@item @code{RESULT = NORM2(ARRAY[, DIM])}\n+@end multitable\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{ARRAY} @tab Shall be an array of type @code{REAL}\n+@item @var{DIM}   @tab (Optional) shall be a scalar of type \n+@code{INTEGER} with a value in the range from 1 to n, where n \n+equals the rank of @var{ARRAY}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The result is of the same type as @var{ARRAY}.\n+\n+If @var{DIM} is absent, a scalar with the square root of the sum of all\n+elements in @var{ARRAY} squared  is returned. Otherwise, an array of\n+rank @math{n-1}, where @math{n} equals the rank of @var{ARRAY}, and a\n+shape similar to that of @var{ARRAY} with dimension @var{DIM} dropped\n+is returned.\n+\n+@item @emph{Example}:\n+@smallexample\n+PROGRAM test_sum\n+  REAL :: x(5) = [ real :: 1, 2, 3, 4, 5 ]\n+  print *, NORM2(x)  ! = sqrt(55.) ~ 7.416\n+END PROGRAM\n+@end smallexample\n+@end table\n+\n+\n+\n @node NOT\n @section @code{NOT} --- Logical negation\n @fnindex NOT\n@@ -8717,6 +8770,58 @@ END PROGRAM\n \n \n \n+@node PARITY\n+@section @code{PARITY} --- Reduction with exclusive OR\n+@fnindex PARITY\n+@cindex Parity\n+@cindex Reduction, XOR\n+@cindex XOR reduction\n+\n+@table @asis\n+@item @emph{Description}:\n+Calculates the partity, i.e. the reduction using @code{.XOR.},\n+of @var{MASK} along dimension @var{DIM}.\n+\n+@item @emph{Standard}:\n+Fortran 2008 and later\n+\n+@item @emph{Class}:\n+Transformational function\n+\n+@item @emph{Syntax}:\n+@multitable @columnfractions .80\n+@item @code{RESULT = PARITY(MASK[, DIM])}\n+@end multitable\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{LOGICAL} @tab Shall be an array of type @code{LOGICAL}\n+@item @var{DIM}   @tab (Optional) shall be a scalar of type \n+@code{INTEGER} with a value in the range from 1 to n, where n \n+equals the rank of @var{MASK}.\n+@end multitable\n+\n+@item @emph{Return value}:\n+The result is of the same type as @var{MASK}.\n+\n+If @var{DIM} is absent, a scalar with the parity of all elements in\n+@var{MASK} is returned, i.e. true if an odd number of elements is\n+@code{.true.} and false otherwise.  If @var{DIM} is present, an array\n+of rank @math{n-1}, where @math{n} equals the rank of @var{ARRAY},\n+and a shape similar to that of @var{MASK} with dimension @var{DIM}\n+dropped is returned.\n+\n+@item @emph{Example}:\n+@smallexample\n+PROGRAM test_sum\n+  LOGICAL :: x(2) = [ .true., .false. ]\n+  print *, PARITY(x) ! prints \"T\" (true).\n+END PROGRAM\n+@end smallexample\n+@end table\n+\n+\n+\n @node PERROR\n @section @code{PERROR} --- Print system error message\n @fnindex PERROR"}, {"sha": "5a187ee455e35a7bdd58ce0da9c895063572c7dd", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1824,6 +1824,23 @@ gfc_resolve_nint (gfc_expr *f, gfc_expr *a, gfc_expr *kind)\n }\n \n \n+void\n+gfc_resolve_norm2 (gfc_expr *f, gfc_expr *array, gfc_expr *dim)\n+{\n+  f->ts = array->ts;\n+\n+  if (dim != NULL)\n+    {\n+      f->rank = array->rank - 1;\n+      f->shape = gfc_copy_shape_excluding (array->shape, array->rank, dim);\n+      gfc_resolve_dim_arg (dim);\n+    }\n+\n+  f->value.function.name\n+    = gfc_get_string (PREFIX (\"norm2_r%d\"), array->ts.kind);\n+}\n+\n+\n void\n gfc_resolve_not (gfc_expr *f, gfc_expr *i)\n {\n@@ -1888,6 +1905,25 @@ gfc_resolve_pack (gfc_expr *f, gfc_expr *array, gfc_expr *mask,\n }\n \n \n+void\n+gfc_resolve_parity (gfc_expr *f, gfc_expr *array, gfc_expr *dim)\n+{\n+  f->ts = array->ts;\n+\n+  if (dim != NULL)\n+    {\n+      f->rank = array->rank - 1;\n+      f->shape = gfc_copy_shape_excluding (array->shape, array->rank, dim);\n+      gfc_resolve_dim_arg (dim);\n+    }\n+\n+  resolve_mask_arg (array);\n+\n+  f->value.function.name\n+    = gfc_get_string (PREFIX (\"parity_l%d\"), array->ts.kind);\n+}\n+\n+\n void\n gfc_resolve_product (gfc_expr *f, gfc_expr *array, gfc_expr *dim,\n \t\t     gfc_expr *mask)"}, {"sha": "98955bb0a3e50fb6d055a0a9fd518bc6460bed94", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 102, "deletions": 8, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -488,11 +488,12 @@ simplify_transformation_to_scalar (gfc_expr *result, gfc_expr *array, gfc_expr *\n      REAL, PARAMETER :: array(n, m) = ...\n      REAL, PARAMETER :: s(n) = PROD(array, DIM=1)\n \n-  where OP == gfc_multiply().  */\n+  where OP == gfc_multiply(). The result might be post processed using post_op. */ \n \n static gfc_expr *\n simplify_transformation_to_array (gfc_expr *result, gfc_expr *array, gfc_expr *dim,\n-\t\t\t\t  gfc_expr *mask, transformational_op op)\n+\t\t\t\t  gfc_expr *mask, transformational_op op,\n+\t\t\t\t  transformational_op post_op)\n {\n   mpz_t size;\n   int done, i, n, arraysize, resultsize, dim_index, dim_extent, dim_stride;\n@@ -606,7 +607,10 @@ simplify_transformation_to_array (gfc_expr *result, gfc_expr *array, gfc_expr *d\n   result_ctor = gfc_constructor_first (result->value.constructor);\n   for (i = 0; i < resultsize; ++i)\n     {\n-      result_ctor->expr = resultvec[i];\n+      if (post_op)\n+\tresult_ctor->expr = post_op (result_ctor->expr, resultvec[i]);\n+      else\n+\tresult_ctor->expr = resultvec[i];\n       result_ctor = gfc_constructor_next (result_ctor);\n     }\n \n@@ -896,7 +900,7 @@ gfc_simplify_all (gfc_expr *mask, gfc_expr *dim)\n \n   return !dim || mask->rank == 1 ?\n     simplify_transformation_to_scalar (result, mask, NULL, gfc_and) :\n-    simplify_transformation_to_array (result, mask, dim, NULL, gfc_and);\n+    simplify_transformation_to_array (result, mask, dim, NULL, gfc_and, NULL);\n }\n \n \n@@ -982,7 +986,7 @@ gfc_simplify_any (gfc_expr *mask, gfc_expr *dim)\n \n   return !dim || mask->rank == 1 ?\n     simplify_transformation_to_scalar (result, mask, NULL, gfc_or) :\n-    simplify_transformation_to_array (result, mask, dim, NULL, gfc_or);\n+    simplify_transformation_to_array (result, mask, dim, NULL, gfc_or, NULL);\n }\n \n \n@@ -1679,7 +1683,7 @@ gfc_simplify_count (gfc_expr *mask, gfc_expr *dim, gfc_expr *kind)\n      Whenever gfc_count is called, '1' is added to the result.  */\n   return !dim || mask->rank == 1 ?\n     simplify_transformation_to_scalar (result, mask, mask, gfc_count) :\n-    simplify_transformation_to_array (result, mask, dim, mask, gfc_count);\n+    simplify_transformation_to_array (result, mask, dim, mask, gfc_count, NULL);\n }\n \n \n@@ -4048,6 +4052,65 @@ gfc_simplify_idnint (gfc_expr *e)\n }\n \n \n+static gfc_expr *\n+add_squared (gfc_expr *result, gfc_expr *e)\n+{\n+  mpfr_t tmp;\n+\n+  gcc_assert (e->ts.type == BT_REAL && e->expr_type == EXPR_CONSTANT);\n+  gcc_assert (result->ts.type == BT_REAL\n+\t      && result->expr_type == EXPR_CONSTANT);\n+\n+  gfc_set_model_kind (result->ts.kind);\n+  mpfr_init (tmp);\n+  mpfr_pow_ui (tmp, e->value.real, 2, GFC_RND_MODE);\n+  mpfr_add (result->value.real, result->value.real, tmp,\n+\t    GFC_RND_MODE);\n+  mpfr_clear (tmp);\n+\n+  return result;\n+}\n+\n+\n+static gfc_expr *\n+do_sqrt (gfc_expr *result, gfc_expr *e)\n+{\n+  gcc_assert (e->ts.type == BT_REAL && e->expr_type == EXPR_CONSTANT);\n+  gcc_assert (result->ts.type == BT_REAL\n+\t      && result->expr_type == EXPR_CONSTANT);\n+\n+  mpfr_set (result->value.real, e->value.real, GFC_RND_MODE);\n+  mpfr_sqrt (result->value.real, result->value.real, GFC_RND_MODE);\n+  return result;\n+}\n+\n+\n+gfc_expr *\n+gfc_simplify_norm2 (gfc_expr *e, gfc_expr *dim)\n+{\n+  gfc_expr *result;\n+\n+  if (!is_constant_array_expr (e)\n+      || (dim != NULL && !gfc_is_constant_expr (dim)))\n+    return NULL;\n+\n+  result = transformational_result (e, dim, e->ts.type, e->ts.kind, &e->where);\n+  init_result_expr (result, 0, NULL);\n+\n+  if (!dim || e->rank == 1)\n+    {\n+      result = simplify_transformation_to_scalar (result, e, NULL,\n+\t\t\t\t\t\t  add_squared);\n+      mpfr_sqrt (result->value.real, result->value.real, GFC_RND_MODE);\n+    }\n+  else\n+    result = simplify_transformation_to_array (result, e, dim, NULL,\n+\t\t\t\t\t       add_squared, &do_sqrt);\n+\n+  return result;\n+}\n+\n+\n gfc_expr *\n gfc_simplify_not (gfc_expr *e)\n {\n@@ -4198,6 +4261,37 @@ gfc_simplify_pack (gfc_expr *array, gfc_expr *mask, gfc_expr *vector)\n }\n \n \n+static gfc_expr *\n+do_xor (gfc_expr *result, gfc_expr *e)\n+{\n+  gcc_assert (e->ts.type == BT_LOGICAL && e->expr_type == EXPR_CONSTANT);\n+  gcc_assert (result->ts.type == BT_LOGICAL\n+\t      && result->expr_type == EXPR_CONSTANT);\n+\n+  result->value.logical = result->value.logical != e->value.logical;\n+  return result;\n+}\n+\n+\n+\n+gfc_expr *\n+gfc_simplify_parity (gfc_expr *e, gfc_expr *dim)\n+{\n+  gfc_expr *result;\n+\n+  if (!is_constant_array_expr (e)\n+      || (dim != NULL && !gfc_is_constant_expr (dim)))\n+    return NULL;\n+\n+  result = transformational_result (e, dim, e->ts.type, e->ts.kind, &e->where);\n+  init_result_expr (result, 0, NULL);\n+\n+  return (!dim || e->rank == 1)\n+    ? simplify_transformation_to_scalar (result, e, NULL, do_xor)\n+    : simplify_transformation_to_array (result, e, dim, NULL, do_xor, NULL);\n+}\n+\n+\n gfc_expr *\n gfc_simplify_precision (gfc_expr *e)\n {\n@@ -4227,7 +4321,7 @@ gfc_simplify_product (gfc_expr *array, gfc_expr *dim, gfc_expr *mask)\n \n   return !dim || array->rank == 1 ?\n     simplify_transformation_to_scalar (result, array, mask, gfc_multiply) :\n-    simplify_transformation_to_array (result, array, dim, mask, gfc_multiply);\n+    simplify_transformation_to_array (result, array, dim, mask, gfc_multiply, NULL);\n }\n \n \n@@ -5390,7 +5484,7 @@ gfc_simplify_sum (gfc_expr *array, gfc_expr *dim, gfc_expr *mask)\n \n   return !dim || array->rank == 1 ?\n     simplify_transformation_to_scalar (result, array, mask, gfc_add) :\n-    simplify_transformation_to_array (result, array, dim, mask, gfc_add);\n+    simplify_transformation_to_array (result, array, dim, mask, gfc_add, NULL);\n }\n \n "}, {"sha": "e0805d09571e32a10252ba0b4d49fce4f4fa0cf0", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 113, "deletions": 10, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1810,9 +1810,11 @@ gfc_conv_intrinsic_count (gfc_se * se, gfc_expr * expr)\n \n /* Inline implementation of the sum and product intrinsics.  */\n static void\n-gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op)\n+gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n+\t\t\t  bool norm2)\n {\n   tree resvar;\n+  tree scale = NULL_TREE;\n   tree type;\n   stmtblock_t body;\n   stmtblock_t block;\n@@ -1835,8 +1837,20 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   type = gfc_typenode_for_spec (&expr->ts);\n   /* Initialize the result.  */\n   resvar = gfc_create_var (type, \"val\");\n-  if (op == PLUS_EXPR)\n+  if (norm2)\n+    {\n+      /* result = 0.0;\n+\t scale = 1.0.  */\n+      scale = gfc_create_var (type, \"scale\");\n+      gfc_add_modify (&se->pre, scale,\n+\t\t      gfc_build_const (type, integer_one_node));\n+      tmp = gfc_build_const (type, integer_zero_node);\n+    }\n+  else if (op == PLUS_EXPR)\n     tmp = gfc_build_const (type, integer_zero_node);\n+  else if (op == NE_EXPR)\n+    /* PARITY.  */\n+    tmp = convert (type, boolean_false_node);\n   else\n     tmp = gfc_build_const (type, integer_one_node);\n \n@@ -1848,9 +1862,16 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   arrayss = gfc_walk_expr (arrayexpr);\n   gcc_assert (arrayss != gfc_ss_terminator);\n \n-  actual = actual->next->next;\n-  gcc_assert (actual);\n-  maskexpr = actual->expr;\n+  if (op == NE_EXPR || norm2)\n+    /* PARITY and NORM2.  */\n+    maskexpr = NULL;\n+  else\n+    {\n+      actual = actual->next->next;\n+      gcc_assert (actual);\n+      maskexpr = actual->expr;\n+    }\n+\n   if (maskexpr && maskexpr->rank != 0)\n     {\n       maskss = gfc_walk_expr (maskexpr);\n@@ -1896,15 +1917,77 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   gfc_conv_expr_val (&arrayse, arrayexpr);\n   gfc_add_block_to_block (&block, &arrayse.pre);\n \n-  tmp = fold_build2 (op, type, resvar, arrayse.expr);\n-  gfc_add_modify (&block, resvar, tmp);\n+  if (norm2)\n+    {\n+      /* if (x(i) != 0.0)\n+\t   {\n+\t     absX = abs(x(i))\n+\t     if (absX > scale)\n+\t       {\n+                 val = scale/absX;\n+\t\t result = 1.0 + result * val * val;\n+\t\t scale = absX;\n+\t       }\n+\t     else\n+\t       {\n+                 val = absX/scale;\n+\t         result += val * val;\n+\t       }\n+\t   }  */\n+      tree res1, res2, cond, absX, val;\n+      stmtblock_t ifblock1, ifblock2, ifblock3;\n+\n+      gfc_init_block (&ifblock1);\n+\n+      absX = gfc_create_var (type, \"absX\");\n+      gfc_add_modify (&ifblock1, absX,\n+\t\t      fold_build1 (ABS_EXPR, type, arrayse.expr));\n+      val = gfc_create_var (type, \"val\");\n+      gfc_add_expr_to_block (&ifblock1, val);\n+\n+      gfc_init_block (&ifblock2);\n+      gfc_add_modify (&ifblock2, val,\n+\t\t      fold_build2 (RDIV_EXPR, type, scale, absX));\n+      res1 = fold_build2 (MULT_EXPR, type, val, val); \n+      res1 = fold_build2 (MULT_EXPR, type, resvar, res1);\n+      res1 = fold_build2 (PLUS_EXPR, type, res1,\n+\t\t\t  gfc_build_const (type, integer_one_node));\n+      gfc_add_modify (&ifblock2, resvar, res1);\n+      gfc_add_modify (&ifblock2, scale, absX);\n+      res1 = gfc_finish_block (&ifblock2); \n+\n+      gfc_init_block (&ifblock3);\n+      gfc_add_modify (&ifblock3, val,\n+\t\t      fold_build2 (RDIV_EXPR, type, absX, scale));\n+      res2 = fold_build2 (MULT_EXPR, type, val, val); \n+      res2 = fold_build2 (PLUS_EXPR, type, resvar, res2);\n+      gfc_add_modify (&ifblock3, resvar, res2);\n+      res2 = gfc_finish_block (&ifblock3);\n+\n+      cond = fold_build2 (GT_EXPR, boolean_type_node, absX, scale);\n+      tmp = build3_v (COND_EXPR, cond, res1, res2);\n+      gfc_add_expr_to_block (&ifblock1, tmp);  \n+      tmp = gfc_finish_block (&ifblock1);\n+\n+      cond = fold_build2 (NE_EXPR, boolean_type_node, arrayse.expr,\n+\t\t\t  gfc_build_const (type, integer_zero_node));\n+\n+      tmp = build3_v (COND_EXPR, cond, tmp, build_empty_stmt (input_location));\n+      gfc_add_expr_to_block (&block, tmp);  \n+    }\n+  else\n+    {\n+      tmp = fold_build2 (op, type, resvar, arrayse.expr);\n+      gfc_add_modify (&block, resvar, tmp);\n+    }\n+\n   gfc_add_block_to_block (&block, &arrayse.post);\n \n   if (maskss)\n     {\n       /* We enclose the above in if (mask) {...} .  */\n-      tmp = gfc_finish_block (&block);\n \n+      tmp = gfc_finish_block (&block);\n       tmp = build3_v (COND_EXPR, maskse.expr, tmp,\n \t\t      build_empty_stmt (input_location));\n     }\n@@ -1937,6 +2020,16 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op)\n \n   gfc_cleanup_loop (&loop);\n \n+  if (norm2)\n+    {\n+      /* result = scale * sqrt(result).  */\n+      tree sqrt;\n+      sqrt = builtin_decl_for_float_kind (BUILT_IN_SQRT, expr->ts.kind);\n+      resvar = build_call_expr_loc (input_location,\n+\t\t\t\t    sqrt, 1, resvar);\n+      resvar = fold_build2 (MULT_EXPR, type, scale, resvar);\n+    }\n+\n   se->expr = resvar;\n }\n \n@@ -5288,6 +5381,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_nearest (se, expr);\n       break;\n \n+    case GFC_ISYM_NORM2:\n+      gfc_conv_intrinsic_arith (se, expr, PLUS_EXPR, true);\n+      break;\n+\n     case GFC_ISYM_NOT:\n       gfc_conv_intrinsic_not (se, expr);\n       break;\n@@ -5296,12 +5393,16 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_bitop (se, expr, BIT_IOR_EXPR);\n       break;\n \n+    case GFC_ISYM_PARITY:\n+      gfc_conv_intrinsic_arith (se, expr, NE_EXPR, false);\n+      break;\n+\n     case GFC_ISYM_PRESENT:\n       gfc_conv_intrinsic_present (se, expr);\n       break;\n \n     case GFC_ISYM_PRODUCT:\n-      gfc_conv_intrinsic_arith (se, expr, MULT_EXPR);\n+      gfc_conv_intrinsic_arith (se, expr, MULT_EXPR, false);\n       break;\n \n     case GFC_ISYM_RRSPACING:\n@@ -5338,7 +5439,7 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       break;\n \n     case GFC_ISYM_SUM:\n-      gfc_conv_intrinsic_arith (se, expr, PLUS_EXPR);\n+      gfc_conv_intrinsic_arith (se, expr, PLUS_EXPR, false);\n       break;\n \n     case GFC_ISYM_TRANSFER:\n@@ -5508,6 +5609,8 @@ gfc_is_intrinsic_libcall (gfc_expr * expr)\n     case GFC_ISYM_MAXVAL:\n     case GFC_ISYM_MINLOC:\n     case GFC_ISYM_MINVAL:\n+    case GFC_ISYM_NORM2:\n+    case GFC_ISYM_PARITY:\n     case GFC_ISYM_PRODUCT:\n     case GFC_ISYM_SUM:\n     case GFC_ISYM_SHAPE:"}, {"sha": "d1f0a8cc38debbf10197d7c5eb91d45a4c2915ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,3 +1,14 @@\n+2010-08-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/33197\n+\t* gcc/testsuite/gfortran.dg/norm2_1.f90: New.\n+\t* gcc/testsuite/gfortran.dg/norm2_2.f90: New.\n+\t* gcc/testsuite/gfortran.dg/norm2_3.f90: New.\n+\t* gcc/testsuite/gfortran.dg/norm2_4.f90: New.\n+\t* gcc/testsuite/gfortran.dg/parity_1.f90: New.\n+\t* gcc/testsuite/gfortran.dg/parity_2.f90: New.\n+\t* gcc/testsuite/gfortran.dg/parity_3.f90: New.\n+\n 2010-08-27  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/45420"}, {"sha": "6d69e6bb45412af8ddfc253c6492e5515bc3e82a", "filename": "gcc/testsuite/gfortran.dg/norm2_1.f90", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_1.f90?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,91 @@\n+! { dg-do run }\n+!\n+! PR fortran/33197\n+!\n+! Check implementation of L2 norm (Euclidean vector norm)\n+!\n+implicit none\n+\n+real :: a(3) = [real :: 1, 2, huge(3.0)]\n+real :: b(3) = [real :: 1, 2, 3]\n+real :: c(4) = [real :: 1, 2, 3, -1]\n+real :: e(0) = [real :: ]\n+real :: f(4) = [real :: 0, 0, 3, 0 ]\n+\n+real :: d(4,1) = RESHAPE ([real :: 1, 2, 3, -1], [4,1])\n+real :: g(4,1) = RESHAPE ([real :: 0, 0, 4, -1], [4,1])\n+\n+! Check compile-time version\n+\n+if (abs (NORM2 ([real :: 1, 2, huge(3.0)])   - huge(3.0)) &\n+    > epsilon(0.0)*huge(3.0)) call abort()\n+\n+if (abs (SNORM2([real :: 1, 2, huge(3.0)],3) - huge(3.0)) &\n+    > epsilon(0.0)*huge(3.0)) call abort()\n+\n+if (abs (SNORM2([real :: 1, 2, 3],3) - NORM2([real :: 1, 2, 3])) &\n+    > epsilon(0.0)*SNORM2([real :: 1, 2, 3],3)) call abort()\n+\n+if (NORM2([real :: ]) /= 0.0) call abort()\n+if (abs (NORM2([real :: 0, 0, 3, 0]) - 3.0) > epsilon(0.0)) call abort()\n+\n+! Check TREE version\n+\n+if (abs (NORM2 (a)   - huge(3.0)) &\n+    > epsilon(0.0)*huge(3.0)) call abort()\n+\n+if (abs (SNORM2(b,3) - NORM2(b)) &\n+    > epsilon(0.0)*SNORM2(b,3)) call abort()\n+\n+if (abs (SNORM2(c,4) - NORM2(c)) &\n+    > epsilon(0.0)*SNORM2(c,4)) call abort()\n+\n+if (ANY (abs (abs(d(:,1)) - NORM2(d, 2)) &\n+    > epsilon(0.0))) call abort()\n+\n+! Check libgfortran version\n+\n+if (ANY (abs (SNORM2(d,4) - NORM2(d, 1)) &\n+    > epsilon(0.0)*SNORM2(d,4))) call abort()\n+\n+if (abs (SNORM2(f,4) - NORM2(f, 1)) &\n+    > epsilon(0.0)*SNORM2(d,4)) call abort()\n+\n+if (ANY (abs (abs(g(:,1)) - NORM2(g, 2)) &\n+    > epsilon(0.0))) call abort()\n+\n+contains\n+   ! NORM2 algorithm based on BLAS, cf.\n+   ! http://www.netlib.org/blas/snrm2.f\n+   REAL FUNCTION SNORM2 (X,n)\n+      INTEGER, INTENT(IN) :: n\n+      REAL, INTENT(IN) :: X(n)\n+\n+      REAL :: absXi, scale, SSQ\n+      INTEGER :: i\n+\n+      INTRINSIC :: ABS, SQRT\n+\n+      IF (N < 1) THEN\n+        snorm2 = 0.0\n+      ELSE IF (N == 1) THEN\n+        snorm2 = ABS(X(1))\n+      ELSE\n+          scale = 0.0\n+          SSQ = 1.0\n+\n+          DO i = 1, N\n+              IF (X(i) /= 0.0) THEN\n+                  absXi = ABS(X(i))\n+                  IF (scale < absXi) THEN\n+                      SSQ = 1.0 + SSQ * (scale/absXi)**2\n+                      scale = absXi\n+                  ELSE\n+                      SSQ = SSQ + (absXi/scale)**2\n+                  END IF\n+              END IF\n+          END DO\n+          snorm2 = scale * SQRT(SSQ)\n+      END IF\n+   END FUNCTION SNORM2\n+end"}, {"sha": "d6ad7aa545a29f0e3f11a66c44ca39fe310eb473", "filename": "gcc/testsuite/gfortran.dg/norm2_2.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_2.f90?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008\" }\n+!\n+! PR fortran/33197\n+!\n+! Check implementation of L2 norm (Euclidean vector norm)\n+!\n+implicit none\n+\n+print *, norm2([1, 2]) ! { dg-error \"must be REAL\" }\n+print *, norm2([cmplx(1.0,2.0)]) ! { dg-error \"must be REAL\" }\n+print *, norm2(1.0) ! { dg-error \"must be an array\" }\n+print *, norm2([1.0, 2.0], dim=2) ! { dg-error \"not a valid dimension index\" }\n+end"}, {"sha": "a1a3b3f45bda756f6b5f91c02e33bfe90d6acf4c", "filename": "gcc/testsuite/gfortran.dg/norm2_3.f90", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm2_3.f90?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,95 @@\n+! { dg-do run }\n+! { dg-require-effective-target fortran_large_real }\n+!\n+!\n+! PR fortran/33197\n+!\n+! Check implementation of L2 norm (Euclidean vector norm)\n+!\n+implicit none\n+\n+integer,parameter :: qp = selected_real_kind (precision (0.0d0)+1)\n+\n+real(qp) :: a(3) = [real(qp) :: 1, 2, huge(3.0_qp)]\n+real(qp) :: b(3) = [real(qp) :: 1, 2, 3]\n+real(qp) :: c(4) = [real(qp) :: 1, 2, 3, -1]\n+real(qp) :: e(0) = [real(qp) :: ]\n+real(qp) :: f(4) = [real(qp) :: 0, 0, 3, 0 ]\n+\n+real(qp) :: d(4,1) = RESHAPE ([real(qp) :: 1, 2, 3, -1], [4,1])\n+real(qp) :: g(4,1) = RESHAPE ([real(qp) :: 0, 0, 4, -1], [4,1])\n+\n+! Check compile-time version\n+\n+if (abs (NORM2 ([real(qp) :: 1, 2, huge(3.0_qp)])   - huge(3.0_qp)) &\n+    > epsilon(0.0_qp)*huge(3.0_qp)) call abort()\n+\n+if (abs (SNORM2([real(qp) :: 1, 2, huge(3.0_qp)],3) - huge(3.0_qp)) &\n+    > epsilon(0.0_qp)*huge(3.0_qp)) call abort()\n+\n+if (abs (SNORM2([real(qp) :: 1, 2, 3],3) - NORM2([real(qp) :: 1, 2, 3])) &\n+    > epsilon(0.0_qp)*SNORM2([real(qp) :: 1, 2, 3],3)) call abort()\n+\n+if (NORM2([real(qp) :: ]) /= 0.0_qp) call abort()\n+if (abs (NORM2([real(qp) :: 0, 0, 3, 0]) - 3.0_qp) > epsilon(0.0_qp)) call abort()\n+\n+! Check TREE version\n+\n+if (abs (NORM2 (a)   - huge(3.0_qp)) &\n+    > epsilon(0.0_qp)*huge(3.0_qp)) call abort()\n+\n+if (abs (SNORM2(b,3) - NORM2(b)) &\n+    > epsilon(0.0_qp)*SNORM2(b,3)) call abort()\n+\n+if (abs (SNORM2(c,4) - NORM2(c)) &\n+    > epsilon(0.0_qp)*SNORM2(c,4)) call abort()\n+\n+if (ANY (abs (abs(d(:,1)) - NORM2(d, 2)) &\n+    > epsilon(0.0_qp))) call abort()\n+\n+! Check libgfortran version\n+\n+if (ANY (abs (SNORM2(d,4) - NORM2(d, 1)) &\n+    > epsilon(0.0_qp)*SNORM2(d,4))) call abort()\n+\n+if (abs (SNORM2(f,4) - NORM2(f, 1)) &\n+    > epsilon(0.0_qp)*SNORM2(d,4)) call abort()\n+\n+if (ANY (abs (abs(g(:,1)) - NORM2(g, 2)) &\n+    > epsilon(0.0_qp))) call abort()\n+\n+contains\n+   ! NORM2 algorithm based on BLAS, cf.\n+   ! http://www.netlib.org/blas/snrm2.f\n+   REAL(qp) FUNCTION SNORM2 (X,n)\n+      INTEGER, INTENT(IN) :: n\n+      REAL(qp), INTENT(IN) :: X(n)\n+\n+      REAL(qp) :: absXi, scale, SSQ\n+      INTEGER :: i\n+\n+      INTRINSIC :: ABS, SQRT\n+\n+      IF (N < 1) THEN\n+        snorm2 = 0.0_qp\n+      ELSE IF (N == 1) THEN\n+        snorm2 = ABS(X(1))\n+      ELSE\n+          scale = 0.0_qp\n+          SSQ = 1.0_qp\n+\n+          DO i = 1, N\n+              IF (X(i) /= 0.0_qp) THEN\n+                  absXi = ABS(X(i))\n+                  IF (scale < absXi) THEN\n+                      SSQ = 1.0_qp + SSQ * (scale/absXi)**2\n+                      scale = absXi\n+                  ELSE\n+                      SSQ = SSQ + (absXi/scale)**2\n+                  END IF\n+              END IF\n+          END DO\n+          snorm2 = scale * SQRT(SSQ)\n+      END IF\n+   END FUNCTION SNORM2\n+end"}, {"sha": "276b1743f001764254082494978c82899cfe0824", "filename": "gcc/testsuite/gfortran.dg/norm_4.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnorm_4.f90?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+! PR fortran/33197\n+!\n+! Check implementation of L2 norm (Euclidean vector norm)\n+!\n+implicit none\n+\n+print *, norm2([1.0, 2.0]) ! { dg-error \"has no IMPLICIT type\" }\n+end"}, {"sha": "05f9537fa96815ad29f218b2cf0bf71692ccdabf", "filename": "gcc/testsuite/gfortran.dg/parity_1.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fparity_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fparity_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fparity_1.f90?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+!\n+! PR fortran/33197\n+!\n+! Check implementation of PARITY\n+!\n+implicit none\n+\n+integer :: i\n+logical :: Lt(1) = [ .true. ]\n+logical :: Lf(1) = [ .false.]\n+logical :: Ltf(2) = [ .true., .false. ]\n+logical :: Ltftf(4) = [.true., .false., .true.,.false.]\n+\n+if (parity([logical ::]) .neqv. .false.) call abort()\n+if (parity([.true., .false.]) .neqv. .true.) call abort()\n+if (parity([.true.]) .neqv. .true.) call abort()\n+if (parity([.false.]) .neqv. .false.) call abort()\n+if (parity([.true., .false., .true.,.false.]) .neqv. .false.) call abort()\n+if (parity(reshape([.true., .false., .true.,.false.],[2,2])) &\n+    .neqv. .false.) call abort()\n+if (any (parity(reshape([.true., .false., .true.,.false.],[2,2]),dim=1) &\n+         .neqv. [.true., .true.])) call abort()\n+if (any (parity(reshape([.true., .false., .true.,.false.],[2,2]),dim=2) &\n+         .neqv. [.false., .false.])) call abort()\n+\n+i = 0\n+if (parity(Lt(1:i)) .neqv. .false.) call abort()\n+if (parity(Ltf) .neqv. .true.) call abort()\n+if (parity(Lt) .neqv. .true.) call abort()\n+if (parity(Lf) .neqv. .false.) call abort()\n+if (parity(Ltftf) .neqv. .false.) call abort()\n+if (parity(reshape(Ltftf,[2,2])) &\n+    .neqv. .false.) call abort()\n+if (any (parity(reshape(Ltftf,[2,2]),dim=1) &\n+         .neqv. [.true., .true.])) call abort()\n+if (any (parity(reshape(Ltftf,[2,2]),dim=2) &\n+         .neqv. [.false., .false.])) call abort()\n+\n+end"}, {"sha": "5ff11dab9d919eed65a3e7e3d521485117034073", "filename": "gcc/testsuite/gfortran.dg/parity_2.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fparity_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fparity_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fparity_2.f90?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008\" }\n+!\n+! PR fortran/33197\n+!\n+! Check implementation of PARITY\n+!\n+implicit none\n+print *, parity([real ::]) ! { dg-error \"must be LOGICAL\" })\n+print *, parity([integer ::]) ! { dg-error \"must be LOGICAL\" }\n+print *, parity([logical ::])\n+print *, parity(.true.) ! { dg-error \"must be an array\" }\n+end"}, {"sha": "88d674d41f962ee6e334bdc5dbb0d790579c9075", "filename": "gcc/testsuite/gfortran.dg/parity_3.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fparity_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/gcc%2Ftestsuite%2Fgfortran.dg%2Fparity_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fparity_3.f90?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+! PR fortran/33197\n+!\n+! Check implementation of PARITY\n+!\n+implicit none\n+print *, parity([.true.]) ! { dg-error \"has no IMPLICIT type\" }\n+end"}, {"sha": "121d471c3dce1938f3166db4333d553dc19abb3a", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,3 +1,144 @@\n+2010-08-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/33197\n+\t* libgfortran/m4/ifunction.m4 (FINISH_ARRAY_FUNCTION,\n+\tARRAY_FUNCTION): Allow expression after loop.\n+\t* libgfortran/m4/norm2.m4: New for _gfortran_norm2_r{4,8,10,16}.\n+\t* libgfortran/m4/parity.m4: New for _gfortran_parity_l{1,2,4,8,16}.\n+\t* libgfortran/gfortran.map: Add new functions.\n+\t* libgfortran/Makefile.am: Ditto.\n+\t* libgfortran/m4/minloc1.m4: Add empty argument for ARRAY_FUNCTION.\n+\t* libgfortran/m4/maxloc1.m4: Ditto.\n+\t* libgfortran/m4/all.m4: Ditto.\n+\t* libgfortran/m4/minval.m4: Ditto.\n+\t* libgfortran/m4/maxval.m4: Ditto.\n+\t* libgfortran/m4/count.m4: Ditto.\n+\t* libgfortran/m4/product.m4: Ditto.\n+\t* libgfortran/m4/any.m4: Ditto.\n+\t* Makefile.in: Regenerated.\n+\t* generated/minval_r8.c: Regenerated.\n+\t* generated/maxloc1_4_r8.c: Regenerated.\n+\t* generated/minloc1_16_r16.c: Regenerated.\n+\t* generated/norm2_r4.c: Regenerated.\n+\t* generated/sum_i8.c: Regenerated.\n+\t* generated/parity_l2.c: Regenerated.\n+\t* generated/any_l16.c: Regenerated.\n+\t* generated/maxval_i2.c: Regenerated.\n+\t* generated/any_l2.c: Regenerated.\n+\t* generated/product_r4.c: Regenerated.\n+\t* generated/maxloc1_8_i4.c: Regenerated.\n+\t* generated/parity_l16.c: Regenerated.\n+\t* generated/all_l1.c: Regenerated.\n+\t* generated/product_i2.c: Regenerated.\n+\t* generated/minloc1_8_r16.c: Regenerated.\n+\t* generated/maxloc1_8_r16.c: Regenerated.\n+\t* generated/sum_r16.c: Regenerated.\n+\t* generated/sum_i1.c: Regenerated.\n+\t* generated/minloc1_4_r8.c: Regenerated.\n+\t* generated/maxloc1_16_r16.c: Regenerated.\n+\t* generated/minloc1_16_i4.c: Regenerated.\n+\t* generated/maxloc1_16_i4.c: Regenerated.\n+\t* generated/maxval_r16.c: Regenerated.\n+\t* generated/product_c10.c: Regenerated.\n+\t* generated/minloc1_8_i4.c: Regenerated.\n+\t* generated/all_l2.c: Regenerated.\n+\t* generated/product_c4.c: Regenerated.\n+\t* generated/sum_r4.c: Regenerated.\n+\t* generated/all_l16.c: Regenerated.\n+\t* generated/minloc1_16_r10.c: Regenerated.\n+\t* generated/sum_i2.c: Regenerated.\n+\t* generated/maxloc1_8_r8.c: Regenerated.\n+\t* generated/minval_i16.c: Regenerated.\n+\t* generated/parity_l4.c: Regenerated.\n+\t* generated/maxval_i4.c: Regenerated.\n+\t* generated/any_l4.c: Regenerated.\n+\t* generated/minval_i8.c: Regenerated.\n+\t* generated/maxloc1_4_i8.c: Regenerated.\n+\t* generated/minloc1_4_i16.c: Regenerated.\n+\t* generated/maxloc1_4_i16.c: Regenerated.\n+\t* generated/minloc1_8_r10.c: Regenerated.\n+\t* generated/product_i4.c: Regenerated.\n+\t* generated/maxloc1_8_r10.c: Regenerated.\n+\t* generated/sum_c16.c: Regenerated.\n+\t* generated/minloc1_16_r8.c: Regenerated.\n+\t* generated/maxloc1_16_r8.c: Regenerated.\n+\t* generated/count_4_l.c: Regenerated.\n+\t* generated/sum_r10.c: Regenerated.\n+\t* generated/count_8_l.c: Regenerated.\n+\t* generated/sum_c4.c: Regenerated.\n+\t* generated/maxloc1_16_r10.c: Regenerated.\n+\t* generated/minloc1_8_r8.c: Regenerated.\n+\t* generated/maxval_r10.c: Regenerated.\n+\t* generated/minval_i1.c: Regenerated.\n+\t* generated/maxloc1_4_i1.c: Regenerated.\n+\t* generated/minloc1_4_i8.c: Regenerated.\n+\t* generated/product_i16.c: Regenerated.\n+\t* generated/all_l4.c: Regenerated.\n+\t* generated/norm2_r16.c: Regenerated.\n+\t* generated/minval_r4.c: Regenerated.\n+\t* generated/maxloc1_4_r4.c: Regenerated.\n+\t* generated/sum_i4.c: Regenerated.\n+\t* generated/maxval_r8.c: Regenerated.\n+\t* generated/norm2_r8.c: Regenerated.\n+\t* generated/minloc1_4_i1.c: Regenerated.\n+\t* generated/minval_r16.c: Regenerated.\n+\t* generated/minval_i2.c: Regenerated.\n+\t* generated/maxloc1_4_i2.c: Regenerated.\n+\t* generated/product_r8.c: Regenerated.\n+\t* generated/maxloc1_8_i8.c: Regenerated.\n+\t* generated/sum_c10.c: Regenerated.\n+\t* generated/minloc1_4_r16.c: Regenerated.\n+\t* generated/maxloc1_4_r16.c: Regenerated.\n+\t* generated/count_1_l.c: Regenerated.\n+\t* generated/minloc1_4_r4.c: Regenerated.\n+\t* generated/minloc1_16_i8.c: Regenerated.\n+\t* generated/maxloc1_16_i8.c: Regenerated.\n+\t* generated/minloc1_4_i2.c: Regenerated.\n+\t* generated/maxloc1_8_i1.c: Regenerated.\n+\t* generated/minloc1_8_i8.c: Regenerated.\n+\t* generated/product_r16.c: Regenerated.\n+\t* generated/product_c8.c: Regenerated.\n+\t* generated/sum_r8.c: Regenerated.\n+\t* generated/norm2_r10.c: Regenerated.\n+\t* generated/minloc1_16_i16.c: Regenerated.\n+\t* generated/maxloc1_8_r4.c: Regenerated.\n+\t* generated/minloc1_16_i1.c: Regenerated.\n+\t* generated/maxloc1_16_i1.c: Regenerated.\n+\t* generated/minval_r10.c: Regenerated.\n+\t* generated/count_16_l.c: Regenerated.\n+\t* generated/parity_l8.c: Regenerated.\n+\t* generated/minloc1_8_i1.c: Regenerated.\n+\t* generated/minval_i4.c: Regenerated.\n+\t* generated/maxloc1_4_i4.c: Regenerated.\n+\t* generated/maxloc1_8_i2.c: Regenerated.\n+\t* generated/maxval_i8.c: Regenerated.\n+\t* generated/any_l8.c: Regenerated.\n+\t* generated/minloc1_4_r10.c: Regenerated.\n+\t* generated/minloc1_8_i16.c: Regenerated.\n+\t* generated/maxloc1_4_r10.c: Regenerated.\n+\t* generated/maxloc1_8_i16.c: Regenerated.\n+\t* generated/minloc1_16_r4.c: Regenerated.\n+\t* generated/maxloc1_16_r4.c: Regenerated.\n+\t* generated/product_i8.c: Regenerated.\n+\t* generated/sum_i16.c: Regenerated.\n+\t* generated/count_2_l.c: Regenerated.\n+\t* generated/maxloc1_16_i16.c: Regenerated.\n+\t* generated/minloc1_8_r4.c: Regenerated.\n+\t* generated/sum_c8.c: Regenerated.\n+\t* generated/minloc1_16_i2.c: Regenerated.\n+\t* generated/maxloc1_16_i2.c: Regenerated.\n+\t* generated/parity_l1.c: Regenerated.\n+\t* generated/maxval_i16.c: Regenerated.\n+\t* generated/maxval_i1.c: Regenerated.\n+\t* generated/minloc1_4_i4.c: Regenerated.\n+\t* generated/any_l1.c: Regenerated.\n+\t* generated/minloc1_8_i2.c: Regenerated.\n+\t* generated/product_c16.c: Regenerated.\n+\t* generated/product_r10.c: Regenerated.\n+\t* generated/product_i1.c: Regenerated.\n+\t* generated/all_l8.c: Regenerated.\n+\t* generated/maxval_r4.c: Regenerated.\n+\n 2010-08-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/fpu-387.h (has_sse): Remove cw_sse, unused."}, {"sha": "d59c6887d7fc3f8d13fc2e78c8f4fa935aa817d5", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -326,6 +326,19 @@ $(srcdir)/generated/minval_r8.c \\\n $(srcdir)/generated/minval_r10.c \\\n $(srcdir)/generated/minval_r16.c\n \n+i_norm2_c= \\\n+$(srcdir)/generated/norm2_r4.c \\\n+$(srcdir)/generated/norm2_r8.c \\\n+$(srcdir)/generated/norm2_r10.c \\\n+$(srcdir)/generated/norm2_r16.c\n+\n+i_parity_c = \\\n+$(srcdir)/generated/parity_l1.c \\\n+$(srcdir)/generated/parity_l2.c \\\n+$(srcdir)/generated/parity_l4.c \\\n+$(srcdir)/generated/parity_l8.c \\\n+$(srcdir)/generated/parity_l16.c\n+\n i_sum_c= \\\n $(srcdir)/generated/sum_i1.c \\\n $(srcdir)/generated/sum_i2.c \\\n@@ -589,11 +602,11 @@ m4_files= m4/iparm.m4 m4/ifunction.m4 m4/iforeach.m4 m4/all.m4 \\\n     m4/transpose.m4 m4/eoshift1.m4 m4/eoshift3.m4 m4/exponent.m4 \\\n     m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4 m4/pow.m4 \\\n     m4/misc_specifics.m4 m4/rrspacing.m4 m4/spacing.m4 m4/pack.m4 \\\n-    m4/unpack.m4 m4/spread.m4 m4/bessel.m4\n+    m4/unpack.m4 m4/spread.m4 m4/bessel.m4 m4/norm2.m4 m4/parity.m4\n \n gfor_built_src= $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_maxloc1_c) $(i_maxval_c) $(i_minloc0_c) $(i_minloc1_c) $(i_minval_c) \\\n-    $(i_product_c) $(i_sum_c) $(i_bessel_c) \\\n+    $(i_product_c) $(i_sum_c) $(i_bessel_c) $(i_norm2_c) $(i_parity_c) \\\n     $(i_matmul_c) $(i_matmull_c) $(i_transpose_c) $(i_shape_c) $(i_eoshift1_c) \\\n     $(i_eoshift3_c) $(i_cshift1_c) $(i_reshape_c) $(in_pack_c) $(in_unpack_c) \\\n     $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c) \\\n@@ -866,6 +879,12 @@ $(i_matmul_c): m4/matmul.m4 $(I_M4_DEPS)\n $(i_matmull_c): m4/matmull.m4 $(I_M4_DEPS)\n \t$(M4) -Dfile=$@ -I$(srcdir)/m4 matmull.m4 > $@\n \n+$(i_norm2_c): m4/norm2.m4 $(I_M4_DEPS)\n+\t$(M4) -Dfile=$@ -I$(srcdir)/m4 norm2.m4 > $@\n+\n+$(i_parity_c): m4/parity.m4 $(I_M4_DEPS)\n+\t$(M4) -Dfile=$@ -I$(srcdir)/m4 parity.m4 > $@\n+\n $(i_transpose_c): m4/transpose.m4 $(I_M4_DEPS)\n \t$(M4) -Dfile=$@ -I$(srcdir)/m4 transpose.m4 > $@\n "}, {"sha": "c6f92260d2ccd96be366c4b8cace8729b3433d4c", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 130, "deletions": 35, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -144,67 +144,70 @@ am__objects_12 = sum_i1.lo sum_i2.lo sum_i4.lo sum_i8.lo sum_i16.lo \\\n \tsum_r4.lo sum_r8.lo sum_r10.lo sum_r16.lo sum_c4.lo sum_c8.lo \\\n \tsum_c10.lo sum_c16.lo\n am__objects_13 = bessel_r4.lo bessel_r8.lo bessel_r10.lo bessel_r16.lo\n-am__objects_14 = matmul_i1.lo matmul_i2.lo matmul_i4.lo matmul_i8.lo \\\n+am__objects_14 = norm2_r4.lo norm2_r8.lo norm2_r10.lo norm2_r16.lo\n+am__objects_15 = parity_l1.lo parity_l2.lo parity_l4.lo parity_l8.lo \\\n+\tparity_l16.lo\n+am__objects_16 = matmul_i1.lo matmul_i2.lo matmul_i4.lo matmul_i8.lo \\\n \tmatmul_i16.lo matmul_r4.lo matmul_r8.lo matmul_r10.lo \\\n \tmatmul_r16.lo matmul_c4.lo matmul_c8.lo matmul_c10.lo \\\n \tmatmul_c16.lo\n-am__objects_15 = matmul_l4.lo matmul_l8.lo matmul_l16.lo\n-am__objects_16 = transpose_i4.lo transpose_i8.lo transpose_i16.lo \\\n+am__objects_17 = matmul_l4.lo matmul_l8.lo matmul_l16.lo\n+am__objects_18 = transpose_i4.lo transpose_i8.lo transpose_i16.lo \\\n \ttranspose_r4.lo transpose_r8.lo transpose_r10.lo \\\n \ttranspose_r16.lo transpose_c4.lo transpose_c8.lo \\\n \ttranspose_c10.lo transpose_c16.lo\n-am__objects_17 = shape_i4.lo shape_i8.lo shape_i16.lo\n-am__objects_18 = eoshift1_4.lo eoshift1_8.lo eoshift1_16.lo\n-am__objects_19 = eoshift3_4.lo eoshift3_8.lo eoshift3_16.lo\n-am__objects_20 = cshift1_4.lo cshift1_8.lo cshift1_16.lo\n-am__objects_21 = reshape_i4.lo reshape_i8.lo reshape_i16.lo \\\n+am__objects_19 = shape_i4.lo shape_i8.lo shape_i16.lo\n+am__objects_20 = eoshift1_4.lo eoshift1_8.lo eoshift1_16.lo\n+am__objects_21 = eoshift3_4.lo eoshift3_8.lo eoshift3_16.lo\n+am__objects_22 = cshift1_4.lo cshift1_8.lo cshift1_16.lo\n+am__objects_23 = reshape_i4.lo reshape_i8.lo reshape_i16.lo \\\n \treshape_r4.lo reshape_r8.lo reshape_r10.lo reshape_r16.lo \\\n \treshape_c4.lo reshape_c8.lo reshape_c10.lo reshape_c16.lo\n-am__objects_22 = in_pack_i1.lo in_pack_i2.lo in_pack_i4.lo \\\n+am__objects_24 = in_pack_i1.lo in_pack_i2.lo in_pack_i4.lo \\\n \tin_pack_i8.lo in_pack_i16.lo in_pack_r4.lo in_pack_r8.lo \\\n \tin_pack_r10.lo in_pack_r16.lo in_pack_c4.lo in_pack_c8.lo \\\n \tin_pack_c10.lo in_pack_c16.lo\n-am__objects_23 = in_unpack_i1.lo in_unpack_i2.lo in_unpack_i4.lo \\\n+am__objects_25 = in_unpack_i1.lo in_unpack_i2.lo in_unpack_i4.lo \\\n \tin_unpack_i8.lo in_unpack_i16.lo in_unpack_r4.lo \\\n \tin_unpack_r8.lo in_unpack_r10.lo in_unpack_r16.lo \\\n \tin_unpack_c4.lo in_unpack_c8.lo in_unpack_c10.lo \\\n \tin_unpack_c16.lo\n-am__objects_24 = exponent_r4.lo exponent_r8.lo exponent_r10.lo \\\n+am__objects_26 = exponent_r4.lo exponent_r8.lo exponent_r10.lo \\\n \texponent_r16.lo\n-am__objects_25 = fraction_r4.lo fraction_r8.lo fraction_r10.lo \\\n+am__objects_27 = fraction_r4.lo fraction_r8.lo fraction_r10.lo \\\n \tfraction_r16.lo\n-am__objects_26 = nearest_r4.lo nearest_r8.lo nearest_r10.lo \\\n+am__objects_28 = nearest_r4.lo nearest_r8.lo nearest_r10.lo \\\n \tnearest_r16.lo\n-am__objects_27 = set_exponent_r4.lo set_exponent_r8.lo \\\n+am__objects_29 = set_exponent_r4.lo set_exponent_r8.lo \\\n \tset_exponent_r10.lo set_exponent_r16.lo\n-am__objects_28 = pow_i4_i4.lo pow_i8_i4.lo pow_i16_i4.lo pow_c4_i4.lo \\\n+am__objects_30 = pow_i4_i4.lo pow_i8_i4.lo pow_i16_i4.lo pow_c4_i4.lo \\\n \tpow_c8_i4.lo pow_c10_i4.lo pow_c16_i4.lo pow_i4_i8.lo \\\n \tpow_i8_i8.lo pow_i16_i8.lo pow_r4_i8.lo pow_r8_i8.lo \\\n \tpow_r10_i8.lo pow_r16_i8.lo pow_c4_i8.lo pow_c8_i8.lo \\\n \tpow_c10_i8.lo pow_c16_i8.lo pow_i4_i16.lo pow_i8_i16.lo \\\n \tpow_i16_i16.lo pow_r4_i16.lo pow_r8_i16.lo pow_r10_i16.lo \\\n \tpow_r16_i16.lo pow_c4_i16.lo pow_c8_i16.lo pow_c10_i16.lo \\\n \tpow_c16_i16.lo\n-am__objects_29 = rrspacing_r4.lo rrspacing_r8.lo rrspacing_r10.lo \\\n+am__objects_31 = rrspacing_r4.lo rrspacing_r8.lo rrspacing_r10.lo \\\n \trrspacing_r16.lo\n-am__objects_30 = spacing_r4.lo spacing_r8.lo spacing_r10.lo \\\n+am__objects_32 = spacing_r4.lo spacing_r8.lo spacing_r10.lo \\\n \tspacing_r16.lo\n-am__objects_31 = pack_i1.lo pack_i2.lo pack_i4.lo pack_i8.lo \\\n+am__objects_33 = pack_i1.lo pack_i2.lo pack_i4.lo pack_i8.lo \\\n \tpack_i16.lo pack_r4.lo pack_r8.lo pack_r10.lo pack_r16.lo \\\n \tpack_c4.lo pack_c8.lo pack_c10.lo pack_c16.lo\n-am__objects_32 = unpack_i1.lo unpack_i2.lo unpack_i4.lo unpack_i8.lo \\\n+am__objects_34 = unpack_i1.lo unpack_i2.lo unpack_i4.lo unpack_i8.lo \\\n \tunpack_i16.lo unpack_r4.lo unpack_r8.lo unpack_r10.lo \\\n \tunpack_r16.lo unpack_c4.lo unpack_c8.lo unpack_c10.lo \\\n \tunpack_c16.lo\n-am__objects_33 = spread_i1.lo spread_i2.lo spread_i4.lo spread_i8.lo \\\n+am__objects_35 = spread_i1.lo spread_i2.lo spread_i4.lo spread_i8.lo \\\n \tspread_i16.lo spread_r4.lo spread_r8.lo spread_r10.lo \\\n \tspread_r16.lo spread_c4.lo spread_c8.lo spread_c10.lo \\\n \tspread_c16.lo\n-am__objects_34 = cshift0_i1.lo cshift0_i2.lo cshift0_i4.lo \\\n+am__objects_36 = cshift0_i1.lo cshift0_i2.lo cshift0_i4.lo \\\n \tcshift0_i8.lo cshift0_i16.lo cshift0_r4.lo cshift0_r8.lo \\\n \tcshift0_r10.lo cshift0_r16.lo cshift0_c4.lo cshift0_c8.lo \\\n \tcshift0_c10.lo cshift0_c16.lo\n-am__objects_35 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n+am__objects_37 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n \t$(am__objects_5) $(am__objects_6) $(am__objects_7) \\\n \t$(am__objects_8) $(am__objects_9) $(am__objects_10) \\\n \t$(am__objects_11) $(am__objects_12) $(am__objects_13) \\\n@@ -214,11 +217,12 @@ am__objects_35 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n \t$(am__objects_23) $(am__objects_24) $(am__objects_25) \\\n \t$(am__objects_26) $(am__objects_27) $(am__objects_28) \\\n \t$(am__objects_29) $(am__objects_30) $(am__objects_31) \\\n-\t$(am__objects_32) $(am__objects_33) $(am__objects_34)\n-am__objects_36 = close.lo file_pos.lo format.lo inquire.lo \\\n+\t$(am__objects_32) $(am__objects_33) $(am__objects_34) \\\n+\t$(am__objects_35) $(am__objects_36)\n+am__objects_38 = close.lo file_pos.lo format.lo inquire.lo \\\n \tintrinsics.lo list_read.lo lock.lo open.lo read.lo \\\n \tsize_from_kind.lo transfer.lo unit.lo unix.lo write.lo fbuf.lo\n-am__objects_37 = associated.lo abort.lo access.lo args.lo \\\n+am__objects_39 = associated.lo abort.lo access.lo args.lo \\\n \tbit_intrinsics.lo c99_functions.lo chdir.lo chmod.lo clock.lo \\\n \tcpu_time.lo cshift0.lo ctime.lo date_and_time.lo dtime.lo \\\n \tenv.lo eoshift0.lo eoshift2.lo erfc_scaled.lo etime.lo exit.lo \\\n@@ -233,8 +237,8 @@ am__objects_37 = associated.lo abort.lo access.lo args.lo \\\n \tsystem_clock.lo time.lo transpose_generic.lo umask.lo \\\n \tunlink.lo unpack_generic.lo in_pack_generic.lo \\\n \tin_unpack_generic.lo\n-am__objects_38 =\n-am__objects_39 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n+am__objects_40 =\n+am__objects_41 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n \t_abs_i4.lo _abs_i8.lo _abs_i16.lo _abs_r4.lo _abs_r8.lo \\\n \t_abs_r10.lo _abs_r16.lo _aimag_c4.lo _aimag_c8.lo \\\n \t_aimag_c10.lo _aimag_c16.lo _exp_r4.lo _exp_r8.lo _exp_r10.lo \\\n@@ -258,18 +262,18 @@ am__objects_39 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n \t_conjg_c4.lo _conjg_c8.lo _conjg_c10.lo _conjg_c16.lo \\\n \t_aint_r4.lo _aint_r8.lo _aint_r10.lo _aint_r16.lo _anint_r4.lo \\\n \t_anint_r8.lo _anint_r10.lo _anint_r16.lo\n-am__objects_40 = _sign_i4.lo _sign_i8.lo _sign_i16.lo _sign_r4.lo \\\n+am__objects_42 = _sign_i4.lo _sign_i8.lo _sign_i16.lo _sign_r4.lo \\\n \t_sign_r8.lo _sign_r10.lo _sign_r16.lo _dim_i4.lo _dim_i8.lo \\\n \t_dim_i16.lo _dim_r4.lo _dim_r8.lo _dim_r10.lo _dim_r16.lo \\\n \t_atan2_r4.lo _atan2_r8.lo _atan2_r10.lo _atan2_r16.lo \\\n \t_mod_i4.lo _mod_i8.lo _mod_i16.lo _mod_r4.lo _mod_r8.lo \\\n \t_mod_r10.lo _mod_r16.lo\n-am__objects_41 = misc_specifics.lo\n-am__objects_42 = $(am__objects_39) $(am__objects_40) $(am__objects_41) \\\n+am__objects_43 = misc_specifics.lo\n+am__objects_44 = $(am__objects_41) $(am__objects_42) $(am__objects_43) \\\n \tdprod_r8.lo f2c_specifics.lo\n-am__objects_43 = $(am__objects_1) $(am__objects_35) $(am__objects_36) \\\n-\t$(am__objects_37) $(am__objects_38) $(am__objects_42)\n-@onestep_FALSE@am_libgfortran_la_OBJECTS = $(am__objects_43)\n+am__objects_45 = $(am__objects_1) $(am__objects_37) $(am__objects_38) \\\n+\t$(am__objects_39) $(am__objects_40) $(am__objects_44)\n+@onestep_FALSE@am_libgfortran_la_OBJECTS = $(am__objects_45)\n @onestep_TRUE@am_libgfortran_la_OBJECTS = libgfortran_c.lo\n libgfortran_la_OBJECTS = $(am_libgfortran_la_OBJECTS)\n libgfortranbegin_la_LIBADD =\n@@ -742,6 +746,19 @@ $(srcdir)/generated/minval_r8.c \\\n $(srcdir)/generated/minval_r10.c \\\n $(srcdir)/generated/minval_r16.c\n \n+i_norm2_c = \\\n+$(srcdir)/generated/norm2_r4.c \\\n+$(srcdir)/generated/norm2_r8.c \\\n+$(srcdir)/generated/norm2_r10.c \\\n+$(srcdir)/generated/norm2_r16.c\n+\n+i_parity_c = \\\n+$(srcdir)/generated/parity_l1.c \\\n+$(srcdir)/generated/parity_l2.c \\\n+$(srcdir)/generated/parity_l4.c \\\n+$(srcdir)/generated/parity_l8.c \\\n+$(srcdir)/generated/parity_l16.c\n+\n i_sum_c = \\\n $(srcdir)/generated/sum_i1.c \\\n $(srcdir)/generated/sum_i2.c \\\n@@ -1004,11 +1021,11 @@ m4_files = m4/iparm.m4 m4/ifunction.m4 m4/iforeach.m4 m4/all.m4 \\\n     m4/transpose.m4 m4/eoshift1.m4 m4/eoshift3.m4 m4/exponent.m4 \\\n     m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4 m4/pow.m4 \\\n     m4/misc_specifics.m4 m4/rrspacing.m4 m4/spacing.m4 m4/pack.m4 \\\n-    m4/unpack.m4 m4/spread.m4 m4/bessel.m4\n+    m4/unpack.m4 m4/spread.m4 m4/bessel.m4 m4/norm2.m4 m4/parity.m4\n \n gfor_built_src = $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_maxloc1_c) $(i_maxval_c) $(i_minloc0_c) $(i_minloc1_c) $(i_minval_c) \\\n-    $(i_product_c) $(i_sum_c) $(i_bessel_c) \\\n+    $(i_product_c) $(i_sum_c) $(i_bessel_c) $(i_norm2_c) $(i_parity_c) \\\n     $(i_matmul_c) $(i_matmull_c) $(i_transpose_c) $(i_shape_c) $(i_eoshift1_c) \\\n     $(i_eoshift3_c) $(i_cshift1_c) $(i_reshape_c) $(in_pack_c) $(in_unpack_c) \\\n     $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c) \\\n@@ -1598,6 +1615,10 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/nearest_r16.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/nearest_r4.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/nearest_r8.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/norm2_r10.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/norm2_r16.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/norm2_r4.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/norm2_r8.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/open.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pack_c10.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pack_c16.Plo@am__quote@\n@@ -1613,6 +1634,11 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pack_r16.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pack_r4.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pack_r8.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/parity_l1.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/parity_l16.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/parity_l2.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/parity_l4.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/parity_l8.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pause.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/perror.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pow_c10_i16.Plo@am__quote@\n@@ -3495,6 +3521,69 @@ bessel_r16.lo: $(srcdir)/generated/bessel_r16.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o bessel_r16.lo `test -f '$(srcdir)/generated/bessel_r16.c' || echo '$(srcdir)/'`$(srcdir)/generated/bessel_r16.c\n \n+norm2_r4.lo: $(srcdir)/generated/norm2_r4.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT norm2_r4.lo -MD -MP -MF $(DEPDIR)/norm2_r4.Tpo -c -o norm2_r4.lo `test -f '$(srcdir)/generated/norm2_r4.c' || echo '$(srcdir)/'`$(srcdir)/generated/norm2_r4.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/norm2_r4.Tpo $(DEPDIR)/norm2_r4.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$(srcdir)/generated/norm2_r4.c' object='norm2_r4.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o norm2_r4.lo `test -f '$(srcdir)/generated/norm2_r4.c' || echo '$(srcdir)/'`$(srcdir)/generated/norm2_r4.c\n+\n+norm2_r8.lo: $(srcdir)/generated/norm2_r8.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT norm2_r8.lo -MD -MP -MF $(DEPDIR)/norm2_r8.Tpo -c -o norm2_r8.lo `test -f '$(srcdir)/generated/norm2_r8.c' || echo '$(srcdir)/'`$(srcdir)/generated/norm2_r8.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/norm2_r8.Tpo $(DEPDIR)/norm2_r8.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$(srcdir)/generated/norm2_r8.c' object='norm2_r8.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o norm2_r8.lo `test -f '$(srcdir)/generated/norm2_r8.c' || echo '$(srcdir)/'`$(srcdir)/generated/norm2_r8.c\n+\n+norm2_r10.lo: $(srcdir)/generated/norm2_r10.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT norm2_r10.lo -MD -MP -MF $(DEPDIR)/norm2_r10.Tpo -c -o norm2_r10.lo `test -f '$(srcdir)/generated/norm2_r10.c' || echo '$(srcdir)/'`$(srcdir)/generated/norm2_r10.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/norm2_r10.Tpo $(DEPDIR)/norm2_r10.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$(srcdir)/generated/norm2_r10.c' object='norm2_r10.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o norm2_r10.lo `test -f '$(srcdir)/generated/norm2_r10.c' || echo '$(srcdir)/'`$(srcdir)/generated/norm2_r10.c\n+\n+norm2_r16.lo: $(srcdir)/generated/norm2_r16.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT norm2_r16.lo -MD -MP -MF $(DEPDIR)/norm2_r16.Tpo -c -o norm2_r16.lo `test -f '$(srcdir)/generated/norm2_r16.c' || echo '$(srcdir)/'`$(srcdir)/generated/norm2_r16.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/norm2_r16.Tpo $(DEPDIR)/norm2_r16.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$(srcdir)/generated/norm2_r16.c' object='norm2_r16.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o norm2_r16.lo `test -f '$(srcdir)/generated/norm2_r16.c' || echo '$(srcdir)/'`$(srcdir)/generated/norm2_r16.c\n+\n+parity_l1.lo: $(srcdir)/generated/parity_l1.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT parity_l1.lo -MD -MP -MF $(DEPDIR)/parity_l1.Tpo -c -o parity_l1.lo `test -f '$(srcdir)/generated/parity_l1.c' || echo '$(srcdir)/'`$(srcdir)/generated/parity_l1.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/parity_l1.Tpo $(DEPDIR)/parity_l1.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$(srcdir)/generated/parity_l1.c' object='parity_l1.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o parity_l1.lo `test -f '$(srcdir)/generated/parity_l1.c' || echo '$(srcdir)/'`$(srcdir)/generated/parity_l1.c\n+\n+parity_l2.lo: $(srcdir)/generated/parity_l2.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT parity_l2.lo -MD -MP -MF $(DEPDIR)/parity_l2.Tpo -c -o parity_l2.lo `test -f '$(srcdir)/generated/parity_l2.c' || echo '$(srcdir)/'`$(srcdir)/generated/parity_l2.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/parity_l2.Tpo $(DEPDIR)/parity_l2.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$(srcdir)/generated/parity_l2.c' object='parity_l2.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o parity_l2.lo `test -f '$(srcdir)/generated/parity_l2.c' || echo '$(srcdir)/'`$(srcdir)/generated/parity_l2.c\n+\n+parity_l4.lo: $(srcdir)/generated/parity_l4.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT parity_l4.lo -MD -MP -MF $(DEPDIR)/parity_l4.Tpo -c -o parity_l4.lo `test -f '$(srcdir)/generated/parity_l4.c' || echo '$(srcdir)/'`$(srcdir)/generated/parity_l4.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/parity_l4.Tpo $(DEPDIR)/parity_l4.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$(srcdir)/generated/parity_l4.c' object='parity_l4.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o parity_l4.lo `test -f '$(srcdir)/generated/parity_l4.c' || echo '$(srcdir)/'`$(srcdir)/generated/parity_l4.c\n+\n+parity_l8.lo: $(srcdir)/generated/parity_l8.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT parity_l8.lo -MD -MP -MF $(DEPDIR)/parity_l8.Tpo -c -o parity_l8.lo `test -f '$(srcdir)/generated/parity_l8.c' || echo '$(srcdir)/'`$(srcdir)/generated/parity_l8.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/parity_l8.Tpo $(DEPDIR)/parity_l8.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$(srcdir)/generated/parity_l8.c' object='parity_l8.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o parity_l8.lo `test -f '$(srcdir)/generated/parity_l8.c' || echo '$(srcdir)/'`$(srcdir)/generated/parity_l8.c\n+\n+parity_l16.lo: $(srcdir)/generated/parity_l16.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT parity_l16.lo -MD -MP -MF $(DEPDIR)/parity_l16.Tpo -c -o parity_l16.lo `test -f '$(srcdir)/generated/parity_l16.c' || echo '$(srcdir)/'`$(srcdir)/generated/parity_l16.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/parity_l16.Tpo $(DEPDIR)/parity_l16.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='$(srcdir)/generated/parity_l16.c' object='parity_l16.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o parity_l16.lo `test -f '$(srcdir)/generated/parity_l16.c' || echo '$(srcdir)/'`$(srcdir)/generated/parity_l16.c\n+\n matmul_i1.lo: $(srcdir)/generated/matmul_i1.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT matmul_i1.lo -MD -MP -MF $(DEPDIR)/matmul_i1.Tpo -c -o matmul_i1.lo `test -f '$(srcdir)/generated/matmul_i1.c' || echo '$(srcdir)/'`$(srcdir)/generated/matmul_i1.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/matmul_i1.Tpo $(DEPDIR)/matmul_i1.Plo\n@@ -5603,6 +5692,12 @@ fpu-target.h: $(srcdir)/$(FPU_HOST_HEADER)\n @MAINTAINER_MODE_TRUE@$(i_matmull_c): m4/matmull.m4 $(I_M4_DEPS)\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 matmull.m4 > $@\n \n+@MAINTAINER_MODE_TRUE@$(i_norm2_c): m4/norm2.m4 $(I_M4_DEPS)\n+@MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 norm2.m4 > $@\n+\n+@MAINTAINER_MODE_TRUE@$(i_parity_c): m4/parity.m4 $(I_M4_DEPS)\n+@MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 parity.m4 > $@\n+\n @MAINTAINER_MODE_TRUE@$(i_transpose_c): m4/transpose.m4 $(I_M4_DEPS)\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 transpose.m4 > $@\n "}, {"sha": "400cfd9011514b5cd7fbdd10f58e238bea379ddd", "filename": "libgfortran/generated/all_l1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fall_l1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fall_l1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l1.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the ALL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "abe10d7b388944e4371191e8e19eee02bb9b65a5", "filename": "libgfortran/generated/all_l16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fall_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fall_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the ALL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "2cbd1266b7404422d491b2918f7d1f3560b91abb", "filename": "libgfortran/generated/all_l2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fall_l2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fall_l2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l2.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the ALL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "14b6303494983ac0ce9f1452ced5001fd5600a8e", "filename": "libgfortran/generated/all_l4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fall_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fall_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the ALL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "ae5e6faf3c34cc13e89b6b5cbb56389367d09929", "filename": "libgfortran/generated/all_l8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fall_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fall_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fall_l8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the ALL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "f8af5447a401ad005d16597a97ba39c78928a83a", "filename": "libgfortran/generated/any_l1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fany_l1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fany_l1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l1.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the ANY intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "f92d7152b129e81ba0ec490eba50e1c379304206", "filename": "libgfortran/generated/any_l16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fany_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fany_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the ANY intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "9c5e90a03b80f0440fff632a2a57a282a44ce02e", "filename": "libgfortran/generated/any_l2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fany_l2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fany_l2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l2.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the ANY intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "44d5ed97e6bc51eef27d1071b210a2427e1ded38", "filename": "libgfortran/generated/any_l4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fany_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fany_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the ANY intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "eabf8300dcb5f2092aa9859f97a862af7d11fad7", "filename": "libgfortran/generated/any_l8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fany_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fany_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fany_l8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the ANY intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "d65999aff5ae6f684b930924d06abd5c3f80b183", "filename": "libgfortran/generated/count_16_l.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fcount_16_l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fcount_16_l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_16_l.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the COUNT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "b2d89f4af3721afcdb0cf6a6b25d565769b4c946", "filename": "libgfortran/generated/count_1_l.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fcount_1_l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fcount_1_l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_1_l.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the COUNT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "8369a94feb89f2b2db2b04fc833ec541465ff77b", "filename": "libgfortran/generated/count_2_l.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fcount_2_l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fcount_2_l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_2_l.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the COUNT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "8b5cbb0faa38057055e23879c796c95412cf804b", "filename": "libgfortran/generated/count_4_l.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fcount_4_l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fcount_4_l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_4_l.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the COUNT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "9cb6a26f2f1bc9831e4afd8c23c51f0582d0adf0", "filename": "libgfortran/generated/count_8_l.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fcount_8_l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fcount_8_l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcount_8_l.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the COUNT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public"}, {"sha": "a3aafcf6f80ddc8e431a20fba82aae10797361b9", "filename": "libgfortran/generated/maxloc1_16_i1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "8dc8ef79d2331d7716ab78ed538590b607798c36", "filename": "libgfortran/generated/maxloc1_16_i16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "d13257299963d754e013ec1a5fa6d83df9e3556c", "filename": "libgfortran/generated/maxloc1_16_i2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "995b1e44f0372921c2be4e37fdaa55a84c9f8136", "filename": "libgfortran/generated/maxloc1_16_i4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "5376bcb32139ac73f38f09b3a96757748f99aa52", "filename": "libgfortran/generated/maxloc1_16_i8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "a23655da94767025015517fb67baa86ef5dcd842", "filename": "libgfortran/generated/maxloc1_16_r10.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "9e47498169f278a9eec3ac03331b1955babcefab", "filename": "libgfortran/generated/maxloc1_16_r16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "a551aff994551f1e16eac839f2b32be8a10f52cc", "filename": "libgfortran/generated/maxloc1_16_r4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "802ea09825f732d747c3151b6082791631f7844e", "filename": "libgfortran/generated/maxloc1_16_r8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "484cb0d4d45a6ffef9e09a6e46d1331e39d2d7a6", "filename": "libgfortran/generated/maxloc1_4_i1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "353d4975505ef883bc03c257517ce147ffe31d10", "filename": "libgfortran/generated/maxloc1_4_i16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "7342ac8e1abdd02c99de430e4fff2a86df43aa65", "filename": "libgfortran/generated/maxloc1_4_i2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "12b978f928986593c660cacfd0a670c6f417465c", "filename": "libgfortran/generated/maxloc1_4_i4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "4f5c6590bf050a702143bba77ef1a3770bce7310", "filename": "libgfortran/generated/maxloc1_4_i8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "5df2ca36bed402b47849ba64c8f86e4d8a09a290", "filename": "libgfortran/generated/maxloc1_4_r10.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "c556452a2fd8b91780efb0545a4dc00c4f5a4733", "filename": "libgfortran/generated/maxloc1_4_r16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "fecd072b2e029bd1788daeff4baee7c37785df08", "filename": "libgfortran/generated/maxloc1_4_r4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "a63fe367c8595f2bf594e3175eb207e03d95b1f6", "filename": "libgfortran/generated/maxloc1_4_r8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "d70c663128c6f1324d93fa226b0bb5483bc8b277", "filename": "libgfortran/generated/maxloc1_8_i1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "ce4afb121763593a9b7eecf22b1982aa6a36fa13", "filename": "libgfortran/generated/maxloc1_8_i16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "1bffde89c9b03af04137846443ddf28adc2f6e58", "filename": "libgfortran/generated/maxloc1_8_i2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "3abd6ab6e1318f2a5e92d765610514fb9ecb5353", "filename": "libgfortran/generated/maxloc1_8_i4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "57fcae0e48d13e90b98b7548967fb67894adf6ac", "filename": "libgfortran/generated/maxloc1_8_i8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "ca8047e5ccaeccd45c59f5d66df7fd191ddabe02", "filename": "libgfortran/generated/maxloc1_8_r10.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "12ab66698988bc5a6dc0d644a01889f2af772ec5", "filename": "libgfortran/generated/maxloc1_8_r16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "479660e6e425369b9a8f1d0ff57c01824c196b53", "filename": "libgfortran/generated/maxloc1_8_r4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "6f47a15415d446a807d4f661430a74ab14dcde2c", "filename": "libgfortran/generated/maxloc1_8_r8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ maxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "cb429016ce47069273406087d65f0bc413933fba", "filename": "libgfortran/generated/maxval_i1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i1.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ maxval_i1 (gfc_array_i1 * const restrict retarray,\n \t\tif (*src > result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "4f11635a0f616d698679785ec7c1b6417cb6a573", "filename": "libgfortran/generated/maxval_i16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ maxval_i16 (gfc_array_i16 * const restrict retarray,\n \t\tif (*src > result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "8fb385688d879e6ddbf69c425ffe7331cb51c8f7", "filename": "libgfortran/generated/maxval_i2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i2.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ maxval_i2 (gfc_array_i2 * const restrict retarray,\n \t\tif (*src > result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "c67d0cb69868e6832df0dcd31d35ccaba8bd0fb9", "filename": "libgfortran/generated/maxval_i4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ maxval_i4 (gfc_array_i4 * const restrict retarray,\n \t\tif (*src > result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "b2f33ddde86abaa3505cbbd306e975df9bc63a71", "filename": "libgfortran/generated/maxval_i8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ maxval_i8 (gfc_array_i8 * const restrict retarray,\n \t\tif (*src > result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "75c45f93a5a1a72f40c36e539431fcd9a5cbf3bc", "filename": "libgfortran/generated/maxval_r10.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r10.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ maxval_r10 (gfc_array_r10 * const restrict retarray,\n \t\tif (*src > result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "4ade432b297f0df4f6b79da29fd7ab18b780719c", "filename": "libgfortran/generated/maxval_r16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ maxval_r16 (gfc_array_r16 * const restrict retarray,\n \t\tif (*src > result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "567ad3b40086194c97c5bec0a7dc7e0ebeb63823", "filename": "libgfortran/generated/maxval_r4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ maxval_r4 (gfc_array_r4 * const restrict retarray,\n \t\tif (*src > result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "196021cf0c2bf2ee468573bff38b5e1b02d1dbc2", "filename": "libgfortran/generated/maxval_r8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fmaxval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MAXVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ maxval_r8 (gfc_array_r8 * const restrict retarray,\n \t\tif (*src > result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "a287fee23c04aabd0c228dd422a1cae2780d0518", "filename": "libgfortran/generated/minloc1_16_i1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i1.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "852118813b63635fee184968fe870bcdae039ce5", "filename": "libgfortran/generated/minloc1_16_i16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "f7c951c7b40bfc257282b7fbbc64686257af5dd0", "filename": "libgfortran/generated/minloc1_16_i2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i2.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "98ec8996daf79403c96cfab542239c242ab05946", "filename": "libgfortran/generated/minloc1_16_i4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "ab0a296b7afadf775ef1188f707f83cf9216bfaf", "filename": "libgfortran/generated/minloc1_16_i8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "5fe952cebc484d766974f1ba4de588f68a27a83e", "filename": "libgfortran/generated/minloc1_16_r10.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r10.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "d68cc7aab36b333450a2dc03f4897034dc812525", "filename": "libgfortran/generated/minloc1_16_r16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "8207441618eff38d9825114ae38d6039eaf1bec8", "filename": "libgfortran/generated/minloc1_16_r4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "72bfcce648888d542f1c9cadb34de21de79a044b", "filename": "libgfortran/generated/minloc1_16_r8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_16)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "631645f6b08a727eff94b1fc957e1c9c1db8da15", "filename": "libgfortran/generated/minloc1_4_i1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i1.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "2096589cfec4ff8b65dca1706b3dd8551b976087", "filename": "libgfortran/generated/minloc1_4_i16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "2bdedd82d3a4f4c195552194fbb6751fcfcdf3b6", "filename": "libgfortran/generated/minloc1_4_i2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i2.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "513b0cf8ec6e1f1c1bcb0260be8c332977e3bf2b", "filename": "libgfortran/generated/minloc1_4_i4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "c15914bc7b09c08aa53fd39caf3390e55fedf4e4", "filename": "libgfortran/generated/minloc1_4_i8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "f60262ac42a9303ce7e44f306ac51acbed493a69", "filename": "libgfortran/generated/minloc1_4_r10.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r10.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "e0c1e6b262dee1deb9e631716d91c23497c29d8a", "filename": "libgfortran/generated/minloc1_4_r16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "31104510b28ecd5ce7a5dd60c790bd511dc11f11", "filename": "libgfortran/generated/minloc1_4_r4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "4888dd72f3d5b4f58101d030a0c16479ab41e7fb", "filename": "libgfortran/generated/minloc1_4_r8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_4)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "953460d33be26bad649c82847967de897eaa32f2", "filename": "libgfortran/generated/minloc1_8_i1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i1.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "9ac6de055b8b36d10aeaa984a032f782137b6851", "filename": "libgfortran/generated/minloc1_8_i16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "7f4db40983150fb94e4cf0a10b077f58c79b33fe", "filename": "libgfortran/generated/minloc1_8_i2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i2.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "cb68b4b78f546bfe143e34df25b6b205d7db7db4", "filename": "libgfortran/generated/minloc1_8_i4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "e6eb5c3dc039c91a856a943e1de47e75c071ca20", "filename": "libgfortran/generated/minloc1_8_i8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "c78b092d130e44cf489506aa2c794fd343e9cd7f", "filename": "libgfortran/generated/minloc1_8_r10.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r10.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "ecd80313ca51dfc3c403c322bbe9e28f94696ff2", "filename": "libgfortran/generated/minloc1_8_r16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "053ef6f7e9a2765fe6ec5b7796b7be4991c4dbc6", "filename": "libgfortran/generated/minloc1_8_r4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "ac06ec979331617178e9e77c6dbea4d902281073", "filename": "libgfortran/generated/minloc1_8_r8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -174,6 +174,7 @@ minloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n \t\t    result = (GFC_INTEGER_8)n + 1;\n \t\t  }\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "93276f977e6bfd5bbbd8b03a66f2ce82f12f29c8", "filename": "libgfortran/generated/minval_i1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i1.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ minval_i1 (gfc_array_i1 * const restrict retarray,\n \t\tif (*src < result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "a5ff46e9a38ac1bb142866eeec2842d1938f11f3", "filename": "libgfortran/generated/minval_i16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ minval_i16 (gfc_array_i16 * const restrict retarray,\n \t\tif (*src < result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "b4e8dd556678cd7bbc2633a9d3d2731fc54ce0a5", "filename": "libgfortran/generated/minval_i2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i2.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ minval_i2 (gfc_array_i2 * const restrict retarray,\n \t\tif (*src < result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "3f9e0682b76001abaf790e0bc9fd56e7a23ffc57", "filename": "libgfortran/generated/minval_i4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ minval_i4 (gfc_array_i4 * const restrict retarray,\n \t\tif (*src < result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "725093e21ed6c2b693e72198713952730e6b2540", "filename": "libgfortran/generated/minval_i8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ minval_i8 (gfc_array_i8 * const restrict retarray,\n \t\tif (*src < result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "dacbb7094009f6a16196ed4705ebc2f2cdeba622", "filename": "libgfortran/generated/minval_r10.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r10.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ minval_r10 (gfc_array_r10 * const restrict retarray,\n \t\tif (*src < result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "93289ba0974207ead02731d38f476dab9aec1083", "filename": "libgfortran/generated/minval_r16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ minval_r16 (gfc_array_r16 * const restrict retarray,\n \t\tif (*src < result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "4d5b8b0cfb36236f8eaa64af1f8a6fbd6a37f86d", "filename": "libgfortran/generated/minval_r4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ minval_r4 (gfc_array_r4 * const restrict retarray,\n \t\tif (*src < result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "7b0fdb88fb750b3295b8a42353a3959236ab2c71", "filename": "libgfortran/generated/minval_r8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fminval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the MINVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -166,6 +166,7 @@ minval_r8 (gfc_array_r8 * const restrict retarray,\n \t\tif (*src < result)\n \t\t  result = *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "64cf404e0a653d094183fa4c01d9e0ff7e836c64", "filename": "libgfortran/generated/norm2_r10.c", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fnorm2_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fnorm2_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r10.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,208 @@\n+/* Implementation of the NORM2 intrinsic\n+   Copyright 2010 Free Software Foundation, Inc.\n+   Contributed by Tobias Burnus  <burnus@net-b.de>\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+#include <stdlib.h>\n+#include <math.h>\n+#include <assert.h>\n+\n+\n+#if defined (HAVE_GFC_REAL_10) && defined (HAVE_GFC_REAL_10)\n+\n+\n+extern void norm2_r10 (gfc_array_r10 * const restrict, \n+\tgfc_array_r10 * const restrict, const index_type * const restrict);\n+export_proto(norm2_r10);\n+\n+void\n+norm2_r10 (gfc_array_r10 * const restrict retarray, \n+\tgfc_array_r10 * const restrict array, \n+\tconst index_type * const restrict pdim)\n+{\n+  index_type count[GFC_MAX_DIMENSIONS];\n+  index_type extent[GFC_MAX_DIMENSIONS];\n+  index_type sstride[GFC_MAX_DIMENSIONS];\n+  index_type dstride[GFC_MAX_DIMENSIONS];\n+  const GFC_REAL_10 * restrict base;\n+  GFC_REAL_10 * restrict dest;\n+  index_type rank;\n+  index_type n;\n+  index_type len;\n+  index_type delta;\n+  index_type dim;\n+  int continue_loop;\n+\n+  /* Make dim zero based to avoid confusion.  */\n+  dim = (*pdim) - 1;\n+  rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+\n+  len = GFC_DESCRIPTOR_EXTENT(array,dim);\n+  if (len < 0)\n+    len = 0;\n+  delta = GFC_DESCRIPTOR_STRIDE(array,dim);\n+\n+  for (n = 0; n < dim; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array,n);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+  for (n = dim; n < rank; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array, n + 1);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array, n + 1);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+\n+  if (retarray->data == NULL)\n+    {\n+      size_t alloc_size, str;\n+\n+      for (n = 0; n < rank; n++)\n+\t{\n+\t  if (n == 0)\n+\t    str = 1;\n+\t  else\n+\t    str = GFC_DESCRIPTOR_STRIDE(retarray,n-1) * extent[n-1];\n+\n+\t  GFC_DIMENSION_SET(retarray->dim[n], 0, extent[n] - 1, str);\n+\n+\t}\n+\n+      retarray->offset = 0;\n+      retarray->dtype = (array->dtype & ~GFC_DTYPE_RANK_MASK) | rank;\n+\n+      alloc_size = sizeof (GFC_REAL_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n+    \t\t   * extent[rank-1];\n+\n+      if (alloc_size == 0)\n+\t{\n+\t  /* Make sure we have a zero-sized array.  */\n+\t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n+\t  return;\n+\n+\t}\n+      else\n+\tretarray->data = internal_malloc_size (alloc_size);\n+    }\n+  else\n+    {\n+      if (rank != GFC_DESCRIPTOR_RANK (retarray))\n+\truntime_error (\"rank of return array incorrect in\"\n+\t\t       \" NORM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n+\n+      if (unlikely (compile_options.bounds_check))\n+\tbounds_ifunction_return ((array_t *) retarray, extent,\n+\t\t\t\t \"return value\", \"NORM\");\n+    }\n+\n+  for (n = 0; n < rank; n++)\n+    {\n+      count[n] = 0;\n+      dstride[n] = GFC_DESCRIPTOR_STRIDE(retarray,n);\n+      if (extent[n] <= 0)\n+\tlen = 0;\n+    }\n+\n+  base = array->data;\n+  dest = retarray->data;\n+\n+  continue_loop = 1;\n+  while (continue_loop)\n+    {\n+      const GFC_REAL_10 * restrict src;\n+      GFC_REAL_10 result;\n+      src = base;\n+      {\n+\n+\tGFC_REAL_10 scale;\n+\tresult = 0.0L;\n+\tscale = 1.0L;\n+\tif (len <= 0)\n+\t  *dest = 0.0L;\n+\telse\n+\t  {\n+\t    for (n = 0; n < len; n++, src += delta)\n+\t      {\n+\n+\t  if (*src != 0.0L)\n+\t    {\n+\t      GFC_REAL_10 absX, val;\n+\t      absX = fabsl (*src);\n+\t      if (scale < absX)\n+\t\t{\n+\t\t  val = scale / absX;\n+\t\t  result = 1.0L + result * val * val;\n+\t\t  scale = absX;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  val = absX / scale;\n+\t\t  result += val * val;\n+\t\t}\n+\t    }\n+\t      }\n+\t    result = scale * sqrtl (result);\n+\t    *dest = result;\n+\t  }\n+      }\n+      /* Advance to the next element.  */\n+      count[0]++;\n+      base += sstride[0];\n+      dest += dstride[0];\n+      n = 0;\n+      while (count[n] == extent[n])\n+\t{\n+\t  /* When we get to the end of a dimension, reset it and increment\n+\t     the next dimension.  */\n+\t  count[n] = 0;\n+\t  /* We could precalculate these products, but this is a less\n+\t     frequently used path so probably not worth it.  */\n+\t  base -= sstride[n] * extent[n];\n+\t  dest -= dstride[n] * extent[n];\n+\t  n++;\n+\t  if (n == rank)\n+\t    {\n+\t      /* Break out of the look.  */\n+\t      continue_loop = 0;\n+\t      break;\n+\t    }\n+\t  else\n+\t    {\n+\t      count[n]++;\n+\t      base += sstride[n];\n+\t      dest += dstride[n];\n+\t    }\n+\t}\n+    }\n+}\n+\n+#endif"}, {"sha": "1fc79ae278ba4bda537654376dfffab537a95a4e", "filename": "libgfortran/generated/norm2_r16.c", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fnorm2_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fnorm2_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,208 @@\n+/* Implementation of the NORM2 intrinsic\n+   Copyright 2010 Free Software Foundation, Inc.\n+   Contributed by Tobias Burnus  <burnus@net-b.de>\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+#include <stdlib.h>\n+#include <math.h>\n+#include <assert.h>\n+\n+\n+#if defined (HAVE_GFC_REAL_16) && defined (HAVE_GFC_REAL_16)\n+\n+\n+extern void norm2_r16 (gfc_array_r16 * const restrict, \n+\tgfc_array_r16 * const restrict, const index_type * const restrict);\n+export_proto(norm2_r16);\n+\n+void\n+norm2_r16 (gfc_array_r16 * const restrict retarray, \n+\tgfc_array_r16 * const restrict array, \n+\tconst index_type * const restrict pdim)\n+{\n+  index_type count[GFC_MAX_DIMENSIONS];\n+  index_type extent[GFC_MAX_DIMENSIONS];\n+  index_type sstride[GFC_MAX_DIMENSIONS];\n+  index_type dstride[GFC_MAX_DIMENSIONS];\n+  const GFC_REAL_16 * restrict base;\n+  GFC_REAL_16 * restrict dest;\n+  index_type rank;\n+  index_type n;\n+  index_type len;\n+  index_type delta;\n+  index_type dim;\n+  int continue_loop;\n+\n+  /* Make dim zero based to avoid confusion.  */\n+  dim = (*pdim) - 1;\n+  rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+\n+  len = GFC_DESCRIPTOR_EXTENT(array,dim);\n+  if (len < 0)\n+    len = 0;\n+  delta = GFC_DESCRIPTOR_STRIDE(array,dim);\n+\n+  for (n = 0; n < dim; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array,n);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+  for (n = dim; n < rank; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array, n + 1);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array, n + 1);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+\n+  if (retarray->data == NULL)\n+    {\n+      size_t alloc_size, str;\n+\n+      for (n = 0; n < rank; n++)\n+\t{\n+\t  if (n == 0)\n+\t    str = 1;\n+\t  else\n+\t    str = GFC_DESCRIPTOR_STRIDE(retarray,n-1) * extent[n-1];\n+\n+\t  GFC_DIMENSION_SET(retarray->dim[n], 0, extent[n] - 1, str);\n+\n+\t}\n+\n+      retarray->offset = 0;\n+      retarray->dtype = (array->dtype & ~GFC_DTYPE_RANK_MASK) | rank;\n+\n+      alloc_size = sizeof (GFC_REAL_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n+    \t\t   * extent[rank-1];\n+\n+      if (alloc_size == 0)\n+\t{\n+\t  /* Make sure we have a zero-sized array.  */\n+\t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n+\t  return;\n+\n+\t}\n+      else\n+\tretarray->data = internal_malloc_size (alloc_size);\n+    }\n+  else\n+    {\n+      if (rank != GFC_DESCRIPTOR_RANK (retarray))\n+\truntime_error (\"rank of return array incorrect in\"\n+\t\t       \" NORM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n+\n+      if (unlikely (compile_options.bounds_check))\n+\tbounds_ifunction_return ((array_t *) retarray, extent,\n+\t\t\t\t \"return value\", \"NORM\");\n+    }\n+\n+  for (n = 0; n < rank; n++)\n+    {\n+      count[n] = 0;\n+      dstride[n] = GFC_DESCRIPTOR_STRIDE(retarray,n);\n+      if (extent[n] <= 0)\n+\tlen = 0;\n+    }\n+\n+  base = array->data;\n+  dest = retarray->data;\n+\n+  continue_loop = 1;\n+  while (continue_loop)\n+    {\n+      const GFC_REAL_16 * restrict src;\n+      GFC_REAL_16 result;\n+      src = base;\n+      {\n+\n+\tGFC_REAL_16 scale;\n+\tresult = 0.0L;\n+\tscale = 1.0L;\n+\tif (len <= 0)\n+\t  *dest = 0.0L;\n+\telse\n+\t  {\n+\t    for (n = 0; n < len; n++, src += delta)\n+\t      {\n+\n+\t  if (*src != 0.0L)\n+\t    {\n+\t      GFC_REAL_16 absX, val;\n+\t      absX = fabsl (*src);\n+\t      if (scale < absX)\n+\t\t{\n+\t\t  val = scale / absX;\n+\t\t  result = 1.0L + result * val * val;\n+\t\t  scale = absX;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  val = absX / scale;\n+\t\t  result += val * val;\n+\t\t}\n+\t    }\n+\t      }\n+\t    result = scale * sqrtl (result);\n+\t    *dest = result;\n+\t  }\n+      }\n+      /* Advance to the next element.  */\n+      count[0]++;\n+      base += sstride[0];\n+      dest += dstride[0];\n+      n = 0;\n+      while (count[n] == extent[n])\n+\t{\n+\t  /* When we get to the end of a dimension, reset it and increment\n+\t     the next dimension.  */\n+\t  count[n] = 0;\n+\t  /* We could precalculate these products, but this is a less\n+\t     frequently used path so probably not worth it.  */\n+\t  base -= sstride[n] * extent[n];\n+\t  dest -= dstride[n] * extent[n];\n+\t  n++;\n+\t  if (n == rank)\n+\t    {\n+\t      /* Break out of the look.  */\n+\t      continue_loop = 0;\n+\t      break;\n+\t    }\n+\t  else\n+\t    {\n+\t      count[n]++;\n+\t      base += sstride[n];\n+\t      dest += dstride[n];\n+\t    }\n+\t}\n+    }\n+}\n+\n+#endif"}, {"sha": "78f28dc77fd08bb1fad004cb79995e51e99d9175", "filename": "libgfortran/generated/norm2_r4.c", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fnorm2_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fnorm2_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,208 @@\n+/* Implementation of the NORM2 intrinsic\n+   Copyright 2010 Free Software Foundation, Inc.\n+   Contributed by Tobias Burnus  <burnus@net-b.de>\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+#include <stdlib.h>\n+#include <math.h>\n+#include <assert.h>\n+\n+\n+#if defined (HAVE_GFC_REAL_4) && defined (HAVE_GFC_REAL_4)\n+\n+\n+extern void norm2_r4 (gfc_array_r4 * const restrict, \n+\tgfc_array_r4 * const restrict, const index_type * const restrict);\n+export_proto(norm2_r4);\n+\n+void\n+norm2_r4 (gfc_array_r4 * const restrict retarray, \n+\tgfc_array_r4 * const restrict array, \n+\tconst index_type * const restrict pdim)\n+{\n+  index_type count[GFC_MAX_DIMENSIONS];\n+  index_type extent[GFC_MAX_DIMENSIONS];\n+  index_type sstride[GFC_MAX_DIMENSIONS];\n+  index_type dstride[GFC_MAX_DIMENSIONS];\n+  const GFC_REAL_4 * restrict base;\n+  GFC_REAL_4 * restrict dest;\n+  index_type rank;\n+  index_type n;\n+  index_type len;\n+  index_type delta;\n+  index_type dim;\n+  int continue_loop;\n+\n+  /* Make dim zero based to avoid confusion.  */\n+  dim = (*pdim) - 1;\n+  rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+\n+  len = GFC_DESCRIPTOR_EXTENT(array,dim);\n+  if (len < 0)\n+    len = 0;\n+  delta = GFC_DESCRIPTOR_STRIDE(array,dim);\n+\n+  for (n = 0; n < dim; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array,n);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+  for (n = dim; n < rank; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array, n + 1);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array, n + 1);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+\n+  if (retarray->data == NULL)\n+    {\n+      size_t alloc_size, str;\n+\n+      for (n = 0; n < rank; n++)\n+\t{\n+\t  if (n == 0)\n+\t    str = 1;\n+\t  else\n+\t    str = GFC_DESCRIPTOR_STRIDE(retarray,n-1) * extent[n-1];\n+\n+\t  GFC_DIMENSION_SET(retarray->dim[n], 0, extent[n] - 1, str);\n+\n+\t}\n+\n+      retarray->offset = 0;\n+      retarray->dtype = (array->dtype & ~GFC_DTYPE_RANK_MASK) | rank;\n+\n+      alloc_size = sizeof (GFC_REAL_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n+    \t\t   * extent[rank-1];\n+\n+      if (alloc_size == 0)\n+\t{\n+\t  /* Make sure we have a zero-sized array.  */\n+\t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n+\t  return;\n+\n+\t}\n+      else\n+\tretarray->data = internal_malloc_size (alloc_size);\n+    }\n+  else\n+    {\n+      if (rank != GFC_DESCRIPTOR_RANK (retarray))\n+\truntime_error (\"rank of return array incorrect in\"\n+\t\t       \" NORM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n+\n+      if (unlikely (compile_options.bounds_check))\n+\tbounds_ifunction_return ((array_t *) retarray, extent,\n+\t\t\t\t \"return value\", \"NORM\");\n+    }\n+\n+  for (n = 0; n < rank; n++)\n+    {\n+      count[n] = 0;\n+      dstride[n] = GFC_DESCRIPTOR_STRIDE(retarray,n);\n+      if (extent[n] <= 0)\n+\tlen = 0;\n+    }\n+\n+  base = array->data;\n+  dest = retarray->data;\n+\n+  continue_loop = 1;\n+  while (continue_loop)\n+    {\n+      const GFC_REAL_4 * restrict src;\n+      GFC_REAL_4 result;\n+      src = base;\n+      {\n+\n+\tGFC_REAL_4 scale;\n+\tresult = 0.0F;\n+\tscale = 1.0F;\n+\tif (len <= 0)\n+\t  *dest = 0.0F;\n+\telse\n+\t  {\n+\t    for (n = 0; n < len; n++, src += delta)\n+\t      {\n+\n+\t  if (*src != 0.0F)\n+\t    {\n+\t      GFC_REAL_4 absX, val;\n+\t      absX = fabsf (*src);\n+\t      if (scale < absX)\n+\t\t{\n+\t\t  val = scale / absX;\n+\t\t  result = 1.0F + result * val * val;\n+\t\t  scale = absX;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  val = absX / scale;\n+\t\t  result += val * val;\n+\t\t}\n+\t    }\n+\t      }\n+\t    result = scale * sqrtf (result);\n+\t    *dest = result;\n+\t  }\n+      }\n+      /* Advance to the next element.  */\n+      count[0]++;\n+      base += sstride[0];\n+      dest += dstride[0];\n+      n = 0;\n+      while (count[n] == extent[n])\n+\t{\n+\t  /* When we get to the end of a dimension, reset it and increment\n+\t     the next dimension.  */\n+\t  count[n] = 0;\n+\t  /* We could precalculate these products, but this is a less\n+\t     frequently used path so probably not worth it.  */\n+\t  base -= sstride[n] * extent[n];\n+\t  dest -= dstride[n] * extent[n];\n+\t  n++;\n+\t  if (n == rank)\n+\t    {\n+\t      /* Break out of the look.  */\n+\t      continue_loop = 0;\n+\t      break;\n+\t    }\n+\t  else\n+\t    {\n+\t      count[n]++;\n+\t      base += sstride[n];\n+\t      dest += dstride[n];\n+\t    }\n+\t}\n+    }\n+}\n+\n+#endif"}, {"sha": "fd9aba7416d211ef7dd0dccf4565ba39ce9a1c06", "filename": "libgfortran/generated/norm2_r8.c", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fnorm2_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fnorm2_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,208 @@\n+/* Implementation of the NORM2 intrinsic\n+   Copyright 2010 Free Software Foundation, Inc.\n+   Contributed by Tobias Burnus  <burnus@net-b.de>\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+#include <stdlib.h>\n+#include <math.h>\n+#include <assert.h>\n+\n+\n+#if defined (HAVE_GFC_REAL_8) && defined (HAVE_GFC_REAL_8)\n+\n+\n+extern void norm2_r8 (gfc_array_r8 * const restrict, \n+\tgfc_array_r8 * const restrict, const index_type * const restrict);\n+export_proto(norm2_r8);\n+\n+void\n+norm2_r8 (gfc_array_r8 * const restrict retarray, \n+\tgfc_array_r8 * const restrict array, \n+\tconst index_type * const restrict pdim)\n+{\n+  index_type count[GFC_MAX_DIMENSIONS];\n+  index_type extent[GFC_MAX_DIMENSIONS];\n+  index_type sstride[GFC_MAX_DIMENSIONS];\n+  index_type dstride[GFC_MAX_DIMENSIONS];\n+  const GFC_REAL_8 * restrict base;\n+  GFC_REAL_8 * restrict dest;\n+  index_type rank;\n+  index_type n;\n+  index_type len;\n+  index_type delta;\n+  index_type dim;\n+  int continue_loop;\n+\n+  /* Make dim zero based to avoid confusion.  */\n+  dim = (*pdim) - 1;\n+  rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+\n+  len = GFC_DESCRIPTOR_EXTENT(array,dim);\n+  if (len < 0)\n+    len = 0;\n+  delta = GFC_DESCRIPTOR_STRIDE(array,dim);\n+\n+  for (n = 0; n < dim; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array,n);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+  for (n = dim; n < rank; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array, n + 1);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array, n + 1);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+\n+  if (retarray->data == NULL)\n+    {\n+      size_t alloc_size, str;\n+\n+      for (n = 0; n < rank; n++)\n+\t{\n+\t  if (n == 0)\n+\t    str = 1;\n+\t  else\n+\t    str = GFC_DESCRIPTOR_STRIDE(retarray,n-1) * extent[n-1];\n+\n+\t  GFC_DIMENSION_SET(retarray->dim[n], 0, extent[n] - 1, str);\n+\n+\t}\n+\n+      retarray->offset = 0;\n+      retarray->dtype = (array->dtype & ~GFC_DTYPE_RANK_MASK) | rank;\n+\n+      alloc_size = sizeof (GFC_REAL_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n+    \t\t   * extent[rank-1];\n+\n+      if (alloc_size == 0)\n+\t{\n+\t  /* Make sure we have a zero-sized array.  */\n+\t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n+\t  return;\n+\n+\t}\n+      else\n+\tretarray->data = internal_malloc_size (alloc_size);\n+    }\n+  else\n+    {\n+      if (rank != GFC_DESCRIPTOR_RANK (retarray))\n+\truntime_error (\"rank of return array incorrect in\"\n+\t\t       \" NORM intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n+\n+      if (unlikely (compile_options.bounds_check))\n+\tbounds_ifunction_return ((array_t *) retarray, extent,\n+\t\t\t\t \"return value\", \"NORM\");\n+    }\n+\n+  for (n = 0; n < rank; n++)\n+    {\n+      count[n] = 0;\n+      dstride[n] = GFC_DESCRIPTOR_STRIDE(retarray,n);\n+      if (extent[n] <= 0)\n+\tlen = 0;\n+    }\n+\n+  base = array->data;\n+  dest = retarray->data;\n+\n+  continue_loop = 1;\n+  while (continue_loop)\n+    {\n+      const GFC_REAL_8 * restrict src;\n+      GFC_REAL_8 result;\n+      src = base;\n+      {\n+\n+\tGFC_REAL_8 scale;\n+\tresult = 0.0;\n+\tscale = 1.0;\n+\tif (len <= 0)\n+\t  *dest = 0.0;\n+\telse\n+\t  {\n+\t    for (n = 0; n < len; n++, src += delta)\n+\t      {\n+\n+\t  if (*src != 0.0)\n+\t    {\n+\t      GFC_REAL_8 absX, val;\n+\t      absX = fabs (*src);\n+\t      if (scale < absX)\n+\t\t{\n+\t\t  val = scale / absX;\n+\t\t  result = 1.0 + result * val * val;\n+\t\t  scale = absX;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  val = absX / scale;\n+\t\t  result += val * val;\n+\t\t}\n+\t    }\n+\t      }\n+\t    result = scale * sqrt (result);\n+\t    *dest = result;\n+\t  }\n+      }\n+      /* Advance to the next element.  */\n+      count[0]++;\n+      base += sstride[0];\n+      dest += dstride[0];\n+      n = 0;\n+      while (count[n] == extent[n])\n+\t{\n+\t  /* When we get to the end of a dimension, reset it and increment\n+\t     the next dimension.  */\n+\t  count[n] = 0;\n+\t  /* We could precalculate these products, but this is a less\n+\t     frequently used path so probably not worth it.  */\n+\t  base -= sstride[n] * extent[n];\n+\t  dest -= dstride[n] * extent[n];\n+\t  n++;\n+\t  if (n == rank)\n+\t    {\n+\t      /* Break out of the look.  */\n+\t      continue_loop = 0;\n+\t      break;\n+\t    }\n+\t  else\n+\t    {\n+\t      count[n]++;\n+\t      base += sstride[n];\n+\t      dest += dstride[n];\n+\t    }\n+\t}\n+    }\n+}\n+\n+#endif"}, {"sha": "4fef27744950a1dc771469725cbc1e7f77a7ec51", "filename": "libgfortran/generated/parity_l1.c", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fparity_l1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fparity_l1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l1.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,191 @@\n+/* Implementation of the NORM2 intrinsic\n+   Copyright 2010 Free Software Foundation, Inc.\n+   Contributed by Tobias Burnus  <burnus@net-b.de>\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+#include <stdlib.h>\n+#include <math.h>\n+#include <assert.h>\n+\n+\n+#if defined (HAVE_GFC_LOGICAL_1) && defined (HAVE_GFC_LOGICAL_1)\n+\n+\n+extern void parity_l1 (gfc_array_l1 * const restrict, \n+\tgfc_array_l1 * const restrict, const index_type * const restrict);\n+export_proto(parity_l1);\n+\n+void\n+parity_l1 (gfc_array_l1 * const restrict retarray, \n+\tgfc_array_l1 * const restrict array, \n+\tconst index_type * const restrict pdim)\n+{\n+  index_type count[GFC_MAX_DIMENSIONS];\n+  index_type extent[GFC_MAX_DIMENSIONS];\n+  index_type sstride[GFC_MAX_DIMENSIONS];\n+  index_type dstride[GFC_MAX_DIMENSIONS];\n+  const GFC_LOGICAL_1 * restrict base;\n+  GFC_LOGICAL_1 * restrict dest;\n+  index_type rank;\n+  index_type n;\n+  index_type len;\n+  index_type delta;\n+  index_type dim;\n+  int continue_loop;\n+\n+  /* Make dim zero based to avoid confusion.  */\n+  dim = (*pdim) - 1;\n+  rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+\n+  len = GFC_DESCRIPTOR_EXTENT(array,dim);\n+  if (len < 0)\n+    len = 0;\n+  delta = GFC_DESCRIPTOR_STRIDE(array,dim);\n+\n+  for (n = 0; n < dim; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array,n);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+  for (n = dim; n < rank; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array, n + 1);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array, n + 1);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+\n+  if (retarray->data == NULL)\n+    {\n+      size_t alloc_size, str;\n+\n+      for (n = 0; n < rank; n++)\n+\t{\n+\t  if (n == 0)\n+\t    str = 1;\n+\t  else\n+\t    str = GFC_DESCRIPTOR_STRIDE(retarray,n-1) * extent[n-1];\n+\n+\t  GFC_DIMENSION_SET(retarray->dim[n], 0, extent[n] - 1, str);\n+\n+\t}\n+\n+      retarray->offset = 0;\n+      retarray->dtype = (array->dtype & ~GFC_DTYPE_RANK_MASK) | rank;\n+\n+      alloc_size = sizeof (GFC_LOGICAL_1) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n+    \t\t   * extent[rank-1];\n+\n+      if (alloc_size == 0)\n+\t{\n+\t  /* Make sure we have a zero-sized array.  */\n+\t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n+\t  return;\n+\n+\t}\n+      else\n+\tretarray->data = internal_malloc_size (alloc_size);\n+    }\n+  else\n+    {\n+      if (rank != GFC_DESCRIPTOR_RANK (retarray))\n+\truntime_error (\"rank of return array incorrect in\"\n+\t\t       \" PARITY intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n+\n+      if (unlikely (compile_options.bounds_check))\n+\tbounds_ifunction_return ((array_t *) retarray, extent,\n+\t\t\t\t \"return value\", \"PARITY\");\n+    }\n+\n+  for (n = 0; n < rank; n++)\n+    {\n+      count[n] = 0;\n+      dstride[n] = GFC_DESCRIPTOR_STRIDE(retarray,n);\n+      if (extent[n] <= 0)\n+\tlen = 0;\n+    }\n+\n+  base = array->data;\n+  dest = retarray->data;\n+\n+  continue_loop = 1;\n+  while (continue_loop)\n+    {\n+      const GFC_LOGICAL_1 * restrict src;\n+      GFC_LOGICAL_1 result;\n+      src = base;\n+      {\n+\n+  result = 0;\n+\tif (len <= 0)\n+\t  *dest = 0;\n+\telse\n+\t  {\n+\t    for (n = 0; n < len; n++, src += delta)\n+\t      {\n+\n+  result = result != *src;\n+\t      }\n+\t    \n+\t    *dest = result;\n+\t  }\n+      }\n+      /* Advance to the next element.  */\n+      count[0]++;\n+      base += sstride[0];\n+      dest += dstride[0];\n+      n = 0;\n+      while (count[n] == extent[n])\n+\t{\n+\t  /* When we get to the end of a dimension, reset it and increment\n+\t     the next dimension.  */\n+\t  count[n] = 0;\n+\t  /* We could precalculate these products, but this is a less\n+\t     frequently used path so probably not worth it.  */\n+\t  base -= sstride[n] * extent[n];\n+\t  dest -= dstride[n] * extent[n];\n+\t  n++;\n+\t  if (n == rank)\n+\t    {\n+\t      /* Break out of the look.  */\n+\t      continue_loop = 0;\n+\t      break;\n+\t    }\n+\t  else\n+\t    {\n+\t      count[n]++;\n+\t      base += sstride[n];\n+\t      dest += dstride[n];\n+\t    }\n+\t}\n+    }\n+}\n+\n+#endif"}, {"sha": "45f4457161fcde8e7d3eb59ce0d76cbd2b7edd6b", "filename": "libgfortran/generated/parity_l16.c", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fparity_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fparity_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,191 @@\n+/* Implementation of the NORM2 intrinsic\n+   Copyright 2010 Free Software Foundation, Inc.\n+   Contributed by Tobias Burnus  <burnus@net-b.de>\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+#include <stdlib.h>\n+#include <math.h>\n+#include <assert.h>\n+\n+\n+#if defined (HAVE_GFC_LOGICAL_16) && defined (HAVE_GFC_LOGICAL_16)\n+\n+\n+extern void parity_l16 (gfc_array_l16 * const restrict, \n+\tgfc_array_l16 * const restrict, const index_type * const restrict);\n+export_proto(parity_l16);\n+\n+void\n+parity_l16 (gfc_array_l16 * const restrict retarray, \n+\tgfc_array_l16 * const restrict array, \n+\tconst index_type * const restrict pdim)\n+{\n+  index_type count[GFC_MAX_DIMENSIONS];\n+  index_type extent[GFC_MAX_DIMENSIONS];\n+  index_type sstride[GFC_MAX_DIMENSIONS];\n+  index_type dstride[GFC_MAX_DIMENSIONS];\n+  const GFC_LOGICAL_16 * restrict base;\n+  GFC_LOGICAL_16 * restrict dest;\n+  index_type rank;\n+  index_type n;\n+  index_type len;\n+  index_type delta;\n+  index_type dim;\n+  int continue_loop;\n+\n+  /* Make dim zero based to avoid confusion.  */\n+  dim = (*pdim) - 1;\n+  rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+\n+  len = GFC_DESCRIPTOR_EXTENT(array,dim);\n+  if (len < 0)\n+    len = 0;\n+  delta = GFC_DESCRIPTOR_STRIDE(array,dim);\n+\n+  for (n = 0; n < dim; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array,n);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+  for (n = dim; n < rank; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array, n + 1);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array, n + 1);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+\n+  if (retarray->data == NULL)\n+    {\n+      size_t alloc_size, str;\n+\n+      for (n = 0; n < rank; n++)\n+\t{\n+\t  if (n == 0)\n+\t    str = 1;\n+\t  else\n+\t    str = GFC_DESCRIPTOR_STRIDE(retarray,n-1) * extent[n-1];\n+\n+\t  GFC_DIMENSION_SET(retarray->dim[n], 0, extent[n] - 1, str);\n+\n+\t}\n+\n+      retarray->offset = 0;\n+      retarray->dtype = (array->dtype & ~GFC_DTYPE_RANK_MASK) | rank;\n+\n+      alloc_size = sizeof (GFC_LOGICAL_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n+    \t\t   * extent[rank-1];\n+\n+      if (alloc_size == 0)\n+\t{\n+\t  /* Make sure we have a zero-sized array.  */\n+\t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n+\t  return;\n+\n+\t}\n+      else\n+\tretarray->data = internal_malloc_size (alloc_size);\n+    }\n+  else\n+    {\n+      if (rank != GFC_DESCRIPTOR_RANK (retarray))\n+\truntime_error (\"rank of return array incorrect in\"\n+\t\t       \" PARITY intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n+\n+      if (unlikely (compile_options.bounds_check))\n+\tbounds_ifunction_return ((array_t *) retarray, extent,\n+\t\t\t\t \"return value\", \"PARITY\");\n+    }\n+\n+  for (n = 0; n < rank; n++)\n+    {\n+      count[n] = 0;\n+      dstride[n] = GFC_DESCRIPTOR_STRIDE(retarray,n);\n+      if (extent[n] <= 0)\n+\tlen = 0;\n+    }\n+\n+  base = array->data;\n+  dest = retarray->data;\n+\n+  continue_loop = 1;\n+  while (continue_loop)\n+    {\n+      const GFC_LOGICAL_16 * restrict src;\n+      GFC_LOGICAL_16 result;\n+      src = base;\n+      {\n+\n+  result = 0;\n+\tif (len <= 0)\n+\t  *dest = 0;\n+\telse\n+\t  {\n+\t    for (n = 0; n < len; n++, src += delta)\n+\t      {\n+\n+  result = result != *src;\n+\t      }\n+\t    \n+\t    *dest = result;\n+\t  }\n+      }\n+      /* Advance to the next element.  */\n+      count[0]++;\n+      base += sstride[0];\n+      dest += dstride[0];\n+      n = 0;\n+      while (count[n] == extent[n])\n+\t{\n+\t  /* When we get to the end of a dimension, reset it and increment\n+\t     the next dimension.  */\n+\t  count[n] = 0;\n+\t  /* We could precalculate these products, but this is a less\n+\t     frequently used path so probably not worth it.  */\n+\t  base -= sstride[n] * extent[n];\n+\t  dest -= dstride[n] * extent[n];\n+\t  n++;\n+\t  if (n == rank)\n+\t    {\n+\t      /* Break out of the look.  */\n+\t      continue_loop = 0;\n+\t      break;\n+\t    }\n+\t  else\n+\t    {\n+\t      count[n]++;\n+\t      base += sstride[n];\n+\t      dest += dstride[n];\n+\t    }\n+\t}\n+    }\n+}\n+\n+#endif"}, {"sha": "13e77bd52e0e51d0867fc70f42e884064ccd1174", "filename": "libgfortran/generated/parity_l2.c", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fparity_l2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fparity_l2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l2.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,191 @@\n+/* Implementation of the NORM2 intrinsic\n+   Copyright 2010 Free Software Foundation, Inc.\n+   Contributed by Tobias Burnus  <burnus@net-b.de>\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+#include <stdlib.h>\n+#include <math.h>\n+#include <assert.h>\n+\n+\n+#if defined (HAVE_GFC_LOGICAL_2) && defined (HAVE_GFC_LOGICAL_2)\n+\n+\n+extern void parity_l2 (gfc_array_l2 * const restrict, \n+\tgfc_array_l2 * const restrict, const index_type * const restrict);\n+export_proto(parity_l2);\n+\n+void\n+parity_l2 (gfc_array_l2 * const restrict retarray, \n+\tgfc_array_l2 * const restrict array, \n+\tconst index_type * const restrict pdim)\n+{\n+  index_type count[GFC_MAX_DIMENSIONS];\n+  index_type extent[GFC_MAX_DIMENSIONS];\n+  index_type sstride[GFC_MAX_DIMENSIONS];\n+  index_type dstride[GFC_MAX_DIMENSIONS];\n+  const GFC_LOGICAL_2 * restrict base;\n+  GFC_LOGICAL_2 * restrict dest;\n+  index_type rank;\n+  index_type n;\n+  index_type len;\n+  index_type delta;\n+  index_type dim;\n+  int continue_loop;\n+\n+  /* Make dim zero based to avoid confusion.  */\n+  dim = (*pdim) - 1;\n+  rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+\n+  len = GFC_DESCRIPTOR_EXTENT(array,dim);\n+  if (len < 0)\n+    len = 0;\n+  delta = GFC_DESCRIPTOR_STRIDE(array,dim);\n+\n+  for (n = 0; n < dim; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array,n);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+  for (n = dim; n < rank; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array, n + 1);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array, n + 1);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+\n+  if (retarray->data == NULL)\n+    {\n+      size_t alloc_size, str;\n+\n+      for (n = 0; n < rank; n++)\n+\t{\n+\t  if (n == 0)\n+\t    str = 1;\n+\t  else\n+\t    str = GFC_DESCRIPTOR_STRIDE(retarray,n-1) * extent[n-1];\n+\n+\t  GFC_DIMENSION_SET(retarray->dim[n], 0, extent[n] - 1, str);\n+\n+\t}\n+\n+      retarray->offset = 0;\n+      retarray->dtype = (array->dtype & ~GFC_DTYPE_RANK_MASK) | rank;\n+\n+      alloc_size = sizeof (GFC_LOGICAL_2) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n+    \t\t   * extent[rank-1];\n+\n+      if (alloc_size == 0)\n+\t{\n+\t  /* Make sure we have a zero-sized array.  */\n+\t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n+\t  return;\n+\n+\t}\n+      else\n+\tretarray->data = internal_malloc_size (alloc_size);\n+    }\n+  else\n+    {\n+      if (rank != GFC_DESCRIPTOR_RANK (retarray))\n+\truntime_error (\"rank of return array incorrect in\"\n+\t\t       \" PARITY intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n+\n+      if (unlikely (compile_options.bounds_check))\n+\tbounds_ifunction_return ((array_t *) retarray, extent,\n+\t\t\t\t \"return value\", \"PARITY\");\n+    }\n+\n+  for (n = 0; n < rank; n++)\n+    {\n+      count[n] = 0;\n+      dstride[n] = GFC_DESCRIPTOR_STRIDE(retarray,n);\n+      if (extent[n] <= 0)\n+\tlen = 0;\n+    }\n+\n+  base = array->data;\n+  dest = retarray->data;\n+\n+  continue_loop = 1;\n+  while (continue_loop)\n+    {\n+      const GFC_LOGICAL_2 * restrict src;\n+      GFC_LOGICAL_2 result;\n+      src = base;\n+      {\n+\n+  result = 0;\n+\tif (len <= 0)\n+\t  *dest = 0;\n+\telse\n+\t  {\n+\t    for (n = 0; n < len; n++, src += delta)\n+\t      {\n+\n+  result = result != *src;\n+\t      }\n+\t    \n+\t    *dest = result;\n+\t  }\n+      }\n+      /* Advance to the next element.  */\n+      count[0]++;\n+      base += sstride[0];\n+      dest += dstride[0];\n+      n = 0;\n+      while (count[n] == extent[n])\n+\t{\n+\t  /* When we get to the end of a dimension, reset it and increment\n+\t     the next dimension.  */\n+\t  count[n] = 0;\n+\t  /* We could precalculate these products, but this is a less\n+\t     frequently used path so probably not worth it.  */\n+\t  base -= sstride[n] * extent[n];\n+\t  dest -= dstride[n] * extent[n];\n+\t  n++;\n+\t  if (n == rank)\n+\t    {\n+\t      /* Break out of the look.  */\n+\t      continue_loop = 0;\n+\t      break;\n+\t    }\n+\t  else\n+\t    {\n+\t      count[n]++;\n+\t      base += sstride[n];\n+\t      dest += dstride[n];\n+\t    }\n+\t}\n+    }\n+}\n+\n+#endif"}, {"sha": "5d7fbbef625f3edd74b8b41b6ff31e828238ed81", "filename": "libgfortran/generated/parity_l4.c", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fparity_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fparity_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,191 @@\n+/* Implementation of the NORM2 intrinsic\n+   Copyright 2010 Free Software Foundation, Inc.\n+   Contributed by Tobias Burnus  <burnus@net-b.de>\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+#include <stdlib.h>\n+#include <math.h>\n+#include <assert.h>\n+\n+\n+#if defined (HAVE_GFC_LOGICAL_4) && defined (HAVE_GFC_LOGICAL_4)\n+\n+\n+extern void parity_l4 (gfc_array_l4 * const restrict, \n+\tgfc_array_l4 * const restrict, const index_type * const restrict);\n+export_proto(parity_l4);\n+\n+void\n+parity_l4 (gfc_array_l4 * const restrict retarray, \n+\tgfc_array_l4 * const restrict array, \n+\tconst index_type * const restrict pdim)\n+{\n+  index_type count[GFC_MAX_DIMENSIONS];\n+  index_type extent[GFC_MAX_DIMENSIONS];\n+  index_type sstride[GFC_MAX_DIMENSIONS];\n+  index_type dstride[GFC_MAX_DIMENSIONS];\n+  const GFC_LOGICAL_4 * restrict base;\n+  GFC_LOGICAL_4 * restrict dest;\n+  index_type rank;\n+  index_type n;\n+  index_type len;\n+  index_type delta;\n+  index_type dim;\n+  int continue_loop;\n+\n+  /* Make dim zero based to avoid confusion.  */\n+  dim = (*pdim) - 1;\n+  rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+\n+  len = GFC_DESCRIPTOR_EXTENT(array,dim);\n+  if (len < 0)\n+    len = 0;\n+  delta = GFC_DESCRIPTOR_STRIDE(array,dim);\n+\n+  for (n = 0; n < dim; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array,n);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+  for (n = dim; n < rank; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array, n + 1);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array, n + 1);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+\n+  if (retarray->data == NULL)\n+    {\n+      size_t alloc_size, str;\n+\n+      for (n = 0; n < rank; n++)\n+\t{\n+\t  if (n == 0)\n+\t    str = 1;\n+\t  else\n+\t    str = GFC_DESCRIPTOR_STRIDE(retarray,n-1) * extent[n-1];\n+\n+\t  GFC_DIMENSION_SET(retarray->dim[n], 0, extent[n] - 1, str);\n+\n+\t}\n+\n+      retarray->offset = 0;\n+      retarray->dtype = (array->dtype & ~GFC_DTYPE_RANK_MASK) | rank;\n+\n+      alloc_size = sizeof (GFC_LOGICAL_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n+    \t\t   * extent[rank-1];\n+\n+      if (alloc_size == 0)\n+\t{\n+\t  /* Make sure we have a zero-sized array.  */\n+\t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n+\t  return;\n+\n+\t}\n+      else\n+\tretarray->data = internal_malloc_size (alloc_size);\n+    }\n+  else\n+    {\n+      if (rank != GFC_DESCRIPTOR_RANK (retarray))\n+\truntime_error (\"rank of return array incorrect in\"\n+\t\t       \" PARITY intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n+\n+      if (unlikely (compile_options.bounds_check))\n+\tbounds_ifunction_return ((array_t *) retarray, extent,\n+\t\t\t\t \"return value\", \"PARITY\");\n+    }\n+\n+  for (n = 0; n < rank; n++)\n+    {\n+      count[n] = 0;\n+      dstride[n] = GFC_DESCRIPTOR_STRIDE(retarray,n);\n+      if (extent[n] <= 0)\n+\tlen = 0;\n+    }\n+\n+  base = array->data;\n+  dest = retarray->data;\n+\n+  continue_loop = 1;\n+  while (continue_loop)\n+    {\n+      const GFC_LOGICAL_4 * restrict src;\n+      GFC_LOGICAL_4 result;\n+      src = base;\n+      {\n+\n+  result = 0;\n+\tif (len <= 0)\n+\t  *dest = 0;\n+\telse\n+\t  {\n+\t    for (n = 0; n < len; n++, src += delta)\n+\t      {\n+\n+  result = result != *src;\n+\t      }\n+\t    \n+\t    *dest = result;\n+\t  }\n+      }\n+      /* Advance to the next element.  */\n+      count[0]++;\n+      base += sstride[0];\n+      dest += dstride[0];\n+      n = 0;\n+      while (count[n] == extent[n])\n+\t{\n+\t  /* When we get to the end of a dimension, reset it and increment\n+\t     the next dimension.  */\n+\t  count[n] = 0;\n+\t  /* We could precalculate these products, but this is a less\n+\t     frequently used path so probably not worth it.  */\n+\t  base -= sstride[n] * extent[n];\n+\t  dest -= dstride[n] * extent[n];\n+\t  n++;\n+\t  if (n == rank)\n+\t    {\n+\t      /* Break out of the look.  */\n+\t      continue_loop = 0;\n+\t      break;\n+\t    }\n+\t  else\n+\t    {\n+\t      count[n]++;\n+\t      base += sstride[n];\n+\t      dest += dstride[n];\n+\t    }\n+\t}\n+    }\n+}\n+\n+#endif"}, {"sha": "1d9ba82e09168affa0246f1064b01fb67edcb9db", "filename": "libgfortran/generated/parity_l8.c", "status": "added", "additions": 191, "deletions": 0, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fparity_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fparity_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,191 @@\n+/* Implementation of the NORM2 intrinsic\n+   Copyright 2010 Free Software Foundation, Inc.\n+   Contributed by Tobias Burnus  <burnus@net-b.de>\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+#include <stdlib.h>\n+#include <math.h>\n+#include <assert.h>\n+\n+\n+#if defined (HAVE_GFC_LOGICAL_8) && defined (HAVE_GFC_LOGICAL_8)\n+\n+\n+extern void parity_l8 (gfc_array_l8 * const restrict, \n+\tgfc_array_l8 * const restrict, const index_type * const restrict);\n+export_proto(parity_l8);\n+\n+void\n+parity_l8 (gfc_array_l8 * const restrict retarray, \n+\tgfc_array_l8 * const restrict array, \n+\tconst index_type * const restrict pdim)\n+{\n+  index_type count[GFC_MAX_DIMENSIONS];\n+  index_type extent[GFC_MAX_DIMENSIONS];\n+  index_type sstride[GFC_MAX_DIMENSIONS];\n+  index_type dstride[GFC_MAX_DIMENSIONS];\n+  const GFC_LOGICAL_8 * restrict base;\n+  GFC_LOGICAL_8 * restrict dest;\n+  index_type rank;\n+  index_type n;\n+  index_type len;\n+  index_type delta;\n+  index_type dim;\n+  int continue_loop;\n+\n+  /* Make dim zero based to avoid confusion.  */\n+  dim = (*pdim) - 1;\n+  rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+\n+  len = GFC_DESCRIPTOR_EXTENT(array,dim);\n+  if (len < 0)\n+    len = 0;\n+  delta = GFC_DESCRIPTOR_STRIDE(array,dim);\n+\n+  for (n = 0; n < dim; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array,n);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+  for (n = dim; n < rank; n++)\n+    {\n+      sstride[n] = GFC_DESCRIPTOR_STRIDE(array, n + 1);\n+      extent[n] = GFC_DESCRIPTOR_EXTENT(array, n + 1);\n+\n+      if (extent[n] < 0)\n+\textent[n] = 0;\n+    }\n+\n+  if (retarray->data == NULL)\n+    {\n+      size_t alloc_size, str;\n+\n+      for (n = 0; n < rank; n++)\n+\t{\n+\t  if (n == 0)\n+\t    str = 1;\n+\t  else\n+\t    str = GFC_DESCRIPTOR_STRIDE(retarray,n-1) * extent[n-1];\n+\n+\t  GFC_DIMENSION_SET(retarray->dim[n], 0, extent[n] - 1, str);\n+\n+\t}\n+\n+      retarray->offset = 0;\n+      retarray->dtype = (array->dtype & ~GFC_DTYPE_RANK_MASK) | rank;\n+\n+      alloc_size = sizeof (GFC_LOGICAL_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n+    \t\t   * extent[rank-1];\n+\n+      if (alloc_size == 0)\n+\t{\n+\t  /* Make sure we have a zero-sized array.  */\n+\t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n+\t  return;\n+\n+\t}\n+      else\n+\tretarray->data = internal_malloc_size (alloc_size);\n+    }\n+  else\n+    {\n+      if (rank != GFC_DESCRIPTOR_RANK (retarray))\n+\truntime_error (\"rank of return array incorrect in\"\n+\t\t       \" PARITY intrinsic: is %ld, should be %ld\",\n+\t\t       (long int) (GFC_DESCRIPTOR_RANK (retarray)),\n+\t\t       (long int) rank);\n+\n+      if (unlikely (compile_options.bounds_check))\n+\tbounds_ifunction_return ((array_t *) retarray, extent,\n+\t\t\t\t \"return value\", \"PARITY\");\n+    }\n+\n+  for (n = 0; n < rank; n++)\n+    {\n+      count[n] = 0;\n+      dstride[n] = GFC_DESCRIPTOR_STRIDE(retarray,n);\n+      if (extent[n] <= 0)\n+\tlen = 0;\n+    }\n+\n+  base = array->data;\n+  dest = retarray->data;\n+\n+  continue_loop = 1;\n+  while (continue_loop)\n+    {\n+      const GFC_LOGICAL_8 * restrict src;\n+      GFC_LOGICAL_8 result;\n+      src = base;\n+      {\n+\n+  result = 0;\n+\tif (len <= 0)\n+\t  *dest = 0;\n+\telse\n+\t  {\n+\t    for (n = 0; n < len; n++, src += delta)\n+\t      {\n+\n+  result = result != *src;\n+\t      }\n+\t    \n+\t    *dest = result;\n+\t  }\n+      }\n+      /* Advance to the next element.  */\n+      count[0]++;\n+      base += sstride[0];\n+      dest += dstride[0];\n+      n = 0;\n+      while (count[n] == extent[n])\n+\t{\n+\t  /* When we get to the end of a dimension, reset it and increment\n+\t     the next dimension.  */\n+\t  count[n] = 0;\n+\t  /* We could precalculate these products, but this is a less\n+\t     frequently used path so probably not worth it.  */\n+\t  base -= sstride[n] * extent[n];\n+\t  dest -= dstride[n] * extent[n];\n+\t  n++;\n+\t  if (n == rank)\n+\t    {\n+\t      /* Break out of the look.  */\n+\t      continue_loop = 0;\n+\t      break;\n+\t    }\n+\t  else\n+\t    {\n+\t      count[n]++;\n+\t      base += sstride[n];\n+\t      dest += dstride[n];\n+\t    }\n+\t}\n+    }\n+}\n+\n+#endif"}, {"sha": "125c44d1e0ec4fdcc903310ee44e8208d70315c1", "filename": "libgfortran/generated/product_c10.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c10.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -152,6 +152,7 @@ product_c10 (gfc_array_c10 * const restrict retarray,\n \n   result *= *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "6a64e656209d3867bb365596a7868ea51d851e28", "filename": "libgfortran/generated/product_c16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -152,6 +152,7 @@ product_c16 (gfc_array_c16 * const restrict retarray,\n \n   result *= *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "9c092eb4670cb499e054be84b305ddd53230c375", "filename": "libgfortran/generated/product_c4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -152,6 +152,7 @@ product_c4 (gfc_array_c4 * const restrict retarray,\n \n   result *= *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "a6b3c3db12b25c5d5e275f23b34331147da4bc58", "filename": "libgfortran/generated/product_c8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -152,6 +152,7 @@ product_c8 (gfc_array_c8 * const restrict retarray,\n \n   result *= *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "96c4f9c45d61d1e698f8ec02c441f1e5ba898242", "filename": "libgfortran/generated/product_i1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i1.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -152,6 +152,7 @@ product_i1 (gfc_array_i1 * const restrict retarray,\n \n   result *= *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "bae7554a75befab5f64c574c6623101dd63c91c4", "filename": "libgfortran/generated/product_i16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -152,6 +152,7 @@ product_i16 (gfc_array_i16 * const restrict retarray,\n \n   result *= *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "5546f59e389851e9c8f5fa249d02f574e18b8699", "filename": "libgfortran/generated/product_i2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i2.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -152,6 +152,7 @@ product_i2 (gfc_array_i2 * const restrict retarray,\n \n   result *= *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "acb2f9780dc5eb8dc6aae838a5e8f1f51253e7d9", "filename": "libgfortran/generated/product_i4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -152,6 +152,7 @@ product_i4 (gfc_array_i4 * const restrict retarray,\n \n   result *= *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "bb2e63147fa70c9fe44c2209a88a03a707428380", "filename": "libgfortran/generated/product_i8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -152,6 +152,7 @@ product_i8 (gfc_array_i8 * const restrict retarray,\n \n   result *= *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "ae86e7204977c1a9073138c0bf7d80f40a88bc22", "filename": "libgfortran/generated/product_r10.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r10.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -152,6 +152,7 @@ product_r10 (gfc_array_r10 * const restrict retarray,\n \n   result *= *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "71bc8cc0fdb2a4a1944b9713a7a02a832856c0a7", "filename": "libgfortran/generated/product_r16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -152,6 +152,7 @@ product_r16 (gfc_array_r16 * const restrict retarray,\n \n   result *= *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "142b7c3ddf8d974a2eb75665de94cc13998aeabe", "filename": "libgfortran/generated/product_r4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -152,6 +152,7 @@ product_r4 (gfc_array_r4 * const restrict retarray,\n \n   result *= *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "8e50e01d2af9ab9bcf33f9a6f380fa4667414d46", "filename": "libgfortran/generated/product_r8.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fproduct_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n /* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -152,6 +152,7 @@ product_r8 (gfc_array_r8 * const restrict retarray,\n \n   result *= *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "f254190d4c08529c0d9421afe4805039941782f6", "filename": "libgfortran/generated/sum_c10.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c10.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -152,6 +152,7 @@ sum_c10 (gfc_array_c10 * const restrict retarray,\n \n   result += *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "5505647ff1fc9f476433cfbe635eebe7154f867d", "filename": "libgfortran/generated/sum_c16.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -152,6 +152,7 @@ sum_c16 (gfc_array_c16 * const restrict retarray,\n \n   result += *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "99a6e35207c49e06924a351f2f73d7f742deed95", "filename": "libgfortran/generated/sum_c4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -152,6 +152,7 @@ sum_c4 (gfc_array_c4 * const restrict retarray,\n \n   result += *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "505050761dabceeff9b54d1202a7abd3afd03e4d", "filename": "libgfortran/generated/sum_c8.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -152,6 +152,7 @@ sum_c8 (gfc_array_c8 * const restrict retarray,\n \n   result += *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "d839b0fee68e40d7bca27862440a1ae4f9091bd5", "filename": "libgfortran/generated/sum_i1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i1.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -152,6 +152,7 @@ sum_i1 (gfc_array_i1 * const restrict retarray,\n \n   result += *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "d02a1714695c8734fa434abd643f3adf9dd02e83", "filename": "libgfortran/generated/sum_i16.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -152,6 +152,7 @@ sum_i16 (gfc_array_i16 * const restrict retarray,\n \n   result += *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "d5b16dd01a9a1b465cb3afb772888e1981fbdb86", "filename": "libgfortran/generated/sum_i2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i2.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -152,6 +152,7 @@ sum_i2 (gfc_array_i2 * const restrict retarray,\n \n   result += *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "db0ad0e4a63411235d1f0e66dce07f3cb6e27ac2", "filename": "libgfortran/generated/sum_i4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -152,6 +152,7 @@ sum_i4 (gfc_array_i4 * const restrict retarray,\n \n   result += *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "f872bd4dc3abda23e73e51ef538ad31ad8cfd9a7", "filename": "libgfortran/generated/sum_i8.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -152,6 +152,7 @@ sum_i8 (gfc_array_i8 * const restrict retarray,\n \n   result += *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "a1bf9facf54797aa67daf1312bbfb87816d8daec", "filename": "libgfortran/generated/sum_r10.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r10.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -152,6 +152,7 @@ sum_r10 (gfc_array_r10 * const restrict retarray,\n \n   result += *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "d38170230ef065376a8d4f1e561ab6aa0e76ba1d", "filename": "libgfortran/generated/sum_r16.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r16.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -152,6 +152,7 @@ sum_r16 (gfc_array_r16 * const restrict retarray,\n \n   result += *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "53787f959dfbe6cd24b8396e14c44974d39a1cb1", "filename": "libgfortran/generated/sum_r4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r4.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -152,6 +152,7 @@ sum_r4 (gfc_array_r4 * const restrict retarray,\n \n   result += *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "c4ab3ca8adf8cb2b7d8a822da7aa433f2e278f33", "filename": "libgfortran/generated/sum_r8.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgenerated%2Fsum_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r8.c?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -152,6 +152,7 @@ sum_r8 (gfc_array_r8 * const restrict retarray,\n \n   result += *src;\n \t      }\n+\t    \n \t    *dest = result;\n \t  }\n       }"}, {"sha": "f33167b1a30a78a9e26dae83aab0d006bc03a735", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1115,6 +1115,15 @@ GFORTRAN_1.4 {\n     _gfortran_bessel_yn_r8;\n     _gfortran_bessel_yn_r10;\n     _gfortran_bessel_yn_r16;\n+    _gfortran_norm2_r4;\n+    _gfortran_norm2_r8;\n+    _gfortran_norm2_r10;\n+    _gfortran_norm2_r16;\n+    _gfortran_parity_l1;\n+    _gfortran_parity_l2;\n+    _gfortran_parity_l4;\n+    _gfortran_parity_l8;\n+    _gfortran_parity_l16;\n } GFORTRAN_1.3; \n \n F2C_1.0 {"}, {"sha": "cc174207817d66cfbee6b33336390166323e8ac6", "filename": "libgfortran/m4/all.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fall.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fall.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fall.m4?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n `/* Implementation of the ALL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -39,6 +39,6 @@ ARRAY_FUNCTION(1,\n     {\n       result = 0;\n       break;\n-    }')`\n+    }', `')`\n \n #endif'"}, {"sha": "81ec31046f555bd32d86bd4358e8db392616c699", "filename": "libgfortran/m4/any.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fany.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fany.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fany.m4?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n `/* Implementation of the ANY intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -39,6 +39,6 @@ ARRAY_FUNCTION(0,\n     {\n       result = 1;\n       break;\n-    }')`\n+    }', `')`\n \n #endif'"}, {"sha": "5998c20e685fbaa334df1301f0f9a575eca08b72", "filename": "libgfortran/m4/count.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fcount.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fcount.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fcount.m4?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n `/* Implementation of the COUNT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -35,6 +35,6 @@ include(ifunction_logical.m4)dnl\n ARRAY_FUNCTION(0,\n `  result = 0;',\n `  if (*src)\n-    result++;')`\n+    result++;', `')`\n \n #endif'"}, {"sha": "3d425e0108efc5cec511cb43f72210425f3f55eb", "filename": "libgfortran/m4/ifunction.m4", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fifunction.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fifunction.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifunction.m4?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,6 +1,6 @@\n dnl Support macro file for intrinsic functions.\n dnl Contains the generic sections of the array functions.\n-dnl This file is part of the GNU Fortran 95 Runtime Library (libgfortran)\n+dnl This file is part of the GNU Fortran Runtime Library (libgfortran)\n dnl Distributed under the GNU GPL with exception.  See COPYING for details.\n dnl\n dnl Pass the implementation for a single section as the parameter to\n@@ -140,6 +140,7 @@ define(START_ARRAY_BLOCK,\n ')dnl\n define(FINISH_ARRAY_FUNCTION,\n `\t      }\n+\t    '$1`\n \t    *dest = result;\n \t  }\n       }\n@@ -496,7 +497,7 @@ define(ARRAY_FUNCTION,\n $2\n START_ARRAY_BLOCK($1)\n $3\n-FINISH_ARRAY_FUNCTION')dnl\n+FINISH_ARRAY_FUNCTION($4)')dnl\n define(MASKED_ARRAY_FUNCTION,\n `START_MASKED_ARRAY_FUNCTION\n $2"}, {"sha": "44872ee61a0c1fc1f8061728a351ef33a223d829", "filename": "libgfortran/m4/maxloc1.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fmaxloc1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fmaxloc1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmaxloc1.m4?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n `/* Implementation of the MAXLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -56,7 +56,7 @@ ARRAY_FUNCTION(0,\n \t\t  {\n \t\t    maxval = *src;\n \t\t    result = (rtype_name)n + 1;\n-\t\t  }')\n+\t\t  }', `')\n \n MASKED_ARRAY_FUNCTION(0,\n `\tatype_name maxval;"}, {"sha": "15390688056b6598c92bcaa9b66c7a2ffa47978c", "filename": "libgfortran/m4/maxval.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fmaxval.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fmaxval.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmaxval.m4?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n `/* Implementation of the MAXVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -48,7 +48,7 @@ ARRAY_FUNCTION(atype_min,\n \t      {\n #endif\n \t\tif (*src > result)\n-\t\t  result = *src;')\n+\t\t  result = *src;', `')\n \n MASKED_ARRAY_FUNCTION(atype_min,\n `#if defined ('atype_inf`)"}, {"sha": "e0bd3cd88ceda8e3c166602e82f29beba0f1d3ea", "filename": "libgfortran/m4/minloc1.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fminloc1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fminloc1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fminloc1.m4?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n `/* Implementation of the MINLOC intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -94,7 +94,7 @@ MASKED_ARRAY_FUNCTION(0,\n \t\t  {\n \t\t    minval = *src;\n \t\t    result = (rtype_name)n + 1;\n-\t\t  }')\n+\t\t  }', `')\n \n SCALAR_ARRAY_FUNCTION(0)\n "}, {"sha": "037dd6725956684fccbe1f2d2c06e5800c210314", "filename": "libgfortran/m4/minval.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fminval.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fminval.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fminval.m4?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n `/* Implementation of the MINVAL intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -81,7 +81,7 @@ MASKED_ARRAY_FUNCTION(atype_max,\n \t      {\n #endif\n \t\tif (*msrc && *src < result)\n-\t\t  result = *src;')\n+\t\t  result = *src;', `')\n \n SCALAR_ARRAY_FUNCTION(atype_max)\n "}, {"sha": "e1d6b972df4a30bdbd4a7ecfdd80ee28ff9f5ca0", "filename": "libgfortran/m4/norm2.m4", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fnorm2.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fnorm2.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fnorm2.m4?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,59 @@\n+`/* Implementation of the NORM2 intrinsic\n+   Copyright 2010 Free Software Foundation, Inc.\n+   Contributed by Tobias Burnus  <burnus@net-b.de>\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+#include <stdlib.h>\n+#include <math.h>\n+#include <assert.h>'\n+\n+include(iparm.m4)dnl\n+include(ifunction.m4)dnl\n+include(`mtype.m4')dnl\n+\n+`#if defined (HAVE_'atype_name`) && defined (HAVE_'rtype_name`)'\n+\n+ARRAY_FUNCTION(`0.0'Q,\n+`\t'rtype_name` scale;\n+\tresult = 0.0'Q`;\n+\tscale = 1.0'Q`;',\n+`\t  if (*src != 0.0'Q`)\n+\t    {\n+\t      'rtype_name` absX, val;\n+\t      absX = fabs'q` (*src);\n+\t      if (scale < absX)\n+\t\t{\n+\t\t  val = scale / absX;\n+\t\t  result = 1.0'Q` + result * val * val;\n+\t\t  scale = absX;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  val = absX / scale;\n+\t\t  result += val * val;\n+\t\t}\n+\t    }',\n+`   result = scale * sqrt'q` (result);')\n+\n+#endif"}, {"sha": "037e96db913deae53553c82070d0f84231f83247", "filename": "libgfortran/m4/parity.m4", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fparity.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fparity.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fparity.m4?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -0,0 +1,40 @@\n+`/* Implementation of the NORM2 intrinsic\n+   Copyright 2010 Free Software Foundation, Inc.\n+   Contributed by Tobias Burnus  <burnus@net-b.de>\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+#include <stdlib.h>\n+#include <math.h>\n+#include <assert.h>'\n+\n+include(iparm.m4)dnl\n+include(ifunction.m4)dnl\n+\n+`#if defined (HAVE_'atype_name`) && defined (HAVE_'rtype_name`)'\n+\n+ARRAY_FUNCTION(0,\n+`  result = 0;',\n+`  result = result != *src;', `')\n+\n+#endif"}, {"sha": "6f6f2c01184398f9d52747f0f958f98f88385679", "filename": "libgfortran/m4/product.m4", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fproduct.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cd0559e8ceb1764a41c8964f30a7de025956e8a/libgfortran%2Fm4%2Fproduct.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fproduct.m4?ref=0cd0559e8ceb1764a41c8964f30a7de025956e8a", "patch": "@@ -1,8 +1,8 @@\n `/* Implementation of the PRODUCT intrinsic\n-   Copyright 2002, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright 2002, 2007, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n-This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+This file is part of the GNU Fortran runtime library (libgfortran).\n \n Libgfortran is free software; you can redistribute it and/or\n modify it under the terms of the GNU General Public\n@@ -34,7 +34,7 @@ include(ifunction.m4)dnl\n \n ARRAY_FUNCTION(1,\n `  result = 1;',\n-`  result *= *src;')\n+`  result *= *src;', `')\n \n MASKED_ARRAY_FUNCTION(1,\n `  result = 1;',"}]}