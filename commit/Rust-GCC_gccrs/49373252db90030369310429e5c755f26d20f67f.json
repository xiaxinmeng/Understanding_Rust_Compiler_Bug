{"sha": "49373252db90030369310429e5c755f26d20f67f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkzNzMyNTJkYjkwMDMwMzY5MzEwNDI5ZTVjNzU1ZjI2ZDIwZjY3Zg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2005-06-25T11:52:32Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2005-06-25T11:52:32Z"}, "message": "bfin.md (ror_one, [...]): New patterns.\n\n\t* config/bfin/bfin.md (ror_one, rol_one, ashrdi3, ashldi3, lshrdi3):\n\tNew patterns.\n\t(movbi): Add alternative to set CC to zero.\n\t(compare_eq, compare_ne, compare_le, compare_lt, compare_leu,\n\tcompare_ltu): Now named patterns.\n\nFrom-SVN: r101320", "tree": {"sha": "add0fc1d932da4448eab3e3cf9d7897f27f59c88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/add0fc1d932da4448eab3e3cf9d7897f27f59c88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49373252db90030369310429e5c755f26d20f67f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49373252db90030369310429e5c755f26d20f67f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49373252db90030369310429e5c755f26d20f67f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49373252db90030369310429e5c755f26d20f67f/comments", "author": null, "committer": null, "parents": [{"sha": "6e0fbdd9783baa384518e291f92756b36ff76a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0fbdd9783baa384518e291f92756b36ff76a34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e0fbdd9783baa384518e291f92756b36ff76a34"}], "stats": {"total": 117, "additions": 106, "deletions": 11}, "files": [{"sha": "634f89a06a311bff90c5a2dccc804666e8694025", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49373252db90030369310429e5c755f26d20f67f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49373252db90030369310429e5c755f26d20f67f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49373252db90030369310429e5c755f26d20f67f", "patch": "@@ -1,3 +1,11 @@\n+2005-06-25  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.md (ror_one, rol_one, ashrdi3, ashldi3, lshrdi3):\n+\tNew patterns.\n+\t(movbi): Add alternative to set CC to zero.\n+\t(compare_eq, compare_ne, compare_le, compare_lt, compare_leu,\n+\tcompare_ltu): Now named patterns.\n+\n 2005-06-25  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* all files: Update FSF address in copyright headers."}, {"sha": "984f3d0d41c57f136701dc7875367f09b63c1b52", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 98, "deletions": 11, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49373252db90030369310429e5c755f26d20f67f/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49373252db90030369310429e5c755f26d20f67f/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=49373252db90030369310429e5c755f26d20f67f", "patch": "@@ -342,8 +342,8 @@\n })\n \n (define_insn \"movbi\"\n-  [(set (match_operand:BI 0 \"nonimmediate_operand\" \"=x,x,d,mr,C,d\")\n-        (match_operand:BI 1 \"general_operand\" \"x,xKs3,mr,d,d,C\"))]\n+  [(set (match_operand:BI 0 \"nonimmediate_operand\" \"=x,x,d,mr,C,d,C\")\n+        (match_operand:BI 1 \"general_operand\" \"x,xKs3,mr,d,d,C,P0\"))]\n \n   \"\"\n   \"@\n@@ -352,9 +352,10 @@\n    %0 = %1;\n    %0 = %1;\n    CC = %1;\n-   %0 = CC;\"\n-  [(set_attr \"type\" \"move,mvi,mcld,mcst,compare,compare\")\n-   (set_attr \"length\" \"2,2,*,*,2,2\")])\n+   %0 = CC;\n+   R0 = R0 | R0; CC = AC0;\"\n+  [(set_attr \"type\" \"move,mvi,mcld,mcst,compare,compare,alu0\")\n+   (set_attr \"length\" \"2,2,*,*,2,2,4\")])\n \n (define_insn \"movpdi\"\n   [(set (match_operand:PDI 0 \"nonimmediate_operand\" \"=e,<,e\")\n@@ -1138,6 +1139,92 @@\n   \"%0 >>>= %2;\"\n   [(set_attr \"type\" \"shft\")])\n \n+(define_insn \"ror_one\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(ior:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"d\") (const_int 1))\n+\t\t(ashift:SI (zero_extend:SI (reg:BI REG_CC)) (const_int 31))))\n+   (set (reg:BI REG_CC)\n+\t(zero_extract:BI (match_dup 1) (const_int 1) (const_int 0)))]\n+  \"\"\n+  \"%0 = ROT %1 BY -1;\"\n+  [(set_attr \"type\" \"shft\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"rol_one\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"+d\")\n+\t(ior:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"d\") (const_int 1))\n+\t\t(zero_extend:SI (reg:BI REG_CC))))\n+   (set (reg:BI REG_CC)\n+\t(zero_extract:BI (match_dup 1) (const_int 31) (const_int 0)))]\n+  \"\"\n+  \"%0 = ROT %1 BY 1;\"\n+  [(set_attr \"type\" \"shft\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_expand \"lshrdi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t     (match_operand:DI 2 \"general_operand\" \"\")))]\n+  \"\"\n+{\n+  rtx lo_half[2], hi_half[2];\n+      \n+  if (operands[2] != const1_rtx)\n+    FAIL;\n+  if (! rtx_equal_p (operands[0], operands[1]))\n+    emit_move_insn (operands[0], operands[1]);\n+\n+  split_di (operands, 2, lo_half, hi_half);\n+\n+  emit_move_insn (bfin_cc_rtx, const0_rtx);\n+  emit_insn (gen_ror_one (hi_half[0], hi_half[0]));\n+  emit_insn (gen_ror_one (lo_half[0], lo_half[0]));\n+  DONE;\n+})\n+\n+(define_expand \"ashrdi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t     (match_operand:DI 2 \"general_operand\" \"\")))]\n+  \"\"\n+{\n+  rtx lo_half[2], hi_half[2];\n+      \n+  if (operands[2] != const1_rtx)\n+    FAIL;\n+  if (! rtx_equal_p (operands[0], operands[1]))\n+    emit_move_insn (operands[0], operands[1]);\n+\n+  split_di (operands, 2, lo_half, hi_half);\n+\n+  emit_insn (gen_compare_lt (gen_rtx_REG (BImode, REG_CC),\n+\t\t\t     hi_half[1], const0_rtx));\n+  emit_insn (gen_ror_one (hi_half[0], hi_half[0]));\n+  emit_insn (gen_ror_one (lo_half[0], lo_half[0]));\n+  DONE;\n+})\n+\n+(define_expand \"ashldi3\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t   (match_operand:DI 2 \"general_operand\" \"\")))]\n+  \"\"\n+{\n+  rtx lo_half[2], hi_half[2];\n+      \n+  if (operands[2] != const1_rtx)\n+    FAIL;\n+  if (! rtx_equal_p (operands[0], operands[1]))\n+    emit_move_insn (operands[0], operands[1]);\n+\n+  split_di (operands, 2, lo_half, hi_half);\n+\n+  emit_move_insn (bfin_cc_rtx, const0_rtx);\n+  emit_insn (gen_rol_one (lo_half[0], lo_half[0]));\n+  emit_insn (gen_rol_one (hi_half[0], hi_half[0]));\n+  DONE;\n+})\n+\n (define_insn \"lshrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,a\")\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \" 0,a\")\n@@ -1372,47 +1459,47 @@\n   DONE;\n })\n \n-(define_insn \"\"\n+(define_insn \"compare_eq\"\n   [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n         (eq:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n                (match_operand:SI 2 \"nonmemory_operand\" \"dKs3,aKs3\")))]\n   \"\"\n   \"cc =%1==%2;\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"compare_ne\"\n   [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n         (ne:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n                (match_operand:SI 2 \"nonmemory_operand\" \"dKs3,aKs3\")))]\n   \"0\"\n   \"cc =%1!=%2;\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"compare_lt\"\n   [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n         (lt:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n                (match_operand:SI 2 \"nonmemory_operand\" \"dKs3,aKs3\")))]\n   \"\"\n   \"cc =%1<%2;\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"compare_le\"\n   [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n         (le:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n                (match_operand:SI 2 \"nonmemory_operand\" \"dKs3,aKs3\")))]\n   \"\"\n   \"cc =%1<=%2;\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"compare_leu\"\n   [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n         (leu:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n                 (match_operand:SI 2 \"nonmemory_operand\" \"dKu3,aKu3\")))]\n   \"\"\n   \"cc =%1<=%2 (iu);\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"compare_ltu\"\n   [(set (match_operand:BI 0 \"cc_operand\" \"=C,C\")\n         (ltu:BI (match_operand:SI 1 \"register_operand\" \"d,a\")\n                 (match_operand:SI 2 \"nonmemory_operand\" \"dKu3,aKu3\")))]"}]}