{"sha": "138f5109c1658d81d959c6a6a990ede7d56dff5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM4ZjUxMDljMTY1OGQ4MWQ5NTljNmE2YTk5MGVkZTdkNTZkZmY1YQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-03-18T21:32:22Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-03-18T21:32:22Z"}, "message": "2004-03-18  Michael Koch  <konqueror@gmx.de>\n\n\t* java/nio/channels/spi/AbstractSelectableChannel.java\n\t(keys): Initialize at declaration.\n\t(locate): keys cant be null.\n\t(add): Removed.\n\t(addSelectionKey): New method.\n\t(removeSelectionKey): New method.\n\t* java/nio/channels/spi/AbstractSelectionKey.java\n\t(cancel): Call AbstractSelector.cancelKey(SelectionKey key).\n\t* java/nio/channels/spi/AbstractSelector.java\n\t(provider): Javadoc added.\n\t(cancelledKeys): Javadoc added.\n\t(cancelKey): Javadoc added, add key to cancelledKeys.\n\t(deregister): Implemented.\n\nFrom-SVN: r79640", "tree": {"sha": "b9305fc80248356b39b5865cf00472171b9932ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9305fc80248356b39b5865cf00472171b9932ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/138f5109c1658d81d959c6a6a990ede7d56dff5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138f5109c1658d81d959c6a6a990ede7d56dff5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138f5109c1658d81d959c6a6a990ede7d56dff5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138f5109c1658d81d959c6a6a990ede7d56dff5a/comments", "author": null, "committer": null, "parents": [{"sha": "bdb5db66b17631cb0ec607f8b539ea23c59794ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb5db66b17631cb0ec607f8b539ea23c59794ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdb5db66b17631cb0ec607f8b539ea23c59794ff"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "a6d1dadab30c251c7540381d245dffcd796b164a", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138f5109c1658d81d959c6a6a990ede7d56dff5a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138f5109c1658d81d959c6a6a990ede7d56dff5a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=138f5109c1658d81d959c6a6a990ede7d56dff5a", "patch": "@@ -1,3 +1,19 @@\n+2004-03-18  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/nio/channels/spi/AbstractSelectableChannel.java\n+\t(keys): Initialize at declaration.\n+\t(locate): keys cant be null.\n+\t(add): Removed.\n+\t(addSelectionKey): New method.\n+\t(removeSelectionKey): New method.\n+\t* java/nio/channels/spi/AbstractSelectionKey.java\n+\t(cancel): Call AbstractSelector.cancelKey(SelectionKey key).\n+\t* java/nio/channels/spi/AbstractSelector.java\n+\t(provider): Javadoc added.\n+\t(cancelledKeys): Javadoc added.\n+\t(cancelKey): Javadoc added, add key to cancelledKeys.\n+\t(deregister): Implemented.\n+\n 2004-03-18  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* gnu/java/nio/channels/natFileChannelPosix.cc (mapImpl): Cast"}, {"sha": "a07485df85f1f61bf346b2469af0a50c83bf9e51", "filename": "libjava/java/nio/channels/spi/AbstractSelectableChannel.java", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138f5109c1658d81d959c6a6a990ede7d56dff5a/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138f5109c1658d81d959c6a6a990ede7d56dff5a/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectableChannel.java?ref=138f5109c1658d81d959c6a6a990ede7d56dff5a", "patch": "@@ -51,15 +51,14 @@ public abstract class AbstractSelectableChannel extends SelectableChannel\n   private boolean blocking = true;\n   private Object LOCK = new Object();\n   private SelectorProvider provider;\n-  private LinkedList keys;\n+  private LinkedList keys = new LinkedList();\n \n   /**\n    * Initializes the channel\n    */\n   protected AbstractSelectableChannel (SelectorProvider provider)\n   {\n     this.provider = provider;\n-    this.keys = new LinkedList();\n   }\n \n   /**\n@@ -160,9 +159,6 @@ public final SelectorProvider provider ()\n \n   private SelectionKey locate (Selector selector)\n   {\n-    if (keys == null)\n-      return null;\n-    \n     ListIterator it = keys.listIterator ();\n     \n     while (it.hasNext ())\n@@ -176,11 +172,6 @@ private SelectionKey locate (Selector selector)\n     return null;\n   }\n \n-  private void add (SelectionKey key)\n-  {\n-    keys.add (key);\n-  }\n-\n   /**\n    * Registers this channel with the given selector, returning a selection key.\n    *\n@@ -209,10 +200,21 @@ public final SelectionKey register (Selector selin, int ops, Object att)\n             key = selector.register (this, ops, att);\n     \t\t\n             if (key != null)\n-              add (key);\n+              addSelectionKey (key);\n           }\n       }\n \n     return key;\n   }\n+\n+  void addSelectionKey(SelectionKey key)\n+  {\n+    keys.add(key);\n+  }\n+\n+  // This method gets called by AbstractSelector.deregister().\n+  void removeSelectionKey(SelectionKey key)\n+  {\n+    keys.remove(key);\n+  }\n }"}, {"sha": "78e0a82cb4a90ff8bf597953693eb3559f943cdf", "filename": "libjava/java/nio/channels/spi/AbstractSelectionKey.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138f5109c1658d81d959c6a6a990ede7d56dff5a/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectionKey.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138f5109c1658d81d959c6a6a990ede7d56dff5a/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectionKey.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelectionKey.java?ref=138f5109c1658d81d959c6a6a990ede7d56dff5a", "patch": "@@ -1,5 +1,5 @@\n /* AbstractSelectionKey.java -- \n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -61,8 +61,7 @@ public final void cancel ()\n   {\n     if (isValid())\n       {\n-\t// FIXME: implement this.\n-\t//selector().cancelledKeys().add (this);\n+\t((AbstractSelector) selector()).cancelKey(this);\n         cancelled = true;\n       }\n   }"}, {"sha": "b657b5ea0d900757316ea3853b4ef3da570ad337", "filename": "libjava/java/nio/channels/spi/AbstractSelector.java", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138f5109c1658d81d959c6a6a990ede7d56dff5a/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138f5109c1658d81d959c6a6a990ede7d56dff5a/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnio%2Fchannels%2Fspi%2FAbstractSelector.java?ref=138f5109c1658d81d959c6a6a990ede7d56dff5a", "patch": "@@ -1,5 +1,5 @@\n /* AbstractSelector.java -- \n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -96,11 +96,17 @@ protected final void end()\n   {\n   }\n     \n+  /**\n+   * Returns the provider for this selector object.\n+   */\n   public final SelectorProvider provider ()\n   {\n     return provider;\n   }\n \n+  /**\n+   * Returns the cancelled keys set.\n+   */\n   protected final Set cancelledKeys()\n   {\n     if (!isOpen())\n@@ -109,11 +115,15 @@ protected final Set cancelledKeys()\n     return cancelledKeys;\n   }\n \n+  /**\n+   * Cancels a selection key.\n+   */\n+  // This method is only called by AbstractSelectionKey.cancel().\n   final void cancelKey (AbstractSelectionKey key)\n   {\n     synchronized (cancelledKeys)\n       {\n-        cancelledKeys.remove(key);\n+\tcancelledKeys.add(key);\n       }\n   }\n \n@@ -127,6 +137,6 @@ protected abstract SelectionKey register (AbstractSelectableChannel ch,\n \n   protected final void deregister (AbstractSelectionKey key)\n   {\n-    // FIXME\n+    ((AbstractSelectableChannel) key.channel()).removeSelectionKey(key);\n   }\n }"}]}