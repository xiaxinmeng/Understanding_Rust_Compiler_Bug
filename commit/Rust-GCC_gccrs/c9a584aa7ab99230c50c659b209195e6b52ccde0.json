{"sha": "c9a584aa7ab99230c50c659b209195e6b52ccde0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlhNTg0YWE3YWI5OTIzMGM1MGM2NTliMjA5MTk1ZTZiNTJjY2RlMA==", "commit": {"author": {"name": "Adam Butcher", "email": "adam@jessamine.co.uk", "date": "2013-11-12T20:17:54Z"}, "committer": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2013-11-12T20:17:54Z"}, "message": "Add some generic lambda test cases.\n\ngcc/testsuite/g++.dg/cpp1y/\n\t* lambda-generic.C: New test case.\n\t* lambda-generic-cfun.C: New test case.\n\t* lambda-generic-dep.C: New test case.\n\t* lambda-generic-udt.C: New test case.\n\t* lambda-generic-variadic.C: New test case.\n\t* lambda-generic-x.C: New test case.\n\t* lambda-generic-xcfun.C: New test case.\n\t* lambda-generic-xudt.C: New test case.\n\t* lambda-generic-mixed.C: New test case.\n\nFrom-SVN: r204716", "tree": {"sha": "540d878a5c2ef93aa23b5ae66f7d9cfd43438ae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/540d878a5c2ef93aa23b5ae66f7d9cfd43438ae3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9a584aa7ab99230c50c659b209195e6b52ccde0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9a584aa7ab99230c50c659b209195e6b52ccde0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9a584aa7ab99230c50c659b209195e6b52ccde0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9a584aa7ab99230c50c659b209195e6b52ccde0/comments", "author": {"login": "abutcher-gh", "id": 10379705, "node_id": "MDQ6VXNlcjEwMzc5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/10379705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abutcher-gh", "html_url": "https://github.com/abutcher-gh", "followers_url": "https://api.github.com/users/abutcher-gh/followers", "following_url": "https://api.github.com/users/abutcher-gh/following{/other_user}", "gists_url": "https://api.github.com/users/abutcher-gh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abutcher-gh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abutcher-gh/subscriptions", "organizations_url": "https://api.github.com/users/abutcher-gh/orgs", "repos_url": "https://api.github.com/users/abutcher-gh/repos", "events_url": "https://api.github.com/users/abutcher-gh/events{/privacy}", "received_events_url": "https://api.github.com/users/abutcher-gh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "91f1c208261de87fb75bba8124474feba91dd91b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f1c208261de87fb75bba8124474feba91dd91b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f1c208261de87fb75bba8124474feba91dd91b"}], "stats": {"total": 232, "additions": 232, "deletions": 0}, "files": [{"sha": "c15733a8e8a620eb4bbd1953b23a1359b1419434", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9a584aa7ab99230c50c659b209195e6b52ccde0", "patch": "@@ -1,3 +1,15 @@\n+2013-11-12  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\t* g++.dg/cpp1y/lambda-generic.C: New test case.\n+\t* g++.dg/cpp1y/lambda-generic-cfun.C: New test case.\n+\t* g++.dg/cpp1y/lambda-generic-dep.C: New test case.\n+\t* g++.dg/cpp1y/lambda-generic-udt.C: New test case.\n+\t* g++.dg/cpp1y/lambda-generic-variadic.C: New test case.\n+\t* g++.dg/cpp1y/lambda-generic-x.C: New test case.\n+\t* g++.dg/cpp1y/lambda-generic-xcfun.C: New test case.\n+\t* g++.dg/cpp1y/lambda-generic-xudt.C: New test case.\n+\t* g++.dg/cpp1y/lambda-generic-mixed.C: New test case.\n+\n 2013-11-12  Adam Butcher  <adam@jessamine.co.uk>\n \n \tPR c++/58534"}, {"sha": "5e515268f24c8c0ebfa768ecba87cac4d2b53f14", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-cfun.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-cfun.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-cfun.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-cfun.C?ref=c9a584aa7ab99230c50c659b209195e6b52ccde0", "patch": "@@ -0,0 +1,25 @@\n+// Generic lambda conversion to function ptr test from N3690 5.1.2.6\n+// { dg-options \"-std=c++1y\" }\n+\n+void f1(int (*)(int)) { }\n+void f2(char (*)(int)) { }\n+void g(int (*)(int)) { } // #1\n+void g(char (*)(char)) { } // #2\n+void h(int (*)(int)) { } // #3\n+void h(char (*)(int)) { } // #4\n+\n+int main()\n+{\n+  auto glambda = [](auto a) { return a; };\n+  int (*fp)(int) = glambda;\n+  f1(glambda); // OK\n+  f2(glambda); // { dg-error \"invalid user-defined conversion\" }\n+  g(glambda); // { dg-error \"ambiguous\" }\n+  h(glambda); // OK: calls #3 since it is convertible from ID\n+  int& (*fpi)(int*) = [](auto* a) -> auto& { return *a; }; // OK\n+\n+  auto GL = [](auto a) { return a; };\n+  int (*GL_int)(int) = GL; // OK: through conversion function template\n+  GL_int(3);\n+}\n+"}, {"sha": "bb687381978fb075ef47468245576dfa02fd0c0f", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-dep.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-dep.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-dep.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-dep.C?ref=c9a584aa7ab99230c50c659b209195e6b52ccde0", "patch": "@@ -0,0 +1,42 @@\n+// Generic lambda type dependence test part from N3690 5.1.2.12\n+// { dg-options \"-std=c++1y\" }\n+\n+void f(int, const int (&)[2] = {}) { } // #1\n+void f(const int&, const int (&)[1]) { } // #2\n+\n+void test()\n+{\n+  const int x = 17;\n+  auto g = [](auto a) {\n+    f(x); // OK: calls #1, does not capture x\n+  };\n+  auto g2 = [=](auto a) {\n+    int selector[sizeof(a) == 1 ? 1 : 2]{};\n+    f(x, selector); // OK: is a dependent expression, so captures x\n+  };\n+}\n+\n+struct S {\n+  struct N {\n+    auto test () { return 7.f; }\n+  };\n+};\n+\n+#include <utility>\n+\n+int main()\n+{\n+  auto f = [] <typename T> (T const& s) mutable {\n+    typename T::N x;\n+    return x.test ();\n+  };\n+  auto g = [] (auto const& s) {\n+    typename std::decay<decltype (s)>::type::N x;\n+    return x.test ();\n+  };\n+\n+  S i;\n+  f(i);\n+  g(i);\n+}\n+"}, {"sha": "4e26fc500b69a5f76bd6f615958a5af128df4b9f", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-mixed.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-mixed.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-mixed.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-mixed.C?ref=c9a584aa7ab99230c50c659b209195e6b52ccde0", "patch": "@@ -0,0 +1,10 @@\n+// Mixed explicit and implicit generic lambda test.\n+// { dg-options \"-std=c++1y\" }\n+\n+int main()\n+{\n+  auto f = [] <typename T> (T a, auto b) { return a + b; };\n+  auto g = [] <typename T> (auto a, T b) { return a + b; };\n+\n+  return f (1.0, 3) + g (1.0, 3);\n+}"}, {"sha": "9f6d45aa8f18065c7ced7f685e5d07685ac80eb8", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-udt.C", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-udt.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-udt.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-udt.C?ref=c9a584aa7ab99230c50c659b209195e6b52ccde0", "patch": "@@ -0,0 +1,51 @@\n+// Ensure that generic lambdas properly construct and destroy user types.\n+// { dg-options \"-std=c++1y -DUSE_AUTO_SYNTAX\" }\n+// { dg-do run }\n+\n+int i = 3;\n+\n+struct S\n+{\n+  S () { ++i; }\n+  S (S const&) { ++i; }\n+  S (S&& old) { old.shadow = true; i += 2; }\n+  ~S () { if (shadow) i -= 2; else --i; }\n+\n+  bool shadow = false;\n+};\n+\n+extern \"C\" void printf(...);\n+#define assert(e) if (e); else \\\n+\t\t printf (\"%s:%d: !(%s)\\n\", __FILE__, __LINE__, #e), __builtin_abort ();\n+\n+int main ()\n+{\n+  assert (i == 3);\n+  {\n+    S s; assert (i == 4);\n+\n+    #if USE_AUTO_SYNTAX\n+    auto byref = [] (auto& r)                   { (void) r; };\n+    auto bycref = [] (auto const& r)            { (void) r; };\n+    auto byval = [] (auto v, auto const x)      { assert (i == x); (void) v; };\n+    auto byrval = [] (auto&& r, auto const x)   { S steal (static_cast<S&&>(r));\n+\t\t \t\t \t\t \t\t \t\t           assert (i == x); };\n+\n+    #elif USE_EXPLICIT_TEMPLATE_SYNTAX\n+    auto byref = [] <typename T> (T& r)         { (void) r; };\n+    auto bycref = [] <typename T> (T const& r)  { (void) r; };\n+    auto byval = [] <typename T, typename I>\n+\t\t \t\t     (T v, I const x)\t\t \t\t { assert (i == x); (void) v; };\n+    auto byrval = [] <typename T, typename I>\n+\t\t \t\t      (T&& r, I const x)\t\t \t\t { S steal (static_cast<S&&>(r));\n+\t\t \t\t \t\t \t\t \t\t           assert (i == x); };\n+    #endif\n+\n+    byref (s); assert (i == 4);\n+    bycref (s); assert (i == 4);\n+    byval (s, 5); assert (i == 4);\n+    byrval (static_cast<S&&>(s), 6); assert (i == 5);\n+  }\n+  assert (i == 3);\n+}\n+"}, {"sha": "bd41b35bbcb906e5be732e1000ba2d81ccbfda81", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-variadic.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic.C?ref=c9a584aa7ab99230c50c659b209195e6b52ccde0", "patch": "@@ -0,0 +1,15 @@\n+// Basic generic lambda test\n+// { dg-options \"-std=c++1y\" }\n+// { dg-do run }\n+\n+template <typename T, typename U> struct pair {};\n+template <typename... T> struct tuple {};\n+\n+int main()\n+{\n+  auto a = [] (auto, pair<auto,auto> v) { return sizeof (v); };\n+  auto b = [] (auto, pair<pair<auto,auto>,auto>... v) { return sizeof... (v); };\n+\n+  a(1, pair<int, float>());\n+  b(2, pair<pair<short,char>, double>(), pair<pair<float,long>, int>());\n+}"}, {"sha": "48a62686316d33cc403066015eafa944f5258d04", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-x.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-x.C?ref=c9a584aa7ab99230c50c659b209195e6b52ccde0", "patch": "@@ -0,0 +1,25 @@\n+// Explicit generic lambda test from N3690 5.1.2.5\n+// { dg-options \"-std=gnu++1y\" }\n+\n+#include <iostream>\n+\n+int main()\n+{\n+   auto glambda = [] <typename A, typename B> (A a, B&& b) { return a < b; };\n+   bool b = glambda(3, 3.14); // OK\n+   auto vglambda = [] <typename P> (P printer) {\n+     return [=] <typename... T> (T&& ... ts) { // OK: ts is a function parameter pack\n+       printer(std::forward<decltype(ts)>(ts)...);\n+       return [=]() {\n+         printer(ts ...);\n+       };\n+     };\n+   };\n+   auto p = vglambda( [] <typename A,\n+                          typename B,\n+                          typename C> (A v1, B v2, C v3)\n+     { std::cout << v1 << v2 << v3; } );\n+   auto q = p(1, 'a', 3.14); // OK: outputs 1a3.14\n+   q(); // OK: outputs 1a3.14\n+}\n+"}, {"sha": "d44b79638436b1c232580066975aa1116122ed8c", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-xcfun.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-xcfun.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-xcfun.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-xcfun.C?ref=c9a584aa7ab99230c50c659b209195e6b52ccde0", "patch": "@@ -0,0 +1,25 @@\n+// Explicit generic lambda conversion to function ptr test from N3690 5.1.2.6\n+// { dg-options \"-std=gnu++1y\" }\n+\n+void f1(int (*)(int)) { }\n+void f2(char (*)(int)) { }\n+void g(int (*)(int)) { } // #1\n+void g(char (*)(char)) { } // #2\n+void h(int (*)(int)) { } // #3\n+void h(char (*)(int)) { } // #4\n+\n+int main()\n+{\n+  auto glambda = [] <typename T> (T a) { return a; };\n+  int (*fp)(int) = glambda;\n+  f1(glambda); // OK\n+  f2(glambda); // { dg-error \"invalid user-defined conversion\" }\n+  g(glambda); // { dg-error \"ambiguous\" }\n+  h(glambda); // OK: calls #3 since it is convertible from ID\n+  int& (*fpi)(int*) = [] <typename T> (T* a) -> auto& { return *a; }; // OK\n+\n+  auto GL = [] <typename T> (T a) { return a; };\n+  int (*GL_int)(int) = GL; // OK: through conversion function template\n+  GL_int(3);\n+}\n+"}, {"sha": "fba864bbbe99b7bcd4afe3ea1dbec24a2afb297b", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-xudt.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-xudt.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-xudt.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-xudt.C?ref=c9a584aa7ab99230c50c659b209195e6b52ccde0", "patch": "@@ -0,0 +1,4 @@\n+// Ensure that generic lambdas properly construct and destroy user types.\n+// { dg-options \"-std=gnu++1y -DUSE_EXPLICIT_TEMPLATE_SYNTAX\" }\n+\n+#include \"lambda-generic-udt.C\""}, {"sha": "1f66475a07b7555aba1fafdc6205271e98517f81", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9a584aa7ab99230c50c659b209195e6b52ccde0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic.C?ref=c9a584aa7ab99230c50c659b209195e6b52ccde0", "patch": "@@ -0,0 +1,23 @@\n+// Generic lambda test from N3690 5.1.2.5\n+// { dg-options \"-std=c++1y\" }\n+\n+#include <iostream>\n+\n+int main()\n+{\n+  auto glambda = [](auto a, auto&& b) { return a < b; };\n+  bool b = glambda(3, 3.14); // OK\n+  auto vglambda = [](auto printer) {\n+    return [=](auto&& ... ts) { // OK: ts is a function parameter pack\n+      printer(std::forward<decltype(ts)>(ts)...);\n+      return [=]() {\n+        printer(ts ...);\n+      };\n+    };\n+  };\n+  auto p = vglambda( [](auto v1, auto v2, auto v3)\n+    { std::cout << v1 << v2 << v3; } );\n+  auto q = p(1, 'a', 3.14); // OK: outputs 1a3.14\n+  q(); // OK: outputs 1a3.14\n+}\n+"}]}