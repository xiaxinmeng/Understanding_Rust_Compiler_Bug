{"sha": "e7dfe4bb07b757be04083465eb6630cd3aa6a79f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdkZmU0YmIwN2I3NTdiZTA0MDgzNDY1ZWI2NjMwY2QzYWE2YTc5Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-12-12T02:47:55Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-12T02:47:55Z"}, "message": "emit-rtl.c (widen_memory_access): New.\n\n        * emit-rtl.c (widen_memory_access): New.\n        * expr.h (widen_memory_access): Declare it.\n        * config/alpha/alpha.c (get_aligned_mem): Use it.\n\nFrom-SVN: r47913", "tree": {"sha": "d0c847cd9f0510c842ba5ecc5cdd2721a76aa489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0c847cd9f0510c842ba5ecc5cdd2721a76aa489"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7dfe4bb07b757be04083465eb6630cd3aa6a79f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7dfe4bb07b757be04083465eb6630cd3aa6a79f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7dfe4bb07b757be04083465eb6630cd3aa6a79f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7dfe4bb07b757be04083465eb6630cd3aa6a79f/comments", "author": null, "committer": null, "parents": [{"sha": "0051b6cae4026eb737fbbce17aea5c699fff0677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0051b6cae4026eb737fbbce17aea5c699fff0677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0051b6cae4026eb737fbbce17aea5c699fff0677"}], "stats": {"total": 96, "additions": 90, "deletions": 6}, "files": [{"sha": "1c6b2539b18dbdf030c8e3ea95cc3068753f6954", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dfe4bb07b757be04083465eb6630cd3aa6a79f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dfe4bb07b757be04083465eb6630cd3aa6a79f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e7dfe4bb07b757be04083465eb6630cd3aa6a79f", "patch": "@@ -1,3 +1,9 @@\n+2001-12-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* emit-rtl.c (widen_memory_access): New.\n+\t* expr.h (widen_memory_access): Declare it.\n+\t* config/alpha/alpha.c (get_aligned_mem): Use it.\n+\n 2001-12-11  Richard Henderson  <rth@redhat.com>\n \n \t* combine.c (simplify_shift_const): Move SHIFT_COUNT_TRUNCATED"}, {"sha": "1120bfb95995b66014ce5db5cc026d47111f9f88", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dfe4bb07b757be04083465eb6630cd3aa6a79f/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dfe4bb07b757be04083465eb6630cd3aa6a79f/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=e7dfe4bb07b757be04083465eb6630cd3aa6a79f", "patch": "@@ -1822,12 +1822,8 @@ get_aligned_mem (ref, paligned_mem, pbitnum)\n   if (GET_CODE (base) == PLUS)\n     offset += INTVAL (XEXP (base, 1)), base = XEXP (base, 0);\n \n-  *paligned_mem = gen_rtx_MEM (SImode, plus_constant (base, offset & ~3));\n-  MEM_COPY_ATTRIBUTES (*paligned_mem, ref);\n-\n-  /* Sadly, we cannot use alias sets here because we may overlap other\n-     data in a different alias set.  */\n-  set_mem_alias_set (*paligned_mem, 0);\n+  *paligned_mem\n+    = widen_memory_access (ref, SImode, (offset & ~3) - offset);\n \n   if (WORDS_BIG_ENDIAN)\n     *pbitnum = GEN_INT (32 - (GET_MODE_BITSIZE (GET_MODE (ref))"}, {"sha": "7c7dfd3f1722ee64a96ac1f5f812dfef018610c0", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dfe4bb07b757be04083465eb6630cd3aa6a79f/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dfe4bb07b757be04083465eb6630cd3aa6a79f/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e7dfe4bb07b757be04083465eb6630cd3aa6a79f", "patch": "@@ -2072,6 +2072,84 @@ replace_equiv_address_nv (memref, addr)\n {\n   return change_address_1 (memref, VOIDmode, addr, 0);\n }\n+\n+/* Return a memory reference like MEMREF, but with its mode widened to\n+   MODE and offset by OFFSET.  This would be used by targets that e.g.\n+   cannot issue QImode memory operations and have to use SImode memory\n+   operations plus masking logic.  */\n+\n+rtx\n+widen_memory_access (memref, mode, offset)\n+     rtx memref;\n+     enum machine_mode mode;\n+     HOST_WIDE_INT offset;\n+{\n+  rtx new = adjust_address_1 (memref, mode, offset, 1, 1);\n+  tree expr = MEM_EXPR (new);\n+  rtx memoffset = MEM_OFFSET (new);\n+  unsigned int size = GET_MODE_SIZE (mode);\n+\n+  /* If we don't know what offset we were at within the expression, then\n+     we can't know if we've overstepped the bounds.  */\n+  if (! memoffset && offset != 0)\n+    expr = NULL_TREE;\n+\n+  while (expr)\n+    {\n+      if (TREE_CODE (expr) == COMPONENT_REF)\n+\t{\n+\t  tree field = TREE_OPERAND (expr, 1);\n+\n+\t  if (! DECL_SIZE_UNIT (field))\n+\t    {\n+\t      expr = NULL_TREE;\n+\t      break;\n+\t    }\n+\n+\t  /* Is the field at least as large as the access?  If so, ok,\n+\t     otherwise strip back to the containing structure.  */\n+\t  if (compare_tree_int (DECL_SIZE_UNIT (field), size) >= 0\n+\t      && INTVAL (memoffset) >= 0)\n+\t    break;\n+\n+\t  if (! host_integerp (DECL_FIELD_OFFSET (field), 1))\n+\t    {\n+\t      expr = NULL_TREE;\n+\t      break;\n+\t    }\n+\n+\t  expr = TREE_OPERAND (expr, 0);\n+\t  memoffset = (GEN_INT (INTVAL (memoffset)\n+\t\t       + tree_low_cst (DECL_FIELD_OFFSET (field), 1)\n+\t\t       + (tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1)\n+\t\t          / BITS_PER_UNIT)));\n+\t}\n+      /* Similarly for the decl.  */\n+      else if (DECL_P (expr)\n+\t       && DECL_SIZE_UNIT (expr)\n+\t       && compare_tree_int (DECL_SIZE_UNIT (expr), size) >= 0\n+\t       && (! memoffset || INTVAL (memoffset) >= 0))\n+\tbreak;\n+      else\n+\t{\n+\t  /* The widened memory access overflows the expression, which means\n+\t     that it could alias another expression.  Zap it.  */\n+\t  expr = NULL_TREE;\n+\t  break;\n+\t}\n+    }\n+\n+  if (! expr)\n+    memoffset = NULL_RTX;\n+\n+  /* The widened memory may alias other stuff, so zap the alias set.  */\n+  /* ??? Maybe use get_alias_set on any remaining expression.  */\n+\n+  MEM_ATTRS (new) = get_mem_attrs (0, expr, memoffset, GEN_INT (size),\n+\t\t\t\t   MEM_ALIGN (new), mode);\n+\n+  return new;\n+}\n \f\n /* Return a newly created CODE_LABEL rtx with a unique label number.  */\n "}, {"sha": "e5b488aec33047a301d78313de470b65fd0cdf2d", "filename": "gcc/expr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7dfe4bb07b757be04083465eb6630cd3aa6a79f/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7dfe4bb07b757be04083465eb6630cd3aa6a79f/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=e7dfe4bb07b757be04083465eb6630cd3aa6a79f", "patch": "@@ -646,6 +646,10 @@ extern rtx replace_equiv_address PARAMS ((rtx, rtx));\n /* Likewise, but the reference is not required to be valid.  */\n extern rtx replace_equiv_address_nv PARAMS ((rtx, rtx));\n \n+/* Return a memory reference like MEMREF, but with its mode widened to\n+   MODE and adjusted by OFFSET.  */\n+extern rtx widen_memory_access PARAMS ((rtx, enum machine_mode, HOST_WIDE_INT));\n+\n /* Return a memory reference like MEMREF, but which is known to have a\n    valid address.  */\n extern rtx validize_mem PARAMS ((rtx));"}]}