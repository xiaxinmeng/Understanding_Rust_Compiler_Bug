{"sha": "dec1f3aa95606219f3b0f2255813a4d90c277451", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVjMWYzYWE5NTYwNjIxOWYzYjBmMjI1NTgxM2E0ZDkwYzI3NzQ1MQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-08-11T21:18:11Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-08-11T21:18:11Z"}, "message": "altivec.md: Change constraint \"m\" to \"Z\".\n\n        * config/rs6000/altivec.md: Change constraint \"m\" to \"Z\".\n        * config/rs6000/predicates.md (indexed_or_indirect_operand):\n        Accept address wrapped in AND for Altivec.\n        * config/rs6000/rs6000.c (rs6000_legitimize_reload_address):\n        Strip AND wrapping offset address for Altivec.\n\nFrom-SVN: r103001", "tree": {"sha": "055fd60c6010cb75f106d958a488ef48086660c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/055fd60c6010cb75f106d958a488ef48086660c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dec1f3aa95606219f3b0f2255813a4d90c277451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dec1f3aa95606219f3b0f2255813a4d90c277451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dec1f3aa95606219f3b0f2255813a4d90c277451", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dec1f3aa95606219f3b0f2255813a4d90c277451/comments", "author": null, "committer": null, "parents": [{"sha": "7fd6694bafed413f1dc161a5516517fa37fb1830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd6694bafed413f1dc161a5516517fa37fb1830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fd6694bafed413f1dc161a5516517fa37fb1830"}], "stats": {"total": 74, "additions": 55, "deletions": 19}, "files": [{"sha": "cbf54d471c65e7ce51de93a3d02e4af802551ac1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dec1f3aa95606219f3b0f2255813a4d90c277451/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dec1f3aa95606219f3b0f2255813a4d90c277451/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dec1f3aa95606219f3b0f2255813a4d90c277451", "patch": "@@ -1,3 +1,11 @@\n+2005-08-11  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/altivec.md: Change constraint \"m\" to \"Z\".\n+\t* config/rs6000/predicates.md (indexed_or_indirect_operand):\n+\tAccept address wrapped in AND for Altivec.\n+\t* config/rs6000/rs6000.c (rs6000_legitimize_reload_address):\n+\tStrip AND wrapping offset address for Altivec.\n+\n 2005-08-11  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/23312"}, {"sha": "025243557039a3599108e12e2d2af929da27329d", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dec1f3aa95606219f3b0f2255813a4d90c277451/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dec1f3aa95606219f3b0f2255813a4d90c277451/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=dec1f3aa95606219f3b0f2255813a4d90c277451", "patch": "@@ -149,14 +149,14 @@\n ;; Generic LVX load instruction.\n (define_insn \"altivec_lvx_<mode>\"\n   [(set (match_operand:V 0 \"altivec_register_operand\" \"=v\")\n-\t(match_operand:V 1 \"memory_operand\" \"m\"))]\n+\t(match_operand:V 1 \"memory_operand\" \"Z\"))]\n   \"TARGET_ALTIVEC\"\n   \"lvx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n ;; Generic STVX store instruction.\n (define_insn \"altivec_stvx_<mode>\"\n-  [(set (match_operand:V 0 \"memory_operand\" \"=m\")\n+  [(set (match_operand:V 0 \"memory_operand\" \"=Z\")\n \t(match_operand:V 1 \"altivec_register_operand\" \"v\"))]\n   \"TARGET_ALTIVEC\"\n   \"stvx %1,%y0\"\n@@ -173,8 +173,8 @@\n })\n \n (define_insn \"*mov<mode>_internal\"\n-  [(set (match_operand:V 0 \"nonimmediate_operand\" \"=m,v,v,o,r,r,v\")\n-\t(match_operand:V 1 \"input_operand\" \"v,m,v,r,o,r,W\"))]\n+  [(set (match_operand:V 0 \"nonimmediate_operand\" \"=Z,v,v,o,r,r,v\")\n+\t(match_operand:V 1 \"input_operand\" \"v,Z,v,r,o,r,W\"))]\n   \"TARGET_ALTIVEC \n    && (register_operand (operands[0], <MODE>mode) \n        || register_operand (operands[1], <MODE>mode))\"\n@@ -1802,21 +1802,21 @@\n \n (define_insn \"altivec_lvsl\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand 1 \"memory_operand\" \"m\")] UNSPEC_LVSL))]\n+\t(unspec:V16QI [(match_operand 1 \"memory_operand\" \"Z\")] UNSPEC_LVSL))]\n   \"TARGET_ALTIVEC\"\n   \"lvsl %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"altivec_lvsr\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand 1 \"memory_operand\" \"m\")] UNSPEC_LVSR))]\n+\t(unspec:V16QI [(match_operand 1 \"memory_operand\" \"Z\")] UNSPEC_LVSR))]\n   \"TARGET_ALTIVEC\"\n   \"lvsr %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_expand \"build_vector_mask_for_load\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand 1 \"memory_operand\" \"m\")] UNSPEC_LVSR))]\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n+\t(unspec:V16QI [(match_operand 1 \"memory_operand\" \"\")] UNSPEC_LVSR))]\n   \"TARGET_ALTIVEC\"\n   \"\n { \n@@ -1858,22 +1858,22 @@\n (define_insn \"altivec_lvxl\"\n   [(parallel\n     [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-\t  (match_operand:V4SI 1 \"memory_operand\" \"m\"))\n+\t  (match_operand:V4SI 1 \"memory_operand\" \"Z\"))\n      (unspec [(const_int 0)] UNSPEC_SET_VSCR)])]\n   \"TARGET_ALTIVEC\"\n   \"lvxl %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"altivec_lvx\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-\t(match_operand:V4SI 1 \"memory_operand\" \"m\"))]\n+\t(match_operand:V4SI 1 \"memory_operand\" \"Z\"))]\n   \"TARGET_ALTIVEC\"\n   \"lvx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"altivec_stvx\"\n   [(parallel\n-    [(set (match_operand:V4SI 0 \"memory_operand\" \"=m\")\n+    [(set (match_operand:V4SI 0 \"memory_operand\" \"=Z\")\n \t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] UNSPEC_STVX)])]\n   \"TARGET_ALTIVEC\"\n@@ -1882,7 +1882,7 @@\n \n (define_insn \"altivec_stvxl\"\n   [(parallel\n-    [(set (match_operand:V4SI 0 \"memory_operand\" \"=m\")\n+    [(set (match_operand:V4SI 0 \"memory_operand\" \"=Z\")\n \t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] UNSPEC_STVXL)])]\n   \"TARGET_ALTIVEC\"\n@@ -1891,7 +1891,7 @@\n \n (define_insn \"altivec_stve<VI_char>x\"\n   [(parallel\n-    [(set (match_operand:VI 0 \"memory_operand\" \"=m\")\n+    [(set (match_operand:VI 0 \"memory_operand\" \"=Z\")\n \t  (match_operand:VI 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] UNSPEC_STVE)])]\n   \"TARGET_ALTIVEC\"\n@@ -1900,7 +1900,7 @@\n \n (define_insn \"*altivec_stvesfx\"\n   [(parallel\n-    [(set (match_operand:V4SF 0 \"memory_operand\" \"=m\")\n+    [(set (match_operand:V4SF 0 \"memory_operand\" \"=Z\")\n \t  (match_operand:V4SF 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] UNSPEC_STVE)])]\n   \"TARGET_ALTIVEC\""}, {"sha": "122ec45e8569399f652193eb2f58b7cab7f1cfe6", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dec1f3aa95606219f3b0f2255813a4d90c277451/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dec1f3aa95606219f3b0f2255813a4d90c277451/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=dec1f3aa95606219f3b0f2255813a4d90c277451", "patch": "@@ -355,11 +355,22 @@\n \n ;; Return 1 if the operand is an indexed or indirect memory operand.\n (define_predicate \"indexed_or_indirect_operand\"\n-  (and (match_operand 0 \"memory_operand\")\n-       (match_test \"REG_P (XEXP (op, 0))\n-\t\t    || (GET_CODE (XEXP (op, 0)) == PLUS\n-\t\t\t&& REG_P (XEXP (XEXP (op, 0), 0)) \n-\t\t\t&& REG_P (XEXP (XEXP (op, 0), 1)))\")))\n+  (match_operand 0 \"memory_operand\")\n+{\n+  rtx tmp = XEXP (op, 0);\n+\n+  if (TARGET_ALTIVEC\n+      && ALTIVEC_VECTOR_MODE (mode)\n+      && GET_CODE (tmp) == AND\n+      && GET_CODE (XEXP (tmp, 1)) == CONST_INT\n+      && INTVAL (XEXP (tmp, 1)) == -16)\n+    tmp = XEXP (tmp, 0);\n+\n+    return REG_P (tmp)\n+\t\t  || (GET_CODE (tmp) == PLUS\n+\t\t      && REG_P (XEXP (tmp, 0)) \n+\t\t      && REG_P (XEXP (tmp, 1)));\n+})\n \n ;; Return 1 if the operand is a memory operand with an address divisible by 4\n (define_predicate \"word_offset_memref_operand\""}, {"sha": "04c02c35377a5ba26beb731f3cde5d27aefeb12e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dec1f3aa95606219f3b0f2255813a4d90c277451/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dec1f3aa95606219f3b0f2255813a4d90c277451/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=dec1f3aa95606219f3b0f2255813a4d90c277451", "patch": "@@ -3332,6 +3332,23 @@ rs6000_legitimize_reload_address (rtx x, enum machine_mode mode,\n     }\n #endif\n \n+  /* Reload an offset address wrapped by an AND that represents the\n+     masking of the lower bits.  Strip the outer AND and let reload\n+     convert the offset address into an indirect address.  */\n+  if (TARGET_ALTIVEC\n+      && ALTIVEC_VECTOR_MODE (mode)\n+      && GET_CODE (x) == AND\n+      && GET_CODE (XEXP (x, 0)) == PLUS\n+      && GET_CODE (XEXP (XEXP (x, 0), 0)) == REG\n+      && GET_CODE (XEXP (XEXP (x, 0), 1)) == CONST_INT\n+      && GET_CODE (XEXP (x, 1)) == CONST_INT\n+      && INTVAL (XEXP (x, 1)) == -16)\n+    {\n+      x = XEXP (x, 0);\n+      *win = 1;\n+      return x;\n+    }\n+\n   if (TARGET_TOC\n       && constant_pool_expr_p (x)\n       && ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (get_pool_constant (x), mode))"}]}