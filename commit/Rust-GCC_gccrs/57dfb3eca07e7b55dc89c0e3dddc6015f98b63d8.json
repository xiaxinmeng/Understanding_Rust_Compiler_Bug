{"sha": "57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkZmIzZWNhMDdlN2I1NWRjODljMGUzZGRkYzYwMTVmOThiNjNkOA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2018-05-29T09:41:34Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-29T09:41:34Z"}, "message": "[Ada] Add system-vxworks7 variants of system.ads files for Vx7\n\nBased on the Vx6 versions, using a different link spec to accomodate VxWorks 7\nspecificities, in particular the ability in some configurations to rely on\n.ctor sections to trigger constructors in kernel modules.\n\n2018-05-29  Olivier Hainque  <hainque@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/system-vxworks7-ppc-rtp.ads: New file.\n\t* libgnat/system-vxworks7-ppc-kernel.ads: New file.\n\t* libgnat/system-vxworks7-e500-rtp.ads: New file.\n\t* libgnat/system-vxworks7-e500-kernel.ads: New file.\n\t* libgnat/system-vxworks7-x86-rtp.ads: New file.\n\t* libgnat/system-vxworks-ppc64-kernel.ads: Rename as ...\n\t* libgnat/system-vxworks7-ppc64-kernel.ads: and adjust name of\n\tgnat-crtbe link spec to use the vx7 variant.\n\nFrom-SVN: r260877", "tree": {"sha": "2f7d9051d5dc329c3ca77ac232c77374ef0ac8aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f7d9051d5dc329c3ca77ac232c77374ef0ac8aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f39fcd651b3334e7b12b35f7e822ca6c4b57376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f39fcd651b3334e7b12b35f7e822ca6c4b57376"}], "stats": {"total": 858, "additions": 857, "deletions": 1}, "files": [{"sha": "be6192ddf31e3f2b0c6aae1753ec2ae7325c1de9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8", "patch": "@@ -1,3 +1,14 @@\n+2018-05-29  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* libgnat/system-vxworks7-ppc-rtp.ads: New file.\n+\t* libgnat/system-vxworks7-ppc-kernel.ads: New file.\n+\t* libgnat/system-vxworks7-e500-rtp.ads: New file.\n+\t* libgnat/system-vxworks7-e500-kernel.ads: New file.\n+\t* libgnat/system-vxworks7-x86-rtp.ads: New file.\n+\t* libgnat/system-vxworks-ppc64-kernel.ads: Rename as ...\n+\t* libgnat/system-vxworks7-ppc64-kernel.ads: and adjust name of\n+\tgnat-crtbe link spec to use the vx7 variant.\n+\n 2018-05-29  Olivier Hainque  <hainque@adacore.com>\n \n \t* vx_crtbegin.inc: Use a consistent naming convention for the"}, {"sha": "7e524ca3c540c77491f2c6145726499cd15840e2", "filename": "gcc/ada/libgnat/system-vxworks7-e500-kernel.ads", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-e500-kernel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-e500-kernel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-e500-kernel.ads?ref=57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8", "patch": "@@ -0,0 +1,167 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                      (VxWorks 7 Kernel Version E500)                     --\n+--                                                                          --\n+--          Copyright (C) 1992-2018, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System is\n+   pragma Pure;\n+   --  Note that we take advantage of the implementation permission to make\n+   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n+   --  2005, this is Pure in any case (AI-362).\n+\n+   pragma No_Elaboration_Code_All;\n+   --  Allow the use of that restriction in units that WITH this unit\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 1.0 / 60.0;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   pragma Preelaborable_Initialization (Address);\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 32;\n+   Memory_Size  : constant := 2 ** 32;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := High_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   --  Ada priorities are mapped to VxWorks priorities using the following\n+   --  transformation: 255 - Ada Priority\n+\n+   --  Ada priorities are used as follows:\n+\n+   --  256        is reserved for the VxWorks kernel\n+   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n+   --  247        is a catchall default \"interrupt\" priority for signals,\n+   --             allowing higher priority than normal tasks, but lower than\n+   --             hardware priority levels.  Protected Object ceilings can\n+   --             override these values.\n+   --  246        is used by the Interrupt_Manager task\n+\n+   Max_Priority           : constant Positive := 245;\n+   Max_Interrupt_Priority : constant Positive := 255;\n+\n+   subtype Any_Priority       is Integer      range   0 .. 255;\n+   subtype Priority           is Any_Priority range   0 .. 245;\n+   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n+\n+   Default_Priority : constant Priority := 122;\n+\n+private\n+\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n+   --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n+   --  This is commented out by our Makefile for SJLJ runtimes.\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := True;\n+   Command_Line_Args         : constant Boolean := False;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   Preallocated_Stacks       : constant Boolean := False;\n+   --  MPC8548ECE Chip Errata Rev 8: signed zero not reliable\n+   Signed_Zeros              : constant Boolean := False;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := False;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := True;\n+   Frontend_Exceptions       : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n+\n+   Executable_Extension : constant String := \".out\";\n+\n+end System;"}, {"sha": "f85eed98abc1757a69fa64383996acb5a19053f2", "filename": "gcc/ada/libgnat/system-vxworks7-e500-rtp.ads", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-e500-rtp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-e500-rtp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-e500-rtp.ads?ref=57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8", "patch": "@@ -0,0 +1,171 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                          (VxWorks 7.x E500 RTP)                          --\n+--                                                                          --\n+--          Copyright (C) 1992-2018, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the VxWorks version of this package for RTPs\n+\n+package System is\n+   pragma Pure;\n+   --  Note that we take advantage of the implementation permission to make\n+   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n+   --  2005, this is Pure in any case (AI-362).\n+\n+   pragma No_Elaboration_Code_All;\n+   --  Allow the use of that restriction in units that WITH this unit\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 1.0 / 60.0;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   pragma Preelaborable_Initialization (Address);\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 32;\n+   Memory_Size  : constant := 2 ** 32;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := High_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   --  Ada priorities are mapped to VxWorks priorities using the following\n+   --  transformation: 255 - Ada Priority\n+\n+   --  Ada priorities are used as follows:\n+\n+   --  256        is reserved for the VxWorks kernel\n+   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n+   --  247        is a catchall default \"interrupt\" priority for signals,\n+   --             allowing higher priority than normal tasks, but lower than\n+   --             hardware priority levels.  Protected Object ceilings can\n+   --             override these values.\n+   --  246        is used by the Interrupt_Manager task\n+\n+   Max_Priority           : constant Positive := 245;\n+   Max_Interrupt_Priority : constant Positive := 255;\n+\n+   subtype Any_Priority       is Integer      range   0 .. 255;\n+   subtype Priority           is Any_Priority range   0 .. 245;\n+   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n+\n+   Default_Priority : constant Priority := 122;\n+\n+private\n+\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n+   --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n+   --  This is commented out by our Makefile for SJLJ runtimes.\n+\n+   pragma Linker_Options (\"--specs=vxworks-e500-link.spec\");\n+   --  Setup proper set of -L's for this configuration\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := True;\n+   Command_Line_Args         : constant Boolean := True;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   Preallocated_Stacks       : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := False;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := False;\n+   Frontend_Exceptions       : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n+\n+   Executable_Extension : constant String := \".vxe\";\n+\n+end System;"}, {"sha": "18b71498e5632f1458dbaffc9970abd64f2cf1f1", "filename": "gcc/ada/libgnat/system-vxworks7-ppc-kernel.ads", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc-kernel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc-kernel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc-kernel.ads?ref=57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8", "patch": "@@ -0,0 +1,166 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                      (VxWorks 7 Kernel Version PPC)                      --\n+--                                                                          --\n+--          Copyright (C) 1992-2018, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System is\n+   pragma Pure;\n+   --  Note that we take advantage of the implementation permission to make\n+   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n+   --  2005, this is Pure in any case (AI-362).\n+\n+   pragma No_Elaboration_Code_All;\n+   --  Allow the use of that restriction in units that WITH this unit\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 1.0 / 60.0;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   pragma Preelaborable_Initialization (Address);\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 32;\n+   Memory_Size  : constant := 2 ** 32;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := High_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   --  Ada priorities are mapped to VxWorks priorities using the following\n+   --  transformation: 255 - Ada Priority\n+\n+   --  Ada priorities are used as follows:\n+\n+   --  256        is reserved for the VxWorks kernel\n+   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n+   --  247        is a catchall default \"interrupt\" priority for signals,\n+   --             allowing higher priority than normal tasks, but lower than\n+   --             hardware priority levels.  Protected Object ceilings can\n+   --             override these values.\n+   --  246        is used by the Interrupt_Manager task\n+\n+   Max_Priority           : constant Positive := 245;\n+   Max_Interrupt_Priority : constant Positive := 255;\n+\n+   subtype Any_Priority       is Integer      range   0 .. 255;\n+   subtype Priority           is Any_Priority range   0 .. 245;\n+   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n+\n+   Default_Priority : constant Priority := 122;\n+\n+private\n+\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n+   --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n+   --  This is commented out by our Makefile for SJLJ runtimes.\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := True;\n+   Command_Line_Args         : constant Boolean := False;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   Preallocated_Stacks       : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := False;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := True;\n+   Frontend_Exceptions       : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n+\n+   Executable_Extension : constant String := \".out\";\n+\n+end System;"}, {"sha": "90c7c88ed3851bb8fb204d00aa70259ee45d0b6f", "filename": "gcc/ada/libgnat/system-vxworks7-ppc-rtp.ads", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc-rtp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc-rtp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc-rtp.ads?ref=57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8", "patch": "@@ -0,0 +1,171 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                          (VxWorks 7.x PPC RTP)                           --\n+--                                                                          --\n+--          Copyright (C) 1992-2018, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the VxWorks version of this package for RTPs\n+\n+package System is\n+   pragma Pure;\n+   --  Note that we take advantage of the implementation permission to make\n+   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n+   --  2005, this is Pure in any case (AI-362).\n+\n+   pragma No_Elaboration_Code_All;\n+   --  Allow the use of that restriction in units that WITH this unit\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 1.0 / 60.0;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   pragma Preelaborable_Initialization (Address);\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 32;\n+   Memory_Size  : constant := 2 ** 32;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := High_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   --  Ada priorities are mapped to VxWorks priorities using the following\n+   --  transformation: 255 - Ada Priority\n+\n+   --  Ada priorities are used as follows:\n+\n+   --  256        is reserved for the VxWorks kernel\n+   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n+   --  247        is a catchall default \"interrupt\" priority for signals,\n+   --             allowing higher priority than normal tasks, but lower than\n+   --             hardware priority levels.  Protected Object ceilings can\n+   --             override these values.\n+   --  246        is used by the Interrupt_Manager task\n+\n+   Max_Priority           : constant Positive := 245;\n+   Max_Interrupt_Priority : constant Positive := 255;\n+\n+   subtype Any_Priority       is Integer      range   0 .. 255;\n+   subtype Priority           is Any_Priority range   0 .. 245;\n+   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n+\n+   Default_Priority : constant Priority := 122;\n+\n+private\n+\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n+   --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n+   --  This is commented out by our Makefile for SJLJ runtimes.\n+\n+   pragma Linker_Options (\"--specs=vxworks-ppc-link.spec\");\n+   --  Setup proper set of -L's for this configuration\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := True;\n+   Command_Line_Args         : constant Boolean := True;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   Preallocated_Stacks       : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := False;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := False;\n+   Frontend_Exceptions       : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n+\n+   Executable_Extension : constant String := \".vxe\";\n+\n+end System;"}, {"sha": "bef73b0ea543c34b26b3311291b828d41d9d953e", "filename": "gcc/ada/libgnat/system-vxworks7-ppc64-kernel.ads", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc64-kernel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc64-kernel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-ppc64-kernel.ads?ref=57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8", "patch": "@@ -120,7 +120,7 @@ package System is\n \n private\n \n-   pragma Linker_Options (\"--specs=vxworks-gnat-crtbe-link.spec\");\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n    --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n    --  This is commented out by our Makefile for SJLJ runtimes.\n ", "previous_filename": "gcc/ada/libgnat/system-vxworks-ppc64-kernel.ads"}, {"sha": "503d0953c9465c3330553407b171cee6551709b8", "filename": "gcc/ada/libgnat/system-vxworks7-x86-rtp.ads", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86-rtp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86-rtp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks7-x86-rtp.ads?ref=57dfb3eca07e7b55dc89c0e3dddc6015f98b63d8", "patch": "@@ -0,0 +1,170 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                        GNAT RUN-TIME COMPONENTS                          --\n+--                                                                          --\n+--                               S Y S T E M                                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                    (VxWorks 7 Version x86 for RTPs)                      --\n+--                                                                          --\n+--          Copyright (C) 1992-2018, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package System is\n+   pragma Pure;\n+   --  Note that we take advantage of the implementation permission to make\n+   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n+   --  2005, this is Pure in any case (AI-362).\n+\n+   pragma No_Elaboration_Code_All;\n+   --  Allow the use of that restriction in units that WITH this unit\n+\n+   type Name is (SYSTEM_NAME_GNAT);\n+   System_Name : constant Name := SYSTEM_NAME_GNAT;\n+\n+   --  System-Dependent Named Numbers\n+\n+   Min_Int               : constant := Long_Long_Integer'First;\n+   Max_Int               : constant := Long_Long_Integer'Last;\n+\n+   Max_Binary_Modulus    : constant := 2 ** Long_Long_Integer'Size;\n+   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n+\n+   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n+   Max_Digits            : constant := Long_Long_Float'Digits;\n+\n+   Max_Mantissa          : constant := 63;\n+   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n+\n+   Tick                  : constant := 1.0 / 60.0;\n+\n+   --  Storage-related Declarations\n+\n+   type Address is private;\n+   pragma Preelaborable_Initialization (Address);\n+   Null_Address : constant Address;\n+\n+   Storage_Unit : constant := 8;\n+   Word_Size    : constant := 32;\n+   Memory_Size  : constant := 2 ** 32;\n+\n+   --  Address comparison\n+\n+   function \"<\"  (Left, Right : Address) return Boolean;\n+   function \"<=\" (Left, Right : Address) return Boolean;\n+   function \">\"  (Left, Right : Address) return Boolean;\n+   function \">=\" (Left, Right : Address) return Boolean;\n+   function \"=\"  (Left, Right : Address) return Boolean;\n+\n+   pragma Import (Intrinsic, \"<\");\n+   pragma Import (Intrinsic, \"<=\");\n+   pragma Import (Intrinsic, \">\");\n+   pragma Import (Intrinsic, \">=\");\n+   pragma Import (Intrinsic, \"=\");\n+\n+   --  Other System-Dependent Declarations\n+\n+   type Bit_Order is (High_Order_First, Low_Order_First);\n+   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n+   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n+\n+   --  Priority-related Declarations (RM D.1)\n+\n+   --  Ada priorities are mapped to VxWorks priorities using the following\n+   --  transformation: 255 - Ada Priority\n+\n+   --  Ada priorities are used as follows:\n+\n+   --  256        is reserved for the VxWorks kernel\n+   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n+   --  247        is a catchall default \"interrupt\" priority for signals,\n+   --             allowing higher priority than normal tasks, but lower than\n+   --             hardware priority levels.  Protected Object ceilings can\n+   --             override these values.\n+   --  246        is used by the Interrupt_Manager task\n+\n+   Max_Priority           : constant Positive := 245;\n+   Max_Interrupt_Priority : constant Positive := 255;\n+\n+   subtype Any_Priority       is Integer      range   0 .. 255;\n+   subtype Priority           is Any_Priority range   0 .. 245;\n+   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n+\n+   Default_Priority : constant Priority := 122;\n+\n+private\n+\n+   pragma Linker_Options (\"--specs=vxworks7-gnat-crtbe-link.spec\");\n+   --  Pull in crtbegin/crtend objects and register exceptions for ZCX.\n+   --  This is commented out by our Makefile for SJLJ runtimes.\n+\n+   pragma Linker_Options (\"--specs=vxworks-x86-link.spec\");\n+   --  Setup proper set of -L's for this configuration\n+\n+   type Address is mod Memory_Size;\n+   Null_Address : constant Address := 0;\n+\n+   --------------------------------------\n+   -- System Implementation Parameters --\n+   --------------------------------------\n+\n+   --  These parameters provide information about the target that is used\n+   --  by the compiler. They are in the private part of System, where they\n+   --  can be accessed using the special circuitry in the Targparm unit\n+   --  whose source should be consulted for more detailed descriptions\n+   --  of the individual switch values.\n+\n+   Backend_Divide_Checks     : constant Boolean := False;\n+   Backend_Overflow_Checks   : constant Boolean := True;\n+   Command_Line_Args         : constant Boolean := True;\n+   Configurable_Run_Time     : constant Boolean := False;\n+   Denorm                    : constant Boolean := True;\n+   Duration_32_Bits          : constant Boolean := False;\n+   Exit_Status_Supported     : constant Boolean := True;\n+   Fractional_Fixed_Ops      : constant Boolean := False;\n+   Frontend_Layout           : constant Boolean := False;\n+   Machine_Overflows         : constant Boolean := False;\n+   Machine_Rounds            : constant Boolean := True;\n+   Preallocated_Stacks       : constant Boolean := False;\n+   Signed_Zeros              : constant Boolean := True;\n+   Stack_Check_Default       : constant Boolean := False;\n+   Stack_Check_Probes        : constant Boolean := True;\n+   Stack_Check_Limits        : constant Boolean := False;\n+   Support_Aggregates        : constant Boolean := True;\n+   Support_Atomic_Primitives : constant Boolean := True;\n+   Support_Composite_Assign  : constant Boolean := True;\n+   Support_Composite_Compare : constant Boolean := True;\n+   Support_Long_Shifts       : constant Boolean := True;\n+   Always_Compatible_Rep     : constant Boolean := False;\n+   Suppress_Standard_Library : constant Boolean := False;\n+   Use_Ada_Main_Program_Name : constant Boolean := False;\n+   Frontend_Exceptions       : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n+\n+   Executable_Extension : constant String := \".vxe\";\n+\n+end System;"}]}