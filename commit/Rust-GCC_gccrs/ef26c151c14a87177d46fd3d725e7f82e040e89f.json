{"sha": "ef26c151c14a87177d46fd3d725e7f82e040e89f", "node_id": "C_kwDOANBUbNoAKGVmMjZjMTUxYzE0YTg3MTc3ZDQ2ZmQzZDcyNWU3ZjgyZTA0MGU4OWY", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-23T12:33:07Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-23T12:35:22Z"}, "message": "x86: PR target/103773: Fix wrong-code with -Oz from pop to memory.\n\nThis is a fix to PR target/103773 where -Oz shouldn't use push/pop\non x86 to shrink writing small integer constants to memory.\nInstead clang uses \"andl $0, mem\" for writing zero, and \"orl $-1, mem\"\nwhen writing -1 to memory when using -Oz.  This patch implements this\nvia peephole2 where we can confirm that its ok to clobber the flags.\n\n2021-12-23  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\tPR target/103773\n\t* config/i386/i386.md (*mov<mode>_and): New define_insn for\n\twriting a zero to memory using AND.\n\t(*mov<mode>_or): Extend to allow memory destination and HImode.\n\t(*movdi_internal): Remove -Oz push/pop optimization from here.\n\t(*movsi_internal): Likewise.\n\t(peephole2): Perform -Oz push/pop optimization here, only for\n\tregister destinations, values other than zero, and in functions\n\tthat don't used the red zone.\n\t(peephole2): With -Oz, convert writes of 0 or -1 to memory into\n\ttheir clobber forms, i.e. *mov<mode>_and and *mov<mode>_or resp.\n\ngcc/testsuite/ChangeLog\n\tPR target/103773\n\t* gcc.target/i386/pr103773-2.c: New test case.\n\t* gcc.target/i386/pr103773.c: New test case.", "tree": {"sha": "a937ab620ad5df0e89095457cd1011c14f39219e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a937ab620ad5df0e89095457cd1011c14f39219e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef26c151c14a87177d46fd3d725e7f82e040e89f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef26c151c14a87177d46fd3d725e7f82e040e89f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef26c151c14a87177d46fd3d725e7f82e040e89f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef26c151c14a87177d46fd3d725e7f82e040e89f/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61e53698a08dc1d9a54d785218af687a6751c1b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e53698a08dc1d9a54d785218af687a6751c1b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e53698a08dc1d9a54d785218af687a6751c1b3"}], "stats": {"total": 93, "additions": 75, "deletions": 18}, "files": [{"sha": "284b9507466dbb01eed0572fefadbd2a2df5a942", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef26c151c14a87177d46fd3d725e7f82e040e89f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef26c151c14a87177d46fd3d725e7f82e040e89f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ef26c151c14a87177d46fd3d725e7f82e040e89f", "patch": "@@ -2028,9 +2028,19 @@\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"length_immediate\" \"0\")])\n \n+(define_insn \"*mov<mode>_and\"\n+  [(set (match_operand:SWI248 0 \"memory_operand\" \"=m\")\n+\t(match_operand:SWI248 1 \"const0_operand\"))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"reload_completed\"\n+  \"and{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"mode\" \"<MODE>\")\n+   (set_attr \"length_immediate\" \"1\")])\n+\n (define_insn \"*mov<mode>_or\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(match_operand:SWI48 1 \"constm1_operand\"))\n+  [(set (match_operand:SWI248 0 \"nonimmediate_operand\" \"=rm\")\n+\t(match_operand:SWI248 1 \"constm1_operand\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"reload_completed\"\n   \"or{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n@@ -2218,14 +2228,7 @@\n     case TYPE_IMOV:\n       gcc_assert (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[1]));\n       if (get_attr_mode (insn) == MODE_SI)\n-\t{\n-\t  if (optimize_size > 1\n-\t      && TARGET_64BIT\n-\t      && CONST_INT_P (operands[1])\n-\t      && IN_RANGE (INTVAL (operands[1]), -128, 127))\n-\t    return \"push{q}\\t%1\\n\\tpop{q}\\t%0\";\n-\t  return \"mov{l}\\t{%k1, %k0|%k0, %k1}\";\n-\t}\n+\treturn \"mov{l}\\t{%k1, %k0|%k0, %k1}\";\n       else if (which_alternative == 4)\n \treturn \"movabs{q}\\t{%1, %0|%0, %1}\";\n       else if (ix86_use_lea_for_mov (insn, operands))\n@@ -2443,14 +2446,6 @@\n       gcc_assert (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[1]));\n       if (ix86_use_lea_for_mov (insn, operands))\n \treturn \"lea{l}\\t{%E1, %0|%0, %E1}\";\n-      else if (optimize_size > 1\n-\t       && CONST_INT_P (operands[1])\n-\t       && IN_RANGE (INTVAL (operands[1]), -128, 127))\n-\t{\n-\t  if (TARGET_64BIT)\n-\t    return \"push{q}\\t%1\\n\\tpop{q}\\t%q0\";\n-\t  return \"push{l}\\t%1\\n\\tpop{l}\\t%0\";\n-\t}\n       else\n \treturn \"mov{l}\\t{%1, %0|%0, %1}\";\n \n@@ -2514,6 +2509,37 @@\n \t   ]\n \t   (symbol_ref \"true\")))])\n \n+;; With -Oz, transform mov $imm,reg to the shorter push $imm; pop reg.\n+(define_peephole2\n+  [(set (match_operand:SWI248 0 \"general_reg_operand\")\n+\t(match_operand:SWI248 1 \"const_int_operand\"))]\n+  \"optimize_insn_for_size_p () && optimize_size > 1\n+   && operands[1] != const0_rtx\n+   && IN_RANGE (INTVAL (operands[1]), -128, 127)\n+   && !ix86_red_zone_used\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (set (match_dup 0) (match_dup 3))]\n+{\n+  if (GET_MODE (operands[0]) != word_mode)\n+    operands[0] = gen_rtx_REG (word_mode, REGNO (operands[0]));\n+\n+  operands[2] = gen_rtx_MEM (word_mode,\n+\t\t\t     gen_rtx_PRE_DEC (Pmode, stack_pointer_rtx));\n+  operands[3] = gen_rtx_MEM (word_mode,\n+\t\t\t     gen_rtx_POST_INC (Pmode, stack_pointer_rtx));\n+})\n+\n+;; With -Oz, transform mov $0,mem to the shorter and $0,mem.\n+;; Likewise, transform mov $-1,mem to the shorter or $-1,mem.\n+(define_peephole2\n+  [(set (match_operand:SWI248 0 \"memory_operand\")\n+\t(match_operand:SWI248 1 \"const_int_operand\"))]\n+  \"(operands[1] == const0_rtx || operands[1] == constm1_rtx)\n+   && optimize_insn_for_size_p () && optimize_size > 1\n+   && peep2_regno_dead_p (0, FLAGS_REG)\"\n+  [(parallel [(set (match_dup 0) (match_dup 1))\n+              (clobber (reg:CC FLAGS_REG))])])\n+\n (define_insn \"*movhi_internal\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\"\n     \"=r,r,r,m ,*k,*k ,r ,m ,*k ,?r,?*v,*v,*v,*v,m\")"}, {"sha": "9dafebdafbf7ba4f1e44019054702cb2baa821f9", "filename": "gcc/testsuite/gcc.target/i386/pr103773-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef26c151c14a87177d46fd3d725e7f82e040e89f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103773-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef26c151c14a87177d46fd3d725e7f82e040e89f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103773-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103773-2.c?ref=ef26c151c14a87177d46fd3d725e7f82e040e89f", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Oz\" } */\n+short s;\n+int i;\n+long long l;\n+\n+void s0() { s = 0; }\n+void sm1() { s = -1; }\n+void i0() { i = 0; }\n+void im1() { i = -1; }\n+void l0() { l = 0; }\n+void lm1() { l = -1; }\n+\n+/* { dg-final { scan-assembler-not \"\\tmov\\[wlq\\]\\t\\\\\\$0,\" } } */\n+/* { dg-final { scan-assembler-not \"\\tmov\\[wlq\\]\\t\\\\\\$-1,\" } } */\n+/* { dg-final { scan-assembler \"\\tandw\\t\\\\\\$0,\" } } */\n+/* { dg-final { scan-assembler \"\\torw\\t\\\\\\$-1,\" } } */\n+/* { dg-final { scan-assembler \"\\torl\\t\\\\\\$-1,\" } } */\n+"}, {"sha": "1e4b8ce903cfed57e78159dbf364932dd3493d9a", "filename": "gcc/testsuite/gcc.target/i386/pr103773.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef26c151c14a87177d46fd3d725e7f82e040e89f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103773.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef26c151c14a87177d46fd3d725e7f82e040e89f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103773.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103773.c?ref=ef26c151c14a87177d46fd3d725e7f82e040e89f", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Oz\" } */\n+\n+unsigned long long x;\n+\n+int main (void)\n+{\n+  __builtin_memset (&x, 0xff, 4);\n+  if (x != 0xffffffff)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}