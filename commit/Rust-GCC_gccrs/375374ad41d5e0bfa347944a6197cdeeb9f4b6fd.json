{"sha": "375374ad41d5e0bfa347944a6197cdeeb9f4b6fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc1Mzc0YWQ0MWQ1ZTBiZmEzNDc5NDRhNjE5N2NkZWViOWY0YjZmZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-02-17T14:57:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-02-17T14:57:58Z"}, "message": "re PR rtl-optimization/69609 (block reordering consumes an inordinate amount of time, REE consumes much memory)\n\n2016-02-17  Richard Biener  <rguenther@suse.de>\n\n\tPR rtl-optimization/69609\n\t* bb-reorder.c (struct bbro_basic_block_data): Add priority member.\n\t(find_traces_1_round): When ending a trace update cached priority\n\tof successors.\n\t(bb_to_key): Use cached priority when available.\n\t(copy_bb): Initialize cached priority.\n\t(reorder_basic_blocks_software_trace_cache): Likewise.\n\nFrom-SVN: r233498", "tree": {"sha": "8b04f020b57038802eb3158125e723c7e101324d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b04f020b57038802eb3158125e723c7e101324d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/375374ad41d5e0bfa347944a6197cdeeb9f4b6fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375374ad41d5e0bfa347944a6197cdeeb9f4b6fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/375374ad41d5e0bfa347944a6197cdeeb9f4b6fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375374ad41d5e0bfa347944a6197cdeeb9f4b6fd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57bfb1345270d8f3916d50e0f6ce35c79c2c2f52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bfb1345270d8f3916d50e0f6ce35c79c2c2f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57bfb1345270d8f3916d50e0f6ce35c79c2c2f52"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "4646617cd57a28dedc830edd4fc7b401d707b1df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375374ad41d5e0bfa347944a6197cdeeb9f4b6fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375374ad41d5e0bfa347944a6197cdeeb9f4b6fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=375374ad41d5e0bfa347944a6197cdeeb9f4b6fd", "patch": "@@ -1,3 +1,13 @@\n+2016-02-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/69609\n+\t* bb-reorder.c (struct bbro_basic_block_data): Add priority member.\n+\t(find_traces_1_round): When ending a trace update cached priority\n+\tof successors.\n+\t(bb_to_key): Use cached priority when available.\n+\t(copy_bb): Initialize cached priority.\n+\t(reorder_basic_blocks_software_trace_cache): Likewise.\n+\n 2016-02-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/69161"}, {"sha": "5fb60bde76296189ab61d23ecbbdb4bfb627430f", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/375374ad41d5e0bfa347944a6197cdeeb9f4b6fd/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/375374ad41d5e0bfa347944a6197cdeeb9f4b6fd/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=375374ad41d5e0bfa347944a6197cdeeb9f4b6fd", "patch": "@@ -157,6 +157,10 @@ struct bbro_basic_block_data\n   /* Which trace was this bb visited in?  */\n   int visited;\n \n+  /* Cached maximum frequency of interesting incoming edges.\n+     Minus one means not yet computed.  */\n+  int priority;\n+\n   /* Which heap is BB in (if any)?  */\n   bb_heap_t *heap;\n \n@@ -775,7 +779,15 @@ find_traces_1_round (int branch_th, int exec_th, gcov_type count_th,\n       while (best_edge);\n       trace->last = bb;\n       bbd[trace->first->index].start_of_trace = *n_traces - 1;\n-      bbd[trace->last->index].end_of_trace = *n_traces - 1;\n+      if (bbd[trace->last->index].end_of_trace != *n_traces - 1)\n+\t{\n+\t  bbd[trace->last->index].end_of_trace = *n_traces - 1;\n+\t  /* Update the cached maximum frequency for interesting predecessor\n+\t     edges for successors of the new trace end.  */\n+\t  FOR_EACH_EDGE (e, ei, trace->last->succs)\n+\t    if (EDGE_FREQUENCY (e) > bbd[e->dest->index].priority)\n+\t      bbd[e->dest->index].priority = EDGE_FREQUENCY (e);\n+\t}\n \n       /* The trace is terminated so we have to recount the keys in heap\n \t (some block can have a lower key because now one of its predecessors\n@@ -845,6 +857,7 @@ copy_bb (basic_block old_bb, edge e, basic_block bb, int trace)\n \t  bbd[i].end_of_trace = -1;\n \t  bbd[i].in_trace = -1;\n \t  bbd[i].visited = 0;\n+\t  bbd[i].priority = -1;\n \t  bbd[i].heap = NULL;\n \t  bbd[i].node = NULL;\n \t}\n@@ -875,7 +888,6 @@ bb_to_key (basic_block bb)\n {\n   edge e;\n   edge_iterator ei;\n-  int priority = 0;\n \n   /* Use index as key to align with its original order.  */\n   if (optimize_function_for_size_p (cfun))\n@@ -889,17 +901,23 @@ bb_to_key (basic_block bb)\n \n   /* Prefer blocks whose predecessor is an end of some trace\n      or whose predecessor edge is EDGE_DFS_BACK.  */\n-  FOR_EACH_EDGE (e, ei, bb->preds)\n+  int priority = bbd[bb->index].priority;\n+  if (priority == -1)\n     {\n-      if ((e->src != ENTRY_BLOCK_PTR_FOR_FN (cfun)\n-\t   && bbd[e->src->index].end_of_trace >= 0)\n-\t  || (e->flags & EDGE_DFS_BACK))\n+      priority = 0;\n+      FOR_EACH_EDGE (e, ei, bb->preds)\n \t{\n-\t  int edge_freq = EDGE_FREQUENCY (e);\n+\t  if ((e->src != ENTRY_BLOCK_PTR_FOR_FN (cfun)\n+\t       && bbd[e->src->index].end_of_trace >= 0)\n+\t      || (e->flags & EDGE_DFS_BACK))\n+\t    {\n+\t      int edge_freq = EDGE_FREQUENCY (e);\n \n-\t  if (edge_freq > priority)\n-\t    priority = edge_freq;\n+\t      if (edge_freq > priority)\n+\t\tpriority = edge_freq;\n+\t    }\n \t}\n+      bbd[bb->index].priority = priority;\n     }\n \n   if (priority)\n@@ -2253,6 +2271,7 @@ reorder_basic_blocks_software_trace_cache (void)\n       bbd[i].end_of_trace = -1;\n       bbd[i].in_trace = -1;\n       bbd[i].visited = 0;\n+      bbd[i].priority = -1;\n       bbd[i].heap = NULL;\n       bbd[i].node = NULL;\n     }"}]}