{"sha": "d4de7e32eff0a6363defa50b052d7a30548b6552", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRkZTdlMzJlZmYwYTYzNjNkZWZhNTBiMDUyZDdhMzA1NDhiNjU1Mg==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-08-23T13:13:30Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-08-23T13:15:30Z"}, "message": "Fortran/OpenMP: strict modifier on grainsize/num_tasks\n\nThis patch adds support for the 'strict' modifier on grainsize/num_tasks\nclauses, an OpenMP 5.1 feature supported in C/C++ since commit\nr12-3066-g3bc75533d1f87f0617be6c1af98804f9127ec637\n\ngcc/fortran/ChangeLog:\n\n\t* dump-parse-tree.c (show_omp_clauses): Handle 'strict' modifier\n\ton grainsize/num_tasks\n\t* gfortran.h (gfc_omp_clauses): Add grainsize_strict\n\tand num_tasks_strict.\n\t* trans-openmp.c (gfc_trans_omp_clauses, gfc_split_omp_clauses):\n\tHandle 'strict' modifier on grainsize/num_tasks.\n\t* openmp.c (gfc_match_omp_clauses): Likewise.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/libgomp.fortran/taskloop-4-a.f90: New test.\n\t* testsuite/libgomp.fortran/taskloop-4.f90: New test.\n\t* testsuite/libgomp.fortran/taskloop-5-a.f90: New test.\n\t* testsuite/libgomp.fortran/taskloop-5.f90: New test.", "tree": {"sha": "bd5194a6695890713e7d8dcd2185c958029020ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd5194a6695890713e7d8dcd2185c958029020ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4de7e32eff0a6363defa50b052d7a30548b6552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4de7e32eff0a6363defa50b052d7a30548b6552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4de7e32eff0a6363defa50b052d7a30548b6552", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4de7e32eff0a6363defa50b052d7a30548b6552/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12dc8ab983db039a570e3798b468498e2230c7d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12dc8ab983db039a570e3798b468498e2230c7d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12dc8ab983db039a570e3798b468498e2230c7d9"}], "stats": {"total": 331, "additions": 326, "deletions": 5}, "files": [{"sha": "a1df47c2f82dee5e458e569d345f7ea52f875b1b", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4de7e32eff0a6363defa50b052d7a30548b6552/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4de7e32eff0a6363defa50b052d7a30548b6552/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=d4de7e32eff0a6363defa50b052d7a30548b6552", "patch": "@@ -1805,6 +1805,8 @@ show_omp_clauses (gfc_omp_clauses *omp_clauses)\n   if (omp_clauses->grainsize)\n     {\n       fputs (\" GRAINSIZE(\", dumpfile);\n+      if (omp_clauses->grainsize_strict)\n+\tfputs (\"strict: \", dumpfile);\n       show_expr (omp_clauses->grainsize);\n       fputc (')', dumpfile);\n     }\n@@ -1823,6 +1825,8 @@ show_omp_clauses (gfc_omp_clauses *omp_clauses)\n   if (omp_clauses->num_tasks)\n     {\n       fputs (\" NUM_TASKS(\", dumpfile);\n+      if (omp_clauses->num_tasks_strict)\n+\tfputs (\"strict: \", dumpfile);\n       show_expr (omp_clauses->num_tasks);\n       fputc (')', dumpfile);\n     }"}, {"sha": "48cdcdf6cb87c539602d1f5786bb593108f2bbaa", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4de7e32eff0a6363defa50b052d7a30548b6552/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4de7e32eff0a6363defa50b052d7a30548b6552/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=d4de7e32eff0a6363defa50b052d7a30548b6552", "patch": "@@ -1490,7 +1490,7 @@ typedef struct gfc_omp_clauses\n   unsigned inbranch:1, notinbranch:1, nogroup:1;\n   unsigned sched_simd:1, sched_monotonic:1, sched_nonmonotonic:1;\n   unsigned simd:1, threads:1, depend_source:1, destroy:1, order_concurrent:1;\n-  unsigned capture:1;\n+  unsigned capture:1, grainsize_strict:1, num_tasks_strict:1;\n   ENUM_BITFIELD (gfc_omp_sched_kind) sched_kind:3;\n   ENUM_BITFIELD (gfc_omp_device_type) device_type:2;\n   ENUM_BITFIELD (gfc_omp_memorder) memorder:3;"}, {"sha": "1aae35a6bc02934b5772a5361a2952afb81d07f9", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4de7e32eff0a6363defa50b052d7a30548b6552/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4de7e32eff0a6363defa50b052d7a30548b6552/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=d4de7e32eff0a6363defa50b052d7a30548b6552", "patch": "@@ -1839,8 +1839,14 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t    }\n \t  if ((mask & OMP_CLAUSE_GRAINSIZE)\n \t      && c->grainsize == NULL\n-\t      && gfc_match (\"grainsize ( %e )\", &c->grainsize) == MATCH_YES)\n-\t    continue;\n+\t      && gfc_match (\"grainsize ( \") == MATCH_YES)\n+\t    {\n+\t      if (gfc_match (\"strict : \") == MATCH_YES)\n+\t\tc->grainsize_strict = true;\n+\t      if (gfc_match (\" %e )\", &c->grainsize) != MATCH_YES)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  break;\n \tcase 'h':\n \t  if ((mask & OMP_CLAUSE_HINT)\n@@ -2148,8 +2154,14 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t    continue;\n \t  if ((mask & OMP_CLAUSE_NUM_TASKS)\n \t      && c->num_tasks == NULL\n-\t      && gfc_match (\"num_tasks ( %e )\", &c->num_tasks) == MATCH_YES)\n-\t    continue;\n+\t      && gfc_match (\"num_tasks ( \") == MATCH_YES)\n+\t    {\n+\t      if (gfc_match (\"strict : \") == MATCH_YES)\n+\t\tc->num_tasks_strict = true;\n+\t      if (gfc_match (\" %e )\", &c->num_tasks) != MATCH_YES)\n+\t\tgoto error;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_NUM_TEAMS)\n \t      && c->num_teams == NULL\n \t      && gfc_match (\"num_teams ( %e )\", &c->num_teams) == MATCH_YES)"}, {"sha": "40d2fd206e43afdde2b06f6ee331f10e879874c7", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4de7e32eff0a6363defa50b052d7a30548b6552/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4de7e32eff0a6363defa50b052d7a30548b6552/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=d4de7e32eff0a6363defa50b052d7a30548b6552", "patch": "@@ -3998,6 +3998,8 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \n       c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_GRAINSIZE);\n       OMP_CLAUSE_GRAINSIZE_EXPR (c) = grainsize;\n+      if (clauses->grainsize_strict)\n+\tOMP_CLAUSE_GRAINSIZE_STRICT (c) = 1;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n \n@@ -4013,6 +4015,8 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \n       c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_NUM_TASKS);\n       OMP_CLAUSE_NUM_TASKS_EXPR (c) = num_tasks;\n+      if (clauses->num_tasks_strict)\n+\tOMP_CLAUSE_NUM_TASKS_STRICT (c) = 1;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n \n@@ -5964,8 +5968,12 @@ gfc_split_omp_clauses (gfc_code *code,\n \t    = code->ext.omp_clauses->nogroup;\n \t  clausesa[GFC_OMP_SPLIT_TASKLOOP].grainsize\n \t    = code->ext.omp_clauses->grainsize;\n+\t  clausesa[GFC_OMP_SPLIT_TASKLOOP].grainsize_strict\n+\t    = code->ext.omp_clauses->grainsize_strict;\n \t  clausesa[GFC_OMP_SPLIT_TASKLOOP].num_tasks\n \t    = code->ext.omp_clauses->num_tasks;\n+\t  clausesa[GFC_OMP_SPLIT_TASKLOOP].num_tasks_strict\n+\t    = code->ext.omp_clauses->num_tasks_strict;\n \t  clausesa[GFC_OMP_SPLIT_TASKLOOP].priority\n \t    = code->ext.omp_clauses->priority;\n \t  clausesa[GFC_OMP_SPLIT_TASKLOOP].final_expr"}, {"sha": "2049f5c8bcac270c6a256a46b0232a185cd12dc2", "filename": "libgomp/testsuite/libgomp.fortran/taskloop-4-a.f90", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4de7e32eff0a6363defa50b052d7a30548b6552/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftaskloop-4-a.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4de7e32eff0a6363defa50b052d7a30548b6552/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftaskloop-4-a.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftaskloop-4-a.f90?ref=d4de7e32eff0a6363defa50b052d7a30548b6552", "patch": "@@ -0,0 +1,86 @@\n+! { dg-do compile  { target skip-all-targets } }\n+! Only used by taskloop-4.f90\n+! To avoid inlining\n+\n+module m2\n+  use m_taskloop4\n+  implicit none (external, type)\n+contains\n+\n+subroutine grainsize (a, b, c, d)\n+  integer, value :: a, b, c, d\n+  integer :: i, j, k\n+  j = 0\n+  k = 0\n+  !$omp taskloop firstprivate (j, k) grainsize(d)\n+    do i = a, b - 1, c\n+      if (j == 0) then\n+        !$omp atomic capture\n+          k = v\n+          v = v + 1\n+        !$omp end atomic\n+        if (k >= 64) &\n+          stop 1\n+      end if\n+      j = j + 1\n+      u(k) = j\n+    end do\n+end\n+\n+subroutine num_tasks (a, b, c, d)\n+  integer, value :: a, b, c, d\n+  integer :: i, j, k\n+  j = 0\n+  k = 0\n+  !$omp taskloop firstprivate (j, k) num_tasks(d)\n+    do i = a, b - 1, c\n+      if (j == 0) then\n+\t!$omp atomic capture\n+          k = v\n+          v = v + 1\n+        !$omp end atomic\n+        if (k >= 64) &\n+          stop 2\n+      end if\n+      j = j + 1\n+      u(k) = j\n+    end do\n+  end\n+end module\n+\n+program main\n+  use m2\n+  implicit none (external, type)\n+  !$omp parallel\n+    !$omp single\n+      block\n+        integer :: min_iters, max_iters, ntasks\n+\n+        ! If grainsize is present, # of task loop iters is >= grainsize && < 2 * grainsize,\n+        ! unless # of loop iterations is smaller than grainsize.\n+        if (test (0, 79, 1, 17, grainsize, ntasks, min_iters, max_iters) /= 79) &\n+          stop 3\n+        if (min_iters < 17 .or. max_iters >= 17 * 2) &\n+          stop 4\n+        if (test (-49, 2541, 7, 28, grainsize, ntasks, min_iters, max_iters) /= 370) &\n+          stop 5\n+        if (min_iters < 28 .or. max_iters >= 28 * 2) &\n+          stop 6\n+        if (test (7, 21, 2, 15, grainsize, ntasks, min_iters, max_iters) /= 7) &\n+          stop 7\n+        if (ntasks /= 1 .or. min_iters /= 7 .or. max_iters /= 7) &\n+          stop 8\n+        ! If num_tasks is present, # of tasks is min (# of loop iters, num_tasks)\n+        ! and each task has at least one iteration.\n+        if (test (-51, 2500, 48, 9, num_tasks, ntasks, min_iters, max_iters) /= 54) &\n+          stop 9\n+        if (ntasks /= 9) &\n+          stop 10\n+        if (test (0, 25, 2, 17, num_tasks, ntasks, min_iters, max_iters) /= 13) &\n+          stop 11\n+        if (ntasks /= 13) &\n+          stop 12\n+      end block\n+    !$omp end single\n+  !$omp end parallel\n+end program"}, {"sha": "910e197c29e3ae3079787c65905ccb05d81407cf", "filename": "libgomp/testsuite/libgomp.fortran/taskloop-4.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4de7e32eff0a6363defa50b052d7a30548b6552/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftaskloop-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4de7e32eff0a6363defa50b052d7a30548b6552/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftaskloop-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftaskloop-4.f90?ref=d4de7e32eff0a6363defa50b052d7a30548b6552", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+! { dg-options \"-O2\" }\n+! { dg-additional-sources taskloop-4-a.f90 }\n+\n+module m_taskloop4\n+  implicit none (type, external)\n+  integer :: v, u(0:63)\n+\n+contains\n+integer function test (a, b, c, d, fn, num_tasks, min_iters, max_iters)\n+  integer, value :: a, b, c, d\n+  interface\n+    subroutine fn (n1, n2, n3, n4)\n+      integer, value :: n1, n2, n3, n4\n+    end\n+  end interface\n+  integer :: num_tasks, min_iters, max_iters\n+  integer :: i, t\n+\n+  t = 0\n+  u = 0\n+  v = 0\n+  call fn (a, b, c, d)\n+  min_iters = 0\n+  max_iters = 0\n+  num_tasks = v\n+  if (v /= 0) then\n+    min_iters = u(0)\n+    max_iters = u(0)\n+    t = u(0)\n+    do i = 1, v - 1\n+      if (min_iters > u(i)) &\n+        min_iters = u(i)\n+      if (max_iters < u(i)) &\n+        max_iters = u(i)\n+      t = t + u(i)\n+    end do\n+  end if\n+  test = t\n+end\n+end module"}, {"sha": "f12681baafabca685b9c81c6353f7f7e5b3f36b4", "filename": "libgomp/testsuite/libgomp.fortran/taskloop-5-a.f90", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4de7e32eff0a6363defa50b052d7a30548b6552/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftaskloop-5-a.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4de7e32eff0a6363defa50b052d7a30548b6552/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftaskloop-5-a.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftaskloop-5-a.f90?ref=d4de7e32eff0a6363defa50b052d7a30548b6552", "patch": "@@ -0,0 +1,95 @@\n+! { dg-do compile  { target skip-all-targets } }\n+! Only used by taskloop-5-a.f90\n+! To avoid inlining\n+\n+module m2\n+  use m_taskloop5\n+  implicit none (external, type)\n+contains\n+\n+subroutine grainsize (a, b, c, d)\n+  integer, value :: a, b, c, d\n+  integer :: i, j, k\n+  j = 0\n+  k = 0\n+  !$omp taskloop firstprivate (j, k) grainsize(strict:d)\n+    do i = a, b - 1, c\n+      if (j == 0) then\n+        !$omp atomic capture\n+          k = v\n+          v = v + 1\n+        !$omp end atomic\n+        if (k >= 64) &\n+          stop 3\n+        w(k) = i\n+      end if\n+      j = j + 1\n+      u(k) = j\n+    end do\n+end\n+\n+subroutine num_tasks (a, b, c, d)\n+  integer, value :: a, b, c, d\n+  integer :: i, j, k\n+  j = 0\n+  k = 0\n+  !$omp taskloop firstprivate (j, k) num_tasks(strict:d)\n+    do i = a, b - 1, c\n+      if (j == 0) then\n+        !$omp atomic capture\n+          k = v\n+          v = v + 1\n+        !$omp end atomic\n+        if (k >= 64) &\n+          stop 4\n+        w(k) = i\n+      end if\n+      j = j + 1\n+      u(k) = j\n+    end do\n+end\n+end module\n+\n+program main\n+  use m2\n+  implicit none (external, type)\n+  !$omp parallel\n+    !$omp single\n+      block\n+        integer :: min_iters, max_iters, ntasks, sep\n+\n+        ! If grainsize is present and has strict modifier, # of task loop iters is == grainsize,\n+        ! except that it can be smaller on the last task.\n+        if (test (0, 79, 1, 17, grainsize, ntasks, min_iters, max_iters, sep) /= 79) &\n+          stop 5\n+        if (ntasks /= 5 .or. min_iters /= 11 .or. max_iters /= 17 .or. sep /= 4) &\n+          stop\n+        if (test (-49, 2541, 7, 28, grainsize, ntasks, min_iters, max_iters, sep) /= 370) &\n+          stop 6\n+        if (ntasks /= 14 .or. min_iters /= 6 .or. max_iters /= 28 .or. sep /= 13) &\n+          stop\n+        if (test (7, 21, 2, 15, grainsize, ntasks, min_iters, max_iters, sep) /= 7) &\n+          stop 7\n+        if (ntasks /= 1 .or. min_iters /= 7 .or. max_iters /= 7 .or. sep /= 1) &\n+          stop 8\n+        !  If num_tasks is present, # of tasks is min (# of loop iters, num_tasks)\n+        !  and each task has at least one iteration.  If strict modifier is present,\n+        !  first set of tasks has ceil (# of loop iters / num_tasks) iterations,\n+        !  followed by possibly empty set of tasks with floor (# of loop iters / num_tasks)\n+        !  iterations.\n+        if (test (-51, 2500, 48, 9, num_tasks, ntasks, min_iters, max_iters, sep) /= 54) &\n+          stop 9\n+        if (ntasks /= 9 .or. min_iters /= 6 .or. max_iters /= 6 .or. sep /= 9) &\n+          stop 10\n+        if (test (0, 57, 1, 9, num_tasks, ntasks, min_iters, max_iters, sep) /= 57) &\n+          stop 11\n+        if (ntasks /= 9 .or. min_iters /= 6 .or. max_iters /= 7 .or. sep /= 3) &\n+          stop 12\n+        if (test (0, 25, 2, 17, num_tasks, ntasks, min_iters, max_iters, sep) /= 13) &\n+          stop 13\n+        if (ntasks /= 13 .or. min_iters /= 1 .or. max_iters /= 1 .or. sep /= 13) &\n+          stop 14\n+      end block\n+    !$omp end single\n+  !$omp end parallel\n+end program"}, {"sha": "247f93b97c4c5b4c61338e5830b89653615ca061", "filename": "libgomp/testsuite/libgomp.fortran/taskloop-5.f90", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4de7e32eff0a6363defa50b052d7a30548b6552/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftaskloop-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4de7e32eff0a6363defa50b052d7a30548b6552/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftaskloop-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ftaskloop-5.f90?ref=d4de7e32eff0a6363defa50b052d7a30548b6552", "patch": "@@ -0,0 +1,75 @@\n+! { dg-do run }\n+! { dg-options \"-O2\" }\n+! { dg-additional-sources taskloop-5-a.f90 }\n+\n+module m_taskloop5\n+  implicit none (type, external)\n+  integer :: u(0:63), v, w(0:63)\n+\n+contains\n+integer function test (a, b, c, d, fn, num_tasks, min_iters, max_iters, sep)\n+  integer, value :: a, b, c, d\n+  interface\n+    subroutine fn (n1, n2, n3, n4)\n+      integer, value :: n1, n2, n3, n4\n+    end\n+  end interface\n+  integer :: num_tasks, min_iters, max_iters, sep\n+  integer :: i, j, t\n+\n+  t = 0\n+  u = 0\n+  v = 0\n+  call fn (a, b, c, d)\n+  min_iters = 0\n+  max_iters = 0\n+  num_tasks = v\n+  sep = v\n+  if (v /= 0) then\n+    min_iters = u(0)\n+    max_iters = u(0)\n+    t = u(0)\n+    do i = 1, v - 1\n+      if (min_iters > u(i)) &\n+        min_iters = u(i)\n+      if (max_iters < u(i)) &\n+        max_iters = u(i)\n+      t = t + u(i)\n+    end do\n+\n+    if (min_iters /= max_iters) then\n+      do i = 0, v - 2\n+        block\n+          integer :: min_idx\n+          min_idx = i\n+          do j = i + 1, v - 1\n+            if (w(min_idx) > w(j)) &\n+              min_idx = j\n+          end do\n+          if (min_idx /= i) then\n+            block\n+              integer tem\n+              tem = u(i)\n+              u(i) = u(min_idx)\n+              u(min_idx) = tem\n+              tem = w(i)\n+              w(i) = w(min_idx)\n+              w(min_idx) = tem\n+            end block\n+          end if\n+        end block\n+      end do\n+      if (u(0) /= max_iters) &\n+        stop 1\n+      do i = 1, v - 1\n+        if (u(i) /= u(i - 1)) then\n+          if (sep /= v .or. u(i) /= min_iters) &\n+            stop 2\n+          sep = i;\n+        end if\n+      end do\n+    end if\n+  end if\n+  test = t\n+end\n+end module"}]}