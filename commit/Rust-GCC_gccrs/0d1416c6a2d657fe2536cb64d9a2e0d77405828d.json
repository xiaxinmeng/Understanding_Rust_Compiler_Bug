{"sha": "0d1416c6a2d657fe2536cb64d9a2e0d77405828d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQxNDE2YzZhMmQ2NTdmZTI1MzZjYjY0ZDlhMmUwZDc3NDA1ODI4ZA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-09-15T10:07:22Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-09-15T10:07:22Z"}, "message": "Remove second arg from assign_parms\n\nFrom-SVN: r29431", "tree": {"sha": "36e8f70f4691ebf03fdba9656f8b307c2328a5d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36e8f70f4691ebf03fdba9656f8b307c2328a5d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d1416c6a2d657fe2536cb64d9a2e0d77405828d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1416c6a2d657fe2536cb64d9a2e0d77405828d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d1416c6a2d657fe2536cb64d9a2e0d77405828d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d1416c6a2d657fe2536cb64d9a2e0d77405828d/comments", "author": null, "committer": null, "parents": [{"sha": "dd42155e21d3471bc2d95bf26eb99ad782413d82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd42155e21d3471bc2d95bf26eb99ad782413d82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd42155e21d3471bc2d95bf26eb99ad782413d82"}], "stats": {"total": 103, "additions": 47, "deletions": 56}, "files": [{"sha": "d3016f4df791dec725d2c1c26e93e49a38c043af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1416c6a2d657fe2536cb64d9a2e0d77405828d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1416c6a2d657fe2536cb64d9a2e0d77405828d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d1416c6a2d657fe2536cb64d9a2e0d77405828d", "patch": "@@ -1,3 +1,12 @@\n+Wed Sep 15 11:04:43 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* function.c (assign_parms): Delete arg SECOND_TIME.  Don't test it,\n+\tbehave as if it's zero in all cases.\n+\t(expand_function_start): Adjust call to assign_parms.\n+\t* tree.h (assign_parms): Adjust prototype.\n+\t* objc/objc-act.c (hack_method_prototype): Adjust call to\n+\tassign_parms.\n+\n Tue Sep 14 21:47:06 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* cse.c (FIXED_BASE_PLUS_P): Do not consider referneces to"}, {"sha": "b74442c05b34b2b4e34717753d6ea2157ee387c0", "filename": "gcc/function.c", "status": "modified", "additions": 36, "deletions": 54, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1416c6a2d657fe2536cb64d9a2e0d77405828d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1416c6a2d657fe2536cb64d9a2e0d77405828d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=0d1416c6a2d657fe2536cb64d9a2e0d77405828d", "patch": "@@ -3878,19 +3878,11 @@ aggregate_value_p (exp)\n \f\n /* Assign RTL expressions to the function's parameters.\n    This may involve copying them into registers and using\n-   those registers as the RTL for them.\n-\n-   If SECOND_TIME is non-zero it means that this function is being\n-   called a second time.  This is done by integrate.c when a function's\n-   compilation is deferred.  We need to come back here in case the\n-   FUNCTION_ARG macro computes items needed for the rest of the compilation\n-   (such as changing which registers are fixed or caller-saved).  But suppress\n-   writing any insns or setting DECL_RTL of anything in this case.  */\n+   those registers as the RTL for them.  */\n \n void\n-assign_parms (fndecl, second_time)\n+assign_parms (fndecl)\n      tree fndecl;\n-     int second_time;\n {\n   register tree parm;\n   register rtx entry_parm = 0;\n@@ -3944,8 +3936,7 @@ assign_parms (fndecl, second_time)\n \n   if ((ARG_POINTER_REGNUM == STACK_POINTER_REGNUM\n        || ! (fixed_regs[ARG_POINTER_REGNUM]\n-\t     || ARG_POINTER_REGNUM == FRAME_POINTER_REGNUM))\n-      && ! second_time)\n+\t     || ARG_POINTER_REGNUM == FRAME_POINTER_REGNUM)))\n     internal_arg_pointer = copy_to_reg (virtual_incoming_args_rtx);\n   else\n     internal_arg_pointer = virtual_incoming_args_rtx;\n@@ -4093,8 +4084,7 @@ assign_parms (fndecl, second_time)\n       if (last_named && !varargs_setup)\n \t{\n \t  SETUP_INCOMING_VARARGS (args_so_far, promoted_mode, passed_type,\n-\t\t\t\t  current_function_pretend_args_size,\n-\t\t\t\t  second_time);\n+\t\t\t\t  current_function_pretend_args_size, 0);\n \t  varargs_setup = 1;\n \t}\n #endif\n@@ -4129,25 +4119,24 @@ assign_parms (fndecl, second_time)\n #endif\n \t\t\t   fndecl, &stack_args_size, &stack_offset, &arg_size);\n \n-      if (! second_time)\n-\t{\n-\t  rtx offset_rtx = ARGS_SIZE_RTX (stack_offset);\n-\n-\t  if (offset_rtx == const0_rtx)\n-\t    stack_parm = gen_rtx_MEM (promoted_mode, internal_arg_pointer);\n-\t  else\n-\t    stack_parm = gen_rtx_MEM (promoted_mode,\n-\t\t\t\t      gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t\t    internal_arg_pointer,\n-\t\t\t\t\t\t    offset_rtx));\n-\n-\t  /* If this is a memory ref that contains aggregate components,\n-\t     mark it as such for cse and loop optimize.  Likewise if it\n-\t     is readonly.  */\n-\t  MEM_SET_IN_STRUCT_P (stack_parm, aggregate);\n-\t  RTX_UNCHANGING_P (stack_parm) = TREE_READONLY (parm);\n-\t  MEM_ALIAS_SET (stack_parm) = get_alias_set (parm);\n-\t}\n+      {\n+\trtx offset_rtx = ARGS_SIZE_RTX (stack_offset);\n+\n+\tif (offset_rtx == const0_rtx)\n+\t  stack_parm = gen_rtx_MEM (promoted_mode, internal_arg_pointer);\n+\telse\n+\t  stack_parm = gen_rtx_MEM (promoted_mode,\n+\t\t\t\t    gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t  internal_arg_pointer,\n+\t\t\t\t\t\t  offset_rtx));\n+\n+\t/* If this is a memory ref that contains aggregate components,\n+\t   mark it as such for cse and loop optimize.  Likewise if it\n+\t   is readonly.  */\n+\tMEM_SET_IN_STRUCT_P (stack_parm, aggregate);\n+\tRTX_UNCHANGING_P (stack_parm) = TREE_READONLY (parm);\n+\tMEM_ALIAS_SET (stack_parm) = get_alias_set (parm);\n+      }\n \n       /* If this parameter was passed both in registers and in the stack,\n \t use the copy on the stack.  */\n@@ -4175,20 +4164,18 @@ assign_parms (fndecl, second_time)\n \t\t   / (PARM_BOUNDARY / BITS_PER_UNIT)\n \t\t   * (PARM_BOUNDARY / BITS_PER_UNIT));\n \n-\t      if (! second_time)\n-\t\t{\n-\t\t  /* Handle calls that pass values in multiple non-contiguous\n-\t\t     locations.  The Irix 6 ABI has examples of this.  */\n-\t\t  if (GET_CODE (entry_parm) == PARALLEL)\n-\t\t    emit_group_store (validize_mem (stack_parm), entry_parm,\n-\t\t\t\t      int_size_in_bytes (TREE_TYPE (parm)),\n-\t\t\t\t      (TYPE_ALIGN (TREE_TYPE (parm))\n-\t\t\t\t       / BITS_PER_UNIT));\n-\t\t  else\n-\t\t    move_block_from_reg (REGNO (entry_parm),\n-\t\t\t\t\t validize_mem (stack_parm), nregs,\n-\t\t\t\t\t int_size_in_bytes (TREE_TYPE (parm)));\n-\t\t}\n+\t      /* Handle calls that pass values in multiple non-contiguous\n+\t\t locations.  The Irix 6 ABI has examples of this.  */\n+\t      if (GET_CODE (entry_parm) == PARALLEL)\n+\t\temit_group_store (validize_mem (stack_parm), entry_parm,\n+\t\t\t\t  int_size_in_bytes (TREE_TYPE (parm)),\n+\t\t\t\t  (TYPE_ALIGN (TREE_TYPE (parm))\n+\t\t\t\t   / BITS_PER_UNIT));\n+\t      else\n+\t\tmove_block_from_reg (REGNO (entry_parm),\n+\t\t\t\t     validize_mem (stack_parm), nregs,\n+\t\t\t\t     int_size_in_bytes (TREE_TYPE (parm)));\n+\n \t      entry_parm = stack_parm;\n \t    }\n \t}\n@@ -4200,8 +4187,7 @@ assign_parms (fndecl, second_time)\n \tentry_parm = stack_parm;\n \n       /* Record permanently how this parm was passed.  */\n-      if (! second_time)\n-\tDECL_INCOMING_RTL (parm) = entry_parm;\n+      DECL_INCOMING_RTL (parm) = entry_parm;\n \n       /* If there is actually space on the stack for this parm,\n \t count it in stack_args_size; otherwise set stack_parm to 0\n@@ -4237,10 +4223,6 @@ assign_parms (fndecl, second_time)\n       FUNCTION_ARG_ADVANCE (args_so_far, promoted_mode,\n \t\t\t    passed_type, named_arg);\n \n-      /* If this is our second time through, we are done with this parm.  */\n-      if (second_time)\n-\tcontinue;\n-\n       /* If we can't trust the parm stack slot to be aligned enough\n \t for its ultimate type, don't use that slot after entry.\n \t We'll make another stack slot, if we need one.  */\n@@ -5880,7 +5862,7 @@ expand_function_start (subr, parms_have_cleanups)\n   /* Initialize rtx for parameters and local variables.\n      In some cases this requires emitting insns.  */\n \n-  assign_parms (subr, 0);\n+  assign_parms (subr);\n \n   /* Copy the static chain now if it wasn't a register.  The delay is to\n      avoid conflicts with the parameter passing registers.  */"}, {"sha": "4d8c84020d8e04048fd1d9f2de024949efbc9c53", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1416c6a2d657fe2536cb64d9a2e0d77405828d/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1416c6a2d657fe2536cb64d9a2e0d77405828d/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=0d1416c6a2d657fe2536cb64d9a2e0d77405828d", "patch": "@@ -3087,7 +3087,7 @@ hack_method_prototype (nst_methods, tmp_decl)\n   init_function_start (tmp_decl, \"objc-act\", 0);\n \n   /* Typically called from expand_function_start for function definitions.  */\n-  assign_parms (tmp_decl, 0);\n+  assign_parms (tmp_decl);\n \n   /* install return type */\n   TREE_TYPE (TREE_TYPE (tmp_decl)) = groktypename (TREE_TYPE (nst_methods));"}, {"sha": "8ea3dbd31ab66359058665740d0b29dbb8ed34db", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d1416c6a2d657fe2536cb64d9a2e0d77405828d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d1416c6a2d657fe2536cb64d9a2e0d77405828d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0d1416c6a2d657fe2536cb64d9a2e0d77405828d", "patch": "@@ -2306,7 +2306,7 @@ extern void init_dummy_function_start\tPROTO ((void));\n extern void expand_dummy_function_end\tPROTO ((void));\n extern void init_function_for_compilation\tPROTO ((void));\n extern void init_function_start\t\tPROTO ((tree, char *, int));\n-extern void assign_parms\t\tPROTO ((tree, int));\n+extern void assign_parms\t\tPROTO ((tree));\n extern void put_var_into_stack\t\tPROTO ((tree));\n extern void uninitialized_vars_warning\tPROTO ((tree));\n extern void setjmp_args_warning\t\tPROTO ((void));"}]}