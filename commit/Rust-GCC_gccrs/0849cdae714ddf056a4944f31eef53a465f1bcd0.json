{"sha": "0849cdae714ddf056a4944f31eef53a465f1bcd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg0OWNkYWU3MTRkZGYwNTZhNDk0NGYzMWVlZjUzYTQ2NWYxYmNkMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-12-04T12:23:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-12-04T12:23:58Z"}, "message": "tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): Handle non-constant defs in the most trivial way.\n\n2019-12-04  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): Handle\n\tnon-constant defs in the most trivial way.\n\t(vn_reference_lookup_3): Also push down SSA partial defs.\n\n\t* gcc.dg/tree-ssa/ssa-fre-84.c: New testcase.\n\nFrom-SVN: r278963", "tree": {"sha": "3bf11d5ab0f5770d5e4b731e9eabf15c0e9a1505", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bf11d5ab0f5770d5e4b731e9eabf15c0e9a1505"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0849cdae714ddf056a4944f31eef53a465f1bcd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0849cdae714ddf056a4944f31eef53a465f1bcd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0849cdae714ddf056a4944f31eef53a465f1bcd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0849cdae714ddf056a4944f31eef53a465f1bcd0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "394acee4f98219ad0165794573c44967b12ca05c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394acee4f98219ad0165794573c44967b12ca05c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394acee4f98219ad0165794573c44967b12ca05c"}], "stats": {"total": 116, "additions": 84, "deletions": 32}, "files": [{"sha": "6b69111ebc01bb86b816ba64f3eaadf582900c83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0849cdae714ddf056a4944f31eef53a465f1bcd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0849cdae714ddf056a4944f31eef53a465f1bcd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0849cdae714ddf056a4944f31eef53a465f1bcd0", "patch": "@@ -1,3 +1,9 @@\n+2019-12-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_walk_cb_data::push_partial_def): Handle\n+\tnon-constant defs in the most trivial way.\n+\t(vn_reference_lookup_3): Also push down SSA partial defs.\n+\n 2019-12-04  Martin Liska  <mliska@suse.cz>\n \n \t* tree-switch-conversion.c (switch_decision_tree::try_switch_expansion):"}, {"sha": "2e6597e8b50a19afe1e018042ca9fc20ccbec1a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0849cdae714ddf056a4944f31eef53a465f1bcd0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0849cdae714ddf056a4944f31eef53a465f1bcd0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0849cdae714ddf056a4944f31eef53a465f1bcd0", "patch": "@@ -1,3 +1,7 @@\n+2019-12-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-fre-84.c: New testcase.\n+\n 2019-12-12  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/92754"}, {"sha": "6c3832bc2947e217a4b3cb7b5a0186af6df8029d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-84.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0849cdae714ddf056a4944f31eef53a465f1bcd0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-84.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0849cdae714ddf056a4944f31eef53a465f1bcd0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-84.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-84.c?ref=0849cdae714ddf056a4944f31eef53a465f1bcd0", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1\" } */\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+\n+void foo (v4si *dst, int x)\n+{\n+  v4si v[2];\n+  v[0][0] = 1;\n+  v[0][1] = x;\n+  v[0][2] = 2;\n+  v[0][3] = 3;\n+  v[0][1] = 0;\n+  *dst = v[0];\n+}\n+\n+/* The shadowed non-constant assign to v[0][1] shouldn't prevent us from\n+   value-numbering the load to a constant.  */\n+/* { dg-final { scan-tree-dump \"\\\\*dst_\\[0-9\\]*\\\\\\(D\\\\) = { 1, 0, 2, 3 };\" \"fre1\" } } */"}, {"sha": "b90ce37286dd2f80c5462f18ee9e2dddfc3cee17", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 55, "deletions": 32, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0849cdae714ddf056a4944f31eef53a465f1bcd0/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0849cdae714ddf056a4944f31eef53a465f1bcd0/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=0849cdae714ddf056a4944f31eef53a465f1bcd0", "patch": "@@ -1759,11 +1759,15 @@ vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n   if (maxsizei > bufsize * BITS_PER_UNIT)\n     return (void *)-1;\n \n+  bool pd_constant_p = (TREE_CODE (pd.rhs) == CONSTRUCTOR\n+\t\t\t|| CONSTANT_CLASS_P (pd.rhs));\n   if (partial_defs.is_empty ())\n     {\n       /* If we get a clobber upfront, fail.  */\n       if (TREE_CLOBBER_P (pd.rhs))\n \treturn (void *)-1;\n+      if (!pd_constant_p)\n+\treturn (void *)-1;\n       partial_defs.safe_push (pd);\n       first_range.offset = pd.offset;\n       first_range.size = pd.size;\n@@ -1824,6 +1828,9 @@ vn_walk_cb_data::push_partial_def (const pd_data &pd, tree vuse,\n   /* If we get a clobber, fail.  */\n   if (TREE_CLOBBER_P (pd.rhs))\n     return (void *)-1;\n+  /* Non-constants are OK as long as they are shadowed by a constant.  */\n+  if (!pd_constant_p)\n+    return (void *)-1;\n   partial_defs.safe_push (pd);\n \n   /* Now we have merged newr into the range tree.  When we have covered\n@@ -2653,21 +2660,17 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n     }\n \n   /* 4) Assignment from an SSA name which definition we may be able\n-     to access pieces from.  */\n+     to access pieces from or we can combine to a larger entity.  */\n   else if (known_eq (ref->size, maxsize)\n \t   && is_gimple_reg_type (vr->type)\n \t   && !contains_storage_order_barrier_p (vr->operands)\n \t   && gimple_assign_single_p (def_stmt)\n-\t   && TREE_CODE (gimple_assign_rhs1 (def_stmt)) == SSA_NAME\n-\t   /* A subset of partial defs from non-constants can be handled\n-\t      by for example inserting a CONSTRUCTOR, a COMPLEX_EXPR or\n-\t      even a (series of) BIT_INSERT_EXPR hoping for simplifications\n-\t      downstream, not so much for actually doing the insertion.  */\n-\t   && data->partial_defs.is_empty ())\n+\t   && TREE_CODE (gimple_assign_rhs1 (def_stmt)) == SSA_NAME)\n     {\n       tree lhs = gimple_assign_lhs (def_stmt);\n       tree base2;\n       poly_int64 offset2, size2, maxsize2;\n+      HOST_WIDE_INT offset2i, size2i, offseti;\n       bool reverse;\n       if (lhs_ref_ok)\n \t{\n@@ -2685,34 +2688,54 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t  && known_size_p (maxsize2)\n \t  && known_eq (maxsize2, size2)\n \t  && adjust_offsets_for_equal_base_address (base, &offset,\n-\t\t\t\t\t\t    base2, &offset2)\n-\t  && known_subrange_p (offset, maxsize, offset2, size2)\n-\t  /* ???  We can't handle bitfield precision extracts without\n-\t     either using an alternate type for the BIT_FIELD_REF and\n-\t     then doing a conversion or possibly adjusting the offset\n-\t     according to endianness.  */\n-\t  && (! INTEGRAL_TYPE_P (vr->type)\n-\t      || known_eq (ref->size, TYPE_PRECISION (vr->type)))\n-\t  && multiple_p (ref->size, BITS_PER_UNIT))\n+\t\t\t\t\t\t    base2, &offset2))\n \t{\n-\t  if (known_eq (ref->size, size2))\n-\t    return vn_reference_lookup_or_insert_for_pieces\n-\t\t(vuse, get_alias_set (lhs), vr->type, vr->operands,\n-\t\t SSA_VAL (def_rhs));\n-\t  else if (! INTEGRAL_TYPE_P (TREE_TYPE (def_rhs))\n-\t\t   || type_has_mode_precision_p (TREE_TYPE (def_rhs)))\n+\t  if (data->partial_defs.is_empty ()\n+\t      && known_subrange_p (offset, maxsize, offset2, size2)\n+\t      /* ???  We can't handle bitfield precision extracts without\n+\t\t either using an alternate type for the BIT_FIELD_REF and\n+\t\t then doing a conversion or possibly adjusting the offset\n+\t\t according to endianness.  */\n+\t      && (! INTEGRAL_TYPE_P (vr->type)\n+\t\t  || known_eq (ref->size, TYPE_PRECISION (vr->type)))\n+\t      && multiple_p (ref->size, BITS_PER_UNIT))\n \t    {\n-\t      gimple_match_op op (gimple_match_cond::UNCOND,\n-\t\t\t\t  BIT_FIELD_REF, vr->type,\n-\t\t\t\t  vn_valueize (def_rhs),\n-\t\t\t\t  bitsize_int (ref->size),\n-\t\t\t\t  bitsize_int (offset - offset2));\n-\t      tree val = vn_nary_build_or_lookup (&op);\n-\t      if (val\n-\t\t  && (TREE_CODE (val) != SSA_NAME\n-\t\t      || ! SSA_NAME_OCCURS_IN_ABNORMAL_PHI (val)))\n+\t      if (known_eq (ref->size, size2))\n \t\treturn vn_reference_lookup_or_insert_for_pieces\n-\t\t    (vuse, get_alias_set (lhs), vr->type, vr->operands, val);\n+\t\t    (vuse, get_alias_set (lhs), vr->type, vr->operands,\n+\t\t     SSA_VAL (def_rhs));\n+\t      else if (! INTEGRAL_TYPE_P (TREE_TYPE (def_rhs))\n+\t\t       || type_has_mode_precision_p (TREE_TYPE (def_rhs)))\n+\t\t{\n+\t\t  gimple_match_op op (gimple_match_cond::UNCOND,\n+\t\t\t\t      BIT_FIELD_REF, vr->type,\n+\t\t\t\t      SSA_VAL (def_rhs),\n+\t\t\t\t      bitsize_int (ref->size),\n+\t\t\t\t      bitsize_int (offset - offset2));\n+\t\t  tree val = vn_nary_build_or_lookup (&op);\n+\t\t  if (val\n+\t\t      && (TREE_CODE (val) != SSA_NAME\n+\t\t\t  || ! SSA_NAME_OCCURS_IN_ABNORMAL_PHI (val)))\n+\t\t    return vn_reference_lookup_or_insert_for_pieces\n+\t\t\t(vuse, get_alias_set (lhs), vr->type,\n+\t\t\t vr->operands, val);\n+\t\t}\n+\t    }\n+\t  else if (maxsize.is_constant (&maxsizei)\n+\t\t   && maxsizei % BITS_PER_UNIT == 0\n+\t\t   && offset.is_constant (&offseti)\n+\t\t   && offseti % BITS_PER_UNIT == 0\n+\t\t   && offset2.is_constant (&offset2i)\n+\t\t   && offset2i % BITS_PER_UNIT == 0\n+\t\t   && size2.is_constant (&size2i)\n+\t\t   && size2i % BITS_PER_UNIT == 0\n+\t\t   && ranges_known_overlap_p (offset, maxsize, offset2, size2))\n+\t    {\n+\t      pd_data pd;\n+\t      pd.rhs = SSA_VAL (def_rhs);\n+\t      pd.offset = (offset2i - offseti) / BITS_PER_UNIT;\n+\t      pd.size = size2i / BITS_PER_UNIT;\n+\t      return data->push_partial_def (pd, vuse, maxsizei);\n \t    }\n \t}\n     }"}]}