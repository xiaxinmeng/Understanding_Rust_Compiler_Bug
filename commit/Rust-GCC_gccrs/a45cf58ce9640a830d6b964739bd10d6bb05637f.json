{"sha": "a45cf58ce9640a830d6b964739bd10d6bb05637f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ1Y2Y1OGNlOTY0MGE4MzBkNmI5NjQ3MzliZDEwZDZiYjA1NjM3Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-13T21:11:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-13T21:11:05Z"}, "message": "(expand_divmod): Don't use TARGET if it's the wrong mode.\n\nFrom-SVN: r10708", "tree": {"sha": "ee4dc560fa99726e243ace156d24ca4856886809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee4dc560fa99726e243ace156d24ca4856886809"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a45cf58ce9640a830d6b964739bd10d6bb05637f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45cf58ce9640a830d6b964739bd10d6bb05637f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a45cf58ce9640a830d6b964739bd10d6bb05637f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a45cf58ce9640a830d6b964739bd10d6bb05637f/comments", "author": null, "committer": null, "parents": [{"sha": "8092a8e8417c5fa4bc35e91ab9f20ac2f63bee13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8092a8e8417c5fa4bc35e91ab9f20ac2f63bee13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8092a8e8417c5fa4bc35e91ab9f20ac2f63bee13"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "b89a5f85213eb85d342e1c040c9811fce2a448b1", "filename": "gcc/expmed.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a45cf58ce9640a830d6b964739bd10d6bb05637f/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a45cf58ce9640a830d6b964739bd10d6bb05637f/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=a45cf58ce9640a830d6b964739bd10d6bb05637f", "patch": "@@ -3188,7 +3188,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t   or remainder to get floor rounding, once we have the remainder.\n \t   Notice that we compute also the final remainder value here,\n \t   and return the result right away.  */\n-\tif (target == 0)\n+\tif (target == 0 || GET_MODE (target) != compute_mode)\n \t  target = gen_reg_rtx (compute_mode);\n \n \tif (rem_flag)\n@@ -3315,7 +3315,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t       quotient or remainder to get ceiling rounding, once we have the\n \t       remainder.  Notice that we compute also the final remainder\n \t       value here, and return the result right away.  */\n-\t    if (target == 0)\n+\t    if (target == 0 || GET_MODE (target) != compute_mode)\n \t      target = gen_reg_rtx (compute_mode);\n \n \t    if (rem_flag)\n@@ -3417,7 +3417,7 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \t       quotient or remainder to get ceiling rounding, once we have the\n \t       remainder.  Notice that we compute also the final remainder\n \t       value here, and return the result right away.  */\n-\t    if (target == 0)\n+\t    if (target == 0 || GET_MODE (target) != compute_mode)\n \t      target = gen_reg_rtx (compute_mode);\n \t    if (rem_flag)\n \t      {\n@@ -3601,6 +3601,9 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \n   if (quotient == 0)\n     {\n+      if (target && GET_MODE (target) != compute_mode)\n+\ttarget = 0;\n+\n       if (rem_flag)\n \t{\n \t  /* Try to produce the remainder directly without a library call.  */\n@@ -3652,6 +3655,9 @@ expand_divmod (rem_flag, code, mode, op0, op1, target, unsignedp)\n \n   if (rem_flag)\n     {\n+      if (target && GET_MODE (target) != compute_mode)\n+\ttarget = 0;\n+\n       if (quotient == 0)\n \t/* No divide instruction either.  Use library for remainder.  */\n \tremainder = sign_expand_binop (compute_mode, umod_optab, smod_optab,"}]}