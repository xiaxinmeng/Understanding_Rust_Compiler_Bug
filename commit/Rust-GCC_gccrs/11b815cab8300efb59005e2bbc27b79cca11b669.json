{"sha": "11b815cab8300efb59005e2bbc27b79cca11b669", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFiODE1Y2FiODMwMGVmYjU5MDA1ZTJiYmMyN2I3OWNjYTExYjY2OQ==", "commit": {"author": {"name": "Peter O'Gorman", "email": "pogma@thewrittenword.com", "date": "2011-06-06T16:14:57Z"}, "committer": {"name": "Peter O'Gorman", "email": "pogma@gcc.gnu.org", "date": "2011-06-06T16:14:57Z"}, "message": "inclhack.def (aix_net_if_arp): New fix.\n\n        * inclhack.def (aix_net_if_arp): New fix.\n        * fixincl.x: Regenerate.\n        * tests/base/net/if_arp.h [AIX_NET_IF_ARP_CHECK]: New test.\n\nFrom-SVN: r174707", "tree": {"sha": "4496b65219ab44fb3328c016f518de95d15728ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4496b65219ab44fb3328c016f518de95d15728ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11b815cab8300efb59005e2bbc27b79cca11b669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b815cab8300efb59005e2bbc27b79cca11b669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b815cab8300efb59005e2bbc27b79cca11b669", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b815cab8300efb59005e2bbc27b79cca11b669/comments", "author": null, "committer": null, "parents": [{"sha": "22afe143ce46fe59ddcfb1e4ca014bf89f8892ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22afe143ce46fe59ddcfb1e4ca014bf89f8892ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22afe143ce46fe59ddcfb1e4ca014bf89f8892ff"}], "stats": {"total": 88, "additions": 83, "deletions": 5}, "files": [{"sha": "a3d7deab2a01947f168de4017281a72110f45ec9", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b815cab8300efb59005e2bbc27b79cca11b669/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b815cab8300efb59005e2bbc27b79cca11b669/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=11b815cab8300efb59005e2bbc27b79cca11b669", "patch": "@@ -1,3 +1,9 @@\n+2011-06-06  Peter O'Gorman  <pogma@thewrittenword.com>\n+\n+\t* inclhack.def (aix_net_if_arp): New fix.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/net/if_arp.h [AIX_NET_IF_ARP_CHECK]: New test.\n+\n 2011-05-17  Tristan Gingold  <gingold@adacore.com>\n \n \t* inclhack.def (solaris_complex_cxx): Fix syntax."}, {"sha": "ac3343d238b26f9cbf0c7ddec6eb44ebabf87638", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b815cab8300efb59005e2bbc27b79cca11b669/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b815cab8300efb59005e2bbc27b79cca11b669/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=11b815cab8300efb59005e2bbc27b79cca11b669", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  May 16, 2011 at 02:55:35 PM by AutoGen 5.11.1\n+ * It has been AutoGen-ed  Sunday June  5, 2011 at 09:04:54 PM CDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Mon May 16 14:55:35 CEST 2011\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Sun Jun  5 21:04:54 CDT 2011\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 210 fixup descriptions.\n+ * This file contains 211 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -520,6 +520,43 @@ static const char* apzAix_ComplexPatch[] = {\n     \"#define _Complex_I (__extension__ 1.0iF)\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Aix_Net_If_Arp fix\n+ */\n+tSCC zAix_Net_If_ArpName[] =\n+     \"aix_net_if_arp\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zAix_Net_If_ArpList[] =\n+  \"net/if_arp.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+tSCC* apzAix_Net_If_ArpMachs[] = {\n+        \"*-*-aix*\",\n+        (const char*)NULL };\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zAix_Net_If_ArpSelect0[] =\n+       \"^struct  fc_softc \\\\{\";\n+\n+#define    AIX_NET_IF_ARP_TEST_CT  1\n+static tTestDesc aAix_Net_If_ArpTests[] = {\n+  { TT_EGREP,    zAix_Net_If_ArpSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Aix_Net_If_Arp\n+ */\n+static const char* apzAix_Net_If_ArpPatch[] = {\n+    \"format\",\n+    \"typedef struct _fc_softc {\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Aix_Pthread fix\n@@ -8554,9 +8591,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          249\n+#define REGEX_COUNT          250\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            210\n+#define FIX_COUNT            211\n \n /*\n  *  Enumerate the fixes\n@@ -8571,6 +8608,7 @@ typedef enum {\n     AAB_SOLARIS_SYS_VARARGS_H_FIXIDX,\n     AAB_SUN_MEMCPY_FIXIDX,\n     AIX_COMPLEX_FIXIDX,\n+    AIX_NET_IF_ARP_FIXIDX,\n     AIX_PTHREAD_FIXIDX,\n     AIX_STDINT_1_FIXIDX,\n     AIX_STDINT_2_FIXIDX,\n@@ -8820,6 +8858,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      AIX_COMPLEX_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aAix_ComplexTests,   apzAix_ComplexPatch, 0 },\n \n+  {  zAix_Net_If_ArpName,    zAix_Net_If_ArpList,\n+     apzAix_Net_If_ArpMachs,\n+     AIX_NET_IF_ARP_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aAix_Net_If_ArpTests,   apzAix_Net_If_ArpPatch, 0 },\n+\n   {  zAix_PthreadName,    zAix_PthreadList,\n      apzAix_PthreadMachs,\n      AIX_PTHREAD_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "733122608c73b2cd1fc5e8883c8351dba81a879b", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b815cab8300efb59005e2bbc27b79cca11b669/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b815cab8300efb59005e2bbc27b79cca11b669/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=11b815cab8300efb59005e2bbc27b79cca11b669", "patch": "@@ -369,6 +369,19 @@ fix = {\n     test_text = \"#define _Complex_I\t__I\\n\";\n };\n \n+/*\n+ * net/if_arp.h defines a variable fc_softc instead of adding a\n+ * typedef for the struct on AIX 5.2, 5.3, 6.1 and 7.1\n+ */\n+fix = {\n+    hackname  = aix_net_if_arp;\n+    mach      = \"*-*-aix*\";\n+    files     = \"net/if_arp.h\";\n+    select    = \"^struct  fc_softc \\\\{\";\n+    c_fix     = format;\n+    c_fix_arg = \"typedef struct _fc_softc {\";\n+    test_text = \"struct  fc_softc {\\n  int a;\\n};\";\n+};\n \n /*\n  *  pthread.h on AIX 4.3.3 tries to define a macro without whitspace"}, {"sha": "dec20a7bd7080b0007cfeb06a3e8a50203918324", "filename": "fixincludes/tests/base/net/if_arp.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11b815cab8300efb59005e2bbc27b79cca11b669/fixincludes%2Ftests%2Fbase%2Fnet%2Fif_arp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11b815cab8300efb59005e2bbc27b79cca11b669/fixincludes%2Ftests%2Fbase%2Fnet%2Fif_arp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fnet%2Fif_arp.h?ref=11b815cab8300efb59005e2bbc27b79cca11b669", "patch": "@@ -0,0 +1,16 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/net/if_arp.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( AIX_NET_IF_ARP_CHECK )\n+typedef struct _fc_softc {\n+  int a;\n+};\n+#endif  /* AIX_NET_IF_ARP_CHECK */"}]}