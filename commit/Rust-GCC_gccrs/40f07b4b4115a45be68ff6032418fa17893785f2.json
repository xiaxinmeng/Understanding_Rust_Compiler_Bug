{"sha": "40f07b4b4115a45be68ff6032418fa17893785f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmMDdiNGI0MTE1YTQ1YmU2OGZmNjAzMjQxOGZhMTc4OTM3ODVmMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-08T13:08:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-08T13:08:03Z"}, "message": "[multiple changes]\n\n2010-10-08  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Check_Duplicate_Pragma): Check for entity match\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\t* einfo.ads: Minor reformatting.\n\n2010-10-08  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb, sem_ch3.adb, exp_ch7.adb, exp_util.adb, sem_aux.adb,\n\tsem_aux.ads, exp_ch4.adb, exp_ch6.adb, sem_ch6.adb, exp_aggr.adb,\n\texp_ch3.adb: Change Is_Inherently_Limited_Type to\n\tIs_Immutably_Limited_Type to accord with new RM terminology.\n\t* sem_aux.adb (Is_Immutably_Limited_Type): A type that is a descendant\n\tof a formal limited private type is not immutably limited in a generic\n\tbody.\n\nFrom-SVN: r165175", "tree": {"sha": "8371dc9ed8ece70c4cf74806eae0eace83decc59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8371dc9ed8ece70c4cf74806eae0eace83decc59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40f07b4b4115a45be68ff6032418fa17893785f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f07b4b4115a45be68ff6032418fa17893785f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f07b4b4115a45be68ff6032418fa17893785f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f07b4b4115a45be68ff6032418fa17893785f2/comments", "author": null, "committer": null, "parents": [{"sha": "af31bffbb0630674cfc3cacb2fb21aa6bfd1fb26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af31bffbb0630674cfc3cacb2fb21aa6bfd1fb26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af31bffbb0630674cfc3cacb2fb21aa6bfd1fb26"}], "stats": {"total": 204, "additions": 136, "deletions": 68}, "files": [{"sha": "208867fe583ffb81cc51ba94cd7c73cb1aabd18d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -1,3 +1,19 @@\n+2010-10-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Check_Duplicate_Pragma): Check for entity match\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\t* einfo.ads: Minor reformatting.\n+\n+2010-10-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb, sem_ch3.adb, exp_ch7.adb, exp_util.adb, sem_aux.adb,\n+\tsem_aux.ads, exp_ch4.adb, exp_ch6.adb, sem_ch6.adb, exp_aggr.adb,\n+\texp_ch3.adb: Change Is_Inherently_Limited_Type to\n+\tIs_Immutably_Limited_Type to accord with new RM terminology.\n+\t* sem_aux.adb (Is_Immutably_Limited_Type): A type that is a descendant\n+\tof a formal limited private type is not immutably limited in a generic\n+\tbody.\n+\n 2010-10-08  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb (Check_Duplicate_Pragma): New procedure"}, {"sha": "a1034cf2fcbe6c90677ee3e6da58ec7210c8961d", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -2436,7 +2436,7 @@ package Einfo is\n --         4. Setting Component_Size of an array to a bit-packable value\n --         3. Indexing an array with a non-standard enumeration type.\n --\n---       For records, Is_Packed is always set if Has_Pack_Pragma is set,\n+--       For records, Is_Packed is always set if Has_Pragma_Pack is set,\n --       and can also be set on its own in a derived type which inherited\n --       its packed status.\n --\n@@ -2455,7 +2455,7 @@ package Einfo is\n --       the bit packed case once the array type is frozen.\n --\n --       Before an array type is frozen, Is_Packed will always be set if\n---       Has_Pack_Pragma is set. Before the freeze point, it is not possible\n+--       Has_Pragma_Pack is set. Before the freeze point, it is not possible\n --       to know the component size, since the component type is not frozen\n --       until the array type is frozen. Thus Is_Packed for an array type\n --       before it is frozen means that packed is required. Then if it turns"}, {"sha": "a352587828a8384f0f313e5911a2e4aca71a2140", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -596,7 +596,7 @@ package body Exp_Aggr is\n       --  If component is limited, aggregate must be expanded because each\n       --  component assignment must be built in place.\n \n-      if Is_Inherently_Limited_Type (Component_Type (Typ)) then\n+      if Is_Immutably_Limited_Type (Component_Type (Typ)) then\n          return False;\n       end if;\n \n@@ -2120,7 +2120,7 @@ package body Exp_Aggr is\n          then\n             RC := RE_Limited_Record_Controller;\n \n-         elsif Is_Inherently_Limited_Type (Target_Type) then\n+         elsif Is_Immutably_Limited_Type (Target_Type) then\n             RC := RE_Limited_Record_Controller;\n \n          else\n@@ -3648,7 +3648,7 @@ package body Exp_Aggr is\n          --  in place within the caller's scope).\n \n          or else\n-           (Is_Inherently_Limited_Type (Typ)\n+           (Is_Immutably_Limited_Type (Typ)\n              and then\n                (Nkind (Parent (Parent_Node)) = N_Extended_Return_Statement\n                  or else Nkind (Parent_Node) = N_Simple_Return_Statement))\n@@ -5598,7 +5598,7 @@ package body Exp_Aggr is\n       --  Extension aggregates, aggregates in extended return statements, and\n       --  aggregates for C++ imported types must be expanded.\n \n-      if Ada_Version >= Ada_05 and then Is_Inherently_Limited_Type (Typ) then\n+      if Ada_Version >= Ada_05 and then Is_Immutably_Limited_Type (Typ) then\n          if not Nkind_In (Parent (N), N_Object_Declaration,\n                                       N_Component_Association)\n          then"}, {"sha": "7dc684226a6c092c0b50dd9e6c88bd0c8251d23f", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -1661,7 +1661,7 @@ package body Exp_Ch3 is\n            and then Has_New_Controlled_Component (Enclos_Type)\n            and then Has_Controlled_Component (Typ)\n          then\n-            if Is_Inherently_Limited_Type (Typ) then\n+            if Is_Immutably_Limited_Type (Typ) then\n                Controller_Typ := RTE (RE_Limited_Record_Controller);\n             else\n                Controller_Typ := RTE (RE_Record_Controller);\n@@ -1930,7 +1930,7 @@ package body Exp_Ch3 is\n \n          if Needs_Finalization (Typ)\n            and then not (Nkind_In (Kind, N_Aggregate, N_Extension_Aggregate))\n-           and then not Is_Inherently_Limited_Type (Typ)\n+           and then not Is_Immutably_Limited_Type (Typ)\n          then\n             declare\n                Ref : constant Node_Id :=\n@@ -4800,7 +4800,7 @@ package body Exp_Ch3 is\n             --  creating the object (via allocator) and initializing it.\n \n             if Is_Return_Object (Def_Id)\n-              and then Is_Inherently_Limited_Type (Typ)\n+              and then Is_Immutably_Limited_Type (Typ)\n             then\n                null;\n \n@@ -5014,7 +5014,7 @@ package body Exp_Ch3 is\n             --  renaming declaration.\n \n             if Needs_Finalization (Typ)\n-              and then not Is_Inherently_Limited_Type (Typ)\n+              and then not Is_Immutably_Limited_Type (Typ)\n               and then not Rewrite_As_Renaming\n             then\n                Insert_Actions_After (Init_After,\n@@ -5291,7 +5291,7 @@ package body Exp_Ch3 is\n          Loc := Sloc (First (Component_Items (Comp_List)));\n       end if;\n \n-      if Is_Inherently_Limited_Type (T) then\n+      if Is_Immutably_Limited_Type (T) then\n          Controller_Type := RTE (RE_Limited_Record_Controller);\n       else\n          Controller_Type := RTE (RE_Record_Controller);\n@@ -6099,7 +6099,11 @@ package body Exp_Ch3 is\n             end if;\n \n             Set_Is_Frozen (Def_Id);\n-            Set_All_DT_Position (Def_Id);\n+            if not Is_Derived_Type (Def_Id)\n+              or else Is_Tagged_Type (Etype (Def_Id))\n+            then\n+               Set_All_DT_Position (Def_Id);\n+            end if;\n \n             --  Add the controlled component before the freezing actions\n             --  referenced in those actions.\n@@ -6194,9 +6198,16 @@ package body Exp_Ch3 is\n             end if;\n          end;\n \n-      elsif Ada_Version >= Ada_12\n-        and then Comes_From_Source (Def_Id)\n+      --  Otherwise create primitive equality operation  (AI05-0123)\n+      --  This is done unconditionally to ensure that tools can be linked\n+      --  properly with user programs compiled with older language versions.\n+      --  It might be worth including a switch to revert to a non-composable\n+      --  equality for untagged records, even though no program depending on\n+      --  non-composability has surfaced ???\n+\n+      elsif Comes_From_Source (Def_Id)\n         and then Convention (Def_Id) = Convention_Ada\n+        and then not Is_Limited_Type (Def_Id)\n       then\n          Build_Untagged_Equality (Def_Id);\n       end if;"}, {"sha": "505ebfeb183fe6676e4ce0ee9c40ae1cad211d5b", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -947,7 +947,7 @@ package body Exp_Ch4 is\n                --  want to Adjust.\n \n                if not Aggr_In_Place\n-                 and then not Is_Inherently_Limited_Type (T)\n+                 and then not Is_Immutably_Limited_Type (T)\n                then\n                   Insert_Actions (N,\n                     Make_Adjust_Call ("}, {"sha": "2c2ddb0a980d04814cdf19031255d35af338cfc6", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -3896,7 +3896,7 @@ package body Exp_Ch5 is\n       --  the type of the expression may be.\n \n       if not Comes_From_Extended_Return_Statement (N)\n-        and then Is_Inherently_Limited_Type (Etype (Expression (N)))\n+        and then Is_Immutably_Limited_Type (Etype (Expression (N)))\n         and then Ada_Version >= Ada_05\n         and then not Debug_Flag_Dot_L\n       then\n@@ -3967,7 +3967,7 @@ package body Exp_Ch5 is\n       --  type that requires special processing (indicated by the fact that\n       --  it requires a cleanup scope for the secondary stack case).\n \n-      if Is_Inherently_Limited_Type (Exptyp)\n+      if Is_Immutably_Limited_Type (Exptyp)\n         or else Is_Limited_Interface (Exptyp)\n       then\n          null;\n@@ -4252,7 +4252,7 @@ package body Exp_Ch5 is\n \n       elsif Ekind (R_Type) = E_Anonymous_Access_Type\n         and then Has_Controlling_Result (Scope_Id)\n-        and then Ada_Version >= Ada_12\n+        and then (Ada_Version >= Ada_12 or else True)\n       then\n          Insert_Action (Exp,\n            Make_Raise_Constraint_Error (Loc,"}, {"sha": "423e24b8000d8d0dc1a5da680e10ec13b054b394", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -3106,7 +3106,7 @@ package body Exp_Ch6 is\n       --  not a rewriting of a protected function call.\n \n       if Needs_Finalization (Etype (Subp)) then\n-         if not Is_Inherently_Limited_Type (Etype (Subp))\n+         if not Is_Immutably_Limited_Type (Etype (Subp))\n            and then\n              (No (First_Formal (Subp))\n                 or else\n@@ -4405,7 +4405,7 @@ package body Exp_Ch6 is\n          then\n             null;\n \n-         elsif Is_Inherently_Limited_Type (Typ) then\n+         elsif Is_Immutably_Limited_Type (Typ) then\n             Set_Returns_By_Ref (Spec_Id);\n \n          elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n@@ -4810,7 +4810,7 @@ package body Exp_Ch6 is\n          --  may return objects of nonlimited descendants.\n \n          else\n-            return Is_Inherently_Limited_Type (Etype (E))\n+            return Is_Immutably_Limited_Type (Etype (E))\n               and then Ada_Version >= Ada_05\n               and then not Debug_Flag_Dot_L;\n          end if;\n@@ -5025,7 +5025,7 @@ package body Exp_Ch6 is\n          Typ  : constant Entity_Id := Etype (Subp);\n          Utyp : constant Entity_Id := Underlying_Type (Typ);\n       begin\n-         if Is_Inherently_Limited_Type (Typ) then\n+         if Is_Immutably_Limited_Type (Typ) then\n             Set_Returns_By_Ref (Subp);\n          elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n             Set_Returns_By_Ref (Subp);"}, {"sha": "2b7d901789b19bba73059e5adf8b51036642d672", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -392,7 +392,7 @@ package body Exp_Ch7 is\n           Typ   => Typ,\n           Stmts => Make_Deep_Array_Body (Initialize_Case, Typ)));\n \n-      if not Is_Inherently_Limited_Type (Typ) then\n+      if not Is_Immutably_Limited_Type (Typ) then\n          Set_TSS (Typ,\n            Make_Deep_Proc (\n              Prim  => Adjust_Case,\n@@ -502,7 +502,7 @@ package body Exp_Ch7 is\n           Typ   => Typ,\n           Stmts => Make_Deep_Record_Body (Initialize_Case, Typ)));\n \n-      if not Is_Inherently_Limited_Type (Typ) then\n+      if not Is_Immutably_Limited_Type (Typ) then\n          Set_TSS (Typ,\n            Make_Deep_Proc (\n              Prim  => Adjust_Case,\n@@ -2725,7 +2725,7 @@ package body Exp_Ch7 is\n       Res            : constant List_Id := New_List;\n \n    begin\n-      if Is_Inherently_Limited_Type (Typ) then\n+      if Is_Immutably_Limited_Type (Typ) then\n          Controller_Typ := RTE (RE_Limited_Record_Controller);\n       else\n          Controller_Typ := RTE (RE_Record_Controller);"}, {"sha": "8a487162b07a8fd0cccb95c1064d0b30f14f5409", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -5028,7 +5028,7 @@ package body Exp_Util is\n          --  to accommodate functions returning limited objects by reference.\n \n          if Nkind (Exp) = N_Function_Call\n-           and then Is_Inherently_Limited_Type (Etype (Exp))\n+           and then Is_Immutably_Limited_Type (Etype (Exp))\n            and then Nkind (Parent (Exp)) /= N_Object_Declaration\n            and then Ada_Version >= Ada_05\n          then"}, {"sha": "8e6f458907aff9b3401a64a1eb6632e97c002d5c", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -1913,19 +1913,20 @@ ada/exp_ch6.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/casing.ads ada/checks.ads ada/checks.adb ada/csets.ads \\\n    ada/debug.ads ada/einfo.ads ada/einfo.adb ada/elists.ads ada/elists.adb \\\n    ada/err_vars.ads ada/errout.ads ada/erroutc.ads ada/eval_fat.ads \\\n-   ada/exp_aggr.ads ada/exp_atag.ads ada/exp_ch11.ads ada/exp_ch2.ads \\\n-   ada/exp_ch3.ads ada/exp_ch4.ads ada/exp_ch6.ads ada/exp_ch6.adb \\\n-   ada/exp_ch7.ads ada/exp_ch9.ads ada/exp_dbug.ads ada/exp_disp.ads \\\n-   ada/exp_dist.ads ada/exp_intr.ads ada/exp_pakd.ads ada/exp_tss.ads \\\n-   ada/exp_util.ads ada/exp_util.adb ada/exp_vfpt.ads ada/fname.ads \\\n-   ada/fname-uf.ads ada/freeze.ads ada/get_targ.ads ada/gnat.ads \\\n-   ada/g-hesorg.ads ada/g-htable.ads ada/hostparm.ads ada/inline.ads \\\n-   ada/interfac.ads ada/itypes.ads ada/lib.ads ada/lib.adb \\\n-   ada/lib-list.adb ada/lib-load.ads ada/lib-sort.adb ada/lib-xref.ads \\\n-   ada/namet.ads ada/namet.adb ada/nlists.ads ada/nlists.adb ada/nmake.ads \\\n-   ada/nmake.adb ada/opt.ads ada/output.ads ada/restrict.ads \\\n-   ada/restrict.adb ada/rident.ads ada/rtsfind.ads ada/rtsfind.adb \\\n-   ada/scans.ads ada/scn.ads ada/scng.ads ada/scng.adb ada/sem.ads \\\n+   ada/exp_aggr.ads ada/exp_atag.ads ada/exp_cg.ads ada/exp_ch11.ads \\\n+   ada/exp_ch2.ads ada/exp_ch3.ads ada/exp_ch4.ads ada/exp_ch6.ads \\\n+   ada/exp_ch6.adb ada/exp_ch7.ads ada/exp_ch9.ads ada/exp_dbug.ads \\\n+   ada/exp_disp.ads ada/exp_disp.adb ada/exp_dist.ads ada/exp_intr.ads \\\n+   ada/exp_pakd.ads ada/exp_tss.ads ada/exp_util.ads ada/exp_util.adb \\\n+   ada/exp_vfpt.ads ada/fname.ads ada/fname-uf.ads ada/freeze.ads \\\n+   ada/get_targ.ads ada/gnat.ads ada/g-hesorg.ads ada/g-htable.ads \\\n+   ada/hostparm.ads ada/inline.ads ada/interfac.ads ada/itypes.ads \\\n+   ada/layout.ads ada/lib.ads ada/lib.adb ada/lib-list.adb \\\n+   ada/lib-load.ads ada/lib-sort.adb ada/lib-xref.ads ada/namet.ads \\\n+   ada/namet.adb ada/nlists.ads ada/nlists.adb ada/nmake.ads ada/nmake.adb \\\n+   ada/opt.ads ada/output.ads ada/restrict.ads ada/restrict.adb \\\n+   ada/rident.ads ada/rtsfind.ads ada/rtsfind.adb ada/scans.ads \\\n+   ada/scil_ll.ads ada/scn.ads ada/scng.ads ada/scng.adb ada/sem.ads \\\n    ada/sem_attr.ads ada/sem_aux.ads ada/sem_aux.adb ada/sem_ch12.ads \\\n    ada/sem_ch13.ads ada/sem_ch3.ads ada/sem_ch6.ads ada/sem_ch7.ads \\\n    ada/sem_ch8.ads ada/sem_disp.ads ada/sem_dist.ads ada/sem_eval.ads \\"}, {"sha": "c1a41cee0ea6a81270c186227ec40f83c3abdc88", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -570,24 +570,49 @@ package body Sem_Aux is\n       end if;\n    end Is_Indefinite_Subtype;\n \n-   --------------------------------\n-   -- Is_Inherently_Limited_Type --\n-   --------------------------------\n+   -------------------------------\n+   -- Is_Immutably_Limited_Type --\n+   -------------------------------\n \n-   function Is_Inherently_Limited_Type (Ent : Entity_Id) return Boolean is\n+   function Is_Immutably_Limited_Type (Ent : Entity_Id) return Boolean is\n       Btype : constant Entity_Id := Base_Type (Ent);\n \n    begin\n-      if Is_Private_Type (Btype) then\n-         declare\n-            Utyp : constant Entity_Id := Underlying_Type (Btype);\n-         begin\n-            if No (Utyp) then\n+      if Ekind (Btype) = E_Limited_Private_Type then\n+         if Nkind (Parent (Btype)) = N_Formal_Type_Declaration then\n+            return not In_Package_Body (Scope ((Btype)));\n+         else\n+            return True;\n+         end if;\n+\n+      elsif Is_Private_Type (Btype) then\n+         --  AI05-0063 : a type derived from a limited private formal type\n+         --  is not immutably limited in a generic body.\n+\n+         if Is_Derived_Type (Btype)\n+           and then Is_Generic_Type (Etype (Btype))\n+         then\n+            if not Is_Limited_Type (Etype (Btype)) then\n                return False;\n+\n+            elsif Ekind (Scope (Etype (Btype))) = E_Generic_Package then\n+               return not In_Package_Body (Scope (Etype (Btype)));\n+\n             else\n-               return Is_Inherently_Limited_Type (Utyp);\n+               return False;\n             end if;\n-         end;\n+\n+         else\n+            declare\n+               Utyp : constant Entity_Id := Underlying_Type (Btype);\n+            begin\n+               if No (Utyp) then\n+                  return False;\n+               else\n+                  return Is_Immutably_Limited_Type (Utyp);\n+               end if;\n+            end;\n+         end if;\n \n       elsif Is_Concurrent_Type (Btype) then\n          return True;\n@@ -605,7 +630,7 @@ package body Sem_Aux is\n             return True;\n \n          elsif Is_Class_Wide_Type (Btype) then\n-            return Is_Inherently_Limited_Type (Root_Type (Btype));\n+            return Is_Immutably_Limited_Type (Root_Type (Btype));\n \n          else\n             declare\n@@ -622,7 +647,7 @@ package body Sem_Aux is\n                   --  limited intefaces.\n \n                   if not Is_Interface (Etype (C))\n-                    and then Is_Inherently_Limited_Type (Etype (C))\n+                    and then Is_Immutably_Limited_Type (Etype (C))\n                   then\n                      return True;\n                   end if;\n@@ -635,12 +660,12 @@ package body Sem_Aux is\n          end if;\n \n       elsif Is_Array_Type (Btype) then\n-         return Is_Inherently_Limited_Type (Component_Type (Btype));\n+         return Is_Immutably_Limited_Type (Component_Type (Btype));\n \n       else\n          return False;\n       end if;\n-   end Is_Inherently_Limited_Type;\n+   end Is_Immutably_Limited_Type;\n \n    ---------------------\n    -- Is_Limited_Type --"}, {"sha": "133788ea07df733940390857e3c1112a61d16ab9", "filename": "gcc/ada/sem_aux.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fsem_aux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fsem_aux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.ads?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -165,7 +165,7 @@ package Sem_Aux is\n    --  discriminant values or a class wide type or subtype and returns True if\n    --  so. False for other type entities, or any entities that are not types.\n \n-   function Is_Inherently_Limited_Type (Ent : Entity_Id) return Boolean;\n+   function Is_Immutably_Limited_Type (Ent : Entity_Id) return Boolean;\n    --  Ent is any entity. True for a type that is \"inherently\" limited (i.e.\n    --  cannot become nonlimited). From the Ada 2005 RM-7.5(8.1/2), \"a type with\n    --  a part that is of a task, protected, or explicitly limited record type\"."}, {"sha": "d8491bac712d6d0b2ddc943b8f80e2ac615bc801", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -8794,12 +8794,11 @@ package body Sem_Ch3 is\n       --  only in the declaration for a task or protected type, or for a type\n       --  with the reserved word 'limited' in its definition or in one of its\n       --  ancestors. (RM 3.7(10))\n+      --  AI-0063 : the proper condition is that type must be immutably\n+      --  limited.\n \n       if Nkind (Discriminant_Type (D)) = N_Access_Definition\n-        and then not Is_Concurrent_Type (Current_Scope)\n-        and then not Is_Concurrent_Record_Type (Current_Scope)\n-        and then not Is_Limited_Record (Current_Scope)\n-        and then Ekind (Current_Scope) /= E_Limited_Private_Type\n+        and then not Is_Immutably_Limited_Type (Current_Scope)\n       then\n          Error_Msg_N\n            (\"access discriminants allowed only for limited types\", Loc);"}, {"sha": "5de59cb4c1d6c77f5c42ec2c16088304a5a48bd0", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -483,7 +483,7 @@ package body Sem_Ch6 is\n                Error_Msg_N\n                  (\"(Ada 2005) cannot copy object of a limited type \" &\n                   \"(RM-2005 6.5(5.5/2))\", Expr);\n-               if Is_Inherently_Limited_Type (R_Type) then\n+               if Is_Immutably_Limited_Type (R_Type) then\n                   Error_Msg_N\n                     (\"\\return by reference not permitted in Ada 2005\", Expr);\n                end if;\n@@ -495,7 +495,7 @@ package body Sem_Ch6 is\n             --  evilly turned off. Otherwise it is a real error.\n \n             elsif Warn_On_Ada_2005_Compatibility or GNAT_Mode then\n-               if Is_Inherently_Limited_Type (R_Type) then\n+               if Is_Immutably_Limited_Type (R_Type) then\n                   Error_Msg_N\n                     (\"return by reference not permitted in Ada 2005 \" &\n                      \"(RM-2005 6.5(5.5/2))?\", Expr);\n@@ -759,7 +759,7 @@ package body Sem_Ch6 is\n          --  check the static cases.\n \n          if (Ada_Version < Ada_05 or else Debug_Flag_Dot_L)\n-           and then Is_Inherently_Limited_Type (Etype (Scope_Id))\n+           and then Is_Immutably_Limited_Type (Etype (Scope_Id))\n            and then Object_Access_Level (Expr) >\n                       Subprogram_Access_Level (Scope_Id)\n          then\n@@ -4256,7 +4256,7 @@ package body Sem_Ch6 is\n             Utyp : constant Entity_Id := Underlying_Type (Typ);\n \n          begin\n-            if Is_Inherently_Limited_Type (Typ) then\n+            if Is_Immutably_Limited_Type (Typ) then\n                Set_Returns_By_Ref (Designator);\n \n             elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then"}, {"sha": "d10237125be33eefe8f903b0095bcbc508e0f6b8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f07b4b4115a45be68ff6032418fa17893785f2/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=40f07b4b4115a45be68ff6032418fa17893785f2", "patch": "@@ -1199,14 +1199,30 @@ package body Sem_Prag is\n          end if;\n       end Check_Component;\n \n+      ----------------------------\n+      -- Check_Duplicate_Pragma --\n+      ----------------------------\n+\n       procedure Check_Duplicate_Pragma (E : Entity_Id) is\n-         P : constant Node_Id := Get_Rep_Pragma (E, Pragma_Name (N));\n+         P   : constant Node_Id := Get_Rep_Pragma (E, Pragma_Name (N));\n+         Arg : Node_Id;\n+\n       begin\n          if Present (P) then\n-            Error_Msg_Name_1 := Pname;\n-            Error_Msg_Sloc := Sloc (P);\n-            Error_Msg_NE (\"pragma% for & duplicates one#\", N, E);\n-            raise Pragma_Exit;\n+\n+            --  Make sure pragma is for this entity, and not for some parent\n+            --  entity in the case of a derived type.\n+\n+            Arg := Get_Pragma_Arg (First (Pragma_Argument_Associations (P)));\n+\n+            if Nkind (Arg) = N_Identifier\n+              and then Entity (Arg) = E\n+            then\n+               Error_Msg_Name_1 := Pname;\n+               Error_Msg_Sloc := Sloc (P);\n+               Error_Msg_NE (\"pragma% for & duplicates one#\", N, E);\n+               raise Pragma_Exit;\n+            end if;\n          end if;\n       end Check_Duplicate_Pragma;\n "}]}