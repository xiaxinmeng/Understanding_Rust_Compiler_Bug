{"sha": "bfdd75a8599a00692c3d65459f1aa65a07f774ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZkZDc1YTg1OTlhMDA2OTJjM2Q2NTQ1OWYxYWE2NWEwN2Y3NzRlZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-02-03T21:39:27Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-02-03T21:39:27Z"}, "message": "go/types: Remove unused testdata files.\n\nThe go/types package was removed in July 2013, but the\ntestdata files were accidentally left behind.\n\nFrom-SVN: r220378", "tree": {"sha": "737e526e0d32c56141723c7770ebbd0c39a6a342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/737e526e0d32c56141723c7770ebbd0c39a6a342"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfdd75a8599a00692c3d65459f1aa65a07f774ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfdd75a8599a00692c3d65459f1aa65a07f774ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfdd75a8599a00692c3d65459f1aa65a07f774ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfdd75a8599a00692c3d65459f1aa65a07f774ed/comments", "author": null, "committer": null, "parents": [{"sha": "2a1d78d8f61d109b80402681a85d0051411f2cfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1d78d8f61d109b80402681a85d0051411f2cfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a1d78d8f61d109b80402681a85d0051411f2cfe"}], "stats": {"total": 1992, "additions": 0, "deletions": 1992}, "files": [{"sha": "6c848fc27766f7cc889cce186657d3006b3fc9dc", "filename": "libgo/go/go/types/testdata/builtins.src", "status": "removed", "additions": 0, "deletions": 302, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fbuiltins.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fbuiltins.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fbuiltins.src?ref=2a1d78d8f61d109b80402681a85d0051411f2cfe", "patch": "@@ -1,302 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// builtin calls\n-\n-package builtins\n-\n-import \"unsafe\"\n-\n-func _append() {\n-\tvar x int\n-\tvar s []byte\n-\t_0 := append /* ERROR \"argument\" */ ()\n-\t_1 := append(\"foo\" /* ERROR \"not a typed slice\" */)\n-\t_2 := append(nil /* ERROR \"not a typed slice\" */, s)\n-\t_3 := append(x /* ERROR \"not a typed slice\" */, s)\n-\t_4 := append(s)\n-\tappend /* ERROR \"not used\" */ (s)\n-}\n-\n-func _cap() {\n-\tvar a [10]bool\n-\tvar p *[20]int\n-\tvar s []int\n-\tvar c chan string\n-\t_0 := cap /* ERROR \"argument\" */ ()\n-\t_1 := cap /* ERROR \"argument\" */ (1, 2)\n-\t_2 := cap(42 /* ERROR \"invalid\" */)\n-\tconst _3 = cap(a)\n-\tassert(_3 == 10)\n-\tconst _4 = cap(p)\n-\tassert(_4 == 20)\n-\t_5 := cap(c)\n-\tcap /* ERROR \"not used\" */ (c)\n-}\n-\n-func _close() {\n-\tvar c chan int\n-\tvar r <-chan int\n-\tclose /* ERROR \"argument\" */ ()\n-\tclose /* ERROR \"argument\" */ (1, 2)\n-\tclose(42 /* ERROR \"not a channel\" */)\n-\tclose(r /* ERROR \"receive-only channel\" */)\n-\tclose(c)\n-}\n-\n-func _complex() {\n-\tvar i32 int32\n-\tvar f32 float32\n-\tvar f64 float64\n-\tvar c64 complex64\n-\t_ = complex /* ERROR \"argument\" */ ()\n-\t_ = complex /* ERROR \"argument\" */ (1)\n-\t_ = complex(true /* ERROR \"invalid argument\" */ , 0)\n-\t_ = complex(i32 /* ERROR \"invalid argument\" */ , 0)\n-\t_ = complex(\"foo\" /* ERROR \"invalid argument\" */ , 0)\n-\t_ = complex(c64 /* ERROR \"invalid argument\" */ , 0)\n-\t_ = complex(0, true /* ERROR \"invalid argument\" */ )\n-\t_ = complex(0, i32 /* ERROR \"invalid argument\" */ )\n-\t_ = complex(0, \"foo\" /* ERROR \"invalid argument\" */ )\n-\t_ = complex(0, c64 /* ERROR \"invalid argument\" */ )\n-\t_ = complex(f32, f32)\n-\t_ = complex(f32, 1)\n-\t_ = complex(f32, 1.0)\n-\t_ = complex(f32, 'a')\n-\t_ = complex(f64, f64)\n-\t_ = complex(f64, 1)\n-\t_ = complex(f64, 1.0)\n-\t_ = complex(f64, 'a')\n-\t_ = complex(f32 /* ERROR \"mismatched types\" */, f64)\n-\t_ = complex(f64 /* ERROR \"mismatched types\" */, f32)\n-\t_ = complex(1, 1)\n-\t_ = complex(1, 1.1)\n-\t_ = complex(1, 'a')\n-\tcomplex /* ERROR \"not used\" */ (1, 2)\n-}\n-\n-func _copy() {\n-\tcopy /* ERROR \"not enough arguments\" */ ()\n-\tcopy /* ERROR \"not enough arguments\" */ (\"foo\")\n-\tcopy([ /* ERROR \"copy expects slice arguments\" */ ...]int{}, []int{})\n-\tcopy([ /* ERROR \"copy expects slice arguments\" */ ]int{}, [...]int{})\n-\tcopy([ /* ERROR \"different element types\" */ ]int8{}, \"foo\")\n-\n-\t// spec examples\n-\tvar a = [...]int{0, 1, 2, 3, 4, 5, 6, 7}\n-\tvar s = make([]int, 6)\n-\tvar b = make([]byte, 5)\n-\tn1 := copy(s, a[0:])            // n1 == 6, s == []int{0, 1, 2, 3, 4, 5}\n-\tn2 := copy(s, s[2:])            // n2 == 4, s == []int{2, 3, 4, 5, 4, 5}\n-\tn3 := copy(b, \"Hello, World!\")  // n3 == 5, b == []byte(\"Hello\")\n-}\n-\n-func _delete() {\n-\tvar m map[string]int\n-\tvar s string\n-\tdelete /* ERROR \"argument\" */ ()\n-\tdelete /* ERROR \"argument\" */ (1)\n-\tdelete /* ERROR \"argument\" */ (1, 2, 3)\n-\tdelete(m, 0 /* ERROR \"not assignable\" */)\n-\tdelete(m, s)\n-}\n-\n-func _imag() {\n-\tvar f32 float32\n-\tvar f64 float64\n-\tvar c64 complex64\n-\tvar c128 complex128\n-\t_ = imag /* ERROR \"argument\" */ ()\n-\t_ = imag /* ERROR \"argument\" */ (1, 2)\n-\t_ = imag(10 /* ERROR \"must be a complex number\" */)\n-\t_ = imag(2.7182818 /* ERROR \"must be a complex number\" */)\n-\t_ = imag(\"foo\" /* ERROR \"must be a complex number\" */)\n-\tconst _5 = imag(1 + 2i)\n-\tassert(_5 == 2)\n-\tf32 = _5\n-\tf64 = _5\n-\tconst _6 = imag(0i)\n-\tassert(_6 == 0)\n-\tf32 = imag(c64)\n-\tf64 = imag(c128)\n-\tf32 = imag /* ERROR \"cannot assign\" */ (c128)\n-\tf64 = imag /* ERROR \"cannot assign\" */ (c64)\n-\timag /* ERROR \"not used\" */ (c64)\n-}\n-\n-func _len() {\n-\tconst c = \"foobar\"\n-\tvar a [10]bool\n-\tvar p *[20]int\n-\tvar s []int\n-\tvar m map[string]complex128\n-\t_ = len /* ERROR \"argument\" */ ()\n-\t_ = len /* ERROR \"argument\" */ (1, 2)\n-\t_ = len(42 /* ERROR \"invalid\" */)\n-\tconst _3 = len(c)\n-\tassert(_3 == 6)\n-\tconst _4 = len(a)\n-\tassert(_4 == 10)\n-\tconst _5 = len(p)\n-\tassert(_5 == 20)\n-\t_ = len(m)\n-\tlen /* ERROR \"not used\" */ (c)\n-\n-\t// esoteric case\n-\tvar t string\n-\tvar hash map[interface{}][]*[10]int\n-\tconst n = len /* ERROR \"not constant\" */ (hash[recover()][len(t)])\n-\tassert /* ERROR \"failed\" */ (n == 10)\n-\tvar ch <-chan int\n-\tconst nn = len /* ERROR \"not constant\" */ (hash[<-ch][len(t)])\n-\t_ = nn // TODO(gri) remove this once unused constants get type-checked\n-}\n-\n-func _make() {\n-\tn := 0\n-\n-\t_ = make /* ERROR \"argument\" */ ()\n-\t_ = make(1 /* ERROR \"not a type\" */)\n-\t_ = make(int /* ERROR \"cannot make\" */)\n-\n-\t// slices\n-\t_ = make/* ERROR \"arguments\" */ ([]int)\n-\t_ = make/* ERROR \"arguments\" */ ([]int, 2, 3, 4)\n-\t_ = make([]int, int /* ERROR \"not an expression\" */)\n-\t_ = make([]int, 10, float32 /* ERROR \"not an expression\" */)\n-\t_ = make([]int, \"foo\" /* ERROR \"must be an integer\" */)\n-\t_ = make([]int, 10, 2.3 /* ERROR \"must be an integer\" */)\n-\t_ = make([]int, 5, 10.0)\n-\t_ = make([]int, 0i)\n-\t_ = make([]int, - /* ERROR \"must not be negative\" */ 1, 10)\n-\t_ = make([]int, 0, - /* ERROR \"must not be negative\" */ 1)\n-\t_ = make([]int, - /* ERROR \"must not be negative\" */ 1, - /* ERROR \"must not be negative\" */ 1)\n-\t_ = make([]int, 1<<100, 1<<100)  // run-time panic\n-\t_ = make([]int, 1 /* ERROR \"length and capacity swapped\" */ <<100 + 1, 1<<100)\n-\t_ = make([]int, 1 /* ERROR \"length and capacity swapped\" */ <<100, 12345)\n-\n-\t// maps\n-\t_ = make /* ERROR \"arguments\" */ (map[int]string, 10, 20)\n-\t_ = make(map[int]float32, int /* ERROR \"not an expression\" */)\n-\t_ = make(map[int]float32, \"foo\" /* ERROR \"must be an integer\" */)\n-\t_ = make(map[int]float32, 10)\n-\t_ = make(map[int]float32, n)\n-\t_ = make(map[int]float32, int64(n))\n-\n-\t// channels\n-\t_ = make /* ERROR \"arguments\" */ (chan int, 10, 20)\n-\t_ = make(chan int, int /* ERROR \"not an expression\" */)\n-\t_ = make(chan<- int, \"foo\" /* ERROR \"must be an integer\" */)\n-\t_ = make(<-chan float64, 10)\n-\t_ = make(chan chan int, n)\n-\t_ = make(chan string, int64(n))\n-\n-\tmake /* ERROR \"not used\" */ ([]int, 10)\n-}\n-\n-func _new() {\n-\t_ = new /* ERROR \"argument\" */ ()\n-\t_ = new /* ERROR \"argument\" */ (1, 2)\n-\t_ = new(\"foo\" /* ERROR \"not a type\" */)\n-\tp := new(float64)\n-\t_ = new(struct{ x, y int })\n-\tq := new(*float64)\n-\t_ = *p == **q\n-\tnew /* ERROR \"not used\" */ (int)\n-}\n-\n-func _real() {\n-\tvar f32 float32\n-\tvar f64 float64\n-\tvar c64 complex64\n-\tvar c128 complex128\n-\t_ = real /* ERROR \"argument\" */ ()\n-\t_ = real /* ERROR \"argument\" */ (1, 2)\n-\t_ = real(10 /* ERROR \"must be a complex number\" */)\n-\t_ = real(2.7182818 /* ERROR \"must be a complex number\" */)\n-\t_ = real(\"foo\" /* ERROR \"must be a complex number\" */)\n-\tconst _5 = real(1 + 2i)\n-\tassert(_5 == 1)\n-\tf32 = _5\n-\tf64 = _5\n-\tconst _6 = real(0i)\n-\tassert(_6 == 0)\n-\tf32 = real(c64)\n-\tf64 = real(c128)\n-\tf32 = real /* ERROR \"cannot assign\" */ (c128)\n-\tf64 = real /* ERROR \"cannot assign\" */ (c64)\n-\treal /* ERROR \"not used\" */ (c64)\n-}\n-\n-func _recover() {\n-\t_ = recover()\n-\t_ = recover /* ERROR \"argument\" */ (10)\n-\trecover()\n-}\n-\n-func _Alignof() {\n-\tvar x int\n-\t_ = unsafe /* ERROR \"argument\" */ .Alignof()\n-\t_ = unsafe /* ERROR \"argument\" */ .Alignof(1, 2)\n-\t_ = unsafe.Alignof(int /* ERROR \"not an expression\" */)\n-\t_ = unsafe.Alignof(42)\n-\t_ = unsafe.Alignof(new(struct{}))\n-\tunsafe /* ERROR \"not used\" */ .Alignof(x)\n-}\n-\n-func _Offsetof() {\n-\tvar x struct{ f int }\n-\t_ = unsafe /* ERROR \"argument\" */ .Offsetof()\n-\t_ = unsafe /* ERROR \"argument\" */ .Offsetof(1, 2)\n-\t_ = unsafe.Offsetof(int /* ERROR \"not an expression\" */)\n-\t_ = unsafe.Offsetof(x /* ERROR \"not a selector\" */)\n-\t_ = unsafe.Offsetof(x.f)\n-\t_ = unsafe.Offsetof((x.f))\n-\t_ = unsafe.Offsetof((((((((x))).f)))))\n-\tunsafe /* ERROR \"not used\" */ .Offsetof(x.f)\n-}\n-\n-func _Sizeof() {\n-\tvar x int\n-\t_ = unsafe /* ERROR \"argument\" */ .Sizeof()\n-\t_ = unsafe /* ERROR \"argument\" */ .Sizeof(1, 2)\n-\t_ = unsafe.Sizeof(int /* ERROR \"not an expression\" */)\n-\t_ = unsafe.Sizeof(42)\n-\t_ = unsafe.Sizeof(new(complex128))\n-\tunsafe /* ERROR \"not used\" */ .Sizeof(x)\n-\n-\t// basic types have size guarantees\n-\tassert(unsafe.Sizeof(byte(0)) == 1)\n-\tassert(unsafe.Sizeof(uint8(0)) == 1)\n-\tassert(unsafe.Sizeof(int8(0)) == 1)\n-\tassert(unsafe.Sizeof(uint16(0)) == 2)\n-\tassert(unsafe.Sizeof(int16(0)) == 2)\n-\tassert(unsafe.Sizeof(uint32(0)) == 4)\n-\tassert(unsafe.Sizeof(int32(0)) == 4)\n-\tassert(unsafe.Sizeof(float32(0)) == 4)\n-\tassert(unsafe.Sizeof(uint64(0)) == 8)\n-\tassert(unsafe.Sizeof(int64(0)) == 8)\n-\tassert(unsafe.Sizeof(float64(0)) == 8)\n-\tassert(unsafe.Sizeof(complex64(0)) == 8)\n-\tassert(unsafe.Sizeof(complex128(0)) == 16)\n-}\n-\n-// self-testing only\n-func _assert() {\n-\tvar x int\n-\tassert /* ERROR \"argument\" */ ()\n-\tassert /* ERROR \"argument\" */ (1, 2)\n-\tassert(\"foo\" /* ERROR \"boolean constant\" */ )\n-\tassert(x /* ERROR \"boolean constant\" */)\n-\tassert(true)\n-\tassert /* ERROR \"failed\" */ (false) \n-}\n-\n-// self-testing only\n-func _trace() {\n-\t// Uncomment the code below to test trace - will produce console output\n-\t// _ = trace /* ERROR \"no value\" */ ()\n-\t// _ = trace(1)\n-\t// _ = trace(true, 1.2, '\\'', \"foo\", 42i, \"foo\" <= \"bar\")\n-}"}, {"sha": "a2ca344c788e6c0eb98090d6f62e68bbfa3caea5", "filename": "libgo/go/go/types/testdata/const0.src", "status": "removed", "additions": 0, "deletions": 215, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconst0.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconst0.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconst0.src?ref=2a1d78d8f61d109b80402681a85d0051411f2cfe", "patch": "@@ -1,215 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// constant declarations\n-\n-package const0\n-\n-// constants declarations must be initialized by constants\n-var x = 0\n-const c0 = x /* ERROR \"not constant\" */\n-\n-// untyped constants\n-const (\n-\t// boolean values\n-\tub0 = false\n-\tub1 = true\n-\tub2 = 2 < 1\n-\tub3 = ui1 == uf1\n-\tub4 = true /* ERROR \"cannot convert\" */ == 0\n-\n-\t// integer values\n-\tui0 = 0\n-\tui1 = 1\n-\tui2 = 42\n-\tui3 = 3141592653589793238462643383279502884197169399375105820974944592307816406286\n-\tui4 = -10\n-\n-\tui5 = ui0 + ui1\n-\tui6 = ui1 - ui1\n-\tui7 = ui2 * ui1\n-\tui8 = ui3 / ui3\n-\tui9 = ui3 % ui3\n-\n-\tui10 = 1 / 0 /* ERROR \"division by zero\" */\n-\tui11 = ui1 / 0 /* ERROR \"division by zero\" */\n-\tui12 = ui3 / ui0 /* ERROR \"division by zero\" */\n-\tui13 = 1 % 0 /* ERROR \"division by zero\" */\n-\tui14 = ui1 % 0 /* ERROR \"division by zero\" */\n-\tui15 = ui3 % ui0 /* ERROR \"division by zero\" */\n-\n-\tui16 = ui2 & ui3\n-\tui17 = ui2 | ui3\n-\tui18 = ui2 ^ ui3\n-\n-\t// floating point values\n-\tuf0 = 0.\n-\tuf1 = 1.\n-\tuf2 = 4.2e1\n-\tuf3 = 3.141592653589793238462643383279502884197169399375105820974944592307816406286\n-\tuf4 = 1e-1\n-\n-\tuf5 = uf0 + uf1\n-\tuf6 = uf1 - uf1\n-\tuf7 = uf2 * uf1\n-\tuf8 = uf3 / uf3\n-\tuf9 = uf3 /* ERROR \"not defined\" */ % uf3\n-\n-\tuf10 = 1 / 0 /* ERROR \"division by zero\" */\n-\tuf11 = uf1 / 0 /* ERROR \"division by zero\" */\n-\tuf12 = uf3 / uf0 /* ERROR \"division by zero\" */\n-\n-\tuf16 = uf2 /* ERROR \"not defined\" */ & uf3\n-\tuf17 = uf2 /* ERROR \"not defined\" */ | uf3\n-\tuf18 = uf2 /* ERROR \"not defined\" */ ^ uf3\n-\n-\t// complex values\n-\tuc0 = 0.i\n-\tuc1 = 1.i\n-\tuc2 = 4.2e1i\n-\tuc3 = 3.141592653589793238462643383279502884197169399375105820974944592307816406286i\n-\tuc4 = 1e-1i\n-\n-\tuc5 = uc0 + uc1\n-\tuc6 = uc1 - uc1\n-\tuc7 = uc2 * uc1\n-\tuc8 = uc3 / uc3\n-\tuc9 = uc3 /* ERROR \"not defined\" */ % uc3\n-\n-\tuc10 = 1 / 0 /* ERROR \"division by zero\" */\n-\tuc11 = uc1 / 0 /* ERROR \"division by zero\" */\n-\tuc12 = uc3 / uc0 /* ERROR \"division by zero\" */\n-\n-\tuc16 = uc2 /* ERROR \"not defined\" */ & uc3\n-\tuc17 = uc2 /* ERROR \"not defined\" */ | uc3\n-\tuc18 = uc2 /* ERROR \"not defined\" */ ^ uc3\n-)\n-\n-type (\n-\tmybool bool\n-\tmyint int\n-\tmyfloat float64\n-\tmycomplex complex128\n-)\n-\n-// typed constants\n-const (\n-\t// boolean values\n-\ttb0 bool = false\n-\ttb1 bool = true\n-\ttb2 mybool = 2 < 1\n-\ttb3 mybool = ti1 /* ERROR \"cannot compare\" */ == tf1\n-\n-\t// integer values\n-\tti0 int8 = ui0\n-\tti1 int32 = ui1\n-\tti2 int64 = ui2\n-\tti3 myint = ui3 /* ERROR \"overflows\" */\n-\tti4 myint = ui4\n-\n-\tti5 = ti0 /* ERROR \"mismatched types\" */ + ti1\n-\tti6 = ti1 - ti1\n-\tti7 = ti2 /* ERROR \"mismatched types\" */ * ti1\n-\t//ti8 = ti3 / ti3 // TODO(gri) enable this\n-\t//ti9 = ti3 % ti3 // TODO(gri) enable this\n-\n-\tti10 = 1 / 0 /* ERROR \"division by zero\" */\n-\tti11 = ti1 / 0 /* ERROR \"division by zero\" */\n-\tti12 = ti3 /* ERROR \"mismatched types\" */ / ti0\n-\tti13 = 1 % 0 /* ERROR \"division by zero\" */\n-\tti14 = ti1 % 0 /* ERROR \"division by zero\" */\n-\tti15 = ti3 /* ERROR \"mismatched types\" */ % ti0\n-\n-\tti16 = ti2 /* ERROR \"mismatched types\" */ & ti3\n-\tti17 = ti2 /* ERROR \"mismatched types\" */ | ti4\n-\tti18 = ti2 ^ ti5 // no mismatched types error because the type of ti5 is unknown\n-\n-\t// floating point values\n-\ttf0 float32 = 0.\n-\ttf1 float32 = 1.\n-\ttf2 float64 = 4.2e1\n-\ttf3 myfloat = 3.141592653589793238462643383279502884197169399375105820974944592307816406286\n-\ttf4 myfloat = 1e-1\n-\n-\ttf5 = tf0 + tf1\n-\ttf6 = tf1 - tf1\n-\ttf7 = tf2 /* ERROR \"mismatched types\" */ * tf1\n-\t// tf8 = tf3 / tf3 // TODO(gri) enable this\n-\ttf9 = tf3 /* ERROR \"not defined\" */ % tf3\n-\n-\ttf10 = 1 / 0 /* ERROR \"division by zero\" */\n-\ttf11 = tf1 / 0 /* ERROR \"division by zero\" */\n-\ttf12 = tf3 /* ERROR \"mismatched types\" */ / tf0\n-\n-\ttf16 = tf2 /* ERROR \"mismatched types\" */ & tf3\n-\ttf17 = tf2 /* ERROR \"mismatched types\" */ | tf3\n-\ttf18 = tf2 /* ERROR \"mismatched types\" */ ^ tf3\n-\n-\t// complex values\n-\ttc0 = 0.i\n-\ttc1 = 1.i\n-\ttc2 = 4.2e1i\n-\ttc3 = 3.141592653589793238462643383279502884197169399375105820974944592307816406286i\n-\ttc4 = 1e-1i\n-\n-\ttc5 = tc0 + tc1\n-\ttc6 = tc1 - tc1\n-\ttc7 = tc2 * tc1\n-\ttc8 = tc3 / tc3\n-\ttc9 = tc3 /* ERROR \"not defined\" */ % tc3\n-\n-\ttc10 = 1 / 0 /* ERROR \"division by zero\" */\n-\ttc11 = tc1 / 0 /* ERROR \"division by zero\" */\n-\ttc12 = tc3 / tc0 /* ERROR \"division by zero\" */\n-\n-\ttc16 = tc2 /* ERROR \"not defined\" */ & tc3\n-\ttc17 = tc2 /* ERROR \"not defined\" */ | tc3\n-\ttc18 = tc2 /* ERROR \"not defined\" */ ^ tc3\n-)\n-\n-// initialization cycles\n-const (\n-\ta /* ERROR \"cycle\" */ = a\n-\tb /* ERROR \"cycle\" */ , c /* ERROR \"cycle\" */, d, e = e, d, c, b // TODO(gri) should only have one cycle error\n-\tf float64 = d\n-)\n-\n-// multiple initialization\n-const (\n-\ta1, a2, a3 = 7, 3.1415926, \"foo\"\n-\tb1, b2, b3 = b3, b1, 42\n-\t_p0 = assert(a1 == 7)\n-\t_p1 = assert(a2 == 3.1415926)\n-\t_p2 = assert(a3 == \"foo\")\n-\t_p3 = assert(b1 == 42)\n-\t_p4 = assert(b2 == 42)\n-\t_p5 = assert(b3 == 42)\n-)\n-\n-// iota\n-const (\n-\tiota0 = iota\n-\tiota1 = iota\n-\tiota2 = iota*2\n-\t_a0 = assert(iota0 == 0)\n-\t_a1 = assert(iota1 == 1)\n-\t_a2 = assert(iota2 == 4)\n-\tiota6 = iota*3\n-\n-\tiota7\n-\tiota8\n-\t_a3 = assert(iota7 == 21)\n-\t_a4 = assert(iota8 == 24)\n-)\n-\n-const (\n-\t_b0 = iota\n-\t_b1 = assert(iota + iota2 == 5)\n-)\n-\n-// special cases\n-const (\n-\t_n0 = nil /* ERROR \"invalid constant type\" */\n-\t_n1 = [ /* ERROR \"not constant\" */ ]int{}\n-)\n\\ No newline at end of file"}, {"sha": "1b1518366f34d09ce6a90f8093ba21c05923aa29", "filename": "libgo/go/go/types/testdata/conversions.src", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconversions.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconversions.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fconversions.src?ref=2a1d78d8f61d109b80402681a85d0051411f2cfe", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// conversions\n-\n-package conversions\n-\n-// argument count\n-var (\n-\t_v0 = int /* ERROR \"one argument\" */ ()\n-\t_v1 = int /* ERROR \"one argument\" */ (1, 2)\n-)\n-\n-//\n-var (\n-\t_v2 = int8(0)\n-)\n\\ No newline at end of file"}, {"sha": "33d4b3801490b3eeab9061d7301482de33e5ea8f", "filename": "libgo/go/go/types/testdata/decls0.src", "status": "removed", "additions": 0, "deletions": 177, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls0.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls0.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls0.src?ref=2a1d78d8f61d109b80402681a85d0051411f2cfe", "patch": "@@ -1,177 +0,0 @@\n-// Copyright 2011 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// type declarations\n-\n-package decls0\n-\n-import (\n-\t\"unsafe\"\n-\t// we can have multiple blank imports (was bug)\n-\t_ \"math\"\n-\t_ \"net/rpc\"\n-)\n-\n-const pi = 3.1415\n-\n-type (\n-\tN undeclared /* ERROR \"undeclared\" */\n-\tB bool\n-\tI int32\n-\tA [10]P\n-\tT struct {\n-\t\tx, y P\n-\t}\n-\tP *T\n-\tR (*R)\n-\tF func(A) I\n-\tY interface {\n-\t\tf(A) I\n-\t}\n-\tS [](((P)))\n-\tM map[I]F\n-\tC chan<- I\n-\n-\t// blank types must be typechecked\n-\t_ pi /* ERROR \"not a type\" */\n-\t_ struct{}\n-\t_ struct{ pi /* ERROR \"not a type\" */ }\n-)\n-\n-\n-// invalid array types\n-type (\n-\tiA0 [... /* ERROR \"invalid use of '...'\" */ ]byte\n-\tiA1 [1 /* ERROR \"invalid array length\" */ <<100]int\n-\tiA2 [- /* ERROR \"invalid array length\" */ 1]complex128\n-\tiA3 [\"foo\" /* ERROR \"invalid array length\" */ ]string\n-)\n-\n-\n-type (\n-\tp1 pi /* ERROR \"no single field or method foo\" */ .foo\n-\tp2 unsafe.Pointer\n-)\n-\n-\n-type (\n-\tPi pi /* ERROR \"not a type\" */\n-\n-\ta /* ERROR \"illegal cycle\" */ a\n-\ta /* ERROR \"redeclared\" */ int\n-\n-\t// where the cycle error appears depends on the\n-\t// order in which declarations are processed\n-\t// (which depends on the order in which a map\n-\t// is iterated through)\n-\tb /* ERROR \"illegal cycle\" */ c\n-\tc d\n-\td e\n-\te b\n-\n-\tt *t\n-\n-\tU V\n-\tV *W\n-\tW U\n-\n-\tP1 *S2\n-\tP2 P1\n-\n-\tS0 struct {\n-\t}\n-\tS1 struct {\n-\t\ta, b, c int\n-\t\tu, v, a /* ERROR \"redeclared\" */ float32\n-\t}\n-\tS2 struct {\n-\t\tU // anonymous field\n-\t\t// TODO(gri) recognize double-declaration below\n-\t\t// U /* ERROR \"redeclared\" */ int\n-\t}\n-\tS3 struct {\n-\t\tx S2\n-\t}\n-\tS4/* ERROR \"illegal cycle\" */ struct {\n-\t\tS4\n-\t}\n-\tS5 /* ERROR \"illegal cycle\" */ struct {\n-\t\tS6\n-\t}\n-\tS6 struct {\n-\t\tfield S7\n-\t}\n-\tS7 struct {\n-\t\tS5\n-\t}\n-\n-\tL1 []L1\n-\tL2 []int\n-\n-\tA1 [10.0]int\n-\tA2 /* ERROR \"illegal cycle\" */ [10]A2\n-\tA3 /* ERROR \"illegal cycle\" */ [10]struct {\n-\t\tx A4\n-\t}\n-\tA4 [10]A3\n-\n-\tF1 func()\n-\tF2 func(x, y, z float32)\n-\tF3 func(x, y, x /* ERROR \"redeclared\" */ float32)\n-\tF4 func() (x, y, x /* ERROR \"redeclared\" */ float32)\n-\tF5 func(x int) (x /* ERROR \"redeclared\" */ float32)\n-\tF6 func(x ...int)\n-\n-\tI1 interface{}\n-\tI2 interface {\n-\t\tm1()\n-\t}\n-\tI3 interface { /* ERROR \"multiple methods named m1\" */\n-\t\tm1()\n-\t\tm1 /* ERROR \"redeclared\" */ ()\n-\t}\n-\tI4 interface {\n-\t\tm1(x, y, x /* ERROR \"redeclared\" */ float32)\n-\t\tm2() (x, y, x /* ERROR \"redeclared\" */ float32)\n-\t\tm3(x int) (x /* ERROR \"redeclared\" */ float32)\n-\t}\n-\tI5 interface {\n-\t\tm1(I5)\n-\t}\n-\tI6 interface {\n-\t\tS0 /* ERROR \"not an interface\" */\n-\t}\n-\tI7 interface {\n-\t\tI1\n-\t\tI1\n-\t}\n-\tI8 /* ERROR \"illegal cycle\" */ interface {\n-\t\tI8\n-\t}\n-\t// Use I09 (rather than I9) because it appears lexically before\n-\t// I10 so that we get the illegal cycle here rather then in the\n-\t// declaration of I10. If the implementation sorts by position\n-\t// rather than name, the error message will still be here.\n-\tI09 /* ERROR \"illegal cycle\" */ interface {\n-\t\tI10\n-\t}\n-\tI10 interface {\n-\t\tI11\n-\t}\n-\tI11 interface {\n-\t\tI09\n-\t}\n-\n-\tC1 chan int\n-\tC2 <-chan int\n-\tC3 chan<- C3\n-\tC4 chan C5\n-\tC5 chan C6\n-\tC6 chan C4\n-\n-\tM1 map[Last]string\n-\tM2 map[string]M2\n-\n-\tLast int\n-)"}, {"sha": "dd63ba98091306a4deb00d2c388e1b032a319467", "filename": "libgo/go/go/types/testdata/decls1.src", "status": "removed", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls1.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls1.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls1.src?ref=2a1d78d8f61d109b80402681a85d0051411f2cfe", "patch": "@@ -1,132 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// variable declarations\n-\n-package decls1\n-\n-import (\n-\t\"math\"\n-)\n-\n-// Global variables without initialization\n-var (\n-\ta, b bool\n-\tc byte\n-\td uint8\n-\tr rune\n-\ti int\n-\tj, k, l int\n-\tx, y float32\n-\txx, yy float64\n-\tu, v complex64\n-\tuu, vv complex128\n-\ts, t string\n-\tarray []byte\n-\tiface interface{}\n-\t\n-\tblank _ /* ERROR \"cannot use _\" */\n-)\n-\n-// Global variables with initialization\n-var (\n-\ts1 = i + j\n-\ts2 = i /* ERROR \"mismatched types\" */ + x\n-\ts3 = c + d\n-\ts4 = s + t\n-\ts5 = s /* ERROR \"invalid operation\" */ / t\n-\ts6 = array[t1]\n-\ts7 = array[x /* ERROR \"index\" */]\n-\ts8 = &a\n-\ts10 = &42 /* ERROR \"cannot take address\" */\n-\ts11 = &v\n-\ts12 = -(u + *t11) / *&v\n-\ts13 = a /* ERROR \"shifted operand\" */ << d\n-\ts14 = i << j /* ERROR \"must be unsigned\" */ \n-\ts18 = math.Pi * 10.0\n-\ts19 = s1 /* ERROR \"cannot call\" */ ()\n- \ts20 = f0 /* ERROR \"no value\" */ ()\n-\ts21 = f6(1, s1, i)\n-\ts22 = f6(1, s1, uu /* ERROR \"cannot assign\" */ )\n-\t\n-\tt1 int = i + j\n-\tt2 int = i /* ERROR \"mismatched types\" */ + x\n-\tt3 int = c /* ERROR \"cannot assign\" */ + d\n-\tt4 string = s + t\n-\tt5 string = s /* ERROR \"invalid operation\" */ / t\n-\tt6 byte = array[t1]\n-\tt7 byte = array[x /* ERROR \"index\" */]\n-\tt8 *int = & /* ERROR \"cannot assign\" */ a\n-\tt10 *int = &42 /* ERROR \"cannot take address\" */\n-\tt11 *complex64 = &v\n-\tt12 complex64 = -(u + *t11) / *&v\n-\tt13 int = a /* ERROR \"shifted operand\" */ << d\n-\tt14 int = i << j /* ERROR \"must be unsigned\" */ \n-\tt15 math /* ERROR \"not in selector\" */\n-\tt16 math.xxx /* ERROR \"unexported\" */\n-\tt17 math /* ERROR \"not a type\" */ .Pi\n-\tt18 float64 = math.Pi * 10.0\n-\tt19 int = t1 /* ERROR \"cannot call\" */ ()\n-\tt20 int = f0 /* ERROR \"no value\" */ ()\n-)\n-\n-// Various more complex expressions\n-var (\n-\tu1 = x /* ERROR \"not an interface\" */ .(int)\n-\tu2 = iface.([]int)\n-\tu3 = iface.(a /* ERROR \"not a type\" */ )\n-\tu4, ok = iface.(int)\n-\tu5 /* ERROR \"assignment count mismatch\" */ , ok2, ok3 = iface.(int)\n-)\n-\n-// Constant expression initializations\n-var (\n-\tv1 = 1 /* ERROR \"cannot convert\" */ + \"foo\"\n-\tv2 = c + 255\n-\tv3 = c + 256 /* ERROR \"overflows\" */\n-\tv4 = r + 2147483647\n-\tv5 = r + 2147483648 /* ERROR \"overflows\" */\n-\tv6 = 42\n-\tv7 = v6 + 2147483647\n-\tv8 = v6 + 2147483648 /* ERROR \"overflows\" */\n-\tv9 = i + 1 << 10\n-\tv10 byte = 1024 /* ERROR \"overflows\" */\n-\tv11 = xx/yy*yy - xx\n-\tv12 = true && false\n-\tv13 = nil /* ERROR \"use of untyped nil\" */\n-)\n-\n-// Multiple assignment expressions\n-var (\n-\tm1a, m1b = 1, 2\n-\tm2a /* ERROR \"assignment count mismatch\" */ , m2b, m2c = 1, 2\n-\tm3a /* ERROR \"assignment count mismatch\" */ , m3b = 1, 2, 3\n-)\n-\n-// Declaration of parameters and results\n-func f0() {}\n-func f1(a /* ERROR \"not a type\" */) {}\n-func f2(a, b, c d /* ERROR \"not a type\" */) {}\n-\n-func f3() int {}\n-func f4() a /* ERROR \"not a type\" */ {}\n-func f5() (a, b, c d /* ERROR \"not a type\" */) {}\n-\n-func f6(a, b, c int) complex128 { return 0 }\n-\n-// Declaration of receivers\n-type T struct{}\n-\n-func (T) m0() {}\n-func (*T) m1() {}\n-func (x T) m2() {}\n-func (x *T) m3() {}\n-\n-\n-// Initialization functions\n-func init() {}\n-func /* ERROR \"no arguments and no return values\" */ init(int) {}\n-func /* ERROR \"no arguments and no return values\" */ init() int { return 0 }\n-func /* ERROR \"no arguments and no return values\" */ init(int) int {}\n-func (T) init(int) int { return 0 }"}, {"sha": "3867be737653d80c4f59ed9de8e6a9552e05cc88", "filename": "libgo/go/go/types/testdata/decls2a.src", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls2a.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls2a.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls2a.src?ref=2a1d78d8f61d109b80402681a85d0051411f2cfe", "patch": "@@ -1,67 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// method declarations\n-\n-package decls2\n-\n-import \"time\"\n-\n-// T1 declared before its methods.\n-type T1 struct{\n-\tf int\n-}\n-\n-func (T1) m() {}\n-func (T1) m /* ERROR \"redeclared\" */ () {}\n-func (x *T1) f /* ERROR \"field and method\" */ () {}\n-\n-// T2's method declared before the type.\n-func (*T2) f /* ERROR \"field and method\" */ () {}\n-\n-type T2 struct {\n-\tf int\n-}\n-\n-// Methods declared without a declared type.\n-func (undeclared /* ERROR \"undeclared\" */) m() {}\n-func (x *undeclared /* ERROR \"undeclared\" */) m() {}\n-\n-// TODO(gri) try to get rid of double error reporting here\n-func (pi /* ERROR \"not a type\" */) m1() {}\n-func (x pi /* ERROR \"not a type\" */) m2() {}\n-func (x *pi /* ERROR \"not a type\" */ ) m3() {} // TODO(gri) not closing the last /* comment crashes the system\n-\n-// Blank types.\n-type _ struct { m int }\n-type _ struct { m int }\n-\n-// TODO(gri) blank idents not fully checked - disabled for now\n-// func (_ /* ERROR \"cannot use _\" */) m() {}\n-// func (_ /* ERROR \"cannot use _\" */) m() {}\n-\n-// Methods with receiver base type declared in another file.\n-func (T3) m1() {}\n-func (*T3) m2() {}\n-func (x T3) m3() {}\n-func (x *T3) f /* ERROR \"field and method\" */ () {}\n-\n-// Methods of non-struct type.\n-type T4 func()\n-\n-func (self T4) m() func() { return self }\n-\n-// Methods associated with an interface.\n-type T5 interface {\n-\tm() int\n-}\n-\n-func (T5 /* ERROR \"invalid receiver\" */) m1() {}\n-func (T5 /* ERROR \"invalid receiver\" */) m2() {}\n-\n-// Methods associated with non-local or unnamed types.\n-func (int /* ERROR \"non-local type\" */ ) m() {}\n-func ([ /* ERROR \"expected\" */ ]int) m() {}\n-func (time /* ERROR \"expected\" */ .Time) m() {}\n-func (x interface /* ERROR \"expected\" */ {}) m() {}"}, {"sha": "c7f9ddf01add6c2702a60743f24a914b46f889a6", "filename": "libgo/go/go/types/testdata/decls2b.src", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls2b.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls2b.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls2b.src?ref=2a1d78d8f61d109b80402681a85d0051411f2cfe", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// method declarations\n-\n-package decls2\n-\n-const pi = 3.1415\n-\n-func (T1) m /* ERROR \"redeclared\" */ () {}\n-\n-type T3 struct {\n-\tf *T3\n-}\n-\n-type T6 struct {\n-\tx int\n-}\n-\n-func (t *T6) m1() int {\n-\treturn t.x\n-}\n-\n-func f() {\n-\tvar t *T6\n-\tt.m1()\n-}\n\\ No newline at end of file"}, {"sha": "4bc7d414941058876678207faab9ead0166b06c3", "filename": "libgo/go/go/types/testdata/decls3.src", "status": "removed", "additions": 0, "deletions": 231, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls3.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls3.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fdecls3.src?ref=2a1d78d8f61d109b80402681a85d0051411f2cfe", "patch": "@@ -1,231 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// embedded types\n-\n-package decls3\n-\n-// fields with the same name at the same level cancel each other out\n-\n-func _() {\n-\ttype (\n-\t\tT1 struct { X int }\n-\t\tT2 struct { X int }\n-\t\tT3 struct { T1; T2 } // X is embedded twice at the same level via T1->X, T2->X\n-\t)\n-\n-\tvar t T3\n-\t_ = t /* ERROR \"no single field or method\" */ .X\n-}\n-\n-func _() {\n-\ttype (\n-\t\tT1 struct { X int }\n-\t\tT2 struct { T1 }\n-\t\tT3 struct { T1 }\n-\t\tT4 struct { T2; T3 } // X is embedded twice at the same level via T2->T1->X, T3->T1->X\n-\t)\n-\n-\tvar t T4\n-\t_ = t /* ERROR \"no single field or method\" */ .X\n-}\n-\n-func issue4355() {\n-\ttype (\n-\t    T1 struct {X int}\n-\t    T2 struct {T1}\n-\t    T3 struct {T2}\n-\t    T4 struct {T2}\n-\t    T5 struct {T3; T4} // X is embedded twice at the same level via T3->T2->T1->X, T4->T2->T1->X\n-\t)\t\n-\n-\tvar t T5\n-\t_ = t /* ERROR \"no single field or method\" */ .X\n-}\n-\n-// Borrowed from the FieldByName test cases in reflect/all_test.go.\n-\n-type D1 struct {\n-\td int\n-}\n-type D2 struct {\n-\td int\n-}\n-\n-type S0 struct {\n-\tA, B, C int\n-\tD1\n-\tD2\n-}\n-\n-type S1 struct {\n-\tB int\n-\tS0\n-}\n-\n-type S2 struct {\n-\tA int\n-\t*S1\n-}\n-\n-type S1x struct {\n-\tS1\n-}\n-\n-type S1y struct {\n-\tS1\n-}\n-\n-type S3 struct {\n-\tS1x\n-\tS2\n-\tD, E int\n-\t*S1y\n-}\n-\n-type S4 struct {\n-\t*S4\n-\tA int\n-}\n-\n-// The X in S6 and S7 annihilate, but they also block the X in S8.S9.\n-type S5 struct {\n-\tS6\n-\tS7\n-\tS8\n-}\n-\n-type S6 struct {\n-\tX int\n-}\n-\n-type S7 S6\n-\n-type S8 struct {\n-\tS9\n-}\n-\n-type S9 struct {\n-\tX int\n-\tY int\n-}\n-\n-// The X in S11.S6 and S12.S6 annihilate, but they also block the X in S13.S8.S9.\n-type S10 struct {\n-\tS11\n-\tS12\n-\tS13\n-}\n-\n-type S11 struct {\n-\tS6\n-}\n-\n-type S12 struct {\n-\tS6\n-}\n-\n-type S13 struct {\n-\tS8\n-}\n-\n-func _() {\n-\t_ = struct /* ERROR \"no single field or method\" */ {}{}.Foo\n-\t_ = S0{}.A\n-\t_ = S0 /* ERROR \"no single field or method\" */ {}.D\n-\t_ = S1{}.A\n-\t_ = S1{}.B\n-\t_ = S1{}.S0\n-\t_ = S1{}.C\n-\t_ = S2{}.A\n-\t_ = S2{}.S1\n-\t_ = S2{}.B\n-\t_ = S2{}.C\n-\t_ = S2 /* ERROR \"no single field or method\" */ {}.D\n-\t_ = S3 /* ERROR \"no single field or method\" */ {}.S1\n-\t_ = S3{}.A\n-\t_ = S3 /* ERROR \"no single field or method\" */ {}.B\n-\t_ = S3{}.D\n-\t_ = S3{}.E\n-\t_ = S4{}.A\n-\t_ = S4 /* ERROR \"no single field or method\" */ {}.B\n-\t_ = S5 /* ERROR \"no single field or method\" */ {}.X\n-\t_ = S5{}.Y\n-\t_ = S10 /* ERROR \"no single field or method\" */ {}.X\n-\t_ = S10{}.Y\n-}\n-\n-// Borrowed from the FieldByName benchmark in reflect/all_test.go.\n-\n-type R0 struct {\n-\t*R1\n-\t*R2\n-\t*R3\n-\t*R4\n-}\n-\n-type R1 struct {\n-\t*R5\n-\t*R6\n-\t*R7\n-\t*R8\n-}\n-\n-type R2 R1\n-type R3 R1\n-type R4 R1\n-\n-type R5 struct {\n-\t*R9\n-\t*R10\n-\t*R11\n-\t*R12\n-}\n-\n-type R6 R5\n-type R7 R5\n-type R8 R5\n-\n-type R9 struct {\n-\t*R13\n-\t*R14\n-\t*R15\n-\t*R16\n-}\n-\n-type R10 R9\n-type R11 R9\n-type R12 R9\n-\n-type R13 struct {\n-\t*R17\n-\t*R18\n-\t*R19\n-\t*R20\n-}\n-\n-type R14 R13\n-type R15 R13\n-type R16 R13\n-\n-type R17 struct {\n-\t*R21\n-\t*R22\n-\t*R23\n-\t*R24\n-}\n-\n-type R18 R17\n-type R19 R17\n-type R20 R17\n-\n-type R21 struct {\n-\tX int\n-}\n-\n-type R22 R21\n-type R23 R21\n-type R24 R21\n-\n-var _ = R0 /* ERROR \"no single field or method\" */ {}.X\n\\ No newline at end of file"}, {"sha": "c3233d36fe1b560efdc47715195c922b934fff97", "filename": "libgo/go/go/types/testdata/expr0.src", "status": "removed", "additions": 0, "deletions": 151, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr0.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr0.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr0.src?ref=2a1d78d8f61d109b80402681a85d0051411f2cfe", "patch": "@@ -1,151 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// unary expressions\n-\n-package expr0 \n-\n-var (\n-\t// bool\n-\tb0 = true\n-\tb1 bool = b0\n-\tb2 = !true\n-\tb3 = !b1\n-\tb4 bool = !true\n-\tb5 bool = !b4\n-\tb6 = +b0 /* ERROR \"not defined\" */\n-\tb7 = -b0 /* ERROR \"not defined\" */\n-\tb8 = ^b0 /* ERROR \"not defined\" */\n-\tb9 = *b0 /* ERROR \"cannot indirect\" */\n-\tb10 = &true /* ERROR \"cannot take address\" */\n-\tb11 = &b0\n-\tb12 = <-b0 /* ERROR \"cannot receive\" */\n-\n-\t// int\n-\ti0 = 1\n-\ti1 int = i0\n-\ti2 = +1\n-\ti3 = +i0\n-\ti4 int = +1\n-\ti5 int = +i4\n-\ti6 = -1\n-\ti7 = -i0\n-\ti8 int = -1\n-\ti9 int = -i4\n-\ti10 = !i0 /* ERROR \"not defined\" */\n-\ti11 = ^1\n-\ti12 = ^i0\n-\ti13 int = ^1\n-\ti14 int = ^i4\n-\ti15 = *i0 /* ERROR \"cannot indirect\" */\n-\ti16 = &i0\n-\ti17 = *i16\n-\ti18 = <-i16 /* ERROR \"cannot receive\" */\n-\n-\t// uint\n-\tu0 = uint(1)\n-\tu1 uint = u0\n-\tu2 = +1\n-\tu3 = +u0\n-\tu4 uint = +1\n-\tu5 uint = +u4\n-\tu6 = -1\n-\tu7 = -u0\n-\tu8 uint = - /* ERROR \"overflows\" */ 1\n-\tu9 uint = -u4\n-\tu10 = !u0 /* ERROR \"not defined\" */\n-\tu11 = ^1\n-\tu12 = ^i0\n-\tu13 uint = ^ /* ERROR \"overflows\" */ 1\n-\tu14 uint = ^u4\n-\tu15 = *u0 /* ERROR \"cannot indirect\" */\n-\tu16 = &u0\n-\tu17 = *u16\n-\tu18 = <-u16 /* ERROR \"cannot receive\" */\n-\tu19 = ^uint(0)\n-\n-\t// float64\n-\tf0 = float64(1)\n-\tf1 float64 = f0\n-\tf2 = +1\n-\tf3 = +f0\n-\tf4 float64 = +1\n-\tf5 float64 = +f4 /* ERROR not defined */\n-\tf6 = -1\n-\tf7 = -f0\n-\tf8 float64 = -1\n-\tf9 float64 = -f4\n-\tf10 = !f0 /* ERROR \"not defined\" */\n-\tf11 = ^1\n-\tf12 = ^i0\n-\tf13 float64 = ^1\n-\tf14 float64 = ^f4 /* ERROR \"not defined\" */\n-\tf15 = *f0 /* ERROR \"cannot indirect\" */\n-\tf16 = &f0\n-\tf17 = *u16\n-\tf18 = <-u16 /* ERROR \"cannot receive\" */\n-\n-\t// complex128\n-\tc0 = complex128(1)\n-\tc1 complex128 = c0\n-\tc2 = +1\n-\tc3 = +c0\n-\tc4 complex128 = +1\n-\tc5 complex128 = +c4 /* ERROR not defined */\n-\tc6 = -1\n-\tc7 = -c0\n-\tc8 complex128 = -1\n-\tc9 complex128 = -c4\n-\tc10 = !c0 /* ERROR \"not defined\" */\n-\tc11 = ^1\n-\tc12 = ^i0\n-\tc13 complex128 = ^1\n-\tc14 complex128 = ^c4 /* ERROR \"not defined\" */\n-\tc15 = *c0 /* ERROR \"cannot indirect\" */\n-\tc16 = &c0\n-\tc17 = *u16\n-\tc18 = <-u16 /* ERROR \"cannot receive\" */\n-\n-\t// string\n-\ts0 = \"foo\"\n-\ts1 = +\"foo\" /* ERROR \"not defined\" */\n-\ts2 = -s0 /* ERROR \"not defined\" */\n-\ts3 = !s0 /* ERROR \"not defined\" */\n-\ts4 = ^s0 /* ERROR \"not defined\" */\n-\ts5 = *s4 /* ERROR \"cannot indirect\" */\n-\ts6 = &s4\n-\ts7 = *s6\n-\ts8 = <-s7  /* ERROR \"cannot receive\" */\n-\n-\t// channel\n-\tch chan int\n-\trc <-chan float64\n-\tsc chan <- string\n-\tch0 = +ch /* ERROR \"not defined\" */\n-\tch1 = -ch /* ERROR \"not defined\" */\n-\tch2 = !ch /* ERROR \"not defined\" */\n-\tch3 = ^ch /* ERROR \"not defined\" */\n-\tch4 = *ch /* ERROR \"cannot indirect\" */\n-\tch5 = &ch\n-\tch6 = *ch5\n-\tch7 = <-ch\n-\tch8 = <-rc\n-\tch9 = <-sc /* ERROR \"cannot receive\" */\n-)\n-\n-// address of composite literals\n-type T struct{x, y int}\n-\n-func f() T { return T{} }\n-\n-var (\n-\t_ = &T{1, 2}\n-\t_ = &[...]int{}\n-\t_ = &[]int{}\n-\t_ = &[]int{}\n-\t_ = &map[string]T{}\n-\t_ = &(T{1, 2})\n-\t_ = &((((T{1, 2}))))\n-\t_ = &f /* ERROR \"cannot take address\" */ ()\n-)"}, {"sha": "8ef0aed6d2ea16ed8d811338a04c1f68fab08751", "filename": "libgo/go/go/types/testdata/expr1.src", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr1.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr1.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr1.src?ref=2a1d78d8f61d109b80402681a85d0051411f2cfe", "patch": "@@ -1,7 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// binary expressions\n-\n-package expr1"}, {"sha": "674be4005dd5c0a34c394a003d33f0de17a77c9b", "filename": "libgo/go/go/types/testdata/expr2.src", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr2.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr2.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr2.src?ref=2a1d78d8f61d109b80402681a85d0051411f2cfe", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// comparisons\n-\n-package expr2\n-\n-func _bool() {\n-\tconst t = true == true\n-\tconst f = true == false\n-\t_ = t /* ERROR \"cannot compare\" */ < f\n-\t_ = 0 /* ERROR \"cannot convert\" */ == t\n-\tvar b bool\n-\tvar x, y float32\n-\tb = x < y\n-\t_ = struct{b bool}{x < y}\n-}\n-\n-// corner cases\n-var (\n-\tv0 = nil /* ERROR \"cannot compare\" */ == nil\n-)\n\\ No newline at end of file"}, {"sha": "519e3f567ac48f6f6ce9478013778c5db8d7146e", "filename": "libgo/go/go/types/testdata/expr3.src", "status": "removed", "additions": 0, "deletions": 367, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr3.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr3.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fexpr3.src?ref=2a1d78d8f61d109b80402681a85d0051411f2cfe", "patch": "@@ -1,367 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// various expressions\n-\n-package expr3\n-\n-func shifts1() {\n-\tvar (\n-\t\ti0 int\n-\t\tu0 uint\n-\t)\n-\n-\tvar (\n-\t\tv0 = 1<<0\n-\t\tv1 = 1<<i0 /* ERROR \"must be unsigned\" */\n-\t\tv2 = 1<<u0\n-\t\tv3 = 1<<\"foo\" /* ERROR \"must be unsigned\" */\n-\t\tv4 = 1<<- /* ERROR \"stupid shift\" */ 1\n-\t\tv5 = 1<<1025 /* ERROR \"stupid shift\" */\n-\t\tv6 = 1 /* ERROR \"overflows\" */ <<100\n-\n-\t\tv10 uint = 1 << 0\n-\t\tv11 uint = 1 << u0\n-\t\tv12 float32 = 1 /* ERROR \"must be integer\" */ << u0\n-\t)\n-}\n-\n-func shifts2() {\n-\t// TODO(gri) enable commented out tests below.\n-\tvar (\n-\t\ts uint = 33\n-\t\ti = 1<<s           // 1 has type int\n-\t\tj int32 = 1<<s     // 1 has type int32; j == 0\n-\t\tk = uint64(1<<s)   // 1 has type uint64; k == 1<<33\n-\t\tm int = 1.0<<s     // 1.0 has type int\n-\t//\tn = 1.0<<s != 0    // 1.0 has type int; n == false if ints are 32bits in size\n-\t\to = 1<<s == 2<<s   // 1 and 2 have type int; o == true if ints are 32bits in size\n-\t//\tp = 1<<s == 1 /* ERROR \"overflows\" */ <<33  // illegal if ints are 32bits in size: 1 has type int, but 1<<33 overflows int\n-\t\tu = 1.0 /* ERROR \"must be integer\" */ <<s         // illegal: 1.0 has type float64, cannot shift\n-\t\tv float32 = 1 /* ERROR \"must be integer\" */ <<s   // illegal: 1 has type float32, cannot shift\n-\t\tw int64 = 1.0<<33  // 1.0<<33 is a constant shift expression\n-\t)\n-}\n-\n-// TODO(gri) The error messages below depond on adjusting the spec\n-//           to reflect what gc is doing at the moment (the spec\n-//           asks for run-time errors at the moment - see issue 4231).\n-//\n-func indexes() {\n-\t_ = 1 /* ERROR \"cannot index\" */ [0]\n-\t_ = indexes /* ERROR \"cannot index\" */ [0]\n-\t_ = ( /* ERROR \"cannot slice\" */ 12 + 3)[1:2]\n-\n-\tvar a [10]int\n-\t_ = a[true /* ERROR \"must be integer\" */ ]\n-\t_ = a[\"foo\" /* ERROR \"must be integer\" */ ]\n-\t_ = a[1.1 /* ERROR \"must be integer\" */ ]\n-\t_ = a[1.0]\n-\t_ = a[- /* ERROR \"index .* negative\" */ 1]\n-\t_ = a[- /* ERROR \"index .* negative\" */ 1 :]\n-\t_ = a[: - /* ERROR \"index .* negative\" */ 1]\n-\tvar a0 int\n-\ta0 = a[0]\n-\tvar a1 int32\n-\ta1 = a /* ERROR \"cannot assign\" */ [1] \n-\t_ = a[9]\n-\t_ = a[10 /* ERROR \"index .* out of bounds\" */ ]\n-\t_ = a[1 /* ERROR \"stupid index\" */ <<100]\n-\t_ = a[10:]\n-\t_ = a[:10]\n-\t_ = a[10:10]\n-\t_ = a[11 /* ERROR \"index .* out of bounds\" */ :]\n-\t_ = a[: 11 /* ERROR \"index .* out of bounds\" */ ]\n-\t_ = a[: 1 /* ERROR \"stupid index\" */ <<100]\n-\n-\tpa := &a\n-\t_ = pa[9]\n-\t_ = pa[10 /* ERROR \"index .* out of bounds\" */ ]\n-\t_ = pa[1 /* ERROR \"stupid index\" */ <<100]\n-\t_ = pa[10:]\n-\t_ = pa[:10]\n-\t_ = pa[10:10]\n-\t_ = pa[11 /* ERROR \"index .* out of bounds\" */ :]\n-\t_ = pa[: 11 /* ERROR \"index .* out of bounds\" */ ]\n-\t_ = pa[: 1 /* ERROR \"stupid index\" */ <<100]\n-\n-\tvar b [0]int\n-\t_ = b[0 /* ERROR \"index .* out of bounds\" */ ]\n-\t_ = b[:]\n-\t_ = b[0:]\n-\t_ = b[:0]\n-\t_ = b[0:0]\n-\n-\tvar s []int\n-\t_ = s[- /* ERROR \"index .* negative\" */ 1]\n-\t_ = s[- /* ERROR \"index .* negative\" */ 1 :]\n-\t_ = s[: - /* ERROR \"index .* negative\" */ 1]\n-\t_ = s[0]\n-\t_ = s[1 : 2]\n-\t_ = s[2 /* ERROR \"inverted slice range\" */ : 1]\n-\t_ = s[2 :]\n-\t_ = s[: 1 /* ERROR \"stupid index\" */ <<100]\n-\t_ = s[1 /* ERROR \"stupid index\" */ <<100 :]\n-\t_ = s[1 /* ERROR \"stupid index\" */ <<100 : 1 /* ERROR \"stupid index\" */ <<100]\n-\n-\tvar t string\n-\t_ = t[- /* ERROR \"index .* negative\" */ 1]\n-\t_ = t[- /* ERROR \"index .* negative\" */ 1 :]\n-\t_ = t[: - /* ERROR \"index .* negative\" */ 1]\n-\tvar t0 byte\n-\tt0 = t[0]\n-\tvar t1 rune\n-\tt1 = t /* ERROR \"cannot assign\" */ [2]\n-\t_ = (\"foo\" + \"bar\")[5]\n-\t_ = (\"foo\" + \"bar\")[6 /* ERROR \"index .* out of bounds\" */ ]\n-\n-\tconst c = \"foo\"\n-\t_ = c[- /* ERROR \"index .* negative\" */ 1]\n-\t_ = c[- /* ERROR \"index .* negative\" */ 1 :]\n-\t_ = c[: - /* ERROR \"index .* negative\" */ 1]\n-\tvar c0 byte\n-\tc0 = c[0]\n-\tvar c2 float32\n-\tc2 = c /* ERROR \"cannot assign\" */ [2]\n-\t_ = c[3 /* ERROR \"index .* out of bounds\" */ ]\n-\t_ = \"\"[0 /* ERROR \"index .* out of bounds\" */ ]\n-\n-\t_ = s[1<<30] // no compile-time error here\n-}\n-\n-type T struct {\n-\tx int\n-}\n-\n-func (*T) m() {}\n-\n-func method_expressions() {\n-\t_ = T /* ERROR \"no single field or method\" */ .a\n-\t_ = T /* ERROR \"has no method\" */ .x\n-\t_ = T.m\n-\tvar f func(*T) = (*T).m\n-\tvar g func(*T) = ( /* ERROR \"cannot assign\" */ T).m\n-}\n-\n-func struct_literals() {\n-\ttype T0 struct {\n-\t\ta, b, c int\n-\t}\n-\n-\ttype T1 struct {\n-\t\tT0\n-\t\ta, b int\n-\t\tu float64\n-\t\ts string\n-\t}\n-\n-\t// keyed elements\n-\t_ = T1{}\n-\t_ = T1{a: 0, 1 /* ERROR \"mixture of .* elements\" */ }\n-\t_ = T1{aa /* ERROR \"unknown field\" */ : 0}\n-\t_ = T1{1 /* ERROR \"invalid field name\" */ : 0}\n-\t_ = T1{a: 0, s: \"foo\", u: 0, a /* ERROR \"duplicate field\" */: 10}\n-\t_ = T1{a: \"foo\" /* ERROR \"cannot use\" */ }\n-\t_ = T1{c /* ERROR \"unknown field\" */ : 0}\n-\t_ = T1{T0: { /* ERROR \"missing type\" */ }}\n-\t_ = T1{T0: T0{}}\n-\t_ = T1{T0 /* ERROR \"invalid field name\" */ .a: 0}\n-\n-\t// unkeyed elements\n-\t_ = T0{1, 2, 3}\n-\t_ = T0{1, b /* ERROR \"mixture\" */ : 2, 3}\n-\t_ = T0{1, 2} /* ERROR \"too few values\" */\n-\t_ = T0{1, 2, 3, 4  /* ERROR \"too many values\" */ }\n-\t_ = T0{1, \"foo\" /* ERROR \"cannot use\" */, 3.4  /* ERROR \"cannot use\" */}\n-}\n-\n-func array_literals() {\n-\ttype A0 [0]int\n-\t_ = A0{}\n-\t_ = A0{0 /* ERROR \"index .* out of bounds\" */}\n-\t_ = A0{0 /* ERROR \"index .* out of bounds\" */ : 0}\n-\n-\ttype A1 [10]int\n-\t_ = A1{}\n-\t_ = A1{0, 1, 2}\n-\t_ = A1{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n-\t_ = A1{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 /* ERROR \"index .* out of bounds\" */ }\n-\t_ = A1{- /* ERROR \"index .* negative\" */ 1: 0}\n-\t_ = A1{8: 8, 9}\n-\t_ = A1{8: 8, 9, 10 /* ERROR \"index .* out of bounds\" */ }\n-\t_ = A1{0, 1, 2, 0 /* ERROR \"duplicate index\" */ : 0, 3: 3, 4}\n-\t_ = A1{5: 5, 6, 7, 3: 3, 4}\n-\t_ = A1{5: 5, 6, 7, 3: 3, 4, 5 /* ERROR \"duplicate index\" */ }\n-\t_ = A1{10 /* ERROR \"index .* out of bounds\" */ : 10, 10 /* ERROR \"index .* out of bounds\" */ : 10}\n-\t_ = A1{5: 5, 6, 7, 3: 3, 1 /* ERROR \"stupid index\" */ <<100: 4, 5 /* ERROR \"duplicate index\" */ }\n-\t_ = A1{5: 5, 6, 7, 4: 4, 1 /* ERROR \"stupid index\" */ <<100: 4}\n-\t_ = A1{2.0}\n-\t_ = A1{2.1 /* ERROR \"cannot use\" */ }\n-\t_ = A1{\"foo\" /* ERROR \"cannot use\" */ }\n-\n-\ta0 := [...]int{}\n-\tassert(len(a0) == 0)\n-\t\n-\ta1 := [...]int{0, 1, 2}\n-\tassert(len(a1) == 3)\n-\tvar a13 [3]int\n-\tvar a14 [4]int\n-\ta13 = a1\n-\ta14 = a1 /* ERROR \"cannot assign\" */\n-\t\n-\ta2 := [...]int{- /* ERROR \"index .* negative\" */ 1: 0}\n-\n-\ta3 := [...]int{0, 1, 2, 0 /* ERROR \"duplicate index\" */ : 0, 3: 3, 4}\n-\tassert(len(a3) == 5) // somewhat arbitrary\n-\n-\ta4 := [...]complex128{0, 1, 2, 1<<10-2: -1i, 1i, 400: 10, 12, 14}\n-\tassert(len(a4) == 1024)\n-\n-\t// from the spec\n-\ttype Point struct { x, y float32 }\n-\t_ = [...]Point{Point{1.5, -3.5}, Point{0, 0}}\n-\t_ = [...]Point{{1.5, -3.5}, {0, 0}}\n-\t_ = [][]int{[]int{1, 2, 3}, []int{4, 5}}\n-\t_ = [][]int{{1, 2, 3}, {4, 5}}\n-\t_ = [...]*Point{&Point{1.5, -3.5}, &Point{0, 0}}\n-\t_ = [...]*Point{{1.5, -3.5}, {0, 0}}\n-}\n-\n-func slice_literals() {\n-\ttype S0 []int\n-\t_ = S0{}\n-\t_ = S0{0, 1, 2}\n-\t_ = S0{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n-\t_ = S0{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n-\t_ = S0{- /* ERROR \"index .* negative\" */ 1: 0}\n-\t_ = S0{8: 8, 9}\n-\t_ = S0{8: 8, 9, 10}\n-\t_ = S0{0, 1, 2, 0 /* ERROR \"duplicate index\" */ : 0, 3: 3, 4}\n-\t_ = S0{5: 5, 6, 7, 3: 3, 4}\n-\t_ = S0{5: 5, 6, 7, 3: 3, 4, 5 /* ERROR \"duplicate index\" */ }\n-\t_ = S0{10: 10, 10 /* ERROR \"duplicate index\" */ : 10}\n-\t_ = S0{5: 5, 6, 7, 3: 3, 1 /* ERROR \"stupid index\" */ <<100: 4, 5 /* ERROR \"duplicate index\" */ }\n-\t_ = S0{5: 5, 6, 7, 4: 4, 1 /* ERROR \"stupid index\" */ <<100: 4}\n-\t_ = S0{2.0}\n-\t_ = S0{2.1 /* ERROR \"cannot use\" */ }\n-\t_ = S0{\"foo\" /* ERROR \"cannot use\" */ }\n-\n-\t// indices must be resolved correctly\n-\t// (for details, see comment in go/parser/parser.go, method parseElement)\n-\tindex1 := 1\n-\t_ = S0{index1: 1}\n-\t_ = S0{index2: 2}\n-\t_ = S0{index3 /* ERROR \"undeclared name\" */ : 3}\n-}\n-\n-var index2 int = 2\n-\n-func map_literals() {\n-\ttype M0 map[string]int\n-\n-\t_ = M0{}\n-\t_ = M0{1 /* ERROR \"missing key\" */ }\n-\t_ = M0{1 /* ERROR \"cannot use .* as string key\" */ : 2}\n-\t_ = M0{\"foo\": \"bar\" /* ERROR \"cannot use .* as int value\" */ }\n-\t_ = M0{\"foo\": 1, \"bar\": 2, \"foo\" /* ERROR \"duplicate key\" */ : 3 }\n-\n-\t// map keys must be resolved correctly\n-\t// (for detials, see comment in go/parser/parser.go, method parseElement)\n-\tkey1 := \"foo\"\n-\t_ = M0{key1: 1}\n-\t_ = M0{key2: 2}\n-\t_ = M0{key3 /* ERROR \"undeclared name\" */ : 2}\n-}\n-\n-var key2 string = \"bar\"\n-\n-type I interface {\n-\tm()\n-}\n-\n-type I2 interface {\n-\tm(int)\n-}\n-\n-type T1 struct{}\n-type T2 struct{}\n-\n-func (T2) m(int) {}\n-\n-func type_asserts() {\n-\tvar x int\n-\t_ = x /* ERROR \"not an interface\" */ .(int)\n-\n-\tvar e interface{}\n-\tvar ok bool\n-\tx, ok = e.(int)\n-\n-\tvar t I\n-\t_ = t /* ERROR \"use of .* outside type switch\" */ .(type)\n-\t_ = t.(T)\n-\t_ = t.(T1 /* ERROR \"missing method m\" */ )\n-\t_ = t.(T2 /* ERROR \"wrong type for method m\" */ )\n-\t_ = t.(I2 /* ERROR \"wrong type for method m\" */ )\n-}\n-\n-func f0() {}\n-func f1(x int) {}\n-func f2(u float32, s string) {}\n-func fs(s []byte) {}\n-func fv(x ...int) {}\n-func fi(x ... interface{}) {}\n-\n-func g0() {}\n-func g1() int { return 0}\n-func g2() (u float32, s string) { return }\n-func gs() []byte { return nil }\n-\n-func _calls() {\n-\tvar x int\n-\tvar y float32\n-\tvar s []int\n-\n-\tf0()\n-\t_ = f0 /* ERROR \"used as value\" */ ()\n-\tf0(g0 /* ERROR \"too many arguments\" */ )\n-\n-\tf1(0)\n-\tf1(x)\n-\tf1(10.0)\n-\tf1 /* ERROR \"too few arguments\" */ ()\n-\tf1(x, y /* ERROR \"too many arguments\" */ )\n-\tf1(s /* ERROR \"cannot assign\" */ )\n-\tf1(x ... /* ERROR \"cannot use ...\" */ )\n-\tf1(g0 /* ERROR \"used as value\" */ ())\n-\tf1(g1())\n-\t// f1(g2()) // TODO(gri) missing position in error message\n-\n-\tf2 /* ERROR \"too few arguments\" */ ()\n-\tf2 /* ERROR \"too few arguments\" */ (3.14)\n-\tf2(3.14, \"foo\")\n-\tf2(x /* ERROR \"cannot assign\" */ , \"foo\")\n-\tf2(g0 /* ERROR \"used as value\" */ ())\n-\tf2 /* ERROR \"too few arguments\" */ (g1 /* ERROR \"cannot assign\" */ ())\n-\tf2(g2())\n-\n-\tfs /* ERROR \"too few arguments\" */ ()\n-\tfs(g0 /* ERROR \"used as value\" */ ())\n-\tfs(g1 /* ERROR \"cannot assign\" */ ())\n-\t// fs(g2()) // TODO(gri) missing position in error message\n-\tfs(gs())\n-\n-\tfv()\n-\tfv(1, 2.0, x)\n-\tfv(s /* ERROR \"cannot assign\" */ )\n-\tfv(s...)\n-\tfv(1, s /* ERROR \"can only use ... with matching parameter\" */ ...)\n-\tfv(gs /* ERROR \"cannot assign\" */ ())\n-\tfv(gs /* ERROR \"cannot assign\" */ ()...)\n-\n-\tfi()\n-\tfi(1, 2.0, x, 3.14, \"foo\")\n-\tfi(g2())\n-\tfi(0, g2)\n-\tfi(0, g2 /* ERROR \"2-valued expression\" */ ())\n-}\n\\ No newline at end of file"}, {"sha": "ca36834fde6d508368b5c75052a3907c9487a01d", "filename": "libgo/go/go/types/testdata/stmt0.src", "status": "removed", "additions": 0, "deletions": 274, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fstmt0.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d78d8f61d109b80402681a85d0051411f2cfe/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fstmt0.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Fstmt0.src?ref=2a1d78d8f61d109b80402681a85d0051411f2cfe", "patch": "@@ -1,274 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// statements\n-\n-package stmt0\n-\n-func _() {\n-\tb, i, f, c, s := false, 1, 1.0, 1i, \"foo\"\n-\tb = i /* ERROR \"cannot assign\" */\n-\ti = f /* ERROR \"cannot assign\" */\n-\tf = c /* ERROR \"cannot assign\" */\n-\tc = s /* ERROR \"cannot assign\" */\n-\ts = b /* ERROR \"cannot assign\" */\n-\n-\tv0 /* ERROR \"mismatch\" */, v1, v2 := 1, 2, 3, 4\n-\n-\tb = true\n-\n-\ti += 1\n-\ti += \"foo\" /* ERROR \"cannot convert.*int\" */\n-\n-\tf -= 1\n-\tf -= \"foo\" /* ERROR \"cannot convert.*float64\" */\n-\n-\tc *= 1\n-\tc /= 0 /* ERROR \"division by zero\" */\n-\n-\ts += \"bar\"\n-\ts += 1 /* ERROR \"cannot convert.*string\" */\n-}\n-\n-func _incdecs() {\n-\tconst c = 3.14\n-\tc /* ERROR \"cannot assign\" */ ++\n-\ts := \"foo\"\n-\ts /* ERROR \"cannot convert\" */ --\n-\t3.14 /* ERROR \"cannot assign\" */ ++\n-\tvar (\n-\t\tx int\n-\t\ty float32\n-\t\tz complex128\n-\t)\n-\tx++\n-\ty--\n-\tz++\n-}\n-\n-func _sends() {\n-\tvar ch chan int\n-\tvar rch <-chan int\n-\tvar x int\n-\tx /* ERROR \"cannot send\" */ <- x\n-\trch /* ERROR \"cannot send\" */ <- x\n-\tch /* ERROR \"cannot send\" */ <- \"foo\"\n-\tch <- x\n-}\n-\n-func _selects() {\n-\tselect {}\n-\tvar (\n-\t\tch chan int\n-\t\tsc chan <- bool\n-\t\tx int\n-\t)\n-\tselect {\n-\tcase <-ch:\n-\t\tch <- x\n-\tcase t, ok := <-ch:\n-\t\tx = t\n-\tcase <-sc /* ERROR \"cannot receive from send-only channel\" */ :\n-\t}\n-\tselect {\n-\tdefault:\n-\tdefault /* ERROR \"multiple defaults\" */ :\n-\t}\n-}\n-\n-func _gos() {\n-\tgo 1 /* ERROR \"expected function/method call\" */\n-\tgo _gos()\n-\tvar c chan int\n-\tgo close(c)\n-\tgo len(c) // TODO(gri) this should not be legal\n-}\n-\n-func _defers() {\n-\tdefer 1 /* ERROR \"expected function/method call\" */\n-\tdefer _defers()\n-\tvar c chan int\n-\tdefer close(c)\n-\tdefer len(c) // TODO(gri) this should not be legal\n-}\n-\n-func _switches() {\n-\tvar x int\n-\n-\tswitch x {\n-\tdefault:\n-\tdefault /* ERROR \"multiple defaults\" */ :\n-\t}\n-\n-\tswitch {\n-\tcase 1  /* ERROR \"cannot convert\" */ :\n-\t}\n-\n-\tswitch int32(x) {\n-\tcase 1, 2:\n-\tcase x /* ERROR \"cannot compare\" */ :\n-\t}\n-\n-\tswitch x {\n-\tcase 1 /* ERROR \"overflows int\" */ << 100:\n-\t}\n-\n-\tswitch x {\n-\tcase 1:\n-\tcase 1 /* ERROR \"duplicate case\" */ :\n-\tcase 2, 3, 4:\n-\tcase 1 /* ERROR \"duplicate case\" */ :\n-\t}\n-\n-\t// TODO(gri) duplicate 64bit values that don't fit into an int64 are not yet detected\n-\tswitch uint64(x) {\n-\tcase 1<<64-1:\n-\tcase 1<<64-1:\n-\t}\n-}\n-\n-type I interface {\n-\tm()\n-}\n-\n-type I2 interface {\n-\tm(int)\n-}\n-\n-type T struct{}\n-type T1 struct{}\n-type T2 struct{}\n-\n-func (T) m() {}\n-func (T2) m(int) {}\n-\n-func _typeswitches() {\n-\tvar i int\n-\tvar x interface{}\n-\n-\tswitch x.(type) {}\n-\tswitch (x /* ERROR \"outside type switch\" */ .(type)) {}\n-\n-\tswitch x.(type) {\n-\tdefault:\n-\tdefault /* ERROR \"multiple defaults\" */ :\n-\t}\n-\n-\tswitch x := x.(type) {}\n-\n-\tswitch x := x.(type) {\n-\tcase int:\n-\t\tvar y int = x\n-\t}\n-\n-\tswitch x := i /* ERROR \"not an interface\" */ .(type) {}\n-\n-\tswitch t := x.(type) {\n-\tcase nil:\n-\t\tvar v bool = t /* ERROR \"cannot assign\" */\n-\tcase int:\n-\t\tvar v int = t\n-\tcase float32, complex64:\n-\t\tvar v float32 = t /* ERROR \"cannot assign\" */\n-\tdefault:\n-\t\tvar v float32 = t /* ERROR \"cannot assign\" */\n-\t}\n-\n-\tvar t I\n-\tswitch t.(type) {\n-\tcase T:\n-\tcase T1 /* ERROR \"missing method m\" */ :\n-\tcase T2 /* ERROR \"wrong type for method m\" */ :\n-\tcase I2 /* ERROR \"wrong type for method m\" */ :\n-\t}\n-}\n-\n-func _rangeloops() {\n-\tvar (\n-\t\tx int\n-\t\ta [10]float32\n-\t\tb []string\n-\t\tp *[10]complex128\n-\t\tpp **[10]complex128\n-\t\ts string\n-\t\tm map[int]bool\n-\t\tc chan int\n-\t\tsc chan<- int\n-\t\trc <-chan int\n-\t)\n-\n-\tfor _ = range x /* ERROR \"cannot range over\" */ {}\n-\tfor i := range x /* ERROR \"cannot range over\" */ {}\n-\n-\tfor i := range a {\n-\t\tvar ii int\n-\t\tii = i\n-\t}\n-\tfor i, x := range a {\n-\t\tvar ii int\n-\t\tii = i\n-\t\tvar xx float64\n-\t\txx = x /* ERROR \"cannot assign\" */\n-\t}\n-\tvar ii int\n-\tvar xx float32\n-\tfor ii, xx := range a {}\n-\n-\tfor i := range b {\n-\t\tvar ii int\n-\t\tii = i\n-\t}\n-\tfor i, x := range b {\n-\t\tvar ii int\n-\t\tii = i\n-\t\tvar xx string\n-\t\txx = x\n-\t}\n-\n-\tfor i := range s {\n-\t\tvar ii int\n-\t\tii = i\n-\t}\n-\tfor i, x := range s {\n-\t\tvar ii int\n-\t\tii = i\n-\t\tvar xx rune\n-\t\txx = x\n-\t}\n-\n-\tfor _, x := range p {\n-\t\tvar xx complex128\n-\t\txx = x\n-\t}\n-\n-\tfor _, x := range pp /* ERROR \"cannot range over\" */ {}\n-\n-\tfor k := range m {\n-\t\tvar kk int32\n-\t\tkk = k /* ERROR \"cannot assign\" */\n-\t}\n-\tfor k, v := range m {\n-\t\tvar kk int\n-\t\tkk = k\n-\t\tif v {}\n-\t}\n-\n-\tfor _, _ /* ERROR \"only one iteration variable\" */ = range c {}\n-\tfor e := range c {\n-\t\tvar ee int\n-\t\tee = e\n-\t}\n-\tfor _ = range sc /* ERROR \"cannot range over send-only channel\" */ {}\n-\tfor _ = range rc {}\n-\n-\t// constant strings\n-\tconst cs = \"foo\"\n-\tfor i, x := range cs {}\n-\tfor i, x := range \"\" {\n-\t\tvar ii int\n-\t\tii = i\n-\t\tvar xx rune\n-\t\txx = x\n-\t}\n-}\n\\ No newline at end of file"}]}