{"sha": "0e3438689a6ffc4851ba8162306e5a1709b3b905", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUzNDM4Njg5YTZmZmM0ODUxYmE4MTYyMzA2ZTVhMTcwOWIzYjkwNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-01-25T20:51:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-01-25T20:51:10Z"}, "message": "re PR c++/77914 (Wrong lambda definition accepted)\n\n\tPR c++/77914\n\t* parser.c (cp_parser_lambda_declarator_opt): Pedwarn with\n\tOPT_Wpedantic on lambda templates for -std=c++14 and higher.\n\n\t* g++.dg/cpp1y/lambda-generic-77914.C: New test.\n\t* g++.dg/cpp1y/lambda-generic-dep.C: Add -pedantic to dg-options,\n\texpect a warning.\n\t* g++.dg/cpp1y/lambda-generic-x.C: Add -Wpedantic to dg-options,\n\texpect warnings.\n\t* g++.dg/cpp1y/lambda-generic-mixed.C: Add empty dg-options.\n\t* g++.dg/cpp1y/pr59636.C: Likewise.\n\t* g++.dg/cpp1y/pr60190.C: Likewise.\n\nFrom-SVN: r244907", "tree": {"sha": "f2650b34e22820c5d245ad9ef44382fa36501c9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2650b34e22820c5d245ad9ef44382fa36501c9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e3438689a6ffc4851ba8162306e5a1709b3b905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3438689a6ffc4851ba8162306e5a1709b3b905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e3438689a6ffc4851ba8162306e5a1709b3b905", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3438689a6ffc4851ba8162306e5a1709b3b905/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d098f4ba1e41740223fe0b5f79462c42703c30b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d098f4ba1e41740223fe0b5f79462c42703c30b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d098f4ba1e41740223fe0b5f79462c42703c30b"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "dc098b2a723b76bf780731b4cc7b9986f3c50695", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0e3438689a6ffc4851ba8162306e5a1709b3b905", "patch": "@@ -1,3 +1,9 @@\n+2017-01-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/77914\n+\t* parser.c (cp_parser_lambda_declarator_opt): Pedwarn with\n+\tOPT_Wpedantic on lambda templates for -std=c++14 and higher.\n+\n 2017-01-25  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \tPR lto/79061"}, {"sha": "372a01e147a3fa5ab6d1ccf1caa89801aab85119", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0e3438689a6ffc4851ba8162306e5a1709b3b905", "patch": "@@ -10174,6 +10174,9 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \tpedwarn (parser->lexer->next_token->location, 0,\n \t\t \"lambda templates are only available with \"\n \t\t \"-std=c++14 or -std=gnu++14\");\n+      else\n+\tpedwarn (parser->lexer->next_token->location, OPT_Wpedantic,\n+\t\t \"ISO C++ does not support lambda templates\");\n \n       cp_lexer_consume_token (parser->lexer);\n "}, {"sha": "e82fb4c94555e899d838ee092fd0269813506766", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0e3438689a6ffc4851ba8162306e5a1709b3b905", "patch": "@@ -1,3 +1,15 @@\n+2017-01-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/77914\n+\t* g++.dg/cpp1y/lambda-generic-77914.C: New test.\n+\t* g++.dg/cpp1y/lambda-generic-dep.C: Add -pedantic to dg-options,\n+\texpect a warning.\n+\t* g++.dg/cpp1y/lambda-generic-x.C: Add -Wpedantic to dg-options,\n+\texpect warnings.\n+\t* g++.dg/cpp1y/lambda-generic-mixed.C: Add empty dg-options.\n+\t* g++.dg/cpp1y/pr59636.C: Likewise.\n+\t* g++.dg/cpp1y/pr60190.C: Likewise.\n+\n 2017-01-25  Bin Cheng  <bin.cheng@arm.com>\n \n \t* gcc.dg/vect/vect-24.c: Remove xfail on ARM targets."}, {"sha": "d069c33c93d1baa4e4168621581ed08e39e10460", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-77914.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-77914.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-77914.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-77914.C?ref=0e3438689a6ffc4851ba8162306e5a1709b3b905", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/77914\n+// { dg-do compile { target c++14 } }\n+\n+int\n+main ()\n+{\n+  auto l = [] <typename T> () {};\t// { dg-error \"does not support lambda templates\" }\n+  l.operator () <void> ();\n+}"}, {"sha": "c66d393d6b4e21f3fa61ddca58267a1341af0c58", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-dep.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-dep.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-dep.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-dep.C?ref=0e3438689a6ffc4851ba8162306e5a1709b3b905", "patch": "@@ -1,5 +1,6 @@\n // Generic lambda type dependence test part from N3690 5.1.2.12\n // { dg-do compile { target c++14 } }\n+// { dg-options \"-pedantic\" }\n \n void f(int, const int (&)[2] = {}) { } // #1\n void f(const int&, const int (&)[1]) { } // #2\n@@ -26,7 +27,7 @@ struct S {\n \n int main()\n {\n-  auto f = [] <typename T> (T const& s) mutable {\n+  auto f = [] <typename T> (T const& s) mutable {\t// { dg-warning \"does not support lambda templates\" }\n     typename T::N x;\n     return x.test ();\n   };"}, {"sha": "aa9682478199b00bdad858b8c7ac0d6c268906f2", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-mixed.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-mixed.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-mixed.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-mixed.C?ref=0e3438689a6ffc4851ba8162306e5a1709b3b905", "patch": "@@ -1,5 +1,6 @@\n // Mixed explicit and implicit generic lambda test.\n // { dg-do compile { target c++14 } }\n+// { dg-options \"\" }\n \n int main()\n {"}, {"sha": "b37a6147526ac60a86a94dea110ca3374a6421f5", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-x.C", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-x.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-x.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-x.C?ref=0e3438689a6ffc4851ba8162306e5a1709b3b905", "patch": "@@ -1,21 +1,22 @@\n // Explicit generic lambda test from N3690 5.1.2.5\n // { dg-do compile { target c++14 } }\n+// { dg-options \"-Wpedantic\" }\n \n #include <iostream>\n \n int main()\n {\n-   auto glambda = [] <typename A, typename B> (A a, B&& b) { return a < b; };\n+   auto glambda = [] <typename A, typename B> (A a, B&& b) { return a < b; };\t// { dg-warning \"does not support lambda templates\" }\n    bool b = glambda(3, 3.14); // OK\n-   auto vglambda = [] <typename P> (P printer) {\n+   auto vglambda = [] <typename P> (P printer) {\t\t\t\t// { dg-warning \"does not support lambda templates\" }\n      return [=] <typename... T> (T&& ... ts) { // OK: ts is a function parameter pack\n-       printer(std::forward<decltype(ts)>(ts)...);\n+       printer(std::forward<decltype(ts)>(ts)...);\t\t\t\t// { dg-warning \"does not support lambda templates\" \"\" { target *-*-* } .-1 }\n        return [=]() {\n          printer(ts ...);\n        };\n      };\n    };\n-   auto p = vglambda( [] <typename A,\n+   auto p = vglambda( [] <typename A,\t\t\t\t\t\t// { dg-warning \"does not support lambda templates\" }\n                           typename B,\n                           typename C> (A v1, B v2, C v3)\n      { std::cout << v1 << v2 << v3; } );"}, {"sha": "271491ee23cdabf3577b714e6e547f0ec7dcc8fc", "filename": "gcc/testsuite/g++.dg/cpp1y/pr59636.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59636.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59636.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr59636.C?ref=0e3438689a6ffc4851ba8162306e5a1709b3b905", "patch": "@@ -1,4 +1,5 @@\n // PR c++/59636\n // { dg-do compile { target c++14 } }\n+// { dg-options \"\" }\n \n auto f = []() { return []<>() {}; };  // { dg-error \"expected identifier\" }"}, {"sha": "f2d1bbf61126661275dd65769f65c1ca77c3d1df", "filename": "gcc/testsuite/g++.dg/cpp1y/pr60190.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60190.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3438689a6ffc4851ba8162306e5a1709b3b905/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60190.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr60190.C?ref=0e3438689a6ffc4851ba8162306e5a1709b3b905", "patch": "@@ -1,4 +1,5 @@\n // PR c++/60190\n // { dg-do compile { target c++14 } }\n+// { dg-options \"\" }\n \n auto f = []<int>() -> int() {}; // { dg-error \"returning a function|expected\" }"}]}