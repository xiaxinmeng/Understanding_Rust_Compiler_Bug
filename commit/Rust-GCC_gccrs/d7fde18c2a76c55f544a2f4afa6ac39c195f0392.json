{"sha": "d7fde18c2a76c55f544a2f4afa6ac39c195f0392", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdmZGUxOGMyYTc2YzU1ZjU0NGEyZjRhZmE2YWMzOWMxOTVmMDM5Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-02-21T21:28:03Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-21T21:28:03Z"}, "message": "re PR rtl-optimization/50339 (suboptimal register allocation for abs(__int128_t))\n\n\tPR rtl-optimization/50339\n\t* lower-subreg.h (struct lower_subreg_choices): Add splitting_ashiftrt\n\tfield.\n\t* lower-subreg.c (compute_splitting_shift): Handle ASHIFTRT.\n\t(compute_costs): Call compute_splitting_shift also for ASHIFTRT\n\tinto splitting_ashiftrt field.\n\t(find_decomposable_shift_zext, resolve_shift_zext): Handle also\n\tASHIFTRT.\n\t(dump_choices): Fix up printing LSHIFTRT choices, print ASHIFTRT\n\tchoices.\n\nFrom-SVN: r196214", "tree": {"sha": "9cb1c904450cc59578754dc59ceb7a22a2090f50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cb1c904450cc59578754dc59ceb7a22a2090f50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7fde18c2a76c55f544a2f4afa6ac39c195f0392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7fde18c2a76c55f544a2f4afa6ac39c195f0392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7fde18c2a76c55f544a2f4afa6ac39c195f0392", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7fde18c2a76c55f544a2f4afa6ac39c195f0392/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6aad44556a2d6ad1ec10491944eaf42ee4671b23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aad44556a2d6ad1ec10491944eaf42ee4671b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aad44556a2d6ad1ec10491944eaf42ee4671b23"}], "stats": {"total": 70, "additions": 55, "deletions": 15}, "files": [{"sha": "5cd6c35856244d88f94c1895f531e73f65b136d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fde18c2a76c55f544a2f4afa6ac39c195f0392/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fde18c2a76c55f544a2f4afa6ac39c195f0392/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7fde18c2a76c55f544a2f4afa6ac39c195f0392", "patch": "@@ -1,3 +1,16 @@\n+2013-02-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/50339\n+\t* lower-subreg.h (struct lower_subreg_choices): Add splitting_ashiftrt\n+\tfield.\n+\t* lower-subreg.c (compute_splitting_shift): Handle ASHIFTRT.\n+\t(compute_costs): Call compute_splitting_shift also for ASHIFTRT\n+\tinto splitting_ashiftrt field.\n+\t(find_decomposable_shift_zext, resolve_shift_zext): Handle also\n+\tASHIFTRT.\n+\t(dump_choices): Fix up printing LSHIFTRT choices, print ASHIFTRT\n+\tchoices.\n+\n 2013-02-20  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR middle-end/56108"}, {"sha": "05927e13b0834c0559d76473414bbfb1a6a9ec94", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fde18c2a76c55f544a2f4afa6ac39c195f0392/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fde18c2a76c55f544a2f4afa6ac39c195f0392/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=d7fde18c2a76c55f544a2f4afa6ac39c195f0392", "patch": "@@ -57,9 +57,9 @@ along with GCC; see the file COPYING3.  If not see\n    to do this.\n \n    This pass only splits moves with modes that are wider than\n-   word_mode and ASHIFTs, LSHIFTRTs and ZERO_EXTENDs with integer\n-   modes that are twice the width of word_mode.  The latter could be\n-   generalized if there was a need to do this, but the trend in\n+   word_mode and ASHIFTs, LSHIFTRTs, ASHIFTRTs and ZERO_EXTENDs with\n+   integer modes that are twice the width of word_mode.  The latter\n+   could be generalized if there was a need to do this, but the trend in\n    architectures is to not need this.\n \n    There are two useful preprocessor defines for use by maintainers:\n@@ -152,7 +152,7 @@ compute_splitting_shift (bool speed_p, struct cost_rtxes *rtxes,\n \t\t\t bool *splitting, enum rtx_code code,\n \t\t\t int word_move_zero_cost, int word_move_cost)\n {\n-  int wide_cost, narrow_cost, i;\n+  int wide_cost, narrow_cost, upper_cost, i;\n \n   for (i = 0; i < BITS_PER_WORD; i++)\n     {\n@@ -163,13 +163,20 @@ compute_splitting_shift (bool speed_p, struct cost_rtxes *rtxes,\n       else\n \tnarrow_cost = shift_cost (speed_p, rtxes, code, word_mode, i);\n \n+      if (code != ASHIFTRT)\n+\tupper_cost = word_move_zero_cost;\n+      else if (i == BITS_PER_WORD - 1)\n+\tupper_cost = word_move_cost;\n+      else\n+\tupper_cost = shift_cost (speed_p, rtxes, code, word_mode,\n+\t\t\t\t BITS_PER_WORD - 1);\n+\n       if (LOG_COSTS)\n \tfprintf (stderr, \"%s %s by %d: original cost %d, split cost %d + %d\\n\",\n \t\t GET_MODE_NAME (twice_word_mode), GET_RTX_NAME (code),\n-\t\t i + BITS_PER_WORD, wide_cost, narrow_cost,\n-\t\t word_move_zero_cost);\n+\t\t i + BITS_PER_WORD, wide_cost, narrow_cost, upper_cost);\n \n-      if (FORCE_LOWERING || wide_cost >= narrow_cost + word_move_zero_cost)\n+      if (FORCE_LOWERING || wide_cost >= narrow_cost + upper_cost)\n \tsplitting[i] = true;\n     }\n }\n@@ -248,6 +255,9 @@ compute_costs (bool speed_p, struct cost_rtxes *rtxes)\n       compute_splitting_shift (speed_p, rtxes,\n \t\t\t       choices[speed_p].splitting_lshiftrt, LSHIFTRT,\n \t\t\t       word_move_zero_cost, word_move_cost);\n+      compute_splitting_shift (speed_p, rtxes,\n+\t\t\t       choices[speed_p].splitting_ashiftrt, ASHIFTRT,\n+\t\t\t       word_move_zero_cost, word_move_cost);\n     }\n }\n \n@@ -1153,6 +1163,7 @@ find_decomposable_shift_zext (rtx insn, bool speed_p)\n   op = SET_SRC (set);\n   if (GET_CODE (op) != ASHIFT\n       && GET_CODE (op) != LSHIFTRT\n+      && GET_CODE (op) != ASHIFTRT\n       && GET_CODE (op) != ZERO_EXTEND)\n     return false;\n \n@@ -1173,6 +1184,8 @@ find_decomposable_shift_zext (rtx insn, bool speed_p)\n     {\n       bool *splitting = (GET_CODE (op) == ASHIFT\n \t\t\t ? choices[speed_p].splitting_ashift\n+\t\t\t : GET_CODE (op) == ASHIFTRT\n+\t\t\t ? choices[speed_p].splitting_ashiftrt\n \t\t\t : choices[speed_p].splitting_lshiftrt);\n       if (!CONST_INT_P (XEXP (op, 1))\n \t  || !IN_RANGE (INTVAL (XEXP (op, 1)), BITS_PER_WORD,\n@@ -1200,7 +1213,7 @@ resolve_shift_zext (rtx insn)\n   rtx op;\n   rtx op_operand;\n   rtx insns;\n-  rtx src_reg, dest_reg, dest_zero;\n+  rtx src_reg, dest_reg, dest_upper, upper_src = NULL_RTX;\n   int src_reg_num, dest_reg_num, offset1, offset2, src_offset;\n \n   set = single_set (insn);\n@@ -1210,6 +1223,7 @@ resolve_shift_zext (rtx insn)\n   op = SET_SRC (set);\n   if (GET_CODE (op) != ASHIFT\n       && GET_CODE (op) != LSHIFTRT\n+      && GET_CODE (op) != ASHIFTRT\n       && GET_CODE (op) != ZERO_EXTEND)\n     return NULL_RTX;\n \n@@ -1223,7 +1237,8 @@ resolve_shift_zext (rtx insn)\n   /* src_reg_num is the number of the word mode register which we\n      are operating on.  For a left shift and a zero_extend on little\n      endian machines this is register 0.  */\n-  src_reg_num = GET_CODE (op) == LSHIFTRT ? 1 : 0;\n+  src_reg_num = (GET_CODE (op) == LSHIFTRT || GET_CODE (op) == ASHIFTRT)\n+\t\t? 1 : 0;\n \n   if (WORDS_BIG_ENDIAN\n       && GET_MODE_SIZE (GET_MODE (op_operand)) > UNITS_PER_WORD)\n@@ -1243,12 +1258,17 @@ resolve_shift_zext (rtx insn)\n   dest_reg = simplify_gen_subreg_concatn (word_mode, SET_DEST (set),\n                                           GET_MODE (SET_DEST (set)),\n                                           offset1);\n-  dest_zero = simplify_gen_subreg_concatn (word_mode, SET_DEST (set),\n-                                           GET_MODE (SET_DEST (set)),\n-                                           offset2);\n+  dest_upper = simplify_gen_subreg_concatn (word_mode, SET_DEST (set),\n+\t\t\t\t\t    GET_MODE (SET_DEST (set)),\n+\t\t\t\t\t    offset2);\n   src_reg = simplify_gen_subreg_concatn (word_mode, op_operand,\n                                          GET_MODE (op_operand),\n                                          src_offset);\n+  if (GET_CODE (op) == ASHIFTRT\n+      && INTVAL (XEXP (op, 1)) != 2 * BITS_PER_WORD - 1)\n+    upper_src = expand_shift (RSHIFT_EXPR, word_mode, copy_rtx (src_reg),\n+\t\t\t      BITS_PER_WORD - 1, NULL_RTX, 0);\n+\n   if (GET_CODE (op) != ZERO_EXTEND)\n     {\n       int shift_count = INTVAL (XEXP (op, 1));\n@@ -1257,12 +1277,17 @@ resolve_shift_zext (rtx insn)\n \t\t\t\tLSHIFT_EXPR : RSHIFT_EXPR,\n \t\t\t\tword_mode, src_reg,\n \t\t\t\tshift_count - BITS_PER_WORD,\n-\t\t\t\tdest_reg, 1);\n+\t\t\t\tdest_reg, GET_CODE (op) != ASHIFTRT);\n     }\n \n   if (dest_reg != src_reg)\n     emit_move_insn (dest_reg, src_reg);\n-  emit_move_insn (dest_zero, CONST0_RTX (word_mode));\n+  if (GET_CODE (op) != ASHIFTRT)\n+    emit_move_insn (dest_upper, CONST0_RTX (word_mode));\n+  else if (INTVAL (XEXP (op, 1)) == 2 * BITS_PER_WORD - 1)\n+    emit_move_insn (dest_upper, copy_rtx (src_reg));\n+  else\n+    emit_move_insn (dest_upper, upper_src);\n   insns = get_insns ();\n \n   end_sequence ();\n@@ -1328,7 +1353,8 @@ dump_choices (bool speed_p, const char *description)\n \t   GET_MODE_NAME (twice_word_mode));\n \n   dump_shift_choices (ASHIFT, choices[speed_p].splitting_ashift);\n-  dump_shift_choices (LSHIFTRT, choices[speed_p].splitting_ashift);\n+  dump_shift_choices (LSHIFTRT, choices[speed_p].splitting_lshiftrt);\n+  dump_shift_choices (ASHIFTRT, choices[speed_p].splitting_ashiftrt);\n   fprintf (dump_file, \"\\n\");\n }\n "}, {"sha": "16c48bf8cd89e21b6a90b2cbd9b2018174fb70fa", "filename": "gcc/lower-subreg.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7fde18c2a76c55f544a2f4afa6ac39c195f0392/gcc%2Flower-subreg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7fde18c2a76c55f544a2f4afa6ac39c195f0392/gcc%2Flower-subreg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.h?ref=d7fde18c2a76c55f544a2f4afa6ac39c195f0392", "patch": "@@ -34,6 +34,7 @@ struct lower_subreg_choices {\n      should be split.  */\n   bool splitting_ashift[MAX_BITS_PER_WORD];\n   bool splitting_lshiftrt[MAX_BITS_PER_WORD];\n+  bool splitting_ashiftrt[MAX_BITS_PER_WORD];\n \n   /* True if there is at least one mode that is worth splitting.  */\n   bool something_to_do;"}]}