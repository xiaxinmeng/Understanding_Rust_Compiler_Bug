{"sha": "ec8465a533a6effe46dd5d38fb7dbf387b49070c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM4NDY1YTUzM2E2ZWZmZTQ2ZGQ1ZDM4ZmI3ZGJmMzg3YjQ5MDcwYw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-09-01T20:09:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-09-01T20:09:16Z"}, "message": "re PR c/15224 (Attribute mode causes ICE when applied to enums)\n\n\tPR c/15224\n\t* c-common.c (handle_mode_attribute): Handle ENUMERAL_TYPE.\n\t* c-decl.c (finish_enum): Check for user-specified precision too small.\n\nFrom-SVN: r86926", "tree": {"sha": "bdb6b395dfaadacd9548f86bc3c6b1b0d26c4d91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdb6b395dfaadacd9548f86bc3c6b1b0d26c4d91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec8465a533a6effe46dd5d38fb7dbf387b49070c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec8465a533a6effe46dd5d38fb7dbf387b49070c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec8465a533a6effe46dd5d38fb7dbf387b49070c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec8465a533a6effe46dd5d38fb7dbf387b49070c/comments", "author": null, "committer": null, "parents": [{"sha": "938e234bf9b4cccdf687338243b690938c0aa795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938e234bf9b4cccdf687338243b690938c0aa795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/938e234bf9b4cccdf687338243b690938c0aa795"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "499829bd0e38c46670a4f1cae0dcd891601a16bc", "filename": "gcc/c-common.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8465a533a6effe46dd5d38fb7dbf387b49070c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8465a533a6effe46dd5d38fb7dbf387b49070c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ec8465a533a6effe46dd5d38fb7dbf387b49070c", "patch": "@@ -4351,11 +4351,29 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \t}\n       else\n         typefm = lang_hooks.types.type_for_mode (mode, TYPE_UNSIGNED (type));\n+\n       if (typefm == NULL_TREE)\n \t{\n \t  error (\"no data type for mode %<%s%>\", p);\n \t  return NULL_TREE;\n \t}\n+      else if (TREE_CODE (type) == ENUMERAL_TYPE)\n+\t{\n+\t  /* For enumeral types, copy the precision from the integer\n+\t     type returned above.  If not an INTEGER_TYPE, we can't use\n+\t     this mode for this type.  */\n+\t  if (TREE_CODE (typefm) != INTEGER_TYPE)\n+\t    {\n+\t      error (\"cannot use mode '%s' for enumeral types\",\n+\t\t     GET_MODE_NAME (mode));\n+\t      return NULL_TREE;\n+\t    }\n+\n+\t  if (!(flags & (int) ATTR_FLAG_TYPE_IN_PLACE))\n+\t    type = build_variant_type_copy (type);\n+\t  TYPE_PRECISION (type) = TYPE_PRECISION (typefm);\n+\t  typefm = type;\n+\t}\n       *node = typefm;\n \n       /* No need to layout the type here.  The caller should do this.  */"}, {"sha": "48f9813f22bb142cdf533df7d435ab3d4fd972e5", "filename": "gcc/c-decl.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec8465a533a6effe46dd5d38fb7dbf387b49070c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec8465a533a6effe46dd5d38fb7dbf387b49070c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ec8465a533a6effe46dd5d38fb7dbf387b49070c", "patch": "@@ -5760,6 +5760,7 @@ finish_enum (tree enumtype, tree values, tree attributes)\n   unsign = (tree_int_cst_sgn (minnode) >= 0);\n   precision = MAX (min_precision (minnode, unsign),\n \t\t   min_precision (maxnode, unsign));\n+\n   if (TYPE_PACKED (enumtype) || precision > TYPE_PRECISION (integer_type_node))\n     {\n       tem = c_common_type_for_size (precision, unsign);\n@@ -5774,9 +5775,19 @@ finish_enum (tree enumtype, tree values, tree attributes)\n \n   TYPE_MIN_VALUE (enumtype) = TYPE_MIN_VALUE (tem);\n   TYPE_MAX_VALUE (enumtype) = TYPE_MAX_VALUE (tem);\n-  TYPE_PRECISION (enumtype) = TYPE_PRECISION (tem);\n   TYPE_UNSIGNED (enumtype) = TYPE_UNSIGNED (tem);\n   TYPE_SIZE (enumtype) = 0;\n+\n+  /* If the precision of the type was specific with an attribute and it\n+     was too small, give an error.  Otherwise, use it.  */\n+  if (TYPE_PRECISION (enumtype))\n+    {\n+      if (precision > TYPE_PRECISION (enumtype))\n+\terror (\"specified mode too small for enumeral values\");\n+    }\n+  else\n+    TYPE_PRECISION (enumtype) = TYPE_PRECISION (tem);\n+\n   layout_type (enumtype);\n \n   if (values != error_mark_node)"}]}