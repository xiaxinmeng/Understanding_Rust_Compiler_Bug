{"sha": "fb1bf66d61d4ca57367230000babd5ab9c50b6c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIxYmY2NmQ2MWQ0Y2E1NzM2NzIzMDAwMGJhYmQ1YWI5YzUwYjZjMQ==", "commit": {"author": {"name": "Gavin Romig-Koch", "email": "gavin@cygnus.com", "date": "1999-03-16T07:25:31Z"}, "committer": {"name": "Gavin Romig-Koch", "email": "gavin@gcc.gnu.org", "date": "1999-03-16T07:25:31Z"}, "message": "iris.h (CTORS_SECTION_ASM_OP,DTORS_SECTION_ASM_OP, [...]): Use Pmode == DImode rather than TARGET_LONG64.\n\n\t* config/mips/iris.h (CTORS_SECTION_ASM_OP,DTORS_SECTION_ASM_OP,\n\tdtors_section): Use Pmode == DImode rather than TARGET_LONG64.\n\t* config/mips/mips.c (override_options): Allow -mlong64 and\n\t-mint64 with -mips2 or less.\n\t* config/mips/mips.h (MASK_LONG64): Fix comment.\n\t(POINTER_SIZE): Use Pmode == DImode rather than TARGET_LONG64.\n\t(Pmode): Make Pmode the smaller of longs or gp registers.\n\t* invoke.texi: Note the new size for pointers.\n\nFrom-SVN: r25798", "tree": {"sha": "e615d0f3f80e5164dd0c8c28416a04e0245726f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e615d0f3f80e5164dd0c8c28416a04e0245726f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb1bf66d61d4ca57367230000babd5ab9c50b6c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb1bf66d61d4ca57367230000babd5ab9c50b6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb1bf66d61d4ca57367230000babd5ab9c50b6c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb1bf66d61d4ca57367230000babd5ab9c50b6c1/comments", "author": null, "committer": null, "parents": [{"sha": "642f15d187811ecd3bb831ec61cc55c196f35b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642f15d187811ecd3bb831ec61cc55c196f35b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/642f15d187811ecd3bb831ec61cc55c196f35b57"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "30f285519ccccfc00e4c25c61648cb323aabd347", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1bf66d61d4ca57367230000babd5ab9c50b6c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1bf66d61d4ca57367230000babd5ab9c50b6c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb1bf66d61d4ca57367230000babd5ab9c50b6c1", "patch": "@@ -1,3 +1,14 @@\n+Tue Mar 16 10:22:22 1999  Gavin Romig-Koch  <gavin@cygnus.com>\n+\n+\t* config/mips/iris.h (CTORS_SECTION_ASM_OP,DTORS_SECTION_ASM_OP,\n+\tdtors_section): Use Pmode == DImode rather than TARGET_LONG64.\n+\t* config/mips/mips.c (override_options): Allow -mlong64 and\n+\t-mint64 with -mips2 or less.\n+\t* config/mips/mips.h (MASK_LONG64): Fix comment.\n+\t(POINTER_SIZE): Use Pmode == DImode rather than TARGET_LONG64.\n+\t(Pmode): Make Pmode the smaller of longs or gp registers.\n+\t* invoke.texi: Note the new size for pointers.\n+\n Mon Mar 15 22:45:25 1999  David Edelsohn  <edelsohn@mhpcc.edu>\n \n \t* rs6000.h (ASM_OUTPUT_{DOUBLE,FLOAT}): Always generate IEEE 754"}, {"sha": "9df7732e8b078a24d55dd634d1feee96b79c1166", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1bf66d61d4ca57367230000babd5ab9c50b6c1/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1bf66d61d4ca57367230000babd5ab9c50b6c1/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=fb1bf66d61d4ca57367230000babd5ab9c50b6c1", "patch": "@@ -263,9 +263,9 @@ Boston, MA 02111-1307, USA.  */\n \n /* If we are included from varasm.c, these need to depend on -mabi.  */\n #define CTORS_SECTION_ASM_OP \\\n-  (TARGET_LONG64 ? \".section\\t.ctors,1,2,0,8\" : \".section\\t.ctors,1,2,0,4\")\n+  (Pmode == DImode ? \".section\\t.ctors,1,2,0,8\" : \".section\\t.ctors,1,2,0,4\")\n #define DTORS_SECTION_ASM_OP \\\n-  (TARGET_LONG64 ? \".section\\t.dtors,1,2,0,8\" : \".section\\t.dtors,1,2,0,4\")\n+  (Pmode == DImode ? \".section\\t.dtors,1,2,0,8\" : \".section\\t.dtors,1,2,0,4\")\n #endif /* defined (CRT_BEGIN) || defined (CRT_END) */\n \n /* dwarf2out will handle padding this data properly.  We definitely don't\n@@ -341,7 +341,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     ctors_section ();\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t%s\\t \",\t\t\t\t\t\t\\\n-\t     TARGET_LONG64 ? \".dword\" : \".word\");\t\t\t\\\n+\t     (Pmode == DImode) ? \".dword\" : \".word\");\t\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)\n@@ -352,7 +352,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     dtors_section ();                   \t\t\t\t\\\n     fprintf (FILE, \"\\t%s\\t \",\t\t\t\t\t\t\\\n-\t     TARGET_LONG64 ? \".dword\" : \".word\");\t\t\t\\\n+\t     (Pmode == DImode) ? \".dword\" : \".word\");\t\t\t\\\n     assemble_name (FILE, NAME);              \t\t\t\t\\\n     fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n   } while (0)"}, {"sha": "569db0def34e6d402f26e48d1ecc647c4666a2bf", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1bf66d61d4ca57367230000babd5ab9c50b6c1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1bf66d61d4ca57367230000babd5ab9c50b6c1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fb1bf66d61d4ca57367230000babd5ab9c50b6c1", "patch": "@@ -4274,13 +4274,7 @@ override_options ()\n   /* make sure sizes of ints/longs/etc. are ok */\n   if (mips_isa < 3)\n     {\n-      if (TARGET_INT64)\n-\tfatal (\"Only MIPS-III or MIPS-IV CPUs can support 64 bit ints\");\n-\n-      else if (TARGET_LONG64)\n-\tfatal (\"Only MIPS-III or MIPS-IV CPUs can support 64 bit longs\");\n-\n-      else if (TARGET_FLOAT64)\n+      if (TARGET_FLOAT64)\n \tfatal (\"Only MIPS-III or MIPS-IV CPUs can support 64 bit fp registers\");\n \n       else if (TARGET_64BIT)"}, {"sha": "ea7174089b656cc9545da2a394568f7fad1a248e", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1bf66d61d4ca57367230000babd5ab9c50b6c1/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1bf66d61d4ca57367230000babd5ab9c50b6c1/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=fb1bf66d61d4ca57367230000babd5ab9c50b6c1", "patch": "@@ -315,7 +315,7 @@ extern void\t\tmips_select_section ();\n \n \t\t\t\t\t/* Bits for real switches */\n #define MASK_INT64\t0x00000001\t/* ints are 64 bits */\n-#define MASK_LONG64\t0x00000002\t/* longs and pointers are 64 bits */\n+#define MASK_LONG64\t0x00000002\t/* longs are 64 bits */\n #define MASK_SPLIT_ADDR\t0x00000004\t/* Address splitting is enabled.  */\n #define MASK_GPOPT\t0x00000008\t/* Optimize for global pointer */\n #define MASK_GAS\t0x00000010\t/* Gas used instead of MIPS as */\n@@ -1344,7 +1344,7 @@ do {\t\t\t\t\t\t\t\\\n /* Width in bits of a pointer.\n    See also the macro `Pmode' defined below.  */\n #ifndef POINTER_SIZE\n-#define POINTER_SIZE (TARGET_LONG64 ? 64 : 32)\n+#define POINTER_SIZE (Pmode == DImode ? 64 : 32)\n #endif\n \n /* Allocation boundary (in *bits*) for storing pointers in memory.  */\n@@ -3240,10 +3240,12 @@ while (0)\n \n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n-   between pointers and any other objects of this machine mode.  */\n+   between pointers and any other objects of this machine mode.\n+\n+   For MIPS we make pointers are the smaller of longs and gp-registers. */\n \n #ifndef Pmode\n-#define Pmode ((enum machine_mode)(TARGET_LONG64 ? DImode : SImode))\n+#define Pmode ((enum machine_mode)((TARGET_LONG64 && TARGET_64BIT) ? DImode : SImode))\n #endif\n \n /* A function address in a call instruction"}, {"sha": "d05ef37712618208840e8b69f6aa2e6f9e22e51b", "filename": "gcc/invoke.texi", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1bf66d61d4ca57367230000babd5ab9c50b6c1/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1bf66d61d4ca57367230000babd5ab9c50b6c1/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=fb1bf66d61d4ca57367230000babd5ab9c50b6c1", "patch": "@@ -4766,7 +4766,6 @@ ISA level.\n @item -mips3\n Issue instructions from level 3 of the MIPS ISA (64 bit instructions).\n @samp{r4000} is the default @var{cpu type} at this ISA level.\n-This option does not change the sizes of any of the C data types.\n \n @item -mips4\n Issue instructions from level 4 of the MIPS ISA.  @samp{r8000} is the\n@@ -4789,12 +4788,14 @@ Assume that 32 64-bit general purpose registers are available.  This is\n the default when the @samp{-mips3} option is used.\n \n @item -mint64\n-Types long, int, and pointer are 64 bits.  This works only if @samp{-mips3}\n-is also specified.\n+Force int and long types to be 64 bits wide.  See @samp{-mlong64} for an\n+explanation of the width of pointers.\n \n @item -mlong64\n-Types long and pointer are 64 bits, and type int is 32 bits.\n-This works only if @samp{-mips3} is also specified.\n+Force long types to be 64 bits wide.\n+\n+The width of pointer types is the smaller of the width of longs\n+or the width of general purpose registers.\n \n @itemx -mabi=32\n @itemx -mabi=n32"}]}