{"sha": "da80c6b81f6162937acea26d014063f772ae1305", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE4MGM2YjgxZjYxNjI5MzdhY2VhMjZkMDE0MDYzZjc3MmFlMTMwNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-05-13T15:02:26Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-05-13T15:02:26Z"}, "message": "alpha.c (alpha_emit_set_long_const): Remove c1 argument.\n\n\t* config/alpha/alpha.c (alpha_emit_set_long_const): Remove c1 argument.\n\t(alpha_extract_integer): Redeclare as static HOST_WIDE_INT.\n\tRemove *p0 and *p1 arguments.  Rewrite function.\n\t(alpha_legitimate_constant_p): Update call to alpha_extract_integer.\n\t(alpha_split_const_mov): Update calls to alpha_extract_integer and\n\talpha_emit_set_long_const.\n\t(alpha_expand_epilogue): Update calls to alpha_emit_set_long_const.\n\t(alpha_output_mi_thunk_osf): Ditto.\n\t* config/alpha/alpha.md (movti): Do not check operands[1]\n\tfor CONST_DOUBLE.\n\nFrom-SVN: r223166", "tree": {"sha": "ae62b49a87c6b8fc4ee99126db19e0786fa6f60e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae62b49a87c6b8fc4ee99126db19e0786fa6f60e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da80c6b81f6162937acea26d014063f772ae1305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da80c6b81f6162937acea26d014063f772ae1305", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da80c6b81f6162937acea26d014063f772ae1305", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da80c6b81f6162937acea26d014063f772ae1305/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ece8d4c77cb51f2ac719e7d5cdec740796c67b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ece8d4c77cb51f2ac719e7d5cdec740796c67b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ece8d4c77cb51f2ac719e7d5cdec740796c67b0"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "f0c5e750f502b81d32c82c1ce85c35172d1e01fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da80c6b81f6162937acea26d014063f772ae1305/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da80c6b81f6162937acea26d014063f772ae1305/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da80c6b81f6162937acea26d014063f772ae1305", "patch": "@@ -1,3 +1,16 @@\n+2015-05-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_emit_set_long_const): Remove c1 argument.\n+\t(alpha_extract_integer): Redeclare as static HOST_WIDE_INT.\n+\tRemove *p0 and *p1 arguments.  Rewrite function.\n+\t(alpha_legitimate_constant_p): Update call to alpha_extract_integer.\n+\t(alpha_split_const_mov): Update calls to alpha_extract_integer and\n+\talpha_emit_set_long_const.\n+\t(alpha_expand_epilogue): Update calls to alpha_emit_set_long_const.\n+\t(alpha_output_mi_thunk_osf): Ditto.\n+\t* config/alpha/alpha.md (movti): Do not check operands[1]\n+\tfor CONST_DOUBLE.\n+\n 2015-05-13  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66129"}, {"sha": "fb563fb01b103c15f05847dc2ed312a127b74f4b", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da80c6b81f6162937acea26d014063f772ae1305/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da80c6b81f6162937acea26d014063f772ae1305/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=da80c6b81f6162937acea26d014063f772ae1305", "patch": "@@ -2068,13 +2068,12 @@ alpha_emit_set_const (rtx target, machine_mode mode,\n    with alpha_emit_set_const.  */\n \n static rtx\n-alpha_emit_set_long_const (rtx target, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n+alpha_emit_set_long_const (rtx target, HOST_WIDE_INT c1)\n {\n   HOST_WIDE_INT d1, d2, d3, d4;\n \n   /* Decompose the entire word */\n \n-  gcc_assert (c2 == -(c1 < 0));\n   d1 = ((c1 & 0xffff) ^ 0x8000) - 0x8000;\n   c1 -= d1;\n   d2 = ((c1 & 0xffffffff) ^ 0x80000000) - 0x80000000;\n@@ -2109,25 +2108,23 @@ alpha_emit_set_long_const (rtx target, HOST_WIDE_INT c1, HOST_WIDE_INT c2)\n /* Given an integral CONST_INT, CONST_WIDE_INT, CONST_DOUBLE,\n    or CONST_VECTOR, return the low 64 bits.  */\n \n-static void\n-alpha_extract_integer (rtx x, HOST_WIDE_INT *p0, HOST_WIDE_INT *p1)\n+static HOST_WIDE_INT\n+alpha_extract_integer (rtx x)\n {\n-  HOST_WIDE_INT i0, i1;\n-\n   if (GET_CODE (x) == CONST_VECTOR)\n     x = simplify_subreg (DImode, x, GET_MODE (x), 0);\n \n-  if (CONST_INT_P (x))\n-    i0 = INTVAL (x);\n-  else if (CONST_WIDE_INT_P (x))\n-    i0 = CONST_WIDE_INT_ELT (x, 0);\n-  else\n-    i0 = CONST_DOUBLE_LOW (x);\n-\n-  i1 = -(i0 < 0);\n-      \n-  *p0 = i0;\n-  *p1 = i1;\n+  switch (GET_CODE (x))\n+    {\n+    case CONST_INT:\n+      return INTVAL (x);\n+    case CONST_WIDE_INT:\n+      return CONST_WIDE_INT_ELT (x, 0);\n+    case CONST_DOUBLE:\n+      return CONST_DOUBLE_LOW (x);\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n \n /* Implement TARGET_LEGITIMATE_CONSTANT_P.  This is all constants for which\n@@ -2138,7 +2135,7 @@ alpha_extract_integer (rtx x, HOST_WIDE_INT *p0, HOST_WIDE_INT *p1)\n bool\n alpha_legitimate_constant_p (machine_mode mode, rtx x)\n {\n-  HOST_WIDE_INT i0, i1;\n+  HOST_WIDE_INT i0;\n \n   switch (GET_CODE (x))\n     {\n@@ -2185,7 +2182,7 @@ alpha_legitimate_constant_p (machine_mode mode, rtx x)\n     do_integer:\n       if (TARGET_BUILD_CONSTANTS)\n \treturn true;\n-      alpha_extract_integer (x, &i0, &i1);\n+      i0 = alpha_extract_integer (x);\n       return alpha_emit_set_const_1 (x, mode, i0, 3, true) != NULL;\n \n     default:\n@@ -2199,15 +2196,15 @@ alpha_legitimate_constant_p (machine_mode mode, rtx x)\n bool\n alpha_split_const_mov (machine_mode mode, rtx *operands)\n {\n-  HOST_WIDE_INT i0, i1;\n+  HOST_WIDE_INT i0;\n   rtx temp = NULL_RTX;\n \n-  alpha_extract_integer (operands[1], &i0, &i1);\n+  i0 = alpha_extract_integer (operands[1]);\n \n   temp = alpha_emit_set_const (operands[0], mode, i0, 3, false);\n \n   if (!temp && TARGET_BUILD_CONSTANTS)\n-    temp = alpha_emit_set_long_const (operands[0], i0, i1);\n+    temp = alpha_emit_set_long_const (operands[0], i0);\n \n   if (temp)\n     {\n@@ -8260,8 +8257,7 @@ alpha_expand_epilogue (void)\n \t    {\n \t      /* We can't drop new things to memory this late, afaik,\n \t\t so build it up by pieces.  */\n-\t      sp_adj2 = alpha_emit_set_long_const (tmp, frame_size,\n-\t\t\t\t\t\t   -(frame_size < 0));\n+\t      sp_adj2 = alpha_emit_set_long_const (tmp, frame_size);\n \t      gcc_assert (sp_adj2);\n \t    }\n \t}\n@@ -8388,8 +8384,7 @@ alpha_output_mi_thunk_osf (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n     }\n   else\n     {\n-      rtx tmp = alpha_emit_set_long_const (gen_rtx_REG (Pmode, 0),\n-\t\t\t\t\t   delta, -(delta < 0));\n+      rtx tmp = alpha_emit_set_long_const (gen_rtx_REG (Pmode, 0), delta);\n       emit_insn (gen_adddi3 (this_rtx, this_rtx, tmp));\n     }\n \n@@ -8411,7 +8406,7 @@ alpha_output_mi_thunk_osf (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n       else\n \t{\n \t  tmp2 = alpha_emit_set_long_const (gen_rtx_REG (Pmode, 1),\n-\t\t\t\t\t    vcall_offset, -(vcall_offset < 0));\n+\t\t\t\t\t    vcall_offset);\n           emit_insn (gen_adddi3 (tmp, tmp, tmp2));\n \t  lo = 0;\n \t}"}, {"sha": "762080b15acdb6cb31d4866eac16fde478adbdb6", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da80c6b81f6162937acea26d014063f772ae1305/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da80c6b81f6162937acea26d014063f772ae1305/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=da80c6b81f6162937acea26d014063f772ae1305", "patch": "@@ -3867,7 +3867,7 @@\n     operands[1] = force_reg (TFmode, operands[1]);\n })\n \n-(define_insn_and_split \"*movtf\"\n+(define_insn_and_split \"*movtf_internal\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=r,o\")\n \t(match_operand:TF 1 \"input_operand\" \"roG,rG\"))]\n   \"register_operand (operands[0], TFmode)\n@@ -4154,8 +4154,7 @@\n      32-bit constants in TImode and rely on the splitter, but\n      this doesn't seem to be worth the pain.  */\n   else if (CONST_INT_P (operands[1])\n-\t   || GET_CODE (operands[1]) == CONST_WIDE_INT\n-\t   || GET_CODE (operands[1]) == CONST_DOUBLE)\n+\t   || GET_CODE (operands[1]) == CONST_WIDE_INT)\n     {\n       rtx in[2], out[2], target;\n "}]}