{"sha": "f368600fcd86f71c7bfc8a28f42434c539306da2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM2ODYwMGZjZDg2ZjcxYzdiZmM4YTI4ZjQyNDM0YzUzOTMwNmRhMg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-01-23T14:57:43Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-01-23T14:57:43Z"}, "message": "Fix strstr folding (PR tree-optimization/79196).\n\n2017-01-23  Martin Liska  <mliska@suse.cz>\n\n\tPR tree-optimization/79196\n\t* tree-ssa-strlen.c (fold_strstr_to_memcmp): Rename to ...\n\t(fold_strstr_to_strncmp): ... this.  Fold the pattern to strncmp\n\tinstead of memcmp.\n\t(strlen_optimize_stmt): Call the renamed function.\n2017-01-23  Martin Liska  <mliska@suse.cz>\n\n\tPR tree-optimization/79196\n\t* gcc.dg/asan/pr79196.c: New test.\n\t* gcc.dg/strlenopt-30.c: Update scanned pattern.\n\nFrom-SVN: r244812", "tree": {"sha": "bb8e8a1499c3766b40fb7df9c7365562bd7be70c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb8e8a1499c3766b40fb7df9c7365562bd7be70c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f368600fcd86f71c7bfc8a28f42434c539306da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f368600fcd86f71c7bfc8a28f42434c539306da2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f368600fcd86f71c7bfc8a28f42434c539306da2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f368600fcd86f71c7bfc8a28f42434c539306da2/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d886761fd048a6ad77dc7c927cbedfa503cfe01b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d886761fd048a6ad77dc7c927cbedfa503cfe01b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d886761fd048a6ad77dc7c927cbedfa503cfe01b"}], "stats": {"total": 69, "additions": 50, "deletions": 19}, "files": [{"sha": "577c5f47d080e26d3661302d656285534062fe70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f368600fcd86f71c7bfc8a28f42434c539306da2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f368600fcd86f71c7bfc8a28f42434c539306da2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f368600fcd86f71c7bfc8a28f42434c539306da2", "patch": "@@ -1,3 +1,11 @@\n+2017-01-23  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/79196\n+\t* tree-ssa-strlen.c (fold_strstr_to_memcmp): Rename to ...\n+\t(fold_strstr_to_strncmp): ... this.  Fold the pattern to strncmp\n+\tinstead of memcmp.\n+\t(strlen_optimize_stmt): Call the renamed function.\n+\n 2017-01-23  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/78384"}, {"sha": "9cc906c1977519afad58bd6f17b45b201eb677a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f368600fcd86f71c7bfc8a28f42434c539306da2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f368600fcd86f71c7bfc8a28f42434c539306da2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f368600fcd86f71c7bfc8a28f42434c539306da2", "patch": "@@ -1,3 +1,9 @@\n+2017-01-23  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/79196\n+\t* gcc.dg/asan/pr79196.c: New test.\n+\t* gcc.dg/strlenopt-30.c: Update scanned pattern.\n+\n 2017-01-23  Michael Matz  <matz@suse.de>\n \n \tPR tree-optimization/78384"}, {"sha": "66a31b90f305b6312f829bc1b86aae2d6265a19b", "filename": "gcc/testsuite/gcc.dg/asan/pr79196.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f368600fcd86f71c7bfc8a28f42434c539306da2/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr79196.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f368600fcd86f71c7bfc8a28f42434c539306da2/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr79196.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr79196.c?ref=f368600fcd86f71c7bfc8a28f42434c539306da2", "patch": "@@ -0,0 +1,17 @@\n+// PR tree-optimization/79196\n+// { dg-do run }\n+\n+int\n+__attribute__((noinline))\n+test(char *a)\n+{\n+  if (__builtin_strstr (a, \"DROP CONVERSION\") == a)\n+    return 1;\n+\n+  return 0;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  return test (\"x\");\n+}"}, {"sha": "a85df686ce2f68ea53970d5534bd0a69af7026bd", "filename": "gcc/testsuite/gcc.dg/strlenopt-30.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f368600fcd86f71c7bfc8a28f42434c539306da2/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f368600fcd86f71c7bfc8a28f42434c539306da2/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-30.c?ref=f368600fcd86f71c7bfc8a28f42434c539306da2", "patch": "@@ -60,4 +60,4 @@ _Bool f7(char *s)\n   return (t1 == s);\n }\n \n-/* { dg-final { scan-tree-dump-times \"__builtin_memcmp\" 5 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_strncmp\" 5 \"strlen\" } } */"}, {"sha": "141115ed12b3626ee82be2c592a72c99376d14dd", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f368600fcd86f71c7bfc8a28f42434c539306da2/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f368600fcd86f71c7bfc8a28f42434c539306da2/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=f368600fcd86f71c7bfc8a28f42434c539306da2", "patch": "@@ -2225,10 +2225,10 @@ handle_char_store (gimple_stmt_iterator *gsi)\n   return true;\n }\n \n-/* Try to fold strstr (s, t) eq/ne s to memcmp (s, t, strlen (t)) eq/ne 0.  */\n+/* Try to fold strstr (s, t) eq/ne s to strncmp (s, t, strlen (t)) eq/ne 0.  */\n \n static void\n-fold_strstr_to_memcmp (tree rhs1, tree rhs2, gimple *stmt)\n+fold_strstr_to_strncmp (tree rhs1, tree rhs2, gimple *stmt)\n {\n   if (TREE_CODE (rhs1) != SSA_NAME\n       || TREE_CODE (rhs2) != SSA_NAME)\n@@ -2273,34 +2273,34 @@ fold_strstr_to_memcmp (tree rhs1, tree rhs2, gimple *stmt)\n \t  if (arg1_len != NULL_TREE)\n \t    {\n \t      gimple_stmt_iterator gsi = gsi_for_stmt (call_stmt);\n-\t      tree memcmp_decl = builtin_decl_explicit (BUILT_IN_MEMCMP);\n-\t      gcall *memcmp_call = gimple_build_call (memcmp_decl, 3,\n+\t      tree strncmp_decl = builtin_decl_explicit (BUILT_IN_STRNCMP);\n+\t      gcall *strncmp_call = gimple_build_call (strncmp_decl, 3,\n \t\t\t\t\t\t      arg0, arg1, arg1_len);\n-\t      tree memcmp_lhs = make_ssa_name (integer_type_node);\n-\t      gimple_set_vuse (memcmp_call, gimple_vuse (call_stmt));\n-\t      gimple_call_set_lhs (memcmp_call, memcmp_lhs);\n+\t      tree strncmp_lhs = make_ssa_name (integer_type_node);\n+\t      gimple_set_vuse (strncmp_call, gimple_vuse (call_stmt));\n+\t      gimple_call_set_lhs (strncmp_call, strncmp_lhs);\n \t      gsi_remove (&gsi, true);\n-\t      gsi_insert_before (&gsi, memcmp_call, GSI_SAME_STMT);\n-\t      tree zero = build_zero_cst (TREE_TYPE (memcmp_lhs));\n+\t      gsi_insert_before (&gsi, strncmp_call, GSI_SAME_STMT);\n+\t      tree zero = build_zero_cst (TREE_TYPE (strncmp_lhs));\n \n \t      if (is_gimple_assign (stmt))\n \t\t{\n \t\t  if (gimple_assign_rhs_code (stmt) == COND_EXPR)\n \t\t    {\n \t\t      tree cond = gimple_assign_rhs1 (stmt);\n-\t\t      TREE_OPERAND (cond, 0) = memcmp_lhs;\n+\t\t      TREE_OPERAND (cond, 0) = strncmp_lhs;\n \t\t      TREE_OPERAND (cond, 1) = zero;\n \t\t    }\n \t\t  else\n \t\t    {\n-\t\t      gimple_assign_set_rhs1 (stmt, memcmp_lhs);\n+\t\t      gimple_assign_set_rhs1 (stmt, strncmp_lhs);\n \t\t      gimple_assign_set_rhs2 (stmt, zero);\n \t\t    }\n \t\t}\n \t      else\n \t\t{\n \t\t  gcond *cond = as_a<gcond *> (stmt);\n-\t\t  gimple_cond_set_lhs (cond, memcmp_lhs);\n+\t\t  gimple_cond_set_lhs (cond, strncmp_lhs);\n \t\t  gimple_cond_set_rhs (cond, zero);\n \t\t}\n \t      update_stmt (stmt);\n@@ -2398,12 +2398,12 @@ strlen_optimize_stmt (gimple_stmt_iterator *gsi)\n \t    enum tree_code cond_code = TREE_CODE (cond);\n \n \t    if (cond_code == EQ_EXPR || cond_code == NE_EXPR)\n-\t      fold_strstr_to_memcmp (TREE_OPERAND (cond, 0),\n-\t\t\t\t     TREE_OPERAND (cond, 1), stmt);\n+\t      fold_strstr_to_strncmp (TREE_OPERAND (cond, 0),\n+\t\t\t\t      TREE_OPERAND (cond, 1), stmt);\n \t  }\n \telse if (code == EQ_EXPR || code == NE_EXPR)\n-\t  fold_strstr_to_memcmp (gimple_assign_rhs1 (stmt),\n-\t\t\t\t gimple_assign_rhs2 (stmt), stmt);\n+\t  fold_strstr_to_strncmp (gimple_assign_rhs1 (stmt),\n+\t\t\t\t  gimple_assign_rhs2 (stmt), stmt);\n       }\n     else if (TREE_CODE (lhs) != SSA_NAME && !TREE_SIDE_EFFECTS (lhs))\n \t{\n@@ -2423,8 +2423,8 @@ strlen_optimize_stmt (gimple_stmt_iterator *gsi)\n     {\n       enum tree_code code = gimple_cond_code (cond);\n       if (code == EQ_EXPR || code == NE_EXPR)\n-\tfold_strstr_to_memcmp (gimple_cond_lhs (stmt),\n-\t\t\t       gimple_cond_rhs (stmt), stmt);\n+\tfold_strstr_to_strncmp (gimple_cond_lhs (stmt),\n+\t\t\t\tgimple_cond_rhs (stmt), stmt);\n     }\n \n   if (gimple_vdef (stmt))"}]}