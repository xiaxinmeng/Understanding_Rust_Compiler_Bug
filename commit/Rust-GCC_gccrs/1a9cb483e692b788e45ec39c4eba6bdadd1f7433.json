{"sha": "1a9cb483e692b788e45ec39c4eba6bdadd1f7433", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE5Y2I0ODNlNjkyYjc4OGU0NWVjMzljNGViYTZiZGFkZDFmNzQzMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-07-07T09:48:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-07-07T09:48:06Z"}, "message": "resync.\n\nFrom-SVN: r101702", "tree": {"sha": "626b779fb3d7725a0846a81481749304a9834b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/626b779fb3d7725a0846a81481749304a9834b3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a9cb483e692b788e45ec39c4eba6bdadd1f7433", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9cb483e692b788e45ec39c4eba6bdadd1f7433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9cb483e692b788e45ec39c4eba6bdadd1f7433", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9cb483e692b788e45ec39c4eba6bdadd1f7433/comments", "author": null, "committer": null, "parents": [{"sha": "2d43d3fed0c9070978b3b39db4b3f3898cf84b60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d43d3fed0c9070978b3b39db4b3f3898cf84b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d43d3fed0c9070978b3b39db4b3f3898cf84b60"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "1d6ab65eb7a1a63035a5242531fafab33e334744", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9cb483e692b788e45ec39c4eba6bdadd1f7433/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9cb483e692b788e45ec39c4eba6bdadd1f7433/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1a9cb483e692b788e45ec39c4eba6bdadd1f7433", "patch": "@@ -1,3 +1,148 @@\n+2005-07-07  Pascal Obry  <obry@adacore.com>\n+\n+\t* g-socthi-mingw.adb (C_Inet_Addr): New body used to convert the\n+\treturned type on Windows.\n+\n+\t* g-socthi-mingw.ads (C_Inet_Addr): Remove pragma Import for this\n+\troutine.\n+\n+\t* g-socket.adb (Inet_Addr): Check for empty Image and raises an\n+\texception in this case.\n+\tSimplify the code as \"Image (Image'Range)\" = \"Image\".\n+\n+2005-07-07  Vincent Celier  <celier@adacore.com>\n+\n+\t* bindgen.adb (Gen_Output_File_C): When switch -a was specified, put\n+\tthe destructor/constructor attributes for <lib>final/<lib>init.\n+\n+\t* gnatbind.adb (Gnatbind): Allow -a to be used in conjunction with -C\n+\n+2005-07-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (gnat_to_gnu_entity) <E_Procedure>: Do not strip the padding\n+\ttype if the parameter is not passed by copy but reference by default.\n+\n+2005-07-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Record_Init_Proc/Freeze_Record_Type):\n+\tReimplementation of the support for abstract interface types in order\n+\tto leave the code more clear and easy to maintain.\n+\n+\t* exp_ch6.adb (Freeze_Subprogram): Reimplementation of the support for\n+\tabstract interface types in order to leave the code clearer and easier\n+\tto maintain.\n+\n+\t* exp_disp.ads, exp_disp.adb (Fill_DT_Entry): Part of its functionality\n+\tis now implemented by the new subprogram Fill_Secondary_DT_Entry.\n+\t(Fill_Secondary_DT_Entry): Generate the code necessary to fill the\n+\tappropriate entry of the secondary dispatch table.\n+\t(Make_DT): Add code to inherit the secondary dispatch tables of\n+\tthe ancestors.\n+\n+\t* exp_util.adb (Find_Interface_Tag/Find_Interface_ADT): Instead of\n+\timplementing both functionalities by means of a common routine, each\n+\troutine has its own code.\n+\n+2005-07-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): Check wrong uses of tag incomplete types.\n+\n+\t* par-ch3.adb (P_Type_Declaration): Give support to tagged incomplete\n+\ttypes:\n+\t--\n+\t  type DEFINING_IDENTIFIER [DISCRIMINANT_PART] [IS TAGGED];\n+\t--\n+\n+\t* sem_attr.adb (Check_Not_Incomplete_Type): Additional checks for wrong\n+\tuse of tag incomplete types.\n+\n+\t* sem_ch3.adb (Analyze_Incomplete_Type): Add mininum decoration to\n+\tgive support to tagged incomplete types.\n+\n+\t* sem_ch5.adb (Analyze_Case_Statement): In generated code, if the\n+\texpression is a discriminant reference and its type is private, as can\n+\thappen within a stream operation for a mutable record, use the full\n+\tview of the type to resolve the case alternatives.\n+\t(Analyze_Assignment): Check wrong dereference of incomplete types.\n+\n+\t* sem_ch6.adb (Process_Formals): Allow the use of tagged incomplete\n+\ttypes.\n+\n+\t* sem_res.adb (Resolve_Explicit_Dereference): Allow the use of tagged\n+\tincomplete types.\n+\n+\t* sinfo.adb (Taggged_Present/Set_Taggged_Present): Applicable to\n+\tN_Incomplete_Type_Declaration nodes.\n+\n+\t* sinfo.ads (N_Incomplete_Type_Declaration): Addition of attribute\n+\tTag_Present to give support to tagged incomplete types:\n+\t--\n+\t  type DEFINING_IDENTIFIER [DISCRIMINANT_PART] [IS TAGGED];\n+\t--\n+\n+2005-07-07  Olivier Hainque  <hainque@adacore.com>\n+\n+\tPR ada/22301\n+\n+\t* raise.c: Only include unwind.h if IN_RTS, and provide dummy type\n+\tdefinitions for the Unwind wrappers in the compiler case.\n+\n+2005-07-07  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* par-load.adb (Load): If a child unit is loaded through a limited_with\n+\tclause, each parent must be loaded as a limited unit as well.\n+\n+\t* sem_ch10.adb (Previous_Withed_Unit): Better name for\n+\tCheck_Withed_Unit. Return true if there is a previous with_clause for\n+\tthis unit, whether limited or not.\n+\t(Expand_Limited_With_Clause): Do not generate a limited_with_clause on\n+\tthe current unit.\n+\t(Is_Visible_Through_Renamings): New local subprogram of install_limited\n+\t_withed_unit that checks if some package installed through normal with\n+\tclauses has a renaming declaration of package whose limited-view is\n+\tready to be installed. This enforces the check of the rule 10.1.2 (21/2)\n+\tof the current Draft document for Ada 2005.\n+\t(Analyze_Context): Complete the list of compilation units that\n+\tare allowed to contain limited-with clauses. It also contains\n+\tchecks that were previously done by Install_Limited_Context_Clauses.\n+\tThis makes the code more clear and easy to maintain.\n+\t(Expand_Limited_With_Clause) It is now a local subprogram of\n+\tInstall_Limited_Context_Clauses, and contains the code that adds\n+\tthe implicit limited-with clauses for parents of child units.\n+\tThis functionality was prevously done by Analyze_Context.\n+\n+\t* sem_ch4.adb (Analyze_Selected_Component): Check wrong use of\n+\tincomplete type.\n+\n+\t* sem_ch7.adb (Analyze_Package_Declaration): Check if the package has\n+\tbeen erroneously named in a limited-with clause of its own context.\n+\tIn this case the error has been previously notified by Analyze_Context.\n+\n+2005-07-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Direct_Name): Handle properly the case of a\n+\tgeneric package that contains local declarations with the same name.\n+\t(Analyze_Object_Renaming): Check wrong renaming of incomplete type.\n+\n+2005-07-07  Bernard Banner  <banner@adacore.com>\n+\n+\t* tracebak.c: Refine tracebacks to use Unwind_Backtrace scheme on\n+\tia64 platform only on platforms that you the GCC unwind library\n+\trather than the system unwind library.\n+\n+2005-07-07  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* expect.c: Minor reformatting\n+\n+2005-07-07  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* vms_data.ads: Add VMS qualifiers for new gnatpp switch\n+\t--no-separate-is\n+\n+\t* gnat_ugn.texi: Add description for new gnatpp option\n+\t(--no-separate-is)\n+\n 2005-07-04  Thomas Quinot  <quinot@adacore.com>\n \n \t* g-expect-vms.adb, g-expect.ads, g-expect.adb"}]}