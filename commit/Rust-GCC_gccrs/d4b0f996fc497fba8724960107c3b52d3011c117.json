{"sha": "d4b0f996fc497fba8724960107c3b52d3011c117", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRiMGY5OTZmYzQ5N2ZiYTg3MjQ5NjAxMDdjM2I1MmQzMDExYzExNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-16T22:14:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-16T22:14:54Z"}, "message": "middle-end: Add another testcase for PR 95493\n\nThis was reported on the gcc-help mailing list. The regression started\nwith r10-589 and was fixed by r11-963.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/torture/pr95493-1.C: New test.", "tree": {"sha": "1760e456141dff3812ec4d3aa21c834d61847967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1760e456141dff3812ec4d3aa21c834d61847967"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4b0f996fc497fba8724960107c3b52d3011c117", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b0f996fc497fba8724960107c3b52d3011c117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b0f996fc497fba8724960107c3b52d3011c117", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b0f996fc497fba8724960107c3b52d3011c117/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a0ddf7930204a5fcd1249de330ea02b2184f7ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0ddf7930204a5fcd1249de330ea02b2184f7ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0ddf7930204a5fcd1249de330ea02b2184f7ba"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "907d191ebfeb9bf5a1393cd8030a1f8497fe8d57", "filename": "gcc/testsuite/g++.dg/torture/pr95493-1.C", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4b0f996fc497fba8724960107c3b52d3011c117/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr95493-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4b0f996fc497fba8724960107c3b52d3011c117/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr95493-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr95493-1.C?ref=d4b0f996fc497fba8724960107c3b52d3011c117", "patch": "@@ -0,0 +1,95 @@\n+// { dg-do run { target c++11 } }\n+// PR rtl-optimization/95493 comment 8\n+\n+#include <array>\n+#include <iostream>\n+\n+struct Point\n+{\n+    std::array<int, 3> array;\n+\n+    Point(int x, int y, int z) : array{x, y, z} {}\n+    \n+    Point(const Point & other) : array{other.array} {} // OK if commented\n+    //Point(const Point &) = default; // OK\n+\n+    //Point(Point && other) = default; // OK\n+\n+    int  operator[] (std::size_t i) const { return array[i]; }\n+    int& operator[] (std::size_t i)       { return array[i]; }\n+};\n+\n+//using Point = std::array<int, 3>; // OK\n+\n+struct Cell\n+{\n+    Point point;\n+    Cell(Point const& pt) : point(pt) {}\n+    int   operator[] (std::size_t i) const { return point[i]; }\n+    int&  operator[] (std::size_t i)       { return point[i]; }\n+};\n+\n+//using Cell = Point; // OK\n+\n+std::ostream & operator<< (std::ostream & out, Cell const& object)\n+//std::ostream & operator<< (std::ostream & out, Cell object) // Fails with f2 too\n+{\n+    for ( std::size_t i = 0; i < 3; ++i )\n+        out << object[ i ] << \" \";\n+    return out;\n+}\n+\n+\n+struct DirIterator\n+{\n+    std::size_t dir;\n+    Cell cell;\n+\n+    DirIterator(Cell c)\n+        : dir(0), cell(c)\n+    {\n+        find(); // OK if commented\n+    }\n+\n+    void find()\n+    {\n+        //while (dir < 3) // Fails with f2 too\n+        while (dir < 3 && (cell[dir] % 2) == 0)\n+            ++dir;\n+    }\n+};\n+\n+Cell uIncident(Cell c, std::size_t k)\n+//Cell uIncident(Cell& c, std::size_t k) // OK\n+{\n+    --c[k];\n+    return c;\n+}\n+\n+Cell uSpel(Point p)\n+{\n+    for (std::size_t i = 0; i < 3; ++i)\n+        p[i] += p[i] + 1;\n+    return Cell(p);\n+}\n+\n+\n+int main ()\n+{\n+    Cell c = uSpel(Point{0, 0, 0}); // Fails\n+    //Cell c( Point(1, 1, 1) ); // OK\n+\n+    auto q = DirIterator( c );\n+\n+    Cell f1 = uIncident( c, q.dir ); // Fails\n+    //Cell f1 = uIncident( c, 0 ); // OK\n+\n+    Cell f2 = f1; // f2 is the right cell that f1 should be\n+\n+    std::cout << \"q.dir = \" << q.dir << \" ; f1 = \" << f1 << \" ; f2 = \" << f2 << std::endl;\n+    //std::cout << \"q.dir = \" << q.dir << \" ; f1 = \" << f1[0] << \" \" << f1[1] << \" \" << f1[2] << \" ; f2 = \" << f2[0] << \" \" << f2[1] << \" \" << f2[2] << std::endl; // OK\n+\n+    for (int i = 0; i < 3; ++i)\n+      if (f1[i] != f2[i])\n+        __builtin_abort();\n+}"}]}