{"sha": "3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EyZTRiNDZmNTZjMzJhYjMxYTQ4MmI2ZmZiZTU0NWU4Y2JmZWZkMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-11-19T18:21:44Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-11-19T18:21:44Z"}, "message": "re PR tree-optimization/18507 (block_defs_stack varrray should not be GC'ed)\n\n2004-11-19  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR tree-opt/18507\n        * tree-flow.h (tree2): Typedef because there is already a VEC(tree).\n        Define a VEC(tree2) for head.\n        (register_new_def): Change second argument to be a VEC(tree2).\n        * tree-ssa-dom.c (block_defs_stack): Change to be a VEC(tree2).\n        (tree_ssa_dominator_optimize): Initialize block_defs_stack with\n        the VEC(tree2) function.  Also free it before returning.\n        (dom_opt_initialize_block): Use VEC_safe_push instead of VARRAY_PUSH_TREE\n        for block_defs_stack.\n        (restore_currdefs_to_original_value): Use VEC_length instead of\n        VARRAY_ACTIVE_SIZE. VEC_pop instead of VARRAY_TOP_TREE/VARRAY_POP.\n        (dom_opt_finalize_block): Use VEC_safe_push instead of VARRAY_PUSH_TREE\n        for block_defs_stack.\n        * tree-into-ssa.c (block_defs_stack): Change to be a VEC(tree2).\n        (rewrite_initialize_block): Use VEC_safe_push instead of VARRAY_PUSH_TREE\n        for block_defs_stack.\n        (ssa_register_new_def): Likewise.\n        (ssa_rewrite_initialize_block): Likewise.\n        (rewrite_finalize_block): Use VEC_length instead of\n        VARRAY_ACTIVE_SIZE. VEC_pop instead of VARRAY_TOP_TREE/VARRAY_POP.\n        (ssa_rewrite_finalize_block): Likewise.\n        (register_new_def): Change second argument to be a VEC(tree2).\n        Use VEC_safe_push instead of VARRAY_PUSH_TREE.\n        (rewrite_blocks): Initialize block_defs_stack with\n        the VEC(tree2) function.  Also free it before returning.\n        (rewrite_ssa_into_ssa): Likewise.\n\nFrom-SVN: r90926", "tree": {"sha": "cef3e7dc682cfc4ccf35d090d8831c64c6f3c3ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cef3e7dc682cfc4ccf35d090d8831c64c6f3c3ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0/comments", "author": null, "committer": null, "parents": [{"sha": "0e1ad529d715d705d1d4f8dbc188a52a3a570637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1ad529d715d705d1d4f8dbc188a52a3a570637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e1ad529d715d705d1d4f8dbc188a52a3a570637"}], "stats": {"total": 96, "additions": 67, "deletions": 29}, "files": [{"sha": "43e4a347087c01e2ab38a8e3078cea281b17152d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0", "patch": "@@ -1,4 +1,33 @@\n-2004-11-18  Fariborz Jahanian <fjahanian@apple.com>\n+2004-11-19  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR tree-opt/18507\n+\t* tree-flow.h (tree2): Typedef because there is already a VEC(tree).\n+\tDefine a VEC(tree2) for head.\n+\t(register_new_def): Change second argument to be a VEC(tree2).\n+\t* tree-ssa-dom.c (block_defs_stack): Change to be a VEC(tree2).\n+\t(tree_ssa_dominator_optimize): Initialize block_defs_stack with\n+\tthe VEC(tree2) function.  Also free it before returning.\n+\t(dom_opt_initialize_block): Use VEC_safe_push instead of VARRAY_PUSH_TREE\n+\tfor block_defs_stack.\n+\t(restore_currdefs_to_original_value): Use VEC_length instead of\n+\tVARRAY_ACTIVE_SIZE. VEC_pop instead of VARRAY_TOP_TREE/VARRAY_POP.\n+\t(dom_opt_finalize_block): Use VEC_safe_push instead of VARRAY_PUSH_TREE\n+\tfor block_defs_stack.\n+\t* tree-into-ssa.c (block_defs_stack): Change to be a VEC(tree2).\n+\t(rewrite_initialize_block): Use VEC_safe_push instead of VARRAY_PUSH_TREE\n+\tfor block_defs_stack.\n+\t(ssa_register_new_def): Likewise.\n+\t(ssa_rewrite_initialize_block): Likewise.\n+\t(rewrite_finalize_block): Use VEC_length instead of\n+\tVARRAY_ACTIVE_SIZE. VEC_pop instead of VARRAY_TOP_TREE/VARRAY_POP.\n+\t(ssa_rewrite_finalize_block): Likewise.\n+\t(register_new_def): Change second argument to be a VEC(tree2).\n+\tUse VEC_safe_push instead of VARRAY_PUSH_TREE.\n+\t(rewrite_blocks): Initialize block_defs_stack with\n+\tthe VEC(tree2) function.  Also free it before returning.\n+\t(rewrite_ssa_into_ssa): Likewise.\n+\n+2004-11-19  Fariborz Jahanian <fjahanian@apple.com>\n \n \t* config/darwin.c (machopic_data_defined_p): return 1 for\n \tMACHOPIC_DEFINED_FUNCTION."}, {"sha": "da68b32fdf121f8e38b959f82eedd6d108851e5c", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0", "patch": "@@ -562,6 +562,9 @@ extern struct ptr_info_def *get_ptr_info (tree);\n    definition, a function with this prototype is called.  */\n typedef bool (*walk_use_def_chains_fn) (tree, tree, void *);\n \n+typedef tree tree_on_heap;\n+DEF_VEC_MALLOC_P (tree_on_heap);\n+\n /* In tree-ssa.c  */\n extern void init_tree_ssa (void);\n extern void debug_reaching_defs (void);\n@@ -577,7 +580,7 @@ extern bool tree_ssa_useless_type_conversion (tree);\n extern bool tree_ssa_useless_type_conversion_1 (tree, tree);\n extern void verify_ssa (void);\n extern void delete_tree_ssa (void);\n-extern void register_new_def (tree, varray_type *);\n+extern void register_new_def (tree, VEC (tree_on_heap) **);\n extern void walk_use_def_chains (tree, walk_use_def_chains_fn, void *, bool);\n extern void kill_redundant_phi_nodes (void);\n extern bool stmt_references_memory_p (tree);"}, {"sha": "d763f05d8b8b391e4e94cfc9755bffa3883eb703", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0", "patch": "@@ -109,7 +109,9 @@ static htab_t def_blocks;\n \n      A NULL node at the top entry is used to mark the last node associated\n      with the current block.  */\n-static varray_type block_defs_stack;\n+static VEC(tree_on_heap) *block_defs_stack;\n+\n+/* FIXME: The other stacks should also be VEC(tree_on_heap).  */\n \n /* Global data to attach to the main dominator walk structure.  */\n struct mark_def_sites_global_data\n@@ -678,7 +680,7 @@ rewrite_initialize_block (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n     fprintf (dump_file, \"\\n\\nRenaming block #%d\\n\\n\", bb->index);\n \n   /* Mark the unwind point for this block.  */\n-  VARRAY_PUSH_TREE (block_defs_stack, NULL_TREE);\n+  VEC_safe_push (tree_on_heap, block_defs_stack, NULL_TREE);\n \n   /* Step 1.  Register new definitions for every PHI node in the block.\n      Conceptually, all the PHI nodes are executed in parallel and each PHI\n@@ -716,8 +718,8 @@ ssa_register_new_def (tree var, tree def)\n      later used by the dominator tree callbacks to restore the reaching\n      definitions for all the variables defined in the block after a recursive\n      visit to all its immediately dominated blocks.  */\n-  VARRAY_PUSH_TREE (block_defs_stack, currdef);\n-  VARRAY_PUSH_TREE (block_defs_stack, var);\n+  VEC_safe_push (tree_on_heap, block_defs_stack, currdef);\n+  VEC_safe_push (tree_on_heap, block_defs_stack, var);\n \n   /* Set the current reaching definition for VAR to be DEF.  */\n   set_current_def (var, def);\n@@ -738,7 +740,7 @@ ssa_rewrite_initialize_block (struct dom_walk_data *walk_data, basic_block bb)\n     fprintf (dump_file, \"\\n\\nRenaming block #%d\\n\\n\", bb->index);\n \n   /* Mark the unwind point for this block.  */\n-  VARRAY_PUSH_TREE (block_defs_stack, NULL_TREE);\n+  VEC_safe_push (tree_on_heap, block_defs_stack, NULL_TREE);\n \n   FOR_EACH_EDGE (e, ei, bb->preds)\n     if (e->flags & EDGE_ABNORMAL)\n@@ -876,13 +878,11 @@ rewrite_finalize_block (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n \t\t\tbasic_block bb ATTRIBUTE_UNUSED)\n {\n   /* Restore CURRDEFS to its original state.  */\n-  while (VARRAY_ACTIVE_SIZE (block_defs_stack) > 0)\n+  while (VEC_length (tree_on_heap, block_defs_stack) > 0)\n     {\n-      tree tmp = VARRAY_TOP_TREE (block_defs_stack);\n+      tree tmp = VEC_pop (tree_on_heap, block_defs_stack);\n       tree saved_def, var;\n \n-      VARRAY_POP (block_defs_stack);\n-\n       if (tmp == NULL_TREE)\n \tbreak;\n \n@@ -914,18 +914,15 @@ ssa_rewrite_finalize_block (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n \n   /* Step 5.  Restore the current reaching definition for each variable\n      referenced in the block (in reverse order).  */\n-  while (VARRAY_ACTIVE_SIZE (block_defs_stack) > 0)\n+  while (VEC_length (tree_on_heap, block_defs_stack) > 0)\n     {\n-      tree var = VARRAY_TOP_TREE (block_defs_stack);\n+      tree var = VEC_pop (tree_on_heap, block_defs_stack);\n       tree saved_def;\n-\n-      VARRAY_POP (block_defs_stack);\n       \n       if (var == NULL)\n \tbreak;\n \n-      saved_def = VARRAY_TOP_TREE (block_defs_stack);\n-      VARRAY_POP (block_defs_stack);\n+      saved_def = VEC_pop (tree_on_heap, block_defs_stack);\n \n       set_current_def (var, saved_def);\n     }\n@@ -1190,7 +1187,7 @@ rewrite_operand (use_operand_p op_p)\n    into the stack pointed by BLOCK_DEFS_P.  */\n \n void\n-register_new_def (tree def, varray_type *block_defs_p)\n+register_new_def (tree def, VEC (tree_on_heap) **block_defs_p)\n {\n   tree var = SSA_NAME_VAR (def);\n   tree currdef;\n@@ -1216,7 +1213,7 @@ register_new_def (tree def, varray_type *block_defs_p)\n      definitions for all the variables defined in the block after a recursive\n      visit to all its immediately dominated blocks.  If there is no current\n      reaching definition, then just record the underlying _DECL node.  */\n-  VARRAY_PUSH_TREE (*block_defs_p, currdef ? currdef : var);\n+  VEC_safe_push (tree_on_heap, *block_defs_p, currdef ? currdef : var);\n \n   /* Set the current reaching definition for VAR to be DEF.  */\n   set_current_def (var, def);\n@@ -1437,7 +1434,7 @@ rewrite_blocks (bool fix_virtual_phis)\n   walk_data.global_data = NULL;\n   walk_data.block_local_data_size = 0;\n \n-  VARRAY_TREE_INIT (block_defs_stack, 10, \"Block DEFS Stack\");\n+  block_defs_stack = VEC_alloc (tree_on_heap, 10);\n \n   /* Initialize the dominator walker.  */\n   init_walk_dominator_tree (&walk_data);\n@@ -1450,6 +1447,9 @@ rewrite_blocks (bool fix_virtual_phis)\n   fini_walk_dominator_tree (&walk_data);\n \n   htab_delete (def_blocks);\n+  \n+  VEC_free (tree_on_heap, block_defs_stack);\n+  block_defs_stack = NULL;\n \n   timevar_pop (TV_TREE_SSA_REWRITE_BLOCKS);\n }\n@@ -1670,7 +1670,7 @@ rewrite_ssa_into_ssa (void)\n   mark_def_sites_global_data.names_to_rename = snames_to_rename;\n   walk_data.global_data = &mark_def_sites_global_data;\n \n-  VARRAY_TREE_INIT (block_defs_stack, 10, \"Block DEFS Stack\");\n+  block_defs_stack = VEC_alloc (tree_on_heap, 10);\n \n   /* We do not have any local data.  */\n   walk_data.block_local_data_size = 0;\n@@ -1756,6 +1756,9 @@ rewrite_ssa_into_ssa (void)\n     }\n \n   BITMAP_XFREE (to_rename);\n+  \n+  VEC_free (tree_on_heap, block_defs_stack);\n+  block_defs_stack = NULL;\n   timevar_pop (TV_TREE_SSA_OTHER);\n }\n "}, {"sha": "badf23ba0d7a12039604e4e447eb106db07b7300", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=3a2e4b46f56c32ab31a482b6ffbe545e8cbfefd0", "patch": "@@ -106,7 +106,9 @@ static varray_type avail_exprs_stack;\n \n    A NULL node is used to mark the last node associated with the\n    current block.  */\n-varray_type block_defs_stack;\n+VEC(tree_on_heap) *block_defs_stack;\n+\n+/* FIXME: The other stacks should also be VEC(tree_on_heap).  */\n \n /* Stack of statements we need to rescan during finalization for newly\n    exposed variables.\n@@ -384,7 +386,7 @@ tree_ssa_dominator_optimize (void)\n   avail_exprs = htab_create (1024, real_avail_expr_hash, avail_expr_eq, free);\n   vrp_data = htab_create (ceil_log2 (num_ssa_names), vrp_hash, vrp_eq, free);\n   VARRAY_TREE_INIT (avail_exprs_stack, 20, \"Available expression stack\");\n-  VARRAY_TREE_INIT (block_defs_stack, 20, \"Block DEFS stack\");\n+  block_defs_stack = VEC_alloc (tree_on_heap, 20);\n   VARRAY_TREE_INIT (const_and_copies_stack, 20, \"Block const_and_copies stack\");\n   VARRAY_TREE_INIT (nonzero_vars_stack, 20, \"Block nonzero_vars stack\");\n   VARRAY_TREE_INIT (vrp_variables_stack, 20, \"Block vrp_variables stack\");\n@@ -502,6 +504,9 @@ tree_ssa_dominator_optimize (void)\n       if (value && !is_gimple_min_invariant (value))\n \tSSA_NAME_VALUE (name) = NULL;\n     }\n+  \n+  VEC_free (tree_on_heap, block_defs_stack);\n+  block_defs_stack = NULL;\n }\n \n static bool\n@@ -804,7 +809,7 @@ dom_opt_initialize_block (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n   /* Push a marker on the stacks of local information so that we know how\n      far to unwind when we finalize this block.  */\n   VARRAY_PUSH_TREE (avail_exprs_stack, NULL_TREE);\n-  VARRAY_PUSH_TREE (block_defs_stack, NULL_TREE);\n+  VEC_safe_push (tree_on_heap, block_defs_stack, NULL_TREE);\n   VARRAY_PUSH_TREE (const_and_copies_stack, NULL_TREE);\n   VARRAY_PUSH_TREE (nonzero_vars_stack, NULL_TREE);\n   VARRAY_PUSH_TREE (vrp_variables_stack, NULL_TREE);\n@@ -925,13 +930,11 @@ static void\n restore_currdefs_to_original_value (void)\n {\n   /* Restore CURRDEFS to its original state.  */\n-  while (VARRAY_ACTIVE_SIZE (block_defs_stack) > 0)\n+  while (VEC_length (tree_on_heap, block_defs_stack) > 0)\n     {\n-      tree tmp = VARRAY_TOP_TREE (block_defs_stack);\n+      tree tmp = VEC_pop (tree_on_heap, block_defs_stack);\n       tree saved_def, var;\n \n-      VARRAY_POP (block_defs_stack);\n-\n       if (tmp == NULL_TREE)\n \tbreak;\n \n@@ -999,7 +1002,7 @@ dom_opt_finalize_block (struct dom_walk_data *walk_data, basic_block bb)\n \t     unwind any expressions related to the TRUE arm before processing\n \t     the false arm below.  */\n \t  VARRAY_PUSH_TREE (avail_exprs_stack, NULL_TREE);\n-\t  VARRAY_PUSH_TREE (block_defs_stack, NULL_TREE);\n+\t  VEC_safe_push (tree_on_heap, block_defs_stack, NULL_TREE);\n \t  VARRAY_PUSH_TREE (const_and_copies_stack, NULL_TREE);\n \n \t  edge_info = true_edge->aux;"}]}