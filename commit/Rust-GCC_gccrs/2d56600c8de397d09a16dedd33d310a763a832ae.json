{"sha": "2d56600c8de397d09a16dedd33d310a763a832ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ1NjYwMGM4ZGUzOTdkMDlhMTZkZWRkMzNkMzEwYTc2M2E4MzJhZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-16T11:14:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-16T11:14:51Z"}, "message": "[AArch64] Add truncation for partial SVE modes\n\nThis patch adds support for \"truncating\" to a partial SVE vector from\neither a full SVE vector or a wider partial vector.  This truncation is\nactually a no-op and so should have zero cost in the vector cost model.\n\n2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md\n\t(trunc<SVE_HSDI:mode><SVE_PARTIAL_I:mode>2): New pattern.\n\t* config/aarch64/aarch64.c (aarch64_integer_truncation_p): New\n\tfunction.\n\t(aarch64_sve_adjust_stmt_cost): Call it.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/mask_struct_load_1.c: Add\n\t--param aarch64-sve-compare-costs=0.\n\t* gcc.target/aarch64/sve/mask_struct_load_2.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_load_3.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_load_4.c: Likewise.\n\t* gcc.target/aarch64/sve/mask_struct_load_5.c: Likewise.\n\t* gcc.target/aarch64/sve/pack_1.c: Likewise.\n\t* gcc.target/aarch64/sve/truncate_1.c: New test.\n\nFrom-SVN: r278344", "tree": {"sha": "56564f83914ac39ee039165188613c4b2820732e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56564f83914ac39ee039165188613c4b2820732e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d56600c8de397d09a16dedd33d310a763a832ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d56600c8de397d09a16dedd33d310a763a832ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d56600c8de397d09a16dedd33d310a763a832ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d56600c8de397d09a16dedd33d310a763a832ae/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "217ccab8f46ca5b260319e7b71b421daec6d11c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/217ccab8f46ca5b260319e7b71b421daec6d11c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/217ccab8f46ca5b260319e7b71b421daec6d11c8"}], "stats": {"total": 119, "additions": 113, "deletions": 6}, "files": [{"sha": "7fe9a114cfe7a8576fb1e585fe73882bdcf0a768", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d56600c8de397d09a16dedd33d310a763a832ae", "patch": "@@ -1,3 +1,11 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md\n+\t(trunc<SVE_HSDI:mode><SVE_PARTIAL_I:mode>2): New pattern.\n+\t* config/aarch64/aarch64.c (aarch64_integer_truncation_p): New\n+\tfunction.\n+\t(aarch64_sve_adjust_stmt_cost): Call it.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-sve.md"}, {"sha": "158a1786a97f8664d9fd13d6eb27e26dbde4b01d", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=2d56600c8de397d09a16dedd33d310a763a832ae", "patch": "@@ -72,6 +72,7 @@\n ;; ---- [INT] General unary arithmetic corresponding to rtx codes\n ;; ---- [INT] General unary arithmetic corresponding to unspecs\n ;; ---- [INT] Sign and zero extension\n+;; ---- [INT] Truncation\n ;; ---- [INT] Logical inverse\n ;; ---- [FP<-INT] General unary arithmetic that maps to unspecs\n ;; ---- [FP] General unary arithmetic corresponding to unspecs\n@@ -2888,6 +2889,29 @@\n   [(set_attr \"movprfx\" \"*,yes,yes\")]\n )\n \n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Truncation\n+;; -------------------------------------------------------------------------\n+;; The patterns in this section are synthetic.\n+;; -------------------------------------------------------------------------\n+\n+;; Truncate to a partial SVE vector from either a full vector or a\n+;; wider partial vector.  This is a no-op, because we can just ignore\n+;; the unused upper bits of the source.\n+(define_insn_and_split \"trunc<SVE_HSDI:mode><SVE_PARTIAL_I:mode>2\"\n+  [(set (match_operand:SVE_PARTIAL_I 0 \"register_operand\" \"=w\")\n+\t(truncate:SVE_PARTIAL_I\n+\t  (match_operand:SVE_HSDI 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SVE && (~<SVE_HSDI:narrower_mask> & <SVE_PARTIAL_I:self_mask>) == 0\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  {\n+    operands[1] = aarch64_replace_reg_mode (operands[1],\n+\t\t\t\t\t    <SVE_PARTIAL_I:MODE>mode);\n+  }\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Logical inverse\n ;; -------------------------------------------------------------------------"}, {"sha": "f710aa2e795c1c50d640c8f0bcbab7845a7e8529", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=2d56600c8de397d09a16dedd33d310a763a832ae", "patch": "@@ -12901,6 +12901,21 @@ aarch64_extending_load_p (stmt_vec_info stmt_info)\n \t  && DR_IS_READ (STMT_VINFO_DATA_REF (def_stmt_info)));\n }\n \n+/* Return true if STMT_INFO is an integer truncation.  */\n+static bool\n+aarch64_integer_truncation_p (stmt_vec_info stmt_info)\n+{\n+  gassign *assign = dyn_cast <gassign *> (stmt_info->stmt);\n+  if (!assign || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (assign)))\n+    return false;\n+\n+  tree lhs_type = TREE_TYPE (gimple_assign_lhs (assign));\n+  tree rhs_type = TREE_TYPE (gimple_assign_rhs1 (assign));\n+  return (INTEGRAL_TYPE_P (lhs_type)\n+\t  && INTEGRAL_TYPE_P (rhs_type)\n+\t  && TYPE_PRECISION (lhs_type) < TYPE_PRECISION (rhs_type));\n+}\n+\n /* STMT_COST is the cost calculated by aarch64_builtin_vectorization_cost\n    for STMT_INFO, which has cost kind KIND.  Adjust the cost as necessary\n    for SVE targets.  */\n@@ -12919,6 +12934,11 @@ aarch64_sve_adjust_stmt_cost (vect_cost_for_stmt kind, stmt_vec_info stmt_info,\n   if (kind == vector_stmt && aarch64_extending_load_p (stmt_info))\n     stmt_cost = 0;\n \n+  /* For similar reasons, vector_stmt integer truncations are a no-op,\n+     because we can just ignore the unused upper bits of the source.  */\n+  if (kind == vector_stmt && aarch64_integer_truncation_p (stmt_info))\n+    stmt_cost = 0;\n+\n   return stmt_cost;\n }\n "}, {"sha": "28f99e034f190f907af3b47c2b7a7a82ea4595e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d56600c8de397d09a16dedd33d310a763a832ae", "patch": "@@ -1,3 +1,14 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/mask_struct_load_1.c: Add\n+\t--param aarch64-sve-compare-costs=0.\n+\t* gcc.target/aarch64/sve/mask_struct_load_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/pack_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/truncate_1.c: New test.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/load_extend_1.c: New test."}, {"sha": "03b2b93df07b8ccb90ac394b3ae1ba89777cc916", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_1.c?ref=2d56600c8de397d09a16dedd33d310a763a832ae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "87ac3178be02b9dd29c7aab2066e9824a29ac204", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_2.c?ref=2d56600c8de397d09a16dedd33d310a763a832ae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "54806f93ad9b86bdd39e5ea23ce3807dbd600623", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_3.c?ref=2d56600c8de397d09a16dedd33d310a763a832ae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "4c73004f68dfa980998fded7bc3a4e038affca1c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_4.c?ref=2d56600c8de397d09a16dedd33d310a763a832ae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "da367e4fd79dc2b1ffde08d6ae0a8b63bf334f39", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mask_struct_load_5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmask_struct_load_5.c?ref=2d56600c8de397d09a16dedd33d310a763a832ae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "7c7bfdd030c0686d0d1d854c09548c2b37154de5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pack_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpack_1.c?ref=2d56600c8de397d09a16dedd33d310a763a832ae", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize\" } */\n+/* { dg-options \"-O2 -ftree-vectorize --param aarch64-sve-compare-costs=0\" } */\n \n #include <stdint.h>\n "}, {"sha": "aeb0645557507f0881fece49e1695f9eee12749d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/truncate_1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftruncate_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d56600c8de397d09a16dedd33d310a763a832ae/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftruncate_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftruncate_1.c?ref=2d56600c8de397d09a16dedd33d310a763a832ae", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_LOOP(TYPE1, TYPE2, SHIFT)\t\t\t\t\t\\\n+  void\t\t\t\t\t\t\t\t\t\\\n+  f_##TYPE1##_##TYPE2 (TYPE2 *restrict dst, TYPE1 *restrict src1,\t\\\n+\t\t       TYPE1 *restrict src2, int n)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\t\t\\\n+      dst[i] = (TYPE1) (src1[i] + src2[i]) >> SHIFT;\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T) \\\n+  T (uint16_t, uint8_t, 2) \\\n+  T (uint32_t, uint8_t, 18) \\\n+  T (uint64_t, uint8_t, 34) \\\n+  T (uint32_t, uint16_t, 3) \\\n+  T (uint64_t, uint16_t, 19) \\\n+  T (uint64_t, uint32_t, 4)\n+\n+TEST_ALL (TEST_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tld1h\\tz[0-9]+\\.h,} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld1w\\tz[0-9]+\\.s,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tld1d\\tz[0-9]+\\.d,} 6 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.d, z[0-9]+\\.d, z[0-9]+\\.d\\n} 3 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, z[0-9]+\\.h, #2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, z[0-9]+\\.s, #18\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, z[0-9]+\\.d, #34\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, z[0-9]+\\.s, #3\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, z[0-9]+\\.d, #19\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.d, z[0-9]+\\.d, #4\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.h,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1b\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1h\\tz[0-9]+\\.d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst1w\\tz[0-9]+\\.d,} 1 } } */"}]}