{"sha": "71234632dd6ff182f7ce6ed2fe250d3f40038c81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyMzQ2MzJkZDZmZjE4MmY3Y2U2ZWQyZmUyNTBkM2Y0MDAzOGM4MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-08-08T14:54:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-08-08T14:54:51Z"}, "message": "re PR libstdc++/44963 ([DR 1334] Ambiguous function overload using __gnu_cxx::crope with std::back_inserter in c++0x mode)\n\n2010-08-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/44963\n\t* include/bits/stl_iterator.h (insert_iterator<>::\n\toperator=(const typename _Container::value_type&,\n\tback_insert_iterator<>::\n\toperator=(const typename _Container::value_type&),\n\tfront_insert_iterator<>::\n\toperator=(const typename _Container::value_type&))): Add\n\tin C++0x mode.\n\t* testsuite/ext/rope/44963.cc: New.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust\n\tdg-error line number.\n\nFrom-SVN: r163001", "tree": {"sha": "e9d418469f5e42f176816659ee869c02c998b130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9d418469f5e42f176816659ee869c02c998b130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71234632dd6ff182f7ce6ed2fe250d3f40038c81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71234632dd6ff182f7ce6ed2fe250d3f40038c81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71234632dd6ff182f7ce6ed2fe250d3f40038c81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71234632dd6ff182f7ce6ed2fe250d3f40038c81/comments", "author": null, "committer": null, "parents": [{"sha": "07f93cbdd551f6e893a9f22296fb50e3e37edbf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f93cbdd551f6e893a9f22296fb50e3e37edbf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07f93cbdd551f6e893a9f22296fb50e3e37edbf1"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "11b66371dde5529b7f93c044e805410a4888b4b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71234632dd6ff182f7ce6ed2fe250d3f40038c81/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71234632dd6ff182f7ce6ed2fe250d3f40038c81/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=71234632dd6ff182f7ce6ed2fe250d3f40038c81", "patch": "@@ -1,3 +1,17 @@\n+2010-08-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/44963\n+\t* include/bits/stl_iterator.h (insert_iterator<>::\n+\toperator=(const typename _Container::value_type&,\n+\tback_insert_iterator<>::\n+\toperator=(const typename _Container::value_type&),\n+\tfront_insert_iterator<>::\n+\toperator=(const typename _Container::value_type&))): Add\n+\tin C++0x mode.\n+\t* testsuite/ext/rope/44963.cc: New.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust\n+\tdg-error line number.\n+\n 2010-08-08  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/c_global/cmath: Implement US 136."}, {"sha": "83a390d3d9e3661b740984b0c7b25ecd142e9a65", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71234632dd6ff182f7ce6ed2fe250d3f40038c81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71234632dd6ff182f7ce6ed2fe250d3f40038c81/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=71234632dd6ff182f7ce6ed2fe250d3f40038c81", "patch": "@@ -416,14 +416,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  the end, if you like).  Assigning a value to the %iterator will\n        *  always append the value to the end of the container.\n       */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       back_insert_iterator&\n       operator=(typename _Container::const_reference __value)\n       {\n \tcontainer->push_back(__value);\n \treturn *this;\n       }\n+#else\n+      back_insert_iterator&\n+      operator=(const typename _Container::value_type& __value)\n+      {\n+\tcontainer->push_back(__value);\n+\treturn *this;\n+      }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       back_insert_iterator&\n       operator=(typename _Container::value_type&& __value)\n       {\n@@ -499,14 +506,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  the front, if you like).  Assigning a value to the %iterator will\n        *  always prepend the value to the front of the container.\n       */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       front_insert_iterator&\n       operator=(typename _Container::const_reference __value)\n       {\n \tcontainer->push_front(__value);\n \treturn *this;\n       }\n+#else\n+      front_insert_iterator&\n+      operator=(const typename _Container::value_type& __value)\n+      {\n+\tcontainer->push_front(__value);\n+\treturn *this;\n+      }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       front_insert_iterator&\n       operator=(typename _Container::value_type&& __value)\n       {\n@@ -603,15 +617,23 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *     // vector v contains A, 1, 2, 3, and Z\n        *  @endcode\n       */\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n       insert_iterator&\n       operator=(typename _Container::const_reference __value)\n       {\n \titer = container->insert(iter, __value);\n \t++iter;\n \treturn *this;\n       }\n+#else\n+      insert_iterator&\n+      operator=(const typename _Container::value_type& __value)\n+      {\n+\titer = container->insert(iter, __value);\n+\t++iter;\n+\treturn *this;\n+      }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n       insert_iterator&\n       operator=(typename _Container::value_type&& __value)\n       {"}, {"sha": "f8cf9cdb0ecd89452c25f0afa6f49cd3b0e6de78", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71234632dd6ff182f7ce6ed2fe250d3f40038c81/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71234632dd6ff182f7ce6ed2fe250d3f40038c81/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=71234632dd6ff182f7ce6ed2fe250d3f40038c81", "patch": "@@ -45,7 +45,7 @@ main()\n // { dg-warning \"note\" \"\" { target *-*-* } 423 }\n // { dg-warning \"note\" \"\" { target *-*-* } 862 }\n // { dg-warning \"note\" \"\" { target *-*-* } 510 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 1005 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 1027 }\n // { dg-warning \"note\" \"\" { target *-*-* } 340 }\n // { dg-warning \"note\" \"\" { target *-*-* } 290 }\n // { dg-warning \"note\" \"\" { target *-*-* } 197 }"}, {"sha": "32bd9ded612e1bdf33bc7d7b9310700a88bdb7f1", "filename": "libstdc++-v3/testsuite/ext/rope/44963.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71234632dd6ff182f7ce6ed2fe250d3f40038c81/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope%2F44963.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71234632dd6ff182f7ce6ed2fe250d3f40038c81/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope%2F44963.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frope%2F44963.cc?ref=71234632dd6ff182f7ce6ed2fe250d3f40038c81", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/rope>\n+\n+// libstdc++/44963\n+void test01()\n+{\n+  __gnu_cxx::crope line(\"test\");\n+  auto ii(std::back_inserter(line));\n+\n+  *ii++ = 'm';\n+  *ii++ = 'e';\n+}"}]}