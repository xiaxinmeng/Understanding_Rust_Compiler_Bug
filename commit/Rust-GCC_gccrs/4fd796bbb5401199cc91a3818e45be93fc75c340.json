{"sha": "4fd796bbb5401199cc91a3818e45be93fc75c340", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkNzk2YmJiNTQwMTE5OWNjOTFhMzgxOGU0NWJlOTNmYzc1YzM0MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-19T13:57:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-19T13:57:20Z"}, "message": "(instantiate_virtual_regs_1...\n\n(instantiate_virtual_regs_1, case USE, case CLOBBER): Properly handle\ncase of shared MEM whose replacement is not valid.\n\nFrom-SVN: r13509", "tree": {"sha": "949d1d44be0c82f456b1a8c73b3658776a793c2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/949d1d44be0c82f456b1a8c73b3658776a793c2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fd796bbb5401199cc91a3818e45be93fc75c340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd796bbb5401199cc91a3818e45be93fc75c340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd796bbb5401199cc91a3818e45be93fc75c340", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd796bbb5401199cc91a3818e45be93fc75c340/comments", "author": null, "committer": null, "parents": [{"sha": "02a27e82af8dcf59669678e6a143c45e81a08558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a27e82af8dcf59669678e6a143c45e81a08558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a27e82af8dcf59669678e6a143c45e81a08558"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "0116b3267beac1aaa9bb8a018fdc5dabeaa3a26c", "filename": "gcc/function.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd796bbb5401199cc91a3818e45be93fc75c340/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd796bbb5401199cc91a3818e45be93fc75c340/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=4fd796bbb5401199cc91a3818e45be93fc75c340", "patch": "@@ -2942,7 +2942,7 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n \n     case MEM:\n       /* Most cases of MEM that convert to valid addresses have already been\n-\t handled by our scan of regno_reg_rtx.  The only special handling we\n+\t handled by our scan of decls.  The only special handling we\n \t need here is to make a copy of the rtx to ensure it isn't being\n \t shared if we have to change it to a pseudo. \n \n@@ -3000,7 +3000,9 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n \t     ??? Also note that this can still lose if OBJECT is an insn that\n \t     has less restrictions on an address that some other insn.\n \t     In that case, we will modify the shared address.  This case\n-\t     doesn't seem very likely, though.  */\n+\t     doesn't seem very likely, though.  One case where this could\n+\t     happen is in the case of a USE or CLOBBER reference, but we\n+\t     take care of that below.  */\n \n \t  if (instantiate_virtual_regs_1 (&XEXP (x, 0),\n \t\t\t\t\t  object ? object : x, 0))\n@@ -3013,8 +3015,6 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n \t}\n \n       /* Fall through to generic unary operation case.  */\n-    case USE:\n-    case CLOBBER:\n     case SUBREG:\n     case STRICT_LOW_PART:\n     case NEG:          case NOT:\n@@ -3031,6 +3031,23 @@ instantiate_virtual_regs_1 (loc, object, extra_insns)\n       loc = &XEXP (x, 0);\n       goto restart;\n \n+    case USE:\n+    case CLOBBER:\n+      /* If the operand is a MEM, see if the change is a valid MEM.  If not,\n+\t go ahead and make the invalid one, but do it to a copy.  For a REG,\n+\t just make the recursive call, since there's no chance of a problem. */\n+\n+      if ((GET_CODE (XEXP (x, 0)) == MEM\n+\t   && instantiate_virtual_regs_1 (&XEXP (XEXP (x, 0), 0), XEXP (x, 0),\n+\t\t\t\t\t  0))\n+\t  || (GET_CODE (XEXP (x, 0)) == REG\n+\t      && instantiate_virtual_regs_1 (&XEXP (x, 0), 0, 0)))\n+\treturn 1;\n+\n+      XEXP (x, 0) = copy_rtx (XEXP (x, 0));\n+      loc = &XEXP (x, 0);\n+      goto restart;\n+\n     case REG:\n       /* Try to replace with a PLUS.  If that doesn't work, compute the sum\n \t in front of this insn and substitute the temporary.  */"}]}