{"sha": "3db18011e5c9f4060dc9cba1440056b2e0de2c00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RiMTgwMTFlNWM5ZjQwNjBkYzljYmExNDQwMDU2YjJlMGRlMmMwMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-04-27T12:53:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-04-27T12:53:40Z"}, "message": "tree-cfg.c (verify_expr): Make dead code hit gcc_unreachable.\n\n2018-04-27  Richard Biener  <rguenther@suse.de>\n\n\t* tree-cfg.c (verify_expr): Make dead code hit gcc_unreachable.\n\nFrom-SVN: r259705", "tree": {"sha": "ab84de678bfca5ebda7c8d4935546851070f7bbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab84de678bfca5ebda7c8d4935546851070f7bbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3db18011e5c9f4060dc9cba1440056b2e0de2c00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db18011e5c9f4060dc9cba1440056b2e0de2c00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3db18011e5c9f4060dc9cba1440056b2e0de2c00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3db18011e5c9f4060dc9cba1440056b2e0de2c00/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4e15523c1fc225a513d1a21e5eb2b953b4c928d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e15523c1fc225a513d1a21e5eb2b953b4c928d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4e15523c1fc225a513d1a21e5eb2b953b4c928d"}], "stats": {"total": 94, "additions": 25, "deletions": 69}, "files": [{"sha": "3ed17c1cdcb6c51479444f98d92977b2e110ee5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db18011e5c9f4060dc9cba1440056b2e0de2c00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db18011e5c9f4060dc9cba1440056b2e0de2c00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3db18011e5c9f4060dc9cba1440056b2e0de2c00", "patch": "@@ -1,3 +1,7 @@\n+2018-04-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-cfg.c (verify_expr): Make dead code hit gcc_unreachable.\n+\n 2018-04-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*movti_internal): Substitute Ye constraint"}, {"sha": "34ab248088b066f4afa723225982e459d8099742", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 21, "deletions": 69, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3db18011e5c9f4060dc9cba1440056b2e0de2c00/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3db18011e5c9f4060dc9cba1440056b2e0de2c00/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=3db18011e5c9f4060dc9cba1440056b2e0de2c00", "patch": "@@ -3141,18 +3141,7 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n       }\n \n     case COND_EXPR:\n-      x = COND_EXPR_COND (t);\n-      if (!INTEGRAL_TYPE_P (TREE_TYPE (x)))\n-\t{\n-\t  error (\"non-integral used in condition\");\n-\t  return x;\n-\t}\n-      if (!is_gimple_condexpr (x))\n-        {\n-\t  error (\"invalid conditional operand\");\n-\t  return x;\n-\t}\n-      break;\n+      gcc_unreachable ();\n \n     case NON_LVALUE_EXPR:\n     case TRUTH_NOT_EXPR:\n@@ -3164,8 +3153,7 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case BIT_NOT_EXPR:\n-      CHECK_OP (0, \"invalid operand to unary operator\");\n-      break;\n+      gcc_unreachable ();\n \n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n@@ -3261,65 +3249,12 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n       break;\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n-      /* PLUS_EXPR and MINUS_EXPR don't work on pointers, they should be done using\n-\t POINTER_PLUS_EXPR. */\n-      if (POINTER_TYPE_P (TREE_TYPE (t)))\n-\t{\n-\t  error (\"invalid operand to plus/minus, type is a pointer\");\n-\t  return t;\n-\t}\n-      CHECK_OP (0, \"invalid operand to binary operator\");\n-      CHECK_OP (1, \"invalid operand to binary operator\");\n-      break;\n+      gcc_unreachable ();\n \n     case POINTER_DIFF_EXPR:\n-      if (!POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (t, 0)))\n-\t  || !POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (t, 1))))\n-\t{\n-\t  error (\"invalid operand to pointer diff, operand is not a pointer\");\n-\t  return t;\n-\t}\n-      if (TREE_CODE (TREE_TYPE (t)) != INTEGER_TYPE\n-\t  || TYPE_UNSIGNED (TREE_TYPE (t))\n-\t  || (TYPE_PRECISION (TREE_TYPE (t))\n-\t      != TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (t, 0)))))\n-\t{\n-\t  error (\"invalid type for pointer diff\");\n-\t  return t;\n-\t}\n-      CHECK_OP (0, \"invalid operand to pointer diff\");\n-      CHECK_OP (1, \"invalid operand to pointer diff\");\n-      break;\n+      gcc_unreachable ();\n \n     case POINTER_PLUS_EXPR:\n-      /* Check to make sure the first operand is a pointer or reference type. */\n-      if (!POINTER_TYPE_P (TREE_TYPE (TREE_OPERAND (t, 0))))\n-\t{\n-\t  error (\"invalid operand to pointer plus, first operand is not a pointer\");\n-\t  return t;\n-\t}\n-      /* Check to make sure the second operand is a ptrofftype.  */\n-      if (!ptrofftype_p (TREE_TYPE (TREE_OPERAND (t, 1))))\n-\t{\n-\t  error (\"invalid operand to pointer plus, second operand is not an \"\n-\t\t \"integer type of appropriate width\");\n-\t  return t;\n-\t}\n-      /* FALLTHROUGH */\n-    case LT_EXPR:\n-    case LE_EXPR:\n-    case GT_EXPR:\n-    case GE_EXPR:\n-    case EQ_EXPR:\n-    case NE_EXPR:\n-    case UNORDERED_EXPR:\n-    case ORDERED_EXPR:\n-    case UNLT_EXPR:\n-    case UNLE_EXPR:\n-    case UNGT_EXPR:\n-    case UNGE_EXPR:\n-    case UNEQ_EXPR:\n-    case LTGT_EXPR:\n     case MULT_EXPR:\n     case TRUNC_DIV_EXPR:\n     case CEIL_DIV_EXPR:\n@@ -3340,6 +3275,23 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n     case BIT_IOR_EXPR:\n     case BIT_XOR_EXPR:\n     case BIT_AND_EXPR:\n+      gcc_unreachable ();\n+\n+    case LT_EXPR:\n+    case LE_EXPR:\n+    case GT_EXPR:\n+    case GE_EXPR:\n+    case EQ_EXPR:\n+    case NE_EXPR:\n+    case UNORDERED_EXPR:\n+    case ORDERED_EXPR:\n+    case UNLT_EXPR:\n+    case UNLE_EXPR:\n+    case UNGT_EXPR:\n+    case UNGE_EXPR:\n+    case UNEQ_EXPR:\n+    case LTGT_EXPR:\n+      /* Reachable via COND_EXPR condition which is GENERIC.  */\n       CHECK_OP (0, \"invalid operand to binary operator\");\n       CHECK_OP (1, \"invalid operand to binary operator\");\n       break;"}]}