{"sha": "b3a50850b16796a6bb2505cabf14571e1e13c656", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNhNTA4NTBiMTY3OTZhNmJiMjUwNWNhYmYxNDU3MWUxZTEzYzY1Ng==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2010-11-09T02:01:06Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2010-11-09T02:01:06Z"}, "message": "Fix PR/46316\n\nFrom-SVN: r166469", "tree": {"sha": "77b19f0611ab2226e65c86445c21d58557e5a8ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77b19f0611ab2226e65c86445c21d58557e5a8ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3a50850b16796a6bb2505cabf14571e1e13c656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a50850b16796a6bb2505cabf14571e1e13c656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3a50850b16796a6bb2505cabf14571e1e13c656", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a50850b16796a6bb2505cabf14571e1e13c656/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5214afa121044b22e6c0b5c662f148f26c089d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5214afa121044b22e6c0b5c662f148f26c089d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5214afa121044b22e6c0b5c662f148f26c089d1"}], "stats": {"total": 60, "additions": 56, "deletions": 4}, "files": [{"sha": "7e080ea5d960373696866b2f7764ca4699a77cc2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a50850b16796a6bb2505cabf14571e1e13c656/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a50850b16796a6bb2505cabf14571e1e13c656/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3a50850b16796a6bb2505cabf14571e1e13c656", "patch": "@@ -1,3 +1,11 @@\n+2010-11-08  Xinliang David Li  <davidxl@google.com>\n+\n+\tPR/46316\n+\t* tree-vrp.c (adjust_range_with_scev): Check double_int\n+\toverflow.\n+\t* double-int.h (double_int_mul_with_sign): New function.\n+\t* double-int.c (double_int_mul_with_sign): New function.\n+\n 2010-11-08  Paul Koning  <ni1d@arrl.net>\n \n \t* config/pdp11/pdp11.md (lshrsi3, lshrhi3): Fix wrong code."}, {"sha": "f3501a5c2c0a79e52f3d380e846db55c81277068", "filename": "gcc/double-int.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a50850b16796a6bb2505cabf14571e1e13c656/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a50850b16796a6bb2505cabf14571e1e13c656/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=b3a50850b16796a6bb2505cabf14571e1e13c656", "patch": "@@ -718,6 +718,19 @@ double_int_mul (double_int a, double_int b)\n   return ret;\n }\n \n+/* Returns A * B. If the operation overflows according to UNSIGNED_P,\n+   *OVERFLOW is set to nonzero.  */\n+\n+double_int\n+double_int_mul_with_sign (double_int a, double_int b,\n+                          bool unsigned_p, int *overflow)\n+{\n+  double_int ret;\n+  *overflow = mul_double_with_sign (a.low, a.high, b.low, b.high,\n+                                    &ret.low, &ret.high, unsigned_p);\n+  return ret;\n+}\n+\n /* Returns A + B.  */\n \n double_int"}, {"sha": "6d1555111d34b852160245f957079b71e5ec9278", "filename": "gcc/double-int.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a50850b16796a6bb2505cabf14571e1e13c656/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a50850b16796a6bb2505cabf14571e1e13c656/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=b3a50850b16796a6bb2505cabf14571e1e13c656", "patch": "@@ -132,6 +132,7 @@ double_int_fits_in_uhwi_p (double_int cst)\n    2 * HOST_BITS_PER_WIDE_INT bits.  */\n \n double_int double_int_mul (double_int, double_int);\n+double_int double_int_mul_with_sign (double_int, double_int, bool, int *);\n double_int double_int_add (double_int, double_int);\n double_int double_int_sub (double_int, double_int);\n double_int double_int_neg (double_int);"}, {"sha": "e94dceff04371723547f955fd4f3af2a2e9283bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a50850b16796a6bb2505cabf14571e1e13c656/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a50850b16796a6bb2505cabf14571e1e13c656/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3a50850b16796a6bb2505cabf14571e1e13c656", "patch": "@@ -1,3 +1,8 @@\n+2010-11-08  Xinliang David Li  <davidxl@google.com>\n+\n+\tPR/46316\n+\t* gcc.dg/tree-ssa/pr46316.c: New test.\n+\t\n 2010-11-08  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/46344"}, {"sha": "9b2e085d7489c68c7042c3227fdef154e2b1c510", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr46316.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a50850b16796a6bb2505cabf14571e1e13c656/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr46316.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a50850b16796a6bb2505cabf14571e1e13c656/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr46316.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr46316.c?ref=b3a50850b16796a6bb2505cabf14571e1e13c656", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void abort (void);\n+\n+long long __attribute__((noinline,noclone))\n+foo (long long t)\n+{\n+  while (t > -4)\n+    t -= 2;\n+\n+  return t;\n+}\n+\n+int main(void)\n+{\n+  if (foo (0) != -4)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "d77cdef2cf518255cb2c663a96a0ba2cfe634c50", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a50850b16796a6bb2505cabf14571e1e13c656/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a50850b16796a6bb2505cabf14571e1e13c656/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b3a50850b16796a6bb2505cabf14571e1e13c656", "patch": "@@ -3403,13 +3403,18 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop,\n     {\n       value_range_t maxvr = { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL };\n       double_int dtmp;\n-      dtmp = double_int_mul (tree_to_double_int (step),\n-\t\t\t     double_int_sub (loop->nb_iterations_upper_bound,\n-\t\t\t\t\t     double_int_one));\n+      bool unsigned_p = TYPE_UNSIGNED (TREE_TYPE (step));\n+      int overflow = 0;\n+\n+      dtmp = double_int_mul_with_sign (tree_to_double_int (step),\n+                                       double_int_sub (\n+                                           loop->nb_iterations_upper_bound,\n+                                           double_int_one),\n+                                       unsigned_p, &overflow);\n       tem = double_int_to_tree (TREE_TYPE (init), dtmp);\n       /* If the multiplication overflowed we can't do a meaningful\n \t adjustment.  */\n-      if (double_int_equal_p (dtmp, tree_to_double_int (tem)))\n+      if (!overflow && double_int_equal_p (dtmp, tree_to_double_int (tem)))\n \t{\n \t  extract_range_from_binary_expr (&maxvr, PLUS_EXPR,\n \t\t\t\t\t  TREE_TYPE (init), init, tem);"}]}