{"sha": "73f4e2d261705d356b2283ae1576e495b74e7992", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNmNGUyZDI2MTcwNWQzNTZiMjI4M2FlMTU3NmU0OTViNzRlNzk5Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-09-15T19:34:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-09-15T19:34:34Z"}, "message": "re PR c++/41933 ([c++0x] lambdas and variadic templates don't work together)\n\n\tPR c++/41933\n\t* cp-tree.h (DECL_PACK_P): Replace FUNCTION_PARAMETER_PACK_P.\n\t* cxx-pretty-print.c (direct_declarator): Adjust.\n\t* decl2.c (cp_build_parm_decl): Adjust.\n\t* pt.c (function_parameter_pack_p): Adjust.\n\t(find_parameter_packs_r, push_template_decl_real): Adjust.\n\t(tsubst_pack_expansion, tsubst_decl): Adjust.\n\t(regenerate_decl_from_template, instantiate_decl): Adjust.\n\nFrom-SVN: r202604", "tree": {"sha": "73fd2b3744f6e61e6845b8bf67f1db8dbd5e42ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73fd2b3744f6e61e6845b8bf67f1db8dbd5e42ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73f4e2d261705d356b2283ae1576e495b74e7992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f4e2d261705d356b2283ae1576e495b74e7992", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f4e2d261705d356b2283ae1576e495b74e7992", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f4e2d261705d356b2283ae1576e495b74e7992/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "018795f47711aa9d4a541a7bae0f27efeea66f12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018795f47711aa9d4a541a7bae0f27efeea66f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/018795f47711aa9d4a541a7bae0f27efeea66f12"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "9234ade438a9b9f8ee33592e21ed3b2540fd1290", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f4e2d261705d356b2283ae1576e495b74e7992/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f4e2d261705d356b2283ae1576e495b74e7992/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=73f4e2d261705d356b2283ae1576e495b74e7992", "patch": "@@ -1,5 +1,14 @@\n 2013-09-15  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/41933\n+\t* cp-tree.h (DECL_PACK_P): Replace FUNCTION_PARAMETER_PACK_P.\n+\t* cxx-pretty-print.c (direct_declarator): Adjust.\n+\t* decl2.c (cp_build_parm_decl): Adjust.\n+\t* pt.c (function_parameter_pack_p): Adjust.\n+\t(find_parameter_packs_r, push_template_decl_real): Adjust.\n+\t(tsubst_pack_expansion, tsubst_decl): Adjust.\n+\t(regenerate_decl_from_template, instantiate_decl): Adjust.\n+\n \t* lambda.c (add_capture): Don't add DECL_LANG_SPECIFIC.\n \n 2013-09-13  Jason Merrill  <jason@redhat.com>"}, {"sha": "4680053f8733b18c81aa7dd634aa0ea4e2766ac9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f4e2d261705d356b2283ae1576e495b74e7992/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f4e2d261705d356b2283ae1576e495b74e7992/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=73f4e2d261705d356b2283ae1576e495b74e7992", "patch": "@@ -138,7 +138,6 @@ c-common.h, not after.\n    1: C_TYPEDEF_EXPLICITLY_SIGNED (in TYPE_DECL).\n       DECL_TEMPLATE_INSTANTIATED (in a VAR_DECL or a FUNCTION_DECL)\n       DECL_MEMBER_TEMPLATE_P (in TEMPLATE_DECL)\n-      FUNCTION_PARAMETER_PACK_P (in PARM_DECL)\n       USING_DECL_TYPENAME_P (in USING_DECL)\n       DECL_VLA_CAPTURE_P (in FIELD_DECL)\n    2: DECL_THIS_EXTERN (in VAR_DECL or FUNCTION_DECL).\n@@ -2874,10 +2873,9 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n    the class definition is complete.  */\n #define TEMPLATE_PARMS_FOR_INLINE(NODE) TREE_LANG_FLAG_1 (NODE)\n \n-/* Determine if a parameter (i.e., a PARM_DECL) is a function\n-   parameter pack.  */\n-#define FUNCTION_PARAMETER_PACK_P(NODE) \\\n-  (DECL_LANG_FLAG_1 (PARM_DECL_CHECK (NODE)))\n+/* Determine if a declaration (PARM_DECL or FIELD_DECL) is a pack.  */\n+#define DECL_PACK_P(NODE) \\\n+  (DECL_P (NODE) && PACK_EXPANSION_P (TREE_TYPE (NODE)))\n \n /* Determines if NODE is an expansion of one or more parameter packs,\n    e.g., a TYPE_PACK_EXPANSION or EXPR_PACK_EXPANSION.  */"}, {"sha": "bcef8760ad7619df42638f07d5c43a952ad82b4f", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f4e2d261705d356b2283ae1576e495b74e7992/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f4e2d261705d356b2283ae1576e495b74e7992/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=73f4e2d261705d356b2283ae1576e495b74e7992", "patch": "@@ -1527,7 +1527,7 @@ cxx_pretty_printer::direct_declarator (tree t)\n \t{\n \t  pp_cxx_space_for_pointer_operator (this, TREE_TYPE (t));\n \n-\t  if ((TREE_CODE (t) == PARM_DECL && FUNCTION_PARAMETER_PACK_P (t))\n+\t  if ((TREE_CODE (t) == PARM_DECL && DECL_PACK_P (t))\n \t      || template_parameter_pack_p (t))\n \t    /* A function parameter pack or non-type template\n \t       parameter pack.  */"}, {"sha": "c51855185d438088eab8cd572a4d7d18bc574ec3", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f4e2d261705d356b2283ae1576e495b74e7992/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f4e2d261705d356b2283ae1576e495b74e7992/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=73f4e2d261705d356b2283ae1576e495b74e7992", "patch": "@@ -188,11 +188,6 @@ cp_build_parm_decl (tree name, tree type)\n   if (!processing_template_decl)\n     DECL_ARG_TYPE (parm) = type_passed_as (type);\n \n-  /* If the type is a pack expansion, then we have a function\n-     parameter pack. */\n-  if (type && TREE_CODE (type) == TYPE_PACK_EXPANSION)\n-    FUNCTION_PARAMETER_PACK_P (parm) = 1;\n-\n   return parm;\n }\n "}, {"sha": "ecae904312f6694c3ae2775049c75453c370e0da", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73f4e2d261705d356b2283ae1576e495b74e7992/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73f4e2d261705d356b2283ae1576e495b74e7992/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=73f4e2d261705d356b2283ae1576e495b74e7992", "patch": "@@ -2852,7 +2852,7 @@ bool\n function_parameter_pack_p (const_tree t)\n {\n   if (t && TREE_CODE (t) == PARM_DECL)\n-    return FUNCTION_PARAMETER_PACK_P (t);\n+    return DECL_PACK_P (t);\n   return false;\n }\n \n@@ -3085,7 +3085,7 @@ find_parameter_packs_r (tree *tp, int *walk_subtrees, void* data)\n       break;\n \n     case PARM_DECL:\n-      if (FUNCTION_PARAMETER_PACK_P (t))\n+      if (DECL_PACK_P (t))\n         {\n           /* We don't want to walk into the type of a PARM_DECL,\n              because we don't want to see the type parameter pack.  */\n@@ -4646,7 +4646,7 @@ push_template_decl_real (tree decl, bool is_friend)\n \n       while (arg && argtype)\n         {\n-          if (!FUNCTION_PARAMETER_PACK_P (arg)\n+          if (!DECL_PACK_P (arg)\n               && check_for_bare_parameter_packs (TREE_TYPE (arg)))\n             {\n             /* This is a PARM_DECL that contains unexpanded parameter\n@@ -9472,7 +9472,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t\t have the wrong value for a recursive call.  Just make a\n \t\t dummy decl, since it's only used for its type.  */\n \t      arg_pack = tsubst_decl (parm_pack, args, complain);\n-\t      if (arg_pack && FUNCTION_PARAMETER_PACK_P (arg_pack))\n+\t      if (arg_pack && DECL_PACK_P (arg_pack))\n \t\t/* Partial instantiation of the parm_pack, we can't build\n \t\t   up an argument pack yet.  */\n \t\targ_pack = NULL_TREE;\n@@ -10465,7 +10465,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n         tree prev_r = NULL_TREE;\n         tree first_r = NULL_TREE;\n \n-        if (FUNCTION_PARAMETER_PACK_P (t))\n+        if (DECL_PACK_P (t))\n           {\n             /* If there is a local specialization that isn't a\n                parameter pack, it means that we're doing a \"simple\"\n@@ -10515,10 +10515,6 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n               /* We're on the Ith parameter of the function parameter\n                  pack.  */\n               {\n-\t\t/* An argument of a function parameter pack is not a parameter\n-\t\t   pack.  */\n-\t\tFUNCTION_PARAMETER_PACK_P (r) = false;\n-\n                 /* Get the Ith type.  */\n                 type = TREE_VEC_ELT (expanded_types, i);\n \n@@ -18705,7 +18701,7 @@ regenerate_decl_from_template (tree decl, tree tmpl)\n       pattern_parm\n \t= skip_artificial_parms_for (code_pattern,\n \t\t\t\t     DECL_ARGUMENTS (code_pattern));\n-      while (decl_parm && !FUNCTION_PARAMETER_PACK_P (pattern_parm))\n+      while (decl_parm && !DECL_PACK_P (pattern_parm))\n \t{\n \t  tree parm_type;\n \t  tree attributes;\n@@ -18728,7 +18724,7 @@ regenerate_decl_from_template (tree decl, tree tmpl)\n \t}\n       /* Merge any parameters that match with the function parameter\n          pack.  */\n-      if (pattern_parm && FUNCTION_PARAMETER_PACK_P (pattern_parm))\n+      if (pattern_parm && DECL_PACK_P (pattern_parm))\n         {\n           int i, len;\n           tree expanded_types;\n@@ -19247,7 +19243,7 @@ instantiate_decl (tree d, int defer_ok,\n \t}\n       for (; tmpl_parm; tmpl_parm = DECL_CHAIN (tmpl_parm))\n \t{\n-\t  if (!FUNCTION_PARAMETER_PACK_P (tmpl_parm))\n+\t  if (!DECL_PACK_P (tmpl_parm))\n \t    {\n \t      register_local_specialization (spec_parm, tmpl_parm);\n \t      spec_parm = DECL_CHAIN (spec_parm);"}]}