{"sha": "22186565977181492c37750e44571a54363d2624", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIxODY1NjU5NzcxODE0OTJjMzc3NTBlNDQ1NzFhNTQzNjNkMjYyNA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2014-11-24T18:58:40Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2014-11-24T18:58:40Z"}, "message": "re PR target/63965 (ICE: in extract_constrain_insn, at recog.c:2230 on ppc64)\n\n2014-11-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/63965\n\t* config/rs6000/rs6000-cpus.def: Undo November 21st changes, a\n\twork in progress patch was committed instead of the fixes for\n\t63965.\n\t* config/rs6000/rs6000.c: Likewise.\n\nFrom-SVN: r218027", "tree": {"sha": "f9bcc515328cb1eaba9c73b4ac549f5b43d7b575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9bcc515328cb1eaba9c73b4ac549f5b43d7b575"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22186565977181492c37750e44571a54363d2624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22186565977181492c37750e44571a54363d2624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22186565977181492c37750e44571a54363d2624", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22186565977181492c37750e44571a54363d2624/comments", "author": null, "committer": null, "parents": [{"sha": "d9d8d4e53f6c82a64ef38ddf899a7419d099b59e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9d8d4e53f6c82a64ef38ddf899a7419d099b59e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9d8d4e53f6c82a64ef38ddf899a7419d099b59e"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "5df9ef66bd454f2c253492ecb3440afc7635e02c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22186565977181492c37750e44571a54363d2624/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22186565977181492c37750e44571a54363d2624/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22186565977181492c37750e44571a54363d2624", "patch": "@@ -1,3 +1,11 @@\n+2014-11-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/63965\n+\t* config/rs6000/rs6000-cpus.def: Undo November 21st changes, a\n+\twork in progress patch was committed instead of the fixes for\n+\t63965.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\n 2014-11-22  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/63671"}, {"sha": "c1a7649c3fb3dcffe6bd48eba08dbe3f446a5246", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22186565977181492c37750e44571a54363d2624/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22186565977181492c37750e44571a54363d2624/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=22186565977181492c37750e44571a54363d2624", "patch": "@@ -38,14 +38,14 @@\n \n   /* For ISA 2.06, don't add ISEL, since in general it isn't a win, but\n      altivec is a win so enable it.  */\n+  /* OPTION_MASK_VSX_TIMODE should be set, but disable it for now until\n+     PR 58587 is fixed.  */\n #define ISA_2_6_MASKS_EMBEDDED\t(ISA_2_5_MASKS_EMBEDDED | OPTION_MASK_POPCNTD)\n #define ISA_2_6_MASKS_SERVER\t(ISA_2_5_MASKS_SERVER\t\t\t\\\n \t\t\t\t | OPTION_MASK_POPCNTD\t\t\t\\\n \t\t\t\t | OPTION_MASK_ALTIVEC\t\t\t\\\n \t\t\t\t | OPTION_MASK_VSX\t\t\t\\\n-\t\t\t\t | OPTION_MASK_UPPER_REGS_DF\t\t\\\n-\t\t\t\t | OPTION_MASK_VSX_TIMODE)\n-\n+\t\t\t\t | OPTION_MASK_UPPER_REGS_DF)\n \n /* For now, don't provide an embedded version of ISA 2.07.  */\n #define ISA_2_7_MASKS_SERVER\t(ISA_2_6_MASKS_SERVER\t\t\t\\\n@@ -188,8 +188,7 @@ RS6000_CPU (\"power6x\", PROCESSOR_POWER6, MASK_POWERPC64 | MASK_PPC_GPOPT\n RS6000_CPU (\"power7\", PROCESSOR_POWER7,   /* Don't add MASK_ISEL by default */\n \t    POWERPC_7400_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_MFCRF\n \t    | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_DFP | MASK_POPCNTD\n-\t    | MASK_VSX | MASK_RECIP_PRECISION | OPTION_MASK_UPPER_REGS_DF\n-\t    | OPTION_MASK_VSX_TIMODE)\n+\t    | MASK_VSX | MASK_RECIP_PRECISION | OPTION_MASK_UPPER_REGS_DF)\n RS6000_CPU (\"power8\", PROCESSOR_POWER8, MASK_POWERPC64 | ISA_2_7_MASKS_SERVER)\n RS6000_CPU (\"powerpc\", PROCESSOR_POWERPC, 0)\n RS6000_CPU (\"powerpc64\", PROCESSOR_POWERPC64, MASK_PPC_GFXOPT | MASK_POWERPC64)"}, {"sha": "ea3e51120140c31c23e67d407e0dd1d59558c960", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22186565977181492c37750e44571a54363d2624/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22186565977181492c37750e44571a54363d2624/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=22186565977181492c37750e44571a54363d2624", "patch": "@@ -7730,6 +7730,13 @@ rs6000_legitimate_address_p (machine_mode mode, rtx x, bool reg_ok_strict)\n       && legitimate_constant_pool_address_p (x, mode,\n \t\t\t\t\t     reg_ok_strict || lra_in_progress))\n     return 1;\n+  /* For TImode, if we have load/store quad and TImode in VSX registers, only\n+     allow register indirect addresses.  This will allow the values to go in\n+     either GPRs or VSX registers without reloading.  The vector types would\n+     tend to go into VSX registers, so we allow REG+REG, while TImode seems\n+     somewhat split, in that some uses are GPR based, and some VSX based.  */\n+  if (mode == TImode && TARGET_QUAD_MEMORY && TARGET_VSX_TIMODE)\n+    return 0;\n   /* If not REG_OK_STRICT (before reload) let pass any stack offset.  */\n   if (! reg_ok_strict\n       && reg_offset_p"}]}