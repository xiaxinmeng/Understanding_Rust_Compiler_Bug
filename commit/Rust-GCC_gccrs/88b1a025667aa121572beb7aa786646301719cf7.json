{"sha": "88b1a025667aa121572beb7aa786646301719cf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhiMWEwMjU2NjdhYTEyMTU3MmJlYjdhYTc4NjY0NjMwMTcxOWNmNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-05-22T08:12:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-05-22T08:12:45Z"}, "message": "acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Add KIND=auto to enable features if target OS is known to support them.\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Add KIND=auto to\n\tenable features if target OS is known to support them.\n\t* configure.ac (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Default to 'auto'.\n\t* configure: Regenerate.\n\nFrom-SVN: r199183", "tree": {"sha": "17261709058f6d97674c28b4fd3d95dce06579e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17261709058f6d97674c28b4fd3d95dce06579e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88b1a025667aa121572beb7aa786646301719cf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b1a025667aa121572beb7aa786646301719cf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88b1a025667aa121572beb7aa786646301719cf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88b1a025667aa121572beb7aa786646301719cf7/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50efa77265f3a9538eec28ba8bba0c1d3d77e192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50efa77265f3a9538eec28ba8bba0c1d3d77e192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50efa77265f3a9538eec28ba8bba0c1d3d77e192"}], "stats": {"total": 184, "additions": 152, "deletions": 32}, "files": [{"sha": "78e016d43a41ec97a0b193a9922d452f4d8faedf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b1a025667aa121572beb7aa786646301719cf7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b1a025667aa121572beb7aa786646301719cf7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=88b1a025667aa121572beb7aa786646301719cf7", "patch": "@@ -1,3 +1,10 @@\n+2013-05-22  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Add KIND=auto to\n+\tenable features if target OS is known to support them.\n+\t* configure.ac (GLIBCXX_ENABLE_LIBSTDCXX_TIME): Default to 'auto'.\n+\t* configure: Regenerate.\n+\n 2013-05-21  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/57336"}, {"sha": "efeb6d49206a7610b402bc3bdfceb98e555dc3a9", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 66, "deletions": 13, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b1a025667aa121572beb7aa786646301719cf7/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b1a025667aa121572beb7aa786646301719cf7/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=88b1a025667aa121572beb7aa786646301719cf7", "patch": "@@ -871,7 +871,8 @@ dnl    (FEATURE, DEFAULT, HELP-ARG, HELP-STRING)\n dnl    (FEATURE, DEFAULT, HELP-ARG, HELP-STRING, permit a|b|c)\n dnl    (FEATURE, DEFAULT, HELP-ARG, HELP-STRING, SHELL-CODE-HANDLER)\n dnl\n-dnl See docs/html/17_intro/configury.html#enable for documentation.\n+dnl See manual/appendix_porting.html#appendix.porting.build_hacking for\n+dnl documentation.\n dnl\n m4_define([GLIBCXX_ENABLE],[dnl\n m4_define([_g_switch],[--enable-$1])dnl\n@@ -1161,8 +1162,9 @@ dnl        nanosleep and sched_yield in libc and libposix4 and, if needed,\n dnl        links in the latter.\n dnl --enable-libstdcxx-time=rt\n dnl        also searches (and, if needed, links) librt.  Note that this is\n-dnl        not always desirable because, in glibc, for example, in turn it\n-dnl        triggers the linking of libpthread too, which activates locking,\n+dnl        not always desirable because, in glibc 2.16 and earlier, for\n+dnl        example, in turn it triggers the linking of libpthread too,\n+dnl        which activates locking,\n dnl        a large overhead for single-thread programs.\n dnl --enable-libstdcxx-time=no\n dnl --disable-libstdcxx-time\n@@ -1175,8 +1177,7 @@ dnl os_defines.h and also defines _GLIBCXX_USE_SCHED_YIELD.\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_TIME], [\n \n-  AC_MSG_CHECKING([for clock_gettime, nanosleep and sched_yield])\n-  GLIBCXX_ENABLE(libstdcxx-time,$1,[[[=KIND]]],\n+  GLIBCXX_ENABLE(libstdcxx-time,auto,[[[=KIND]]],\n     [use KIND for check type],\n     [permit yes|no|rt])\n \n@@ -1188,9 +1189,59 @@ AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_TIME], [\n \n   ac_has_clock_monotonic=no\n   ac_has_clock_realtime=no\n-  AC_MSG_RESULT($enable_libstdcxx_time)\n+  ac_has_nanosleep=no\n+  ac_has_sched_yield=no\n+\n+  if test x\"$enable_libstdcxx_time\" = x\"auto\"; then\n+\n+    case \"${target_os}\" in\n+      cygwin*)\n+        ac_has_nanosleep=yes\n+        ;;\n+      darwin*)\n+        ac_has_nanosleep=yes\n+        ac_has_sched_yield=yes\n+        ;;\n+      gnu* | linux* | kfreebsd*-gnu | knetbsd*-gnu)\n+        AC_MSG_CHECKING([for at least GNU libc 2.17])\n+        AC_TRY_COMPILE(\n+          [#include <features.h>],\n+          [\n+          #if ! __GLIBC_PREREQ(2, 17)\n+          #error \n+          #endif\n+          ],\n+          [glibcxx_glibc217=yes], [glibcxx_glibc217=no])\n+        AC_MSG_RESULT($glibcxx_glibc217)\n+\n+        if test x\"$glibcxx_glibc217\" = x\"yes\"; then\n+          ac_has_clock_monotonic=yes\n+          ac_has_clock_realtime=yes\n+        fi\n+        ac_has_nanosleep=yes\n+        ac_has_sched_yield=yes\n+        ;;\n+      freebsd*|netbsd*)\n+        ac_has_clock_monotonic=yes\n+        ac_has_clock_realtime=yes\n+        ac_has_nanosleep=yes\n+        ac_has_sched_yield=yes\n+        ;;\n+      openbsd*)\n+        ac_has_clock_monotonic=yes\n+        ac_has_clock_realtime=yes\n+        ac_has_nanosleep=yes\n+        ;;\n+      solaris*)\n+        GLIBCXX_LIBS=\"$GLIBCXX_LIBS -lrt\"\n+        ac_has_clock_monotonic=yes\n+        ac_has_clock_realtime=yes\n+        ac_has_nanosleep=yes\n+        ac_has_sched_yield=yes\n+        ;;\n+    esac\n \n-  if test x\"$enable_libstdcxx_time\" != x\"no\"; then\n+  elif test x\"$enable_libstdcxx_time\" != x\"no\"; then\n \n     if test x\"$enable_libstdcxx_time\" = x\"rt\"; then\n       AC_SEARCH_LIBS(clock_gettime, [rt posix4])\n@@ -1214,19 +1265,16 @@ AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_TIME], [\n     case \"$ac_cv_search_sched_yield\" in\n       -lposix4*)\n       GLIBCXX_LIBS=\"$GLIBCXX_LIBS $ac_cv_search_sched_yield\"\n-      AC_DEFINE(_GLIBCXX_USE_SCHED_YIELD, 1,\n-\t\t[ Defined if sched_yield is available. ])\n+      ac_has_sched_yield=yes\n       ;;\n       -lrt*)\n       if test x\"$enable_libstdcxx_time\" = x\"rt\"; then\n \tGLIBCXX_LIBS=\"$GLIBCXX_LIBS $ac_cv_search_sched_yield\"\n-\tAC_DEFINE(_GLIBCXX_USE_SCHED_YIELD, 1,\n-\t\t  [ Defined if sched_yield is available. ])\n+        ac_has_sched_yield=yes\n       fi\n       ;;\n       *)\n-      AC_DEFINE(_GLIBCXX_USE_SCHED_YIELD, 1,\n-\t\t[ Defined if sched_yield is available. ])\n+      ac_has_sched_yield=yes\n       ;;\n     esac\n \n@@ -1284,6 +1332,11 @@ AC_DEFUN([GLIBCXX_ENABLE_LIBSTDCXX_TIME], [\n       [ Defined if clock_gettime has realtime clock support. ])\n   fi\n \n+  if test x\"$ac_has_sched_yield\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_SCHED_YIELD, 1,\n+              [ Defined if sched_yield is available. ])\n+  fi\n+\n   if test x\"$ac_has_nanosleep\" = x\"yes\"; then\n     AC_DEFINE(_GLIBCXX_USE_NANOSLEEP, 1,\n       [ Defined if nanosleep is available. ])"}, {"sha": "29344f06ed22291c58a4c678e8b826a8ebf74925", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 78, "deletions": 17, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b1a025667aa121572beb7aa786646301719cf7/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b1a025667aa121572beb7aa786646301719cf7/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=88b1a025667aa121572beb7aa786646301719cf7", "patch": "@@ -1559,7 +1559,7 @@ Optional Features:\n                           enable extern template [default=yes]\n   --enable-werror         turns on -Werror [default=yes]\n   --enable-libstdcxx-time[=KIND]\n-                          use KIND for check type [default=no]\n+                          use KIND for check type [default=auto]\n   --enable-tls            Use thread-local storage [default=yes]\n   --disable-rpath         do not hardcode runtime library paths\n   --enable-linux-futex    use the Linux futex system call [default=default]\n@@ -19343,11 +19343,8 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n # For clock_gettime, nanosleep and sched_yield support.\n-# NB: The default is [no], because otherwise it requires linking.\n \n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for clock_gettime, nanosleep and sched_yield\" >&5\n-$as_echo_n \"checking for clock_gettime, nanosleep and sched_yield... \" >&6; }\n    # Check whether --enable-libstdcxx-time was given.\n if test \"${enable_libstdcxx_time+set}\" = set; then :\n   enableval=$enable_libstdcxx_time;\n@@ -19357,7 +19354,7 @@ if test \"${enable_libstdcxx_time+set}\" = set; then :\n \t  \t        esac\n \n else\n-  enable_libstdcxx_time=no\n+  enable_libstdcxx_time=auto\n fi\n \n \n@@ -19375,10 +19372,74 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n   ac_has_clock_monotonic=no\n   ac_has_clock_realtime=no\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_libstdcxx_time\" >&5\n-$as_echo \"$enable_libstdcxx_time\" >&6; }\n+  ac_has_nanosleep=no\n+  ac_has_sched_yield=no\n+\n+  if test x\"$enable_libstdcxx_time\" = x\"auto\"; then\n+\n+    case \"${target_os}\" in\n+      cygwin*)\n+        ac_has_nanosleep=yes\n+        ;;\n+      darwin*)\n+        ac_has_nanosleep=yes\n+        ac_has_sched_yield=yes\n+        ;;\n+      gnu* | linux* | kfreebsd*-gnu | knetbsd*-gnu)\n+        { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for at least GNU libc 2.17\" >&5\n+$as_echo_n \"checking for at least GNU libc 2.17... \" >&6; }\n+        cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <features.h>\n+int\n+main ()\n+{\n+\n+          #if ! __GLIBC_PREREQ(2, 17)\n+          #error\n+          #endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_glibc217=yes\n+else\n+  glibcxx_glibc217=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+        { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_glibc217\" >&5\n+$as_echo \"$glibcxx_glibc217\" >&6; }\n+\n+        if test x\"$glibcxx_glibc217\" = x\"yes\"; then\n+          ac_has_clock_monotonic=yes\n+          ac_has_clock_realtime=yes\n+        fi\n+        ac_has_nanosleep=yes\n+        ac_has_sched_yield=yes\n+        ;;\n+      freebsd*|netbsd*)\n+        ac_has_clock_monotonic=yes\n+        ac_has_clock_realtime=yes\n+        ac_has_nanosleep=yes\n+        ac_has_sched_yield=yes\n+        ;;\n+      openbsd*)\n+        ac_has_clock_monotonic=yes\n+        ac_has_clock_realtime=yes\n+        ac_has_nanosleep=yes\n+        ;;\n+      solaris*)\n+        GLIBCXX_LIBS=\"$GLIBCXX_LIBS -lrt\"\n+        ac_has_clock_monotonic=yes\n+        ac_has_clock_realtime=yes\n+        ac_has_nanosleep=yes\n+        ac_has_sched_yield=yes\n+        ;;\n+    esac\n \n-  if test x\"$enable_libstdcxx_time\" != x\"no\"; then\n+  elif test x\"$enable_libstdcxx_time\" != x\"no\"; then\n \n     if test x\"$enable_libstdcxx_time\" = x\"rt\"; then\n       { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing clock_gettime\" >&5\n@@ -19692,22 +19753,16 @@ fi\n     case \"$ac_cv_search_sched_yield\" in\n       -lposix4*)\n       GLIBCXX_LIBS=\"$GLIBCXX_LIBS $ac_cv_search_sched_yield\"\n-\n-$as_echo \"#define _GLIBCXX_USE_SCHED_YIELD 1\" >>confdefs.h\n-\n+      ac_has_sched_yield=yes\n       ;;\n       -lrt*)\n       if test x\"$enable_libstdcxx_time\" = x\"rt\"; then\n \tGLIBCXX_LIBS=\"$GLIBCXX_LIBS $ac_cv_search_sched_yield\"\n-\n-$as_echo \"#define _GLIBCXX_USE_SCHED_YIELD 1\" >>confdefs.h\n-\n+        ac_has_sched_yield=yes\n       fi\n       ;;\n       *)\n-\n-$as_echo \"#define _GLIBCXX_USE_SCHED_YIELD 1\" >>confdefs.h\n-\n+      ac_has_sched_yield=yes\n       ;;\n     esac\n \n@@ -19840,6 +19895,12 @@ $as_echo \"#define _GLIBCXX_USE_CLOCK_REALTIME 1\" >>confdefs.h\n \n   fi\n \n+  if test x\"$ac_has_sched_yield\" = x\"yes\"; then\n+\n+$as_echo \"#define _GLIBCXX_USE_SCHED_YIELD 1\" >>confdefs.h\n+\n+  fi\n+\n   if test x\"$ac_has_nanosleep\" = x\"yes\"; then\n \n $as_echo \"#define _GLIBCXX_USE_NANOSLEEP 1\" >>confdefs.h"}, {"sha": "f6ba176d2a8962ed3db36fe9570f61dcbbc91a0f", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88b1a025667aa121572beb7aa786646301719cf7/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88b1a025667aa121572beb7aa786646301719cf7/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=88b1a025667aa121572beb7aa786646301719cf7", "patch": "@@ -198,8 +198,7 @@ GLIBCXX_COMPUTE_STDIO_INTEGER_CONSTANTS\n GLIBCXX_CHECK_GETTIMEOFDAY\n \n # For clock_gettime, nanosleep and sched_yield support.\n-# NB: The default is [no], because otherwise it requires linking.\n-GLIBCXX_ENABLE_LIBSTDCXX_TIME([no])\n+GLIBCXX_ENABLE_LIBSTDCXX_TIME\n \n AC_LC_MESSAGES\n "}]}