{"sha": "6cd1d2e205a1067b67da328e89ebfc83f90ad625", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkMWQyZTIwNWExMDY3YjY3ZGEzMjhlODllYmZjODNmOTBhZDYyNQ==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2009-04-14T20:19:54Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2009-04-14T20:19:54Z"}, "message": "rs6000.c (rs6000_dwarf_register_span): Fix debug output for other floating point modes.\n\n\t* config/rs6000/rs6000.c (rs6000_dwarf_register_span): Fix debug\n\toutput for other floating point modes.\n\nFrom-SVN: r146060", "tree": {"sha": "64b5b4b2b60cecaa2f1aaf3a3a5daa89d40db6e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64b5b4b2b60cecaa2f1aaf3a3a5daa89d40db6e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cd1d2e205a1067b67da328e89ebfc83f90ad625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd1d2e205a1067b67da328e89ebfc83f90ad625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd1d2e205a1067b67da328e89ebfc83f90ad625", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd1d2e205a1067b67da328e89ebfc83f90ad625/comments", "author": null, "committer": null, "parents": [{"sha": "68a607d8143693c8f4bc66bef001197ea4ff7c84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a607d8143693c8f4bc66bef001197ea4ff7c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a607d8143693c8f4bc66bef001197ea4ff7c84"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "cbdc1a48176f1c3e268edbe97c0fad31639b9730", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd1d2e205a1067b67da328e89ebfc83f90ad625/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd1d2e205a1067b67da328e89ebfc83f90ad625/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cd1d2e205a1067b67da328e89ebfc83f90ad625", "patch": "@@ -1,3 +1,8 @@\n+2009-04-14  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_dwarf_register_span): Fix debug\n+\toutput for other floating point modes.\n+\n 2009-04-14  Diego Novillo  <dnovillo@google.com>\n \t    Le-Chun Wu  <lcwu@google.com>\n "}, {"sha": "9035d13451b494028c961e05e09d840240000b49", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd1d2e205a1067b67da328e89ebfc83f90ad625/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd1d2e205a1067b67da328e89ebfc83f90ad625/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6cd1d2e205a1067b67da328e89ebfc83f90ad625", "patch": "@@ -22689,12 +22689,16 @@ rs6000_is_opaque_type (const_tree type)\n static rtx\n rs6000_dwarf_register_span (rtx reg)\n {\n-  unsigned regno;\n+  rtx parts[8];\n+  int i, words;\n+  unsigned regno = REGNO (reg);\n+  enum machine_mode mode = GET_MODE (reg);\n \n   if (TARGET_SPE\n+      && regno < 32\n       && (SPE_VECTOR_MODE (GET_MODE (reg))\n-\t  || (TARGET_E500_DOUBLE\n-\t      && (GET_MODE (reg) == DFmode || GET_MODE (reg) == DDmode))))\n+\t  || (TARGET_E500_DOUBLE && FLOAT_MODE_P (mode)\n+\t      && mode != SFmode && mode != SDmode && mode != SCmode)))\n     ;\n   else\n     return NULL_RTX;\n@@ -22704,15 +22708,23 @@ rs6000_dwarf_register_span (rtx reg)\n   /* The duality of the SPE register size wreaks all kinds of havoc.\n      This is a way of distinguishing r0 in 32-bits from r0 in\n      64-bits.  */\n-  return\n-    gen_rtx_PARALLEL (VOIDmode,\n-\t\t      BYTES_BIG_ENDIAN\n-\t\t      ? gen_rtvec (2,\n-\t\t\t\t   gen_rtx_REG (SImode, regno + 1200),\n-\t\t\t\t   gen_rtx_REG (SImode, regno))\n-\t\t      : gen_rtvec (2,\n-\t\t\t\t   gen_rtx_REG (SImode, regno),\n-\t\t\t\t   gen_rtx_REG (SImode, regno + 1200)));\n+  words = (GET_MODE_SIZE (mode) + UNITS_PER_FP_WORD - 1) / UNITS_PER_FP_WORD;\n+  gcc_assert (words <= 4);\n+  for (i = 0; i < words; i++, regno++)\n+    {\n+      if (BYTES_BIG_ENDIAN)\n+\t{\n+\t  parts[2 * i] = gen_rtx_REG (SImode, regno + 1200);\n+\t  parts[2 * i + 1] = gen_rtx_REG (SImode, regno);\n+\t}\n+      else\n+\t{\n+\t  parts[2 * i] = gen_rtx_REG (SImode, regno);\n+\t  parts[2 * i + 1] = gen_rtx_REG (SImode, regno + 1200);\n+\t}\n+    }\n+\n+  return gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (words * 2, parts));\n }\n \n /* Fill in sizes for SPE register high parts in table used by unwinder.  */"}]}