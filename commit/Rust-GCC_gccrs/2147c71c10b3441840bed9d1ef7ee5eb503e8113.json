{"sha": "2147c71c10b3441840bed9d1ef7ee5eb503e8113", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE0N2M3MWMxMGIzNDQxODQwYmVkOWQxZWY3ZWU1ZWI1MDNlODExMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-05-04T15:47:25Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-05-04T15:47:25Z"}, "message": "Handle the same VALUE for true dependence.\n\ngcc/\n\n2010-05-04  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR middle-end/43671\n\t* alias.c (true_dependence): Handle the same VALUE in x and mem.\n\t(canon_true_dependence): Likewise.\n\t(write_dependence_p): Likewise.\n\ngcc/testsuite/\n\n2010-05-04  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR middle-end/43671\n\t* gcc.target/i386/pr43671.c: New.\n\nFrom-SVN: r159033", "tree": {"sha": "63a4b6bfbf9c88a0625283367e3485c454e33e20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63a4b6bfbf9c88a0625283367e3485c454e33e20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2147c71c10b3441840bed9d1ef7ee5eb503e8113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2147c71c10b3441840bed9d1ef7ee5eb503e8113", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2147c71c10b3441840bed9d1ef7ee5eb503e8113", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2147c71c10b3441840bed9d1ef7ee5eb503e8113/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85912441e43f7cf1fae2a156198362fb0cb1da81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85912441e43f7cf1fae2a156198362fb0cb1da81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85912441e43f7cf1fae2a156198362fb0cb1da81"}], "stats": {"total": 78, "additions": 73, "deletions": 5}, "files": [{"sha": "a93e1117e38d445965b604840d400d839460a9c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147c71c10b3441840bed9d1ef7ee5eb503e8113/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147c71c10b3441840bed9d1ef7ee5eb503e8113/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2147c71c10b3441840bed9d1ef7ee5eb503e8113", "patch": "@@ -1,3 +1,10 @@\n+2010-05-04  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/43671\n+\t* alias.c (true_dependence): Handle the same VALUE in x and mem.\n+\t(canon_true_dependence): Likewise.\n+\t(write_dependence_p): Likewise.\n+\n 2010-05-04  Jan Hubicka  <jh@suse.cz>\n \n \t* Makefile.in (cgraphbuild.o): Add dependency on ipa-utils.h"}, {"sha": "1d69d9da603b75795ac497c8d33147e5b22c3ffe", "filename": "gcc/alias.c", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147c71c10b3441840bed9d1ef7ee5eb503e8113/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147c71c10b3441840bed9d1ef7ee5eb503e8113/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=2147c71c10b3441840bed9d1ef7ee5eb503e8113", "patch": "@@ -2357,8 +2357,18 @@ true_dependence (const_rtx mem, enum machine_mode mem_mode, const_rtx x,\n   if (mem_mode == VOIDmode)\n     mem_mode = GET_MODE (mem);\n \n-  x_addr = get_addr (XEXP (x, 0));\n-  mem_addr = get_addr (XEXP (mem, 0));\n+  x_addr = XEXP (x, 0);\n+  mem_addr = XEXP (mem, 0);\n+  if (!((GET_CODE (x_addr) == VALUE\n+\t && GET_CODE (mem_addr) != VALUE\n+\t && reg_mentioned_p (x_addr, mem_addr))\n+\t|| (GET_CODE (x_addr) != VALUE\n+\t    && GET_CODE (mem_addr) == VALUE\n+\t    && reg_mentioned_p (mem_addr, x_addr))))\n+    {\n+      x_addr = get_addr (x_addr);\n+      mem_addr = get_addr (mem_addr);\n+    }\n \n   base = find_base_term (x_addr);\n   if (base && (GET_CODE (base) == LABEL_REF\n@@ -2440,7 +2450,16 @@ canon_true_dependence (const_rtx mem, enum machine_mode mem_mode, rtx mem_addr,\n     return 1;\n \n   if (! x_addr)\n-    x_addr = get_addr (XEXP (x, 0));\n+    {\n+      x_addr = XEXP (x, 0);\n+      if (!((GET_CODE (x_addr) == VALUE\n+\t     && GET_CODE (mem_addr) != VALUE\n+\t     && reg_mentioned_p (x_addr, mem_addr))\n+\t    || (GET_CODE (x_addr) != VALUE\n+\t\t&& GET_CODE (mem_addr) == VALUE\n+\t\t&& reg_mentioned_p (mem_addr, x_addr))))\n+\tx_addr = get_addr (x_addr);\n+    }\n \n   if (! base_alias_check (x_addr, mem_addr, GET_MODE (x), mem_mode))\n     return 0;\n@@ -2509,8 +2528,18 @@ write_dependence_p (const_rtx mem, const_rtx x, int writep)\n   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))\n     return 1;\n \n-  x_addr = get_addr (XEXP (x, 0));\n-  mem_addr = get_addr (XEXP (mem, 0));\n+  x_addr = XEXP (x, 0);\n+  mem_addr = XEXP (mem, 0);\n+  if (!((GET_CODE (x_addr) == VALUE\n+\t && GET_CODE (mem_addr) != VALUE\n+\t && reg_mentioned_p (x_addr, mem_addr))\n+\t|| (GET_CODE (x_addr) != VALUE\n+\t    && GET_CODE (mem_addr) == VALUE\n+\t    && reg_mentioned_p (mem_addr, x_addr))))\n+    {\n+      x_addr = get_addr (x_addr);\n+      mem_addr = get_addr (mem_addr);\n+    }\n \n   if (! writep)\n     {"}, {"sha": "5822278f3b95cd7ab5bc666a8d383a14ef06bf73", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147c71c10b3441840bed9d1ef7ee5eb503e8113/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147c71c10b3441840bed9d1ef7ee5eb503e8113/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2147c71c10b3441840bed9d1ef7ee5eb503e8113", "patch": "@@ -1,3 +1,8 @@\n+2010-05-04  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/43671\n+\t* gcc.target/i386/pr43671.c: New.\n+\n 2010-05-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/43705"}, {"sha": "958eaff4453418cedbff7a351d7906a619503ae6", "filename": "gcc/testsuite/gcc.target/i386/pr43671.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2147c71c10b3441840bed9d1ef7ee5eb503e8113/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43671.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2147c71c10b3441840bed9d1ef7ee5eb503e8113/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43671.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43671.c?ref=2147c71c10b3441840bed9d1ef7ee5eb503e8113", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-mtune=i686 -O1 -fpeel-loops -fschedule-insns2 -ftree-vectorize -fsched2-use-superblocks\" } */\n+\n+extern void abort ();\n+\n+int main ()\n+{\n+  struct {\n+    char ca[16];\n+  } s;\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      s.ca[i] = 5;\n+    }\n+\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (s.ca[i] != 5)\n+        abort ();\n+    }\n+\n+  return 0;\n+}"}]}