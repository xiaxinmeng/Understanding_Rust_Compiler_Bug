{"sha": "5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "node_id": "C_kwDOANBUbNoAKDVjZjlhZmM1OTY1ZTM2YWNmNDMwZDBmZWYwYmQxNWZlOGYzNDU0Zjk", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-14T14:08:13Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-15T13:42:07Z"}, "message": "RISC-V: Add ternary constraint tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/ternop_vv_constraint-1.c: New test.\n\t* gcc.target/riscv/rvv/base/ternop_vv_constraint-2.c: New test.\n\t* gcc.target/riscv/rvv/base/ternop_vx_constraint-1.c: New test.\n\t* gcc.target/riscv/rvv/base/ternop_vx_constraint-2.c: New test.\n\t* gcc.target/riscv/rvv/base/ternop_vx_constraint-3.c: New test.\n\t* gcc.target/riscv/rvv/base/ternop_vx_constraint-4.c: New test.\n\t* gcc.target/riscv/rvv/base/ternop_vx_constraint-5.c: New test.\n\t* gcc.target/riscv/rvv/base/ternop_vx_constraint-6.c: New test.\n\t* gcc.target/riscv/rvv/base/ternop_vx_constraint-7.c: New test.", "tree": {"sha": "adbbe10c247a8aed434a6faebb33eda4d8e3e103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adbbe10c247a8aed434a6faebb33eda4d8e3e103"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddd7c2e948923da7ffbed10b85f9bee2eeb42492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd7c2e948923da7ffbed10b85f9bee2eeb42492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd7c2e948923da7ffbed10b85f9bee2eeb42492"}], "stats": {"total": 906, "additions": 906, "deletions": 0}, "files": [{"sha": "838776e5c507b7e055a9e5b93dfb71aa65f96191", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vv_constraint-1.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-1.c?ref=5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vint32m1_t v3 = __riscv_vmacc_vv_i32m1 (v, v2, v2, 4);\n+    vint32m1_t v4 = __riscv_vmacc_vv_i32m1(v3, v2, v2, 4);\n+    v4 = __riscv_vmacc_vv_i32m1 (v4, v2, v2, 4);\n+    v4 = __riscv_vmacc_vv_i32m1 (v4, v2, v2, 4);\n+    v4 = __riscv_vmacc_vv_i32m1 (v4, v2, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void * in2, void *out)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vint32m1_t v3 = __riscv_vmacc_vv_i32m1_tu (v, v2, v2, 4);\n+    vint32m1_t v4 = __riscv_vmacc_vv_i32m1_tu(v3, v2, v2, 4);\n+    v4 = __riscv_vmacc_vv_i32m1_tu (v4, v2, v2, 4);\n+    v4 = __riscv_vmacc_vv_i32m1_tu (v4, v2, v2, 4);\n+    v4 = __riscv_vmacc_vv_i32m1_tu (v4, v2, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvlm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void * in2, void * in3, void *out)\n+{\n+    vbool32_t m = __riscv_vlm_v_b32 (in3, 4);\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vint32m1_t v3 = __riscv_vmacc_vv_i32m1_m (m, v, v2, v2, 4);\n+    vint32m1_t v4 = __riscv_vmacc_vv_i32m1_m(m, v3, v2, v2, 4);\n+    v4 = __riscv_vmacc_vv_i32m1_m (m, v4, v2, v2, 4);\n+    v4 = __riscv_vmacc_vv_i32m1_m (m, v4, v2, v2, 4);\n+    v4 = __riscv_vmacc_vv_i32m1_m (m, v4, v2, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "54506c1c9185a2a0f61bd4da6bd27a74f3d3fed5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vv_constraint-2.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vv_constraint-2.c?ref=5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vint32m1_t v3 = __riscv_vmadd_vv_i32m1 (v, v2, v2, 4);\n+    vint32m1_t v4 = __riscv_vmadd_vv_i32m1(v3, v2, v2, 4);\n+    v4 = __riscv_vmadd_vv_i32m1 (v4, v2, v2, 4);\n+    v4 = __riscv_vmadd_vv_i32m1 (v4, v2, v2, 4);\n+    v4 = __riscv_vmadd_vv_i32m1 (v4, v2, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void * in2, void *out)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vint32m1_t v3 = __riscv_vmadd_vv_i32m1_tu (v, v2, v2, 4);\n+    vint32m1_t v4 = __riscv_vmadd_vv_i32m1_tu(v3, v2, v2, 4);\n+    v4 = __riscv_vmadd_vv_i32m1_tu (v4, v2, v2, 4);\n+    v4 = __riscv_vmadd_vv_i32m1_tu (v4, v2, v2, 4);\n+    v4 = __riscv_vmadd_vv_i32m1_tu (v4, v2, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetivli\\tzero,4,e32,m1,ta,ma\n+**\tvlm\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void * in2, void * in3, void *out)\n+{\n+    vbool32_t m = __riscv_vlm_v_b32 (in3, 4);\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vint32m1_t v3 = __riscv_vmadd_vv_i32m1_m (m, v, v2, v2, 4);\n+    vint32m1_t v4 = __riscv_vmadd_vv_i32m1_m(m, v3, v2, v2, 4);\n+    v4 = __riscv_vmadd_vv_i32m1_m (m, v4, v2, v2, 4);\n+    v4 = __riscv_vmadd_vv_i32m1_m (m, v4, v2, v2, 4);\n+    v4 = __riscv_vmadd_vv_i32m1_m (m, v4, v2, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "90e120655d7b745b466804c456a665b2364feb3d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vx_constraint-1.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-1.c?ref=5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f1:\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvle32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvse32\\.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vint32m1_t v3 = __riscv_vmacc_vx_i32m1 (v, x, v2, 4);\n+    vint32m1_t v4 = __riscv_vmacc_vx_i32m1_tu (v3, x, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,ma\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f2 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in2, 4);\n+    vint32m1_t v3 = __riscv_vmacc_vx_i32m1 (v, x, v2, 4);\n+    vint32m1_t v4 = __riscv_vmacc_vx_i32m1_tu (v3, x, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**\tvsetvli\\t[a-x0-9]+,zero,e8,mf4,ta,ma\n+**\tvlm.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvsetivli\\tzero,4,e32,m1,tu,mu\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\),v0.t\n+**\tvle32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**\tvse32.v\\tv[0-9]+,0\\([a-x0-9]+\\)\n+**\tret\n+*/\n+void f3 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in2, 4);\n+    vint32m1_t v3 = __riscv_vmacc_vx_i32m1 (v, x, v2, 4);\n+    vint32m1_t v4 = __riscv_vmacc_vx_i32m1_tumu (mask, v3, x, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "82815f192799e2e893a77b0b8fb54e1e4d0a8696", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vx_constraint-2.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-2.c?ref=5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1 (in2, 4);\n+    vint32m1_t v3 = __riscv_vmacc_vx_i32m1 (v, x, v2, 4);\n+    vint32m1_t v4 = __riscv_vmacc_vx_i32m1_tu (v3, x, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+void f2 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in2, 4);\n+    vint32m1_t v3 = __riscv_vmacc_vx_i32m1 (v, x, v2, 4);\n+    vint32m1_t v4 = __riscv_vmacc_vx_i32m1_tu (v3, x, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+void f3 (void * in, void * in2, void *out, int32_t x)\n+{\n+    vbool32_t mask = *(vbool32_t*)in;\n+    asm volatile (\"\":::\"memory\");\n+    vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+    vint32m1_t v2 = __riscv_vle32_v_i32m1_m (mask, in2, 4);\n+    vint32m1_t v3 = __riscv_vmacc_vx_i32m1 (v, x, v2, 4);\n+    vint32m1_t v4 = __riscv_vmacc_vx_i32m1_tumu (mask, v3, x, v2, 4);\n+    __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\\s+} 5 } } */\n+/* { dg-final { scan-assembler-times {vma[c-d][c-d]\\.vx\\s+v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,\\s*v0.t} 1 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "8ffba43ab5f944c2a553d860a7470cc3a369857b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vx_constraint-3.c", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-3.c?ref=5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "patch": "@@ -0,0 +1,125 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, -16, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, -16, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, 15, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, 15, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, 16, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, 16, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, 0xAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, 0xAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, 0xAAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, 0xAAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, x, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, x, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "f07ad68cd74c4b728b44972efb33f7271b2c7407", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vx_constraint-4.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-4.c?ref=5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, -16, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, -16, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, 15, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, 15, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, 16, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, 16, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, 0xAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, 0xAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, 0xAAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, 0xAAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1 (v2, x, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1 (v3, x, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "c554036d8e174904103055f74de65b31492261b7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vx_constraint-5.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-5.c?ref=5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tu (v2, -16, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tu (v3, -16, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tu (v2, 15, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tu (v3, 15, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tu (v2, 16, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tu (v3, 16, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tu (v2, 0xAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tu (v3, 0xAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tu (v2, 0xAAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tu (v3, 0xAAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tu (v2, 0xAAAAAAAAAAAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tu (v3, 0xAAAAAAAAAAAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\n+**  ...\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tu (v2, x, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tu (v3, x, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "cb593bcf97fe0bda1cd734c6677aa722d05d5b4e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vx_constraint-6.c", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-6.c?ref=5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "patch": "@@ -0,0 +1,130 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_m (mask, v2, -16, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_m (mask, v3, -16, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_m (mask,v2, 15, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_m (mask,v3, 15, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_m (mask,v2, 16, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_m (mask,v3, 16, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_m (mask,v2, 0xAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_m (mask,v3, 0xAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_m (mask,v2, 0xAAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_m (mask,v3, 0xAAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_m (mask,v2, 0xAAAAAAAAAAAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_m (mask,v3, 0xAAAAAAAAAAAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_m (mask,v2, x, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_m (mask,v3, x, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "e87f6ec3362b1949f6c7551c06a6e1ec87dfcf9c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/ternop_vx_constraint-7.c", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cf9afc5965e36acf430d0fef0bd15fe8f3454f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fternop_vx_constraint-7.c?ref=5cf9afc5965e36acf430d0fef0bd15fe8f3454f9", "patch": "@@ -0,0 +1,130 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tumu (mask, v2, -16, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tumu (mask, v3, -16, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tumu (mask,v2, 15, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tumu (mask,v3, 15, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tumu (mask,v2, 16, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tumu (mask,v3, 16, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tumu (mask,v2, 0xAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tumu (mask,v3, 0xAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vx\\tv[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tumu (mask,v2, 0xAAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tumu (mask,v3, 0xAAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tumu (mask,v2, 0xAAAAAAAAAAAAAAAA, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tumu (mask,v3, 0xAAAAAAAAAAAAAAAA, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**\tvma[c-d][c-d]\\.vv\\tv[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,v0.t\n+**  ...\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vmacc_vx_i64m1_tumu (mask,v2, x, v2, 4);\n+  vint64m1_t v4 = __riscv_vmacc_vx_i64m1_tumu (mask,v3, x, v3, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-not {vmv} } } */"}]}