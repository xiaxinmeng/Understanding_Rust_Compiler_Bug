{"sha": "46da6b3a5a0124b854ec6b9ad518187b8df4e805", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZkYTZiM2E1YTAxMjRiODU0ZWM2YjlhZDUxODE4N2I4ZGY0ZTgwNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-20T09:50:34Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-20T09:50:34Z"}, "message": "(find_reloads, find_reloads_toplev): Treat BYTE_LOADS_SIGN_EXTEND just\nlike BYTE_LOADS_ZERO_EXTEND.\n\nFrom-SVN: r2188", "tree": {"sha": "a626302952c3481a3a6804f723767aea01cb034b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a626302952c3481a3a6804f723767aea01cb034b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46da6b3a5a0124b854ec6b9ad518187b8df4e805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46da6b3a5a0124b854ec6b9ad518187b8df4e805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46da6b3a5a0124b854ec6b9ad518187b8df4e805", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46da6b3a5a0124b854ec6b9ad518187b8df4e805/comments", "author": null, "committer": null, "parents": [{"sha": "3934c98b3078fb16e507cc9e7cae238a72756715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3934c98b3078fb16e507cc9e7cae238a72756715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3934c98b3078fb16e507cc9e7cae238a72756715"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "955af5fb0fd6b7469c5ea49d8ec780be964e65ad", "filename": "gcc/reload.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46da6b3a5a0124b854ec6b9ad518187b8df4e805/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46da6b3a5a0124b854ec6b9ad518187b8df4e805/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=46da6b3a5a0124b854ec6b9ad518187b8df4e805", "patch": "@@ -2285,18 +2285,18 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t      /* Force reload if this is not a register or if there may may\n \t\t be a problem accessing the register in the outer mode.  */\n \t      if (GET_CODE (operand) != REG\n-#ifdef BYTE_LOADS_ZERO_EXTEND\n-\t\t  /* The comment below clearly does not match the code.\n+#if defined(BYTE_LOADS_ZERO_EXTEND) || defined(BYTE_LOADS_SIGN_EXTEND)\n+\t\t  /* ??? The comment below clearly does not match the code.\n \t\t     What the code below actually does is set force_reload\n \t\t     for a paradoxical subreg of a pseudo.  rms and kenner\n \t\t     can't see the point of doing this.  */\n \t\t  /* Nonparadoxical subreg of a pseudoreg.\n \t\t     Don't to load the full width if on this machine\n-\t\t     we expected the fetch to zero-extend.  */\n+\t\t     we expected the fetch to extend.  */\n \t\t  || ((GET_MODE_SIZE (operand_mode[i])\n \t\t       > GET_MODE_SIZE (GET_MODE (operand)))\n \t\t      && REGNO (operand) >= FIRST_PSEUDO_REGISTER)\n-#endif /* BYTE_LOADS_ZERO_EXTEND */\n+#endif\n \t\t  /* Subreg of a hard reg which can't handle the subreg's mode\n \t\t     or which would handle that mode in the wrong number of\n \t\t     registers for subregging to work.  */\n@@ -3422,12 +3422,12 @@ find_reloads_toplev (x, ind_levels, is_set_dest)\n \t not offsettable.  In that case, alter_subreg would produce an\n \t invalid address on big-endian machines.\n \n-\t For machines that zero-extend byte loads, we must not reload using\n+\t For machines that extend byte loads, we must not reload using\n \t a wider mode if we have a paradoxical SUBREG.  find_reloads will\n \t force a reload in that case.  So we should not do anything here.  */\n \n       else if (regno >= FIRST_PSEUDO_REGISTER\n-#ifdef BYTE_LOADS_ZERO_EXTEND\n+#if defined(BYTE_LOADS_ZERO_EXTEND) || defined(BYTE_LOADS_SIGN_EXTEND)\n \t       && (GET_MODE_SIZE (GET_MODE (x))\n \t\t   <= GET_MODE_SIZE (GET_MODE (SUBREG_REG (x))))\n #endif"}]}