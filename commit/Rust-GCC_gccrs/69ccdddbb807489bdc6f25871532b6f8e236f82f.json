{"sha": "69ccdddbb807489bdc6f25871532b6f8e236f82f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjljY2RkZGJiODA3NDg5YmRjNmYyNTg3MTUzMmI2ZjhlMjM2ZjgyZg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-19T13:30:38Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-19T13:30:38Z"}, "message": "common.opt (debug_struct_ordinary, [...]): New Variable entries.\n\n\t* common.opt (debug_struct_ordinary, debug_struct_generic): New\n\tVariable entries.\n\t* dwarf2out.c (matches_main_base, dump_struct_debug, DUMP_GSTRUCT,\n\tshould_emit_struct_debug): Move from opts.c.\n\t* flag-types.h (enum debug_struct_file): Move from opts.c.\n\t* flags.h (should_emit_struct_debug): Remove.\n\t(base_of_path): Declare.\n\t(set_struct_debug_option): Add gcc_options parameter.\n\t* optc-gen.awk, opth-gen.awk: Handle array variables.\n\t* opts.c (enum debug_struct_file, debug_struct_ordinary,\n\tdebug_struct_generic): Remove.\n\t(set_struct_debug_option): Add gcc_options parameter.\n\t(base_of_path): Remove static.\n\t(main_input_basename, main_input_baselength, matches_main_base,\n\tdump_struct_debug, DUMP_GSTRUCT, should_emit_struct_debug):\n\tRemove.\n\t* toplev.c (main_input_basename, main_input_baselength): Define\n\there.\n\t* toplev.h (main_input_basename, main_input_baselength): Declare\n\there.\n\nc-family:\n\t* c-opts.c (c_common_handle_option): Update calls to\n\tset_struct_debug_option.\n\nFrom-SVN: r166944", "tree": {"sha": "7fd6c4c0bba8f7cc2410b5d720f57e9dea16b4a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fd6c4c0bba8f7cc2410b5d720f57e9dea16b4a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69ccdddbb807489bdc6f25871532b6f8e236f82f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ccdddbb807489bdc6f25871532b6f8e236f82f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ccdddbb807489bdc6f25871532b6f8e236f82f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ccdddbb807489bdc6f25871532b6f8e236f82f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a1f6c9c8645b35f6704ded5f1f3f9186dadc109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a1f6c9c8645b35f6704ded5f1f3f9186dadc109"}], "stats": {"total": 350, "additions": 195, "deletions": 155}, "files": [{"sha": "31ace536fda8949e744e65ecb5e99666e785772d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69ccdddbb807489bdc6f25871532b6f8e236f82f", "patch": "@@ -1,3 +1,26 @@\n+2010-11-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt (debug_struct_ordinary, debug_struct_generic): New\n+\tVariable entries.\n+\t* dwarf2out.c (matches_main_base, dump_struct_debug, DUMP_GSTRUCT,\n+\tshould_emit_struct_debug): Move from opts.c.\n+\t* flag-types.h (enum debug_struct_file): Move from opts.c.\n+\t* flags.h (should_emit_struct_debug): Remove.\n+\t(base_of_path): Declare.\n+\t(set_struct_debug_option): Add gcc_options parameter.\n+\t* optc-gen.awk, opth-gen.awk: Handle array variables.\n+\t* opts.c (enum debug_struct_file, debug_struct_ordinary,\n+\tdebug_struct_generic): Remove.\n+\t(set_struct_debug_option): Add gcc_options parameter.\n+\t(base_of_path): Remove static.\n+\t(main_input_basename, main_input_baselength, matches_main_base,\n+\tdump_struct_debug, DUMP_GSTRUCT, should_emit_struct_debug):\n+\tRemove.\n+\t* toplev.c (main_input_basename, main_input_baselength): Define\n+\there.\n+\t* toplev.h (main_input_basename, main_input_baselength): Declare\n+\there.\n+\n 2010-11-19  Joseph Myers  <joseph@codesourcery.com>\n \n \t* common.opt (flag_instrument_functions_exclude_functions,"}, {"sha": "93690687ef60d857a625a19f6e6473b32b1d1df3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=69ccdddbb807489bdc6f25871532b6f8e236f82f", "patch": "@@ -1,3 +1,8 @@\n+2010-11-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-opts.c (c_common_handle_option): Update calls to\n+\tset_struct_debug_option.\n+\n 2010-11-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-common.h (objc_declare_protocols): Added additional argument."}, {"sha": "7d128597bf41b942b01a0a8f0b0c474d239393ff", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=69ccdddbb807489bdc6f25871532b6f8e236f82f", "patch": "@@ -654,15 +654,16 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_femit_struct_debug_baseonly:\n-      set_struct_debug_option (\"base\");\n+      set_struct_debug_option (&global_options, \"base\");\n       break;\n \n     case OPT_femit_struct_debug_reduced:\n-      set_struct_debug_option (\"dir:ord:sys,dir:gen:any,ind:base\");\n+      set_struct_debug_option (&global_options,\n+\t\t\t       \"dir:ord:sys,dir:gen:any,ind:base\");\n       break;\n \n     case OPT_femit_struct_debug_detailed_:\n-      set_struct_debug_option (arg);\n+      set_struct_debug_option (&global_options, arg);\n       break;\n \n     case OPT_idirafter:"}, {"sha": "9e38c4c0a396d7f720a985938d86891ed92f051e", "filename": "gcc/common.opt", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=69ccdddbb807489bdc6f25871532b6f8e236f82f", "patch": "@@ -113,6 +113,19 @@ void *flag_instrument_functions_exclude_functions\n Variable\n void *flag_instrument_functions_exclude_files\n \n+; Generic structs (e.g. templates not explicitly specialized)\n+; may not have a compilation unit associated with them, and so\n+; may need to be treated differently from ordinary structs.\n+;\n+; Structs only handled by reference (indirectly), will also usually\n+; not need as much debugging information.\n+\n+Variable\n+enum debug_struct_file debug_struct_ordinary[DINFO_USAGE_NUM_ENUMS] = { DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY }\n+\n+Variable\n+enum debug_struct_file debug_struct_generic[DINFO_USAGE_NUM_ENUMS] = { DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY }\n+\n ###\n Driver\n "}, {"sha": "32bb4dc929aab2671874488e069f690a53df74e4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=69ccdddbb807489bdc6f25871532b6f8e236f82f", "patch": "@@ -546,6 +546,89 @@ static struct dw_loc_descr_struct *mem_loc_descriptor\n #define DWARF_FRAME_REGNUM(REG) DBX_REGISTER_NUMBER (REG)\n #endif\n \f\n+/* Match the base name of a file to the base name of a compilation unit. */\n+\n+static int\n+matches_main_base (const char *path)\n+{\n+  /* Cache the last query. */\n+  static const char *last_path = NULL;\n+  static int last_match = 0;\n+  if (path != last_path)\n+    {\n+      const char *base;\n+      int length = base_of_path (path, &base);\n+      last_path = path;\n+      last_match = (length == main_input_baselength\n+                    && memcmp (base, main_input_basename, length) == 0);\n+    }\n+  return last_match;\n+}\n+\n+#ifdef DEBUG_DEBUG_STRUCT\n+\n+static int\n+dump_struct_debug (tree type, enum debug_info_usage usage,\n+\t\t   enum debug_struct_file criterion, int generic,\n+\t\t   int matches, int result)\n+{\n+  /* Find the type name. */\n+  tree type_decl = TYPE_STUB_DECL (type);\n+  tree t = type_decl;\n+  const char *name = 0;\n+  if (TREE_CODE (t) == TYPE_DECL)\n+    t = DECL_NAME (t);\n+  if (t)\n+    name = IDENTIFIER_POINTER (t);\n+\n+  fprintf (stderr, \"\tstruct %d %s %s %s %s %d %p %s\\n\",\n+\t   criterion,\n+           DECL_IN_SYSTEM_HEADER (type_decl) ? \"sys\" : \"usr\",\n+           matches ? \"bas\" : \"hdr\",\n+           generic ? \"gen\" : \"ord\",\n+           usage == DINFO_USAGE_DFN ? \";\" :\n+             usage == DINFO_USAGE_DIR_USE ? \".\" : \"*\",\n+           result,\n+           (void*) type_decl, name);\n+  return result;\n+}\n+#define DUMP_GSTRUCT(type, usage, criterion, generic, matches, result) \\\n+  dump_struct_debug (type, usage, criterion, generic, matches, result)\n+\n+#else\n+\n+#define DUMP_GSTRUCT(type, usage, criterion, generic, matches, result) \\\n+  (result)\n+\n+#endif\n+\n+static bool\n+should_emit_struct_debug (tree type, enum debug_info_usage usage)\n+{\n+  enum debug_struct_file criterion;\n+  tree type_decl;\n+  bool generic = lang_hooks.types.generic_p (type);\n+\n+  if (generic)\n+    criterion = debug_struct_generic[usage];\n+  else\n+    criterion = debug_struct_ordinary[usage];\n+\n+  if (criterion == DINFO_STRUCT_FILE_NONE)\n+    return DUMP_GSTRUCT (type, usage, criterion, generic, false, false);\n+  if (criterion == DINFO_STRUCT_FILE_ANY)\n+    return DUMP_GSTRUCT (type, usage, criterion, generic, false, true);\n+\n+  type_decl = TYPE_STUB_DECL (type);\n+\n+  if (criterion == DINFO_STRUCT_FILE_SYS && DECL_IN_SYSTEM_HEADER (type_decl))\n+    return DUMP_GSTRUCT (type, usage, criterion, generic, false, true);\n+\n+  if (matches_main_base (DECL_SOURCE_FILE (type_decl)))\n+    return DUMP_GSTRUCT (type, usage, criterion, generic, true, true);\n+  return DUMP_GSTRUCT (type, usage, criterion, generic, false, false);\n+}\n+\f\n /* Hook used by __throw.  */\n \n rtx"}, {"sha": "6eb6c3f422f6a4f57ed2eb4d69ba6f781f88867e", "filename": "gcc/flag-types.h", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=69ccdddbb807489bdc6f25871532b6f8e236f82f", "patch": "@@ -58,6 +58,41 @@ enum debug_info_usage\n   DINFO_USAGE_NUM_ENUMS\t/* The number of enumerators. */\n };\n \n+/* A major contribution to object and executable size is debug\n+   information size.  A major contribution to debug information size\n+   is struct descriptions replicated in several object files. The\n+   following flags attempt to reduce this information.  The basic\n+   idea is to not emit struct debugging information in the current\n+   compilation unit when that information will be generated by\n+   another compilation unit.\n+\n+   Debug information for a struct defined in the current source\n+   file should be generated in the object file.  Likewise the\n+   debug information for a struct defined in a header should be\n+   generated in the object file of the corresponding source file.\n+   Both of these case are handled when the base name of the file of\n+   the struct definition matches the base name of the source file\n+   of the current compilation unit.  This matching emits minimal\n+   struct debugging information.\n+\n+   The base file name matching rule above will fail to emit debug\n+   information for structs defined in system headers.  So a second\n+   category of files includes system headers in addition to files\n+   with matching bases.\n+\n+   The remaining types of files are library headers and application\n+   headers.  We cannot currently distinguish these two types.  */\n+\n+enum debug_struct_file\n+{\n+  DINFO_STRUCT_FILE_NONE,   /* Debug no structs. */\n+  DINFO_STRUCT_FILE_BASE,   /* Debug structs defined in files with the\n+                               same base name as the compilation unit. */\n+  DINFO_STRUCT_FILE_SYS,    /* Also debug structs defined in system\n+                               header files.  */\n+  DINFO_STRUCT_FILE_ANY     /* Debug structs defined in all files. */\n+};\n+\n /* Enumerate visibility settings.  This is deliberately ordered from most\n    to least visibility.  */\n #ifndef SYMBOL_VISIBILITY_DEFINED"}, {"sha": "4edb7849d4f59d9060c0309721cbe02ab61b3a65", "filename": "gcc/flags.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=69ccdddbb807489bdc6f25871532b6f8e236f82f", "patch": "@@ -37,8 +37,9 @@ extern const char *const debug_type_names[];\n /* Specify how much debugging info to generate.  */\n extern enum debug_info_level debug_info_level;\n \n-extern bool should_emit_struct_debug (tree type_decl, enum debug_info_usage);\n-extern void set_struct_debug_option (const char *value);\n+extern int base_of_path (const char *path, const char **base_out);\n+extern void set_struct_debug_option (struct gcc_options *opts,\n+\t\t\t\t     const char *value);\n \n /* Nonzero means use GNU-only extensions in the generated symbolic\n    debugging information.  */"}, {"sha": "97bbd4312e0b453b87b7e27e989eb1e3632775af", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=69ccdddbb807489bdc6f25871532b6f8e236f82f", "patch": "@@ -91,6 +91,7 @@ for (i = 0; i < n_extra_vars; i++) {\n \t\tsub(\".*= *\", \"\", init)\n \t\tsub(\" *=.*\", \"\", var)\n \t\tsub(\"^.*[ *]\", \"\", var)\n+\t\tsub(\"\\\\[.*\\\\]$\", \"\", var)\n \t} else {\n \t\tinit = \"0\"\n \t}"}, {"sha": "4588a53442860a0fb51285603f0f978714ae88a8", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=69ccdddbb807489bdc6f25871532b6f8e236f82f", "patch": "@@ -86,13 +86,17 @@ for (i = 0; i < n_extra_vars; i++) {\n \torig_var = var\n \tname = var\n \ttype = var\n+\ttype_after = var\n \tsub(\"^.*[ *]\", \"\", name)\n+\tsub(\"\\\\[.*\\\\]$\", \"\", name)\n+\tsub(\"\\\\[.*\\\\]$\", \"\", type)\n \tsub(\" *\" name \"$\", \"\", type)\n+\tsub(\"^.*\" name, \"\", type_after)\n \tvar_seen[name] = 1\n \tprint \"#ifdef GENERATOR_FILE\"\n \tprint \"extern \" orig_var \";\"\n \tprint \"#else\"\n-\tprint \"  \" type \" x_\" name \";\"\n+\tprint \"  \" type \" x_\" name type_after \";\"\n \tprint \"#define \" name \" global_options.x_\" name\n \tprint \"#endif\"\n }"}, {"sha": "dc3278d0bb01d8e657f7520d0123905f51962efe", "filename": "gcc/opts.c", "status": "modified", "additions": 15, "deletions": 149, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=69ccdddbb807489bdc6f25871532b6f8e236f82f", "patch": "@@ -53,53 +53,6 @@ enum debug_info_type write_symbols = NO_DEBUG;\n    the definitions of the different possible levels.  */\n enum debug_info_level debug_info_level = DINFO_LEVEL_NONE;\n \n-/* A major contribution to object and executable size is debug\n-   information size.  A major contribution to debug information size\n-   is struct descriptions replicated in several object files. The\n-   following flags attempt to reduce this information.  The basic\n-   idea is to not emit struct debugging information in the current\n-   compilation unit when that information will be generated by\n-   another compilation unit.\n-\n-   Debug information for a struct defined in the current source\n-   file should be generated in the object file.  Likewise the\n-   debug information for a struct defined in a header should be\n-   generated in the object file of the corresponding source file.\n-   Both of these case are handled when the base name of the file of\n-   the struct definition matches the base name of the source file\n-   of the current compilation unit.  This matching emits minimal\n-   struct debugging information.\n-\n-   The base file name matching rule above will fail to emit debug\n-   information for structs defined in system headers.  So a second\n-   category of files includes system headers in addition to files\n-   with matching bases.\n-\n-   The remaining types of files are library headers and application\n-   headers.  We cannot currently distinguish these two types.  */\n-\n-enum debug_struct_file\n-{\n-  DINFO_STRUCT_FILE_NONE,   /* Debug no structs. */\n-  DINFO_STRUCT_FILE_BASE,   /* Debug structs defined in files with the\n-                               same base name as the compilation unit. */\n-  DINFO_STRUCT_FILE_SYS,    /* Also debug structs defined in system\n-                               header files.  */\n-  DINFO_STRUCT_FILE_ANY     /* Debug structs defined in all files. */\n-};\n-\n-/* Generic structs (e.g. templates not explicitly specialized)\n-   may not have a compilation unit associated with them, and so\n-   may need to be treated differently from ordinary structs.\n-\n-   Structs only handled by reference (indirectly), will also usually\n-   not need as much debugging information.  */\n-\n-static enum debug_struct_file debug_struct_ordinary[DINFO_USAGE_NUM_ENUMS]\n-  = { DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY };\n-static enum debug_struct_file debug_struct_generic[DINFO_USAGE_NUM_ENUMS]\n-  = { DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY, DINFO_STRUCT_FILE_ANY };\n-\n /* Run the second compilation of -fcompare-debug.  Not defined using\n    Var in common.opt because this is used in Ada code and so must be\n    an actual variable not a macro.  */\n@@ -113,7 +66,7 @@ int flag_compare_debug;\n    ? ((string += sizeof prefix - 1), 1) : 0)\n \n void\n-set_struct_debug_option (const char *spec)\n+set_struct_debug_option (struct gcc_options *opts, const char *spec)\n {\n   /* various labels for comparison */\n   static char dfn_lbl[] = \"dfn:\", dir_lbl[] = \"dir:\", ind_lbl[] = \"ind:\";\n@@ -158,46 +111,46 @@ set_struct_debug_option (const char *spec)\n     {\n       if (ord)\n         {\n-          debug_struct_ordinary[DINFO_USAGE_DFN] = files;\n-          debug_struct_ordinary[DINFO_USAGE_DIR_USE] = files;\n-          debug_struct_ordinary[DINFO_USAGE_IND_USE] = files;\n+          opts->x_debug_struct_ordinary[DINFO_USAGE_DFN] = files;\n+          opts->x_debug_struct_ordinary[DINFO_USAGE_DIR_USE] = files;\n+          opts->x_debug_struct_ordinary[DINFO_USAGE_IND_USE] = files;\n         }\n       if (gen)\n         {\n-          debug_struct_generic[DINFO_USAGE_DFN] = files;\n-          debug_struct_generic[DINFO_USAGE_DIR_USE] = files;\n-          debug_struct_generic[DINFO_USAGE_IND_USE] = files;\n+          opts->x_debug_struct_generic[DINFO_USAGE_DFN] = files;\n+          opts->x_debug_struct_generic[DINFO_USAGE_DIR_USE] = files;\n+          opts->x_debug_struct_generic[DINFO_USAGE_IND_USE] = files;\n         }\n     }\n   else\n     {\n       if (ord)\n-        debug_struct_ordinary[usage] = files;\n+        opts->x_debug_struct_ordinary[usage] = files;\n       if (gen)\n-        debug_struct_generic[usage] = files;\n+        opts->x_debug_struct_generic[usage] = files;\n     }\n \n   if (*spec == ',')\n-    set_struct_debug_option (spec+1);\n+    set_struct_debug_option (opts, spec+1);\n   else\n     {\n       /* No more -femit-struct-debug-detailed specifications.\n          Do final checks. */\n       if (*spec != '\\0')\n \terror (\"argument %qs to %<-femit-struct-debug-detailed%> unknown\",\n                spec);\n-      if (debug_struct_ordinary[DINFO_USAGE_DIR_USE]\n-\t\t< debug_struct_ordinary[DINFO_USAGE_IND_USE]\n-\t  || debug_struct_generic[DINFO_USAGE_DIR_USE]\n-\t\t< debug_struct_generic[DINFO_USAGE_IND_USE])\n+      if (opts->x_debug_struct_ordinary[DINFO_USAGE_DIR_USE]\n+\t\t< opts->x_debug_struct_ordinary[DINFO_USAGE_IND_USE]\n+\t  || opts->x_debug_struct_generic[DINFO_USAGE_DIR_USE]\n+\t\t< opts->x_debug_struct_generic[DINFO_USAGE_IND_USE])\n \terror (\"%<-femit-struct-debug-detailed=dir:...%> must allow at least\"\n                \" as much as %<-femit-struct-debug-detailed=ind:...%>\");\n     }\n }\n \n /* Find the base name of a path, stripping off both directories and\n    a single final extension. */\n-static int\n+int\n base_of_path (const char *path, const char **base_out)\n {\n   const char *base = path;\n@@ -221,93 +174,6 @@ base_of_path (const char *path, const char **base_out)\n   return dot - base;\n }\n \n-/* Match the base name of a file to the base name of a compilation unit. */\n-\n-static const char *main_input_basename;\n-static int main_input_baselength;\n-\n-static int\n-matches_main_base (const char *path)\n-{\n-  /* Cache the last query. */\n-  static const char *last_path = NULL;\n-  static int last_match = 0;\n-  if (path != last_path)\n-    {\n-      const char *base;\n-      int length = base_of_path (path, &base);\n-      last_path = path;\n-      last_match = (length == main_input_baselength\n-                    && memcmp (base, main_input_basename, length) == 0);\n-    }\n-  return last_match;\n-}\n-\n-#ifdef DEBUG_DEBUG_STRUCT\n-\n-static int\n-dump_struct_debug (tree type, enum debug_info_usage usage,\n-\t\t   enum debug_struct_file criterion, int generic,\n-\t\t   int matches, int result)\n-{\n-  /* Find the type name. */\n-  tree type_decl = TYPE_STUB_DECL (type);\n-  tree t = type_decl;\n-  const char *name = 0;\n-  if (TREE_CODE (t) == TYPE_DECL)\n-    t = DECL_NAME (t);\n-  if (t)\n-    name = IDENTIFIER_POINTER (t);\n-\n-  fprintf (stderr, \"\tstruct %d %s %s %s %s %d %p %s\\n\",\n-\t   criterion,\n-           DECL_IN_SYSTEM_HEADER (type_decl) ? \"sys\" : \"usr\",\n-           matches ? \"bas\" : \"hdr\",\n-           generic ? \"gen\" : \"ord\",\n-           usage == DINFO_USAGE_DFN ? \";\" :\n-             usage == DINFO_USAGE_DIR_USE ? \".\" : \"*\",\n-           result,\n-           (void*) type_decl, name);\n-  return result;\n-}\n-#define DUMP_GSTRUCT(type, usage, criterion, generic, matches, result) \\\n-  dump_struct_debug (type, usage, criterion, generic, matches, result)\n-\n-#else\n-\n-#define DUMP_GSTRUCT(type, usage, criterion, generic, matches, result) \\\n-  (result)\n-\n-#endif\n-\n-\n-bool\n-should_emit_struct_debug (tree type, enum debug_info_usage usage)\n-{\n-  enum debug_struct_file criterion;\n-  tree type_decl;\n-  bool generic = lang_hooks.types.generic_p (type);\n-\n-  if (generic)\n-    criterion = debug_struct_generic[usage];\n-  else\n-    criterion = debug_struct_ordinary[usage];\n-\n-  if (criterion == DINFO_STRUCT_FILE_NONE)\n-    return DUMP_GSTRUCT (type, usage, criterion, generic, false, false);\n-  if (criterion == DINFO_STRUCT_FILE_ANY)\n-    return DUMP_GSTRUCT (type, usage, criterion, generic, false, true);\n-\n-  type_decl = TYPE_STUB_DECL (type);\n-\n-  if (criterion == DINFO_STRUCT_FILE_SYS && DECL_IN_SYSTEM_HEADER (type_decl))\n-    return DUMP_GSTRUCT (type, usage, criterion, generic, false, true);\n-\n-  if (matches_main_base (DECL_SOURCE_FILE (type_decl)))\n-    return DUMP_GSTRUCT (type, usage, criterion, generic, true, true);\n-  return DUMP_GSTRUCT (type, usage, criterion, generic, false, false);\n-}\n-\n /* Nonzero means use GNU-only extensions in the generated symbolic\n    debugging information.  Currently, this only has an effect when\n    write_symbols is set to DBX_DEBUG, XCOFF_DEBUG, or DWARF_DEBUG.  */"}, {"sha": "78e3afd93afede59f275bc25ac9324892203632b", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=69ccdddbb807489bdc6f25871532b6f8e236f82f", "patch": "@@ -133,6 +133,12 @@ unsigned int save_decoded_options_count;\n \n const char *main_input_filename;\n \n+/* Pointer to base name in main_input_filename, with directories and a\n+   single final extension removed, and the length of this base\n+   name.  */\n+const char *main_input_basename;\n+int main_input_baselength;\n+\n /* Used to enable -fvar-tracking, -fweb and -frename-registers according\n    to optimize in process_options ().  */\n #define AUTODETECT_VALUE 2"}, {"sha": "426c86196c296011086cee58e19b655e867ea889", "filename": "gcc/toplev.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69ccdddbb807489bdc6f25871532b6f8e236f82f/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=69ccdddbb807489bdc6f25871532b6f8e236f82f", "patch": "@@ -73,6 +73,8 @@ extern unsigned local_tick;\n \n /* Top-level source file.  */\n extern const char *main_input_filename;\n+extern const char *main_input_basename;\n+extern int main_input_baselength;\n \n extern const char *profile_data_prefix;\n extern bool exit_after_options;"}]}