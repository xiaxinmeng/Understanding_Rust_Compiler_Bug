{"sha": "730cafefe6b96ddacfd1c2145b39dde68bed4f4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMwY2FmZWZlNmI5NmRkYWNmZDFjMjE0NWIzOWRkZTY4YmVkNGY0Zg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-02-02T11:57:12Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-05-09T02:14:26Z"}, "message": "cris: Enable general \"and\", \"or\", \"xor\", \"not\" to set condition codes.\n\nEnabling dropping of compares with zero of the result, through\nany CCmode substitution.  Beware that this will cause\nsize-suboptimal operands to appear for e.g. 32-bit \"and\":\n-65536, -256, 255, 65535; for 16-bit \"and\" -256, -31..-1, 255;\nfor 8-bit \"and\" -31..-1.  Fixed for 0..31 for 16- and 8-bit\nsizes as it seemed worthwhile and used in libgcc.\n\ngcc:\n\t* config/cris/cris.md (\"*expanded_andsi<setcc><setnz><setnzvc>\"):\n\tRename from \"*expanded_andsi\".\n\t(\"*iorsi3<setcc><setnz><setnzvc>\"): Similar from \"*iorsi3\".\n\tDecorate \"cc\" attribute to make \"cc<cccc><ccnz><ccnzvc>\".\n\t(\"*iorhi3<setcc><setnz><setnzvc>\"): Similar from \"*iorhi3\".\n\t(\"*iorqi3<setcc><setnz><setnzvc>\"): Similar from \"*iorqi3\".\n\t(\"*expanded_andhi<setcc><setnz><setnzvc>\"): Similar from\n\t\"*expanded_andhi\".  Add quick cc-setting alternative for 0..31.\n\t(\"*andqi3<setcc><setnz><setnzvc>\"): Similar from \"*andqi3\".\n\t(\"<acc><anz><anzvc>xorsi3<setcc><setnz><setnzvc>\"): Rename\n\tfrom \"xorsi3\".\n\t(\"<acc><anz><anzvc>one_cmplsi2<setcc><setnz><setnzvc>\"): Rename\n\tfrom \"one_cmplsi2\".", "tree": {"sha": "fed3489dd3558feef1bf4b28b1dc2c767f3244a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fed3489dd3558feef1bf4b28b1dc2c767f3244a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/730cafefe6b96ddacfd1c2145b39dde68bed4f4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730cafefe6b96ddacfd1c2145b39dde68bed4f4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/730cafefe6b96ddacfd1c2145b39dde68bed4f4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730cafefe6b96ddacfd1c2145b39dde68bed4f4f/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e561b9fe0b4b3702e18b7bf12f03b1fbe0d111b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e561b9fe0b4b3702e18b7bf12f03b1fbe0d111b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e561b9fe0b4b3702e18b7bf12f03b1fbe0d111b4"}], "stats": {"total": 64, "additions": 43, "deletions": 21}, "files": [{"sha": "54073e2749d1d42b6e24d27d698adb7e4184890b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730cafefe6b96ddacfd1c2145b39dde68bed4f4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730cafefe6b96ddacfd1c2145b39dde68bed4f4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=730cafefe6b96ddacfd1c2145b39dde68bed4f4f", "patch": "@@ -132,6 +132,19 @@\n \t\"cc\" attribute to \"cc<ccnz>\".\n \t(\"*addqi3<setnz>\"): Similarly from \"*addqi3\".\n \t(\"*sub<mode>3<setnz>\"): Similarly from \"*sub<mode>3\".\n+\t(\"*expanded_andsi<setcc><setnz><setnzvc>\"): Rename from\n+\t\"*expanded_andsi\".\n+\t(\"*iorsi3<setcc><setnz><setnzvc>\"): Similar from \"*iorsi3\".\n+\tDecorate \"cc\" attribute to make \"cc<cccc><ccnz><ccnzvc>\".\n+\t(\"*iorhi3<setcc><setnz><setnzvc>\"): Similar from \"*iorhi3\".\n+\t(\"*iorqi3<setcc><setnz><setnzvc>\"): Similar from \"*iorqi3\".\n+\t(\"*expanded_andhi<setcc><setnz><setnzvc>\"): Similar from\n+\t\"*expanded_andhi\".  Add quick cc-setting alternative for 0..31.\n+\t(\"*andqi3<setcc><setnz><setnzvc>\"): Similar from \"*andqi3\".\n+\t(\"<acc><anz><anzvc>xorsi3<setcc><setnz><setnzvc>\"): Rename\n+\tfrom \"xorsi3\".\n+\t(\"<acc><anz><anzvc>one_cmplsi2<setcc><setnz><setnzvc>\"): Rename\n+\tfrom \"one_cmplsi2\".\n \n 2020-05-08  Vladimir Makarov  <vmakarov@redhat.com>\n "}, {"sha": "6faef6cda0279fe6ddbc0140bbfbdea203eaed2c", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730cafefe6b96ddacfd1c2145b39dde68bed4f4f/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730cafefe6b96ddacfd1c2145b39dde68bed4f4f/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=730cafefe6b96ddacfd1c2145b39dde68bed4f4f", "patch": "@@ -1419,7 +1419,7 @@\n ;; pressure (worse code).  That will hopefully change with an\n ;; improved reload pass.\n \n-(define_insn \"*expanded_andsi\"\n+(define_insn \"*expanded_andsi<setcc><setnz><setnzvc>\"\n   [(set (match_operand:SI 0 \"register_operand\"\t       \"=r,r,r, r,r\")\n \t(and:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0, 0,r\")\n \t\t(match_operand:SI 2 \"general_operand\"   \"I,r,Q>,g,!To\")))\n@@ -1499,10 +1499,12 @@\n \n ;; Catch-all andhi3 pattern.\n \n-(define_insn \"*expanded_andhi\"\n-  [(set (match_operand:HI 0 \"register_operand\"\t       \"=r,r,r, r,r,r,r\")\n-\t(and:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0, 0,0,0,r\")\n-\t\t(match_operand:HI 2 \"general_operand\"   \"I,r,Q>,L,O,g,!To\")))\n+(define_insn \"*expanded_andhi<setcc><setnz><setnzvc>\"\n+  [(set (match_operand:HI 0 \"register_operand\"\t       \"=r,r, r,r, r,r,r,r\")\n+\t(and:HI (match_operand:HI 1 \"register_operand\" \"%0,0, 0,0, 0,0,0,r\")\n+\t\t(match_operand:HI 2 \"general_operand\"   \"I,Kc,r,Q>,L,O,g,!To\")))\n+\t\t;; The \"Kc\" alternative above, is there to match for cmpelim;\n+\t\t;; it will be dominated by the \"I\" alternative at other times.\n    (clobber (reg:CC CRIS_CC0_REGNUM))]\n \n ;; Sidenote: the tightening from \"general_operand\" to\n@@ -1512,15 +1514,17 @@\n \n   \"\"\n   \"@\n+   andq %2,%0\n    andq %2,%0\n    and.w %2,%0\n    and.w %2,%0\n    and.w %2,%0\n    anDq %b2,%0\n    and.w %2,%0\n    and.w %2,%1,%0\"\n-  [(set_attr \"slottable\" \"yes,yes,yes,no,yes,no,no\")\n-   (set_attr \"cc\" \"clobber,normal,normal,normal,clobber,normal,normal\")])\n+  [(set_attr \"slottable\" \"yes,yes,yes,yes,no,yes,no,no\")\n+   (set_attr \"cc<cccc><ccnz><ccnzvc>\"\n+\t     \"clobber,normal,normal,normal,normal,clobber,normal,normal\")])\n \n ;; A strict_low_part pattern.\n \n@@ -1568,21 +1572,23 @@\n   \"\"\n   \"\")\n \n-(define_insn \"*andqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\"\t       \"=r,r,r, r,r,r\")\n-\t(and:QI (match_operand:QI 1 \"register_operand\" \"%0,0,0, 0,0,r\")\n-\t\t(match_operand:QI 2 \"general_operand\"   \"I,r,Q>,O,g,!To\")))\n+(define_insn \"*andqi3<setcc><setnz><setnzvc>\"\n+  [(set (match_operand:QI 0 \"register_operand\"\t       \"=r,r, r,r, r,r,r\")\n+\t(and:QI (match_operand:QI 1 \"register_operand\" \"%0,0, 0,0, 0,0,r\")\n+\t\t(match_operand:QI 2 \"general_operand\"   \"I,Kc,r,Q>,O,g,!To\")))\n    (clobber (reg:CC CRIS_CC0_REGNUM))]\n   \"\"\n   \"@\n+   andq %2,%0\n    andq %2,%0\n    and.b %2,%0\n    and.b %2,%0\n    andQ %b2,%0\n    and.b %2,%0\n    and.b %2,%1,%0\"\n-  [(set_attr \"slottable\" \"yes,yes,yes,yes,no,no\")\n-   (set_attr \"cc\" \"clobber,normal,normal,clobber,normal,normal\")])\n+  [(set_attr \"slottable\" \"yes,yes,yes,yes,yes,no,no\")\n+   (set_attr \"cc<cccc><ccnz><ccnzvc>\"\n+\t     \"clobber,normal,normal,normal,clobber,normal,normal\")])\n \n (define_insn \"*andqi_lowpart\"\n   [(set (strict_low_part\n@@ -1613,7 +1619,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"*iorsi3\"\n+(define_insn \"*iorsi3<setcc><setnz><setnzvc>\"\n   [(set (match_operand:SI 0 \"register_operand\"\t       \"=r,r,r, r,r,r\")\n \t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0, 0,0,r\")\n \t\t(match_operand:SI 2 \"general_operand\"  \"I, r,Q>,n,g,!To\")))\n@@ -1627,9 +1633,10 @@\n    or.d %2,%0\n    or.d %2,%1,%0\"\n   [(set_attr \"slottable\" \"yes,yes,yes,no,no,no\")\n-   (set_attr \"cc\" \"normal,normal,normal,clobber,normal,normal\")])\n+   (set_attr \"cc<cccc><ccnz><ccnzvc>\"\n+\t     \"normal,normal,normal,clobber,normal,normal\")])\n \n-(define_insn \"*iorhi3\"\n+(define_insn \"*iorhi3<setcc><setnz><setnzvc>\"\n   [(set (match_operand:HI 0 \"register_operand\"\t       \"=r,r,r, r,r,r,r\")\n \t(ior:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0, 0,0,0,r\")\n \t\t(match_operand:HI 2 \"general_operand\"   \"I,r,Q>,L,O,g,!To\")))\n@@ -1644,9 +1651,10 @@\n    or.w %2,%0\n    or.w %2,%1,%0\"\n   [(set_attr \"slottable\" \"yes,yes,yes,no,yes,no,no\")\n-   (set_attr \"cc\" \"clobber,normal,normal,normal,clobber,normal,normal\")])\n+   (set_attr \"cc<cccc><ccnz><ccnzvc>\"\n+\t     \"clobber,normal,normal,normal,clobber,normal,normal\")])\n \n-(define_insn \"*iorqi3\"\n+(define_insn \"*iorqi3<setcc><setnz><setnzvc>\"\n   [(set (match_operand:QI 0 \"register_operand\"\t       \"=r,r,r, r,r,r\")\n \t(ior:QI (match_operand:QI 1 \"register_operand\" \"%0,0,0, 0,0,r\")\n \t\t(match_operand:QI 2 \"general_operand\"   \"I,r,Q>,O,g,!To\")))\n@@ -1660,14 +1668,15 @@\n    or.b %2,%0\n    or.b %2,%1,%0\"\n   [(set_attr \"slottable\" \"yes,yes,yes,yes,no,no\")\n-   (set_attr \"cc\" \"clobber,normal,normal,clobber,normal,normal\")])\n+   (set_attr \"cc<cccc><ccnz><ccnzvc>\"\n+\t     \"clobber,normal,normal,clobber,normal,normal\")])\n \f\n ;; Exclusive-or\n \n ;; See comment about \"anddi3\" for xordi3 - no need for such a pattern.\n ;; FIXME: Do we really need the shorter variants?\n \n-(define_insn \"xorsi3\"\n+(define_insn \"<acc><anz><anzvc>xorsi3<setcc><setnz><setnzvc>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(xor:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t(match_operand:SI 2 \"register_operand\" \"r\")))\n@@ -1730,7 +1739,7 @@\n ;; See comment on anddi3 - no need for a DImode pattern.\n ;; See also xor comment.\n \n-(define_insn \"one_cmplsi2\"\n+(define_insn \"<acc><anz><anzvc>one_cmplsi2<setcc><setnz><setnzvc>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(not:SI (match_operand:SI 1 \"register_operand\" \"0\")))\n    (clobber (reg:CC CRIS_CC0_REGNUM))]"}]}