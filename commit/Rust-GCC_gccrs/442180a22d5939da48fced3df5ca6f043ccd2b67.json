{"sha": "442180a22d5939da48fced3df5ca6f043ccd2b67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQyMTgwYTIyZDU5MzlkYTQ4ZmNlZDNkZjVjYTZmMDQzY2NkMmI2Nw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-02-26T13:31:32Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-02-26T13:31:32Z"}, "message": "re PR target/49263 (SH Target: underutilized \"TST #imm, R0\" instruction)\n\n\tPR target/49263\n\t* gcc.target/sh/pr49263.c: New.\n\nFrom-SVN: r184585", "tree": {"sha": "4d716f7806bb9bff5284d70a4647b78d4118a914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d716f7806bb9bff5284d70a4647b78d4118a914"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/442180a22d5939da48fced3df5ca6f043ccd2b67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442180a22d5939da48fced3df5ca6f043ccd2b67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/442180a22d5939da48fced3df5ca6f043ccd2b67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442180a22d5939da48fced3df5ca6f043ccd2b67/comments", "author": null, "committer": null, "parents": [{"sha": "e1ba5608b92e9f1637f36f345032c00eb2796158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1ba5608b92e9f1637f36f345032c00eb2796158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1ba5608b92e9f1637f36f345032c00eb2796158"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "b79b023d9af4a219a6ebd897d8d3531ea0dfa4f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442180a22d5939da48fced3df5ca6f043ccd2b67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442180a22d5939da48fced3df5ca6f043ccd2b67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=442180a22d5939da48fced3df5ca6f043ccd2b67", "patch": "@@ -1,3 +1,8 @@\n+2012-02-26  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/49263\n+\t* gcc.target/sh/pr49263.c: New.\n+\n 2012-02-24  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gcc.dg/simulate-thread/simulate-thread.gdb: Use return value from"}, {"sha": "b5ffe714fa89befe9449a783c27e0fc7406fedc1", "filename": "gcc/testsuite/gcc.target/sh/pr49263.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/442180a22d5939da48fced3df5ca6f043ccd2b67/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/442180a22d5939da48fced3df5ca6f043ccd2b67/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49263.c?ref=442180a22d5939da48fced3df5ca6f043ccd2b67", "patch": "@@ -0,0 +1,86 @@\n+/* Verify that TST #imm, R0 instruction is generated if the constant\n+   allows it.  Under some circumstances another compare instruction might\n+   be selected, which is also fine.  Any AND instructions are considered\n+   counter productive and fail the test.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"and\" } } */\n+\n+#define make_func(__valtype__, __valget__, __tstval__, __suff__)\\\n+  int test_imm_##__tstval__##__suff__ (__valtype__ val) \\\n+    {\\\n+      return ((__valget__) & (0x##__tstval__  << 0)) ? -20 : -40;\\\n+    }\n+\n+#define make_func_0_F(__valtype__, __valget__, __y__, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##0, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##1, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##2, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##3, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##4, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##5, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##6, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##7, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##8, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##9, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##A, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##B, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##C, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##D, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##E, __suff__)\\\n+  make_func (__valtype__, __valget__, __y__##F, __suff__)\\\n+\n+#define make_funcs_0_FF(__valtype__, __valget__, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 0, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 1, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 2, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 3, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 4, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 5, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 6, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 7, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 8, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, 9, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, A, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, B, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, C, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, D, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, E, __suff__)\\\n+  make_func_0_F (__valtype__, __valget__, F, __suff__)\\\n+\n+make_funcs_0_FF (signed char*, *val, int8_mem)\n+make_funcs_0_FF (signed char, val, int8_reg)\n+\n+make_funcs_0_FF (unsigned char*, *val, uint8_mem)\n+make_funcs_0_FF (unsigned char, val, uint8_reg)\n+\n+make_funcs_0_FF (short*, *val, int16_mem)\n+make_funcs_0_FF (short, val, int16_reg)\n+\n+make_funcs_0_FF (unsigned short*, *val, uint16_mem)\n+make_funcs_0_FF (unsigned short, val, uint16_reg)\n+\n+make_funcs_0_FF (int*, *val, int32_mem)\n+make_funcs_0_FF (int, val, int32_reg)\n+\n+make_funcs_0_FF (unsigned int*, *val, uint32_mem)\n+make_funcs_0_FF (unsigned int, val, uint32_reg)\n+\n+make_funcs_0_FF (long long*, *val, int64_lowword_mem)\n+make_funcs_0_FF (long long, val, int64_lowword_reg)\n+\n+make_funcs_0_FF (unsigned long long*, *val, uint64_lowword_mem)\n+make_funcs_0_FF (unsigned long long, val, uint64_lowword_reg)\n+\n+make_funcs_0_FF (long long*, *val >> 32, int64_highword_mem)\n+make_funcs_0_FF (long long, val >> 32, int64_highword_reg)\n+\n+make_funcs_0_FF (unsigned long long*, *val >> 32, uint64_highword_mem)\n+make_funcs_0_FF (unsigned long long, val >> 32, uint64_highword_reg)\n+\n+make_funcs_0_FF (long long*, *val >> 16, int64_midword_mem)\n+make_funcs_0_FF (long long, val >> 16, int64_midword_reg)\n+\n+make_funcs_0_FF (unsigned long long*, *val >> 16, uint64_midword_mem)\n+make_funcs_0_FF (unsigned long long, val >> 16, uint64_midword_reg)\n+"}]}