{"sha": "161897403ed49d37f05034008193379c8a2bc897", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYxODk3NDAzZWQ0OWQzN2YwNTAzNDAwODE5MzM3OWM4YTJiYzg5Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-03-28T05:58:50Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-03-28T05:58:50Z"}, "message": "Add CCZmode.\n\nFrom-SVN: r32777", "tree": {"sha": "030d5a149fbb74c03a56bbda6b240d94f2c06dd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/030d5a149fbb74c03a56bbda6b240d94f2c06dd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/161897403ed49d37f05034008193379c8a2bc897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/161897403ed49d37f05034008193379c8a2bc897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/161897403ed49d37f05034008193379c8a2bc897", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/161897403ed49d37f05034008193379c8a2bc897/comments", "author": null, "committer": null, "parents": [{"sha": "8e4b9c9713984c220fb3e715ee6fa5d9148a3398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4b9c9713984c220fb3e715ee6fa5d9148a3398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e4b9c9713984c220fb3e715ee6fa5d9148a3398"}], "stats": {"total": 747, "additions": 426, "deletions": 321}, "files": [{"sha": "4f72a1b13358527d28f3269fe93fc4186cf91416", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161897403ed49d37f05034008193379c8a2bc897/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161897403ed49d37f05034008193379c8a2bc897/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=161897403ed49d37f05034008193379c8a2bc897", "patch": "@@ -1,3 +1,41 @@\n+2000-03-27  Richard Henderson  <rth@cygnus.com>\n+\n+\t* i386-protos.h (ix86_match_ccmode): Declare.\n+\t* i386.c (ix86_match_ccmode): New.\n+\t(ix86_expand_fp_compare): Update for pattern renames.\n+\t(ix86_expand_strlensi_unroll_1): Likewise.\n+\t* i386.h (EXTRA_CC_MODES): Add CCZ.\n+\t(SELECT_CC_MODE): Use it for EQ/NE zero.\n+\t* i386.md (cmpsi_ccz_1): New.\n+\t(cmpqi_ccz_1): New.\n+\t(*testsi_ccz_1): New.\n+\t(testqi_ccz_1): New.\n+\t(cmpsi_ccno_1): Rename from cmpsi_0.\n+\t(testsi_ccno_1): Rename from testsi_1.\n+\t(testqi_ccno_1): Rename from testqi_1.\n+\t(*testqi_ext_ccz_0): Rename from testqi_ext_0.\n+\t(testqi_ext_ccno_0): Rename from *testqi_ext_1.\n+\t(*cmphi_0): Use ix86_match_ccmode.\n+\t(*cmpqi_ext_2, *addsi_2, *addhi_2, *addqi_2): Likewise.\n+\t(*subsi_2, *subhi_2, *subqi_2, *testhi_1): Likewise.\n+\t(*testqi_ext_1, *testqi_ext_2, *testqi_ext_3): Likewise.\n+\t(*andsi_2, *andhi_2, *andqi_2, *andqi_ext_0_cc): Likewise.\n+\t(*iorsi_2, *iorhi_2, *iorqi_2): Likewise.\n+\t(*xorsi_2, *xorhi_2, *xorqi_cc_1): Likewise.\n+\t(*one_cmplsi2_2, *one_cmplhi2_2, *one_cmplqi2_2): Likewise.\n+\t(*ashlsi3_cmpno, *ashlhi3_cmpno, *ashlqi3_cmpno): Likewise.\n+\t(*ashrsi3_cmpno, *ashrhi3_cmpno, *ashrqi3_cmpno): Likewise.\n+\t(*lshrsi3_cmpno, *lshrhi3_cmpno, *lshrqi3_cmpno): Likewise.\n+\t(appropriate peepholes): Likewise.\n+\t(*cmphi_1, *cmpqi_ccno_1, *cmpqi_1): Star out name.\n+\t(*subsi_3, *subhi_3, *subqi_3): Remove.\n+\t(*negdi2_1+1 splitter): Use CCZ for neg patterns.\n+\t(*negsi2_cmp, *neghi2_cmp, *negqi2_cmp): Remove.\n+\t(*negsi2_cmpz): Rename from *negsi2_cmpno, use CCZ.\n+\t(*neghi2_cmpz, *negqi2_cmpz): Similarly.\n+\t(x86_shift_adj_1): Use CCZ.\n+\t(*dbra_ge+1, *dbra_ge+2, ffssi2, ffssi_1): Likewise.\n+\n 2000-03-27  Stan Cox  <scox@cygnus.com>\t\n \n \t* resource.h (mark_resource_type): New."}, {"sha": "d73fc5ef99d523d55670b8abb9774d20ea5fc73e", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161897403ed49d37f05034008193379c8a2bc897/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161897403ed49d37f05034008193379c8a2bc897/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=161897403ed49d37f05034008193379c8a2bc897", "patch": "@@ -96,6 +96,7 @@ extern void ix86_expand_unary_operator PARAMS ((enum rtx_code, enum machine_mode\n \t\t\t\t\t      rtx[]));\n extern int ix86_unary_operator_ok PARAMS ((enum rtx_code, enum machine_mode,\n \t\t\t\t\t rtx[]));\n+extern int ix86_match_ccmode PARAMS ((rtx, enum machine_mode));\n extern void ix86_expand_branch PARAMS ((enum rtx_code, int, rtx));\n extern int ix86_expand_setcc PARAMS ((enum rtx_code, int, rtx));\n extern int ix86_expand_int_movcc PARAMS ((rtx[]));"}, {"sha": "9c755a56aa8070de98bf754d8e8383680166b9ff", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 60, "deletions": 20, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161897403ed49d37f05034008193379c8a2bc897/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161897403ed49d37f05034008193379c8a2bc897/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=161897403ed49d37f05034008193379c8a2bc897", "patch": "@@ -1373,7 +1373,7 @@ memory_displacement_operand (op, mode)\n   return parts.disp != NULL_RTX;\n }\n \n-/* To avoid problems when jump re-emits comparisons like testqi_ext_0,\n+/* To avoid problems when jump re-emits comparisons like testqi_ext_ccno_0,\n    re-recognize the operand to avoid a copy_to_mode_reg that will fail.\n \n    ??? It seems likely that this will only work because cmpsi is an\n@@ -4252,6 +4252,45 @@ ix86_unary_operator_ok (code, mode, operands)\n   return TRUE;\n }\n \n+/* Return TRUE or FALSE depending on whether the first SET in INSN\n+   has source and destination with matching CC modes, and that the\n+   CC mode is at least as constrained as REQ_MODE.  */\n+\n+int\n+ix86_match_ccmode (insn, req_mode)\n+     rtx insn;\n+     enum machine_mode req_mode;\n+{\n+  rtx set;\n+  enum machine_mode set_mode;\n+\n+  set = PATTERN (insn);\n+  if (GET_CODE (set) == PARALLEL)\n+    set = XVECEXP (set, 0, 0);\n+  if (GET_CODE (set) != SET)\n+    abort ();\n+\n+  set_mode = GET_MODE (SET_DEST (set));\n+  switch (set_mode)\n+    {\n+    case CCmode:\n+      if (req_mode == CCNOmode)\n+\treturn 0;\n+      /* FALLTHRU */\n+    case CCNOmode:\n+      if (req_mode == CCZmode)\n+\treturn 0;\n+      /* FALLTHRU */\n+    case CCZmode:\n+      break;\n+\n+    default:\n+      abort ();\n+    }\n+\n+  return (GET_MODE (SET_SRC (set)) == set_mode);\n+}\n+\n /* Produce an unsigned comparison for a given signed comparison.  */\n \n static enum rtx_code\n@@ -4455,7 +4494,7 @@ ix86_expand_fp_compare (code, op0, op1, unordered)\n \t\t  abort ();\n \t\t}\n \n-\t      emit_insn (gen_testqi_ext_0 (tmp, GEN_INT (mask)));\n+\t      emit_insn (gen_testqi_ext_ccno_0 (tmp, GEN_INT (mask)));\n \t      intcmp_mode = CCNOmode;\n \t    }\n \t}\n@@ -4470,7 +4509,7 @@ ix86_expand_fp_compare (code, op0, op1, unordered)\n \t  switch (code)\n \t    {\n \t    case GT:\n-\t      emit_insn (gen_testqi_ext_0 (tmp, GEN_INT (0x45)));\n+\t      emit_insn (gen_testqi_ext_ccno_0 (tmp, GEN_INT (0x45)));\n \t      code = EQ;\n \t      break;\n \t    case LT:\n@@ -4480,7 +4519,7 @@ ix86_expand_fp_compare (code, op0, op1, unordered)\n \t      code = EQ;\n \t      break;\n \t    case GE:\n-\t      emit_insn (gen_testqi_ext_0 (tmp, GEN_INT (0x05)));\n+\t      emit_insn (gen_testqi_ext_ccno_0 (tmp, GEN_INT (0x05)));\n \t      code = EQ;\n \t      break;\n \t    case LE:\n@@ -5490,7 +5529,8 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n   rtx align_4_label = gen_label_rtx ();\n   rtx end_0_label = gen_label_rtx ();\n   rtx mem;\n-  rtx flags = gen_rtx_REG (CCNOmode, FLAGS_REG);\n+  rtx no_flags = gen_rtx_REG (CCNOmode, FLAGS_REG);\n+  rtx z_flags = gen_rtx_REG (CCNOmode, FLAGS_REG);\n   rtx tmpreg = gen_reg_rtx (SImode);\n \n   align = 0;\n@@ -5512,25 +5552,25 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n \t  align_rtx = expand_binop (SImode, and_optab, scratch, GEN_INT (3),\n \t\t\t\t    NULL_RTX, 0, OPTAB_WIDEN);\n \n-\t  emit_insn (gen_cmpsi_0 (align_rtx, const0_rtx));\n+\t  emit_insn (gen_cmpsi_ccz_1 (align_rtx, const0_rtx));\n \n-\t  tmp = gen_rtx_EQ (VOIDmode, flags, const0_rtx);\n+\t  tmp = gen_rtx_EQ (VOIDmode, z_flags, const0_rtx);\n \t  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n \t\t\t\t      gen_rtx_LABEL_REF (VOIDmode,\n \t\t\t\t\t\t\t align_4_label),\n \t\t\t\t      pc_rtx);\n \t  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n \n-\t  emit_insn (gen_cmpsi_1 (align_rtx, GEN_INT (2)));\n+\t  emit_insn (gen_cmpsi_ccno_1 (align_rtx, GEN_INT (2)));\n \n-\t  tmp = gen_rtx_EQ (VOIDmode, flags, const0_rtx);\n+\t  tmp = gen_rtx_EQ (VOIDmode, no_flags, const0_rtx);\n \t  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n \t\t\t\t      gen_rtx_LABEL_REF (VOIDmode,\n \t\t\t\t\t\t\t align_2_label),\n \t\t\t\t      pc_rtx);\n \t  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n \n-\t  tmp = gen_rtx_GTU (VOIDmode, flags, const0_rtx);\n+\t  tmp = gen_rtx_GTU (VOIDmode, no_flags, const0_rtx);\n \t  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n \t\t\t\t      gen_rtx_LABEL_REF (VOIDmode,\n \t\t\t\t\t\t\t align_3_label),\n@@ -5545,9 +5585,9 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n \t  align_rtx = expand_binop (SImode, and_optab, scratch, GEN_INT (2),\n \t\t\t\t    NULL_RTX, 0, OPTAB_WIDEN);\n \n-\t  emit_insn (gen_cmpsi_0 (align_rtx, const0_rtx));\n+\t  emit_insn (gen_cmpsi_ccz_1 (align_rtx, const0_rtx));\n \n-\t  tmp = gen_rtx_EQ (VOIDmode, flags, const0_rtx);\n+\t  tmp = gen_rtx_EQ (VOIDmode, z_flags, const0_rtx);\n \t  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n \t\t\t\t      gen_rtx_LABEL_REF (VOIDmode,\n \t\t\t\t\t\t\t align_4_label),\n@@ -5560,9 +5600,9 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n       /* Now compare the bytes.  */\n \n       /* Compare the first n unaligned byte on a byte per byte basis. */\n-      emit_insn (gen_cmpqi_0 (mem, const0_rtx));\n+      emit_insn (gen_cmpqi_ccz_1 (mem, const0_rtx));\n \n-      tmp = gen_rtx_EQ (VOIDmode, flags, const0_rtx);\n+      tmp = gen_rtx_EQ (VOIDmode, z_flags, const0_rtx);\n       tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n \t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, end_0_label),\n \t\t\t\t  pc_rtx);\n@@ -5576,9 +5616,9 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n \t{\n \t  emit_label (align_2_label);\n \n-\t  emit_insn (gen_cmpqi_0 (mem, const0_rtx));\n+\t  emit_insn (gen_cmpqi_ccz_1 (mem, const0_rtx));\n \n-\t  tmp = gen_rtx_EQ (VOIDmode, flags, const0_rtx);\n+\t  tmp = gen_rtx_EQ (VOIDmode, z_flags, const0_rtx);\n \t  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n \t\t\t\t      gen_rtx_LABEL_REF (VOIDmode,\n \t\t\t\t\t\t\t end_0_label),\n@@ -5590,9 +5630,9 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n \t  emit_label (align_3_label);\n \t}\n \n-      emit_insn (gen_cmpqi_0 (mem, const0_rtx));\n+      emit_insn (gen_cmpqi_ccz_1 (mem, const0_rtx));\n \n-      tmp = gen_rtx_EQ (VOIDmode, flags, const0_rtx);\n+      tmp = gen_rtx_EQ (VOIDmode, z_flags, const0_rtx);\n       tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp, \n \t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, end_0_label),\n \t\t\t\t  pc_rtx);\n@@ -5626,7 +5666,7 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n        emit_insn (gen_lshrsi3 (reg, reg, GEN_INT (16)));\n \n        /* If zero is not in the first two bytes, move two bytes forward. */\n-       emit_insn (gen_testsi_1 (tmpreg, GEN_INT (0x8080)));\n+       emit_insn (gen_testsi_ccno_1 (tmpreg, GEN_INT (0x8080)));\n        tmp = gen_rtx_REG (CCNOmode, FLAGS_REG);\n        tmp = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n        emit_insn (gen_rtx_SET (VOIDmode, tmpreg,\n@@ -5650,7 +5690,7 @@ ix86_expand_strlensi_unroll_1 (out, align_rtx, scratch)\n        rtx end_2_label = gen_label_rtx ();\n        /* Is zero in the first two bytes? */\n \n-       emit_insn (gen_testsi_1 (tmpreg, GEN_INT (0x8080)));\n+       emit_insn (gen_testsi_ccno_1 (tmpreg, GEN_INT (0x8080)));\n        tmp = gen_rtx_REG (CCNOmode, FLAGS_REG);\n        tmp = gen_rtx_NE (VOIDmode, tmp, const0_rtx);\n        tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,"}, {"sha": "d042418ca708133dbe7049ee548a84cd119b6158", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161897403ed49d37f05034008193379c8a2bc897/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161897403ed49d37f05034008193379c8a2bc897/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=161897403ed49d37f05034008193379c8a2bc897", "patch": "@@ -2160,10 +2160,13 @@ while (0)\n \n    Add CCNO to indicate No Overflow, which is often also includes\n    No Carry.  This is typically used on the output of logicals,\n-   and is only valid in comparisons against zero.  */\n+   and is only valid in comparisons against zero.\n+\n+   Add CCZ to indicate that only the Zero flag is valid.  */\n \n #define EXTRA_CC_MODES \\\n \tCC(CCNOmode, \"CCNO\") \\\n+\tCC(CCZmode, \"CCZ\") \\\n \tCC(CCFPmode, \"CCFP\") \\\n \tCC(CCFPUmode, \"CCFPU\")\n \n@@ -2173,15 +2176,15 @@ while (0)\n    For floating-point equality comparisons, CCFPEQmode should be used.\n    VOIDmode should be used in all other cases.\n \n-   For integer comparisons against zero, reduce to CCNOmode if\n+   For integer comparisons against zero, reduce to CCNOmode or CCZmode if\n    possible, to allow for more combinations.  */\n \n #define SELECT_CC_MODE(OP,X,Y)\t\t\t\t\\\n   (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\t\\\n    ? (OP) == EQ || (OP) == NE ? CCFPUmode : CCFPmode\t\\\n    : (OP) == LE || (OP) == GT ? CCmode\t\t\t\\\n    : (Y) != const0_rtx ? CCmode\t\t\t\t\\\n-   : CCNOmode)\n+   : (OP) == EQ || (OP) == NE ? CCZmode : CCNOmode)\n \f\n /* Control the assembler format that we output, to the extent\n    this does not vary between assemblers.  */"}, {"sha": "c981d091a736b7e3779fb7d810aaf4c93d104645", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 321, "deletions": 298, "changes": 619, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/161897403ed49d37f05034008193379c8a2bc897/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/161897403ed49d37f05034008193379c8a2bc897/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=161897403ed49d37f05034008193379c8a2bc897", "patch": "@@ -911,7 +911,17 @@\n   DONE;\n }\")\n \n-(define_insn \"cmpsi_0\"\n+(define_insn \"cmpsi_ccz_1\"\n+  [(set (reg:CCZ 17)\n+\t(compare:CCZ (match_operand:SI 0 \"nonimmediate_operand\" \"r,?mr\")\n+\t\t     (match_operand:SI 1 \"const0_operand\" \"n,n\")))]\n+  \"\"\n+  \"@\n+   test{l}\\\\t{%0, %0|%0, %0}\n+   cmp{l}\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"icmp\")])\n+\n+(define_insn \"cmpsi_ccno_1\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO (match_operand:SI 0 \"nonimmediate_operand\" \"r,?mr\")\n \t\t      (match_operand:SI 1 \"const0_operand\" \"n,n\")))]\n@@ -929,25 +939,35 @@\n   \"cmp{l}\\\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"icmp\")])\n \n-(define_insn \"cmphi_0\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (match_operand:HI 0 \"nonimmediate_operand\" \"r,?mr\")\n-\t\t      (match_operand:HI 1 \"const0_operand\" \"n,n\")))]\n-  \"\"\n+(define_insn \"*cmphi_0\"\n+  [(set (reg 17)\n+\t(compare (match_operand:HI 0 \"nonimmediate_operand\" \"r,?mr\")\n+\t\t (match_operand:HI 1 \"const0_operand\" \"n,n\")))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"@\n    test{w}\\\\t{%0, %0|%0, %0}\n    cmp{w}\\\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"icmp\")])\n \n-(define_insn \"cmphi_1\"\n+(define_insn \"*cmphi_1\"\n   [(set (reg:CC 17)\n \t(compare:CC (match_operand:HI 0 \"nonimmediate_operand\" \"rm,r\")\n \t\t    (match_operand:HI 1 \"general_operand\" \"ri,mr\")))]\n   \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n   \"cmp{w}\\\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"icmp\")])\n \n-(define_insn \"cmpqi_0\"\n+(define_insn \"cmpqi_ccz_1\"\n+  [(set (reg:CCZ 17)\n+\t(compare:CCZ (match_operand:QI 0 \"nonimmediate_operand\" \"q,?mq\")\n+\t\t     (match_operand:QI 1 \"const0_operand\" \"n,n\")))]\n+  \"\"\n+  \"@\n+   test{b}\\\\t{%0, %0|%0, %0}\n+   cmp{b}\\\\t{$0, %0|%0, 0}\"\n+  [(set_attr \"type\" \"icmp\")])\n+\n+(define_insn \"*cmpqi_ccno_1\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO (match_operand:QI 0 \"nonimmediate_operand\" \"q,?mq\")\n \t\t      (match_operand:QI 1 \"const0_operand\" \"n,n\")))]\n@@ -957,7 +977,7 @@\n    cmp{b}\\\\t{$0, %0|%0, 0}\"\n   [(set_attr \"type\" \"icmp\")])\n \n-(define_insn \"cmpqi_1\"\n+(define_insn \"*cmpqi_1\"\n   [(set (reg:CC 17)\n \t(compare:CC (match_operand:QI 0 \"nonimmediate_operand\" \"qm,q\")\n \t\t    (match_operand:QI 1 \"general_operand\" \"qi,mq\")))]\n@@ -979,15 +999,15 @@\n   [(set_attr \"type\" \"icmp\")])\n \n (define_insn \"*cmpqi_ext_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (subreg:QI\n \t    (zero_extract:SI\n \t      (match_operand 0 \"ext_register_operand\" \"q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n \t  (match_operand:QI 1 \"const0_operand\" \"n\")))]\n-  \"\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{b}\\\\t%h0, %h0\"\n   [(set_attr \"type\" \"icmp\")])\n \n@@ -3347,14 +3367,15 @@\n   \"\")\n \n (define_insn \"*addsi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t   (match_operand:SI 2 \"general_operand\" \"rmni,rni\"))\n \t  (const_int 0)))\t\t\t\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (PLUS, SImode, operands)\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (PLUS, SImode, operands)\n    /* Current assemblers are broken and do not allow @GOTOFF in\n       ought but a memory context. */\n    && ! pic_symbolic_operand (operands[2], VOIDmode)\"\n@@ -3458,14 +3479,15 @@\n \t(const_string \"alu\")))])\n \n (define_insn \"*addhi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (plus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t   (match_operand:HI 2 \"general_operand\" \"rmni,rni\"))\n \t  (const_int 0)))\t\t\t\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(plus:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (PLUS, HImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (PLUS, HImode, operands)\"\n   \"*\n {\n   switch (get_attr_type (insn))\n@@ -3564,14 +3586,15 @@\n \t(const_string \"alu\")))])\n \n (define_insn \"*addqi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t   (match_operand:QI 2 \"general_operand\" \"qmni,qni\"))\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm\")\n \t(plus:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (PLUS, QImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (PLUS, QImode, operands)\"\n   \"*\n {\n   switch (get_attr_type (insn))\n@@ -3784,26 +3807,15 @@\n   [(set_attr \"type\" \"alu\")])\n \n (define_insn \"*subsi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n-\t  (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t    (match_operand:SI 2 \"general_operand\" \"ri,rm\"))\n-\t  (const_int 0)))\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t(minus:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (MINUS, SImode, operands)\"\n-  \"sub{l}\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")])\n-\n-(define_insn \"*subsi_3\"\n-  [(set (reg:CC 17)\n-\t(compare:CC\n+  [(set (reg 17)\n+\t(compare\n \t  (minus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n \t\t    (match_operand:SI 2 \"general_operand\" \"ri,rm\"))\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(minus:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (MINUS, SImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCmode)\n+   && ix86_binary_operator_ok (MINUS, SImode, operands)\"\n   \"sub{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")])\n \n@@ -3825,26 +3837,15 @@\n   [(set_attr \"type\" \"alu\")])\n \n (define_insn \"*subhi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n-\t  (minus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t    (match_operand:HI 2 \"general_operand\" \"ri,rm\"))\n-\t  (const_int 0)))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t(minus:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (MINUS, HImode, operands)\"\n-  \"sub{w}\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")])\n-\n-(define_insn \"*subhi_3\"\n-  [(set (reg:CC 17)\n-\t(compare:CC\n+  [(set (reg 17)\n+\t(compare\n \t  (minus:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n \t\t    (match_operand:HI 2 \"general_operand\" \"ri,rm\"))\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,r\")\n \t(minus:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (MINUS, HImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCmode)\n+   && ix86_binary_operator_ok (MINUS, HImode, operands)\"\n   \"sub{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")])\n \n@@ -3866,26 +3867,15 @@\n   [(set_attr \"type\" \"alu\")])\n \n (define_insn \"*subqi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n-\t  (minus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n-\t\t    (match_operand:QI 2 \"general_operand\" \"qi,qm\"))\n-\t  (const_int 0)))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=qm,q\")\n-\t(minus:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (MINUS, QImode, operands)\"\n-  \"sub{b}\\\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")])\n-\n-(define_insn \"*subqi_3\"\n-  [(set (reg:CC 17)\n-\t(compare:CC\n+  [(set (reg 17)\n+\t(compare\n \t  (minus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n \t\t    (match_operand:QI 2 \"general_operand\" \"qi,qm\"))\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=qm,q\")\n \t(minus:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (MINUS, QImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCmode)\n+   && ix86_binary_operator_ok (MINUS, QImode, operands)\"\n   \"sub{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")])\n \n@@ -4301,27 +4291,50 @@\n ;; On Pentium, \"test imm, reg\" is pairable only with eax, ax, and al.\n ;; Note that this excludes ah.\n \n-(define_insn \"testsi_1\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (and:SI (match_operand:SI 0 \"nonimmediate_operand\" \"%*a,r,rm\")\n-\t\t\t      (match_operand:SI 1 \"nonmemory_operand\" \"in,in,rin\"))\n-\t\t      (const_int 0)))]\n+(define_insn \"*testsi_ccz_1\"\n+  [(set (reg:CCZ 17)\n+\t(compare:CCZ\n+\t  (and:SI (match_operand:SI 0 \"nonimmediate_operand\" \"%*a,r,rm\")\n+\t\t  (match_operand:SI 1 \"nonmemory_operand\" \"in,in,rin\"))\n+\t  (const_int 0)))]\n   \"\"\n   \"test{l}\\\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"icmp\")\n    (set_attr \"pent_pair\" \"uv,np,uv\")])\n \n-(define_insn \"*testhi_1\"\n+(define_insn \"testsi_ccno_1\"\n   [(set (reg:CCNO 17)\n-        (compare:CCNO (and:HI (match_operand:HI 0 \"nonimmediate_operand\" \"%*a,r,rm\")\n-\t\t\t      (match_operand:HI 1 \"nonmemory_operand\" \"n,n,rn\"))\n-\t\t      (const_int 0)))]\n+\t(compare:CCNO\n+\t  (and:SI (match_operand:SI 0 \"nonimmediate_operand\" \"%*a,r,rm\")\n+\t\t  (match_operand:SI 1 \"nonmemory_operand\" \"in,in,rin\"))\n+\t  (const_int 0)))]\n   \"\"\n+  \"test{l}\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"icmp\")\n+   (set_attr \"pent_pair\" \"uv,np,uv\")])\n+\n+(define_insn \"*testhi_1\"\n+  [(set (reg 17)\n+        (compare (and:HI (match_operand:HI 0 \"nonimmediate_operand\" \"%*a,r,rm\")\n+\t\t\t (match_operand:HI 1 \"nonmemory_operand\" \"n,n,rn\"))\n+\t\t (const_int 0)))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{w}\\\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"icmp\")\n    (set_attr \"pent_pair\" \"uv,np,uv\")])\n \n-(define_insn \"testqi_1\"\n+(define_insn \"testqi_ccz_1\"\n+  [(set (reg:CCZ 17)\n+        (compare:CCZ\n+\t  (and:QI (match_operand:QI 0 \"nonimmediate_operand\" \"%*a,q,qm\")\n+\t\t  (match_operand:QI 1 \"nonmemory_operand\" \"n,n,qn\"))\n+\t  (const_int 0)))]\n+  \"\"\n+  \"test{b}\\\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"icmp\")\n+   (set_attr \"pent_pair\" \"uv,np,uv\")])\n+\n+(define_insn \"testqi_ccno_1\"\n   [(set (reg:CCNO 17)\n         (compare:CCNO (and:QI (match_operand:QI 0 \"nonimmediate_operand\" \"%*a,q,qm\")\n \t\t\t      (match_operand:QI 1 \"nonmemory_operand\" \"n,n,qn\"))\n@@ -4331,11 +4344,22 @@\n   [(set_attr \"type\" \"icmp\")\n    (set_attr \"pent_pair\" \"uv,np,uv\")])\n \n-;; ??? A bug in recog prevents it from recognizing a const_int as an\n-;; operand to zero_extend in andqi_ext_1.  It was checking explicitly\n-;; for a QImode operand, which of course failed.\n+(define_insn \"*testqi_ext_ccz_0\"\n+  [(set (reg:CCZ 17)\n+\t(compare:CCZ\n+\t  (and:SI\n+\t    (zero_extract:SI\n+\t      (match_operand 0 \"ext_register_operand\" \"q\")\n+\t      (const_int 8)\n+\t      (const_int 8))\n+\t    (match_operand 1 \"const_int_operand\" \"n\"))\n+\t  (const_int 0)))]\n+  \"(unsigned HOST_WIDE_INT) INTVAL (operands[1]) <= 0xff\"\n+  \"test{b}\\\\t{%1, %h0|%h0, %1}\"\n+  [(set_attr \"type\" \"icmp\")\n+   (set_attr \"pent_pair\" \"np\")])\n \n-(define_insn \"testqi_ext_0\"\n+(define_insn \"testqi_ext_ccno_0\"\n   [(set (reg:CCNO 17)\n \t(compare:CCNO\n \t  (and:SI\n@@ -4351,8 +4375,8 @@\n    (set_attr \"pent_pair\" \"np\")])\n \n (define_insn \"*testqi_ext_1\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (and:SI\n \t    (zero_extract:SI\n \t      (match_operand 0 \"ext_register_operand\" \"q\")\n@@ -4361,13 +4385,13 @@\n \t    (zero_extend:SI\n \t      (match_operand:QI 1 \"nonimmediate_operand\" \"qm\")))\n \t  (const_int 0)))]\n-  \"\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{b}\\\\t{%1, %h0|%h0, %1}\"\n   [(set_attr \"type\" \"icmp\")])\n \n (define_insn \"*testqi_ext_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (and:SI\n \t    (zero_extract:SI\n \t      (match_operand 0 \"ext_register_operand\" \"q\")\n@@ -4378,31 +4402,32 @@\n \t      (const_int 8)\n \t      (const_int 8)))\n \t  (const_int 0)))]\n-  \"\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   \"test{b}\\\\t{%h1, %h0|%h0, %h1}\"\n   [(set_attr \"type\" \"icmp\")])\n \n ;; Combine likes to form bit extractions for some tests.  Humor it.\n (define_insn \"*testqi_ext_3\"\n-  [(set (reg:CCNO 17)\n-        (compare:CCNO (zero_extract:SI\n-\t\t\t(match_operand 0 \"nonimmediate_operand\" \"rm\")\n-\t\t\t(match_operand:SI 1 \"const_int_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"\"))\n-\t\t      (const_int 0)))]\n-  \"GET_MODE (operands[0]) == SImode\n-   || GET_MODE (operands[0]) == HImode\n-   || GET_MODE (operands[0]) == QImode\"\n+  [(set (reg 17)\n+        (compare (zero_extract:SI\n+\t\t   (match_operand 0 \"nonimmediate_operand\" \"rm\")\n+\t\t   (match_operand:SI 1 \"const_int_operand\" \"\")\n+\t\t   (match_operand:SI 2 \"const_int_operand\" \"\"))\n+\t\t (const_int 0)))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && (GET_MODE (operands[0]) == SImode\n+       || GET_MODE (operands[0]) == HImode\n+       || GET_MODE (operands[0]) == QImode)\"\n   \"#\")\n \n (define_split\n-  [(set (reg:CCNO 17)\n-        (compare:CCNO (zero_extract:SI\n-\t\t\t(match_operand 0 \"nonimmediate_operand\" \"rm\")\n-\t\t\t(match_operand:SI 1 \"const_int_operand\" \"\")\n-\t\t\t(match_operand:SI 2 \"const_int_operand\" \"\"))\n-\t\t      (const_int 0)))]\n-  \"\"\n+  [(set (reg 17)\n+        (compare (zero_extract:SI\n+\t\t   (match_operand 0 \"nonimmediate_operand\" \"rm\")\n+\t\t   (match_operand:SI 1 \"const_int_operand\" \"\")\n+\t\t   (match_operand:SI 2 \"const_int_operand\" \"\"))\n+\t\t (const_int 0)))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   [(set (reg:CCNO 17) (compare:CCNO (match_dup 3) (const_int 0)))]\n   \"\n {\n@@ -4506,13 +4531,14 @@\n   [(set_attr \"type\" \"alu,alu,imovx\")])\n \n (define_insn \"*andsi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t\t      (match_operand:SI 2 \"general_operand\" \"rim,ri\"))\n-\t\t      (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"rim,ri\"))\n+\t\t (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(and:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (AND, SImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (AND, SImode, operands)\"\n   \"and{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")])\n \n@@ -4566,13 +4592,14 @@\n   [(set_attr \"type\" \"alu,alu,imovx\")])\n \n (define_insn \"*andhi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t\t      (match_operand:HI 2 \"general_operand\" \"rim,ri\"))\n-\t\t      (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t\t (match_operand:HI 2 \"general_operand\" \"rim,ri\"))\n+\t\t (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(and:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (AND, HImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (AND, HImode, operands)\"\n   \"and{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")])\n \n@@ -4598,14 +4625,15 @@\n   [(set_attr \"type\" \"alu\")])\n \n (define_insn \"*andqi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (and:QI\n-\t\t\t(match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-\t\t\t(match_operand:QI 2 \"general_operand\" \"qim,qi,i\"))\n-\t\t      (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (and:QI\n+\t\t   (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n+\t\t   (match_operand:QI 2 \"general_operand\" \"qim,qi,i\"))\n+\t\t (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm,*r\")\n \t(and:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (AND, QImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (AND, QImode, operands)\"\n   \"@\n    and{b}\\\\t{%2, %0|%0, %2}\n    and{b}\\\\t{%2, %0|%0, %2}\n@@ -4635,8 +4663,8 @@\n ;; often in fp comparisons.\n \n (define_insn \"*andqi_ext_0_cc\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (and:SI\n \t    (zero_extract:SI\n \t      (match_operand 1 \"ext_register_operand\" \"q\")\n@@ -4653,7 +4681,8 @@\n \t    (const_int 8)\n \t    (const_int 8))\n \t  (match_dup 2)))]\n-  \"(unsigned HOST_WIDE_INT)INTVAL (operands[2]) <= 0xff\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && (unsigned HOST_WIDE_INT)INTVAL (operands[2]) <= 0xff\"\n   \"and{b}\\\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"type\" \"alu\")])\n \n@@ -4714,13 +4743,14 @@\n   [(set_attr \"type\" \"alu\")])\n \n (define_insn \"*iorsi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t\t      (match_operand:SI 2 \"general_operand\" \"rim,ri\"))\n-\t\t      (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"rim,ri\"))\n+\t\t (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(ior:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (IOR, SImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (IOR, SImode, operands)\"\n   \"or{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")])\n \n@@ -4742,13 +4772,14 @@\n   [(set_attr \"type\" \"alu\")])\n \n (define_insn \"*iorhi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t\t      (match_operand:HI 2 \"general_operand\" \"rim,ri\"))\n-\t\t      (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t\t (match_operand:HI 2 \"general_operand\" \"rim,ri\"))\n+\t\t (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(ior:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (IOR, HImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (IOR, HImode, operands)\"\n   \"or{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")])\n \n@@ -4774,13 +4805,14 @@\n   [(set_attr \"type\" \"alu\")])\n \n (define_insn \"*iorqi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t\t      (match_operand:QI 2 \"general_operand\" \"qim,qi\"))\n-\t\t      (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t\t (match_operand:QI 2 \"general_operand\" \"qim,qi\"))\n+\t\t (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm\")\n \t(ior:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (IOR, QImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (IOR, QImode, operands)\"\n   \"or{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")])\n \f\n@@ -4807,13 +4839,14 @@\n   [(set_attr \"type\" \"alu\")])\n \n (define_insn \"*xorsi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t\t      (match_operand:SI 2 \"general_operand\" \"rim,ri\"))\n-\t\t      (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t\t (match_operand:SI 2 \"general_operand\" \"rim,ri\"))\n+\t\t (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(xor:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (XOR, SImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (XOR, SImode, operands)\"\n   \"xor{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")])\n \n@@ -4835,13 +4868,14 @@\n   [(set_attr \"type\" \"alu\")])\n \n (define_insn \"*xorhi_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n-\t\t\t      (match_operand:HI 2 \"general_operand\" \"rim,ri\"))\n-\t\t      (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n+\t\t\t (match_operand:HI 2 \"general_operand\" \"rim,ri\"))\n+\t\t (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,rm\")\n \t(xor:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (XOR, HImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (XOR, HImode, operands)\"\n   \"xor{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")])\n \n@@ -4867,14 +4901,15 @@\n   [(set_attr \"type\" \"alu\")])\n \n (define_insn \"*xorqi_cc_1\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0\")\n \t\t  (match_operand:QI 2 \"general_operand\" \"qim,qi\"))\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,qm\")\n \t(xor:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (XOR, QImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (XOR, QImode, operands)\"\n   \"xor{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"alu\")])\n \n@@ -4922,8 +4957,8 @@\n    (clobber (reg:CC 17))]\n   \"reload_completed\"\n   [(parallel\n-    [(set (reg:CCNO 17)\n-\t  (compare:CCNO (neg:SI (match_dup 2)) (const_int 0)))\n+    [(set (reg:CCZ 17)\n+\t  (compare:CCZ (neg:SI (match_dup 2)) (const_int 0)))\n      (set (match_dup 0) (neg:SI (match_dup 2)))])\n    (parallel\n     [(set (match_dup 1)\n@@ -4953,20 +4988,14 @@\n   \"neg{l}\\\\t%0\"\n   [(set_attr \"type\" \"negnot\")])\n \n-(define_insn \"*negsi2_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (neg:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(neg:SI (match_dup 1)))]\n-  \"ix86_unary_operator_ok (NEG, SImode, operands)\"\n-  \"neg{l}\\\\t%0\"\n-  [(set_attr \"type\" \"negnot\")])\n+;; The problem with neg is that it does not perform (compare x 0),\n+;; it really performs (compare 0 x), which leaves us with the zero\n+;; flag being the only useful item.\n \n-(define_insn \"*negsi2_cmp\"\n-  [(set (reg:CC 17)\n-\t(compare:CC (neg:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t (const_int 0)))\n+(define_insn \"*negsi2_cmpz\"\n+  [(set (reg:CCZ 17)\n+\t(compare:CCZ (neg:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\"))\n+\t\t     (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(neg:SI (match_dup 1)))]\n   \"ix86_unary_operator_ok (NEG, SImode, operands)\"\n@@ -4988,20 +5017,10 @@\n   \"neg{w}\\\\t%0\"\n   [(set_attr \"type\" \"negnot\")])\n \n-(define_insn \"*neghi2_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (neg:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t (const_int 0)))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(neg:HI (match_dup 1)))]\n-  \"ix86_unary_operator_ok (NEG, HImode, operands)\"\n-  \"neg{w}\\\\t%0\"\n-  [(set_attr \"type\" \"negnot\")])\n-\n-(define_insn \"*neghi2_cmp\"\n-  [(set (reg:CC 17)\n-\t(compare:CC (neg:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t (const_int 0)))\n+(define_insn \"*neghi2_cmpz\"\n+  [(set (reg:CCZ 17)\n+\t(compare:CCZ (neg:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n+\t\t     (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(neg:HI (match_dup 1)))]\n   \"ix86_unary_operator_ok (NEG, HImode, operands)\"\n@@ -5023,20 +5042,10 @@\n   \"neg{b}\\\\t%0\"\n   [(set_attr \"type\" \"negnot\")])\n \n-(define_insn \"*negqi2_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (neg:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t (const_int 0)))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n-\t(neg:QI (match_dup 1)))]\n-  \"ix86_unary_operator_ok (NEG, QImode, operands)\"\n-  \"neg{b}\\\\t%0\"\n-  [(set_attr \"type\" \"negnot\")])\n-\n-(define_insn \"*negqi2_cmp\"\n-  [(set (reg:CC 17)\n-\t(compare:CC (neg:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t (const_int 0)))\n+(define_insn \"*negqi2_cmpz\"\n+  [(set (reg:CCZ 17)\n+\t(compare:CCZ (neg:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\"))\n+\t\t     (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(neg:QI (match_dup 1)))]\n   \"ix86_unary_operator_ok (NEG, QImode, operands)\"\n@@ -5416,22 +5425,23 @@\n   [(set_attr \"type\" \"negnot\")])\n \n (define_insn \"*one_cmplsi2_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t    (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\"))\n+\t\t (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(not:SI (match_dup 1)))]\n-  \"ix86_unary_operator_ok (NOT, SImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_unary_operator_ok (NOT, SImode, operands)\"\n   \"#\"\n   [(set_attr \"type\" \"alu1\")])\n \n (define_split\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n-\t\t      (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\"))\n+\t\t (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(not:SI (match_dup 1)))]\n-  \"\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   [(parallel [(set (reg:CCNO 17)\n \t\t   (compare:CCNO (xor:SI (match_dup 1) (const_int -1))\n \t\t\t\t (const_int 0)))\n@@ -5453,22 +5463,23 @@\n   [(set_attr \"type\" \"negnot\")])\n \n (define_insn \"*one_cmplhi2_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t      (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n+\t\t (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(not:HI (match_dup 1)))]\n-  \"ix86_unary_operator_ok (NEG, HImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_unary_operator_ok (NEG, HImode, operands)\"\n   \"#\"\n   [(set_attr \"type\" \"alu1\")])\n \n (define_split\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\"))\n-\t\t      (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\"))\n+\t\t (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n \t(not:HI (match_dup 1)))]\n-  \"\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   [(parallel [(set (reg:CCNO 17)\n \t\t   (compare:CCNO (xor:HI (match_dup 1) (const_int -1))\n \t\t      \t\t (const_int 0)))\n@@ -5493,22 +5504,23 @@\n   [(set_attr \"type\" \"negnot\")])\n \n (define_insn \"*one_cmplqi2_2\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t    (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\"))\n+\t\t (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(not:QI (match_dup 1)))]\n-  \"ix86_unary_operator_ok (NOT, QImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_unary_operator_ok (NOT, QImode, operands)\"\n   \"#\"\n   [(set_attr \"type\" \"alu1\")])\n \n (define_split\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\"))\n-\t\t      (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\"))\n+\t\t (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n \t(not:QI (match_dup 1)))]\n-  \"\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\"\n   [(parallel [(set (reg:CCNO 17)\n \t\t   (compare:CCNO (xor:QI (match_dup 1) (const_int -1))\n \t\t      \t\t (const_int 0)))\n@@ -5611,16 +5623,16 @@\n    (set_attr \"ppro_uops\" \"few\")])\n \n (define_expand \"x86_shift_adj_1\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (and:QI (match_operand:QI 2 \"register_operand\" \"\")\n-\t\t\t      (const_int 32))\n-\t\t      (const_int 0)))\n+  [(set (reg:CCZ 17)\n+\t(compare:CCZ (and:QI (match_operand:QI 2 \"register_operand\" \"\")\n+\t\t\t     (const_int 32))\n+\t\t     (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"\")\n-        (if_then_else:SI (ne (reg:CCNO 17) (const_int 0))\n+        (if_then_else:SI (ne (reg:CCZ 17) (const_int 0))\n \t\t\t (match_operand:SI 1 \"register_operand\" \"\")\n \t\t\t (match_dup 0)))\n    (set (match_dup 1)\n-\t(if_then_else:SI (ne (reg:CCNO 17) (const_int 0))\n+\t(if_then_else:SI (ne (reg:CCZ 17) (const_int 0))\n \t\t\t (match_operand:SI 3 \"register_operand\" \"r\")\n \t\t\t (match_dup 1)))]\n   \"TARGET_CMOVE\"\n@@ -5636,9 +5648,9 @@\n   rtx label = gen_label_rtx ();\n   rtx tmp;\n \n-  emit_insn (gen_testqi_1 (operands[2], GEN_INT (32)));\n+  emit_insn (gen_testqi_ccz_1 (operands[2], GEN_INT (32)));\n \n-  tmp = gen_rtx_REG (CCNOmode, FLAGS_REG);\n+  tmp = gen_rtx_REG (CCZmode, FLAGS_REG);\n   tmp = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n   tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n \t\t\t      gen_rtx_LABEL_REF (VOIDmode, label),\n@@ -5723,14 +5735,15 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashlsi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (ASHIFT, SImode, operands)\"\n   \"*\n {\n   switch (get_attr_type (insn))\n@@ -5799,14 +5812,15 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashlhi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashift:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (ASHIFT, HImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (ASHIFT, HImode, operands)\"\n   \"*\n {\n   switch (get_attr_type (insn))\n@@ -5889,14 +5903,15 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashlqi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t     (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n \t(ashift:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (ASHIFT, QImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (ASHIFT, QImode, operands)\"\n   \"*\n {\n   switch (get_attr_type (insn))\n@@ -6003,9 +6018,9 @@\n   rtx label = gen_label_rtx ();\n   rtx tmp;\n \n-  emit_insn (gen_testqi_1 (operands[2], GEN_INT (32)));\n+  emit_insn (gen_testqi_ccz_1 (operands[2], GEN_INT (32)));\n \n-  tmp = gen_rtx_REG (CCNOmode, FLAGS_REG);\n+  tmp = gen_rtx_REG (CCZmode, FLAGS_REG);\n   tmp = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n   tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n \t\t\t      gen_rtx_LABEL_REF (VOIDmode, label),\n@@ -6058,14 +6073,15 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashrsi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n   \"@\n    sar{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")])\n@@ -6093,14 +6109,15 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashrhi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n   \"@\n    sar{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")])\n@@ -6128,14 +6145,15 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*ashrqi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n   \"@\n    sar{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")])\n@@ -6220,14 +6238,15 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*lshrsi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"@\n    shr{l}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")])\n@@ -6255,14 +6274,15 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*lshrhi3_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:HI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n   \"@\n    shr{w}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")])\n@@ -6290,16 +6310,16 @@\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n (define_insn \"*lshrqi2_cmpno\"\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n \t\t       (match_operand:QI 2 \"immediate_operand\" \"I\"))\n \t  (const_int 0)))\n    (set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n \t(lshiftrt:QI (match_dup 1) (match_dup 2)))]\n-  \"ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n-  \"@\n-   shr{b}\\\\t{%2, %0|%0, %2}\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n+  \"shr{b}\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"ishift\")])\n \f\n ;; Rotate instructions\n@@ -6930,11 +6950,11 @@\n   \"TARGET_USE_LOOP && reload_completed\n    && ! (REGNO (operands[1]) == 2 && rtx_equal_p (operands[1], operands[2]))\"\n   [(set (match_dup 2) (match_dup 1))\n-   (parallel [(set (reg:CCNO 17)\n-\t\t   (compare:CCNO (plus:SI (match_dup 2) (const_int -1))\n+   (parallel [(set (reg:CCZ 17)\n+\t\t   (compare:CCZ (plus:SI (match_dup 2) (const_int -1))\n \t\t\t\t (const_int 0)))\n \t      (set (match_dup 2) (plus:SI (match_dup 2) (const_int -1)))])\n-   (set (pc) (if_then_else (ne (reg:CCNO 17) (const_int 0))\n+   (set (pc) (if_then_else (ne (reg:CCZ 17) (const_int 0))\n \t\t\t   (match_dup 0)\n \t\t\t   (pc)))]\n   \"\")\n@@ -6952,12 +6972,12 @@\n    (clobber (reg:CC 17))]\n   \"TARGET_USE_LOOP && reload_completed\"\n   [(set (match_dup 3) (match_dup 1))\n-   (parallel [(set (reg:CCNO 17)\n-\t\t   (compare:CCNO (plus:SI (match_dup 3) (const_int -1))\n-\t\t\t\t (const_int 0)))\n+   (parallel [(set (reg:CCZ 17)\n+\t\t   (compare:CCZ (plus:SI (match_dup 3) (const_int -1))\n+\t\t\t\t(const_int 0)))\n \t      (set (match_dup 3) (plus:SI (match_dup 3) (const_int -1)))])\n    (set (match_dup 2) (match_dup 3))\n-   (set (pc) (if_then_else (ne (reg:CCNO 17) (const_int 0))\n+   (set (pc) (if_then_else (ne (reg:CCZ 17) (const_int 0))\n \t\t\t   (match_dup 0)\n \t\t\t   (pc)))]\n   \"\")\n@@ -7333,16 +7353,16 @@\n       emit_insn (gen_ffssi_1 (out, in));\n       emit_insn (gen_rtx_SET (VOIDmode, out,\n \t\t  gen_rtx_IF_THEN_ELSE (SImode, \n-\t\t    gen_rtx_EQ (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG),\n+\t\t    gen_rtx_EQ (VOIDmode, gen_rtx_REG (CCZmode, FLAGS_REG),\n \t\t\t\tconst0_rtx),\n \t\t    tmp,\n \t\t    out)));\n       emit_insn (gen_addsi3 (out, out, const1_rtx));\n       emit_move_insn (operands[0], out);\n     }\n \n-  /* Pentium bsf instruction is extremly slow.  Following code is recommended by\n-     the Intel Optimizing Manual as resonable replacement:\n+  /* Pentium bsf instruction is extremly slow.  The following code is\n+     recommended by the Intel Optimizing Manual as a reasonable replacement:\n            TEST    EAX,EAX\n \t   JZ      SHORT BS2\n \t   XOR     ECX,ECX\n@@ -7382,7 +7402,7 @@\n       emit_move_insn (gen_rtx_MEM (DFmode, XEXP (mem, 0)), fptmp);\n       emit_move_insn (out, hi);\n       emit_insn (gen_lshrsi3 (out, out, GEN_INT (20)));\n-      emit_insn (gen_subsi3 (out, out, GEN_INT (0x3fe)));\n+      emit_insn (gen_subsi3 (out, out, GEN_INT (0x3ff - 1)));\n \n       emit_label (label);\n       LABEL_NUSES (label) = 1;\n@@ -7395,7 +7415,7 @@\n       emit_insn (gen_ffssi_1 (out, in));\n       emit_insn (gen_rtx_SET (VOIDmode, \n \t\t  gen_rtx_STRICT_LOW_PART (VOIDmode, gen_lowpart (QImode, tmp)),\n-\t\t  gen_rtx_EQ (QImode, gen_rtx_REG (CCmode, FLAGS_REG),\n+\t\t  gen_rtx_EQ (QImode, gen_rtx_REG (CCZmode, FLAGS_REG),\n \t\t\t      const0_rtx)));\n       emit_insn (gen_negsi2 (tmp, tmp));\n       emit_insn (gen_iorsi3 (out, out, tmp));\n@@ -7405,12 +7425,10 @@\n   DONE;  \n }\")\n \n-;; %%% The CCmode here is not strictly correct -- only Z is defined.\n-;; But I don't think this can be used except for from above.\n (define_insn \"ffssi_1\"\n-  [(set (reg:CC 17)\n-        (compare:CC (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n-\t\t    (const_int 0)))\n+  [(set (reg:CCZ 17)\n+        (compare:CCZ (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n+\t\t     (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI [(match_dup 1)] 5))]\n   \"\"\n@@ -8950,13 +8968,14 @@\n    GET_MODE (operands[3]) = SImode;\")\n \n (define_split\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (and (match_operand 1 \"aligned_operand\" \"\")\n-\t\t\t   (match_operand 2 \"const_int_operand\" \"\"))\n-\t\t      (const_int 0)))\n+  [(set (reg 17)\n+\t(compare (and (match_operand 1 \"aligned_operand\" \"\")\n+\t\t      (match_operand 2 \"const_int_operand\" \"\"))\n+\t\t (const_int 0)))\n    (set (match_operand 0 \"register_operand\" \"\")\n \t(and (match_dup 1) (match_dup 2)))]\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n+   && ix86_match_ccmode (insn, CCNOmode)\n    && (GET_MODE (operands[0]) == HImode\n        || (GET_MODE (operands[0]) == QImode \n \t   && (TARGET_PROMOTE_QImode || optimize_size)))\"\n@@ -8971,11 +8990,12 @@\n    operands[1] = gen_lowpart (SImode, operands[1]);\")\n \n (define_split\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (and (match_operand 0 \"aligned_operand\" \"\")\n-\t\t\t   (match_operand 1 \"const_int_operand\" \"\"))\n-\t\t      (const_int 0)))]\n+  [(set (reg 17)\n+\t(compare (and (match_operand 0 \"aligned_operand\" \"\")\n+\t\t      (match_operand 1 \"const_int_operand\" \"\"))\n+\t\t (const_int 0)))]\n   \"! TARGET_PARTIAL_REG_STALL && reload_completed\n+   && ix86_match_ccmode (insn, CCNOmode)\n    && (GET_MODE (operands[0]) == HImode\n        || (GET_MODE (operands[0]) == QImode \n \t   && (TARGET_PROMOTE_QImode || optimize_size)))\"\n@@ -9144,13 +9164,13 @@\n \n ;; Don't compare memory with zero, load and use a test instead.\n (define_peephole2\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (match_operand:SI 0 \"memory_operand\" \"\")\n-\t(const_int 0)))\n+  [(set (reg 17)\n+\t(compare (match_operand:SI 0 \"memory_operand\" \"\")\n+\t         (const_int 0)))\n    (match_scratch:SI 3 \"r\")]\n-  \"! optimize_size\"\n-   [(set (match_dup 3) (match_dup 0))\n-    (set (reg:CCNO 17) (compare:CCNO (match_dup 3) (const_int 0)))]\n+  \"ix86_match_ccmode (insn, CCNOmode) && ! optimize_size\"\n+  [(set (match_dup 3) (match_dup 0))\n+   (set (reg:CCNO 17) (compare:CCNO (match_dup 3) (const_int 0)))]\n   \"\")\n \n ;; NOT is not pairable on Pentium, while XOR is, but one byte longer. \n@@ -9214,12 +9234,13 @@\n ;; versions if we're concerned about partial register stalls.\n \n (define_peephole2\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (and:SI (match_operand:SI 0 \"register_operand\" \"\")\n-\t\t\t      (match_operand:SI 1 \"immediate_operand\" \"\"))\n-\t\t      (const_int 0)))]\n-  \"(true_regnum (operands[0]) != 0\n-    || CONST_OK_FOR_LETTER_P (INTVAL (operands[1]), 'K'))\n+  [(set (reg 17)\n+\t(compare (and:SI (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t\t (match_operand:SI 1 \"immediate_operand\" \"\"))\n+\t\t (const_int 0)))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && (true_regnum (operands[0]) != 0\n+       || CONST_OK_FOR_LETTER_P (INTVAL (operands[1]), 'K'))\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n   [(parallel\n      [(set (reg:CCNO 17)\n@@ -9234,11 +9255,12 @@\n ;; on ! TARGET_PARTIAL_REG_STALL\n \n (define_peephole2\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO (and:QI (match_operand:QI 0 \"register_operand\" \"\")\n-\t\t\t      (match_operand:QI 1 \"immediate_operand\" \"\"))\n-\t\t      (const_int 0)))]\n+  [(set (reg 17)\n+\t(compare (and:QI (match_operand:QI 0 \"register_operand\" \"\")\n+\t\t\t (match_operand:QI 1 \"immediate_operand\" \"\"))\n+\t\t (const_int 0)))]\n   \"! TARGET_PARTIAL_REG_STALL\n+   && ix86_match_ccmode (insn, CCNOmode)\n    && true_regnum (operands[0]) != 0\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n   [(parallel\n@@ -9251,8 +9273,8 @@\n   \"\")\n \n (define_peephole2\n-  [(set (reg:CCNO 17)\n-\t(compare:CCNO\n+  [(set (reg 17)\n+\t(compare\n \t  (and:SI\n \t    (zero_extract:SI\n \t      (match_operand 0 \"ext_register_operand\" \"q\")\n@@ -9261,6 +9283,7 @@\n \t    (match_operand 1 \"const_int_operand\" \"n\"))\n \t  (const_int 0)))]\n   \"! TARGET_PARTIAL_REG_STALL\n+   && ix86_match_ccmode (insn, CCNOmode)\n    && true_regnum (operands[0]) != 0\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[0]))\"\n   [(parallel [(set (reg:CCNO 17)"}]}