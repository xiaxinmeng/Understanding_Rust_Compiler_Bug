{"sha": "3b616f08a6e4db596eeffe62de8f8f9effaa1e2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I2MTZmMDhhNmU0ZGI1OTZlZWZmZTYyZGU4ZjhmOWVmZmFhMWUyZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-11-14T20:29:07Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-11-14T20:29:07Z"}, "message": "re PR c++/55323 (ICE in expand_aggr_init_1, at cp/init.c:1718)\n\n/cp\n2012-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/55323\n\t* init.c (emit_mem_initializers): Skip arguments == error_mark_node.\n\n/testsuite\n2012-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/55323\n\t* g++.dg/cpp0x/vt-55323.C: New.\n\nFrom-SVN: r193505", "tree": {"sha": "bc97fff9a82d439c08db1c74486042ef586f5936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc97fff9a82d439c08db1c74486042ef586f5936"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f/comments", "author": null, "committer": null, "parents": [{"sha": "7628dc541e7092f0d58de9a3622ce242807cb47d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7628dc541e7092f0d58de9a3622ce242807cb47d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7628dc541e7092f0d58de9a3622ce242807cb47d"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "d382a04f895ecda8a73cc46299a5a8e30fcde949", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3b616f08a6e4db596eeffe62de8f8f9effaa1e2f", "patch": "@@ -1,3 +1,8 @@\n+2012-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/55323\n+\t* init.c (emit_mem_initializers): Skip arguments == error_mark_node.\n+\n 2012-11-14  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n \n \tPR c++/11750"}, {"sha": "9f886c0013e3908fbd7d2d1371ca5dee672244d5", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=3b616f08a6e4db596eeffe62de8f8f9effaa1e2f", "patch": "@@ -1047,12 +1047,17 @@ emit_mem_initializers (tree mem_inits)\n   in_base_initializer = 1;\n \n   /* Initialize base classes.  */\n-  while (mem_inits\n-\t && TREE_CODE (TREE_PURPOSE (mem_inits)) != FIELD_DECL)\n+  for (; (mem_inits\n+\t  && TREE_CODE (TREE_PURPOSE (mem_inits)) != FIELD_DECL);\n+       mem_inits = TREE_CHAIN (mem_inits))\n     {\n       tree subobject = TREE_PURPOSE (mem_inits);\n       tree arguments = TREE_VALUE (mem_inits);\n \n+      /* We already have issued an error message.  */\n+      if (arguments == error_mark_node)\n+\tcontinue;\n+\n       if (arguments == NULL_TREE)\n \t{\n \t  /* If these initializations are taking place in a copy constructor,\n@@ -1085,8 +1090,6 @@ emit_mem_initializers (tree mem_inits)\n                               tf_warning_or_error);\n \t  expand_cleanup_for_base (subobject, NULL_TREE);\n \t}\n-\n-      mem_inits = TREE_CHAIN (mem_inits);\n     }\n   in_base_initializer = 0;\n "}, {"sha": "07e2a9e55c1eaf5ddcf162ba9079d51ebfe44f39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b616f08a6e4db596eeffe62de8f8f9effaa1e2f", "patch": "@@ -1,15 +1,13 @@\n-2012-11-14  Fabien Ch\u00eane  <fabien@gcc.gnu.org>\n+2012-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n-\tPR c++/11750\n-\t* call.c (build_new_method_call_1): Check that the instance type\n-\tand the function context are the same before setting the flag\n-\tLOOKUP_NONVIRTUAL.\n+\tPR c++/55323\n+\t* g++.dg/cpp0x/vt-55323.C: New.\n \n 2012-11-13  Sriraman Tallam  <tmsriram@google.com>\n \n-\t* testsuite/g++.dg/mv4.C: Add require ifunc. Change error message.\n-\t* testsuite/g++.dg/mv5.C: Add require ifunc.\n-\t* testsuite/g++.dg/mv6.C: Add require ifunc.\n+\t* g++.dg/mv4.C: Add require ifunc. Change error message.\n+\t* g++.dg/mv5.C: Add require ifunc.\n+\t* g++.dg/mv6.C: Add require ifunc.\n \n 2012-11-13  Martin Jambor  <mjambor@suse.cz>\n "}, {"sha": "d517b60869434f8f6c99b4c743816fc3564a5c9a", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-55323.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-55323.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b616f08a6e4db596eeffe62de8f8f9effaa1e2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-55323.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-55323.C?ref=3b616f08a6e4db596eeffe62de8f8f9effaa1e2f", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=c++11\" }\n+\n+struct foo {\n+  foo(int a, float b);\n+};\n+\n+struct bar : foo {\n+  template<typename... Args>\n+  bar(Args&&... args) : foo(2, args){} // { dg-error \"parameter packs\" }\n+};\n+\n+bar b(2,1.);"}]}