{"sha": "89ed6d5f5e9207087bde180bb4ed2be8a8b39787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODllZDZkNWY1ZTkyMDcwODdiZGUxODBiYjRlZDJiZThhOGIzOTc4Nw==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-07-25T14:44:24Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-07-25T14:44:24Z"}, "message": "[AArch64][4/10] ARMv8.2-A FP16 three operands vector intrinsics\n\ngcc/\n\t* config/aarch64/aarch64-simd-builtins.def: Register new builtins.\n\t* config/aarch64/aarch64-simd.md (fma<mode>4, fnma<mode>4): Extend to HF\n\tmodes.\n\t* config/aarch64/arm_neon.h (vfma_f16, vfmaq_f16, vfms_f16,\n\tvfmsq_f16): New.\n\nFrom-SVN: r238718", "tree": {"sha": "6decdae2929539af969df0dbdd874ca7a2db437c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6decdae2929539af969df0dbdd874ca7a2db437c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89ed6d5f5e9207087bde180bb4ed2be8a8b39787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ed6d5f5e9207087bde180bb4ed2be8a8b39787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ed6d5f5e9207087bde180bb4ed2be8a8b39787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ed6d5f5e9207087bde180bb4ed2be8a8b39787/comments", "author": null, "committer": null, "parents": [{"sha": "33d72b63863de2dedfa7a697d7d0b0e8b80e1416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33d72b63863de2dedfa7a697d7d0b0e8b80e1416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33d72b63863de2dedfa7a697d7d0b0e8b80e1416"}], "stats": {"total": 170, "additions": 89, "deletions": 81}, "files": [{"sha": "5365986f252929970d914f6dea852e25bb17c2a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 66, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ed6d5f5e9207087bde180bb4ed2be8a8b39787/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ed6d5f5e9207087bde180bb4ed2be8a8b39787/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89ed6d5f5e9207087bde180bb4ed2be8a8b39787", "patch": "@@ -1,3 +1,11 @@\n+2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Register new builtins.\n+\t* config/aarch64/aarch64-simd.md (fma<mode>4, fnma<mode>4): Extend to HF\n+\tmodes.\n+\t* config/aarch64/arm_neon.h (vfma_f16, vfmaq_f16, vfms_f16,\n+\tvfmsq_f16): New.\n+\n 2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def: Register new builtins.\n@@ -22,20 +30,19 @@\n \t* config/aarch64/aarch64.c (aarch64_emit_approx_div): Return false for\n \tHF, V4HF and V8HF.\n \t* config/aarch64/iterators.md (VDQ_HSDI, VSDQ_HSDI): New mode iterator.\n-\t* config/aarch64/arm_neon.h (vadd_f16): New.\n-\t(vaddq_f16, vabd_f16, vabdq_f16, vcage_f16, vcageq_f16, vcagt_f16,\n-\tvcagtq_f16, vcale_f16, vcaleq_f16, vcalt_f16, vcaltq_f16, vceq_f16,\n-\tvceqq_f16, vcge_f16, vcgeq_f16, vcgt_f16, vcgtq_f16, vcle_f16,\n-\tvcleq_f16, vclt_f16, vcltq_f16, vcvt_n_f16_s16, vcvtq_n_f16_s16,\n-\tvcvt_n_f16_u16, vcvtq_n_f16_u16, vcvt_n_s16_f16, vcvtq_n_s16_f16,\n-\tvcvt_n_u16_f16, vcvtq_n_u16_f16, vdiv_f16, vdivq_f16, vdup_lane_f16,\n-\tvdup_laneq_f16, vdupq_lane_f16, vdupq_laneq_f16, vdups_lane_f16,\n-\tvdups_laneq_f16, vmax_f16, vmaxq_f16, vmaxnm_f16, vmaxnmq_f16, vmin_f16,\n-\tvminq_f16, vminnm_f16, vminnmq_f16, vmul_f16, vmulq_f16, vmulx_f16,\n-\tvmulxq_f16, vpadd_f16, vpaddq_f16, vpmax_f16, vpmaxq_f16, vpmaxnm_f16,\n-\tvpmaxnmq_f16, vpmin_f16, vpminq_f16, vpminnm_f16, vpminnmq_f16,\n-\tvrecps_f16, vrecpsq_f16, vrsqrts_f16, vrsqrtsq_f16, vsub_f16,\n-\tvsubq_f16): Likewise.\n+\t* config/aarch64/arm_neon.h (vadd_f16, vaddq_f16, vabd_f16, vabdq_f16,\n+\tvcage_f16, vcageq_f16, vcagt_f16, vcagtq_f16, vcale_f16, vcaleq_f16,\n+\tvcalt_f16, vcaltq_f16, vceq_f16, vceqq_f16, vcge_f16, vcgeq_f16,\n+\tvcgt_f16, vcgtq_f16, vcle_f16, vcleq_f16, vclt_f16, vcltq_f16,\n+\tvcvt_n_f16_s16, vcvtq_n_f16_s16, vcvt_n_f16_u16, vcvtq_n_f16_u16,\n+\tvcvt_n_s16_f16, vcvtq_n_s16_f16, vcvt_n_u16_f16, vcvtq_n_u16_f16,\n+\tvdiv_f16, vdivq_f16, vdup_lane_f16, vdup_laneq_f16, vdupq_lane_f16,\n+\tvdupq_laneq_f16, vdups_lane_f16, vdups_laneq_f16, vmax_f16, vmaxq_f16,\n+\tvmaxnm_f16, vmaxnmq_f16, vmin_f16, vminq_f16, vminnm_f16, vminnmq_f16,\n+\tvmul_f16, vmulq_f16, vmulx_f16, vmulxq_f16, vpadd_f16, vpaddq_f16,\n+\tvpmax_f16, vpmaxq_f16, vpmaxnm_f16, vpmaxnmq_f16, vpmin_f16, vpminq_f16,\n+\tvpminnm_f16, vpminnmq_f16, vrecps_f16, vrecpsq_f16, vrsqrts_f16,\n+\tvrsqrtsq_f16, vsub_f16, vsubq_f16): New.\n \n 2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n \n@@ -63,65 +70,38 @@\n \t(vdupq_n_f16): Likewise.\n \t(vld1_dup_f16): Use vdup_n_f16.\n \t(vld1q_dup_f16): Use vdupq_n_f16.\n-\t(vabs_f16): New.\n-\t(vabsq_f16, vceqz_f16, vceqzq_f16, vcgez_f16, vcgezq_f16, vcgtz_f16,\n-\tvcgtzq_f16, vclez_f16, vclezq_f16, vcltz_f16, vcltzq_f16, vcvt_f16_s16,\n-\tvcvtq_f16_s16, vcvt_f16_u16, vcvtq_f16_u16, vcvt_s16_f16, vcvtq_s16_f16,\n-\tvcvt_u16_f16, vcvtq_u16_f16, vcvta_s16_f16, vcvtaq_s16_f16,\n-\tvcvta_u16_f16, vcvtaq_u16_f16, vcvtm_s16_f16, vcvtmq_s16_f16,\n-\tvcvtm_u16_f16, vcvtmq_u16_f16, vcvtn_s16_f16, vcvtnq_s16_f16,\n-\tvcvtn_u16_f16, vcvtnq_u16_f16, vcvtp_s16_f16, vcvtpq_s16_f16,\n-\tvcvtp_u16_f16, vcvtpq_u16_f16, vneg_f16, vnegq_f16, vrecpe_f16,\n-\tvrecpeq_f16, vrnd_f16, vrndq_f16, vrnda_f16, vrndaq_f16, vrndi_f16,\n-\tvrndiq_f16, vrndm_f16, vrndmq_f16, vrndn_f16, vrndnq_f16, vrndp_f16,\n-\tvrndpq_f16, vrndx_f16, vrndxq_f16, vrsqrte_f16, vrsqrteq_f16, vsqrt_f16,\n-\tvsqrtq_f16): Likewise.\n+\t(vabs_f16, vabsq_f16, vceqz_f16, vceqzq_f16, vcgez_f16, vcgezq_f16,\n+\tvcgtz_f16, vcgtzq_f16, vclez_f16, vclezq_f16, vcltz_f16, vcltzq_f16,\n+\tvcvt_f16_s16, vcvtq_f16_s16, vcvt_f16_u16, vcvtq_f16_u16, vcvt_s16_f16,\n+\tvcvtq_s16_f16, vcvt_u16_f16, vcvtq_u16_f16, vcvta_s16_f16,\n+\tvcvtaq_s16_f16, vcvta_u16_f16, vcvtaq_u16_f16, vcvtm_s16_f16,\n+\tvcvtmq_s16_f16, vcvtm_u16_f16, vcvtmq_u16_f16, vcvtn_s16_f16,\n+\tvcvtnq_s16_f16, vcvtn_u16_f16, vcvtnq_u16_f16, vcvtp_s16_f16,\n+\tvcvtpq_s16_f16, vcvtp_u16_f16, vcvtpq_u16_f16, vneg_f16, vnegq_f16,\n+\tvrecpe_f16, vrecpeq_f16, vrnd_f16, vrndq_f16, vrnda_f16, vrndaq_f16,\n+\tvrndi_f16, vrndiq_f16, vrndm_f16, vrndmq_f16, vrndn_f16, vrndnq_f16,\n+\tvrndp_f16, vrndpq_f16, vrndx_f16, vrndxq_f16, vrsqrte_f16, vrsqrteq_f16,\n+\tvsqrt_f16, vsqrtq_f16): New.\n \n 2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-simd.md\n \t(aarch64_<PERMUTE:perm_insn><PERMUTE:perm_hilo><mode>): Use VALL_F16.\n \t(aarch64_ext<mode>): Likewise.\n \t(aarch64_rev<REVERSE:rev_op><mode>): Likewise.\n-\t* config/aarch64/aarch64.c (aarch64_evpc_trn): Support V4HFmode and\n-\tV8HFmode.\n-\t(aarch64_evpc_uzp): Likewise.\n-\t(aarch64_evpc_zip): Likewise.\n-\t(aarch64_evpc_ext): Likewise.\n-\t(aarch64_evpc_rev): Likewise.\n-\t* config/aarch64/arm_neon.h (__aarch64_vdup_lane_f16): New.\n-\t(__aarch64_vdup_laneq_f16): New..\n-\t(__aarch64_vdupq_lane_f16): New.\n-\t(__aarch64_vdupq_laneq_f16): New.\n-\t(vbsl_f16): New.\n-\t(vbslq_f16): New.\n-\t(vdup_n_f16): New.\n-\t(vdupq_n_f16): New.\n-\t(vdup_lane_f16): New.\n-\t(vdup_laneq_f16): New.\n-\t(vdupq_lane_f16): New.\n-\t(vdupq_laneq_f16): New.\n-\t(vduph_lane_f16): New.\n-\t(vduph_laneq_f16): New.\n-\t(vext_f16): New.\n-\t(vextq_f16): New.\n-\t(vmov_n_f16): New.\n-\t(vmovq_n_f16): New.\n-\t(vrev64_f16): New.\n-\t(vrev64q_f16): New.\n-\t(vtrn1_f16): New.\n-\t(vtrn1q_f16): New.\n-\t(vtrn2_f16): New.\n-\t(vtrn2q_f16): New.\n-\t(vtrn_f16): New.\n-\t(vtrnq_f16): New.\n-\t(__INTERLEAVE_LIST): Support float16x4_t, float16x8_t.\n-\t(vuzp1_f16): New.\n-\t(vuzp1q_f16): New.\n-\t(vuzp2_f16): New.\n-\t(vuzp2q_f16): New.\n-\t(vzip1_f16): New.\n-\t(vzip2q_f16): New.\n+\t* config/aarch64/aarch64.c (aarch64_evpc_trn, aarch64_evpc_uzp,\n+\taarch64_evpc_zip, aarch64_evpc_ext, aarch64_evpc_rev): Support V4HFmode\n+\tand V8HFmode.\n+\t* config/aarch64/arm_neon.h (__INTERLEAVE_LIST): Support float16x4_t,\n+\tfloat16x8_t.\n+        (__aarch64_vdup_lane_f16, __aarch64_vdup_laneq_f16,\n+\t__aarch64_vdupq_lane_f16, __aarch64_vdupq_laneq_f16, vbsl_f16,\n+\tvbslq_f16, vdup_n_f16, vdupq_n_f16, vdup_lane_f16, vdup_laneq_f16,\n+\tvdupq_lane_f16, vdupq_laneq_f16, vduph_lane_f16, vduph_laneq_f16,\n+\tvext_f16, vextq_f16, vmov_n_f16, vmovq_n_f16, vrev64_f16, vrev64q_f16,\n+\tvtrn1_f16, vtrn1q_f16, vtrn2_f16, vtrn2q_f16, vtrn_f16, vtrnq_f16,\n+\tvuzp1_f16, vuzp1q_f16, vuzp2_f16, vuzp2q_f16, vzip1_f16, vzip2q_f16):\n+\tNew.\n \t(vmov_n_f16): Reimplement using vdup_n_f16.\n \t(vmovq_n_f16): Reimplement using vdupq_n_f16..\n "}, {"sha": "b888fd64f04c6b928d5d830984d05dd56224fa68", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ed6d5f5e9207087bde180bb4ed2be8a8b39787/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ed6d5f5e9207087bde180bb4ed2be8a8b39787/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=89ed6d5f5e9207087bde180bb4ed2be8a8b39787", "patch": "@@ -405,7 +405,9 @@\n   BUILTIN_VALL_F16 (STORE1, st1, 0)\n \n   /* Implemented by fma<mode>4.  */\n-  BUILTIN_VDQF (TERNOP, fma, 4)\n+  BUILTIN_VHSDF (TERNOP, fma, 4)\n+  /* Implemented by fnma<mode>4.  */\n+  BUILTIN_VHSDF (TERNOP, fnma, 4)\n \n   /* Implemented by aarch64_simd_bsl<mode>.  */\n   BUILTIN_VDQQH (BSL_P, simd_bsl, 0)"}, {"sha": "961c6d8a28b7a5a3c10b3f8a30805c7358f22384", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ed6d5f5e9207087bde180bb4ed2be8a8b39787/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ed6d5f5e9207087bde180bb4ed2be8a8b39787/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=89ed6d5f5e9207087bde180bb4ed2be8a8b39787", "patch": "@@ -1581,13 +1581,13 @@\n )\n \n (define_insn \"fma<mode>4\"\n-  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-       (fma:VDQF (match_operand:VDQF 1 \"register_operand\" \"w\")\n-                (match_operand:VDQF 2 \"register_operand\" \"w\")\n-                (match_operand:VDQF 3 \"register_operand\" \"0\")))]\n+  [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n+       (fma:VHSDF (match_operand:VHSDF 1 \"register_operand\" \"w\")\n+\t\t  (match_operand:VHSDF 2 \"register_operand\" \"w\")\n+\t\t  (match_operand:VHSDF 3 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD\"\n  \"fmla\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n-  [(set_attr \"type\" \"neon_fp_mla_<Vetype><q>\")]\n+  [(set_attr \"type\" \"neon_fp_mla_<stype><q>\")]\n )\n \n (define_insn \"*aarch64_fma4_elt<mode>\"\n@@ -1654,15 +1654,15 @@\n )\n \n (define_insn \"fnma<mode>4\"\n-  [(set (match_operand:VDQF 0 \"register_operand\" \"=w\")\n-\t(fma:VDQF\n-\t  (match_operand:VDQF 1 \"register_operand\" \"w\")\n-          (neg:VDQF\n-\t    (match_operand:VDQF 2 \"register_operand\" \"w\"))\n-\t  (match_operand:VDQF 3 \"register_operand\" \"0\")))]\n-  \"TARGET_SIMD\"\n- \"fmls\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n-  [(set_attr \"type\" \"neon_fp_mla_<Vetype><q>\")]\n+  [(set (match_operand:VHSDF 0 \"register_operand\" \"=w\")\n+\t(fma:VHSDF\n+\t  (match_operand:VHSDF 1 \"register_operand\" \"w\")\n+          (neg:VHSDF\n+\t    (match_operand:VHSDF 2 \"register_operand\" \"w\"))\n+\t  (match_operand:VHSDF 3 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"fmls\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_fp_mla_<stype><q>\")]\n )\n \n (define_insn \"*aarch64_fnma4_elt<mode>\""}, {"sha": "b0d0c7cb19f48ec64a09e5204441421d8e91d0ba", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ed6d5f5e9207087bde180bb4ed2be8a8b39787/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ed6d5f5e9207087bde180bb4ed2be8a8b39787/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=89ed6d5f5e9207087bde180bb4ed2be8a8b39787", "patch": "@@ -26747,6 +26747,32 @@ vsubq_f16 (float16x8_t __a, float16x8_t __b)\n   return __a - __b;\n }\n \n+/* ARMv8.2-A FP16 three operands vector intrinsics.  */\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vfma_f16 (float16x4_t __a, float16x4_t __b, float16x4_t __c)\n+{\n+  return __builtin_aarch64_fmav4hf (__b, __c, __a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vfmaq_f16 (float16x8_t __a, float16x8_t __b, float16x8_t __c)\n+{\n+  return __builtin_aarch64_fmav8hf (__b, __c, __a);\n+}\n+\n+__extension__ static __inline float16x4_t __attribute__ ((__always_inline__))\n+vfms_f16 (float16x4_t __a, float16x4_t __b, float16x4_t __c)\n+{\n+  return __builtin_aarch64_fnmav4hf (__b, __c, __a);\n+}\n+\n+__extension__ static __inline float16x8_t __attribute__ ((__always_inline__))\n+vfmsq_f16 (float16x8_t __a, float16x8_t __b, float16x8_t __c)\n+{\n+  return __builtin_aarch64_fnmav8hf (__b, __c, __a);\n+}\n+\n #pragma GCC pop_options\n \n #undef __aarch64_vget_lane_any"}]}