{"sha": "23ac85e7a888409d32e951245d50bcd5795eb66b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNhYzg1ZTdhODg4NDA5ZDMyZTk1MTI0NWQ1MGJjZDU3OTVlYjY2Yg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2008-05-27T20:18:33Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-05-27T20:18:33Z"}, "message": "re PR target/35767 (x86 backend uses aligned load on unaligned memory)\n\ngcc/\n\n2008-05-27  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/35767\n\tPR target/35771\n\t* config/i386/i386.c (ix86_function_arg_boundary): Use\n\talignment of canonical type.\n\t(ix86_expand_vector_move): Check unaligned memory access for\n\tall SSE modes.\n\ngcc/testsuite/\n\n2008-05-27  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/35767\n\tPR target/35771\n\t* gcc.target/i386/pr35767-1.c: New.\n\t* gcc.target/i386/pr35767-1d.c: Likewise.\n\t* gcc.target/i386/pr35767-1i.c: Likewise.\n\t* gcc.target/i386/pr35767-2.c: Likewise.\n\t* gcc.target/i386/pr35767-2d.c: Likewise.\n\t* gcc.target/i386/pr35767-2i.c: Likewise.\n\t* gcc.target/i386/pr35767-3.c: Likewise.\n\t* gcc.target/i386/pr35767-4.c: Likewise.\n\t* gcc.target/i386/pr35767-5.c: Likewise.\n\nFrom-SVN: r136054", "tree": {"sha": "1e3cfa64b5f12ecca612662ef5b96bb2ba0ff018", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e3cfa64b5f12ecca612662ef5b96bb2ba0ff018"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23ac85e7a888409d32e951245d50bcd5795eb66b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ac85e7a888409d32e951245d50bcd5795eb66b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ac85e7a888409d32e951245d50bcd5795eb66b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ac85e7a888409d32e951245d50bcd5795eb66b/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61bed51903da5de082dd2272d9aa99d83b1b4c56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61bed51903da5de082dd2272d9aa99d83b1b4c56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61bed51903da5de082dd2272d9aa99d83b1b4c56"}], "stats": {"total": 245, "additions": 239, "deletions": 6}, "files": [{"sha": "c25c4380cb4509272d199d9ed3a69522e92f5c54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23ac85e7a888409d32e951245d50bcd5795eb66b", "patch": "@@ -1,3 +1,12 @@\n+2008-05-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/35767\n+\tPR target/35771\n+\t* config/i386/i386.c (ix86_function_arg_boundary): Use\n+\talignment of canonical type.\n+\t(ix86_expand_vector_move): Check unaligned memory access for\n+\tall SSE modes.\n+\n 2008-05-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* dwarf2out.c (current_fde): Change return type to dw_fde_ref."}, {"sha": "cbb122ab0dc4711fdd560188667035832c9161f4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=23ac85e7a888409d32e951245d50bcd5795eb66b", "patch": "@@ -4638,7 +4638,12 @@ ix86_function_arg_boundary (enum machine_mode mode, tree type)\n {\n   int align;\n   if (type)\n-    align = TYPE_ALIGN (type);\n+    {\n+      if (TYPE_STRUCTURAL_EQUALITY_P (type))\n+\talign = TYPE_ALIGN (type);\n+      else\n+\talign = TYPE_ALIGN (TYPE_CANONICAL (type));\n+    }\n   else\n     align = GET_MODE_ALIGNMENT (mode);\n   if (align < PARM_BOUNDARY)\n@@ -10408,12 +10413,10 @@ ix86_expand_vector_move (enum machine_mode mode, rtx operands[])\n       && standard_sse_constant_p (op1) <= 0)\n     op1 = validize_mem (force_const_mem (mode, op1));\n \n-  /* TDmode values are passed as TImode on the stack.  TImode values\n-     are moved via xmm registers, and moving them to stack can result in\n-     unaligned memory access.  Use ix86_expand_vector_move_misalign()\n-     if memory operand is not aligned correctly.  */\n+  /* We need to check memory alignment for SSE mode since attribute\n+     can make operands unaligned.  */\n   if (can_create_pseudo_p ()\n-      && (mode == TImode) && !TARGET_64BIT\n+      && SSE_REG_MODE_P (mode)\n       && ((MEM_P (op0) && (MEM_ALIGN (op0) < align))\n \t  || (MEM_P (op1) && (MEM_ALIGN (op1) < align))))\n     {"}, {"sha": "59bf3a93809cfb993fb61a20d4a34cdeff9b9e04", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=23ac85e7a888409d32e951245d50bcd5795eb66b", "patch": "@@ -1,3 +1,17 @@\n+2008-05-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/35767\n+\tPR target/35771\n+\t* gcc.target/i386/pr35767-1.c: New.\n+\t* gcc.target/i386/pr35767-1d.c: Likewise.\n+\t* gcc.target/i386/pr35767-1i.c: Likewise.\n+\t* gcc.target/i386/pr35767-2.c: Likewise.\n+\t* gcc.target/i386/pr35767-2d.c: Likewise.\n+\t* gcc.target/i386/pr35767-2i.c: Likewise.\n+\t* gcc.target/i386/pr35767-3.c: Likewise.\n+\t* gcc.target/i386/pr35767-4.c: Likewise.\n+\t* gcc.target/i386/pr35767-5.c: Likewise.\n+\n 2008-05-27  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/assignment_3.f90: Add missing cleanup-modules."}, {"sha": "5ed5b85886603f79da12d36d3f9c1b152e53f01f", "filename": "gcc/testsuite/gcc.target/i386/pr35767-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-1.c?ref=23ac85e7a888409d32e951245d50bcd5795eb66b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+typedef struct { __m128 f __attribute__((packed)); } packed;\n+\n+__m128  __attribute__((noinline))\n+foo (__m128 a1, __m128 a2, __m128 a3, __m128 a4,\n+     __m128 a5, __m128 a6, __m128 a7, __m128 a8,\n+     int b1, int b2, int b3, int b4, int b5, int b6, int b7, packed y)\n+{\n+  return y.f;\n+}\n+\n+void\n+sse2_test (void)\n+{\n+  packed x;\n+  __m128 y = { 0 };\n+  x.f = y; \n+  y = foo (y, y, y, y, y, y, y, y, 1, 2, 3, 4, 5, 6, -1, x);\n+  if (__builtin_memcmp (&y, &x.f, sizeof (y)) != 0)\n+    abort ();\n+}"}, {"sha": "cdf17fa61b38f9c36c9bad23c6ba97cfc4722b08", "filename": "gcc/testsuite/gcc.target/i386/pr35767-1d.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-1d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-1d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-1d.c?ref=23ac85e7a888409d32e951245d50bcd5795eb66b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+typedef struct { __m128d f __attribute__((packed)); } packed;\n+\n+__m128d  __attribute__((noinline))\n+foo (__m128d a1, __m128d a2, __m128d a3, __m128d a4,\n+     __m128d a5, __m128d a6, __m128d a7, __m128d a8,\n+     int b1, int b2, int b3, int b4, int b5, int b6, int b7, packed y)\n+{\n+  return y.f;\n+}\n+\n+void\n+sse2_test (void)\n+{\n+  packed x;\n+  __m128d y = { 0 };\n+  x.f = y; \n+  y = foo (y, y, y, y, y, y, y, y, 1, 2, 3, 4, 5, 6, -1, x);\n+  if (__builtin_memcmp (&y, &x.f, sizeof (y)) != 0)\n+    abort ();\n+}"}, {"sha": "188e8e737bda8c65934bcc1b7fa7551daefcbc6c", "filename": "gcc/testsuite/gcc.target/i386/pr35767-1i.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-1i.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-1i.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-1i.c?ref=23ac85e7a888409d32e951245d50bcd5795eb66b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+typedef struct { __m128i f __attribute__((packed)); } packed;\n+\n+__m128i  __attribute__((noinline))\n+foo (__m128i a1, __m128i a2, __m128i a3, __m128i a4,\n+     __m128i a5, __m128i a6, __m128i a7, __m128i a8,\n+     int b1, int b2, int b3, int b4, int b5, int b6, int b7, packed y)\n+{\n+  return y.f;\n+}\n+\n+void\n+sse2_test (void)\n+{\n+  packed x;\n+  __m128i y = { 0 };\n+  x.f = y; \n+  y = foo (y, y, y, y, y, y, y, y, 1, 2, 3, 4, 5, 6, -1, x);\n+  if (__builtin_memcmp (&y, &x.f, sizeof (y)) != 0)\n+    abort ();\n+}"}, {"sha": "82062ff9ee7b0f3d1680fa4da8bf7cd00765c2f3", "filename": "gcc/testsuite/gcc.target/i386/pr35767-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-2.c?ref=23ac85e7a888409d32e951245d50bcd5795eb66b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+typedef  __m128 __attribute__((aligned(1))) unaligned;\n+\n+__m128  __attribute__((noinline))\n+foo (__m128 a1, __m128 a2, __m128 a3, __m128 a4,\n+     __m128 a5, __m128 a6, __m128 a7, __m128 a8,\n+     int b1, int b2, int b3, int b4, int b5, int b6, int b7, unaligned y)\n+{\n+  return y;\n+}\n+\n+void\n+sse2_test (void)\n+{\n+  unaligned x;\n+  __m128 y = { 0 };\n+  x = y; \n+  y = foo (y, y, y, y, y, y, y, y, 1, 2, 3, 4, 5, 6, -1, x);\n+  if (__builtin_memcmp (&y, &x, sizeof (y)) != 0)\n+    abort ();\n+}"}, {"sha": "ae96cd852d095c767a629c224b84c0c4792205bb", "filename": "gcc/testsuite/gcc.target/i386/pr35767-2d.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-2d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-2d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-2d.c?ref=23ac85e7a888409d32e951245d50bcd5795eb66b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+typedef  __m128d __attribute__((aligned(1))) unaligned;\n+\n+__m128d  __attribute__((noinline))\n+foo (__m128d a1, __m128d a2, __m128d a3, __m128d a4,\n+     __m128d a5, __m128d a6, __m128d a7, __m128d a8,\n+     int b1, int b2, int b3, int b4, int b5, int b6, int b7, unaligned y)\n+{\n+  return y;\n+}\n+\n+void\n+sse2_test (void)\n+{\n+  unaligned x;\n+  __m128d y = { 0 };\n+  x = y; \n+  y = foo (y, y, y, y, y, y, y, y, 1, 2, 3, 4, 5, 6, -1, x);\n+  if (__builtin_memcmp (&y, &x, sizeof (y)) != 0)\n+    abort ();\n+}"}, {"sha": "d241644b62b9f22798d6c2ee929e91e72c337521", "filename": "gcc/testsuite/gcc.target/i386/pr35767-2i.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-2i.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-2i.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-2i.c?ref=23ac85e7a888409d32e951245d50bcd5795eb66b", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#include \"sse2-check.h\"\n+\n+typedef  __m128i __attribute__((aligned(1))) unaligned;\n+\n+__m128i  __attribute__((noinline))\n+foo (__m128i a1, __m128i a2, __m128i a3, __m128i a4,\n+     __m128i a5, __m128i a6, __m128i a7, __m128i a8,\n+     int b1, int b2, int b3, int b4, int b5, int b6, int b7, unaligned y)\n+{\n+  return y;\n+}\n+\n+void\n+sse2_test (void)\n+{\n+  unaligned x;\n+  __m128i y = { 0 };\n+  x = y; \n+  y = foo (y, y, y, y, y, y, y, y, 1, 2, 3, 4, 5, 6, -1, x);\n+  if (__builtin_memcmp (&y, &x, sizeof (y)) != 0)\n+    abort ();\n+}"}, {"sha": "e7592ff7bcb5b4d24964d844fa9fc49a3a12ec91", "filename": "gcc/testsuite/gcc.target/i386/pr35767-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-3.c?ref=23ac85e7a888409d32e951245d50bcd5795eb66b", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target dfp } */\n+/* { dg-options \"-O -msse2 -std=gnu99\" } */\n+\n+#include \"sse2-check.h\"\n+\n+typedef _Decimal128 unaligned __attribute__((aligned(1)));\n+\n+_Decimal128 __attribute__((noinline))\n+foo (_Decimal128 a1, _Decimal128 a2, _Decimal128 a3, _Decimal128 a4,\n+     _Decimal128 a5, _Decimal128 a6, _Decimal128 a7, _Decimal128 a8,\n+     int b1, int b2, int b3, int b4, int b5, int b6, int b7, unaligned y)\n+{\n+  return y;\n+}\n+\n+void\n+sse2_test (void)\n+{\n+  unaligned x;\n+  _Decimal128 y = -1;\n+  x = y;\n+  y = foo (0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, -1, x);\n+  if (__builtin_memcmp (&y, &x, sizeof (y)))\n+    abort ();\n+}"}, {"sha": "e12f64ffe98cad78529b73e65a44f19e4d673a46", "filename": "gcc/testsuite/gcc.target/i386/pr35767-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-4.c?ref=23ac85e7a888409d32e951245d50bcd5795eb66b", "patch": "@@ -0,0 +1,14 @@\n+/* Test that we generate aligned load when memory is aligned.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target dfp } */\n+/* { dg-options \"-O -march=x86-64 -mtune=generic -std=gnu99\" } */\n+/* { dg-final { scan-assembler-not \"movdqu\" } } */\n+/* { dg-final { scan-assembler \"movdqa\" } } */\n+\n+extern _Decimal128 foo (_Decimal128, _Decimal128, _Decimal128);\n+\n+void\n+bar (void)\n+{\n+  foo (0, 0, 0);\n+}"}, {"sha": "4372d2e57465520845c86735055186a8ab1c793f", "filename": "gcc/testsuite/gcc.target/i386/pr35767-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23ac85e7a888409d32e951245d50bcd5795eb66b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35767-5.c?ref=23ac85e7a888409d32e951245d50bcd5795eb66b", "patch": "@@ -0,0 +1,17 @@\n+/* Test that we generate aligned load when memory is aligned.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msse2 -mtune=generic\" } */\n+/* { dg-final { scan-assembler-not \"movups\" } } */\n+/* { dg-final { scan-assembler \"movaps\" } } */\n+\n+typedef float v4sf __attribute__ ((__vector_size__ (16)));\n+\n+extern void foo(v4sf, v4sf, v4sf, v4sf, v4sf, v4sf, v4sf, v4sf, v4sf);\n+\n+int test(void)\n+{\n+  v4sf x = { 0.0, 1.0, 2.0, 3.0 };\n+\n+  foo (x, x, x, x, x, x, x, x, x);\n+  return 0;\n+}"}]}