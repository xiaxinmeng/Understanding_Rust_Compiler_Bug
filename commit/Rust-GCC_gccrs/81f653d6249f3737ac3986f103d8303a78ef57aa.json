{"sha": "81f653d6249f3737ac3986f103d8303a78ef57aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFmNjUzZDYyNDlmMzczN2FjMzk4NmYxMDNkODMwM2E3OGVmNTdhYQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-04-13T03:09:53Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-04-13T03:09:53Z"}, "message": "ada-tree.h (union lang_tree_node): Check for TS_COMMON before calling TREE_CHAIN.\n\ngcc/ada/\n\t* gcc-interface/ada-tree.h (union lang_tree_node): Check for\n\tTS_COMMON before calling TREE_CHAIN.\n\t* gcc-interface/misc.c (gnat_init_ts): New function.\n\t(LANG_HOOKS_INIT_TS): Define.\n\ngcc/\n\t* c-decl.c (union lang_tree_node): Check for TS_COMMON before\n\tcalling TREE_CHAIN.\n\t* print-tree.c (print_node): Likewise.\n\t* tree-inline.c (copy_tree_r): Likewise.\n\t* c-lang.c (LANG_HOOKS_INIT_TS): Define.\n\t* lto-streamer-in.c (lto_input_tree_pointers): Check for TS_TYPED\n\tinstead of TS_COMMON.\n\t* lto-streamer-out.c (lto_output_tree_pointers): Likewise.\n\t* tree.c (initialize_tree_contains_struct): Handle TS_TYPED.\n\t(copy_node_stat): Zero TREE_CHAIN only if necessary.\n\t(MARK_TS_BASE, MARK_TS_TYPED, MARK_TS_COMMON): Move these...\n\t(MARK_TS_DECL_COMMON, MARK_TS_DECL_COMMON, MARK_TS_DECL_WRTL):\n\t...and these...\n\t(MARK_TS_DECL_WITH_VIS, MARK_TS_DECL_NON_COMMON): ...and these...\n\t* tree.h: ...here.\n\t(TREE_CHAIN): Check for a TS_COMMON structure.\n\t(TREE_TYPE): Check for a TS_TYPED structure.\n\ngcc/c-family/\n\t* c-common.h (c_common_init_ts): Declare.\n\t* c-common.c (c_common_init_ts): Define.\n\ngcc/cp/\n\t* cp-lang.c (cp_init_ts): Call cp_common_init_ts.  Move\n\ttree_contains_struct initialization to...\n\t* cp-objcp-common.c (cp_common_init_ts): ...here.  Use MARK_*\n\tmacros.\n\t* cp-objcp-common.h (cp_common_init_ts): Declare.\n\t* cp-tree.h (union lang_tree_node): Check for TS_COMMON before\n\tcalling TREE_CHAIN.\n\ngcc/fortran/\n\t* f95-lang.c (union lang_tree_node): Check for TS_COMMON before\n\tcalling TREE_CHAIN.\n\ngcc/go/\n\t* go-lang.c (union lang_tree_node): Check for TS_COMMON before\n\tcalling TREE_CHAIN.\n\ngcc/java/\n\t* java-tree.h (union lang_tree_node): Check for TS_COMMON before\n\tcalling TREE_CHAIN.\n\ngcc/lto/\n\t* lto-tree.h (union lang_tree_node): Check for TS_COMMON before\n\tcalling TREE_CHAIN.\n\t* lto.c (lto_fixup_common): Likewise.\n\ngcc/objc/\n\t* objc-lang.c (objc_init_ts): Move code for this function...\n\t* objc-act.c (objc_common_init_ts): ...here. Define.\n\t* objc-act.h (objc_common_init_ts): Declare.\n\ngcc/objcp/\n\t* objcp-lang.c (objcxx_init_ts): Call objc_common_init_ts and\n\tcp_common_init_ts.\n\nFrom-SVN: r172359", "tree": {"sha": "e87a035b675d12c1d257fa48efa286338bd704e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e87a035b675d12c1d257fa48efa286338bd704e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81f653d6249f3737ac3986f103d8303a78ef57aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81f653d6249f3737ac3986f103d8303a78ef57aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81f653d6249f3737ac3986f103d8303a78ef57aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81f653d6249f3737ac3986f103d8303a78ef57aa/comments", "author": null, "committer": null, "parents": [{"sha": "d834794704e806bd8d34e9c8889e1f82a7559f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d834794704e806bd8d34e9c8889e1f82a7559f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d834794704e806bd8d34e9c8889e1f82a7559f0d"}], "stats": {"total": 445, "additions": 275, "deletions": 170}, "files": [{"sha": "050e113b3ea13a94fb27ebec3dfa28e74f154180", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -1,3 +1,23 @@\n+2011-04-12  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* c-decl.c (union lang_tree_node): Check for TS_COMMON before\n+\tcalling TREE_CHAIN.\n+\t* print-tree.c (print_node): Likewise.\n+\t* tree-inline.c (copy_tree_r): Likewise.\n+\t* c-lang.c (LANG_HOOKS_INIT_TS): Define.\n+\t* lto-streamer-in.c (lto_input_tree_pointers): Check for TS_TYPED\n+\tinstead of TS_COMMON.\n+\t* lto-streamer-out.c (lto_output_tree_pointers): Likewise.\n+\t* tree.c (initialize_tree_contains_struct): Handle TS_TYPED.\n+\t(copy_node_stat): Zero TREE_CHAIN only if necessary.\n+\t(MARK_TS_BASE, MARK_TS_TYPED, MARK_TS_COMMON): Move these...\n+\t(MARK_TS_DECL_COMMON, MARK_TS_DECL_COMMON, MARK_TS_DECL_WRTL):\n+\t...and these...\n+\t(MARK_TS_DECL_WITH_VIS, MARK_TS_DECL_NON_COMMON): ...and these...\n+\t* tree.h: ...here.\n+\t(TREE_CHAIN): Check for a TS_COMMON structure.\n+\t(TREE_TYPE): Check for a TS_TYPED structure.\n+\n 2011-04-12  Pat Haugen <pthaugen@us.ibm.com>\n \n \t* config/rs6000/rs6000.c (call_ABI_of_interest): Call"}, {"sha": "f97a087ae46ebab6fc470b5d39333b42191c26d0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -1,3 +1,10 @@\n+2011-04-12  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* gcc-interface/ada-tree.h (union lang_tree_node): Check for\n+\tTS_COMMON before calling TREE_CHAIN.\n+\t* gcc-interface/misc.c (gnat_init_ts): New function.\n+\t(LANG_HOOKS_INIT_TS): Define.\n+\n 2011-04-12  Martin Jambor  <mjambor@suse.cz>\n \n \t* gcc-interface/utils.c (end_subprog_body): Call"}, {"sha": "2b14b95cdef0f52fa1c2bf21870467051a939bc6", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -25,7 +25,7 @@\n \n /* The resulting tree type.  */\n union GTY((desc (\"0\"),\n-\t   chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.generic)\")))\n+\t   chain_next (\"CODE_CONTAINS_STRUCT (TREE_CODE (&%h.generic), TS_COMMON) ? ((union lang_tree_node *) TREE_CHAIN (&%h.generic)) : NULL\")))\n   lang_tree_node\n {\n   union tree_node GTY((tag (\"0\"),"}, {"sha": "1f00b33ace3f3e925d712c4a64d9807a51b7cd5d", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -690,6 +690,23 @@ gnat_eh_personality (void)\n   return gnat_eh_personality_decl;\n }\n \n+/* Initialize language-specific bits of tree_contains_struct.  */\n+\n+static void\n+gnat_init_ts (void)\n+{\n+  MARK_TS_COMMON (UNCONSTRAINED_ARRAY_TYPE);\n+\n+  MARK_TS_TYPED (UNCONSTRAINED_ARRAY_REF);\n+  MARK_TS_TYPED (NULL_EXPR);\n+  MARK_TS_TYPED (PLUS_NOMOD_EXPR);\n+  MARK_TS_TYPED (MINUS_NOMOD_EXPR);\n+  MARK_TS_TYPED (ATTR_ADDR_EXPR);\n+  MARK_TS_TYPED (STMT_STMT);\n+  MARK_TS_TYPED (LOOP_STMT);\n+  MARK_TS_TYPED (EXIT_STMT);\n+}\n+\n /* Definitions for our language-specific hooks.  */\n \n #undef  LANG_HOOKS_NAME\n@@ -750,6 +767,8 @@ gnat_eh_personality (void)\n #define LANG_HOOKS_EH_PERSONALITY\tgnat_eh_personality\n #undef  LANG_HOOKS_DEEP_UNSHARING\n #define LANG_HOOKS_DEEP_UNSHARING\ttrue\n+#undef  LANG_HOOKS_INIT_TS\n+#define LANG_HOOKS_INIT_TS\t\tgnat_init_ts\n \n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n "}, {"sha": "34362788826c263115aded51fe7f0670b97db40d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -242,7 +242,7 @@ extern char C_SIZEOF_STRUCT_LANG_IDENTIFIER_isnt_accurate\n /* The resulting tree type.  */\n \n union GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n-       chain_next (\"TREE_CODE (&%h.generic) == INTEGER_TYPE ? (union lang_tree_node *) TYPE_NEXT_VARIANT (&%h.generic) : ((union lang_tree_node *) TREE_CHAIN (&%h.generic))\")))  lang_tree_node\n+       chain_next (\"TREE_CODE (&%h.generic) == INTEGER_TYPE ? (union lang_tree_node *) TYPE_NEXT_VARIANT (&%h.generic) : CODE_CONTAINS_STRUCT (TREE_CODE (&%h.generic), TS_COMMON) ? ((union lang_tree_node *) TREE_CHAIN (&%h.generic)) : NULL\")))  lang_tree_node\n  {\n   union tree_node GTY ((tag (\"0\"),\n \t\t\tdesc (\"tree_node_structure (&%h)\")))"}, {"sha": "fb9d99d6bc0834369364b3e01debf2e041d3f196", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -1,3 +1,8 @@\n+2011-04-12  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* c-common.h (c_common_init_ts): Declare.\n+\t* c-common.c (c_common_init_ts): Define.\n+\n 2011-04-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-objc.h (objc_build_message_expr): Updated prototype."}, {"sha": "752806e275bf034d49157190a1a8a15423926507", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -9711,4 +9711,13 @@ keyword_is_decl_specifier (enum rid keyword)\n     }\n }\n \n+/* Initialize language-specific-bits of tree_contains_struct.  */\n+\n+void\n+c_common_init_ts (void)\n+{\n+  MARK_TS_TYPED (C_MAYBE_CONST_EXPR);\n+  MARK_TS_TYPED (EXCESS_PRECISION_EXPR);\n+}\n+\n #include \"gt-c-family-c-common.h\""}, {"sha": "da9dad5c781129c752ae7003ad3f404b4f2ae701", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -708,6 +708,7 @@ extern tree c_common_fixed_point_type_for_size (unsigned int, unsigned int,\n extern tree c_common_unsigned_type (tree);\n extern tree c_common_signed_type (tree);\n extern tree c_common_signed_or_unsigned_type (int, tree);\n+extern void c_common_init_ts (void);\n extern tree c_build_bitfield_integer_type (unsigned HOST_WIDE_INT, int);\n extern bool decl_with_nonnull_addr_p (const_tree);\n extern tree c_fully_fold (tree, bool, bool *);"}, {"sha": "ae1b08139e76ca661038794da75415a9a28a9f95", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -43,6 +43,8 @@ enum c_language_kind c_language = clk_c;\n #define LANG_HOOKS_NAME \"GNU C\"\n #undef LANG_HOOKS_INIT\n #define LANG_HOOKS_INIT c_objc_common_init\n+#undef LANG_HOOKS_INIT_TS\n+#define LANG_HOOKS_INIT_TS c_common_init_ts\n \n /* Each front end provides its own lang hook initializer.  */\n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;"}, {"sha": "63dbaf04b20565b9d845c7aa4dadec465c47c085", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -1,3 +1,13 @@\n+2011-04-12  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* cp-lang.c (cp_init_ts): Call cp_common_init_ts.  Move\n+\ttree_contains_struct initialization to...\n+\t* cp-objcp-common.c (cp_common_init_ts): ...here.  Use MARK_*\n+\tmacros.\n+\t* cp-objcp-common.h (cp_common_init_ts): Declare.\n+\t* cp-tree.h (union lang_tree_node): Check for TS_COMMON before\n+\tcalling TREE_CHAIN.\n+\n 2011-04-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* parser.c (cp_parser_objc_message_expression): Updated call"}, {"sha": "7b1f450533aebb9c25a5b247bfd9abec888d3a4d", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -101,32 +101,12 @@ objcp_tsubst_copy_and_build (tree t ATTRIBUTE_UNUSED,\n   return NULL_TREE;\n }\n \n-\n static void\n cp_init_ts (void)\n {\n-  tree_contains_struct[NAMESPACE_DECL][TS_DECL_NON_COMMON] = 1;\n-  tree_contains_struct[USING_DECL][TS_DECL_NON_COMMON] = 1;\n-  tree_contains_struct[TEMPLATE_DECL][TS_DECL_NON_COMMON] = 1;\n-\n-  tree_contains_struct[NAMESPACE_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[USING_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[TEMPLATE_DECL][TS_DECL_WITH_VIS] = 1;\n-\n-  tree_contains_struct[NAMESPACE_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[USING_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[TEMPLATE_DECL][TS_DECL_WRTL] = 1;\n-\n-  tree_contains_struct[NAMESPACE_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[USING_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[TEMPLATE_DECL][TS_DECL_COMMON] = 1;\n-\n-  tree_contains_struct[NAMESPACE_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[USING_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[TEMPLATE_DECL][TS_DECL_MINIMAL] = 1;\n+  cp_common_init_ts ();\n \n   init_shadowed_var_for_decl ();\n-\n }\n \n static const char *"}, {"sha": "6a7f4008266f8a9dcf9d99c15d8b51fd2545dcc2", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -224,5 +224,78 @@ init_shadowed_var_for_decl (void)\n \t\t\t\t\t   tree_decl_map_eq, 0);\n }\n \n+void\n+cp_common_init_ts (void)\n+{\n+  MARK_TS_DECL_NON_COMMON (NAMESPACE_DECL);\n+  MARK_TS_DECL_NON_COMMON (USING_DECL);\n+  MARK_TS_DECL_NON_COMMON (TEMPLATE_DECL);\n+\n+  MARK_TS_COMMON (TEMPLATE_TEMPLATE_PARM);\n+  MARK_TS_COMMON (TEMPLATE_TYPE_PARM);\n+  MARK_TS_COMMON (TEMPLATE_PARM_INDEX);\n+  MARK_TS_COMMON (OVERLOAD);\n+  MARK_TS_COMMON (TEMPLATE_INFO);\n+  MARK_TS_COMMON (FOR_STMT);\n+  MARK_TS_COMMON (TYPENAME_TYPE);\n+  MARK_TS_COMMON (TYPEOF_TYPE);\n+  MARK_TS_COMMON (IF_STMT);\n+  MARK_TS_COMMON (BASELINK);\n+  MARK_TS_COMMON (SWITCH_STMT);\n+  MARK_TS_COMMON (TYPE_PACK_EXPANSION);\n+  MARK_TS_COMMON (EXPR_PACK_EXPANSION);\n+  MARK_TS_COMMON (DECLTYPE_TYPE);\n+  MARK_TS_COMMON (BOUND_TEMPLATE_TEMPLATE_PARM);\n+  MARK_TS_COMMON (UNBOUND_CLASS_TEMPLATE);\n+  MARK_TS_COMMON (RANGE_FOR_STMT);\n+\n+  MARK_TS_TYPED (AGGR_INIT_EXPR);\n+  MARK_TS_TYPED (EXPR_STMT);\n+  MARK_TS_TYPED (EH_SPEC_BLOCK);\n+  MARK_TS_TYPED (CLEANUP_STMT);\n+  MARK_TS_TYPED (SCOPE_REF);\n+  MARK_TS_TYPED (CAST_EXPR);\n+  MARK_TS_TYPED (NON_DEPENDENT_EXPR);\n+  MARK_TS_TYPED (MODOP_EXPR);\n+  MARK_TS_TYPED (TRY_BLOCK);\n+  MARK_TS_TYPED (THROW_EXPR);\n+  MARK_TS_TYPED (HANDLER);\n+  MARK_TS_TYPED (REINTERPRET_CAST_EXPR);\n+  MARK_TS_TYPED (CONST_CAST_EXPR);\n+  MARK_TS_TYPED (STATIC_CAST_EXPR);\n+  MARK_TS_TYPED (DYNAMIC_CAST_EXPR);\n+  MARK_TS_TYPED (TEMPLATE_ID_EXPR);\n+  MARK_TS_TYPED (ARROW_EXPR);\n+  MARK_TS_TYPED (SIZEOF_EXPR);\n+  MARK_TS_TYPED (ALIGNOF_EXPR);\n+  MARK_TS_TYPED (AT_ENCODE_EXPR);\n+  MARK_TS_TYPED (UNARY_PLUS_EXPR);\n+  MARK_TS_TYPED (TRAIT_EXPR);\n+  MARK_TS_TYPED (TYPE_ARGUMENT_PACK);\n+  MARK_TS_TYPED (NOEXCEPT_EXPR);\n+  MARK_TS_TYPED (NONTYPE_ARGUMENT_PACK);\n+  MARK_TS_TYPED (WHILE_STMT);\n+  MARK_TS_TYPED (NEW_EXPR);\n+  MARK_TS_TYPED (VEC_NEW_EXPR);\n+  MARK_TS_TYPED (BREAK_STMT);\n+  MARK_TS_TYPED (MEMBER_REF);\n+  MARK_TS_TYPED (DOTSTAR_EXPR);\n+  MARK_TS_TYPED (DO_STMT);\n+  MARK_TS_TYPED (DELETE_EXPR);\n+  MARK_TS_TYPED (VEC_DELETE_EXPR);\n+  MARK_TS_TYPED (CONTINUE_STMT);\n+  MARK_TS_TYPED (TAG_DEFN);\n+  MARK_TS_TYPED (PSEUDO_DTOR_EXPR);\n+  MARK_TS_TYPED (TYPEID_EXPR);\n+  MARK_TS_TYPED (MUST_NOT_THROW_EXPR);\n+  MARK_TS_TYPED (STMT_EXPR);\n+  MARK_TS_TYPED (OFFSET_REF);\n+  MARK_TS_TYPED (OFFSETOF_EXPR);\n+  MARK_TS_TYPED (PTRMEM_CST);\n+  MARK_TS_TYPED (EMPTY_CLASS_EXPR);\n+  MARK_TS_TYPED (VEC_INIT_EXPR);\n+  MARK_TS_TYPED (USING_STMT);\n+  MARK_TS_TYPED (LAMBDA_EXPR);\n+}\n \n #include \"gt-cp-cp-objcp-common.h\""}, {"sha": "c668ad8bcade8f7b76af5db7bf68a22b62e51e78", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -28,6 +28,7 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n \t\t\t\t\t tree, bool);\n \n extern bool cp_function_decl_explicit_p (tree decl);\n+extern void cp_common_init_ts (void);\n \n /* Lang hooks that are shared between C++ and ObjC++ are defined here.  Hooks\n    specific to C++ or ObjC++ go in cp/cp-lang.c and objcp/objcp-lang.c,"}, {"sha": "15c197452339de6e94f6adb50d4e4605d00205bf", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -705,7 +705,7 @@ enum cp_tree_node_structure_enum {\n \n /* The resulting tree type.  */\n union GTY((desc (\"cp_tree_node_structure (&%h)\"),\n-       chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.generic)\"))) lang_tree_node {\n+       chain_next (\"CODE_CONTAINS_STRUCT (TREE_CODE (&%h.generic), TS_COMMON) ? ((union lang_tree_node *) TREE_CHAIN (&%h.generic)) : NULL\"))) lang_tree_node {\n   union tree_node GTY ((tag (\"TS_CP_GENERIC\"),\n \t\t\tdesc (\"tree_node_structure (&%h)\"))) generic;\n   struct template_parm_index_s GTY ((tag (\"TS_CP_TPI\"))) tpi;"}, {"sha": "96b92dca6e3b9a4b2b66e813c9b8fe6d75ad6dd9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -1,3 +1,8 @@\n+2011-04-12  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* f95-lang.c (union lang_tree_node): Check for TS_COMMON before\n+\tcalling TREE_CHAIN.\n+\n 2011-04-12  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/48360"}, {"sha": "ffe8953ef5fe991667cdf1e179fb1a715dc45568", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -59,7 +59,7 @@ lang_identifier {\n /* The resulting tree type.  */\n \n union GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n-     chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.generic)\")))\n+     chain_next (\"CODE_CONTAINS_STRUCT (TREE_CODE (&%h.generic), TS_COMMON) ? ((union lang_tree_node *) TREE_CHAIN (&%h.generic)) : NULL\")))\n \n lang_tree_node {\n   union tree_node GTY((tag (\"0\"),"}, {"sha": "9f400f118c518cbf5a533205475d2ff1e42180ee", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -1,3 +1,8 @@\n+2011-04-12  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* go-lang.c (union lang_tree_node): Check for TS_COMMON before\n+\tcalling TREE_CHAIN.\n+\n 2011-04-06  Ian Lance Taylor  <iant@google.com>\n \n \t* go-gcc.cc (if_statement): Use build3_loc."}, {"sha": "5132e97cfe34dbabba4c31c779d49be2e84adc97", "filename": "gcc/go/go-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fgo%2Fgo-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fgo%2Fgo-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-lang.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -65,7 +65,7 @@ struct GTY(()) lang_identifier\n /* The resulting tree type.  */\n \n union GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n-\t   chain_next (\"(union lang_tree_node *) TREE_CHAIN (&%h.generic)\")))\n+\t   chain_next (\"CODE_CONTAINS_STRUCT (TREE_CODE (&%h.generic), TS_COMMON) ? ((union lang_tree_node *) TREE_CHAIN (&%h.generic)) : NULL\")))\n lang_tree_node\n {\n   union tree_node GTY((tag (\"0\"),"}, {"sha": "0c1912065ba1bca5edf3308262db26eb5bf578c2", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -1,3 +1,8 @@\n+2011-04-12  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* java-tree.h (union lang_tree_node): Check for TS_COMMON before\n+\tcalling TREE_CHAIN.\n+\n 2011-04-11  Martin Jambor  <mjambor@suse.cz>\n \n \t* decl.c (java_mark_decl_local): Call cgraph_get_node instead of"}, {"sha": "e422b4a1557ea83d1a040f8d326ab63d43cc994b", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -587,7 +587,7 @@ struct GTY(()) lang_identifier {\n \n /* The resulting tree type.  */\n union GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n-       chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.generic)\")))\n+       chain_next (\"CODE_CONTAINS_STRUCT (TREE_CODE (&%h.generic), TS_COMMON) ? ((union lang_tree_node *) TREE_CHAIN (&%h.generic)) : NULL\")))\n  \n   lang_tree_node {\n   union tree_node GTY ((tag (\"0\"), "}, {"sha": "f1e426aac344583b048f661dc754456a0cec7348", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -2340,7 +2340,7 @@ lto_input_tree_pointers (struct lto_input_block *ib, struct data_in *data_in,\n \n   code = TREE_CODE (expr);\n \n-  if (CODE_CONTAINS_STRUCT (code, TS_COMMON))\n+  if (CODE_CONTAINS_STRUCT (code, TS_TYPED))\n     lto_input_ts_common_tree_pointers (ib, data_in, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_VECTOR))"}, {"sha": "1f5b054582bdf6e803506c5372dabda95a0c18f0", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -1156,7 +1156,7 @@ lto_output_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n \n   code = TREE_CODE (expr);\n \n-  if (CODE_CONTAINS_STRUCT (code, TS_COMMON))\n+  if (CODE_CONTAINS_STRUCT (code, TS_TYPED))\n     lto_output_ts_common_tree_pointers (ob, expr, ref_p);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_VECTOR))"}, {"sha": "bc72f2f41beb2199842c971412c004f629265add", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -1,3 +1,9 @@\n+2011-04-12  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* lto-tree.h (union lang_tree_node): Check for TS_COMMON before\n+\tcalling TREE_CHAIN.\n+\t* lto.c (lto_fixup_common): Likewise.\n+\n 2011-04-08  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* lto-lang.c (handle_sentinel_attribute): Don't use TYPE_ARG_TYPES."}, {"sha": "847348c72532d295aed095d5e12168689ae1e5b5", "filename": "gcc/lto/lto-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Flto%2Flto-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Flto%2Flto-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-tree.h?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -48,7 +48,7 @@ enum lto_tree_node_structure_enum {\n };\n \n union GTY((desc (\"lto_tree_node_structure (&%h)\"),\n-\t  chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.generic)\")))\n+\t  chain_next (\"CODE_CONTAINS_STRUCT (TREE_CODE (&%h.generic), TS_COMMON) ? ((union lang_tree_node *) TREE_CHAIN (&%h.generic)) : NULL\")))\n     lang_tree_node\n {\n   union tree_node GTY ((tag (\"TS_LTO_GENERIC\"),"}, {"sha": "eebc50f1553cacef6518350ca2032635e5240f0e", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -1618,7 +1618,8 @@ lto_fixup_common (tree t, void *data)\n \n   /* This is not very efficient because we cannot do tail-recursion with\n      a long chain of trees. */\n-  LTO_FIXUP_SUBTREE (TREE_CHAIN (t));\n+  if (CODE_CONTAINS_STRUCT (TREE_CODE (t), TS_COMMON))\n+    LTO_FIXUP_SUBTREE (TREE_CHAIN (t));\n }\n \n /* Fix up fields of a decl_minimal T.  DATA points to fix-up states.  */"}, {"sha": "caceac12b5b047cb48c80650e1e90f3b3fb79a13", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -1,3 +1,9 @@\n+2011-04-12  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* objc-lang.c (objc_init_ts): Move code for this function...\n+\t* objc-act.c (objc_common_init_ts): ...here. Define.\n+\t* objc-act.h (objc_common_init_ts): Declare.\n+\n 2011-04-12  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (objc_build_message_expr): Accept two arguments"}, {"sha": "13eef24d04dd0d153f6f4d2d17519458ca22eb16", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -10640,4 +10640,22 @@ objc_v2_encode_prop_attr (tree property)\n   return get_identifier (string);\n }\n \n+void\n+objc_common_init_ts (void)\n+{\n+  c_common_init_ts ();\n+\n+  MARK_TS_DECL_NON_COMMON (CLASS_METHOD_DECL);\n+  MARK_TS_DECL_NON_COMMON (INSTANCE_METHOD_DECL);\n+  MARK_TS_DECL_NON_COMMON (KEYWORD_DECL);\n+  MARK_TS_DECL_NON_COMMON (PROPERTY_DECL);\n+\n+  MARK_TS_COMMON (CLASS_INTERFACE_TYPE);\n+  MARK_TS_COMMON (PROTOCOL_INTERFACE_TYPE);\n+  MARK_TS_COMMON (CLASS_IMPLEMENTATION_TYPE);\n+\n+  MARK_TS_TYPED (MESSAGE_SEND_EXPR);\n+  MARK_TS_TYPED (PROPERTY_REF);\n+}\n+\n #include \"gt-objc-objc-act.h\""}, {"sha": "909181a1fd260dfe9dbe9fcb3363058ce1321374", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -28,6 +28,7 @@ bool objc_init (void);\n const char *objc_printable_name (tree, int);\n tree objc_fold_obj_type_ref (tree, tree);\n int objc_gimplify_expr (tree *, gimple_seq *, gimple_seq *);\n+void objc_common_init_ts (void);\n \n /* NB: The remaining public functions are prototyped in c-common.h, for the\n    benefit of stub-objc.c and objc-act.c.  */"}, {"sha": "169b89406778d4df797b1d160928f497aea16c22", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -36,7 +36,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-lang.h\"\n \n enum c_language_kind c_language = clk_objc;\n-static void objc_init_ts (void);\n \n /* Lang hooks common to C and ObjC are declared in c-objc-common.h;\n    consequently, there should be very few hooks below.  */\n@@ -50,41 +49,12 @@ static void objc_init_ts (void);\n #undef LANG_HOOKS_GIMPLIFY_EXPR \n #define LANG_HOOKS_GIMPLIFY_EXPR objc_gimplify_expr\n #undef LANG_HOOKS_INIT_TS\n-#define LANG_HOOKS_INIT_TS objc_init_ts\n+#define LANG_HOOKS_INIT_TS objc_common_init_ts\n \n /* Each front end provides its own lang hook initializer.  */\n struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n /* Lang hook routines common to C and ObjC appear in c-objc-common.c;\n    there should be very few (if any) routines below.  */\n \n-static void\n-objc_init_ts (void)\n-{\n-  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_NON_COMMON] = 1;\n-  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_NON_COMMON] = 1;\n-  tree_contains_struct[KEYWORD_DECL][TS_DECL_NON_COMMON] = 1;\n-  tree_contains_struct[PROPERTY_DECL][TS_DECL_NON_COMMON] = 1;\n-  \n-  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[KEYWORD_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[PROPERTY_DECL][TS_DECL_WITH_VIS] = 1;\n-\n-  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[KEYWORD_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[PROPERTY_DECL][TS_DECL_WRTL] = 1;\n-  \n-  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[KEYWORD_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[PROPERTY_DECL][TS_DECL_MINIMAL] = 1;\n-  \n-  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[KEYWORD_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[PROPERTY_DECL][TS_DECL_COMMON] = 1;\n-}\n-\n #include \"gtype-objc.h\""}, {"sha": "f78e493c485119e21848b5adb919636e43854880", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -1,3 +1,8 @@\n+2011-04-12  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* objcp-lang.c (objcxx_init_ts): Call objc_common_init_ts and\n+\tcp_common_init_ts.\n+\n 2011-03-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR bootstrap/48167"}, {"sha": "0019022b84bd9b28145e208ed4222002fa48bbae", "filename": "gcc/objcp/objcp-lang.c", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fobjcp%2Fobjcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fobjcp%2Fobjcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-lang.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -89,52 +89,8 @@ objcp_tsubst_copy_and_build (tree t, tree args, tsubst_flags_t complain,\n static void\n objcxx_init_ts (void)\n {\n-  /* objc decls */\n-  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_NON_COMMON] = 1;\n-  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_NON_COMMON] = 1;\n-  tree_contains_struct[KEYWORD_DECL][TS_DECL_NON_COMMON] = 1;\n-  tree_contains_struct[PROPERTY_DECL][TS_DECL_NON_COMMON] = 1;\n-  \n-  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[KEYWORD_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[PROPERTY_DECL][TS_DECL_WITH_VIS] = 1;\n-\n-  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[KEYWORD_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[PROPERTY_DECL][TS_DECL_WRTL] = 1;\n-  \n-  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[KEYWORD_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[PROPERTY_DECL][TS_DECL_MINIMAL] = 1;\n-  \n-  tree_contains_struct[CLASS_METHOD_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[INSTANCE_METHOD_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[KEYWORD_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[PROPERTY_DECL][TS_DECL_COMMON] = 1;\n-  \n-  /* C++ decls */\n-  tree_contains_struct[NAMESPACE_DECL][TS_DECL_NON_COMMON] = 1;\n-  tree_contains_struct[USING_DECL][TS_DECL_NON_COMMON] = 1;\n-  tree_contains_struct[TEMPLATE_DECL][TS_DECL_NON_COMMON] = 1;\n-\n-  tree_contains_struct[NAMESPACE_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[USING_DECL][TS_DECL_WITH_VIS] = 1;\n-  tree_contains_struct[TEMPLATE_DECL][TS_DECL_WITH_VIS] = 1;\n-\n-  tree_contains_struct[NAMESPACE_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[USING_DECL][TS_DECL_WRTL] = 1;\n-  tree_contains_struct[TEMPLATE_DECL][TS_DECL_WRTL] = 1;\n-  \n-  tree_contains_struct[NAMESPACE_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[USING_DECL][TS_DECL_COMMON] = 1;\n-  tree_contains_struct[TEMPLATE_DECL][TS_DECL_COMMON] = 1;\n- \n-  tree_contains_struct[NAMESPACE_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[USING_DECL][TS_DECL_MINIMAL] = 1;\n-  tree_contains_struct[TEMPLATE_DECL][TS_DECL_MINIMAL] = 1;\n+  objc_common_init_ts ();\n+  cp_common_init_ts ();\n \n   init_shadowed_var_for_decl ();\n }"}, {"sha": "b0c68990ec51ecb0c28c1f2b04993946fad796e8", "filename": "gcc/print-tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -756,7 +756,8 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t      print_node (file, temp, TREE_OPERAND (node, i), indent + 4);\n \t    }\n \t}\n-      print_node (file, \"chain\", TREE_CHAIN (node), indent + 4);\n+      if (CODE_CONTAINS_STRUCT (code, TS_COMMON))\n+\tprint_node (file, \"chain\", TREE_CHAIN (node), indent + 4);\n       break;\n \n     case tcc_constant:"}, {"sha": "84307ac3429fbc385cba581fa4f4222163215e00", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -4253,7 +4253,8 @@ copy_tree_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \t here.  */\n       tree chain = NULL_TREE, new_tree;\n \n-      chain = TREE_CHAIN (*tp);\n+      if (CODE_CONTAINS_STRUCT (code, TS_COMMON))\n+\tchain = TREE_CHAIN (*tp);\n \n       /* Copy the node.  */\n       new_tree = copy_node (*tp);"}, {"sha": "9d9101da833e71f0ae60ffe91dc636743f2540ad", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 58, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -352,53 +352,6 @@ initialize_tree_contains_struct (void)\n {\n   unsigned i;\n \n-#define MARK_TS_BASE(C)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    tree_contains_struct[C][TS_BASE] = 1;\t\t\\\n-  } while (0)\n-\n-#define MARK_TS_TYPED(C)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    MARK_TS_BASE (C);\t\t\t\t\t\\\n-    tree_contains_struct[C][TS_TYPED] = 1;\t\t\\\n-  } while (0)\n-\n-#define MARK_TS_COMMON(C)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    MARK_TS_TYPED (C);\t\t\t\t\t\\\n-    tree_contains_struct[C][TS_COMMON] = 1;\t\t\\\n-  } while (0)\n-\n-#define MARK_TS_DECL_MINIMAL(C)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    MARK_TS_COMMON (C);\t\t\t\t\t\\\n-    tree_contains_struct[C][TS_DECL_MINIMAL] = 1;\t\\\n-  } while (0)\n-\n-#define MARK_TS_DECL_COMMON(C)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    MARK_TS_DECL_MINIMAL (C);\t\t\t\t\\\n-    tree_contains_struct[C][TS_DECL_COMMON] = 1;\t\\\n-  } while (0)\n-\n-#define MARK_TS_DECL_WRTL(C)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    MARK_TS_DECL_COMMON (C);\t\t\t\t\\\n-    tree_contains_struct[C][TS_DECL_WRTL] = 1;\t\t\\\n-  } while (0)\n-\n-#define MARK_TS_DECL_WITH_VIS(C)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    MARK_TS_DECL_WRTL (C);\t\t\t\t\\\n-    tree_contains_struct[C][TS_DECL_WITH_VIS] = 1;\t\\\n-  } while (0)\n-\n-#define MARK_TS_DECL_NON_COMMON(C)\t\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    MARK_TS_DECL_WITH_VIS (C);\t\t\t\t\\\n-    tree_contains_struct[C][TS_DECL_NON_COMMON] = 1;\t\\\n-  } while (0)\n-\n   for (i = ERROR_MARK; i < LAST_AND_UNUSED_TREE_CODE; i++)\n     {\n       enum tree_code code;\n@@ -413,10 +366,14 @@ initialize_tree_contains_struct (void)\n       /* Mark all the structures that TS is derived from.  */\n       switch (ts_code)\n \t{\n-\tcase TS_COMMON:\n+\tcase TS_TYPED:\n \t  MARK_TS_BASE (code);\n \t  break;\n \n+\tcase TS_COMMON:\n+\t  MARK_TS_TYPED (code);\n+\t  break;\n+\n \tcase TS_INT_CST:\n \tcase TS_REAL_CST:\n \tcase TS_FIXED_CST:\n@@ -521,14 +478,6 @@ initialize_tree_contains_struct (void)\n   gcc_assert (tree_contains_struct[FUNCTION_DECL][TS_FUNCTION_DECL]);\n   gcc_assert (tree_contains_struct[IMPORTED_DECL][TS_DECL_MINIMAL]);\n   gcc_assert (tree_contains_struct[IMPORTED_DECL][TS_DECL_COMMON]);\n-\n-#undef MARK_TS_BASE\n-#undef MARK_TS_COMMON\n-#undef MARK_TS_DECL_MINIMAL\n-#undef MARK_TS_DECL_COMMON\n-#undef MARK_TS_DECL_WRTL\n-#undef MARK_TS_DECL_WITH_VIS\n-#undef MARK_TS_DECL_NON_COMMON\n }\n \n \n@@ -964,7 +913,7 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n }\n \f\n /* Return a new node with the same contents as NODE except that its\n-   TREE_CHAIN is zero and it has a fresh uid.  */\n+   TREE_CHAIN, if it has one, is zero and it has a fresh uid.  */\n \n tree\n copy_node_stat (tree node MEM_STAT_DECL)\n@@ -980,7 +929,8 @@ copy_node_stat (tree node MEM_STAT_DECL)\n   t = ggc_alloc_zone_tree_node_stat (&tree_zone, length PASS_MEM_STAT);\n   memcpy (t, node, length);\n \n-  TREE_CHAIN (t) = 0;\n+  if (CODE_CONTAINS_STRUCT (code, TS_COMMON))\n+    TREE_CHAIN (t) = 0;\n   TREE_ASM_WRITTEN (t) = 0;\n   TREE_VISITED (t) = 0;\n   if (code == VAR_DECL || code == PARM_DECL || code == RESULT_DECL)"}, {"sha": "5d331858ad69a153089837203f8430ee07835040", "filename": "gcc/tree.h", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81f653d6249f3737ac3986f103d8303a78ef57aa/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=81f653d6249f3737ac3986f103d8303a78ef57aa", "patch": "@@ -50,6 +50,54 @@ MAX_TREE_CODES\n extern unsigned char tree_contains_struct[MAX_TREE_CODES][64];\n #define CODE_CONTAINS_STRUCT(CODE, STRUCT) (tree_contains_struct[(CODE)][(STRUCT)])\n \n+/* Macros for initializing `tree_contains_struct'.  */\n+#define MARK_TS_BASE(C)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    tree_contains_struct[C][TS_BASE] = 1;\t\t\\\n+  } while (0)\n+\n+#define MARK_TS_TYPED(C)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_BASE (C);\t\t\t\t\t\\\n+    tree_contains_struct[C][TS_TYPED] = 1;\t\t\\\n+  } while (0)\n+\n+#define MARK_TS_COMMON(C)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_TYPED (C);\t\t\t\t\t\\\n+    tree_contains_struct[C][TS_COMMON] = 1;\t\t\\\n+  } while (0)\n+\n+#define MARK_TS_DECL_MINIMAL(C)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_COMMON (C);\t\t\t\t\t\\\n+    tree_contains_struct[C][TS_DECL_MINIMAL] = 1;\t\\\n+  } while (0)\n+\n+#define MARK_TS_DECL_COMMON(C)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_DECL_MINIMAL (C);\t\t\t\t\\\n+    tree_contains_struct[C][TS_DECL_COMMON] = 1;\t\\\n+  } while (0)\n+\n+#define MARK_TS_DECL_WRTL(C)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_DECL_COMMON (C);\t\t\t\t\\\n+    tree_contains_struct[C][TS_DECL_WRTL] = 1;\t\t\\\n+  } while (0)\n+\n+#define MARK_TS_DECL_WITH_VIS(C)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_DECL_WRTL (C);\t\t\t\t\\\n+    tree_contains_struct[C][TS_DECL_WITH_VIS] = 1;\t\\\n+  } while (0)\n+\n+#define MARK_TS_DECL_NON_COMMON(C)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    MARK_TS_DECL_WITH_VIS (C);\t\t\t\t\\\n+    tree_contains_struct[C][TS_DECL_NON_COMMON] = 1;\t\\\n+  } while (0)\n+\n /* Number of language-independent tree codes.  */\n #define NUM_TREE_CODES ((int) LAST_AND_UNUSED_TREE_CODE)\n \n@@ -864,15 +912,15 @@ enum tree_node_structure_enum {\n    are chained together.  */\n \n #define TREE_CHAIN(NODE) __extension__ \\\n-(*({__typeof (NODE) const __t = (NODE);\t\t\t\t\\\n+(*({__typeof (NODE) const __t = CONTAINS_STRUCT_CHECK (NODE, TS_COMMON);\\\n     &__t->common.chain; }))\n \n /* In all nodes that are expressions, this is the data type of the expression.\n    In POINTER_TYPE nodes, this is the type that the pointer points to.\n    In ARRAY_TYPE nodes, this is the type of the elements.\n    In VECTOR_TYPE nodes, this is the type of the elements.  */\n #define TREE_TYPE(NODE) __extension__ \\\n-(*({__typeof (NODE) const __t = (NODE);\t\t\t\t\t\\\n+(*({__typeof (NODE) const __t = CONTAINS_STRUCT_CHECK (NODE, TS_TYPED); \\\n     &__t->typed.type; }))\n \n extern void tree_contains_struct_check_failed (const_tree,"}]}