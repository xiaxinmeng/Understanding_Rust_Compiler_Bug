{"sha": "2a908f3da07c9e94b8a19e966b45daf0140107e8", "node_id": "C_kwDOANBUbNoAKDJhOTA4ZjNkYTA3YzllOTRiOGExOWU5NjZiNDVkYWYwMTQwMTA3ZTg", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-24T14:17:35Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-24T14:17:35Z"}, "message": "c++: value category of compound object expr [PR104173]\n\nHere the call to (the &&-qualified) toLower() is incorrectly rejected\nduring overload resolution because the object expression is encoded as\nan lvalue when it's really a prvalue.  The object expression,\ninstance()->applicationName(), is encoded as an INDIRECT_REF of a\nCOMPOUND_EXPR\n\n  *(*instance ();, &TARGET_EXPR <D.2383, QCoreApplication::applicationName ()>;);\n\nwhich lvalue_kind deems an lvalue.\n\nThis issue is similar to PR88103 except that here the original compound\nobject expression is a prvalue rather than an xvalue.  The fix there was to\nadjust the result of unary_complex_lvalue in build_class_member_access_expr\nso that xvalueness of the original expression is preserved.  This patch\nextends that fix so that rvalueness is preserved more generally.\n\n\tPR c++/104173\n\ngcc/cp/ChangeLog:\n\n\t* typeck.cc (build_class_member_access_expr): Extend\n\tunary_complex_lvalue result adjustment to preserve all\n\trvalues, not just xvalues.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/ref-qual21.C: New test.", "tree": {"sha": "40d0d91058738beeae31277f037abac21b4618c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40d0d91058738beeae31277f037abac21b4618c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a908f3da07c9e94b8a19e966b45daf0140107e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a908f3da07c9e94b8a19e966b45daf0140107e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a908f3da07c9e94b8a19e966b45daf0140107e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a908f3da07c9e94b8a19e966b45daf0140107e8/comments", "author": null, "committer": null, "parents": [{"sha": "978abe918f8c8deed28e92297d3c0cc39086ad83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/978abe918f8c8deed28e92297d3c0cc39086ad83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/978abe918f8c8deed28e92297d3c0cc39086ad83"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "11c9d8aff3e90c64af584ed95432ab723e8846fc", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a908f3da07c9e94b8a19e966b45daf0140107e8/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a908f3da07c9e94b8a19e966b45daf0140107e8/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=2a908f3da07c9e94b8a19e966b45daf0140107e8", "patch": "@@ -2726,17 +2726,14 @@ build_class_member_access_expr (cp_expr object, tree member,\n   /* Transform `(a, b).x' into `(*(a, &b)).x', `(a ? b : c).x' into\n      `(*(a ?  &b : &c)).x', and so on.  A COND_EXPR is only an lvalue\n      in the front end; only _DECLs and _REFs are lvalues in the back end.  */\n-  {\n-    tree temp = unary_complex_lvalue (ADDR_EXPR, object);\n-    if (temp)\n-      {\n-\ttemp = cp_build_fold_indirect_ref (temp);\n-\tif (xvalue_p (object) && !xvalue_p (temp))\n-\t  /* Preserve xvalue kind.  */\n-\t  temp = move (temp);\n-\tobject = temp;\n-      }\n-  }\n+  if (tree temp = unary_complex_lvalue (ADDR_EXPR, object))\n+    {\n+      temp = cp_build_fold_indirect_ref (temp);\n+      if (!lvalue_p (object) && lvalue_p (temp))\n+\t/* Preserve rvalueness.  */\n+\ttemp = move (temp);\n+      object = temp;\n+    }\n \n   /* In [expr.ref], there is an explicit list of the valid choices for\n      MEMBER.  We check for each of those cases here.  */"}, {"sha": "7f867c217065a0ea4a18ac3545093012062dfae6", "filename": "gcc/testsuite/g++.dg/cpp0x/ref-qual21.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a908f3da07c9e94b8a19e966b45daf0140107e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-qual21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a908f3da07c9e94b8a19e966b45daf0140107e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-qual21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fref-qual21.C?ref=2a908f3da07c9e94b8a19e966b45daf0140107e8", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/104173\n+// { dg-do compile { target c++11 } }\n+\n+struct QString {\n+  QString toLower() &&;\n+};\n+\n+struct QCoreApplication {\n+  static QString applicationName();\n+};\n+\n+QCoreApplication* instance();\n+\n+void f() {\n+  instance()->applicationName().toLower();\n+}\n+\n+template<class...>\n+void g() {\n+  instance()->applicationName().toLower();\n+}\n+\n+template void g<>();"}]}