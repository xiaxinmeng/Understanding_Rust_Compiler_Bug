{"sha": "c2e87766d37a191d9e7559b70b1848312355761c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJlODc3NjZkMzdhMTkxZDllNzU1OWI3MGIxODQ4MzEyMzU1NzYxYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-11-16T16:52:20Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-11-16T16:52:20Z"}, "message": "ipa-split.c (split_bb_info): Turn time to sreal.\n\n\n\t* ipa-split.c (split_bb_info): Turn time to sreal.\n\t(split_point): Likewise.\n\t(dump_split_point): Likewise.\n\t(fine_split_points): Likewise.\n\t(execute_split_functions): Only zero split_bbs; turn time to sreals.\n\nFrom-SVN: r254835", "tree": {"sha": "8f6e6e843b7cb8324951ee4ba78e5cafb279944f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f6e6e843b7cb8324951ee4ba78e5cafb279944f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2e87766d37a191d9e7559b70b1848312355761c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e87766d37a191d9e7559b70b1848312355761c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2e87766d37a191d9e7559b70b1848312355761c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e87766d37a191d9e7559b70b1848312355761c/comments", "author": null, "committer": null, "parents": [{"sha": "b71289b1efb995c2a0d233105e06df81b764c503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71289b1efb995c2a0d233105e06df81b764c503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71289b1efb995c2a0d233105e06df81b764c503"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "250cda6537a3a60e8d832eae553110ee3b9b5b6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e87766d37a191d9e7559b70b1848312355761c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e87766d37a191d9e7559b70b1848312355761c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2e87766d37a191d9e7559b70b1848312355761c", "patch": "@@ -1,3 +1,11 @@\n+2017-11-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-split.c (split_bb_info): Turn time to sreal.\n+\t(split_point): Likewise.\n+\t(dump_split_point): Likewise.\n+\t(fine_split_points): Likewise.\n+\t(execute_split_functions): Only zero split_bbs; turn time to sreals.\n+\n 2017-11-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-fnsummary.c (analyze_function_body): Accumulate time consistently"}, {"sha": "a5b4c41b32b8522ccc56a616a32a5dc9fe2325a6", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2e87766d37a191d9e7559b70b1848312355761c/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2e87766d37a191d9e7559b70b1848312355761c/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=c2e87766d37a191d9e7559b70b1848312355761c", "patch": "@@ -111,7 +111,7 @@ along with GCC; see the file COPYING3.  If not see\n struct split_bb_info\n {\n   unsigned int size;\n-  unsigned int time;\n+  sreal time;\n };\n \n static vec<split_bb_info> bb_info_vec;\n@@ -121,7 +121,8 @@ static vec<split_bb_info> bb_info_vec;\n struct split_point\n {\n   /* Size of the partitions.  */\n-  unsigned int header_time, header_size, split_time, split_size;\n+  sreal header_time, split_time;\n+  unsigned int header_size, split_size;\n \n   /* SSA names that need to be passed into spit function.  */\n   bitmap ssa_names_to_pass;\n@@ -195,10 +196,11 @@ dump_split_point (FILE * file, struct split_point *current)\n {\n   fprintf (file,\n \t   \"Split point at BB %i\\n\"\n-\t   \"  header time: %i header size: %i\\n\"\n-\t   \"  split time: %i split size: %i\\n  bbs: \",\n-\t   current->entry_bb->index, current->header_time,\n-\t   current->header_size, current->split_time, current->split_size);\n+\t   \"  header time: %f header size: %i\\n\"\n+\t   \"  split time: %f split size: %i\\n  bbs: \",\n+\t   current->entry_bb->index, current->header_time.to_double (),\n+\t   current->header_size, current->split_time.to_double (),\n+\t   current->split_size);\n   dump_bitmap (file, current->split_bbs);\n   fprintf (file, \"  SSA names to pass: \");\n   dump_bitmap (file, current->ssa_names_to_pass);\n@@ -1034,7 +1036,8 @@ struct stack_entry\n   int earliest;\n \n   /* Overall time and size of all BBs reached from this BB in DFS walk.  */\n-  int overall_time, overall_size;\n+  sreal overall_time;\n+  int overall_size;\n \n   /* When false we can not split on this BB.  */\n   bool can_split;\n@@ -1059,7 +1062,7 @@ struct stack_entry\n    the component used by consider_split.  */\n \n static void\n-find_split_points (basic_block return_bb, int overall_time, int overall_size)\n+find_split_points (basic_block return_bb, sreal overall_time, int overall_size)\n {\n   stack_entry first;\n   vec<stack_entry> stack = vNULL;\n@@ -1731,7 +1734,8 @@ execute_split_functions (void)\n {\n   gimple_stmt_iterator bsi;\n   basic_block bb;\n-  int overall_time = 0, overall_size = 0;\n+  sreal overall_time = 0;\n+  int overall_size = 0;\n   int todo = 0;\n   struct cgraph_node *node = cgraph_node::get (current_function_decl);\n \n@@ -1822,33 +1826,36 @@ execute_split_functions (void)\n \n   /* Compute local info about basic blocks and determine function size/time.  */\n   bb_info_vec.safe_grow_cleared (last_basic_block_for_fn (cfun) + 1);\n-  memset (&best_split_point, 0, sizeof (best_split_point));\n+  best_split_point.split_bbs = NULL;\n   basic_block return_bb = find_return_bb ();\n   int tsan_exit_found = -1;\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      int time = 0;\n+      sreal time = 0;\n       int size = 0;\n-      int freq = compute_call_stmt_bb_frequency (current_function_decl, bb);\n+      sreal freq = bb->count.to_sreal_scale\n+\t\t\t (ENTRY_BLOCK_PTR_FOR_FN (cfun)->count);\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"Basic block %i\\n\", bb->index);\n \n       for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n \t{\n-\t  int this_time, this_size;\n+\t  sreal this_time;\n+\t  int this_size;\n \t  gimple *stmt = gsi_stmt (bsi);\n \n \t  this_size = estimate_num_insns (stmt, &eni_size_weights);\n-\t  this_time = estimate_num_insns (stmt, &eni_time_weights) * freq;\n+\t  this_time = (sreal)estimate_num_insns (stmt, &eni_time_weights)\n+\t\t\t * freq;\n \t  size += this_size;\n \t  time += this_time;\n \t  check_forbidden_calls (stmt);\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n-\t      fprintf (dump_file, \"  freq:%6i size:%3i time:%3i \",\n-\t\t       freq, this_size, this_time);\n+\t      fprintf (dump_file, \"  freq:%4.2f size:%3i time:%4.2f \",\n+\t\t       freq.to_double (), this_size, this_time.to_double ());\n \t      print_gimple_stmt (dump_file, stmt, 0);\n \t    }\n "}]}