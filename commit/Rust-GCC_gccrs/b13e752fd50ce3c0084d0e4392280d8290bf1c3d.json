{"sha": "b13e752fd50ce3c0084d0e4392280d8290bf1c3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEzZTc1MmZkNTBjZTNjMDA4NGQwZTQzOTIyODBkODI5MGJmMWMzZA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-09T00:30:41Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-09T00:30:41Z"}, "message": "re PR c++/12242 (g++ should warn about out-of-range int->enum conversions)\n\n2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR c++/12242\ncp/\n\t* cvt.c (ocp_convert): Warn for out-of-range conversions to enum.\n\ntestsuite/\n\t* g++.dg/warn/pr12242.C: New.\n\nFrom-SVN: r138898", "tree": {"sha": "1a4421253e39d8a04c7c0e7d3bf749563fa6341d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a4421253e39d8a04c7c0e7d3bf749563fa6341d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b13e752fd50ce3c0084d0e4392280d8290bf1c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b13e752fd50ce3c0084d0e4392280d8290bf1c3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b13e752fd50ce3c0084d0e4392280d8290bf1c3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b13e752fd50ce3c0084d0e4392280d8290bf1c3d/comments", "author": null, "committer": null, "parents": [{"sha": "97679e5f65218a9f6cef39b194f7845bba8bf90b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97679e5f65218a9f6cef39b194f7845bba8bf90b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97679e5f65218a9f6cef39b194f7845bba8bf90b"}], "stats": {"total": 103, "additions": 93, "deletions": 10}, "files": [{"sha": "bd8821cf7a76996450f6104b50d630dadd8ab4d2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13e752fd50ce3c0084d0e4392280d8290bf1c3d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13e752fd50ce3c0084d0e4392280d8290bf1c3d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b13e752fd50ce3c0084d0e4392280d8290bf1c3d", "patch": "@@ -1,3 +1,8 @@\n+2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/12242\n+\t* cvt.c (ocp_convert): Warn for out-of-range conversions to enum.\n+\n 2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 36901"}, {"sha": "8e26927c373f0c589c7dcdb760f9b89d3e3bf3c0", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13e752fd50ce3c0084d0e4392280d8290bf1c3d/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13e752fd50ce3c0084d0e4392280d8290bf1c3d/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=b13e752fd50ce3c0084d0e4392280d8290bf1c3d", "patch": "@@ -638,19 +638,35 @@ ocp_convert (tree type, tree expr, int convtype, int flags)\n   if (INTEGRAL_CODE_P (code))\n     {\n       tree intype = TREE_TYPE (e);\n-      /* enum = enum, enum = int, enum = float, (enum)pointer are all\n-\t errors.  */\n-      if (TREE_CODE (type) == ENUMERAL_TYPE\n-\t  && (((INTEGRAL_OR_ENUMERATION_TYPE_P (intype)\n+\n+      if (TREE_CODE (type) == ENUMERAL_TYPE)\n+\t{\n+\t  /* enum = enum, enum = int, enum = float, (enum)pointer are all\n+\t     errors.  */\n+\t  if (((INTEGRAL_OR_ENUMERATION_TYPE_P (intype)\n \t\t|| TREE_CODE (intype) == REAL_TYPE)\n \t       && ! (convtype & CONV_STATIC))\n-\t      || TREE_CODE (intype) == POINTER_TYPE))\n-\t{\n-\t  if (flags & LOOKUP_COMPLAIN)\n-\t    permerror (\"conversion from %q#T to %q#T\", intype, type);\n+\t      || TREE_CODE (intype) == POINTER_TYPE)\n+\t    {\n+\t      if (flags & LOOKUP_COMPLAIN)\n+\t\tpermerror (\"conversion from %q#T to %q#T\", intype, type);\n \n-\t  if (!flag_permissive)\n-\t    return error_mark_node;\n+\t      if (!flag_permissive)\n+\t\treturn error_mark_node;\n+\t    }\n+\n+\t  /* [expr.static.cast]\n+\n+\t     8. A value of integral or enumeration type can be explicitly\n+\t     converted to an enumeration type. The value is unchanged if\n+\t     the original value is within the range of the enumeration\n+\t     values. Otherwise, the resulting enumeration value is\n+\t     unspecified.  */\n+\t  if (TREE_CODE (expr) == INTEGER_CST && !int_fits_type_p (expr, type))\n+\t    warning (OPT_Wconversion, \n+\t\t     \"the result of the conversion is unspecified because \"\n+\t\t     \"%qE is outside the range of type %qT\",\n+\t\t     expr, type);\n \t}\n       if (MAYBE_CLASS_TYPE_P (intype))\n \t{"}, {"sha": "31b271e94d0f5f8f12acbd179e614091519e5172", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13e752fd50ce3c0084d0e4392280d8290bf1c3d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13e752fd50ce3c0084d0e4392280d8290bf1c3d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b13e752fd50ce3c0084d0e4392280d8290bf1c3d", "patch": "@@ -1,3 +1,8 @@\n+2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR c++/12242\n+\t* g++.dg/warn/pr12242.C: New.\n+\t\n 2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 36901"}, {"sha": "db4cc103c3ae1006ba7f444d7ccd03c324201b25", "filename": "gcc/testsuite/g++.dg/warn/pr12242.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b13e752fd50ce3c0084d0e4392280d8290bf1c3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr12242.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b13e752fd50ce3c0084d0e4392280d8290bf1c3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr12242.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr12242.C?ref=b13e752fd50ce3c0084d0e4392280d8290bf1c3d", "patch": "@@ -0,0 +1,57 @@\n+// PR 12242: should warn about out-of-range int->enum conversions\n+// { dg-do compile }\n+// { dg-options \"-Wconversion -fpermissive\" }\n+enum X { A };\n+enum Y { B, C, D };\n+\n+void example ()\n+{\n+  int i = 5;\n+  X x;\n+  Y y;\n+  \n+  x = 10;  // { dg-warning \"warning: invalid conversion from .int. to .X.\" }\n+           // { dg-warning \"warning:\\[^\\n\\]*unspecified\" \"\" { target *-*-* } 13 }\n+  x = 1;   // { dg-warning \"warning: invalid conversion from .int. to .X.\" }\n+  x = C;   // { dg-error \"error: cannot convert .Y. to .X. in assignment\" }  \n+  x = D;   // { dg-error \"error: cannot convert .Y. to .X. in assignment\" }  \n+  y = A;   // { dg-error \"error: cannot convert .X. to .Y. in assignment\" }  \n+  x = y;   // { dg-error \"error: cannot convert .Y. to .X. in assignment\" }  \n+  x = i;   // { dg-warning \"warning: invalid conversion from .int. to .X.\"  }\n+}\n+\n+void foo () \n+{\n+  X a = static_cast<X> (10); // { dg-warning \"warning:\\[^\\n\\]*unspecified\" }\n+  X b = static_cast<X> (0);\n+  X c = static_cast<X> (1);\n+  X d = static_cast<X> (2); // { dg-warning \"warning:\\[^\\n\\]*unspecified\" }\n+  X f = static_cast<X> ((int)A);\n+  X g = static_cast<X> (B);\n+  X h = static_cast<X> (C);\n+  X e = static_cast<X> (D); // { dg-warning \"warning\\[^\\n\\]*unspecified\" }\n+}\n+\n+enum QEvent { x = 42 }; \n+ \n+int bar()\n+{ \n+  QEvent x = ( QEvent ) 42000; // { dg-warning \"warning\\[^\\n\\]*unspecified\" }\n+  return ( int ) x; \n+}\n+\n+enum W {a,b,c};\n+enum Z {d,e,f,g};\n+void bazz (int, int, int, int);\n+\n+void baz() {\n+  int three = 3;\n+  int four = 4;\n+  bazz (\n+\tW(three), \n+\tW(3), \n+\tZ(four), \n+\tZ(4) // { dg-warning \"warning\\[^\\n\\]*unspecified\" }\n+\t);\n+}\n+"}]}