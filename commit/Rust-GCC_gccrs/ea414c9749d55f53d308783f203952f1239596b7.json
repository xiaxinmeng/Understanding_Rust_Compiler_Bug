{"sha": "ea414c9749d55f53d308783f203952f1239596b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE0MTRjOTc0OWQ1NWY1M2QzMDg3ODNmMjAzOTUyZjEyMzk1OTZiNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-07-13T07:14:13Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-13T07:14:13Z"}, "message": "gcc.c (do_spec_1): Add new %B operator.\n\n\t* gcc.c (do_spec_1): Add new %B operator.\n\t(set_input): Prepare for %B.\n\n\t(link_command_spec): Move up with the other tm.h-\n\toverrideable specs.  Factor out the portion conditional on\n\tLINK_LIBGCC_SPECIAL into a new spec, %(link_libgcc).\n\t(struct compiler): Just have a single spec string.  All users\n\tupdated.\n\t(default_compilers): Remove unnecessary braces.\n\t(static_specs): Update.\n\n\t(trad_capable_cpp, cpp_options, cc1_options, asm_options): New\n\tnamed specs.\n\t(C and assembly specs): Use the new named specs, as appropriate.\n\n\t* objc/lang-specs.h, ch/lang-specs.h, cp/lang-specs.h,\n\tf/lang-specs.h, java/lang-specs.h: Use the new named specs.\n\tRemove unnecessary braces.\n\nFrom-SVN: r35008", "tree": {"sha": "b97fcab509348e7c18c9ecbc2cb4f89b06acf1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b97fcab509348e7c18c9ecbc2cb4f89b06acf1c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea414c9749d55f53d308783f203952f1239596b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea414c9749d55f53d308783f203952f1239596b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea414c9749d55f53d308783f203952f1239596b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea414c9749d55f53d308783f203952f1239596b7/comments", "author": null, "committer": null, "parents": [{"sha": "450624947fdcedff2808937c1788894353f288a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450624947fdcedff2808937c1788894353f288a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/450624947fdcedff2808937c1788894353f288a0"}], "stats": {"total": 732, "additions": 244, "deletions": 488}, "files": [{"sha": "b4dff54900399a50b7b59a482f509b719277c569", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea414c9749d55f53d308783f203952f1239596b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea414c9749d55f53d308783f203952f1239596b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea414c9749d55f53d308783f203952f1239596b7", "patch": "@@ -1,3 +1,23 @@\n+2000-07-13  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* gcc.c (do_spec_1): Add new %B operator.\n+\t(set_input): Prepare for %B.\n+\n+\t(link_command_spec): Move up with the other tm.h-\n+\toverrideable specs.  Factor out the portion conditional on\n+\tLINK_LIBGCC_SPECIAL into a new spec, %(link_libgcc).\n+\t(struct compiler): Just have a single spec string.  All users\n+\tupdated.\n+\t(default_compilers): Remove unnecessary braces.\n+\t(static_specs): Update.\n+\n+\t(trad_capable_cpp, cpp_options, cc1_options, asm_options): New\n+\tnamed specs.\n+\t(C and assembly specs): Use the new named specs, as appropriate.\n+\n+\t* objc/lang-specs.h: Use the new named specs.  \n+\tRemove unnecessary braces.\n+\n 2000-07-12  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* gcc.c (execute): If a subprocess gets a fatal signal, report"}, {"sha": "339f48dfc132822c22dfccf2e054888f8a6b9991", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=ea414c9749d55f53d308783f203952f1239596b7", "patch": "@@ -1,3 +1,7 @@\n+2000-07-13  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* lang-specs.h: Use the new named specs.  Remove unnecessary braces.\n+\n 2000-06-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* decl.c (init_decl_processing): Set TYPE_USER_ALIGN."}, {"sha": "3813e5a94fa6842e22b570f1568e394d4d4c15f8", "filename": "gcc/ch/lang-specs.h", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fch%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fch%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flang-specs.h?ref=ea414c9749d55f53d308783f203952f1239596b7", "patch": "@@ -21,24 +21,10 @@ Boston, MA 02111-1307, USA.  */\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    CHILL.  */\n \n-  {\".ch\",  {\"@chill\"}},\n-  {\".chi\", {\"@chill\"}},\n+  {\".ch\",  \"@chill\"},\n+  {\".chi\", \"@chill\"},\n   {\"@chill\",\n-     {\"tradcpp -lang-chill %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n-\t%{C:%{!E:%eGNU CHILL does not support -C without using -E}}\\\n-        %{!no-gcc:-D__GNUCHILL__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n-        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:-D__OPTIMIZE__} \\\n-\t%{!undef:%{!ansi:%p} %P} \\\n-\t%{fshow-column} %{fno-show-column}\\\n-\t%{g*} %{W*} %{w} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n-        %i %{!E:%g.i}%{E:%W{o*}} \\n\",\n-   \"%{!E:cc1chill %g.i %1 \\\n-\t\t   %{!Q:-quiet} -dumpbase %b.ch %{d*} %{m*} %{a}\\\n-\t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{itu} \\\n-\t\t   %{v:-version} %{pg:-p} %{p} %{f*} %{I*} \\\n-\t\t   %{aux-info*} %{Qn:-fno-ident} %X \\\n-\t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n-              %{!S:as %a %Y \\\n-\t\t      %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-                      %{!pipe:%g.s} %A\\n }}\"}},\n+     \"tradcpp -lang-chill %{!no-gcc:-D__GNUCHILL__=%v1} %(cpp_options)\\\n+\t      %{!M:%{!MM:%{!E:%{!pipe:%g.i} |\\n\\\n+      cc1chill %{!pipe:%g.i} %(cc1_options) %{!S:-o %{|!pipe:%g.s} |\\n\\\n+      as %(asm_options) %{!pipe:%g.s} %A }}}}\\n\"},"}, {"sha": "49f9a02790c744113f4e053cdbaf66691a25a710", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea414c9749d55f53d308783f203952f1239596b7", "patch": "@@ -1,3 +1,7 @@\n+2000-07-13  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* lang-specs.h: Use the new named specs.  Remove unnecessary braces.\n+\n 2000-07-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* Makefile.in ($(PARSE_H)): Depend directly on parse.y."}, {"sha": "04025a523fa2ff58cf428ef1518040e29c2b7a67", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 26, "deletions": 76, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=ea414c9749d55f53d308783f203952f1239596b7", "patch": "@@ -22,84 +22,34 @@ Boston, MA 02111-1307, USA.  */\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    g++.  */\n \n-  {\".cc\", {\"@c++\"}},\n-  {\".cp\", {\"@c++\"}},\n-  {\".cxx\", {\"@c++\"}},\n-  {\".cpp\", {\"@c++\"}},\n-  {\".c++\", {\"@c++\"}},\n-  {\".C\", {\"@c++\"}},\n+  {\".cc\",  \"@c++\"},\n+  {\".cp\",  \"@c++\"},\n+  {\".cxx\", \"@c++\"},\n+  {\".cpp\", \"@c++\"},\n+  {\".c++\", \"@c++\"},\n+  {\".C\",   \"@c++\"},\n   {\"@c++\",\n #if USE_CPPLIB\n-   {\n-     \"%{E|M|MM:cpp -lang-c++ %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n-\t%{C:%{!E:%eGNU C++ does not support -C without using -E}}\\\n-\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-\t%{!no-gcc:-D__GNUC__=%v1 -D__GNUG__=%v1 -D__GNUC_MINOR__=%v2\\\n-\t-D__GNUC_PATCHLEVEL__=%v3} -D__cplusplus\\\n-\t%{ansi:-trigraphs -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n-\t%{!fno-exceptions:-D__EXCEPTIONS}\\\n-        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}} %{trigraphs}\\\n-\t%{ffast-math:-D__FAST_MATH__}\\\n-\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n-        %i %{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}}\\n}\\\n-      %{!E:%{!M:%{!MM:cc1plus %i %1 %2\\\n-                            -lang-c++ %{nostdinc*} %{C} %{A*} %{I*} %{P} %{$} %I\\\n-                            %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-                            %{!no-gcc:-D__GNUC__=%v1 -D__GNUG__=%v1\\\n-                            -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n-                            -D__cplusplus\\\n-                            %{ansi:-trigraphs -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n-                            %{!fno-exceptions:-D__EXCEPTIONS}\\\n-\t\t\t    %{fnew-abi:-D__GXX_ABI_VERSION=100}\\\n-                            %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n-\t\t\t    %{ffast-math:-D__FAST_MATH__}\\\n-\t\t\t    %{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n-                            %{trigraphs}\\\n-\t\t\t    %{!Q:-quiet} -dumpbase %b.cc %{d*} %{m*} %{a}\\\n-\t\t\t    %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi}\\\n-                            %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n-\t\t\t    %{v:-version} %{pg:-p} %{p}\\\n-\t\t\t    %{f*} %{+e*} %{aux-info*} %{Qn:-fno-ident}\\\n-\t\t\t    %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t\t    %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}}|\\n\\\n-              %{!S:%{!fsyntax-only:as %a %Y\\\n-\t\t      %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-                      %{!pipe:%g.s} %A\\n }}}}}\"}},\n+    \"%{E|M|MM:cpp -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n+       %{fnew-abi:-D__GXX_ABI_VERSION=100}\\\n+       %{ansi:-trigraphs -$ -D__STRICT_ANSI__} %(cpp_options)}\\\n+     %{!E:%{!M:%{!MM:cc1plus -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n+       %{fnew-abi:-D__GXX_ABI_VERSION=100}\\\n+       %{ansi:-trigraphs -$ -D__STRICT_ANSI__}\\\n+       %(cpp_options) %(cc1_options) %{+e*}\\\n+       %{!S:-o %{|!pipe:%g.s} |\\n\\\n+     as %(asm_options) %{!pipe:%g.s} %A }}}}\"\n #else /* ! USE_CPPLIB */\n-   {\"cpp -lang-c++ %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n-\t%{C:%{!E:%eGNU C++ does not support -C without using -E}}\\\n-\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-\t%{!no-gcc:-D__GNUC__=%v1 -D__GNUG__=%v1 -D__GNUC_MINOR__=%v2\\\n-\t-D__GNUC_PATCHLEVEL__=%v3} -D__cplusplus\\\n-\t%{ansi:-trigraphs -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n-\t%{!fno-exceptions:-D__EXCEPTIONS}\\\n-\t%{fnew-abi:-D__GXX_ABI_VERSION=100}\\\n-        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}} %{trigraphs}\\\n-\t%{ffast-math:-D__FAST_MATH__}\\\n-\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n-\t%{fshow-column} %{fno-show-column}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n-        %i %{!M:%{!MM:%{!E:%{!pipe:%g.ii}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n-    \"%{!M:%{!MM:%{!E:cc1plus %{!pipe:%g.ii} %1 %2\\\n-\t\t\t    %{!Q:-quiet} -dumpbase %b.cc %{d*} %{m*} %{a}\\\n-\t\t\t    %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi}\\\n-\t\t\t    %{v:-version} %{pg:-p} %{p}\\\n-\t\t\t    %{f*} %{+e*} %{aux-info*} %{Qn:-fno-ident}\\\n-\t\t\t    %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t\t    %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}}|\\n\\\n-              %{!S:%{!fsyntax-only:as %a %Y\\\n-\t\t      %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-                      %{!pipe:%g.s} %A\\n }}}}}\"}},\n+    \"cpp -lang-c++ %{!no-gcc:-D__GNUG__=%v1}\\\n+       %{fnew-abi:-D__GXX_ABI_VERSION=100}\\\n+       %{ansi:-trigraphs -$ -D__STRICT_ANSI__} %(cpp_options)\\\n+       %{!M:%{!MM:%{!E:%{!pipe:%g.ii} |\\n\\\n+     cc1plus %{!pipe:%g.ii} %(cc1_options) %{+e*} %{!S:-o %{|!pipe:%g.s} |\\n\\\n+     as %(asm_options) %{!pipe:%g.s} %A }}}}\\n\"\n #endif /* ! USE_CPPLIB */\n-  {\".ii\", {\"@c++-cpp-output\"}},\n+  },\n+  {\".ii\", \"@c++-cpp-output\"},\n   {\"@c++-cpp-output\",\n-   {\"%{!M:%{!MM:%{!E:cc1plus %i %1 %2 %{!Q:-quiet} %{d*} %{m*} %{a}\\\n-\t\t\t    %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi}\\\n-\t\t\t    %{v:-version} %{pg:-p} %{p} -fpreprocessed\\\n-\t\t\t    %{f*} %{+e*} %{aux-info*} %{Qn:-fno-ident}\\\n-\t\t\t    %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t\t    %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n-\t            %{!S:as %a %Y\\\n-\t\t\t    %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-\t\t\t    %{!pipe:%g.s} %A\\n }}}}\"}},\n+   \"%{!M:%{!MM:%{!E:\\\n+    cc1plus -fpreprocessed %{!pipe:%g.ii} %(cc1_options) %{+e*}\\\n+    %{!S:-o %{|!pipe:%g.s} |\\n as %(asm_options) %{!pipe:%g.s} %A }}}}\"},"}, {"sha": "a33696c8c2d3fbf5701c6f51caced61a4111d6c7", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=ea414c9749d55f53d308783f203952f1239596b7", "patch": "@@ -1,3 +1,7 @@\n+2000-07-13  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* lang-specs.h: Use the new named specs.  Remove unnecessary braces.\n+\n 2000-07-02  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* version.c: Bump version number."}, {"sha": "5d1852ec975ea19988b9a917ee3257d1e32cb53b", "filename": "gcc/f/lang-specs.h", "status": "modified", "additions": 20, "deletions": 68, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Ff%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Ff%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Flang-specs.h?ref=ea414c9749d55f53d308783f203952f1239596b7", "patch": "@@ -24,77 +24,29 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    g77.  */\n \n-  {\".F\", {\"@f77-cpp-input\"}},\n-  {\".fpp\", {\"@f77-cpp-input\"}},\n-  {\".FPP\", {\"@f77-cpp-input\"}},\n+  {\".F\",   \"@f77-cpp-input\"},\n+  {\".fpp\", \"@f77-cpp-input\"},\n+  {\".FPP\", \"@f77-cpp-input\"},\n   {\"@f77-cpp-input\",\n-     /* For f77 we want -traditional to avoid errors with, for\n-\tinstance, mismatched '.  Also, we avoid unpleasant surprises\n-\twith substitution of names not prefixed by `_' by using %P\n-\trather than %p (although this isn't consistent with SGI and\n-\tSun f77, at least) so you test `__unix' rather than `unix'.\n-\t-D_LANGUAGE_FORTRAN is used by some compilers like SGI and\n-\tmight as well be in there. */\n-   {\"tradcpp -lang-fortran %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n-\t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n-\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-\t%{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n-\t%{!undef:%P} \\\n-\t%c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}} \\\n-\t%{ffast-math:-D__FAST_MATH__}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n-\t%i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n-    \"%{!M:%{!MM:%{!E:f771 %{!pipe:%g.i} %1 %(f771) \\\n-\t\t   %{!Q:-quiet} -dumpbase %b.F %{d*} %{m*} %{a*}\\\n-\t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} \\\n-\t\t   %{v:-version -fversion} %{pg:-p} %{p} %{f*} %{I*}\\\n-\t\t   %{aux-info*} %{Qn:-fno-ident}\\\n-\t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n-\t      %{!S:as %a %Y\\\n-\t\t      %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-\t\t      %{!pipe:%g.s} %A\\n }}}}\"}},\n-  {\".r\", {\"@ratfor\"}},\n+   \"tradcpp -lang-fortran %(cpp_options) %{!M:%{!MM:%{!E:%{!pipe:%g.f |\\n\\\n+    f771 %{!pipe:%g.f} %(cc1_options) %{!S:-o %{|!pipe:%g.s} |\\n\\\n+    as %(asm_options) %{!pipe:%g.s} %A }}}}}\\n\"},\n+  {\".r\", \"@ratfor\"},\n   {\"@ratfor\",\n-   {\"ratfor %{C} %{v}\\\n-           %{C:%{!E:%eGNU C does not support -C without using -E}}\\\n-           %{!E:%{!pipe:-o %g.f}}%{E:%W{o*}} %i |\\n\",\n-    \"%{!E:f771 %{!pipe:%g.f} %1 %(f771) \\\n-\t   %{!Q:-quiet} -dumpbase %b.r %{d*} %{m*} %{a*}\\\n-\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} \\\n-\t   %{v:-version -fversion} %{pg:-p} %{p} %{f*} %{I*}\\\n-\t   %{aux-info*} %{Qn:-fno-ident}\\\n-\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n-\t   %{!S:as %a %Y\\\n-\t   %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-           %{!pipe:%g.s} %A\\n }}\"}},\n-  {\".f\", {\"@f77\"}},\n-  {\".for\", {\"@f77\"}},\n-  {\".FOR\", {\"@f77\"}},\n+   \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n+    ratfor %{C} %{v} %i %{E:%W{o*}} %{!E: %{!pipe:-o %g.f} |\\n\\\n+    f771 %{!pipe:%g.f} %(cc1_options) %{!S:-o %{|!pipe:%g.s} |\\n\\\n+    as %(asm_options) %{!pipe:%g.s} %A }}\\n\"},\n+  {\".f\",   \"@f77\"},\n+  {\".for\", \"@f77\"},\n+  {\".FOR\", \"@f77\"},\n   {\"@f77\",\n-   {\"%{!M:%{!MM:%{!E:f771 %i %1 %(f771) \\\n-\t\t   %{!Q:-quiet} -dumpbase %b.f %{d*} %{m*} %{a*}\\\n-\t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*}\\\n-\t\t   %{v:-version -fversion} %{pg:-p} %{p} %{f*} %{I*}\\\n-\t\t   %{aux-info*} %{Qn:-fno-ident}\\\n-\t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n-\t      %{!S:as %a %Y\\\n-\t\t      %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-\t\t      %{!pipe:%g.s} %A\\n }}}}\"}},\n+   \"%{!M:%{!MM:%{!E:f771 %i %(cc1_options) %{!S:-o %{|!pipe:%g.s} |\\n\\\n+     as %(asm_options) %{!pipe:%g.s} %A }}}}\\n\"},\n+  /* XXX This is perverse and should not be necessary.  */\n   {\"@f77-version\",\n-   {\"tradcpp -lang-fortran %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I \\\n-      %{C:%{!E:%eGNU C does not support -C without using -E}} \\\n-      %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG} \\\n-      %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3} \\\n-      %{ansi:-trigraphs -$ -D__STRICT_ANSI__} \\\n-      %{!undef:%P} -D_LANGUAGE_FORTRAN %{trigraphs} \\\n-      %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}} -traditional \\\n-      %{ffast-math:-D__FAST_MATH__}\\\n-      %{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z \\\n-      /dev/null /dev/null \\n\\\n-     f771 -fnull-version %1 %(f771) \\\n+   \"tradcpp -lang-fortran %(cpp_options) /dev/null /dev/null \\n\\\n+    f771 -fnull-version %1 \\\n       %{!Q:-quiet} -dumpbase g77-version.f %{d*} %{m*} %{a*} \\\n       %{g*} %{O*} %{W*} %{w} %{pedantic*} \\\n       -version -fversion %{f*} %{I*} -o %g.s /dev/null \\n\\\n@@ -106,4 +58,4 @@ the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n       %{!nostdlib:%{!nodefaultlibs:%G %L %G}} \\\n       %{!A:%{!nostdlib:%{!nostartfiles:%E}}} \\\n       %{T*} \\n\\\n-     %g \\n\"}},\n+     %g \\n\"},"}, {"sha": "e8efb17e3abcb1e9d8ef3b5ed979afb38c398684", "filename": "gcc/gcc.c", "status": "modified", "additions": 133, "deletions": 237, "changes": 370, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ea414c9749d55f53d308783f203952f1239596b7", "patch": "@@ -267,6 +267,7 @@ or with constant text in a single argument.\n  %b     substitute the basename of the input file being processed.\n \tThis is the substring up to (and not including) the last period\n \tand not including the directory.\n+ %B\tsame as %b, but include the file suffix (text after the last period).\n  %gSUFFIX\n \tsubstitute a file name that has suffix SUFFIX and is chosen\n \tonce per compilation, and mark the argument a la %d.  To reduce\n@@ -496,6 +497,33 @@ proper position among the other output files.  */\n #define LINKER_NAME \"collect2\"\n #endif\n \n+/* Here is the spec for running the linker, after compiling all files.  */\n+\n+/* -u* was put back because both BSD and SysV seem to support it.  */\n+/* %{static:} simply prevents an error message if the target machine\n+   doesn't handle -static.  */\n+/* We want %{T*} after %{L*} and %D so that it can be used to specify linker\n+   scripts which exist in user specified directories, or in standard\n+   directories.  */\n+#ifndef LINK_COMMAND_SPEC\n+#define LINK_COMMAND_SPEC \"\\\n+%{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\\\n+    %(linker) %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} %{r} %{s} %{t}\\\n+    %{u*} %{x} %{z} %{Z} %{!A:%{!nostdlib:%{!nostartfiles:%S}}}\\\n+    %{static:} %{L*} %(link_libgcc) %o %{!nostdlib:%{!nodefaultlibs:%G %L %G}}\\\n+    %{!A:%{!nostdlib:%{!nostartfiles:%E}}} %{T*} }}}}}}\"\n+#endif\n+\n+#ifndef LINK_LIBGCC_SPEC\n+# ifdef LINK_LIBGCC_SPECIAL\n+/* Don't generate -L options for startfile prefix list.  */\n+#  define LINK_LIBGCC_SPEC \"\"\n+# else\n+/* Do generate them.  */\n+#  define LINK_LIBGCC_SPEC \"%D\"\n+# endif\n+#endif\n+\n static const char *cpp_spec = CPP_SPEC;\n static const char *cpp_predefines = CPP_PREDEFINES;\n static const char *cc1_spec = CC1_SPEC;\n@@ -510,6 +538,43 @@ static const char *endfile_spec = ENDFILE_SPEC;\n static const char *startfile_spec = STARTFILE_SPEC;\n static const char *switches_need_spaces = SWITCHES_NEED_SPACES;\n static const char *linker_name_spec = LINKER_NAME;\n+static const char *link_command_spec = LINK_COMMAND_SPEC;\n+static const char *link_libgcc_spec = LINK_LIBGCC_SPEC;\n+\n+/* Standard options to cpp, cc1, and as, to reduce duplication in specs.\n+   There should be no need to override these in target dependent files,\n+   but we need to copy them to the specs file so that newer versions\n+   of the GCC driver can correctly drive older tool chains with the\n+   appropriate -B options.  */\n+\n+static const char *trad_capable_cpp =\n+\"%{traditional|ftraditional|traditional-cpp:trad}cpp\";\n+\n+static const char *cpp_options =\n+\"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n+ %{std*} %{nostdinc*}\\\n+ %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n+ %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n+ %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n+ %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n+ %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n+ %{ffast-math:-D__FAST_MATH__}\\\n+ %{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n+ %{fshow-column} %{fno-show-column}\\\n+ %{fleading-underscore} %{fno-leading-underscore}\\\n+ %{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z %i\\\n+ %{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}}\";\n+\n+static const char *cc1_options =\n+\"%{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n+ %1 %{!Q:-quiet} -dumpbase %B %{d*} %{m*} %{a*}\\\n+ %{g*} %{O*} %{W*} %{w} %{pedantic*} %{std*} %{ansi}\\\n+ %{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n+ %{aux-info*} %{Qn:-fno-ident} %{--help:--help}\\\n+ %{S:%W{o*}%{!o*:-o %b.s}}\";\n+\n+static const char *asm_options =\n+\"%a %Y %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\";\n \n /* Some compilers have limits on line lengths, and the multilib_select\n    and/or multilib_matches strings can be very long, so we build them at\n@@ -583,8 +648,7 @@ struct compiler\n   const char *suffix;\t\t/* Use this compiler for input files\n \t\t\t\t   whose names end in this suffix.  */\n \n-  const char *spec[4];\t\t/* To use this compiler, concatenate these\n-\t\t\t\t   specs and pass to do_spec.  */\n+  const char *spec;\t\t/* To use this compiler, run this spec.  */\n };\n \n /* Pointer to a vector of `struct compiler' that gives the spec for\n@@ -610,200 +674,61 @@ static struct compiler default_compilers[] =\n      were not present when we built the driver, we will hit these copies\n      and be given a more meaningful error than \"file not used since\n      linking is not done\".  */\n-  {\".m\", {\"#Objective-C\"}},\n-  {\".cc\", {\"#C++\"}}, {\".cxx\", {\"#C++\"}}, {\".cpp\", {\"#C++\"}},\n-  {\".c++\", {\"#C++\"}}, {\".C\", {\"#C++\"}},\n-  {\".ads\", {\"#Ada\"}}, {\".adb\", {\"#Ada\"}}, {\".ada\", {\"#Ada\"}},\n-  {\".f\", {\"#Fortran\"}}, {\".for\", {\"#Fortran\"}}, {\".F\", {\"#Fortran\"}},\n-  {\".fpp\", {\"#Fortran\"}},\n-  {\".p\", {\"#Pascal\"}}, {\".pas\", {\"#Pascal\"}},\n+  {\".m\",  \"#Objective-C\"},\n+  {\".cc\", \"#C++\"}, {\".cxx\", \"#C++\"}, {\".cpp\", \"#C++\"},\n+  {\".c++\", \"#C++\"}, {\".C\", \"#C++\"},\n+  {\".ads\", \"#Ada\"}, {\".adb\", \"#Ada\"}, {\".ada\", \"#Ada\"},\n+  {\".f\", \"#Fortran\"}, {\".for\", \"#Fortran\"}, {\".F\", \"#Fortran\"},\n+  {\".fpp\", \"#Fortran\"}, {\".r\", \"#Ratfor\"},\n+  {\".p\", \"#Pascal\"}, {\".pas\", \"#Pascal\"},\n+  {\".ch\", \"#Chill\"}, {\".chi\", \"#Chill\"},\n+  {\".java\", \"#Java\"}, {\".class\", \"#Java\"},\n+  {\".zip\", \"#Java\"}, {\".jar\", \"#Java\"},\n   /* Next come the entries for C.  */\n-  {\".c\", {\"@c\"}},\n+  {\".c\", \"@c\"},\n   {\"@c\",\n-   {\n #if USE_CPPLIB\n-     \"%{E|M|MM:cpp -lang-c %{ansi:-std=c89} %{std*} %{nostdinc*}\\\n-\t%{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n-\t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n-\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-        %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n-\t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n-        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n-\t%{ffast-math:-D__FAST_MATH__}\\\n-\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n-        %{traditional} %{ftraditional:-traditional}\\\n-        %{traditional-cpp:-traditional}\\\n-\t%{fleading-underscore} %{fno-leading-underscore}\\\n-\t%{fshow-column} %{fno-show-column}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n-        %i %{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}}\\n}\\\n-      %{!E:%{!M:%{!MM:cc1 %i %1 \\\n-                  %{std*} %{nostdinc*} %{A*} %{I*} %I\\\n-                  %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a*}\\\n-                  %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-                  %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n-\t\t  %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n-                  %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n-\t\t  %{ffast-math:-D__FAST_MATH__}\\\n-\t\t  %{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n-\t\t  %{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n-                  %{H} %C %{D*} %{U*} %{i*} %Z\\\n-                  %{ftraditional:-traditional}\\\n-                  %{traditional-cpp:-traditional}\\\n-\t\t  %{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n-\t\t  %{aux-info*} %{Qn:-fno-ident}\\\n-\t\t  %{--help:--help}\\\n-\t\t  %{g*} %{O*} %{W*} %{w} %{pedantic*}\\\n-\t\t  %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t  %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n-                  %{!S:as %a %Y\\\n-\t\t     %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-                     %{!pipe:%g.s} %A\\n }}}}\"\n+     \"%{E|M|MM:cpp -lang-c %{ansi:-std=c89} %(cpp_options)}\\\n+      %{!E:%{!M:%{!MM:cc1 -lang-c %{ansi:-std=c89} %(cpp_options)\\\n+\t\t\t  %(cc1_options) %{!S:-o %{|!pipe:%g.s} |\\n\\\n+      as %(asm_options) %{!pipe:%g.s} %A }}}}\"\n #else /* ! USE_CPPLIB */\n-    \"%{traditional|ftraditional|traditional-cpp:trad}cpp -lang-c \\\n-\t%{ansi:-std=c89} %{std*} %{nostdinc*}\\\n-\t%{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n-\t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n-\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-        %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n-\t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n-        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n-\t%{ffast-math:-D__FAST_MATH__}\\\n-\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n-\t%{fshow-column} %{fno-show-column}\\\n-\t%{fleading-underscore} %{fno-leading-underscore}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n-        %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n-   \"%{!M:%{!MM:%{!E:cc1 %{!pipe:%g.i} %1 \\\n-\t\t   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a*}\\\n-\t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{std*}\\\n-\t\t   %{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n-\t\t   %{aux-info*} %{Qn:-fno-ident}\\\n-\t\t   %{--help:--help} \\\n-\t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n-              %{!S:as %a %Y\\\n-\t\t      %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-                      %{!pipe:%g.s} %A\\n }}}}\"\n+     \"%(trad_capable_cpp) -lang-c %{ansi:-std=c89} %(cpp_options) \\\n+\t\t\t  %{!M:%{!MM:%{!E:%{!pipe:%g.i} |\\n\\\n+      cc1 %{!pipe:%g.i} %(cc1_options)  %{!S:-o %{|!pipe:%g.s} |\\n\\\n+      as %(asm_options) %{!pipe:%g.s} %A }}}}\\n\"\n #endif /* ! USE_CPPLIB */\n-  }},\n+  },\n   {\"-\",\n-   {\"%{E:%{traditional|ftraditional|traditional-cpp:trad}cpp \\\n-        -lang-c %{ansi:-std=c89} %{std*} %{nostdinc*}\\\n-\t%{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n-\t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n-\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-        %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n-\t%{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n-        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n-\t%{ffast-math:-D__FAST_MATH__}\\\n-\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n-\t%{fshow-column} %{fno-show-column}\\\n-\t%{fleading-underscore} %{fno-leading-underscore}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n-        %i %W{o*}}\\\n-    %{!E:%e-E required when input is from standard input}\"}},\n-  {\".h\", {\"@c-header\"}},\n+   \"%{!E:%e-E required when input is from standard input}\\\n+    %(trad_capable_cpp) -lang-c %{ansi:-std=c89} %(cpp_options)\"},\n+  {\".h\", \"@c-header\"},\n   {\"@c-header\",\n-   {\"%{!E:%eCompilation of header file requested} \\\n-     %{traditional|ftraditional|traditional-cpp:trad}cpp \\\n-\t%{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n-\t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n-\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-        %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n-\t%{!undef:%{!std=*:%p}%{std=gnu*:%p} %P} %{trigraphs}\\\n-        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n-\t%{ffast-math:-D__FAST_MATH__}\\\n-\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n-\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n-\t%{fshow-column} %{fno-show-column}\\\n-\t%{fleading-underscore} %{fno-leading-underscore}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n-        %i %W{o*}\"}},\n-  {\".i\", {\"@cpp-output\"}},\n+   \"%{!E:%eCompilation of header file requested} \\\n+    %(trad_capable_cpp) -lang-c %{ansi:-std=c89} %(cpp-options)\"},\n+  {\".i\", \"@cpp-output\"},\n   {\"@cpp-output\",\n-   {\"%{!M:%{!MM:%{!E:cc1 %i %1 %{!Q:-quiet} %{d*} %{m*} %{a*}\\\n-\t\t\t%{g*} %{O*} %{W*} %{w} %{pedantic*} %{std*}\\\n-\t\t\t%{traditional} %{v:-version} %{pg:-p} %{p} %{f*}\\\n-\t\t\t%{aux-info*} %{Qn:-fno-ident} -fpreprocessed\\\n-\t\t\t%{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t\t%{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n-\t\t     %{!S:as %a %Y\\\n-\t\t\t     %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-\t\t\t     %{!pipe:%g.s} %A\\n }}}}\"}},\n-  {\".s\", {\"@assembler\"}},\n+   \"%{!M:%{!MM:%{!E:\\\n+    cc1 %i %(cc1_options) %{!S:|\\n\\\n+    as %(asm_options) %{!pipe:%g.s} %A }}}}\"},\n+  {\".s\", \"@assembler\"},\n   {\"@assembler\",\n-   {\"%{!M:%{!MM:%{!E:%{!S:as %a %Y\\\n-\t\t            %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-\t\t\t    %i %A\\n }}}}\"}},\n-  {\".S\", {\"@assembler-with-cpp\"}},\n+   \"%{!M:%{!MM:%{!E:%{!S:as %(asm_options) %i %A }}}}\"},\n+  {\".S\", \"@assembler-with-cpp\"},\n   {\"@assembler-with-cpp\",\n-   {\"%{traditional|ftraditional|traditional-cpp:trad}cpp -lang-asm \\\n-\t%{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n-\t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n-\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG} %{trigraphs}\\\n-        -$ %{!undef:%p %P} \\\n-        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n-\t%{ffast-math:-D__FAST_MATH__}\\\n-\t%{fshort-wchar:-D__WCHAR_TYPE__=short\\\\ unsigned\\\\ int}\\\n-\t%{fshow-column} %{fno-show-column}\\\n-\t%{fleading-underscore} %{fno-leading-underscore}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n-        %i %{!M:%{!MM:%{!E:%{!pipe:%g.s}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n-    \"%{!M:%{!MM:%{!E:%{!S:as %a %Y\\\n-                    %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-\t\t    %{!pipe:%g.s} %A\\n }}}}\"}},\n+   \"%(trad_capable_cpp) -lang-asm %(cpp_options) \\\n+\t\t\t%{!M:%{!MM:%{!E:%{!S: %{!pipe:%g.s} |\\n\\\n+    as %(asm_options) %{!pipe:%g.s} %A }}}}\"},\n #include \"specs.h\"\n   /* Mark end of table */\n-  {0, {0}}\n+  {0, 0}\n };\n \n /* Number of elements in default_compilers, not counting the terminator.  */\n \n static int n_default_compilers\n   = (sizeof default_compilers / sizeof (struct compiler)) - 1;\n \n-/* Here is the spec for running the linker, after compiling all files.  */\n-\n-/* -u* was put back because both BSD and SysV seem to support it.  */\n-/* %{static:} simply prevents an error message if the target machine\n-   doesn't handle -static.  */\n-/* We want %{T*} after %{L*} and %D so that it can be used to specify linker\n-   scripts which exist in user specified directories, or in standard\n-   directories.  */\n-#ifdef LINK_COMMAND_SPEC\n-/* Provide option to override link_command_spec from machine specific\n-   configuration files.  */\n-static const char *link_command_spec = \n-\tLINK_COMMAND_SPEC;\n-#else\n-#ifdef LINK_LIBGCC_SPECIAL\n-/* Don't generate -L options.  */\n-static const char *link_command_spec = \"\\\n-%{!fsyntax-only: \\\n- %{!c:%{!M:%{!MM:%{!E:%{!S:%(linker) %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n-\t\t\t%{r} %{s} %{t} %{u*} %{x} %{z} %{Z}\\\n-\t\t\t%{!A:%{!nostdlib:%{!nostartfiles:%S}}}\\\n-\t\t\t%{static:} %{L*} %o\\\n-\t\t\t%{!nostdlib:%{!nodefaultlibs:%G %L %G}}\\\n-\t\t\t%{!A:%{!nostdlib:%{!nostartfiles:%E}}}\\\n-\t\t\t%{T*}\\\n-\t\t\t\\n }}}}}}\";\n-#else\n-/* Use -L.  */\n-static const char *link_command_spec = \"\\\n-%{!fsyntax-only: \\\n- %{!c:%{!M:%{!MM:%{!E:%{!S:%(linker) %l %X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} \\\n-\t\t\t%{r} %{s} %{t} %{u*} %{x} %{z} %{Z}\\\n-\t\t\t%{!A:%{!nostdlib:%{!nostartfiles:%S}}}\\\n-\t\t\t%{static:} %{L*} %D %o\\\n-\t\t\t%{!nostdlib:%{!nodefaultlibs:%G %L %G}}\\\n-\t\t\t%{!A:%{!nostdlib:%{!nostartfiles:%E}}}\\\n-\t\t\t%{T*}\\\n-\t\t\t\\n }}}}}}\";\n-#endif\n-#endif\n-\n /* A vector of options to give to the linker.\n    These options are accumulated by %x,\n    and substituted into the linker command with %X.  */\n@@ -1137,8 +1062,12 @@ static struct spec_list static_specs[] =\n {\n   INIT_STATIC_SPEC (\"asm\",\t\t\t&asm_spec),\n   INIT_STATIC_SPEC (\"asm_final\",\t\t&asm_final_spec),\n+  INIT_STATIC_SPEC (\"asm_options\",\t\t&asm_options),\n   INIT_STATIC_SPEC (\"cpp\",\t\t\t&cpp_spec),\n+  INIT_STATIC_SPEC (\"cpp_options\",\t\t&cpp_options),\n+  INIT_STATIC_SPEC (\"trad_capable_cpp\",\t\t&trad_capable_cpp),\n   INIT_STATIC_SPEC (\"cc1\",\t\t\t&cc1_spec),\n+  INIT_STATIC_SPEC (\"cc1_options\",\t\t&cc1_options),\n   INIT_STATIC_SPEC (\"cc1plus\",\t\t\t&cc1plus_spec),\n   INIT_STATIC_SPEC (\"endfile\",\t\t\t&endfile_spec),\n   INIT_STATIC_SPEC (\"link\",\t\t\t&link_spec),\n@@ -1156,6 +1085,7 @@ static struct spec_list static_specs[] =\n   INIT_STATIC_SPEC (\"multilib_matches\",\t\t&multilib_matches),\n   INIT_STATIC_SPEC (\"multilib_exclusions\",\t&multilib_exclusions),\n   INIT_STATIC_SPEC (\"linker\",\t\t\t&linker_name_spec),\n+  INIT_STATIC_SPEC (\"link_libgcc\",\t\t&link_libgcc_spec),\n };\n \n #ifdef EXTRA_SPECS\t\t/* additional specs needed */\n@@ -1732,9 +1662,7 @@ read_specs (filename, main_p)\n \t\t\t (n_compilers + 2) * sizeof (struct compiler)));\n \n \t  compilers[n_compilers].suffix = suffix;\n-\t  memset (compilers[n_compilers].spec, 0,\n-\t\t  sizeof compilers[n_compilers].spec);\n-\t  compilers[n_compilers].spec[0] = spec;\n+\t  compilers[n_compilers].spec = spec;\n \t  n_compilers++;\n \t  memset (&compilers[n_compilers], 0, sizeof compilers[n_compilers]);\n \t}\n@@ -3716,6 +3644,7 @@ const char *input_filename;\n static int input_file_number;\n size_t input_filename_length;\n static int basename_length;\n+static int suffixed_basename_length;\n static const char *input_basename;\n static const char *input_suffix;\n \n@@ -3900,6 +3829,11 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t    arg_going = 1;\n \t    break;\n \n+\t  case 'B':\n+\t    obstack_grow (&obstack, input_basename, suffixed_basename_length);\n+\t    arg_going = 1;\n+\t    break;\n+\n \t  case 'd':\n \t    delete_this_arg = 2;\n \t    break;\n@@ -5118,6 +5052,7 @@ set_input (filename)\n   /* Find a suffix starting with the last period,\n      and set basename_length to exclude that suffix.  */\n   basename_length = strlen (input_basename);\n+  suffixed_basename_length = basename_length;\n   p = input_basename + basename_length;\n   while (p != input_basename && *p != '.') --p;\n   if (*p == '.' && p != input_basename)\n@@ -5150,8 +5085,7 @@ main (argc, argv)\n      int argc;\n      char **argv;\n {\n-  register size_t i;\n-  size_t j;\n+  size_t i;\n   int value;\n   int linker_was_run = 0;\n   char *explicit_link_files;\n@@ -5550,32 +5484,11 @@ main (argc, argv)\n       if (cp)\n \t{\n \t  /* Ok, we found an applicable compiler.  Run its spec.  */\n-\t  /* First say how much of input_filename to substitute for %b  */\n-\t  int len;\n \n-\t  if (cp->spec[0][0] == '#')\n+\t  if (cp->spec[0] == '#')\n \t    error (\"%s: %s compiler not installed on this system\",\n-\t\t   input_filename, &cp->spec[0][1]);\n-\n-\t  len = 0;\n-\t  for (j = 0; j < sizeof cp->spec / sizeof cp->spec[0]; j++)\n-\t    if (cp->spec[j])\n-\t      len += strlen (cp->spec[j]);\n-\n-\t  {\n-\t    char *p1 = (char *) xmalloc (len + 1);\n-\t    \n-\t    len = 0;\n-\t    for (j = 0; j < sizeof cp->spec / sizeof cp->spec[0]; j++)\n-\t      if (cp->spec[j])\n-\t\t{\n-\t\t  strcpy (p1 + len, cp->spec[j]);\n-\t\t  len += strlen (cp->spec[j]);\n-\t\t}\n-\t    \n-\t    value = do_spec (p1);\n-\t    free (p1);\n-\t  }\n+\t\t   input_filename, &cp->spec[1]);\n+\t  value = do_spec (cp->spec);\n \t  if (value < 0)\n \t    this_file_error = 1;\n \t}\n@@ -5726,30 +5639,17 @@ lookup_compiler (name, length, language)\n       }\n #endif\n \n-\n   if (cp >= compilers)\n     {\n-      if (cp->spec[0][0] == '@')\n-\t{\n-\t  struct compiler *new;\n-\n-\t  /* An alias entry maps a suffix to a language.\n-\t     Search for the language; pass 0 for NAME and LENGTH\n-\t     to avoid infinite recursion if language not found.\n-\t     Construct the new compiler spec.  */\n-\t  language = cp->spec[0] + 1;\n-\t  new = (struct compiler *) xmalloc (sizeof (struct compiler));\n-\t  new->suffix = cp->suffix;\n-\t  memcpy (new->spec,\n-\t\t  lookup_compiler (NULL_PTR, 0, language)->spec,\n-\t\t  sizeof new->spec);\n-\t  return new;\n-\t}\n-\n-      /* A non-alias entry: return it.  */\n-      return cp;\n+      if (cp->spec[0] != '@')\n+\t/* A non-alias entry: return it.  */\n+\treturn cp;\n+      \n+      /* An alias entry maps a suffix to a language.\n+\t Search for the language; pass 0 for NAME and LENGTH\n+\t to avoid infinite recursion if language not found.  */\n+      return lookup_compiler (NULL_PTR, 0, cp->spec + 1);\n     }\n-\n   return 0;\n }\n \f\n@@ -5881,17 +5781,13 @@ validate_all_switches ()\n   register char c;\n   struct spec_list *spec;\n \n-  for (comp = compilers; comp->spec[0]; comp++)\n+  for (comp = compilers; comp->spec; comp++)\n     {\n-      size_t i;\n-      for (i = 0; i < sizeof comp->spec / sizeof comp->spec[0] && comp->spec[i]; i++)\n-\t{\n-\t  p = comp->spec[i];\n-\t  while ((c = *p++))\n-\t    if (c == '%' && *p == '{')\n-\t      /* We have a switch spec.  */\n-\t      validate_switches (p + 1);\n-\t}\n+      p = comp->spec;\n+      while ((c = *p++))\n+\tif (c == '%' && *p == '{')\n+\t  /* We have a switch spec.  */\n+\t  validate_switches (p + 1);\n     }\n \n   /* Look through the linked list of specs read from the specs file.  */"}, {"sha": "0edfafbceffeef38ee8a375b746df691909158f7", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ea414c9749d55f53d308783f203952f1239596b7", "patch": "@@ -1,3 +1,7 @@\n+2000-07-13  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* lang-specs.h: Use the new named specs.  Remove unnecessary braces.\n+\n 2000-07-12  Mark Mitchell  <mark@codesourcery.com>\n \n \t* parse-scan.c: Remove."}, {"sha": "c03301852dcd1cc682201179f556054a510aedf9", "filename": "gcc/java/lang-specs.h", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fjava%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fjava%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-specs.h?ref=ea414c9749d55f53d308783f203952f1239596b7", "patch": "@@ -25,20 +25,12 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    Java.  */\n \n-  {\".java\",   {\"@java\"} },\n-  {\".class\",  {\"@java\"} },\n-  {\".zip\",    {\"@java\"} },\n-  {\".jar\",    {\"@java\"} },\n+  {\".java\",   \"@java\" },\n+  {\".class\",  \"@java\" },\n+  {\".zip\",    \"@java\" },\n+  {\".jar\",    \"@java\" },\n   {\"@java\",\n-   {\"%{!E:jc1 %i %1 %(jc1) %{!Q:-quiet} %{d*} %{m*} %{a}\\\n-\t\t    %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi}\\\n-\t\t    %{traditional} %{v:-version} %{pg:-p} %{p}\\\n-\t\t    %{f*} %{+e*} %{aux-info*} %{Qn:-fno-ident}\\\n-                    %{I*}\\\n-\t\t    %{MD} %{MMD} %{M} %{MM}\\\n-                    %{fjni:%{femit-class-file:%e-fjni and -femit-class-file are incompatible}}\\\n-\t\t    %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t    %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n-            %{!S:as %a %Y\\\n-\t\t    %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-\t\t    %{!pipe:%g.s} %A\\n }}\"}},\n+   \"%{fjni:%{femit-class-file:%e-fjni and -femit-class-file are incompatible}}\\\n+    %{!E:jc1 %i %(cc1_options) %{+e*} %{MD} %{MMD} %{M} %{MM}\\\n+             %{!S:-o %{|!pipe:%g.s} |\\n\\\n+    as %(asm_options) %{!pipe:%g.s} %A }}\"},"}, {"sha": "58de4596838d579dac5b61d593f2aead71bcec0a", "filename": "gcc/objc/lang-specs.h", "status": "modified", "additions": 15, "deletions": 71, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fobjc%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea414c9749d55f53d308783f203952f1239596b7/gcc%2Fobjc%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Flang-specs.h?ref=ea414c9749d55f53d308783f203952f1239596b7", "patch": "@@ -21,79 +21,23 @@ Boston, MA 02111-1307, USA.  */\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    objc.  */\n \n-  {\".m\", {\"@objective-c\"}},\n+  {\".m\", \"@objective-c\"},\n   {\"@objective-c\",\n #if USE_CPPLIB\n-   {\"%{E|M|MM:cpp -lang-objc %{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n-\t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n-\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-        -D__OBJC__ %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n-\t-D__GNUC_PATCHLEVEL__=%v3} %{ansi:-trigraphs -D__STRICT_ANSI__}\\\n-\t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n-        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n-\t%{ffast-math:-D__FAST_MATH__}\\\n-        %{traditional} %{ftraditional:-traditional}\\\n-        %{traditional-cpp:-traditional}\\\n-\t%{fleading-underscore} %{fno-leading-underscore}\\\n-\t%{fshow-column} %{fno-show-column}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n-        %i %{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}}\\n}\",\n-    \"%{!M:%{!MM:%{!E:cc1obj %i %1 \\\n-\t\t   %{nostdinc*} %{A*} %{I*} %{P} %I\\\n-                   %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-\t\t   -D__OBJC__ %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2\\\n-\t\t   -D__GNUC_PATCHLEVEL__=%v3}\\\n-\t\t   %{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n-\t\t   %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n-\t\t   %{ffast-math:-D__FAST_MATH__}\\\n-\t\t   %{!Q:-quiet} -dumpbase %b.m %{d*} %{m*} %{a*}\\\n-\t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n-\t\t   %{traditional} %{v:-version} %{pg:-p} %{p} %{f*} \\\n-    \t\t   -lang-objc %{gen-decls} \\\n-\t\t   %{aux-info*} %{Qn:-fno-ident}\\\n-\t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n-     %{!S:as %a %Y\\\n-\t%{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-        %{!pipe:%g.s} %A\\n }}}}\"}\n+     \"%{E|M|MM:cpp -lang-objc %{ansi:-std=c89} %(cpp_options)}\\\n+      %{!E:%{!M:%{!MM:cc1obj -lang-objc %(cpp_options) %(cc1_options)\\\n+\t\t\t     %{gen-decls} %{!S:-o %{|!pipe:%g.s} |\\n\\\n+      as %(asm_options) %{!pipe:%g.s} %A }}}}\"\n #else /* ! USE_CPPLIB */\n-   {\"%{traditional|ftraditional|traditional-cpp:trad}cpp -lang-objc \\\n-\t%{nostdinc*} %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n-\t%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n-\t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n-        %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 \\\n-        -D__GNUC_PATCHLEVEL__=%v3}\\\n-\t%{ansi:-trigraphs -D__STRICT_ANSI__}\\\n-\t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n-        %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n-\t%{ffast-math:-D__FAST_MATH__}\\\n-\t%{fleading-underscore} %{fno-leading-underscore}\\\n-\t%{fshow-column} %{fno-show-column}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n-        %i %{!M:%{!MM:%{!E:%{!pipe:%g.mi}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n-    \"%{!M:%{!MM:%{!E:cc1obj %{!pipe:%g.mi} %1 \\\n-\t\t   %{!Q:-quiet} -dumpbase %b.m %{d*} %{m*} %{a*}\\\n-\t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n-\t\t   %{traditional} %{v:-version} %{pg:-p} %{p} %{f*} \\\n-    \t\t   -lang-objc %{gen-decls} \\\n-\t\t   %{aux-info*} %{Qn:-fno-ident}\\\n-\t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\\\n-              %{!S:as %a %Y\\\n-\t\t      %{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-                      %{!pipe:%g.s} %A\\n }}}}\"}\n+     \"%(trad_capable_cpp) -lang-objc %{ansi:-std=c89} %(cpp_options)\\\n+\t\t\t  %{!M:%{!MM:%{!E:%{!pipe:%g.mi} |\\n\\\n+      cc1obj -lang-objc %{!pipe:%g.mi} %(cc1_options) %{gen-decls}\\\n+\t     %{!S:-o %{|!pipe:%g.s} |\\n\\\n+      as %(asm_options) %{!pipe:%g.s} %A }}}}\\n\"\n #endif /* ! USE_CPPLIB */\n-  },\n-  {\".mi\", {\"@objc-cpp-output\"}},\n+    },\n+  {\".mi\", \"@objc-cpp-output\"},\n   {\"@objc-cpp-output\",\n-   {\"%{!M:%{!MM:%{!E:cc1obj %i %1 \\\n-\t\t   %{!Q:-quiet} -dumpbase %b.m %{d*} %{m*} %{a*}\\\n-\t\t   %{g*} %{O*} %{W*} %{w} %{pedantic*} %{ansi} \\\n-\t\t   %{traditional} %{v:-version} %{pg:-p} %{p} %{f*} \\\n-    \t\t   -lang-objc %{gen-decls} \\\n-\t\t   %{aux-info*} %{Qn:-fno-ident}\\\n-\t\t   %{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\\\n-\t\t   %{S:%W{o*}%{!o*:-o %b.s}}%{!S:-o %{|!pipe:%g.s}} |\\n\",\n-    \"%{!S:as %a %Y\\\n-\t%{c:%W{o*}%{!o*:-o %w%b%O}}%{!c:-o %d%w%u%O}\\\n-        %{!pipe:%g.s} %A\\n }}}}\"}},\n+     \"%{!M:%{!MM:%{!E:cc1obj -lang-objc %i %(cc1_options) %{gen-decls}\\\n+\t\t\t     %{!S:-o %{|!pipe:%g.s} |\\n\\\n+      as %(asm_options) %{!pipe:%g.s} %A }}}}\"},"}]}