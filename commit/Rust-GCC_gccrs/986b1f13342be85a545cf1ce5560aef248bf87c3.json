{"sha": "986b1f13342be85a545cf1ce5560aef248bf87c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg2YjFmMTMzNDJiZTg1YTU0NWNmMWNlNTU2MGFlZjI0OGJmODdjMw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-03-02T17:44:18Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-03-02T17:44:18Z"}, "message": "c-incpath.c (remove_component_p, [...]): Move back to cppfiles.c.\n\n\t* c-incpath.c (remove_component_p, simplify_path): Move back to\n\tcppfiles.c.\n\t(remove_duplicates): Use cpp_simplify_path.\n\t* c-incpath.h (simplify_path): Remove.\n\t* c-lex.c: Don't include c-incpath.h.\n\t(init_c_lex): Remove simplify_path.\n\t* cppfiles.c (remove_component_p, cpp_simplify_path): Restore.\n\t(find_or_create_entry, validate_pch): Revert.\n\nFrom-SVN: r63669", "tree": {"sha": "59efbdcac9849427f9743e4c35cc2278aecb7295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59efbdcac9849427f9743e4c35cc2278aecb7295"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/986b1f13342be85a545cf1ce5560aef248bf87c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986b1f13342be85a545cf1ce5560aef248bf87c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/986b1f13342be85a545cf1ce5560aef248bf87c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986b1f13342be85a545cf1ce5560aef248bf87c3/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a339cb5bd9cc8a2fc232055dd5f8a1f9f45f093c"}], "stats": {"total": 341, "additions": 171, "deletions": 170}, "files": [{"sha": "de9440f04e92e595c1b847786ace5bf36f518cb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986b1f13342be85a545cf1ce5560aef248bf87c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986b1f13342be85a545cf1ce5560aef248bf87c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=986b1f13342be85a545cf1ce5560aef248bf87c3", "patch": "@@ -1,3 +1,14 @@\n+2003-03-02  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-incpath.c (remove_component_p, simplify_path): Move back to\n+\tcppfiles.c.\n+\t(remove_duplicates): Use cpp_simplify_path.\n+\t* c-incpath.h (simplify_path): Remove.\n+\t* c-lex.c: Don't include c-incpath.h.\n+\t(init_c_lex): Remove simplify_path.\n+\t* cppfiles.c (remove_component_p, cpp_simplify_path): Restore.\n+\t(find_or_create_entry, validate_pch): Revert.\n+\n 2003-03-02  Ashif Harji  <asharji@uwaterloo.ca>\n \n \t* gcc.c (default_compilers): Add -no-integrated-cpp flag to invoke"}, {"sha": "b1c8de5cb3b09d72f74d0e41b83c18e4bbbf977a", "filename": "gcc/c-incpath.c", "status": "modified", "additions": 1, "deletions": 155, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986b1f13342be85a545cf1ce5560aef248bf87c3/gcc%2Fc-incpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986b1f13342be85a545cf1ce5560aef248bf87c3/gcc%2Fc-incpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-incpath.c?ref=986b1f13342be85a545cf1ce5560aef248bf87c3", "patch": "@@ -47,7 +47,6 @@ static void add_env_var_paths PARAMS ((const char *, int));\n static void add_standard_paths PARAMS ((const char *, const char *, int));\n static void free_path PARAMS ((struct cpp_path *, int));\n static void merge_include_chains PARAMS ((cpp_reader *, int));\n-static int remove_component_p PARAMS ((const char *));\n static struct cpp_path *\n   remove_duplicates PARAMS ((cpp_reader *, struct cpp_path *,\n \t\t\t     struct cpp_path *, struct cpp_path *, int));\n@@ -177,7 +176,7 @@ remove_duplicates (pfile, head, system, join, verbose)\n       int reason = REASON_QUIET;\n \n       cur = *pcur;\n-      simplify_path (cur->name);\n+      cpp_simplify_path (cur->name);\n \n       if (stat (cur->name, &st))\n \t{\n@@ -355,156 +354,3 @@ register_include_chains (pfile, sysroot, iprefix,\n   cpp_set_include_chains (pfile, heads[QUOTE], heads[BRACKET],\n \t\t\t  quote_ignores_source_dir);\n }\n-\n-/* Returns true if it is safe to remove the final component of path,\n-   when it is followed by a \"..\" component.  We use lstat to avoid\n-   symlinks if we have it.  If not, we can still catch errors with\n-   stat ().  */\n-static int\n-remove_component_p (path)\n-     const char *path;\n-{\n-  struct stat s;\n-  int result;\n-\n-#ifdef HAVE_LSTAT\n-  result = lstat (path, &s);\n-#else\n-  result = stat (path, &s);\n-#endif\n-\n-  /* There's no guarantee that errno will be unchanged, even on\n-     success.  Cygwin's lstat(), for example, will often set errno to\n-     ENOSYS.  In case of success, reset errno to zero.  */\n-  if (result == 0)\n-    errno = 0;\n-\n-  return result == 0 && S_ISDIR (s.st_mode);\n-}\n-\n-/* Simplify a path name in place, deleting redundant components.  This\n-   reduces OS overhead and guarantees that equivalent paths compare\n-   the same (modulo symlinks).\n-\n-   Transforms made:\n-   foo/bar/../quux\tfoo/quux\n-   foo/./bar\t\tfoo/bar\n-   foo//bar\t\tfoo/bar\n-   /../quux\t\t/quux\n-   //quux\t\t//quux  (POSIX allows leading // as a namespace escape)\n-\n-   Guarantees no trailing slashes.  All transforms reduce the length\n-   of the string.  Returns PATH.  errno is 0 if no error occurred;\n-   nonzero if an error occurred when using stat () or lstat ().  */\n-void\n-simplify_path (path)\n-     char *path ATTRIBUTE_UNUSED;\n-{\n-#ifndef VMS\n-  char *from, *to;\n-  char *base, *orig_base;\n-  int absolute = 0;\n-\n-  errno = 0;\n-  /* Don't overflow the empty path by putting a '.' in it below.  */\n-  if (*path == '\\0')\n-    return;\n-\n-#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n-  /* Convert all backslashes to slashes.  */\n-  for (from = path; *from; from++)\n-    if (*from == '\\\\') *from = '/';\n-\n-  /* Skip over leading drive letter if present.  */\n-  if (ISALPHA (path[0]) && path[1] == ':')\n-    from = to = &path[2];\n-  else\n-    from = to = path;\n-#else\n-  from = to = path;\n-#endif\n-\n-  /* Remove redundant leading /s.  */\n-  if (*from == '/')\n-    {\n-      absolute = 1;\n-      to++;\n-      from++;\n-      if (*from == '/')\n-\t{\n-\t  if (*++from == '/')\n-\t    /* 3 or more initial /s are equivalent to 1 /.  */\n-\t    while (*++from == '/');\n-\t  else\n-\t    /* On some hosts // differs from /; Posix allows this.  */\n-\t    to++;\n-\t}\n-    }\n-\n-  base = orig_base = to;\n-  for (;;)\n-    {\n-      int move_base = 0;\n-\n-      while (*from == '/')\n-\tfrom++;\n-\n-      if (*from == '\\0')\n-\tbreak;\n-\n-      if (*from == '.')\n-\t{\n-\t  if (from[1] == '\\0')\n-\t    break;\n-\t  if (from[1] == '/')\n-\t    {\n-\t      from += 2;\n-\t      continue;\n-\t    }\n-\t  else if (from[1] == '.' && (from[2] == '/' || from[2] == '\\0'))\n-\t    {\n-\t      /* Don't simplify if there was no previous component.  */\n-\t      if (absolute && orig_base == to)\n-\t\t{\n-\t\t  from += 2;\n-\t\t  continue;\n-\t\t}\n-\t      /* Don't simplify if the previous component was \"../\",\n-\t\t or if an error has already occurred with (l)stat.  */\n-\t      if (base != to && errno == 0)\n-\t\t{\n-\t\t  /* We don't back up if it's a symlink.  */\n-\t\t  *to = '\\0';\n-\t\t  if (remove_component_p (path))\n-\t\t    {\n-\t\t      while (to > base && *to != '/')\n-\t\t\tto--;\n-\t\t      from += 2;\n-\t\t      continue;\n-\t\t    }\n-\t\t}\n-\t      move_base = 1;\n-\t    }\n-\t}\n-\n-      /* Add the component separator.  */\n-      if (to > orig_base)\n-\t*to++ = '/';\n-\n-      /* Copy this component until the trailing null or '/'.  */\n-      while (*from != '\\0' && *from != '/')\n-\t*to++ = *from++;\n-\n-      if (move_base)\n-\tbase = to;\n-    }\n-\n-  /* Change the empty string to \".\" so that it is not treated as stdin.\n-     Null terminate.  */\n-  if (to == path)\n-    *to++ = '.';\n-  *to = '\\0';\n-#else  /* VMS */\n-  errno = 0;\n-#endif /* !VMS  */\n-}"}, {"sha": "e5b02182a822ab3bc8be9998f2eff87220d736ef", "filename": "gcc/c-incpath.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986b1f13342be85a545cf1ce5560aef248bf87c3/gcc%2Fc-incpath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986b1f13342be85a545cf1ce5560aef248bf87c3/gcc%2Fc-incpath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-incpath.h?ref=986b1f13342be85a545cf1ce5560aef248bf87c3", "patch": "@@ -19,6 +19,5 @@ extern void split_quote_chain\tPARAMS ((void));\n extern void add_path\t\tPARAMS ((char *, int, int));\n extern void register_include_chains PARAMS ((cpp_reader *, const char *,\n \t\t\t\t\t     const char *, int, int, int));\n-extern void simplify_path\tPARAMS ((char *));\n \n enum { QUOTE = 0, BRACKET, SYSTEM, AFTER };"}, {"sha": "d063cfe9ecccd398b309dc5e1044a57055696464", "filename": "gcc/c-lex.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986b1f13342be85a545cf1ce5560aef248bf87c3/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986b1f13342be85a545cf1ce5560aef248bf87c3/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=986b1f13342be85a545cf1ce5560aef248bf87c3", "patch": "@@ -41,7 +41,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm_p.h\"\n #include \"splay-tree.h\"\n #include \"debug.h\"\n-#include \"c-incpath.h\"\n \n #ifdef MULTIBYTE_CHARS\n #include \"mbchar.h\"\n@@ -125,7 +124,6 @@ init_c_lex (filename)\n   cb->ident = cb_ident;\n   cb->file_change = cb_file_change;\n   cb->def_pragma = cb_def_pragma;\n-  cb->simplify_path = simplify_path;\n   cb->valid_pch = c_common_valid_pch;\n   cb->read_pch = c_common_read_pch;\n "}, {"sha": "dda7ac2e24ebb5b812a12fe7e996a4624e757ce0", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 158, "deletions": 11, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986b1f13342be85a545cf1ce5560aef248bf87c3/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986b1f13342be85a545cf1ce5560aef248bf87c3/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=986b1f13342be85a545cf1ce5560aef248bf87c3", "patch": "@@ -153,14 +153,15 @@ static int report_missing_guard\t\tPARAMS ((splay_tree_node, void *));\n static splay_tree_node find_or_create_entry PARAMS ((cpp_reader *,\n \t\t\t\t\t\t     const char *));\n static void handle_missing_header PARAMS ((cpp_reader *, const char *, int));\n+static int remove_component_p PARAMS ((const char *));\n \n /* Set up the splay tree we use to store information about all the\n    file names seen in this compilation.  We also have entries for each\n    file we tried to open but failed; this saves system calls since we\n    don't try to open it again in future.\n \n    The key of each node is the file name, after processing by\n-   simplify_path.  The path name may or may not be absolute.\n+   cpp_simplify_path.  The path name may or may not be absolute.\n    The path string has been malloced, as is automatically freed by\n    registering free () as the splay tree key deletion function.\n \n@@ -216,15 +217,8 @@ find_or_create_entry (pfile, fname)\n   splay_tree_node node;\n   struct include_file *file;\n   char *name = xstrdup (fname);\n-  int saved_errno = 0;\n-\n-  if (pfile->cb.simplify_path)\n-    {\n-      errno = 0;\n-      (pfile->cb.simplify_path) (name);\n-      saved_errno = errno;\n-    }\n \n+  cpp_simplify_path (name);\n   node = splay_tree_lookup (pfile->all_include_files, (splay_tree_key) name);\n   if (node)\n     free (name);\n@@ -233,7 +227,7 @@ find_or_create_entry (pfile, fname)\n       file = xcnew (struct include_file);\n       file->name = name;\n       file->header_name = name;\n-      file->err_no = saved_errno;\n+      file->err_no = errno;\n       node = splay_tree_insert (pfile->all_include_files,\n \t\t\t\t(splay_tree_key) file->name,\n \t\t\t\t(splay_tree_value) file);\n@@ -343,7 +337,7 @@ validate_pch (pfile, filename, pchname)\n   if (INCLUDE_PCH_P (file))\n     {\n       char *f = xstrdup (filename);\n-      (pfile->cb.simplify_path) (f);\n+      cpp_simplify_path (f);\n       file->header_name = f;\n       return file;\n     }\n@@ -1171,3 +1165,156 @@ cpp_set_include_chains (pfile, quote, bracket, quote_ignores_source_dir)\n \tpfile->bracket_include = bracket;\n     }\n }\n+\n+/* Returns true if it is safe to remove the final component of path,\n+   when it is followed by a \"..\" component.  We use lstat to avoid\n+   symlinks if we have it.  If not, we can still catch errors with\n+   stat ().  */\n+static int\n+remove_component_p (path)\n+     const char *path;\n+{\n+  struct stat s;\n+  int result;\n+\n+#ifdef HAVE_LSTAT\n+  result = lstat (path, &s);\n+#else\n+  result = stat (path, &s);\n+#endif\n+\n+  /* There's no guarantee that errno will be unchanged, even on\n+     success.  Cygwin's lstat(), for example, will often set errno to\n+     ENOSYS.  In case of success, reset errno to zero.  */\n+  if (result == 0)\n+    errno = 0;\n+\n+  return result == 0 && S_ISDIR (s.st_mode);\n+}\n+\n+/* Simplify a path name in place, deleting redundant components.  This\n+   reduces OS overhead and guarantees that equivalent paths compare\n+   the same (modulo symlinks).\n+\n+   Transforms made:\n+   foo/bar/../quux\tfoo/quux\n+   foo/./bar\t\tfoo/bar\n+   foo//bar\t\tfoo/bar\n+   /../quux\t\t/quux\n+   //quux\t\t//quux  (POSIX allows leading // as a namespace escape)\n+\n+   Guarantees no trailing slashes.  All transforms reduce the length\n+   of the string.  Returns PATH.  errno is 0 if no error occurred;\n+   nonzero if an error occurred when using stat () or lstat ().  */\n+void\n+cpp_simplify_path (path)\n+     char *path ATTRIBUTE_UNUSED;\n+{\n+#ifndef VMS\n+  char *from, *to;\n+  char *base, *orig_base;\n+  int absolute = 0;\n+\n+  errno = 0;\n+  /* Don't overflow the empty path by putting a '.' in it below.  */\n+  if (*path == '\\0')\n+    return;\n+\n+#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n+  /* Convert all backslashes to slashes.  */\n+  for (from = path; *from; from++)\n+    if (*from == '\\\\') *from = '/';\n+\n+  /* Skip over leading drive letter if present.  */\n+  if (ISALPHA (path[0]) && path[1] == ':')\n+    from = to = &path[2];\n+  else\n+    from = to = path;\n+#else\n+  from = to = path;\n+#endif\n+\n+  /* Remove redundant leading /s.  */\n+  if (*from == '/')\n+    {\n+      absolute = 1;\n+      to++;\n+      from++;\n+      if (*from == '/')\n+\t{\n+\t  if (*++from == '/')\n+\t    /* 3 or more initial /s are equivalent to 1 /.  */\n+\t    while (*++from == '/');\n+\t  else\n+\t    /* On some hosts // differs from /; Posix allows this.  */\n+\t    to++;\n+\t}\n+    }\n+\n+  base = orig_base = to;\n+  for (;;)\n+    {\n+      int move_base = 0;\n+\n+      while (*from == '/')\n+\tfrom++;\n+\n+      if (*from == '\\0')\n+\tbreak;\n+\n+      if (*from == '.')\n+\t{\n+\t  if (from[1] == '\\0')\n+\t    break;\n+\t  if (from[1] == '/')\n+\t    {\n+\t      from += 2;\n+\t      continue;\n+\t    }\n+\t  else if (from[1] == '.' && (from[2] == '/' || from[2] == '\\0'))\n+\t    {\n+\t      /* Don't simplify if there was no previous component.  */\n+\t      if (absolute && orig_base == to)\n+\t\t{\n+\t\t  from += 2;\n+\t\t  continue;\n+\t\t}\n+\t      /* Don't simplify if the previous component was \"../\",\n+\t\t or if an error has already occurred with (l)stat.  */\n+\t      if (base != to && errno == 0)\n+\t\t{\n+\t\t  /* We don't back up if it's a symlink.  */\n+\t\t  *to = '\\0';\n+\t\t  if (remove_component_p (path))\n+\t\t    {\n+\t\t      while (to > base && *to != '/')\n+\t\t\tto--;\n+\t\t      from += 2;\n+\t\t      continue;\n+\t\t    }\n+\t\t}\n+\t      move_base = 1;\n+\t    }\n+\t}\n+\n+      /* Add the component separator.  */\n+      if (to > orig_base)\n+\t*to++ = '/';\n+\n+      /* Copy this component until the trailing null or '/'.  */\n+      while (*from != '\\0' && *from != '/')\n+\t*to++ = *from++;\n+\n+      if (move_base)\n+\tbase = to;\n+    }\n+\n+  /* Change the empty string to \".\" so that it is not treated as stdin.\n+     Null terminate.  */\n+  if (to == path)\n+    *to++ = '.';\n+  *to = '\\0';\n+#else  /* VMS */\n+  errno = 0;\n+#endif /* !VMS  */\n+}"}, {"sha": "2ed5ed03d7087a6fd23f0ff0102e56e76bda1a08", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986b1f13342be85a545cf1ce5560aef248bf87c3/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986b1f13342be85a545cf1ce5560aef248bf87c3/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=986b1f13342be85a545cf1ce5560aef248bf87c3", "patch": "@@ -402,7 +402,6 @@ struct cpp_callbacks\n   void (*undef) PARAMS ((cpp_reader *, unsigned int, cpp_hashnode *));\n   void (*ident) PARAMS ((cpp_reader *, unsigned int, const cpp_string *));\n   void (*def_pragma) PARAMS ((cpp_reader *, unsigned int));\n-  void (*simplify_path) PARAMS ((char *));\n   /* Called when the client has a chance to properly register\n      built-ins with cpp_define() and cpp_assert().  */\n   void (*register_builtins) PARAMS ((cpp_reader *));\n@@ -741,6 +740,7 @@ extern unsigned char *cpp_quote_string\tPARAMS ((unsigned char *,\n /* In cppfiles.c */\n extern int cpp_included\tPARAMS ((cpp_reader *, const char *));\n extern void cpp_make_system_header PARAMS ((cpp_reader *, int, int));\n+extern void cpp_simplify_path PARAMS ((char *));\n \n /* In cpppch.c */\n struct save_macro_data;"}]}