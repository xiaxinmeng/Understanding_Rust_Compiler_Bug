{"sha": "3489cc3363c657e70b5c4dd25abf6f0de6d83c72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ4OWNjMzM2M2M2NTdlNzBiNWM0ZGQyNWFiZjZmMGRlNmQ4M2M3Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@linux.vnet.ibm.com", "date": "2014-02-07T14:49:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-02-07T14:49:12Z"}, "message": "var-tracking.c (vt_stack_adjustments): Don't require stack_adjusts to match for the exit block.\n\ngcc/\n\t* var-tracking.c (vt_stack_adjustments): Don't require stack_adjusts\n\tto match for the exit block.\n\nFrom-SVN: r207602", "tree": {"sha": "ed6c1bca6a64f2b131689c9f07556df93641def9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed6c1bca6a64f2b131689c9f07556df93641def9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3489cc3363c657e70b5c4dd25abf6f0de6d83c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3489cc3363c657e70b5c4dd25abf6f0de6d83c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3489cc3363c657e70b5c4dd25abf6f0de6d83c72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3489cc3363c657e70b5c4dd25abf6f0de6d83c72/comments", "author": null, "committer": null, "parents": [{"sha": "75cc21e2b7153b7561a7636fd668ba66f10b72eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75cc21e2b7153b7561a7636fd668ba66f10b72eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75cc21e2b7153b7561a7636fd668ba66f10b72eb"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "f6e3143b32f17dfc39c3a38b40d9559aa29b30fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3489cc3363c657e70b5c4dd25abf6f0de6d83c72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3489cc3363c657e70b5c4dd25abf6f0de6d83c72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3489cc3363c657e70b5c4dd25abf6f0de6d83c72", "patch": "@@ -1,3 +1,8 @@\n+2014-02-07  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n+\n+\t* var-tracking.c (vt_stack_adjustments): Don't require stack_adjusts\n+\tto match for the exit block.\n+\n 2014-02-07  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.md (\"atomic_load<mode>\", \"atomic_store<mode>\")"}, {"sha": "c5ce1dd17b46912bba9461d325ea2425baf3b489", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3489cc3363c657e70b5c4dd25abf6f0de6d83c72/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3489cc3363c657e70b5c4dd25abf6f0de6d83c72/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=3489cc3363c657e70b5c4dd25abf6f0de6d83c72", "patch": "@@ -886,8 +886,25 @@ vt_stack_adjustments (void)\n \t}\n       else\n \t{\n-\t  /* Check whether the adjustments on the edges are the same.  */\n-\t  if (VTI (dest)->in.stack_adjust != VTI (src)->out.stack_adjust)\n+\t  /* We can end up with different stack adjustments for the exit block\n+\t     of a shrink-wrapped function if stack_adjust_offset_pre_post\n+\t     doesn't understand the rtx pattern used to restore the stack\n+\t     pointer in the epilogue.  For example, on s390(x), the stack\n+\t     pointer is often restored via a load-multiple instruction\n+\t     and so no stack_adjust offset is recorded for it.  This means\n+\t     that the stack offset at the end of the epilogue block is the\n+\t     the same as the offset before the epilogue, whereas other paths\n+\t     to the exit block will have the correct stack_adjust.\n+\n+\t     It is safe to ignore these differences because (a) we never\n+\t     use the stack_adjust for the exit block in this pass and\n+\t     (b) dwarf2cfi checks whether the CFA notes in a shrink-wrapped\n+\t     function are correct.\n+\n+\t     We must check whether the adjustments on other edges are\n+\t     the same though.  */\n+\t  if (dest != EXIT_BLOCK_PTR_FOR_FN (cfun)\n+\t      && VTI (dest)->in.stack_adjust != VTI (src)->out.stack_adjust)\n \t    {\n \t      free (stack);\n \t      return false;"}]}