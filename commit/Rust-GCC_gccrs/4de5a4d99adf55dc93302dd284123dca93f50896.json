{"sha": "4de5a4d99adf55dc93302dd284123dca93f50896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRlNWE0ZDk5YWRmNTVkYzkzMzAyZGQyODQxMjNkY2E5M2Y1MDg5Ng==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-11-20T18:25:41Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-11-20T18:25:41Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (core_java_source_files): Added new files.\n\t* java/lang/reflect/ReflectPermission.java: New class.\n\t* java/io/FileFilter.java: From Classpath\n\t* java/io/FilePermission.java: From Classpath.\n\nFrom-SVN: r37586", "tree": {"sha": "3de2061cb23d2cc8d2abaa72c3e7821c743cf902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3de2061cb23d2cc8d2abaa72c3e7821c743cf902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4de5a4d99adf55dc93302dd284123dca93f50896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de5a4d99adf55dc93302dd284123dca93f50896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de5a4d99adf55dc93302dd284123dca93f50896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de5a4d99adf55dc93302dd284123dca93f50896/comments", "author": null, "committer": null, "parents": [{"sha": "447306fa90a0acc3c8255daae74427e01374d14f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/447306fa90a0acc3c8255daae74427e01374d14f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/447306fa90a0acc3c8255daae74427e01374d14f"}], "stats": {"total": 373, "additions": 370, "deletions": 3}, "files": [{"sha": "97d8c32058c05bd808789d19e45f8661029bbb57", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de5a4d99adf55dc93302dd284123dca93f50896/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de5a4d99adf55dc93302dd284123dca93f50896/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4de5a4d99adf55dc93302dd284123dca93f50896", "patch": "@@ -1,3 +1,11 @@\n+2000-11-18  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (core_java_source_files): Added new files.\n+\t* java/lang/reflect/ReflectPermission.java: New class.\n+\t* java/io/FileFilter.java: From Classpath\n+\t* java/io/FilePermission.java: From Classpath.\n+\n 2000-11-17  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/lang/reflect/AccessibleObject.java (isAccessible,"}, {"sha": "5f2f446f9a91c6be539880c1e53c1f4afc793fec", "filename": "libjava/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de5a4d99adf55dc93302dd284123dca93f50896/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de5a4d99adf55dc93302dd284123dca93f50896/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=4de5a4d99adf55dc93302dd284123dca93f50896", "patch": "@@ -841,6 +841,7 @@ java/lang/reflect/InvocationTargetException.java \\\n java/lang/reflect/Member.java \\\n java/lang/reflect/Method.java \\\n java/lang/reflect/Modifier.java\t\\\n+java/lang/reflect/ReflectPermission.java \\\n java/io/BlockDataException.java\t\\\n java/io/BufferedInputStream.java \\\n java/io/BufferedOutputStream.java \\\n@@ -859,9 +860,11 @@ java/io/EOFException.java \\\n java/io/Externalizable.java \\\n java/io/File.java \\\n java/io/FileDescriptor.java \\\n+java/io/FileFilter.java \\\n java/io/FileInputStream.java \\\n java/io/FileNotFoundException.java \\\n java/io/FileOutputStream.java \\\n+java/io/FilePermission.java \\\n java/io/FileReader.java\t\\\n java/io/FileWriter.java\t\\\n java/io/FilenameFilter.java \\"}, {"sha": "2cfb0a5b6857b586487a518a743bebbc62ae65ad", "filename": "libjava/Makefile.in", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de5a4d99adf55dc93302dd284123dca93f50896/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de5a4d99adf55dc93302dd284123dca93f50896/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=4de5a4d99adf55dc93302dd284123dca93f50896", "patch": "@@ -607,6 +607,7 @@ java/lang/reflect/InvocationTargetException.java \\\n java/lang/reflect/Member.java \\\n java/lang/reflect/Method.java \\\n java/lang/reflect/Modifier.java\t\\\n+java/lang/reflect/ReflectPermission.java \\\n java/io/BlockDataException.java\t\\\n java/io/BufferedInputStream.java \\\n java/io/BufferedOutputStream.java \\\n@@ -625,9 +626,11 @@ java/io/EOFException.java \\\n java/io/Externalizable.java \\\n java/io/File.java \\\n java/io/FileDescriptor.java \\\n+java/io/FileFilter.java \\\n java/io/FileInputStream.java \\\n java/io/FileNotFoundException.java \\\n java/io/FileOutputStream.java \\\n+java/io/FilePermission.java \\\n java/io/FileReader.java\t\\\n java/io/FileWriter.java\t\\\n java/io/FilenameFilter.java \\\n@@ -1433,8 +1436,9 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/io/DataOutput.P .deps/java/io/DataOutputStream.P \\\n .deps/java/io/EOFException.P .deps/java/io/Externalizable.P \\\n .deps/java/io/File.P .deps/java/io/FileDescriptor.P \\\n-.deps/java/io/FileInputStream.P .deps/java/io/FileNotFoundException.P \\\n-.deps/java/io/FileOutputStream.P .deps/java/io/FileReader.P \\\n+.deps/java/io/FileFilter.P .deps/java/io/FileInputStream.P \\\n+.deps/java/io/FileNotFoundException.P .deps/java/io/FileOutputStream.P \\\n+.deps/java/io/FilePermission.P .deps/java/io/FileReader.P \\\n .deps/java/io/FileWriter.P .deps/java/io/FilenameFilter.P \\\n .deps/java/io/FilterInputStream.P .deps/java/io/FilterOutputStream.P \\\n .deps/java/io/FilterReader.P .deps/java/io/FilterWriter.P \\\n@@ -1536,7 +1540,9 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/lang/reflect/Field.P \\\n .deps/java/lang/reflect/InvocationTargetException.P \\\n .deps/java/lang/reflect/Member.P .deps/java/lang/reflect/Method.P \\\n-.deps/java/lang/reflect/Modifier.P .deps/java/lang/reflect/natArray.P \\\n+.deps/java/lang/reflect/Modifier.P \\\n+.deps/java/lang/reflect/ReflectPermission.P \\\n+.deps/java/lang/reflect/natArray.P \\\n .deps/java/lang/reflect/natConstructor.P \\\n .deps/java/lang/reflect/natField.P .deps/java/lang/reflect/natMethod.P \\\n .deps/java/lang/s_atan.P .deps/java/lang/s_ceil.P \\"}, {"sha": "2f3f3f78347ed719aa7e7dd2bc551fe35b49d9a0", "filename": "libjava/java/io/FileFilter.java", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de5a4d99adf55dc93302dd284123dca93f50896/libjava%2Fjava%2Fio%2FFileFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de5a4d99adf55dc93302dd284123dca93f50896/libjava%2Fjava%2Fio%2FFileFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileFilter.java?ref=4de5a4d99adf55dc93302dd284123dca93f50896", "patch": "@@ -0,0 +1,57 @@\n+/* FileFilter.java -- Filter a list of pathnames\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.io;\n+\n+/**\n+  * This interface has one method which is used for filtering pathnames\n+  * returned in a pathname listing.  It is currently used by the \n+  * <code>File.listFiles()</code> method.\n+  * <p>\n+  * The method in this interface determines if a particular pathname should\n+  * or should not be included in the pathname listing.\n+  *\n+  * @version 0.0\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface FileFilter\n+{\n+\n+/**\n+  * This method determines whether or not a given pathname should be included\n+  * in a pathname listing.\n+  *\n+  * @param pathname The pathname to test\n+  *\n+  * @return <code>true</code> if the path should be included in the list, <code>false</code> otherwise.\n+  */\n+public abstract boolean\n+accept(File pathname);\n+\n+} // interface FileFilter\n+"}, {"sha": "21bb55690291eb6d6bc04c3fa2a2545ce5261644", "filename": "libjava/java/io/FilePermission.java", "status": "added", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de5a4d99adf55dc93302dd284123dca93f50896/libjava%2Fjava%2Fio%2FFilePermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de5a4d99adf55dc93302dd284123dca93f50896/libjava%2Fjava%2Fio%2FFilePermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilePermission.java?ref=4de5a4d99adf55dc93302dd284123dca93f50896", "patch": "@@ -0,0 +1,243 @@\n+/* java.lang.FilePermission\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.io;\n+\n+import java.security.*;\n+\n+\n+public class FilePermission extends Permission implements Serializable {\n+  private static final String CURRENT_DIRECTORY = System.getProperty(\"user.dir\");\n+  private boolean usingPerms = false;\n+  private boolean readPerm = false;\n+  private boolean writePerm = false;\n+  private boolean executePerm = false;\n+  private boolean deletePerm = false;\n+  private String actionsString;\n+  \n+  private void cachePerms() {\n+    // While race conditions could occur, they don't matter at all.\n+    \n+    String action;\n+    int i = actionsString.indexOf(',');\n+    int startI = 0;\n+    while(i != -1) {\n+      action = actionsString.substring(startI,i);\n+      if(action.equals(\"read\"))\n+\treadPerm = true;\n+      else if(action.equals(\"write\"))\n+\twritePerm = true;\n+      else if(action.equals(\"execute\"))\n+\texecutePerm = true;\n+      else if(action.equals(\"delete\"))\n+\tdeletePerm = true;\n+      \n+      startI = i+1;\n+      i = actionsString.indexOf(',',startI);\n+    }\n+    \n+    action = actionsString.substring(startI);\n+    if(action.equals(\"read\"))\n+      readPerm = true;\n+    else if(action.equals(\"write\"))\n+      writePerm = true;\n+    else if(action.equals(\"execute\"))\n+      executePerm = true;\n+    else if(action.equals(\"delete\"))\n+      deletePerm = true;\n+  }\n+  \n+  /** Create a new FilePermission.\n+   ** @param pathExpression an expression specifying the paths this\n+   **        permission represents.\n+   ** @param actionsString a comma-separated list of the actions this\n+   **        permission represents.\n+   ** @XXX what to do when the file string is malformed?\n+   **/\n+  public FilePermission(String pathExpression, String actionsString) \n+    {\n+      super(pathExpression);\n+      this.actionsString = actionsString;\n+    }\n+  \n+  /** Get the actions this FilePermission supports.\n+   ** @return the String representing the actions this FilePermission supports.\n+   **/\n+  public String getActions() {\n+    return actionsString;\n+  }\n+  \n+  /** Get the hash code for this Object.<P>\n+   ** FilePermission's hash code is calculated as the exclusive or of the target\n+   ** String's hash code and the action String's hash code.\n+   ** @specnote Sun did not specify how to calculate the hash code; I made this up.\n+   ** @return the hash code for this Object.\n+   **/\n+  public int hashCode() {\n+    return getName().hashCode() ^ actionsString.hashCode();\n+  }\n+  \n+  /** Check two FilePermissions for semantic equality.\n+   ** Two FilePermissions are exactly equivalent if they have identical path\n+   ** expressions and have exactly the same access permissions.\n+   ** @param o the Object to compare to.\n+   ** @return whether the Objects are semantically equivalent.\n+   **/\n+  public boolean equals(Object o) {\n+    if(!(o instanceof FilePermission))\n+      return false;\n+    FilePermission p = (FilePermission)o;\n+    if(!usingPerms)\n+      cachePerms();\n+    if(!p.usingPerms)\n+      p.cachePerms();\n+    \n+    String f1 = getName();\n+    String f2 = p.getName();\n+\n+    /* Compare names, taking into account if they refer to a\n+     * directory and one has a separator and the other does not.\n+     */\n+    if(f1.charAt(f1.length()) == File.separatorChar) {\n+      if(f2.charAt(f2.length()) == File.separatorChar) {\n+\tif(!f2.equals(f1))\n+\t  return false;\n+      } else {\n+\tif(!f2.equals(f1.substring(0,f1.length()-1)))\n+\t  return false;\n+      }\n+    } else {\n+      if(f2.charAt(f2.length()) == File.separatorChar) {\n+\tif(!f1.equals(f2.substring(0,f2.length()-1)))\n+\t  return false;\n+      } else {\n+\tif(!f1.equals(f2))\n+\t  return false;\n+      }\n+    }\n+    return readPerm == p.readPerm && writePerm == p.writePerm && executePerm == p.executePerm && deletePerm == p.deletePerm;\n+  }\n+  \n+  /** Check to see if this permission implies another.\n+   ** Permission A implies permission B if these things are all true:\n+   ** <OL>\n+   ** <LI>A and B are both FilePermissions.</LI>\n+   ** <LI>All possible files in B are included in A (possibly more are in A).</LI>\n+   ** <LI>All actions B supports, A also supports.</LI>\n+   ** </OL>\n+   ** @param p the Permission to compare against.\n+   ** @return whether this Permission implies p\n+   **/\n+  public boolean implies(Permission p) {\n+    FilePermission fp;\n+    if(!(p instanceof FilePermission))\n+      return false;\n+    fp = (FilePermission)p;\n+    \n+    String f1 = getName();\n+    String f2 = fp.getName();\n+    if(f1.charAt(0) != File.separatorChar) {\n+      f1 = CURRENT_DIRECTORY + f1;\n+    }\n+    if(f2.charAt(0) != File.separatorChar) {\n+      f2 = CURRENT_DIRECTORY + f2;\n+    }\n+    \n+    String sub1, sub2a, sub2b;\n+    switch(f1.charAt(f1.length() - 1)) {\n+    case '*':\n+      sub1 = f1.substring(0,f1.length() - 1); // chop off \"*\"\n+      if(f2.length() <= sub1.length()) {\n+\t/* If it's smaller, there is no way it could be part of this directory.\n+\t * If it's the same (or length - 1), it could be the same directory but\n+\t * specifies access to the directory rather than the files in it.\n+\t */\n+\treturn false;\n+      } else if(f2.charAt(sub1.length() - 1) == File.separatorChar) {\n+\t/* Make sure the part before the \"/\" is the same */\n+\tif(!f2.substring(0,sub1.length()).equals(sub1))\n+\t  return false;\n+\t/* Make sure there are no subdirectories specified underneath this one */\n+\tString sub2 = f2.substring(sub1.length()+1);\n+\tif(f2.substring(sub1.length()+1).indexOf(File.separatorChar) != -1)\n+\t  return false;\n+      } else {\n+\t/* Obviously not equal: f2 is either not a directory or is not\n+\t * the same directory (its name continues further than we want)\n+\t */\n+\treturn false;\n+      }\n+      break;\n+    case '-':\n+      sub1 = f1.substring(0,f1.length() - 2); // chop off \"/-\"\n+      if(f2.length() < sub1.length()) {\n+\t/* If it's smaller, there is no way it could be part of this directory. */\n+\treturn false;\n+      } else if(f2.length() > sub1.length() && f2.charAt(sub1.length()) != File.separatorChar) {\n+\treturn false;\n+      } else if(!f2.substring(0,sub1.length()).equals(sub1))\n+\treturn false;\n+      break;\n+/* Looks redundant with default case and won't compile anyway - arenn\n+    case File.separatorChar:\n+      if(f2.charAt(f2.length()) == File.separatorChar) {\n+\tif(!f2.equals(f1))\n+\t  return false;\n+      } else {\n+\tif(!f2.equals(f1.substring(0,f1.length()-1)))\n+\t  return false;\n+      }\n+      break;\n+*/\n+    default:\n+      if(f2.charAt(f2.length()) == File.separatorChar) {\n+\tif(!f1.equals(f2.substring(0,f2.length()-1)))\n+\t  return false;\n+      } else {\n+\tif(!f1.equals(f2))\n+\t  return false;\n+      }\n+      break;\n+    }\n+    \n+    if(!usingPerms)\n+      cachePerms();\n+    if(!fp.usingPerms)\n+      fp.cachePerms();\n+    \n+    if(readPerm && !fp.readPerm)\n+      return false;\n+    if(writePerm && !fp.writePerm)\n+      return false;\n+    if(executePerm && !fp.executePerm)\n+      return false;\n+    if(deletePerm && !fp.deletePerm)\n+      return false;\n+    \n+    return true;\n+  }\n+}"}, {"sha": "5e869860afa40014f3ded47c5c48dd65d13f1fbf", "filename": "libjava/java/lang/reflect/ReflectPermission.java", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de5a4d99adf55dc93302dd284123dca93f50896/libjava%2Fjava%2Flang%2Freflect%2FReflectPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de5a4d99adf55dc93302dd284123dca93f50896/libjava%2Fjava%2Flang%2Freflect%2FReflectPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FReflectPermission.java?ref=4de5a4d99adf55dc93302dd284123dca93f50896", "patch": "@@ -0,0 +1,50 @@\n+// ReflectPermission.java - Process modifier values.\n+\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+/**\n+ * @author Tom Tromey <tromey@redhat.com>\n+ * @date November 18, 2000\n+ */\n+\n+/* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n+ * \"The Java Language Specification\", ISBN 0-201-63451-1\n+ * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n+ * Status: Believed complete and correct to version 1.2.\n+ */\n+\n+package java.lang.reflect;\n+\n+import java.security.BasicPermission;\n+\n+/**\n+ * This class implements permissions for reflection.  This is a named\n+ * permission, and the only defined name is suppressAccessChecks.\n+ */\n+public final class ReflectPermission extends BasicPermission\n+{\n+  /**\n+   * Construct a ReflectPermission with the given name.\n+   * @param name The permission name\n+   */\n+  public ReflectPermission (String name)\n+  {\n+    super (name);\n+  }\n+\n+  /**\n+   * Construct a ReflectPermission with the given name.\n+   * @param name The permission name\n+   * @param actions The actions; this is ignored and should be null.\n+   */\n+  public ReflectPermission (String name, String actions)\n+  {\n+    super (name, actions);\n+  }\n+}"}]}