{"sha": "8a06151a7377c8175813ef6d587234553a47a0a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEwNjE1MWE3Mzc3YzgxNzU4MTNlZjZkNTg3MjM0NTUzYTQ3YTBhNQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2011-11-21T14:43:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-21T14:43:38Z"}, "message": "exp_prag.adb, [...]: Minor reformatting.\n\n2011-11-21  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_prag.adb, exp_util.adb, sinfo.ads, sem_res.adb, s-stposu.adb,\n\tsem_attr.adb, s-stposu.ads, s-taprop-solaris.adb, s-taprop-irix.adb,\n\tsem_ch6.adb: Minor reformatting.\n\nFrom-SVN: r181580", "tree": {"sha": "280b7f8fa9d2f9e51f898347f77c02f3b28ef3cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/280b7f8fa9d2f9e51f898347f77c02f3b28ef3cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a06151a7377c8175813ef6d587234553a47a0a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a06151a7377c8175813ef6d587234553a47a0a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a06151a7377c8175813ef6d587234553a47a0a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a06151a7377c8175813ef6d587234553a47a0a5/comments", "author": null, "committer": null, "parents": [{"sha": "cf54716442d585e0f3988470a9596e006adec6ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf54716442d585e0f3988470a9596e006adec6ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf54716442d585e0f3988470a9596e006adec6ed"}], "stats": {"total": 82, "additions": 72, "deletions": 10}, "files": [{"sha": "6b23472e32f96cf80510ecbc7a2f98747162a709", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8a06151a7377c8175813ef6d587234553a47a0a5", "patch": "@@ -1,3 +1,9 @@\n+2011-11-21  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_prag.adb, exp_util.adb, sinfo.ads, sem_res.adb, s-stposu.adb,\n+\tsem_attr.adb, s-stposu.ads, s-taprop-solaris.adb, s-taprop-irix.adb,\n+\tsem_ch6.adb: Minor reformatting.\n+\n 2011-11-21  Arnaud Charlet  <charlet@adacore.com>\n \n \t* s-taprop-irix.adb, s-taprop-solaris.adb (Create_Task): Use"}, {"sha": "8cb084d6ba20e64137bb997c987e503cf598c3ab", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=8a06151a7377c8175813ef6d587234553a47a0a5", "patch": "@@ -270,10 +270,17 @@ package body Exp_Prag is\n \n    procedure Expand_Pragma_Check (N : Node_Id) is\n       Cond : constant Node_Id    := Arg2 (N);\n-      Loc  : constant Source_Ptr := Sloc (First_Node (Cond));\n       Nam  : constant Name_Id    := Chars (Arg1 (N));\n       Msg  : Node_Id;\n \n+      Loc  : constant Source_Ptr := Sloc (First_Node (Cond));\n+      --  Source location used in the case of a failed assertion. Note that\n+      --  the source location of the expression is not usually the best choice\n+      --  here. For example, it gets located on the last AND keyword in a\n+      --  chain of boolean expressiond AND'ed together. It is best to put the\n+      --  message on the first character of the assertion, which is the effect\n+      --  of the First_Node call here.\n+\n    begin\n       --  We already know that this check is enabled, because otherwise the\n       --  semantic pass dealt with rewriting the assertion (see Sem_Prag)"}, {"sha": "8b6613dfa2eb01adee6b8765185c98508bda9384", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=8a06151a7377c8175813ef6d587234553a47a0a5", "patch": "@@ -6425,6 +6425,9 @@ package body Exp_Util is\n       --  Instead, formal verification is performed only on those expressions\n       --  provably side-effect free.\n \n+      --  Why? Is the Alfa mode test just an optimization? Most likely not,\n+      --  most likely it is functionally necessary, if so why ???\n+\n       if not Full_Expander_Active then\n          return;\n "}, {"sha": "78958412ab297adb55f85aade7131e6d545316c3", "filename": "gcc/ada/s-stposu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fs-stposu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fs-stposu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stposu.adb?ref=8a06151a7377c8175813ef6d587234553a47a0a5", "patch": "@@ -565,7 +565,7 @@ package body System.Storage_Pools.Subpools is\n \n    function Header_Size_With_Padding\n      (Alignment : System.Storage_Elements.Storage_Count)\n-   return System.Storage_Elements.Storage_Count\n+      return System.Storage_Elements.Storage_Count\n    is\n       Size : constant Storage_Count := Header_Size;\n "}, {"sha": "38f8cfc73a313a36bfd48d0f0f57f6d68ae7b45e", "filename": "gcc/ada/s-stposu.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fs-stposu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fs-stposu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stposu.ads?ref=8a06151a7377c8175813ef6d587234553a47a0a5", "patch": "@@ -331,7 +331,7 @@ private\n \n    function Header_Size_With_Padding\n      (Alignment : System.Storage_Elements.Storage_Count)\n-   return System.Storage_Elements.Storage_Count;\n+      return System.Storage_Elements.Storage_Count;\n    --  Given an arbitrary alignment, calculate the size of the header which\n    --  precedes a controlled object as the nearest multiple rounded up of the\n    --  alignment."}, {"sha": "62cb4f75e0afbec15dd7f84bf853963ba4213539", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=8a06151a7377c8175813ef6d587234553a47a0a5", "patch": "@@ -836,6 +836,12 @@ package body System.Task_Primitives.Operations is\n       --  do not need to manipulate caller's signal mask at this point.\n       --  All tasks in RTS will have All_Tasks_Mask initially.\n \n+      --  Note: the use of Unrestricted_Access in the following call is needed\n+      --  because otherwise we have an error of getting a access-to-volatile\n+      --  value which points to a non-volatile object. But in this case it is\n+      --  safe to do this, since we know we have no problems with aliasing and\n+      --  Unrestricted_Access bypasses this check.\n+\n       Result :=\n         pthread_create\n           (T.Common.LL.Thread'Unrestricted_Access,\n@@ -865,6 +871,12 @@ package body System.Task_Primitives.Operations is\n              (Attributes'Access, To_Int (T.Common.Task_Info.Scope));\n          pragma Assert (Result = 0);\n \n+         --  Note: the use of Unrestricted_Access in the following call\n+         --  is needed because otherwise we have an error of getting a\n+         --  access-to-volatile value which points to a non-volatile object.\n+         --  But in this case it is safe to do this, since we know we have no\n+         --  aliasing problems and Unrestricted_Access bypasses this check.\n+\n          Result :=\n            pthread_create\n              (T.Common.LL.Thread'Unrestricted_Access,"}, {"sha": "c98da19eb498169e5493afb976db5ab305f6392f", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=8a06151a7377c8175813ef6d587234553a47a0a5", "patch": "@@ -1005,6 +1005,12 @@ package body System.Task_Primitives.Operations is\n          Opts := THR_DETACHED + THR_BOUND;\n       end if;\n \n+      --  Note: the use of Unrestricted_Access in the following call is needed\n+      --  because otherwise we have an error of getting a access-to-volatile\n+      --  value which points to a non-volatile object. But in this case it is\n+      --  safe to do this, since we know we have no problems with aliasing and\n+      --  Unrestricted_Access bypasses this check.\n+\n       Result :=\n         thr_create\n           (System.Null_Address,"}, {"sha": "c2277851bc48213eab920056673b6e48e245fc9a", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=8a06151a7377c8175813ef6d587234553a47a0a5", "patch": "@@ -7821,14 +7821,30 @@ package body Sem_Attr is\n                         T := T / 10;\n                      end loop;\n \n+                  --  User declared enum type with discard names\n+\n+                  elsif Discard_Names (R) then\n+\n+                     --  If range is null, result is zero, that has already\n+                     --  been dealt with, so what we need is the power of ten\n+                     --  that accomodates the Pos of the largest value, which\n+                     --  is the high bound of the range + one for the space.\n+\n+                     W := 1;\n+                     T := Hi;\n+                     while T /= 0 loop\n+                        T := T / 10;\n+                        W := W + 1;\n+                     end loop;\n+\n                   --  Only remaining possibility is user declared enum type\n+                  --  with normal case of Discard_Names not active.\n \n                   else\n                      pragma Assert (Is_Enumeration_Type (P_Type));\n \n                      W := 0;\n                      L := First_Literal (P_Type);\n-\n                      while Present (L) loop\n \n                         --  Only pay attention to in range characters"}, {"sha": "4a44e43c151fe3cfb8d2fc128f45efdac561f13a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=8a06151a7377c8175813ef6d587234553a47a0a5", "patch": "@@ -271,10 +271,10 @@ package body Sem_Ch6 is\n       Expr     : constant Node_Id    := Expression (N);\n       Spec     : constant Node_Id    := Specification (N);\n \n-      Def_Id   :  Entity_Id;\n+      Def_Id :  Entity_Id;\n       pragma Unreferenced (Def_Id);\n \n-      Prev     :  Entity_Id;\n+      Prev :  Entity_Id;\n       --  If the expression is a completion, Prev is the entity whose\n       --  declaration is completed. Def_Id is needed to analyze the spec.\n \n@@ -283,7 +283,6 @@ package body Sem_Ch6 is\n       New_Spec : Node_Id;\n \n    begin\n-\n       --  This is one of the occasions on which we transform the tree during\n       --  semantic analysis. If this is a completion, transform the expression\n       --  function into an equivalent subprogram body, and analyze it.\n@@ -298,9 +297,7 @@ package body Sem_Ch6 is\n       --  If there are previous overloadable entities with the same name,\n       --  check whether any of them is completed by the expression function.\n \n-      if Present (Prev)\n-        and then Is_Overloadable (Prev)\n-      then\n+      if Present (Prev) and then Is_Overloadable (Prev) then\n          Def_Id   := Analyze_Subprogram_Specification (Spec);\n          Prev     := Find_Corresponding_Spec (N);\n       end if;"}, {"sha": "ae2e089c099e27dea006836208ab0e3276284b86", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=8a06151a7377c8175813ef6d587234553a47a0a5", "patch": "@@ -8668,6 +8668,14 @@ package body Sem_Res is\n                      --  this by making sure that the expanded code points to\n                      --  the Sloc of the expression, not the original pragma.\n \n+                     --  Note: Use Error_Msg_F here rather than Error_Msg_N.\n+                     --  The source location of the expression is not usually\n+                     --  the best choice here. For example, it gets located on\n+                     --  the last AND keyword in a chain of boolean expressiond\n+                     --  AND'ed together. It is best to put the message on the\n+                     --  first character of the assertion, which is the effect\n+                     --  of the First_Node call here.\n+\n                      Error_Msg_F\n                        (\"?assertion would fail at run time!\",\n                         Expression\n@@ -8693,7 +8701,13 @@ package body Sem_Res is\n                     and then Entity (Expr) = Standard_False\n                   then\n                      null;\n+\n+                  --  Post warning\n+\n                   else\n+                     --  Again use Error_Msg_F rather than Error_Msg_N, see\n+                     --  comment above for an explanation of why we do this.\n+\n                      Error_Msg_F\n                        (\"?check would fail at run time!\",\n                         Expression"}, {"sha": "56604e17079e32b5c675694d0e484fb6808a0429", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a06151a7377c8175813ef6d587234553a47a0a5/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=8a06151a7377c8175813ef6d587234553a47a0a5", "patch": "@@ -760,6 +760,7 @@ package Sinfo is\n    --    renaming declaration when it is a Renaming_As_Body. The field is Empty\n    --    if there is no corresponding spec, as in the case of a subprogram body\n    --    that serves as its own spec.\n+   --\n    --    In Ada2012, Corresponding_Spec is set on expression functions that\n    --    complete a subprogram declaration.\n "}]}