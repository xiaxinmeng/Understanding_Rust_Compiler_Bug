{"sha": "76d96a5a6f6f0b14967c10166b1577c2bc034d13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZkOTZhNWE2ZjZmMGIxNDk2N2MxMDE2NmIxNTc3YzJiYzAzNGQxMw==", "commit": {"author": {"name": "Mikhail Maltsev", "email": "maltsevm@gmail.com", "date": "2015-07-13T05:49:54Z"}, "committer": {"name": "Mikhail Maltsev", "email": "miyuki@gcc.gnu.org", "date": "2015-07-13T05:49:54Z"}, "message": "Fix several crashes of C++ demangler on fuzzed input.\n\nlibiberty/\n\t* cp-demangle.c (d_dump): Fix syntax error.\n\t(d_identifier): Adjust type of len to match d_source_name.\n\t(d_expression_1): Fix out-of-bounds access.  Check code variable for\n\tNULL before dereferencing it.\n\t(d_find_pack): Do not recurse for FIXED_TYPE, DEFAULT_ARG and NUMBER.\n\t(d_print_comp_inner): Add NULL pointer check.\n\t* cp-demangle.h (d_peek_next_char): Define as inline function when\n\tCHECK_DEMANGLER is defined.\n\t(d_advance): Likewise.\n\t* testsuite/demangle-expected: Add new testcases.\n\nFrom-SVN: r225727", "tree": {"sha": "abb02fde610b3ae8f28505f343d0f245d8bab088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abb02fde610b3ae8f28505f343d0f245d8bab088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76d96a5a6f6f0b14967c10166b1577c2bc034d13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d96a5a6f6f0b14967c10166b1577c2bc034d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d96a5a6f6f0b14967c10166b1577c2bc034d13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d96a5a6f6f0b14967c10166b1577c2bc034d13/comments", "author": {"login": "miyuki", "id": 4668268, "node_id": "MDQ6VXNlcjQ2NjgyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/4668268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miyuki", "html_url": "https://github.com/miyuki", "followers_url": "https://api.github.com/users/miyuki/followers", "following_url": "https://api.github.com/users/miyuki/following{/other_user}", "gists_url": "https://api.github.com/users/miyuki/gists{/gist_id}", "starred_url": "https://api.github.com/users/miyuki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miyuki/subscriptions", "organizations_url": "https://api.github.com/users/miyuki/orgs", "repos_url": "https://api.github.com/users/miyuki/repos", "events_url": "https://api.github.com/users/miyuki/events{/privacy}", "received_events_url": "https://api.github.com/users/miyuki/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "026c3cfd5e92e7f358290921984b57e1b433e658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/026c3cfd5e92e7f358290921984b57e1b433e658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/026c3cfd5e92e7f358290921984b57e1b433e658"}], "stats": {"total": 102, "additions": 94, "deletions": 8}, "files": [{"sha": "fd9417a496f3fdedd4e2c39748ea82c8feba31b6", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d96a5a6f6f0b14967c10166b1577c2bc034d13/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d96a5a6f6f0b14967c10166b1577c2bc034d13/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=76d96a5a6f6f0b14967c10166b1577c2bc034d13", "patch": "@@ -1,3 +1,16 @@\n+2015-07-13  Mikhail Maltsev  <maltsevm@gmail.com>\n+\n+\t* cp-demangle.c (d_dump): Fix syntax error.\n+\t(d_identifier): Adjust type of len to match d_source_name.\n+\t(d_expression_1): Fix out-of-bounds access.  Check code variable for\n+\tNULL before dereferencing it.\n+\t(d_find_pack): Do not recurse for FIXED_TYPE, DEFAULT_ARG and NUMBER.\n+\t(d_print_comp_inner): Add NULL pointer check.\n+\t* cp-demangle.h (d_peek_next_char): Define as inline function when\n+\tCHECK_DEMANGLER is defined.\n+\t(d_advance): Likewise.\n+\t* testsuite/demangle-expected: Add new testcases.\n+\n 2015-07-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* getruntime.c (RUSAGE_SELF): Define if not already defined."}, {"sha": "82541004bf7762a022eea7d884bdf321631b4f95", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d96a5a6f6f0b14967c10166b1577c2bc034d13/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d96a5a6f6f0b14967c10166b1577c2bc034d13/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=76d96a5a6f6f0b14967c10166b1577c2bc034d13", "patch": "@@ -93,7 +93,11 @@\n    CP_DEMANGLE_DEBUG\n       If defined, turns on debugging mode, which prints information on\n       stdout about the mangled string.  This is not generally useful.\n-*/\n+\n+   CHECK_DEMANGLER\n+      If defined, additional sanity checks will be performed.  It will\n+      cause some slowdown, but will allow to catch out-of-bound access\n+      errors earlier.  This macro is intended for testing and debugging.  */\n \n #if defined (_AIX) && !defined (__GNUC__)\n  #pragma alloca\n@@ -419,7 +423,7 @@ static struct demangle_component *d_source_name (struct d_info *);\n \n static long d_number (struct d_info *);\n \n-static struct demangle_component *d_identifier (struct d_info *, int);\n+static struct demangle_component *d_identifier (struct d_info *, long);\n \n static struct demangle_component *d_operator_name (struct d_info *);\n \n@@ -715,7 +719,7 @@ d_dump (struct demangle_component *dc, int indent)\n     case DEMANGLE_COMPONENT_FIXED_TYPE:\n       printf (\"fixed-point type, accum? %d, sat? %d\\n\",\n               dc->u.s_fixed.accum, dc->u.s_fixed.sat);\n-      d_dump (dc->u.s_fixed.length, indent + 2)\n+      d_dump (dc->u.s_fixed.length, indent + 2);\n       break;\n     case DEMANGLE_COMPONENT_ARGLIST:\n       printf (\"argument list\\n\");\n@@ -1656,7 +1660,7 @@ d_number_component (struct d_info *di)\n /* identifier ::= <(unqualified source code identifier)>  */\n \n static struct demangle_component *\n-d_identifier (struct d_info *di, int len)\n+d_identifier (struct d_info *di, long len)\n {\n   const char *name;\n \n@@ -1677,7 +1681,7 @@ d_identifier (struct d_info *di, int len)\n   /* Look for something which looks like a gcc encoding of an\n      anonymous namespace, and replace it with a more user friendly\n      name.  */\n-  if (len >= (int) ANONYMOUS_NAMESPACE_PREFIX_LEN + 2\n+  if (len >= (long) ANONYMOUS_NAMESPACE_PREFIX_LEN + 2\n       && memcmp (name, ANONYMOUS_NAMESPACE_PREFIX,\n \t\t ANONYMOUS_NAMESPACE_PREFIX_LEN) == 0)\n     {\n@@ -3166,6 +3170,8 @@ d_expression_1 (struct d_info *di)\n       struct demangle_component *type = NULL;\n       if (peek == 't')\n \ttype = cplus_demangle_type (di);\n+      if (!d_peek_next_char (di))\n+\treturn NULL;\n       d_advance (di, 2);\n       return d_make_comp (di, DEMANGLE_COMPONENT_INITIALIZER_LIST,\n \t\t\t  type, d_exprlist (di, 'E'));\n@@ -3240,6 +3246,8 @@ d_expression_1 (struct d_info *di)\n \t    struct demangle_component *left;\n \t    struct demangle_component *right;\n \n+\t    if (code == NULL)\n+\t      return NULL;\n \t    if (op_is_new_cast (op))\n \t      left = cplus_demangle_type (di);\n \t    else\n@@ -3267,7 +3275,9 @@ d_expression_1 (struct d_info *di)\n \t    struct demangle_component *second;\n \t    struct demangle_component *third;\n \n-\t    if (!strcmp (code, \"qu\"))\n+\t    if (code == NULL)\n+\t      return NULL;\n+\t    else if (!strcmp (code, \"qu\"))\n \t      {\n \t\t/* ?: expression.  */\n \t\tfirst = d_expression_1 (di);\n@@ -4196,6 +4206,9 @@ d_find_pack (struct d_print_info *dpi,\n     case DEMANGLE_COMPONENT_CHARACTER:\n     case DEMANGLE_COMPONENT_FUNCTION_PARAM:\n     case DEMANGLE_COMPONENT_UNNAMED_TYPE:\n+    case DEMANGLE_COMPONENT_FIXED_TYPE:\n+    case DEMANGLE_COMPONENT_DEFAULT_ARG:\n+    case DEMANGLE_COMPONENT_NUMBER:\n       return NULL;\n \n     case DEMANGLE_COMPONENT_EXTENDED_OPERATOR:\n@@ -4431,6 +4444,11 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n \t    local_name = d_right (typed_name);\n \t    if (local_name->type == DEMANGLE_COMPONENT_DEFAULT_ARG)\n \t      local_name = local_name->u.s_unary_num.sub;\n+\t    if (local_name == NULL)\n+\t      {\n+\t\td_print_error (dpi);\n+\t\treturn;\n+\t      }\n \t    while (local_name->type == DEMANGLE_COMPONENT_RESTRICT_THIS\n \t\t   || local_name->type == DEMANGLE_COMPONENT_VOLATILE_THIS\n \t\t   || local_name->type == DEMANGLE_COMPONENT_CONST_THIS"}, {"sha": "197883e25602f4d8d506de50c6b5d6f800babc97", "filename": "libiberty/cp-demangle.h", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d96a5a6f6f0b14967c10166b1577c2bc034d13/libiberty%2Fcp-demangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d96a5a6f6f0b14967c10166b1577c2bc034d13/libiberty%2Fcp-demangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.h?ref=76d96a5a6f6f0b14967c10166b1577c2bc034d13", "patch": "@@ -135,12 +135,37 @@ struct d_info\n    - call d_check_char(di, '\\0')\n    Everything else is safe.  */\n #define d_peek_char(di) (*((di)->n))\n-#define d_peek_next_char(di) ((di)->n[1])\n-#define d_advance(di, i) ((di)->n += (i))\n+#ifndef CHECK_DEMANGLER\n+#  define d_peek_next_char(di) ((di)->n[1])\n+#  define d_advance(di, i) ((di)->n += (i))\n+#endif\n #define d_check_char(di, c) (d_peek_char(di) == c ? ((di)->n++, 1) : 0)\n #define d_next_char(di) (d_peek_char(di) == '\\0' ? '\\0' : *((di)->n++))\n #define d_str(di) ((di)->n)\n \n+#ifdef CHECK_DEMANGLER\n+static inline char\n+d_peek_next_char (const struct d_info *di)\n+{\n+  if (!di->n[0])\n+    abort ();\n+  return di->n[1];\n+}\n+\n+static inline void\n+d_advance (struct d_info *di, int i)\n+{\n+  if (i < 0)\n+    abort ();\n+  while (i--)\n+    {\n+      if (!di->n[0])\n+\tabort ();\n+      di->n++;\n+    }\n+}\n+#endif\n+\n /* Functions and arrays in cp-demangle.c which are referenced by\n    functions in cp-demint.c.  */\n #ifdef IN_GLIBCPP_V3"}, {"sha": "4c6359e6fa85a747adfaa965358cf28d0ea1660c", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d96a5a6f6f0b14967c10166b1577c2bc034d13/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d96a5a6f6f0b14967c10166b1577c2bc034d13/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=76d96a5a6f6f0b14967c10166b1577c2bc034d13", "patch": "@@ -4091,6 +4091,36 @@ void g<1>(A<1>&, B<static_cast<bool>(1)>&)\n _ZNKSt7complexIiE4realB5cxx11Ev\n std::complex<int>::real[abi:cxx11]() const\n #\n+# Some more crashes revealed by fuzz-testing:\n+# Check for NULL pointer when demangling trinary operators\n+--format=gnu-v3\n+_Z1fAv32_f\n+_Z1fAv32_f\n+# Do not overflow when decoding identifier length\n+--format=gnu-v3\n+_Z11111111111\n+_Z11111111111\n+# Check out-of-bounds access when decoding braced initializer list\n+--format=gnu-v3\n+_ZDTtl\n+_ZDTtl\n+# Check for NULL pointer when demangling DEMANGLE_COMPONENT_LOCAL_NAME\n+--format=gnu-v3\n+_ZZN1fEEd_lEv\n+_ZZN1fEEd_lEv\n+# Handle DEMANGLE_COMPONENT_FIXED_TYPE in d_find_pack\n+--format=gnu-v3\n+_Z1fDpDFT_\n+_Z1fDpDFT_\n+# Likewise, DEMANGLE_COMPONENT_DEFAULT_ARG\n+--format=gnu-v3\n+_Z1fIDpZ1fEd_E\n+_Z1fIDpZ1fEd_E\n+# Likewise, DEMANGLE_COMPONENT_NUMBER\n+--format=gnu-v3\n+_Z1fDpDv1_c\n+f((char __vector(1))...)\n+#\n # Ada (GNAT) tests.\n #\n # Simple test."}]}