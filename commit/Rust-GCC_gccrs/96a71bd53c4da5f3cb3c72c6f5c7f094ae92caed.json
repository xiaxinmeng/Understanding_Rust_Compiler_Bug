{"sha": "96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZhNzFiZDUzYzRkYTVmM2NiM2M3MmM2ZjVjN2YwOTRhZTkyY2FlZA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2016-03-07T18:45:17Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2016-03-07T18:45:17Z"}, "message": "[hsa testsuite] New directory for HSA-specific C testcases\n\n2016-03-07  Martin Jambor  <mjambor@suse.cz>\n\n\t* testsuite/lib/libgomp.exp\n\t(check_effective_target_hsa_offloading_selected_nocache): New.\n\t(check_effective_target_hsa_offloading_selected): Likewise.\n\t* testsuite/libgomp.hsa.c/c.exp: Likewise.\n\t* testsuite/libgomp.hsa.c/alloca-1.c: Likewise.\n\t* testsuite/libgomp.hsa.c/bitfield-1.c: Likewise.\n\t* testsuite/libgomp.hsa.c/builtins-1.c: Likewise.\n\t* testsuite/libgomp.hsa.c/complex-1.c: Likewise.\n\t* testsuite/libgomp.hsa.c/formal-actual-args-1.c: Likewise.\n\t* testsuite/libgomp.hsa.c/function-call-1.c: Likewise.\n\t* testsuite/libgomp.hsa.c/get-level-1.c: Likewise.\n\t* testsuite/libgomp.hsa.c/gridify-1.c: Likewise.\n\t* testsuite/libgomp.hsa.c/gridify-2.c: Likewise.\n\t* testsuite/libgomp.hsa.c/gridify-3.c: Likewise.\n\t* testsuite/libgomp.hsa.c/gridify-4.c: Likewise.\n\t* testsuite/libgomp.hsa.c/memory-operations-1.c: Likewise.\n\t* testsuite/libgomp.hsa.c/pr69568.c: Likewise.\n\t* testsuite/libgomp.hsa.c/rotate-1.c: Likewise.\n\t* testsuite/libgomp.hsa.c/switch-1.c: Likewise.\n\t* testsuite/libgomp.hsa.c/switch-branch-1.c: Likewise.\n\nFrom-SVN: r234047", "tree": {"sha": "af4190848f3c19d4fe091506fc130ff138d7e91a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af4190848f3c19d4fe091506fc130ff138d7e91a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02e0b5b2451b092031431e7bdf33f5872295a2d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02e0b5b2451b092031431e7bdf33f5872295a2d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02e0b5b2451b092031431e7bdf33f5872295a2d3"}], "stats": {"total": 1193, "additions": 1193, "deletions": 0}, "files": [{"sha": "ab8cfd47fe34a7e2865a87a80c3c5041ff932286", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -1,3 +1,26 @@\n+2016-03-07  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* testsuite/lib/libgomp.exp\n+\t(check_effective_target_hsa_offloading_selected_nocache): New.\n+\t(check_effective_target_hsa_offloading_selected): Likewise.\n+\t* testsuite/libgomp.hsa.c/c.exp: Likewise.\n+\t* testsuite/libgomp.hsa.c/alloca-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/bitfield-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/builtins-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/complex-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/formal-actual-args-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/function-call-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/get-level-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/gridify-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/gridify-2.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/gridify-3.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/gridify-4.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/memory-operations-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/pr69568.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/rotate-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/switch-1.c: Likewise.\n+\t* testsuite/libgomp.hsa.c/switch-branch-1.c: Likewise.\n+\n 2016-03-07  Martin Jambor  <mjambor@suse.cz>\n \n \t* testsuite/libgomp.c/examples-4/async_target-2.c: Only run on"}, {"sha": "0d5b6d42d7e89f85f64d3e2925d7ded5f672df88", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -395,3 +395,56 @@ proc check_effective_target_openacc_host_selected { } {\n     }\n     return 0;\n }\n+\n+# Return 1 if the selected OMP device is actually a HSA device\n+\n+proc check_effective_target_hsa_offloading_selected_nocache {} {\n+    global tool\n+\n+    set src {\n+\tint main () {\n+\t    int v = 1;\n+\t    #pragma omp target map(from:v)\n+\t    v = 0;\n+\t    return v;\n+\t}\n+    }\n+    \n+    set result [eval [list check_compile hsa_offloading_src executable $src] \"\"]\n+    set lines [lindex $result 0]\n+    set output [lindex $result 1]\n+\n+    set ok 0\n+    if { [string match \"\" $lines] } {\n+\t# No error messages, let us switch on HSA debugging output and run it\n+\tset prev_HSA_DEBUG [getenv HSA_DEBUG]\n+\tsetenv HSA_DEBUG \"1\"\n+\tset result [remote_load target \"./$output\" \"2>&1\" \"\"]\n+\tif { [string match \"\" $prev_HSA_DEBUG] } {\n+\t    unsetenv HSA_DEBUG\n+\t} else {\n+\t    setenv HSA_DEBUG $prev_HSA_DEBUG\n+\t}\n+\tset status [lindex $result 0]\n+\tif { $status != \"pass\" } {\n+\t    verbose \"HSA availability test failed\"\n+\t    return 0\n+\t}\n+\tset output [lindex $result 1]\n+\tif { [string match \"*HSA debug: Going to dispatch kernel*\" $output] } {\n+\t    verbose \"HSA availability detected\"\n+\t    set ok 1\n+\t}\n+    }\n+    remote_file build delete $output\n+    return $ok\n+}\n+\n+# Return 1 if the selected OMP device is actually a HSA device and\n+# cache the result\n+\n+proc check_effective_target_hsa_offloading_selected {} {\n+    return [check_cached_effective_target hsa_offloading_selected {\n+\tcheck_effective_target_hsa_offloading_selected_nocache\n+    }]\n+}"}, {"sha": "48dca94a47f55b412f1e0c9aa26bfb22ed2e46b8", "filename": "libgomp/testsuite/libgomp.hsa.c/alloca-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Falloca-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Falloca-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Falloca-1.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,25 @@\n+#define size 10\n+int i, j, k;\n+\n+int\n+main ()\n+{\n+  char *s = __builtin_malloc (size + 1);\n+\n+#pragma omp target teams\n+  {\n+#pragma omp distribute parallel for default(none) private(i) shared(s)\n+    for (i = 0; i < size; ++i)\n+      {\n+\tchar *buffer = __builtin_alloca (10);\n+\tbuffer[5] = 97 + i;\n+\ts[i] = buffer[5];\n+      }\n+  }\n+\n+  for (i = 0; i < size; ++i)\n+    if (s[i] != 97 + i)\n+      __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "4dbf34817333eb3955afba92423f3359a768603b", "filename": "libgomp/testsuite/libgomp.hsa.c/bitfield-1.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fbitfield-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fbitfield-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fbitfield-1.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,160 @@\n+#include <assert.h>\n+\n+#define ASSIGN_SX(N)                                                           \\\n+  s##N.a1 = 1;                                                                 \\\n+  s##N.a2 = 2;                                                                 \\\n+  s##N.a3 = 3;                                                                 \\\n+  s##N.a4 = 4;                                                                 \\\n+  s##N.a5 = 5;                                                                 \\\n+  s##N.a6 = 6;                                                                 \\\n+  s##N.a7 = 7;                                                                 \\\n+  s##N.a8 = 8;                                                                 \\\n+  s##N.a9 = 9;                                                                 \\\n+  s##N.a10 = 10;\n+\n+#define ASSERT_SX(N)                                                           \\\n+  assert (s##N.a1 == 1); \\\n+  assert (s##N.a2 == 2); \\\n+  assert (s##N.a3 == 3); \\\n+  assert (s##N.a4 == 4); \\\n+  assert (s##N.a5 == 5); \\\n+  assert (s##N.a6 == 6); \\\n+  assert (s##N.a7 == 7); \\\n+  assert (s##N.a8 == 8); \\\n+  assert (s##N.a9 == 9); \\\n+  assert (s##N.a10 == 10);\n+\n+struct S1\n+{\n+  unsigned a : 10;\n+  unsigned b : 20;\n+};\n+\n+struct S2\n+{\n+  unsigned a1 : 10;\n+  unsigned a2 : 10;\n+  unsigned a3 : 10;\n+  unsigned a4 : 10;\n+  unsigned a5 : 10;\n+  unsigned a6 : 10;\n+  unsigned a7 : 10;\n+  unsigned a8 : 10;\n+  unsigned a9 : 10;\n+  unsigned a10 : 10;\n+};\n+\n+struct S3\n+{\n+  unsigned a1 : 10;\n+  unsigned a2 : 9;\n+  unsigned a3 : 8;\n+  unsigned a4 : 7;\n+  unsigned a5 : 6;\n+  unsigned a6 : 5;\n+  unsigned a7 : 6;\n+  unsigned a8 : 7;\n+  unsigned a9 : 8;\n+  unsigned a10 : 9;\n+};\n+\n+struct S4\n+{\n+  unsigned a1 : 10;\n+  int a2 : 9;\n+  unsigned a3 : 8;\n+  int a4 : 7;\n+  unsigned a5 : 6;\n+  int a6 : 5;\n+  unsigned a7 : 6;\n+  int a8 : 7;\n+  unsigned a9 : 8;\n+  int a10 : 9;\n+};\n+\n+struct S5\n+{\n+  unsigned a1 : 31;\n+  int a2 : 9;\n+  unsigned a3 : 17;\n+  int a4 : 7;\n+  unsigned a5 : 6;\n+  int a6 : 5;\n+  unsigned long a7 : 55;\n+  int a8 : 7;\n+  unsigned a9 : 8;\n+  int a10 : 9;\n+};\n+\n+int\n+main ()\n+{\n+  struct S1 s1;\n+\n+#pragma omp target map(to: s1)\n+  {\n+    s1.a = 2;\n+    s1.b = 3;\n+  }\n+\n+  assert (s1.a == 2);\n+  assert (s1.b == 3);\n+\n+  struct S2 s2;\n+\n+#pragma omp target map(to: s2)\n+  {\n+    ASSIGN_SX (2)\n+  }\n+\n+  ASSERT_SX (2)\n+\n+  struct S3 s3;\n+\n+#pragma omp target map(to: s3)\n+  {\n+    ASSIGN_SX (3)\n+  }\n+\n+  ASSERT_SX (3)\n+\n+  struct S4 s4;\n+\n+#pragma omp target map(to: s4)\n+  {\n+    ASSIGN_SX (4)\n+  }\n+\n+  ASSERT_SX (4)\n+\n+  struct S4 s5;\n+\n+  s5.a1 = 0;\n+  s5.a2 = 1;\n+  s5.a3 = 2;\n+  s5.a4 = 3;\n+  s5.a5 = 4;\n+  s5.a6 = 5;\n+  s5.a7 = 6;\n+  s5.a8 = 7;\n+  s5.a9 = 8;\n+  s5.a10 = 9;\n+\n+#pragma omp target map(to: s5)\n+  {\n+    s5.a1++;\n+    s5.a2++;\n+    s5.a3++;\n+    s5.a4++;\n+    s5.a5++;\n+    s5.a6++;\n+    s5.a7++;\n+    s5.a8++;\n+    s5.a9++;\n+    s5.a10++;\n+  }\n+\n+  ASSERT_SX (5)\n+\n+  return 0;\n+}"}, {"sha": "e603c21afcd28503ee83a34754a6a49c107b5724", "filename": "libgomp/testsuite/libgomp.hsa.c/builtins-1.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fbuiltins-1.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,97 @@\n+/* { dg-additional-options \"-ffast-math\" } */\n+\n+#include <assert.h>\n+#include <math.h>\n+\n+#define N 10\n+#define N2 14\n+\n+#define c1 1.2345f\n+#define c2 1.2345\n+\n+#define DELTA 0.001\n+\n+#define TEST_BIT_BUILTINS(T, S, S2)                                            \\\n+  {                                                                            \\\n+    T arguments[N2]                                                            \\\n+      = {0##S,\t\t1##S,\t  2##S,\t  3##S,                    \\\n+\t 111##S,\t333##S,\t444##S,\t0x80000000##S,           \\\n+\t 0x0000ffff##S, 0xf0000000##S, 0xff000000##S, 0xffffffff##S};          \\\n+    int clrsb[N2] = {};                                                        \\\n+    int clz[N2] = {};                                                          \\\n+    int ctz[N2] = {};                                                          \\\n+    int ffs[N2] = {};                                                          \\\n+    int parity[N2] = {};                                                       \\\n+    int popcount[N2] = {};                                                     \\\n+                                                                               \\\n+    _Pragma (\"omp target map(to:clz[:N2], ctz[:N2], ffs[:N2], parity[:N2], popcount[:N2])\")                                                 \\\n+    {                                                                          \\\n+      for (unsigned i = 0; i < N2; i++)                                        \\\n+\t{                                                                      \\\n+\t  clrsb[i] = __builtin_clrsb##S2 (arguments[i]);                       \\\n+\t  clz[i] = __builtin_clz##S2 (arguments[i]);                           \\\n+\t  ctz[i] = __builtin_ctz##S2 (arguments[i]);                           \\\n+\t  ffs[i] = __builtin_ffs##S2 (arguments[i]);                           \\\n+\t  parity[i] = __builtin_parity##S2 (arguments[i]);                     \\\n+\t  popcount[i] = __builtin_popcount##S2 (arguments[i]);                 \\\n+\t}                                                                      \\\n+    }                                                                          \\\n+                                                                               \\\n+    for (unsigned i = 0; i < N2; i++)                                          \\\n+      {                                                                        \\\n+\tassert (clrsb[i] == __builtin_clrsb##S2 (arguments[i]));               \\\n+\tif (arguments[0] != 0)                                                 \\\n+\t  {                                                                    \\\n+\t    assert (clz[i] == __builtin_clz##S2 (arguments[i]));               \\\n+\t    assert (ctz[i] == __builtin_ctz##S2 (arguments[i]));               \\\n+\t  }                                                                    \\\n+\tassert (ffs[i] == __builtin_ffs##S2 (arguments[i]));                   \\\n+\tassert (parity[i] == __builtin_parity##S2 (arguments[i]));             \\\n+\tassert (popcount[i] == __builtin_popcount##S2 (arguments[i]));         \\\n+      }                                                                        \\\n+  }\n+\n+#define ASSERT(v1, v2) assert (fabs (v1 - v2) < DELTA)\n+\n+int\n+main ()\n+{\n+  float f[N] = {};\n+  float d[N] = {};\n+\n+/* 1) test direct mapping to HSA insns.  */\n+\n+#pragma omp target map(to: f[ : N], d[ : N])\n+  {\n+    f[0] = sinf (c1);\n+    f[1] = cosf (c1);\n+    f[2] = exp2f (c1);\n+    f[3] = log2f (c1);\n+    f[4] = truncf (c1);\n+    f[5] = sqrtf (c1);\n+\n+    d[0] = trunc (c2);\n+    d[1] = sqrt (c2);\n+  }\n+\n+  ASSERT (f[0], sinf (c1));\n+  ASSERT (f[1], cosf (c1));\n+  ASSERT (f[2], exp2f (c1));\n+  ASSERT (f[3], log2f (c1));\n+  ASSERT (f[4], truncf (c1));\n+  ASSERT (f[5], sqrtf (c1));\n+\n+  ASSERT (d[0], trunc (c2));\n+  ASSERT (d[1], sqrt (c2));\n+\n+  /* 2) test bit builtins for unsigned int.  */\n+  TEST_BIT_BUILTINS (int, , );\n+\n+  /* 3) test bit builtins for unsigned long int.  */\n+  TEST_BIT_BUILTINS (long, l, l);\n+\n+  /* 4) test bit builtins for unsigned long long int.  */\n+  TEST_BIT_BUILTINS (long long, ll, ll);\n+\n+  return 0;\n+}"}, {"sha": "4614192320adb6236abbb3d9269537e6e3fde1a7", "filename": "libgomp/testsuite/libgomp.hsa.c/c.exp", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fc.exp?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,42 @@\n+if [info exists lang_library_path] then {\n+    unset lang_library_path\n+    unset lang_link_flags\n+}\n+if [info exists lang_test_file] then {\n+    unset lang_test_file\n+}\n+if [info exists lang_include_flags] then {\n+    unset lang_include_flags\n+}\n+\n+load_lib libgomp-dg.exp\n+load_gcc_lib gcc-dg.exp\n+\n+# Initialize dg.\n+dg-init\n+\n+# Turn on OpenMP.\n+lappend ALWAYS_CFLAGS \"additional_flags=-fopenmp\"\n+\n+set ld_library_path $always_ld_library_path\n+append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n+set_ld_library_path_env_vars\n+\n+global DEFAULT_CFLAGS\n+if [info exists DEFAULT_CFLAGS] then {\n+    set CFLAGS_list [list \"-O0\" $DEFAULT_CFLAGS]\n+} else {\n+    set CFLAGS_list [list \"-O0\" \"-O2\"]\n+}\n+\n+if [check_effective_target_hsa_offloading_selected] {\n+    foreach USE_CFLAGS $CFLAGS_list {\n+\t# Gather a list of all tests.\n+\tset tests [lsort [find $srcdir/$subdir *.c]]\n+\t# Main loop.\n+\tdg-runtest $tests \"\" [concat $USE_CFLAGS \"-Whsa\"]\n+    }\n+}\n+\n+# All done.\n+dg-finish"}, {"sha": "438c64a1593cd2f4c47b70d18ebe837a25bf056c", "filename": "libgomp/testsuite/libgomp.hsa.c/complex-1.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fcomplex-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fcomplex-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fcomplex-1.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,65 @@\n+#include <assert.h>\n+#include <complex.h>\n+#include <math.h>\n+\n+#define uchar unsigned char\n+#define C 123\n+\n+#define TEST(type)                                                             \\\n+  type foo_##type (void)                                                       \\\n+  {                                                                            \\\n+    _Complex type a = C + 45I;                                                 \\\n+    return __real__ a;                                                         \\\n+  }\n+\n+#pragma omp declare target\n+TEST (char)\n+TEST (uchar)\n+TEST (short)\n+TEST (int)\n+\n+float\n+bar (float a, float b)\n+{\n+  _Complex float c = a + b * I;\n+\n+  c += 11.f + 12.f * I;\n+\n+  _Complex float d = 2.f + 4.44f * I;\n+\n+  return __real__(crealf (c + d) + cimag (d) * I);\n+}\n+\n+#pragma omp end declare target\n+\n+int\n+main (void)\n+{\n+  int v = 0;\n+  float v2 = 0.0f;\n+\n+#pragma omp target map(to: v)\n+  v = foo_char ();\n+\n+  assert (v == C);\n+\n+#pragma omp target map(to: v)\n+  v = foo_uchar ();\n+\n+  assert (v == C);\n+\n+#pragma omp target map(to: v)\n+  v = foo_short ();\n+\n+  assert (v == C);\n+\n+#pragma omp target map(to: v)\n+  v = foo_int ();\n+\n+  assert (v == C);\n+\n+#pragma omp target map(to: v2)\n+  v2 = bar (1.12f, 4.44f);\n+\n+  assert (fabs (v2 - 14.12) < 0.0001f);\n+}"}, {"sha": "058a036d371658dd371a16f210d6716ddb70e199", "filename": "libgomp/testsuite/libgomp.hsa.c/formal-actual-args-1.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fformal-actual-args-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fformal-actual-args-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fformal-actual-args-1.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,83 @@\n+#include <assert.h>\n+\n+struct Cube\n+{\n+  int x;\n+  int y;\n+  int z;\n+};\n+\n+#pragma omp declare target\n+int\n+foo (short a)\n+{\n+  switch (a)\n+    {\n+    case 1:\n+      return 11;\n+      break;\n+    case 33:\n+      return 333;\n+      break;\n+    case 55:\n+      return 55;\n+      break;\n+    default:\n+      return -1;\n+    }\n+}\n+\n+int\n+bar (int a)\n+{\n+  int *ptr = &a;\n+\n+  *ptr = 100;\n+  return a + *ptr;\n+}\n+\n+struct Cube\n+baz (struct Cube c)\n+{\n+  c.x = 11;\n+  return c;\n+}\n+\n+#pragma omp end declare target\n+\n+#define s 100\n+\n+int\n+main (int argc)\n+{\n+  /* Test 1: argument types: char to short.  */\n+\n+  int array[s];\n+#pragma omp target map(tofrom : array[ : s])\n+  {\n+    for (char i = 0; i < s; i++)\n+      array[i] = foo (i);\n+  }\n+\n+  for (int i = 0; i < s; i++)\n+    assert (array[i] == foo (i));\n+\n+  /* Test 2: argument address is taken.  */\n+  int v = 2;\n+\n+#pragma omp target map(tofrom : v)\n+  v = bar (v);\n+\n+  assert (v == 200);\n+\n+  /* Test 3: passing a structure as a function argument.  */\n+  struct Cube r;\n+  struct Cube c = {.x = 1, .y = 2, .z = 3};\n+\n+#pragma omp target map(to : r) map(from : c)\n+  r = baz (c);\n+\n+  assert (r.x == 11);\n+  assert (r.y == c.y);\n+  assert (r.z == c.z);\n+}"}, {"sha": "7f15dff96b99240d8a3ee390834fd667005b0bb0", "filename": "libgomp/testsuite/libgomp.hsa.c/function-call-1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Ffunction-call-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Ffunction-call-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Ffunction-call-1.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,50 @@\n+#define size 8\n+\n+#pragma omp declare target\n+int\n+identity (int x)\n+{\n+  return x;\n+}\n+\n+int\n+expx (int x, int n)\n+{\n+  for (int i = 0; i < n - 1; i++)\n+    x *= x;\n+\n+  return x;\n+}\n+\n+float\n+init (int x, int y)\n+{\n+  int x1 = identity (identity (identity (identity (x))));\n+  int y1 = identity (identity (identity (identity (y))));\n+\n+  int x2 = expx (x1, 2);\n+  int y2 = expx (y1, 2);\n+\n+  return (x2 + y2);\n+}\n+#pragma omp end declare target\n+\n+int\n+main ()\n+{\n+  int i, j;\n+  int a[size][size];\n+\n+#pragma omp target teams map(to:a[:size][:size])\n+#pragma omp distribute parallel for default(none) private(i, j) shared(a)\n+  for (i = 0; i < size; ++i)\n+    for (j = 0; j < size; ++j)\n+      a[i][j] = init (i, j);\n+\n+  for (i = 0; i < size; ++i)\n+    for (j = 0; j < size; ++j)\n+      if (i * i + j * j != a[i][j])\n+       __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "81c9df002761ef1bbf3163de4e80bc57f3065a81", "filename": "libgomp/testsuite/libgomp.hsa.c/get-level-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fget-level-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fget-level-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fget-level-1.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,26 @@\n+#include <omp.h>\n+\n+int\n+main ()\n+{\n+  int i;\n+  int level = -1;\n+\n+#pragma omp target map(tofrom : level)\n+  {\n+    level = omp_get_level ();\n+  }\n+\n+  if (level != 0)\n+    __builtin_abort ();\n+\n+#pragma omp target teams map(tofrom : level)\n+#pragma omp distribute parallel for default(none) private(i) shared(level)\n+  for (i = 0; i < 1; ++i)\n+    level += omp_get_level ();\n+\n+  if (level != 1)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "b670b9b654cc4a38f46951705b9483f11ed9ee60", "filename": "libgomp/testsuite/libgomp.hsa.c/gridify-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fgridify-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fgridify-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fgridify-1.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,26 @@\n+void __attribute__((noinline, noclone))\n+foo (int n, int *a, int workgroup_size)\n+{\n+  int i;\n+#pragma omp target\n+#pragma omp teams thread_limit(workgroup_size)\n+#pragma omp distribute parallel for shared(a) firstprivate(n) private(i)\n+    for (i = 0; i < n; i++)\n+      a[i]++;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n = 32;\n+  int *a = __builtin_malloc (sizeof (int) * n);\n+  int i;\n+\n+  __builtin_memset (a, 0, sizeof (int) * n);\n+  foo (n, a, 32);\n+  for (i = 0; i < n; i ++)\n+    {\n+      if (a[i] != 1)\n+\t__builtin_abort ();\n+    }\n+  return 0;\n+}"}, {"sha": "3692eb0d11cc69bf380fc44f68bfa76705fa6b59", "filename": "libgomp/testsuite/libgomp.hsa.c/gridify-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fgridify-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fgridify-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fgridify-2.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,26 @@\n+void __attribute__((noinline, noclone))\n+foo (int j, int n, int *a)\n+{\n+  int i;\n+#pragma omp target\n+#pragma omp teams\n+#pragma omp distribute parallel for shared(a) firstprivate(n) private(i) firstprivate(j)\n+    for (i = j + 1; i < n; i++)\n+      a[i] = i;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n = 32;\n+  int *a = __builtin_malloc (sizeof (int) * n);\n+  int i, j = 4;\n+\n+  __builtin_memset (a, 0, sizeof (int) * n);\n+  foo (j, n, a);\n+  for (i = j + 1; i < n; i ++)\n+    {\n+      if (a[i] != i)\n+\t__builtin_abort ();\n+    }\n+  return 0;\n+}"}, {"sha": "f881d81e18ef8e0fc73530bf99360b74dae33ae4", "filename": "libgomp/testsuite/libgomp.hsa.c/gridify-3.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fgridify-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fgridify-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fgridify-3.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,39 @@\n+#define THE_LOOP \\\n+  for (i = j + 1; i < n; i += 3) \\\n+    a[i] = i\n+\n+void __attribute__((noinline, noclone))\n+foo (int j, int n, int *a)\n+{\n+  int i;\n+#pragma omp target\n+#pragma omp teams\n+#pragma omp distribute parallel for shared(a) firstprivate(n) private(i) firstprivate(j)\n+  THE_LOOP;\n+}\n+\n+void __attribute__((noinline, noclone))\n+bar (int j, int n, int *a)\n+{\n+  int i;\n+  THE_LOOP;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n = 32;\n+  int *a = __builtin_malloc (sizeof (int) * n);\n+  int *ref = __builtin_malloc (sizeof (int) * n);\n+  int i, j = 4;\n+\n+  __builtin_memset (a, 0, sizeof (int) * n);\n+  __builtin_memset (ref, 0, sizeof (int) * n);\n+  bar (j, n, ref);\n+  foo (j, n, a);\n+  for (i = 0; i < n; i ++)\n+    {\n+      if (a[i] != ref[i])\n+\t__builtin_abort ();\n+    }\n+  return 0;\n+}"}, {"sha": "c3fbdbf55d4afa6eaa3b031adc567d86f9feb28d", "filename": "libgomp/testsuite/libgomp.hsa.c/gridify-4.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fgridify-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fgridify-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fgridify-4.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,45 @@\n+#define THE_LOOP \\\n+  for (i = j + 1; i < n; i += 3) \\\n+    a[i] = i\n+\n+void __attribute__((noinline, noclone))\n+foo (int j, int n, int *a)\n+{\n+#pragma omp parallel\n+  {\n+    #pragma omp single\n+    {\n+      int i;\n+#pragma omp target\n+#pragma omp teams\n+#pragma omp distribute parallel for shared(a) firstprivate(n) private(i) firstprivate(j)\n+      THE_LOOP;\n+    }\n+  }\n+}\n+\n+void __attribute__((noinline, noclone))\n+bar (int j, int n, int *a)\n+{\n+  int i;\n+  THE_LOOP;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n = 32;\n+  int *a = __builtin_malloc (sizeof (int) * n);\n+  int *ref = __builtin_malloc (sizeof (int) * n);\n+  int i, j = 4;\n+\n+  __builtin_memset (a, 0, sizeof (int) * n);\n+  __builtin_memset (ref, 0, sizeof (int) * n);\n+  bar (j, n, ref);\n+  foo (j, n, a);\n+  for (i = 0; i < n; i ++)\n+    {\n+      if (a[i] != ref[i])\n+\t__builtin_abort ();\n+    }\n+  return 0;\n+}"}, {"sha": "a17be932111a74d459015d85da5a358a0d645245", "filename": "libgomp/testsuite/libgomp.hsa.c/memory-operations-1.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fmemory-operations-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fmemory-operations-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fmemory-operations-1.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,92 @@\n+#include <assert.h>\n+\n+#define C 55\n+\n+int i, j, k;\n+\n+static void\n+test_bzero (unsigned size)\n+{\n+  unsigned bsize = size * sizeof (int);\n+  int *x = __builtin_malloc (bsize);\n+  __builtin_memset (x, C, bsize);\n+\n+#pragma omp target map(tofrom: x[:size]) map(from: bsize)\n+  {\n+    __builtin_bzero (x, bsize);\n+  }\n+\n+  char *buffer = (char *) x;\n+  for (unsigned i = 0; i < bsize; ++i)\n+    assert (buffer[i] == 0);\n+}\n+\n+static void\n+test_memcpy (unsigned size)\n+{\n+  unsigned bsize = size * sizeof (int);\n+  int *x = __builtin_malloc (bsize);\n+  __builtin_memset (x, C, bsize);\n+  int *y = __builtin_malloc (bsize);\n+\n+#pragma omp target map(tofrom: x[:size], y[:size]) map(from: bsize)\n+  {\n+    __builtin_memcpy (y, x, bsize);\n+  }\n+\n+  char *buffer = (char *) y;\n+  for (unsigned i = 0; i < bsize; ++i)\n+    assert (buffer[i] == C);\n+}\n+\n+static void\n+test_mempcpy (unsigned size)\n+{\n+  unsigned bsize = size * sizeof (int);\n+  int *x = __builtin_malloc (bsize);\n+  __builtin_memset (x, C, bsize);\n+  int *y = __builtin_malloc (bsize);\n+  int *ptr = 0;\n+\n+#pragma omp target map(tofrom :x[:size], y[:size], ptr) map(from: bsize)\n+  {\n+    ptr = __builtin_mempcpy (y, x, bsize);\n+  }\n+\n+  char *buffer = (char *) y;\n+  for (unsigned i = 0; i < bsize; ++i)\n+    assert (buffer[i] == C);\n+\n+  assert (ptr == y + size);\n+}\n+\n+static void\n+test_memset (unsigned size)\n+{\n+  unsigned bsize = size * sizeof (int);\n+  int *x = __builtin_malloc (bsize);\n+  __builtin_bzero (x, bsize);\n+\n+#pragma omp target map(tofrom : x[:size]) map(from: bsize)\n+  {\n+    __builtin_memset (x, C, bsize);\n+  }\n+\n+  char *buffer = (char *) x;\n+  for (unsigned i = 0; i < bsize; ++i)\n+    assert (buffer[i] == C);\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned tests[] = {1, 2, 3, 4, 5, 8, 15, 17, 23, 33, 0};\n+\n+  for (unsigned i = 0; tests[i]; i++)\n+    {\n+      test_bzero (tests[i]);\n+      test_memset (tests[i]);\n+      test_memcpy (tests[i]);\n+      test_mempcpy (tests[i]);\n+    }\n+}"}, {"sha": "6262eee3e7108c5c0cea4fdfb35970d6a7fef1cb", "filename": "libgomp/testsuite/libgomp.hsa.c/pr69568.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fpr69568.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fpr69568.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fpr69568.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,41 @@\n+/* PR hsa/69568 */\n+\n+typedef float float2 __attribute__ ((vector_size (8)));\n+float2 *output;\n+\n+void __attribute__((noinline, noclone))\n+foo (int n, float2 *a, int workgroup_size)\n+{\n+  int i;\n+#pragma omp target map(from:a[:n]) firstprivate(n, workgroup_size)\n+#pragma omp teams thread_limit(workgroup_size)\n+#pragma omp distribute parallel for shared(a) firstprivate(n) private(i)\n+    for (i = 0; i < n; i++)\n+      { float2 v;\n+\tv[0] = i;\n+\tv[1] = 1+i;\n+\ta[i] = v;\n+      }\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  int n = 32;\n+  float2 *a = __builtin_malloc (sizeof (float2) * n);\n+  int i;\n+\n+  __builtin_memset (a, 0, sizeof (float2) * n);\n+  foo (n, a, 32);\n+  for (i = 0; i < n; i++)\n+    {\n+      float2 v = a[i];\n+      if (__builtin_abs (v[0] - i) > 0.1\n+\t  || __builtin_abs (v[1] - i - 1) > 0.1)\n+\t{\n+\t  __builtin_abort ();\n+\t  return 1;\n+\t}\n+    }\n+  return 0;\n+}\n+"}, {"sha": "494388bd10c27763f08ee3b88957cf25bcc42c45", "filename": "libgomp/testsuite/libgomp.hsa.c/rotate-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Frotate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Frotate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Frotate-1.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,39 @@\n+#include <assert.h>\n+#include <limits.h>\n+\n+#define T unsigned int\n+#define BITSIZE CHAR_BIT * sizeof (T)\n+\n+#define C1 123u\n+\n+#pragma omp declare target\n+T\n+rotate (T value, T shift)\n+{\n+  T r = (value << shift) | (value >> (BITSIZE - shift));\n+  return (r >> shift) | (r << (BITSIZE - shift));\n+}\n+#pragma omp end declare target\n+\n+int\n+main (int argc)\n+{\n+  T v1, v2, v3, v4, v5;\n+\n+#pragma omp target map(to: v1, v2, v3, v4, v5)\n+  {\n+    v1 = rotate (C1, 10);\n+    v2 = rotate (C1, 2);\n+    v3 = rotate (C1, 5);\n+    v4 = rotate (C1, 16);\n+    v5 = rotate (C1, 32);\n+  }\n+\n+  assert (v1 == C1);\n+  assert (v2 == C1);\n+  assert (v3 == C1);\n+  assert (v4 == C1);\n+  assert (v5 == C1);\n+\n+  return 0;\n+}"}, {"sha": "a180cf6cb7bcadae5d029b7f7d0f34b0ed1a10e7", "filename": "libgomp/testsuite/libgomp.hsa.c/switch-1.c", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fswitch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fswitch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fswitch-1.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,145 @@\n+#include <assert.h>\n+\n+#define s 100\n+\n+#pragma omp declare target\n+int\n+switch1 (int a)\n+{\n+  switch (a)\n+    {\n+    case 1:\n+      return 11;\n+    case 33:\n+      return 333;\n+    case 55:\n+      return 55;\n+    default:\n+      return -1;\n+    }\n+}\n+\n+int\n+switch2 (int a)\n+{\n+  switch (a)\n+    {\n+    case 1 ... 11:\n+      return 11;\n+      break;\n+    case 33:\n+      return 333;\n+      break;\n+    case 55:\n+      return 55;\n+      break;\n+    default:\n+      return -1;\n+    }\n+}\n+\n+int\n+switch3 (int a)\n+{\n+  switch (a)\n+    {\n+    case 1 ... 11:\n+      return 11;\n+    case 12 ... 22:\n+      return 22;\n+    case 23 ... 33:\n+      return 33;\n+    case 34 ... 44:\n+      return 44;\n+    default:\n+      return 44;\n+    }\n+}\n+\n+int\n+switch4 (int a, int b)\n+{\n+  switch (a)\n+    {\n+    case 1 ... 11:\n+      return a;\n+    case 12 ... 22:\n+      return b;\n+    case 23 ... 33:\n+      return a;\n+    case 34 ... 44:\n+      return b;\n+    default:\n+      return 12345;\n+    }\n+}\n+\n+int\n+switch5 (int a, int b)\n+{\n+  switch (a)\n+    {\n+    case 1 ... 2:\n+      return 1;\n+    case 3 ... 4:\n+      return 2;\n+    case 5 ... 6:\n+      return 3;\n+    case 7 ... 11:\n+      return 4;\n+    }\n+\n+  return -1;\n+}\n+#pragma omp end declare target\n+\n+int\n+main (int argc)\n+{\n+  int array[s];\n+\n+#pragma omp target map(tofrom : array[:s])\n+  {\n+    for (int i = 0; i < s; i++)\n+      array[i] = switch1 (i);\n+  }\n+\n+  for (int i = 0; i < s; i++)\n+    assert (array[i] == switch1 (i));\n+\n+#pragma omp target map(tofrom : array[:s])\n+  {\n+    for (int i = 0; i < s; i++)\n+      array[i] = switch2 (i);\n+  }\n+\n+  for (int i = 0; i < s; i++)\n+    assert (array[i] == switch2 (i));\n+\n+#pragma omp target map(tofrom : array[:s])\n+  {\n+    for (int i = 0; i < s; i++)\n+      array[i] = switch3 (i);\n+  }\n+\n+  for (int i = 0; i < s; i++)\n+    assert (array[i] == switch3 (i));\n+\n+#pragma omp target map(tofrom : array[:s])\n+  {\n+    for (int i = 0; i < s; i++)\n+      array[i] = switch4 (i, i + 1);\n+  }\n+\n+  for (int i = 0; i < s; i++)\n+    assert (array[i] == switch4 (i, i + 1));\n+\n+#pragma omp target map(tofrom : array[:s])\n+  {\n+    for (int i = 0; i < s; i++)\n+      array[i] = switch5 (i, i + 1);\n+  }\n+\n+  for (int i = 0; i < s; i++)\n+    assert (array[i] == switch5 (i, i + 1));\n+}"}, {"sha": "9af1d6d07623a5f79d62a7493acb98a729901591", "filename": "libgomp/testsuite/libgomp.hsa.c/switch-branch-1.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fswitch-branch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fswitch-branch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.hsa.c%2Fswitch-branch-1.c?ref=96a71bd53c4da5f3cb3c72c6f5c7f094ae92caed", "patch": "@@ -0,0 +1,116 @@\n+#include <assert.h>\n+\n+#define s 100\n+\n+#pragma omp declare target\n+int\n+switch1 (unsigned a)\n+{\n+  switch (a)\n+    {\n+    case 1 ... 11:\n+      return 11;\n+    case 12 ... 13:\n+      return 22;\n+    default:\n+      return 44;\n+    }\n+}\n+\n+int\n+switch2 (unsigned a)\n+{\n+  switch (a)\n+    {\n+    case 1 ... 5:\n+      return 1;\n+    case 9 ... 11:\n+      return a + 3;\n+    case 12 ... 13:\n+      return a + 3;\n+    default:\n+      return 44;\n+    }\n+}\n+\n+#define OFFSET 12\n+\n+int\n+switch3 (unsigned a)\n+{\n+  switch (a)\n+    {\n+    case (OFFSET + 0):\n+      return 1;\n+    case (OFFSET + 1)...(OFFSET + 11):\n+      return 11;\n+    case (OFFSET + 12)...(OFFSET + 13):\n+      return (OFFSET + 22);\n+    default:\n+      return (OFFSET + 44);\n+    }\n+}\n+\n+int\n+switch4 (unsigned a)\n+{\n+  switch (a)\n+    {\n+    case -2:\n+      return 1;\n+    case -1:\n+      return a + 3;\n+    case 3:\n+      return a + 3;\n+    default:\n+      return 44;\n+    }\n+}\n+#pragma omp end declare target\n+\n+#define low -33\n+#define high 55\n+\n+int\n+main (int argc)\n+{\n+  int array[s];\n+\n+#pragma omp target map(tofrom : array[:s])\n+  {\n+    for (int i = low; i < high; i++)\n+      array[i - low] = switch1 (i);\n+  }\n+\n+  for (int i = low; i < high; i++)\n+    assert (array[i - low] == switch1 (i));\n+\n+#pragma omp target map(tofrom : array[:s])\n+  {\n+    for (int i = low; i < high; i++)\n+      array[i - low] = switch2 (i);\n+  }\n+\n+  for (int i = low; i < high; i++)\n+    assert (array[i - low] == switch2 (i));\n+\n+#pragma omp target map(tofrom : array[:s])\n+  {\n+    for (int i = low; i < high; i++)\n+      array[i - low] = switch3 (i);\n+  }\n+\n+  for (int i = low; i < high; i++)\n+    assert (array[i - low] == switch3 (i));\n+\n+#pragma omp target map(tofrom : array[:s])\n+  {\n+    for (int i = low; i < high; i++)\n+      array[i - low] = switch4 (i);\n+  }\n+\n+  for (int i = low; i < high; i++)\n+    assert (array[i - low] == switch4 (i));\n+\n+  return 0;\n+}"}]}