{"sha": "56b871c1352f5d6dd21c816d1b69bf946def00e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZiODcxYzEzNTJmNWQ2ZGQyMWM4MTZkMWI2OWJmOTQ2ZGVmMDBlNw==", "commit": {"author": {"name": "Denis Chertykov", "email": "denisc@overta.ru", "date": "2001-01-21T07:08:46Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2001-01-21T07:08:46Z"}, "message": "avr.c (ret_cond_branch): New argument (reverse) added.\n\n\t* config/avr/avr.c (ret_cond_branch): New argument (reverse) added.\n\tIf REVERSE nonzero then condition code in X must be reversed.\n\t(encode_section_info): Optimise if/else.\n\t(avr_function_value): Fix formatting.\n\n\t* config/avr/avr.md (branch): Call to ret_cond_branch changed.\n\t(difficult_branch): Likewise.\n\t(rvbranch): Likewise.\n\t(difficult_rvbranch): Likewise.\n\n\t* config/avr/avr-protos.h (ret_cond_branch): Prototype changed.\n\n\t* config/avr/libgcc.S: Fix comment.\n\nFrom-SVN: r39163", "tree": {"sha": "40d08afcc586facc471c8402b39f7ee58932d1f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40d08afcc586facc471c8402b39f7ee58932d1f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56b871c1352f5d6dd21c816d1b69bf946def00e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b871c1352f5d6dd21c816d1b69bf946def00e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b871c1352f5d6dd21c816d1b69bf946def00e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b871c1352f5d6dd21c816d1b69bf946def00e7/comments", "author": null, "committer": null, "parents": [{"sha": "04e91ffb1ed4860cc39a272d7f104d545cda2200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e91ffb1ed4860cc39a272d7f104d545cda2200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e91ffb1ed4860cc39a272d7f104d545cda2200"}], "stats": {"total": 92, "additions": 63, "deletions": 29}, "files": [{"sha": "b0f77270d418b34dc45bc276d23e8e9f89cf382d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b871c1352f5d6dd21c816d1b69bf946def00e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b871c1352f5d6dd21c816d1b69bf946def00e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56b871c1352f5d6dd21c816d1b69bf946def00e7", "patch": "@@ -1,3 +1,19 @@\n+Sun Jan 21 09:44:17 2001  Denis Chertykov  <denisc@overta.ru>\n+\n+\t* config/avr/avr.c (ret_cond_branch): New argument (reverse) added.\n+\tIf REVERSE nonzero then condition code in X must be reversed.\n+\t(encode_section_info): Optimise if/else.\n+\t(avr_function_value): Fix formatting.\n+\n+\t* config/avr/avr.md (branch): Call to ret_cond_branch changed.\n+\t(difficult_branch): Likewise.\n+\t(rvbranch): Likewise.\n+\t(difficult_rvbranch): Likewise.\n+\n+\t* config/avr/avr-protos.h (ret_cond_branch): Prototype changed.\n+\n+\t* config/avr/libgcc.S: Fix comment.\n+\n 2001-01-20  Michael Sokolov  <msokolov@ivan.Harhan.ORG>\n \n \t* sdbout.c (PUT_SDB_DEF): Fix after last bogus change."}, {"sha": "c7f55397025b00634f53816700dd82092b1b35b0", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b871c1352f5d6dd21c816d1b69bf946def00e7/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b871c1352f5d6dd21c816d1b69bf946def00e7/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=56b871c1352f5d6dd21c816d1b69bf946def00e7", "patch": "@@ -95,7 +95,7 @@ extern const char * out_movsi_mr_r  PARAMS ((rtx insn, rtx op[], int *l));\n extern const char * output_movsisf  PARAMS ((rtx insn, rtx operands[], int *l));\n extern const char * out_tstsi       PARAMS ((rtx insn, int *l));\n extern const char * out_tsthi       PARAMS ((rtx insn, int *l));\n-extern const char * ret_cond_branch PARAMS ((RTX_CODE cond, int len));\n+extern const char * ret_cond_branch PARAMS ((rtx x, int len, int reverse));\n \n extern const char * ashlqi3_out PARAMS ((rtx insn, rtx operands[], int *len));\n extern const char * ashlhi3_out PARAMS ((rtx insn, rtx operands[], int *len));"}, {"sha": "3dc112353c4f42a6c19589ae2020821cd30474cc", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 41, "deletions": 19, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b871c1352f5d6dd21c816d1b69bf946def00e7/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b871c1352f5d6dd21c816d1b69bf946def00e7/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=56b871c1352f5d6dd21c816d1b69bf946def00e7", "patch": "@@ -1194,14 +1194,19 @@ avr_jump_mode (x, insn)\n   return 2;\n }\n \n-/* return a AVR condition jump commands.\n- LEN is a number returned by avr_jump_mode function.  */\n+/* return an AVR condition jump commands.\n+   X is a comparison RTX.\n+   LEN is a number returned by avr_jump_mode function.\n+   if REVERSE nonzero then condition code in X must be reversed.  */\n \n const char *\n-ret_cond_branch (cond, len)\n-     RTX_CODE cond;\n+ret_cond_branch (x, len, reverse)\n+     rtx x;\n      int len;\n+     int reverse;\n {\n+  RTX_CODE cond = reverse ? reverse_condition (GET_CODE (x)) : GET_CODE (x);\n+  \n   switch (cond)\n     {\n     case GT:\n@@ -1262,17 +1267,34 @@ ret_cond_branch (cond, len)\n                AS1 (brsh,_PC_+4) CR_TAB\n \t       AS1 (jmp,%0)));\n     default:\n-      switch (len)\n-        {\n-        case 1:\n-          return AS1 (br%j1,%0);\n-        case 2:\n-          return (AS1 (br%k1,_PC_+2) CR_TAB\n-                  AS1 (rjmp,%0));\n-        default:\n-          return (AS1 (br%k1,_PC_+4) CR_TAB\n-                  AS1 (jmp,%0));\n-        }\n+      if (reverse)\n+\t{\n+\t  switch (len)\n+\t    {\n+\t    case 1:\n+\t      return AS1 (br%k1,%0);\n+\t    case 2:\n+\t      return (AS1 (br%j1,_PC_+2) CR_TAB\n+\t\t      AS1 (rjmp,%0));\n+\t    default:\n+\t      return (AS1 (br%j1,_PC_+4) CR_TAB\n+\t\t      AS1 (jmp,%0));\n+\t    }\n+\t}\n+\telse\n+\t  {\n+\t    switch (len)\n+\t      {\n+\t      case 1:\n+\t\treturn AS1 (br%j1,%0);\n+\t      case 2:\n+\t\treturn (AS1 (br%k1,_PC_+2) CR_TAB\n+\t\t\tAS1 (rjmp,%0));\n+\t      default:\n+\t\treturn (AS1 (br%k1,_PC_+4) CR_TAB\n+\t\t\tAS1 (jmp,%0));\n+\t      }\n+\t  }\n     }\n   return \"\";\n }\n@@ -4736,10 +4758,9 @@ encode_section_info (decl)\n {\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n-\n-  if ((TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n-      && TREE_CODE (decl) == VAR_DECL\n-      && avr_progmem_p (decl))\n+  else if ((TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n+\t   && TREE_CODE (decl) == VAR_DECL\n+\t   && avr_progmem_p (decl))\n     {\n       const char *dsec = \".progmem.data\";\n       DECL_SECTION_NAME (decl) = build_string (strlen (dsec), dsec);\n@@ -5102,6 +5123,7 @@ avr_function_value (type, func)\n      tree func ATTRIBUTE_UNUSED;\n {\n   unsigned int offs;\n+  \n   if (TYPE_MODE (type) != BLKmode)\n     return avr_libcall_value (TYPE_MODE (type));\n   "}, {"sha": "cd72f1014dc601a466784a9a1b6f6b13eda43377", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b871c1352f5d6dd21c816d1b69bf946def00e7/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b871c1352f5d6dd21c816d1b69bf946def00e7/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=56b871c1352f5d6dd21c816d1b69bf946def00e7", "patch": "@@ -1937,8 +1937,7 @@\n   \"! (GET_CODE (operands[1]) == GT || GET_CODE (operands[1]) == GTU\n       || GET_CODE (operands[1]) == LE || GET_CODE (operands[1]) == LEU)\"\n   \"*\n-   return ret_cond_branch (GET_CODE (operands[1]),\n-                           avr_jump_mode (operands[0],insn));\"\n+   return ret_cond_branch (operands[1], avr_jump_mode (operands[0],insn), 0);\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -1952,8 +1951,7 @@\n   \"(GET_CODE (operands[1]) == GT || GET_CODE (operands[1]) == GTU\n     || GET_CODE (operands[1]) == LE || GET_CODE (operands[1]) == LEU)\"\n   \"*\n-   return ret_cond_branch (GET_CODE (operands[1]),\n-                           avr_jump_mode (operands[0],insn));\"\n+   return ret_cond_branch (operands[1], avr_jump_mode (operands[0],insn), 0);\"\n   [(set_attr \"type\" \"branch1\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -1968,8 +1966,7 @@\n   \"! (GET_CODE (operands[1]) == GT || GET_CODE (operands[1]) == GTU\n       || GET_CODE (operands[1]) == LE || GET_CODE (operands[1]) == LEU)\"\n   \"*\n-   return ret_cond_branch (reverse_condition (GET_CODE (operands[1])),\n-                           avr_jump_mode (operands[0],insn));\"\n+   return ret_cond_branch (operands[1], avr_jump_mode (operands[0], insn), 1);\"\n   [(set_attr \"type\" \"branch1\")\n    (set_attr \"cc\" \"clobber\")])\n \n@@ -1982,8 +1979,7 @@\n   \"(GET_CODE (operands[1]) == GT || GET_CODE (operands[1]) == GTU\n     || GET_CODE (operands[1]) == LE || GET_CODE (operands[1]) == LEU)\"\n   \"*\n-   return ret_cond_branch (reverse_condition (GET_CODE (operands[1])),\n-                           avr_jump_mode (operands[0],insn));\"\n+   return ret_cond_branch (operands[1], avr_jump_mode (operands[0], insn), 1);\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"cc\" \"clobber\")])\n "}, {"sha": "cdf2c3f4ee1f0f7374f97858c9f29e24bc33aa32", "filename": "gcc/config/avr/libgcc.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56b871c1352f5d6dd21c816d1b69bf946def00e7/gcc%2Fconfig%2Favr%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56b871c1352f5d6dd21c816d1b69bf946def00e7/gcc%2Fconfig%2Favr%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Flibgcc.S?ref=56b871c1352f5d6dd21c816d1b69bf946def00e7", "patch": "@@ -597,7 +597,7 @@ __prologue_saves__:\n #endif /* defined (L_prologue) */\n \n /*\n- * This is a epilogue subroutine\n+ * This is an epilogue subroutine\n  */\n #if defined (L_epilogue)\n "}]}