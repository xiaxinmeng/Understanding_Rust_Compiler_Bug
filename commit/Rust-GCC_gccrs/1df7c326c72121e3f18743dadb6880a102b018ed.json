{"sha": "1df7c326c72121e3f18743dadb6880a102b018ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRmN2MzMjZjNzIxMjFlM2YxODc0M2RhZGI2ODgwYTEwMmIwMThlZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-16T13:52:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-16T13:52:44Z"}, "message": "[multiple changes]\n\n2015-10-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* aspects.adb Add an entry for Constant_After_Elaboration in\n\ttable Canonical_Aspect.\n\t* aspects.ads Add entries for Constant_After_Elaboration in\n\ttables Aspect_Argument, Aspect_Delay, Aspect_Id, Aspect_Names\n\tand Implementation_Defined_Aspect.\n\t* par-prag.adb Pragma Constant_After_Elaboration does not require\n\tspecial processing by the parser.\n\t* sem_ch13.adb Add an entry for Constant_After_Elaboration\n\tin table Sig_Flags.\n\t(Analyze_Aspect_Specifications):\n\tAdd processing for aspect Constant_After_Elaboration.\n\t(Check_Aspect_At_Freeze_Point): Aspect Constant_After_Elaboration\n\tdoes not require special processing at freeze time.\n\t* sem_prag.adb (Analyze_Pragma): Add processing for pragma\n\tConstant_After_Elaboration. Use routine Find_Related_Context to\n\tretrieve the context of pragma Part_Of.\n\t(Duplication_Error): Update comment on usage.\n\t(Find_Related_Context): New routine.\n\t* sem_prag.ads Add an entry for Constant_After_Elaboration\n\tin table Aspect_Specifying_Pragma.\n\t(Analyze_Contract_Cases_In_Decl_Part): Update the comment on usage.\n\t* sem_util.adb (Add_Contract_Item): Add processing for pragma\n\tConstant_After_Elaboration.\n\t* sem_util.ads (Add_Contract_Item): Update the comment on usage.\n\t* snames.ads-tmpl Add new predefined name and aspect id for\n\tConstant_After_Elaboration.\n\n2015-10-16  Vincent Celier  <celier@adacore.com>\n\n\t* prj-pp.adb (Pretty_Print.Print): Correctly display extending\n\tpackages, instead of making them renamed packages.\n\nFrom-SVN: r228911", "tree": {"sha": "71f80c67a9c6665c660a3abe4f1a267625f0ea3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71f80c67a9c6665c660a3abe4f1a267625f0ea3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1df7c326c72121e3f18743dadb6880a102b018ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df7c326c72121e3f18743dadb6880a102b018ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df7c326c72121e3f18743dadb6880a102b018ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df7c326c72121e3f18743dadb6880a102b018ed/comments", "author": null, "committer": null, "parents": [{"sha": "e1e307d94145e51d9a06448466fbb1a535c89a38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1e307d94145e51d9a06448466fbb1a535c89a38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1e307d94145e51d9a06448466fbb1a535c89a38"}], "stats": {"total": 545, "additions": 366, "deletions": 179}, "files": [{"sha": "c3d425d26cfd4bacaeb4b72f0ea05530d88daa55", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1df7c326c72121e3f18743dadb6880a102b018ed", "patch": "@@ -1,3 +1,37 @@\n+2015-10-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* aspects.adb Add an entry for Constant_After_Elaboration in\n+\ttable Canonical_Aspect.\n+\t* aspects.ads Add entries for Constant_After_Elaboration in\n+\ttables Aspect_Argument, Aspect_Delay, Aspect_Id, Aspect_Names\n+\tand Implementation_Defined_Aspect.\n+\t* par-prag.adb Pragma Constant_After_Elaboration does not require\n+\tspecial processing by the parser.\n+\t* sem_ch13.adb Add an entry for Constant_After_Elaboration\n+\tin table Sig_Flags.\n+\t(Analyze_Aspect_Specifications):\n+\tAdd processing for aspect Constant_After_Elaboration.\n+\t(Check_Aspect_At_Freeze_Point): Aspect Constant_After_Elaboration\n+\tdoes not require special processing at freeze time.\n+\t* sem_prag.adb (Analyze_Pragma): Add processing for pragma\n+\tConstant_After_Elaboration. Use routine Find_Related_Context to\n+\tretrieve the context of pragma Part_Of.\n+\t(Duplication_Error): Update comment on usage.\n+\t(Find_Related_Context): New routine.\n+\t* sem_prag.ads Add an entry for Constant_After_Elaboration\n+\tin table Aspect_Specifying_Pragma.\n+\t(Analyze_Contract_Cases_In_Decl_Part): Update the comment on usage.\n+\t* sem_util.adb (Add_Contract_Item): Add processing for pragma\n+\tConstant_After_Elaboration.\n+\t* sem_util.ads (Add_Contract_Item): Update the comment on usage.\n+\t* snames.ads-tmpl Add new predefined name and aspect id for\n+\tConstant_After_Elaboration.\n+\n+2015-10-16  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-pp.adb (Pretty_Print.Print): Correctly display extending\n+\tpackages, instead of making them renamed packages.\n+\n 2015-10-16  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch12.adb (Analyze_Package_Instantiation):"}, {"sha": "b945a8befb4431299f5e8cf3c50db1b54597fd94", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=1df7c326c72121e3f18743dadb6880a102b018ed", "patch": "@@ -505,6 +505,7 @@ package body Aspects is\n     Aspect_Attach_Handler               => Aspect_Attach_Handler,\n     Aspect_Bit_Order                    => Aspect_Bit_Order,\n     Aspect_Component_Size               => Aspect_Component_Size,\n+    Aspect_Constant_After_Elaboration   => Aspect_Constant_After_Elaboration,\n     Aspect_Constant_Indexing            => Aspect_Constant_Indexing,\n     Aspect_Contract_Cases               => Aspect_Contract_Cases,\n     Aspect_Convention                   => Aspect_Convention,"}, {"sha": "2d71394e149ff75d452de3e17a3c77c66b42696e", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 119, "deletions": 114, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=1df7c326c72121e3f18743dadb6880a102b018ed", "patch": "@@ -81,6 +81,7 @@ package Aspects is\n       Aspect_Attach_Handler,\n       Aspect_Bit_Order,\n       Aspect_Component_Size,\n+      Aspect_Constant_After_Elaboration,    -- GNAT\n       Aspect_Constant_Indexing,\n       Aspect_Contract_Cases,                -- GNAT\n       Aspect_Convention,\n@@ -226,44 +227,45 @@ package Aspects is\n    --  The following array identifies all implementation defined aspects\n \n    Implementation_Defined_Aspect : constant array (Aspect_Id) of Boolean :=\n-     (Aspect_Abstract_State           => True,\n-      Aspect_Annotate                 => True,\n-      Aspect_Async_Readers            => True,\n-      Aspect_Async_Writers            => True,\n-      Aspect_Contract_Cases           => True,\n-      Aspect_Depends                  => True,\n-      Aspect_Dimension                => True,\n-      Aspect_Dimension_System         => True,\n-      Aspect_Effective_Reads          => True,\n-      Aspect_Effective_Writes         => True,\n-      Aspect_Extensions_Visible       => True,\n-      Aspect_Favor_Top_Level          => True,\n-      Aspect_Ghost                    => True,\n-      Aspect_Global                   => True,\n-      Aspect_Inline_Always            => True,\n-      Aspect_Invariant                => True,\n-      Aspect_Lock_Free                => True,\n-      Aspect_Object_Size              => True,\n-      Aspect_Persistent_BSS           => True,\n-      Aspect_Predicate                => True,\n-      Aspect_Pure_Function            => True,\n-      Aspect_Remote_Access_Type       => True,\n-      Aspect_Scalar_Storage_Order     => True,\n-      Aspect_Shared                   => True,\n-      Aspect_Simple_Storage_Pool      => True,\n-      Aspect_Simple_Storage_Pool_Type => True,\n-      Aspect_Suppress_Debug_Info      => True,\n-      Aspect_Suppress_Initialization  => True,\n-      Aspect_Thread_Local_Storage     => True,\n-      Aspect_Test_Case                => True,\n-      Aspect_Universal_Aliasing       => True,\n-      Aspect_Universal_Data           => True,\n-      Aspect_Unmodified               => True,\n-      Aspect_Unreferenced             => True,\n-      Aspect_Unreferenced_Objects     => True,\n-      Aspect_Value_Size               => True,\n-      Aspect_Warnings                 => True,\n-      others                          => False);\n+     (Aspect_Abstract_State             => True,\n+      Aspect_Annotate                   => True,\n+      Aspect_Async_Readers              => True,\n+      Aspect_Async_Writers              => True,\n+      Aspect_Constant_After_Elaboration => True,\n+      Aspect_Contract_Cases             => True,\n+      Aspect_Depends                    => True,\n+      Aspect_Dimension                  => True,\n+      Aspect_Dimension_System           => True,\n+      Aspect_Effective_Reads            => True,\n+      Aspect_Effective_Writes           => True,\n+      Aspect_Extensions_Visible         => True,\n+      Aspect_Favor_Top_Level            => True,\n+      Aspect_Ghost                      => True,\n+      Aspect_Global                     => True,\n+      Aspect_Inline_Always              => True,\n+      Aspect_Invariant                  => True,\n+      Aspect_Lock_Free                  => True,\n+      Aspect_Object_Size                => True,\n+      Aspect_Persistent_BSS             => True,\n+      Aspect_Predicate                  => True,\n+      Aspect_Pure_Function              => True,\n+      Aspect_Remote_Access_Type         => True,\n+      Aspect_Scalar_Storage_Order       => True,\n+      Aspect_Shared                     => True,\n+      Aspect_Simple_Storage_Pool        => True,\n+      Aspect_Simple_Storage_Pool_Type   => True,\n+      Aspect_Suppress_Debug_Info        => True,\n+      Aspect_Suppress_Initialization    => True,\n+      Aspect_Thread_Local_Storage       => True,\n+      Aspect_Test_Case                  => True,\n+      Aspect_Universal_Aliasing         => True,\n+      Aspect_Universal_Data             => True,\n+      Aspect_Unmodified                 => True,\n+      Aspect_Unreferenced               => True,\n+      Aspect_Unreferenced_Objects       => True,\n+      Aspect_Value_Size                 => True,\n+      Aspect_Warnings                   => True,\n+      others                            => False);\n \n    --  The following array indicates aspects for which multiple occurrences of\n    --  the same aspect attached to the same declaration are allowed.\n@@ -305,82 +307,83 @@ package Aspects is\n    --  The following array indicates what argument type is required\n \n    Aspect_Argument : constant array (Aspect_Id) of Aspect_Expression :=\n-     (No_Aspect                        => Optional_Expression,\n-      Aspect_Abstract_State            => Expression,\n-      Aspect_Address                   => Expression,\n-      Aspect_Alignment                 => Expression,\n-      Aspect_Annotate                  => Expression,\n-      Aspect_Attach_Handler            => Expression,\n-      Aspect_Bit_Order                 => Expression,\n-      Aspect_Component_Size            => Expression,\n-      Aspect_Constant_Indexing         => Name,\n-      Aspect_Contract_Cases            => Expression,\n-      Aspect_Convention                => Name,\n-      Aspect_CPU                       => Expression,\n-      Aspect_Default_Component_Value   => Expression,\n-      Aspect_Default_Initial_Condition => Optional_Expression,\n-      Aspect_Default_Iterator          => Name,\n-      Aspect_Default_Storage_Pool      => Expression,\n-      Aspect_Default_Value             => Expression,\n-      Aspect_Depends                   => Expression,\n-      Aspect_Dimension                 => Expression,\n-      Aspect_Dimension_System          => Expression,\n-      Aspect_Dispatching_Domain        => Expression,\n-      Aspect_Dynamic_Predicate         => Expression,\n-      Aspect_Extensions_Visible        => Optional_Expression,\n-      Aspect_External_Name             => Expression,\n-      Aspect_External_Tag              => Expression,\n-      Aspect_Ghost                     => Optional_Expression,\n-      Aspect_Global                    => Expression,\n-      Aspect_Implicit_Dereference      => Name,\n-      Aspect_Initial_Condition         => Expression,\n-      Aspect_Initializes               => Expression,\n-      Aspect_Input                     => Name,\n-      Aspect_Interrupt_Priority        => Expression,\n-      Aspect_Invariant                 => Expression,\n-      Aspect_Iterable                  => Expression,\n-      Aspect_Iterator_Element          => Name,\n-      Aspect_Link_Name                 => Expression,\n-      Aspect_Linker_Section            => Expression,\n-      Aspect_Machine_Radix             => Expression,\n-      Aspect_Object_Size               => Expression,\n-      Aspect_Obsolescent               => Optional_Expression,\n-      Aspect_Output                    => Name,\n-      Aspect_Part_Of                   => Expression,\n-      Aspect_Post                      => Expression,\n-      Aspect_Postcondition             => Expression,\n-      Aspect_Pre                       => Expression,\n-      Aspect_Precondition              => Expression,\n-      Aspect_Predicate                 => Expression,\n-      Aspect_Priority                  => Expression,\n-      Aspect_Read                      => Name,\n-      Aspect_Refined_Depends           => Expression,\n-      Aspect_Refined_Global            => Expression,\n-      Aspect_Refined_Post              => Expression,\n-      Aspect_Refined_State             => Expression,\n-      Aspect_Relative_Deadline         => Expression,\n-      Aspect_Scalar_Storage_Order      => Expression,\n-      Aspect_Simple_Storage_Pool       => Name,\n-      Aspect_Size                      => Expression,\n-      Aspect_Small                     => Expression,\n-      Aspect_SPARK_Mode                => Optional_Name,\n-      Aspect_Static_Predicate          => Expression,\n-      Aspect_Storage_Pool              => Name,\n-      Aspect_Storage_Size              => Expression,\n-      Aspect_Stream_Size               => Expression,\n-      Aspect_Suppress                  => Name,\n-      Aspect_Synchronization           => Name,\n-      Aspect_Test_Case                 => Expression,\n-      Aspect_Type_Invariant            => Expression,\n-      Aspect_Unimplemented             => Optional_Expression,\n-      Aspect_Unsuppress                => Name,\n-      Aspect_Value_Size                => Expression,\n-      Aspect_Variable_Indexing         => Name,\n-      Aspect_Warnings                  => Name,\n-      Aspect_Write                     => Name,\n-\n-      Boolean_Aspects                  => Optional_Expression,\n-      Library_Unit_Aspects             => Optional_Expression);\n+     (No_Aspect                         => Optional_Expression,\n+      Aspect_Abstract_State             => Expression,\n+      Aspect_Address                    => Expression,\n+      Aspect_Alignment                  => Expression,\n+      Aspect_Annotate                   => Expression,\n+      Aspect_Attach_Handler             => Expression,\n+      Aspect_Bit_Order                  => Expression,\n+      Aspect_Component_Size             => Expression,\n+      Aspect_Constant_After_Elaboration => Optional_Expression,\n+      Aspect_Constant_Indexing          => Name,\n+      Aspect_Contract_Cases             => Expression,\n+      Aspect_Convention                 => Name,\n+      Aspect_CPU                        => Expression,\n+      Aspect_Default_Component_Value    => Expression,\n+      Aspect_Default_Initial_Condition  => Optional_Expression,\n+      Aspect_Default_Iterator           => Name,\n+      Aspect_Default_Storage_Pool       => Expression,\n+      Aspect_Default_Value              => Expression,\n+      Aspect_Depends                    => Expression,\n+      Aspect_Dimension                  => Expression,\n+      Aspect_Dimension_System           => Expression,\n+      Aspect_Dispatching_Domain         => Expression,\n+      Aspect_Dynamic_Predicate          => Expression,\n+      Aspect_Extensions_Visible         => Optional_Expression,\n+      Aspect_External_Name              => Expression,\n+      Aspect_External_Tag               => Expression,\n+      Aspect_Ghost                      => Optional_Expression,\n+      Aspect_Global                     => Expression,\n+      Aspect_Implicit_Dereference       => Name,\n+      Aspect_Initial_Condition          => Expression,\n+      Aspect_Initializes                => Expression,\n+      Aspect_Input                      => Name,\n+      Aspect_Interrupt_Priority         => Expression,\n+      Aspect_Invariant                  => Expression,\n+      Aspect_Iterable                   => Expression,\n+      Aspect_Iterator_Element           => Name,\n+      Aspect_Link_Name                  => Expression,\n+      Aspect_Linker_Section             => Expression,\n+      Aspect_Machine_Radix              => Expression,\n+      Aspect_Object_Size                => Expression,\n+      Aspect_Obsolescent                => Optional_Expression,\n+      Aspect_Output                     => Name,\n+      Aspect_Part_Of                    => Expression,\n+      Aspect_Post                       => Expression,\n+      Aspect_Postcondition              => Expression,\n+      Aspect_Pre                        => Expression,\n+      Aspect_Precondition               => Expression,\n+      Aspect_Predicate                  => Expression,\n+      Aspect_Priority                   => Expression,\n+      Aspect_Read                       => Name,\n+      Aspect_Refined_Depends            => Expression,\n+      Aspect_Refined_Global             => Expression,\n+      Aspect_Refined_Post               => Expression,\n+      Aspect_Refined_State              => Expression,\n+      Aspect_Relative_Deadline          => Expression,\n+      Aspect_Scalar_Storage_Order       => Expression,\n+      Aspect_Simple_Storage_Pool        => Name,\n+      Aspect_Size                       => Expression,\n+      Aspect_Small                      => Expression,\n+      Aspect_SPARK_Mode                 => Optional_Name,\n+      Aspect_Static_Predicate           => Expression,\n+      Aspect_Storage_Pool               => Name,\n+      Aspect_Storage_Size               => Expression,\n+      Aspect_Stream_Size                => Expression,\n+      Aspect_Suppress                   => Name,\n+      Aspect_Synchronization            => Name,\n+      Aspect_Test_Case                  => Expression,\n+      Aspect_Type_Invariant             => Expression,\n+      Aspect_Unimplemented              => Optional_Expression,\n+      Aspect_Unsuppress                 => Name,\n+      Aspect_Value_Size                 => Expression,\n+      Aspect_Variable_Indexing          => Name,\n+      Aspect_Warnings                   => Name,\n+      Aspect_Write                      => Name,\n+\n+      Boolean_Aspects                   => Optional_Expression,\n+      Library_Unit_Aspects              => Optional_Expression);\n \n    -----------------------------------------\n    -- Table Linking Names and Aspect_Id's --\n@@ -403,6 +406,7 @@ package Aspects is\n       Aspect_Attach_Handler               => Name_Attach_Handler,\n       Aspect_Bit_Order                    => Name_Bit_Order,\n       Aspect_Component_Size               => Name_Component_Size,\n+      Aspect_Constant_After_Elaboration   => Name_Constant_After_Elaboration,\n       Aspect_Constant_Indexing            => Name_Constant_Indexing,\n       Aspect_Contract_Cases               => Name_Contract_Cases,\n       Aspect_Convention                   => Name_Convention,\n@@ -700,6 +704,7 @@ package Aspects is\n       Aspect_Annotate                     => Never_Delay,\n       Aspect_Async_Readers                => Never_Delay,\n       Aspect_Async_Writers                => Never_Delay,\n+      Aspect_Constant_After_Elaboration   => Never_Delay,\n       Aspect_Contract_Cases               => Never_Delay,\n       Aspect_Convention                   => Never_Delay,\n       Aspect_Default_Initial_Condition    => Never_Delay,"}, {"sha": "bcb8adde67853285f7fd54bc1bbc74e2b4ff58bc", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=1df7c326c72121e3f18743dadb6880a102b018ed", "patch": "@@ -1304,6 +1304,7 @@ begin\n            Pragma_Check_Policy                   |\n            Pragma_Compile_Time_Error             |\n            Pragma_Compile_Time_Warning           |\n+           Pragma_Constant_After_Elaboration     |\n            Pragma_Contract_Cases                 |\n            Pragma_Convention_Identifier          |\n            Pragma_CPP_Class                      |"}, {"sha": "2b05eaadefb5078214301af9d96798f1d236ab35", "filename": "gcc/ada/prj-pp.adb", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fprj-pp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fprj-pp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-pp.adb?ref=1df7c326c72121e3f18743dadb6880a102b018ed", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -522,14 +522,27 @@ package body Prj.PP is\n                   if Project_Of_Renamed_Package_Of (Node, In_Tree) /=\n                        Empty_Node\n                   then\n-                     Write_String (\" renames \", Indent);\n+                     if First_Declarative_Item_Of (Node, In_Tree) = Empty_Node\n+                     then\n+                        Write_String (\" renames \", Indent);\n+                     else\n+                        Write_String (\" extends \", Indent);\n+                     end if;\n+\n                      Output_Name\n                        (Name_Of\n                           (Project_Of_Renamed_Package_Of (Node, In_Tree),\n                            In_Tree),\n                         Indent);\n                      Write_String (\".\", Indent);\n                      Output_Name (Name_Of (Node, In_Tree), Indent);\n+                  end if;\n+\n+                  if Project_Of_Renamed_Package_Of (Node, In_Tree) /=\n+                      Empty_Node\n+                    and then\n+                     First_Declarative_Item_Of (Node, In_Tree) = Empty_Node\n+                  then\n                      Write_String (\";\", Indent);\n                      Write_End_Of_Line_Comment (Node);\n                      Print (First_Comment_After_End (Node, In_Tree), Indent);"}, {"sha": "c1c713202a9954be5eabdd8bc333545ddd240192", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 43, "deletions": 26, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=1df7c326c72121e3f18743dadb6880a102b018ed", "patch": "@@ -2263,6 +2263,22 @@ package body Sem_Ch13 is\n                   goto Continue;\n                end Abstract_State;\n \n+               --  Aspect Constant_After_Elaboration is never delayed because\n+               --  it is equivalent to a source pragma which appears after the\n+               --  related object declaration.\n+\n+               when Aspect_Constant_After_Elaboration =>\n+                  Make_Aitem_Pragma\n+                    (Pragma_Argument_Associations => New_List (\n+                       Make_Pragma_Argument_Association (Loc,\n+                         Expression => Relocate_Node (Expr))),\n+                     Pragma_Name                  =>\n+                       Name_Constant_After_Elaboration);\n+\n+                  Decorate (Aspect, Aitem);\n+                  Insert_Pragma (Aitem);\n+                  goto Continue;\n+\n                --  Aspect Default_Internal_Condition is never delayed because\n                --  it is equivalent to a source pragma which appears after the\n                --  related private type. To deal with forward references, the\n@@ -9246,32 +9262,33 @@ package body Sem_Ch13 is\n \n          --  Here is the list of aspects that don't require delay analysis\n \n-         when Aspect_Abstract_State            |\n-              Aspect_Annotate                  |\n-              Aspect_Contract_Cases            |\n-              Aspect_Default_Initial_Condition |\n-              Aspect_Depends                   |\n-              Aspect_Dimension                 |\n-              Aspect_Dimension_System          |\n-              Aspect_Extensions_Visible        |\n-              Aspect_Ghost                     |\n-              Aspect_Global                    |\n-              Aspect_Implicit_Dereference      |\n-              Aspect_Initial_Condition         |\n-              Aspect_Initializes               |\n-              Aspect_Obsolescent               |\n-              Aspect_Part_Of                   |\n-              Aspect_Post                      |\n-              Aspect_Postcondition             |\n-              Aspect_Pre                       |\n-              Aspect_Precondition              |\n-              Aspect_Refined_Depends           |\n-              Aspect_Refined_Global            |\n-              Aspect_Refined_Post              |\n-              Aspect_Refined_State             |\n-              Aspect_SPARK_Mode                |\n-              Aspect_Test_Case                 |\n-              Aspect_Unimplemented             =>\n+         when Aspect_Abstract_State             |\n+              Aspect_Annotate                   |\n+              Aspect_Constant_After_Elaboration |\n+              Aspect_Contract_Cases             |\n+              Aspect_Default_Initial_Condition  |\n+              Aspect_Depends                    |\n+              Aspect_Dimension                  |\n+              Aspect_Dimension_System           |\n+              Aspect_Extensions_Visible         |\n+              Aspect_Ghost                      |\n+              Aspect_Global                     |\n+              Aspect_Implicit_Dereference       |\n+              Aspect_Initial_Condition          |\n+              Aspect_Initializes                |\n+              Aspect_Obsolescent                |\n+              Aspect_Part_Of                    |\n+              Aspect_Post                       |\n+              Aspect_Postcondition              |\n+              Aspect_Pre                        |\n+              Aspect_Precondition               |\n+              Aspect_Refined_Depends            |\n+              Aspect_Refined_Global             |\n+              Aspect_Refined_Post               |\n+              Aspect_Refined_State              |\n+              Aspect_SPARK_Mode                 |\n+              Aspect_Test_Case                  |\n+              Aspect_Unimplemented              =>\n             raise Program_Error;\n \n       end case;"}, {"sha": "b2e0f113bfccced29a2d10ebc2a76d9808df849f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 146, "deletions": 36, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=1df7c326c72121e3f18743dadb6880a102b018ed", "patch": "@@ -200,9 +200,17 @@ package body Sem_Prag is\n    --  context denoted by Context. If this is the case, emit an error.\n \n    procedure Duplication_Error (Prag : Node_Id; Prev : Node_Id);\n-   --  Subsidiary to routines Find_Related_Package_Or_Body and\n-   --  Find_Related_Subprogram_Or_Body. Emit an error on pragma Prag that\n-   --  duplicates previous pragma Prev.\n+   --  Subsidiary to all Find_Related_xxx routines. Emit an error on pragma\n+   --  Prag that duplicates previous pragma Prev.\n+\n+   function Find_Related_Context\n+     (Prag      : Node_Id;\n+      Do_Checks : Boolean := False) return Node_Id;\n+   --  Subsidiaty to the analysis of pragmas Constant_After_Elaboration and\n+   --  Part_Of. Find the first source declaration or statement found while\n+   --  traversing the previous node chain starting from pragma Prag. If flag\n+   --  Do_Checks is set, the routine reports duplicate pragmas. The routine\n+   --  returns Empty when reaching the start of the node chain.\n \n    function Get_Base_Subprogram (Def_Id : Entity_Id) return Entity_Id;\n    --  If Def_Id refers to a renamed subprogram, then the base subprogram (the\n@@ -12134,6 +12142,88 @@ package body Sem_Prag is\n             end if;\n          end Component_AlignmentP;\n \n+         --------------------------------\n+         -- Constant_After_Elaboration --\n+         --------------------------------\n+\n+         --  pragma Constant_After_Elaboration [ (boolean_EXPRESSION) ];\n+\n+         when Pragma_Constant_After_Elaboration => Constant_After_Elaboration :\n+         declare\n+            Expr     : Node_Id;\n+            Obj_Decl : Node_Id;\n+            Obj_Id   : Entity_Id;\n+\n+         begin\n+            GNAT_Pragma;\n+            Check_No_Identifiers;\n+            Check_At_Most_N_Arguments (1);\n+\n+            Obj_Decl := Find_Related_Context (N, Do_Checks => True);\n+\n+            --  Object declaration\n+\n+            if Nkind (Obj_Decl) = N_Object_Declaration then\n+               null;\n+\n+            --  Otherwise the pragma is associated with an illegal construct\n+\n+            else\n+               Pragma_Misplaced;\n+               return;\n+            end if;\n+\n+            Obj_Id := Defining_Entity (Obj_Decl);\n+\n+            --  A pragma that applies to a Ghost entity becomes Ghost for the\n+            --  purposes of legality checks and removal of ignored Ghost code.\n+\n+            Mark_Pragma_As_Ghost (N, Obj_Id);\n+\n+            --  The object declaration must be a library-level variable with\n+            --  an initialization expression. The expression must depend on\n+            --  a variable, parameter, or another constant_after_elaboration,\n+            --  but the compiler cannot detect this property, as this requires\n+            --  full flow analysis (SPARK RM 3.3.1).\n+\n+            if Ekind (Obj_Id) = E_Variable then\n+               if not Is_Library_Level_Entity (Obj_Id) then\n+                  Error_Pragma\n+                    (\"pragma % must apply to a library level variable\");\n+                  return;\n+\n+               elsif not Has_Init_Expression (Obj_Decl) then\n+                  Error_Pragma\n+                    (\"pragma % must apply to a variable with initialization \"\n+                     & \"expression\");\n+               end if;\n+\n+            --  Otherwise the pragma applies to a constant, which is illegal\n+\n+            else\n+               Error_Pragma (\"pragma % must apply to a variable declaration\");\n+               return;\n+            end if;\n+\n+            --  Analyze the Boolean expression (if any)\n+\n+            if Present (Arg1) then\n+               Expr := Get_Pragma_Arg (Arg1);\n+\n+               Analyze_And_Resolve (Expr, Standard_Boolean);\n+\n+               if not Is_OK_Static_Expression (Expr) then\n+                  Error_Pragma_Arg\n+                    (\"expression of pragma % must be static\", Expr);\n+                  return;\n+               end if;\n+            end if;\n+\n+            --  Chain the pragma on the contract for completeness\n+\n+            Add_Contract_Item (N, Obj_Id);\n+         end Constant_After_Elaboration;\n+\n          --------------------\n          -- Contract_Cases --\n          --------------------\n@@ -17394,45 +17484,24 @@ package body Sem_Prag is\n             Check_No_Identifiers;\n             Check_Arg_Count (1);\n \n-            --  Ensure the proper placement of the pragma. Part_Of must appear\n-            --  on an object declaration or a package instantiation.\n+            Stmt := Find_Related_Context (N, Do_Checks => True);\n \n-            Stmt := Prev (N);\n-            while Present (Stmt) loop\n+            --  Object declaration\n \n-               --  Skip prior pragmas, but check for duplicates\n-\n-               if Nkind (Stmt) = N_Pragma then\n-                  if Pragma_Name (Stmt) = Pname then\n-                     Error_Msg_Name_1 := Pname;\n-                     Error_Msg_Sloc   := Sloc (Stmt);\n-                     Error_Msg_N (\"pragma% duplicates pragma declared#\", N);\n-                  end if;\n-\n-               --  Skip internally generated code\n-\n-               elsif not Comes_From_Source (Stmt) then\n-                  null;\n-\n-               --  The pragma applies to an object declaration (possibly a\n-               --  variable) or a package instantiation. Stop the traversal\n-               --  and continue the analysis.\n+            if Nkind (Stmt) = N_Object_Declaration then\n+               null;\n \n-               elsif Nkind_In (Stmt, N_Object_Declaration,\n-                                     N_Package_Instantiation)\n-               then\n-                  exit;\n+            --  Package instantiation\n \n-               --  The pragma does not apply to a legal construct, issue an\n-               --  error and stop the analysis.\n+            elsif Nkind (Stmt) = N_Package_Instantiation then\n+               null;\n \n-               else\n-                  Pragma_Misplaced;\n-                  return;\n-               end if;\n+            --  Otherwise the pragma is associated with an illegal construct\n \n-               Stmt := Prev (Stmt);\n-            end loop;\n+            else\n+               Pragma_Misplaced;\n+               return;\n+            end if;\n \n             --  Extract the entity of the related object declaration or package\n             --  instantiation. In the case of the instantiation, use the entity\n@@ -25680,6 +25749,46 @@ package body Sem_Prag is\n       end if;\n    end Duplication_Error;\n \n+   --------------------------\n+   -- Find_Related_Context --\n+   --------------------------\n+\n+   function Find_Related_Context\n+     (Prag      : Node_Id;\n+      Do_Checks : Boolean := False) return Node_Id\n+   is\n+      Stmt : Node_Id;\n+\n+   begin\n+      Stmt := Prev (Prag);\n+      while Present (Stmt) loop\n+\n+         --  Skip prior pragmas, but check for duplicates\n+\n+         if Nkind (Stmt) = N_Pragma then\n+            if Do_Checks and then Pragma_Name (Stmt) = Pragma_Name (Prag) then\n+               Duplication_Error\n+                 (Prag => Prag,\n+                  Prev => Stmt);\n+            end if;\n+\n+         --  Skip internally generated code\n+\n+         elsif not Comes_From_Source (Stmt) then\n+            null;\n+\n+         --  Return the current source construct\n+\n+         else\n+            return Stmt;\n+         end if;\n+\n+         Prev (Stmt);\n+      end loop;\n+\n+      return Empty;\n+   end Find_Related_Context;\n+\n    ----------------------------------\n    -- Find_Related_Package_Or_Body --\n    ----------------------------------\n@@ -26223,6 +26332,7 @@ package body Sem_Prag is\n       Pragma_Complete_Representation        =>  0,\n       Pragma_Complex_Representation         =>  0,\n       Pragma_Component_Alignment            =>  0,\n+      Pragma_Constant_After_Elaboration     =>  0,\n       Pragma_Contract_Cases                 => -1,\n       Pragma_Controlled                     =>  0,\n       Pragma_Convention                     =>  0,"}, {"sha": "72881a0e01c804f14133860cbdc5aa67100c515d", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=1df7c326c72121e3f18743dadb6880a102b018ed", "patch": "@@ -45,6 +45,7 @@ package Sem_Prag is\n       Pragma_Atomic                       => True,\n       Pragma_Atomic_Components            => True,\n       Pragma_Attach_Handler               => True,\n+      Pragma_Constant_After_Elaboration   => True,\n       Pragma_Contract_Cases               => True,\n       Pragma_Convention                   => True,\n       Pragma_CPU                          => True,\n@@ -171,7 +172,7 @@ package Sem_Prag is\n    --  Analyze procedure for pragma reference node N\n \n    procedure Analyze_Contract_Cases_In_Decl_Part (N : Node_Id);\n-   --  Perform full analysis and expansion of delayed pragma Contract_Cases\n+   --  Perform full analysis of delayed pragma Contract_Cases\n \n    procedure Analyze_Depends_In_Decl_Part (N : Node_Id);\n    --  Perform full analysis of delayed pragma Depends. This routine is also"}, {"sha": "d182229922e766716a380940496ba7705a8e433e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1df7c326c72121e3f18743dadb6880a102b018ed", "patch": "@@ -424,13 +424,15 @@ package body Sem_Util is\n       --  Contract items related to variables. Applicable pragmas are:\n       --    Async_Readers\n       --    Async_Writers\n+      --    Constant_After_Elaboration\n       --    Effective_Reads\n       --    Effective_Writes\n       --    Part_Of\n \n       elsif Ekind (Id) = E_Variable then\n          if Nam_In (Prag_Nam, Name_Async_Readers,\n                               Name_Async_Writers,\n+                              Name_Constant_After_Elaboration,\n                               Name_Effective_Reads,\n                               Name_Effective_Writes,\n                               Name_Part_Of)"}, {"sha": "7826576466361532313deea170bf77f784b4bf03", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=1df7c326c72121e3f18743dadb6880a102b018ed", "patch": "@@ -56,6 +56,7 @@ package Sem_Util is\n    --    Abstract_State\n    --    Async_Readers\n    --    Async_Writers\n+   --    Constant_After_Elaboration\n    --    Contract_Cases\n    --    Depends\n    --    Effective_Reads"}, {"sha": "94843115c47b478068e6cf4567b2b80dfa1ac815", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1df7c326c72121e3f18743dadb6880a102b018ed/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=1df7c326c72121e3f18743dadb6880a102b018ed", "patch": "@@ -468,6 +468,7 @@ package Snames is\n    Name_Common_Object                  : constant Name_Id := N + $; -- GNAT\n    Name_Complete_Representation        : constant Name_Id := N + $; -- GNAT\n    Name_Complex_Representation         : constant Name_Id := N + $; -- GNAT\n+   Name_Constant_After_Elaboration     : constant Name_Id := N + $; -- GNAT\n    Name_Contract_Cases                 : constant Name_Id := N + $; -- GNAT\n    Name_Controlled                     : constant Name_Id := N + $;\n    Name_Convention                     : constant Name_Id := N + $;\n@@ -1813,6 +1814,7 @@ package Snames is\n       Pragma_Common_Object,\n       Pragma_Complete_Representation,\n       Pragma_Complex_Representation,\n+      Pragma_Constant_After_Elaboration,\n       Pragma_Contract_Cases,\n       Pragma_Controlled,\n       Pragma_Convention,"}]}