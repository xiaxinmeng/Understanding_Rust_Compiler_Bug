{"sha": "d371df6f10a5f5262df075ada4848720910b7880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM3MWRmNmYxMGE1ZjUyNjJkZjA3NWFkYTQ4NDg3MjA5MTBiNzg4MA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-05-09T09:40:19Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-05-09T09:40:19Z"}, "message": "gcc_update (gcc/config/mips/mips-tables.opt): New dependencies.\n\ncontrib:\n\t* gcc_update (gcc/config/mips/mips-tables.opt): New dependencies.\n\ngcc:\n\t* config/mips/genopt.sh, config/mips/mips-cpus.def: New files.\n\t* config/mips/mips-tables.opt: New file (generated).\n\t* config.gcc (mips*-*-*): Add mips/mips-tables.opt to\n\textra_options.\n\t* config/mips/mips-opts.h (MIPS_ARCH_OPTION_FROM_ABI,\n\tMIPS_ARCH_OPTION_NATIVE): Define.\n\t* config/mips/mips.c (mips_cpu_info_table): Move contents to\n\tmips-cpus.def.\n\t(mips_strict_matching_cpu_name_p, mips_matching_cpu_name_p,\n\tmips_parse_cpu): Remove.\n\t(mips_cpu_info_from_opt, mips_default_arch): New.\n\t(mips_handle_option): Don't assert that global structures are in\n\tuse.  Don't handle OPT_march_, OPT_mtune_ and OPT_mips here.\n\t(mips_option_override): Use new variables and functions to set\n\tstate of these options.  Use strcmp to check for individual CPU\n\tnames.\n\t* config/mips/mips.h (MIPS_CPU_STRING_DEFAULT): Remove default\n\tdefinition.\n\t* config/mips/mips.opt (march=): Use ToLower and Enum.\n\t(mips): Use ToLower, Enum and Var.\n\t(mtune=): Use ToLower and Enum.\n\t* config/mips/t-mips ($(srcdir)/config/mips/mips-tables.opt): New.\n\nFrom-SVN: r173561", "tree": {"sha": "3257fd24ba23b3c29971be1f3c9543bb608ffb32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3257fd24ba23b3c29971be1f3c9543bb608ffb32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d371df6f10a5f5262df075ada4848720910b7880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d371df6f10a5f5262df075ada4848720910b7880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d371df6f10a5f5262df075ada4848720910b7880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d371df6f10a5f5262df075ada4848720910b7880/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fc07af967e769a658c5aef0f40c860491fc132c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc07af967e769a658c5aef0f40c860491fc132c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fc07af967e769a658c5aef0f40c860491fc132c"}], "stats": {"total": 1199, "additions": 970, "deletions": 229}, "files": [{"sha": "65a587c9f071a6f2f2bce625e6679d792562dcc8", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371df6f10a5f5262df075ada4848720910b7880/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371df6f10a5f5262df075ada4848720910b7880/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=d371df6f10a5f5262df075ada4848720910b7880", "patch": "@@ -1,3 +1,7 @@\n+2011-05-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc_update (gcc/config/mips/mips-tables.opt): New dependencies.\n+\n 2010-05-05  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config-list.mk: New file."}, {"sha": "a564dd9d04da0c4ddd915e95e7fa7c786ea61c46", "filename": "contrib/gcc_update", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371df6f10a5f5262df075ada4848720910b7880/contrib%2Fgcc_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371df6f10a5f5262df075ada4848720910b7880/contrib%2Fgcc_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc_update?ref=d371df6f10a5f5262df075ada4848720910b7880", "patch": "@@ -82,6 +82,7 @@ gcc/fixinc/fixincl.x: gcc/fixinc/fixincl.tpl gcc/fixinc/inclhack.def\n gcc/config/arm/arm-tune.md: gcc/config/arm/arm-cores.def gcc/config/arm/gentune.sh\n gcc/config/arm/arm-tables.opt: gcc/config/arm/arm-arches.def gcc/config/arm/arm-cores.def gcc/config/arm/genopt.sh\n gcc/config/m68k/m68k-tables.opt: gcc/config/m68k/m68k-devices.def gcc/config/m68k/m68k-isas.def gcc/config/m68k/m68k-microarchs.def gcc/config/m68k/genopt.sh\n+gcc/config/mips/mips-tables.opt: gcc/config/mips/mips-cpus.def gcc/config/mips/genopt.sh\n # And then, language-specific files\n gcc/cp/cfns.h: gcc/cp/cfns.gperf\n gcc/java/keyword.h: gcc/java/keyword.gperf"}, {"sha": "97f9f1ff7d760655daf233ab6ae034a61f0e4dd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371df6f10a5f5262df075ada4848720910b7880/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371df6f10a5f5262df075ada4848720910b7880/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d371df6f10a5f5262df075ada4848720910b7880", "patch": "@@ -1,3 +1,28 @@\n+2011-05-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/mips/genopt.sh, config/mips/mips-cpus.def: New files.\n+\t* config/mips/mips-tables.opt: New file (generated).\n+\t* config.gcc (mips*-*-*): Add mips/mips-tables.opt to\n+\textra_options.\n+\t* config/mips/mips-opts.h (MIPS_ARCH_OPTION_FROM_ABI,\n+\tMIPS_ARCH_OPTION_NATIVE): Define.\n+\t* config/mips/mips.c (mips_cpu_info_table): Move contents to\n+\tmips-cpus.def.\n+\t(mips_strict_matching_cpu_name_p, mips_matching_cpu_name_p,\n+\tmips_parse_cpu): Remove.\n+\t(mips_cpu_info_from_opt, mips_default_arch): New.\n+\t(mips_handle_option): Don't assert that global structures are in\n+\tuse.  Don't handle OPT_march_, OPT_mtune_ and OPT_mips here.\n+\t(mips_option_override): Use new variables and functions to set\n+\tstate of these options.  Use strcmp to check for individual CPU\n+\tnames.\n+\t* config/mips/mips.h (MIPS_CPU_STRING_DEFAULT): Remove default\n+\tdefinition.\n+\t* config/mips/mips.opt (march=): Use ToLower and Enum.\n+\t(mips): Use ToLower, Enum and Var.\n+\t(mtune=): Use ToLower and Enum.\n+\t* config/mips/t-mips ($(srcdir)/config/mips/mips-tables.opt): New.\n+\n 2011-05-08  Jan Hubicka  <jh@suse.cz>\n \n \t* gimple.c (type_pair_hash, type_pair_eq, lookup_type_pair):"}, {"sha": "f7876b8933361938fb5f240a306e296844c44a43", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d371df6f10a5f5262df075ada4848720910b7880", "patch": "@@ -371,7 +371,7 @@ mips*-*-*)\n \tcpu_type=mips\n \tneed_64bit_hwint=yes\n \textra_headers=\"loongson.h\"\n-\textra_options=\"${extra_options} g.opt\"\n+\textra_options=\"${extra_options} g.opt mips/mips-tables.opt\"\n \t;;\n picochip-*-*)\n         cpu_type=picochip"}, {"sha": "a72ed1c343283823cc20dd674f9d8d3eaea5a076", "filename": "gcc/config/mips/genopt.sh", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fgenopt.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fgenopt.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fgenopt.sh?ref=d371df6f10a5f5262df075ada4848720910b7880", "patch": "@@ -0,0 +1,123 @@\n+#!/bin/sh\n+# Generate mips-tables.opt from the list of CPUs in mips-cpus.def.\n+# Copyright (C) 2011 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+cat <<EOF\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from mips-cpus.def.\n+\n+; Copyright (C) 2011 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(mips_arch_opt_value) Type(int)\n+Known MIPS CPUs (for use with the -march= and -mtune= options):\n+\n+Enum\n+Name(mips_mips_opt_value) Type(int)\n+Known MIPS ISA levels (for use with the -mips option):\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(from-abi) Value(MIPS_ARCH_OPTION_FROM_ABI)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(native) Value(MIPS_ARCH_OPTION_NATIVE) DriverOnly\n+\n+EOF\n+\n+awk -F'[(, \t]+' '\n+BEGIN {\n+    value = 0\n+}\n+\n+# Write an entry for a single string accepted as a -march= argument.\n+\n+function write_one_arch_value(name, value, flags)\n+{\n+    print \"EnumValue\"\n+    print \"Enum(mips_arch_opt_value) String(\" name \") Value(\" value \")\" flags\n+    print \"\"\n+    if (name ~ \"^mips\") {\n+\tsub(\"^mips\", \"\", name)\n+\tprint \"EnumValue\"\n+\tprint \"Enum(mips_mips_opt_value) String(\" name \") Value(\" value \")\"\n+\tprint \"\"\n+    }\n+}\n+\n+# The logic for matching CPU name variants should be the same as in GAS.\n+\n+# Write an entry for a single string accepted as a -march= argument,\n+# plus any variant with a final \"000\" replaced by \"k\".\n+\n+function write_arch_value_maybe_k(name, value, flags)\n+{\n+    write_one_arch_value(name, value, flags)\n+    if (name ~ \"000$\") {\n+\tsub(\"000$\", \"k\", name)\n+\twrite_one_arch_value(name, value, \"\")\n+    }\n+}\n+\n+# Write all the entries for a -march= argument.  In addition to\n+# replacement of a final \"000\" with \"k\", an argument starting with\n+# \"vr\", \"rm\" or \"r\" followed by a number, or just a plain number,\n+# matches a plain number or \"r\" followed by a plain number.\n+\n+function write_all_arch_values(name, value)\n+{\n+    write_arch_value_maybe_k(name, value, \" Canonical\")\n+    cname = name\n+    if (cname ~ \"^vr\") {\n+\tsub(\"^vr\", \"\", cname)\n+    } else if (cname ~ \"^rm\") {\n+\tsub(\"^rm\", \"\", cname)\n+    } else if (cname ~ \"^r\") {\n+\tsub(\"^r\", \"\", cname)\n+    }\n+    if (cname ~ \"^[0-9]\") {\n+\tif (cname != name)\n+\t    write_arch_value_maybe_k(cname, value, \"\")\n+\trname = \"r\" cname\n+\tif (rname != name)\n+\t    write_arch_value_maybe_k(rname, value, \"\")\n+    }\n+}\n+\n+/^MIPS_CPU/ {\n+    name = $2\n+    gsub(\"\\\"\", \"\", name)\n+    write_all_arch_values(name, value)\n+    value++\n+}' $1/mips-cpus.def"}, {"sha": "35fd51691670296bc29c77da65d146ac7c6e9c5b", "filename": "gcc/config/mips/mips-cpus.def", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-cpus.def?ref=d371df6f10a5f5262df075ada4848720910b7880", "patch": "@@ -0,0 +1,147 @@\n+/* MIPS CPU names.\n+   Copyright (C) 1989, 1990, 1991, 1993, 1994, 1995, 1996, 1997, 1998,\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* A table describing all the processors GCC knows about.  The first\n+   mention of an ISA level is taken as the canonical name for that\n+   ISA.\n+\n+   To ease comparison, please keep this table in the same order\n+   as GAS's mips_cpu_info_table.  Please also make sure that\n+   MIPS_ISA_LEVEL_SPEC and MIPS_ARCH_FLOAT_SPEC handle all -march\n+   options correctly.\n+\n+   Before including this file, define a macro:\n+\n+   MIPS_CPU (NAME, CPU, ISA, FLAGS)\n+\n+   where the arguments are the fields of struct mips_cpu_info.  */\n+\n+/* Entries for generic ISAs.  */\n+MIPS_CPU (\"mips1\", PROCESSOR_R3000, 1, 0)\n+MIPS_CPU (\"mips2\", PROCESSOR_R6000, 2, 0)\n+MIPS_CPU (\"mips3\", PROCESSOR_R4000, 3, 0)\n+MIPS_CPU (\"mips4\", PROCESSOR_R8000, 4, 0)\n+/* Prefer not to use branch-likely instructions for generic MIPS32rX\n+   and MIPS64rX code.  The instructions were officially deprecated\n+   in revisions 2 and earlier, but revision 3 is likely to downgrade\n+   that to a recommendation to avoid the instructions in code that\n+   isn't tuned to a specific processor.  */\n+MIPS_CPU (\"mips32\", PROCESSOR_4KC, 32, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"mips32r2\", PROCESSOR_M4K, 33, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"mips64\", PROCESSOR_5KC, 64, PTF_AVOID_BRANCHLIKELY)\n+/* ??? For now just tune the generic MIPS64r2 for 5KC as well.   */\n+MIPS_CPU (\"mips64r2\", PROCESSOR_5KC, 65, PTF_AVOID_BRANCHLIKELY)\n+\n+/* MIPS I processors.  */\n+MIPS_CPU (\"r3000\", PROCESSOR_R3000, 1, 0)\n+MIPS_CPU (\"r2000\", PROCESSOR_R3000, 1, 0)\n+MIPS_CPU (\"r3900\", PROCESSOR_R3900, 1, 0)\n+\n+/* MIPS II processors.  */\n+MIPS_CPU (\"r6000\", PROCESSOR_R6000, 2, 0)\n+\n+/* MIPS III processors.  */\n+MIPS_CPU (\"r4000\", PROCESSOR_R4000, 3, 0)\n+MIPS_CPU (\"vr4100\", PROCESSOR_R4100, 3, 0)\n+MIPS_CPU (\"vr4111\", PROCESSOR_R4111, 3, 0)\n+MIPS_CPU (\"vr4120\", PROCESSOR_R4120, 3, 0)\n+MIPS_CPU (\"vr4130\", PROCESSOR_R4130, 3, 0)\n+MIPS_CPU (\"vr4300\", PROCESSOR_R4300, 3, 0)\n+MIPS_CPU (\"r4400\", PROCESSOR_R4000, 3, 0)\n+MIPS_CPU (\"r4600\", PROCESSOR_R4600, 3, 0)\n+MIPS_CPU (\"orion\", PROCESSOR_R4600, 3, 0)\n+MIPS_CPU (\"r4650\", PROCESSOR_R4650, 3, 0)\n+/* ST Loongson 2E/2F processors.  */\n+MIPS_CPU (\"loongson2e\", PROCESSOR_LOONGSON_2E, 3, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"loongson2f\", PROCESSOR_LOONGSON_2F, 3, PTF_AVOID_BRANCHLIKELY)\n+\n+/* MIPS IV processors. */\n+MIPS_CPU (\"r8000\", PROCESSOR_R8000, 4, 0)\n+MIPS_CPU (\"r10000\", PROCESSOR_R10000, 4, 0)\n+MIPS_CPU (\"r12000\", PROCESSOR_R10000, 4, 0)\n+MIPS_CPU (\"r14000\", PROCESSOR_R10000, 4, 0)\n+MIPS_CPU (\"r16000\", PROCESSOR_R10000, 4, 0)\n+MIPS_CPU (\"vr5000\", PROCESSOR_R5000, 4, 0)\n+MIPS_CPU (\"vr5400\", PROCESSOR_R5400, 4, 0)\n+MIPS_CPU (\"vr5500\", PROCESSOR_R5500, 4, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"rm7000\", PROCESSOR_R7000, 4, 0)\n+MIPS_CPU (\"rm9000\", PROCESSOR_R9000, 4, 0)\n+\n+/* MIPS32 processors.  */\n+MIPS_CPU (\"4kc\", PROCESSOR_4KC, 32, 0)\n+MIPS_CPU (\"4km\", PROCESSOR_4KC, 32, 0)\n+MIPS_CPU (\"4kp\", PROCESSOR_4KP, 32, 0)\n+MIPS_CPU (\"4ksc\", PROCESSOR_4KC, 32, 0)\n+\n+/* MIPS32 Release 2 processors.  */\n+MIPS_CPU (\"m4k\", PROCESSOR_M4K, 33, 0)\n+MIPS_CPU (\"4kec\", PROCESSOR_4KC, 33, 0)\n+MIPS_CPU (\"4kem\", PROCESSOR_4KC, 33, 0)\n+MIPS_CPU (\"4kep\", PROCESSOR_4KP, 33, 0)\n+MIPS_CPU (\"4ksd\", PROCESSOR_4KC, 33, 0)\n+\n+MIPS_CPU (\"24kc\", PROCESSOR_24KC, 33, 0)\n+MIPS_CPU (\"24kf2_1\", PROCESSOR_24KF2_1, 33, 0)\n+MIPS_CPU (\"24kf\", PROCESSOR_24KF2_1, 33, 0)\n+MIPS_CPU (\"24kf1_1\", PROCESSOR_24KF1_1, 33, 0)\n+MIPS_CPU (\"24kfx\", PROCESSOR_24KF1_1, 33, 0)\n+MIPS_CPU (\"24kx\", PROCESSOR_24KF1_1, 33, 0)\n+\n+MIPS_CPU (\"24kec\", PROCESSOR_24KC, 33, 0) /* 24K with DSP.  */\n+MIPS_CPU (\"24kef2_1\", PROCESSOR_24KF2_1, 33, 0)\n+MIPS_CPU (\"24kef\", PROCESSOR_24KF2_1, 33, 0)\n+MIPS_CPU (\"24kef1_1\", PROCESSOR_24KF1_1, 33, 0)\n+MIPS_CPU (\"24kefx\", PROCESSOR_24KF1_1, 33, 0)\n+MIPS_CPU (\"24kex\", PROCESSOR_24KF1_1, 33, 0)\n+\n+MIPS_CPU (\"34kc\", PROCESSOR_24KC, 33, 0) /* 34K with MT/DSP.  */\n+MIPS_CPU (\"34kf2_1\", PROCESSOR_24KF2_1, 33, 0)\n+MIPS_CPU (\"34kf\", PROCESSOR_24KF2_1, 33, 0)\n+MIPS_CPU (\"34kf1_1\", PROCESSOR_24KF1_1, 33, 0)\n+MIPS_CPU (\"34kfx\", PROCESSOR_24KF1_1, 33, 0)\n+MIPS_CPU (\"34kx\", PROCESSOR_24KF1_1, 33, 0)\n+\n+MIPS_CPU (\"74kc\", PROCESSOR_74KC, 33, 0) /* 74K with DSPr2.  */\n+MIPS_CPU (\"74kf2_1\", PROCESSOR_74KF2_1, 33, 0)\n+MIPS_CPU (\"74kf\", PROCESSOR_74KF2_1, 33, 0)\n+MIPS_CPU (\"74kf1_1\", PROCESSOR_74KF1_1, 33, 0)\n+MIPS_CPU (\"74kfx\", PROCESSOR_74KF1_1, 33, 0)\n+MIPS_CPU (\"74kx\", PROCESSOR_74KF1_1, 33, 0)\n+MIPS_CPU (\"74kf3_2\", PROCESSOR_74KF3_2, 33, 0)\n+\n+MIPS_CPU (\"1004kc\", PROCESSOR_24KC, 33, 0) /* 1004K with MT/DSP.  */\n+MIPS_CPU (\"1004kf2_1\", PROCESSOR_24KF2_1, 33, 0)\n+MIPS_CPU (\"1004kf\", PROCESSOR_24KF2_1, 33, 0)\n+MIPS_CPU (\"1004kf1_1\", PROCESSOR_24KF1_1, 33, 0)\n+\n+/* MIPS64 processors.  */\n+MIPS_CPU (\"5kc\", PROCESSOR_5KC, 64, 0)\n+MIPS_CPU (\"5kf\", PROCESSOR_5KF, 64, 0)\n+MIPS_CPU (\"20kc\", PROCESSOR_20KC, 64, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"sb1\", PROCESSOR_SB1, 64, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"sb1a\", PROCESSOR_SB1A, 64, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"sr71000\", PROCESSOR_SR71000, 64, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"xlr\", PROCESSOR_XLR, 64, 0)\n+MIPS_CPU (\"loongson3a\", PROCESSOR_LOONGSON_3A, 64, PTF_AVOID_BRANCHLIKELY)\n+\n+/* MIPS64 Release 2 processors.  */\n+MIPS_CPU (\"octeon\", PROCESSOR_OCTEON, 65, PTF_AVOID_BRANCHLIKELY)"}, {"sha": "d2537d31223a84e8c55a6f20e2cd906d67e8bd1b", "filename": "gcc/config/mips/mips-opts.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fmips-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fmips-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-opts.h?ref=d371df6f10a5f5262df075ada4848720910b7880", "patch": "@@ -36,4 +36,10 @@ enum mips_r10k_cache_barrier_setting {\n   R10K_CACHE_BARRIER_LOAD_STORE\n };\n \n+/* No enumeration is defined to index the -march= values (entries in\n+   mips_cpu_info_table), with the type int being used instead, but we\n+   need to distinguish the special \"from-abi\" and \"native\" values.  */\n+#define MIPS_ARCH_OPTION_FROM_ABI -1\n+#define MIPS_ARCH_OPTION_NATIVE -2\n+\n #endif"}, {"sha": "4e410f0f010ed555152499d524224210e496049a", "filename": "gcc/config/mips/mips-tables.opt", "status": "added", "additions": 605, "deletions": 0, "changes": 605, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fmips-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fmips-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-tables.opt?ref=d371df6f10a5f5262df075ada4848720910b7880", "patch": "@@ -0,0 +1,605 @@\n+; -*- buffer-read-only: t -*-\n+; Generated automatically by genopt.sh from mips-cpus.def.\n+\n+; Copyright (C) 2011 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 3, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING3.  If not see\n+; <http://www.gnu.org/licenses/>.\n+\n+Enum\n+Name(mips_arch_opt_value) Type(int)\n+Known MIPS CPUs (for use with the -march= and -mtune= options):\n+\n+Enum\n+Name(mips_mips_opt_value) Type(int)\n+Known MIPS ISA levels (for use with the -mips option):\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(from-abi) Value(MIPS_ARCH_OPTION_FROM_ABI)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(native) Value(MIPS_ARCH_OPTION_NATIVE) DriverOnly\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(mips1) Value(0) Canonical\n+\n+EnumValue\n+Enum(mips_mips_opt_value) String(1) Value(0)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(mips2) Value(1) Canonical\n+\n+EnumValue\n+Enum(mips_mips_opt_value) String(2) Value(1)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(mips3) Value(2) Canonical\n+\n+EnumValue\n+Enum(mips_mips_opt_value) String(3) Value(2)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(mips4) Value(3) Canonical\n+\n+EnumValue\n+Enum(mips_mips_opt_value) String(4) Value(3)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(mips32) Value(4) Canonical\n+\n+EnumValue\n+Enum(mips_mips_opt_value) String(32) Value(4)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(mips32r2) Value(5) Canonical\n+\n+EnumValue\n+Enum(mips_mips_opt_value) String(32r2) Value(5)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(mips64) Value(6) Canonical\n+\n+EnumValue\n+Enum(mips_mips_opt_value) String(64) Value(6)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(mips64r2) Value(7) Canonical\n+\n+EnumValue\n+Enum(mips_mips_opt_value) String(64r2) Value(7)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r3000) Value(8) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r3k) Value(8)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(3000) Value(8)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(3k) Value(8)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r2000) Value(9) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r2k) Value(9)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(2000) Value(9)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(2k) Value(9)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r3900) Value(10) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(3900) Value(10)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r6000) Value(11) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r6k) Value(11)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(6000) Value(11)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(6k) Value(11)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4000) Value(12) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4k) Value(12)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4000) Value(12)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4k) Value(12)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(vr4100) Value(13) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4100) Value(13)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4100) Value(13)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(vr4111) Value(14) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4111) Value(14)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4111) Value(14)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(vr4120) Value(15) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4120) Value(15)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4120) Value(15)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(vr4130) Value(16) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4130) Value(16)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4130) Value(16)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(vr4300) Value(17) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4300) Value(17)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4300) Value(17)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4400) Value(18) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4400) Value(18)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4600) Value(19) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4600) Value(19)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(orion) Value(20) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4650) Value(21) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4650) Value(21)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(loongson2e) Value(22) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(loongson2f) Value(23) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r8000) Value(24) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r8k) Value(24)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(8000) Value(24)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(8k) Value(24)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r10000) Value(25) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r10k) Value(25)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(10000) Value(25)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(10k) Value(25)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r12000) Value(26) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r12k) Value(26)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(12000) Value(26)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(12k) Value(26)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r14000) Value(27) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r14k) Value(27)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(14000) Value(27)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(14k) Value(27)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r16000) Value(28) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r16k) Value(28)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(16000) Value(28)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(16k) Value(28)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(vr5000) Value(29) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(vr5k) Value(29)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(5000) Value(29)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(5k) Value(29)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r5000) Value(29)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r5k) Value(29)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(vr5400) Value(30) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(5400) Value(30)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r5400) Value(30)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(vr5500) Value(31) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(5500) Value(31)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r5500) Value(31)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(rm7000) Value(32) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(rm7k) Value(32)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(7000) Value(32)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(7k) Value(32)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r7000) Value(32)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r7k) Value(32)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(rm9000) Value(33) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(rm9k) Value(33)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(9000) Value(33)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(9k) Value(33)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r9000) Value(33)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r9k) Value(33)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4kc) Value(34) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4kc) Value(34)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4km) Value(35) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4km) Value(35)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4kp) Value(36) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4kp) Value(36)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4ksc) Value(37) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4ksc) Value(37)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(m4k) Value(38) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4kec) Value(39) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4kec) Value(39)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4kem) Value(40) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4kem) Value(40)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4kep) Value(41) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4kep) Value(41)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(4ksd) Value(42) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r4ksd) Value(42)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(24kc) Value(43) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r24kc) Value(43)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(24kf2_1) Value(44) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r24kf2_1) Value(44)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(24kf) Value(45) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r24kf) Value(45)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(24kf1_1) Value(46) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r24kf1_1) Value(46)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(24kfx) Value(47) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r24kfx) Value(47)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(24kx) Value(48) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r24kx) Value(48)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(24kec) Value(49) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r24kec) Value(49)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(24kef2_1) Value(50) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r24kef2_1) Value(50)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(24kef) Value(51) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r24kef) Value(51)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(24kef1_1) Value(52) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r24kef1_1) Value(52)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(24kefx) Value(53) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r24kefx) Value(53)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(24kex) Value(54) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r24kex) Value(54)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(34kc) Value(55) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r34kc) Value(55)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(34kf2_1) Value(56) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r34kf2_1) Value(56)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(34kf) Value(57) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r34kf) Value(57)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(34kf1_1) Value(58) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r34kf1_1) Value(58)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(34kfx) Value(59) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r34kfx) Value(59)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(34kx) Value(60) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r34kx) Value(60)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(74kc) Value(61) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r74kc) Value(61)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(74kf2_1) Value(62) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r74kf2_1) Value(62)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(74kf) Value(63) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r74kf) Value(63)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(74kf1_1) Value(64) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r74kf1_1) Value(64)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(74kfx) Value(65) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r74kfx) Value(65)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(74kx) Value(66) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r74kx) Value(66)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(74kf3_2) Value(67) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r74kf3_2) Value(67)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(1004kc) Value(68) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r1004kc) Value(68)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(1004kf2_1) Value(69) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r1004kf2_1) Value(69)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(1004kf) Value(70) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r1004kf) Value(70)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(1004kf1_1) Value(71) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r1004kf1_1) Value(71)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(5kc) Value(72) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r5kc) Value(72)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(5kf) Value(73) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r5kf) Value(73)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(20kc) Value(74) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(r20kc) Value(74)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(sb1) Value(75) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(sb1a) Value(76) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(sr71000) Value(77) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(sr71k) Value(77)\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(xlr) Value(78) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(loongson3a) Value(79) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(octeon) Value(80) Canonical\n+"}, {"sha": "331f0c18dcc4e9325612902ac9ca8df45c00b4bb", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 49, "deletions": 217, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d371df6f10a5f5262df075ada4848720910b7880", "patch": "@@ -645,125 +645,13 @@ static const struct attribute_spec mips_attribute_table[] = {\n   { NULL,\t   0, 0, false, false, false, NULL, false }\n };\n \f\n-/* A table describing all the processors GCC knows about.  Names are\n-   matched in the order listed.  The first mention of an ISA level is\n-   taken as the canonical name for that ISA.\n-\n-   To ease comparison, please keep this table in the same order\n-   as GAS's mips_cpu_info_table.  Please also make sure that\n-   MIPS_ISA_LEVEL_SPEC and MIPS_ARCH_FLOAT_SPEC handle all -march\n-   options correctly.  */\n+/* A table describing all the processors GCC knows about; see\n+   mips-cpus.def for details.  */\n static const struct mips_cpu_info mips_cpu_info_table[] = {\n-  /* Entries for generic ISAs.  */\n-  { \"mips1\", PROCESSOR_R3000, 1, 0 },\n-  { \"mips2\", PROCESSOR_R6000, 2, 0 },\n-  { \"mips3\", PROCESSOR_R4000, 3, 0 },\n-  { \"mips4\", PROCESSOR_R8000, 4, 0 },\n-  /* Prefer not to use branch-likely instructions for generic MIPS32rX\n-     and MIPS64rX code.  The instructions were officially deprecated\n-     in revisions 2 and earlier, but revision 3 is likely to downgrade\n-     that to a recommendation to avoid the instructions in code that\n-     isn't tuned to a specific processor.  */\n-  { \"mips32\", PROCESSOR_4KC, 32, PTF_AVOID_BRANCHLIKELY },\n-  { \"mips32r2\", PROCESSOR_M4K, 33, PTF_AVOID_BRANCHLIKELY },\n-  { \"mips64\", PROCESSOR_5KC, 64, PTF_AVOID_BRANCHLIKELY },\n-  /* ??? For now just tune the generic MIPS64r2 for 5KC as well.   */\n-  { \"mips64r2\", PROCESSOR_5KC, 65, PTF_AVOID_BRANCHLIKELY },\n-\n-  /* MIPS I processors.  */\n-  { \"r3000\", PROCESSOR_R3000, 1, 0 },\n-  { \"r2000\", PROCESSOR_R3000, 1, 0 },\n-  { \"r3900\", PROCESSOR_R3900, 1, 0 },\n-\n-  /* MIPS II processors.  */\n-  { \"r6000\", PROCESSOR_R6000, 2, 0 },\n-\n-  /* MIPS III processors.  */\n-  { \"r4000\", PROCESSOR_R4000, 3, 0 },\n-  { \"vr4100\", PROCESSOR_R4100, 3, 0 },\n-  { \"vr4111\", PROCESSOR_R4111, 3, 0 },\n-  { \"vr4120\", PROCESSOR_R4120, 3, 0 },\n-  { \"vr4130\", PROCESSOR_R4130, 3, 0 },\n-  { \"vr4300\", PROCESSOR_R4300, 3, 0 },\n-  { \"r4400\", PROCESSOR_R4000, 3, 0 },\n-  { \"r4600\", PROCESSOR_R4600, 3, 0 },\n-  { \"orion\", PROCESSOR_R4600, 3, 0 },\n-  { \"r4650\", PROCESSOR_R4650, 3, 0 },\n-  /* ST Loongson 2E/2F processors.  */\n-  { \"loongson2e\", PROCESSOR_LOONGSON_2E, 3, PTF_AVOID_BRANCHLIKELY },\n-  { \"loongson2f\", PROCESSOR_LOONGSON_2F, 3, PTF_AVOID_BRANCHLIKELY },\n-\n-  /* MIPS IV processors. */\n-  { \"r8000\", PROCESSOR_R8000, 4, 0 },\n-  { \"r10000\", PROCESSOR_R10000, 4, 0 },\n-  { \"r12000\", PROCESSOR_R10000, 4, 0 },\n-  { \"r14000\", PROCESSOR_R10000, 4, 0 },\n-  { \"r16000\", PROCESSOR_R10000, 4, 0 },\n-  { \"vr5000\", PROCESSOR_R5000, 4, 0 },\n-  { \"vr5400\", PROCESSOR_R5400, 4, 0 },\n-  { \"vr5500\", PROCESSOR_R5500, 4, PTF_AVOID_BRANCHLIKELY },\n-  { \"rm7000\", PROCESSOR_R7000, 4, 0 },\n-  { \"rm9000\", PROCESSOR_R9000, 4, 0 },\n-\n-  /* MIPS32 processors.  */\n-  { \"4kc\", PROCESSOR_4KC, 32, 0 },\n-  { \"4km\", PROCESSOR_4KC, 32, 0 },\n-  { \"4kp\", PROCESSOR_4KP, 32, 0 },\n-  { \"4ksc\", PROCESSOR_4KC, 32, 0 },\n-\n-  /* MIPS32 Release 2 processors.  */\n-  { \"m4k\", PROCESSOR_M4K, 33, 0 },\n-  { \"4kec\", PROCESSOR_4KC, 33, 0 },\n-  { \"4kem\", PROCESSOR_4KC, 33, 0 },\n-  { \"4kep\", PROCESSOR_4KP, 33, 0 },\n-  { \"4ksd\", PROCESSOR_4KC, 33, 0 },\n-\n-  { \"24kc\", PROCESSOR_24KC, 33, 0 },\n-  { \"24kf2_1\", PROCESSOR_24KF2_1, 33, 0 },\n-  { \"24kf\", PROCESSOR_24KF2_1, 33, 0 },\n-  { \"24kf1_1\", PROCESSOR_24KF1_1, 33, 0 },\n-  { \"24kfx\", PROCESSOR_24KF1_1, 33, 0 },\n-  { \"24kx\", PROCESSOR_24KF1_1, 33, 0 },\n-\n-  { \"24kec\", PROCESSOR_24KC, 33, 0 }, /* 24K with DSP.  */\n-  { \"24kef2_1\", PROCESSOR_24KF2_1, 33, 0 },\n-  { \"24kef\", PROCESSOR_24KF2_1, 33, 0 },\n-  { \"24kef1_1\", PROCESSOR_24KF1_1, 33, 0 },\n-  { \"24kefx\", PROCESSOR_24KF1_1, 33, 0 },\n-  { \"24kex\", PROCESSOR_24KF1_1, 33, 0 },\n-\n-  { \"34kc\", PROCESSOR_24KC, 33, 0 }, /* 34K with MT/DSP.  */\n-  { \"34kf2_1\", PROCESSOR_24KF2_1, 33, 0 },\n-  { \"34kf\", PROCESSOR_24KF2_1, 33, 0 },\n-  { \"34kf1_1\", PROCESSOR_24KF1_1, 33, 0 },\n-  { \"34kfx\", PROCESSOR_24KF1_1, 33, 0 },\n-  { \"34kx\", PROCESSOR_24KF1_1, 33, 0 },\n-\n-  { \"74kc\", PROCESSOR_74KC, 33, 0 }, /* 74K with DSPr2.  */\n-  { \"74kf2_1\", PROCESSOR_74KF2_1, 33, 0 },\n-  { \"74kf\", PROCESSOR_74KF2_1, 33, 0 },\n-  { \"74kf1_1\", PROCESSOR_74KF1_1, 33, 0 },\n-  { \"74kfx\", PROCESSOR_74KF1_1, 33, 0 },\n-  { \"74kx\", PROCESSOR_74KF1_1, 33, 0 },\n-  { \"74kf3_2\", PROCESSOR_74KF3_2, 33, 0 },\n-\n-  { \"1004kc\", PROCESSOR_24KC, 33, 0 }, /* 1004K with MT/DSP.  */\n-  { \"1004kf2_1\", PROCESSOR_24KF2_1, 33, 0 },\n-  { \"1004kf\", PROCESSOR_24KF2_1, 33, 0 },\n-  { \"1004kf1_1\", PROCESSOR_24KF1_1, 33, 0 },\n-\n-  /* MIPS64 processors.  */\n-  { \"5kc\", PROCESSOR_5KC, 64, 0 },\n-  { \"5kf\", PROCESSOR_5KF, 64, 0 },\n-  { \"20kc\", PROCESSOR_20KC, 64, PTF_AVOID_BRANCHLIKELY },\n-  { \"sb1\", PROCESSOR_SB1, 64, PTF_AVOID_BRANCHLIKELY },\n-  { \"sb1a\", PROCESSOR_SB1A, 64, PTF_AVOID_BRANCHLIKELY },\n-  { \"sr71000\", PROCESSOR_SR71000, 64, PTF_AVOID_BRANCHLIKELY },\n-  { \"xlr\", PROCESSOR_XLR, 64, 0 },\n-  { \"loongson3a\", PROCESSOR_LOONGSON_3A, 64, PTF_AVOID_BRANCHLIKELY },\n-\n-  /* MIPS64 Release 2 processors.  */\n-  { \"octeon\", PROCESSOR_OCTEON, 65, PTF_AVOID_BRANCHLIKELY }\n+#define MIPS_CPU(NAME, CPU, ISA, FLAGS) \\\n+  { NAME, CPU, ISA, FLAGS },\n+#include \"mips-cpus.def\"\n+#undef MIPS_CPU\n };\n \n /* Default costs.  If these are used for a processor we should look\n@@ -15320,91 +15208,48 @@ mips_cpu_info_from_isa (int isa)\n   return NULL;\n }\n \n-/* Return true if GIVEN is the same as CANONICAL, or if it is CANONICAL\n-   with a final \"000\" replaced by \"k\".  Ignore case.\n+/* Return a mips_cpu_info entry determined by an option valued\n+   OPT.  */\n \n-   Note: this function is shared between GCC and GAS.  */\n-\n-static bool\n-mips_strict_matching_cpu_name_p (const char *canonical, const char *given)\n-{\n-  while (*given != 0 && TOLOWER (*given) == TOLOWER (*canonical))\n-    given++, canonical++;\n-\n-  return ((*given == 0 && *canonical == 0)\n-\t  || (strcmp (canonical, \"000\") == 0 && strcasecmp (given, \"k\") == 0));\n-}\n-\n-/* Return true if GIVEN matches CANONICAL, where GIVEN is a user-supplied\n-   CPU name.  We've traditionally allowed a lot of variation here.\n-\n-   Note: this function is shared between GCC and GAS.  */\n-\n-static bool\n-mips_matching_cpu_name_p (const char *canonical, const char *given)\n+static const struct mips_cpu_info *\n+mips_cpu_info_from_opt (int opt)\n {\n-  /* First see if the name matches exactly, or with a final \"000\"\n-     turned into \"k\".  */\n-  if (mips_strict_matching_cpu_name_p (canonical, given))\n-    return true;\n-\n-  /* If not, try comparing based on numerical designation alone.\n-     See if GIVEN is an unadorned number, or 'r' followed by a number.  */\n-  if (TOLOWER (*given) == 'r')\n-    given++;\n-  if (!ISDIGIT (*given))\n-    return false;\n+  switch (opt)\n+    {\n+    case MIPS_ARCH_OPTION_FROM_ABI:\n+      /* 'from-abi' selects the most compatible architecture for the\n+\t given ABI: MIPS I for 32-bit ABIs and MIPS III for 64-bit\n+\t ABIs.  For the EABIs, we have to decide whether we're using\n+\t the 32-bit or 64-bit version.  */\n+      return mips_cpu_info_from_isa (ABI_NEEDS_32BIT_REGS ? 1\n+\t\t\t\t     : ABI_NEEDS_64BIT_REGS ? 3\n+\t\t\t\t     : (TARGET_64BIT ? 3 : 1));\n \n-  /* Skip over some well-known prefixes in the canonical name,\n-     hoping to find a number there too.  */\n-  if (TOLOWER (canonical[0]) == 'v' && TOLOWER (canonical[1]) == 'r')\n-    canonical += 2;\n-  else if (TOLOWER (canonical[0]) == 'r' && TOLOWER (canonical[1]) == 'm')\n-    canonical += 2;\n-  else if (TOLOWER (canonical[0]) == 'r')\n-    canonical += 1;\n+    case MIPS_ARCH_OPTION_NATIVE:\n+      gcc_unreachable ();\n \n-  return mips_strict_matching_cpu_name_p (canonical, given);\n+    default:\n+      return &mips_cpu_info_table[opt];\n+    }\n }\n \n-/* Return the mips_cpu_info entry for the processor or ISA given\n-   by CPU_STRING.  Return null if the string isn't recognized.\n-\n-   A similar function exists in GAS.  */\n+/* Return a default mips_cpu_info entry, given that no -march= option\n+   was explicitly specified.  */\n \n static const struct mips_cpu_info *\n-mips_parse_cpu (const char *cpu_string)\n+mips_default_arch (void)\n {\n+#ifdef MIPS_CPU_STRING_DEFAULT\n   unsigned int i;\n-  const char *s;\n-\n-  /* In the past, we allowed upper-case CPU names, but it doesn't\n-     work well with the multilib machinery.  */\n-  for (s = cpu_string; *s != 0; s++)\n-    if (ISUPPER (*s))\n-      {\n-\twarning (0, \"CPU names must be lower case\");\n-\tbreak;\n-      }\n-\n-  /* 'from-abi' selects the most compatible architecture for the given\n-     ABI: MIPS I for 32-bit ABIs and MIPS III for 64-bit ABIs.  For the\n-     EABIs, we have to decide whether we're using the 32-bit or 64-bit\n-     version.  */\n-  if (strcasecmp (cpu_string, \"from-abi\") == 0)\n-    return mips_cpu_info_from_isa (ABI_NEEDS_32BIT_REGS ? 1\n-\t\t\t\t   : ABI_NEEDS_64BIT_REGS ? 3\n-\t\t\t\t   : (TARGET_64BIT ? 3 : 1));\n-\n-  /* 'default' has traditionally been a no-op.  Probably not very useful.  */\n-  if (strcasecmp (cpu_string, \"default\") == 0)\n-    return NULL;\n-\n   for (i = 0; i < ARRAY_SIZE (mips_cpu_info_table); i++)\n-    if (mips_matching_cpu_name_p (mips_cpu_info_table[i].name, cpu_string))\n+    if (strcmp (mips_cpu_info_table[i].name, MIPS_CPU_STRING_DEFAULT) == 0)\n       return mips_cpu_info_table + i;\n-\n-  return NULL;\n+  gcc_unreachable ();\n+#else\n+  /* 'from-abi' makes a good default: you get whatever the ABI\n+     requires.  */\n+  return mips_cpu_info_from_opt (MIPS_ARCH_OPTION_FROM_ABI);\n+#endif\n }\n \n /* Set up globals to generate code for the ISA or processor\n@@ -15436,26 +15281,16 @@ mips_set_tune (const struct mips_cpu_info *info)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-mips_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+mips_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t    const struct cl_decoded_option *decoded,\n \t\t    location_t loc ATTRIBUTE_UNUSED)\n {\n   size_t code = decoded->opt_index;\n   const char *arg = decoded->arg;\n \n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n-\n   switch (code)\n     {\n-    case OPT_march_:\n-    case OPT_mtune_:\n-      return mips_parse_cpu (arg) != 0;\n-\n-    case OPT_mips:\n-      mips_isa_option_info = mips_parse_cpu (ACONCAT ((\"mips\", arg, NULL)));\n-      return mips_isa_option_info != 0;\n-\n     case OPT_mno_flush_func:\n       opts->x_mips_cache_flush_func = NULL;\n       return true;\n@@ -15472,6 +15307,9 @@ mips_option_override (void)\n {\n   int i, start, regno, mode;\n \n+  if (global_options_set.x_mips_isa_option)\n+    mips_isa_option_info = &mips_cpu_info_table[mips_isa_option];\n+\n   /* Process flags as though we were generating non-MIPS16 code.  */\n   mips_base_mips16 = TARGET_MIPS16;\n   target_flags &= ~MASK_MIPS16;\n@@ -15499,8 +15337,8 @@ mips_option_override (void)\n      Similar code was added to GAS 2.14 (see tc-mips.c:md_after_parse_args()).\n      The GAS and GCC code should be kept in sync as much as possible.  */\n \n-  if (mips_arch_string != 0)\n-    mips_set_architecture (mips_parse_cpu (mips_arch_string));\n+  if (global_options_set.x_mips_arch_option)\n+    mips_set_architecture (mips_cpu_info_from_opt (mips_arch_option));\n \n   if (mips_isa_option_info != 0)\n     {\n@@ -15514,21 +15352,15 @@ mips_option_override (void)\n     }\n \n   if (mips_arch_info == 0)\n-    {\n-#ifdef MIPS_CPU_STRING_DEFAULT\n-      mips_set_architecture (mips_parse_cpu (MIPS_CPU_STRING_DEFAULT));\n-#else\n-      mips_set_architecture (mips_cpu_info_from_isa (MIPS_ISA_DEFAULT));\n-#endif\n-    }\n+    mips_set_architecture (mips_default_arch ());\n \n   if (ABI_NEEDS_64BIT_REGS && !ISA_HAS_64BIT_REGS)\n     error (\"%<-march=%s%> is not compatible with the selected ABI\",\n \t   mips_arch_info->name);\n \n   /* Optimize for mips_arch, unless -mtune selects a different processor.  */\n-  if (mips_tune_string != 0)\n-    mips_set_tune (mips_parse_cpu (mips_tune_string));\n+  if (global_options_set.x_mips_tune_option)\n+    mips_set_tune (mips_cpu_info_from_opt (mips_tune_option));\n \n   if (mips_tune_info == 0)\n     mips_set_tune (mips_arch_info);\n@@ -15788,19 +15620,19 @@ mips_option_override (void)\n   /* Default to working around R4000 errata only if the processor\n      was selected explicitly.  */\n   if ((target_flags_explicit & MASK_FIX_R4000) == 0\n-      && mips_matching_cpu_name_p (mips_arch_info->name, \"r4000\"))\n+      && strcmp (mips_arch_info->name, \"r4000\") == 0)\n     target_flags |= MASK_FIX_R4000;\n \n   /* Default to working around R4400 errata only if the processor\n      was selected explicitly.  */\n   if ((target_flags_explicit & MASK_FIX_R4400) == 0\n-      && mips_matching_cpu_name_p (mips_arch_info->name, \"r4400\"))\n+      && strcmp (mips_arch_info->name, \"r4400\") == 0)\n     target_flags |= MASK_FIX_R4400;\n \n   /* Default to working around R10000 errata only if the processor\n      was selected explicitly.  */\n   if ((target_flags_explicit & MASK_FIX_R10000) == 0\n-      && mips_matching_cpu_name_p (mips_arch_info->name, \"r10000\"))\n+      && strcmp (mips_arch_info->name, \"r10000\") == 0)\n     target_flags |= MASK_FIX_R10000;\n \n   /* Make sure that branch-likely instructions available when using"}, {"sha": "366970e677a6137e2fd923d4ed44444c2e75cd50", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=d371df6f10a5f5262df075ada4848720910b7880", "patch": "@@ -572,13 +572,6 @@ struct mips_cpu_info {\n #define TARGET_FP_EXCEPTIONS_DEFAULT MASK_FP_EXCEPTIONS\n #endif\n \n-/* 'from-abi' makes a good default: you get whatever the ABI requires.  */\n-#ifndef MIPS_ISA_DEFAULT\n-#ifndef MIPS_CPU_STRING_DEFAULT\n-#define MIPS_CPU_STRING_DEFAULT \"from-abi\"\n-#endif\n-#endif\n-\n #ifdef IN_LIBGCC2\n #undef TARGET_64BIT\n /* Make this compile time constant for libgcc2 */"}, {"sha": "e3294a7f7fe9afa804730b3f4c8df8697e78b0ed", "filename": "gcc/config/mips/mips.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fmips.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Fmips.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.opt?ref=d371df6f10a5f5262df075ada4848720910b7880", "patch": "@@ -59,7 +59,7 @@ Target Report Var(TARGET_MAD)\n Use PMC-style 'mad' instructions\n \n march=\n-Target RejectNegative Joined Var(mips_arch_string)\n+Target RejectNegative Joined Var(mips_arch_option) ToLower Enum(mips_arch_opt_value)\n -march=ISA\tGenerate code for the given ISA\n \n mbranch-cost=\n@@ -222,7 +222,7 @@ Target Report Var(TARGET_INTERLINK_MIPS16) Init(0)\n Generate code that can be safely linked with MIPS16 code.\n \n mips\n-Target RejectNegative Joined\n+Target RejectNegative Joined ToLower Enum(mips_mips_opt_value) Var(mips_isa_option)\n -mipsN\tGenerate code for ISA level N\n \n mips16\n@@ -339,7 +339,7 @@ Target Report Mask(SYNCI)\n Use synci instruction to invalidate i-cache\n \n mtune=\n-Target RejectNegative Joined Var(mips_tune_string)\n+Target RejectNegative Joined Var(mips_tune_option) ToLower Enum(mips_arch_opt_value)\n -mtune=PROCESSOR\tOptimize the output for PROCESSOR\n \n muninit-const-in-rodata"}, {"sha": "521738a94455d3a0e092772e60030c37820556c5", "filename": "gcc/config/mips/t-mips", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Ft-mips", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d371df6f10a5f5262df075ada4848720910b7880/gcc%2Fconfig%2Fmips%2Ft-mips", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-mips?ref=d371df6f10a5f5262df075ada4848720910b7880", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2002, 2003, 2006 Free Software Foundation, Inc.\n+# Copyright (C) 2002, 2003, 2006, 2011 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n #\n@@ -39,3 +39,8 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n \n LIB2_SIDITI_CONV_FUNCS=yes\n+\n+$(srcdir)/config/mips/mips-tables.opt: $(srcdir)/config/mips/genopt.sh \\\n+  $(srcdir)/config/mips/mips-cpus.def\n+\t$(SHELL) $(srcdir)/config/mips/genopt.sh $(srcdir)/config/mips > \\\n+\t\t$(srcdir)/config/mips/mips-tables.opt"}]}