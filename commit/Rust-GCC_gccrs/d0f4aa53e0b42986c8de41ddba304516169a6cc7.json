{"sha": "d0f4aa53e0b42986c8de41ddba304516169a6cc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBmNGFhNTNlMGI0Mjk4NmM4ZGU0MWRkYmEzMDQ1MTYxNjlhNmNjNw==", "commit": {"author": {"name": "Keith Seitz", "email": "keiths@redhat.com", "date": "2006-01-18T21:52:45Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2006-01-18T21:52:45Z"}, "message": "java-interp.h (_Jv_CompileMethod): Add declaration.\n\n        * include/java-interp.h (_Jv_CompileMethod): Add declaration.\n        (class _Jv_InterpMethod): Add _Jv_CompileMethod as a friend.\n        * interpret.cc (_Jv_CompileMethod): New function.\n        (run):  Massage code to allow for NULL args.\n        Update comments to explain NULL args.\n        Return if compiling the method and args is NULL.\n\nFrom-SVN: r109918", "tree": {"sha": "780f9c54ac5cfe5ef734495b62563e4e2b4f0cdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/780f9c54ac5cfe5ef734495b62563e4e2b4f0cdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0f4aa53e0b42986c8de41ddba304516169a6cc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0f4aa53e0b42986c8de41ddba304516169a6cc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0f4aa53e0b42986c8de41ddba304516169a6cc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0f4aa53e0b42986c8de41ddba304516169a6cc7/comments", "author": {"login": "shtiek", "id": 107581324, "node_id": "U_kgDOBmmPjA", "avatar_url": "https://avatars.githubusercontent.com/u/107581324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shtiek", "html_url": "https://github.com/shtiek", "followers_url": "https://api.github.com/users/shtiek/followers", "following_url": "https://api.github.com/users/shtiek/following{/other_user}", "gists_url": "https://api.github.com/users/shtiek/gists{/gist_id}", "starred_url": "https://api.github.com/users/shtiek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shtiek/subscriptions", "organizations_url": "https://api.github.com/users/shtiek/orgs", "repos_url": "https://api.github.com/users/shtiek/repos", "events_url": "https://api.github.com/users/shtiek/events{/privacy}", "received_events_url": "https://api.github.com/users/shtiek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a56e0baa694476ef6fcd90d27e18cec8ebbbe8db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56e0baa694476ef6fcd90d27e18cec8ebbbe8db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a56e0baa694476ef6fcd90d27e18cec8ebbbe8db"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "032a98db4ceb23d04d1967d98f4b7f0fb46fdce3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f4aa53e0b42986c8de41ddba304516169a6cc7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f4aa53e0b42986c8de41ddba304516169a6cc7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d0f4aa53e0b42986c8de41ddba304516169a6cc7", "patch": "@@ -1,3 +1,12 @@\n+2006-01-18  Keith Seitz  <keiths@redhat.com>\n+\n+\t* include/java-interp.h (_Jv_CompileMethod): Add declaration.\n+\t(class _Jv_InterpMethod): Add _Jv_CompileMethod as a friend.\n+\t* interpret.cc (_Jv_CompileMethod): New function.\n+\t(run): \tMassage code to allow for NULL args.\n+\tUpdate comments to explain NULL args.\n+\tReturn if compiling the method and args is NULL.\n+\n 2006-01-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR libgcj/25840"}, {"sha": "872fb10a32bee4b254a67a888203baf3b0d35160", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f4aa53e0b42986c8de41ddba304516169a6cc7/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f4aa53e0b42986c8de41ddba304516169a6cc7/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=d0f4aa53e0b42986c8de41ddba304516169a6cc7", "patch": "@@ -1,6 +1,6 @@\n // java-interp.h - Header file for the bytecode interpreter.  -*- c++ -*-\n \n-/* Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -44,6 +44,7 @@ void * _Jv_AllocMethodInvocation (jsize size);\n int  _Jv_count_arguments (_Jv_Utf8Const *signature,\n \t\t\t  jboolean staticp = true);\n void _Jv_VerifyMethod (_Jv_InterpMethod *method);\n+void _Jv_CompileMethod (_Jv_InterpMethod* method);\n \n /* the interpreter is written in C++, primarily because it makes it easy for\n  * the entire thing to be \"friend\" with class Class. */\n@@ -184,6 +185,10 @@ class _Jv_InterpMethod : public _Jv_MethodBase\n  public:\n   static void dump_object(jobject o);\n \n+#ifdef DIRECT_THREADED\n+  friend void _Jv_CompileMethod (_Jv_InterpMethod*);\n+#endif\n+  \n   friend class _Jv_ClassReader;\n   friend class _Jv_BytecodeVerifier;\n   friend class _Jv_StackTrace;"}, {"sha": "d6e8ccca023ddffe38c9d4c599740022e2415449", "filename": "libjava/interpret.cc", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0f4aa53e0b42986c8de41ddba304516169a6cc7/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0f4aa53e0b42986c8de41ddba304516169a6cc7/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=d0f4aa53e0b42986c8de41ddba304516169a6cc7", "patch": "@@ -1,6 +1,6 @@\n // interpret.cc - Code for the interpreter\n \n-/* Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -792,6 +792,8 @@ _Jv_InterpMethod::compile (const void * const *insn_targets)\n }\n #endif /* DIRECT_THREADED */\n \n+/* Run the given method.\n+   When args is NULL, don't run anything -- just compile it. */\n void\n _Jv_InterpMethod::run (void *retp, ffi_raw *args, _Jv_InterpMethod *meth)\n {\n@@ -812,19 +814,6 @@ _Jv_InterpMethod::run (void *retp, ffi_raw *args, _Jv_InterpMethod *meth)\n \n   _Jv_word locals[meth->max_locals];\n \n-  /* Go straight at it!  the ffi raw format matches the internal\n-     stack representation exactly.  At least, that's the idea.\n-  */\n-  memcpy ((void*) locals, (void*) args, meth->args_raw_size);\n-\n-  _Jv_word *pool_data = meth->defining_class->constants.data;\n-\n-  /* These three are temporaries for common code used by several\n-     instructions.  */\n-  void (*fun)();\n-  _Jv_ResolvedMethod* rmeth;\n-  int tmpval;\n-\n #define INSN_LABEL(op) &&insn_##op\n \n   static const void *const insn_target[] = \n@@ -1070,6 +1059,11 @@ _Jv_InterpMethod::run (void *retp, ffi_raw *args, _Jv_InterpMethod *meth)\n \tmeth->compile (insn_target);\n       _Jv_MutexUnlock (&compile_mutex);\n     }\n+\n+  // If we're only compiling, stop here\n+  if (args == NULL)\n+    return;\n+\n   pc = (insn_slot *) meth->prepared;\n \n #else\n@@ -1102,6 +1096,19 @@ _Jv_InterpMethod::run (void *retp, ffi_raw *args, _Jv_InterpMethod *meth)\n \n #define TAKE_GOTO pc = GOTO_VAL ()\n \n+  /* Go straight at it!  the ffi raw format matches the internal\n+     stack representation exactly.  At least, that's the idea.\n+  */\n+  memcpy ((void*) locals, (void*) args, meth->args_raw_size);\n+\n+  _Jv_word *pool_data = meth->defining_class->constants.data;\n+\n+  /* These three are temporaries for common code used by several\n+     instructions.  */\n+  void (*fun)();\n+  _Jv_ResolvedMethod* rmeth;\n+  int tmpval;\n+\n   try\n     {\n       // We keep nop around.  It is used if we're interpreting the\n@@ -3866,4 +3873,13 @@ _Jv_InterpreterEngine::do_post_miranda_hook (jclass klass)\n     }\n }\n \n+#ifdef DIRECT_THREADED\n+void\n+_Jv_CompileMethod (_Jv_InterpMethod* method)\n+{\n+  if (method->prepared == NULL)\n+    _Jv_InterpMethod::run (NULL, NULL, method);\n+}\n+#endif // DIRECT_THREADED\n+\n #endif // INTERPRETER"}]}