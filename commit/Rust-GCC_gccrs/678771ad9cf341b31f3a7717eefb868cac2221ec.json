{"sha": "678771ad9cf341b31f3a7717eefb868cac2221ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc4NzcxYWQ5Y2YzNDFiMzFmM2E3NzE3ZWVmYjg2OGNhYzIyMjFlYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-10-04T11:48:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-10-04T11:48:21Z"}, "message": "re PR tree-optimization/54735 (Segmentation fault in walk_aliased_vdefs_1)\n\n2012-10-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/54735\n\t* tree-ssa-pre.c (do_pre): Make sure to update virtual SSA form before\n\tcleaning up the CFG.\n\n\t* g++.dg/torture/pr54735.C: New testcase.\n\nFrom-SVN: r192078", "tree": {"sha": "dd9d76cd0e700400bbb123ca0bf30bce743ece75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd9d76cd0e700400bbb123ca0bf30bce743ece75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/678771ad9cf341b31f3a7717eefb868cac2221ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678771ad9cf341b31f3a7717eefb868cac2221ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/678771ad9cf341b31f3a7717eefb868cac2221ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678771ad9cf341b31f3a7717eefb868cac2221ec/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c1eb617e427a417dd7e1f79eee15b38362dbf53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1eb617e427a417dd7e1f79eee15b38362dbf53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1eb617e427a417dd7e1f79eee15b38362dbf53"}], "stats": {"total": 202, "additions": 199, "deletions": 3}, "files": [{"sha": "1e030d9fd9204fef3b0277e9230c9529065d0d94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/678771ad9cf341b31f3a7717eefb868cac2221ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/678771ad9cf341b31f3a7717eefb868cac2221ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=678771ad9cf341b31f3a7717eefb868cac2221ec", "patch": "@@ -1,6 +1,12 @@\n 2012-10-04  Richard Guenther  <rguenther@suse.de>\n \n-\tPR lto/47788\n+\tPR middle-end/54735\n+\t* tree-ssa-pre.c (do_pre): Make sure to update virtual SSA form before\n+\tcleaning up the CFG.\n+\n+2012-10-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/47799\n \t* tree-streamer-out.c (write_ts_block_tree_pointers): For\n \tinlined functions outer scopes write the ultimate origin\n \tas BLOCK_ABSTRACT_ORIGIN and BLOCK_SOURCE_LOCATION."}, {"sha": "6b6963efa28a0494682e82c8f3309804e03a4d45", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/678771ad9cf341b31f3a7717eefb868cac2221ec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/678771ad9cf341b31f3a7717eefb868cac2221ec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=678771ad9cf341b31f3a7717eefb868cac2221ec", "patch": "@@ -1,3 +1,8 @@\n+2012-10-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/54735\n+\t* g++.dg/torture/pr54735.C: New testcase.\n+\n 2012-10-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/54739"}, {"sha": "0604ec5179b4de88760349dbe0a75ad280a74eed", "filename": "gcc/testsuite/g++.dg/torture/pr54735.C", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/678771ad9cf341b31f3a7717eefb868cac2221ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54735.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/678771ad9cf341b31f3a7717eefb868cac2221ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54735.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr54735.C?ref=678771ad9cf341b31f3a7717eefb868cac2221ec", "patch": "@@ -0,0 +1,179 @@\n+// { dg-do compile }\n+\n+class Gmpfr\n+{};\n+class M : Gmpfr\n+{\n+public:\n+  Gmpfr infconst;\n+  M(int);\n+};\n+template<typename>struct A;\n+template<typename, int, int, int = 0 ? : 0, int = 0, int = 0>class N;\n+template<typename>class O;\n+template<typename>struct B;\n+struct C\n+{\n+  enum\n+  { value };\n+};\n+class D\n+{\n+public:\n+  enum\n+  { ret };\n+};\n+struct F\n+{\n+  enum\n+  { ret = 0 ? : 0 };\n+};\n+template<typename Derived>struct G\n+{\n+  typedef O<Derived>type;\n+};\n+struct H\n+{\n+  void operator * ();\n+};\n+struct I\n+{\n+  enum\n+  { RequireInitialization = C::value ? : 0, ReadCost };\n+};\n+template<typename Derived>struct J\n+{\n+  enum\n+  { ret = A<Derived>::InnerStrideAtCompileTime };\n+};\n+template<typename Derived>struct K\n+{\n+  enum\n+  { ret = A<Derived>::OuterStrideAtCompileTime };\n+};\n+template<typename Derived>class P : H\n+{\n+public:\n+  using H::operator *;\n+  typedef typename A<Derived>::Scalar Scalar;\n+  enum\n+  { RowsAtCompileTime                                        =\n+      A<Derived>::RowsAtCompileTime, ColsAtCompileTime       =\n+      A<Derived>::ColsAtCompileTime, SizeAtCompileTime       =\n+      F::ret, MaxRowsAtCompileTime                           =\n+      A<Derived>::MaxRowsAtCompileTime, MaxColsAtCompileTime =\n+      A<Derived>::MaxColsAtCompileTime, MaxSizeAtCompileTime =\n+      F::ret, Flags                                          =\n+      A<Derived>::Flags ? : 0 ? : 0, CoeffReadCost           =\n+      A<Derived>::CoeffReadCost, InnerStrideAtCompileTime    =\n+      J<Derived>::ret, OuterStrideAtCompileTime              = K<Derived>::ret };\n+  B<Derived> operator << (const Scalar&);\n+};\n+\n+template<typename Derived>class O : public P<Derived>\n+{};\n+\n+template<int _Cols>class L\n+{\n+public:\n+\n+  int cols()\n+  {\n+    return _Cols;\n+  }\n+};\n+template<typename Derived>class Q : public G<Derived>::type\n+{\n+public:\n+  typedef typename G<Derived>::type   Base;\n+  typedef typename A<Derived>::Index  Index;\n+  typedef typename A<Derived>::Scalar Scalar;\n+  L<Base::ColsAtCompileTime> m_storage;\n+  Index cols()\n+  {\n+    return m_storage.cols();\n+  }\n+\n+  Scalar& coeffRef(Index,\n+                   Index);\n+};\n+\n+template<typename _Scalar, int _Rows, int _Cols, int _Options, int _MaxRows,\n+         int _MaxCols>struct A<N<_Scalar, _Rows, _Cols, _Options, _MaxRows,\n+                                 _MaxCols> >\n+{\n+  typedef _Scalar Scalar;\n+  typedef int     Index;\n+  enum\n+  { RowsAtCompileTime, ColsAtCompileTime                              =\n+      _Cols, MaxRowsAtCompileTime, MaxColsAtCompileTime, Flags        =\n+      D::ret, CoeffReadCost                                           =\n+      I::ReadCost, InnerStrideAtCompileTime, OuterStrideAtCompileTime =\n+      0 ? : 0 };\n+};\n+template<typename _Scalar, int, int _Cols, int, int,\n+         int>class N : public Q<N<_Scalar, 0, _Cols> >\n+{\n+public:\n+  Q<N> Base;\n+  template<typename T0, typename T1>N(const T0&,\n+                                      const T1&);\n+};\n+void\n+__assert_fail(int)\n+throw() __attribute__((__noreturn__));\n+template<typename XprType>struct B\n+{\n+  typedef typename XprType::Scalar Scalar;\n+  typedef typename XprType::Index  Index;\n+  B(XprType & p1, const Scalar &) : m_xpr(p1), m_col(),\n+                                    m_currentBlockRows(1)\n+  {} B& operator, (const Scalar&)\n+  {\n+    Index a;\n+\n+    if (m_col == m_xpr.cols())\n+    {\n+      m_col              = 0;\n+      m_currentBlockRows = 1;\n+      a && \"Too       \" ? static_cast<void>(0) : __assert_fail(0);\n+    }\n+    m_col < m_xpr.cols()\n+    && \"Too       \" ? static_cast<void>(0) : __assert_fail(1);\n+    m_currentBlockRows ? static_cast<void>(0) : __assert_fail(4);\n+    m_xpr.coeffRef(0, m_col++) = 0;\n+    return *this;\n+  }\n+  ~B()\n+  {\n+    1 + m_currentBlockRows && m_col\n+    && \"Too       \" ? static_cast<void>(0) : __assert_fail(0);\n+  }\n+\n+  XprType& m_xpr;\n+  Index    m_col;\n+  Index    m_currentBlockRows;\n+};\n+\n+template<typename Derived>B<Derived>P<\n+  Derived >::operator << (const Scalar&)\n+{\n+    return B<Derived>(*static_cast<Derived *>(this), 0);\n+}\n+\n+template<class NT, int s>void\n+               check_()\n+{\n+    N<NT, 0, s>m(0, 0);\n+    m << 0, 0, 0, 0;\n+}\n+\n+template<class NT>void check()\n+{\n+    check_<NT, 3>();\n+}\n+\n+int main()\n+{\n+    check<M>();\n+}"}, {"sha": "8dbbed236c7f0f76c46798b32a8d30950fdcfa45", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/678771ad9cf341b31f3a7717eefb868cac2221ec/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/678771ad9cf341b31f3a7717eefb868cac2221ec/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=678771ad9cf341b31f3a7717eefb868cac2221ec", "patch": "@@ -4820,6 +4820,13 @@ do_pre (void)\n \n   free_scc_vn ();\n \n+  /* Tail merging invalidates the virtual SSA web, together with\n+     cfg-cleanup opportunities exposed by PRE this will wreck the\n+     SSA updating machinery.  So make sure to run update-ssa\n+     manually, before eventually scheduling cfg-cleanup as part of\n+     the todo.  */\n+  update_ssa (TODO_update_ssa_only_virtuals);\n+\n   return todo;\n }\n \n@@ -4845,8 +4852,7 @@ struct gimple_opt_pass pass_pre =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   TODO_rebuild_alias,\t\t\t/* todo_flags_start */\n-  TODO_update_ssa_only_virtuals  | TODO_ggc_collect\n-  | TODO_verify_ssa /* todo_flags_finish */\n+  TODO_ggc_collect | TODO_verify_ssa\t/* todo_flags_finish */\n  }\n };\n "}]}