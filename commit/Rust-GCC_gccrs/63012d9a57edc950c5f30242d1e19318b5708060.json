{"sha": "63012d9a57edc950c5f30242d1e19318b5708060", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwMTJkOWE1N2VkYzk1MGM1ZjMwMjQyZDFlMTkzMThiNTcwODA2MA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2016-09-19T21:51:56Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2016-09-19T21:51:56Z"}, "message": "Make max_align_t respect _Float128.\n\nThe _FloatN, _FloatNx, _DecimalN and _DecimalNx types are specified in\nsuch a way that they are basic types, meaning that max_align_t must be\nat least as aligned as those types.\n\nOn 32-bit x86, max_align_t is currently 8-byte aligned, but\n_Decimal128 and _Float128 are 16-byte aligned, so the alignment of\nmax_align_t needs to increase to meet the standard requirements for\nthese types.\n\nThis patch implements such an increase.  Because max_align_t needs to\nbe usable for C++ as well as for C, <stddef.h> can't actually refer to\n_Float128, but needs to use __float128 (or some other notation for the\ntype) instead.  And since __float128 is architecture-specific, there\nisn't a preprocessor conditional that means \"__float128 is available\"\n(whereas one could test __FLT128_MANT_DIG__ to see if _Float128 is\navailable; __SIZEOF_FLOAT128__ is available on x86 only).  But I\nbelieve the only case that actually has an alignment problem here is\n32-bit x86, and <stddef.h> already has lots of conditional specific to\nparticular architectures or OSes, so this patch uses a conditional on\n__i386__; that also is the minimal change that ensures neither size\nnor alignment of max_align_t is changed in any case other than where\nit is necessary.  If any other architectures turn out to have such an\nissue, it will show up as failures of one of the testcases added by\nthis patch.\n\nSuch an increase is of course an ABI change, but a reasonably safe\none, in that max_align_t doesn't tend to appear in library interfaces\n(rather, it's something to use when writing allocators and similar\ncode; most matches found on codesearch.debian.net look like copies of\nthe gnulib stddef.h module rather than anything actually using\nmax_align_t at all).\n\nmax_align_t_align has a corresponding change (adding _Float128 to the\ntypes considered).\n\n(I think glibc malloc alignment should also increase to 16-byte on\n32-bit x86 so it works for allocating objects of these types, which is\nnow straightforward given the fix made for 32-bit powerpc.)\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu, and\nspot-tested with -m32 that the new float128-align.c test now compiles\nwhere previously it didn't.\n\ngcc:\n\t* ginclude/stddef.h (max_align_t) [__i386__]: Add __float128\n\telement.\n\ngcc/c-family:\n\t* c-common.c (max_align_t_align): Also consider alignment of\n\tfloat128_type_node.\n\ngcc/testsuite:\n\t* gcc.dg/float128-align.c, gcc.dg/float128x-align.c,\n\tgcc.dg/float16-align.c, gcc.dg/float32-align.c,\n\tgcc.dg/float32x-align.c, gcc.dg/float64-align.c,\n\tgcc.dg/float64x-align.c, gcc.dg/floatn-align.h: New tests.\n\nFrom-SVN: r240248", "tree": {"sha": "1e372b5d3ca9c8b7eb0376ba7590a887e54583f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e372b5d3ca9c8b7eb0376ba7590a887e54583f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63012d9a57edc950c5f30242d1e19318b5708060", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63012d9a57edc950c5f30242d1e19318b5708060", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63012d9a57edc950c5f30242d1e19318b5708060", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63012d9a57edc950c5f30242d1e19318b5708060/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02410826258219adb58a832decc3594a59841042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02410826258219adb58a832decc3594a59841042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02410826258219adb58a832decc3594a59841042"}], "stats": {"total": 113, "additions": 111, "deletions": 2}, "files": [{"sha": "e3ec20e9020da9d1b5c01d34d5937e52a9388c4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63012d9a57edc950c5f30242d1e19318b5708060", "patch": "@@ -1,3 +1,8 @@\n+2016-09-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ginclude/stddef.h (max_align_t) [__i386__]: Add __float128\n+\telement.\n+\n 2016-09-19  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/77416"}, {"sha": "41afbc5af9b760f994664c0eea63c0a1ff371554", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=63012d9a57edc950c5f30242d1e19318b5708060", "patch": "@@ -1,3 +1,8 @@\n+2016-09-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (max_align_t_align): Also consider alignment of\n+\tfloat128_type_node.\n+\n 2016-09-15  Jason Merrill  <jason@redhat.com>\n \n \t* c-common.c (check_cxx_fundamental_alignment_constraints): Check"}, {"sha": "b6545c08105dace088dfb2f447553787e9472cc6", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=63012d9a57edc950c5f30242d1e19318b5708060", "patch": "@@ -12850,8 +12850,11 @@ scalar_to_vector (location_t loc, enum tree_code code, tree op0, tree op1,\n unsigned\n max_align_t_align ()\n {\n-  return MAX (TYPE_ALIGN (long_long_integer_type_node),\n-\t      TYPE_ALIGN (long_double_type_node));\n+  unsigned int max_align = MAX (TYPE_ALIGN (long_long_integer_type_node),\n+\t\t\t\tTYPE_ALIGN (long_double_type_node));\n+  if (float128_type_node != NULL_TREE)\n+    max_align = MAX (max_align, TYPE_ALIGN (float128_type_node));\n+  return max_align;\n }\n \n /* Return true iff ALIGN is an integral constant that is a fundamental"}, {"sha": "ced2d8555ee0624f43e6bf8f9945a0ef10f82104", "filename": "gcc/ginclude/stddef.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Fginclude%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Fginclude%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstddef.h?ref=63012d9a57edc950c5f30242d1e19318b5708060", "patch": "@@ -426,6 +426,14 @@ typedef __WINT_TYPE__ wint_t;\n typedef struct {\n   long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));\n   long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));\n+  /* _Float128 is defined as a basic type, so max_align_t must be\n+     sufficiently aligned for it.  This code must work in C++, so we\n+     use __float128 here; that is only available on some\n+     architectures, but only on i386 is extra alignment needed for\n+     __float128.  */\n+#ifdef __i386__\n+  __float128 __max_align_f128 __attribute__((__aligned__(__alignof(__float128))));\n+#endif\n } max_align_t;\n #endif\n #endif /* C11 or C++11.  */"}, {"sha": "741ec97005437abea9087ce72f16bc123f0cfcd0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=63012d9a57edc950c5f30242d1e19318b5708060", "patch": "@@ -1,3 +1,10 @@\n+2016-09-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/float128-align.c, gcc.dg/float128x-align.c,\n+\tgcc.dg/float16-align.c, gcc.dg/float32-align.c,\n+\tgcc.dg/float32x-align.c, gcc.dg/float64-align.c,\n+\tgcc.dg/float64x-align.c, gcc.dg/floatn-align.h: New tests.\n+\n 2016-09-19  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/77416"}, {"sha": "511540b7bdbaab86ea450cfa311e7fca10412895", "filename": "gcc/testsuite/gcc.dg/float128-align.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat128-align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat128-align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat128-align.c?ref=63012d9a57edc950c5f30242d1e19318b5708060", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float128 alignment.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float128 } */\n+/* { dg-require-effective-target float128 } */\n+\n+#define WIDTH 128\n+#define EXT 0\n+#include \"floatn-align.h\""}, {"sha": "45b3e5b265fcedff8c0836a7ec8ad165159331c0", "filename": "gcc/testsuite/gcc.dg/float128x-align.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat128x-align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat128x-align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat128x-align.c?ref=63012d9a57edc950c5f30242d1e19318b5708060", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float128 alignment.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float128x } */\n+/* { dg-require-effective-target float128x } */\n+\n+#define WIDTH 128\n+#define EXT 1\n+#include \"floatn-align.h\""}, {"sha": "90e6f455c87d65791b065709be8d560fce1b3547", "filename": "gcc/testsuite/gcc.dg/float16-align.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat16-align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat16-align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat16-align.c?ref=63012d9a57edc950c5f30242d1e19318b5708060", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float16 alignment.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float16 } */\n+/* { dg-require-effective-target float16 } */\n+\n+#define WIDTH 16\n+#define EXT 0\n+#include \"floatn-align.h\""}, {"sha": "c881700a203e4898dfb68795d1d4a3dcd69e5ae8", "filename": "gcc/testsuite/gcc.dg/float32-align.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat32-align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat32-align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat32-align.c?ref=63012d9a57edc950c5f30242d1e19318b5708060", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float32 alignment.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float32 } */\n+/* { dg-require-effective-target float32 } */\n+\n+#define WIDTH 32\n+#define EXT 0\n+#include \"floatn-align.h\""}, {"sha": "da396c67e5e747e9f7a6d26431377a8efc155674", "filename": "gcc/testsuite/gcc.dg/float32x-align.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat32x-align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat32x-align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat32x-align.c?ref=63012d9a57edc950c5f30242d1e19318b5708060", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float32 alignment.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float32x } */\n+/* { dg-require-effective-target float32x } */\n+\n+#define WIDTH 32\n+#define EXT 1\n+#include \"floatn-align.h\""}, {"sha": "82266e33fc7eefeb92ae05a4b9c0ceddbbec257a", "filename": "gcc/testsuite/gcc.dg/float64-align.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat64-align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat64-align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat64-align.c?ref=63012d9a57edc950c5f30242d1e19318b5708060", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float64 alignment.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float64 } */\n+/* { dg-require-effective-target float64 } */\n+\n+#define WIDTH 64\n+#define EXT 0\n+#include \"floatn-align.h\""}, {"sha": "8916071ceba641776df87d434ce455f01f831363", "filename": "gcc/testsuite/gcc.dg/float64x-align.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat64x-align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat64x-align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat64x-align.c?ref=63012d9a57edc950c5f30242d1e19318b5708060", "patch": "@@ -0,0 +1,9 @@\n+/* Test _Float64 alignment.  */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float64x } */\n+/* { dg-require-effective-target float64x } */\n+\n+#define WIDTH 64\n+#define EXT 1\n+#include \"floatn-align.h\""}, {"sha": "3196f33066205ba8b6bea4a6123c35ee21b30d5e", "filename": "gcc/testsuite/gcc.dg/floatn-align.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloatn-align.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63012d9a57edc950c5f30242d1e19318b5708060/gcc%2Ftestsuite%2Fgcc.dg%2Ffloatn-align.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloatn-align.h?ref=63012d9a57edc950c5f30242d1e19318b5708060", "patch": "@@ -0,0 +1,18 @@\n+/* Tests for _FloatN / _FloatNx types: test max_align_t alignment.\n+   Before including this file, define WIDTH as the value N; define EXT\n+   to 1 for _FloatNx and 0 for _FloatN.  */\n+\n+#define CONCATX(X, Y) X ## Y\n+#define CONCAT(X, Y) CONCATX (X, Y)\n+#define CONCAT3(X, Y, Z) CONCAT (CONCAT (X, Y), Z)\n+\n+#if EXT\n+# define TYPE CONCAT3 (_Float, WIDTH, x)\n+#else\n+# define TYPE CONCAT (_Float, WIDTH)\n+#endif\n+\n+#include <stddef.h>\n+\n+_Static_assert (_Alignof (max_align_t) >= _Alignof (TYPE),\n+\t\t\"max_align_t must be at least as aligned as _Float* types\");"}]}