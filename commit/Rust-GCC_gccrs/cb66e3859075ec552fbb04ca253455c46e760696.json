{"sha": "cb66e3859075ec552fbb04ca253455c46e760696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I2NmUzODU5MDc1ZWM1NTJmYmIwNGNhMjUzNDU1YzQ2ZTc2MDY5Ng==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-07-06T19:01:21Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-07-06T19:01:21Z"}, "message": "c-common.h (c_comon_handle_filename, [...]): New.\n\n\t* c-common.h (c_comon_handle_filename,\n\tc_common_missing_arguement): New.\n\t* c-lang.c (LANG_HOOKS_HANDLE_FILENAME,\n\tLANG_HOOKS_MISSING_ARGUMENT): New.\n\t* c-opts.c (missing_arg): Rename c_common_missing_argument,\n\tupdate to be an appropriate langhook.\n\t(c_common_handle_option): Don't handle filenames.\n\t(c_common_handle_filename): New.\n\t* hooks.c (hook_void_constcharptr,\n\thook_bool_constcharptr_size_t_false): New.\n\t* hooks.h (hook_void_constcharptr,\n\thook_bool_constcharptr_size_t_false): New.\n\t* langhooks-def.h (LANG_HOOKS_HANDLE_FILENAME,\n\tLANG_HOOKS_MISSING_ARGUMENT): New.\n\t(LANG_HOOKS_INITIALIZER): Update.\n\t* langhooks.h (struct lang_hooks): Add handle_filename and\n\tmissing_argument.\n\t* opts.c (handle_option): Don't handle filenames here, but ...\n\t(handle_options): ... here.\n\t(common_handle_option): Don't handle missing arguments here.\n\t* objc/objc-lang.c (LANG_HOOKS_HANDLE_FILENAME,\n\tLANG_HOOKS_MISSING_ARGUMENT): New.\nada:\n\t* misc.c (gnat_handle_option): Don't handle filenames.\ncp:\n\t* cp-lang.c (LANG_HOOKS_HANDLE_FILENAME,\n\tLANG_HOOKS_MISSING_ARGUMENT): Override.\nf:\n\t* top.c (ffe_handle_option): Don't handle filenames.\njava:\n\t* lang.c (java_handle_option): Don't handle filenames.\n\nFrom-SVN: r69011", "tree": {"sha": "2c35f94351c2c6323b73a7de33df3a43dba7c2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c35f94351c2c6323b73a7de33df3a43dba7c2d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb66e3859075ec552fbb04ca253455c46e760696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb66e3859075ec552fbb04ca253455c46e760696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb66e3859075ec552fbb04ca253455c46e760696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb66e3859075ec552fbb04ca253455c46e760696/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f55ade6e34ae3da57dd1a270c4bee55ad4f85cf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f55ade6e34ae3da57dd1a270c4bee55ad4f85cf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f55ade6e34ae3da57dd1a270c4bee55ad4f85cf5"}], "stats": {"total": 341, "additions": 196, "deletions": 145}, "files": [{"sha": "c93c75031497d32e3dcdefd4ce0ffcf2c5e3f4a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -1,3 +1,28 @@\n+2003-07-06  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* c-common.h (c_comon_handle_filename,\n+\tc_common_missing_arguement): New.\n+\t* c-lang.c (LANG_HOOKS_HANDLE_FILENAME,\n+\tLANG_HOOKS_MISSING_ARGUMENT): New.\n+\t* c-opts.c (missing_arg): Rename c_common_missing_argument,\n+\tupdate to be an appropriate langhook.\n+\t(c_common_handle_option): Don't handle filenames.\n+\t(c_common_handle_filename): New.\n+\t* hooks.c (hook_void_constcharptr,\n+\thook_bool_constcharptr_size_t_false): New.\n+\t* hooks.h (hook_void_constcharptr,\n+\thook_bool_constcharptr_size_t_false): New.\n+\t* langhooks-def.h (LANG_HOOKS_HANDLE_FILENAME,\n+\tLANG_HOOKS_MISSING_ARGUMENT): New.\n+\t(LANG_HOOKS_INITIALIZER): Update.\n+\t* langhooks.h (struct lang_hooks): Add handle_filename and\n+\tmissing_argument.\n+\t* opts.c (handle_option): Don't handle filenames here, but ...\n+\t(handle_options): ... here.\n+\t(common_handle_option): Don't handle missing arguments here.\n+\t* objc/objc-lang.c (LANG_HOOKS_HANDLE_FILENAME,\n+\tLANG_HOOKS_MISSING_ARGUMENT): New.\n+\n 2003-07-06  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* Makfile.in: Remove traces of mbchar."}, {"sha": "467111fa1c89123834fe0866d3aff059fd5bc340", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -1,3 +1,7 @@\n+2003-07-06  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* misc.c (gnat_handle_option): Don't handle filenames.\n+\n 2003-07-04  H.J. Lu <hongjiu.lu@intel.com>\n \n \t* Make-lang.in: Replace PWD with PWD_COMMAND."}, {"sha": "60232bf59970f3b9d1b5ad6e27ba30e75ab040f5", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -226,10 +226,6 @@ gnat_handle_option (size_t scode, const char *arg, int value ATTRIBUTE_UNUSED)\n   char *q;\n   unsigned int i;\n \n-  /* Ignore file names.  */\n-  if (code == N_OPTS)\n-      return 1;\n-\n   switch (code)\n     {\n     default:"}, {"sha": "bafe85709004d8446d98ccde003bee4919f402f7", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -896,6 +896,8 @@ extern tree handle_format_attribute (tree *, tree, tree, int, bool *);\n extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);\n extern void c_common_insert_default_attributes (tree);\n extern int c_common_handle_option (size_t code, const char *arg, int value);\n+extern void c_common_handle_filename (const char *filename);\n+extern bool c_common_missing_argument (const char *opt, size_t code);\n extern tree c_common_type_for_mode (enum machine_mode, int);\n extern tree c_common_type_for_size (unsigned int, int);\n extern tree c_common_unsigned_type (tree);"}, {"sha": "99b01ec82a283ca4451dd4850a94a8dfe565c112", "filename": "gcc/c-lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -45,6 +45,10 @@ enum c_language_kind c_language = clk_c;\n #define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n #undef LANG_HOOKS_HANDLE_OPTION\n #define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n+#undef LANG_HOOKS_HANDLE_FILENAME\n+#define LANG_HOOKS_HANDLE_FILENAME c_common_handle_filename\n+#undef LANG_HOOKS_MISSING_ARGUMENT\n+#define LANG_HOOKS_MISSING_ARGUMENT c_common_missing_argument\n #undef LANG_HOOKS_POST_OPTIONS\n #define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET"}, {"sha": "063e6e208c36728d87b1dbaf0c021e4ffc0f822d", "filename": "gcc/c-opts.c", "status": "modified", "additions": 31, "deletions": 43, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -97,7 +97,6 @@ static size_t include_cursor;\n /* Permit Fotran front-end options.  */\n static bool permit_fortran_options;\n \n-void missing_arg (enum opt_code);\n static void set_Wimplicit (int);\n static void print_help (void);\n static void handle_OPT_d (const char *);\n@@ -125,51 +124,37 @@ static struct deferred_opt\n   const char *arg;\n } *deferred_opts;\n \n-/* Complain that switch OPT_INDEX expects an argument but none was\n-   provided.  */\n-void\n-missing_arg (enum opt_code code)\n+/* Complain that switch CODE expects an argument but none was\n+   provided.  OPT was the command-line option.  Return FALSE to get\n+   the default message in opts.c, TRUE if we provide a specialized\n+   one.  */\n+bool\n+c_common_missing_argument (const char *opt, size_t code)\n {\n-  const char *opt_text = cl_options[code].opt_text;\n-\n   switch (code)\n     {\n-    case OPT__output_pch_:\n-    case OPT_Wformat_:\n-    case OPT_d:\n-    case OPT_fabi_version_:\n-    case OPT_fbuiltin_:\n-    case OPT_fdump_:\n-    case OPT_fname_mangling_version_:\n-    case OPT_ftabstop_:\n-    case OPT_fexec_charset_:\n-    case OPT_fwide_exec_charset_:\n-    case OPT_ftemplate_depth_:\n-    case OPT_iprefix:\n-    case OPT_iwithprefix:\n-    case OPT_iwithprefixbefore:\n     default:\n-      error (\"missing argument to \\\"-%s\\\"\", opt_text);\n-      break;\n+      /* Pick up the default message.  */\n+      return false;\n \n     case OPT_fconstant_string_class_:\n-      error (\"no class name specified with \\\"-%s\\\"\", opt_text);\n+      error (\"no class name specified with \\\"%s\\\"\", opt);\n       break;\n \n     case OPT_A:\n-      error (\"assertion missing after \\\"-%s\\\"\", opt_text);\n+      error (\"assertion missing after \\\"%s\\\"\", opt);\n       break;\n \n     case OPT_D:\n     case OPT_U:\n-      error (\"macro name missing after \\\"-%s\\\"\", opt_text);\n+      error (\"macro name missing after \\\"%s\\\"\", opt);\n       break;\n \n     case OPT_I:\n     case OPT_idirafter:\n     case OPT_isysroot:\n     case OPT_isystem:\n-      error (\"missing path after \\\"-%s\\\"\", opt_text);\n+      error (\"missing path after \\\"%s\\\"\", opt);\n       break;\n \n     case OPT_MF:\n@@ -178,14 +163,16 @@ missing_arg (enum opt_code code)\n     case OPT_include:\n     case OPT_imacros:\n     case OPT_o:\n-      error (\"missing filename after \\\"-%s\\\"\", opt_text);\n+      error (\"missing filename after \\\"%s\\\"\", opt);\n       break;\n \n     case OPT_MQ:\n     case OPT_MT:\n-      error (\"missing target after \\\"-%s\\\"\", opt_text);\n+      error (\"missing makefile target after \\\"%s\\\"\", opt);\n       break;\n     }\n+\n+  return true;\n }\n \n /* Defer option CODE with argument ARG.  */\n@@ -261,18 +248,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n   enum opt_code code = (enum opt_code) scode;\n   int result = 1;\n \n-  if (code == N_OPTS)\n-    {\n-      if (!in_fname)\n-\tin_fname = arg;\n-      else if (!out_fname)\n-\tout_fname = arg;\n-      else\n-\t  error (\"too many filenames given.  Type %s --help for usage\",\n-\t\t progname);\n-      return 1;\n-    }\n-\n   switch (code)\n     {\n     default:\n@@ -700,7 +675,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n     case OPT_fthis_is_variable:\n     case OPT_fvtable_thunks:\n     case OPT_fxref:\n-      warning (\"switch \\\"%s\\\" is no longer supported\", option->opt_text);\n+      warning (\"switch \\\"-%s\\\" is no longer supported\", option->opt_text);\n       break;\n \n     case OPT_fabi_version_:\n@@ -716,7 +691,8 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       if (value)\n \tflag_external_templates = true;\n     cp_deprecated:\n-      warning (\"switch \\\"%s\\\" is deprecated, please see documentation for details\", option->opt_text);\n+      warning (\"switch \\\"-%s\\\" is deprecated, please see documentation \"\n+\t       \"for details\", option->opt_text);\n       break;\n \n     case OPT_fasm:\n@@ -1059,6 +1035,18 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n   return result;\n }\n \n+/* Handle FILENAME from the command line.  */\n+void\n+c_common_handle_filename (const char *filename)\n+{\n+  if (!in_fname)\n+    in_fname = filename;\n+  else if (!out_fname)\n+    out_fname = filename;\n+  else\n+    error (\"output filename specified twice\");\n+}\n+\n /* Post-switch processing.  */\n bool\n c_common_post_options (const char **pfilename)"}, {"sha": "63227de4945005b2cd0691ac9f49eb53538b2bc0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -1,3 +1,8 @@\n+2003-07-06  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cp-lang.c (LANG_HOOKS_HANDLE_FILENAME,\n+\tLANG_HOOKS_MISSING_ARGUMENT): Override.\n+\n 2003-07-05  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/11431"}, {"sha": "affc964664065db4ae8a91a9bdea98f77f7fa038", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -53,6 +53,10 @@ static bool cp_var_mod_type_p (tree);\n #define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n #undef LANG_HOOKS_HANDLE_OPTION\n #define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n+#undef LANG_HOOKS_HANDLE_FILENAME\n+#define LANG_HOOKS_HANDLE_FILENAME c_common_handle_filename\n+#undef LANG_HOOKS_MISSING_ARGUMENT\n+#define LANG_HOOKS_MISSING_ARGUMENT c_common_missing_argument\n #undef LANG_HOOKS_POST_OPTIONS\n #define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET"}, {"sha": "34483fe06ffb919b69be5caa5b0d1fc98dfd5dae", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -1,3 +1,7 @@\n+Sun Jul  6 20:01:29 2003  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* top.c (ffe_handle_option): Don't handle filenames.\n+\n 2003-07-05  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \tPR Fortran/11301"}, {"sha": "81d6c68988fff569347a78c3be717ede0abd0863", "filename": "gcc/f/top.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Ff%2Ftop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Ff%2Ftop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftop.c?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -178,10 +178,6 @@ ffe_handle_option (size_t scode, const char *arg, int value)\n {\n   enum opt_code code = (enum opt_code) scode;\n \n-  /* Ignore file names.  */\n-  if (code == N_OPTS)\n-    return 1;\n-\n   switch (code)\n     {\n     default:"}, {"sha": "c022eb38853432ba096f56fba5b188879103895b", "filename": "gcc/hooks.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -68,6 +68,11 @@ hook_void_FILEptr_constcharptr (FILE *a ATTRIBUTE_UNUSED, const char *b ATTRIBUT\n {\n }\n \n+void\n+hook_void_constcharptr (const char *a ATTRIBUTE_UNUSED)\n+{\n+}\n+\n /* Used for the TARGET_ASM_CAN_OUTPUT_MI_THUNK hook.  */\n bool\n hook_bool_tree_hwi_hwi_tree_false (tree a ATTRIBUTE_UNUSED,\n@@ -87,6 +92,13 @@ hook_bool_tree_hwi_hwi_tree_true (tree a ATTRIBUTE_UNUSED,\n   return true;\n }\n \n+bool\n+hook_bool_constcharptr_size_t_false (const char *a ATTRIBUTE_UNUSED,\n+\t\t\t\t     size_t b ATTRIBUTE_UNUSED)\n+{\n+  return false;\n+}\n+\n bool\n default_can_output_mi_thunk_no_vcall (tree a ATTRIBUTE_UNUSED,\n \t\t\t\t      HOST_WIDE_INT b ATTRIBUTE_UNUSED,"}, {"sha": "6fa0bbec3c35d1d1095cbf44afb2cf223f7c7fbb", "filename": "gcc/hooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -31,12 +31,14 @@ bool hook_bool_tree_hwi_hwi_tree_true (tree, HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t       tree);\n bool hook_bool_rtx_false (rtx);\n bool hook_bool_rtx_int_int_intp_false (rtx, int, int, int *);\n+bool hook_bool_constcharptr_size_t_false (const char *, size_t);\n \n void hook_void_tree_int (tree, int);\n void hook_void_void (void);\n void hook_void_FILEptr_constcharptr (FILE *, const char *);\n void hook_void_tree (tree);\n void hook_void_tree_treeptr (tree, tree *);\n+void hook_void_constcharptr (const char *);\n \n int hook_int_tree_tree_1 (tree, tree);\n int hook_int_rtx_0 (rtx);"}, {"sha": "8627d269dc435105cfd254f4fb41dbffeaed7788", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -1,3 +1,7 @@\n+2003-07-06  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* lang.c (java_handle_option): Don't handle filenames.\n+\n 2003-07-02  Zack Weinberg  <zack@codesourcery.com>\n \n \t* jcf-path.c: Don't default-define PATH_SEPARATOR nor"}, {"sha": "7402ab7f086ce6c859107813c8fa58dc3ed64606", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -267,10 +267,6 @@ java_handle_option (size_t scode, const char *arg, int value)\n {\n   enum opt_code code = (enum opt_code) scode;\n \n-  /* Ignore file names.  */\n-  if (code == N_OPTS)\n-      return 1;\n-\n   switch (code)\n     {\n     default:"}, {"sha": "a598c05114e2ac2e861c2ffb3346e50c48064774", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -90,6 +90,8 @@ extern void write_global_declarations (void);\n #define LANG_HOOKS_CLEAR_BINDING_STACK\tlhd_clear_binding_stack\n #define LANG_HOOKS_INIT_OPTIONS\t\thook_uint_uint_constcharptrptr_0\n #define LANG_HOOKS_HANDLE_OPTION\thook_int_size_t_constcharptr_int_0\n+#define LANG_HOOKS_HANDLE_FILENAME\thook_void_constcharptr\n+#define LANG_HOOKS_MISSING_ARGUMENT\thook_bool_constcharptr_size_t_false\n #define LANG_HOOKS_POST_OPTIONS\t\tlhd_post_options\n #define LANG_HOOKS_GET_ALIAS_SET\tlhd_get_alias_set\n #define LANG_HOOKS_EXPAND_CONSTANT\tlhd_return_tree\n@@ -244,6 +246,8 @@ extern int lhd_tree_dump_type_quals (tree);\n   LANG_HOOKS_TREE_SIZE, \\\n   LANG_HOOKS_INIT_OPTIONS, \\\n   LANG_HOOKS_HANDLE_OPTION, \\\n+  LANG_HOOKS_HANDLE_FILENAME, \\\n+  LANG_HOOKS_MISSING_ARGUMENT, \\\n   LANG_HOOKS_POST_OPTIONS, \\\n   LANG_HOOKS_INIT, \\\n   LANG_HOOKS_FINISH, \\"}, {"sha": "1ba3bfe3743e504071c0ca081e670bb9dd32af86", "filename": "gcc/langhooks.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -217,6 +217,13 @@ struct lang_hooks\n      valid and should not be treated as language-independent too.  */\n   int (*handle_option) (size_t code, const char *arg, int value);\n \n+  /* Handle a filename on the command line.  */\n+  void (*handle_filename) (const char *filename);\n+\n+  /* Return false to use the default complaint about a missing\n+     argument, otherwise output a complaint and return true.  */\n+  bool (*missing_argument) (const char *opt, size_t code);\n+\n   /* Called when all command line options have been parsed to allow\n      further processing and initialization\n "}, {"sha": "99e3967e1c8e7b24d052e045edc18a07424440c1", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -43,6 +43,10 @@ enum c_language_kind c_language = clk_objc;\n #define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n #undef LANG_HOOKS_HANDLE_OPTION\n #define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n+#undef LANG_HOOKS_HANDLE_FILENAME\n+#define LANG_HOOKS_HANDLE_FILENAME c_common_handle_filename\n+#undef LANG_HOOKS_MISSING_ARGUMENT\n+#define LANG_HOOKS_MISSING_ARGUMENT c_common_missing_argument\n #undef LANG_HOOKS_POST_OPTIONS\n #define LANG_HOOKS_POST_OPTIONS c_common_post_options\n #undef LANG_HOOKS_GET_ALIAS_SET"}, {"sha": "f3889c77a1ac7d4d2a286f319abe7a1d163ea0fd", "filename": "gcc/opts.c", "status": "modified", "additions": 84, "deletions": 90, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb66e3859075ec552fbb04ca253455c46e760696/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=cb66e3859075ec552fbb04ca253455c46e760696", "patch": "@@ -297,106 +297,96 @@ handle_option (const char **argv, unsigned int lang_mask)\n \n   opt = argv[0];\n \n-  /* Interpret \"-\" or a non-switch as a file name.  */\n-  if (opt[0] != '-' || opt[1] == '\\0')\n+  /* Drop the \"no-\" from negative switches.  */\n+  if ((opt[1] == 'W' || opt[1] == 'f')\n+      && opt[2] == 'n' && opt[3] == 'o' && opt[4] == '-')\n     {\n-      opt_index = cl_options_count;\n-      arg = opt;\n-      main_input_filename = opt;\n-      result = (*lang_hooks.handle_option) (opt_index, arg, value);\n+      size_t len = strlen (opt) - 3;\n+\n+      dup = xmalloc (len + 1);\n+      dup[0] = '-';\n+      dup[1] = opt[1];\n+      memcpy (dup + 2, opt + 5, len - 2 + 1);\n+      opt = dup;\n+      value = 0;\n     }\n-  else\n-    {\n-      /* Drop the \"no-\" from negative switches.  */\n-      if ((opt[1] == 'W' || opt[1] == 'f')\n-\t  && opt[2] == 'n' && opt[3] == 'o' && opt[4] == '-')\n-\t{\n-\t  size_t len = strlen (opt) - 3;\n-\n-\t  dup = xmalloc (len + 1);\n-\t  dup[0] = '-';\n-\t  dup[1] = opt[1];\n-\t  memcpy (dup + 2, opt + 5, len - 2 + 1);\n-\t  opt = dup;\n-\t  value = 0;\n-\t}\n \n-      opt_index = find_opt (opt + 1, lang_mask | CL_COMMON);\n-      if (opt_index == cl_options_count)\n-\tgoto done;\n+  opt_index = find_opt (opt + 1, lang_mask | CL_COMMON);\n+  if (opt_index == cl_options_count)\n+    goto done;\n \n-      option = &cl_options[opt_index];\n+  option = &cl_options[opt_index];\n \n-      /* Reject negative form of switches that don't take negatives as\n-\t unrecognized.  */\n-      if (!value && (option->flags & CL_REJECT_NEGATIVE))\n-\tgoto done;\n+  /* Reject negative form of switches that don't take negatives as\n+     unrecognized.  */\n+  if (!value && (option->flags & CL_REJECT_NEGATIVE))\n+    goto done;\n \n-      /* We've recognized this switch.  */\n-      result = 1;\n+  /* We've recognized this switch.  */\n+  result = 1;\n \n-      /* Sort out any argument the switch takes.  */\n-      if (option->flags & CL_JOINED)\n+  /* Sort out any argument the switch takes.  */\n+  if (option->flags & CL_JOINED)\n+    {\n+      /* Have arg point to the original switch.  This is because\n+\t some code, such as disable_builtin_function, expects its\n+\t argument to be persistent until the program exits.  */\n+      arg = argv[0] + cl_options[opt_index].opt_len + 1;\n+      if (!value)\n+\targ += strlen (\"no-\");\n+\n+      if (*arg == '\\0' && !(option->flags & CL_MISSING_OK))\n \t{\n-\t  /* Have arg point to the original switch.  This is because\n-\t     some code, such as disable_builtin_function, expects its\n-\t     argument to be persistent until the program exits.  */\n-\t  arg = argv[0] + cl_options[opt_index].opt_len + 1;\n-\t  if (!value)\n-\t    arg += strlen (\"no-\");\n-\n-\t  if (*arg == '\\0' && !(option->flags & CL_MISSING_OK))\n+\t  if (option->flags & CL_SEPARATE)\n \t    {\n-\t      if (option->flags & CL_SEPARATE)\n-\t\t{\n-\t\t  arg = argv[1];\n-\t\t  result = 2;\n-\t\t}\n-\t      else\n-\t\t/* Missing argument.  */\n-\t\targ = NULL;\n+\t      arg = argv[1];\n+\t      result = 2;\n \t    }\n+\t  else\n+\t    /* Missing argument.  */\n+\t    arg = NULL;\n \t}\n-      else if (option->flags & CL_SEPARATE)\n-\t{\n-\t  arg = argv[1];\n-\t  result = 2;\n-\t}\n+    }\n+  else if (option->flags & CL_SEPARATE)\n+    {\n+      arg = argv[1];\n+      result = 2;\n+    }\n \n-      /* Now we've swallowed any potential argument, complain if this\n-\t is a switch for a different front end.  */\n-      if (!(option->flags & (lang_mask | CL_COMMON)))\n-\t{\n-\t  complain_wrong_lang (argv[0], option, lang_mask);\n-\t  goto done;\n-\t}\n+  /* Now we've swallowed any potential argument, complain if this\n+     is a switch for a different front end.  */\n+  if (!(option->flags & (lang_mask | CL_COMMON)))\n+    {\n+      complain_wrong_lang (argv[0], option, lang_mask);\n+      goto done;\n+    }\n \n-      if (arg == NULL && (option->flags & (CL_JOINED | CL_SEPARATE)))\n-\t{\n-\t  error (\"missing argument to \\\"-%s\\\"\", argv[0]);\n-\t  goto done;\n-\t}\n+  if (arg == NULL && (option->flags & (CL_JOINED | CL_SEPARATE)))\n+    {\n+      if (!(*lang_hooks.missing_argument) (opt, opt_index))\n+\terror (\"missing argument to \\\"%s\\\"\", opt);\n+      goto done;\n+    }\n \n-      /* If the switch takes an integer, convert it.  */\n-      if (arg && (option->flags & CL_UINTEGER))\n+  /* If the switch takes an integer, convert it.  */\n+  if (arg && (option->flags & CL_UINTEGER))\n+    {\n+      value = integral_argument (arg);\n+      if (value == -1)\n \t{\n-\t  value = integral_argument (arg);\n-\t  if (value == -1)\n-\t    {\n-\t      error (\"argument to \\\"-%s\\\" should be a non-negative integer\",\n-\t\t     option->opt_text);\n-\t      goto done;\n-\t    }\n+\t  error (\"argument to \\\"-%s\\\" should be a non-negative integer\",\n+\t\t option->opt_text);\n+\t  goto done;\n \t}\n+    }\n \n-      if (option->flags & lang_mask)\n-\tif ((*lang_hooks.handle_option) (opt_index, arg, value) == 0)\n-\t  result = 0;\n+  if (option->flags & lang_mask)\n+    if ((*lang_hooks.handle_option) (opt_index, arg, value) == 0)\n+      result = 0;\n \n-      if (result && (option->flags & CL_COMMON))\n-\tif (common_handle_option (opt_index, arg, value) == 0)\n-\t  result = 0;\n-    }\n+  if (result && (option->flags & CL_COMMON))\n+    if (common_handle_option (opt_index, arg, value) == 0)\n+      result = 0;\n \n  done:\n   if (dup)\n@@ -414,12 +404,23 @@ handle_options (unsigned int argc, const char **argv, unsigned int lang_mask)\n \n   for (i = 1; i < argc; i += n)\n     {\n+      const char *opt = argv[i];\n+\n+      /* Interpret \"-\" or a non-switch as a file name.  */\n+      if (opt[0] != '-' || opt[1] == '\\0')\n+\t{\n+\t  main_input_filename = opt;\n+\t  (*lang_hooks.handle_filename) (opt);\n+\t  n = 1;\n+\t  continue;\n+\t}\n+\n       n = handle_option (argv + i, lang_mask);\n \n       if (!n)\n \t{\n \t  n = 1;\n-\t  error (\"unrecognized command line option \\\"%s\\\"\", argv[i]);\n+\t  error (\"unrecognized command line option \\\"%s\\\"\", opt);\n \t}\n     }\n }\n@@ -603,15 +604,8 @@ static int\n common_handle_option (size_t scode, const char *arg,\n \t\t      int value ATTRIBUTE_UNUSED)\n {\n-  const struct cl_option *option = &cl_options[scode];\n   enum opt_code code = (enum opt_code) scode;\n \n-  if (arg == NULL && (option->flags & (CL_JOINED | CL_SEPARATE)))\n-    {\n-      error (\"missing argument to \\\"-%s\\\"\", option->opt_text);\n-      return 1;\n-    }\n-\n   switch (code)\n     {\n     default:"}]}