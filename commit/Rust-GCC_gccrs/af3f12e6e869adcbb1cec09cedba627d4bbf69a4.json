{"sha": "af3f12e6e869adcbb1cec09cedba627d4bbf69a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYzZjEyZTZlODY5YWRjYmIxY2VjMDljZWRiYTYyN2Q0YmJmNjlhNA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-28T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-28T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "dc9064a31d0bca315595f9beb78f916d10ff0462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc9064a31d0bca315595f9beb78f916d10ff0462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af3f12e6e869adcbb1cec09cedba627d4bbf69a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3f12e6e869adcbb1cec09cedba627d4bbf69a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3f12e6e869adcbb1cec09cedba627d4bbf69a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/comments", "author": null, "committer": null, "parents": [{"sha": "7590016ba956de8d036138e3b4dd2435ce625ba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7590016ba956de8d036138e3b4dd2435ce625ba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7590016ba956de8d036138e3b4dd2435ce625ba2"}], "stats": {"total": 390, "additions": 389, "deletions": 1}, "files": [{"sha": "f071d26cd30d7051fa1c046cbc0f46dd9b081f38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af3f12e6e869adcbb1cec09cedba627d4bbf69a4", "patch": "@@ -1,3 +1,135 @@\n+2021-07-27  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (write_ovld_static_init): New\n+\tfunction.\n+\t(write_init_file): Call write_ovld_static_init.\n+\n+2021-07-27  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (write_bif_static_init): New\n+\tfunction.\n+\t(write_init_file): Call write_bif_static_init.\n+\n+2021-07-27  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-gen-builtins.c (typemap): New struct.\n+\t(TYPE_MAP_SIZE): New macro.\n+\t(type_map): New initialized variable.\n+\t(typemap_cmp): New function.\n+\t(write_type_node): Likewise.\n+\t(write_fntype_init): Implement.\n+\n+2021-07-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/101584\n+\t* tree-ssa-uninit.c (builtin_call_nomodifying_p): New function.\n+\t(check_defs): Call it.\n+\n+2021-07-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-dom.c (dom_jump_threader_simplifier):\n+\tPut avail_exprs_stack in the class, instead of passing it to\n+\tjump_threader_simplifier.\n+\t(dom_jump_threader_simplifier::simplify): Add state argument.\n+\t(dom_opt_dom_walker): Add state.\n+\t(pass_dominator::execute): Pass state to threader.\n+\t(dom_opt_dom_walker::before_dom_children): Use state.\n+\t* tree-ssa-threadedge.c (jump_threader::jump_threader): Replace\n+\targuments by state.\n+\t(jump_threader::record_temporary_equivalences_from_phis):\n+\tRegister equivalences through the state variable.\n+\t(jump_threader::record_temporary_equivalences_from_stmts_at_dest):\n+\tRecord ranges in a statement through the state variable.\n+\t(jump_threader::simplify_control_stmt_condition): Pass state to\n+\tsimplify.\n+\t(jump_threader::simplify_control_stmt_condition_1): Same.\n+\t(jump_threader::thread_around_empty_blocks): Remove obsolete\n+\tcomment.\n+\t(jump_threader::thread_through_normal_block): Record equivalences\n+\ton edge through the state variable.\n+\t(jump_threader::thread_across_edge): Abstract state pushing.\n+\t(jt_state::jt_state): New.\n+\t(jt_state::push): New.\n+\t(jt_state::pop): New.\n+\t(jt_state::register_equiv): New.\n+\t(jt_state::record_ranges_from_stmt): New.\n+\t(jt_state::register_equivs_on_edge): New.\n+\t(jump_threader_simplifier::jump_threader_simplifier): Move from\n+\theader.\n+\t(jump_threader_simplifier::simplify): Add state argument.\n+\t* tree-ssa-threadedge.h (class jt_state): New.\n+\t(class jump_threader): Add state to constructor.\n+\t(class jump_threader_simplifier): Add state to simplify.  Remove\n+\tavail_exprs_stack from class.\n+\t* tree-vrp.c (vrp_jump_threader_simplifier::simplify): Add state\n+\targument.\n+\t(vrp_jump_threader::vrp_jump_threader): Add state.\n+\t(vrp_jump_threader::~vrp_jump_threader): Cleanup state.\n+\n+2021-07-27  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add gimple-range-path.o.\n+\t* gimple-range-path.cc: New file.\n+\t* gimple-range-path.h: New file.\n+\n+2021-07-27  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md: Push sign/zero-extension\n+\tinside vec_duplicate for all patterns.\n+\t* simplify-rtx.c (simplify_context::simplify_unary_operation_1):\n+\tPush sign/zero-extension inside vec_duplicate.\n+\n+2021-07-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101573\n+\t* tree-ssa-uninit.c (warn_uninit_phi_uses): New function\n+\tlooking at uninitialized PHI arg defs in some constrained cases.\n+\t(warn_uninitialized_vars): Call it.\n+\t(execute_early_warn_uninitialized): Calculate dominators.\n+\n+2021-07-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/39821\n+\t* tree-vect-stmts.c (vect_model_promotion_demotion_cost): Use\n+\tvector_stmt for widening arithmetic.\n+\t(vectorizable_conversion): Adjust.\n+\n+2021-07-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* cgraph.h (ipa_replace_map): New field force_load_ref.\n+\t* ipa-prop.h (ipa_param_descriptor): Reduce precision of move_cost,\n+\taded new flag load_dereferenced, adjusted comments.\n+\t(ipa_get_param_dereferenced): New function.\n+\t(ipa_set_param_dereferenced): Likewise.\n+\t* cgraphclones.c (cgraph_node::create_virtual_clone): Follow it.\n+\t* ipa-cp.c: Include gimple.h.\n+\t(ipcp_discover_new_direct_edges): Take into account dereferenced flag.\n+\t(get_replacement_map): New parameter force_load_ref, set the\n+\tappropriate flag in ipa_replace_map if set.\n+\t(struct symbol_and_index_together): New type.\n+\t(adjust_refs_in_act_callers): New function.\n+\t(adjust_references_in_caller): Likewise.\n+\t(create_specialized_node): When appropriate, call\n+\tadjust_references_in_caller and force only load references.\n+\t* ipa-prop.c (load_from_dereferenced_name): New function.\n+\t(ipa_analyze_controlled_uses): Also detect loads from a\n+\tdereference, harden testing of call statements.\n+\t(ipa_write_node_info): Stream the dereferenced flag.\n+\t(ipa_read_node_info): Likewise.\n+\t(ipa_set_jf_constant): Also create refdesc when jump function\n+\treferences a variable.\n+\t(cgraph_node_for_jfunc): Rename to symtab_node_for_jfunc, work\n+\talso on references of variables and return a symtab_node.  Adjust\n+\tall callers.\n+\t(propagate_controlled_uses): Also remove references to VAR_DECLs.\n+\n+2021-07-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101586\n+\t* gimple-fold.c (clear_padding_type): Ignore FIELD_DECLs with byte\n+\tpositions above or equal to sz except for diagnostics of flexible\n+\tarray members.\n+\n 2021-07-26  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR tree-optimization/78888"}, {"sha": "10746464112a30bd6bfac405410ce5a48b62d21b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=af3f12e6e869adcbb1cec09cedba627d4bbf69a4", "patch": "@@ -1 +1 @@\n-20210727\n+20210728"}, {"sha": "10a8bf44edfe52ca58a719d55b7f92ef76b28385", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=af3f12e6e869adcbb1cec09cedba627d4bbf69a4", "patch": "@@ -1,3 +1,8 @@\n+2021-07-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/101585\n+\t* c-warn.c (warn_parm_ptrarray_mismatch): Use OEP_DECL_NAME.\n+\n 2021-07-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-lex.c (c_common_has_attribute): Call canonicalize_attr_name also"}, {"sha": "217a1ac5639e1c13e3163db1f1e93060d05d0e17", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=af3f12e6e869adcbb1cec09cedba627d4bbf69a4", "patch": "@@ -1,3 +1,12 @@\n+2021-07-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 1512\n+\tPR c++/99701\n+\t* cp-gimplify.c (cp_fold): Remove {LE,LT,GE,GT_EXPR} from\n+\ta switch.\n+\t* typeck.c (cp_build_binary_op): Reject ordered comparison\n+\tof two null pointers.\n+\n 2021-07-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.h (struct cp_lexer): Add orphan_p member."}, {"sha": "a9f18a0ad4d9f8530806b78bead5c69ef0c5f457", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=af3f12e6e869adcbb1cec09cedba627d4bbf69a4", "patch": "@@ -1,3 +1,66 @@\n+2021-07-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/101584\n+\t* gcc.dg/uninit-38.c: Remove assertions.\n+\t* gcc.dg/uninit-41.c: New test.\n+\n+2021-07-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR testsuite/101646\n+\t* g++.dg/coroutines/pr99047.C:\n+\t* g++.dg/pr71655.C:\n+\n+2021-07-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/101585\n+\t* gcc.dg/Wvla-parameter-13.c: New test.\n+\n+2021-07-27  Jeff Law  <jlaw@localhost.localdomain>\n+\n+\t* g++.dg/gcov/gcov-threads-1.C: Fix argument to pthread_join.\n+\n+2021-07-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 1512\n+\tPR c++/99701\n+\t* g++.dg/cpp0x/nullptr11.C: Remove invalid tests.\n+\t* g++.dg/cpp0x/nullptr46.C: Add dg-error.\n+\t* g++.dg/cpp2a/spaceship-err7.C: New test.\n+\t* g++.dg/expr/ptr-comp4.C: New test.\n+\n+2021-07-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101573\n+\t* gcc.dg/uninit-pr101573.c: New testcase.\n+\t* gcc.dg/uninit-15-O0.c: Adjust.\n+\t* gcc.dg/uninit-15.c: Likewise.\n+\t* gcc.dg/uninit-23.c: Likewise.\n+\t* c-c++-common/uninit-17.c: Likewise.\n+\n+2021-07-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/ipa/remref-3.c: New test.\n+\t* gcc.dg/ipa/remref-4.c: Likewise.\n+\t* gcc.dg/ipa/remref-5.c: Likewise.\n+\t* gcc.dg/ipa/remref-6.c: Likewise.\n+\n+2021-07-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/101586\n+\t* g++.dg/torture/builtin-clear-padding-4.C: New test.\n+\n+2021-07-27  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR testsuite/100170\n+\t* gcc.target/powerpc/ppc-eq0-1.c: Adjust insn counts if power10\n+\tcode is generated.\n+\t* gcc.target/powerpc/ppc-ne0-1.c: (ne0): Adjust insn counts if\n+\tpower10 code is generated.\n+\t(plus_ne0): Move to ppc-ne0-2.c.\n+\t(cmp_plus_ne): Likewise.\n+\t(plus_ne0_cmp): Likewise.\n+\t* gcc.target/powerpc/ppc-ne0-2.c: New file.\n+\n 2021-07-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/sock-1.c: New test."}, {"sha": "e4e1563d7359431f51160428214ef83fab8f5b39", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=af3f12e6e869adcbb1cec09cedba627d4bbf69a4", "patch": "@@ -1,3 +1,79 @@\n+2021-07-27  Ulrich Drepper  <drepper@gmail.com>\n+\n+\t* env.c (wait_policy, stacksize): New static variables,\n+\tmove out of handle_omp_display_env.\n+\t(omp_display_env): New function.  The meat of the old\n+\thandle_omp_display_env function.\n+\t(handle_omp_display_env): Change to not take parameters\n+\tand instead use the global variables.  Only perform\n+\tparsing, defer to omp_display_env for the implementation.\n+\t(initialize_env): Remove local variables wait_policy and\n+\tstacksize.  Don't pass parameters to handle_omp_display_env.\n+\t* fortran.c: Add ialias_redirect for omp_display_env.\n+\t(omp_display_env_, omp_display_env_8_): New functions.\n+\t* libgomp.map (OMP_5.1): New version.  Add omp_display_env,\n+\tomp_display_env_, and omp_display_env_8_.\n+\t* omp.h.in: Declare omp_display_env.\n+\t* omp_lib.f90.in: Likewise.\n+\t* omp_lib.h.in: Likewise.\n+\n+2021-07-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* target.c (gomp_coalesce_buf_add): Update comment.\n+\t(gomp_copy_host2dev, gomp_map_vars_internal): Don't expect to see\n+\t'aq && cbuf'.\n+\t(gomp_map_vars_internal): Only 'if (!aq)', do\n+\t'gomp_coalesce_buf_add'.\n+\t* testsuite/libgomp.oacc-c-c++-common/async-data-1-2.c: Remove\n+\tXFAIL.\n+\n+2021-07-27  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* libgomp.h (gomp_copy_host2dev): Update prototype.\n+\t* oacc-mem.c (memcpy_tofrom_device, update_dev_host): Add new\n+\targument to gomp_copy_host2dev (false).\n+\t* plugin/plugin-gcn.c (struct copy_data): Remove free_src field.\n+\t(copy_data): Don't free src.\n+\t(queue_push_copy): Remove free_src handling.\n+\t(GOMP_OFFLOAD_dev2dev): Update call to queue_push_copy.\n+\t(GOMP_OFFLOAD_openacc_async_host2dev): Remove source-data\n+\tsnapshotting.\n+\t(GOMP_OFFLOAD_openacc_async_dev2host): Update call to\n+\tqueue_push_copy.\n+\t* target.c (goacc_device_copy_async): Add SRCADDR_ORIG parameter.\n+\t(gomp_copy_host2dev): Add EPHEMERAL parameter.  Snapshot source\n+\tdata when true, and set up deferred freeing of temporary buffer.\n+\t(gomp_copy_dev2host): Update call to goacc_device_copy_async.\n+\t(gomp_map_vars_existing, gomp_map_pointer, gomp_attach_pointer)\n+\t(gomp_detach_pointer, gomp_map_vars_internal, gomp_update): Update\n+\tcalls to gomp_copy_host2dev with appropriate ephemeral argument.\n+\t* testsuite/libgomp.oacc-c-c++-common/async-data-1-1.c: Remove\n+\tXFAIL.\n+\n+2021-07-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/async-data-1-1.c: New file.\n+\t* testsuite/libgomp.oacc-c-c++-common/async-data-1-2.c: Likewise.\n+\n+2021-07-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-init-1.c: Clarify\n+\tsequencing of 'async' data copying vs. profiling events.\n+\t* testsuite/libgomp.oacc-c-c++-common/acc_prof-parallel-1.c:\n+\tLikewise.\n+\n+2021-07-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-94.c: Fix OpenACC\n+\t'async'/'wait' issue.\n+\t* testsuite/libgomp.oacc-c-c++-common/lib-95.c: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/lib-16-2.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/lib-16.f90: Likewise.\n+\n 2021-07-21  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Joseph Myers  <joseph@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>"}, {"sha": "26486e1d0d307bc9b02987a3af9f4c6d5f767f1d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af3f12e6e869adcbb1cec09cedba627d4bbf69a4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=af3f12e6e869adcbb1cec09cedba627d4bbf69a4", "patch": "@@ -1,3 +1,106 @@\n+2021-07-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/optional (__throw_bad_optional_access):\n+\tReplace GNU attribute with C++11 attribute.\n+\t(optional::value, optional::value_or): Use if statements\n+\tinstead of conditional expressions.\n+\t* include/std/optional (__throw_bad_optional_access)\n+\t(optional::value, optional::value_or): Likewise.\n+\n+2021-07-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 1512\n+\tPR c++/99701\n+\t* testsuite/20_util/tuple/comparison_operators/overloaded.cc:\n+\tMove a line...\n+\t* testsuite/20_util/tuple/comparison_operators/overloaded2.cc:\n+\t...here.  New test.\n+\n+2021-07-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/cow_string.h: Consistently use tab for\n+\tindentation.\n+\n+2021-07-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/basic_string.h [!_GLIBCXX_USE_CXX11_ABI]\n+\t(basic_string): Move definition of Copy-on-Write string to\n+\tnew file.\n+\t* include/bits/basic_string.tcc: Likewise.\n+\t* include/bits/cow_string.h: New file.\n+\n+2021-07-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/algorithm: Do not include <utility>.\n+\t* include/std/functional: Likewise.\n+\t* include/std/regex: Include <bits/stl_pair.h> instead of\n+\t<utility>.\n+\t* include/debug/map.h: Likewise.\n+\t* include/debug/multimap.h: Likewise.\n+\t* include/debug/multiset.h: Likewise.\n+\t* include/debug/set.h: Likewise.\n+\t* include/debug/vector: Likewise.\n+\t* include/bits/fs_path.h: Likewise.\n+\t* include/bits/unique_ptr.h: Do not include <utility>.\n+\t* include/experimental/any: Likewise.\n+\t* include/experimental/executor: Likewise.\n+\t* include/experimental/memory: Likewise.\n+\t* include/experimental/optional: Likewise.\n+\t* include/experimental/socket: Use __exchange instead\n+\tof std::exchange.\n+\t* src/filesystem/ops-common.h: Likewise.\n+\t* testsuite/20_util/default_delete/48631_neg.cc: Adjust expected\n+\terrors to not use a hardcoded line number.\n+\t* testsuite/20_util/default_delete/void_neg.cc: Likewise.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_copy/constrained.cc:\n+\tInclude <utility> for std::as_const.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_default_construct/constrained.cc:\n+\tLikewise.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_move/constrained.cc:\n+\tLikewise.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_value_construct/constrained.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/cons/destructible_debug_neg.cc:\n+\tAdjust dg-error line number.\n+\n+2021-07-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Add bits/utility.h header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/bits/utility.h: New file.\n+\t* include/std/utility (tuple_size, tuple_element): Move\n+\tto new header.\n+\t* include/std/type_traits (__is_tuple_like_impl<tuple<T...>>):\n+\tMove to <tuple>.\n+\t(_Index_tuple, _Build_index_tuple, integer_sequence): Likewise.\n+\t(in_place_t, in_place_index_t, in_place_type_t): Likewise.\n+\t* include/bits/ranges_util.h: Include new header instead of\n+\t<utility>.\n+\t* include/bits/stl_pair.h (tuple_size, tuple_element): Move\n+\tpartial specializations for std::pair here.\n+\t(get): Move overloads for std::pair here.\n+\t* include/std/any: Include new header instead of <utility>.\n+\t* include/std/array: Likewise.\n+\t* include/std/memory_resource: Likewise.\n+\t* include/std/optional: Likewise.\n+\t* include/std/variant: Likewise.\n+\t* include/std/tuple: Likewise.\n+\t(__is_tuple_like_impl<tuple<T...>>): Move here.\n+\t(get) Declare overloads for std::array.\n+\t* include/std/version (__cpp_lib_tuples_by_type): Change type\n+\tto long.\n+\t* testsuite/20_util/optional/84601.cc: Include <utility>.\n+\t* testsuite/20_util/specialized_algorithms/uninitialized_fill/constrained.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/tuple_interface/get_neg.cc:\n+\tAdjust dg-error line numbers.\n+\t* testsuite/std/ranges/access/cbegin.cc: Include <utility>.\n+\t* testsuite/std/ranges/access/cend.cc: Likewise.\n+\t* testsuite/std/ranges/access/end.cc: Likewise.\n+\t* testsuite/std/ranges/single_view.cc: Likewise.\n+\n 2021-07-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/future: Include <bits/atomic_base.h> instead of"}]}