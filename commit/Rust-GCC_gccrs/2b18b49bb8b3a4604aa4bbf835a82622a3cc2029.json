{"sha": "2b18b49bb8b3a4604aa4bbf835a82622a3cc2029", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIxOGI0OWJiOGIzYTQ2MDRhYTRiYmY4MzVhODI2MjJhM2NjMjAyOQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2003-03-06T05:01:15Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2003-03-06T05:01:15Z"}, "message": "mmix.md (\"*movcc_expanded\"): New pattern.\n\n\t* config/mmix/mmix.md (\"*movcc_expanded\"): New pattern.\n\t(\"movcc\", \"movcc_uns\", \"movcc_fp\", \"movcc_fpeq\", \"movcc_fun\"): New\n\texpanders.\n\nFrom-SVN: r63887", "tree": {"sha": "b8415a8922312358320737f7ad36eb7cde949794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8415a8922312358320737f7ad36eb7cde949794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b18b49bb8b3a4604aa4bbf835a82622a3cc2029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b18b49bb8b3a4604aa4bbf835a82622a3cc2029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b18b49bb8b3a4604aa4bbf835a82622a3cc2029", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b18b49bb8b3a4604aa4bbf835a82622a3cc2029/comments", "author": null, "committer": null, "parents": [{"sha": "1a71a5b03702dd3e1ffc748e2de469db5235fba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a71a5b03702dd3e1ffc748e2de469db5235fba6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a71a5b03702dd3e1ffc748e2de469db5235fba6"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "fa602d4f28b456d53fa336dd9435ccd4bb992407", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b18b49bb8b3a4604aa4bbf835a82622a3cc2029/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b18b49bb8b3a4604aa4bbf835a82622a3cc2029/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b18b49bb8b3a4604aa4bbf835a82622a3cc2029", "patch": "@@ -1,3 +1,9 @@\n+2003-03-06  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.md (\"*movcc_expanded\"): New pattern.\n+\t(\"movcc\", \"movcc_uns\", \"movcc_fp\", \"movcc_fpeq\", \"movcc_fun\"): New\n+\texpanders.\n+\n 2003-03-05  Roger Sayle  <roger@eyesopen.com>\n \n \t* expr.h (lang_expand_expr): Delete obsolete prototype."}, {"sha": "e3623bdaed05a7153d113eb0e6ca70bc93dd7794", "filename": "gcc/config/mmix/mmix.md", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b18b49bb8b3a4604aa4bbf835a82622a3cc2029/gcc%2Fconfig%2Fmmix%2Fmmix.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b18b49bb8b3a4604aa4bbf835a82622a3cc2029/gcc%2Fconfig%2Fmmix%2Fmmix.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.md?ref=2b18b49bb8b3a4604aa4bbf835a82622a3cc2029", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for MMIX\n-;; Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+;; Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n ;; Contributed by Hans-Peter Nilsson (hp@bitrange.com)\n \n ;; This file is part of GCC.\n@@ -131,6 +131,53 @@\n    STOU %1,%0\n    %r0%I1\")\n \f\n+;; We need to be able to move around the values used as condition codes.\n+;; First spotted as reported in\n+;; <URL:http://gcc.gnu.org/ml/gcc-bugs/2003-03/msg00008.html> due to\n+;; changes in loop optimization.  The file machmode.def says they're of\n+;; size 4 QI.  Valid bit-patterns correspond to integers -1, 0 and 1, so\n+;; we treat them as signed entities; see mmix-modes.def.  The following\n+;; expanders should cover all MODE_CC modes, and expand for this pattern.\n+(define_insn \"*movcc_expanded\"\n+  [(set (match_operand 0 \"nonimmediate_operand\" \"=r,r,m\")\n+\t(match_operand 1 \"nonimmediate_operand\"  \"r,m,r\"))]\n+  \"GET_MODE_CLASS (GET_MODE (operands[0])) == MODE_CC\n+   && GET_MODE_CLASS (GET_MODE (operands[1])) == MODE_CC\"\n+  \"@\n+   SET %0,%1\n+   LDT %0,%1\n+   STT %1,%0\")\n+\n+(define_expand \"movcc\"\n+  [(set (match_operand:CC 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:CC 1 \"nonimmediate_operand\" \"\"))]\n+  \"\"\n+  \"\")\n+\n+(define_expand \"movcc_uns\"\n+  [(set (match_operand:CC_UNS 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:CC_UNS 1 \"nonimmediate_operand\" \"\"))]\n+  \"\"\n+  \"\")\n+\n+(define_expand \"movcc_fp\"\n+  [(set (match_operand:CC_FP 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:CC_FP 1 \"nonimmediate_operand\" \"\"))]\n+  \"\"\n+  \"\")\n+\n+(define_expand \"movcc_fpeq\"\n+  [(set (match_operand:CC_FPEQ 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:CC_FPEQ 1 \"nonimmediate_operand\" \"\"))]\n+  \"\"\n+  \"\")\n+\n+(define_expand \"movcc_fun\"\n+  [(set (match_operand:CC_FUN 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:CC_FUN 1 \"nonimmediate_operand\" \"\"))]\n+  \"\"\n+  \"\")\n+\f\n (define_insn \"adddi3\"\n   [(set (match_operand:DI 0 \"register_operand\"\t\"=r,r,r\")\n \t(plus:DI"}]}