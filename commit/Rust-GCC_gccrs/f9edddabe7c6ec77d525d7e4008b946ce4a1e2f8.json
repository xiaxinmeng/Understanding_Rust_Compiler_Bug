{"sha": "f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjllZGRkYWJlN2M2ZWM3N2Q1MjVkN2U0MDA4Yjk0NmNlNGExZTJmOA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2001-02-24T04:15:31Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-02-24T04:15:31Z"}, "message": "Change to sometimes include class name in ClassFormatError message.\n\nFrom-SVN: r40030", "tree": {"sha": "8f057d79ffefb9eb0ef8f70de17c0a8db0af7b3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f057d79ffefb9eb0ef8f70de17c0a8db0af7b3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ea1bc0e465cdbe8e2b49b8d1aff902b32b89abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea1bc0e465cdbe8e2b49b8d1aff902b32b89abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ea1bc0e465cdbe8e2b49b8d1aff902b32b89abe"}], "stats": {"total": 170, "additions": 115, "deletions": 55}, "files": [{"sha": "0bf0ea9c756b9e24e764d96af003220df19ff0c6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8", "patch": "@@ -1,3 +1,17 @@\n+2001-02-23  Per Bothner  <per@bothner.com>\n+\n+\tChange to sometimes include class name in ClassFormatError message.\n+\t* defineclass.cc (_Jv_VerifyFieldSignature, _Jv_VerifyMethodSignature,\n+\t_Jv_VerifyIdentifier, _Jv_VerifyClassName (two overlods)):  Return\n+\tboolean instead of throwing ClassFormatError on failure.\n+\t(throw_class_format_error):  Change static function to method.\n+\t(_Jv_ClassReader):  New inline methods verify_identifier,\n+\ttwo overloads of verify_classname, verify_field_signature, and\n+\tverify_method_signature\n+\t* include/java-interp.h:  Update declarations to return bool.\n+\t* java/lang/natClassLoader.cc (defineClass0):  Explicitly throw\n+\tClassFormatError since _Jv_VerifyClassName now returns bool.\n+\n 2001-02-23  Per Bothner  <per@bothner.com>\n \n \t* java/lang/Throwable.java (CPlusPlusDemangler):  Pass -s java to"}, {"sha": "962b8355aff6114655f603917641fff159a41b41", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 93, "deletions": 49, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8", "patch": "@@ -56,8 +56,6 @@ static void throw_no_class_def_found_error (char *msg)\n \t__attribute__ ((__noreturn__));\n static void throw_class_format_error (jstring msg)\n \t__attribute__ ((__noreturn__));\n-static void throw_class_format_error (char *msg)\n-\t__attribute__ ((__noreturn__));\n static void throw_incompatible_class_change_error (jstring msg)\n \t__attribute__ ((__noreturn__));\n static void throw_class_circularity_error (jstring msg)\n@@ -191,6 +189,36 @@ struct _Jv_ClassReader {\n       throw_class_format_error (\"erroneous constant pool tag\");\n   }\n \n+  inline void verify_identifier (_Jv_Utf8Const* name)\n+  {\n+    if (! _Jv_VerifyIdentifier (name))\n+      throw_class_format_error (\"erroneous identifier\");\n+  }\n+\n+  inline void verify_classname (unsigned char* ptr, _Jv_ushort length)\n+  {\n+    if (! _Jv_VerifyClassName (ptr, length))\n+      throw_class_format_error (\"erroneous class name\");\n+  }\n+\n+  inline void verify_classname (_Jv_Utf8Const *name)\n+  {\n+    if (! _Jv_VerifyClassName (name))\n+      throw_class_format_error (\"erroneous class name\");\n+  }\n+\n+  inline void verify_field_signature (_Jv_Utf8Const *sig)\n+  {\n+    if (! _Jv_VerifyFieldSignature (sig))\n+      throw_class_format_error (\"erroneous type descriptor\");\n+  }\n+\n+  inline void verify_method_signature (_Jv_Utf8Const *sig)\n+  {\n+    if (! _Jv_VerifyMethodSignature (sig))\n+      throw_class_format_error (\"erroneous type descriptor\");\n+  }\n+\n   _Jv_ClassReader (jclass klass, jbyteArray data, jint offset, jint length)\n   {\n     if (klass == 0 || length < 0 || offset+length > data->length)\n@@ -213,6 +241,7 @@ struct _Jv_ClassReader {\n   void read_one_method_attribute (int method);\n   void read_one_code_attribute (int method);\n   void read_one_field_attribute (int field);\n+  void throw_class_format_error (char *msg);\n \n   /** check an utf8 entry, without creating a Utf8Const object */\n   bool is_attribute_name (int index, char *name);\n@@ -699,7 +728,7 @@ _Jv_ClassReader::prepare_pool_entry (int index, unsigned char this_tag)\n \tprepare_pool_entry (utf_index, JV_CONSTANT_Utf8);\n \n \tif (verify)\n-\t  _Jv_VerifyClassName (pool_data[utf_index].utf8);\n+\t  verify_classname (pool_data[utf_index].utf8);\n \t\t\n \tpool_data[index].utf8 = pool_data[utf_index].utf8;\n \tpool_tags[index] = JV_CONSTANT_Class;\n@@ -742,7 +771,7 @@ _Jv_ClassReader::prepare_pool_entry (int index, unsigned char this_tag)\n \t\t  || _Jv_equalUtf8Consts (name, init_name)))\n \t    /* ignore */;\n \t  else\n-\t    _Jv_VerifyIdentifier (pool_data[name_index].utf8);\n+\t    verify_identifier (pool_data[name_index].utf8);\n \t}\n \t    \n \t_Jv_storeIndexes (&pool_data[index], class_index, nat_index);\n@@ -1030,7 +1059,7 @@ void _Jv_ClassReader::handleField (int field_no,\n #endif\n \n   if (verify)\n-    _Jv_VerifyIdentifier (field_name);\n+    verify_identifier (field_name);\n \n   // ignore flags we don't know about.  \n   field->flags = flags & Modifier::ALL_FLAGS;\n@@ -1184,7 +1213,7 @@ void _Jv_ClassReader::handleMethod\n \t  || _Jv_equalUtf8Consts (method->name, init_name))\n \t/* ignore */;\n       else\n-\t_Jv_VerifyIdentifier (method->name);\n+\tverify_identifier (method->name);\n \n       _Jv_VerifyMethodSignature (method->signature);\n \n@@ -1274,6 +1303,36 @@ void _Jv_ClassReader::handleMethodsEnd ()\n \n }\n \n+void _Jv_ClassReader::throw_class_format_error (char *msg)\n+{\n+  jstring str;\n+  if (def->name != NULL)\n+    {\n+      jsize mlen = strlen (msg);\n+      unsigned char* data = (unsigned char*) def->name->data;\n+      int ulen = def->name->length;\n+      unsigned char* limit = data + ulen;\n+      jsize nlen = _Jv_strLengthUtf8 ((char *) data, ulen);\n+      jsize len = nlen + mlen + 3;\n+      str = JvAllocString(len);\n+      jchar *chrs = JvGetStringChars(str);\n+      while (data < limit)\n+\t*chrs++ = UTF8_GET(data, limit);\n+      *chrs++ = ' ';\n+      *chrs++ = '(';\n+      for (;;)\n+\t{\n+\t  char c = *msg++;\n+\t  if (c == 0)\n+\t    break;\n+\t  *chrs++ = c & 0xFFFF;\n+\t}\n+      *chrs++ = ')';\n+    }\n+  else\n+    str = JvNewStringLatin1 (msg);\n+  ::throw_class_format_error (str);\n+}\n \f\n /** This section takes care of verifying integrity of identifiers,\n     signatures, field ddescriptors, and class names */\n@@ -1314,7 +1373,8 @@ _Jv_VerifyOne (unsigned char* ptr, unsigned char* limit, bool void_ok)\n \t    return 0;\n \t\t\n \t} while (ch != ';');\n-\t_Jv_VerifyClassName (start, (unsigned short) (end-start));\n+\tif (! _Jv_VerifyClassName (start, (unsigned short) (end-start)))\n+\t  return 0;\n       }\n       break;\n \n@@ -1333,44 +1393,36 @@ _Jv_VerifyOne (unsigned char* ptr, unsigned char* limit, bool void_ok)\n \n /** verification and loading procedures **/\n \n-void\n+bool\n _Jv_VerifyFieldSignature (_Jv_Utf8Const*sig)\n {\n   unsigned char* ptr = (unsigned char*) sig->data;\n   unsigned char* limit = ptr + sig->length;\n \n   ptr = _Jv_VerifyOne (ptr, limit, false);\n \n-  if (ptr != limit)\n-    throw_class_format_error (\"erroneous type descriptor\");\n+  return ptr == limit;\n }\n \n-void\n+bool\n _Jv_VerifyMethodSignature (_Jv_Utf8Const*sig)\n {\n   unsigned char* ptr = (unsigned char*) sig->data;\n   unsigned char* limit = ptr + sig->length;\n \n-  if (ptr == limit)\n-    throw_class_format_error (\"erroneous type descriptor\");\n-\n-  if (UTF8_GET(ptr,limit) != '(')\n-    throw_class_format_error (\"erroneous type descriptor\");\n+  if (ptr == limit || UTF8_GET(ptr,limit) != '(')\n+    return false;\n \n   while (ptr && UTF8_PEEK (ptr, limit) != ')')\n     ptr = _Jv_VerifyOne (ptr, limit, false);\n     \n   if (UTF8_GET (ptr, limit) != ')')\n-    throw_class_format_error (\"erroneous type descriptor\");\n+    return false;\n \n   // get the return type\n   ptr = _Jv_VerifyOne (ptr, limit, true);\n \n-  if (ptr != limit)\n-    throw_class_format_error (\"erroneous type descriptor\");\n-\n-  return;\n-\n+  return ptr == limit;\n }\n \n /* we try to avoid calling the Character methods all the time, \n@@ -1408,7 +1460,7 @@ is_identifier_part (int c)\n   return character->isJavaIdentifierStart ((jchar) ch);\n }\n \n-void \n+bool\n _Jv_VerifyIdentifier (_Jv_Utf8Const* name)\n {\n   unsigned char *ptr   = (unsigned char*) name->data;\n@@ -1417,18 +1469,18 @@ _Jv_VerifyIdentifier (_Jv_Utf8Const* name)\n \n   if ((ch = UTF8_GET (ptr, limit))==-1\n       || ! is_identifier_start (ch))\n-    throw_class_format_error (\"erroneous identifier\");\n+    return false;\n \n   while (ptr != limit)\n     {\n       if ((ch = UTF8_GET (ptr, limit))==-1\n \t  || ! is_identifier_part (ch))\n-\tthrow_class_format_error (\"erroneous identifier\");\n+\treturn false;\n     }\n+  return true;\n }\n \n-\n-void\n+bool\n _Jv_VerifyClassName (unsigned char* ptr, _Jv_ushort length)\n {\n   unsigned char *limit = ptr+length;\n@@ -1437,39 +1489,37 @@ _Jv_VerifyClassName (unsigned char* ptr, _Jv_ushort length)\n   if ('[' == UTF8_PEEK (ptr, limit))\n     {\n       if (! _Jv_VerifyOne (++ptr, limit, false))\n-        throw_class_format_error (\"erroneous class name\");\n+\treturn false;\n       else\n-        return;\n+        return true;\n     }\n \n  next_level:\n-  do {\n+  for (;;) {\n     if ((ch = UTF8_GET (ptr, limit))==-1)\n-      throw_class_format_error (\"erroneous class name\");\n+      return false;\n     if (! is_identifier_start (ch))\n-      throw_class_format_error (\"erroneous class name\");\n-    do {\n+      return false;\n+    for (;;) {\n       if (ptr == limit)\n-\treturn;\n+\treturn true;\n       else if ((ch = UTF8_GET (ptr, limit))==-1)\n-\tthrow_class_format_error (\"erroneous class name\");\n+\treturn false;\n       else if (ch == '.')\n \tgoto next_level;\n       else if (! is_identifier_part (ch))\n-\tthrow_class_format_error (\"erroneous class name\");\n-    } while (true);\n-  } while (true);\n-\n+\treturn false;\n+    }\n+  }\n }\n \n-void\n+bool\n _Jv_VerifyClassName (_Jv_Utf8Const *name)\n {\n-    _Jv_VerifyClassName ((unsigned char*)&name->data[0],\n-\t\t\t (_Jv_ushort) name->length);\n+  return _Jv_VerifyClassName ((unsigned char*)&name->data[0],\n+\t\t\t      (_Jv_ushort) name->length);\n }\n \n-\n /** returns true, if name1 and name2 represents classes in the same\n     package. */\n     \n@@ -1547,12 +1597,6 @@ throw_class_format_error (jstring msg)\n     JvThrow (new java::lang::ClassFormatError (msg));\n }\n \n-static void\n-throw_class_format_error (char *msg)\n-{\n-  throw_class_format_error (JvNewStringLatin1 (msg));\n-}\n-\n static void\n throw_internal_error (char *msg)\n {"}, {"sha": "acc2eb9d5b7c0b713faac199e4a02163f72d7355", "filename": "libjava/include/java-interp.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8/libjava%2Finclude%2Fjava-interp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8/libjava%2Finclude%2Fjava-interp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjava-interp.h?ref=f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8", "patch": "@@ -33,11 +33,11 @@ _Jv_IsInterpretedClass (jclass c)\n \n struct _Jv_ResolvedMethod;\n \n-void _Jv_VerifyFieldSignature (_Jv_Utf8Const*sig);\n-void _Jv_VerifyMethodSignature (_Jv_Utf8Const*sig);\n-void _Jv_VerifyClassName (unsigned char* ptr, _Jv_ushort length);\n-void _Jv_VerifyClassName (_Jv_Utf8Const *name);\n-void _Jv_VerifyIdentifier (_Jv_Utf8Const *);\n+bool _Jv_VerifyFieldSignature (_Jv_Utf8Const*sig);\n+bool _Jv_VerifyMethodSignature (_Jv_Utf8Const*sig);\n+bool _Jv_VerifyClassName (unsigned char* ptr, _Jv_ushort length);\n+bool _Jv_VerifyClassName (_Jv_Utf8Const *name);\n+bool _Jv_VerifyIdentifier (_Jv_Utf8Const *);\n bool _Jv_ClassNameSamePackage (_Jv_Utf8Const *name1, _Jv_Utf8Const *name2);\n void _Jv_DefineClass (jclass, jbyteArray, jint, jint);\n void _Jv_ResolveField (_Jv_Field *, java::lang::ClassLoader*);"}, {"sha": "5f7138c32897bd7fd1c87cd9da4c46e2108f36ee", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=f9edddabe7c6ec77d525d7e4008b946ce4a1e2f8", "patch": "@@ -79,7 +79,9 @@ java::lang::ClassLoader::defineClass0 (jstring name,\n     {\n       _Jv_Utf8Const *   name2 = _Jv_makeUtf8Const (name);\n \n-      _Jv_VerifyClassName (name2);\n+      if (! _Jv_VerifyClassName (name2))\n+\tJvThrow (new java::lang::ClassFormatError \n+\t\t (JvNewStringLatin1 (\"erroneous class name\")));\n \n       klass->name = name2;\n     }"}]}