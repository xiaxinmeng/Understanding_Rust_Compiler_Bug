{"sha": "2e86f67917967e048d40e25579bf49414a85d8d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU4NmY2NzkxNzk2N2UwNDhkNDBlMjU1NzliZjQ5NDE0YTg1ZDhkOQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2013-04-23T09:54:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-23T09:54:14Z"}, "message": "sinfo.ads, [...]: Minor reformatting and code clean up.\n\n2013-04-23  Robert Dewar  <dewar@adacore.com>\n\n\t* sinfo.ads, einfo.adb, sem_res.adb, exp_ch6.adb, aspects.adb: Minor\n\treformatting and code clean up.\n\nFrom-SVN: r198186", "tree": {"sha": "bad40516ffacfc877134c355839540d4edc8c1fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bad40516ffacfc877134c355839540d4edc8c1fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e86f67917967e048d40e25579bf49414a85d8d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e86f67917967e048d40e25579bf49414a85d8d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e86f67917967e048d40e25579bf49414a85d8d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e86f67917967e048d40e25579bf49414a85d8d9/comments", "author": null, "committer": null, "parents": [{"sha": "e93f4e1244de0d4d7446237c7fa6995e57efca41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93f4e1244de0d4d7446237c7fa6995e57efca41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93f4e1244de0d4d7446237c7fa6995e57efca41"}], "stats": {"total": 76, "additions": 46, "deletions": 30}, "files": [{"sha": "216d437cde3b746ed00a1275857d40bb077ed74e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e86f67917967e048d40e25579bf49414a85d8d9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e86f67917967e048d40e25579bf49414a85d8d9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2e86f67917967e048d40e25579bf49414a85d8d9", "patch": "@@ -1,3 +1,8 @@\n+2013-04-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sinfo.ads, einfo.adb, sem_res.adb, exp_ch6.adb, aspects.adb: Minor\n+\treformatting and code clean up.\n+\n 2013-04-23  Vincent Celier  <celier@adacore.com>\n \n \t* prj-part.ads, prj-conf.ads: Minor comment updates."}, {"sha": "401928b95a10619c14c315066889c1967c0111d9", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e86f67917967e048d40e25579bf49414a85d8d9/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e86f67917967e048d40e25579bf49414a85d8d9/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=2e86f67917967e048d40e25579bf49414a85d8d9", "patch": "@@ -164,9 +164,7 @@ package body Aspects is\n             Owner := Root_Type (Owner);\n          end if;\n \n-         if Is_Private_Type (Owner)\n-           and then Present (Full_View (Owner))\n-         then\n+         if Is_Private_Type (Owner) and then Present (Full_View (Owner)) then\n             Owner := Full_View (Owner);\n          end if;\n       end if;"}, {"sha": "0c85d515451a3a62c291be81ed94f689682d0c01", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e86f67917967e048d40e25579bf49414a85d8d9/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e86f67917967e048d40e25579bf49414a85d8d9/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=2e86f67917967e048d40e25579bf49414a85d8d9", "patch": "@@ -7205,15 +7205,25 @@ package body Einfo is\n \n    function Predicate_Function_M (Id : E) return E is\n       S : Entity_Id;\n+      T : Entity_Id;\n \n    begin\n       pragma Assert (Is_Type (Id));\n \n-      if No (Subprograms_For_Type (Id)) then\n+      --  If type is private and has a completion, predicate may be defined\n+      --  on the full view.\n+\n+      if Is_Private_Type (Id) and then Present (Full_View (Id)) then\n+         T := Full_View (Id);\n+      else\n+         T := Id;\n+      end if;\n+\n+      if No (Subprograms_For_Type (T)) then\n          return Empty;\n \n       else\n-         S := Subprograms_For_Type (Id);\n+         S := Subprograms_For_Type (T);\n          while Present (S) loop\n             if Is_Predicate_Function_M (S) then\n                return S;"}, {"sha": "c98affb97bb2b71079d810b86d4e5184530a1f57", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e86f67917967e048d40e25579bf49414a85d8d9/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e86f67917967e048d40e25579bf49414a85d8d9/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=2e86f67917967e048d40e25579bf49414a85d8d9", "patch": "@@ -1740,14 +1740,14 @@ package body Exp_Ch6 is\n                     and then Is_Inherited_Operation_For_Type (Subp, E_Actual))\n                  or else Is_Entity_Name (Actual)\n                then\n-                  Append_To\n-                    (Post_Call, Make_Predicate_Check (E_Actual, Actual));\n+                  Append_To (Post_Call,\n+                    Make_Predicate_Check (E_Actual, Actual));\n \n                elsif Is_Class_Wide_Type (E_Formal)\n                  and then not Is_Class_Wide_Type (E_Actual)\n                then\n-                  Append_To\n-                    (Post_Call, Make_Predicate_Check (E_Actual, Actual));\n+                  Append_To (Post_Call,\n+                    Make_Predicate_Check (E_Actual, Actual));\n                end if;\n             end if;\n "}, {"sha": "1cb465a89bc3b20acc9aef1bdcb2c813e5085325", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e86f67917967e048d40e25579bf49414a85d8d9/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e86f67917967e048d40e25579bf49414a85d8d9/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=2e86f67917967e048d40e25579bf49414a85d8d9", "patch": "@@ -3612,7 +3612,7 @@ package body Sem_Res is\n                  and then not Same_Ancestor (Etype (F), Etype (Expression (A)))\n                  and then\n                   (Is_Limited_Type (Etype (F))\n-                     or else Is_Limited_Type (Etype (Expression (A))))\n+                    or else Is_Limited_Type (Etype (Expression (A))))\n                then\n                   Error_Msg_N\n                     (\"conversion between unrelated limited array types \"\n@@ -3671,13 +3671,13 @@ package body Sem_Res is\n                   end if;\n                end if;\n \n-               --  (Ada 2005): The call may be to a primitive operation of\n-               --   a tagged synchronized type, declared outside of the type.\n-               --   In this case the controlling actual must be converted to\n-               --   its corresponding record type, which is the formal type.\n-               --   The actual may be a subtype, either because of a constraint\n-               --   or because it is a generic actual, so use base type to\n-               --   locate concurrent type.\n+               --  (Ada 2005): The call may be to a primitive operation of a\n+               --  tagged synchronized type, declared outside of the type. In\n+               --  this case the controlling actual must be converted to its\n+               --  corresponding record type, which is the formal type. The\n+               --  actual may be a subtype, either because of a constraint or\n+               --  because it is a generic actual, so use base type to locate\n+               --  concurrent type.\n \n                F_Typ := Base_Type (Etype (F));\n \n@@ -3951,7 +3951,8 @@ package body Sem_Res is\n \n                if not (Ekind (Nam) = E_Function\n                         and then (Is_Predicate_Function (Nam)\n-                                    or else Is_Predicate_Function_M (Nam)))\n+                                    or else\n+                                  Is_Predicate_Function_M (Nam)))\n                  and then not Is_Init_Proc (Nam)\n                then\n                   Apply_Predicate_Check (A, F_Typ);\n@@ -4293,8 +4294,8 @@ package body Sem_Res is\n          Error_Msg_N (\"type of allocator cannot be abstract\",  N);\n       end if;\n \n-      --  For qualified expression, resolve the expression using the\n-      --  given subtype (nothing to do for type mark, subtype indication)\n+      --  For qualified expression, resolve the expression using the given\n+      --  subtype (nothing to do for type mark, subtype indication)\n \n       if Nkind (E) = N_Qualified_Expression then\n          if Is_Class_Wide_Type (Etype (E))\n@@ -4308,8 +4309,8 @@ package body Sem_Res is\n          Resolve (Expression (E), Etype (E));\n          Check_Unset_Reference (Expression (E));\n \n-         --  A qualified expression requires an exact match of the type,\n-         --  class-wide matching is not allowed.\n+         --  A qualified expression requires an exact match of the type.\n+         --  Class-wide matching is not allowed.\n \n          if (Is_Class_Wide_Type (Etype (Expression (E)))\n               or else Is_Class_Wide_Type (Etype (E)))\n@@ -4350,9 +4351,9 @@ package body Sem_Res is\n          --  deeper than the type of the allocator (in contrast to access\n          --  parameters, where the level of the actual can be arbitrary).\n \n-         --  We can't use Valid_Conversion to perform this check because\n-         --  in general the type of the allocator is unrelated to the type\n-         --  of the access discriminant.\n+         --  We can't use Valid_Conversion to perform this check because in\n+         --  general the type of the allocator is unrelated to the type of\n+         --  the access discriminant.\n \n          if Ekind (Typ) /= E_Anonymous_Access_Type\n            or else Is_Local_Anonymous_Access (Typ)\n@@ -4771,8 +4772,7 @@ package body Sem_Res is\n             Resolve (N, Any_Fixed);\n \n          elsif Is_Fixed_Point_Type (B_Typ)\n-           and then (T = Universal_Real\n-                      or else Is_Fixed_Point_Type (T))\n+           and then (T = Universal_Real or else Is_Fixed_Point_Type (T))\n            and then Is_Overloaded (N)\n          then\n             --  C * F(X) in a fixed context, where C is a real literal or a\n@@ -4880,7 +4880,7 @@ package body Sem_Res is\n                         and then Is_Fixed_Point_Type (B_Typ))\n               or else (Is_Fixed_Point_Type (B_Typ)\n                         and then (Is_Integer_Or_Universal (L)\n-                                   or else\n+                                    or else\n                                   Is_Integer_Or_Universal (R))))\n         and then Nkind_In (N, N_Op_Multiply, N_Op_Divide)\n       then\n@@ -4974,7 +4974,7 @@ package body Sem_Res is\n \n       else\n          if (TL = Universal_Integer or else TL = Universal_Real)\n-              and then\n+               and then\n             (TR = Universal_Integer or else TR = Universal_Real)\n          then\n             Check_For_Visible_Operator (N, B_Typ);\n@@ -5138,7 +5138,7 @@ package body Sem_Res is\n                --  In this case, the back end has to generate additional tests.\n \n                if (Nkind (N) = N_Op_Rem and then (LNeg and RNeg))\n-                    or else\n+                     or else\n                   (Nkind (N) = N_Op_Mod and then (LNeg or RNeg))\n                then\n                   Check_Restriction (No_Implicit_Conditionals, N);"}, {"sha": "7ded7dbfa2706918bd1a0e5df5ab56182c6d9191", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e86f67917967e048d40e25579bf49414a85d8d9/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e86f67917967e048d40e25579bf49414a85d8d9/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=2e86f67917967e048d40e25579bf49414a85d8d9", "patch": "@@ -6772,6 +6772,9 @@ package Sinfo is\n       --  a copy of the expression for visibility analysis, see spec of\n       --  Sem_Ch13 for full details of this usage.\n \n+      --  In the case of aspects of the form xxx'Class, the aspect identifier\n+      --  is for xxx, and Class_Present is set to True.\n+\n       --  Note: When a Pre or Post aspect specification is processed, it is\n       --  broken into AND THEN sections. The left most section has Split_PPC\n       --  set to False, indicating that it is the original specification (e.g."}]}