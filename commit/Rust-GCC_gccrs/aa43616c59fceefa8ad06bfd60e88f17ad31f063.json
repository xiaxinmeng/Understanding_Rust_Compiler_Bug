{"sha": "aa43616c59fceefa8ad06bfd60e88f17ad31f063", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE0MzYxNmM1OWZjZWVmYThhZDA2YmZkNjBlODhmMTdhZDMxZjA2Mw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2016-03-16T16:50:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2016-03-16T16:50:18Z"}, "message": "re PR middle-end/70199 (Crash at -O2 when using labels.)\n\nPR middle-end/70199\n\n * function.h (struct function): Add has_forced_label_in_static.\n * gimplify.c (force_labels_r): Set it.\n * lto-streamer-in.c (input_struct_function_base): Read it.\n * lto-streamer-out.c (output_struct_function_base): Write it.\n * tree-inline.c (has_label_address_in_static_1): Remove.\n (copy_forbidden): Remove fndecl parameter; test\n has_forced_label_in_static.\n (inline_forbidden_p): Update call to copy_forbidden.\n (tree_versionable_function_p): Likewise.\n * ipa-chkp.c (chkp_instrumentable_p): Likewise.\n (chkp_versioning): Likewise.\n * tree-inline.h (copy_forbidden): Update decl.\n\ntestsuite/\n * gcc.c-torture/compile/pr70199.c: New.\n\nFrom-SVN: r234261", "tree": {"sha": "f650bc6e08ced3e2299e88208f3fcabd0e84f968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f650bc6e08ced3e2299e88208f3fcabd0e84f968"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa43616c59fceefa8ad06bfd60e88f17ad31f063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa43616c59fceefa8ad06bfd60e88f17ad31f063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa43616c59fceefa8ad06bfd60e88f17ad31f063", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa43616c59fceefa8ad06bfd60e88f17ad31f063/comments", "author": null, "committer": null, "parents": [{"sha": "59608fe587074a6f704d39fd08b6a05f6fb11bf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59608fe587074a6f704d39fd08b6a05f6fb11bf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59608fe587074a6f704d39fd08b6a05f6fb11bf2"}], "stats": {"total": 119, "additions": 71, "deletions": 48}, "files": [{"sha": "b673443c1038993116bc81d393e6ee0b3de3fa87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa43616c59fceefa8ad06bfd60e88f17ad31f063", "patch": "@@ -1,3 +1,19 @@\n+2016-03-16  Richard Henderson  <rth@redhat.com>\n+\n+\tPR middle-end/70199\n+\t* function.h (struct function): Add has_forced_label_in_static.\n+\t* gimplify.c (force_labels_r): Set it.\n+\t* lto-streamer-in.c (input_struct_function_base): Read it.\n+\t* lto-streamer-out.c (output_struct_function_base): Write it.\n+\t* tree-inline.c (has_label_address_in_static_1): Remove.\n+\t(copy_forbidden): Remove fndecl parameter; test\n+\thas_forced_label_in_static.\n+\t(inline_forbidden_p): Update call to copy_forbidden.\n+\t(tree_versionable_function_p): Likewise.\n+\t* ipa-chkp.c (chkp_instrumentable_p): Likewise.\n+\t(chkp_versioning): Likewise.\n+\t* tree-inline.h (copy_forbidden): Update decl.\n+\n 2016-03-16  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70093"}, {"sha": "501ef68484018d5ebb1982a2b5e6b4df6130e75e", "filename": "gcc/function.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=aa43616c59fceefa8ad06bfd60e88f17ad31f063", "patch": "@@ -328,6 +328,10 @@ struct GTY(()) function {\n      from nested functions.  */\n   unsigned int has_nonlocal_label : 1;\n \n+  /* Nonzero if function being compiled has a forced label\n+     placed into static storage.  */\n+  unsigned int has_forced_label_in_static : 1;\n+\n   /* Nonzero if we've set cannot_be_copied_reason.  I.e. if\n      (cannot_be_copied_set && !cannot_be_copied_reason), the function\n      can in fact be copied.  */"}, {"sha": "84ce46ea1a3155cdfc5697b6ed24e98648dc82ec", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=aa43616c59fceefa8ad06bfd60e88f17ad31f063", "patch": "@@ -1414,7 +1414,10 @@ force_labels_r (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n   if (TYPE_P (*tp))\n     *walk_subtrees = 0;\n   if (TREE_CODE (*tp) == LABEL_DECL)\n-    FORCED_LABEL (*tp) = 1;\n+    {\n+      FORCED_LABEL (*tp) = 1;\n+      cfun->has_forced_label_in_static = 1;\n+    }\n \n   return NULL_TREE;\n }"}, {"sha": "5f5df6483a79657a3b5d09fd066170e440b8c2dd", "filename": "gcc/ipa-chkp.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Fipa-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Fipa-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-chkp.c?ref=aa43616c59fceefa8ad06bfd60e88f17ad31f063", "patch": "@@ -470,7 +470,7 @@ chkp_instrumentable_p (tree fndecl)\n   return (!lookup_attribute (\"bnd_legacy\", DECL_ATTRIBUTES (fndecl))\n \t  && (!flag_chkp_instrument_marked_only\n \t      || lookup_attribute (\"bnd_instrument\", DECL_ATTRIBUTES (fndecl)))\n-\t  && (!fn || !copy_forbidden (fn, fndecl)));\n+\t  && (!fn || !copy_forbidden (fn)));\n }\n \n /* Return clone created for instrumentation of NODE or NULL.  */\n@@ -644,22 +644,22 @@ chkp_versioning (void)\n \n   FOR_EACH_DEFINED_FUNCTION (node)\n     {\n+      tree decl = node->decl;\n       if (!node->instrumentation_clone\n \t  && !node->instrumented_version\n \t  && !node->alias\n \t  && !node->thunk.thunk_p\n-\t  && (!DECL_BUILT_IN (node->decl)\n-\t      || (DECL_BUILT_IN_CLASS (node->decl) == BUILT_IN_NORMAL\n-\t\t  && DECL_FUNCTION_CODE (node->decl) < BEGIN_CHKP_BUILTINS)))\n+\t  && (!DECL_BUILT_IN (decl)\n+\t      || (DECL_BUILT_IN_CLASS (decl) == BUILT_IN_NORMAL\n+\t\t  && DECL_FUNCTION_CODE (decl) < BEGIN_CHKP_BUILTINS)))\n \t{\n-\t  if (chkp_instrumentable_p (node->decl))\n-\t    chkp_maybe_create_clone (node->decl);\n-\t  else if ((reason = copy_forbidden (DECL_STRUCT_FUNCTION (node->decl),\n-\t\t\t\t\t     node->decl)))\n+\t  if (chkp_instrumentable_p (decl))\n+\t    chkp_maybe_create_clone (decl);\n+\t  else if ((reason = copy_forbidden (DECL_STRUCT_FUNCTION (decl))))\n \t    {\n-\t      if (warning_at (DECL_SOURCE_LOCATION (node->decl), OPT_Wchkp,\n+\t      if (warning_at (DECL_SOURCE_LOCATION (decl), OPT_Wchkp,\n \t\t\t      \"function cannot be instrumented\"))\n-\t\tinform (DECL_SOURCE_LOCATION (node->decl), reason, node->decl);\n+\t\tinform (DECL_SOURCE_LOCATION (decl), reason, decl);\n \t    }\n \t}\n     }"}, {"sha": "dd48777effa2b2a6cec085027794a98c6a460d38", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=aa43616c59fceefa8ad06bfd60e88f17ad31f063", "patch": "@@ -1008,6 +1008,7 @@ input_struct_function_base (struct function *fn, struct data_in *data_in,\n   fn->after_inlining = bp_unpack_value (&bp, 1);\n   fn->stdarg = bp_unpack_value (&bp, 1);\n   fn->has_nonlocal_label = bp_unpack_value (&bp, 1);\n+  fn->has_forced_label_in_static = bp_unpack_value (&bp, 1);\n   fn->calls_alloca = bp_unpack_value (&bp, 1);\n   fn->calls_setjmp = bp_unpack_value (&bp, 1);\n   fn->has_force_vectorize_loops = bp_unpack_value (&bp, 1);"}, {"sha": "6703d4106deea19f05f727b59776e1f8d9ff6782", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=aa43616c59fceefa8ad06bfd60e88f17ad31f063", "patch": "@@ -2014,6 +2014,7 @@ output_struct_function_base (struct output_block *ob, struct function *fn)\n   bp_pack_value (&bp, fn->after_inlining, 1);\n   bp_pack_value (&bp, fn->stdarg, 1);\n   bp_pack_value (&bp, fn->has_nonlocal_label, 1);\n+  bp_pack_value (&bp, fn->has_forced_label_in_static, 1);\n   bp_pack_value (&bp, fn->calls_alloca, 1);\n   bp_pack_value (&bp, fn->calls_setjmp, 1);\n   bp_pack_value (&bp, fn->has_force_vectorize_loops, 1);"}, {"sha": "451e65365fcc655176f80635a6e75618e55f813d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa43616c59fceefa8ad06bfd60e88f17ad31f063", "patch": "@@ -1,3 +1,8 @@\n+2016-03-16  Richard Henderson  <rth@redhat.com>\n+\n+\tPR middle-end/70199\n+\t* gcc.c-torture/compile/pr70199.c: New.\n+\n 2016-03-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.dg/uninit-19.c: Run dos2unix."}, {"sha": "a4323f09f234000be845418f2d129227efd18551", "filename": "gcc/testsuite/gcc.c-torture/compile/pr70199.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70199.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70199.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr70199.c?ref=aa43616c59fceefa8ad06bfd60e88f17ad31f063", "patch": "@@ -0,0 +1,20 @@\n+static volatile int v = 0;\n+static\n+void benchmark(long runs) {\n+  void* labels[] = {\n+    &&l0, &&l1, &&l2\n+  };\n+  for(unsigned int mask = 0x1F; mask > 0; mask >>= 1) {\n+    unsigned lfsr = 0xACE1u;\n+    long n = 10000000;\n+    while(n > 0) {\n+      l2: v;\n+      l1: v;\n+      goto *labels[lfsr & mask];\n+      l0: n--;\n+    }\n+  }\n+}\n+int f(void) {\n+  benchmark(10000000);\n+}"}, {"sha": "9d4f8f7815d56b8e4c066598be232cd22b3e7d75", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=aa43616c59fceefa8ad06bfd60e88f17ad31f063", "patch": "@@ -3504,33 +3504,13 @@ declare_return_variable (copy_body_data *id, tree return_slot, tree modify_dest,\n   return use;\n }\n \n-/* Callback through walk_tree.  Determine if a DECL_INITIAL makes reference\n-   to a local label.  */\n-\n-static tree\n-has_label_address_in_static_1 (tree *nodep, int *walk_subtrees, void *fnp)\n-{\n-  tree node = *nodep;\n-  tree fn = (tree) fnp;\n-\n-  if (TREE_CODE (node) == LABEL_DECL && DECL_CONTEXT (node) == fn)\n-    return node;\n-\n-  if (TYPE_P (node))\n-    *walk_subtrees = 0;\n-\n-  return NULL_TREE;\n-}\n-\n /* Determine if the function can be copied.  If so return NULL.  If\n    not return a string describng the reason for failure.  */\n \n const char *\n-copy_forbidden (struct function *fun, tree fndecl)\n+copy_forbidden (struct function *fun)\n {\n   const char *reason = fun->cannot_be_copied_reason;\n-  tree decl;\n-  unsigned ix;\n \n   /* Only examine the function once.  */\n   if (fun->cannot_be_copied_set)\n@@ -3549,19 +3529,12 @@ copy_forbidden (struct function *fun, tree fndecl)\n       goto fail;\n     }\n \n-  FOR_EACH_LOCAL_DECL (fun, ix, decl)\n-    if (TREE_CODE (decl) == VAR_DECL\n-\t&& TREE_STATIC (decl)\n-\t&& !DECL_EXTERNAL (decl)\n-\t&& DECL_INITIAL (decl)\n-\t&& walk_tree_without_duplicates (&DECL_INITIAL (decl),\n-\t\t\t\t\t has_label_address_in_static_1,\n-\t\t\t\t\t fndecl))\n-      {\n-\treason = G_(\"function %q+F can never be copied because it saves \"\n-\t\t    \"address of local label in a static variable\");\n-\tgoto fail;\n-      }\n+  if (fun->has_forced_label_in_static)\n+    {\n+      reason = G_(\"function %q+F can never be copied because it saves \"\n+\t\t  \"address of local label in a static variable\");\n+      goto fail;\n+    }\n \n  fail:\n   fun->cannot_be_copied_reason = reason;\n@@ -3705,7 +3678,7 @@ inline_forbidden_p (tree fndecl)\n   bool forbidden_p = false;\n \n   /* First check for shared reasons not to copy the code.  */\n-  inline_forbidden_reason = copy_forbidden (fun, fndecl);\n+  inline_forbidden_reason = copy_forbidden (fun);\n   if (inline_forbidden_reason != NULL)\n     return true;\n \n@@ -5552,7 +5525,7 @@ bool\n tree_versionable_function_p (tree fndecl)\n {\n   return (!lookup_attribute (\"noclone\", DECL_ATTRIBUTES (fndecl))\n-\t  && copy_forbidden (DECL_STRUCT_FUNCTION (fndecl), fndecl) == NULL);\n+\t  && copy_forbidden (DECL_STRUCT_FUNCTION (fndecl)) == NULL);\n }\n \n /* Delete all unreachable basic blocks and update callgraph."}, {"sha": "9ca2a91f08f25cbab059a1aebf38b5eef28dbbed", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa43616c59fceefa8ad06bfd60e88f17ad31f063/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=aa43616c59fceefa8ad06bfd60e88f17ad31f063", "patch": "@@ -217,7 +217,7 @@ extern tree remap_type (tree type, copy_body_data *id);\n extern gimple_seq copy_gimple_seq_and_replace_locals (gimple_seq seq);\n extern bool debug_find_tree (tree, tree);\n extern tree copy_fn (tree, tree&, tree&);\n-extern const char *copy_forbidden (struct function *fun, tree fndecl);\n+extern const char *copy_forbidden (struct function *fun);\n \n /* This is in tree-inline.c since the routine uses\n    data structures from the inliner.  */"}]}