{"sha": "e4171e100d6c3c5263f8e329fd71edb554a67ea5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQxNzFlMTAwZDZjM2M1MjYzZjhlMzI5ZmQ3MWVkYjU1NGE2N2VhNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-05-18T18:03:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-18T18:03:30Z"}, "message": "re PR target/80799 (x86-32 bits generates MMX without EMMS)\n\n\tPR target/80799\n\t* config/i386/mmx.md (*mov<mode>_internal): Enable\n\talternatives 11, 12, 13 and 14 also for 32bit targets.\n\tRemove alternatives 15, 16, 17 and 18.\n\t* config/i386/sse.md (vec_concatv2di): Change\n\talternative (!x, *y) to (x, ?!*Yn).\n\ntestsuite/ChangeLog:\n\n\tPR target/80799\n\t* g++.dg/other/i386-11.C: New test.\n\nFrom-SVN: r248246", "tree": {"sha": "2d0adeaa0a2edcef7927a0bc55d73bd97e403ae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d0adeaa0a2edcef7927a0bc55d73bd97e403ae8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4171e100d6c3c5263f8e329fd71edb554a67ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4171e100d6c3c5263f8e329fd71edb554a67ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4171e100d6c3c5263f8e329fd71edb554a67ea5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4171e100d6c3c5263f8e329fd71edb554a67ea5/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "747217d179fc6293fa6f3dda7ac21b58574c2ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747217d179fc6293fa6f3dda7ac21b58574c2ecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/747217d179fc6293fa6f3dda7ac21b58574c2ecf"}], "stats": {"total": 93, "additions": 82, "deletions": 11}, "files": [{"sha": "0299a550ac41b85bf70e3dd87108a1f598a9f61d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4171e100d6c3c5263f8e329fd71edb554a67ea5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4171e100d6c3c5263f8e329fd71edb554a67ea5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4171e100d6c3c5263f8e329fd71edb554a67ea5", "patch": "@@ -1,3 +1,12 @@\n+2017-05-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/80799\n+\t* config/i386/mmx.md (*mov<mode>_internal): Enable\n+\talternatives 11, 12, 13 and 14 also for 32bit targets.\n+\tRemove alternatives 15, 16, 17 and 18.\n+\t* config/i386/sse.md (vec_concatv2di): Change\n+\talternative (!x, *y) to (x, ?!*Yn).\n+\n 2017-05-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* dumpfile.h (enum dump_kind): Remove stray comma.\n@@ -280,7 +289,7 @@\n \n 2017-05-16  Uros Bizjak  <ubizjak@gmail.com>\n \n-\t* config/i386.i386.md (*movsi_internal): Split (?rm,*y) alternative\n+\t* config/i386/i386.md (*movsi_internal): Split (?rm,*y) alternative\n \tto (?r,*Yn) and (?m,*y) alternatives, and (?*y,rm) to (?*Ym,r)\n \tand (?*y,m).  Update insn attributes.\n "}, {"sha": "7a1789f0b473f5dbe63547bcf151e8ae0b2b745e", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4171e100d6c3c5263f8e329fd71edb554a67ea5/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4171e100d6c3c5263f8e329fd71edb554a67ea5/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=e4171e100d6c3c5263f8e329fd71edb554a67ea5", "patch": "@@ -78,9 +78,9 @@\n \n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:MMXMODE 0 \"nonimmediate_operand\"\n-    \"=r ,o ,r,r ,m ,?!y,!y,?!y,m  ,r   ,?!Ym,v,v,v,m,*x,*x,*x,m ,r ,Yi,!Ym,*Yi\")\n+    \"=r ,o ,r,r ,m ,?!y,!y,?!y,m  ,r   ,?!Ym,v,v,v,m,r ,Yi,!Ym,*Yi\")\n \t(match_operand:MMXMODE 1 \"vector_move_operand\"\n-    \"rCo,rC,C,rm,rC,C  ,!y,m  ,?!y,?!Yn,r   ,C,v,m,v,C ,*x,m ,*x,Yj,r ,*Yj,!Yn\"))]\n+    \"rCo,rC,C,rm,rC,C  ,!y,m  ,?!y,?!Yn,r   ,C,v,m,v,Yj,r ,*Yj,!Yn\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n@@ -146,7 +146,7 @@\n   [(set (attr \"isa\")\n      (cond [(eq_attr \"alternative\" \"0,1\")\n \t      (const_string \"nox64\")\n-\t    (eq_attr \"alternative\" \"2,3,4,9,10,11,12,13,14,19,20\")\n+\t    (eq_attr \"alternative\" \"2,3,4,9,10,15,16\")\n \t      (const_string \"x64\")\n \t   ]\n \t   (const_string \"*\")))\n@@ -159,14 +159,14 @@\n \t      (const_string \"mmx\")\n \t    (eq_attr \"alternative\" \"6,7,8,9,10\")\n \t      (const_string \"mmxmov\")\n-\t    (eq_attr \"alternative\" \"11,15\")\n+\t    (eq_attr \"alternative\" \"11\")\n \t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"21,22\")\n+\t    (eq_attr \"alternative\" \"17,18\")\n \t      (const_string \"ssecvt\")\n \t   ]\n \t   (const_string \"ssemov\")))\n    (set (attr \"prefix_rex\")\n-     (if_then_else (eq_attr \"alternative\" \"9,10,19,20\")\n+     (if_then_else (eq_attr \"alternative\" \"9,10,15,16\")\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"prefix\")\n@@ -181,7 +181,7 @@\n    (set (attr \"mode\")\n      (cond [(eq_attr \"alternative\" \"2\")\n \t      (const_string \"SI\")\n-\t    (eq_attr \"alternative\" \"11,12,15,16\")\n+\t    (eq_attr \"alternative\" \"11,12\")\n \t      (cond [(ior (match_operand 0 \"ext_sse_reg_operand\")\n \t\t\t  (match_operand 1 \"ext_sse_reg_operand\"))\n \t\t\t(const_string \"XI\")\n@@ -197,7 +197,7 @@\n \t\t    ]\n \t\t    (const_string \"TI\"))\n \n-\t    (and (eq_attr \"alternative\" \"13,14,17,18\")\n+\t    (and (eq_attr \"alternative\" \"13,14\")\n \t    \t (ior (match_test \"<MODE>mode == V2SFmode\")\n \t\t      (not (match_test \"TARGET_SSE2\"))))\n \t      (const_string \"V2SF\")"}, {"sha": "7f27ca854efeabcddf2350cab4a229a017e6d4a1", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4171e100d6c3c5263f8e329fd71edb554a67ea5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4171e100d6c3c5263f8e329fd71edb554a67ea5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e4171e100d6c3c5263f8e329fd71edb554a67ea5", "patch": "@@ -13863,10 +13863,10 @@\n ;; movd instead of movq is required to handle broken assemblers.\n (define_insn \"vec_concatv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\"\n-\t  \"=Yr,*x,x ,v ,Yi,v ,!x,x,v ,x,x,v\")\n+\t  \"=Yr,*x,x ,v ,Yi,v ,x    ,x,v ,x,x,v\")\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\"\n-\t  \"  0, 0,x ,Yv,r ,vm,*y,0,Yv,0,0,v\")\n+\t  \"  0, 0,x ,Yv,r ,vm,?!*Yn,0,Yv,0,0,v\")\n \t  (match_operand:DI 2 \"vector_move_operand\"\n \t  \"*rm,rm,rm,rm,C ,C ,C ,x,Yv,x,m,m\")))]\n   \"TARGET_SSE\""}, {"sha": "60299f2c8c1c2a4465c1cf6284d303ec656669a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4171e100d6c3c5263f8e329fd71edb554a67ea5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4171e100d6c3c5263f8e329fd71edb554a67ea5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4171e100d6c3c5263f8e329fd71edb554a67ea5", "patch": "@@ -1,3 +1,8 @@\n+2017-05-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/80799\n+\t* g++.dg/other/i386-11.C: New test.\n+\n 2017-05-18  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* fold-vec-div-float.c: Update dg-requires and dg-options statements."}, {"sha": "8e06617fca55e56ab527832031cf40fb3973d0a4", "filename": "gcc/testsuite/g++.dg/other/i386-11.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4171e100d6c3c5263f8e329fd71edb554a67ea5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4171e100d6c3c5263f8e329fd71edb554a67ea5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-11.C?ref=e4171e100d6c3c5263f8e329fd71edb554a67ea5", "patch": "@@ -0,0 +1,57 @@\n+// PR target/80799\n+// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-require-effective-target c++11 }\n+// { dg-options \"-O2 -msse2\" }\n+\n+#include <xmmintrin.h>\n+#include <emmintrin.h>\n+\n+class alignas(16) GSVector4i\n+{\n+public:\n+    __m128i m;\n+\n+\texplicit GSVector4i(__m128i m)\n+\t{\n+\t\tthis->m = m;\n+\t}\n+\n+\tstatic void storel(void* p, const GSVector4i& v)\n+\t{\n+\t\t_mm_storel_epi64((__m128i*)p, v.m);\n+\t}\n+\n+\tstatic GSVector4i loadl(const void* p)\n+\t{\n+\t\treturn GSVector4i(_mm_loadl_epi64((__m128i*)p));\n+\t}\n+\n+\tbool eq(const GSVector4i& v) const\n+\t{\n+\t\treturn _mm_movemask_epi8(_mm_cmpeq_epi32(m, v.m)) == 0xffff;\n+\t}\n+};\n+\n+\n+union GIFRegTRXPOS\n+{\n+\tunsigned long long u64;\n+\tvoid operator = (const GSVector4i& v) {GSVector4i::storel(this, v);}\n+\tbool operator != (const union GIFRegTRXPOS& r) const {return !((GSVector4i)r).eq(*this);}\n+\toperator GSVector4i() const {return GSVector4i::loadl(this);}\n+};\n+\n+extern void dummy_call();\n+extern GIFRegTRXPOS TRXPOS;\n+\n+void GIFRegHandlerTRXPOS(const GIFRegTRXPOS&  p)\n+{\n+\tif(p != TRXPOS)\n+\t{\n+\t\tdummy_call();\n+\t}\n+\n+\tTRXPOS = (GSVector4i)p;\n+}\n+\n+// { dg-final { scan-assembler-not \"%mm\" } }"}]}