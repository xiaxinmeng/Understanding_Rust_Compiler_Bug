{"sha": "f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNiZjBkOWE1ODA1NzU0YjljYzQ0OWI4ZDhkNWM2NGQ5ZTk4MzYxYQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2015-10-23T12:39:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T12:39:08Z"}, "message": "exp_attr.adb, [...]: Minor reformatting.\n\n2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_attr.adb, freeze.adb, sem_attr.adb, exp_aggr.adb,\n\tgnatname.adb: Minor reformatting.\n\nFrom-SVN: r229244", "tree": {"sha": "505900f20a0cf1a18913e8995b20109a4a75fc0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/505900f20a0cf1a18913e8995b20109a4a75fc0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6031f544ddf64571b5d83c59a9bac6a5fc3d0182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6031f544ddf64571b5d83c59a9bac6a5fc3d0182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6031f544ddf64571b5d83c59a9bac6a5fc3d0182"}], "stats": {"total": 63, "additions": 35, "deletions": 28}, "files": [{"sha": "a4dbbe5f72e17181bd80f5bb1ba3a6ae3f93a5d3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a", "patch": "@@ -1,3 +1,8 @@\n+2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_attr.adb, freeze.adb, sem_attr.adb, exp_aggr.adb,\n+\tgnatname.adb: Minor reformatting.\n+\n 2015-10-23  Steve Baird  <baird@adacore.com>\n \n \t* a-cbdlli.ads, a-cbhama.ads, a-cbhase.ads, a-cbmutr.ads,"}, {"sha": "f09759702aaa012de340c76f91bbb1eeccad4d6d", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a", "patch": "@@ -6509,9 +6509,10 @@ package body Exp_Aggr is\n               Into        => Target,\n               Scalar_Comp => Is_Scalar_Type (Component_Type (Typ)),\n               Indexes     => No_List);\n-      else\n-         --  Directly or indirectly (e.g. access protected procedure) a record\n \n+      --  Directly or indirectly (e.g. access protected procedure) a record\n+\n+      else\n          Aggr_Code := Build_Record_Aggr_Code (N, Typ, Target);\n       end if;\n "}, {"sha": "51297ec413259720089c5988259f8da0c1390c5e", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a", "patch": "@@ -1473,22 +1473,25 @@ package body Exp_Attr is\n                declare\n                   T1 : constant Entity_Id := Make_Temporary (Loc, 'T', Left);\n                   T2 : constant Entity_Id := Make_Temporary (Loc, 'T', Right);\n+\n                begin\n                   Rewrite (N,\n                     Make_Expression_With_Actions (Loc,\n-                      Actions => New_List (\n+                      Actions    => New_List (\n                         Make_Object_Declaration (Loc,\n                           Defining_Identifier => T1,\n+                          Constant_Present    => True,\n                           Object_Definition   =>\n                             New_Occurrence_Of (Etype (Left), Loc),\n-                          Constant_Present    => True,\n                           Expression          => Relocate_Node (Left)),\n+\n                         Make_Object_Declaration (Loc,\n                           Defining_Identifier => T2,\n+                          Constant_Present    => True,\n                           Object_Definition   =>\n                             New_Occurrence_Of (Etype (Right), Loc),\n-                          Constant_Present    => True,\n                           Expression          => Relocate_Node (Right))),\n+\n                       Expression =>\n                         Make_If_Expression (Loc,\n                           Expressions => New_List ("}, {"sha": "081d7513c538b8c4e1a6e8d0e0830773a411c128", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a", "patch": "@@ -3356,8 +3356,9 @@ package body Freeze is\n               and then not Has_Warnings_Off (E)\n               and then not Has_Warnings_Off (R_Type)\n             then\n-               Error_Msg_N (\"?x?foreign convention function& should not \" &\n-                 \"return unconstrained array!\", E);\n+               Error_Msg_N\n+                 (\"?x?foreign convention function& should not return \"\n+                  & \"unconstrained array!\", E);\n             end if;\n          end if;\n \n@@ -4266,7 +4267,7 @@ package body Freeze is\n             end if;\n          end if;\n \n-         --  The following checks are only relevant when SPARK_Mode is on as\n+         --  The following checks are relevant only when SPARK_Mode is on as\n          --  they are not standard Ada legality rules.\n \n          if SPARK_Mode = On then"}, {"sha": "a01bbb20eebcf1dbcf7d326c34eb6f1046b7e3c6", "filename": "gcc/ada/gnatname.adb", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a/gcc%2Fada%2Fgnatname.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a/gcc%2Fada%2Fgnatname.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatname.adb?ref=f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a", "patch": "@@ -613,22 +613,22 @@ begin\n       declare\n          Gnatname : constant String_Access :=\n                       Program_Name (\"gnatname\", \"gnatname\");\n+         Arg_Len  : Positive      := Argument_Count;\n          Target   : String_Access := null;\n-         Arg_Len  : Positive := Argument_Count;\n \n       begin\n          --  Find the target, if any\n \n          if Gnatname.all /= \"gnatname\" then\n-            Target := new String'(Gnatname\n-                                  (Gnatname'First .. Gnatname'Last - 9));\n+            Target :=\n+              new String'(Gnatname (Gnatname'First .. Gnatname'Last - 9));\n             Arg_Len := Arg_Len + 1;\n          end if;\n \n          declare\n+            Args    : Argument_List (1 .. Arg_Len);\n             Gprname : String_Access :=\n-                         Locate_Exec_On_Path (Exec_Name => \"gprname\");\n-            Args : Argument_List (1 .. Arg_Len);\n+                        Locate_Exec_On_Path (Exec_Name => \"gprname\");\n             Success : Boolean;\n \n          begin\n@@ -640,8 +640,7 @@ begin\n                --  Add the target if there is one\n \n                if Target /= null then\n-                  Args (Args'Last) :=\n-                    new String'(\"--target=\" & Target.all);\n+                  Args (Args'Last) := new String'(\"--target=\" & Target.all);\n                end if;\n \n                Spawn (Gprname.all, Args, Success);\n@@ -656,19 +655,19 @@ begin\n       end;\n    end if;\n \n-   if Create_Project then\n-      --  This only happens if gprname is not found or if the invocation of\n-      --  gprname did not succeed.\n+   --  This only happens if gprname is not found or if the invocation of\n+   --  gprname did not succeed.\n \n+   if Create_Project then\n       Write_Line\n-           (\"warning: gnatname -P is obsolete and will not be available \"\n-            & \"in the next release; use gprname instead\");\n+        (\"warning: gnatname -P is obsolete and will not be available in the \"\n+         & \"next release; use gprname instead\");\n    end if;\n \n    --  If no Ada or foreign pattern was specified, print the usage and return\n \n    if Patterns.Last (Arguments.Table (Arguments.Last).Name_Patterns) = 0\n-      and then\n+        and then\n       Patterns.Last (Arguments.Table (Arguments.Last).Foreign_Patterns) = 0\n    then\n       if Argument_Count = 0 then\n@@ -685,9 +684,7 @@ begin\n    --  information, the current directory is the directory of the specified\n    --  file.\n \n-   if Patterns.Last\n-     (Arguments.Table (Arguments.Last).Directories) = 0\n-   then\n+   if Patterns.Last (Arguments.Table (Arguments.Last).Directories) = 0 then\n       Patterns.Append\n         (Arguments.Table (Arguments.Last).Directories, new String'(\".\"));\n    end if;"}, {"sha": "21b66d4931373e05e6c8dc07d26cafd5faaa70ff", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=f3bf0d9a5805754b9cc449b8d8d5c64d9e98361a", "patch": "@@ -4312,10 +4312,10 @@ package body Sem_Attr is\n             Stmt := Parent (Stmt);\n          end loop;\n \n-            --  Loop_Entry must appear within a Loop_Assertion pragma (Assert,\n-            --  Assert_And_Cut, Assume count as loop assertion pragmas for this\n-            --  purpose if they appear in an appropriate location in a loop,\n-            --  which was already checked by the top level pragma circuit).\n+         --  Loop_Entry must appear within a Loop_Assertion pragma (Assert,\n+         --  Assert_And_Cut, Assume count as loop assertion pragmas for this\n+         --  purpose if they appear in an appropriate location in a loop,\n+         --  which was already checked by the top level pragma circuit).\n \n          if No (Enclosing_Pragma) then\n             Error_Attr (\"attribute% must appear within appropriate pragma\", N);"}]}