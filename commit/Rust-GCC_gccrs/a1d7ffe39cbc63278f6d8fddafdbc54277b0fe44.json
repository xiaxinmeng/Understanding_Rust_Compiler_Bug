{"sha": "a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFkN2ZmZTM5Y2JjNjMyNzhmNmQ4ZmRkYWZkYmM1NDI3N2IwZmU0NA==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-02-16T10:05:43Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1997-02-16T10:05:43Z"}, "message": "x\n\nFrom-SVN: r13652", "tree": {"sha": "d6b9b2c6fe9863eb2cfd4237926e750de729ce2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6b9b2c6fe9863eb2cfd4237926e750de729ce2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44/comments", "author": null, "committer": null, "parents": [{"sha": "6e47932d3c751ba0f2ee5706221597b79ec53fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e47932d3c751ba0f2ee5706221597b79ec53fd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e47932d3c751ba0f2ee5706221597b79ec53fd4"}], "stats": {"total": 81, "additions": 52, "deletions": 29}, "files": [{"sha": "d921661578e55a8b5bfeabbfe3b03b005ae026ed", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44", "patch": "@@ -65,15 +65,12 @@ declare_function_name ()\n     }\n   else\n     {\n-      char *kind = \"function\";\n-      if (TREE_CODE (TREE_TYPE (current_function_decl)) == METHOD_TYPE)\n-\tkind = \"method\";\n       /* Allow functions to be nameless (such as artificial ones).  */\n       if (DECL_NAME (current_function_decl))\n         name = IDENTIFIER_POINTER (DECL_NAME (current_function_decl));\n       else\n \tname = \"\";\n-      printable_name = (*decl_printable_name) (current_function_decl, &kind);\n+      printable_name = (*decl_printable_name) (current_function_decl, 2);\n     }\n \n   declare_hidden_char_array (\"__FUNCTION__\", name);"}, {"sha": "6d79f54fcf96f4be42a13276cefef76a5f88f75d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44", "patch": "@@ -4443,6 +4443,18 @@ output_call_frame_info ()\n     }\n }\n \n+/* The DWARF2 pubname for a nested thingy looks like \"A::f\".  The output\n+   of decl_printable_name for C++ looks like \"A::f(int)\".  Let's drop the\n+   argument list, and maybe the scope.  */\n+\n+static char*\n+dwarf2_name (decl, scope)\n+     tree decl;\n+     int scope;\n+{\n+  return (*decl_printable_name) (decl, scope ? 1 : 0);\n+}\n+\n /* Add a new entry to .debug_pubnames if appropriate.  */\n static void\n add_pubname (decl, die)\n@@ -4462,7 +4474,8 @@ add_pubname (decl, die)\n     }\n   p = &pubname_table[pubname_table_in_use++];\n   p->die = die;\n-  p->name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+\n+  p->name = xstrdup (dwarf2_name (decl, 1));\n }\n \n /* Output the public names table used to speed up access to externally\n@@ -4616,7 +4629,12 @@ output_aranges ()\n       if (a->die_tag == DW_TAG_subprogram)\n \tASM_OUTPUT_DWARF_ADDR (asm_out_file, get_AT_low_pc (a));\n       else\n-\tASM_OUTPUT_DWARF_ADDR (asm_out_file, get_AT_string (a, DW_AT_name));\n+\t{\n+\t  char *name = get_AT_string (a, DW_AT_MIPS_linkage_name);\n+\t  if (! name)\n+\t    name = get_AT_string (a, DW_AT_name);\n+\t  ASM_OUTPUT_DWARF_ADDR (asm_out_file, name);\n+\t}\n       if (flag_verbose_asm)\n \t{\n \t  fprintf (asm_out_file, \"\\t%s Address\", ASM_COMMENT_START);\n@@ -6352,15 +6370,15 @@ add_name_and_src_coords_attributes (die, decl)\n      register tree decl;\n {\n   register tree decl_name;\n-  if (TREE_CODE (decl) == FUNCTION_DECL || TREE_CODE (decl) == VAR_DECL)\n-    decl_name = DECL_ASSEMBLER_NAME (decl);\n-  else\n-    decl_name = DECL_NAME (decl); \n-\n+  decl_name = DECL_NAME (decl); \n   if (decl_name && IDENTIFIER_POINTER (decl_name))\n     {\n-      add_name_attribute (die, IDENTIFIER_POINTER (decl_name));\n+      add_name_attribute (die, dwarf2_name (decl, 0));\n       add_src_coords_attributes (die, decl);\n+      if ((TREE_CODE (decl) == FUNCTION_DECL || TREE_CODE (decl) == VAR_DECL)\n+\t  && DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl))\n+\tadd_AT_string (die, DW_AT_MIPS_linkage_name,\n+\t\t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n     }\n }\n "}, {"sha": "51296117972f1f4be5d4aad3ed260a59435c1326", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44", "patch": "@@ -955,9 +955,8 @@ final_start_function (first, file, optimize)\n      of the function name.  */\n   if (profile_block_flag)\n     {\n-      char *junk = \"function\";\n       bb_func_label_num =\n-\tadd_bb_string ((*decl_printable_name) (current_function_decl, &junk), FALSE);\n+\tadd_bb_string ((*decl_printable_name) (current_function_decl, 2), FALSE);\n     }\n }\n "}, {"sha": "e38c614a60ddd05d821fa5210d57fbce0b5f7488", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44", "patch": "@@ -4902,8 +4902,6 @@ init_function_start (subr, filename, line)\n      char *filename;\n      int line;\n {\n-  char *junk;\n-\n   if (output_bytecode)\n     {\n       this_function_decl = subr;\n@@ -4951,7 +4949,7 @@ init_function_start (subr, filename, line)\n \n   init_const_rtx_hash_table ();\n \n-  current_function_name = (*decl_printable_name) (subr, &junk);\n+  current_function_name = (*decl_printable_name) (subr, 2);\n \n   /* Nonzero if this is a nested function that uses a static chain.  */\n "}, {"sha": "f536d839fdf44e88893463ac6e22206f221e62e1", "filename": "gcc/toplev.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44", "patch": "@@ -292,9 +292,15 @@ int sorrycount = 0;\n /* Flag to output bytecode instead of native assembler */\n int output_bytecode = 0;\n \n-/* Pointer to function to compute the name to use to print a declaration.  */\n+/* Pointer to function to compute the name to use to print a declaration.\n+   DECL is the declaration in question.\n+   VERBOSITY determines what information will be printed:\n+     0: DECL_NAME, demangled as necessary.\n+     1: and scope information.\n+     2: and any other information that might be interesting, such as function\n+        parameter types in C++.  */\n \n-char *(*decl_printable_name) ();\n+char *(*decl_printable_name) (/* tree decl, int verbosity */);\n \n /* Pointer to function to compute rtl for a language-specific tree code.  */\n \n@@ -1031,9 +1037,9 @@ fatal_insn_not_found (insn)\n /* This is the default decl_printable_name function.  */\n \n static char *\n-decl_name (decl, kind)\n+decl_name (decl, verbosity)\n      tree decl;\n-     char **kind;\n+     int verbosity;\n {\n   return IDENTIFIER_POINTER (DECL_NAME (decl));\n }\n@@ -1057,11 +1063,10 @@ announce_function (decl)\n {\n   if (! quiet_flag)\n     {\n-      char *junk;\n       if (rtl_dump_and_exit)\n \tfprintf (stderr, \"%s \", IDENTIFIER_POINTER (DECL_NAME (decl)));\n       else\n-\tfprintf (stderr, \" %s\", (*decl_printable_name) (decl, &junk));\n+\tfprintf (stderr, \" %s\", (*decl_printable_name) (decl, 2));\n       fflush (stderr);\n       need_error_newline = 1;\n       last_error_function = current_function_decl;\n@@ -1089,7 +1094,7 @@ default_print_error_function (file)\n \tfprintf (stderr, \"At top level:\\n\");\n       else\n \t{\n-\t  char *name = (*decl_printable_name) (current_function_decl, &kind);\n+\t  char *name = (*decl_printable_name) (current_function_decl, 2);\n \t  fprintf (stderr, \"In %s `%s':\\n\", kind, name);\n \t}\n \n@@ -1187,7 +1192,7 @@ v_message_with_decl (decl, prefix, s, ap)\n      char *s;\n      va_list ap;\n {\n-  char *n, *p, *junk;\n+  char *n, *p;\n \n   fprintf (stderr, \"%s:%d: \",\n \t   DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n@@ -1223,7 +1228,7 @@ v_message_with_decl (decl, prefix, s, ap)\n   if (*p == '%')\t\t/* Print the name.  */\n     {\n       char *n = (DECL_NAME (decl)\n-\t\t ? (*decl_printable_name) (decl, &junk)\n+\t\t ? (*decl_printable_name) (decl, 2)\n \t\t : \"((anonymous))\");\n       fputs (n, stderr);\n       while (*p)"}, {"sha": "ec1ce349a45f8a2d418b9fb1777bd71a77aa3bdf", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a1d7ffe39cbc63278f6d8fddafdbc54277b0fe44", "patch": "@@ -1639,9 +1639,15 @@ extern int current_function_calls_longjmp;\n \n extern int all_types_permanent;\n \n-/* Pointer to function to compute the name to use to print a declaration.  */\n-\n-extern char *(*decl_printable_name) ();\n+/* Pointer to function to compute the name to use to print a declaration.\n+   DECL is the declaration in question.\n+   VERBOSITY determines what information will be printed:\n+     0: DECL_NAME, demangled as necessary.\n+     1: and scope information.\n+     2: and any other information that might be interesting, such as function\n+        parameter types in C++.  */\n+\n+extern char *(*decl_printable_name) (/* tree decl, int verbosity */);\n \n /* Pointer to function to finish handling an incomplete decl at the\n    end of compilation.  */"}]}