{"sha": "ae3f6530573deaa7485be45662e506af7a56cfa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUzZjY1MzA1NzNkZWFhNzQ4NWJlNDU2NjJlNTA2YWY3YTU2Y2ZhOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-07-22T13:58:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-22T13:58:37Z"}, "message": "[Ada] Sinfo: update doc about Do_Division/Overlflow/Range_Check\n\n2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* sinfo.ads: Update the documentation about the\n\tDo_Division_Check, Do_Overflow_Check and Do_Range_Check flags.\n\nFrom-SVN: r273696", "tree": {"sha": "6692ee40d29aa192a129189be09dc07b10ee7f64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6692ee40d29aa192a129189be09dc07b10ee7f64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae3f6530573deaa7485be45662e506af7a56cfa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae3f6530573deaa7485be45662e506af7a56cfa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae3f6530573deaa7485be45662e506af7a56cfa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae3f6530573deaa7485be45662e506af7a56cfa9/comments", "author": null, "committer": null, "parents": [{"sha": "267c7ff6a07158cb9b904a8a5182ab498b039c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/267c7ff6a07158cb9b904a8a5182ab498b039c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/267c7ff6a07158cb9b904a8a5182ab498b039c72"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "26af730c6e31832d3763eb7970f9b7b2cf136273", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae3f6530573deaa7485be45662e506af7a56cfa9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae3f6530573deaa7485be45662e506af7a56cfa9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ae3f6530573deaa7485be45662e506af7a56cfa9", "patch": "@@ -1,3 +1,8 @@\n+2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sinfo.ads: Update the documentation about the\n+\tDo_Division_Check, Do_Overflow_Check and Do_Range_Check flags.\n+\n 2019-07-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_ch4.adb (Expand_N_Type_Conversion): Beef up comment."}, {"sha": "064147e262b708cfc3205456766c9411d123833d", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae3f6530573deaa7485be45662e506af7a56cfa9/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae3f6530573deaa7485be45662e506af7a56cfa9/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=ae3f6530573deaa7485be45662e506af7a56cfa9", "patch": "@@ -755,14 +755,15 @@ package Sinfo is\n    --  Do_Division_Check flag on float exponentiation expressions, for the case\n    --  where the value is 0.0 and the exponent is negative, although this case\n    --  does lead to a division check failure. As another special case,\n-   --  the frontend does not insert a Do_Range_Check on an allocator where\n+   --  the front end does not insert a Do_Range_Check on an allocator where\n    --  the designated type is scalar, and the designated type is more\n    --  constrained than the type of the initialized allocator value or the type\n    --  of the default value for an uninitialized allocator.\n \n-   --  Note: the expander always takes care of the Do_Range check case,\n-   --  so this flag will never be set in the expanded tree passed to the\n-   --  back end code generator.\n+   --  Note that the expander always takes care of the Do_Range_Check case, so\n+   --  this flag will never be set in the expanded tree passed to the back end.\n+   --  For the other two flags, the check can be generated either by the back\n+   --  end or by the front end, depending on the setting of a target parameter.\n \n    --  Note that this accounts for all nodes that trigger the corresponding\n    --  checks, except for range checks on subtype_indications, which may be\n@@ -1186,9 +1187,10 @@ package Sinfo is\n    --    conversion nodes (and set if the conversion requires a check).\n \n    --  Do_Division_Check (Flag13-Sem)\n-   --    This flag is set on a division operator (/ mod rem) to indicate\n-   --    that a zero divide check is required. The actual check is dealt\n-   --    with by the backend (all the front end does is to set the flag).\n+   --    This flag is set on a division operator (/ mod rem) to indicate that\n+   --    a zero divide check is required. The actual check is either dealt with\n+   --    by the back end if Backend_Divide_Checks is set to true, or by the\n+   --    front end itself if it is set to false.\n \n    --  Do_Length_Check (Flag4-Sem)\n    --    This flag is set in an N_Assignment_Statement, N_Op_And, N_Op_Or,\n@@ -1197,15 +1199,13 @@ package Sinfo is\n \n    --  Do_Overflow_Check (Flag17-Sem)\n    --    This flag is set on an operator where an overflow check is required on\n-   --    the operation. The actual check is dealt with by the backend (all the\n-   --    front end does is to set the flag). The other cases where this flag is\n-   --    used is on a Type_Conversion node and for attribute reference nodes.\n+   --    the operation. The actual check is either dealt with by the back end\n+   --    if Backend_Overflow_Checks is set to true, or by the front end itself\n+   --    if it is set to false. The other cases where this flag is used is on a\n+   --    Type_Conversion node as well on if and case expression nodes.\n    --    For a type conversion, it means that the conversion is from one base\n    --    type to another, and the value may not fit in the target base type.\n-   --    See also the description of Do_Range_Check for this case. The only\n-   --    attribute references which use this flag are Pred and Succ, where it\n-   --    means that the result should be checked for going outside the base\n-   --    range. Note that this flag is not set for modular types. This flag is\n+   --    See also the description of Do_Range_Check for this case. This flag is\n    --    also set on if and case expression nodes if we are operating in either\n    --    MINIMIZED or ELIMINATED overflow checking mode (to make sure that we\n    --    properly process overflow checking for dependent expressions).\n@@ -1215,9 +1215,9 @@ package Sinfo is\n    --    range check is required. The target type is clear from the context.\n    --    The contexts in which this flag can appear are the following:\n \n-   --      Right side of an assignment. In this case the target type is\n-   --      taken from the left side of the assignment, which is referenced\n-   --      by the Name of the N_Assignment_Statement node.\n+   --      Right side of an assignment. In this case the target type is taken\n+   --      from the left side of the assignment, which is referenced by the\n+   --      Name of the N_Assignment_Statement node.\n \n    --      Subscript expressions in an indexed component. In this case the\n    --      target type is determined from the type of the array, which is\n@@ -1251,15 +1251,6 @@ package Sinfo is\n    --    listed above (e.g. in a return statement), an additional type\n    --    conversion node is introduced to represent the required check.\n \n-   --    A special case arises for the arguments of the Pred/Succ attributes.\n-   --    Here the range check needed is against First + 1 .. Last (Pred) or\n-   --    First .. Last - 1 (Succ) of the corresponding base type. Essentially\n-   --    these checks are what would be performed within the implicit body of\n-   --    the functions that correspond to these attributes. In these cases,\n-   --    the Do_Range check flag is set on the argument to the attribute\n-   --    function, and the back end must special case the appropriate range\n-   --    to check against.\n-\n    --  Do_Storage_Check (Flag17-Sem)\n    --    This flag is set in an N_Allocator node to indicate that a storage\n    --    check is required for the allocation, or in an N_Subprogram_Body node"}]}