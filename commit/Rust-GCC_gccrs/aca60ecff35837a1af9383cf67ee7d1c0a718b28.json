{"sha": "aca60ecff35837a1af9383cf67ee7d1c0a718b28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNhNjBlY2ZmMzU4MzdhMWFmOTM4M2NmNjdlZTdkMWMwYTcxOGIyOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T12:30:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T12:46:57Z"}, "message": "libstdc++: Add ranges_size_t and rename all_view (LWG 3335)\n\n\t* include/bits/range_access.h (range_size_t): Define alias template.\n\t* include/std/ranges (all_view): Rename to views::all_t (LWG 3335).\n\t* testsuite/std/ranges/adaptors/filter.cc: Adjust to new name.", "tree": {"sha": "254483acec8eefd71358a35f7d5ed877b9a06b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/254483acec8eefd71358a35f7d5ed877b9a06b1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aca60ecff35837a1af9383cf67ee7d1c0a718b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca60ecff35837a1af9383cf67ee7d1c0a718b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca60ecff35837a1af9383cf67ee7d1c0a718b28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca60ecff35837a1af9383cf67ee7d1c0a718b28/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cc3b275d310dbf5982544cb88c11630349f414c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc3b275d310dbf5982544cb88c11630349f414c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cc3b275d310dbf5982544cb88c11630349f414c"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "f01b78da1180f4ec71815df41b32ca26dcbe6c81", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca60ecff35837a1af9383cf67ee7d1c0a718b28/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca60ecff35837a1af9383cf67ee7d1c0a718b28/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aca60ecff35837a1af9383cf67ee7d1c0a718b28", "patch": "@@ -1,5 +1,9 @@\n 2020-02-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/range_access.h (range_size_t): Define alias template.\n+\t* include/std/ranges (all_view): Rename to views::all_t (LWG 3335).\n+\t* testsuite/std/ranges/adaptors/filter.cc: Adjust to new name.\n+\n \t* include/std/ranges (filter_view, transform_view, take_view)\n \t(join_view, split_view, reverse_view): Remove commented-out converting\n \tconstructors (LWG 3280)."}, {"sha": "e7a19305d2359c35afeddaa577df67775f948229", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca60ecff35837a1af9383cf67ee7d1c0a718b28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca60ecff35837a1af9383cf67ee7d1c0a718b28/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=aca60ecff35837a1af9383cf67ee7d1c0a718b28", "patch": "@@ -905,6 +905,9 @@ namespace ranges\n     concept sized_range = range<_Tp>\n       && requires(_Tp& __t) { ranges::size(__t); };\n \n+  template<sized_range _Range>\n+    using range_size_t = decltype(ranges::size(std::declval<_Range&>()));\n+\n   // [range.refinements]\n \n   /// A range for which ranges::begin returns an output iterator."}, {"sha": "b0806750a082e4d1efee3f6832cce2d576b18d29", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca60ecff35837a1af9383cf67ee7d1c0a718b28/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca60ecff35837a1af9383cf67ee7d1c0a718b28/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=aca60ecff35837a1af9383cf67ee7d1c0a718b28", "patch": "@@ -1236,10 +1236,11 @@ namespace views\n \telse\n \t  return subrange{std::forward<_Range>(__r)};\n       };\n-  } // namespace views\n \n-  template<viewable_range _Range>\n-    using all_view = decltype(views::all(declval<_Range>()));\n+    template<viewable_range _Range>\n+      using all_t = decltype(all(std::declval<_Range>()));\n+\n+  } // namespace views\n \n   // XXX: the following algos are copied from ranges_algo.h to avoid a circular\n   // dependency with that header.\n@@ -1503,7 +1504,7 @@ namespace views\n     };\n \n   template<typename _Range, typename _Pred>\n-    filter_view(_Range&&, _Pred) -> filter_view<all_view<_Range>, _Pred>;\n+    filter_view(_Range&&, _Pred) -> filter_view<views::all_t<_Range>, _Pred>;\n \n   namespace views\n   {\n@@ -1836,7 +1837,7 @@ namespace views\n     };\n \n   template<typename _Range, typename _Fp>\n-    transform_view(_Range&&, _Fp) -> transform_view<all_view<_Range>, _Fp>;\n+    transform_view(_Range&&, _Fp) -> transform_view<views::all_t<_Range>, _Fp>;\n \n   namespace views\n   {\n@@ -1974,7 +1975,7 @@ namespace views\n \n   template<range _Range>\n     take_view(_Range&&, range_difference_t<_Range>)\n-      -> take_view<all_view<_Range>>;\n+      -> take_view<views::all_t<_Range>>;\n \n   namespace views\n   {\n@@ -2066,7 +2067,7 @@ namespace views\n \n   template<typename _Range, typename _Pred>\n     take_while_view(_Range&&, _Pred)\n-      -> take_while_view<all_view<_Range>, _Pred>;\n+      -> take_while_view<views::all_t<_Range>, _Pred>;\n \n   namespace views\n   {\n@@ -2143,7 +2144,7 @@ namespace views\n \n   template<typename _Range>\n     drop_view(_Range&&, range_difference_t<_Range>)\n-      -> drop_view<all_view<_Range>>;\n+      -> drop_view<views::all_t<_Range>>;\n \n   namespace views\n   {\n@@ -2199,7 +2200,7 @@ namespace views\n \n   template<typename _Range, typename _Pred>\n     drop_while_view(_Range&&, _Pred)\n-      -> drop_while_view<all_view<_Range>, _Pred>;\n+      -> drop_while_view<views::all_t<_Range>, _Pred>;\n \n   namespace views\n   {\n@@ -2450,7 +2451,7 @@ namespace views\n       // XXX: _M_inner is \"present only when !is_reference_v<_InnerRange>\"\n       [[no_unique_address]]\n \tconditional_t<!is_reference_v<_InnerRange>,\n-\t\t      all_view<_InnerRange>, __detail::_Empty> _M_inner;\n+\t\t      views::all_t<_InnerRange>, __detail::_Empty> _M_inner;\n \n     public:\n       join_view() = default;\n@@ -2514,7 +2515,7 @@ namespace views\n     };\n \n   template<typename _Range>\n-    explicit join_view(_Range&&) -> join_view<all_view<_Range>>;\n+    explicit join_view(_Range&&) -> join_view<views::all_t<_Range>>;\n \n   namespace views\n   {\n@@ -2838,7 +2839,7 @@ namespace views\n       { }\n \n       template<input_range _Range>\n-\trequires constructible_from<_Vp, all_view<_Range>>\n+\trequires constructible_from<_Vp, views::all_t<_Range>>\n \t  && constructible_from<_Pattern, single_view<range_value_t<_Range>>>\n \tconstexpr\n \tsplit_view(_Range&& __r, range_value_t<_Range> __e)\n@@ -2893,11 +2894,11 @@ namespace views\n \n   template<typename _Range, typename _Pred>\n     split_view(_Range&&, _Pred&&)\n-      -> split_view<all_view<_Range>, all_view<_Pred>>;\n+      -> split_view<views::all_t<_Range>, views::all_t<_Pred>>;\n \n   template<input_range _Range>\n     split_view(_Range&&, range_value_t<_Range>)\n-      -> split_view<all_view<_Range>, single_view<range_value_t<_Range>>>;\n+      -> split_view<views::all_t<_Range>, single_view<range_value_t<_Range>>>;\n \n   namespace views\n   {\n@@ -2945,7 +2946,7 @@ namespace views\n       /* XXX: LWG 3280 didn't remove this constructor, but I think it should?\n       template<viewable_range _Range>\n \trequires (!common_range<_Range>)\n-\t  && constructible_from<_Vp, all_view<_Range>>\n+\t  && constructible_from<_Vp, views::all_t<_Range>>\n \tconstexpr explicit\n \tcommon_view(_Range&& __r)\n \t  : _M_base(views::all(std::forward<_Range>(__r)))\n@@ -3010,7 +3011,7 @@ namespace views\n     };\n \n   template<typename _Range>\n-    common_view(_Range&&) -> common_view<all_view<_Range>>;\n+    common_view(_Range&&) -> common_view<views::all_t<_Range>>;\n \n   namespace views\n   {\n@@ -3083,7 +3084,7 @@ namespace views\n     };\n \n   template<typename _Range>\n-    reverse_view(_Range&&) -> reverse_view<all_view<_Range>>;\n+    reverse_view(_Range&&) -> reverse_view<views::all_t<_Range>>;\n \n   namespace views\n   {\n@@ -3356,18 +3357,19 @@ namespace views\n     };\n \n   template<typename _Range>\n-    using keys_view = elements_view<all_view<_Range>, 0>;\n+    using keys_view = elements_view<views::all_t<_Range>, 0>;\n \n   template<typename _Range>\n-    using values_view = elements_view<all_view<_Range>, 1>;\n+    using values_view = elements_view<views::all_t<_Range>, 1>;\n \n   namespace views\n   {\n     template<size_t _Nm>\n     inline constexpr __adaptor::_RangeAdaptorClosure elements\n       = [] <viewable_range _Range> (_Range&& __r)\n       {\n-\treturn elements_view<all_view<_Range>, _Nm>{std::forward<_Range>(__r)};\n+\tusing _El = elements_view<views::all_t<_Range>, _Nm>;\n+\treturn _El{std::forward<_Range>(__r)};\n       };\n \n     inline constexpr __adaptor::_RangeAdaptorClosure keys = elements<0>;"}, {"sha": "4e41232cd5ce599dc2c852805c2a15d43176847d", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/filter.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aca60ecff35837a1af9383cf67ee7d1c0a718b28/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ffilter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aca60ecff35837a1af9383cf67ee7d1c0a718b28/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ffilter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ffilter.cc?ref=aca60ecff35837a1af9383cf67ee7d1c0a718b28", "patch": "@@ -43,7 +43,7 @@ test01()\n   static_assert(!ranges::sized_range<R>);\n   static_assert(ranges::bidirectional_range<R>);\n   static_assert(!ranges::random_access_range<R>);\n-  static_assert(ranges::range<ranges::all_view<R>>);\n+  static_assert(ranges::range<views::all_t<R>>);\n   VERIFY( ranges::equal(v, (int[]){1,3,5}) );\n   VERIFY( ranges::equal(v | views::reverse, (int[]){5,3,1}) );\n   VERIFY( v.pred()(3) == true );"}]}