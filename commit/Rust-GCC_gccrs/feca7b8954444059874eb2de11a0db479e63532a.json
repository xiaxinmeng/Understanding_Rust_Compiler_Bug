{"sha": "feca7b8954444059874eb2de11a0db479e63532a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVjYTdiODk1NDQ0NDA1OTg3NGViMmRlMTFhMGRiNDc5ZTYzNTMyYQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2017-03-06T20:23:00Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2017-03-06T20:23:00Z"}, "message": "re PR rtl-optimization/79571 (ICE in Max. number of generated reload insns per insn is achieved (90))\n\n2017-03-06  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/79571\n\t* lra-constraints.c (process_alt_operands): Claculate static\n\treject and subtract it from overal when there will be only address\n\treloads.\n\n2017-03-06  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/79571\n\t* gcc.target/i386/pr79571.c: New.\n\nFrom-SVN: r245928", "tree": {"sha": "8b43ce72fa0d662b665bf884acec21d48d76282a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b43ce72fa0d662b665bf884acec21d48d76282a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/feca7b8954444059874eb2de11a0db479e63532a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feca7b8954444059874eb2de11a0db479e63532a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feca7b8954444059874eb2de11a0db479e63532a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feca7b8954444059874eb2de11a0db479e63532a/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bdbbf28d15945150b16406d1bce91db58a65ac08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbbf28d15945150b16406d1bce91db58a65ac08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdbbf28d15945150b16406d1bce91db58a65ac08"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "2ddff45eabd7f0d8f7965bfbeb356dc2be128e5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feca7b8954444059874eb2de11a0db479e63532a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feca7b8954444059874eb2de11a0db479e63532a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=feca7b8954444059874eb2de11a0db479e63532a", "patch": "@@ -1,3 +1,10 @@\n+2017-03-06  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/79571\n+\t* lra-constraints.c (process_alt_operands): Claculate static\n+\treject and subtract it from overal when there will be only address\n+\treloads.\n+\n 2017-03-06  Julia Koval  <julia.koval@intel.com>\n \n \tPR target/79793"}, {"sha": "630261a6dfab5659da7366e519b069690cc6a3f2", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feca7b8954444059874eb2de11a0db479e63532a/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feca7b8954444059874eb2de11a0db479e63532a/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=feca7b8954444059874eb2de11a0db479e63532a", "patch": "@@ -1867,11 +1867,15 @@ process_alt_operands (int only_alternative)\n   /* LOSERS counts the operands that don't fit this alternative and\n      would require loading.  */\n   int losers;\n+  int addr_losers;\n   /* REJECT is a count of how undesirable this alternative says it is\n      if any reloading is required.  If the alternative matches exactly\n      then REJECT is ignored, but otherwise it gets this much counted\n      against it in addition to the reloading needed.  */\n   int reject;\n+  /* This is defined by '!' or '?' alternative constraint and added to\n+     reject.  But in some cases it can be ignored.  */\n+  int static_reject;\n   int op_reject;\n   /* The number of elements in the following array.  */\n   int early_clobbered_regs_num;\n@@ -1948,16 +1952,18 @@ process_alt_operands (int only_alternative)\n       if (!TEST_BIT (preferred, nalt))\n \tcontinue;\n \n-      overall = losers = reject = reload_nregs = reload_sum = 0;\n+      overall = losers = addr_losers = 0;\n+      static_reject = reject = reload_nregs = reload_sum = 0;\n       for (nop = 0; nop < n_operands; nop++)\n \t{\n \t  int inc = (curr_static_id\n \t\t     ->operand_alternative[nalt * n_operands + nop].reject);\n \t  if (lra_dump_file != NULL && inc != 0)\n \t    fprintf (lra_dump_file,\n \t\t     \"            Staticly defined alt reject+=%d\\n\", inc);\n-\t  reject += inc;\n+\t  static_reject += inc;\n \t}\n+      reject += static_reject;\n       early_clobbered_regs_num = 0;\n \n       for (nop = 0; nop < n_operands; nop++)\n@@ -2704,6 +2710,9 @@ process_alt_operands (int only_alternative)\n \t\t       nop);\n \t\t  reject++;\n \t\t}\n+\n+\t      if (MEM_P (op) && offmemok)\n+\t\taddr_losers++;\n \t    }\n \n \t  if (early_clobber_p && ! scratch_p)\n@@ -2718,7 +2727,8 @@ process_alt_operands (int only_alternative)\n \t     Should we update the cost (may be approximately) here\n \t     because of early clobber register reloads or it is a rare\n \t     or non-important thing to be worth to do it.  */\n-\t  overall = losers * LRA_LOSER_COST_FACTOR + reject;\n+\t  overall = (losers * LRA_LOSER_COST_FACTOR + reject\n+\t\t     - (addr_losers == losers ? static_reject : 0));\n \t  if ((best_losers == 0 || losers != 0) && best_overall < overall)\n             {\n               if (lra_dump_file != NULL)\n@@ -2742,6 +2752,7 @@ process_alt_operands (int only_alternative)\n \t  if (early_clobber_p && operand_reg[nop] != NULL_RTX)\n \t    early_clobbered_nops[early_clobbered_regs_num++] = nop;\n \t}\n+\n       if (curr_insn_set != NULL_RTX && n_operands == 2\n \t  /* Prevent processing non-move insns.  */\n \t  && (GET_CODE (SET_SRC (curr_insn_set)) == SUBREG\n@@ -2753,9 +2764,15 @@ process_alt_operands (int only_alternative)\n \t\t   || reg_in_class_p (no_subreg_reg_operand[1], curr_alt[0])))\n \t      || (! curr_alt_win[0] && curr_alt_win[1]\n \t\t  && REG_P (no_subreg_reg_operand[1])\n+\t\t  /* Check that we reload memory not the memory\n+\t\t     address.  */\n+\t\t  && !curr_alt_offmemok[0]\n \t\t  && reg_in_class_p (no_subreg_reg_operand[1], curr_alt[0]))\n \t      || (curr_alt_win[0] && ! curr_alt_win[1]\n \t\t  && REG_P (no_subreg_reg_operand[0])\n+\t\t  /* Check that we reload memory not the memory\n+\t\t     address.  */\n+\t\t  && !curr_alt_offmemok[1]\n \t\t  && reg_in_class_p (no_subreg_reg_operand[0], curr_alt[1])\n \t\t  && (! CONST_POOL_OK_P (curr_operand_mode[1],\n \t\t\t\t\t no_subreg_reg_operand[1])"}, {"sha": "2f27e4b535c519ceabeabbad9624f7a4df78cb87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feca7b8954444059874eb2de11a0db479e63532a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feca7b8954444059874eb2de11a0db479e63532a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=feca7b8954444059874eb2de11a0db479e63532a", "patch": "@@ -1,3 +1,8 @@\n+2017-03-06  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/79571\n+\t* gcc.target/i386/pr79571.c: New.\n+\n 2017-03-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/79796 - ICE with NSDMI and this pointer"}, {"sha": "4595a1a0d8221468650ede3aeb38ab6007995e6d", "filename": "gcc/testsuite/gcc.target/i386/pr79571.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/feca7b8954444059874eb2de11a0db479e63532a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79571.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/feca7b8954444059874eb2de11a0db479e63532a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79571.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79571.c?ref=feca7b8954444059874eb2de11a0db479e63532a", "patch": "@@ -0,0 +1,25 @@\n+/* PR rtl-optimization/79571 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mno-sse -w\" } */\n+\n+struct a\n+{\n+  int b;\n+  int *c\n+} h;\n+struct d\n+{\n+  struct a e\n+};\n+struct fd\n+{\n+  struct d *d\n+} i;\n+g;\n+j ()\n+{\n+  unsigned a = g;\n+  i = (struct fd){a & 3};\n+  struct fd f = i;\n+  h = f.d->e;\n+}"}]}