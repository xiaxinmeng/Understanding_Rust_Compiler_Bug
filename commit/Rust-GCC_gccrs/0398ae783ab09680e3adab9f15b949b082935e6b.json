{"sha": "0398ae783ab09680e3adab9f15b949b082935e6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM5OGFlNzgzYWIwOTY4MGUzYWRhYjlmMTViOTQ5YjA4MjkzNWU2Yg==", "commit": {"author": {"name": "Monk Chiang", "email": "sh.chiang04@gmail.com", "date": "2019-04-15T07:59:01Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2019-04-15T07:59:01Z"}, "message": "[NDS32] Rewrite PIC/TLS patterns.\n\ngcc/\n\t* config/nds32/nds32-md-auxiliary.c\n\t(nds32_legitimize_pic_address): Use new PIC pattern.\n\t(nds32_legitimize_tls_address): Use new TLS pattern.\n\t(nds32_output_symrel): New.\n\t* config/nds32/nds32-protos.h (nds32_output_symrel): Declare.\n\t(nds32_alloc_relax_group_id): Ditto.\n\t* config/nds32/nds32-relax-opt.c (nds32_alloc_relax_group_id): New.\n\t(nds32_group_insns): Use nds32_alloc_relax_group_id instead of use\n\trelax_group_id.\n\t(nds32_group_tls_insn): Ditto.\n\t(nds32_group_float_insns): Ditto.\n\t* config/nds32/nds32.md (tls_le): New.\n\t(sym_got): Ditto.\n\nCo-Authored-By: Kito Cheng <kito.cheng@gmail.com>\nCo-Authored-By: Shiva Chen <shiva0217@gmail.com>\n\nFrom-SVN: r270361", "tree": {"sha": "198302a48c5d861a792dd554e8b775fa4802cace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/198302a48c5d861a792dd554e8b775fa4802cace"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0398ae783ab09680e3adab9f15b949b082935e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0398ae783ab09680e3adab9f15b949b082935e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0398ae783ab09680e3adab9f15b949b082935e6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0398ae783ab09680e3adab9f15b949b082935e6b/comments", "author": {"login": "monkchiang", "id": 62004175, "node_id": "MDQ6VXNlcjYyMDA0MTc1", "avatar_url": "https://avatars.githubusercontent.com/u/62004175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/monkchiang", "html_url": "https://github.com/monkchiang", "followers_url": "https://api.github.com/users/monkchiang/followers", "following_url": "https://api.github.com/users/monkchiang/following{/other_user}", "gists_url": "https://api.github.com/users/monkchiang/gists{/gist_id}", "starred_url": "https://api.github.com/users/monkchiang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/monkchiang/subscriptions", "organizations_url": "https://api.github.com/users/monkchiang/orgs", "repos_url": "https://api.github.com/users/monkchiang/repos", "events_url": "https://api.github.com/users/monkchiang/events{/privacy}", "received_events_url": "https://api.github.com/users/monkchiang/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a9825f7d489cab7256bc3ff6dd67cdcf1e28922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9825f7d489cab7256bc3ff6dd67cdcf1e28922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9825f7d489cab7256bc3ff6dd67cdcf1e28922"}], "stats": {"total": 110, "additions": 87, "deletions": 23}, "files": [{"sha": "a6eadedb57fe331a756c3a0cc71c835377e5d431", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0398ae783ab09680e3adab9f15b949b082935e6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0398ae783ab09680e3adab9f15b949b082935e6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0398ae783ab09680e3adab9f15b949b082935e6b", "patch": "@@ -1,3 +1,21 @@\n+2019-04-15  Monk Chiang  <sh.chiang04@gmail.com>\n+\t    Kito Cheng  <kito.cheng@gmail.com>\n+\t    Shiva Chen  <shiva0217@gmail.com>\n+\n+\t* config/nds32/nds32-md-auxiliary.c\n+\t(nds32_legitimize_pic_address): Use new PIC pattern.\n+\t(nds32_legitimize_tls_address): Use new TLS pattern.\n+\t(nds32_output_symrel): New.\n+\t* config/nds32/nds32-protos.h (nds32_output_symrel): Declare.\n+\t(nds32_alloc_relax_group_id): Ditto.\n+\t* config/nds32/nds32-relax-opt.c (nds32_alloc_relax_group_id): New.\n+\t(nds32_group_insns): Use nds32_alloc_relax_group_id instead of use\n+\trelax_group_id.\n+\t(nds32_group_tls_insn): Ditto.\n+\t(nds32_group_float_insns): Ditto.\n+\t* config/nds32/nds32.md (tls_le): New.\n+\t(sym_got): Ditto.\n+\n 2019-04-15  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* configure: Add nds32 target for dwarf2 debug_line checking."}, {"sha": "35fcc64511f52d394fda5cabbd6e97153ffa4d14", "filename": "gcc/config/nds32/nds32-md-auxiliary.c", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0398ae783ab09680e3adab9f15b949b082935e6b/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0398ae783ab09680e3adab9f15b949b082935e6b/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-md-auxiliary.c?ref=0398ae783ab09680e3adab9f15b949b082935e6b", "patch": "@@ -3493,6 +3493,7 @@ nds32_legitimize_pic_address (rtx x)\n   rtx addr = x;\n   rtx reg = gen_reg_rtx (Pmode);\n   rtx pat;\n+  int relax_group_id = nds32_alloc_relax_group_id ();\n \n   if (GET_CODE (x) == LABEL_REF\n       || (GET_CODE (x) == SYMBOL_REF\n@@ -3501,16 +3502,14 @@ nds32_legitimize_pic_address (rtx x)\n     {\n       addr = gen_rtx_UNSPEC (SImode, gen_rtvec (1, x), UNSPEC_GOTOFF);\n       addr = gen_rtx_CONST (SImode, addr);\n-      emit_insn (gen_sethi (reg, addr));\n-      emit_insn (gen_lo_sum (reg, reg, addr));\n+      emit_insn (gen_sym_got (reg, addr, GEN_INT (relax_group_id)));\n       x = gen_rtx_PLUS (Pmode, reg, pic_offset_table_rtx);\n     }\n   else if (GET_CODE (x) == SYMBOL_REF)\n     {\n       addr = gen_rtx_UNSPEC (SImode, gen_rtvec (1, x), UNSPEC_GOT);\n       addr = gen_rtx_CONST (SImode, addr);\n-      emit_insn (gen_sethi (reg, addr));\n-      emit_insn (gen_lo_sum (reg, reg, addr));\n+      emit_insn (gen_sym_got (reg, addr, GEN_INT (relax_group_id)));\n \n       x = gen_const_mem (SImode, gen_rtx_PLUS (Pmode, pic_offset_table_rtx,\n \t\t\t\t\t       reg));\n@@ -3534,8 +3533,7 @@ nds32_legitimize_pic_address (rtx x)\n \t  pat = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op0), UNSPEC_GOTOFF);\n \t  pat = gen_rtx_PLUS (Pmode, pat, op1);\n \t  pat = gen_rtx_CONST (Pmode, pat);\n-\t  emit_insn (gen_sethi (reg, pat));\n-\t  emit_insn (gen_lo_sum (reg, reg, pat));\n+\t  emit_insn (gen_sym_got (reg, pat, GEN_INT (relax_group_id)));\n \t  x = gen_rtx_PLUS (Pmode, reg, pic_offset_table_rtx);\n \t}\n       else if (GET_CODE (op0) == SYMBOL_REF\n@@ -3544,8 +3542,8 @@ nds32_legitimize_pic_address (rtx x)\n \t  /* This is a constant offset from a @GOT symbol reference.  */\n \t  addr = gen_rtx_UNSPEC (SImode, gen_rtvec (1, op0), UNSPEC_GOT);\n \t  addr = gen_rtx_CONST (SImode, addr);\n-\t  emit_insn (gen_sethi (reg, addr));\n-\t  emit_insn (gen_lo_sum (reg, reg, addr));\n+\t  emit_insn (gen_sym_got (reg, addr, GEN_INT (relax_group_id)));\n+\n \t  addr = gen_const_mem (SImode, gen_rtx_PLUS (Pmode,\n \t\t\t\t\t\t      pic_offset_table_rtx,\n \t\t\t\t\t\t      reg));\n@@ -3668,6 +3666,7 @@ nds32_legitimize_tls_address (rtx x)\n   rtx tmp_reg;\n   rtx tp_reg = gen_rtx_REG (Pmode, TP_REGNUM);\n   rtx pat, insns, reg0;\n+  int relax_group_id = nds32_alloc_relax_group_id ();\n \n   if (GET_CODE (x) == SYMBOL_REF)\n     switch (SYMBOL_REF_TLS_MODEL (x))\n@@ -3685,7 +3684,7 @@ nds32_legitimize_tls_address (rtx x)\n \treg0 = gen_rtx_REG (Pmode, 0);\n \t/* If we can confirm all clobber reigsters, it doesn't have to use call\n \t   instruction.  */\n-\tinsns = emit_call_insn (gen_tls_desc (pat, GEN_INT (0)));\n+\tinsns = emit_call_insn (gen_tls_desc (pat, GEN_INT (relax_group_id)));\n \tuse_reg (&CALL_INSN_FUNCTION_USAGE (insns), pic_offset_table_rtx);\n \tRTL_CONST_CALL_P (insns) = 1;\n \ttmp_reg = gen_reg_rtx (SImode);\n@@ -3697,7 +3696,7 @@ nds32_legitimize_tls_address (rtx x)\n \tpat = gen_rtx_UNSPEC (SImode, gen_rtvec (1, x), UNSPEC_TLSIE);\n \ttmp_reg  = gen_reg_rtx (SImode);\n \tpat = gen_rtx_CONST (SImode, pat);\n-\temit_insn (gen_tls_ie (tmp_reg, pat, GEN_INT (0)));\n+\temit_insn (gen_tls_ie (tmp_reg, pat, GEN_INT (relax_group_id)));\n \tif (flag_pic)\n \t  emit_use (pic_offset_table_rtx);\n \tx = gen_rtx_PLUS (Pmode, tmp_reg, tp_reg);\n@@ -3711,8 +3710,7 @@ nds32_legitimize_tls_address (rtx x)\n \ttmp_reg  = gen_reg_rtx (SImode);\n \tpat = gen_rtx_UNSPEC (SImode, gen_rtvec (1, x), UNSPEC_TLSLE);\n \tpat = gen_rtx_CONST (SImode, pat);\n-\temit_insn (gen_sethi (tmp_reg, pat));\n-\temit_insn (gen_lo_sum (tmp_reg, tmp_reg, pat));\n+\temit_insn (gen_tls_le (tmp_reg, pat, GEN_INT (relax_group_id)));\n \tx = gen_rtx_PLUS (Pmode, tmp_reg, tp_reg);\n \tbreak;\n \n@@ -3734,8 +3732,7 @@ nds32_legitimize_tls_address (rtx x)\n \t  pat = gen_rtx_UNSPEC (SImode, gen_rtvec (1, base), UNSPEC_TLSLE);\n \t  pat = gen_rtx_PLUS (SImode, pat, addend);\n \t  pat = gen_rtx_CONST (SImode, pat);\n-\t  emit_insn (gen_sethi (tmp_reg, pat));\n-\t  emit_insn (gen_lo_sum (tmp_reg, tmp_reg, pat));\n+\t  emit_insn (gen_tls_le (tmp_reg, pat, GEN_INT (relax_group_id)));\n \t  x = gen_rtx_PLUS (Pmode, tmp_reg, tp_reg);\n \t}\n     }\n@@ -3914,3 +3911,21 @@ nds32_output_tls_ie (rtx *operands)\n   output_asm_insn (pattern, operands);\n   return \"\";\n }\n+\n+const char *\n+nds32_output_symrel (rtx *operands)\n+{\n+  char pattern[1000];\n+\n+  if (TARGET_RELAX_HINT)\n+    snprintf (pattern, sizeof (pattern),\n+\t      \".relax_hint %%2\\n\\tsethi %%0, hi20(%%1)\\n\\t\"\n+\t      \".relax_hint %%2\\n\\tori %%0, %%0, lo12(%%1)\");\n+  else\n+    snprintf (pattern, sizeof (pattern),\n+\t      \"sethi %%0, hi20(%%1)\\n\\t\"\n+\t      \"ori %%0, %%0, lo12(%%1)\");\n+\n+  output_asm_insn (pattern, operands);\n+  return \"\";\n+}"}, {"sha": "aaa65d6f038f7384c159483599bbadea7e72e81c", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0398ae783ab09680e3adab9f15b949b082935e6b/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0398ae783ab09680e3adab9f15b949b082935e6b/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=0398ae783ab09680e3adab9f15b949b082935e6b", "patch": "@@ -256,6 +256,7 @@ extern const char *nds32_output_call (rtx, rtx *, rtx,\n \t\t\t\t      const char *, const char *, bool);\n extern const char *nds32_output_tls_desc (rtx *);\n extern const char *nds32_output_tls_ie (rtx *);\n+extern const char *nds32_output_symrel (rtx *);\n \n /* Auxiliary functions to output stack push/pop instruction.  */\n \n@@ -369,4 +370,6 @@ extern bool nds32_use_load_post_increment(machine_mode);\n extern rtl_opt_pass *make_pass_nds32_relax_opt (gcc::context *);\n extern rtl_opt_pass *make_pass_nds32_fp_as_gp (gcc::context *);\n \n+extern int nds32_alloc_relax_group_id ();\n+\n /* ------------------------------------------------------------------------ */"}, {"sha": "5da27530cd61c5c262771d090df54482dad4f540", "filename": "gcc/config/nds32/nds32-relax-opt.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0398ae783ab09680e3adab9f15b949b082935e6b/gcc%2Fconfig%2Fnds32%2Fnds32-relax-opt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0398ae783ab09680e3adab9f15b949b082935e6b/gcc%2Fconfig%2Fnds32%2Fnds32-relax-opt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-relax-opt.c?ref=0398ae783ab09680e3adab9f15b949b082935e6b", "patch": "@@ -78,6 +78,12 @@ static int relax_group_id = 0;\n       lwi37\t$rb, [(sym)]\n       swi37\t$rc, [(sym)] */\n \n+int\n+nds32_alloc_relax_group_id ()\n+{\n+  return relax_group_id++;\n+}\n+\n /* Return true if is load/store with REG addressing mode\n    and memory mode is SImode.  */\n static bool\n@@ -345,7 +351,7 @@ nds32_group_insns (rtx_insn *sethi)\n \treturn;\n     }\n \n-  group_id = GEN_INT (relax_group_id);\n+  group_id = GEN_INT (nds32_alloc_relax_group_id ());\n   /* Insert .relax_* directive for sethi.  */\n   emit_insn_before (gen_relax_group (group_id), sethi);\n \n@@ -378,8 +384,6 @@ nds32_group_insns (rtx_insn *sethi)\n \t    }\n \t}\n     }\n-\n-  relax_group_id++;\n }\n \n /* Convert relax group id in rtl.  */\n@@ -389,6 +393,7 @@ nds32_group_tls_insn (rtx insn)\n {\n   rtx pat = PATTERN (insn);\n   rtx unspec_relax_group = XEXP (XVECEXP (pat, 0, 1), 0);\n+  int group_id = nds32_alloc_relax_group_id ();\n \n   while (GET_CODE (pat) != SET && GET_CODE (pat) == PARALLEL)\n     {\n@@ -398,10 +403,8 @@ nds32_group_tls_insn (rtx insn)\n   if (GET_CODE (unspec_relax_group) == UNSPEC\n       && XINT (unspec_relax_group, 1) == UNSPEC_VOLATILE_RELAX_GROUP)\n     {\n-      XVECEXP (unspec_relax_group, 0, 0) = GEN_INT (relax_group_id);\n+      XVECEXP (unspec_relax_group, 0, 0) = GEN_INT (group_id);\n     }\n-\n-  relax_group_id++;\n }\n \n static bool\n@@ -472,7 +475,7 @@ nds32_group_float_insns (rtx_insn *insn)\n \treturn;\n     }\n \n-  group_id = GEN_INT (relax_group_id);\n+  group_id = GEN_INT (nds32_alloc_relax_group_id ());\n   /* Insert .relax_* directive for insn.  */\n   emit_insn_before (gen_relax_group (group_id), insn);\n \n@@ -487,8 +490,6 @@ nds32_group_float_insns (rtx_insn *insn)\n       /* Insert .relax_* directive.  */\n \temit_insn_before (gen_relax_group (group_id), use_insn);\n     }\n-\n-  relax_group_id++;\n }\n \n /* Group the relax candidate instructions for linker.  */"}, {"sha": "1e5f8decadaf73585bd7677ac33ea84a7d897811", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0398ae783ab09680e3adab9f15b949b082935e6b/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0398ae783ab09680e3adab9f15b949b082935e6b/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=0398ae783ab09680e3adab9f15b949b082935e6b", "patch": "@@ -2365,6 +2365,20 @@\n    (set_attr \"type\" \"misc\")]\n )\n \n+;; There is a unspec operand to record RELAX_GROUP number because each\n+;; emitted instruction need a relax_hint above it.\n+(define_insn \"tls_le\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"nds32_symbolic_operand\" \"i\")] UNSPEC_TLS_IE))\n+   (use (unspec [(match_operand:SI 2 \"immediate_operand\" \"i\")] UNSPEC_VOLATILE_RELAX_GROUP))]\n+  \"\"\n+  {\n+    return nds32_output_symrel (operands);\n+  }\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\"   \"misc\")]\n+)\n+\n ;; The pattern is for some relaxation groups that have to keep addsi3 in 32-bit mode.\n (define_insn \"addsi3_32bit\"\n   [(set (match_operand:SI 0 \"register_operand\"             \"=r\")\n@@ -2376,4 +2390,17 @@\n    (set_attr \"length\"  \"4\")\n    (set_attr \"feature\" \"v1\")])\n \n+;; Patterns for PIC.\n+(define_insn \"sym_got\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:SI 1 \"nds32_symbolic_operand\" \"i\")] UNSPEC_GOT))\n+   (use (unspec [(match_operand:SI 2 \"immediate_operand\" \"i\")] UNSPEC_VOLATILE_RELAX_GROUP))]\n+  \"\"\n+  {\n+    return nds32_output_symrel (operands);\n+  }\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\"   \"misc\")]\n+)\n+\n ;; ----------------------------------------------------------------------------"}]}