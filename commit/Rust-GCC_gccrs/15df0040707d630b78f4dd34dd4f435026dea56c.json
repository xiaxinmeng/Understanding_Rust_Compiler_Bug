{"sha": "15df0040707d630b78f4dd34dd4f435026dea56c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVkZjAwNDA3MDdkNjMwYjc4ZjRkZDM0ZGQ0ZjQzNTAyNmRlYTU2Yw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2020-01-09T13:43:59Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2020-01-09T13:43:59Z"}, "message": "Fortran] PR84135 fix merging dimension into codimension array spec\n\n        PR fortran/84135\n        * array.c (gfc_set_array_spec): Fix shifting of codimensions\n        when adding a dimension.\n        * decl.c (merge_array_spec): Ditto. Fix using correct codimensions.\n\n        PR fortran/84135\n        * gfortran.dg/coarray/codimension_3.f90: New.\n\nFrom-SVN: r280046", "tree": {"sha": "ac84f2732ffbf2a774089e9d524a2d23a6f8ca4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac84f2732ffbf2a774089e9d524a2d23a6f8ca4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15df0040707d630b78f4dd34dd4f435026dea56c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15df0040707d630b78f4dd34dd4f435026dea56c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15df0040707d630b78f4dd34dd4f435026dea56c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15df0040707d630b78f4dd34dd4f435026dea56c/comments", "author": null, "committer": null, "parents": [{"sha": "d574c8aafea40bd8759cb09031ff0dc6c250d8cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d574c8aafea40bd8759cb09031ff0dc6c250d8cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d574c8aafea40bd8759cb09031ff0dc6c250d8cf"}], "stats": {"total": 115, "additions": 101, "deletions": 14}, "files": [{"sha": "80d37a362cff3fbfcf4598d7ced802b649ecfd01", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15df0040707d630b78f4dd34dd4f435026dea56c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15df0040707d630b78f4dd34dd4f435026dea56c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=15df0040707d630b78f4dd34dd4f435026dea56c", "patch": "@@ -1,3 +1,10 @@\n+2020-01-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/84135\n+\t* array.c (gfc_set_array_spec): Fix shifting of codimensions\n+\twhen adding a dimension.\n+\t* decl.c (merge_array_spec): Ditto. Fix using correct codimensions.\n+\n 2020-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/93162"}, {"sha": "157acb8cd9031bbb0fd9da486ecf702d207f32e2", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15df0040707d630b78f4dd34dd4f435026dea56c/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15df0040707d630b78f4dd34dd4f435026dea56c/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=15df0040707d630b78f4dd34dd4f435026dea56c", "patch": "@@ -887,7 +887,7 @@ gfc_set_array_spec (gfc_symbol *sym, gfc_array_spec *as, locus *error_loc)\n       if (sym->as->rank + sym->as->corank > GFC_MAX_DIMENSIONS)\n \tgoto too_many;\n \n-      for (i = 0; i < sym->as->corank; i++)\n+      for (i = sym->as->corank - 1; i >= 0; i--)\n \t{\n \t  sym->as->lower[as->rank + i] = sym->as->lower[i];\n \t  sym->as->upper[as->rank + i] = sym->as->upper[i];"}, {"sha": "499d2429aba652fc8dbf5a5745ec8f030aaafa43", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15df0040707d630b78f4dd34dd4f435026dea56c/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15df0040707d630b78f4dd34dd4f435026dea56c/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=15df0040707d630b78f4dd34dd4f435026dea56c", "patch": "@@ -928,8 +928,6 @@ match_clist_expr (gfc_expr **result, gfc_typespec *ts, gfc_array_spec *as)\n static bool\n merge_array_spec (gfc_array_spec *from, gfc_array_spec *to, bool copy)\n {\n-  int i, j;\n-\n   if ((from->type == AS_ASSUMED_RANK && to->corank)\n       || (to->type == AS_ASSUMED_RANK && from->corank))\n     {\n@@ -944,18 +942,18 @@ merge_array_spec (gfc_array_spec *from, gfc_array_spec *to, bool copy)\n       to->cray_pointee = from->cray_pointee;\n       to->cp_was_assumed = from->cp_was_assumed;\n \n-      for (i = 0; i < to->corank; i++)\n+      for (int i = to->corank - 1; i >= 0; i--)\n \t{\n \t  /* Do not exceed the limits on lower[] and upper[].  gfortran\n \t     cleans up elsewhere.  */\n-\t  j = from->rank + i;\n+\t  int j = from->rank + i;\n \t  if (j >= GFC_MAX_DIMENSIONS)\n \t    break;\n \n \t  to->lower[j] = to->lower[i];\n \t  to->upper[j] = to->upper[i];\n \t}\n-      for (i = 0; i < from->rank; i++)\n+      for (int i = 0; i < from->rank; i++)\n \t{\n \t  if (copy)\n \t    {\n@@ -974,23 +972,24 @@ merge_array_spec (gfc_array_spec *from, gfc_array_spec *to, bool copy)\n       to->corank = from->corank;\n       to->cotype = from->cotype;\n \n-      for (i = 0; i < from->corank; i++)\n+      for (int i = 0; i < from->corank; i++)\n \t{\n \t  /* Do not exceed the limits on lower[] and upper[].  gfortran\n \t     cleans up elsewhere.  */\n-\t  j = to->rank + i;\n+\t  int k = from->rank + i;\n+\t  int j = to->rank + i;\n \t  if (j >= GFC_MAX_DIMENSIONS)\n \t    break;\n \n \t  if (copy)\n \t    {\n-\t      to->lower[j] = gfc_copy_expr (from->lower[i]);\n-\t      to->upper[j] = gfc_copy_expr (from->upper[i]);\n+\t      to->lower[j] = gfc_copy_expr (from->lower[k]);\n+\t      to->upper[j] = gfc_copy_expr (from->upper[k]);\n \t    }\n \t  else\n \t    {\n-\t      to->lower[j] = from->lower[i];\n-\t      to->upper[j] = from->upper[i];\n+\t      to->lower[j] = from->lower[k];\n+\t      to->upper[j] = from->upper[k];\n \t    }\n \t}\n     }"}, {"sha": "d4ddf8960f6a17dbea4decba27352ea9be6e08f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15df0040707d630b78f4dd34dd4f435026dea56c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15df0040707d630b78f4dd34dd4f435026dea56c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15df0040707d630b78f4dd34dd4f435026dea56c", "patch": "@@ -1,3 +1,8 @@\n+2020-01-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/84135\n+\t* gfortran.dg/coarray/codimension_3.f90: New.\n+\n 2020-01-09  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/93200\n@@ -29,7 +34,7 @@\n \t* gcc.dg/Wstringop-overflow-27.c: Make testnames unique.\n \n 2020-01-08  Joel Brobecker  <brobecker@adacore.com>\n-            Olivier Hainque  <hainque@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n \n \t* g++.target/aarch64/sve/tls_2.C: Add missing\n \t{ dg-require-effective-target fpic } directive.\n@@ -61,7 +66,7 @@\n \t* gcc.c-torture/compile/pr93174.c: New test.\n \n 2020-01-08  Olivier Hainque  <hainque@adacore.com>\n-            Alexandre Oliva  <oliva@adacore.com>\n+\t    Alexandre Oliva  <oliva@adacore.com>\n \n \t* gcc.target/aarch64/stack-check-alloca.h: Remove\n \t#include alloca.h. #define alloca __builtin_alloca"}, {"sha": "466ed883d52b9461972357bcd47027bd1f55a7de", "filename": "gcc/testsuite/gfortran.dg/coarray/codimension_3.f90", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15df0040707d630b78f4dd34dd4f435026dea56c/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcodimension_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15df0040707d630b78f4dd34dd4f435026dea56c/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcodimension_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcodimension_3.f90?ref=15df0040707d630b78f4dd34dd4f435026dea56c", "patch": "@@ -0,0 +1,76 @@\n+! { dg-do run }\n+!\n+! PR fortran/84135\n+!\n+! Co-contributed by G. Steinmetz\n+!\n+! Ensure that coarray shape remains correct\n+! after merging the shape from 'dimension'\n+!\n+program p\n+   integer :: i\n+   integer, dimension(3) :: x[2,*]\n+   data (x(i:i+2:i+1), i=1,2) /1,2,3/\n+   integer, dimension(3) :: y[2,3,-3:4,5,7:*] = [1,2,3]\n+   integer :: z, z2[2:4,7:9,-2:2,-7:8,-4:*]\n+   codimension :: z[2:4,7:9,-2:2,-7:8,-4:*]\n+   integer, codimension[1:*] :: z3[2:4,7:9,-2:2,-7:8,-4:*]\n+   dimension :: z(1:2,-3:-2,7:7), z2(1:2,-3:-2,7:7), z3(1:2,-3:-2,7:7)\n+   integer, codimension[2:4,7:9,-2:2,-7:8,-4:*], dimension(1:2,-3:-2,7:7) :: z4\n+   integer, codimension[*], dimension(1:2,-3:-2,7:7) :: z5[2:4,7:9,-2:2,-7:8,-4:*]\n+   integer, codimension[2:4,7:9,-2:2,-7:8,-4:*], dimension(3) :: z6(1:2,-3:-2,7:7)\n+   integer, codimension[*], dimension(4) :: z7(1:2,-3:-2,7:7)[2:4,7:9,-2:2,-7:8,-4:*]\n+\n+   if (any (lcobound(x) /= [1, 1])) stop 1\n+   if (any (lcobound(y) /= [1, 1, -3, 1, 7])) stop 3\n+   if (any (lcobound(z) /= [2,7,-2,-7,-4])) stop 4\n+   if (any (lcobound(z2) /= lcobound(z))) stop 4\n+   if (any (lcobound(z3) /= lcobound(z))) stop 5\n+   if (any (lcobound(z4) /= lcobound(z))) stop 6\n+   if (any (lcobound(z5) /= lcobound(z))) stop 7\n+   if (any (lcobound(z6) /= lcobound(z))) stop 8\n+   if (any (lcobound(z7) /= lcobound(z))) stop 9\n+\n+   if (any (lbound(x) /= [1])) stop 11\n+   if (any (lbound(y) /= [1])) stop 12\n+   if (any (lbound(z) /= [1,-3,7])) stop 13\n+   if (any (lbound(z2) /= lbound(z))) stop 14\n+   if (any (lbound(z3) /= lbound(z))) stop 15\n+   if (any (lbound(z4) /= lbound(z))) stop 16\n+   if (any (lbound(z5) /= lbound(z))) stop 17\n+   if (any (lbound(z6) /= lbound(z))) stop 18\n+   if (any (lbound(z7) /= lbound(z))) stop 19\n+\n+   if (any (ubound(x) /= [3])) stop 21\n+   if (any (ubound(y) /= [3])) stop 22\n+   if (any (ubound(z) /= [2,-2,7])) stop 23\n+   if (any (ubound(z2) /= ubound(z))) stop 24\n+   if (any (ubound(z3) /= ubound(z))) stop 25\n+   if (any (ubound(z4) /= ubound(z))) stop 26\n+   if (any (ubound(z5) /= ubound(z))) stop 27\n+   if (any (ubound(z6) /= ubound(z))) stop 28\n+   if (any (ubound(z7) /= ubound(z))) stop 29\n+\n+   if (any (ucobound(z2) /= ucobound(z))) stop 31\n+   if (any (ucobound(z3) /= ucobound(z))) stop 32\n+   if (any (ucobound(z4) /= ucobound(z))) stop 33\n+   if (any (ucobound(z5) /= ucobound(z))) stop 34\n+   if (any (ucobound(z6) /= ucobound(z))) stop 35\n+   if (any (ucobound(z7) /= ucobound(z))) stop 36\n+\n+   if (num_images() == 1) then\n+     if (any (ucobound(x) /= [2, lbound(x,dim=1)])) stop 37\n+     if (any (ucobound(y) /= [2, 3, 4, 5, 7])) stop 38\n+     if (any (ucobound(z) /= [4,9,2,8,-4])) stop 39\n+   else\n+     if (ucobound(x, dim=1) /= 2) stop 41\n+     if (ucobound(y, dim=1) /= 2) stop 42\n+     if (ucobound(y, dim=2) /= 3) stop 43\n+     if (ucobound(y, dim=3) /= 4) stop 44\n+     if (ucobound(y, dim=4) /= 5) stop 45\n+     if (ucobound(z, dim=1) /= 4) stop 46\n+     if (ucobound(z, dim=2) /= 9) stop 47\n+     if (ucobound(z, dim=3) /= 2) stop 48\n+     if (ucobound(z, dim=4) /= 8) stop 49\n+   endif\n+end"}]}