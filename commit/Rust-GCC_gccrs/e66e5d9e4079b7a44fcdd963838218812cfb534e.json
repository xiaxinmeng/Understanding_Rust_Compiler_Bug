{"sha": "e66e5d9e4079b7a44fcdd963838218812cfb534e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY2ZTVkOWU0MDc5YjdhNDRmY2RkOTYzODM4MjE4ODEyY2ZiNTM0ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-11-16T10:05:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-11-16T10:05:22Z"}, "message": "re PR ada/38127 (ACATS cd1c04e fails on sparc, hppa)\n\n\tPR ada/38127\n\t* gcc-interface/decl.c (make_type_from_size): Do not special-case\n\tboolean types.\n\t* gcc-interface/targtyps.c: Tweak comment.\n\nFrom-SVN: r141913", "tree": {"sha": "d8c96659ac7d261f1e86e0fb1811560ece332a9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8c96659ac7d261f1e86e0fb1811560ece332a9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e66e5d9e4079b7a44fcdd963838218812cfb534e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66e5d9e4079b7a44fcdd963838218812cfb534e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66e5d9e4079b7a44fcdd963838218812cfb534e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66e5d9e4079b7a44fcdd963838218812cfb534e/comments", "author": null, "committer": null, "parents": [{"sha": "4c533e5afee14d141caa6da2774857d6a65177c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c533e5afee14d141caa6da2774857d6a65177c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c533e5afee14d141caa6da2774857d6a65177c2"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "0125eb839fa8dfd11586cae21d6f78eff25bd355", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66e5d9e4079b7a44fcdd963838218812cfb534e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66e5d9e4079b7a44fcdd963838218812cfb534e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e66e5d9e4079b7a44fcdd963838218812cfb534e", "patch": "@@ -1,3 +1,10 @@\n+2008-11-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/38127\n+\t* gcc-interface/decl.c (make_type_from_size): Do not special-case\n+\tboolean types.\n+\t* gcc-interface/targtyps.c: Tweak comment.\n+\n 2008-11-15  Geert Bosch  <bosch@adacore.com>\n \n \t* gcc-interface/trans.c (emit_check): Put back a final save_expr"}, {"sha": "35fdb0ce5914bda3f37178004b2e5eca8e21e4ea", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66e5d9e4079b7a44fcdd963838218812cfb534e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66e5d9e4079b7a44fcdd963838218812cfb534e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=e66e5d9e4079b7a44fcdd963838218812cfb534e", "patch": "@@ -7184,7 +7184,7 @@ static tree\n make_type_from_size (tree type, tree size_tree, bool for_biased)\n {\n   unsigned HOST_WIDE_INT size;\n-  bool biased_p, boolean_p;\n+  bool biased_p;\n   tree new_type;\n \n   /* If size indicates an error, just return TYPE to avoid propagating\n@@ -7202,19 +7202,10 @@ make_type_from_size (tree type, tree size_tree, bool for_biased)\n       biased_p = (TREE_CODE (type) == INTEGER_TYPE\n \t\t  && TYPE_BIASED_REPRESENTATION_P (type));\n \n-      boolean_p = (TREE_CODE (type) == BOOLEAN_TYPE\n-\t\t   || (TREE_CODE (type) == INTEGER_TYPE\n-\t\t       && TREE_TYPE (type)\n-\t\t       && TREE_CODE (TREE_TYPE (type)) == BOOLEAN_TYPE));\n-\n-      if (boolean_p)\n-\tsize = round_up_to_align (size, BITS_PER_UNIT);\n-\n       /* Only do something if the type is not a packed array type and\n \t doesn't already have the proper size.  */\n       if (TYPE_PACKED_ARRAY_TYPE_P (type)\n-\t  || (biased_p == for_biased && TYPE_PRECISION (type) == size)\n-\t  || (boolean_p && compare_tree_int (TYPE_SIZE (type), size) == 0))\n+\t  || (TYPE_PRECISION (type) == size && biased_p == for_biased))\n \tbreak;\n \n       biased_p |= for_biased;\n@@ -7224,18 +7215,13 @@ make_type_from_size (tree type, tree size_tree, bool for_biased)\n \tnew_type = make_unsigned_type (size);\n       else\n \tnew_type = make_signed_type (size);\n-      if (boolean_p)\n-\tTYPE_PRECISION (new_type) = 1;\n       TREE_TYPE (new_type) = TREE_TYPE (type) ? TREE_TYPE (type) : type;\n       TYPE_MIN_VALUE (new_type)\n \t= convert (TREE_TYPE (new_type), TYPE_MIN_VALUE (type));\n       TYPE_MAX_VALUE (new_type)\n \t= convert (TREE_TYPE (new_type), TYPE_MAX_VALUE (type));\n       TYPE_BIASED_REPRESENTATION_P (new_type) = biased_p;\n-      if (boolean_p)\n-\tTYPE_RM_SIZE_NUM (new_type) = bitsize_int (1);\n-      else\n-\tTYPE_RM_SIZE_NUM (new_type) = bitsize_int (size);\n+      TYPE_RM_SIZE_NUM (new_type) = bitsize_int (size);\n       return new_type;\n \n     case RECORD_TYPE:"}, {"sha": "91572be0c84d620cce1eb6b978550109793d11a0", "filename": "gcc/ada/gcc-interface/targtyps.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66e5d9e4079b7a44fcdd963838218812cfb534e/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66e5d9e4079b7a44fcdd963838218812cfb534e/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c?ref=e66e5d9e4079b7a44fcdd963838218812cfb534e", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                                  Body                                    *\n  *                                                                          *\n- *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2008, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -164,12 +164,13 @@ get_target_maximum_default_alignment (void)\n    Stricter alignment requests trigger gigi's aligning_type circuitry for\n    objects allocated by the default allocator.  */\n \n+/* ??? Need a way to get info about __gnat_malloc from here (whether it is\n+   handy and what alignment it honors).  In the meantime, resort to malloc\n+   considerations only.  */\n+\n Pos\n get_target_default_allocator_alignment (void)\n {\n-  /* ??? Need a way to get info about __gnat_malloc from here (whether\n-     it is handy and what alignment it honors).  */\n-\n   return MALLOC_ABI_ALIGNMENT / BITS_PER_UNIT;\n }\n "}]}