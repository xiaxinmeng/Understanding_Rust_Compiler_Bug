{"sha": "bea966c222bf8900ebfcc5cd6d83e507b6bec748", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVhOTY2YzIyMmJmODkwMGViZmNjNWNkNmQ4M2U1MDdiNmJlYzc0OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-05-03T13:07:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-05-03T13:07:31Z"}, "message": "tree-ssa-pre.c (valid_in_sets): Remove checking of trapping operations.\n\n2012-05-03  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (valid_in_sets): Remove checking of trapping\n\toperations.\n\t(prune_clobbered_mems): Do it here.  Do not uselessly sort\n\texpressions.\n\t(compute_avail): Do not add possibly trapping operations to\n\tEXP_GEN if they might not be executed in the block.\n\n\t* gcc.dg/tree-ssa/ssa-pre-27.c: Remove XFAIL.\n\nFrom-SVN: r187096", "tree": {"sha": "a6ef2b4891761de6c30f680aa1eacc98ad9c1215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6ef2b4891761de6c30f680aa1eacc98ad9c1215"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bea966c222bf8900ebfcc5cd6d83e507b6bec748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea966c222bf8900ebfcc5cd6d83e507b6bec748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea966c222bf8900ebfcc5cd6d83e507b6bec748", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea966c222bf8900ebfcc5cd6d83e507b6bec748/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1cbdef5105b002f57a9e60be4768084b3c36e405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cbdef5105b002f57a9e60be4768084b3c36e405", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cbdef5105b002f57a9e60be4768084b3c36e405"}], "stats": {"total": 81, "additions": 51, "deletions": 30}, "files": [{"sha": "7b523a661356f1178a32511340fe8d4746a627d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea966c222bf8900ebfcc5cd6d83e507b6bec748/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea966c222bf8900ebfcc5cd6d83e507b6bec748/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bea966c222bf8900ebfcc5cd6d83e507b6bec748", "patch": "@@ -1,3 +1,12 @@\n+2012-05-03  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (valid_in_sets): Remove checking of trapping\n+\toperations.\n+\t(prune_clobbered_mems): Do it here.  Do not uselessly sort\n+\texpressions.\n+\t(compute_avail): Do not add possibly trapping operations to\n+\tEXP_GEN if they might not be executed in the block.\n+\n 2012-05-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/elf.h (MAX_OFILE_ALIGNMENT): Remove."}, {"sha": "c35bd8523abdecf4fb083bb2568531c8440223d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea966c222bf8900ebfcc5cd6d83e507b6bec748/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea966c222bf8900ebfcc5cd6d83e507b6bec748/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bea966c222bf8900ebfcc5cd6d83e507b6bec748", "patch": "@@ -1,3 +1,7 @@\n+2012-05-03  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-pre-27.c: Remove XFAIL.\n+\n 2012-05-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/hle-cmpxchg-acq-1.c (dg-options): Add -march=x86-64."}, {"sha": "4149bbef6a5d8f806dde67ab83e5c3b357824dff", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-27.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea966c222bf8900ebfcc5cd6d83e507b6bec748/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea966c222bf8900ebfcc5cd6d83e507b6bec748/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-27.c?ref=bea966c222bf8900ebfcc5cd6d83e507b6bec748", "patch": "@@ -17,13 +17,12 @@ int foo2 (int i, int j, int b)\n   int res = 0;\n   if (b)\n     res = i/j;\n-  /* But we fail so here because of the possibly not returning\n-     call in the same basic-block.  */\n+  /* And here, the possibly not returning call in the same basic-block\n+     comes after the trapping i/j.  */\n   res += i/j;\n   bar ();\n   return res;\n }\n \n-/* { dg-final { scan-tree-dump-times \"# prephitmp\" 1 \"pre\" } } */\n-/* { dg-final { scan-tree-dump-times \"# prephitmp\" 2 \"pre\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"# prephitmp\" 2 \"pre\" } } */\n /* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "776a37cdcc6ea00dc969485a5713cda50e1adcd7", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 35, "deletions": 26, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea966c222bf8900ebfcc5cd6d83e507b6bec748/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea966c222bf8900ebfcc5cd6d83e507b6bec748/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=bea966c222bf8900ebfcc5cd6d83e507b6bec748", "patch": "@@ -2069,13 +2069,6 @@ valid_in_sets (bitmap_set_t set1, bitmap_set_t set2, pre_expr expr,\n \tfor (i = 0; i < nary->length; i++)\n \t  if (!op_valid_in_sets (set1, set2, nary->op[i]))\n \t    return false;\n-\t/* If the NARY may trap make sure the block does not contain\n-\t   a possible exit point.\n-\t   ???  This is overly conservative if we translate AVAIL_OUT\n-\t   as the available expression might be after the exit point.  */\n-\tif (BB_MAY_NOTRETURN (block)\n-\t    && vn_nary_may_trap (nary))\n-\t  return false;\n \treturn true;\n       }\n       break;\n@@ -2140,35 +2133,44 @@ clean (bitmap_set_t set, basic_block block)\n }\n \n /* Clean the set of expressions that are no longer valid in SET because\n-   they are clobbered in BLOCK.  */\n+   they are clobbered in BLOCK or because they trap and may not be executed.  */\n \n static void\n prune_clobbered_mems (bitmap_set_t set, basic_block block)\n {\n-  VEC (pre_expr, heap) *exprs = sorted_array_from_bitmap_set (set);\n-  pre_expr expr;\n-  int i;\n+  bitmap_iterator bi;\n+  unsigned i;\n \n-  FOR_EACH_VEC_ELT (pre_expr, exprs, i, expr)\n+  FOR_EACH_EXPR_ID_IN_SET (set, i, bi)\n     {\n-      vn_reference_t ref;\n-      if (expr->kind != REFERENCE)\n-\tcontinue;\n-\n-      ref = PRE_EXPR_REFERENCE (expr);\n-      if (ref->vuse)\n+      pre_expr expr = expression_for_id (i);\n+      if (expr->kind == REFERENCE)\n+\t{\n+\t  vn_reference_t ref = PRE_EXPR_REFERENCE (expr);\n+\t  if (ref->vuse)\n+\t    {\n+\t      gimple def_stmt = SSA_NAME_DEF_STMT (ref->vuse);\n+\t      if (!gimple_nop_p (def_stmt)\n+\t\t  && ((gimple_bb (def_stmt) != block\n+\t\t       && !dominated_by_p (CDI_DOMINATORS,\n+\t\t\t\t\t   block, gimple_bb (def_stmt)))\n+\t\t      || (gimple_bb (def_stmt) == block\n+\t\t\t  && value_dies_in_block_x (expr, block))))\n+\t\tbitmap_remove_from_set (set, expr);\n+\t    }\n+\t}\n+      else if (expr->kind == NARY)\n \t{\n-\t  gimple def_stmt = SSA_NAME_DEF_STMT (ref->vuse);\n-\t  if (!gimple_nop_p (def_stmt)\n-\t      && ((gimple_bb (def_stmt) != block\n-\t\t   && !dominated_by_p (CDI_DOMINATORS,\n-\t\t\t\t       block, gimple_bb (def_stmt)))\n-\t\t  || (gimple_bb (def_stmt) == block\n-\t\t      && value_dies_in_block_x (expr, block))))\n+\t  vn_nary_op_t nary = PRE_EXPR_NARY (expr);\n+\t  /* If the NARY may trap make sure the block does not contain\n+\t     a possible exit point.\n+\t     ???  This is overly conservative if we translate AVAIL_OUT\n+\t     as the available expression might be after the exit point.  */\n+\t  if (BB_MAY_NOTRETURN (block)\n+\t      && vn_nary_may_trap (nary))\n \t    bitmap_remove_from_set (set, expr);\n \t}\n     }\n-  VEC_free (pre_expr, heap, exprs);\n }\n \n static sbitmap has_abnormal_preds;\n@@ -4119,6 +4121,13 @@ compute_avail (void)\n \t\t\tif (TREE_CODE (nary->op[i]) == SSA_NAME)\n \t\t\t  add_to_exp_gen (block, nary->op[i]);\n \n+\t\t      /* If the NARY traps and there was a preceeding\n+\t\t         point in the block that might not return avoid\n+\t\t\t adding the nary to EXP_GEN.  */\n+\t\t      if (BB_MAY_NOTRETURN (block)\n+\t\t\t  && vn_nary_may_trap (nary))\n+\t\t\tcontinue;\n+\n \t\t      result = (pre_expr) pool_alloc (pre_expr_pool);\n \t\t      result->kind = NARY;\n \t\t      result->id = 0;"}]}