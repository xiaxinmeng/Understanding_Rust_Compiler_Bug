{"sha": "f869f40780836d1744ec973e6d0e9d948947d509", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg2OWY0MDc4MDgzNmQxNzQ0ZWM5NzNlNmQwZTlkOTQ4OTQ3ZDUwOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-03-14T19:53:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-03-14T19:53:04Z"}, "message": "Don't require 'bool' in a concept definition.\n\n\t* parser.c (cp_parser_decl_specifier_seq): Support C++20\n\tconcept-definition syntax without 'bool'.\n\nFrom-SVN: r269692", "tree": {"sha": "d60dee036a06260918e1b3fcefee76796f243d86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d60dee036a06260918e1b3fcefee76796f243d86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f869f40780836d1744ec973e6d0e9d948947d509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f869f40780836d1744ec973e6d0e9d948947d509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f869f40780836d1744ec973e6d0e9d948947d509", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f869f40780836d1744ec973e6d0e9d948947d509/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa9cedb4edf6b09b1b4f15ba837e387d72c347e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9cedb4edf6b09b1b4f15ba837e387d72c347e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9cedb4edf6b09b1b4f15ba837e387d72c347e8"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "6c96c24430fc3477bf70032fd73ea5e5d0e1640d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f869f40780836d1744ec973e6d0e9d948947d509/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f869f40780836d1744ec973e6d0e9d948947d509/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f869f40780836d1744ec973e6d0e9d948947d509", "patch": "@@ -1,3 +1,8 @@\n+2019-03-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* parser.c (cp_parser_decl_specifier_seq): Support C++20\n+\tconcept-definition syntax without 'bool'.\n+\n 2019-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/89512"}, {"sha": "b8a0245ce57a7c2f13f351306518bb66e9c94232", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f869f40780836d1744ec973e6d0e9d948947d509/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f869f40780836d1744ec973e6d0e9d948947d509/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f869f40780836d1744ec973e6d0e9d948947d509", "patch": "@@ -13964,6 +13964,15 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n         case RID_CONCEPT:\n           ds = ds_concept;\n           cp_lexer_consume_token (parser->lexer);\n+\t  /* In C++20 a concept definition is just 'concept name = expr;'\n+\t     Support that syntax by pretending we've seen 'bool'.  */\n+\t  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME)\n+\t      && cp_lexer_nth_token_is (parser->lexer, 2, CPP_EQ))\n+\t    {\n+\t      cp_parser_set_decl_spec_type (decl_specs, boolean_type_node,\n+\t\t\t\t\t    token, /*type_definition*/false);\n+\t      decl_specs->any_type_specifiers_p = true;\n+\t    }\n           break;\n \n \t  /* function-specifier:"}, {"sha": "be9b73a06893bd32fbfebfaf9ac0d1a725787d54", "filename": "gcc/testsuite/g++.dg/concepts/no-bool1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f869f40780836d1744ec973e6d0e9d948947d509/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fno-bool1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f869f40780836d1744ec973e6d0e9d948947d509/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fno-bool1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fno-bool1.C?ref=f869f40780836d1744ec973e6d0e9d948947d509", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do compile { target c++14 } }\n+// { dg-additional-options -fconcepts }\n+\n+template <class T> concept True = true;"}]}