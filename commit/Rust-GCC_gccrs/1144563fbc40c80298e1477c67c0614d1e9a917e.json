{"sha": "1144563fbc40c80298e1477c67c0614d1e9a917e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE0NDU2M2ZiYzQwYzgwMjk4ZTE0NzdjNjdjMDYxNGQxZTlhOTE3ZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-02-20T19:22:49Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-02-20T19:22:49Z"}, "message": "pa.h (DBX_CONTIN_LENGTH): Define to 4000 characters.\n\n        * pa.h (DBX_CONTIN_LENGTH): Define to 4000 characters.\n\n        * pa.c (hppa_expand_epilogue): Always emit a blockage insn\n        before cutting back the stack.\n\nFrom-SVN: r11327", "tree": {"sha": "27516760db40e9ec335990a918d83cedd3acd3ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27516760db40e9ec335990a918d83cedd3acd3ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1144563fbc40c80298e1477c67c0614d1e9a917e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1144563fbc40c80298e1477c67c0614d1e9a917e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1144563fbc40c80298e1477c67c0614d1e9a917e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1144563fbc40c80298e1477c67c0614d1e9a917e/comments", "author": null, "committer": null, "parents": [{"sha": "97da85b7a061926d4ddf4db2d91a561396a3f150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97da85b7a061926d4ddf4db2d91a561396a3f150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97da85b7a061926d4ddf4db2d91a561396a3f150"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "2c3e0140ae704e387dfd1284a5c6a0e47575a106", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1144563fbc40c80298e1477c67c0614d1e9a917e/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1144563fbc40c80298e1477c67c0614d1e9a917e/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=1144563fbc40c80298e1477c67c0614d1e9a917e", "patch": "@@ -2475,6 +2475,12 @@ hppa_expand_epilogue ()\n \t\t\t\t   gen_rtx (POST_INC, DFmode, tmpreg)));\n     }\n \n+  /* Emit a blockage insn here to keep these insns from being moved to\n+     an earlier spot in the epilogue, or into the main instruction stream.\n+\n+     This is necessary as we must not cut the stack back before all the\n+     restores are finished.  */\n+  emit_insn (gen_blockage ());\n   /* No frame pointer, but we have a stack greater than 8k.  We restore\n      %r2 very late in this case.  (All other cases are restored as early\n      as possible.)  */\n@@ -2499,10 +2505,6 @@ hppa_expand_epilogue ()\n      pointer is initially set to fp + 64 to avoid a race condition.  */\n   else if (frame_pointer_needed)\n     {\n-      /* Emit a blockage insn here to keep these insns from being moved\n-\t to the beginning of the prologue or into the main instruction\n-\t stream, doing so avoids some very obscure problems.  */\n-      emit_insn (gen_blockage ());\n       set_reg_plus_d (STACK_POINTER_REGNUM, FRAME_POINTER_REGNUM, 64);\n       emit_insn (gen_pre_ldwm (frame_pointer_rtx, \n \t\t\t       stack_pointer_rtx,"}, {"sha": "a61af99bea36db59c9797f5fe36ed79398d224d8", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1144563fbc40c80298e1477c67c0614d1e9a917e/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1144563fbc40c80298e1477c67c0614d1e9a917e/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=1144563fbc40c80298e1477c67c0614d1e9a917e", "patch": "@@ -1596,7 +1596,7 @@ while (0)\n #define SLOW_BYTE_ACCESS 1\n \n /* Do not break .stabs pseudos into continuations.  */\n-#define DBX_CONTIN_LENGTH 0\n+#define DBX_CONTIN_LENGTH 4000\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */"}]}