{"sha": "c8b38637055ef502cc726adccf28f491c3afbbf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhiMzg2MzcwNTVlZjUwMmNjNzI2YWRjY2YyOGY0OTFjM2FmYmJmNw==", "commit": {"author": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2008-06-07T22:19:45Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2008-06-07T22:19:45Z"}, "message": "clean up fixes\n\nFrom-SVN: r136539", "tree": {"sha": "6cb456d0b0f1201ea63678c495c19101fee79675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cb456d0b0f1201ea63678c495c19101fee79675"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8b38637055ef502cc726adccf28f491c3afbbf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b38637055ef502cc726adccf28f491c3afbbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b38637055ef502cc726adccf28f491c3afbbf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b38637055ef502cc726adccf28f491c3afbbf7/comments", "author": null, "committer": null, "parents": [{"sha": "8cec30d3c427ae3a5d2cf56c203c32eadb9d573f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cec30d3c427ae3a5d2cf56c203c32eadb9d573f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cec30d3c427ae3a5d2cf56c203c32eadb9d573f"}], "stats": {"total": 218, "additions": 84, "deletions": 134}, "files": [{"sha": "746c09b2880be7905e79788d0cb11b4f463dfed7", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b38637055ef502cc726adccf28f491c3afbbf7/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b38637055ef502cc726adccf28f491c3afbbf7/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=c8b38637055ef502cc726adccf28f491c3afbbf7", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Thursday May 29, 2008 at 11:31:36 PM UTC\n+ * It has been AutoGen-ed  Saturday June  7, 2008 at 03:19:21 PM PDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Thu May 29 23:31:36 UTC 2008\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Sat Jun  7 15:19:21 PDT 2008\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -475,42 +475,7 @@ static const char* apzAab_Sun_MemcpyPatch[] = {\n     extern char *memset();\\n\\\n   #endif /* __STDC__ */\\n\\n\\\n   extern int memcmp();\\n\\n\\\n-#endif /* __memory_h__ */\\n\\\n-_EndOfHeader;\\n\\\n-};\\n\\n\\n\\\n-/*\\n\\\n- *  Completely replace <sys/varargs.h> with a file that includes gcc's\\n\\\n- *  stdarg.h or varargs.h files as appropriate.\\n\\\n- */\\n\\\n-#ifdef SVR4\\n\\\n-fix = {\\n\\\n-    hackname = AAB_svr4_no_varargs;\\n\\\n-    files    = sys/varargs.h;\\n\\\n-    replace  = \\\"/* This file was generated by fixincludes.  */\\\\n\\\"\\n\\\n-               \\\"#ifndef _SYS_VARARGS_H\\\\n\\\"\\n\\\n-               \\\"#define _SYS_VARARGS_H\\\\n\\\\n\\\"\\n\\n\\\n-               \\\"#ifdef __STDC__\\\\n\\\"\\n\\\n-               \\\"#include <stdarg.h>\\\\n\\\"\\n\\\n-               \\\"#else\\\\n\\\"\\n\\\n-               \\\"#include <varargs.h>\\\\n\\\"\\n\\\n-               \\\"#endif\\\\n\\\\n\\\"\\n\\n\\\n-               \\\"#endif  /* _SYS_VARARGS_H */\\\\n\\\";\\n\\\n-};\\n\\\n-#endif\\n\\n\\n\\\n-/*\\n\\\n- *  The Ultrix 4.3 file string.h is a symbolic link to strings.h.\\n\\\n- *  Replace string.h link with a file that includes strings.h to prevent\\n\\\n- *  problems from multiple inclusion.\\n\\\n- */\\n\\\n-fix = {\\n\\\n-    hackname = AAB_ultrix_string;\\n\\\n-    files    = string.h;\\n\\\n-    mach     = \\\"*-*-ultrix4.3\\\";\\n\\\n-    replace  = <<-  _EndOfHeader_\\n\\\n-#ifndef _STRING_INCLUDED\\n\\\n-  #define _STRING_INCLUDED\\n\\\n-  #include <strings.h>\\n\\\n-#endif /* _STRING_INCLUDED */\",\n+#endif /* __memory_h__ */\",\n     (char*)NULL };\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *"}, {"sha": "ba352467c974797dd4f795a491cdc102b6802150", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 81, "deletions": 96, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b38637055ef502cc726adccf28f491c3afbbf7/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b38637055ef502cc726adccf28f491c3afbbf7/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=c8b38637055ef502cc726adccf28f491c3afbbf7", "patch": "@@ -28,37 +28,40 @@ FIXINC_DEBUG = yes;\n  * building with g++ and -D_LARGE_FILES\n  */\n fix = {\n-\thackname  = AAB_aix_stdio;\n-\tfiles     = stdio.h;\n-\tselect    = \"define fopen fopen64\";\n-\tmach      = \"*-*-aix*\";\n-\n-\tc_fix\t  = wrap;\n-\n-\tc_fix_arg = \"\";\n-\n-\tc_fix_arg = \"\\n\" \n-\t\"#if defined __GNUG__ && defined _LARGE_FILES && defined __cplusplus\\n\"\n-\t\"#define __need__aix_stdio_h_fix\\n\"\n-\t\"#ifdef __need__aix_stdio_h_fix\\n\"\n-\t\"#undef fseeko\\n\"\n-\t\"#undef ftello\\n\"\n-\t\"#undef fgetpos\\n\"\n-\t\"#undef fsetpos\\n\"\n-\t\"#undef fopen\\n\"\n-\t\"#undef freopen\\n\"\n-\t\"/* Alias the symbols using asm */\\n\"\n-\t\"extern \\\"C\\\" {\\n\"\n-\t\"extern int fgetpos(FILE *, fpos64_t *) __asm__(\\\"fgetpos64\\\");\\n\"\n-\t\"extern FILE *fopen(const char *, const char *) __asm__(\\\"fopen64\\\");\\n\"\n-\t\"extern FILE *freopen(const char *, const char *, FILE *) __asm__(\\\"freopen64\\\");\\n\"\n-\t\"extern int fseeko(FILE *, off64_t, int) __asm__(\\\"fseeko64\\\");\\n\"\n-\t\"extern int fsetpos(FILE *, const fpos64_t *) __asm__(\\\"fsetpos64\\\");\\n\"\n-\t\"extern off64_t ftello(FILE *) __asm__(\\\"ftello64\\\");\\n\"\n-\t\"}\\n\"\n-\t\"#endif\\n\"\n-\t\"#endif\\n\";\n-\ttest_text = \"\";\n+    hackname  = AAB_aix_stdio;\n+    files     = stdio.h;\n+    select    = \"define fopen fopen64\";\n+    mach      = \"*-*-aix*\";\n+    test-text = ''; /* no way to test */\n+\n+    c_fix     = wrap;\n+\n+    c_fix_arg = \"\";\n+\n+    c_fix_arg = <<- _EOArg_\n+\n+\t#if defined __GNUG__ && defined _LARGE_FILES && defined __cplusplus\n+\t#define __need__aix_stdio_h_fix\n+\t#ifdef __need__aix_stdio_h_fix\n+\t#undef fseeko\n+\t#undef ftello\n+\t#undef fgetpos\n+\t#undef fsetpos\n+\t#undef fopen\n+\t#undef freopen\n+\t/* Alias the symbols using asm */\n+\textern \"C\" {\n+\textern int fgetpos(FILE *, fpos64_t *) __asm__(\"fgetpos64\");\n+\textern FILE *fopen(const char *, const char *) __asm__(\"fopen64\");\n+\textern FILE *freopen(const char *, const char *, FILE *) __asm__(\"freopen64\");\n+\textern int fseeko(FILE *, off64_t, int) __asm__(\"fseeko64\");\n+\textern int fsetpos(FILE *, const fpos64_t *) __asm__(\"fsetpos64\");\n+\textern off64_t ftello(FILE *) __asm__(\"ftello64\");\n+\t}\n+\t#endif\n+\t#endif\n+\n+\t_EOArg_;\n };\n \n \n@@ -202,10 +205,10 @@ fix = {\n \t#define __FD_ZERO(fdsetp) \\\n \t  do { \\\n \t    int __d0, __d1; \\\n-\t\t\t__asm__ __volatile__(\"cld ; rep ; stosl\" \\\n-\t\t\t\t: \"=&c\" (__d0), \"=&D\" (__d1) \\\n-\t\t\t\t: \"a\" (0), \"0\" (__FDSET_LONGS), \\\n-\t\t\t\t  \"1\" ((__kernel_fd_set *) (fdsetp)) :\"memory\"); \\\n+\t\t__asm__ __volatile__(\"cld ; rep ; stosl\" \\\n+\t\t\t: \"=&c\" (__d0), \"=&D\" (__d1) \\\n+\t\t\t: \"a\" (0), \"0\" (__FDSET_LONGS), \\\n+\t\t\t  \"1\" ((__kernel_fd_set *) (fdsetp)) :\"memory\"); \\\n \t  } while (0)\n \t#endif\n \t\n@@ -348,7 +351,7 @@ fix = {\n \t  extern int memcmp();\n \n \t#endif /* __memory_h__ */\n-\t_EndOfHeader;\n+\t_EndOfHeader_;\n };\n \n \n@@ -375,24 +378,6 @@ fix = {\n #endif\n \n \n-/*\n- *  The Ultrix 4.3 file string.h is a symbolic link to strings.h.\n- *  Replace string.h link with a file that includes strings.h to prevent\n- *  problems from multiple inclusion.\n- */\n-fix = {\n-    hackname = AAB_ultrix_string;\n-    files    = string.h;\n-    mach     = \"*-*-ultrix4.3\";\n-    replace  = <<-  _EndOfHeader_\n-\t#ifndef _STRING_INCLUDED\n-\t  #define _STRING_INCLUDED\n-\t  #include <strings.h>\n-\t#endif /* _STRING_INCLUDED */\n-\t_EndOfHeader_;\n-};\n-\n-\n /*\n  *  pthread.h on AIX 4.3.3 tries to define a macro without whitspace\n  *  which violates a requirement of ISO C.\n@@ -1173,11 +1158,11 @@ fix = {\n     c_fix     = format;\n     c_fix_arg = \"%0 && (defined __extern_inline || defined __GNUC_GNU_INLINE__)\";\n     test_text = <<-EOT\n-#if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \\\n-    && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__\n-# define __USE_EXTERN_INLINES\t1\n-#endif\n-EOT;\n+\t#if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ \\\n+\t    && !defined __OPTIMIZE_SIZE__ && !defined __NO_INLINE__\n+\t# define __USE_EXTERN_INLINES\t1\n+\t#endif\n+\tEOT;\n };\n \n \n@@ -1192,10 +1177,10 @@ fix = {\n     c_fix     = format;\n     c_fix_arg = \"%1 && (defined __extern_inline || defined __GNUC_GNU_INLINE__)\\n%2\";\n     test_text = <<-EOT\n-#if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ && !defined __OPTIMIZE_SIZE__\n-# define __USE_EXTERN_INLINES\t1\n-#endif\n-EOT;\n+\t#if __GNUC_PREREQ (2, 7) && defined __OPTIMIZE__ && !defined __OPTIMIZE_SIZE__\n+\t# define __USE_EXTERN_INLINES\t1\n+\t#endif\n+\tEOT;\n };\n \n \n@@ -1285,39 +1270,39 @@ fix = {\n                \"s/{ { 0, } }/{ { 0, 0, 0, 0, 0, (void *) 0, 0, 0 } }/\";\n \n     test_text = <<- _EOText_\n-#define PTHREAD_MUTEX_INITIALIZER \\\\\n-  { { 0, } }\n-#ifdef __USE_GNU\n-# if __WORDSIZE == 64\n-#  define PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP \\\\\n-  { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP } }\n-#  define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP \\\\\n-  { { 0, 0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP } }\n-#  define PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP \\\\\n-  { { 0, 0, 0, 0, PTHREAD_MUTEX_ADAPTIVE_NP } }\n-# else\n-#  define PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP \\\\\n-  { { 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP } }\n-#  define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP \\\\\n-  { { 0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP } }\n-#  define PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP \\\\\n-  { { 0, 0, 0, PTHREAD_MUTEX_ADAPTIVE_NP } }\n-# endif\n-#endif\n-# define PTHREAD_RWLOCK_INITIALIZER \\\\\n-  { { 0, } }\n-# ifdef __USE_GNU\n-#  if __WORDSIZE == 64\n-#   define PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \\\\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\t\t\t\t      \\\\\n-      PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP } }\n-#  else\n-#   define PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \\\\\n-  { { 0, 0, 0, 0, 0, 0, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP } }\n-#  endif\n-# endif\n-#define PTHREAD_COND_INITIALIZER { { 0, } }\n-_EOText_;\n+\t#define PTHREAD_MUTEX_INITIALIZER \\\\\n+\t  { { 0, } }\n+\t#ifdef __USE_GNU\n+\t# if __WORDSIZE == 64\n+\t#  define PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP \\\\\n+\t  { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP } }\n+\t#  define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP \\\\\n+\t  { { 0, 0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP } }\n+\t#  define PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP \\\\\n+\t  { { 0, 0, 0, 0, PTHREAD_MUTEX_ADAPTIVE_NP } }\n+\t# else\n+\t#  define PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP \\\\\n+\t  { { 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP } }\n+\t#  define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP \\\\\n+\t  { { 0, 0, 0, PTHREAD_MUTEX_ERRORCHECK_NP } }\n+\t#  define PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP \\\\\n+\t  { { 0, 0, 0, PTHREAD_MUTEX_ADAPTIVE_NP } }\n+\t# endif\n+\t#endif\n+\t# define PTHREAD_RWLOCK_INITIALIZER \\\\\n+\t  { { 0, } }\n+\t# ifdef __USE_GNU\n+\t#  if __WORDSIZE == 64\n+\t#   define PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \\\\\n+\t  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\t\t\t      \\\\\n+\t      PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP } }\n+\t#  else\n+\t#   define PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP \\\\\n+\t  { { 0, 0, 0, 0, 0, 0, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP } }\n+\t#  endif\n+\t# endif\n+\t#define PTHREAD_COND_INITIALIZER { { 0, } }\n+\t_EOText_;\n };\n \n "}]}