{"sha": "43daf8ffa83f013ccc2a7db8845375df73f5556b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNkYWY4ZmZhODNmMDEzY2NjMmE3ZGI4ODQ1Mzc1ZGY3M2Y1NTU2Yg==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2004-06-01T15:51:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-06-01T15:51:56Z"}, "message": "re PR c++/13092 (Accepts invalid pointer-to-member conversion)\n\n        PR c++/13092\n        * init.c (build_offset_ref): Build SCOPE_REF with non-null\n        TREE_TYPE for non-dependent names.\n        * pt.c (type_dependent_expression_p): Handle SCOPE_REF with\n        unknown_type_node as its TREE_TYPE.\n        * cxx-pretty_print.c (pp_cxx_unqualified_id): Handle BASELINK.\n        * error.c (dump_decl) <SCOPE_REF case>: Use pp_expression.\n        (dump_expr) <SCOPE_REF case>: Likewise.\n\nFrom-SVN: r82551", "tree": {"sha": "2def6dd5f3df50ec9750e71c7af3a314f0c66c12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2def6dd5f3df50ec9750e71c7af3a314f0c66c12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43daf8ffa83f013ccc2a7db8845375df73f5556b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43daf8ffa83f013ccc2a7db8845375df73f5556b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43daf8ffa83f013ccc2a7db8845375df73f5556b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43daf8ffa83f013ccc2a7db8845375df73f5556b/comments", "author": null, "committer": null, "parents": [{"sha": "7a3ea2011be31e937186df05335f665a8a983028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a3ea2011be31e937186df05335f665a8a983028", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a3ea2011be31e937186df05335f665a8a983028"}], "stats": {"total": 79, "additions": 51, "deletions": 28}, "files": [{"sha": "22277beadacc7d91971e6c6636a2f13ac4d5403b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43daf8ffa83f013ccc2a7db8845375df73f5556b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43daf8ffa83f013ccc2a7db8845375df73f5556b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=43daf8ffa83f013ccc2a7db8845375df73f5556b", "patch": "@@ -1,3 +1,14 @@\n+2004-06-01  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/13092\n+\t* init.c (build_offset_ref): Build SCOPE_REF with non-null\n+\tTREE_TYPE for non-dependent names.\n+\t* pt.c (type_dependent_expression_p): Handle SCOPE_REF with\n+\tunknown_type_node as its TREE_TYPE.\n+\t* cxx-pretty_print.c (pp_cxx_unqualified_id): Handle BASELINK.\n+\t* error.c (dump_decl) <SCOPE_REF case>: Use pp_expression.\n+\t(dump_expr) <SCOPE_REF case>: Likewise.\n+\n 2004-06-01  Richard Henderson  <rth@redhat.com>\n \t    Andrew Pinski  <pinskia@physics.uc.edu>\n "}, {"sha": "185c0376c6940ef693400c873596363d61e75956", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43daf8ffa83f013ccc2a7db8845375df73f5556b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43daf8ffa83f013ccc2a7db8845375df73f5556b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=43daf8ffa83f013ccc2a7db8845375df73f5556b", "patch": "@@ -4326,18 +4326,20 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n }\n \n /* Build a call to __builtin_trap which can be used as an expression of\n-   type TYPE.  */\n+   type TYPE.  This looks like  *(__builtin_trap(), (TYPE*)NULL).  */\n \n static tree\n call_builtin_trap (tree type)\n {\n   tree fn = implicit_built_in_decls[BUILT_IN_TRAP];\n+  tree t;\n \n   my_friendly_assert (fn != NULL, 20030927);\n   fn = build_call (fn, NULL_TREE);\n-  fn = build (COMPOUND_EXPR, type, fn, error_mark_node);\n-  fn = force_target_expr (type, fn);\n-  return fn;\n+  t = convert (build_pointer_type (type), null_node);\n+  t = build (COMPOUND_EXPR, TREE_TYPE (t), fn, t);\n+  t = build_indirect_ref (t, NULL);\n+  return t;\n }\n \n /* ARG is being passed to a varargs function.  Perform any conversions"}, {"sha": "328ece0f3327c148a6ac34ad837f4f81c113124e", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43daf8ffa83f013ccc2a7db8845375df73f5556b/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43daf8ffa83f013ccc2a7db8845375df73f5556b/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=43daf8ffa83f013ccc2a7db8845375df73f5556b", "patch": "@@ -180,6 +180,10 @@ pp_cxx_unqualified_id (cxx_pretty_printer *pp, tree t)\n       pp_cxx_template_id (pp, t);\n       break;\n \n+    case BASELINK:\n+      pp_cxx_unqualified_id (pp, BASELINK_FUNCTIONS (t));\n+      break;\n+\n     case RECORD_TYPE:\n     case UNION_TYPE:\n     case ENUMERAL_TYPE:"}, {"sha": "faa2bfbef0c9c8d8bb8fc06c405f9f15d02a7674", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43daf8ffa83f013ccc2a7db8845375df73f5556b/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43daf8ffa83f013ccc2a7db8845375df73f5556b/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=43daf8ffa83f013ccc2a7db8845375df73f5556b", "patch": "@@ -771,9 +771,7 @@ dump_decl (tree t, int flags)\n       break;\n \n     case SCOPE_REF:\n-      dump_decl (TREE_OPERAND (t, 0), flags & ~TFF_DECL_SPECIFIERS);\n-      pp_colon_colon (cxx_pp); \n-      dump_decl (TREE_OPERAND (t, 1), flags);\n+      pp_expression (cxx_pp, t);\n       break;\n \n     case ARRAY_REF:\n@@ -1699,9 +1697,7 @@ dump_expr (tree t, int flags)\n       break;\n \n     case SCOPE_REF:\n-      dump_type (TREE_OPERAND (t, 0), flags);\n-      pp_colon_colon (cxx_pp);\n-      dump_expr (TREE_OPERAND (t, 1), flags | TFF_EXPR_IN_PARENS);\n+      pp_expression (cxx_pp, t);\n       break;\n \n     case CAST_EXPR:"}, {"sha": "5f0872e80cdc9b8d6bb37fbf96705471da0594e1", "filename": "gcc/cp/init.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43daf8ffa83f013ccc2a7db8845375df73f5556b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43daf8ffa83f013ccc2a7db8845375df73f5556b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=43daf8ffa83f013ccc2a7db8845375df73f5556b", "patch": "@@ -1368,7 +1368,7 @@ build_offset_ref (tree type, tree name, bool address_p)\n   if (TREE_CODE (name) == TEMPLATE_DECL)\n     return name;\n \n-  if (processing_template_decl || uses_template_parms (type))\n+  if (dependent_type_p (type) || type_dependent_expression_p (name))\n     return build_min_nt (SCOPE_REF, type, name);\n \n   if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n@@ -1450,6 +1450,14 @@ build_offset_ref (tree type, tree name, bool address_p)\n       return error_mark_node;\n     }\n \n+  if (processing_template_decl)\n+    {\n+      if (TREE_CODE (orig_name) == TEMPLATE_ID_EXPR)\n+\treturn build_min (SCOPE_REF, TREE_TYPE (member), type, orig_name);\n+      else\n+\treturn build_min (SCOPE_REF, TREE_TYPE (member), type, name);\n+    }\n+\n   if (TREE_CODE (member) == TYPE_DECL)\n     {\n       TREE_USED (member) = 1;"}, {"sha": "824e8bf5aa014283abefd488ecaf05ae21e7ad04", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43daf8ffa83f013ccc2a7db8845375df73f5556b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43daf8ffa83f013ccc2a7db8845375df73f5556b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=43daf8ffa83f013ccc2a7db8845375df73f5556b", "patch": "@@ -11932,22 +11932,6 @@ type_dependent_expression_p (tree expression)\n \treturn dependent_type_p (type);\n     }\n \n-  if (TREE_CODE (expression) == SCOPE_REF\n-      && dependent_scope_ref_p (expression,\n-\t\t\t\ttype_dependent_expression_p))\n-    return true;\n-\n-  if (TREE_CODE (expression) == FUNCTION_DECL\n-      && DECL_LANG_SPECIFIC (expression)\n-      && DECL_TEMPLATE_INFO (expression)\n-      && (any_dependent_template_arguments_p\n-\t  (INNERMOST_TEMPLATE_ARGS (DECL_TI_ARGS (expression)))))\n-    return true;\n-\n-  if (TREE_CODE (expression) == TEMPLATE_DECL\n-      && !DECL_TEMPLATE_TEMPLATE_PARM_P (expression))\n-    return false;\n-\n   if (TREE_TYPE (expression) == unknown_type_node)\n     {\n       if (TREE_CODE (expression) == ADDR_EXPR)\n@@ -11961,7 +11945,9 @@ type_dependent_expression_p (tree expression)\n \t  if (TREE_CODE (expression) == IDENTIFIER_NODE)\n \t    return false;\n \t}\n-      \n+      if (TREE_CODE (expression) == SCOPE_REF)\n+\treturn false;\n+\n       if (TREE_CODE (expression) == BASELINK)\n \texpression = BASELINK_FUNCTIONS (expression);\n       if (TREE_CODE (expression) == TEMPLATE_ID_EXPR)\n@@ -11984,6 +11970,22 @@ type_dependent_expression_p (tree expression)\n       abort ();\n     }\n   \n+  if (TREE_CODE (expression) == SCOPE_REF\n+      && dependent_scope_ref_p (expression,\n+\t\t\t\ttype_dependent_expression_p))\n+    return true;\n+\n+  if (TREE_CODE (expression) == FUNCTION_DECL\n+      && DECL_LANG_SPECIFIC (expression)\n+      && DECL_TEMPLATE_INFO (expression)\n+      && (any_dependent_template_arguments_p\n+\t  (INNERMOST_TEMPLATE_ARGS (DECL_TI_ARGS (expression)))))\n+    return true;\n+\n+  if (TREE_CODE (expression) == TEMPLATE_DECL\n+      && !DECL_TEMPLATE_TEMPLATE_PARM_P (expression))\n+    return false;\n+\n   return (dependent_type_p (TREE_TYPE (expression)));\n }\n "}]}