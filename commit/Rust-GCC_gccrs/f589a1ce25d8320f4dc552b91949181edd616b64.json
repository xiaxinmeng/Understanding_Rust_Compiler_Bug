{"sha": "f589a1ce25d8320f4dc552b91949181edd616b64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU4OWExY2UyNWQ4MzIwZjRkYzU1MmI5MTk0OTE4MWVkZDYxNmI2NA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-02-03T22:47:35Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-02-03T22:47:35Z"}, "message": "PR tree-optimization/79327 - wrong code at -O2 and -fprintf-return-value\n\nPR tree-optimization/79327 - wrong code at -O2 and -fprintf-return-value\ngcc/ChangeLog:\n\t* gimple-ssa-sprintf.c (tree_digits): Avoid adding the base prefix\n\twhen precision has resulted in leading zeros.\n\t(format_integer): Adjust the likely counter to assume an unknown\n\targument that may be zero is non-zero.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Adjust.\n\t* gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-13.c: New test.\n\t* gcc/testsuite/gcc.dg/tree-ssa/pr79327-2.c: Ditto.\n\nFrom-SVN: r245173", "tree": {"sha": "1461f1a2bcdcc21ca51798e6997b3e9b269b555f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1461f1a2bcdcc21ca51798e6997b3e9b269b555f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f589a1ce25d8320f4dc552b91949181edd616b64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f589a1ce25d8320f4dc552b91949181edd616b64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f589a1ce25d8320f4dc552b91949181edd616b64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f589a1ce25d8320f4dc552b91949181edd616b64/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "77095a6ab13996a38b0a360d8ef9fc6cc6bc5234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77095a6ab13996a38b0a360d8ef9fc6cc6bc5234"}], "stats": {"total": 487, "additions": 483, "deletions": 4}, "files": [{"sha": "40993e5a0dd4cb9dd5eac13304734e4a7407db96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f589a1ce25d8320f4dc552b91949181edd616b64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f589a1ce25d8320f4dc552b91949181edd616b64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f589a1ce25d8320f4dc552b91949181edd616b64", "patch": "@@ -1,3 +1,11 @@\n+2017-02-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/79327\n+\t* gimple-ssa-sprintf.c (tree_digits): Avoid adding the base prefix\n+\twhen precision has resulted in leading zeros.\n+\t(format_integer): Adjust the likely counter to assume an unknown\n+\targument that may be zero is non-zero.\n+\n 2017-02-03  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/78689"}, {"sha": "e6cc31d1c4831ee49b40b0b4b7609eecc90f9ce0", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f589a1ce25d8320f4dc552b91949181edd616b64/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f589a1ce25d8320f4dc552b91949181edd616b64/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=f589a1ce25d8320f4dc552b91949181edd616b64", "patch": "@@ -762,7 +762,9 @@ tree_digits (tree x, int base, HOST_WIDE_INT prec, bool plus, bool prefix)\n \n   res += prec < ndigs ? ndigs : prec;\n \n-  if (prefix && absval)\n+  /* Adjust a non-zero value for the base prefix, either hexadecimal,\n+     or, unless precision has resulted in a leading zero, also octal.  */\n+  if (prefix && absval && (base == 16 || prec <= ndigs))\n     {\n       if (base == 8)\n \tres += 1;\n@@ -1230,6 +1232,10 @@ format_integer (const directive &dir, tree arg)\n        of the format string by returning [-1, -1].  */\n     return fmtresult ();\n \n+  /* True if the LIKELY counter should be adjusted upward from the MIN\n+     counter to account for arguments with unknown values.  */\n+  bool likely_adjust = false;\n+\n   fmtresult res;\n \n   /* Using either the range the non-constant argument is in, or its\n@@ -1259,6 +1265,14 @@ format_integer (const directive &dir, tree arg)\n \n \t  res.argmin = argmin;\n \t  res.argmax = argmax;\n+\n+\t  /* Set the adjustment for an argument whose range includes\n+\t     zero since that doesn't include the octal or hexadecimal\n+\t     base prefix.  */\n+\t  wide_int wzero = wi::zero (wi::get_precision (min));\n+\t  if (wi::le_p (min, wzero, SIGNED)\n+\t      && !wi::neg_p (max))\n+\t    likely_adjust = true;\n \t}\n       else if (range_type == VR_ANTI_RANGE)\n \t{\n@@ -1293,6 +1307,11 @@ format_integer (const directive &dir, tree arg)\n \n   if (!argmin)\n     {\n+      /* Set the adjustment for an argument whose range includes\n+\t zero since that doesn't include the octal or hexadecimal\n+\t base prefix.  */\n+      likely_adjust = true;\n+\n       if (TREE_CODE (argtype) == POINTER_TYPE)\n \t{\n \t  argmin = build_int_cst (pointer_sized_int_node, 0);\n@@ -1345,7 +1364,24 @@ format_integer (const directive &dir, tree arg)\n       res.range.max = MAX (max1, max2);\n     }\n \n-  res.range.likely = res.knownrange ? res.range.max : res.range.min;\n+  /* Add the adjustment for an argument whose range includes zero\n+     since it doesn't include the octal or hexadecimal base prefix.  */\n+  if (res.knownrange)\n+    res.range.likely = res.range.max;\n+  else\n+    {\n+      res.range.likely = res.range.min;\n+      if (likely_adjust && maybebase && base != 10)\n+\t{\n+\t  if (res.range.min == 1)\n+\t    res.range.likely += base == 8 ? 1 : 2;\n+\t  else if (res.range.min == 2\n+\t\t   && base == 16\n+\t\t   && (dir.width[0] == 2 || dir.prec[0] == 2))\n+\t    ++res.range.likely;\n+\t}\n+    }\n+\n   res.range.unlikely = res.range.max;\n   res.adjust_for_width_or_precision (dir.width, dirtype, base,\n \t\t\t\t     (sign | maybebase) + (base == 16));"}, {"sha": "73696e5b6cc2451d58a9f633016503e98b118c98", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f589a1ce25d8320f4dc552b91949181edd616b64/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f589a1ce25d8320f4dc552b91949181edd616b64/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f589a1ce25d8320f4dc552b91949181edd616b64", "patch": "@@ -1,3 +1,10 @@\n+2017-02-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/79327\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-1.c: Adjust.\n+\t* gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-13.c: New test.\n+\t* gcc/testsuite/gcc.dg/tree-ssa/pr79327-2.c: Ditto.\n+\n 2017-02-03  Jakub Jelinek  <jakub@redhat.com>\n \t    Martin Sebor  <msebor@redhat.com>\n "}, {"sha": "b4a9a6e61b629e40ccaf5ccdc9592226fd2cc78e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-1.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f589a1ce25d8320f4dc552b91949181edd616b64/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f589a1ce25d8320f4dc552b91949181edd616b64/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-1.c?ref=f589a1ce25d8320f4dc552b91949181edd616b64", "patch": "@@ -1151,8 +1151,16 @@ void test_sprintf_chk_hh_nonconst (int w, int p, int a)\n   T (2, \"% hhu\",        a);     /* { dg-warning \". . flag used with .%u.\" } */\n   T (2, \"% hhx\",        a);     /* { dg-warning \". . flag used with .%x.\" } */\n \n-  T (2, \"%#hho\",        a);\n-  T (2, \"%#hhx\",        a);\n+  /* The following results in between \"0\" and \"0377\" for -1.  Although\n+     the minimum output would fit, given the '#' flag the likely output\n+     (i.e., for any non-zero argument) includes a leading zero followed\n+     by one or more octal digits, which results in the terminating nul\n+     being written past the end.  Thus the \"may write\" warning.  */\n+  T (2, \"%#hho\",        a);     /* { dg-warning \"may write a terminating nul\" } */\n+  /* Similar to the above, but the likely output of the directive for\n+     a non-zero argument overflows.  Thus the \"writing X bytes\" (as\n+     opposed to \"may write\") warning.  */\n+  T (2, \"%#hhx\",        a);     /* { dg-warning \"writing between 1 and 4 bytes\" } */\n \n   T (3, \"%0hhd\",        a);\n   T (3, \"%1hhd\",        a);"}, {"sha": "27a997298671c6a5827f182d4efa4b24c6f0c00c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-13.c", "status": "added", "additions": 261, "deletions": 0, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f589a1ce25d8320f4dc552b91949181edd616b64/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f589a1ce25d8320f4dc552b91949181edd616b64/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-13.c?ref=f589a1ce25d8320f4dc552b91949181edd616b64", "patch": "@@ -0,0 +1,261 @@\n+/* { dg-do compile }\n+   { dg-options \"-O2 -Wall -Wformat-overflow=1 -ftrack-macro-expansion=0\" }\n+   { dg-require-effective-target int32plus } */\n+\n+typedef __SIZE_TYPE__  size_t;\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+#define INT_MAX __INT_MAX__\n+#define INT_MIN (-INT_MAX - 1)\n+\n+/* When debugging, define LINE to the line number of the test case to exercise\n+   and avoid exercising any of the others.  The buffer and objsize macros\n+   below make use of LINE to avoid warnings for other lines.  */\n+#ifndef LINE\n+# define LINE 0\n+#endif\n+\n+void sink (char*, char*);\n+\n+int dummy_sprintf (char*, const char*, ...);\n+\n+char buffer [256];\n+extern char *ptr;\n+\n+int int_range (int min, int max)\n+{\n+  extern int int_value (void);\n+  int n = int_value ();\n+  return n < min || max < n ? min : n;\n+}\n+\n+unsigned uint_range (unsigned min, unsigned max)\n+{\n+  extern unsigned uint_value (void);\n+  unsigned n = uint_value ();\n+  return n < min || max < n ? min : n;\n+}\n+\n+/* Evaluate to an array of SIZE characters when non-negative, or to\n+   a pointer to an unknown object otherwise.  */\n+#define buffer(size)\t\t\t\t\t\\\n+  ((0 <= size) ? buffer + sizeof buffer - (size) : ptr)\n+\n+/* Helper to expand function to either __builtin_f or dummy_f to\n+   make debugging GCC easy.  */\n+#define FUNC(f)\t\t\t\t\t\t\t\\\n+  ((!LINE || LINE == __LINE__) ? __builtin_ ## f : dummy_ ## f)\n+\n+/* Macro to verify that calls to __builtin_sprintf (i.e., with no size\n+   argument) issue diagnostics by correctly determining the size of\n+   the destination buffer.  */\n+#define T(size, ...)\t\t\t\t\t\t\\\n+  (FUNC (sprintf) (buffer (size),  __VA_ARGS__),\t\t\\\n+   sink (buffer, ptr))\n+\n+/* Return a signed integer in the range [MIN, MAX].  */\n+#define R(min, max)  int_range (min, max)\n+\n+/* Verify warnings and ranges for certain overflow.  */\n+void test_min_overflow (int i)\n+{\n+  T (0, \"%#hho\", i);            /* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (0, \"%#1hho\", i);           /* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (0, \"%#2hho\", i);           /* { dg-warning \"between 2 and 4 bytes\" } */\n+  T (0, \"%#3hho\", i);           /* { dg-warning \"between 3 and 4 bytes\" } */\n+  T (0, \"%#4hho\", i);           /* { dg-warning \"writing 4 bytes\" } */\n+  T (0, \"%#hho\", R (-1,  0));   /* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (0, \"%#1hho\", R (-1,  0));  /* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (0, \"%#2hho\", R (-1,  0));  /* { dg-warning \"between 2 and 4 bytes\" } */\n+  T (0, \"%#3hho\", R (-1,  0));  /* { dg-warning \"between 3 and 4 bytes\" } */\n+  T (0, \"%#4hho\", R (-1,  0));  /* { dg-warning \"writing 4 bytes\" } */\n+  T (0, \"%#hho\", R (-1,  1));   /* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (0, \"%#1hho\", R (-1,  1));  /* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (0, \"%#2hho\", R (-1,  1));  /* { dg-warning \"between 2 and 4 bytes\" } */\n+  T (0, \"%#3hho\", R (-1,  1));  /* { dg-warning \"between 3 and 4 bytes\" } */\n+  T (0, \"%#4hho\", R (-1,  1));  /* { dg-warning \"writing 4 bytes\" } */\n+  T (0, \"%#hho\", R ( 0,  1));   /* { dg-warning \"between 1 and 2 bytes\" } */\n+  T (0, \"%#1hho\", R ( 0,  1));  /* { dg-warning \"between 1 and 2 bytes\" } */\n+  T (0, \"%#2hho\", R ( 0,  1));  /* { dg-warning \"writing 2 bytes\" } */\n+  T (0, \"%#3hho\", R ( 0,  1));  /* { dg-warning \"writing 3 bytes\" } */\n+  T (0, \"%#4hho\", R ( 0,  1));  /* { dg-warning \"writing 4 bytes\" } */\n+  T (0, \"%#hho\", R ( 1,  2));   /* { dg-warning \"writing 2 bytes\" } */\n+  T (0, \"%#1hho\", R ( 1,  2));  /* { dg-warning \"writing 2 bytes\" } */\n+  T (0, \"%#2hho\", R ( 1,  2));  /* { dg-warning \"writing 2 bytes\" } */\n+  T (0, \"%#3hho\", R ( 1,  2));  /* { dg-warning \"writing 3 bytes\" } */\n+  T (0, \"%#4hho\", R ( 1,  2));  /* { dg-warning \"writing 4 bytes\" } */\n+\n+  T (0, \"%#ho\",  i);            /* { dg-warning \"between 1 and 7 bytes\" } */\n+  T (0, \"%#.*ho\",               /* { dg-warning \"between 1 and 7 bytes\" } */\n+     R (0, 2), i);\n+  T (0, \"%#.*ho\",               /* { dg-warning \"between 1 and 7 bytes\" } */\n+     R (1, 2), i);\n+  T (0, \"%#.*ho\",               /* { dg-warning \"between 2 and 7 bytes\" } */\n+     R (2, 3), i);\n+  T (0, \"%#.*ho\",               /* { dg-warning \"between 3 and 7 bytes\" } */\n+     R (3, 4), i);\n+  T (0, \"%#.*ho\",               /* { dg-warning \"between 7 and 8 bytes\" } */\n+     R (7, 8), i);\n+\n+  T (0, \"%#ho\",  R (-1,  0));   /* { dg-warning \"between 1 and 7 bytes\" } */\n+  T (0, \"%#ho\",  R (-1,  1));   /* { dg-warning \"between 1 and 7 bytes\" } */\n+  T (0, \"%#ho\",  R ( 0,  1));   /* { dg-warning \"between 1 and 2 bytes\" } */\n+  T (0, \"%#ho\",  R ( 1,  2));   /* { dg-warning \"writing 2 bytes\" } */\n+\n+  T (0, \"%#o\",   i);            /* { dg-warning \"between 1 and 12 bytes\" } */\n+  T (0, \"%#o\",   R (-1,  0));   /* { dg-warning \"between 1 and 12 bytes\" } */\n+  T (0, \"%#o\",   R (-1,  1));   /* { dg-warning \"between 1 and 12 bytes\" } */\n+  T (0, \"%#o\",   R ( 0,  1));   /* { dg-warning \"between 1 and 2 bytes\" } */\n+  T (0, \"%#o\",   R ( 1,  2));   /* { dg-warning \"writing 2 bytes\" } */\n+\n+  T (0, \"%#hhx\", i);            /* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (0, \"%#.*hhx\",              /* { dg-warning \"writing up to 4 bytes\" } */\n+     R (0, 2), i);\n+  T (0, \"%#.*hhx\",              /* { dg-warning \"between 1 and 4 bytes\" } */\n+     R (1, 2), i);\n+  T (0, \"%#.*hhx\",              /* { dg-warning \"between 2 and 5 bytes\" } */\n+     R (2, 3), i);\n+  T (0, \"%#.*hhx\",              /* { dg-warning \"between 3 and 6 bytes\" } */\n+     R (3, 4), i);\n+\n+  T (0, \"%#hhx\", R (-1,  0));   /* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (0, \"%#hhx\", R (-1,  1));   /* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (0, \"%#hhx\", R ( 0,  1));   /* { dg-warning \"between 1 and 3 bytes\" } */\n+  T (0, \"%#hhx\", R ( 1,  2));   /* { dg-warning \"writing 3 bytes\" } */\n+\n+  T (0, \"%#hx\", i);             /* { dg-warning \"between 1 and 6 bytes\" } */\n+  T (0, \"%#hx\", R (-1,  0));    /* { dg-warning \"between 1 and 6 bytes\" } */\n+  T (0, \"%#hx\", R (-1,  1));    /* { dg-warning \"between 1 and 6 bytes\" } */\n+  T (0, \"%#hx\", R ( 0,  1));    /* { dg-warning \"between 1 and 3 bytes\" } */\n+  T (0, \"%#hx\", R ( 1,  2));    /* { dg-warning \"writing 3 bytes\" } */\n+\n+  T (0, \"%#x\",   i);            /* { dg-warning \"between 1 and 10 bytes\" } */\n+  T (0, \"%#x\",   R (-1,  0));   /* { dg-warning \"between 1 and 10 bytes\" } */\n+  T (0, \"%#x\",   R (-1,  1));   /* { dg-warning \"between 1 and 10 bytes\" } */\n+  T (0, \"%#x\",   R ( 0,  1));   /* { dg-warning \"between 1 and 3 bytes\" } */\n+  T (0, \"%#x\",   R ( 1,  2));   /* { dg-warning \"writing 3 bytes\" } */\n+}\n+\n+/* Verify warnings and ranges for likely overflow.  */\n+void test_likely_overflow (int i)\n+{\n+  T (2, \"%#hho\", i);          /* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#1hho\", i);         /* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#2hho\", i);         /* { dg-warning \"writing a terminating nul\" } */\n+  T (2, \"%#3hho\", i);         /* { dg-warning \"between 3 and 4 bytes\" } */\n+  T (2, \"%#4hho\", i);         /* { dg-warning \"writing 4 bytes\" } */\n+  T (2, \"%#hho\", R (-1,  0)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#1hho\", R (-1,  0));/* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#2hho\", R (-1,  0));/* { dg-warning \"writing a terminating nul\" } */\n+  T (2, \"%#3hho\", R (-1,  0));/* { dg-warning \"between 3 and 4 bytes\" } */\n+  T (2, \"%#4hho\", R (-1,  0));/* { dg-warning \"writing 4 bytes\" } */\n+  T (2, \"%#hho\", R (-1,  1)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#1hho\", R (-1,  1));/* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#2hho\", R (-1,  1));/* { dg-warning \"writing a terminating nul\" } */\n+  T (2, \"%#3hho\", R (-1,  1));/* { dg-warning \"between 3 and 4 bytes\" } */\n+  T (2, \"%#4hho\", R (-1,  1));/* { dg-warning \"writing 4 bytes\" } */\n+  T (2, \"%#hho\", R ( 0,  1)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#1hho\", R ( 0,  1));/* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#2hho\", R ( 0,  1));/* { dg-warning \"writing a terminating nul\" } */\n+  T (2, \"%#3hho\", R ( 0,  1));/* { dg-warning \"writing 3 bytes\" } */\n+  T (2, \"%#4hho\", R ( 0,  1));/* { dg-warning \"writing 4 bytes\" } */\n+  T (2, \"%#hho\", R ( 1,  2)); /* { dg-warning \"writing a terminating nul\" } */\n+  T (2, \"%#1hho\", R ( 1,  2));/* { dg-warning \"writing a terminating nul\" } */\n+  T (2, \"%#2hho\", R ( 1,  2));/* { dg-warning \"writing a terminating nul\" } */\n+  T (2, \"%#3hho\", R ( 1,  2));/* { dg-warning \"writing 3 bytes\" } */\n+  T (2, \"%#4hho\", R ( 1,  2));/* { dg-warning \"writing 4 bytes\" } */\n+\n+  T (2, \"%#ho\",  i);          /* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#ho\",  R (-1,  0)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#ho\",  R (-1,  1)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#ho\",  R ( 0,  1)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#ho\",  R ( 1,  2)); /* { dg-warning \"writing a terminating nul\" } */\n+\n+  T (2, \"%#o\",   i);          /* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#o\",   R (-1,  0)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#o\",   R (-1,  1)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#o\",   R ( 0,  1)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (2, \"%#o\",   R ( 1,  2)); /* { dg-warning \"writing a terminating nul\" } */\n+\n+  T (2, \"%#hhx\", i);          /* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (2, \"%#1hhx\", i);         /* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (2, \"%#2hhx\", i);         /* { dg-warning \"between 2 and 4 bytes\" } */\n+  T (2, \"%#3hhx\", i);         /* { dg-warning \"between 3 and 4 bytes\" } */\n+  T (2, \"%#4hhx\", i);         /* { dg-warning \"writing 4 bytes\" } */\n+  T (2, \"%#1hhx\", R (-1,  0));/* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (2, \"%#2hhx\", R (-1,  0));/* { dg-warning \"between 2 and 4 bytes\" } */\n+  T (2, \"%#3hhx\", R (-1,  0));/* { dg-warning \"between 3 and 4 bytes\" } */\n+  T (2, \"%#4hhx\", R (-1,  0));/* { dg-warning \"writing 4 bytes\" } */\n+  T (2, \"%#hhx\", R (-1,  0)); /* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (2, \"%#1hhx\", R (-1,  0));/* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (2, \"%#2hhx\", R (-1,  0));/* { dg-warning \"between 2 and 4 bytes\" } */\n+  T (2, \"%#3hhx\", R (-1,  0));/* { dg-warning \"between 3 and 4 bytes\" } */\n+  T (2, \"%#4hhx\", R (-1,  0));/* { dg-warning \"writing 4 bytes\" } */\n+  T (2, \"%#hhx\", R (-1,  1)); /* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (2, \"%#1hhx\", R (-1,  1));/* { dg-warning \"between 1 and 4 bytes\" } */\n+  T (2, \"%#2hhx\", R (-1,  1));/* { dg-warning \"between 2 and 4 bytes\" } */\n+  T (2, \"%#3hhx\", R (-1,  1));/* { dg-warning \"between 3 and 4 bytes\" } */\n+  T (2, \"%#4hhx\", R (-1,  1));/* { dg-warning \"writing 4 bytes\" } */\n+  T (2, \"%#hhx\", R ( 0,  1)); /* { dg-warning \"between 1 and 3 bytes\" } */\n+  T (2, \"%#1hhx\", R ( 0,  1));/* { dg-warning \"between 1 and 3 bytes\" } */\n+  T (2, \"%#2hhx\", R ( 0,  1));/* { dg-warning \"between 2 and 3 bytes\" } */\n+  T (2, \"%#3hhx\", R ( 0,  1));/* { dg-warning \"writing 3 bytes\" } */\n+  T (2, \"%#4hhx\", R ( 0,  1));/* { dg-warning \"writing 4 bytes\" } */\n+  T (2, \"%#hhx\", R ( 1,  2)); /* { dg-warning \"writing 3 bytes\" } */\n+  T (2, \"%#1hhx\", R ( 1,  2));/* { dg-warning \"writing 3 bytes\" } */\n+  T (2, \"%#2hhx\", R ( 1,  2));/* { dg-warning \"writing 3 bytes\" } */\n+  T (2, \"%#3hhx\", R ( 1,  2));/* { dg-warning \"writing 3 bytes\" } */\n+  T (2, \"%#4hhx\", R ( 1,  2));/* { dg-warning \"writing 4 bytes\" } */\n+\n+  T (2, \"%#hx\", i);           /* { dg-warning \"between 1 and 6 bytes\" } */\n+  T (2, \"%#hx\", R (-1,  0));  /* { dg-warning \"between 1 and 6 bytes\" } */\n+  T (2, \"%#hx\", R (-1,  1));  /* { dg-warning \"between 1 and 6 bytes\" } */\n+  T (2, \"%#hx\", R ( 0,  1));  /* { dg-warning \"between 1 and 3 bytes\" } */\n+  T (2, \"%#hx\", R ( 1,  2));  /* { dg-warning \"writing 3 bytes\" } */\n+\n+  T (2, \"%#x\",   i);          /* { dg-warning \"between 1 and 10 bytes\" } */\n+  T (2, \"%#x\",   R (-1,  0)); /* { dg-warning \"between 1 and 10 bytes\" } */\n+  T (2, \"%#x\",   R (-1,  1)); /* { dg-warning \"between 1 and 10 bytes\" } */\n+  T (2, \"%#x\",   R ( 0,  1)); /* { dg-warning \"between 1 and 3 bytes\" } */\n+  T (2, \"%#x\",   R ( 1,  2)); /* { dg-warning \"writing 3 bytes\" } */\n+}\n+\n+/* Verify warnings likely overflow due to the terminating nul.  */\n+void test_likely_nul_overflow (int i)\n+{\n+  T (3, \"%#hho\", i);\n+  T (3, \"%#hho\", R (-1,  0));\n+  T (3, \"%#hho\", R (-1,  1));\n+  T (3, \"%#hho\", R ( 0,  1));\n+  T (3, \"%#hho\", R ( 1,  2));\n+\n+  T (3, \"%#ho\",  i);\n+  T (3, \"%#ho\",  R (-1,  0));\n+  T (3, \"%#ho\",  R (-1,  1));\n+  T (3, \"%#ho\",  R ( 0,  1));\n+  T (3, \"%#ho\",  R ( 1,  2));\n+\n+  T (3, \"%#o\",   i);\n+  T (3, \"%#o\",   R (-1,  0));\n+  T (3, \"%#o\",   R (-1,  1));\n+  T (3, \"%#o\",   R ( 0,  1));\n+  T (3, \"%#o\",   R ( 1,  2));\n+\n+  T (3, \"%#hhx\", i);          /* { dg-warning \"may write a terminating nul\" } */\n+  T (3, \"%#hhx\", R (-1,  0)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (3, \"%#hhx\", R (-1,  1)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (3, \"%#hhx\", R ( 0,  1)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (3, \"%#hhx\", R ( 1,  2)); /* { dg-warning \"writing a terminating nul\" } */\n+\n+  T (3, \"%#hx\", i);           /* { dg-warning \"may write a terminating nul\" } */\n+  T (3, \"%#hx\", R (-1,  0));  /* { dg-warning \"may write a terminating nul\" } */\n+  T (3, \"%#hx\", R (-1,  1));  /* { dg-warning \"may write a terminating nul\" } */\n+  T (3, \"%#hx\", R ( 0,  1));  /* { dg-warning \"may write a terminating nul\" } */\n+  T (3, \"%#hx\", R ( 1,  2));  /* { dg-warning \"writing a terminating nul\" } */\n+\n+  T (3, \"%#x\",   i);          /* { dg-warning \"may write a terminating nul\" } */\n+  T (3, \"%#x\",   R (-1,  0)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (3, \"%#x\",   R (-1,  1)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (3, \"%#x\",   R ( 0,  1)); /* { dg-warning \"may write a terminating nul\" } */\n+  T (3, \"%#x\",   R ( 1,  2)); /* { dg-warning \"writing a terminating nul\" } */\n+}"}, {"sha": "f72e4cc353c95a077b7232194a28aa85fe79e33d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr79327-2.c", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f589a1ce25d8320f4dc552b91949181edd616b64/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79327-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f589a1ce25d8320f4dc552b91949181edd616b64/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79327-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79327-2.c?ref=f589a1ce25d8320f4dc552b91949181edd616b64", "patch": "@@ -0,0 +1,159 @@\n+/* PR tree-optimization/79327 - wrong code at -O2 and -fprintf-return-value\n+   { dg-compile }\n+   { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#define CAT(s, n)   s ## n\n+#define FAIL(line)  CAT (failure_on_line_, line)\n+\n+/* Emit a call to a function named failure_on_line_NNN when EXPR is false.  */\n+#define ASSERT(expr)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    extern void FAIL (__LINE__)(void);\t\t\\\n+    if (!(expr)) FAIL (__LINE__)();\t\t\\\n+  } while (0)\n+\n+#define KEEP(line)  CAT (keep_call_on_line_, line)\n+\n+/* Emit a call to a function named keep_call_on_line_NNN when EXPR is true.\n+   Used to verify that the expression need not be the only one that holds.  */\n+#define ASSERT_MAYBE(expr)\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    extern void KEEP (__LINE__)(void);\t\t\\\n+    if (expr) KEEP (__LINE__)();\t\t\\\n+  } while (0)\n+\n+void test_hho_cst (void)\n+{\n+  ASSERT (1 == __builtin_snprintf (0, 0, \"%#.1hho\", 0));\n+  ASSERT (2 == __builtin_snprintf (0, 0, \"%#.2hho\", 0));\n+\n+  ASSERT (2 == __builtin_snprintf (0, 0, \"%#.1hho\", 1));\n+  ASSERT (2 == __builtin_snprintf (0, 0, \"%#.2hho\", 1));\n+  ASSERT (3 == __builtin_snprintf (0, 0, \"%#.3hho\", 1));\n+}\n+\n+int test_hho_var (int i)\n+{\n+  int n = __builtin_snprintf (0, 0, \"%#hho\", i);\n+\n+  ASSERT (0 < n && n < 5);\n+\n+  ASSERT_MAYBE (1 == n);\n+  ASSERT_MAYBE (2 == n);\n+  ASSERT_MAYBE (3 == n);\n+  ASSERT_MAYBE (4 == n);\n+\n+  return n;\n+}\n+\n+int test_ho_var (int i)\n+{\n+  int n = __builtin_snprintf (0, 0, \"%#ho\", i);\n+\n+  ASSERT (0 < n && n < 8);\n+\n+  ASSERT_MAYBE (1 == n);\n+  ASSERT_MAYBE (2 == n);\n+  ASSERT_MAYBE (3 == n);\n+  ASSERT_MAYBE (4 == n);\n+  ASSERT_MAYBE (5 == n);\n+  ASSERT_MAYBE (6 == n);\n+  ASSERT_MAYBE (7 == n);\n+\n+  return n;\n+}\n+\n+int test_o_var (int i)\n+{\n+  int n = __builtin_snprintf (0, 0, \"%#o\", i);\n+\n+  ASSERT (0 < n && n < 13);\n+\n+  ASSERT_MAYBE (1 == n);\n+  ASSERT_MAYBE (2 == n);\n+  ASSERT_MAYBE (3 == n);\n+  ASSERT_MAYBE (4 == n);\n+  ASSERT_MAYBE (5 == n);\n+  ASSERT_MAYBE (6 == n);\n+  ASSERT_MAYBE (7 == n);\n+  ASSERT_MAYBE (8 == n);\n+  ASSERT_MAYBE (9 == n);\n+  ASSERT_MAYBE (10 == n);\n+  ASSERT_MAYBE (11 == n);\n+  ASSERT_MAYBE (12 == n);\n+\n+  return n;\n+}\n+\n+void test_hhx_cst (void)\n+{\n+  ASSERT (1 == __builtin_snprintf (0, 0, \"%#.1hhx\", 0));\n+  ASSERT (2 == __builtin_snprintf (0, 0, \"%#.2hhx\", 0));\n+\n+  ASSERT (3 == __builtin_snprintf (0, 0, \"%#.1hhx\", 1));\n+  ASSERT (4 == __builtin_snprintf (0, 0, \"%#.2hhx\", 1));\n+  ASSERT (5 == __builtin_snprintf (0, 0, \"%#.3hhx\", 1));\n+}\n+\n+int test_hhx_var (int i)\n+{\n+  int n = __builtin_snprintf (0, 0, \"%#hhx\", i);\n+\n+  ASSERT (0 < n && n < 5);\n+\n+  ASSERT_MAYBE (1 == n);\n+  ASSERT_MAYBE (2 == n);\n+  ASSERT_MAYBE (3 == n);\n+  ASSERT_MAYBE (4 == n);\n+\n+  return n;\n+}\n+\n+void test_hx_cst (void)\n+{\n+  ASSERT (1 == __builtin_snprintf (0, 0, \"%#.1hx\", 0));\n+  ASSERT (2 == __builtin_snprintf (0, 0, \"%#.2hx\", 0));\n+\n+  ASSERT (3 == __builtin_snprintf (0, 0, \"%#.1hx\", 1));\n+  ASSERT (4 == __builtin_snprintf (0, 0, \"%#.2hx\", 1));\n+  ASSERT (5 == __builtin_snprintf (0, 0, \"%#.3hx\", 1));\n+}\n+\n+int test_hx_var (int i)\n+{\n+  int n = __builtin_snprintf (0, 0, \"%#hx\", i);\n+\n+  ASSERT (0 < n && n < 7);\n+\n+  ASSERT_MAYBE (1 == n);\n+  ASSERT_MAYBE (2 == n);\n+  ASSERT_MAYBE (3 == n);\n+  ASSERT_MAYBE (4 == n);\n+  ASSERT_MAYBE (5 == n);\n+  ASSERT_MAYBE (6 == n);\n+\n+  return n;\n+}\n+\n+int test_x_var (int i)\n+{\n+  int n = __builtin_snprintf (0, 0, \"%#x\", i);\n+\n+  ASSERT (0 < n && n < 11);\n+\n+  ASSERT_MAYBE (1 == n);\n+  ASSERT_MAYBE (2 == n);\n+  ASSERT_MAYBE (3 == n);\n+  ASSERT_MAYBE (4 == n);\n+  ASSERT_MAYBE (5 == n);\n+  ASSERT_MAYBE (6 == n);\n+  ASSERT_MAYBE (7 == n);\n+  ASSERT_MAYBE (8 == n);\n+  ASSERT_MAYBE (9 == n);\n+  ASSERT_MAYBE (10 == n);\n+\n+  return n;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"failure_on_line\" \"optimized\"} }\n+   { dg-final { scan-tree-dump-times \"keep_call_on_line\" 43 \"optimized\"} } */"}]}