{"sha": "fd9df055b2797a204531db1f846f7ef194bb6d0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5ZGYwNTViMjc5N2EyMDQ1MzFkYjFmODQ2ZjdlZjE5NGJiNmQwYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-24T19:33:52Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-24T19:33:52Z"}, "message": "compiler: Correct type of expressions involving character constants.\n\nFrom-SVN: r183490", "tree": {"sha": "cf4e1c1f6f1ee600592085723bfedbb46c43bf61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf4e1c1f6f1ee600592085723bfedbb46c43bf61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd9df055b2797a204531db1f846f7ef194bb6d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9df055b2797a204531db1f846f7ef194bb6d0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9df055b2797a204531db1f846f7ef194bb6d0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9df055b2797a204531db1f846f7ef194bb6d0c/comments", "author": null, "committer": null, "parents": [{"sha": "2c49569ecea56dc875035dfaf1984f4746c9c46e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c49569ecea56dc875035dfaf1984f4746c9c46e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c49569ecea56dc875035dfaf1984f4746c9c46e"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "423df9c7519b582adfd7770d3e8f255308d2e62c", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9df055b2797a204531db1f846f7ef194bb6d0c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9df055b2797a204531db1f846f7ef194bb6d0c/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=fd9df055b2797a204531db1f846f7ef194bb6d0c", "patch": "@@ -5556,7 +5556,9 @@ Binary_expression::do_lower(Gogo* gogo, Named_object*,\n \tExpression* ret = NULL;\n \tif (left_type != right_type\n \t    && left_type != NULL\n+\t    && !left_type->is_abstract()\n \t    && right_type != NULL\n+\t    && !right_type->is_abstract()\n \t    && left_type->base() != right_type->base()\n \t    && op != OPERATOR_LSHIFT\n \t    && op != OPERATOR_RSHIFT)\n@@ -5608,7 +5610,27 @@ Binary_expression::do_lower(Gogo* gogo, Named_object*,\n \t\t  type = right_type;\n \t\telse\n \t\t  type = left_type;\n-\t\tret = Expression::make_integer(&val, type, location);\n+\n+\t\tbool is_character = false;\n+\t\tif (type == NULL)\n+\t\t  {\n+\t\t    Type* t = this->left_->type();\n+\t\t    if (t->integer_type() != NULL\n+\t\t\t&& t->integer_type()->is_rune())\n+\t\t      is_character = true;\n+\t\t    else if (op != OPERATOR_LSHIFT && op != OPERATOR_RSHIFT)\n+\t\t      {\n+\t\t\tt = this->right_->type();\n+\t\t\tif (t->integer_type() != NULL\n+\t\t\t    && t->integer_type()->is_rune())\n+\t\t\t  is_character = true;\n+\t\t      }\n+\t\t  }\n+\n+\t\tif (is_character)\n+\t\t  ret = Expression::make_character(&val, type, location);\n+\t\telse\n+\t\t  ret = Expression::make_integer(&val, type, location);\n \t      }\n \n \t    mpz_clear(val);\n@@ -6252,6 +6274,12 @@ Binary_expression::do_type()\n \t  return left_type;\n \telse if (right_type->float_type() != NULL)\n \t  return right_type;\n+\telse if (left_type->integer_type() != NULL\n+\t\t && left_type->integer_type()->is_rune())\n+\t  return left_type;\n+\telse if (right_type->integer_type() != NULL\n+\t\t && right_type->integer_type()->is_rune())\n+\t  return right_type;\n \telse\n \t  return left_type;\n       }"}]}