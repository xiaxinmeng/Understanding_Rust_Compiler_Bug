{"sha": "78e9cfe1e29902a887853142a5e417500fe90fc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlOWNmZTFlMjk5MDJhODg3ODUzMTQyYTVlNDE3NTAwZmU5MGZjOA==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@gmail.com", "date": "2020-12-11T16:27:21Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2020-12-11T16:29:56Z"}, "message": "arc: Update ARC700 cache hazard detection.\n\nReplace/update ARC700 cache hazard detection. The next situations are\nhandled:\n\n- There are 2 stores back2back, then 3 loads in next 3 or 4 instructions.\n\n    if 3 loads in 3 instructions then we insert 2 nops after stores.\n    if 3 loads in 4 instructions then we insert 1 nop after stores\n\n- 2 back to back stores, followed by at least 3 loads in next 4 instructions.\n        st st ld ld ld ##\n        st st ## ld ld ld\n        st st ld ## ld ld\n        st st ld ld ## ld\n        ## - any instruction\n\n- store between non-store instructions, followed by 3 loads\n        $$ st SS ld ld ld\n        $$ - non-store instruction, even load.\n\ngcc/\n2020-12-11  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (arc_active_insn): Ignore all non essential\n\tinstructions when getting the next active instruction.\n\t(check_store_cacheline_hazard): Update.\n\t(workaround_arc_anomaly): Remove obsolete cache hazard code.\n\nSigned-off-by: Claudiu Zissulescu <claziss@gmail.com>", "tree": {"sha": "36ae57bb66f481e7b2737b8ca284f665fa95e37a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36ae57bb66f481e7b2737b8ca284f665fa95e37a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78e9cfe1e29902a887853142a5e417500fe90fc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e9cfe1e29902a887853142a5e417500fe90fc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e9cfe1e29902a887853142a5e417500fe90fc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e9cfe1e29902a887853142a5e417500fe90fc8/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a412be00c49406889a84791935194fc54a89ff79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a412be00c49406889a84791935194fc54a89ff79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a412be00c49406889a84791935194fc54a89ff79"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "6a9e1fbf82434cff051879ca229c21317271c9d7", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e9cfe1e29902a887853142a5e417500fe90fc8/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e9cfe1e29902a887853142a5e417500fe90fc8/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=78e9cfe1e29902a887853142a5e417500fe90fc8", "patch": "@@ -7663,11 +7663,18 @@ arc_invalid_within_doloop (const rtx_insn *insn)\n static rtx_insn *\n arc_active_insn (rtx_insn *insn)\n {\n-  rtx_insn *nxt = next_active_insn (insn);\n-\n-  if (nxt && GET_CODE (PATTERN (nxt)) == ASM_INPUT)\n-    nxt = next_active_insn (nxt);\n-  return nxt;\n+  while (insn)\n+    {\n+      insn = NEXT_INSN (insn);\n+      if (insn == 0\n+\t  || (active_insn_p (insn)\n+\t      && NONDEBUG_INSN_P (insn)\n+\t      && !NOTE_P (insn)\n+\t      && GET_CODE (PATTERN (insn)) != UNSPEC_VOLATILE\n+\t      && GET_CODE (PATTERN (insn)) != PARALLEL))\n+\tbreak;\n+    }\n+  return insn;\n }\n \n /* Search for a sequence made out of two stores and a given number of\n@@ -7686,11 +7693,10 @@ check_store_cacheline_hazard (void)\n       if (!succ0)\n \treturn;\n \n-      if (!single_set (insn) || !single_set (succ0))\n+      if (!single_set (insn))\n \tcontinue;\n \n-      if ((get_attr_type (insn) != TYPE_STORE)\n-\t  || (get_attr_type (succ0) != TYPE_STORE))\n+      if ((get_attr_type (insn) != TYPE_STORE))\n \tcontinue;\n \n       /* Found at least two consecutive stores.  Goto the end of the\n@@ -7699,6 +7705,9 @@ check_store_cacheline_hazard (void)\n \tif (!single_set (insn1) || get_attr_type (insn1) != TYPE_STORE)\n \t  break;\n \n+      /* Save were we are.  */\n+      succ0 = insn1;\n+\n       /* Now, check the next two instructions for the following cases:\n          1. next instruction is a LD => insert 2 nops between store\n \t    sequence and load.\n@@ -7730,9 +7739,13 @@ check_store_cacheline_hazard (void)\n \t    }\n \t}\n \n-      insn = insn1;\n       if (found)\n-\tfound = false;\n+\t{\n+\t  insn = insn1;\n+\t  found = false;\n+\t}\n+      else\n+\tinsn = succ0;\n     }\n }\n \n@@ -7807,7 +7820,6 @@ static void\n workaround_arc_anomaly (void)\n {\n   rtx_insn *insn, *succ0;\n-  rtx_insn *succ1;\n \n   /* For any architecture: call arc_hazard here.  */\n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n@@ -7826,24 +7838,6 @@ workaround_arc_anomaly (void)\n      nops between any sequence of stores and a load.  */\n   if (arc_tune != ARC_TUNE_ARC7XX)\n     check_store_cacheline_hazard ();\n-\n-  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    {\n-      succ0 = next_real_insn (insn);\n-      if (arc_store_addr_hazard_internal_p (insn, succ0))\n-\t{\n-\t  emit_insn_after (gen_nopv (), insn);\n-\t  emit_insn_after (gen_nopv (), insn);\n-\t  continue;\n-\t}\n-\n-      /* Avoid adding nops if the instruction between the ST and LD is\n-\t a call or jump.  */\n-      succ1 = next_real_insn (succ0);\n-      if (succ0 && !JUMP_P (succ0) && !CALL_P (succ0)\n-\t  && arc_store_addr_hazard_internal_p (insn, succ1))\n-\temit_insn_after (gen_nopv (), insn);\n-    }\n }\n \n /* A callback for the hw-doloop pass.  Called when a loop we have discovered"}]}