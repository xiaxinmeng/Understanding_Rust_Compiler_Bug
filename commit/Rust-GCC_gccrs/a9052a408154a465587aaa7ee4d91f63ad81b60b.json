{"sha": "a9052a408154a465587aaa7ee4d91f63ad81b60b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkwNTJhNDA4MTU0YTQ2NTU4N2FhYTdlZTRkOTFmNjNhZDgxYjYwYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:22:42Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:22:42Z"}, "message": "cse.c (change_cc_mode_args): Delete.\n\ngcc/\n\t* cse.c (change_cc_mode_args): Delete.\n\t(cse_change_cc_mode): Turn from being a for_each_rtx callback to being\n\ta function that examines each subrtx itself.  Take the fields of\n\tchange_cc_mode_args as argument and return void.\n\t(cse_change_cc_mode_insn): Update calls accordingly.\n\nFrom-SVN: r214631", "tree": {"sha": "bd516acaee324d9eab0e6931ae31c647040bbb73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd516acaee324d9eab0e6931ae31c647040bbb73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9052a408154a465587aaa7ee4d91f63ad81b60b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9052a408154a465587aaa7ee4d91f63ad81b60b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9052a408154a465587aaa7ee4d91f63ad81b60b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9052a408154a465587aaa7ee4d91f63ad81b60b/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5b9bc172ad104905b427d45713125314ff33a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b9bc172ad104905b427d45713125314ff33a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b9bc172ad104905b427d45713125314ff33a80"}], "stats": {"total": 58, "additions": 27, "deletions": 31}, "files": [{"sha": "5d733dd4436e6a0129dbdc2018dc169ec50e70e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9052a408154a465587aaa7ee4d91f63ad81b60b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9052a408154a465587aaa7ee4d91f63ad81b60b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9052a408154a465587aaa7ee4d91f63ad81b60b", "patch": "@@ -1,3 +1,11 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* cse.c (change_cc_mode_args): Delete.\n+\t(cse_change_cc_mode): Turn from being a for_each_rtx callback to being\n+\ta function that examines each subrtx itself.  Take the fields of\n+\tchange_cc_mode_args as argument and return void.\n+\t(cse_change_cc_mode_insn): Update calls accordingly.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* cse.c (is_dead_reg): Change argument to const_rtx."}, {"sha": "866b0ee5bc793716b10ac2909cc42ee0c1494fc7", "filename": "gcc/cse.c", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9052a408154a465587aaa7ee4d91f63ad81b60b/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9052a408154a465587aaa7ee4d91f63ad81b60b/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=a9052a408154a465587aaa7ee4d91f63ad81b60b", "patch": "@@ -255,14 +255,6 @@ struct qty_table_elem\n /* The table of all qtys, indexed by qty number.  */\n static struct qty_table_elem *qty_table;\n \n-/* Structure used to pass arguments via for_each_rtx to function\n-   cse_change_cc_mode.  */\n-struct change_cc_mode_args\n-{\n-  rtx_insn *insn;\n-  rtx newreg;\n-};\n-\n #ifdef HAVE_cc0\n /* For machines that have a CC0, we do not record its value in the hash\n    table since its use is guaranteed to be the insn immediately following\n@@ -603,7 +595,6 @@ static struct cse_reg_info * get_cse_reg_info (unsigned int regno);\n static void flush_hash_table (void);\n static bool insn_live_p (rtx_insn *, int *);\n static bool set_live_p (rtx, rtx_insn *, int *);\n-static int cse_change_cc_mode (rtx *, void *);\n static void cse_change_cc_mode_insn (rtx_insn *, rtx);\n static void cse_change_cc_mode_insns (rtx_insn *, rtx_insn *, rtx);\n static enum machine_mode cse_cc_succs (basic_block, basic_block, rtx, rtx,\n@@ -7070,26 +7061,26 @@ delete_trivially_dead_insns (rtx_insn *insns, int nreg)\n   return ndead;\n }\n \n-/* This function is called via for_each_rtx.  The argument, NEWREG, is\n-   a condition code register with the desired mode.  If we are looking\n-   at the same register in a different mode, replace it with\n-   NEWREG.  */\n+/* If LOC contains references to NEWREG in a different mode, change them\n+   to use NEWREG instead.  */\n \n-static int\n-cse_change_cc_mode (rtx *loc, void *data)\n+static void\n+cse_change_cc_mode (subrtx_ptr_iterator::array_type &array,\n+\t\t    rtx *loc, rtx insn, rtx newreg)\n {\n-  struct change_cc_mode_args* args = (struct change_cc_mode_args*)data;\n-\n-  if (*loc\n-      && REG_P (*loc)\n-      && REGNO (*loc) == REGNO (args->newreg)\n-      && GET_MODE (*loc) != GET_MODE (args->newreg))\n+  FOR_EACH_SUBRTX_PTR (iter, array, loc, NONCONST)\n     {\n-      validate_change (args->insn, loc, args->newreg, 1);\n-\n-      return -1;\n+      rtx *loc = *iter;\n+      rtx x = *loc;\n+      if (x\n+\t  && REG_P (x)\n+\t  && REGNO (x) == REGNO (newreg)\n+\t  && GET_MODE (x) != GET_MODE (newreg))\n+\t{\n+\t  validate_change (insn, loc, newreg, 1);\n+\t  iter.skip_subrtxes ();\n+\t}\n     }\n-  return 0;\n }\n \n /* Change the mode of any reference to the register REGNO (NEWREG) to\n@@ -7098,17 +7089,14 @@ cse_change_cc_mode (rtx *loc, void *data)\n static void\n cse_change_cc_mode_insn (rtx_insn *insn, rtx newreg)\n {\n-  struct change_cc_mode_args args;\n   int success;\n \n   if (!INSN_P (insn))\n     return;\n \n-  args.insn = insn;\n-  args.newreg = newreg;\n-\n-  for_each_rtx (&PATTERN (insn), cse_change_cc_mode, &args);\n-  for_each_rtx (&REG_NOTES (insn), cse_change_cc_mode, &args);\n+  subrtx_ptr_iterator::array_type array;\n+  cse_change_cc_mode (array, &PATTERN (insn), insn, newreg);\n+  cse_change_cc_mode (array, &REG_NOTES (insn), insn, newreg);\n \n   /* If the following assertion was triggered, there is most probably\n      something wrong with the cc_modes_compatible back end function."}]}