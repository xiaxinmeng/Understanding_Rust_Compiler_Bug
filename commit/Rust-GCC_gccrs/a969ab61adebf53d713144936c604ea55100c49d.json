{"sha": "a969ab61adebf53d713144936c604ea55100c49d", "node_id": "C_kwDOANBUbNoAKGE5NjlhYjYxYWRlYmY1M2Q3MTMxNDQ5MzZjNjA0ZWE1NTEwMGM0OWQ", "commit": {"author": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-04-22T10:28:39Z"}, "committer": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-04-22T22:17:40Z"}, "message": "backend: address comments about no_mangle", "tree": {"sha": "ab07c3c043235a368fdb295d242df30b06c2d581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab07c3c043235a368fdb295d242df30b06c2d581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a969ab61adebf53d713144936c604ea55100c49d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a969ab61adebf53d713144936c604ea55100c49d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a969ab61adebf53d713144936c604ea55100c49d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a969ab61adebf53d713144936c604ea55100c49d/comments", "author": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af7622f219871cdaf8ae7e124008730b411d7a06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7622f219871cdaf8ae7e124008730b411d7a06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af7622f219871cdaf8ae7e124008730b411d7a06"}], "stats": {"total": 71, "additions": 40, "deletions": 31}, "files": [{"sha": "4f55b22f761e1fee08d9d6ee1dc408a365cee57d", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a969ab61adebf53d713144936c604ea55100c49d/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a969ab61adebf53d713144936c604ea55100c49d/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=a969ab61adebf53d713144936c604ea55100c49d", "patch": "@@ -26,32 +26,21 @@\n \n #include \"fold-const.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n \n namespace Rust {\n namespace Compile {\n \n-bool\n-should_mangle_item (const AST::AttrVec &attrs)\n+bool inline should_mangle_item (const tree fndecl)\n {\n-  for (const auto &attr : attrs)\n-    {\n-      if (attr.get_path ().as_string ().compare (\"no_mangle\") == 0)\n-\t{\n-\t  if (attr.has_attr_input ())\n-\t    rust_error_at (\n-\t      attr.get_locus (),\n-\t      \"attribute %<no_mangle%> does not accept any arguments\");\n-\t  return false;\n-\t}\n-    }\n-\n-  return true;\n+  return lookup_attribute (\"no_mangle\", DECL_ATTRIBUTES (fndecl)) == NULL_TREE;\n }\n \n void\n-HIRCompileBase::setup_attributes_on_fndecl (\n-  tree fndecl, bool is_main_entry_point, HIR::Visibility &visibility,\n-  const HIR::FunctionQualifiers &qualifiers, const AST::AttrVec &attrs)\n+HIRCompileBase::setup_fndecl (tree fndecl, bool is_main_entry_point,\n+\t\t\t      HIR::Visibility &visibility,\n+\t\t\t      const HIR::FunctionQualifiers &qualifiers,\n+\t\t\t      const AST::AttrVec &attrs)\n {\n   // if its the main fn or pub visibility mark its as DECL_PUBLIC\n   // please see https://github.com/Rust-GCC/gccrs/pull/137\n@@ -95,8 +84,7 @@ HIRCompileBase::setup_attributes_on_fndecl (\n \t}\n       else if (no_mangle)\n \t{\n-\t  // we handled this in `should_mangle_item`\n-\t  continue;\n+\t  handle_no_mangle_attribute_on_fndecl (fndecl, attr);\n \t}\n     }\n }\n@@ -144,6 +132,21 @@ HIRCompileBase::handle_link_section_attribute_on_fndecl (\n   set_decl_section_name (fndecl, msg_str.c_str ());\n }\n \n+void\n+HIRCompileBase::handle_no_mangle_attribute_on_fndecl (\n+  tree fndecl, const AST::Attribute &attr)\n+{\n+  if (attr.has_attr_input ())\n+    {\n+      rust_error_at (attr.get_locus (),\n+\t\t     \"attribute %<no_mangle%> does not accept any arguments\");\n+      return;\n+    }\n+\n+  DECL_ATTRIBUTES (fndecl) = tree_cons (get_identifier (\"no_mangle\"), NULL_TREE,\n+\t\t\t\t\tDECL_ATTRIBUTES (fndecl));\n+}\n+\n void\n HIRCompileBase::handle_inline_attribute_on_fndecl (tree fndecl,\n \t\t\t\t\t\t   const AST::Attribute &attr)\n@@ -420,19 +423,21 @@ HIRCompileBase::compile_function (\n   // we don't mangle the main fn since we haven't implemented the main shim\n   bool is_main_fn = fn_name.compare (\"main\") == 0;\n   std::string asm_name = fn_name;\n-  // TODO(liushuyu): we should probably move this part to\n-  // `setup_attributes_on_fndecl` if possible\n-  bool should_mangle = should_mangle_item (outer_attrs);\n-  if (!is_main_fn && should_mangle)\n-    asm_name = ctx->mangle_item (fntype, *canonical_path);\n \n   unsigned int flags = 0;\n   tree fndecl = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,\n-\t\t\t\t\t       asm_name, flags, locus);\n-  setup_attributes_on_fndecl (fndecl, is_main_fn, visibility, qualifiers,\n-\t\t\t      outer_attrs);\n+\t\t\t\t\t       \"\" /* asm_name */, flags, locus);\n+  setup_fndecl (fndecl, is_main_fn, visibility, qualifiers, outer_attrs);\n   setup_abi_options (fndecl, fntype->get_abi ());\n \n+  // conditionally mangle the function name\n+  bool should_mangle = should_mangle_item (fndecl);\n+  if (!is_main_fn && should_mangle)\n+    asm_name = ctx->mangle_item (fntype, *canonical_path);\n+  SET_DECL_ASSEMBLER_NAME (fndecl,\n+\t\t\t   get_identifier_with_length (asm_name.data (),\n+\t\t\t\t\t\t       asm_name.length ()));\n+\n   // insert into the context\n   ctx->insert_function_decl (fntype, fndecl);\n "}, {"sha": "c09c5620e533f03ec2139e4f818a0f9ed19a47e4", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a969ab61adebf53d713144936c604ea55100c49d/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a969ab61adebf53d713144936c604ea55100c49d/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=a969ab61adebf53d713144936c604ea55100c49d", "patch": "@@ -75,9 +75,10 @@ class HIRCompileBase\n   tree resolve_unsized_adjustment (Resolver::Adjustment &adjustment,\n \t\t\t\t   tree expression, Location locus);\n \n-  static void setup_attributes_on_fndecl (\n-    tree fndecl, bool is_main_entry_point, HIR::Visibility &visibility,\n-    const HIR::FunctionQualifiers &qualifiers, const AST::AttrVec &attrs);\n+  static void setup_fndecl (tree fndecl, bool is_main_entry_point,\n+\t\t\t    HIR::Visibility &visibility,\n+\t\t\t    const HIR::FunctionQualifiers &qualifiers,\n+\t\t\t    const AST::AttrVec &attrs);\n \n   static void handle_inline_attribute_on_fndecl (tree fndecl,\n \t\t\t\t\t\t const AST::Attribute &attr);\n@@ -92,6 +93,9 @@ class HIRCompileBase\n   handle_link_section_attribute_on_fndecl (tree fndecl,\n \t\t\t\t\t   const AST::Attribute &attr);\n \n+  static void handle_no_mangle_attribute_on_fndecl (tree fndecl,\n+\t\t\t\t\t\t    const AST::Attribute &attr);\n+\n   static void setup_abi_options (tree fndecl, ABI abi);\n \n   static tree address_expression (tree, Location);"}]}