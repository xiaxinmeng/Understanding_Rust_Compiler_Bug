{"sha": "220724c311473b8b0f2418350c2b64e796e92bda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIwNzI0YzMxMTQ3M2I4YjBmMjQxODM1MGMyYjY0ZTc5NmU5MmJkYQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-09-17T11:48:21Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-09-18T10:13:07Z"}, "message": "amdgcn: Remove omp_gcn pass\n\nThis pass only had an optimization for obtaining team/thread numbers in it,\nand that turns out to be invalid in the presence of nested parallel regions,\nso we can simply delete the whole thing.\n\nOf course, it would be nice to apply the optimization where it is valid, but\nthat will take more effort than I have to spend right now.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn-tree.c (execute_omp_gcn): Delete.\n\t(make_pass_omp_gcn): Delete.\n\t* config/gcn/t-gcn-hsa (PASSES_EXTRA): Delete.\n\t* config/gcn/gcn-passes.def: Removed.", "tree": {"sha": "8b64537204b7d17370c036bd0b01beeba85f50db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b64537204b7d17370c036bd0b01beeba85f50db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/220724c311473b8b0f2418350c2b64e796e92bda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/220724c311473b8b0f2418350c2b64e796e92bda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/220724c311473b8b0f2418350c2b64e796e92bda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/220724c311473b8b0f2418350c2b64e796e92bda/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bc8c6ed8492a3027d88974eee3426771cfb78eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bc8c6ed8492a3027d88974eee3426771cfb78eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bc8c6ed8492a3027d88974eee3426771cfb78eb"}], "stats": {"total": 139, "additions": 0, "deletions": 139}, "files": [{"sha": "bcf928dd41894142ee9a37abb719619d7b0d971b", "filename": "gcc/config/gcn/gcn-passes.def", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bc8c6ed8492a3027d88974eee3426771cfb78eb/gcc%2Fconfig%2Fgcn%2Fgcn-passes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bc8c6ed8492a3027d88974eee3426771cfb78eb/gcc%2Fconfig%2Fgcn%2Fgcn-passes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-passes.def?ref=2bc8c6ed8492a3027d88974eee3426771cfb78eb", "patch": "@@ -1,19 +0,0 @@\n-/* Copyright (C) 2017-2020 Free Software Foundation, Inc.\n-\n-   This file is part of GCC.\n-   \n-   GCC is free software; you can redistribute it and/or modify it under\n-   the terms of the GNU General Public License as published by the Free\n-   Software Foundation; either version 3, or (at your option) any later\n-   version.\n-   \n-   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-   for more details.\n-   \n-   You should have received a copy of the GNU General Public License\n-   along with GCC; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-INSERT_PASS_AFTER (pass_omp_target_link, 1, pass_omp_gcn);"}, {"sha": "4304f13160ae7915c94ec6cb13b33b31085d271d", "filename": "gcc/config/gcn/gcn-tree.c", "status": "modified", "additions": 0, "deletions": 119, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/220724c311473b8b0f2418350c2b64e796e92bda/gcc%2Fconfig%2Fgcn%2Fgcn-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/220724c311473b8b0f2418350c2b64e796e92bda/gcc%2Fconfig%2Fgcn%2Fgcn-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-tree.c?ref=220724c311473b8b0f2418350c2b64e796e92bda", "patch": "@@ -45,125 +45,6 @@\n #include \"targhooks.h\"\n #include \"langhooks-def.h\"\n \n-/* }}}  */\n-/* {{{ OMP GCN pass.\n- \n-   This pass is intended to make any GCN-specfic transformations to OpenMP\n-   target regions.\n- \n-   At present, its only purpose is to convert some \"omp\" built-in functions\n-   to use closer-to-the-metal \"gcn\" built-in functions.  */\n-\n-unsigned int\n-execute_omp_gcn (void)\n-{\n-  tree thr_num_tree = builtin_decl_explicit (BUILT_IN_OMP_GET_THREAD_NUM);\n-  tree thr_num_id = DECL_NAME (thr_num_tree);\n-  tree team_num_tree = builtin_decl_explicit (BUILT_IN_OMP_GET_TEAM_NUM);\n-  tree team_num_id = DECL_NAME (team_num_tree);\n-  basic_block bb;\n-  gimple_stmt_iterator gsi;\n-  unsigned int todo = 0;\n-\n-  FOR_EACH_BB_FN (bb, cfun)\n-    for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-    {\n-      gimple *call = gsi_stmt (gsi);\n-      tree decl;\n-\n-      if (is_gimple_call (call) && (decl = gimple_call_fndecl (call)))\n-\t{\n-\t  tree decl_id = DECL_NAME (decl);\n-\t  tree lhs = gimple_get_lhs (call);\n-\n-\t  if (decl_id == thr_num_id)\n-\t    {\n-\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\tfprintf (dump_file,\n-\t\t\t \"Replace '%s' with __builtin_gcn_dim_pos.\\n\",\n-\t\t\t IDENTIFIER_POINTER (decl_id));\n-\n-\t      /* Transform this:\n-\t         lhs = __builtin_omp_get_thread_num ()\n-\t         to this:\n-\t         lhs = __builtin_gcn_dim_pos (1)  */\n-\t      tree fn = targetm.builtin_decl (GCN_BUILTIN_OMP_DIM_POS, 0);\n-\t      tree fnarg = build_int_cst (unsigned_type_node, 1);\n-\t      gimple *stmt = gimple_build_call (fn, 1, fnarg);\n-\t      gimple_call_set_lhs (stmt, lhs);\n-\t      gsi_replace (&gsi, stmt, true);\n-\n-\t      todo |= TODO_update_ssa;\n-\t    }\n-\t  else if (decl_id == team_num_id)\n-\t    {\n-\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\tfprintf (dump_file,\n-\t\t\t \"Replace '%s' with __builtin_gcn_dim_pos.\\n\",\n-\t\t\t IDENTIFIER_POINTER (decl_id));\n-\n-\t      /* Transform this:\n-\t         lhs = __builtin_omp_get_team_num ()\n-\t         to this:\n-\t         lhs = __builtin_gcn_dim_pos (0)  */\n-\t      tree fn = targetm.builtin_decl (GCN_BUILTIN_OMP_DIM_POS, 0);\n-\t      tree fnarg = build_zero_cst (unsigned_type_node);\n-\t      gimple *stmt = gimple_build_call (fn, 1, fnarg);\n-\t      gimple_call_set_lhs (stmt, lhs);\n-\t      gsi_replace (&gsi, stmt, true);\n-\n-\t      todo |= TODO_update_ssa;\n-\t    }\n-\t}\n-    }\n-\n-  return todo;\n-}\n-\n-namespace\n-{\n-\n-  const pass_data pass_data_omp_gcn = {\n-    GIMPLE_PASS,\n-    \"omp_gcn\",\t\t\t/* name */\n-    OPTGROUP_NONE,\t\t/* optinfo_flags */\n-    TV_NONE,\t\t\t/* tv_id */\n-    0,\t\t\t\t/* properties_required */\n-    0,\t\t\t\t/* properties_provided */\n-    0,\t\t\t\t/* properties_destroyed */\n-    0,\t\t\t\t/* todo_flags_start */\n-    TODO_df_finish,\t\t/* todo_flags_finish */\n-  };\n-\n-  class pass_omp_gcn : public gimple_opt_pass\n-  {\n-  public:\n-    pass_omp_gcn (gcc::context *ctxt)\n-      : gimple_opt_pass (pass_data_omp_gcn, ctxt)\n-    {\n-    }\n-\n-    /* opt_pass methods: */\n-    virtual bool gate (function *)\n-    {\n-      return flag_openmp;\n-    }\n-\n-    virtual unsigned int execute (function *)\n-    {\n-      return execute_omp_gcn ();\n-    }\n-\n-  }; /* class pass_omp_gcn.  */\n-\n-} /* anon namespace.  */\n-\n-gimple_opt_pass *\n-make_pass_omp_gcn (gcc::context *ctxt)\n-{\n-  return new pass_omp_gcn (ctxt);\n-}\n-\n /* }}}  */\n /* {{{ OpenACC reductions.  */\n "}, {"sha": "16d243c3f2ba8b6083a039aa376e842cf8b48721", "filename": "gcc/config/gcn/t-gcn-hsa", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/220724c311473b8b0f2418350c2b64e796e92bda/gcc%2Fconfig%2Fgcn%2Ft-gcn-hsa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/220724c311473b8b0f2418350c2b64e796e92bda/gcc%2Fconfig%2Fgcn%2Ft-gcn-hsa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Ft-gcn-hsa?ref=220724c311473b8b0f2418350c2b64e796e92bda", "patch": "@@ -45,7 +45,6 @@ gcn-run$(exeext): gcn-run.o\n MULTILIB_OPTIONS = march=gfx900/march=gfx906\n MULTILIB_DIRNAMES = gfx900 gfx906\n \n-PASSES_EXTRA += $(srcdir)/config/gcn/gcn-passes.def\n gcn-tree.o: $(srcdir)/config/gcn/gcn-tree.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)"}]}