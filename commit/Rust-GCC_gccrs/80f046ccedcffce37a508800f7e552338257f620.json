{"sha": "80f046ccedcffce37a508800f7e552338257f620", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBmMDQ2Y2NlZGNmZmNlMzdhNTA4ODAwZjdlNTUyMzM4MjU3ZjYyMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-03-22T15:16:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-03-22T15:16:52Z"}, "message": "re PR libgomp/42942 (OpenMP omp_set_max_active_levels(0) isn't resetting value)\n\n\tPR libgomp/42942\n\t* env.c (parse_unsigned_long): Add ALLOW_ZERO argument.\n\t(initialize_env): Adjust callers.\n\t(omp_set_max_active_levels): Set gomp_max_active_levels_var even\n\twhen the argument is 0.\n\n\t* testsuite/libgomp.c/pr42942.c: New test.\n\nFrom-SVN: r157635", "tree": {"sha": "655886a8d69ffcdc399d52cfe655719423ef7e2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/655886a8d69ffcdc399d52cfe655719423ef7e2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80f046ccedcffce37a508800f7e552338257f620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f046ccedcffce37a508800f7e552338257f620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f046ccedcffce37a508800f7e552338257f620", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f046ccedcffce37a508800f7e552338257f620/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57fd5f9525f36d3df45345c343e4086aaa452750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57fd5f9525f36d3df45345c343e4086aaa452750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57fd5f9525f36d3df45345c343e4086aaa452750"}], "stats": {"total": 88, "additions": 81, "deletions": 7}, "files": [{"sha": "b9f4a8a883edf7fdb8239690a4846f9a15215b0f", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f046ccedcffce37a508800f7e552338257f620/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f046ccedcffce37a508800f7e552338257f620/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=80f046ccedcffce37a508800f7e552338257f620", "patch": "@@ -1,3 +1,13 @@\n+2010-03-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/42942\n+\t* env.c (parse_unsigned_long): Add ALLOW_ZERO argument.\n+\t(initialize_env): Adjust callers.\n+\t(omp_set_max_active_levels): Set gomp_max_active_levels_var even\n+\twhen the argument is 0.\n+\n+\t* testsuite/libgomp.c/pr42942.c: New test.\n+\n 2010-03-08  Tobias Grosser  <grosser@fim.uni-passau.de>\n \n \tPR middle-end/42644"}, {"sha": "3eb51e8a7d6d8287bd002bf52f05063cd46e4075", "filename": "libgomp/env.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f046ccedcffce37a508800f7e552338257f620/libgomp%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f046ccedcffce37a508800f7e552338257f620/libgomp%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fenv.c?ref=80f046ccedcffce37a508800f7e552338257f620", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+/* Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n    Contributed by Richard Henderson <rth@redhat.com>.\n \n    This file is part of the GNU OpenMP Library (libgomp).\n@@ -145,7 +146,7 @@ parse_schedule (void)\n    present and it was successfully parsed.  */\n \n static bool\n-parse_unsigned_long (const char *name, unsigned long *pvalue)\n+parse_unsigned_long (const char *name, unsigned long *pvalue, bool allow_zero)\n {\n   char *env, *end;\n   unsigned long value;\n@@ -161,7 +162,7 @@ parse_unsigned_long (const char *name, unsigned long *pvalue)\n \n   errno = 0;\n   value = strtoul (env, &end, 10);\n-  if (errno || (long) value <= 0)\n+  if (errno || (long) value <= 0 - allow_zero)\n     goto invalid;\n \n   while (isspace ((unsigned char) *end))\n@@ -481,16 +482,18 @@ initialize_env (void)\n   parse_schedule ();\n   parse_boolean (\"OMP_DYNAMIC\", &gomp_global_icv.dyn_var);\n   parse_boolean (\"OMP_NESTED\", &gomp_global_icv.nest_var);\n-  parse_unsigned_long (\"OMP_MAX_ACTIVE_LEVELS\", &gomp_max_active_levels_var);\n-  parse_unsigned_long (\"OMP_THREAD_LIMIT\", &gomp_thread_limit_var);\n+  parse_unsigned_long (\"OMP_MAX_ACTIVE_LEVELS\", &gomp_max_active_levels_var,\n+\t\t       true);\n+  parse_unsigned_long (\"OMP_THREAD_LIMIT\", &gomp_thread_limit_var, false);\n   if (gomp_thread_limit_var != ULONG_MAX)\n     gomp_remaining_threads_count = gomp_thread_limit_var - 1;\n #ifndef HAVE_SYNC_BUILTINS\n   gomp_mutex_init (&gomp_remaining_threads_lock);\n #endif\n   gomp_init_num_threads ();\n   gomp_available_cpus = gomp_global_icv.nthreads_var;\n-  if (!parse_unsigned_long (\"OMP_NUM_THREADS\", &gomp_global_icv.nthreads_var))\n+  if (!parse_unsigned_long (\"OMP_NUM_THREADS\", &gomp_global_icv.nthreads_var,\n+\t\t\t    false))\n     gomp_global_icv.nthreads_var = gomp_available_cpus;\n   if (parse_affinity ())\n     gomp_init_affinity ();\n@@ -632,7 +635,7 @@ omp_get_thread_limit (void)\n void\n omp_set_max_active_levels (int max_levels)\n {\n-  if (max_levels > 0)\n+  if (max_levels >= 0)\n     gomp_max_active_levels_var = max_levels;\n }\n "}, {"sha": "5d57852450ad329fc2e38b6ce9c3778129f24858", "filename": "libgomp/testsuite/libgomp.c/pr42942.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f046ccedcffce37a508800f7e552338257f620/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr42942.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f046ccedcffce37a508800f7e552338257f620/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr42942.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr42942.c?ref=80f046ccedcffce37a508800f7e552338257f620", "patch": "@@ -0,0 +1,61 @@\n+/* PR libgomp/42942 */\n+/* { dg-do run } */\n+\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+int\n+main (void)\n+{\n+  int e = 0;\n+  omp_set_dynamic (0);\n+  omp_set_nested (1);\n+  omp_set_max_active_levels (1);\n+  if (omp_get_max_active_levels () != 1)\n+    abort ();\n+#pragma omp parallel num_threads(2) reduction(|:e)\n+  if (!omp_in_parallel ()\n+      || omp_get_num_threads () != 2)\n+    e = 1;\n+  else\n+#pragma omp parallel num_threads(2) reduction(|:e)\n+    if (!omp_in_parallel ()\n+\t|| omp_get_num_threads () != 1)\n+      e = 1;\n+  if (e)\n+    abort ();\n+  omp_set_max_active_levels (0);\n+  if (omp_get_max_active_levels () != 0)\n+    abort ();\n+#pragma omp parallel num_threads(2) reduction(|:e)\n+  if (omp_in_parallel ()\n+      || omp_get_num_threads () != 1)\n+    e = 1;\n+  else\n+#pragma omp parallel num_threads(2) reduction(|:e)\n+    if (omp_in_parallel ()\n+\t|| omp_get_num_threads () != 1)\n+      e = 1;\n+  if (e)\n+    abort ();\n+  omp_set_max_active_levels (2);\n+  if (omp_get_max_active_levels () != 2)\n+    abort ();\n+#pragma omp parallel num_threads(2) reduction(|:e)\n+  if (!omp_in_parallel ()\n+      || omp_get_num_threads () != 2)\n+    e = 1;\n+  else\n+#pragma omp parallel num_threads(2) reduction(|:e)\n+    if (!omp_in_parallel ()\n+\t|| omp_get_num_threads () != 2)\n+      e = 1;\n+    else\n+#pragma omp parallel num_threads(2) reduction(|:e)\n+      if (!omp_in_parallel ()\n+\t  || omp_get_num_threads () != 1)\n+\te = 1;\n+  if (e)\n+    abort ();\n+  return 0;\n+}"}]}