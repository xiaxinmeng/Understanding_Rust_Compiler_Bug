{"sha": "0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY4M2IwNDQ0Y2Y1OWM3ZDczZmQ4NzBlNzFmNmNhYzNjNjlhMTM0ZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-23T11:51:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-23T11:51:26Z"}, "message": "[multiple changes]\n\n2017-01-23  Gary Dismukes  <dismukes@adacore.com>\n\n\t* a-calend.adb, prep.adb, debug.adb, prj.ads, prepcomp.adb,\n\texp_disp.adb, s-imgrea.adb, g-socket.adb, g-socket.ads, sem_ch13.adb,\n\tprj-tree.ads: Minor spelling change for consistency (behaviour ->\n\tbehavior).\n\n2017-01-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* scng.adb (Scan): Use Ada version Ada_2020 to flag use of\n\tTarget_Name.\n\t* par-ch4.adb (P_Primary): Ditto.\n\t* opt.ads: Add Ada_2020 (optimistically) to enumeration list of\n\tAda_Version_Type.\n\t* switch-c.adb (Scan_Front_End_Switches): Recognize -gnat2020 for\n\tnew Ada version Ada_2020.\n\n2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_attr.adb (Expand_Loop_Entry_Attribute): Force the generation\n\tof a nominal type for the constant which captures the value of\n\tthe attribute prefix. Various clean ups.\n\t* sem_attr.adb (Analyze_Attribute): Clean up the processing of\n\t'Loop_Entry.\n\n2017-01-23  Yannick Moy  <moy@adacore.com>\n\n\t* sem_util.adb (Has_Enabled_Property): Treat\n\tprotected objects and variables differently from other variables.\n\nFrom-SVN: r244787", "tree": {"sha": "3cd396db2fefb65be70f35f769705e23a6e844cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cd396db2fefb65be70f35f769705e23a6e844cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/comments", "author": null, "committer": null, "parents": [{"sha": "52b70b1bef33b0a6a339c631b084cf030bc501e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b70b1bef33b0a6a339c631b084cf030bc501e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52b70b1bef33b0a6a339c631b084cf030bc501e9"}], "stats": {"total": 236, "additions": 163, "deletions": 73}, "files": [{"sha": "86e43ef0a3be86b001f3dbe4b00df74d50cde1d5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -1,3 +1,8 @@\n+2017-01-23  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb (Has_Enabled_Property): Treat\n+\tprotected objects and variables differently from other variables.\n+\n 2017-01-23  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_ch13.adb (Adjust_Record_For_Reverse_Bit_Order):"}, {"sha": "b0fba5dd145a637b6d9f6140fb21ee5618e8cbae", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "5fcb6c8dffb16ccc2e58cb7e80b211669c6b7ac5", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -558,7 +558,7 @@ package body Debug is\n    --  d.o  Conservative elaboration order for indirect calls. This causes\n    --       P'Access to be treated as a call in more cases.\n \n-   --  d.p  In Ada 95 (or 83) mode, use original Ada 95 behaviour for the\n+   --  d.p  In Ada 95 (or 83) mode, use original Ada 95 behavior for the\n    --       interpretation of component clauses crossing byte boundaries when\n    --       using the non-default bit order (i.e. ignore AI95-0133).\n "}, {"sha": "845b7a3db7e4504e7121617f11c2e5ad2f2250dd", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 61, "deletions": 44, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -1019,13 +1019,11 @@ package body Exp_Attr is\n \n       --  Local variables\n \n-      Exprs     : constant List_Id   := Expressions (N);\n       Pref      : constant Node_Id   := Prefix (N);\n-      Typ       : constant Entity_Id := Etype (Pref);\n+      Base_Typ  : constant Entity_Id := Base_Type (Etype (Pref));\n+      Exprs     : constant List_Id   := Expressions (N);\n+      Aux_Decl  : Node_Id;\n       Blk       : Node_Id;\n-      CW_Decl   : Node_Id;\n-      CW_Temp   : Entity_Id;\n-      CW_Typ    : Entity_Id;\n       Decls     : List_Id;\n       Installed : Boolean;\n       Loc       : Source_Ptr;\n@@ -1048,10 +1046,10 @@ package body Exp_Attr is\n          Loop_Id   := Entity (First (Exprs));\n          Loop_Stmt := Label_Construct (Parent (Loop_Id));\n \n-      --  Climb the parent chain to find the nearest enclosing loop. Skip all\n-      --  internally generated loops for quantified expressions and for\n-      --  element iterators over multidimensional arrays: pragma applies to\n-      --  source loop.\n+      --  Climb the parent chain to find the nearest enclosing loop. Skip\n+      --  all internally generated loops for quantified expressions and for\n+      --  element iterators over multidimensional arrays because the pragma\n+      --  applies to source loop.\n \n       else\n          Loop_Stmt := N;\n@@ -1350,49 +1348,68 @@ package body Exp_Attr is\n       --  Preserve the tag of the prefix by offering a specific view of the\n       --  class-wide version of the prefix.\n \n-      if Is_Tagged_Type (Typ) then\n+      if Is_Tagged_Type (Base_Typ) then\n+         Tagged_Case : declare\n+            CW_Temp : Entity_Id;\n+            CW_Typ  : Entity_Id;\n \n-         --  Generate:\n-         --    CW_Temp : constant Typ'Class := Typ'Class (Pref);\n+         begin\n+            --  Generate:\n+            --    CW_Temp : constant Base_Typ'Class := Base_Typ'Class (Pref);\n \n-         CW_Temp := Make_Temporary (Loc, 'T');\n-         CW_Typ  := Class_Wide_Type (Typ);\n+            CW_Temp := Make_Temporary (Loc, 'T');\n+            CW_Typ  := Class_Wide_Type (Base_Typ);\n \n-         CW_Decl :=\n-           Make_Object_Declaration (Loc,\n-             Defining_Identifier => CW_Temp,\n-             Constant_Present    => True,\n-             Object_Definition   => New_Occurrence_Of (CW_Typ, Loc),\n-             Expression          =>\n-               Convert_To (CW_Typ, Relocate_Node (Pref)));\n-         Append_To (Decls, CW_Decl);\n+            Aux_Decl :=\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => CW_Temp,\n+                Constant_Present    => True,\n+                Object_Definition   => New_Occurrence_Of (CW_Typ, Loc),\n+                Expression          =>\n+                  Convert_To (CW_Typ, Relocate_Node (Pref)));\n+            Append_To (Decls, Aux_Decl);\n \n-         --  Generate:\n-         --    Temp : Typ renames Typ (CW_Temp);\n+            --  Generate:\n+            --    Temp : Base_Typ renames Base_Typ (CW_Temp);\n \n-         Temp_Decl :=\n-           Make_Object_Renaming_Declaration (Loc,\n-             Defining_Identifier => Temp_Id,\n-             Subtype_Mark        => New_Occurrence_Of (Typ, Loc),\n-             Name                =>\n-               Convert_To (Typ, New_Occurrence_Of (CW_Temp, Loc)));\n-         Append_To (Decls, Temp_Decl);\n+            Temp_Decl :=\n+              Make_Object_Renaming_Declaration (Loc,\n+                Defining_Identifier => Temp_Id,\n+                Subtype_Mark        => New_Occurrence_Of (Base_Typ, Loc),\n+                Name                =>\n+                  Convert_To (Base_Typ, New_Occurrence_Of (CW_Temp, Loc)));\n+            Append_To (Decls, Temp_Decl);\n+         end Tagged_Case;\n \n-      --  Non-tagged case\n+      --  Untagged case\n \n       else\n-         CW_Decl := Empty;\n+         Untagged_Case : declare\n+            Temp_Expr : Node_Id;\n \n-         --  Generate:\n-         --    Temp : constant Typ := Pref;\n+         begin\n+            Aux_Decl := Empty;\n \n-         Temp_Decl :=\n-           Make_Object_Declaration (Loc,\n-             Defining_Identifier => Temp_Id,\n-             Constant_Present    => True,\n-             Object_Definition   => New_Occurrence_Of (Typ, Loc),\n-             Expression          => Relocate_Node (Pref));\n-         Append_To (Decls, Temp_Decl);\n+            --  Generate a nominal type for the constant when the prefix is of\n+            --  a constrained type. This is achieved by setting the Etype of\n+            --  the relocated prefix to its base type. Since the prefix is now\n+            --  the initialization expression of the constant, its freezing\n+            --  will produce a proper nominal type.\n+\n+            Temp_Expr := Relocate_Node (Pref);\n+            Set_Etype (Temp_Expr, Base_Typ);\n+\n+            --  Generate:\n+            --    Temp : constant Base_Typ := Pref;\n+\n+            Temp_Decl :=\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Temp_Id,\n+                Constant_Present    => True,\n+                Object_Definition   => New_Occurrence_Of (Base_Typ, Loc),\n+                Expression          => Temp_Expr);\n+            Append_To (Decls, Temp_Decl);\n+         end Untagged_Case;\n       end if;\n \n       --  Step 4: Analyze all bits\n@@ -1418,8 +1435,8 @@ package body Exp_Attr is\n       --  the declaration of the constant.\n \n       else\n-         if Present (CW_Decl) then\n-            Analyze (CW_Decl);\n+         if Present (Aux_Decl) then\n+            Analyze (Aux_Decl);\n          end if;\n \n          Analyze (Temp_Decl);"}, {"sha": "9ef851d841f194c2801003c22762f8802a2fd671", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -101,6 +101,11 @@ package Opt is\n    --  GPRBUILD\n    --  Set to True by gprbuild when the version of GNAT is 5.03 or before.\n \n+   Checksum_Accumulate_Limited_Checksum : Boolean := False;\n+   --  Used to control the computation of the limited view of a package.\n+   --  (Not currently used, possible optimization for ALI files of units\n+   --  in limited with_clauses).\n+\n    ----------------------------------------------\n    -- Settings of Modes for Current Processing --\n    ----------------------------------------------\n@@ -117,7 +122,7 @@ package Opt is\n    --  trying to specify other values will be ignored (in case of pragma\n    --  Ada_xxx) or generate an error (in case of -gnat83/95/xx switches).\n \n-   type Ada_Version_Type is (Ada_83, Ada_95, Ada_2005, Ada_2012);\n+   type Ada_Version_Type is (Ada_83, Ada_95, Ada_2005, Ada_2012, Ada_2020);\n    pragma Ordered (Ada_Version_Type);\n    --  Versions of Ada for Ada_Version below. Note that these are ordered,\n    --  so that tests like Ada_Version >= Ada_95 are legitimate and useful."}, {"sha": "b454af4f52ff5b5d6867d132afe9458a3d83e782", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -2798,7 +2798,7 @@ package body Ch4 is\n                Scan; -- past minus\n \n             when Tok_At_Sign =>    --  AI12-0125 : target_name\n-               if not Extensions_Allowed then\n+               if Ada_Version < Ada_2020 then\n                   Error_Msg_SC (\"target name is an Ada 2020 extension\");\n                   Error_Msg_SC (\"\\compile with -gnatX\");\n                end if;"}, {"sha": "cffb0cef991acedcab2408628a36c67877093c57", "filename": "gcc/ada/prepcomp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fprepcomp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fprepcomp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprepcomp.adb?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "f2290bb20ab83b5136b9019bfb8461dc0437f6e2", "filename": "gcc/ada/prj-tree.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fprj-tree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fprj-tree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-tree.ads?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "8920890dcfc400e74a0f43f8b62cf4df432af0d5", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2001-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "62ec93ad502e2952530bd12ee0bde806b6669273", "filename": "gcc/ada/s-imgrea.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fs-imgrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fs-imgrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgrea.adb?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "0fae960fe6592559a927507486378e0951a97be6", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -1612,7 +1612,7 @@ package body Scng is\n             end if;\n \n          when '@' =>\n-            if not Extensions_Allowed then\n+            if Ada_Version < Ada_2020 then\n                Error_Illegal_Character;\n                Scan_Ptr := Scan_Ptr + 1;\n "}, {"sha": "bb719d33010773176d791625e6c5f476cb0e0ea6", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -4295,13 +4295,13 @@ package body Sem_Attr is\n \n          --  Local variables\n \n-         Context           : constant Node_Id := Parent (N);\n-         Attr              : Node_Id;\n-         Enclosing_Loop    : Node_Id;\n-         Loop_Id           : Entity_Id := Empty;\n-         Scop              : Entity_Id;\n-         Stmt              : Node_Id;\n-         Enclosing_Pragma  : Node_Id   := Empty;\n+         Context   : constant Node_Id := Parent (N);\n+         Attr      : Node_Id;\n+         Encl_Loop : Node_Id;\n+         Encl_Prag : Node_Id   := Empty;\n+         Loop_Id   : Entity_Id := Empty;\n+         Scop      : Entity_Id;\n+         Stmt      : Node_Id;\n \n       --  Start of processing for Loop_Entry\n \n@@ -4419,7 +4419,7 @@ package body Sem_Attr is\n                                Name_Assert_And_Cut,\n                                Name_Assume)\n             then\n-               Enclosing_Pragma := Original_Node (Stmt);\n+               Encl_Prag := Original_Node (Stmt);\n \n             --  Locate the enclosing loop (if any). Note that Ada 2012 array\n             --  iteration may be expanded into several nested loops, we are\n@@ -4431,14 +4431,14 @@ package body Sem_Attr is\n               and then Comes_From_Source (Original_Node (Stmt))\n               and then Nkind (Original_Node (Stmt)) = N_Loop_Statement\n             then\n-               Enclosing_Loop := Stmt;\n+               Encl_Loop := Stmt;\n \n                --  The original attribute reference may lack a loop name. Use\n                --  the name of the enclosing loop because it is the related\n                --  loop.\n \n                if No (Loop_Id) then\n-                  Loop_Id := Entity (Identifier (Enclosing_Loop));\n+                  Loop_Id := Entity (Identifier (Encl_Loop));\n                end if;\n \n                exit;\n@@ -4467,7 +4467,7 @@ package body Sem_Attr is\n          then\n             null;\n \n-         elsif No (Enclosing_Pragma) then\n+         elsif No (Encl_Prag) then\n             Error_Attr (\"attribute% must appear within appropriate pragma\", N);\n          end if;\n \n@@ -4504,8 +4504,8 @@ package body Sem_Attr is\n          then\n             null;\n \n-         elsif Present (Enclosing_Loop)\n-           and then Entity (Identifier (Enclosing_Loop)) /= Loop_Id\n+         elsif Present (Encl_Loop)\n+           and then Entity (Identifier (Encl_Loop)) /= Loop_Id\n          then\n             Error_Attr_P\n               (\"prefix of attribute % that applies to outer loop must denote \"\n@@ -4521,9 +4521,7 @@ package body Sem_Attr is\n          --  early transformation also avoids the generation of a useless loop\n          --  entry constant.\n \n-         if Present (Enclosing_Pragma)\n-           and then Is_Ignored (Enclosing_Pragma)\n-         then\n+         if Present (Encl_Prag) and then Is_Ignored (Encl_Prag) then\n             Rewrite (N, Relocate_Node (P));\n             Preanalyze_And_Resolve (N);\n "}, {"sha": "7c6278772b5637faae26c81f6c0cc465f0e4b3c6", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -81,7 +81,7 @@ package body Sem_Ch13 is\n    -----------------------\n \n    procedure Adjust_Record_For_Reverse_Bit_Order_Ada_95 (R : Entity_Id);\n-   --  Helper routine providing the original (pre-AI95-0133) behaviour for\n+   --  Helper routine providing the original (pre-AI95-0133) behavior for\n    --  Adjust_Record_For_Reverse_Bit_Order.\n \n    procedure Alignment_Check_For_Size_Change (Typ : Entity_Id; Size : Uint);\n@@ -364,9 +364,9 @@ package body Sem_Ch13 is\n       SSU    : constant Uint := UI_From_Int (System_Storage_Unit);\n \n    begin\n-      --  Processing here used to depend on Ada version: the behaviour was\n+      --  Processing here used to depend on Ada version: the behavior was\n       --  changed by AI95-0133. However this AI is a Binding interpretation,\n-      --  so we now implement it even in Ada 95 mode. The original behaviour\n+      --  so we now implement it even in Ada 95 mode. The original behavior\n       --  from unamended Ada 95 is still available for compatibility under\n       --  debugging switch -gnatd.\n "}, {"sha": "5958d42cbc9cdd7e3bd7b7296c67c4eaedf36b51", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -9118,13 +9118,55 @@ package body Sem_Util is\n      (Item_Id  : Entity_Id;\n       Property : Name_Id) return Boolean\n    is\n+      function Protected_Object_Has_Enabled_Property return Boolean;\n+      --  Determine whether a protected object denoted by Item_Id has the\n+      --  property enabled.\n+\n       function State_Has_Enabled_Property return Boolean;\n       --  Determine whether a state denoted by Item_Id has the property enabled\n \n       function Variable_Has_Enabled_Property return Boolean;\n       --  Determine whether a variable denoted by Item_Id has the property\n       --  enabled.\n \n+      -------------------------------------------\n+      -- Protected_Object_Has_Enabled_Property --\n+      -------------------------------------------\n+\n+      function Protected_Object_Has_Enabled_Property return Boolean is\n+         Constits     : constant Elist_Id := Part_Of_Constituents (Item_Id);\n+         Constit_Elmt : Elmt_Id;\n+         Constit_Id   : Entity_Id;\n+\n+      begin\n+         --  Protected objects always have the properties Async_Readers and\n+         --  Async_Writers. (SPARK RM 7.1.2(16))\n+\n+         if Property = Name_Async_Readers\n+           or else Property = Name_Async_Writers\n+         then\n+            return True;\n+\n+         --  Protected objects that have Part_Of components also inherit\n+         --  their properties Effective_Reads and Effective_Writes. (SPARK\n+         --  RM 7.1.2(16))\n+\n+         elsif Present (Constits) then\n+            Constit_Elmt := First_Elmt (Constits);\n+            while Present (Constit_Elmt) loop\n+               Constit_Id := Node (Constit_Elmt);\n+\n+               if Has_Enabled_Property (Constit_Id, Property) then\n+                  return True;\n+               end if;\n+\n+               Next_Elmt (Constit_Elmt);\n+            end loop;\n+         end if;\n+\n+         return False;\n+      end Protected_Object_Has_Enabled_Property;\n+\n       --------------------------------\n       -- State_Has_Enabled_Property --\n       --------------------------------\n@@ -9302,7 +9344,19 @@ package body Sem_Util is\n          --  The implicit case lacks all property pragmas\n \n          elsif No (AR) and then No (AW) and then No (ER) and then No (EW) then\n-            return True;\n+\n+            --  A variable of a protected type only has the properties\n+            --  Async_Readers and Async_Writers. It cannot have Part_Of\n+            --  components (only protected objects can), hence it cannot\n+            --  inherit their properties Effective_Reads and Effective_Writes.\n+            --  (SPARK RM 7.1.2(16))\n+\n+            if Is_Protected_Type (Etype (Item_Id)) then\n+               return Property = Name_Async_Readers\n+                 or else Property = Name_Async_Writers;\n+            else\n+               return True;\n+            end if;\n \n          else\n             return False;\n@@ -9321,6 +9375,14 @@ package body Sem_Util is\n       elsif Ekind (Item_Id) = E_Variable then\n          return Variable_Has_Enabled_Property;\n \n+      --  By default, protected objects only have the properties Async_Readers\n+      --  and Async_Writers. If they have Part_Of components, they also inherit\n+      --  their properties Effective_Reads and Effective_Writes. (SPARK RM\n+      --  7.1.2(16))\n+\n+      elsif Ekind (Item_Id) = E_Protected_Object then\n+         return Protected_Object_Has_Enabled_Property;\n+\n       --  Otherwise a property is enabled when the related item is effectively\n       --  volatile.\n "}, {"sha": "176dbe46a8e2a57d06333bac0509c2bcffbde8ff", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f83b0444cf59c7d73fd870e71f6cac3c69a134e/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=0f83b0444cf59c7d73fd870e71f6cac3c69a134e", "patch": "@@ -1502,6 +1502,9 @@ package body Switch.C is\n                elsif Switch_Chars (Ptr .. Ptr + 3) = \"2012\" then\n                   Ada_Version := Ada_2012;\n \n+               elsif Switch_Chars (Ptr .. Ptr + 3) = \"2020\" then\n+                  Ada_Version := Ada_2020;\n+\n                else\n                   Bad_Switch (\"-gnat\" & Switch_Chars (Ptr .. Ptr + 3));\n                end if;"}]}