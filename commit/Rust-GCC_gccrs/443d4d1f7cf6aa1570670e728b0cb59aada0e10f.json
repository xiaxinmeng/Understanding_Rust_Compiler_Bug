{"sha": "443d4d1f7cf6aa1570670e728b0cb59aada0e10f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQzZDRkMWY3Y2Y2YWExNTcwNjcwZTcyOGIwY2I1OWFhZGEwZTEwZg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-28T20:06:15Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-08-05T17:18:35Z"}, "message": "Fix clone on TypeBounds\n\nCovariance was causing issues for the default clone on these classes. Such that the NodeId became messed up. This causes name resolution issues.", "tree": {"sha": "d8595ffdb329b548655682bd0b256f5626929f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8595ffdb329b548655682bd0b256f5626929f0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/443d4d1f7cf6aa1570670e728b0cb59aada0e10f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443d4d1f7cf6aa1570670e728b0cb59aada0e10f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/443d4d1f7cf6aa1570670e728b0cb59aada0e10f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/443d4d1f7cf6aa1570670e728b0cb59aada0e10f/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b333711461c8244bc2b46c736858950837ba7bbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b333711461c8244bc2b46c736858950837ba7bbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b333711461c8244bc2b46c736858950837ba7bbf"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "e376488de8c80432f33d81ca107a5779ee35edaa", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443d4d1f7cf6aa1570670e728b0cb59aada0e10f/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443d4d1f7cf6aa1570670e728b0cb59aada0e10f/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=443d4d1f7cf6aa1570670e728b0cb59aada0e10f", "patch": "@@ -1128,12 +1128,13 @@ class TypeParamBound\n \n   NodeId get_node_id () const { return node_id; }\n \n+  virtual Location get_locus_slow () const = 0;\n+\n protected:\n   // Clone function implementation as pure virtual method\n   virtual TypeParamBound *clone_type_param_bound_impl () const = 0;\n \n-  TypeParamBound () : node_id (Analysis::Mappings::get ()->get_next_node_id ())\n-  {}\n+  TypeParamBound (NodeId node_id) : node_id (node_id) {}\n \n   NodeId node_id;\n };\n@@ -1159,8 +1160,14 @@ class Lifetime : public TypeParamBound\n   // Constructor\n   Lifetime (LifetimeType type, std::string name = std::string (),\n \t    Location locus = Location ())\n-    : lifetime_type (type), lifetime_name (std::move (name)), locus (locus),\n-      node_id (Analysis::Mappings::get ()->get_next_node_id ())\n+    : TypeParamBound (Analysis::Mappings::get ()->get_next_node_id ()),\n+      lifetime_type (type), lifetime_name (std::move (name)), locus (locus)\n+  {}\n+\n+  Lifetime (NodeId id, LifetimeType type, std::string name = std::string (),\n+\t    Location locus = Location ())\n+    : TypeParamBound (id), lifetime_type (type),\n+      lifetime_name (std::move (name)), locus (locus)\n   {}\n \n   // Creates an \"error\" lifetime.\n@@ -1178,18 +1185,18 @@ class Lifetime : public TypeParamBound\n \n   LifetimeType get_lifetime_type () { return lifetime_type; }\n \n-  Location get_locus () { return locus; }\n+  Location get_locus () const { return locus; }\n \n-  std::string get_lifetime_name () const { return lifetime_name; }\n+  Location get_locus_slow () const override final { return get_locus (); }\n \n-  NodeId get_node_id () const { return node_id; }\n+  std::string get_lifetime_name () const { return lifetime_name; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n   Lifetime *clone_type_param_bound_impl () const override\n   {\n-    return new Lifetime (*this);\n+    return new Lifetime (node_id, lifetime_type, lifetime_name, locus);\n   }\n };\n "}, {"sha": "b658a532b988809f7cb9a23a5d4daee33110c943", "filename": "gcc/rust/ast/rust-type.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/443d4d1f7cf6aa1570670e728b0cb59aada0e10f/gcc%2Frust%2Fast%2Frust-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/443d4d1f7cf6aa1570670e728b0cb59aada0e10f/gcc%2Frust%2Fast%2Frust-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-type.h?ref=443d4d1f7cf6aa1570670e728b0cb59aada0e10f", "patch": "@@ -50,7 +50,18 @@ class TraitBound : public TypeParamBound\n \t      bool opening_question_mark = false,\n \t      std::vector<LifetimeParam> for_lifetimes\n \t      = std::vector<LifetimeParam> ())\n-    : in_parens (in_parens), opening_question_mark (opening_question_mark),\n+    : TypeParamBound (Analysis::Mappings::get ()->get_next_node_id ()),\n+      in_parens (in_parens), opening_question_mark (opening_question_mark),\n+      for_lifetimes (std::move (for_lifetimes)),\n+      type_path (std::move (type_path)), locus (locus)\n+  {}\n+\n+  TraitBound (NodeId id, TypePath type_path, Location locus,\n+\t      bool in_parens = false, bool opening_question_mark = false,\n+\t      std::vector<LifetimeParam> for_lifetimes\n+\t      = std::vector<LifetimeParam> ())\n+    : TypeParamBound (id), in_parens (in_parens),\n+      opening_question_mark (opening_question_mark),\n       for_lifetimes (std::move (for_lifetimes)),\n       type_path (std::move (type_path)), locus (locus)\n   {}\n@@ -59,6 +70,8 @@ class TraitBound : public TypeParamBound\n \n   Location get_locus () const { return locus; }\n \n+  Location get_locus_slow () const override final { return get_locus (); }\n+\n   void accept_vis (ASTVisitor &vis) override;\n \n   // TODO: this mutable getter seems kinda dodgy\n@@ -73,7 +86,8 @@ class TraitBound : public TypeParamBound\n    * than base */\n   TraitBound *clone_type_param_bound_impl () const override\n   {\n-    return new TraitBound (*this);\n+    return new TraitBound (node_id, type_path, locus, in_parens,\n+\t\t\t   opening_question_mark, for_lifetimes);\n   }\n };\n "}]}