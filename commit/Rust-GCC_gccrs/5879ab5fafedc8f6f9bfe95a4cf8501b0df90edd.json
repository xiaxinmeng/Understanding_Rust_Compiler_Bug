{"sha": "5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg3OWFiNWZhZmVkYzhmNmY5YmZlOTVhNGNmODUwMWIwZGY5MGVkZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-23T11:35:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-23T11:35:16Z"}, "message": "re PR tree-optimization/88440 (size optimization of memcpy-like code)\n\n2019-05-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88440\n\t* opts.c (default_options_table): Enable -ftree-loop-distribute-patterns\n\tat -O[2s]+.\n\t* tree-loop-distribution.c (generate_memset_builtin): Fold the\n\tgenerated call.\n\t(generate_memcpy_builtin): Likewise.\n\t(distribute_loop): Pass in whether to only distribute patterns.\n\t(prepare_perfect_loop_nest): Also allow size optimization.\n\t(pass_loop_distribution::execute): When optimizing a loop\n\tnest for size allow pattern replacement.\n\n\t* gcc.dg/tree-ssa/ldist-37.c: New testcase.\n\t* gcc.dg/tree-ssa/ldist-38.c: Likewise.\n\t* gcc.dg/vect/vect.exp: Add -fno-tree-loop-distribute-patterns.\n\t* gcc.dg/tree-ssa/ldist-37.c: Adjust.\n\t* gcc.dg/tree-ssa/ldist-38.c: Likewise.\n\t* g++.dg/tree-ssa/pr78847.C: Likewise.\n\t* gcc.dg/autopar/pr39500-1.c: Likewise.\n\t* gcc.dg/autopar/reduc-1char.c: Likewise.\n\t* gcc.dg/autopar/reduc-7.c: Likewise.\n\t* gcc.dg/tree-ssa/ivopts-lt-2.c: Likewise.\n\t* gcc.dg/tree-ssa/ivopts-lt.c: Likewise.\n\t* gcc.dg/tree-ssa/predcom-dse-1.c: Likewise.\n\t* gcc.dg/tree-ssa/predcom-dse-2.c: Likewise.\n\t* gcc.dg/tree-ssa/predcom-dse-3.c: Likewise.\n\t* gcc.dg/tree-ssa/predcom-dse-4.c: Likewise.\n\t* gcc.dg/tree-ssa/prefetch-7.c: Likewise.\n\t* gcc.dg/tree-ssa/prefetch-8.c: Likewise.\n\t* gcc.dg/tree-ssa/prefetch-9.c: Likewise.\n\t* gcc.dg/tree-ssa/scev-11.c: Likewise.\n\t* gcc.dg/vect/costmodel/i386/costmodel-vect-31.c: Likewise.\n\t* gcc.dg/vect/costmodel/i386/costmodel-vect-33.c: Likewise.\n\t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-31.c: Likewise.\n\t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-33.c: Likewise.\n\t* gcc.target/i386/pr30970.c: Likewise.\n\t* gcc.target/i386/vect-double-1.c: Likewise.\n\t* gcc.target/i386/vect-double-2.c: Likewise.\n\t* gcc.dg/tree-ssa/gen-vect-2.c: Likewise.\n\t* gcc.dg/tree-ssa/gen-vect-26.c: Likewise.\n\t* gcc.dg/tree-ssa/gen-vect-28.c: Likewise.\n\t* gcc.dg/tree-ssa/gen-vect-32.c: Likewise.\n\t* gfortran.dg/vect/vect-5.f90: Likewise.\n\t* gfortran.dg/vect/vect-8.f90: Likewise.\n\nFrom-SVN: r271553", "tree": {"sha": "e886bbae2a64b230962aaf93a1c7ceb9b88ece6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e886bbae2a64b230962aaf93a1c7ceb9b88ece6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32d941139e8144662e0dc182d64e3f3f9df89ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32d941139e8144662e0dc182d64e3f3f9df89ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32d941139e8144662e0dc182d64e3f3f9df89ad4"}], "stats": {"total": 135, "additions": 97, "deletions": 38}, "files": [{"sha": "695f9c4bb60b1dbc8c9414d3195bfce0221b6059", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,3 +1,16 @@\n+2019-05-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88440\n+\t* opts.c (default_options_table): Enable -ftree-loop-distribute-patterns\n+\tat -O[2s]+.\n+\t* tree-loop-distribution.c (generate_memset_builtin): Fold the\n+\tgenerated call.\n+\t(generate_memcpy_builtin): Likewise.\n+\t(distribute_loop): Pass in whether to only distribute patterns.\n+\t(prepare_perfect_loop_nest): Also allow size optimization.\n+\t(pass_loop_distribution::execute): When optimizing a loop\n+\tnest for size allow pattern replacement.\n+\n 2019-05-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/90568"}, {"sha": "2e3e8b20537f6b034813bc506e1d6a8d11261f59", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -550,7 +550,7 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_3_PLUS, OPT_fpredictive_commoning, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_fsplit_loops, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_fsplit_paths, NULL, 1 },\n-    { OPT_LEVELS_3_PLUS, OPT_ftree_loop_distribute_patterns, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_ftree_loop_distribute_patterns, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_ftree_loop_distribution, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_ftree_loop_vectorize, NULL, 1 },\n     { OPT_LEVELS_3_PLUS, OPT_ftree_partial_pre, NULL, 1 },"}, {"sha": "01afd3b5b0a838875ba8b8e8d3ca95f942225f47", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,3 +1,39 @@\n+2019-05-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88440\n+\t* gcc.dg/tree-ssa/ldist-37.c: New testcase.\n+\t* gcc.dg/tree-ssa/ldist-38.c: Likewise.\n+\t* gcc.dg/vect/vect.exp: Add -fno-tree-loop-distribute-patterns.\n+\t* gcc.dg/tree-ssa/ldist-37.c: Adjust.\n+\t* gcc.dg/tree-ssa/ldist-38.c: Likewise.\n+\t* g++.dg/tree-ssa/pr78847.C: Likewise.\n+\t* gcc.dg/autopar/pr39500-1.c: Likewise.\n+\t* gcc.dg/autopar/reduc-1char.c: Likewise.\n+\t* gcc.dg/autopar/reduc-7.c: Likewise.\n+\t* gcc.dg/tree-ssa/ivopts-lt-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/ivopts-lt.c: Likewise.\n+\t* gcc.dg/tree-ssa/predcom-dse-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/predcom-dse-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/predcom-dse-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/predcom-dse-4.c: Likewise.\n+\t* gcc.dg/tree-ssa/prefetch-7.c: Likewise.\n+\t* gcc.dg/tree-ssa/prefetch-8.c: Likewise.\n+\t* gcc.dg/tree-ssa/prefetch-9.c: Likewise.\n+\t* gcc.dg/tree-ssa/scev-11.c: Likewise.\n+\t* gcc.dg/vect/costmodel/i386/costmodel-vect-31.c: Likewise.\n+\t* gcc.dg/vect/costmodel/i386/costmodel-vect-33.c: Likewise.\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-31.c: Likewise.\n+\t* gcc.dg/vect/costmodel/x86_64/costmodel-vect-33.c: Likewise.\n+\t* gcc.target/i386/pr30970.c: Likewise.\n+\t* gcc.target/i386/vect-double-1.c: Likewise.\n+\t* gcc.target/i386/vect-double-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/gen-vect-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/gen-vect-26.c: Likewise.\n+\t* gcc.dg/tree-ssa/gen-vect-28.c: Likewise.\n+\t* gcc.dg/tree-ssa/gen-vect-32.c: Likewise.\n+\t* gfortran.dg/vect/vect-5.f90: Likewise.\n+\t* gfortran.dg/vect/vect-8.f90: Likewise.\n+\n 2019-05-23  Martin Liska  <mliska@suse.cz>\n \n \tPR sanitizer/90570"}, {"sha": "e72e516d8d4b937081ec020ca442a1e10594ab3d", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr78847.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr78847.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr78847.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr78847.C?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target c++14 } */\n-/* { dg-options \"-O3 -fdump-tree-ldist\" } */\n+/* { dg-options \"-O3 -fdump-tree-ldist-optimized\" } */\n \n #include <stddef.h>\n #include <cstring>\n@@ -23,4 +23,4 @@ void testWithLoopValue(const Foo foo, size_t ptr, char *buf_) {\n       buf_[ptr++] = c;\n }\n \n-/* { dg-final { scan-tree-dump \"memcpy\\[^\\n\\r\\]*, 9\\\\);\" \"ldist\" } } */\n+/* { dg-final { scan-tree-dump \"split to 0 loops and 1 library calls\" \"ldist\" } } */"}, {"sha": "80ae92522dbe4f3a3e467f4284f606f9d398dc11", "filename": "gcc/testsuite/gcc.dg/autopar/pr39500-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr39500-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr39500-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Fpr39500-1.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,7 +1,7 @@\n /* pr39500: autopar fails to parallel */\n /* origin: nemokingdom@gmail.com(LiFeng) */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-parallelize-loops=4 -fdump-tree-parloops2-details\" } */\n+/* { dg-options \"-O2 -fno-tree-loop-distribute-patterns -ftree-parallelize-loops=4 -fdump-tree-parloops2-details\" } */\n \n void abort (void);\n "}, {"sha": "a340240b86bd8fe66ae7b6ddf7e007dea74baf02", "filename": "gcc/testsuite/gcc.dg/autopar/reduc-1char.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-1char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-1char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-1char.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -61,5 +61,5 @@ int main (void)\n \n \n /* { dg-final { scan-tree-dump-times \"Detected reduction\" 3 \"parloops2\" } } */\n-/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 4 \"parloops2\" } } */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops2\" } } */\n "}, {"sha": "85b9437298bd447c428a67f5a12981621f0eff09", "filename": "gcc/testsuite/gcc.dg/autopar/reduc-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fautopar%2Freduc-7.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -85,5 +85,5 @@ int main (void)\n \n \n /* { dg-final { scan-tree-dump-times \"Detected reduction\" 2 \"parloops2\" } } */\n-/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops2\" } } */\n+/* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 2 \"parloops2\" } } */\n "}, {"sha": "42171a2fbf385ea9ab90e013c51ff6cd8dc718e0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-2.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target vect_cmdline_needed } } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details -fvect-cost-model=dynamic\" } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details -fvect-cost-model=dynamic -mno-sse\" { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-options \"-O2 -fno-tree-loop-distribute-patterns -ftree-vectorize -fdump-tree-vect-details -fvect-cost-model=dynamic\" } */\n+/* { dg-additional-options \"-mno-sse\" { target { i?86-*-* x86_64-*-* } } } */\n \n #include <stdlib.h>\n "}, {"sha": "242316893c030a7af3287d855695d2a79d288341", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-26.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-26.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target vect_cmdline_needed } } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details -fvect-cost-model=dynamic\" } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details -fvect-cost-model=dynamic -mno-sse\" { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-options \"-O2 -fno-tree-loop-distribute-patterns -ftree-vectorize -fdump-tree-vect-details -fvect-cost-model=dynamic\" } */\n+/* { dg-additional-options \"-mno-sse\" { target { i?86-*-* x86_64-*-* } } } */\n \n #include <stdlib.h>\n "}, {"sha": "24853e0e0db6d0a5717f4c545101569ccebce259", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-28.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-28.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run { target vect_cmdline_needed } } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details -fvect-cost-model=dynamic\" } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details -fvect-cost-model=dynamic -mno-sse\" { target { i?86-*-* x86_64-*-* } } } */\n+/* { dg-options \"-O2 -fno-tree-loop-distribute-patterns -ftree-vectorize -fdump-tree-vect-details -fvect-cost-model=dynamic\" } */\n+/* { dg-additional-options \"-mno-sse\" { target { i?86-*-* x86_64-*-* } } } */\n \n #include <stdlib.h>\n "}, {"sha": "c4bee19b75aba447cca4d2c25092b8d8f2d1d297", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-32.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target vect_cmdline_needed } } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details -fno-vect-cost-model\" } */\n+/* { dg-options \"-O2 -fno-tree-loop-distribute-patterns -ftree-vectorize -fdump-tree-vect-details -fno-vect-cost-model\" } */\n /* { dg-additional-options \"-mno-sse\" { target { i?86-*-* x86_64-*-* } } } */\n \n #include <stdlib.h>"}, {"sha": "bdbdbff19ffbf32c365e269ef11f94bc7d9cece8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopts-lt-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-lt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-lt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-lt-2.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-ivopts\" } */\n+/* { dg-options \"-O2 -fno-tree-loop-distribute-patterns -fdump-tree-ivopts\" } */\n /* { dg-skip-if \"PR68644\" { hppa*-*-* powerpc*-*-* } } */\n \n void"}, {"sha": "7d5859b3fce98aaf6811678cad0d5670ce59adca", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopts-lt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-lt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-lt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopts-lt.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-ivopts\" } */\n+/* { dg-options \"-O2 -fno-tree-loop-distribute-patterns -fdump-tree-ivopts\" } */\n /* { dg-require-effective-target stdint_types } */\n \n #include \"stdint.h\""}, {"sha": "b61b651fca85f74ec34179f5b0e9afc067410d30", "filename": "gcc/testsuite/gcc.dg/tree-ssa/predcom-dse-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-dse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-dse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-dse-1.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fno-inline -fpredictive-commoning -fdump-tree-pcom-details\" } */\n+/* { dg-options \"-O2 -fno-inline -fno-tree-loop-distribute-patterns -fpredictive-commoning -fdump-tree-pcom-details\" } */\n \n int arr[105] = {2, 3, 5, 7, 11};\n int result0[10] = {2, 3, 5, 7, 11};"}, {"sha": "7f959a833f4a26bf268aac93253abb08b7187aa1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/predcom-dse-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-dse-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-dse-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-dse-2.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fno-inline -fpredictive-commoning -fdump-tree-pcom-details\" } */\n+/* { dg-options \"-O2 -fno-inline -fno-tree-loop-distribute-patterns -fpredictive-commoning -fdump-tree-pcom-details\" } */\n \n int arr[105] = {2, 3, 5, 7, 11};\n int result0[10] = {2, 3, 5, 7, 11};"}, {"sha": "ec08d6c0318245e1b5eec067f51a683103470920", "filename": "gcc/testsuite/gcc.dg/tree-ssa/predcom-dse-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-dse-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-dse-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-dse-3.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fno-inline -fpredictive-commoning -fdump-tree-pcom-details\" } */\n+/* { dg-options \"-O2 -fno-inline -fno-tree-loop-distribute-patterns -fpredictive-commoning -fdump-tree-pcom-details\" } */\n \n int arr1[105] = {2, 3, 5, 7, 11, 13, 0};\n int arr2[105] = {2, 3, 5, 7, 11, 13, 0};"}, {"sha": "f97d32f4b41dd2b5bbeb80ab577d9c805331d664", "filename": "gcc/testsuite/gcc.dg/tree-ssa/predcom-dse-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-dse-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-dse-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpredcom-dse-4.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fno-inline -fpredictive-commoning -fdump-tree-pcom-details\" } */\n+/* { dg-options \"-O2 -fno-inline -fno-tree-loop-distribute-patterns -fpredictive-commoning -fdump-tree-pcom-details\" } */\n \n int arr[105] = {2, 3, 5, 7, 11};\n int result0[10] = {2, 3, 5, 7, 11};"}, {"sha": "26de8719dc2b89278de92457739290dcbcecac80", "filename": "gcc/testsuite/gcc.dg/tree-ssa/prefetch-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-7.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { i?86-*-* x86_64-*-* } } } */\n-/* { dg-options \"-O2 -fprefetch-loop-arrays -march=amdfam10 --param simultaneous-prefetches=100 -fdump-tree-aprefetch-details -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fno-tree-loop-distribute-patterns -fprefetch-loop-arrays -march=amdfam10 --param simultaneous-prefetches=100 -fdump-tree-aprefetch-details -fdump-tree-optimized\" } */\n \n #define K 1000000\n int a[K];"}, {"sha": "cbd6a80d3459a26aab4392174ac362d1b938123a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/prefetch-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-8.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { i?86-*-* x86_64-*-* } } } */\n-/* { dg-options \"-O2 -fprefetch-loop-arrays -march=amdfam10 --param simultaneous-prefetches=100 -fdump-tree-aprefetch-details -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fno-tree-loop-distribute-patterns -fprefetch-loop-arrays -march=amdfam10 --param simultaneous-prefetches=100 -fdump-tree-aprefetch-details -fdump-tree-optimized\" } */\n \n #define K 1000000\n int a[K];"}, {"sha": "da4847320b1fdb6b760ed8c48e10e76136404437", "filename": "gcc/testsuite/gcc.dg/tree-ssa/prefetch-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fprefetch-9.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target { i?86-*-* x86_64-*-* } } } */\n-/* { dg-options \"-O2 -fprefetch-loop-arrays -march=amdfam10 --param simultaneous-prefetches=100 -fdump-tree-aprefetch-details -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fno-tree-loop-distribute-patterns -fprefetch-loop-arrays -march=amdfam10 --param simultaneous-prefetches=100 -fdump-tree-aprefetch-details -fdump-tree-optimized\" } */\n \n #define K 1000000\n int a[K], b[K];"}, {"sha": "2336239652e5f0fd7b9e431a469886b597ca3fe7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/scev-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fscev-11.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -15,7 +15,7 @@ foo (int n)\n     {\n       unsigned char uc = (unsigned char)i;\n       a[i] = i;\n-      b[uc] = 0;\n+      b[uc] = 1;\n     }\n \n   bar (a);"}, {"sha": "cc50a5bde01315be13058ac3409db07f4ce6de5f", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/i386/costmodel-vect-31.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-31.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"-fno-tree-loop-distribute-patterns\" } */\n \n #include <stdarg.h>\n #include \"../../tree-vect.h\""}, {"sha": "b82b8916be125b194a02aa74cef74f821796de7f", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/i386/costmodel-vect-33.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fi386%2Fcostmodel-vect-33.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"-fno-tree-loop-distribute-patterns\" } */\n \n #include <stdarg.h>\n #include \"../../tree-vect.h\""}, {"sha": "cc50a5bde01315be13058ac3409db07f4ce6de5f", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-vect-31.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-31.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"-fno-tree-loop-distribute-patterns\" } */\n \n #include <stdarg.h>\n #include \"../../tree-vect.h\""}, {"sha": "5e4affae7db61a0a07568603f1c80aefaf819adb", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-vect-33.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-vect-33.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_int } */\n+/* { dg-additional-options \"-fno-tree-loop-distribute-patterns\" } */\n \n #include <stdarg.h>\n #include \"../../tree-vect.h\""}, {"sha": "9569ea5c02f1b92fef091ec9b4267183b7a44784", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -45,7 +45,7 @@ if ![check_vect_support_and_set_flags] {\n }\n \n # These flags are used for all targets.\n-lappend DEFAULT_VECTCFLAGS \"-ftree-vectorize\" \"-fno-vect-cost-model\" \"-fno-common\"\n+lappend DEFAULT_VECTCFLAGS \"-ftree-vectorize\" \"-fno-tree-loop-distribute-patterns\" \"-fno-vect-cost-model\" \"-fno-common\"\n \n # Initialize `dg'.\n dg-init"}, {"sha": "263db5e05a6809a3519e40ec89d5de581a3be267", "filename": "gcc/testsuite/gcc.target/i386/pr30970.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30970.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30970.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr30970.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile }\n-/* { dg-options \"-msse2 -O2 -ftree-vectorize -mtune=generic\" } */\n+/* { dg-options \"-msse2 -O2 -fno-tree-loop-distribute-patterns -ftree-vectorize -mtune=generic\" } */\n \n #define N 256\n int b[N];"}, {"sha": "180274c20a171589cfdc8291ab9781c989da444d", "filename": "gcc/testsuite/gcc.target/i386/vect-double-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-1.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-march=*\" } { \"-march=core2\" } } */\n-/* { dg-options \"-O2 -ftree-vectorize -mfpmath=sse -march=core2 -fdump-tree-vect-stats\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-tree-loop-distribute-patterns -mfpmath=sse -march=core2 -fdump-tree-vect-stats\" } */\n /* { dg-add-options bind_pic_locally } */\n \n extern void abort (void);"}, {"sha": "eea53bfa6b1132a93ea7a9f54a34a108c8c76158", "filename": "gcc/testsuite/gcc.target/i386/vect-double-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-double-2.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -mfpmath=sse -msse2 -mtune=atom -fdump-tree-vect-stats\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-tree-loop-distribute-patterns -mfpmath=sse -msse2 -mtune=atom -fdump-tree-vect-stats\" } */\n \n extern void abort (void);\n "}, {"sha": "b11cabaee23d78476f3702fdcb8a74e47e685784", "filename": "gcc/testsuite/gfortran.dg/vect/vect-5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-5.f90?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,5 +1,5 @@\n ! { dg-require-effective-target vect_int }\n-! { dg-additional-options \"--param vect-max-peeling-for-alignment=0\" }\n+! { dg-additional-options \"-fno-tree-loop-distribute-patterns --param vect-max-peeling-for-alignment=0\" }\n \n         Subroutine foo (N, M)\n         Integer N"}, {"sha": "e26cdf95e5158152c790dcaed420ef6ddae4849f", "filename": "gcc/testsuite/gfortran.dg/vect/vect-8.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do compile }\n ! { dg-require-effective-target vect_double }\n-! { dg-additional-options \"-finline-matmul-limit=0\" }\n+! { dg-additional-options \"-fno-tree-loop-distribute-patterns -finline-matmul-limit=0\" }\n \n module lfk_prec\n  integer, parameter :: dp=kind(1.d0)"}, {"sha": "5f03b87f9c1aa5cb325f7e170841d782750e3d28", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd", "patch": "@@ -115,6 +115,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"tree-vectorizer.h\"\n #include \"tree-eh.h\"\n+#include \"gimple-fold.h\"\n \n \n #define MAX_DATAREFS_NUM \\\n@@ -1028,6 +1029,7 @@ generate_memset_builtin (struct loop *loop, partition *partition)\n   fn = build_fold_addr_expr (builtin_decl_implicit (BUILT_IN_MEMSET));\n   fn_call = gimple_build_call (fn, 3, mem, val, nb_bytes);\n   gsi_insert_after (&gsi, fn_call, GSI_CONTINUE_LINKING);\n+  fold_stmt (&gsi);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -1071,6 +1073,7 @@ generate_memcpy_builtin (struct loop *loop, partition *partition)\n   fn = build_fold_addr_expr (builtin_decl_implicit (kind));\n   fn_call = gimple_build_call (fn, 3, dest, src, nb_bytes);\n   gsi_insert_after (&gsi, fn_call, GSI_CONTINUE_LINKING);\n+  fold_stmt (&gsi);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -2769,7 +2772,8 @@ finalize_partitions (struct loop *loop, vec<struct partition *> *partitions,\n \n static int\n distribute_loop (struct loop *loop, vec<gimple *> stmts,\n-\t\t control_dependences *cd, int *nb_calls, bool *destroy_p)\n+\t\t control_dependences *cd, int *nb_calls, bool *destroy_p,\n+\t\t bool only_patterns_p)\n {\n   ddrs_table = new hash_table<ddr_hasher> (389);\n   struct graph *rdg;\n@@ -2843,7 +2847,7 @@ distribute_loop (struct loop *loop, vec<gimple *> stmts,\n \n   /* If we are only distributing patterns but did not detect any,\n      simply bail out.  */\n-  if (!flag_tree_loop_distribution\n+  if (only_patterns_p\n       && !any_builtin)\n     {\n       nbp = 0;\n@@ -2855,7 +2859,7 @@ distribute_loop (struct loop *loop, vec<gimple *> stmts,\n      a loop into pieces, separated by builtin calls.  That is, we\n      only want no or a single loop body remaining.  */\n   struct partition *into;\n-  if (!flag_tree_loop_distribution)\n+  if (only_patterns_p)\n     {\n       for (i = 0; partitions.iterate (i, &into); ++i)\n \tif (!partition_builtin_p (into))\n@@ -3085,7 +3089,6 @@ prepare_perfect_loop_nest (struct loop *loop)\n \t && loop_outer (outer)\n \t && outer->inner == loop && loop->next == NULL\n \t && single_exit (outer)\n-\t && optimize_loop_for_speed_p (outer)\n \t && !chrec_contains_symbols_defined_in_loop (niters, outer->num)\n \t && (niters = number_of_latch_executions (outer)) != NULL_TREE\n \t && niters != chrec_dont_know)\n@@ -3139,9 +3142,11 @@ pass_loop_distribution::execute (function *fun)\n      walking to innermost loops.  */\n   FOR_EACH_LOOP (loop, LI_ONLY_INNERMOST)\n     {\n-      /* Don't distribute multiple exit edges loop, or cold loop.  */\n+      /* Don't distribute multiple exit edges loop, or cold loop when\n+         not doing pattern detection.  */\n       if (!single_exit (loop)\n-\t  || !optimize_loop_for_speed_p (loop))\n+\t  || (!flag_tree_loop_distribute_patterns\n+\t      && !optimize_loop_for_speed_p (loop)))\n \tcontinue;\n \n       /* Don't distribute loop if niters is unknown.  */\n@@ -3169,9 +3174,10 @@ pass_loop_distribution::execute (function *fun)\n \n \t  bool destroy_p;\n \t  int nb_generated_loops, nb_generated_calls;\n-\t  nb_generated_loops = distribute_loop (loop, work_list, cd,\n-\t\t\t\t\t\t&nb_generated_calls,\n-\t\t\t\t\t\t&destroy_p);\n+\t  nb_generated_loops\n+\t    = distribute_loop (loop, work_list, cd, &nb_generated_calls,\n+\t\t\t       &destroy_p, (!optimize_loop_for_speed_p (loop)\n+\t\t\t\t\t    || !flag_tree_loop_distribution));\n \t  if (destroy_p)\n \t    loops_to_be_destroyed.safe_push (loop);\n "}]}