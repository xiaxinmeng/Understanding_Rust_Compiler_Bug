{"sha": "347e1f77696d8d69db2c9e66bba6e48662de8343", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3ZTFmNzc2OTZkOGQ2OWRiMmM5ZTY2YmJhNmU0ODY2MmRlODM0Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-04-11T20:51:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-04-11T20:51:16Z"}, "message": "re PR c++/80370 (ICE when using structured bindings and nested generic lambdas (tsubst_decomp_names))\n\n\tPR c++/80370\n\t* decl.c (cp_finish_decomp): If processing_template_decl on\n\tnon-dependent decl, only set TREE_TYPE on the v[i] decls, but don't\n\tchange their DECL_VALUE_EXPR nor cp_finish_decl them.  Instead make\n\tsure DECL_VALUE_EXPR is the canonical NULL type ARRAY_REF for tsubst\n\tprocessing.\n\t* pt.c (value_dependent_expression_p) <case VAR_DECL>: For variables\n\twith DECL_VALUE_EXPR, return true if DECL_VALUE_EXPR is type\n\tdependent.\n\n\t* g++.dg/cpp1z/decomp28.C: New test.\n\nFrom-SVN: r246857", "tree": {"sha": "f9b49b57950c4f011bc831074c00c11202b49c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9b49b57950c4f011bc831074c00c11202b49c5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/347e1f77696d8d69db2c9e66bba6e48662de8343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347e1f77696d8d69db2c9e66bba6e48662de8343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/347e1f77696d8d69db2c9e66bba6e48662de8343", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/347e1f77696d8d69db2c9e66bba6e48662de8343/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98b5e81a05f482f0998e8565c9e9bb07cd5ad317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b5e81a05f482f0998e8565c9e9bb07cd5ad317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b5e81a05f482f0998e8565c9e9bb07cd5ad317"}], "stats": {"total": 91, "additions": 86, "deletions": 5}, "files": [{"sha": "c06b505b27b1753400b7d74b938aeccce53c02ca", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347e1f77696d8d69db2c9e66bba6e48662de8343/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347e1f77696d8d69db2c9e66bba6e48662de8343/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=347e1f77696d8d69db2c9e66bba6e48662de8343", "patch": "@@ -1,3 +1,15 @@\n+2017-04-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/80370\n+\t* decl.c (cp_finish_decomp): If processing_template_decl on\n+\tnon-dependent decl, only set TREE_TYPE on the v[i] decls, but don't\n+\tchange their DECL_VALUE_EXPR nor cp_finish_decl them.  Instead make\n+\tsure DECL_VALUE_EXPR is the canonical NULL type ARRAY_REF for tsubst\n+\tprocessing.\n+\t* pt.c (value_dependent_expression_p) <case VAR_DECL>: For variables\n+\twith DECL_VALUE_EXPR, return true if DECL_VALUE_EXPR is type\n+\tdependent.\n+\n 2017-04-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/80363"}, {"sha": "438a4ec1c510b7e94b52a1eb022c3a79c69382e1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347e1f77696d8d69db2c9e66bba6e48662de8343/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347e1f77696d8d69db2c9e66bba6e48662de8343/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=347e1f77696d8d69db2c9e66bba6e48662de8343", "patch": "@@ -7473,6 +7473,8 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t{\n \t  TREE_TYPE (v[i]) = eltype;\n \t  layout_decl (v[i], 0);\n+\t  if (processing_template_decl)\n+\t    continue;\n \t  tree t = unshare_expr (dexp);\n \t  t = build4_loc (DECL_SOURCE_LOCATION (v[i]), ARRAY_REF,\n \t\t\t  eltype, t, size_int (i), NULL_TREE,\n@@ -7492,6 +7494,8 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t{\n \t  TREE_TYPE (v[i]) = eltype;\n \t  layout_decl (v[i], 0);\n+\t  if (processing_template_decl)\n+\t    continue;\n \t  tree t = unshare_expr (dexp);\n \t  t = build1_loc (DECL_SOURCE_LOCATION (v[i]),\n \t\t\t  i ? IMAGPART_EXPR : REALPART_EXPR, eltype,\n@@ -7510,6 +7514,8 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t{\n \t  TREE_TYPE (v[i]) = eltype;\n \t  layout_decl (v[i], 0);\n+\t  if (processing_template_decl)\n+\t    continue;\n \t  tree t = unshare_expr (dexp);\n \t  convert_vector_to_array_for_subscript (DECL_SOURCE_LOCATION (v[i]),\n \t\t\t\t\t\t &t, size_int (i));\n@@ -7559,8 +7565,9 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t      SET_DECL_VALUE_EXPR (v[i], NULL_TREE);\n \t      DECL_HAS_VALUE_EXPR_P (v[i]) = 0;\n \t    }\n-\t  cp_finish_decl (v[i], init, /*constexpr*/false,\n-\t\t\t  /*asm*/NULL_TREE, LOOKUP_NORMAL);\n+\t  if (!processing_template_decl)\n+\t    cp_finish_decl (v[i], init, /*constexpr*/false,\n+\t\t\t    /*asm*/NULL_TREE, LOOKUP_NORMAL);\n \t}\n     }\n   else if (TREE_CODE (type) == UNION_TYPE)\n@@ -7615,12 +7622,26 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t      tt = TREE_OPERAND (tt, 0);\n \t    TREE_TYPE (v[i]) = TREE_TYPE (tt);\n \t    layout_decl (v[i], 0);\n-\t    SET_DECL_VALUE_EXPR (v[i], tt);\n-\t    DECL_HAS_VALUE_EXPR_P (v[i]) = 1;\n+\t    if (!processing_template_decl)\n+\t      {\n+\t\tSET_DECL_VALUE_EXPR (v[i], tt);\n+\t\tDECL_HAS_VALUE_EXPR_P (v[i]) = 1;\n+\t      }\n \t    i++;\n \t  }\n     }\n-  if (DECL_NAMESPACE_SCOPE_P (decl))\n+  if (processing_template_decl)\n+    {\n+      for (unsigned int i = 0; i < count; i++)\n+\tif (!DECL_HAS_VALUE_EXPR_P (v[i]))\n+\t  {\n+\t    tree a = build_nt (ARRAY_REF, decl, size_int (i),\n+\t\t\t       NULL_TREE, NULL_TREE);\n+\t    SET_DECL_VALUE_EXPR (v[i], a);\n+\t    DECL_HAS_VALUE_EXPR_P (v[i]) = 1;\n+\t  }\n+    }\n+  else if (DECL_NAMESPACE_SCOPE_P (decl))\n     SET_DECL_ASSEMBLER_NAME (decl, mangle_decomp (decl, v));\n }\n "}, {"sha": "862c2c2c08c433faf654cd089eb1b2b904573752", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347e1f77696d8d69db2c9e66bba6e48662de8343/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347e1f77696d8d69db2c9e66bba6e48662de8343/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=347e1f77696d8d69db2c9e66bba6e48662de8343", "patch": "@@ -23576,6 +23576,12 @@ value_dependent_expression_p (tree expression)\n \t      || type_dependent_expression_p (DECL_INITIAL (expression))\n \t      || value_dependent_expression_p (DECL_INITIAL (expression))))\n \treturn true;\n+      if (DECL_HAS_VALUE_EXPR_P (expression))\n+\t{\n+\t  tree value_expr = DECL_VALUE_EXPR (expression);\n+\t  if (type_dependent_expression_p (value_expr))\n+\t    return true;\n+\t}\n       return false;\n \n     case DYNAMIC_CAST_EXPR:"}, {"sha": "354adb043148599c688224e3b403de83470a3ed6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347e1f77696d8d69db2c9e66bba6e48662de8343/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347e1f77696d8d69db2c9e66bba6e48662de8343/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=347e1f77696d8d69db2c9e66bba6e48662de8343", "patch": "@@ -1,5 +1,8 @@\n 2017-04-11  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/80370\n+\t* g++.dg/cpp1z/decomp28.C: New test.\n+\n \tPR middle-end/80100\n \t* gcc.dg/pr80100.c: New test.\n "}, {"sha": "7561d9dfc02c695843f187375b080006b7636f0f", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp28.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/347e1f77696d8d69db2c9e66bba6e48662de8343/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/347e1f77696d8d69db2c9e66bba6e48662de8343/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp28.C?ref=347e1f77696d8d69db2c9e66bba6e48662de8343", "patch": "@@ -0,0 +1,39 @@\n+// PR c++/80370\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"\" }\n+\n+namespace std {\n+  template <typename> struct tuple_size;\n+  template <long, typename> struct tuple_element;\n+  template <typename...> struct tuple {};\n+  template <typename... T> struct tuple_size<tuple<T...>> { static constexpr int value = 1; };\n+  template <typename T, typename... U> struct tuple_element<0, tuple<T, U...>> { typedef T type; };\n+  template <int, typename... T> int& get (tuple<T...>);\n+}\n+\n+template <int N>\n+void\n+foo (std::tuple<int> b)\n+{\n+  auto [c] = b;\t\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+}\n+\n+template <typename T>\n+void\n+bar (std::tuple<T> b)\n+{\n+  auto [c] = b;\t\t// { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+}\n+\n+void\n+baz (std::tuple<int> b)\n+{\n+  foo <5> (b);\n+  bar (b);\n+}\n+\n+int\n+main ()\n+{\n+  [](auto) { [](std::tuple<int> b) { auto[c] = b; }; } (0); // { dg-warning \"decomposition declaration only available with\" \"\" { target c++14_down } }\n+}"}]}