{"sha": "184d0451c491493927816b41dc0b9eebd63601eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg0ZDA0NTFjNDkxNDkzOTI3ODE2YjQxZGMwYjllZWJkNjM2MDFlYg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-10-09T15:05:59Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-10-09T15:05:59Z"}, "message": "[Ada] Fix expansion of operations on nonbinary modular types\n\n2018-10-09  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch4.adb (Expand_Modular_Op): When expanding an operation\n\ton nonbinary modular types, convert the opersnds to an integer\n\ttype that is large enough to hold the modulus of the type, which\n\tmay be larger than Integer'Last.\n\nFrom-SVN: r264973", "tree": {"sha": "3ea0782e0c02d213421752d9f21a785be0e78232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ea0782e0c02d213421752d9f21a785be0e78232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/184d0451c491493927816b41dc0b9eebd63601eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/184d0451c491493927816b41dc0b9eebd63601eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/184d0451c491493927816b41dc0b9eebd63601eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/184d0451c491493927816b41dc0b9eebd63601eb/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e25affdbd810a3a40cc078d2a6415dd4b3baf7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e25affdbd810a3a40cc078d2a6415dd4b3baf7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e25affdbd810a3a40cc078d2a6415dd4b3baf7b"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "bad846033564111a17d7d36f4b894e5cad747021", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/184d0451c491493927816b41dc0b9eebd63601eb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/184d0451c491493927816b41dc0b9eebd63601eb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=184d0451c491493927816b41dc0b9eebd63601eb", "patch": "@@ -1,3 +1,10 @@\n+2018-10-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_Modular_Op): When expanding an operation\n+\ton nonbinary modular types, convert the opersnds to an integer\n+\ttype that is large enough to hold the modulus of the type, which\n+\tmay be larger than Integer'Last.\n+\n 2018-10-09  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_unst.adb (Unnest_Subprogram):  When an uplevel reference"}, {"sha": "ace501b815acc8bfbf9b3150961230e8bec52586", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/184d0451c491493927816b41dc0b9eebd63601eb/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/184d0451c491493927816b41dc0b9eebd63601eb/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=184d0451c491493927816b41dc0b9eebd63601eb", "patch": "@@ -4067,6 +4067,8 @@ package body Exp_Ch4 is\n          Op_Expr  : constant Node_Id := New_Op_Node (Nkind (N), Loc);\n          Mod_Expr : constant Node_Id := New_Op_Node (N_Op_Mod, Loc);\n \n+         Target_Type   : Entity_Id;\n+\n       begin\n          --  Convert nonbinary modular type operands into integer values. Thus\n          --  we avoid never-ending loops expanding them, and we also ensure\n@@ -4083,11 +4085,21 @@ package body Exp_Ch4 is\n               Unchecked_Convert_To (Standard_Integer, Op_Expr));\n \n          else\n+            --  If the modulus of the type is larger than Integer'Last\n+            --  use a larger type for the operands, to prevent spurious\n+            --  constraint errors on large legal literals of the type.\n+\n+            if Modulus (Etype (N)) > UI_From_Int (Int (Integer'Last)) then\n+               Target_Type := Standard_Long_Integer;\n+            else\n+               Target_Type := Standard_Integer;\n+            end if;\n+\n             Set_Left_Opnd (Op_Expr,\n-              Unchecked_Convert_To (Standard_Integer,\n+              Unchecked_Convert_To (Target_Type,\n                 New_Copy_Tree (Left_Opnd (N))));\n             Set_Right_Opnd (Op_Expr,\n-              Unchecked_Convert_To (Standard_Integer,\n+              Unchecked_Convert_To (Target_Type,\n                 New_Copy_Tree (Right_Opnd (N))));\n \n             --  Link this node to the tree to analyze it"}]}