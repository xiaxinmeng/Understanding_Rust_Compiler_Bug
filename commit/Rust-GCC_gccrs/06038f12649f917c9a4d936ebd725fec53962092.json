{"sha": "06038f12649f917c9a4d936ebd725fec53962092", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYwMzhmMTI2NDlmOTE3YzlhNGQ5MzZlYmQ3MjVmZWM1Mzk2MjA5Mg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-18T03:35:35Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-18T03:35:35Z"}, "message": "(finish_struct): Promote unsigned bitfield to signed int\nif the field isn't as wide as an int.\n\nFrom-SVN: r4178", "tree": {"sha": "d4ecbbc78c21d45b2cd261d7868d32cbe8e9f6f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4ecbbc78c21d45b2cd261d7868d32cbe8e9f6f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06038f12649f917c9a4d936ebd725fec53962092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06038f12649f917c9a4d936ebd725fec53962092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06038f12649f917c9a4d936ebd725fec53962092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06038f12649f917c9a4d936ebd725fec53962092/comments", "author": null, "committer": null, "parents": [{"sha": "1815bfc25fbf311268c47ad1b19b1c0bbef7922d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1815bfc25fbf311268c47ad1b19b1c0bbef7922d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1815bfc25fbf311268c47ad1b19b1c0bbef7922d"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "9efece4d7705d18d5bab15def570472f5438df9c", "filename": "gcc/c-decl.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06038f12649f917c9a4d936ebd725fec53962092/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06038f12649f917c9a4d936ebd725fec53962092/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=06038f12649f917c9a4d936ebd725fec53962092", "patch": "@@ -5260,19 +5260,23 @@ finish_struct (t, fieldlist)\n   /* Promote each bit-field's type to int if it is narrower than that.  */\n   for (x = fieldlist; x; x = TREE_CHAIN (x))\n     if (DECL_BIT_FIELD (x)\n-\t&& C_PROMOTING_INTEGER_TYPE_P (TREE_TYPE (x)))\n-    {\n-      tree type = TREE_TYPE (x);\n-\n-      /* Preserve unsignedness if traditional or if not really any wider.  */\n-      if (TREE_UNSIGNED (type)\n-\t  && (flag_traditional\n-\t      || (TYPE_PRECISION (type)\n-\t\t  == TYPE_PRECISION (integer_type_node))))\n-\tTREE_TYPE (x) = unsigned_type_node;\n-      else\n-\tTREE_TYPE (x) = integer_type_node;\n-    }\n+\t&& (C_PROMOTING_INTEGER_TYPE_P (TREE_TYPE (x))\n+\t    || DECL_FIELD_SIZE (x) < TYPE_PRECISION (integer_type_node)))\n+      {\n+\ttree type = TREE_TYPE (x);\n+\n+\t/* Preserve unsignedness if traditional\n+\t   or if not really getting any wider.  */\n+\tif (TREE_UNSIGNED (type)\n+\t    && (flag_traditional\n+\t\t||\n+\t\t(TYPE_PRECISION (type) == TYPE_PRECISION (integer_type_node)\n+\t\t &&\n+\t\t DECL_FIELD_SIZE (x) == TYPE_PRECISION (integer_type_node))))\n+\t  TREE_TYPE (x) = unsigned_type_node;\n+\telse\n+\t  TREE_TYPE (x) = integer_type_node;\n+      }\n \n   /* If this structure or union completes the type of any previous\n      variable declaration, lay it out and output its rtl.  */"}]}