{"sha": "01da03c915f086fb9aa36b809c1a06a9f661533b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFkYTAzYzkxNWYwODZmYjlhYTM2YjgwOWMxYTA2YTlmNjYxNTMzYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-05T13:23:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-05T14:54:42Z"}, "message": "tree-optimization/98381 - fix live bool vector extract\n\nThis fixes extraction of live bool vector results for the case of\ninteger mode vectors.\n\n2021-01-05  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/98381\n\t* tree.c (vector_element_bits): Properly compute bool vector\n\telement size.\n\t* tree-vect-loop.c (vectorizable_live_operation): Properly\n\tcompute the last lane bit offset.", "tree": {"sha": "44061e426db18709683d913e9f0676fa9771a53b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44061e426db18709683d913e9f0676fa9771a53b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01da03c915f086fb9aa36b809c1a06a9f661533b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01da03c915f086fb9aa36b809c1a06a9f661533b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01da03c915f086fb9aa36b809c1a06a9f661533b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01da03c915f086fb9aa36b809c1a06a9f661533b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "965cc164f6e623c69165bd5ff4c25a762e3b03ef", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01da03c915f086fb9aa36b809c1a06a9f661533b/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01da03c915f086fb9aa36b809c1a06a9f661533b/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=01da03c915f086fb9aa36b809c1a06a9f661533b", "patch": "@@ -8494,7 +8494,7 @@ vectorizable_live_operation (vec_info *vinfo,\n {\n   loop_vec_info loop_vinfo = dyn_cast <loop_vec_info> (vinfo);\n   imm_use_iterator imm_iter;\n-  tree lhs, lhs_type, bitsize, vec_bitsize;\n+  tree lhs, lhs_type, bitsize;\n   tree vectype = (slp_node\n \t\t  ? SLP_TREE_VECTYPE (slp_node)\n \t\t  : STMT_VINFO_VECTYPE (stmt_info));\n@@ -8637,7 +8637,6 @@ vectorizable_live_operation (vec_info *vinfo,\n   lhs_type = TREE_TYPE (lhs);\n \n   bitsize = vector_element_bits_tree (vectype);\n-  vec_bitsize = TYPE_SIZE (vectype);\n \n   /* Get the vectorized lhs of STMT and the lane to use (counted in bits).  */\n   tree vec_lhs, bitstart;\n@@ -8661,7 +8660,7 @@ vectorizable_live_operation (vec_info *vinfo,\n       vec_lhs = gimple_get_lhs (vec_stmt);\n \n       /* Get the last lane in the vector.  */\n-      bitstart = int_const_binop (MINUS_EXPR, vec_bitsize, bitsize);\n+      bitstart = int_const_binop (MULT_EXPR, bitsize, bitsize_int (nunits - 1));\n     }\n \n   if (loop_vinfo)"}, {"sha": "e0a1d5120194f827cf7259edfcce6f25e30267a0", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01da03c915f086fb9aa36b809c1a06a9f661533b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01da03c915f086fb9aa36b809c1a06a9f661533b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=01da03c915f086fb9aa36b809c1a06a9f661533b", "patch": "@@ -14021,8 +14021,13 @@ vector_element_bits (const_tree type)\n {\n   gcc_checking_assert (VECTOR_TYPE_P (type));\n   if (VECTOR_BOOLEAN_TYPE_P (type))\n-    return vector_element_size (tree_to_poly_uint64 (TYPE_SIZE (type)),\n-\t\t\t\tTYPE_VECTOR_SUBPARTS (type));\n+    {\n+      if (VECTOR_MODE_P (TYPE_MODE (type)))\n+\treturn vector_element_size (tree_to_poly_uint64 (TYPE_SIZE (type)),\n+\t\t\t\t    TYPE_VECTOR_SUBPARTS (type));\n+      else\n+\treturn 1;\n+    }\n   return tree_to_uhwi (TYPE_SIZE (TREE_TYPE (type)));\n }\n "}]}