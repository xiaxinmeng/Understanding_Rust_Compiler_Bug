{"sha": "f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI4NzlhOTBlYzlmMGVjMWExMTJkNGJhYzgxZGFlMGY0ZDM1NmUwZA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-05-27T13:44:57Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-05-27T13:44:57Z"}, "message": "[AArch64] Tie operand 1 to operand 0 in AESMC pattern when AES/AESMC fusion is enabled\n\n\t* config/aarch64/aarch64.c (aarch64_fusion_enabled_p): New function.\n\t* config/aarch64/aarch64-protos.h (aarch64_fusion_enabled_p): Declare\n\tprototype.\n\t* config/aarch64/aarch64-simd.md (aarch64_crypto_aes<aesmc_op>v16qi):\n\tAdd \"=w,0\" alternative.  Enable it when AES/AESMC fusion is enabled.\n\nFrom-SVN: r236820", "tree": {"sha": "cffea8179a610d43159f46aba2d7088c8ac16b3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cffea8179a610d43159f46aba2d7088c8ac16b3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88e3bdd195b7cc070eb7525c75b748fb55920b2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e3bdd195b7cc070eb7525c75b748fb55920b2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e3bdd195b7cc070eb7525c75b748fb55920b2e"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "0474038530c91a34d6ddfb11b14413268845de0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d", "patch": "@@ -1,3 +1,11 @@\n+2016-05-27  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_fusion_enabled_p): New function.\n+\t* config/aarch64/aarch64-protos.h (aarch64_fusion_enabled_p): Declare\n+\tprototype.\n+\t* config/aarch64/aarch64-simd.md (aarch64_crypto_aes<aesmc_op>v16qi):\n+\tAdd \"=w,0\" alternative.  Enable it when AES/AESMC fusion is enabled.\n+\n 2016-05-27  Jiong Wang  <jiong.wang@arm.com>\n \n \tPR target/63596"}, {"sha": "dcf1748d82f8672fd9100f48f66cf590228b88c1", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d", "patch": "@@ -287,6 +287,7 @@ bool aarch64_constant_address_p (rtx);\n bool aarch64_expand_movmem (rtx *);\n bool aarch64_float_const_zero_rtx_p (rtx);\n bool aarch64_function_arg_regno_p (unsigned);\n+bool aarch64_fusion_enabled_p (enum aarch64_fusion_pairs);\n bool aarch64_gen_movmemqi (rtx *);\n bool aarch64_gimple_fold_builtin (gimple_stmt_iterator *);\n bool aarch64_is_extend_from_extract (machine_mode, rtx, rtx);"}, {"sha": "fe1c22bfdf7e90fda391a91dea610b39b653bfa8", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d", "patch": "@@ -5401,13 +5401,25 @@\n   [(set_attr \"type\" \"crypto_aese\")]\n )\n \n+;; When AES/AESMC fusion is enabled we want the register allocation to\n+;; look like:\n+;;    AESE Vn, _\n+;;    AESMC Vn, Vn\n+;; So prefer to tie operand 1 to operand 0 when fusing.\n+\n (define_insn \"aarch64_crypto_aes<aesmc_op>v16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=w\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"w\")]\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=w,w\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"0,w\")]\n \t CRYPTO_AESMC))]\n   \"TARGET_SIMD && TARGET_CRYPTO\"\n   \"aes<aesmc_op>\\\\t%0.16b, %1.16b\"\n-  [(set_attr \"type\" \"crypto_aesmc\")]\n+  [(set_attr \"type\" \"crypto_aesmc\")\n+   (set_attr_alternative \"enabled\"\n+     [(if_then_else (match_test\n+\t\t       \"aarch64_fusion_enabled_p (AARCH64_FUSE_AES_AESMC)\")\n+\t\t     (const_string \"yes\" )\n+\t\t     (const_string \"no\"))\n+      (const_string \"yes\")])]\n )\n \n ;; sha1"}, {"sha": "d2ac25ce339dbfb061260b8148e42a35f2d441e3", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f2879a90ec9f0ec1a112d4bac81dae0f4d356e0d", "patch": "@@ -13181,6 +13181,14 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n   return false;\n }\n \n+/* Return true iff the instruction fusion described by OP is enabled.  */\n+\n+bool\n+aarch64_fusion_enabled_p (enum aarch64_fusion_pairs op)\n+{\n+  return (aarch64_tune_params.fusible_ops & op) != 0;\n+}\n+\n /* If MEM is in the form of [base+offset], extract the two parts\n    of address and set to BASE and OFFSET, otherwise return false\n    after clearing BASE and OFFSET.  */"}]}