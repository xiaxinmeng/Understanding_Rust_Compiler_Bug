{"sha": "fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVjNzYzZmNmZGFhZDAxZTVlYmI4Y2ExZDNjY2VlMzRlZjY1ZjA5OQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-01-22T20:23:46Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-22T20:23:46Z"}, "message": "decl.c (java_init_decl_processing): Use add_predefined_file.\n\n\t* decl.c (java_init_decl_processing): Use add_predefined_file.\n\tPredefine RawData.java.\n\t(predef_filenames): Removed.\n\t(java_init_decl_processing): Don't register predef_filenames.\n\t* jcf-parse.c (add_predefined_file): New function.\n\t(predefined_filename_p): Rewrote.\n\t(predefined_filename_p): No longer static.\n\t* decl.c (java_init_decl_processing): Call initialize_builtins.\n\t* Make-lang.in (JAVA_OBJS): Added builtins.o.\n\t(java/builtins.o): New target.\n\t* builtins.c: New file.\n\t* parse.y (patch_invoke): Use build_call_or_builtin.\n\t* java-tree.h (build_call_or_builtin): Declare.\n\t(initialize_builtins): Declare.\n\t(java_set_exception_lang_code): Removed unused declaration.\n\t(PREDEF_FILENAMES_SIZE): Removed.\n\t(java_tree_index): Added JTI_PREDEF_FILENAMES.\n\t(predef_filenames): New define.\n\t(add_predefined_file): Declare.\n\t(predefined_filename_p): Declare.\n\t* expr.c (expand_invoke): Use build_call_or_builtin.\n\nFrom-SVN: r49091", "tree": {"sha": "38b316a8ea04383d07bdceb8943a04f07e0917cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38b316a8ea04383d07bdceb8943a04f07e0917cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/comments", "author": null, "committer": null, "parents": [{"sha": "9ce3f7e5d3e94dbe814dbe1d2212064cb9084014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ce3f7e5d3e94dbe814dbe1d2212064cb9084014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ce3f7e5d3e94dbe814dbe1d2212064cb9084014"}], "stats": {"total": 492, "additions": 451, "deletions": 41}, "files": [{"sha": "b2fde76b951fa701c7f35ec9dac9f1935f9d83fb", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099", "patch": "@@ -1,3 +1,27 @@\n+2002-01-22  Tom Tromey  <tromey@redhat.com>\n+\n+\t* decl.c (java_init_decl_processing): Use add_predefined_file.\n+\tPredefine RawData.java.\n+\t(predef_filenames): Removed.\n+\t(java_init_decl_processing): Don't register predef_filenames.\n+\t* jcf-parse.c (add_predefined_file): New function.\n+\t(predefined_filename_p): Rewrote.\n+\t(predefined_filename_p): No longer static.\n+\t* decl.c (java_init_decl_processing): Call initialize_builtins.\n+\t* Make-lang.in (JAVA_OBJS): Added builtins.o.\n+\t(java/builtins.o): New target.\n+\t* builtins.c: New file.\n+\t* parse.y (patch_invoke): Use build_call_or_builtin.\n+\t* java-tree.h (build_call_or_builtin): Declare.\n+\t(initialize_builtins): Declare.\n+\t(java_set_exception_lang_code): Removed unused declaration.\n+\t(PREDEF_FILENAMES_SIZE): Removed.\n+\t(java_tree_index): Added JTI_PREDEF_FILENAMES.\n+\t(predef_filenames): New define.\n+\t(add_predefined_file): Declare.\n+\t(predefined_filename_p): Declare.\n+\t* expr.c (expand_invoke): Use build_call_or_builtin.\n+\n 2002-01-22  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* parse.y (patch_switch_statement): Fix format specifier."}, {"sha": "c7fe5a9acbd5d4c26a4b41af1232c19f4898c164", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099", "patch": "@@ -101,7 +101,7 @@ $(srcdir)/java/keyword.h: $(srcdir)/java/keyword.gperf\n JAVA_OBJS = java/parse.o java/class.o java/decl.o java/expr.o \\\n   java/constants.o java/lang.o java/typeck.o java/except.o java/verify.o \\\n   java/zextract.o java/jcf-io.o java/jcf-parse.o java/mangle.o \\\n-  java/mangle_name.o \\\n+  java/mangle_name.o java/builtins.o \\\n   java/jcf-write.o java/buffer.o java/check-init.o java/jcf-depend.o \\\n   java/jcf-path.o java/xref.o java/boehm.o mkdeps.o\n \n@@ -257,6 +257,8 @@ java/gjavah.o: $(CONFIG_H) $(SYSTEM_H) $(JAVA_TREE_H) java/gjavah.c \\\n java/boehm.o: java/boehm.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(JAVA_TREE_H) \\\n   java/parse.h toplev.h\n java/buffer.o: java/buffer.c $(CONFIG_H) java/buffer.h $(SYSTEM_H) toplev.h\n+java/builtins.o: java/builtins.c $(CONFIG_H) $(SYSTEM_H) $(JAVA_TREE_H) \\\n+  $(GGC_H) flags.h\n java/check-init.o: java/check-init.c $(CONFIG_H) \\\n   $(JAVA_TREE_H) $(SYSTEM_H) toplev.h\n java/class.o: java/class.c $(CONFIG_H) $(JAVA_TREE_H) $(RTL_H) java/jcf.h \\"}, {"sha": "244985963753a8f24657f5c058d5eb5a691c7d69", "filename": "gcc/java/builtins.c", "status": "added", "additions": 365, "deletions": 0, "changes": 365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099", "patch": "@@ -0,0 +1,365 @@\n+/* Built-in and inline functions for gcj\n+   Copyright (C) 2001\n+   Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  \n+\n+Java and all Java-based marks are trademarks or registered trademarks\n+of Sun Microsystems, Inc. in the United States and other countries.\n+The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n+\n+/* Written by Tom Tromey <tromey@redhat.com>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"tree.h\"\n+#include \"ggc.h\"\n+#include \"flags.h\"\n+\n+#include \"java-tree.h\"\n+\n+enum builtin_type \n+{\n+#define DEF_PRIMITIVE_TYPE(NAME, VALUE) NAME,\n+#define DEF_FUNCTION_TYPE_0(NAME, RETURN) NAME,\n+#define DEF_FUNCTION_TYPE_1(NAME, RETURN, ARG1) NAME,\n+#define DEF_FUNCTION_TYPE_2(NAME, RETURN, ARG1, ARG2) NAME,\n+#define DEF_FUNCTION_TYPE_3(NAME, RETURN, ARG1, ARG2, ARG3) NAME,\n+#define DEF_FUNCTION_TYPE_4(NAME, RETURN, ARG1, ARG2, ARG3, ARG4) NAME,\n+#define DEF_FUNCTION_TYPE_VAR_0(NAME, RETURN) NAME,\n+#define DEF_FUNCTION_TYPE_VAR_1(NAME, RETURN, ARG1) NAME,\n+#define DEF_FUNCTION_TYPE_VAR_2(NAME, RETURN, ARG1, ARG2) NAME,\n+#define DEF_POINTER_TYPE(NAME, TYPE) NAME,\n+#include \"builtin-types.def\"\n+#undef DEF_PRIMITIVE_TYPE\n+#undef DEF_FUNCTION_TYPE_0\n+#undef DEF_FUNCTION_TYPE_1\n+#undef DEF_FUNCTION_TYPE_2\n+#undef DEF_FUNCTION_TYPE_3\n+#undef DEF_FUNCTION_TYPE_4\n+#undef DEF_FUNCTION_TYPE_VAR_0\n+#undef DEF_FUNCTION_TYPE_VAR_1\n+#undef DEF_FUNCTION_TYPE_VAR_2\n+#undef DEF_POINTER_TYPE\n+  BT_LAST\n+};\n+\n+static tree max_builtin PARAMS ((tree, tree));\n+static tree min_builtin PARAMS ((tree, tree));\n+static tree abs_builtin PARAMS ((tree, tree));\n+static tree cos_builtin PARAMS ((tree, tree));\n+static tree sin_builtin PARAMS ((tree, tree));\n+static tree sqrt_builtin PARAMS ((tree, tree));\n+\n+static tree build_function_call_expr PARAMS ((tree, tree));\n+static void define_builtin PARAMS ((enum built_in_function,\n+\t\t\t\t    const char *,\n+\t\t\t\t    enum built_in_class,\n+\t\t\t\t    tree, int));\n+static tree define_builtin_type PARAMS ((int, int, int, int, int));\n+\n+\f\n+\n+/* Functions of this type are used to inline a given call.  Such a\n+   function should either return an expression, if the call is to be\n+   inlined, or NULL_TREE if a real call should be emitted.  Arguments\n+   are method return type and arguments to call.  */\n+typedef tree builtin_creator_function PARAMS ((tree, tree));\n+\n+/* Hold a char*, before initialization, or a tree, after\n+   initialization.  */\n+union string_or_tree\n+{\n+  const char *s;\n+  tree t;\n+};\n+\n+/* Used to hold a single builtin record.  */\n+struct builtin_record\n+{\n+  union string_or_tree class_name;\n+  union string_or_tree method_name;\n+  builtin_creator_function *creator;\n+};\n+\n+static struct builtin_record java_builtins[] =\n+{\n+  { { \"java.lang.Math\" }, { \"min\" }, min_builtin },\n+  { { \"java.lang.Math\" }, { \"max\" }, max_builtin },\n+  { { \"java.lang.Math\" }, { \"abs\" }, abs_builtin },\n+  { { \"java.lang.Math\" }, { \"cos\" }, cos_builtin },\n+  { { \"java.lang.Math\" }, { \"sin\" }, sin_builtin },\n+  { { \"java.lang.Math\" }, { \"sqrt\" }, sqrt_builtin },\n+  { { NULL }, { NULL }, NULL }\n+};\n+\n+/* This is only used transiently, so we don't mark it as roots for the\n+   GC.  */\n+static tree builtin_types[(int) BT_LAST];\n+\n+\f\n+/* Internal functions which implement various builtin conversions.  */\n+\n+static tree\n+max_builtin (method_return_type, method_arguments)\n+     tree method_return_type, method_arguments;\n+{\n+  return build (MAX_EXPR, method_return_type,\n+\t\tTREE_VALUE (method_arguments),\n+\t\tTREE_VALUE (TREE_CHAIN (method_arguments)));\n+}\n+\n+static tree\n+min_builtin (method_return_type, method_arguments)\n+     tree method_return_type, method_arguments;\n+{\n+  return build (MIN_EXPR, method_return_type,\n+\t\tTREE_VALUE (method_arguments),\n+\t\tTREE_VALUE (TREE_CHAIN (method_arguments)));\n+}\n+\n+static tree\n+abs_builtin (method_return_type, method_arguments)\n+     tree method_return_type, method_arguments;\n+{\n+  return build1 (ABS_EXPR, method_return_type,\n+\t\t TREE_VALUE (method_arguments));\n+}\n+\n+/* Mostly copied from ../builtins.c.  */\n+static tree\n+build_function_call_expr (tree fn, tree arglist)\n+{\n+  tree call_expr;\n+\n+  call_expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n+  call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n+\t\t     call_expr, arglist);\n+  TREE_SIDE_EFFECTS (call_expr) = 1;\n+  return call_expr;\n+}\n+\n+static tree\n+cos_builtin (method_return_type, method_arguments)\n+     tree method_return_type, method_arguments;\n+{\n+  /* FIXME: this assumes that jdouble and double are the same.  */\n+  tree fn = built_in_decls[BUILT_IN_COS];\n+  if (fn == NULL_TREE)\n+    return NULL_TREE;\n+  return build_function_call_expr (fn, method_arguments);\n+}\n+\n+static tree\n+sin_builtin (method_return_type, method_arguments)\n+     tree method_return_type, method_arguments;\n+{\n+  /* FIXME: this assumes that jdouble and double are the same.  */\n+  tree fn = built_in_decls[BUILT_IN_SIN];\n+  if (fn == NULL_TREE)\n+    return NULL_TREE;\n+  return build_function_call_expr (fn, method_arguments);\n+}\n+\n+static tree\n+sqrt_builtin (method_return_type, method_arguments)\n+     tree method_return_type, method_arguments;\n+{\n+  /* FIXME: this assumes that jdouble and double are the same.  */\n+  tree fn = built_in_decls[BUILT_IN_SQRTF];\n+  if (fn == NULL_TREE)\n+    return NULL_TREE;\n+  return build_function_call_expr (fn, method_arguments);\n+}\n+\n+\f\n+\n+/* Define a single builtin.  */\n+static void\n+define_builtin (val, name, class, type, fallback_p)\n+     enum built_in_function val;\n+     const char *name;\n+     enum built_in_class class;\n+     tree type;\n+     int fallback_p;\n+{\n+  tree decl;\n+\n+  if (! name)\n+    return;\n+\n+  if (strncmp (name, \"__builtin_\", strlen (\"__builtin_\")) != 0)\n+    abort ();\n+  decl = build_decl (FUNCTION_DECL, get_identifier (name), type);\n+  DECL_EXTERNAL (decl) = 1;\n+  TREE_PUBLIC (decl) = 1;\n+  if (fallback_p)\n+    SET_DECL_ASSEMBLER_NAME (decl,\n+\t\t\t     get_identifier (name + strlen (\"__builtin_\")));\n+  make_decl_rtl (decl, NULL);\n+  pushdecl (decl);\n+  DECL_BUILT_IN_CLASS (decl) = class;\n+  DECL_FUNCTION_CODE (decl) = val;\n+  built_in_decls[val] = decl;\n+}\n+\n+/* Compute the type for a builtin.  */\n+static tree\n+define_builtin_type (ret, arg1, arg2, arg3, arg4)\n+     int ret, arg1, arg2, arg3, arg4;\n+{\n+  tree args;\n+\n+  if (builtin_types[ret] == NULL_TREE)\n+    return NULL_TREE;\n+\n+  args = void_list_node;\n+\n+  if (arg4 != -1)\n+    {\n+      if (builtin_types[arg4] == NULL_TREE)\n+\treturn NULL_TREE;\n+      args = tree_cons (NULL_TREE, builtin_types[arg4], args);\n+    }\n+  if (arg3 != -1)\n+    {\n+      if (builtin_types[arg3] == NULL_TREE)\n+\treturn NULL_TREE;\n+      args = tree_cons (NULL_TREE, builtin_types[arg3], args);\n+    }\n+  if (arg2 != -1)\n+    {\n+      if (builtin_types[arg2] == NULL_TREE)\n+\treturn NULL_TREE;\n+      args = tree_cons (NULL_TREE, builtin_types[arg2], args);\n+    }\n+  if (arg1 != -1)\n+    {\n+      if (builtin_types[arg1] == NULL_TREE)\n+\treturn NULL_TREE;\n+      args = tree_cons (NULL_TREE, builtin_types[arg1], args);\n+    }\n+  \n+  return build_function_type (builtin_types[ret], args);\n+}\n+\n+\f\n+\n+/* Initialize the builtins.  */\n+void\n+initialize_builtins ()\n+{\n+  int i;\n+\n+  for (i = 0; java_builtins[i].creator != NULL; ++i)\n+    {\n+      tree klass_id = get_identifier (java_builtins[i].class_name.s);\n+      tree m = get_identifier (java_builtins[i].method_name.s);\n+\n+      java_builtins[i].class_name.t = klass_id;\n+      java_builtins[i].method_name.t = m;\n+      ggc_add_tree_root (&java_builtins[i].class_name.t, 1);\n+      ggc_add_tree_root (&java_builtins[i].method_name.t, 1);\n+    }\n+\n+  void_list_node = end_params_node;\n+\n+  /* Work around C-specific junk in builtin-types.def.  */\n+#define intmax_type_node NULL_TREE\n+#define traditional_ptr_type_node NULL_TREE\n+#define traditional_cptr_type_node NULL_TREE\n+#define c_size_type_node NULL_TREE\n+#define const_string_type_node NULL_TREE\n+#define traditional_len_type_node NULL_TREE\n+#define va_list_ref_type_node NULL_TREE\n+#define va_list_arg_type_node NULL_TREE\n+#define flag_isoc99 0\n+\n+#define DEF_PRIMITIVE_TYPE(ENUM, VALUE)\t\t\t\t\t      \\\n+  builtin_types[(int) ENUM] = VALUE;\n+#define DEF_FUNCTION_TYPE_0(ENUM, RETURN)\t\t\\\n+  builtin_types[(int) ENUM]\t\t\t\t\\\n+    = define_builtin_type (RETURN, -1, -1, -1, -1);\n+#define DEF_FUNCTION_TYPE_1(ENUM, RETURN, ARG1)\t\t\t\t\\\n+  builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n+    = define_builtin_type (RETURN, ARG1, -1, -1, -1);\n+#define DEF_FUNCTION_TYPE_2(ENUM, RETURN, ARG1, ARG2)\t\\\n+  builtin_types[(int) ENUM]\t\t\t\t\\\n+    = define_builtin_type (RETURN, ARG1, ARG2, -1, -1);\n+#define DEF_FUNCTION_TYPE_3(ENUM, RETURN, ARG1, ARG2, ARG3)\t\t \\\n+  builtin_types[(int) ENUM]\t\t\t\t\t\t \\\n+    = define_builtin_type (RETURN, ARG1, ARG2, ARG3, -1);\n+#define DEF_FUNCTION_TYPE_4(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4)\t\\\n+  builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n+    = define_builtin_type (RETURN, ARG1, ARG2, ARG3, ARG4);\n+#define DEF_FUNCTION_TYPE_VAR_0(ENUM, RETURN)\t\t\t\t      \\\n+  builtin_types[(int) ENUM] = NULL_TREE;\n+#define DEF_FUNCTION_TYPE_VAR_1(ENUM, RETURN, ARG1)\t\t\t \\\n+   builtin_types[(int) ENUM] = NULL_TREE;\n+#define DEF_FUNCTION_TYPE_VAR_2(ENUM, RETURN, ARG1, ARG2)\t\\\n+   builtin_types[(int) ENUM] = NULL_TREE;\n+#define DEF_POINTER_TYPE(ENUM, TYPE)\t\t\t\\\n+  builtin_types[(int) ENUM] = NULL_TREE;\n+\n+#include \"builtin-types.def\"\n+\n+#define DEF_BUILTIN(ENUM, NAME, CLASS, TYPE, LIBTYPE, BOTH_P, \\\n+                    FALLBACK_P, NONANSI_P) \\\n+  define_builtin (ENUM, NAME, CLASS, builtin_types[TYPE], FALLBACK_P);\n+#include \"builtins.def\"\n+}\n+\n+/* Generate a method call.  If the call matches a builtin, return the\n+   appropriate builtin expression instead.  */\n+tree\n+build_call_or_builtin (method, func, method_arguments)\n+     tree method, func, method_arguments;\n+{\n+  tree method_class = DECL_NAME (TYPE_NAME (DECL_CONTEXT (method)));\n+  tree method_name = DECL_NAME (method);\n+  tree method_return_type = TREE_TYPE (TREE_TYPE (method));\n+  tree call = NULL_TREE;\n+\n+  /* Only look if we're generating object code and optimizing.  */\n+  if (! flag_emit_class_files && optimize)\n+    {\n+      int i;\n+\n+      for (i = 0; java_builtins[i].creator != NULL; ++i)\n+\t{\n+\t  if (method_class == java_builtins[i].class_name.t\n+\t      && method_name == java_builtins[i].method_name.t)\n+\t    {\n+\t      call = (*java_builtins[i].creator) (method_return_type,\n+\t\t\t\t\t\t  method_arguments);\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n+  if (call == NULL_TREE)\n+    {\n+      /* Either nothing matched, or the creator function decided not\n+\t to inline.  In either case, emit a call.  */\n+      call = build (CALL_EXPR, method_return_type, func, method_arguments,\n+\t\t    NULL_TREE);\n+      TREE_SIDE_EFFECTS (call) = 1;\n+    }\n+\n+  return call;\n+}"}, {"sha": "b76f46fb86fb576573e012965dc6d1ac144a47db", "filename": "gcc/java/decl.c", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099", "patch": "@@ -327,8 +327,6 @@ int flag_traditional;\n \n tree java_global_trees[JTI_MAX];\n   \n-tree predef_filenames[PREDEF_FILENAMES_SIZE];\n-\n /* Build (and pushdecl) a \"promoted type\" for all standard\n    types shorter than int.  */\n \n@@ -554,20 +552,17 @@ java_init_decl_processing ()\n   rawdata_ptr_type_node\n     = promote_type (lookup_class (get_identifier (\"gnu.gcj.RawData\")));\n \n-  /* If you add to this section, don't forget to increase\n-     PREDEF_FILENAMES_SIZE.  */\n-  predef_filenames [0] = get_identifier (\"java/lang/Class.java\");\n-  predef_filenames [1] = get_identifier (\"java/lang/Error.java\");\n-  predef_filenames [2] = get_identifier (\"java/lang/Object.java\");\n-  predef_filenames [3] = get_identifier (\"java/lang/RuntimeException.java\");\n-  predef_filenames [4] = get_identifier (\"java/lang/String.java\");\n-  predef_filenames [5] = get_identifier (\"java/lang/Throwable.java\");\n-  predef_filenames [6] = get_identifier (\"gnu/gcj/RawData.java\");\n-  predef_filenames [7] = get_identifier (\"java/lang/Exception.java\");\n-  predef_filenames [8] =\n-    get_identifier (\"java/lang/ClassNotFoundException.java\");\n-  predef_filenames [9] =\n-    get_identifier (\"java/lang/NoClassDefFoundError.java\");\n+  add_predefined_file (get_identifier (\"java/lang/Class.java\"));\n+  add_predefined_file (get_identifier (\"java/lang/Error.java\"));\n+  add_predefined_file (get_identifier (\"java/lang/Object.java\"));\n+  add_predefined_file (get_identifier (\"java/lang/RuntimeException.java\"));\n+  add_predefined_file (get_identifier (\"java/lang/String.java\"));\n+  add_predefined_file (get_identifier (\"java/lang/Throwable.java\"));\n+  add_predefined_file (get_identifier (\"gnu/gcj/RawData.java\"));\n+  add_predefined_file (get_identifier (\"java/lang/Exception.java\"));\n+  add_predefined_file (get_identifier (\"java/lang/ClassNotFoundException.java\"));\n+  add_predefined_file (get_identifier (\"java/lang/NoClassDefFoundError.java\"));\n+  add_predefined_file (get_identifier (\"gnu/gcj/RawData.java\"));\n \n   methodtable_type = make_node (RECORD_TYPE);\n   layout_type (methodtable_type);\n@@ -916,10 +911,10 @@ java_init_decl_processing ()\n   /* Register nodes with the garbage collector.  */\n   ggc_add_tree_root (java_global_trees, \n \t\t     sizeof (java_global_trees) / sizeof (tree));\n-  ggc_add_tree_root (predef_filenames,\n-\t\t     sizeof (predef_filenames) / sizeof (tree));\n   ggc_add_tree_root (&decl_map, 1);\n   ggc_add_tree_root (&pending_local_decls, 1);\n+\n+  initialize_builtins ();\n }\n \n "}, {"sha": "e3eaf3525514195606822d02676d4cb7f8ff4446", "filename": "gcc/java/expr.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099", "patch": "@@ -1780,7 +1780,8 @@ build_class_init (clas, expr)\n }\n \n tree\n-build_known_method_ref (method, method_type, self_type, method_signature, arg_list)\n+build_known_method_ref (method, method_type, self_type,\n+\t\t\tmethod_signature, arg_list)\n      tree method, method_type ATTRIBUTE_UNUSED, self_type,\n           method_signature ATTRIBUTE_UNUSED, arg_list ATTRIBUTE_UNUSED;\n {\n@@ -1794,13 +1795,13 @@ build_known_method_ref (method, method_type, self_type, method_signature, arg_li\n     {\n       /* We don't know whether the method has been (statically) compiled.\n \t Compile this code to get a reference to the method's code:\n-\t \n+\n \t SELF_TYPE->methods[METHOD_INDEX].ncode\n-\t \n+\n \t This is guaranteed to work (assuming SELF_TYPE has\n \t been initialized), since if the method is not compiled yet,\n \t its ncode points to a trampoline that forces compilation. */\n-      \n+\n       int method_index = 0;\n       tree meth;\n       tree ref = build_class_ref (self_type);\n@@ -2110,8 +2111,8 @@ expand_invoke (opcode, method_ref_index, nargs)\n \tfunc = build_invokeinterface (dtable, method);\n     }\n   func = build1 (NOP_EXPR, build_pointer_type (method_type), func);\n-  call = build (CALL_EXPR, TREE_TYPE (method_type), func, arg_list, NULL_TREE);\n-  TREE_SIDE_EFFECTS (call) = 1;\n+\n+  call = build_call_or_builtin (method, func, arg_list);\n \n   if (check != NULL_TREE)\n     {"}, {"sha": "0c2e5666980df755f7d02a81c860aa8080190166", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099", "patch": "@@ -395,6 +395,8 @@ enum java_tree_index\n   JTI_OTABLE_DECL,\n   JTI_OTABLE_SYMS_DECL,\n \n+  JTI_PREDEF_FILENAMES,\n+\n   JTI_MAX\n };\n \n@@ -656,8 +658,8 @@ extern tree java_global_trees[JTI_MAX];\n #define nativecode_ptr_array_type_node \\\n   java_global_trees[JTI_NATIVECODE_PTR_ARRAY_TYPE_NODE]\n \n-#define PREDEF_FILENAMES_SIZE 10\n-extern tree predef_filenames[PREDEF_FILENAMES_SIZE];\n+#define predef_filenames \\\n+  java_global_trees[JTI_PREDEF_FILENAMES]\n \n #define nativecode_ptr_type_node ptr_type_node\n \n@@ -1085,6 +1087,9 @@ extern HOST_WIDE_INT java_array_type_length PARAMS ((tree));\n extern int read_class PARAMS ((tree));\n extern void load_class PARAMS ((tree, int));\n \n+extern tree build_call_or_builtin PARAMS ((tree, tree, tree));\n+extern void initialize_builtins PARAMS ((void));\n+\n extern tree lookup_name PARAMS ((tree));\n extern tree build_known_method_ref PARAMS ((tree, tree, tree, tree, tree));\n extern tree build_class_init PARAMS ((tree, tree));\n@@ -1111,7 +1116,6 @@ extern tree create_label_decl PARAMS ((tree));\n extern void push_labeled_block PARAMS ((tree));\n extern tree prepare_eh_table_type PARAMS ((tree));\n extern tree build_exception_object_ref PARAMS ((tree));\n-extern void java_set_exception_lang_code PARAMS ((void));\n extern tree generate_name PARAMS ((void));\n extern void pop_labeled_block PARAMS ((void));\n extern const char *lang_printable_name PARAMS ((tree, int));\n@@ -1222,6 +1226,9 @@ extern tree java_mangle_vtable PARAMS ((struct obstack *, tree));\n extern const char *lang_printable_name_wls PARAMS ((tree, int));\n extern void append_gpp_mangled_name PARAMS ((const char *, int));\n \n+extern void add_predefined_file PARAMS ((tree));\n+extern int predefined_filename_p PARAMS ((tree));\n+\n /* We use ARGS_SIZE_RTX to indicate that gcc/expr.h has been included\n    to declare `enum expand_modifier'. */\n #if defined (TREE_CODE) && defined(RTX_CODE) && defined (HAVE_MACHINE_MODES) && defined (ARGS_SIZE_RTX)"}, {"sha": "ff5bf05f6df3283cfbd0d90577d83f76d0d01908", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099", "patch": "@@ -98,7 +98,6 @@ static void parse_source_file_1 PARAMS ((tree, FILE *));\n static void parse_source_file_2 PARAMS ((void));\n static void parse_class_file PARAMS ((void));\n static void set_source_filename PARAMS ((JCF *, int));\n-static int predefined_filename_p PARAMS ((tree));\n static void ggc_mark_jcf PARAMS ((void**));\n static void jcf_parse PARAMS ((struct JCF*));\n static void load_inner_classes PARAMS ((tree));\n@@ -945,14 +944,24 @@ parse_source_file_2 ()\n   java_reorder_fields ();\t    /* Reorder the fields */\n }\n \n-static int\n+void\n+add_predefined_file (name)\n+     tree name;\n+{\n+  predef_filenames = tree_cons (NULL_TREE, name, predef_filenames);\n+}\n+\n+int\n predefined_filename_p (node)\n      tree node;\n {\n-  int i;\n-  for (i = 0; i < PREDEF_FILENAMES_SIZE; i++)\n-    if (predef_filenames [i] == node)\n-      return 1;\n+  tree iter;\n+\n+  for (iter = predef_filenames; iter != NULL_TREE; iter = TREE_CHAIN (iter))\n+    {\n+      if (TREE_VALUE (iter) == node)\n+\treturn 1;\n+    }\n   return 0;\n }\n "}, {"sha": "a75e3f97ecc859e4eacb0b1c660fc86505b0d308", "filename": "gcc/java/parse.y", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=fec763fcfdaad01e5ebb8ca1d3ccee34ef65f099", "patch": "@@ -10625,7 +10625,6 @@ patch_invoke (patch, method, args)\n     func = method;\n   else\n     {\n-      tree signature = build_java_signature (TREE_TYPE (method));\n       switch (invocation_mode (method, CALL_USING_SUPER (patch)))\n \t{\n \tcase INVOKE_VIRTUAL:\n@@ -10650,9 +10649,12 @@ patch_invoke (patch, method, args)\n \n \tcase INVOKE_SUPER:\n \tcase INVOKE_STATIC:\n-\t  func = build_known_method_ref (method, TREE_TYPE (method),\n-\t\t\t\t\t DECL_CONTEXT (method),\n-\t\t\t\t\t signature, args);\n+\t  {\n+\t    tree signature = build_java_signature (TREE_TYPE (method));\n+\t    func = build_known_method_ref (method, TREE_TYPE (method),\n+\t\t\t\t\t   DECL_CONTEXT (method),\n+\t\t\t\t\t   signature, args);\n+\t  }\n \t  break;\n \n \tcase INVOKE_INTERFACE:\n@@ -10668,9 +10670,14 @@ patch_invoke (patch, method, args)\n       func = build1 (NOP_EXPR, build_pointer_type (TREE_TYPE (method)), func);\n     }\n \n-  TREE_TYPE (patch) = TREE_TYPE (TREE_TYPE (method));\n-  TREE_OPERAND (patch, 0) = func;\n-  TREE_OPERAND (patch, 1) = args;\n+  if (TREE_CODE (patch) == CALL_EXPR)\n+    patch = build_call_or_builtin (method, func, args);\n+  else\n+    {\n+      TREE_TYPE (patch) = TREE_TYPE (TREE_TYPE (method));\n+      TREE_OPERAND (patch, 0) = func;\n+      TREE_OPERAND (patch, 1) = args;\n+    }\n   original_call = patch;\n \n   /* We're processing a `new TYPE ()' form. New is called and its"}]}