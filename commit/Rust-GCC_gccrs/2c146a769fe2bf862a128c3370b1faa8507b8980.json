{"sha": "2c146a769fe2bf862a128c3370b1faa8507b8980", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMxNDZhNzY5ZmUyYmY4NjJhMTI4YzMzNzBiMWZhYTg1MDdiODk4MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-17T23:45:52Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-17T23:45:52Z"}, "message": "cp-tree.h (language_function): Add x_eh_spec_try_block.\n\n\t* cp-tree.h (language_function): Add x_eh_spec_try_block.  Add\n\tx_scope_stmt_stack.  Add x_in_charge_parm.\n\t(current_eh_spec_try_block): New macro.\n\t(current_scope_stmt_stack): Likewise.\n\t(current_in_charge_parm): Likewise.\n\t* decl.c (start_function): Initialize current_in_charge_parm.\n\t(finish_function): Use current_in_charge_parm rather than looking\n\tup __in_chrg.\n\t* search.c (expand_indirect_vtbls_init): Likewise.\n\nFrom-SVN: r29489", "tree": {"sha": "0a1203afda84ba76764e50565f92ce939814c1a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a1203afda84ba76764e50565f92ce939814c1a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c146a769fe2bf862a128c3370b1faa8507b8980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c146a769fe2bf862a128c3370b1faa8507b8980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c146a769fe2bf862a128c3370b1faa8507b8980", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c146a769fe2bf862a128c3370b1faa8507b8980/comments", "author": null, "committer": null, "parents": [{"sha": "59026e796378b6fa8ebf34d4c85fc9dcdc2e9d4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59026e796378b6fa8ebf34d4c85fc9dcdc2e9d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59026e796378b6fa8ebf34d4c85fc9dcdc2e9d4c"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "3d218467fbfc2eb5c20eb0ed73cae70b03fd2431", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c146a769fe2bf862a128c3370b1faa8507b8980/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c146a769fe2bf862a128c3370b1faa8507b8980/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2c146a769fe2bf862a128c3370b1faa8507b8980", "patch": "@@ -1,5 +1,15 @@\n 1999-09-17  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (language_function): Add x_eh_spec_try_block.  Add\n+\tx_scope_stmt_stack.  Add x_in_charge_parm.\n+\t(current_eh_spec_try_block): New macro.\n+\t(current_scope_stmt_stack): Likewise.\n+\t(current_in_charge_parm): Likewise.\n+\t* decl.c (start_function): Initialize current_in_charge_parm.\n+\t(finish_function): Use current_in_charge_parm rather than looking\n+\tup __in_chrg.\n+\t* search.c (expand_indirect_vtbls_init): Likewise.\n+\n \t* cp-tree.def (CLEANUP_STMT): Fix spelling in dumps.\n \t(TRY_BLOCK): Likewise.\n \t(HANDLER): Likewise."}, {"sha": "8ef874a1fac9f3766dfbc6cd8b6b5433b69df28e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c146a769fe2bf862a128c3370b1faa8507b8980/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c146a769fe2bf862a128c3370b1faa8507b8980/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2c146a769fe2bf862a128c3370b1faa8507b8980", "patch": "@@ -623,6 +623,9 @@ struct language_function\n   tree x_current_class_ref;\n   tree x_last_tree;\n   tree x_last_expr_type;\n+  tree x_eh_spec_try_block;\n+  tree x_scope_stmt_stack;\n+  tree x_in_charge_parm;\n \n   struct rtx_def *x_last_dtor_insn;\n   struct rtx_def *x_last_parm_cleanup_insn;\n@@ -695,6 +698,20 @@ struct language_function\n \n #define last_expr_type cp_function_chain->x_last_expr_type\n \n+/* The TRY_BLOCK for the exception-specifiers for the current\n+   function, if any.  */\n+\n+#define current_eh_spec_try_block cp_function_chain->x_eh_spec_try_block\n+\n+/* The stack of SCOPE_STMTs for the current function.  */\n+\n+#define current_scope_stmt_stack cp_function_chain->x_scope_stmt_stack\n+\n+/* The `__in_chrg' parameter for the current function.  Only used for\n+   destructors.  */\n+\n+#define current_in_charge_parm cp_function_chain->x_in_charge_parm\n+\n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */\n "}, {"sha": "c57aa0ad846bc2bd7a5aa7701e44d3c262a68d86", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c146a769fe2bf862a128c3370b1faa8507b8980/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c146a769fe2bf862a128c3370b1faa8507b8980/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2c146a769fe2bf862a128c3370b1faa8507b8980", "patch": "@@ -13001,6 +13001,9 @@ start_function (declspecs, declarator, attrs, flags)\n \t    = build_indirect_ref (t, NULL_PTR);\n \t  cp_function_chain->x_current_class_ptr = t;\n \t  \n+\t  if (DECL_DESTRUCTOR_P (decl1))\n+\t    current_in_charge_parm = TREE_CHAIN (t);\n+\n \t  resume_momentary (i);\n \t  if (! hack_decl_function_context (decl1))\n \t    end_temporary_allocation ();\n@@ -13374,7 +13377,6 @@ finish_function (lineno, flags)\n \t  tree binfo = TYPE_BINFO (current_class_type);\n \t  tree cond = integer_one_node;\n \t  tree exprstmt;\n-\t  tree in_charge_node = lookup_name (in_charge_identifier, 0);\n \t  tree virtual_size;\n \t  int ok_to_optimize_dtor = 0;\n \t  int empty_dtor = get_last_insn () == last_dtor_insn;\n@@ -13424,7 +13426,9 @@ finish_function (lineno, flags)\n \t    exprstmt = build_delete (current_class_type, current_class_ref, integer_zero_node,\n \t\t\t\t     LOOKUP_NONVIRTUAL|LOOKUP_DESTRUCTOR|LOOKUP_NORMAL, 0);\n \t  else\n-\t    exprstmt = build_delete (current_class_type, current_class_ref, in_charge_node,\n+\t    exprstmt = build_delete (current_class_type,\n+\t\t\t\t     current_class_ref, \n+\t\t\t\t     current_in_charge_parm,\n \t\t\t\t     LOOKUP_NONVIRTUAL|LOOKUP_DESTRUCTOR|LOOKUP_NORMAL, 0);\n \n \t  /* If we did not assign to this, then `this' is non-zero at\n@@ -13451,7 +13455,8 @@ finish_function (lineno, flags)\n \t\t{\n \t\t  tree vbases = nreverse (copy_list (CLASSTYPE_VBASECLASSES (current_class_type)));\n \t\t  expand_start_cond (build (BIT_AND_EXPR, integer_type_node,\n-\t\t\t\t\t    in_charge_node, integer_two_node), 0);\n+\t\t\t\t\t    current_in_charge_parm, \n+\t\t\t\t\t    integer_two_node), 0);\n \t\t  while (vbases)\n \t\t    {\n \t\t      if (TYPE_NEEDS_DESTRUCTOR (BINFO_TYPE (vbases)))\n@@ -13499,7 +13504,7 @@ finish_function (lineno, flags)\n \t  if (exprstmt)\n \t    {\n \t      cond = build (BIT_AND_EXPR, integer_type_node,\n-\t\t\t    in_charge_node, integer_one_node);\n+\t\t\t    current_in_charge_parm, integer_one_node);\n \t      expand_start_cond (cond, 0);\n \t      expand_expr_stmt (exprstmt);\n \t      expand_end_cond ();"}, {"sha": "6e81465e90161ce557fc9bc8603e7c49d7cfb54c", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c146a769fe2bf862a128c3370b1faa8507b8980/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c146a769fe2bf862a128c3370b1faa8507b8980/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=2c146a769fe2bf862a128c3370b1faa8507b8980", "patch": "@@ -2784,7 +2784,7 @@ expand_indirect_vtbls_init (binfo, true_exp, decl_ptr)\n \n       if (fixup_insns)\n \t{\n-\t  tree in_charge_node = lookup_name (in_charge_identifier, 0);\n+\t  tree in_charge_node = current_in_charge_parm;\n \t  if (! in_charge_node)\n \t    {\n \t      warning (\"recoverable internal compiler error, nobody's in charge!\");"}]}