{"sha": "3b4daa0b3c3d8eb2ac3b40ad6898f314ed4d7919", "node_id": "C_kwDOANBUbNoAKDNiNGRhYTBiM2MzZDhlYjJhYzNiNDBhZDY4OThmMzE0ZWQ0ZDc5MTk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-19T09:56:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-19T09:57:36Z"}, "message": "pointer-query: Fix ICE with non-pointer param [PR105635]\n\nThe gimple_parm_array_size function comment talks about pointe parameters\nbut doesn't actually verify it, it checks whether an attribute is present\non the function and then just uses TREE_TYPE (TREE_TYPE (var)) which\nassumes a pointer type (or in theory could work for ARRAY_TYPE but\nc-family languages which only have that attribute will never have ARRAY_TYPE\nparameters; and for VECTOR_TYPE/COMPLEX_TYPE it would mean something quite\ndifferent).\n\nSo, this patch punts early if var doesn't have pointer/reference type.\n\n2022-05-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/105635\n\t* pointer-query.cc (gimple_parm_array_size): Return NULL if var\n\tdoesn't have pointer or reference type.\n\n\t* gcc.dg/pr105635.c: New test.", "tree": {"sha": "3d72c764de583ed88c3657cd434af19096a0146e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d72c764de583ed88c3657cd434af19096a0146e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b4daa0b3c3d8eb2ac3b40ad6898f314ed4d7919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b4daa0b3c3d8eb2ac3b40ad6898f314ed4d7919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b4daa0b3c3d8eb2ac3b40ad6898f314ed4d7919", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b4daa0b3c3d8eb2ac3b40ad6898f314ed4d7919/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8944f0438a183a0245ffe17aeaeaf3a1a00069c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8944f0438a183a0245ffe17aeaeaf3a1a00069c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8944f0438a183a0245ffe17aeaeaf3a1a00069c"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "67c25503f4684c1fd08a48dd1e1714c6e5e1a30d", "filename": "gcc/pointer-query.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4daa0b3c3d8eb2ac3b40ad6898f314ed4d7919/gcc%2Fpointer-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4daa0b3c3d8eb2ac3b40ad6898f314ed4d7919/gcc%2Fpointer-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.cc?ref=3b4daa0b3c3d8eb2ac3b40ad6898f314ed4d7919", "patch": "@@ -555,7 +555,7 @@ gimple_parm_array_size (tree ptr, wide_int rng[2],\n      from the current function declaratation (e.g., attribute access or\n      related).  */\n   tree var = SSA_NAME_VAR (ptr);\n-  if (TREE_CODE (var) != PARM_DECL)\n+  if (TREE_CODE (var) != PARM_DECL || !POINTER_TYPE_P (TREE_TYPE (var)))\n     return NULL_TREE;\n \n   const unsigned prec = TYPE_PRECISION (sizetype);"}, {"sha": "aa02f593bfafe36a25ba831aeaa8ac5ce9d00b12", "filename": "gcc/testsuite/gcc.dg/pr105635.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b4daa0b3c3d8eb2ac3b40ad6898f314ed4d7919/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105635.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b4daa0b3c3d8eb2ac3b40ad6898f314ed4d7919/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105635.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105635.c?ref=3b4daa0b3c3d8eb2ac3b40ad6898f314ed4d7919", "patch": "@@ -0,0 +1,11 @@\n+/* PR c/105635 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall\" } */\n+\n+void foo (int, int[*]);\t/* { dg-message \"previous declaration of 'foo' with type\" } */\n+\n+foo (int x, int y)\t/* { dg-warning \"return type defaults to 'int'\" } */\n+{\t\t\t/* { dg-warning \"conflicting types for 'foo'\" \"\" { target *-*-* } .-1 } */\n+\t\t\t/* { dg-message \"declared here\" \"\" { target *-*-* } .-2 } */\n+  return (x >= 0) != (y < 0);\t/* { dg-warning \"'return' with a value, in function returning void\" } */\n+}"}]}