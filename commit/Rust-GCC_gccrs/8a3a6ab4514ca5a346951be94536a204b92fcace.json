{"sha": "8a3a6ab4514ca5a346951be94536a204b92fcace", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEzYTZhYjQ1MTRjYTVhMzQ2OTUxYmU5NDUzNmEyMDRiOTJmY2FjZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-01-19T17:27:54Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-01-19T17:27:54Z"}, "message": "Make LTO's implementation of LANG_HOOKS_TYPE_FOR_SIZE the default\n\ngcc/jit/ChangeLog:\n\t* dummy-frontend.c (jit_langhook_type_for_size): Delete.\n\t(LANG_HOOKS_TYPE_FOR_SIZE): Don't redefine.\n\ngcc/ChangeLog:\n\t* langhooks-def.h (lhd_type_for_size): New decl.\n\t(LANG_HOOKS_TYPE_FOR_SIZE): Define as lhd_type_for_size.\n\t* langhooks.c (lhd_type_for_size): New function, taken from\n\tlto_type_for_size.\n\ngcc/lto/ChangeLog:\n\t* lto-lang.c (builtin_type_for_size): Convert call to\n\tlto_type_for_size to one through the langhook.\n\t(lto_type_for_size): Move to langhooks.c and rename to\n\tlhd_type_for_size.\n\t(LANG_HOOKS_TYPE_FOR_SIZE): Don't redefine.\n\nFrom-SVN: r244646", "tree": {"sha": "256cbd879fbd6401e4031f44fb4256e9b8cff531", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/256cbd879fbd6401e4031f44fb4256e9b8cff531"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a3a6ab4514ca5a346951be94536a204b92fcace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a3a6ab4514ca5a346951be94536a204b92fcace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a3a6ab4514ca5a346951be94536a204b92fcace", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a3a6ab4514ca5a346951be94536a204b92fcace/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86eb502b939b6c852174d23eba3937ab6fd61884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86eb502b939b6c852174d23eba3937ab6fd61884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86eb502b939b6c852174d23eba3937ab6fd61884"}], "stats": {"total": 180, "additions": 73, "deletions": 107}, "files": [{"sha": "a51167089e627825866d9ced5a8237fc01bcffbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a3a6ab4514ca5a346951be94536a204b92fcace", "patch": "@@ -1,3 +1,10 @@\n+2017-01-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* langhooks-def.h (lhd_type_for_size): New decl.\n+\t(LANG_HOOKS_TYPE_FOR_SIZE): Define as lhd_type_for_size.\n+\t* langhooks.c (lhd_type_for_size): New function, taken from\n+\tlto_type_for_size.\n+\n 2017-01-19  Pat Haugen  <pthaugen@us.ibm.com>\n \n \t* config/rs6000/power9.md (power9-alu): Remove 'cmp' type and add"}, {"sha": "e03f9ac5455b1589ca76fa1c09d454560b270275", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=8a3a6ab4514ca5a346951be94536a204b92fcace", "patch": "@@ -1,3 +1,8 @@\n+2017-01-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* dummy-frontend.c (jit_langhook_type_for_size): Delete.\n+\t(LANG_HOOKS_TYPE_FOR_SIZE): Don't redefine.\n+\n 2017-01-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* dummy-frontend.c (jit_langhook_type_for_size): Implement, using"}, {"sha": "87f583f68c2c67c6734c68072e68c34d5328bc89", "filename": "gcc/jit/dummy-frontend.c", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2Fjit%2Fdummy-frontend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2Fjit%2Fdummy-frontend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdummy-frontend.c?ref=8a3a6ab4514ca5a346951be94536a204b92fcace", "patch": "@@ -207,55 +207,6 @@ jit_langhook_type_for_mode (enum machine_mode mode, int unsignedp)\n   return NULL;\n }\n \n-/* Return an integer type with PRECISION bits of precision,\n-   that is unsigned if UNSIGNEDP is nonzero, otherwise signed.  */\n-\n-static tree\n-jit_langhook_type_for_size (unsigned precision, int unsignedp)\n-{\n-  int i;\n-\n-  if (precision == TYPE_PRECISION (integer_type_node))\n-    return unsignedp ? unsigned_type_node : integer_type_node;\n-\n-  if (precision == TYPE_PRECISION (signed_char_type_node))\n-    return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n-\n-  if (precision == TYPE_PRECISION (short_integer_type_node))\n-    return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n-\n-  if (precision == TYPE_PRECISION (long_integer_type_node))\n-    return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n-\n-  if (precision == TYPE_PRECISION (long_long_integer_type_node))\n-    return unsignedp\n-\t   ? long_long_unsigned_type_node\n-\t   : long_long_integer_type_node;\n-\n-  for (i = 0; i < NUM_INT_N_ENTS; i ++)\n-    if (int_n_enabled_p[i]\n-\t&& precision == int_n_data[i].bitsize)\n-      return (unsignedp ? int_n_trees[i].unsigned_type\n-\t      : int_n_trees[i].signed_type);\n-\n-  if (precision <= TYPE_PRECISION (intQI_type_node))\n-    return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n-\n-  if (precision <= TYPE_PRECISION (intHI_type_node))\n-    return unsignedp ? unsigned_intHI_type_node : intHI_type_node;\n-\n-  if (precision <= TYPE_PRECISION (intSI_type_node))\n-    return unsignedp ? unsigned_intSI_type_node : intSI_type_node;\n-\n-  if (precision <= TYPE_PRECISION (intDI_type_node))\n-    return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n-\n-  if (precision <= TYPE_PRECISION (intTI_type_node))\n-    return unsignedp ? unsigned_intTI_type_node : intTI_type_node;\n-\n-  return NULL_TREE;\n-}\n-\n /* Record a builtin function.  We just ignore builtin functions.  */\n \n static tree\n@@ -295,9 +246,6 @@ jit_langhook_getdecls (void)\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE\tjit_langhook_type_for_mode\n \n-#undef LANG_HOOKS_TYPE_FOR_SIZE\n-#define LANG_HOOKS_TYPE_FOR_SIZE\tjit_langhook_type_for_size\n-\n #undef LANG_HOOKS_BUILTIN_FUNCTION\n #define LANG_HOOKS_BUILTIN_FUNCTION\tjit_langhook_builtin_function\n "}, {"sha": "eb680848f6a50dd0770e4b8d6f61ae897e151cca", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=8a3a6ab4514ca5a346951be94536a204b92fcace", "patch": "@@ -52,6 +52,7 @@ extern void lhd_print_error_function (diagnostic_context *,\n \t\t\t\t      const char *, struct diagnostic_info *);\n extern void lhd_set_decl_assembler_name (tree);\n extern bool lhd_warn_unused_global_decl (const_tree);\n+extern tree lhd_type_for_size (unsigned precision, int unsignedp);\n extern void lhd_incomplete_type_error (location_t, const_tree, const_tree);\n extern tree lhd_type_promotes_to (tree);\n extern void lhd_register_builtin_type (tree, const char *);\n@@ -165,6 +166,7 @@ extern tree lhd_unit_size_without_reusable_padding (tree);\n \n #define LANG_HOOKS_MAKE_TYPE lhd_make_node\n #define LANG_HOOKS_CLASSIFY_RECORD\tNULL\n+#define LANG_HOOKS_TYPE_FOR_SIZE\tlhd_type_for_size\n #define LANG_HOOKS_INCOMPLETE_TYPE_ERROR lhd_incomplete_type_error\n #define LANG_HOOKS_GENERIC_TYPE_P\thook_bool_const_tree_false\n #define LANG_HOOKS_GET_INNERMOST_GENERIC_PARMS hook_tree_const_tree_null"}, {"sha": "dc19db71db247f5d6a1cf5e416d0a620b9a59b56", "filename": "gcc/langhooks.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=8a3a6ab4514ca5a346951be94536a204b92fcace", "patch": "@@ -469,6 +469,56 @@ lhd_make_node (enum tree_code code)\n   return make_node (code);\n }\n \n+/* Default implementation of LANG_HOOKS_TYPE_FOR_SIZE.\n+   Return an integer type with PRECISION bits of precision,\n+   that is unsigned if UNSIGNEDP is nonzero, otherwise signed.  */\n+\n+tree\n+lhd_type_for_size (unsigned precision, int unsignedp)\n+{\n+  int i;\n+\n+  if (precision == TYPE_PRECISION (integer_type_node))\n+    return unsignedp ? unsigned_type_node : integer_type_node;\n+\n+  if (precision == TYPE_PRECISION (signed_char_type_node))\n+    return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n+\n+  if (precision == TYPE_PRECISION (short_integer_type_node))\n+    return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n+\n+  if (precision == TYPE_PRECISION (long_integer_type_node))\n+    return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n+\n+  if (precision == TYPE_PRECISION (long_long_integer_type_node))\n+    return unsignedp\n+\t   ? long_long_unsigned_type_node\n+\t   : long_long_integer_type_node;\n+\n+  for (i = 0; i < NUM_INT_N_ENTS; i ++)\n+    if (int_n_enabled_p[i]\n+\t&& precision == int_n_data[i].bitsize)\n+      return (unsignedp ? int_n_trees[i].unsigned_type\n+\t      : int_n_trees[i].signed_type);\n+\n+  if (precision <= TYPE_PRECISION (intQI_type_node))\n+    return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n+\n+  if (precision <= TYPE_PRECISION (intHI_type_node))\n+    return unsignedp ? unsigned_intHI_type_node : intHI_type_node;\n+\n+  if (precision <= TYPE_PRECISION (intSI_type_node))\n+    return unsignedp ? unsigned_intSI_type_node : intSI_type_node;\n+\n+  if (precision <= TYPE_PRECISION (intDI_type_node))\n+    return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n+\n+  if (precision <= TYPE_PRECISION (intTI_type_node))\n+    return unsignedp ? unsigned_intTI_type_node : intTI_type_node;\n+\n+  return NULL_TREE;\n+}\n+\n HOST_WIDE_INT\n lhd_to_target_charset (HOST_WIDE_INT c)\n {"}, {"sha": "6b76cc641d131b0ef4bf494427e1ffc9cf53b5d9", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=8a3a6ab4514ca5a346951be94536a204b92fcace", "patch": "@@ -1,3 +1,11 @@\n+2017-01-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* lto-lang.c (builtin_type_for_size): Convert call to\n+\tlto_type_for_size to one through the langhook.\n+\t(lto_type_for_size): Move to langhooks.c and rename to\n+\tlhd_type_for_size.\n+\t(LANG_HOOKS_TYPE_FOR_SIZE): Don't redefine.\n+\n 2017-01-18  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \tPR lto/79061"}, {"sha": "ca8945e53bb5d1e3699f74203e8bdd0c6afac1c3", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a3a6ab4514ca5a346951be94536a204b92fcace/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=8a3a6ab4514ca5a346951be94536a204b92fcace", "patch": "@@ -36,8 +36,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto.h\"\n #include \"cilk.h\"\n \n-static tree lto_type_for_size (unsigned, int);\n-\n static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n static tree handle_leaf_attribute (tree *, tree, tree, int, bool *);\n static tree handle_const_attribute (tree *, tree, tree, int, bool *);\n@@ -570,7 +568,7 @@ def_fn_type (builtin_type def, builtin_type ret, bool var, int n, ...)\n static tree\n builtin_type_for_size (int size, bool unsignedp)\n {\n-  tree type = lto_type_for_size (size, unsignedp);\n+  tree type = lang_hooks.types.type_for_size (size, unsignedp);\n   return type ? type : error_mark_node;\n }\n \n@@ -867,56 +865,6 @@ lto_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n   return false;\n }\n \n-/* Return an integer type with PRECISION bits of precision,\n-   that is unsigned if UNSIGNEDP is nonzero, otherwise signed.  */\n-\n-static tree\n-lto_type_for_size (unsigned precision, int unsignedp)\n-{\n-  int i;\n-\n-  if (precision == TYPE_PRECISION (integer_type_node))\n-    return unsignedp ? unsigned_type_node : integer_type_node;\n-\n-  if (precision == TYPE_PRECISION (signed_char_type_node))\n-    return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n-\n-  if (precision == TYPE_PRECISION (short_integer_type_node))\n-    return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n-\n-  if (precision == TYPE_PRECISION (long_integer_type_node))\n-    return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n-\n-  if (precision == TYPE_PRECISION (long_long_integer_type_node))\n-    return unsignedp\n-\t   ? long_long_unsigned_type_node\n-\t   : long_long_integer_type_node;\n-\n-  for (i = 0; i < NUM_INT_N_ENTS; i ++)\n-    if (int_n_enabled_p[i]\n-\t&& precision == int_n_data[i].bitsize)\n-      return (unsignedp ? int_n_trees[i].unsigned_type\n-\t      : int_n_trees[i].signed_type);\n-\n-  if (precision <= TYPE_PRECISION (intQI_type_node))\n-    return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n-\n-  if (precision <= TYPE_PRECISION (intHI_type_node))\n-    return unsignedp ? unsigned_intHI_type_node : intHI_type_node;\n-\n-  if (precision <= TYPE_PRECISION (intSI_type_node))\n-    return unsignedp ? unsigned_intSI_type_node : intSI_type_node;\n-\n-  if (precision <= TYPE_PRECISION (intDI_type_node))\n-    return unsignedp ? unsigned_intDI_type_node : intDI_type_node;\n-\n-  if (precision <= TYPE_PRECISION (intTI_type_node))\n-    return unsignedp ? unsigned_intTI_type_node : intTI_type_node;\n-\n-  return NULL_TREE;\n-}\n-\n-\n /* Return a data type that has machine mode MODE.\n    If the mode is an integer,\n    then UNSIGNEDP selects between signed and unsigned types.\n@@ -1364,8 +1312,6 @@ static void lto_init_ts (void)\n #define LANG_HOOKS_GET_ALIAS_SET gimple_get_alias_set\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE lto_type_for_mode\n-#undef LANG_HOOKS_TYPE_FOR_SIZE\n-#define LANG_HOOKS_TYPE_FOR_SIZE lto_type_for_size\n #undef LANG_HOOKS_SET_DECL_ASSEMBLER_NAME\n #define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME lto_set_decl_assembler_name\n #undef LANG_HOOKS_GLOBAL_BINDINGS_P"}]}