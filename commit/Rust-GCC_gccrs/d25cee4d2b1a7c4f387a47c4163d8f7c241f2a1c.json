{"sha": "d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI1Y2VlNGQyYjFhN2M0ZjM4N2E0N2M0MTYzZDhmN2MyNDFmMmExYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-16T21:13:08Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-16T21:13:08Z"}, "message": "tree-def (WITH_SIZE_EXPR): New.\n\n        * tree-def (WITH_SIZE_EXPR): New.\n        * explow.c (expr_size, int_expr_size): Handle WITH_SIZE_EXPR.\n        * expr.c (expand_expr_real_1): Likewise.\n        * gimplify.c (maybe_with_size_expr): New.\n        (gimplify_arg, gimplify_modify_expr): Use it.\n        (gimplify_modify_expr_to_memcpy): Take size parameter.\n        (gimplify_modify_expr_to_memset): Likewise.\n        (gimplify_expr): Handle WITH_SIZE_EXPR.\n        * tree-alias-common.c (find_func_aliases): Likewise.\n        * tree-eh.c (tree_could_trap_p): Likewise.\n        (tree_could_throw_p): Likewise.\n        * tree-gimple.c (is_gimple_lvalue): Likewise.\n        (get_call_expr_in): Likewise.\n        * tree-inline.c (estimate_num_insns_1): Likewise.\n        (expand_calls_inline): Likewise.\n        * tree-nested.c (convert_call_expr): Likewise.\n        * tree-pretty-print.c (dump_generic_node): Likewise.\n        * tree-sra.c (sra_walk_expr): Likewise.\n        * tree-ssa-alias.c (add_pointed_to_expr): Likewise.\n        * tree-ssa-ccp.c (get_rhs, set_rhs): Likewise.\n        * tree-ssa-operands.c (get_expr_operands): Likewise.\n        * tree-tailcall.c (find_tail_calls): Likewise.\n\n        * calls.c (expand_call): Reset old_stack_allocated after\n        calling emit_stack_restore.\n\n        * gcc.c-torture/compile/20020210-1.c: Remove XFAIL.\n\nFrom-SVN: r84833", "tree": {"sha": "a6887d7a4c296d5e39f29a2367845311f7100e89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6887d7a4c296d5e39f29a2367845311f7100e89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/comments", "author": null, "committer": null, "parents": [{"sha": "4c86f32571913801c3e876d2621ef74adce3fdbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c86f32571913801c3e876d2621ef74adce3fdbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c86f32571913801c3e876d2621ef74adce3fdbc"}], "stats": {"total": 295, "additions": 226, "deletions": 69}, "files": [{"sha": "2647e885fe958cc72b1911ae2a518635d5bf5a22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -1,3 +1,31 @@\n+2004-07-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree-def (WITH_SIZE_EXPR): New.\n+\t* explow.c (expr_size, int_expr_size): Handle WITH_SIZE_EXPR.\n+\t* expr.c (expand_expr_real_1): Likewise.\n+\t* gimplify.c (maybe_with_size_expr): New.\n+\t(gimplify_arg, gimplify_modify_expr): Use it.\n+\t(gimplify_modify_expr_to_memcpy): Take size parameter.\n+\t(gimplify_modify_expr_to_memset): Likewise.\n+\t(gimplify_expr): Handle WITH_SIZE_EXPR.\n+\t* tree-alias-common.c (find_func_aliases): Likewise.\n+\t* tree-eh.c (tree_could_trap_p): Likewise.\n+\t(tree_could_throw_p): Likewise.\n+\t* tree-gimple.c (is_gimple_lvalue): Likewise.\n+\t(get_call_expr_in): Likewise.\n+\t* tree-inline.c (estimate_num_insns_1): Likewise.\n+\t(expand_calls_inline): Likewise.\n+\t* tree-nested.c (convert_call_expr): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): Likewise.\n+\t* tree-sra.c (sra_walk_expr): Likewise.\n+\t* tree-ssa-alias.c (add_pointed_to_expr): Likewise.\n+\t* tree-ssa-ccp.c (get_rhs, set_rhs): Likewise.\n+\t* tree-ssa-operands.c (get_expr_operands): Likewise.\n+\t* tree-tailcall.c (find_tail_calls): Likewise.\n+\t\n+\t* calls.c (expand_call): Reset old_stack_allocated after\n+\tcalling emit_stack_restore.\n+\n 2004-07-16  Richard Henderson  <rth@redhat.com>\n \n \t* langhooks-def.h (LANG_HOOKS_TREE_INLINING_COPY_RES_DECL_FOR_INLINING,"}, {"sha": "c48fd8299e839e93ce50472d593c51e6a5ce549d", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -3045,6 +3045,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t  emit_stack_restore (SAVE_BLOCK, old_stack_level, NULL_RTX);\n \t  stack_pointer_delta = old_stack_pointer_delta;\n \t  pending_stack_adjust = old_pending_adj;\n+\t  old_stack_allocated = stack_pointer_delta - pending_stack_adjust;\n \t  stack_arg_under_construction = old_stack_arg_under_construction;\n \t  highest_outgoing_arg_in_use = initial_highest_arg_in_use;\n \t  stack_usage_map = initial_stack_usage_map;"}, {"sha": "3fb0f94f423d694937965f2c8c8619a7f7953c0d", "filename": "gcc/explow.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -240,7 +240,12 @@ eliminate_constant_term (rtx x, rtx *constptr)\n rtx\n expr_size (tree exp)\n {\n-  tree size = SUBSTITUTE_PLACEHOLDER_IN_EXPR (lang_hooks.expr_size (exp), exp);\n+  tree size;\n+\n+  if (TREE_CODE (exp) == WITH_SIZE_EXPR)\n+    size = TREE_OPERAND (exp, 1);\n+  else\n+    size = SUBSTITUTE_PLACEHOLDER_IN_EXPR (lang_hooks.expr_size (exp), exp);\n \n   return expand_expr (size, NULL_RTX, TYPE_MODE (sizetype), 0);\n }\n@@ -251,17 +256,17 @@ expr_size (tree exp)\n HOST_WIDE_INT\n int_expr_size (tree exp)\n {\n-  tree t = lang_hooks.expr_size (exp);\n-\n-  if (t == 0\n-      || TREE_CODE (t) != INTEGER_CST\n-      || TREE_OVERFLOW (t)\n-      || TREE_INT_CST_HIGH (t) != 0\n-      /* If the result would appear negative, it's too big to represent.  */\n-      || (HOST_WIDE_INT) TREE_INT_CST_LOW (t) < 0)\n+  tree size;\n+\n+  if (TREE_CODE (exp) == WITH_SIZE_EXPR)\n+    size = TREE_OPERAND (exp, 1);\n+  else\n+    size = lang_hooks.expr_size (exp);\n+\n+  if (size == 0 || !host_integerp (size, 0))\n     return -1;\n \n-  return TREE_INT_CST_LOW (t);\n+  return tree_low_cst (size, 0);\n }\n \f\n /* Return a copy of X in which all memory references"}, {"sha": "dd1aad9cc329727517f9b9679605c1777a69a933", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -8651,6 +8651,12 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       expand_asm_expr (exp);\n       return const0_rtx;\n \n+    case WITH_SIZE_EXPR:\n+      /* WITH_SIZE_EXPR expands to its first argument.  The caller should\n+\t have pulled out the size to use in whatever context it needed.  */\n+      return expand_expr_real (TREE_OPERAND (exp, 0), original_target, tmode,\n+\t\t\t       modifier, alt_rtl);\n+\n     default:\n       return lang_hooks.expand_expr (exp, original_target, tmode,\n \t\t\t\t     modifier, alt_rtl);"}, {"sha": "6cf5d486b3f261c1db676ac4fc994186c09eaec5", "filename": "gcc/gimplify.c", "status": "modified", "additions": 63, "deletions": 31, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -72,8 +72,6 @@ typedef struct gimple_temp_hash_elt\n } elt_t;\n \n /* Forward declarations.  */\n-static enum gimplify_status gimplify_modify_expr_rhs (tree *, tree *, tree *,\n-\t\t\t\t\t\t      tree *, tree *, bool);\n static enum gimplify_status gimplify_compound_expr (tree *, tree *, bool);\n \n \n@@ -1788,6 +1786,27 @@ gimplify_self_mod_expr (tree *expr_p, tree *pre_p, tree *post_p,\n     }\n }\n \n+/* If *EXPR_P has a variable sized type, wrap it in a WITH_SIZE_EXPR.  */\n+\n+static void\n+maybe_with_size_expr (tree *expr_p)\n+{\n+  tree expr, type, size;\n+\n+  expr = *expr_p;\n+  type = TREE_TYPE (expr);\n+  if (type == error_mark_node)\n+    return;\n+\n+  size = TYPE_SIZE_UNIT (type);\n+  if (size && TREE_CODE (size) != INTEGER_CST)\n+    {\n+      size = unshare_expr (size);\n+      size = SUBSTITUTE_PLACEHOLDER_IN_EXPR (size, expr);\n+      *expr_p = build2 (WITH_SIZE_EXPR, type, expr, size);\n+    }\n+}\n+\n /* Subroutine of gimplify_call_expr:  Gimplify a single argument.  */\n \n static enum gimplify_status\n@@ -1806,6 +1825,9 @@ gimplify_arg (tree *expr_p, tree *pre_p)\n   else\n     test = is_gimple_lvalue, fb = fb_either;\n \n+  /* If this is a variable sized type, we must remember the size.  */\n+  maybe_with_size_expr (expr_p);\n+\n   /* There is a sequence point before a function call.  Side effects in\n      the argument list must occur before the actual call. So, when\n      gimplifying arguments, force gimplify_expr to use an internal\n@@ -2316,18 +2338,14 @@ gimplify_cond_expr (tree *expr_p, tree *pre_p, tree target)\n    a call to __builtin_memcpy.  */\n \n static enum gimplify_status\n-gimplify_modify_expr_to_memcpy (tree *expr_p, bool want_value)\n+gimplify_modify_expr_to_memcpy (tree *expr_p, tree size, bool want_value)\n {\n   tree args, t, to, to_ptr, from;\n \n   to = TREE_OPERAND (*expr_p, 0);\n   from = TREE_OPERAND (*expr_p, 1);\n \n-  t = TYPE_SIZE_UNIT (TREE_TYPE (from));\n-  t = unshare_expr (t);\n-  t = SUBSTITUTE_PLACEHOLDER_IN_EXPR (t, to);\n-  t = SUBSTITUTE_PLACEHOLDER_IN_EXPR (t, from);\n-  args = tree_cons (NULL, t, NULL);\n+  args = tree_cons (NULL, size, NULL);\n \n   t = build_fold_addr_expr (from);\n   args = tree_cons (NULL, t, args);\n@@ -2352,16 +2370,13 @@ gimplify_modify_expr_to_memcpy (tree *expr_p, bool want_value)\n    a CONSTRUCTOR with an empty element list.  */\n \n static enum gimplify_status\n-gimplify_modify_expr_to_memset (tree *expr_p, bool want_value)\n+gimplify_modify_expr_to_memset (tree *expr_p, tree size, bool want_value)\n {\n   tree args, t, to, to_ptr;\n \n   to = TREE_OPERAND (*expr_p, 0);\n \n-  t = TYPE_SIZE_UNIT (TREE_TYPE (TREE_OPERAND (*expr_p, 1)));\n-  t = unshare_expr (t);\n-  t = SUBSTITUTE_PLACEHOLDER_IN_EXPR (t, to);\n-  args = tree_cons (NULL, t, NULL);\n+  args = tree_cons (NULL, size, NULL);\n \n   args = tree_cons (NULL, integer_zero_node, args);\n \n@@ -2771,24 +2786,13 @@ gimplify_modify_expr (tree *expr_p, tree *pre_p, tree *post_p, bool want_value)\n   if (ret != GS_UNHANDLED)\n     return ret;\n \n-  /* If the value being copied is of variable width, expose the length\n-     if the copy by converting the whole thing to a memcpy/memset.\n-     Note that we need to do this before gimplifying any of the operands\n-     so that we can resolve any PLACEHOLDER_EXPRs in the size. \n-     Also note that the RTL expander uses the size of the expression to\n-     be copied, not of the destination, so that is what we must here.\n-     The types on both sides of the MODIFY_EXPR should be the same,\n-     but they aren't always and there are problems with class-wide types\n-     in Ada where it's hard to make it \"correct\".  */\n-  if (TREE_CODE (TREE_TYPE (*from_p)) != ERROR_MARK\n-      && TYPE_SIZE_UNIT (TREE_TYPE (*from_p))\n-      && TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (*from_p))) != INTEGER_CST)\n-    {\n-      if (TREE_CODE (*from_p) == CONSTRUCTOR)\n-\treturn gimplify_modify_expr_to_memset (expr_p, want_value);\n-      else\n-\treturn gimplify_modify_expr_to_memcpy (expr_p, want_value);\n-    }\n+  /* If the value being copied is of variable width, compute the length\n+     of the copy into a WITH_SIZE_EXPR.   Note that we need to do this\n+     before gimplifying any of the operands so that we can resolve any\n+     PLACEHOLDER_EXPRs in the size.  Also note that the RTL expander uses\n+     the size of the expression to be copied, not of the destination, so\n+     that is what we must here.  */\n+  maybe_with_size_expr (from_p);\n \n   ret = gimplify_expr (to_p, pre_p, post_p, is_gimple_lvalue, fb_lvalue);\n   if (ret == GS_ERROR)\n@@ -2805,6 +2809,23 @@ gimplify_modify_expr (tree *expr_p, tree *pre_p, tree *post_p, bool want_value)\n   if (ret != GS_UNHANDLED)\n     return ret;\n \n+  /* If we've got a variable sized assignment between two lvalues (i.e. does\n+     not involve a call), then we can make things a bit more straightforward\n+     by converting the assignment to memcpy or memset.  */\n+  if (TREE_CODE (*from_p) == WITH_SIZE_EXPR)\n+    {\n+      tree from = TREE_OPERAND (*from_p, 0);\n+      tree size = TREE_OPERAND (*from_p, 1);\n+\n+      if (TREE_CODE (from) == CONSTRUCTOR)\n+\treturn gimplify_modify_expr_to_memset (expr_p, size, want_value);\n+      if (is_gimple_addr_expr_arg (from))\n+\t{\n+\t  *from_p = from;\n+\t  return gimplify_modify_expr_to_memcpy (expr_p, size, want_value);\n+\t}\n+    }\n+\n   /* If the destination is already simple, nothing else needed.  */\n   if (is_gimple_tmp_var (*to_p) || !want_value)\n     ret = GS_ALL_DONE;\n@@ -3784,6 +3805,17 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t  ret = gimplify_statement_list (expr_p);\n \t  break;\n \n+\tcase WITH_SIZE_EXPR:\n+\t  {\n+\t    enum gimplify_status r0, r1;\n+\t    r0 = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, \n+\t\t\t\tpost_p == &internal_post ? NULL : post_p,\n+\t\t\t\tgimple_test_f, fallback);\n+\t    r1 = gimplify_expr (&TREE_OPERAND (*expr_p, 1), pre_p, post_p,\n+\t\t\t\tis_gimple_val, fb_rvalue);\n+\t  }\n+\t  break;\n+\n \tcase VAR_DECL:\n \t  /* ??? If this is a local variable, and it has not been seen in any\n \t     outer BIND_EXPR, then it's probably the result of a duplicate"}, {"sha": "bdf36eaea29ac88b4e213bc75845869bf260237a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -1,3 +1,7 @@\n+2004-07-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.c-torture/compile/20020210-1.c: Remove XFAIL.\n+\n 2004-07-16  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* lib/fortran-torture.exp (fortran-torture): Don't test compile"}, {"sha": "5ca27f4f6ca46b3edd930315f18ae6c67e9f002f", "filename": "gcc/testsuite/gcc.c-torture/compile/20020210-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020210-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020210-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020210-1.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -1,3 +1,2 @@\n /* PR c/5615 */\n-/* { dg-xfail-if \"regression/16417\" { \"*-*-*\" } { \"-O1\" \"-O2\" \"-O3 -fomit-frame-pointer\" \"-O3 -g\" \"-Os\" } { \"\" } } */\n void f(int a, struct {int b[a];} c) {}"}, {"sha": "a7ce22d8782f8477faec816c9f2ad629383c692e", "filename": "gcc/tree-alias-common.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-alias-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-alias-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-alias-common.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -448,7 +448,10 @@ find_func_aliases (tree stp)\n \t{\n \t  op0 = TREE_OPERAND (stp, 0);\n \t  op1 = TREE_OPERAND (stp, 1);\n+\t  if (TREE_CODE (op1) == WITH_SIZE_EXPR)\n+\t    op1 = TREE_OPERAND (op1, 0);\n \t}\n+\n       /* lhsAV should always have an alias variable */\n       lhsAV = get_alias_var (op0);\n       if (!lhsAV)"}, {"sha": "b7fe64de5edc308d28443eba13e9e9b526246138", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -1723,14 +1723,17 @@ tree_could_trap_p (tree expr)\n \thonor_trapv = true;\n     }\n \n+ restart:\n   switch (code)\n     {\n     case COMPONENT_REF:\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n     case BIT_FIELD_REF:\n-      t = TREE_OPERAND (expr, 0);\n-      return tree_could_trap_p (t);\n+    case WITH_SIZE_EXPR:\n+      expr = TREE_OPERAND (expr, 0);\n+      code = TREE_CODE (expr);\n+      goto restart;\n \n     case ARRAY_RANGE_REF:\n       /* Let us be conservative here for now.  We might be checking bounds of\n@@ -1843,6 +1846,8 @@ tree_could_throw_p (tree t)\n       t = TREE_OPERAND (t, 1);\n     }\n \n+  if (TREE_CODE (t) == WITH_SIZE_EXPR)\n+    t = TREE_OPERAND (t, 0);\n   if (TREE_CODE (t) == CALL_EXPR)\n     return (call_expr_flags (t) & ECF_NOTHROW) == 0;\n   if (flag_non_call_exceptions)"}, {"sha": "c081b5aabaed4910de27ec5110c1e844a2457bc5", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -118,12 +118,22 @@ Boston, MA 02111-1307, USA.  */\n    addr-expr-arg: ID\n \t\t| compref\n \n+   with-size-arg: addr-expr-arg\n+\t\t| indirectref\n+\t\t| call-stmt\n+\n+   indirectref\t: INDIRECT_REF\n+\t\t\top0 -> val\n+\n    lhs\t\t: addr-expr-arg\n-\t\t| '*' val\n \t\t| bitfieldref\n+\t\t| indirectref\n+\t\t| WITH_SIZE_EXPR\n+\t\t\top0 -> with-size-arg\n+\t\t\top1 -> val\n \n    min-lval\t: ID\n-\t\t| '*' val\n+\t\t| indirectref\n \n    bitfieldref\t: BIT_FIELD_REF\n \t\t\top0 -> inner-compref\n@@ -155,18 +165,26 @@ Boston, MA 02111-1307, USA.  */\n \t\t\top0 -> inner-compref\n \n    condition\t: val\n-\t\t| val RELOP val\n+\t\t| RELOP\n+\t\t\top0 -> val\n+\t\t\top1 -> val\n \n    val\t\t: ID\n \t\t| CONST\n \n    rhs\t\t: lhs\n \t\t| CONST\n-\t\t| '&' addr-expr-arg\n-\t\t| call_expr\n-\t\t| UNOP val\n-\t\t| val BINOP val\n-\t\t| val RELOP val\n+\t\t| call-stmt\n+\t\t| ADDR_EXPR\n+\t\t\top0 -> addr-expr-arg\n+\t\t| UNOP\n+\t\t\top0 -> val\n+\t\t| BINOP\n+\t\t\top0 -> val\n+\t\t\top1 -> val\n+\t\t| RELOP\n+\t\t\top0 -> val\n+\t\t\top1 -> val\n */\n \n static inline bool is_gimple_id (tree);\n@@ -286,6 +304,7 @@ is_gimple_lvalue (tree t)\n {\n   return (is_gimple_addr_expr_arg (t)\n \t  || TREE_CODE (t) == INDIRECT_REF\n+\t  || TREE_CODE (t) == WITH_SIZE_EXPR\n \t  /* These are complex lvalues, but don't have addresses, so they\n \t     go here.  */\n \t  || TREE_CODE (t) == BIT_FIELD_REF);\n@@ -506,6 +525,8 @@ get_call_expr_in (tree t)\n {\n   if (TREE_CODE (t) == MODIFY_EXPR)\n     t = TREE_OPERAND (t, 1);\n+  if (TREE_CODE (t) == WITH_SIZE_EXPR)\n+    t = TREE_OPERAND (t, 0);\n   if (TREE_CODE (t) == CALL_EXPR)\n     return t;\n   return NULL_TREE;"}, {"sha": "edd5faece9536bb45d535794b4b14089c897dd1e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -1262,6 +1262,7 @@ estimate_num_insns_1 (tree *tp, int *walk_subtrees, void *data)\n     case EXIT_EXPR:\n     case LOOP_EXPR:\n     case PHI_NODE:\n+    case WITH_SIZE_EXPR:\n       break;\n \n     /* We don't account constants for now.  Assume that the cost is amortized\n@@ -1779,6 +1780,11 @@ expand_calls_inline (tree *stmt_p, inline_data *id)\n     case MODIFY_EXPR:\n       stmt_p = &TREE_OPERAND (stmt, 1);\n       stmt = *stmt_p;\n+      if (TREE_CODE (stmt) == WITH_SIZE_EXPR)\n+\t{\n+\t  stmt_p = &TREE_OPERAND (stmt, 0);\n+\t  stmt = *stmt_p;\n+\t}\n       if (TREE_CODE (stmt) != CALL_EXPR)\n \tbreak;\n "}, {"sha": "16db5cf815737af0b259718f44291e36bba9d296", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -1196,7 +1196,8 @@ convert_call_expr (tree *tp, int *walk_subtrees, void *data)\n \n     case RETURN_EXPR:\n     case MODIFY_EXPR:\n-      /* Only return and modify may contain calls.  */\n+    case WITH_SIZE_EXPR:\n+      /* Only return modify and with_size_expr may contain calls.  */\n       *walk_subtrees = 1;\n       break;\n "}, {"sha": "c187b1a8696060783a898f1f8fd21fc82bcfa8f1", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -1413,6 +1413,14 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       pp_decimal_int (buffer, SSA_NAME_VERSION (node));\n       break;\n \n+    case WITH_SIZE_EXPR:\n+      pp_string (buffer, \"WITH_SIZE_EXPR <\");\n+      dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n+      pp_string (buffer, \", \");\n+      dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);\n+      pp_string (buffer, \">\");\n+      break;\n+\n     case VALUE_HANDLE:\n       pp_printf (buffer, \"VH.%d\", VALUE_HANDLE_ID (node));\n       break;"}, {"sha": "73866b4972a2f4fc2b9a633098d4abd40bc706fa", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -731,6 +731,11 @@ sra_walk_expr (tree *expr_p, block_stmt_iterator *bsi, bool is_output,\n \t   type other than the one we've scalarized.  */\n \tgoto use_all;\n \n+      case WITH_SIZE_EXPR:\n+\t/* This is a transparent wrapper.  The entire inner expression really\n+\t   is being used.  */\n+\tgoto use_all;\n+\n       use_all:\n         expr_p = &TREE_OPERAND (inner, 0);\n \tinner = expr = *expr_p;"}, {"sha": "ed4ffd993e32b06e157fc75639c518508d99a312", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -1680,6 +1680,9 @@ add_pointed_to_expr (tree ptr, tree value)\n {\n   struct ptr_info_def *pi;\n \n+  if (TREE_CODE (value) == WITH_SIZE_EXPR)\n+    value = TREE_OPERAND (value, 0);\n+\n #if defined ENABLE_CHECKING\n   /* Pointer variables should have been handled by merge_pointed_to_info.  */\n   if (TREE_CODE (value) == SSA_NAME"}, {"sha": "0c35717531d375325f8262dff3d9ed54efa8ce8f", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -2085,13 +2085,16 @@ get_rhs (tree stmt)\n     {\n     case RETURN_EXPR:\n       stmt = TREE_OPERAND (stmt, 0);\n-      if (stmt)\n-\treturn get_rhs (stmt);\n-      else\n-\treturn NULL;\n+      if (!stmt || TREE_CODE (stmt) != MODIFY_EXPR)\n+\treturn stmt;\n+      /* FALLTHRU */\n \n     case MODIFY_EXPR:\n-      return TREE_OPERAND (stmt, 1);\n+      stmt = TREE_OPERAND (stmt, 1);\n+      if (TREE_CODE (stmt) == WITH_SIZE_EXPR)\n+\treturn TREE_OPERAND (stmt, 0);\n+      else\n+\treturn stmt;\n \n     case COND_EXPR:\n       return COND_EXPR_COND (stmt);\n@@ -2143,6 +2146,9 @@ set_rhs (tree *stmt_p, tree expr)\n       /* FALLTHRU */\n \n     case MODIFY_EXPR:\n+      op = TREE_OPERAND (stmt, 1);\n+      if (TREE_CODE (op) == WITH_SIZE_EXPR)\n+\tstmt = op;\n       TREE_OPERAND (stmt, 1) = expr;\n       break;\n "}, {"sha": "bb60bd87332329aa14fcbbc0870f459395b0a6d2", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -931,23 +931,38 @@ get_expr_operands (tree stmt, tree *expr_p, int flags, voperands_t prev_vops)\n \tget_expr_operands (stmt, &TREE_OPERAND (expr, 2), opf_none, prev_vops);\n       return;\n \n+    case WITH_SIZE_EXPR:\n+      /* WITH_SIZE_EXPR is a pass-through reference to it's first argument,\n+\t and an rvalue reference to its second argument.  */\n+      get_expr_operands (stmt, &TREE_OPERAND (expr, 1), opf_none, prev_vops);\n+      get_expr_operands (stmt, &TREE_OPERAND (expr, 0), flags, prev_vops);\n+      return;\n+\n     case CALL_EXPR:\n       get_call_expr_operands (stmt, expr, prev_vops);\n       return;\n \n     case MODIFY_EXPR:\n-      get_expr_operands (stmt, &TREE_OPERAND (expr, 1), opf_none, prev_vops);\n+      {\n+\tint subflags;\n+\ttree op;\n+\n+\tget_expr_operands (stmt, &TREE_OPERAND (expr, 1), opf_none, prev_vops);\n+\n+\top = TREE_OPERAND (expr, 0);\n+\tif (TREE_CODE (op) == WITH_SIZE_EXPR)\n+\t  op = TREE_OPERAND (expr, 0);\n+\tif (TREE_CODE (op) == ARRAY_REF \n+\t    || TREE_CODE (op) == COMPONENT_REF\n+\t    || TREE_CODE (op) == REALPART_EXPR\n+\t    || TREE_CODE (op) == IMAGPART_EXPR)\n+\t  subflags = opf_is_def;\n+\telse\n+\t  subflags = opf_is_def | opf_kill_def;\n \n-      if (TREE_CODE (TREE_OPERAND (expr, 0)) == ARRAY_REF \n-          || TREE_CODE (TREE_OPERAND (expr, 0)) == COMPONENT_REF\n-\t  || TREE_CODE (TREE_OPERAND (expr, 0)) == REALPART_EXPR\n-\t  || TREE_CODE (TREE_OPERAND (expr, 0)) == IMAGPART_EXPR)\n-        get_expr_operands (stmt, &TREE_OPERAND (expr, 0), opf_is_def, \n-\t                   prev_vops);\n-      else\n-        get_expr_operands (stmt, &TREE_OPERAND (expr, 0), \n-\t                   opf_is_def | opf_kill_def, prev_vops);\n-      return;\n+\tget_expr_operands (stmt, &TREE_OPERAND (expr, 0), subflags, prev_vops);\n+\treturn;\n+      }\n \n     case VA_ARG_EXPR:\n       /* Mark VA_ARG_EXPR nodes as making volatile references.  FIXME,"}, {"sha": "5a89868dcc135ab8bfefc0ab1a2018dba4a95476", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -384,6 +384,8 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n \t{\n \t  ass_var = TREE_OPERAND (stmt, 0);\n \t  call = TREE_OPERAND (stmt, 1);\n+\t  if (TREE_CODE (call) == WITH_SIZE_EXPR)\n+\t    call = TREE_OPERAND (call, 0);\n \t}\n       else\n \t{"}, {"sha": "65fd479cdb423400caa5711adbceafd401765913", "filename": "gcc/tree.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=d25cee4d2b1a7c4f387a47c4163d8f7c241f2a1c", "patch": "@@ -885,6 +885,13 @@ DEFTREECODE (VALUE_HANDLE, \"value_handle\", 'x', 0)\n    baseclass of itself or another class.  */\n DEFTREECODE (TREE_BINFO, \"tree_binfo\", 'x', 0)\n \n+/* Records the size for an expression of variable size type.  This is\n+   for use in contexts in which we are accessing the entire object,\n+   such as for a function call, or block copy.\n+   Operand 0 is the real expression.\n+   Operand 1 is the size of the type in the expression.  */\n+DEFTREECODE (WITH_SIZE_EXPR, \"with_size_expr\", 'e', 2)\n+\n /*\n Local variables:\n mode:c"}]}