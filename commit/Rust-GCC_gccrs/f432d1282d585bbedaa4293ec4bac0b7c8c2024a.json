{"sha": "f432d1282d585bbedaa4293ec4bac0b7c8c2024a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQzMmQxMjgyZDU4NWJiZWRhYTQyOTNlYzRiYWMwYjdjOGMyMDI0YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2016-08-08T19:53:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-08-08T19:53:44Z"}, "message": "re PR go/72814 (reflect FAILs on 32-bit Solaris/SPARC: SIGILL)\n\n\tPR go/72814\n\n    runtime: treat zero-sized result value as void\n    \n    Change the FFI interface to treat a call to a function that returns a\n    zero-sized result as a call to a function that returns void.\n    \n    This is part of the fix for https://gcc.gnu.org/PR72814.  On 32-bit\n    SPARC systems, a call to a function that returns a non-zero-sized struct\n    is followed by an unimp instruction that describes the size of the\n    struct.  The function returns to the address after the unimp\n    instruction.  The libffi library can not represent a zero-sized struct,\n    so we wind up treating it as a 1-byte struct.  Thus in that case libffi\n    calls the function with an unimp instruction, but the function does not\n    adjust the return address.  The result is that the program attempts to\n    execute the unimp instruction, causing a crash.\n    \n    This is part of a change that fixes the crash by treating all functions\n    that return zero bytes as functions that return void.\n    \n    Reviewed-on: https://go-review.googlesource.com/25585\n\n\t* go-gcc.cc (Gcc_backend::function_type): If the return type is\n\tzero bytes, treat the function as returning void.\n\t(return_statement): If the return type is zero bytes, don't\n\tactually return any values.\n\nFrom-SVN: r239252", "tree": {"sha": "30584249a7b8d17b5cdd6db69cfa4ce4069aa72c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30584249a7b8d17b5cdd6db69cfa4ce4069aa72c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f432d1282d585bbedaa4293ec4bac0b7c8c2024a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f432d1282d585bbedaa4293ec4bac0b7c8c2024a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f432d1282d585bbedaa4293ec4bac0b7c8c2024a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f432d1282d585bbedaa4293ec4bac0b7c8c2024a/comments", "author": null, "committer": null, "parents": [{"sha": "5c9343960762bda86bc64dc19862dcf3088102cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c9343960762bda86bc64dc19862dcf3088102cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c9343960762bda86bc64dc19862dcf3088102cd"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "fef5c44dbebb99ba2fc73f39a559a1b6b4df5e95", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f432d1282d585bbedaa4293ec4bac0b7c8c2024a/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f432d1282d585bbedaa4293ec4bac0b7c8c2024a/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=f432d1282d585bbedaa4293ec4bac0b7c8c2024a", "patch": "@@ -1,3 +1,11 @@\n+2016-08-08  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR go/72814\n+\t* go-gcc.cc (Gcc_backend::function_type): If the return type is\n+\tzero bytes, treat the function as returning void.\n+\t(return_statement): If the return type is zero bytes, don't\n+\tactually return any values.\n+\n 2016-08-05  Ian Lance Taylor  <iant@google.com>\n \n \tPR go/72812"}, {"sha": "13407ea5d37a67c76ffd06e0b3d6636c6441430c", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f432d1282d585bbedaa4293ec4bac0b7c8c2024a/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f432d1282d585bbedaa4293ec4bac0b7c8c2024a/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=f432d1282d585bbedaa4293ec4bac0b7c8c2024a", "patch": "@@ -953,6 +953,14 @@ Gcc_backend::function_type(const Btyped_identifier& receiver,\n   if (result == error_mark_node)\n     return this->error_type();\n \n+  // The libffi library can not represent a zero-sized object.  To\n+  // avoid causing confusion on 32-bit SPARC, we treat a function that\n+  // returns a zero-sized value as returning void.  That should do no\n+  // harm since there is no actual value to be returned.  See\n+  // https://gcc.gnu.org/PR72814 for details.\n+  if (result != void_type_node && int_size_in_bytes(result) == 0)\n+    result = void_type_node;\n+\n   tree fntype = build_function_type(result, args);\n   if (fntype == error_mark_node)\n     return this->error_type();\n@@ -2127,6 +2135,27 @@ Gcc_backend::return_statement(Bfunction* bfunction,\n   if (result == error_mark_node)\n     return this->error_statement();\n \n+  // If the result size is zero bytes, we have set the function type\n+  // to have a result type of void, so don't return anything.\n+  // See the function_type method.\n+  if (int_size_in_bytes(TREE_TYPE(result)) == 0)\n+    {\n+      tree stmt_list = NULL_TREE;\n+      for (std::vector<Bexpression*>::const_iterator p = vals.begin();\n+\t   p != vals.end();\n+\t   p++)\n+\t{\n+\t  tree val = (*p)->get_tree();\n+\t  if (val == error_mark_node)\n+\t    return this->error_statement();\n+\t  append_to_statement_list(val, &stmt_list);\n+\t}\n+      tree ret = fold_build1_loc(location.gcc_location(), RETURN_EXPR,\n+\t\t\t\t void_type_node, NULL_TREE);\n+      append_to_statement_list(ret, &stmt_list);\n+      return this->make_statement(stmt_list);\n+    }\n+\n   tree ret;\n   if (vals.empty())\n     ret = fold_build1_loc(location.gcc_location(), RETURN_EXPR, void_type_node,"}, {"sha": "6ec9f7b551a8644f7e192776cbc5f958fb3601aa", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f432d1282d585bbedaa4293ec4bac0b7c8c2024a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f432d1282d585bbedaa4293ec4bac0b7c8c2024a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=f432d1282d585bbedaa4293ec4bac0b7c8c2024a", "patch": "@@ -1,4 +1,4 @@\n-eeeeff3e3dd6c09aaefdf13cce99a5beff47a095\n+5e4c16d4fea39835e16f17c3d2b2e85f5c81d815\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "8817080c59516e20879e7171c6bda5e42cb78952", "filename": "libgo/runtime/go-ffi.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f432d1282d585bbedaa4293ec4bac0b7c8c2024a/libgo%2Fruntime%2Fgo-ffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f432d1282d585bbedaa4293ec4bac0b7c8c2024a/libgo%2Fruntime%2Fgo-ffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-ffi.c?ref=f432d1282d585bbedaa4293ec4bac0b7c8c2024a", "patch": "@@ -288,6 +288,17 @@ go_func_return_ffi (const struct __go_func_type *func)\n \n   types = (const struct __go_type_descriptor **) func->__out.__values;\n \n+  // We compile a function that returns a zero-sized value as though\n+  // it returns void.  This works around a problem in libffi: it can't\n+  // represent a zero-sized value.\n+  for (i = 0; i < count; ++i)\n+    {\n+      if (types[i]->__size > 0)\n+\tbreak;\n+    }\n+  if (i == count)\n+    return &ffi_type_void;\n+\n   if (count == 1)\n     return go_type_to_ffi (types[0]);\n "}]}