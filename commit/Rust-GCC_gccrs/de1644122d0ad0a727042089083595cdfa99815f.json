{"sha": "de1644122d0ad0a727042089083595cdfa99815f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUxNjQ0MTIyZDBhZDBhNzI3MDQyMDg5MDgzNTk1Y2RmYTk5ODE1Zg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-05-28T14:00:29Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-05-28T14:00:29Z"}, "message": "PR c++/90548 - ICE with generic lambda and empty pack.\n\n\t* pt.c (tsubst_copy_and_build): Handle pack expansion properly.\n\n\t* g++.dg/cpp1y/lambda-generic-90548.C: New test.\n\nFrom-SVN: r271705", "tree": {"sha": "967d3d3302cdf836d0b473a98e889899c67b7f38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/967d3d3302cdf836d0b473a98e889899c67b7f38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de1644122d0ad0a727042089083595cdfa99815f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de1644122d0ad0a727042089083595cdfa99815f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de1644122d0ad0a727042089083595cdfa99815f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de1644122d0ad0a727042089083595cdfa99815f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "997636716c5dde7d59d026726a6f58918069f122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/997636716c5dde7d59d026726a6f58918069f122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/997636716c5dde7d59d026726a6f58918069f122"}], "stats": {"total": 55, "additions": 48, "deletions": 7}, "files": [{"sha": "36a415d91741819e42bd22d055bf03fc46c08548", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1644122d0ad0a727042089083595cdfa99815f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1644122d0ad0a727042089083595cdfa99815f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=de1644122d0ad0a727042089083595cdfa99815f", "patch": "@@ -1,3 +1,8 @@\n+2019-05-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/90548 - ICE with generic lambda and empty pack.\n+\t* pt.c (tsubst_copy_and_build): Handle pack expansion properly.\n+\n 2019-05-28  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (make_anon_name): Drop declaration."}, {"sha": "cfbd9fd4c888dd287e380651cd72507024df26f4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1644122d0ad0a727042089083595cdfa99815f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1644122d0ad0a727042089083595cdfa99815f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=de1644122d0ad0a727042089083595cdfa99815f", "patch": "@@ -18861,6 +18861,9 @@ tsubst_copy_and_build (tree t,\n \t   the thunk template for a generic lambda.  */\n \tif (CALL_FROM_THUNK_P (t))\n \t  {\n+\t    /* Now that we've expanded any packs, the number of call args\n+\t       might be different.  */\n+\t    unsigned int cargs = call_args->length ();\n \t    tree thisarg = NULL_TREE;\n \t    if (TREE_CODE (function) == COMPONENT_REF)\n \t      {\n@@ -18874,7 +18877,7 @@ tsubst_copy_and_build (tree t,\n \t    /* We aren't going to do normal overload resolution, so force the\n \t       template-id to resolve.  */\n \t    function = resolve_nondeduced_context (function, complain);\n-\t    for (unsigned i = 0; i < nargs; ++i)\n+\t    for (unsigned i = 0; i < cargs; ++i)\n \t      {\n \t\t/* In a thunk, pass through args directly, without any\n \t\t   conversions.  */\n@@ -18885,12 +18888,18 @@ tsubst_copy_and_build (tree t,\n \t      }\n \t    if (thisarg)\n \t      {\n-\t\t/* Shift the other args over to make room.  */\n-\t\ttree last = (*call_args)[nargs - 1];\n-\t\tvec_safe_push (call_args, last);\n-\t\tfor (int i = nargs-1; i > 0; --i)\n-\t\t  (*call_args)[i] = (*call_args)[i-1];\n-\t\t(*call_args)[0] = thisarg;\n+\t\t/* If there are no other args, just push 'this'.  */\n+\t\tif (cargs == 0)\n+\t\t  vec_safe_push (call_args, thisarg);\n+\t\telse\n+\t\t  {\n+\t\t    /* Otherwise, shift the other args over to make room.  */\n+\t\t    tree last = (*call_args)[cargs - 1];\n+\t\t    vec_safe_push (call_args, last);\n+\t\t    for (int i = cargs - 1; i > 0; --i)\n+\t\t      (*call_args)[i] = (*call_args)[i - 1];\n+\t\t    (*call_args)[0] = thisarg;\n+\t\t  }\n \t      }\n \t    ret = build_call_a (function, call_args->length (),\n \t\t\t\tcall_args->address ());"}, {"sha": "663cedb17050fb77041e8b9bb7c0c9ebc2ee720b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1644122d0ad0a727042089083595cdfa99815f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1644122d0ad0a727042089083595cdfa99815f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de1644122d0ad0a727042089083595cdfa99815f", "patch": "@@ -1,3 +1,8 @@\n+2019-05-28  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/90548 - ICE with generic lambda and empty pack.\n+\t* g++.dg/cpp1y/lambda-generic-90548.C: New test.\n+\n 2019-05-28  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n \n \t* gcc.target/aarch64/sve/mask_load_slp_1.c: New test for SLP"}, {"sha": "b845dd85c415d46de6cad9c675aa498eb4c7fce0", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-90548.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1644122d0ad0a727042089083595cdfa99815f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-90548.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1644122d0ad0a727042089083595cdfa99815f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-90548.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-90548.C?ref=de1644122d0ad0a727042089083595cdfa99815f", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/90548\n+// { dg-do compile { target c++14 } }\n+\n+struct S { S (void ()); };\n+S foo([] (auto...) { });\n+S foo2{[] (auto...) {}};\n+S foo3 = {[] (auto...) {}};\n+\n+struct W { W(void (int)); };\n+W bar([](auto...) { });\n+W bar2{[](auto...) { }};\n+W bar3 = {[](auto...) { }};\n+\n+struct T { T(void (int, int)); };\n+T qux([](auto...) { });\n+T qux2{[](auto...) { }};\n+T qux3 = {[](auto...) { }};\n+\n+struct R { R(void (int, int, int, int, int, int, int, int, int, int)); };\n+R baz([](auto...) { });\n+R baz2{[](auto...) { }};\n+R baz3 = {[](auto...) { }};"}]}