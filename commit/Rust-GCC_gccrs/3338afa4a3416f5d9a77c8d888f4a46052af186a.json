{"sha": "3338afa4a3416f5d9a77c8d888f4a46052af186a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMzOGFmYTRhMzQxNmY1ZDlhNzdjOGQ4ODhmNGE0NjA1MmFmMTg2YQ==", "commit": {"author": {"name": "Michael Meissner", "email": "Michael Meissner meissner@linux.ibm.com", "date": "2020-05-05T17:46:28Z"}, "committer": {"name": "Michael Meissner", "email": "Michael Meissner meissner@linux.ibm.com", "date": "2020-05-05T18:03:30Z"}, "message": "Patch ieee128-lib-patch010b", "tree": {"sha": "c2ac23dc6417f2344d3c381cba45d9182ce1c1c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2ac23dc6417f2344d3c381cba45d9182ce1c1c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3338afa4a3416f5d9a77c8d888f4a46052af186a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3338afa4a3416f5d9a77c8d888f4a46052af186a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3338afa4a3416f5d9a77c8d888f4a46052af186a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3338afa4a3416f5d9a77c8d888f4a46052af186a/comments", "author": null, "committer": null, "parents": [{"sha": "03831dcc98977531001706792d9bdfc2cf9cca99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03831dcc98977531001706792d9bdfc2cf9cca99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03831dcc98977531001706792d9bdfc2cf9cca99"}], "stats": {"total": 261, "additions": 259, "deletions": 2}, "files": [{"sha": "2b8512efb4f1363366b5302d49dc5ac18cd575a4", "filename": "libgcc/ChangeLog.meissner", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2FChangeLog.meissner", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2FChangeLog.meissner", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog.meissner?ref=3338afa4a3416f5d9a77c8d888f4a46052af186a", "patch": "@@ -1,3 +1,15 @@\n+2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t(ieee128-lib-patch010b)\n+\t* config.host (powerpc*-*-linux): Add support if glibc does not\n+\tprovide the appropriate IEEE 128-bit conversions to/from Decimal.\n+\t* config/rs6000/float128-decimal.c: New file.\n+\t* config/rs6000/float128-decimal.ver: New file.\n+\t* config/rs6000/t-float128-decimal: New file.\n+\t* configure.ac (powerpc*-*-linux): Add support if glibc does not\n+\tprovide the appropriate IEEE 128-bit conversions to/from Decimal.\n+\t* configure: Regenerate.\n+\n 2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n \n \t(ieee128-lib-patch003b)"}, {"sha": "7b48a3d476a710e3fee550d1b5f7b06d81f5a74b", "filename": "libgcc/config.host", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=3338afa4a3416f5d9a77c8d888f4a46052af186a", "patch": "@@ -1220,6 +1220,9 @@ powerpc*-*-linux*)\n \n \tif test $libgcc_cv_powerpc_float128 = yes; then\n \t\ttmake_file=\"${tmake_file} rs6000/t-float128\"\n+\t\tif test $libgcc_cv_powerpc_float128_dec = no; then\n+\t\t\ttmake_file=\"${tmake_file} rs6000/t-float128-decimal\"\n+\t\tfi\n \tfi\n \n \tif test $libgcc_cv_powerpc_float128_hw = yes; then"}, {"sha": "31af26bf22da57872d932ba39a8d0e6ca95b08d8", "filename": "libgcc/config/rs6000/float128-decimal.c", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2Fconfig%2Frs6000%2Ffloat128-decimal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2Fconfig%2Frs6000%2Ffloat128-decimal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffloat128-decimal.c?ref=3338afa4a3416f5d9a77c8d888f4a46052af186a", "patch": "@@ -0,0 +1,78 @@\n+/* Provide missing conversions between IEEE 128-bit floating point and Decimal\n+   floating point for PowerPC.\n+\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Michael Meissner (meissner@linux.ibm.com)\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+extern __float128 __dpd_trunctdkf (_Decimal128);\n+extern __float128 __dpd_truncddkf (_Decimal64);\n+extern __float128 __dpd_truncsdkf (_Decimal64);\n+extern _Decimal128 __dpd_extendkftd (__float128);\n+extern _Decimal64 __dpd_trunckfdd (__float128);\n+extern _Decimal32 __dpd_trunckfsd (__float128);\n+\n+__float128\n+__dpd_trunctdkf (_Decimal128 x)\n+{\n+  __ibm128 ibm = (__ibm128) x;\n+  return (__float128) ibm;\n+}\n+\n+__float128\n+__dpd_truncddkf (_Decimal64 x)\n+{\n+  __ibm128 ibm = (__ibm128) x;\n+  return (__float128) ibm;\n+}\n+\n+__float128\n+__dpd_truncsdkf (_Decimal64 x)\n+{\n+  __ibm128 ibm = (__ibm128) x;\n+  return (__float128) ibm;\n+}\n+\n+_Decimal128\n+__dpd_extendkftd (__float128 x)\n+{\n+  __ibm128 ibm = (__ibm128) x;\n+  return (_Decimal128) ibm;\n+}\n+\n+_Decimal64\n+__dpd_trunckfdd (__float128 x)\n+{\n+  __ibm128 ibm = (__ibm128) x;\n+  return (_Decimal64) ibm;\n+}\n+\n+_Decimal32\n+__dpd_trunckfsd (__float128 x)\n+{\n+  __ibm128 ibm = (__ibm128) x;\n+  return (_Decimal32) ibm;\n+}"}, {"sha": "08c15e2199f333fdd10b0a17a8236e8cb6e78dea", "filename": "libgcc/config/rs6000/float128-decimal.ver", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2Fconfig%2Frs6000%2Ffloat128-decimal.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2Fconfig%2Frs6000%2Ffloat128-decimal.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffloat128-decimal.ver?ref=3338afa4a3416f5d9a77c8d888f4a46052af186a", "patch": "@@ -0,0 +1,7 @@\n+GCC_10.0.0 {\n+  # float128 <-> decimal conversions\n+  __dpd_extendkftd\n+  __dpd_trunckfdd\n+  __dpd_trunckfsd\n+  __dpd_trunctdkf\n+}"}, {"sha": "2854c5113949fdcf2b4c053a6c8f7ef5e1aae0b0", "filename": "libgcc/config/rs6000/t-float128-decimal", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2Fconfig%2Frs6000%2Ft-float128-decimal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2Fconfig%2Frs6000%2Ft-float128-decimal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128-decimal?ref=3338afa4a3416f5d9a77c8d888f4a46052af186a", "patch": "@@ -0,0 +1,7 @@\n+# Add support for doing conversions between IEEE 128-bit floating point and\n+# Decimal types if glibc does not provide the necessary functions.\n+\n+LIB2ADD\t\t+= $(srcdir)/config/rs6000/float128-decimal.c\n+SHLIB_MAPFILES\t+= $(srcdir)/config/rs6000/float128-decimal.ver\n+\n+float128-decimal$(objext) : INTERNAL_CFLAGS += -mno-gnu-attribute"}, {"sha": "943086eef843438b50254dd4b762ff8fe7252811", "filename": "libgcc/configure", "status": "modified", "additions": 107, "deletions": 1, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=3338afa4a3416f5d9a77c8d888f4a46052af186a", "patch": "@@ -1801,6 +1801,52 @@ $as_echo \"$ac_res\" >&6; }\n   eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n \n } # ac_fn_c_check_header_preproc\n+\n+# ac_fn_c_try_link LINENO\n+# -----------------------\n+# Try to link conftest.$ac_ext, and return whether this succeeded.\n+ac_fn_c_try_link ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  rm -f conftest.$ac_objext conftest$ac_exeext\n+  if { { ac_try=\"$ac_link\"\n+case \"(($ac_try\" in\n+  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n+  *) ac_try_echo=$ac_try;;\n+esac\n+eval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n+$as_echo \"$ac_try_echo\"; } >&5\n+  (eval \"$ac_link\") 2>conftest.err\n+  ac_status=$?\n+  if test -s conftest.err; then\n+    grep -v '^ *+' conftest.err >conftest.er1\n+    cat conftest.er1 >&5\n+    mv -f conftest.er1 conftest.err\n+  fi\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; } && {\n+\t test -z \"$ac_c_werror_flag\" ||\n+\t test ! -s conftest.err\n+       } && test -s conftest$ac_exeext && {\n+\t test \"$cross_compiling\" = yes ||\n+\t test -x conftest$ac_exeext\n+       }; then :\n+  ac_retval=0\n+else\n+  $as_echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+\tac_retval=1\n+fi\n+  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information\n+  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would\n+  # interfere with the next link command; also delete a directory that is\n+  # left behind by Apple's compiler.  We do this before executing the actions.\n+  rm -rf conftest.dSYM conftest_ipa8_conftest.oo\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+  as_fn_set_status $ac_retval\n+\n+} # ac_fn_c_try_link\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -5201,7 +5247,9 @@ case ${host} in\n # At present, we cannot turn -mfloat128 on via #pragma GCC target, so just\n # check if we have VSX (ISA 2.06) support to build the software libraries, and\n # whether the assembler can handle xsaddqp for hardware support.  Also check if\n-# a new glibc is being used so that __builtin_cpu_supports can be used.\n+# a new glibc is being used so that __builtin_cpu_supports can be used.  Check\n+# to see if glibc provides the necessary decimal <-> IEEE 128 function, and\n+# arrange to build our own version if they are not provided.\n powerpc*-*-linux*)\n   saved_CFLAGS=\"$CFLAGS\"\n   CFLAGS=\"$CFLAGS -mabi=altivec -mvsx -mfloat128\"\n@@ -5258,6 +5306,64 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_powerpc_float128_hw\" >&5\n $as_echo \"$libgcc_cv_powerpc_float128_hw\" >&6; }\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for PowerPC convert __float128 to/from _Decimal libraries\" >&5\n+$as_echo_n \"checking for PowerPC convert __float128 to/from _Decimal libraries... \" >&6; }\n+if ${libgcc_cv_powerpc_float128_dec+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <stdlib.h>\n+     __attribute__((noinline)) __float128 f128_from_d128 (_Decimal128 d128)\n+     {\n+       return (__float128)d128;\n+     }\n+     __attribute__((noinline)) __float128 f128_from_d64 (_Decimal128 d64)\n+     {\n+       return (__float128)d64;\n+     }\n+     __attribute__((noinline)) __float128 f128_from_d32 (_Decimal128 d32)\n+     {\n+       return (__float128)d32;\n+     }\n+     __attribute__((noinline)) _Decimal128 d128_from_f128 (__float128 f128)\n+     {\n+       return (_Decimal128)f128;\n+     }\n+     __attribute__((noinline)) _Decimal64 d64_from_f128 (__float128 f128)\n+     {\n+       return (_Decimal64)f128;\n+     }\n+     __attribute__((noinline)) _Decimal32 d32_from_f128 (__float128 f128)\n+     {\n+       return (_Decimal32)f128;\n+     }\n+     int main (void)\n+     {\n+       __float128 five = 5.0;\n+       if (f128_from_d128 (5.0dl) != five\n+           || f128_from_d64 (5.0dd) != five\n+           || f128_from_d32 (5.0df) != five\n+           || d128_from_f128 (five) != 5.0dl\n+           || d64_from_f128 (five) != 5.0dd\n+           || d32_from_f128 (five) != 5.0df)\n+         abort ();\n+       return 0;\n+     }\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  libgcc_cv_powerpc_float128_dec=yes\n+else\n+  libgcc_cv_powerpc_float128_dec=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_powerpc_float128_dec\" >&5\n+$as_echo \"$libgcc_cv_powerpc_float128_dec\" >&6; }\n   CFLAGS=\"$saved_CFLAGS\"\n esac\n "}, {"sha": "4aa03a45f1aaf0fc39b186e3d13f0d98720cf2eb", "filename": "libgcc/configure.ac", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3338afa4a3416f5d9a77c8d888f4a46052af186a/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=3338afa4a3416f5d9a77c8d888f4a46052af186a", "patch": "@@ -424,7 +424,9 @@ case ${host} in\n # At present, we cannot turn -mfloat128 on via #pragma GCC target, so just\n # check if we have VSX (ISA 2.06) support to build the software libraries, and\n # whether the assembler can handle xsaddqp for hardware support.  Also check if\n-# a new glibc is being used so that __builtin_cpu_supports can be used.\n+# a new glibc is being used so that __builtin_cpu_supports can be used.  Check\n+# to see if glibc provides the necessary decimal <-> IEEE 128 function, and\n+# arrange to build our own version if they are not provided.\n powerpc*-*-linux*)\n   saved_CFLAGS=\"$CFLAGS\"\n   CFLAGS=\"$CFLAGS -mabi=altivec -mvsx -mfloat128\"\n@@ -457,6 +459,48 @@ powerpc*-*-linux*)\n \t__attribute__ ((__ifunc__ (\"add_resolver\")));])],\n     [libgcc_cv_powerpc_float128_hw=yes],\n     [libgcc_cv_powerpc_float128_hw=no])])\n+  AC_CACHE_CHECK([for PowerPC convert __float128 to/from _Decimal libraries],\n+\t\t [libgcc_cv_powerpc_float128_dec],\n+\t\t [AC_LINK_IFELSE(\n+    [AC_LANG_SOURCE([#include <stdlib.h>\n+     __attribute__((noinline)) __float128 f128_from_d128 (_Decimal128 d128)\n+     {\n+       return (__float128)d128;\n+     }\n+     __attribute__((noinline)) __float128 f128_from_d64 (_Decimal128 d64)\n+     {\n+       return (__float128)d64;\n+     }\n+     __attribute__((noinline)) __float128 f128_from_d32 (_Decimal128 d32)\n+     {\n+       return (__float128)d32;\n+     }\n+     __attribute__((noinline)) _Decimal128 d128_from_f128 (__float128 f128)\n+     {\n+       return (_Decimal128)f128;\n+     }\n+     __attribute__((noinline)) _Decimal64 d64_from_f128 (__float128 f128)\n+     {\n+       return (_Decimal64)f128;\n+     }\n+     __attribute__((noinline)) _Decimal32 d32_from_f128 (__float128 f128)\n+     {\n+       return (_Decimal32)f128;\n+     }\n+     int main (void)\n+     {\n+       __float128 five = 5.0;\n+       if (f128_from_d128 (5.0dl) != five\n+           || f128_from_d64 (5.0dd) != five\n+           || f128_from_d32 (5.0df) != five\n+           || d128_from_f128 (five) != 5.0dl\n+           || d64_from_f128 (five) != 5.0dd\n+           || d32_from_f128 (five) != 5.0df)\n+         abort ();\n+       return 0;\n+     }])],\n+    [libgcc_cv_powerpc_float128_dec=yes],\n+    [libgcc_cv_powerpc_float128_dec=no])])\n   CFLAGS=\"$saved_CFLAGS\"\n esac\n "}]}