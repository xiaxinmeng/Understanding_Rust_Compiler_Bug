{"sha": "81a55c6cd52e8784b93f81b1ab22fe9cd0cb7744", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFhNTVjNmNkNTJlODc4NGI5M2Y4MWIxYWIyMmZlOWNkMGNiNzc0NA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-18T22:30:29Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-10-18T22:30:29Z"}, "message": "(digest_init): If traditional, allow unbraced scalar\nto initialize the first element of an aggregate.\n\nFrom-SVN: r5795", "tree": {"sha": "50c35d1a78f7b59a2b6636b618332137b4c245b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50c35d1a78f7b59a2b6636b618332137b4c245b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81a55c6cd52e8784b93f81b1ab22fe9cd0cb7744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a55c6cd52e8784b93f81b1ab22fe9cd0cb7744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a55c6cd52e8784b93f81b1ab22fe9cd0cb7744", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a55c6cd52e8784b93f81b1ab22fe9cd0cb7744/comments", "author": null, "committer": null, "parents": [{"sha": "733484b5d62fe6104f83bcc292caff83b0b14727", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733484b5d62fe6104f83bcc292caff83b0b14727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/733484b5d62fe6104f83bcc292caff83b0b14727"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "189f3bc5d85175eed456edcbf87e2e4994045439", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a55c6cd52e8784b93f81b1ab22fe9cd0cb7744/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a55c6cd52e8784b93f81b1ab22fe9cd0cb7744/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=81a55c6cd52e8784b93f81b1ab22fe9cd0cb7744", "patch": "@@ -4607,6 +4607,38 @@ digest_init (type, init, require_constant, constructor_constant)\n       return error_mark_node;\n     }\n \n+  /* Traditionally, you can write  struct foo x = 0;\n+     and it initializes the first element of x to 0.  */\n+  if (flag_traditional)\n+    {\n+      tree top = 0, prev = 0;\n+      while (TREE_CODE (type) == RECORD_TYPE\n+\t     || TREE_CODE (type) == ARRAY_TYPE\n+\t     || TREE_CODE (type) == QUAL_UNION_TYPE\n+\t     || TREE_CODE (type) == UNION_TYPE)\n+\t{\n+\t  tree temp = build (CONSTRUCTOR, type, NULL_TREE, NULL_TREE);\n+\t  if (prev == 0)\n+\t    top = temp;\n+\t  else\n+\t    TREE_OPERAND (prev, 1) = build_tree_list (NULL_TREE, temp);\n+\t  prev = temp;\n+\t  if (TREE_CODE (type) == ARRAY_TYPE)\n+\t    type = TREE_TYPE (type);\n+\t  else if (TYPE_FIELDS (type))\n+\t    type = TREE_TYPE (TYPE_FIELDS (type));\n+\t  else\n+\t    {\n+\t      error_init (\"invalid initializer%s\", \" for `%s'\", NULL);\n+\t      return error_mark_node;\n+\t    }\n+\t}\n+      TREE_OPERAND (prev, 1)\n+\t= build_tree_list (NULL_TREE,\n+\t\t\t   digest_init (type, init, require_constant,\n+\t\t\t\t\tconstructor_constant));\n+      return top;\n+    }\n   error_init (\"invalid initializer%s\", \" for `%s'\", NULL);\n   return error_mark_node;\n }"}]}