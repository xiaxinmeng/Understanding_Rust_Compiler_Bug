{"sha": "9e0baa604103abcb676222364f1fa51e1f006203", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUwYmFhNjA0MTAzYWJjYjY3NjIyMjM2NGYxZmE1MWUxZjAwNjIwMw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2004-01-16T18:24:09Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2004-01-16T18:24:09Z"}, "message": "re PR rtl-optimization/10392 ([SH] optimizer generates faulty array indexing)\n\n\tPR 10392\n\tFrom Marcus Comstedt / Dan Kegel:\n\t* gcc.dg/pr10392-1.c: New test.\n\nFrom-SVN: r75985", "tree": {"sha": "b526ff246113ff724e32293f5f01a1a6299b2dd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b526ff246113ff724e32293f5f01a1a6299b2dd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e0baa604103abcb676222364f1fa51e1f006203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0baa604103abcb676222364f1fa51e1f006203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e0baa604103abcb676222364f1fa51e1f006203", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e0baa604103abcb676222364f1fa51e1f006203/comments", "author": null, "committer": null, "parents": [{"sha": "87b483a1c4d9e7a2d4aa2ecc581557b9138eef85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b483a1c4d9e7a2d4aa2ecc581557b9138eef85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87b483a1c4d9e7a2d4aa2ecc581557b9138eef85"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "b5d83dcd90efcc66d299ba65f1d22650b90c8748", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0baa604103abcb676222364f1fa51e1f006203/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0baa604103abcb676222364f1fa51e1f006203/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e0baa604103abcb676222364f1fa51e1f006203", "patch": "@@ -1,3 +1,9 @@\n+2004-01-16  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\tPR 10392\n+\tFrom Marcus Comstedt / Dan Kegel:\n+\t* gcc.dg/pr10392-1.c: New test.\n+\n 2004-01-16  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/13478"}, {"sha": "c71ec4d34b2b30d4c00d6969d8009c32d33318c7", "filename": "gcc/testsuite/gcc.dg/pr10392-1.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e0baa604103abcb676222364f1fa51e1f006203/gcc%2Ftestsuite%2Fgcc.dg%2Fpr10392-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e0baa604103abcb676222364f1fa51e1f006203/gcc%2Ftestsuite%2Fgcc.dg%2Fpr10392-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr10392-1.c?ref=9e0baa604103abcb676222364f1fa51e1f006203", "patch": "@@ -0,0 +1,62 @@\n+/* PR optimization/10392\n+ * Reporter: marcus@mc.pp.se\n+ * Summary: [3.3/3.4 regression] [SH] optimizer generates faulty array indexing\n+ * Description:\n+ * The address calculation of an index operation on an array on the stack \n+ * can _under some conditions_ get messed up completely\n+ *\n+ * Testcase tweaked by dank@kegel.com\n+ * Problem only happens with -O2 -m4, so it should only happen on sh4,\n+ * but what the heck, let's test other architectures, too.\n+ * Not marked as xfail since it's a regression.\n+*/\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -m4\" { target sh4-*-* } } */\n+const char *dont_optimize_function_away;\n+\n+const char *use(const char *str)\n+{\n+\tdont_optimize_function_away = str;\n+\tif (str[0] != 'v')\n+\t\tabort();\n+\tif (str[1] < '1' || str[1] > '6')\n+\t\tabort();\n+\tif (str[2])\n+\t\tabort();\n+\treturn str[2] ? \"notused\" : \"v6\";\n+}\n+\n+const char *func(char *a, char *b)\n+{\n+\tchar buf[128];\n+\tunsigned char i;\n+\tconst char *result;\n+\n+\tchar *item[] = {\n+\t\t\"v1\",\n+\t\t\"v2\",\n+\t};\n+\n+\tbuf[0] = 'v';\n+\tbuf[1] = '3';\n+\tbuf[2] = 0;\n+\n+\tfor (i = 0; i < 2; i++) {\n+\t\t/* bug is: following line passes wild pointer to use() on sh4 -O2 */\n+\t\tresult = use(item[i]);\n+\n+\t\tuse(buf);\n+\t\tuse(a);\n+\t\tuse(b);\n+\t\tresult = use(result);\n+\t}\n+\treturn result;\n+}\n+\n+int main()\n+{\n+\tfunc(\"v4\", \"v5\");\n+\treturn 0;\n+}\n+"}]}