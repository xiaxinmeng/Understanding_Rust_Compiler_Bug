{"sha": "ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYxZWNmODdhNjRkZmFjOGZiMWVhNjFmYmQxNzZmZmM4OTM3NDRmNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-03-02T22:15:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-03-02T22:15:51Z"}, "message": "configure.in (HAVE_AS_LTOFFX_LDXMOV_RELOCS): New ia64 test.\n\n        * configure.in (HAVE_AS_LTOFFX_LDXMOV_RELOCS): New ia64 test.\n        * config.in, configure: Rebuild.\n        * config/ia64/ia64.c (ia64_ld_address_bypass_p): Accept lo_sum.\n        * config/ia64/ia64.md (load_symptr): Use high/lo_sum for the\n        paired ldtoffx and ldxmov annotations.\n        (load_symptr_internal1): Remove.\n        (load_symptr_high, load_symptr_low): New.\n\nFrom-SVN: r63696", "tree": {"sha": "b96681e851036bec1d54fbdd5333ffa4ca2e6074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b96681e851036bec1d54fbdd5333ffa4ca2e6074"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7/comments", "author": null, "committer": null, "parents": [{"sha": "1494f93a22a684562decd39f398c4f4f59606ce0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1494f93a22a684562decd39f398c4f4f59606ce0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1494f93a22a684562decd39f398c4f4f59606ce0"}], "stats": {"total": 146, "additions": 129, "deletions": 17}, "files": [{"sha": "bdb2192f5b103fbc32dc97acb8e7bdc6f00eb407", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7", "patch": "@@ -1,3 +1,13 @@\n+2003-03-02  Richard Henderson  <rth@redhat.com>\n+\n+\t* configure.in (HAVE_AS_LTOFFX_LDXMOV_RELOCS): New ia64 test.\n+\t* config.in, configure: Rebuild.\n+\t* config/ia64/ia64.c (ia64_ld_address_bypass_p): Accept lo_sum.\n+\t* config/ia64/ia64.md (load_symptr): Use high/lo_sum for the \n+\tpaired ldtoffx and ldxmov annotations.\n+\t(load_symptr_internal1): Remove.\n+\t(load_symptr_high, load_symptr_low): New.\n+\n 2003-03-02  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* c-incpath.c (add_path): Fix sysp assignment."}, {"sha": "86f4e2ca3aa38e049f27f032b0bcd7659e1817ea", "filename": "gcc/config.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7", "patch": "@@ -1,4 +1,4 @@\n-/* config.in.  Generated automatically from configure.in by autoheader 2.13.  */\n+/* config.in.  Generated automatically from configure.in by autoheader.  */\n \n /* Define if using alloca.c.  */\n #undef C_ALLOCA\n@@ -600,6 +600,9 @@\n /* Define true if the assembler supports '.long foo@GOTOFF'. */\n #undef HAVE_AS_GOTOFF_IN_DATA\n \n+/* Define if your assembler supports ltoffx and ldxmov relocations. */\n+#undef HAVE_AS_LTOFFX_LDXMOV_RELOCS\n+\n /* Define if your assembler supports dwarf2 .file/.loc directives,\n    and preserves file table indices exactly as given. */\n #undef HAVE_AS_DWARF2_DEBUG_LINE"}, {"sha": "6c61c72751972fd1f78f8aacbb2bd31b04fbf078", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7", "patch": "@@ -7012,8 +7012,11 @@ ia64_ld_address_bypass_p (producer, consumer)\n     mem = XVECEXP (mem, 0, 0);\n   while (GET_CODE (mem) == SUBREG || GET_CODE (mem) == ZERO_EXTEND)\n     mem = XEXP (mem, 0);\n-  if (GET_CODE (mem) != MEM)\n+\n+  /* Note that LO_SUM is used for GOT loads.  */\n+  if (GET_CODE (mem) != LO_SUM && GET_CODE (mem) != MEM)\n     abort ();\n+\n   return reg_mentioned_p (reg, mem);\n }\n "}, {"sha": "db48f3b8ee8fb4f0f4f94c925c22786a14219756", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7", "patch": "@@ -457,22 +457,41 @@\n \n (define_expand \"load_symptr\"\n   [(set (match_operand:DI 2 \"register_operand\" \"\")\n-\t(plus:DI (match_dup 4) (match_operand:DI 1 \"got_symbolic_operand\" \"\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"\") (match_dup 3))]\n+\t(plus:DI (high:DI (match_operand:DI 1 \"got_symbolic_operand\" \"\"))\n+\t\t (match_dup 3)))\n+   (set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(lo_sum:DI (match_dup 2) (match_dup 1)))]\n   \"\"\n {\n-  operands[3] = gen_rtx_MEM (DImode, operands[2]);\n-  operands[4] = pic_offset_table_rtx;\n-  RTX_UNCHANGING_P (operands[3]) = 1;\n+  operands[3] = pic_offset_table_rtx;\n })\n \n-(define_insn \"*load_symptr_internal1\"\n+(define_insn \"*load_symptr_high\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(plus:DI (reg:DI 1) (match_operand 1 \"got_symbolic_operand\" \"s\")))]\n+\t(plus:DI (high:DI (match_operand 1 \"got_symbolic_operand\" \"s\"))\n+\t\t (match_operand:DI 2 \"register_operand\" \"a\")))]\n   \"\"\n-  \"addl %0 = @ltoff(%1), gp\"\n+{\n+  if (HAVE_AS_LTOFFX_LDXMOV_RELOCS)\n+    return \"%,addl %0 = @ltoffx(%1), %2\";\n+  else\n+    return \"%,addl %0 = @ltoff(%1), %2\";\n+}\n   [(set_attr \"itanium_class\" \"ialu\")])\n \n+(define_insn \"*load_symptr_low\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t   (match_operand 2 \"got_symbolic_operand\" \"s\")))]\n+  \"\"\n+{\n+  if (HAVE_AS_LTOFFX_LDXMOV_RELOCS)\n+    return \"%,ld8.mov %0 = [%1], %2\";\n+  else\n+    return \"%,ld8 %0 = [%1]\";\n+}\n+  [(set_attr \"itanium_class\" \"ld\")])\n+\n (define_insn \"load_ltoff_dtpmod\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (reg:DI 1)"}, {"sha": "6d5b8f614127e59472b1284df1a54a2f0bf3817d", "filename": "gcc/configure", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7", "patch": "@@ -8291,10 +8291,52 @@ EOF\n \n     echo \"$ac_t\"\"$gcc_cv_as_gotoff_in_data\" 1>&6\n     ;;\n+\n+  ia64*-*-*)\n+    echo $ac_n \"checking assembler supports ltoffx and ldxmov\"\"... $ac_c\" 1>&6\n+echo \"configure:8298: checking assembler supports ltoffx and ldxmov\" >&5\n+if eval \"test \\\"`echo '$''{'gcc_cv_as_ltoffx_ldxmov_relocs'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  \n+\tgcc_cv_as_ltoffx_ldxmov_relocs=unknown\n+\tif test x$gcc_cv_gas_major_version != x \\\n+\t\t-a x$gcc_cv_gas_minor_version != x\n+\tthen\n+\t   if test \"$gcc_cv_gas_major_version\" -eq 2 \\\n+\t           -a \"$gcc_cv_gas_minor_version\" -ge 14 \\\n+\t           -o \"$gcc_cv_gas_major_version\" -gt 2; then\n+\t      gcc_cv_as_ltoffx_ldxmov_relocs=yes\n+\t   fi\n+\telif test x$gcc_cv_as != x; then\n+\t    cat > conftest.s << 'EOF'\n+\t.text\n+\taddl r15 = @ltoffx(x#), gp\n+\t;;\n+\tld8.mov r16 = [r15], x#\n+EOF\n+\t    if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\tgcc_cv_as_ltoffx_ldxmov_relocs=yes\n+\t    else\n+\t\tgcc_cv_as_ltoffx_ldxmov_relocs=no\n+\t    fi\n+\t    rm -f conftest.s conftest.o\n+\tfi\n+    \n+fi\n+\n+echo \"$ac_t\"\"$gcc_cv_as_ltoffx_ldxmov_relocs\" 1>&6\n+    if test \"x$gcc_cv_as_ltoffx_ldxmov_relocs\" = xyes; then\n+\tcat >> confdefs.h <<\\EOF\n+#define HAVE_AS_LTOFFX_LDXMOV_RELOCS 1\n+EOF\n+\n+    fi\n+    ;;\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:8298: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:8340: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -8351,7 +8393,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_dwarf2_debug_line\" 1>&6\n \n echo $ac_n \"checking assembler --gdwarf2 support\"\"... $ac_c\" 1>&6\n-echo \"configure:8355: checking assembler --gdwarf2 support\" >&5\n+echo \"configure:8397: checking assembler --gdwarf2 support\" >&5\n gcc_cv_as_gdwarf2_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -8380,7 +8422,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_gdwarf2_flag\" 1>&6\n \n echo $ac_n \"checking assembler --gstabs support\"\"... $ac_c\" 1>&6\n-echo \"configure:8384: checking assembler --gstabs support\" >&5\n+echo \"configure:8426: checking assembler --gstabs support\" >&5\n gcc_cv_as_gstabs_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -8408,7 +8450,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_gstabs_flag\" 1>&6\n \n echo $ac_n \"checking linker read-only and read-write section mixing\"\"... $ac_c\" 1>&6\n-echo \"configure:8412: checking linker read-only and read-write section mixing\" >&5\n+echo \"configure:8454: checking linker read-only and read-write section mixing\" >&5\n gcc_cv_ld_ro_rw_mix=unknown\n if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n   if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 10 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n@@ -8446,7 +8488,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_ld_ro_rw_mix\" 1>&6\n \n echo $ac_n \"checking linker PT_GNU_EH_FRAME support\"\"... $ac_c\" 1>&6\n-echo \"configure:8450: checking linker PT_GNU_EH_FRAME support\" >&5\n+echo \"configure:8492: checking linker PT_GNU_EH_FRAME support\" >&5\n gcc_cv_ld_eh_frame_hdr=no\n if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n   if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 12 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n@@ -8470,7 +8512,7 @@ echo \"$ac_t\"\"$gcc_cv_ld_eh_frame_hdr\" 1>&6\n case \"$target\" in\n   mips*-*-*)\n     echo $ac_n \"checking whether libgloss uses STARTUP directives consistently\"\"... $ac_c\" 1>&6\n-echo \"configure:8474: checking whether libgloss uses STARTUP directives consistently\" >&5\n+echo \"configure:8516: checking whether libgloss uses STARTUP directives consistently\" >&5\n     gcc_cv_mips_libgloss_startup=no\n     gcc_cv_libgloss_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/libgloss\n     if test \"x$exec_prefix\" = xNONE; then\n@@ -8675,7 +8717,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:8679: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:8721: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "fd9df77efc47e793c4f341eeca7c3f00297be756", "filename": "gcc/configure.in", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=ef1ecf87a64dfac8fb1ea61fbd176ffc893744f7", "patch": "@@ -2233,6 +2233,41 @@ EOF\n       [Define true if the assembler supports '.long foo@GOTOFF'.])\n     AC_MSG_RESULT($gcc_cv_as_gotoff_in_data)\n     ;;\n+\n+  ia64*-*-*)\n+    AC_CACHE_CHECK([assembler supports ltoffx and ldxmov],\n+\tgcc_cv_as_ltoffx_ldxmov_relocs, [\n+\tgcc_cv_as_ltoffx_ldxmov_relocs=unknown\n+\tif test x$gcc_cv_gas_major_version != x \\\n+\t\t-a x$gcc_cv_gas_minor_version != x\n+\tthen\n+\t   if test \"$gcc_cv_gas_major_version\" -eq 2 \\\n+\t           -a \"$gcc_cv_gas_minor_version\" -ge 14 \\\n+\t           -o \"$gcc_cv_gas_major_version\" -gt 2; then\n+\t      gcc_cv_as_ltoffx_ldxmov_relocs=yes\n+\t   fi\n+\telif test x$gcc_cv_as != x; then\n+\t    cat > conftest.s << 'EOF'\n+changequote(,)dnl\n+\t.text\n+\taddl r15 = @ltoffx(x#), gp\n+\t;;\n+\tld8.mov r16 = [r15], x#\n+EOF\n+changequote([,])dnl\n+\t    if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\tgcc_cv_as_ltoffx_ldxmov_relocs=yes\n+\t    else\n+\t\tgcc_cv_as_ltoffx_ldxmov_relocs=no\n+\t    fi\n+\t    rm -f conftest.s conftest.o\n+\tfi\n+    ])\n+    if test \"x$gcc_cv_as_ltoffx_ldxmov_relocs\" = xyes; then\n+\tAC_DEFINE(HAVE_AS_LTOFFX_LDXMOV_RELOCS, 1,\n+\t  [Define if your assembler supports ltoffx and ldxmov relocations.])\n+    fi\n+    ;;\n esac\n \n AC_MSG_CHECKING(assembler dwarf2 debug_line support)"}]}