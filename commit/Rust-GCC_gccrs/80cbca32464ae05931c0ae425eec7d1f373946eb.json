{"sha": "80cbca32464ae05931c0ae425eec7d1f373946eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjYmNhMzI0NjRhZTA1OTMxYzBhZTQyNWVlYzdkMWYzNzM5NDZlYg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-09-15T15:33:48Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-09-17T10:51:54Z"}, "message": "Allow copying of symbolic ranges to an irange.\n\nThis fixes an ICE when trying to copy a legacy value_range containing\na symbolic to a multi-range:\n\n\tmin = make_ssa_name (type);\n\tmax = build_int_cst (type, 55);\n\tvalue_range vv (min, max);\n\tint_range<2> vr = vv;\n\ngcc/ChangeLog:\n\n\t* range-op.cc (multi_precision_range_tests): Normalize symbolics when copying to a\n\tmulti-range.\n\t* value-range.cc (irange::copy_legacy_range): Add test.", "tree": {"sha": "2b70518f772436d94a175d5cc07cfafdd2ebf1c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b70518f772436d94a175d5cc07cfafdd2ebf1c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80cbca32464ae05931c0ae425eec7d1f373946eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cbca32464ae05931c0ae425eec7d1f373946eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80cbca32464ae05931c0ae425eec7d1f373946eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80cbca32464ae05931c0ae425eec7d1f373946eb/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27eac88a3f23ef7efbbd725504963cffc71dcad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27eac88a3f23ef7efbbd725504963cffc71dcad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27eac88a3f23ef7efbbd725504963cffc71dcad4"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "3ab268f101eedea55c157409936a751d69c68f57", "filename": "gcc/range-op.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cbca32464ae05931c0ae425eec7d1f373946eb/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cbca32464ae05931c0ae425eec7d1f373946eb/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=80cbca32464ae05931c0ae425eec7d1f373946eb", "patch": "@@ -3453,6 +3453,21 @@ multi_precision_range_tests ()\n   small = big;\n   ASSERT_TRUE (small == int_range<1> (INT (21), INT (21), VR_ANTI_RANGE));\n \n+  // Copying a legacy symbolic to an int_range should normalize the\n+  // symbolic at copy time.\n+  {\n+    tree ssa = make_ssa_name (integer_type_node);\n+    value_range legacy_range (ssa, INT (25));\n+    int_range<2> copy = legacy_range;\n+    ASSERT_TRUE (copy == int_range<2>  (vrp_val_min (integer_type_node),\n+\t\t\t\t\tINT (25)));\n+\n+    // Test that copying ~[abc_23, abc_23] to a multi-range yields varying.\n+    legacy_range = value_range (ssa, ssa, VR_ANTI_RANGE);\n+    copy = legacy_range;\n+    ASSERT_TRUE (copy.varying_p ());\n+  }\n+\n   range3_tests ();\n }\n "}, {"sha": "ed2c322ded945de2a91e34fded4d3c91edbb913c", "filename": "gcc/value-range.cc", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80cbca32464ae05931c0ae425eec7d1f373946eb/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80cbca32464ae05931c0ae425eec7d1f373946eb/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=80cbca32464ae05931c0ae425eec7d1f373946eb", "patch": "@@ -92,7 +92,12 @@ irange::copy_legacy_range (const irange &src)\n   else if (src.varying_p ())\n     set_varying (src.type ());\n   else if (src.kind () == VR_ANTI_RANGE)\n-    set (src.min (), src.max (), VR_ANTI_RANGE);\n+    {\n+      if (src.legacy_mode_p () && !range_has_numeric_bounds_p (&src))\n+\tset_varying (src.type ());\n+      else\n+\tset (src.min (), src.max (), VR_ANTI_RANGE);\n+    }\n   else if (legacy_mode_p () && src.maybe_anti_range ())\n     {\n       int_range<3> tmp (src);\n@@ -101,7 +106,17 @@ irange::copy_legacy_range (const irange &src)\n \t   VR_ANTI_RANGE);\n     }\n   else\n-    set (src.min (), src.max (), VR_RANGE);\n+    {\n+      // If copying legacy to int_range, normalize any symbolics.\n+      if (src.legacy_mode_p () && !range_has_numeric_bounds_p (&src))\n+\t{\n+\t  value_range cst (src);\n+\t  cst.normalize_symbolics ();\n+\t  set (cst.min (), cst.max ());\n+\t  return;\n+\t}\n+      set (src.min (), src.max ());\n+    }\n }\n \n // Swap min/max if they are out of order.  Return TRUE if further"}]}