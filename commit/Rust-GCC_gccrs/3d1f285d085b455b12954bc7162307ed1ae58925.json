{"sha": "3d1f285d085b455b12954bc7162307ed1ae58925", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QxZjI4NWQwODViNDU1YjEyOTU0YmM3MTYyMzA3ZWQxYWU1ODkyNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-23T07:59:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-23T07:59:27Z"}, "message": "mips.md (one_cmpl[sd]i2): Redefine using :GPR.\n\n\t* config/mips/mips.md (one_cmpl[sd]i2): Redefine using :GPR.\n\t(and[sd]3, ior[sd]i3, xor[sd]i3): Likewise.  Change 32-bit patterns\n\tto use register_operand rather than uns_arith_operand as the predicate\n\tfor operand 1.  Remove redundant MIPS16 force_reg() for operand 1.\n\t(*and[sd]i3, *ior[sd]i3, *xor[sd]i3): Name formerly unnamed patterns.\n\tRedefine using :GPR.  Make same predicate change here.  Extend the\n\tcommutativity of operands 1 and 2 from the SImode version to the\n\tDImode one.\n\t(*and[sd]i3_mips16, *ior[sd]i3_mips16, *xor[sd]i3_mips16): Likewise,\n\tbut with no predicate changes.\n\t(*nor[sd]i3): Redefine using :GPR.\n\nFrom-SVN: r86413", "tree": {"sha": "ba55effde3a479b22b09d5d780a402b43ce7c319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba55effde3a479b22b09d5d780a402b43ce7c319"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d1f285d085b455b12954bc7162307ed1ae58925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d1f285d085b455b12954bc7162307ed1ae58925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d1f285d085b455b12954bc7162307ed1ae58925", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d1f285d085b455b12954bc7162307ed1ae58925/comments", "author": null, "committer": null, "parents": [{"sha": "c0e1b12feef416da65d62963b3dbff4c4ee2d903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0e1b12feef416da65d62963b3dbff4c4ee2d903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0e1b12feef416da65d62963b3dbff4c4ee2d903"}], "stats": {"total": 270, "additions": 74, "deletions": 196}, "files": [{"sha": "fee94df1216b5d554db67a8de46894d3b4707118", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1f285d085b455b12954bc7162307ed1ae58925/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1f285d085b455b12954bc7162307ed1ae58925/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d1f285d085b455b12954bc7162307ed1ae58925", "patch": "@@ -1,3 +1,17 @@\n+2004-08-23  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md (one_cmpl[sd]i2): Redefine using :GPR.\n+\t(and[sd]3, ior[sd]i3, xor[sd]i3): Likewise.  Change 32-bit patterns\n+\tto use register_operand rather than uns_arith_operand as the predicate\n+\tfor operand 1.  Remove redundant MIPS16 force_reg() for operand 1.\n+\t(*and[sd]i3, *ior[sd]i3, *xor[sd]i3): Name formerly unnamed patterns.\n+\tRedefine using :GPR.  Make same predicate change here.  Extend the\n+\tcommutativity of operands 1 and 2 from the SImode version to the\n+\tDImode one.\n+\t(*and[sd]i3_mips16, *ior[sd]i3_mips16, *xor[sd]i3_mips16): Likewise,\n+\tbut with no predicate changes.\n+\t(*nor[sd]i3): Redefine using :GPR.\n+\n 2004-08-23  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* tree-ssa-operands.c (get_call_expr_operands): Add VUSE operands for"}, {"sha": "20488d3aa821ad0ea6580f8f59c9e96fa6d1c494", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 60, "deletions": 196, "changes": 256, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d1f285d085b455b12954bc7162307ed1ae58925/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d1f285d085b455b12954bc7162307ed1ae58925/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=3d1f285d085b455b12954bc7162307ed1ae58925", "patch": "@@ -2115,31 +2115,18 @@ beq\\t%2,%.,1b\\;\\\n   [(set_attr \"type\"\t\"fneg\")\n    (set_attr \"mode\"\t\"SF\")])\n \n-(define_insn \"one_cmplsi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(not:SI (match_operand:SI 1 \"register_operand\" \"d\")))]\n+(define_insn \"one_cmpl<mode>2\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(not:GPR (match_operand:GPR 1 \"register_operand\" \"d\")))]\n   \"\"\n {\n   if (TARGET_MIPS16)\n     return \"not\\t%0,%1\";\n   else\n     return \"nor\\t%0,%.,%1\";\n }\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")])\n-\n-(define_insn \"one_cmpldi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(not:DI (match_operand:DI 1 \"register_operand\" \"d\")))]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_MIPS16)\n-    return \"not\\t%0,%1\";\n-  else\n-    return \"nor\\t%0,%.,%1\";\n-}\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \f\n ;;\n ;;  ....................\n@@ -2152,233 +2139,110 @@ beq\\t%2,%.,1b\\;\\\n ;; Many of these instructions use trivial define_expands, because we\n ;; want to use a different set of constraints when TARGET_MIPS16.\n \n-(define_expand \"andsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(and:SI (match_operand:SI 1 \"uns_arith_operand\")\n-\t\t(match_operand:SI 2 \"uns_arith_operand\")))]\n+(define_expand \"and<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(and:GPR (match_operand:GPR 1 \"register_operand\")\n+\t\t (match_operand:GPR 2 \"uns_arith_operand\")))]\n   \"\"\n {\n   if (TARGET_MIPS16)\n-    {\n-      operands[1] = force_reg (SImode, operands[1]);\n-      operands[2] = force_reg (SImode, operands[2]);\n-    }\n+    operands[2] = force_reg (<MODE>mode, operands[2]);\n })\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(and:SI (match_operand:SI 1 \"uns_arith_operand\" \"%d,d\")\n-\t\t(match_operand:SI 2 \"uns_arith_operand\" \"d,K\")))]\n+(define_insn \"*and<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+\t(and:GPR (match_operand:GPR 1 \"register_operand\" \"%d,d\")\n+\t\t (match_operand:GPR 2 \"uns_arith_operand\" \"d,K\")))]\n   \"!TARGET_MIPS16\"\n   \"@\n    and\\t%0,%1,%2\n    andi\\t%0,%1,%x2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(and:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n-\t\t(match_operand:SI 2 \"register_operand\" \"d\")))]\n+(define_insn \"*and<mode>3_mips16\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(and:GPR (match_operand:GPR 1 \"register_operand\" \"%0\")\n+\t\t (match_operand:GPR 2 \"register_operand\" \"d\")))]\n   \"TARGET_MIPS16\"\n   \"and\\t%0,%2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")])\n-\n-(define_expand \"anddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(and:DI (match_operand:DI 1 \"register_operand\")\n-\t\t(match_operand:DI 2 \"uns_arith_operand\")))]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_MIPS16)\n-    {\n-      operands[1] = force_reg (DImode, operands[1]);\n-      operands[2] = force_reg (DImode, operands[2]);\n-    }\n-})\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(and:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-\t\t(match_operand:DI 2 \"uns_arith_operand\" \"d,K\")))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"@\n-   and\\t%0,%1,%2\n-   andi\\t%0,%1,%x2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"DI\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(and:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"d\")))]\n-  \"TARGET_64BIT && TARGET_MIPS16\"\n-  \"and\\t%0,%2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"iorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(ior:SI (match_operand:SI 1 \"uns_arith_operand\")\n-\t\t(match_operand:SI 2 \"uns_arith_operand\")))]\n+(define_expand \"ior<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(ior:GPR (match_operand:GPR 1 \"register_operand\")\n+\t\t (match_operand:GPR 2 \"uns_arith_operand\")))]\n   \"\"\n {\n   if (TARGET_MIPS16)\n-    {\n-      operands[1] = force_reg (SImode, operands[1]);\n-      operands[2] = force_reg (SImode, operands[2]);\n-    }\n+    operands[2] = force_reg (<MODE>mode, operands[2]);\n })\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(ior:SI (match_operand:SI 1 \"uns_arith_operand\" \"%d,d\")\n-\t\t(match_operand:SI 2 \"uns_arith_operand\" \"d,K\")))]\n+(define_insn \"*ior<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+\t(ior:GPR (match_operand:GPR 1 \"register_operand\" \"%d,d\")\n+\t\t (match_operand:GPR 2 \"uns_arith_operand\" \"d,K\")))]\n   \"!TARGET_MIPS16\"\n   \"@\n    or\\t%0,%1,%2\n    ori\\t%0,%1,%x2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n-\t\t(match_operand:SI 2 \"register_operand\" \"d\")))]\n+(define_insn \"*ior<mode>3_mips16\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(ior:GPR (match_operand:GPR 1 \"register_operand\" \"%0\")\n+\t\t (match_operand:GPR 2 \"register_operand\" \"d\")))]\n   \"TARGET_MIPS16\"\n   \"or\\t%0,%2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")])\n-\n-(define_expand \"iordi3\"\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(ior:DI (match_operand:DI 1 \"register_operand\")\n-\t\t(match_operand:DI 2 \"uns_arith_operand\")))]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_MIPS16)\n-    {\n-      operands[1] = force_reg (DImode, operands[1]);\n-      operands[2] = force_reg (DImode, operands[2]);\n-    }\n-})\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(ior:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-\t\t(match_operand:DI 2 \"uns_arith_operand\" \"d,K\")))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"@\n-   or\\t%0,%1,%2\n-   ori\\t%0,%1,%x2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"DI\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(ior:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t(match_operand:DI 2 \"register_operand\" \"d\")))]\n-  \"TARGET_64BIT && TARGET_MIPS16\"\n-  \"or\\t%0,%2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_expand \"xorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\")\n-\t(xor:SI (match_operand:SI 1 \"uns_arith_operand\")\n-\t\t(match_operand:SI 2 \"uns_arith_operand\")))]\n+(define_expand \"xor<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+\t(xor:GPR (match_operand:GPR 1 \"register_operand\")\n+\t\t (match_operand:GPR 2 \"uns_arith_operand\")))]\n   \"\"\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(xor:SI (match_operand:SI 1 \"uns_arith_operand\" \"%d,d\")\n-\t\t(match_operand:SI 2 \"uns_arith_operand\" \"d,K\")))]\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+\t(xor:GPR (match_operand:GPR 1 \"register_operand\" \"%d,d\")\n+\t\t (match_operand:GPR 2 \"uns_arith_operand\" \"d,K\")))]\n   \"!TARGET_MIPS16\"\n   \"@\n    xor\\t%0,%1,%2\n    xori\\t%0,%1,%x2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")])\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,t,t\")\n-\t(xor:SI (match_operand:SI 1 \"uns_arith_operand\" \"%0,d,d\")\n-\t\t(match_operand:SI 2 \"uns_arith_operand\" \"d,K,d\")))]\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,t,t\")\n+\t(xor:GPR (match_operand:GPR 1 \"register_operand\" \"%0,d,d\")\n+\t\t (match_operand:GPR 2 \"uns_arith_operand\" \"d,K,d\")))]\n   \"TARGET_MIPS16\"\n   \"@\n    xor\\t%0,%2\n    cmpi\\t%1,%2\n    cmp\\t%1,%2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")\n-   (set_attr_alternative \"length\"\n-\t\t[(const_int 4)\n-\t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n-\t\t\t       (const_int 4)\n-\t\t\t       (const_int 8))\n-\t\t (const_int 4)])])\n-\n-(define_expand \"xordi3\"\n-  [(set (match_operand:DI 0 \"register_operand\")\n-\t(xor:DI (match_operand:DI 1 \"register_operand\")\n-\t\t(match_operand:DI 2 \"uns_arith_operand\")))]\n-  \"TARGET_64BIT\"\n-{\n-  if (TARGET_MIPS16)\n-    {\n-      operands[1] = force_reg (DImode, operands[1]);\n-      operands[2] = force_reg (DImode, operands[2]);\n-    }\n-})\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(xor:DI (match_operand:DI 1 \"register_operand\" \"d,d\")\n-\t\t(match_operand:DI 2 \"uns_arith_operand\" \"d,K\")))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"@\n-   xor\\t%0,%1,%2\n-   xori\\t%0,%1,%x2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"DI\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,t,t\")\n-\t(xor:DI (match_operand:DI 1 \"register_operand\" \"%0,d,d\")\n-\t\t(match_operand:DI 2 \"uns_arith_operand\" \"d,K,d\")))]\n-  \"TARGET_64BIT && TARGET_MIPS16\"\n-  \"@\n-   xor\\t%0,%2\n-   cmpi\\t%1,%2\n-   cmp\\t%1,%2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"DI\")\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<MODE>\")\n    (set_attr_alternative \"length\"\n \t\t[(const_int 4)\n \t\t (if_then_else (match_operand:VOID 2 \"m16_uimm8_1\")\n \t\t\t       (const_int 4)\n \t\t\t       (const_int 8))\n \t\t (const_int 4)])])\n \n-(define_insn \"*norsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-\t(and:SI (not:SI (match_operand:SI 1 \"register_operand\" \"d\"))\n-\t\t(not:SI (match_operand:SI 2 \"register_operand\" \"d\"))))]\n+(define_insn \"*nor<mode>3\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+\t(and:GPR (not:GPR (match_operand:GPR 1 \"register_operand\" \"d\"))\n+\t\t (not:GPR (match_operand:GPR 2 \"register_operand\" \"d\"))))]\n   \"!TARGET_MIPS16\"\n-  \"nor\\t%0,%z1,%z2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"SI\")])\n-\n-(define_insn \"*nordi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-\t(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"d\"))\n-\t\t(not:DI (match_operand:DI 2 \"register_operand\" \"d\"))))]\n-  \"TARGET_64BIT && !TARGET_MIPS16\"\n-  \"nor\\t%0,%z1,%z2\"\n-  [(set_attr \"type\"\t\"arith\")\n-   (set_attr \"mode\"\t\"DI\")])\n+  \"nor\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \f\n ;;\n ;;  ...................."}]}