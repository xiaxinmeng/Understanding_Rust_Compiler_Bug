{"sha": "6557be99afd301b8d7f2b142b12fb47ae6cb823d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU1N2JlOTlhZmQzMDFiOGQ3ZjJiMTQyYjEyZmI0N2FlNmNiODIzZA==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-12-20T06:20:44Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-12-20T06:20:44Z"}, "message": "Enable VPCLMULQDQ support\n\ngcc/\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_VPCLMULQDQ_SET,\n\tOPTION_MASK_ISA_VPCLMULQDQ_UNSET): New.\n\t(ix86_handle_option): Handle -mvpclmulqdq, move cx6 to flags2.\n\t* config.gcc: Include vpclmulqdqintrin.h.\n\t* config/i386/cpuid.h: Handle bit_VPCLMULQDQ.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Handle -mvpclmulqdq.\n\t* config/i386/i386-builtin.def (__builtin_ia32_vpclmulqdq_v2di,\n\t__builtin_ia32_vpclmulqdq_v4di, __builtin_ia32_vpclmulqdq_v8di): New.\n\t* config/i386/i386-c.c (__VPCLMULQDQ__): New.\n\t* config/i386/i386.c (isa2_opts): Add -mcx16.\n\t(isa_opts): Add -mpclmulqdq, remove -mcx16.\n\t(ix86_option_override_internal): Move mcx16 to flags2.\n\t(ix86_valid_target_attribute_inner_p): Add vpclmulqdq.\n\t(ix86_expand_builtin): Handle OPTION_MASK_ISA_VPCLMULQDQ.\n\t* config/i386/i386.h (TARGET_VPCLMULQDQ, TARGET_VPCLMULQDQ_P): New.\n\t* config/i386/i386.opt: Add mvpclmulqdq, move mcx16 to flags2.\n\t* config/i386/immintrin.h: Include vpclmulqdqintrin.h.\n\t* config/i386/sse.md (vpclmulqdq_<mode>): New pattern.\n\t* config/i386/vpclmulqdqintrin.h (_mm512_clmulepi64_epi128,\n\t_mm_clmulepi64_epi128, _mm256_clmulepi64_epi128): New intrinsics.\n\t* doc/invoke.texi: Add -mvpclmulqdq.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx-1.c: Handle new intrinsics.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/avx512-check.h: Handle bit_VPCLMULQDQ.\n\t* gcc.target/i386/avx512f-vpclmulqdq-2.c: New test.\n\t* gcc.target/i386/avx512vl-vpclmulqdq-2.c: Ditto.\n\t* gcc.target/i386/vpclmulqdq.c: Ditto.\n\t* gcc.target/i386/i386.exp (check_effective_target_vpclmulqdq): New.\n\nFrom-SVN: r255850", "tree": {"sha": "bbefc0e1b4b9d83460d7d28d34a63db215fbca28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbefc0e1b4b9d83460d7d28d34a63db215fbca28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6557be99afd301b8d7f2b142b12fb47ae6cb823d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6557be99afd301b8d7f2b142b12fb47ae6cb823d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6557be99afd301b8d7f2b142b12fb47ae6cb823d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6557be99afd301b8d7f2b142b12fb47ae6cb823d/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b522b8f339f4e7844843d30f38ea9459d908e3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b522b8f339f4e7844843d30f38ea9459d908e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b522b8f339f4e7844843d30f38ea9459d908e3c"}], "stats": {"total": 366, "additions": 349, "deletions": 17}, "files": [{"sha": "c90777035d0e1be9748b6106f09da063049045b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -1,3 +1,28 @@\n+2017-12-20  Julia Koval  <julia.koval@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_VPCLMULQDQ_SET,\n+\tOPTION_MASK_ISA_VPCLMULQDQ_UNSET): New.\n+\t(ix86_handle_option): Handle -mvpclmulqdq, move cx6 to flags2.\n+\t* config.gcc: Include vpclmulqdqintrin.h.\n+\t* config/i386/cpuid.h: Handle bit_VPCLMULQDQ.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Handle\n+\t-mvpclmulqdq.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_vpclmulqdq_v2di,\n+\t__builtin_ia32_vpclmulqdq_v4di, __builtin_ia32_vpclmulqdq_v8di): New.\n+\t* config/i386/i386-c.c (__VPCLMULQDQ__): New.\n+\t* config/i386/i386.c (isa2_opts): Add -mcx16.\n+\t(isa_opts): Add -mpclmulqdq, remove -mcx16.\n+\t(ix86_option_override_internal): Move mcx16 to flags2.\n+\t(ix86_valid_target_attribute_inner_p): Add vpclmulqdq.\n+\t(ix86_expand_builtin): Handle OPTION_MASK_ISA_VPCLMULQDQ.\n+\t* config/i386/i386.h (TARGET_VPCLMULQDQ, TARGET_VPCLMULQDQ_P): New.\n+\t* config/i386/i386.opt: Add mvpclmulqdq, move mcx16 to flags2.\n+\t* config/i386/immintrin.h: Include vpclmulqdqintrin.h.\n+\t* config/i386/sse.md (vpclmulqdq_<mode>): New pattern.\n+\t* config/i386/vpclmulqdqintrin.h (_mm512_clmulepi64_epi128,\n+\t_mm_clmulepi64_epi128, _mm256_clmulepi64_epi128): New intrinsics.\n+\t* doc/invoke.texi: Add -mvpclmulqdq.\n+\n 2017-12-20  Tom de Vries  <tom@codesourcery.com>\n \n \tPR middle-end/83423"}, {"sha": "00eb01754bfb120771eafb3f226e2d6d01729966", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -143,6 +143,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_IBT_SET OPTION_MASK_ISA_IBT\n #define OPTION_MASK_ISA_SHSTK_SET OPTION_MASK_ISA_SHSTK\n #define OPTION_MASK_ISA_VAES_SET OPTION_MASK_ISA_VAES\n+#define OPTION_MASK_ISA_VPCLMULQDQ_SET OPTION_MASK_ISA_VPCLMULQDQ\n \n /* Define a set of ISAs which aren't available when a given ISA is\n    disabled.  MMX and SSE ISAs are handled separately.  */\n@@ -214,6 +215,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_IBT_UNSET OPTION_MASK_ISA_IBT\n #define OPTION_MASK_ISA_SHSTK_UNSET OPTION_MASK_ISA_SHSTK\n #define OPTION_MASK_ISA_VAES_UNSET OPTION_MASK_ISA_VAES\n+#define OPTION_MASK_ISA_VPCLMULQDQ_UNSET OPTION_MASK_ISA_VPCLMULQDQ\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -554,6 +556,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mvpclmulqdq:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_VPCLMULQDQ_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_VPCLMULQDQ_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_VPCLMULQDQ_UNSET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_VPCLMULQDQ_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mavx5124fmaps:\n       if (value)\n \t{\n@@ -889,13 +904,13 @@ ix86_handle_option (struct gcc_options *opts,\n     case OPT_mcx16:\n       if (value)\n \t{\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CX16_SET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CX16_SET;\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_CX16_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_CX16_SET;\n \t}\n       else\n \t{\n-\t  opts->x_ix86_isa_flags &= ~OPTION_MASK_ISA_CX16_UNSET;\n-\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_CX16_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_CX16_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_CX16_UNSET;\n \t}\n       return true;\n "}, {"sha": "4c2b3824f9812b2a50c34358cb518cc057192c47", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -381,7 +381,8 @@ i[34567]86-*-*)\n \t\t       clzerointrin.h pkuintrin.h sgxintrin.h cetintrin.h\n \t\t       gfniintrin.h cet.h avx512vbmi2intrin.h\n \t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n-\t\t       avx512vnnivlintrin.h gfniintrin.h vaesintrin.h\"\n+\t\t       avx512vnnivlintrin.h gfniintrin.h vaesintrin.h\n+\t\t       vpclmulqdqintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -408,7 +409,8 @@ x86_64-*-*)\n \t\t       clzerointrin.h pkuintrin.h sgxintrin.h cetintrin.h\n \t\t       gfniintrin.h cet.h avx512vbmi2intrin.h\n \t\t       avx512vbmi2vlintrin.h avx512vnniintrin.h\n-\t\t       avx512vnnivlintrin.h gfniintrin.h vaesintrin.h\"\n+\t\t       avx512vnnivlintrin.h gfniintrin.h vaesintrin.h\n+\t\t       vpclmulqdqintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "37f3e1a96bb31b4e17f680046d2c49766aa47c29", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -102,6 +102,7 @@\n #define bit_GFNI\t(1 << 8)\n #define bit_VAES\t(1 << 9)\n #define bit_AVX512VNNI\t(1 << 11)\n+#define bit_VPCLMULQDQ\t(1 << 10)\n #define bit_AVX512VPOPCNTDQ\t(1 << 14)\n #define bit_RDPID\t(1 << 22)\n "}, {"sha": "99826fd651e887970b482281a539607c59023fcd", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -420,6 +420,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_gfni = 0, has_avx512vbmi2 = 0;\n   unsigned int has_ibt = 0, has_shstk = 0;\n   unsigned int has_avx512vnni = 0, has_vaes = 0;\n+  unsigned int has_vpclmulqdq = 0;\n \n   bool arch;\n \n@@ -513,6 +514,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_rdpid = ecx & bit_RDPID;\n       has_gfni = ecx & bit_GFNI;\n       has_vaes = ecx & bit_VAES;\n+      has_vpclmulqdq = ecx & bit_VPCLMULQDQ;\n \n       has_avx5124vnniw = edx & bit_AVX5124VNNIW;\n       has_avx5124fmaps = edx & bit_AVX5124FMAPS;\n@@ -1080,6 +1082,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *ibt = has_ibt ? \" -mibt\" : \" -mno-ibt\";\n       const char *shstk = has_shstk ? \" -mshstk\" : \" -mno-shstk\";\n       const char *vaes = has_vaes ? \" -mvaes\" : \" -mno-vaes\";\n+      const char *vpclmulqdq = has_vpclmulqdq ? \" -mvpclmulqdq\" : \" -mno-vpclmulqdq\";\n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, sgx, bmi2,\n@@ -1090,7 +1093,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\txsavec, xsaves, avx512dq, avx512bw, avx512vl,\n \t\t\tavx512ifma, avx512vbmi, avx5124fmaps, avx5124vnniw,\n \t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, ibt, shstk,\n-\t\t\tavx512vbmi2, avx512vnni, vaes, NULL);\n+\t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq, NULL);\n     }\n \n done:"}, {"sha": "7d65b0b3fc4f2c278d0422017684b225fa3e9a06", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -2414,6 +2414,11 @@ BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8mulb_v32q\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_SSE, CODE_FOR_vgf2p8mulb_v16qi, \"__builtin_ia32_vgf2p8mulb_v16qi\", IX86_BUILTIN_VGF2P8MULB128, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI)\n BDESC (OPTION_MASK_ISA_GFNI | OPTION_MASK_ISA_AVX512BW, CODE_FOR_vgf2p8mulb_v16qi_mask, \"__builtin_ia32_vgf2p8mulb_v16qi_mask\", IX86_BUILTIN_VGF2P8MULB128MASK, UNKNOWN, (int) V16QI_FTYPE_V16QI_V16QI_V16QI_UHI)\n \n+/* VPCLMULQDQ */\n+BDESC (OPTION_MASK_ISA_VPCLMULQDQ | OPTION_MASK_ISA_AVX512VL, CODE_FOR_vpclmulqdq_v2di, \"__builtin_ia32_vpclmulqdq_v2di\", IX86_BUILTIN_VPCLMULQDQ2, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT)\n+BDESC (OPTION_MASK_ISA_VPCLMULQDQ | OPTION_MASK_ISA_AVX, CODE_FOR_vpclmulqdq_v4di, \"__builtin_ia32_vpclmulqdq_v4di\", IX86_BUILTIN_VPCLMULQDQ4, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_VPCLMULQDQ | OPTION_MASK_ISA_AVX512F, CODE_FOR_vpclmulqdq_v8di, \"__builtin_ia32_vpclmulqdq_v8di\", IX86_BUILTIN_VPCLMULQDQ8, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_INT)\n+\n /* Builtins with rounding support.  */\n BDESC_END (ARGS, ROUND_ARGS)\n "}, {"sha": "de1b0e299b68178a8f707033471dc59aa360da13", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -486,6 +486,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     }\n   if (isa_flag2 & OPTION_MASK_ISA_VAES)\n     def_or_undef (parse_in, \"__VAES__\");\n+  if (isa_flag & OPTION_MASK_ISA_VPCLMULQDQ)\n+    def_or_undef (parse_in, \"__VPCLMULQDQ__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "ef321d32c0bace051ff66d2949c253041deff611", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -2751,6 +2751,7 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n      ISAs come first.  Target string will be displayed in the same order.  */\n   static struct ix86_target_opts isa2_opts[] =\n   {\n+    { \"-mcx16\",\t\tOPTION_MASK_ISA_CX16 },\n     { \"-mmpx\",\t\tOPTION_MASK_ISA_MPX },\n     { \"-mavx512vbmi2\",\tOPTION_MASK_ISA_AVX512VBMI2 },\n     { \"-mavx512vnni\", OPTION_MASK_ISA_AVX512VNNI },\n@@ -2765,6 +2766,7 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n   };\n   static struct ix86_target_opts isa_opts[] =\n   {\n+    { \"-mvpclmulqdq\",\tOPTION_MASK_ISA_VPCLMULQDQ },\n     { \"-mgfni\",\t\tOPTION_MASK_ISA_GFNI },\n     { \"-mavx512vbmi\",\tOPTION_MASK_ISA_AVX512VBMI },\n     { \"-mavx512ifma\",\tOPTION_MASK_ISA_AVX512IFMA },\n@@ -2811,7 +2813,6 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mlzcnt\",\tOPTION_MASK_ISA_LZCNT },\n     { \"-mtbm\",\t\tOPTION_MASK_ISA_TBM },\n     { \"-mpopcnt\",\tOPTION_MASK_ISA_POPCNT },\n-    { \"-mcx16\",\t\tOPTION_MASK_ISA_CX16 },\n     { \"-msahf\",\t\tOPTION_MASK_ISA_SAHF },\n     { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n     { \"-mcrc32\",\tOPTION_MASK_ISA_CRC32 },\n@@ -3998,8 +3999,8 @@ ix86_option_override_internal (bool main_args_p,\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_BMI2))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_BMI2;\n \tif (processor_alias_table[i].flags & PTA_CX16\n-\t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_CX16))\n-\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_CX16;\n+\t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_CX16))\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_CX16;\n \tif (processor_alias_table[i].flags & (PTA_POPCNT | PTA_ABM)\n \t    && !(opts->x_ix86_isa_flags_explicit & OPTION_MASK_ISA_POPCNT))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_POPCNT;\n@@ -5330,6 +5331,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"ibt\",\tOPT_mibt),\n     IX86_ATTR_ISA (\"shstk\",\tOPT_mshstk),\n     IX86_ATTR_ISA (\"vaes\",\tOPT_mvaes),\n+    IX86_ATTR_ISA (\"vpclmulqdq\", OPT_mvpclmulqdq),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -35376,10 +35378,12 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n      at all, -m64 is a whole TU option.  */\n   if (((ix86_builtins_isa[fcode].isa\n \t& ~(OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_MMX\n-\t    | OPTION_MASK_ISA_64BIT | OPTION_MASK_ISA_GFNI))\n+\t    | OPTION_MASK_ISA_64BIT | OPTION_MASK_ISA_GFNI\n+\t    | OPTION_MASK_ISA_VPCLMULQDQ))\n        && !(ix86_builtins_isa[fcode].isa\n \t    & ~(OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_MMX\n-\t\t| OPTION_MASK_ISA_64BIT | OPTION_MASK_ISA_GFNI)\n+\t\t| OPTION_MASK_ISA_64BIT | OPTION_MASK_ISA_GFNI\n+\t\t| OPTION_MASK_ISA_VPCLMULQDQ)\n \t    & ix86_isa_flags))\n       || ((ix86_builtins_isa[fcode].isa & OPTION_MASK_ISA_AVX512VL)\n \t  && !(ix86_isa_flags & OPTION_MASK_ISA_AVX512VL))"}, {"sha": "7da8573bc405091fb77dadca06cf8365eec43547", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -111,6 +111,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_GFNI_P(x)\tTARGET_ISA_GFNI_P(x)\n #define TARGET_VAES\tTARGET_ISA_VAES\n #define TARGET_VAES_P(x)\tTARGET_ISA_VAES_P(x)\n+#define TARGET_VPCLMULQDQ\tTARGET_ISA_VPCLMULQDQ\n+#define TARGET_VPCLMULQDQ_P(x)\tTARGET_ISA_VPCLMULQDQ_P(x)\n #define TARGET_BMI\tTARGET_ISA_BMI\n #define TARGET_BMI_P(x)\tTARGET_ISA_BMI_P(x)\n #define TARGET_BMI2\tTARGET_ISA_BMI2"}, {"sha": "0e58d3862f5dd7a02b38620c06c3f33d68ede765", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -789,6 +789,10 @@ mvaes\n Target Report Mask(ISA_VAES) Var(ix86_isa_flags2) Save\n Support VAES built-in functions and code generation.\n \n+mvpclmulqdq\n+Target Report Mask(ISA_VPCLMULQDQ) Var(ix86_isa_flags) Save\n+Support VPCLMULQDQ built-in functions and code generation.\n+\n mbmi\n Target Report Mask(ISA_BMI) Var(ix86_isa_flags) Save\n Support BMI built-in functions and code generation.\n@@ -854,7 +858,7 @@ Target Report Mask(ISA_TBM) Var(ix86_isa_flags) Save\n Support TBM built-in functions and code generation.\n \n mcx16\n-Target Report Mask(ISA_CX16) Var(ix86_isa_flags) Save\n+Target Report Mask(ISA_CX16) Var(ix86_isa_flags2) Save\n Support code generation of cmpxchg16b instruction.\n \n msahf"}, {"sha": "7fcaa695b0a7ec9f1b854a8b1464f0263be035b8", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -104,6 +104,8 @@\n \n #include <vaesintrin.h>\n \n+#include <vpclmulqdqintrin.h>\n+\n #ifndef __RDRND__\n #pragma GCC push_options\n #pragma GCC target(\"rdrnd\")"}, {"sha": "20e7b160ac9a2bb782064fe927a6ed962a95ad05", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -178,6 +178,9 @@\n   UNSPEC_VAESDECLAST\n   UNSPEC_VAESENC\n   UNSPEC_VAESENCLAST\n+\n+  ;; For VPCLMULQDQ support\n+  UNSPEC_VPCLMULQDQ\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -340,6 +343,9 @@\n (define_mode_iterator VI8\n   [(V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\") V2DI])\n \n+(define_mode_iterator VI8_FVL\n+  [(V8DI \"TARGET_AVX512F\") V4DI (V2DI \"TARGET_AVX512VL\")])\n+\n (define_mode_iterator VI8_AVX512VL\n   [V8DI (V4DI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")])\n \n@@ -20498,3 +20504,13 @@\n   \"TARGET_VAES\"\n   \"vaesenclast\\t{%2, %1, %0|%0, %1, %2}\"\n )\n+\n+(define_insn \"vpclmulqdq_<mode>\"\n+  [(set (match_operand:VI8_FVL 0 \"register_operand\" \"=v\")\n+\t(unspec:VI8_FVL [(match_operand:VI8_FVL 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:VI8_FVL 2 \"vector_operand\" \"vm\")\n+\t\t      (match_operand:SI 3 \"const_0_to_255_operand\" \"n\")]\n+\t\t     UNSPEC_VPCLMULQDQ))]\n+  \"TARGET_VPCLMULQDQ\"\n+  \"vpclmulqdq\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"mode\" \"DI\")])"}, {"sha": "483e1602c0020a3d7b0abeb9e59cfce0de28c568", "filename": "gcc/config/i386/vpclmulqdqintrin.h", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fvpclmulqdqintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fconfig%2Fi386%2Fvpclmulqdqintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvpclmulqdqintrin.h?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -0,0 +1,108 @@\n+/* Copyright (C) 2014-2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <vpclmulqdqintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _VPCLMULQDQINTRIN_H_INCLUDED\n+#define _VPCLMULQDQINTRIN_H_INCLUDED\n+\n+#if !defined(__VPCLMULQDQ__) || !defined(__AVX512F__)\n+#pragma GCC push_options\n+#pragma GCC target(\"vpclmulqdq,avx512f\")\n+#define __DISABLE_VPCLMULQDQF__\n+#endif /* __VPCLMULQDQF__ */\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_clmulepi64_epi128 (__m512i __A, __m512i __B, const int __C)\n+{\n+  return (__m512i) __builtin_ia32_vpclmulqdq_v8di ((__v8di)__A,\n+\t\t\t\t\t\t  (__v8di) __B, __C);\n+}\n+#else\n+#define _mm512_clmulepi64_epi128(A, B, C)\t\t\t\t   \\\n+  ((__m512i) __builtin_ia32_vpclmulqdq_v8di ((__v8di)(__m512i)(A),\t\\\n+\t\t\t\t(__v8di)(__m512i)(B), (int)(C)))\n+#endif\n+\n+#ifdef __DISABLE_VPCLMULQDQF__\n+#undef __DISABLE_VPCLMULQDQF__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_VPCLMULQDQF__ */\n+\n+#if !defined(__VPCLMULQDQ__) || !defined(__AVX512VL__)\n+#pragma GCC push_options\n+#pragma GCC target(\"vpclmulqdq,avx512vl\")\n+#define __DISABLE_VPCLMULQDQVL__\n+#endif /* __VPCLMULQDQVL__ */\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_clmulepi64_epi128 (__m128i __A, __m128i __B, const int __C)\n+{\n+  return (__m128i) __builtin_ia32_vpclmulqdq_v2di ((__v2di)__A,\n+\t\t\t\t\t\t   (__v2di) __B, __C);\n+}\n+#else\n+#define _mm_clmulepi64_epi128(A, B, C)\t\t\t   \\\n+  ((__m128i) __builtin_ia32_vpclmulqdq_v2di ((__v2di)(__m128i)(A), \\\n+\t\t\t\t(__v2di)(__m128i)(B), (int)(C)))\n+#endif\n+\n+#ifdef __DISABLE_VPCLMULQDQVL__\n+#undef __DISABLE_VPCLMULQDQVL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_VPCLMULQDQVL__ */\n+\n+#if !defined(__VPCLMULQDQ__) || !defined(__AVX512VL__)\n+#pragma GCC push_options\n+#pragma GCC target(\"vpclmulqdq,avx512vl\")\n+#define __DISABLE_VPCLMULQDQ__\n+#endif /* __VPCLMULQDQ__ */\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_clmulepi64_epi128 (__m256i __A, __m256i __B, const int __C)\n+{\n+  return (__m256i) __builtin_ia32_vpclmulqdq_v4di ((__v4di)__A,\n+\t\t\t\t\t\t   (__v4di) __B, __C);\n+}\n+#else\n+#define _mm256_clmulepi64_epi128(A, B, C)\t\t\t   \\\n+  ((__m256i) __builtin_ia32_vpclmulqdq_v4di ((__v4di)(__m256i)(A), \\\n+\t\t\t\t(__v4di)(__m256i)(B), (int)(C)))\n+#endif\n+\n+#ifdef __DISABLE_VPCLMULQDQ__\n+#undef __DISABLE_VPCLMULQDQ__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_VPCLMULQDQ__ */\n+\n+\n+#endif /* _VPCLMULQDQINTRIN_H_INCLUDED */\n+"}, {"sha": "cde0c73f9e006c9246fa93c9557edc1d6b895a50", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -1208,6 +1208,7 @@ See RS/6000 and PowerPC Options.\n -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mlwp  -mmpx  @gol\n -mmwaitx  -mclzero  -mpku  -mthreads -mgfni  -mvaes  @gol\n -mcet -mibt -mshstk -mforce-indirect-call -mavx512vbmi2 @gol\n+-mvpclmulqdq @gol\n -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy}  -mmemset-strategy=@var{strategy} @gol\n@@ -26160,13 +26161,17 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @itemx -mvaes\n @opindex mvaes\n+@need 200\n+@itemx -mvpclmulqdq\n+@opindex mvpclmulqdq\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,\n AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, BMI, BMI2, VAES,\n FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, MPX, MWAITX, PKU, IBT, SHSTK, AVX512VBMI2,\n-GFNI, 3DNow!@: or enhanced 3DNow!@: extended instruction sets.  Each has a\n-corresponding @option{-mno-} option to disable use of these instructions.\n+GFNI, VPCLMULQDQ, 3DNow!@: or enhanced 3DNow!@: extended instruction sets.\n+Each has a corresponding @option{-mno-} option to disable use of these\n+instructions.\n \n These extensions are also available as built-in functions: see\n @ref{x86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "aaa8c0551fe1e593ee846be2db231934bd38533f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -1,3 +1,14 @@\n+2017-12-20  Julia Koval  <julia.koval@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Handle new intrinsics.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/avx512-check.h: Handle bit_VPCLMULQDQ.\n+\t* gcc.target/i386/avx512f-vpclmulqdq-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vpclmulqdq-2.c: Ditto.\n+\t* gcc.target/i386/vpclmulqdq.c: Ditto.\n+\t* gcc.target/i386/i386.exp (check_effective_target_vpclmulqdq): New.\n+\n 2017-12-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/83394"}, {"sha": "db772449c42e4c15084384405305af7028c39be6", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -655,6 +655,11 @@\n #define __builtin_ia32_vpshld_v2di(A, B, C) __builtin_ia32_vpshld_v2di(A, B, 1)\n #define __builtin_ia32_vpshld_v2di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v2di_mask(A, B, 1, D, E)\n \n+/* vpclmulqdqintrin.h */\n+#define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) \n+#define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n+#define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n+\n #include <wmmintrin.h>\n #include <immintrin.h>\n #include <mm3dnow.h>"}, {"sha": "2d174f9df5d1e773b70306330cf126318110716d", "filename": "gcc/testsuite/gcc.target/i386/avx512-check.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -86,6 +86,9 @@ main ()\n #endif\n #ifdef VAES\n       && (ecx & bit_VAES)\n+#endif\n+#ifdef VPCLMULQDQ\n+      && (ecx & bit_VPCLMULQDQ)\n #endif\n       && avx512f_os_support ())\n     {"}, {"sha": "fe746a1095ccf10876554e6913a243c774e0a693", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpclmulqdq-2.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpclmulqdq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpclmulqdq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpclmulqdq-2.c?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mvpclmulqdq\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target vpclmulqdq } */\n+\n+#define AVX512F\n+\n+#define VPCLMULQDQ\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (unsigned long long *r, unsigned long long *s1, unsigned long long *s2, unsigned char imm)\n+{\n+  for (int len = 0; len < SIZE/2; len++)\n+  {\n+    unsigned long long src1, src2;\n+    src1 = (imm & 1) ? s1[len*2 + 1] : s1[len*2];\n+    src2 = ((imm >> 4) & 1) ? s2[len*2 + 1] : s2[len*2];\n+    for (int i = 0; i < 64; i++)\n+      {\n+        if ((src1 >> i) & 1)\n+          {\n+            if (i)\n+              r[len*2 + 1] ^= src2 >> (64 - i);\n+            r[len*2] ^= src2 << i;\n+          }\n+      }\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) res, src1, src2;\n+  unsigned long long res_ref[SIZE];\n+  unsigned char imm = 1;  \n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 0xFFFFFFFFF + i;\n+      src2.a[i] = 0xFFFFFFFFF + i*i;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res.a[i] = 0;\n+      res_ref[i] = 0;\n+    }\n+\n+  CALC (res_ref, src1.a, src2.a, imm);\n+  res.x = INTRINSIC (_clmulepi64_epi128) (src1.x, src2.x, imm);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res, res_ref))\n+    abort ();\n+}"}, {"sha": "61288a00307ced93ab1bebc4ca2efd78bf71dcba", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpclmulqdq-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpclmulqdq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpclmulqdq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpclmulqdq-2.c?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -mvpclmulqdq\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target vpclmulqdq } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpclmulqdq-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpclmulqdq-2.c\""}, {"sha": "0b53023945c080d1b94c455a90c4a9f0282a3652", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -470,6 +470,19 @@ proc check_effective_target_avx512vaes { } {\n     } \"-mvaes\" ]\n }\n \n+# Return 1 if vpclmulqdq instructions can be compiled.\n+proc check_effective_target_vpclmulqdq { } {\n+    return [check_no_compiler_messages vpclmulqdq object {\n+        typedef long long __v4di __attribute__ ((__vector_size__ (32)));\n+\n+        __v4di\n+        _mm256_clmulepi64_epi128 (__v4di __A, __v4di __B)\n+        {\n+            return (__v4di) __builtin_ia32_vpclmulqdq_v4di (__A, __B, 0);\n+        }\n+    } \"-mvpclmulqdq -mavx512vl\" ]\n+}\n+\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}, {"sha": "62f87f00b07416dd7c36a0aee87806a629b455c9", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -672,4 +672,9 @@\n #define __builtin_ia32_vpshld_v2di(A, B, C) __builtin_ia32_vpshld_v2di(A, B, 1)\n #define __builtin_ia32_vpshld_v2di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v2di_mask(A, B, 1, D, E)\n \n+/* vpclmulqdqintrin.h */\n+#define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) \n+#define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n+#define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n+\n #include <x86intrin.h>"}, {"sha": "65f6ccffe250ebe069a2125a1e19abbba428c00c", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -633,7 +633,6 @@\n #define __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, 1, D, E) \n #define __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, 1, D, E) \n \n-\n /* avx512vbmi2intrin.h */\n #define __builtin_ia32_vpshrd_v32hi(A, B, C) __builtin_ia32_vpshrd_v32hi(A, B, 1)\n #define __builtin_ia32_vpshrd_v32hi_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v32hi_mask(A, B, 1, D, E)\n@@ -672,6 +671,11 @@\n #define __builtin_ia32_vpshld_v2di(A, B, C) __builtin_ia32_vpshld_v2di(A, B, 1)\n #define __builtin_ia32_vpshld_v2di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v2di_mask(A, B, 1, D, E)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2\")\n+/* vpclmulqdqintrin.h */\n+#define __builtin_ia32_vpclmulqdq_v4di(A, B, C)  __builtin_ia32_vpclmulqdq_v4di(A, B, 1) \n+#define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n+#define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n+\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq\")\n \n #include <x86intrin.h>"}, {"sha": "0ce1a061298fb44badd5fdd479ee6e6a2eac2c05", "filename": "gcc/testsuite/gcc.target/i386/vpclmulqdq.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvpclmulqdq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6557be99afd301b8d7f2b142b12fb47ae6cb823d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvpclmulqdq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvpclmulqdq.c?ref=6557be99afd301b8d7f2b142b12fb47ae6cb823d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mvpclmulqdq -mavx512vl -mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpclmulqdq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpclmulqdq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpclmulqdq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <x86intrin.h>\n+\n+volatile __m512i x1, x2;\n+volatile __m256i x3, x4;\n+volatile __m128i x5, x6;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+    x1 = _mm512_clmulepi64_epi128(x1, x2, 3);\n+    x3 = _mm256_clmulepi64_epi128(x3, x4, 3);\n+    x5 = _mm_clmulepi64_epi128(x5, x6, 3);\n+}\n+"}]}