{"sha": "1c6d33efb4d9725b537e72c7b18efeeb638c55bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM2ZDMzZWZiNGQ5NzI1YjUzN2U3MmM3YjE4ZWZlZWI2MzhjNTViYw==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-09-25T22:39:51Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-09-25T22:39:51Z"}, "message": "cpplex.c (save_comment): Only store the initial '/' now.\n\n\t* cpplex.c (save_comment): Only store the initial '/'\n\tnow.\n\t(lex_token): Combine handling of the two comment types.\n\tPass everything but the initial '/' to save_comment.\n\nFrom-SVN: r36635", "tree": {"sha": "bb49ba90782584c23f6bca3a21e6dfbc631dc1a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb49ba90782584c23f6bca3a21e6dfbc631dc1a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c6d33efb4d9725b537e72c7b18efeeb638c55bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6d33efb4d9725b537e72c7b18efeeb638c55bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c6d33efb4d9725b537e72c7b18efeeb638c55bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6d33efb4d9725b537e72c7b18efeeb638c55bc/comments", "author": null, "committer": null, "parents": [{"sha": "7de4d00450a017b0edbbbf620dcfc5d9326f163c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de4d00450a017b0edbbbf620dcfc5d9326f163c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7de4d00450a017b0edbbbf620dcfc5d9326f163c"}], "stats": {"total": 89, "additions": 42, "deletions": 47}, "files": [{"sha": "c8898da0c692a9f79cd357718e67b8a095747e87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6d33efb4d9725b537e72c7b18efeeb638c55bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6d33efb4d9725b537e72c7b18efeeb638c55bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c6d33efb4d9725b537e72c7b18efeeb638c55bc", "patch": "@@ -1,3 +1,10 @@\n+Mon 25-Sep-2000 23:38:27 BST  Neil Booth  <neilb@earthling.net>\n+\n+\t* cpplex.c (save_comment): Only store the initial '/'\n+\tnow.\n+\t(lex_token): Combine handling of the two comment types.\n+\tPass everything but the initial '/' to save_comment.\t\n+\n Mon 25-Sep-2000 23:31:45 BST  Neil Booth  <neilb@earthling.net>\n \n \t* cpphash.h (_cpp_digraph_spellings, _cpp_process_directive,"}, {"sha": "0c31560fd8f2281c8f88124f9db7e7f3f0674072", "filename": "gcc/cpplex.c", "status": "modified", "additions": 35, "deletions": 47, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c6d33efb4d9725b537e72c7b18efeeb638c55bc/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c6d33efb4d9725b537e72c7b18efeeb638c55bc/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=1c6d33efb4d9725b537e72c7b18efeeb638c55bc", "patch": "@@ -947,8 +947,7 @@ save_comment (pfile, token, from)\n   unsigned int len;\n   cpp_toklist *list = &pfile->token_list;\n   \n-#define COMMENT_START_LEN 2\n-  len = pfile->buffer->cur - from + COMMENT_START_LEN;\n+  len = pfile->buffer->cur - from + 1; /* + 1 for the initial '/'.  */\n   _cpp_reserve_name_space (list, len);\n   buffer = list->namebuf + list->name_used;\n   list->name_used += len;\n@@ -957,10 +956,8 @@ save_comment (pfile, token, from)\n   token->val.str.len = len;\n   token->val.str.text = buffer;\n \n-  /* from[-1] is '/' or '*' depending on the comment type.  */\n-  *buffer++ = '/';\n-  *buffer++ = from[-1];\n-  memcpy (buffer, from, len - COMMENT_START_LEN);\n+  buffer[0] = '/';\n+  memcpy (buffer + 1, from, len - 1);\n }\n \n /* Subroutine of lex_token to handle '%'.  A little tricky, since we\n@@ -1187,65 +1184,56 @@ lex_token (pfile, result)\n       break;\n \n     case '/':\n+      /* A potential block or line comment.  */\n+      comment_start = buffer->cur;\n       result->type = CPP_DIV;\n       c = get_effective_char (buffer);\n       if (c == '=')\n \tACCEPT_CHAR (CPP_DIV_EQ);\n-      else if (c == '*')\n-\t{\n-\t  comment_start = buffer->cur;\n+      if (c != '/' && c != '*')\n+\tbreak;\n \n-\t  /* Skip_block_comment updates buffer->read_ahead.  */\n+      if (c == '*')\n+\t{\n \t  if (skip_block_comment (pfile))\n \t    cpp_error_with_line (pfile, result->line, result->col,\n \t\t\t\t \"unterminated comment\");\n-\t  if (!pfile->state.save_comments)\n-\t    {\n-\t      result->flags |= PREV_WHITE;\n-\t      goto next_char;\n-\t    }\n-\n-\t  /* Save the comment as a token in its own right.  */\n-\t  save_comment (pfile, result, comment_start);\n \t}\n-      else if (c == '/')\n+      else\n \t{\n+\t  if (!CPP_OPTION (pfile, cplusplus_comments)\n+\t      && !CPP_IN_SYSTEM_HEADER (pfile))\n+\t    break;\n+\n \t  /* We silently allow C++ comments in system headers,\n \t     irrespective of conformance mode, because lots of\n \t     broken systems do that and trying to clean it up in\n \t     fixincludes is a nightmare.  */\n-\t  if (CPP_IN_SYSTEM_HEADER (pfile))\n-\t    goto do_line_comment;\n-\t  if (CPP_OPTION (pfile, cplusplus_comments))\n+\t  if (!CPP_IN_SYSTEM_HEADER (pfile)\n+\t      && CPP_OPTION (pfile, c89) && CPP_PEDANTIC (pfile)\n+\t      && !buffer->warned_cplusplus_comments)\n \t    {\n-\t      if (CPP_OPTION (pfile, c89) && CPP_PEDANTIC (pfile)\n-\t\t  && ! buffer->warned_cplusplus_comments)\n-\t\t{\n-\t\t  cpp_pedwarn (pfile,\n-\t\t       \"C++ style comments are not allowed in ISO C89\");\n-\t\t  cpp_pedwarn (pfile,\n-\t\t       \"(this will be reported only once per input file)\");\n-\t\t  buffer->warned_cplusplus_comments = 1;\n-\t\t}\n-\n-\t    do_line_comment:\n-\t      comment_start = buffer->cur;\n-\n-\t      /* Skip_line_comment updates buffer->read_ahead.  */\n-\t      if (skip_line_comment (pfile))\n-\t\tcpp_warning_with_line (pfile, result->line, result->col,\n-\t\t\t\t       \"multi-line comment\");\n+\t      cpp_pedwarn (pfile,\n+\t\t\t   \"C++ style comments are not allowed in ISO C89\");\n+\t      cpp_pedwarn (pfile,\n+\t\t\t   \"(this will be reported only once per input file)\");\n+\t      buffer->warned_cplusplus_comments = 1;\n+\t    }\n \n-\t      if (!pfile->state.save_comments)\n-\t\t{\n-\t\t  result->flags |= PREV_WHITE;\n-\t\t  goto next_char;\n-\t\t}\n+\t  if (skip_line_comment (pfile))\n+\t    cpp_warning_with_line (pfile, result->line, result->col,\n+\t\t\t\t   \"multi-line comment\");\n+\t}\n \n-\t      /* Save the comment as a token in its own right.  */\n-\t      save_comment (pfile, result, comment_start);\n-\t    }\n+      /* Skipping the comment has updated buffer->read_ahead.  */\n+      if (!pfile->state.save_comments)\n+\t{\n+\t  result->flags |= PREV_WHITE;\n+\t  goto next_char;\n \t}\n+\n+      /* Save the comment as a token in its own right.  */\n+      save_comment (pfile, result, comment_start);\n       break;\n \n     case '<':"}]}