{"sha": "e105f02cd831e95c009d62f991e7d856e8d5f135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTEwNWYwMmNkODMxZTk1YzAwOWQ2MmY5OTFlN2Q4NTZlOGQ1ZjEzNQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-04-08T22:47:50Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-04-08T22:47:50Z"}, "message": "jump.c (mark_jump_label): Record REG_LABEL notes for insns which refer to the CODE_LABEL before a...\n\n        * jump.c (mark_jump_label): Record REG_LABEL notes for insns which\n        refer to the CODE_LABEL before a dispatch table.\n\nFrom-SVN: r19060", "tree": {"sha": "33a577756412bbaae8dd6d3143b77ad81c0b81e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33a577756412bbaae8dd6d3143b77ad81c0b81e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e105f02cd831e95c009d62f991e7d856e8d5f135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e105f02cd831e95c009d62f991e7d856e8d5f135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e105f02cd831e95c009d62f991e7d856e8d5f135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e105f02cd831e95c009d62f991e7d856e8d5f135/comments", "author": null, "committer": null, "parents": [{"sha": "56b2d7a733259e7a0a33bd8591a5200d1f416b86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56b2d7a733259e7a0a33bd8591a5200d1f416b86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56b2d7a733259e7a0a33bd8591a5200d1f416b86"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "6462e6e5477fad9a484a6c2771cea8b4a07aab02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e105f02cd831e95c009d62f991e7d856e8d5f135/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e105f02cd831e95c009d62f991e7d856e8d5f135/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e105f02cd831e95c009d62f991e7d856e8d5f135", "patch": "@@ -23,6 +23,9 @@ Fri Apr  3 17:02:13 1998  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n Wed Apr  8 12:51:19 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* jump.c (mark_jump_label): Record REG_LABEL notes for insns which\n+\trefer to the CODE_LABEL before a dispatch table.\n+\n \t* invoke.texi: Add ARC options.\n \n \t* gcc.c (proces_command): Improve error message for -o with"}, {"sha": "ef80eb61556cd01cc31f7e40a020ebfe17560a9f", "filename": "gcc/jump.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e105f02cd831e95c009d62f991e7d856e8d5f135/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e105f02cd831e95c009d62f991e7d856e8d5f135/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=e105f02cd831e95c009d62f991e7d856e8d5f135", "patch": "@@ -3397,17 +3397,21 @@ mark_jump_label (x, insn, cross_jump)\n \t       is one.  */\n \t    else if (! find_reg_note (insn, REG_LABEL, label))\n \t      {\n-\t\trtx next = next_real_insn (label);\n-\t\t/* Don't record labels that refer to dispatch tables.\n-\t\t   This is not necessary, since the tablejump\n-\t\t   references the same label.\n-\t\t   And if we did record them, flow.c would make worse code.  */\n-\t\tif (next == 0\n-\t\t    || ! (GET_CODE (next) == JUMP_INSN\n-\t\t\t  && (GET_CODE (PATTERN (next)) == ADDR_VEC\n-\t\t\t      || GET_CODE (PATTERN (next)) == ADDR_DIFF_VEC)))\n-\t\t  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_LABEL, label,\n-\t\t\t\t\t\t\tREG_NOTES (insn));\n+\t\t/* This code used to ignore labels which refered to dispatch\n+\t\t   tables to avoid flow.c generating worse code.\n+\n+\t\t   However, in the presense of global optimizations like\n+\t\t   gcse which call find_basic_blocks without calling\n+\t\t   life_analysis, not recording such labels will lead\n+\t\t   to compiler aborts because of inconsistencies in the\n+\t\t   flow graph.  So we go ahead and record the label.\n+\n+\t\t   It may also be the case that the optimization argument\n+\t\t   is no longer valid because of the more accurate cfg\n+\t\t   we build in find_basic_blocks -- it no longer pessimizes\n+\t\t   code when it finds a REG_LABEL note.  */\n+\t\tREG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_LABEL, label,\n+\t\t\t\t\t\t      REG_NOTES (insn));\n \t      }\n \t  }\n \treturn;"}]}