{"sha": "83ede847e82db63f9d56c98aa7830f0d4f0e76e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNlZGU4NDdlODJkYjYzZjlkNTZjOThhYTc4MzBmMGQ0ZjBlNzZlMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-12-11T10:06:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-12-11T10:06:15Z"}, "message": "re PR tree-optimization/55079 (false positive -Warray-bounds (also seen at -O3 bootstrap))\n\n2012-12-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/55079\n\t* tree-vrp.c (extract_range_from_binary_expr_1): Handle MAX/MIN_EXPR\n\tfor more cases.\n\t(register_edge_assert_for_2): Register asserts for post-in/decrement\n\ttests.\n\t(check_array_ref): Dump what expression we emit array bound\n\twarnings for.\n\t(search_for_addr_array): Likewise.\n\n\t* gcc.dg/Warray-bounds-9.c: New testcase.\n\t* gcc.dg/Warray-bounds-10.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-pre-1.c: Adjust.\n\nFrom-SVN: r194388", "tree": {"sha": "7cbb63bd058c4cb36880da81ecd6d37b2c1e99a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cbb63bd058c4cb36880da81ecd6d37b2c1e99a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83ede847e82db63f9d56c98aa7830f0d4f0e76e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ede847e82db63f9d56c98aa7830f0d4f0e76e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83ede847e82db63f9d56c98aa7830f0d4f0e76e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ede847e82db63f9d56c98aa7830f0d4f0e76e1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c401fb6f18ed51467bc84311bdc1d9f64b57309a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c401fb6f18ed51467bc84311bdc1d9f64b57309a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c401fb6f18ed51467bc84311bdc1d9f64b57309a"}], "stats": {"total": 173, "additions": 162, "deletions": 11}, "files": [{"sha": "fc1a8276214282a12061b29bc85e4f3d20fd63e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ede847e82db63f9d56c98aa7830f0d4f0e76e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ede847e82db63f9d56c98aa7830f0d4f0e76e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83ede847e82db63f9d56c98aa7830f0d4f0e76e1", "patch": "@@ -1,3 +1,14 @@\n+2012-12-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55079\n+\t* tree-vrp.c (extract_range_from_binary_expr_1): Handle MAX/MIN_EXPR\n+\tfor more cases.\n+\t(register_edge_assert_for_2): Register asserts for post-in/decrement\n+\ttests.\n+\t(check_array_ref): Dump what expression we emit array bound\n+\twarnings for.\n+\t(search_for_addr_array): Likewise.\n+\n 2012-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-loop-ivopts.c (prepare_decl_rtl) <ADDR_EXPR>: Generate RTL"}, {"sha": "3e81e76597e8237601e3ee473544edcd1694bb5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ede847e82db63f9d56c98aa7830f0d4f0e76e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ede847e82db63f9d56c98aa7830f0d4f0e76e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83ede847e82db63f9d56c98aa7830f0d4f0e76e1", "patch": "@@ -1,3 +1,10 @@\n+2012-12-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/55079\n+\t* gcc.dg/Warray-bounds-9.c: New testcase.\n+\t* gcc.dg/Warray-bounds-10.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-pre-1.c: Adjust.\n+\n 2012-12-10  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/52909"}, {"sha": "5fd6e6f1a91ab7ac68358e8f4da18ba079d521b6", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-10.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ede847e82db63f9d56c98aa7830f0d4f0e76e1/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ede847e82db63f9d56c98aa7830f0d4f0e76e1/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-10.c?ref=83ede847e82db63f9d56c98aa7830f0d4f0e76e1", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -Warray-bounds\" } */\n+\n+int f(unsigned len, int buflen)\n+{\n+  unsigned taillen;\n+  unsigned slen;\n+  unsigned i;\n+  int b[17];            /* needed <= 17 to trigger Warning */\n+  int j = 0;            /* needed to trigger Warning */\n+\n+  b[0] = 0;\n+  taillen= buflen & 7;    /* taillen [0..7] */\n+\n+  if(taillen) {        /* taillen [1..7] */\n+      slen= 8 - taillen;    /* slen    [7..1] */\n+      if (len<slen)        /* needed to trigger Warning  */\n+\tslen=len;        /* slen' < slen  */\n+      for(i=0; i<slen; i++) {\n+\t  j = b[taillen];    /* taillen + slen = [1..7] + [7..1] = 8 */\n+\t  taillen++;\n+      }\n+  }\n+  return j;\n+}"}, {"sha": "92bcd4e5ce7a2eb3b58287b02ef2fcc53852fd27", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-9.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ede847e82db63f9d56c98aa7830f0d4f0e76e1/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ede847e82db63f9d56c98aa7830f0d4f0e76e1/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-9.c?ref=83ede847e82db63f9d56c98aa7830f0d4f0e76e1", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -Warray-bounds\" } */\n+\n+int a[8];\n+\n+void\n+test(unsigned int n)\n+{\n+  unsigned int i;\n+  unsigned int j;\n+  if (n<8)\n+    for (j=0;j<n;j++)\n+      {\n+\ti = j;\n+\tdo\n+\t  a[i+1]=a[i];\n+\twhile (i--);\n+      }\n+}"}, {"sha": "4319c60802e83c20d4a032cfbbaf57a8009ec8db", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 100, "deletions": 11, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83ede847e82db63f9d56c98aa7830f0d4f0e76e1/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83ede847e82db63f9d56c98aa7830f0d4f0e76e1/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=83ede847e82db63f9d56c98aa7830f0d4f0e76e1", "patch": "@@ -2349,6 +2349,8 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n       && code != EXACT_DIV_EXPR\n       && code != ROUND_DIV_EXPR\n       && code != TRUNC_MOD_EXPR\n+      && code != MIN_EXPR\n+      && code != MAX_EXPR\n       && (vr0.type == VR_VARYING\n \t  || vr1.type == VR_VARYING\n \t  || vr0.type != vr1.type\n@@ -2602,21 +2604,49 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n   else if (code == MIN_EXPR\n \t   || code == MAX_EXPR)\n     {\n-      if (vr0.type == VR_ANTI_RANGE)\n+      if (vr0.type == VR_RANGE\n+\t  && !symbolic_range_p (&vr0))\n+\t{\n+\t  type = VR_RANGE;\n+\t  if (vr1.type == VR_RANGE\n+\t      && !symbolic_range_p (&vr1))\n+\t    {\n+\t      /* For operations that make the resulting range directly\n+\t\t proportional to the original ranges, apply the operation to\n+\t\t the same end of each range.  */\n+\t      min = vrp_int_const_binop (code, vr0.min, vr1.min);\n+\t      max = vrp_int_const_binop (code, vr0.max, vr1.max);\n+\t    }\n+\t  else if (code == MIN_EXPR)\n+\t    {\n+\t      min = vrp_val_min (expr_type);\n+\t      max = vr0.max;\n+\t    }\n+\t  else if (code == MAX_EXPR)\n+\t    {\n+\t      min = vr0.min;\n+\t      max = vrp_val_max (expr_type);\n+\t    }\n+\t}\n+      else if (vr1.type == VR_RANGE\n+\t       && !symbolic_range_p (&vr1))\n \t{\n-\t  /* For MIN_EXPR and MAX_EXPR with two VR_ANTI_RANGEs,\n-\t     the resulting VR_ANTI_RANGE is the same - intersection\n-\t     of the two ranges.  */\n-\t  min = vrp_int_const_binop (MAX_EXPR, vr0.min, vr1.min);\n-\t  max = vrp_int_const_binop (MIN_EXPR, vr0.max, vr1.max);\n+\t  type = VR_RANGE;\n+\t  if (code == MIN_EXPR)\n+\t    {\n+\t      min = vrp_val_min (expr_type);\n+\t      max = vr1.max;\n+\t    }\n+\t  else if (code == MAX_EXPR)\n+\t    {\n+\t      min = vr1.min;\n+\t      max = vrp_val_max (expr_type);\n+\t    }\n \t}\n       else\n \t{\n-\t  /* For operations that make the resulting range directly\n-\t     proportional to the original ranges, apply the operation to\n-\t     the same end of each range.  */\n-\t  min = vrp_int_const_binop (code, vr0.min, vr1.min);\n-\t  max = vrp_int_const_binop (code, vr0.max, vr1.max);\n+\t  set_value_range_to_varying (vr);\n+\t  return;\n \t}\n     }\n   else if (code == MULT_EXPR)\n@@ -4707,6 +4737,45 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t}\n     }\n \n+  /* In the case of post-in/decrement tests like if (i++) ... and uses\n+     of the in/decremented value on the edge the extra name we want to\n+     assert for is not on the def chain of the name compared.  Instead\n+     it is in the set of use stmts.  */\n+  if ((comp_code == NE_EXPR\n+       || comp_code == EQ_EXPR)\n+      && TREE_CODE (val) == INTEGER_CST)\n+    {\n+      imm_use_iterator ui;\n+      gimple use_stmt;\n+      FOR_EACH_IMM_USE_STMT (use_stmt, ui, name)\n+\t{\n+\t  /* Cut off to use-stmts that are in the predecessor.  */\n+\t  if (gimple_bb (use_stmt) != e->src)\n+\t    continue;\n+\n+\t  if (!is_gimple_assign (use_stmt))\n+\t    continue;\n+\n+\t  enum tree_code code = gimple_assign_rhs_code (use_stmt);\n+\t  if (code != PLUS_EXPR\n+\t      && code != MINUS_EXPR)\n+\t    continue;\n+\n+\t  tree cst = gimple_assign_rhs2 (use_stmt);\n+\t  if (TREE_CODE (cst) != INTEGER_CST)\n+\t    continue;\n+\n+\t  tree name2 = gimple_assign_lhs (use_stmt);\n+\t  if (live_on_edge (e, name2))\n+\t    {\n+\t      cst = int_const_binop (code, val, cst);\n+\t      register_new_assert_for (name2, name2, comp_code, cst,\n+\t\t\t\t       NULL, e, bsi);\n+\t      retval = true;\n+\t    }\n+\t}\n+    }\n+ \n   if (TREE_CODE_CLASS (comp_code) == tcc_comparison\n       && TREE_CODE (val) == INTEGER_CST)\n     {\n@@ -5943,13 +6012,23 @@ check_array_ref (location_t location, tree ref, bool ignore_off_by_one)\n \t       : (tree_int_cst_lt (up_bound, up_sub)\n \t\t  || tree_int_cst_equal (up_bound_p1, up_sub))))\n     {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"Array bound warning for \");\n+\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, ref);\n+\t}\n       warning_at (location, OPT_Warray_bounds,\n \t\t  \"array subscript is above array bounds\");\n       TREE_NO_WARNING (ref) = 1;\n     }\n   else if (TREE_CODE (low_sub) == INTEGER_CST\n            && tree_int_cst_lt (low_sub, low_bound))\n     {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"Array bound warning for \");\n+\t  dump_generic_expr (MSG_NOTE, TDF_SLIM, ref);\n+\t}\n       warning_at (location, OPT_Warray_bounds,\n \t\t  \"array subscript is below array bounds\");\n       TREE_NO_WARNING (ref) = 1;\n@@ -6018,6 +6097,11 @@ search_for_addr_array (tree t, location_t location)\n       idx = idx.sdiv (tree_to_double_int (el_sz), TRUNC_DIV_EXPR);\n       if (idx.slt (double_int_zero))\n \t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"Array bound warning for \");\n+\t      dump_generic_expr (MSG_NOTE, TDF_SLIM, t);\n+\t    }\n \t  warning_at (location, OPT_Warray_bounds,\n \t\t      \"array subscript is below array bounds\");\n \t  TREE_NO_WARNING (t) = 1;\n@@ -6026,6 +6110,11 @@ search_for_addr_array (tree t, location_t location)\n \t\t\t- tree_to_double_int (low_bound)\n \t\t\t+ double_int_one))\n \t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"Array bound warning for \");\n+\t      dump_generic_expr (MSG_NOTE, TDF_SLIM, t);\n+\t    }\n \t  warning_at (location, OPT_Warray_bounds,\n \t\t      \"array subscript is above array bounds\");\n \t  TREE_NO_WARNING (t) = 1;"}]}