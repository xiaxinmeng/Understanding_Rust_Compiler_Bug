{"sha": "28bddf0e322a5fdc33d3dcc3b9928d559ad7f124", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhiZGRmMGUzMjJhNWZkYzMzZDNkY2MzYjk5MjhkNTU5YWQ3ZjEyNA==", "commit": {"author": {"name": "Marcus Comstedt", "email": "marcus@mc.pp.se", "date": "2021-03-19T19:49:06Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-03-23T09:31:13Z"}, "message": "RISC-V: Fix trampoline generation on big endian\n\ngcc/\n\t* config/riscv/riscv.c (riscv_swap_instruction): New function\n\tto byteswap an SImode rtx containing an instruction.\n\t(riscv_trampoline_init): Byteswap the generated instructions\n\twhen needed.", "tree": {"sha": "e07d7eff08d2d0d50b0b636ddab6306fcfe34351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e07d7eff08d2d0d50b0b636ddab6306fcfe34351"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28bddf0e322a5fdc33d3dcc3b9928d559ad7f124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28bddf0e322a5fdc33d3dcc3b9928d559ad7f124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28bddf0e322a5fdc33d3dcc3b9928d559ad7f124", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28bddf0e322a5fdc33d3dcc3b9928d559ad7f124/comments", "author": {"login": "zeldin", "id": 411296, "node_id": "MDQ6VXNlcjQxMTI5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/411296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zeldin", "html_url": "https://github.com/zeldin", "followers_url": "https://api.github.com/users/zeldin/followers", "following_url": "https://api.github.com/users/zeldin/following{/other_user}", "gists_url": "https://api.github.com/users/zeldin/gists{/gist_id}", "starred_url": "https://api.github.com/users/zeldin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zeldin/subscriptions", "organizations_url": "https://api.github.com/users/zeldin/orgs", "repos_url": "https://api.github.com/users/zeldin/repos", "events_url": "https://api.github.com/users/zeldin/events{/privacy}", "received_events_url": "https://api.github.com/users/zeldin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1af1326d269b1d8efb696a50c9e88d0ab6ec45e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1af1326d269b1d8efb696a50c9e88d0ab6ec45e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1af1326d269b1d8efb696a50c9e88d0ab6ec45e"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "fe48db7a27988704b6ce7f2198eae7c17e4aa55b", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28bddf0e322a5fdc33d3dcc3b9928d559ad7f124/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28bddf0e322a5fdc33d3dcc3b9928d559ad7f124/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=28bddf0e322a5fdc33d3dcc3b9928d559ad7f124", "patch": "@@ -1073,6 +1073,15 @@ riscv_force_binary (machine_mode mode, enum rtx_code code, rtx x, rtx y)\n   return riscv_emit_binary (code, gen_reg_rtx (mode), x, y);\n }\n \n+static rtx\n+riscv_swap_instruction (rtx inst)\n+{\n+  gcc_assert (GET_MODE (inst) == SImode);\n+  if (BYTES_BIG_ENDIAN)\n+    inst = expand_unop (SImode, bswap_optab, inst, gen_reg_rtx (SImode), 1);\n+  return inst;\n+}\n+\n /* Copy VALUE to a register and return that register.  If new pseudos\n    are allowed, copy it into a new register, otherwise use DEST.  */\n \n@@ -4955,7 +4964,7 @@ riscv_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n \t\t\t\t\t     gen_int_mode (lui_hi_chain_code, SImode));\n \n       mem = adjust_address (m_tramp, SImode, 0);\n-      riscv_emit_move (mem, lui_hi_chain);\n+      riscv_emit_move (mem, riscv_swap_instruction (lui_hi_chain));\n \n       /* Gen lui t0, hi(func).  */\n       rtx hi_func = riscv_force_binary (SImode, PLUS, target_function,\n@@ -4967,7 +4976,7 @@ riscv_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n \t\t\t\t\t    gen_int_mode (lui_hi_func_code, SImode));\n \n       mem = adjust_address (m_tramp, SImode, 1 * GET_MODE_SIZE (SImode));\n-      riscv_emit_move (mem, lui_hi_func);\n+      riscv_emit_move (mem, riscv_swap_instruction (lui_hi_func));\n \n       /* Gen addi t2, t2, lo(chain).  */\n       rtx lo_chain = riscv_force_binary (SImode, AND, chain_value,\n@@ -4982,7 +4991,7 @@ riscv_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n \t\t\t\t\t      force_reg (SImode, GEN_INT (lo_chain_code)));\n \n       mem = adjust_address (m_tramp, SImode, 2 * GET_MODE_SIZE (SImode));\n-      riscv_emit_move (mem, addi_lo_chain);\n+      riscv_emit_move (mem, riscv_swap_instruction (addi_lo_chain));\n \n       /* Gen jr t0, lo(func).  */\n       rtx lo_func = riscv_force_binary (SImode, AND, target_function,\n@@ -4995,7 +5004,7 @@ riscv_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n \t\t\t\t\t   force_reg (SImode, GEN_INT (lo_func_code)));\n \n       mem = adjust_address (m_tramp, SImode, 3 * GET_MODE_SIZE (SImode));\n-      riscv_emit_move (mem, jr_lo_func);\n+      riscv_emit_move (mem, riscv_swap_instruction (jr_lo_func));\n     }\n   else\n     {\n@@ -5021,6 +5030,8 @@ riscv_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n       /* Copy the trampoline code.  */\n       for (i = 0; i < ARRAY_SIZE (trampoline); i++)\n \t{\n+\t  if (BYTES_BIG_ENDIAN)\n+\t    trampoline[i] = __builtin_bswap32(trampoline[i]);\n \t  mem = adjust_address (m_tramp, SImode, i * GET_MODE_SIZE (SImode));\n \t  riscv_emit_move (mem, gen_int_mode (trampoline[i], SImode));\n \t}"}]}