{"sha": "387dc8a86b8686015e626c37896c59215b4777c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3ZGM4YTg2Yjg2ODYwMTVlNjI2YzM3ODk2YzU5MjE1YjQ3NzdjNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-09T04:57:26Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-09T04:57:26Z"}, "message": "(call matchers): Use call_insn_operand.\n\n(call expanders): If address uses a virtual reg or arg pointer reg,\ncopy it.\n\nFrom-SVN: r4394", "tree": {"sha": "ae6c6c9d2eae4182652de1d95587d213aff3da32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae6c6c9d2eae4182652de1d95587d213aff3da32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/387dc8a86b8686015e626c37896c59215b4777c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387dc8a86b8686015e626c37896c59215b4777c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/387dc8a86b8686015e626c37896c59215b4777c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/387dc8a86b8686015e626c37896c59215b4777c4/comments", "author": null, "committer": null, "parents": [{"sha": "fee2770d39a87ebacc4537e7536e8a05f6f54f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee2770d39a87ebacc4537e7536e8a05f6f54f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee2770d39a87ebacc4537e7536e8a05f6f54f7b"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "37e9b6d1b046ce0835e77167252ff860eaf127bc", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/387dc8a86b8686015e626c37896c59215b4777c4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/387dc8a86b8686015e626c37896c59215b4777c4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=387dc8a86b8686015e626c37896c59215b4777c4", "patch": "@@ -3949,10 +3949,15 @@\n   addr = XEXP (operands[0], 0);\n   if (GET_CODE (addr) != REG && HALF_PIC_P () && !CONSTANT_ADDRESS_P (addr))\n     XEXP (operands[0], 0) = force_reg (Pmode, addr);\n+\n+  if (! call_insn_operand (operands[0], QImode))\n+    operands[0]\n+      = change_address (operands[0], VOIDmode,\n+\t\t\tcopy_to_mode_reg (Pmode, XEXP (operands[0], 0)));\n }\")\n \n (define_insn \"\"\n-  [(call (match_operand:QI 0 \"indirect_operand\" \"m\")\n+  [(call (match_operand:QI 0 \"call_insn_operand\" \"m\")\n \t (match_operand:SI 1 \"general_operand\" \"g\"))\n    (set (reg:SI 7) (plus:SI (reg:SI 7)\n \t\t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")))]\n@@ -3993,10 +3998,15 @@\n   addr = XEXP (operands[0], 0);\n   if (GET_CODE (addr) != REG && HALF_PIC_P () && !CONSTANT_ADDRESS_P (addr))\n     XEXP (operands[0], 0) = force_reg (Pmode, addr);\n+\n+  if (! call_insn_operand (operands[0], QImode))\n+    operands[0]\n+      = change_address (operands[0], VOIDmode,\n+\t\t\tcopy_to_mode_reg (Pmode, XEXP (operands[0], 0)));\n }\")\n \n (define_insn \"\"\n-  [(call (match_operand:QI 0 \"indirect_operand\" \"m\")\n+  [(call (match_operand:QI 0 \"call_insn_operand\" \"m\")\n \t (match_operand:SI 1 \"general_operand\" \"g\"))]\n   ;; Operand 1 not used on the i386.\n   \"\"\n@@ -4041,11 +4051,16 @@\n   addr = XEXP (operands[1], 0);\n   if (GET_CODE (addr) != REG && HALF_PIC_P () && !CONSTANT_ADDRESS_P (addr))\n     XEXP (operands[1], 0) = force_reg (Pmode, addr);\n+\n+  if (! call_insn_operand (operands[1], QImode))\n+    operands[1]\n+      = change_address (operands[1], VOIDmode,\n+\t\t\tcopy_to_mode_reg (Pmode, XEXP (operands[1], 0)));\n }\")\n \n (define_insn \"\"\n   [(set (match_operand 0 \"\" \"=rf\")\n-\t(call (match_operand:QI 1 \"indirect_operand\" \"m\")\n+\t(call (match_operand:QI 1 \"call_insn_operand\" \"m\")\n \t      (match_operand:SI 2 \"general_operand\" \"g\")))\n    (set (reg:SI 7) (plus:SI (reg:SI 7)\n \t\t\t    (match_operand:SI 4 \"immediate_operand\" \"i\")))]\n@@ -4090,11 +4105,16 @@\n   addr = XEXP (operands[1], 0);\n   if (GET_CODE (addr) != REG && HALF_PIC_P () && !CONSTANT_ADDRESS_P (addr))\n     XEXP (operands[1], 0) = force_reg (Pmode, addr);\n+\n+  if (! call_insn_operand (operands[1], QImode))\n+    operands[1]\n+      = change_address (operands[1], VOIDmode,\n+\t\t\tcopy_to_mode_reg (Pmode, XEXP (operands[1], 0)));\n }\")\n \n (define_insn \"\"\n   [(set (match_operand 0 \"\" \"=rf\")\n-\t(call (match_operand:QI 1 \"indirect_operand\" \"m\")\n+\t(call (match_operand:QI 1 \"call_insn_operand\" \"m\")\n \t      (match_operand:SI 2 \"general_operand\" \"g\")))]\n   ;; Operand 2 not used on the i386.\n   \"\"\n@@ -4139,10 +4159,14 @@\n     XEXP (operands[0], 0) = force_reg (Pmode, addr);\n \n   operands[1] = change_address (operands[1], DImode, XEXP (operands[1], 0));\n+  if (! call_insn_operand (operands[1], QImode))\n+    operands[1]\n+      = change_address (operands[1], VOIDmode,\n+\t\t\tcopy_to_mode_reg (Pmode, XEXP (operands[1], 0)));\n }\")\n \n (define_insn \"\"\n-  [(call (match_operand:QI 0 \"indirect_operand\" \"m\")\n+  [(call (match_operand:QI 0 \"call_insn_operand\" \"m\")\n \t (const_int 0))\n    (match_operand:DI 1 \"memory_operand\" \"o\")\n    (match_operand 2 \"\" \"\")]"}]}