{"sha": "f652d14b64c65ad2ac570babcfa4c7b8791896ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY1MmQxNGI2NGM2NWFkMmFjNTcwYmFiY2ZhNGM3Yjg3OTE4OTZlZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-04-06T17:05:08Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-04-06T17:05:08Z"}, "message": "cse.c, [...]: Fix comment typos.\n\n\t* cse.c, tree-flow-inline.h, tree-flow.h, tree-ssa-operands.c,\n\ttree-ssa-sink.c, tree.h, config/bfin/bfin.c,\n\tconfig/bfin/bfin.h: Fix comment typos.\n\nFrom-SVN: r97730", "tree": {"sha": "39414506f542e9bece675cd14c48ee0ca335e750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39414506f542e9bece675cd14c48ee0ca335e750"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f652d14b64c65ad2ac570babcfa4c7b8791896ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f652d14b64c65ad2ac570babcfa4c7b8791896ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f652d14b64c65ad2ac570babcfa4c7b8791896ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f652d14b64c65ad2ac570babcfa4c7b8791896ee/comments", "author": null, "committer": null, "parents": [{"sha": "8270a217758cf89cefd77eeeaa94bcb00931699b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8270a217758cf89cefd77eeeaa94bcb00931699b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8270a217758cf89cefd77eeeaa94bcb00931699b"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "7482326151e2a72b0f4077cf8f15b3517e499fb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f652d14b64c65ad2ac570babcfa4c7b8791896ee", "patch": "@@ -1,3 +1,9 @@\n+2005-04-06  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cse.c, tree-flow-inline.h, tree-flow.h, tree-ssa-operands.c,\n+\ttree-ssa-sink.c, tree.h, config/bfin/bfin.c,\n+\tconfig/bfin/bfin.h: Fix comment typos.\n+\n 2005-04-06  Ranjit Mathew  <rmathew@hotmail.com>\n \n \t* doc/install.texi: Update the URL for Jacks."}, {"sha": "366c47d80ce93a29f0b5906f0a2c2330db7965b5", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=f652d14b64c65ad2ac570babcfa4c7b8791896ee", "patch": "@@ -1,4 +1,4 @@\n-/* The Blackfin code generation auxilary output file.\n+/* The Blackfin code generation auxiliary output file.\n    Copyright (C) 2005  Free Software Foundation, Inc.\n    Contributed by Analog Devices.\n \n@@ -320,7 +320,7 @@ setup_incoming_varargs (CUMULATIVE_ARGS *cum,\n \n   /* The move for named arguments will be generated automatically by the\n      compiler.  We need to generate the move rtx for the unnamed arguments\n-     if they are in the first 3 words.  We assume atleast 1 named argument\n+     if they are in the first 3 words.  We assume at least 1 named argument\n      exists, so we never generate [ARGP] = R0 here.  */\n \n   for (i = cum->words + 1; i < max_arg_registers; i++)"}, {"sha": "f5304e0153b4febcb3d90009b895faf6519d41a2", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=f652d14b64c65ad2ac570babcfa4c7b8791896ee", "patch": "@@ -345,7 +345,7 @@ enum reg_class\n   BREGS,\n   LREGS,\n   MREGS,\n-  CIRCREGS, /* Circular buffering registers, Ix, Bx, Lx together form. See Automatic Circlur Buffering */\n+  CIRCREGS, /* Circular buffering registers, Ix, Bx, Lx together form.  See Automatic Circular Buffering.  */\n   DAGREGS,\n   EVEN_AREGS,\n   ODD_AREGS,"}, {"sha": "b2a858d456e58660494ed366ad6369f4e2d9d80d", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=f652d14b64c65ad2ac570babcfa4c7b8791896ee", "patch": "@@ -3808,7 +3808,7 @@ fold_rtx (rtx x, rtx insn)\n \n \t    /* It's not safe to substitute the operand of a conversion\n \t       operator with a constant, as the conversion's identity\n-\t       depends upon the mode of it's operand.  This optimization\n+\t       depends upon the mode of its operand.  This optimization\n \t       is handled by the call to simplify_unary_operation.  */\n \t    if (GET_RTX_CLASS (code) == RTX_UNARY\n \t\t&& GET_MODE (replacements[j]) != mode_arg0"}, {"sha": "169dce2f402428602a9acbb2a8b60651894532e5", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=f652d14b64c65ad2ac570babcfa4c7b8791896ee", "patch": "@@ -347,12 +347,12 @@ next_safe_imm_use (imm_use_iterator *imm)\n   use_operand_p old;\n \n   old = imm->imm_use;\n-  /* If the next node following the iter_node is still the one refered to by\n-     imm_use, then the list hasnt changed, go to the next node.  */\n+  /* If the next node following the iter_node is still the one referred to by\n+     imm_use, then the list hasn't changed, go to the next node.  */\n   if (imm->iter_node.next == imm->imm_use)\n     {\n       ptr = &(imm->iter_node);\n-      /* Remove iternode fromn the list.  */\n+      /* Remove iternode from the list.  */\n       delink_imm_use (ptr);\n       imm->imm_use = imm->imm_use->next;\n       if (! end_safe_imm_use_p (imm))\n@@ -369,7 +369,7 @@ next_safe_imm_use (imm_use_iterator *imm)\n   else\n     {\n       /* If the 'next' value after the iterator isn't the same as it was, then\n-\t a node has been deleted, so we sinply proceed to the node following \n+\t a node has been deleted, so we simply proceed to the node following \n \t where the iterator is in the list.  */\n       imm->imm_use = imm->iter_node.next;\n       if (end_safe_imm_use_p (imm))\n@@ -382,7 +382,7 @@ next_safe_imm_use (imm_use_iterator *imm)\n   return imm->imm_use;\n }\n \n-/* Return true is IMM has reached the end of the immeidate use list.  */\n+/* Return true is IMM has reached the end of the immediate use list.  */\n static inline bool\n end_readonly_imm_use_p (imm_use_iterator *imm)\n {\n@@ -447,7 +447,7 @@ has_single_use (tree var)\n }\n \n /* If VAR has only a single immediate use, return true, and set USE_P and STMT\n-   to the use pointer and stmt of occurence.  */\n+   to the use pointer and stmt of occurrence.  */\n static inline bool\n single_imm_use (tree var, use_operand_p *use_p, tree *stmt)\n {\n@@ -684,7 +684,7 @@ phi_arg_index_from_use (use_operand_p use)\n   int index;\n   tree phi;\n \n-  /* Since the use is the first thing in a PHI arguemnt element, we can\n+  /* Since the use is the first thing in a PHI argument element, we can\n      calculate its index based on casting it to an argument, and performing\n      pointer arithmetic.  */\n \n@@ -697,7 +697,7 @@ phi_arg_index_from_use (use_operand_p use)\n \n #ifdef ENABLE_CHECKING\n   /* Make sure the calculation doesn't have any leftover bytes.  If it does, \n-     then imm_use is liekly not the first element in phi_arg_d.  */\n+     then imm_use is likely not the first element in phi_arg_d.  */\n   gcc_assert (\n \t  (((char *)element - (char *)root) % sizeof (struct phi_arg_d)) == 0);\n   gcc_assert (index >= 0 && index < PHI_ARG_CAPACITY (phi));"}, {"sha": "b82523dfdd71bd55c19af77b8f12b4828037ef2d", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=f652d14b64c65ad2ac570babcfa4c7b8791896ee", "patch": "@@ -243,7 +243,7 @@ typedef struct immediate_use_iterator_d\n } imm_use_iterator;\n \n \n-/* Use this iterator when simply looking at stmts. Adding, deleteing or\n+/* Use this iterator when simply looking at stmts.  Adding, deleting or\n    modifying stmts will cause this iterator to malfunction.  */\n \n #define FOR_EACH_IMM_USE_FAST(DEST, ITER, SSAVAR)\t\t\t\\"}, {"sha": "a967f98f6b0a7394927d052580fae7a9924fda49", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=f652d14b64c65ad2ac570babcfa4c7b8791896ee", "patch": "@@ -993,7 +993,7 @@ append_v_must_def (tree var)\n \n \n /* Parse STMT looking for operands.  OLD_OPS is the original stmt operand\n-   cache for STMT, if it exested before.  When fniished, the various build_*\n+   cache for STMT, if it existed before.  When finished, the various build_*\n    operand vectors will have potential operands. in them.  */\n                                                                                 \n static void"}, {"sha": "c8785de9e17d44f6024d05adb20cedb54d827369", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=f652d14b64c65ad2ac570babcfa4c7b8791896ee", "patch": "@@ -79,7 +79,7 @@ static struct\n } sink_stats;\n \n \n-/* Given a PHI, and one of it's arguments (DEF), find the edge for\n+/* Given a PHI, and one of its arguments (DEF), find the edge for\n    that argument and return it.  If the argument occurs twice in the PHI node,\n    we return NULL.  */\n "}, {"sha": "093f5c3d5662245c3e374c77f6713a037b66006b", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f652d14b64c65ad2ac570babcfa4c7b8791896ee/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f652d14b64c65ad2ac570babcfa4c7b8791896ee", "patch": "@@ -1350,7 +1350,7 @@ struct ptr_info_def;\n \n \n \n-/* Immediate use linking structure. THis structure is used for maintaining\n+/* Immediate use linking structure.  This structure is used for maintaining\n    a doubly linked list of uses of an SSA_NAME.  */\n typedef struct ssa_imm_use_d GTY(())\n {\n@@ -1396,7 +1396,7 @@ struct tree_ssa_name GTY(())\n    you wish to access the use or def fields of a PHI_NODE in the SSA \n    optimizers, use the accessor macros found in tree-ssa-operands.h.  \n    These two macros are to be used only by those accessor macros, and other \n-   select places where we *absolutly* must take the address of the tree.  */\n+   select places where we *absolutely* must take the address of the tree.  */\n \n #define PHI_RESULT_TREE(NODE)\t\tPHI_NODE_CHECK (NODE)->phi.result\n #define PHI_ARG_DEF_TREE(NODE, I)\tPHI_NODE_ELT_CHECK (NODE, I).def"}]}