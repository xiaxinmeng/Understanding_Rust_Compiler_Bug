{"sha": "11ac38b22e3f3de50a968364c86c1430e56627ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFhYzM4YjIyZTNmM2RlNTBhOTY4MzY0Yzg2YzE0MzBlNTY2MjdhYw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-06-23T21:19:00Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-06-23T21:19:00Z"}, "message": "rs6000.c (rs6000_use_dfa_pipeline_interface): Delete.\n\n\t* config/rs6000/rs6000.c (rs6000_use_dfa_pipeline_interface): Delete.\n\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Redefine a hook_int_void_1.\n\t(insvdi_rshift_rlwimi_p): New function.\n\t* config/rs6000/rs6000.md (insvdi_internal2/3): New patterns.\n\t(extendsfdf2): Convert to define_insn_and_split.\n\t* config/rs6000/rs6000-protos.h (insvdi_rshift_rlwimi_p): Prototype.\n\nFrom-SVN: r83568", "tree": {"sha": "e4165f46ff2296ff2bba40a9df485417fdce2534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4165f46ff2296ff2bba40a9df485417fdce2534"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11ac38b22e3f3de50a968364c86c1430e56627ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11ac38b22e3f3de50a968364c86c1430e56627ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11ac38b22e3f3de50a968364c86c1430e56627ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11ac38b22e3f3de50a968364c86c1430e56627ac/comments", "author": null, "committer": null, "parents": [{"sha": "de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de46b2fe0dc554f71b61f0bcc8d6afdde2292a6c"}], "stats": {"total": 99, "additions": 82, "deletions": 17}, "files": [{"sha": "14598abb7a1ca2782360085f42a256ab7eb60581", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ac38b22e3f3de50a968364c86c1430e56627ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ac38b22e3f3de50a968364c86c1430e56627ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11ac38b22e3f3de50a968364c86c1430e56627ac", "patch": "@@ -1,3 +1,12 @@\n+2004-06-23  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_use_dfa_pipeline_interface): Delete.\n+\t(TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE): Redefine a hook_int_void_1.\n+\t(insvdi_rshift_rlwimi_p): New function.\n+\t* config/rs6000/rs6000.md (insvdi_internal2/3): New patterns.\n+\t(extendsfdf2): Convert to define_insn_and_split.\n+\t* config/rs6000/rs6000-protos.h (insvdi_rshift_rlwimi_p): Prototype.\n+\n 2004-06-23  Andrew Pinski  <apinski@apple.com>\n \n \t* c-typeck.c (composite_type, <case ARRAY_TYPE>): Abort if we have"}, {"sha": "50f47664084cbc0f083218019f83833fa5e62550", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ac38b22e3f3de50a968364c86c1430e56627ac/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ac38b22e3f3de50a968364c86c1430e56627ac/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=11ac38b22e3f3de50a968364c86c1430e56627ac", "patch": "@@ -101,6 +101,7 @@ extern int includes_lshift_p (rtx, rtx);\n extern int includes_rshift_p (rtx, rtx);\n extern int includes_rldic_lshift_p (rtx, rtx);\n extern int includes_rldicr_lshift_p (rtx, rtx);\n+extern int insvdi_rshift_rlwimi_p (rtx, rtx, rtx);\n extern int registers_ok_for_quad_peep (rtx, rtx);\n extern int mems_ok_for_quad_peep (rtx, rtx);\n extern bool gpr_or_gpr_p (rtx, rtx);"}, {"sha": "ac99a17d1a8b171c6c32b644e376e289fc997f5c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ac38b22e3f3de50a968364c86c1430e56627ac/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ac38b22e3f3de50a968364c86c1430e56627ac/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=11ac38b22e3f3de50a968364c86c1430e56627ac", "patch": "@@ -353,7 +353,6 @@ static void rs6000_xcoff_file_end (void);\n #if TARGET_MACHO\n static bool rs6000_binds_local_p (tree);\n #endif\n-static int rs6000_use_dfa_pipeline_interface (void);\n static int rs6000_variable_issue (FILE *, int, rtx, int);\n static bool rs6000_rtx_costs (rtx, int, int, int *);\n static int rs6000_adjust_cost (rtx, rtx, rtx, int);\n@@ -570,7 +569,7 @@ static const char alt_reg_names[][8] =\n #define TARGET_ASM_FUNCTION_EPILOGUE rs6000_output_function_epilogue\n \n #undef  TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE \n-#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE rs6000_use_dfa_pipeline_interface\n+#define TARGET_SCHED_USE_DFA_PIPELINE_INTERFACE hook_int_void_1\n #undef  TARGET_SCHED_VARIABLE_ISSUE\n #define TARGET_SCHED_VARIABLE_ISSUE rs6000_variable_issue\n \n@@ -8825,6 +8824,26 @@ includes_rldicr_lshift_p (rtx shiftop, rtx andop)\n     return 0;\n }\n \n+/* Return 1 if operands will generate a valid arguments to rlwimi\n+instruction for insert with right shift in 64-bit mode.  The mask may\n+not start on the first bit or stop on the last bit because wrap-around\n+effects of instruction do not correspond to semantics of RTL insn.  */\n+\n+int\n+insvdi_rshift_rlwimi_p (rtx sizeop, rtx startop, rtx shiftop)\n+{\n+  if (INTVAL (startop) < 64\n+      && INTVAL (startop) > 32\n+      && (INTVAL (sizeop) + INTVAL (startop) < 64)\n+      && (INTVAL (sizeop) + INTVAL (startop) > 33)\n+      && (INTVAL (sizeop) + INTVAL (startop) + INTVAL (shiftop) < 96)\n+      && (INTVAL (sizeop) + INTVAL (startop) + INTVAL (shiftop) >= 64)\n+      && (64 - (INTVAL (shiftop) & 63)) >= INTVAL (sizeop))\n+    return 1;\n+\n+  return 0;\n+}\n+\n /* Return 1 if REGNO (reg1) == REGNO (reg2) - 1 making them candidates\n    for lfq and stfq insns iff the registers are hard registers.   */\n \n@@ -14179,12 +14198,6 @@ output_function_profiler (FILE *file, int labelno)\n }\n \n \f\n-static int\n-rs6000_use_dfa_pipeline_interface (void)\n-{\n-  return 1;\n-}\n-\n /* Power4 load update and store update instructions are cracked into a\n    load or store and an integer insn which are executed in the same cycle.\n    Branches have their own dispatch slot which does not count against the"}, {"sha": "a5604dfdc50dbf294f90f7426adaf18c1a05f818", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 51, "deletions": 9, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ac38b22e3f3de50a968364c86c1430e56627ac/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ac38b22e3f3de50a968364c86c1430e56627ac/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=11ac38b22e3f3de50a968364c86c1430e56627ac", "patch": "@@ -3090,6 +3090,46 @@\n   return \\\"rldimi %0,%3,%H1,%H2\\\";\n }\")\n \n+(define_insn \"*insvdi_internal2\"\n+  [(set (zero_extract:DI (match_operand:DI 0 \"gpc_reg_operand\" \"+r\")\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n+\t(ashiftrt:DI (match_operand:DI 3 \"gpc_reg_operand\" \"r\")\n+\t\t     (match_operand:SI 4 \"const_int_operand\" \"i\")))]\n+  \"TARGET_POWERPC64\n+   && insvdi_rshift_rlwimi_p (operands[1], operands[2], operands[4])\"\n+  \"*\n+{\n+  int shift = INTVAL (operands[4]) & 63;\n+  int start = (INTVAL (operands[2]) & 63) - 32;\n+  int size = INTVAL (operands[1]) & 63;\n+\n+  operands[4] = GEN_INT (64 - shift - start - size);\n+  operands[2] = GEN_INT (start);\n+  operands[1] = GEN_INT (start + size - 1);\n+  return \\\"rlwimi %0,%3,%h4,%h2,%h1\\\";\n+}\")\n+\n+(define_insn \"*insvdi_internal3\"\n+  [(set (zero_extract:DI (match_operand:DI 0 \"gpc_reg_operand\" \"+r\")\n+\t\t\t (match_operand:SI 1 \"const_int_operand\" \"i\")\n+\t\t\t (match_operand:SI 2 \"const_int_operand\" \"i\"))\n+\t(lshiftrt:DI (match_operand:DI 3 \"gpc_reg_operand\" \"r\")\n+\t\t     (match_operand:SI 4 \"const_int_operand\" \"i\")))]\n+  \"TARGET_POWERPC64\n+   && insvdi_rshift_rlwimi_p (operands[1], operands[2], operands[4])\"\n+  \"*\n+{\n+  int shift = INTVAL (operands[4]) & 63;\n+  int start = (INTVAL (operands[2]) & 63) - 32;\n+  int size = INTVAL (operands[1]) & 63;\n+\n+  operands[4] = GEN_INT (64 - shift - start - size);\n+  operands[2] = GEN_INT (start);\n+  operands[1] = GEN_INT (start + size - 1);\n+  return \\\"rlwimi %0,%3,%h4,%h2,%h1\\\";\n+}\")\n+\n (define_expand \"extzv\"\n   [(set (match_operand 0 \"gpc_reg_operand\" \"\")\n \t(zero_extract (match_operand 1 \"gpc_reg_operand\" \"\")\n@@ -4411,17 +4451,19 @@\n ;; this case, we just lose precision that we would have otherwise gotten but\n ;; is not guaranteed.  Perhaps this should be tightened up at some point.\n \n-(define_insn \"extendsfdf2\"\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n-\t(float_extend:DF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n+(define_insn_and_split \"extendsfdf2\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f,?f\")\n+\t(float_extend:DF (match_operand:SF 1 \"gpc_reg_operand\" \"0,f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n-  \"*\n+  \"@\n+   #\n+   fmr %0,%1\"\n+  \"&& reload_completed && REGNO (operands[0]) == REGNO (operands[1])\"\n+  [(const_int 0)]\n {\n-  if (REGNO (operands[0]) == REGNO (operands[1]))\n-    return \\\"\\\";\n-  else\n-    return \\\"fmr %0,%1\\\";\n-}\"\n+  emit_note (NOTE_INSN_DELETED);\n+  DONE;\n+}\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"truncdfsf2\""}]}