{"sha": "0be7dcbbdb4a177a2e783294a99463f8884220b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJlN2RjYmJkYjRhMTc3YTJlNzgzMjk0YTk5NDYzZjg4ODQyMjBiMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T15:19:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T15:19:17Z"}, "message": "[multiple changes]\n\n2014-07-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnat_rm.texi: Minor doc fixes.\n\n2014-07-30  Robert Dewar  <dewar@adacore.com>\n\n\t* a-rbtgbo.adb, sem_ch13.adb: Minor reformatting.\n\n2014-07-30  Vincent Celier  <celier@adacore.com>\n\n\t* errutil.adb (Set_Msg_Text): Process tilde ('~'): no processing\n\tof error message.\n\t* prj-nmsc.adb (Locate_Directory): Use a tilde ('~') in the\n\tmessage to report that a directory cannot be created, to avoid\n\tprocessing of the directory path that may contains special\n\tinsertion characters.\n\nFrom-SVN: r213301", "tree": {"sha": "f9c18506a54883579f476056e8170bc36eb97a6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9c18506a54883579f476056e8170bc36eb97a6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0be7dcbbdb4a177a2e783294a99463f8884220b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be7dcbbdb4a177a2e783294a99463f8884220b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0be7dcbbdb4a177a2e783294a99463f8884220b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be7dcbbdb4a177a2e783294a99463f8884220b1/comments", "author": null, "committer": null, "parents": [{"sha": "a18e3d62790873a98c07b098647a7002a24a1690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a18e3d62790873a98c07b098647a7002a24a1690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a18e3d62790873a98c07b098647a7002a24a1690"}], "stats": {"total": 93, "additions": 53, "deletions": 40}, "files": [{"sha": "773cf44c266aa1653d0d004b063db5c856680eff", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be7dcbbdb4a177a2e783294a99463f8884220b1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be7dcbbdb4a177a2e783294a99463f8884220b1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0be7dcbbdb4a177a2e783294a99463f8884220b1", "patch": "@@ -1,3 +1,20 @@\n+2014-07-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnat_rm.texi: Minor doc fixes.\n+\n+2014-07-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-rbtgbo.adb, sem_ch13.adb: Minor reformatting.\n+\n+2014-07-30  Vincent Celier  <celier@adacore.com>\n+\n+\t* errutil.adb (Set_Msg_Text): Process tilde ('~'): no processing\n+\tof error message.\n+\t* prj-nmsc.adb (Locate_Directory): Use a tilde ('~') in the\n+\tmessage to report that a directory cannot be created, to avoid\n+\tprocessing of the directory path that may contains special\n+\tinsertion characters.\n+\n 2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n \n \t* a-crdlli.ads: Place declaration of Empty_List after full type\n@@ -17,7 +34,7 @@\n \n 2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n \n-\t* a-rbtgbo.adb: -rbtgbo.adb (Delete_Node_Sans_Free): If\n+\t* a-rbtgbo.adb (Delete_Node_Sans_Free): If\n \telement is not present in tree return rather than violating\n \tan assertion. Constraint_Error will be raised in the caller if\n \telement is not in the container."}, {"sha": "99a2edc2e36ce70eaba6882d0931d0f06edf0f38", "filename": "gcc/ada/a-rbtgbo.adb", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be7dcbbdb4a177a2e783294a99463f8884220b1/gcc%2Fada%2Fa-rbtgbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be7dcbbdb4a177a2e783294a99463f8884220b1/gcc%2Fada%2Fa-rbtgbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-rbtgbo.adb?ref=0be7dcbbdb4a177a2e783294a99463f8884220b1", "patch": "@@ -27,8 +27,9 @@\n -- This unit was originally developed by Matthew J Heaney.                  --\n ------------------------------------------------------------------------------\n \n---  The references below to \"CLR\" refer to the following book, from which\n---  several of the algorithms here were adapted:\n+--  The references in this file to \"CLR\" refer to the following book, from\n+--  which several of the algorithms here were adapted:\n+\n --     Introduction to Algorithms\n --     by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest\n --     Publisher: The MIT Press (June 18, 1990)\n@@ -89,9 +90,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n \n    begin\n       X := Node;\n-      while X /= Tree.Root\n-        and then Color (N (X)) = Black\n-      loop\n+      while X /= Tree.Root and then Color (N (X)) = Black loop\n          if X = Left (N (Parent (N (X)))) then\n             W :=  Right (N (Parent (N (X))));\n \n@@ -103,7 +102,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n             end if;\n \n             if (Left (N (W))  = 0 or else Color (N (Left (N (W)))) = Black)\n-              and then\n+                  and then\n                (Right (N (W)) = 0 or else Color (N (Right (N (W)))) = Black)\n             then\n                Set_Color (N (W), Red);\n@@ -147,7 +146,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n             end if;\n \n             if (Left (N (W))  = 0 or else Color (N (Left (N (W)))) = Black)\n-                 and then\n+                  and then\n                (Right (N (W)) = 0 or else Color (N (Right (N (W)))) = Black)\n             then\n                Set_Color (N (W), Red);\n@@ -205,7 +204,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n            \"attempt to tamper with cursors (container is busy)\";\n       end if;\n \n-      --  If node is not present, return. Exception will be raised in caller.\n+      --  If node is not present, return (exception will be raised in caller)\n \n       if Z = 0 then\n          return;\n@@ -218,8 +217,8 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n       pragma Assert (Parent (N (Tree.Root)) = 0);\n \n       pragma Assert ((Tree.Length > 1)\n-                        or else (Tree.First = Tree.Last\n-                                   and then Tree.First = Tree.Root));\n+                       or else (Tree.First = Tree.Last\n+                                 and then Tree.First = Tree.Root));\n \n       pragma Assert ((Left (N (Node)) = 0)\n                         or else (Parent (N (Left (N (Node)))) = Node));\n@@ -826,6 +825,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n    -----------------\n \n    procedure Left_Rotate (Tree : in out Tree_Type'Class; X : Count_Type) is\n+\n       --  CLR p. 266\n \n       N : Nodes_Type renames Tree.Nodes;\n@@ -929,9 +929,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n          Y : Count_Type := Parent (Tree.Nodes (Node));\n \n       begin\n-         while Y /= 0\n-           and then X = Right (Tree.Nodes (Y))\n-         loop\n+         while Y /= 0 and then X = Right (Tree.Nodes (Y)) loop\n             X := Y;\n             Y := Parent (Tree.Nodes (Y));\n          end loop;\n@@ -962,9 +960,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n          Y : Count_Type := Parent (Tree.Nodes (Node));\n \n       begin\n-         while Y /= 0\n-           and then X = Left (Tree.Nodes (Y))\n-         loop\n+         while Y /= 0 and then X = Left (Tree.Nodes (Y)) loop\n             X := Y;\n             Y := Parent (Tree.Nodes (Y));\n          end loop;\n@@ -1135,28 +1131,20 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n       end if;\n \n       if Tree.Length = 2 then\n-         if Tree.First /= Tree.Root\n-           and then Tree.Last /= Tree.Root\n-         then\n+         if Tree.First /= Tree.Root and then Tree.Last /= Tree.Root then\n             return False;\n          end if;\n \n-         if Tree.First /= Index\n-           and then Tree.Last /= Index\n-         then\n+         if Tree.First /= Index and then Tree.Last /= Index then\n             return False;\n          end if;\n       end if;\n \n-      if Left (Node) /= 0\n-        and then Parent (Nodes (Left (Node))) /= Index\n-      then\n+      if Left (Node) /= 0 and then Parent (Nodes (Left (Node))) /= Index then\n          return False;\n       end if;\n \n-      if Right (Node) /= 0\n-        and then Parent (Nodes (Right (Node))) /= Index\n-      then\n+      if Right (Node) /= 0 and then Parent (Nodes (Right (Node))) /= Index then\n          return False;\n       end if;\n "}, {"sha": "b6d6b92b015a38659a4e3ddd2372ecd2bcc704e7", "filename": "gcc/ada/errutil.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be7dcbbdb4a177a2e783294a99463f8884220b1/gcc%2Fada%2Ferrutil.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be7dcbbdb4a177a2e783294a99463f8884220b1/gcc%2Fada%2Ferrutil.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrutil.adb?ref=0be7dcbbdb4a177a2e783294a99463f8884220b1", "patch": "@@ -772,6 +772,15 @@ package body Errutil is\n             P := P - 1;\n             Set_Msg_Insertion_Reserved_Word (Text, P);\n \n+         --  Tilde: just remove '~' and do not modify the message further\n+\n+         --  This is peculiar, incompatible with errout, and not documented ???\n+\n+         elsif C = '~' then\n+            Set_Msg_Str\n+              (Text (Text'First .. P - 2) & Text (P .. Text'Last));\n+            exit;\n+\n          --  Normal character with no special treatment\n \n          else"}, {"sha": "c8d544a337e959ff7f143f584ef38ffd39908927", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be7dcbbdb4a177a2e783294a99463f8884220b1/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be7dcbbdb4a177a2e783294a99463f8884220b1/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=0be7dcbbdb4a177a2e783294a99463f8884220b1", "patch": "@@ -1566,12 +1566,12 @@ useful when the pragma or aspect argument references subprograms\n in a with'ed package which is replaced by a dummy package\n for the final build.\n \n-The implementation defined policy @code{Assertions} applies to all\n+The implementation defined assertion kind @code{Assertions} applies to all\n assertion kinds. The form with no assertion kind given implies this\n choice, so it applies to all assertion kinds (RM defined, and\n implementation defined).\n \n-The implementation defined policy @code{Statement_Assertions}\n+The implementation defined assertion kind @code{Statement_Assertions}\n applies to @code{Assert}, @code{Assert_And_Cut},\n @code{Assume}, @code{Loop_Invariant}, and @code{Loop_Variant}.\n \n@@ -11111,16 +11111,16 @@ type @code{Character}).\n forbidden in SPARK 2005 are not present. Error messages related to\n SPARK restriction have the form:\n \n+@smallexample\n+violation of restriction \"SPARK_05\" at <source-location>\n+ <error message>\n+@end smallexample\n+\n @findex SPARK\n The restriction @code{SPARK} is recognized as a\n synonym for @code{SPARK_05}. This is retained for historical\n compatibility purposes (and an unconditional warning will be generated\n-for its use, advising replacement by @code{SPARK}.\n-\n-@smallexample\n-violation of restriction \"SPARK\" at <file>\n- <error message>\n-@end smallexample\n+for its use, advising replacement by @code{SPARK}).\n \n This is not a replacement for the semantic checks performed by the\n SPARK Examiner tool, as the compiler currently only deals with code,"}, {"sha": "9bc7e1dea996f7549e0443b005b0e7c5f47b243a", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be7dcbbdb4a177a2e783294a99463f8884220b1/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be7dcbbdb4a177a2e783294a99463f8884220b1/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=0be7dcbbdb4a177a2e783294a99463f8884220b1", "patch": "@@ -6214,7 +6214,7 @@ package body Prj.Nmsc is\n                      when Use_Error =>\n                         Error_Msg\n                           (Data.Flags,\n-                           \"could not create \" & Create &\n+                           \"~could not create \" & Create &\n                            \" directory \" & Full_Path_Name.all,\n                            Location, Project);\n                   end;"}, {"sha": "5a5afa5b2e8e0cf7e9d4203410ffc9fba6c34fbb", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be7dcbbdb4a177a2e783294a99463f8884220b1/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be7dcbbdb4a177a2e783294a99463f8884220b1/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=0be7dcbbdb4a177a2e783294a99463f8884220b1", "patch": "@@ -2633,8 +2633,7 @@ package body Sem_Ch13 is\n \n                when Aspect_Default_Component_Value =>\n                   if not (Is_Array_Type (E)\n-                            and then\n-                          Is_Scalar_Type (Component_Type (E)))\n+                            and then Is_Scalar_Type (Component_Type (E)))\n                   then\n                      Error_Msg_N (\"aspect Default_Component_Value can only \"\n                        & \"apply to an array of scalar components\", N);"}]}