{"sha": "8d61e55ee59689c4b82890bafa1940718db77c9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ2MWU1NWVlNTk2ODljNGI4Mjg5MGJhZmExOTQwNzE4ZGI3N2M5ZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-10-10T20:46:58Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-10-10T20:46:58Z"}, "message": "genmodes.c, [...]: New files.\n\n\t* genmodes.c, mode-classes.def: New files.\n\t* machmode.def: Rewritten to genmodes.c interface.\n\t* Makefile.in (extra_modes_file): New substitution variable.\n\t(MACHMODE_H): No longer includes machmode.def or\n\t@extra_modes_file@; instead, mode-classes.def and insn-modes.h.\n\t(BUILD_RTL): Add $(BUILD_PREFIX)insn-modes.o.\n\t(OBJS-common): Add insn-modes.o.\n\t(STAGESTUFF): Add insn-modes.c, insn-modes.h, s-modes, and\n\tgenmodes$(build_exeext).\n\t(insn-modes.o, insn-modes.c, insn-modes.h, s-modes, genmodes.o,\n\tgenmodes$(build_exeext), $(BUILD_PREFIX_1)insn-modes.o): New targets.\n\t(s-genrtl): Don't depend on $(RTL_BASE_H).\n\t(gengenrtl.o): Don't depend on coretypes.h, $(GTM_H), real.h,\n\tor $(RTL_BASE_H); just rtl.def.\n\t* gengenrtl.c: Don't include coretypes.h, tm.h, rtl.h, or\n\treal.h.  Give fake definition of CONST_DOUBLE_FORMAT and\n\tsubstitute definition of NUM_RTX_CODE.  Add casts to avoid\n\twarnings.\n\t* machmode.h: Include insn-modes.h, not machmode.def.  Include\n\tmode-classes.def to define enum mode_class.  Tweak definitions\n\tof GET_MODE_CLASS, GET_MODE_SIZE, GET_MODE_BITSIZE, GET_MODE_MASK,\n\tGET_MODE_INNER, GET_MODE_WIDER_MODE, GET_CLASS_NARROWEST_MODE.\n\t(inner_mode_array): Renamed mode_inner.\n\t(mode_base_align): New.\n\t* rtl.c (mode_name, mode_class, mode_bitsize, mode_size,\n\tmode_unit_size, mode_wider_mode, mode_mask_array,\n\tinner_mode_array, class_narrowest_mode): Delete definitions.\n\t* stor-layout.c (get_mode_alignment): Use mode_base_align.\n\t* real.h: Use MIN_MODE_FLOAT and MAX_MODE_FLOAT, not QFmode\n\tand TFmode, in real_format_for_mode and REAL_MODE_FORMAT.\n\n\t* config/ip2k/ip2k.h, config/iq2000/iq2000.h:\n\tNo need to define BITS_PER_UNIT.\n\n\n\t* stor-layout.c (compute_record_mode): Don't force BLKmode if\n\tfield is zero-length BLKmode.\n\t* expr.c (expand_expr, case COMPONENT_REF): Handle case of BLKmode\n\tzero-size references.\n\n\t* combine.c (distribute_links): Properly test for REG being set.\n\nFrom-SVN: r72314", "tree": {"sha": "0e6f7d4c42057892dc01b5d96e0beb56f68cb577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e6f7d4c42057892dc01b5d96e0beb56f68cb577"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d61e55ee59689c4b82890bafa1940718db77c9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d61e55ee59689c4b82890bafa1940718db77c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d61e55ee59689c4b82890bafa1940718db77c9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d61e55ee59689c4b82890bafa1940718db77c9e/comments", "author": null, "committer": null, "parents": [{"sha": "0974c7d70d3b8e9c9bf4d4cd3f86c86bb124a694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0974c7d70d3b8e9c9bf4d4cd3f86c86bb124a694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0974c7d70d3b8e9c9bf4d4cd3f86c86bb124a694"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "c8f18a0bf22b005de92138a43a9dc78252f0de8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d61e55ee59689c4b82890bafa1940718db77c9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d61e55ee59689c4b82890bafa1940718db77c9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d61e55ee59689c4b82890bafa1940718db77c9e", "patch": "@@ -1,4 +1,39 @@\n-2003-10-10  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+2003-10-10  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* genmodes.c, mode-classes.def: New files.\n+\t* machmode.def: Rewritten to genmodes.c interface.\n+\t* Makefile.in (extra_modes_file): New substitution variable.\n+\t(MACHMODE_H): No longer includes machmode.def or\n+\t@extra_modes_file@; instead, mode-classes.def and insn-modes.h.\n+\t(BUILD_RTL): Add $(BUILD_PREFIX)insn-modes.o.\n+\t(OBJS-common): Add insn-modes.o.\n+\t(STAGESTUFF): Add insn-modes.c, insn-modes.h, s-modes, and\n+\tgenmodes$(build_exeext).\n+\t(insn-modes.o, insn-modes.c, insn-modes.h, s-modes, genmodes.o,\n+\tgenmodes$(build_exeext), $(BUILD_PREFIX_1)insn-modes.o): New targets.\n+\t(s-genrtl): Don't depend on $(RTL_BASE_H).\n+\t(gengenrtl.o): Don't depend on coretypes.h, $(GTM_H), real.h,\n+\tor $(RTL_BASE_H); just rtl.def.\n+\t* gengenrtl.c: Don't include coretypes.h, tm.h, rtl.h, or\n+\treal.h.  Give fake definition of CONST_DOUBLE_FORMAT and\n+\tsubstitute definition of NUM_RTX_CODE.  Add casts to avoid\n+\twarnings.\n+\t* machmode.h: Include insn-modes.h, not machmode.def.  Include\n+\tmode-classes.def to define enum mode_class.  Tweak definitions\n+\tof GET_MODE_CLASS, GET_MODE_SIZE, GET_MODE_BITSIZE, GET_MODE_MASK,\n+\tGET_MODE_INNER, GET_MODE_WIDER_MODE, GET_CLASS_NARROWEST_MODE.\n+\t(inner_mode_array): Renamed mode_inner.\n+\t(mode_base_align): New.\n+\t* rtl.c (mode_name, mode_class, mode_bitsize, mode_size,\n+\tmode_unit_size, mode_wider_mode, mode_mask_array,\n+\tinner_mode_array, class_narrowest_mode): Delete definitions.\n+\t* stor-layout.c (get_mode_alignment): Use mode_base_align.\n+\t* real.h: Use MIN_MODE_FLOAT and MAX_MODE_FLOAT, not QFmode\n+\tand TFmode, in real_format_for_mode and REAL_MODE_FORMAT.\n+\n+\t* config/ip2k/ip2k.h, config/iq2000/iq2000.h:\n+\tNo need to define BITS_PER_UNIT.\n+\n \n \t* stor-layout.c (compute_record_mode): Don't force BLKmode if\n \tfield is zero-length BLKmode.\n@@ -7,6 +42,8 @@\n \n \t* combine.c (distribute_links): Properly test for REG being set.\n \n+2003-10-10  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n \t* config/alpha/alpha.c (alpha_expand_block_mode): Don't use\n \tgen_lowpart and company except for REG.\n \n@@ -59,7 +96,7 @@\n 2003-10-09  Dorit Naishlos  <dorit@il.ibm.com>\n \n \t* haifa-sched.c (ok_for_early_schedule): New function.\n-\t(early_queue_to_ready): New function. \n+\t(early_queue_to_ready): New function.\n \t(schedule_block): Allow early removal of insns from Q.\n \t(schedule_insn): Update INSN_TICK in case of premature\n \tissue.\n@@ -74,15 +111,15 @@\n \t* config/rs6000/rs6000.h: (rs6000_sched_costly_dep):\n \tSupport new flag -msched-costly-dep.\n \t(DEFAULT_SCHED_COSTLY_DEP): Define.\n-\t* config/rs6000/rs6000.c: \t\n+\t* config/rs6000/rs6000.c:\n \t(rs6000_is_costly_dependence): New function.\n \t(is_load_insn, is_store_insn): New functions.\n-\t(is_load_insn1, is_store_insn1, is_mem_ref): New \n+\t(is_load_insn1, is_store_insn1, is_mem_ref): New\n \tfunctions.\n \t* doc/invoke.texi (-fsched-stalled-insns-dep)\n \t(-fsched-stalled-insns, -msched-costly-dep): Document\n \toptions.\n-\t* doc/tm.texi (is_costly_dependence): Define new \n+\t* doc/tm.texi (is_costly_dependence): Define new\n \tscheduler target hook.\n \n 2003-10-09  Jason Merrill  <jason@redhat.com>\n@@ -154,7 +191,7 @@\n \twhich loads the SYMBOL_REF address.\n \n 2003-10-08  Timo Kokkonen  <tjko@iki.fi>\n-            Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\t    Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR bootstrap/12490\n \t* scan-decls.c (MAX_EXTERN_C_BRACES): New preprocessor constant"}]}