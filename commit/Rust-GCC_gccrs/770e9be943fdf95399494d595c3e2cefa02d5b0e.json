{"sha": "770e9be943fdf95399494d595c3e2cefa02d5b0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcwZTliZTk0M2ZkZjk1Mzk5NDk0ZDU5NWMzZTJjZWZhMDJkNWIwZQ==", "commit": {"author": {"name": "Daniel Krugler", "email": "daniel.kruegler@googlemail.com", "date": "2012-10-11T10:27:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-10-11T10:27:45Z"}, "message": "sfinae_friendly_1.cc: Update / extend.\n\n2012-10-11  Daniel Krugler  <daniel.kruegler@googlemail.com>\n\n\t* testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc:\n\tUpdate / extend.\n\t* testsuite/20_util/common_type/requirements/sfinae_friendly_2.cc:\n\tLikewise.\n\t* testsuite/20_util/duration/requirements/sfinae_friendly_1.cc:\n\tLikewise.\n\nFrom-SVN: r192352", "tree": {"sha": "e3579fcd6d089b51cc69a7f22ff25d5656b7ab18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3579fcd6d089b51cc69a7f22ff25d5656b7ab18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/770e9be943fdf95399494d595c3e2cefa02d5b0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770e9be943fdf95399494d595c3e2cefa02d5b0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770e9be943fdf95399494d595c3e2cefa02d5b0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770e9be943fdf95399494d595c3e2cefa02d5b0e/comments", "author": {"login": "Dani-Hub", "id": 431432, "node_id": "MDQ6VXNlcjQzMTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/431432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dani-Hub", "html_url": "https://github.com/Dani-Hub", "followers_url": "https://api.github.com/users/Dani-Hub/followers", "following_url": "https://api.github.com/users/Dani-Hub/following{/other_user}", "gists_url": "https://api.github.com/users/Dani-Hub/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dani-Hub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dani-Hub/subscriptions", "organizations_url": "https://api.github.com/users/Dani-Hub/orgs", "repos_url": "https://api.github.com/users/Dani-Hub/repos", "events_url": "https://api.github.com/users/Dani-Hub/events{/privacy}", "received_events_url": "https://api.github.com/users/Dani-Hub/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb2bb1ed331be1303c67d95d9a5bd81190c028bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2bb1ed331be1303c67d95d9a5bd81190c028bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb2bb1ed331be1303c67d95d9a5bd81190c028bd"}], "stats": {"total": 77, "additions": 50, "deletions": 27}, "files": [{"sha": "f73c6cc6dd523ff76085893864333560a7856d50", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc", "status": "modified", "additions": 39, "deletions": 23, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770e9be943fdf95399494d595c3e2cefa02d5b0e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770e9be943fdf95399494d595c3e2cefa02d5b0e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc?ref=770e9be943fdf95399494d595c3e2cefa02d5b0e", "patch": "@@ -163,20 +163,23 @@ namespace std {\n   };\n }\n \n-static_assert(is_type<std::common_type<int, int>, int>(), \"\");\n-static_assert(is_type<std::common_type<ScEn, ScEn>, ScEn>(), \"\");\n-static_assert(is_type<std::common_type<UnscEn, UnscEn>, UnscEn>(), \"\");\n-static_assert(is_type<std::common_type<int, int>, int>(), \"\");\n+#ifdef HAS_53000_FIXED\n+static_assert(is_type<std::common_type<int, int>, int&&>(), \"\");\n+static_assert(is_type<std::common_type<ScEn, ScEn>, ScEn&&>(), \"\");\n+static_assert(is_type<std::common_type<UnscEn, UnscEn>, UnscEn&&>(), \"\");\n+#endif\n static_assert(is_type<std::common_type<UnscEn, int>, int>(), \"\");\n-static_assert(is_type<std::common_type<int, int, int>, int>(), \"\");\n-static_assert(is_type<std::common_type<int, int, int, int>, int>(), \"\");\n-static_assert(is_type<std::common_type<int, int, int, int, int>, int>(), \"\");\n-static_assert(is_type<std::common_type<S, S>, S>(), \"\");\n-static_assert(is_type<std::common_type<const S, const S>, const S>(), \"\");\n+#ifdef HAS_53000_FIXED\n+static_assert(is_type<std::common_type<int, int, int>, int&&>(), \"\");\n+static_assert(is_type<std::common_type<int, int, int, int>, int&&>(), \"\");\n+static_assert(is_type<std::common_type<int, int, int, int, int>, int&&>(), \"\");\n+static_assert(is_type<std::common_type<S, S>, S&&>(), \"\");\n+static_assert(is_type<std::common_type<const S, const S>, const S&&>(), \"\");\n static_assert(is_type<std::common_type<std::initializer_list<int>,\n-\t      std::initializer_list<int>>, std::initializer_list<int>>(), \"\");\n-static_assert(is_type<std::common_type<B, D>, B>(), \"\");\n-static_assert(is_type<std::common_type<D, B>, B>(), \"\");\n+\t      std::initializer_list<int>>, std::initializer_list<int>&&>(), \"\");\n+static_assert(is_type<std::common_type<B, D>, B&&>(), \"\");\n+static_assert(is_type<std::common_type<D, B>, B&&>(), \"\");\n+#endif\n static_assert(is_type<std::common_type<F1, F2>, void*>(), \"\");\n static_assert(is_type<std::common_type<F2, F1>, void*>(), \"\");\n static_assert(is_type<std::common_type<G1, G2>, const volatile void*>(), \"\");\n@@ -189,10 +192,15 @@ static_assert(is_type<std::common_type<void, void>, void>(), \"\");\n static_assert(is_type<std::common_type<const void, const void>, void>(), \"\");\n static_assert(is_type<std::common_type<int&, int&&>, int>(), \"\");\n static_assert(is_type<std::common_type<int&, int&>, int&>(), \"\");\n-static_assert(is_type<std::common_type<int&&, int&&>, int>(), \"\");\n+#ifdef HAS_53000_FIXED\n+static_assert(is_type<std::common_type<int&&, int&&>, int&&>(), \"\");\n+static_assert(is_type<std::common_type<int&&, const int&&>, const int&&>(), \"\");\n+#endif\n static_assert(is_type<std::common_type<U&, const U&&>, const U>(), \"\");\n static_assert(is_type<std::common_type<U&, U&>, U&>(), \"\");\n-static_assert(is_type<std::common_type<U&&, U&&>, U>(), \"\");\n+#ifdef HAS_53000_FIXED\n+static_assert(is_type<std::common_type<U&&, U&&>, U&&>(), \"\");\n+#endif\n static_assert(is_type<std::common_type<int B::*, int D::*>, int D::*>(), \"\");\n static_assert(is_type<std::common_type<int D::*, int B::*>, int D::*>(), \"\");\n static_assert(is_type<std::common_type<const int B::*, volatile int D::*>,\n@@ -201,7 +209,9 @@ static_assert(is_type<std::common_type<int (B::*)(), int (D::*)()>,\n \t      int (D::*)()>(), \"\");\n static_assert(is_type<std::common_type<int (B::*)() const, int (D::*)() const>,\n \t      int (D::*)() const>(), \"\");\n-static_assert(is_type<std::common_type<int[3], int[3]>, int*>(), \"\");\n+#ifdef HAS_53000_FIXED\n+static_assert(is_type<std::common_type<int[3], int[3]>, int(&&)[3]>(), \"\");\n+#endif\n static_assert(is_type<std::common_type<int[1], const int[3]>,\n \t      const int*>(), \"\");\n static_assert(is_type<std::common_type<void(), void()>, void(&)()>(), \"\");\n@@ -213,14 +223,18 @@ static_assert(is_type<std::common_type<void(&&)(), void(&)()>,\n static_assert(is_type<std::common_type<void(&&)(), void(&&)()>,\n \t      void(&)()>(), \"\");\n static_assert(is_type<std::common_type<ImplicitTo<int>, int>, int>(), \"\");\n+#ifdef HAS_53000_FIXED\n static_assert(is_type<std::common_type<ImplicitTo<int>, ImplicitTo<int>>,\n-\t      ImplicitTo<int>>(), \"\");\n+\t      ImplicitTo<int>&&>(), \"\");\n+#endif\n static_assert(is_type<std::common_type<ImplicitTo<int>, int,\n \t      ImplicitTo<int>>, int>(), \"\");\n+#ifdef HAS_53000_FIXED\n static_assert(is_type<std::common_type<ExplicitTo<int>, ExplicitTo<int>>,\n-\t      ExplicitTo<int>>(), \"\");\n+\t      ExplicitTo<int>&&>(), \"\");\n static_assert(is_type<std::common_type<decltype(lmd1), decltype(lmd1)>,\n-\t      decltype(lmd1)>(), \"\");\n+\t      decltype(lmd1)&&>(), \"\");\n+#endif\n static_assert(is_type<std::common_type<decltype(lmd1)&, decltype(lmd1)&>,\n \t      decltype(lmd1)&>(), \"\");\n static_assert(is_type<std::common_type<decltype(lmd1)&, decltype(lmd2)&>,\n@@ -248,12 +262,12 @@ static_assert(is_type<std::common_type<UConv1&, UConv2&>, Abstract*>(), \"\");\n \n #ifdef HAS_53000_FIXED\n static_assert(is_type<std::common_type<Abstract&&, Abstract&&>,\n-\t      Abstract>(), \"\");\n+\t      Abstract&&>(), \"\");\n static_assert(is_type<std::common_type<const Abstract&&,\n-\t\t\t\t       volatile Abstract&&>, Abstract>(), \"\");\n-static_assert(is_type<std::common_type<Ukn&&, Ukn&&>, Ukn>(), \"\");\n+\t\t\t\t       volatile Abstract&&>, const volatile Abstract&&>(), \"\");\n+static_assert(is_type<std::common_type<Ukn&&, Ukn&&>, Ukn&&>(), \"\");\n static_assert(is_type<std::common_type<const Ukn&&, volatile Ukn&&>,\n-\t      Ukn>(), \"\");\n+\t      const volatile Ukn&&>(), \"\");\n #endif\n \n static_assert(is_type<std::common_type<X1, X2>, RX12>(), \"\");\n@@ -323,8 +337,10 @@ void test(int i)\n   auto local_lmd1 = [=](int, double) { return i + i; };\n   auto local_lmd2 = [=](int, double) { return i - i; };\n \n+#ifdef HAS_53000_FIXED\n   static_assert(is_type<std::common_type<decltype(local_lmd1),\n-\t\t        decltype(local_lmd1)>, decltype(local_lmd1)>(), \"\");\n+\t\t        decltype(local_lmd1)>, decltype(local_lmd1)&&>(), \"\");\n+#endif\n   static_assert(is_type<std::common_type<decltype(local_lmd1)&,\n \t\t        decltype(local_lmd1)>, decltype(local_lmd1)>(), \"\");\n   static_assert(is_type<std::common_type<decltype(local_lmd1)&,"}, {"sha": "2f667919ea51285ce758aadf10f2f1cbc606744a", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/sfinae_friendly_2.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770e9be943fdf95399494d595c3e2cefa02d5b0e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770e9be943fdf95399494d595c3e2cefa02d5b0e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_2.cc?ref=770e9be943fdf95399494d595c3e2cefa02d5b0e", "patch": "@@ -24,10 +24,12 @@\n \n template<typename... Args>\n constexpr\n-std::array<typename std::common_type<Args...>::type, sizeof...(Args)>\n+std::array<typename std::decay<typename std::common_type<Args...>::type>::type, \n+  sizeof...(Args)>\n make_array(Args&&... args)  // { dg-error \"invalid use\" }\n {\n-  typedef typename std::common_type<Args...>::type CT;\n+  typedef typename std::decay<typename std::common_type<Args...>::type>::type \n+    CT;\n   return std::array<CT, sizeof...(Args)>{static_cast<CT>\n       (std::forward<Args>(args))...};\n }"}, {"sha": "cf53a21752d27799220ca1c0185e6f53843ef3c3", "filename": "libstdc++-v3/testsuite/20_util/duration/requirements/sfinae_friendly_1.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/770e9be943fdf95399494d595c3e2cefa02d5b0e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Fsfinae_friendly_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/770e9be943fdf95399494d595c3e2cefa02d5b0e/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Fsfinae_friendly_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Frequirements%2Fsfinae_friendly_1.cc?ref=770e9be943fdf95399494d595c3e2cefa02d5b0e", "patch": "@@ -21,6 +21,9 @@\n #include <type_traits>\n #include <chrono>\n \n+//TODO: Uncomment this once gcc bug 53000 has been resolved:\n+//#define HAS_53000_FIXED\n+\n // Helper types:\n struct has_type_impl\n {\n@@ -52,8 +55,10 @@ typedef std::chrono::duration<int, std::nano> din;\n typedef std::chrono::duration<double, std::nano> ddn;\n typedef std::chrono::duration<int, std::milli> dim;\n \n-static_assert(is_type<std::common_type<din, din>, din>(), \"\");\n-static_assert(is_type<std::common_type<din, din, din>, din>(), \"\");\n+#ifdef HAS_53000_FIXED\n+static_assert(is_type<std::common_type<din, din>, din&&>(), \"\");\n+static_assert(is_type<std::common_type<din, din, din>, din&&>(), \"\");\n+#endif\n \n static_assert(is_type<std::common_type<din, ddn>, ddn>(), \"\");\n static_assert(is_type<std::common_type<din, din, ddn>, ddn>(), \"\");"}]}