{"sha": "c35e85f9783adaed94192057083315cffc34dc09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM1ZTg1Zjk3ODNhZGFlZDk0MTkyMDU3MDgzMzE1Y2ZmYzM0ZGMwOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-07-12T14:52:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-07-12T14:52:51Z"}, "message": "flow.c (find_basic_blocks_1): Do not emit NOP after call.\n\n\t* flow.c (find_basic_blocks_1): Do not emit NOP after call.\n\n\t* flow.c (outgoing_edges_match): Return early if condition reversal\n\tfailed.\n\nFrom-SVN: r43965", "tree": {"sha": "5fe3f008045ea66bba1fdf4f77e5ebe24f0b6c0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fe3f008045ea66bba1fdf4f77e5ebe24f0b6c0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c35e85f9783adaed94192057083315cffc34dc09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35e85f9783adaed94192057083315cffc34dc09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c35e85f9783adaed94192057083315cffc34dc09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35e85f9783adaed94192057083315cffc34dc09/comments", "author": null, "committer": null, "parents": [{"sha": "51c6b247049453fde14806ec97ce48e2e9727277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c6b247049453fde14806ec97ce48e2e9727277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c6b247049453fde14806ec97ce48e2e9727277"}], "stats": {"total": 32, "additions": 10, "deletions": 22}, "files": [{"sha": "cc1c003a4a3d01139491e0dd4587b00f7300c80e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35e85f9783adaed94192057083315cffc34dc09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35e85f9783adaed94192057083315cffc34dc09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c35e85f9783adaed94192057083315cffc34dc09", "patch": "@@ -1,3 +1,10 @@\n+Thu Jul 12 16:48:54 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* flow.c (find_basic_blocks_1): Do not emit NOP after call.\n+\n+\t* flow.c (outgoing_edges_match): Return early if condition reversal\n+\tfailed.\n+\n 2001-07-06  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (print_operand): Extend '%D' to memory operands."}, {"sha": "51fe12ce1563d5ad2dbc469451e8e400c319a0d9", "filename": "gcc/flow.c", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c35e85f9783adaed94192057083315cffc34dc09/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c35e85f9783adaed94192057083315cffc34dc09/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=c35e85f9783adaed94192057083315cffc34dc09", "patch": "@@ -859,17 +859,6 @@ find_basic_blocks_1 (f)\n \t     to a barrier or some such, no need to do it again.  */\n \t  if (head != NULL_RTX)\n \t    {\n-\t      /* While we now have edge lists with which other portions of\n-\t\t the compiler might determine a call ending a basic block\n-\t\t does not imply an abnormal edge, it will be a bit before\n-\t\t everything can be updated.  So continue to emit a noop at\n-\t\t the end of such a block.  */\n-\t      if (GET_CODE (end) == CALL_INSN && ! SIBLING_CALL_P (end))\n-\t\t{\n-\t\t  rtx nop = gen_rtx_USE (VOIDmode, const0_rtx);\n-\t\t  end = emit_insn_after (nop, end);\n-\t\t}\n-\n \t      create_basic_block (i++, head, end, bb_note);\n \t      bb_note = NULL_RTX;\n \t    }\n@@ -911,17 +900,6 @@ find_basic_blocks_1 (f)\n \t     jump already closed the basic block -- no need to do it again.  */\n \t  if (head == NULL_RTX)\n \t    break;\n-\n-\t  /* While we now have edge lists with which other portions of the\n-\t     compiler might determine a call ending a basic block does not\n-\t     imply an abnormal edge, it will be a bit before everything can\n-\t     be updated.  So continue to emit a noop at the end of such a\n-\t     block.  */\n-\t  if (GET_CODE (end) == CALL_INSN && ! SIBLING_CALL_P (end))\n-\t    {\n-\t      rtx nop = gen_rtx_USE (VOIDmode, const0_rtx);\n-\t      end = emit_insn_after (nop, end);\n-\t    }\n \t  goto new_bb_exclusive;\n \n \tcase CALL_INSN:\n@@ -3394,6 +3372,9 @@ outgoing_edges_match (bb1, bb2)\n       else\n \tcode2 = GET_CODE (cond2);\n \n+      if (code2 == UNKNOWN)\n+\treturn false;\n+\n       /* See if we don have (cross) match in the codes and operands.  */\n       match = ((code1 == code2\n \t\t&& rtx_renumbered_equal_p (XEXP (cond1, 0), XEXP (cond2, 0))"}]}