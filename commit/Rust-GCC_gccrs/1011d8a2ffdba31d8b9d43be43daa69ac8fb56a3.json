{"sha": "1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAxMWQ4YTJmZmRiYTMxZDhiOWQ0M2JlNDNkYWE2OWFjOGZiNTZhMw==", "commit": {"author": {"name": "Joel Sherrill", "email": "joel.sherrill@oarcorp.com", "date": "2008-09-10T20:11:49Z"}, "committer": {"name": "Joel Sherrill", "email": "joel@gcc.gnu.org", "date": "2008-09-10T20:11:49Z"}, "message": "Makefile.in: Switch RTEMS to s-interr-hwint.adb.\n\n2008-09-10  Joel Sherrill <joel.sherrill@oarcorp.com>\n\n\t* gcc-interface/Makefile.in: Switch RTEMS to s-interr-hwint.adb.\n\t* s-osinte-rtems.ads: Add shared hardware interrupt adapter\n\tlayer. RTEMS binds to OS provided adapter routines so there are\n\tno modifications to s-osinte-rtems.adb.\n\nFrom-SVN: r140246", "tree": {"sha": "f47519a49f329cd2a8f20961afe31f87c2495d17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f47519a49f329cd2a8f20961afe31f87c2495d17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3/comments", "author": {"login": "joelsherrill", "id": 183688, "node_id": "MDQ6VXNlcjE4MzY4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/183688?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joelsherrill", "html_url": "https://github.com/joelsherrill", "followers_url": "https://api.github.com/users/joelsherrill/followers", "following_url": "https://api.github.com/users/joelsherrill/following{/other_user}", "gists_url": "https://api.github.com/users/joelsherrill/gists{/gist_id}", "starred_url": "https://api.github.com/users/joelsherrill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joelsherrill/subscriptions", "organizations_url": "https://api.github.com/users/joelsherrill/orgs", "repos_url": "https://api.github.com/users/joelsherrill/repos", "events_url": "https://api.github.com/users/joelsherrill/events{/privacy}", "received_events_url": "https://api.github.com/users/joelsherrill/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dec1b5d735d60579e3164e772a507e97297f106b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dec1b5d735d60579e3164e772a507e97297f106b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dec1b5d735d60579e3164e772a507e97297f106b"}], "stats": {"total": 93, "additions": 90, "deletions": 3}, "files": [{"sha": "1a1837eab11414b9135347ac95d14a1b9a29163f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3", "patch": "@@ -1,3 +1,10 @@\n+2008-09-10  Joel Sherrill <joel.sherrill@oarcorp.com>\n+\n+\t* gcc-interface/Makefile.in: Switch RTEMS to s-interr-hwint.adb.\n+\t* s-osinte-rtems.ads: Add shared hardware interrupt adapter\n+\tlayer. RTEMS binds to OS provided adapter routines so there are\n+\tno modifications to s-osinte-rtems.adb.\n+\n 2008-09-09  Arnaud Charlet  <charlet@adacore.com>\n \t    Joel Sherrill  <joel.sherrill@oarcorp.com>\n "}, {"sha": "ccd20bd17338a8cec3216a19e4be5f31a93e14ba", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3", "patch": "@@ -1149,7 +1149,8 @@ ifeq ($(strip $(filter-out rtems%,$(osys))),)\n   s-taprop.adb<s-taprop-posix.adb \\\n   s-taspri.ads<s-taspri-posix.ads \\\n   s-tpopsp.adb<s-tpopsp-rtems.adb \\\n-  s-stchop.adb<s-stchop-rtems.adb\n+  s-stchop.adb<s-stchop-rtems.adb \\\n+  s-interr.adb<s-interr-hwint.adb\n endif\n \n ifeq ($(strip $(filter-out alpha% dec osf%,$(targ))),)"}, {"sha": "743b3eb6e9b0fa58aeb8309d5573fb2048c45859", "filename": "gcc/ada/s-osinte-rtems.ads", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3/gcc%2Fada%2Fs-osinte-rtems.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3/gcc%2Fada%2Fs-osinte-rtems.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-rtems.ads?ref=1011d8a2ffdba31d8b9d43be43daa69ac8fb56a3", "patch": "@@ -88,7 +88,13 @@ package System.OS_Interface is\n    -- Signals --\n    -------------\n \n-   Max_Interrupt : constant := 31;\n+   Num_HW_Interrupts : constant := 256;\n+\n+   Max_HW_Interrupt : constant := Num_HW_Interrupts - 1;\n+   type HW_Interrupt is new int range 0 .. Max_HW_Interrupt;\n+\n+   Max_Interrupt : constant := Max_HW_Interrupt;\n+\n    type Signal is new int range 0 .. Max_Interrupt;\n \n    SIGXCPU     : constant := 0; --  XCPU\n@@ -501,6 +507,79 @@ package System.OS_Interface is\n       destructor : destructor_pointer) return int;\n    pragma Import (C, pthread_key_create, \"pthread_key_create\");\n \n+   ------------------------------------------------------------\n+   --   Binary Semaphore Wrapper to Support Interrupt Tasks  --\n+   ------------------------------------------------------------\n+\n+   type Binary_Semaphore_Id is new rtems_id;\n+\n+   function Binary_Semaphore_Create return Binary_Semaphore_Id;\n+   pragma Import (\n+      C,\n+      Binary_Semaphore_Create,\n+      \"__gnat_binary_semaphore_create\");\n+\n+   function Binary_Semaphore_Delete (ID : Binary_Semaphore_Id) return int;\n+   pragma Import (\n+      C,\n+      Binary_Semaphore_Delete,\n+      \"__gnat_binary_semaphore_delete\");\n+\n+   function Binary_Semaphore_Obtain (ID : Binary_Semaphore_Id) return int;\n+   pragma Import (\n+      C,\n+      Binary_Semaphore_Obtain,\n+      \"__gnat_binary_semaphore_obtain\");\n+\n+   function Binary_Semaphore_Release (ID : Binary_Semaphore_Id) return int;\n+   pragma Import (\n+      C,\n+      Binary_Semaphore_Release,\n+      \"__gnat_binary_semaphore_release\");\n+\n+   function Binary_Semaphore_Flush (ID : Binary_Semaphore_Id) return int;\n+   pragma Import (\n+      C,\n+      Binary_Semaphore_Flush,\n+      \"__gnat_binary_semaphore_flush\");\n+\n+   ------------------------------------------------------------\n+   -- Hardware Interrupt Wrappers to Support Interrupt Tasks --\n+   ------------------------------------------------------------\n+\n+   type Interrupt_Handler is access procedure (parameter : System.Address);\n+   pragma Convention (C, Interrupt_Handler);\n+   type Interrupt_Vector is new System.Address;\n+\n+   function Interrupt_Connect\n+     (vector    : Interrupt_Vector;\n+      handler   : Interrupt_Handler;\n+      parameter : System.Address := System.Null_Address) return int;\n+   pragma Import (C, Interrupt_Connect, \"__gnat_interrupt_connect\");\n+   --  Use this to set up an user handler. The routine installs a\n+   --  a user handler which is invoked after RTEMS has saved enough\n+   --  context for a high-level language routine to be safely invoked.\n+\n+   function Interrupt_Vector_Get\n+     (Vector : Interrupt_Vector) return Interrupt_Handler;\n+   pragma Import (C, Interrupt_Vector_Get, \"__gnat_interrupt_get\");\n+   --  Use this to get the existing handler for later restoral.\n+\n+   procedure Interrupt_Vector_Set\n+     (Vector  : Interrupt_Vector;\n+      Handler : Interrupt_Handler);\n+   pragma Import (C, Interrupt_Vector_Set, \"__gnat_interrupt_set\");\n+   --  Use this to restore a handler obtained using Interrupt_Vector_Get.\n+\n+   function Interrupt_Number_To_Vector (intNum : int) return Interrupt_Vector;\n+   --  Convert a logical interrupt number to the hardware interrupt vector\n+   --  number used to connect the interrupt.\n+   pragma Import (\n+      C,\n+      Interrupt_Number_To_Vector,\n+      \"__gnat_interrupt_number_to_vector\"\n+   );\n+\n private\n \n    type sigset_t is new int;\n@@ -533,7 +612,7 @@ private\n       schedpolicy     : int;\n       schedparam      : struct_sched_param;\n       cputime_clocked_allowed : int;\n-      deatchstate     : int;\n+      detatchstate    : int;\n    end record;\n    pragma Convention (C, pthread_attr_t);\n "}]}