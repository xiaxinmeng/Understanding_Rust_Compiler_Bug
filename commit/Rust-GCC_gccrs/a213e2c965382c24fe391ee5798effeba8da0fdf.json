{"sha": "a213e2c965382c24fe391ee5798effeba8da0fdf", "node_id": "C_kwDOANBUbNoAKGEyMTNlMmM5NjUzODJjMjRmZTM5MWVlNTc5OGVmZmViYThkYTBmZGY", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2023-04-11T00:55:56Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2023-04-11T01:02:21Z"}, "message": "rs6000: correct vector sign extend builtins on Big Endian\n\ngcc/\n\tPR target/108812\n\t* config/rs6000/vsx.md (vsx_sign_extend_qi_<mode>): Rename to...\n\t(vsx_sign_extend_v16qi_<mode>): ... this.\n\t(vsx_sign_extend_hi_<mode>): Rename to...\n\t(vsx_sign_extend_v8hi_<mode>): ... this.\n\t(vsx_sign_extend_si_v2di): Rename to...\n\t(vsx_sign_extend_v4si_v2di): ... this.\n\t(vsignextend_qi_<mode>): Remove.\n\t(vsignextend_hi_<mode>): Remove.\n\t(vsignextend_si_v2di): Remove.\n\t(vsignextend_v2di_v1ti): Remove.\n\t(*xxspltib_<mode>_split): Replace gen_vsx_sign_extend_qi_v2di with\n\tgen_vsx_sign_extend_v16qi_v2di and gen_vsx_sign_extend_qi_v4si\n\twith gen_vsx_sign_extend_v16qi_v4si.\n\t* config/rs6000/rs6000.md (split for DI constant generation):\n\tReplace gen_vsx_sign_extend_qi_si with gen_vsx_sign_extend_v16qi_si.\n\t(split for HSDI constant generation): Replace gen_vsx_sign_extend_qi_di\n\twith gen_vsx_sign_extend_v16qi_di and gen_vsx_sign_extend_qi_si\n\twith gen_vsx_sign_extend_v16qi_si.\n\t* config/rs6000/rs6000-builtins.def (__builtin_altivec_vsignextsb2d):\n\tSet bif-pattern to vsx_sign_extend_v16qi_v2di.\n\t(__builtin_altivec_vsignextsb2w): Set bif-pattern to\n\tvsx_sign_extend_v16qi_v4si.\n\t(__builtin_altivec_visgnextsh2d): Set bif-pattern to\n\tvsx_sign_extend_v8hi_v2di.\n\t(__builtin_altivec_vsignextsh2w): Set bif-pattern to\n\tvsx_sign_extend_v8hi_v4si.\n\t(__builtin_altivec_vsignextsw2d): Set bif-pattern to\n\tvsx_sign_extend_si_v2di.\n\t(__builtin_altivec_vsignext): Set bif-pattern to\n\tvsx_sign_extend_v2di_v1ti.\n\t* config/rs6000/rs6000-builtin.cc (lxvrse_expand_builtin): Replace\n\tgen_vsx_sign_extend_qi_v2di with gen_vsx_sign_extend_v16qi_v2di,\n\tgen_vsx_sign_extend_hi_v2di with gen_vsx_sign_extend_v8hi_v2di and\n\tgen_vsx_sign_extend_si_v2di with gen_vsx_sign_extend_v4si_v2di.\n\ngcc/testsuite/\n\tPR target/108812\n\t* gcc.target/powerpc/p9-sign_extend-runnable.c: Set corresponding\n\texpected vectors for Big Endian.\n\t* gcc.target/powerpc/int_128bit-runnable.c: Likewise.", "tree": {"sha": "48dd3caa1bfadd19848495c2246a6ac7d584bbe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48dd3caa1bfadd19848495c2246a6ac7d584bbe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a213e2c965382c24fe391ee5798effeba8da0fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a213e2c965382c24fe391ee5798effeba8da0fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a213e2c965382c24fe391ee5798effeba8da0fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a213e2c965382c24fe391ee5798effeba8da0fdf/comments", "author": null, "committer": null, "parents": [{"sha": "5f9a13a157f1319ad6b52936f71236044ab27f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9a13a157f1319ad6b52936f71236044ab27f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f9a13a157f1319ad6b52936f71236044ab27f0e"}], "stats": {"total": 139, "additions": 50, "deletions": 89}, "files": [{"sha": "534698e7d3e8629473bbc544e9465dd706f2132b", "filename": "gcc/config/rs6000/rs6000-builtin.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213e2c965382c24fe391ee5798effeba8da0fdf/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213e2c965382c24fe391ee5798effeba8da0fdf/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.cc?ref=a213e2c965382c24fe391ee5798effeba8da0fdf", "patch": "@@ -2840,17 +2840,17 @@ lxvrse_expand_builtin (rtx target, insn_code icode, rtx *op,\n   if (icode == CODE_FOR_vsx_lxvrbx)\n     {\n       temp1  = simplify_gen_subreg (V16QImode, tiscratch, TImode, 0);\n-      emit_insn (gen_vsx_sign_extend_qi_v2di (discratch, temp1));\n+      emit_insn (gen_vsx_sign_extend_v16qi_v2di (discratch, temp1));\n     }\n   else if (icode == CODE_FOR_vsx_lxvrhx)\n     {\n       temp1  = simplify_gen_subreg (V8HImode, tiscratch, TImode, 0);\n-      emit_insn (gen_vsx_sign_extend_hi_v2di (discratch, temp1));\n+      emit_insn (gen_vsx_sign_extend_v8hi_v2di (discratch, temp1));\n     }\n   else if (icode == CODE_FOR_vsx_lxvrwx)\n     {\n       temp1  = simplify_gen_subreg (V4SImode, tiscratch, TImode, 0);\n-      emit_insn (gen_vsx_sign_extend_si_v2di (discratch, temp1));\n+      emit_insn (gen_vsx_sign_extend_v4si_v2di (discratch, temp1));\n     }\n   else if (icode == CODE_FOR_vsx_lxvrdx)\n     discratch = simplify_gen_subreg (V2DImode, tiscratch, TImode, 0);"}, {"sha": "a03353724f3a4531b45b702ee085db95b032dff0", "filename": "gcc/config/rs6000/rs6000-builtins.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213e2c965382c24fe391ee5798effeba8da0fdf/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213e2c965382c24fe391ee5798effeba8da0fdf/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def?ref=a213e2c965382c24fe391ee5798effeba8da0fdf", "patch": "@@ -2687,19 +2687,19 @@\n     VRLWNM altivec_vrlwnm {}\n \n   const vsll __builtin_altivec_vsignextsb2d (vsc);\n-    VSIGNEXTSB2D vsignextend_qi_v2di {}\n+    VSIGNEXTSB2D vsx_sign_extend_v16qi_v2di {}\n \n   const vsi __builtin_altivec_vsignextsb2w (vsc);\n-    VSIGNEXTSB2W vsignextend_qi_v4si {}\n+    VSIGNEXTSB2W vsx_sign_extend_v16qi_v4si {}\n \n   const vsll __builtin_altivec_visgnextsh2d (vss);\n-    VSIGNEXTSH2D vsignextend_hi_v2di {}\n+    VSIGNEXTSH2D vsx_sign_extend_v8hi_v2di {}\n \n   const vsi __builtin_altivec_vsignextsh2w (vss);\n-    VSIGNEXTSH2W vsignextend_hi_v4si {}\n+    VSIGNEXTSH2W vsx_sign_extend_v8hi_v4si {}\n \n   const vsll __builtin_altivec_vsignextsw2d (vsi);\n-    VSIGNEXTSW2D vsignextend_si_v2di {}\n+    VSIGNEXTSW2D vsx_sign_extend_v4si_v2di {}\n \n   const vsc __builtin_altivec_vslv (vsc, vsc);\n     VSLV vslv {}\n@@ -3440,7 +3440,7 @@\n     VRLQNM altivec_vrlqnm {}\n \n   const vsq __builtin_altivec_vsignext (vsll);\n-    VSIGNEXTSD2Q vsignextend_v2di_v1ti {}\n+    VSIGNEXTSD2Q vsx_sign_extend_v2di_v1ti {}\n \n   const vsc __builtin_altivec_vsldb_v16qi (vsc, vsc, const int<3>);\n     VSLDB_V16QI vsldb_v16qi {}"}, {"sha": "b0db8ae508d8ee50e34f85b654988ae0919e152f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213e2c965382c24fe391ee5798effeba8da0fdf/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213e2c965382c24fe391ee5798effeba8da0fdf/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=a213e2c965382c24fe391ee5798effeba8da0fdf", "patch": "@@ -7873,7 +7873,7 @@\n   rtx op0_v16qi = gen_rtx_REG (V16QImode, r);\n \n   emit_insn (gen_xxspltib_v16qi (op0_v16qi, op1));\n-  emit_insn (gen_vsx_sign_extend_qi_si (operands[0], op0_v16qi));\n+  emit_insn (gen_vsx_sign_extend_v16qi_si (operands[0], op0_v16qi));\n   DONE;\n })\n \n@@ -9826,9 +9826,9 @@\n \n   emit_insn (gen_xxspltib_v16qi (op0_v16qi, op1));\n   if (<MODE>mode == DImode)\n-    emit_insn (gen_vsx_sign_extend_qi_di (operands[0], op0_v16qi));\n+    emit_insn (gen_vsx_sign_extend_v16qi_di (operands[0], op0_v16qi));\n   else if (<MODE>mode == SImode)\n-    emit_insn (gen_vsx_sign_extend_qi_si (operands[0], op0_v16qi));\n+    emit_insn (gen_vsx_sign_extend_v16qi_si (operands[0], op0_v16qi));\n   else if (<MODE>mode == HImode)\n     {\n       rtx op0_v8hi = gen_rtx_REG (V8HImode, r);"}, {"sha": "7d845df5c2d9aea94f7e37eaafa760ec73da9160", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 5, "deletions": 77, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213e2c965382c24fe391ee5798effeba8da0fdf/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213e2c965382c24fe391ee5798effeba8da0fdf/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=a213e2c965382c24fe391ee5798effeba8da0fdf", "patch": "@@ -1158,10 +1158,10 @@\n   emit_insn (gen_xxspltib_v16qi (tmp, GEN_INT (value)));\n \n   if (<MODE>mode == V2DImode)\n-    emit_insn (gen_vsx_sign_extend_qi_v2di (op0, tmp));\n+    emit_insn (gen_vsx_sign_extend_v16qi_v2di (op0, tmp));\n \n   else if (<MODE>mode == V4SImode)\n-    emit_insn (gen_vsx_sign_extend_qi_v4si (op0, tmp));\n+    emit_insn (gen_vsx_sign_extend_v16qi_v4si (op0, tmp));\n \n   else if (<MODE>mode == V8HImode)\n     emit_insn (gen_altivec_vupkhsb  (op0, tmp));\n@@ -4905,27 +4905,9 @@\n  \"vextsd2q %0,%1\"\n [(set_attr \"type\" \"vecexts\")])\n \n-(define_expand \"vsignextend_v2di_v1ti\"\n-  [(set (match_operand:V1TI 0 \"vsx_register_operand\" \"=v\")\n-\t(unspec:V1TI [(match_operand:V2DI 1 \"vsx_register_operand\" \"v\")]\n-\t\t     UNSPEC_VSX_SIGN_EXTEND))]\n-  \"TARGET_POWER10\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    {\n-      rtx tmp = gen_reg_rtx (V2DImode);\n-\n-      emit_insn (gen_altivec_vrevev2di2(tmp, operands[1]));\n-      emit_insn (gen_vsx_sign_extend_v2di_v1ti(operands[0], tmp));\n-      DONE;\n-     }\n-\n-  emit_insn (gen_vsx_sign_extend_v2di_v1ti(operands[0], operands[1]));\n-})\n-\n ;; ISA 3.0 vector extend sign support\n \n-(define_insn \"vsx_sign_extend_qi_<mode>\"\n+(define_insn \"vsx_sign_extend_v16qi_<mode>\"\n   [(set (match_operand:VSINT_84 0 \"vsx_register_operand\" \"=v\")\n \t(unspec:VSINT_84\n \t [(match_operand:V16QI 1 \"vsx_register_operand\" \"v\")]\n@@ -4934,25 +4916,7 @@\n   \"vextsb2<wd> %0,%1\"\n   [(set_attr \"type\" \"vecexts\")])\n \n-(define_expand \"vsignextend_qi_<mode>\"\n-  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n-\t(unspec:VIlong\n-\t [(match_operand:V16QI 1 \"vsx_register_operand\" \"v\")]\n-\t UNSPEC_VSX_SIGN_EXTEND))]\n-  \"TARGET_P9_VECTOR\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    {\n-      rtx tmp = gen_reg_rtx (V16QImode);\n-      emit_insn (gen_altivec_vrevev16qi2(tmp, operands[1]));\n-      emit_insn (gen_vsx_sign_extend_qi_<mode>(operands[0], tmp));\n-    }\n-  else\n-    emit_insn (gen_vsx_sign_extend_qi_<mode>(operands[0], operands[1]));\n-  DONE;\n-})\n-\n-(define_insn \"vsx_sign_extend_hi_<mode>\"\n+(define_insn \"vsx_sign_extend_v8hi_<mode>\"\n   [(set (match_operand:VSINT_84 0 \"vsx_register_operand\" \"=v\")\n \t(unspec:VSINT_84\n \t [(match_operand:V8HI 1 \"vsx_register_operand\" \"v\")]\n@@ -4961,50 +4925,14 @@\n   \"vextsh2<wd> %0,%1\"\n   [(set_attr \"type\" \"vecexts\")])\n \n-(define_expand \"vsignextend_hi_<mode>\"\n-  [(set (match_operand:VIlong 0 \"vsx_register_operand\" \"=v\")\n-\t(unspec:VIlong\n-\t [(match_operand:V8HI 1 \"vsx_register_operand\" \"v\")]\n-\t UNSPEC_VSX_SIGN_EXTEND))]\n-  \"TARGET_P9_VECTOR\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    {\n-      rtx tmp = gen_reg_rtx (V8HImode);\n-      emit_insn (gen_altivec_vrevev8hi2(tmp, operands[1]));\n-      emit_insn (gen_vsx_sign_extend_hi_<mode>(operands[0], tmp));\n-    }\n-  else\n-     emit_insn (gen_vsx_sign_extend_hi_<mode>(operands[0], operands[1]));\n-  DONE;\n-})\n-\n-(define_insn \"vsx_sign_extend_si_v2di\"\n+(define_insn \"vsx_sign_extend_v4si_v2di\"\n   [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v\")\n \t(unspec:V2DI [(match_operand:V4SI 1 \"vsx_register_operand\" \"v\")]\n \t\t     UNSPEC_VSX_SIGN_EXTEND))]\n   \"TARGET_P9_VECTOR\"\n   \"vextsw2d %0,%1\"\n   [(set_attr \"type\" \"vecexts\")])\n \n-(define_expand \"vsignextend_si_v2di\"\n-  [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v\")\n-\t(unspec:V2DI [(match_operand:V4SI 1 \"vsx_register_operand\" \"v\")]\n-\t\t     UNSPEC_VSX_SIGN_EXTEND))]\n-  \"TARGET_P9_VECTOR\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    {\n-       rtx tmp = gen_reg_rtx (V4SImode);\n-\n-       emit_insn (gen_altivec_vrevev4si2(tmp, operands[1]));\n-       emit_insn (gen_vsx_sign_extend_si_v2di(operands[0], tmp));\n-    }\n-  else\n-     emit_insn (gen_vsx_sign_extend_si_v2di(operands[0], operands[1]));\n-  DONE;\n-})\n-\n ;; Sign extend DI to TI.  We provide both GPR targets and Altivec targets on\n ;; power10.  On earlier systems, the machine independent code will generate a\n ;; shift left to sign extend the 64-bit value to 128-bit."}, {"sha": "68217c62325089d1a0d23882e59eb52a9fca7aa8", "filename": "gcc/testsuite/gcc.target/powerpc/int_128bit-runnable.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213e2c965382c24fe391ee5798effeba8da0fdf/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213e2c965382c24fe391ee5798effeba8da0fdf/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c?ref=a213e2c965382c24fe391ee5798effeba8da0fdf", "patch": "@@ -90,7 +90,11 @@ int main ()\n   vec_arg1_di[0] = 1000;\n   vec_arg1_di[1] = -123456;\n \n+#ifdef __BIG_ENDIAN__\n+  expected_result = -123456;\n+#else\n   expected_result = 1000;\n+#endif\n \n   vec_result = vec_signextq (vec_arg1_di);\n \n@@ -109,7 +113,11 @@ int main ()\n   vec_arg1_di[0] = -123456;\n   vec_arg1_di[1] = 1000;\n \n+#ifdef __BIG_ENDIAN__\n+  expected_result = 1000;\n+#else\n   expected_result = -123456;\n+#endif\n \n   vec_result = vec_signextq (vec_arg1_di);\n "}, {"sha": "03c0f1201e43e3dc22d37291d346a038f0f5dbaf", "filename": "gcc/testsuite/gcc.target/powerpc/p9-sign_extend-runnable.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a213e2c965382c24fe391ee5798effeba8da0fdf/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-sign_extend-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a213e2c965382c24fe391ee5798effeba8da0fdf/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-sign_extend-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-sign_extend-runnable.c?ref=a213e2c965382c24fe391ee5798effeba8da0fdf", "patch": "@@ -34,7 +34,12 @@ int main ()\n   /* test sign extend byte to word */\n   vec_arg_qi = (vector signed char) {1, 2, 3, 4, 5, 6, 7, 8,\n \t\t\t\t     -1, -2, -3, -4, -5, -6, -7, -8};\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_expected_wi = (vector signed int) {4, 8, -4, -8};\n+#else\n   vec_expected_wi = (vector signed int) {1, 5, -1, -5};\n+#endif\n \n   vec_result_wi = vec_signexti (vec_arg_qi);\n \n@@ -54,7 +59,12 @@ int main ()\n   /* test sign extend byte to double */\n   vec_arg_qi = (vector signed char){1, 2, 3, 4, 5, 6, 7, 8,\n \t\t\t\t    -1, -2, -3, -4, -5, -6, -7, -8};\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_expected_di = (vector signed long long int){8, -8};\n+#else\n   vec_expected_di = (vector signed long long int){1, -1};\n+#endif\n \n   vec_result_di = vec_signextll(vec_arg_qi);\n \n@@ -72,7 +82,12 @@ int main ()\n \n   /* test sign extend short to word */\n   vec_arg_hi = (vector signed short int){1, 2, 3, 4, -1, -2, -3, -4};\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_expected_wi = (vector signed int){2, 4, -2, -4};\n+#else\n   vec_expected_wi = (vector signed int){1, 3, -1, -3};\n+#endif\n \n   vec_result_wi = vec_signexti(vec_arg_hi);\n \n@@ -90,7 +105,12 @@ int main ()\n \n   /* test sign extend short to double word */\n   vec_arg_hi = (vector signed short int ){1, 3, 5, 7,  -1, -3, -5, -7};\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_expected_di = (vector signed long long int){7, -7};\n+#else\n   vec_expected_di = (vector signed long long int){1, -1};\n+#endif\n \n   vec_result_di = vec_signextll(vec_arg_hi);\n \n@@ -108,7 +128,12 @@ int main ()\n \n   /* test sign extend word to double word */\n   vec_arg_wi = (vector signed int ){1, 3, -1, -3};\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_expected_di = (vector signed long long int){3, -3};\n+#else\n   vec_expected_di = (vector signed long long int){1, -1};\n+#endif\n \n   vec_result_di = vec_signextll(vec_arg_wi);\n "}]}