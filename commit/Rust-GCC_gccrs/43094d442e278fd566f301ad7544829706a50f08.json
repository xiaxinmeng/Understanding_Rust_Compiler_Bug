{"sha": "43094d442e278fd566f301ad7544829706a50f08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMwOTRkNDQyZTI3OGZkNTY2ZjMwMWFkNzU0NDgyOTcwNmE1MGYwOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-03-14T13:19:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-03-14T13:19:43Z"}, "message": "forward_list.h: Fix comments.\n\n2012-03-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/forward_list.h: Fix comments.\n\nFrom-SVN: r185382", "tree": {"sha": "0e9f0c152ef763c02b38697ebe35a25f05ce90cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e9f0c152ef763c02b38697ebe35a25f05ce90cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43094d442e278fd566f301ad7544829706a50f08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43094d442e278fd566f301ad7544829706a50f08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43094d442e278fd566f301ad7544829706a50f08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43094d442e278fd566f301ad7544829706a50f08/comments", "author": null, "committer": null, "parents": [{"sha": "7501ca28e3358bc324c0ef417e397c521283c845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7501ca28e3358bc324c0ef417e397c521283c845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7501ca28e3358bc324c0ef417e397c521283c845"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "ff93710bcf6876b12821e99eefe960ca82d9f7ff", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43094d442e278fd566f301ad7544829706a50f08/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43094d442e278fd566f301ad7544829706a50f08/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=43094d442e278fd566f301ad7544829706a50f08", "patch": "@@ -1,3 +1,7 @@\n+2012-03-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/forward_list.h: Fix comments.\n+\n 2012-03-13  Terry Guo  <terry.guo@arm.com>\n \n \t* testsuite/Makefile.in (TEST_GCC_EXEC_PREFIX): New."}, {"sha": "cd75bfc5eef65e907b5e326ec3894b2eb8b80691", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43094d442e278fd566f301ad7544829706a50f08/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43094d442e278fd566f301ad7544829706a50f08/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=43094d442e278fd566f301ad7544829706a50f08", "patch": "@@ -536,7 +536,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @param  __al  An allocator object.\n        *\n        *  Create a %forward_list consisting of copies of the elements\n-       *  in the initializer_list @a __il.  This is linear in __il.size().\n+       *  in the initializer_list @a __il.  This is linear in the number\n+       *  of elements of __il.\n        */\n       forward_list(std::initializer_list<_Tp> __il,\n                    const _Alloc& __al = _Alloc())\n@@ -585,7 +586,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  Replace the contents of the %forward_list with copies of the\n        *  elements in the initializer_list @a __il.  This is linear in\n-       *  __il.size().\n+       *  the number of elements of __il.\n        */\n       forward_list&\n       operator=(std::initializer_list<_Tp> __il)\n@@ -603,8 +604,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  in the range [@a __first,@a __last).\n        *\n        *  Note that the assignment completely changes the %forward_list and\n-       *  that the resulting %forward_list's size is the same as the number\n-       *  of elements assigned.  Old data may be lost.\n+       *  that the number of elements of the resulting %forward_list's is the\n+       *  same as the number of elements assigned.  Old data is lost.\n        */\n       template<typename _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n@@ -620,10 +621,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @param  __n  Number of elements to be assigned.\n        *  @param  __val  Value to be assigned.\n        *\n-       *  This function fills a %forward_list with @a __n copies of the given\n-       *  value.  Note that the assignment completely changes the\n-       *  %forward_list and that the resulting %forward_list's size is the\n-       *  same as the number of elements assigned.  Old data may be lost.\n+       *  This function fills a %forward_list with @a __n copies of the\n+       *  given value.  Note that the assignment completely changes the\n+       *  %forward_list, and that the resulting %forward_list has __n\n+       *  elements.  Old data is lost.\n        */\n       void\n       assign(size_type __n, const _Tp& __val)\n@@ -742,7 +743,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return this->_M_impl._M_head._M_next == 0; }\n \n       /**\n-       *  Returns the largest possible size of %forward_list.\n+       *  Returns the largest possible number of elements of %forward_list.\n        */\n       size_type\n       max_size() const noexcept\n@@ -996,9 +997,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  This function will %resize the %forward_list to the specified\n        *  number of elements.  If the number is smaller than the\n-       *  %forward_list's current size the %forward_list is truncated,\n-       *  otherwise the %forward_list is extended and the new elements\n-       *  are default constructed.\n+       *  %forward_list's current number of elements the %forward_list\n+       *  is truncated, otherwise the %forward_list is extended and the\n+       *  new elements are default constructed.\n        */\n       void\n       resize(size_type __sz);\n@@ -1011,9 +1012,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *\n        *  This function will %resize the %forward_list to the specified\n        *  number of elements.  If the number is smaller than the\n-       *  %forward_list's current size the %forward_list is truncated,\n-       *  otherwise the %forward_list is extended and new elements are\n-       *  populated with given data.\n+       *  %forward_list's current number of elements the %forward_list\n+       *  is truncated, otherwise the %forward_list is extended and new\n+       *  elements are populated with given data.\n        */\n       void\n       resize(size_type __sz, const value_type& __val);\n@@ -1233,11 +1234,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  @brief  Forward list equality comparison.\n    *  @param  __lx  A %forward_list\n    *  @param  __ly  A %forward_list of the same type as @a __lx.\n-   *  @return  True iff the size and elements of the forward lists are equal.\n+   *  @return  True iff the elements of the forward lists are equal.\n    *\n-   *  This is an equivalence relation.  It is linear in the size of the\n-   *  forward lists.  Deques are considered equivalent if corresponding\n-   *  elements compare equal.\n+   *  This is an equivalence relation.  It is linear in the number of \n+   *  elements of the forward lists.  Deques are considered equivalent\n+   *  if corresponding elements compare equal.\n    */\n   template<typename _Tp, typename _Alloc>\n     bool\n@@ -1250,8 +1251,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n    *  @param  __ly  A %forward_list of the same type as @a __lx.\n    *  @return  True iff @a __lx is lexicographically less than @a __ly.\n    *\n-   *  This is a total ordering relation.  It is linear in the size of the\n-   *  forward lists.  The elements must be comparable with @c <.\n+   *  This is a total ordering relation.  It is linear in the number of \n+   *  elements of the forward lists.  The elements must be comparable\n+   *  with @c <.\n    *\n    *  See std::lexicographical_compare() for how the determination is made.\n    */"}]}