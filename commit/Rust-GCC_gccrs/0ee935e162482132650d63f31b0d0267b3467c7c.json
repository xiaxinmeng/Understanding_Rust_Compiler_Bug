{"sha": "0ee935e162482132650d63f31b0d0267b3467c7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVlOTM1ZTE2MjQ4MjEzMjY1MGQ2M2YzMWIwZDAyNjdiMzQ2N2M3Yw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-06-21T03:55:35Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-06-21T03:55:35Z"}, "message": "ThreadGroup.java (add(Thread)): Rename to addThread() to comply with classpath VM spec.\n\n2000-06-21  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\t* java/lang/ThreadGroup.java (add(Thread)): Rename to addThread() to\n\tcomply with classpath VM spec.\n\t(add(Group)): Rename to addGroup().\n\t* java/lang/Thread.java (Thread): Use addThread().\n\t* java/lang/natThread.cc (finish_): Use removeThread().\n\nFrom-SVN: r34627", "tree": {"sha": "0afcb152ed84aa452c15ae3a61cad3b4f6cf3a06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0afcb152ed84aa452c15ae3a61cad3b4f6cf3a06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ee935e162482132650d63f31b0d0267b3467c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee935e162482132650d63f31b0d0267b3467c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee935e162482132650d63f31b0d0267b3467c7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee935e162482132650d63f31b0d0267b3467c7c/comments", "author": null, "committer": null, "parents": [{"sha": "063a4b851f3a4fb54f0088cbe4353863359e6629", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/063a4b851f3a4fb54f0088cbe4353863359e6629", "html_url": "https://github.com/Rust-GCC/gccrs/commit/063a4b851f3a4fb54f0088cbe4353863359e6629"}], "stats": {"total": 59, "additions": 42, "deletions": 17}, "files": [{"sha": "a6957f89550327cfc6430cf67ab09ef63d347eed", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee935e162482132650d63f31b0d0267b3467c7c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee935e162482132650d63f31b0d0267b3467c7c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0ee935e162482132650d63f31b0d0267b3467c7c", "patch": "@@ -1,3 +1,11 @@\n+2000-06-21  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* java/lang/ThreadGroup.java (add(Thread)): Rename to addThread() to\n+\tcomply with classpath VM spec.\n+\t(add(Group)): Rename to addGroup().\n+\t* java/lang/Thread.java (Thread): Use addThread().\n+\t* java/lang/natThread.cc (finish_): Use removeThread().\n+\n 2000-06-20  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/lang/ThreadGroup.java: Merged with classpath.\n@@ -591,6 +599,7 @@\n \t* include/i386-signal.h (MAKE_THROW_FRAME): Ditto.\n \t* include/ppc-signal.h: New file.\n \n+>>>>>>> 1.385\n 2000-05-18  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \t* java/lang/Thread.java: Declare `data' as Object, not RawData."}, {"sha": "5b789630f8670492056402a023edcd8a41762577", "filename": "libjava/java/lang/Thread.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee935e162482132650d63f31b0d0267b3467c7c/libjava%2Fjava%2Flang%2FThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee935e162482132650d63f31b0d0267b3467c7c/libjava%2Fjava%2Flang%2FThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.java?ref=0ee935e162482132650d63f31b0d0267b3467c7c", "patch": "@@ -220,7 +220,7 @@ public Thread (ThreadGroup g, Runnable r, String n)\n       throw new NullPointerException ();\n \n     name = n;\n-    group.add(this);\n+    group.addThread(this);\n     runnable = r;\n \n     data = null;"}, {"sha": "564c48d623e8b99c8b3460e9d10b386b0474d40f", "filename": "libjava/java/lang/ThreadGroup.java", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee935e162482132650d63f31b0d0267b3467c7c/libjava%2Fjava%2Flang%2FThreadGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee935e162482132650d63f31b0d0267b3467c7c/libjava%2Fjava%2Flang%2FThreadGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThreadGroup.java?ref=0ee935e162482132650d63f31b0d0267b3467c7c", "patch": "@@ -1,11 +1,28 @@\n /* java.lang.ThreadGroup\n    Copyright (C) 1998, 2000 Free Software Foundation, Inc.\n- \n-This file is part of libgcj.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n  \n package java.lang;\n \n@@ -42,8 +59,7 @@\n   private Vector groups = new Vector();\n   private boolean daemon_flag = false;\n   private boolean destroyed_flag = false;\n-\n-  int maxpri = Thread.MAX_PRIORITY;\n+  private int maxpri = Thread.MAX_PRIORITY;\n \n   private ThreadGroup()\n   {\n@@ -76,7 +92,7 @@ public ThreadGroup(ThreadGroup parent, String name)\n     this.name = name;\n     maxpri = parent.maxpri;\n     daemon_flag = parent.daemon_flag;\n-    parent.add(this);\n+    parent.addGroup(this);\n   }\n \n   /** Get the name of this ThreadGroup.\n@@ -416,7 +432,7 @@ public final void destroy()\n       throw new IllegalThreadStateException(\"Already destroyed.\");\n     checkDestroy ();\n     if (parent != null)\n-      parent.remove(this);\n+      parent.removeGroup(this);\n     destroyed_flag = true;\n     parent = null;\n \n@@ -515,7 +531,7 @@ public final void checkAccess()\n   }\n \n   // This is called to add a Thread to our internal list.\n-  final void add(Thread t)\n+  final void addThread(Thread t)\n   {\n     if (destroyed_flag)\n       throw new IllegalThreadStateException (\"ThreadGroup is destroyed\");\n@@ -524,7 +540,7 @@ final void add(Thread t)\n   }\n \n   // This is called to remove a Thread from our internal list.\n-  final void remove(Thread t)\n+  final void removeThread(Thread t)\n   {\n     if (destroyed_flag)\n       throw new IllegalThreadStateException ();\n@@ -535,27 +551,27 @@ final void remove(Thread t)\n       {\n \t// We inline destroy to avoid the access check.\n \tif (parent != null)\n-\t  parent.remove(this);\n+\t  parent.removeGroup(this);\n \tdestroyed_flag = true;\n       }\n   }\n \n   // This is called to add a ThreadGroup to our internal list.\n-  final void add(ThreadGroup g)\n+  final void addGroup(ThreadGroup g)\n   {\n     groups.addElement(g);\n   }\n \n   // This is called to remove a ThreadGroup from our internal list.\n-  final void remove(ThreadGroup g)\n+  final void removeGroup(ThreadGroup g)\n   {\n     groups.removeElement(g);\n     // Daemon groups are automatically destroyed when all their threads die.\n     if (daemon_flag && groups.size() == 0 && threads.size() == 0)\n       {\n \t// We inline destroy to avoid the access check.\n \tif (parent != null)\n-\t  parent.remove(this);\t\n+\t  parent.removeGroup(this);\t\n \tdestroyed_flag = true;\n       }\n   }"}, {"sha": "2b9afb53dec2681568fdbdb4e709115a05bc3f0b", "filename": "libjava/java/lang/natThread.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee935e162482132650d63f31b0d0267b3467c7c/libjava%2Fjava%2Flang%2FnatThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee935e162482132650d63f31b0d0267b3467c7c/libjava%2Fjava%2Flang%2FnatThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatThread.cc?ref=0ee935e162482132650d63f31b0d0267b3467c7c", "patch": "@@ -175,7 +175,7 @@ java::lang::Thread::finish_ ()\n {\n   natThread *nt = (natThread *) data;\n   \n-  group->remove (this);\n+  group->removeThread (this);\n \n #ifdef ENABLE_JVMPI  \n   if (_Jv_JVMPI_Notify_THREAD_END)"}]}