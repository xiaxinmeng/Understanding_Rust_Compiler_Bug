{"sha": "bbe996ec7145da4d484bce0368ddd7b3aa5212bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJlOTk2ZWM3MTQ1ZGE0ZDQ4NGJjZTAzNjhkZGQ3YjNhYTUyMTJiZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-20T15:13:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-10-20T15:13:30Z"}, "message": "re PR target/47989 (-mrecip causes 482.sphinx3, 464.h264ref and 481.wrf to miscompare)\n\n\tPR target/47989\n\t* config/i386/i386.h (RECIP_MASK_DEFAULT): New define.\n\t* config/i386/i386.op (recip_mask): Initialize with RECIP_MASK_DEFAULT.\n\t* doc/invoke.texi (ix86 Options, -mrecip): Document that GCC\n\timplements vectorized single float division and vectorized sqrtf(x)\n\twith reciprocal sequence with additional Newton-Raphson step with\n\t-ffast-math.\n\nFrom-SVN: r180256", "tree": {"sha": "b2865b0329a5ef25c74c1e8566b4243511b4c51a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2865b0329a5ef25c74c1e8566b4243511b4c51a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbe996ec7145da4d484bce0368ddd7b3aa5212bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe996ec7145da4d484bce0368ddd7b3aa5212bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbe996ec7145da4d484bce0368ddd7b3aa5212bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbe996ec7145da4d484bce0368ddd7b3aa5212bd/comments", "author": null, "committer": null, "parents": [{"sha": "eb405c4669307ce3b5026984e010faf78571e8b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb405c4669307ce3b5026984e010faf78571e8b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb405c4669307ce3b5026984e010faf78571e8b3"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "eeed56d67e3fbca78964d001f595f548092ac363", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe996ec7145da4d484bce0368ddd7b3aa5212bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe996ec7145da4d484bce0368ddd7b3aa5212bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbe996ec7145da4d484bce0368ddd7b3aa5212bd", "patch": "@@ -1,3 +1,13 @@\n+2011-10-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/47989\n+\t* config/i386/i386.h (RECIP_MASK_DEFAULT): New define.\n+\t* config/i386/i386.op (recip_mask): Initialize with RECIP_MASK_DEFAULT.\n+\t* doc/invoke.texi (ix86 Options, -mrecip): Document that GCC\n+\timplements vectorized single float division and vectorized sqrtf(x)\n+\twith reciprocal sequence with additional Newton-Raphson step with\n+\t-ffast-math.\n+\n 2011-10-20  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR other/50659\n@@ -33,8 +43,7 @@\n \n 2011-10-19  David S. Miller  <davem@davemloft.net>\n \n-\t* config/sparc/sparc.c (sparc_expand_move): Use\n-\tcan_create_pseudo_p.\n+\t* config/sparc/sparc.c (sparc_expand_move): Use can_create_pseudo_p.\n \t(sparc_emit_set_const32): Likewise.\n \t(sparc_emit_set_const64_longway): Likewise.\n \t(sparc_emit_set_const64): Likewise.\n@@ -279,8 +288,8 @@\n \n 2011-10-19  Jan Hubicka  <jh@suse.cz>\n \n-\t* cgraphunit.c (handle_alias_pairs): Also handle wekref with destination\n-\tdeclared.\n+\t* cgraphunit.c (handle_alias_pairs): Also handle wekref with\n+\tdestination declared.\n \t(output_weakrefs): New function.\n \t* varpool.c (varpool_create_variable_alias): Handle external aliases.\n \n@@ -319,7 +328,6 @@\n 2011-10-18  Andrew Stubbs  <ams@codesourcery.com>\n \n \tPR tree-optimization/50717\n-\n \t* tree-ssa-math-opts.c (is_widening_mult_p): Remove the 'type'\n \tparameter.  Calculate 'type' from stmt.\n \t(convert_mult_to_widen): Update call the is_widening_mult_p.\n@@ -668,8 +676,7 @@\n \n 2011-10-17  Sergio Durigan Junior  <sergiodj@redhat.com>\n \n-\t* configure.ac: Display `yes' if the SystemTap header has been\n-\tfound.\n+\t* configure.ac: Display `yes' if the SystemTap header has been found.\n \t* configure: Regenerate.\n \n 2011-10-08  Andi Kleen  <ak@linux.intel.com>\n@@ -685,8 +692,7 @@\n 2011-10-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/50729\n-\t* tree-vrp.c (extract_range_from_unary_expr_1): Remove\n-\tredundant test.\n+\t* tree-vrp.c (extract_range_from_unary_expr_1): Remove redundant test.\n \t(simplify_conversion_using_ranges): Properly test the\n \tintermediate result.\n \n@@ -709,8 +715,7 @@\n 2011-10-15  Tom Tromey  <tromey@redhat.com>\n \t    Dodji Seketeli  <dodji@redhat.com>\n \n-\t* input.c (ONE_K, ONE_M, SCALE, STAT_LABEL, FORMAT_AMOUNT): New\n-\tmacros.\n+\t* input.c (ONE_K, ONE_M, SCALE, STAT_LABEL, FORMAT_AMOUNT): New macros.\n \t(num_expanded_macros_counter, num_macro_tokens_counter): Declare\n \tnew counters.\n \t(dump_line_table_statistics): Define new function.\n@@ -721,8 +726,7 @@\n \t    Dodji Seketeli  <dodji@redhat.com>\n \n \t* doc/cppopts.texi: Document -fdebug-cpp.\n-\t* doc/invoke.texi: Add -fdebug-cpp to the list of preprocessor\n-\toptions.\n+\t* doc/invoke.texi: Add -fdebug-cpp to the list of preprocessor options.\n \n 2011-10-15  Tom Tromey  <tromey@redhat.com>\n \t    Dodji Seketeli  <dodji@redhat.com>\n@@ -759,8 +763,7 @@\n \t(LOCATION_COLUMN): New accessor\n \t(in_system_header_at): Use linemap_location_in_system_header_p.\n \t* diagnostic.c (diagnostic_report_current_module): Adjust to avoid\n-\ttouching the internals of struct line_map.  Use the public API.\n-\tinstead.\n+\ttouching the internals of struct line_map.  Use the public API instead.\n \t(diagnostic_report_diagnostic): Don't use relational operator '<'\n \ton virtual locations.  Use linemap_location_before_p instead.\n \t* input.c (expand_location): Adjust to expand to the tokens'\n@@ -1280,9 +1283,8 @@\n 2011-10-12  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* function.c (prepare_shrink_wrap, bb_active_p): New function.\n-\t(thread_prologue_and_epilogue_insns): Use bb_active_p.\n-\tCall prepare_shrink_wrap, then recompute bb_active_p for the\n-\tlast block.\n+\t(thread_prologue_and_epilogue_insns): Use bb_active_p.  Call\n+\tprepare_shrink_wrap, then recompute bb_active_p for the last block.\n \n 2011-10-12  Joseph Myers  <joseph@codesourcery.com>\n \n@@ -1526,8 +1528,8 @@\n \n 2011-10-10  Georg-Johann Lay  <avr@gjlay.de>\n \n-\t* config/avr/avr.c (avr_option_override): Set\n-\tflag_omit_frame_pointer to 0 if frame pointer is needed for unwinding.\n+\t* config/avr/avr.c (avr_option_override): Set flag_omit_frame_pointer\n+\tto 0 if frame pointer is needed for unwinding.\n \n 2011-10-10  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "7721c4658329085fea7d545eff33b71ffa6b7299", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe996ec7145da4d484bce0368ddd7b3aa5212bd/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe996ec7145da4d484bce0368ddd7b3aa5212bd/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=bbe996ec7145da4d484bce0368ddd7b3aa5212bd", "patch": "@@ -2322,6 +2322,7 @@ extern void debug_dispatch_window (int);\n #define RECIP_MASK_VEC_SQRT\t0x08\n #define RECIP_MASK_ALL\t(RECIP_MASK_DIV | RECIP_MASK_SQRT \\\n \t\t\t | RECIP_MASK_VEC_DIV | RECIP_MASK_VEC_SQRT)\n+#define RECIP_MASK_DEFAULT (RECIP_MASK_VEC_DIV | RECIP_MASK_VEC_SQRT)\n \n #define TARGET_RECIP_DIV\t((recip_mask & RECIP_MASK_DIV) != 0)\n #define TARGET_RECIP_SQRT\t((recip_mask & RECIP_MASK_SQRT) != 0)"}, {"sha": "6c516e7b8695f3bef761f3d1c239deccc75bba71", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe996ec7145da4d484bce0368ddd7b3aa5212bd/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe996ec7145da4d484bce0368ddd7b3aa5212bd/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=bbe996ec7145da4d484bce0368ddd7b3aa5212bd", "patch": "@@ -32,7 +32,7 @@ Variable\n HOST_WIDE_INT ix86_isa_flags_explicit\n \n TargetVariable\n-int recip_mask\n+int recip_mask = RECIP_MASK_DEFAULT\n \n Variable\n int recip_mask_explicit"}, {"sha": "09e115c55c7fbaa0bffcfaab2b1267e0f72378cf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbe996ec7145da4d484bce0368ddd7b3aa5212bd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbe996ec7145da4d484bce0368ddd7b3aa5212bd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bbe996ec7145da4d484bce0368ddd7b3aa5212bd", "patch": "@@ -12922,7 +12922,12 @@ Note that while the throughput of the sequence is higher than the throughput\n of the non-reciprocal instruction, the precision of the sequence can be\n decreased by up to 2 ulp (i.e. the inverse of 1.0 equals 0.99999994).\n \n-Note that GCC implements 1.0f/sqrtf(x) in terms of RSQRTSS (or RSQRTPS)\n+Note that GCC implements @code{1.0f/sqrtf(@var{x})} in terms of RSQRTSS\n+(or RSQRTPS) already with @option{-ffast-math} (or the above option\n+combination), and doesn't need @option{-mrecip}.\n+\n+Also note that GCC emits the above sequence with additional Newton-Raphson step\n+for vectorized single float division and vectorized @code{sqrtf(@var{x})}\n already with @option{-ffast-math} (or the above option combination), and\n doesn't need @option{-mrecip}.\n "}]}