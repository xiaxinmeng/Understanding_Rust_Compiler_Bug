{"sha": "e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI1MjBjNDFlZDliMGIwNmNkYjgyZTZmMmE3NjdkMGQ4YmJiMjgzMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-10-25T05:41:37Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-10-25T05:41:37Z"}, "message": "constraints.md (Y0): Rename register constraint to Yz.\n\n        * config/i386/constraints.md (Y0): Rename register constraint to Yz.\n        (Yt): Rename register constraint to Y2.\n        * config/i386/sse.md: Use renamed register constraints.\n        * config/i386/mmx.md: Ditto.\n        * config/i386/i386.md: Ditto.\n\n        * config/i386/i386.md (*dummy_extendsfdf2): Fix operand 1 constraint.\n\nFrom-SVN: r129622", "tree": {"sha": "495dfac93ad7f19b81309a02215f82e1bd462ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/495dfac93ad7f19b81309a02215f82e1bd462ab8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833/comments", "author": null, "committer": null, "parents": [{"sha": "acc48927fa666758a5df68643f87a6dfc05373d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acc48927fa666758a5df68643f87a6dfc05373d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acc48927fa666758a5df68643f87a6dfc05373d4"}], "stats": {"total": 122, "additions": 67, "deletions": 55}, "files": [{"sha": "bff2ce29910244fd3451a2b0c5bae882de7b37d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833", "patch": "@@ -1,3 +1,15 @@\n+2007-10-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/constraints.md (Y0): Rename register constraint to Yz.\n+\t(Yt): Rename register constraint to Y2.\n+\t* config/i386/sse.md: Use renamed register constraints.\n+\t* config/i386/mmx.md: Ditto.\n+\t* config/i386/i386.md: Ditto.\n+\n+2007-10-25  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n+\n+\t* config/i386/i386.md (*dummy_extendsfdf2): Fix operand 1 constraint.\n+\n 2007-10-24  Chao-ying Fu  <fu@mips.com>\n \n \t* dwarf2out.c (base_type_die): Use DW_ATE_unsigned_fixed or"}, {"sha": "134ef61a459e64a19dc72acf903d778d5fdf2994", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833", "patch": "@@ -83,15 +83,15 @@\n  \"Any SSE register.\")\n \n ;; We use the Y prefix to denote any number of conditional register sets:\n-;;  0\tFirst SSE register.\n-;;  t\tSSE2 enabled\n+;;  z\tFirst SSE register.\n+;;  2\tSSE2 enabled\n ;;  i\tSSE2 inter-unit moves enabled\n ;;  m\tMMX inter-unit moves enabled\n \n-(define_register_constraint \"Y0\" \"TARGET_SSE ? SSE_FIRST_REG : NO_REGS\"\n+(define_register_constraint \"Yz\" \"TARGET_SSE ? SSE_FIRST_REG : NO_REGS\"\n  \"First SSE register (@code{%xmm0}).\")\n \n-(define_register_constraint \"Yt\" \"TARGET_SSE2 ? SSE_REGS : NO_REGS\"\n+(define_register_constraint \"Y2\" \"TARGET_SSE2 ? SSE_REGS : NO_REGS\"\n  \"@internal Any SSE register, when SSE2 is enabled.\")\n \n (define_register_constraint \"Yi\""}, {"sha": "168188397a1cd6381a19ac1ace5a028ce817584c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833", "patch": "@@ -2163,9 +2163,9 @@\n \n (define_insn \"*movdi_2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t\"=r  ,o  ,*y,m*y,*y,*Yt,m  ,*Yt,*Yt,*x,m ,*x,*x\")\n+\t\t\t\"=r  ,o  ,*y,m*y,*y,*Y2,m  ,*Y2,*Y2,*x,m ,*x,*x\")\n \t(match_operand:DI 1 \"general_operand\"\n-\t\t\t\"riFo,riF,C ,*y ,m ,C  ,*Yt,*Yt,m  ,C ,*x,*x,m \"))]\n+\t\t\t\"riFo,riF,C ,*y ,m ,C  ,*Y2,*Y2,m  ,C ,*x,*x,m \"))]\n   \"!TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    #\n@@ -2636,7 +2636,7 @@\n \n (define_insn \"*pushdf_nointeger\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=<,<,<,<\")\n-\t(match_operand:DF 1 \"general_no_elim_operand\" \"f,Fo,*r,Yt\"))]\n+\t(match_operand:DF 1 \"general_no_elim_operand\" \"f,Fo,*r,Y2\"))]\n   \"!TARGET_64BIT && !TARGET_INTEGER_DFMODE_MOVES\"\n {\n   /* This insn should be already split before reg-stack.  */\n@@ -2648,7 +2648,7 @@\n \n (define_insn \"*pushdf_integer\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=<,<,<\")\n-\t(match_operand:DF 1 \"general_no_elim_operand\" \"f,rFo,Yt\"))]\n+\t(match_operand:DF 1 \"general_no_elim_operand\" \"f,rFo,Y2\"))]\n   \"TARGET_64BIT || TARGET_INTEGER_DFMODE_MOVES\"\n {\n   /* This insn should be already split before reg-stack.  */\n@@ -2688,9 +2688,9 @@\n \n (define_insn \"*movdf_nointeger\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\t\"=f,m,f,*r  ,o  ,Yt*x,Yt*x,Yt*x ,m  \")\n+\t\t\t\"=f,m,f,*r  ,o  ,Y2*x,Y2*x,Y2*x ,m  \")\n \t(match_operand:DF 1 \"general_operand\"\n-\t\t\t\"fm,f,G,*roF,F*r,C   ,Yt*x,mYt*x,Yt*x\"))]\n+\t\t\t\"fm,f,G,*roF,F*r,C   ,Y2*x,mY2*x,Y2*x\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && ((optimize_size || !TARGET_INTEGER_DFMODE_MOVES) && !TARGET_64BIT)\n    && (reload_in_progress || reload_completed\n@@ -2805,9 +2805,9 @@\n \n (define_insn \"*movdf_integer_rex64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\"=f,m,f,r  ,m ,Yt*x,Yt*x,Yt*x,m   ,Yi,r \")\n+\t\t\"=f,m,f,r  ,m ,Y2*x,Y2*x,Y2*x,m   ,Yi,r \")\n \t(match_operand:DF 1 \"general_operand\"\n-\t\t\"fm,f,G,rmF,Fr,C   ,Yt*x,m   ,Yt*x,r ,Yi\"))]\n+\t\t\"fm,f,G,rmF,Fr,C   ,Y2*x,m   ,Y2*x,r ,Yi\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -2926,9 +2926,9 @@\n \n (define_insn \"*movdf_integer\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\"=f,m,f,r  ,o ,Yt*x,Yt*x,Yt*x,m   \")\n+\t\t\"=f,m,f,r  ,o ,Y2*x,Y2*x,Y2*x,m   \")\n \t(match_operand:DF 1 \"general_operand\"\n-\t\t\"fm,f,G,roF,Fr,C   ,Yt*x,m   ,Yt*x\"))]\n+\t\t\"fm,f,G,roF,Fr,C   ,Y2*x,m   ,Y2*x\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && !optimize_size && TARGET_INTEGER_DFMODE_MOVES\n    && (reload_in_progress || reload_completed\n@@ -3564,7 +3564,7 @@\n })\n \n (define_insn \"zero_extendsidi2_32\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,?r,?o,?*Ym,?*y,?*Yi,*Yt\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,?r,?o,?*Ym,?*y,?*Yi,*Y2\")\n \t(zero_extend:DI\n \t (match_operand:SI 1 \"nonimmediate_operand\" \"0,rm,r ,r   ,m  ,r   ,m\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -3581,7 +3581,7 @@\n    (set_attr \"type\" \"multi,multi,multi,mmxmov,mmxmov,ssemov,ssemov\")])\n \n (define_insn \"zero_extendsidi2_rex64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,o,?*Ym,?*y,?*Yi,*Yt\")\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,o,?*Ym,?*y,?*Yi,*Y2\")\n      (zero_extend:DI\n        (match_operand:SI 1 \"nonimmediate_operand\"  \"rm,0,r   ,m  ,r   ,m\")))]\n   \"TARGET_64BIT\"\n@@ -3867,7 +3867,7 @@\n ;; %%% Kill these when call knows how to work out a DFmode push earlier.\n (define_insn \"*dummy_extendsfdf2\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=<\")\n-\t(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fY\")))]\n+\t(float_extend:DF (match_operand:SF 1 \"nonimmediate_operand\" \"fY2\")))]\n   \"0\"\n   \"#\")\n \n@@ -4172,9 +4172,9 @@\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*truncdfsf_mixed\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=m,?fx*r,Yt\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\"   \"=m,?fx*r,Y2\")\n \t(float_truncate:SF\n-\t  (match_operand:DF 1 \"nonimmediate_operand\" \"f ,f    ,Ytm\")))\n+\t  (match_operand:DF 1 \"nonimmediate_operand\" \"f ,f    ,Y2m\")))\n    (clobber (match_operand:SF 2 \"memory_operand\"     \"=X,m    ,X\"))]\n   \"TARGET_MIX_SSE_I387\"\n {\n@@ -4276,7 +4276,7 @@\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*truncxfdf2_mixed\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?fYt*r\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?fY2*r\")\n \t(float_truncate:DF\n \t  (match_operand:XF 1 \"register_operand\" \"f,f\")))\n    (clobber (match_operand:DF 2 \"memory_operand\" \"=X,m\"))]\n@@ -4503,7 +4503,7 @@\n \n ;; Avoid vector decoded forms of the instruction.\n (define_peephole2\n-  [(match_scratch:DF 2 \"Yt\")\n+  [(match_scratch:DF 2 \"Y2\")\n    (set (match_operand:SSEMODEI24 0 \"register_operand\" \"\")\n \t(fix:SSEMODEI24 (match_operand:DF 1 \"memory_operand\" \"\")))]\n   \"TARGET_AVOID_VECTOR_DECODE && !optimize_size\""}, {"sha": "ee819936f6ec63e5e1b2a39bc53c614ef669f7d8", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833", "patch": "@@ -63,9 +63,9 @@\n \n (define_insn \"*mov<mode>_internal_rex64\"\n   [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=rm,r,*y,*y ,m ,*y,Yt,x,x ,m,r,x\")\n+\t\t\t\t\"=rm,r,*y,*y ,m ,*y,Y2,x,x ,m,r,x\")\n \t(match_operand:MMXMODEI 1 \"vector_move_operand\"\n-\t\t\t\t\"Cr ,m,C ,*ym,*y,Yt,*y,C,xm,x,x,r\"))]\n+\t\t\t\t\"Cr ,m,C ,*ym,*y,Y2,*y,C,xm,x,x,r\"))]\n   \"TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -87,9 +87,9 @@\n \n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:MMXMODEI 0 \"nonimmediate_operand\"\n-\t\t\t\"=*y,*y ,m ,*y ,*Yt,*Yt,*Yt ,m  ,*x,*x,*x,m ,?r ,?m\")\n+\t\t\t\"=*y,*y ,m ,*y ,*Y2,*Y2,*Y2 ,m  ,*x,*x,*x,m ,?r ,?m\")\n \t(match_operand:MMXMODEI 1 \"vector_move_operand\"\n-\t\t\t\"C  ,*ym,*y,*Yt,*y ,C  ,*Ytm,*Yt,C ,*x,m ,*x,irm,r\"))]\n+\t\t\t\"C  ,*ym,*y,*Y2,*y ,C  ,*Y2m,*Y2,C ,*x,m ,*x,irm,r\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -122,9 +122,9 @@\n \n (define_insn \"*movv2sf_internal_rex64\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=rm,r,*y ,*y ,m ,*y,Yt,x,x,x,m,r,x\")\n+\t\t\t\t\"=rm,r,*y ,*y ,m ,*y,Y2,x,x,x,m,r,x\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n-\t\t\t\t\"Cr ,m ,C ,*ym,*y,Yt,*y,C,x,m,x,x,r\"))]\n+\t\t\t\t\"Cr ,m ,C ,*ym,*y,Y2,*y,C,x,m,x,x,r\"))]\n   \"TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -147,9 +147,9 @@\n \n (define_insn \"*movv2sf_internal\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t\t\t\"=*y,*y ,m,*y ,*Yt,*x,*x,*x,m ,?r ,?m\")\n+\t\t\t\"=*y,*y ,m,*y ,*Y2,*x,*x,*x,m ,?r ,?m\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n-\t\t\t\"C ,*ym,*y,*Yt,*y ,C ,*x,m ,*x,irm,r\"))]\n+\t\t\t\"C ,*ym,*y,*Y2,*y ,C ,*x,m ,*x,irm,r\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -1171,9 +1171,9 @@\n })\n \n (define_insn \"*vec_extractv2si_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=y,Yt,Yt,x,frxy\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=y,Y2,Y2,x,frxy\")\n \t(vec_select:SI\n-\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \" 0,0 ,Yt,0,o\")\n+\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \" 0,0 ,Y2,0,o\")\n \t  (parallel [(const_int 1)])))]\n   \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@"}, {"sha": "b35ba6f7e892dc40e3345d869701d00f83978f6f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e2520c41ed9b0b06cdb82e6f2a767d0d8bbb2833", "patch": "@@ -1457,7 +1457,7 @@\n })\n \n (define_insn \"vec_setv4sf_0\"\n-  [(set (match_operand:V4SF 0 \"nonimmediate_operand\"  \"=x,x,Yt,m\")\n+  [(set (match_operand:V4SF 0 \"nonimmediate_operand\"  \"=x,x,Y2,m\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n \t    (match_operand:SF 2 \"general_operand\"     \" x,m,*r,x*rfF\"))\n@@ -3331,10 +3331,10 @@\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"*vec_concatv2df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\"     \"=Yt,Yt,Yt,x,x\")\n+  [(set (match_operand:V2DF 0 \"register_operand\"     \"=Y2,Y2,Y2,x,x\")\n \t(vec_concat:V2DF\n \t  (match_operand:DF 1 \"nonimmediate_operand\" \" 0 ,0 ,m ,0,0\")\n-\t  (match_operand:DF 2 \"vector_move_operand\"  \" Yt,m ,C ,x,m\")))]\n+\t  (match_operand:DF 2 \"vector_move_operand\"  \" Y2,m ,C ,x,m\")))]\n   \"TARGET_SSE\"\n   \"@\n    unpcklpd\\t{%2, %0|%0, %2}\n@@ -5260,7 +5260,7 @@\n   \"operands[2] = CONST0_RTX (V4SImode);\")\n \n (define_insn \"sse2_loadld\"\n-  [(set (match_operand:V4SI 0 \"register_operand\"       \"=Yt,Yi,x,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\"       \"=Y2,Yi,x,x\")\n \t(vec_merge:V4SI\n \t  (vec_duplicate:V4SI\n \t    (match_operand:SI 2 \"nonimmediate_operand\" \"m  ,r ,m,x\"))\n@@ -5397,9 +5397,9 @@\n    (set_attr \"mode\" \"V2SF,V4SF,V2SF\")])\n \n (define_insn \"*vec_dupv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=Yt,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=Y2,x\")\n \t(vec_duplicate:V4SI\n-\t  (match_operand:SI 1 \"register_operand\" \" Yt,0\")))]\n+\t  (match_operand:SI 1 \"register_operand\" \" Y2,0\")))]\n   \"TARGET_SSE\"\n   \"@\n    pshufd\\t{$0, %1, %0|%0, %1, 0}\n@@ -5408,7 +5408,7 @@\n    (set_attr \"mode\" \"TI,V4SF\")])\n \n (define_insn \"*vec_dupv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yt,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=Y2,x\")\n \t(vec_duplicate:V2DI\n \t  (match_operand:DI 1 \"register_operand\" \" 0 ,0\")))]\n   \"TARGET_SSE\"\n@@ -5422,10 +5422,10 @@\n ;; nonimmediate_operand for operand 2 and *not* allowing memory for the SSE\n ;; alternatives pretty much forces the MMX alternative to be chosen.\n (define_insn \"*sse2_concatv2si\"\n-  [(set (match_operand:V2SI 0 \"register_operand\"     \"=Yt, Yt,*y,*y\")\n+  [(set (match_operand:V2SI 0 \"register_operand\"     \"=Y2, Y2,*y,*y\")\n \t(vec_concat:V2SI\n \t  (match_operand:SI 1 \"nonimmediate_operand\" \" 0 ,rm , 0,rm\")\n-\t  (match_operand:SI 2 \"reg_or_0_operand\"     \" Yt,C  ,*y, C\")))]\n+\t  (match_operand:SI 2 \"reg_or_0_operand\"     \" Y2,C  ,*y, C\")))]\n   \"TARGET_SSE2\"\n   \"@\n    punpckldq\\t{%2, %0|%0, %2}\n@@ -5450,10 +5450,10 @@\n    (set_attr \"mode\" \"V4SF,V4SF,DI,DI\")])\n \n (define_insn \"*vec_concatv4si_1\"\n-  [(set (match_operand:V4SI 0 \"register_operand\"       \"=Yt,x,x\")\n+  [(set (match_operand:V4SI 0 \"register_operand\"       \"=Y2,x,x\")\n \t(vec_concat:V4SI\n \t  (match_operand:V2SI 1 \"register_operand\"     \" 0 ,0,0\")\n-\t  (match_operand:V2SI 2 \"nonimmediate_operand\" \" Yt,x,m\")))]\n+\t  (match_operand:V2SI 2 \"nonimmediate_operand\" \" Y2,x,m\")))]\n   \"TARGET_SSE\"\n   \"@\n    punpcklqdq\\t{%2, %0|%0, %2}\n@@ -5463,10 +5463,10 @@\n    (set_attr \"mode\" \"TI,V4SF,V2SF\")])\n \n (define_insn \"vec_concatv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Yt,?Yt,Yt,x,x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2,?Y2,Y2,x,x,x\")\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\" \"  m,*y ,0 ,0,0,m\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"  \"  C,  C,Yt,x,m,0\")))]\n+\t  (match_operand:DI 2 \"vector_move_operand\"  \"  C,  C,Y2,x,m,0\")))]\n   \"!TARGET_64BIT && TARGET_SSE\"\n   \"@\n    movq\\t{%1, %0|%0, %1}\n@@ -5479,10 +5479,10 @@\n    (set_attr \"mode\" \"TI,TI,TI,V4SF,V2SF,V2SF\")])\n \n (define_insn \"*vec_concatv2di_rex\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Yt,Yi,!Yt,Yt,x,x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\"     \"=Y2,Yi,!Y2,Y2,x,x,x\")\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\" \"  m,r ,*y ,0 ,0,0,m\")\n-\t  (match_operand:DI 2 \"vector_move_operand\"  \"  C,C ,C  ,Yt,x,m,0\")))]\n+\t  (match_operand:DI 2 \"vector_move_operand\"  \"  C,C ,C  ,Y2,x,m,0\")))]\n   \"TARGET_64BIT\"\n   \"@\n    movq\\t{%1, %0|%0, %1}\n@@ -6760,7 +6760,7 @@\n   [(set (match_operand:V2DF 0 \"reg_not_xmm0_operand\" \"=x\")\n \t(unspec:V2DF [(match_operand:V2DF 1 \"reg_not_xmm0_operand\"  \"0\")\n \t\t      (match_operand:V2DF 2 \"nonimm_not_xmm0_operand\" \"xm\")\n-\t\t      (match_operand:V2DF 3 \"register_operand\" \"Y0\")]\n+\t\t      (match_operand:V2DF 3 \"register_operand\" \"Yz\")]\n \t\t     UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n   \"blendvpd\\t{%3, %2, %0|%0, %2, %3}\"\n@@ -6772,7 +6772,7 @@\n   [(set (match_operand:V4SF 0 \"reg_not_xmm0_operand\" \"=x\")\n \t(unspec:V4SF [(match_operand:V4SF 1 \"reg_not_xmm0_operand\" \"0\")\n \t\t      (match_operand:V4SF 2 \"nonimm_not_xmm0_operand\" \"xm\")\n-\t\t      (match_operand:V4SF 3 \"register_operand\" \"Y0\")]\n+\t\t      (match_operand:V4SF 3 \"register_operand\" \"Yz\")]\n \t\t     UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n   \"blendvps\\t{%3, %2, %0|%0, %2, %3}\"\n@@ -6843,7 +6843,7 @@\n   [(set (match_operand:V16QI 0 \"reg_not_xmm0_operand\" \"=x\")\n \t(unspec:V16QI [(match_operand:V16QI 1 \"reg_not_xmm0_operand\"  \"0\")\n \t\t       (match_operand:V16QI 2 \"nonimm_not_xmm0_operand\" \"xm\")\n-\t\t       (match_operand:V16QI 3 \"register_operand\" \"Y0\")]\n+\t\t       (match_operand:V16QI 3 \"register_operand\" \"Yz\")]\n \t\t      UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n   \"pblendvb\\t{%3, %2, %0|%0, %2, %3}\"\n@@ -7315,7 +7315,7 @@\n \t   (match_operand:SI 5 \"register_operand\" \"d,d\")\n \t   (match_operand:SI 6 \"const_0_to_255_operand\" \"n,n\")]\n \t  UNSPEC_PCMPESTR))\n-   (set (match_operand:V16QI 1 \"register_operand\" \"=Y0,Y0\")\n+   (set (match_operand:V16QI 1 \"register_operand\" \"=Yz,Yz\")\n \t(unspec:V16QI\n \t  [(match_dup 2)\n \t   (match_dup 3)\n@@ -7387,7 +7387,7 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse4_2_pcmpestrm\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=Y0,Y0\")\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=Yz,Yz\")\n \t(unspec:V16QI\n \t  [(match_operand:V16QI 1 \"register_operand\" \"x,x\")\n \t   (match_operand:SI 2 \"register_operand\" \"a,a\")\n@@ -7420,7 +7420,7 @@\n \t   (match_operand:SI 3 \"register_operand\" \"d,d,d,d\")\n \t   (match_operand:SI 4 \"const_0_to_255_operand\" \"n,n,n,n\")]\n \t  UNSPEC_PCMPESTR))\n-   (clobber (match_scratch:V16QI 5 \"=Y0,Y0,X,X\"))\n+   (clobber (match_scratch:V16QI 5 \"=Yz,Yz,X,X\"))\n    (clobber (match_scratch:SI    6 \"= X, X,c,c\"))]\n   \"TARGET_SSE4_2\"\n   \"@\n@@ -7441,7 +7441,7 @@\n \t   (match_operand:V16QI 3 \"nonimmediate_operand\" \"x,m\")\n \t   (match_operand:SI 4 \"const_0_to_255_operand\" \"n,n\")]\n \t  UNSPEC_PCMPISTR))\n-   (set (match_operand:V16QI 1 \"register_operand\" \"=Y0,Y0\")\n+   (set (match_operand:V16QI 1 \"register_operand\" \"=Yz,Yz\")\n \t(unspec:V16QI\n \t  [(match_dup 2)\n \t   (match_dup 3)\n@@ -7502,7 +7502,7 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"sse4_2_pcmpistrm\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=Y0,Y0\")\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=Yz,Yz\")\n \t(unspec:V16QI\n \t  [(match_operand:V16QI 1 \"register_operand\" \"x,x\")\n \t   (match_operand:V16QI 2 \"nonimmediate_operand\" \"x,m\")\n@@ -7529,7 +7529,7 @@\n \t   (match_operand:V16QI 1 \"nonimmediate_operand\" \"x,m,x,m\")\n \t   (match_operand:SI 2 \"const_0_to_255_operand\" \"n,n,n,n\")]\n \t  UNSPEC_PCMPISTR))\n-   (clobber (match_scratch:V16QI 3 \"=Y0,Y0,X,X\"))\n+   (clobber (match_scratch:V16QI 3 \"=Yz,Yz,X,X\"))\n    (clobber (match_scratch:SI    4 \"= X, X,c,c\"))]\n   \"TARGET_SSE4_2\"\n   \"@"}]}