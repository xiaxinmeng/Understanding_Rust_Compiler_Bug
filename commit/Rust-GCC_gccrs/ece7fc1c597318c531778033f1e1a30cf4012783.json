{"sha": "ece7fc1c597318c531778033f1e1a30cf4012783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNlN2ZjMWM1OTczMThjNTMxNzc4MDMzZjFlMWEzMGNmNDAxMjc4Mw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2003-10-04T10:18:33Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2003-10-04T10:18:33Z"}, "message": "extend.texi: Document how GCC estimates and relies on the size of an asm.\n\n* doc/extend.texi: Document how GCC estimates and relies on the size\nof an asm.\n\nFrom-SVN: r72089", "tree": {"sha": "f5b296c92a0b9aad4a4156603a2dd8df18b78498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5b296c92a0b9aad4a4156603a2dd8df18b78498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ece7fc1c597318c531778033f1e1a30cf4012783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece7fc1c597318c531778033f1e1a30cf4012783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece7fc1c597318c531778033f1e1a30cf4012783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece7fc1c597318c531778033f1e1a30cf4012783/comments", "author": null, "committer": null, "parents": [{"sha": "78e82bbe0b7adf406b7b55fb6af0054a57d304d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e82bbe0b7adf406b7b55fb6af0054a57d304d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e82bbe0b7adf406b7b55fb6af0054a57d304d4"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "ebc9864beff46198ae0ffd538746adf4463b6ce4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece7fc1c597318c531778033f1e1a30cf4012783/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece7fc1c597318c531778033f1e1a30cf4012783/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ece7fc1c597318c531778033f1e1a30cf4012783", "patch": "@@ -1,3 +1,8 @@\n+2003-10-04  Richard Earnshaw  <reanrsha@arm.com>\n+\n+\t* doc/extend.texi: Document how GCC estimates and relies on the size\n+\tof an asm.\n+\n 2003-10-04  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_pad_arg_upward): Pad floating-point"}, {"sha": "36fbd2653bad62a7e6d2f8f5f956e5ae6be469ee", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece7fc1c597318c531778033f1e1a30cf4012783/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece7fc1c597318c531778033f1e1a30cf4012783/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ece7fc1c597318c531778033f1e1a30cf4012783", "patch": "@@ -4136,6 +4136,26 @@ If you are writing a header file that should be includable in ISO C\n programs, write @code{__asm__} instead of @code{asm}.  @xref{Alternate\n Keywords}.\n \n+@subsection Size of an @code{asm}\n+\n+Some targets require that GCC track the size of each instruction used in\n+order to generate correct code.  Because the final length of an\n+@code{asm} is only known by the assembler, GCC must make an estimate as\n+to how big it will be.  The estimate is formed by counting the number of\n+statements in the pattern of the @code{asm} and multiplying that by the\n+length of the longest instruction on that processor.  Statements in the\n+@code{asm} are identified by newline characters and whatever statement\n+separator characters are supported by the assembler; on most processors\n+this is the `@code{;}' character.\n+\n+Normally, GCC's estimate is perfectly adequate to ensure that correct\n+code is generated, but it is possible to confuse the compiler if you use\n+pseudo instructions or assembler macros that expand into multiple real\n+instructions or if you use assembler directives that expand to more\n+space in the object file than would be needed for a single instruction.\n+If this happens then the assembler will produce a diagnostic saying that\n+a label is unreachable.\n+\n @subsection i386 floating point asm operands\n \n There are several rules on the usage of stack-like regs in"}]}