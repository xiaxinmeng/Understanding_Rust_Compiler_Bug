{"sha": "a47c20a77a20936d6d6fd5ebacb7dce43079a66f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3YzIwYTc3YTIwOTM2ZDZkNmZkNWViYWNiN2RjZTQzMDc5YTY2Zg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-07-29T17:12:54Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-07-29T17:12:54Z"}, "message": "defineclass.cc (handleField): Throw exception if field name is duplicated.\n\n\t* defineclass.cc (handleField): Throw exception if field name is\n\tduplicated.\n\t(handleMethod): Throw exception for duplicate method.\n\nFrom-SVN: r69928", "tree": {"sha": "994095e34ee432cdb5d4b8668ece34c1c9ad7aba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/994095e34ee432cdb5d4b8668ece34c1c9ad7aba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a47c20a77a20936d6d6fd5ebacb7dce43079a66f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a47c20a77a20936d6d6fd5ebacb7dce43079a66f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a47c20a77a20936d6d6fd5ebacb7dce43079a66f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a47c20a77a20936d6d6fd5ebacb7dce43079a66f/comments", "author": null, "committer": null, "parents": [{"sha": "b33ab7a9b05c55d942817dac4d8a9b473da7d3c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b33ab7a9b05c55d942817dac4d8a9b473da7d3c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b33ab7a9b05c55d942817dac4d8a9b473da7d3c2"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "ea7d7c7e6c5c1c6f661f7d97a6e3c6610ce1ef3e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a47c20a77a20936d6d6fd5ebacb7dce43079a66f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a47c20a77a20936d6d6fd5ebacb7dce43079a66f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a47c20a77a20936d6d6fd5ebacb7dce43079a66f", "patch": "@@ -1,3 +1,9 @@\n+2003-07-29  Tom Tromey  <tromey@redhat.com>\n+\n+\t* defineclass.cc (handleField): Throw exception if field name is\n+\tduplicated.\n+\t(handleMethod): Throw exception for duplicate method.\n+\n 2003-07-29  Tom Tromey  <tromey@redhat.com>\n \n \t* gnu/gcj/convert/natIconv.cc (write): Handle case where"}, {"sha": "4cd4f4f1936bc541c73e567fc57014645a8db671", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a47c20a77a20936d6d6fd5ebacb7dce43079a66f/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a47c20a77a20936d6d6fd5ebacb7dce43079a66f/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=a47c20a77a20936d6d6fd5ebacb7dce43079a66f", "patch": "@@ -75,7 +75,7 @@ struct _Jv_ClassReader {\n   // allways on.  You always want this as far as I can see, but it also\n   // controls weither identifiers and type descriptors/signatures are\n   // verified as legal.  This could be somewhat more expensive since it\n-  // will call Characher.isJavaIdentifier{Start,Part} for each character\n+  // will call Character.isJavaIdentifier{Start,Part} for each character\n   // in any identifier (field name or method name) it comes by.  Thus,\n   // it might be useful to turn off this verification for classes that\n   // come from a trusted source.  However, for GCJ, trusted classes are\n@@ -403,15 +403,15 @@ void _Jv_ClassReader::read_fields ()\n       int name_index       = read2u ();\n       int descriptor_index = read2u ();\n       int attributes_count = read2u ();\n-      \n+\n       check_tag (name_index, JV_CONSTANT_Utf8);\n       prepare_pool_entry (name_index, JV_CONSTANT_Utf8);\n \n       check_tag (descriptor_index, JV_CONSTANT_Utf8);\n       prepare_pool_entry (descriptor_index, JV_CONSTANT_Utf8);\n-      \n+\n       handleField (i, access_flags, name_index, descriptor_index);\n-      \n+\n       for (int j = 0; j < attributes_count; j++)\n \t{\n \t  read_one_field_attribute (i);\n@@ -1071,14 +1071,25 @@ void _Jv_ClassReader::handleField (int field_no,\n   field->nameIndex = name;\n #endif\n \n-  if (verify)\n-    verify_identifier (field_name);\n-\n-  // ignore flags we don't know about.  \n+  // Ignore flags we don't know about.  \n   field->flags = flags & Modifier::ALL_FLAGS;\n \n+  _Jv_Utf8Const* sig = pool_data[desc].utf8;\n+\n   if (verify)\n     {\n+      verify_identifier (field_name);\n+\n+      for (int i = 0; i < field_no; ++i)\n+\t{\n+\t  if (_Jv_equalUtf8Consts (field_name, def->fields[i].name)\n+\t      && _Jv_equalUtf8Consts (sig,\n+\t\t\t\t      // We know the other fields are\n+\t\t\t\t      // unresolved.\n+\t\t\t\t      (_Jv_Utf8Const *) def->fields[i].type))\n+\t    throw_class_format_error (\"duplicate field name\");\n+\t}\n+\n       if (field->flags & (Modifier::SYNCHRONIZED\n \t\t\t  | Modifier::NATIVE\n \t\t\t  | Modifier::INTERFACE\n@@ -1091,8 +1102,6 @@ void _Jv_ClassReader::handleField (int field_no,\n \tthrow_class_format_error (\"erroneous field access flags\");\n     }\n \n-  _Jv_Utf8Const* sig = pool_data[desc].utf8;\n-\n   if (verify)\n     _Jv_VerifyFieldSignature (sig);\n \n@@ -1233,6 +1242,14 @@ void _Jv_ClassReader::handleMethod\n \n       _Jv_VerifyMethodSignature (method->signature);\n \n+      for (int i = 0; i < mth_index; ++i)\n+\t{\n+\t  if (_Jv_equalUtf8Consts (method->name, def->methods[i].name)\n+\t      && _Jv_equalUtf8Consts (method->signature,\n+\t\t\t\t      def->methods[i].signature))\n+\t    throw_class_format_error (\"duplicate method\");\n+\t}\n+\n       if (method->accflags & (Modifier::VOLATILE\n \t\t\t      | Modifier::TRANSIENT\n \t\t\t      | Modifier::INTERFACE))"}]}