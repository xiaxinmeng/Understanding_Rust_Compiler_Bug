{"sha": "80c13ac5ec1a584561a2c474a5d61e7881ef4f82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjMTNhYzVlYzFhNTg0NTYxYTJjNDc0YTVkNjFlNzg4MWVmNGY4Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-03-13T15:12:59Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-03-13T15:12:59Z"}, "message": "[AArch64] Add a tlsdesc call pattern for SVE\n\ntlsdesc calls are guaranteed to preserve all Advanced SIMD registers,\nbut are not guaranteed to preserve the SVE extension of them.\nThe calls also don't preserve the SVE predicate registers.\n\nThe long-term plan for handling the SVE vector registers is CLOBBER_HIGH,\nwhich adds a clobber equivalent of TARGET_HARD_REGNO_CALL_PART_CLOBBERED.\nThe pattern can then directly model the fact that the low 128 bits are\npreserved and the upper bits are clobbered.\n\nHowever, it's too late now for that to be included in GCC 8, so this\npatch conservatively treats the whole vector register as being clobbered.\nThis has the obvious disadvantage that compiling for SVE can make NEON\ncode worse, but I don't think there's much we can do about that until\nCLOBBER_HIGH is in.\n\n2018-03-13  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64.md (V4_REGNUM, V8_REGNUM, V12_REGNUM)\n\t(V20_REGNUM, V24_REGNUM, V28_REGNUM, P1_REGNUM, P2_REGNUM, P3_REGNUM)\n\t(P4_REGNUM, P5_REGNUM, P6_REGNUM, P8_REGNUM, P9_REGNUM, P10_REGNUM)\n\t(P11_REGNUM, P12_REGNUM, P13_REGNUM, P14_REGNUM): New define_constants.\n\t(tlsdesc_small_<mode>): Turn a define_expand and use\n\ttlsdesc_small_sve_<mode> for SVE.  Rename original define_insn to...\n\t(tlsdesc_small_advsimd_<mode>): ...this.\n\t(tlsdesc_small_sve_<mode>): New pattern.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/tls_1.c: New test.\n\t* gcc.target/aarch64/sve/tls_2.C: Likewise.\n\nFrom-SVN: r258488", "tree": {"sha": "f4474018c3f338ac40f1da07aa44ae57d9698580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4474018c3f338ac40f1da07aa44ae57d9698580"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80c13ac5ec1a584561a2c474a5d61e7881ef4f82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c13ac5ec1a584561a2c474a5d61e7881ef4f82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80c13ac5ec1a584561a2c474a5d61e7881ef4f82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c13ac5ec1a584561a2c474a5d61e7881ef4f82/comments", "author": null, "committer": null, "parents": [{"sha": "11e9443f49729ae4ddfc9dda63b5ad7f65f33170", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e9443f49729ae4ddfc9dda63b5ad7f65f33170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11e9443f49729ae4ddfc9dda63b5ad7f65f33170"}], "stats": {"total": 143, "additions": 140, "deletions": 3}, "files": [{"sha": "8e150de2a570ec4c4663e2b9a1ce6717cbcdc4b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c13ac5ec1a584561a2c474a5d61e7881ef4f82/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c13ac5ec1a584561a2c474a5d61e7881ef4f82/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80c13ac5ec1a584561a2c474a5d61e7881ef4f82", "patch": "@@ -1,3 +1,14 @@\n+2018-03-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* config/aarch64/aarch64.md (V4_REGNUM, V8_REGNUM, V12_REGNUM)\n+\t(V20_REGNUM, V24_REGNUM, V28_REGNUM, P1_REGNUM, P2_REGNUM, P3_REGNUM)\n+\t(P4_REGNUM, P5_REGNUM, P6_REGNUM, P8_REGNUM, P9_REGNUM, P10_REGNUM)\n+\t(P11_REGNUM, P12_REGNUM, P13_REGNUM, P14_REGNUM): New define_constants.\n+\t(tlsdesc_small_<mode>): Turn a define_expand and use\n+\ttlsdesc_small_sve_<mode> for SVE.  Rename original define_insn to...\n+\t(tlsdesc_small_advsimd_<mode>): ...this.\n+\t(tlsdesc_small_sve_<mode>): New pattern.\n+\n 2018-03-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* config/aarch64/iterators.md (UNSPEC_SMUL_HIGHPART)"}, {"sha": "3a848f852d1935d820093c74391accbbd2dc68b7", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 77, "deletions": 3, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c13ac5ec1a584561a2c474a5d61e7881ef4f82/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c13ac5ec1a584561a2c474a5d61e7881ef4f82/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=80c13ac5ec1a584561a2c474a5d61e7881ef4f82", "patch": "@@ -57,7 +57,14 @@\n     (LR_REGNUM\t\t30)\n     (SP_REGNUM\t\t31)\n     (V0_REGNUM\t\t32)\n+    (V4_REGNUM\t\t36)\n+    (V8_REGNUM\t\t40)\n+    (V12_REGNUM\t\t44)\n     (V15_REGNUM\t\t47)\n+    (V16_REGNUM\t\t48)\n+    (V20_REGNUM\t\t52)\n+    (V24_REGNUM\t\t56)\n+    (V28_REGNUM\t\t60)\n     (V31_REGNUM\t\t63)\n     (LAST_SAVED_REGNUM\t63)\n     (SFP_REGNUM\t\t64)\n@@ -66,7 +73,20 @@\n     ;; Defined only to make the DWARF description simpler.\n     (VG_REGNUM\t\t67)\n     (P0_REGNUM\t\t68)\n+    (P1_REGNUM\t\t69)\n+    (P2_REGNUM\t\t70)\n+    (P3_REGNUM\t\t71)\n+    (P4_REGNUM\t\t72)\n+    (P5_REGNUM\t\t73)\n+    (P6_REGNUM\t\t74)\n     (P7_REGNUM\t\t75)\n+    (P8_REGNUM\t\t76)\n+    (P9_REGNUM\t\t77)\n+    (P10_REGNUM\t\t78)\n+    (P11_REGNUM\t\t79)\n+    (P12_REGNUM\t\t80)\n+    (P13_REGNUM\t\t81)\n+    (P14_REGNUM\t\t82)\n     (P15_REGNUM\t\t83)\n   ]\n )\n@@ -5787,14 +5807,68 @@\n    (set_attr \"length\" \"12\")]\n )\n \n-(define_insn \"tlsdesc_small_<mode>\"\n+(define_expand \"tlsdesc_small_<mode>\"\n+  [(unspec:PTR [(match_operand 0 \"aarch64_valid_symref\")] UNSPEC_TLSDESC)]\n+  \"TARGET_TLS_DESC\"\n+  {\n+    if (TARGET_SVE)\n+      emit_insn (gen_tlsdesc_small_sve_<mode> (operands[0]));\n+    else\n+      emit_insn (gen_tlsdesc_small_advsimd_<mode> (operands[0]));\n+    DONE;\n+  }\n+)\n+\n+;; tlsdesc calls preserve all core and Advanced SIMD registers except\n+;; R0 and LR.\n+(define_insn \"tlsdesc_small_advsimd_<mode>\"\n   [(set (reg:PTR R0_REGNUM)\n         (unspec:PTR [(match_operand 0 \"aarch64_valid_symref\" \"S\")]\n-\t\t   UNSPEC_TLSDESC))\n+\t\t    UNSPEC_TLSDESC))\n    (clobber (reg:DI LR_REGNUM))\n    (clobber (reg:CC CC_REGNUM))\n    (clobber (match_scratch:DI 1 \"=r\"))]\n-  \"TARGET_TLS_DESC\"\n+  \"TARGET_TLS_DESC && !TARGET_SVE\"\n+  \"adrp\\\\tx0, %A0\\;ldr\\\\t%<w>1, [x0, #%L0]\\;add\\\\t<w>0, <w>0, %L0\\;.tlsdesccall\\\\t%0\\;blr\\\\t%1\"\n+  [(set_attr \"type\" \"call\")\n+   (set_attr \"length\" \"16\")])\n+\n+;; For SVE, model tlsdesc calls as clobbering all vector and predicate\n+;; registers, on top of the usual R0 and LR.  In reality the calls\n+;; preserve the low 128 bits of the vector registers, but we don't\n+;; yet have a way of representing that in the instruction pattern.\n+(define_insn \"tlsdesc_small_sve_<mode>\"\n+  [(set (reg:PTR R0_REGNUM)\n+        (unspec:PTR [(match_operand 0 \"aarch64_valid_symref\" \"S\")]\n+\t\t    UNSPEC_TLSDESC))\n+   (clobber (reg:DI LR_REGNUM))\n+   (clobber (reg:CC CC_REGNUM))\n+   (clobber (reg:XI V0_REGNUM))\n+   (clobber (reg:XI V4_REGNUM))\n+   (clobber (reg:XI V8_REGNUM))\n+   (clobber (reg:XI V12_REGNUM))\n+   (clobber (reg:XI V16_REGNUM))\n+   (clobber (reg:XI V20_REGNUM))\n+   (clobber (reg:XI V24_REGNUM))\n+   (clobber (reg:XI V28_REGNUM))\n+   (clobber (reg:VNx2BI P0_REGNUM))\n+   (clobber (reg:VNx2BI P1_REGNUM))\n+   (clobber (reg:VNx2BI P2_REGNUM))\n+   (clobber (reg:VNx2BI P3_REGNUM))\n+   (clobber (reg:VNx2BI P4_REGNUM))\n+   (clobber (reg:VNx2BI P5_REGNUM))\n+   (clobber (reg:VNx2BI P6_REGNUM))\n+   (clobber (reg:VNx2BI P7_REGNUM))\n+   (clobber (reg:VNx2BI P8_REGNUM))\n+   (clobber (reg:VNx2BI P9_REGNUM))\n+   (clobber (reg:VNx2BI P10_REGNUM))\n+   (clobber (reg:VNx2BI P11_REGNUM))\n+   (clobber (reg:VNx2BI P12_REGNUM))\n+   (clobber (reg:VNx2BI P13_REGNUM))\n+   (clobber (reg:VNx2BI P14_REGNUM))\n+   (clobber (reg:VNx2BI P15_REGNUM))\n+   (clobber (match_scratch:DI 1 \"=r\"))]\n+  \"TARGET_TLS_DESC && TARGET_SVE\"\n   \"adrp\\\\tx0, %A0\\;ldr\\\\t%<w>1, [x0, #%L0]\\;add\\\\t<w>0, <w>0, %L0\\;.tlsdesccall\\\\t%0\\;blr\\\\t%1\"\n   [(set_attr \"type\" \"call\")\n    (set_attr \"length\" \"16\")])"}, {"sha": "84c64b2e77b6456edf29686944d95ab248fa2d97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c13ac5ec1a584561a2c474a5d61e7881ef4f82/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c13ac5ec1a584561a2c474a5d61e7881ef4f82/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80c13ac5ec1a584561a2c474a5d61e7881ef4f82", "patch": "@@ -1,3 +1,8 @@\n+2018-03-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/tls_1.c: New test.\n+\t* gcc.target/aarch64/sve/tls_2.C: Likewise.\n+\n 2018-03-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gcc.target/aarch64/sve/mul_highpart_1.c: New test."}, {"sha": "ca9b908baacc0964753061d2a8c627bde803e24f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/tls_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c13ac5ec1a584561a2c474a5d61e7881ef4f82/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftls_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c13ac5ec1a584561a2c474a5d61e7881ef4f82/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftls_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftls_1.c?ref=80c13ac5ec1a584561a2c474a5d61e7881ef4f82", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-options \"-O2 -fPIC -msve-vector-bits=256\" } */\n+\n+typedef unsigned int v8si __attribute__((vector_size(32)));\n+\n+extern __thread int y;\n+\n+void\n+f (int *a)\n+{\n+  v8si x;\n+  asm volatile (\"dup %0.s, #0x11\" : \"=w\" (x) :: \"memory\");\n+  if (*a)\n+    asm volatile (\"insr %0.s, %w2\" : \"=w\" (x) : \"0\" (x), \"r\" (y));\n+}\n+\n+/* { dg-final { scan-assembler {\\tst(r|1.)\\tz[0-9]} } } */\n+/* { dg-final { scan-assembler {\\tld(r|1.)\\tz[0-9]} } } */"}, {"sha": "c18a737ae041ecf15309633cac903664b9272e7f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/tls_2.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c13ac5ec1a584561a2c474a5d61e7881ef4f82/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftls_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c13ac5ec1a584561a2c474a5d61e7881ef4f82/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftls_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ftls_2.C?ref=80c13ac5ec1a584561a2c474a5d61e7881ef4f82", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fPIC -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t v32qi __attribute__((vector_size (32)));\n+\n+extern __thread int z;\n+\n+void\n+foo (v32qi *a, int *b)\n+{\n+  v32qi x = a[0], y = a[1];\n+  asm volatile (\"\" :: \"w\" ((v32qi) { -1, 0, 0, -1, -1, -1, 0, 0,\n+\t\t\t\t     -1, -1, -1, -1, 0, 0, 0, 0,\n+\t\t\t\t     -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t\t\t     0, 0, 0, 0, 0, 0, 0, 0 } ? x : y)\n+\t\t: \"memory\");\n+  if (*b)\n+    {\n+      x = a[2], y = a[3];\n+      asm volatile (\"\" :: \"w\" ((v32qi) { -1, 0, 0, -1, -1, -1, 0, 0,\n+\t\t\t\t\t -1, -1, -1, -1, 0, 0, 0, 0,\n+\t\t\t\t\t -1, -1, -1, -1, -1, -1, -1, -1,\n+\t\t\t\t\t 0, 0, 0, 0, 0, 0, 0, 0 } ? x : y),\n+\t\t    \"r\" (z));\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tldr\\tp[0-9]} 2 } } */"}]}