{"sha": "4c20b2e76b5b12a2f4efdc62eec8fcfa650c6a80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyMGIyZTc2YjViMTJhMmY0ZWZkYzYyZWVjOGZjZmE2NTBjNmE4MA==", "commit": {"author": {"name": "Bruno Haible", "email": "bruno@clisp.org", "date": "2003-07-01T04:04:13Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-07-01T04:04:13Z"}, "message": "re PR middle-end/6578 (-ftrapv doesn't catch multiplication overflow)\n\n2003-06-30  Bruno Haible  <bruno@clisp.org>\n\n\tPR middle-end/6578\n\t* libgcc2.c (__subvsi3): Remove simplification that would not work\n\twhen subtracting -0x80000000.\n\t(__subvdi3): Remove simplification that would return a wrong result.\n\t(__mulvsi3): Fix overflow check.\n\t(__absvdi2): Fix simplification that would return a wrong result.\n\t(__mulvdi3): Fix overflow check.\n\nFrom-SVN: r68758", "tree": {"sha": "2d7b96265f2c8ea3ac8b4faf32c58f69ffef2719", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d7b96265f2c8ea3ac8b4faf32c58f69ffef2719"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c20b2e76b5b12a2f4efdc62eec8fcfa650c6a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c20b2e76b5b12a2f4efdc62eec8fcfa650c6a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c20b2e76b5b12a2f4efdc62eec8fcfa650c6a80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c20b2e76b5b12a2f4efdc62eec8fcfa650c6a80/comments", "author": {"login": "bhaible", "id": 1690467, "node_id": "MDQ6VXNlcjE2OTA0Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1690467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bhaible", "html_url": "https://github.com/bhaible", "followers_url": "https://api.github.com/users/bhaible/followers", "following_url": "https://api.github.com/users/bhaible/following{/other_user}", "gists_url": "https://api.github.com/users/bhaible/gists{/gist_id}", "starred_url": "https://api.github.com/users/bhaible/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bhaible/subscriptions", "organizations_url": "https://api.github.com/users/bhaible/orgs", "repos_url": "https://api.github.com/users/bhaible/repos", "events_url": "https://api.github.com/users/bhaible/events{/privacy}", "received_events_url": "https://api.github.com/users/bhaible/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d6a09934cc7def8199c104c196cb9bd51cf4711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6a09934cc7def8199c104c196cb9bd51cf4711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6a09934cc7def8199c104c196cb9bd51cf4711"}], "stats": {"total": 154, "additions": 137, "deletions": 17}, "files": [{"sha": "21a049aa3098151797d1579d164dab0f64826a19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c20b2e76b5b12a2f4efdc62eec8fcfa650c6a80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c20b2e76b5b12a2f4efdc62eec8fcfa650c6a80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4c20b2e76b5b12a2f4efdc62eec8fcfa650c6a80", "patch": "@@ -1,3 +1,13 @@\n+2003-06-30  Bruno Haible  <bruno@clisp.org>\n+\n+\tPR middle-end/6578\n+\t* libgcc2.c (__subvsi3): Remove simplification that would not work\n+\twhen subtracting -0x80000000.\n+\t(__subvdi3): Remove simplification that would return a wrong result.\n+\t(__mulvsi3): Fix overflow check.\n+\t(__absvdi2): Fix simplification that would return a wrong result.\n+\t(__mulvdi3): Fix overflow check.\n+\n 2003-06-30  Jeff Law  <law@redhat.com>\n \n \t* stmt.c (any_pending_cleanups): Lose argument THIS_CONTOUR, it"}, {"sha": "05cb315cb9d359c4d276e3774c24fce58861f520", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 127, "deletions": 17, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c20b2e76b5b12a2f4efdc62eec8fcfa650c6a80/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c20b2e76b5b12a2f4efdc62eec8fcfa650c6a80/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=4c20b2e76b5b12a2f4efdc62eec8fcfa650c6a80", "patch": "@@ -109,9 +109,6 @@ __addvdi3 (DWtype a, DWtype b)\n Wtype\n __subvsi3 (Wtype a, Wtype b)\n {\n-#ifdef L_addvsi3\n-  return __addvsi3 (a, (-b));\n-#else\n   DWtype w;\n \n   w = a - b;\n@@ -120,17 +117,13 @@ __subvsi3 (Wtype a, Wtype b)\n     abort ();\n \n   return w;\n-#endif\n }\n #endif\n \f\n #ifdef L_subvdi3\n DWtype\n __subvdi3 (DWtype a, DWtype b)\n {\n-#ifdef L_addvdi3\n-  return __addvdi3 (a, (-b));\n-#else\n   DWtype w;\n \n   w = a - b;\n@@ -139,19 +132,21 @@ __subvdi3 (DWtype a, DWtype b)\n     abort ();\n \n   return w;\n-#endif\n }\n #endif\n \f\n #ifdef L_mulvsi3\n+#define WORD_SIZE (sizeof (Wtype) * BITS_PER_UNIT)\n Wtype\n __mulvsi3 (Wtype a, Wtype b)\n {\n   DWtype w;\n \n-  w = a * b;\n+  w = (DWtype) a * (DWtype) b;\n \n-  if (((a >= 0) == (b >= 0)) ? w < 0 : w > 0)\n+  if (((a >= 0) == (b >= 0))\n+      ? (UDWtype) w > (UDWtype) (((DWtype) 1 << (WORD_SIZE - 1)) - 1)\n+      : (UDWtype) w < (UDWtype) ((DWtype) -1 << (WORD_SIZE - 1)))\n     abort ();\n \n   return w;\n@@ -215,8 +210,8 @@ __absvdi2 (DWtype a)\n   DWtype w = a;\n \n   if (a < 0)\n-#ifdef L_negvsi2\n-    w = __negvsi2 (a);\n+#ifdef L_negvdi2\n+    w = __negvdi2 (a);\n #else\n     w = -a;\n \n@@ -229,17 +224,132 @@ __absvdi2 (DWtype a)\n #endif\n \f\n #ifdef L_mulvdi3\n+#define WORD_SIZE (sizeof (Wtype) * BITS_PER_UNIT)\n DWtype\n __mulvdi3 (DWtype u, DWtype v)\n {\n-  DWtype w;\n+  /* The unchecked multiplication needs 3 Wtype x Wtype multiplications,\n+     but the checked multiplication needs only two.  */\n+  DWunion uu, vv;\n \n-  w = u * v;\n+  uu.ll = u;\n+  vv.ll = v;\n \n-  if (((u >= 0) == (v >= 0)) ? w < 0 : w > 0)\n-    abort ();\n+  if (__builtin_expect (uu.s.high == uu.s.low >> (WORD_SIZE - 1), 1))\n+    {\n+      /* u fits in a single Wtype.  */\n+      if (__builtin_expect (vv.s.high == vv.s.low >> (WORD_SIZE - 1), 1))\n+\t{\n+\t  /* v fits in a single Wtype as well.  */\n+\t  /* A single multiplication.  No overflow risk.  */\n+\t  return (DWtype) uu.s.low * (DWtype) vv.s.low;\n+\t}\n+      else\n+\t{\n+\t  /* Two multiplications.  */\n+\t  DWunion w0, w1;\n+\n+\t  w0.ll = (UDWtype) (UWtype) uu.s.low * (UDWtype) (UWtype) vv.s.low;\n+\t  w1.ll = (UDWtype) (UWtype) uu.s.low * (UDWtype) (UWtype) vv.s.high;\n+\t  if (vv.s.high < 0)\n+\t    w1.s.high -= uu.s.low;\n+\t  if (uu.s.low < 0)\n+\t    w1.ll -= vv.ll;\n+\t  w1.ll += (UWtype) w0.s.high;\n+\t  if (__builtin_expect (w1.s.high == w1.s.low >> (WORD_SIZE - 1), 1))\n+\t    {\n+\t      w0.s.high = w1.s.low;\n+\t      return w0.ll;\n+\t    }\n+\t}\n+    }\n+  else\n+    {\n+      if (__builtin_expect (vv.s.high == vv.s.low >> (WORD_SIZE - 1), 1))\n+\t{\n+\t  /* v fits into a single Wtype.  */\n+\t  /* Two multiplications.  */\n+\t  DWunion w0, w1;\n+\n+\t  w0.ll = (UDWtype) (UWtype) uu.s.low * (UDWtype) (UWtype) vv.s.low;\n+\t  w1.ll = (UDWtype) (UWtype) uu.s.high * (UDWtype) (UWtype) vv.s.low;\n+\t  if (uu.s.high < 0)\n+\t    w1.s.high -= vv.s.low;\n+\t  if (vv.s.low < 0)\n+\t    w1.ll -= uu.ll;\n+\t  w1.ll += (UWtype) w0.s.high;\n+\t  if (__builtin_expect (w1.s.high == w1.s.low >> (WORD_SIZE - 1), 1))\n+\t    {\n+\t      w0.s.high = w1.s.low;\n+\t      return w0.ll;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  /* A few sign checks and a single multiplication.  */\n+\t  if (uu.s.high >= 0)\n+\t    {\n+\t      if (vv.s.high >= 0)\n+\t\t{\n+\t\t  if (uu.s.high == 0 && vv.s.high == 0)\n+\t\t    {\n+\t\t      DWtype w;\n+\n+\t\t      w = (UDWtype) (UWtype) uu.s.low\n+\t\t\t  * (UDWtype) (UWtype) vv.s.low;\n+\t\t      if (__builtin_expect (w >= 0, 1))\n+\t\t\treturn w;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (uu.s.high == 0 && vv.s.high == (Wtype) -1)\n+\t\t    {\n+\t\t      DWunion ww;\n+\n+\t\t      ww.ll = (UDWtype) (UWtype) uu.s.low\n+\t\t\t      * (UDWtype) (UWtype) vv.s.low;\n+\t\t      ww.s.high -= uu.s.low;\n+\t\t      if (__builtin_expect (ww.s.high < 0, 1))\n+\t\t\treturn ww.ll;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      if (vv.s.high >= 0)\n+\t\t{\n+\t\t  if (uu.s.high == (Wtype) -1 && vv.s.high == 0)\n+\t\t    {\n+\t\t      DWunion ww;\n+\n+\t\t      ww.ll = (UDWtype) (UWtype) uu.s.low\n+\t\t\t      * (UDWtype) (UWtype) vv.s.low;\n+\t\t      ww.s.high -= vv.s.low;\n+\t\t      if (__builtin_expect (ww.s.high < 0, 1))\n+\t\t\treturn ww.ll;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (uu.s.high == (Wtype) -1 && vv.s.high == (Wtype) - 1)\n+\t\t    {\n+\t\t      DWunion ww;\n+\n+\t\t      ww.ll = (UDWtype) (UWtype) uu.s.low\n+\t\t\t      * (UDWtype) (UWtype) vv.s.low;\n+\t\t      ww.s.high -= uu.s.low;\n+\t\t      ww.s.high -= vv.s.low;\n+\t\t      if (__builtin_expect (ww.s.high >= 0, 1))\n+\t\t\treturn ww.ll;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n \n-  return w;\n+  /* Overflow.  */\n+  abort ();\n }\n #endif\n \f"}]}