{"sha": "67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdjMjkzOWQzZTVjNGU3ODM1ZTNlNThkMzcwMGNmYTY1YTRlMDNlZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-03-13T01:09:47Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-03-13T01:09:47Z"}, "message": "re PR c/20402 (gcc.dg/noncompile/920923-1.c ICE)\n\n\tPR c/20402\n\t* c-parser.c (c_parser_struct_or_union_specifier): Don't fall\n\tthrough into call to parser_xref_tag after parse error.\n\t(c_parser_struct_declaration): Consistently return NULL_TREE on\n\terror.\n\ntestsuite:\n\t* gcc.dg/noncompile/920923-1.c: Detail expected diagnostics for\n\tnew parser.\n\nFrom-SVN: r96363", "tree": {"sha": "627cf4b5bf6a4b1aea79cf236c48e8ffb01f8e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/627cf4b5bf6a4b1aea79cf236c48e8ffb01f8e77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c75ab022811aa05c49657d6c48471962b48c9666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c75ab022811aa05c49657d6c48471962b48c9666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c75ab022811aa05c49657d6c48471962b48c9666"}], "stats": {"total": 111, "additions": 56, "deletions": 55}, "files": [{"sha": "e7ea5f8f0761958016d0a5dd71e30b72dbbec53c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed", "patch": "@@ -1,3 +1,11 @@\n+2005-03-13  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/20402\n+\t* c-parser.c (c_parser_struct_or_union_specifier): Don't fall\n+\tthrough into call to parser_xref_tag after parse error.\n+\t(c_parser_struct_declaration): Consistently return NULL_TREE on\n+\terror.\n+\n 2005-03-12  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* tree-flow-inline.h (ref_contains_array_ref): New function."}, {"sha": "fa62475e943fb46565d7ef72d200dce066c3c88a", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed", "patch": "@@ -1827,6 +1827,7 @@ c_parser_struct_or_union_specifier (c_parser *parser)\n       c_parser_error (parser, \"expected %<{%>\");\n       ret.spec = error_mark_node;\n       ret.kind = ctsk_tagref;\n+      return ret;\n     }\n   ret = parser_xref_tag (code, ident);\n   return ret;\n@@ -1883,7 +1884,7 @@ c_parser_struct_declaration (c_parser *parser)\n   specs = build_null_declspecs ();\n   c_parser_declspecs (parser, specs, false, true, true);\n   if (parser->error)\n-    return error_mark_node;\n+    return NULL_TREE;\n   if (!specs->declspecs_seen_p)\n     {\n       c_parser_error (parser, \"expected specifier-qualifier-list\");"}, {"sha": "f2b16c433864a2ce2d1ca49f80ad25351a497f6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed", "patch": "@@ -1,3 +1,9 @@\n+2005-03-13  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/20402\n+\t* gcc.dg/noncompile/920923-1.c: Detail expected diagnostics for\n+\tnew parser.\n+\n 2005-03-12  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/20361"}, {"sha": "4ff008467f5ab8ff695e01c514ad0d2d591d6136", "filename": "gcc/testsuite/gcc.dg/noncompile/920923-1.c", "status": "modified", "additions": 40, "deletions": 54, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F920923-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F920923-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F920923-1.c?ref=67c2939d3e5c4e7835e3e58d3700cfa65a4e03ed", "patch": "@@ -1,94 +1,80 @@\n-/* This test case contains a large number of syntactic errors.  We\n-   believe the intent of the test is that the compiler simply not\n-   crash.  The set of error messages reported is different when the C\n-   parser is generated with bison 1.50 than 1.35.  It is not worth\n-   attempting to prevent this.  Instead, we use a single dg-error with\n-   a regexp that will match _all_ the errors indiscriminately.  The\n-   old error/warning/etc markers are kept around for reference, but\n-   disabled.\n-\n-   Revisit after new (recursive descent) parser is implemented for C.\n-   -- zw 2002-10-17  */\n-\n-/* { dg-error \".*\" \"many syntax errors\" { target *-*-* } 0 } */\n-\n-typedef BYTE unsigned char;\t/* { error \"syntax error|empty decl\" } */\n+typedef BYTE unsigned char;\t/* { dg-error \"expected\" } */\n typedef int item_n;\n typedef int perm_set;\n-struct PENT { caddr_t v_addr; };/* { error \"parse error|no semicolon\" } */\n+struct PENT { caddr_t v_addr; };/* { dg-error \"expected\" } */\n typedef struct PENT prec;\n typedef struct PENT *prec_t;\n prec_t mem_hash;\n-BYTE *mem_base;\t\t\t/* { error \"parse error|no type\" } */\n+BYTE *mem_base;\t\t\t/* { dg-error \"expected\" } */\n struct PTE {\n-     BYTE *p_page;\t\t/* { error \"parse error|no semicolon\" } */\n+     BYTE *p_page;\t\t/* { dg-error \"expected\" } */\n      perm_set p_perms;\n-};\t\t\t\t/* { error \"parse error\" } */\n+};\n typedef struct PTE pte;\n struct PTP {\n      union {\n-\t  struct *PTP p_tablep;\t/* { error \"parse error|no semicolon\" } */\n+\t  struct *PTP p_tablep;\t/* { dg-error \"expected\" } */\n \t  struct *PTE p_entry;\n-     } u;\t\t\t/* { warning \"no type or storage class\" } */\n+     } u;\n      int valid;\n-};\t\t\t\t/* { error \"parse error\" } */\n-typedef struct PTP (u.p_tablep);/* { error \"parse error\" } */\n+};\n+typedef struct PTP (u.p_tablep);/* { dg-error \"expected\" } */\n int pfree=0;\n int pcount=0;\n \n void\n mmu_walk_find(va)\n-caddr_t va;\t\t\t/* { error \"parse error|no type\" } */\n+caddr_t va;\t\t\t/* { dg-error \"expected\" } */\n {\n-     BYTE *page_addr;\n-     if (mmu_base[Level1(va)]->valid==0x0) {\n-\t  l1_base = mmu_base[Level1(va)]->(u.p_tablep) = p_alloc();\n-\t  mmu_base[Level1(va)]->valid = 0x3;\t/* { error \"parse error\" } */\n-\t  for (idx=0; idx<LEVEL1_ENTRIES; idx++)\n+     BYTE *page_addr; /* { dg-error \"undeclared|for each function\" } */\n+     if (mmu_base[Level1(va)]->valid==0x0) { /* { dg-error \"undeclared\" } */\n+\t  l1_base = mmu_base[Level1(va)]->(u.p_tablep) = p_alloc(); /* { dg-error \"expected|undeclared\" } */\n+\t  mmu_base[Level1(va)]->valid = 0x3;\n+\t  for (idx=0; idx<LEVEL1_ENTRIES; idx++) /* { dg-error \"undeclared\" } */\n \t       l1_base[idx]->valid = 0x0;\n \t  goto build_level2;\n      } else\n-\t  l1_base = mmu_base[Level1(va)]->(u.p_tablep);\n+\t  l1_base = mmu_base[Level1(va)]->(u.p_tablep); /* { dg-error \"expected\" } */\n \n      if (l1_base[Level2(va)]->valid==0x0) {\n      build_level2:\n-\t  l2_base = l1_base[Level2(va)]->(u.p_tablep) = p_alloc();\n-\t  l1_base[Level2(va)]->valid = 0x3;\t/* { error \"parse error\" } */\n-\t  for (idx=0; idx<LEVEL2_ENTRIES; idx++)\n+\t  l2_base = l1_base[Level2(va)]->(u.p_tablep) = p_alloc(); /* { dg-error \"expected|undeclared\" } */\n+\t  l1_base[Level2(va)]->valid = 0x3;\n+\t  for (idx=0; idx<LEVEL2_ENTRIES; idx++) /* { dg-error \"undeclared\" } */\n \t       l2_base[idx]->valid=0x0;\n-\t  goto build_page;\n+\t  goto build_page; /* { dg-error \"used but not defined\" } */\n      } else\n-\t  l2_base = mmu_base[Level2(va)]->(u.p_tablep);\n+\t  l2_base = mmu_base[Level2(va)]->(u.p_tablep); /* { dg-error \"expected\" } */\n \n-     page_addr = l2_base[Level2(va)]->valid;/* { error \"undeclared|no type\" } */\n-}\t\t\t\t/* { error \"parse error\" } */\n+     page_addr = l2_base[Level2(va)]->valid;\n+}\n \n void *\n a_translate(va_op, v_addr)\n int va_op;\n-caddr_t v_addr;\t\t\t/* { error \"parse error\" } */\n+caddr_t v_addr;\t\t\t/* { dg-error \"expected\" } */\n {\n      register prec_t bucket;\n-     register caddr_t p_addr;\t/* { error \"syntax error\" } */\n-     bucket = mem_hash+((((v_addr)>>ITEMBITS))&hash_mask); /* { error \"undeclared|for each function\" } */\n+     register caddr_t p_addr;\t/* { dg-error \"expected|undeclared\" } */\n+     bucket = mem_hash+((((v_addr)>>ITEMBITS))&hash_mask);\n      do {\n-\t  if (bucket->v_addr == ((v_addr)>>ITEMBITS) {\t/* { error \"incomplete type|parse error\" } */\n+\t  if (bucket->v_addr == ((v_addr)>>ITEMBITS) {\t/* { dg-error \"expected|undeclared|no member\" } */\n \t       if(!(bucket->perm_set&va_op))\n \t\t    goto prot_fault;\n \t       return mem_base + v_addr;\n \t  }\n-     } while((bucket++)->v_addr != ((caddr_t)0));  /* { error \"parse error\" } */\n+     } while((bucket++)->v_addr != ((caddr_t)0));  /* { dg-error \"expected|undeclared|no member\" } */\n \n  page_miss:\n-     p_addr = (--bucket)->p_addr;\t/* { error \"undeclared|pointer to\" } */\n+     p_addr = (--bucket)->p_addr;\t/* { dg-error \"no member\" } */\n  page_type:\n      switch (p_addr) {\n-     case BUCKET_FULL:\t\t/* { error \"undeclared\" } */\n+     case BUCKET_FULL:\t\t/* { dg-error \"undeclared\" } */\n \t  enlarge_hash_table(mem_hash);\n-     case((caddr_t)0):\t\t/* { error \"undeclared|parse error\" } */\n+     case((caddr_t)0):\t\t/* { dg-error \"expected\" } */\n \t  p_addr = fill_item_entry(va_op, v_addr);\n \t  goto page_type;\n-     case((caddr_t)1):\t\t/* { error \"parse error\" } */\n+     case((caddr_t)1):\t\t/* { dg-error \"expected\" } */\n      default:\n \t  ((void)(((0))?0:(__eprintf(\"Failed assertion`%s'at line%d of`%s'.\\n\",\n \t\t\t\t     \"FALSE\", 327, \"b.c\"), 0)));\n@@ -104,9 +90,9 @@ int hash_size;\n      register int idx;\n      bucket = hasht;\n      for(idx=(hash_size*3)-1; idx>=0; idx--) {\n-\t  bucket->v_addr = ((caddr_t)0);/* { error \"undeclared|pointer to|parse error\" } */\n-\t  bucket->p_addr = ((caddr_t)0);/* { error \"pointer to|parse error\" } */\n-\t  bucket->perm_set = VA_EMPTY;\t/* { error \"undeclared|pointer to\" } */\n+\t  bucket->v_addr = ((caddr_t)0);/* { dg-error \"undeclared|expected|no member\" } */\n+\t  bucket->p_addr = ((caddr_t)0);/* { dg-error \"no member|expected\" } */\n+\t  bucket->perm_set = VA_EMPTY;\t/* { dg-error \"undeclared|no member\" } */\n      }\n }\n \n@@ -115,21 +101,21 @@ extern void *calloc(__SIZE_TYPE__, __SIZE_TYPE__);\n void\n init_mem()\n {\n-     mem_base = (BYTE *) calloc(1024, (1<<13)); /* { error \"undeclared|parse error\" } */\n-     ((void)((mem_base != (BYTE *)0)\t/* { error \"parse error\" } */\n+     mem_base = (BYTE *) calloc(1024, (1<<13)); /* { dg-error \"undeclared|expected\" } */\n+     ((void)((mem_base != (BYTE *)0)\t/* { dg-error \"expected\" } */\n \t     ? 0\n \t     : (__eprintf(\"Failed assertion`%s'at line%d of`%s'.\\n\",\n \t\t\t  \"mem_base != (BYTE *)0\", 366, \"b.c\"),\n \t\t0)));\n-     hash_num = INIT_NUM_ENTRIES * 3;\t/* { error \"undeclared\" } */\n-     mem_hash = (prec_t) calloc(hash_num, sizeof(prec)); /* { error \"incomplete type\" } */\n+     hash_num = INIT_NUM_ENTRIES * 3;\t/* { dg-error \"undeclared\" } */\n+     mem_hash = (prec_t) calloc(hash_num, sizeof(prec));\n      ((void)((mem_hash != (prec_t)0)\n \t     ? 0\n \t     : (__eprintf(\"Failed assertion`%s'at line%d of`%s'.\\n\",\n \t\t\t  \"mem_hash != (prec_t)0\", 370, \"b.c\"),\n \t\t0)));\n      flush_hash(mem_hash, 32);\n-     build_ptables(mem_base, 1024*(1<<13)); /* { bogus \"integer overflow\" \"int smaller than 32 bits\" } */\n+     build_ptables(mem_base, 1024*(1<<13)); /* { dg-bogus \"integer overflow\" \"int smaller than 32 bits\" } */\n }\n \n struct tm {"}]}