{"sha": "4ca890e22e169bdbb2399d0c6b7c98111164e86a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNhODkwZTIyZTE2OWJkYmIyMzk5ZDBjNmI3Yzk4MTExMTY0ZTg2YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-08-14T20:34:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-08-14T20:34:56Z"}, "message": "re PR middle-end/58145 (volatileness of write is discarded, perhaps in \"lim1\" related to loop optimizations)\n\n\tPR tree-optimization/58145\n\t* tree-sra.c (build_ref_for_offset): If prev_base has\n\tTREE_THIS_VOLATILE or TREE_SIDE_EFFECTS, propagate it to MEM_REF.\n\n\t* gcc.dg/pr58145-1.c: New test.\n\t* gcc.dg/pr58145-2.c: New test.\n\nFrom-SVN: r201748", "tree": {"sha": "bc091b34fe7a11663b0a6d55cd12119c1f69c179", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc091b34fe7a11663b0a6d55cd12119c1f69c179"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ca890e22e169bdbb2399d0c6b7c98111164e86a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca890e22e169bdbb2399d0c6b7c98111164e86a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca890e22e169bdbb2399d0c6b7c98111164e86a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca890e22e169bdbb2399d0c6b7c98111164e86a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7991d53a7672c78f554e31232dcdc0ef8b0e903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7991d53a7672c78f554e31232dcdc0ef8b0e903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7991d53a7672c78f554e31232dcdc0ef8b0e903"}], "stats": {"total": 109, "additions": 108, "deletions": 1}, "files": [{"sha": "c7f229bb9541ab1787d60bd23a002bcbfe3c411a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca890e22e169bdbb2399d0c6b7c98111164e86a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca890e22e169bdbb2399d0c6b7c98111164e86a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ca890e22e169bdbb2399d0c6b7c98111164e86a", "patch": "@@ -1,4 +1,11 @@\n+2013-08-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/58145\n+\t* tree-sra.c (build_ref_for_offset): If prev_base has\n+\tTREE_THIS_VOLATILE or TREE_SIDE_EFFECTS, propagate it to MEM_REF.\n+\n 2013-08-14  Xinliang David Li  <davidxl@google.com>\n+\n \t* config/i386/i386.c (ix86_option_override_internal):\n \tFix potential unitialized variable error.\n "}, {"sha": "c56c2604343f21e25d006c30364e74e9672bc74b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca890e22e169bdbb2399d0c6b7c98111164e86a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca890e22e169bdbb2399d0c6b7c98111164e86a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ca890e22e169bdbb2399d0c6b7c98111164e86a", "patch": "@@ -1,3 +1,9 @@\n+2013-08-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/58145\n+\t* gcc.dg/pr58145-1.c: New test.\n+\t* gcc.dg/pr58145-2.c: New test.\n+\n 2013-08-14  Joern Rennecke <joern.rennecke@embecosm.com>\n \n \t* gcc.dg/debug/dwarf2/dwarf2.exp: Replace -gdwarf-2 with -gdwarf."}, {"sha": "0e236c0456d26b28e039f2e8415e613a84286f24", "filename": "gcc/testsuite/gcc.dg/pr58145-1.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca890e22e169bdbb2399d0c6b7c98111164e86a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58145-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca890e22e169bdbb2399d0c6b7c98111164e86a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58145-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58145-1.c?ref=4ca890e22e169bdbb2399d0c6b7c98111164e86a", "patch": "@@ -0,0 +1,37 @@\n+/* PR tree-optimization/58145 */\n+/* { dg-do compile { target { int32plus } } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct S { unsigned int data : 32; };\n+struct T { unsigned int data; };\n+volatile struct S s2;\n+\n+void\n+f1 (int val)\n+{\n+  struct S s = { .data = val };\n+  *(volatile struct S *) 0x880000UL = s;\n+}\n+\n+void\n+f2 (int val)\n+{\n+  struct T t = { .data = val };\n+  *(volatile struct T *) 0x880000UL = t;\n+}\n+\n+void\n+f3 (int val)\n+{\n+  *(volatile unsigned int *) 0x880000UL = val;\n+}\n+\n+void\n+f4 (int val)\n+{\n+  struct S s = { .data = val };\n+  s2 = s;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" ={v} \" 4 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "840e9828972b42137b7739af1e3f02c1060f5303", "filename": "gcc/testsuite/gcc.dg/pr58145-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca890e22e169bdbb2399d0c6b7c98111164e86a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58145-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca890e22e169bdbb2399d0c6b7c98111164e86a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58145-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr58145-2.c?ref=4ca890e22e169bdbb2399d0c6b7c98111164e86a", "patch": "@@ -0,0 +1,51 @@\n+/* PR tree-optimization/58145 */\n+/* { dg-do compile { target { int32plus } } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct S { unsigned int data : 32; };\n+struct T { unsigned int data; };\n+volatile struct S s2;\n+\n+static inline void\n+f1 (int val)\n+{\n+  struct S s = { .data = val };\n+  *(volatile struct S *) 0x880000UL = s;\n+}\n+\n+static inline void\n+f2 (int val)\n+{\n+  struct T t = { .data = val };\n+  *(volatile struct T *) 0x880000UL = t;\n+}\n+\n+static inline void\n+f3 (int val)\n+{\n+  *(volatile unsigned int *) 0x880000UL = val;\n+}\n+\n+static inline void\n+f4 (int val)\n+{\n+  struct S s = { .data = val };\n+  s2 = s;\n+}\n+\n+void\n+f5 (void)\n+{\n+  int i;\n+  for (i = 0; i < 100; i++)\n+    f1 (0);\n+  for (i = 0; i < 100; i++)\n+    f2 (0);\n+  for (i = 0; i < 100; i++)\n+    f3 (0);\n+  for (i = 0; i < 100; i++)\n+    f4 (0);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" ={v} \" 4 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "8e3bb813bb3d4c0c91fe9e32b1893b0b2ea64e7e", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca890e22e169bdbb2399d0c6b7c98111164e86a/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca890e22e169bdbb2399d0c6b7c98111164e86a/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=4ca890e22e169bdbb2399d0c6b7c98111164e86a", "patch": "@@ -1466,6 +1466,7 @@ build_ref_for_offset (location_t loc, tree base, HOST_WIDE_INT offset,\n {\n   tree prev_base = base;\n   tree off;\n+  tree mem_ref;\n   HOST_WIDE_INT base_offset;\n   unsigned HOST_WIDE_INT misalign;\n   unsigned int align;\n@@ -1516,7 +1517,12 @@ build_ref_for_offset (location_t loc, tree base, HOST_WIDE_INT offset,\n   if (align < TYPE_ALIGN (exp_type))\n     exp_type = build_aligned_type (exp_type, align);\n \n-  return fold_build2_loc (loc, MEM_REF, exp_type, base, off);\n+  mem_ref = fold_build2_loc (loc, MEM_REF, exp_type, base, off);\n+  if (TREE_THIS_VOLATILE (prev_base))\n+    TREE_THIS_VOLATILE (mem_ref) = 1;\n+  if (TREE_SIDE_EFFECTS (prev_base))\n+    TREE_SIDE_EFFECTS (mem_ref) = 1;\n+  return mem_ref;\n }\n \n /* Construct a memory reference to a part of an aggregate BASE at the given"}]}