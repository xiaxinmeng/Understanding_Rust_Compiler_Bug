{"sha": "66083422fdff0478bebd65b4bf2d103a55d97366", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYwODM0MjJmZGZmMDQ3OGJlYmQ2NWI0YmYyZDEwM2E1NWQ5NzM2Ng==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-11-16T19:24:17Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-11-16T19:24:17Z"}, "message": "mips.c: Use rtl _P predicates.\n\n2004-11-16  Eric Christopher  <echristo@redhat.com>\n\n\t* config/mips/mips.c: Use rtl _P predicates.\n\t* config/mips/mips.h: Ditto.\n\t* config/mips/mips.md: Ditto.\n\nFrom-SVN: r90752", "tree": {"sha": "77e9d1dd57414da5d7b4e6d4d390f5a811c162ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77e9d1dd57414da5d7b4e6d4d390f5a811c162ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66083422fdff0478bebd65b4bf2d103a55d97366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66083422fdff0478bebd65b4bf2d103a55d97366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66083422fdff0478bebd65b4bf2d103a55d97366", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66083422fdff0478bebd65b4bf2d103a55d97366/comments", "author": null, "committer": null, "parents": [{"sha": "96e1fc281c045a99c58fcfc205c1e3f5efad1b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e1fc281c045a99c58fcfc205c1e3f5efad1b2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e1fc281c045a99c58fcfc205c1e3f5efad1b2b"}], "stats": {"total": 76, "additions": 41, "deletions": 35}, "files": [{"sha": "d0a196fedafcc953b021128af967a3c52eb4f004", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66083422fdff0478bebd65b4bf2d103a55d97366/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66083422fdff0478bebd65b4bf2d103a55d97366/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66083422fdff0478bebd65b4bf2d103a55d97366", "patch": "@@ -1,3 +1,9 @@\n+2004-11-16  Eric Christopher  <echristo@redhat.com>\n+\n+\t* config/mips/mips.c: Use rtl _P predicates.\n+\t* config/mips/mips.h: Ditto.\n+\t* config/mips/mips.md: Ditto.\n+\n 2004-11-16  Fariborz Jahanian <fjahanian@apple.com>\n \n \t* config/rs6000/altivec.md (altivec_vandc): Canonicalize\n@@ -21,7 +27,7 @@\n \t* gcc/cse.c (struct change_cc_mode_args): New structure.\n \t(cse_change_cc_mode_insn): New function.\n \t(cse_change_cc_mode): Use validate_change to perfom changes.\n-\t(cse_change_cc_mode_insns, cse_condition_code_reg): \n+\t(cse_change_cc_mode_insns, cse_condition_code_reg):\n \tCall cse_change_cc_mode_insn.\n \n 2004-11-16  Steven Bosscher  <stevenb@suse.de>"}, {"sha": "601e3cec3987e845d27fa3970454d5191a56f53d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66083422fdff0478bebd65b4bf2d103a55d97366/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66083422fdff0478bebd65b4bf2d103a55d97366/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=66083422fdff0478bebd65b4bf2d103a55d97366", "patch": "@@ -1047,7 +1047,7 @@ mips_valid_base_register_p (rtx x, enum machine_mode mode, int strict)\n   if (!strict && GET_CODE (x) == SUBREG)\n     x = SUBREG_REG (x);\n \n-  return (GET_CODE (x) == REG\n+  return (REG_P (x)\n \t  && mips_regno_mode_ok_for_base_p (REGNO (x), mode, strict));\n }\n \n@@ -1372,7 +1372,7 @@ mips_const_insns (rtx x)\n int\n mips_fetch_insns (rtx x)\n {\n-  gcc_assert (GET_CODE (x) == MEM);\n+  gcc_assert (MEM_P (x));\n   return mips_address_insns (XEXP (x, 0), GET_MODE (x));\n }\n \n@@ -1392,7 +1392,7 @@ mips_idiv_insns (void)\n       else\n         count += 2;\n     }\n-  \n+\n   if (TARGET_FIX_R4000 || TARGET_FIX_R4400)\n     count++;\n   return count;\n@@ -2209,15 +2209,15 @@ mips_subword (rtx op, int high_p)\n   else\n     byte = 0;\n \n-  if (GET_CODE (op) == REG)\n+  if (REG_P (op))\n     {\n       if (FP_REG_P (REGNO (op)))\n \treturn gen_rtx_REG (word_mode, high_p ? REGNO (op) + 1 : REGNO (op));\n       if (REGNO (op) == HI_REGNUM)\n \treturn gen_rtx_REG (word_mode, high_p ? HI_REGNUM : LO_REGNUM);\n     }\n \n-  if (GET_CODE (op) == MEM)\n+  if (MEM_P (op))\n     return mips_rewrite_small_data (adjust_address (op, word_mode, byte));\n \n   return simplify_gen_subreg (word_mode, op, mode, byte);\n@@ -2240,9 +2240,9 @@ mips_split_64bit_move_p (rtx dest, rtx src)\n      ldc1 and sdc1 on MIPS II and above.  */\n   if (mips_isa > 1)\n     {\n-      if (FP_REG_RTX_P (dest) && GET_CODE (src) == MEM)\n+      if (FP_REG_RTX_P (dest) && MEM_P (src))\n \treturn false;\n-      if (FP_REG_RTX_P (src) && GET_CODE (dest) == MEM)\n+      if (FP_REG_RTX_P (src) && MEM_P (dest))\n \treturn false;\n     }\n   return true;\n@@ -2287,7 +2287,7 @@ mips_split_64bit_move (rtx dest, rtx src)\n       rtx low_dest;\n \n       low_dest = mips_subword (dest, 0);\n-      if (GET_CODE (low_dest) == REG\n+      if (REG_P (low_dest)\n \t  && reg_overlap_mentioned_p (low_dest, src))\n \t{\n \t  emit_move_insn (mips_subword (dest, 1), mips_subword (src, 1));\n@@ -2829,9 +2829,9 @@ mips_emit_fcc_reload (rtx dest, rtx src, rtx scratch)\n   rtx fp1, fp2;\n \n   /* Change the source to SFmode.  */\n-  if (GET_CODE (src) == MEM)\n+  if (MEM_P (src))\n     src = adjust_address (src, SFmode, 0);\n-  else if (GET_CODE (src) == REG || GET_CODE (src) == SUBREG)\n+  else if (REG_P (src) || GET_CODE (src) == SUBREG)\n     src = gen_rtx_REG (SFmode, true_regnum (src));\n \n   fp1 = gen_rtx_REG (SFmode, REGNO (scratch));\n@@ -3837,7 +3837,7 @@ mips_get_unaligned_mem (rtx *op, unsigned int width, int bitpos,\n \n   /* Check that the operand really is a MEM.  Not all the extv and\n      extzv predicates are checked.  */\n-  if (GET_CODE (*op) != MEM)\n+  if (!MEM_P (*op))\n     return false;\n \n   /* Check that the size is valid.  */\n@@ -6930,7 +6930,7 @@ mips_secondary_reload_class (enum reg_class class,\n   int regno = -1;\n   int gp_reg_p;\n \n-  if (GET_CODE (x) == REG || GET_CODE (x) == SUBREG)\n+  if (REG_P (x)|| GET_CODE (x) == SUBREG)\n     regno = true_regnum (x);\n \n   gp_reg_p = TARGET_MIPS16 ? M16_REG_P (regno) : GP_REG_P (regno);\n@@ -6982,7 +6982,7 @@ mips_secondary_reload_class (enum reg_class class,\n \n   if (class == FP_REGS)\n     {\n-      if (GET_CODE (x) == MEM)\n+      if (MEM_P (x))\n \t{\n \t  /* In this case we can use lwc1, swc1, ldc1 or sdc1.  */\n \t  return NO_REGS;\n@@ -7099,7 +7099,7 @@ mips16_gp_pseudo_reg (void)\n       /* We need to emit the initialization after the FUNCTION_BEG\n          note, so that it will be integrated.  */\n       for (scan = get_insns (); scan != NULL_RTX; scan = NEXT_INSN (scan))\n-\tif (GET_CODE (scan) == NOTE\n+\tif (NOTE_P (scan)\n \t    && NOTE_LINE_NUMBER (scan) == NOTE_INSN_FUNCTION_BEG)\n \t  break;\n       if (scan == NULL_RTX)\n@@ -7721,7 +7721,7 @@ dump_constants (struct mips16_constant *constants, rtx insn)\n static int\n mips16_insn_length (rtx insn)\n {\n-  if (GET_CODE (insn) == JUMP_INSN)\n+  if (JUMP_P (insn))\n     {\n       rtx body = PATTERN (insn);\n       if (GET_CODE (body) == ADDR_VEC)\n@@ -8035,8 +8035,8 @@ vr4130_avoid_branch_rt_conflict (rtx insn)\n \n   first = SEQ_BEGIN (insn);\n   second = SEQ_END (insn);\n-  if (GET_CODE (first) == JUMP_INSN\n-      && GET_CODE (second) == INSN\n+  if (JUMP_P (first)\n+      && NONJUMP_INSN_P (second)\n       && GET_CODE (PATTERN (first)) == SET\n       && GET_CODE (SET_DEST (PATTERN (first))) == PC\n       && GET_CODE (SET_SRC (PATTERN (first))) == IF_THEN_ELSE)\n@@ -8111,7 +8111,7 @@ vr4130_align_insns (void)\n \t       way, if the nop makes Y aligned, it will also align any labels\n \t       between X and Y.  */\n \t    if (state.insns_left != state.issue_rate\n-\t\t&& GET_CODE (subinsn) != CALL_INSN)\n+\t\t&& !CALL_P (subinsn))\n \t      {\n \t\tif (subinsn == SEQ_BEGIN (insn) && aligned_p)\n \t\t  {\n@@ -8150,7 +8150,7 @@ vr4130_align_insns (void)\n \t     mips.md patern, the length is only an estimate.  Insert an\n \t     8 byte alignment after it so that the following instructions\n \t     can be handled correctly.  */\n-\t  if (GET_CODE (SEQ_BEGIN (insn)) == INSN\n+\t  if (NONJUMP_INSN_P (SEQ_BEGIN (insn))\n \t      && (recog_memoized (insn) < 0 || length >= 8))\n \t    {\n \t      next = emit_insn_after (gen_align (GEN_INT (3)), insn);\n@@ -9320,7 +9320,7 @@ struct builtin_description\n   enum mips_fp_condition cond;\n \n   /* The name of the builtin function.  */\n-  const char *name;              \n+  const char *name;\n \n   /* Specifies how the function should be expanded.  */\n   enum mips_builtin_type builtin_type;"}, {"sha": "1e578d326e3db82011fe58520fcfdb53750fd613", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66083422fdff0478bebd65b4bf2d103a55d97366/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66083422fdff0478bebd65b4bf2d103a55d97366/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=66083422fdff0478bebd65b4bf2d103a55d97366", "patch": "@@ -1575,7 +1575,7 @@ extern const struct mips_cpu_info *mips_tune_info;\n #define ALL_COP_REG_P(REGNO) \\\n   ((unsigned int) ((int) (REGNO) - COP0_REG_FIRST) < ALL_COP_REG_NUM)\n \n-#define FP_REG_RTX_P(X) (GET_CODE (X) == REG && FP_REG_P (REGNO (X)))\n+#define FP_REG_RTX_P(X) (REG_P (X) && FP_REG_P (REGNO (X)))\n \n /* True if X is (const (unspec [(const_int 0)] UNSPEC_GP)).  This is used\n    to initialize the mips16 gp pseudo register.  */\n@@ -1997,7 +1997,7 @@ extern enum reg_class mips_char_to_class[256];\n \n #define EXTRA_CONSTRAINT_STR(OP,CODE,STR)\t\t\t\t\\\n   (((CODE) == 'Q')\t  ? const_arith_operand (OP, VOIDmode)\t\t\\\n-   : ((CODE) == 'R')\t  ? (GET_CODE (OP) == MEM\t\t\t\\\n+   : ((CODE) == 'R')\t  ? (MEM_P (OP)\t\t\t\t\t\\\n \t\t\t     && mips_fetch_insns (OP) == 1)\t\t\\\n    : ((CODE) == 'S')\t  ? (CONSTANT_P (OP)\t\t\t\t\\\n \t\t\t     && call_insn_operand (OP, VOIDmode))\t\\\n@@ -2007,7 +2007,7 @@ extern enum reg_class mips_char_to_class[256];\n    : ((CODE) == 'U')\t  ? (CONSTANT_P (OP)\t\t\t\t\\\n \t\t\t     && move_operand (OP, VOIDmode)\t\t\\\n \t\t\t     && !mips_dangerous_for_la25_p (OP))\t\\\n-   : ((CODE) == 'W')\t  ? (GET_CODE (OP) == MEM\t\t\t\\\n+   : ((CODE) == 'W')\t  ? (MEM_P (OP)\t\t\t\t\t\\\n \t\t\t     && memory_operand (OP, VOIDmode)\t\t\\\n \t\t\t     && (!TARGET_MIPS16\t\t\t\t\\\n \t\t\t\t || (!stack_operand (OP, VOIDmode)\t\\"}, {"sha": "ba99796fc4712a0af72b856496833b98d10776d1", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66083422fdff0478bebd65b4bf2d103a55d97366/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66083422fdff0478bebd65b4bf2d103a55d97366/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=66083422fdff0478bebd65b4bf2d103a55d97366", "patch": "@@ -632,7 +632,7 @@\n \t(plus:SI (match_dup 0)\n \t\t (match_operand:SI 1 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n-   && GET_CODE (operands[0]) == REG\n+   && REG_P (operands[0])\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n    && ((INTVAL (operands[1]) > 0x7f\n@@ -661,9 +661,9 @@\n \t(plus:SI (match_operand:SI 1 \"register_operand\")\n \t\t (match_operand:SI 2 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n-   && GET_CODE (operands[0]) == REG\n+   && REG_P (operands[0])\n    && M16_REG_P (REGNO (operands[0]))\n-   && GET_CODE (operands[1]) == REG\n+   && REG_P (operands[1])\n    && M16_REG_P (REGNO (operands[1]))\n    && REGNO (operands[0]) != REGNO (operands[1])\n    && GET_CODE (operands[2]) == CONST_INT\n@@ -693,7 +693,7 @@\n \t(plus:DI (match_dup 0)\n \t\t (match_operand:DI 1 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && TARGET_64BIT && reload_completed && !TARGET_DEBUG_D_MODE\n-   && GET_CODE (operands[0]) == REG\n+   && REG_P (operands[0])\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n    && ((INTVAL (operands[1]) > 0xf\n@@ -722,9 +722,9 @@\n \t(plus:DI (match_operand:DI 1 \"register_operand\")\n \t\t (match_operand:DI 2 \"const_int_operand\")))]\n   \"TARGET_MIPS16 && TARGET_64BIT && reload_completed && !TARGET_DEBUG_D_MODE\n-   && GET_CODE (operands[0]) == REG\n+   && REG_P (operands[0])\n    && M16_REG_P (REGNO (operands[0]))\n-   && GET_CODE (operands[1]) == REG\n+   && REG_P (operands[1])\n    && M16_REG_P (REGNO (operands[1]))\n    && REGNO (operands[0]) != REGNO (operands[1])\n    && GET_CODE (operands[2]) == CONST_INT\n@@ -3145,7 +3145,7 @@ beq\\t%2,%.,1b\\;\\\n \t\t\t (match_operand:DI 1 \"const_int_operand\"))))]\n   \"TARGET_64BIT && TARGET_MIPS16 && reload_completed\n    && !TARGET_DEBUG_D_MODE\n-   && GET_CODE (operands[0]) == REG\n+   && REG_P (operands[0])\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n    && ((INTVAL (operands[1]) < 0\n@@ -3239,7 +3239,7 @@ beq\\t%2,%.,1b\\;\\\n \t(mem:SI (plus:SI (match_dup 0)\n \t\t\t (match_operand:SI 1 \"const_int_operand\"))))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n-   && GET_CODE (operands[0]) == REG\n+   && REG_P (operands[0])\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n    && ((INTVAL (operands[1]) < 0\n@@ -3280,7 +3280,7 @@ beq\\t%2,%.,1b\\;\\\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(match_operand:SI 1 \"const_int_operand\"))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n-   && GET_CODE (operands[0]) == REG\n+   && REG_P (operands[0])\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n    && INTVAL (operands[1]) >= 0x100\n@@ -3447,7 +3447,7 @@ beq\\t%2,%.,1b\\;\\\n \t(mem:HI (plus:SI (match_dup 0)\n \t\t\t (match_operand:SI 1 \"const_int_operand\"))))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n-   && GET_CODE (operands[0]) == REG\n+   && REG_P (operands[0])\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n    && ((INTVAL (operands[1]) < 0\n@@ -3542,7 +3542,7 @@ beq\\t%2,%.,1b\\;\\\n \t(mem:QI (plus:SI (match_dup 0)\n \t\t\t (match_operand:SI 1 \"const_int_operand\"))))]\n   \"TARGET_MIPS16 && reload_completed && !TARGET_DEBUG_D_MODE\n-   && GET_CODE (operands[0]) == REG\n+   && REG_P (operands[0])\n    && M16_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == CONST_INT\n    && ((INTVAL (operands[1]) < 0"}]}