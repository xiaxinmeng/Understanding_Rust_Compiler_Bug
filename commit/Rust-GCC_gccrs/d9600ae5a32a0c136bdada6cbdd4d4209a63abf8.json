{"sha": "d9600ae5a32a0c136bdada6cbdd4d4209a63abf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk2MDBhZTVhMzJhMGMxMzZiZGFkYTZjYmRkNGQ0MjA5YTYzYWJmOA==", "commit": {"author": {"name": "Sofiane Naci", "email": "sofiane.naci@arm.com", "date": "2012-12-03T11:13:41Z"}, "committer": {"name": "Sofiane Naci", "email": "sofiane@gcc.gnu.org", "date": "2012-12-03T11:13:41Z"}, "message": "[AARCH64] Refactor constant generation.\n\n2012-12-03  Sofiane Naci  <sofiane.naci@arm.com>\n\n\t* config/aarch64/aarch64.c (aarch64_build_constant): Update prototype.\n\tCall emit_move_insn\tinstead of printing movi/movn/movz instructions.\n\tCall gen_insv_immdi instead of printing movk instruction.\n\t(aarch64_add_constant): Update prototype.\n\tGenerate RTL instead of printing add/sub instructions.\n\t(aarch64_output_mi_thunk): Update calls to aarch64_build_constant\n\tand aarch64_add_constant.\n\nFrom-SVN: r194080", "tree": {"sha": "77499767c6d2e15aef8f7a3fe2c4bac8fa3b7250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77499767c6d2e15aef8f7a3fe2c4bac8fa3b7250"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9600ae5a32a0c136bdada6cbdd4d4209a63abf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9600ae5a32a0c136bdada6cbdd4d4209a63abf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9600ae5a32a0c136bdada6cbdd4d4209a63abf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9600ae5a32a0c136bdada6cbdd4d4209a63abf8/comments", "author": null, "committer": null, "parents": [{"sha": "6ff11db28bc9e785ae4e8cb13916b692adf3acbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ff11db28bc9e785ae4e8cb13916b692adf3acbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ff11db28bc9e785ae4e8cb13916b692adf3acbe"}], "stats": {"total": 64, "additions": 41, "deletions": 23}, "files": [{"sha": "9d1c457dd3284a3510a54cf75a0cecdea8ece364", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9600ae5a32a0c136bdada6cbdd4d4209a63abf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9600ae5a32a0c136bdada6cbdd4d4209a63abf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9600ae5a32a0c136bdada6cbdd4d4209a63abf8", "patch": "@@ -1,3 +1,13 @@\n+2012-12-03  Sofiane Naci  <sofiane.naci@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_build_constant): Update prototype.\n+\tCall emit_move_insn\tinstead of printing movi/movn/movz instructions.\n+\tCall gen_insv_immdi instead of printing movk instruction.\n+\t(aarch64_add_constant): Update prototype.\n+\tGenerate RTL instead of printing add/sub instructions.\n+\t(aarch64_output_mi_thunk): Update calls to aarch64_build_constant\n+\tand aarch64_add_constant.\n+\n 2012-12-03 Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/53912"}, {"sha": "f262ef940e0c65b14990531ad9dbfa00f35230da", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9600ae5a32a0c136bdada6cbdd4d4209a63abf8/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9600ae5a32a0c136bdada6cbdd4d4209a63abf8/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d9600ae5a32a0c136bdada6cbdd4d4209a63abf8", "patch": "@@ -2236,12 +2236,10 @@ aarch64_final_eh_return_addr (void)\n \n /* Output code to build up a constant in a register.  */\n static void\n-aarch64_build_constant (FILE *file,\n-\t\t\tint regnum,\n-\t\t\tHOST_WIDE_INT val)\n+aarch64_build_constant (int regnum, HOST_WIDE_INT val)\n {\n   if (aarch64_bitmask_imm (val, DImode))\n-    asm_fprintf (file, \"\\tmovi\\t%r, %wd\\n\", regnum, val);\n+    emit_move_insn (gen_rtx_REG (Pmode, regnum), GEN_INT (val));\n   else\n     {\n       int i;\n@@ -2272,12 +2270,14 @@ aarch64_build_constant (FILE *file,\n \t the same.  */\n       if (ncount < zcount)\n \t{\n-\t  asm_fprintf (file, \"\\tmovn\\t%r, %wd\\n\", regnum, (~val) & 0xffff);\n+\t  emit_move_insn (gen_rtx_REG (Pmode, regnum),\n+\t\t\t  GEN_INT ((~val) & 0xffff));\n \t  tval = 0xffff;\n \t}\n       else\n \t{\n-\t  asm_fprintf (file, \"\\tmovz\\t%r, %wd\\n\", regnum, val & 0xffff);\n+\t  emit_move_insn (gen_rtx_REG (Pmode, regnum),\n+\t\t\t  GEN_INT (val & 0xffff));\n \t  tval = 0;\n \t}\n \n@@ -2286,39 +2286,47 @@ aarch64_build_constant (FILE *file,\n       for (i = 16; i < 64; i += 16)\n \t{\n \t  if ((val & 0xffff) != tval)\n-\t    asm_fprintf (file, \"\\tmovk\\t%r, %wd, lsl %d\\n\",\n-\t\t\t regnum, val & 0xffff, i);\n+\t    emit_insn (gen_insv_immdi (gen_rtx_REG (Pmode, regnum),\n+\t\t\t\t       GEN_INT (i), GEN_INT (val & 0xffff)));\n \t  val >>= 16;\n \t}\n     }\n }\n \n static void\n-aarch64_add_constant (FILE *file, int regnum, int scratchreg,\n-\t\t\t     HOST_WIDE_INT delta)\n+aarch64_add_constant (int regnum, int scratchreg, HOST_WIDE_INT delta)\n {\n   HOST_WIDE_INT mdelta = delta;\n+  rtx this_rtx = gen_rtx_REG (Pmode, regnum);\n+  rtx scratch_rtx = gen_rtx_REG (Pmode, scratchreg);\n \n   if (mdelta < 0)\n     mdelta = -mdelta;\n \n   if (mdelta >= 4096 * 4096)\n     {\n-      aarch64_build_constant (file, scratchreg, delta);\n-      asm_fprintf (file, \"\\tadd\\t%r, %r, %r\\n\", regnum, regnum,\n-\t\t   scratchreg);\n+      aarch64_build_constant (scratchreg, delta);\n+      emit_insn (gen_add3_insn (this_rtx, this_rtx, scratch_rtx));\n     }\n   else if (mdelta > 0)\n     {\n-      const char *const mi_op = delta < 0 ? \"sub\" : \"add\";\n-\n       if (mdelta >= 4096)\n-\tasm_fprintf (file, \"\\t%s\\t%r, %r, %wd, lsl 12\\n\", mi_op, regnum, regnum,\n-\t\t     mdelta / 4096);\n-\n+\t{\n+\t  emit_insn (gen_rtx_SET (Pmode, scratch_rtx, GEN_INT (mdelta / 4096)));\n+\t  rtx shift = gen_rtx_ASHIFT (Pmode, scratch_rtx, GEN_INT (12));\n+\t  if (delta < 0)\n+\t    emit_insn (gen_rtx_SET (Pmode, this_rtx,\n+\t\t\t\t    gen_rtx_MINUS (Pmode, this_rtx, shift)));\n+\t  else\n+\t    emit_insn (gen_rtx_SET (Pmode, this_rtx,\n+\t\t\t\t    gen_rtx_PLUS (Pmode, this_rtx, shift)));\n+\t}\n       if (mdelta % 4096 != 0)\n-\tasm_fprintf (file, \"\\t%s\\t%r, %r, %wd\\n\", mi_op, regnum, regnum,\n-\t\t     mdelta % 4096);\n+\t{\n+\t  scratch_rtx = GEN_INT ((delta < 0 ? -1 : 1) * (mdelta % 4096));\n+\t  emit_insn (gen_rtx_SET (Pmode, this_rtx,\n+\t\t\t\t  gen_rtx_PLUS (Pmode, this_rtx, scratch_rtx)));\n+\t}\n     }\n }\n \n@@ -2341,7 +2349,7 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   emit_note (NOTE_INSN_PROLOGUE_END);\n \n   if (vcall_offset == 0)\n-    aarch64_add_constant (file, this_regno, IP1_REGNUM, delta);\n+    aarch64_add_constant (this_regno, IP1_REGNUM, delta);\n   else\n     {\n       gcc_assert ((vcall_offset & 0x7) == 0);\n@@ -2357,7 +2365,7 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t    addr = gen_rtx_PRE_MODIFY (Pmode, this_rtx,\n \t\t\t\t       plus_constant (Pmode, this_rtx, delta));\n \t  else\n-\t    aarch64_add_constant (file, this_regno, IP1_REGNUM, delta);\n+\t    aarch64_add_constant (this_regno, IP1_REGNUM, delta);\n \t}\n \n       aarch64_emit_move (temp0, gen_rtx_MEM (Pmode, addr));\n@@ -2366,7 +2374,7 @@ aarch64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \t  addr = plus_constant (Pmode, temp0, vcall_offset);\n       else\n \t{\n-\t  aarch64_build_constant (file, IP1_REGNUM, vcall_offset);\n+\t  aarch64_build_constant (IP1_REGNUM, vcall_offset);\n \t  addr = gen_rtx_PLUS (Pmode, temp0, temp1);\n \t}\n "}]}