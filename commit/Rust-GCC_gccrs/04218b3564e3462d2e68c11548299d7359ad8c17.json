{"sha": "04218b3564e3462d2e68c11548299d7359ad8c17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQyMThiMzU2NGUzNDYyZDJlNjhjMTE1NDgyOTlkNzM1OWFkOGMxNw==", "commit": {"author": {"name": "Andrew Dixie", "email": "andrewd@gentrack.com", "date": "2015-09-18T14:10:36Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2015-09-18T14:10:36Z"}, "message": "config.host (powerpc-ibm-aix*): Add crtdbase.o to extra_parts.\n\nlibgcc/\n        * config.host (powerpc-ibm-aix*): Add crtdbase.o to extra_parts.\n        * config/rs6000/crtdbase.S: New file.\n        * config/rs6000/t-aix-cxa: Build crtdbase.o.\n\ngcc/\n        * defaults.h (EH_FRAME_SECTION_NAME): Depend on\n        EH_FRAME_THROUGH_COLLECT2.\n        * dwarf2asm.c (dw2_asm_output_encoded_addr_rtx): Add case for\n        DW_EH_PE_datarel.\n        * dwarf2out.c (switch_to_eh_frame_section): Use a read-only section\n        even if EH_FRAME_SECTION_NAME is undefined.  Restrict special\n        collect2 labels to EH_FRAME_THROUGH_COLLECT2.\n        * except.c (switch_to_exception_section): Use a read-only section\n        even if EH_FRAME_SECTION_NAME is undefined.\n        * system.h (EH_FRAME_IN_DATA_SECTION): Poison.\n        * collect2.c (write_c_file_stat): Provide dbase on AIX.\n        (scan_prog_file): Don't export __dso_handle nor\n        __gcc_unwind_dbase.\n        * config/rs6000/aix.h (ASM_PREFERRED_EH_DATA_FORMAT): Define.\n        (EH_TABLES_CAN_BE_READ_ONLY): Define.\n        (ASM_OUTPUT_DWARF_PCREL): Define.\n        (ASM_OUTPUT_DWARF_DATAREL): Define.\n        (EH_FRAME_THROUGH_COLLECT2): Define.\n        (EH_FRAME_IN_DATA_SECTION): Delete.\n        * config/rs6000/rs6000.c (rs6000_aix_asm_output_dwarf_pcrel): New.\n        (rs6000_aix_asm_output_dwarf_datarel): New.\n        (rs6000_xcoff_asm_init_sections): Don't set exception_section.\n        * config/spu/spu-elf.h (EH_FRAME_IN_DATA_SECTION): Delete.\n        (EH_FRAME_THROUGH_COLLECT2): Define.\n        * config/i386/i386-interix.h (EH_FRAME_IN_DATA_SECTION): Delete.\n        (EH_FRAME_THROUGH_COLLECT2): Define.\n        (EH_TABLES_CAN_BE_READ_ONLY): Define.\n        * doc/tm.texi.in (EH_FRAME_IN_DATA_SECTION): Delete.\n        (EH_FRAME_THROUGH_COLLECT2): New.\n        (ASM_OUTPUT_DWARF_DATAREL): New.\n        * doc/tm.texi: Regenerate.\n\nCo-Authored-By: David Edelsohn <dje.gcc@gmail.com>\n\nFrom-SVN: r227906", "tree": {"sha": "a2da31202b08fdaf8e1ee8716ea6db02c1e77164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2da31202b08fdaf8e1ee8716ea6db02c1e77164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04218b3564e3462d2e68c11548299d7359ad8c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04218b3564e3462d2e68c11548299d7359ad8c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04218b3564e3462d2e68c11548299d7359ad8c17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04218b3564e3462d2e68c11548299d7359ad8c17/comments", "author": {"login": "andrewdixie", "id": 5185985, "node_id": "MDQ6VXNlcjUxODU5ODU=", "avatar_url": "https://avatars.githubusercontent.com/u/5185985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewdixie", "html_url": "https://github.com/andrewdixie", "followers_url": "https://api.github.com/users/andrewdixie/followers", "following_url": "https://api.github.com/users/andrewdixie/following{/other_user}", "gists_url": "https://api.github.com/users/andrewdixie/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewdixie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewdixie/subscriptions", "organizations_url": "https://api.github.com/users/andrewdixie/orgs", "repos_url": "https://api.github.com/users/andrewdixie/repos", "events_url": "https://api.github.com/users/andrewdixie/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewdixie/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8cd60b238b40e06647938ef44114da23b6d27391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd60b238b40e06647938ef44114da23b6d27391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cd60b238b40e06647938ef44114da23b6d27391"}], "stats": {"total": 249, "additions": 194, "deletions": 55}, "files": [{"sha": "c8c44127b1f992aaff883570f0c59bff3985df1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -1,3 +1,38 @@\n+2015-09-18  Andrew Dixie  <andrewd@gentrack.com>\n+\t    David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* defaults.h (EH_FRAME_SECTION_NAME): Depend on\n+\tEH_FRAME_THROUGH_COLLECT2.\n+\t* dwarf2asm.c (dw2_asm_output_encoded_addr_rtx): Add case for\n+\tDW_EH_PE_datarel.\n+\t* dwarf2out.c (switch_to_eh_frame_section): Use a read-only section\n+\teven if EH_FRAME_SECTION_NAME is undefined.  Restrict special\n+\tcollect2 labels to EH_FRAME_THROUGH_COLLECT2.\n+\t* except.c (switch_to_exception_section): Use a read-only section\n+\teven if EH_FRAME_SECTION_NAME is undefined.\n+\t* system.h (EH_FRAME_IN_DATA_SECTION): Poison.\n+\t* collect2.c (write_c_file_stat): Provide dbase on AIX.\n+\t(scan_prog_file): Don't export __dso_handle nor\n+\t__gcc_unwind_dbase.\n+\t* config/rs6000/aix.h (ASM_PREFERRED_EH_DATA_FORMAT): Define.\n+\t(EH_TABLES_CAN_BE_READ_ONLY): Define.\n+\t(ASM_OUTPUT_DWARF_PCREL): Define.\n+\t(ASM_OUTPUT_DWARF_DATAREL): Define.\n+\t(EH_FRAME_THROUGH_COLLECT2): Define.\n+\t(EH_FRAME_IN_DATA_SECTION): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_aix_asm_output_dwarf_pcrel): New.\n+\t(rs6000_aix_asm_output_dwarf_datarel): New.\n+\t(rs6000_xcoff_asm_init_sections): Don't\tset exception_section.\n+\t* config/spu/spu-elf.h (EH_FRAME_IN_DATA_SECTION): Delete.\n+\t(EH_FRAME_THROUGH_COLLECT2): Define.\n+\t* config/i386/i386-interix.h (EH_FRAME_IN_DATA_SECTION): Delete.\n+\t(EH_FRAME_THROUGH_COLLECT2): Define.\n+\t(EH_TABLES_CAN_BE_READ_ONLY): Define.\n+\t* doc/tm.texi.in (EH_FRAME_IN_DATA_SECTION): Delete.\n+\t(EH_FRAME_THROUGH_COLLECT2): New.\n+\t(ASM_OUTPUT_DWARF_DATAREL): New.\n+\t* doc/tm.texi: Regenerate.\n+\n 2015-09-18  Richard Biener  <rguenther@suse.de>\n \n \t* dwarf2out.c (append_entry_to_tmpl_value_parm_die_table): Assert"}, {"sha": "20c253326f8e8b8ac94e34fc61ba5944888c5dcd", "filename": "gcc/collect2.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -2108,12 +2108,23 @@ write_c_file_stat (FILE *stream, const char *name ATTRIBUTE_UNUSED)\n       fprintf (stream, \"  struct object *next;\\n\");\n       fprintf (stream, \"};\\n\");\n \n+      fprintf (stream, \"extern void __register_frame_info_table_bases (void *, struct object *, void *tbase, void *dbase);\\n\");\n       fprintf (stream, \"extern void __register_frame_info_table (void *, struct object *);\\n\");\n       fprintf (stream, \"extern void *__deregister_frame_info (void *);\\n\");\n+#ifdef TARGET_AIX_VERSION\n+      fprintf (stream, \"extern void *__gcc_unwind_dbase;\\n\");\n+#endif\n \n       fprintf (stream, \"static void reg_frame () {\\n\");\n       fprintf (stream, \"\\tstatic struct object ob;\\n\");\n+#ifdef TARGET_AIX_VERSION\n+      /* Use __gcc_unwind_dbase as the base address for data on AIX.\n+\t This might not be the start of the segment, signed offsets assumed.\n+       */\n+      fprintf (stream, \"\\t__register_frame_info_table_bases (frame_table, &ob, (void *)0, &__gcc_unwind_dbase);\\n\");\n+#else\n       fprintf (stream, \"\\t__register_frame_info_table (frame_table, &ob);\\n\");\n+#endif\n       fprintf (stream, \"\\t}\\n\");\n \n       fprintf (stream, \"static void dereg_frame () {\\n\");\n@@ -2878,7 +2889,16 @@ scan_prog_file (const char *prog_name, scanpass which_pass,\n \t\t\t     provides an explicit export list.  */\n \t\t\t  if (shared_obj && !is_shared\n \t\t\t      && which_pass == PASS_OBJ && !export_flag)\n-\t\t\t    add_to_list (&exports, name);\n+\t\t\t    {\n+\t\t\t      /* Do not auto-export __dso_handle or\n+\t\t\t\t __gcc_unwind_dbase.  They are required\n+\t\t\t\t to be local to each module.  */\n+\t\t\t      if (strcmp(name, \"__dso_handle\") != 0\n+\t\t\t\t  && strcmp(name, \"__gcc_unwind_dbase\") != 0)\n+\t\t\t\t{\n+\t\t\t\t  add_to_list (&exports, name);\n+\t\t\t\t}\n+\t\t\t    }\n #endif\n \t\t\t  continue;\n \t\t\t}"}, {"sha": "97dbcd97ef5419e268743659a6f9e36f5df3186d", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -153,8 +153,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define drectve_section()  /* nothing */\n \n \n-#define EH_FRAME_IN_DATA_SECTION\n-\n #define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section\\t.rdata,\\\"r\\\"\"\n \n /* Define this macro if references to a symbol must be treated\n@@ -326,7 +324,8 @@ while (0)\n  : ((n) >= FIRST_STACK_REG && (n) <= LAST_STACK_REG) ? (int) (n)+8 \\\n  : (int) (-1))\n \n-#define EH_FRAME_IN_DATA_SECTION\n+#define EH_FRAME_THROUGH_COLLECT2\n+#define EH_TABLES_CAN_BE_READ_ONLY 0\n \n /* the following are OSF linker (not gld) specific... we don't want them */\n #undef HAS_INIT_SECTION"}, {"sha": "8a22af629628c0109c09535914bb602619a592a9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -30790,7 +30790,6 @@ rs6000_xcoff_asm_init_sections (void)\n     = get_unnamed_section (0, rs6000_xcoff_output_toc_section_asm_op, NULL);\n \n   readonly_data_section = read_only_data_section;\n-  exception_section = data_section;\n }\n \n static int\n@@ -31159,6 +31158,31 @@ rs6000_xcoff_declare_object_name (FILE *file, const char *name, tree decl)\n   symtab_node::get (decl)->call_for_symbol_and_aliases (rs6000_declare_alias, &data, true);\n }\n \n+/* Overide the default 'SYMBOL-.' syntax with AIX compatible 'SYMBOL-$'. */\n+\n+void\n+rs6000_asm_output_dwarf_pcrel (FILE *file, int size, const char *label)\n+{\n+  fputs (integer_asm_op (size, FALSE), file);\n+  assemble_name (file, label);\n+  fputs (\"-$\", file);\n+}\n+\n+/* Output a symbol offset relative to the dbase for the current object.\n+   We use __gcc_unwind_dbase as an arbitrary base for dbase and assume\n+   signed offsets.\n+\n+   __gcc_unwind_dbase is embedded in all executables/libraries through\n+   libgcc/config/rs6000/crtdbase.S.  */\n+\n+void\n+rs6000_asm_output_dwarf_datarel (FILE *file, int size, const char *label)\n+{\n+  fputs (integer_asm_op (size, FALSE), file);\n+  assemble_name (file, label);\n+  fputs(\"-__gcc_unwind_dbase\", file);\n+}\n+\n #ifdef HAVE_AS_TLS\n static void\n rs6000_xcoff_encode_section_info (tree decl, rtx rtl, int first)"}, {"sha": "46d35016af0ea3ef0596c909cb17bb4e840b2a50", "filename": "gcc/config/spu/spu-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fconfig%2Fspu%2Fspu-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fconfig%2Fspu%2Fspu-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-elf.h?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -61,7 +61,7 @@\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION  default_elf_asm_named_section\n \n-#define EH_FRAME_IN_DATA_SECTION 1\n+#define EH_FRAME_THROUGH_COLLECT2 1\n \n #define LINK_SPEC \"%{mlarge-mem: --defsym __stack=0xfffffff0 }\"\n "}, {"sha": "14ef91ad4b51a035c938a5e02fa15563cf1aa7b3", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -351,7 +351,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* If we have named sections, and we're using crtstuff to run ctors,\n    use them for registering eh frame information.  */\n #if defined (TARGET_ASM_NAMED_SECTION) && DWARF2_UNWIND_INFO \\\n-    && !defined (EH_FRAME_IN_DATA_SECTION)\n+    && !defined (EH_FRAME_THROUGH_COLLECT2)\n #ifndef EH_FRAME_SECTION_NAME\n #define EH_FRAME_SECTION_NAME \".eh_frame\"\n #endif"}, {"sha": "eb495a86a7269b4e8cb5f9dfeb1087afff26568c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -8962,14 +8962,15 @@ You should define this symbol if your target supports DWARF 2 frame\n unwind information and the default definition does not work.\n @end defmac\n \n-@defmac EH_FRAME_IN_DATA_SECTION\n-If defined, DWARF 2 frame unwind information will be placed in the\n-data section even though the target supports named sections.  This\n-might be necessary, for instance, if the system linker does garbage\n-collection and sections cannot be marked as not to be collected.\n+@defmac EH_FRAME_THROUGH_COLLECT2\n+If defined, DWARF 2 frame unwind information will identified by\n+specially named labels.  The collect2 process will locate these\n+labels and generate code to register the frames.\n \n-Do not define this macro unless @code{TARGET_ASM_NAMED_SECTION} is\n-also defined.\n+This might be necessary, for instance, if the system linker will not\n+place the eh_frames in-between the sentinals from @file{crtstuff.c},\n+or if the system linker does garbage collection and sections cannot\n+be marked as not to be collected.\n @end defmac\n \n @defmac EH_TABLES_CAN_BE_READ_ONLY\n@@ -9597,6 +9598,11 @@ A C statement to issue assembly directives that create a self-relative\n reference to the given @var{label}, using an integer of the given @var{size}.\n @end defmac\n \n+@defmac ASM_OUTPUT_DWARF_DATAREL (@var{stream}, @var{size}, @var{label})\n+A C statement to issue assembly directives that create a reference to the\n+given @var{label} relative to the dbase, using an integer of the given @var{size}.\n+@end defmac\n+\n @defmac ASM_OUTPUT_DWARF_TABLE_REF (@var{label})\n A C statement to issue assembly directives that create a reference to\n the DWARF table identifier @var{label} from the current section.  This"}, {"sha": "92835c19c1e7be880e3b42575db40c671c476d51", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -6477,14 +6477,15 @@ You should define this symbol if your target supports DWARF 2 frame\n unwind information and the default definition does not work.\n @end defmac\n \n-@defmac EH_FRAME_IN_DATA_SECTION\n-If defined, DWARF 2 frame unwind information will be placed in the\n-data section even though the target supports named sections.  This\n-might be necessary, for instance, if the system linker does garbage\n-collection and sections cannot be marked as not to be collected.\n+@defmac EH_FRAME_THROUGH_COLLECT2\n+If defined, DWARF 2 frame unwind information will identified by\n+specially named labels.  The collect2 process will locate these\n+labels and generate code to register the frames.\n \n-Do not define this macro unless @code{TARGET_ASM_NAMED_SECTION} is\n-also defined.\n+This might be necessary, for instance, if the system linker will not\n+place the eh_frames in-between the sentinals from @file{crtstuff.c},\n+or if the system linker does garbage collection and sections cannot\n+be marked as not to be collected.\n @end defmac\n \n @defmac EH_TABLES_CAN_BE_READ_ONLY\n@@ -7033,6 +7034,11 @@ A C statement to issue assembly directives that create a self-relative\n reference to the given @var{label}, using an integer of the given @var{size}.\n @end defmac\n \n+@defmac ASM_OUTPUT_DWARF_DATAREL (@var{stream}, @var{size}, @var{label})\n+A C statement to issue assembly directives that create a reference to the\n+given @var{label} relative to the dbase, using an integer of the given @var{size}.\n+@end defmac\n+\n @defmac ASM_OUTPUT_DWARF_TABLE_REF (@var{label})\n A C statement to issue assembly directives that create a reference to\n the DWARF table identifier @var{label} from the current section.  This"}, {"sha": "3a30fe443a8638baca807d5d4c44f59a56ecd9d5", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -984,6 +984,13 @@ dw2_asm_output_encoded_addr_rtx (int encoding, rtx addr, bool is_public,\n \t  dw2_assemble_integer (size, addr);\n \t  break;\n \n+#ifdef ASM_OUTPUT_DWARF_DATAREL\n+\tcase DW_EH_PE_datarel:\n+\t  gcc_assert (GET_CODE (addr) == SYMBOL_REF);\n+\t  ASM_OUTPUT_DWARF_DATAREL (asm_out_file, size, XSTR (addr, 0));\n+\t  break;\n+#endif\n+\n \tcase DW_EH_PE_pcrel:\n \t  gcc_assert (GET_CODE (addr) == SYMBOL_REF);\n #ifdef ASM_OUTPUT_DWARF_PCREL"}, {"sha": "4a1c15245dea69cee8cf6dcbbcb15408ee27e0df", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -438,7 +438,6 @@ switch_to_eh_frame_section (bool back)\n {\n   tree label;\n \n-#ifdef EH_FRAME_SECTION_NAME\n   if (eh_frame_section == 0)\n     {\n       int flags;\n@@ -466,27 +465,29 @@ switch_to_eh_frame_section (bool back)\n \t}\n       else\n \tflags = SECTION_WRITE;\n+\n+#ifdef EH_FRAME_SECTION_NAME\n       eh_frame_section = get_section (EH_FRAME_SECTION_NAME, flags, NULL);\n-    }\n+#else\n+      eh_frame_section = ((flags == SECTION_WRITE)\n+\t\t\t  ? data_section : readonly_data_section);\n #endif /* EH_FRAME_SECTION_NAME */\n+    }\n \n-  if (eh_frame_section)\n-    switch_to_section (eh_frame_section);\n-  else\n-    {\n-      /* We have no special eh_frame section.  Put the information in\n-\t the data section and emit special labels to guide collect2.  */\n-      switch_to_section (data_section);\n+  switch_to_section (eh_frame_section);\n \n-      if (!back)\n-\t{\n-\t  label = get_file_function_name (\"F\");\n-\t  ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));\n-\t  targetm.asm_out.globalize_label (asm_out_file,\n-\t\t\t\t\t   IDENTIFIER_POINTER (label));\n-\t  ASM_OUTPUT_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n-\t}\n+#ifdef EH_FRAME_THROUGH_COLLECT2\n+  /* We have no special eh_frame section.  Emit special labels to guide\n+     collect2.  */\n+  if (!back)\n+    {\n+      label = get_file_function_name (\"F\");\n+      ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (PTR_SIZE));\n+      targetm.asm_out.globalize_label (asm_out_file,\n+\t\t\t\t\tIDENTIFIER_POINTER (label));\n+      ASM_OUTPUT_LABEL (asm_out_file, IDENTIFIER_POINTER (label));\n     }\n+#endif\n }\n \n /* Switch [BACK] to the eh or debug frame table section, depending on"}, {"sha": "86ad6bc4446183ad51d78a24354f06f03f486cd6", "filename": "gcc/except.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -2838,24 +2838,24 @@ switch_to_exception_section (const char * ARG_UNUSED (fnname))\n     s = exception_section;\n   else\n     {\n+      int flags;\n+\n+      if (EH_TABLES_CAN_BE_READ_ONLY)\n+\t{\n+\t  int tt_format =\n+\t    ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/1);\n+\t  flags = ((! flag_pic\n+\t\t    || ((tt_format & 0x70) != DW_EH_PE_absptr\n+\t\t\t&& (tt_format & 0x70) != DW_EH_PE_aligned))\n+\t\t   ? 0 : SECTION_WRITE);\n+\t}\n+      else\n+\tflags = SECTION_WRITE;\n+\n       /* Compute the section and cache it into exception_section,\n \t unless it depends on the function name.  */\n       if (targetm_common.have_named_sections)\n \t{\n-\t  int flags;\n-\n-\t  if (EH_TABLES_CAN_BE_READ_ONLY)\n-\t    {\n-\t      int tt_format =\n-\t\tASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/1);\n-\t      flags = ((! flag_pic\n-\t\t\t|| ((tt_format & 0x70) != DW_EH_PE_absptr\n-\t\t\t    && (tt_format & 0x70) != DW_EH_PE_aligned))\n-\t\t       ? 0 : SECTION_WRITE);\n-\t    }\n-\t  else\n-\t    flags = SECTION_WRITE;\n-\n #ifdef HAVE_LD_EH_GC_SECTIONS\n \t  if (flag_function_sections\n \t      || (DECL_COMDAT_GROUP (current_function_decl) && HAVE_COMDAT_GROUP))\n@@ -2876,7 +2876,7 @@ switch_to_exception_section (const char * ARG_UNUSED (fnname))\n \t}\n       else\n \texception_section\n-\t  = s = flag_pic ? data_section : readonly_data_section;\n+\t  = s = flags == SECTION_WRITE ? data_section : readonly_data_section;\n     }\n \n   switch_to_section (s);"}, {"sha": "1ba5afc63948803e7b6ae7d8104f6c07912621c1", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -956,7 +956,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tEXTRA_ADDRESS_CONSTRAINT CONST_DOUBLE_OK_FOR_CONSTRAINT_P\t   \\\n \tCALLER_SAVE_PROFITABLE LARGEST_EXPONENT_IS_NORMAL\t\t   \\\n \tROUND_TOWARDS_ZERO SF_SIZE DF_SIZE XF_SIZE TF_SIZE LIBGCC2_TF_CEXT \\\n-\tLIBGCC2_LONG_DOUBLE_TYPE_SIZE STRUCT_VALUE\n+\tLIBGCC2_LONG_DOUBLE_TYPE_SIZE STRUCT_VALUE EH_FRAME_IN_DATA_SECTION\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "8d44ec2f75bccda47105d69a54cda36bdf1e740c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -1,3 +1,10 @@\n+2015-09-18  Andrew Dixie  <andrewd@gentrack.com>\n+\t    David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config.host (powerpc-ibm-aix*): Add crtdbase.o to extra_parts.\n+\t* config/rs6000/crtdbase.S: New file.\n+\t* config/rs6000/t-aix-cxa: Build crtdbase.o.\n+\n 2015-09-15  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* config/xtensa/linux-unwind.h (xtensa_fallback_frame_state):"}, {"sha": "140aa227c499dc01d140d0498a748372c90f8392", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -1085,7 +1085,7 @@ rs6000-ibm-aix5.1.* | powerpc-ibm-aix5.1.*)\n rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n \tmd_unwind_header=rs6000/aix-unwind.h\n \ttmake_file=\"t-fdpbit rs6000/t-ppc64-fp rs6000/t-slibgcc-aix rs6000/t-ibm-ldouble rs6000/t-aix-cxa\"\n-\textra_parts=\"crtcxa.o crtcxa_s.o\"\n+\textra_parts=\"crtcxa.o crtcxa_s.o crtdbase.o\"\n \t;;\n rl78-*-elf)\n \ttmake_file=\"$tm_file t-fdpbit rl78/t-rl78\""}, {"sha": "732d7775e7352b3127573ef0666563500860aa87", "filename": "libgcc/config/rs6000/crtdbase.S", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/libgcc%2Fconfig%2Frs6000%2Fcrtdbase.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/libgcc%2Fconfig%2Frs6000%2Fcrtdbase.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fcrtdbase.S?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -0,0 +1,31 @@\n+/* Defines __gcc_unwind_dbase\n+\n+   Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+   This file is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This file is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Symbol used as an arbitrary base for offsets inside the data\n+ * segment for unwind information. */\n+\t.file \"crtdbase.S\"\n+\t.globl __gcc_unwind_dbase\n+\t.csect __gcc_unwind_dbase[RW],2\n+\t.align 2\n+__gcc_unwind_dbase:\n+\t.long 0"}, {"sha": "f230a88d47fbfbc49cbcd8c7078c38d1f2ed263e", "filename": "libgcc/config/rs6000/t-aix-cxa", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04218b3564e3462d2e68c11548299d7359ad8c17/libgcc%2Fconfig%2Frs6000%2Ft-aix-cxa", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04218b3564e3462d2e68c11548299d7359ad8c17/libgcc%2Fconfig%2Frs6000%2Ft-aix-cxa", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-aix-cxa?ref=04218b3564e3462d2e68c11548299d7359ad8c17", "patch": "@@ -5,6 +5,9 @@ LIB2ADD_ST += $(srcdir)/config/rs6000/aixinitfini.c\n \n SHLIB_MAPFILES += $(srcdir)/config/rs6000/libgcc-aix-cxa.ver\n \n+crtdbase.o: $(srcdir)/config/rs6000/crtdbase.S\n+\t$(crt_compile) -c $<\n+\n crtcxa.o: $(srcdir)/config/rs6000/crtcxa.c\n \t$(crt_compile) -c $<\n "}]}