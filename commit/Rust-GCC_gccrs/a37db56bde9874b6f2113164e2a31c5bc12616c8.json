{"sha": "a37db56bde9874b6f2113164e2a31c5bc12616c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM3ZGI1NmJkZTk4NzRiNmYyMTEzMTY0ZTJhMzFjNWJjMTI2MTZjOA==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2003-04-12T02:16:46Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2003-04-12T02:16:46Z"}, "message": "re PR c++/9393 (Anonymous namespaces and compiling the same file twice)\n\n\tPR c++/9393\n\t* doc/invoke.texi (Debugging Options): Document -frandom-seed.\n\t* configure.in: Check for gettimeofday.\n\t* tree.c (flag_random_seed): Define.\n\t(default_flag_random_seed): New.\n\t(append_random_chars): Use flag_random_seed rather than trying\n\tto acquire randomness here.\n\t* tree.h (default_flag_random_seed): Declare.\n\t* toplev.c (display_help): Add -frandom-seed and -fstack-limit-*\n\tdescriptions.\n\t(decode_f_option): Handle -frandom-seed.\n\t(print_switch_values): Call default_flag_random_seed.\n\t* flags.h (flag_random_seed): Declare.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/alpha/t-crtfm: Use -frandom-seed.\n\nFrom-SVN: r65500", "tree": {"sha": "743ad4a7d130f0376f5a69b500437fcf54a84cf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/743ad4a7d130f0376f5a69b500437fcf54a84cf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a37db56bde9874b6f2113164e2a31c5bc12616c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37db56bde9874b6f2113164e2a31c5bc12616c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a37db56bde9874b6f2113164e2a31c5bc12616c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a37db56bde9874b6f2113164e2a31c5bc12616c8/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df0261868594f8e8c8ec2e1a369ca7fe867a2d02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0261868594f8e8c8ec2e1a369ca7fe867a2d02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df0261868594f8e8c8ec2e1a369ca7fe867a2d02"}], "stats": {"total": 131, "additions": 96, "deletions": 35}, "files": [{"sha": "4b8241d11d83f106c5169f3d890f82d94a9426b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a37db56bde9874b6f2113164e2a31c5bc12616c8", "patch": "@@ -1,5 +1,22 @@\n 2003-04-11  Geoffrey Keating  <geoffk@apple.com>\n \n+\tPR c++/9393\n+\t* doc/invoke.texi (Debugging Options): Document -frandom-seed.\n+\t* configure.in: Check for gettimeofday.\n+\t* tree.c (flag_random_seed): Define.\n+\t(default_flag_random_seed): New.\n+\t(append_random_chars): Use flag_random_seed rather than trying\n+\tto acquire randomness here.\n+\t* tree.h (default_flag_random_seed): Declare.\n+\t* toplev.c (display_help): Add -frandom-seed and -fstack-limit-*\n+\tdescriptions.\n+\t(decode_f_option): Handle -frandom-seed.\n+\t(print_switch_values): Call default_flag_random_seed.\n+\t* flags.h (flag_random_seed): Declare.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/alpha/t-crtfm: Use -frandom-seed.\n+\t\n \t* doc/extend.texi (Empty Structures): New.\n \n \t* c-pch.c: Include flags.h.  Add comments to routines."}, {"sha": "1f190e2d3ed484f7a1b7f47a28ad5da5f5865ecb", "filename": "gcc/config.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=a37db56bde9874b6f2113164e2a31c5bc12616c8", "patch": "@@ -1,4 +1,4 @@\n-/* config.in.  Generated automatically from configure.in by autoheader 2.13.  */\n+/* config.in.  Generated automatically from configure.in by autoheader.  */\n \n /* Define if using alloca.c.  */\n #undef C_ALLOCA\n@@ -150,6 +150,9 @@\n /* Define if you have the getrusage function.  */\n #undef HAVE_GETRUSAGE\n \n+/* Define if you have the gettimeofday function.  */\n+#undef HAVE_GETTIMEOFDAY\n+\n /* Define if you have the getuid function.  */\n #undef HAVE_GETUID\n "}, {"sha": "5ca8c3f747da084d6771e0c0da3b9d969af2dd65", "filename": "gcc/config/alpha/t-crtfm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Fconfig%2Falpha%2Ft-crtfm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Fconfig%2Falpha%2Ft-crtfm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-crtfm?ref=a37db56bde9874b6f2113164e2a31c5bc12616c8", "patch": "@@ -1,4 +1,5 @@\n EXTRA_PARTS += crtfastmath.o\n \n crtfastmath.o: $(srcdir)/config/alpha/crtfastmath.c $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -c -o crtfastmath.o $(srcdir)/config/alpha/crtfastmath.c\n+\t$(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -frandom-seed=gcc-crtfastmath -c \\\n+\t\t-o crtfastmath.o $(srcdir)/config/alpha/crtfastmath.c"}, {"sha": "63063d9c7a5c5a7f14a1c278ca83d6813c990383", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=a37db56bde9874b6f2113164e2a31c5bc12616c8", "patch": "@@ -3714,7 +3714,7 @@ fi\n for ac_func in times clock dup2 kill getrlimit setrlimit atoll atoq \\\n \tsysconf strsignal putc_unlocked fputc_unlocked fputs_unlocked \\\n \tfwrite_unlocked fprintf_unlocked getrusage nl_langinfo lstat \\\n-        scandir alphasort\n+        scandir alphasort gettimeofday\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n echo \"configure:3721: checking for $ac_func\" >&5"}, {"sha": "2a1fbdd862bbcb7619c4d0e4797738084cc2c09d", "filename": "gcc/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=a37db56bde9874b6f2113164e2a31c5bc12616c8", "patch": "@@ -787,7 +787,7 @@ dnl gcc_AC_C_ENUM_BF_UNSIGNED\n AC_CHECK_FUNCS(times clock dup2 kill getrlimit setrlimit atoll atoq \\\n \tsysconf strsignal putc_unlocked fputc_unlocked fputs_unlocked \\\n \tfwrite_unlocked fprintf_unlocked getrusage nl_langinfo lstat \\\n-        scandir alphasort)\n+        scandir alphasort gettimeofday)\n \n AC_CHECK_TYPE(ssize_t, int)\n "}, {"sha": "384d6314acc2a4da45332c74985e321184e26622", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a37db56bde9874b6f2113164e2a31c5bc12616c8", "patch": "@@ -242,15 +242,15 @@ in the following sections.\n -fdump-tree-original@r{[}-@var{n}@r{]}  @gol\n -fdump-tree-optimized@r{[}-@var{n}@r{]} @gol\n -fdump-tree-inlined@r{[}-@var{n}@r{]} @gol\n--feliminate-dwarf2-dups  -fmem-report @gol\n--fprofile-arcs  -fsched-verbose=@var{n} @gol\n+-feliminate-dwarf2-dups -feliminate-unused-debug-types @gol\n+-fmem-report -fprofile-arcs @gol\n+-frandom-seed=@var{string} -fsched-verbose=@var{n} @gol\n -ftest-coverage  -ftime-report @gol\n -g  -g@var{level}  -gcoff  -gdwarf  -gdwarf-1  -gdwarf-1+  -gdwarf-2 @gol\n -ggdb  -gstabs  -gstabs+  -gvms  -gxcoff  -gxcoff+ @gol\n -p  -pg  -print-file-name=@var{library}  -print-libgcc-file-name @gol\n -print-multi-directory  -print-multi-lib @gol\n -print-prog-name=@var{program}  -print-search-dirs  -Q @gol\n--feliminate-unused-debug-types @gol\n -save-temps  -time}\n \n @item Optimization Options\n@@ -3280,6 +3280,14 @@ Dump after all tree based optimization, to @file{@var{file}.optimized}.\n Dump after function inlining, to @file{@var{file}.inlined}.\n @end table\n \n+@item -frandom-seed=@var{string}\n+@opindex frandom-string\n+This option provides a seed that GCC uses when it would otherwise use\n+random numbers.  At present, this is used to generate certain symbol names\n+that have to be different in every compiled file.\n+\n+The @var{string} should be different for every file you compile.\n+\n @item -fsched-verbose=@var{n}\n @opindex fsched-verbose\n On targets that use instruction scheduling, this option controls the"}, {"sha": "e02c3de6c26d2d711d984ee91ef0e743b82eb305", "filename": "gcc/flags.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=a37db56bde9874b6f2113164e2a31c5bc12616c8", "patch": "@@ -671,6 +671,11 @@ extern int flag_signaling_nans;\n \n extern int flag_unit_at_a_time;\n \n+/* A string that's used when a random name is required.  NULL means\n+   to make it really random.  */\n+\n+extern const char *flag_random_seed;\n+\n /* True if the given mode has a NaN representation and the treatment of\n    NaN operands is important.  Certain optimizations, such as folding\n    x * 0 into x, are not correct for NaN operands, and are normally"}, {"sha": "3af0bd8bfe2db25ac3469e6f733a0f29a8d06114", "filename": "gcc/toplev.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a37db56bde9874b6f2113164e2a31c5bc12616c8", "patch": "@@ -3842,6 +3842,10 @@ display_help ()\n   printf (_(\"  -fmessage-length=<number> Limits diagnostics messages lengths to <number> characters per line.  0 suppresses line-wrapping\\n\"));\n   printf (_(\"  -fdiagnostics-show-location=[once | every-line] Indicates how often source location information should be emitted, as prefix, at the beginning of diagnostics when line-wrapping\\n\"));\n   printf (_(\"  -ftls-model=[global-dynamic | local-dynamic | initial-exec | local-exec] Indicates the default thread-local storage code generation model\\n\"));\n+  printf (_(\"  -fstack-limit-register=<register>  Trap if the stack goes past <register>\\n\"));\n+  printf (_(\"  -fstack-limit-symbol=<name>  Trap if the stack goes past symbol <name>\\n\"));\n+  printf (_(\"  -frandom-seed=<string>  Make compile reproducible using <string>\\n\"));\n+  \n \n   for (i = ARRAY_SIZE (f_options); i--;)\n     {\n@@ -4199,6 +4203,10 @@ decode_f_option (arg)\n     }\n   else if (!strcmp (arg, \"no-stack-limit\"))\n     stack_limit_rtx = NULL_RTX;\n+  else if ((option_value = skip_leading_substring (arg, \"random-seed=\")))\n+    flag_random_seed = option_value;\n+  else if (!strcmp (arg, \"no-random-seed\"))\n+    flag_random_seed = NULL;\n   else if (!strcmp (arg, \"preprocessed\"))\n     /* Recognize this switch but do nothing.  This prevents warnings\n        about an unrecognized switch if cpplib has not been linked in.  */\n@@ -4759,6 +4767,12 @@ print_switch_values (file, pos, max, indent, sep, term)\n   size_t j;\n   char **p;\n \n+  /* Fill in the -frandom-seed option, if the user didn't pass it, so\n+     that it can be printed below.  This helps reproducibility.  Of\n+     course, the string may never be used, but we can't tell that at\n+     this point in the compile.  */\n+  default_flag_random_seed ();\n+\n   /* Print the options as passed.  */\n \n   pos = print_single_switch (file, pos, max, indent, *indent ? \" \" : \"\", term,"}, {"sha": "fc4630f62f4db5b1dc0cfe4f84be7710e1c06981", "filename": "gcc/tree.c", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a37db56bde9874b6f2113164e2a31c5bc12616c8", "patch": "@@ -4294,6 +4294,38 @@ dump_tree_statistics ()\n \f\n #define FILE_FUNCTION_FORMAT \"_GLOBAL__%s_%s\"\n \n+const char *flag_random_seed;\n+\n+/* Set up a default flag_random_seed value, if there wasn't one already.  */\n+\n+void\n+default_flag_random_seed (void)\n+{\n+  unsigned HOST_WIDE_INT value;\n+  char *new_random_seed;\n+  \n+  if (flag_random_seed != NULL)\n+    return;\n+\n+  /* Get some more or less random data.  */\n+#ifdef HAVE_GETTIMEOFDAY\n+ {\n+   struct timeval tv;\n+   \n+   gettimeofday (&tv, NULL);\n+   value = (((unsigned HOST_WIDE_INT) tv.tv_usec << 16) \n+\t    ^ tv.tv_sec ^ getpid ());\n+ }\n+#else\n+  value = getpid ();\n+#endif\n+\n+  /* This slightly overestimates the space required.  */\n+  new_random_seed = xmalloc (HOST_BITS_PER_WIDE_INT / 3 + 2);\n+  sprintf (new_random_seed, HOST_WIDE_INT_PRINT_UNSIGNED, value);\n+  flag_random_seed = new_random_seed;\n+}\n+\n /* Appends 6 random characters to TEMPLATE to (hopefully) avoid name\n    clashes in cases where we can't reliably choose a unique name.\n \n@@ -4305,40 +4337,20 @@ append_random_chars (template)\n {\n   static const char letters[]\n     = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n-  static unsigned HOST_WIDE_INT value;\n   unsigned HOST_WIDE_INT v;\n+  size_t i;\n \n-  if (! value)\n-    {\n-      struct stat st;\n+  default_flag_random_seed ();\n \n-      /* VALUE should be unique for each file and must not change between\n-\t compiles since this can cause bootstrap comparison errors.  */\n-\n-      if (stat (main_input_filename, &st) < 0)\n-\t{\n-\t  /* This can happen when preprocessed text is shipped between\n-\t     machines, e.g. with bug reports.  Assume that uniqueness\n-\t     isn't actually an issue.  */\n-\t  value = 1;\n-\t}\n-      else\n-\t{\n-\t  /* In VMS, ino is an array, so we have to use both values.  We\n-\t     conditionalize that.  */\n-#ifdef VMS\n-#define INO_TO_INT(INO) ((int) (INO)[1] << 16 ^ (int) (INO)[2])\n-#else\n-#define INO_TO_INT(INO) INO\n-#endif\n-\t  value = st.st_dev ^ INO_TO_INT (st.st_ino) ^ st.st_mtime;\n-\t}\n-    }\n+  /* This isn't a very good hash, but it does guarantee no collisions \n+     when the random string is generated by the code above and the time\n+     delta is small.  */\n+  v = 0;\n+  for (i = 0; i < strlen (flag_random_seed); i++)\n+    v = (v << 4) ^ (v >> (HOST_BITS_PER_WIDE_INT - 4)) ^ flag_random_seed[i];\n \n   template += strlen (template);\n \n-  v = value;\n-\n   /* Fill in the random bits.  */\n   template[0] = letters[v % 62];\n   v /= 62;"}, {"sha": "8dacb68da55de8e7973fa367bf57954367be961b", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a37db56bde9874b6f2113164e2a31c5bc12616c8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a37db56bde9874b6f2113164e2a31c5bc12616c8", "patch": "@@ -3122,6 +3122,7 @@ extern void expand_start_case_dummy\tPARAMS ((void));\n extern HOST_WIDE_INT all_cases_count\tPARAMS ((tree, int *));\n extern void check_for_full_enumeration_handling PARAMS ((tree));\n extern void declare_nonlocal_label\tPARAMS ((tree));\n+extern void default_flag_random_seed\tPARAMS ((void));\n \n /* If KIND=='I', return a suitable global initializer (constructor) name.\n    If KIND=='D', return a suitable global clean-up (destructor) name.  */"}]}