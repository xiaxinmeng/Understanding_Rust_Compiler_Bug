{"sha": "28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhmM2M4MTQzYjJmN2U2MTc4ZTViYWFmODFkMTVjNjVjYmU2ZjA2Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-01T21:05:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-01T21:05:20Z"}, "message": "math: adjust compilation flags, use them when testing\n    \n    We were using special compilation flags for the math package, but we\n    weren't using them when testing.  That meant that our tests were not\n    checking the real code we were providing.  Fix that.\n    \n    Fixing that revealed that we were not using a good set of flags, or at\n    least were not using flags that let the tests pass.  Adjust the flags\n    to stop using -funsafe-math-optimizations on x86.  Instead always use\n    -ffp-contract=off -fno-math-errno -fno-trapping-math for all targets.\n    \n    Fixes golang/go#23647\n    \n    Reviewed-on: https://go-review.googlesource.com/91355\n\nFrom-SVN: r257312", "tree": {"sha": "22f2408010d680c87c037ebf561a741ac3f31c12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22f2408010d680c87c037ebf561a741ac3f31c12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b/comments", "author": null, "committer": null, "parents": [{"sha": "d15f0fa7f9b7bc2eabb29429a7ca8556a3272625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15f0fa7f9b7bc2eabb29429a7ca8556a3272625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d15f0fa7f9b7bc2eabb29429a7ca8556a3272625"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "531f8f04d1772644629e9584b953ea8ffa38da44", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b", "patch": "@@ -1138,6 +1138,7 @@ $(foreach package,$(GOTOOL_PACKAGES),$(eval $(call PACKAGE_template,$(package)))\n # Pass -ffp-contract=off, or 386-specific options, when building the\n # math package.  MATH_FLAG is defined in configure.ac.\n math_lo_GOCFLAGS = $(MATH_FLAG)\n+math_check_GOCFLAGS = $(MATH_FLAG)\n \n # Add the generated file runtime_sysinfo.go to the runtime package.\n extra_go_files_runtime = runtime_sysinfo.go sigtab.go"}, {"sha": "fbca83ec3af88db67443ca10f78fba2ec72cb07c", "filename": "libgo/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b", "patch": "@@ -1175,6 +1175,7 @@ CHECK_DEPS = $(toolexeclibgo_DATA) $(toolexeclibgoarchive_DATA) \\\n # Pass -ffp-contract=off, or 386-specific options, when building the\n # math package.  MATH_FLAG is defined in configure.ac.\n math_lo_GOCFLAGS = $(MATH_FLAG)\n+math_check_GOCFLAGS = $(MATH_FLAG)\n \n # Add the generated file runtime_sysinfo.go to the runtime package.\n extra_go_files_runtime = runtime_sysinfo.go sigtab.go"}, {"sha": "aba4dc396fc0b720cc714003fbe241542d1d4ccd", "filename": "libgo/configure", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b", "patch": "@@ -15076,10 +15076,9 @@ fi\n $as_echo \"$libgo_cv_c_fancymath\" >&6; }\n MATH_FLAG=\n if test \"$libgo_cv_c_fancymath\" = yes; then\n-  MATH_FLAG=\"-mfancy-math-387 -funsafe-math-optimizations -fno-math-errno\"\n-else\n-  MATH_FLAG=\"-ffp-contract=off\"\n+  MATH_FLAG=\"-mfancy-math-387\"\n fi\n+MATH_FLAG=\"${MATH_FLAG} -ffp-contract=off -fno-math-errno -fno-trapping-math\"\n \n \n CFLAGS_hold=$CFLAGS"}, {"sha": "1264a1d252401c42aaa7a2c7f4f29670cff1b714", "filename": "libgo/configure.ac", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b", "patch": "@@ -649,8 +649,7 @@ fi\n AC_SUBST(STRINGOPS_FLAG)\n \n dnl For x86 we want to compile the math library with -mfancy-math-387\n-dnl -funsafe-math-optimizations so that we can use the builtin\n-dnl instructions directly.\n+dnl so that we can use the builtin instructions directly.\n AC_CACHE_CHECK([whether compiler supports -mfancy-math-387],\n [libgo_cv_c_fancymath],\n [CFLAGS_hold=$CFLAGS\n@@ -661,10 +660,9 @@ AC_COMPILE_IFELSE([int i;],\n CFLAGS=$CFLAGS_hold])\n MATH_FLAG=\n if test \"$libgo_cv_c_fancymath\" = yes; then\n-  MATH_FLAG=\"-mfancy-math-387 -funsafe-math-optimizations -fno-math-errno\"\n-else\n-  MATH_FLAG=\"-ffp-contract=off\"\n+  MATH_FLAG=\"-mfancy-math-387\"\n fi\n+MATH_FLAG=\"${MATH_FLAG} -ffp-contract=off -fno-math-errno -fno-trapping-math\"\n AC_SUBST(MATH_FLAG)\n \n CFLAGS_hold=$CFLAGS"}, {"sha": "98437b08bd851d607df3bd4d59b81573f8934a40", "filename": "libgo/go/math/all_test.go", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b/libgo%2Fgo%2Fmath%2Fall_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b/libgo%2Fgo%2Fmath%2Fall_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fmath%2Fall_test.go?ref=28f3c8143b2f7e6178e5baaf81d15c65cbe6f06b", "patch": "@@ -128,7 +128,7 @@ var cbrt = []float64{\n var ceil = []float64{\n \t5.0000000000000000e+00,\n \t8.0000000000000000e+00,\n-\t0.0000000000000000e+00,\n+\tCopysign(0, -1),\n \t-5.0000000000000000e+00,\n \t1.0000000000000000e+01,\n \t3.0000000000000000e+00,\n@@ -644,7 +644,7 @@ var tanh = []float64{\n var trunc = []float64{\n \t4.0000000000000000e+00,\n \t7.0000000000000000e+00,\n-\t-0.0000000000000000e+00,\n+\tCopysign(0, -1),\n \t-5.0000000000000000e+00,\n \t9.0000000000000000e+00,\n \t2.0000000000000000e+00,\n@@ -2134,7 +2134,7 @@ func TestCbrt(t *testing.T) {\n \n func TestCeil(t *testing.T) {\n \tfor i := 0; i < len(vf); i++ {\n-\t\tif f := Ceil(vf[i]); ceil[i] != f {\n+\t\tif f := Ceil(vf[i]); !alike(ceil[i], f) {\n \t\t\tt.Errorf(\"Ceil(%g) = %g, want %g\", vf[i], f, ceil[i])\n \t\t}\n \t}\n@@ -2361,7 +2361,7 @@ func TestDim(t *testing.T) {\n \n func TestFloor(t *testing.T) {\n \tfor i := 0; i < len(vf); i++ {\n-\t\tif f := Floor(vf[i]); floor[i] != f {\n+\t\tif f := Floor(vf[i]); !alike(floor[i], f) {\n \t\t\tt.Errorf(\"Floor(%g) = %g, want %g\", vf[i], f, floor[i])\n \t\t}\n \t}\n@@ -2884,7 +2884,7 @@ func TestTanh(t *testing.T) {\n \n func TestTrunc(t *testing.T) {\n \tfor i := 0; i < len(vf); i++ {\n-\t\tif f := Trunc(vf[i]); trunc[i] != f {\n+\t\tif f := Trunc(vf[i]); !alike(trunc[i], f) {\n \t\t\tt.Errorf(\"Trunc(%g) = %g, want %g\", vf[i], f, trunc[i])\n \t\t}\n \t}"}]}