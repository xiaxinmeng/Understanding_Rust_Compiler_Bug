{"sha": "1d10676d8c6146eec7afe6fa298bc8d113bcc0da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQxMDY3NmQ4YzYxNDZlZWM3YWZlNmZhMjk4YmM4ZDExM2JjYzBkYQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-10-05T13:55:08Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-10-05T13:55:08Z"}, "message": "make more gimple_x_ptr accessors const correct\n\ngcc/ChangeLog:\n\n2015-10-05  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* gimple.h (gimple_op_ptr): Require a non const gimple *.\n\t(gimple_assign_lhs_ptr): Likewise.\n\t(gimple_assign_rhs1_ptr): Likewise.\n\t(gimple_assign_rhs2_ptr): Likewise.\n\t(gimple_assign_rhs3_ptr): Likewise.\n\t(gimple_call_lhs_ptr): Likewise.\n\t(gimple_call_fn_ptr): Likewise.\n\t(gimple_call_chain_ptr): Likewise.\n\t\t(gimple_call_arg_ptr): Likewise.\n\t\t(gimple_cond_lhs_ptr): Likewise.\n\t(gimple_cond_rhs_ptr): Likewise.\n\t(gimple_switch_index_ptr): Likewise.\n\t(gimple_return_retval_ptr): Likewise.\n\nFrom-SVN: r228487", "tree": {"sha": "d47573fb7641ead3bc1d0dd46a173d3d0ecdc387", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d47573fb7641ead3bc1d0dd46a173d3d0ecdc387"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d10676d8c6146eec7afe6fa298bc8d113bcc0da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d10676d8c6146eec7afe6fa298bc8d113bcc0da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d10676d8c6146eec7afe6fa298bc8d113bcc0da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d10676d8c6146eec7afe6fa298bc8d113bcc0da/comments", "author": null, "committer": null, "parents": [{"sha": "eedc18841c706a69f10672acbfedf263b72f06d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedc18841c706a69f10672acbfedf263b72f06d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eedc18841c706a69f10672acbfedf263b72f06d4"}], "stats": {"total": 94, "additions": 55, "deletions": 39}, "files": [{"sha": "e665b6bf4059da094adcf8721b2f6036b0889290", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10676d8c6146eec7afe6fa298bc8d113bcc0da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10676d8c6146eec7afe6fa298bc8d113bcc0da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d10676d8c6146eec7afe6fa298bc8d113bcc0da", "patch": "@@ -1,3 +1,19 @@\n+2015-10-05  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* gimple.h (gimple_op_ptr): Require a non const gimple *.\n+\t(gimple_assign_lhs_ptr): Likewise.\n+\t(gimple_assign_rhs1_ptr): Likewise.\n+\t(gimple_assign_rhs2_ptr): Likewise.\n+\t(gimple_assign_rhs3_ptr): Likewise.\n+\t(gimple_call_lhs_ptr): Likewise.\n+\t(gimple_call_fn_ptr): Likewise.\n+\t(gimple_call_chain_ptr): Likewise.\n+\t\t(gimple_call_arg_ptr): Likewise.\n+\t\t(gimple_cond_lhs_ptr): Likewise.\n+\t(gimple_cond_rhs_ptr): Likewise.\n+\t(gimple_switch_index_ptr): Likewise.\n+\t(gimple_return_retval_ptr): Likewise.\n+\n 2015-10-05  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* gimple.h (gimple_asm_input_op_ptr): Remove."}, {"sha": "a456f54ed3982a20047bf4ed3d7e22a79b6d6191", "filename": "gcc/gimple.h", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10676d8c6146eec7afe6fa298bc8d113bcc0da/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10676d8c6146eec7afe6fa298bc8d113bcc0da/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=1d10676d8c6146eec7afe6fa298bc8d113bcc0da", "patch": "@@ -2346,12 +2346,12 @@ gimple_op (const gimple *gs, unsigned i)\n /* Return a pointer to operand I for statement GS.  */\n \n static inline tree *\n-gimple_op_ptr (const gimple *gs, unsigned i)\n+gimple_op_ptr (gimple *gs, unsigned i)\n {\n   if (gimple_has_ops (gs))\n     {\n       gcc_gimple_checking_assert (i < gimple_num_ops (gs));\n-      return gimple_ops (CONST_CAST_GIMPLE (gs)) + i;\n+      return gimple_ops (gs) + i;\n     }\n   else\n     return NULL;\n@@ -2407,15 +2407,15 @@ gimple_assign_lhs (const gimple *gs)\n /* Return a pointer to the LHS of assignment statement GS.  */\n \n static inline tree *\n-gimple_assign_lhs_ptr (const gassign *gs)\n+gimple_assign_lhs_ptr (gassign *gs)\n {\n-  return const_cast<tree *> (&gs->op[0]);\n+  return &gs->op[0];\n }\n \n static inline tree *\n-gimple_assign_lhs_ptr (const gimple *gs)\n+gimple_assign_lhs_ptr (gimple *gs)\n {\n-  const gassign *ass = GIMPLE_CHECK2<const gassign *> (gs);\n+  gassign *ass = GIMPLE_CHECK2<gassign *> (gs);\n   return gimple_assign_lhs_ptr (ass);\n }\n \n@@ -2459,15 +2459,15 @@ gimple_assign_rhs1 (const gimple *gs)\n    statement GS.  */\n \n static inline tree *\n-gimple_assign_rhs1_ptr (const gassign *gs)\n+gimple_assign_rhs1_ptr (gassign *gs)\n {\n-  return const_cast<tree *> (&gs->op[1]);\n+  return &gs->op[1];\n }\n \n static inline tree *\n-gimple_assign_rhs1_ptr (const gimple *gs)\n+gimple_assign_rhs1_ptr (gimple *gs)\n {\n-  const gassign *ass = GIMPLE_CHECK2<const gassign *> (gs);\n+  gassign *ass = GIMPLE_CHECK2<gassign *> (gs);\n   return gimple_assign_rhs1_ptr (ass);\n }\n \n@@ -2511,16 +2511,16 @@ gimple_assign_rhs2 (const gimple *gs)\n    statement GS.  */\n \n static inline tree *\n-gimple_assign_rhs2_ptr (const gassign *gs)\n+gimple_assign_rhs2_ptr (gassign *gs)\n {\n   gcc_gimple_checking_assert (gimple_num_ops (gs) >= 3);\n-  return const_cast<tree *> (&gs->op[2]);\n+  return &gs->op[2];\n }\n \n static inline tree *\n-gimple_assign_rhs2_ptr (const gimple *gs)\n+gimple_assign_rhs2_ptr (gimple *gs)\n {\n-  const gassign *ass = GIMPLE_CHECK2<const gassign *> (gs);\n+  gassign *ass = GIMPLE_CHECK2<gassign *> (gs);\n   return gimple_assign_rhs2_ptr (ass);\n }\n \n@@ -2564,11 +2564,11 @@ gimple_assign_rhs3 (const gimple *gs)\n    statement GS.  */\n \n static inline tree *\n-gimple_assign_rhs3_ptr (const gimple *gs)\n+gimple_assign_rhs3_ptr (gimple *gs)\n {\n-  const gassign *ass = GIMPLE_CHECK2<const gassign *> (gs);\n+  gassign *ass = GIMPLE_CHECK2<gassign *> (gs);\n   gcc_gimple_checking_assert (gimple_num_ops (gs) >= 4);\n-  return const_cast<tree *> (&ass->op[3]);\n+  return &ass->op[3];\n }\n \n \n@@ -2764,15 +2764,15 @@ gimple_call_lhs (const gimple *gs)\n /* Return a pointer to the LHS of call statement GS.  */\n \n static inline tree *\n-gimple_call_lhs_ptr (const gcall *gs)\n+gimple_call_lhs_ptr (gcall *gs)\n {\n-  return const_cast<tree *> (&gs->op[0]);\n+  return &gs->op[0];\n }\n \n static inline tree *\n-gimple_call_lhs_ptr (const gimple *gs)\n+gimple_call_lhs_ptr (gimple *gs)\n {\n-  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);\n+  gcall *gc = GIMPLE_CHECK2<gcall *> (gs);\n   return gimple_call_lhs_ptr (gc);\n }\n \n@@ -2948,15 +2948,15 @@ gimple_call_fn (const gimple *gs)\n    statement GS.  */\n \n static inline tree *\n-gimple_call_fn_ptr (const gcall *gs)\n+gimple_call_fn_ptr (gcall *gs)\n {\n-  return const_cast<tree *> (&gs->op[1]);\n+  return &gs->op[1];\n }\n \n static inline tree *\n-gimple_call_fn_ptr (const gimple *gs)\n+gimple_call_fn_ptr (gimple *gs)\n {\n-  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);\n+  gcall *gc = GIMPLE_CHECK2<gcall *> (gs);\n   return gimple_call_fn_ptr (gc);\n }\n \n@@ -3052,9 +3052,9 @@ gimple_call_chain (const gimple *gs)\n /* Return a pointer to the static chain for call statement CALL_STMT.  */\n \n static inline tree *\n-gimple_call_chain_ptr (const gcall *call_stmt)\n+gimple_call_chain_ptr (gcall *call_stmt)\n {\n-  return const_cast<tree *> (&call_stmt->op[2]);\n+  return &call_stmt->op[2];\n }\n \n /* Set CHAIN to be the static chain for call statement CALL_STMT.  */\n@@ -3103,16 +3103,16 @@ gimple_call_arg (const gimple *gs, unsigned index)\n    statement GS.  */\n \n static inline tree *\n-gimple_call_arg_ptr (const gcall *gs, unsigned index)\n+gimple_call_arg_ptr (gcall *gs, unsigned index)\n {\n   gcc_gimple_checking_assert (gimple_num_ops (gs) > index + 3);\n-  return const_cast<tree *> (&gs->op[index + 3]);\n+  return &gs->op[index + 3];\n }\n \n static inline tree *\n-gimple_call_arg_ptr (const gimple *gs, unsigned index)\n+gimple_call_arg_ptr (gimple *gs, unsigned index)\n {\n-  const gcall *gc = GIMPLE_CHECK2<const gcall *> (gs);\n+  gcall *gc = GIMPLE_CHECK2<gcall *> (gs);\n   return gimple_call_arg_ptr (gc, index);\n }\n \n@@ -3370,9 +3370,9 @@ gimple_cond_lhs (const gimple *gs)\n    statement GS.  */\n \n static inline tree *\n-gimple_cond_lhs_ptr (const gcond *gs)\n+gimple_cond_lhs_ptr (gcond *gs)\n {\n-  return const_cast<tree *> (&gs->op[0]);\n+  return &gs->op[0];\n }\n \n /* Set LHS to be the LHS operand of the predicate computed by\n@@ -3404,9 +3404,9 @@ gimple_cond_rhs (const gimple *gs)\n    conditional GS.  */\n \n static inline tree *\n-gimple_cond_rhs_ptr (const gcond *gs)\n+gimple_cond_rhs_ptr (gcond *gs)\n {\n-  return const_cast<tree *> (&gs->op[1]);\n+  return &gs->op[1];\n }\n \n \n@@ -4387,9 +4387,9 @@ gimple_switch_index (const gswitch *gs)\n /* Return a pointer to the index variable for the switch statement GS.  */\n \n static inline tree *\n-gimple_switch_index_ptr (const gswitch *gs)\n+gimple_switch_index_ptr (gswitch *gs)\n {\n-  return const_cast<tree *> (&gs->op[0]);\n+  return &gs->op[0];\n }\n \n \n@@ -5773,9 +5773,9 @@ gimple_transaction_set_subcode (gtransaction *transaction_stmt,\n /* Return a pointer to the return value for GIMPLE_RETURN GS.  */\n \n static inline tree *\n-gimple_return_retval_ptr (const greturn *gs)\n+gimple_return_retval_ptr (greturn *gs)\n {\n-  return const_cast<tree *> (&gs->op[0]);\n+  return &gs->op[0];\n }\n \n /* Return the return value for GIMPLE_RETURN GS.  */"}]}