{"sha": "b01896ccb0a02667725d3c39ba016ffaffaf10f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAxODk2Y2NiMGEwMjY2NzcyNWQzYzM5YmEwMTZmZmFmZmFmMTBmMQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2005-08-05T09:42:06Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2005-08-05T09:42:06Z"}, "message": "genattrtab.c (current_alternative_string): Remove.\n\n        * genattrtab.c (current_alternative_string): Remove.\n        (SIMPLIFY_ALTERNATIVE): Ditto.\n        (attr_alt_bit_p): Ditto.\n        (alternative_name): Make const char *.\n        (evaluate_eq_attr): Remove use of above things.\n        (simplify_test_exp): Ditto.\n        (simplify_test_exp <EQ_ATTR>): Guard for insn_code < 0 .\n        (simplify_test_exp <AND>): Correct typo (test 'right' not 'left').\n\nFrom-SVN: r102765", "tree": {"sha": "09eb7a43d5dec8e5cf54e7836b305926bcd13130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09eb7a43d5dec8e5cf54e7836b305926bcd13130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b01896ccb0a02667725d3c39ba016ffaffaf10f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01896ccb0a02667725d3c39ba016ffaffaf10f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b01896ccb0a02667725d3c39ba016ffaffaf10f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01896ccb0a02667725d3c39ba016ffaffaf10f1/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f94bdecbc6657d7cba51c8e368f3d29f353723c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f94bdecbc6657d7cba51c8e368f3d29f353723c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f94bdecbc6657d7cba51c8e368f3d29f353723c"}], "stats": {"total": 64, "additions": 16, "deletions": 48}, "files": [{"sha": "c332799838bd7e5a318cbe03c4452501ecc54ab9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01896ccb0a02667725d3c39ba016ffaffaf10f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01896ccb0a02667725d3c39ba016ffaffaf10f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b01896ccb0a02667725d3c39ba016ffaffaf10f1", "patch": "@@ -1,3 +1,14 @@\n+2005-08-05  Michael Matz  <matz@suse.de>\n+\n+\t* genattrtab.c (current_alternative_string): Remove.\n+\t(SIMPLIFY_ALTERNATIVE): Ditto.\n+\t(attr_alt_bit_p): Ditto.\n+\t(alternative_name): Make const char *.\n+\t(evaluate_eq_attr): Remove use of above things.\n+\t(simplify_test_exp): Ditto.\n+\t(simplify_test_exp <EQ_ATTR>): Guard for insn_code < 0 .\n+\t(simplify_test_exp <AND>): Correct typo (test 'right' not 'left').\n+\n 2005-08-04  James E Wilson  <wilson@specifix.com>\n \n \t* config/ptx4.h, config/sol2.h, config/arm/freebsd.h,"}, {"sha": "1f919a40e4083f9f0300f95a8a6d129709c4a3ac", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 5, "deletions": 48, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b01896ccb0a02667725d3c39ba016ffaffaf10f1/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b01896ccb0a02667725d3c39ba016ffaffaf10f1/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=b01896ccb0a02667725d3c39ba016ffaffaf10f1", "patch": "@@ -228,19 +228,13 @@ static int *insn_n_alternatives;\n \n static int *insn_alternatives;\n \n-/* If nonzero, assume that the `alternative' attr has this value.\n-   This is the hashed, unique string for the numeral\n-   whose value is chosen alternative.  */\n-\n-static const char *current_alternative_string;\n-\n /* Used to simplify expressions.  */\n \n static rtx true_rtx, false_rtx;\n \n /* Used to reduce calls to `strcmp' */\n \n-static char *alternative_name;\n+static const char *alternative_name;\n static const char *length_str;\n static const char *delay_type_str;\n static const char *delay_1_0_str;\n@@ -262,15 +256,6 @@ int optimize = 0;\n   (ATTR_IND_SIMPLIFIED_P (EXP) || ATTR_CURR_SIMPLIFIED_P (EXP) ? (EXP)\t\\\n    : simplify_test_exp (EXP, INSN_CODE, INSN_INDEX))\n \n-/* Simplify (eq_attr (\"alternative\") ...)\n-   when we are working with a particular alternative.  */\n-#define SIMPLIFY_ALTERNATIVE(EXP)\t\t\t\t\\\n-  if (current_alternative_string\t\t\t\t\\\n-      && GET_CODE ((EXP)) == EQ_ATTR\t\t\t\t\\\n-      && XSTR ((EXP), 0) == alternative_name)\t\t\t\\\n-    (EXP) = (XSTR ((EXP), 1) == current_alternative_string\t\\\n-\t    ? true_rtx : false_rtx);\n-\n #define DEF_ATTR_STRING(S) (attr_string ((S), strlen (S)))\n \n /* These are referenced by rtlanal.c and hence need to be defined somewhere.\n@@ -352,7 +337,6 @@ static bool attr_alt_subset_of_compl_p (rtx, rtx);\n static rtx attr_alt_intersection (rtx, rtx);\n static rtx attr_alt_union (rtx, rtx);\n static rtx attr_alt_complement (rtx);\n-static bool attr_alt_bit_p (rtx, int);\n static rtx mk_attr_alt (int);\n \n #define oballoc(size) obstack_alloc (hash_obstack, size)\n@@ -1106,7 +1090,7 @@ check_attr_value (rtx exp, struct attr_desc *attr)\n }\n \n /* Given an SET_ATTR_ALTERNATIVE expression, convert to the canonical SET.\n-   It becomes a COND with each test being (eq_attr \"alternative \"n\") */\n+   It becomes a COND with each test being (eq_attr \"alternative\" \"n\") */\n \n static rtx\n convert_set_attr_alternative (rtx exp, struct insn_def *id)\n@@ -2035,16 +2019,11 @@ evaluate_eq_attr (rtx exp, rtx value, int insn_code, int insn_index)\n       orexp = false_rtx;\n       andexp = true_rtx;\n \n-      if (current_alternative_string)\n-\tclear_struct_flag (value);\n-\n       for (i = 0; i < XVECLEN (value, 0); i += 2)\n \t{\n \t  rtx this = simplify_test_exp_in_temp (XVECEXP (value, 0, i),\n \t\t\t\t\t\tinsn_code, insn_index);\n \n-\t  SIMPLIFY_ALTERNATIVE (this);\n-\n \t  right = insert_right_side (AND, andexp, this,\n \t\t\t\t     insn_code, insn_index);\n \t  right = insert_right_side (AND, right,\n@@ -2082,7 +2061,6 @@ evaluate_eq_attr (rtx exp, rtx value, int insn_code, int insn_index)\n \n   if (address_used)\n     {\n-      /* This had `&& current_alternative_string', which seems to be wrong.  */\n       if (! ATTR_IND_SIMPLIFIED_P (exp))\n \treturn copy_rtx_unchanging (exp);\n       return exp;\n@@ -2490,14 +2468,6 @@ attr_alt_complement (rtx s)\n   return result;\n }\n \n-/* Tests whether a bit B belongs to the set represented by S.  */\n-\n-static bool\n-attr_alt_bit_p (rtx s, int b)\n-{\n-  return XINT (s, 1) ^ ((XINT (s, 0) >> b) & 1);\n-}\n-\n /* Return EQ_ATTR_ALT expression representing set containing elements set\n    in E.  */\n \n@@ -2540,12 +2510,10 @@ simplify_test_exp (rtx exp, int insn_code, int insn_index)\n     {\n     case AND:\n       left = SIMPLIFY_TEST_EXP (XEXP (exp, 0), insn_code, insn_index);\n-      SIMPLIFY_ALTERNATIVE (left);\n       if (left == false_rtx)\n \treturn false_rtx;\n       right = SIMPLIFY_TEST_EXP (XEXP (exp, 1), insn_code, insn_index);\n-      SIMPLIFY_ALTERNATIVE (right);\n-      if (left == false_rtx)\n+      if (right == false_rtx)\n \treturn false_rtx;\n \n       if (GET_CODE (left) == EQ_ATTR_ALT\n@@ -2646,11 +2614,9 @@ simplify_test_exp (rtx exp, int insn_code, int insn_index)\n \n     case IOR:\n       left = SIMPLIFY_TEST_EXP (XEXP (exp, 0), insn_code, insn_index);\n-      SIMPLIFY_ALTERNATIVE (left);\n       if (left == true_rtx)\n \treturn true_rtx;\n       right = SIMPLIFY_TEST_EXP (XEXP (exp, 1), insn_code, insn_index);\n-      SIMPLIFY_ALTERNATIVE (right);\n       if (right == true_rtx)\n \treturn true_rtx;\n \n@@ -2744,12 +2710,10 @@ simplify_test_exp (rtx exp, int insn_code, int insn_index)\n \t{\n \t  left = SIMPLIFY_TEST_EXP (XEXP (XEXP (exp, 0), 0),\n \t\t\t\t    insn_code, insn_index);\n-\t  SIMPLIFY_ALTERNATIVE (left);\n \t  return left;\n \t}\n \n       left = SIMPLIFY_TEST_EXP (XEXP (exp, 0), insn_code, insn_index);\n-      SIMPLIFY_ALTERNATIVE (left);\n       if (GET_CODE (left) == NOT)\n \treturn XEXP (left, 0);\n \n@@ -2788,18 +2752,11 @@ simplify_test_exp (rtx exp, int insn_code, int insn_index)\n       break;\n \n     case EQ_ATTR_ALT:\n-      if (current_alternative_string)\n-\treturn attr_alt_bit_p (exp, atoi (current_alternative_string)) ? true_rtx : false_rtx;\n-\n       if (!XINT (exp, 0))\n \treturn XINT (exp, 1) ? true_rtx : false_rtx;\n       break;\n \n     case EQ_ATTR:\n-      if (current_alternative_string && XSTR (exp, 0) == alternative_name)\n-\treturn (XSTR (exp, 1) == current_alternative_string\n-\t\t? true_rtx : false_rtx);\n-\n       if (XSTR (exp, 0) == alternative_name)\n \t{\n \t  newexp = mk_attr_alt (1 << atoi (XSTR (exp, 1)));\n@@ -2809,7 +2766,7 @@ simplify_test_exp (rtx exp, int insn_code, int insn_index)\n       /* Look at the value for this insn code in the specified attribute.\n \t We normally can replace this comparison with the condition that\n \t would give this insn the values being tested for.  */\n-      if (XSTR (exp, 0) != alternative_name\n+      if (insn_code >= 0\n \t  && (attr = find_attr (&XSTR (exp, 0), 0)) != NULL)\n \tfor (av = attr->first_value; av; av = av->next)\n \t  for (ie = av->first_insn; ie; ie = ie->next)\n@@ -2830,7 +2787,7 @@ simplify_test_exp (rtx exp, int insn_code, int insn_index)\n   /* We have already simplified this expression.  Simplifying it again\n      won't buy anything unless we weren't given a valid insn code\n      to process (i.e., we are canonicalizing something.).  */\n-  if (insn_code != -2 /* Seems wrong: && current_alternative_string.  */\n+  if (insn_code != -2\n       && ! ATTR_IND_SIMPLIFIED_P (newexp))\n     return copy_rtx_unchanging (newexp);\n "}]}