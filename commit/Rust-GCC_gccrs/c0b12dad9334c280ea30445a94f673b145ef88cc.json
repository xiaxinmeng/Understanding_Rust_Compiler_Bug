{"sha": "c0b12dad9334c280ea30445a94f673b145ef88cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBiMTJkYWQ5MzM0YzI4MGVhMzA0NDVhOTRmNjczYjE0NWVmODhjYw==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2015-04-30T14:43:19Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2015-04-30T14:43:19Z"}, "message": "Add fundamentals TR container erasure.\n\n2015-04-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\tAdd fundamentals TR container erasure.\n\t* include/Makefile.am: Add new headers.\n\t* include/Makefile.in: Add new headers.\n\t* include/experimental/array: New.\n\t* include/experimental/deque: New.\n\t* include/experimental/erase_if.tcc: New.\n\t* include/experimental/forward_list: New.\n\t* include/experimental/list: New.\n\t* include/experimental/map: New.\n\t* include/experimental/set: New.\n\t* include/experimental/string: New.\n\t* include/experimental/unordered_map: New.\n\t* include/experimental/unordered_set: New.\n\t* include/experimental/vector: New.\n\t* testsuite/experimental/deque/erasure.cc: New.\n\t* testsuite/experimental/forward_list/erasure.cc: New.\n\t* testsuite/experimental/list/erasure.cc: New.\n\t* testsuite/experimental/map/erasure.cc: New.\n\t* testsuite/experimental/set/erasure.cc: New.\n\t* testsuite/experimental/string/erasure.cc: New.\n\t* testsuite/experimental/unordered_map/erasure.cc: New.\n\t* testsuite/experimental/unordered_set/erasure.cc: New.\n\t* testsuite/experimental/vector/erasure.cc: New.\n\nFrom-SVN: r222630", "tree": {"sha": "cabf6ff1467f1bf41194a883662463c40fa44d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cabf6ff1467f1bf41194a883662463c40fa44d6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0b12dad9334c280ea30445a94f673b145ef88cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b12dad9334c280ea30445a94f673b145ef88cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0b12dad9334c280ea30445a94f673b145ef88cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0b12dad9334c280ea30445a94f673b145ef88cc/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2ac256bc78dd0360c2f56fc1471c118689216bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ac256bc78dd0360c2f56fc1471c118689216bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ac256bc78dd0360c2f56fc1471c118689216bf"}], "stats": {"total": 1282, "additions": 1278, "deletions": 4}, "files": [{"sha": "28f1b8b147422b6806728d94d6a95ebbd7abbaf8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -1,3 +1,29 @@\n+2015-04-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tAdd fundamentals TR container erasure.\n+\t* include/Makefile.am: Add new headers.\n+\t* include/Makefile.in: Add new headers.\n+\t* include/experimental/array: New.\n+\t* include/experimental/deque: New.\n+\t* include/experimental/erase_if.tcc: New.\n+\t* include/experimental/forward_list: New.\n+\t* include/experimental/list: New.\n+\t* include/experimental/map: New.\n+\t* include/experimental/set: New.\n+\t* include/experimental/string: New.\n+\t* include/experimental/unordered_map: New.\n+\t* include/experimental/unordered_set: New.\n+\t* include/experimental/vector: New.\n+\t* testsuite/experimental/deque/erasure.cc: New.\n+\t* testsuite/experimental/forward_list/erasure.cc: New.\n+\t* testsuite/experimental/list/erasure.cc: New.\n+\t* testsuite/experimental/map/erasure.cc: New.\n+\t* testsuite/experimental/set/erasure.cc: New.\n+\t* testsuite/experimental/string/erasure.cc: New.\n+\t* testsuite/experimental/unordered_map/erasure.cc: New.\n+\t* testsuite/experimental/unordered_set/erasure.cc: New.\n+\t* testsuite/experimental/vector/erasure.cc: New.\n+\n 2015-04-30  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/cpp_type_traits.h"}, {"sha": "d582dff87083f93423ddba3e66ed306f4c48e588", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -646,14 +646,24 @@ experimental_headers = \\\n \t${experimental_srcdir}/algorithm \\\n \t${experimental_srcdir}/any \\\n \t${experimental_srcdir}/chrono \\\n+\t${experimental_srcdir}/deque \\\n+\t${experimental_srcdir}/erase_if.h \\\n+\t${experimental_srcdir}/forward_list \\\n \t${experimental_srcdir}/functional \\\n+\t${experimental_srcdir}/list \\\n+\t${experimental_srcdir}/map \\\n \t${experimental_srcdir}/optional \\\n \t${experimental_srcdir}/ratio \\\n+\t${experimental_srcdir}/set \\\n+\t${experimental_srcdir}/string \\\n \t${experimental_srcdir}/string_view \\\n-\t${experimental_srcdir}/system_error \\\n \t${experimental_srcdir}/string_view.tcc \\\n+\t${experimental_srcdir}/system_error \\\n \t${experimental_srcdir}/tuple \\\n-\t${experimental_srcdir}/type_traits\n+\t${experimental_srcdir}/type_traits \\\n+\t${experimental_srcdir}/unordered_map \\\n+\t${experimental_srcdir}/unordered_set \\\n+\t${experimental_srcdir}/vector\n \n # This is the common subset of C++ files that all three \"C\" header models use.\n c_base_srcdir = $(C_INCLUDE_DIR)"}, {"sha": "f9328e167ebadf0400c03472532e5487d88614f8", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -913,14 +913,24 @@ experimental_headers = \\\n \t${experimental_srcdir}/algorithm \\\n \t${experimental_srcdir}/any \\\n \t${experimental_srcdir}/chrono \\\n+\t${experimental_srcdir}/deque \\\n+\t${experimental_srcdir}/erase_if.h \\\n+\t${experimental_srcdir}/forward_list \\\n \t${experimental_srcdir}/functional \\\n+\t${experimental_srcdir}/list \\\n+\t${experimental_srcdir}/map \\\n \t${experimental_srcdir}/optional \\\n \t${experimental_srcdir}/ratio \\\n+\t${experimental_srcdir}/set \\\n+\t${experimental_srcdir}/string \\\n \t${experimental_srcdir}/string_view \\\n-\t${experimental_srcdir}/system_error \\\n \t${experimental_srcdir}/string_view.tcc \\\n+\t${experimental_srcdir}/system_error \\\n \t${experimental_srcdir}/tuple \\\n-\t${experimental_srcdir}/type_traits\n+\t${experimental_srcdir}/type_traits \\\n+\t${experimental_srcdir}/unordered_map \\\n+\t${experimental_srcdir}/unordered_set \\\n+\t${experimental_srcdir}/vector\n \n \n # This is the common subset of C++ files that all three \"C\" header models use."}, {"sha": "8d3d8951e3a0be3f669b8c0aa8599dbe32e6ce68", "filename": "libstdc++-v3/include/experimental/deque", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fdeque?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,72 @@\n+// <experimental/deque> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/deque\n+ *  This is a TS C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_DEQUE\n+#define _GLIBCXX_EXPERIMENTAL_DEQUE 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <deque>\n+#include <algorithm>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v2\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Tp, typename _Alloc, typename _Predicate>\n+    void\n+    erase_if(deque<_Tp, _Alloc>& __cont, _Predicate __pred)\n+    {\n+      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n+\t\t   __cont.end());\n+    }\n+\n+  template<typename _Tp, typename _Alloc, typename _Up>\n+    void\n+    erase(deque<_Tp, _Alloc>& __cont, const _Up& __value)\n+    {\n+      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n+\t\t   __cont.end());\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_DEQUE"}, {"sha": "35b5b37788911454028109c385309ef82b6daa47", "filename": "libstdc++-v3/include/experimental/erase_if.h", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ferase_if.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ferase_if.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ferase_if.h?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,70 @@\n+// <experimental/erase_if.h> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/erase_if.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_ERASE_IF_H\n+#define _GLIBCXX_EXPERIMENTAL_ERASE_IF_H 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+namespace std\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v2\n+{\n+\n+  namespace __detail\n+  {\n+    template<typename _Container, typename _Predicate>\n+      void\n+      __erase_nodes_if(_Container& __cont, _Predicate __pred)\n+      {\n+\tfor (auto __iter = __cont.begin(), __last = __cont.end();\n+\t     __iter != __last;)\n+\t{\n+\t  if (__pred(*__iter))\n+\t    __iter = __cont.erase(__iter);\n+\t  else\n+\t    ++__iter;\n+\t}\n+      }\n+  }\n+\n+\n+} // inline namespace fundamentals_v2\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_ERASE_IF_H"}, {"sha": "482ac126c8bd30083eb67b4ed1ef2d138758da73", "filename": "libstdc++-v3/include/experimental/forward_list", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fforward_list?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,67 @@\n+// <experimental/forward_list> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/forward_list\n+ *  This is a TS C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_FORWARD_LIST\n+#define _GLIBCXX_EXPERIMENTAL_FORWARD_LIST 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <forward_list>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v2\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Tp, typename _Alloc, typename _Predicate>\n+    void \n+    erase_if(forward_list<_Tp, _Alloc>& __cont, _Predicate __pred)\n+    { __cont.remove_if(__pred); }\n+\n+  template<typename _Tp, typename _Alloc, typename _Up>\n+    void erase(forward_list<_Tp, _Alloc>& __cont, const _Up& __value)\n+    {\n+      using __elem_type = typename forward_list<_Tp, _Alloc>::value_type;\n+      erase_if(__cont, [&](__elem_type& __elem) { return __elem == __value; });\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_FORWARD_LIST"}, {"sha": "9bdf8d5ed16eb845953a627d8696f69fcf75a18e", "filename": "libstdc++-v3/include/experimental/list", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Flist?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,68 @@\n+// <experimental/list> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/list\n+ *  This is a TS C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_LIST\n+#define _GLIBCXX_EXPERIMENTAL_LIST 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <list>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v2\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Tp, typename _Alloc, typename _Predicate>\n+    void\n+    erase_if(list<_Tp, _Alloc>& __cont, _Predicate __pred)\n+    { __cont.remove_if(__pred); }\n+\n+  template<typename _Tp, typename _Alloc, typename _Up>\n+    void\n+    erase(list<_Tp, _Alloc>& __cont, const _Up& __value)\n+    {\n+      using __elem_type = typename list<_Tp, _Alloc>::value_type;\n+      erase_if(__cont, [&](__elem_type& __elem) { return __elem == __value; });\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_LIST"}, {"sha": "c2b5a09e8735191945d01d8d5eff2bc4141b0a51", "filename": "libstdc++-v3/include/experimental/map", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmap?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,68 @@\n+// <experimental/map> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/map\n+ *  This is a TS C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_MAP\n+#define _GLIBCXX_EXPERIMENTAL_MAP 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <map>\n+#include <experimental/erase_if.h>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v2\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n+\t   typename _Predicate>\n+    void\n+    erase_if(map<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+\n+  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc,\n+\t   typename _Predicate>\n+    void\n+    erase_if(multimap<_Key, _Tp, _Compare, _Alloc>& __cont, _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_MAP"}, {"sha": "7b87848fca96b8141f64e47f08a95dd97861cc86", "filename": "libstdc++-v3/include/experimental/set", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fset?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,68 @@\n+// <experimental/set> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/set\n+ *  This is a TS C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_SET\n+#define _GLIBCXX_EXPERIMENTAL_SET 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <set>\n+#include <experimental/erase_if.h>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v2\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Key, typename _Compare, typename _Alloc,\n+\t   typename _Predicate>\n+    void\n+    erase_if(set<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+\n+  template<typename _Key, typename _Compare, typename _Alloc,\n+\t   typename _Predicate>\n+    void\n+    erase_if(multiset<_Key, _Compare, _Alloc>& __cont, _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_SET"}, {"sha": "70212fbd8b0d1780fd438ad9ccc38cc941509cc2", "filename": "libstdc++-v3/include/experimental/string", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,73 @@\n+// <experimental/string> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/string\n+ *  This is a TS C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_STRING\n+#define _GLIBCXX_EXPERIMENTAL_STRING 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <string>\n+#include <algorithm>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v2\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc,\n+\t   typename _Predicate>\n+    void\n+    erase_if(basic_string<_CharT, _Traits, _Alloc>& __cont, _Predicate __pred)\n+    {\n+      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n+\t\t   __cont.end());\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc, typename _Up>\n+    void\n+    erase(basic_string<_CharT, _Traits, _Alloc>& __cont, const _Up& __value)\n+    {\n+      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n+\t\t   __cont.end());\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_STRING"}, {"sha": "438f886d6c844221c666b123152edf502d31e197", "filename": "libstdc++-v3/include/experimental/unordered_map", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_map?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,70 @@\n+// <experimental/unordered_map> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/unordered_map\n+ *  This is a TS C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_UNORDERED_MAP\n+#define _GLIBCXX_EXPERIMENTAL_UNORDERED_MAP 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <unordered_map>\n+#include <experimental/erase_if.h>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v2\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n+\t   typename _Alloc, typename _Predicate>\n+    void\n+    erase_if(unordered_map<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n+\t     _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+\n+  template<typename _Key, typename _Tp, typename _Hash, typename _CPred,\n+\t   typename _Alloc, typename _Predicate>\n+    void\n+    erase_if(unordered_multimap<_Key, _Tp, _Hash, _CPred, _Alloc>& __cont,\n+\t     _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_UNORDERED_MAP"}, {"sha": "44610475e55fd58fe94a4b8300bca04a0f24882d", "filename": "libstdc++-v3/include/experimental/unordered_set", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Funordered_set?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,70 @@\n+// <experimental/unordered_set> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/unordered_set\n+ *  This is a TS C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_UNORDERED_SET\n+#define _GLIBCXX_EXPERIMENTAL_UNORDERED_SET 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <unordered_set>\n+#include <experimental/erase_if.h>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v2\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,\n+\t   typename _Predicate>\n+    void\n+    erase_if(unordered_set<_Key, _Hash, _CPred, _Alloc>& __cont,\n+\t     _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+\n+  template<typename _Key, typename _Hash, typename _CPred, typename _Alloc,\n+\t   typename _Predicate>\n+    void\n+    erase_if(unordered_multiset<_Key, _Hash, _CPred, _Alloc>& __cont,\n+\t     _Predicate __pred)\n+    { __detail::__erase_nodes_if(__cont, __pred); }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_UNORDERED_SET"}, {"sha": "2d4c1f75cdb38ef7caa648590c33e01b096e7322", "filename": "libstdc++-v3/include/experimental/vector", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fvector?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,72 @@\n+// <experimental/vector> -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file experimental/vector\n+ *  This is a TS C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_EXPERIMENTAL_VECTOR\n+#define _GLIBCXX_EXPERIMENTAL_VECTOR 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus <= 201103L\n+# include <bits/c++14_warning.h>\n+#else\n+\n+#include <vector>\n+#include <algorithm>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace experimental\n+{\n+inline namespace fundamentals_v2\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  template<typename _Tp, typename _Alloc, typename _Predicate>\n+    void\n+    erase_if(vector<_Tp, _Alloc>& __cont, _Predicate __pred)\n+    {\n+      __cont.erase(std::remove_if(__cont.begin(), __cont.end(), __pred),\n+\t\t   __cont.end());\n+    }\n+\n+  template<typename _Tp, typename _Alloc, typename _Up>\n+    void\n+    erase(vector<_Tp, _Alloc>& __cont, const _Up& __value)\n+    {\n+      __cont.erase(std::remove(__cont.begin(), __cont.end(), __value),\n+\t\t   __cont.end());\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace fundamentals_v2\n+} // namespace experimental\n+} // namespace std\n+\n+#endif // C++14\n+\n+#endif // _GLIBCXX_EXPERIMENTAL_VECTOR"}, {"sha": "9cec2bc5403fadc23ecee498680bff3533ea566d", "filename": "libstdc++-v3/testsuite/experimental/deque/erasure.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fdeque%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fdeque%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fdeque%2Ferasure.cc?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/deque>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+  std::deque<int> d{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::experimental::erase_if(d, is_odd);\n+  std::deque<int> t{ 10, 12, 14, 18 };\n+  VERIFY( d == t );\n+}\n+\n+void\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::deque<int> d{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::experimental::erase(d, 14);\n+  std::deque<int> t{ 10, 11, 12, 15, 17, 18, 19 };\n+  VERIFY( d == t );\n+  std::experimental::erase(d, 20);\n+  VERIFY( d == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "f5e1184598d1f9b0280e038bd04ace70131b3a55", "filename": "libstdc++-v3/testsuite/experimental/forward_list/erasure.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fforward_list%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fforward_list%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fforward_list%2Ferasure.cc?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/forward_list>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+  std::forward_list<int> fl{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::experimental::erase_if(fl, is_odd);\n+  std::forward_list<int> t{ 10, 12, 14, 18 };\n+  VERIFY( fl == t );\n+}\n+\n+void\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::forward_list<int> fl{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::experimental::erase(fl, 14);\n+  std::forward_list<int> t{ 10, 11, 12, 15, 17, 18, 19 };\n+  VERIFY( fl == t );\n+  std::experimental::erase(fl, 20);\n+  VERIFY( fl == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "5aa6c87e3e154266141273b07347dbc2f3112e7c", "filename": "libstdc++-v3/testsuite/experimental/list/erasure.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Flist%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Flist%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Flist%2Ferasure.cc?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/list>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+  std::list<int> l{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::experimental::erase_if(l, is_odd);\n+  std::list<int> t{ 10, 12, 14, 18 };\n+  VERIFY( l == t );\n+}\n+\n+void\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::list<int> l{ 0, 11, 0, 0, 22, 33, 0, 0, 44, 0 };\n+  std::experimental::erase(l, 0);\n+  std::list<int> t{ 11, 22, 33, 44 };\n+  VERIFY( l == t );\n+  std::experimental::erase(l, 55);\n+  VERIFY( l == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "83547b90b802f9a05ec92f34a200e401801a7bac", "filename": "libstdc++-v3/testsuite/experimental/map/erasure.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmap%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmap%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmap%2Ferasure.cc?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,66 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/map>\n+#include <testsuite_hooks.h>\n+\n+auto is_odd_pair = [](const std::pair<const int, std::string>& p)\n+{\n+  return p.first % 2 != 0;\n+};\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::map<int, std::string> m{ { 10, \"A\" }, { 11, \"B\" },\n+\t\t\t\t{ 12, \"C\" }, { 14, \"D\" },\n+\t\t\t\t{ 15, \"E\" }, { 17, \"F\" },\n+\t\t\t\t{ 18, \"G\" }, { 19, \"H\" } };\n+  std::experimental::erase_if(m, is_odd_pair);\n+  std::map<int, std::string> t{ { 10, \"A\" }, { 12, \"C\" },\n+\t\t\t\t{ 14, \"D\" }, { 18, \"G\" } };\n+  VERIFY( m == t );\n+}\n+\n+void\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::multimap<int, std::string> mm{ { 20, \"S\" }, { 21, \"T\" },\n+\t\t\t\t      { 22, \"U\" }, { 22, \"V\" },\n+\t\t\t\t      { 23, \"W\" }, { 23, \"X\" },\n+\t\t\t\t      { 24, \"Y\" }, { 25, \"Z\" } };\n+  std::experimental::erase_if(mm, is_odd_pair);\n+  std::multimap<int, std::string> t{ { 20, \"S\" }, { 22, \"U\" },\n+\t\t\t\t     { 22, \"V\" }, { 24, \"Y\" } };\n+  VERIFY( mm == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "a7f9a577cab91fa4beeba7085ea3dc726e086426", "filename": "libstdc++-v3/testsuite/experimental/set/erasure.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fset%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fset%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fset%2Ferasure.cc?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/set>\n+#include <testsuite_hooks.h>\n+\n+auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::set<int> s{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::experimental::erase_if(s, is_odd);\n+  std::set<int> t{ 10, 12, 14, 18 };\n+  VERIFY( s == t );\n+}\n+\n+void\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::multiset<int> ms{ 20, 21, 22, 22, 23, 23, 24, 25 };\n+  std::experimental::erase_if(ms, is_odd);\n+  std::multiset<int> t{ 20, 22, 22, 24 };\n+  VERIFY( ms == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "aaa506d53982223fbf6cc62556ceac8044be5dce", "filename": "libstdc++-v3/testsuite/experimental/string/erasure.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring%2Ferasure.cc?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,58 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  auto is_vowel = [](const char c)\n+  {\n+    return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';\n+  };\n+\n+  std::string str(\"cute fluffy kittens\");\n+  std::experimental::erase_if(str, is_vowel);\n+  VERIFY( str == \"ct flffy kttns\" );\n+}\n+\n+void\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::string str = \"cute fluffy kittens\";\n+  std::experimental::erase(str, 'f');\n+  VERIFY( str == \"cute luy kittens\" );\n+  std::experimental::erase(str, 'z');\n+  VERIFY( str == \"cute luy kittens\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "bb2e4350c73e312f92caba0a6a10818007ee34af", "filename": "libstdc++-v3/testsuite/experimental/unordered_map/erasure.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Funordered_map%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Funordered_map%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Funordered_map%2Ferasure.cc?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,66 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/unordered_map>\n+#include <testsuite_hooks.h>\n+\n+auto is_odd_pair = [](const std::pair<const int, std::string>& p)\n+{\n+  return p.first % 2 != 0;\n+};\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::unordered_map<int, std::string> um{ { 10, \"A\" }, { 11, \"B\" },\n+\t\t\t\t\t   { 12, \"C\" }, { 14, \"D\" },\n+\t\t\t\t\t   { 15, \"E\" }, { 17, \"F\" },\n+\t\t\t\t\t   { 18, \"G\" }, { 19, \"H\" } };\n+  std::experimental::erase_if(um, is_odd_pair);\n+  std::unordered_map<int, std::string> t{ { 10, \"A\" }, { 12, \"C\" },\n+\t\t\t\t\t  { 14, \"D\" }, { 18, \"G\" } };\n+  VERIFY( um == t );\n+}\n+\n+void\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::unordered_multimap<int, std::string> umm{ { 20, \"S\" }, { 21, \"T\" },\n+\t\t\t\t\t\t { 22, \"U\" }, { 22, \"V\" },\n+\t\t\t\t\t\t { 23, \"W\" }, { 23, \"X\" },\n+\t\t\t\t\t\t { 24, \"Y\" }, { 25, \"Z\" } };\n+  std::experimental::erase_if(umm, is_odd_pair);\n+  std::unordered_multimap<int, std::string> t{ { 20, \"S\" }, { 22, \"U\" },\n+\t\t\t\t\t       { 22, \"V\" }, { 24, \"Y\" } };\n+  VERIFY( umm == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "f296e35057eca8bfefefd1812873be9390e17049", "filename": "libstdc++-v3/testsuite/experimental/unordered_set/erasure.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Funordered_set%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Funordered_set%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Funordered_set%2Ferasure.cc?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/unordered_set>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+  std::unordered_set<int> us{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::experimental::erase_if(us, is_odd);\n+  std::unordered_set<int> t{ 10, 12, 14, 18 };\n+  VERIFY( us == t );\n+}\n+\n+void\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+  std::unordered_multiset<int> ums{ 20, 21, 22, 22, 23, 23, 24, 25 };\n+  std::experimental::erase_if(ums, is_odd);\n+  std::unordered_multiset<int> t{ 20, 22, 22, 24 };\n+  VERIFY( ums == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}, {"sha": "98ba2860ece0a5c3d1a67cd9ae33ccd9517a5995", "filename": "libstdc++-v3/testsuite/experimental/vector/erasure.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fvector%2Ferasure.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0b12dad9334c280ea30445a94f673b145ef88cc/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fvector%2Ferasure.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fvector%2Ferasure.cc?ref=c0b12dad9334c280ea30445a94f673b145ef88cc", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++14\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a moved_to of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/vector>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  auto is_odd = [](const int i) { return i % 2 != 0; };\n+\n+  std::vector<int> v{ 10, 11, 12, 14, 15, 17, 18, 19 };\n+  std::experimental::erase_if(v, is_odd);\n+  std::vector<int> t{ 10, 12, 14, 18 };\n+  VERIFY( v == t );\n+}\n+\n+void\n+test02()\n+{\n+  bool test [[gnu::unused]] = true;\n+\n+  std::vector<int> v{ 0, 11, 0, 0, 22, 33, 0, 0, 44, 0 };\n+  std::experimental::erase(v, 0);\n+  std::vector<int> t{ 11, 22, 33, 44 };\n+  VERIFY( v == t );\n+  std::experimental::erase(v, 55);\n+  VERIFY( v == t );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}]}