{"sha": "c54293c6e8b6e06d1f6eb7501402edbdda93786c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0MjkzYzZlOGI2ZTA2ZDFmNmViNzUwMTQwMmVkYmRkYTkzNzg2Yw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2005-12-02T06:25:13Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2005-12-02T06:25:13Z"}, "message": "re PR target/21017 (ppc 64bit target not using rlwinm)\n\n\tPR target/21017\n\t* combine.c (simplify_logical <IOR>): Simplify more patterns to\n\trotates.\n\nFrom-SVN: r107873", "tree": {"sha": "2af83ee1343bba5a8ecee7a849655428c1e1b576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2af83ee1343bba5a8ecee7a849655428c1e1b576"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c54293c6e8b6e06d1f6eb7501402edbdda93786c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54293c6e8b6e06d1f6eb7501402edbdda93786c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54293c6e8b6e06d1f6eb7501402edbdda93786c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54293c6e8b6e06d1f6eb7501402edbdda93786c/comments", "author": null, "committer": null, "parents": [{"sha": "815eb8f0ca3d0b677b5694781ac9b2809e39cd08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815eb8f0ca3d0b677b5694781ac9b2809e39cd08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815eb8f0ca3d0b677b5694781ac9b2809e39cd08"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "44052d0ccc6ab4434440f138e39072222d666b25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54293c6e8b6e06d1f6eb7501402edbdda93786c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54293c6e8b6e06d1f6eb7501402edbdda93786c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c54293c6e8b6e06d1f6eb7501402edbdda93786c", "patch": "@@ -1,3 +1,9 @@\n+2005-12-02  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR target/21017\n+\t* combine.c (simplify_logical <IOR>): Simplify more patterns to\n+\trotates.\n+\n 2005-12-02  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR middle-end/25176"}, {"sha": "b13ea867c0e5a0ec821c5c99210805fff7b4c463", "filename": "gcc/combine.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54293c6e8b6e06d1f6eb7501402edbdda93786c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54293c6e8b6e06d1f6eb7501402edbdda93786c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c54293c6e8b6e06d1f6eb7501402edbdda93786c", "patch": "@@ -5597,7 +5597,7 @@ simplify_logical (rtx x)\n   enum machine_mode mode = GET_MODE (x);\n   rtx op0 = XEXP (x, 0);\n   rtx op1 = XEXP (x, 1);\n-  rtx reversed;\n+  rtx tmp, reversed;\n \n   switch (GET_CODE (x))\n     {\n@@ -5724,16 +5724,37 @@ simplify_logical (rtx x)\n       /* Convert (ior (ashift A CX) (lshiftrt A CY)) where CX+CY equals the\n \t mode size to (rotate A CX).  */\n \n-      if (((GET_CODE (op0) == ASHIFT && GET_CODE (op1) == LSHIFTRT)\n-\t   || (GET_CODE (op1) == ASHIFT && GET_CODE (op0) == LSHIFTRT))\n+      if (GET_CODE (op1) == ASHIFT\n+\t  || GET_CODE (op1) == SUBREG)\n+\ttmp = op1, op1 = op0, op0 = tmp;\n+\n+      if (GET_CODE (op0) == ASHIFT && GET_CODE (op1) == LSHIFTRT\n \t  && rtx_equal_p (XEXP (op0, 0), XEXP (op1, 0))\n \t  && GET_CODE (XEXP (op0, 1)) == CONST_INT\n \t  && GET_CODE (XEXP (op1, 1)) == CONST_INT\n \t  && (INTVAL (XEXP (op0, 1)) + INTVAL (XEXP (op1, 1))\n \t      == GET_MODE_BITSIZE (mode)))\n-\treturn gen_rtx_ROTATE (mode, XEXP (op0, 0),\n-\t\t\t       (GET_CODE (op0) == ASHIFT\n-\t\t\t\t? XEXP (op0, 1) : XEXP (op1, 1)));\n+\treturn gen_rtx_ROTATE (mode, XEXP (op1, 0), XEXP (op0, 1));\n+\n+      /* Same, but for ashift that has been \"simplified\" to a wider mode\n+\t by simplify_shift_const.  */\n+\n+      if (GET_CODE (op0) == SUBREG\n+\t  && GET_CODE (SUBREG_REG (op0)) == ASHIFT\n+\t  && GET_CODE (op1) == LSHIFTRT\n+\t  && GET_CODE (XEXP (op1, 0)) == SUBREG\n+\t  && GET_MODE (op0) == GET_MODE (XEXP (op1, 0))\n+\t  && SUBREG_BYTE (op0) == SUBREG_BYTE (XEXP (op1, 0))\n+\t  && (GET_MODE_SIZE (GET_MODE (op0))\n+\t      < GET_MODE_SIZE (GET_MODE (SUBREG_REG (op0))))\n+\t  && rtx_equal_p (XEXP (SUBREG_REG (op0), 0),\n+\t\t\t  SUBREG_REG (XEXP (op1, 0)))\n+\t  && GET_CODE (XEXP (SUBREG_REG (op0), 1)) == CONST_INT\n+\t  && GET_CODE (XEXP (op1, 1)) == CONST_INT\n+\t  && (INTVAL (XEXP (SUBREG_REG (op0), 1)) + INTVAL (XEXP (op1, 1))\n+\t      == GET_MODE_BITSIZE (mode)))\n+\treturn gen_rtx_ROTATE (mode, XEXP (op1, 0),\n+\t\t\t       XEXP (SUBREG_REG (op0), 1));\n \n       /* If OP0 is (ashiftrt (plus ...) C), it might actually be\n \t a (sign_extend (plus ...)).  If so, OP1 is a CONST_INT, and the PLUS"}]}