{"sha": "b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVmMzRiNDI1YWQzMWM1ZWU4OTgwZmQ1Yjk5MzdkN2NkMjlkOThmYw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-11-25T21:26:37Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-11-25T21:26:37Z"}, "message": "Add pass_oacc_kernels pass group in passes.def\n\n2015-11-25  Tom de Vries  <tom@codesourcery.com>\n\n\t* omp-low.c (pass_expand_omp_ssa::clone): New function.\n\t* passes.def: Add pass_oacc_kernels pass group.\n\t* tree-ssa-loop-ch.c (pass_ch::clone): New function.\n\n\t* g++.dg/tree-ssa/copyprop-1.C: Update after adding new dce1.\n\t* gcc.dg/pr23911.c: Same.\n\t* gcc.dg/tree-ssa/20030709-2.c: Same.\n\t* gcc.dg/tree-ssa/20030731-2.c: Same.\n\t* gcc.dg/tree-ssa/20040729-1.c: Same.\n\t* gcc.dg/tree-ssa/cfgcleanup-1.c: Same.\n\t* gcc.dg/tree-ssa/loop-36.c: Same.\n\t* gcc.dg/tree-ssa/pr21086.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dce-1.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dce-2.c: Same.\n\t* gcc.dg/vect/pr26359.c: Same.\n\t* c-c++-common/restrict-2.c: Update after adding new lim1.\n\t* c-c++-common/restrict-4.c: Same.\n\t* g++.dg/tree-ssa/pr33615.C: Same.\n\t* g++.dg/tree-ssa/restrict1.C: Same.\n\t* gcc.dg/tm/pub-safety-1.c: Same.\n\t* gcc.dg/tm/reg-promotion.c: Same.\n\t* gcc.dg/tree-ssa/20050314-1.c: Same.\n\t* gcc.dg/tree-ssa/loop-32.c: Same.\n\t* gcc.dg/tree-ssa/loop-33.c: Same.\n\t* gcc.dg/tree-ssa/loop-34.c: Same.\n\t* gcc.dg/tree-ssa/loop-35.c: Same.\n\t* gcc.dg/tree-ssa/loop-7.c: Same.\n\t* gcc.dg/tree-ssa/pr23109.c: Same.\n\t* gcc.dg/tree-ssa/restrict-3.c: Same.\n\t* gcc.dg/tree-ssa/restrict-5.c: Same.\n\t* gcc.dg/tree-ssa/ssa-lim-1.c: Same.\n\t* gcc.dg/tree-ssa/ssa-lim-10.c: Same.\n\t* gcc.dg/tree-ssa/ssa-lim-11.c: Same.\n\t* gcc.dg/tree-ssa/ssa-lim-12.c: Same.\n\t* gcc.dg/tree-ssa/ssa-lim-2.c: Same.\n\t* gcc.dg/tree-ssa/ssa-lim-3.c: Same.\n\t* gcc.dg/tree-ssa/ssa-lim-6.c: Same.\n\t* gcc.dg/tree-ssa/ssa-lim-7.c: Same.\n\t* gcc.dg/tree-ssa/ssa-lim-8.c: Same.\n\t* gcc.dg/tree-ssa/ssa-lim-9.c: Same.\n\t* gcc.dg/tree-ssa/structopt-1.c: Same.\n\t* gfortran.dg/pr32921.f: Same.\n\t* g++.dg/tree-ssa/pr19637.C: Update after adding new dom1.\n\t* g++.dg/tree-ssa/pr61009.C: Same.\n\t* g++.dg/tree-ssa/ssa-dom.C: Same.\n\t* gcc.dg/pr20115-1.c: Same.\n\t* gcc.dg/tree-prof/20050826-2.c: Same.\n\t* gcc.dg/tree-prof/cmpsf-1.c: Same.\n\t* gcc.dg/tree-ssa/20030821-1.c: Same.\n\t* gcc.dg/tree-ssa/20030922-2.c: Same.\n\t* gcc.dg/tree-ssa/20031022-1.c: Same.\n\t* gcc.dg/tree-ssa/20040615-1.c: Same.\n\t* gcc.dg/tree-ssa/20040624-1.c: Same.\n\t* gcc.dg/tree-ssa/pr21417.c: Same.\n\t* gcc.dg/tree-ssa/pr61607.c: Same.\n\t* gcc.dg/tree-ssa/slsr-27.c: Same.\n\t* gcc.dg/tree-ssa/slsr-28.c: Same.\n\t* gcc.dg/tree-ssa/slsr-29.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-branch-1.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-cse-3.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-1.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2a.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2b.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2c.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2d.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2e.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-2f.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-5.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-6.c: Same.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Same.\n\t* gcc.dg/tree-ssa/ssa-thread-12.c: Same.\n\t* gcc.dg/tree-ssa/vrp47.c: Same.\n\t* gcc.dg/tree-ssa/copy-headers.c: Update after adding ch1.\n\t* gcc.dg/tree-ssa/foldconst-2.c: Same.\n\t* gcc.dg/tree-ssa/loop-40.c: Same.\n\t* gcc.dg/gomp/notify-new-function-3.c: Update after adding ompexpssa1.\n\nFrom-SVN: r230907", "tree": {"sha": "eabd06c3ffd46244caa1aa86c5170d845208399d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eabd06c3ffd46244caa1aa86c5170d845208399d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/comments", "author": null, "committer": null, "parents": [{"sha": "896522eec5e80bb93108053d95096de46fb21939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896522eec5e80bb93108053d95096de46fb21939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/896522eec5e80bb93108053d95096de46fb21939"}], "stats": {"total": 424, "additions": 263, "deletions": 161}, "files": [{"sha": "2b9ef71c38287e9125a78d44ee4bc85544ea1531", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,3 +1,9 @@\n+2015-11-25  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* omp-low.c (pass_expand_omp_ssa::clone): New function.\n+\t* passes.def: Add pass_oacc_kernels pass group.\n+\t* tree-ssa-loop-ch.c (pass_ch::clone): New function.\n+\n 2015-11-25  Tom de Vries  <tom@codesourcery.com>\n \n \t* tree-pass.h (make_pass_oacc_kernels, make_pass_oacc_kernels2):"}, {"sha": "a923e37244ae1b663f68fa671e0419b52c3db618", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -13363,6 +13363,7 @@ class pass_expand_omp_ssa : public gimple_opt_pass\n       return !(fun->curr_properties & PROP_gimple_eomp);\n     }\n   virtual unsigned int execute (function *) { return execute_expand_omp (); }\n+  opt_pass * clone () { return new pass_expand_omp_ssa (m_ctxt); }\n \n }; // class pass_expand_omp_ssa\n "}, {"sha": "28cb4c1cf1fc12aa9ac6bc78d1ba6c9461c738ab", "filename": "gcc/passes.def", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -88,7 +88,24 @@ along with GCC; see the file COPYING3.  If not see\n \t  /* pass_build_ealias is a dummy pass that ensures that we\n \t     execute TODO_rebuild_alias at this point.  */\n \t  NEXT_PASS (pass_build_ealias);\n+\t  /* Pass group that runs when the function is an offloaded function\n+\t     containing oacc kernels loops.  Part 1.  */\n+\t  NEXT_PASS (pass_oacc_kernels);\n+\t  PUSH_INSERT_PASSES_WITHIN (pass_oacc_kernels)\n+\t      NEXT_PASS (pass_ch);\n+\t  POP_INSERT_PASSES ()\n \t  NEXT_PASS (pass_fre);\n+\t  /* Pass group that runs when the function is an offloaded function\n+\t     containing oacc kernels loops.  Part 2.  */\n+\t  NEXT_PASS (pass_oacc_kernels2);\n+\t  PUSH_INSERT_PASSES_WITHIN (pass_oacc_kernels2)\n+\t      /* We use pass_lim to rewrite in-memory iteration and reduction\n+\t\t variable accesses in loops into local variables accesses.  */\n+\t      NEXT_PASS (pass_lim);\n+\t      NEXT_PASS (pass_dominator, false /* may_peel_loop_headers_p */);\n+\t      NEXT_PASS (pass_dce);\n+\t      NEXT_PASS (pass_expand_omp_ssa);\n+\t  POP_INSERT_PASSES ()\n \t  NEXT_PASS (pass_merge_phi);\n           NEXT_PASS (pass_dse);\n \t  NEXT_PASS (pass_cd_dce);"}, {"sha": "7e24abb5a134a4cd98be33bc7b5f64bf66334dd4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,3 +1,79 @@\n+2015-11-25  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* g++.dg/tree-ssa/copyprop-1.C: Update after adding new dce1.\n+\t* gcc.dg/pr23911.c: Same.\n+\t* gcc.dg/tree-ssa/20030709-2.c: Same.\n+\t* gcc.dg/tree-ssa/20030731-2.c: Same.\n+\t* gcc.dg/tree-ssa/20040729-1.c: Same.\n+\t* gcc.dg/tree-ssa/cfgcleanup-1.c: Same.\n+\t* gcc.dg/tree-ssa/loop-36.c: Same.\n+\t* gcc.dg/tree-ssa/pr21086.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dce-1.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dce-2.c: Same.\n+\t* gcc.dg/vect/pr26359.c: Same.\n+\t* c-c++-common/restrict-2.c: Update after adding new lim1.\n+\t* c-c++-common/restrict-4.c: Same.\n+\t* g++.dg/tree-ssa/pr33615.C: Same.\n+\t* g++.dg/tree-ssa/restrict1.C: Same.\n+\t* gcc.dg/tm/pub-safety-1.c: Same.\n+\t* gcc.dg/tm/reg-promotion.c: Same.\n+\t* gcc.dg/tree-ssa/20050314-1.c: Same.\n+\t* gcc.dg/tree-ssa/loop-32.c: Same.\n+\t* gcc.dg/tree-ssa/loop-33.c: Same.\n+\t* gcc.dg/tree-ssa/loop-34.c: Same.\n+\t* gcc.dg/tree-ssa/loop-35.c: Same.\n+\t* gcc.dg/tree-ssa/loop-7.c: Same.\n+\t* gcc.dg/tree-ssa/pr23109.c: Same.\n+\t* gcc.dg/tree-ssa/restrict-3.c: Same.\n+\t* gcc.dg/tree-ssa/restrict-5.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-lim-1.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-lim-10.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-lim-11.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-lim-12.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-lim-2.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-lim-3.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-lim-6.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-lim-7.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-lim-8.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-lim-9.c: Same.\n+\t* gcc.dg/tree-ssa/structopt-1.c: Same.\n+\t* gfortran.dg/pr32921.f: Same.\n+\t* g++.dg/tree-ssa/pr19637.C: Update after adding new dom1.\n+\t* g++.dg/tree-ssa/pr61009.C: Same.\n+\t* g++.dg/tree-ssa/ssa-dom.C: Same.\n+\t* gcc.dg/pr20115-1.c: Same.\n+\t* gcc.dg/tree-prof/20050826-2.c: Same.\n+\t* gcc.dg/tree-prof/cmpsf-1.c: Same.\n+\t* gcc.dg/tree-ssa/20030821-1.c: Same.\n+\t* gcc.dg/tree-ssa/20030922-2.c: Same.\n+\t* gcc.dg/tree-ssa/20031022-1.c: Same.\n+\t* gcc.dg/tree-ssa/20040615-1.c: Same.\n+\t* gcc.dg/tree-ssa/20040624-1.c: Same.\n+\t* gcc.dg/tree-ssa/pr21417.c: Same.\n+\t* gcc.dg/tree-ssa/pr61607.c: Same.\n+\t* gcc.dg/tree-ssa/slsr-27.c: Same.\n+\t* gcc.dg/tree-ssa/slsr-28.c: Same.\n+\t* gcc.dg/tree-ssa/slsr-29.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-branch-1.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-cse-3.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-1.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2a.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2b.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2c.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2d.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2e.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-2f.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-5.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-6.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-7.c: Same.\n+\t* gcc.dg/tree-ssa/ssa-thread-12.c: Same.\n+\t* gcc.dg/tree-ssa/vrp47.c: Same.\n+\t* gcc.dg/tree-ssa/copy-headers.c: Update after adding ch1.\n+\t* gcc.dg/tree-ssa/foldconst-2.c: Same.\n+\t* gcc.dg/tree-ssa/loop-40.c: Same.\n+\t* gcc.dg/gomp/notify-new-function-3.c: Update after adding ompexpssa1.\n+\n 2015-11-25  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/cpp0x/constexpr-array13.C: Fix."}, {"sha": "ad19fb3f2d5e5f58a78b91804690f29ab002ec85", "filename": "gcc/testsuite/c-c++-common/restrict-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frestrict-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frestrict-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frestrict-2.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fno-strict-aliasing -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O -fno-strict-aliasing -fdump-tree-lim2-details\" } */\n \n void foo (float * __restrict__ a, float * __restrict__ b, int n, int j)\n {\n@@ -10,4 +10,4 @@ void foo (float * __restrict__ a, float * __restrict__ b, int n, int j)\n \n /* We should move the RHS of the store out of the loop.  */\n \n-/* { dg-final { scan-tree-dump-times \"Moving statement\" 11 \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Moving statement\" 11 \"lim2\" } } */"}, {"sha": "5806a2a90184e8638c699e3d19b8c6b6c9c83574", "filename": "gcc/testsuite/c-c++-common/restrict-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frestrict-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frestrict-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frestrict-4.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile }  */\n-/* { dg-options \"-O2 -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-lim2-details\" } */\n \n struct Foo\n {\n@@ -15,4 +15,4 @@ void bar(struct Foo f, int * __restrict__ q)\n     }\n }\n \n-/* { dg-final { scan-tree-dump \"Executing store motion\" \"lim1\" } } */\n+/* { dg-final { scan-tree-dump \"Executing store motion\" \"lim2\" } } */"}, {"sha": "34a9f7b225b22d480d006d86387b3b9179634b08", "filename": "gcc/testsuite/g++.dg/tree-ssa/copyprop-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcopyprop-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcopyprop-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fcopyprop-1.C?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-dce2\" } */\n+/* { dg-options \"-O -fdump-tree-dce3\" } */\n \n /* Verify that we can eliminate the useless conversions to/from\n    const qualified pointer types\n@@ -27,4 +27,4 @@ int foo(Object&o)\n \n /* Remaining should be two loads.  */\n \n-/* { dg-final { scan-tree-dump-times \" = \\[^\\n\\]*;\" 2 \"dce2\" } } */\n+/* { dg-final { scan-tree-dump-times \" = \\[^\\n\\]*;\" 2 \"dce3\" } } */"}, {"sha": "8172ea83f54d3838ce2e651b80ec5724acd5df70", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr19637.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19637.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19637.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr19637.C?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-dom1\" } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-dom2\" } */\n \n #include <new>\n \n@@ -29,4 +29,4 @@ int foo_void_offset(void)\n   return reinterpret_cast<Foo *>(&i[0])->i[0];\n }\n \n-/* { dg-final { scan-tree-dump-times \"return 1;\" 3 \"dom1\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 1;\" 3 \"dom2\" } } */"}, {"sha": "13e20e0cd2ca4023fcd0eabbbe1dfb40729f073d", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr33615.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr33615.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr33615.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr33615.C?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fnon-call-exceptions -fdump-tree-lim1-details -w\" } */\n+/* { dg-options \"-O -fnon-call-exceptions -fdump-tree-lim2-details -w\" } */\n \n extern volatile int y;\n \n@@ -16,4 +16,4 @@ foo (double a, int x)\n \n // The expression 1.0 / 0.0 should not be treated as a loop invariant\n // if it may throw an exception.\n-// { dg-final { scan-tree-dump-times \"invariant up to\" 0 \"lim1\" } }\n+// { dg-final { scan-tree-dump-times \"invariant up to\" 0 \"lim2\" } }"}, {"sha": "e07d29c0ad75ecd1563f6843cc611336bc425b5c", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr61009.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61009.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61009.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr61009.C?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-tree-vrp -std=c++11 -fno-strict-aliasing -fdump-tree-dom1\" } */\n+/* { dg-options \"-O2 -fno-tree-vrp -std=c++11 -fno-strict-aliasing -fdump-tree-dom2\" } */\n \n #include <stdio.h>\n struct Field {\n@@ -49,4 +49,4 @@ bool  Test(void) {\n // The block ending with cmp == 0 should not be threaded.  ie,\n // there should be a single == 0 comparison in the dump file.\n \n-// { dg-final { scan-tree-dump-times \"== 0\" 1 \"dom1\" } }\n+// { dg-final { scan-tree-dump-times \"== 0\" 1 \"dom2\" } }"}, {"sha": "3228321e522918297a5747b004a7cc3b158ef1ab", "filename": "gcc/testsuite/g++.dg/tree-ssa/restrict1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Frestrict1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Frestrict1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Frestrict1.C?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-lim2-details\" } */\n \n struct Foo\n {\n@@ -16,4 +16,4 @@ void bar(Foo f, int * __restrict__ q)\n     }\n }\n \n-/* { dg-final { scan-tree-dump \"Executing store motion\" \"lim1\" } } */\n+/* { dg-final { scan-tree-dump \"Executing store motion\" \"lim2\" } } */"}, {"sha": "30c8485ff15bf6b15336ecf1f0164f321640dd23", "filename": "gcc/testsuite/g++.dg/tree-ssa/ssa-dom.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dom.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dom.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fssa-dom.C?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom1\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2\" } */\n \n typedef long unsigned int size_t;\n extern void abort (void) __attribute__ ((__noreturn__));\n@@ -99,5 +99,5 @@ gimple_return_set_retval (gimple gs, tree retval)\n     abort ();\n   gimple_set_op (gs, 0, retval);\n }\n-/* { dg-final { scan-tree-dump-times \"gss_for_code_.10.\" 1 \"dom1\"} } */\n+/* { dg-final { scan-tree-dump-times \"gss_for_code_.10.\" 1 \"dom2\"} } */\n "}, {"sha": "033a4070302e5adfc5e688daab68e53e3c2e8c6d", "filename": "gcc/testsuite/gcc.dg/gomp/notify-new-function-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fnotify-new-function-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fnotify-new-function-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fnotify-new-function-3.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -11,4 +11,4 @@ foo (int *__restrict a, int *__restrict b, int *__restrict c)\n \n \n /* Check for new function notification in ompexpssa dump.  */\n-/* { dg-final { scan-tree-dump-times \"Added new ssa gimple function foo\\\\.\\[\\\\\\$_\\]loopfn\\\\.0 to callgraph\" 1 \"ompexpssa\" } } */\n+/* { dg-final { scan-tree-dump-times \"Added new ssa gimple function foo\\\\.\\[\\\\\\$_\\]loopfn\\\\.0 to callgraph\" 1 \"ompexpssa2\" } } */"}, {"sha": "1be99a5c9650d8f15b881d559a97a4bfb1c40f06", "filename": "gcc/testsuite/gcc.dg/pr20115-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20115-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20115-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20115-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom1\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2\" } */\n \n extern int foo (void) __attribute__((pure));\n \n@@ -11,4 +11,4 @@ int bar()\n }\n \n /* Check that we only have one call to foo.  */\n-/* { dg-final { scan-tree-dump-times \"foo\" 1 \"dom1\" } } */\n+/* { dg-final { scan-tree-dump-times \"foo\" 1 \"dom2\" } } */"}, {"sha": "3fa041222dec4afcf8f131f2a6d7902304d7285b", "filename": "gcc/testsuite/gcc.dg/pr23911.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23911.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23911.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23911.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,7 +1,7 @@\n /* This was a missed optimization in tree constant propagation\n    that CSE would catch later on.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-dce2\" } */\n+/* { dg-options \"-O -fdump-tree-dce3\" } */\n \n double _Complex *a; \n static const double _Complex b[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; \n@@ -16,5 +16,5 @@ test (void)\n \n /* After DCE2 which runs after FRE, the expressions should be fully\n    constant folded.  There should be no loads from b left.  */\n-/* { dg-final { scan-tree-dump-times \"__complex__ \\\\\\(1.0e\\\\\\+0, 0.0\\\\\\)\" 2 \"dce2\" } } */\n-/* { dg-final { scan-tree-dump-times \"= b\" 0 \"dce2\" } } */\n+/* { dg-final { scan-tree-dump-times \"__complex__ \\\\\\(1.0e\\\\\\+0, 0.0\\\\\\)\" 2 \"dce3\" } } */\n+/* { dg-final { scan-tree-dump-times \"= b\" 0 \"dce3\" } } */"}, {"sha": "59fb43e6edd689dc17d48cf30adce84e2e159db0", "filename": "gcc/testsuite/gcc.dg/tm/pub-safety-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fpub-safety-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fpub-safety-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Fpub-safety-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fgnu-tm -O1 -fdump-tree-lim1\" } */\n+/* { dg-options \"-fgnu-tm -O1 -fdump-tree-lim2\" } */\n \n /* Test that thread visible loads do not get hoisted out of loops if\n    the load would not have occurred on each path out of the loop.  */\n@@ -20,4 +20,4 @@ void reader()\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Cannot hoist.*DATA_DATA because it is in a transaction\" 1 \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Cannot hoist.*DATA_DATA because it is in a transaction\" 1 \"lim2\" } } */"}, {"sha": "47400efd90f0fbd824b04b8fac56fbba10bac9ce", "filename": "gcc/testsuite/gcc.dg/tm/reg-promotion.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Freg-promotion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Freg-promotion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftm%2Freg-promotion.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fgnu-tm -O2 -fdump-tree-lim1\" } */\n+/* { dg-options \"-fgnu-tm -O2 -fdump-tree-lim2\" } */\n \n /* Test that `count' is not written to unless p->data>0.  */\n \n@@ -20,4 +20,4 @@ void func()\n   }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Cannot hoist conditional load of count because it is in a transaction\" 1 \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Cannot hoist conditional load of count because it is in a transaction\" 1 \"lim2\" } } */"}, {"sha": "bdaef3d5bf576bf8aea4a26d13d8984c1acb89a9", "filename": "gcc/testsuite/gcc.dg/tree-prof/20050826-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2F20050826-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2F20050826-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2F20050826-2.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,6 +1,6 @@\n /* Testcase derived from gcc.c-torture/execute 20050826-2.c\n    which showed jump threading profile insanities.  */\n-/* { dg-options \"-Ofast -fdump-tree-dom1-all\" } */\n+/* { dg-options \"-Ofast -fdump-tree-dom2-all\" } */\n \n struct rtattr\n {\n@@ -72,4 +72,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"dom1\"} } */\n+/* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"dom2\"} } */"}, {"sha": "49102df3e61a8d2d3531d2716b9eedd4f9b568d5", "filename": "gcc/testsuite/gcc.dg/tree-prof/cmpsf-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fcmpsf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fcmpsf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fcmpsf-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,6 +1,6 @@\n /* Testcase derived from gcc.c-torture/execute cmpsf-1.c\n    which showed jump threading profile insanities.  */\n-/* { dg-options \"-Ofast -fdump-tree-dom1-all\" } */\n+/* { dg-options \"-Ofast -fdump-tree-dom2-all\" } */\n \n #include <limits.h>\n \n@@ -181,4 +181,4 @@ main (void)\n   exit (0);\n }\n \n-/* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"dom1\"} } */\n+/* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"dom2\"} } */"}, {"sha": "5009cd69cfe81fa41d56e14a74ee05bac9e90ff3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030709-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030709-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030709-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030709-2.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-dce2\" } */\n+/* { dg-options \"-O -fdump-tree-dce3\" } */\n   \n struct rtx_def;\n typedef struct rtx_def *rtx;\n@@ -42,13 +42,13 @@ get_alias_set (t)\n \n /* There should be precisely one load of ->decl.rtl.  If there is\n    more than, then the dominator optimizations failed.  */\n-/* { dg-final { scan-tree-dump-times \"->decl\\\\.rtl\" 1 \"dce2\"} } */\n+/* { dg-final { scan-tree-dump-times \"->decl\\\\.rtl\" 1 \"dce3\"} } */\n   \n /* There should be no loads of .rtmem since the complex return statement\n    is just \"return 0\".  */\n-/* { dg-final { scan-tree-dump-times \".rtmem\" 0 \"dce2\"} } */\n+/* { dg-final { scan-tree-dump-times \".rtmem\" 0 \"dce3\"} } */\n   \n /* There should be one IF statement (the complex return statement should\n    collapse down to a simple return 0 without any conditionals).  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"dce2\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"dce3\"} } */\n "}, {"sha": "069f953c0f788049385af7c214d581e8f01aad1c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030731-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030731-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030731-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030731-2.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dce1\" } */\n+/* { dg-options \"-O2 -fdump-tree-dce2\" } */\n \n void foo (void);\n \n@@ -15,4 +15,4 @@ bar (int i, int partial, int args_addr)\n \n /* There should be only one IF conditional since the first does nothing\n    useful.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"dce1\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"dce2\"} } */"}, {"sha": "131472edc7c0ce98420f831d5c91464a86e74702", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030821-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030821-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030821-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030821-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom1 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2 -fdump-tree-optimized\" } */\n \n void dont_remove (void);\n "}, {"sha": "6c133bdee31c514f77f02e4d83fdb99f2b7e4c1c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030922-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030922-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030922-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030922-2.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom1 -fdisable-tree-ifcombine\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2 -fdisable-tree-ifcombine\" } */\n \n struct rtx_def;\n typedef struct rtx_def *rtx;\n@@ -24,4 +24,4 @@ rgn_rank (rtx insn1, rtx insn2)\n    SSA name to record as a copy of the other when DOM derives copies\n    from temporary equivalences.  The heuristics there no longer do\n    the correct thing.  VRP still optimizes this testcase.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 2 \"dom1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 2 \"dom2\" { xfail *-*-* } } } */"}, {"sha": "25f9144c02615af3f7f467f0c64de5f900741d5a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20031022-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031022-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031022-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20031022-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom1\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n  \n typedef struct edge_def\n {\n@@ -26,4 +26,4 @@ blah (int arf)\n }\n \n /* There should be one load from entry_exit_blocks[1].pred.  */\n-/* { dg-final { scan-tree-dump-times \"entry_exit_blocks.1..pred\" 1 \"dom1\"} } */\n+/* { dg-final { scan-tree-dump-times \"entry_exit_blocks.1..pred\" 1 \"dom2\"} } */"}, {"sha": "de7fa11fe474b968b6dda22726859778e2158672", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040615-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040615-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040615-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040615-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom1\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n   \n void bar1 (void);\n void bar2 (void);\n@@ -13,4 +13,4 @@ foo (unsigned int a, unsigned int b)\n     bar2 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"bar2\" 0 \"dom1\" } } */\n+/* { dg-final { scan-tree-dump-times \"bar2\" 0 \"dom2\" } } */"}, {"sha": "d95c78203e03f3c1277cceb7c33587219d96512c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040624-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040624-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040624-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040624-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dom1\" } */\n+/* { dg-options \"-O1 -fdump-tree-dom2\" } */\n   \n void bar1 (void);\n void bar2 (void);\n@@ -17,4 +17,4 @@ foo (unsigned int a, unsigned int b)\n    true (to reach the second condition we know a < b via the first\n    conditional.  */\n \n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom1\" } } */\n+/* { dg-final { scan-tree-dump-times \"if \" 1 \"dom2\" } } */"}, {"sha": "812887a87ace3a213956f5a739c08042c63016c9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040729-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040729-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040729-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040729-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dce2\" } */\n+/* { dg-options \"-O1 -fdump-tree-dce3\" } */\n \n int\n foo ()\n@@ -16,4 +16,4 @@ foo ()\n    compiler was mistakenly thinking that the statement had volatile\n    operands.  But 'p' itself is not volatile and taking the address of\n    a volatile does not constitute a volatile operand.  */\n-/* { dg-final { scan-tree-dump-times \"&x\" 0 \"dce2\"} } */\n+/* { dg-final { scan-tree-dump-times \"&x\" 0 \"dce3\"} } */"}, {"sha": "fd9895b70201fe4971a64f418056d175329f7ce3", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20050314-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20050314-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20050314-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20050314-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-lim1-details --param allow-store-data-races=1\" } */\n+/* { dg-options \"-O1 -fdump-tree-lim2-details --param allow-store-data-races=1\" } */\n \n float a[100];\n \n@@ -17,4 +17,4 @@ void xxx (void)\n /* Store motion may be applied to the assignment to a[k], since sinf\n    cannot read nor write the memory.  */\n \n-/* { dg-final { scan-tree-dump-times \"Moving statement\" 1 \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Moving statement\" 1 \"lim2\" } } */"}, {"sha": "53ce97340d20a384aec0529ecf559beb8b60a91b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cfgcleanup-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcfgcleanup-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcfgcleanup-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcfgcleanup-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-dce1\" } */\n+/* { dg-options \"-O2 -fdump-tree-dce2\" } */\n void\n cleanup (int a, int b)\n {\n@@ -15,4 +15,4 @@ cleanup (int a, int b)\n   return;\n }\n /* Dce should get rid of the initializers and cfgcleanup should elliminate ifs  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dce1\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dce2\"} } */"}, {"sha": "a5a82121ff293415e60077d99b5fa469c7f1aadf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/copy-headers.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcopy-headers.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-ch-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-ch2-details\" } */\n \n extern int foo (int);\n \n@@ -12,4 +12,4 @@ void bla (void)\n }\n \n /* There should be a header duplicated.  */\n-/* { dg-final { scan-tree-dump-times \"Duplicating header\" 1 \"ch\"} } */\n+/* { dg-final { scan-tree-dump-times \"Duplicating header\" 1 \"ch2\"} } */"}, {"sha": "e9a6f870b8015949441e6fa497d106c78e7904ac", "filename": "gcc/testsuite/gcc.dg/tree-ssa/foldconst-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldconst-2.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-ch\" } */\n+/* { dg-options \"-O2 -fdump-tree-ch2\" } */\n typedef union tree_node *tree;\n enum tree_code\n {\n@@ -56,4 +56,4 @@ emit_support_tinfos (void)\n }\n /* We should copy loop header to fundamentals[0] and then fold it way into\n    known value.  */\n-/* { dg-final { scan-tree-dump-not \"fundamentals.0\" \"ch\"} } */\n+/* { dg-final { scan-tree-dump-not \"fundamentals.0\" \"ch2\"} } */"}, {"sha": "e06a1e4e11506d461be2db232c51bdacf14a5df2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-32.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-lim2-details\" } */\n \n int x;\n int a[100];\n@@ -42,4 +42,4 @@ void test3(struct a *A)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 3 \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 3 \"lim2\" } } */"}, {"sha": "57fd06d38df5693611beedd8703a3e8b32000c53", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-33.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-33.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-lim2-details\" } */\n \n int x;\n int a[100];\n@@ -36,4 +36,4 @@ void test5(struct a *A, unsigned b)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 4 \"lim1\" { xfail { lp64 || llp64 } } } } */\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 4 \"lim2\" { xfail { lp64 || llp64 } } } } */"}, {"sha": "4a7b082fe4333933c23ecb21e59c164ad767a580", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-34.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-34.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-lim2-details\" } */\n \n int r[6];\n \n@@ -17,4 +17,4 @@ void f (int n)\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"Executing store motion of r\" 6 \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of r\" 6 \"lim2\" } } */"}, {"sha": "4e9d03a86daad6fafda74841422719a3271effcc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-35.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-35.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-lim2-details\" } */\n \n int x;\n int a[100];\n@@ -67,5 +67,5 @@ void test4(struct a *A, unsigned LONG b)\n     }\n }\n /* long index not hoisted for avr target PR 36561 */\n-/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 8 \"lim1\" { xfail { \"avr-*-*\" } } } } */\n-/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 6 \"lim1\" { target { \"avr-*-*\" } } } } */\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 8 \"lim2\" { xfail { \"avr-*-*\" } } } } */\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 6 \"lim2\" { target { \"avr-*-*\" } } } } */"}, {"sha": "516cad9083f8336695e0ea4baa148a4cbefa1cdb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-36.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-36.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dce2\" } */\n+/* { dg-options \"-O2 -fdump-tree-dce3\" } */\n \n struct X { float array[2]; };\n \n@@ -18,4 +18,4 @@ float foobar () {\n \n /* The temporary structure should have been promoted to registers\n    by FRE after the loops have been unrolled by the early unrolling pass.  */\n-/* { dg-final { scan-tree-dump-not \"c\\.array\" \"dce2\" } } */\n+/* { dg-final { scan-tree-dump-not \"c\\.array\" \"dce3\" } } */"}, {"sha": "36db5657a9a0dec0c890a47bad3da5d36c24fbc6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-40.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-40.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-ch-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-ch2-details\" } */\n \n int mymax2(int *it, int *end)\n {\n@@ -10,4 +10,4 @@ int mymax2(int *it, int *end)\n   return max;\n }\n \n-/* { dg-final { scan-tree-dump \"Duplicating header\" \"ch\" } } */\n+/* { dg-final { scan-tree-dump \"Duplicating header\" \"ch2\" } } */"}, {"sha": "08a4935240047ed61947234a1ba6f5610a6fbcdd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-7.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/19828 */\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O1 -fdump-tree-lim2-details\" } */\n \n int cst_fun1 (int) __attribute__((__const__));\n int cst_fun2 (int) __attribute__((__const__));\n@@ -31,4 +31,4 @@ int xxx (void)\n    Calls to cst_fun2 and pure_fun2 should not be, since calling\n    with k = 0 may be invalid.  */\n \n-/* { dg-final { scan-tree-dump-times \"Moving statement\" 2 \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Moving statement\" 2 \"lim2\" } } */"}, {"sha": "e8b62c2ca1f6c4be603d3b61b6d3af730f3ed89a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21086.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-dce1 -fdelete-null-pointer-checks\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-dce2 -fdelete-null-pointer-checks\" } */\n \n int\n foo (int *p)\n@@ -18,5 +18,5 @@ foo (int *p)\n /* Target disabling -fdelete-null-pointer-checks should not fold checks */\n /* { dg-final { scan-tree-dump \"Folding predicate \" \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump-times \"Folding predicate \" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n-/* { dg-final { scan-tree-dump-not \"b_. =\" \"dce1\" { target { ! avr-*-* } } } } */\n-/* { dg-final { scan-tree-dump \"b_. =\" \"dce1\" { target { avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump-not \"b_. =\" \"dce2\" { target { ! avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump \"b_. =\" \"dce2\" { target { avr-*-* } } } } */"}, {"sha": "c865ee3337c262026b22197e68277df869d001c9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21417.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21417.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom3-details\" } */\n \n struct tree_common \n { \n@@ -49,5 +49,5 @@ test (tree expr, int t, int D17630)\n /* We should thread the backedge to the top of the loop; ie we only\n    execute the if (expr->common.code != 142) test once per loop\n    iteration.  */\n-/* { dg-final { scan-tree-dump-times \"FSM jump thread\" 1 \"dom2\" } } */\n+/* { dg-final { scan-tree-dump-times \"FSM jump thread\" 1 \"dom3\" } } */\n "}, {"sha": "fac991c77afc0bf0f3ece17d1563058c19e32fba", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23109.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23109.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23109.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23109.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -funsafe-math-optimizations -ftrapping-math -fdump-tree-recip -fdump-tree-lim1\" } */\n+/* { dg-options \"-O2 -funsafe-math-optimizations -ftrapping-math -fdump-tree-recip -fdump-tree-lim2\" } */\n /* { dg-warning \"-fassociative-math disabled\" \"\" { target *-*-* } 1 } */\n \n double F[2] = { 0., 0. }, e = 0.;\n@@ -29,6 +29,6 @@ int main()\n /* LIM only performs the transformation in the no-trapping-math case.  In\n    the future we will do it for trapping-math as well in recip, check that\n    this is not wrongly optimized.  */\n-/* { dg-final { scan-tree-dump-not \"reciptmp\" \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-not \"reciptmp\" \"lim2\" } } */\n /* { dg-final { scan-tree-dump-not \"reciptmp\" \"recip\" } } */\n "}, {"sha": "0868a4459dcdc019be60480e91c9d45b482ab5c8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr61607.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61607.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61607.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr61607.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Os -fno-tree-fre -fdump-tree-dom1\" } */\n+/* { dg-options \"-Os -fno-tree-fre -fdump-tree-dom2\" } */\n \n void foo(int *);\n void f2(int dst[3], int R)\n@@ -23,6 +23,6 @@ void f2(int dst[3], int R)\n /* There should be precisely two conditionals.  One for the loop condition\n    and one for the test after the loop.  Previously we failed to eliminate\n    the second conditional after the loop.  */\n-/* { dg-final { scan-tree-dump-times \"if\" 2 \"dom1\"} } */\n+/* { dg-final { scan-tree-dump-times \"if\" 2 \"dom2\"} } */\n \n "}, {"sha": "90b9b558622f7d1f7fbf0c0ec54c5cd420f9b3bc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/restrict-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-3.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fno-strict-aliasing -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O -fno-strict-aliasing -fdump-tree-lim2-details\" } */\n \n void f(int * __restrict__ r,\n        int a[__restrict__ 16][16],\n@@ -14,4 +14,4 @@ void f(int * __restrict__ r,\n \n /* We should apply store motion to the store to *r.  */\n \n-/* { dg-final { scan-tree-dump \"Executing store motion of \\\\\\*r\" \"lim1\" } } */\n+/* { dg-final { scan-tree-dump \"Executing store motion of \\\\\\*r\" \"lim2\" } } */"}, {"sha": "fc03c1e9c1ca593b8894336da1d16c0be62fa514", "filename": "gcc/testsuite/gcc.dg/tree-ssa/restrict-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Frestrict-5.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fno-strict-aliasing -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O -fno-strict-aliasing -fdump-tree-lim2-details\" } */\n \n static inline __attribute__((always_inline))\n void f(int * __restrict__ r,\n@@ -20,4 +20,4 @@ void g(int *r, int a[16][16], int b[16][16], int i, int j)\n \n /* We should apply store motion to the store to *r.  */\n \n-/* { dg-final { scan-tree-dump \"Executing store motion of \\\\\\*r\" \"lim1\" } } */\n+/* { dg-final { scan-tree-dump \"Executing store motion of \\\\\\*r\" \"lim2\" } } */"}, {"sha": "35b3d00ee44a5b6edd1d0616e242b0e6eb49cc80", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-27.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-27.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom3\" } */\n \n struct x\n {\n@@ -16,7 +16,7 @@ f (struct x *p, unsigned int n)\n   foo (p->a[n], p->c[n], p->b[n]);\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom2\" { target { int32 } } } } */\n-/* { dg-final { scan-tree-dump-times \"\\\\* 2;\" 1 \"dom2\" { target { int16 } } } } */\n-/* { dg-final { scan-tree-dump-times \"p_\\\\d\\+\\\\(D\\\\) \\\\+ \\[^\\r\\n\\]*_\\\\d\\+;\" 1 \"dom2\" } } */\n-/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 3 \"dom2\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom3\" { target { int32 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 2;\" 1 \"dom3\" { target { int16 } } } } */\n+/* { dg-final { scan-tree-dump-times \"p_\\\\d\\+\\\\(D\\\\) \\\\+ \\[^\\r\\n\\]*_\\\\d\\+;\" 1 \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 3 \"dom3\" } } */"}, {"sha": "732d2324db5404a3d6eb40d94ce29e5f453b5892", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-28.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-28.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom3\" } */\n \n struct x\n {\n@@ -20,7 +20,7 @@ f (struct x *p, unsigned int n)\n     foo (p->b[n], p->a[n], p->c[n]);\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom2\" { target { int32 } } } } */\n-/* { dg-final { scan-tree-dump-times \"\\\\* 2;\" 1 \"dom2\" { target { int16 } } } } */\n-/* { dg-final { scan-tree-dump-times \"p_\\\\d\\+\\\\(D\\\\) \\\\+ \\[^\\r\\n\\]*_\\\\d\\+\" 1 \"dom2\" } } */\n-/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 9 \"dom2\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom3\" { target { int32 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 2;\" 1 \"dom3\" { target { int16 } } } } */\n+/* { dg-final { scan-tree-dump-times \"p_\\\\d\\+\\\\(D\\\\) \\\\+ \\[^\\r\\n\\]*_\\\\d\\+\" 1 \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 9 \"dom3\" } } */"}, {"sha": "a22cc7906dac00214d0d6f920fe228945bf9ec84", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-29.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-29.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom2\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom3\" } */\n \n struct x\n {\n@@ -22,7 +22,7 @@ f (struct x *p, unsigned int n)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom2\" { target { int32 } } } } */\n-/* { dg-final { scan-tree-dump-times \"\\\\* 2;\" 1 \"dom2\" { target { int16 } } } } */\n-/* { dg-final { scan-tree-dump-times \"p_\\\\d\\+\\\\(D\\\\) \\\\+ \\[^\\r\\n\\]*_\\\\d\\+\" 1 \"dom2\" } } */\n-/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 9 \"dom2\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 4;\" 1 \"dom3\" { target { int32 } } } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\* 2;\" 1 \"dom3\" { target { int16 } } } } */\n+/* { dg-final { scan-tree-dump-times \"p_\\\\d\\+\\\\(D\\\\) \\\\+ \\[^\\r\\n\\]*_\\\\d\\+\" 1 \"dom3\" } } */\n+/* { dg-final { scan-tree-dump-times \"MEM\\\\\\[\\\\(struct x \\\\*\\\\)\\[^\\r\\n\\]*_\\\\d\\+\" 9 \"dom3\" } } */"}, {"sha": "0c478d1a3fa642a9e563e4fcf151583c36b0217c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dce-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-dce2\" } */\n+/* { dg-options \"-O1 -fdump-tree-dce3\" } */\n \n int t() __attribute__ ((const));\n void\n@@ -10,4 +10,4 @@ q()\n     i = t();\n }\n /* There should be no IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dce2\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dce3\"} } */"}, {"sha": "b3f50731eea5d0ca1f74f4fc03d86f6358a477af", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dce-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-2.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dce2\" } */\n+/* { dg-options \"-O2 -fdump-tree-dce3\" } */\n \n /* We should notice constantness of this function. */\n static int __attribute__((noinline)) t(int a) \n@@ -13,4 +13,4 @@ void q(void)\n     i = t(1);\n }\n /* There should be no IF conditionals.  */\n-/* { dg-final { scan-tree-dump-times \"if \" 0 \"dce2\"} } */\n+/* { dg-final { scan-tree-dump-times \"if \" 0 \"dce3\"} } */"}, {"sha": "18f9041827d8dd0a62755e8b4ab64e12bdb795aa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-branch-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-branch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-branch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-branch-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -w -fdump-tree-dom1-details\" } */\n+/* { dg-options \"-O2 -w -fdump-tree-dom2-details\" } */\n \n typedef struct rtx_def *rtx;\n struct rtx_def\n@@ -21,9 +21,9 @@ try_combine (rtx i1, rtx newpat)\n \n /* There should be three tests against i1.  Two from the hash table\n    dumps, one in the code itself.  */\n-/* { dg-final { scan-tree-dump-times \"if .i1_\" 3 \"dom1\"} } */\n+/* { dg-final { scan-tree-dump-times \"if .i1_\" 3 \"dom2\"} } */\n \n /* There should be no actual jump threads realized by DOM.  The\n    legitimize jump threads are handled in VRP and those discovered\n    by DOM are subsumed by collapsing a conditional.  */\n-/* { dg-final { scan-tree-dump-not \"Threaded\" \"dom1\"} } */\n+/* { dg-final { scan-tree-dump-not \"Threaded\" \"dom2\"} } */"}, {"sha": "04637c27005099d4766d8bcea356e76463f882df", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-cse-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-3.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O -fno-tree-fre -fdump-tree-dom1\" } */\n+/* { dg-options \"-O -fno-tree-fre -fdump-tree-dom2\" } */\n \n extern void abort (void);\n \n@@ -27,4 +27,4 @@ main()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"= PHI <\\[01\\]\\\\\\(.\\\\\\), \\[01\\]\\\\\\(.\\\\\\)>\" \"dom1\" } } */\n+/* { dg-final { scan-tree-dump \"= PHI <\\[01\\]\\\\\\(.\\\\\\), \\[01\\]\\\\\\(.\\\\\\)>\" \"dom2\" } } */"}, {"sha": "759d9ab7afa652854c7fde81cbd690e936091737", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fno-tree-vrp -fdump-tree-dom1-details\" } */\n+/* { dg-options \"-O2 -fno-tree-vrp -fdump-tree-dom2-details\" } */\n void t(void);\n void q(void);\n void q1(void);\n@@ -14,4 +14,4 @@ threading(int a,int b)\n \t  q1();\n }\n /* We should thread the jump twice and elliminate it.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 2 \"dom1\"} } */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 2 \"dom2\"} } */"}, {"sha": "b972f649442bbab3d43dcfc55708bb84c0c4f9fa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2a.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom1-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n \n void bla();\n \n@@ -18,4 +18,4 @@ void thread_entry_through_header (void)\n    jump threading pass.  */\n /* { dg-final { scan-tree-dump-times \"Jumps threaded: 1\" 1 \"vrp1\"} } */\n /* { dg-final { scan-tree-dump-times \"Jumps threaded: 2\" 0 \"vrp1\"} } */\n-/* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom1\"} } */\n+/* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom2\"} } */"}, {"sha": "0d40254b14d8c3cf19f00c9f83bac8bfbf5042eb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2b.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2b.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom1-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n \n void foo();\n void bla();\n@@ -25,5 +25,5 @@ void thread_latch_through_header (void)\n /* Threading the latch to a later point in the loop is safe in this\n    case.  And we want to thread through the header as well.  These\n    are both caught by threading in DOM.  */\n-/* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom1\"} } */\n+/* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom2\"} } */\n /* { dg-final { scan-tree-dump-times \"Jumps threaded: 2\" 1 \"vrp1\"} } */"}, {"sha": "f3e37bd8d383fcbe9018763c54e5c925a87d75cc", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2c.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom1-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n \n void foo();\n void bla();\n@@ -29,4 +29,4 @@ void dont_thread_1 (void)\n    header and around the latch.  If one is done without the other, then\n    we create an irreducible CFG. */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"vrp1\"} } */\n-/* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom1\"} } */\n+/* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom2\"} } */"}, {"sha": "9b4637a22a03980edb28ec33193201d7b52900d9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2d.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2d.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom1-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n \n void foo();\n void bla();\n@@ -26,4 +26,4 @@ void dont_thread_2 (int first)\n /* Peeling off the first iteration would make threading through\n    the loop latch safe, but we don't do that currently.  */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"vrp1\"} } */\n-/* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom1\"} } */\n+/* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom2\"} } */"}, {"sha": "78e64c451dd9a9d93dccc999cb3a1daa67dc5107", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2e.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2e.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom1-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n \n void foo();\n void bla();\n@@ -25,4 +25,4 @@ void dont_thread_3 (int nfirst)\n /* Threading through the loop header is not safe here.  Peeling off\n    the first iteration then unswitching the loop would be safe.  */\n /* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"vrp1\"} } */\n-/* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom1\"} } */\n+/* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom2\"} } */"}, {"sha": "e5c9f887a2021fc7e2e73530e3b13bfd3bfd9da1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-2f.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-2f.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom1-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats\" } */\n \n void foo();\n void bla();\n@@ -31,4 +31,4 @@ void dont_thread_4 (int a, int nfirst)\n }\n \n /* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"vrp1\"} } */\n-/* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom1\"} } */\n+/* { dg-final { scan-tree-dump-not \"Jumps threaded\" \"dom2\"} } */"}, {"sha": "77ba74c1352a534f2e27cc9a4fe23c81b866b236", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-dom1-details -std=gnu89\" } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details -std=gnu89\" } */\n struct bitmap_head_def;\n typedef struct bitmap_head_def *bitmap;\n typedef const struct bitmap_head_def *const_bitmap;\n@@ -58,7 +58,7 @@ bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n    code we missed the edge when the first conditional is false\n    (b_elt is zero, which means the second conditional is always\n    zero.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 3 \"dom1\" { target { ! logical_op_short_circuit } } } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 3 \"dom2\" { target { ! logical_op_short_circuit } } } } */\n /* On targets that define LOGICAL_OP_NON_SHORT_CIRCUIT to 0, we split both\n    \"a_elt || b_elt\" and \"b_elt && kill_elt\" into two conditions each,\n    rather than using \"(var1 != 0) op (var2 != 0)\".  Also, as on other targets,\n@@ -75,5 +75,5 @@ bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n       -> \"kill_elt->indx == b_elt->indx\" in the second condition,\n \t skipping the known-true \"b_elt && kill_elt\" in the second\n \t condition.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 4 \"dom1\" { target logical_op_short_circuit } } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 4 \"dom2\" { target logical_op_short_circuit } } } */\n "}, {"sha": "1c42c27ef725f07b8aa73494860b9760205786ba", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-5.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-Os -fno-tree-fre -fdump-tree-dom1-details\" } */\n+/* { dg-options \"-Os -fno-tree-fre -fdump-tree-dom2-details\" } */\n \n void foo(int *);\n void f2(int dst[3], int R)\n@@ -19,4 +19,4 @@ void f2(int dst[3], int R)\n   foo(inter);\n }\n \n-/* { dg-final { scan-tree-dump \"Threaded jump\" \"dom1\" } } */\n+/* { dg-final { scan-tree-dump \"Threaded jump\" \"dom2\" } } */"}, {"sha": "ab6b6ebace2229c8a995b5c01fedf3daffdd797b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-6.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom1-details\" } */\n-/* { dg-final { scan-tree-dump-times \"FSM\" 6 \"dom1\" } } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details\" } */\n+/* { dg-final { scan-tree-dump-times \"FSM\" 6 \"dom2\" } } */\n \n int sum0, sum1, sum2, sum3;\n int foo (char *s, char **ret)"}, {"sha": "93c767c352cc12a18a9a5a5cecc85d004d9ed228", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-7.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-7.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom1-stats -fdump-tree-dom2-stats\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-stats -fdump-tree-dom2-stats -fdump-tree-dom3-stats\" } */\n /* { dg-final { scan-tree-dump \"Jumps threaded: 7\"  \"vrp1\" } } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 12\" \"dom1\" } } */\n-/* { dg-final { scan-tree-dump \"Jumps threaded: 3\"  \"dom2\" } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 12\" \"dom2\" } } */\n+/* { dg-final { scan-tree-dump \"Jumps threaded: 3\"  \"dom3\" } } */\n \n enum STATE {\n   S0=0,"}, {"sha": "4ee704969aae67f11c047f72aa7633a7e4ad1823", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-lim1\" } */\n+/* { dg-options \"-O -fdump-tree-lim2\" } */\n \n /* This is a variant that does cause fold to place a cast to\n    int before testing bit 1.  */\n@@ -18,4 +18,4 @@ quantum_toffoli (int control1, int control2, int target,\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"1 <<\" 3 \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-times \"1 <<\" 3 \"lim2\" } } */"}, {"sha": "ec609d81c68104c4a9f1b927eec5b50b15f9038c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-10.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-lim2-details\" } */\n \n int *l, *r;\n int test_func(void)\n@@ -27,4 +27,4 @@ int test_func(void)\n   return i;\n }\n \n-/* { dg-final { scan-tree-dump \"Executing store motion of pos\" \"lim1\" } } */\n+/* { dg-final { scan-tree-dump \"Executing store motion of pos\" \"lim2\" } } */"}, {"sha": "e4c11aab1959d25cb07cba40c24b930763687e39", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-11.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fprofile-arcs -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O -fprofile-arcs -fdump-tree-lim2-details\" } */\n /* { dg-require-profiling \"-fprofile-generate\" } */\n \n struct thread_param\n@@ -22,4 +22,4 @@ void access_buf(struct thread_param* p)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Executing store motion of __gcov0.access_buf\\\\\\[\\[01\\]\\\\\\] from loop 1\" 2 \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of __gcov0.access_buf\\\\\\[\\[01\\]\\\\\\] from loop 1\" 2 \"lim2\" } } */"}, {"sha": "016ff22f39fe62f145e46ff969926d963dcd7112", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-12.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-lim1\" } */\n+/* { dg-options \"-O -fdump-tree-lim2\" } */\n \n int a[1024];\n \n@@ -23,4 +23,4 @@ void bar (int x, int z)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"!= 0 ? \" 2 \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-times \"!= 0 ? \" 2 \"lim2\" } } */"}, {"sha": "37639cdbaf765443675f8790e3325998c4d718b6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-2.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-lim1\" } */\n+/* { dg-options \"-O -fdump-tree-lim2\" } */\n \n /* This is a variant that doesn't cause fold to place a cast to\n    int before testing bit 1.  */\n@@ -18,4 +18,4 @@ int size)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"1 <<\" 3 \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-times \"1 <<\" 3 \"lim2\" } } */"}, {"sha": "f059d5a02095a7c11caf72276d1d293ce132472a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-3.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O -fdump-tree-lim2-details\" } */\n \n struct { int x; int y; } global;\n void foo(int n)\n@@ -9,5 +9,5 @@ void foo(int n)\n     global.y += global.x*global.x;\n }\n \n-/* { dg-final { scan-tree-dump \"Executing store motion of global.y\" \"lim1\" } } */\n-/* { dg-final { scan-tree-dump \"Moving statement.*global.x.*out of loop 1\" \"lim1\" } } */\n+/* { dg-final { scan-tree-dump \"Executing store motion of global.y\" \"lim2\" } } */\n+/* { dg-final { scan-tree-dump \"Moving statement.*global.x.*out of loop 1\" \"lim2\" } } */"}, {"sha": "21edcd0a0dcf65b368d0efecb8a3fc771919f92d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-6.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-lim2-details\" } */\n \n double a[16][64], y[64], x[16];\n void foo(void)\n@@ -10,4 +10,4 @@ void foo(void)\n       y[j] = y[j] + a[i][j] * x[i];\n }\n \n-/* { dg-final { scan-tree-dump \"Executing store motion of y\" \"lim1\" } } */\n+/* { dg-final { scan-tree-dump \"Executing store motion of y\" \"lim2\" } } */"}, {"sha": "7612e75afaeaef0eecfe78fefd4e6fa84b957d85", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-7.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-7.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O -fdump-tree-lim2-details\" } */\n \n extern const int srcshift;\n \n@@ -11,4 +11,4 @@ void foo (int *srcdata, int *dstdata)\n     dstdata[i] = srcdata[i] << srcshift;\n }\n \n-/* { dg-final { scan-tree-dump \"Moving statement\" \"lim1\" } } */\n+/* { dg-final { scan-tree-dump \"Moving statement\" \"lim2\" } } */"}, {"sha": "9256b39fb449e7fb01e9bf49c3d74bea221a6ea6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-8.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O -fdump-tree-lim2-details\" } */\n \n void bar (int);\n void foo (int n, int m)\n@@ -16,4 +16,4 @@ void foo (int n, int m)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Moving PHI node\" 1 \"lim1\"  } } */\n+/* { dg-final { scan-tree-dump-times \"Moving PHI node\" 1 \"lim2\"  } } */"}, {"sha": "a65656f49eef0540fe19f089cbfc624362ae6e23", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-lim-9.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-lim-9.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O -fdump-tree-lim2-details\" } */\n \n void bar (int);\n void foo (int n, int m)\n@@ -16,4 +16,4 @@ void foo (int n, int m)\n     }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Moving PHI node\" 1 \"lim1\"  } } */\n+/* { dg-final { scan-tree-dump-times \"Moving PHI node\" 1 \"lim2\"  } } */"}, {"sha": "f250d224f2b82934d8c3c3a48d1308d68ea886f8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-12.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-dom1-details\" } */\n-/* { dg-final { scan-tree-dump \"FSM\" \"dom1\" } } */\n+/* { dg-options \"-O2 -fdump-tree-dom2-details\" } */\n+/* { dg-final { scan-tree-dump \"FSM\" \"dom2\" } } */\n \n typedef struct bitmap_head_def *bitmap;\n typedef const struct bitmap_head_def *const_bitmap;"}, {"sha": "94bdd4ab23798eeae4bd20393ff5eab2f801d1b6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/structopt-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstructopt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstructopt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fstructopt-1.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-lim1-details\" } */\n+/* { dg-options \"-O2 -fdump-tree-lim2-details\" } */\n int x; int y;\n struct { int x; int y; } global;\n int foo() {\n@@ -10,5 +10,5 @@ int foo() {\n \t\tglobal.y += global.x*global.x;\n }\n \n-/* { dg-final { scan-tree-dump-times \"Executing store motion of global.y\" 1 \"lim1\" } } */\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of global.y\" 1 \"lim2\" } } */\n /* XXX: We should also check for the load motion of global.x, but there is no easy way to do this.  */"}, {"sha": "beca5fa8c5c08d67fe20cb06d4938ea84736b5e0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp47.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -4,7 +4,7 @@\n    jumps when evaluating an && condition.  VRP is not able to optimize\n    this.  */\n /* { dg-do compile { target { ! { logical_op_short_circuit || { s390*-*-* mn10300-*-* hppa*-*-* } } } } } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-dom1 -fdump-tree-vrp2\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-dom2 -fdump-tree-vrp2\" } */\n /* { dg-additional-options \"-march=i586\" { target { { i?86-*-* x86_64-*-* } && ia32 } } } */\n \n int h(int x, int y)"}, {"sha": "5b445a9bda7499554d2fd9b07ff92a9328773b82", "filename": "gcc/testsuite/gcc.dg/vect/pr26359.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr26359.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr26359.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr26359.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_int } */\n-/* { dg-additional-options \"-fdump-tree-dce5-details\" } */\n+/* { dg-additional-options \"-fdump-tree-dce6-details\" } */\n \n int a[256], b[256], c[256];\n \n@@ -13,4 +13,4 @@ foo () {\n   }\n }\n \n-/* { dg-final { scan-tree-dump-times \"Deleting : vect_\" 0 \"dce5\" } } */\n+/* { dg-final { scan-tree-dump-times \"Deleting : vect_\" 0 \"dce6\" } } */"}, {"sha": "0661208edde5900005332c376c7db6f26b88940b", "filename": "gcc/testsuite/gfortran.dg/pr32921.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32921.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32921.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr32921.f?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-O2 -fdump-tree-lim1\" }\n+! { dg-options \"-O2 -fdump-tree-lim2\" }\n ! gfortran -c -m32 -O2 -S junk.f\n !\n       MODULE LES3D_DATA\n@@ -45,4 +45,4 @@ SUBROUTINE EXTRAPI()\n \n       RETURN\n       END\n-! { dg-final { scan-tree-dump-times \"stride\" 4 \"lim1\" } }\n+! { dg-final { scan-tree-dump-times \"stride\" 4 \"lim2\" } }"}, {"sha": "6493fcc428b818073038df162837d212ab2dcff4", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=b5f34b425ad31c5ee8980fd5b9937d7cd29d98fc", "patch": "@@ -165,6 +165,8 @@ class pass_ch : public ch_base\n   /* Initialize and finalize loop structures, copying headers inbetween.  */\n   virtual unsigned int execute (function *);\n \n+  opt_pass * clone () { return new pass_ch (m_ctxt); }\n+\n protected:\n   /* ch_base method: */\n   virtual bool process_loop_p (struct loop *loop);"}]}