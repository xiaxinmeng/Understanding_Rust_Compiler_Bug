{"sha": "adb70c2d1060b3e8d410b45c698796c5d88818b3", "node_id": "C_kwDOANBUbNoAKGFkYjcwYzJkMTA2MGIzZThkNDEwYjQ1YzY5ODc5NmM1ZDg4ODE4YjM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-15T10:41:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-16T07:30:05Z"}, "message": "Avoid random stmt order result in pass_waccess::use_after_inval_p\n\nuse_after_inval_p uses stmt UIDs to speed up repeated dominance\nchecks within a basic-block but it fails to assign UIDs to PHIs\nwhich means compares with PHIs in the same block get a random\nresult.\n\nThe following factors renumber_gimple_stmt_uids to expose a new\nrenumber_gimple_stmt_uids_in_block we can share.\n\nBut since we rely on processing even earlier PHIs to follow\npointer adjustments (we look at those even if earlier) the patch\nalso moves PHI handling out of the use_after_inval_p guard.\nThis then also fixes PR109141.\n\n\tPR tree-optimization/109141\n\t* tree-dfa.h (renumber_gimple_stmt_uids_in_block): New.\n\t* tree-dfa.cc (renumber_gimple_stmt_uids_in_block): Split\n\tout from ...\n\t(renumber_gimple_stmt_uids): ... here and\n\t(renumber_gimple_stmt_uids_in_blocks): ... here.\n\t* gimple-ssa-warn-access.cc (pass_waccess::use_after_inval_p):\n\tUse renumber_gimple_stmt_uids_in_block to also assign UIDs\n\tto PHIs.\n\t(pass_waccess::check_pointer_uses): Process all PHIs.", "tree": {"sha": "7867c3888f33b8e87c0d5f4222392592a9fc8881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7867c3888f33b8e87c0d5f4222392592a9fc8881"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adb70c2d1060b3e8d410b45c698796c5d88818b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb70c2d1060b3e8d410b45c698796c5d88818b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb70c2d1060b3e8d410b45c698796c5d88818b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb70c2d1060b3e8d410b45c698796c5d88818b3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af4f68166602938796f34cd4e515cb97f2f113c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af4f68166602938796f34cd4e515cb97f2f113c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af4f68166602938796f34cd4e515cb97f2f113c0"}], "stats": {"total": 86, "additions": 37, "deletions": 49}, "files": [{"sha": "fbb9b10fa75946f9895d2ebfe698dce5e53b1c8f", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb70c2d1060b3e8d410b45c698796c5d88818b3/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb70c2d1060b3e8d410b45c698796c5d88818b3/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=adb70c2d1060b3e8d410b45c698796c5d88818b3", "patch": "@@ -3862,13 +3862,7 @@ pass_waccess::use_after_inval_p (gimple *inval_stmt, gimple *use_stmt,\n        to consecutive statements in it.  Use the ids to determine which\n        precedes which.  This avoids the linear traversal on subsequent\n        visits to the same block.  */\n-    for (auto si = gsi_start_bb (inval_bb); !gsi_end_p (si);\n-\t gsi_next_nondebug (&si))\n-      {\n-\tgimple *stmt = gsi_stmt (si);\n-\tunsigned uid = inc_gimple_stmt_max_uid (m_func);\n-\tgimple_set_uid (stmt, uid);\n-      }\n+    renumber_gimple_stmt_uids_in_block (m_func, inval_bb);\n \n   return gimple_uid (inval_stmt) < gimple_uid (use_stmt);\n }\n@@ -4239,27 +4233,26 @@ pass_waccess::check_pointer_uses (gimple *stmt, tree ptr,\n \t      tree_code code = gimple_cond_code (cond);\n \t      equality = code == EQ_EXPR || code == NE_EXPR;\n \t    }\n+\t  else if (gimple_code (use_stmt) == GIMPLE_PHI)\n+\t    {\n+\t      /* Only add a PHI result to POINTERS if all its\n+\t\t operands are related to PTR, otherwise continue.  */\n+\t      tree lhs = gimple_phi_result (use_stmt);\n+\t      if (!pointers_related_p (stmt, lhs, ptr, m_ptr_qry))\n+\t\tcontinue;\n+\n+\t      if (TREE_CODE (lhs) == SSA_NAME)\n+\t\t{\n+\t\t  pointers.safe_push (lhs);\n+\t\t  continue;\n+\t\t}\n+\t    }\n \n \t  /* Warn if USE_STMT is dominated by the deallocation STMT.\n \t     Otherwise, add the pointer to POINTERS so that the uses\n \t     of any other pointers derived from it can be checked.  */\n \t  if (use_after_inval_p (stmt, use_stmt, check_dangling))\n \t    {\n-\t      if (gimple_code (use_stmt) == GIMPLE_PHI)\n-\t\t{\n-\t\t  /* Only add a PHI result to POINTERS if all its\n-\t\t     operands are related to PTR, otherwise continue.  */\n-\t\t  tree lhs = gimple_phi_result (use_stmt);\n-\t\t  if (!pointers_related_p (stmt, lhs, ptr, m_ptr_qry))\n-\t\t    continue;\n-\n-\t\t  if (TREE_CODE (lhs) == SSA_NAME)\n-\t\t    {\n-\t\t      pointers.safe_push (lhs);\n-\t\t      continue;\n-\t\t    }\n-\t\t}\n-\n \t      basic_block use_bb = gimple_bb (use_stmt);\n \t      bool this_maybe\n \t\t= (maybe"}, {"sha": "82803a8ccb1d3e4151def9be5d5d2694e29a96f3", "filename": "gcc/tree-dfa.cc", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb70c2d1060b3e8d410b45c698796c5d88818b3/gcc%2Ftree-dfa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb70c2d1060b3e8d410b45c698796c5d88818b3/gcc%2Ftree-dfa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.cc?ref=adb70c2d1060b3e8d410b45c698796c5d88818b3", "patch": "@@ -59,6 +59,25 @@ static void collect_dfa_stats (struct dfa_stats_d *);\n \t\t\tDataflow analysis (DFA) routines\n ---------------------------------------------------------------------------*/\n \n+/* Renumber the gimple stmt uids in one block.  The caller is responsible\n+   of calling set_gimple_stmt_max_uid (fun, 0) at some point.  */\n+\n+void\n+renumber_gimple_stmt_uids_in_block (struct function *fun, basic_block bb)\n+{\n+  gimple_stmt_iterator bsi;\n+  for (bsi = gsi_start_phis (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n+    {\n+      gimple *stmt = gsi_stmt (bsi);\n+      gimple_set_uid (stmt, inc_gimple_stmt_max_uid (fun));\n+    }\n+  for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n+    {\n+      gimple *stmt = gsi_stmt (bsi);\n+      gimple_set_uid (stmt, inc_gimple_stmt_max_uid (fun));\n+    }\n+}\n+\n /* Renumber all of the gimple stmt uids.  */\n \n void\n@@ -68,19 +87,7 @@ renumber_gimple_stmt_uids (struct function *fun)\n \n   set_gimple_stmt_max_uid (fun, 0);\n   FOR_ALL_BB_FN (bb, fun)\n-    {\n-      gimple_stmt_iterator bsi;\n-      for (bsi = gsi_start_phis (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n-\t{\n-\t  gimple *stmt = gsi_stmt (bsi);\n-\t  gimple_set_uid (stmt, inc_gimple_stmt_max_uid (fun));\n-\t}\n-      for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n-\t{\n-\t  gimple *stmt = gsi_stmt (bsi);\n-\t  gimple_set_uid (stmt, inc_gimple_stmt_max_uid (fun));\n-\t}\n-    }\n+    renumber_gimple_stmt_uids_in_block (fun, bb);\n }\n \n /* Like renumber_gimple_stmt_uids, but only do work on the basic blocks\n@@ -93,20 +100,7 @@ renumber_gimple_stmt_uids_in_blocks (basic_block *blocks, int n_blocks)\n \n   set_gimple_stmt_max_uid (cfun, 0);\n   for (i = 0; i < n_blocks; i++)\n-    {\n-      basic_block bb = blocks[i];\n-      gimple_stmt_iterator bsi;\n-      for (bsi = gsi_start_phis (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n-\t{\n-\t  gimple *stmt = gsi_stmt (bsi);\n-\t  gimple_set_uid (stmt, inc_gimple_stmt_max_uid (cfun));\n-\t}\n-      for (bsi = gsi_start_bb (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n-\t{\n-\t  gimple *stmt = gsi_stmt (bsi);\n-\t  gimple_set_uid (stmt, inc_gimple_stmt_max_uid (cfun));\n-\t}\n-    }\n+    renumber_gimple_stmt_uids_in_block (cfun, blocks[i]);\n }\n \n "}, {"sha": "074a4da3a6cdd651a9daeff88005ba3f34368e3d", "filename": "gcc/tree-dfa.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb70c2d1060b3e8d410b45c698796c5d88818b3/gcc%2Ftree-dfa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb70c2d1060b3e8d410b45c698796c5d88818b3/gcc%2Ftree-dfa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.h?ref=adb70c2d1060b3e8d410b45c698796c5d88818b3", "patch": "@@ -20,6 +20,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_TREE_DFA_H\n #define GCC_TREE_DFA_H\n \n+extern void renumber_gimple_stmt_uids_in_block (struct function *, basic_block);\n extern void renumber_gimple_stmt_uids (struct function *);\n extern void renumber_gimple_stmt_uids_in_blocks (basic_block *, int);\n extern void dump_variable (FILE *, tree);"}]}