{"sha": "3adea09eea448dde8d2c41807845cca6c4f30e89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FkZWEwOWVlYTQ0OGRkZThkMmM0MTgwNzg0NWNjYTZjNGYzMGU4OQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-07-04T18:16:26Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-07-04T18:16:26Z"}, "message": "P0458R2 Checking for Existence of an Element in Associative Containers\n\n\t* include/bits/stl_map.h (map::contains): Add for C++2a.\n\t* include/bits/stl_multimap.h (multimap::contains): Likewise.\n\t* include/bits/stl_multiset.h (multiset::contains): Likewise.\n\t* include/bits/stl_set.h (set::contains): Likewise.\n\t* include/bits/stl_tree.h (__has_is_transparent_t): Define alias.\n\t(_Rb_tree::_M_find_tr, _Rb_tree::_M_count_tr)\n\t(_Rb_tree::_M_lower_bound_tr, _Rb_tree::_M_upper_bound_tr)\n\t(_Rb_tree::_M_equal_range_tr): Use __has_is_transparent_t.\n\t* include/bits/unordered_map.h (unordered_map::contains)\n\t(unordered_multimap::contains): Add for C++2a.\n\t* include/bits/unordered_set.h (unordered_set::contains)\n\t(unordered_multiset::contains): Likewise.\n\t* testsuite/23_containers/map/operations/contains.cc: New.\n\t* testsuite/23_containers/multimap/operations/contains.cc: New.\n\t* testsuite/23_containers/multiset/operations/contains.cc: New.\n\t* testsuite/23_containers/set/operations/contains.cc: New.\n\t* testsuite/23_containers/unordered_map/operations/contains.cc: New.\n\t* testsuite/23_containers/unordered_multimap/operations/contains.cc:\n\tNew.\n\t* testsuite/23_containers/unordered_multiset/operations/contains.cc:\n\tNew.\n\t* testsuite/23_containers/unordered_set/operations/contains.cc: New.\n\nFrom-SVN: r262418", "tree": {"sha": "3aa975a42e473815b8d7e5e6dcfe2b83da0003c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aa975a42e473815b8d7e5e6dcfe2b83da0003c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3adea09eea448dde8d2c41807845cca6c4f30e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3adea09eea448dde8d2c41807845cca6c4f30e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3adea09eea448dde8d2c41807845cca6c4f30e89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3adea09eea448dde8d2c41807845cca6c4f30e89/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96eb9df619ab1ba907c9dc6002f6bbc326e884fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96eb9df619ab1ba907c9dc6002f6bbc326e884fb"}], "stats": {"total": 627, "additions": 607, "deletions": 20}, "files": [{"sha": "0f46565a3eba02ba00836e2d1ed821803b12d7e8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -1,3 +1,29 @@\n+2018-07-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tP0458R2 Checking for Existence of an Element in Associative Containers\n+\t* include/bits/stl_map.h (map::contains): Add for C++2a.\n+\t* include/bits/stl_multimap.h (multimap::contains): Likewise.\n+\t* include/bits/stl_multiset.h (multiset::contains): Likewise.\n+\t* include/bits/stl_set.h (set::contains): Likewise.\n+\t* include/bits/stl_tree.h (__has_is_transparent_t): Define alias.\n+\t(_Rb_tree::_M_find_tr, _Rb_tree::_M_count_tr)\n+\t(_Rb_tree::_M_lower_bound_tr, _Rb_tree::_M_upper_bound_tr)\n+\t(_Rb_tree::_M_equal_range_tr): Use __has_is_transparent_t.\n+\t* include/bits/unordered_map.h (unordered_map::contains)\n+\t(unordered_multimap::contains): Add for C++2a.\n+\t* include/bits/unordered_set.h (unordered_set::contains)\n+\t(unordered_multiset::contains): Likewise.\n+\t* testsuite/23_containers/map/operations/contains.cc: New.\n+\t* testsuite/23_containers/multimap/operations/contains.cc: New.\n+\t* testsuite/23_containers/multiset/operations/contains.cc: New.\n+\t* testsuite/23_containers/set/operations/contains.cc: New.\n+\t* testsuite/23_containers/unordered_map/operations/contains.cc: New.\n+\t* testsuite/23_containers/unordered_multimap/operations/contains.cc:\n+\tNew.\n+\t* testsuite/23_containers/unordered_multiset/operations/contains.cc:\n+\tNew.\n+\t* testsuite/23_containers/unordered_set/operations/contains.cc: New.\n+\n 2018-07-03  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/string"}, {"sha": "fdd058b060d844927f48d5e8caa9967d562089f1", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -1223,6 +1223,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n       //@}\n \n+#if __cplusplus > 201703L\n+      //@{\n+      /**\n+       *  @brief  Finds whether an element with the given key exists.\n+       *  @param  __x  Key of (key, value) pairs to be located.\n+       *  @return  True if there is an element with the specified key.\n+       */\n+      bool\n+      contains(const key_type& __x) const\n+      { return _M_t.find(__x) != _M_t.end(); }\n+\n+      template<typename _Kt>\n+\tauto\n+\tcontains(const _Kt& __x) const\n+\t-> decltype(_M_t._M_find_tr(__x), void(), true)\n+\t{ return _M_t._M_find_tr(__x) != _M_t.end(); }\n+      //@}\n+#endif\n+\n       //@{\n       /**\n        *  @brief Finds the beginning of a subsequence matching given key."}, {"sha": "9357d1db6aad9b5e93b2fb2f8f06a8ce6fa39e3d", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -893,6 +893,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n       //@}\n \n+#if __cplusplus > 201703L\n+      //@{\n+      /**\n+       *  @brief  Finds whether an element with the given key exists.\n+       *  @param  __x  Key of (key, value) pairs to be located.\n+       *  @return  True if there is any element with the specified key.\n+       */\n+      bool\n+      contains(const key_type& __x) const\n+      { return _M_t.find(__x) != _M_t.end(); }\n+\n+      template<typename _Kt>\n+\tauto\n+\tcontains(const _Kt& __x) const\n+\t-> decltype(_M_t._M_find_tr(__x), void(), true)\n+\t{ return _M_t._M_find_tr(__x) != _M_t.end(); }\n+      //@}\n+#endif\n+\n       //@{\n       /**\n        *  @brief Finds the beginning of a subsequence matching given key."}, {"sha": "ebac76731edda06426f8e500d57f47f681acd2a2", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -738,6 +738,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n       //@}\n \n+#if __cplusplus > 201703L\n+      //@{\n+      /**\n+       *  @brief  Finds whether an element with the given key exists.\n+       *  @param  __x  Key of elements to be located.\n+       *  @return  True if there is any element with the specified key.\n+       */\n+      bool\n+      contains(const key_type& __x) const\n+      { return _M_t.find(__x) != _M_t.end(); }\n+\n+      template<typename _Kt>\n+\tauto\n+\tcontains(const _Kt& __x) const\n+\t-> decltype(_M_t._M_find_tr(__x), void(), true)\n+\t{ return _M_t._M_find_tr(__x) != _M_t.end(); }\n+      //@}\n+#endif\n+\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214.  set::find() missing const overload\n       //@{"}, {"sha": "ee959d5fc1e93e21084547e9f13df8837ce94701", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -757,6 +757,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n       //@}\n \n+#if __cplusplus > 201703L\n+      //@{\n+      /**\n+       *  @brief  Finds whether an element with the given key exists.\n+       *  @param  __x  Key of elements to be located.\n+       *  @return  True if there is an element with the specified key.\n+       */\n+      bool\n+      contains(const key_type& __x) const\n+      { return _M_t.find(__x) != _M_t.end(); }\n+\n+      template<typename _Kt>\n+\tauto\n+\tcontains(const _Kt& __x) const\n+\t-> decltype(_M_t._M_find_tr(__x), void(), true)\n+\t{ return _M_t._M_find_tr(__x) != _M_t.end(); }\n+      //@}\n+#endif\n+\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214.  set::find() missing const overload\n       //@{"}, {"sha": "0544f99f9ab4d015a7619bf959a8d2fb4c5877d9", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -423,7 +423,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,\n \t\t\t       _Rb_tree_node_base& __header) throw ();\n \n-#if __cplusplus > 201103L\n+#if __cplusplus >= 201402L\n   template<typename _Cmp, typename _SfinaeType, typename = __void_t<>>\n     struct __has_is_transparent\n     { };\n@@ -432,6 +432,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __has_is_transparent<_Cmp, _SfinaeType,\n \t\t\t\t__void_t<typename _Cmp::is_transparent>>\n     { typedef void type; };\n+\n+  template<typename _Cmp, typename _SfinaeType>\n+    using __has_is_transparent_t\n+      = typename __has_is_transparent<_Cmp, _SfinaeType>::type;\n #endif\n \n #if __cplusplus > 201402L\n@@ -1251,10 +1255,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       pair<const_iterator, const_iterator>\n       equal_range(const key_type& __k) const;\n \n-#if __cplusplus > 201103L\n+#if __cplusplus >= 201402L\n       template<typename _Kt,\n-\t       typename _Req =\n-\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req = __has_is_transparent_t<_Compare, _Kt>>\n \titerator\n \t_M_find_tr(const _Kt& __k)\n \t{\n@@ -1263,8 +1266,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req =\n-\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req = __has_is_transparent_t<_Compare, _Kt>>\n \tconst_iterator\n \t_M_find_tr(const _Kt& __k) const\n \t{\n@@ -1275,8 +1277,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req =\n-\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req = __has_is_transparent_t<_Compare, _Kt>>\n \tsize_type\n \t_M_count_tr(const _Kt& __k) const\n \t{\n@@ -1285,8 +1286,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req =\n-\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req = __has_is_transparent_t<_Compare, _Kt>>\n \titerator\n \t_M_lower_bound_tr(const _Kt& __k)\n \t{\n@@ -1295,8 +1295,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req =\n-\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req = __has_is_transparent_t<_Compare, _Kt>>\n \tconst_iterator\n \t_M_lower_bound_tr(const _Kt& __k) const\n \t{\n@@ -1314,8 +1313,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req =\n-\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req = __has_is_transparent_t<_Compare, _Kt>>\n \titerator\n \t_M_upper_bound_tr(const _Kt& __k)\n \t{\n@@ -1324,8 +1322,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req =\n-\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req = __has_is_transparent_t<_Compare, _Kt>>\n \tconst_iterator\n \t_M_upper_bound_tr(const _Kt& __k) const\n \t{\n@@ -1343,8 +1340,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req =\n-\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req = __has_is_transparent_t<_Compare, _Kt>>\n \tpair<iterator, iterator>\n \t_M_equal_range_tr(const _Kt& __k)\n \t{\n@@ -1354,8 +1350,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req =\n-\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req = __has_is_transparent_t<_Compare, _Kt>>\n \tpair<const_iterator, const_iterator>\n \t_M_equal_range_tr(const _Kt& __k) const\n \t{"}, {"sha": "9a9332f0305dd3147b1c1dc3a4a4a546f14cbbb0", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -941,6 +941,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       count(const key_type& __x) const\n       { return _M_h.count(__x); }\n \n+#if __cplusplus > 201703L\n+      /**\n+       *  @brief  Finds whether an element with the given key exists.\n+       *  @param  __x  Key of elements to be located.\n+       *  @return  True if there is any element with the specified key.\n+       */\n+      bool\n+      contains(const key_type& __x) const\n+      { return _M_h.find(__x) != _M_h.end(); }\n+#endif\n+\n       //@{\n       /**\n        *  @brief Finds a subsequence matching given key.\n@@ -1819,6 +1830,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       count(const key_type& __x) const\n       { return _M_h.count(__x); }\n \n+#if __cplusplus > 201703L\n+      /**\n+       *  @brief  Finds whether an element with the given key exists.\n+       *  @param  __x  Key of elements to be located.\n+       *  @return  True if there is any element with the specified key.\n+       */\n+      bool\n+      contains(const key_type& __x) const\n+      { return _M_h.find(__x) != _M_h.end(); }\n+#endif\n+\n       //@{\n       /**\n        *  @brief Finds a subsequence matching given key."}, {"sha": "4c49ae945fcd321ef1437c8f96175f22dd742406", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -667,6 +667,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       count(const key_type& __x) const\n       { return _M_h.count(__x); }\n \n+#if __cplusplus > 201703L\n+      /**\n+       *  @brief  Finds whether an element with the given key exists.\n+       *  @param  __x  Key of elements to be located.\n+       *  @return  True if there is any element with the specified key.\n+       */\n+      bool\n+      contains(const key_type& __x) const\n+      { return _M_h.find(__x) != _M_h.end(); }\n+#endif\n+\n       //@{\n       /**\n        *  @brief Finds a subsequence matching given key.\n@@ -1445,6 +1456,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       count(const key_type& __x) const\n       { return _M_h.count(__x); }\n \n+#if __cplusplus > 201703L\n+      /**\n+       *  @brief  Finds whether an element with the given key exists.\n+       *  @param  __x  Key of elements to be located.\n+       *  @return  True if there is any element with the specified key.\n+       */\n+      bool\n+      contains(const key_type& __x) const\n+      { return _M_h.find(__x) != _M_h.end(); }\n+#endif\n+\n       //@{\n       /**\n        *  @brief Finds a subsequence matching given key."}, {"sha": "a994fa51246acc7c898481a5ae8740057d3e894d", "filename": "libstdc++-v3/testsuite/23_containers/map/operations/contains.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperations%2Fcontains.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperations%2Fcontains.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperations%2Fcontains.cc?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::map<int, void*> m;\n+  VERIFY( ! m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m[0] = nullptr;\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m[1] = nullptr;\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( m.contains( 1 ) );\n+}\n+\n+struct Zero { };\n+bool operator<(Zero, int i) { return 0 < i; }\n+bool operator<(int i, Zero) { return i < 0; }\n+\n+struct One { };\n+bool operator<(One, int i) { return 1 < i; }\n+bool operator<(int i, One) { return i < 1; }\n+\n+void\n+test02()\n+{\n+  std::map<int, void*, std::less<>> m;\n+  VERIFY( ! m.contains( Zero{} ) );\n+  VERIFY( ! m.contains( One{} ) );\n+  m[0] = nullptr;\n+  VERIFY( m.contains( Zero{} ) );\n+  VERIFY( ! m.contains( One{} ) );\n+  m[1] = nullptr;\n+  VERIFY( m.contains( Zero{} ) );\n+  VERIFY( m.contains( One{} ) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "1f0617db66265b5dbc5936343a1f7935dd34ac8b", "filename": "libstdc++-v3/testsuite/23_containers/multimap/operations/contains.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Foperations%2Fcontains.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Foperations%2Fcontains.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Foperations%2Fcontains.cc?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::multimap<int, void*> m;\n+  VERIFY( ! m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.emplace(0, nullptr);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.emplace(0, nullptr);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.emplace(1, nullptr);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( m.contains( 1 ) );\n+}\n+\n+struct Zero { };\n+bool operator<(Zero, int i) { return 0 < i; }\n+bool operator<(int i, Zero) { return i < 0; }\n+\n+struct One { };\n+bool operator<(One, int i) { return 1 < i; }\n+bool operator<(int i, One) { return i < 1; }\n+\n+void\n+test02()\n+{\n+  std::multimap<int, void*, std::less<>> m;\n+  VERIFY( ! m.contains( Zero{} ) );\n+  VERIFY( ! m.contains( One{} ) );\n+  m.emplace(0, nullptr);\n+  VERIFY( m.contains( Zero{} ) );\n+  VERIFY( ! m.contains( One{} ) );\n+  m.emplace(0, nullptr);\n+  VERIFY( m.contains( Zero{} ) );\n+  VERIFY( ! m.contains( One{} ) );\n+  m.emplace(1, nullptr);\n+  VERIFY( m.contains( Zero{} ) );\n+  VERIFY( m.contains( One{} ) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "09c08112b60fea298cfaf9533fd8e9bb08e944c2", "filename": "libstdc++-v3/testsuite/23_containers/multiset/operations/contains.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Foperations%2Fcontains.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Foperations%2Fcontains.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Foperations%2Fcontains.cc?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::multiset<int> m;\n+  VERIFY( ! m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.emplace(0);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.emplace(0);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.emplace(1);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( m.contains( 1 ) );\n+}\n+\n+struct Zero { };\n+bool operator<(Zero, int i) { return 0 < i; }\n+bool operator<(int i, Zero) { return i < 0; }\n+\n+struct One { };\n+bool operator<(One, int i) { return 1 < i; }\n+bool operator<(int i, One) { return i < 1; }\n+\n+void\n+test02()\n+{\n+  std::multiset<int, std::less<>> m;\n+  VERIFY( ! m.contains( Zero{} ) );\n+  VERIFY( ! m.contains( One{} ) );\n+  m.emplace(0);\n+  VERIFY( m.contains( Zero{} ) );\n+  VERIFY( ! m.contains( One{} ) );\n+  m.emplace(0);\n+  VERIFY( m.contains( Zero{} ) );\n+  VERIFY( ! m.contains( One{} ) );\n+  m.emplace(1);\n+  VERIFY( m.contains( Zero{} ) );\n+  VERIFY( m.contains( One{} ) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "a69701bcbb3f930687ef8a411f2a8f7e2ed75ee1", "filename": "libstdc++-v3/testsuite/23_containers/set/operations/contains.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperations%2Fcontains.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperations%2Fcontains.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperations%2Fcontains.cc?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::set<int> m;\n+  VERIFY( ! m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.insert(0);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.insert(1);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( m.contains( 1 ) );\n+}\n+\n+struct Zero { };\n+bool operator<(Zero, int i) { return 0 < i; }\n+bool operator<(int i, Zero) { return i < 0; }\n+\n+struct One { };\n+bool operator<(One, int i) { return 1 < i; }\n+bool operator<(int i, One) { return i < 1; }\n+\n+void\n+test02()\n+{\n+  std::set<int, std::less<>> m;\n+  VERIFY( ! m.contains( Zero{} ) );\n+  VERIFY( ! m.contains( One{} ) );\n+  m.insert(0);\n+  VERIFY( m.contains( Zero{} ) );\n+  VERIFY( ! m.contains( One{} ) );\n+  m.insert(1);\n+  VERIFY( m.contains( Zero{} ) );\n+  VERIFY( m.contains( One{} ) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "a3b3820508507b1b7b41b508d137fc04ee7094a3", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/operations/contains.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Foperations%2Fcontains.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Foperations%2Fcontains.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Foperations%2Fcontains.cc?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::unordered_map<int, void*> m;\n+  VERIFY( ! m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m[0] = nullptr;\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m[1] = nullptr;\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( m.contains( 1 ) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "2e2f383e4908f9dc6d88453292a42b3ef45aa9e7", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/operations/contains.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Foperations%2Fcontains.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Foperations%2Fcontains.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Foperations%2Fcontains.cc?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::unordered_multimap<int, void*> m;\n+  VERIFY( ! m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.emplace(0, nullptr);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.emplace(0, nullptr);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.emplace(1, nullptr);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( m.contains( 1 ) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "9c32e2d5d3f19d183a9bb05eaa95b66acd8a6c95", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/operations/contains.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Foperations%2Fcontains.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Foperations%2Fcontains.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Foperations%2Fcontains.cc?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::unordered_multiset<int> m;\n+  VERIFY( ! m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.emplace(0);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.emplace(0);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.emplace(1);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( m.contains( 1 ) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "b6e2d0e580a0ebf1faea87edc3e9deb05b428ee2", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/operations/contains.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Foperations%2Fcontains.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3adea09eea448dde8d2c41807845cca6c4f30e89/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Foperations%2Fcontains.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Foperations%2Fcontains.cc?ref=3adea09eea448dde8d2c41807845cca6c4f30e89", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::unordered_set<int> m;\n+  VERIFY( ! m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.insert(0);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( ! m.contains( 1 ) );\n+  m.insert(1);\n+  VERIFY( m.contains( 0 ) );\n+  VERIFY( m.contains( 1 ) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}