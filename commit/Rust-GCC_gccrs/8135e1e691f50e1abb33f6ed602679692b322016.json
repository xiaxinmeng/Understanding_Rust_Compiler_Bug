{"sha": "8135e1e691f50e1abb33f6ed602679692b322016", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEzNWUxZTY5MWY1MGUxYWJiMzNmNmVkNjAyNjc5NjkyYjMyMjAxNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2012-10-15T14:22:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-10-15T14:22:37Z"}, "message": "data-streamer.h (bp_pack_string_with_length): New function.\n\n2012-10-15  Richard Biener  <rguenther@suse.de>\n\n\t* data-streamer.h (bp_pack_string_with_length): New function.\n\t(bp_pack_string): Likewise.\n\t(bp_unpack_indexed_string): Likewise.\n\t(bp_unpack_string): Likewise.\n\t* data-streamer-out.c (bp_pack_string_with_length): Likewise.\n\t(bp_pack_string): Likewise.\n\t* data-streamer-in.c (bp_unpack_indexed_string): Likewise.\n\t(bp_unpack_string): Likewise.\n\t* tree-streamer-out.c (pack_ts_translation_unit_decl_value_fields):\n\tPack TRANSLATION_UNIT_LANGUAGE here, not ...\n\t(write_ts_translation_unit_decl_tree_pointers): ... here.  Remove.\n\t(streamer_pack_tree_bitfields): Adjust.\n\t(streamer_write_tree_body): Likewise.\n\t* tree-streamer-in.c (unpack_ts_translation_unit_decl_value_fields):\n\tUnpack TRANSLATION_UNIT_LANGUAGE here, not ...\n\t(lto_input_ts_translation_unit_decl_tree_pointers): ... here.  Remove.\n\t(unpack_value_fields): Adjust.\n\t(streamer_read_tree_body): Likewise.\n\nFrom-SVN: r192460", "tree": {"sha": "29792e758bcfc639546baec2d11f930c80e0612b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29792e758bcfc639546baec2d11f930c80e0612b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8135e1e691f50e1abb33f6ed602679692b322016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8135e1e691f50e1abb33f6ed602679692b322016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8135e1e691f50e1abb33f6ed602679692b322016", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8135e1e691f50e1abb33f6ed602679692b322016/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1183dc2cd8631233db425d7310fd930f335bfeee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1183dc2cd8631233db425d7310fd930f335bfeee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1183dc2cd8631233db425d7310fd930f335bfeee"}], "stats": {"total": 130, "additions": 99, "deletions": 31}, "files": [{"sha": "2905d694f77d4a3f4f52711ed794d8928a2b27dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8135e1e691f50e1abb33f6ed602679692b322016/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8135e1e691f50e1abb33f6ed602679692b322016/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8135e1e691f50e1abb33f6ed602679692b322016", "patch": "@@ -1,3 +1,24 @@\n+2012-10-15  Richard Biener  <rguenther@suse.de>\n+\n+\t* data-streamer.h (bp_pack_string_with_length): New function.\n+\t(bp_pack_string): Likewise.\n+\t(bp_unpack_indexed_string): Likewise.\n+\t(bp_unpack_string): Likewise.\n+\t* data-streamer-out.c (bp_pack_string_with_length): Likewise.\n+\t(bp_pack_string): Likewise.\n+\t* data-streamer-in.c (bp_unpack_indexed_string): Likewise.\n+\t(bp_unpack_string): Likewise.\n+\t* tree-streamer-out.c (pack_ts_translation_unit_decl_value_fields):\n+\tPack TRANSLATION_UNIT_LANGUAGE here, not ...\n+\t(write_ts_translation_unit_decl_tree_pointers): ... here.  Remove.\n+\t(streamer_pack_tree_bitfields): Adjust.\n+\t(streamer_write_tree_body): Likewise.\n+\t* tree-streamer-in.c (unpack_ts_translation_unit_decl_value_fields):\n+\tUnpack TRANSLATION_UNIT_LANGUAGE here, not ...\n+\t(lto_input_ts_translation_unit_decl_tree_pointers): ... here.  Remove.\n+\t(unpack_value_fields): Adjust.\n+\t(streamer_read_tree_body): Likewise.\n+\n 2012-10-15  J\"orn Rennecke  <joern.rennecke@arc.com>\n \n \t* genoutput.c (process_template): Process '*' in '@' alternatives."}, {"sha": "bcd6c08a6915abf119cd25493468ce136ce5316e", "filename": "gcc/data-streamer-in.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8135e1e691f50e1abb33f6ed602679692b322016/gcc%2Fdata-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8135e1e691f50e1abb33f6ed602679692b322016/gcc%2Fdata-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer-in.c?ref=8135e1e691f50e1abb33f6ed602679692b322016", "patch": "@@ -86,6 +86,35 @@ streamer_read_string (struct data_in *data_in, struct lto_input_block *ib)\n }\n \n \n+/* Read a string from the string table in DATA_IN using the bitpack BP.\n+   Write the length to RLEN.  */\n+\n+const char *\n+bp_unpack_indexed_string (struct data_in *data_in,\n+\t\t\t  struct bitpack_d *bp, unsigned int *rlen)\n+{\n+  return string_for_index (data_in, bp_unpack_var_len_unsigned (bp), rlen);\n+}\n+\n+\n+/* Read a NULL terminated string from the string table in DATA_IN.  */\n+\n+const char *\n+bp_unpack_string (struct data_in *data_in, struct bitpack_d *bp)\n+{\n+  unsigned int len;\n+  const char *ptr;\n+\n+  ptr = bp_unpack_indexed_string (data_in, bp, &len);\n+  if (!ptr)\n+    return NULL;\n+  if (ptr[len - 1] != '\\0')\n+    internal_error (\"bytecode stream: found non-null terminated string\");\n+\n+  return ptr;\n+}\n+\n+\n /* Read an unsigned HOST_WIDE_INT number from IB.  */\n \n unsigned HOST_WIDE_INT"}, {"sha": "aae4d471fb6756b348da3a629e1688e5d70a573e", "filename": "gcc/data-streamer-out.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8135e1e691f50e1abb33f6ed602679692b322016/gcc%2Fdata-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8135e1e691f50e1abb33f6ed602679692b322016/gcc%2Fdata-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer-out.c?ref=8135e1e691f50e1abb33f6ed602679692b322016", "patch": "@@ -115,6 +115,39 @@ streamer_write_string (struct output_block *ob,\n }\n \n \n+/* Output STRING of LEN characters to the string table in OB.  Then\n+   put the index into BP.\n+   When PERSISTENT is set, the string S is supposed to not change during\n+   duration of the OB and thus OB can keep pointer into it.  */\n+\n+void\n+bp_pack_string_with_length (struct output_block *ob, struct bitpack_d *bp,\n+\t\t\t    const char *s, unsigned int len, bool persistent)\n+{\n+  unsigned index = 0;\n+  if (s)\n+    index = streamer_string_index (ob, s, len, persistent);\n+  bp_pack_var_len_unsigned (bp, index);\n+}\n+\n+\n+/* Output the '\\0' terminated STRING to the string\n+   table in OB.  Then put the index onto the bitpack BP.\n+   When PERSISTENT is set, the string S is supposed to not change during\n+   duration of the OB and thus OB can keep pointer into it.  */\n+\n+void\n+bp_pack_string (struct output_block *ob, struct bitpack_d *bp,\n+\t\tconst char *s, bool persistent)\n+{\n+  unsigned index = 0;\n+  if (s)\n+    index = streamer_string_index (ob, s, strlen (s) + 1, persistent);\n+  bp_pack_var_len_unsigned (bp, index);\n+}\n+\n+\n+\n /* Write a zero to the output stream.  */\n \n void"}, {"sha": "705713cd1bd7589d2889ce8834580718aa4b7572", "filename": "gcc/data-streamer.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8135e1e691f50e1abb33f6ed602679692b322016/gcc%2Fdata-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8135e1e691f50e1abb33f6ed602679692b322016/gcc%2Fdata-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer.h?ref=8135e1e691f50e1abb33f6ed602679692b322016", "patch": "@@ -72,6 +72,10 @@ unsigned streamer_string_index (struct output_block *, const char *,\n void streamer_write_string_with_length (struct output_block *,\n \t\t\t\t\tstruct lto_output_stream *,\n \t\t\t\t\tconst char *, unsigned int, bool);\n+void bp_pack_string_with_length (struct output_block *, struct bitpack_d *,\n+\t\t\t\t const char *, unsigned int, bool);\n+void bp_pack_string (struct output_block *, struct bitpack_d *,\n+\t\t     const char *, bool);\n void streamer_write_uhwi_stream (struct lto_output_stream *,\n \t\t\t\t unsigned HOST_WIDE_INT);\n void streamer_write_hwi_stream (struct lto_output_stream *, HOST_WIDE_INT);\n@@ -82,6 +86,9 @@ const char *streamer_read_string (struct data_in *, struct lto_input_block *);\n const char *streamer_read_indexed_string (struct data_in *,\n \t\t\t\t\t  struct lto_input_block *,\n \t\t\t\t\t  unsigned int *);\n+const char *bp_unpack_indexed_string (struct data_in *, struct bitpack_d *,\n+\t\t\t\t      unsigned int *);\n+const char *bp_unpack_string (struct data_in *, struct bitpack_d *);\n unsigned HOST_WIDE_INT streamer_read_uhwi (struct lto_input_block *);\n HOST_WIDE_INT streamer_read_hwi (struct lto_input_block *);\n "}, {"sha": "1a615f1517463da4e2f5150c99101c68fe856ca5", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8135e1e691f50e1abb33f6ed602679692b322016/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8135e1e691f50e1abb33f6ed602679692b322016/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=8135e1e691f50e1abb33f6ed602679692b322016", "patch": "@@ -365,8 +365,11 @@ unpack_ts_block_value_fields (struct data_in *data_in,\n    structure of expression EXPR from bitpack BP.  */\n \n static void\n-unpack_ts_translation_unit_decl_value_fields (struct bitpack_d *bp ATTRIBUTE_UNUSED, tree expr ATTRIBUTE_UNUSED)\n+unpack_ts_translation_unit_decl_value_fields (struct data_in *data_in,\n+\t\t\t\t\t      struct bitpack_d *bp, tree expr)\n {\n+  TRANSLATION_UNIT_LANGUAGE (expr) = xstrdup (bp_unpack_string (data_in, bp));\n+  VEC_safe_push (tree, gc, all_translation_units, expr);\n }\n \n /* Unpack a TS_TARGET_OPTION tree from BP into EXPR.  */\n@@ -444,7 +447,7 @@ unpack_value_fields (struct data_in *data_in, struct bitpack_d *bp, tree expr)\n     unpack_ts_block_value_fields (data_in, bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n-    unpack_ts_translation_unit_decl_value_fields (bp, expr);\n+    unpack_ts_translation_unit_decl_value_fields (data_in, bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n     unpack_ts_target_option (bp, expr);\n@@ -942,17 +945,6 @@ lto_input_ts_constructor_tree_pointers (struct lto_input_block *ib,\n }\n \n \n-/* Input a TS_TRANSLATION_UNIT_DECL tree from IB and DATA_IN into EXPR.  */\n-\n-static void\n-lto_input_ts_translation_unit_decl_tree_pointers (struct lto_input_block *ib,\n-\t\t\t\t\t\t  struct data_in *data_in,\n-\t\t\t\t\t\t  tree expr)\n-{\n-  TRANSLATION_UNIT_LANGUAGE (expr) = xstrdup (streamer_read_string (data_in, ib));\n-  VEC_safe_push (tree, gc, all_translation_units, expr);\n-}\n-\n /* Read all pointer fields in EXPR from input block IB.  DATA_IN\n    contains tables and descriptors for the file being read.  */\n \n@@ -1014,9 +1006,6 @@ streamer_read_tree_body (struct lto_input_block *ib, struct data_in *data_in,\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     lto_input_ts_constructor_tree_pointers (ib, data_in, expr);\n-\n-  if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n-    lto_input_ts_translation_unit_decl_tree_pointers (ib, data_in, expr);\n }\n \n "}, {"sha": "dcde16951d984f2bf720598b99940eeb9a438cfd", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8135e1e691f50e1abb33f6ed602679692b322016/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8135e1e691f50e1abb33f6ed602679692b322016/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=8135e1e691f50e1abb33f6ed602679692b322016", "patch": "@@ -316,8 +316,10 @@ pack_ts_block_value_fields (struct output_block *ob,\n    of expression EXPR into bitpack BP.  */\n \n static void\n-pack_ts_translation_unit_decl_value_fields (struct bitpack_d *bp ATTRIBUTE_UNUSED, tree expr ATTRIBUTE_UNUSED)\n+pack_ts_translation_unit_decl_value_fields (struct output_block *ob,\n+\t\t\t\t\t    struct bitpack_d *bp, tree expr)\n {\n+  bp_pack_string (ob, bp, TRANSLATION_UNIT_LANGUAGE (expr), true);\n }\n \n /* Pack a TS_TARGET_OPTION tree in EXPR to BP.  */\n@@ -402,7 +404,7 @@ streamer_pack_tree_bitfields (struct output_block *ob,\n     pack_ts_block_value_fields (ob, bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n-    pack_ts_translation_unit_decl_value_fields (bp, expr);\n+    pack_ts_translation_unit_decl_value_fields (ob, bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n     pack_ts_target_option (bp, expr);\n@@ -819,16 +821,6 @@ write_ts_constructor_tree_pointers (struct output_block *ob, tree expr,\n     }\n }\n \n-/* Write a TS_TRANSLATION_UNIT_DECL tree in EXPR to OB.  */\n-\n-static void\n-write_ts_translation_unit_decl_tree_pointers (struct output_block *ob,\n-\t\t\t\t\t      tree expr)\n-{\n-  streamer_write_string (ob, ob->main_stream,\n-\t\t\t TRANSLATION_UNIT_LANGUAGE (expr), true);\n-}\n-\n /* Write all pointer fields in EXPR to output block OB.  If REF_P is true,\n    the leaves of EXPR are emitted as references.  */\n \n@@ -889,9 +881,6 @@ streamer_write_tree_body (struct output_block *ob, tree expr, bool ref_p)\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     write_ts_constructor_tree_pointers (ob, expr, ref_p);\n-\n-  if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n-    write_ts_translation_unit_decl_tree_pointers (ob, expr);\n }\n \n "}]}