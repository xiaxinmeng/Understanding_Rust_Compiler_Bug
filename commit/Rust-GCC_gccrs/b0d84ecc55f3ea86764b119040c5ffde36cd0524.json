{"sha": "b0d84ecc55f3ea86764b119040c5ffde36cd0524", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBkODRlY2M1NWYzZWE4Njc2NGIxMTkwNDBjNWZmZGUzNmNkMDUyNA==", "commit": {"author": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-03-23T14:42:20Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2020-03-23T14:42:20Z"}, "message": "fortran: ICE in gfc_match_assignment PR93600\n\nThis patch builds on the original patch by Steve Kargl that fixed the\nICE and produced an \"Unclassifiable statement at (1)\" error. The\nprocessing of parameter variables now correctly handles zero length\narrays used with %kind and %len. A side affect is that \"Unclassifiable\"\nerror now says \"Assignment to constant expression at (1)\". It also\nfixes PR93365.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/93600\n\t* expr.c (simplify_parameter_variable): Check whether the ref\n\tchain contains INQUIRY_LEN or INQUIRY_KIND and set inquiry\n\tboolean. When an empty array has been identified and a new\n\tnew EXPR_ARRAY expression has been created only return that\n\texpression if inquiry is not set. This allows the new\n\texpression to drop through to be simplified into a\n\tEXPR_CONSTANT representing %kind or %len.\n\t* match.c (gfc_match_assignment): If lvalue doesn't have a\n\tsymtree free both lvalue and rvalue expressions and return\n\tan error.\n\t* resolv.c (gfc_resolve_ref): Ensure that code to handle\n\tINQUIRY_LEN is only performed for arrays with deferred types.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/93365\n\tPR fortran/93600\n\t* gfortran.dg/pr93365.f90: New test.\n\t* gfortran.dg/pr93600_1.f90: New test.\n\t* gfortran.dg/pr93600_2.f90: New test.", "tree": {"sha": "73d9ff77b120458df6091a1c83710812d515c6ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73d9ff77b120458df6091a1c83710812d515c6ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0d84ecc55f3ea86764b119040c5ffde36cd0524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d84ecc55f3ea86764b119040c5ffde36cd0524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0d84ecc55f3ea86764b119040c5ffde36cd0524", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d84ecc55f3ea86764b119040c5ffde36cd0524/comments", "author": null, "committer": null, "parents": [{"sha": "4897bb0045dd68474176be9aafb4d77bac4b363a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4897bb0045dd68474176be9aafb4d77bac4b363a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4897bb0045dd68474176be9aafb4d77bac4b363a"}], "stats": {"total": 103, "additions": 94, "deletions": 9}, "files": [{"sha": "05915791d865b827ab5c699dbf2708dde5d3c5e7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b0d84ecc55f3ea86764b119040c5ffde36cd0524", "patch": "@@ -1,3 +1,20 @@\n+2020-03-23  Mark Eggleston  <mark.eggleston@codethink.com>\n+\tSteven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/93600\n+\t* expr.c (simplify_parameter_variable): Check whether the ref\n+\tchain contains INQUIRY_LEN or INQUIRY_KIND and set inquiry\n+\tboolean. When an empty array has been identified and a new\n+\tnew EXPR_ARRAY expression has been created only return that\n+\texpression if inquiry is not set. This allows the new\n+\texpression to drop through to be simplified into a\n+\tEXPR_CONSTANT representing %kind or %len.\n+\t* matc.c (gfc_match_assignment): If lvalue doesn't have a\n+\tsymtree free both lvalue and rvalue expressions and return\n+\tan error.\n+\t* resolv.c (gfc_resolve_ref): Ensure that code to handle\n+\tINQUIRY_LEN is only performed for arrays with deferred types.\n+\n 2020-03-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* class.c (generate_finalization_wrapper): Fix up duplicated word"}, {"sha": "08b0a92655ad6be834989e1a64f4e9d1c0113158", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=b0d84ecc55f3ea86764b119040c5ffde36cd0524", "patch": "@@ -2057,6 +2057,18 @@ simplify_parameter_variable (gfc_expr *p, int type)\n     }\n   gfc_expression_rank (p);\n \n+  /* Is this an inquiry?  */\n+  bool inquiry = false;\n+  gfc_ref* ref = p->ref;\n+  while (ref)\n+    {\n+      if (ref->type == REF_INQUIRY)\n+\tbreak;\n+      ref = ref->next;\n+    }\n+  if (ref && ref->type == REF_INQUIRY)\n+    inquiry = ref->u.i == INQUIRY_LEN || ref->u.i == INQUIRY_KIND;\n+\n   if (gfc_is_size_zero_array (p))\n     {\n       if (p->expr_type == EXPR_ARRAY)\n@@ -2069,15 +2081,22 @@ simplify_parameter_variable (gfc_expr *p, int type)\n       e->value.constructor = NULL;\n       e->shape = gfc_copy_shape (p->shape, p->rank);\n       e->where = p->where;\n-      gfc_replace_expr (p, e);\n-      return true;\n+      /* If %kind and %len are not used then we're done, otherwise\n+\t drop through for simplification.  */\n+      if (!inquiry)\n+\t{\n+\t  gfc_replace_expr (p, e);\n+\t  return true;\n+\t}\n     }\n+  else\n+    {\n+      e = gfc_copy_expr (p->symtree->n.sym->value);\n+      if (e == NULL)\n+\treturn false;\n \n-  e = gfc_copy_expr (p->symtree->n.sym->value);\n-  if (e == NULL)\n-    return false;\n-\n-  e->rank = p->rank;\n+      e->rank = p->rank;\n+    }\n \n   if (e->ts.type == BT_CHARACTER && e->ts.u.cl == NULL)\n     e->ts.u.cl = gfc_new_charlen (gfc_current_ns, p->ts.u.cl);\n@@ -2126,7 +2145,6 @@ gfc_simplify_expr (gfc_expr *p, int type)\n   gfc_actual_arglist *ap;\n   gfc_intrinsic_sym* isym = NULL;\n \n-\n   if (p == NULL)\n     return true;\n "}, {"sha": "3a0c097325fc0d6af86585f1e030833bfc05e88e", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=b0d84ecc55f3ea86764b119040c5ffde36cd0524", "patch": "@@ -1373,6 +1373,14 @@ gfc_match_assignment (void)\n       return m;\n     }\n \n+  if (!lvalue->symtree)\n+    {\n+      gfc_free_expr (lvalue);\n+      gfc_free_expr (rvalue);\n+      return MATCH_ERROR;\n+    }\n+\n+\n   gfc_set_sym_referenced (lvalue->symtree->n.sym);\n \n   new_st.op = EXEC_ASSIGN;"}, {"sha": "2dcb261fc7148327c07f86f74ab992e6c5881d03", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=b0d84ecc55f3ea86764b119040c5ffde36cd0524", "patch": "@@ -5314,7 +5314,7 @@ gfc_resolve_ref (gfc_expr *expr)\n \tcase REF_INQUIRY:\n \t  /* Implement requirement in note 9.7 of F2018 that the result of the\n \t     LEN inquiry be a scalar.  */\n-\t  if (ref->u.i == INQUIRY_LEN && array_ref)\n+\t  if (ref->u.i == INQUIRY_LEN && array_ref && expr->ts.deferred)\n \t    {\n \t      array_ref->u.ar.type = AR_ELEMENT;\n \t      expr->rank = 0;"}, {"sha": "3d54e64d05b60cfdeafcfbb9612253cf95af9189", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0d84ecc55f3ea86764b119040c5ffde36cd0524", "patch": "@@ -1,3 +1,11 @@\n+2020-03-23  Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+\tPR fortran/93365\n+\tPR fortran/93600\n+\t* gfortran.dg/pr93365.f90: New test.\n+\t* gfortran.dg/pr93600_1.f90: New test.\n+\t* gfortran.dg/pr93600_2.f90: New test.\n+\n 2020-03-23  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* lib/target-supports.exp (check_effective_target_offload_gcn):"}, {"sha": "74144d6a9ee581b5b8eb05dfcea723128499ead1", "filename": "gcc/testsuite/gfortran.dg/pr93365.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93365.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93365.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93365.f90?ref=b0d84ecc55f3ea86764b119040c5ffde36cd0524", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+\n+program p\n+   logical, parameter :: a(0) = .true.\n+   real, parameter :: b(0) = 0\n+   complex, parameter :: c(0) = 0\n+   integer :: d\n+   data d /a%kind/\n+   data e /b%kind/\n+   data f /c%kind/\n+   if (d .ne. kind(a)) stop 1\n+   if (e .ne. kind(b)) stop 2\n+   if (f .ne. kind(c)) stop 3\n+end\n+"}, {"sha": "02bb76fb77cbaddde5b121eab7129b8adedc188a", "filename": "gcc/testsuite/gfortran.dg/pr93600_1.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93600_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93600_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93600_1.f90?ref=b0d84ecc55f3ea86764b119040c5ffde36cd0524", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+\n+program p\n+  integer, parameter :: a(0) = 0\n+  character(0), parameter :: b(0) = ''\n+  a%kind = 1  ! { dg-error \"Assignment to a constant expression\" }\n+  b%len = 'a' ! { dg-error \"Assignment to a constant expression\" }\n+end program\n+"}, {"sha": "1fb8c1b97e2da14c64151c0f10fc0660a497eddb", "filename": "gcc/testsuite/gfortran.dg/pr93600_2.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93600_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d84ecc55f3ea86764b119040c5ffde36cd0524/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93600_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93600_2.f90?ref=b0d84ecc55f3ea86764b119040c5ffde36cd0524", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do run }\n+\n+program p\n+  integer, parameter :: a(0) = 0\n+  character(0), parameter :: b(0) = ''\n+  integer :: c\n+  if (a%kind.ne.kind(c)) stop 1\n+  if (b%len.ne.0) stop 2\n+end program\n+"}]}