{"sha": "c0d3ac4db65a7c4ada6f1e63f51311cfa04d309b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBkM2FjNGRiNjVhN2M0YWRhNmYxZTYzZjUxMzExY2ZhMDRkMzA5Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-17T22:12:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-17T22:12:05Z"}, "message": "(simplify_set): Use rtx_equal_p to compare cc_use and its setter.\n\n(make_extraction): Don't put a subreg around a register if it is already in\nthe correct mode.\n\nFrom-SVN: r7322", "tree": {"sha": "bcdb3cd9fe29f6784bc9b7edd67d0cc512a31be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcdb3cd9fe29f6784bc9b7edd67d0cc512a31be9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0d3ac4db65a7c4ada6f1e63f51311cfa04d309b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d3ac4db65a7c4ada6f1e63f51311cfa04d309b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0d3ac4db65a7c4ada6f1e63f51311cfa04d309b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d3ac4db65a7c4ada6f1e63f51311cfa04d309b/comments", "author": null, "committer": null, "parents": [{"sha": "10670d47c659d4280d459ebd0231f2395e29505f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10670d47c659d4280d459ebd0231f2395e29505f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10670d47c659d4280d459ebd0231f2395e29505f"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "a800a27553e7eded203f0f7b59c25fbb093e981c", "filename": "gcc/combine.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d3ac4db65a7c4ada6f1e63f51311cfa04d309b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d3ac4db65a7c4ada6f1e63f51311cfa04d309b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c0d3ac4db65a7c4ada6f1e63f51311cfa04d309b", "patch": "@@ -4210,7 +4210,7 @@ simplify_set (x)\n       && (cc_use = find_single_use (dest, subst_insn, &other_insn)) != 0\n       && (undobuf.other_insn == 0 || other_insn == undobuf.other_insn)\n       && GET_RTX_CLASS (GET_CODE (*cc_use)) == '<'\n-      && XEXP (*cc_use, 0) == dest)\n+      && rtx_equal_p (XEXP (*cc_use, 0), dest))\n     {\n       enum rtx_code old_code = GET_CODE (*cc_use);\n       enum rtx_code new_code;\n@@ -5071,14 +5071,20 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n \t  MEM_IN_STRUCT_P (new) = MEM_IN_STRUCT_P (inner);\n \t}\n       else if (GET_CODE (inner) == REG)\n-\t/* We can't call gen_lowpart_for_combine here since we always want\n-\t   a SUBREG and it would sometimes return a new hard register.  */\n-\tnew = gen_rtx (SUBREG, tmode, inner,\n-\t\t       (WORDS_BIG_ENDIAN\n-\t\t\t&& GET_MODE_SIZE (inner_mode) > UNITS_PER_WORD\n-\t\t\t? ((GET_MODE_SIZE (inner_mode) - GET_MODE_SIZE (tmode))\n-\t\t\t   / UNITS_PER_WORD)\n-\t\t\t: 0));\n+\t{\n+\t  /* We can't call gen_lowpart_for_combine here since we always want\n+\t     a SUBREG and it would sometimes return a new hard register.  */\n+\t  if (tmode != inner_mode)\n+\t    new = gen_rtx (SUBREG, tmode, inner,\n+\t\t\t   (WORDS_BIG_ENDIAN\n+\t\t\t    && GET_MODE_SIZE (inner_mode) > UNITS_PER_WORD\n+\t\t\t    ? ((GET_MODE_SIZE (inner_mode)\n+\t\t\t\t- GET_MODE_SIZE (tmode))\n+\t\t\t       / UNITS_PER_WORD)\n+\t\t\t    : 0));\n+\t  else\n+\t    new = inner;\n+\t}\n       else\n \tnew = force_to_mode (inner, tmode,\n \t\t\t     len >= HOST_BITS_PER_WIDE_INT"}]}