{"sha": "d1405d8907f08e1346a034e488909c7d97cd74c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE0MDVkODkwN2YwOGUxMzQ2YTAzNGU0ODg5MDljN2Q5N2NkNzRjNg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-08-12T21:44:14Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-08-12T21:44:14Z"}, "message": "(RAP_REG, RETURN_ADDRESS_POINTER_REGNUM): Define.\n\n(ELIMINABLE_REGS): Add RETURN_ADDRESS_POINTER_REGNUM support.\n(RETURN_ADDR_RTX): Define.\n(REGISTER_NAMES): Add rap.\n\nFrom-SVN: r12628", "tree": {"sha": "4d7ddf79008cbdff775a22cf310b239e044e5ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d7ddf79008cbdff775a22cf310b239e044e5ade"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1405d8907f08e1346a034e488909c7d97cd74c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1405d8907f08e1346a034e488909c7d97cd74c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1405d8907f08e1346a034e488909c7d97cd74c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1405d8907f08e1346a034e488909c7d97cd74c6/comments", "author": null, "committer": null, "parents": [{"sha": "2afeea0fa3280a0fc50945b4d4c3eec30475a0c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afeea0fa3280a0fc50945b4d4c3eec30475a0c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2afeea0fa3280a0fc50945b4d4c3eec30475a0c6"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "a0220f54c338768ff00673681a3babfe78507580", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1405d8907f08e1346a034e488909c7d97cd74c6/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1405d8907f08e1346a034e488909c7d97cd74c6/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=d1405d8907f08e1346a034e488909c7d97cd74c6", "patch": "@@ -267,6 +267,7 @@ do {\t\t\t\t\t\t\t\t\\\n \tmach\t\tmultiply/accumulate result, high part\n \tmacl\t\tmultiply/accumulate result, low part.\n \tfpul\t\tfp/int communication register\n+\trap\t\treturn address pointer register\n \tfr0\t\tfp arg return\n \tfr1..fr3\tscratch floating point registers\n \tfr4..fr11\tfp args in\n@@ -286,7 +287,7 @@ do {\t\t\t\t\t\t\t\t\\\n #define MACL_REG 21\n #define SPECIAL_REG(REGNO) ((REGNO) >= 18 && (REGNO) <= 21)\n #define FPUL_REG 22\n-/* Number 23 is unused.  Reserved for future expansion.  */\n+#define RAP_REG 23\n #define FIRST_FP_REG 24\n #define LAST_FP_REG 39\n \n@@ -372,6 +373,10 @@ do {\t\t\t\t\t\t\t\t\\\n /* Base register for access to local variables of the function.  */\n #define FRAME_POINTER_REGNUM\t14\n \n+/* Fake register that holds the address on the stack of the\n+   current function's return address.  */\n+#define RETURN_ADDRESS_POINTER_REGNUM 23\n+\n /* Value should be nonzero if functions must have frame pointers.\n    Zero means the frame pointer need not be set up (and parms may be accessed\n    via the stack pointer) in functions that seem suitable.  */\n@@ -390,10 +395,12 @@ do {\t\t\t\t\t\t\t\t\\\n    followed by \"to\".  Eliminations of the same \"from\" register are listed\n    in order of preference.  */\n \n-#define ELIMINABLE_REGS\t\t\t\t\\\n-{{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n- { ARG_POINTER_REGNUM,   STACK_POINTER_REGNUM},\t\\\n- { ARG_POINTER_REGNUM,   FRAME_POINTER_REGNUM},}\n+#define ELIMINABLE_REGS\t\t\t\t\t\t\\\n+{{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\\\n+ { RETURN_ADDRESS_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n+ { RETURN_ADDRESS_POINTER_REGNUM, FRAME_POINTER_REGNUM},\t\\\n+ { ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\\\n+ { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},}\n \n /* Given FROM and TO register numbers, say whether this elimination\n    is allowed.  */\n@@ -846,6 +853,16 @@ extern int current_function_anonymous_args;\n   emit_move_insn (gen_rtx (MEM, SImode, plus_constant ((TRAMP), 12)),\t\\\n \t\t  (FNADDR));\t\t\t\t\t\t\\\n }\n+\n+/* A C expression whose value is RTL representing the value of the return\n+   address for the frame COUNT steps up from the current frame.\n+   FRAMEADDR is already the frame pointer of the COUNT frame, so we\n+   can ignore COUNT.  */\n+\n+#define RETURN_ADDR_RTX(COUNT, FRAME)\t\\\n+  ((COUNT == 0)\t\t\t\t\\\n+   ? gen_rtx (MEM, Pmode, gen_rtx (REG, Pmode, RETURN_ADDRESS_POINTER_REGNUM)) \\\n+   : (rtx) 0)\n \f\n /* Generate necessary RTL for __builtin_saveregs().\n    ARGLIST is the argument list; see expr.c.  */\n@@ -1333,7 +1350,7 @@ dtors_section()\t\t\t\t\t\t\t\\\n {\t\t\t\t                   \t\\\n   \"r0\", \"r1\", \"r2\",  \"r3\",  \"r4\",  \"r5\",  \"r6\",  \"r7\", \t\\\n   \"r8\", \"r9\", \"r10\", \"r11\", \"r12\", \"r13\", \"r14\", \"r15\",\t\\\n-  \"ap\", \"pr\", \"t\",  \"gbr\", \"mach\",\"macl\", \"fpul\", \"X\",  \\\n+  \"ap\", \"pr\", \"t\",  \"gbr\", \"mach\",\"macl\", \"fpul\",\"rap\", \\\n   \"fr0\",\"fr1\",\"fr2\", \"fr3\", \"fr4\", \"fr5\", \"fr6\", \"fr7\", \\\n   \"fr8\",\"fr9\",\"fr10\",\"fr11\",\"fr12\",\"fr13\",\"fr14\",\"fr15\",\\\n }"}]}