{"sha": "9dc79c6f4747cc020280f66605049387b67061fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRjNzljNmY0NzQ3Y2MwMjAyODBmNjY2MDUwNDkzODdiNjcwNjFmZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "2000-07-03T18:02:13Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-07-03T18:02:13Z"}, "message": "Fix peepholes to prevent pre-/post- increment addressing from clobbering the\nsource/destination register.\n\nFrom-SVN: r34848", "tree": {"sha": "67ba9d4278bc8358db120708434cddc70c5fa466", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67ba9d4278bc8358db120708434cddc70c5fa466"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dc79c6f4747cc020280f66605049387b67061fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc79c6f4747cc020280f66605049387b67061fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dc79c6f4747cc020280f66605049387b67061fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dc79c6f4747cc020280f66605049387b67061fe/comments", "author": null, "committer": null, "parents": [{"sha": "c4984bad36ef142b95331ca1552b7498fa78f019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4984bad36ef142b95331ca1552b7498fa78f019", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4984bad36ef142b95331ca1552b7498fa78f019"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "900ca82fede0abddc11df28d1789e82ee0f94c71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc79c6f4747cc020280f66605049387b67061fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc79c6f4747cc020280f66605049387b67061fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9dc79c6f4747cc020280f66605049387b67061fe", "patch": "@@ -1,3 +1,9 @@\n+2000-07-03  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/arm/arm.md: Fix post increment and pre increment\n+\tpeepholes so that they do not generate UNPREDICATBLE opcodes.\n+\t(ie ones where the increment clobbers the source/destination).\n+\n 2000-07-01  Marek Michalkiewicz  <marekm@linux.org.pl>\n \n \t* config/avr/avr.c (out_adj_frame_ptr): Make \"frame pointer"}, {"sha": "0b75a0e41ccb663c07bccd344bdd51f89fd2d823", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dc79c6f4747cc020280f66605049387b67061fe/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dc79c6f4747cc020280f66605049387b67061fe/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=9dc79c6f4747cc020280f66605049387b67061fe", "patch": "@@ -7701,33 +7701,40 @@\n ; It doesn't seem worth adding peepholes for anything but the most common\n ; cases since, unlike combine, the increment must immediately follow the load\n ; for this pattern to match.\n-; When loading we must watch to see that the base register isn't trampled by\n-; the load.  In such cases this isn't a post-inc expression.\n+; We must watch to see that the source/destination register isn't also the\n+; same as the base address register, and that if the index is a register,\n+; that it is not the same as the base address register.  In such cases the\n+; instruction that we would generate would have UNPREDICTABLE behaviour so \n+; we cannot use it.\n \n (define_peephole\n   [(set (mem:QI (match_operand:SI 0 \"s_register_operand\" \"+r\"))\n \t(match_operand:QI 2 \"s_register_operand\" \"r\"))\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0) (match_operand:SI 1 \"index_operand\" \"rJ\")))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM\n+   && (REGNO (operands[2]) != REGNO (operands[0]))\n+   && (GET_CODE (operands[1]) != REG || (REGNO (operands[1]) != REGNO (operands[0])))\"\n   \"str%?b\\\\t%2, [%0], %1\")\n \n (define_peephole\n   [(set (match_operand:QI 0 \"s_register_operand\" \"=r\")\n \t(mem:QI (match_operand:SI 1 \"s_register_operand\" \"+r\")))\n    (set (match_dup 1)\n \t(plus:SI (match_dup 1) (match_operand:SI 2 \"index_operand\" \"rJ\")))]\n-  \"TARGET_ARM && REGNO(operands[0]) != REGNO(operands[1])\n-   && (GET_CODE (operands[2]) != REG\n-       || REGNO(operands[0]) != REGNO (operands[2]))\"\n+  \"TARGET_ARM\n+   && REGNO (operands[0]) != REGNO(operands[1])\n+   && (GET_CODE (operands[2]) != REG || REGNO(operands[0]) != REGNO (operands[2]))\"\n   \"ldr%?b\\\\t%0, [%1], %2\")\n \n (define_peephole\n   [(set (mem:SI (match_operand:SI 0 \"s_register_operand\" \"+r\"))\n \t(match_operand:SI 2 \"s_register_operand\" \"r\"))\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0) (match_operand:SI 1 \"index_operand\" \"rJ\")))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM\n+   && (REGNO (operands[2]) != REGNO (operands[0]))\n+   && (GET_CODE (operands[1]) != REG || (REGNO (operands[1]) != REGNO (operands[0])))\"\n   \"str%?\\\\t%2, [%0], %1\")\n \n (define_peephole\n@@ -7738,9 +7745,8 @@\n   \"TARGET_ARM\n    && (! BYTES_BIG_ENDIAN)\n    && ! TARGET_MMU_TRAPS\n-   && REGNO(operands[0]) != REGNO(operands[1])\n-   && (GET_CODE (operands[2]) != REG\n-       || REGNO(operands[0]) != REGNO (operands[2]))\"\n+   && REGNO (operands[0]) != REGNO(operands[1])\n+   && (GET_CODE (operands[2]) != REG || REGNO(operands[0]) != REGNO (operands[2]))\"\n   \"ldr%?\\\\t%0, [%1], %2\\\\t%@ loadhi\")\n \n (define_peephole\n@@ -7749,17 +7755,18 @@\n    (set (match_dup 1)\n \t(plus:SI (match_dup 1) (match_operand:SI 2 \"index_operand\" \"rJ\")))]\n   \"TARGET_ARM\n-   && REGNO(operands[0]) != REGNO(operands[1])\n-   && (GET_CODE (operands[2]) != REG\n-       || REGNO(operands[0]) != REGNO (operands[2]))\"\n+   && REGNO (operands[0]) != REGNO(operands[1])\n+   && (GET_CODE (operands[2]) != REG || REGNO(operands[0]) != REGNO (operands[2]))\"\n   \"ldr%?\\\\t%0, [%1], %2\")\n \n (define_peephole\n   [(set (mem:QI (plus:SI (match_operand:SI 0 \"s_register_operand\" \"+r\")\n \t\t\t (match_operand:SI 1 \"index_operand\" \"rJ\")))\n \t(match_operand:QI 2 \"s_register_operand\" \"r\"))\n    (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 1)))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM\n+   && (REGNO (operands[2]) != REGNO (operands[0]))\n+   && (GET_CODE (operands[1]) != REG || (REGNO (operands[1]) != REGNO (operands[0])))\"\n   \"str%?b\\\\t%2, [%0, %1]!\")\n \n (define_peephole\n@@ -7770,7 +7777,9 @@\n \t(match_operand:QI 3 \"s_register_operand\" \"r\"))\n    (set (match_dup 2) (plus:SI (match_op_dup 4 [(match_dup 0) (match_dup 1)])\n \t\t\t       (match_dup 2)))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM\n+   && (REGNO (operands[3]) != REGNO (operands[2]))\n+   && (REGNO (operands[0]) != REGNO (operands[2]))\"\n   \"str%?b\\\\t%3, [%2, %0%S4]!\")\n \n ; This pattern is never tried by combine, so do it as a peephole"}]}