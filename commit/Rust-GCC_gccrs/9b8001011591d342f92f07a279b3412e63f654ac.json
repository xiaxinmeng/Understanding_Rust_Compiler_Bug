{"sha": "9b8001011591d342f92f07a279b3412e63f654ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4MDAxMDExNTkxZDM0MmY5MmYwN2EyNzliMzQxMmU2M2Y2NTRhYw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-05T01:35:11Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-05T01:35:11Z"}, "message": "Changes in comments.\n\nFrom-SVN: r1769", "tree": {"sha": "814f489e1e417cbaa7cb895216150d9d8b8aa230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/814f489e1e417cbaa7cb895216150d9d8b8aa230"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b8001011591d342f92f07a279b3412e63f654ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8001011591d342f92f07a279b3412e63f654ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8001011591d342f92f07a279b3412e63f654ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8001011591d342f92f07a279b3412e63f654ac/comments", "author": null, "committer": null, "parents": [{"sha": "9e5386dbcd757cc981408df9cb148e1ed1c5b63c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5386dbcd757cc981408df9cb148e1ed1c5b63c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e5386dbcd757cc981408df9cb148e1ed1c5b63c"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "c9340ff73b4aebd49051e2bef726d6e4feb04586", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8001011591d342f92f07a279b3412e63f654ac/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8001011591d342f92f07a279b3412e63f654ac/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9b8001011591d342f92f07a279b3412e63f654ac", "patch": "@@ -692,8 +692,11 @@ struct tree_type\n    Often this is the same as DECL_NAME.\n    It is an IDENTIFIER_NODE.  */\n #define DECL_ASSEMBLER_NAME(NODE) ((NODE)->decl.assembler_name)\n-/* The containing binding context; either a BINDING\n-   or a RECORD_TYPE or UNION_TYPE.  */\n+/*  For FIELD_DECLs, this is the\n+    RECORD_TYPE or UNION_TYPE node that the field is a member of.  For\n+    VAR_DECL, PARM_DECL, FUNCTION_DECL, LABEL_DECL, and CONST_DECL nodes,\n+    this points to the FUNCTION_DECL for the containing function, or else\n+    yields NULL_TREE if the given decl has \"file scope\".  */\n #define DECL_CONTEXT(NODE) ((NODE)->decl.context)\n #define DECL_FIELD_CONTEXT(NODE) ((NODE)->decl.context)\n /* In a FIELD_DECL, this is the field position, counting in bits,"}]}