{"sha": "76aeea68f518dba8a29bd7ad82e049ad106fe8bd", "node_id": "C_kwDOANBUbNoAKDc2YWVlYTY4ZjUxOGRiYThhMjliZDdhZDgyZTA0OWFkMTA2ZmU4YmQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-28T13:18:11Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-28T13:18:11Z"}, "message": "Remove unused class ResolveTypeToCanonicalPath and generation of a path from qualified type paths", "tree": {"sha": "ae068a16921aaa7190ff3aa9bce950332cb4af46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae068a16921aaa7190ff3aa9bce950332cb4af46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76aeea68f518dba8a29bd7ad82e049ad106fe8bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76aeea68f518dba8a29bd7ad82e049ad106fe8bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76aeea68f518dba8a29bd7ad82e049ad106fe8bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76aeea68f518dba8a29bd7ad82e049ad106fe8bd/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c14187cf54ba2676efc9e705bff8c15282718caf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14187cf54ba2676efc9e705bff8c15282718caf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14187cf54ba2676efc9e705bff8c15282718caf"}], "stats": {"total": 88, "additions": 8, "deletions": 80}, "files": [{"sha": "4260ec4f33f7ab63c6ae1cd58b8814a2ae200c64", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 6, "deletions": 71, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aeea68f518dba8a29bd7ad82e049ad106fe8bd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aeea68f518dba8a29bd7ad82e049ad106fe8bd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=76aeea68f518dba8a29bd7ad82e049ad106fe8bd", "patch": "@@ -24,26 +24,6 @@ namespace Resolver {\n \n // rust-ast-resolve-type.h\n \n-std::string\n-ResolveTypeToCanonicalPath::canonicalize_generic_args (AST::GenericArgs &args)\n-{\n-  std::string buf;\n-\n-  size_t i = 0;\n-  size_t total = args.get_type_args ().size ();\n-\n-  for (auto &ty_arg : args.get_type_args ())\n-    {\n-      buf += ty_arg->as_string ();\n-      if ((i + 1) < total)\n-\tbuf += \",\";\n-\n-      i++;\n-    }\n-\n-  return \"<\" + buf + \">\";\n-}\n-\n void\n ResolveType::visit (AST::ArrayType &type)\n {\n@@ -291,20 +271,18 @@ ResolveRelativeTypePath::go (AST::TypePath &path, NodeId &resolved_node_id)\n \n // qualified type paths\n \n-ResolveRelativeQualTypePath::ResolveRelativeQualTypePath (\n-  CanonicalPath qualified_path)\n-  : result (qualified_path), failure_flag (false)\n+ResolveRelativeQualTypePath::ResolveRelativeQualTypePath ()\n+  : failure_flag (false)\n {}\n \n bool\n ResolveRelativeQualTypePath::go (AST::QualifiedPathInType &path)\n {\n-  CanonicalPath result = CanonicalPath::create_empty ();\n-  ResolveRelativeQualTypePath o (result);\n+  ResolveRelativeQualTypePath o;\n \n   // resolve the type and trait path\n   auto &qualified_path = path.get_qualified_path_type ();\n-  if (!o.resolve_qual_seg (qualified_path, result))\n+  if (!o.resolve_qual_seg (qualified_path))\n     return false;\n \n   // qualified types are similar to other paths in that we cannot guarantee\n@@ -329,8 +307,7 @@ ResolveRelativeQualTypePath::go (AST::QualifiedPathInType &path)\n }\n \n bool\n-ResolveRelativeQualTypePath::resolve_qual_seg (AST::QualifiedPathType &seg,\n-\t\t\t\t\t       CanonicalPath &result)\n+ResolveRelativeQualTypePath::resolve_qual_seg (AST::QualifiedPathType &seg)\n {\n   if (seg.is_error ())\n     {\n@@ -344,34 +321,14 @@ ResolveRelativeQualTypePath::resolve_qual_seg (AST::QualifiedPathType &seg,\n   if (type_resolved_node == UNKNOWN_NODEID)\n     return false;\n \n-  const CanonicalPath *impl_type_seg = nullptr;\n-  bool ok\n-    = mappings->lookup_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t       type_resolved_node, &impl_type_seg);\n-  rust_assert (ok);\n-\n   if (!seg.has_as_clause ())\n-    {\n-      result = result.append (*impl_type_seg);\n-      return true;\n-    }\n+    return true;\n \n   NodeId trait_resolved_node\n     = ResolveType::go (&seg.get_as_type_path (), seg.get_node_id ());\n   if (trait_resolved_node == UNKNOWN_NODEID)\n     return false;\n \n-  const CanonicalPath *trait_type_seg = nullptr;\n-  ok = mappings->lookup_canonical_path (mappings->get_current_crate (),\n-\t\t\t\t\ttrait_resolved_node, &trait_type_seg);\n-  rust_assert (ok);\n-\n-  CanonicalPath projection\n-    = CanonicalPath::trait_impl_projection_seg (seg.get_node_id (),\n-\t\t\t\t\t\t*trait_type_seg,\n-\t\t\t\t\t\t*impl_type_seg);\n-\n-  result = result.append (projection);\n   return true;\n }\n \n@@ -386,24 +343,7 @@ ResolveRelativeQualTypePath::visit (AST::TypePathSegmentGeneric &seg)\n       return;\n     }\n \n-  if (!seg.has_generic_args ())\n-    {\n-      auto ident_segment\n-\t= CanonicalPath::new_seg (seg.get_node_id (),\n-\t\t\t\t  seg.get_ident_segment ().as_string ());\n-      result = result.append (ident_segment);\n-      return;\n-    }\n-\n   ResolveType::type_resolve_generic_args (seg.get_generic_args ());\n-\n-  std::string generics = ResolveTypeToCanonicalPath::canonicalize_generic_args (\n-    seg.get_generic_args ());\n-  auto generic_segment\n-    = CanonicalPath::new_seg (seg.get_node_id (),\n-\t\t\t      seg.get_ident_segment ().as_string ()\n-\t\t\t\t+ \"::\" + generics);\n-  result = result.append (generic_segment);\n }\n \n void\n@@ -416,11 +356,6 @@ ResolveRelativeQualTypePath::visit (AST::TypePathSegment &seg)\n \t\t     seg.as_string ().c_str ());\n       return;\n     }\n-\n-  CanonicalPath ident_seg\n-    = CanonicalPath::new_seg (seg.get_node_id (),\n-\t\t\t      seg.get_ident_segment ().as_string ());\n-  result = result.append (ident_seg);\n }\n \n } // namespace Resolver"}, {"sha": "664e68865ec544cf81db2a49986ae0d409ad3c2e", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76aeea68f518dba8a29bd7ad82e049ad106fe8bd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76aeea68f518dba8a29bd7ad82e049ad106fe8bd/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=76aeea68f518dba8a29bd7ad82e049ad106fe8bd", "patch": "@@ -25,12 +25,6 @@\n namespace Rust {\n namespace Resolver {\n \n-class ResolveTypeToCanonicalPath\n-{\n-public:\n-  static std::string canonicalize_generic_args (AST::GenericArgs &args);\n-};\n-\n class ResolveRelativeTypePath\n {\n public:\n@@ -49,12 +43,11 @@ class ResolveRelativeQualTypePath : public ResolverBase\n   void visit (AST::TypePathSegment &seg) override;\n \n protected:\n-  bool resolve_qual_seg (AST::QualifiedPathType &seg, CanonicalPath &result);\n+  bool resolve_qual_seg (AST::QualifiedPathType &seg);\n \n private:\n-  ResolveRelativeQualTypePath (CanonicalPath qualified_path);\n+  ResolveRelativeQualTypePath ();\n \n-  CanonicalPath result;\n   bool failure_flag;\n };\n "}]}