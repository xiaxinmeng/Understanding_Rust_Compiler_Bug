{"sha": "9d20ec97475b1102d6ca005ad165056d34615a3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQyMGVjOTc0NzViMTEwMmQ2Y2EwMDVhZDE2NTA1NmQzNDYxNWEzZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-11T13:30:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-11T13:30:33Z"}, "message": "analyzer: tweak priority of callstrings in worklist::key_t::cmp\n\nWhile debugging another issue I noticed that the analyzer could fail to\nmerge nodes for control flow in which one path had called a function\nand another path hadn't:\n\n        BB\n       /  \\\n      /    \\\n fn call   no fn call\n      \\    /\n       \\  /\n     join BB\n\nThe root cause was that the worklist sort function wasn't prioritizing\ncall strings, and thus it was fully exploring the \"no function called\"\npath to the exit BB, and only then exploring the \"within the function call\"\nparts of the \"funcion called\" path.\n\nThis patch prioritizes call strings when sorting the worklist so that\nthe nodes with deeper call strings are processed before those with shallower\ncall strings, thus allowing such nodes to be merged at the joinpoint.\n\ngcc/analyzer/ChangeLog:\n\t* engine.cc (worklist::key_t::cmp): Move sort by call_string to\n\tbefore SCC.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/loop-0-up-to-n-by-1-with-iter-obj.c: Update\n\texpected number of enodes after the loop.\n\t* gcc.dg/analyzer/paths-8.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "ed7895d8589a59139866da3c17c979c6b463c1bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed7895d8589a59139866da3c17c979c6b463c1bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d20ec97475b1102d6ca005ad165056d34615a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d20ec97475b1102d6ca005ad165056d34615a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d20ec97475b1102d6ca005ad165056d34615a3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d20ec97475b1102d6ca005ad165056d34615a3d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "48320bc062e08e9c7780a5d679227082e80fb7b6", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d20ec97475b1102d6ca005ad165056d34615a3d/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d20ec97475b1102d6ca005ad165056d34615a3d/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=9d20ec97475b1102d6ca005ad165056d34615a3d", "patch": "@@ -2004,7 +2004,25 @@ worklist::key_t::cmp (const worklist::key_t &ka, const worklist::key_t &kb)\n \treturn cmp;\n     }\n \n-  /* First, order by SCC.  */\n+  /* Sort by callstring, so that nodes with deeper call strings are processed\n+     before those with shallower call strings.\n+     If we have\n+         splitting BB\n+             /  \\\n+            /    \\\n+       fn call   no fn call\n+            \\    /\n+             \\  /\n+            join BB\n+     then we want the path inside the function call to be fully explored up\n+     to the return to the join BB before we explore on the \"no fn call\" path,\n+     so that both enodes at the join BB reach the front of the worklist at\n+     the same time and thus have a chance of being merged.  */\n+  int cs_cmp = call_string::cmp (call_string_a, call_string_b);\n+  if (cs_cmp)\n+    return cs_cmp;\n+\n+  /* Order by SCC.  */\n   int scc_id_a = ka.get_scc_id (ka.m_enode);\n   int scc_id_b = kb.get_scc_id (kb.m_enode);\n   if (scc_id_a != scc_id_b)\n@@ -2033,11 +2051,6 @@ worklist::key_t::cmp (const worklist::key_t &ka, const worklist::key_t &kb)\n \n   gcc_assert (snode_a == snode_b);\n \n-  /* The points might vary by callstring; try sorting by callstring.  */\n-  int cs_cmp = call_string::cmp (call_string_a, call_string_b);\n-  if (cs_cmp)\n-    return cs_cmp;\n-\n   /* Order within supernode via program point.  */\n   int within_snode_cmp\n     = function_point::cmp_within_supernode (point_a.get_function_point (),"}, {"sha": "0172c9b324c7c4a31d45f5aa71bb488f8e734d01", "filename": "gcc/testsuite/gcc.dg/analyzer/loop-0-up-to-n-by-1-with-iter-obj.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d20ec97475b1102d6ca005ad165056d34615a3d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-0-up-to-n-by-1-with-iter-obj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d20ec97475b1102d6ca005ad165056d34615a3d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-0-up-to-n-by-1-with-iter-obj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Floop-0-up-to-n-by-1-with-iter-obj.c?ref=9d20ec97475b1102d6ca005ad165056d34615a3d", "patch": "@@ -69,6 +69,5 @@ void test(int n)\n \n   free (it);\n \n-  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"2 processed enodes\" } */\n-  // TODO: why 2 enodes here, rather than 1\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n }"}, {"sha": "b350d4d7dbd77ede1e618ee4f1458e51a6fe2c72", "filename": "gcc/testsuite/gcc.dg/analyzer/paths-8.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d20ec97475b1102d6ca005ad165056d34615a3d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d20ec97475b1102d6ca005ad165056d34615a3d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fpaths-8.c?ref=9d20ec97475b1102d6ca005ad165056d34615a3d", "patch": "@@ -0,0 +1,17 @@\n+#include \"analyzer-decls.h\"\n+\n+static void __attribute__((noinline))\n+__analyzer_callee_1 (void)\n+{\n+  /* empty.  */\n+}\n+\n+void\n+test_1 (int flag)\n+{\n+  if (flag)\n+    __analyzer_callee_1 ();\n+\n+  /* Verify that we merge state, whether or not the call happens.  */\n+  __analyzer_dump_exploded_nodes (0); /* { dg-warning \"1 processed enode\" } */\n+}"}]}