{"sha": "c9c1e77571deb30d74b8b12226ef4cec8da78f7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzljMWU3NzU3MWRlYjMwZDc0YjhiMTIyMjZlZjRjZWM4ZGE3OGY3ZA==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2010-12-21T15:42:11Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2010-12-21T15:42:11Z"}, "message": "re PR tree-optimization/47001 (segmentation fault in vect_mark_slp_stmts)\n\n\n        PR tree-optimization/47001\n        * tree-vect-slp.c (vect_supported_load_permutation_p): Check\n        that the loads in reduction are different and there are no gaps\n        between them.\n\nFrom-SVN: r168123", "tree": {"sha": "aec0e63d85faf90b66e592c7f568ca9e75bbc149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aec0e63d85faf90b66e592c7f568ca9e75bbc149"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9c1e77571deb30d74b8b12226ef4cec8da78f7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9c1e77571deb30d74b8b12226ef4cec8da78f7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9c1e77571deb30d74b8b12226ef4cec8da78f7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9c1e77571deb30d74b8b12226ef4cec8da78f7d/comments", "author": null, "committer": null, "parents": [{"sha": "c07499dc75cf83ae0b3b20b6c5c6be86142dd25b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c07499dc75cf83ae0b3b20b6c5c6be86142dd25b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c07499dc75cf83ae0b3b20b6c5c6be86142dd25b"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "bc44e7bd474504300bc13b320c21fdee47382232", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c1e77571deb30d74b8b12226ef4cec8da78f7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c1e77571deb30d74b8b12226ef4cec8da78f7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c9c1e77571deb30d74b8b12226ef4cec8da78f7d", "patch": "@@ -1,3 +1,10 @@\n+2010-12-21  Ira Rosen  <irar@il.ibm.com>\n+\n+\tPR tree-optimization/47001\n+\t* tree-vect-slp.c (vect_supported_load_permutation_p): Check that\n+\tthe loads in reduction are different and there are no gaps between\n+\tthem.\n+\n 2010-12-21  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR middle-end/45310"}, {"sha": "b03b602e12d99a311e12b126f9e487f3c64ef71e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c1e77571deb30d74b8b12226ef4cec8da78f7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c1e77571deb30d74b8b12226ef4cec8da78f7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c9c1e77571deb30d74b8b12226ef4cec8da78f7d", "patch": "@@ -1,3 +1,8 @@\n+2010-12-21  Ira Rosen  <irar@il.ibm.com>i\n+\n+\tPR tree-optimization/47001\n+\t* gcc.dg/vect/pr47001.c: New.\n+\n 2010-12-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR libobjc/16110"}, {"sha": "9c5d08dac5feddca319c9019b396b0f5db9de3e1", "filename": "gcc/testsuite/gcc.dg/vect/pr47001.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c1e77571deb30d74b8b12226ef4cec8da78f7d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr47001.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c1e77571deb30d74b8b12226ef4cec8da78f7d/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr47001.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr47001.c?ref=c9c1e77571deb30d74b8b12226ef4cec8da78f7d", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+#include <stdlib.h>\n+\n+#define N 128\n+\n+int a[N];\n+\n+int main1 (int res0, int res1)\n+{\n+  int i;\n+  int sum0 = 0, sum1 = 0;\n+\n+  for (i = 0; i < N/2; i++) {\n+    sum1 += a[2*i];\n+    sum0 += a[2*i];\n+  }\n+\n+  /* Check results:  */\n+  if (sum0 != res0\n+      || sum1 != res1)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "4f7c72c289a2694e235dc0d1c7f88043d0860875", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9c1e77571deb30d74b8b12226ef4cec8da78f7d/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9c1e77571deb30d74b8b12226ef4cec8da78f7d/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=c9c1e77571deb30d74b8b12226ef4cec8da78f7d", "patch": "@@ -1002,7 +1002,36 @@ vect_supported_load_permutation_p (slp_instance slp_instn, int group_size,\n \n       if (!bad_permutation)\n         {\n-          /* This permutaion is valid for reduction.  Since the order of the\n+          /* Check that the loads in the first sequence are different and there\n+             are no gaps between them.  */\n+          load_index = sbitmap_alloc (group_size);\n+          sbitmap_zero (load_index);\n+          for (k = 0; k < group_size; k++)\n+            {\n+              first_group_load_index = VEC_index (int, load_permutation, k);\n+              if (TEST_BIT (load_index, first_group_load_index))\n+                {\n+                  bad_permutation = true;\n+                  break;\n+                }\n+\n+              SET_BIT (load_index, first_group_load_index);\n+            }\n+\n+          if (!bad_permutation)\n+            for (k = 0; k < group_size; k++)\n+              if (!TEST_BIT (load_index, k))\n+                {\n+                  bad_permutation = true;\n+                  break;\n+                }\n+\n+          sbitmap_free (load_index);\n+        }\n+\n+      if (!bad_permutation)\n+        {\n+          /* This permutation is valid for reduction.  Since the order of the\n              statements in the nodes is not important unless they are memory\n              accesses, we can rearrange the statements in all the nodes \n              according to the order of the loads.  */"}]}