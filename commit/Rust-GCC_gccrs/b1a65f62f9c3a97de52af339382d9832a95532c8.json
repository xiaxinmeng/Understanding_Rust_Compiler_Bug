{"sha": "b1a65f62f9c3a97de52af339382d9832a95532c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFhNjVmNjJmOWMzYTk3ZGU1MmFmMzM5MzgyZDk4MzJhOTU1MzJjOA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-04T00:21:14Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-11-04T00:21:14Z"}, "message": "trans-intrinsic.c (gfc_conv_intrinsic.c): Introduce current loop pointer.\n\n\t* trans-intrinsic.c (gfc_conv_intrinsic.c): Introduce current loop\n\tpointer.  Use it.\n\nFrom-SVN: r180918", "tree": {"sha": "fe896dc97dbff1b51e935b91cd1f16b0191fe8b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe896dc97dbff1b51e935b91cd1f16b0191fe8b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1a65f62f9c3a97de52af339382d9832a95532c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a65f62f9c3a97de52af339382d9832a95532c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a65f62f9c3a97de52af339382d9832a95532c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a65f62f9c3a97de52af339382d9832a95532c8/comments", "author": null, "committer": null, "parents": [{"sha": "bc4b3d2dfd47df4967669fbdf0851e49c51448d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc4b3d2dfd47df4967669fbdf0851e49c51448d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc4b3d2dfd47df4967669fbdf0851e49c51448d7"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "01d43747388c1d62bd390f837eda06381865181c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a65f62f9c3a97de52af339382d9832a95532c8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a65f62f9c3a97de52af339382d9832a95532c8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b1a65f62f9c3a97de52af339382d9832a95532c8", "patch": "@@ -1,3 +1,8 @@\n+2011-11-04  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic.c): Introduce current loop\n+\tpointer.  Use it.\n+\n 2011-11-04  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-intrinsic.c (gfc_conv_intrinsic_arith): Small argument handling"}, {"sha": "f7b10416f9862a974d22353bad8a27db3d509a35", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1a65f62f9c3a97de52af339382d9832a95532c8/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1a65f62f9c3a97de52af339382d9832a95532c8/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=b1a65f62f9c3a97de52af339382d9832a95532c8", "patch": "@@ -2568,7 +2568,7 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n   stmtblock_t body;\n   stmtblock_t block;\n   tree tmp;\n-  gfc_loopinfo loop;\n+  gfc_loopinfo loop, *ploop;\n   gfc_actual_arglist *arg_array, *arg_mask;\n   gfc_ss *arrayss;\n   gfc_ss *maskss;\n@@ -2646,14 +2646,16 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n   gfc_mark_ss_chain_used (arrayss, 1);\n   if (maskexpr && maskexpr->rank > 0)\n     gfc_mark_ss_chain_used (maskss, 1);\n+\n+  ploop = &loop;\n   /* Generate the loop body.  */\n-  gfc_start_scalarized_body (&loop, &body);\n+  gfc_start_scalarized_body (ploop, &body);\n \n   /* If we have a mask, only add this element if the mask is set.  */\n   if (maskexpr && maskexpr->rank > 0)\n     {\n       gfc_init_se (&maskse, NULL);\n-      gfc_copy_loopinfo_to_se (&maskse, &loop);\n+      gfc_copy_loopinfo_to_se (&maskse, ploop);\n       maskse.ss = maskss;\n       gfc_conv_expr_val (&maskse, maskexpr);\n       gfc_add_block_to_block (&body, &maskse.pre);\n@@ -2665,7 +2667,7 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n \n   /* Do the actual summation/product.  */\n   gfc_init_se (&arrayse, NULL);\n-  gfc_copy_loopinfo_to_se (&arrayse, &loop);\n+  gfc_copy_loopinfo_to_se (&arrayse, ploop);\n   arrayse.ss = arrayss;\n   gfc_conv_expr_val (&arrayse, arrayexpr);\n   gfc_add_block_to_block (&block, &arrayse.pre);\n@@ -2753,16 +2755,16 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n     tmp = gfc_finish_block (&block);\n   gfc_add_expr_to_block (&body, tmp);\n \n-  gfc_trans_scalarizing_loops (&loop, &body);\n+  gfc_trans_scalarizing_loops (ploop, &body);\n \n   /* For a scalar mask, enclose the loop in an if statement.  */\n   if (maskexpr && maskexpr->rank == 0)\n     {\n       gfc_init_se (&maskse, NULL);\n       gfc_conv_expr_val (&maskse, maskexpr);\n       gfc_init_block (&block);\n-      gfc_add_block_to_block (&block, &loop.pre);\n-      gfc_add_block_to_block (&block, &loop.post);\n+      gfc_add_block_to_block (&block, &ploop->pre);\n+      gfc_add_block_to_block (&block, &ploop->post);\n       tmp = gfc_finish_block (&block);\n \n       tmp = build3_v (COND_EXPR, maskse.expr, tmp,\n@@ -2772,11 +2774,11 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n     }\n   else\n     {\n-      gfc_add_block_to_block (&se->pre, &loop.pre);\n-      gfc_add_block_to_block (&se->pre, &loop.post);\n+      gfc_add_block_to_block (&se->pre, &ploop->pre);\n+      gfc_add_block_to_block (&se->pre, &ploop->post);\n     }\n \n-  gfc_cleanup_loop (&loop);\n+  gfc_cleanup_loop (ploop);\n \n   if (norm2)\n     {"}]}