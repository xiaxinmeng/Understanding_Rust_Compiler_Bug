{"sha": "b94f4bef8b23eecdca3b8f83baddad1f21d74e3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk0ZjRiZWY4YjIzZWVjZGNhM2I4ZjgzYmFkZGFkMWYyMWQ3NGUzYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-06-30T00:43:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-06-30T00:43:21Z"}, "message": "random.h (__mod(_Tp)): Use defaults.\n\n2009-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/random.h (__mod(_Tp)): Use defaults.\n\t(struct _Mod): Adjust template parameters.\n\t(linear_congruential_engine<>::operator()()): Adjust.\n\t(typedef _UInt32Type): Remove.\n\t(mersenne_twister_engine<>::initialization_multiplier): Fix type.\n\t* include/bits/random.tcc (struct _Mod): Adjust template parameters.\n\t(linear_congruential_engine<>::seed(result_type)): Adjust __mod\n\tcalls.\n\t(mersenne_twister_engine<>::seed(result_type)): Likewise.\n\t(mersenne_twister_engine<>::seed(seed_seq&)): Likewise.\n\t(subtract_with_carry_engine<>::seed(result_type)): Likewise.\n\t(subtract_with_carry_engine<>::seed(seed_seq&)): Likewise.\n\t(seed_seq::seed_seq(std::initializer_list<>)): Likewise.\n\t(seed_seq::seed_seq(_InputIterator, _InputIterator)): Likewise.\n\t(seed_seq::generate(_RandomAccessIterator, _RandomAccessIterator)):\n\tLikewise.\n\n\t* include/bits/random.tcc\n\t(mersenne_twister_engine<>::seed(result_type)): Fix i usage in the\n\tformula (i mod n).\n\t(mersenne_twister_engine<>::seed(seed_seq&)): Use uint_least32_t\n\tas array type.\n\t(subtract_with_carry_engine<>::seed(seed_seq&)): Likewise; fix array\n\tsize.\n\t(subtract_with_carry_engine<>::seed(result_type)): Fix; also use\n\tuint_least32_t.\n\nFrom-SVN: r149074", "tree": {"sha": "dbaec49d85732480a0796f6612f4951346e1ec9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbaec49d85732480a0796f6612f4951346e1ec9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b94f4bef8b23eecdca3b8f83baddad1f21d74e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b94f4bef8b23eecdca3b8f83baddad1f21d74e3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b94f4bef8b23eecdca3b8f83baddad1f21d74e3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b94f4bef8b23eecdca3b8f83baddad1f21d74e3b/comments", "author": null, "committer": null, "parents": [{"sha": "15ab11cb467e45ef04da8c8521db0e80e83bfaad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15ab11cb467e45ef04da8c8521db0e80e83bfaad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15ab11cb467e45ef04da8c8521db0e80e83bfaad"}], "stats": {"total": 158, "additions": 91, "deletions": 67}, "files": [{"sha": "6704b4324451b43d09dabf11557739730dade8d0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94f4bef8b23eecdca3b8f83baddad1f21d74e3b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94f4bef8b23eecdca3b8f83baddad1f21d74e3b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b94f4bef8b23eecdca3b8f83baddad1f21d74e3b", "patch": "@@ -1,3 +1,32 @@\n+2009-06-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/random.h (__mod(_Tp)): Use defaults.\n+\t(struct _Mod): Adjust template parameters.\n+\t(linear_congruential_engine<>::operator()()): Adjust.\n+\t(typedef _UInt32Type): Remove.\n+\t(mersenne_twister_engine<>::initialization_multiplier): Fix type.\n+\t* include/bits/random.tcc (struct _Mod): Adjust template parameters.\n+\t(linear_congruential_engine<>::seed(result_type)): Adjust __mod\n+\tcalls.\n+\t(mersenne_twister_engine<>::seed(result_type)): Likewise.\n+\t(mersenne_twister_engine<>::seed(seed_seq&)): Likewise.\n+\t(subtract_with_carry_engine<>::seed(result_type)): Likewise.\n+\t(subtract_with_carry_engine<>::seed(seed_seq&)): Likewise.\n+\t(seed_seq::seed_seq(std::initializer_list<>)): Likewise.\n+\t(seed_seq::seed_seq(_InputIterator, _InputIterator)): Likewise.\n+\t(seed_seq::generate(_RandomAccessIterator, _RandomAccessIterator)):\n+\tLikewise.\n+\n+\t* include/bits/random.tcc\n+\t(mersenne_twister_engine<>::seed(result_type)): Fix i usage in the\n+\tformula (i mod n).\n+\t(mersenne_twister_engine<>::seed(seed_seq&)): Use uint_least32_t\n+\tas array type.\n+\t(subtract_with_carry_engine<>::seed(seed_seq&)): Likewise; fix array\n+\tsize.\n+\t(subtract_with_carry_engine<>::seed(result_type)): Fix; also use\n+\tuint_least32_t.\n+\n 2009-06-24  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/future (shared_future): Adjust doxygen comment."}, {"sha": "aa34fccf2482c73cc9485a063bf986b2181d0df0", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94f4bef8b23eecdca3b8f83baddad1f21d74e3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94f4bef8b23eecdca3b8f83baddad1f21d74e3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=b94f4bef8b23eecdca3b8f83baddad1f21d74e3b", "patch": "@@ -68,18 +68,15 @@ namespace std\n       struct _Shift<_UIntType, __w, true>\n       { static const _UIntType __value = _UIntType(1) << __w; };\n \n-    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m, bool>\n+    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool>\n       struct _Mod;\n \n     // Dispatch based on modulus value to prevent divide-by-zero compile-time\n     // errors when m == 0.\n-    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m>\n+    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>\n       inline _Tp\n       __mod(_Tp __x)\n-      { return _Mod<_Tp, __a, __c, __m, __m == 0>::__calc(__x); }\n-\n-    typedef __gnu_cxx::__conditional_type<(sizeof(unsigned) == 4),\n-\t\t    unsigned, unsigned long>::__type _UInt32Type;\n+      { return _Mod<_Tp, __m, __a, __c, __m == 0>::__calc(__x); }\n \n     /*\n      * An adaptor class for converting the output of any Generator into\n@@ -253,7 +250,7 @@ namespace std\n       result_type\n       operator()()\n       {\n-\t_M_x = __detail::__mod<_UIntType, __a, __c, __m>(_M_x);\n+\t_M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);\n \treturn _M_x;\n       }\n \n@@ -281,8 +278,7 @@ namespace std\n        * @returns __os.\n        */\n       template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,\n-\t       _UIntType1 __m1,\n-\t       typename _CharT, typename _Traits>\n+\t       _UIntType1 __m1, typename _CharT, typename _Traits>\n \tfriend std::basic_ostream<_CharT, _Traits>&\n \toperator<<(std::basic_ostream<_CharT, _Traits>&,\n \t\t   const std::linear_congruential_engine<_UIntType1,\n@@ -302,8 +298,7 @@ namespace std\n        * @returns __is.\n        */\n       template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,\n-\t       _UIntType1 __m1,\n-\t       typename _CharT, typename _Traits>\n+\t       _UIntType1 __m1, typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n \toperator>>(std::basic_istream<_CharT, _Traits>&,\n \t\t   std::linear_congruential_engine<_UIntType1, __a1,\n@@ -371,6 +366,10 @@ namespace std\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n       static_assert(__c <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n \t\t    \"mersenne_twister_engine template arguments out of bounds\");\n+      static_assert(__d <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n+\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n+      static_assert(__f <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n+\t\t    \"mersenne_twister_engine template arguments out of bounds\");\n \n     public:\n       /** The type of the generated random value. */\n@@ -389,7 +388,7 @@ namespace std\n       static const size_t      tempering_t               = __t;\n       static const result_type tempering_c               = __c;\n       static const size_t      tempering_l               = __l;\n-      static const size_t      initialization_multiplier = __f;\n+      static const result_type initialization_multiplier = __f;\n       static const result_type default_seed = 5489u;\n \n       // constructors and member function\n@@ -1351,11 +1350,11 @@ namespace std\n   typedef subtract_with_carry_engine<uint_fast32_t, 24, 10, 24>\n     ranlux24_base;\n \n-  typedef discard_block_engine<ranlux24_base, 223, 23> ranlux24;\n-\n   typedef subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>\n     ranlux48_base;\n \n+  typedef discard_block_engine<ranlux24_base, 223, 23> ranlux24;\n+\n   typedef discard_block_engine<ranlux48_base, 389, 11> ranlux48;\n \n   /**"}, {"sha": "c8b6590a28d64ae9f2834f49eb7111ea45fae580", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 49, "deletions": 53, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b94f4bef8b23eecdca3b8f83baddad1f21d74e3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b94f4bef8b23eecdca3b8f83baddad1f21d74e3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=b94f4bef8b23eecdca3b8f83baddad1f21d74e3b", "patch": "@@ -45,7 +45,7 @@ namespace std\n     //\n     // Preconditions:  a > 0, m > 0.\n     //\n-    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m, bool>\n+    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool>\n       struct _Mod\n       {\n \tstatic _Tp\n@@ -80,8 +80,8 @@ namespace std\n \n     // Special case for m == 0 -- use unsigned integer overflow as modulo\n     // operator.\n-    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m>\n-      struct _Mod<_Tp, __a, __c, __m, true>\n+    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>\n+      struct _Mod<_Tp, __m, __a, __c, true>\n       {\n \tstatic _Tp\n \t__calc(_Tp __x)\n@@ -98,11 +98,11 @@ namespace std\n     linear_congruential_engine<_UIntType, __a, __c, __m>::\n     seed(result_type __s)\n     {\n-      if ((__detail::__mod<_UIntType, 1U, 0U, __m>(__c) == 0U)\n-\t  && (__detail::__mod<_UIntType, 1U, 0U, __m>(__s) == 0U))\n-\t_M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(1U);\n+      if ((__detail::__mod<_UIntType, __m>(__c) == 0)\n+\t  && (__detail::__mod<_UIntType, __m>(__s) == 0))\n+\t_M_x = 1;\n       else\n-\t_M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(__s);\n+\t_M_x = __detail::__mod<_UIntType, __m>(__s);\n     }\n \n   /**\n@@ -118,8 +118,8 @@ namespace std\n       const _UIntType __k = (__k0 + 31) / 32;\n       _UIntType __arr[__k + 3];\n       __q.generate(__arr + 0, __arr + __k + 3);\n-      _UIntType __factor = 1U;\n-      _UIntType __sum = 0U;\n+      _UIntType __factor = 1u;\n+      _UIntType __sum = 0u;\n       for (size_t __j = 0; __j < __k; ++__j)\n         {\n           __sum += __arr[__j + 3] * __factor;\n@@ -179,16 +179,16 @@ namespace std\n \t\t\t    __s, __b, __t, __c, __l, __f>::\n     seed(result_type __sd)\n     {\n-      _M_x[0] = __detail::__mod<_UIntType, 1, 0,\n+      _M_x[0] = __detail::__mod<_UIntType,\n \t__detail::_Shift<_UIntType, __w>::__value>(__sd);\n \n       for (size_t __i = 1; __i < state_size; ++__i)\n \t{\n \t  _UIntType __x = _M_x[__i - 1];\n \t  __x ^= __x >> (__w - 2);\n \t  __x *= __f;\n-\t  __x += __i;\n-\t  _M_x[__i] = __detail::__mod<_UIntType, 1, 0,\n+\t  __x += __detail::__mod<_UIntType, __n>(__i);\n+\t  _M_x[__i] = __detail::__mod<_UIntType,\n \t    __detail::_Shift<_UIntType, __w>::__value>(__x);\n \t}\n       _M_p = state_size;\n@@ -206,35 +206,35 @@ namespace std\n     {\n       const _UIntType __upper_mask = (~_UIntType()) << __r;\n       const size_t __k = (__w + 31) / 32;\n-      _UIntType __arr[__k * __n];\n-      __q.generate(__arr + 0, __arr + __k * __n);\n+      uint_least32_t __arr[__n * __k];\n+      __q.generate(__arr + 0, __arr + __n * __k);\n \n       bool __zero = true;\n       for (size_t __i = 0; __i < state_size; ++__i)\n         {\n-          _UIntType __factor = 1U;\n-          _UIntType __sum = 0U;\n+          _UIntType __factor = 1u;\n+          _UIntType __sum = 0u;\n           for (size_t __j = 0; __j < __k; ++__j)\n             {\n-\t      __sum += __arr[__i * __k + __j] * __factor;\n+\t      __sum += __arr[__k * __i + __j] * __factor;\n \t      __factor *= __detail::_Shift<_UIntType, 32>::__value;\n             }\n-          _M_x[__i] = __detail::__mod<_UIntType, 1U, 0U,\n-\t\t      __detail::_Shift<_UIntType, __w>::__value>(__sum);\n+          _M_x[__i] = __detail::__mod<_UIntType,\n+\t    __detail::_Shift<_UIntType, __w>::__value>(__sum);\n \n           if (__zero)\n             {\n \t      if (__i == 0)\n \t        {\n-\t          if ((_M_x[0] & __upper_mask) != 0U)\n+\t          if ((_M_x[0] & __upper_mask) != 0u)\n \t            __zero = false;\n \t        }\n-\t      else if (_M_x[__i] != 0U)\n+\t      else if (_M_x[__i] != 0u)\n \t        __zero = false;\n             }\n         }\n         if (__zero)\n-          _M_x[0] = __detail::_Shift<_UIntType, __w - 1U>::__value;\n+          _M_x[0] = __detail::_Shift<_UIntType, __w - 1>::__value;\n     }\n \n   template<typename _UIntType, size_t __w,\n@@ -345,26 +345,23 @@ namespace std\n     subtract_with_carry_engine<_UIntType, __w, __s, __r>::\n     seed(result_type __value)\n     {\n-      if (__value == 0)\n-\t__value = default_seed;\n-\n-      std::linear_congruential_engine<result_type, 40014U, 0U, 2147483563U>\n-\t__lcg(__value);\n+      std::linear_congruential_engine<result_type, 40014u, 0u, 2147483563u>\n+\t__lcg(__value == 0u ? default_seed : __value);\n \n-      //  I hope this is right.  The \"10000\" tests work for the ranluxen.\n-      const size_t __n = (word_size + 31) / 32;\n+      const size_t __n = (__w + 31) / 32;\n \n       for (size_t __i = 0; __i < long_lag; ++__i)\n \t{\n-\t  _UIntType __sum = 0U;\n-\t  _UIntType __factor = 1U;\n+\t  _UIntType __sum = 0u;\n+\t  _UIntType __factor = 1u;\n \t  for (size_t __j = 0; __j < __n; ++__j)\n \t    {\n-\t      __sum += __detail::__mod<__detail::_UInt32Type, 1, 0, 0>\n+\t      __sum += __detail::__mod<uint_least32_t,\n+\t\t       __detail::_Shift<uint_least32_t, 32>::__value>\n \t\t\t (__lcg()) * __factor;\n \t      __factor *= __detail::_Shift<_UIntType, 32>::__value;\n \t    }\n-\t  _M_x[__i] = __detail::__mod<_UIntType, 1, 0,\n+\t  _M_x[__i] = __detail::__mod<_UIntType,\n \t    __detail::_Shift<_UIntType, __w>::__value>(__sum);\n \t}\n       _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n@@ -376,21 +373,20 @@ namespace std\n     subtract_with_carry_engine<_UIntType, __w, __s, __r>::\n     seed(seed_seq& __q)\n     {\n-      const size_t __n = (word_size + 31) / 32;\n-      _UIntType __arr[long_lag + __n];\n-      __q.generate(__arr + 0, __arr + long_lag + __n);\n+      const size_t __k = (__w + 31) / 32;\n+      uint_least32_t __arr[__r * __k];\n+      __q.generate(__arr + 0, __arr + __r * __k);\n \n       for (size_t __i = 0; __i < long_lag; ++__i)\n         {\n-          _UIntType __sum = 0U;\n-          _UIntType __factor = 1U;\n-          for (size_t __j = 0; __j < __n; ++__j)\n+          _UIntType __sum = 0u;\n+          _UIntType __factor = 1u;\n+          for (size_t __j = 0; __j < __k; ++__j)\n             {\n-\t      __sum += __detail::__mod<__detail::_UInt32Type, 1, 0, 0>\n-\t\t         (__arr[__i * __n + __j]) * __factor;\n+\t      __sum += __arr[__k * __i + __j] * __factor;\n \t      __factor *= __detail::_Shift<_UIntType, 32>::__value;\n             }\n-          _M_x[__i] = __detail::__mod<_UIntType, 1, 0,\n+          _M_x[__i] = __detail::__mod<_UIntType,\n \t    __detail::_Shift<_UIntType, __w>::__value>(__sum);\n         }\n       _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n@@ -2485,15 +2481,15 @@ namespace std\n     seed_seq::seed_seq(std::initializer_list<_IntType> __il)\n     {\n       for (auto __iter = __il.begin(); __iter != __il.end(); ++__iter)\n-\t_M_v.push_back(__detail::__mod<result_type, 1, 0,\n+\t_M_v.push_back(__detail::__mod<result_type,\n \t\t       __detail::_Shift<result_type, 32>::__value>(*__iter));\n     }\n \n   template<typename _InputIterator>\n     seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end)\n     {\n       for (_InputIterator __iter = __begin; __iter != __end; ++__iter)\n-\t_M_v.push_back(__detail::__mod<result_type, 1, 0,\n+\t_M_v.push_back(__detail::__mod<result_type,\n \t\t       __detail::_Shift<result_type, 32>::__value>(*__iter));\n     }\n \n@@ -2508,7 +2504,7 @@ namespace std\n       if (__begin == __end)\n \treturn;\n \n-      std::fill(__begin, __end, _Type(0x8b8b8b8bU));\n+      std::fill(__begin, __end, _Type(0x8b8b8b8bu));\n \n       const size_t __n = __end - __begin;\n       const size_t __s = _M_v.size();\n@@ -2527,17 +2523,17 @@ namespace std\n \t\t\t ^ __begin[(__k + __p) % __n]\n \t\t\t ^ __begin[(__k - 1) % __n]);\n \t  _Type __r1 = __arg ^ (__arg << 27);\n-\t  __r1 = __detail::__mod<_Type, 1664525U, 0U,\n-\t\t   __detail::_Shift<_Type, 32>::__value>(__r1);\n+\t  __r1 = __detail::__mod<_Type, __detail::_Shift<_Type, 32>::__value,\n+\t                         1664525u, 0u>(__r1);\n \t  _Type __r2 = __r1;\n \t  if (__k == 0)\n \t    __r2 += __s;\n \t  else if (__k <= __s)\n \t    __r2 += __k % __n + _M_v[__k - 1];\n \t  else\n \t    __r2 += __k % __n;\n-\t  __r2 = __detail::__mod<_Type, 1U, 0U,\n-\t\t   __detail::_Shift<_Type, 32>::__value>(__r2);\n+\t  __r2 = __detail::__mod<_Type,\n+\t           __detail::_Shift<_Type, 32>::__value>(__r2);\n \t  __begin[(__k + __p) % __n] += __r1;\n \t  __begin[(__k + __q) % __n] += __r2;\n \t  __begin[__k % __n] = __r2;\n@@ -2549,11 +2545,11 @@ namespace std\n \t\t\t + __begin[(__k + __p) % __n]\n \t\t\t + __begin[(__k - 1) % __n]);\n \t  _Type __r3 = __arg ^ (__arg << 27);\n-\t  __r3 = __detail::__mod<_Type, 1566083941U, 0U,\n-\t\t   __detail::_Shift<_Type, 32>::__value>(__r3);\n+\t  __r3 = __detail::__mod<_Type, __detail::_Shift<_Type, 32>::__value,\n+\t                         1566083941u, 0u>(__r3);\n \t  _Type __r4 = __r3 - __k % __n;\n-\t  __r4 = __detail::__mod<_Type, 1U, 0U,\n-\t\t   __detail::_Shift<_Type, 32>::__value>(__r4);\n+\t  __r4 = __detail::__mod<_Type,\n+\t           __detail::_Shift<_Type, 32>::__value>(__r4);\n \t  __begin[(__k + __p) % __n] ^= __r4;\n \t  __begin[(__k + __q) % __n] ^= __r3;\n \t  __begin[__k % __n] = __r4;"}]}