{"sha": "2d395256d71921f464153393f04ef688f1eab209", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQzOTUyNTZkNzE5MjFmNDY0MTUzMzkzZjA0ZWY2ODhmMWVhYjIwOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T12:27:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T12:27:40Z"}, "message": "[multiple changes]\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* par-ch4.adb (P_Primary): preferentially issue an error message about\n\ta missing parenthesis arount a conditional or case expression in Ada\n\t2012 mode, if we detect that the alignment is not correct for a\n\tstatement.\n\n2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Process_Declarations): Do not consider the result of a\n\ttag-to-class-wide conversion as needing finalization actions.\n\t* exp_util.adb (Has_Controlled_Objects): Do not consider the result of\n\ta tag-to-class-wide conversion as needing finalization actions.\n\t(Is_Finalizable_Transient): The result of a tag-to-class-wide\n\tconversion does not need finalization actions.\n\t(Is_Tag_To_CW_Conversion): New routine.\n\t* exp_util.ads (Is_Tag_To_CW_Conversion): New routine. Determines\n\twhether an object is the result of a tag-to-class-wide conversion.\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): correct order in which\n\tthe left-hand-side and right-hand-side of a conjunct are inserted when\n\ttranslating a pre- or postcondition\n\t* sem_ch6.adb: Correct typo in comment\n\n2011-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* gnat_rm.texi: Ravenscar does not prohibit dependence on\n\tUnchecked_Conversion and Unchecked_Deallocation.\n\n2011-08-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* make.adb: Minor reformatting.\n\nFrom-SVN: r177371", "tree": {"sha": "a3bcc1e0922a6c48a52bb1cc07887f3708bf41c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3bcc1e0922a6c48a52bb1cc07887f3708bf41c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d395256d71921f464153393f04ef688f1eab209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d395256d71921f464153393f04ef688f1eab209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d395256d71921f464153393f04ef688f1eab209", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d395256d71921f464153393f04ef688f1eab209/comments", "author": null, "committer": null, "parents": [{"sha": "767ab2fde8deb8a34866897bd3d6b07b43e366bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767ab2fde8deb8a34866897bd3d6b07b43e366bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767ab2fde8deb8a34866897bd3d6b07b43e366bd"}], "stats": {"total": 171, "additions": 125, "deletions": 46}, "files": [{"sha": "98548d9482844fa06285ab8b3f0e8756ff5c978c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2d395256d71921f464153393f04ef688f1eab209", "patch": "@@ -1,3 +1,38 @@\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* par-ch4.adb (P_Primary): preferentially issue an error message about\n+\ta missing parenthesis arount a conditional or case expression in Ada\n+\t2012 mode, if we detect that the alignment is not correct for a\n+\tstatement.\n+\n+2011-08-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Process_Declarations): Do not consider the result of a\n+\ttag-to-class-wide conversion as needing finalization actions.\n+\t* exp_util.adb (Has_Controlled_Objects): Do not consider the result of\n+\ta tag-to-class-wide conversion as needing finalization actions.\n+\t(Is_Finalizable_Transient): The result of a tag-to-class-wide\n+\tconversion does not need finalization actions.\n+\t(Is_Tag_To_CW_Conversion): New routine.\n+\t* exp_util.ads (Is_Tag_To_CW_Conversion): New routine. Determines\n+\twhether an object is the result of a tag-to-class-wide conversion.\n+\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): correct order in which\n+\tthe left-hand-side and right-hand-side of a conjunct are inserted when\n+\ttranslating a pre- or postcondition\n+\t* sem_ch6.adb: Correct typo in comment\n+\n+2011-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat_rm.texi: Ravenscar does not prohibit dependence on\n+\tUnchecked_Conversion and Unchecked_Deallocation.\n+\n+2011-08-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* make.adb: Minor reformatting.\n+\n 2011-08-04  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj.adb, prj.ads, makeutl.adb (Complete_Mains): search for the"}, {"sha": "357f9ef7d1c31415fd82991e62cf45c2fc11d13b", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=2d395256d71921f464153393f04ef688f1eab209", "patch": "@@ -1757,12 +1757,14 @@ package body Exp_Ch7 is\n                --  The object is of the form:\n                --    Obj : Typ [:= Expr];\n                --\n-               --  Do not process the incomplete view of a deferred constant\n+               --  Do not process the incomplete view of a deferred constant.\n+               --  Do not consider tag-to-class-wide conversions.\n \n                elsif not Is_Imported (Obj_Id)\n                  and then Needs_Finalization (Obj_Typ)\n                  and then not (Ekind (Obj_Id) = E_Constant\n                                 and then not Has_Completion (Obj_Id))\n+                 and then not Is_Tag_To_CW_Conversion (Obj_Id)\n                then\n                   Processing_Actions;\n \n@@ -1785,6 +1787,9 @@ package body Exp_Ch7 is\n                then\n                   Processing_Actions (Has_No_Init => True);\n \n+               --  Processing for \"hook\" objects generated for controlled\n+               --  transients declared inside an Expression_With_Actions.\n+\n                elsif Is_Access_Type (Obj_Typ)\n                  and then Present (Return_Flag_Or_Transient_Decl (Obj_Id))\n                  and then Nkind (Return_Flag_Or_Transient_Decl (Obj_Id)) ="}, {"sha": "83682e73652870f8ed6ff3fb3f0e11c430efd047", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=2d395256d71921f464153393f04ef688f1eab209", "patch": "@@ -2668,12 +2668,14 @@ package body Exp_Util is\n             --  The object is of the form:\n             --    Obj : Typ [:= Expr];\n             --\n-            --  Do not process the incomplete view of a deferred constant\n+            --  Do not process the incomplete view of a deferred constant. Do\n+            --  not consider tag-to-class-wide conversions.\n \n             elsif not Is_Imported (Obj_Id)\n               and then Needs_Finalization (Obj_Typ)\n               and then not (Ekind (Obj_Id) = E_Constant\n                               and then not Has_Completion (Obj_Id))\n+              and then not Is_Tag_To_CW_Conversion (Obj_Id)\n             then\n                return True;\n \n@@ -2696,6 +2698,9 @@ package body Exp_Util is\n             then\n                return True;\n \n+            --  Processing for \"hook\" objects generated for controlled\n+            --  transients declared inside an Expression_With_Actions.\n+\n             elsif Is_Access_Type (Obj_Typ)\n               and then Present (Return_Flag_Or_Transient_Decl (Obj_Id))\n               and then Nkind (Return_Flag_Or_Transient_Decl (Obj_Id)) =\n@@ -3968,11 +3973,6 @@ package body Exp_Util is\n \n           and then not Is_Allocated (Obj_Id)\n \n-         --  Do not consider renamed transient objects because the act of\n-         --  renaming extends the object's lifetime.\n-\n-          and then not Is_Renamed (Obj_Id, Decl)\n-\n          --  If the transient object is a pointer, check that it is not\n          --  initialized by a function which returns a pointer or acts as a\n          --  renaming of another pointer.\n@@ -3984,7 +3984,16 @@ package body Exp_Util is\n          --  Do not consider transient objects which act as indirect aliases of\n          --  build-in-place function results.\n \n-          and then not Initialized_By_Aliased_BIP_Func_Call (Obj_Id);\n+          and then not Initialized_By_Aliased_BIP_Func_Call (Obj_Id)\n+\n+         --  Do not consider renamed transient objects because the act of\n+         --  renaming extends the object's lifetime.\n+\n+          and then not Is_Renamed (Obj_Id, Decl)\n+\n+         --  Do not consider conversions of tags to class-wide types\n+\n+          and then not Is_Tag_To_CW_Conversion (Obj_Id);\n    end Is_Finalizable_Transient;\n \n    ---------------------------------\n@@ -4502,6 +4511,21 @@ package body Exp_Util is\n       end if;\n    end Is_Renamed_Object;\n \n+   -----------------------------\n+   -- Is_Tag_To_CW_Conversion --\n+   -----------------------------\n+\n+   function Is_Tag_To_CW_Conversion (Obj_Id : Entity_Id) return Boolean is\n+      Expr : constant Node_Id := Expression (Parent (Obj_Id));\n+\n+   begin\n+      return\n+        Is_Class_Wide_Type (Etype (Obj_Id))\n+          and then Present (Expr)\n+          and then Nkind (Expr) = N_Unchecked_Type_Conversion\n+          and then Etype (Expression (Expr)) = RTE (RE_Tag);\n+   end Is_Tag_To_CW_Conversion;\n+\n    ----------------------------\n    -- Is_Untagged_Derivation --\n    ----------------------------"}, {"sha": "67cdceba0b9e9f452feefcea3a983481b51377ee", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=2d395256d71921f464153393f04ef688f1eab209", "patch": "@@ -594,6 +594,10 @@ package Exp_Util is\n    --  We consider that a (1 .. 2) is a renamed object since it is the prefix\n    --  of the name in the renaming declaration.\n \n+   function Is_Tag_To_CW_Conversion (Obj_Id : Entity_Id) return Boolean;\n+   --  Determine whether object Obj_Id is the result of a tag-to-class-wide\n+   --  type conversion.\n+\n    function Is_Untagged_Derivation (T : Entity_Id) return Boolean;\n    --  Returns true if type T is not tagged and is a derived type,\n    --  or is a private type whose completion is such a type."}, {"sha": "d1f2b8c6accb520b3855cc77c3f07c163529cf1e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=2d395256d71921f464153393f04ef688f1eab209", "patch": "@@ -4256,13 +4256,6 @@ Tasks which terminate are erroneous.\n Entry barrier condition expressions shall be either static\n boolean expressions or boolean objects which are declared in\n the protected type which contains the entry.\n-\n-@item No_Unchecked_Conversion\n-There are no semantic dependencies on the Ada.Unchecked_Conversion package.\n-\n-@item No_Unchecked_Deallocation\n-There are no semantic dependencies on the Ada.Unchecked_Deallocation package.\n-\n @end table\n @noindent\n "}, {"sha": "93f607125ce8198d5dcb75379e48f052e8fb8970", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=2d395256d71921f464153393f04ef688f1eab209", "patch": "@@ -1298,10 +1298,10 @@ package body Make is\n          Add_Str_To_Name_Buffer (File_Name);\n          Switches :=\n            Switches_Of\n-             (Source_File      => Name_Find,\n-              Project          => Main_Project,\n-              In_Package       => The_Package,\n-              Allow_ALI        => Program = Binder or else Program = Linker);\n+             (Source_File => Name_Find,\n+              Project     => Main_Project,\n+              In_Package  => The_Package,\n+              Allow_ALI   => Program = Binder or else Program = Linker);\n \n          if Switches.Kind = List then\n             Program_Args := Program;\n@@ -1357,7 +1357,9 @@ package body Make is\n       pragma Assert (Args'First = 1);\n \n       --  Optimize the simple case where the gnatbind command line looks like\n-      --     gnatbind -aO. -I- file.ali   --into->   gnatbind file.adb\n+      --     gnatbind -aO. -I- file.ali\n+      --  into\n+      --     gnatbind file.adb\n \n       if Args'Length = 2\n         and then Args (Args'First).all = \"-aO\" & Normalized_CWD\n@@ -1494,7 +1496,7 @@ package body Make is\n \n          begin\n             --  Test whether Uname is the name of a body unit (i.e. ends\n-            --  with %b)\n+            --  with %b).\n \n             Get_Name_String (Uname);\n             pragma\n@@ -1571,12 +1573,12 @@ package body Make is\n       --  Time stamp of the current object file\n \n       Modified_Source : File_Name_Type;\n-      --  The first source in Lib_File whose current time stamp differs\n-      --  from that stored in Lib_File.\n+      --  The first source in Lib_File whose current time stamp differs from\n+      --  that stored in Lib_File.\n \n       New_Spec : File_Name_Type;\n       --  If Lib_File contains in its W (with) section a body (for a\n-      --  subprogram) for which there exists a spec and the spec did not\n+      --  subprogram) for which there exists a spec, and the spec did not\n       --  appear in the Sdep section of Lib_File, New_Spec contains the file\n       --  name of this new spec.\n \n@@ -1670,17 +1672,15 @@ package body Make is\n             return;\n          end if;\n \n-         --  Don't take Ali file into account if it was generated with\n-         --  errors.\n+         --  Don't take ALI file into account if it was generated with errors\n \n          if ALIs.Table (ALI).Compile_Errors then\n             Verbose_Msg (Full_Lib_File, \"had errors, must be recompiled\");\n             ALI := No_ALI_Id;\n             return;\n          end if;\n \n-         --  Don't take Ali file into account if it was generated without\n-         --  object.\n+         --  Don't take ALI file into account if no object was generated\n \n          if Operating_Mode /= Check_Semantics\n            and then ALIs.Table (ALI).No_Object\n@@ -1727,11 +1727,8 @@ package body Make is\n             --  First, collect all the switches\n \n             Collect_Arguments (Source_File, Is_Main_Source, The_Args);\n-\n             Prev_Switch := Dummy_Switch;\n-\n             Get_Name_String (ALIs.Table (ALI).Sfile);\n-\n             Switches_To_Check.Set_Last (0);\n \n             for J in 1 .. Last_Argument loop\n@@ -1992,8 +1989,8 @@ package body Make is\n                         Projects (J) := Proj;\n                      end loop;\n \n-                     --  Now check if any of the dependant sources are in\n-                     --  any of these extending projects.\n+                     --  Now check if any of the dependant sources are in any\n+                     --  of these extending projects.\n \n                      D_Chk :\n                      for D in ALIs.Table (ALI).First_Sdep ..\n@@ -5674,8 +5671,8 @@ package body Make is\n \n       procedure Check_Mains is\n          Real_Main_Project : Project_Id := No_Project;\n-         Info : Main_Info;\n-         Proj : Project_Id;\n+         Info              : Main_Info;\n+         Proj              : Project_Id;\n       begin\n          if Mains.Number_Of_Mains (Project_Tree) = 0\n            and then not Unique_Compile\n@@ -5689,6 +5686,7 @@ package body Make is\n          --  If we have multiple mains on the command line, they need not\n          --  belong to the root project, but they must all belong to the same\n          --  project.\n+\n          if not Unique_Compile then\n             Mains.Reset;\n             loop"}, {"sha": "125a9c4a1e0e8839e499092619340e3aeac6964e", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=2d395256d71921f464153393f04ef688f1eab209", "patch": "@@ -2445,9 +2445,16 @@ package body Ch4 is\n \n                --  If this looks like a real if, defined as an IF appearing at\n                --  the start of a new line, then we consider we have a missing\n-               --  operand.\n-\n-               if Token_Is_At_Start_Of_Line then\n+               --  operand. If in Ada 2012 and the IF is not properly indented\n+               --  for a statement, we prefer to issue a message about an ill-\n+               --  parenthesized conditional expression.\n+\n+               if Token_Is_At_Start_Of_Line\n+                 and then not\n+                   (Ada_Version >= Ada_2012\n+                     and then Style_Check_Indentation /= 0\n+                     and then Start_Column rem Style_Check_Indentation /= 0)\n+               then\n                   Error_Msg_AP (\"missing operand\");\n                   return Error;\n \n@@ -2471,9 +2478,16 @@ package body Ch4 is\n \n                --  If this looks like a real case, defined as a CASE appearing\n                --  the start of a new line, then we consider we have a missing\n-               --  operand.\n-\n-               if Token_Is_At_Start_Of_Line then\n+               --  operand. If in Ada 2012 and the CASE is not properly\n+               --  indented for a statement, we prefer to issue a message about\n+               --  an ill-parenthesized case expression.\n+\n+               if Token_Is_At_Start_Of_Line\n+                 and then not\n+                   (Ada_Version >= Ada_2012\n+                     and then Style_Check_Indentation /= 0\n+                     and then Start_Column rem Style_Check_Indentation /= 0)\n+               then\n                   Error_Msg_AP (\"missing operand\");\n                   return Error;\n "}, {"sha": "5a28908763afb4f0fb7685cce85289e7af856098", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=2d395256d71921f464153393f04ef688f1eab209", "patch": "@@ -1086,6 +1086,12 @@ package body Sem_Ch13 is\n                   --  we generate separate Pre/Post aspects for the separate\n                   --  clauses. Since we allow multiple pragmas, there is no\n                   --  problem in allowing multiple Pre/Post aspects internally.\n+                  --  These should be treated in reverse order (B first and\n+                  --  A second) since they are later inserted just after N in\n+                  --  the order they are treated. This way, the pragma for A\n+                  --  ends up preceding the pragma for B, which may have an\n+                  --  importance for the error raised (either constraint error\n+                  --  or precondition error).\n \n                   --  We do not do this for Pre'Class, since we have to put\n                   --  these conditions together in a complex OR expression\n@@ -1095,12 +1101,12 @@ package body Sem_Ch13 is\n                   then\n                      while Nkind (Expr) = N_And_Then loop\n                         Insert_After (Aspect,\n-                          Make_Aspect_Specification (Sloc (Right_Opnd (Expr)),\n+                          Make_Aspect_Specification (Sloc (Left_Opnd (Expr)),\n                             Identifier    => Identifier (Aspect),\n-                            Expression    => Relocate_Node (Right_Opnd (Expr)),\n+                            Expression    => Relocate_Node (Left_Opnd (Expr)),\n                             Class_Present => Class_Present (Aspect),\n                             Split_PPC     => True));\n-                        Rewrite (Expr, Relocate_Node (Left_Opnd (Expr)));\n+                        Rewrite (Expr, Relocate_Node (Right_Opnd (Expr)));\n                         Eloc := Sloc (Expr);\n                      end loop;\n                   end if;"}, {"sha": "c11c6e835436ff34e82f1b74adc87fbe9adf51bd", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d395256d71921f464153393f04ef688f1eab209/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=2d395256d71921f464153393f04ef688f1eab209", "patch": "@@ -9189,8 +9189,8 @@ package body Sem_Ch6 is\n                --  will be executed at the start of the procedure. Note that\n                --  this processing reverses the order of the list, which is\n                --  what we want since new entries were chained to the head of\n-               --  the list. There can be more then one precondition when we\n-               --  use pragma Precondition\n+               --  the list. There can be more than one precondition when we\n+               --  use pragma Precondition.\n \n                if not Class_Present (Prag) then\n                   Prepend (Grab_PPC, Declarations (N));"}]}