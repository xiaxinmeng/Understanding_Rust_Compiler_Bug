{"sha": "6485d5d69a71d2c93b8f97fa899cb906628d3a5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ4NWQ1ZDY5YTcxZDJjOTNiOGY5N2ZhODk5Y2I5MDY2MjhkM2E1Zg==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2019-11-01T14:08:50Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@gcc.gnu.org", "date": "2019-11-01T14:08:50Z"}, "message": "[rs6000] vector conversion RTL pattern update for diff unit size\n\n2019-11-01  Kewen Lin  <linkw@gcc.gnu.org>\n\n  * config/rs6000/rs6000-modes.def (V2SF, V2SI): New modes.\n  * config/rs6000/vsx.md (UNSPEC_VSX_CVSPSXDS, UNSPEC_VSX_CVSPUXDS): Remove.\n  (vsx_xvcvspdp): New define_expand, old define_insn split to...\n  (vsx_xvcvspdp_be): ... this.  New.  And...\n  (vsx_xvcvspdp_le): ... this.  New.\n  (vsx_xvcv<su>xwdp): New define_expand, old define_insn split to...\n  (vsx_xvcv<su>xwdp_be): ... this.  New.  And...\n  (vsx_xvcv<su>xwdp_le): ... this.  New.\n  (vsx_xvcvsp<su>xds): New define_expand, old define_insn split to...\n  (vsx_xvcvsp<su>xds_be): ... this.  New.  And...\n  (vsx_xvcvsp<su>xds_le): ... this.  New.\n\nFrom-SVN: r277709", "tree": {"sha": "d8281466da3f28586218eb7d3ab80c482ddae6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8281466da3f28586218eb7d3ab80c482ddae6b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6485d5d69a71d2c93b8f97fa899cb906628d3a5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6485d5d69a71d2c93b8f97fa899cb906628d3a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6485d5d69a71d2c93b8f97fa899cb906628d3a5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6485d5d69a71d2c93b8f97fa899cb906628d3a5f/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d8cfe0e8c01854f8cf57a797920d058e40a5ae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d8cfe0e8c01854f8cf57a797920d058e40a5ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d8cfe0e8c01854f8cf57a797920d058e40a5ae9"}], "stats": {"total": 133, "additions": 102, "deletions": 31}, "files": [{"sha": "bb7819e1fea85db00af16c3d5222c2395ad87b48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6485d5d69a71d2c93b8f97fa899cb906628d3a5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6485d5d69a71d2c93b8f97fa899cb906628d3a5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6485d5d69a71d2c93b8f97fa899cb906628d3a5f", "patch": "@@ -1,3 +1,18 @@\n+2019-11-01  Kewen Lin  <linkw@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-modes.def (V2SF, V2SI): New modes.\n+\t* config/rs6000/vsx.md (UNSPEC_VSX_CVSPSXDS,\n+\tUNSPEC_VSX_CVSPUXDS): Remove.\n+\t(vsx_xvcvspdp): New define_expand, old define_insn split to...\n+\t(vsx_xvcvspdp_be): ... this.  New.  And...\n+\t(vsx_xvcvspdp_le): ... this.  New.\n+\t(vsx_xvcv<su>xwdp): New define_expand, old define_insn split to...\n+\t(vsx_xvcv<su>xwdp_be): ... this.  New.  And...\n+\t(vsx_xvcv<su>xwdp_le): ... this.  New.\n+\t(vsx_xvcvsp<su>xds): New define_expand, old define_insn split to...\n+\t(vsx_xvcvsp<su>xds_be): ... this.  New.  And...\n+\t(vsx_xvcvsp<su>xds_le): ... this.  New.\n+\n 2019-11-01  Kewen Lin  <linkw@gcc.gnu.org>\n \n \t* config/rs6000/vsx.md (UNSPEC_VSX_CVSXWSP, UNSPEC_VSX_CVUXWSP,"}, {"sha": "2051358133dd47a9d2b1e0419776cdbe3237785b", "filename": "gcc/config/rs6000/rs6000-modes.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6485d5d69a71d2c93b8f97fa899cb906628d3a5f/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6485d5d69a71d2c93b8f97fa899cb906628d3a5f/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-modes.def?ref=6485d5d69a71d2c93b8f97fa899cb906628d3a5f", "patch": "@@ -74,6 +74,10 @@ VECTOR_MODES (FLOAT, 16);     /*       V8HF  V4SF V2DF */\n VECTOR_MODES (INT, 32);       /* V32QI V16HI V8SI V4DI */\n VECTOR_MODES (FLOAT, 32);     /*       V16HF V8SF V4DF */\n \n+/* Half VMX/VSX vector (for internal use)  */\n+VECTOR_MODE (FLOAT, SF, 2);   /*                 V2SF  */\n+VECTOR_MODE (INT, SI, 2);     /*                 V2SI  */\n+\n /* Replacement for TImode that only is allowed in GPRs.  We also use PTImode\n    for quad memory atomic operations to force getting an even/odd register\n    combination.  */"}, {"sha": "fc61ae1e7b32a8a5dc20f15b226dc46e1741996c", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 83, "deletions": 31, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6485d5d69a71d2c93b8f97fa899cb906628d3a5f/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6485d5d69a71d2c93b8f97fa899cb906628d3a5f/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=6485d5d69a71d2c93b8f97fa899cb906628d3a5f", "patch": "@@ -275,8 +275,6 @@\n    UNSPEC_VSX_CVUXWDP\n    UNSPEC_VSX_CVSXDSP\n    UNSPEC_VSX_CVUXDSP\n-   UNSPEC_VSX_CVSPSXDS\n-   UNSPEC_VSX_CVSPUXDS\n    UNSPEC_VSX_FLOAT2\n    UNSPEC_VSX_UNS_FLOAT2\n    UNSPEC_VSX_FLOATE\n@@ -2114,14 +2112,36 @@\n   \"xscvdpsp %x0,%x1\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"vsx_xvcvspdp\"\n+(define_insn \"vsx_xvcvspdp_be\"\n   [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=v,?wa\")\n-\t(unspec:V2DF [(match_operand:V4SF 1 \"vsx_register_operand\" \"wa,wa\")]\n-\t\t\t      UNSPEC_VSX_CVSPDP))]\n-  \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+     (float_extend:V2DF\n+       (vec_select:V2SF (match_operand:V4SF 1 \"vsx_register_operand\" \"wa,wa\")\n+\t (parallel [(const_int 0) (const_int 2)]))))]\n+  \"VECTOR_UNIT_VSX_P (V4SFmode) && BYTES_BIG_ENDIAN\"\n+  \"xvcvspdp %x0,%x1\"\n+  [(set_attr \"type\" \"vecdouble\")])\n+\n+(define_insn \"vsx_xvcvspdp_le\"\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=v,?wa\")\n+     (float_extend:V2DF\n+       (vec_select:V2SF (match_operand:V4SF 1 \"vsx_register_operand\" \"wa,wa\")\n+\t (parallel [(const_int 1) (const_int 3)]))))]\n+  \"VECTOR_UNIT_VSX_P (V4SFmode) && !BYTES_BIG_ENDIAN\"\n   \"xvcvspdp %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n+(define_expand \"vsx_xvcvspdp\"\n+  [(match_operand:V2DF 0 \"vsx_register_operand\")\n+   (match_operand:V4SF 1 \"vsx_register_operand\")]\n+  \"VECTOR_UNIT_VSX_P (V4SFmode)\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vsx_xvcvspdp_be (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_vsx_xvcvspdp_le (operands[0], operands[1]));\n+  DONE;\n+})\n+\n (define_insn \"vsx_xvcvdpsp\"\n   [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,?wa\")\n \t(unspec:V4SF [(match_operand:V2DF 1 \"vsx_register_operand\" \"v,wa\")]\n@@ -2341,16 +2361,39 @@\n   \"xvcvuxdsp %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n-;; Convert from 32-bit to 64-bit types\n-;; Provide both vector and scalar targets\n-(define_insn \"vsx_xvcvsxwdp\"\n+;; Convert vector of 32-bit signed/unsigned integers to vector of\n+;; 64-bit floating point numbers.\n+(define_insn \"vsx_xvcv<su>xwdp_be\"\n   [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa\")\n-\t(unspec:V2DF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")]\n-\t\t     UNSPEC_VSX_CVSXWDP))]\n-  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n-  \"xvcvsxwdp %x0,%x1\"\n+     (any_float:V2DF\n+       (vec_select:V2SI (match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")\n+\t (parallel [(const_int 0) (const_int 2)]))))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode) && BYTES_BIG_ENDIAN\"\n+  \"xvcv<su>xwdp %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n+(define_insn \"vsx_xvcv<su>xwdp_le\"\n+  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa\")\n+     (any_float:V2DF\n+       (vec_select:V2SI (match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")\n+\t (parallel [(const_int 1) (const_int 3)]))))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode) && !BYTES_BIG_ENDIAN\"\n+  \"xvcv<su>xwdp %x0,%x1\"\n+  [(set_attr \"type\" \"vecdouble\")])\n+\n+(define_expand \"vsx_xvcv<su>xwdp\"\n+  [(match_operand:V2DF 0 \"vsx_register_operand\")\n+   (match_operand:V4SI 1 \"vsx_register_operand\")\n+   (any_float (pc))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vsx_xvcv<su>xwdp_be (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_vsx_xvcv<su>xwdp_le (operands[0], operands[1]));\n+  DONE;\n+})\n+\n (define_insn \"vsx_xvcvsxwdp_df\"\n   [(set (match_operand:DF 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:DF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")]\n@@ -2359,14 +2402,6 @@\n   \"xvcvsxwdp %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n-(define_insn \"vsx_xvcvuxwdp\"\n-  [(set (match_operand:V2DF 0 \"vsx_register_operand\" \"=wa\")\n-\t(unspec:V2DF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")]\n-\t\t     UNSPEC_VSX_CVUXWDP))]\n-  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n-  \"xvcvuxwdp %x0,%x1\"\n-  [(set_attr \"type\" \"vecdouble\")])\n-\n (define_insn \"vsx_xvcvuxwdp_df\"\n   [(set (match_operand:DF 0 \"vsx_register_operand\" \"=wa\")\n \t(unspec:DF [(match_operand:V4SI 1 \"vsx_register_operand\" \"wa\")]\n@@ -2375,22 +2410,39 @@\n   \"xvcvuxwdp %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n-(define_insn \"vsx_xvcvspsxds\"\n+;; Convert vector of 32-bit floating point numbers to vector of\n+;; 64-bit signed/unsigned integers.\n+(define_insn \"vsx_xvcvsp<su>xds_be\"\n   [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v,?wa\")\n-\t(unspec:V2DI [(match_operand:V4SF 1 \"vsx_register_operand\" \"wa,wa\")]\n-\t\t     UNSPEC_VSX_CVSPSXDS))]\n-  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n-  \"xvcvspsxds %x0,%x1\"\n+     (any_fix:V2DI\n+       (vec_select:V2SF (match_operand:V4SF 1 \"vsx_register_operand\" \"wa,wa\")\n+\t (parallel [(const_int 0) (const_int 2)]))))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode) && BYTES_BIG_ENDIAN\"\n+  \"xvcvsp<su>xds %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n-(define_insn \"vsx_xvcvspuxds\"\n+(define_insn \"vsx_xvcvsp<su>xds_le\"\n   [(set (match_operand:V2DI 0 \"vsx_register_operand\" \"=v,?wa\")\n-\t(unspec:V2DI [(match_operand:V4SF 1 \"vsx_register_operand\" \"wa,wa\")]\n-\t\t     UNSPEC_VSX_CVSPUXDS))]\n-  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n-  \"xvcvspuxds %x0,%x1\"\n+     (any_fix:V2DI\n+       (vec_select:V2SF (match_operand:V4SF 1 \"vsx_register_operand\" \"wa,wa\")\n+\t (parallel [(const_int 1) (const_int 3)]))))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode) && !BYTES_BIG_ENDIAN\"\n+  \"xvcvsp<su>xds %x0,%x1\"\n   [(set_attr \"type\" \"vecdouble\")])\n \n+(define_expand \"vsx_xvcvsp<su>xds\"\n+  [(match_operand:V2DI 0 \"vsx_register_operand\")\n+   (match_operand:V4SF 1 \"vsx_register_operand\")\n+   (any_fix (pc))]\n+  \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vsx_xvcvsp<su>xds_be (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_vsx_xvcvsp<su>xds_le (operands[0], operands[1]));\n+  DONE;\n+})\n+\n ;; Generate float2 double\n ;; convert two double to float\n (define_expand \"float2_v2df\""}]}