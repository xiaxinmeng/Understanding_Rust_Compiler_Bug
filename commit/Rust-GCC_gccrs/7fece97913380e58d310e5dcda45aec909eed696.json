{"sha": "7fece97913380e58d310e5dcda45aec909eed696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZlY2U5NzkxMzM4MGU1OGQzMTBlNWRjZGE0NWFlYzkwOWVlZDY5Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-02-03T19:12:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-02-03T19:12:07Z"}, "message": "re PR middle-end/31490 (Compile error section type conflict)\n\n\tPR middle-end/31490\n\t* output.h (SECTION_RELRO): Define.\n\t(SECTION_MACH_DEP): Adjust.\n\t(get_variable_section): New prototype.\n\t* varpool.c (varpool_finalize_named_section_flags): New function.\n\t(varpool_assemble_pending_decls): Call it.\n\t* cgraph.h (varpool_finalize_named_section_flags): New prototype.\n\t* cgraphunit.c (cgraph_output_in_order): Call\n\tvarpool_finalize_named_section_flags.\n\t* varasm.c (get_section): Allow section flags conflicts between\n\trelro and read-only sections if the section hasn't been declared yet.\n\tSet SECTION_OVERRIDE after diagnosing section type conflict.\n\t(get_variable_section): No longer static.\n\t(default_section_type_flags): Use SECTION_WRITE | SECTION_RELRO for\n\treadonly sections that need relocations.\n\t(decl_readonly_section_1): New function.\n\t(decl_readonly_section): Use it.\n\n\tRevert:\n\t2010-11-17  Dinar Temirbulatov <dtemirbulatov@gmail.com>\n\t\t    Steve Ellcey  <sje@cup.hp.com>\n\n\tPR middle-end/31490\n\t* varasm.c (categorize_decl_for_section): Ignore reloc_rw_mask\n\tif section attribute used.\n\n\t* gcc.dg/pr31490-2.c: New test.\n\t* gcc.dg/pr31490-3.c: New test.\n\t* gcc.dg/pr31490-4.c: New test.\n\nFrom-SVN: r169804", "tree": {"sha": "d84c6553f07cd91230768e24b2d35f690b8488db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d84c6553f07cd91230768e24b2d35f690b8488db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fece97913380e58d310e5dcda45aec909eed696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fece97913380e58d310e5dcda45aec909eed696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fece97913380e58d310e5dcda45aec909eed696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fece97913380e58d310e5dcda45aec909eed696/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d18d5478621cac97cf938e412883f2eb34f351cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18d5478621cac97cf938e412883f2eb34f351cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d18d5478621cac97cf938e412883f2eb34f351cc"}], "stats": {"total": 154, "additions": 136, "deletions": 18}, "files": [{"sha": "59f7a45881ce6f94d03e6ac1a1f837b32258edd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fece97913380e58d310e5dcda45aec909eed696/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fece97913380e58d310e5dcda45aec909eed696/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fece97913380e58d310e5dcda45aec909eed696", "patch": "@@ -1,3 +1,31 @@\n+2011-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/31490\n+\t* output.h (SECTION_RELRO): Define.\n+\t(SECTION_MACH_DEP): Adjust.\n+\t(get_variable_section): New prototype.\n+\t* varpool.c (varpool_finalize_named_section_flags): New function.\n+\t(varpool_assemble_pending_decls): Call it.\n+\t* cgraph.h (varpool_finalize_named_section_flags): New prototype.\n+\t* cgraphunit.c (cgraph_output_in_order): Call\n+\tvarpool_finalize_named_section_flags.\n+\t* varasm.c (get_section): Allow section flags conflicts between\n+\trelro and read-only sections if the section hasn't been declared yet.\n+\tSet SECTION_OVERRIDE after diagnosing section type conflict.\n+\t(get_variable_section): No longer static.\n+\t(default_section_type_flags): Use SECTION_WRITE | SECTION_RELRO for\n+\treadonly sections that need relocations.\n+\t(decl_readonly_section_1): New function.\n+\t(decl_readonly_section): Use it.\n+\n+\tRevert:\n+\t2010-11-17  Dinar Temirbulatov <dtemirbulatov@gmail.com>\n+\t\t    Steve Ellcey  <sje@cup.hp.com>\n+\n+\tPR middle-end/31490\n+\t* varasm.c (categorize_decl_for_section): Ignore reloc_rw_mask\n+\tif section attribute used.\n+\n 2011-02-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/darwin.h (SECTION_NO_ANCHOR): Remove."}, {"sha": "de376ac81b962059264a7ae4d3bada20a167845c", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=7fece97913380e58d310e5dcda45aec909eed696", "patch": "@@ -1,5 +1,5 @@\n /* Callgraph handling code.\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Jan Hubicka\n \n@@ -720,6 +720,7 @@ bool cgraph_node_can_be_local_p (struct cgraph_node *);\n \n struct varpool_node * varpool_get_node (const_tree decl);\n void varpool_remove_node (struct varpool_node *node);\n+void varpool_finalize_named_section_flags (struct varpool_node *node);\n bool varpool_assemble_pending_decls (void);\n bool varpool_assemble_decl (struct varpool_node *node);\n bool varpool_analyze_pending_decls (void);"}, {"sha": "fdff7e39c1f89d1d651c6d1e1a35252ad85f1e1b", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=7fece97913380e58d310e5dcda45aec909eed696", "patch": "@@ -1714,6 +1714,10 @@ cgraph_output_in_order (void)\n     }\n   varpool_empty_needed_queue ();\n \n+  for (i = 0; i < max; ++i)\n+    if (nodes[i].kind == ORDER_VAR)\n+      varpool_finalize_named_section_flags (nodes[i].u.v);\n+\n   for (i = 0; i < max; ++i)\n     {\n       switch (nodes[i].kind)"}, {"sha": "c668d35211249b6407418dc683693e4253418188", "filename": "gcc/output.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=7fece97913380e58d310e5dcda45aec909eed696", "patch": "@@ -1,7 +1,7 @@\n /* Declarations for insn-output.c.  These functions are defined in recog.c,\n    final.c, and varasm.c.\n    Copyright (C) 1987, 1991, 1994, 1997, 1998, 1999, 2000, 2001, 2002,\n-   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -441,7 +441,8 @@ extern void no_asm_to_stream (FILE *);\n #define SECTION_DECLARED 0x100000\t/* section has been used */\n #define SECTION_STYLE_MASK 0x600000\t/* bits used for SECTION_STYLE */\n #define SECTION_COMMON   0x800000\t/* contains common data */\n-#define SECTION_MACH_DEP 0x1000000\t/* subsequent bits reserved for target */\n+#define SECTION_RELRO\t 0x1000000\t/* data is readonly after relocation processing */\n+#define SECTION_MACH_DEP 0x2000000\t/* subsequent bits reserved for target */\n \n /* This SECTION_STYLE is used for unnamed sections that we can switch\n    to using a special assembler directive.  */\n@@ -585,6 +586,7 @@ extern section *get_unnamed_section (unsigned int, void (*) (const void *),\n \t\t\t\t     const void *);\n extern section *get_section (const char *, unsigned int, tree);\n extern section *get_named_section (tree, const char *, int);\n+extern section *get_variable_section (tree, bool);\n extern void place_block_symbol (rtx);\n extern rtx get_section_anchor (struct object_block *, HOST_WIDE_INT,\n \t\t\t       enum tls_model);"}, {"sha": "e32c521dabe3297e4741c4c6294d0d2c5698bc6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7fece97913380e58d310e5dcda45aec909eed696", "patch": "@@ -1,3 +1,10 @@\n+2011-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/31490\n+\t* gcc.dg/pr31490-2.c: New test.\n+\t* gcc.dg/pr31490-3.c: New test.\n+\t* gcc.dg/pr31490-4.c: New test.\n+\n 2011-02-03  Nathan Froyd  <froydnj@codesourcery.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "2449ac468b5ce267eaf4953b2fe5f72ca783b930", "filename": "gcc/testsuite/gcc.dg/pr31490-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31490-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31490-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31490-2.c?ref=7fece97913380e58d310e5dcda45aec909eed696", "patch": "@@ -0,0 +1,7 @@\n+/* PR middle-end/31490 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fpic\" { target fpic } } */\n+/* { dg-require-named-sections \"\" } */\n+\n+const char *const x __attribute__((section(\"foo\"))) = \"\";\n+const char *const g __attribute__((section(\"foo\"))) = (const char *) 0;"}, {"sha": "e7ccc677de14a1bd28c34d5201d1dedecb3709be", "filename": "gcc/testsuite/gcc.dg/pr31490-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31490-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31490-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31490-3.c?ref=7fece97913380e58d310e5dcda45aec909eed696", "patch": "@@ -0,0 +1,7 @@\n+/* PR middle-end/31490 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fpic\" { target fpic } } */\n+/* { dg-require-named-sections \"\" } */\n+\n+const char *const x __attribute__((section(\"foo\"))) = (const char *) 0;\n+const char *const g __attribute__((section(\"foo\"))) = \"bar\";"}, {"sha": "cbfc68730f60ce5fc6650e44b85c7b5fe70e5a39", "filename": "gcc/testsuite/gcc.dg/pr31490-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31490-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31490-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31490-4.c?ref=7fece97913380e58d310e5dcda45aec909eed696", "patch": "@@ -0,0 +1,10 @@\n+/* PR middle-end/31490 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -fpic\" { target fpic } } */\n+/* { dg-require-named-sections \"\" } */\n+\n+const char *const x __attribute__((section(\"foo\"))) = \"\";\n+const char *const g __attribute__((section(\"foo\"))) = (const char *) 0;\n+const char *const y __attribute__((section(\"bar\"))) = (const char *) 0;\n+const char *const h __attribute__((section(\"bar\"))) = \"bar\";"}, {"sha": "3a9fbae59011bf54eff93bed9a8fb6941f452354", "filename": "gcc/varasm.c", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=7fece97913380e58d310e5dcda45aec909eed696", "patch": "@@ -119,6 +119,7 @@ static void output_addressed_constants (tree);\n static unsigned HOST_WIDE_INT array_size_for_constructor (tree);\n static unsigned min_align (unsigned, unsigned);\n static void globalize_decl (tree);\n+static bool decl_readonly_section_1 (enum section_category);\n #ifdef BSS_SECTION_ASM_OP\n #ifdef ASM_OUTPUT_BSS\n static void asm_output_bss (FILE *, tree, const char *,\n@@ -294,11 +295,31 @@ get_section (const char *name, unsigned int flags, tree decl)\n       if ((sect->common.flags & ~SECTION_DECLARED) != flags\n \t  && ((sect->common.flags | flags) & SECTION_OVERRIDE) == 0)\n \t{\n+\t  /* It is fine if one of the section flags is\n+\t     SECTION_WRITE | SECTION_RELRO and the other has none of these\n+\t     flags (i.e. read-only) in named sections and either the\n+\t     section hasn't been declared yet or has been declared as writable.\n+\t     In that case just make sure the resulting flags are\n+\t     SECTION_WRITE | SECTION_RELRO, ie. writable only because of\n+\t     relocations.  */\n+\t  if (((sect->common.flags ^ flags) & (SECTION_WRITE | SECTION_RELRO))\n+\t      == (SECTION_WRITE | SECTION_RELRO)\n+\t      && (sect->common.flags\n+\t\t  & ~(SECTION_DECLARED | SECTION_WRITE | SECTION_RELRO))\n+\t\t == (flags & ~(SECTION_WRITE | SECTION_RELRO))\n+\t      && ((sect->common.flags & SECTION_DECLARED) == 0\n+\t\t  || (sect->common.flags & SECTION_WRITE)))\n+\t    {\n+\t      sect->common.flags |= (SECTION_WRITE | SECTION_RELRO);\n+\t      return sect;\n+\t    }\n \t  /* Sanity check user variables for flag changes.  */\n \t  if (decl == 0)\n \t    decl = sect->named.decl;\n \t  gcc_assert (decl);\n \t  error (\"%+D causes a section type conflict\", decl);\n+\t  /* Make sure we don't error about one section multiple times.  */\n+\t  sect->common.flags |= SECTION_OVERRIDE;\n \t}\n     }\n   return sect;\n@@ -985,7 +1006,7 @@ align_variable (tree decl, bool dont_output_data)\n    should be placed.  PREFER_NOSWITCH_P is true if a noswitch\n    section should be used wherever possible.  */\n \n-static section *\n+section *\n get_variable_section (tree decl, bool prefer_noswitch_p)\n {\n   addr_space_t as = ADDR_SPACE_GENERIC;\n@@ -6026,8 +6047,18 @@ default_section_type_flags (tree decl, const char *name, int reloc)\n \n   if (decl && TREE_CODE (decl) == FUNCTION_DECL)\n     flags = SECTION_CODE;\n-  else if (decl && decl_readonly_section (decl, reloc))\n-    flags = 0;\n+  else if (decl)\n+    {\n+      enum section_category category\n+\t= categorize_decl_for_section (decl, reloc);\n+      if (decl_readonly_section_1 (category))\n+\tflags = 0;\n+      else if (category == SECCAT_DATA_REL_RO\n+\t       || category == SECCAT_DATA_REL_RO_LOCAL)\n+\tflags = SECTION_WRITE | SECTION_RELRO;\n+      else\n+\tflags = SECTION_WRITE;\n+    }\n   else\n     flags = SECTION_WRITE;\n \n@@ -6250,17 +6281,13 @@ categorize_decl_for_section (const_tree decl, int reloc)\n \t  /* Here the reloc_rw_mask is not testing whether the section should\n \t     be read-only or not, but whether the dynamic link will have to\n \t     do something.  If so, we wish to segregate the data in order to\n-\t     minimize cache misses inside the dynamic linker.  If the data\n-\t     has a section attribute, ignore reloc_rw_mask() so that all data\n-             in a given named section is catagorized in the same way.  */\n-\t  if (reloc & targetm.asm_out.reloc_rw_mask ()\n-\t      && !lookup_attribute (\"section\", DECL_ATTRIBUTES (decl)))\n+\t     minimize cache misses inside the dynamic linker.  */\n+\t  if (reloc & targetm.asm_out.reloc_rw_mask ())\n \t    ret = reloc == 1 ? SECCAT_DATA_REL_LOCAL : SECCAT_DATA_REL;\n \t  else\n \t    ret = SECCAT_DATA;\n \t}\n-      else if (reloc & targetm.asm_out.reloc_rw_mask ()\n-\t       && !lookup_attribute (\"section\", DECL_ATTRIBUTES (decl)))\n+      else if (reloc & targetm.asm_out.reloc_rw_mask ())\n \tret = reloc == 1 ? SECCAT_DATA_REL_RO_LOCAL : SECCAT_DATA_REL_RO;\n       else if (reloc || flag_merge_constants < 2)\n \t/* C and C++ don't allow different variables to share the same\n@@ -6311,24 +6338,28 @@ categorize_decl_for_section (const_tree decl, int reloc)\n   return ret;\n }\n \n-bool\n-decl_readonly_section (const_tree decl, int reloc)\n+static bool\n+decl_readonly_section_1 (enum section_category category)\n {\n-  switch (categorize_decl_for_section (decl, reloc))\n+  switch (category)\n     {\n     case SECCAT_RODATA:\n     case SECCAT_RODATA_MERGE_STR:\n     case SECCAT_RODATA_MERGE_STR_INIT:\n     case SECCAT_RODATA_MERGE_CONST:\n     case SECCAT_SRODATA:\n       return true;\n-      break;\n     default:\n       return false;\n-      break;\n     }\n }\n \n+bool\n+decl_readonly_section (const_tree decl, int reloc)\n+{\n+  return decl_readonly_section_1 (categorize_decl_for_section (decl, reloc));\n+}\n+\n /* Select a section based on the above categorization.  */\n \n section *"}, {"sha": "5d0eb6893ffd3dd890412d3726e2c57a80432f16", "filename": "gcc/varpool.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fece97913380e58d310e5dcda45aec909eed696/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=7fece97913380e58d310e5dcda45aec909eed696", "patch": "@@ -565,11 +565,29 @@ varpool_remove_unreferenced_decls (void)\n   varpool_analyze_pending_decls ();\n }\n \n+/* For variables in named sections make sure get_variable_section\n+   is called before we switch to those sections.  Then section\n+   conflicts between read-only and read-only requiring relocations\n+   sections can be resolved.  */\n+void\n+varpool_finalize_named_section_flags (struct varpool_node *node)\n+{\n+  if (!TREE_ASM_WRITTEN (node->decl)\n+      && !node->alias\n+      && !node->in_other_partition\n+      && !DECL_EXTERNAL (node->decl)\n+      && TREE_CODE (node->decl) == VAR_DECL\n+      && !DECL_HAS_VALUE_EXPR_P (node->decl)\n+      && DECL_SECTION_NAME (node->decl))\n+    get_variable_section (node->decl, false);\n+}\n+\n /* Output all variables enqueued to be assembled.  */\n bool\n varpool_assemble_pending_decls (void)\n {\n   bool changed = false;\n+  struct varpool_node *node;\n \n   if (seen_error ())\n     return false;\n@@ -580,6 +598,9 @@ varpool_assemble_pending_decls (void)\n      elsewhere.  */\n   varpool_analyze_pending_decls ();\n \n+  for (node = varpool_nodes_queue; node; node = node->next_needed)\n+    varpool_finalize_named_section_flags (node);\n+\n   while (varpool_nodes_queue)\n     {\n       struct varpool_node *node = varpool_nodes_queue;"}]}