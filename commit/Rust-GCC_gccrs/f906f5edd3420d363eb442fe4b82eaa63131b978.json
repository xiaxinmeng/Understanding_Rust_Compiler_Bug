{"sha": "f906f5edd3420d363eb442fe4b82eaa63131b978", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkwNmY1ZWRkMzQyMGQzNjNlYjQ0MmZlNGI4MmVhYTYzMTMxYjk3OA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2016-07-12T16:05:18Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2016-07-12T16:05:18Z"}, "message": "_divkc3.c: New.\n\n[libgcc]\n\n2016-07-12  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/_divkc3.c: New.\n\t* config/rs6000/_mulkc3.c: New.\n\t* config/rs6000/quad-float128.h: Define TFtype; declare _mulkc3\n\tand _divkc3.\n\t* config/rs6000/t-float128: Add _mulkc3 and _divkc3 to\n\tfp128_ppc_funcs.\n\n[gcc/testsuite]\n\n2016-07-12  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/divkc3-1.c: New.\n\t* gcc.target/powerpc/mulkc3-1.c: New.\n\nFrom-SVN: r238253", "tree": {"sha": "9d65576373e11ee68eb6d3fa8b76a6c3740e43a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d65576373e11ee68eb6d3fa8b76a6c3740e43a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f906f5edd3420d363eb442fe4b82eaa63131b978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f906f5edd3420d363eb442fe4b82eaa63131b978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f906f5edd3420d363eb442fe4b82eaa63131b978", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f906f5edd3420d363eb442fe4b82eaa63131b978/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4661839ee33dff6b43625e9e69fd9a74830556b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4661839ee33dff6b43625e9e69fd9a74830556b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4661839ee33dff6b43625e9e69fd9a74830556b4"}], "stats": {"total": 201, "additions": 200, "deletions": 1}, "files": [{"sha": "143a5bfc5adc7c3cc0aa7a6274a4704dc7719521", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f906f5edd3420d363eb442fe4b82eaa63131b978/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f906f5edd3420d363eb442fe4b82eaa63131b978/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f906f5edd3420d363eb442fe4b82eaa63131b978", "patch": "@@ -1,3 +1,8 @@\n+2016-07-12  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/divkc3-1.c: New.\n+\t* gcc.target/powerpc/mulkc3-1.c: New.\n+\n 2016-07-12  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/params/blocksort-part.c: New test."}, {"sha": "7d9e1b1504a15349d5679b38fd774357bf788146", "filename": "gcc/testsuite/gcc.target/powerpc/divkc3-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f906f5edd3420d363eb442fe4b82eaa63131b978/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdivkc3-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f906f5edd3420d363eb442fe4b82eaa63131b978/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdivkc3-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fdivkc3-1.c?ref=f906f5edd3420d363eb442fe4b82eaa63131b978", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run { target { powerpc64*-*-* && vsx_hw } } } */\n+/* { dg-options \"-mfloat128 -mvsx\" } */\n+\n+void abort ();\n+\n+typedef __complex float __cfloat128 __attribute__((mode(KC)));\n+\n+__cfloat128 divide (__cfloat128 x, __cfloat128 y)\n+{\n+  return x / y;\n+}\n+\n+__cfloat128 z, a;\n+\n+int main ()\n+{\n+  z = divide (5.0q + 5.0jq, 2.0q + 1.0jq);\n+  a = 3.0q + 1.0jq;\n+  if (z != a)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "bacc7ab058b3a1d9599f806bf480032c3c3f92e7", "filename": "gcc/testsuite/gcc.target/powerpc/mulkc3-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f906f5edd3420d363eb442fe4b82eaa63131b978/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmulkc3-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f906f5edd3420d363eb442fe4b82eaa63131b978/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmulkc3-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmulkc3-1.c?ref=f906f5edd3420d363eb442fe4b82eaa63131b978", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run { target { powerpc64*-*-* && vsx_hw } } } */\n+/* { dg-options \"-mfloat128 -mvsx\" } */\n+\n+void abort ();\n+\n+typedef __complex float __cfloat128 __attribute__((mode(KC)));\n+\n+__cfloat128 multiply (__cfloat128 x, __cfloat128 y)\n+{\n+  return x * y;\n+}\n+\n+__cfloat128 z, a;\n+\n+int main ()\n+{\n+  z = multiply (2.0q + 1.0jq, 3.0q + 1.0jq);\n+  a = 5.0q + 5.0jq;\n+  if (z != a)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "b3aaf3dc243b1f6a2768099362175972ccb71dde", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f906f5edd3420d363eb442fe4b82eaa63131b978/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f906f5edd3420d363eb442fe4b82eaa63131b978/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=f906f5edd3420d363eb442fe4b82eaa63131b978", "patch": "@@ -1,3 +1,12 @@\n+2016-07-12  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/_divkc3.c: New.\n+\t* config/rs6000/_mulkc3.c: New.\n+\t* config/rs6000/quad-float128.h: Define TFtype; declare _mulkc3\n+\tand _divkc3.\n+\t* config/rs6000/t-float128: Add _mulkc3 and _divkc3 to\n+\tfp128_ppc_funcs.\n+\n 2016-07-11  Hale Wang  <hale.wang@arm.com>\n \t    Andre Vieira  <andre.simoesdiasvieira@arm.com>\n "}, {"sha": "9b9afd0a7b1274157ab1dccc14a2e9a34afea7cd", "filename": "libgcc/config/rs6000/_divkc3.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f906f5edd3420d363eb442fe4b82eaa63131b978/libgcc%2Fconfig%2Frs6000%2F_divkc3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f906f5edd3420d363eb442fe4b82eaa63131b978/libgcc%2Fconfig%2Frs6000%2F_divkc3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_divkc3.c?ref=f906f5edd3420d363eb442fe4b82eaa63131b978", "patch": "@@ -0,0 +1,64 @@\n+typedef float KFtype __attribute__ ((mode (KF)));\n+typedef __complex float KCtype __attribute__ ((mode (KC)));\n+\n+#define COPYSIGN(x,y) __builtin_copysignq (x, y)\n+#define INFINITY __builtin_infq ()\n+#define FABS __builtin_fabsq\n+#define isnan __builtin_isnan\n+#define isinf __builtin_isinf\n+#define isfinite __builtin_isfinite\n+\n+KCtype\n+__divkc3 (KFtype a, KFtype b, KFtype c, KFtype d)\n+{\n+  KFtype denom, ratio, x, y;\n+  KCtype res;\n+\n+  /* ??? We can get better behavior from logarithmic scaling instead of\n+     the division.  But that would mean starting to link libgcc against\n+     libm.  We could implement something akin to ldexp/frexp as gcc builtins\n+     fairly easily...  */\n+  if (FABS (c) < FABS (d))\n+    {\n+      ratio = c / d;\n+      denom = (c * ratio) + d;\n+      x = ((a * ratio) + b) / denom;\n+      y = ((b * ratio) - a) / denom;\n+    }\n+  else\n+    {\n+      ratio = d / c;\n+      denom = (d * ratio) + c;\n+      x = ((b * ratio) + a) / denom;\n+      y = (b - (a * ratio)) / denom;\n+    }\n+\n+  /* Recover infinities and zeros that computed as NaN+iNaN; the only cases\n+     are nonzero/zero, infinite/finite, and finite/infinite.  */\n+  if (isnan (x) && isnan (y))\n+    {\n+      if (c == 0.0 && d == 0.0 && (!isnan (a) || !isnan (b)))\n+\t{\n+\t  x = COPYSIGN (INFINITY, c) * a;\n+\t  y = COPYSIGN (INFINITY, c) * b;\n+\t}\n+      else if ((isinf (a) || isinf (b)) && isfinite (c) && isfinite (d))\n+\t{\n+\t  a = COPYSIGN (isinf (a) ? 1 : 0, a);\n+\t  b = COPYSIGN (isinf (b) ? 1 : 0, b);\n+\t  x = INFINITY * (a * c + b * d);\n+\t  y = INFINITY * (b * c - a * d);\n+\t}\n+      else if ((isinf (c) || isinf (d)) && isfinite (a) && isfinite (b))\n+\t{\n+\t  c = COPYSIGN (isinf (c) ? 1 : 0, c);\n+\t  d = COPYSIGN (isinf (d) ? 1 : 0, d);\n+\t  x = 0.0 * (a * c + b * d);\n+\t  y = 0.0 * (b * c - a * d);\n+\t}\n+    }\n+\n+  __real__ res = x;\n+  __imag__ res = y;\n+  return res;\n+}"}, {"sha": "f89bf8c636883fffe48ebf81bdc2500585cb49a1", "filename": "libgcc/config/rs6000/_mulkc3.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f906f5edd3420d363eb442fe4b82eaa63131b978/libgcc%2Fconfig%2Frs6000%2F_mulkc3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f906f5edd3420d363eb442fe4b82eaa63131b978/libgcc%2Fconfig%2Frs6000%2F_mulkc3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_mulkc3.c?ref=f906f5edd3420d363eb442fe4b82eaa63131b978", "patch": "@@ -0,0 +1,69 @@\n+typedef float KFtype __attribute__ ((mode (KF)));\n+typedef __complex float KCtype __attribute__ ((mode (KC)));\n+\n+#define COPYSIGN(x,y) __builtin_copysignq (x, y)\n+#define INFINITY __builtin_infq ()\n+#define isnan __builtin_isnan\n+#define isinf __builtin_isinf\n+\n+KCtype\n+__mulkc3 (KFtype a, KFtype b, KFtype c, KFtype d)\n+{\n+  KFtype ac, bd, ad, bc, x, y;\n+  KCtype res;\n+\n+  ac = a * c;\n+  bd = b * d;\n+  ad = a * d;\n+  bc = b * c;\n+\n+  x = ac - bd;\n+  y = ad + bc;\n+\n+  if (isnan (x) && isnan (y))\n+    {\n+      /* Recover infinities that computed as NaN + iNaN.  */\n+      _Bool recalc = 0;\n+      if (isinf (a) || isinf (b))\n+\t{\n+\t  /* z is infinite.  \"Box\" the infinity and change NaNs in\n+\t     the other factor to 0.  */\n+\t  a = COPYSIGN (isinf (a) ? 1 : 0, a);\n+\t  b = COPYSIGN (isinf (b) ? 1 : 0, b);\n+\t  if (isnan (c)) c = COPYSIGN (0, c);\n+\t  if (isnan (d)) d = COPYSIGN (0, d);\n+          recalc = 1;\n+\t}\n+     if (isinf (c) || isinf (d))\n+\t{\n+\t  /* w is infinite.  \"Box\" the infinity and change NaNs in\n+\t     the other factor to 0.  */\n+\t  c = COPYSIGN (isinf (c) ? 1 : 0, c);\n+\t  d = COPYSIGN (isinf (d) ? 1 : 0, d);\n+\t  if (isnan (a)) a = COPYSIGN (0, a);\n+\t  if (isnan (b)) b = COPYSIGN (0, b);\n+\t  recalc = 1;\n+\t}\n+     if (!recalc\n+\t  && (isinf (ac) || isinf (bd)\n+\t      || isinf (ad) || isinf (bc)))\n+\t{\n+\t  /* Recover infinities from overflow by changing NaNs to 0.  */\n+\t  if (isnan (a)) a = COPYSIGN (0, a);\n+\t  if (isnan (b)) b = COPYSIGN (0, b);\n+\t  if (isnan (c)) c = COPYSIGN (0, c);\n+\t  if (isnan (d)) d = COPYSIGN (0, d);\n+\t  recalc = 1;\n+\t}\n+      if (recalc)\n+\t{\n+\t  x = INFINITY * (a * c - b * d);\n+\t  y = INFINITY * (a * d + b * c);\n+\t}\n+    }\n+\n+  __real__ res = x;\n+  __imag__ res = y;\n+  return res;\n+}\n+"}, {"sha": "244a0475255be256e663a6f0fb61429c3edee696", "filename": "libgcc/config/rs6000/quad-float128.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f906f5edd3420d363eb442fe4b82eaa63131b978/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f906f5edd3420d363eb442fe4b82eaa63131b978/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h?ref=f906f5edd3420d363eb442fe4b82eaa63131b978", "patch": "@@ -33,6 +33,10 @@\n    This define forces it to use KFmode (aka, ieee 128-bit floating point).  */\n #define TF KF\n \n+/* We also need TCtype to represent complex ieee 128-bit float for\n+   __mulkc3 and __divkc3.  */\n+typedef __complex float TCtype __attribute__ ((mode (KC)));\n+\n /* Force the use of the VSX instruction set.  */\n #if defined(_ARCH_PPC) && (!defined(__VSX__) || !defined(__FLOAT128__))\n #pragma GCC target (\"vsx,float128\")\n@@ -154,6 +158,10 @@ extern TFtype __floatundikf (UDItype_ppc);\n extern IBM128_TYPE __extendkftf2 (TFtype);\n extern TFtype __trunctfkf2 (IBM128_TYPE);\n \n+/* Complex __float128 built on __float128 interfaces.  */\n+extern TCtype __mulkc3 (TFtype, TFtype, TFtype, TFtype);\n+extern TCtype __divkc3 (TFtype, TFtype, TFtype, TFtype);\n+\n /* Implementation of conversions between __ibm128 and __float128, to allow the\n    same code to be used on systems with IEEE 128-bit emulation and with IEEE\n    128-bit hardware support.  */"}, {"sha": "2c52ca64b6588da5e2ae82889241047d410acab9", "filename": "libgcc/config/rs6000/t-float128", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f906f5edd3420d363eb442fe4b82eaa63131b978/libgcc%2Fconfig%2Frs6000%2Ft-float128", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f906f5edd3420d363eb442fe4b82eaa63131b978/libgcc%2Fconfig%2Frs6000%2Ft-float128", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128?ref=f906f5edd3420d363eb442fe4b82eaa63131b978", "patch": "@@ -25,7 +25,7 @@ fp128_softfp_obj\t= $(fp128_softfp_static_obj) $(fp128_softfp_shared_obj)\n # New functions for software emulation\n fp128_ppc_funcs\t\t= floattikf floatuntikf fixkfti fixunskfti \\\n \t\t\t  extendkftf2-sw trunctfkf2-sw \\\n-\t\t\t  sfp-exceptions\n+\t\t\t  sfp-exceptions _mulkc3 _divkc3\n \n fp128_ppc_src\t\t= $(addprefix $(srcdir)/config/rs6000/,$(addsuffix \\\n \t\t\t\t.c,$(fp128_ppc_funcs)))"}]}