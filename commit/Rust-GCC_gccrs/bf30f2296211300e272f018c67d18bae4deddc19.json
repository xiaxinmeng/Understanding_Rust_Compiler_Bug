{"sha": "bf30f2296211300e272f018c67d18bae4deddc19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYzMGYyMjk2MjExMzAwZTI3MmYwMThjNjdkMThiYWU0ZGVkZGMxOQ==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gmail.com", "date": "2012-09-05T04:06:24Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2012-09-05T04:06:24Z"}, "message": "random: Add __gnu_cxx:normal_mv_distribution<> class.\n\n\n\t* include/ext/random: Add __gnu_cxx:normal_mv_distribution<> class.\n\t* include/ext/random.tccAdd out-of-line functions for\n\t__gnu_cxx::normal_mv_distribution<>.\n\t* testsuite/26_numerics/random/normal_mv_distribution/\n\toperators/equal.cc: New file.\n\t* testsuite/26_numerics/random/normal_mv_distribution/\n\toperators/serialize.cc: New file.\n\t* testsuite/26_numerics/random/normal_mv_distribution/\n\toperators/inequal.cc: New file.\n\t* testsuite/26_numerics/random/normal_mv_distribution/\n\tcons/default.cc: New file.\n\t* testsuite/26_numerics/random/normal_mv_distribution/\n\tcons/parms.cc: New file.\n\t* testsuite/26_numerics/random/normal_mv_distribution/\n\trequirements/explicit_instantiation/1.cc: New file.\n\t* testsuite/26_numerics/random/normal_mv_distribution/\n\trequirements/typedefs.cc: New file.\n\nFrom-SVN: r190960", "tree": {"sha": "b10aaf5c043c4ab7c523397d95cbff6b248b7709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b10aaf5c043c4ab7c523397d95cbff6b248b7709"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf30f2296211300e272f018c67d18bae4deddc19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf30f2296211300e272f018c67d18bae4deddc19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf30f2296211300e272f018c67d18bae4deddc19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf30f2296211300e272f018c67d18bae4deddc19/comments", "author": {"login": "drepper", "id": 2918631, "node_id": "MDQ6VXNlcjI5MTg2MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2918631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drepper", "html_url": "https://github.com/drepper", "followers_url": "https://api.github.com/users/drepper/followers", "following_url": "https://api.github.com/users/drepper/following{/other_user}", "gists_url": "https://api.github.com/users/drepper/gists{/gist_id}", "starred_url": "https://api.github.com/users/drepper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drepper/subscriptions", "organizations_url": "https://api.github.com/users/drepper/orgs", "repos_url": "https://api.github.com/users/drepper/repos", "events_url": "https://api.github.com/users/drepper/events{/privacy}", "received_events_url": "https://api.github.com/users/drepper/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "29ac1b66e0942d84eb58ab572cdcca5b9fb6f381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29ac1b66e0942d84eb58ab572cdcca5b9fb6f381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29ac1b66e0942d84eb58ab572cdcca5b9fb6f381"}], "stats": {"total": 844, "additions": 834, "deletions": 10}, "files": [{"sha": "15d84858fd1e7066a344fb8c82868e62b13e7896", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bf30f2296211300e272f018c67d18bae4deddc19", "patch": "@@ -1,22 +1,41 @@\n+2012-09-05  Ulrich Drepper  <drepper@gmail.com>\n+\n+\t* include/ext/random: Add __gnu_cxx:normal_mv_distribution<> class.\n+\t* include/ext/random.tccAdd out-of-line functions for\n+\t__gnu_cxx::normal_mv_distribution<>.\n+\t* testsuite/26_numerics/random/normal_mv_distribution/\n+\toperators/equal.cc: New file.\n+\t* testsuite/26_numerics/random/normal_mv_distribution/\n+\toperators/serialize.cc: New file.\n+\t* testsuite/26_numerics/random/normal_mv_distribution/\n+\toperators/inequal.cc: New file.\n+\t* testsuite/26_numerics/random/normal_mv_distribution/\n+\tcons/default.cc: New file.\n+\t* testsuite/26_numerics/random/normal_mv_distribution/\n+\tcons/parms.cc: New file.\n+\t* testsuite/26_numerics/random/normal_mv_distribution/\n+\trequirements/explicit_instantiation/1.cc: New file.\n+\t* testsuite/26_numerics/random/normal_mv_distribution/\n+\trequirements/typedefs.cc: New file.\n+\n 2012-09-04  Ulrich Drepper  <drepper@gmail.com>\n \n-\t* libstdc++-v3/include/ext/random: Add __gnu_cxx::beta_distribution<>\n-\tclass.\n-\t* libstdc++-v3/include/ext/random.tcc: Add out-of-line functions for\n+\t* include/ext/random: Add __gnu_cxx::beta_distribution<> class.\n+\t* include/ext/random.tcc: Add out-of-line functions for\n \t__gnu_cxx::beta_distribution<>.\n-\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\t* testsuite/26_numerics/random/beta_distribution/\n \toperators/equal.cc: New file.\n-\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\t* testsuite/26_numerics/random/beta_distribution/\n \toperators/serialize.cc: New file.\n-\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\t* testsuite/26_numerics/random/beta_distribution/\n \toperators/inequal.cc: New file.\n-\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\t* testsuite/26_numerics/random/beta_distribution/\n \tcons/parms.cc: New file.\n-\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\t* testsuite/26_numerics/random/beta_distribution/\n \tcons/default.cc: New file.\n-\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\t* testsuite/26_numerics/random/beta_distribution/\n \trequirements/typedefs.cc: New file.\n-\t* libstdc++-v3/testsuite/26_numerics/random/beta_distribution/\n+\t* testsuite/26_numerics/random/beta_distribution/\n \trequirements/explicit_instantiation/1.cc: New file.\n \n 2012-09-04  Steven Bosscher  <steven@gcc.gnu.org>"}, {"sha": "6bb438a855812eaf51af5cd2d5381313cfb1c780", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 305, "deletions": 0, "changes": 305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=bf30f2296211300e272f018c67d18bae4deddc19", "patch": "@@ -32,6 +32,7 @@\n #pragma GCC system_header\n \n #include <random>\n+#include <array>\n #ifdef __SSE2__\n # include <x86intrin.h>\n #endif\n@@ -590,6 +591,310 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return !(__d1 == __d2); }\n \n \n+  /**\n+   * @brief A multi-variate normal continuous distribution for random numbers.\n+   *\n+   * The formula for the normal probability density function is\n+   * @f[\n+   *     p(\\overrightarrow{x}|\\overrightarrow{\\mu },\\Sigma) =\n+   *       \\frac{1}{\\sqrt{(2\\pi )^k\\det(\\Sigma))}}\n+   *       e^{-\\frac{1}{2}(\\overrightarrow{x}-\\overrightarrow{\\mu})^\\text{T}\n+   *          \\Sigma ^{-1}(\\overrightarrow{x}-\\overrightarrow{\\mu})}\n+   * @f]\n+   *\n+   * where @f$\\overrightarrow{x}@f$ and @f$\\overrightarrow{\\mu}@f$ are\n+   * vectors of dimension @f$k@f$ and @f$\\Sigma@f$ is the covariance\n+   * matrix (which must be positive-definite).\n+   */\n+  template<std::size_t _Dimen, typename _RealType = double>\n+    class normal_mv_distribution\n+    {\n+      static_assert(std::is_floating_point<_RealType>::value,\n+\t\t    \"template argument not a floating point type\");\n+      static_assert(_Dimen != 0, \"dimension is zero\");\n+\n+    public:\n+      /** The type of the range of the distribution. */\n+      typedef std::array<_RealType, _Dimen> result_type;\n+      /** Parameter type. */\n+      class param_type\n+      {\n+\tstatic constexpr size_t _M_t_size = _Dimen * (_Dimen + 1) / 2;\n+\n+      public:\n+\ttypedef normal_mv_distribution<_Dimen, _RealType> distribution_type;\n+\tfriend class normal_mv_distribution<_Dimen, _RealType>;\n+\n+\tparam_type()\n+\t{\n+\t  std::fill(_M_mean.begin(), _M_mean.end(), _RealType(0));\n+\t  auto __it = _M_t.begin();\n+\t  for (size_t __i = 0; __i < _Dimen; ++__i)\n+\t    {\n+\t      std::fill_n(__it, __i, _RealType(0));\n+\t      __it += __i;\n+\t      *__it++ = _RealType(1);\n+\t    }\n+\t}\n+\n+\ttemplate<typename _ForwardIterator1, typename _ForwardIterator2>\n+\t  param_type(_ForwardIterator1 __meanbegin,\n+\t\t     _ForwardIterator1 __meanend,\n+\t\t     _ForwardIterator2 __varcovbegin,\n+\t\t     _ForwardIterator2 __varcovend)\n+\t{\n+\t  __glibcxx_function_requires(_ForwardIteratorConcept<\n+\t\t\t\t      _ForwardIterator1>)\n+\t  __glibcxx_function_requires(_ForwardIteratorConcept<\n+\t\t\t\t      _ForwardIterator2>)\n+\t  _GLIBCXX_DEBUG_ASSERT(std::distance(__meanbegin, __meanend)\n+\t\t\t\t<= _Dimen);\n+\t  const auto __dist = std::distance(__varcovbegin, __varcovend);\n+\t  _GLIBCXX_DEBUG_ASSERT(__dist == _Dimen * _Dimen\n+\t\t\t\t|| __dist == _Dimen * (_Dimen + 1) / 2\n+\t\t\t\t|| __dist == _Dimen);\n+\n+\t  if (__dist == _Dimen * _Dimen)\n+\t    _M_init_full(__meanbegin, __meanend, __varcovbegin, __varcovend);\n+\t  else if (__dist == _Dimen * (_Dimen + 1) / 2)\n+\t    _M_init_lower(__meanbegin, __meanend, __varcovbegin, __varcovend);\n+\t  else\n+\t    _M_init_diagonal(__meanbegin, __meanend,\n+\t\t\t     __varcovbegin, __varcovend);\n+\t}\n+\n+\tparam_type(std::initializer_list<_RealType> __mean,\n+\t\t   std::initializer_list<_RealType> __varcov)\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT(__mean.size() <= _Dimen);\n+\t  _GLIBCXX_DEBUG_ASSERT(__varcov.size() == _Dimen * _Dimen\n+\t\t\t\t|| __varcov.size() == _Dimen * (_Dimen + 1) / 2\n+\t\t\t\t|| __varcov.size() == _Dimen);\n+\n+\t  if (__varcov.size() == _Dimen * _Dimen)\n+\t    _M_init_full(__mean.begin(), __mean.end(),\n+\t\t\t __varcov.begin(), __varcov.end());\n+\t  else if (__varcov.size() == _Dimen * (_Dimen + 1) / 2)\n+\t    _M_init_lower(__mean.begin(), __mean.end(),\n+\t\t\t  __varcov.begin(), __varcov.end());\n+\t  else\n+\t    _M_init_diagonal(__mean.begin(), __mean.end(),\n+\t\t\t     __varcov.begin(), __varcov.end());\n+\t}\n+\n+\tstd::array<_RealType, _Dimen>\n+\tmean() const\n+\t{ return _M_mean; }\n+\n+\tstd::array<_RealType, _M_t_size>\n+\tvarcov() const\n+\t{ return _M_t; }\n+\n+\tfriend bool\n+\toperator==(const param_type& __p1, const param_type& __p2)\n+\t{ return __p1._M_mean == __p2._M_mean && __p1._M_t == __p2._M_t; }\n+\n+      private:\n+\ttemplate <typename _InputIterator1, typename _InputIterator2>\n+\t  void _M_init_full(_InputIterator1 __meanbegin,\n+\t\t\t    _InputIterator1 __meanend,\n+\t\t\t    _InputIterator2 __varcovbegin,\n+\t\t\t    _InputIterator2 __varcovend);\n+\ttemplate <typename _InputIterator1, typename _InputIterator2>\n+\t  void _M_init_lower(_InputIterator1 __meanbegin,\n+\t\t\t     _InputIterator1 __meanend,\n+\t\t\t     _InputIterator2 __varcovbegin,\n+\t\t\t     _InputIterator2 __varcovend);\n+\ttemplate <typename _InputIterator1, typename _InputIterator2>\n+\t  void _M_init_diagonal(_InputIterator1 __meanbegin,\n+\t\t\t\t_InputIterator1 __meanend,\n+\t\t\t\t_InputIterator2 __varbegin,\n+\t\t\t\t_InputIterator2 __varend);\n+\n+\tstd::array<_RealType, _Dimen> _M_mean;\n+\tstd::array<_RealType, _M_t_size> _M_t;\n+      };\n+\n+    public:\n+      normal_mv_distribution()\n+      : _M_param(), _M_nd()\n+      { }\n+\n+      template<typename _ForwardIterator1, typename _ForwardIterator2>\n+\tnormal_mv_distribution(_ForwardIterator1 __meanbegin,\n+\t\t\t       _ForwardIterator1 __meanend,\n+\t\t\t       _ForwardIterator2 __varcovbegin,\n+\t\t\t       _ForwardIterator2 __varcovend)\n+\t: _M_param(__meanbegin, __meanend, __varcovbegin, __varcovend),\n+\t  _M_nd()\n+\t{ }\n+\n+      normal_mv_distribution(std::initializer_list<_RealType> __mean,\n+\t\t\t     std::initializer_list<_RealType> __varcov)\n+      : _M_param(__mean, __varcov), _M_nd()\n+      { }\n+\n+      explicit\n+      normal_mv_distribution(const param_type& __p)\n+      : _M_param(__p), _M_nd()\n+      { }\n+\n+      /**\n+       * @brief Resets the distribution state.\n+       */\n+      void\n+      reset()\n+      { _M_nd.reset(); }\n+\n+      /**\n+       * @brief Returns the mean of the distribution.\n+       */\n+      result_type\n+      mean() const\n+      { return _M_param.mean(); }\n+\n+      /**\n+       * @brief Returns the compact form of the variance/covariance\n+       * matrix of the distribution.\n+       */\n+      std::array<_RealType, _Dimen * (_Dimen + 1) / 2>\n+      varcov() const\n+      { return _M_param.varcov(); }\n+\n+      /**\n+       * @brief Returns the parameter set of the distribution.\n+       */\n+      param_type\n+      param() const\n+      { return _M_param; }\n+\n+      /**\n+       * @brief Sets the parameter set of the distribution.\n+       * @param __param The new parameter set of the distribution.\n+       */\n+      void\n+      param(const param_type& __param)\n+      { _M_param = __param; }\n+\n+      /**\n+       * @brief Returns the greatest lower bound value of the distribution.\n+       */\n+      result_type\n+      min() const\n+      { result_type __res;\n+\t__res.fill(std::numeric_limits<_RealType>::min());\n+\treturn __res; }\n+\n+      /**\n+       * @brief Returns the least upper bound value of the distribution.\n+       */\n+      result_type\n+      max() const\n+      { result_type __res;\n+\t__res.fill(std::numeric_limits<_RealType>::max());\n+\treturn __res; }\n+\n+      /**\n+       * @brief Generating functions.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng)\n+\t{ return this->operator()(__urng, this->param()); }\n+\n+      template<typename _UniformRandomNumberGenerator>\n+\tresult_type\n+\toperator()(_UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p);\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng)\n+\t{ return this->__generate_impl(__f, __t, __urng, this->param()); }\n+\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t   _UniformRandomNumberGenerator& __urng,\n+\t\t   const param_type& __p)\n+\t{ return this->__generate_impl(__f, __t, __urng, __p); }\n+\n+      /**\n+       * @brief Return true if two multi-variant normal distributions have\n+       *        the same parameters and the sequences that would\n+       *        be generated are equal.\n+       */\n+      template<size_t _Dimen1, typename _RealType1>\n+\tfriend bool\n+\toperator==(const\n+\t\t   __gnu_cxx::normal_mv_distribution<_Dimen1, _RealType1>&\n+\t\t   __d1,\n+\t\t   const\n+\t\t   __gnu_cxx::normal_mv_distribution<_Dimen1, _RealType1>&\n+\t\t   __d2);\n+\n+      /**\n+       * @brief Inserts a %normal_mv_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %normal_mv_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<size_t _Dimen1, typename _RealType1,\n+\t       typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const\n+\t\t   __gnu_cxx::normal_mv_distribution<_Dimen1, _RealType1>&\n+\t\t   __x);\n+\n+      /**\n+       * @brief Extracts a %normal_mv_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %normal_mv_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error\n+       *          state.\n+       */\n+      template<size_t _Dimen1, typename _RealType1,\n+\t       typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   __gnu_cxx::normal_mv_distribution<_Dimen1, _RealType1>&\n+\t\t   __x);\n+\n+    private:\n+      template<typename _ForwardIterator,\n+\t       typename _UniformRandomNumberGenerator>\n+\tvoid\n+\t__generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t\t_UniformRandomNumberGenerator& __urng,\n+\t\t\tconst param_type& __p);\n+\n+      param_type _M_param;\n+      std::normal_distribution<_RealType> _M_nd;\n+  };\n+\n+  /**\n+   * @brief Return true if two multi-variate normal distributions are\n+   * different.\n+   */\n+  template<size_t _Dimen, typename _RealType>\n+    inline bool\n+    operator!=(const __gnu_cxx::normal_mv_distribution<_Dimen, _RealType>&\n+\t       __d1,\n+\t       const __gnu_cxx::normal_mv_distribution<_Dimen, _RealType>&\n+\t       __d2)\n+    { return !(__d1 == __d2); }\n+\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "0fa006af0bde295a428357c3892a662028620046", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=bf30f2296211300e272f018c67d18bae4deddc19", "patch": "@@ -538,6 +538,220 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __is;\n     }\n \n+\n+  template<std::size_t _Dimen, typename _RealType>\n+    template<typename _InputIterator1, typename _InputIterator2>\n+      void\n+      normal_mv_distribution<_Dimen, _RealType>::param_type::\n+      _M_init_full(_InputIterator1 __meanbegin, _InputIterator1 __meanend,\n+\t\t   _InputIterator2 __varcovbegin, _InputIterator2 __varcovend)\n+      {\n+\t__glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+\t__glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+\tstd::fill(std::copy(__meanbegin, __meanend, _M_mean.begin()),\n+\t\t  _M_mean.end(), _RealType(0));\n+\n+\t// Perform the Cholesky decomposition\n+\tauto __w = _M_t.begin();\n+\tfor (size_t __j = 0; __j < _Dimen; ++__j)\n+\t  {\n+\t    _RealType __sum = _RealType(0);\n+\n+\t    auto __slitbegin = __w;\n+\t    auto __cit = _M_t.begin();\n+\t    for (size_t __i = 0; __i < __j; ++__i)\n+\t      {\n+\t\tauto __slit = __slitbegin;\n+\t\t_RealType __s = *__varcovbegin++;\n+\t\tfor (size_t __k = 0; __k < __i; ++__k)\n+\t\t  __s -= *__slit++ * *__cit++;\n+\n+\t\t*__w++ = __s /= *__cit++;\n+\t\t__sum += __s * __s;\n+\t      }\n+\n+\t    __sum = *__varcovbegin - __sum;\n+\t    if (__builtin_expect(__sum <= _RealType(0), 0))\n+\t      std::__throw_runtime_error(__N(\"normal_mv_distribution::\"\n+\t\t\t\t\t     \"param_type::_M_init_full\"));\n+\t    *__w++ = std::sqrt(__sum);\n+\n+\t    std::advance(__varcovbegin, _Dimen - __j);\n+\t  }\n+      }\n+\n+  template<std::size_t _Dimen, typename _RealType>\n+    template<typename _InputIterator1, typename _InputIterator2>\n+      void\n+      normal_mv_distribution<_Dimen, _RealType>::param_type::\n+      _M_init_lower(_InputIterator1 __meanbegin, _InputIterator1 __meanend,\n+\t\t    _InputIterator2 __varcovbegin, _InputIterator2 __varcovend)\n+      {\n+\t__glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+\t__glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+\tstd::fill(std::copy(__meanbegin, __meanend, _M_mean.begin()),\n+\t\t  _M_mean.end(), _RealType(0));\n+\n+\t// Perform the Cholesky decomposition\n+\tauto __w = _M_t.begin();\n+\tfor (size_t __j = 0; __j < _Dimen; ++__j)\n+\t  {\n+\t    _RealType __sum = _RealType(0);\n+\n+\t    auto __slitbegin = __w;\n+\t    auto __cit = _M_t.begin();\n+\t    for (size_t __i = 0; __i < __j; ++__i)\n+\t      {\n+\t\tauto __slit = __slitbegin;\n+\t\t_RealType __s = *__varcovbegin++;\n+\t\tfor (size_t __k = 0; __k < __i; ++__k)\n+\t\t  __s -= *__slit++ * *__cit++;\n+\n+\t\t*__w++ = __s /= *__cit++;\n+\t\t__sum += __s * __s;\n+\t      }\n+\n+\t    __sum = *__varcovbegin++ - __sum;\n+\t    if (__builtin_expect(__sum <= _RealType(0), 0))\n+\t      std::__throw_runtime_error(__N(\"normal_mv_distribution::\"\n+\t\t\t\t\t     \"param_type::_M_init_full\"));\n+\t    *__w++ = std::sqrt(__sum);\n+\t  }\n+      }\n+\n+  template<std::size_t _Dimen, typename _RealType>\n+    template<typename _InputIterator1, typename _InputIterator2>\n+      void\n+      normal_mv_distribution<_Dimen, _RealType>::param_type::\n+      _M_init_diagonal(_InputIterator1 __meanbegin, _InputIterator1 __meanend,\n+\t\t       _InputIterator2 __varbegin, _InputIterator2 __varend)\n+      {\n+\t__glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n+\t__glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+\tstd::fill(std::copy(__meanbegin, __meanend, _M_mean.begin()),\n+\t\t  _M_mean.end(), _RealType(0));\n+\n+\tauto __w = _M_t.begin();\n+\tsize_t __step = 0;\n+\twhile (__varbegin != __varend)\n+\t  {\n+\t    std::fill_n(__w, __step, _RealType(0));\n+\t    __w += __step++;\n+\t    if (__builtin_expect(*__varbegin < _RealType(0), 0))\n+\t      std::__throw_runtime_error(__N(\"normal_mv_distribution::\"\n+\t\t\t\t\t     \"param_type::_M_init_diagonal\"));\n+\t    *__w++ = std::sqrt(*__varbegin++);\n+\t  }\n+      }\n+\n+  template<std::size_t _Dimen, typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename normal_mv_distribution<_Dimen, _RealType>::result_type\n+      normal_mv_distribution<_Dimen, _RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n+      {\n+\tresult_type __ret;\n+\n+\tfor (size_t __i = 0; __i < _Dimen; ++__i)\n+\t  __ret[__i] = _M_nd(__urng);\n+\n+\tauto __t_it = __param._M_t.crbegin();\n+\tfor (size_t __i = _Dimen; __i > 0; --__i)\n+\t  {\n+\t    _RealType __sum = _RealType(0);\n+\t    for (size_t __j = __i; __j > 0; --__j)\n+\t      __sum += __ret[__j - 1] * *__t_it++;\n+\t    __ret[__i - 1] = __sum;\n+\t  }\n+\n+\treturn __ret;\n+      }\n+\n+  template<std::size_t _Dimen, typename _RealType>\n+    template<typename _ForwardIterator, typename _UniformRandomNumberGenerator>\n+      void\n+      normal_mv_distribution<_Dimen, _RealType>::\n+      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,\n+\t\t      _UniformRandomNumberGenerator& __urng,\n+\t\t      const param_type& __param)\n+      {\n+\t__glibcxx_function_requires(_Mutable_ForwardIteratorConcept<\n+\t\t\t\t    _ForwardIterator>)\n+\twhile (__f != __t)\n+\t  *__f++ = this->operator()(__urng, __param);\n+      }\n+\n+  template<size_t _Dimen, typename _RealType>\n+    bool\n+    operator==(const __gnu_cxx::normal_mv_distribution<_Dimen, _RealType>&\n+\t       __d1,\n+\t       const __gnu_cxx::normal_mv_distribution<_Dimen, _RealType>&\n+\t       __d2)\n+    {\n+      return __d1._M_param == __d2._M_param && __d1._M_nd == __d2._M_nd;\n+    }\n+\n+  template<size_t _Dimen, typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const __gnu_cxx::normal_mv_distribution<_Dimen, _RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::max_digits10);\n+\n+      auto __mean = __x._M_param.mean();\n+      for (auto __it : __mean)\n+\t__os << __it << __space;\n+      auto __t = __x._M_param.varcov();\n+      for (auto __it : __t)\n+\t__os << __it << __space;\n+\n+      __os << __x._M_nd;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<size_t _Dimen, typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       __gnu_cxx::normal_mv_distribution<_Dimen, _RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      std::array<_RealType, _Dimen> __mean;\n+      for (auto& __it : __mean)\n+\t__is >> __it;\n+      std::array<_RealType, _Dimen * (_Dimen + 1) / 2> __varcov;\n+      for (auto& __it : __varcov)\n+\t__is >> __it;\n+\n+      __is >> __x._M_nd;\n+\n+      __x.param(typename normal_mv_distribution<_Dimen, _RealType>::\n+\t\tparam_type(__mean.begin(), __mean.end(),\n+\t\t\t   __varcov.begin(), __varcov.end()));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "a51fde40f039a7c0be2f53b4712d9d437033254d", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_mv_distribution/cons/default.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Fcons%2Fdefault.cc?ref=bf30f2296211300e272f018c67d18bae4deddc19", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2012-09-04  Ulrich Drepper <drepper@gmail.com>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::normal_mv_distribution<2> u;\n+  VERIFY( u.mean()[0] == 0.0 );\n+  VERIFY( u.mean()[1] == 0.0 );\n+  VERIFY( u.varcov()[0] == 1.0 );\n+  VERIFY( u.varcov()[1] == 0.0 );\n+  VERIFY( u.varcov()[2] == 1.0 );\n+  typedef __gnu_cxx::normal_mv_distribution<2>::result_type result_type;\n+  VERIFY( u.min()[0] == std::numeric_limits<result_type::value_type>::min() );\n+  VERIFY( u.max()[0] == std::numeric_limits<result_type::value_type>::max() );\n+  VERIFY( u.min()[1] == std::numeric_limits<result_type::value_type>::min() );\n+  VERIFY( u.max()[1] == std::numeric_limits<result_type::value_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d12722183e108c24cfa39f02caf2efe7f1c33379", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_mv_distribution/cons/parms.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Fcons%2Fparms.cc?ref=bf30f2296211300e272f018c67d18bae4deddc19", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2012-09-04  Ulrich Drepper <drepper@gmail.com>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::normal_mv_distribution<2> u({5.0, 4.0}, {4.0, 9.0});\n+  VERIFY( u.mean()[0] == 5.0 );\n+  VERIFY( u.mean()[1] == 4.0 );\n+  VERIFY( u.varcov()[0] == 2.0 );\n+  VERIFY( u.varcov()[1] == 0.0 );\n+  VERIFY( u.varcov()[2] == 3.0 );\n+  typedef __gnu_cxx::normal_mv_distribution<2>::result_type result_type;\n+  VERIFY( u.min()[0] == std::numeric_limits<result_type::value_type>::min() );\n+  VERIFY( u.max()[0] == std::numeric_limits<result_type::value_type>::max() );\n+  VERIFY( u.min()[1] == std::numeric_limits<result_type::value_type>::min() );\n+  VERIFY( u.max()[1] == std::numeric_limits<result_type::value_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "99b7581794738244cd3d44f9b06b624ee73387e6", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_mv_distribution/operators/equal.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Foperators%2Fequal.cc?ref=bf30f2296211300e272f018c67d18bae4deddc19", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+// 2012-09-04  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::normal_mv_distribution<2,double> u({5.0, 4.0}, {2.0, 1.5}), v, w;\n+\n+  VERIFY( v == w );\n+  VERIFY( !(u == v) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "80472a13214a191965f14bc6388c587d12835c1c", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_mv_distribution/operators/inequal.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Foperators%2Finequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Foperators%2Finequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Foperators%2Finequal.cc?ref=bf30f2296211300e272f018c67d18bae4deddc19", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2010-03-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+// 2012-09-04  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  __gnu_cxx::normal_mv_distribution<2,double> u({3.0, 5.0}, {1.0, 2.0}), v, w;\n+\n+  VERIFY( u != v );\n+  VERIFY( !(v != w) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3620a9b12bce056476b456ebe6f234d9d8d2a0bf", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_mv_distribution/operators/serialize.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Foperators%2Fserialize.cc?ref=bf30f2296211300e272f018c67d18bae4deddc19", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+// 2012-09-04  Ulrich Drepper  <drepper@gmail.com>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  __gnu_cxx::normal_mv_distribution<2,double> u({1.0, 5.0}, {2.0, 4.0}), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "55c4431a972110336b5a92402b584c7aa27e6423", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_mv_distribution/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=bf30f2296211300e272f018c67d18bae4deddc19", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++11\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2012 Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+template class __gnu_cxx::normal_mv_distribution<2,float>;\n+template class __gnu_cxx::normal_mv_distribution<2,double>;\n+template class __gnu_cxx::normal_mv_distribution<2,long double>;"}, {"sha": "4a0a14c90201700810d077207a086ad287296cd0", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_mv_distribution/requirements/typedefs.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf30f2296211300e272f018c67d18bae4deddc19/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_mv_distribution%2Frequirements%2Ftypedefs.cc?ref=bf30f2296211300e272f018c67d18bae4deddc19", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+// 2012-09-04  Ulrich Drepper <drepper@gmail.com>\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <ext/random>\n+\n+void\n+test01()\n+{\n+  typedef __gnu_cxx::normal_mv_distribution<3,double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+  typedef test_type::param_type param_type;\n+}"}]}