{"sha": "c9d25aa7489fd478098e0ef098438e797d597d3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlkMjVhYTc0ODlmZDQ3ODA5OGUwZWYwOTg0MzhlNzk3ZDU5N2QzYg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-07T14:02:02Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-08T10:29:25Z"}, "message": "aarch64: Fix RTL patterns for UABA/SABA\n\nSometime ago we changed the RTL representation of the (SU)ABD\ninstructions in RTL to a (MINUS (MAX) (MIN)) rather than a (MINUS (ABS) (ABS))\nas it is more correctly models the semantics.\nWe should do the same for the accumulation forms of these instructions:\nUABA/SABA.\n\nThis patch does that and allows the new pattern to generate the unsigned\nUABA form as well.\nThe new form also allows it to more easily be re-used to implement the\nrelevant arm_neon.h intrinsics in the future.\n\nThe testcase takes an -fno-tree-reassoc to work around a side-effect of\nPR98581.\n\ngcc/\n\t* config/aarch64/aarch64-simd.md (aba<mode>_3): Rename to...\n\t(aarch64_<su>aba<mode>): ... This.  Handle uaba as well.\n\tChange RTL pattern to match.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/usaba_1.c: New test.", "tree": {"sha": "1528daf7cbf593bba5f6952c23e0fad2511495aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1528daf7cbf593bba5f6952c23e0fad2511495aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9d25aa7489fd478098e0ef098438e797d597d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d25aa7489fd478098e0ef098438e797d597d3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d25aa7489fd478098e0ef098438e797d597d3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d25aa7489fd478098e0ef098438e797d597d3b/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21c1a30fc73105af50c5e717cb99dc3becabf8fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c1a30fc73105af50c5e717cb99dc3becabf8fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c1a30fc73105af50c5e717cb99dc3becabf8fa"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "d23398eac344d0246013f3112845d677e3a82815", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d25aa7489fd478098e0ef098438e797d597d3b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d25aa7489fd478098e0ef098438e797d597d3b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=c9d25aa7489fd478098e0ef098438e797d597d3b", "patch": "@@ -859,14 +859,18 @@\n   }\n )\n \n-(define_insn \"aba<mode>_3\"\n+(define_insn \"aarch64_<su>aba<mode>\"\n   [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n-\t(plus:VDQ_BHSI (abs:VDQ_BHSI (minus:VDQ_BHSI\n-\t\t\t (match_operand:VDQ_BHSI 1 \"register_operand\" \"w\")\n-\t\t\t (match_operand:VDQ_BHSI 2 \"register_operand\" \"w\")))\n-\t\t       (match_operand:VDQ_BHSI 3 \"register_operand\" \"0\")))]\n-  \"TARGET_SIMD\"\n-  \"saba\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n+\t(plus:VDQ_BHSI (minus:VDQ_BHSI\n+\t\t\t (USMAX:VDQ_BHSI\n+\t\t\t   (match_operand:VDQ_BHSI 2 \"register_operand\" \"w\")\n+\t\t\t   (match_operand:VDQ_BHSI 3 \"register_operand\" \"w\"))\n+\t\t\t (<max_opp>:VDQ_BHSI\n+\t\t\t   (match_dup 2)\n+\t\t\t   (match_dup 3)))\n+\t\t       (match_operand:VDQ_BHSI 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD\"\n+  \"<su>aba\\t%0.<Vtype>, %2.<Vtype>, %3.<Vtype>\"\n   [(set_attr \"type\" \"neon_arith_acc<q>\")]\n )\n "}, {"sha": "58b5bebdc94c145603ffe4d067230ae7bed61757", "filename": "gcc/testsuite/gcc.target/aarch64/usaba_1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d25aa7489fd478098e0ef098438e797d597d3b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fusaba_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d25aa7489fd478098e0ef098438e797d597d3b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fusaba_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fusaba_1.c?ref=c9d25aa7489fd478098e0ef098438e797d597d3b", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fno-tree-reassoc\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#define MIN(a, b) ((a) < (b) ? (a) : (b))\n+#define MAX(a, b) ((a) > (b) ? (a) : (b))\n+\n+#define FUNC(T, N, S)\t\\\n+void saba_##S (T * __restrict__ a, T * __restrict__ b, T * __restrict__ c)\t\\\n+{\t\\\n+  int i;\t\\\n+  for (i = 0; i < N; i++)\t\\\n+    c[i] += (MAX (a[i], b[i]) - MIN (a[i], b[i]));\t\\\n+}\n+\n+FUNC (signed char, 16, qi)\n+/* { dg-final { scan-assembler-times {saba\\tv[0-9]+\\.16b, v[0-9]+\\.16b, v[0-9]+\\.16b} 1 } } */\n+FUNC (short, 8, hi)\n+/* { dg-final { scan-assembler-times {saba\\tv[0-9]+\\.8h, v[0-9]+\\.8h, v[0-9]+\\.8h} 1 } } */\n+FUNC (int, 4, si)\n+/* { dg-final { scan-assembler-times {saba\\tv[0-9]+\\.4s, v[0-9]+\\.4s, v[0-9]+\\.4s} 1 } } */\n+FUNC (unsigned char, 16, uqi)\n+/* { dg-final { scan-assembler-times {uaba\\tv[0-9]+\\.16b, v[0-9]+\\.16b, v[0-9]+.16b} 1 } } */\n+FUNC (unsigned short, 8, uhi)\n+/* { dg-final { scan-assembler-times {uaba\\tv[0-9]+\\.8h, v[0-9]+\\.8h, v[0-9]+\\.8h} 1 } } */\n+FUNC (unsigned int, 4, usi)\n+/* { dg-final { scan-assembler-times {uaba\\tv[0-9]+\\.4s, v[0-9]+\\.4s, v[0-9]+\\.4s} 1 } } */\n+"}]}