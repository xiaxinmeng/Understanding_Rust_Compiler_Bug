{"sha": "4d031550cc895e3004f9cd23874877facc5d429a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQwMzE1NTBjYzg5NWUzMDA0ZjljZDIzODc0ODc3ZmFjYzVkNDI5YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-15T18:49:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-15T18:49:25Z"}, "message": "PR c++/71117 - core 2189 and generic lambda\n\n\t* call.c (add_template_conv_candidate): Disable if there are\n\tviable candidates.\n\nFrom-SVN: r238394", "tree": {"sha": "d29e6966bf822d43bd6e5242f9d921be3b3eaf09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d29e6966bf822d43bd6e5242f9d921be3b3eaf09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d031550cc895e3004f9cd23874877facc5d429a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d031550cc895e3004f9cd23874877facc5d429a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d031550cc895e3004f9cd23874877facc5d429a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d031550cc895e3004f9cd23874877facc5d429a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a54351ba7f9a90ede3dbc6dd2e15272b955fdd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a54351ba7f9a90ede3dbc6dd2e15272b955fdd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a54351ba7f9a90ede3dbc6dd2e15272b955fdd1"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "eb96ea3f8db22ea6bc1f09bf6379a36885c6b5e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d031550cc895e3004f9cd23874877facc5d429a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d031550cc895e3004f9cd23874877facc5d429a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4d031550cc895e3004f9cd23874877facc5d429a", "patch": "@@ -1,5 +1,10 @@\n 2016-07-15  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/71117\n+\tCore 2189\n+\t* call.c (add_template_conv_candidate): Disable if there are\n+\tviable candidates.\n+\n \tPR c++/71511\n \t* typeck2.c (cxx_incomplete_type_diagnostic): Handle DECLTYPE_TYPE.\n "}, {"sha": "6ae5df76b1caa01a9943d62079165848ee95c216", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d031550cc895e3004f9cd23874877facc5d429a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d031550cc895e3004f9cd23874877facc5d429a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4d031550cc895e3004f9cd23874877facc5d429a", "patch": "@@ -3204,6 +3204,12 @@ add_template_conv_candidate (struct z_candidate **candidates, tree tmpl,\n \t\t\t     tree return_type, tree access_path,\n \t\t\t     tree conversion_path, tsubst_flags_t complain)\n {\n+  /* Making this work broke PR 71117, so until the committee resolves core\n+     issue 2189, let's disable this candidate if there are any viable call\n+     operators.  */\n+  if (any_strictly_viable (*candidates))\n+    return NULL;\n+\n   return\n     add_template_candidate_real (candidates, tmpl, NULL_TREE, NULL_TREE,\n \t\t\t\t NULL_TREE, arglist, return_type, access_path,"}, {"sha": "eb40dd66a5c5a59e2bfaad01d8cceeb32bd65f95", "filename": "gcc/testsuite/g++.dg/cpp0x/conv-tmpl1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d031550cc895e3004f9cd23874877facc5d429a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d031550cc895e3004f9cd23874877facc5d429a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconv-tmpl1.C?ref=4d031550cc895e3004f9cd23874877facc5d429a", "patch": "@@ -1,3 +1,4 @@\n+// Test for Core 2189.\n // { dg-do compile { target c++11 } }\n \n template <class T>"}, {"sha": "5528455fe0b167c375d71b7d3efb94a7f1d6bb84", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-conv2.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d031550cc895e3004f9cd23874877facc5d429a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-conv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d031550cc895e3004f9cd23874877facc5d429a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-conv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-conv2.C?ref=4d031550cc895e3004f9cd23874877facc5d429a", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/71117\n+// { dg-do compile { target c++14 } }\n+\n+template <class T> T&& declval() noexcept;\n+template <class, class>\n+constexpr bool is_same = false;\n+template <class T>\n+constexpr bool is_same<T, T> = true;\n+\n+template <class F>\n+struct indirected : F {\n+    indirected(F f) : F(f) {}\n+    template <class I>\n+    auto operator()(I i) -> decltype(declval<F&>()(*i)) {\n+        return static_cast<F&>(*this)(*i);\n+    }\n+};\n+\n+int main() {\n+    auto f = [](auto rng) {\n+        static_assert(is_same<decltype(rng), int>, \"\");\n+        return 42;\n+    };\n+    indirected<decltype(f)> i(f);\n+    static_assert(is_same<decltype(i(declval<int*>())), int>, \"\");\n+}"}]}