{"sha": "634de54f9c421b7069865d0d7365ad97412f34bd", "node_id": "C_kwDOANBUbNoAKDYzNGRlNTRmOWM0MjFiNzA2OTg2NWQwZDczNjVhZDk3NDEyZjM0YmQ", "commit": {"author": {"name": "Jiufu Guo", "email": "guojiufu@linux.ibm.com", "date": "2022-01-21T09:03:50Z"}, "committer": {"name": "guojiufu", "email": "guojiufu@linux.ibm.com", "date": "2022-01-24T09:07:16Z"}, "message": "Update the type of control.base after changed\n\nThis patch correct the type of niter->control.base, when it is updated\nas a PLUS expr.\nDuring build PLUS expr, the result type should align with the type of\nthe operands.\n\n\tPR tree-optimization/102087\n\ngcc/ChangeLog:\n\n\t* tree-ssa-loop-niter.cc (number_of_iterations_until_wrap):\n\tCorrect PLUS result type.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr102087_1.c: New test.", "tree": {"sha": "d398f1d6b4825e4e11aec55ffa722846d230422d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d398f1d6b4825e4e11aec55ffa722846d230422d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/634de54f9c421b7069865d0d7365ad97412f34bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634de54f9c421b7069865d0d7365ad97412f34bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/634de54f9c421b7069865d0d7365ad97412f34bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634de54f9c421b7069865d0d7365ad97412f34bd/comments", "author": null, "committer": null, "parents": [{"sha": "add6bb52e34f6036ace9f67ad8ad5b990adbc34a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/add6bb52e34f6036ace9f67ad8ad5b990adbc34a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/add6bb52e34f6036ace9f67ad8ad5b990adbc34a"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "ba4efe3b412bcb3d1ad39d077143c3e133fb9148", "filename": "gcc/testsuite/gcc.dg/pr102087_1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634de54f9c421b7069865d0d7365ad97412f34bd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102087_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634de54f9c421b7069865d0d7365ad97412f34bd/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102087_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr102087_1.c?ref=634de54f9c421b7069865d0d7365ad97412f34bd", "patch": "@@ -0,0 +1,13 @@\n+/* PR tree-optimization/102087 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fprefetch-loop-arrays -w\" { target x86_64-*-* powerpc*-*-* } } */\n+\n+char **Gif_ClipImage_gfi_0;\n+int Gif_ClipImage_gfi_1, Gif_ClipImage_y, Gif_ClipImage_shift;\n+void Gif_ClipImage() {\n+  Gif_ClipImage_y = Gif_ClipImage_gfi_1 - 1;\n+  for (; Gif_ClipImage_y >= Gif_ClipImage_shift; Gif_ClipImage_y++)\n+    Gif_ClipImage_gfi_0[Gif_ClipImage_shift] =\n+        Gif_ClipImage_gfi_0[Gif_ClipImage_y];\n+}\n+"}, {"sha": "21cc257c91b24f7f92211df4066c021148a5d6be", "filename": "gcc/tree-ssa-loop-niter.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634de54f9c421b7069865d0d7365ad97412f34bd/gcc%2Ftree-ssa-loop-niter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634de54f9c421b7069865d0d7365ad97412f34bd/gcc%2Ftree-ssa-loop-niter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.cc?ref=634de54f9c421b7069865d0d7365ad97412f34bd", "patch": "@@ -1579,8 +1579,21 @@ number_of_iterations_until_wrap (class loop *loop, tree type, affine_iv *iv0,\n      { IVbase - STEP, +, STEP } != bound\n      Here, biasing IVbase by 1 step makes 'bound' be the value before wrap.\n      */\n-  niter->control.base = fold_build2 (MINUS_EXPR, niter_type,\n-\t\t\t\t     niter->control.base, niter->control.step);\n+  tree base_type = TREE_TYPE (niter->control.base);\n+  if (POINTER_TYPE_P (base_type))\n+    {\n+      tree utype = unsigned_type_for (base_type);\n+      niter->control.base\n+\t= fold_build2 (MINUS_EXPR, utype,\n+\t\t       fold_convert (utype, niter->control.base),\n+\t\t       fold_convert (utype, niter->control.step));\n+      niter->control.base = fold_convert (base_type, niter->control.base);\n+    }\n+  else\n+    niter->control.base\n+      = fold_build2 (MINUS_EXPR, base_type, niter->control.base,\n+\t\t     niter->control.step);\n+\n   span = fold_build2 (MULT_EXPR, niter_type, niter->niter,\n \t\t      fold_convert (niter_type, niter->control.step));\n   niter->bound = fold_build2 (PLUS_EXPR, niter_type, span,"}]}