{"sha": "cca59a3cfcd29b6485d4f0da92f4baa04714b5c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NhNTlhM2NmY2QyOWI2NDg1ZDRmMGRhOTJmNGJhYTA0NzE0YjVjNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-05-19T13:43:06Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-05-19T13:43:06Z"}, "message": "i386.md (rex64namesuffix): New mode attribute.\n\n\t* config/i386/i386.md (rex64namesuffix): New mode attribute.\n\t* config/i386/sse.md (sse_cvtsi2ss<rex64namesuffix><round_name>):\n\tMerge insn pattern from sse_cvtsi2ss<round_name> and\n\tsse_cvtsi2ssq<round_name> using SWI48 mode iterator.\n\t(sse_cvtss2si<rex64namesuffix><round_name>): Merge insn pattern\n\tfrom sse_cvtss2si<round_name> and sse_cvtss2siq<round_name>\n\tusing SWI48 mode iterator.\n\t(sse_cvtss2si<rex64namesuffix>_2): Merge insn pattern from\n\tsse_cvtss2si_2 and sse_cvtss2siq_2 using SWI48 mode iterator.\n\t(sse_cvttss2si<rex64namesuffix><round_saeonly_name>): Merge insn\n\tpattern from sse_cvttss2si<round_saeonly_name>\n\tand sse_cvttss2siq<round_saeonly_name> using SWI48 mode iterator.\n\t(avx512f_vcvtss2usi<rex64namesuffix><round_name>): Merge insn pattern\n\tfrom avx512f_vcvtss2usi<round_name> and avx512f_vcvtss2usiq<round_name>\n\tusing SWI48 mode iterator.\n\t(avx512f_vcvttss2usi<rex64namesuffix><round_saeonly_name>): Merge\n\tinsn pattern from avx512f_vcvttss2usi<round_saeonly_name> and\n\tavx512f_vcvttss2usiq<round_saeonly_name> using SWI48 mode iterator.\n\t(avx512f_vcvtsd2usi<rex64namesuffix><round_name>): Merge insn pattern\n\tfrom avx512f_vcvtsd2usi<round_name> and avx512f_vcvtsd2usiq<round_name>\n\tusing SWI48 mode iterator.\n\t(avx512f_vcvttsd2usi<rex64namesuffix><round_saeonly_name>): Merge\n\tinsn pattern from avx512f_vcvttsd2usi<round_saeonly_name> and\n\tavx512f_vcvttsd2usiq<round_saeonly_name> using SWI48 mode iterator.\n\t(sse2_cvtsd2si<rex64namesuffix><round_name>): Merge insn pattern from\n\tsse2_cvtsd2si<round_name> and sse2_cvtsd2siq<round_name> using\n\tSWI48 mode iterator.\n\t(sse2_cvtsd2si<rex64namesuffix>_2): Merge insn pattern from\n\tsse2_cvtsd2si_2 and sse2_cvtsd2siq_2 using SWI48 mode iterator.\n\t(sse_cvttsd2si<rex64namesuffix><round_saeonly_name>): Merge insn\n\tpattern from sse_cvttsd2si<round_saeonly_name>\n\tand sse_cvttsd2siq<round_saeonly_name> using SWI48 mode iterator.\n\nFrom-SVN: r260397", "tree": {"sha": "ced835b35bd90ab1cc8eda2b7eb9a38967a7bbf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ced835b35bd90ab1cc8eda2b7eb9a38967a7bbf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cca59a3cfcd29b6485d4f0da92f4baa04714b5c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca59a3cfcd29b6485d4f0da92f4baa04714b5c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca59a3cfcd29b6485d4f0da92f4baa04714b5c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca59a3cfcd29b6485d4f0da92f4baa04714b5c5/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0679a1c2187925df670507b188eaeb45ea81842b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0679a1c2187925df670507b188eaeb45ea81842b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0679a1c2187925df670507b188eaeb45ea81842b"}], "stats": {"total": 321, "additions": 102, "deletions": 219}, "files": [{"sha": "2eb3960e02d905feaa1db2deed6d7bafa08f7a22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca59a3cfcd29b6485d4f0da92f4baa04714b5c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca59a3cfcd29b6485d4f0da92f4baa04714b5c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cca59a3cfcd29b6485d4f0da92f4baa04714b5c5", "patch": "@@ -1,3 +1,38 @@\n+2018-05-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (rex64namesuffix): New mode attribute.\n+\t* config/i386/sse.md (sse_cvtsi2ss<rex64namesuffix><round_name>):\n+\tMerge insn pattern from sse_cvtsi2ss<round_name> and\n+\tsse_cvtsi2ssq<round_name> using SWI48 mode iterator.\n+\t(sse_cvtss2si<rex64namesuffix><round_name>): Merge insn pattern\n+\tfrom sse_cvtss2si<round_name> and sse_cvtss2siq<round_name>\n+\tusing SWI48 mode iterator.\n+\t(sse_cvtss2si<rex64namesuffix>_2): Merge insn pattern from\n+\tsse_cvtss2si_2 and sse_cvtss2siq_2 using SWI48 mode iterator.\n+\t(sse_cvttss2si<rex64namesuffix><round_saeonly_name>): Merge insn\n+\tpattern from sse_cvttss2si<round_saeonly_name>\n+\tand sse_cvttss2siq<round_saeonly_name> using SWI48 mode iterator.\n+\t(avx512f_vcvtss2usi<rex64namesuffix><round_name>): Merge insn pattern\n+\tfrom avx512f_vcvtss2usi<round_name> and avx512f_vcvtss2usiq<round_name>\n+\tusing SWI48 mode iterator.\n+\t(avx512f_vcvttss2usi<rex64namesuffix><round_saeonly_name>): Merge\n+\tinsn pattern from avx512f_vcvttss2usi<round_saeonly_name> and\n+\tavx512f_vcvttss2usiq<round_saeonly_name> using SWI48 mode iterator.\n+\t(avx512f_vcvtsd2usi<rex64namesuffix><round_name>): Merge insn pattern\n+\tfrom avx512f_vcvtsd2usi<round_name> and avx512f_vcvtsd2usiq<round_name>\n+\tusing SWI48 mode iterator.\n+\t(avx512f_vcvttsd2usi<rex64namesuffix><round_saeonly_name>): Merge\n+\tinsn pattern from avx512f_vcvttsd2usi<round_saeonly_name> and\n+\tavx512f_vcvttsd2usiq<round_saeonly_name> using SWI48 mode iterator.\n+\t(sse2_cvtsd2si<rex64namesuffix><round_name>): Merge insn pattern from\n+\tsse2_cvtsd2si<round_name> and sse2_cvtsd2siq<round_name> using\n+\tSWI48 mode iterator.\n+\t(sse2_cvtsd2si<rex64namesuffix>_2): Merge insn pattern from\n+\tsse2_cvtsd2si_2 and sse2_cvtsd2siq_2 using SWI48 mode iterator.\n+\t(sse_cvttsd2si<rex64namesuffix><round_saeonly_name>): Merge insn\n+\tpattern from sse_cvttsd2si<round_saeonly_name>\n+\tand sse_cvttsd2siq<round_saeonly_name> using SWI48 mode iterator.\n+\n 2018-05-19  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32-md-auxiliary.c"}, {"sha": "706b7f59be04b3d2d931b7ae2c8173d1cd9bee16", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca59a3cfcd29b6485d4f0da92f4baa04714b5c5/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca59a3cfcd29b6485d4f0da92f4baa04714b5c5/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cca59a3cfcd29b6485d4f0da92f4baa04714b5c5", "patch": "@@ -1212,6 +1212,7 @@\n \n ;; Instruction suffix for REX 64bit operators.\n (define_mode_attr rex64suffix [(SI \"\") (DI \"{q}\")])\n+(define_mode_attr rex64namesuffix [(SI \"\") (DI \"q\")])\n \n ;; This mode iterator allows :P to be used for patterns that operate on\n ;; pointer-sized quantities.  Exactly one of the two alternatives will match."}, {"sha": "8a80fa35067596762844b21894f00e0ede5da937", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 66, "deletions": 219, "changes": 285, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cca59a3cfcd29b6485d4f0da92f4baa04714b5c5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cca59a3cfcd29b6485d4f0da92f4baa04714b5c5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=cca59a3cfcd29b6485d4f0da92f4baa04714b5c5", "patch": "@@ -4360,142 +4360,85 @@\n    (set_attr \"prefix_rep\" \"0\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"sse_cvtsi2ss<round_name>\"\n+(define_insn \"sse_cvtsi2ss<rex64namesuffix><round_name>\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,v\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n-\t    (float:SF (match_operand:SI 2 \"<round_nimm_scalar_predicate>\" \"r,m,<round_constraint3>\")))\n+\t    (float:SF (match_operand:SWI48 2 \"<round_nimm_scalar_predicate>\" \"r,m,<round_constraint3>\")))\n \t  (match_operand:V4SF 1 \"register_operand\" \"0,0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n-   cvtsi2ss\\t{%2, %0|%0, %2}\n-   cvtsi2ss\\t{%2, %0|%0, %2}\n-   vcvtsi2ss\\t{%2, <round_op3>%1, %0|%0, %1<round_op3>, %2}\"\n+   cvtsi2ss<rex64suffix>\\t{%2, %0|%0, %2}\n+   cvtsi2ss<rex64suffix>\\t{%2, %0|%0, %2}\n+   vcvtsi2ss<rex64suffix>\\t{%2, <round_op3>%1, %0|%0, %1<round_op3>, %2}\"\n   [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"vector,double,*\")\n    (set_attr \"amdfam10_decode\" \"vector,double,*\")\n    (set_attr \"bdver1_decode\" \"double,direct,*\")\n    (set_attr \"btver2_decode\" \"double,double,double\")\n    (set_attr \"znver1_decode\" \"double,double,double\")\n+   (set (attr \"length_vex\")\n+\t(if_then_else\n+\t  (and (match_test \"<MODE>mode == DImode\")\n+\t       (eq_attr \"alternative\" \"2\"))\n+\t  (const_string \"4\")\n+\t  (const_string \"*\")))\n+   (set (attr \"prefix_rex\")\n+\t(if_then_else\n+\t  (and (match_test \"<MODE>mode == DImode\")\n+\t       (eq_attr \"alternative\" \"0,1\"))\n+\t  (const_string \"1\")\n+\t  (const_string \"*\")))\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"sse_cvtsi2ssq<round_name>\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,v\")\n-\t(vec_merge:V4SF\n-\t  (vec_duplicate:V4SF\n-\t    (float:SF (match_operand:DI 2 \"<round_nimm_scalar_predicate>\" \"r,m,<round_constraint3>\")))\n-\t  (match_operand:V4SF 1 \"register_operand\" \"0,0,v\")\n-\t  (const_int 1)))]\n-  \"TARGET_SSE && TARGET_64BIT\"\n-  \"@\n-   cvtsi2ssq\\t{%2, %0|%0, %2}\n-   cvtsi2ssq\\t{%2, %0|%0, %2}\n-   vcvtsi2ssq\\t{%2, <round_op3>%1, %0|%0, %1<round_op3>, %2}\"\n-  [(set_attr \"isa\" \"noavx,noavx,avx\")\n-   (set_attr \"type\" \"sseicvt\")\n-   (set_attr \"athlon_decode\" \"vector,double,*\")\n-   (set_attr \"amdfam10_decode\" \"vector,double,*\")\n-   (set_attr \"bdver1_decode\" \"double,direct,*\")\n-   (set_attr \"btver2_decode\" \"double,double,double\")\n-   (set_attr \"length_vex\" \"*,*,4\")\n-   (set_attr \"prefix_rex\" \"1,1,*\")\n-   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"sse_cvtss2si<round_name>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(unspec:SI\n+(define_insn \"sse_cvtss2si<rex64namesuffix><round_name>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n+\t(unspec:SWI48\n \t  [(vec_select:SF\n \t     (match_operand:V4SF 1 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint2>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE\"\n-  \"%vcvtss2si\\t{<round_op2>%1, %0|%0, %k1<round_op2>}\"\n+  \"%vcvtss2si<rex64suffix>\\t{<round_op2>%1, %0|%0, %k1<round_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"sse_cvtss2si_2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(unspec:SI [(match_operand:SF 1 \"nonimmediate_operand\" \"v,m\")]\n-\t\t   UNSPEC_FIX_NOTRUNC))]\n-  \"TARGET_SSE\"\n-  \"%vcvtss2si\\t{%1, %0|%0, %k1}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"athlon_decode\" \"double,vector\")\n-   (set_attr \"amdfam10_decode\" \"double,double\")\n-   (set_attr \"bdver1_decode\" \"double,double\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"sse_cvtss2siq<round_name>\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(unspec:DI\n-\t  [(vec_select:SF\n-\t     (match_operand:V4SF 1 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint2>\")\n-\t     (parallel [(const_int 0)]))]\n-\t  UNSPEC_FIX_NOTRUNC))]\n-  \"TARGET_SSE && TARGET_64BIT\"\n-  \"%vcvtss2si{q}\\t{<round_op2>%1, %0|%0, %k1<round_op2>}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"athlon_decode\" \"double,vector\")\n-   (set_attr \"bdver1_decode\" \"double,double\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"sse_cvtss2siq_2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(unspec:DI [(match_operand:SF 1 \"nonimmediate_operand\" \"v,m\")]\n-\t\t   UNSPEC_FIX_NOTRUNC))]\n-  \"TARGET_SSE && TARGET_64BIT\"\n-  \"%vcvtss2si{q}\\t{%1, %0|%0, %k1}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"athlon_decode\" \"double,vector\")\n-   (set_attr \"amdfam10_decode\" \"double,double\")\n-   (set_attr \"bdver1_decode\" \"double,double\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"sse_cvttss2si<round_saeonly_name>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(fix:SI\n-\t  (vec_select:SF\n-\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"v,<round_saeonly_constraint2>\")\n-\t    (parallel [(const_int 0)]))))]\n+(define_insn \"sse_cvtss2si<rex64namesuffix>_2\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n+\t(unspec:SWI48 [(match_operand:SF 1 \"nonimmediate_operand\" \"v,m\")]\n+\t\t      UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE\"\n-  \"%vcvttss2si\\t{<round_saeonly_op2>%1, %0|%0, %k1<round_saeonly_op2>}\"\n+  \"%vcvtss2si<rex64suffix>\\t{%1, %0|%0, %k1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"sse_cvttss2siq<round_saeonly_name>\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(fix:DI\n+(define_insn \"sse_cvttss2si<rex64namesuffix><round_saeonly_name>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n+\t(fix:SWI48\n \t  (vec_select:SF\n \t    (match_operand:V4SF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"v,<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n-  \"TARGET_SSE && TARGET_64BIT\"\n-  \"%vcvttss2si{q}\\t{<round_saeonly_op2>%1, %0|%0, %k1<round_saeonly_op2>}\"\n+  \"TARGET_SSE\"\n+  \"%vcvttss2si<rex64suffix>\\t{<round_saeonly_op2>%1, %0|%0, %k1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"cvtusi2<ssescalarmodesuffix>32<round_name>\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n@@ -4800,9 +4743,9 @@\n    (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"DF\")])\n \n-(define_insn \"avx512f_vcvtss2usi<round_name>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec:SI\n+(define_insn \"avx512f_vcvtss2usi<rex64namesuffix><round_name>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(unspec:SWI48\n \t  [(vec_select:SF\n \t     (match_operand:V4SF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t     (parallel [(const_int 0)]))]\n@@ -4811,48 +4754,23 @@\n   \"vcvtss2usi\\t{<round_op2>%1, %0|%0, %k1<round_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"avx512f_vcvtss2usiq<round_name>\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec:DI\n-\t  [(vec_select:SF\n-\t     (match_operand:V4SF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")\n-\t     (parallel [(const_int 0)]))]\n-\t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n-  \"TARGET_AVX512F && TARGET_64BIT\"\n-  \"vcvtss2usi\\t{<round_op2>%1, %0|%0, %k1<round_op2>}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_vcvttss2usi<round_saeonly_name>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unsigned_fix:SI\n+(define_insn \"avx512f_vcvttss2usi<rex64namesuffix><round_saeonly_name>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(unsigned_fix:SWI48\n \t  (vec_select:SF\n \t    (match_operand:V4SF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX512F\"\n   \"vcvttss2usi\\t{<round_saeonly_op2>%1, %0|%0, %k1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"avx512f_vcvttss2usiq<round_saeonly_name>\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unsigned_fix:DI\n-\t  (vec_select:SF\n-\t    (match_operand:V4SF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n-\t    (parallel [(const_int 0)]))))]\n-  \"TARGET_AVX512F && TARGET_64BIT\"\n-  \"vcvttss2usi\\t{<round_saeonly_op2>%1, %0|%0, %k1<round_saeonly_op2>}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_vcvtsd2usi<round_name>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec:SI\n+(define_insn \"avx512f_vcvtsd2usi<rex64namesuffix><round_name>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(unspec:SWI48\n \t  [(vec_select:DF\n \t     (match_operand:V2DF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")\n \t     (parallel [(const_int 0)]))]\n@@ -4861,138 +4779,67 @@\n   \"vcvtsd2usi\\t{<round_op2>%1, %0|%0, %q1<round_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"avx512f_vcvtsd2usiq<round_name>\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unspec:DI\n-\t  [(vec_select:DF\n-\t     (match_operand:V2DF 1 \"<round_nimm_predicate>\" \"<round_constraint>\")\n-\t     (parallel [(const_int 0)]))]\n-\t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n-  \"TARGET_AVX512F && TARGET_64BIT\"\n-  \"vcvtsd2usi\\t{<round_op2>%1, %0|%0, %q1<round_op2>}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"avx512f_vcvttsd2usi<round_saeonly_name>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unsigned_fix:SI\n+(define_insn \"avx512f_vcvttsd2usi<rex64namesuffix><round_saeonly_name>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(unsigned_fix:SWI48\n \t  (vec_select:DF\n \t    (match_operand:V2DF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX512F\"\n   \"vcvttsd2usi\\t{<round_saeonly_op2>%1, %0|%0, %q1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"avx512f_vcvttsd2usiq<round_saeonly_name>\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(unsigned_fix:DI\n-\t  (vec_select:DF\n-\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n-\t    (parallel [(const_int 0)]))))]\n-  \"TARGET_AVX512F && TARGET_64BIT\"\n-  \"vcvttsd2usi\\t{<round_saeonly_op2>%1, %0|%0, %q1<round_saeonly_op2>}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"sse2_cvtsd2si<round_name>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(unspec:SI\n+(define_insn \"sse2_cvtsd2si<rex64namesuffix><round_name>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n+\t(unspec:SWI48\n \t  [(vec_select:DF\n \t     (match_operand:V2DF 1 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint2>\")\n \t     (parallel [(const_int 0)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2\"\n-  \"%vcvtsd2si\\t{<round_op2>%1, %0|%0, %q1<round_op2>}\"\n+  \"%vcvtsd2si<rex64suffix>\\t{<round_op2>%1, %0|%0, %q1<round_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n    (set_attr \"btver2_decode\" \"double,double\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"sse2_cvtsd2si_2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(unspec:SI [(match_operand:DF 1 \"nonimmediate_operand\" \"v,m\")]\n-\t\t   UNSPEC_FIX_NOTRUNC))]\n+(define_insn \"sse2_cvtsd2si<rex64namesuffix>_2\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n+\t(unspec:SWI48 [(match_operand:DF 1 \"nonimmediate_operand\" \"v,m\")]\n+\t\t      UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_SSE2\"\n-  \"%vcvtsd2si\\t{%1, %0|%0, %q1}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"athlon_decode\" \"double,vector\")\n-   (set_attr \"amdfam10_decode\" \"double,double\")\n-   (set_attr \"bdver1_decode\" \"double,double\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"sse2_cvtsd2siq<round_name>\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(unspec:DI\n-\t  [(vec_select:DF\n-\t     (match_operand:V2DF 1 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint2>\")\n-\t     (parallel [(const_int 0)]))]\n-\t  UNSPEC_FIX_NOTRUNC))]\n-  \"TARGET_SSE2 && TARGET_64BIT\"\n-  \"%vcvtsd2si{q}\\t{<round_op2>%1, %0|%0, %q1<round_op2>}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"athlon_decode\" \"double,vector\")\n-   (set_attr \"bdver1_decode\" \"double,double\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"sse2_cvtsd2siq_2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(unspec:DI [(match_operand:DF 1 \"nonimmediate_operand\" \"v,m\")]\n-\t\t   UNSPEC_FIX_NOTRUNC))]\n-  \"TARGET_SSE2 && TARGET_64BIT\"\n-  \"%vcvtsd2si{q}\\t{%1, %0|%0, %q1}\"\n+  \"%vcvtsd2si<rex64suffix>\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"sse2_cvttsd2si<round_saeonly_name>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(fix:SI\n+(define_insn \"sse2_cvttsd2si<rex64namesuffix><round_saeonly_name>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n+\t(fix:SWI48\n \t  (vec_select:DF\n \t    (match_operand:V2DF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"v,<round_saeonly_constraint2>\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_SSE2\"\n-  \"%vcvttsd2si\\t{<round_saeonly_op2>%1, %0|%0, %q1<round_saeonly_op2>}\"\n+  \"%vcvttsd2si<rex64suffix>\\t{<round_saeonly_op2>%1, %0|%0, %q1<round_saeonly_op2>}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n    (set_attr \"bdver1_decode\" \"double,double\")\n    (set_attr \"btver2_decode\" \"double,double\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"sse2_cvttsd2siq<round_saeonly_name>\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(fix:DI\n-\t  (vec_select:DF\n-\t    (match_operand:V2DF 1 \"<round_saeonly_nimm_scalar_predicate>\" \"v,<round_saeonly_constraint2>\")\n-\t    (parallel [(const_int 0)]))))]\n-  \"TARGET_SSE2 && TARGET_64BIT\"\n-  \"%vcvttsd2si{q}\\t{<round_saeonly_op2>%1, %0|%0, %q1<round_saeonly_op2>}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"athlon_decode\" \"double,vector\")\n-   (set_attr \"amdfam10_decode\" \"double,double\")\n-   (set_attr \"bdver1_decode\" \"double,double\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"DI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; For float<si2dfmode><mode>2 insn pattern\n (define_mode_attr si2dfmode"}]}