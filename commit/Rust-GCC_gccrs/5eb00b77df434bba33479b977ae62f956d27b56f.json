{"sha": "5eb00b77df434bba33479b977ae62f956d27b56f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWViMDBiNzdkZjQzNGJiYTMzNDc5Yjk3N2FlNjJmOTU2ZDI3YjU2Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-07-16T12:32:19Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-07-16T12:32:19Z"}, "message": "mips.md (addsi3, adddi3): Remove special handling of $sp adds.\n\n\t* config/mips/mips.md (addsi3, adddi3): Remove special handling\n\tof $sp adds.  Remove REGNO checks from mips16 patterns.\n\nFrom-SVN: r84816", "tree": {"sha": "2c91b0eb04b66fa547bb540af2e2299d406e4320", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c91b0eb04b66fa547bb540af2e2299d406e4320"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5eb00b77df434bba33479b977ae62f956d27b56f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb00b77df434bba33479b977ae62f956d27b56f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eb00b77df434bba33479b977ae62f956d27b56f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb00b77df434bba33479b977ae62f956d27b56f/comments", "author": null, "committer": null, "parents": [{"sha": "090ad434b01d10c4c5929816b5912223c39c014a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/090ad434b01d10c4c5929816b5912223c39c014a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/090ad434b01d10c4c5929816b5912223c39c014a"}], "stats": {"total": 81, "additions": 9, "deletions": 72}, "files": [{"sha": "fcf81e1789a7822ae6178c58422c2870cdd6712b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb00b77df434bba33479b977ae62f956d27b56f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb00b77df434bba33479b977ae62f956d27b56f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5eb00b77df434bba33479b977ae62f956d27b56f", "patch": "@@ -1,3 +1,8 @@\n+2004-07-16  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.md (addsi3, adddi3): Remove special handling\n+\tof $sp adds.  Remove REGNO checks from mips16 patterns.\n+\n 2004-07-16  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md: Delete outdated comment."}, {"sha": "3ffa7f776bee130c80b313ebcc6e1a81fd60d8dd", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 4, "deletions": 72, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb00b77df434bba33479b977ae62f956d27b56f/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb00b77df434bba33479b977ae62f956d27b56f/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=5eb00b77df434bba33479b977ae62f956d27b56f", "patch": "@@ -426,29 +426,7 @@\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(plus:SI (match_operand:SI 1 \"reg_or_0_operand\")\n \t\t (match_operand:SI 2 \"arith_operand\")))]\n-  \"\"\n-{\n-  /* If a large stack adjustment was forced into a register, we may be\n-     asked to generate rtx such as:\n-\n-\t(set (reg:SI sp) (plus:SI (reg:SI sp) (reg:SI pseudo)))\n-\n-     but no such instruction is available in mips16.  Handle it by\n-     using a temporary.  */\n-  if (TARGET_MIPS16\n-      && REGNO (operands[0]) == STACK_POINTER_REGNUM\n-      && ((GET_CODE (operands[1]) == REG\n-\t   && REGNO (operands[1]) != STACK_POINTER_REGNUM)\n-\t  || GET_CODE (operands[2]) != CONST_INT))\n-    {\n-      rtx tmp = gen_reg_rtx (SImode);\n-\n-      emit_move_insn (tmp, operands[1]);\n-      emit_insn (gen_addsi3 (tmp, tmp, operands[2]));\n-      emit_move_insn (operands[0], tmp);\n-      DONE;\n-    }\n-})\n+  \"\")\n \n (define_insn \"addsi3_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n@@ -493,19 +471,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"0,d,d\")\n \t\t (match_operand:SI 2 \"arith_operand\" \"Q,O,d\")))]\n-  \"TARGET_MIPS16\n-   && (GET_CODE (operands[1]) != REG\n-       || REGNO (operands[1]) >= FIRST_PSEUDO_REGISTER\n-       || M16_REG_P (REGNO (operands[1]))\n-       || REGNO (operands[1]) == ARG_POINTER_REGNUM\n-       || REGNO (operands[1]) == FRAME_POINTER_REGNUM\n-       || REGNO (operands[1]) == STACK_POINTER_REGNUM)\n-   && (GET_CODE (operands[2]) != REG\n-       || REGNO (operands[2]) >= FIRST_PSEUDO_REGISTER\n-       || M16_REG_P (REGNO (operands[2]))\n-       || REGNO (operands[2]) == ARG_POINTER_REGNUM\n-       || REGNO (operands[2]) == FRAME_POINTER_REGNUM\n-       || REGNO (operands[2]) == STACK_POINTER_REGNUM)\"\n+  \"TARGET_MIPS16\"\n {\n   if (REGNO (operands[0]) == REGNO (operands[1]))\n     return \"addu\\t%0,%2\";\n@@ -595,29 +561,7 @@\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\")\n \t\t (match_operand:DI 2 \"arith_operand\")))]\n-  \"TARGET_64BIT\"\n-{\n-  /* If a large stack adjustment was forced into a register, we may be\n-     asked to generate rtx such as:\n-\n-\t(set (reg:DI sp) (plus:DI (reg:DI sp) (reg:DI pseudo)))\n-\n-     but no such instruction is available in mips16.  Handle it by\n-     using a temporary.  */\n-  if (TARGET_MIPS16\n-      && REGNO (operands[0]) == STACK_POINTER_REGNUM\n-      && ((GET_CODE (operands[1]) == REG\n-\t   && REGNO (operands[1]) != STACK_POINTER_REGNUM)\n-\t  || GET_CODE (operands[2]) != CONST_INT))\n-    {\n-      rtx tmp = gen_reg_rtx (DImode);\n-\n-      emit_move_insn (tmp, operands[1]);\n-      emit_insn (gen_adddi3 (tmp, tmp, operands[2]));\n-      emit_move_insn (operands[0], tmp);\n-      DONE;\n-    }\n-})\n+  \"TARGET_64BIT\")\n \n (define_insn \"adddi3_internal\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n@@ -662,19 +606,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"0,d,d\")\n \t\t (match_operand:DI 2 \"arith_operand\" \"Q,O,d\")))]\n-  \"TARGET_MIPS16 && TARGET_64BIT\n-   && (GET_CODE (operands[1]) != REG\n-       || REGNO (operands[1]) >= FIRST_PSEUDO_REGISTER\n-       || M16_REG_P (REGNO (operands[1]))\n-       || REGNO (operands[1]) == ARG_POINTER_REGNUM\n-       || REGNO (operands[1]) == FRAME_POINTER_REGNUM\n-       || REGNO (operands[1]) == STACK_POINTER_REGNUM)\n-   && (GET_CODE (operands[2]) != REG\n-       || REGNO (operands[2]) >= FIRST_PSEUDO_REGISTER\n-       || M16_REG_P (REGNO (operands[2]))\n-       || REGNO (operands[2]) == ARG_POINTER_REGNUM\n-       || REGNO (operands[2]) == FRAME_POINTER_REGNUM\n-       || REGNO (operands[2]) == STACK_POINTER_REGNUM)\"\n+  \"TARGET_MIPS16 && TARGET_64BIT\"\n {\n   if (REGNO (operands[0]) == REGNO (operands[1]))\n     return \"daddu\\t%0,%2\";"}]}