{"sha": "421fb0858d68eedf410a1d0ba9ec7176d112e94c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIxZmIwODU4ZDY4ZWVkZjQxMGExZDBiYTllYzcxNzZkMTEyZTk0Yw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-11-12T16:15:08Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1998-11-12T16:15:08Z"}, "message": "Extensive changes.\n\n0\nExtensive changes.  See ChangeLog.\n\nFrom-SVN: r23618", "tree": {"sha": "4c528a5694474b1c8a091489207dc8d2f589849f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c528a5694474b1c8a091489207dc8d2f589849f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/421fb0858d68eedf410a1d0ba9ec7176d112e94c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421fb0858d68eedf410a1d0ba9ec7176d112e94c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/421fb0858d68eedf410a1d0ba9ec7176d112e94c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421fb0858d68eedf410a1d0ba9ec7176d112e94c/comments", "author": null, "committer": null, "parents": [{"sha": "14dd5b38049d255096f06974f878d3043be4532b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14dd5b38049d255096f06974f878d3043be4532b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14dd5b38049d255096f06974f878d3043be4532b"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "83fac42bf9522477952d170277bd4cd67f6cad1c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421fb0858d68eedf410a1d0ba9ec7176d112e94c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421fb0858d68eedf410a1d0ba9ec7176d112e94c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=421fb0858d68eedf410a1d0ba9ec7176d112e94c", "patch": "@@ -1,11 +1,58 @@\n Thu Nov 12 14:15:07 1998  Per Bothner  <bothner@cygnus.com>\n \n+\t* parse.y (patch_invoke):  Do less if flag_emit_class_files.\n+\t* expr.c (build_known_method_ref):  Don't check flag_emit_class_files\n+\there (done in patch_invoke instead).\n+\t(case_identity):  Moved here from parse.y.\n+\n+\t* java-tree.h (CAN_COMPLETE_NORMALLY):  New macro.\n+\t* parse.y (java_complete_tree etc):  Maybe set CAN_COMPLETE_NORMALLY.\n+\t* parse.y (java_complete_tree):  Re-order COMPOUND_EXPR in BLOCK\n+\tso they can be efficiently scanned without recursion.\n+\tError it ! CAN_COMPLETE_NORMALLY first part of COMPOUND_EXPR.\n+\t* expr.c (java_lang_expand_expr):  Expand statements of COMPOUND_EXPR\n+\tin BLOCK iteratively, rather than recursively.\n+\n+\t* parse.y (do_unary_numeric_promotion):  New function.\n+\t(patch_unaryop, patch_binop, patch_array_ref):  Use it.\n+\n+\t* parse.y (patch_newarray):  Various fixes.\n+\n+\tRe-do handling of switch statements (for proper block scoping).\n+\t* parse.y:  Add just a single block for the enture switch block,\n+\tbut don't create any \"case blocks\".\n+\t(group_of_labels):  Rmeoved unneeded non-terminal.\n+\tCASE_EXPR and DEFAULT_EXPR are added to current block.\n+\t* expr.c (java_lang_expand_expr):  Inline SWITCH_EXPR here.\n+\tNow also need to handle CASE_EXPR and DEFAULT_EXPR.\n+\t* java-tree.h (SWITCH_HAS_DEFAULT):  New macro.\n+\t* parse.y (wfl_operator, print_int_node): Make non-static.\n+\t(java_complete_tree):  CASE_EXPR and DEFAULT_EXPR are now processed\n+\tas part of recursive scan of block.\n+\t(java_expand_switch ):  Removed - inlined into java_lang_expand_expr.\n+\t(patch_switch_statement):  Most tests move dinto java_complete_tree.\n+\t\n+\t* parse.y:  Make various production be non-typed (void).\n+\t* parse.y (parse_error):  Merged into issue_warning_error_from_context.\n+\t* parse.y (add_stmt_to_compound):  Don't create/change extra node.\n+\t(patch_method_invocation_stmt):  Renamed to patch_method_invocation.\n+\n+\t* jcf-write.c (struct jcf_handler):  New type.\n+\t(struct jcf_switch_state):  New type.\n+\t(SWITCH_ALIGN_RELOC, BLOCK_START_RELOC):  New relocation kinds.\n+\t(alloc_handler, emit_unop, emit_reloc):  New functions.\n+\t(adjust_typed_op):  Add extra parameter (\"max type\" offset).\n+\t(emit_switch_reloc, emit_case-reloc):  New function.\n+\t(generate_bytecode_conditional):  Handle REAL_TYPE comparisons.\n+\t(generate_bytecode_insns):  Support REAL_CST, switch statements,\n+\texception handling, method calls, object/array creation, and more.\n+\t\n \t* class.c:  Remove some unused variables.\n \t* constants.c (find_string_constant):  New function.\n \t(count_constant_pool_bytes):  Fix to correctly handle wide constants.\n \t* decl.c (complete_start_java_method):  Don't _Jv_InitClass\n \tif flag_emit_class_files.\n-\t\n+\n 1998-11-12  Tom Tromey  <tromey@cygnus.com>\n \n \t* jcf-io.c (find_class): Added explanatory comment."}]}