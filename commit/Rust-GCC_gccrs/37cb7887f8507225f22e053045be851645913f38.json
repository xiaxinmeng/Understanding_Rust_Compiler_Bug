{"sha": "37cb7887f8507225f22e053045be851645913f38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdjYjc4ODdmODUwNzIyNWYyMmUwNTMwNDViZTg1MTY0NTkxM2YzOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-06-25T16:23:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-06-25T16:23:49Z"}, "message": "Add experimental::sample and experimental::shuffle from N4531\n\nThe additions to <experimental/random> were added in 2015 but the new\nalgorithms in <experimental/algorithm> were not. This adds them.\n\n\t* include/experimental/algorithm (sample, shuffle): Add new overloads\n\tusing per-thread random number engine.\n\t* testsuite/experimental/algorithm/sample.cc: Simpify and reduce\n\tdependencies by using __gnu_test::test_container.\n\t* testsuite/experimental/algorithm/sample-2.cc: New.\n\t* testsuite/experimental/algorithm/shuffle.cc: New.\n\nFrom-SVN: r262024", "tree": {"sha": "22c8b8a0a1a4dda2c0b5d43d6b419d143c1071ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22c8b8a0a1a4dda2c0b5d43d6b419d143c1071ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37cb7887f8507225f22e053045be851645913f38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37cb7887f8507225f22e053045be851645913f38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37cb7887f8507225f22e053045be851645913f38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37cb7887f8507225f22e053045be851645913f38/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e68fe44f9f1fa25f4fd3afc5d75c4d7503d364"}], "stats": {"total": 229, "additions": 206, "deletions": 23}, "files": [{"sha": "42300d0fb2435f61a909ec274008b5c7e701d2ae", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37cb7887f8507225f22e053045be851645913f38/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37cb7887f8507225f22e053045be851645913f38/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=37cb7887f8507225f22e053045be851645913f38", "patch": "@@ -1,3 +1,12 @@\n+2018-06-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/algorithm (sample, shuffle): Add new overloads\n+\tusing per-thread random number engine.\n+\t* testsuite/experimental/algorithm/sample.cc: Simpify and reduce\n+\tdependencies by using __gnu_test::test_container.\n+\t* testsuite/experimental/algorithm/sample-2.cc: New.\n+\t* testsuite/experimental/algorithm/shuffle.cc: New.\n+\n 2018-06-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/abi/pre/gnu.ver: Fix __cxx11::basic_string patterns for"}, {"sha": "4c51efb1c9766dad36948c1ac1695396acb6b3f5", "filename": "libstdc++-v3/include/experimental/algorithm", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37cb7887f8507225f22e053045be851645913f38/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37cb7887f8507225f22e053045be851645913f38/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Falgorithm?ref=37cb7887f8507225f22e053045be851645913f38", "patch": "@@ -35,14 +35,15 @@\n \n #include <algorithm>\n #include <experimental/bits/lfts_config.h>\n+#include <experimental/random>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n namespace experimental\n {\n-inline namespace fundamentals_v1\n+inline namespace fundamentals_v2\n {\n   template<typename _ForwardIterator, typename _Searcher>\n     inline _ForwardIterator\n@@ -79,7 +80,23 @@ inline namespace fundamentals_v1\n \t\t\t   __d,\n \t\t\t   std::forward<_UniformRandomNumberGenerator>(__g));\n     }\n-} // namespace fundamentals_v1\n+\n+  template<typename _PopulationIterator, typename _SampleIterator,\n+           typename _Distance>\n+    inline _SampleIterator\n+    sample(_PopulationIterator __first, _PopulationIterator __last,\n+\t   _SampleIterator __out, _Distance __n)\n+    {\n+      return experimental::sample(__first, __last, __out, __n,\n+\t\t\t\t  _S_randint_engine());\n+    }\n+\n+  template<typename _RandomAccessIterator>\n+    inline void\n+    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)\n+    { return std::shuffle(__first, __last, _S_randint_engine()); }\n+\n+} // namespace fundamentals_v2\n } // namespace experimental\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "4ef9a7c77e4d1fefc6f46688d97ac8609adac3d7", "filename": "libstdc++-v3/testsuite/experimental/algorithm/sample-2.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37cb7887f8507225f22e053045be851645913f38/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Falgorithm%2Fsample-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37cb7887f8507225f22e053045be851645913f38/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Falgorithm%2Fsample-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Falgorithm%2Fsample-2.cc?ref=37cb7887f8507225f22e053045be851645913f38", "patch": "@@ -0,0 +1,98 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++14 } }\n+\n+#include <experimental/algorithm>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+using __gnu_test::forward_iterator_wrapper;\n+\n+void\n+test01()\n+{\n+  const int pop[] = { 1, 2 };\n+  int samp[10] = { };\n+\n+  // population smaller than desired sample size\n+  auto it = std::experimental::sample(pop, pop + 2, samp, 10);\n+  VERIFY( it == samp + 2 );\n+  VERIFY( std::accumulate(samp, samp + 10, 0) == 3 );\n+}\n+\n+void\n+test02()\n+{\n+  const int pop[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+  int samp[10] = { };\n+\n+  auto it = std::experimental::sample(pop, std::end(pop), samp, 10);\n+  VERIFY( it == samp + 10 );\n+\n+  std::sort(samp, it);\n+  auto it2 = std::unique(samp, it);\n+  VERIFY( it2 == it );\n+}\n+\n+void\n+test03()\n+{\n+  const int pop[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, };\n+  int samp[5] = { };\n+\n+  // input iterator for population\n+  test_container<const int, input_iterator_wrapper> pop_in{pop};\n+  auto it = std::experimental::sample(pop_in.begin(), pop_in.end(), samp, 5);\n+  VERIFY( it == samp + 5 );\n+\n+  std::sort(samp, it);\n+  auto it2 = std::unique(samp, it);\n+  VERIFY( it2 == it );\n+}\n+\n+void\n+test04()\n+{\n+  const int pop[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n+  int samp[5] = { };\n+\n+  // forward iterator for population and output iterator for result\n+  test_container<const int, forward_iterator_wrapper> pop_fwd{pop};\n+  test_container<int, output_iterator_wrapper> samp_out{samp};\n+  auto it = std::experimental::sample(pop_fwd.begin(), pop_fwd.end(),\n+\t\t\t\t      samp_out.begin(), 5);\n+\n+  VERIFY( std::distance(samp, it.ptr) == 5 );\n+\n+  std::sort(samp, it.ptr);\n+  auto it2 = std::unique(samp, it.ptr);\n+  VERIFY( it2 == it.ptr );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "b2373706f04c30e2a3820ef58e18613b492e2618", "filename": "libstdc++-v3/testsuite/experimental/algorithm/sample.cc", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37cb7887f8507225f22e053045be851645913f38/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Falgorithm%2Fsample.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37cb7887f8507225f22e053045be851645913f38/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Falgorithm%2Fsample.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Falgorithm%2Fsample.cc?ref=37cb7887f8507225f22e053045be851645913f38", "patch": "@@ -18,18 +18,16 @@\n // { dg-do run { target c++14 } }\n \n #include <experimental/algorithm>\n-#include <iterator>\n-#include <sstream>\n-#include <forward_list>\n-#include <vector>\n #include <random>\n-#include <algorithm>\n #include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n \n-std::mt19937 rng;\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+using __gnu_test::forward_iterator_wrapper;\n \n-using std::istream_iterator;\n-using std::ostream_iterator;\n+std::mt19937 rng;\n \n void\n test01()\n@@ -60,11 +58,12 @@ test02()\n void\n test03()\n {\n-  std::istringstream pop(\"0 1 2 3 4 5 6 7 8 9\");\n+  const int pop[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, };\n   int samp[5] = { };\n \n   // input iterator for population\n-  auto it = std::experimental::sample(istream_iterator<int>{pop}, {},\n+  test_container<const int, input_iterator_wrapper> pop_in{pop};\n+  auto it = std::experimental::sample(pop_in.begin(), pop_in.end(),\n                                       samp,\n                                       5, rng);\n   VERIFY( it == samp + 5 );\n@@ -77,21 +76,20 @@ test03()\n void\n test04()\n {\n-  std::forward_list<int> pop{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n-  std::stringstream samp;\n+  const int pop[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n+  int samp[5] = { };\n \n   // forward iterator for population and output iterator for result\n-  std::experimental::sample(pop.begin(), pop.end(),\n-                            ostream_iterator<int>{samp, \" \"},\n-                            5, rng);\n+  test_container<const int, forward_iterator_wrapper> pop_fwd{pop};\n+  test_container<int, output_iterator_wrapper> samp_out{samp};\n+  auto it = std::experimental::sample(pop_fwd.begin(), pop_fwd.end(),\n+\t\t\t\t      samp_out.begin(), 5, rng);\n \n-  // samp.rdbuf()->pubseekoff(0, std::ios::beg);\n-  std::vector<int> v(istream_iterator<int>{samp}, {});\n-  VERIFY( v.size() == 5 );\n+  VERIFY( std::distance(samp, it.ptr) == 5 );\n \n-  std::sort(v.begin(), v.end());\n-  auto it = std::unique(v.begin(), v.end());\n-  VERIFY( it == v.end() );\n+  std::sort(samp, it.ptr);\n+  auto it2 = std::unique(samp, it.ptr);\n+  VERIFY( it2 == it.ptr );\n }\n \n int"}, {"sha": "5c4e7fbd4331639977366122c93f6e19f7e6cdcc", "filename": "libstdc++-v3/testsuite/experimental/algorithm/shuffle.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37cb7887f8507225f22e053045be851645913f38/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Falgorithm%2Fshuffle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37cb7887f8507225f22e053045be851645913f38/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Falgorithm%2Fshuffle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Falgorithm%2Fshuffle.cc?ref=37cb7887f8507225f22e053045be851645913f38", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do run { target c++14 } }\n+\n+// Derived from: 2010-03-19  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2010-2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <experimental/algorithm>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  for (unsigned size = 0; size < 50; ++size)\n+    {\n+      std::vector<int> vref(size);\n+      std::iota(vref.begin(), vref.end(), 0);\n+      std::vector<int> v1(vref), v2(vref);\n+\n+      std::experimental::shuffle(v1.begin(), v1.end());\n+      std::experimental::shuffle(v2.begin(), v2.end());\n+\n+      if (size >= 10)\n+\t{\n+\t  VERIFY( !std::equal(v1.begin(), v1.end(), vref.begin()) );\n+\t  VERIFY( !std::equal(v2.begin(), v2.end(), vref.begin()) );\n+\t  VERIFY( !std::equal(v1.begin(), v1.end(), v2.begin()) );\n+\t}\n+\n+      for (unsigned ind = 0; ind < size; ++ind)\n+\t{\n+\t  auto it1 = std::find(v1.begin(), v1.end(), vref[ind]);\n+\t  auto it2 = std::find(v2.begin(), v2.end(), vref[ind]);\n+\t  VERIFY( it1 != v1.end() );\n+\t  VERIFY( it2 != v2.end() );\n+\t  v1.erase(it1);\n+\t  v2.erase(it2);\n+\t}\n+      VERIFY( v1.empty() );\n+      VERIFY( v2.empty() );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}