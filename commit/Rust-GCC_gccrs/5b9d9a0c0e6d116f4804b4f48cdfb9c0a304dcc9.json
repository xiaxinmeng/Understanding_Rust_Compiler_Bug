{"sha": "5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI5ZDlhMGMwZTZkMTE2ZjQ4MDRiNGY0OGNkZmI5YzBhMzA0ZGNjOQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-07-13T02:00:42Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-07-13T02:00:42Z"}, "message": "Solaris, shared lib, aix broken compatibiliy\n\nFrom-SVN: r12439", "tree": {"sha": "e009973434ae989495f6dc33e67e22ad7fea72d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e009973434ae989495f6dc33e67e22ad7fea72d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/comments", "author": null, "committer": null, "parents": [{"sha": "821581e4157fb400dfeb1a8927df0ef988800b8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821581e4157fb400dfeb1a8927df0ef988800b8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/821581e4157fb400dfeb1a8927df0ef988800b8d"}], "stats": {"total": 343, "additions": 206, "deletions": 137}, "files": [{"sha": "9659794d7c89fd3a9fb6c11fe7373eabb0510b8a", "filename": "gcc/config/rs6000/aix3newas.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Faix3newas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Faix3newas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix3newas.h?ref=5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "patch": "@@ -21,6 +21,14 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n+/* Enable AIX XL compiler calling convention breakage compatibility.  */\n+#define MASK_XL_CALL\t\t0x40000000\n+#define\tTARGET_XL_CALL\t\t(target_flags & MASK_XL_CALL)\n+#undef  SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES\t\t\\\n+  {\"xl-call\", \t\tMASK_XL_CALL},\t\\\n+  {\"no-xl-call\",\t- MASK_XL_CALL},\n+\n #include \"rs6000/rs6000.h\"\n \n /* Tell the assembler to assume that all undefined names are external.  */"}, {"sha": "317c8e83da9f96c2cc02ad2b0d6801873b798ec9", "filename": "gcc/config/rs6000/aix41.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Faix41.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Faix41.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix41.h?ref=5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "patch": "@@ -21,6 +21,14 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n \n+/* Enable AIX XL compiler calling convention breakage compatibility.  */\n+#define MASK_XL_CALL\t\t0x40000000\n+#define\tTARGET_XL_CALL\t\t(target_flags & MASK_XL_CALL)\n+#undef  SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES\t\t\\\n+  {\"xl-call\", \t\tMASK_XL_CALL},\t\\\n+  {\"no-xl-call\",\t- MASK_XL_CALL},\n+\n #include \"rs6000/rs6000.h\"\n \n #undef ASM_SPEC"}, {"sha": "879a63e87ad85d5fa5db14caf90e0c2f39e7f0a9", "filename": "gcc/config/rs6000/eabi.asm", "status": "modified", "additions": 133, "deletions": 105, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Feabi.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Feabi.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.asm?ref=5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "patch": "@@ -66,6 +66,19 @@\n .Lsda2e = .-.LCTOC1\n \t.long\t__SBSS2_END__\t\t\t/* end of .sdata2/.sbss2 section */\n \n+#ifdef _RELOCATABLE\n+.Lgots = .-.LCTOC1\n+\t.long\t__GOT_START__\t\t\t/* Global offset table start */\n+\n+.Lgotm1 = .-.LCTOC1\n+\t.long\t_GLOBAL_OFFSET_TABLE_-4\t\t/* end of GOT ptrs before BLCL + 3 reserved words */\n+\n+.Lgotm2 = .-.LCTOC1\n+\t.long\t_GLOBAL_OFFSET_TABLE_+12\t/* start of GOT ptrs after BLCL + 3 reserved words */\n+\n+.Lgote = .-.LCTOC1\n+\t.long\t__GOT_END__\t\t\t/* Global offset table end */\n+\n .Lgot2s = .-.LCTOC1\n \t.long\t__GOT2_START__\t\t\t/* -mrelocatable GOT pointers start */\n \n@@ -99,24 +112,35 @@\n .Linit = .-.LCTOC1\n \t.long\t.Linit_p\t\t\t/* address of variable to say we've been called */\n \n+\t.text\n+\t.align\t2\n+.Lptr:\n+\t.long\t.LCTOC1-.Laddr\t\t\t/* PC relative pointer to .got2 */\n+#endif\n+\n \t.data\n \t.align\t2\n .Linit_p:\n \t.long\t0\n \n \t.text\n-#ifdef _RELOCATABLE\n-.Lptr:\n-\t.long\t.LCTOC1-.Laddr\t\t\t/* PC relative pointer to .got2 */\n-#endif\n \n FUNC_START(__eabi)\n \n /* Eliminate -mrelocatable code if not -mrelocatable, so that this file can\n    be assembled with other assemblers than GAS, such as the Solaris PowerPC\n    assembler.  */\n \n-#ifdef _RELOCATABLE\n+#ifndef _RELOCATABLE\n+\taddis\t10,0,.Linit_p@ha\t\t/* init flag */\n+\taddis\t11,0,.LCTOC1@ha\t\t\t/* load address of .LCTOC1 */\n+\tlwz\t9,.Linit_p@l(10)\t\t/* init flag */\n+\taddi\t11,11,.LCTOC1@l\n+\tcmplwi\t2,9,0\t\t\t\t/* init flag != 0? */\n+\tbnelr\t2\t\t\t\t/* return now, if we've been called already */\n+\tstw\t1,.Linit_p@l(10)\t\t/* store a non-zero value in the done flag */\n+\n+#else /* -mrelocatable */\n \tmflr\t0\n \tbl\t.Laddr\t\t\t\t/* get current address */\n .Laddr:\n@@ -127,145 +151,149 @@ FUNC_START(__eabi)\n \tlwz\t10,.Linit(11)\t\t\t/* address of init flag */\n \tsubf.\t12,12,11\t\t\t/* calculate difference */\n \tlwzx\t9,10,12\t\t\t\t/* done flag */\n-\tmtlr\t0\t\t\t\t/* restore link register */\n \tcmplwi\t2,9,0\t\t\t\t/* init flag != 0? */\n \tbnelr\t2\t\t\t\t/* return now, if we've been called already */\n \tstwx\t1,10,12\t\t\t\t/* store a non-zero value in the done flag */\n-\tbne-\t0,.Lreloc\t\t\t/* skip if we need to relocate */\n-\n-#else /* !-mrelocatable */\n-\taddis\t10,0,.Linit_p@ha\t\t/* init flag */\n-\taddis\t11,0,.LCTOC1@ha\t\t\t/* load address of .LCTOC1 */\n-\tlwz\t9,.Linit_p@l(10)\t\t/* init flag */\n-\taddi\t11,11,.LCTOC1@l\n-\tcmplwi\t2,9,0\t\t\t\t/* init flag != 0? */\n-\tbnelr\t2\t\t\t\t/* return now, if we've been called already */\n-\tstw\t1,.Linit_p@l(10)\t\t/* store a non-zero value in the done flag */\n-\n-#endif /* !-mrelocatable */\n-\n-/* Only load up register 13 if there is a .sdata and/or .sbss section */\n-\n-\tlwz\t3,.Lsdas(11)\t\t\t/* start of .sdata/.sbss section */\n-\tlwz\t4,.Lsdae(11)\t\t\t/* end of .sdata/.sbss section */\n-\tcmpw\t1,3,4\t\t\t\t/* .sdata/.sbss section non-empty? */\n-\tbeq-\t1,.Lsda2l\t\t\t/* skip loading r13 */\n-\n-\tlwz\t13,.Lsda(11)\t\t\t/* load r13 with _SDA_BASE address */\n-\n-/* Only load up register 2 if there is a .sdata2 and/or .sbss2 section */\n-\n-.Lsda2l:\t\n-\tlwz\t3,.Lsda2s(11)\t\t\t/* start of .sdata/.sbss section */\n-\tlwz\t4,.Lsda2e(11)\t\t\t/* end of .sdata/.sbss section */\n-\tcmpw\t1,3,4\t\t\t\t/* .sdata/.sbss section non-empty? */\n-\tbeq+\t1,.Ldone\t\t\t/* skip loading r2 */\n-\n-\tlwz\t2,.Lsda2(11)\t\t\t/* load r2 with _SDA2_BASE address */\n-\tb\tFUNC_NAME(__do_global_ctors)\t/* do any C++ global constructors (which returns to caller) */\n+\tbeq+\t0,.Lsdata\t\t\t/* skip if we don't need to relocate */\n \n+/* We need to relocate the .got2 pointers. */\n \n-#ifdef _RELOCATABLE\n-.Lreloc:\n-/* We need to relocate the .got2 pointers.  Don't load registers 2 or 13 */\n-\n-\tlwz\t3,.Lgot2s(11)\t\t\t/* GOT pointers start */\n-\tlwz\t4,.Lgot2e(11)\t\t\t/* GOT pointers end */\n+\tlwz\t3,.Lgot2s(11)\t\t\t/* GOT2 pointers start */\n+\tlwz\t4,.Lgot2e(11)\t\t\t/* GOT2 pointers end */\n \tadd\t3,12,3\t\t\t\t/* adjust pointers */\n \tadd\t4,12,4\n-\n-\tcmpw\t1,3,4\t\t\t\t/* any pointers to adjust */\n-\tbc\t12,6,.Lctor\n-\n-.Lloop:\n-\tlwz\t5,0(3)\t\t\t\t/* next pointer */\n-\tadd\t5,5,12\t\t\t\t/* adjust */\n-\tstw\t5,0(3)\n-\taddi\t3,3,4\t\t\t\t/* bump to next word */\n-\tcmpw\t1,3,4\t\t\t\t/* more pointers to adjust? */\n-\tbc\t4,6,.Lloop\n+\tbl\tFUNC_NAME(__eabi_convert)\t/* convert pointers in .got2 section */\n \n /* Fixup the .ctor section for static constructors */\n \n-.Lctor:\n \tlwz\t3,.Lctors(11)\t\t\t/* constructors pointers start */\n \tlwz\t4,.Lctore(11)\t\t\t/* constructors pointers end */\n-\n-\tcmpw\t1,3,4\t\t\t\t/* any pointers to adjust */\n-\tbc\t12,6,.Ldtor\n-\n-.Lcloop:\n-\tlwz\t5,0(3)\t\t\t\t/* next pointer */\n-\tadd\t5,5,12\t\t\t\t/* adjust */\n-\tstw\t5,0(3)\n-\taddi\t3,3,4\t\t\t\t/* bump to next word */\n-\tcmpw\t1,3,4\t\t\t\t/* more pointers to adjust? */\n-\tbc\t4,6,.Lcloop\n+\tbl\tFUNC_NAME(__eabi_convert)\t/* convert constructors */\n \n /* Fixup the .dtor section for static destructors */\n \n-.Ldtor:\n \tlwz\t3,.Ldtors(11)\t\t\t/* destructors pointers start */\n \tlwz\t4,.Ldtore(11)\t\t\t/* destructors pointers end */\n-\n-\tcmpw\t1,3,4\t\t\t\t/* any pointers to adjust */\n-\tbc\t12,6,.Lexcept\n-\n-.Ldloop:\n-\tlwz\t5,0(3)\t\t\t\t/* next pointer */\n-\tadd\t5,5,12\t\t\t\t/* adjust */\n-\tstw\t5,0(3)\n-\taddi\t3,3,4\t\t\t\t/* bump to next word */\n-\tcmpw\t1,3,4\t\t\t\t/* more pointers to adjust? */\n-\tbc\t4,6,.Ldloop\n+\tbl\tFUNC_NAME(__eabi_convert)\t/* convert destructors */\n \n /* Fixup the .gcc_except_table section for G++ exceptions */\n \n-.Lexcept:\n \tlwz\t3,.Lexcepts(11)\t\t\t/* exception table pointers start */\n \tlwz\t4,.Lexcepte(11)\t\t\t/* exception table pointers end */\n+\tbl\tFUNC_NAME(__eabi_convert)\t/* convert exceptions */\n \n-\tcmpw\t1,3,4\t\t\t\t/* any pointers to adjust */\n-\tbc\t12,6,.Lfix\n+/* Fixup the the addresses in the GOT below _GLOBAL_OFFSET_TABLE_-4 */\n \n-.Leloop:\n-\tlwz\t5,0(3)\t\t\t\t/* next pointer */\n-\taddi\t3,3,4\t\t\t\t/* bump to next word */\n-\tcmpi\t1,5,0\n-\tbeq\t1,.Leloop\t\t\t/* if NULL pointer, don't adjust */\n-\tadd\t5,5,12\t\t\t\t/* adjust */\n-\tstw\t5,-4(3)\n-\tcmpw\t1,3,4\t\t\t\t/* more pointers to adjust? */\n-\tbc\t4,6,.Leloop\n+\tlwz\t3,.Lgots(11)\t\t\t/* GOT table pointers start */\n+\tlwz\t4,.Lgotm1(11)\t\t\t/* GOT table pointers below _GLOBAL_OFFSET_TABLE-4 */\n+\tbl\tFUNC_NAME(__eabi_convert)\t/* convert lower GOT */\n+\n+/* Fixup the the addresses in the GOT above _GLOBAL_OFFSET_TABLE_+12 */\n+\n+\tlwz\t3,.Lgotm2(11)\t\t\t/* GOT table pointers above _GLOBAL_OFFSET_TABLE+12 */\n+\tlwz\t4,.Lgote(11)\t\t\t/* GOT table pointers end */\n+\tbl\tFUNC_NAME(__eabi_convert)\t/* convert lower GOT */\n \n /* Fixup any user initialized pointers now (the compiler drops pointers to */\n /* each of the relocs that it does in the .fixup section).  */\n \n .Lfix:\n \tlwz\t3,.Lfixups(11)\t\t\t/* fixup pointers start */\n \tlwz\t4,.Lfixupe(11)\t\t\t/* fixup pointers end */\n+\tbl\tFUNC_NAME(__eabi_uconvert)\t/* convert user initialized pointers */\n \n-\tcmpw\t1,3,4\t\t\t\t/* any user pointers to adjust */\n-\tbc\t12,6,.Ldone\n-\n-.Lfloop:\n-\tlwz\t5,0(3)\t\t\t\t/* next pointer */\n-\tadd\t5,5,12\t\t\t\t/* adjust pointer */\n-\tlwz\t6,0(5)\t\t\t\t/* get the pointer it points to */\n-\tstw\t5,0(3)\t\t\t\t/* store adjusted pointer */\n-\tadd\t6,6,12\t\t\t\t/* adjust */\n-\tstw\t6,0(5)\n-\taddi\t3,3,4\t\t\t\t/* bump to next word */\n-\tcmpw\t1,3,4\t\t\t\t/* more pointers to adjust? */\n-\tbc\t4,6,.Lfloop\n+.Lsdata:\n+\tmtlr\t0\t\t\t\t/* restore link register */\n #endif /* _RELOCATABLE */\n \n-/* Done adjusting pointers, return */\n+/* Only load up register 13 if there is a .sdata and/or .sbss section */\n+\tlwz\t3,.Lsdas(11)\t\t\t/* start of .sdata/.sbss section */\n+\tlwz\t4,.Lsdae(11)\t\t\t/* end of .sdata/.sbss section */\n+\tcmpw\t1,3,4\t\t\t\t/* .sdata/.sbss section non-empty? */\n+\tbeq-\t1,.Lsda2l\t\t\t/* skip loading r13 */\n+\n+\tlwz\t13,.Lsda(11)\t\t\t/* load r13 with _SDA_BASE_ address */\n+\n+/* Only load up register 2 if there is a .sdata2 and/or .sbss2 section */\n+\n+.Lsda2l:\t\n+\tlwz\t3,.Lsda2s(11)\t\t\t/* start of .sdata/.sbss section */\n+\tlwz\t4,.Lsda2e(11)\t\t\t/* end of .sdata/.sbss section */\n+\tcmpw\t1,3,4\t\t\t\t/* .sdata/.sbss section non-empty? */\n+\tbeq+\t1,.Ldone\t\t\t/* skip loading r2 */\n+\n+\tlwz\t2,.Lsda2(11)\t\t\t/* load r2 with _SDA2_BASE_ address */\n+\n+/* Done adjusting pointers, return by way of doing the C++ global constructors.  */\n \n .Ldone:\n \tb\tFUNC_NAME(__do_global_ctors)\t/* do any C++ global constructors (which returns to caller) */\n FUNC_END(__eabi)\n \n+/* Special subroutine to convert a bunch of pointers directly.\n+   r0\t\thas original link register\n+   r3\t\thas low pointer to convert\n+   r4\t\thas high pointer to convert\n+   r5 .. r10\tare scratch registers\n+   r11\t\thas the address of .LCTOC1 in it.\n+   r12\t\thas the value to add to each pointer\n+   r13 .. r31\tare unchanged */\n+\t\n+FUNC_START(__eabi_convert)\n+        cmplw\t1,3,4\t\t\t\t/* any pointers to convert? */\n+        subf\t5,3,4\t\t\t\t/* calculate number of words to convert */\n+        bclr\t4,4\t\t\t\t/* return if no pointers */\n+\n+        srawi\t5,5,2\n+\taddi\t3,3,-4\t\t\t\t/* start-4 for use with lwzu */\n+        mtctr\t5\n+\n+.Lcvt:\n+\tlwzu\t6,4(3)\t\t\t\t/* pointer to convert */\n+\tcmpi\t0,6,0\n+\tbeq-\t.Lcvt2\t\t\t\t/* if pointer is null, don't convert */\n+\n+        add\t6,6,12\t\t\t\t/* convert pointer */\n+        stw\t6,0(3)\n+.Lcvt2:\n+        bdnz+\t.Lcvt\n+        blr\n+\n+FUNC_END(__eabi_convert)\n+\n+/* Special subroutine to convert the pointers the user has initialized.  The\n+   compiler has placed the address of the initialized pointer into the .fixup\n+   section.\n+\n+   r0\t\thas original link register\n+   r3\t\thas low pointer to convert\n+   r4\t\thas high pointer to convert\n+   r5 .. r10\tare scratch registers\n+   r11\t\thas the address of .LCTOC1 in it.\n+   r12\t\thas the value to add to each pointer\n+   r13 .. r31\tare unchanged */\n+\t\n+FUNC_START(__eabi_uconvert)\n+        cmplw\t1,3,4\t\t\t\t/* any pointers to convert? */\n+        subf\t5,3,4\t\t\t\t/* calculate number of words to convert */\n+        bclr\t4,4\t\t\t\t/* return if no pointers */\n+\n+        srawi\t5,5,2\n+\taddi\t3,3,-4\t\t\t\t/* start-4 for use with lwzu */\n+        mtctr\t5\n+\n+.Lucvt:\n+\tlwzu\t6,4(3)\t\t\t\t/* next pointer to pointer to convert */\n+\tadd\t6,6,12\t\t\t\t/* adjust pointer */\n+\tlwz\t7,0(6)\t\t\t\t/* get the pointer it points to */\n+\tstw\t6,0(3)\t\t\t\t/* store adjusted pointer */\n+\tadd\t7,7,12\t\t\t\t/* adjust */\n+\tstw\t7,0(6)\n+        bdnz+\t.Lucvt\n+        blr\n+\n+FUNC_END(__eabi_uconvert)\n+\n /* Routines for saving floating point registers, called by the compiler. */\n /* Called with r11 pointing to the stack header word of the caller of the */\n /* function, just beyond the end of the floating point save area. */"}, {"sha": "ef139d864140f1246ef491e5841ef927670748d0", "filename": "gcc/config/rs6000/eabile.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Feabile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Feabile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabile.h?ref=5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "patch": "@@ -26,7 +26,7 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_LITTLE_ENDIAN | MASK_EABI)\n \n #undef\tCPP_ENDIAN_DEFAULT_SPEC\n-#define\tCPP_ENDIAN_DEFAULT_SPEC \"-D_LITTLE_ENDIAN -Amachine(littleendian)\"\n+#define\tCPP_ENDIAN_DEFAULT_SPEC \"%(cpp_endian_little)\"\n \n #undef\tLINK_TARGET_SPEC\n #define\tLINK_TARGET_SPEC \"\\"}, {"sha": "38a806496aec5c4b1c744e1ea9ec8781bd84549e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "patch": "@@ -1013,7 +1013,7 @@ small_data_operand (op, mode)\n   if (rs6000_sdata == SDATA_NONE || rs6000_sdata == SDATA_DATA)\n     return 0;\n \n-  if (DEFAULT_ABI != ABI_V4 /* && DEFAULT_ABI != ABI_SOLARIS */)\n+  if (DEFAULT_ABI != ABI_V4 && DEFAULT_ABI != ABI_SOLARIS)\n     return 0;\n \n   if (GET_CODE (op) == SYMBOL_REF)\n@@ -1262,10 +1262,15 @@ function_arg (cum, mode, type, named)\n \n   if (USE_FP_FOR_ARG_P (*cum, mode, type))\n     {\n-      if ((cum->nargs_prototype > 0)\n-\t  || DEFAULT_ABI == ABI_V4\t/* V.4 never passes FP values in GP registers */\n+      if (DEFAULT_ABI == ABI_V4 /* V.4 never passes FP values in GP registers */\n \t  || DEFAULT_ABI == ABI_SOLARIS\n-\t  || !type)\n+\t  || ! type\n+\t  || ((cum->nargs_prototype > 0)\n+\t      /* IBM AIX extended its linkage convention definition always to\n+\t\t require FP args after register save area hole on the stack.  */\n+\t      && (DEFAULT_ABI != ABI_AIX\n+\t\t  || ! TARGET_XL_CALL\n+\t\t  || (align_words < GP_ARG_NUM_REG))))\n \treturn gen_rtx (REG, mode, cum->fregno);\n \n       return gen_rtx (PARALLEL, mode,"}, {"sha": "7fa322708a38d56a165e21567e484ee66abf4f43", "filename": "gcc/config/rs6000/sol-c0.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Fsol-c0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Fsol-c0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsol-c0.c?ref=5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "patch": "@@ -54,6 +54,8 @@ extern char _ex_text0[], _ex_text1[];\n extern char _ex_range0[], _ex_range1[];\n extern void _ex_register (struct ex_shared1 *);\n extern void _ex_deregister (struct ex_shared1 *);\n+extern char _SDA_BASE_[];\n+extern char _SDA2_BASE_[];\n \n struct ex_shared shared __attribute__((section(\".ex_shared\"))) = {\n   _ex_register,\n@@ -80,11 +82,14 @@ void\n _start(int argc, char *argv[], char *envp[], void *auxp, void (*termfunc)())\n {\n   int ret;\n+  int dummy = 0;\n \n+  /* Load up r13 before we do anything else.  */\n+  __asm__ volatile (\"mr %%r13,%0;mr %%r2,%1\" : \"=r\" (dummy) : \"r\" (&_SDA_BASE_[0]), \"r\" (&_SDA2_BASE_[0]));\n   _environ = envp;\n \n   /* Register loader termination function */\n-  if (termfunc)\n+  if (termfunc || dummy)\n     atexit (termfunc);\n \n   /* Register exception handler if needed */"}, {"sha": "2c9a4d855cef465733d8e1198956a193d616bbbd", "filename": "gcc/config/rs6000/sol-ci.asm", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Fsol-ci.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Fsol-ci.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsol-ci.asm?ref=5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "patch": "@@ -68,12 +68,12 @@ __DTOR_LIST__:\n \t.type __init,@function\n __init:\tstwu\t%r1,-16(%r1)\n \tmflr\t%r0\n-#\tstw\t%r31,12(%r1)\n+\tstw\t%r31,12(%r1)\n \tstw\t%r0,16(%r1)\n \n-#\tbl\t_GLOBAL_OFFSET_TABLE_-4\t# get the GOT address\n-#\tmflr\t%r31\n-#\n+\tbl\t_GLOBAL_OFFSET_TABLE_-4\t# get the GOT address\n+\tmflr\t%r31\n+\n #\tlwz\t%r3,_ex_shared0@got(%r31)\n #\tlwz\t%r4,-8(%r3)\t\t# _ex_register or 0\n #\tcmpi\t%cr0,%r4,0\n@@ -92,8 +92,8 @@ __fini:\tstwu\t%r1,-16(%r1)\n \tstw\t%r31,12(%r1)\n \tstw\t%r0,16(%r1)\n \n-#\tbl\t_GLOBAL_OFFSET_TABLE_-4\t# get the GOT address\n-#\tmflr\t%r31\n+\tbl\t_GLOBAL_OFFSET_TABLE_-4\t# get the GOT address\n+\tmflr\t%r31\n \n # _environ and its evil twin environ, pointing to the environment\n \t.comm\t_environ,4,4"}, {"sha": "2bc992e1391954628c8caaf815d9e9bebf6f2954", "filename": "gcc/config/rs6000/sol-cn.asm", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Fsol-cn.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Fsol-cn.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsol-cn.asm?ref=5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "patch": "@@ -68,13 +68,15 @@ _ex_range1:\n # Tail of __init used for static constructors in Solaris\n \t.section \".init\",\"ax\"\n \tlwz\t%r0,16(%r1)\n+\tlwz\t%r31,12(%r1)\n \tmtlr\t%r0\n \taddi\t%r1,%r1,16\n \tblr\n \n # Tail of __fini used for static destructors in Solaris\n \t.section \".fini\",\"ax\"\n \tlwz\t%r0,16(%r1)\n+\tlwz\t%r31,12(%r1)\n \tmtlr\t%r0\n \taddi\t%r1,%r1,16\n \tblr"}, {"sha": "017ba3542a4d70479d6b4ab99ab7e14698ee3845", "filename": "gcc/config/rs6000/sol2.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsol2.h?ref=5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "patch": "@@ -52,6 +52,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef\tLINK_OS_DEFAULT_SPEC\n #define\tLINK_OS_DEFAULT_SPEC \"%(link_os_solaris)\"\n \n+#undef\tCPP_ENDIAN_LITTLE_SPEC\n+#define\tCPP_ENDIAN_LITTLE_SPEC CPP_ENDIAN_SOLARIS_SPEC\n+\n /* Don't turn -B into -L if the argument specifies a relative file name.  */\n #undef\tRELATIVE_PREFIX_NOT_LINKDIR\n "}, {"sha": "a5aa5b209cf1926cb10bbb6352735ac9ad948501", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "patch": "@@ -187,7 +187,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else if (TARGET_SDATA)\t\t\t\t\t\t\\\n     rs6000_sdata = (TARGET_EABI) ? SDATA_EABI : SDATA_SYSV;\t\t\\\n-  else if (!TARGET_RELOCATABLE && !flag_pic && DEFAULT_ABI == ABI_V4)\t\\\n+  else if (DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_sdata = SDATA_DATA;\t\t\t\t\t\\\n       target_flags |= MASK_SDATA;\t\t\t\t\t\\\n@@ -198,22 +198,15 @@ do {\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_RELOCATABLE &&\t\t\t\t\t\t\\\n       (rs6000_sdata == SDATA_EABI || rs6000_sdata == SDATA_SYSV))\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      target_flags &= ~MASK_SDATA;\t\t\t\t\t\\\n-      rs6000_sdata = SDATA_NONE;\t\t\t\t\t\\\n+      rs6000_sdata = SDATA_DATA;\t\t\t\t\t\\\n       error (\"-mrelocatable and -msdata are incompatible.\");\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_RELOCATABLE && !TARGET_EABI)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      target_flags |= ~MASK_EABI;\t\t\t\t\t\\\n-      error (\"-mrelocatable and -mno-eabi are incompatible.\");\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_SDATA && DEFAULT_ABI != ABI_V4\t\t\t\t\\\n       && DEFAULT_ABI != ABI_SOLARIS)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags &= ~MASK_SDATA;\t\t\t\t\t\\\n-      error (\"-msdata and -mcall-aix are incompatible.\");\t\t\\\n+      error (\"-msdata and -mcall-%s are incompatible.\", rs6000_abi_name); \\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (TARGET_RELOCATABLE && !TARGET_MINIMAL_TOC)\t\t\t\\\n@@ -1039,6 +1032,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef\tCPP_SYSV_SPEC\n #define CPP_SYSV_SPEC \\\n \"%{mrelocatable*: -D_RELOCATABLE} \\\n+%{fpic: -D__PIC__=1 -D__pic__=1} \\\n+%{fPIC: -D__PIC__=2 -D__pic__=2} \\\n %{mcall-sysv: -D_CALL_SYSV} %{mcall-nt: -D_CALL_NT} \\\n %{mcall-aix: -D_CALL_AIX} %{mcall-aixdesc: -D_CALL_AIX -D_CALL_AIXDESC} \\\n %{!mcall-sysv: %{!mcall-aix: %{!mcall-aixdesc: %{!mcall-nt: %(cpp_sysv_default) }}}} \\\n@@ -1047,22 +1042,34 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef\tCPP_SYSV_DEFAULT_SPEC\n #define\tCPP_SYSV_DEFAULT_SPEC \"-D_CALL_SYSV\"\n \n+#ifndef CPP_ENDIAN_BIG_SPEC\n+#define CPP_ENDIAN_BIG_SPEC \"-D_BIG_ENDIAN -D__BIG_ENDIAN__ -Amachine(bigendian)\"\n+#endif\n+\n+#ifndef CPP_ENDIAN_LITTLE_SPEC\n+#define CPP_ENDIAN_LITTLE_SPEC \"-D_LITTLE_ENDIAN -D__LITTLE_ENDIAN__ -Amachine(littleendian)\"\n+#endif\n+\n+#ifndef CPP_ENDIAN_SOLARIS_SPEC\n+#define CPP_ENDIAN_SOLARIS_SPEC \"-D__LITTLE_ENDIAN__ -Amachine(littleendian)\"\n+#endif\n+\n /* For solaris, don't define _LITTLE_ENDIAN, it conflicts with a header file.  */\n #undef\tCPP_ENDIAN_SPEC\n #define\tCPP_ENDIAN_SPEC \\\n-\"%{mlittle: -D_LITTLE_ENDIAN -Amachine(littleendian)} \\\n-%{mlittle-endian: -D_LITTLE_ENDIAN -Amachine(littleendian)} \\\n-%{mbig: -D_BIG_ENDIAN -Amachine(bigendian)} \\\n-%{mbig-endian: -D_BIG_ENDIAN -Amachine(bigendian)} \\\n+\"%{mlittle: %(cpp_endian_little) } \\\n+%{mlittle-endian: %(cpp_endian_little) } \\\n+%{mbig: %(cpp_endian_big) } \\\n+%{mbig-endian: %(cpp_endian_big) } \\\n %{!mlittle: %{!mlittle-endian: %{!mbig: %{!mbig-endian: \\\n-    %{mcall-solaris: -Amachine(littleendian)} \\\n-    %{mcall-nt: -D_LITTLE_ENDIAN -Amachine(littleendian)} \\\n-    %{mcall-linux: -D_BIG_ENDIAN -Amachine(bigendian)} \\\n-    %{mcall-aixdesc:  -D_BIG_ENDIAN -Amachine(bigendian)} \\\n+    %{mcall-solaris: %(cpp_endian_solaris) } \\\n+    %{mcall-nt: %(cpp_endian_little) } \\\n+    %{mcall-linux: %(cpp_endian_big) } \\\n+    %{mcall-aixdesc:  %(cpp_endian_big) } \\\n     %{!mcall-solaris: %{!mcall-linux: %{!mcall-nt: %{!mcall-aixdesc: %(cpp_endian_default) }}}}}}}}\"\n \n #undef\tCPP_ENDIAN_DEFAULT_SPEC\n-#define\tCPP_ENDIAN_DEFAULT_SPEC \"-D_BIG_ENDIAN -Amachine(bigendian)\"\n+#define\tCPP_ENDIAN_DEFAULT_SPEC \"%(cpp_endian_big)\"\n \n #undef CPP_SPEC\n #define CPP_SPEC \"%{posix: -D_POSIX_SOURCE} %(cpp_sysv) %(cpp_endian) %(cpp_cpu) \\\n@@ -1287,6 +1294,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n   { \"link_os_linux\",\t\tLINK_OS_LINUX_SPEC },\t\t\t\\\n   { \"link_os_solaris\",\t\tLINK_OS_SOLARIS_SPEC },\t\t\t\\\n   { \"link_os_default\",\t\tLINK_OS_DEFAULT_SPEC },\t\t\t\\\n+  { \"cpp_endian_big\",\t\tCPP_ENDIAN_BIG_SPEC },\t\t\t\\\n+  { \"cpp_endian_little\",\tCPP_ENDIAN_LITTLE_SPEC },\t\t\\\n+  { \"cpp_endian_solaris\",\tCPP_ENDIAN_SOLARIS_SPEC },\t\t\\\n   { \"cpp_os_mvme\",\t\tCPP_OS_MVME_SPEC },\t\t\t\\\n   { \"cpp_os_sim\",\t\tCPP_OS_SIM_SPEC },\t\t\t\\\n   { \"cpp_os_linux\",\t\tCPP_OS_LINUX_SPEC },\t\t\t\\"}, {"sha": "4670cb4b910b3d2feb62c079485e8eb51d5d8c5e", "filename": "gcc/config/rs6000/sysv4le.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Fsysv4le.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9/gcc%2Fconfig%2Frs6000%2Fsysv4le.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4le.h?ref=5b9d9a0c0e6d116f4804b4f48cdfb9c0a304dcc9", "patch": "@@ -26,7 +26,7 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS | MASK_LITTLE_ENDIAN)\n \n #undef\tCPP_ENDIAN_DEFAULT_SPEC\n-#define\tCPP_ENDIAN_DEFAULT_SPEC \"-D_LITTLE_ENDIAN -Amachine(littleendian)\"\n+#define\tCPP_ENDIAN_DEFAULT_SPEC \"%(cpp_endian_little)\"\n \n #undef\tLINK_TARGET_SPEC\n #define\tLINK_TARGET_SPEC \"\\"}]}