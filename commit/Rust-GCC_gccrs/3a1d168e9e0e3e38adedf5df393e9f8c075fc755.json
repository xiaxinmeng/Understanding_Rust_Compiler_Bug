{"sha": "3a1d168e9e0e3e38adedf5df393e9f8c075fc755", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ExZDE2OGU5ZTBlM2UzOGFkZWRmNWRmMzkzZTlmOGMwNzVmYzc1NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-26T19:25:00Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-26T19:25:00Z"}, "message": "analyzer: fix uninit false +ve when returning structs\n\nThis patch fixes some false positives from\n -Wanalyzer-use-of-uninitialized-value\nwhen returning structs from functions (seen on the Linux kernel).\n\ngcc/analyzer/ChangeLog:\n\t* region-model.cc (region_model::on_call_pre): Always set conjured\n\tLHS, not just for SSA names.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/sock-1.c: New test.\n\t* gcc.dg/analyzer/sock-2.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "669d6ecfad225fc487c1a161b168d3f57dfc5b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/669d6ecfad225fc487c1a161b168d3f57dfc5b1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a1d168e9e0e3e38adedf5df393e9f8c075fc755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a1d168e9e0e3e38adedf5df393e9f8c075fc755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a1d168e9e0e3e38adedf5df393e9f8c075fc755", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a1d168e9e0e3e38adedf5df393e9f8c075fc755/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ce0b26e6e1e6c348b1d54f1f462a44df6fe47f5"}], "stats": {"total": 145, "additions": 137, "deletions": 8}, "files": [{"sha": "9d84b8c28a1cf368e3db4ae285696ff89e1d8b7b", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a1d168e9e0e3e38adedf5df393e9f8c075fc755/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a1d168e9e0e3e38adedf5df393e9f8c075fc755/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=3a1d168e9e0e3e38adedf5df393e9f8c075fc755", "patch": "@@ -1066,14 +1066,11 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n   if (tree lhs = gimple_call_lhs (call))\n     {\n       const region *lhs_region = get_lvalue (lhs, ctxt);\n-      if (TREE_CODE (lhs) == SSA_NAME)\n-\t{\n-\t  const svalue *sval\n-\t    = m_mgr->get_or_create_conjured_svalue (TREE_TYPE (lhs), call,\n-\t\t\t\t\t\t    lhs_region);\n-\t  purge_state_involving (sval, ctxt);\n-\t  set_value (lhs_region, sval, ctxt);\n-\t}\n+      const svalue *sval\n+\t= m_mgr->get_or_create_conjured_svalue (TREE_TYPE (lhs), call,\n+\t\t\t\t\t\tlhs_region);\n+      purge_state_involving (sval, ctxt);\n+      set_value (lhs_region, sval, ctxt);\n     }\n \n   if (gimple_call_internal_p (call))"}, {"sha": "0f3e822492f077a516239c553e329a43458bbc1b", "filename": "gcc/testsuite/gcc.dg/analyzer/sock-1.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a1d168e9e0e3e38adedf5df393e9f8c075fc755/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsock-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a1d168e9e0e3e38adedf5df393e9f8c075fc755/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsock-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsock-1.c?ref=3a1d168e9e0e3e38adedf5df393e9f8c075fc755", "patch": "@@ -0,0 +1,112 @@\n+typedef unsigned int __u32;\n+__extension__ typedef __signed__ long long __s64;\n+__extension__ typedef unsigned long long __u64;\n+typedef __u32 u32;\n+typedef __s64 s64;\n+typedef __u64 u64;\n+typedef long long __kernel_time64_t;\n+typedef _Bool bool;\n+typedef __s64 time64_t;\n+struct __kernel_timespec {\n+ __kernel_time64_t tv_sec;\n+ long long tv_nsec;\n+};\n+struct timespec64 {\n+ time64_t tv_sec;\n+ long tv_nsec;\n+};\n+\n+extern struct timespec64 ns_to_timespec64(const s64 nsec);\n+int put_timespec64(const struct timespec64 *ts,\n+  struct __kernel_timespec *uts);\n+\n+/* [...snip...] */\n+\n+extern int put_old_timespec32(const struct timespec64 *, void *);\n+\n+/* [...snip...] */\n+\n+/* [...snip...] */\n+\n+typedef s64 ktime_t;\n+\n+/* [...snip...] */\n+\n+extern void ktime_get_real_ts64(struct timespec64 *tv);\n+\n+/* [...snip...] */\n+\n+enum tk_offsets {\n+ TK_OFFS_REAL,\n+ TK_OFFS_BOOT,\n+ TK_OFFS_TAI,\n+ TK_OFFS_MAX,\n+};\n+\n+extern ktime_t ktime_get(void);\n+extern ktime_t ktime_get_with_offset(enum tk_offsets offs);\n+extern ktime_t ktime_get_coarse_with_offset(enum tk_offsets offs);\n+extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);\n+extern ktime_t ktime_get_raw(void);\n+extern u32 ktime_get_resolution_ns(void);\n+\n+\n+static ktime_t ktime_get_real(void)\n+{\n+ return ktime_get_with_offset(TK_OFFS_REAL);\n+}\n+\n+/* [...snip...] */\n+\n+struct socket {\n+ /* [...snip...] */\n+ struct sock *sk;\n+ /* [...snip...] */\n+};\n+\n+/* [...snip...] */\n+\n+struct sock {\n+ /* [...snip...] */\n+ ktime_t sk_stamp;\n+ /* [...snip...] */\n+};\n+\n+/* [...snip...] */\n+\n+static ktime_t sock_read_timestamp(struct sock *sk)\n+{\n+  return *(const volatile typeof(sk->sk_stamp) *)&(sk->sk_stamp);\n+}\n+\n+static void sock_write_timestamp(struct sock *sk, ktime_t kt)\n+{\n+  *(volatile typeof(sk->sk_stamp) *)&(sk->sk_stamp) = kt;\n+}\n+\n+/* [...snip...] */\n+\n+int sock_gettstamp(struct socket *sock, void *userstamp,\n+     bool timeval, bool time32)\n+{\n+ struct sock *sk = sock->sk;\n+ struct timespec64 ts;\n+\n+ /* [...snip...] */\n+ ts = ns_to_timespec64((sock_read_timestamp(sk)));\n+ if (ts.tv_sec == -1)\n+  return -2;\n+ if (ts.tv_sec == 0) {\n+  ktime_t kt = ktime_get_real();\n+  sock_write_timestamp(sk, kt);\n+  ts = ns_to_timespec64((kt));\n+ }\n+\n+ if (timeval)\n+  ts.tv_nsec /= 1000;\n+\n+\n+ if (time32)\n+  return put_old_timespec32(&ts, userstamp);\n+ return put_timespec64(&ts, userstamp);\n+}"}, {"sha": "237e0cb6f0b5befde869681b12c17fec244080c0", "filename": "gcc/testsuite/gcc.dg/analyzer/sock-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a1d168e9e0e3e38adedf5df393e9f8c075fc755/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsock-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a1d168e9e0e3e38adedf5df393e9f8c075fc755/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsock-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsock-2.c?ref=3a1d168e9e0e3e38adedf5df393e9f8c075fc755", "patch": "@@ -0,0 +1,20 @@\n+__extension__ typedef __signed__ long long __s64;\n+typedef __s64 time64_t;\n+struct timespec64 {\n+ time64_t tv_sec;\n+ long tv_nsec;\n+};\n+\n+extern struct timespec64 ns_to_timespec64(void);\n+\n+int sock_gettstamp()\n+{\n+ struct timespec64 ts;\n+\n+ /* [...snip...] */\n+ ts = ns_to_timespec64();\n+ if (ts.tv_sec == -1)\n+  return -2;\n+ /* [...snip...] */\n+ return 0;\n+}"}]}