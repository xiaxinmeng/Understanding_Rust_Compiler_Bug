{"sha": "53ad6b1979f4bd7121e977c4a44151b14d8a0147", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNhZDZiMTk3OWY0YmQ3MTIxZTk3N2M0YTQ0MTUxYjE0ZDhhMDE0Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-11T18:59:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-11T18:59:11Z"}, "message": "libstdc++: Fix chrono::__detail::ceil to work with C++11\n\nIn C++11 constexpr functions can only have a return statement, so we\nneed to fix __detail::ceil to make it valid in C++11. This can be done\nby moving the comparison and increment into a new function, __ceil_impl,\nand calling that with the result of the duration_cast.\n\nThis would mean the standard C++17 std::chrono::ceil function would make\ntwo further calls, which would add too much overhead when not inlined.\nFor C++17 and later use a using-declaration to add chrono::ceil to\nnamespace __detail. For C++11 and C++14 define chrono::__detail::__ceil\nas a C++11-compatible constexpr function template.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/chrono [C++17] (chrono::__detail::ceil): Add\n\tusing declaration to make chrono::ceil available for internal\n\tuse with a consistent name.\n\t(chrono::__detail::__ceil_impl): New function template.\n\t(chrono::__detail::ceil): Use __ceil_impl to compare and\n\tincrement the value. Remove SFINAE constraint.", "tree": {"sha": "b9df4a7e55c89def26e5bb75cba2870e2bf1263f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9df4a7e55c89def26e5bb75cba2870e2bf1263f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53ad6b1979f4bd7121e977c4a44151b14d8a0147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ad6b1979f4bd7121e977c4a44151b14d8a0147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53ad6b1979f4bd7121e977c4a44151b14d8a0147", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ad6b1979f4bd7121e977c4a44151b14d8a0147/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40e99ed5f4e59c6d0a8e81cd6544c9b4e7ec2fe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e99ed5f4e59c6d0a8e81cd6544c9b4e7ec2fe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40e99ed5f4e59c6d0a8e81cd6544c9b4e7ec2fe7"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "7539d7184ea4a507b10c3004e7c28ab9d5c2849f", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ad6b1979f4bd7121e977c4a44151b14d8a0147/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ad6b1979f4bd7121e977c4a44151b14d8a0147/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=53ad6b1979f4bd7121e977c4a44151b14d8a0147", "patch": "@@ -329,20 +329,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n #endif // C++20\n \n-    // We want to use ceil even when compiling for earlier standards versions\n-    namespace __detail\n-    {\n-      template<typename _ToDur, typename _Rep, typename _Period>\n-\tconstexpr __enable_if_is_duration<_ToDur>\n-\tceil(const duration<_Rep, _Period>& __d)\n-\t{\n-\t  auto __to = chrono::duration_cast<_ToDur>(__d);\n-\t  if (__to < __d)\n-\t    return __to + _ToDur{1};\n-\t  return __to;\n-\t}\n-    }\n-\n #if __cplusplus >= 201703L\n # define __cpp_lib_chrono 201611\n \n@@ -360,7 +346,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr __enable_if_is_duration<_ToDur>\n       ceil(const duration<_Rep, _Period>& __d)\n       {\n-\treturn __detail::ceil<_ToDur>(__d);\n+\tauto __to = chrono::duration_cast<_ToDur>(__d);\n+\tif (__to < __d)\n+\t  return __to + _ToDur{1};\n+\treturn __to;\n       }\n \n     template <typename _ToDur, typename _Rep, typename _Period>\n@@ -394,6 +383,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return __d;\n \treturn -__d;\n       }\n+\n+    // Make chrono::ceil<D> also usable as chrono::__detail::ceil<D>.\n+    namespace __detail { using chrono::ceil; }\n+\n+#else // ! C++17\n+\n+    // We want to use ceil even when compiling for earlier standards versions.\n+    // C++11 only allows a single statement in a constexpr function, so we\n+    // need to move the comparison into a separate function, __ceil_impl.\n+    namespace __detail\n+    {\n+      template<typename _Tp, typename _Up>\n+\tconstexpr _Tp\n+\t__ceil_impl(const _Tp& __t, const _Up& __u)\n+\t{\n+\t  return (__t < __u) ? (__t + _Tp{1}) : __t;\n+\t}\n+\n+      // C++11-friendly version of std::chrono::ceil<D> for internal use.\n+      template<typename _ToDur, typename _Rep, typename _Period>\n+\tconstexpr _ToDur\n+\tceil(const duration<_Rep, _Period>& __d)\n+\t{\n+\t  return __detail::__ceil_impl(chrono::duration_cast<_ToDur>(__d), __d);\n+\t}\n+    }\n #endif // C++17\n \n     /// duration_values"}]}