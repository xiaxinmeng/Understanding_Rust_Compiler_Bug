{"sha": "994cf17344edaae8df4a70a831b23c8ba39c4c0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk0Y2YxNzM0NGVkYWFlOGRmNGE3MGE4MzFiMjNjOGJhMzljNGMwYg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-11-26T04:38:11Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-11-26T04:38:11Z"}, "message": "re PR rtl-optimization/16356 (Failure to use count register (branch on count register))\n\n\tPR rtl-optimization/16356\n\t* config/rs6000/rs6000.md (floatdisf2_internal2): Rewrite with\n\tseparate output register and one less jump.  Enable for powerpc64.\n\t(floatdisf2): Adjust for above.\n\nFrom-SVN: r91324", "tree": {"sha": "49487765f922bafc2056b91b8da38a10462163c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49487765f922bafc2056b91b8da38a10462163c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/994cf17344edaae8df4a70a831b23c8ba39c4c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994cf17344edaae8df4a70a831b23c8ba39c4c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/994cf17344edaae8df4a70a831b23c8ba39c4c0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994cf17344edaae8df4a70a831b23c8ba39c4c0b/comments", "author": null, "committer": null, "parents": [{"sha": "9dad6498e846bdb89a852d79ba6d0206947d5272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dad6498e846bdb89a852d79ba6d0206947d5272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dad6498e846bdb89a852d79ba6d0206947d5272"}], "stats": {"total": 104, "additions": 45, "deletions": 59}, "files": [{"sha": "b04a48409db0a533d179c4aa7f417f72f7767046", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994cf17344edaae8df4a70a831b23c8ba39c4c0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994cf17344edaae8df4a70a831b23c8ba39c4c0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=994cf17344edaae8df4a70a831b23c8ba39c4c0b", "patch": "@@ -1,3 +1,10 @@\n+2004-11-26  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR rtl-optimization/16356\n+\t* config/rs6000/rs6000.md (floatdisf2_internal2): Rewrite with\n+\tseparate output register and one less jump.  Enable for powerpc64.\n+\t(floatdisf2): Adjust for above.\n+\n 2004-11-25  Bob Wilson  <bob.wilson@acm.org>\n \n \t* config/xtensa/xtensa.h (STARTFILE_SPEC): Add crt0.\n@@ -32,8 +39,8 @@\n 2004-11-25  Richard Henderson  <rth@redhat.com>\n \n \tPR c++/6764\n-        * reload1.c (set_initial_eh_label_offset): New.\n-        (set_initial_label_offsets): Use it.\n+\t* reload1.c (set_initial_eh_label_offset): New.\n+\t(set_initial_label_offsets): Use it.\n \n 2004-11-25  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n@@ -80,13 +87,13 @@\n \tPR tree-optimization/18587\n \t* tree-flow-inline.h (mark_call_clobbered, mark_non_addressable): Flag\n \tcall clobbered caches as invalid.\n-\t* tree-ssa-operands.c (ssa_call_clobbered_cache_valid): New.  Flag \n+\t* tree-ssa-operands.c (ssa_call_clobbered_cache_valid): New.  Flag\n \tindicating whether the call clobbered operand cache is valid.\n \t(ssa_ro_call_cache_valid): New.  Flag indicating whether the\n \tpure/const call operand cache is valid.\n-\t(clobbered_v_may_defs, clobbered_vuses, ro_call_vuses): New.  Cached \n+\t(clobbered_v_may_defs, clobbered_vuses, ro_call_vuses): New.  Cached\n \tlist of operands for cached call virtual operands.\n-\t(clobbered_aliased_loads, clobbered_aliased_stores, \n+\t(clobbered_aliased_loads, clobbered_aliased_stores,\n \tro_call_aliased_load): New.  flags caching whether alias bits are\n \tto be set in call stmt's.\n \t(fini_ssa_operands): Remove call operand caches if present.\n@@ -104,7 +111,7 @@\n \tbuild array\n \t(finalize_ssa_vuses): Use cleanup_v_may_defs and remove redundant\n \tVUSES by checking the in_v_may_def_list bit.\n-\t(append_v_may_def, append_vuse): Use the in_list bit rather than \n+\t(append_v_may_def, append_vuse): Use the in_list bit rather than\n \tscanning the array for duplicates.\n \n 2004-11-25  Ulrich Weigand  <uweigand@de.ibm.com>\n@@ -295,7 +302,7 @@\n \t* config/i386/i386.c (i386_dwarf_output_addr_const): Likewise.\n \t* config/i386/i386-protos.h (i386_dwarf_output_addr_const):\n \tLikewise.\n-\t\n+\n 2004-11-24  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree-sra.c (sra_walk_modify_expr): Handle RHS first, then LHS.\n@@ -352,7 +359,7 @@\n \t* recog.c (recog_memoized_1): Remove.\n \t* recog.h (recog_memoized_1): Remove declaration.\n \t(recog_memoized): Change from macro to inline function.\n-\t\n+\n 2004-11-24  Devang Patel  <dpatel@apple.com>\n \n \tPR/18555\n@@ -362,7 +369,7 @@\n 2004-11-24  Devang Patel  <dpatel@apple.com>\n \n \t* gcc.c (process_command): Supply -v to linker.\n-\t\n+\n 2004-11-24  David Edelsohn  <edelsohn@gnu.org>\n \t    Paolo Bonzini  <bonzini@gnu.org>\n \n@@ -417,7 +424,7 @@\n \n 2004-11-24  Mark Mitchell  <mark@codesourcery.com>\n \n-\t* config/i386/sol2.h (X86_FILE_START_VERSION_DIRECTIVE): \n+\t* config/i386/sol2.h (X86_FILE_START_VERSION_DIRECTIVE):\n \tDefine to false.\n \n 2004-11-24  Joseph Myers  <joseph@codesourcery.com>\n@@ -448,7 +455,7 @@\n \n 2004-11-24  Steven Bosscher  <stevenb@suse.de>\n \n-\t* expr.c (expand_expr_real_1): Remove cases for EXIT_BLOCK_EXPR \n+\t* expr.c (expand_expr_real_1): Remove cases for EXIT_BLOCK_EXPR\n \tand LABELED_BLOCK_EXPR.\n \t* gimplify.c (gimplify_labeled_block_expr): Remove.\n \t(gimplify_exit_block_expr): Remove.\n@@ -23717,31 +23724,7 @@\n \t(c_initialize_diagnostics): Declare.\n \t* objc/objc-lang.c (LANG_HOOKS_INITIALIZE_DIAGNOSTICS): Define.\n \t* c-format.c (format_type_warning): New function.  Improve\n-\tdiagnostics for incorrect format argument types.\n-\t(check_format_types): Use it.  Add two parameters.  Use the\n-\tTYPE_MAIN_VARIANT of wanted_type.\n-\t(check_format_info_main): Pass new parameters to\n-\tcheck_format_types.\n-\t(struct format_wanted_type): Update comment.\n-\n-2004-07-01  Nick Clifton  <nickc@redhat.com>\n-\n-\t* target.h (struct gcc_target): Add new field to struct cxx:\n-\timport_export_class.\n-\t* target-def.h (TARGET_CXX): Initialise the new field.\n-\t(TARGET_CXX_IMPORT_EXPORT_CLASS): Provide a default value for\n-\tthe new field.\n-\t* doc/tm.texi: Document the new target hook.\n-\n-2004-07-01  Paolo Bonzini  <bonzini@gnu.org>\n-\n-\t* builtins.c (fold_builtin_classify): Fix typo.\n-\n-2004-07-01  Richard Henderson  <rth@redhat.com>\n-\n-\t* function.c (identify_blocks, identify_blocks_1): Remove.\n-\t* function.h (identify_blocks): Remove.\n-\t* rtl.h (NOTE_INSN_BLOCK_BEG): Update comment.\n+\tdi\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000_BEG): Update comment.\n \n 2004-07-01  Paolo Bonzini  <bonzini@gnu.org>\n "}, {"sha": "edbccc64613aa69bbd9fcc49de8be318d386db5f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994cf17344edaae8df4a70a831b23c8ba39c4c0b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994cf17344edaae8df4a70a831b23c8ba39c4c0b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=994cf17344edaae8df4a70a831b23c8ba39c4c0b", "patch": "@@ -5402,16 +5402,18 @@\n (define_expand \"floatdisf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n         (float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_64BIT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n+  rtx val = operands[1];\n   if (!flag_unsafe_math_optimizations)\n     {\n       rtx label = gen_label_rtx ();\n-      emit_insn (gen_floatdisf2_internal2 (operands[1], label));\n+      val = gen_reg_rtx (DImode);\n+      emit_insn (gen_floatdisf2_internal2 (val, operands[1], label));\n       emit_label (label);\n     }\n-  emit_insn (gen_floatdisf2_internal1 (operands[0], operands[1]));\n+  emit_insn (gen_floatdisf2_internal1 (operands[0], val));\n   DONE;\n }\")\n \n@@ -5436,30 +5438,31 @@\n ;; by a bit that won't be lost at that stage, but is below the SFmode\n ;; rounding position.\n (define_expand \"floatdisf2_internal2\"\n-  [(parallel [(set (match_dup 4)\n-\t\t   (compare:CC (and:DI (match_operand:DI 0 \"\" \"\")\n-\t\t\t\t       (const_int 2047))\n-\t\t\t       (const_int 0)))\n-\t      (set (match_dup 2) (and:DI (match_dup 0) (const_int 2047)))\n-\t      (clobber (match_scratch:CC 7 \"\"))])\n-   (set (match_dup 3) (ashiftrt:DI (match_dup 0) (const_int 53)))\n-   (set (match_dup 3) (plus:DI (match_dup 3) (const_int 1)))\n-   (set (pc) (if_then_else (eq (match_dup 4) (const_int 0))\n-\t\t\t   (label_ref (match_operand:DI 1 \"\" \"\"))\n-\t\t\t   (pc)))\n-   (set (match_dup 5) (compare:CCUNS (match_dup 3) (const_int 2)))\n-   (set (pc) (if_then_else (ltu (match_dup 5) (const_int 0))\n-\t\t\t   (label_ref (match_dup 1))\n+  [(set (match_dup 3) (ashiftrt:DI (match_operand:DI 1 \"\" \"\")\n+\t\t\t\t   (const_int 53)))\n+   (parallel [(set (match_operand:DI 0 \"\" \"\") (and:DI (match_dup 1)\n+\t\t\t\t\t\t      (const_int 2047)))\n+\t      (clobber (scratch:CC))])\n+   (set (match_dup 3) (plus:DI (match_dup 3)\n+\t\t\t       (const_int 1)))\n+   (set (match_dup 0) (plus:DI (match_dup 0)\n+\t\t\t       (const_int 2047)))\n+   (set (match_dup 4) (compare:CCUNS (match_dup 3)\n+\t\t\t\t     (const_int 3)))\n+   (set (match_dup 0) (ior:DI (match_dup 0)\n+\t\t\t      (match_dup 1)))\n+   (parallel [(set (match_dup 0) (and:DI (match_dup 0)\n+\t\t\t\t\t (const_int -2048)))\n+\t      (clobber (scratch:CC))])\n+   (set (pc) (if_then_else (geu (match_dup 4) (const_int 0))\n+\t\t\t   (label_ref (match_operand:DI 2 \"\" \"\"))\n \t\t\t   (pc)))\n-   (set (match_dup 0) (xor:DI (match_dup 0) (match_dup 2)))\n-   (set (match_dup 0) (ior:DI (match_dup 0) (const_int 2048)))]\n-  \"TARGET_64BIT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+   (set (match_dup 0) (match_dup 1))]\n+  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n-  operands[2] = gen_reg_rtx (DImode);\n   operands[3] = gen_reg_rtx (DImode);\n-  operands[4] = gen_reg_rtx (CCmode);\n-  operands[5] = gen_reg_rtx (CCUNSmode);\n+  operands[4] = gen_reg_rtx (CCUNSmode);\n }\")\n \f\n ;; Define the DImode operations that can be done in a small number"}]}