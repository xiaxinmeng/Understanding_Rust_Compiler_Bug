{"sha": "b04533af33ccf91e2874b24dd3e678d195c83587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA0NTMzYWYzM2NjZjkxZTI4NzRiMjRkZDNlNjc4ZDE5NWM4MzU4Nw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-11-09T10:39:46Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-11-09T10:39:46Z"}, "message": "re PR fortran/46313 ([OOP] class container naming collisions)\n\n2010-11-09  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/46313\n\t* gfortran.h (gfc_add_data_component,gfc_add_vptr_component,\n\tgfc_add_hash_component,gfc_add_size_component,\n\tgfc_add_def_init_component): New macros.\n\t* class.c (gfc_add_component_ref): Renamed data component.\n\t(get_unique_type_string): New function.\n\t(gfc_build_class_symbol): Use 'get_unique_type_string' to construct\n\tuniques names for the class containers. Rename components.\n\t(gfc_find_derived_vtab): Use 'get_unique_type_string' to construct\n\tuniques names for the vtab symbols. Rename components.\n\t* decl.c (attr_decl1): Renamed class container components.\n\t* iresolve.c (gfc_resolve_extends_type_of): Ditto.\n\t* match.c (select_type_set_tmp): Renamed temporaries.\n\t* module.c (read_module): Renamed vtab and vtype symbols.\n\t* resolve.c (resolve_structure_cons,resolve_typebound_function,\n\tresolve_typebound_subroutine,resolve_deallocate_expr,\n\tresolve_select_type,resolve_fl_derived): Renamed class container and\n\tvtab components.\n\t* trans-array.c (structure_alloc_comps): Ditto.\n\t* trans-decl.c (gfc_trans_deferred_vars): Ditto.\n\t* trans-expr.c (gfc_conv_derived_to_class,gfc_conv_structure,\n\tgfc_trans_class_init_assign,gfc_trans_class_assign): Ditto.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_sizeof,\n\tgfc_conv_intrinsic_storage_size,gfc_conv_allocated,gfc_conv_associated,\n\tgfc_conv_same_type_as): Ditto.\n\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n\n2010-11-09  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/46313\n\t* gfortran.dg/class_29.f03: New.\n\nFrom-SVN: r166480", "tree": {"sha": "14d1f54316ef0bc517c72a674952cb7d233fd288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14d1f54316ef0bc517c72a674952cb7d233fd288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b04533af33ccf91e2874b24dd3e678d195c83587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04533af33ccf91e2874b24dd3e678d195c83587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04533af33ccf91e2874b24dd3e678d195c83587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04533af33ccf91e2874b24dd3e678d195c83587/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6496e42f8734797b1a5613585c47e51398419547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6496e42f8734797b1a5613585c47e51398419547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6496e42f8734797b1a5613585c47e51398419547"}], "stats": {"total": 292, "additions": 191, "deletions": 101}, "files": [{"sha": "bfd83039aee4aed758b522495306ce9a7ae16ac6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -1,3 +1,32 @@\n+2010-11-09  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/46313\n+\t* gfortran.h (gfc_add_data_component,gfc_add_vptr_component,\n+\tgfc_add_hash_component,gfc_add_size_component,\n+\tgfc_add_def_init_component): New macros.\n+\t* class.c (gfc_add_component_ref): Renamed data component.\n+\t(get_unique_type_string): New function.\n+\t(gfc_build_class_symbol): Use 'get_unique_type_string' to construct\n+\tuniques names for the class containers. Rename components.\n+\t(gfc_find_derived_vtab): Use 'get_unique_type_string' to construct\n+\tuniques names for the vtab symbols. Rename components.\n+\t* decl.c (attr_decl1): Renamed class container components.\n+\t* iresolve.c (gfc_resolve_extends_type_of): Ditto.\n+\t* match.c (select_type_set_tmp): Renamed temporaries.\n+\t* module.c (read_module): Renamed vtab and vtype symbols.\n+\t* resolve.c (resolve_structure_cons,resolve_typebound_function,\n+\tresolve_typebound_subroutine,resolve_deallocate_expr,\n+\tresolve_select_type,resolve_fl_derived): Renamed class container and\n+\tvtab components.\n+\t* trans-array.c (structure_alloc_comps): Ditto.\n+\t* trans-decl.c (gfc_trans_deferred_vars): Ditto.\n+\t* trans-expr.c (gfc_conv_derived_to_class,gfc_conv_structure,\n+\tgfc_trans_class_init_assign,gfc_trans_class_assign): Ditto.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_sizeof,\n+\tgfc_conv_intrinsic_storage_size,gfc_conv_allocated,gfc_conv_associated,\n+\tgfc_conv_same_type_as): Ditto.\n+\t* trans-stmt.c (gfc_trans_allocate): Ditto.\n+\n 2010-11-08  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/43899"}, {"sha": "46d8bf1a0a205854f7537aad0642287f43fc7eca", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 54, "deletions": 37, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -29,18 +29,18 @@ along with GCC; see the file COPYING3.  If not see\n \n    Each CLASS variable is encapsulated by a class container, which is a\n    structure with two fields:\n-    * $data: A pointer to the actual data of the variable. This field has the\n+    * _data: A pointer to the actual data of the variable. This field has the\n              declared type of the class variable and its attributes\n              (pointer/allocatable/dimension/...).\n-    * $vptr: A pointer to the vtable entry (see below) of the dynamic type.\n+    * _vptr: A pointer to the vtable entry (see below) of the dynamic type.\n     \n    For each derived type we set up a \"vtable\" entry, i.e. a structure with the\n    following fields:\n-    * $hash: A hash value serving as a unique identifier for this type.\n-    * $size: The size in bytes of the derived type.\n-    * $extends: A pointer to the vtable entry of the parent derived type.\n-    * $def_init: A pointer to a default initialized variable of this type.\n-    * $copy: A procedure pointer to a copying procedure.\n+    * _hash:     A hash value serving as a unique identifier for this type.\n+    * _size:     The size in bytes of the derived type.\n+    * _extends:  A pointer to the vtable entry of the parent derived type.\n+    * _def_init: A pointer to a default initialized variable of this type.\n+    * _copy:     A procedure pointer to a copying procedure.\n    After these follow procedure pointer components for the specific\n    type-bound procedures.  */\n \n@@ -52,7 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n \n \n /* Insert a reference to the component of the given name.\n-   Only to be used with CLASS containers.  */\n+   Only to be used with CLASS containers and vtables.  */\n \n void\n gfc_add_component_ref (gfc_expr *e, const char *name)\n@@ -68,7 +68,7 @@ gfc_add_component_ref (gfc_expr *e, const char *name)\n \tbreak;\n       tail = &((*tail)->next);\n     }\n-  if (*tail != NULL && strcmp (name, \"$data\") == 0)\n+  if (*tail != NULL && strcmp (name, \"_data\") == 0)\n     next = *tail;\n   (*tail) = gfc_get_ref();\n   (*tail)->next = next;\n@@ -82,7 +82,7 @@ gfc_add_component_ref (gfc_expr *e, const char *name)\n \n \n /* Build a NULL initializer for CLASS pointers,\n-   initializing the $data and $vptr components to zero.  */\n+   initializing the _data and _vptr components to zero.  */\n \n gfc_expr *\n gfc_class_null_initializer (gfc_typespec *ts)\n@@ -107,31 +107,46 @@ gfc_class_null_initializer (gfc_typespec *ts)\n }\n \n \n+/* Create a unique string identifier for a derived type, composed of its name\n+   and module name. This is used to construct unique names for the class\n+   containers and vtab symbols.  */\n+\n+static void\n+get_unique_type_string (char *string, gfc_symbol *derived)\n+{  \n+  if (derived->module)\n+    sprintf (string, \"%s_%s\", derived->module, derived->name);\n+  else\n+    sprintf (string, \"%s_%s\", derived->ns->proc_name->name, derived->name);\n+}\n+\n+\n /* Build a polymorphic CLASS entity, using the symbol that comes from\n    build_sym. A CLASS entity is represented by an encapsulating type,\n-   which contains the declared type as '$data' component, plus a pointer\n-   component '$vptr' which determines the dynamic type.  */\n+   which contains the declared type as '_data' component, plus a pointer\n+   component '_vptr' which determines the dynamic type.  */\n \n gfc_try\n gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n \t\t\tgfc_array_spec **as, bool delayed_vtab)\n {\n-  char name[GFC_MAX_SYMBOL_LEN + 5];\n+  char name[GFC_MAX_SYMBOL_LEN], tname[GFC_MAX_SYMBOL_LEN];\n   gfc_symbol *fclass;\n   gfc_symbol *vtab;\n   gfc_component *c;\n \n   /* Determine the name of the encapsulating type.  */\n+  get_unique_type_string (tname, ts->u.derived);\n   if ((*as) && (*as)->rank && attr->allocatable)\n-    sprintf (name, \"class$%s_%d_a\", ts->u.derived->name, (*as)->rank);\n+    sprintf (name, \"__class_%s_%d_a\", tname, (*as)->rank);\n   else if ((*as) && (*as)->rank)\n-    sprintf (name, \"class$%s_%d\", ts->u.derived->name, (*as)->rank);\n+    sprintf (name, \"__class_%s_%d\", tname, (*as)->rank);\n   else if (attr->pointer)\n-    sprintf (name, \"class$%s_p\", ts->u.derived->name);\n+    sprintf (name, \"__class_%s_p\", tname);\n   else if (attr->allocatable)\n-    sprintf (name, \"class$%s_a\", ts->u.derived->name);\n+    sprintf (name, \"__class_%s_a\", tname);\n   else\n-    sprintf (name, \"class$%s\", ts->u.derived->name);\n+    sprintf (name, \"__class_%s\", tname);\n \n   gfc_find_symbol (name, ts->u.derived->ns, 0, &fclass);\n   if (fclass == NULL)\n@@ -151,8 +166,8 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n \t  NULL, &gfc_current_locus) == FAILURE)\n \treturn FAILURE;\n \n-      /* Add component '$data'.  */\n-      if (gfc_add_component (fclass, \"$data\", &c) == FAILURE)\n+      /* Add component '_data'.  */\n+      if (gfc_add_component (fclass, \"_data\", &c) == FAILURE)\n \treturn FAILURE;\n       c->ts = *ts;\n       c->ts.type = BT_DERIVED;\n@@ -167,8 +182,8 @@ gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n       c->as = (*as);\n       c->initializer = NULL;\n \n-      /* Add component '$vptr'.  */\n-      if (gfc_add_component (fclass, \"$vptr\", &c) == FAILURE)\n+      /* Add component '_vptr'.  */\n+      if (gfc_add_component (fclass, \"_vptr\", &c) == FAILURE)\n \treturn FAILURE;\n       c->ts.type = BT_DERIVED;\n       if (delayed_vtab)\n@@ -316,7 +331,6 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n   gfc_namespace *ns;\n   gfc_symbol *vtab = NULL, *vtype = NULL, *found_sym = NULL, *def_init = NULL;\n   gfc_symbol *copy = NULL, *src = NULL, *dst = NULL;\n-  char name[2 * GFC_MAX_SYMBOL_LEN + 8];\n   \n   /* Find the top-level namespace (MODULE or PROGRAM).  */\n   for (ns = gfc_current_ns; ns; ns = ns->parent)\n@@ -329,7 +343,10 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n     \n   if (ns)\n     {\n-      sprintf (name, \"vtab$%s\", derived->name);\n+      char name[GFC_MAX_SYMBOL_LEN], tname[GFC_MAX_SYMBOL_LEN];\n+      \n+      get_unique_type_string (tname, derived);\n+      sprintf (name, \"__vtab_%s\", tname);\n \n       /* Look for the vtab symbol in various namespaces.  */\n       gfc_find_symbol (name, gfc_current_ns, 0, &vtab);\n@@ -350,7 +367,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t  vtab->attr.vtab = 1;\n \t  vtab->attr.access = ACCESS_PUBLIC;\n \t  gfc_set_sym_referenced (vtab);\n-\t  sprintf (name, \"vtype$%s\", derived->name);\n+\t  sprintf (name, \"__vtype_%s\", tname);\n \t  \n \t  gfc_find_symbol (name, ns, 0, &vtype);\n \t  if (vtype == NULL)\n@@ -366,17 +383,17 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t      vtype->attr.vtype = 1;\n \t      gfc_set_sym_referenced (vtype);\n \n-\t      /* Add component '$hash'.  */\n-\t      if (gfc_add_component (vtype, \"$hash\", &c) == FAILURE)\n+\t      /* Add component '_hash'.  */\n+\t      if (gfc_add_component (vtype, \"_hash\", &c) == FAILURE)\n \t\tgoto cleanup;\n \t      c->ts.type = BT_INTEGER;\n \t      c->ts.kind = 4;\n \t      c->attr.access = ACCESS_PRIVATE;\n \t      c->initializer = gfc_get_int_expr (gfc_default_integer_kind,\n \t\t\t\t\t\t NULL, derived->hash_value);\n \n-\t      /* Add component '$size'.  */\n-\t      if (gfc_add_component (vtype, \"$size\", &c) == FAILURE)\n+\t      /* Add component '_size'.  */\n+\t      if (gfc_add_component (vtype, \"_size\", &c) == FAILURE)\n \t\tgoto cleanup;\n \t      c->ts.type = BT_INTEGER;\n \t      c->ts.kind = 4;\n@@ -388,8 +405,8 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t      c->initializer = gfc_get_int_expr (gfc_default_integer_kind,\n \t\t\t\t\t\t NULL, 0);\n \n-\t      /* Add component $extends.  */\n-\t      if (gfc_add_component (vtype, \"$extends\", &c) == FAILURE)\n+\t      /* Add component _extends.  */\n+\t      if (gfc_add_component (vtype, \"_extends\", &c) == FAILURE)\n \t\tgoto cleanup;\n \t      c->attr.pointer = 1;\n \t      c->attr.access = ACCESS_PRIVATE;\n@@ -419,8 +436,8 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t\t  goto have_vtype;\n \t\t}\n \n-\t      /* Add component $def_init.  */\n-\t      if (gfc_add_component (vtype, \"$def_init\", &c) == FAILURE)\n+\t      /* Add component _def_init.  */\n+\t      if (gfc_add_component (vtype, \"_def_init\", &c) == FAILURE)\n \t\tgoto cleanup;\n \t      c->attr.pointer = 1;\n \t      c->attr.access = ACCESS_PRIVATE;\n@@ -431,7 +448,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t      else\n \t\t{\n \t\t  /* Construct default initialization variable.  */\n-\t\t  sprintf (name, \"def_init$%s\", derived->name);\n+\t\t  sprintf (name, \"__def_init_%s\", tname);\n \t\t  gfc_get_symbol (name, ns, &def_init);\n \t\t  def_init->attr.target = 1;\n \t\t  def_init->attr.save = SAVE_EXPLICIT;\n@@ -445,8 +462,8 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t\t  c->initializer = gfc_lval_expr_from_sym (def_init);\n \t\t}\n \n-\t      /* Add component $copy.  */\n-\t      if (gfc_add_component (vtype, \"$copy\", &c) == FAILURE)\n+\t      /* Add component _copy.  */\n+\t      if (gfc_add_component (vtype, \"_copy\", &c) == FAILURE)\n \t\tgoto cleanup;\n \t      c->attr.proc_pointer = 1;\n \t      c->attr.access = ACCESS_PRIVATE;\n@@ -462,7 +479,7 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n \t\t  ns->contained = sub_ns;\n \t\t  sub_ns->resolved = 1;\n \t\t  /* Set up procedure symbol.  */\n-\t\t  sprintf (name, \"copy$%s\", derived->name);\n+\t\t  sprintf (name, \"__copy_%s\", tname);\n \t\t  gfc_get_symbol (name, sub_ns, &copy);\n \t\t  sub_ns->proc_name = copy;\n \t\t  copy->attr.flavor = FL_PROCEDURE;"}, {"sha": "eb2d36e0e1707aa96dce7639e951bfb3a7326676", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -6020,10 +6020,10 @@ attr_decl1 (void)\n \n   /* Update symbol table.  DIMENSION attribute is set in\n      gfc_set_array_spec().  For CLASS variables, this must be applied\n-     to the first component, or '$data' field.  */\n+     to the first component, or '_data' field.  */\n   if (sym->ts.type == BT_CLASS && sym->ts.u.derived->attr.is_class)\n     {\n-      if (gfc_copy_attr (&CLASS_DATA (sym)->attr, &current_attr,&var_locus)\n+      if (gfc_copy_attr (&CLASS_DATA (sym)->attr, &current_attr, &var_locus)\n \t  == FAILURE)\n \t{\n \t  m = MATCH_ERROR;"}, {"sha": "13dbbc6f8414b1581cd7cc4b1c995ee89dc87e57", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -2877,6 +2877,11 @@ gfc_try gfc_check_same_strlen (const gfc_expr*, const gfc_expr*, const char*);\n \n /* class.c */\n void gfc_add_component_ref (gfc_expr *, const char *);\n+#define gfc_add_data_component(e)     gfc_add_component_ref(e,\"_data\")\n+#define gfc_add_vptr_component(e)     gfc_add_component_ref(e,\"_vptr\")\n+#define gfc_add_hash_component(e)     gfc_add_component_ref(e,\"_hash\")\n+#define gfc_add_size_component(e)     gfc_add_component_ref(e,\"_size\")\n+#define gfc_add_def_init_component(e) gfc_add_component_ref(e,\"_def_init\")\n gfc_expr *gfc_class_null_initializer (gfc_typespec *);\n gfc_try gfc_build_class_symbol (gfc_typespec *, symbol_attribute *,\n \t\t\t\tgfc_array_spec **, bool);"}, {"sha": "12854fbf638ba797880531bc41830ea67f988fd5", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -938,7 +938,7 @@ gfc_resolve_extends_type_of (gfc_expr *f, gfc_expr *a, gfc_expr *mo)\n \n   /* Replace the first argument with the corresponding vtab.  */\n   if (a->ts.type == BT_CLASS)\n-    gfc_add_component_ref (a, \"$vptr\");\n+    gfc_add_vptr_component (a);\n   else if (a->ts.type == BT_DERIVED)\n     {\n       vtab = gfc_find_derived_vtab (a->ts.u.derived);\n@@ -954,7 +954,7 @@ gfc_resolve_extends_type_of (gfc_expr *f, gfc_expr *a, gfc_expr *mo)\n \n   /* Replace the second argument with the corresponding vtab.  */\n   if (mo->ts.type == BT_CLASS)\n-    gfc_add_component_ref (mo, \"$vptr\");\n+    gfc_add_vptr_component (mo);\n   else if (mo->ts.type == BT_DERIVED)\n     {\n       vtab = gfc_find_derived_vtab (mo->ts.u.derived);"}, {"sha": "6cd1c467defea59f913c246c3d517696157883b4", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -4516,9 +4516,9 @@ select_type_set_tmp (gfc_typespec *ts)\n     return;\n \n   if (ts->type == BT_CLASS)\n-    sprintf (name, \"tmp$class$%s\", ts->u.derived->name);\n+    sprintf (name, \"__tmp_class_%s\", ts->u.derived->name);\n   else\n-    sprintf (name, \"tmp$type$%s\", ts->u.derived->name);\n+    sprintf (name, \"__tmp_type_%s\", ts->u.derived->name);\n   gfc_get_sym_tree (name, gfc_current_ns, &tmp, false);\n   gfc_add_type (tmp->n.sym, ts, NULL);\n   gfc_set_sym_referenced (tmp->n.sym);"}, {"sha": "f10e43b2720017e90d5e4a83b68f50d10d3124e4", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -4372,8 +4372,8 @@ read_module (void)\n \t    p = name;\n \n \t  /* Exception: Always import vtabs & vtypes.  */\n-\t  if (p == NULL && (strncmp (name, \"vtab$\", 5) == 0\n-\t\t\t    || strncmp (name, \"vtype$\", 6) == 0))\n+\t  if (p == NULL && (strncmp (name, \"__vtab_\", 5) == 0\n+\t\t\t    || strncmp (name, \"__vtype_\", 6) == 0))\n \t    p = name;\n \n \t  /* Skip symtree nodes not in an ONLY clause, unless there"}, {"sha": "f18d28c3bc421e3ad292abc9467eb3cbfded3fef", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -988,9 +988,9 @@ resolve_structure_cons (gfc_expr *expr, int init)\n \t  !gfc_compare_types (&cons->expr->ts, &comp->ts))\n \t{\n \t  t = FAILURE;\n-\t  if (strcmp (comp->name, \"$extends\") == 0)\n+\t  if (strcmp (comp->name, \"_extends\") == 0)\n \t    {\n-\t      /* Can afford to be brutal with the $extends initializer.\n+\t      /* Can afford to be brutal with the _extends initializer.\n \t\t The derived type can get lost because it is PRIVATE\n \t\t but it is not usage constrained by the standard.  */\n \t      cons->expr->ts = comp->ts;\n@@ -5726,7 +5726,7 @@ resolve_typebound_function (gfc_expr* e)\n \t is present.  */\n       ts = expr->ts;\n       declared = ts.u.derived;\n-      c = gfc_find_component (declared, \"$vptr\", true, true);\n+      c = gfc_find_component (declared, \"_vptr\", true, true);\n       if (c->ts.u.derived == NULL)\n \tc->ts.u.derived = gfc_find_derived_vtab (declared);\n \n@@ -5737,7 +5737,7 @@ resolve_typebound_function (gfc_expr* e)\n       name = name ? name : e->value.function.esym->name;\n       e->symtree = expr->symtree;\n       e->ref = gfc_copy_ref (expr->ref);\n-      gfc_add_component_ref (e, \"$vptr\");\n+      gfc_add_vptr_component (e);\n       gfc_add_component_ref (e, name);\n       e->value.function.esym = NULL;\n       return SUCCESS;\n@@ -5760,7 +5760,7 @@ resolve_typebound_function (gfc_expr* e)\n       return resolve_compcall (e, NULL);\n     }\n \n-  c = gfc_find_component (declared, \"$data\", true, true);\n+  c = gfc_find_component (declared, \"_data\", true, true);\n   declared = c->ts.u.derived;\n \n   /* Treat the call as if it is a typebound procedure, in order to roll\n@@ -5776,8 +5776,8 @@ resolve_typebound_function (gfc_expr* e)\n   if (new_ref)  \n     e->ref = new_ref;\n \n-  /* '$vptr' points to the vtab, which contains the procedure pointers.  */\n-  gfc_add_component_ref (e, \"$vptr\");\n+  /* '_vptr' points to the vtab, which contains the procedure pointers.  */\n+  gfc_add_vptr_component (e);\n   gfc_add_component_ref (e, name);\n \n   /* Recover the typespec for the expression.  This is really only\n@@ -5816,7 +5816,7 @@ resolve_typebound_subroutine (gfc_code *code)\n \t is present.  */\n       ts = expr->symtree->n.sym->ts;\n       declared = ts.u.derived;\n-      c = gfc_find_component (declared, \"$vptr\", true, true);\n+      c = gfc_find_component (declared, \"_vptr\", true, true);\n       if (c->ts.u.derived == NULL)\n \tc->ts.u.derived = gfc_find_derived_vtab (declared);\n \n@@ -5827,7 +5827,7 @@ resolve_typebound_subroutine (gfc_code *code)\n       name = name ? name : code->expr1->value.function.esym->name;\n       code->expr1->symtree = expr->symtree;\n       expr->symtree->n.sym->ts.u.derived = declared;\n-      gfc_add_component_ref (code->expr1, \"$vptr\");\n+      gfc_add_vptr_component (code->expr1);\n       gfc_add_component_ref (code->expr1, name);\n       code->expr1->value.function.esym = NULL;\n       return SUCCESS;\n@@ -5861,8 +5861,8 @@ resolve_typebound_subroutine (gfc_code *code)\n   if (new_ref)\n     code->expr1->ref = new_ref;\n \n-  /* '$vptr' points to the vtab, which contains the procedure pointers.  */\n-  gfc_add_component_ref (code->expr1, \"$vptr\");\n+  /* '_vptr' points to the vtab, which contains the procedure pointers.  */\n+  gfc_add_vptr_component (code->expr1);\n   gfc_add_component_ref (code->expr1, name);\n \n   /* Recover the typespec for the expression.  This is really only\n@@ -6404,7 +6404,7 @@ resolve_deallocate_expr (gfc_expr *e)\n   if (e->ts.type == BT_CLASS)\n     {\n       /* Only deallocate the DATA component.  */\n-      gfc_add_component_ref (e, \"$data\");\n+      gfc_add_data_component (e);\n     }\n \n   return SUCCESS;\n@@ -7735,8 +7735,8 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n     ns->code->next = new_st;\n   code = new_st;\n   code->op = EXEC_SELECT;\n-  gfc_add_component_ref (code->expr1, \"$vptr\");\n-  gfc_add_component_ref (code->expr1, \"$hash\");\n+  gfc_add_vptr_component (code->expr1);\n+  gfc_add_hash_component (code->expr1);\n \n   /* Loop over TYPE IS / CLASS IS cases.  */\n   for (body = code->block; body; body = body->block)\n@@ -7756,14 +7756,14 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t 'global' one).  */\n \n       if (c->ts.type == BT_CLASS)\n-\tsprintf (name, \"tmp$class$%s\", c->ts.u.derived->name);\n+\tsprintf (name, \"__tmp_class_%s\", c->ts.u.derived->name);\n       else\n-\tsprintf (name, \"tmp$type$%s\", c->ts.u.derived->name);\n+\tsprintf (name, \"__tmp_type_%s\", c->ts.u.derived->name);\n       st = gfc_find_symtree (ns->sym_root, name);\n       gcc_assert (st->n.sym->assoc);\n       st->n.sym->assoc->target = gfc_get_variable_expr (code->expr1->symtree);\n       if (c->ts.type == BT_DERIVED)\n-\tgfc_add_component_ref (st->n.sym->assoc->target, \"$data\");\n+\tgfc_add_data_component (st->n.sym->assoc->target);\n \n       new_st = gfc_get_code ();\n       new_st->op = EXEC_BLOCK;\n@@ -7880,7 +7880,7 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n \t  /* Set up arguments.  */\n \t  new_st->expr1->value.function.actual = gfc_get_actual_arglist ();\n \t  new_st->expr1->value.function.actual->expr = gfc_get_variable_expr (code->expr1->symtree);\n-\t  gfc_add_component_ref (new_st->expr1->value.function.actual->expr, \"$vptr\");\n+\t  gfc_add_vptr_component (new_st->expr1->value.function.actual->expr);\n \t  vtab = gfc_find_derived_vtab (body->ext.case_list->ts.u.derived);\n \t  st = gfc_find_symtree (vtab->ns->sym_root, vtab->name);\n \t  new_st->expr1->value.function.actual->next = gfc_get_actual_arglist ();\n@@ -11193,8 +11193,8 @@ resolve_fl_derived (gfc_symbol *sym)\n   if (sym->attr.is_class && sym->ts.u.derived == NULL)\n     {\n       /* Fix up incomplete CLASS symbols.  */\n-      gfc_component *data = gfc_find_component (sym, \"$data\", true, true);\n-      gfc_component *vptr = gfc_find_component (sym, \"$vptr\", true, true);\n+      gfc_component *data = gfc_find_component (sym, \"_data\", true, true);\n+      gfc_component *vptr = gfc_find_component (sym, \"_vptr\", true, true);\n       if (vptr->ts.u.derived == NULL)\n \t{\n \t  gfc_symbol *vtab = gfc_find_derived_vtab (data->ts.u.derived);"}, {"sha": "12330aef8b6f016dfb80ec4c8ef09a7da7b9cd5b", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -6317,7 +6317,7 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t      comp = fold_build3_loc (input_location, COMPONENT_REF, ctype,\n \t\t\t\t      decl, cdecl, NULL_TREE);\n \t      \n-\t      /* Add reference to '$data' component.  */\n+\t      /* Add reference to '_data' component.  */\n \t      tmp = CLASS_DATA (c)->backend_decl;\n \t      comp = fold_build3_loc (input_location, COMPONENT_REF,\n \t\t\t\t      TREE_TYPE (tmp), comp, tmp, NULL_TREE);\n@@ -6357,7 +6357,7 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t      /* Allocatable scalar CLASS components.  */\n \t      comp = fold_build3_loc (input_location, COMPONENT_REF, ctype,\n \t\t\t\t      decl, cdecl, NULL_TREE);\n-\t      /* Add reference to '$data' component.  */\n+\t      /* Add reference to '_data' component.  */\n \t      tmp = CLASS_DATA (c)->backend_decl;\n \t      comp = fold_build3_loc (input_location, COMPONENT_REF,\n \t\t\t\t      TREE_TYPE (tmp), comp, tmp, NULL_TREE);"}, {"sha": "3f068dee40d62eb17b51854fcdce3193adc6ba55", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -3393,7 +3393,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \n \t      e = gfc_lval_expr_from_sym (sym);\n \t      if (sym->ts.type == BT_CLASS)\n-\t\tgfc_add_component_ref (e, \"$data\");\n+\t\tgfc_add_data_component (e);\n \n \t      gfc_init_se (&se, NULL);\n \t      se.want_pointer = 1;"}, {"sha": "94dfa34d4fe57b378f9f541f8836605a94550541", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -2584,7 +2584,7 @@ gfc_conv_derived_to_class (gfc_se *parmse, gfc_expr *e,\n   var = gfc_create_var (tmp, \"class\");\n \n   /* Set the vptr.  */\n-  cmp = gfc_find_component (declared, \"$vptr\", true, true);\n+  cmp = gfc_find_component (declared, \"_vptr\", true, true);\n   ctree = fold_build3_loc (input_location, COMPONENT_REF,\n \t\t\t   TREE_TYPE (cmp->backend_decl),\n \t\t\t   var, cmp->backend_decl, NULL_TREE);\n@@ -2598,7 +2598,7 @@ gfc_conv_derived_to_class (gfc_se *parmse, gfc_expr *e,\n \t\t  fold_convert (TREE_TYPE (ctree), tmp));\n \n   /* Now set the data field.  */\n-  cmp = gfc_find_component (declared, \"$data\", true, true);\n+  cmp = gfc_find_component (declared, \"_data\", true, true);\n   ctree = fold_build3_loc (input_location, COMPONENT_REF,\n \t\t\t   TREE_TYPE (cmp->backend_decl),\n \t\t\t   var, cmp->backend_decl, NULL_TREE);\n@@ -4504,13 +4504,13 @@ gfc_conv_structure (gfc_se * se, gfc_expr * expr, int init)\n       if (!c->expr || cm->attr.allocatable)\n         continue;\n \n-      if (strcmp (cm->name, \"$size\") == 0)\n+      if (strcmp (cm->name, \"_size\") == 0)\n \t{\n \t  val = TYPE_SIZE_UNIT (gfc_get_derived_type (cm->ts.u.derived));\n \t  CONSTRUCTOR_APPEND_ELT (v, cm->backend_decl, val);\n \t}\n       else if (cm->initializer && cm->initializer->expr_type != EXPR_NULL\n-\t       && strcmp (cm->name, \"$extends\") == 0)\n+\t       && strcmp (cm->name, \"_extends\") == 0)\n \t{\n \t  tree vtab;\n \t  gfc_symbol *vtabs;\n@@ -5875,15 +5875,15 @@ gfc_trans_class_init_assign (gfc_code *code)\n   gfc_start_block (&block);\n \n   lhs = gfc_copy_expr (code->expr1);\n-  gfc_add_component_ref (lhs, \"$data\");\n+  gfc_add_data_component (lhs);\n \n   rhs = gfc_copy_expr (code->expr1);\n-  gfc_add_component_ref (rhs, \"$vptr\");\n-  gfc_add_component_ref (rhs, \"$def_init\");\n+  gfc_add_vptr_component (rhs);\n+  gfc_add_def_init_component (rhs);\n \n   sz = gfc_copy_expr (code->expr1);\n-  gfc_add_component_ref (sz, \"$vptr\");\n-  gfc_add_component_ref (sz, \"$size\");\n+  gfc_add_vptr_component (sz);\n+  gfc_add_size_component (sz);\n \n   gfc_init_se (&dst, NULL);\n   gfc_init_se (&src, NULL);\n@@ -5914,9 +5914,9 @@ gfc_trans_class_assign (gfc_expr *expr1, gfc_expr *expr2, gfc_exec_op op)\n \n   if (expr2->ts.type != BT_CLASS)\n     {\n-      /* Insert an additional assignment which sets the '$vptr' field.  */\n+      /* Insert an additional assignment which sets the '_vptr' field.  */\n       lhs = gfc_copy_expr (expr1);\n-      gfc_add_component_ref (lhs, \"$vptr\");\n+      gfc_add_vptr_component (lhs);\n       if (expr2->ts.type == BT_DERIVED)\n \t{\n \t  gfc_symbol *vtab;\n@@ -5945,7 +5945,7 @@ gfc_trans_class_assign (gfc_expr *expr1, gfc_expr *expr2, gfc_exec_op op)\n   if (expr2->ts.type == BT_CLASS)\n     op = EXEC_ASSIGN;\n   else\n-    gfc_add_component_ref (expr1, \"$data\");\n+    gfc_add_data_component (expr1);\n \n   if (op == EXEC_ASSIGN)\n     tmp = gfc_trans_assignment (expr1, expr2, false, true);"}, {"sha": "502a8153d5d39a272ac2223c239e00fdb51e1964", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -4547,7 +4547,7 @@ gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n   if (ss == gfc_ss_terminator)\n     {\n       if (arg->ts.type == BT_CLASS)\n-\tgfc_add_component_ref (arg, \"$data\");\n+\tgfc_add_data_component (arg);\n \n       gfc_conv_expr_reference (&argse, arg);\n \n@@ -4618,8 +4618,8 @@ gfc_conv_intrinsic_storage_size (gfc_se *se, gfc_expr *expr)\n     {\n       if (arg->ts.type == BT_CLASS)\n       {\n-\tgfc_add_component_ref (arg, \"$vptr\");\n-\tgfc_add_component_ref (arg, \"$size\");\n+\tgfc_add_vptr_component (arg);\n+\tgfc_add_size_component (arg);\n \tgfc_conv_expr (&argse, arg);\n \ttmp = fold_convert (result_type, argse.expr);\n \tgoto done;\n@@ -5070,7 +5070,7 @@ gfc_conv_allocated (gfc_se *se, gfc_expr *expr)\n       /* Allocatable scalar.  */\n       arg1se.want_pointer = 1;\n       if (arg1->expr->ts.type == BT_CLASS)\n-\tgfc_add_component_ref (arg1->expr, \"$data\");\n+\tgfc_add_data_component (arg1->expr);\n       gfc_conv_expr (&arg1se, arg1->expr);\n       tmp = arg1se.expr;\n     }\n@@ -5111,7 +5111,7 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n   gfc_init_se (&arg2se, NULL);\n   arg1 = expr->value.function.actual;\n   if (arg1->expr->ts.type == BT_CLASS)\n-    gfc_add_component_ref (arg1->expr, \"$data\");\n+    gfc_add_data_component (arg1->expr);\n   arg2 = arg1->next;\n   ss1 = gfc_walk_expr (arg1->expr);\n \n@@ -5141,7 +5141,7 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n     {\n       /* An optional target.  */\n       if (arg2->expr->ts.type == BT_CLASS)\n-\tgfc_add_component_ref (arg2->expr, \"$data\");\n+\tgfc_add_data_component (arg2->expr);\n       ss2 = gfc_walk_expr (arg2->expr);\n \n       nonzero_charlen = NULL_TREE;\n@@ -5228,17 +5228,17 @@ gfc_conv_same_type_as (gfc_se *se, gfc_expr *expr)\n \n   if (a->ts.type == BT_CLASS)\n     {\n-      gfc_add_component_ref (a, \"$vptr\");\n-      gfc_add_component_ref (a, \"$hash\");\n+      gfc_add_vptr_component (a);\n+      gfc_add_hash_component (a);\n     }\n   else if (a->ts.type == BT_DERIVED)\n     a = gfc_get_int_expr (gfc_default_integer_kind, NULL,\n \t\t\t  a->ts.u.derived->hash_value);\n \n   if (b->ts.type == BT_CLASS)\n     {\n-      gfc_add_component_ref (b, \"$vptr\");\n-      gfc_add_component_ref (b, \"$hash\");\n+      gfc_add_vptr_component (b);\n+      gfc_add_hash_component (b);\n     }\n   else if (b->ts.type == BT_DERIVED)\n     b = gfc_get_int_expr (gfc_default_integer_kind, NULL,"}, {"sha": "1fd42547c6972f72adf0acbcab3af36f6bade47a", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -4388,7 +4388,7 @@ gfc_trans_allocate (gfc_code * code)\n       expr = gfc_copy_expr (al->expr);\n \n       if (expr->ts.type == BT_CLASS)\n-\tgfc_add_component_ref (expr, \"$data\");\n+\tgfc_add_data_component (expr);\n \n       gfc_init_se (&se, NULL);\n       gfc_start_block (&se.pre);\n@@ -4409,8 +4409,8 @@ gfc_trans_allocate (gfc_code * code)\n \t\t  gfc_expr *sz;\n \t\t  gfc_se se_sz;\n \t\t  sz = gfc_copy_expr (code->expr3);\n-\t\t  gfc_add_component_ref (sz, \"$vptr\");\n-\t\t  gfc_add_component_ref (sz, \"$size\");\n+\t\t  gfc_add_vptr_component (sz);\n+\t\t  gfc_add_size_component (sz);\n \t\t  gfc_init_se (&se_sz, NULL);\n \t\t  gfc_conv_expr (&se_sz, sz);\n \t\t  gfc_free_expr (sz);\n@@ -4497,18 +4497,18 @@ gfc_trans_allocate (gfc_code * code)\n \t      actual = gfc_get_actual_arglist ();\n \t      actual->expr = gfc_copy_expr (rhs);\n \t      if (rhs->ts.type == BT_CLASS)\n-\t\tgfc_add_component_ref (actual->expr, \"$data\");\n+\t\tgfc_add_data_component (actual->expr);\n \t      actual->next = gfc_get_actual_arglist ();\n \t      actual->next->expr = gfc_copy_expr (al->expr);\n-\t      gfc_add_component_ref (actual->next->expr, \"$data\");\n+\t      gfc_add_data_component (actual->next->expr);\n \t      if (rhs->ts.type == BT_CLASS)\n \t\t{\n \t\t  ppc = gfc_copy_expr (rhs);\n-\t\t  gfc_add_component_ref (ppc, \"$vptr\");\n+\t\t  gfc_add_vptr_component (ppc);\n \t\t}\n \t      else\n \t\tppc = gfc_lval_expr_from_sym (gfc_find_derived_vtab (rhs->ts.u.derived));\n-\t      gfc_add_component_ref (ppc, \"$copy\");\n+\t      gfc_add_component_ref (ppc, \"_copy\");\n \t      gfc_conv_procedure_call (&call, ppc->symtree->n.sym, actual,\n \t\t\t\t\tppc, NULL);\n \t      gfc_add_expr_to_block (&call.pre, call.expr);\n@@ -4527,8 +4527,8 @@ gfc_trans_allocate (gfc_code * code)\n \t  /* Default-initialization via MOLD (polymorphic).  */\n \t  gfc_expr *rhs = gfc_copy_expr (code->expr3);\n \t  gfc_se dst,src;\n-\t  gfc_add_component_ref (rhs, \"$vptr\");\n-\t  gfc_add_component_ref (rhs, \"$def_init\");\n+\t  gfc_add_vptr_component (rhs);\n+\t  gfc_add_def_init_component (rhs);\n \t  gfc_init_se (&dst, NULL);\n \t  gfc_init_se (&src, NULL);\n \t  gfc_conv_expr (&dst, expr);\n@@ -4549,13 +4549,13 @@ gfc_trans_allocate (gfc_code * code)\n \n \t  /* Initialize VPTR for CLASS objects.  */\n \t  lhs = gfc_expr_to_initialize (expr);\n-\t  gfc_add_component_ref (lhs, \"$vptr\");\n+\t  gfc_add_vptr_component (lhs);\n \t  rhs = NULL;\n \t  if (code->expr3 && code->expr3->ts.type == BT_CLASS)\n \t    {\n \t      /* Polymorphic SOURCE: VPTR must be determined at run time.  */\n \t      rhs = gfc_copy_expr (code->expr3);\n-\t      gfc_add_component_ref (rhs, \"$vptr\");\n+\t      gfc_add_vptr_component (rhs);\n \t      tmp = gfc_trans_pointer_assignment (lhs, rhs);\n \t      gfc_add_expr_to_block (&block, tmp);\n \t      gfc_free_expr (rhs);"}, {"sha": "f8c121efefe74cbfd8832cc0e70d99dd4fe6f48f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -1,3 +1,8 @@\n+2010-11-09  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/46313\n+\t* gfortran.dg/class_29.f03: New.\n+\n 2010-11-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/46221"}, {"sha": "d5ed8fae35c78f206feb1d8f95ce70ac860cb302", "filename": "gcc/testsuite/gfortran.dg/class_29.f03", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_29.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04533af33ccf91e2874b24dd3e678d195c83587/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_29.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_29.f03?ref=b04533af33ccf91e2874b24dd3e678d195c83587", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do compile }\n+!\n+! PR 46313: [OOP] OOP-ABI issue, ALLOCATE issue, CLASS renaming issue\n+!\n+! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n+\n+module m1\n+  type mytype\n+    real :: a(10) = 2\n+  end type\n+end module m1\n+\n+module m2\n+  type mytype\n+    real :: b(10) = 8\n+  end type\n+end module m2\n+\n+program p\n+use m1, t1 => mytype\n+use m2, t2 => mytype\n+implicit none\n+\n+class(t1), allocatable :: x\n+class(t2), allocatable :: y\n+\n+allocate (t1 :: x)\n+allocate (t2 :: y)\n+\n+print *, x%a\n+print *, y%b\n+end\n+\n+! { dg-final { cleanup-modules \"m1 m2\" } }"}]}