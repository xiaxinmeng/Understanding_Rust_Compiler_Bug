{"sha": "8b051d2e6c9a816aff781802b311dbdb77ac7be0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIwNTFkMmU2YzlhODE2YWZmNzgxODAyYjMxMWRiZGI3N2FjN2JlMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-06-16T16:01:54Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-06-16T16:01:54Z"}, "message": "Add 'Fortran' to display text of all PRED_FORTRAN_*\n\n\t* predict.def: Add 'Fortran' to display text of all\n\tPRED_FORTRAN_* predictors.\n\nFrom-SVN: r237532", "tree": {"sha": "0d1ee1da2d93090bbcdab1eedab7ff9f6a943190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d1ee1da2d93090bbcdab1eedab7ff9f6a943190"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b051d2e6c9a816aff781802b311dbdb77ac7be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b051d2e6c9a816aff781802b311dbdb77ac7be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b051d2e6c9a816aff781802b311dbdb77ac7be0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b051d2e6c9a816aff781802b311dbdb77ac7be0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6b9539e2aa811e84847db2deb1adfc288c7157b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b9539e2aa811e84847db2deb1adfc288c7157b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b9539e2aa811e84847db2deb1adfc288c7157b7"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "52fa67470437ce48442242b32b98ac2837998478", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b051d2e6c9a816aff781802b311dbdb77ac7be0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b051d2e6c9a816aff781802b311dbdb77ac7be0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b051d2e6c9a816aff781802b311dbdb77ac7be0", "patch": "@@ -1,3 +1,8 @@\n+2016-06-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* predict.def: Add 'Fortran' to display text of all\n+\tPRED_FORTRAN_* predictors.\n+\n 2016-06-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/71242"}, {"sha": "3e3a43a1079ac36b1b1156cd8c82e31017275e5d", "filename": "gcc/predict.def", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b051d2e6c9a816aff781802b311dbdb77ac7be0/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b051d2e6c9a816aff781802b311dbdb77ac7be0/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=8b051d2e6c9a816aff781802b311dbdb77ac7be0", "patch": "@@ -159,40 +159,43 @@ DEF_PREDICTOR (PRED_COLD_LABEL, \"cold label\", PROB_VERY_LIKELY,\n /* The following predictors are used in Fortran. */\n \n /* Branch leading to an integer overflow are extremely unlikely.  */\n-DEF_PREDICTOR (PRED_FORTRAN_OVERFLOW, \"overflow\", PROB_ALWAYS,\n+DEF_PREDICTOR (PRED_FORTRAN_OVERFLOW, \"Fortran overflow\", PROB_ALWAYS,\n \t       PRED_FLAG_FIRST_MATCH)\n \n /* Branch leading to a failure status are unlikely.  This can occur for out\n    of memory.  This predictor only occurs when the user explicitly asked\n    for a return status.  By default, the code aborts,\n    which is handled via PRED_NORETURN.  */\n-DEF_PREDICTOR (PRED_FORTRAN_FAIL_ALLOC, \"fail alloc\", PROB_VERY_LIKELY, 0)\n+DEF_PREDICTOR (PRED_FORTRAN_FAIL_ALLOC, \"Fortran fail alloc\", PROB_VERY_LIKELY, 0)\n \n /* Predictor is used for an allocation of an already allocated memory or\n    deallocating an already deallocated allocatable.  */\n-DEF_PREDICTOR (PRED_FORTRAN_REALLOC, \"repeated allocation/deallocation\", \\\n-\t       PROB_LIKELY, 0)\n+DEF_PREDICTOR (PRED_FORTRAN_REALLOC, \\\n+\t       \"Fortran repeated allocation/deallocation\", PROB_LIKELY, 0)\n \n /* Branch leading to an I/O failure status are unlikely.  This predictor is\n    used for I/O failures such as for invalid unit numbers.  This predictor\n    only occurs when the user explicitly asked for a return status.  By default,\n    the code aborts, which is handled via PRED_NORETURN.  */\n-DEF_PREDICTOR (PRED_FORTRAN_FAIL_IO, \"fail IO\", HITRATE (85), 0)\n+DEF_PREDICTOR (PRED_FORTRAN_FAIL_IO, \"Fortran fail IO\", HITRATE (85), 0)\n \n /* Branch leading to a run-time warning message which is printed only once\n    are unlikely.  The print-warning branch itself can be likely or unlikely.  */\n-DEF_PREDICTOR (PRED_FORTRAN_WARN_ONCE, \"warn once\", HITRATE (75), 0)\n+DEF_PREDICTOR (PRED_FORTRAN_WARN_ONCE, \"Fortran warn once\", HITRATE (75), 0)\n \n /* Branch belonging to a zero-sized array.  */\n-DEF_PREDICTOR (PRED_FORTRAN_SIZE_ZERO, \"zero-sized array\", HITRATE(99), 0)\n+DEF_PREDICTOR (PRED_FORTRAN_SIZE_ZERO, \"Fortran zero-sized array\", \\\n+\t       HITRATE (99), 0)\n \n /* Branch belonging to an invalid bound index, in a context where it is\n    standard conform and well defined but rather pointless and, hence, rather\n    unlikely to occur.  */\n-DEF_PREDICTOR (PRED_FORTRAN_INVALID_BOUND, \"zero-sized array\", HITRATE(90), 0)\n+DEF_PREDICTOR (PRED_FORTRAN_INVALID_BOUND, \"Fortran invalid bound\", \\\n+\t       HITRATE (90), 0)\n \n /* Branch belonging to the handling of absent optional arguments.  This\n    predictor is used when an optional dummy argument, associated with an\n    absent argument, is passed on as actual argument to another procedure,\n    which in turn has an optional argument.  */\n-DEF_PREDICTOR (PRED_FORTRAN_ABSENT_DUMMY, \"absent dummy\", HITRATE(60), 0)\n+DEF_PREDICTOR (PRED_FORTRAN_ABSENT_DUMMY, \"Fortran absent dummy\", \\\n+\t       HITRATE (60), 0)"}]}