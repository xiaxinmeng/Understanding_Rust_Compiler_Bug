{"sha": "e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVlNDU5YmYzYjlkNWZmNGE0Y2IzYWUyNjI2ODA5MGVkMTgwYWU0ZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2005-02-15T19:39:31Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2005-02-15T19:39:31Z"}, "message": "re PR c++/17788 (poor diagnostic for missing reference initializer)\n\ngcc/cp/ChangeLog:\nPR c++/17788\n* class.c (add_implicitly_declared_members, check_field_decl)\n(check_field_decls, check_bases): Remove arguments, tests and\nassignments of cant_have_default_ctor-related variables.\ngcc/testsuite/ChangeLog:\nPR c++/17788\n* g++.dg/init/ctor4.C: New.\n* g++.old-deja/g++.bugs/900205_04.C: Adjust.\n\nFrom-SVN: r95071", "tree": {"sha": "4bdc26358fdc926dcccf0781aa23884bfcb38b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bdc26358fdc926dcccf0781aa23884bfcb38b20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e/comments", "author": null, "committer": null, "parents": [{"sha": "39a87435bc42d0802f82b60bf657b3aa5ecbea86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39a87435bc42d0802f82b60bf657b3aa5ecbea86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39a87435bc42d0802f82b60bf657b3aa5ecbea86"}], "stats": {"total": 112, "additions": 57, "deletions": 55}, "files": [{"sha": "91cbb9039dd87fa65c670ed46f0773303a647d84", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e", "patch": "@@ -1,3 +1,10 @@\n+2005-02-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR c++/17788\n+\t* class.c (add_implicitly_declared_members, check_field_decl)\n+\t(check_field_decls, check_bases): Remove arguments, tests and\n+\tassignments of cant_have_default_ctor-related variables.\n+\n 2005-02-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* decl2.c (mark_used): Set the source location of the used decl to"}, {"sha": "ae73f5221211fd0652823aebf7eaf79e98991150", "filename": "gcc/cp/class.c", "status": "modified", "additions": 16, "deletions": 51, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e", "patch": "@@ -123,7 +123,7 @@ static void finish_struct_methods (tree);\n static void maybe_warn_about_overly_private_class (tree);\n static int method_name_cmp (const void *, const void *);\n static int resort_method_name_cmp (const void *, const void *);\n-static void add_implicitly_declared_members (tree, int, int, int);\n+static void add_implicitly_declared_members (tree, int, int);\n static tree fixed_type_or_null (tree, int *, int *);\n static tree resolve_address_of_overloaded_function (tree, tree, tsubst_flags_t,\n \t\t\t\t\t\t    bool, tree);\n@@ -133,13 +133,13 @@ static tree build_vtbl_initializer (tree, tree, tree, tree, int *);\n static int count_fields (tree);\n static int add_fields_to_record_type (tree, struct sorted_fields_type*, int);\n static void check_bitfield_decl (tree);\n-static void check_field_decl (tree, tree, int *, int *, int *, int *);\n-static void check_field_decls (tree, tree *, int *, int *, int *);\n+static void check_field_decl (tree, tree, int *, int *, int *);\n+static void check_field_decls (tree, tree *, int *, int *);\n static tree *build_base_field (record_layout_info, tree, splay_tree, tree *);\n static void build_base_fields (record_layout_info, splay_tree, tree *);\n static void check_methods (tree);\n static void remove_zero_width_bit_fields (tree);\n-static void check_bases (tree, int *, int *, int *);\n+static void check_bases (tree, int *, int *);\n static void check_bases_and_members (tree);\n static tree create_vtable_ptr (tree, tree *);\n static void include_empty_classes (record_layout_info);\n@@ -1207,14 +1207,12 @@ handle_using_decl (tree using_decl, tree t)\n     alter_access (t, fdecl, access);\n }\n \f\n-/* Run through the base classes of T, updating\n-   CANT_HAVE_DEFAULT_CTOR_P, CANT_HAVE_CONST_CTOR_P, and\n-   NO_CONST_ASN_REF_P.  Also set flag bits in T based on properties of\n-   the bases.  */\n+/* Run through the base classes of T, updating CANT_HAVE_CONST_CTOR_P,\n+   and NO_CONST_ASN_REF_P.  Also set flag bits in T based on\n+   properties of the bases.  */\n \n static void\n check_bases (tree t,\n-             int* cant_have_default_ctor_p,\n              int* cant_have_const_ctor_p,\n              int* no_const_asn_ref_p)\n {\n@@ -1247,18 +1245,6 @@ check_bases (tree t,\n       if (TYPE_HAS_ASSIGN_REF (basetype)\n \t  && !TYPE_HAS_CONST_ASSIGN_REF (basetype))\n \t*no_const_asn_ref_p = 1;\n-      /* Similarly, if the base class doesn't have a default\n-\t constructor, then the derived class won't have an\n-\t automatically generated default constructor.  */\n-      if (TYPE_HAS_CONSTRUCTOR (basetype)\n-\t  && ! TYPE_HAS_DEFAULT_CONSTRUCTOR (basetype))\n-\t{\n-\t  *cant_have_default_ctor_p = 1;\n-\t  if (! TYPE_HAS_CONSTRUCTOR (t))\n-            pedwarn (\"base %qT with only non-default constructor in class \"\n-                     \"without a constructor\",\n-                     basetype);\n-\t}\n \n       if (BINFO_VIRTUAL_P (base_binfo))\n \t/* A virtual base does not effect nearly emptiness.  */\n@@ -2503,16 +2489,14 @@ maybe_add_class_template_decl_list (tree type, tree t, int friend_p)\n }\n \n /* Create default constructors, assignment operators, and so forth for\n-   the type indicated by T, if they are needed.\n-   CANT_HAVE_DEFAULT_CTOR, CANT_HAVE_CONST_CTOR, and\n-   CANT_HAVE_CONST_ASSIGNMENT are nonzero if, for whatever reason, the\n-   class cannot have a default constructor, copy constructor taking a\n-   const reference argument, or an assignment operator taking a const\n-   reference, respectively.  */\n+   the type indicated by T, if they are needed.  CANT_HAVE_CONST_CTOR,\n+   and CANT_HAVE_CONST_ASSIGNMENT are nonzero if, for whatever reason,\n+   the class cannot have a default constructor, copy constructor\n+   taking a const reference argument, or an assignment operator taking\n+   a const reference, respectively.  */\n \n static void\n add_implicitly_declared_members (tree t, \n-                                 int cant_have_default_ctor,\n \t\t\t\t int cant_have_const_cctor,\n \t\t\t\t int cant_have_const_assignment)\n {\n@@ -2565,7 +2549,7 @@ add_implicitly_declared_members (tree t,\n     }\n \n   /* Default constructor.  */\n-  if (! TYPE_HAS_CONSTRUCTOR (t) && ! cant_have_default_ctor)\n+  if (! TYPE_HAS_CONSTRUCTOR (t))\n     {\n       TYPE_HAS_DEFAULT_CONSTRUCTOR (t) = 1;\n       CLASSTYPE_LAZY_DEFAULT_CTOR (t) = 1;\n@@ -2713,7 +2697,6 @@ static void\n check_field_decl (tree field,\n                   tree t,\n                   int* cant_have_const_ctor,\n-\t\t  int* cant_have_default_ctor,\n                   int* no_const_asn_ref,\n \t\t  int* any_default_members)\n {\n@@ -2732,8 +2715,7 @@ check_field_decl (tree field,\n       for (fields = TYPE_FIELDS (type); fields; fields = TREE_CHAIN (fields))\n \tif (TREE_CODE (fields) == FIELD_DECL && !DECL_C_BIT_FIELD (field))\n \t  check_field_decl (fields, t, cant_have_const_ctor,\n-\t\t\t    cant_have_default_ctor, no_const_asn_ref,\n-\t\t\t    any_default_members);\n+\t\t\t    no_const_asn_ref, any_default_members);\n     }\n   /* Check members with class type for constructors, destructors,\n      etc.  */\n@@ -2769,10 +2751,6 @@ check_field_decl (tree field,\n \n       if (!TYPE_HAS_CONST_ASSIGN_REF (type))\n \t*no_const_asn_ref = 1;\n-\n-      if (TYPE_HAS_CONSTRUCTOR (type)\n-\t  && ! TYPE_HAS_DEFAULT_CONSTRUCTOR (type))\n-\t*cant_have_default_ctor = 1;\n     }\n   if (DECL_INITIAL (field) != NULL_TREE)\n     {\n@@ -2795,10 +2773,6 @@ check_field_decl (tree field,\n      EMPTY_P\n        The class is empty, i.e., contains no non-static data members.\n \n-     CANT_HAVE_DEFAULT_CTOR_P\n-       This class cannot have an implicitly generated default\n-       constructor.\n-\n      CANT_HAVE_CONST_CTOR_P\n        This class cannot have an implicitly generated copy constructor\n        taking a const reference.\n@@ -2815,7 +2789,6 @@ check_field_decl (tree field,\n \n static void\n check_field_decls (tree t, tree *access_decls,\n-\t\t   int *cant_have_default_ctor_p, \n \t\t   int *cant_have_const_ctor_p,\n \t\t   int *no_const_asn_ref_p)\n {\n@@ -2959,7 +2932,6 @@ check_field_decls (tree t, tree *access_decls,\n \t     aggregate, initialization by a brace-enclosed list) is the\n \t     only way to initialize nonstatic const and reference\n \t     members.  */\n-\t  *cant_have_default_ctor_p = 1;\n \t  TYPE_HAS_COMPLEX_ASSIGN_REF (t) = 1;\n \n \t  if (! TYPE_HAS_CONSTRUCTOR (t) && CLASSTYPE_NON_AGGREGATE (t)\n@@ -3007,7 +2979,6 @@ check_field_decls (tree t, tree *access_decls,\n \t     aggregate, initialization by a brace-enclosed list) is the\n \t     only way to initialize nonstatic const and reference\n \t     members.  */\n-\t  *cant_have_default_ctor_p = 1;\n \t  TYPE_HAS_COMPLEX_ASSIGN_REF (t) = 1;\n \n \t  if (! TYPE_HAS_CONSTRUCTOR (t) && CLASSTYPE_NON_AGGREGATE (t)\n@@ -3036,7 +3007,6 @@ check_field_decls (tree t, tree *access_decls,\n       else\n \tcheck_field_decl (x, t,\n \t\t\t  cant_have_const_ctor_p,\n-\t\t\t  cant_have_default_ctor_p, \n \t\t\t  no_const_asn_ref_p,\n \t\t\t  &any_default_members);\n     }\n@@ -4062,9 +4032,6 @@ type_requires_array_cookie (tree type)\n static void\n check_bases_and_members (tree t)\n {\n-  /* Nonzero if we are not allowed to generate a default constructor\n-     for this case.  */\n-  int cant_have_default_ctor;\n   /* Nonzero if the implicitly generated copy constructor should take\n      a non-const reference argument.  */\n   int cant_have_const_ctor;\n@@ -4075,12 +4042,11 @@ check_bases_and_members (tree t)\n \n   /* By default, we use const reference arguments and generate default\n      constructors.  */\n-  cant_have_default_ctor = 0;\n   cant_have_const_ctor = 0;\n   no_const_asn_ref = 0;\n \n   /* Check all the base-classes.  */\n-  check_bases (t, &cant_have_default_ctor, &cant_have_const_ctor,\n+  check_bases (t, &cant_have_const_ctor,\n \t       &no_const_asn_ref);\n \n   /* Check all the method declarations.  */\n@@ -4091,7 +4057,6 @@ check_bases_and_members (tree t)\n      as check_field_decls depends on TYPE_HAS_NONTRIVIAL_DESTRUCTOR\n      being set appropriately.  */\n   check_field_decls (t, &access_decls,\n-\t\t     &cant_have_default_ctor,\n \t\t     &cant_have_const_ctor,\n \t\t     &no_const_asn_ref);\n \n@@ -4116,7 +4081,7 @@ check_bases_and_members (tree t)\n     |= TYPE_HAS_ASSIGN_REF (t) || TYPE_CONTAINS_VPTR_P (t);\n \n   /* Synthesize any needed methods.  */\n-  add_implicitly_declared_members (t, cant_have_default_ctor,\n+  add_implicitly_declared_members (t,\n \t\t\t\t   cant_have_const_ctor,\n \t\t\t\t   no_const_asn_ref);\n "}, {"sha": "1a66c5eddfb71066c8dee21667f8b8ff18591c93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e", "patch": "@@ -1,3 +1,9 @@\n+2005-02-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR c++/17788\n+\t* g++.dg/init/ctor4.C: New.\n+\t* g++.old-deja/g++.bugs/900205_04.C: Adjust.\n+\n 2005-02-15  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/overflow-warn-1.c, gcc.dg/overflow-warn-2.c,"}, {"sha": "b217b20400011600b856817bb3a00738f9f7fdfd", "filename": "gcc/testsuite/g++.dg/init/ctor4.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fctor4.C?ref=e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/17788\n+// { dg-do compile }\n+\n+class foo {\n+public:\n+  foo();\n+};\n+\n+class bar: public foo {\n+private:\n+  int &a;\n+};\n+\n+foo::foo() {\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  bar x; // { dg-error \"uninitialized\" }\n+}"}, {"sha": "a2c84fadb9e100e0c96653ba738b29e6b701fb98", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900205_04.C", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_04.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_04.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900205_04.C?ref=e5e459bf3b9d5ff4a4cb3ae26268090ed180ae4e", "patch": "@@ -9,19 +9,23 @@\n \n // keywords: default constructor, inheritance\n \n-struct struct0 {\n+// In ISO C++ 1998, such a derived class is not ill-formed, but if the\n+// implicitly-declared constructor is used, then it is implicitly\n+// defined and found to be ill-formed.\n+\n+struct struct0 { // { dg-error \"note\" }\n   int data_member;\n \n   struct0 (int, void *);\t// suppresses implicit default constructor\n };\n \n-struct0::struct0 (int, void *)\n+struct0::struct0 (int, void *) // { dg-error \"note\" }\n {\n }\n \n-struct struct0_derived_struct_0 : public struct0 { // { dg-error \"\" } \n+struct struct0_derived_struct_0 : public struct0 { // { dg-error \"\" }\n };\n \n-// struct0_derived_struct_0 object;\t// would give g++ error if compiled\n+struct0_derived_struct_0 object;\n \n int main () { return 0; }"}]}