{"sha": "5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMzODZhOTVlZTIwYjliYjhmNzA1ZWQxZjgzOTRjYTdiNGJhZmE3ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2006-11-24T21:28:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2006-11-24T21:28:38Z"}, "message": "re PR c/29955 (ICE with -fopenmp -fexceptions)\n\n\tPR c/29955\n\t* c-tree.h (c_maybe_initialize_eh): New prototype.\n\t* c-decl.c (finish_decl): Move EH initialization...\n\t(c_maybe_initialize_eh): ... here.  New function.\n\t* c-parser.c (c_parser_omp_construct): Call c_maybe_initialize_eh\n\tif not #pragma omp atomic.\n\n\t* gcc.dg/gomp/pr29955.c: New test.\n\nFrom-SVN: r119168", "tree": {"sha": "36c8035a96cc911760ed8fd295e9fcba32d8a983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36c8035a96cc911760ed8fd295e9fcba32d8a983"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "238564598bce2cc56d65382076806f3ca73af4de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238564598bce2cc56d65382076806f3ca73af4de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/238564598bce2cc56d65382076806f3ca73af4de"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "24ee5793d7a0dd15e85509dad8e124dd330bb900", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d", "patch": "@@ -1,5 +1,12 @@\n 2006-11-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/29955\n+\t* c-tree.h (c_maybe_initialize_eh): New prototype.\n+\t* c-decl.c (finish_decl): Move EH initialization...\n+\t(c_maybe_initialize_eh): ... here.  New function.\n+\t* c-parser.c (c_parser_omp_construct): Call c_maybe_initialize_eh\n+\tif not #pragma omp atomic.\n+\n \tPR c/29736\n \t* c-common.c (handle_vector_size_attribute): Disallow VECTOR_TYPE\n \tor UNION_TYPE inner types."}, {"sha": "fa1c3406d95338b37d7a571644663b137c012f16", "filename": "gcc/c-decl.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d", "patch": "@@ -3385,6 +3385,23 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n   return tem;\n }\n \n+/* Initialize EH if not initialized yet and exceptions are enabled.  */\n+\n+void\n+c_maybe_initialize_eh (void)\n+{\n+  if (!flag_exceptions || c_eh_initialized_p)\n+    return;\n+\n+  c_eh_initialized_p = true;\n+  eh_personality_libfunc\n+    = init_one_libfunc (USING_SJLJ_EXCEPTIONS\n+\t\t\t? \"__gcc_personality_sj0\"\n+\t\t\t: \"__gcc_personality_v0\");\n+  default_init_unwind_resume_libfunc ();\n+  using_eh_for_cleanups ();\n+}\n+\n /* Finish processing of a declaration;\n    install its initial value.\n    If the length of an array type is not known before,\n@@ -3676,16 +3693,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n \t  TREE_USED (cleanup_decl) = 1;\n \n \t  /* Initialize EH, if we've been told to do so.  */\n-\t  if (flag_exceptions && !c_eh_initialized_p)\n-\t    {\n-\t      c_eh_initialized_p = true;\n-\t      eh_personality_libfunc\n-\t\t= init_one_libfunc (USING_SJLJ_EXCEPTIONS\n-\t\t\t\t    ? \"__gcc_personality_sj0\"\n-\t\t\t\t    : \"__gcc_personality_v0\");\n-\t      default_init_unwind_resume_libfunc ();\n-\t      using_eh_for_cleanups ();\n-\t    }\n+\t  c_maybe_initialize_eh ();\n \n \t  push_cleanup (decl, cleanup, false);\n \t}"}, {"sha": "c6be63918f668ba9f82d42afd83056b1d3e4bbaf", "filename": "gcc/c-parser.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d", "patch": "@@ -7755,6 +7755,12 @@ c_parser_omp_construct (c_parser *parser)\n   p_kind = c_parser_peek_token (parser)->pragma_kind;\n   c_parser_consume_pragma (parser);\n \n+  /* For all constructs below except #pragma omp atomic\n+     MUST_NOT_THROW catch handlers are needed when exceptions\n+     are enabled.  */\n+  if (p_kind != PRAGMA_OMP_ATOMIC)\n+    c_maybe_initialize_eh ();\n+\n   switch (p_kind)\n     {\n     case PRAGMA_OMP_ATOMIC:"}, {"sha": "87af5cbae9ddc1530851da8c9d48de78de0cc7f1", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d", "patch": "@@ -456,6 +456,7 @@ extern void declare_parm_level (void);\n extern void undeclared_variable (tree, location_t);\n extern tree declare_label (tree);\n extern tree define_label (location_t, tree);\n+extern void c_maybe_initialize_eh (void);\n extern void finish_decl (tree, tree, tree);\n extern tree finish_enum (tree, tree, tree);\n extern void finish_function (void);"}, {"sha": "937291468e7fd10b8b9913c59183d151e6c23af9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d", "patch": "@@ -1,5 +1,8 @@\n 2006-11-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/29955\n+\t* gcc.dg/gomp/pr29955.c: New test.\n+\n \tPR c/29736\n \t* gcc.dg/pr29736.c: New test.\n "}, {"sha": "e49c11cae1dd4993f4faf7a14f5962a59aa8e95d", "filename": "gcc/testsuite/gcc.dg/gomp/pr29955.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr29955.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr29955.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fpr29955.c?ref=5c386a95ee20b9bb8f705ed1f8394ca7b4bafa7d", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/29955 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fopenmp -fexceptions\" } */\n+\n+extern void bar (int);\n+\n+void\n+foo (int n)\n+{\n+  int i;\n+#pragma omp parallel for schedule(dynamic)\n+  for (i = 0; i < n; i++)\n+    bar (0);\n+}"}]}