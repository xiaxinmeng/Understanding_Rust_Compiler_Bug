{"sha": "1729c265058cc349c8298bebc01b684a012bc8f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcyOWMyNjUwNThjYzM0OWM4Mjk4YmViYzAxYjY4NGEwMTJiYzhmNg==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2000-03-07T22:09:56Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2000-03-07T22:09:56Z"}, "message": "re GNATS gcj/108 (Compiler doesn't check access modifiers on interface implementations)\n\n2000-03-07  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n\t* java-tree.h (IS_INIT_CHECKED): New flag.\n\t* check-init.c (check_init): Test and set IS_INIT_CHECKED.\n\t* parse.y (patch_string): Call force_evaluation_order on the\n\tcompleted string concatenation tree.\n\t* expr.c (force_evaluation_order): Call force_evaluation_order on\n        function's arguments too.\n\n(This fixes the Java PR #108:\n http://sourceware.cygnus.com/ml/java-prs/1999-q4/msg00174.html)\n\nFrom-SVN: r32391", "tree": {"sha": "33e903d1ca8568421d6e5d2dd63b96b066a8e70f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33e903d1ca8568421d6e5d2dd63b96b066a8e70f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1729c265058cc349c8298bebc01b684a012bc8f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1729c265058cc349c8298bebc01b684a012bc8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1729c265058cc349c8298bebc01b684a012bc8f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1729c265058cc349c8298bebc01b684a012bc8f6/comments", "author": null, "committer": null, "parents": [{"sha": "b0699daddf1eead3861e67808ac915f21f82dcf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0699daddf1eead3861e67808ac915f21f82dcf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0699daddf1eead3861e67808ac915f21f82dcf3"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "a125f421baae599b589baf4b00e61e18c82cc4cc", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1729c265058cc349c8298bebc01b684a012bc8f6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1729c265058cc349c8298bebc01b684a012bc8f6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=1729c265058cc349c8298bebc01b684a012bc8f6", "patch": "@@ -1,3 +1,12 @@\n+2000-03-07  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* java-tree.h (IS_INIT_CHECKED): New flag.\n+\t* check-init.c (check_init): Test and set IS_INIT_CHECKED.\n+\t* parse.y (patch_string): Call force_evaluation_order on the\n+\tcompleted string concatenation tree.\n+\t* expr.c (force_evaluation_order): Call force_evaluation_order on\n+        function's arguments too.\n+\n Mon Mar  6 18:07:07 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* decl.c (emit_init_test_initialization): Mark KEY as unused."}, {"sha": "36a0f196afae8640aa68178b03c86dddce5b457f", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1729c265058cc349c8298bebc01b684a012bc8f6/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1729c265058cc349c8298bebc01b684a012bc8f6/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=1729c265058cc349c8298bebc01b684a012bc8f6", "patch": "@@ -611,7 +611,6 @@ check_init (exp, before)\n     case FIX_TRUNC_EXPR:\n     case INDIRECT_REF:\n     case ADDR_EXPR:\n-    case SAVE_EXPR:\n     case PREDECREMENT_EXPR:\n     case PREINCREMENT_EXPR:\n     case POSTDECREMENT_EXPR:\n@@ -622,6 +621,13 @@ check_init (exp, before)\n       exp = TREE_OPERAND (exp, 0);\n       goto again;\n \n+    case SAVE_EXPR:\n+      if (IS_INIT_CHECKED (exp))\n+\treturn;\n+      IS_INIT_CHECKED (exp) = 1;\n+      exp = TREE_OPERAND (exp, 0);\n+      goto again;\n+\n     case COMPOUND_EXPR:\n     case PLUS_EXPR:\n     case MINUS_EXPR:"}, {"sha": "2d569bfb34b4f49094e31eb7f05a8ba771c7f68b", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1729c265058cc349c8298bebc01b684a012bc8f6/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1729c265058cc349c8298bebc01b684a012bc8f6/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=1729c265058cc349c8298bebc01b684a012bc8f6", "patch": "@@ -2749,7 +2749,7 @@ force_evaluation_order (node)\n       for (cmp = NULL_TREE, arg = TREE_OPERAND (node, 1); \n \t   arg; arg = TREE_CHAIN (arg))\n \t{\n-\t  tree saved = save_expr (TREE_VALUE (arg));\n+\t  tree saved = save_expr (force_evaluation_order (TREE_VALUE (arg)));\n \t  cmp = (cmp == NULL_TREE ? saved :\n \t\t build (COMPOUND_EXPR, void_type_node, cmp, saved));\n \t  TREE_VALUE (arg) = saved;"}, {"sha": "950efd464d9eaa11d3e692592e4ed59083afb38f", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1729c265058cc349c8298bebc01b684a012bc8f6/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1729c265058cc349c8298bebc01b684a012bc8f6/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=1729c265058cc349c8298bebc01b684a012bc8f6", "patch": "@@ -58,6 +58,7 @@ struct JCF;\n    5: HAS_BEEN_ALREADY_PARSED_P (in IDENTIFIER_NODE)\n       IS_BREAK_STMT_P (in EXPR_WITH_FILE_LOCATION)\n       IS_CRAFTED_STRING_BUFFER_P (in CALL_EXPR)\n+      IS_INIT_CHECKED (in SAVE_EXPR)\n    6: CAN_COMPLETE_NORMALLY (in statement nodes).\n \n    Usage of TYPE_LANG_FLAG_?:\n@@ -869,6 +870,10 @@ extern tree *type_map;\n /* True if EXPR (a CALL_EXPR in that case) is a crafted StringBuffer */\n #define IS_CRAFTED_STRING_BUFFER_P(EXPR) TREE_LANG_FLAG_5 (EXPR)\n \n+/* True if EXPR (a SAVE_EXPR in that case) had its content already\n+   checked for (un)initialized local variables.  */\n+#define IS_INIT_CHECKED(EXPR) TREE_LANG_FLAG_5 (EXPR)\n+\n /* If set in CALL_EXPR, the receiver is 'super'. */\n #define CALL_USING_SUPER(EXPR) TREE_LANG_FLAG_4 (EXPR)\n "}, {"sha": "c01910138bd334acf6b7897d58a869a71c035589", "filename": "gcc/java/parse.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1729c265058cc349c8298bebc01b684a012bc8f6/gcc%2Fjava%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1729c265058cc349c8298bebc01b684a012bc8f6/gcc%2Fjava%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.c?ref=1729c265058cc349c8298bebc01b684a012bc8f6", "patch": "@@ -12963,6 +12963,8 @@ patch_string (node)\n       /* Temporary disable forbid the use of `this'. */\n       ctxp->explicit_constructor_p = 0;\n       ret = java_complete_tree (make_qualified_primary (node, invoke, 0));\n+      /* String concatenation arguments must be evaluated in order too. */\n+      ret = force_evaluation_order (ret);\n       /* Restore it at its previous value */\n       ctxp->explicit_constructor_p = saved;\n       return ret;"}, {"sha": "2196968a5f39f6ffa560a2ef1131e5dfc19055f2", "filename": "gcc/java/parse.y", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1729c265058cc349c8298bebc01b684a012bc8f6/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1729c265058cc349c8298bebc01b684a012bc8f6/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=1729c265058cc349c8298bebc01b684a012bc8f6", "patch": "@@ -10273,6 +10273,8 @@ patch_string (node)\n       /* Temporary disable forbid the use of `this'. */\n       ctxp->explicit_constructor_p = 0;\n       ret = java_complete_tree (make_qualified_primary (node, invoke, 0));\n+      /* String concatenation arguments must be evaluated in order too. */\n+      ret = force_evaluation_order (ret);\n       /* Restore it at its previous value */\n       ctxp->explicit_constructor_p = saved;\n       return ret;"}]}