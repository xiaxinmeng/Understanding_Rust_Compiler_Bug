{"sha": "6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM1NmJkYzJmYWNlZDA0YjU5OGI1ZDJhODhlMTFiZWQ2ZDY3YmQwYw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2004-11-06T18:09:00Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2004-11-06T18:09:00Z"}, "message": "[multiple changes]\n\n2004-11-06  Mark Wielaard  <mark@klomp.org>\n\n\t* Makefile.am: Add new javax.imageio files.\n\t* Makefile.in: Regenerated.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/event/IIOReadProgressListener.java,\n        javax/imageio/event/IIOReadUpdateListener.java,\n\tjavax/imageio/event/IIOReadWarningListener.java,\n\tjavax/imageio/event/IIOWriteProgressListener.java,\n\tjavax/imageio/event/IIOWriteWarningListener.java,\n\tjavax/imageio/metadata/IIOMetadataFormat.java,\n\tjavax/imageio/stream/FileCacheImageInputStream.java,\n\tjavax/imageio/stream/FileCacheImageOutputStream.java,\n\tjavax/imageio/stream/ImageInputStreamImpl.java:\n\tImport cleanup.\n\t* javax/imageio/metadata/package.html: New file.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/spi/ImageReaderSpi.java\n\t(isOwnReader): New method.\n\t* javax/imageio/spi/ImageWriterSpi.java\n\t(isOwnWriter): Likewise.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/ImageWriter.java\n\t(convertImageMetadata): New abstract method.\n\t(convertStreamMetadata): Likewise.\n\t(write): Likewise.\n\t* javax/imageio/stream/FileCacheImageInputStream.java\n\t(close): Fixed setting of stream to null.\n\t(checkStreamClosed): Throws IOException.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/stream/FileCacheImageInputStream.java,\n\tjavax/imageio/stream/FileCacheImageOutputStream.java,\n\tjavax/imageio/stream/FileImageInputStream.java,\n\tjavax/imageio/stream/FileImageOutputStream.java,\n\tjavax/imageio/stream/MemoryCacheImageInputStream.java,\n\tjavax/imageio/stream/MemoryCacheImageOutputStream.java:\n\tNew files.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/metadata/IIOInvalidTreeException.java,\n\tjavax/imageio/metadata/IIOMetadataFormatImpl.java,\n\tjavax/imageio/metadata/IIOMetadataNode.java:\n\tNew stub files.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/stream/ImageInputStreamImpl.java,\n\tjavax/imageio/stream/ImageOutputStreamImpl.java:\n\tNew files.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/ImageIO.java:\n\tAdded much new methods.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/ImageReader.java,\n\tjavax/imageio/ImageWriter.java,\n\tjavax/imageio/spi/ImageWriterSpi.java:\n\tAdd SOME new methods.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/IIOParam.java,\n\tjavax/imageio/ImageReadParam.java,\n\tjavax/imageio/ImageReader.java,\n\tjavax/imageio/ImageWriter.java:\n\tMostly implemented.\n\t* javax/imageio/spi/ImageReaderSpi.java,\n\tjavax/imageio/spi/ImageWriterSpi.java:\n\tNew files.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/ImageWriteParam.java,\n\tjavax/imageio/metadata/IIOMetadataFormat.java:\n\tImplemented.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/ImageTypeSpecifier.java:\n\tMostly implemented.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/metadata/IIOMetadata.java:\n\tMostly implemented.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/IIOImage.java,\n\tjavax/imageio/ImageReadParam.java,\n\tjavax/imageio/metadata/IIOMetadataController.java,\n\tjavax/imageio/metadata/IIOMetadataFormat.java:\n\tNew files.\n\t* javax/imageio/stream/ImageOutputStream.java:\n\tImplemented.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/IIOParam.java,\n\tjavax/imageio/IIOParamController.java,\n\tjavax/imageio/ImageTypeSpecifier.java,\n\tjavax/imageio/ImageWriteParam.java,\n\tjavax/imageio/metadata/IIOMetadata.java:\n\tNew files.\n\t* javax/imageio/ImageTranscoder.java:\n\tImplemented.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/spi/ImageInputStreamSpi.java,\n\tjavax/imageio/spi/ImageOutputStreamSpi.java:\n\tReworked import startments.\n\t* javax/imageio/spi/ServiceRegistry.java:\n\tReworked import startments. Fixed XHTML in javadocs.\n\t(ServiceRegistry): Added @param tag to javadoc.\n\t* javax/imageio/stream/ImageInputStream.java\n\t(mark): Doesn't throws IOException;\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/ImageIO.java:\n\tNew file.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/spi/IIORegistry.java\n\t(static): Don't register ImageReaderSpi.class and\n\tImageWriterSpi.class yet.\n\n2004-11-06  Michael Koch  <konqueror@gmx.de>\n\n\t* javax/imageio/spi/IIORegistry.java:\n\tNew file.\n\nFrom-SVN: r90181", "tree": {"sha": "9540c8ff7414ddaee88ad1c8b7d570e68bfa8b89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9540c8ff7414ddaee88ad1c8b7d570e68bfa8b89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/comments", "author": null, "committer": null, "parents": [{"sha": "bb05e3410cddd9bb2fad83ced5004c38626db220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb05e3410cddd9bb2fad83ced5004c38626db220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb05e3410cddd9bb2fad83ced5004c38626db220"}], "stats": {"total": 4637, "additions": 4604, "deletions": 33}, "files": [{"sha": "924288c0ed7c64ceeee6588fd9bb94e2d54a0256", "filename": "libjava/ChangeLog", "status": "modified", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -1,3 +1,149 @@\n+2004-11-06  Mark Wielaard  <mark@klomp.org>\n+\n+\t* Makefile.am: Add new javax.imageio files.\n+\t* Makefile.in: Regenerated.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/event/IIOReadProgressListener.java,\n+        javax/imageio/event/IIOReadUpdateListener.java,\n+\tjavax/imageio/event/IIOReadWarningListener.java,\n+\tjavax/imageio/event/IIOWriteProgressListener.java,\n+\tjavax/imageio/event/IIOWriteWarningListener.java,\n+\tjavax/imageio/metadata/IIOMetadataFormat.java,\n+\tjavax/imageio/stream/FileCacheImageInputStream.java,\n+\tjavax/imageio/stream/FileCacheImageOutputStream.java,\n+\tjavax/imageio/stream/ImageInputStreamImpl.java:\n+\tImport cleanup.\n+\t* javax/imageio/metadata/package.html: New file.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/spi/ImageReaderSpi.java\n+\t(isOwnReader): New method.\n+\t* javax/imageio/spi/ImageWriterSpi.java\n+\t(isOwnWriter): Likewise.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/ImageWriter.java\n+\t(convertImageMetadata): New abstract method.\n+\t(convertStreamMetadata): Likewise.\n+\t(write): Likewise.\n+\t* javax/imageio/stream/FileCacheImageInputStream.java\n+\t(close): Fixed setting of stream to null.\n+\t(checkStreamClosed): Throws IOException.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/stream/FileCacheImageInputStream.java,\n+\tjavax/imageio/stream/FileCacheImageOutputStream.java,\n+\tjavax/imageio/stream/FileImageInputStream.java,\n+\tjavax/imageio/stream/FileImageOutputStream.java,\n+\tjavax/imageio/stream/MemoryCacheImageInputStream.java,\n+\tjavax/imageio/stream/MemoryCacheImageOutputStream.java:\n+\tNew files.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/metadata/IIOInvalidTreeException.java,\n+\tjavax/imageio/metadata/IIOMetadataFormatImpl.java,\n+\tjavax/imageio/metadata/IIOMetadataNode.java:\n+\tNew stub files.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/stream/ImageInputStreamImpl.java,\n+\tjavax/imageio/stream/ImageOutputStreamImpl.java:\n+\tNew files.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/ImageIO.java:\n+\tAdded much new methods.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/ImageReader.java,\n+\tjavax/imageio/ImageWriter.java,\n+\tjavax/imageio/spi/ImageWriterSpi.java:\n+\tAdd SOME new methods.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/IIOParam.java,\n+\tjavax/imageio/ImageReadParam.java,\n+\tjavax/imageio/ImageReader.java,\n+\tjavax/imageio/ImageWriter.java:\n+\tMostly implemented.\n+\t* javax/imageio/spi/ImageReaderSpi.java,\n+\tjavax/imageio/spi/ImageWriterSpi.java:\n+\tNew files.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/ImageWriteParam.java,\n+\tjavax/imageio/metadata/IIOMetadataFormat.java:\n+\tImplemented.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/ImageTypeSpecifier.java:\n+\tMostly implemented.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/metadata/IIOMetadata.java:\n+\tMostly implemented.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/IIOImage.java,\n+\tjavax/imageio/ImageReadParam.java,\n+\tjavax/imageio/metadata/IIOMetadataController.java,\n+\tjavax/imageio/metadata/IIOMetadataFormat.java:\n+\tNew files.\n+\t* javax/imageio/stream/ImageOutputStream.java:\n+\tImplemented.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/IIOParam.java,\n+\tjavax/imageio/IIOParamController.java,\n+\tjavax/imageio/ImageTypeSpecifier.java,\n+\tjavax/imageio/ImageWriteParam.java,\n+\tjavax/imageio/metadata/IIOMetadata.java:\n+\tNew files.\n+\t* javax/imageio/ImageTranscoder.java:\n+\tImplemented.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/spi/ImageInputStreamSpi.java,\n+\tjavax/imageio/spi/ImageOutputStreamSpi.java:\n+\tReworked import startments.\n+\t* javax/imageio/spi/ServiceRegistry.java:\n+\tReworked import startments. Fixed XHTML in javadocs.\n+\t(ServiceRegistry): Added @param tag to javadoc.\n+\t* javax/imageio/stream/ImageInputStream.java\n+\t(mark): Doesn't throws IOException;\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/ImageIO.java:\n+\tNew file.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/spi/IIORegistry.java\n+\t(static): Don't register ImageReaderSpi.class and\n+\tImageWriterSpi.class yet.\n+\n+2004-11-06  Michael Koch  <konqueror@gmx.de>\n+\n+\t* javax/imageio/spi/IIORegistry.java:\n+\tNew file.\n+\n 2004-11-06  Noa Resare  <noa@resare.com>\n \n \t* java/net/Socket.java (getPort): Return 0 instead of -1 on"}, {"sha": "9c39dec6ccf959f44f392009d00950d44401a0cd", "filename": "libjava/Makefile.am", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -1907,24 +1907,48 @@ javax/crypto/spec/RC2ParameterSpec.java \\\n javax/crypto/spec/RC5ParameterSpec.java \\\n javax/crypto/spec/SecretKeySpec.java \\\n javax/imageio/IIOException.java \\\n+javax/imageio/IIOImage.java \\\n+javax/imageio/IIOParam.java \\\n+javax/imageio/IIOParamController.java \\\n+javax/imageio/ImageIO.java \\\n+javax/imageio/ImageReadParam.java \\\n javax/imageio/ImageReader.java \\\n javax/imageio/ImageTranscoder.java \\\n+javax/imageio/ImageTypeSpecifier.java \\\n+javax/imageio/ImageWriteParam.java \\\n javax/imageio/ImageWriter.java \\\n javax/imageio/event/IIOReadProgressListener.java \\\n javax/imageio/event/IIOReadUpdateListener.java \\\n javax/imageio/event/IIOReadWarningListener.java \\\n javax/imageio/event/IIOWriteProgressListener.java \\\n javax/imageio/event/IIOWriteWarningListener.java \\\n+javax/imageio/metadata/IIOInvalidTreeException.java \\\n+javax/imageio/metadata/IIOMetadata.java \\\n+javax/imageio/metadata/IIOMetadataController.java \\\n+javax/imageio/metadata/IIOMetadataFormat.java \\\n+javax/imageio/metadata/IIOMetadataFormatImpl.java \\\n+javax/imageio/metadata/IIOMetadataNode.java \\\n javax/imageio/spi/IIOServiceProvider.java \\\n+javax/imageio/spi/IIORegistry.java \\\n javax/imageio/spi/ImageInputStreamSpi.java \\\n javax/imageio/spi/ImageOutputStreamSpi.java \\\n+javax/imageio/spi/ImageReaderSpi.java \\\n javax/imageio/spi/ImageReaderWriterSpi.java \\\n javax/imageio/spi/ImageTranscoderSpi.java \\\n javax/imageio/spi/RegisterableService.java \\\n javax/imageio/spi/ServiceRegistry.java \\\n+javax/imageio/spi/ImageWriterSpi.java \\\n+javax/imageio/stream/FileCacheImageInputStream.java \\\n+javax/imageio/stream/FileCacheImageOutputStream.java \\\n+javax/imageio/stream/FileImageInputStream.java \\\n+javax/imageio/stream/FileImageOutputStream.java \\\n javax/imageio/stream/IIOByteBuffer.java \\\n javax/imageio/stream/ImageInputStream.java \\\n+javax/imageio/stream/ImageInputStreamImpl.java \\\n javax/imageio/stream/ImageOutputStream.java \\\n+javax/imageio/stream/ImageOutputStreamImpl.java \\\n+javax/imageio/stream/MemoryCacheImageInputStream.java \\\n+javax/imageio/stream/MemoryCacheImageOutputStream.java \\\n javax/naming/directory/Attribute.java \\\n javax/naming/directory/AttributeInUseException.java \\\n javax/naming/directory/AttributeModificationException.java \\"}, {"sha": "8a23bcd1e9a9a8a96f6b6482e39cf142448dab46", "filename": "libjava/Makefile.in", "status": "modified", "additions": 218, "deletions": 5, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -1944,24 +1944,47 @@ am__libgcj_la_SOURCES_DIST = prims.cc jni.cc exception.cc resolve.cc \\\n \tjavax/crypto/spec/RC2ParameterSpec.java \\\n \tjavax/crypto/spec/RC5ParameterSpec.java \\\n \tjavax/crypto/spec/SecretKeySpec.java \\\n-\tjavax/imageio/IIOException.java javax/imageio/ImageReader.java \\\n+\tjavax/imageio/IIOException.java javax/imageio/IIOImage.java \\\n+\tjavax/imageio/IIOParam.java \\\n+\tjavax/imageio/IIOParamController.java \\\n+\tjavax/imageio/ImageIO.java javax/imageio/ImageReadParam.java \\\n+\tjavax/imageio/ImageReader.java \\\n \tjavax/imageio/ImageTranscoder.java \\\n+\tjavax/imageio/ImageTypeSpecifier.java \\\n+\tjavax/imageio/ImageWriteParam.java \\\n \tjavax/imageio/ImageWriter.java \\\n \tjavax/imageio/event/IIOReadProgressListener.java \\\n \tjavax/imageio/event/IIOReadUpdateListener.java \\\n \tjavax/imageio/event/IIOReadWarningListener.java \\\n \tjavax/imageio/event/IIOWriteProgressListener.java \\\n \tjavax/imageio/event/IIOWriteWarningListener.java \\\n+\tjavax/imageio/metadata/IIOInvalidTreeException.java \\\n+\tjavax/imageio/metadata/IIOMetadata.java \\\n+\tjavax/imageio/metadata/IIOMetadataController.java \\\n+\tjavax/imageio/metadata/IIOMetadataFormat.java \\\n+\tjavax/imageio/metadata/IIOMetadataFormatImpl.java \\\n+\tjavax/imageio/metadata/IIOMetadataNode.java \\\n \tjavax/imageio/spi/IIOServiceProvider.java \\\n+\tjavax/imageio/spi/IIORegistry.java \\\n \tjavax/imageio/spi/ImageInputStreamSpi.java \\\n \tjavax/imageio/spi/ImageOutputStreamSpi.java \\\n+\tjavax/imageio/spi/ImageReaderSpi.java \\\n \tjavax/imageio/spi/ImageReaderWriterSpi.java \\\n \tjavax/imageio/spi/ImageTranscoderSpi.java \\\n \tjavax/imageio/spi/RegisterableService.java \\\n \tjavax/imageio/spi/ServiceRegistry.java \\\n+\tjavax/imageio/spi/ImageWriterSpi.java \\\n+\tjavax/imageio/stream/FileCacheImageInputStream.java \\\n+\tjavax/imageio/stream/FileCacheImageOutputStream.java \\\n+\tjavax/imageio/stream/FileImageInputStream.java \\\n+\tjavax/imageio/stream/FileImageOutputStream.java \\\n \tjavax/imageio/stream/IIOByteBuffer.java \\\n \tjavax/imageio/stream/ImageInputStream.java \\\n+\tjavax/imageio/stream/ImageInputStreamImpl.java \\\n \tjavax/imageio/stream/ImageOutputStream.java \\\n+\tjavax/imageio/stream/ImageOutputStreamImpl.java \\\n+\tjavax/imageio/stream/MemoryCacheImageInputStream.java \\\n+\tjavax/imageio/stream/MemoryCacheImageOutputStream.java \\\n \tjavax/naming/directory/Attribute.java \\\n \tjavax/naming/directory/AttributeInUseException.java \\\n \tjavax/naming/directory/AttributeModificationException.java \\\n@@ -3192,23 +3215,44 @@ am__objects_13 = javax/accessibility/Accessible.lo \\\n \tjavax/crypto/spec/RC2ParameterSpec.lo \\\n \tjavax/crypto/spec/RC5ParameterSpec.lo \\\n \tjavax/crypto/spec/SecretKeySpec.lo \\\n-\tjavax/imageio/IIOException.lo javax/imageio/ImageReader.lo \\\n-\tjavax/imageio/ImageTranscoder.lo javax/imageio/ImageWriter.lo \\\n+\tjavax/imageio/IIOException.lo javax/imageio/IIOImage.lo \\\n+\tjavax/imageio/IIOParam.lo javax/imageio/IIOParamController.lo \\\n+\tjavax/imageio/ImageIO.lo javax/imageio/ImageReadParam.lo \\\n+\tjavax/imageio/ImageReader.lo javax/imageio/ImageTranscoder.lo \\\n+\tjavax/imageio/ImageTypeSpecifier.lo \\\n+\tjavax/imageio/ImageWriteParam.lo javax/imageio/ImageWriter.lo \\\n \tjavax/imageio/event/IIOReadProgressListener.lo \\\n \tjavax/imageio/event/IIOReadUpdateListener.lo \\\n \tjavax/imageio/event/IIOReadWarningListener.lo \\\n \tjavax/imageio/event/IIOWriteProgressListener.lo \\\n \tjavax/imageio/event/IIOWriteWarningListener.lo \\\n+\tjavax/imageio/metadata/IIOInvalidTreeException.lo \\\n+\tjavax/imageio/metadata/IIOMetadata.lo \\\n+\tjavax/imageio/metadata/IIOMetadataController.lo \\\n+\tjavax/imageio/metadata/IIOMetadataFormat.lo \\\n+\tjavax/imageio/metadata/IIOMetadataFormatImpl.lo \\\n+\tjavax/imageio/metadata/IIOMetadataNode.lo \\\n \tjavax/imageio/spi/IIOServiceProvider.lo \\\n+\tjavax/imageio/spi/IIORegistry.lo \\\n \tjavax/imageio/spi/ImageInputStreamSpi.lo \\\n \tjavax/imageio/spi/ImageOutputStreamSpi.lo \\\n+\tjavax/imageio/spi/ImageReaderSpi.lo \\\n \tjavax/imageio/spi/ImageReaderWriterSpi.lo \\\n \tjavax/imageio/spi/ImageTranscoderSpi.lo \\\n \tjavax/imageio/spi/RegisterableService.lo \\\n \tjavax/imageio/spi/ServiceRegistry.lo \\\n+\tjavax/imageio/spi/ImageWriterSpi.lo \\\n+\tjavax/imageio/stream/FileCacheImageInputStream.lo \\\n+\tjavax/imageio/stream/FileCacheImageOutputStream.lo \\\n+\tjavax/imageio/stream/FileImageInputStream.lo \\\n+\tjavax/imageio/stream/FileImageOutputStream.lo \\\n \tjavax/imageio/stream/IIOByteBuffer.lo \\\n \tjavax/imageio/stream/ImageInputStream.lo \\\n+\tjavax/imageio/stream/ImageInputStreamImpl.lo \\\n \tjavax/imageio/stream/ImageOutputStream.lo \\\n+\tjavax/imageio/stream/ImageOutputStreamImpl.lo \\\n+\tjavax/imageio/stream/MemoryCacheImageInputStream.lo \\\n+\tjavax/imageio/stream/MemoryCacheImageOutputStream.lo \\\n \tjavax/naming/directory/Attribute.lo \\\n \tjavax/naming/directory/AttributeInUseException.lo \\\n \tjavax/naming/directory/AttributeModificationException.lo \\\n@@ -5699,24 +5743,48 @@ javax/crypto/spec/RC2ParameterSpec.java \\\n javax/crypto/spec/RC5ParameterSpec.java \\\n javax/crypto/spec/SecretKeySpec.java \\\n javax/imageio/IIOException.java \\\n+javax/imageio/IIOImage.java \\\n+javax/imageio/IIOParam.java \\\n+javax/imageio/IIOParamController.java \\\n+javax/imageio/ImageIO.java \\\n+javax/imageio/ImageReadParam.java \\\n javax/imageio/ImageReader.java \\\n javax/imageio/ImageTranscoder.java \\\n+javax/imageio/ImageTypeSpecifier.java \\\n+javax/imageio/ImageWriteParam.java \\\n javax/imageio/ImageWriter.java \\\n javax/imageio/event/IIOReadProgressListener.java \\\n javax/imageio/event/IIOReadUpdateListener.java \\\n javax/imageio/event/IIOReadWarningListener.java \\\n javax/imageio/event/IIOWriteProgressListener.java \\\n javax/imageio/event/IIOWriteWarningListener.java \\\n+javax/imageio/metadata/IIOInvalidTreeException.java \\\n+javax/imageio/metadata/IIOMetadata.java \\\n+javax/imageio/metadata/IIOMetadataController.java \\\n+javax/imageio/metadata/IIOMetadataFormat.java \\\n+javax/imageio/metadata/IIOMetadataFormatImpl.java \\\n+javax/imageio/metadata/IIOMetadataNode.java \\\n javax/imageio/spi/IIOServiceProvider.java \\\n+javax/imageio/spi/IIORegistry.java \\\n javax/imageio/spi/ImageInputStreamSpi.java \\\n javax/imageio/spi/ImageOutputStreamSpi.java \\\n+javax/imageio/spi/ImageReaderSpi.java \\\n javax/imageio/spi/ImageReaderWriterSpi.java \\\n javax/imageio/spi/ImageTranscoderSpi.java \\\n javax/imageio/spi/RegisterableService.java \\\n javax/imageio/spi/ServiceRegistry.java \\\n+javax/imageio/spi/ImageWriterSpi.java \\\n+javax/imageio/stream/FileCacheImageInputStream.java \\\n+javax/imageio/stream/FileCacheImageOutputStream.java \\\n+javax/imageio/stream/FileImageInputStream.java \\\n+javax/imageio/stream/FileImageOutputStream.java \\\n javax/imageio/stream/IIOByteBuffer.java \\\n javax/imageio/stream/ImageInputStream.java \\\n+javax/imageio/stream/ImageInputStreamImpl.java \\\n javax/imageio/stream/ImageOutputStream.java \\\n+javax/imageio/stream/ImageOutputStreamImpl.java \\\n+javax/imageio/stream/MemoryCacheImageInputStream.java \\\n+javax/imageio/stream/MemoryCacheImageOutputStream.java \\\n javax/naming/directory/Attribute.java \\\n javax/naming/directory/AttributeInUseException.java \\\n javax/naming/directory/AttributeModificationException.java \\\n@@ -12938,10 +13006,24 @@ javax/imageio/$(DEPDIR)/$(am__dirstamp):\n \t@: > javax/imageio/$(DEPDIR)/$(am__dirstamp)\n javax/imageio/IIOException.lo: javax/imageio/$(am__dirstamp) \\\n \tjavax/imageio/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/IIOImage.lo: javax/imageio/$(am__dirstamp) \\\n+\tjavax/imageio/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/IIOParam.lo: javax/imageio/$(am__dirstamp) \\\n+\tjavax/imageio/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/IIOParamController.lo: javax/imageio/$(am__dirstamp) \\\n+\tjavax/imageio/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/ImageIO.lo: javax/imageio/$(am__dirstamp) \\\n+\tjavax/imageio/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/ImageReadParam.lo: javax/imageio/$(am__dirstamp) \\\n+\tjavax/imageio/$(DEPDIR)/$(am__dirstamp)\n javax/imageio/ImageReader.lo: javax/imageio/$(am__dirstamp) \\\n \tjavax/imageio/$(DEPDIR)/$(am__dirstamp)\n javax/imageio/ImageTranscoder.lo: javax/imageio/$(am__dirstamp) \\\n \tjavax/imageio/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/ImageTypeSpecifier.lo: javax/imageio/$(am__dirstamp) \\\n+\tjavax/imageio/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/ImageWriteParam.lo: javax/imageio/$(am__dirstamp) \\\n+\tjavax/imageio/$(DEPDIR)/$(am__dirstamp)\n javax/imageio/ImageWriter.lo: javax/imageio/$(am__dirstamp) \\\n \tjavax/imageio/$(DEPDIR)/$(am__dirstamp)\n javax/imageio/event/$(am__dirstamp):\n@@ -12965,6 +13047,30 @@ javax/imageio/event/IIOWriteProgressListener.lo:  \\\n javax/imageio/event/IIOWriteWarningListener.lo:  \\\n \tjavax/imageio/event/$(am__dirstamp) \\\n \tjavax/imageio/event/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/metadata/$(am__dirstamp):\n+\t@$(mkdir_p) javax/imageio/metadata\n+\t@: > javax/imageio/metadata/$(am__dirstamp)\n+javax/imageio/metadata/$(DEPDIR)/$(am__dirstamp):\n+\t@$(mkdir_p) javax/imageio/metadata/$(DEPDIR)\n+\t@: > javax/imageio/metadata/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/metadata/IIOInvalidTreeException.lo:  \\\n+\tjavax/imageio/metadata/$(am__dirstamp) \\\n+\tjavax/imageio/metadata/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/metadata/IIOMetadata.lo:  \\\n+\tjavax/imageio/metadata/$(am__dirstamp) \\\n+\tjavax/imageio/metadata/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/metadata/IIOMetadataController.lo:  \\\n+\tjavax/imageio/metadata/$(am__dirstamp) \\\n+\tjavax/imageio/metadata/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/metadata/IIOMetadataFormat.lo:  \\\n+\tjavax/imageio/metadata/$(am__dirstamp) \\\n+\tjavax/imageio/metadata/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/metadata/IIOMetadataFormatImpl.lo:  \\\n+\tjavax/imageio/metadata/$(am__dirstamp) \\\n+\tjavax/imageio/metadata/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/metadata/IIOMetadataNode.lo:  \\\n+\tjavax/imageio/metadata/$(am__dirstamp) \\\n+\tjavax/imageio/metadata/$(DEPDIR)/$(am__dirstamp)\n javax/imageio/spi/$(am__dirstamp):\n \t@$(mkdir_p) javax/imageio/spi\n \t@: > javax/imageio/spi/$(am__dirstamp)\n@@ -12974,12 +13080,17 @@ javax/imageio/spi/$(DEPDIR)/$(am__dirstamp):\n javax/imageio/spi/IIOServiceProvider.lo:  \\\n \tjavax/imageio/spi/$(am__dirstamp) \\\n \tjavax/imageio/spi/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/spi/IIORegistry.lo: javax/imageio/spi/$(am__dirstamp) \\\n+\tjavax/imageio/spi/$(DEPDIR)/$(am__dirstamp)\n javax/imageio/spi/ImageInputStreamSpi.lo:  \\\n \tjavax/imageio/spi/$(am__dirstamp) \\\n \tjavax/imageio/spi/$(DEPDIR)/$(am__dirstamp)\n javax/imageio/spi/ImageOutputStreamSpi.lo:  \\\n \tjavax/imageio/spi/$(am__dirstamp) \\\n \tjavax/imageio/spi/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/spi/ImageReaderSpi.lo:  \\\n+\tjavax/imageio/spi/$(am__dirstamp) \\\n+\tjavax/imageio/spi/$(DEPDIR)/$(am__dirstamp)\n javax/imageio/spi/ImageReaderWriterSpi.lo:  \\\n \tjavax/imageio/spi/$(am__dirstamp) \\\n \tjavax/imageio/spi/$(DEPDIR)/$(am__dirstamp)\n@@ -12992,21 +13103,48 @@ javax/imageio/spi/RegisterableService.lo:  \\\n javax/imageio/spi/ServiceRegistry.lo:  \\\n \tjavax/imageio/spi/$(am__dirstamp) \\\n \tjavax/imageio/spi/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/spi/ImageWriterSpi.lo:  \\\n+\tjavax/imageio/spi/$(am__dirstamp) \\\n+\tjavax/imageio/spi/$(DEPDIR)/$(am__dirstamp)\n javax/imageio/stream/$(am__dirstamp):\n \t@$(mkdir_p) javax/imageio/stream\n \t@: > javax/imageio/stream/$(am__dirstamp)\n javax/imageio/stream/$(DEPDIR)/$(am__dirstamp):\n \t@$(mkdir_p) javax/imageio/stream/$(DEPDIR)\n \t@: > javax/imageio/stream/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/stream/FileCacheImageInputStream.lo:  \\\n+\tjavax/imageio/stream/$(am__dirstamp) \\\n+\tjavax/imageio/stream/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/stream/FileCacheImageOutputStream.lo:  \\\n+\tjavax/imageio/stream/$(am__dirstamp) \\\n+\tjavax/imageio/stream/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/stream/FileImageInputStream.lo:  \\\n+\tjavax/imageio/stream/$(am__dirstamp) \\\n+\tjavax/imageio/stream/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/stream/FileImageOutputStream.lo:  \\\n+\tjavax/imageio/stream/$(am__dirstamp) \\\n+\tjavax/imageio/stream/$(DEPDIR)/$(am__dirstamp)\n javax/imageio/stream/IIOByteBuffer.lo:  \\\n \tjavax/imageio/stream/$(am__dirstamp) \\\n \tjavax/imageio/stream/$(DEPDIR)/$(am__dirstamp)\n javax/imageio/stream/ImageInputStream.lo:  \\\n \tjavax/imageio/stream/$(am__dirstamp) \\\n \tjavax/imageio/stream/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/stream/ImageInputStreamImpl.lo:  \\\n+\tjavax/imageio/stream/$(am__dirstamp) \\\n+\tjavax/imageio/stream/$(DEPDIR)/$(am__dirstamp)\n javax/imageio/stream/ImageOutputStream.lo:  \\\n \tjavax/imageio/stream/$(am__dirstamp) \\\n \tjavax/imageio/stream/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/stream/ImageOutputStreamImpl.lo:  \\\n+\tjavax/imageio/stream/$(am__dirstamp) \\\n+\tjavax/imageio/stream/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/stream/MemoryCacheImageInputStream.lo:  \\\n+\tjavax/imageio/stream/$(am__dirstamp) \\\n+\tjavax/imageio/stream/$(DEPDIR)/$(am__dirstamp)\n+javax/imageio/stream/MemoryCacheImageOutputStream.lo:  \\\n+\tjavax/imageio/stream/$(am__dirstamp) \\\n+\tjavax/imageio/stream/$(DEPDIR)/$(am__dirstamp)\n javax/naming/directory/$(am__dirstamp):\n \t@$(mkdir_p) javax/naming/directory\n \t@: > javax/naming/directory/$(am__dirstamp)\n@@ -17407,10 +17545,24 @@ mostlyclean-compile:\n \t-rm -f javax/crypto/spec/SecretKeySpec.lo\n \t-rm -f javax/imageio/IIOException.$(OBJEXT)\n \t-rm -f javax/imageio/IIOException.lo\n+\t-rm -f javax/imageio/IIOImage.$(OBJEXT)\n+\t-rm -f javax/imageio/IIOImage.lo\n+\t-rm -f javax/imageio/IIOParam.$(OBJEXT)\n+\t-rm -f javax/imageio/IIOParam.lo\n+\t-rm -f javax/imageio/IIOParamController.$(OBJEXT)\n+\t-rm -f javax/imageio/IIOParamController.lo\n+\t-rm -f javax/imageio/ImageIO.$(OBJEXT)\n+\t-rm -f javax/imageio/ImageIO.lo\n+\t-rm -f javax/imageio/ImageReadParam.$(OBJEXT)\n+\t-rm -f javax/imageio/ImageReadParam.lo\n \t-rm -f javax/imageio/ImageReader.$(OBJEXT)\n \t-rm -f javax/imageio/ImageReader.lo\n \t-rm -f javax/imageio/ImageTranscoder.$(OBJEXT)\n \t-rm -f javax/imageio/ImageTranscoder.lo\n+\t-rm -f javax/imageio/ImageTypeSpecifier.$(OBJEXT)\n+\t-rm -f javax/imageio/ImageTypeSpecifier.lo\n+\t-rm -f javax/imageio/ImageWriteParam.$(OBJEXT)\n+\t-rm -f javax/imageio/ImageWriteParam.lo\n \t-rm -f javax/imageio/ImageWriter.$(OBJEXT)\n \t-rm -f javax/imageio/ImageWriter.lo\n \t-rm -f javax/imageio/event/IIOReadProgressListener.$(OBJEXT)\n@@ -17423,26 +17575,60 @@ mostlyclean-compile:\n \t-rm -f javax/imageio/event/IIOWriteProgressListener.lo\n \t-rm -f javax/imageio/event/IIOWriteWarningListener.$(OBJEXT)\n \t-rm -f javax/imageio/event/IIOWriteWarningListener.lo\n+\t-rm -f javax/imageio/metadata/IIOInvalidTreeException.$(OBJEXT)\n+\t-rm -f javax/imageio/metadata/IIOInvalidTreeException.lo\n+\t-rm -f javax/imageio/metadata/IIOMetadata.$(OBJEXT)\n+\t-rm -f javax/imageio/metadata/IIOMetadata.lo\n+\t-rm -f javax/imageio/metadata/IIOMetadataController.$(OBJEXT)\n+\t-rm -f javax/imageio/metadata/IIOMetadataController.lo\n+\t-rm -f javax/imageio/metadata/IIOMetadataFormat.$(OBJEXT)\n+\t-rm -f javax/imageio/metadata/IIOMetadataFormat.lo\n+\t-rm -f javax/imageio/metadata/IIOMetadataFormatImpl.$(OBJEXT)\n+\t-rm -f javax/imageio/metadata/IIOMetadataFormatImpl.lo\n+\t-rm -f javax/imageio/metadata/IIOMetadataNode.$(OBJEXT)\n+\t-rm -f javax/imageio/metadata/IIOMetadataNode.lo\n+\t-rm -f javax/imageio/spi/IIORegistry.$(OBJEXT)\n+\t-rm -f javax/imageio/spi/IIORegistry.lo\n \t-rm -f javax/imageio/spi/IIOServiceProvider.$(OBJEXT)\n \t-rm -f javax/imageio/spi/IIOServiceProvider.lo\n \t-rm -f javax/imageio/spi/ImageInputStreamSpi.$(OBJEXT)\n \t-rm -f javax/imageio/spi/ImageInputStreamSpi.lo\n \t-rm -f javax/imageio/spi/ImageOutputStreamSpi.$(OBJEXT)\n \t-rm -f javax/imageio/spi/ImageOutputStreamSpi.lo\n+\t-rm -f javax/imageio/spi/ImageReaderSpi.$(OBJEXT)\n+\t-rm -f javax/imageio/spi/ImageReaderSpi.lo\n \t-rm -f javax/imageio/spi/ImageReaderWriterSpi.$(OBJEXT)\n \t-rm -f javax/imageio/spi/ImageReaderWriterSpi.lo\n \t-rm -f javax/imageio/spi/ImageTranscoderSpi.$(OBJEXT)\n \t-rm -f javax/imageio/spi/ImageTranscoderSpi.lo\n+\t-rm -f javax/imageio/spi/ImageWriterSpi.$(OBJEXT)\n+\t-rm -f javax/imageio/spi/ImageWriterSpi.lo\n \t-rm -f javax/imageio/spi/RegisterableService.$(OBJEXT)\n \t-rm -f javax/imageio/spi/RegisterableService.lo\n \t-rm -f javax/imageio/spi/ServiceRegistry.$(OBJEXT)\n \t-rm -f javax/imageio/spi/ServiceRegistry.lo\n+\t-rm -f javax/imageio/stream/FileCacheImageInputStream.$(OBJEXT)\n+\t-rm -f javax/imageio/stream/FileCacheImageInputStream.lo\n+\t-rm -f javax/imageio/stream/FileCacheImageOutputStream.$(OBJEXT)\n+\t-rm -f javax/imageio/stream/FileCacheImageOutputStream.lo\n+\t-rm -f javax/imageio/stream/FileImageInputStream.$(OBJEXT)\n+\t-rm -f javax/imageio/stream/FileImageInputStream.lo\n+\t-rm -f javax/imageio/stream/FileImageOutputStream.$(OBJEXT)\n+\t-rm -f javax/imageio/stream/FileImageOutputStream.lo\n \t-rm -f javax/imageio/stream/IIOByteBuffer.$(OBJEXT)\n \t-rm -f javax/imageio/stream/IIOByteBuffer.lo\n \t-rm -f javax/imageio/stream/ImageInputStream.$(OBJEXT)\n \t-rm -f javax/imageio/stream/ImageInputStream.lo\n+\t-rm -f javax/imageio/stream/ImageInputStreamImpl.$(OBJEXT)\n+\t-rm -f javax/imageio/stream/ImageInputStreamImpl.lo\n \t-rm -f javax/imageio/stream/ImageOutputStream.$(OBJEXT)\n \t-rm -f javax/imageio/stream/ImageOutputStream.lo\n+\t-rm -f javax/imageio/stream/ImageOutputStreamImpl.$(OBJEXT)\n+\t-rm -f javax/imageio/stream/ImageOutputStreamImpl.lo\n+\t-rm -f javax/imageio/stream/MemoryCacheImageInputStream.$(OBJEXT)\n+\t-rm -f javax/imageio/stream/MemoryCacheImageInputStream.lo\n+\t-rm -f javax/imageio/stream/MemoryCacheImageOutputStream.$(OBJEXT)\n+\t-rm -f javax/imageio/stream/MemoryCacheImageOutputStream.lo\n \t-rm -f javax/naming/AuthenticationException.$(OBJEXT)\n \t-rm -f javax/naming/AuthenticationException.lo\n \t-rm -f javax/naming/AuthenticationNotSupportedException.$(OBJEXT)\n@@ -20686,24 +20872,48 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@javax/crypto/spec/$(DEPDIR)/RC5ParameterSpec.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/crypto/spec/$(DEPDIR)/SecretKeySpec.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/$(DEPDIR)/IIOException.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/$(DEPDIR)/IIOImage.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/$(DEPDIR)/IIOParam.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/$(DEPDIR)/IIOParamController.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/$(DEPDIR)/ImageIO.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/$(DEPDIR)/ImageReadParam.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/$(DEPDIR)/ImageReader.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/$(DEPDIR)/ImageTranscoder.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/$(DEPDIR)/ImageTypeSpecifier.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/$(DEPDIR)/ImageWriteParam.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/$(DEPDIR)/ImageWriter.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/event/$(DEPDIR)/IIOReadProgressListener.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/event/$(DEPDIR)/IIOReadUpdateListener.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/event/$(DEPDIR)/IIOReadWarningListener.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/event/$(DEPDIR)/IIOWriteProgressListener.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/event/$(DEPDIR)/IIOWriteWarningListener.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/metadata/$(DEPDIR)/IIOInvalidTreeException.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/metadata/$(DEPDIR)/IIOMetadata.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/metadata/$(DEPDIR)/IIOMetadataController.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/metadata/$(DEPDIR)/IIOMetadataFormat.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/metadata/$(DEPDIR)/IIOMetadataFormatImpl.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/metadata/$(DEPDIR)/IIOMetadataNode.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/spi/$(DEPDIR)/IIORegistry.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/spi/$(DEPDIR)/IIOServiceProvider.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/spi/$(DEPDIR)/ImageInputStreamSpi.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/spi/$(DEPDIR)/ImageOutputStreamSpi.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/spi/$(DEPDIR)/ImageReaderSpi.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/spi/$(DEPDIR)/ImageReaderWriterSpi.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/spi/$(DEPDIR)/ImageTranscoderSpi.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/spi/$(DEPDIR)/ImageWriterSpi.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/spi/$(DEPDIR)/RegisterableService.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/spi/$(DEPDIR)/ServiceRegistry.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/stream/$(DEPDIR)/FileCacheImageInputStream.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/stream/$(DEPDIR)/FileCacheImageOutputStream.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/stream/$(DEPDIR)/FileImageInputStream.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/stream/$(DEPDIR)/FileImageOutputStream.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/stream/$(DEPDIR)/IIOByteBuffer.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/stream/$(DEPDIR)/ImageInputStream.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/stream/$(DEPDIR)/ImageInputStreamImpl.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/stream/$(DEPDIR)/ImageOutputStream.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/stream/$(DEPDIR)/ImageOutputStreamImpl.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/stream/$(DEPDIR)/MemoryCacheImageInputStream.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/imageio/stream/$(DEPDIR)/MemoryCacheImageOutputStream.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/naming/$(DEPDIR)/AuthenticationException.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/naming/$(DEPDIR)/AuthenticationNotSupportedException.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/naming/$(DEPDIR)/BinaryRefAddr.Plo@am__quote@\n@@ -22393,6 +22603,7 @@ clean-libtool:\n \t-rm -rf javax/crypto/spec/.libs javax/crypto/spec/_libs\n \t-rm -rf javax/imageio/.libs javax/imageio/_libs\n \t-rm -rf javax/imageio/event/.libs javax/imageio/event/_libs\n+\t-rm -rf javax/imageio/metadata/.libs javax/imageio/metadata/_libs\n \t-rm -rf javax/imageio/spi/.libs javax/imageio/spi/_libs\n \t-rm -rf javax/imageio/stream/.libs javax/imageio/stream/_libs\n \t-rm -rf javax/naming/.libs javax/naming/_libs\n@@ -22980,6 +23191,8 @@ distclean-generic:\n \t-rm -f javax/imageio/$(am__dirstamp)\n \t-rm -f javax/imageio/event/$(DEPDIR)/$(am__dirstamp)\n \t-rm -f javax/imageio/event/$(am__dirstamp)\n+\t-rm -f javax/imageio/metadata/$(DEPDIR)/$(am__dirstamp)\n+\t-rm -f javax/imageio/metadata/$(am__dirstamp)\n \t-rm -f javax/imageio/spi/$(DEPDIR)/$(am__dirstamp)\n \t-rm -f javax/imageio/spi/$(am__dirstamp)\n \t-rm -f javax/imageio/stream/$(DEPDIR)/$(am__dirstamp)\n@@ -23084,7 +23297,7 @@ clean-am: clean-binPROGRAMS clean-generic clean-libtool clean-local \\\n \n distclean: distclean-recursive\n \t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n-\t-rm -rf ./$(DEPDIR) gnu/awt/$(DEPDIR) gnu/awt/j2d/$(DEPDIR) gnu/awt/xlib/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/awt/$(DEPDIR) gnu/java/awt/image/$(DEPDIR) gnu/java/awt/peer/$(DEPDIR) gnu/java/awt/peer/gtk/$(DEPDIR) gnu/java/beans/$(DEPDIR) gnu/java/beans/editors/$(DEPDIR) gnu/java/beans/info/$(DEPDIR) gnu/java/io/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/reflect/$(DEPDIR) gnu/java/locale/$(DEPDIR) gnu/java/math/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/net/protocol/file/$(DEPDIR) gnu/java/net/protocol/gcjlib/$(DEPDIR) gnu/java/net/protocol/http/$(DEPDIR) gnu/java/net/protocol/jar/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/nio/charset/$(DEPDIR) gnu/java/rmi/$(DEPDIR) gnu/java/rmi/dgc/$(DEPDIR) gnu/java/rmi/registry/$(DEPDIR) gnu/java/rmi/rmic/$(DEPDIR) gnu/java/rmi/server/$(DEPDIR) gnu/java/security/$(DEPDIR) gnu/java/security/action/$(DEPDIR) gnu/java/security/der/$(DEPDIR) gnu/java/security/provider/$(DEPDIR) gnu/java/security/util/$(DEPDIR) gnu/java/security/x509/$(DEPDIR) gnu/java/text/$(DEPDIR) gnu/java/util/$(DEPDIR) gnu/java/util/prefs/$(DEPDIR) gnu/regexp/$(DEPDIR) java/applet/$(DEPDIR) java/awt/$(DEPDIR) java/awt/color/$(DEPDIR) java/awt/datatransfer/$(DEPDIR) java/awt/dnd/$(DEPDIR) java/awt/dnd/peer/$(DEPDIR) java/awt/event/$(DEPDIR) java/awt/font/$(DEPDIR) java/awt/geom/$(DEPDIR) java/awt/im/$(DEPDIR) java/awt/im/spi/$(DEPDIR) java/awt/image/$(DEPDIR) java/awt/image/renderable/$(DEPDIR) java/awt/peer/$(DEPDIR) java/awt/print/$(DEPDIR) java/beans/$(DEPDIR) java/beans/beancontext/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/math/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/nio/channels/spi/$(DEPDIR) java/nio/charset/$(DEPDIR) java/nio/charset/spi/$(DEPDIR) java/rmi/$(DEPDIR) java/rmi/activation/$(DEPDIR) java/rmi/dgc/$(DEPDIR) java/rmi/registry/$(DEPDIR) java/rmi/server/$(DEPDIR) java/security/$(DEPDIR) java/security/acl/$(DEPDIR) java/security/cert/$(DEPDIR) java/security/interfaces/$(DEPDIR) java/security/spec/$(DEPDIR) java/sql/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/jar/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/prefs/$(DEPDIR) java/util/regex/$(DEPDIR) java/util/zip/$(DEPDIR) javax/accessibility/$(DEPDIR) javax/crypto/$(DEPDIR) javax/crypto/interfaces/$(DEPDIR) javax/crypto/spec/$(DEPDIR) javax/imageio/$(DEPDIR) javax/imageio/event/$(DEPDIR) javax/imageio/spi/$(DEPDIR) javax/imageio/stream/$(DEPDIR) javax/naming/$(DEPDIR) javax/naming/directory/$(DEPDIR) javax/naming/event/$(DEPDIR) javax/naming/ldap/$(DEPDIR) javax/naming/spi/$(DEPDIR) javax/net/$(DEPDIR) javax/net/ssl/$(DEPDIR) javax/print/$(DEPDIR) javax/print/attribute/$(DEPDIR) javax/print/attribute/standard/$(DEPDIR) javax/print/event/$(DEPDIR) javax/security/auth/$(DEPDIR) javax/security/auth/callback/$(DEPDIR) javax/security/auth/login/$(DEPDIR) javax/security/auth/x500/$(DEPDIR) javax/security/cert/$(DEPDIR) javax/security/sasl/$(DEPDIR) javax/sql/$(DEPDIR) javax/swing/$(DEPDIR) javax/swing/border/$(DEPDIR) javax/swing/colorchooser/$(DEPDIR) javax/swing/event/$(DEPDIR) javax/swing/filechooser/$(DEPDIR) javax/swing/plaf/$(DEPDIR) javax/swing/plaf/basic/$(DEPDIR) javax/swing/plaf/metal/$(DEPDIR) javax/swing/table/$(DEPDIR) javax/swing/text/$(DEPDIR) javax/swing/text/html/$(DEPDIR) javax/swing/text/html/parser/$(DEPDIR) javax/swing/tree/$(DEPDIR) javax/swing/undo/$(DEPDIR) javax/transaction/$(DEPDIR) javax/transaction/xa/$(DEPDIR) jni/classpath/$(DEPDIR) jni/gtk-peer/$(DEPDIR) org/ietf/jgss/$(DEPDIR) org/w3c/dom/$(DEPDIR) org/w3c/dom/ranges/$(DEPDIR) org/w3c/dom/traversal/$(DEPDIR) org/xml/sax/$(DEPDIR) org/xml/sax/ext/$(DEPDIR) org/xml/sax/helpers/$(DEPDIR) sysdep/$(DEPDIR)\n+\t-rm -rf ./$(DEPDIR) gnu/awt/$(DEPDIR) gnu/awt/j2d/$(DEPDIR) gnu/awt/xlib/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/awt/$(DEPDIR) gnu/java/awt/image/$(DEPDIR) gnu/java/awt/peer/$(DEPDIR) gnu/java/awt/peer/gtk/$(DEPDIR) gnu/java/beans/$(DEPDIR) gnu/java/beans/editors/$(DEPDIR) gnu/java/beans/info/$(DEPDIR) gnu/java/io/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/reflect/$(DEPDIR) gnu/java/locale/$(DEPDIR) gnu/java/math/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/net/protocol/file/$(DEPDIR) gnu/java/net/protocol/gcjlib/$(DEPDIR) gnu/java/net/protocol/http/$(DEPDIR) gnu/java/net/protocol/jar/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/nio/charset/$(DEPDIR) gnu/java/rmi/$(DEPDIR) gnu/java/rmi/dgc/$(DEPDIR) gnu/java/rmi/registry/$(DEPDIR) gnu/java/rmi/rmic/$(DEPDIR) gnu/java/rmi/server/$(DEPDIR) gnu/java/security/$(DEPDIR) gnu/java/security/action/$(DEPDIR) gnu/java/security/der/$(DEPDIR) gnu/java/security/provider/$(DEPDIR) gnu/java/security/util/$(DEPDIR) gnu/java/security/x509/$(DEPDIR) gnu/java/text/$(DEPDIR) gnu/java/util/$(DEPDIR) gnu/java/util/prefs/$(DEPDIR) gnu/regexp/$(DEPDIR) java/applet/$(DEPDIR) java/awt/$(DEPDIR) java/awt/color/$(DEPDIR) java/awt/datatransfer/$(DEPDIR) java/awt/dnd/$(DEPDIR) java/awt/dnd/peer/$(DEPDIR) java/awt/event/$(DEPDIR) java/awt/font/$(DEPDIR) java/awt/geom/$(DEPDIR) java/awt/im/$(DEPDIR) java/awt/im/spi/$(DEPDIR) java/awt/image/$(DEPDIR) java/awt/image/renderable/$(DEPDIR) java/awt/peer/$(DEPDIR) java/awt/print/$(DEPDIR) java/beans/$(DEPDIR) java/beans/beancontext/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/math/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/nio/channels/spi/$(DEPDIR) java/nio/charset/$(DEPDIR) java/nio/charset/spi/$(DEPDIR) java/rmi/$(DEPDIR) java/rmi/activation/$(DEPDIR) java/rmi/dgc/$(DEPDIR) java/rmi/registry/$(DEPDIR) java/rmi/server/$(DEPDIR) java/security/$(DEPDIR) java/security/acl/$(DEPDIR) java/security/cert/$(DEPDIR) java/security/interfaces/$(DEPDIR) java/security/spec/$(DEPDIR) java/sql/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/jar/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/prefs/$(DEPDIR) java/util/regex/$(DEPDIR) java/util/zip/$(DEPDIR) javax/accessibility/$(DEPDIR) javax/crypto/$(DEPDIR) javax/crypto/interfaces/$(DEPDIR) javax/crypto/spec/$(DEPDIR) javax/imageio/$(DEPDIR) javax/imageio/event/$(DEPDIR) javax/imageio/metadata/$(DEPDIR) javax/imageio/spi/$(DEPDIR) javax/imageio/stream/$(DEPDIR) javax/naming/$(DEPDIR) javax/naming/directory/$(DEPDIR) javax/naming/event/$(DEPDIR) javax/naming/ldap/$(DEPDIR) javax/naming/spi/$(DEPDIR) javax/net/$(DEPDIR) javax/net/ssl/$(DEPDIR) javax/print/$(DEPDIR) javax/print/attribute/$(DEPDIR) javax/print/attribute/standard/$(DEPDIR) javax/print/event/$(DEPDIR) javax/security/auth/$(DEPDIR) javax/security/auth/callback/$(DEPDIR) javax/security/auth/login/$(DEPDIR) javax/security/auth/x500/$(DEPDIR) javax/security/cert/$(DEPDIR) javax/security/sasl/$(DEPDIR) javax/sql/$(DEPDIR) javax/swing/$(DEPDIR) javax/swing/border/$(DEPDIR) javax/swing/colorchooser/$(DEPDIR) javax/swing/event/$(DEPDIR) javax/swing/filechooser/$(DEPDIR) javax/swing/plaf/$(DEPDIR) javax/swing/plaf/basic/$(DEPDIR) javax/swing/plaf/metal/$(DEPDIR) javax/swing/table/$(DEPDIR) javax/swing/text/$(DEPDIR) javax/swing/text/html/$(DEPDIR) javax/swing/text/html/parser/$(DEPDIR) javax/swing/tree/$(DEPDIR) javax/swing/undo/$(DEPDIR) javax/transaction/$(DEPDIR) javax/transaction/xa/$(DEPDIR) jni/classpath/$(DEPDIR) jni/gtk-peer/$(DEPDIR) org/ietf/jgss/$(DEPDIR) org/w3c/dom/$(DEPDIR) org/w3c/dom/ranges/$(DEPDIR) org/w3c/dom/traversal/$(DEPDIR) org/xml/sax/$(DEPDIR) org/xml/sax/ext/$(DEPDIR) org/xml/sax/helpers/$(DEPDIR) sysdep/$(DEPDIR)\n \t-rm -f Makefile\n distclean-am: clean-am distclean-compile distclean-generic \\\n \tdistclean-libtool distclean-local distclean-tags\n@@ -23114,7 +23327,7 @@ installcheck-am:\n maintainer-clean: maintainer-clean-recursive\n \t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n \t-rm -rf $(top_srcdir)/autom4te.cache\n-\t-rm -rf ./$(DEPDIR) gnu/awt/$(DEPDIR) gnu/awt/j2d/$(DEPDIR) gnu/awt/xlib/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/awt/$(DEPDIR) gnu/java/awt/image/$(DEPDIR) gnu/java/awt/peer/$(DEPDIR) gnu/java/awt/peer/gtk/$(DEPDIR) gnu/java/beans/$(DEPDIR) gnu/java/beans/editors/$(DEPDIR) gnu/java/beans/info/$(DEPDIR) gnu/java/io/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/reflect/$(DEPDIR) gnu/java/locale/$(DEPDIR) gnu/java/math/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/net/protocol/file/$(DEPDIR) gnu/java/net/protocol/gcjlib/$(DEPDIR) gnu/java/net/protocol/http/$(DEPDIR) gnu/java/net/protocol/jar/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/nio/charset/$(DEPDIR) gnu/java/rmi/$(DEPDIR) gnu/java/rmi/dgc/$(DEPDIR) gnu/java/rmi/registry/$(DEPDIR) gnu/java/rmi/rmic/$(DEPDIR) gnu/java/rmi/server/$(DEPDIR) gnu/java/security/$(DEPDIR) gnu/java/security/action/$(DEPDIR) gnu/java/security/der/$(DEPDIR) gnu/java/security/provider/$(DEPDIR) gnu/java/security/util/$(DEPDIR) gnu/java/security/x509/$(DEPDIR) gnu/java/text/$(DEPDIR) gnu/java/util/$(DEPDIR) gnu/java/util/prefs/$(DEPDIR) gnu/regexp/$(DEPDIR) java/applet/$(DEPDIR) java/awt/$(DEPDIR) java/awt/color/$(DEPDIR) java/awt/datatransfer/$(DEPDIR) java/awt/dnd/$(DEPDIR) java/awt/dnd/peer/$(DEPDIR) java/awt/event/$(DEPDIR) java/awt/font/$(DEPDIR) java/awt/geom/$(DEPDIR) java/awt/im/$(DEPDIR) java/awt/im/spi/$(DEPDIR) java/awt/image/$(DEPDIR) java/awt/image/renderable/$(DEPDIR) java/awt/peer/$(DEPDIR) java/awt/print/$(DEPDIR) java/beans/$(DEPDIR) java/beans/beancontext/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/math/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/nio/channels/spi/$(DEPDIR) java/nio/charset/$(DEPDIR) java/nio/charset/spi/$(DEPDIR) java/rmi/$(DEPDIR) java/rmi/activation/$(DEPDIR) java/rmi/dgc/$(DEPDIR) java/rmi/registry/$(DEPDIR) java/rmi/server/$(DEPDIR) java/security/$(DEPDIR) java/security/acl/$(DEPDIR) java/security/cert/$(DEPDIR) java/security/interfaces/$(DEPDIR) java/security/spec/$(DEPDIR) java/sql/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/jar/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/prefs/$(DEPDIR) java/util/regex/$(DEPDIR) java/util/zip/$(DEPDIR) javax/accessibility/$(DEPDIR) javax/crypto/$(DEPDIR) javax/crypto/interfaces/$(DEPDIR) javax/crypto/spec/$(DEPDIR) javax/imageio/$(DEPDIR) javax/imageio/event/$(DEPDIR) javax/imageio/spi/$(DEPDIR) javax/imageio/stream/$(DEPDIR) javax/naming/$(DEPDIR) javax/naming/directory/$(DEPDIR) javax/naming/event/$(DEPDIR) javax/naming/ldap/$(DEPDIR) javax/naming/spi/$(DEPDIR) javax/net/$(DEPDIR) javax/net/ssl/$(DEPDIR) javax/print/$(DEPDIR) javax/print/attribute/$(DEPDIR) javax/print/attribute/standard/$(DEPDIR) javax/print/event/$(DEPDIR) javax/security/auth/$(DEPDIR) javax/security/auth/callback/$(DEPDIR) javax/security/auth/login/$(DEPDIR) javax/security/auth/x500/$(DEPDIR) javax/security/cert/$(DEPDIR) javax/security/sasl/$(DEPDIR) javax/sql/$(DEPDIR) javax/swing/$(DEPDIR) javax/swing/border/$(DEPDIR) javax/swing/colorchooser/$(DEPDIR) javax/swing/event/$(DEPDIR) javax/swing/filechooser/$(DEPDIR) javax/swing/plaf/$(DEPDIR) javax/swing/plaf/basic/$(DEPDIR) javax/swing/plaf/metal/$(DEPDIR) javax/swing/table/$(DEPDIR) javax/swing/text/$(DEPDIR) javax/swing/text/html/$(DEPDIR) javax/swing/text/html/parser/$(DEPDIR) javax/swing/tree/$(DEPDIR) javax/swing/undo/$(DEPDIR) javax/transaction/$(DEPDIR) javax/transaction/xa/$(DEPDIR) jni/classpath/$(DEPDIR) jni/gtk-peer/$(DEPDIR) org/ietf/jgss/$(DEPDIR) org/w3c/dom/$(DEPDIR) org/w3c/dom/ranges/$(DEPDIR) org/w3c/dom/traversal/$(DEPDIR) org/xml/sax/$(DEPDIR) org/xml/sax/ext/$(DEPDIR) org/xml/sax/helpers/$(DEPDIR) sysdep/$(DEPDIR)\n+\t-rm -rf ./$(DEPDIR) gnu/awt/$(DEPDIR) gnu/awt/j2d/$(DEPDIR) gnu/awt/xlib/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/awt/$(DEPDIR) gnu/java/awt/image/$(DEPDIR) gnu/java/awt/peer/$(DEPDIR) gnu/java/awt/peer/gtk/$(DEPDIR) gnu/java/beans/$(DEPDIR) gnu/java/beans/editors/$(DEPDIR) gnu/java/beans/info/$(DEPDIR) gnu/java/io/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/reflect/$(DEPDIR) gnu/java/locale/$(DEPDIR) gnu/java/math/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/net/protocol/file/$(DEPDIR) gnu/java/net/protocol/gcjlib/$(DEPDIR) gnu/java/net/protocol/http/$(DEPDIR) gnu/java/net/protocol/jar/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/nio/charset/$(DEPDIR) gnu/java/rmi/$(DEPDIR) gnu/java/rmi/dgc/$(DEPDIR) gnu/java/rmi/registry/$(DEPDIR) gnu/java/rmi/rmic/$(DEPDIR) gnu/java/rmi/server/$(DEPDIR) gnu/java/security/$(DEPDIR) gnu/java/security/action/$(DEPDIR) gnu/java/security/der/$(DEPDIR) gnu/java/security/provider/$(DEPDIR) gnu/java/security/util/$(DEPDIR) gnu/java/security/x509/$(DEPDIR) gnu/java/text/$(DEPDIR) gnu/java/util/$(DEPDIR) gnu/java/util/prefs/$(DEPDIR) gnu/regexp/$(DEPDIR) java/applet/$(DEPDIR) java/awt/$(DEPDIR) java/awt/color/$(DEPDIR) java/awt/datatransfer/$(DEPDIR) java/awt/dnd/$(DEPDIR) java/awt/dnd/peer/$(DEPDIR) java/awt/event/$(DEPDIR) java/awt/font/$(DEPDIR) java/awt/geom/$(DEPDIR) java/awt/im/$(DEPDIR) java/awt/im/spi/$(DEPDIR) java/awt/image/$(DEPDIR) java/awt/image/renderable/$(DEPDIR) java/awt/peer/$(DEPDIR) java/awt/print/$(DEPDIR) java/beans/$(DEPDIR) java/beans/beancontext/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/math/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/nio/channels/spi/$(DEPDIR) java/nio/charset/$(DEPDIR) java/nio/charset/spi/$(DEPDIR) java/rmi/$(DEPDIR) java/rmi/activation/$(DEPDIR) java/rmi/dgc/$(DEPDIR) java/rmi/registry/$(DEPDIR) java/rmi/server/$(DEPDIR) java/security/$(DEPDIR) java/security/acl/$(DEPDIR) java/security/cert/$(DEPDIR) java/security/interfaces/$(DEPDIR) java/security/spec/$(DEPDIR) java/sql/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/jar/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/prefs/$(DEPDIR) java/util/regex/$(DEPDIR) java/util/zip/$(DEPDIR) javax/accessibility/$(DEPDIR) javax/crypto/$(DEPDIR) javax/crypto/interfaces/$(DEPDIR) javax/crypto/spec/$(DEPDIR) javax/imageio/$(DEPDIR) javax/imageio/event/$(DEPDIR) javax/imageio/metadata/$(DEPDIR) javax/imageio/spi/$(DEPDIR) javax/imageio/stream/$(DEPDIR) javax/naming/$(DEPDIR) javax/naming/directory/$(DEPDIR) javax/naming/event/$(DEPDIR) javax/naming/ldap/$(DEPDIR) javax/naming/spi/$(DEPDIR) javax/net/$(DEPDIR) javax/net/ssl/$(DEPDIR) javax/print/$(DEPDIR) javax/print/attribute/$(DEPDIR) javax/print/attribute/standard/$(DEPDIR) javax/print/event/$(DEPDIR) javax/security/auth/$(DEPDIR) javax/security/auth/callback/$(DEPDIR) javax/security/auth/login/$(DEPDIR) javax/security/auth/x500/$(DEPDIR) javax/security/cert/$(DEPDIR) javax/security/sasl/$(DEPDIR) javax/sql/$(DEPDIR) javax/swing/$(DEPDIR) javax/swing/border/$(DEPDIR) javax/swing/colorchooser/$(DEPDIR) javax/swing/event/$(DEPDIR) javax/swing/filechooser/$(DEPDIR) javax/swing/plaf/$(DEPDIR) javax/swing/plaf/basic/$(DEPDIR) javax/swing/plaf/metal/$(DEPDIR) javax/swing/table/$(DEPDIR) javax/swing/text/$(DEPDIR) javax/swing/text/html/$(DEPDIR) javax/swing/text/html/parser/$(DEPDIR) javax/swing/tree/$(DEPDIR) javax/swing/undo/$(DEPDIR) javax/transaction/$(DEPDIR) javax/transaction/xa/$(DEPDIR) jni/classpath/$(DEPDIR) jni/gtk-peer/$(DEPDIR) org/ietf/jgss/$(DEPDIR) org/w3c/dom/$(DEPDIR) org/w3c/dom/ranges/$(DEPDIR) org/w3c/dom/traversal/$(DEPDIR) org/xml/sax/$(DEPDIR) org/xml/sax/ext/$(DEPDIR) org/xml/sax/helpers/$(DEPDIR) sysdep/$(DEPDIR)\n \t-rm -f Makefile\n maintainer-clean-am: distclean-am maintainer-clean-generic\n "}, {"sha": "587a3d4b246460611fdbb540ac874076bb03e45b", "filename": "libjava/javax/imageio/IIOImage.java", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FIIOImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FIIOImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2FIIOImage.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,138 @@\n+/* IIOImage.java --\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio;\n+\n+import java.awt.image.BufferedImage;\n+import java.awt.image.Raster;\n+import java.awt.image.RenderedImage;\n+import java.util.List;\n+\n+import javax.imageio.metadata.IIOMetadata;\n+\n+public class IIOImage\n+{\n+  protected RenderedImage image;\n+  protected IIOMetadata metadata;\n+  protected Raster raster;\n+  protected List thumbnails;\n+  \n+  public IIOImage (Raster raster, List thumbnails, IIOMetadata metadata)\n+  {\n+    if (raster == null)\n+      throw new IllegalArgumentException (\"raster may not be null\");\n+    \n+    this.raster = raster;\n+    this.thumbnails = thumbnails;\n+    this.metadata = metadata;\n+  }\n+  \n+  public IIOImage (RenderedImage image, List thumbnails, IIOMetadata metadata)\n+  {\n+    if (image == null)\n+      throw new IllegalArgumentException (\"image may not be null\");\n+    \n+    this.image = image;\n+    this.thumbnails = thumbnails;\n+    this.metadata = metadata;\n+  }\n+\n+  public IIOMetadata getMetadata()\n+  {\n+    return metadata;\n+  }\n+\n+  public int getNumThumbnails()\n+  {\n+    return thumbnails.size();\n+  }\n+\n+  public Raster getRaster()\n+  {\n+    return raster;\n+  }\n+\n+  public RenderedImage getRenderedImage()\n+  {\n+    return image;\n+  }\n+\n+  public BufferedImage getThumbnail (int index)\n+  {\n+    return (BufferedImage) thumbnails.get (index);\n+  }\n+\n+  public List getThumbnails()\n+  {\n+    return thumbnails;\n+  }\n+\n+  public boolean hasRaster()\n+  {\n+    return raster != null;\n+  }\n+\n+  public void setMetadata (IIOMetadata metadata)\n+  {\n+    this.metadata = metadata;\n+  }\n+\n+  public void setRaster (Raster raster)\n+  {\n+    if (raster == null)\n+      throw new IllegalArgumentException (\"raster may not be null\");\n+    \n+    this.image = null;\n+    this.raster = raster;\n+  }\n+\n+  public void setRenderedImage (RenderedImage image)\n+  {\n+    if (image == null)\n+      throw new IllegalArgumentException (\"image may not be null\");\n+\n+    this.image = image;\n+    this.raster = null;\n+  }\n+\n+  public void setThumbnails (List thumbnails)\n+  {\n+    this.thumbnails = thumbnails;\n+  }\n+  \n+} // class IIOParam"}, {"sha": "bbab1cf79f67b75f8d381fd90bf844e65ea6a1c7", "filename": "libjava/javax/imageio/IIOParam.java", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FIIOParam.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FIIOParam.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2FIIOParam.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,157 @@\n+/* IIOParam.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio;\n+\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public abstract class IIOParam\n+{\n+  protected IIOParamController controller;\n+  protected IIOParamController defaultController;\n+  protected Point destinationOffset = new Point(0, 0);\n+  protected ImageTypeSpecifier destinationType;\n+  protected int[] sourceBands;\n+  protected Rectangle sourceRegion;\n+  protected int sourceXSubsampling;\n+  protected int sourceYSubsampling;\n+  protected int subsamplingXOffset;\n+  protected int subsamplingYOffset;\n+\n+  /**\n+   * Initializes an <code>IIOParam</code> object.\n+   */\n+  protected IIOParam()\n+  {\n+    // Do nothing here.\n+  }\n+\n+  public boolean activateController()\n+  {\n+    if (controller == null)\n+      return false;\n+    \n+    return controller.activate(this);\n+  }\n+  \n+  public IIOParamController getController()\n+  {\n+    return controller;\n+  }\n+\n+  public IIOParamController getDefaultController()\n+  {\n+    return defaultController;\n+  }\n+\n+  public Point getDestinationOffset()\n+  {\n+    return destinationOffset;\n+  }\n+\n+  public ImageTypeSpecifier getDestinationType()\n+  {\n+    return destinationType;\n+  }\n+\n+  public int[] getSourceBands()\n+  {\n+    return sourceBands;\n+  }\n+\n+  public Rectangle getSourceRegion()\n+  {\n+    return sourceRegion;\n+  }\n+\n+  public int getSourceXSubsampling()\n+  {\n+    return sourceXSubsampling;\n+  }\n+  \n+  public int getSourceYSubsampling()\n+  {\n+    return sourceYSubsampling;\n+  }\n+\n+  public int getSubsamplingXOffset()\n+  {\n+    return subsamplingXOffset;\n+  }\n+  \n+  public int getSubsamplingYOffset()\n+  {\n+    return subsamplingYOffset;\n+  }\n+\n+  public boolean hasController()\n+  {\n+    return getController() != null;\n+  }\n+\n+  public void setController(IIOParamController controller)\n+  {\n+    this.controller = controller;\n+  }\n+\n+  public void setDestinationOffset(Point destinationOffset)\n+  {\n+    if (destinationOffset == null)\n+      throw new IllegalArgumentException(\"destinationOffset is null\");\n+\n+    this.destinationOffset = destinationOffset;\n+  }\n+\n+  public void setSourceRegion(Rectangle sourceRegion)\n+  {\n+    if (sourceRegion != null\n+\t&& (sourceRegion.x < 0\n+\t    || sourceRegion.y < 0\n+\t    || sourceRegion.width <= 0\n+\t    || sourceRegion.height <= 0))\n+      throw new IllegalArgumentException(\"illegal source region\");\n+    \n+    // FIXME: Throw IllegalStateException.\n+\n+    this.sourceRegion = sourceRegion;\n+  }\n+}"}, {"sha": "0568c19a25f13e3ba1afa206c3dd4a57893d671a", "filename": "libjava/javax/imageio/IIOParamController.java", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FIIOParamController.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FIIOParamController.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2FIIOParamController.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,58 @@\n+/* IIOParamController.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public interface IIOParamController\n+{\n+  /**\n+   * Activates the controller.\n+   *\n+   * @param param the <code>IIOParam</code> to be modified\n+   *\n+   * @return true if the <code>IIOParam</code> has been modified,\n+   * false otherwise\n+   * \n+   * @exception IllegalArgumentException if param is null or is not an instance\n+   * of the correct class\n+   */\n+  boolean activate(IIOParam param);\n+}"}, {"sha": "5cc7c926da900a6d52918c30ca5ff024afb30a52", "filename": "libjava/javax/imageio/ImageIO.java", "status": "added", "additions": 494, "deletions": 0, "changes": 494, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageIO.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageIO.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2FImageIO.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,494 @@\n+/* ImageIO.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import javax.imageio.spi.IIORegistry;\n+import javax.imageio.spi.ImageReaderSpi;\n+import javax.imageio.spi.ImageWriterSpi;\n+import javax.imageio.spi.ServiceRegistry;\n+\n+public final class ImageIO\n+{\n+  private static final class ReaderFormatFilter implements ServiceRegistry.Filter\n+  {\n+    private String formatName;\n+\n+    public ReaderFormatFilter(String formatName)\n+    {\n+      this.formatName = formatName;\n+    }\n+\n+    public boolean filter (Object provider)\n+    {\n+      if (provider instanceof ImageReaderSpi)\n+        {\n+          ImageWriterSpi spi = (ImageWriterSpi) provider;\n+          String[] formatNames = spi.getFormatNames();\n+\n+          for (int i = formatNames.length - 1; i >= 0; --i)\n+            if (formatName.equals(formatNames[i]))\n+              return true;\n+        }\n+\n+      return false;\n+    }\n+  }\n+\n+  private static final class ReaderMIMETypeFilter implements ServiceRegistry.Filter\n+  {\n+    private String MIMEType;\n+\n+    public ReaderMIMETypeFilter(String MIMEType)\n+    {\n+      this.MIMEType = MIMEType;\n+    }\n+\n+    public boolean filter(Object provider)\n+    {\n+      if (provider instanceof ImageReaderSpi)\n+        {\n+          ImageReaderSpi spi = (ImageReaderSpi) provider;\n+          String[] mimetypes = spi.getMIMETypes();\n+\n+          for (int i = mimetypes.length - 1; i >= 0; --i)\n+            if (MIMEType.equals(mimetypes[i]))\n+              return true;\n+        }\n+\n+      return false;\n+    }\n+  }\n+  \n+  private static final class ReaderSuffixFilter implements ServiceRegistry.Filter\n+  {\n+    private String fileSuffix;\n+\n+    public ReaderSuffixFilter(String fileSuffix)\n+    {\n+      this.fileSuffix = fileSuffix;\n+    }\n+\n+    public boolean filter(Object provider)\n+    {\n+      if (provider instanceof ImageReaderSpi)\n+        {\n+          ImageReaderSpi spi = (ImageReaderSpi) provider;\n+          String[] suffixes = spi.getFileSuffixes();\n+\n+          for (int i = suffixes.length - 1; i >= 0; --i)\n+            if (fileSuffix.equals(suffixes[i]))\n+              return true;\n+        }\n+\n+      return false;\n+    }\n+  }\n+  \n+  private static final class WriterFormatFilter implements ServiceRegistry.Filter\n+  {\n+    private String formatName;\n+\n+    public WriterFormatFilter(String formatName)\n+    {\n+      this.formatName = formatName;\n+    }\n+\n+    public boolean filter(Object provider)\n+    {\n+      if (provider instanceof ImageReaderSpi)\n+\t{\n+\t  ImageReaderSpi spi = (ImageReaderSpi) provider;\n+\t  String[] formatNames = spi.getFormatNames();\n+\t  \n+\t  for (int i = formatNames.length - 1; i >= 0; --i)\n+\t    if (formatName.equals(formatNames[i]))\n+\t      return true;\n+\t}\n+\n+      return false;\n+    }\n+  }\n+\n+  private static final class WriterMIMETypeFilter implements ServiceRegistry.Filter\n+  {\n+    private String MIMEType;\n+\n+    public WriterMIMETypeFilter(String MIMEType)\n+    {\n+      this.MIMEType = MIMEType;\n+    }\n+\n+    public boolean filter(Object provider)\n+    {\n+      if (provider instanceof ImageReaderSpi)\n+        {\n+          ImageWriterSpi spi = (ImageWriterSpi) provider;\n+          String[] mimetypes = spi.getMIMETypes();\n+\n+          for (int i = mimetypes.length - 1; i >= 0; --i)\n+            if (MIMEType.equals(mimetypes[i]))\n+              return true;\n+        }\n+\n+      return false;\n+    }\n+  }\n+  \n+  private static final class WriterSuffixFilter implements ServiceRegistry.Filter\n+  {\n+    private String fileSuffix;\n+\n+    public WriterSuffixFilter(String fileSuffix)\n+    {\n+      this.fileSuffix = fileSuffix;\n+    }\n+\n+    public boolean filter(Object provider)\n+    {\n+      if (provider instanceof ImageReaderSpi)\n+        {\n+          ImageWriterSpi spi = (ImageWriterSpi) provider;\n+          String[] suffixes = spi.getFileSuffixes();\n+\n+          for (int i = suffixes.length - 1; i >= 0; --i)\n+            if (fileSuffix.equals(suffixes[i]))\n+              return true;\n+        }\n+\n+      return false;\n+    }\n+  }\n+\n+  private static final class ImageReaderIterator implements Iterator\n+  {\n+    Iterator it;\n+    \n+    public ImageReaderIterator(Iterator it)\n+    {\n+      this.it = it;\n+    }\n+\n+    public boolean hasNext()\n+    {\n+      return it.hasNext();\n+    }\n+\n+    public Object next()\n+    {\n+      try\n+        {\n+          return ((ImageReaderSpi) it.next()).createReaderInstance();\n+        }\n+      catch (IOException e)\n+        {\n+          return null;\n+        }\n+    }\n+\n+    public void remove()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n+  }\n+\n+  private static final class ImageWriterIterator implements Iterator\n+  {\n+    Iterator it;\n+    \n+    public ImageWriterIterator(Iterator it)\n+    {\n+      this.it = it;\n+    }\n+\n+    public boolean hasNext()\n+    {\n+      return it.hasNext();\n+    }\n+\n+    public Object next()\n+    {\n+      try\n+        {\n+          return ((ImageWriterSpi) it.next()).createWriterInstance();\n+        }\n+      catch (IOException e)\n+        {\n+          return null;\n+        }\n+    }\n+\n+    public void remove()\n+    {\n+      throw new UnsupportedOperationException();\n+    }\n+  }\n+  \n+  private static File cacheDirectory;\n+  private static boolean useCache = true;\n+\n+  private static Iterator getReadersByFilter(Class type,\n+                                             ServiceRegistry.Filter filter)\n+  {\n+    try\n+      {\n+        Iterator it = getRegistry().getServiceProviders(type, filter, true);\n+        return new ImageReaderIterator(it);\n+      }\n+    catch (IllegalArgumentException e)\n+      {\n+        return Collections.EMPTY_SET.iterator();\n+      }\n+  }\n+  \n+  private static Iterator getWritersByFilter(Class type,\n+\t\t\t\t\t     ServiceRegistry.Filter filter)\n+  {\n+    try\n+      {\n+        Iterator it = getRegistry().getServiceProviders(type, filter, true);\n+        return new ImageWriterIterator(it);\n+      }\n+    catch (IllegalArgumentException e)\n+      {\n+        return Collections.EMPTY_SET.iterator();\n+      }\n+  }\n+\n+  public static File getCacheDirectory()\n+  {\n+    return cacheDirectory;\n+  }\n+\n+  public static Iterator getImageReadersByFormatName(String formatName)\n+  {\n+    if (formatName == null)\n+      throw new IllegalArgumentException(\"formatName may not be null\");\n+\n+    return getReadersByFilter(ImageReaderSpi.class,\n+                              new ReaderFormatFilter(formatName));\n+  }\n+\n+  public static Iterator getImageReadersByMIMEType(String MIMEType)\n+  {\n+    if (MIMEType == null)\n+      throw new IllegalArgumentException(\"MIMEType may not be null\");\n+\n+    return getReadersByFilter(ImageReaderSpi.class,\n+                              new ReaderMIMETypeFilter(MIMEType));\n+  }\n+\n+  public static Iterator getImageReadersBySuffix(String fileSuffix)\n+  {\n+    if (fileSuffix == null)\n+      throw new IllegalArgumentException(\"formatName may not be null\");\n+    \n+    return getReadersByFilter(ImageReaderSpi.class,\n+                              new ReaderSuffixFilter(fileSuffix));\n+  }\n+\n+  public static Iterator getImageWritersByFormatName(String formatName)\n+  {\n+    if (formatName == null)\n+      throw new IllegalArgumentException(\"formatName may not be null\");\n+    \n+    return getWritersByFilter(ImageWriterSpi.class,\n+                              new WriterFormatFilter(formatName));\n+  }\n+\n+  public static Iterator getImageWritersByMIMEType(String MIMEType)\n+  {\n+    if (MIMEType == null)\n+      throw new IllegalArgumentException(\"MIMEType may not be null\");\n+    \n+    return getWritersByFilter(ImageWriterSpi.class,\n+                              new WriterMIMETypeFilter(MIMEType));\n+  }\n+\n+  public static Iterator getImageWritersBySuffix(String fileSuffix)\n+  {\n+    if (fileSuffix == null)\n+      throw new IllegalArgumentException(\"fileSuffix may not be null\");\n+    \n+    return getWritersByFilter(ImageWriterSpi.class,\n+                              new WriterSuffixFilter(fileSuffix));\n+  }\n+\n+  public static String[] getReaderFormatNames()\n+  {\n+    try\n+      {\n+        Iterator it =\n+\t  getRegistry().getServiceProviders(ImageReaderSpi.class, true);\n+\tArrayList result = new ArrayList();\n+\n+\twhile (it.hasNext())\n+\t  {\n+\t    ImageReaderSpi spi = (ImageReaderSpi) it.next();\n+\t    String[] names = spi.getFormatNames();\n+\n+\t    for (int i = names.length - 1; i >= 0; --i)\n+\t      result.add(names[i]);\n+\t  }\n+\n+\treturn (String[]) result.toArray(new String[result.size()]);\n+      }\n+    catch (IllegalArgumentException e)\n+      {\n+        return new String[0];\n+      }\n+  }\n+\n+  public static String[] getReaderMIMETypes()\n+  {\n+    try\n+      {\n+        Iterator it =\n+\t  getRegistry().getServiceProviders(ImageReaderSpi.class, true);\n+\tArrayList result = new ArrayList();\n+\n+\twhile (it.hasNext())\n+\t  {\n+\t    ImageReaderSpi spi = (ImageReaderSpi) it.next();\n+\t    String[] names = spi.getMIMETypes();\n+\n+\t    for (int i = names.length - 1; i >= 0; --i)\n+\t      result.add(names[i]);\n+\t  }\n+\n+\treturn (String[]) result.toArray(new String[result.size()]);\n+      }\n+    catch (IllegalArgumentException e)\n+      {\n+        return new String[0];\n+      }\n+  }\n+\n+  private static IIORegistry getRegistry()\n+  {\n+    return IIORegistry.getDefaultInstance();\n+  }\n+\n+  public static boolean getUseCache()\n+  {\n+    return useCache;\n+  }\n+\n+  public static String[] getWriterFormatNames()\n+  {\n+    try\n+      {\n+        Iterator it =\n+\t  getRegistry().getServiceProviders(ImageWriterSpi.class, true);\n+\tArrayList result = new ArrayList();\n+\n+\twhile (it.hasNext())\n+\t  {\n+\t    ImageWriterSpi spi = (ImageWriterSpi) it.next();\n+\t    String[] names = spi.getFormatNames();\n+\n+\t    for (int i = names.length - 1; i >= 0; --i)\n+\t      result.add(names[i]);\n+\t  }\n+\n+\treturn (String[]) result.toArray(new String[result.size()]);\n+      }\n+    catch (IllegalArgumentException e)\n+      {\n+        return new String[0];\n+      }\n+  }\n+\n+  public static String[] getWriterMIMETypes()\n+  {\n+    try\n+      {\n+        Iterator it =\n+\t  getRegistry().getServiceProviders(ImageWriterSpi.class, true);\n+\tArrayList result = new ArrayList();\n+\n+\twhile (it.hasNext())\n+\t  {\n+\t    ImageWriterSpi spi = (ImageWriterSpi) it.next();\n+\t    String[] names = spi.getMIMETypes();\n+\n+\t    for (int i = names.length - 1; i >= 0; --i)\n+\t      result.add(names[i]);\n+\t  }\n+\n+\treturn (String[]) result.toArray(new String[result.size()]);\n+      }\n+    catch (IllegalArgumentException e)\n+      {\n+        return new String[0];\n+      }\n+  }\n+  \n+  /**\n+   * Rescans the application classpath for ImageIO service providers\n+   * and registers them.\n+   */\n+  public static void scanForPlugins()\n+  {\n+    IIORegistry.getDefaultInstance().registerApplicationClasspathSpis();\n+  }\n+\n+  public static void setCacheDirectory(File cacheDirectory)\n+  {\n+    if (cacheDirectory != null)\n+      {\n+        if (!cacheDirectory.isDirectory())\n+          throw new IllegalArgumentException(\"cacheDirectory must be a directory\");\n+\n+        cacheDirectory.canWrite();\n+      }\n+    \n+    ImageIO.cacheDirectory = cacheDirectory;\n+  }\n+\n+  public static void setUseCache(boolean useCache)\n+  {\n+    ImageIO.useCache = useCache;\n+  }\n+}"}, {"sha": "e5414bda17e4f23cd585cbb90345550274e8cc19", "filename": "libjava/javax/imageio/ImageReadParam.java", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageReadParam.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageReadParam.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2FImageReadParam.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,110 @@\n+/* ImageReadParam.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio;\n+\n+import java.awt.Dimension;\n+import java.awt.image.BufferedImage;\n+\n+/**\n+ * @author Michel Koch (konqueror@gmx.de)\n+ */\n+public class ImageReadParam extends IIOParam\n+{\n+  protected boolean canSetSourceRenderSize;\n+  protected BufferedImage destination;\n+  protected int[] destinationBands;\n+  protected int minProgressivePass;\n+  protected int numProgressivePasses = Integer.MAX_VALUE;\n+  protected Dimension sourceRenderSize;\n+\n+  public ImageReadParam()\n+  {\n+  }\n+\n+  public boolean canSetSourceRenderSize()\n+  {\n+    return canSetSourceRenderSize;\n+  }\n+\n+  public BufferedImage getDestination()\n+  {\n+    return destination;\n+  }\n+\n+  public int[] getDestinationBands()\n+  {\n+    return destinationBands;\n+  }\n+\n+  public int getSourceMaxProgressivePass()\n+  {\n+    if (getSourceNumProgressivePasses() == Integer.MAX_VALUE)\n+      return Integer.MAX_VALUE;\n+\n+    return getSourceMinProgressivePass() + getSourceNumProgressivePasses() - 1;\n+  }\n+\n+  public int getSourceMinProgressivePass()\n+  {\n+    return minProgressivePass;\n+  }\n+\n+  public int getSourceNumProgressivePasses()\n+  {\n+    return numProgressivePasses;\n+  }\n+\n+  public Dimension getSourceRenderSize()\n+  {\n+    return sourceRenderSize;\n+  }\n+  \n+  public void setSourceRenderSize(Dimension size)\n+    throws UnsupportedOperationException\n+  {\n+    if (! canSetSourceRenderSize())\n+      throw new UnsupportedOperationException\n+\t(\"setting source render size not supported\");\n+    \n+    if (size.width <= 0 || size.height <= 0)\n+      throw new IllegalArgumentException(\"negative dimension not allowed\");\n+    \n+    sourceRenderSize = size;\n+  }\n+}"}, {"sha": "91cb53cd8b4c20468941f6d58b8366fc80d8be5d", "filename": "libjava/javax/imageio/ImageReader.java", "status": "modified", "additions": 477, "deletions": 4, "changes": 481, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2FImageReader.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -1,5 +1,5 @@\n /* ImageReader.java -- Decodes raster images.\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,9 +38,482 @@\n \n package javax.imageio;\n \n+import java.awt.image.BufferedImage;\n+import java.awt.image.Raster;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.imageio.event.IIOReadProgressListener;\n+import javax.imageio.event.IIOReadUpdateListener;\n+import javax.imageio.event.IIOReadWarningListener;\n+import javax.imageio.metadata.IIOMetadata;\n+import javax.imageio.spi.ImageReaderSpi;\n+\n public abstract class ImageReader\n {\n-  // FIXME: Incomplete. This class is merely present in order to allow\n-  // compilation of the javax.imageio.spi package, for which GNU\n-  // Classpath does provide an implementation.\n+  private boolean aborted;\n+  \n+  protected Locale[] availableLocales;\n+  protected boolean ignoreMetadata;\n+  protected Object input;\n+  protected Locale locale;\n+  protected int minIndex;\n+  protected ImageReaderSpi originatingProvider;\n+  protected List progressListeners;\n+  protected boolean seekForwardOnly;\n+  protected List updateListeners = new ArrayList();\n+  protected List warningListeners = new ArrayList();\n+  protected List warningLocales = new ArrayList();\n+\n+  protected ImageReader(ImageReaderSpi originatingProvider)\n+  {\n+    this.originatingProvider = originatingProvider;\n+  }\n+\n+  public void abort()\n+  {\n+    aborted = true;\n+  }\n+\n+  protected boolean abortRequested()\n+  {\n+    return aborted;\n+  }\n+\n+  public void addIIOReadProgressListener(IIOReadProgressListener listener)\n+  {\n+    if (listener == null)\n+      return;\n+    \n+    progressListeners.add(listener);    \n+  }\n+\n+  public void addIIOReadUpdateListener(IIOReadUpdateListener listener)\n+  {\n+    if (listener == null)\n+      return;\n+    \n+    updateListeners.add(listener);    \n+  }\n+  \n+  public void addIIOReadWarningListener(IIOReadWarningListener listener)\n+  {\n+    if (listener == null)\n+      return;\n+    \n+    warningListeners.add(listener);    \n+  }\n+\n+  public boolean canReadRaster()\n+  {\n+    return false;\n+  }\n+\n+  protected void clearAbortRequest()\n+  {\n+    aborted = false;\n+  }\n+  \n+  public void dispose()\n+  {\n+    // The default implementation does nothing.\n+  }\n+  \n+  public float getAspectRatio(int imageIndex)\n+    throws IOException\n+  {\n+    return (float) (getWidth(imageIndex) / getHeight(imageIndex));\n+  }\n+\n+  public Locale[] getAvailableLocales()\n+  {\n+    if (availableLocales == null)\n+      return null;\n+    \n+    return (Locale[]) availableLocales.clone();\n+  }\n+\n+  public ImageReadParam getDefaultReadParam()\n+  {\n+    return new ImageReadParam();\n+  }\n+\n+  public String getFormatName()\n+    throws IOException\n+  {\n+    return originatingProvider.getFormatNames()[0];\n+  }\n+\n+  public abstract int getHeight(int imageIndex)\n+    throws IOException;\n+\n+  public abstract IIOMetadata getImageMetadata(int imageIndex)\n+    throws IOException;\n+\n+  public abstract Iterator getImageTypes(int imageIndex)\n+    throws IOException;\n+\n+  public Object getInput()\n+  {\n+    return input;\n+  }\n+\n+  public Locale getLocale()\n+  {\n+    return locale;\n+  }\n+\n+  public abstract int getNumImages(boolean allowSearch)\n+    throws IOException;\n+\n+  public int getNumThumbnails(int imageIndex)\n+    throws IOException\n+  {\n+    return 0;\n+  }\n+\n+  public ImageReaderSpi getOriginatingProvider()\n+  {\n+    return originatingProvider;\n+  }\n+\n+  public abstract IIOMetadata getStreamMetadata()\n+    throws IOException;\n+\n+  public int getThumbnailHeight(int imageIndex, int thumbnailIndex)\n+    throws IOException\n+  {\n+    return readThumbnail(imageIndex, thumbnailIndex).getHeight();\n+  }\n+\n+  public int getThumbnailWidth(int imageIndex, int thumbnailIndex)\n+    throws IOException\n+  {\n+    return readThumbnail(imageIndex, thumbnailIndex).getWidth();\n+  }\n+\n+  public int getTileGridXOffset(int imageIndex)\n+    throws IOException\n+  {\n+    return 0;\n+  }\n+\n+  public int getTileGridYOffset(int imageIndex)\n+    throws IOException\n+  {\n+    return 0;\n+  }\n+\n+  public int getTileHeight(int imageIndex)\n+    throws IOException\n+  {\n+    return getHeight(imageIndex);\n+  }\n+\n+  public int getTileWidth(int imageIndex)\n+    throws IOException\n+  {\n+    return getWidth(imageIndex);\n+  }\n+\n+  public abstract int getWidth(int imageIndex)\n+    throws IOException;\n+\n+  public boolean hasThumbnails(int imageIndex)\n+    throws IOException\n+  {\n+    return getNumThumbnails(imageIndex) > 0;\n+  }\n+\n+  public boolean isIgnoringMetadata()\n+  {\n+    return ignoreMetadata;\n+  }\n+\n+  public boolean isImageTiled(int imageIndex)\n+    throws IOException\n+  {\n+    return false;\n+  }\n+\n+  public boolean isRandomAccessEasy(int imageIndex)\n+    throws IOException\n+  {\n+    return false;\n+  }\n+\n+  public boolean isSeekForwardOnly()\n+  {\n+    return seekForwardOnly;\n+  }\n+\n+  protected void processImageComplete()\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadProgressListener listener = (IIOReadProgressListener) it.next();\n+\tlistener.imageComplete (this);\n+      }\n+  }\n+\n+  protected void processImageProgress(float percentageDone)\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadProgressListener listener = (IIOReadProgressListener) it.next();\n+\tlistener.imageProgress(this, percentageDone);\n+      }\n+  }\n+\n+  protected void processImageStarted(int imageIndex)\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadProgressListener listener = (IIOReadProgressListener) it.next();\n+\tlistener.imageStarted(this, imageIndex);\n+      }\n+  }\n+\n+  protected void processImageUpdate(BufferedImage image, int minX, int minY,\n+\t\t\t\t    int width, int height, int periodX,\n+\t\t\t\t    int periodY, int[] bands)\n+  {\n+    Iterator it = updateListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadUpdateListener listener = (IIOReadUpdateListener) it.next();\n+\tlistener.imageUpdate(this, image, minX, minY, width, height, periodX,\n+\t\t\t     periodY, bands);\n+      }\n+  }\n+\n+  protected void processPassComplete(BufferedImage image)\n+  {\n+    Iterator it = updateListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadUpdateListener listener = (IIOReadUpdateListener) it.next();\n+\tlistener.passComplete(this, image);\n+      }\n+  }\n+\n+  protected void processPassStarted(BufferedImage image, int pass, int minPass,\n+\t\t\t\t    int maxPass, int minX, int minY,\n+\t\t\t\t    int periodX, int periodY, int[] bands)\n+  {\n+    Iterator it = updateListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadUpdateListener listener = (IIOReadUpdateListener) it.next();\n+\tlistener.passStarted(this, image, pass, minPass, maxPass, minX, minY,\n+\t\t\t     periodX, periodY, bands);\n+      }\n+  }\n+\n+  protected void processReadAborted()\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadProgressListener listener = (IIOReadProgressListener) it.next();\n+\tlistener.readAborted(this);\n+      }\n+  }\n+\n+  protected void processSequenceComplete()\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadProgressListener listener = (IIOReadProgressListener) it.next();\n+\tlistener.sequenceComplete(this);\n+      }\n+  }\n+\n+  protected void processSequenceStarted(int minIndex)\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadProgressListener listener = (IIOReadProgressListener) it.next();\n+\tlistener.sequenceStarted(this, minIndex);\n+      }\n+  }\n+\n+  protected void processThumbnailComplete()\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadProgressListener listener = (IIOReadProgressListener) it.next();\n+\tlistener.thumbnailComplete(this);\n+      }\n+  }\n+\n+  protected void processThumbnailPassComplete(BufferedImage thumbnail)\n+  {\n+    Iterator it = updateListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadUpdateListener listener = (IIOReadUpdateListener) it.next();\n+\tlistener.thumbnailPassComplete(this, thumbnail);\n+      }\n+  }\n+\n+  protected void processThumbnailPassStarted(BufferedImage thumbnail, int pass,\n+\t\t\t\t\t     int minPass, int maxPass, int minX,\n+\t\t\t\t\t     int minY, int periodX, int periodY,\n+\t\t\t\t\t     int[] bands)\n+  {\n+    Iterator it = updateListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadUpdateListener listener = (IIOReadUpdateListener) it.next();\n+\tlistener.thumbnailPassStarted(this, thumbnail, pass, minPass, maxPass,\n+\t\t\t\t      minX, minY, periodX, periodY, bands);\n+      }\n+  }\n+  \n+  protected void processThumbnailProgress(float percentageDone)\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadProgressListener listener = (IIOReadProgressListener) it.next();\n+\tlistener.thumbnailProgress(this, percentageDone);\n+      }\n+  }\n+\n+  protected void processThumbnailStarted(int imageIndex, int thumbnailIndex)\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadProgressListener listener = (IIOReadProgressListener) it.next();\n+\tlistener.thumbnailStarted(this, imageIndex, thumbnailIndex);\n+      }\n+  }\n+\n+  protected void processThumbnailUpdate(BufferedImage image, int minX, int minY,\n+\t\t\t\t\tint width, int height, int periodX,\n+\t\t\t\t\tint periodY, int[] bands)\n+  {\n+    Iterator it = updateListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadUpdateListener listener = (IIOReadUpdateListener) it.next();\n+\tlistener.thumbnailUpdate(this, image, minX, minY, width, height,\n+\t\t\t\t periodX, periodY, bands);\n+      }\n+  }\n+\n+  protected void processWarningOccurred(String warning)\n+  {\n+    Iterator it = warningListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOReadWarningListener listener = (IIOReadWarningListener) it.next();\n+\tlistener.warningOccurred(this, warning);\n+      }\n+  }\n+\n+  public abstract BufferedImage read(int imageIndex, ImageReadParam param)\n+    throws IOException;\n+\n+  public boolean readerSupportsThumbnails()\n+  {\n+    return false;\n+  }\n+\n+  public Raster readRaster(int imageIndex, ImageReadParam param)\n+    throws IOException\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public BufferedImage readThumbnail(int imageIndex, int thumbnailIndex)\n+    throws IOException\n+  {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public void removeAllIIOReadProgressListeners()\n+  {\n+    progressListeners.clear();\n+  }\n+\n+  public void removeAllIIOReadUpdateListeners()\n+  {\n+    updateListeners.clear();\n+  }\n+\n+  public void removeAllIIOReadWarningListeners()\n+  {\n+    warningListeners.clear();\n+  }\n+  \n+  public void removeIIOReadProgressListener(IIOReadProgressListener listener) \n+  {\n+    if (listener == null)\n+      return;\n+ \n+    progressListeners.remove(listener);\n+  }\n+  \n+  public void removeIIOReadUpdateListener(IIOReadUpdateListener listener) \n+  {\n+    if (listener == null)\n+      return;\n+    \n+    updateListeners.remove(listener);\n+  }\n+  \n+  public void removeIIOReadWarningListener(IIOReadWarningListener listener)\n+  {\n+    if (listener == null)\n+      return;\n+    \n+    warningListeners.remove(listener);\n+  }\n+  \n+  public void setLocale(Locale locale)\n+  {\n+    if (locale != null)\n+      {\n+\t// Check if its a valid locale.\n+\tboolean found = false;\n+\n+\tif (availableLocales != null)\n+\t  for (int i = availableLocales.length - 1; i >= 0; --i)\n+\t    if (availableLocales[i].equals(locale))\n+\t      found = true;\n+\n+\tif (! found)\n+\t  throw new IllegalArgumentException(\"looale not available\");\n+      }\n+\n+    this.locale = locale;\n+  }\n }"}, {"sha": "7b2012ba5fa0b1ba1840b0506d23b59d7dd957e3", "filename": "libjava/javax/imageio/ImageTranscoder.java", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageTranscoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageTranscoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2FImageTranscoder.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -1,5 +1,5 @@\n /* ImageTranscoder.java -- Image metadata transcoder.\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,9 +38,17 @@\n \n package javax.imageio;\n \n+import javax.imageio.metadata.IIOMetadata;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n public interface ImageTranscoder\n {\n-  // FIXME: Incomplete. This interface is merely present in order to\n-  // allow compilation of the javax.imageio.spi package, for which GNU\n-  // Classpath does provide an implementation.\n+  IIOMetadata convertImageMetadata(IIOMetadata inData,\n+\t\t                   ImageTypeSpecifier imageType,\n+\t\t\t\t   ImageWriteParam param);\n+\n+  IIOMetadata convertStreamMetadata(IIOMetadata inData,\n+\t\t\t\t    ImageWriteParam param);\n }"}, {"sha": "f5d9ee278880d3808ba0ba0d192976521b1e3354", "filename": "libjava/javax/imageio/ImageTypeSpecifier.java", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageTypeSpecifier.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageTypeSpecifier.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2FImageTypeSpecifier.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,94 @@\n+/* ImageTypeSpecifier.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio;\n+\n+import java.awt.image.ColorModel;\n+import java.awt.image.RenderedImage;\n+import java.awt.image.SampleModel;\n+\n+public class ImageTypeSpecifier\n+{\n+  protected ColorModel colorModel;\n+  protected SampleModel sampleModel;\n+\n+  public ImageTypeSpecifier(ColorModel colorModel, SampleModel sampleModel)\n+  {\n+    if (colorModel == null)\n+      throw new IllegalArgumentException(\"colorModel may not be null\");\n+\n+    if (sampleModel == null)\n+      throw new IllegalArgumentException(\"sampleModel may not be null\");\n+\n+    if (!colorModel.isCompatibleSampleModel(sampleModel))\n+      throw new IllegalArgumentException\n+        (\"sample Model not compatible with colorModel\");\n+    \n+    this.colorModel = colorModel;\n+    this.sampleModel = sampleModel;\n+  }\n+\n+  public ImageTypeSpecifier(RenderedImage image)\n+  {\n+    if (image == null)\n+      throw new IllegalArgumentException(\"image may not be null\");\n+    \n+    this.colorModel = image.getColorModel();\n+    this.sampleModel = image.getSampleModel();\n+  }\n+\n+  public ColorModel getColorModel()\n+  {\n+    return colorModel;\n+  }\n+\n+  public int getNumBands()\n+  {\n+    return sampleModel.getNumBands();\n+  }\n+\n+  public int getNumComponents()\n+  {\n+    return colorModel.getNumComponents();\n+  }\n+\n+  public SampleModel getSampleModel()\n+  {\n+    return sampleModel;\n+  }\n+}"}, {"sha": "0eb9073dcb6535fc161bf1f920fcb70fc19a6dab", "filename": "libjava/javax/imageio/ImageWriteParam.java", "status": "added", "additions": 398, "deletions": 0, "changes": 398, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageWriteParam.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageWriteParam.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2FImageWriteParam.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,398 @@\n+/* ImageWriteParam.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio;\n+\n+import java.awt.Dimension;\n+import java.util.Locale;\n+\n+public class ImageWriteParam extends IIOParam\n+{\n+  public static final int MODE_DISABLED = 0;\n+  public static final int MODE_DEFAULT = 1;\n+  public static final int MODE_EXPLICIT = 2;\n+  public static final int MODE_COPY_FROM_METADATA = 3;\n+  \n+  protected boolean canOffsetTiles;\n+  protected boolean canWriteCompressed;\n+  protected boolean canWriteProgressive;\n+  protected boolean canWriteTiles;\n+  protected int compressionMode = MODE_COPY_FROM_METADATA;\n+  protected float compressionQuality;\n+  protected String compressionType;\n+  protected String[] compressionTypes;\n+  protected Locale locale;\n+  protected Dimension[] preferredTileSizes;\n+  protected int progressiveMode = MODE_COPY_FROM_METADATA;\n+  protected int tileGridXOffset;\n+  protected int tileGridYOffset;\n+  protected int tileHeight;\n+  protected int tileWidth;\n+  protected int tilingMode;\n+  protected boolean tilingSet;\n+\n+  /**\n+   * Creates an empty <code>ImageWriteParam</code> object.\n+   * The subclass is responsible to initialize all fields.\n+   */\n+  protected ImageWriteParam()\n+  {\n+    // Do nothing here.\n+  }\n+\n+  /**\n+   * Creates an <code>ImageWriteParam</code> object with the given locale.\n+   *\n+   * @param locale the locale to use for user visible strings\n+   */\n+  public ImageWriteParam(Locale locale)\n+  {\n+    this.locale = locale;\n+  }\n+\n+  public float getBitRate(float quality)\n+  {\n+    checkNotExplicitCompression();\n+    checkCompressionTypesSet();\n+\n+    return -1.0f;\n+  }\n+\n+  private void checkSupportsCompression()\n+  {\n+    if (! canWriteCompressed())\n+      throw new UnsupportedOperationException(\"compression not supported\");\n+  }\n+\n+  private void checkNotExplicitCompression()\n+  {\n+    if (getCompressionMode() != MODE_EXPLICIT)\n+      throw new IllegalStateException(\"compression mode is not MODE_EXPLICIT\");\n+  }\n+  \n+  private void checkCompressionTypesSet()\n+  {\n+    if (getCompressionType() == null\n+\t&& getCompressionTypes() != null)\n+      throw new IllegalStateException(\"no compression type set\");\n+  }\n+\n+  private void checkSupportsProgressiveEncoding()\n+  {\n+    if (! canWriteProgressive())\n+      throw new UnsupportedOperationException\n+\t(\"progressive output not supported\");\n+  }\n+  \n+  private void checkSupportsTiling()\n+  {\n+    if (! canWriteTiles())\n+      throw new UnsupportedOperationException(\"tiling not supported\");\n+  }\n+\n+  private void checkNotExplicitTiling()\n+  {\n+    if (getTilingMode() != MODE_EXPLICIT)\n+      throw new IllegalStateException(\"tiling mode not MODE_EXPLICIT\");\n+  }\n+\n+  private void checkTilingInitialized()\n+  {\n+    if (! tilingSet)\n+      throw new IllegalStateException(\"tiling parameters not set\");\n+  }\n+\n+  private void checkMode(int mode)\n+  {\n+    if (mode < MODE_DISABLED || mode > MODE_COPY_FROM_METADATA)\n+      throw new IllegalArgumentException(\"mode not supported\");\n+  }\n+\n+  public boolean canOffsetTiles()\n+  {\n+    return canOffsetTiles;\n+  }\n+\n+  public boolean canWriteCompressed()\n+  {\n+    return canWriteCompressed;\n+  }\n+\n+  public boolean canWriteProgressive()\n+  {\n+    return canWriteProgressive;\n+  }\n+\n+  public boolean canWriteTiles()\n+  {\n+    return canWriteTiles;\n+  }\n+\n+  public int getCompressionMode()\n+  {\n+    checkSupportsCompression();\n+\n+    return compressionMode;\n+  }\n+\n+  public float getCompressionQuality()\n+  {\n+    checkNotExplicitCompression();\n+    checkCompressionTypesSet();\n+\n+    return compressionQuality;\n+  }\n+\n+  public String[] getCompressionQualityDescriptions()\n+  {\n+    checkNotExplicitCompression();\n+    checkCompressionTypesSet();;\n+    \n+    return null;\n+  }\n+\n+  public float[] getCompressionQualityValues()\n+  {\n+    checkNotExplicitCompression();\n+    checkCompressionTypesSet();;\n+    \n+    return null;\n+  }\n+\n+  public String getCompressionType()\n+  {\n+    checkNotExplicitCompression();\n+\n+    return compressionType;\n+  }\n+\n+  public String[] getCompressionTypes()\n+  {\n+    checkSupportsCompression();\n+\n+    return compressionTypes != null ? (String[]) compressionTypes.clone() : null;\n+  }\n+\n+  public Locale getLocale()\n+  {\n+    return locale;\n+  }\n+\n+  public String getLocalizedCompressionTypeName()\n+  {\n+    checkNotExplicitCompression();\n+    checkCompressionTypesSet();\n+\n+    return getCompressionType();\n+  }\n+\n+  public Dimension[] getPreferredTileSizes()\n+  {\n+    checkSupportsTiling();\n+\n+    return preferredTileSizes;\n+  }\n+\n+  public int getProgressiveMode()\n+  {\n+    checkSupportsProgressiveEncoding();\n+\n+    return progressiveMode;\n+  }\n+\n+  public int getTileGridXOffset()\n+  {\n+    checkNotExplicitTiling();\n+    checkTilingInitialized();\n+\n+    return tileGridXOffset;\n+  }\n+\n+  public int getTileGridYOffset()\n+  {\n+    checkNotExplicitTiling();\n+    checkTilingInitialized();\n+\n+    return tileGridYOffset;\n+  }\n+\n+  public int getTileHeight()\n+  {\n+    checkNotExplicitTiling();\n+    checkTilingInitialized();\n+\n+    return tileHeight;\n+  }\n+\n+  public int getTileWidth()\n+  {\n+    checkNotExplicitTiling();\n+    checkTilingInitialized();\n+\n+    return tileWidth;\n+  }\n+\n+  public int getTilingMode()\n+  {\n+    checkSupportsTiling();\n+\n+    return tilingMode;\n+  }\n+\n+  public boolean isCompressionLossless()\n+  {\n+    checkNotExplicitCompression();\n+    checkCompressionTypesSet();\n+\n+    return true;\n+  }\n+\n+  public void setCompressionMode(int mode)\n+  {\n+    checkSupportsCompression();\n+    checkMode(mode);\n+    \n+    compressionMode = mode;\n+    \n+    if (mode == MODE_EXPLICIT)\n+      unsetCompression();\n+  }\n+\n+  public void setCompressionQuality(float quality)\n+  {\n+    checkNotExplicitCompression();\n+    checkCompressionTypesSet();\n+\n+    if (quality < 0.0f || quality > 1.0f)\n+      throw new IllegalArgumentException(\"quality out of range\");\n+\n+    compressionQuality = quality;\n+  }\n+\n+  public void setCompressionType(String compressionType)\n+  {\n+    checkNotExplicitCompression();\n+\n+    String[] types = getCompressionTypes();\n+\n+    if (types == null)\n+      throw new UnsupportedOperationException(\"no settable compression types\");\n+    \n+    if (compressionType == null)\n+      this.compressionType = null;\n+\n+    for (int i = types.length - 1; i >= 0; --i)\n+      if (types[i].equals(compressionType))\n+\t{\n+\t  this.compressionType = compressionType;\n+\t  return;\n+\t}\n+    \n+    throw new IllegalArgumentException(\"unknown compression type\");\n+  }\n+\n+  public void setProgressiveMode(int mode)\n+  {\n+    checkSupportsProgressiveEncoding();\n+    checkMode(mode);\n+    \n+    progressiveMode = mode;\n+  }\n+\n+  public void setTiling(int tileWidth, int tileHeight,\n+\t\t        int tileGridXOffset, int tileGridYOffset)\n+  {\n+    checkNotExplicitTiling();\n+\n+    if (! canOffsetTiles\n+\t&& tileGridXOffset != 0\n+\t&& tileGridYOffset != 0)\n+      throw new UnsupportedOperationException(\"tile offsets not supported\");\n+\n+    if (tileWidth < 0 || tileHeight < 0)\n+      throw new IllegalArgumentException(\"negative tile dimension\");\n+\n+    if (preferredTileSizes != null)\n+      {\n+\tboolean found = false;\n+\n+\tfor (int i = 0; i < preferredTileSizes.length; i += 2)\n+\t  {\n+\t    if (tileWidth >= preferredTileSizes[i].width\n+\t\t&& tileWidth <= preferredTileSizes[i + 1].width\n+\t\t&& tileHeight >= preferredTileSizes[i].height\n+\t\t&& tileHeight <= preferredTileSizes[i + 1].height)\n+\t      found = true;\n+\t  }\n+\n+\tif (! found)\n+          throw new IllegalArgumentException(\"illegal tile size\");\n+      }\n+\n+    this.tilingSet = true;\n+    this.tileWidth = tileWidth;\n+    this.tileHeight = tileHeight;\n+    this.tileGridXOffset = tileGridXOffset;\n+    this.tileGridYOffset = tileGridYOffset;\n+  }\n+\n+  public void setTilingMode(int mode)\n+  {\n+    checkSupportsTiling();\n+    checkMode(mode);\n+    tilingMode = mode;\n+  }\n+\n+  public void unsetCompression()\n+  {\n+    checkNotExplicitCompression();\n+    \n+    compressionType = null;\n+    compressionQuality = 1.0F;\n+  }\n+\n+  public void unsetTiling()\n+  {\n+    checkNotExplicitTiling();\n+    \n+    tileWidth = 0;\n+    tileHeight = 0;\n+    tileGridXOffset = 0;\n+    tileGridYOffset = 0;\n+  }\n+}"}, {"sha": "64466b151f08163e8238e5e56f04e735c9b9e1ea", "filename": "libjava/javax/imageio/ImageWriter.java", "status": "modified", "additions": 346, "deletions": 4, "changes": 350, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2FImageWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2FImageWriter.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -1,5 +1,5 @@\n /* ImageWriter.java -- Encodes raster images.\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -38,10 +38,352 @@\n \n package javax.imageio;\n \n+import java.awt.Dimension;\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import javax.imageio.event.IIOWriteProgressListener;\n+import javax.imageio.event.IIOWriteWarningListener;\n+import javax.imageio.metadata.IIOMetadata;\n+\n+import javax.imageio.spi.ImageWriterSpi;\n+\n public abstract class ImageWriter\n   implements ImageTranscoder\n {\n-  // FIXME: Incomplete. This class is merely present in order to allow\n-  // compilation of the javax.imageio.spi package, for which GNU\n-  // Classpath does provide an implementation.\n+  private boolean aborted;\n+  \n+  protected Locale[] availableLocales;\n+  protected Locale locale;\n+  protected ImageWriterSpi originatingProvider;\n+  protected Object output;\n+  protected List progressListeners;\n+  protected List warningListeners;\n+  protected List warningLocales;\n+\n+  protected ImageWriter(ImageWriterSpi originatingProvider)\n+  {\n+    this.originatingProvider = originatingProvider;\n+  }\n+\n+  private void checkOutputSet()\n+  {\n+    if (output == null)\n+      throw new IllegalStateException(\"no output set\");\n+  }\n+  \n+  public void abort()\n+  {\n+    aborted = true;\n+  }\n+\n+  protected boolean abortRequested()\n+  {\n+    return aborted;\n+  }\n+\n+  public void addIIOWriteProgressListener(IIOWriteProgressListener listener)\n+  {\n+    if (listener == null)\n+      return;\n+    \n+    progressListeners.add(listener);\n+  }\n+  \n+  public void addIIOWriteWarningListener (IIOWriteWarningListener listener)\n+  {\n+    if (listener == null)\n+      return;\n+    \n+    warningListeners.add(listener);\n+  }\n+\n+  public boolean canInsertEmpty(int imageIndex)\n+    throws IOException\n+  {\n+    checkOutputSet();\n+    return false;\n+  }\n+\n+  public boolean canInsertImage(int imageIndex)\n+    throws IOException\n+  {\n+    checkOutputSet();\n+    return false;\n+  }\n+\n+  public boolean canRemoveImage(int imageIndex)\n+    throws IOException\n+  {\n+    checkOutputSet();\n+    return false;\n+  }\n+\n+  public boolean canReplaceImageMetadata(int imageIndex)\n+    throws IOException\n+  {\n+    checkOutputSet();\n+    return false;\n+  }\n+\n+  public boolean canReplacePixels(int imageIndex)\n+    throws IOException\n+  {\n+    checkOutputSet();\n+    return false;\n+  }\n+\n+  public boolean canReplaceStreamMetadata()\n+    throws IOException\n+  {\n+    checkOutputSet();\n+    return false;\n+  }\n+\n+  public boolean canWriteEmpty()\n+    throws IOException\n+  {\n+    checkOutputSet();\n+    return false;\n+  }\n+\n+  public boolean canWriteRasters()\n+  {\n+    return false;\n+  }\n+\n+  public boolean canWriteSequence()\n+  {\n+    return false;\n+  }\n+\n+  protected void clearAbortRequest()\n+  {\n+    aborted = false;\n+  }\n+  \n+  public abstract IIOMetadata convertImageMetadata (IIOMetadata inData,\n+\t\t                                    ImageTypeSpecifier imageType,\n+\t\t\t\t                    ImageWriteParam param);\n+\n+  public abstract IIOMetadata convertStreamMetadata (IIOMetadata inData,\n+\t\t\t\t\t             ImageWriteParam param);\n+\n+  public void dispose()\n+  {\n+    // The default implementation is empty. Subclasses have to overwrite it.\n+  }\n+  \n+  public Locale[] getAvailableLocales()\n+  {\n+    return availableLocales;\n+  }\n+\n+  public abstract IIOMetadata getDefaultImageMetadata (ImageTypeSpecifier imageType, ImageWriteParam param);\n+\n+  public abstract IIOMetadata getDefaultStreamMetadata (ImageWriteParam param);\n+\n+  public ImageWriteParam getDefaultWriteParam()\n+  {\n+    return new ImageWriteParam(getLocale());\n+  }\n+\n+  public Locale getLocale()\n+  {\n+    return locale;\n+  }\n+\n+  public int getNumThumbnailsSupported (ImageTypeSpecifier imageType, ImageWriteParam param,\n+\t\t                        IIOMetadata streamMetadata, IIOMetadata imageMetadata)\n+  {\n+    return 0;\n+  }\n+\n+  public ImageWriterSpi getOriginatingProvider()\n+  {\n+    return originatingProvider;\n+  }\n+\n+  public Object getOutput()\n+  {\n+    return output;\n+  }\n+\n+  public Dimension[] getPreferredThumbnailSizes (ImageTypeSpecifier imageType,\n+\t\t                                 ImageWriteParam param,\n+\t\t\t\t\t\t IIOMetadata streamMetadata,\n+\t\t\t\t\t\t IIOMetadata imageMetadata)\n+  {\n+    return null;\n+  }\n+\n+  protected void processImageComplete()\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOWriteProgressListener listener = (IIOWriteProgressListener) it.next();\n+\tlistener.imageComplete(this);\n+      }\n+  }\n+\n+  protected void processImageProgress(float percentageDone)\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOWriteProgressListener listener = (IIOWriteProgressListener) it.next();\n+\tlistener.imageProgress(this, percentageDone);\n+      }\n+  }\n+\n+  protected void processImageStarted(int imageIndex)\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOWriteProgressListener listener = (IIOWriteProgressListener) it.next();\n+\tlistener.imageStarted(this, imageIndex);\n+      }\n+  }\n+\n+  protected void processThumbnailComplete()\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOWriteProgressListener listener = (IIOWriteProgressListener) it.next();\n+\tlistener.thumbnailComplete(this);\n+      }\n+  }\n+\n+  protected void processThumbnailProgress(float percentageDone)\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOWriteProgressListener listener = (IIOWriteProgressListener) it.next();\n+\tlistener.thumbnailProgress(this, percentageDone);\n+      }\n+  }\n+\n+  protected void processThumbnailStarted(int imageIndex, int thumbnailIndex)\n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOWriteProgressListener listener = (IIOWriteProgressListener) it.next();\n+\tlistener.thumbnailStarted(this, imageIndex, thumbnailIndex);\n+      }\n+  }\n+\n+  protected void processWarningOccurred(int imageIndex, String warning)\n+  {\n+    Iterator it = warningListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOWriteWarningListener listener = (IIOWriteWarningListener) it.next();\n+\tlistener.warningOccurred(this, imageIndex, warning);\n+      }\n+  }\n+\n+  protected void processWriteAborted() \n+  {\n+    Iterator it = progressListeners.iterator();\n+\n+    while (it.hasNext())\n+      {\n+\tIIOWriteProgressListener listener = (IIOWriteProgressListener) it.next();\n+\tlistener.writeAborted(this);\n+      }\n+  }\n+\n+  public void removeAllIIOWriteProgressListeners()\n+  {\n+    progressListeners.clear();\n+  }\n+\n+  public void removeAllIIOWriteWarningListeners()\n+  {\n+    progressListeners.clear();\n+  }\n+  \n+  public void removeIIOWriteProgressListener (IIOWriteProgressListener listener) \n+  {\n+    if (listener == null)\n+      return;\n+    \n+    progressListeners.remove(listener);\n+  }\n+  \n+  public void removeIIOWriteWarningListener (IIOWriteWarningListener listener)\n+  {\n+    if (listener == null)\n+      return;\n+    \n+    warningListeners.remove(listener);\n+  }\n+  \n+  public void reset()\n+  {\n+    setOutput(null);\n+    setLocale(null);\n+    removeAllIIOWriteWarningListeners();\n+    removeAllIIOWriteProgressListeners();\n+    clearAbortRequest();\n+  }\n+  \n+  public void setLocale(Locale locale)\n+  {\n+    if (locale != null)\n+      {\n+\t// Check if its a valid locale.\n+\tboolean found = false;\n+\n+\tif (availableLocales != null)\n+\t  for (int i = availableLocales.length - 1; i >= 0; --i)\n+\t    if (availableLocales[i].equals(locale))\n+\t      found = true;\n+\n+\tif (! found)\n+\t  throw new IllegalArgumentException(\"looale not available\");\n+      }\n+\n+    this.locale = locale;\n+  }\n+\n+  public void setOutput(Object output)\n+  {\n+    if (output != null)\n+      {\n+\t// Check if its a valid output object.\n+\tboolean found = false;\n+\tClass[] types = null;\n+\n+\tif (originatingProvider != null)\n+\t  types = originatingProvider.getOutputTypes();\n+\t\n+\tif (types != null)\n+\t  for (int i = types.length - 1; i >= 0; --i)\n+\t    if (types[i].equals(output.getClass()))\n+\t      found = true;\n+\n+\tif (! found)\n+\t  throw new IllegalArgumentException(\"output type not available\");\n+      }\n+\n+    this.output = output;\n+  }\n+\n+  public abstract void write (IIOMetadata streamMetadata, IIOImage image, ImageWriteParam param)\n+    throws IOException;\n }"}, {"sha": "7ba5bbaf515aa59b8e3429224009185cf71425a1", "filename": "libjava/javax/imageio/event/IIOReadProgressListener.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadProgressListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadProgressListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadProgressListener.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -35,11 +35,12 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package javax.imageio.event;\n \n import java.util.EventListener;\n-import javax.imageio.ImageReader;\n \n+import javax.imageio.ImageReader;\n \n public interface IIOReadProgressListener extends EventListener\n {"}, {"sha": "18ac4f0b0bd1916b305c830455794c43abb12a3a", "filename": "libjava/javax/imageio/event/IIOReadUpdateListener.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadUpdateListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadUpdateListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadUpdateListener.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -35,12 +35,13 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package javax.imageio.event;\n \n import java.awt.image.BufferedImage;\n import java.util.EventListener;\n-import javax.imageio.ImageReader;\n \n+import javax.imageio.ImageReader;\n \n public interface IIOReadUpdateListener extends EventListener\n {"}, {"sha": "34fcbb784f0d674d546965926009fe158ef9c259", "filename": "libjava/javax/imageio/event/IIOReadWarningListener.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadWarningListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadWarningListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOReadWarningListener.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -35,11 +35,12 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package javax.imageio.event;\n \n import java.util.EventListener;\n-import javax.imageio.ImageReader;\n \n+import javax.imageio.ImageReader;\n \n public interface IIOReadWarningListener extends EventListener\n {"}, {"sha": "e71364288a68b408437767989ba81b5504e077bb", "filename": "libjava/javax/imageio/event/IIOWriteProgressListener.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOWriteProgressListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOWriteProgressListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOWriteProgressListener.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -35,11 +35,12 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package javax.imageio.event;\n \n import java.util.EventListener;\n-import javax.imageio.ImageWriter;\n \n+import javax.imageio.ImageWriter;\n \n public interface IIOWriteProgressListener extends EventListener\n {"}, {"sha": "9f8d52135112daac1650dd6acd9d4181f3dc6967", "filename": "libjava/javax/imageio/event/IIOWriteWarningListener.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOWriteWarningListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOWriteWarningListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fevent%2FIIOWriteWarningListener.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -35,11 +35,12 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+\n package javax.imageio.event;\n \n import java.util.EventListener;\n-import javax.imageio.ImageWriter;\n \n+import javax.imageio.ImageWriter;\n \n /**\n  * @author Michael Koch (konqueror@gmx.de)"}, {"sha": "c36a11a7104bb3c6717495ae79528e0dc00e548a", "filename": "libjava/javax/imageio/event/package.html", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fevent%2Fpackage.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fevent%2Fpackage.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fevent%2Fpackage.html?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,46 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n+<!-- package.html - describes classes in javax.imageio.event package.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. -->\n+\n+<html>\n+<head><title>GNU Classpath - javax.imageio.event</title></head>\n+\n+<body>\n+<p></p>\n+\n+</body>\n+</html>"}, {"sha": "c3ce42482c6f1e14fe63baa4f98632126ce5357b", "filename": "libjava/javax/imageio/metadata/IIOInvalidTreeException.java", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOInvalidTreeException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOInvalidTreeException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOInvalidTreeException.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,63 @@\n+/* IIOInvalidTreeException.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.metadata;\n+\n+import javax.imageio.IIOException;\n+\n+public class IIOInvalidTreeException extends IIOException\n+{\n+  protected /*Node*/ Object offendingNode;\n+\n+  public IIOInvalidTreeException(String message, /*Node*/ Object offendingNode)\n+  {\n+    super(message);\n+    this.offendingNode = offendingNode;\n+  }\n+\n+  public IIOInvalidTreeException(String message, Throwable cause, /*Node*/ Object offendingNode)\n+  {\n+    super(message, cause);\n+    this.offendingNode = offendingNode;\n+  }\n+\n+  public /*Node*/ Object getOffendingNode()\n+  {\n+    return offendingNode;\n+  }\n+}"}, {"sha": "bb96770dd15979d7de387a10aa4ed13aa3ccab50", "filename": "libjava/javax/imageio/metadata/IIOMetadata.java", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadata.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadata.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadata.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,213 @@\n+/* IIOMetadata.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.metadata;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public abstract class IIOMetadata\n+{\n+  protected IIOMetadataController controller;\n+  protected IIOMetadataController defaultController;\n+  protected String[] extraMetadataFormatClassNames;\n+  protected String[] extraMetadataFormatNames;\n+  protected String nativeMetadataFormatClassName;\n+  protected String nativeMetadataFormatName;\n+  protected boolean standardFormatSupported;\n+\n+  /**\n+   * Creates a <code>IIOMetaData</code> object.\n+   */\n+  protected IIOMetadata()\n+  {\n+    // Do nothing here.\n+  }\n+\n+  /**\n+   * Creates a <code>IIOMetaData</code> object with the given arguments.\n+   *\n+   * @param standardMetadataFormatSupported\n+   * @param nativeMetadataFormatName\n+   * @param nativeMetadataFormatClassName\n+   * @param extraMetadataFormatNames\n+   * @param extraMetadataFormatClassNames\n+   *\n+   * @throws IllegalArgumentException if extraMetadataFormatNames has length of\n+   * zero or extraMetadataFormatNames and extraMetadataFormatClassNames are\n+   * neither both null, not have the same length\n+   */\n+  protected IIOMetadata(boolean standardMetadataFormatSupported,\n+                        String nativeMetadataFormatName,\n+                        String nativeMetadataFormatClassName,\n+                        String[] extraMetadataFormatNames,\n+                        String[] extraMetadataFormatClassNames)\n+  {\n+    if (extraMetadataFormatNames != null\n+        && extraMetadataFormatNames.length == 0)\n+      throw new IllegalArgumentException\n+        (\"extraMetadataFormatNames may not be empty\");\n+\n+    if (((extraMetadataFormatNames == null)\n+         && (extraMetadataFormatClassNames != null))\n+        || ((extraMetadataFormatNames != null)\n+            && (extraMetadataFormatClassNames == null))\n+        || ((extraMetadataFormatNames != null)\n+            && (extraMetadataFormatClassNames != null)\n+            && (extraMetadataFormatNames.length !=\n+                extraMetadataFormatClassNames.length)))\n+      throw new IllegalArgumentException\n+        (\"extraMetadataFormatNames and extraMetadataFormatClassNames \" +\n+         \"have different lengths\");\n+\n+    this.standardFormatSupported = standardMetadataFormatSupported;\n+    this.nativeMetadataFormatName = nativeMetadataFormatName;\n+    this.nativeMetadataFormatClassName = nativeMetadataFormatClassName;\n+    this.extraMetadataFormatNames = extraMetadataFormatNames;\n+    this.extraMetadataFormatClassNames = extraMetadataFormatClassNames;\n+  }\n+\n+  public boolean activateController()\n+  {\n+    if (! hasController())\n+      return false;\n+\n+    return getDefaultController().activate(this);\n+  }\n+\n+  public IIOMetadataController getController()\n+  {\n+    return controller;\n+  }\n+\n+  public IIOMetadataController getDefaultController()\n+  {\n+    return defaultController;\n+  }\n+\n+  public String[] getExtraMetadataFormatNames()\n+  {\n+    return (String[]) extraMetadataFormatNames.clone();\n+  }\n+\n+  public IIOMetadataFormat getMetadataFormat(String formatName)\n+  {\n+    if (formatName == null)\n+      throw new IllegalArgumentException(\"formatName may not be null\");\n+    \n+    String formatClassName = null;\n+\n+    if (isStandardMetadataFormatSupported()\n+\t&& formatName.equals(nativeMetadataFormatName))\n+      formatClassName = nativeMetadataFormatClassName;\n+    else\n+      {\n+\tString[] extraFormatNames = getExtraMetadataFormatNames();\n+\t\n+\tfor (int i = extraFormatNames.length - 1; i >= 0; --i)\n+\t  if (extraFormatNames[i].equals(formatName))\n+\t    {\n+\t      formatClassName = extraFormatNames[i];\n+\t      break;\n+\t    }\n+      }\n+\n+    if (formatClassName == null)\n+      throw new IllegalArgumentException(\"unknown format\");\n+\n+    IIOMetadataFormat format;\n+    \n+    try\n+      {\n+\tformat = (IIOMetadataFormat) Class.forName(formatClassName)\n+\t\t\t\t\t  .newInstance();\n+      }\n+    catch (Exception e)\n+      {\n+\tIllegalStateException ise = new IllegalStateException();\n+\tise.initCause(e);\n+\tthrow ise;\n+      }\n+\n+    return format;\n+  }\n+\n+  public String[] getMetadataFormatNames()\n+  {\n+    String[] formatNames = getExtraMetadataFormatNames();\n+    \n+    if (isStandardMetadataFormatSupported())\n+      {\n+        // Combine native metadata format name and extra metadata format names\n+\t// into one String array.\n+\tString[] tmp = new String[formatNames.length + 1];\n+\ttmp[0] = getNativeMetadataFormatName();\n+\n+\tfor (int i = 1; i < tmp.length; ++i)\n+\t  tmp[i] = formatNames[i - 1];\n+\n+\tformatNames = tmp;\n+      }\n+\n+    return formatNames;\n+  }\n+\n+  public String getNativeMetadataFormatName()\n+  {\n+    return nativeMetadataFormatName;\n+  }\n+\n+  public boolean hasController()\n+  {\n+    return getController() != null;\n+  }\n+\n+  public abstract boolean isReadOnly();\n+\n+  public boolean isStandardMetadataFormatSupported()\n+  {\n+    return standardFormatSupported;\n+  }\n+\n+  public abstract void reset();\n+\n+  public void setController(IIOMetadataController controller)\n+  {\n+    this.controller = controller;\n+  }\n+}"}, {"sha": "db899d8cc15855312fbabcaec318c46f6139160f", "filename": "libjava/javax/imageio/metadata/IIOMetadataController.java", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadataController.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadataController.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadataController.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,47 @@\n+/* IIOMetadataController.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.metadata;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public interface IIOMetadataController\n+{\n+  boolean activate(IIOMetadata metadata);\n+}"}, {"sha": "2aef2660b2a4297572a27bb75a8472bc463d089d", "filename": "libjava/javax/imageio/metadata/IIOMetadataFormat.java", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadataFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadataFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadataFormat.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,124 @@\n+/* IIOMetadataFormat.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.metadata;\n+\n+import java.util.Locale;\n+\n+import javax.imageio.ImageTypeSpecifier;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public interface IIOMetadataFormat\n+{\n+  int CHILD_POLICY_ALL = 1;\n+  int CHILD_POLICY_CHOICE = 3;\n+  int CHILD_POLICY_EMPTY = 0;\n+  int CHILD_POLICY_MAX = 5;\n+  int CHILD_POLICY_REPEAT = 5;\n+  int CHILD_POLICY_SEQUENCE = 4;\n+  int CHILD_POLICY_SOME = 2;\n+  int DATATYPE_BOOLEAN = 1;\n+  int DATATYPE_DOUBLE = 4;\n+  int DATATYPE_FLOAT = 3;\n+  int DATATYPE_INTEGER = 2;\n+  int DATATYPE_STRING = 0;\n+  int VALUE_ARBITRARY = 1;\n+  int VALUE_ENUMERATION = 16;\n+  int VALUE_LIST = 32;\n+  int VALUE_NONE = 0;\n+  int VALUE_RANGE = 2;\n+  int VALUE_RANGE_MAX_INCLUSIVE = 10;\n+  int VALUE_RANGE_MAX_INCLUSIVE_MASK = 8;\n+  int VALUE_RANGE_MIN_INCLUSIVE = 6;\n+  int VALUE_RANGE_MIN_INCLUSIVE_MASK = 4;\n+  int VALUE_RANGE_MIN_MAX_INCLUSIVE = 14;\n+\n+  boolean canNodeAppear (String elementName, ImageTypeSpecifier imageType);\n+\n+  int getAttributeDataType (String elementName, String attrName);\n+\n+  String getAttributeDefaultValue (String elementName, String attrName);\n+\n+  String getAttributeDescription (String elementName, String attrName, Locale locale);\n+\n+  String[] getAttributeEnumerations (String elementName, String attrName);\n+\n+  int getAttributeListMaxLength (String elementName, String attrName);\n+\n+  int getAttributeListMinLength (String elementName, String attrName);\n+\n+  String getAttributeMaxValue (String elementName, String attrName);\n+\n+  String getAttributeMinValue (String elementName, String attrName);\n+\n+  String[] getAttributeNames (String elementName);\n+\n+  int getAttributeValueType (String elementName, String attrName);\n+\n+  String[] getChildNames (String elementName);\n+\n+  int getChildPolicy (String elementName);\n+\n+  String getElementDescription (String elementName, Locale locale);\n+\n+  int getElementMaxChildren (String elementName);\n+\n+  int getElementMinChildren (String elementName);\n+\n+  int getObjectArrayMaxLength (String elementName);\n+\n+  int getObjectArrayMinLength (String elementName);\n+\n+  Class getObjectClass (String elementName);\n+\n+  Object getObjectDefaultValue (String elementName);\n+\n+  Object[] getObjectEnumerations (String elementName);\n+\n+  Comparable getObjectMaxValue (String elementName);\n+\n+  Comparable getObjectMinValue (String elementName);\n+\n+  int getObjectValueType (String elementName);\n+\n+  String getRootName();\n+\n+  boolean isAttributeRequired (String elementName, String attrName);\n+}"}, {"sha": "eab2055917e1850231f5f3f446add06a5ddf1522", "filename": "libjava/javax/imageio/metadata/IIOMetadataFormatImpl.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadataFormatImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadataFormatImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadataFormatImpl.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,43 @@\n+/* IIOMetadataFormatImpl.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.metadata;\n+\n+public abstract class IIOMetadataFormatImpl implements IIOMetadataFormat\n+{\n+}"}, {"sha": "3d1c7d26742ac5d78b2ee3a85075d3a6cd2177de", "filename": "libjava/javax/imageio/metadata/IIOMetadataNode.java", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadataNode.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadataNode.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fmetadata%2FIIOMetadataNode.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,43 @@\n+/* IIOMetadataNode.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.metadata;\n+\n+public class IIOMetadataNode\n+{\n+}"}, {"sha": "3188e32e5733cadb78d6cc0a18f2c6029b60a55b", "filename": "libjava/javax/imageio/metadata/package.html", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2Fpackage.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fmetadata%2Fpackage.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fmetadata%2Fpackage.html?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,46 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n+<!-- package.html - describes classes in javax.imageio.metadata package.\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. -->\n+\n+<html>\n+<head><title>GNU Classpath - javax.imageio.metadata</title></head>\n+\n+<body>\n+<p></p>\n+\n+</body>\n+</html>"}, {"sha": "7728cf428a32a1c6f68a1d22e6afadd9ececfc05", "filename": "libjava/javax/imageio/spi/IIORegistry.java", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fspi%2FIIORegistry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fspi%2FIIORegistry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fspi%2FIIORegistry.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,103 @@\n+/* IIORegistry.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.spi;\n+\n+import gnu.classpath.ServiceFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+\n+public final class IIORegistry extends ServiceRegistry\n+{\n+  private static final HashSet defaultCategories = new HashSet();\n+  \n+  private static HashMap instances = new HashMap();\n+\n+  static\n+  {\n+    //defaultCategories.add(ImageReaderSpi.class);\n+    //defaultCategories.add(ImageWriterSpi.class);\n+    defaultCategories.add(ImageTranscoderSpi.class);\n+    defaultCategories.add(ImageInputStreamSpi.class);\n+    defaultCategories.add(ImageOutputStreamSpi.class);\n+  }\n+  \n+  public static synchronized IIORegistry getDefaultInstance()\n+  {\n+    ThreadGroup group = Thread.currentThread().getThreadGroup();\n+    IIORegistry registry = (IIORegistry) instances.get(group);\n+    \n+    if (registry == null)\n+      {\n+        registry = new IIORegistry();\n+        instances.put(group, registry);\n+      }\n+    \n+    return registry;\n+  }\n+\n+  private IIORegistry()\n+  {\n+    super(defaultCategories.iterator());\n+\n+    // XXX: Register built-in Spis here.\n+    \n+    registerApplicationClasspathSpis();\n+  }\n+\n+  /**\n+   * Registers all available service providers found on the application\n+   * classpath.\n+   */\n+  public void registerApplicationClasspathSpis()\n+  {\n+    ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+    Iterator categories = getCategories();\n+\n+    while (categories.hasNext())\n+      {\n+\tClass category = (Class) categories.next();\n+\tIterator providers = ServiceFactory.lookupProviders(category, loader);\n+\n+\twhile (providers.hasNext())\n+\t  registerServiceProvider((IIOServiceProvider) providers.next());\n+      }\n+  }\n+}"}, {"sha": "6e33d1d392c474cfcbe75e448b90b9adf62e7b7f", "filename": "libjava/javax/imageio/spi/ImageInputStreamSpi.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fspi%2FImageInputStreamSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fspi%2FImageInputStreamSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fspi%2FImageInputStreamSpi.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -40,8 +40,8 @@\n \n import java.io.File;\n import java.io.IOException;\n-import javax.imageio.stream.ImageInputStream;\n \n+import javax.imageio.stream.ImageInputStream;\n \n /**\n  * An abstract superclass for service providers that create"}, {"sha": "935aa7c679908c2222a4e7ac493b3175d5456029", "filename": "libjava/javax/imageio/spi/ImageOutputStreamSpi.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fspi%2FImageOutputStreamSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fspi%2FImageOutputStreamSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fspi%2FImageOutputStreamSpi.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -40,8 +40,8 @@\n \n import java.io.File;\n import java.io.IOException;\n-import javax.imageio.stream.ImageOutputStream;\n \n+import javax.imageio.stream.ImageOutputStream;\n \n /**\n  * An abstract superclass for service providers that create"}, {"sha": "e041c371e6fb89bd0db766aacda68065e772101b", "filename": "libjava/javax/imageio/spi/ImageReaderSpi.java", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fspi%2FImageReaderSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fspi%2FImageReaderSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fspi%2FImageReaderSpi.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,121 @@\n+/* ImageReaderSpi.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.spi;\n+\n+import java.io.IOException;\n+\n+import javax.imageio.ImageReader;\n+import javax.imageio.stream.ImageInputStream;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public abstract class ImageReaderSpi extends ImageReaderWriterSpi\n+{\n+  public static final Class[] STANDARD_INPUT_TYPE =\n+    { ImageInputStream.class };\n+\n+  protected Class[] inputTypes;\n+  protected String[] writerSpiNames;\n+\n+  protected ImageReaderSpi()\n+  {\n+    // Do nothing here.\n+  }\n+\n+  public ImageReaderSpi(String vendorName, String version, String[] names,\n+                        String[] suffixes, String[] MIMETypes,\n+                        String readerClassName, Class[] inputTypes,\n+                        String[] writerSpiNames,\n+                        boolean supportsStandardStreamMetadataFormat,\n+                        String nativeStreamMetadataFormatName,\n+                        String nativeStreamMetadataFormatClassName,\n+                        String[] extraStreamMetadataFormatNames,\n+                        String[] extraStreamMetadataFormatClassNames,\n+                        boolean supportsStandardImageMetadataFormat,\n+                        String nativeImageMetadataFormatName,\n+                        String nativeImageMetadataFormatClassName,\n+                        String[] extraImageMetadataFormatNames,\n+                        String[] extraImageMetadataFormatClassNames)\n+  {\n+    super(vendorName, version, names, suffixes, MIMETypes, readerClassName,\n+          supportsStandardStreamMetadataFormat, nativeStreamMetadataFormatName,\n+          nativeStreamMetadataFormatClassName, extraStreamMetadataFormatNames,\n+          extraStreamMetadataFormatClassNames, supportsStandardImageMetadataFormat,\n+          nativeImageMetadataFormatName, nativeImageMetadataFormatClassName,\n+          extraImageMetadataFormatNames, extraImageMetadataFormatClassNames);\n+\n+    if (inputTypes == null\n+        || inputTypes.length == 0)\n+      throw new IllegalArgumentException(\"inputTypes may not be null or empty\");\n+    \n+    this.inputTypes = inputTypes;\n+    this.writerSpiNames = writerSpiNames;\n+  }\n+\n+  public abstract boolean canDecodeInput(Object source)\n+    throws IOException;\n+\n+  public ImageReader createReaderInstance()\n+    throws IOException\n+  {\n+    return createReaderInstance(null);\n+  }\n+\n+  public abstract ImageReader createReaderInstance(Object extension)\n+    throws IOException;\n+\n+  public String[] getImageWriterSpiNames()\n+  {\n+    return writerSpiNames;\n+  }\n+\n+  public Class[] getInputTypes()\n+  {\n+    return inputTypes;\n+  }\n+\n+  public boolean isOwnReader(ImageReader reader)\n+  {\n+    if (reader == null)\n+      throw new IllegalArgumentException(\"reader may not be null\");\n+    \n+    return pluginClassName.equals(reader.getClass().getName());\n+  }\n+}"}, {"sha": "306408df810a73681f47380ea390c3525e4997aa", "filename": "libjava/javax/imageio/spi/ImageWriterSpi.java", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fspi%2FImageWriterSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fspi%2FImageWriterSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fspi%2FImageWriterSpi.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,135 @@\n+/* ImageWriterSpi.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.spi;\n+\n+import java.awt.image.RenderedImage;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageTypeSpecifier;\n+import javax.imageio.ImageWriter;\n+import javax.imageio.stream.ImageOutputStream;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public abstract class ImageWriterSpi extends ImageReaderWriterSpi\n+{\n+  public static final Class[] STANDARD_OUTPUT_TYPE =\n+    { ImageOutputStream.class };\n+\n+  protected Class[] outputTypes;\n+  protected String[] readerSpiNames;\n+\n+  protected ImageWriterSpi()\n+  {\n+    // Do nothing here.\n+  }\n+\n+  public ImageWriterSpi(String vendorName, String version, String[] names,\n+                        String[] suffixes, String[] MIMETypes,\n+                        String writerClassName, Class[] outputTypes,\n+                        String[] readerSpiNames,\n+                        boolean supportsStandardStreamMetadataFormat,\n+                        String nativeStreamMetadataFormatName,\n+                        String nativeStreamMetadataFormatClassName,\n+                        String[] extraStreamMetadataFormatNames,\n+                        String[] extraStreamMetadataFormatClassNames,\n+                        boolean supportsStandardImageMetadataFormat,\n+                        String nativeImageMetadataFormatName,\n+                        String nativeImageMetadataFormatClassName,\n+                        String[] extraImageMetadataFormatNames,\n+                        String[] extraImageMetadataFormatClassNames)\n+  {\n+    super(vendorName, version, names, suffixes, MIMETypes, writerClassName,\n+          supportsStandardStreamMetadataFormat, nativeStreamMetadataFormatName,\n+          nativeStreamMetadataFormatClassName, extraStreamMetadataFormatNames,\n+          extraStreamMetadataFormatClassNames, supportsStandardImageMetadataFormat,\n+          nativeImageMetadataFormatName, nativeImageMetadataFormatClassName,\n+          extraImageMetadataFormatNames, extraImageMetadataFormatClassNames);\n+\n+    if (writerClassName == null)\n+      throw new IllegalArgumentException(\"writerClassName is null\");\n+\n+    if (outputTypes == null\n+        || outputTypes.length == 0)\n+      throw new IllegalArgumentException(\"outputTypes may not be null or empty\");\n+    \n+    this.outputTypes = outputTypes;\n+    this.readerSpiNames = readerSpiNames;    \n+  }\n+\n+  public abstract boolean canEncodeImage(ImageTypeSpecifier type);\n+\n+  public boolean canEncodeImage(RenderedImage image)\n+  {\n+    return canEncodeImage (new ImageTypeSpecifier(image));\n+  }\n+\n+  public ImageWriter createWriterInstance()\n+    throws IOException\n+  {\n+    return createWriterInstance(null);\n+  }\n+\n+  public abstract ImageWriter createWriterInstance(Object extension)\n+    throws IOException;\n+\n+  public String[] getImageReaderSpiNames()\n+  {\n+    return readerSpiNames;\n+  }\n+\n+  public Class[] getOutputTypes()\n+  {\n+    return outputTypes;\n+  }\n+\n+  public boolean isFormatLossless()\n+  {\n+    return true;\n+  }\n+\n+  public boolean isOwnWriter(ImageWriter writer)\n+  {\n+    if (writer == null)\n+      throw new IllegalArgumentException(\"writer may not be null\");\n+\n+    return pluginClassName.equals(writer.getClass().getName());\n+  }\n+}"}, {"sha": "566d50f732e6f4a3c729eb9ee5915d2e3371cd8b", "filename": "libjava/javax/imageio/spi/ServiceRegistry.java", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fspi%2FServiceRegistry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fspi%2FServiceRegistry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fspi%2FServiceRegistry.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -38,9 +38,19 @@\n \n package javax.imageio.spi;\n \n-import java.util.*;\n import gnu.classpath.ServiceFactory;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n \n /**\n  * A registry for service providers.\n@@ -100,6 +110,8 @@\n   /**\n    * Constructs a <code>ServiceRegistry</code> for the specified\n    * service categories.\n+   * \n+   * @param categories the categories to support\n    *\n    * @throws IllegalArgumentException if <code>categories</code> is\n    * <code>null</code>, or if its {@link Iterator#next()} method\n@@ -141,7 +153,7 @@ public ServiceRegistry(Iterator categories)\n    * might make sense to install only the frequently needed service\n    * providers on the local machine. More exotic providers can be put\n    * onto a server; the server will only be contacted when no suitable\n-   * service could be found locally.\n+   * service could be found locally.</p>\n    *\n    * <p><b>Security considerations:</b> Any loaded service providers\n    * are loaded through the specified ClassLoader, or the system\n@@ -150,7 +162,7 @@ public ServiceRegistry(Iterator categories)\n    * the current {@link java.security.AccessControlContext} gets\n    * recorded. This captured security context will determine the\n    * permissions when services get loaded via the <code>next()</code>\n-   * method of the returned <code>Iterator</code>.\n+   * method of the returned <code>Iterator</code>.</p>\n    *\n    * @param spi the service provider interface which must be\n    * implemented by any loaded service providers.\n@@ -474,7 +486,7 @@ public synchronized boolean deregisterServiceProvider(Object provider,\n    * invoked in order to inform the provider about the removal from\n    * this registry. If <code>provider</code> implements several\n    * service categories, <code>onDeregistration</code> gets called\n-   * multiple times.\n+   * multiple times.</p>\n    *\n    * @param provider the service provider to be de-registered.\n    *"}, {"sha": "49827d4e0fbf39fc60de5160b8953afd73be9854", "filename": "libjava/javax/imageio/stream/FileCacheImageInputStream.java", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FFileCacheImageInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FFileCacheImageInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fstream%2FFileCacheImageInputStream.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,93 @@\n+/* FileCacheImageInputStream.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.stream;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public class FileCacheImageInputStream\n+{\n+  private InputStream stream;\n+  private File cacheDir;\n+  \n+  public FileCacheImageInputStream(InputStream stream, File cacheDir)\n+    throws IOException\n+  {\n+    super();\n+    this.stream = stream;\n+    // FIXME: We do not support caching yet.\n+    this.cacheDir = cacheDir;\n+  }\n+\n+  public void close()\n+    throws IOException\n+  {\n+    if (stream != null)\n+      {\n+\tstream.close();\n+\tstream = null;\n+      }\n+  }\n+\n+  private void checkStreamClosed()\n+    throws IOException\n+  {\n+    if (stream == null)\n+      throw new IOException(\"stream closed\");\n+  }\n+\n+  public boolean isCached()\n+  {\n+    return true;\n+  }\n+\n+  public boolean isCachedFile()\n+  {\n+    return true;\n+  }\n+  \n+  public boolean isCachedMemory()\n+  {\n+    return false;\n+  }\n+}"}, {"sha": "f8bb3100275bfe4b7bce8cc82a638698018edabf", "filename": "libjava/javax/imageio/stream/FileCacheImageOutputStream.java", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FFileCacheImageOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FFileCacheImageOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fstream%2FFileCacheImageOutputStream.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,93 @@\n+/* FileCacheImageOutputStream.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.stream;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public class FileCacheImageOutputStream\n+{\n+  private OutputStream stream;\n+  private File cacheDir;\n+  \n+  public FileCacheImageOutputStream(OutputStream stream, File cacheDir)\n+    throws IOException\n+  {\n+    super();\n+    this.stream = stream;\n+    // FIXME: We do not support caching yet.\n+    this.cacheDir = cacheDir;\n+  }\n+\n+  public void close()\n+    throws IOException\n+  {\n+    if (stream != null)\n+      {\n+\tstream.close();\n+\tstream = null;\n+      }\n+  }\n+\n+  private void checkStreamClosed()\n+    throws IOException\n+  {\n+    if (stream == null)\n+      throw new IOException(\"stream closed\");\n+  }\n+\n+  public boolean isCached()\n+  {\n+    return true;\n+  }\n+\n+  public boolean isCachedFile()\n+  {\n+    return true;\n+  }\n+  \n+  public boolean isCachedMemory()\n+  {\n+    return false;\n+  }\n+}"}, {"sha": "67fd07518b189491cfa03e34be80aece80392481", "filename": "libjava/javax/imageio/stream/FileImageInputStream.java", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FFileImageInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FFileImageInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fstream%2FFileImageInputStream.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,87 @@\n+/* FileImageInputStream.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.stream;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public class FileImageInputStream\n+{\n+  private RandomAccessFile file;\n+  \n+  public FileImageInputStream(File file)\n+    throws FileNotFoundException, IOException\n+  {\n+    if (file == null)\n+      throw new IllegalArgumentException (\"file may not be null\");\n+\n+    this.file = new RandomAccessFile(file, \"r\");\n+  }\n+\n+  public FileImageInputStream(RandomAccessFile file)\n+  {\n+    if (file == null)\n+      throw new IllegalArgumentException (\"file may not be null\");\n+\n+    this.file = file;\n+  }\n+\n+  public void close()\n+    throws IOException\n+  {\n+    file.close();\n+  }\n+\n+  public long length()\n+  {\n+    try\n+      {\n+        return file.length();\n+      }\n+    catch (IOException e)\n+      {\n+        return -1L;\n+      }\n+  }\n+}"}, {"sha": "073faed19f4bba0ff91110ebf823fc54409d06e9", "filename": "libjava/javax/imageio/stream/FileImageOutputStream.java", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FFileImageOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FFileImageOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fstream%2FFileImageOutputStream.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,90 @@\n+/* FileImageOutputStream.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.stream;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public class FileImageOutputStream\n+{\n+  private RandomAccessFile file;\n+  \n+  public FileImageOutputStream(File file)\n+    throws FileNotFoundException, IOException\n+  {\n+    if (file == null)\n+      throw new IllegalArgumentException(\"file may not be null\");\n+\n+    // Do security check.\n+    file.canRead();\n+\n+    this.file = new RandomAccessFile(file, \"r\");\n+  }\n+\n+  public FileImageOutputStream(RandomAccessFile file)\n+  {\n+    if (file == null)\n+      throw new IllegalArgumentException(\"file may not be null\");\n+\n+    this.file = file;\n+  }\n+\n+  public void close()\n+    throws IOException\n+  {\n+    file.close();\n+  }\n+\n+  public long length()\n+  {\n+    try\n+      {\n+        return file.length();\n+      }\n+    catch (IOException e)\n+      {\n+        return -1L;\n+      }\n+  }\n+}"}, {"sha": "39296a711c62766449af52893abd07f1bc6c42cf", "filename": "libjava/javax/imageio/stream/ImageInputStream.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FImageInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FImageInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fstream%2FImageInputStream.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -626,8 +626,7 @@ long skipBytes(long numBytes)\n   void seek(long pos)\n     throws IOException;\n \n-  void mark()\n-    throws IOException;\n+  void mark();\n \n   void reset()\n     throws IOException;"}, {"sha": "27cb6c5b43a265adc2cc111e63e276574b3ecdd5", "filename": "libjava/javax/imageio/stream/ImageInputStreamImpl.java", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FImageInputStreamImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FImageInputStreamImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fstream%2FImageInputStreamImpl.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,157 @@\n+/* ImageInputStream.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.stream;\n+\n+import java.io.IOException;\n+import java.nio.ByteOrder;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public abstract class ImageInputStreamImpl implements ImageInputStream\n+{\n+  private boolean closed;\n+  \n+  protected int bitOffset;\n+  protected ByteOrder byteOrder;\n+  protected long flushedPos;\n+  protected long streamPos;\n+\n+  public ImageInputStreamImpl()\n+  {\n+    // Do nothing here.\n+  }\n+\n+  protected void checkClosed()\n+    throws IOException\n+  {\n+    if (closed)\n+      throw new IOException(\"stream closed\");\n+  }\n+\n+  public void close()\n+    throws IOException\n+  {\n+    checkClosed();\n+    closed = true;\n+  }\n+  \n+  protected void finalize()\n+    throws Throwable\n+  {\n+    close();\n+  }\n+\n+  public void flush()\n+    throws IOException\n+  {\n+    flushBefore(getStreamPosition());\n+  }\n+\n+  public void flushBefore(long position)\n+    throws IOException\n+  {\n+    if (position < flushedPos)\n+      throw new IndexOutOfBoundsException();\n+\n+    if (position > streamPos)\n+      throw new IndexOutOfBoundsException();\n+\n+    flushedPos = position;\n+  }\n+\n+  public int getBitOffset()\n+    throws IOException\n+  {\n+    return bitOffset;\n+  }\n+\n+  public ByteOrder getByteOrder()\n+  {\n+    return byteOrder;\n+  }\n+\n+  public long getFlushedPosition()\n+  {\n+    return flushedPos;\n+  }\n+\n+  public long getStreamPosition()\n+    throws IOException\n+  {\n+    return streamPos;\n+  }\n+\n+  public boolean isCached()\n+  {\n+    return false;\n+  }\n+\n+  public boolean isCachedFile()\n+  {\n+    return false;\n+  }\n+\n+  public boolean isCachedMemory()\n+  {\n+    return false;\n+  }\n+\n+  public long length()\n+  {\n+    return -1L;\n+  }\n+\n+  public abstract int read()\n+    throws IOException;\n+\n+  public int read(byte[] data)\n+    throws IOException\n+  {\n+    return read(data, 0, data.length);\n+  }\n+\n+  public abstract int read(byte[] data, int offset, int len)\n+    throws IOException;\n+\n+  public void setByteOrder (ByteOrder byteOrder)\n+  {\n+    this.byteOrder = byteOrder;\n+  }\n+}"}, {"sha": "f53feab717c84e0ed2d85c4796e6d33d0fe19628", "filename": "libjava/javax/imageio/stream/ImageOutputStream.java", "status": "modified", "additions": 214, "deletions": 3, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FImageOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FImageOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fstream%2FImageOutputStream.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -39,6 +39,7 @@\n package javax.imageio.stream;\n \n import java.io.DataOutput;\n+import java.io.IOException;\n \n \n /**\n@@ -52,7 +53,217 @@\n public interface ImageOutputStream\n   extends ImageInputStream, DataOutput\n {\n-  // FIXME: Incomplete. This interface is merely present in order to\n-  // allow compilation of the javax.imageio.spi package, for which GNU\n-  // Classpath does provide an implementation.\n+  /**\n+   * @param postion\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void flushBefore(long position) throws IOException;\n+\n+  /**\n+   * Writes an array into the stream.\n+   *\n+   * @param data the data to be written\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void write(byte[] data) throws IOException;\n+\n+  /**\n+   * Writes a region of data from an array into the stream.\n+   *\n+   * @param data the data to be written\n+   * @param offset the offset in the array\n+   * @param len the length in the array\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void write(byte[] data, int offset, int len) throws IOException;\n+\n+  /**\n+   * Writes an <code>int</code> into the stream.\n+   *\n+   * @param data the data to be written\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void write(int data) throws IOException;\n+\n+  /**\n+   * Writes a bit value to the stream.\n+   *\n+   * @throws IOException if an error occurs\n+   */\n+  void writeBit(int bit) throws IOException;\n+\n+  /**\n+   * Writes a number of bit values to the stream.\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeBits(long bits, int numBits) throws IOException;\n+\n+  /**\n+   * Writes a <code>boolean</code> value into the stream.\n+   *\n+   * @param data the data to be written\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeBoolean(boolean data) throws IOException;\n+\n+  /**\n+   * Writes a <code>byte</code> value into the stream.\n+   *\n+   * @param data the data to be written\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeByte(int data) throws IOException;\n+\n+  /**\n+   * @param data the data to be written\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeBytes(String data) throws IOException;\n+\n+  /**\n+   * Writes a character into the stream.\n+   *\n+   * @param data the data to be written\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeChar(int data) throws IOException;\n+\n+  /**\n+   * Writes characters to the stream.\n+   *\n+   * @param data the data to be written\n+   * @param offset the offset in the array\n+   * @param len the lenth in the array\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeChars(char[] data, int offset, int len) throws IOException;\n+\n+  /**\n+   * Writes characters from a given <code>String</code> into the stream.\n+   *\n+   * @param data the data to be written\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeChars(String data) throws IOException;\n+\n+  /**\n+   * Writes a <code>double</code> into the stream.\n+   *\n+   * @param data the data to be written\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeDouble(double data) throws IOException;\n+\n+  /**\n+   * Writes an array of <code>double</code> into the stream.\n+   *\n+   * @param data the data to be written\n+   * @param offset the offset in the array\n+   * @param len the lenth in the array\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeDoubles(double[] data, int offset, int len)\n+    throws IOException;\n+\n+  /**\n+   * Writes a <code>float</code> into the stream.\n+   *\n+   * @param data the data to be written\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeFloat(float data) throws IOException;\n+\n+  /**\n+   * Writes an array of <code>float</code> into the stream.\n+   *\n+   * @param data the data to be written\n+   * @param offset the offset in the array\n+   * @param len the lenth in the array\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeFloats(float[] data, int offset, int len) throws IOException;\n+\n+  /**\n+   * Writes a <code>int</code> into the stream.\n+   *\n+   * @param data the data to be written\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeInt(int data) throws IOException;\n+\n+  /**\n+   * Writes an array of <code>int</code> into the stream.\n+   *\n+   * @param data the data to be written\n+   * @param offset the offset in the array\n+   * @param len the lenth in the array\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeInts(int[] data, int offset, int len) throws IOException;\n+\n+  /**\n+   * Writes a <code>long</code> into the stream.\n+   *\n+   * @param data the data to be written\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeLong(long data) throws IOException;\n+\n+  /**\n+   * Writes an array of <code>long</code> into the stream.\n+   *\n+   * @param data the data to be written\n+   * @param offset the offset in the array\n+   * @param len the lenth in the array\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeLongs(long[] data, int offset, int len) throws IOException;\n+\n+  /**\n+   * Writes a <code>short</code> into the stream.\n+   *\n+   * @param data the data to be written\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeShort(int data) throws IOException;\n+\n+  /**\n+   * Writes an array of <code>short</code> into the stream.\n+   *\n+   * @param data the data to be written\n+   * @param offset the offset in the array\n+   * @param len the lenth in the array\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeShorts(short[] data, int offset, int len) throws IOException;\n+\n+  /**\n+   * Writes a <code>String</code> into the stream.\n+   *\n+   * @param data the data to be written\n+   *\n+   * @throws IOException if an errror occurs\n+   */\n+  void writeUTF(String data) throws IOException;\n }"}, {"sha": "d6009431900a13841c9a91c1cddccaf29b0fed9a", "filename": "libjava/javax/imageio/stream/ImageOutputStreamImpl.java", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FImageOutputStreamImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FImageOutputStreamImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fstream%2FImageOutputStreamImpl.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,65 @@\n+/* ImageOutputStream.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.stream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public abstract class ImageOutputStreamImpl extends ImageInputStreamImpl\n+  implements ImageOutputStream\n+{\n+  public ImageOutputStreamImpl()\n+  {\n+    // Do nothing here.\n+  }\n+\n+  public void write(byte[] data)\n+    throws IOException\n+  {\n+    write(data, 0, data.length);\n+  }\n+\n+  public abstract void write(byte[] data, int offset, int len)\n+    throws IOException;\n+\n+  public abstract void write(int value)\n+    throws IOException;\n+}"}, {"sha": "c7ca6d6e06d0ce7cdafc95c0f5a8727659bbc984", "filename": "libjava/javax/imageio/stream/MemoryCacheImageInputStream.java", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FMemoryCacheImageInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FMemoryCacheImageInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fstream%2FMemoryCacheImageInputStream.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,60 @@\n+/* MemoryCacheImageInputStream.java --\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.stream;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public class MemoryCacheImageInputStream\n+{\n+  public boolean isCached()\n+  {\n+    return true;\n+  }\n+\n+  public boolean isCachedFile()\n+  {\n+    return false;\n+  }\n+  \n+  public boolean isCachedMemory()\n+  {\n+    return true;\n+  }\n+}"}, {"sha": "b91fd666382632c83679b76e08f63d8c62c4169a", "filename": "libjava/javax/imageio/stream/MemoryCacheImageOutputStream.java", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FMemoryCacheImageOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c56bdc2faced04b598b5d2a88e11bed6d67bd0c/libjava%2Fjavax%2Fimageio%2Fstream%2FMemoryCacheImageOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fimageio%2Fstream%2FMemoryCacheImageOutputStream.java?ref=6c56bdc2faced04b598b5d2a88e11bed6d67bd0c", "patch": "@@ -0,0 +1,60 @@\n+/* MemoryCacheImageOutputStream.java --\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.imageio.stream;\n+\n+/**\n+ * @author Michael Koch (konqueror@gmx.de)\n+ */\n+public class MemoryCacheImageOutputStream\n+{\n+  public boolean isCached()\n+  {\n+    return true;\n+  }\n+\n+  public boolean isCachedFile()\n+  {\n+    return false;\n+  }\n+  \n+  public boolean isCachedMemory()\n+  {\n+    return true;\n+  }\n+}"}]}