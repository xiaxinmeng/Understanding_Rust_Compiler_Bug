{"sha": "d950dee3a50e04e4bdf03cc061f7f2b858a84657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk1MGRlZTNhNTBlMDRlNGJkZjAzY2MwNjFmN2YyYjg1OGE4NDY1Nw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-08-10T12:30:34Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-08-10T12:30:34Z"}, "message": "emit-rtl.c (emit_jump_insn_before, [...]): Fix uninitialized variable.\n\n\t* emit-rtl.c (emit_jump_insn_before, emit_call_insn_before,\n\temit_jump_insn): Fix uninitialized variable.\n\t* gcov.c (init_line_info): Likewise.\n\t* genautomata.c (transform_3): Add braces around ambiguous\n\telse.\n\t* ifcvt.c (cond_exec_process_insns): Mark parameter with\n\tATTRIBUTE_UNUSED.\n\t* ra-build.c (parts_to_webs_1): Fix uninitialized variable.\n\t* regrename.c (copyprop_hardreg_forward): Fix uninitialized\n\tvariable.\n\nFrom-SVN: r56182", "tree": {"sha": "e3ee20c06e269902b68b2a5e3e336d2a0081cd5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3ee20c06e269902b68b2a5e3e336d2a0081cd5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d950dee3a50e04e4bdf03cc061f7f2b858a84657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d950dee3a50e04e4bdf03cc061f7f2b858a84657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d950dee3a50e04e4bdf03cc061f7f2b858a84657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d950dee3a50e04e4bdf03cc061f7f2b858a84657/comments", "author": null, "committer": null, "parents": [{"sha": "fac37dc49748835a2264f9a53b485b89aceb5718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac37dc49748835a2264f9a53b485b89aceb5718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fac37dc49748835a2264f9a53b485b89aceb5718"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "02b40fc4de70686210f45df04f38b1a8105a018f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d950dee3a50e04e4bdf03cc061f7f2b858a84657", "patch": "@@ -1,5 +1,16 @@\n 2002-08-10  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* emit-rtl.c (emit_jump_insn_before, emit_call_insn_before,\n+\temit_jump_insn): Fix uninitialized variable.\n+\t* gcov.c (init_line_info): Likewise.\n+\t* genautomata.c (transform_3): Add braces around ambiguous\n+\telse.\n+\t* ifcvt.c (cond_exec_process_insns): Mark parameter with\n+\tATTRIBUTE_UNUSED.\n+\t* ra-build.c (parts_to_webs_1): Fix uninitialized variable.\n+\t* regrename.c (copyprop_hardreg_forward): Fix uninitialized\n+\tvariable.\n+\n \t* gengtype.c (write_gc_structure_fields): Avoid signed/unsigned\n \twarnings in output files.\n "}, {"sha": "cf138d372599e434eff6c4cc719ab645697de10b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d950dee3a50e04e4bdf03cc061f7f2b858a84657", "patch": "@@ -3974,7 +3974,7 @@ rtx\n emit_jump_insn_before (x, before)\n      rtx x, before;\n {\n-  rtx insn, last;\n+  rtx insn, last = NULL_RTX;\n \n #ifdef ENABLE_RTL_CHECKING\n   if (before == NULL_RTX)\n@@ -4021,7 +4021,7 @@ rtx\n emit_call_insn_before (x, before)\n      rtx x, before;\n {\n-  rtx last, insn;\n+  rtx last = NULL_RTX, insn;\n \n #ifdef ENABLE_RTL_CHECKING\n   if (before == NULL_RTX)\n@@ -4506,7 +4506,7 @@ rtx\n emit_jump_insn (x)\n      rtx x;\n {\n-  rtx last, insn;\n+  rtx last = NULL_RTX, insn;\n \n   switch (GET_CODE (x))\n     {"}, {"sha": "a9658b267556ff57a93c1f77d694336733622756", "filename": "gcc/gcov.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=d950dee3a50e04e4bdf03cc061f7f2b858a84657", "patch": "@@ -1308,7 +1308,7 @@ init_line_info (line_info, total, maxlineno)\n   char *ptr = bb_data;\n   long count;\n   long line_num;\n-  struct line_info *line_ptr; /* line info ptr. */\n+  struct line_info *line_ptr = 0; /* line info ptr. */\n    \n   memset (&function, 0, sizeof (function));\n   if (output_function_summary)"}, {"sha": "9fd1e836d891c846e20a9eabd9ec13ec2fd6c260", "filename": "gcc/genautomata.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=d950dee3a50e04e4bdf03cc061f7f2b858a84657", "patch": "@@ -4983,17 +4983,19 @@ transform_3 (regexp)\n       max_seq_length = 0;\n       if (regexp->mode == rm_allof)\n \tfor (i = 0; i < REGEXP_ALLOF (regexp)->regexps_num; i++)\n-\t  if (REGEXP_ALLOF (regexp)->regexps [i]->mode == rm_sequence)\n-\t    {\n-\t      seq = REGEXP_ALLOF (regexp)->regexps [i];\n-\t      if (max_seq_length < REGEXP_SEQUENCE (seq)->regexps_num)\n-\t      max_seq_length = REGEXP_SEQUENCE (seq)->regexps_num;\n-\t    }\n-\t  else if (REGEXP_ALLOF (regexp)->regexps [i]->mode != rm_unit)\n-\t    {\n-\t      max_seq_length = 0;\n-\t      break;\n-\t    }\n+\t  {\n+\t    if (REGEXP_ALLOF (regexp)->regexps [i]->mode == rm_sequence)\n+\t      {\n+\t\tseq = REGEXP_ALLOF (regexp)->regexps [i];\n+\t\tif (max_seq_length < REGEXP_SEQUENCE (seq)->regexps_num)\n+\t\t  max_seq_length = REGEXP_SEQUENCE (seq)->regexps_num;\n+\t      }\n+\t    else if (REGEXP_ALLOF (regexp)->regexps [i]->mode != rm_unit)\n+\t      {\n+\t\tmax_seq_length = 0;\n+\t\tbreak;\n+\t      }\n+\t  }\n       if (max_seq_length != 0)\n \t{\n \t  if (max_seq_length == 1 || REGEXP_ALLOF (regexp)->regexps_num <= 1)"}, {"sha": "82660be612d60660befbb84cf793b925f20fd1e9", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=d950dee3a50e04e4bdf03cc061f7f2b858a84657", "patch": "@@ -224,7 +224,7 @@ block_fallthru (bb)\n \n static int\n cond_exec_process_insns (ce_info, start, end, test, prob_val, mod_ok)\n-     ce_if_block_t *ce_info;\t/* if block information */\n+     ce_if_block_t *ce_info ATTRIBUTE_UNUSED;\t/* if block information */\n      rtx start;\t\t\t/* first insn to look at */\n      rtx end;\t\t\t/* last insn to look at */\n      rtx test;\t\t\t/* conditional execution test */"}, {"sha": "87683cb9c02c94da64c629f5500270fdf139a30e", "filename": "gcc/ra-build.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2Fra-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2Fra-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-build.c?ref=d950dee3a50e04e4bdf03cc061f7f2b858a84657", "patch": "@@ -1815,7 +1815,7 @@ parts_to_webs_1 (df, copy_webs, all_refs)\n   webnum = 0;\n   for (i = 0; i < def_id + use_id; i++)\n     {\n-      struct web *web, *subweb;\n+      struct web *subweb, *web = 0; /* Initialize web to silence warnings.  */\n       struct web_part *wp = &web_parts[i];\n       struct ref *ref = wp->ref;\n       unsigned int ref_id;"}, {"sha": "5a80a90eb83911f3c86050de44e0600be00e96d5", "filename": "gcc/regrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d950dee3a50e04e4bdf03cc061f7f2b858a84657/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=d950dee3a50e04e4bdf03cc061f7f2b858a84657", "patch": "@@ -1780,7 +1780,7 @@ copyprop_hardreg_forward ()\n {\n   struct value_data *all_vd;\n   bool need_refresh;\n-  basic_block bb, bbp;\n+  basic_block bb, bbp = 0;\n \n   need_refresh = false;\n "}]}