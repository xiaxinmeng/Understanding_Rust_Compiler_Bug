{"sha": "4be16d1c1cfa6d151d2853ce509c1a797189c9ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJlMTZkMWMxY2ZhNmQxNTFkMjg1M2NlNTA5YzFhNzk3MTg5YzlhZA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-27T01:52:58Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-27T01:52:58Z"}, "message": "libstdc++: elements_view's sentinel and iterator not comparable [LWG 3406]\n\nThis implements the proposed resolution for LWG 3406, and adds a\ntestcase for the example from P1994R1.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (elements_view::begin): Adjust constraints.\n\t(elements_view::end): Likewise.\n\t(elements_view::_Sentinel::operator==): Templatize to take both\n\t_Iterator<true> and _Iterator<false>.\n\t(elements_view::_Sentinel::operator-): Likewise.\n\t* testsuite/std/ranges/adaptors/elements.cc: Add testcase for\n\tthe example from P1994R1.\n\t* testsuite/std/ranges/adaptors/lwg3406.cc: New test.", "tree": {"sha": "eddddfb14e9806e18e739b3618ae1132705fa1e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eddddfb14e9806e18e739b3618ae1132705fa1e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4be16d1c1cfa6d151d2853ce509c1a797189c9ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be16d1c1cfa6d151d2853ce509c1a797189c9ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be16d1c1cfa6d151d2853ce509c1a797189c9ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be16d1c1cfa6d151d2853ce509c1a797189c9ad/comments", "author": null, "committer": null, "parents": [{"sha": "97ab5daa6c1186d3b10872cc1d5b05da247d102c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ab5daa6c1186d3b10872cc1d5b05da247d102c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ab5daa6c1186d3b10872cc1d5b05da247d102c"}], "stats": {"total": 101, "additions": 85, "deletions": 16}, "files": [{"sha": "42028354b8132c58be7d8c3ad4d486f4b10f6bb4", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be16d1c1cfa6d151d2853ce509c1a797189c9ad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be16d1c1cfa6d151d2853ce509c1a797189c9ad/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=4be16d1c1cfa6d151d2853ce509c1a797189c9ad", "patch": "@@ -3362,15 +3362,15 @@ namespace views\n       { return _Iterator<false>(ranges::begin(_M_base)); }\n \n       constexpr auto\n-      begin() const requires __detail::__simple_view<_Vp>\n+      begin() const requires range<const _Vp>\n       { return _Iterator<true>(ranges::begin(_M_base)); }\n \n       constexpr auto\n-      end()\n+      end() requires (!__detail::__simple_view<_Vp> && !common_range<_Vp>)\n       { return _Sentinel<false>{ranges::end(_M_base)}; }\n \n       constexpr auto\n-      end() requires common_range<_Vp>\n+      end() requires (!__detail::__simple_view<_Vp> && common_range<_Vp>)\n       { return _Iterator<false>{ranges::end(_M_base)}; }\n \n       constexpr auto\n@@ -3576,19 +3576,26 @@ namespace views\n \t  base() const\n \t  { return _M_end; }\n \n-\t  friend constexpr bool\n-\t  operator==(const _Iterator<_Const>& __x, const _Sentinel& __y)\n-\t  { return __y._M_equal(__x); }\n-\n-\t  friend constexpr range_difference_t<_Base>\n-\t  operator-(const _Iterator<_Const>& __x, const _Sentinel& __y)\n-\t    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base>>\n-\t  { return __x._M_current - __y._M_end; }\n-\n-\t  friend constexpr range_difference_t<_Base>\n-\t  operator-(const _Sentinel& __x, const _Iterator<_Const>& __y)\n-\t    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base>>\n-\t  { return __x._M_end - __y._M_current; }\n+\t  template<bool _Const2>\n+\t    requires sentinel_for<sentinel_t<_Base>,\n+\t\t       iterator_t<__detail::__maybe_const_t<_Const2, _Vp>>>\n+\t    friend constexpr bool\n+\t    operator==(const _Iterator<_Const2>& __x, const _Sentinel& __y)\n+\t    { return __y._M_equal(__x); }\n+\n+\t  template<bool _Const2,\n+\t\t   typename _Base2 = __detail::__maybe_const_t<_Const2, _Vp>>\n+\t    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base2>>\n+\t    friend constexpr range_difference_t<_Base2>\n+\t    operator-(const _Iterator<_Const2>& __x, const _Sentinel& __y)\n+\t    { return __x._M_current - __y._M_end; }\n+\n+\t  template<bool _Const2,\n+\t\t   typename _Base2 = __detail::__maybe_const_t<_Const2, _Vp>>\n+\t    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base2>>\n+\t    friend constexpr range_difference_t<_Base>\n+\t    operator-(const _Sentinel& __x, const _Iterator<_Const2>& __y)\n+\t    { return __x._M_end - __y._M_current; }\n \n \t  friend _Sentinel<!_Const>;\n \t};"}, {"sha": "3026adf4f28b0bc00b4652acda5d9f0cdcd148d3", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/elements.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be16d1c1cfa6d151d2853ce509c1a797189c9ad/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Felements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be16d1c1cfa6d151d2853ce509c1a797189c9ad/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Felements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Felements.cc?ref=4be16d1c1cfa6d151d2853ce509c1a797189c9ad", "patch": "@@ -45,8 +45,30 @@ test01()\n   VERIFY( ranges::equal(v1, x | views::values) );\n }\n \n+struct S\n+{\n+  friend bool\n+  operator==(std::input_iterator auto const& i, S)\n+  { return std::get<1>(*i) == 0; }\n+};\n+\n+void\n+test02()\n+{\n+  // This verifies that P1994R1 (and LWG3406) is implemented.\n+  std::pair<std::pair<char, int>, long> x[]\n+    = {{{1,2},3l}, {{1,0},2l}, {{1,2},0l}};\n+  ranges::subrange r{ranges::begin(x), S{}};\n+\n+  auto v = r | views::keys;\n+  VERIFY( ranges::equal(v, (std::pair<char, int>[]){{1,2},{1,0}}) );\n+  ranges::subrange v2{ranges::begin(v), S{}};\n+  VERIFY( ranges::equal(v2, (std::pair<char, int>[]){{1,2}}) );\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n }"}, {"sha": "72190cc2e8a396be423b5d2555a4d1d2e029d280", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/lwg3406.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be16d1c1cfa6d151d2853ce509c1a797189c9ad/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flwg3406.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be16d1c1cfa6d151d2853ce509c1a797189c9ad/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flwg3406.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flwg3406.cc?ref=4be16d1c1cfa6d151d2853ce509c1a797189c9ad", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+void\n+test01()\n+{\n+  std::tuple<int, int> x[] = {{0,0}};\n+  auto v = x | views::elements<0>;\n+  bool b = ranges::cbegin(v) == ranges::end(v);\n+}\n+\n+void\n+test02()\n+{\n+  std::tuple x = {0, 1};\n+  auto v = views::single(x) | views::elements<0>;\n+  auto i = ranges::cbegin(v);\n+}"}]}