{"sha": "7279bb227886a9de1a642b497a306813d5c4ea4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI3OWJiMjI3ODg2YTlkZTFhNjQyYjQ5N2EzMDY4MTNkNWM0ZWE0Yw==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2008-11-14T10:49:06Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2008-11-14T10:49:06Z"}, "message": "re PR target/36134 (GCC creates suboptimal ASM : usage of ADDA.L where LEA could be used)\n\n2008-11-14  Maxim Kuvyrkov  <maxim@codesourcery.com>\n\t    Andrew Stubbs  <ams@codesourcery.com>\n\t    Gunnar Von Boehn  <gunnar@genesi-usa.com>\n\n\tgcc/\n\tPR target/36134\n\t* config/m68k/m68k.md (addsi3_5200): Add a new alternative preferring\n\tthe shorter LEA insn over ADD.L where possible.\n\n\tgcc/testsuite/\n\tPR target/36134\n\t* gcc.target/m68k/pr36134.c: New test.\n\n\n\nCo-Authored-By: Andrew Stubbs <ams@codesourcery.com>\nCo-Authored-By: Gunnar Von Boehn <gunnar@genesi-usa.com>\n\nFrom-SVN: r141853", "tree": {"sha": "0e026a86a319fb6826141d6e5becfbee3ec8c882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e026a86a319fb6826141d6e5becfbee3ec8c882"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7279bb227886a9de1a642b497a306813d5c4ea4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7279bb227886a9de1a642b497a306813d5c4ea4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7279bb227886a9de1a642b497a306813d5c4ea4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7279bb227886a9de1a642b497a306813d5c4ea4c/comments", "author": null, "committer": null, "parents": [{"sha": "1da1a26884586f1667174037dcbf58de5196f35e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1da1a26884586f1667174037dcbf58de5196f35e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1da1a26884586f1667174037dcbf58de5196f35e"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "446906e47b3635e2e9ec867bddcf4b17431077ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7279bb227886a9de1a642b497a306813d5c4ea4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7279bb227886a9de1a642b497a306813d5c4ea4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7279bb227886a9de1a642b497a306813d5c4ea4c", "patch": "@@ -1,3 +1,11 @@\n+2008-11-14  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\t    Andrew Stubbs  <ams@codesourcery.com>\n+\t    Gunnar Von Boehn  <gunnar@genesi-usa.com>\n+\n+\tPR target/36134\n+\t* config/m68k/m68k.md (addsi3_5200): Add a new alternative preferring\n+\tthe shorter LEA insn over ADD.L where possible.\n+\n 2008-11-14  Thomas Schwinge  <tschwinge@gnu.org>\n \n \t* configure.ac (gcc_cv_libc_provides_ssp): Also consider GNU/Hurd"}, {"sha": "cf3e120590fff2741f0fa7d8108b7785e55ef224", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7279bb227886a9de1a642b497a306813d5c4ea4c/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7279bb227886a9de1a642b497a306813d5c4ea4c/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=7279bb227886a9de1a642b497a306813d5c4ea4c", "patch": "@@ -2325,9 +2325,9 @@\n   \"* return output_addsi3 (operands);\")\n \n (define_insn_and_split \"*addsi3_5200\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\"         \"=mr,mr,m,r,  ?a,?a,?a,?a\")\n-\t(plus:SI (match_operand:SI 1 \"general_operand\"     \"%0, 0, 0,0,   a, a, r, a\")\n-\t\t (match_operand:SI 2 \"general_src_operand\" \" I, L, d,mrKi,Cj,r, a, J\")))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"         \"=mr,mr,a,m,r,  ?a, ?a,?a,?a\")\n+\t(plus:SI (match_operand:SI 1 \"general_operand\"     \"%0, 0, 0,0,0,   a,  a, r, a\")\n+\t\t (match_operand:SI 2 \"general_src_operand\" \" I, L, J,d,mrKi,Cj, r, a, J\")))]\n   \"TARGET_COLDFIRE\"\n {\n   switch (which_alternative)\n@@ -2339,38 +2339,39 @@\n       operands[2] = GEN_INT (- INTVAL (operands[2]));\n       return \"subq%.l %2,%0\";\n \n-    case 2:\n     case 3:\n+    case 4:\n       return \"add%.l %2,%0\";\n \n-    case 4:\n+    case 5:\n       /* move%.l %2,%0\\n\\tadd%.l %1,%0 */\n       return \"#\";\n \n-    case 5:\n+    case 6:\n       return MOTOROLA ? \"lea (%1,%2.l),%0\" : \"lea %1@(0,%2:l),%0\";\n \n-    case 6:\n+    case 7:\n       return MOTOROLA ? \"lea (%2,%1.l),%0\" : \"lea %2@(0,%1:l),%0\";\n \n-    case 7:\n+    case 2:\n+    case 8:\n       return MOTOROLA ? \"lea (%c2,%1),%0\" : \"lea %1@(%c2),%0\";\n \n     default:\n       gcc_unreachable ();\n       return \"\";\n     }\n }\n-  \"&& reload_completed && (extract_constrain_insn_cached (insn), which_alternative == 4) && !operands_match_p (operands[0], operands[1])\"\n+  \"&& reload_completed && (extract_constrain_insn_cached (insn), which_alternative == 5) && !operands_match_p (operands[0], operands[1])\"\n   [(set (match_dup 0)\n \t(match_dup 2))\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0)\n \t\t (match_dup 1)))]\n   \"\"\n-  [(set_attr \"type\" \"aluq_l,aluq_l,alu_l,alu_l,*,lea,lea,lea\")\n-   (set_attr \"opy\" \"2,2,2,2,*,*,*,*\")\n-   (set_attr \"opy_type\" \"*,*,*,*,*,mem6,mem6,mem5\")])\n+  [(set_attr \"type\" \"aluq_l,aluq_l,lea,alu_l,alu_l,*,lea,lea,lea\")\n+   (set_attr \"opy\" \"2,2,*,2,2,*,*,*,*\")\n+   (set_attr \"opy_type\" \"*,*,mem5,*,*,*,mem6,mem6,mem5\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=a\")"}, {"sha": "0d05fdb2480de87b80a110a3a0e13c409feffaa4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7279bb227886a9de1a642b497a306813d5c4ea4c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7279bb227886a9de1a642b497a306813d5c4ea4c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7279bb227886a9de1a642b497a306813d5c4ea4c", "patch": "@@ -1,3 +1,10 @@\n+2008-11-14  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\t    Andrew Stubbs  <ams@codesourcery.com>\n+\t    Gunnar Von Boehn  <gunnar@genesi-usa.com>\n+\n+\tPR target/36134\n+\t* gcc.target/m68k/pr36134.c: New test.\n+\n 2008-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/36125"}, {"sha": "d8d65c16c0528cd8cc826baa7f3e9e2a7cdb367a", "filename": "gcc/testsuite/gcc.target/m68k/pr36134.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7279bb227886a9de1a642b497a306813d5c4ea4c/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr36134.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7279bb227886a9de1a642b497a306813d5c4ea4c/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr36134.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr36134.c?ref=7279bb227886a9de1a642b497a306813d5c4ea4c", "patch": "@@ -0,0 +1,23 @@\n+/* pr36134.c\n+\n+   This test ensures that the shorter LEA instruction is used in preference\n+   to the longer ADD instruction.  */\n+\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-final { scan-assembler \"lea\" } } */\n+/* { dg-final { scan-assembler-not \"add\" } } */\n+\n+int *a, *b;\n+\n+void\n+f ()\n+{\n+  while (a > b)\n+    {\n+      *a++ = *b++;\n+      *a++ = *b++;\n+      *a++ = *b++;\n+      *a++ = *b++;\n+    }\n+}"}]}