{"sha": "649af3ed287dd37d65869ef28d36e7b6ef7741f7", "node_id": "C_kwDOANBUbNoAKDY0OWFmM2VkMjg3ZGQzN2Q2NTg2OWVmMjhkMzZlN2I2ZWY3NzQxZjc", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-03-28T13:04:22Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-29T21:13:53Z"}, "message": "ast: Refactor rust-ast-lower-type.h to source file\n\ngcc/rust/ChangeLog:\n\n\t* hir/rust-ast-lower-type.h: Move all remaining definitions to source file.\n\t* hir/rust-ast-lower-type.cc (ASTLoweringType::translate): Moved to source file.\n\t(ASTLoweringType::visit): Likewise.\n\t(ASTLowerGenericParam::translate): Likewise.\n\t(ASTLowerGenericParam::visit): Likewise.\n\t(ASTLoweringTypeBounds::translate): Likewise.\n\t(ASTLoweringTypeBounds::visit): Likewise.\n\t(ASTLowerWhereClauseItem::translate): Likewise.\n\t(ASTLowerWhereClauseItem::visit): Likewise.", "tree": {"sha": "03aa1c61a16394b9982d01af21a24487537e78c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03aa1c61a16394b9982d01af21a24487537e78c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/649af3ed287dd37d65869ef28d36e7b6ef7741f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649af3ed287dd37d65869ef28d36e7b6ef7741f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649af3ed287dd37d65869ef28d36e7b6ef7741f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649af3ed287dd37d65869ef28d36e7b6ef7741f7/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5148f044c62031d7ec762037b97d61b696986916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5148f044c62031d7ec762037b97d61b696986916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5148f044c62031d7ec762037b97d61b696986916"}], "stats": {"total": 770, "additions": 407, "deletions": 363}, "files": [{"sha": "02b367b8e76784bf839832dd9da437668430cf77", "filename": "gcc/rust/hir/rust-ast-lower-type.cc", "status": "modified", "additions": 383, "deletions": 0, "changes": 383, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649af3ed287dd37d65869ef28d36e7b6ef7741f7/gcc%2Frust%2Fhir%2Frust-ast-lower-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649af3ed287dd37d65869ef28d36e7b6ef7741f7/gcc%2Frust%2Fhir%2Frust-ast-lower-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.cc?ref=649af3ed287dd37d65869ef28d36e7b6ef7741f7", "patch": "@@ -179,6 +179,204 @@ ASTLowerQualifiedPathInType::visit (AST::QualifiedPathInType &path)\n \t\t\t\t\t     path.get_locus ());\n }\n \n+HIR::Type *\n+ASTLoweringType::translate (AST::Type *type)\n+{\n+  ASTLoweringType resolver;\n+  type->accept_vis (resolver);\n+\n+  rust_assert (resolver.translated != nullptr);\n+  resolver.mappings->insert_hir_type (resolver.translated);\n+  resolver.mappings->insert_location (\n+    resolver.translated->get_mappings ().get_hirid (),\n+    resolver.translated->get_locus ());\n+\n+  return resolver.translated;\n+}\n+\n+void\n+ASTLoweringType::visit (AST::BareFunctionType &fntype)\n+{\n+  bool is_variadic = false;\n+  std::vector<HIR::LifetimeParam> lifetime_params;\n+  HIR::FunctionQualifiers qualifiers\n+    = lower_qualifiers (fntype.get_function_qualifiers ());\n+\n+  std::vector<HIR::MaybeNamedParam> named_params;\n+  for (auto &param : fntype.get_function_params ())\n+    {\n+      HIR::MaybeNamedParam::ParamKind kind;\n+      switch (param.get_param_kind ())\n+\t{\n+\tcase AST::MaybeNamedParam::ParamKind::UNNAMED:\n+\t  kind = HIR::MaybeNamedParam::ParamKind::UNNAMED;\n+\t  break;\n+\tcase AST::MaybeNamedParam::ParamKind::IDENTIFIER:\n+\t  kind = HIR::MaybeNamedParam::ParamKind::IDENTIFIER;\n+\t  break;\n+\tcase AST::MaybeNamedParam::ParamKind::WILDCARD:\n+\t  kind = HIR::MaybeNamedParam::ParamKind::WILDCARD;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+      HIR::Type *param_type\n+\t= ASTLoweringType::translate (param.get_type ().get ());\n+\n+      HIR::MaybeNamedParam p (param.get_name (), kind,\n+\t\t\t      std::unique_ptr<HIR::Type> (param_type),\n+\t\t\t      param.get_locus ());\n+      named_params.push_back (std::move (p));\n+    }\n+\n+  HIR::Type *return_type = nullptr;\n+  if (fntype.has_return_type ())\n+    {\n+      return_type\n+\t= ASTLoweringType::translate (fntype.get_return_type ().get ());\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, fntype.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated = new HIR::BareFunctionType (\n+    std::move (mapping), std::move (lifetime_params), std::move (qualifiers),\n+    std::move (named_params), is_variadic,\n+    std::unique_ptr<HIR::Type> (return_type), fntype.get_locus ());\n+}\n+\n+void\n+ASTLoweringType::visit (AST::TupleType &tuple)\n+{\n+  std::vector<std::unique_ptr<HIR::Type>> elems;\n+  for (auto &e : tuple.get_elems ())\n+    {\n+      HIR::Type *t = ASTLoweringType::translate (e.get ());\n+      elems.push_back (std::unique_ptr<HIR::Type> (t));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, tuple.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated = new HIR::TupleType (std::move (mapping), std::move (elems),\n+\t\t\t\t   tuple.get_locus ());\n+}\n+\n+void\n+ASTLoweringType::visit (AST::TypePath &path)\n+{\n+  translated = ASTLowerTypePath::translate (path);\n+}\n+\n+void\n+ASTLoweringType::visit (AST::QualifiedPathInType &path)\n+{\n+  translated = ASTLowerQualifiedPathInType::translate (path);\n+}\n+\n+void\n+ASTLoweringType::visit (AST::ArrayType &type)\n+{\n+  HIR::Type *translated_type\n+    = ASTLoweringType::translate (type.get_elem_type ().get ());\n+  HIR::Expr *array_size\n+    = ASTLoweringExpr::translate (type.get_size_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated\n+    = new HIR::ArrayType (mapping, std::unique_ptr<HIR::Type> (translated_type),\n+\t\t\t  std::unique_ptr<HIR::Expr> (array_size),\n+\t\t\t  type.get_locus ());\n+}\n+\n+void\n+ASTLoweringType::visit (AST::ReferenceType &type)\n+{\n+  HIR::Lifetime lifetime = lower_lifetime (type.get_lifetime ());\n+\n+  HIR::Type *base_type\n+    = ASTLoweringType::translate (type.get_base_type ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated = new HIR::ReferenceType (mapping,\n+\t\t\t\t       type.get_has_mut () ? Mutability::Mut\n+\t\t\t\t\t\t\t   : Mutability::Imm,\n+\t\t\t\t       std::unique_ptr<HIR::Type> (base_type),\n+\t\t\t\t       type.get_locus (), lifetime);\n+}\n+\n+void\n+ASTLoweringType::visit (AST::RawPointerType &type)\n+{\n+  HIR::Type *base_type\n+    = ASTLoweringType::translate (type.get_type_pointed_to ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated\n+    = new HIR::RawPointerType (mapping,\n+\t\t\t       type.get_pointer_type ()\n+\t\t\t\t   == AST::RawPointerType::PointerType::MUT\n+\t\t\t\t ? Mutability::Mut\n+\t\t\t\t : Mutability::Imm,\n+\t\t\t       std::unique_ptr<HIR::Type> (base_type),\n+\t\t\t       type.get_locus ());\n+}\n+\n+void\n+ASTLoweringType::visit (AST::SliceType &type)\n+{\n+  HIR::Type *base_type\n+    = ASTLoweringType::translate (type.get_elem_type ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated\n+    = new HIR::SliceType (mapping, std::unique_ptr<HIR::Type> (base_type),\n+\t\t\t  type.get_locus ());\n+}\n+\n+void\n+ASTLoweringType::visit (AST::InferredType &type)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated = new HIR::InferredType (mapping, type.get_locus ());\n+}\n+\n+void\n+ASTLoweringType::visit (AST::NeverType &type)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated = new HIR::NeverType (mapping, type.get_locus ());\n+}\n+\n void\n ASTLoweringType::visit (AST::TraitObjectTypeOneBound &type)\n {\n@@ -218,5 +416,190 @@ ASTLoweringType::visit (AST::TraitObjectType &type)\n \t\t\t\t\t type.get_locus (), type.is_dyn ());\n }\n \n+HIR::GenericParam *\n+ASTLowerGenericParam::translate (AST::GenericParam *param)\n+{\n+  ASTLowerGenericParam resolver;\n+  param->accept_vis (resolver);\n+\n+  rust_assert (resolver.translated != nullptr);\n+  resolver.mappings->insert_location (\n+    resolver.translated->get_mappings ().get_hirid (), param->get_locus ());\n+  resolver.mappings->insert_hir_generic_param (resolver.translated);\n+\n+  return resolver.translated;\n+}\n+\n+void\n+ASTLowerGenericParam::visit (AST::LifetimeParam &param)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, param.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  HIR::Lifetime lt (mapping, param.get_lifetime ().get_lifetime_type (),\n+\t\t    param.get_lifetime ().get_lifetime_name (),\n+\t\t    param.get_lifetime ().get_locus ());\n+\n+  translated = new HIR::LifetimeParam (mapping, lt, param.get_locus (),\n+\t\t\t\t       std::vector<Lifetime> ());\n+}\n+\n+void\n+ASTLowerGenericParam::visit (AST::ConstGenericParam &param)\n+{\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, param.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  auto type = ASTLoweringType::translate (param.get_type ().get ());\n+\n+  HIR::Expr *default_expr = nullptr;\n+  if (param.has_default_value ())\n+    default_expr = ASTLoweringExpr::translate (\n+      param.get_default_value ().get_expression ().get ());\n+\n+  translated = new HIR::ConstGenericParam (param.get_name (),\n+\t\t\t\t\t   std::unique_ptr<Type> (type),\n+\t\t\t\t\t   std::unique_ptr<Expr> (default_expr),\n+\t\t\t\t\t   mapping, param.get_locus ());\n+}\n+\n+void\n+ASTLowerGenericParam::visit (AST::TypeParam &param)\n+{\n+  AST::Attribute outer_attr = AST::Attribute::create_empty ();\n+  std::vector<std::unique_ptr<HIR::TypeParamBound>> type_param_bounds;\n+  if (param.has_type_param_bounds ())\n+    {\n+      for (auto &bound : param.get_type_param_bounds ())\n+\t{\n+\t  HIR::TypeParamBound *lowered_bound = lower_bound (bound.get ());\n+\t  type_param_bounds.push_back (\n+\t    std::unique_ptr<HIR::TypeParamBound> (lowered_bound));\n+\t}\n+    }\n+\n+  HIR::Type *type = param.has_type ()\n+\t\t      ? ASTLoweringType::translate (param.get_type ().get ())\n+\t\t      : nullptr;\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, param.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t mappings->get_next_localdef_id (crate_num));\n+\n+  translated\n+    = new HIR::TypeParam (mapping, param.get_type_representation (),\n+\t\t\t  param.get_locus (), std::move (type_param_bounds),\n+\t\t\t  std::unique_ptr<Type> (type), std::move (outer_attr));\n+}\n+\n+HIR::TypeParamBound *\n+ASTLoweringTypeBounds::translate (AST::TypeParamBound *type)\n+{\n+  ASTLoweringTypeBounds resolver;\n+  type->accept_vis (resolver);\n+\n+  rust_assert (resolver.translated != nullptr);\n+  resolver.mappings->insert_location (\n+    resolver.translated->get_mappings ().get_hirid (),\n+    resolver.translated->get_locus ());\n+\n+  return resolver.translated;\n+}\n+\n+void\n+ASTLoweringTypeBounds::visit (AST::TraitBound &bound)\n+{\n+  // FIXME\n+  std::vector<HIR::LifetimeParam> lifetimes;\n+\n+  AST::TypePath &ast_trait_path = bound.get_type_path ();\n+  HIR::TypePath *trait_path = ASTLowerTypePath::translate (ast_trait_path);\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, bound.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::TraitBound (mapping, *trait_path, bound.get_locus (),\n+\t\t\t\t    bound.is_in_parens (),\n+\t\t\t\t    bound.has_opening_question_mark ());\n+}\n+\n+void\n+ASTLoweringTypeBounds::visit (AST::Lifetime &bound)\n+{\n+  HIR::Lifetime lifetime = lower_lifetime (bound);\n+  translated = new HIR::Lifetime (lifetime);\n+}\n+\n+HIR::WhereClauseItem *\n+ASTLowerWhereClauseItem::translate (AST::WhereClauseItem &item)\n+{\n+  ASTLowerWhereClauseItem compiler;\n+  item.accept_vis (compiler);\n+\n+  rust_assert (compiler.translated != nullptr);\n+  // FIXME\n+  // compiler.mappings->insert_location (\n+  //   compiler.translated->get_mappings ().get_hirid (),\n+  //   compiler.translated->get_locus ());\n+\n+  return compiler.translated;\n+}\n+\n+void\n+ASTLowerWhereClauseItem::visit (AST::LifetimeWhereClauseItem &item)\n+{\n+  HIR::Lifetime l = lower_lifetime (item.get_lifetime ());\n+  std::vector<HIR::Lifetime> lifetime_bounds;\n+  for (auto &lifetime_bound : item.get_lifetime_bounds ())\n+    {\n+      HIR::Lifetime ll = lower_lifetime (lifetime_bound);\n+      lifetime_bounds.push_back (std::move (ll));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, item.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::LifetimeWhereClauseItem (mapping, std::move (l),\n+\t\t\t\t\t\t std::move (lifetime_bounds),\n+\t\t\t\t\t\t item.get_locus ());\n+}\n+\n+void\n+ASTLowerWhereClauseItem::visit (AST::TypeBoundWhereClauseItem &item)\n+{\n+  // FIXME\n+  std::vector<HIR::LifetimeParam> for_lifetimes;\n+\n+  std::unique_ptr<HIR::Type> bound_type = std::unique_ptr<HIR::Type> (\n+    ASTLoweringType::translate (item.get_type ().get ()));\n+\n+  std::vector<std::unique_ptr<HIR::TypeParamBound>> type_param_bounds;\n+  for (auto &bound : item.get_type_param_bounds ())\n+    {\n+      HIR::TypeParamBound *b = ASTLoweringTypeBounds::translate (bound.get ());\n+      type_param_bounds.push_back (std::unique_ptr<HIR::TypeParamBound> (b));\n+    }\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, item.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::TypeBoundWhereClauseItem (mapping, std::move (for_lifetimes),\n+\t\t\t\t\t std::move (bound_type),\n+\t\t\t\t\t std::move (type_param_bounds),\n+\t\t\t\t\t item.get_locus ());\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "38f166ec8010f821cdf26b24ba7c702077869efc", "filename": "gcc/rust/hir/rust-ast-lower-type.h", "status": "modified", "additions": 24, "deletions": 363, "changes": 387, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649af3ed287dd37d65869ef28d36e7b6ef7741f7/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649af3ed287dd37d65869ef28d36e7b6ef7741f7/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-type.h?ref=649af3ed287dd37d65869ef28d36e7b6ef7741f7", "patch": "@@ -63,196 +63,19 @@ class ASTLoweringType : public ASTLoweringBase\n   using Rust::HIR::ASTLoweringBase::visit;\n \n public:\n-  static HIR::Type *translate (AST::Type *type)\n-  {\n-    ASTLoweringType resolver;\n-    type->accept_vis (resolver);\n-\n-    rust_assert (resolver.translated != nullptr);\n-    resolver.mappings->insert_hir_type (resolver.translated);\n-    resolver.mappings->insert_location (\n-      resolver.translated->get_mappings ().get_hirid (),\n-      resolver.translated->get_locus ());\n-\n-    return resolver.translated;\n-  }\n-\n-  void visit (AST::BareFunctionType &fntype) override\n-  {\n-    bool is_variadic = false;\n-    std::vector<HIR::LifetimeParam> lifetime_params;\n-    HIR::FunctionQualifiers qualifiers\n-      = lower_qualifiers (fntype.get_function_qualifiers ());\n-\n-    std::vector<HIR::MaybeNamedParam> named_params;\n-    for (auto &param : fntype.get_function_params ())\n-      {\n-\tHIR::MaybeNamedParam::ParamKind kind;\n-\tswitch (param.get_param_kind ())\n-\t  {\n-\t  case AST::MaybeNamedParam::ParamKind::UNNAMED:\n-\t    kind = HIR::MaybeNamedParam::ParamKind::UNNAMED;\n-\t    break;\n-\t  case AST::MaybeNamedParam::ParamKind::IDENTIFIER:\n-\t    kind = HIR::MaybeNamedParam::ParamKind::IDENTIFIER;\n-\t    break;\n-\t  case AST::MaybeNamedParam::ParamKind::WILDCARD:\n-\t    kind = HIR::MaybeNamedParam::ParamKind::WILDCARD;\n-\t    break;\n-\t  default:\n-\t    gcc_unreachable ();\n-\t  }\n-\n-\tHIR::Type *param_type\n-\t  = ASTLoweringType::translate (param.get_type ().get ());\n-\n-\tHIR::MaybeNamedParam p (param.get_name (), kind,\n-\t\t\t\tstd::unique_ptr<HIR::Type> (param_type),\n-\t\t\t\tparam.get_locus ());\n-\tnamed_params.push_back (std::move (p));\n-      }\n-\n-    HIR::Type *return_type = nullptr;\n-    if (fntype.has_return_type ())\n-      {\n-\treturn_type\n-\t  = ASTLoweringType::translate (fntype.get_return_type ().get ());\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, fntype.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-\n-    translated = new HIR::BareFunctionType (\n-      std::move (mapping), std::move (lifetime_params), std::move (qualifiers),\n-      std::move (named_params), is_variadic,\n-      std::unique_ptr<HIR::Type> (return_type), fntype.get_locus ());\n-  }\n-\n-  void visit (AST::TupleType &tuple) override\n-  {\n-    std::vector<std::unique_ptr<HIR::Type>> elems;\n-    for (auto &e : tuple.get_elems ())\n-      {\n-\tHIR::Type *t = ASTLoweringType::translate (e.get ());\n-\telems.push_back (std::unique_ptr<HIR::Type> (t));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, tuple.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-\n-    translated = new HIR::TupleType (std::move (mapping), std::move (elems),\n-\t\t\t\t     tuple.get_locus ());\n-  }\n-\n-  void visit (AST::TypePath &path) override\n-  {\n-    translated = ASTLowerTypePath::translate (path);\n-  }\n-\n-  void visit (AST::QualifiedPathInType &path) override\n-  {\n-    translated = ASTLowerQualifiedPathInType::translate (path);\n-  }\n-\n-  void visit (AST::ArrayType &type) override\n-  {\n-    HIR::Type *translated_type\n-      = ASTLoweringType::translate (type.get_elem_type ().get ());\n-    HIR::Expr *array_size\n-      = ASTLoweringExpr::translate (type.get_size_expr ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-\n-    translated\n-      = new HIR::ArrayType (mapping,\n-\t\t\t    std::unique_ptr<HIR::Type> (translated_type),\n-\t\t\t    std::unique_ptr<HIR::Expr> (array_size),\n-\t\t\t    type.get_locus ());\n-  }\n-\n-  void visit (AST::ReferenceType &type) override\n-  {\n-    HIR::Lifetime lifetime = lower_lifetime (type.get_lifetime ());\n-\n-    HIR::Type *base_type\n-      = ASTLoweringType::translate (type.get_base_type ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-\n-    translated = new HIR::ReferenceType (mapping,\n-\t\t\t\t\t type.get_has_mut () ? Mutability::Mut\n-\t\t\t\t\t\t\t     : Mutability::Imm,\n-\t\t\t\t\t std::unique_ptr<HIR::Type> (base_type),\n-\t\t\t\t\t type.get_locus (), lifetime);\n-  }\n-\n-  void visit (AST::RawPointerType &type) override\n-  {\n-    HIR::Type *base_type\n-      = ASTLoweringType::translate (type.get_type_pointed_to ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-\n-    translated\n-      = new HIR::RawPointerType (mapping,\n-\t\t\t\t type.get_pointer_type ()\n-\t\t\t\t     == AST::RawPointerType::PointerType::MUT\n-\t\t\t\t   ? Mutability::Mut\n-\t\t\t\t   : Mutability::Imm,\n-\t\t\t\t std::unique_ptr<HIR::Type> (base_type),\n-\t\t\t\t type.get_locus ());\n-  }\n-\n-  void visit (AST::SliceType &type) override\n-  {\n-    HIR::Type *base_type\n-      = ASTLoweringType::translate (type.get_elem_type ().get ());\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-\n-    translated\n-      = new HIR::SliceType (mapping, std::unique_ptr<HIR::Type> (base_type),\n-\t\t\t    type.get_locus ());\n-  }\n-\n-  void visit (AST::InferredType &type) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-\n-    translated = new HIR::InferredType (mapping, type.get_locus ());\n-  }\n-\n-  void visit (AST::NeverType &type) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, type.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-\n-    translated = new HIR::NeverType (mapping, type.get_locus ());\n-  }\n+  static HIR::Type *translate (AST::Type *type);\n \n+  void visit (AST::BareFunctionType &fntype) override;\n+  void visit (AST::TupleType &tuple) override;\n+  void visit (AST::TypePath &path) override;\n+  void visit (AST::QualifiedPathInType &path) override;\n+  void visit (AST::ArrayType &type) override;\n+  void visit (AST::ReferenceType &type) override;\n+  void visit (AST::RawPointerType &type) override;\n+  void visit (AST::SliceType &type) override;\n+  void visit (AST::InferredType &type) override;\n+  void visit (AST::NeverType &type) override;\n   void visit (AST::TraitObjectTypeOneBound &type) override;\n-\n   void visit (AST::TraitObjectType &type) override;\n \n private:\n@@ -266,84 +89,11 @@ class ASTLowerGenericParam : public ASTLoweringBase\n   using Rust::HIR::ASTLoweringBase::visit;\n \n public:\n-  static HIR::GenericParam *translate (AST::GenericParam *param)\n-  {\n-    ASTLowerGenericParam resolver;\n-    param->accept_vis (resolver);\n-\n-    rust_assert (resolver.translated != nullptr);\n-    resolver.mappings->insert_location (\n-      resolver.translated->get_mappings ().get_hirid (), param->get_locus ());\n-    resolver.mappings->insert_hir_generic_param (resolver.translated);\n-\n-    return resolver.translated;\n-  }\n-\n-  void visit (AST::LifetimeParam &param) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, param.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-\n-    HIR::Lifetime lt (mapping, param.get_lifetime ().get_lifetime_type (),\n-\t\t      param.get_lifetime ().get_lifetime_name (),\n-\t\t      param.get_lifetime ().get_locus ());\n-\n-    translated = new HIR::LifetimeParam (mapping, lt, param.get_locus (),\n-\t\t\t\t\t std::vector<Lifetime> ());\n-  }\n-\n-  void visit (AST::ConstGenericParam &param) override\n-  {\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, param.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-\n-    auto type = ASTLoweringType::translate (param.get_type ().get ());\n-\n-    HIR::Expr *default_expr = nullptr;\n-    if (param.has_default_value ())\n-      default_expr = ASTLoweringExpr::translate (\n-\tparam.get_default_value ().get_expression ().get ());\n-\n-    translated\n-      = new HIR::ConstGenericParam (param.get_name (),\n-\t\t\t\t    std::unique_ptr<Type> (type),\n-\t\t\t\t    std::unique_ptr<Expr> (default_expr),\n-\t\t\t\t    mapping, param.get_locus ());\n-  }\n-\n-  void visit (AST::TypeParam &param) override\n-  {\n-    AST::Attribute outer_attr = AST::Attribute::create_empty ();\n-    std::vector<std::unique_ptr<HIR::TypeParamBound>> type_param_bounds;\n-    if (param.has_type_param_bounds ())\n-      {\n-\tfor (auto &bound : param.get_type_param_bounds ())\n-\t  {\n-\t    HIR::TypeParamBound *lowered_bound = lower_bound (bound.get ());\n-\t    type_param_bounds.push_back (\n-\t      std::unique_ptr<HIR::TypeParamBound> (lowered_bound));\n-\t  }\n-      }\n-\n-    HIR::Type *type = param.has_type ()\n-\t\t\t? ASTLoweringType::translate (param.get_type ().get ())\n-\t\t\t: nullptr;\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, param.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   mappings->get_next_localdef_id (crate_num));\n-\n-    translated\n-      = new HIR::TypeParam (mapping, param.get_type_representation (),\n-\t\t\t    param.get_locus (), std::move (type_param_bounds),\n-\t\t\t    std::unique_ptr<Type> (type),\n-\t\t\t    std::move (outer_attr));\n-  }\n+  static HIR::GenericParam *translate (AST::GenericParam *param);\n+\n+  void visit (AST::LifetimeParam &param) override;\n+  void visit (AST::ConstGenericParam &param) override;\n+  void visit (AST::TypeParam &param) override;\n \n private:\n   ASTLowerGenericParam () : ASTLoweringBase (), translated (nullptr) {}\n@@ -356,42 +106,10 @@ class ASTLoweringTypeBounds : public ASTLoweringBase\n   using Rust::HIR::ASTLoweringBase::visit;\n \n public:\n-  static HIR::TypeParamBound *translate (AST::TypeParamBound *type)\n-  {\n-    ASTLoweringTypeBounds resolver;\n-    type->accept_vis (resolver);\n-\n-    rust_assert (resolver.translated != nullptr);\n-    resolver.mappings->insert_location (\n-      resolver.translated->get_mappings ().get_hirid (),\n-      resolver.translated->get_locus ());\n-\n-    return resolver.translated;\n-  }\n-\n-  void visit (AST::TraitBound &bound) override\n-  {\n-    // FIXME\n-    std::vector<HIR::LifetimeParam> lifetimes;\n-\n-    AST::TypePath &ast_trait_path = bound.get_type_path ();\n-    HIR::TypePath *trait_path = ASTLowerTypePath::translate (ast_trait_path);\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, bound.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::TraitBound (mapping, *trait_path, bound.get_locus (),\n-\t\t\t\t      bound.is_in_parens (),\n-\t\t\t\t      bound.has_opening_question_mark ());\n-  }\n-\n-  void visit (AST::Lifetime &bound) override\n-  {\n-    HIR::Lifetime lifetime = lower_lifetime (bound);\n-    translated = new HIR::Lifetime (lifetime);\n-  }\n+  static HIR::TypeParamBound *translate (AST::TypeParamBound *type);\n+\n+  void visit (AST::TraitBound &bound) override;\n+  void visit (AST::Lifetime &bound) override;\n \n private:\n   ASTLoweringTypeBounds () : ASTLoweringBase (), translated (nullptr) {}\n@@ -404,67 +122,10 @@ class ASTLowerWhereClauseItem : public ASTLoweringBase\n   using Rust::HIR::ASTLoweringBase::visit;\n \n public:\n-  static HIR::WhereClauseItem *translate (AST::WhereClauseItem &item)\n-  {\n-    ASTLowerWhereClauseItem compiler;\n-    item.accept_vis (compiler);\n-\n-    rust_assert (compiler.translated != nullptr);\n-    // FIXME\n-    // compiler.mappings->insert_location (\n-    //   compiler.translated->get_mappings ().get_hirid (),\n-    //   compiler.translated->get_locus ());\n-\n-    return compiler.translated;\n-  }\n-\n-  void visit (AST::LifetimeWhereClauseItem &item) override\n-  {\n-    HIR::Lifetime l = lower_lifetime (item.get_lifetime ());\n-    std::vector<HIR::Lifetime> lifetime_bounds;\n-    for (auto &lifetime_bound : item.get_lifetime_bounds ())\n-      {\n-\tHIR::Lifetime ll = lower_lifetime (lifetime_bound);\n-\tlifetime_bounds.push_back (std::move (ll));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, item.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated = new HIR::LifetimeWhereClauseItem (mapping, std::move (l),\n-\t\t\t\t\t\t   std::move (lifetime_bounds),\n-\t\t\t\t\t\t   item.get_locus ());\n-  }\n-\n-  void visit (AST::TypeBoundWhereClauseItem &item) override\n-  {\n-    // FIXME\n-    std::vector<HIR::LifetimeParam> for_lifetimes;\n-\n-    std::unique_ptr<HIR::Type> bound_type = std::unique_ptr<HIR::Type> (\n-      ASTLoweringType::translate (item.get_type ().get ()));\n-\n-    std::vector<std::unique_ptr<HIR::TypeParamBound>> type_param_bounds;\n-    for (auto &bound : item.get_type_param_bounds ())\n-      {\n-\tHIR::TypeParamBound *b\n-\t  = ASTLoweringTypeBounds::translate (bound.get ());\n-\ttype_param_bounds.push_back (std::unique_ptr<HIR::TypeParamBound> (b));\n-      }\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, item.get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    translated\n-      = new HIR::TypeBoundWhereClauseItem (mapping, std::move (for_lifetimes),\n-\t\t\t\t\t   std::move (bound_type),\n-\t\t\t\t\t   std::move (type_param_bounds),\n-\t\t\t\t\t   item.get_locus ());\n-  }\n+  static HIR::WhereClauseItem *translate (AST::WhereClauseItem &item);\n+\n+  void visit (AST::LifetimeWhereClauseItem &item) override;\n+  void visit (AST::TypeBoundWhereClauseItem &item) override;\n \n private:\n   ASTLowerWhereClauseItem () : ASTLoweringBase (), translated (nullptr) {}"}]}