{"sha": "3425c35fcac7c4220043572e32da054f94739c07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQyNWMzNWZjYWM3YzQyMjAwNDM1NzJlMzJkYTA1NGY5NDczOWMwNw==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2006-04-06T19:36:30Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2006-04-06T19:36:30Z"}, "message": "* builtins.c (expand_builtin_longjmp):Use #ifdef instead of #if\n        for HAVE_nonlocal_goto to be consistent.\n        (expand_builtin_nonlocal_goto): Likewise.\n        (expand_builtin_strcmp): Use #ifdef instead of #if\n        for HAVE_cmpstrnsi to be consistent.\n\nFrom-SVN: r112737", "tree": {"sha": "c4de7f55129e7d91c94efcc8dee3eff6205d542d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4de7f55129e7d91c94efcc8dee3eff6205d542d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3425c35fcac7c4220043572e32da054f94739c07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3425c35fcac7c4220043572e32da054f94739c07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3425c35fcac7c4220043572e32da054f94739c07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3425c35fcac7c4220043572e32da054f94739c07/comments", "author": null, "committer": null, "parents": [{"sha": "6e6bfd3a7b1ec9708416c87dace5ed72492d9358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e6bfd3a7b1ec9708416c87dace5ed72492d9358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e6bfd3a7b1ec9708416c87dace5ed72492d9358"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "6391dd42546b5ba4bfb678e6f15d0c9dc018f8c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3425c35fcac7c4220043572e32da054f94739c07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3425c35fcac7c4220043572e32da054f94739c07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3425c35fcac7c4220043572e32da054f94739c07", "patch": "@@ -1,3 +1,11 @@\n+2006-04-06  Mike Stump  <mrs@apple.com>\n+\n+\t* builtins.c (expand_builtin_longjmp):Use #ifdef instead of #if\n+\tfor HAVE_nonlocal_goto to be consistent.\n+\t(expand_builtin_nonlocal_goto): Likewise.\n+\t(expand_builtin_strcmp): Use #ifdef instead of #if\n+\tfor HAVE_cmpstrnsi to be consistent.\n+\n 2006-04-05  DJ Delorie  <dj@redhat.com>\n \n \t* config/m32c/m32c.h (INCOMING_FRAME_SP_OFFSET): Adjust for m16c"}, {"sha": "16f9d08123ecd2bf9c73a0553348c6e2c1a0928b", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3425c35fcac7c4220043572e32da054f94739c07/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3425c35fcac7c4220043572e32da054f94739c07/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3425c35fcac7c4220043572e32da054f94739c07", "patch": "@@ -793,7 +793,7 @@ expand_builtin_longjmp (rtx buf_addr, rtx value)\n \n       /* Pick up FP, label, and SP from the block and jump.  This code is\n \t from expand_goto in stmt.c; see there for detailed comments.  */\n-#if HAVE_nonlocal_goto\n+#ifdef HAVE_nonlocal_goto\n       if (HAVE_nonlocal_goto)\n \t/* We have to pass a value to the nonlocal_goto pattern that will\n \t   get copied into the static_chain pointer, but it does not matter\n@@ -866,7 +866,7 @@ expand_builtin_nonlocal_goto (tree arglist)\n \n   current_function_has_nonlocal_goto = 1;\n \n-#if HAVE_nonlocal_goto\n+#ifdef HAVE_nonlocal_goto\n   /* ??? We no longer need to pass the static chain value, afaik.  */\n   if (HAVE_nonlocal_goto)\n     emit_insn (gen_nonlocal_goto (const0_rtx, r_label, r_sp, r_fp));\n@@ -3676,7 +3676,7 @@ expand_builtin_strcmp (tree exp, rtx target, enum machine_mode mode)\n \t\t\t       GEN_INT (MIN (arg1_align, arg2_align)));\n \t}\n #endif\n-#if HAVE_cmpstrnsi \n+#ifdef HAVE_cmpstrnsi\n       /* Try to determine at least one length and call cmpstrnsi.  */\n       if (!insn && HAVE_cmpstrnsi) \n \t{"}]}