{"sha": "7366f6decf5ff3c652844913977582c9dec68d53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM2NmY2ZGVjZjVmZjNjNjUyODQ0OTEzOTc3NTgyYzlkZWM2OGQ1Mw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-11T12:07:19Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-13T09:54:32Z"}, "message": "Add in while loop support\n\nWe create a LoopExpr comprising of:\n\n  LOOP_EXPR {\n     EXIT_EXPR (while loop predicate)\n     {\n       <LOOP_BODY>\n     }\n  }\n\nFixes #109", "tree": {"sha": "8720f70594965d4c191b93979d491ea0639158f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8720f70594965d4c191b93979d491ea0639158f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7366f6decf5ff3c652844913977582c9dec68d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7366f6decf5ff3c652844913977582c9dec68d53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7366f6decf5ff3c652844913977582c9dec68d53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7366f6decf5ff3c652844913977582c9dec68d53/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92898b2903528fc3747d561f26df7f6d70d0a3b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92898b2903528fc3747d561f26df7f6d70d0a3b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92898b2903528fc3747d561f26df7f6d70d0a3b3"}], "stats": {"total": 190, "additions": 183, "deletions": 7}, "files": [{"sha": "1ca7631b82660b8799009f98da10357a33209d74", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=7366f6decf5ff3c652844913977582c9dec68d53", "patch": "@@ -641,11 +641,61 @@ class CompileExpr : public HIRCompileBase\n       }\n   }\n \n+  void visit (HIR::WhileLoopExpr &expr)\n+  {\n+    fncontext fnctx = ctx->peek_fn ();\n+    if (expr.has_loop_label ())\n+      {\n+\tHIR::LoopLabel &loop_label = expr.get_loop_label ();\n+\tBlabel *label\n+\t  = ctx->get_backend ()->label (fnctx.fndecl,\n+\t\t\t\t\tloop_label.get_lifetime ().get_name (),\n+\t\t\t\t\tloop_label.get_locus ());\n+\tBstatement *label_decl\n+\t  = ctx->get_backend ()->label_definition_statement (label);\n+\tctx->add_statement (label_decl);\n+\tctx->insert_label_decl (\n+\t  loop_label.get_lifetime ().get_mappings ().get_hirid (), label);\n+      }\n+\n+    std::vector<Bvariable *> locals;\n+    Location start_location = expr.get_loop_block ()->get_locus ();\n+    Location end_location = expr.get_loop_block ()->get_locus (); // FIXME\n+\n+    Bblock *enclosing_scope = ctx->peek_enclosing_scope ();\n+    Bblock *loop_block\n+      = ctx->get_backend ()->block (fnctx.fndecl, enclosing_scope, locals,\n+\t\t\t\t    start_location, end_location);\n+    ctx->push_block (loop_block);\n+\n+    Bexpression *condition\n+      = CompileExpr::Compile (expr.get_predicate_expr ().get (), ctx);\n+    Bexpression *exit_expr\n+      = ctx->get_backend ()->exit_expression (condition, expr.get_locus ());\n+    Bstatement *break_stmt\n+      = ctx->get_backend ()->expression_statement (fnctx.fndecl, exit_expr);\n+    ctx->add_statement (break_stmt);\n+\n+    Bblock *code_block\n+      = CompileBlock::compile (expr.get_loop_block ().get (), ctx, nullptr);\n+    Bstatement *code_block_stmt\n+      = ctx->get_backend ()->block_statement (code_block);\n+    ctx->add_statement (code_block_stmt);\n+\n+    ctx->pop_block ();\n+\n+    Bexpression *loop_expr\n+      = ctx->get_backend ()->loop_expression (loop_block, expr.get_locus ());\n+    Bstatement *loop_stmt\n+      = ctx->get_backend ()->expression_statement (fnctx.fndecl, loop_expr);\n+    ctx->add_statement (loop_stmt);\n+  }\n+\n   void visit (HIR::BreakExpr &expr)\n   {\n+    fncontext fnctx = ctx->peek_fn ();\n     if (expr.has_break_expr ())\n       {\n-\tfncontext fnctx = ctx->peek_fn ();\n \tBexpression *compiled_expr\n \t  = CompileExpr::Compile (expr.get_expr ().get (), ctx);\n \n@@ -695,7 +745,6 @@ class CompileExpr : public HIRCompileBase\n       }\n     else\n       {\n-\tfncontext fnctx = ctx->peek_fn ();\n \tBexpression *exit_expr = ctx->get_backend ()->exit_expression (\n \t  ctx->get_backend ()->boolean_constant_expression (true),\n \t  expr.get_locus ());"}, {"sha": "ec0f895fdfbba534e4c8740bb5ce48cae71ac21b", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=7366f6decf5ff3c652844913977582c9dec68d53", "patch": "@@ -155,6 +155,8 @@ class ASTLoweringExprWithBlock : public ASTLoweringBase\n \t\t\t   std::move (outer_attribs));\n   }\n \n+  void visit (AST::WhileLoopExpr &expr);\n+\n private:\n   ASTLoweringExprWithBlock ()\n     : ASTLoweringBase (), translated (nullptr), terminated (false)"}, {"sha": "8e80c7acd5a98ad563278e041f2682c66dbaeeb6", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=7366f6decf5ff3c652844913977582c9dec68d53", "patch": "@@ -700,6 +700,11 @@ class ASTLoweringExpr : public ASTLoweringBase\n     translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n   }\n \n+  void visit (AST::WhileLoopExpr &expr)\n+  {\n+    translated = ASTLoweringExprWithBlock::translate (&expr, &terminated);\n+  }\n+\n   void visit (AST::BreakExpr &expr)\n   {\n     std::vector<HIR::Attribute> outer_attribs;"}, {"sha": "230919a986f8e9d4827ff1bbc8202b49b548c91d", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=7366f6decf5ff3c652844913977582c9dec68d53", "patch": "@@ -242,5 +242,32 @@ ASTLowerStructExprField::visit (AST::StructExprFieldIdentifier &field)\n \t\t\t\t\t  field.get_locus ());\n }\n \n+// rust-ast-lower-block.h\n+\n+void\n+ASTLoweringExprWithBlock::visit (AST::WhileLoopExpr &expr)\n+{\n+  std::vector<HIR::Attribute> outer_attribs;\n+  HIR::BlockExpr *loop_block\n+    = ASTLoweringBlock::translate (expr.get_loop_block ().get (), &terminated);\n+\n+  HIR::LoopLabel loop_label = lower_loop_label (expr.get_loop_label ());\n+  HIR::Expr *loop_condition\n+    = ASTLoweringExpr::translate (expr.get_predicate_expr ().get (),\n+\t\t\t\t  &terminated);\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::WhileLoopExpr (mapping,\n+\t\t\t      std::unique_ptr<HIR::Expr> (loop_condition),\n+\t\t\t      std::unique_ptr<HIR::BlockExpr> (loop_block),\n+\t\t\t      expr.get_locus (), std::move (loop_label),\n+\t\t\t      std::move (outer_attribs));\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "3fd2ebc1b31455c9b847b0c450eb82892dc2ef7c", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=7366f6decf5ff3c652844913977582c9dec68d53", "patch": "@@ -3419,6 +3419,8 @@ class WhileLoopExpr : public BaseLoopExpr\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  std::unique_ptr<Expr> &get_predicate_expr () { return condition; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "38a878c42e86d50115a113dfb85f03de127e21b4", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=7366f6decf5ff3c652844913977582c9dec68d53", "patch": "@@ -297,6 +297,36 @@ class ResolveExpr : public ResolverBase\n       ResolveExpr::go (expr.get_break_expr ().get (), expr.get_node_id ());\n   }\n \n+  void visit (AST::WhileLoopExpr &expr)\n+  {\n+    if (expr.has_loop_label ())\n+      {\n+\tauto label = expr.get_loop_label ();\n+\tif (label.get_lifetime ().get_lifetime_type ()\n+\t    != AST::Lifetime::LifetimeType::NAMED)\n+\t  {\n+\t    rust_error_at (label.get_locus (),\n+\t\t\t   \"Labels must be a named lifetime value\");\n+\t    return;\n+\t  }\n+\n+\tauto label_name = label.get_lifetime ().get_lifetime_name ();\n+\tauto label_lifetime_node_id = label.get_lifetime ().get_node_id ();\n+\tresolver->get_label_scope ().insert (\n+\t  label_name, label_lifetime_node_id, label.get_locus (), false,\n+\t  [&] (std::string, NodeId, Location locus) -> void {\n+\t    rust_error_at (label.get_locus (),\n+\t\t\t   \"label redefined multiple times\");\n+\t    rust_error_at (locus, \"was defined here\");\n+\t  });\n+\tresolver->insert_new_definition (label_lifetime_node_id,\n+\t\t\t\t\t Definition{label_lifetime_node_id,\n+\t\t\t\t\t\t    label.get_node_id ()});\n+      }\n+    ResolveExpr::go (expr.get_predicate_expr ().get (), expr.get_node_id ());\n+    ResolveExpr::go (expr.get_loop_block ().get (), expr.get_node_id ());\n+  }\n+\n private:\n   ResolveExpr (NodeId parent) : ResolverBase (parent) {}\n };"}, {"sha": "7062f54c5db422b133412b9f6d7369ea1d9479aa", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=7366f6decf5ff3c652844913977582c9dec68d53", "patch": "@@ -670,10 +670,6 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::GroupedExpr &expr)\n   {\n-    printf (\"inside grouped expr: \\n%s\\n inside it is: \\n%s\\n\",\n-\t    expr.as_string ().c_str (),\n-\t    expr.get_expr_in_parens ()->as_string ().c_str ());\n-\n     infered = TypeCheckExpr::Resolve (expr.get_expr_in_parens ().get (), false);\n   }\n \n@@ -758,7 +754,15 @@ class TypeCheckExpr : public TypeCheckBase\n   void visit (HIR::LoopExpr &expr)\n   {\n     context->push_new_loop_context (expr.get_mappings ().get_hirid ());\n-    TypeCheckExpr::Resolve (expr.get_loop_block ().get (), true);\n+    TyTy::TyBase *block_expr\n+      = TypeCheckExpr::Resolve (expr.get_loop_block ().get (), true);\n+    if (block_expr->get_kind () != TyTy::TypeKind::UNIT)\n+      {\n+\trust_error_at (expr.get_loop_block ()->get_locus_slow (),\n+\t\t       \"expected () got %s\", block_expr->as_string ().c_str ());\n+\treturn;\n+      }\n+\n     TyTy::TyBase *loop_context_type = context->pop_loop_context ();\n \n     bool loop_context_type_infered\n@@ -772,6 +776,25 @@ class TypeCheckExpr : public TypeCheckBase\n \t\t: new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n+  void visit (HIR::WhileLoopExpr &expr)\n+  {\n+    context->push_new_while_loop_context (expr.get_mappings ().get_hirid ());\n+\n+    TypeCheckExpr::Resolve (expr.get_predicate_expr ().get (), false);\n+    TyTy::TyBase *block_expr\n+      = TypeCheckExpr::Resolve (expr.get_loop_block ().get (), true);\n+\n+    if (block_expr->get_kind () != TyTy::TypeKind::UNIT)\n+      {\n+\trust_error_at (expr.get_loop_block ()->get_locus_slow (),\n+\t\t       \"expected () got %s\", block_expr->as_string ().c_str ());\n+\treturn;\n+      }\n+\n+    context->pop_loop_context ();\n+    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+  }\n+\n   void visit (HIR::BreakExpr &expr)\n   {\n     if (!inside_loop)\n@@ -786,6 +809,13 @@ class TypeCheckExpr : public TypeCheckBase\n \t  = TypeCheckExpr::Resolve (expr.get_expr ().get (), false);\n \n \tTyTy::TyBase *loop_context = context->peek_loop_context ();\n+\tif (loop_context->get_kind () == TyTy::TypeKind::ERROR)\n+\t  {\n+\t    rust_error_at (expr.get_locus (),\n+\t\t\t   \"can only break with a value inside `loop`\");\n+\t    return;\n+\t  }\n+\n \tTyTy::TyBase *combined = loop_context->combine (break_expr_tyty);\n \tcontext->swap_head_loop_context (combined);\n       }"}, {"sha": "aa11b7e1e45dc09bdeafb27e88667892240b577b", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=7366f6decf5ff3c652844913977582c9dec68d53", "patch": "@@ -63,6 +63,12 @@ class TypeCheckContext\n     loop_type_stack.push_back (infer_var);\n   }\n \n+  void push_new_while_loop_context (HirId id)\n+  {\n+    TyTy::TyBase *infer_var = new TyTy::ErrorType (id);\n+    loop_type_stack.push_back (infer_var);\n+  }\n+\n   TyTy::TyBase *peek_loop_context () { return loop_type_stack.back (); }\n \n   TyTy::TyBase *pop_loop_context ()"}, {"sha": "ecd3ad4fd81fa5106f389ff23ad0d3e7d4ce8222", "filename": "gcc/testsuite/rust.test/compilable/loop6.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop6.rs?ref=7366f6decf5ff3c652844913977582c9dec68d53", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    let mut a = 1;\n+    let mut b = 1;\n+\n+    let mut c;\n+    while b > 10 {\n+        c = a + b;\n+        a = b;\n+        b = c;\n+    }\n+}"}, {"sha": "53cee9a19b1b3b2d89957f20b1b0e33ede303987", "filename": "gcc/testsuite/rust.test/fail_compilation/break2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fbreak2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7366f6decf5ff3c652844913977582c9dec68d53/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fbreak2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Fbreak2.rs?ref=7366f6decf5ff3c652844913977582c9dec68d53", "patch": "@@ -0,0 +1,14 @@\n+fn main() {\n+    let mut a = 1;\n+    let mut b = 1;\n+\n+    let mut c;\n+    while b > 10 {\n+        if (b == 2) {\n+            break b;\n+        }\n+        c = a + b;\n+        a = b;\n+        b = c;\n+    }\n+}"}]}