{"sha": "21423a1dfa079d4cd218f69d2fab9fe65a69fedb", "node_id": "C_kwDOANBUbNoAKDIxNDIzYTFkZmEwNzlkNGNkMjE4ZjY5ZDJmYWI5ZmU2NWE2OWZlZGI", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2021-12-16T17:38:30Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2021-12-18T08:21:16Z"}, "message": "Fortran: Cast arguments of <ctype.h> functions to unsigned char\n\nFunctions from <ctype.h> should only be called on values that can be\nrepresented by unsigned char. On targets where char is a signed type,\nsome of libgfortran calls have undefined behaviour.\n\nThe solution is to cast the argument to unsigned char type. I\u2019ve defined\nmacros in libgfortran.h to do so, to retain legibility of the library\ncode.\n\nPR libfortran/95177\n\nlibgfortran/ChangeLog\n\n\t* libgfortran.h: include ctype.h, provide safe macros.\n\t* io/format.c: use safe macros.\n\t* io/list_read.c: use safe macros.\n\t* io/read.c: use safe macros.\n\t* io/write.c: use safe macros.\n\t* runtime/environ.c: use safe macros.", "tree": {"sha": "08f1191472543839ad785d3bc99b304118528fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08f1191472543839ad785d3bc99b304118528fba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21423a1dfa079d4cd218f69d2fab9fe65a69fedb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21423a1dfa079d4cd218f69d2fab9fe65a69fedb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21423a1dfa079d4cd218f69d2fab9fe65a69fedb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21423a1dfa079d4cd218f69d2fab9fe65a69fedb/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f18cbc1ee1f421a0dd79dc389bef9a23dd4a761d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18cbc1ee1f421a0dd79dc389bef9a23dd4a761d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18cbc1ee1f421a0dd79dc389bef9a23dd4a761d"}], "stats": {"total": 64, "additions": 37, "deletions": 27}, "files": [{"sha": "927e3785a34bb65138d59d3c119d5b9281b19ef2", "filename": "libgfortran/io/format.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21423a1dfa079d4cd218f69d2fab9fe65a69fedb/libgfortran%2Fio%2Fformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21423a1dfa079d4cd218f69d2fab9fe65a69fedb/libgfortran%2Fio%2Fformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fformat.c?ref=21423a1dfa079d4cd218f69d2fab9fe65a69fedb", "patch": "@@ -29,7 +29,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include \"io.h\"\n #include \"format.h\"\n-#include <ctype.h>\n #include <string.h>\n \n \n@@ -193,7 +192,7 @@ next_char (format_data *fmt, int literal)\n \treturn -1;\n \n       fmt->format_string_len--;\n-      c = toupper (*fmt->format_string++);\n+      c = safe_toupper (*fmt->format_string++);\n       fmt->error_element = c;\n     }\n   while ((c == ' ' || c == '\\t') && !literal);\n@@ -328,7 +327,7 @@ format_lex (format_data *fmt)\n \n     case '+':\n       c = next_char (fmt, 0);\n-      if (!isdigit (c))\n+      if (!safe_isdigit (c))\n \t{\n \t  token = FMT_UNKNOWN;\n \t  break;\n@@ -339,7 +338,7 @@ format_lex (format_data *fmt)\n       for (;;)\n \t{\n \t  c = next_char (fmt, 0);\n-\t  if (!isdigit (c))\n+\t  if (!safe_isdigit (c))\n \t    break;\n \n \t  fmt->value = 10 * fmt->value + c - '0';\n@@ -367,7 +366,7 @@ format_lex (format_data *fmt)\n       for (;;)\n \t{\n \t  c = next_char (fmt, 0);\n-\t  if (!isdigit (c))\n+\t  if (!safe_isdigit (c))\n \t    break;\n \n \t  fmt->value = 10 * fmt->value + c - '0';"}, {"sha": "f902ee4fe1ded466458fed8d2c168c95347134a0", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21423a1dfa079d4cd218f69d2fab9fe65a69fedb/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21423a1dfa079d4cd218f69d2fab9fe65a69fedb/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=21423a1dfa079d4cd218f69d2fab9fe65a69fedb", "patch": "@@ -29,7 +29,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"fbuf.h\"\n #include \"unix.h\"\n #include <string.h>\n-#include <ctype.h>\n \n typedef unsigned char uchar;\n \n@@ -811,7 +810,7 @@ read_logical (st_parameter_dt *dtp, int length)\n   if (parse_repeat (dtp))\n     return;\n \n-  c = tolower (next_char (dtp));\n+  c = safe_tolower (next_char (dtp));\n   l_push_char (dtp, c);\n   switch (c)\n     {\n@@ -837,7 +836,7 @@ read_logical (st_parameter_dt *dtp, int length)\n       break;\n \n     case '.':\n-      c = tolower (next_char (dtp));\n+      c = safe_tolower (next_char (dtp));\n       switch (c)\n \t{\n \t  case 't':\n@@ -1052,7 +1051,7 @@ read_integer (st_parameter_dt *dtp, int length)\n     }\n \n  get_integer:\n-  if (!isdigit (c))\n+  if (!safe_isdigit (c))\n     goto bad_integer;\n   push_char (dtp, c);\n \n@@ -1303,7 +1302,7 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n   if (c == ',' && dtp->u.p.current_unit->decimal_status == DECIMAL_COMMA)\n     c = '.';\n \n-  if (!isdigit (c) && c != '.')\n+  if (!safe_isdigit (c) && c != '.')\n     {\n       if (c == 'i' || c == 'I' || c == 'n' || c == 'N')\n \tgoto inf_nan;\n@@ -1377,7 +1376,7 @@ parse_real (st_parameter_dt *dtp, void *buffer, int length)\n     }\n \n  exp2:\n-  if (!isdigit (c))\n+  if (!safe_isdigit (c))\n     {\n       /* Extension: allow default exponent of 0 when omitted.  */\n       if (dtp->common.flags & IOPARM_DT_DEC_EXT)\n@@ -1748,7 +1747,7 @@ read_real (st_parameter_dt *dtp, void *dest, int length)\n   if (c == ',' && dtp->u.p.current_unit->decimal_status == DECIMAL_COMMA)\n     c = '.';\n \n-  if (!isdigit (c) && c != '.')\n+  if (!safe_isdigit (c) && c != '.')\n     {\n       if (c == 'i' || c == 'I' || c == 'n' || c == 'N')\n \tgoto inf_nan;\n@@ -1828,7 +1827,7 @@ read_real (st_parameter_dt *dtp, void *dest, int length)\n     }\n \n  exp2:\n-  if (!isdigit (c))\n+  if (!safe_isdigit (c))\n     {\n       /* Extension: allow default exponent of 0 when omitted.  */\n       if (dtp->common.flags & IOPARM_DT_DEC_EXT)\n@@ -2757,7 +2756,7 @@ nml_match_name (st_parameter_dt *dtp, const char *name, index_type len)\n   for (i = 0; i < len; i++)\n     {\n       c = next_char (dtp);\n-      if (c == EOF || (tolower (c) != tolower (name[i])))\n+      if (c == EOF || (safe_tolower (c) != safe_tolower (name[i])))\n \t{\n \t  dtp->u.p.nml_read_error = 1;\n \t  break;\n@@ -3286,7 +3285,7 @@ nml_get_obj_data (st_parameter_dt *dtp, namelist_info **pprev_nl,\n   do\n     {\n       if (!is_separator (c))\n-\tpush_char_default (dtp, tolower(c));\n+\tpush_char_default (dtp, safe_tolower(c));\n       if ((c = next_char (dtp)) == EOF)\n \tgoto nml_err_ret;\n     }"}, {"sha": "7b3f137d687fffa8602b3f7f412414c5487412f4", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21423a1dfa079d4cd218f69d2fab9fe65a69fedb/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21423a1dfa079d4cd218f69d2fab9fe65a69fedb/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=21423a1dfa079d4cd218f69d2fab9fe65a69fedb", "patch": "@@ -28,7 +28,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"format.h\"\n #include \"unix.h\"\n #include <string.h>\n-#include <ctype.h>\n #include <assert.h>\n #include \"async.h\"\n \n@@ -959,7 +958,7 @@ read_f (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n \t between \"NaN\" and the optional perenthesis is not permitted.  */\n       while (w > 0)\n \t{\n-\t  *out = tolower (*p);\n+\t  *out = safe_tolower (*p);\n \t  switch (*p)\n \t    {\n \t    case ' ':\n@@ -981,7 +980,7 @@ read_f (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n \t\tgoto bad_float;\n \t      break;\n \t    default:\n-\t      if (!isalnum (*out))\n+\t      if (!safe_isalnum (*out))\n \t\tgoto bad_float;\n \t    }\n \t  --w;\n@@ -1109,7 +1108,7 @@ read_f (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n \n   if (dtp->u.p.blank_status == BLANK_UNSPECIFIED)\n     {\n-      while (w > 0 && isdigit (*p))\n+      while (w > 0 && safe_isdigit (*p))\n \t{\n \t  exponent *= 10;\n \t  exponent += *p - '0';\n@@ -1137,7 +1136,7 @@ read_f (st_parameter_dt *dtp, const fnode *f, char *dest, int length)\n \t      else\n \t\tassert (dtp->u.p.blank_status == BLANK_NULL);\n \t    }\n-\t  else if (!isdigit (*p))\n+\t  else if (!safe_isdigit (*p))\n \t    goto bad_float;\n \t  else\n \t    {"}, {"sha": "b9e92845bcf7a55c4f6ad800fd4d9a1f63db341a", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21423a1dfa079d4cd218f69d2fab9fe65a69fedb/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21423a1dfa079d4cd218f69d2fab9fe65a69fedb/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=21423a1dfa079d4cd218f69d2fab9fe65a69fedb", "patch": "@@ -30,7 +30,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"unix.h\"\n #include <assert.h>\n #include <string.h>\n-#include <ctype.h>\n \n #define star_fill(p, n) memset(p, '*', n)\n \n@@ -2101,14 +2100,14 @@ nml_write_obj (st_parameter_dt *dtp, namelist_info *obj, index_type offset,\n \t  base_name_len = strlen (base_name);\n \t  for (dim_i = 0; dim_i < base_name_len; dim_i++)\n             {\n-\t      cup = toupper ((int) base_name[dim_i]);\n+\t      cup = safe_toupper (base_name[dim_i]);\n \t      write_character (dtp, &cup, 1, 1, NODELIM);\n             }\n \t}\n       clen = strlen (obj->var_name);\n       for (dim_i = len; dim_i < clen; dim_i++)\n \t{\n-\t  cup = toupper ((int) obj->var_name[dim_i]);\n+\t  cup = safe_toupper (obj->var_name[dim_i]);\n \t  if (cup == '+')\n \t    cup = '%';\n \t  write_character (dtp, &cup, 1, 1, NODELIM);\n@@ -2426,7 +2425,7 @@ namelist_write (st_parameter_dt *dtp)\n   /* Write namelist name in upper case - f95 std.  */\n   for (gfc_charlen_type i = 0; i < dtp->namelist_name_len; i++ )\n     {\n-      c = toupper ((int) dtp->namelist_name[i]);\n+      c = safe_toupper (dtp->namelist_name[i]);\n       write_character (dtp, &c, 1 ,1, NODELIM);\n     }\n "}, {"sha": "93e3591b21fd27e021b010a38ffc9039446de70b", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21423a1dfa079d4cd218f69d2fab9fe65a69fedb/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21423a1dfa079d4cd218f69d2fab9fe65a69fedb/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=21423a1dfa079d4cd218f69d2fab9fe65a69fedb", "patch": "@@ -39,6 +39,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* config.h MUST be first because it can affect system headers.  */\n #include \"config.h\"\n \n+#include <ctype.h>\n #include <stdio.h>\n #include <stdlib.h>\n #include <stddef.h>\n@@ -103,6 +104,20 @@ typedef off_t gfc_offset;\n #endif\n \n \n+/* These functions from <ctype.h> should only be used on values that can be\n+   represented as unsigned char, otherwise the behavior is undefined.\n+   Some targets have a char type that is signed, so we cast the argument\n+   to unsigned char. See:\n+     https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95177\n+     https://wiki.sei.cmu.edu/confluence/x/BNcxBQ\n+ */\n+\n+#define safe_isalnum(x) isalnum((unsigned char) (x))\n+#define safe_isdigit(x) isdigit((unsigned char) (x))\n+#define safe_tolower(x) tolower((unsigned char) (x))\n+#define safe_toupper(x) toupper((unsigned char) (x))\n+\n+\n /* The following macros can be used to annotate conditions which are likely or\n    unlikely to be true.  Avoid using them when a condition is only slightly\n    more likely/less unlikely than average to avoid the performance penalties of"}, {"sha": "ce408cf11af40ea745863522d418aefbc92cbc12", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21423a1dfa079d4cd218f69d2fab9fe65a69fedb/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21423a1dfa079d4cd218f69d2fab9fe65a69fedb/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=21423a1dfa079d4cd218f69d2fab9fe65a69fedb", "patch": "@@ -26,7 +26,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #include <string.h>\n #include <strings.h>\n-#include <ctype.h>\n \n #ifdef HAVE_UNISTD_H\n #include <unistd.h>\n@@ -91,7 +90,7 @@ init_integer (variable * v)\n     return;\n \n   for (q = p; *q; q++)\n-    if (!isdigit (*q) && (p != q || *q != '-'))\n+    if (!safe_isdigit (*q) && (p != q || *q != '-'))\n       return;\n \n   *v->var = atoi (p);\n@@ -344,7 +343,7 @@ static int\n match_integer (void)\n {\n   unit_num = 0;\n-  while (isdigit (*p))\n+  while (safe_isdigit (*p))\n     unit_num = unit_num * 10 + (*p++ - '0');\n   return INTEGER;\n }"}]}