{"sha": "71b5d516bc6cd5fc865ac560e4bea70607207272", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFiNWQ1MTZiYzZjZDVmYzg2NWFjNTYwZTRiZWE3MDYwNzIwNzI3Mg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-08-31T09:27:00Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-08-31T09:27:00Z"}, "message": "Made fixincludes a toplevel build module.\n\ntoplevel:\n2004-08-31  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* Makefile.def (build_modules): Add fixincludes.\n\t(dependencies): Make gcc depend on fixincludes.\n\t* configure.in (build_tools): Add fixincludes.\n\t(build_configdirs): Always include build_libs.\n\t* Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\ncontrib:\n2004-08-04  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* gcc_update: Add fixincludes.\n\nfixincludes:\n2004-08-31  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* .cvsignore: New.\n\t* Makefile.in: From gcc/fixinc/Makefile.in, making it fully\n\tautoconfiscated.\n\t* configure.ac: New.\n\t* config.h.in: Generate.\n\t* configure: Generate.\n\t* aclocal.m4: New.\n\t* fixlib.h: Remove inclusions of gcc files.\n\t* system.h: New.\n\n\tOther files copied from gcc/fixinc.\n\ngcc:\n2004-08-31  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* Makefile.in (build_subdir): New substitution.\n\t(fixinc.sh): Simplify heavily since fixincludes is already built.\n\t(stmp-fixinc): Depend on specs.ready.\n\t(install-mkheaders): Use new location of fixincludes.\n\t(clean): Do not descend into fixinc.\n\t(FORBUILD): Replace with ../$(build_subdir).\n\t* configure.ac (build_subdir): Substitute.\n\t(FORBUILD): Do not set.\n\t(all_outputs): Remove fixinc/Makefile.\n\t(default commands): Do not create links in fixinc.\n\t* mkfixinc.sh: New, from fixinc/mkfixinc.sh without\n\tthe fixincludes configuration steps and substituting\n\t@FIXINCL@ in fixinc.in.\n\t* fixinc.in: New, from fixinc/fixincl.sh.\n\n\t* fixinc/*: Removed.\n\nFrom-SVN: r86824", "tree": {"sha": "e19ddbe1d510ce04084d29a56d22cd1051cc1767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e19ddbe1d510ce04084d29a56d22cd1051cc1767"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71b5d516bc6cd5fc865ac560e4bea70607207272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b5d516bc6cd5fc865ac560e4bea70607207272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b5d516bc6cd5fc865ac560e4bea70607207272", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b5d516bc6cd5fc865ac560e4bea70607207272/comments", "author": null, "committer": null, "parents": [{"sha": "f7b0fb680c62cc0e246909ec8be88c10e85e3d69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b0fb680c62cc0e246909ec8be88c10e85e3d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7b0fb680c62cc0e246909ec8be88c10e85e3d69"}], "stats": {"total": 6841, "additions": 6597, "deletions": 244}, "files": [{"sha": "28a4d25672b4e284bebafac58c8a52f4126c5812", "filename": "ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -1,4 +1,13 @@\n-2004-08-26  Paolo Bonzini  <bonzini@gnu.org>\n+2004-08-31  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* Makefile.def (build_modules): Add fixincludes.\n+\t(dependencies): Make gcc depend on fixincludes.\n+\t* configure.in (build_tools): Add fixincludes.\n+\t(build_configdirs): Always include build_libs.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\n+2004-08-30  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* Makefile.def (bootstrap stages): Add 'lean' parameter.\n \t* Makefile.tpl (configure-stageN-*, all-stageN-*): Turned into"}, {"sha": "c279552e80ce0206b36fccee9b9b4518a817f21a", "filename": "Makefile.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -30,6 +30,8 @@ build_modules= { module= byacc; };\n build_modules= { module= flex; };\n build_modules= { module= m4; };\n build_modules= { module= texinfo; };\n+build_modules= { module= fixincludes;\n+\t\t extra_configure_args='--target=$(target)'; };\n \n host_modules= { module= ash; };\n host_modules= { module= autoconf; };\n@@ -232,6 +234,7 @@ dependencies = { module=all-build-flex; on=all-build-byacc; };\n dependencies = { module=all-build-flex; on=all-build-m4; };\n dependencies = { module=all-build-libiberty; on=all-build-texinfo; };\n dependencies = { module=all-build-m4; on=all-build-texinfo; };\n+dependencies = { module=all-build-fixincludes; on=all-build-libiberty; };\n \n // Host modules specific to gcc.\n dependencies = { module=configure-gcc; on=configure-intl; };\n@@ -244,6 +247,8 @@ dependencies = { module=all-gcc; on=all-build-texinfo; };\n dependencies = { module=all-gcc; on=all-build-bison; };\n dependencies = { module=all-gcc; on=all-build-byacc; };\n dependencies = { module=all-gcc; on=all-build-flex; };\n+dependencies = { module=all-gcc; on=all-build-libiberty; };\n+dependencies = { module=all-gcc; on=all-build-fixincludes; };\n dependencies = { module=all-gcc; on=all-binutils; };\n dependencies = { module=all-gcc; on=all-gas; };\n dependencies = { module=all-gcc; on=all-ld; };"}, {"sha": "468d8b0b483bc1c353062f786d11c3b01094e838", "filename": "Makefile.in", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -746,7 +746,8 @@ all-build:  \\\n     maybe-all-build-byacc \\\n     maybe-all-build-flex \\\n     maybe-all-build-m4 \\\n-    maybe-all-build-texinfo\n+    maybe-all-build-texinfo \\\n+    maybe-all-build-fixincludes\n .PHONY: all-host\n all-host:  \\\n     maybe-all-ash \\\n@@ -2454,6 +2455,71 @@ all-build-texinfo: configure-build-texinfo\n \t  $(MAKE)  $(TARGET-build-texinfo))\n @endif build-texinfo\n \n+.PHONY: configure-build-fixincludes maybe-configure-build-fixincludes\n+maybe-configure-build-fixincludes:\n+@if build-fixincludes\n+maybe-configure-build-fixincludes: configure-build-fixincludes\n+configure-build-fixincludes:\n+\t@test ! -f $(BUILD_SUBDIR)/fixincludes/Makefile || exit 0; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(BUILD_SUBDIR)/fixincludes ; \\\n+\tr=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(BUILD_EXPORTS) \\\n+\techo Configuring in $(BUILD_SUBDIR)/fixincludes; \\\n+\tcd \"$(BUILD_SUBDIR)/fixincludes\" || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) \\\n+\t    topdir=$(srcdir) ;; \\\n+\t  *) \\\n+\t    case \"$(BUILD_SUBDIR)\" in \\\n+\t      .) topdir=\"../$(srcdir)\" ;; \\\n+\t      *) topdir=\"../../$(srcdir)\" ;; \\\n+\t    esac ;; \\\n+\tesac; \\\n+\tif [ \"$(srcdir)\" = \".\" ] ; then \\\n+\t  if [ \"$(BUILD_SUBDIR)\" != \".\" ] ; then \\\n+\t    if $(SHELL) $$s/symlink-tree $${topdir}/fixincludes \"no-such-file\" ; then \\\n+\t      if [ -f Makefile ]; then \\\n+\t        if $(MAKE) distclean; then \\\n+\t          true; \\\n+\t        else \\\n+\t          exit 1; \\\n+\t        fi; \\\n+\t      else \\\n+\t        true; \\\n+\t      fi; \\\n+\t    else \\\n+\t      exit 1; \\\n+\t    fi; \\\n+\t  else \\\n+\t    true; \\\n+\t  fi; \\\n+\t  srcdiroption=\"--srcdir=.\"; \\\n+\t  libsrcdir=\".\"; \\\n+\telse \\\n+\t  srcdiroption=\"--srcdir=$${topdir}/fixincludes\"; \\\n+\t  libsrcdir=\"$$s/fixincludes\"; \\\n+\tfi; \\\n+\trm -f no-such-file || : ; \\\n+\tCONFIG_SITE=no-such-file $(SHELL) $${libsrcdir}/configure \\\n+\t  $(BUILD_CONFIGARGS) $${srcdiroption} \\\n+\t  --with-build-subdir=\"$(BUILD_SUBDIR)\"  \\\n+\t  || exit 1\n+@endif build-fixincludes\n+\n+.PHONY: all-build-fixincludes maybe-all-build-fixincludes\n+maybe-all-build-fixincludes:\n+@if build-fixincludes\n+TARGET-build-fixincludes=all\n+maybe-all-build-fixincludes: all-build-fixincludes\n+all-build-fixincludes: configure-build-fixincludes\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\t$(BUILD_EXPORTS) \\\n+\t(cd $(BUILD_SUBDIR)/fixincludes && \\\n+\t  $(MAKE)  $(TARGET-build-fixincludes))\n+@endif build-fixincludes\n+\n \n # --------------------------------------\n # Modules which run on the host machine\n@@ -32087,6 +32153,7 @@ all-build-flex: maybe-all-build-byacc\n all-build-flex: maybe-all-build-m4\n all-build-libiberty: maybe-all-build-texinfo\n all-build-m4: maybe-all-build-texinfo\n+all-build-fixincludes: maybe-all-build-libiberty\n configure-gcc: maybe-configure-intl\n \n configure-stage1-gcc: maybe-configure-stage1-intl\n@@ -32171,6 +32238,24 @@ all-stage4-gcc: maybe-all-build-flex\n all-stageprofile-gcc: maybe-all-build-flex\n all-stagefeedback-gcc: maybe-all-build-flex\n all-prebootstrap: maybe-all-build-flex\n+all-gcc: maybe-all-build-libiberty\n+\n+all-stage1-gcc: maybe-all-build-libiberty\n+all-stage2-gcc: maybe-all-build-libiberty\n+all-stage3-gcc: maybe-all-build-libiberty\n+all-stage4-gcc: maybe-all-build-libiberty\n+all-stageprofile-gcc: maybe-all-build-libiberty\n+all-stagefeedback-gcc: maybe-all-build-libiberty\n+all-prebootstrap: maybe-all-build-libiberty\n+all-gcc: maybe-all-build-fixincludes\n+\n+all-stage1-gcc: maybe-all-build-fixincludes\n+all-stage2-gcc: maybe-all-build-fixincludes\n+all-stage3-gcc: maybe-all-build-fixincludes\n+all-stage4-gcc: maybe-all-build-fixincludes\n+all-stageprofile-gcc: maybe-all-build-fixincludes\n+all-stagefeedback-gcc: maybe-all-build-fixincludes\n+all-prebootstrap: maybe-all-build-fixincludes\n all-gcc: maybe-all-binutils\n \n all-stage1-gcc: maybe-all-stage1-binutils"}, {"sha": "834a3101b01552c7eb5e6e12fb423d02bb20ac6d", "filename": "configure", "status": "modified", "additions": 62, "deletions": 68, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -887,7 +887,7 @@ fi\n build_libs=\"build-libiberty\"\n \n # these tools are built for the build environment\n-build_tools=\"build-texinfo build-byacc build-flex build-bison build-m4\"\n+build_tools=\"build-texinfo build-byacc build-flex build-bison build-m4 build-fixincludes\"\n \n # these libraries are used by various programs built for the host environment\n #\n@@ -938,13 +938,7 @@ target_tools=\"target-examples target-groff target-gperf target-rda\"\n ## ${target_configdirs} is directories we build using the target tools.\n configdirs=`echo ${host_libs} ${host_tools}`\n target_configdirs=`echo ${target_libraries} ${target_tools}`\n-\n-# Only make build libraries if build != host.\n-if test ${host_alias} != ${build_alias} ; then\n-  build_configdirs=`echo ${build_libs} ${build_tools}`\n-else\n-  build_configdirs=`echo ${build_tools}`\n-fi\n+build_configdirs=`echo ${build_libs} ${build_tools}`\n \n ################################################################################\n \n@@ -1791,7 +1785,7 @@ else\n   # Extract the first word of \"gcc\", so it can be a program name with args.\n set dummy gcc; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:1795: checking for $ac_word\" >&5\n+echo \"configure:1789: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CC'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -1821,7 +1815,7 @@ if test -z \"$CC\"; then\n   # Extract the first word of \"cc\", so it can be a program name with args.\n set dummy cc; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:1825: checking for $ac_word\" >&5\n+echo \"configure:1819: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CC'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -1872,7 +1866,7 @@ fi\n       # Extract the first word of \"cl\", so it can be a program name with args.\n set dummy cl; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:1876: checking for $ac_word\" >&5\n+echo \"configure:1870: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CC'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -1904,7 +1898,7 @@ fi\n fi\n \n echo $ac_n \"checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\"\"... $ac_c\" 1>&6\n-echo \"configure:1908: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\" >&5\n+echo \"configure:1902: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\" >&5\n \n ac_ext=c\n # CFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n@@ -1915,12 +1909,12 @@ cross_compiling=$ac_cv_prog_cc_cross\n \n cat > conftest.$ac_ext << EOF\n \n-#line 1919 \"configure\"\n+#line 1913 \"configure\"\n #include \"confdefs.h\"\n \n main(){return(0);}\n EOF\n-if { (eval echo configure:1924: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:1918: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   ac_cv_prog_cc_works=yes\n   # If we can't run a trivial program, we are probably using a cross compiler.\n   if (./conftest; exit) 2>/dev/null; then\n@@ -1946,12 +1940,12 @@ if test $ac_cv_prog_cc_works = no; then\n   { echo \"configure: error: installation or configuration problem: C compiler cannot create executables.\" 1>&2; exit 1; }\n fi\n echo $ac_n \"checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\"\"... $ac_c\" 1>&6\n-echo \"configure:1950: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\" >&5\n+echo \"configure:1944: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\" >&5\n echo \"$ac_t\"\"$ac_cv_prog_cc_cross\" 1>&6\n cross_compiling=$ac_cv_prog_cc_cross\n \n echo $ac_n \"checking whether we are using GNU C\"\"... $ac_c\" 1>&6\n-echo \"configure:1955: checking whether we are using GNU C\" >&5\n+echo \"configure:1949: checking whether we are using GNU C\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_gcc'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -1960,7 +1954,7 @@ else\n   yes;\n #endif\n EOF\n-if { ac_try='${CC-cc} -E conftest.c'; { (eval echo configure:1964: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }; } | egrep yes >/dev/null 2>&1; then\n+if { ac_try='${CC-cc} -E conftest.c'; { (eval echo configure:1958: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }; } | egrep yes >/dev/null 2>&1; then\n   ac_cv_prog_gcc=yes\n else\n   ac_cv_prog_gcc=no\n@@ -1979,7 +1973,7 @@ ac_test_CFLAGS=\"${CFLAGS+set}\"\n ac_save_CFLAGS=\"$CFLAGS\"\n CFLAGS=\n echo $ac_n \"checking whether ${CC-cc} accepts -g\"\"... $ac_c\" 1>&6\n-echo \"configure:1983: checking whether ${CC-cc} accepts -g\" >&5\n+echo \"configure:1977: checking whether ${CC-cc} accepts -g\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_cc_g'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2046,7 +2040,7 @@ fi\n # Extract the first word of \"${ac_tool_prefix}gnatbind\", so it can be a program name with args.\n set dummy ${ac_tool_prefix}gnatbind; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:2050: checking for $ac_word\" >&5\n+echo \"configure:2044: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_GNATBIND'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2078,7 +2072,7 @@ if test -n \"$ac_tool_prefix\"; then\n   # Extract the first word of \"gnatbind\", so it can be a program name with args.\n set dummy gnatbind; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:2082: checking for $ac_word\" >&5\n+echo \"configure:2076: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_GNATBIND'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2111,7 +2105,7 @@ fi\n fi\n \n echo $ac_n \"checking whether compiler driver understands Ada\"\"... $ac_c\" 1>&6\n-echo \"configure:2115: checking whether compiler driver understands Ada\" >&5\n+echo \"configure:2109: checking whether compiler driver understands Ada\" >&5\n if eval \"test \\\"`echo '$''{'acx_cv_cc_gcc_supports_ada'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2144,7 +2138,7 @@ else\n fi\n \n echo $ac_n \"checking how to compare bootstrapped objects\"\"... $ac_c\" 1>&6\n-echo \"configure:2148: checking how to compare bootstrapped objects\" >&5\n+echo \"configure:2142: checking how to compare bootstrapped objects\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_prog_cmp_skip'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2242,9 +2236,9 @@ saved_CFLAGS=\"$CFLAGS\"\n CFLAGS=\"$CFLAGS $gmpinc\"\n # Check GMP actually works\n echo $ac_n \"checking for correct version of gmp.h\"\"... $ac_c\" 1>&6\n-echo \"configure:2246: checking for correct version of gmp.h\" >&5\n+echo \"configure:2240: checking for correct version of gmp.h\" >&5\n cat > conftest.$ac_ext <<EOF\n-#line 2248 \"configure\"\n+#line 2242 \"configure\"\n #include \"confdefs.h\"\n #include \"gmp.h\"\n int main() {\n@@ -2255,7 +2249,7 @@ choke me\n \n ; return 0; }\n EOF\n-if { (eval echo configure:2259: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:2253: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   echo \"$ac_t\"\"yes\" 1>&6\n else\n@@ -2268,20 +2262,20 @@ rm -f conftest*\n \n if test x\"$have_gmp\" = xyes; then\n   echo $ac_n \"checking for MPFR\"\"... $ac_c\" 1>&6\n-echo \"configure:2272: checking for MPFR\" >&5\n+echo \"configure:2266: checking for MPFR\" >&5\n \n   saved_LIBS=\"$LIBS\"\n   LIBS=\"$LIBS $gmplibs\"\n   cat > conftest.$ac_ext <<EOF\n-#line 2277 \"configure\"\n+#line 2271 \"configure\"\n #include \"confdefs.h\"\n #include <gmp.h>\n #include <mpfr.h>\n int main() {\n mpfr_t n; mpfr_init(n);\n ; return 0; }\n EOF\n-if { (eval echo configure:2285: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2279: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   echo \"$ac_t\"\"yes\" 1>&6\n else\n@@ -2765,7 +2759,7 @@ do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:2769: checking for $ac_word\" >&5\n+echo \"configure:2763: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CONFIGURED_BISON'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2800,7 +2794,7 @@ do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:2804: checking for $ac_word\" >&5\n+echo \"configure:2798: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CONFIGURED_YACC'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2835,7 +2829,7 @@ do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:2839: checking for $ac_word\" >&5\n+echo \"configure:2833: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CONFIGURED_M4'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2870,7 +2864,7 @@ do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:2874: checking for $ac_word\" >&5\n+echo \"configure:2868: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CONFIGURED_FLEX'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2905,7 +2899,7 @@ do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:2909: checking for $ac_word\" >&5\n+echo \"configure:2903: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CONFIGURED_LEX'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2940,7 +2934,7 @@ do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:2944: checking for $ac_word\" >&5\n+echo \"configure:2938: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CONFIGURED_MAKEINFO'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -3574,7 +3568,7 @@ test -n \"$target_alias\" && ncn_target_tool_prefix=$target_alias-\n   # Extract the first word of \"${ncn_tool_prefix}ar\", so it can be a program name with args.\n set dummy ${ncn_tool_prefix}ar; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:3578: checking for $ac_word\" >&5\n+echo \"configure:3572: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_AR'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -3607,7 +3601,7 @@ if test -z \"$ac_cv_prog_AR\" ; then\n     # Extract the first word of \"ar\", so it can be a program name with args.\n set dummy ar; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:3611: checking for $ac_word\" >&5\n+echo \"configure:3605: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_AR'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -3646,7 +3640,7 @@ fi\n   # Extract the first word of \"${ncn_tool_prefix}as\", so it can be a program name with args.\n set dummy ${ncn_tool_prefix}as; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:3650: checking for $ac_word\" >&5\n+echo \"configure:3644: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_AS'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -3679,7 +3673,7 @@ if test -z \"$ac_cv_prog_AS\" ; then\n     # Extract the first word of \"as\", so it can be a program name with args.\n set dummy as; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:3683: checking for $ac_word\" >&5\n+echo \"configure:3677: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_AS'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -3718,7 +3712,7 @@ fi\n   # Extract the first word of \"${ncn_tool_prefix}dlltool\", so it can be a program name with args.\n set dummy ${ncn_tool_prefix}dlltool; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:3722: checking for $ac_word\" >&5\n+echo \"configure:3716: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_DLLTOOL'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -3751,7 +3745,7 @@ if test -z \"$ac_cv_prog_DLLTOOL\" ; then\n     # Extract the first word of \"dlltool\", so it can be a program name with args.\n set dummy dlltool; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:3755: checking for $ac_word\" >&5\n+echo \"configure:3749: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_DLLTOOL'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -3790,7 +3784,7 @@ fi\n   # Extract the first word of \"${ncn_tool_prefix}ld\", so it can be a program name with args.\n set dummy ${ncn_tool_prefix}ld; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:3794: checking for $ac_word\" >&5\n+echo \"configure:3788: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_LD'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -3823,7 +3817,7 @@ if test -z \"$ac_cv_prog_LD\" ; then\n     # Extract the first word of \"ld\", so it can be a program name with args.\n set dummy ld; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:3827: checking for $ac_word\" >&5\n+echo \"configure:3821: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_LD'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -3862,7 +3856,7 @@ fi\n   # Extract the first word of \"${ncn_tool_prefix}nm\", so it can be a program name with args.\n set dummy ${ncn_tool_prefix}nm; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:3866: checking for $ac_word\" >&5\n+echo \"configure:3860: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_NM'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -3895,7 +3889,7 @@ if test -z \"$ac_cv_prog_NM\" ; then\n     # Extract the first word of \"nm\", so it can be a program name with args.\n set dummy nm; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:3899: checking for $ac_word\" >&5\n+echo \"configure:3893: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_NM'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -3934,7 +3928,7 @@ fi\n   # Extract the first word of \"${ncn_tool_prefix}ranlib\", so it can be a program name with args.\n set dummy ${ncn_tool_prefix}ranlib; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:3938: checking for $ac_word\" >&5\n+echo \"configure:3932: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_RANLIB'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -3967,7 +3961,7 @@ if test -z \"$ac_cv_prog_RANLIB\" ; then\n     # Extract the first word of \"ranlib\", so it can be a program name with args.\n set dummy ranlib; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:3971: checking for $ac_word\" >&5\n+echo \"configure:3965: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_RANLIB'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4006,7 +4000,7 @@ fi\n   # Extract the first word of \"${ncn_tool_prefix}windres\", so it can be a program name with args.\n set dummy ${ncn_tool_prefix}windres; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4010: checking for $ac_word\" >&5\n+echo \"configure:4004: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_WINDRES'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4039,7 +4033,7 @@ if test -z \"$ac_cv_prog_WINDRES\" ; then\n     # Extract the first word of \"windres\", so it can be a program name with args.\n set dummy windres; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4043: checking for $ac_word\" >&5\n+echo \"configure:4037: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_WINDRES'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4078,7 +4072,7 @@ fi\n   # Extract the first word of \"${ncn_tool_prefix}objcopy\", so it can be a program name with args.\n set dummy ${ncn_tool_prefix}objcopy; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4082: checking for $ac_word\" >&5\n+echo \"configure:4076: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_OBJCOPY'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4111,7 +4105,7 @@ if test -z \"$ac_cv_prog_OBJCOPY\" ; then\n     # Extract the first word of \"objcopy\", so it can be a program name with args.\n set dummy objcopy; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4115: checking for $ac_word\" >&5\n+echo \"configure:4109: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_OBJCOPY'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4150,7 +4144,7 @@ fi\n   # Extract the first word of \"${ncn_tool_prefix}objdump\", so it can be a program name with args.\n set dummy ${ncn_tool_prefix}objdump; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4154: checking for $ac_word\" >&5\n+echo \"configure:4148: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_OBJDUMP'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4183,7 +4177,7 @@ if test -z \"$ac_cv_prog_OBJDUMP\" ; then\n     # Extract the first word of \"objdump\", so it can be a program name with args.\n set dummy objdump; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4187: checking for $ac_word\" >&5\n+echo \"configure:4181: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_OBJDUMP'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4229,7 +4223,7 @@ fi\n   # Extract the first word of \"${ncn_target_tool_prefix}ar\", so it can be a program name with args.\n set dummy ${ncn_target_tool_prefix}ar; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4233: checking for $ac_word\" >&5\n+echo \"configure:4227: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CONFIGURED_AR_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4262,7 +4256,7 @@ if test -z \"$ac_cv_prog_CONFIGURED_AR_FOR_TARGET\" ; then\n     # Extract the first word of \"ar\", so it can be a program name with args.\n set dummy ar; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4266: checking for $ac_word\" >&5\n+echo \"configure:4260: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_CONFIGURED_AR_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4301,7 +4295,7 @@ fi\n   # Extract the first word of \"${ncn_target_tool_prefix}as\", so it can be a program name with args.\n set dummy ${ncn_target_tool_prefix}as; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4305: checking for $ac_word\" >&5\n+echo \"configure:4299: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CONFIGURED_AS_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4334,7 +4328,7 @@ if test -z \"$ac_cv_prog_CONFIGURED_AS_FOR_TARGET\" ; then\n     # Extract the first word of \"as\", so it can be a program name with args.\n set dummy as; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4338: checking for $ac_word\" >&5\n+echo \"configure:4332: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_CONFIGURED_AS_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4373,7 +4367,7 @@ fi\n   # Extract the first word of \"${ncn_target_tool_prefix}dlltool\", so it can be a program name with args.\n set dummy ${ncn_target_tool_prefix}dlltool; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4377: checking for $ac_word\" >&5\n+echo \"configure:4371: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CONFIGURED_DLLTOOL_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4406,7 +4400,7 @@ if test -z \"$ac_cv_prog_CONFIGURED_DLLTOOL_FOR_TARGET\" ; then\n     # Extract the first word of \"dlltool\", so it can be a program name with args.\n set dummy dlltool; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4410: checking for $ac_word\" >&5\n+echo \"configure:4404: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_CONFIGURED_DLLTOOL_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4445,7 +4439,7 @@ fi\n   # Extract the first word of \"${ncn_target_tool_prefix}ld\", so it can be a program name with args.\n set dummy ${ncn_target_tool_prefix}ld; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4449: checking for $ac_word\" >&5\n+echo \"configure:4443: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CONFIGURED_LD_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4478,7 +4472,7 @@ if test -z \"$ac_cv_prog_CONFIGURED_LD_FOR_TARGET\" ; then\n     # Extract the first word of \"ld\", so it can be a program name with args.\n set dummy ld; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4482: checking for $ac_word\" >&5\n+echo \"configure:4476: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_CONFIGURED_LD_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4517,7 +4511,7 @@ fi\n   # Extract the first word of \"${ncn_target_tool_prefix}nm\", so it can be a program name with args.\n set dummy ${ncn_target_tool_prefix}nm; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4521: checking for $ac_word\" >&5\n+echo \"configure:4515: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CONFIGURED_NM_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4550,7 +4544,7 @@ if test -z \"$ac_cv_prog_CONFIGURED_NM_FOR_TARGET\" ; then\n     # Extract the first word of \"nm\", so it can be a program name with args.\n set dummy nm; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4554: checking for $ac_word\" >&5\n+echo \"configure:4548: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_CONFIGURED_NM_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4589,7 +4583,7 @@ fi\n   # Extract the first word of \"${ncn_target_tool_prefix}ranlib\", so it can be a program name with args.\n set dummy ${ncn_target_tool_prefix}ranlib; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4593: checking for $ac_word\" >&5\n+echo \"configure:4587: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CONFIGURED_RANLIB_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4622,7 +4616,7 @@ if test -z \"$ac_cv_prog_CONFIGURED_RANLIB_FOR_TARGET\" ; then\n     # Extract the first word of \"ranlib\", so it can be a program name with args.\n set dummy ranlib; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4626: checking for $ac_word\" >&5\n+echo \"configure:4620: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_CONFIGURED_RANLIB_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4661,7 +4655,7 @@ fi\n   # Extract the first word of \"${ncn_target_tool_prefix}windres\", so it can be a program name with args.\n set dummy ${ncn_target_tool_prefix}windres; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4665: checking for $ac_word\" >&5\n+echo \"configure:4659: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CONFIGURED_WINDRES_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4694,7 +4688,7 @@ if test -z \"$ac_cv_prog_CONFIGURED_WINDRES_FOR_TARGET\" ; then\n     # Extract the first word of \"windres\", so it can be a program name with args.\n set dummy windres; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:4698: checking for $ac_word\" >&5\n+echo \"configure:4692: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_prog_ncn_cv_CONFIGURED_WINDRES_FOR_TARGET'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -4779,7 +4773,7 @@ RANLIB_FOR_TARGET=${RANLIB_FOR_TARGET}${extra_ranlibflags_for_target}\n NM_FOR_TARGET=${NM_FOR_TARGET}${extra_nmflags_for_target}\n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:4783: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:4777: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\"\n@@ -4826,7 +4820,7 @@ esac\n # gcc for stageN-gcc and stagePREV-gcc for stage(N-1).  In case this is not\n # possible, however, we can resort to mv.\n echo $ac_n \"checking if symbolic links between directories work\"\"... $ac_c\" 1>&6\n-echo \"configure:4830: checking if symbolic links between directories work\" >&5\n+echo \"configure:4824: checking if symbolic links between directories work\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_prog_ln_s_dir'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else"}, {"sha": "8c11c6d8cde05cd9cddd34e7a32b6fca795a180e", "filename": "configure.in", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/configure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/configure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.in?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -132,7 +132,7 @@ fi\n build_libs=\"build-libiberty\"\n \n # these tools are built for the build environment\n-build_tools=\"build-texinfo build-byacc build-flex build-bison build-m4\"\n+build_tools=\"build-texinfo build-byacc build-flex build-bison build-m4 build-fixincludes\"\n \n # these libraries are used by various programs built for the host environment\n #\n@@ -183,13 +183,7 @@ target_tools=\"target-examples target-groff target-gperf target-rda\"\n ## ${target_configdirs} is directories we build using the target tools.\n configdirs=`echo ${host_libs} ${host_tools}`\n target_configdirs=`echo ${target_libraries} ${target_tools}`\n-\n-# Only make build libraries if build != host.\n-if test ${host_alias} != ${build_alias} ; then\n-  build_configdirs=`echo ${build_libs} ${build_tools}`\n-else\n-  build_configdirs=`echo ${build_tools}`\n-fi\n+build_configdirs=`echo ${build_libs} ${build_tools}`\n \n ################################################################################\n "}, {"sha": "d79d1173566d1e07c907f662eef423049c24d4bf", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -1,3 +1,7 @@\n+2004-08-04  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* gcc_update: Add fixincludes.\n+\n 2004-08-26  Matthias Klose  <doko@debian.org>\n \n \t* texi2pod.pl: keep references of the form @ref{...}, print them bold.\n@@ -16,7 +20,7 @@\n \t* gcc_update (self): libjava/configure.in -> configure.ac. Automake\n \tupdate done.\n \n-2004-08-04  Paolo Bonzini  <gcc@gcc.gnu.org>\n+2004-08-04  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* gcc_update: libjava/configure.ac -> configure.in.  Automake\n \t1.4 does not handle configure.ac properly."}, {"sha": "78de2f629728c5094c871c3a72229732a8fc17db", "filename": "contrib/gcc_update", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/contrib%2Fgcc_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/contrib%2Fgcc_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc_update?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -56,6 +56,9 @@ self=$0\n # colon is stripped from the output.\n files_and_dependencies () {\n     sed -e 's/ *#.*//' -e '/^$/d' -e 's/://' <<\\EOF\n+# fixincludes\n+fixincludes/configure: fixincludes/configure.ac fixincludes/aclocal.m4\n+fixincludes/config.h.in: fixincludes/configure.ac fixincludes/aclocal.m4\n # intl library\n intl/plural.c: intl/plural.y\n intl/configure: intl/configure.ac intl/aclocal.m4"}, {"sha": "d89921897ae6b00d4a280883194d448ed042c839", "filename": "fixincludes/.cvsignore", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2F.cvsignore", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2F.cvsignore", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2F.cvsignore?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -0,0 +1 @@\n+autom4te.cache"}, {"sha": "0d09aecb9bce11a17c77f99de4fd468b34dad404", "filename": "fixincludes/ChangeLog", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -0,0 +1,13 @@\n+2004-08-31  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* .cvsignore: New.\n+\t* Makefile.in: From gcc/fixinc/Makefile.in, making it fully\n+\tautoconfiscated.\n+\t* configure.ac: New.\n+\t* config.h.in: Generate.\n+\t* configure: Generate.\n+\t* aclocal.m4: New.\n+\t* fixlib.h: Remove inclusions of gcc files.\n+\t* system.h: New.\n+\n+\tOther files copied from gcc/fixinc."}, {"sha": "68e1e232a05683d13a0bd071399b3c2597846074", "filename": "fixincludes/Makefile.in", "status": "renamed", "additions": 43, "deletions": 45, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FMakefile.in?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -1,57 +1,49 @@\n-# Makefile for GCC fixincludes.\n+# Makefile for fixincludes.\n #\n #   Copyright (C) 1998, 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n \n-#This file is part of GCC.\n+#This file is part of fixincludes.\n \n-#GCC is free software; you can redistribute it and/or modify\n+#fixincludes is free software; you can redistribute it and/or modify\n #it under the terms of the GNU General Public License as published by\n #the Free Software Foundation; either version 2, or (at your option)\n #any later version.\n \n-#GCC is distributed in the hope that it will be useful,\n+#fixincludes is distributed in the hope that it will be useful,\n #but WITHOUT ANY WARRANTY; without even the implied warranty of\n #MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n #GNU General Public License for more details.\n \n #You should have received a copy of the GNU General Public License\n-#along with GCC; see the file COPYING.  If not, write to\n+#along with fixincludes; see the file COPYING.  If not, write to\n #the Free Software Foundation, 59 Temple Place - Suite 330,\n #Boston, MA 02111-1307, USA.\n \n-# The makefile built from this file lives in the fixinc subdirectory.\n-# Its purpose is to build the any-platforms fixinc.sh script.\n-\n SHELL=@SHELL@\n \n # Some versions of `touch' (such as the version on Solaris 2.8) \n # do not correctly set the timestamp due to buggy versions of `utime'\n # in the kernel.  So, we use `echo' instead. \n STAMP = echo timestamp >\n \n-FL_LIST = $(CFLAGS) $(CPPFLAGS)\n-FIXINC_DEFS = -DIN_GCC -DHAVE_CONFIG_H $(FL_LIST) $(INCLUDES)\n+CC = @CC@\n+CFLAGS = @CFLAGS@\n+LDFLAGS = @LDFLAGS@\n+INCLUDES = -I. -I$(srcdir) -I../include -I$(srcdir)/../include\n+FIXINC_CFLAGS = -DHAVE_CONFIG_H $(INCLUDES)\n \n # Directory where sources are, from where we are.\n srcdir = @srcdir@\n VPATH = $(srcdir)\n-subdir = fixinc\n \n # End of variables for you to override.\n \n default : all\n \n # Now figure out from those variables how to compile and link.\n \n-# Specify the directories to be searched for header files.\n-# Both . and srcdir are used, in that order.\n-#\n-INCLUDES = -I. -I.. -I$(srcdir) -I$(srcdir)/.. \\\n--I$(srcdir)/../config -I$(srcdir)/../../include\n-\n-# Always use -I$(srcdir)/config when compiling.\n .c.o:\n-\t$(CC) -c $(FIXINC_DEFS) $<\n+\t$(CC) -c $(CFLAGS) $(CPPFLAGS) $(FIXINC_CFLAGS) $<\n \n # The only suffixes we want for implicit rules are .c and .o.\n .SUFFIXES:\n@@ -65,34 +57,35 @@ INCLUDES = -I. -I.. -I$(srcdir) -I$(srcdir)/.. \\\n ##\n ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n \n-LIBERTY = ../../libiberty/libiberty.a\n+LIBIBERTY=../libiberty/libiberty.a\n \n ALLOBJ = fixincl.o fixtests.o fixfixes.o server.o procopen.o \\\n-      fixlib.o ../build-errors.o\n+      fixlib.o\n \n TESTOBJ = fixincl.o fixlib.o fixtests.o\n FIXOBJ  = fixfixes.o fixlib.o\n \n HDR = server.h fixlib.h\n-FI  = fixincl@build_exeext@\n-AF  = applyfix@build_exeext@\n+FI  = fixincl@EXEEXT@\n+AF  = applyfix@EXEEXT@\n \n-all : $(TARGETS)\n+all : @TARGET@\n gen : $(srcdir)/fixincl.x\n \n+\n oneprocess : full-stamp\n twoprocess : test-stamp $(AF)\n \n-full-stamp : $(ALLOBJ) $(LIBERTY)\n-\t$(CC) $(FIXINC_DEFS) $(LDFLAGS) -o $(FI) $(ALLOBJ) $(LIBERTY)\n+full-stamp : $(ALLOBJ) $(LIBIBERTY)\n+\t$(CC) $(LDFLAGS) -o $(FI) $(ALLOBJ) $(LIBIBERTY)\n \t$(STAMP) $@\n \n-test-stamp : $(TESTOBJ) $(LIBERTY)\n-\t$(CC) $(FIXINC_DEFS) $(LDFLAGS) -o $(FI) $(TESTOBJ) $(LIBERTY)\n+test-stamp : $(TESTOBJ) $(LIBIBERTY)\n+\t$(CC) $(LDFLAGS) -o $(FI) $(TESTOBJ) $(LIBIBERTY)\n \t$(STAMP) $@\n \n-$(AF): $(FIXOBJ) $(LIBERTY)\n-\t$(CC) $(FIXINC_DEFS) $(LDFLAGS) -o $@ $(FIXOBJ) $(LIBERTY)\n+$(AF): $(FIXOBJ) $(LIBIBERTY)\n+\t$(CC) $(LDFLAGS) -o $@ $(FIXOBJ) $(LIBIBERTY)\n \n $(ALLOBJ)   : $(HDR)\n fixincl.o   : fixincl.c  $(srcdir)/fixincl.x\n@@ -111,21 +104,26 @@ clean:\n maintainer-clean : clean\n \trm -f $(srcdir)/fixincl.x\n \n-#  Build the executable and copy up into gcc dir.\n-#  We still copy the script because we still have alternative scripts.\n-#\n-install-bin : $(TARGETS)\n-\t./fixincl -v < /dev/null\n-\t@if [ -f ../fixinc.sh ] ; then rm -f ../fixinc.sh || \\\n-\t    mv -f ../fixinc.sh ../fixinc.sh.$$ || exit 1 ; else : ; fi\n-\t@cp $(srcdir)/fixincl.sh ../fixinc.sh\n-\tchmod 755 ../fixinc.sh\n-\n-Makefile: Makefile.in ../config.status\n-\tcd .. \\\n-\t  && $(SHELL) ./config.status $(subdir)/Makefile\n-\n-check : $(TARGETS)\n+Makefile: $(srcdir)/Makefile.in config.status\n+\t$(SHELL) ./config.status Makefile\n+\n+config.h: stamp-h\n+stamp-h: $(srcdir)/config.h.in config.status\n+\t$(SHELL) ./config.status config.h\n+\n+config.status: $(srcdir)/configure\n+\t$(SHELL) ./config.status --recheck\n+\n+$(srcdir)/configure: @MAINT@ $(srcdir)/configure.ac\n+\tautoconf\n+\n+$(srcdir)/config.h.in: @MAINT@ $(srcdir)/configure.ac\n+\tautoheader\n+\n+$(srcdir)/aclocal.m4: @MAINT@ $(srcdir)/../gcc/aclocal.m4\n+\tcp $(srcdir)/../gcc/aclocal.m4 .\n+\n+check : all\n \tautogen -T $(srcdir)/check.tpl $(srcdir)/inclhack.def\n \t$(SHELL) ./check.sh $(srcdir)/tests/base\n \t@rm -f ./check.sh", "previous_filename": "gcc/fixinc/Makefile.in"}, {"sha": "29c4edbf67d065427de6d1f1eeb554167658e046", "filename": "fixincludes/README", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FREADME?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/README"}, {"sha": "6f1679e009a53f6b925784d4091cbc1d1023d805", "filename": "fixincludes/aclocal.m4", "status": "added", "additions": 678, "deletions": 0, "changes": 678, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Faclocal.m4?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -0,0 +1,678 @@\n+sinclude(../config/acx.m4)\n+sinclude(../config/accross.m4)\n+sinclude(../config/gettext.m4)\n+sinclude(../config/progtest.m4)\n+\n+dnl See whether we need a declaration for a function.\n+dnl The result is highly dependent on the INCLUDES passed in, so make sure\n+dnl to use a different cache variable name in this macro if it is invoked\n+dnl in a different context somewhere else.\n+dnl gcc_AC_CHECK_DECL(SYMBOL,\n+dnl \t[ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND [, INCLUDES]]])\n+AC_DEFUN([gcc_AC_CHECK_DECL],\n+[AC_MSG_CHECKING([whether $1 is declared])\n+AC_CACHE_VAL(gcc_cv_have_decl_$1,\n+[AC_TRY_COMPILE([$4],\n+[#ifndef $1\n+char *(*pfn) = (char *(*)) $1 ;\n+#endif], eval \"gcc_cv_have_decl_$1=yes\", eval \"gcc_cv_have_decl_$1=no\")])\n+if eval \"test \\\"`echo '$gcc_cv_have_decl_'$1`\\\" = yes\"; then\n+  AC_MSG_RESULT(yes) ; ifelse([$2], , :, [$2])\n+else\n+  AC_MSG_RESULT(no) ; ifelse([$3], , :, [$3])\n+fi\n+])dnl\n+\n+dnl Check multiple functions to see whether each needs a declaration.\n+dnl Arrange to define HAVE_DECL_<FUNCTION> to 0 or 1 as appropriate.\n+dnl gcc_AC_CHECK_DECLS(SYMBOLS,\n+dnl \t[ACTION-IF-NEEDED [, ACTION-IF-NOT-NEEDED [, INCLUDES]]])\n+AC_DEFUN([gcc_AC_CHECK_DECLS],\n+[AC_FOREACH([gcc_AC_Func], [$1],\n+  [AH_TEMPLATE(AS_TR_CPP(HAVE_DECL_[]gcc_AC_Func),\n+  [Define to 1 if we found a declaration for ']gcc_AC_Func[', otherwise\n+   define to 0.])])dnl\n+for ac_func in $1\n+do\n+  ac_tr_decl=AS_TR_CPP([HAVE_DECL_$ac_func])\n+gcc_AC_CHECK_DECL($ac_func,\n+  [AC_DEFINE_UNQUOTED($ac_tr_decl, 1) $2],\n+  [AC_DEFINE_UNQUOTED($ac_tr_decl, 0) $3],\n+dnl It is possible that the include files passed in here are local headers\n+dnl which supply a backup declaration for the relevant prototype based on\n+dnl the definition of (or lack of) the HAVE_DECL_ macro.  If so, this test\n+dnl will always return success.  E.g. see libiberty.h's handling of\n+dnl `basename'.  To avoid this, we define the relevant HAVE_DECL_ macro to\n+dnl 1 so that any local headers used do not provide their own prototype\n+dnl during this test.\n+#undef $ac_tr_decl\n+#define $ac_tr_decl 1\n+  $4\n+)\n+done\n+])\n+\n+dnl 'make compare' can be significantly faster, if cmp itself can\n+dnl skip bytes instead of using tail.  The test being performed is\n+dnl \"if cmp --ignore-initial=2 t1 t2 && ! cmp --ignore-initial=1 t1 t2\"\n+dnl but we need to sink errors and handle broken shells.  We also test\n+dnl for the parameter format \"cmp file1 file2 skip1 skip2\" which is\n+dnl accepted by cmp on some systems.\n+AC_DEFUN([gcc_AC_PROG_CMP_IGNORE_INITIAL],\n+[AC_CACHE_CHECK([for cmp's capabilities], gcc_cv_prog_cmp_skip,\n+[ echo abfoo >t1\n+  echo cdfoo >t2\n+  gcc_cv_prog_cmp_skip=slowcompare\n+  if cmp --ignore-initial=2 t1 t2 > /dev/null 2>&1; then\n+    if cmp --ignore-initial=1 t1 t2 > /dev/null 2>&1; then\n+      :\n+    else\n+      gcc_cv_prog_cmp_skip=gnucompare\n+    fi\n+  fi\n+  if test $gcc_cv_prog_cmp_skip = slowcompare ; then\n+    if cmp t1 t2 2 2 > /dev/null 2>&1; then\n+      if cmp t1 t2 1 1 > /dev/null 2>&1; then\n+        :\n+      else\n+        gcc_cv_prog_cmp_skip=fastcompare\n+      fi\n+    fi\n+  fi\n+  rm t1 t2\n+])\n+make_compare_target=$gcc_cv_prog_cmp_skip\n+AC_SUBST(make_compare_target)\n+])\n+\n+dnl See if the printf functions in libc support %p in format strings.\n+AC_DEFUN([gcc_AC_FUNC_PRINTF_PTR],\n+[AC_CACHE_CHECK(whether the printf functions support %p,\n+  gcc_cv_func_printf_ptr,\n+[AC_TRY_RUN([#include <stdio.h>\n+\n+int main()\n+{\n+  char buf[64];\n+  char *p = buf, *q = NULL;\n+  sprintf(buf, \"%p\", p);\n+  sscanf(buf, \"%p\", &q);\n+  return (p != q);\n+}], gcc_cv_func_printf_ptr=yes, gcc_cv_func_printf_ptr=no,\n+\tgcc_cv_func_printf_ptr=no)\n+rm -f core core.* *.core])\n+if test $gcc_cv_func_printf_ptr = yes ; then\n+  AC_DEFINE(HAVE_PRINTF_PTR, 1, [Define if printf supports \"%p\".])\n+fi\n+])\n+\n+dnl See if symbolic links work and if not, try to substitute either hard links or simple copy.\n+AC_DEFUN([gcc_AC_PROG_LN_S],\n+[AC_MSG_CHECKING(whether ln -s works)\n+AC_CACHE_VAL(gcc_cv_prog_LN_S,\n+[rm -f conftestdata_t\n+echo >conftestdata_f\n+if ln -s conftestdata_f conftestdata_t 2>/dev/null\n+then\n+  gcc_cv_prog_LN_S=\"ln -s\"\n+else\n+  if ln conftestdata_f conftestdata_t 2>/dev/null\n+  then\n+    gcc_cv_prog_LN_S=ln\n+  else\n+    gcc_cv_prog_LN_S=cp\n+  fi\n+fi\n+rm -f conftestdata_f conftestdata_t\n+])dnl\n+LN_S=\"$gcc_cv_prog_LN_S\"\n+if test \"$gcc_cv_prog_LN_S\" = \"ln -s\"; then\n+  AC_MSG_RESULT(yes)\n+else\n+  if test \"$gcc_cv_prog_LN_S\" = \"ln\"; then\n+    AC_MSG_RESULT([no, using ln])\n+  else\n+    AC_MSG_RESULT([no, and neither does ln, so using cp])\n+  fi\n+fi\n+AC_SUBST(LN_S)dnl\n+])\n+\n+dnl Define MKDIR_TAKES_ONE_ARG if mkdir accepts only one argument instead\n+dnl of the usual 2.\n+AC_DEFUN([gcc_AC_FUNC_MKDIR_TAKES_ONE_ARG],\n+[AC_CACHE_CHECK([if mkdir takes one argument], gcc_cv_mkdir_takes_one_arg,\n+[AC_TRY_COMPILE([\n+#include <sys/types.h>\n+#ifdef HAVE_SYS_STAT_H\n+# include <sys/stat.h>\n+#endif\n+#ifdef HAVE_UNISTD_H\n+# include <unistd.h>\n+#endif\n+#ifdef HAVE_DIRECT_H\n+# include <direct.h>\n+#endif], [mkdir (\"foo\", 0);], \n+        gcc_cv_mkdir_takes_one_arg=no, gcc_cv_mkdir_takes_one_arg=yes)])\n+if test $gcc_cv_mkdir_takes_one_arg = yes ; then\n+  AC_DEFINE(MKDIR_TAKES_ONE_ARG, 1, [Define if host mkdir takes a single argument.])\n+fi\n+])\n+\n+AC_DEFUN([gcc_AC_PROG_INSTALL],\n+[AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\n+# Find a good install program.  We prefer a C program (faster),\n+# so one script is as good as another.  But avoid the broken or\n+# incompatible versions:\n+# SysV /etc/install, /usr/sbin/install\n+# SunOS /usr/etc/install\n+# IRIX /sbin/install\n+# AIX /bin/install\n+# AFS /usr/afsws/bin/install, which mishandles nonexistent args\n+# SVR4 /usr/ucb/install, which tries to use the nonexistent group \"staff\"\n+# ./install, which can be erroneously created by make from ./install.sh.\n+AC_MSG_CHECKING(for a BSD compatible install)\n+if test -z \"$INSTALL\"; then\n+AC_CACHE_VAL(ac_cv_path_install,\n+[  IFS=\"${IFS= \t}\"; ac_save_IFS=\"$IFS\"; IFS=\"${IFS}:\"\n+  for ac_dir in $PATH; do\n+    # Account for people who put trailing slashes in PATH elements.\n+    case \"$ac_dir/\" in\n+    /|./|.//|/etc/*|/usr/sbin/*|/usr/etc/*|/sbin/*|/usr/afsws/bin/*|/usr/ucb/*) ;;\n+    *)\n+      # OSF1 and SCO ODT 3.0 have their own names for install.\n+      for ac_prog in ginstall scoinst install; do\n+        if test -f $ac_dir/$ac_prog; then\n+\t  if test $ac_prog = install &&\n+            grep dspmsg $ac_dir/$ac_prog >/dev/null 2>&1; then\n+\t    # AIX install.  It has an incompatible calling convention.\n+\t    # OSF/1 installbsd also uses dspmsg, but is usable.\n+\t    :\n+\t  else\n+\t    ac_cv_path_install=\"$ac_dir/$ac_prog -c\"\n+\t    break 2\n+\t  fi\n+\tfi\n+      done\n+      ;;\n+    esac\n+  done\n+  IFS=\"$ac_save_IFS\"\n+])dnl\n+  if test \"${ac_cv_path_install+set}\" = set; then\n+    INSTALL=\"$ac_cv_path_install\"\n+  else\n+    # As a last resort, use the slow shell script.  We don't cache a\n+    # path for INSTALL within a source directory, because that will\n+    # break other packages using the cache if that directory is\n+    # removed, or if the path is relative.\n+    INSTALL=\"$ac_install_sh\"\n+  fi\n+fi\n+dnl We do special magic for INSTALL instead of AC_SUBST, to get\n+dnl relative paths right.\n+AC_MSG_RESULT($INSTALL)\n+AC_SUBST(INSTALL)dnl\n+\n+# Use test -z because SunOS4 sh mishandles braces in ${var-val}.\n+# It thinks the first close brace ends the variable substitution.\n+test -z \"$INSTALL_PROGRAM\" && INSTALL_PROGRAM='${INSTALL}'\n+AC_SUBST(INSTALL_PROGRAM)dnl\n+\n+test -z \"$INSTALL_DATA\" && INSTALL_DATA='${INSTALL} -m 644'\n+AC_SUBST(INSTALL_DATA)dnl\n+])\n+\n+dnl GCC_PATH_PROG(VARIABLE, PROG-TO-CHECK-FOR [, VALUE-IF-NOT-FOUND [, PATH]])\n+dnl like AC_PATH_PROG but use other cache variables\n+AC_DEFUN([GCC_PATH_PROG],\n+[# Extract the first word of \"$2\", so it can be a program name with args.\n+set dummy $2; ac_word=[$]2\n+AC_MSG_CHECKING([for $ac_word])\n+AC_CACHE_VAL(gcc_cv_path_$1,\n+[case \"[$]$1\" in\n+  /*)\n+  gcc_cv_path_$1=\"[$]$1\" # Let the user override the test with a path.\n+  ;;\n+  ?:/*)\t\t\t \n+  gcc_cv_path_$1=\"[$]$1\" # Let the user override the test with a dos path.\n+  ;;\n+  *)\n+  IFS=\"${IFS= \t}\"; ac_save_ifs=\"$IFS\"; IFS=\":\"\n+dnl $ac_dummy forces splitting on constant user-supplied paths.\n+dnl POSIX.2 word splitting is done only on the output of word expansions,\n+dnl not every word.  This closes a longstanding sh security hole.\n+  ac_dummy=\"ifelse([$4], , $PATH, [$4])\"\n+  for ac_dir in $ac_dummy; do \n+    test -z \"$ac_dir\" && ac_dir=.\n+    if test -f $ac_dir/$ac_word; then\n+      gcc_cv_path_$1=\"$ac_dir/$ac_word\"\n+      break\n+    fi\n+  done\n+  IFS=\"$ac_save_ifs\"\n+dnl If no 3rd arg is given, leave the cache variable unset,\n+dnl so GCC_PATH_PROGS will keep looking.\n+ifelse([$3], , , [  test -z \"[$]gcc_cv_path_$1\" && gcc_cv_path_$1=\"$3\"\n+])dnl\n+  ;;\n+esac])dnl\n+$1=\"$gcc_cv_path_$1\"\n+if test -n \"[$]$1\"; then\n+  AC_MSG_RESULT([$]$1)\n+else\n+  AC_MSG_RESULT(no)\n+fi\n+AC_SUBST($1)dnl\n+])\n+\n+# mmap(2) blacklisting.  Some platforms provide the mmap library routine\n+# but don't support all of the features we need from it.\n+AC_DEFUN([gcc_AC_FUNC_MMAP_BLACKLIST],\n+[\n+AC_CHECK_HEADER([sys/mman.h],\n+\t\t[gcc_header_sys_mman_h=yes], [gcc_header_sys_mman_h=no])\n+AC_CHECK_FUNC([mmap], [gcc_func_mmap=yes], [gcc_func_mmap=no])\n+if test \"$gcc_header_sys_mman_h\" != yes \\\n+ || test \"$gcc_func_mmap\" != yes; then\n+   gcc_cv_func_mmap_file=no\n+   gcc_cv_func_mmap_dev_zero=no\n+   gcc_cv_func_mmap_anon=no\n+else\n+   AC_CACHE_CHECK([whether read-only mmap of a plain file works], \n+  gcc_cv_func_mmap_file,\n+  [# Add a system to this blacklist if \n+   # mmap(0, stat_size, PROT_READ, MAP_PRIVATE, fd, 0) doesn't return a\n+   # memory area containing the same data that you'd get if you applied\n+   # read() to the same fd.  The only system known to have a problem here\n+   # is VMS, where text files have record structure.\n+   case \"$host_os\" in\n+     vms* | ultrix*) \n+        gcc_cv_func_mmap_file=no ;;\n+     *)\n+        gcc_cv_func_mmap_file=yes;;\n+   esac])\n+   AC_CACHE_CHECK([whether mmap from /dev/zero works],\n+  gcc_cv_func_mmap_dev_zero,\n+  [# Add a system to this blacklist if it has mmap() but /dev/zero\n+   # does not exist, or if mmapping /dev/zero does not give anonymous\n+   # zeroed pages with both the following properties:\n+   # 1. If you map N consecutive pages in with one call, and then\n+   #    unmap any subset of those pages, the pages that were not\n+   #    explicitly unmapped remain accessible.\n+   # 2. If you map two adjacent blocks of memory and then unmap them\n+   #    both at once, they must both go away.\n+   # Systems known to be in this category are Windows (all variants),\n+   # VMS, and Darwin.\n+   case \"$host_os\" in\n+     vms* | cygwin* | pe | mingw* | darwin* | ultrix* | hpux10* | hpux11.00)\n+        gcc_cv_func_mmap_dev_zero=no ;;\n+     *)\n+        gcc_cv_func_mmap_dev_zero=yes;;\n+   esac])\n+\n+   # Unlike /dev/zero, the MAP_ANON(YMOUS) defines can be probed for.\n+   AC_CACHE_CHECK([for MAP_ANON(YMOUS)], gcc_cv_decl_map_anon,\n+    [AC_TRY_COMPILE(\n+[#include <sys/types.h>\n+#include <sys/mman.h>\n+#include <unistd.h>\n+\n+#ifndef MAP_ANONYMOUS\n+#define MAP_ANONYMOUS MAP_ANON\n+#endif\n+],\n+[int n = MAP_ANONYMOUS;],\n+    gcc_cv_decl_map_anon=yes,\n+    gcc_cv_decl_map_anon=no)])\n+\n+   if test $gcc_cv_decl_map_anon = no; then\n+     gcc_cv_func_mmap_anon=no\n+   else\n+     AC_CACHE_CHECK([whether mmap with MAP_ANON(YMOUS) works],\n+     gcc_cv_func_mmap_anon,\n+  [# Add a system to this blacklist if it has mmap() and MAP_ANON or\n+   # MAP_ANONYMOUS, but using mmap(..., MAP_PRIVATE|MAP_ANONYMOUS, -1, 0)\n+   # doesn't give anonymous zeroed pages with the same properties listed\n+   # above for use of /dev/zero.\n+   # Systems known to be in this category are Windows, VMS, and SCO Unix.\n+   case \"$host_os\" in\n+     vms* | cygwin* | pe | mingw* | sco* | udk* )\n+        gcc_cv_func_mmap_anon=no ;;\n+     *)\n+        gcc_cv_func_mmap_anon=yes;;\n+   esac])\n+   fi\n+fi\n+\n+if test $gcc_cv_func_mmap_file = yes; then\n+  AC_DEFINE(HAVE_MMAP_FILE, 1,\n+\t    [Define if read-only mmap of a plain file works.])\n+fi\n+if test $gcc_cv_func_mmap_dev_zero = yes; then\n+  AC_DEFINE(HAVE_MMAP_DEV_ZERO, 1,\n+\t    [Define if mmap of /dev/zero works.])\n+fi\n+if test $gcc_cv_func_mmap_anon = yes; then\n+  AC_DEFINE(HAVE_MMAP_ANON, 1,\n+\t    [Define if mmap with MAP_ANON(YMOUS) works.])\n+fi\n+])\n+\n+dnl Locate a program and check that its version is acceptable.\n+dnl AC_PROG_CHECK_VER(var, name, version-switch,\n+dnl                  version-extract-regexp, version-glob)\n+AC_DEFUN([gcc_AC_CHECK_PROG_VER],\n+[AC_CHECK_PROG([$1], [$2], [$2])\n+if test -n \"[$]$1\"; then\n+  # Found it, now check the version.\n+  AC_CACHE_CHECK(for modern $2, gcc_cv_prog_$2_modern,\n+[changequote(<<,>>)dnl\n+  ac_prog_version=`<<$>>$1 $3 2>&1 |\n+                   sed -n 's/^.*patsubst(<<$4>>,/,\\/).*$/\\1/p'`\n+changequote([,])dnl\n+  echo \"configure:__oline__: version of $2 is $ac_prog_version\" >&AC_FD_CC\n+changequote(<<,>>)dnl\n+  case $ac_prog_version in\n+    '')     gcc_cv_prog_$2_modern=no;;\n+    <<$5>>)\n+            gcc_cv_prog_$2_modern=yes;;\n+    *)      gcc_cv_prog_$2_modern=no;;\n+  esac\n+changequote([,])dnl\n+])\n+else\n+  gcc_cv_prog_$2_modern=no\n+fi\n+])\n+\n+dnl Determine if enumerated bitfields are unsigned.   ISO C says they can \n+dnl be either signed or unsigned.\n+dnl\n+AC_DEFUN([gcc_AC_C_ENUM_BF_UNSIGNED],\n+[AC_CACHE_CHECK(for unsigned enumerated bitfields, gcc_cv_enum_bf_unsigned,\n+[AC_TRY_RUN(#include <stdlib.h>\n+enum t { BLAH = 128 } ;\n+struct s_t { enum t member : 8; } s ;\n+int main(void)\n+{            \n+        s.member = BLAH;\n+        if (s.member < 0) exit(1);\n+        exit(0);\n+\n+}, gcc_cv_enum_bf_unsigned=yes, gcc_cv_enum_bf_unsigned=no, gcc_cv_enum_bf_unsigned=yes)])\n+if test $gcc_cv_enum_bf_unsigned = yes; then\n+  AC_DEFINE(ENUM_BITFIELDS_ARE_UNSIGNED, 1,\n+    [Define if enumerated bitfields are treated as unsigned values.])\n+fi])\n+\n+dnl Probe number of bits in a byte.\n+dnl Note C89 requires CHAR_BIT >= 8.\n+dnl\n+AC_DEFUN([gcc_AC_C_CHAR_BIT],\n+[AC_CACHE_CHECK(for CHAR_BIT, gcc_cv_decl_char_bit,\n+[AC_EGREP_CPP(found,\n+[#ifdef HAVE_LIMITS_H\n+#include <limits.h>\n+#endif\n+#ifdef CHAR_BIT\n+found\n+#endif], gcc_cv_decl_char_bit=yes, gcc_cv_decl_char_bit=no)\n+])\n+if test $gcc_cv_decl_char_bit = no; then\n+  AC_CACHE_CHECK(number of bits in a byte, gcc_cv_c_nbby,\n+[i=8\n+ gcc_cv_c_nbby=\n+ while test $i -lt 65; do\n+   AC_TRY_COMPILE(,\n+     [switch(0) {\n+  case (unsigned char)((unsigned long)1 << $i) == ((unsigned long)1 << $i):\n+  case (unsigned char)((unsigned long)1<<($i-1)) == ((unsigned long)1<<($i-1)):\n+  ; }], \n+     [gcc_cv_c_nbby=$i; break])\n+   i=`expr $i + 1`\n+ done\n+ test -z \"$gcc_cv_c_nbby\" && gcc_cv_c_nbby=failed\n+])\n+if test $gcc_cv_c_nbby = failed; then\n+  AC_MSG_ERROR(cannot determine number of bits in a byte)\n+else\n+  AC_DEFINE_UNQUOTED(CHAR_BIT, $gcc_cv_c_nbby,\n+  [Define as the number of bits in a byte, if \\`limits.h' doesn't.])\n+fi\n+fi])\n+\n+dnl Checking for long long.\n+dnl By Caolan McNamara <caolan@skynet.ie>\n+dnl Added check for __int64, Zack Weinberg <zackw@stanford.edu>\n+dnl\n+AC_DEFUN([gcc_AC_C_LONG_LONG],\n+[AC_CACHE_CHECK(for long long int, ac_cv_c_long_long,\n+  [AC_TRY_COMPILE(,[long long int i;],\n+         ac_cv_c_long_long=yes,\n+         ac_cv_c_long_long=no)])\n+  if test $ac_cv_c_long_long = yes; then\n+    AC_DEFINE(HAVE_LONG_LONG, 1,\n+      [Define if your compiler supports the \\`long long' type.])\n+  fi\n+AC_CACHE_CHECK(for __int64, ac_cv_c___int64,\n+  [AC_TRY_COMPILE(,[__int64 i;],\n+\tac_cv_c___int64=yes,\n+\tac_cv_c___int64=no)])\n+  if test $ac_cv_c___int64 = yes; then\n+    AC_DEFINE(HAVE___INT64, 1,\n+      [Define if your compiler supports the \\`__int64' type.])\n+  fi\n+])\n+\n+#serial AM2\n+\n+dnl From Bruno Haible.\n+\n+AC_DEFUN([AM_ICONV],\n+[\n+  dnl Some systems have iconv in libc, some have it in libiconv (OSF/1 and\n+  dnl those with the standalone portable GNU libiconv installed).\n+\n+  am_cv_lib_iconv_ldpath=\n+  AC_ARG_WITH([libiconv-prefix],\n+[  --with-libiconv-prefix=DIR  search for libiconv in DIR/include and DIR/lib], [\n+    for dir in `echo \"$withval\" | tr : ' '`; do\n+      if test -d $dir/include; then CPPFLAGS=\"$CPPFLAGS -I$dir/include\"; fi\n+      if test -d $dir/lib; then am_cv_lib_iconv_ldpath=\"-L$dir/lib\"; fi\n+    done\n+   ])\n+\n+  AC_CHECK_HEADERS([iconv.h])\n+\n+  AC_CACHE_CHECK(for iconv, am_cv_func_iconv, [\n+    am_cv_func_iconv=\"no, consider installing GNU libiconv\"\n+    am_cv_lib_iconv=no\n+    AC_TRY_LINK([#include <stdlib.h>\n+#include <iconv.h>],\n+      [iconv_t cd = iconv_open(\"\",\"\");\n+       iconv(cd,NULL,NULL,NULL,NULL);\n+       iconv_close(cd);],\n+      am_cv_func_iconv=yes)\n+    if test \"$am_cv_func_iconv\" != yes; then\n+      am_save_LIBS=\"$LIBS\"\n+      LIBS=\"$LIBS $am_cv_libiconv_ldpath -liconv\"\n+      AC_TRY_LINK([#include <stdlib.h>\n+#include <iconv.h>],\n+        [iconv_t cd = iconv_open(\"\",\"\");\n+         iconv(cd,NULL,NULL,NULL,NULL);\n+         iconv_close(cd);],\n+        am_cv_lib_iconv=yes\n+        am_cv_func_iconv=yes)\n+      LIBS=\"$am_save_LIBS\"\n+    fi\n+  ])\n+  if test \"$am_cv_func_iconv\" = yes; then\n+    AC_DEFINE(HAVE_ICONV, 1, [Define if you have the iconv() function.])\n+    AC_MSG_CHECKING([for iconv declaration])\n+    AC_CACHE_VAL(am_cv_proto_iconv, [\n+      AC_TRY_COMPILE([\n+#include <stdlib.h>\n+#include <iconv.h>\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+#if defined(__STDC__) || defined(__cplusplus)\n+size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);\n+#else\n+size_t iconv();\n+#endif\n+], [], am_cv_proto_iconv_arg1=\"\", am_cv_proto_iconv_arg1=\"const\")\n+      am_cv_proto_iconv=\"extern size_t iconv (iconv_t cd, $am_cv_proto_iconv_arg1 char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);\"])\n+    am_cv_proto_iconv=`echo \"[$]am_cv_proto_iconv\" | tr -s ' ' | sed -e 's/( /(/'`\n+    AC_MSG_RESULT([$]{ac_t:-\n+         }[$]am_cv_proto_iconv)\n+    AC_DEFINE_UNQUOTED(ICONV_CONST, $am_cv_proto_iconv_arg1,\n+      [Define as const if the declaration of iconv() needs const.])\n+  fi\n+  LIBICONV=\n+  if test \"$am_cv_lib_iconv\" = yes; then\n+    LIBICONV=\"$am_cv_lib_iconv_ldpath -liconv\"\n+  fi\n+  AC_SUBST(LIBICONV)\n+])\n+\n+AC_DEFUN([gcc_AC_INITFINI_ARRAY],\n+[AC_ARG_ENABLE(initfini-array,\n+\t[  --enable-initfini-array\tuse .init_array/.fini_array sections],\n+\t[], [\n+AC_CACHE_CHECK(for .preinit_array/.init_array/.fini_array support,\n+\t\t gcc_cv_initfini_array, [dnl\n+  AC_TRY_RUN([\n+static int x = -1;\n+int main (void) { return x; }\n+int foo (void) { x = 0; }\n+int (*fp) (void) __attribute__ ((section (\".init_array\"))) = foo;],\n+\t     [gcc_cv_initfini_array=yes], [gcc_cv_initfini_array=no],\n+\t     [gcc_cv_initfini_array=no])])\n+  enable_initfini_array=$gcc_cv_initfini_array\n+])\n+if test $enable_initfini_array = yes; then\n+  AC_DEFINE(HAVE_INITFINI_ARRAY, 1,\n+    [Define .init_array/.fini_array sections are available and working.])\n+fi])\n+\n+dnl # _gcc_COMPUTE_GAS_VERSION\n+dnl # Used by gcc_GAS_VERSION_GTE_IFELSE\n+dnl #\n+dnl # WARNING:\n+dnl # gcc_cv_as_gas_srcdir must be defined before this.\n+dnl # This gross requirement will go away eventually.\n+AC_DEFUN([_gcc_COMPUTE_GAS_VERSION],\n+[gcc_cv_as_bfd_srcdir=`echo $srcdir | sed -e 's,/gcc$,,'`/bfd\n+for f in $gcc_cv_as_bfd_srcdir/configure \\\n+         $gcc_cv_as_gas_srcdir/configure \\\n+         $gcc_cv_as_gas_srcdir/configure.in \\\n+         $gcc_cv_as_gas_srcdir/Makefile.in ; do\n+  gcc_cv_gas_version=`grep '^VERSION=[[0-9]]*\\.[[0-9]]*' $f`\n+  if test x$gcc_cv_gas_version != x; then\n+    break\n+  fi\n+done\n+gcc_cv_gas_major_version=`expr \"$gcc_cv_gas_version\" : \"VERSION=\\([[0-9]]*\\)\"`\n+gcc_cv_gas_minor_version=`expr \"$gcc_cv_gas_version\" : \"VERSION=[[0-9]]*\\.\\([[0-9]]*\\)\"`\n+gcc_cv_gas_patch_version=`expr \"$gcc_cv_gas_version\" : \"VERSION=[[0-9]]*\\.[[0-9]]*\\.\\([[0-9]]*\\)\"`\n+case $gcc_cv_gas_patch_version in\n+  \"\") gcc_cv_gas_patch_version=\"0\" ;;\n+esac\n+gcc_cv_gas_vers=`expr \\( \\( $gcc_cv_gas_major_version \\* 1000 \\) \\\n+\t\t\t    + $gcc_cv_gas_minor_version \\) \\* 1000 \\\n+\t\t\t    + $gcc_cv_gas_patch_version`\n+]) []dnl # _gcc_COMPUTE_GAS_VERSION\n+\n+dnl # gcc_GAS_VERSION_GTE_IFELSE([elf,] major, minor, patchlevel,\n+dnl #                     [command_if_true = :], [command_if_false = :])\n+dnl # Check to see if the version of GAS is greater than or\n+dnl # equal to the specified version.\n+dnl #\n+dnl # The first ifelse() shortens the shell code if the patchlevel\n+dnl # is unimportant (the usual case).  The others handle missing\n+dnl # commands.  Note that the tests are structured so that the most\n+dnl # common version number cases are tested first.\n+AC_DEFUN([_gcc_GAS_VERSION_GTE_IFELSE],\n+[ifelse([$1], elf,\n+ [if test $in_tree_gas_is_elf = yes \\\n+  &&],\n+ [if]) test $gcc_cv_gas_vers -ge `expr \\( \\( $2 \\* 1000 \\) + $3 \\) \\* 1000 + $4`\n+  then dnl\n+ifelse([$5],,:,[$5])[]dnl\n+ifelse([$6],,,[\n+  else $6])\n+fi])\n+\n+AC_DEFUN([gcc_GAS_VERSION_GTE_IFELSE],\n+[AC_REQUIRE([_gcc_COMPUTE_GAS_VERSION])dnl\n+ifelse([$1], elf, [_gcc_GAS_VERSION_GTE_IFELSE($@)],\n+                  [_gcc_GAS_VERSION_GTE_IFELSE(,$@)])])\n+\n+dnl gcc_GAS_CHECK_FEATURE(description, cv, [[elf,]major,minor,patchlevel],\n+dnl [extra switches to as], [assembler input],\n+dnl [extra testing logic], [command if feature available])\n+dnl\n+dnl Checks for an assembler feature.  If we are building an in-tree\n+dnl gas, the feature is available if the associated assembler version\n+dnl is greater than or equal to major.minor.patchlevel.  If not, then\n+dnl ASSEMBLER INPUT is fed to the assembler and the feature is available\n+dnl if assembly succeeds.  If EXTRA TESTING LOGIC is not the empty string,\n+dnl then it is run instead of simply setting CV to \"yes\" - it is responsible\n+dnl for doing so, if appropriate.\n+AC_DEFUN([gcc_GAS_CHECK_FEATURE],\n+[AC_CACHE_CHECK([assembler for $1], [$2],\n+ [[$2]=no\n+  ifelse([$3],,,[dnl\n+  if test $in_tree_gas = yes; then\n+    gcc_GAS_VERSION_GTE_IFELSE($3, [[$2]=yes])\n+  el])if test x$gcc_cv_as != x; then\n+    echo ifelse(m4_substr([$5],0,1),[$], \"[$5]\", '[$5]') > conftest.s\n+    if AC_TRY_COMMAND([$gcc_cv_as $4 -o conftest.o conftest.s >&AC_FD_CC])\n+    then\n+\tifelse([$6],, [$2]=yes, [$6])\n+    else\n+      echo \"configure: failed program was\" >&AC_FD_CC\n+      cat conftest.s >&AC_FD_CC\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi])\n+ifelse([$7],,,[dnl\n+if test $[$2] = yes; then\n+  $7\n+fi])])\n+\n+# lcmessage.m4 serial 3 (gettext-0.11.3)\n+dnl Copyright (C) 1995-2002 Free Software Foundation, Inc.\n+dnl This file is free software, distributed under the terms of the GNU\n+dnl General Public License.  As a special exception to the GNU General\n+dnl Public License, this file may be distributed as part of a program\n+dnl that contains a configuration script generated by Autoconf, under\n+dnl the same distribution terms as the rest of that program.\n+dnl\n+dnl This file can can be used in projects which are not available under\n+dnl the GNU General Public License or the GNU Library General Public\n+dnl License but which still want to provide support for the GNU gettext\n+dnl functionality.\n+dnl Please note that the actual code of the GNU gettext library is covered\n+dnl by the GNU Library General Public License, and the rest of the GNU\n+dnl gettext package package is covered by the GNU General Public License.\n+dnl They are *not* in the public domain.\n+\n+dnl Authors:\n+dnl   Ulrich Drepper <drepper@cygnus.com>, 1995.\n+\n+# Check whether LC_MESSAGES is available in <locale.h>.\n+\n+AC_DEFUN([AM_LC_MESSAGES],\n+[\n+  AC_CACHE_CHECK([for LC_MESSAGES], am_cv_val_LC_MESSAGES,\n+    [AC_TRY_LINK([#include <locale.h>], [return LC_MESSAGES],\n+       am_cv_val_LC_MESSAGES=yes, am_cv_val_LC_MESSAGES=no)])\n+  if test $am_cv_val_LC_MESSAGES = yes; then\n+    AC_DEFINE(HAVE_LC_MESSAGES, 1,\n+      [Define if your <locale.h> file defines LC_MESSAGES.])\n+  fi\n+])"}, {"sha": "9f8750b8bacc6220bf97b2b801d68e7aebeb4db5", "filename": "fixincludes/check.tpl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fcheck.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fcheck.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fcheck.tpl?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/check.tpl"}, {"sha": "6d22ee5bdee516b56c032f6098d925dd15d86c91", "filename": "fixincludes/config.h.in", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fconfig.h.in?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -0,0 +1,119 @@\n+/* config.h.in.  Generated from configure.ac by autoheader.  */\n+\n+/* Define to 1 if you have the declaration of `abort', and to 0 if you don't.\n+   */\n+#undef HAVE_DECL_ABORT\n+\n+/* Define to 1 if you have the declaration of `errno', and to 0 if you don't.\n+   */\n+#undef HAVE_DECL_ERRNO\n+\n+/* Define to 1 if you have the declaration of `fprintf_unlocked', and to 0 if\n+   you don't. */\n+#undef HAVE_DECL_FPRINTF_UNLOCKED\n+\n+/* Define to 1 if you have the declaration of `fputc_unlocked', and to 0 if\n+   you don't. */\n+#undef HAVE_DECL_FPUTC_UNLOCKED\n+\n+/* Define to 1 if you have the declaration of `fputs_unlocked', and to 0 if\n+   you don't. */\n+#undef HAVE_DECL_FPUTS_UNLOCKED\n+\n+/* Define to 1 if you have the declaration of `fwrite_unlocked', and to 0 if\n+   you don't. */\n+#undef HAVE_DECL_FWRITE_UNLOCKED\n+\n+/* Define to 1 if you have the declaration of `putc_unlocked', and to 0 if you\n+   don't. */\n+#undef HAVE_DECL_PUTC_UNLOCKED\n+\n+/* Define to 1 if you have the <fcntl.h> header file. */\n+#undef HAVE_FCNTL_H\n+\n+/* Define to 1 if you have the `fprintf_unlocked' function. */\n+#undef HAVE_FPRINTF_UNLOCKED\n+\n+/* Define to 1 if you have the `fputc_unlocked' function. */\n+#undef HAVE_FPUTC_UNLOCKED\n+\n+/* Define to 1 if you have the `fputs_unlocked' function. */\n+#undef HAVE_FPUTS_UNLOCKED\n+\n+/* Define to 1 if you have the `fwrite_unlocked' function. */\n+#undef HAVE_FWRITE_UNLOCKED\n+\n+/* Define to 1 if you have the <inttypes.h> header file. */\n+#undef HAVE_INTTYPES_H\n+\n+/* Define to 1 if you have the <memory.h> header file. */\n+#undef HAVE_MEMORY_H\n+\n+/* Define if mmap with MAP_ANON(YMOUS) works. */\n+#undef HAVE_MMAP_ANON\n+\n+/* Define if mmap of /dev/zero works. */\n+#undef HAVE_MMAP_DEV_ZERO\n+\n+/* Define if read-only mmap of a plain file works. */\n+#undef HAVE_MMAP_FILE\n+\n+/* Define to 1 if you have the `putc_unlocked' function. */\n+#undef HAVE_PUTC_UNLOCKED\n+\n+/* Define to 1 if you have the <stddef.h> header file. */\n+#undef HAVE_STDDEF_H\n+\n+/* Define to 1 if you have the <stdint.h> header file. */\n+#undef HAVE_STDINT_H\n+\n+/* Define to 1 if you have the <stdlib.h> header file. */\n+#undef HAVE_STDLIB_H\n+\n+/* Define to 1 if you have the <strings.h> header file. */\n+#undef HAVE_STRINGS_H\n+\n+/* Define to 1 if you have the <string.h> header file. */\n+#undef HAVE_STRING_H\n+\n+/* Define to 1 if you have the <sys/file.h> header file. */\n+#undef HAVE_SYS_FILE_H\n+\n+/* Define to 1 if you have the <sys/stat.h> header file. */\n+#undef HAVE_SYS_STAT_H\n+\n+/* Define to 1 if you have the <sys/types.h> header file. */\n+#undef HAVE_SYS_TYPES_H\n+\n+/* Define to 1 if you have the <unistd.h> header file. */\n+#undef HAVE_UNISTD_H\n+\n+/* Define to the address where bug reports for this package should be sent. */\n+#undef PACKAGE_BUGREPORT\n+\n+/* Define to the full name of this package. */\n+#undef PACKAGE_NAME\n+\n+/* Define to the full name and version of this package. */\n+#undef PACKAGE_STRING\n+\n+/* Define to the one symbol short name of this package. */\n+#undef PACKAGE_TARNAME\n+\n+/* Define to the version of this package. */\n+#undef PACKAGE_VERSION\n+\n+/* Define if testing and fixing are done by separate process */\n+#undef SEPARATE_FIX_PROC\n+\n+/* Define to 1 if you have the ANSI C header files. */\n+#undef STDC_HEADERS\n+\n+/* Define to xatexit if the host system does not support atexit */\n+#undef atexit\n+\n+/* Define to empty if `const' does not conform to ANSI C. */\n+#undef const\n+\n+/* Define to xexit if the host system does not support atexit */\n+#undef exit"}, {"sha": "8e9f630a06faf86ec15247d4846ebfa9396bf0cd", "filename": "fixincludes/configure", "status": "added", "additions": 5267, "deletions": 0, "changes": 5267, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fconfigure?ref=71b5d516bc6cd5fc865ac560e4bea70607207272"}, {"sha": "e0058b116407aa3172674a13f281a93c56ada466", "filename": "fixincludes/configure.ac", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fconfigure.ac?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -0,0 +1,62 @@\n+AC_PREREQ(2.59)\n+\n+AC_INIT(fixincludes, [ ])\n+AC_CONFIG_SRCDIR(inclhack.def)\n+AC_CONFIG_AUX_DIR(..)\n+AC_CANONICAL_SYSTEM\n+AC_PROG_CC\n+\n+# Choose one or two-process fix methodology.  Systems that cannot handle\n+# bi-directional pipes must use the two process method.\n+#\n+case $host in\n+\ti?86-*-msdosdjgpp* | \\\n+\t*-*-beos* )\n+\t\tTARGET=twoprocess\n+\t\tAC_DEFINE(SEPARATE_FIX_PROC, 1, [Define if testing and fixing are done by separate process])\n+\t\t;;\n+\n+\tvax-dec-bsd* )\n+\t\tTARGET=oneprocess\n+\t\tAC_DEFINE(exit, xexit, [Define to xexit if the host system does not support atexit])\n+\t\tAC_DEFINE(atexit, xatexit, [Define to xatexit if the host system does not support atexit])\n+\t\t;;\n+\n+\t* )\n+\t\tTARGET=oneprocess\n+\t\t;;\n+esac\n+AC_SUBST(TARGET)\n+\n+# Checks for header files.\n+AC_HEADER_STDC\n+AC_CHECK_HEADERS([stddef.h stdlib.h strings.h unistd.h fcntl.h sys/file.h \\\n+\tsys/stat.h])\n+AC_CHECK_FUNCS(putc_unlocked fputc_unlocked fputs_unlocked \\\n+        fwrite_unlocked fprintf_unlocked)\n+AC_CHECK_DECLS([abort, errno, putc_unlocked, fputc_unlocked,\n+        fputs_unlocked, fwrite_unlocked, fprintf_unlocked])\n+\n+# Checks for typedefs, structures, and compiler characteristics.\n+AC_C_CONST\n+\n+# Checks for library functions.\n+gcc_AC_FUNC_MMAP_BLACKLIST\n+\n+AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n+AC_ARG_ENABLE(maintainer-mode,\n+[  --enable-maintainer-mode enable make rules and dependencies not useful\n+                          (and sometimes confusing) to the casual installer],\n+      USE_MAINTAINER_MODE=$enableval,\n+      USE_MAINTAINER_MODE=no)\n+AC_MSG_RESULT($USE_MAINTAINER_MODE)\n+if test \"$USE_MAINTAINER_MODE\" = yes; then\n+  MAINT=\n+else\n+  MAINT='#'\n+fi\t\n+AC_SUBST(MAINT)\n+\n+AC_CONFIG_HEADERS(config.h, [echo timestamp > stamp-h])\n+AC_CONFIG_FILES(Makefile)\n+AC_OUTPUT"}, {"sha": "19fa27ed12109e8d8340d3e2576aef75b007c042", "filename": "fixincludes/fixfixes.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixfixes.c?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/fixfixes.c"}, {"sha": "690184b8ad7a3bc28127fc08db62c5c9067ba4d5", "filename": "fixincludes/fixincl.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.c?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/fixincl.c"}, {"sha": "420b11d8783cfdd77a96858432c1378c0b51d936", "filename": "fixincludes/fixincl.tpl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixincl.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixincl.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.tpl?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/fixincl.tpl"}, {"sha": "d309cfa60854386167d224d078348eb455b12524", "filename": "fixincludes/fixincl.x", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/fixincl.x"}, {"sha": "e0fa94a14badec5816168abba210bbfa96a28821", "filename": "fixincludes/fixlib.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixlib.c?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/fixlib.c"}, {"sha": "4993d1bd654fed73a1a799cadb6f83e14b0ac901", "filename": "fixincludes/fixlib.h", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixlib.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -28,8 +28,6 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n #include <signal.h>\n \n #include \"xregex.h\"", "previous_filename": "gcc/fixinc/fixlib.h"}, {"sha": "44ef97253f524778634bf5bdb7ceb418c8435aad", "filename": "fixincludes/fixtests.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixtests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ffixtests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixtests.c?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/fixtests.c"}, {"sha": "b151153dbf6b36c8cc4c6c101aba8877922c1ba2", "filename": "fixincludes/genfixes", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fgenfixes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fgenfixes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fgenfixes?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/genfixes"}, {"sha": "b6c9795a8ca0cc840439312e5fad3e068c6931b6", "filename": "fixincludes/inclhack.def", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/inclhack.def"}, {"sha": "6fdb24fec7e00cbe974f7bb00be3851098f3f0d6", "filename": "fixincludes/procopen.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fprocopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fprocopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fprocopen.c?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/procopen.c"}, {"sha": "902fda1507264bdc0b17354d88ce1773722ab071", "filename": "fixincludes/server.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fserver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fserver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fserver.c?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/server.c"}, {"sha": "30de054e411bfaf68004faf955fa6215ba0a5674", "filename": "fixincludes/server.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fserver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fserver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fserver.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/server.h"}, {"sha": "a518e0a08f9b20db1cdb665c1cba6ab86cfccbc2", "filename": "fixincludes/system.h", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fsystem.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -0,0 +1,156 @@\n+/* Get common system includes and various definitions and declarations based\n+   on autoconf macros.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n+\n+This file is part of libcpp (aka cpplib).\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+02111-1307, USA.  */\n+\n+\n+#ifndef FIXINC_SYSTEM_H\n+#define FIXINC_SYSTEM_H\n+\n+/* We must include stdarg.h before stdio.h.  */\n+#include <stdarg.h>\n+\n+#ifdef HAVE_STDDEF_H\n+# include <stddef.h>\n+#endif\n+\n+#include <stdio.h>\n+\n+/* Define a generic NULL if one hasn't already been defined.  */\n+#ifndef NULL\n+#define NULL 0\n+#endif\n+\n+/* fixincludes is not a multi-threaded application and therefore we\n+   do not have to use the locking functions.  In fact, using the locking\n+   functions can cause the compiler to be significantly slower under\n+   I/O bound conditions (such as -g -O0 on very large source files).\n+\n+   HAVE_DECL_PUTC_UNLOCKED actually indicates whether or not the stdio\n+   code is multi-thread safe by default.  If it is set to 0, then do\n+   not worry about using the _unlocked functions.\n+\n+   fputs_unlocked, fwrite_unlocked, and fprintf_unlocked are\n+   extensions and need to be prototyped by hand (since we do not\n+   define _GNU_SOURCE).  */\n+\n+#if defined HAVE_DECL_PUTC_UNLOCKED && HAVE_DECL_PUTC_UNLOCKED\n+\n+# ifdef HAVE_PUTC_UNLOCKED\n+#  undef putc\n+#  define putc(C, Stream) putc_unlocked (C, Stream)\n+# endif\n+# ifdef HAVE_FPUTC_UNLOCKED\n+#  undef fputc\n+#  define fputc(C, Stream) fputc_unlocked (C, Stream)\n+# endif\n+\n+# ifdef HAVE_FPUTS_UNLOCKED\n+#  undef fputs\n+#  define fputs(String, Stream) fputs_unlocked (String, Stream)\n+#  if defined (HAVE_DECL_FPUTS_UNLOCKED) && !HAVE_DECL_FPUTS_UNLOCKED\n+extern int fputs_unlocked (const char *, FILE *);\n+#  endif\n+# endif\n+# ifdef HAVE_FWRITE_UNLOCKED\n+#  undef fwrite\n+#  define fwrite(Ptr, Size, N, Stream) fwrite_unlocked (Ptr, Size, N, Stream)\n+#  if defined (HAVE_DECL_FWRITE_UNLOCKED) && !HAVE_DECL_FWRITE_UNLOCKED\n+extern int fwrite_unlocked (const void *, size_t, size_t, FILE *);\n+#  endif\n+# endif\n+# ifdef HAVE_FPRINTF_UNLOCKED\n+#  undef fprintf\n+/* We can't use a function-like macro here because we don't know if\n+   we have varargs macros.  */\n+#  define fprintf fprintf_unlocked\n+#  if defined (HAVE_DECL_FPRINTF_UNLOCKED) && !HAVE_DECL_FPRINTF_UNLOCKED\n+extern int fprintf_unlocked (FILE *, const char *, ...);\n+#  endif\n+# endif\n+\n+#endif\n+\n+/* ??? Glibc's fwrite/fread_unlocked macros cause\n+   \"warning: signed and unsigned type in conditional expression\".  */\n+#undef fread_unlocked\n+#undef fwrite_unlocked\n+\n+#include <sys/types.h>\n+#include <errno.h>\n+\n+#if !defined (errno) && defined (HAVE_DECL_ERRNO) && !HAVE_DECL_ERRNO\n+extern int errno;\n+#endif\n+\n+/* Some of glibc's string inlines cause warnings.  Plus we'd rather\n+   rely on (and therefore test) GCC's string builtins.  */\n+#define __NO_STRING_INLINES\n+\n+#ifdef HAVE_STRING_H\n+# include <string.h>\n+#else\n+# ifdef HAVE_STRINGS_H\n+#  include <strings.h>\n+# endif\n+#endif\n+\n+#ifdef HAVE_STDLIB_H\n+# include <stdlib.h>\n+#endif\n+\n+#ifdef HAVE_UNISTD_H\n+# include <unistd.h>\n+#endif\n+\n+#ifdef HAVE_FCNTL_H\n+# include <fcntl.h>\n+#else\n+# ifdef HAVE_SYS_FILE_H\n+#  include <sys/file.h>\n+# endif\n+#endif\n+\n+/* The HAVE_DECL_* macros are three-state, undefined, 0 or 1.  If they\n+   are defined to 0 then we must provide the relevant declaration\n+   here.  These checks will be in the undefined state while configure\n+   is running so be careful to test \"defined (HAVE_DECL_*)\".  */\n+\n+#if defined (HAVE_DECL_ABORT) && !HAVE_DECL_ABORT\n+extern void abort (void);\n+#endif\n+\n+#if HAVE_SYS_STAT_H\n+# include <sys/stat.h>\n+#endif\n+\n+/* Test if something is a normal file.  */\n+#ifndef S_ISREG\n+#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)\n+#endif\n+\n+/* Filename handling macros.  */\n+#include \"filenames.h\"\n+\n+/* Get libiberty declarations.  */\n+#include \"libiberty.h\"\n+#include \"safe-ctype.h\"\n+\n+#endif /* ! FIXINC_SYSTEM_H */"}, {"sha": "45e8e1f700465c0bf68dd3ff35b7c64b9d5ed9a2", "filename": "fixincludes/tests/base/X11/ShellP.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2FX11%2FShellP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2FX11%2FShellP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2FX11%2FShellP.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/X11/ShellP.h"}, {"sha": "5fac5dba9b3a3e3db90c2748bda9a89e8545fe2d", "filename": "fixincludes/tests/base/X11/Xmu.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2FX11%2FXmu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2FX11%2FXmu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2FX11%2FXmu.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/X11/Xmu.h"}, {"sha": "afc3a897ed1c2953a51f2e006d89fd0da1b01ae9", "filename": "fixincludes/tests/base/Xm/BaseClassI.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2FXm%2FBaseClassI.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2FXm%2FBaseClassI.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2FXm%2FBaseClassI.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/Xm/BaseClassI.h"}, {"sha": "61e6df1164eaf6ea72cbbc0a86abfa3473e4c55f", "filename": "fixincludes/tests/base/Xm/Traversal.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2FXm%2FTraversal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2FXm%2FTraversal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2FXm%2FTraversal.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/Xm/Traversal.h"}, {"sha": "99f0c82223cd1480c22eb67e414577492d4a626a", "filename": "fixincludes/tests/base/_G_config.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2F_G_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2F_G_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2F_G_config.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/_G_config.h"}, {"sha": "c8a9ca2088ecfe256e08a1d45b0fd81ee0a2926c", "filename": "fixincludes/tests/base/ansi/math.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fansi%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fansi%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fansi%2Fmath.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/ansi/math.h"}, {"sha": "e47d49cc8dfddeade6bb04a00b1af2364d050701", "filename": "fixincludes/tests/base/ansi/stdlib.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fansi%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fansi%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fansi%2Fstdlib.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/ansi/stdlib.h"}, {"sha": "b886700c443395e1285cd01cbeddf50a53307376", "filename": "fixincludes/tests/base/arch/i960/archI960.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Farch%2Fi960%2FarchI960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Farch%2Fi960%2FarchI960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Farch%2Fi960%2FarchI960.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/arch/i960/archI960.h"}, {"sha": "acd8ed54577e4f748c3622c55d83b7cea40f5130", "filename": "fixincludes/tests/base/arpa/inet.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Farpa%2Finet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Farpa%2Finet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Farpa%2Finet.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/arpa/inet.h"}, {"sha": "2642cbe49c4bf1fe969adb46a2f9f9752f48254a", "filename": "fixincludes/tests/base/assert.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fassert.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/assert.h"}, {"sha": "939a5b1c9a49eb0884fcdcc8135c3240f7aa8bc9", "filename": "fixincludes/tests/base/bsd/libc.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fbsd%2Flibc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fbsd%2Flibc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fbsd%2Flibc.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/bsd/libc.h"}, {"sha": "f3e0daaee98654de4ff6a4dca417f6251749e02e", "filename": "fixincludes/tests/base/c_asm.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fc_asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fc_asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fc_asm.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/c_asm.h"}, {"sha": "16b18dc4138dc4bef4d9605311e6c3f32003b9c9", "filename": "fixincludes/tests/base/ctrl-quotes-def-1.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fctrl-quotes-def-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fctrl-quotes-def-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fctrl-quotes-def-1.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/ctrl-quotes-def-1.h"}, {"sha": "deabd5e447348026b6bd818733cdce03ab7d856a", "filename": "fixincludes/tests/base/ctype.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fctype.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/ctype.h"}, {"sha": "ba2db2448a0fac21081a285ff1f62526821d7c6b", "filename": "fixincludes/tests/base/curses.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fcurses.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fcurses.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fcurses.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/curses.h"}, {"sha": "ad6c8c99f956d8981c8489e22982a0f50207250e", "filename": "fixincludes/tests/base/fcntl.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ffcntl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ffcntl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Ffcntl.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/fcntl.h"}, {"sha": "0422d0901a95f1afc2a5a72dd858fcf1d8c9899a", "filename": "fixincludes/tests/base/fixinc-test-limits.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ffixinc-test-limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ffixinc-test-limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Ffixinc-test-limits.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/fixinc-test-limits.h"}, {"sha": "45fec6349e016702fd2ff54c53887777dfec8d23", "filename": "fixincludes/tests/base/fs/rfs/rf_cache.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ffs%2Frfs%2Frf_cache.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ffs%2Frfs%2Frf_cache.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Ffs%2Frfs%2Frf_cache.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/fs/rfs/rf_cache.h"}, {"sha": "2c67852bc51db90a84dbded80bfe786d9be1a428", "filename": "fixincludes/tests/base/hsfs/hsfs_spec.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fhsfs%2Fhsfs_spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fhsfs%2Fhsfs_spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fhsfs%2Fhsfs_spec.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/hsfs/hsfs_spec.h"}, {"sha": "f39ac3f90cf01fe879dae60a81ebaa74e359b5d3", "filename": "fixincludes/tests/base/internal/math_core.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Finternal%2Fmath_core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Finternal%2Fmath_core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Finternal%2Fmath_core.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/internal/math_core.h"}, {"sha": "a491e865af7bd40f6ed64db7554f3c82e6252860", "filename": "fixincludes/tests/base/internal/sgimacros.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Finternal%2Fsgimacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Finternal%2Fsgimacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Finternal%2Fsgimacros.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/internal/sgimacros.h"}, {"sha": "5b358a322135f28715c7b23b54858e1a87a86275", "filename": "fixincludes/tests/base/internal/wchar_core.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Finternal%2Fwchar_core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Finternal%2Fwchar_core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Finternal%2Fwchar_core.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/internal/wchar_core.h"}, {"sha": "06d7ebd5ce364d4d900d8f3d015f6e092c0c9c1d", "filename": "fixincludes/tests/base/inttypes.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Finttypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Finttypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Finttypes.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/inttypes.h"}, {"sha": "383ff08f1cad4b9b839d9f80cec5da60194eb96f", "filename": "fixincludes/tests/base/io-quotes-def-1.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fio-quotes-def-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fio-quotes-def-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fio-quotes-def-1.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/io-quotes-def-1.h"}, {"sha": "3b079e544c966e24c00121ca5f8412c0ac8e664a", "filename": "fixincludes/tests/base/locale.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Flocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Flocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Flocale.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/locale.h"}, {"sha": "c0620312d34dc6268ba08eb0df6bdc273ae7afc2", "filename": "fixincludes/tests/base/mach-o/dyld.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fmach-o%2Fdyld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fmach-o%2Fdyld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fmach-o%2Fdyld.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/mach-o/dyld.h"}, {"sha": "5662d291dd72d090d50834c2b19440acfb8bac76", "filename": "fixincludes/tests/base/machine/cpu.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fmachine%2Fcpu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fmachine%2Fcpu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fmachine%2Fcpu.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/machine/cpu.h"}, {"sha": "3866af8c7cf232e143d78d8a46589e0567bda10d", "filename": "fixincludes/tests/base/malloc.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fmalloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fmalloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fmalloc.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/malloc.h"}, {"sha": "52fa3f399962b6322721744439aa1e551d625b08", "filename": "fixincludes/tests/base/math.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fmath.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/math.h"}, {"sha": "e506c6eabb8355e72872c7f5144a0c7987d7968b", "filename": "fixincludes/tests/base/netdnet/dnetdb.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fnetdnet%2Fdnetdb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fnetdnet%2Fdnetdb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fnetdnet%2Fdnetdb.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/netdnet/dnetdb.h"}, {"sha": "7b2990352943f638e14ed84a3bb89c579e0dafa3", "filename": "fixincludes/tests/base/netinet/ip.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fnetinet%2Fip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fnetinet%2Fip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fnetinet%2Fip.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/netinet/ip.h"}, {"sha": "ea8e8dd1e329575bd15379feb180d3acd1e1aa92", "filename": "fixincludes/tests/base/obstack.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fobstack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fobstack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fobstack.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/obstack.h"}, {"sha": "19230cb334c84c0ba2ded6864682339c077e032d", "filename": "fixincludes/tests/base/pixrect/memvar.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fpixrect%2Fmemvar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fpixrect%2Fmemvar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fpixrect%2Fmemvar.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/pixrect/memvar.h"}, {"sha": "385c055ec83d7a4504218b4c3a154e09b180a98a", "filename": "fixincludes/tests/base/pthread.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fpthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fpthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fpthread.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/pthread.h"}, {"sha": "950dabb2632c1791b9095ef33b18ad358a720053", "filename": "fixincludes/tests/base/reg_types.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Freg_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Freg_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Freg_types.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/reg_types.h"}, {"sha": "304b790f4dab885e9a18b6222844ff2161ebdb73", "filename": "fixincludes/tests/base/regex.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fregex.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/regex.h"}, {"sha": "35ec0494274feb6b7a234922e15ce220198c5557", "filename": "fixincludes/tests/base/regexp.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fregexp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fregexp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fregexp.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/regexp.h"}, {"sha": "42ba8470767982fa6b54dceb0c54cb354f8f13ef", "filename": "fixincludes/tests/base/rpc/auth.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Frpc%2Fauth.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Frpc%2Fauth.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Frpc%2Fauth.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/rpc/auth.h"}, {"sha": "2e7847897f4f51b2ad69c96d84a15080c070db47", "filename": "fixincludes/tests/base/rpc/rpc.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Frpc%2Frpc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Frpc%2Frpc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Frpc%2Frpc.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/rpc/rpc.h"}, {"sha": "4e1245fb04f2e1b6a1985fc16c460f6c0739c392", "filename": "fixincludes/tests/base/rpc/svc.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Frpc%2Fsvc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Frpc%2Fsvc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Frpc%2Fsvc.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/rpc/svc.h"}, {"sha": "7b9f9bae9618cc044e601f3b2ef0872c02eaa442", "filename": "fixincludes/tests/base/rpc/xdr.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Frpc%2Fxdr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Frpc%2Fxdr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Frpc%2Fxdr.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/rpc/xdr.h"}, {"sha": "05dc65b6650317624dd5ff0e256d7b3f9e554ad1", "filename": "fixincludes/tests/base/rpcsvc/rstat.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Frpcsvc%2Frstat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Frpcsvc%2Frstat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Frpcsvc%2Frstat.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/rpcsvc/rstat.h"}, {"sha": "727c4092526ecbc928d31f3a77e0f7f37f1efa17", "filename": "fixincludes/tests/base/rpcsvc/rusers.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Frpcsvc%2Frusers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Frpcsvc%2Frusers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Frpcsvc%2Frusers.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/rpcsvc/rusers.h"}, {"sha": "5690f7789452f6116efed7dab045999f88512949", "filename": "fixincludes/tests/base/sparc/asm_linkage.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsparc%2Fasm_linkage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsparc%2Fasm_linkage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsparc%2Fasm_linkage.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sparc/asm_linkage.h"}, {"sha": "fccf8063fa39d898e8215df27fd402901fc0acba", "filename": "fixincludes/tests/base/standards.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fstandards.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fstandards.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fstandards.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/standards.h"}, {"sha": "ea2c001e163e07caf4db54ec639bc447656afb8d", "filename": "fixincludes/tests/base/stdio.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fstdio.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/stdio.h"}, {"sha": "788de24b264eb5ca48e5aeb0ad7606a515c93c24", "filename": "fixincludes/tests/base/stdio_tag.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fstdio_tag.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fstdio_tag.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fstdio_tag.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/stdio_tag.h"}, {"sha": "0e1e59cb4f06de92851ce4c87116b2a07f00bb9a", "filename": "fixincludes/tests/base/stdlib.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fstdlib.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/stdlib.h"}, {"sha": "d70f9e08a3a948cadbf3160ead4979419dd63c03", "filename": "fixincludes/tests/base/string.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fstring.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/string.h"}, {"sha": "f17d3f81197fb6eafed0026a7818e1fc93c9d109", "filename": "fixincludes/tests/base/strings.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fstrings.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fstrings.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fstrings.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/strings.h"}, {"sha": "0f35cb8adb87b7ad5918eaec342a95356e9b0b4e", "filename": "fixincludes/tests/base/sundev/vuid_event.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsundev%2Fvuid_event.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsundev%2Fvuid_event.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsundev%2Fvuid_event.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sundev/vuid_event.h"}, {"sha": "8cd0b19d142b9727723922e2f28731e9efb93858", "filename": "fixincludes/tests/base/sunwindow/win_lock.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsunwindow%2Fwin_lock.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsunwindow%2Fwin_lock.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsunwindow%2Fwin_lock.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sunwindow/win_lock.h"}, {"sha": "0c811a3aa0f11ced1789aea20c55f20e380b786b", "filename": "fixincludes/tests/base/sym.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsym.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsym.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsym.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sym.h"}, {"sha": "658830a7bf6f3f5c5268f47e15031f0d7746cd07", "filename": "fixincludes/tests/base/sys/asm.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fasm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fasm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fasm.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/asm.h"}, {"sha": "8d95282d272fe018d9c50700ef53a1e3d28d17f0", "filename": "fixincludes/tests/base/sys/cdefs.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fcdefs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fcdefs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fcdefs.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/cdefs.h"}, {"sha": "c5016a48fa3c35bff687f6e2afbb07fb30d66d96", "filename": "fixincludes/tests/base/sys/file.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Ffile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Ffile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Ffile.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/file.h"}, {"sha": "8e260a5711401f59d6eff51e6bf71275c54ac1b1", "filename": "fixincludes/tests/base/sys/ioctl.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fioctl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fioctl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fioctl.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/ioctl.h"}, {"sha": "cd8ba2a267d10ca1553722a0b7c588db53aebf95", "filename": "fixincludes/tests/base/sys/limits.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Flimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Flimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Flimits.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/limits.h"}, {"sha": "a03741372077a2dbc70b434b51ad1ad35e458917", "filename": "fixincludes/tests/base/sys/machine.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fmachine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fmachine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fmachine.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/machine.h"}, {"sha": "8fa2fb18c2a5f0dcf65d8edad376e9eb2cbef3be", "filename": "fixincludes/tests/base/sys/mman.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fmman.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fmman.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fmman.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/mman.h"}, {"sha": "41269247bbb08826c764b42a4d5f2d431cc5a0e7", "filename": "fixincludes/tests/base/sys/param.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fparam.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fparam.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fparam.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/param.h"}, {"sha": "6723427e89cf5168715688176f7f3690483aed03", "filename": "fixincludes/tests/base/sys/regset.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fregset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fregset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fregset.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/regset.h"}, {"sha": "7a9ecb113cde3d12acf82dcfb36af018448d6510", "filename": "fixincludes/tests/base/sys/signal.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fsignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fsignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fsignal.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/signal.h"}, {"sha": "0898ed00a5bf63f6f4da0f5c9ebbed9656ec45ad", "filename": "fixincludes/tests/base/sys/socket.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fsocket.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/socket.h"}, {"sha": "a25f65011ea9759d0c3544f8492d39c12f0a996a", "filename": "fixincludes/tests/base/sys/spinlock.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fspinlock.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fspinlock.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fspinlock.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/spinlock.h"}, {"sha": "c2b2fb6d5649b91fca311378240ec050bbbbd42d", "filename": "fixincludes/tests/base/sys/stat.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fstat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fstat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fstat.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/stat.h"}, {"sha": "f009f7e11aa9995e59343d483cd28ade1d1b8976", "filename": "fixincludes/tests/base/sys/time.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Ftime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Ftime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Ftime.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/time.h"}, {"sha": "2de7d78aa83b27558c0c98cba74dfd57c63759c5", "filename": "fixincludes/tests/base/sys/times.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Ftimes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Ftimes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Ftimes.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/times.h"}, {"sha": "683b5e93ecd0025cfef13d1339e5c3c2ad66e62c", "filename": "fixincludes/tests/base/sys/types.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Ftypes.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/types.h"}, {"sha": "5f06415400119287dffc477ce030811aa7588d32", "filename": "fixincludes/tests/base/sys/utsname.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Futsname.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Futsname.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Futsname.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/utsname.h"}, {"sha": "a0311c65d0fda5d65edd09e838352bf4caae5583", "filename": "fixincludes/tests/base/sys/wait.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fwait.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fsys%2Fwait.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fwait.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/sys/wait.h"}, {"sha": "0530cdf490ff344ec61d2c4870e06e69b84b710d", "filename": "fixincludes/tests/base/testing.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ftesting.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ftesting.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Ftesting.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/testing.h"}, {"sha": "cf22e2014d6f71ce070eef318e525e7acb16d9f0", "filename": "fixincludes/tests/base/time.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ftime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ftime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Ftime.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/time.h"}, {"sha": "46bc611e44976f6c052e3fc80ce3ebdc7cdfb6b3", "filename": "fixincludes/tests/base/tinfo.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ftinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ftinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Ftinfo.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/tinfo.h"}, {"sha": "76a9338d97099babe6b8ef4f4b835e6db4a6d50e", "filename": "fixincludes/tests/base/types/vxTypesBase.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ftypes%2FvxTypesBase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Ftypes%2FvxTypesBase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Ftypes%2FvxTypesBase.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/types/vxTypesBase.h"}, {"sha": "98e8c34b8caf10ac94b2358c0e8967b1f9b2b8a9", "filename": "fixincludes/tests/base/unistd.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Funistd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Funistd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Funistd.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/unistd.h"}, {"sha": "5c0b9dfe86adc3bdcfa8a2e2cab3928ebc548d53", "filename": "fixincludes/tests/base/wchar.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fwchar.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/wchar.h"}, {"sha": "e3c17fff77b7a43bfd122520cb3102af1a1db41e", "filename": "fixincludes/tests/base/widec.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fwidec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/fixincludes%2Ftests%2Fbase%2Fwidec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fwidec.h?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "previous_filename": "gcc/fixinc/tests/base/widec.h"}, {"sha": "f0331aa8f55012c2a572f84cf63f6ecfb270318f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -1,3 +1,22 @@\n+2004-08-31  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* Makefile.in (build_subdir): New substitution.\n+\t(fixinc.sh): Simplify heavily since fixincludes is already built.\n+\t(stmp-fixinc): Depend on specs.ready.\n+\t(install-mkheaders): Use new location of fixincludes.\n+\t(clean): Do not descend into fixinc.\n+\t(FORBUILD): Replace with ../$(build_subdir).\n+\t* configure.ac (build_subdir): Substitute.\n+\t(FORBUILD): Do not set.\n+\t(all_outputs): Remove fixinc/Makefile.\n+\t(default commands): Do not create links in fixinc.\n+\t* mkfixinc.sh: New, from fixinc/mkfixinc.sh without\n+\tthe fixincludes configuration steps and substituting\n+\t@FIXINCL@ in fixinc.in.\n+\t* fixinc.in: New, from fixinc/fixincl.sh.\n+\n+\t* fixinc/*: Removed.\n+\t\n 2004-08-31  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* attribs.c (strip_attrs): Remove.\n@@ -135,6 +154,7 @@\n \t* fold-const.c (tree_expr_nonzero_p): Use get_base_address before\n \tassuming an ADDR_EXPR is non-null.\n \n+>>>>>>> 2.5169\n 2004-08-30  Jason Merrill  <jason@redhat.com>\n \n \t* gthr-posix.h, gthr-dce.h: Add #pragma weaks."}, {"sha": "dedb351f66fba5dd452ba5f4911feefef7315b8c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -83,6 +83,8 @@ top_builddir = .\n # It's normally the absolute path to the current directory.\n objdir = @objdir@\n \n+build_subdir=@build_subdir@\n+\n # --------\n # Defined vpaths\n # --------\n@@ -742,10 +744,9 @@ ALL_CFLAGS = $(X_CFLAGS) $(T_CFLAGS) \\\n # Likewise.\n ALL_CPPFLAGS = $(CPPFLAGS) $(X_CPPFLAGS) $(T_CPPFLAGS)\n \n-# Build and host support libraries.  FORBUILD is either\n-# .. or ../$(build_alias) depending on whether host != build.\n+# Build and host support libraries.\n LIBIBERTY = ../libiberty/libiberty.a\n-BUILD_LIBIBERTY = @FORBUILD@/libiberty/libiberty.a\n+BUILD_LIBIBERTY = ../$(build_subdir)/libiberty/libiberty.a\n \n # Dependencies on the intl and portability libraries.\n LIBDEPS= $(CPPLIB) $(LIBIBERTY) $(LIBINTL_DEP) $(LIBICONV_DEP) $(BANSHEELIB)\n@@ -2778,28 +2779,16 @@ specs.ready: specs\n \t\t$(STAMP) specs.ready; \\\n \tfi\n \n-# Until someone fixes this recursive make nightmare (please note where\n-# BUILD_CFLAGS is first expanded below versus which later make invocation\n-# has the fine-grain -warn markings for fixinc):\n-fixinc.sh-warn = -Wno-error\n-\n-FIXINCSRCDIR=$(srcdir)/fixinc\n-fixinc.sh: $(FIXINCSRCDIR)/mkfixinc.sh $(FIXINCSRCDIR)/fixincl.c \\\n-\t$(FIXINCSRCDIR)/procopen.c $(FIXINCSRCDIR)/server.c \\\n-\t$(FIXINCSRCDIR)/server.h $(FIXINCSRCDIR)/inclhack.def specs.ready\n-\t(MAKE=\"$(MAKE)\"; srcdir=`cd $(srcdir)/fixinc && ${PWD_COMMAND}` ; \\\n-\tCC=\"$(CC_FOR_BUILD)\"; CFLAGS=\"$(BUILD_CFLAGS)\"; LDFLAGS=\"$(BUILD_LDFLAGS)\"; \\\n-\tLIBERTY=`${PWD_COMMAND}`/\"$(BUILD_LIBIBERTY)\"; \\\n-\texport MAKE srcdir CC CFLAGS LDFLAGS LIBERTY; \\\n-\tcd ./fixinc && \\\n-\t$(SHELL) $${srcdir}/mkfixinc.sh $(build) $(target))\n+fixinc.sh: mkfixinc.sh fixinc.in\n+\tbuild_subdir=\"$(build_subdir)\" srcdir=\"$(srcdir)\" \\\n+\t  $(SHELL) $(srcdir)/mkfixinc.sh $(build) $(target)\n \n .PHONY: install-gcc-tooldir\n install-gcc-tooldir:\n \t$(mkinstalldirs) $(DESTDIR)$(gcc_tooldir)\n \n # Build fixed copies of system files.\n-stmp-fixinc: fixinc.sh gsyslimits.h\n+stmp-fixinc: fixinc.sh gsyslimits.h specs.ready\n \t@if test ! -d ${SYSTEM_HEADER_DIR}; then \\\n \t  echo The directory that should contain system headers does not exist: >&2 ; \\\n \t  echo \"  ${SYSTEM_HEADER_DIR}\" >&2 ; \\\n@@ -3042,8 +3031,7 @@ mostlyclean: lang.mostlyclean\n \t-rm -rf fix-header$(build_exeext) xsys-protos.h deduced.h tmp-deduced.h \\\n \t  gen-protos$(build_exeext) fixproto.list fixtmp.* fixhdr.ready\n # Delete files generated for fixincl\n-\t-rm -rf fixincl fixinc.sh specs.ready\n-\t(cd fixinc && $(MAKE) clean)\n+\t-rm -rf fixinc.sh specs.ready\n # Delete unwanted output files from TeX.\n \t-rm -f *.toc *.log *.vr *.fn *.cp *.tp *.ky *.pg\n \t-rm -f */*.toc */*.log */*.vr */*.fn */*.cp */*.tp */*.ky */*.pg\n@@ -3352,7 +3340,8 @@ install-mkheaders: stmp-int-hdrs $(STMP_FIXPROTO) install-include-dir \\\n \t  $(INSTALL_DATA) $(srcdir)/README-fixinc \\\n \t    $(DESTDIR)$(itoolsdatadir)/include/README ; \\\n \t  $(INSTALL_SCRIPT) fixinc.sh $(DESTDIR)$(itoolsdir)/fixinc.sh ; \\\n-\t  $(INSTALL_PROGRAM) fixinc/fixincl $(DESTDIR)$(itoolsdir)/fixincl ; \\\n+\t  $(INSTALL_PROGRAM) ../$(build_subdir)/fixincludes/fixincl$(build_exeext) \\\n+\t\t$(DESTDIR)$(itoolsdir)/fixincl ; \\\n \t  $(INSTALL_DATA) $(srcdir)/gsyslimits.h \\\n \t    $(DESTDIR)$(itoolsdatadir)/gsyslimits.h ; \\\n \telse :; fi"}, {"sha": "28f5551ea3cd22bd486e003b65dc9ff84c040530", "filename": "gcc/configure", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -309,7 +309,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical build_subdir host_subdir target_subdir GENINSRC CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT NO_MINUS_C_MINUS_O OUTPUT_OPTION CPP strict1_warn warn_cflags WERROR nocommon_flag TREEBROWSER EGREP valgrind_path valgrind_path_defines valgrind_command coverage_flags enable_multilib enable_shared TARGET_SYSTEM_ROOT TARGET_SYSTEM_ROOT_DEFINE CROSS_SYSTEM_HEADER_DIR onestep SET_MAKE AWK LN_S LN RANLIB ac_ct_RANLIB ranlib_flags INSTALL INSTALL_PROGRAM INSTALL_DATA make_compare_target have_mktemp_command MAKEINFO BUILD_INFO GENERATED_MANPAGES FLEX BISON NM AR stage1_cflags COLLECT2_LIBS GNAT_LIBEXC LDEXP_LIB TARGET_GETGROUPS_T LIBICONV LIBICONV_DEP manext objext gthread_flags extra_modes_file FORBUILD PACKAGE VERSION USE_NLS LIBINTL LIBINTL_DEP INCINTL XGETTEXT GMSGFMT POSUB CATALOGS CROSS ALL SYSTEM_HEADER_DIR inhibit_libc CC_FOR_BUILD BUILD_CFLAGS STMP_FIXINC STMP_FIXPROTO collect2 libgcc_visibility GGC zlibdir zlibinc MAINT ANDER BANSHEEINC BANSHEELIB gcc_tooldir dollar slibdir objdir subdirs srcdir all_boot_languages all_compilers all_gtfiles all_gtfiles_files_langs all_gtfiles_files_files all_lang_makefrags all_lang_makefiles all_languages all_stagestuff build_exeext build_install_headers_dir build_xm_file_list build_xm_include_list build_xm_defines check_languages cc_set_by_configure quoted_cc_set_by_configure cpp_install_dir xmake_file tmake_file extra_gcc_objs extra_headers_list extra_objs extra_parts extra_passes extra_programs float_h_file gcc_config_arguments gcc_gxx_include_dir libstdcxx_incdir gcc_version gcc_version_full gcc_version_trigger host_exeext host_xm_file_list host_xm_include_list host_xm_defines out_host_hook_obj install lang_opt_files lang_specs_files lang_tree_files local_prefix md_file objc_boehm_gc out_file out_object_file stage_prefix_set_by_configure quoted_stage_prefix_set_by_configure symbolic_link thread_file tm_file_list tm_include_list tm_defines tm_p_file_list tm_p_include_list xm_file_list xm_include_list xm_defines c_target_objs cxx_target_objs target_cpu_default GMPLIBS GMPINC LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os target_noncanonical build_subdir host_subdir target_subdir GENINSRC CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT NO_MINUS_C_MINUS_O OUTPUT_OPTION CPP strict1_warn warn_cflags WERROR nocommon_flag TREEBROWSER EGREP valgrind_path valgrind_path_defines valgrind_command coverage_flags enable_multilib enable_shared TARGET_SYSTEM_ROOT TARGET_SYSTEM_ROOT_DEFINE CROSS_SYSTEM_HEADER_DIR onestep SET_MAKE AWK LN_S LN RANLIB ac_ct_RANLIB ranlib_flags INSTALL INSTALL_PROGRAM INSTALL_DATA make_compare_target have_mktemp_command MAKEINFO BUILD_INFO GENERATED_MANPAGES FLEX BISON NM AR stage1_cflags COLLECT2_LIBS GNAT_LIBEXC LDEXP_LIB TARGET_GETGROUPS_T LIBICONV LIBICONV_DEP manext objext gthread_flags extra_modes_file PACKAGE VERSION USE_NLS LIBINTL LIBINTL_DEP INCINTL XGETTEXT GMSGFMT POSUB CATALOGS CROSS ALL SYSTEM_HEADER_DIR inhibit_libc CC_FOR_BUILD BUILD_CFLAGS STMP_FIXINC STMP_FIXPROTO collect2 libgcc_visibility GGC zlibdir zlibinc MAINT ANDER BANSHEEINC BANSHEELIB gcc_tooldir dollar slibdir objdir subdirs srcdir all_boot_languages all_compilers all_gtfiles all_gtfiles_files_langs all_gtfiles_files_files all_lang_makefrags all_lang_makefiles all_languages all_stagestuff build_exeext build_install_headers_dir build_xm_file_list build_xm_include_list build_xm_defines check_languages cc_set_by_configure quoted_cc_set_by_configure cpp_install_dir xmake_file tmake_file extra_gcc_objs extra_headers_list extra_objs extra_parts extra_passes extra_programs float_h_file gcc_config_arguments gcc_gxx_include_dir libstdcxx_incdir gcc_version gcc_version_full gcc_version_trigger host_exeext host_xm_file_list host_xm_include_list host_xm_defines out_host_hook_obj install lang_opt_files lang_specs_files lang_tree_files local_prefix md_file objc_boehm_gc out_file out_object_file stage_prefix_set_by_configure quoted_stage_prefix_set_by_configure symbolic_link thread_file tm_file_list tm_include_list tm_defines tm_p_file_list tm_p_include_list xm_file_list xm_include_list xm_defines c_target_objs cxx_target_objs target_cpu_default GMPLIBS GMPINC LIBOBJS LTLIBOBJS'\n ac_subst_files='language_hooks'\n \n # Initialize some variables set by options.\n@@ -9487,7 +9487,6 @@ fi\n if test x$host = x$build\n then\n \tbuild_auto=auto-host.h\n-\tFORBUILD=..\n else\n \t# We create a subdir, then run autoconf in the subdir.\n \t# To prevent recursion we set host and build for the new\n@@ -9514,7 +9513,6 @@ else\n \tcd ..\n \trm -rf $tempdir\n \tbuild_auto=auto-build.h\n-\tFORBUILD=../${build_subdir}\n fi\n \n \n@@ -12266,7 +12264,7 @@ all_languages=\n all_boot_languages=\n all_compilers=\n all_stagestuff=\n-all_outputs='Makefile fixinc/Makefile gccbug mklibgcc mkheaders libada-mk'\n+all_outputs='Makefile gccbug mklibgcc mkheaders libada-mk'\n # List of language makefile fragments.\n all_lang_makefrags=\n # List of language subdirectory makefiles.  Deprecated.\n@@ -13245,7 +13243,6 @@ s,@manext@,$manext,;t t\n s,@objext@,$objext,;t t\n s,@gthread_flags@,$gthread_flags,;t t\n s,@extra_modes_file@,$extra_modes_file,;t t\n-s,@FORBUILD@,$FORBUILD,;t t\n s,@PACKAGE@,$PACKAGE,;t t\n s,@VERSION@,$VERSION,;t t\n s,@USE_NLS@,$USE_NLS,;t t\n@@ -13935,7 +13932,7 @@ done\n # This is virtually a duplicate of what happens in configure.lang; we do\n # an extra check to make sure this only happens if ln -s can be used.\n if test \"$symbolic_link\" = \"ln -s\"; then\n- for d in ${subdirs} fixinc ; do\n+ for d in ${subdirs} ; do\n \tSTARTDIR=`${PWDCMD-pwd}`\n \tcd $d\n \tfor t in stage1 stage2 stage3 stage4 stageprofile stagefeedback include"}, {"sha": "328d42a83810abfe14787d4b8cbccd1ee3a8a21a", "filename": "gcc/configure.ac", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -1330,7 +1330,6 @@ fi\n if test x$host = x$build\n then\n \tbuild_auto=auto-host.h\n-\tFORBUILD=..\n else\n \t# We create a subdir, then run autoconf in the subdir.\n \t# To prevent recursion we set host and build for the new\n@@ -1357,9 +1356,8 @@ else\n \tcd ..\n \trm -rf $tempdir\n \tbuild_auto=auto-build.h\n-\tFORBUILD=../${build_subdir}\n fi\n-AC_SUBST(FORBUILD)\n+AC_SUBST(build_subdir)\n \n tm_file=\"${tm_file} defaults.h\"\n tm_p_file=\"${tm_p_file} tm-preds.h\"\n@@ -3035,7 +3033,7 @@ all_languages=\n all_boot_languages=\n all_compilers=\n all_stagestuff=\n-all_outputs='Makefile fixinc/Makefile gccbug mklibgcc mkheaders libada-mk'\n+all_outputs='Makefile gccbug mklibgcc mkheaders libada-mk'\n # List of language makefile fragments.\n all_lang_makefrags=\n # List of language subdirectory makefiles.  Deprecated.\n@@ -3329,7 +3327,7 @@ done\n # This is virtually a duplicate of what happens in configure.lang; we do\n # an extra check to make sure this only happens if ln -s can be used.\n if test \"$symbolic_link\" = \"ln -s\"; then\n- for d in ${subdirs} fixinc ; do\n+ for d in ${subdirs} ; do\n \tSTARTDIR=`${PWDCMD-pwd}`\n \tcd $d\n \tfor t in stage1 stage2 stage3 stage4 stageprofile stagefeedback include"}, {"sha": "8e0a2709ac7ce669766c73d8d79766f841e92352", "filename": "gcc/fixinc.in", "status": "renamed", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/gcc%2Ffixinc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/gcc%2Ffixinc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc.in?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -28,7 +28,7 @@\n #\n # # # # # # # # # # # # # # # # # # # # #\n \n-# Usage: fixincl.sh output-dir input-dir\n+# Usage: fixinc.sh output-dir input-dir\n #\n # Directory in which to store the results.\n # Fail if no arg to specify a directory for the output.\n@@ -96,13 +96,10 @@ esac\n # Original directory.\n ORIGDIR=`${PWDCMD}`\n export ORIGDIR\n-FIXINCL=${ORIGDIR}/fixinc/fixincl\n+FIXINCL=\"@FIXINCL@\"\n if [ ! -x $FIXINCL ] ; then\n-  FIXINCL=${ORIGDIR}/fixincl\n-  if [ ! -x $FIXINCL ] ; then\n-    echo \"Cannot find working fixincl\" >&2\n-    exit 1\n-  fi\n+  echo \"Cannot find working fixincl\" >&2\n+  exit 1\n fi\n export FIXINCL\n ", "previous_filename": "gcc/fixinc/fixincl.sh"}, {"sha": "a3700ccb2669b8cfa6e36eb7fe9b5446bddd4667", "filename": "gcc/fixinc/mkfixinc.sh", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b0fb680c62cc0e246909ec8be88c10e85e3d69/gcc%2Ffixinc%2Fmkfixinc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b0fb680c62cc0e246909ec8be88c10e85e3d69/gcc%2Ffixinc%2Fmkfixinc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Fmkfixinc.sh?ref=f7b0fb680c62cc0e246909ec8be88c10e85e3d69", "patch": "@@ -1,78 +0,0 @@\n-#! /bin/sh\n-\n-if [ $# -ne 2 ]\n-then\n-  echo \"Usage: $0 <build-mach-triplet> <target-mach-triplet>\"\n-  exit 1\n-fi\n-\n-build=$1\n-machine=$2\n-target=../fixinc.sh\n-\n-echo constructing ${target} for $machine to run on $build\n-fixincludes=\"${machine}\"\n-\n-# Choose one or two-process fix methodology.  Systems that cannot handle\n-# bi-directional pipes must use the two process method.\n-#\n-case $build in\n-\ti?86-*-msdosdjgpp* | \\\n-\t*-*-beos* )\n-\t\tMAKE=\"${MAKE} TARGETS=twoprocess\"\n-\t\tCFLAGS=\"${CFLAGS} -DSEPARATE_FIX_PROC\"\n-\t\t;;\n-\n-\tvax-dec-bsd* )\n-\t\tCFLAGS=\"${CFLAGS} -Dexit=xexit -Datexit=xatexit\"\n-\t\tMAKE=\"${MAKE} TARGETS=oneprocess\"\n-\t\t;;\n-\n-\t* )\n-\t\tMAKE=\"${MAKE} TARGETS=oneprocess\"\n-\t\t;;\n-esac\n-\n-# Check for special fix rules for particular targets\n-case $machine in\n-    alpha*-dec-*vms* | \\\n-    arm-semi-aof | \\\n-    hppa1.1-*-osf* | \\\n-    hppa1.1-*-bsd* | \\\n-    i370-*-openedition | \\\n-    i?86-moss-msdos* | \\\n-    i?86-*-moss* | \\\n-    i?86-*-pe | \\\n-    i?86-*-cygwin* | \\\n-    i?86-*-mingw32* | \\\n-    i?86-*-uwin* | \\\n-    i?86-*-interix* | \\\n-    powerpc-*-eabiaix* | \\\n-    powerpc-*-eabisim* | \\\n-    powerpc-*-eabi*    | \\\n-    powerpc-*-rtems*   | \\\n-    powerpcle-*-eabisim* | \\\n-    powerpcle-*-eabi* )\n-        #  Don't do any fixing.\n-        #\n-        fixincludes=\n-        ;;\n-esac\n-\n-#  IF there is no include fixing,\n-#  THEN create a no-op fixer and exit\n-#\n-if test -z \"$fixincludes\"\n-then\n-    (echo \"#! /bin/sh\" ; echo \"exit 0\" ) > ${target}\n-    chmod 755 ${target}\n-    exit 0\n-fi\n-\n-#  OK.  We gotta make the thing.\n-#  make and install either the binary or the default script\n-\n-defs=\"SHELL=\\\"$SHELL\\\" CC=\\\"$CC\\\" CFLAGS=\\\"$CFLAGS\\\" LDFLAGS=\\\"$LDFLAGS\\\" LIBERTY=\\\"$LIBERTY\\\"\"\n-cmd=\"$MAKE ${defs} install-bin\"\n-echo $cmd\n-eval $cmd"}, {"sha": "509aa357ee046dbeec2e20bffaf640a907bc2d18", "filename": "gcc/mkfixinc.sh", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71b5d516bc6cd5fc865ac560e4bea70607207272/gcc%2Fmkfixinc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71b5d516bc6cd5fc865ac560e4bea70607207272/gcc%2Fmkfixinc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkfixinc.sh?ref=71b5d516bc6cd5fc865ac560e4bea70607207272", "patch": "@@ -0,0 +1,44 @@\n+#! /bin/sh\n+\n+if [ $# -ne 2 ]\n+then\n+  echo \"Usage: $0 <build-mach-triplet> <target-mach-triplet>\"\n+  exit 1\n+fi\n+\n+build=$1\n+machine=$2\n+target=fixinc.sh\n+\n+# Check for special fix rules for particular targets\n+case $machine in\n+    alpha*-dec-*vms* | \\\n+    arm-semi-aof | \\\n+    hppa1.1-*-osf* | \\\n+    hppa1.1-*-bsd* | \\\n+    i370-*-openedition | \\\n+    i?86-moss-msdos* | \\\n+    i?86-*-moss* | \\\n+    i?86-*-pe | \\\n+    i?86-*-cygwin* | \\\n+    i?86-*-mingw32* | \\\n+    i?86-*-uwin* | \\\n+    i?86-*-interix* | \\\n+    powerpc-*-eabiaix* | \\\n+    powerpc-*-eabisim* | \\\n+    powerpc-*-eabi*    | \\\n+    powerpc-*-rtems*   | \\\n+    powerpcle-*-eabisim* | \\\n+    powerpcle-*-eabi* )\n+\t#  IF there is no include fixing,\n+\t#  THEN create a no-op fixer and exit\n+\t(echo \"#! /bin/sh\" ; echo \"exit 0\" ) > ${target}\n+        ;;\n+\n+    *)\n+\t../${build_subdir}/fixincludes/fixincl -v < /dev/null\n+\tsed \"s,@FIXINCL@,\\${ORIGDIR}/../${build_subdir}/fixincludes/fixincl,g\" \\\n+\t  ${srcdir}/fixinc.in > ${target}\n+\t;;\n+esac\n+chmod 755 ${target}"}]}