{"sha": "56ddd5e23af0906573e7d50348beb42d3dae82a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZkZGQ1ZTIzYWYwOTA2NTczZTdkNTAzNDhiZWI0MmQzZGFlODJhOQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-22T08:28:22Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-22T08:28:22Z"}, "message": "Daily bump.", "tree": {"sha": "dd4e1ff92bb401b93603999e8be26bfc0a7ef477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd4e1ff92bb401b93603999e8be26bfc0a7ef477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56ddd5e23af0906573e7d50348beb42d3dae82a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ddd5e23af0906573e7d50348beb42d3dae82a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56ddd5e23af0906573e7d50348beb42d3dae82a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ddd5e23af0906573e7d50348beb42d3dae82a9/comments", "author": null, "committer": null, "parents": [{"sha": "346b302d09c1e6db56d9fe69048acb32fbb97845", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346b302d09c1e6db56d9fe69048acb32fbb97845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346b302d09c1e6db56d9fe69048acb32fbb97845"}], "stats": {"total": 1191, "additions": 1190, "deletions": 1}, "files": [{"sha": "e82530f66afd503e536b8a8f116f0f0753c0bd5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 332, "deletions": 0, "changes": 332, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56ddd5e23af0906573e7d50348beb42d3dae82a9", "patch": "@@ -1,3 +1,335 @@\n+2020-10-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c/94722\n+\t* cfgexpand.c (stack_protect_decl_phase):\n+\tGuard with lookup_attribute(\"no_stack_protector\") at\n+\tvarious places.\n+\t(expand_used_vars): Likewise here.\n+\t* doc/extend.texi: Document no_stack_protector attribute.\n+\n+2020-10-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* cfgexpand.c: Move the enum to ...\n+\t* coretypes.h (enum stack_protector): ... here.\n+\t* function.c (assign_parm_adjust_stack_rtl): Use the stack_protector\n+\tenum.\n+\n+2020-10-22  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/multilib-generator: Add TODO, import itertools\n+\tand functools.reduce.\n+\tHandle expantion operator.\n+\t(LONG_EXT_PREFIXES): New.\n+\t(arch_canonicalize): Update comment and improve python3\n+\tdebuggability/compatibility.\n+\t(add_underline_prefix): New.\n+\t(_expand_combination): Ditto.\n+\t(unique): Ditto.\n+\t(expand_combination): Ditto.\n+\n+2020-10-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-ssa-phiopt.c (cond_removal_in_popcount_clz_ctz_pattern):\n+\tFor CLZ and CTZ tests, use type temporary instead of mode.\n+\n+2020-10-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config.gcc (x86_archs): Add samuel-2, nehemiah, c7 and esther.\n+\t(x86_64_archs): Add eden-x2, nano, nano-1000, nano-2000, nano-3000,\n+\tnano-x2, eden-x4, nano-x4, x86-64-v2, x86-64-v3 and x86-64-v4.\n+\t(i[34567]86-*-* | x86_64-*-*): Only allow x86-64-v* as argument\n+\tto --with-arch_64=.\n+\n+2020-10-22  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-pure-const.c (funct_state_summary_t::insert): Free stale\n+\tsummaries.\n+\n+2020-10-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* cgraph.c: Include tree-nested.h\n+\t(cgraph_node::create): Call maybe_record_nested_function.\n+\t(cgraph_node::remove): Do not remove function from nested function\n+\tinfos.\n+\t(cgraph_node::dump): Update.\n+\t(cgraph_node::unnest): Move to tree-nested.c\n+\t(cgraph_node::verify_node): Update.\n+\t(cgraph_c_finalize): Call nested_function_info::release.\n+\t* cgraph.h (struct symtab_node): Remove nested function info.\n+\t* cgraphclones.c (cgraph_node::create_clone): Do not clone nested\n+\tfunction info.\n+\t* cgraphunit.c (cgraph_node::analyze): Update.\n+\t(cgraph_node::expand): Do not worry about nested functions; they are\n+\tlowered.\n+\t(symbol_table::finalize_compilation_unit): Call\n+\tnested_function_info::release.\n+\t* gimplify.c: Include tree-nested.h\n+\t(unshare_body): Update.\n+\t(unvisit_body): Update.\n+\t* omp-offload.c (omp_discover_implicit_declare_target): Update.\n+\t* tree-nested.c: Include alloc-pool.h, tree-nested.h, symbol-summary.h\n+\t(nested_function_sum): New static variable.\n+\t(nested_function_info::get): New member function.\n+\t(nested_function_info::get_create): New member function.\n+\t(unnest_function): New function.\n+\t(nested_function_info::~nested_function_info): New member function.\n+\t(nested_function_info::release): New function.\n+\t(maybe_record_nested_function): New function.\n+\t(lookup_element_for_decl): Update.\n+\t(check_for_nested_with_variably_modified): Update.\n+\t(create_nesting_tree): Update.\n+\t(unnest_nesting_tree_1): Update.\n+\t(gimplify_all_functions): Update.\n+\t(lower_nested_functions): Update.\n+\t* tree-nested.h (class nested_function_info): New class.\n+\t(maybe_record_nested_function): Declare.\n+\t(unnest_function): Declare.\n+\t(first_nested_function): New inline function.\n+\t(next_nested_function): New inline function.\n+\t(nested_function_origin): New inline function.\n+\n+2020-10-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR rtl-optimization/97249\n+\t* simplify-rtx.c (simplify_binary_operation_1): Simplify\n+\tvec_select of a subreg of X to a vec_select of X.\n+\n+2020-10-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/87767\n+\t* config/i386/constraints.md (\"Br\"): New special memory\n+\tconstraint.\n+\t* config/i386/i386-expand.c (ix86_binary_operator_ok): Both\n+\tsource operand cannot be in memory or bcst_memory_operand.\n+\t* config/i386/i386.c (ix86_print_operand): Print bcst_mem_operand.\n+\t* config/i386/i386.h (VALID_BCST_MODE_P): New.\n+\t* config/i386/predicates.md (bcst_mem_operand): New predicate\n+\tfor AVX512 embedding broadcast memory operand.\n+\t(bcst_vector_operand): New predicate, vector_operand or\n+\tbcst_mem_operand.\n+\t* config/i386/sse.md\n+\t(*<plusminus_insn><mode>3<mask_name><round_name>): Extend\n+\tpredicate and constraints to handle bcst_mem_operand.\n+\t(*mul<mode>3<mask_name><round_name>): Ditto.\n+\t(<sse>_div<mode>3<mask_name><round_name>): Ditto.\n+\t(<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name><round_name>):\n+\tDitto.\n+\t(<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name><round_name>):\n+\tDitto.\n+\t(<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name><round_name>):\n+\tDitto.\n+\t(<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name><round_name>):\n+\tDitto.\n+\t(*<plusminus_insn><mode>3): Ditto.\n+\t(avx512dq_mul<mode>3<mask_name>): Ditto.\n+\t(*<sse4_1_avx2>_mul<mode>3<mask_name>): Ditto.\n+\t(*andnot<mode>3): Ditto.\n+\t(<mask_codefor><code><mode>3<mask_name>): Ditto.\n+\t(*sub<mode>3<mask_name>_bcst): Removed.\n+\t(*add<mode>3<mask_name>_bcst): Ditto.\n+\t(*mul<mode>3<mask_name>_bcst): Ditto.\n+\t(*<avx512>_div<mode>3<mask_name>_bcst): Ditto.\n+\t(*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_1):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_2):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fmadd_<mode><sd_maskz_name>_bcst_3):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_1):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_2):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fmsub_<mode><sd_maskz_name>_bcst_3):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_1):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_2):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fnmadd_<mode><sd_maskz_name>_bcst_3):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_1):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_2):\n+\tDitto.\n+\t(*<sd_mask_codefor>fma_fnmsub_<mode><sd_maskz_name>_bcst_3):\n+\tDitto.\n+\t(*sub<mode>3_bcst): Ditto.\n+\t(*add<mode>3_bcst): Ditto.\n+\t(*avx512dq_mul<mode>3<mask_name>_bcst): Ditto.\n+\t(*avx512f_mul<mode>3<mask_name>_bcst): Ditto.\n+\t(*andnot<mode>3_bcst): Ditto.\n+\t(*<code><mode>3_bcst): Ditto.\n+\t* config/i386/subst.md (bcst_round_constraint): New subst\n+\tattribute.\n+\t(bcst_round_nimm_predicate): Ditto.\n+\t(bcst_mask_prefix3): Ditto.\n+\t(bcst_mask_prefix4): Ditto.\n+\n+2020-10-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/87767\n+\t* ira-costs.c (record_operand_costs): Extract memory operand\n+\tfrom recog_data.operand[i] for record_address_regs.\n+\t(record_reg_classes): Extract memory operand from OP for\n+\tconditional judgement MEM_P.\n+\t* ira.c (ira_setup_alts): Ditto.\n+\t* lra-constraints.c (extract_mem_from_operand): New function.\n+\t(satisfies_memory_constraint_p): Extract memory operand from\n+\tOP for decompose_mem_address, return false when there's no\n+\tmemory operand inside OP.\n+\t(process_alt_operands): Remove MEM_P (op) since it would be\n+\tjudged in satisfies_memory_constraint_p.\n+\t* recog.c (asm_operand_ok): Extract memory operand from OP for\n+\tjudgement of memory_operand (OP, VOIDmode).\n+\t(constrain_operands): Don't unwrapper unary operator when\n+\tthere's memory operand inside.\n+\t* rtl.h (extract_mem_from_operand): New decl.\n+\n+2020-10-22  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/arm/mve.md (mve_vmaxq_<supf><mode>): Replace with ...\n+\t(mve_vmaxq_s<mode>, mve_vmaxq_u<mode>): ... these new insns to\n+\tuse smax/umax instead of VMAXQ.\n+\t(mve_vminq_<supf><mode>): Replace with ...\n+\t(mve_vminq_s<mode>, mve_vminq_u<mode>): ... these new insns to\n+\tuse smin/umin instead of VMINQ.\n+\t(mve_vmaxnmq_f<mode>): Use smax instead of VMAXNMQ_F.\n+\t(mve_vminnmq_f<mode>): Use smin instead of VMINNMQ_F.\n+\t* config/arm/vec-common.md (smin<mode>3): Use the new mode macros\n+\tARM_HAVE_<MODE>_ARITH.\n+\t(umin<mode>3, smax<mode>3, umax<mode>3): Likewise.\n+\n+2020-10-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97520\n+\t* gimple-range.cc (range_of_non_trivial_assignment): Handle x = &a\n+\tby returning a non-zero range.\n+\n+2020-10-22  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/arm/mve.md (mve_vmulq<mode>): New entry for vmul instruction\n+\tusing expression 'mult'.\n+\t(mve_vmulq_f<mode>): Use mult instead of VMULQ_F.\n+\t* config/arm/neon.md (mul<mode>3): Removed.\n+\t* config/arm/vec-common.md (mul<mode>3): Use the new mode macros\n+\tARM_HAVE_<MODE>_ARITH. Use mode iterator VDQWH instead of VALLW.\n+\n+2020-10-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97515\n+\t* value-query.cc (range_query::value_of_expr): If the result is\n+\tUNDEFINED, check to see if the global value is a constant.\n+\t(range_query::value_on_edge): Ditto.\n+\n+2020-10-21  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/97445\n+\t* ipa-inline.c (inline_insns_single): Add hint2 parameter.\n+\t(inline_insns_auto): Add hint2 parameter.\n+\t(can_inline_edge_by_limits_p): Update.\n+\t(want_inline_small_function_p): Update.\n+\t(wrapper_heuristics_may_apply): Update.\n+\n+2020-10-21  Richard Biener  <rguenther@suse.de>\n+\t    Andrew MacLeod  <amacleod@redhat.com>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\tPR target/97360\n+\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Remove call to\n+\tbuild_distinct_type_copy().\n+\n+2020-10-21  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/97445\n+\t* ipa-fnsummary.c (ipa_dump_hints): Add INLINE_HINT_builtin_constant_p.\n+\t(ipa_fn_summary::~ipa_fn_summary): Free builtin_constant_p_parms.\n+\t(ipa_fn_summary_t::duplicate): Duplicate builtin_constant_p_parms.\n+\t(ipa_dump_fn_summary): Dump builtin_constant_p_parms.\n+\t(add_builtin_constant_p_parm): New function\n+\t(set_cond_stmt_execution_predicate): Update builtin_constant_p_parms.\n+\t(ipa_call_context::estimate_size_and_time): Set\n+\tINLINE_HINT_builtin_constant_p..\n+\t(ipa_merge_fn_summary_after_inlining): Merge builtin_constant_p_parms.\n+\t(inline_read_section): Read builtin_constant_p_parms.\n+\t(ipa_fn_summary_write): Write builtin_constant_p_parms.\n+\t* ipa-fnsummary.h (enum ipa_hints_vals): Add\n+\tINLINE_HINT_builtin_constant_p.\n+\t* ipa-inline.c (want_inline_small_function_p): Use\n+\tINLINE_HINT_builtin_constant_p.\n+\t(edge_badness): Use INLINE_HINT_builtin_constant_p.\n+\n+2020-10-21  Douglas Rupp  <rupp@adacore.com>\n+\n+\t* config/vx-common.h (LINK_SPEC, LIB_SPEC): Remove #undef.\n+\n+2020-10-21  Douglas Rupp  <rupp@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.gcc (powerpc*-wrs-vxworks7r*): New case.\n+\t* config/rs6000/vxworks.h: Rework to handle VxWorks7.\n+\tRefactor as common bits + vx6 vs vx7 ones. For the\n+\tlatter, rely essentially on the Linux configuration\n+\tand adjust CPU to _VX_CPU in CPP_SPEC. Add a case\n+\tfor e6500. Use SUB3TARGET_OVERRIDE_OPTIONS for specifics\n+\tto preserve the Linux SUBSUBTARGET_OVERRIDE_OPTIONS\n+\tfor vx7.\n+\n+2020-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97500\n+\t* tree-vect-slp.c (vect_analyze_slp_backedges): Do not\n+\tfill backedges for inductions.\n+\n+2020-10-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/97506\n+\t* config/i386/i386-expand.c (ix86_expand_sse_movcc): Move\n+\top_true to dest directly when op_true equals op_false.\n+\n+2020-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97503\n+\t* tree-ssa-phiopt.c: Include internal-fn.h.\n+\t(cond_removal_in_popcount_pattern): Rename to ...\n+\t(cond_removal_in_popcount_clz_ctz_pattern): ... this.  Handle not just\n+\tpopcount, but also clz and ctz if it has C?Z_DEFINED_VALUE_AT_ZERO 2.\n+\n+2020-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfg.c (htab_bb_copy_original_entry): Remove.\n+\t(bb_copy_hasher): Likewise.\n+\t(bb_original, bb_copy, loop_copy): Use\n+\thash_map<int_hash<int, -1, -2>, int>.\n+\t(original_copy_bb_pool): Remove.\n+\t(initialize_original_copy_tables): Adjust.\n+\t(reset_original_copy_tables): Likewise.\n+\t(free_original_copy_tables): Likewise.\n+\t(original_copy_tables_initialized_p): Likewise.\n+\t(copy_original_table_clear): Simplify.\n+\t(copy_original_table_set): Likewise.\n+\t(get_bb_original): Likewise.\n+\t(get_bb_copy): Likewise.\n+\t(get_loop_copy): Likewise.\n+\n+2020-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfghooks.c (copy_bbs): Split out loop computing new_edges.\n+\n+2020-10-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range.cc (gimple_ranger::range_of_ssa_name_with_loop_info):\n+\tRemove TREE_OVERFLOW special case.\n+\t* vr-values.c (bounds_of_var_in_loop): Adjust overflow for\n+\tinvariants.\n+\n+2020-10-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* vr-values.h: Remove simplify_cond_using_ranges_2.\n+\t(range_fits_type_p): New.\n+\t* vr-values.c (range_fits_type_p): Remove static qualifier.\n+\t(vrp_simplify_cond_using_ranges): Move...\n+\t* tree-vrp.c (vrp_simplify_cond_using_ranges): ...to here.\n+\n 2020-10-22  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* config/arm/mve.md (mve_vmaxq_<supf><mode>): Replace with ..."}, {"sha": "d3ccbf5b38e7cb6481422f10ac6fbb9c9338797d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=56ddd5e23af0906573e7d50348beb42d3dae82a9", "patch": "@@ -1 +1 @@\n-20201021\n+20201022"}, {"sha": "dceca5b9b9a7719b70447d61a5023f5eef106cfd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 605, "deletions": 0, "changes": 605, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=56ddd5e23af0906573e7d50348beb42d3dae82a9", "patch": "@@ -1,3 +1,608 @@\n+2020-10-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c/94722\n+\t* gcc-interface/utils.c (handle_no_stack_protect_attribute):\n+\tNew.\n+\t(handle_stack_protect_attribute): Add error message for a\n+\tno_stack_protector function.\n+\n+2020-10-22  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* Makefile.rtl (LIBGNAT_TARGET_PAIRS) <lynxos178>: Rely on\n+\tAux_Long_Float for all real types.\n+\n+2020-10-22  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* Makefile.rtl (LIBGNAT_TARGET_PAIRS): Use Long Float-based\n+\tvariant of Aux_Short_Float and Aux_Float on vxworks targets.\n+\t* libgnat/a-nashfl__wraplf.ads: New.\n+\t* libgnat/a-nuaufl__wraplf.ads: New.\n+\n+2020-10-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* Makefile.rtl (LIBGNAT_TARGET_PAIRS) <sparc*-sun-solaris>:\n+\tUse wraplf version of a-nallfl.\n+\n+2020-10-22  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* Makefile.rtl (LIBGNAT_TARGET_PAIRS): Use\n+\ta-nallfl__wraplf.ads on aarch64-* and ppc*-linux-gnu targets.\n+\t* libgnat/a-nallfl__wraplf.ads: New.\n+\n+2020-10-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc-interface/trans.c: Include tree-nested.h\n+\t(walk_nesting_tree): Update for new nested function info.\n+\n+2020-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Add a-llltio, a-lllwti,\n+\ta-lllzti and remove a-timoau, a-wtmoau and a-ztmoau.\n+\t(GNATRTL_128BIT_PAIRS): Add a-tiinio.adb, a-timoio.adb, a-wtinio.adb,\n+\ta-wtmoio.adb, a-ztinio.adb and a-ztmoio.adb.\n+\t* impunit.adb (Non_Imp_File_Names_95): Add a-llltio, a-lllwti and\n+\ta-lllzti.\n+\t* krunch.ads: Document trick for Ada.Long_Long_Long_Integer_*_IO.\n+\t* krunch.adb (Krunch): Add trick for Ada.Long_Long_Long_Integer_*_IO.\n+\t* libgnat/a-llltio.ads: Instantiate Ada.Text_IO.Integer_IO.\n+\t* libgnat/a-lllwti.ads: Instantiate Ada.Wide_Text_IO.Integer_IO.\n+\t* libgnat/a-lllzti.ads: Instantiate Ada.Wide_Wide_Text_IO.Integer_IO.\n+\t* libgnat/a-tigeau.ads (Load_Integer): New procedure.\n+\t* libgnat/a-tigeau.adb (Load_Integer): Likewise.\n+\t* libgnat/a-tiinau.ads, libgnat/a-tiinau.adb: Change to generic\n+\tpackage.\n+\t* libgnat/a-tiinio.adb: Instantiate it.\n+\t* libgnat/a-tiinio__128.adb: Likewise.\n+\t* libgnat/a-timoau.ads, libgnat/a-timoau.adb: Change to generic\n+\tpackage.\n+\t* libgnat/a-timoio.adb: Instantiate it.\n+\t* libgnat/a-timoio__128.adb: Likewise.\n+\t* libgnat/a-wtgeau.ads (Load_Integer): New procedure.\n+\t* libgnat/a-wtgeau.adb (Load_Integer): Likewise.\n+\t* libgnat/a-wtinau.ads, libgnat/a-wtinau.adb: Change to generic\n+\tpackage.\n+\t* libgnat/a-wtinio.adb: Instantiate it.\n+\t* libgnat/a-wtinio__128.adb: Likewise.\n+\t* libgnat/a-wtmoau.ads, libgnat/a-wtmoau.adb: Change to generic\n+\tpackage.\n+\t* libgnat/a-wtmoio.adb: Instantiate it.\n+\t* libgnat/a-wtmoio__128.adb: Likewise.\n+\t* libgnat/a-ztgeau.ads (Load_Integer): New procedure.\n+\t* libgnat/a-ztgeau.adb (Load_Integer): Likewise.\n+\t* libgnat/a-ztinau.ads, libgnat/a-ztinau.adb: Change to generic\n+\tpackage.\n+\t* libgnat/a-ztinio.adb: Instantiate it.\n+\t* libgnat/a-ztinio__128.adb: Likewise.\n+\t* libgnat/a-ztmoau.ads, libgnat/a-ztmoau.adb: Change to generic\n+\tpackage.\n+\t* libgnat/a-ztmoio.adb: Instantiate it.\n+\t* libgnat/a-ztmoio__128.adb: Likewise.\n+\n+2020-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Freeze_Subprogram_Body): Do not move the freeze\n+\tnode of the package body enclosing the instance when its parent\n+\tis in the same declarative part as the freeze node of the parent.\n+\n+2020-10-21  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch6.adb (Insert_Post_Call_Actions): When a function's\n+\tresult type requires finalization and we decide to make copy of\n+\ta call to the function and subsequently refer only to the copy,\n+\tthen don't forget to finalize the original function result\n+\tobject.\n+\n+2020-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Add s-widint,\n+\ts-widthi, s-widuns, s-widuns.\n+\t(GNATRTL_128BIT_OBJS): Add s-imglllb, s-imgllli, s-imglllu, s-imglllw,\n+\ts-valllli, s-vallllu, s-widllli, s-widlllu.\n+\t* exp_imgv.adb (Expand_Image_Attribute): Deal with 128-bit types.\n+\t(Expand_Value_Attribute): Likewise.\n+\t(Expand_Width_Attribute): Likewise.\n+\t* exp_put_image.adb (Build_Elementary_Put_Image_Call): Likewise.\n+\t* krunch.adb (Krunch): Deal with s-img, s-val and s-wid prefixes.\n+\t* rtsfind.ads (RTU_Id): Add System_Img_LLLI, System_Img_LLLU,\n+\tSystem_Val_LLLI, System_Val_LLL, System_Wid_Int, System_Wid_LLLI,\n+\tSystem_Wid_LLLU, System_Wid_Uns).\n+\t(RE_Id): Add RE_Image_Long_Long_Long_Integer,\n+\tRE_Image_Long_Long_Long_Unsigned,\n+\tRE_Put_Image_Long_Long_Long_Integer,\n+\tRE_Put_Image_Long_Long_Long_Unsigned,\n+\tRE_Long_Long_Long_Unsigned, RE_Value_Long_Long_Long_Integer,\n+\tRE_Value_Long_Long_Long_Unsigned, RE_Width_Integer,\n+\tRE_Width_Long_Long_Long_Integer, RE_Width_Long_Long_Long_Unsigned,\n+\tRE_Width_Unsigned, RE_Image_Long_Long_Long_Integer,\n+\tRE_Image_Long_Long_Long_Unsigned, RE_Put_Image_Long_Long_Long_Integer,\n+\tRE_Put_Image_Long_Long_Long_Unsigned, RE_Long_Long_Long_Unsigned,\n+\tRE_Value_Long_Long_Long_Integer, RE_Value_Long_Long_Long_Unsigned,\n+\tRE_Width_Integer, RE_Width_Long_Long_Long_Integer,\n+\tRE_Width_Long_Long_Long_Unsigned, RE_Width_Unsigned.\n+\t* libgnat/s-imageb.ads, libgnat/s-imageb.adb: New generic\n+\tpackage.\n+\t* libgnat/s-imagei.ads, libgnat/s-imagei.adb: Likewise.\n+\t* libgnat/s-imageu.ads, libgnat/s-imageu.adb: Likewise.\n+\t* libgnat/s-imagew.ads, libgnat/s-imagew.adb: Likewise.\n+\t* libgnat/s-imgbiu.ads: Instantiate System.Image_B.\n+\t* libgnat/s-imgbiu.adb: Add pragma No_Body.\n+\t* libgnat/s-imgint.ads: Instantiate System.Image_I.\n+\t* libgnat/s-imgint.adb: Add pragma No_Body.\n+\t* libgnat/s-imgllb.ads: Instantiate System.Image_B.\n+\t* libgnat/s-imgllb.adb: Add pragma No_Body0\n+\t* libgnat/s-imglli.ads: Instantiate System.Image_I.\n+\t* libgnat/s-imglli.adb: Add pragma No_Body.\n+\t* libgnat/s-imglllb.ads: Instantiate System.Image_B.\n+\t* libgnat/s-imgllli.ads: Instantiate System.Image_I.\n+\t* libgnat/s-imglllu.ads: Instantiate System.Image_U.\n+\t* libgnat/s-imglllw.ads: Instantiate System.Image_W.\n+\t* libgnat/s-imgllu.ads: Instantiate System.Image_U.\n+\t* libgnat/s-imgllu.adb: Add pragma No_Body.\n+\t* libgnat/s-imgllw.ads: Instantiate System.Image_W.\n+\t* libgnat/s-imgllw.adb: Add pragma No_Body.\n+\t* libgnat/s-imgrea.adb: Remove clauses for System.Unsigned_Types.\n+\t* libgnat/s-imguns.ads: Instantiate System.Image_U.\n+\t* libgnat/s-imguns.adb: Add pragma No_Body.\n+\t* libgnat/s-imgwiu.ads: Instantiate System.Image_W.\n+\t* libgnat/s-imgwiu.adb: Add pragma No_Body.\n+\t* libgnat/s-putima.ads (Long_Long_Long_Unsigned): New subtype.\n+\t(Put_Image_Long_Long_Long_Unsigned): New procedure.\n+\t* libgnat/s-putima.adb (Small): Rename to Integer_Images.\n+\t(Large): Rename to LL_Integer_Images.\n+\t(LLL_Integer_Images): New instantiation.\n+\t(Put_Image_Long_Long_Long_Integer): New renaming.\n+\t(Put_Image_Long_Long_Long_Unsigned): Likewise.\n+\t* libgnat/s-valint.ads: Instantiate System.Value_I.\n+\t* libgnat/s-valint.adb: Add pragma No_Body.\n+\t* libgnat/s-vallli.ads: Instantiate System.Value_I.\n+\t* libgnat/s-vallli.adb: Add pragma No_Body.\n+\t* libgnat/s-valllli.ads: Instantiate System.Value_I.\n+\t* libgnat/s-vallllu.ads: Instantiate System.Value_U.\n+\t* libgnat/s-valllu.ads: Instantiate System.Value_U.\n+\t* libgnat/s-valllu.adb: Add pragma No_Body.\n+\t* libgnat/s-valuei.ads, libgnat/s-valuei.adb: New generic\n+\tpackage.\n+\t* libgnat/s-valueu.ads, libgnat/s-valueu.adb: Likewise.\n+\t* libgnat/s-valuns.ads: Instantiate System.Value_U.\n+\t* libgnat/s-valuns.adb: Add pragma No_Body.\n+\t* libgnat/s-widint.ads: Instantiate System.Width_I.\n+\t* libgnat/s-widlli.ads: Likewise.\n+\t* libgnat/s-widlli.adb: Add pragma No_Body.\n+\t* libgnat/s-widllli.ads: Instantiate System.Width_I.\n+\t* libgnat/s-widlllu.ads: Instantiate System.Width_U.\n+\t* libgnat/s-widllu.ads: Likewise.\n+\t* libgnat/s-widllu.adb: Add pragma No_Body.\n+\t* libgnat/s-widthi.ads, libgnat/s-widthi.adb: New generic\n+\tpackage.\n+\t* libgnat/s-widthu.ads, libgnat/s-widthu.adb: Likewise.\n+\t* libgnat/s-widuns.ads: Instantiate System.Width_U.\n+\n+2020-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* set_targ.adb (DTN): Fix oversight.\n+\t(Read_Target_Dependent_Values): Do not error out on missing\n+\tLong_Long_Long_Size entry and reuse Long_Long_Size for it.\n+\n+2020-10-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Gen_Loop): Analyze copy of the expression in the\n+\tscope of the implicit loop with name of the index parameter\n+\tvisible.\n+\n+2020-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_128BIT_PAIRS): New variable.\n+\t(GNATRTL_128BIT_OBJS): Likewise.\n+\t(Windows): In 64-bit mode, add the former to LIBGNAT_TARGET_PAIRS and\n+\tthe latter to EXTRA_GNATRTL_NONTASKING_OBJS.\n+\t(x86_64/linux): Likewise, but unconditionally.\n+\t(GNATRTL_NONTASKING_OBJS): Add s-aridou, s-exponn, s-expont,\n+\ts-exponu.\n+\t* ada_get_targ.adb (Get_Long_Long_Long_Size): New function.\n+\t* checks.adb (Apply_Arithmetic_Overflow_Strict): Use Integer_Type_For\n+\tto find an appropriate integer type; if it does not exist and the max\n+\tinteger size is larger than 64, use the 128-bit arithmetic routines.\n+\t* cstand.adb (Create_Standard): Build Standard_Long_Long_Long_Integer\n+\tand its base type.  Use it for Etype of Any_Integer, Any_Modular and\n+\tAny_Numeric.  Use its size for Build Standard_Long_Long_Long_Unsigned\n+\tand Universal_Integer.\n+\t(Print_Standard): Print Long_Long_Long_Integer.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) <Attribute_Mod>: Adjust\n+\tcomment.\n+\t* exp_ch3.adb (Simple_Init_Initialize_Scalars_Type): Deal with 128-bit\n+\ttypes.\n+\t* exp_ch4.adb (Expand_Array_Comparison): Likewise.\n+\t(Expand_N_Op_Expon): Likewise.\n+\t(Narrow_Large_Operation): Likewise.\n+\t* exp_dbug.adb (Bounds_Match_Size): Handle 128-bit size.\n+\t* exp_fixd.adb (Build_Double_Divide_Code): Use RE_Double_Divide64.\n+\t* exp_intr.adb (Expand_Binary_Operator_Call): Handle 128-bit size.\n+\t* exp_pakd.ads (E_Array): Extend range to 127.\n+\t(Bits_Id): Fill in up to 127.\n+\t(Get_Id): Likewise.\n+\t(GetU_Id): Likewise.\n+\t(Set_Id): Likewise.\n+\t(SetU_Id): Likewise.\n+\t* exp_pakd.adb (Revert_Storage_Order): Handle 128-bit size.\n+\t* exp_util.adb (Integer_Type_For): Likewise.\n+\t(Small_Integer_Type_For): Likewise.\n+\t* fname.adb (Is_Predefined_File_Name): Do not return False for names\n+\tlarger than 12 characters if they start with \"s-\".\n+\t* freeze.adb (Adjust_Esize_For_Alignment): Change the maximum value\n+\tto System_Max_Integer_Size.\n+\t(Check_Suspicious_Modulus): Adjust comment.\n+\t(Freeze_Entity): Likewise.\n+\t* get_targ.ads (Get_Long_Long_Long_Size): New function.\n+\t* get_targ.adb (Get_Long_Long_Long_Size): Likewise.\n+\t(Width_From_Size): Deal with 128-bit size.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Deal with 128-bit types.\n+\t* impunit.adb (Get_Kind_Of_File): Bump buffer size.  Accept files with\n+\t13 characters if they start with 's'.  Compare slice of Buffer.\n+\t(Not_Impl_Defined_Unit): Accept files with 13 characters if they start\n+\twith 's'.\n+\t* krunch.ads: Document length for 128-bit support units.\n+\t* krunch.adb (Krunch): Set length to 9 for 128-bit support units.\n+\t* layout.adb (Layout_Type): Use System_Max_Integer_Size as alignment\n+\tlimit.\n+\t* rtsfind.ads (RTU_Id): Add System_Arith_128,\n+\tSystem_Compare_Array_Signed_128, System_Compare_Array_Unsigned_128,\n+\tSystem_Exn_LLLI, System_Exp_LLLU, System_Pack_[65..127].\n+\t(RE_Id): Add RE_Integer_128, RE_Unsigned_128, RE_Add_With_Ovflo_Check128\n+\tRE_Multiply_With_Ovflo_Check128, RE_Subtract_With_Ovflo_Check128,\n+\tRE_Bswap_128, RE_Compare_Array_S128, RE_Compare_Array_U128,\n+\tRE_Exn_Long_Long_Long_Integer, RE_Exp_Long_Long_Long_Integer,\n+\tRE_Exp_Long_Long_Long_Unsigned, RE_Bits_[65-127], RE_Get_[65-127],\n+\tRE_Set_[65-127], RE_IS_Is16, RE_IS_Iu16, RE_Integer_128 and\n+\tRE_Unsigned_128.  Rename RE_Add_With_Ovflo_Check, RE_Double_Divide,\n+\tRE_Multiply_With_Ovflo_Check, RE_Scaled_Divide and\n+\tRE_Subtract_With_Ovflo_Check.  Remove RE_IS_Iz1, RE_IS_Iz2, RE_IS_Iz4,\n+\tRE_IS_Iz8, RE_Long_Unsigned, RE_Short_Unsigned, RE_Short_Short_Unsigned\n+\t(RE_Unit_Table): Likewise.\n+\t* sem_aux.adb (Corresponding_Unsigned_Type): Deal with a size equal to\n+\tthat of Standard_Long_Long_Long_Integer.\n+\t(First_Subtype): Deal with Standard_Long_Long_Long_Integer'Base.\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause) <Attribute_Size>:\n+\tCheck the size against powers of 2 and System_Max_Integer_Size for\n+\tobjects as well.\n+\t(Set_Enum_Esize): Deal with 128-bit bounds.\n+\t* sem_ch3.adb (Set_Modular_Size): Handle 128-bit size.\n+\t(Modular_Type_Declaration): Deal with 128-bit types.\n+\t(Signed_Integer_Type_Declaration): Support derivation from\n+\tStandard_Long_Long_Long_Integer.\n+\t* sem_ch4.adb (Analyze_Mod): Handle 128-bit modulus.\n+\t* sem_intr.adb: Add with and use clauses for Ttypes.\n+\t(Check_Shift): Handle 128-bit size and modulus.\n+\t* sem_prag.adb (Analyze_Pragma) <Pragma_Initialize_Scalars>: Deal\n+\twith Signed_128 and Unsigned_128.\n+\t(Analyze_Integer_Value): Handle 128-bit size.\n+\t* sem_util.ads (Addressable): Adjust description.\n+\t* sem_util.adb (Addressable): Return true for 128 if the system\n+\tsupports 128 bits.\n+\t(Set_Invalid_Binder_Values): Deal with Signed_128 and Unsigned_128.\n+\t* set_targ.ads (Long_Long_Long_Size): New variable.\n+\t* set_targ.adb (S_Long_Long_Long_Size): New constant.\n+\t(DTN): Add entry for S_Long_Long_Long_Size.\n+\t(DTV): Add entry for Long_Long_Long_Size.\n+\t(Set_Targ): Set Long_Long_Long_Size.\n+\t* snames.ads-tmpl (Name_Max_Integer_Size): New attribute name.\n+\t(Name_Signed_128): New scalar name.\n+\t(Name_Unsigned_128): Likewise.\n+\t(Scalar_Id): Adjust.\n+\t(Integer_Scalar_Id): Likewise.\n+\t(Attribute_Id): Add Attribute_Max_Integer_Size.\n+\t* stand.ads (Standard_Entity_Type): Add S_Long_Long_Long_Integer.\n+\t(Standard_Long_Long_Long_Integer): New renaming.\n+\t(Universal_Integer): Adjust description.\n+\t(Standard_Long_Long_Long_Unsigned): New variable.\n+\t* switch-c.adb (Scan_Front_End_Switches): Deal with -gnate128.\n+\t* ttypes.ads (Standard_Long_Long_Long_Integer_Size): New variable.\n+\t(Standard_Long_Long_Long_Integer_Width): Likewise.\n+\t(System_Max_Integer_Size): Turn into variable.\n+\t(System_Max_Binary_Modulus_Power): Likewise.\n+\t* uintp.ads (Uint_127): New constant.\n+\t* uintp.adb (UI_Power_2): Extednd to 128.\n+\t(UI_Power_10): Likewise.\n+\t(UI_Expon): Deal with exponent up to 128 specially.\n+\t* usage.adb (Write_Switch_Char): Print -gnate128 switch.\n+\t* libgnat/a-tifiio.adb (Put_Scaled): Call Scaled_Divide64.\n+\t* libgnat/interfac__2020.ads (Integer_128): New integer type.\n+\t(Unsigned_128): New modular type.\n+\t(Shift_Left, Shift_Right, Shift_Right_Arithmetic, Rotate_Left,\n+\tRotate_Right): New intrinsic functions operating on it.\n+\t* libgnat/s-aridou.ads, libgnat/s-aridou.adb: New generic\n+\tpackage.\n+\t* libgnat/s-arit64.ads, libgnat/s-arit64.adb: Instantiate\n+\tSystem.Arithmetic_Double.\n+\t* libgnat/s-arit128.ads, libgnat/s-arit128.adb: Likewise.\n+\t* libgnat/s-bytswa.ads: Add with clause for Interfaces, use subtypes\n+\tof unsigned types defined in Interfaces and add Bswap_128.\n+\t* libgnat/s-casi128.ads, libgnat/s-casi128.adb: New package.\n+\t* libgnat/s-caun128.ads, libgnat/s-caun128.adb: Likewise.\n+\t* libgnat/s-exnint.ads: Instantiate System.Exponn.\n+\t* libgnat/s-exnint.adb: Add pragma No_Body.\n+\t* libgnat/s-exnlli.ads: Instantiate System.Exponn.\n+\t* libgnat/s-exnlli.adb: Add pragma No_Body.\n+\t* libgnat/s-exnllli.ads: Instantiate System.Exponn.\n+\t* libgnat/s-expint.ads: Likewise.\n+\t* libgnat/s-expint.adb: Add pragma No_Body.\n+\t* libgnat/s-explli.ads: Instantiate System.Exponn.\n+\t* libgnat/s-explli.adb: Add pragma No_Body.\n+\t* libgnat/s-expllli.ads: Instantiate System.Exponn.\n+\t* libgnat/s-explllu.ads: Instantiate System.Exponu.\n+\t* libgnat/s-expllu.ads: Likewise.\n+\t* libgnat/s-expllu.adb: Add pragma No_Body.\n+\t* libgnat/s-exponn.ads, libgnat/s-exponn.adb: New generic\n+\tfunction.\n+\t* libgnat/s-expont.ads, libgnat/s-expont.adb: Likewise.\n+\t* libgnat/s-exponu.ads, libgnat/s-exponu.adb: Likewise.\n+\t* libgnat/s-expuns.ads, libgnat/s-expuns.adb: Likewise.\n+\t* libgnat/s-pack65.ads, libgnat/s-pack65.adb: New package.\n+\t* libgnat/s-pack66.ads, libgnat/s-pack66.adb: New package.\n+\t* libgnat/s-pack67.ads, libgnat/s-pack67.adb: New package.\n+\t* libgnat/s-pack68.ads, libgnat/s-pack68.adb: New package.\n+\t* libgnat/s-pack69.ads, libgnat/s-pack69.adb: New package.\n+\t* libgnat/s-pack70.ads, libgnat/s-pack70.adb: New package.\n+\t* libgnat/s-pack71.ads, libgnat/s-pack71.adb: New package.\n+\t* libgnat/s-pack72.ads, libgnat/s-pack72.adb: New package.\n+\t* libgnat/s-pack73.ads, libgnat/s-pack73.adb: New package.\n+\t* libgnat/s-pack74.ads, libgnat/s-pack74.adb: New package.\n+\t* libgnat/s-pack75.ads, libgnat/s-pack75.adb: New package.\n+\t* libgnat/s-pack76.ads, libgnat/s-pack76.adb: New package.\n+\t* libgnat/s-pack77.ads, libgnat/s-pack77.adb: New package.\n+\t* libgnat/s-pack78.ads, libgnat/s-pack78.adb: New package.\n+\t* libgnat/s-pack79.ads, libgnat/s-pack79.adb: New package.\n+\t* libgnat/s-pack80.ads, libgnat/s-pack80.adb: New package.\n+\t* libgnat/s-pack81.ads, libgnat/s-pack81.adb: New package.\n+\t* libgnat/s-pack82.ads, libgnat/s-pack82.adb: New package.\n+\t* libgnat/s-pack83.ads, libgnat/s-pack83.adb: New package.\n+\t* libgnat/s-pack84.ads, libgnat/s-pack84.adb: New package.\n+\t* libgnat/s-pack85.ads, libgnat/s-pack85.adb: New package.\n+\t* libgnat/s-pack86.ads, libgnat/s-pack86.adb: New package.\n+\t* libgnat/s-pack87.ads, libgnat/s-pack87.adb: New package.\n+\t* libgnat/s-pack88.ads, libgnat/s-pack88.adb: New package.\n+\t* libgnat/s-pack89.ads, libgnat/s-pack89.adb: New package.\n+\t* libgnat/s-pack90.ads, libgnat/s-pack90.adb: New package.\n+\t* libgnat/s-pack91.ads, libgnat/s-pack91.adb: New package.\n+\t* libgnat/s-pack92.ads, libgnat/s-pack92.adb: New package.\n+\t* libgnat/s-pack93.ads, libgnat/s-pack93.adb: New package.\n+\t* libgnat/s-pack94.ads, libgnat/s-pack94.adb: New package.\n+\t* libgnat/s-pack95.ads, libgnat/s-pack95.adb: New package.\n+\t* libgnat/s-pack96.ads, libgnat/s-pack96.adb: New package.\n+\t* libgnat/s-pack97.ads, libgnat/s-pack97.adb: New package.\n+\t* libgnat/s-pack98.ads, libgnat/s-pack98.adb: New package.\n+\t* libgnat/s-pack99.ads, libgnat/s-pack99.adb: New package.\n+\t* libgnat/s-pack100.ads, libgnat/s-pack100.adb: New package.\n+\t* libgnat/s-pack101.ads, libgnat/s-pack101.adb: New package.\n+\t* libgnat/s-pack102.ads, libgnat/s-pack102.adb: New package.\n+\t* libgnat/s-pack103.ads, libgnat/s-pack103.adb: New package.\n+\t* libgnat/s-pack104.ads, libgnat/s-pack104.adb: New package.\n+\t* libgnat/s-pack105.ads, libgnat/s-pack105.adb: New package.\n+\t* libgnat/s-pack106.ads, libgnat/s-pack106.adb: New package.\n+\t* libgnat/s-pack107.ads, libgnat/s-pack107.adb: New package.\n+\t* libgnat/s-pack108.ads, libgnat/s-pack108.adb: New package.\n+\t* libgnat/s-pack109.ads, libgnat/s-pack109.adb: New package.\n+\t* libgnat/s-pack110.ads, libgnat/s-pack110.adb: New package.\n+\t* libgnat/s-pack111.ads, libgnat/s-pack111.adb: New package.\n+\t* libgnat/s-pack112.ads, libgnat/s-pack112.adb: New package.\n+\t* libgnat/s-pack113.ads, libgnat/s-pack113.adb: New package.\n+\t* libgnat/s-pack114.ads, libgnat/s-pack114.adb: New package.\n+\t* libgnat/s-pack115.ads, libgnat/s-pack115.adb: New package.\n+\t* libgnat/s-pack116.ads, libgnat/s-pack116.adb: New package.\n+\t* libgnat/s-pack117.ads, libgnat/s-pack117.adb: New package.\n+\t* libgnat/s-pack118.ads, libgnat/s-pack118.adb: New package.\n+\t* libgnat/s-pack119.ads, libgnat/s-pack119.adb: New package.\n+\t* libgnat/s-pack120.ads, libgnat/s-pack120.adb: New package.\n+\t* libgnat/s-pack121.ads, libgnat/s-pack121.adb: New package.\n+\t* libgnat/s-pack122.ads, libgnat/s-pack122.adb: New package.\n+\t* libgnat/s-pack123.ads, libgnat/s-pack123.adb: New package.\n+\t* libgnat/s-pack124.ads, libgnat/s-pack124.adb: New package.\n+\t* libgnat/s-pack125.ads, libgnat/s-pack125.adb: New package.\n+\t* libgnat/s-pack126.ads, libgnat/s-pack126.adb: New package.\n+\t* libgnat/s-pack127.ads, libgnat/s-pack127.adb: New package.\n+\t* libgnat/s-rannum.ads (Random): New function returning 128-bit.\n+\t* libgnat/s-rannum.adb (Random): Implement it.\n+\t* libgnat/s-scaval.ads: Add with clause for Interfaces, use subtypes\n+\tof unsigned types defined in Interfaces.\n+\t* libgnat/s-scaval.adb: Add use clause for Interfaces.\n+\t* libgnat/s-scaval__128.ads, libgnat/s-scaval__128.adb: New\n+\tpackage.\n+\t* libgnat/s-unstyp.ads (Long_Long_Long_Unsigned): New modular type.\n+\t(Shift_Left, Shift_Right, Shift_Right_Arithmetic, Rotate_Left,\n+\tRotate_Right): New intrinsic functions operating on it.\n+\n+2020-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_characteristics.rst: Add\n+\tLong_Long_Long_Integer to the list of predefined integer types.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-10-21  Yannick Moy  <moy@adacore.com>\n+\n+\t* ada_get_targ.adb (Width_From_Size): Add case for 128 bits.\n+\tReorder declarations in the same order as get_targ.adb to\n+\tfacilitate diffs.\n+\n+2020-10-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_N_Aggregate): Refactor repeated calls to\n+\tEtype (N).\n+\t(Build_Array_Aggr_Code): Fix whitespace.\n+\n+2020-10-21  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* adaint.c (__gnat_file_time): Use regular arithmetic instead of\n+\t__builtin_*_overflow routines if GCC version 4 or less and\n+\tcompiler is g++.\n+\n+2020-10-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Use Choice_List, which\n+\tinternally calls either Choice or Discrete_Choices, depending on\n+\tthe context.\n+\n+2020-10-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association): Use\n+\texisting defining identifier for index parameter.\n+\n+2020-10-21  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Task_Activation_Call): Do not generate a\n+\tcall to activate tasks if we are within the scope of a protected\n+\ttype and pragma Detect_Blocking is active.\n+\n+2020-10-21  Liaiss Merzougue  <merzougue@adacore.com>\n+\n+\t* libgnat/s-carsi8.adb (Compare_Array_S8): Add pragma Assert to\n+\tavoid warning concerning Left_Len and RighLen value regarding\n+\tBytes_Compared_As_Words.\n+\t* libgnat/s-carun8.adb (Compare_Array_U8): Likewise.\n+\t* libgnat/s-geveop.adb (Binary_Operation, Unary_Operation): Add\n+\tpragma Assert concerning divide by 0 warning.\n+\t* libgnat/s-imgcha.adb (Image_Character): Code update to prevent\n+\tconstant operation warning.\n+\t(Image_Character): Add pragma Assert concerning the unchecked\n+\tString size.\n+\t* libgnat/s-imgdec.adb\n+\t(Round): Upate loop code to prevent warning concerning\n+\tDigs'First access.\n+\t(Round): Add pragma assert.\n+\t(Set): Add pragma Assert for the unchecked string size.\n+\t(Set_Digits): Add pragma Assert for the input range.\n+\t(Set_Decimal_Digits): Add pragma Assert.\n+\t(Set_Blank_And_Sign): Add pragma Assert for the input range.\n+\t* libgnat/s-arit64.adb (DoubleDivide): Add pragma Assert\n+\tconcerning Du /= 0.\n+\t(Multiply_With_Ovflo_Check): Add pragma Annotate to avoid\n+\twarning concerning unsigned -> signed conversion.\n+\t* libgnat/s-imguns.adb (Set_Image_Unsigned): Add pragma Assert\n+\tto prevent overflow check warning.  Add pragma Assert for\n+\tcontrolling S'First = 1.\n+\t* libgnat/s-imgrea.adb (Image_Floating_Point, Set, Set_Digs,\n+\tSet_Special_Fill, Convert_Integer): Add pragma Annotate to\n+\tprevent overflow check warning.\n+\t(Set_Image_Real): Add pragma Annotate to avoid dead code warning\n+\ton float check. Add pragma Assert to prevent overflow check\n+\twarning.\n+\t* libgnat/s-imgwiu.adb (Set_Digits, Set_Image_Width_Unsigned):\n+\tAdd pragma assert to prevent overflow check warning.\n+\t* libgnat/s-imgllu.adb (Set_Image_Long_Long_Unsigned): Add\n+\tpragma assert to prevent overflow check warning.\n+\t* libgnat/s-imgint.adb (Set_Digits): Add Assert for input\n+\tconstraint and to prevent overflow check warning, create\n+\tNon_Positive subtype, and change the T parameter as Non_Positive\n+\tinstead Integer.\n+\t(Set_Image_Integer): Add pragma assert to prevent overflow check\n+\twarning.\n+\t* libgnat/s-imglli.adb (Set_Digits): Add Assert for input\n+\tconstraint and to prevent overflow check warning, create\n+\tNon_Positive subtype, and change the T parameter as Non_Positive\n+\tinstead Integer.\n+\t(Set_Image_Long_Long_Integer): Add pragma assert to prevent\n+\toverflow check warning.\n+\t* libgnat/s-fatgen.adb (Decompose, Pred, Succ): Add pragma\n+\tAnnotate to prevent dead code due to invalid float check.\n+\t* libgnat/s-imenne.adb (Image_Enumeration_8,\n+\tImage_Enumeration_16, Image_Enumeration_32): Add pragma Assert\n+\tto prevent overflow check warning.  Add Names_Index subtype for\n+\trestricting Index_table content.\n+\n+2020-10-21  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch6.adb (Insert_Post_Call_Actions): Test for\n+\tN_Explicit_Dereference as part of the existing test for function\n+\tcalls.\n+\n+2020-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Check_Strict_Alignment): Do not set the flag for\n+\ta bit-packed array type, even if it is a by-reference type.\n+\n+2020-10-21  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* adaint.c (__gnat_file_time): New routine.\n+\t(__gnat_copy_attribs): Copy timestamps in nanoseconds.\n+\t* libgnat/a-direct.adb (C_Modification_Time): Bind to\n+\t__gnat_file_time.\n+\t(Modification_Time): Call to C_Modification_Time.\n+\n+2020-10-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Iterated_Component_Association):\n+\tExpression's copy and now has the same parent as the original\n+\texpression.\n+\t(Resolve_Array_Aggregate): Add ??? comment about a still\n+\texisting minor issue that led to discovery of the above crash.\n+\n+2020-10-21  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch12.adb (Install_Parents_Of_Generic_Context): Simplify\n+\tfunctionality; collect and install parents of generic child\n+\tpackage.\n+\t(Remove_Parents_Of_Generic_Context): Code cleanup.\n+\t(Instantiate_Package_Body): Hide parents of generic context from\n+\tvisibility before installing the parent instance; restore their\n+\tvisibility when the instance is analyzed\n+\n+2020-10-21  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnarl/s-osinte__lynxos178e.ads: Remove -mthreads switch.\n+\n+2020-10-21  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* env.c (__gnat_setenv): call setenv for VxWorks 7 kernel mode.\n+\t(__gnat_environ): envGet takes an int instead of a NULL pointer.\n+\t(__gnat_unsetenv): call unsetenv for VxWorks 7 kernel mode.\n+\t(__gnat_clearenv): use __gnat_unsetenv to clear environment\n+\tvariables.\n+\n+2020-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Freeze_Subprogram_Body): Call\n+\tPackage_Freeze_Node to retrieve the freeze node for the\n+\tenclosing body of the generic.\n+\n+2020-10-21  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): Modify calls to\n+\tAdd_Extra_Actual to use Extra_Accessibility instead of\n+\tGet_Accessibility for the EF parameter.\n+\n+2020-10-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Actuals): Whitespace cleanup.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Make minimum\n+\taccessibility a constant object.\n+\n+2020-10-21  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* env.c (__gnat_environ): For VxWorks kernel simply return the\n+\tresult of the envGet call. Do this for VxWorks 6 and 7 as they\n+\tboth support the same API.\n+\n+2020-10-21  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_ch7.adb (Build_Finalizer): Disable warnings on referenced\n+\tentity.\n+\n+2020-10-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.ads, sem_ch3.adb, sem_util.adb: Fix comments.\n+\n+2020-10-21  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Build_Derived_Type): Propagate convention of\n+\tclass-wide parent.\n+\n+2020-10-21  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/a-cofove.adb (Copy): Add explanation in case of\n+\tCapacity_Error.\n+\t(Insert_Space): Raise Capacity_Error if the new length is\n+\tgreater than the capacity.\n+\t(Reserve_Capacity): Raise Capacity_Error instead of\n+\tConstraint_Error.\n+\n 2020-10-20  Piotr Trojanek  <trojanek@adacore.com>\n \n \t* sem_ch3.adb (Constrain_Decimal, Constrain_Enumeration,"}, {"sha": "e6f1920da861f3eaaf2838e25137f5fdcf8c4c31", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=56ddd5e23af0906573e7d50348beb42d3dae82a9", "patch": "@@ -1,3 +1,19 @@\n+2020-10-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c/94722\n+\t* c-attribs.c (handle_no_stack_protect_function_attribute): New.\n+\t(handle_stack_protect_attribute): Add error message for a\n+\tno_stack_protector function.\n+\n+2020-10-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Use the stack_protector enum.\n+\n+2020-10-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* c-gimplify.c: Include tree-nested.h\n+\t(c_genericize): Update for new nested function info.\n+\n 2020-10-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/97413"}, {"sha": "e35f984386fd08ba20ba9d1d6d0532448a595d96", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=56ddd5e23af0906573e7d50348beb42d3dae82a9", "patch": "@@ -1,3 +1,8 @@\n+2020-10-22  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* decl.cc: Include tree-nested.h\n+\t(get_symbol_decl): Update for new nested function info.\n+\n 2020-10-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd 70aabfb51"}, {"sha": "8b4e32961510b8421d9cb45fe057dd922c7aad42", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=56ddd5e23af0906573e7d50348beb42d3dae82a9", "patch": "@@ -1,3 +1,9 @@\n+2020-10-21  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/45516\n+\t* class.c: Add _deallocate to the vtable documentation\n+\tcomment.\n+\n 2020-10-16  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/95979"}, {"sha": "888d99c043aa562319e2a1fd2bd6864c89c3be26", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ddd5e23af0906573e7d50348beb42d3dae82a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56ddd5e23af0906573e7d50348beb42d3dae82a9", "patch": "@@ -1,3 +1,151 @@\n+2020-10-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c/94722\n+\t* g++.dg/no-stack-protector-attr-2.C: New test.\n+\t* g++.dg/no-stack-protector-attr-3.C: New test.\n+\t* g++.dg/no-stack-protector-attr.C: New test.\n+\n+2020-10-22  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr97249-1.c: New test.\n+\n+2020-10-22  Dennis Zhang  <dennis.zh@live.com>\n+\n+\t* gcc.target/arm/simd/mve-vminmax_1.c: New test.\n+\n+2020-10-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr97520.c: New.\n+\n+2020-10-22  Dennis Zhang  <dennis.zh@live.com>\n+\n+\t* gcc.target/arm/simd/mve-vmul_1.c: New test.\n+\n+2020-10-22  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97515\n+\t* gcc.dg/pr97515.c: New file.\n+\n+2020-10-21  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/fold-vec-extract-float.p9.c: rldicl and\n+\tsubfic only for target LE.\n+\t* gcc.target/powerpc/fold-vec-extract-longlong.p9.c: xori only\n+\tfor target LE.  Adjust mfvsrd and add mfvsrld for BE.\n+\t* gcc.target/powerpc/fold-vec-extract-short.p9.c: vextuhrx for LE.\n+\tvextuhlx for BE.\n+\t* gcc.target/powerpc/p9-lxvx-stxvx-1.c: Remove target.\n+\t* gcc.target/powerpc/p9-lxvx-stxvx-2.c: Remove target.\n+\t* gcc.target/powerpc/p9-lxvx-stxvx-3.c: Remove target. Require\n+\tfloat128\n+\n+2020-10-21  Martin Liska  <mliska@suse.cz>\n+\t    Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR target/97360\n+\t* gcc.target/powerpc/pr97360.c: New test.\n+\n+2020-10-21  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/97445\n+\t* gcc.dg/ipa/inlinehint-5.c: New test.\n+\n+2020-10-21  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/p9-extract-1.c: Require lp64.\n+\t* gcc.target/powerpc/p9-extract-2.c: Require lp64.\n+\t* gcc.target/powerpc/p9-extract-3.c: Require lp64.\n+\t* gcc.target/powerpc/p9-permute.c: Remove target.\n+\t* gcc.target/powerpc/pr63335.c: Remove target.\n+\t* gcc.target/powerpc/pr87507.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-1.c: Require LE and P8.\n+\t* gcc.target/powerpc/swaps-p8-10.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-11.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-12.c: Require LE and P8.\n+\t* gcc.target/powerpc/swaps-p8-13.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-14.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-15.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-16.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-17.c: Require P8.\n+\t* gcc.target/powerpc/swaps-p8-18.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-19.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-2.c: Require LE and P8.\n+\t* gcc.target/powerpc/swaps-p8-20.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-21.c: Remove target. Require Altivec.\n+\t* gcc.target/powerpc/swaps-p8-22.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-23.c: Require LE and P8.\n+\t* gcc.target/powerpc/swaps-p8-24.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-25.c: Require LE and P8.\n+\t* gcc.target/powerpc/swaps-p8-26.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-27.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-28.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-29.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-3.c: Require LE and P8.\n+\t* gcc.target/powerpc/swaps-p8-30.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-31.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-32.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-33.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-34.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-35.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-36.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-37.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-38.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-39.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-4.c: Require LE and P8.\n+\t* gcc.target/powerpc/swaps-p8-40.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-41.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-42.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-43.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-44.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-45.c: Remove target.\n+\t* gcc.target/powerpc/swaps-p8-46.c: Require LE.\n+\t* gcc.target/powerpc/swaps-p8-5.c: Require LE and P8.\n+\t* gcc.target/powerpc/swaps-p8-6.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-7.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-8.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/swaps-p8-9.c: Remove target. Require P8.\n+\t* gcc.target/powerpc/vec-cmp.c: Require LP64.\n+\t* gcc.target/powerpc/vec-cmpne.c: Remove target.\n+\t* gcc.target/powerpc/vec-mul.c: Remove target.\n+\t* gcc.target/powerpc/vec-set-char.c: Require LP64.\n+\t* gcc.target/powerpc/vec-set-int.c: Require LP64.\n+\t* gcc.target/powerpc/vec-set-short.c: Require LP64.\n+\t* gcc.target/powerpc/vec-xxpermdi.c: Remove target. Require VSX.\n+\t* gcc.target/powerpc/vsxcopy.c: Remove target. Require VSX.\n+\n+2020-10-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97500\n+\t* gfortran.dg/pr97500.f90: New testcase.\n+\n+2020-10-21  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/97506\n+\t* gcc.target/i386/pr97506.c: New test.\n+\n+2020-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97503\n+\t* gcc.dg/tree-ssa/pr97503.c: New test.\n+\n+2020-10-21  Martin Liska  <mliska@suse.cz>\n+\n+\tPR sanitizer/97414\n+\t* g++.dg/asan/pr97414.C: New test.\n+\n+2020-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/multfixed.adb: Update expected exception message.\n+\n+2020-10-21  Andrea Corallo  <andrea.corallo@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vstX_lane.c (CMT):\n+\tAdopt the same style used in the rest of the file.\n+\n+2020-10-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/Walloca-1.c: Adjust for 32-bits.\n+\n 2020-10-22  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* gcc.target/arm/simd/mve-vminmax_1.c: New test."}, {"sha": "5b1faafc9aa1b9a65bff1d5262f7e4d63bbb8a02", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ddd5e23af0906573e7d50348beb42d3dae82a9/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ddd5e23af0906573e7d50348beb42d3dae82a9/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=56ddd5e23af0906573e7d50348beb42d3dae82a9", "patch": "@@ -1,3 +1,11 @@\n+2020-10-21  Douglas Rupp  <rupp@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config.host (powerpc*-wrs-vxworks7*): New case.\n+\t* configure.ac: Handle powerpc*-*-vxworks7* as\n+\tpowerpc*-*-linux* for ppc-fp_type.\n+\t* configure: Regenerate.\n+\n 2020-10-16  Rasmus Villemoes  <rv@rasmusvillemoes.dk>\n \n \t* config/gthr-vxworks.h: Condition the ___GTHREADS_CXX0X"}, {"sha": "35b6689276e9e659c75f243711d389579f9eb794", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ddd5e23af0906573e7d50348beb42d3dae82a9/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ddd5e23af0906573e7d50348beb42d3dae82a9/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=56ddd5e23af0906573e7d50348beb42d3dae82a9", "patch": "@@ -1,3 +1,34 @@\n+2020-10-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c/target-41.c: New test.\n+\n+2020-10-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* icv.c (omp_get_initial_device): Remove including corresponding\n+\tialias.\n+\t* icv-device.c (omp_get_initial_device): New function.  Return\n+\tgomp_get_num_devices ().  Add ialias.\n+\t* target.c (resolve_device): Don't fail with\n+\tOMP_TARGET_OFFLOAD=mandatory if device_id is equal to\n+\tgomp_get_num_devices ().\n+\t(omp_target_alloc, omp_target_free, omp_target_is_present,\n+\tomp_target_memcpy, omp_target_memcpy_rect, omp_target_associate_ptr,\n+\tomp_target_disassociate_ptr, omp_pause_resource): Use\n+\tgomp_get_num_devices () instead of GOMP_DEVICE_HOST_FALLBACK on the\n+\tfirst use in the functions, in uses dominated by the\n+\tgomp_get_num_devices call use num_devices_openmp instead.\n+\t* libgomp.texi (omp_get_initial_device): Document.\n+\t* config/gcn/icv-device.c (omp_get_initial_device): New function.\n+\tAdd ialias.\n+\t* config/nvptx/icv-device.c (omp_get_initial_device): Likewise.\n+\t* testsuite/libgomp.c/target-40.c: New test.\n+\n+2020-10-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* env.c (parse_target_offload): Change new_offload var type to int,\n+\tpreinitialize to -1, remove found var and test new_offload != -1\n+\tinstead of found.\n+\n 2020-10-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* target.c (gomp_target_init): Inside of the function, use automatic"}, {"sha": "1dd1b69f476cd7063a48694d6bcf39e90e268e08", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56ddd5e23af0906573e7d50348beb42d3dae82a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56ddd5e23af0906573e7d50348beb42d3dae82a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=56ddd5e23af0906573e7d50348beb42d3dae82a9", "patch": "@@ -1,3 +1,41 @@\n+2020-10-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/shared_ptr.h (shared_ptr(const weak_ptr&, nothrow_t)):\n+\tAdd noexcept.\n+\t* include/bits/shared_ptr_base.h (_Sp_counted_base::_M_add_ref_lock):\n+\tRemove specializations and just call _M_add_ref_lock_nothrow.\n+\t(__shared_count, __shared_ptr): Use nullptr for null pointer\n+\tconstants.\n+\t(__shared_count(const __weak_count&)): Use _M_add_ref_lock_nothrow\n+\tinstead of _M_add_ref_lock.\n+\t(__shared_count(const __weak_count&, nothrow_t)): Add noexcept.\n+\t(__shared_ptr::operator bool()): Add noexcept.\n+\t(__shared_ptr(const __weak_ptr&, nothrow_t)): Add noexcept.\n+\n+2020-10-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97512\n+\t* include/bits/ranges_util.h (tuple_size<subrange>)\n+\t(tuple_element<I, cv subrange>): Move here from ...\n+\t* include/std/ranges: ... here.\n+\t* testsuite/std/ranges/subrange/97512.cc: New test.\n+\n+2020-10-21  Thomas Rodgers  <trodgers@redhat.com>\n+\n+\t* include/pstl/algorithm_impl.h: Update file.\n+\t* include/pstl/execution_impl.h: Likewise.\n+\t* include/pstl/glue_algorithm_impl.h: Likewise.\n+\t* include/pstl/glue_memory_impl.h: Likewise.\n+\t* include/pstl/glue_numeric_impl.h: Likewise.\n+\t* include/pstl/memory_impl.h: Likewise.\n+\t* include/pstl/numeric_impl.h: Likewise.\n+\t* include/pstl/parallel_backend.h: Likewise.\n+\t* include/pstl/parallel_backend_serial.h: Likewise.\n+\t* include/pstl/parallel_backend_tbb.h: Likewise.\n+\t* include/pstl/parallel_backend_utils.h: Likewise.\n+\t* include/pstl/pstl_config.h: Likewise.\n+\t* include/pstl/unseq_backend_simd.h: Likewise.\n+\n 2020-10-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/hashtable_policy.h"}]}