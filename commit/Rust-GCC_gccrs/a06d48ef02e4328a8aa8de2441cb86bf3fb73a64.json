{"sha": "a06d48ef02e4328a8aa8de2441cb86bf3fb73a64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA2ZDQ4ZWYwMmU0MzI4YThhYThkZTI0NDFjYjg2YmYzZmI3M2E2NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-26T00:50:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-26T00:50:29Z"}, "message": "decl.c (push_local_binding): Also wrap used decls in a TREE_LIST.\n\n\t* decl.c (push_local_binding): Also wrap used decls in a TREE_LIST.\n\t(poplevel): Handle that.  Fix logic for removing TREE_LISTs.\n\t(cat_namespace_levels): Don't loop forever.\nFixes 733Y14.\n\t* typeck.c (build_reinterpret_cast): Fix typo in duplicated test.\n\nFrom-SVN: r24867", "tree": {"sha": "cc45380b3dbb54f5294910cb9c428b52dcca69f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc45380b3dbb54f5294910cb9c428b52dcca69f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a06d48ef02e4328a8aa8de2441cb86bf3fb73a64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a06d48ef02e4328a8aa8de2441cb86bf3fb73a64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a06d48ef02e4328a8aa8de2441cb86bf3fb73a64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a06d48ef02e4328a8aa8de2441cb86bf3fb73a64/comments", "author": null, "committer": null, "parents": [{"sha": "9602dbfbf43612466a24ed90a876dcc7aba1d465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9602dbfbf43612466a24ed90a876dcc7aba1d465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9602dbfbf43612466a24ed90a876dcc7aba1d465"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "8015d38f2ca438e970e82b702e9010199898c1c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a06d48ef02e4328a8aa8de2441cb86bf3fb73a64/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a06d48ef02e4328a8aa8de2441cb86bf3fb73a64/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a06d48ef02e4328a8aa8de2441cb86bf3fb73a64", "patch": "@@ -1,3 +1,13 @@\n+1999-01-26  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (push_local_binding): Also wrap used decls in a TREE_LIST.\n+\t(poplevel): Handle that.  Fix logic for removing TREE_LISTs.\n+\t(cat_namespace_levels): Don't loop forever.\n+\n+1999-01-25  Richard Henderson  <rth@cygnus.com>\n+\n+\t* typeck.c (build_reinterpret_cast): Fix typo in duplicated test.\n+\n 1999-01-25  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* class.c (resolve_address_of_overloaded_function): Mark the"}, {"sha": "e3ed11635d44b4a11869f7ceb8460d343c4ea944", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a06d48ef02e4328a8aa8de2441cb86bf3fb73a64/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a06d48ef02e4328a8aa8de2441cb86bf3fb73a64/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a06d48ef02e4328a8aa8de2441cb86bf3fb73a64", "patch": "@@ -1126,18 +1126,20 @@ push_local_binding (id, decl)\n {\n   tree d = decl;\n \n-  if (TREE_CODE (decl) == OVERLOAD)\n-    /* We must put the OVERLOAD into a TREE_LIST since the\n-       TREE_CHAIN of an OVERLOAD is already used.  */\n-    decl = build_tree_list (NULL_TREE, decl);\n-\n   if (lookup_name_current_level (id))\n     /* Supplement the existing binding.  */\n-    add_binding (id, decl);\n+    add_binding (id, d);\n   else\n     /* Create a new binding.  */\n     push_binding (id, d, current_binding_level);\n \n+  if (TREE_CODE (decl) == OVERLOAD\n+      || (DECL_P (decl) && DECL_NAMESPACE_SCOPE_P (decl)))\n+    /* We must put the OVERLOAD into a TREE_LIST since the\n+       TREE_CHAIN of an OVERLOAD is already used.  Similarly for\n+       decls that got here through a using-declaration.  */\n+    decl = build_tree_list (NULL_TREE, decl);\n+\n   /* And put DECL on the list of things declared by the current\n      binding level.  */\n   TREE_CHAIN (decl) = current_binding_level->names;\n@@ -1423,11 +1425,12 @@ poplevel (keep, reverse, functionbody)\n       else \n \t{\n \t  /* Remove the binding.  */\n+\t  if (TREE_CODE (link) == TREE_LIST)\n+\t    link = TREE_VALUE (link);\n \t  if (TREE_CODE_CLASS (TREE_CODE (link)) == 'd')\n \t    pop_binding (DECL_NAME (link), link);\n-\t  else if (TREE_CODE (link) == TREE_LIST)\n-\t    pop_binding (DECL_NAME (OVL_FUNCTION (TREE_VALUE (link))), \n-\t\t\t TREE_VALUE (link));\n+\t  else if (TREE_CODE (link) == OVERLOAD)\n+\t    pop_binding (DECL_NAME (OVL_FUNCTION (link)), link);\n \t  else \n \t    my_friendly_abort (0);\n \t}\n@@ -1454,11 +1457,13 @@ poplevel (keep, reverse, functionbody)\n     {\n       tree* d;\n \n-      for (d = &BLOCK_VARS (block); \n-\t   *d; \n-\t   d = *d ? &TREE_CHAIN (*d) : d)\n-\tif (TREE_CODE (*d) == TREE_LIST)\n-\t  *d = TREE_CHAIN (*d);\n+      for (d = &BLOCK_VARS (block); *d; )\n+\t{\n+\t  if (TREE_CODE (*d) == TREE_LIST)\n+\t    *d = TREE_CHAIN (*d);\n+\t  else\n+\t    d = &TREE_CHAIN (*d);\n+\t}\n     }\n \n   /* If the level being exited is the top level of a function,\n@@ -2078,6 +2083,10 @@ cat_namespace_levels()\n   /* The nested namespaces appear in the names list of their ancestors. */\n   for (current = last; current; current = TREE_CHAIN (current))\n     {\n+      /* Catch simple infinite loops.  */\n+      if (TREE_CHAIN (current) == current)\n+\tmy_friendly_abort (990126);\n+\n       if (TREE_CODE (current) != NAMESPACE_DECL\n           || DECL_NAMESPACE_ALIAS (current))\n \tcontinue;"}, {"sha": "58c19a42d0f1b0de250f52dbd55a1ee20813ff66", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a06d48ef02e4328a8aa8de2441cb86bf3fb73a64/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a06d48ef02e4328a8aa8de2441cb86bf3fb73a64/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=a06d48ef02e4328a8aa8de2441cb86bf3fb73a64", "patch": "@@ -5485,7 +5485,7 @@ build_reinterpret_cast (type, expr)\n       return fold (build1 (NOP_EXPR, type, expr));\n     }\n   else if ((TYPE_PTRFN_P (type) && TYPE_PTROBV_P (intype))\n-\t   || (TYPE_PTRFN_P (type) && TYPE_PTROBV_P (intype)))\n+\t   || (TYPE_PTRFN_P (intype) && TYPE_PTROBV_P (type)))\n     {\n       pedwarn (\"ANSI C++ forbids casting between pointers to functions and objects\");\n       if (TREE_READONLY_DECL_P (expr))"}]}