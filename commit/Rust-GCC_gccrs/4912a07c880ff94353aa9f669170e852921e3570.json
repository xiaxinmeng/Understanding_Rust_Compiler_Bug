{"sha": "4912a07c880ff94353aa9f669170e852921e3570", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkxMmEwN2M4ODBmZjk0MzUzYWE5ZjY2OTE3MGU4NTI5MjFlMzU3MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-14T15:51:45Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-14T15:51:45Z"}, "message": "ChangeLog: Follow spelling conventions.\n\n\t* ChangeLog: Follow spelling conventions.\n\t* ChangeLog.0: Likewise.\n\t* ChangeLog.2: Likewise.\n\t* ChangeLog.3: Likewise.\n\t* ChangeLog.4: Likewise.\n\t* ChangeLog.5: Likewise.\n\t* ChangeLog.6: Likewise.\n\t* cppfiles.c: Likewise.\n\t* cppinit.c: Likewise.\n\t* cpplib.h: Likewise.\n\t* cse.c: Likewise.\n\t* debug.h: Likewise.\n\t* df.c: Likewise.\n\t* dominance.c: Likewise.\n\t* hashtable.c: Likewise.\n\t* hashtable.h: Likewise.\n\t* loop.c: Likewise.\n\t* config/arm/README-interworking: Likewise.\n\t* config/arm/arm.c: Likewise.\n\t* config/arm/arm.h: Likewise.\n\t* config/arm/arm.md: Likewise.\n\t* config/dsp16xx/dsp16xx.h: Likewise.\n\t* config/frv/frv.c: Likewise.\n\t* config/frv/frv.h: Likewise.\n\t* config/ip2k/ip2k.h: Likewise.\n\t* config/rs6000/rs6000.c: Likewise.\n\t* config/stormy16/stormy-abi: Likewise.\n\t* config/stormy16/stormy16.h: Likewise.\n\t* config/v850/v850.c: Likewise.\n\nFrom-SVN: r57146", "tree": {"sha": "07dba7573336a15caff6cd38ede9b21a2f7b8424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07dba7573336a15caff6cd38ede9b21a2f7b8424"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4912a07c880ff94353aa9f669170e852921e3570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4912a07c880ff94353aa9f669170e852921e3570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4912a07c880ff94353aa9f669170e852921e3570", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4912a07c880ff94353aa9f669170e852921e3570/comments", "author": null, "committer": null, "parents": [{"sha": "3dc60fc75491e4126cf8eb2f365ae505928ee8b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dc60fc75491e4126cf8eb2f365ae505928ee8b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dc60fc75491e4126cf8eb2f365ae505928ee8b1"}], "stats": {"total": 202, "additions": 117, "deletions": 85}, "files": [{"sha": "a947f748ef70d82f497ada4dbcebb0fd365e6c8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -1,3 +1,35 @@\n+2002-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ChangeLog: Follow spelling conventions.\n+\t* ChangeLog.0: Likewise.\n+\t* ChangeLog.2: Likewise.\n+\t* ChangeLog.3: Likewise.\n+\t* ChangeLog.4: Likewise.\n+\t* ChangeLog.5: Likewise.\n+\t* ChangeLog.6: Likewise.\n+\t* cppfiles.c: Likewise.\n+\t* cppinit.c: Likewise.\n+\t* cpplib.h: Likewise.\n+\t* cse.c: Likewise.\n+\t* debug.h: Likewise.\n+\t* df.c: Likewise.\n+\t* dominance.c: Likewise.\n+\t* hashtable.c: Likewise.\n+\t* hashtable.h: Likewise.\n+\t* loop.c: Likewise.\n+\t* config/arm/README-interworking: Likewise.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/arm/arm.h: Likewise.\n+\t* config/arm/arm.md: Likewise.\n+\t* config/dsp16xx/dsp16xx.h: Likewise.\n+\t* config/frv/frv.c: Likewise.\n+\t* config/frv/frv.h: Likewise.\n+\t* config/ip2k/ip2k.h: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/stormy16/stormy-abi: Likewise.\n+\t* config/stormy16/stormy16.h: Likewise.\n+\t* config/v850/v850.c: Likewise.\n+\n 2002-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* loop.c: Fix a comment typo.\n@@ -3068,7 +3100,7 @@ Sat Aug 10 19:59:43 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t* Makefile.in (sdbout.o): Doesn't need $(OBSTACK_H).\n \t* collect2.h (permanent_obstack): Delete declaration.\n \t* collect2.c (permanent_obstack): Delete definition.\n-\t(main): Don't initialise permanent_obstack.  Use xstrdup instead.\n+\t(main): Don't initialize permanent_obstack.  Use xstrdup instead.\n \t* expr.c: Don't include obstack.h.\n \t(permanent_obstack): Delete declaration.\n \t* function.c: Don't include obstack.h.\n@@ -9168,7 +9200,7 @@ Wed Jun  5 15:20:58 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* config.gcc (powerpc-*-darwin*): Set config_gtfiles.\n \t* configure.in (config_gtfiles): New variable.\n-\t(all_gtfiles): Initialise from config_gtfiles.\n+\t(all_gtfiles): Initialize from config_gtfiles.\n \t* configure: Regenerate.\n \n 2002-06-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n@@ -9842,8 +9874,8 @@ Tue Jun  4 19:29:42 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \t* gcse.c: Use gengtype for roots.\n \t* gengtype-lex.l: Handle typedefs of function types.\n \tAllow for empty array bounds.\n-\tAllow processing to stop on initialisers.\n-\t* gengtype-yacc.y (externstatic): Stop processing on initialisers.\n+\tAllow processing to stop on initializers.\n+\t* gengtype-yacc.y (externstatic): Stop processing on initializers.\n \t(semiequal): New rule.\n \t* gengtype.c (create_file): Tidy output files.\n \t(get_output_file_with_visibility): Fix paren warning.  Fix bug"}, {"sha": "b6678b713f9f9862fe9498fa263ec542fc822719", "filename": "gcc/ChangeLog.0", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog.0", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog.0", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.0?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -2670,7 +2670,7 @@ Thu Jun  4 01:26:57 1998  Craig Burley  <burley@gnu.org>\n \n Thu Jun  4 00:54:21 1998  Graham  <grahams@rcp.co.uk>\n \n-\t* loop.c (check_dbra_loop): Initialise final_value before\n+\t* loop.c (check_dbra_loop): Initialize final_value before\n \tnormalizing the loop.\n \n Wed Jun  3 20:00:04 1998  J\"orn Rennecke  <amylaar@cygnus.co.uk>"}, {"sha": "4ac83fd16555f065671074090d1373ed88f6690b", "filename": "gcc/ChangeLog.2", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog.2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog.2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.2?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -1531,7 +1531,7 @@ Thu Dec  2 18:59:48 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n 1999-12-02  Nick Clifton  <nickc@cygnus.com>\n \n-\t* config/fp-bit.c: Initialise all fields of the NAN\n+\t* config/fp-bit.c: Initialize all fields of the NAN\n \tconstants.\n \n \t* c-lex.c (check_newline): Pass pragma_getc and pragma_ungetc\n@@ -4002,7 +4002,7 @@ Mon Oct 18 21:16:06 1999  Fred Fish  <fnf@be.com>\n \n Thu Oct 28 10:00:48 1999  Nick Clifton  <nickc@cygnus.com>\n \n-\t* config/arm/arm.c: Initialise arm_structure_size_boundary to\n+\t* config/arm/arm.c: Initialize arm_structure_size_boundary to\n \tDEFAULT_STRUCTURE_SIZE_BOUNDARY.\n \t* config/arm/arm.h (DEFAULT_STRUCTURE_SIZE_BOUNDARY): Define\n \tto the value 32 if it has not already been defined.\n@@ -6509,15 +6509,15 @@ Sat Sep 25 09:03:17 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n Sat Sep 25 13:42:15 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* varasm.c (asm_emit_uninitialised): New function: Generate\n-\tthe assembler statements necessary to declare an uninitialised\n+\tthe assembler statements necessary to declare an uninitialized\n \tvariable.\n-\t(ASM_EMIT_LOCAL): New macro: Emit a local, uninitialised\n+\t(ASM_EMIT_LOCAL): New macro: Emit a local, uninitialized\n \tvariable.\n \t(ASM_EMIT_BSS): New macro: Emit an entry in the bss section.\n \t(ASM_EMIT_COMMON): New macro: Emit an entry in the common\n \tsection.\n \t(assemble_variable): Use asm_emit_uninitialised to emit an\n-\tuninitialised variable.\n+\tuninitialized variable.\n \n Fri Sep 24 17:10:56 1999  Nick Clifton  <nickc@cygnus.com>\n \n@@ -9759,7 +9759,7 @@ Sun Aug 29 04:30:52 1999  John Wehle  (john@feith.com)\n \tAll uses updated.\n \t(prescan_loop, strength_reduce): New argument loop_info.  All callers\n \tupdated.\n-\t(scan_loop): New variable loop_info, initialise to address of\n+\t(scan_loop): New variable loop_info, initialize to address of\n \tthis_loop_info.\n \t(prescan_loop): Set loop_info->vtop if find NOTE_INSN_LOOP_VTOP.\n \tDelete variable loop_has_multiple_exit targets and replace with"}, {"sha": "cee3d88affac449c9ccb5f9cb0cd366507fee381", "filename": "gcc/ChangeLog.3", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.3?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -2036,7 +2036,7 @@ Sun May 28 18:37:07 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n Sun May 28 23:26:59 2000  Philippe De Muyter <phdm@macqel.be>\n \n-\t* mklibgcc.in (all): Variable initialised to `libgcc'.\n+\t* mklibgcc.in (all): Variable initialized to `libgcc'.\n \n 2000-05-28  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n@@ -2088,10 +2088,10 @@ Sun May 28 23:26:59 2000  Philippe De Muyter <phdm@macqel.be>\n \t* regclass.c [CLASS_CANNOT_CHANGE_SIZE]\n \t(class_can_change_size): New variable.\n \t(reg_changes_size): New variable.\n-\t(init_reg_sets_1): Initialise class_can_change_size.\n+\t(init_reg_sets_1): Initialize class_can_change_size.\n \t(record_operand_costs): Remove subreg_changes_size.\n \tDon't pass it around.  Instead update reg_changes_size.\n-\t(regclass): Initialise and free reg_changes_size.  If a register\n+\t(regclass): Initialize and free reg_changes_size.  If a register\n \tchanges size, don't preference it to a class that contains\n \tregisters that can't change size.\n \t(record_reg_classes): Don't look at subreg_changes_size.\n@@ -2174,7 +2174,7 @@ Sun May 28 23:26:59 2000  Philippe De Muyter <phdm@macqel.be>\n \n 2000-05-28  Neil Booth  <NeilB@earthling.net>\n \n-\t* cpplex.c (_cpp_init_toklist): No comment space to initialise.\n+\t* cpplex.c (_cpp_init_toklist): No comment space to initialize.\n \t(_cpp_free_toklist): No comment space to free.\n \t(expand_comment_space): Remove.\n \t(save_comment_space): Place the comment in the current token and\n@@ -3133,7 +3133,7 @@ Fri May 19 06:49:35 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n 2000-05-18  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/unknown-elf.h (UNIQUE_SECTION): Place constant,\n-\tuninitialised data in .rodata not .bss, and do not interpret an\n+\tuninitialized data in .rodata not .bss, and do not interpret an\n \terror in the initialisation value as meaning that the variable\n \tshould be placed in the .bss section.\n \n@@ -3225,7 +3225,7 @@ Thu May 18 12:10:18 2000  Philippe De Muyter  <phdm@macqel.be>\n \n 2000-05-18  Neil Booth  <NeilB@earthling.net>\n \n-\t* cppinit.c (cpp_reader_init): Initialise col_adjust and\n+\t* cppinit.c (cpp_reader_init): Initialize col_adjust and\n \tdefault tab stop size.\n \t(no_num, OPT_ftabstop): New.\n \t(handle_option): Handle \"ftabstop=\" command-line option.\n@@ -10256,7 +10256,7 @@ Thu Mar 16 02:14:16 2000  Hans-Peter Nilsson  <hp@bitrange.com>\n \t2000-02-03  Geoff Keating  <geoffk@cygnus.com>\n \n \t* rs6000.c (rs6000_sr_alias_set): New variable.\n-\t(rs6000_override_options): Initialise rs6000_sr_alias_set.\n+\t(rs6000_override_options): Initialize rs6000_sr_alias_set.\n \t(rs6000_emit_stack_tie): New function.\n \t(rs6000_emit_allocate_stack): Specify RTX_FRAME_RELATED_P\n \tin a way that dwarf2out can understand.\n@@ -10804,7 +10804,7 @@ Wed Feb 23 13:00:06 CET 2000  Jan Hubicka  <jh@suse.cz>\n 2000-03-14  Nick Clifton  <nickc@cygnus.com>\n \n \t* gcc.c (do_spec_1): Catch the case where %* is used in a\n-\tsubstitution pattern, but it has not been initialised.\n+\tsubstitution pattern, but it has not been initialized.\n \tIssue a meaningful error message if an unrecognised operator\n \tis encountered in a spec string.\n \n@@ -15005,7 +15005,7 @@ Mon Jan 24 16:50:08 MET 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* basic-block.h (struct loops): New field `levels'.\n \t* flow.c (flow_loops_level_compute): Traverse all outer loops.\n-\t(flow_loop_level_compute): Initialise level to 1.\n+\t(flow_loop_level_compute): Initialize level to 1.\n \t(flow_loops_find): Set loops->levels.\n \t(flow_loops_dump): Print loops->levels.\n \n@@ -15047,7 +15047,7 @@ Mon Jan 24 16:50:08 MET 2000  Jan Hubicka  <jh@suse.cz>\n \n 2000-01-22  Alan Modra <alan@SPRI.Levels.UniSA.Edu.Au>\n \n-\t* config/elfos.h (UNIQUE_SECTION): Restore uninitialised data\n+\t* config/elfos.h (UNIQUE_SECTION): Restore uninitialized data\n \tsection naming to that prior to 2000-01-07 patch.\n \t* config/mips/elf.h (UNIQUE_SECTION): Ditto.\n \t* config/mips/elf64.h (UNIQUE_SECTION): Ditto.\n@@ -15242,7 +15242,7 @@ Wed Jan 19 19:12:36 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \t* loop.c (current_loop_info): Renamed from loop_info_data\n \tand changed to a pointer.\n \t(loop_optimize): Allocate loop_info structure for each loop\n-\tand initialise to zero.\n+\tand initialize to zero.\n \t(scan_loop): Set current_loop_info.\n \n \t* unroll.c (loop_iterations): Don't abort if REG_USERVAR_P set\n@@ -16500,25 +16500,25 @@ Thu Jan  6 13:44:59 CET 2000  Jan Hubicka  <jh@suse.cz>\n \tuninitialized data decls.\n \n \t* config/i386/winnt.c (i386_pe_unique_section): Cope with\n-\tbeing called for uninitialised data.\n+\tbeing called for uninitialized data.\n \n \t* config/i386/interix.c (i386_pe_unique_section): Cope with\n-\tbeing called for uninitialised data.\n+\tbeing called for uninitialized data.\n \n \t* config/mips/elf.h (UNIQUE_SECTION): Cope with being called\n-\tfor uninitialised data.\n+\tfor uninitialized data.\n \n \t* config/mips/elf64.h (UNIQUE_SECTION): Cope with being called\n-\tfor uninitialised data.\n+\tfor uninitialized data.\n \n \t* config/mips/iri6gld.h (UNIQUE_SECTION): Cope with being called\n-\tfor uninitialised data.\n+\tfor uninitialized data.\n \n \t* config/arm/unknown-elf.h (IN_NAMED_SECTION): Define.\n \t(UNIQUE_SECTION_P): Always generate a unique section if\n \tflag_data_sections is true.\n \t(UNIQUE_SECTION): Also generate unique sections for\n-\tuninitialised data.\n+\tuninitialized data.\n \t(ASM_OUTPUT_ALIGNED_BSS): Redefine to use named_section().\n \t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Redefine to use\n \tnamed_section()."}, {"sha": "1085b48c58440d58faa0e55639d2f1e81bf2ca72", "filename": "gcc/ChangeLog.4", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog.4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog.4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.4?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -300,7 +300,7 @@\n \tscavenging it.\n \n \t* dwarf2out_frame_debug_expr: Allow the (scratch) frame\n-\tpointer to be initialised from the stack pointer plus a\n+\tpointer to be initialized from the stack pointer plus a\n \tconstant.\n \n 2000-12-22  Bernd Schmidt  <bernds@redhat.com>\n@@ -355,7 +355,7 @@\n \n \t* reload.c (update_auto_inc_notes): New, broken out from ...\n \t(find_reloads_address_1): ... use here, also correct possible\n-\tuse of uninitialised reloadnum.\n+\tuse of uninitialized reloadnum.\n \n 2000-12-21  David O'Brien  <obrien@FreeBSD.org>\n \n@@ -1235,7 +1235,7 @@ Mon Dec 11 13:51:09 2000  Jeffrey A Law  (law@cygnus.com)\n \tarm_compute_save_reg_mask.\n \t(arm_expand_prologue): Use arm_current_func_type and\n \tarm_compute_save_reg_mask.\n-\t(arm_init_machine_status): Initialise func_type field, if\n+\t(arm_init_machine_status): Initialize func_type field, if\n \tnecessary.\n \t(thumb_expand_prologue): Use arm_current_func_type.\n \t(output_thumb_prologue): Use arm_current_func_type.\n@@ -2923,9 +2923,9 @@ Sun Nov 26 10:02:37 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(cxx_target_objs): Substitute in the makefile.\n \t* configure: Regenerate.\n \n-\t* Makefile.in (C_TARGET_OBJS): Define and initialise from\n+\t* Makefile.in (C_TARGET_OBJS): Define and initialize from\n \tc_target_objs.\n-\t(CXX_TARGET_OBJS): Define and initialise from\n+\t(CXX_TARGET_OBJS): Define and initialize from\n \tcxx_target_objs.\n \t(C_AND_OBJC_OBJS): Include C_TARGET_OBJS.\n \n@@ -3046,7 +3046,7 @@ Fri Nov 24 19:48:09 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n 2000-11-23  Graham Stott  <grahams@redhat.com>\n \n-\t* cse.c (cse_insn): Initialise all regcost variables.\n+\t* cse.c (cse_insn): Initialize all regcost variables.\n \tFix a typo add missing '='.\n \tOnly compare costs if there is a replacement insn.\n \n@@ -5216,13 +5216,13 @@ Tue Oct 31 15:33:27 2000  J\"orn Rennecke <amylaar@redhat.com>\n \thash table.\n \n \t* cppinit.c (cpp_reader_init): Move cpp_init_completed test to top.\n-\tInitialise various members of cpp_reader, memory pools, and the\n+\tInitialize various members of cpp_reader, memory pools, and the\n \tspecial nodes.\n \t(cpp_printer_init): Delete.\n \t(cpp_cleanup): Update.\n \t(struct builtin, builtin_array, initialize_builtins): Update for new\n \thashnode definition and builtin handling.\n-\t(cpp_start_read, cpp_finish): Don't take or initialise a\n+\t(cpp_start_read, cpp_finish): Don't take or initialize a\n \tprinter.  Update.\n \n \t* cpplib.h (cpp_printer, cpp_toklist, CPP_DEFINED, BOL,\n@@ -7147,7 +7147,7 @@ Fri Sep 29 13:20:42 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \terror\" tests.\n \t* cppinit.c (cpp_handle_option): Remove surplus \\n.\n \t* cpplex.c (ON_REST_ARG): Delete.\n-\t(skip_block_comment): Initialise prevc.\n+\t(skip_block_comment): Initialize prevc.\n \t(parse_args): Improve error messages.\n \t(maybe_paste_with_next): Use CONTEXT_VARARGS rather\n \tthan ON_REST_ARG.\n@@ -8018,7 +8018,7 @@ Mon 18-Sep-2000 19:21:35 BST  Neil Booth  <NeilB@earthling.net>\n \t* cpplib.c (_cpp_check_directive, _cpp_check_linemarker):\n \t New implementations.\n \t(do_assert): Don't bother setting the answer's list's line.\n-\t(cpp_push_buffer): Initialise new pfile and read_ahead members\n+\t(cpp_push_buffer): Initialize new pfile and read_ahead members\n \tof struct cpp_buffer.\n \n \t* cpplib.h (cppchar_t): New typedef."}, {"sha": "88c0be695554a316515ff27bdc3371b21fe6b912", "filename": "gcc/ChangeLog.5", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog.5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog.5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.5?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -1070,7 +1070,7 @@ Mon Jun 18 15:43:10 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-06-18  Ben Elliston  <bje@redhat.com>\n \n-\t* except.c (resolve_fixup_regions): Initialise \"cleanup\".\n+\t* except.c (resolve_fixup_regions): Initialize \"cleanup\".\n \n 2001-06-17  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n@@ -11587,10 +11587,10 @@ Mon Jan 29 20:38:19 2001  Christopher Faylor <cgf@cygnus.com>\n \n \t* loop.c (loop_giv_reduce_benefit): Copy mode size into\n \tint variable.\n-\t(check_ext_dependant_givs): Initialise u_start_val and\n+\t(check_ext_dependant_givs): Initialize u_start_val and\n \tu_end_val.\n \t(load_mems): Make last_max_reg unsigned.\n-\t(try_swap_copy_prop): Use INSN_P and initialise set.\n+\t(try_swap_copy_prop): Use INSN_P and initialize set.\n \n Fri Jan 26 23:22:58 2001  Denis Chertykov  <denisc@overta.ru>\n \n@@ -12892,7 +12892,7 @@ Fri Jan 12 00:04:00 MET 2001  Jan Hubicka  <jh@suse.cz>\n \n 2001-01-10  Nick Clifton  <nickc@redhat.com>\n \n-\t* config/d30v/d30v.c (d30v_init_machine_status): Initialise\n+\t* config/d30v/d30v.c (d30v_init_machine_status): Initialize\n \tmachine_function structure to zero.\n \tAdd prototypes for machine_status functions.\n \n@@ -13097,7 +13097,7 @@ Wed Jan 10 16:38:31 MET 2001  Jan Hubicka  <jh@suse.cz>\n \t* config/d30v/d30v.h (struct_machine): Move here.\n \tAdd eh_epilogue_sp_ofs field.\n \n-\t*config/d30v/d30v.md (epilogue): Initialise eh_epilogue_sp_ofs\n+\t*config/d30v/d30v.md (epilogue): Initialize eh_epilogue_sp_ofs\n \tfield in cfun->machine structure.\n \n Tue Jan  9 21:34:57 2001  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n@@ -13264,7 +13264,7 @@ Tue Jan  9 21:25:19 2001  Jeffrey A Law  (law@cygnus.com)\n 20001-01-09  Graham Stott  <grahams@redhat.com>\n \n \t* cppfiles.c (_cpp_execute_include): Move `len` initialisation\n-\tafter `ptr` is initialised.\n+\tafter `ptr` is initialized.\n \n 2001-01-09  Alexandre Oliva  <aoliva@redhat.com>\n "}, {"sha": "4bae6dc238acd439b8cc84698a3a04adef51c3e4", "filename": "gcc/ChangeLog.6", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog.6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2FChangeLog.6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.6?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -1020,10 +1020,10 @@ Mon Dec 17 17:57:05 CET 2001  Jan Hubicka  <jh@suse.cz>\n \t* target.h (asm_out.byte_op, asm_out.aligned_op, asm_out.unaligned_op,\n \tasm_out.integer): New fields.\n \t* target-def.h (TARGET_ASM_BYTE_OP, TARGET_ASM_ALIGNED_[HSDT]I_OP,\n-\tTARGET_ASM_UNALIGNED_[HSDT]I_OP, TARGET_ASM_INTEGER): New initialisers.\n+\tTARGET_ASM_UNALIGNED_[HSDT]I_OP, TARGET_ASM_INTEGER): New initializers.\n \t(TARGET_ASM_ALIGNED_INT_OP, TARGET_ASM_UNALIGNED_INT_OP): Collect\n-\tthe individual initialisers together.\n-\t(TARGET_ASM_OUT): Add the new initialisers.\n+\tthe individual initializers together.\n+\t(TARGET_ASM_OUT): Add the new initializers.\n \t* output.h (assemble_integer): Return bool.\n \t(integer_asm_op): Declare.\n \t(default_assemble_integer): Declare.\n@@ -10036,7 +10036,7 @@ Tue Sep 25 17:13:56 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t(builtin_decsription): Add new field mask which is used to determine\n \twhen to define the builtin via the macro def_builtin.\n \n-\t(bdesc_comi): Initialise new mask fields.\n+\t(bdesc_comi): Initialize new mask fields.\n \t(bdesc_2srg): Likewise.\n \t(bdesc_1arg): Likewise.\n \n@@ -16689,7 +16689,7 @@ Sun Jul 22 21:31:04 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t(xcoff_debug_hooks, dbx_debug_hooks): Use it.\n \t* sdbout.c (sdbout_finish): New.\n \t(sdbout_debug_hooks): Use it, add comments.\n-\t(sdbout_global_decl): Defer initialised public vars to\n+\t(sdbout_global_decl): Defer initialized public vars to\n \tsdbout_finish.\n \t* varasm.c (assemble_variable): Don't output debug information\n \tfor file-scope variables.\n@@ -16721,7 +16721,7 @@ Sun Jul 22 21:31:04 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \t(xcoff_debug_hooks, dbx_debug_hooks): Use it.\n \t* sdbout.c (sdbout_finish): New.\n \t(sdbout_debug_hooks): Use it, add comments.\n-\t(sdbout_global_decl): Defer initialised public vars to\n+\t(sdbout_global_decl): Defer initialized public vars to\n \tsdbout_finish.\n \t* varasm.c (assemble_variable): Don't output debug information\n \tfor file-scope variables."}, {"sha": "de8b27841b2433b5c3e61c5d1cdb250e634c34a4", "filename": "gcc/config/arm/README-interworking", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Farm%2FREADME-interworking", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Farm%2FREADME-interworking", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2FREADME-interworking?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -235,7 +235,7 @@ processing is enabled.\n When the -mthumb-interwork command line switch is specified, gcc\n arranges for all functions to return to their caller by using the BX\n instruction.  Thus provided that the return address has the bottom bit\n-correctly initialised to indicate the instruction set of the caller,\n+correctly initialized to indicate the instruction set of the caller,\n correct operation will ensue.\n \n When a function is called explicitly (rather than via a function"}, {"sha": "a16fbe55c11ffde508742d303acdd4f0d7628e58", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -672,7 +672,7 @@ arm_override_options ()\n   if (TARGET_APCS_FLOAT)\n     warning (\"passing floating point arguments in fp regs not yet supported\");\n   \n-  /* Initialise boolean versions of the flags, for use in the arm.md file.  */\n+  /* Initialize boolean versions of the flags, for use in the arm.md file.  */\n   arm_fast_multiply = (insn_flags & FL_FAST_MULT) != 0;\n   arm_arch4         = (insn_flags & FL_ARCH4) != 0;\n   arm_arch5         = (insn_flags & FL_ARCH5) != 0;\n@@ -9295,7 +9295,7 @@ arm_debugger_arg_offset (value, addr)\n      held in the register into an offset from the frame pointer.\n      We do this by searching through the insns for the function\n      looking to see where this register gets its value.  If the\n-     register is initialised from the frame pointer plus an offset\n+     register is initialized from the frame pointer plus an offset\n      then we are in luck and we can continue, otherwise we give up.\n      \n      This code is exercised by producing debugging information"}, {"sha": "609f9791bbc81692f1d7f3377d8cdcdecdd44e90", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -717,7 +717,7 @@ extern int arm_is_6_or_7;\n #define STRUCTURE_SIZE_BOUNDARY arm_structure_size_boundary\n extern int arm_structure_size_boundary;\n \n-/* This is the value used to initialise arm_structure_size_boundary.  If a\n+/* This is the value used to initialize arm_structure_size_boundary.  If a\n    particular arm target wants to change the default value it should change\n    the definition of this macro, not STRUCTRUE_SIZE_BOUNDARY.  See netbsd.h\n    for an example of this.  */\n@@ -1398,7 +1398,7 @@ enum reg_class\n    Note value 7 is currently unassigned.  Also note that the interrupt\n    function types all have bit 2 set, so that they can be tested for easily.\n    Note that 0 is deliberately chosen for ARM_FT_UNKNOWN so that when the\n-   machine_function structure is initialised (to zero) func_type will\n+   machine_function structure is initialized (to zero) func_type will\n    default to unknown.  This will force the first use of arm_current_func_type\n    to call arm_compute_func_type.  */\n #define ARM_FT_UNKNOWN\t\t 0 /* Type has not yet been determined.  */"}, {"sha": "8d58b529d1c48e707e43bcfa8b3550192704d0b6", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -180,7 +180,7 @@\n \t(const_string \"normal\"))\n \n ; Load scheduling, set from the arm_ld_sched variable\n-; initialised by arm_override_options() \n+; initialized by arm_override_options() \n (define_attr \"ldsched\" \"no,yes\" (const (symbol_ref \"arm_ld_sched\")))\n \n ; condition codes: this one is used by final_prescan_insn to speed up"}, {"sha": "c530a02debc0b8f33aba62f7a1eb32d6b2a222d1", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -1619,7 +1619,7 @@ extern struct dsp16xx_frame_info current_frame_info;\n \t      fprintf (asm_out_file, \"%d\", c);\t\t\t              \\\n \t      /* After an octal-escape, if a digit follows,\t\t      \\\n \t\t terminate one string constant and start another.\t      \\\n-\t\t The Vax assembler fails to stop reading the escape\t      \\\n+\t\t The VAX assembler fails to stop reading the escape\t      \\\n \t\t after three digits, so this is the only way we\t\t      \\\n \t\t can get it to parse the data properly.  \t\t      \\\n \t      if (i < thissize - 1 && ISDIGIT (p[i + 1]))\t\t      \\"}, {"sha": "c5ce889c3e802a8b8c0ae0a1ab7b05575adc12ae", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -3128,7 +3128,7 @@ frv_function_arg_boundary (mode, type)\n    register in which to pass the argument, or zero to pass the argument on the\n    stack.\n \n-   For machines like the Vax and 68000, where normally all arguments are\n+   For machines like the VAX and 68000, where normally all arguments are\n    pushed, zero suffices as a definition.\n \n    The usual way to make the ANSI library `stdarg.h' work on a machine where"}, {"sha": "6d4526a610045eae460b9523eaa93ec6b2bbf7bd", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -756,7 +756,7 @@ extern int g_switch_set;          /* whether -G xx was passed.  */\n         there is no need to define this macro when the format is IEEE.\n \n    VAX_FLOAT_FORMAT'\n-        This code indicates the peculiar format used on the Vax.\n+        This code indicates the peculiar format used on the VAX.\n \n    UNKNOWN_FLOAT_FORMAT'\n         This code indicates any other format.\n@@ -1832,7 +1832,7 @@ struct machine_function GTY(())\n    variable number of bytes is passed, it is zero, and argument popping will\n    always be the responsibility of the calling function.\n \n-   On the Vax, all functions always pop their arguments, so the definition of\n+   On the VAX, all functions always pop their arguments, so the definition of\n    this macro is STACK-SIZE.  On the 68000, using the standard calling\n    convention, no functions pop their arguments, so the value of the macro is\n    always 0 in this case.  But an alternative calling convention is available\n@@ -1881,7 +1881,7 @@ struct machine_function GTY(())\n    register in which to pass the argument, or zero to pass the argument on the\n    stack.\n \n-   For machines like the Vax and 68000, where normally all arguments are\n+   For machines like the VAX and 68000, where normally all arguments are\n    pushed, zero suffices as a definition.\n \n    The usual way to make the ANSI library `stdarg.h' work on a machine where"}, {"sha": "4e1238160534bbb24ec04d54190a16a812aa8b93", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -1226,7 +1226,7 @@ enum reg_class {\n    argument popping will always be the responsibility of the calling\n    function.\n \n-   On the Vax, all functions always pop their arguments, so the\n+   On the VAX, all functions always pop their arguments, so the\n    definition of this macro is STACK-SIZE.  On the 68000, using the\n    standard calling convention, no functions pop their arguments, so\n    the value of the macro is always 0 in this case.  But an\n@@ -1251,7 +1251,7 @@ enum reg_class {\n    hard register in which to pass the argument, or zero to pass the\n    argument on the stack.\n \n-   For machines like the Vax and 68000, where normally all arguments\n+   For machines like the VAX and 68000, where normally all arguments\n    are pushed, zero suffices as a definition.\n \n    The value of the expression can also be a `parallel' RTX.  This is"}, {"sha": "3752fcf94ba0cb0e42ec4b912e1fc39e3daa9a85", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -12393,7 +12393,7 @@ rs6000_elf_select_section (decl, reloc, align)\n    link-time relocations.  If you do not define this macro, GCC will use\n    the symbol name prefixed by `.' as the section name.  Note - this\n    macro can now be called for uninitialized data items as well as\n-   initialised data and functions.  */\n+   initialized data and functions.  */\n \n static void\n rs6000_elf_unique_section (decl, reloc)"}, {"sha": "fb1a48771503e52db635f21dce726e6f21519f10", "filename": "gcc/config/stormy16/stormy-abi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Fstormy16%2Fstormy-abi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Fstormy16%2Fstormy-abi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy-abi?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -105,7 +105,7 @@ count->\tr2\n \t...\n \tlast procedure parameter word\n \n-and initialises 'count' to be the number of bytes of non-variable\n+and initializes 'count' to be the number of bytes of non-variable\n arguments to the function.\n \n ELF File Format"}, {"sha": "98290fc7a174464cece9344a7bf73101b6dbd891", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -1194,7 +1194,7 @@ enum reg_class\n    variable number of bytes is passed, it is zero, and argument popping will\n    always be the responsibility of the calling function.\n \n-   On the Vax, all functions always pop their arguments, so the definition of\n+   On the VAX, all functions always pop their arguments, so the definition of\n    this macro is STACK-SIZE.  On the 68000, using the standard calling\n    convention, no functions pop their arguments, so the value of the macro is\n    always 0 in this case.  But an alternative calling convention is available\n@@ -1231,7 +1231,7 @@ enum reg_class\n    register in which to pass the argument, or zero to pass the argument on the\n    stack.\n \n-   For machines like the Vax and 68000, where normally all arguments are\n+   For machines like the VAX and 68000, where normally all arguments are\n    pushed, zero suffices as a definition.\n \n    The usual way to make the ANSI library `stdarg.h' work on a machine where"}, {"sha": "d0bdff52dbc7167557fe2e7b8d58f3244f5ffa3a", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -143,7 +143,7 @@ override_options ()\n \t}\n     }\n \n-  /* Make sure that the US_BIT_SET mask has been correctly initialised.  */\n+  /* Make sure that the US_BIT_SET mask has been correctly initialized.  */\n   if ((target_flags & MASK_US_MASK_SET) == 0)\n     {\n       target_flags |= MASK_US_MASK_SET;\n@@ -2861,7 +2861,7 @@ v850_insert_attributes (decl, attr_ptr)\n       && v850_get_data_area (decl) == DATA_AREA_NORMAL)\n     v850_set_data_area (decl, data_area_stack->data_area);\n \n-  /* Initialise the default names of the v850 specific sections,\n+  /* Initialize the default names of the v850 specific sections,\n      if this has not been done before.  */\n   \n   if (GHS_default_section_names [(int) GHS_SECTION_KIND_SDATA] == NULL)"}, {"sha": "5c5c68533a7f651eca56b734bcddf7dcf219e605", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -353,7 +353,7 @@ stack_include_file (pfile, inc)\n   fp->inc = inc;\n   fp->inc->refcnt++;\n \n-  /* Initialise controlling macro state.  */\n+  /* Initialize controlling macro state.  */\n   pfile->mi_valid = true;\n   pfile->mi_cmacro = 0;\n "}, {"sha": "e906e09b2035ba109c3ea3fcb99f6c6e1dcc8313", "filename": "gcc/cppinit.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -515,7 +515,7 @@ cpp_create_reader (lang)\n {\n   cpp_reader *pfile;\n \n-  /* Initialise this instance of the library if it hasn't been already.  */\n+  /* Initialize this instance of the library if it hasn't been already.  */\n   init_library ();\n \n   pfile = (cpp_reader *) xcalloc (1, sizeof (cpp_reader));\n@@ -543,7 +543,7 @@ cpp_create_reader (lang)\n   CPP_OPTION (pfile, unsigned_char) = 0;\n   CPP_OPTION (pfile, unsigned_wchar) = 1;\n \n-  /* Initialise the line map.  Start at logical line 1, so we can use\n+  /* Initialize the line map.  Start at logical line 1, so we can use\n      a line number of zero for special states.  */\n   init_line_maps (&pfile->line_maps);\n   pfile->line = 1;\n@@ -562,7 +562,7 @@ cpp_create_reader (lang)\n   pfile->cur_run = &pfile->base_run;\n   pfile->cur_token = pfile->base_run.base;\n \n-  /* Initialise the base context.  */\n+  /* Initialize the base context.  */\n   pfile->context = &pfile->base_context;\n   pfile->base_context.macro = 0;\n   pfile->base_context.prev = pfile->base_context.next = 0;\n@@ -574,7 +574,7 @@ cpp_create_reader (lang)\n   /* The expression parser stack.  */\n   _cpp_expand_op_stack (pfile);\n \n-  /* Initialise the buffer obstack.  */\n+  /* Initialize the buffer obstack.  */\n   gcc_obstack_init (&pfile->buffer_ob);\n \n   _cpp_init_includes (pfile);"}, {"sha": "e58a2e7d687a8188716f430a848c7c0148ba288b", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -532,7 +532,7 @@ extern int cpp_handle_option PARAMS ((cpp_reader *, int, char **));\n    too.  If there was an error opening the file, it returns NULL.\n \n    If you want cpplib to manage its own hashtable, pass in a NULL\n-   pointer.  Otherise you should pass in an initialised hash table\n+   pointer.  Otherise you should pass in an initialized hash table\n    that cpplib will share; this technique is used by the C front\n    ends.  */\n extern const char *cpp_read_main_file PARAMS ((cpp_reader *, const char *,"}, {"sha": "0096e206d21e721a9ccd287db7a594f8f557ca43", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -6300,7 +6300,7 @@ cse_insn (insn, libcall_insn)\n \n \t     This section previously turned the REG_EQUIV into a REG_EQUAL\n \t     note.  We cannot do that because REG_EQUIV may provide an\n-\t     uninitialised stack slot when REG_PARM_STACK_SPACE is used.  */\n+\t     uninitialized stack slot when REG_PARM_STACK_SPACE is used.  */\n \n \t  if (prev != 0 && GET_CODE (prev) == INSN\n \t      && GET_CODE (PATTERN (prev)) == SET"}, {"sha": "11c996fddd05f1bbcfa832fa6c4e75ebc9487bc4", "filename": "gcc/debug.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -23,7 +23,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n    toplev.c according to command line options.  */\n struct gcc_debug_hooks\n {\n-  /* Initialise debug output.  MAIN_FILENAME is the name of the main\n+  /* Initialize debug output.  MAIN_FILENAME is the name of the main\n      input file.  */\n   void (* init) PARAMS ((const char *main_filename));\n "}, {"sha": "8918a33c1e04008d5e8d151874136a3a4f887461", "filename": "gcc/df.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -507,7 +507,7 @@ df_bitmaps_free (df, flags)\n }\n \n \n-/* Allocate and initialise dataflow memory.  */\n+/* Allocate and initialize dataflow memory.  */\n static void\n df_alloc (df, n_regs)\n      struct df *df;\n@@ -2169,7 +2169,7 @@ df_analyse_1 (df, blocks, flags, update)\n }\n \n \n-/* Initialise dataflow analysis.  */\n+/* Initialize dataflow analysis.  */\n struct df *\n df_init ()\n {\n@@ -2340,7 +2340,7 @@ df_analyse (df, blocks, flags)\n \t      /* Recompute everything from scratch.  */\n \t      df_free (df);\n \t    }\n-\t  /* Allocate and initialise data structures.  */\n+\t  /* Allocate and initialize data structures.  */\n \t  df_alloc (df, max_reg_num ());\n \t  df_analyse_1 (df, 0, flags, 0);\n \t  update = 1;"}, {"sha": "48c621961e1f37704573befc687c9120fb8bd409", "filename": "gcc/dominance.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -145,7 +145,7 @@ void debug_dominance_info\t\tPARAMS ((dominance_info));\n   while (0)\n \n /* Allocate all needed memory in a pessimistic fashion (so we round up).\n-   This initialises the contents of DI, which already must be allocated.  */\n+   This initializes the contents of DI, which already must be allocated.  */\n \n static void\n init_dom_info (di)"}, {"sha": "ff8959b40dae454725d7356178f9e8f2aba6a2a6", "filename": "gcc/hashtable.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fhashtable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fhashtable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhashtable.c?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -45,7 +45,7 @@ static void ht_expand PARAMS ((hash_table *));\n #define OBSTACK_CHUNK_FREE free\n #endif\n \n-/* Initialise an obstack.  */\n+/* Initialize an obstack.  */\n void\n gcc_obstack_init (obstack)\n      struct obstack *obstack;"}, {"sha": "02dfcf19d291ff60bfd2f3dc6701befe3c805ebd", "filename": "gcc/hashtable.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhashtable.h?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -65,7 +65,7 @@ struct ht\n \n extern void gcc_obstack_init PARAMS ((struct obstack *));\n \n-/* Initialise the hashtable with 2 ^ order entries.  */\n+/* Initialize the hashtable with 2 ^ order entries.  */\n extern hash_table *ht_create PARAMS ((unsigned int order));\n \n /* Frees all memory associated with a hash table.  */"}, {"sha": "8dc860dbff5cb20e778e68a74ea9909df2cda429", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4912a07c880ff94353aa9f669170e852921e3570/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=4912a07c880ff94353aa9f669170e852921e3570", "patch": "@@ -4450,7 +4450,7 @@ loop_bivs_find (loop)\n }\n \n \n-/* Determine how BIVS are initialised by looking through pre-header\n+/* Determine how BIVS are initialized by looking through pre-header\n    extended basic block.  */\n static void\n loop_bivs_init_find (loop)\n@@ -5089,7 +5089,7 @@ strength_reduce (loop, flags)\n       return;\n     }\n \n-  /* Determine how BIVS are initialised by looking through pre-header\n+  /* Determine how BIVS are initialized by looking through pre-header\n      extended basic block.  */\n   loop_bivs_init_find (loop);\n "}]}