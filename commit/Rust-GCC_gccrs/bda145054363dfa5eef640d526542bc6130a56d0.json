{"sha": "bda145054363dfa5eef640d526542bc6130a56d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRhMTQ1MDU0MzYzZGZhNWVlZjY0MGQ1MjY1NDJiYzYxMzBhNTZkMA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-01-22T22:03:04Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-22T22:03:04Z"}, "message": "ButtonPeer.java: Replace with Classpath version.\n\n\t* java/awt/peer/ButtonPeer.java: Replace with Classpath version.\n\t* java/awt/peer/CanvasPeer.java: Replace with Classpath version.\n\t* java/awt/peer/CheckboxMenuItemPeer.java: Replace with Classpath\n\tversion.\n\t* java/awt/peer/CheckboxPeer.java: Replace with Classpath version.\n\t* java/awt/peer/ChoicePeer.java: Replace with Classpath version.\n\t* java/awt/peer/ComponentPeer.java: Replace with Classpath version.\n\t* java/awt/peer/ContainerPeer.java: Replace with Classpath version.\n\t* java/awt/peer/DialogPeer.java: Replace with Classpath version.\n\t* java/awt/peer/FileDialogPeer.java: Replace with Classpath version.\n\t* java/awt/peer/FontPeer.java: Replace with Classpath version.\n\t* java/awt/peer/FramePeer.java: Replace with Classpath version.\n\t* java/awt/peer/LabelPeer.java: Replace with Classpath version.\n\t* java/awt/peer/LightweightPeer.java: Replace with Classpath version.\n\t* java/awt/peer/ListPeer.java: Replace with Classpath version.\n\t* java/awt/peer/MenuBarPeer.java: Replace with Classpath version.\n\t* java/awt/peer/MenuComponentPeer.java: Replace with Classpath version.\n\t* java/awt/peer/MenuItemPeer.java: Replace with Classpath version.\n\t* java/awt/peer/MenuPeer.java: Replace with Classpath version.\n\t* java/awt/peer/PanelPeer.java: Replace with Classpath version.\n\t* java/awt/peer/PopupMenuPeer.java: Replace with Classpath version.\n\t* java/awt/peer/ScrollPanePeer.java: Replace with Classpath version.\n\t* java/awt/peer/ScrollbarPeer.java: Replace with Classpath version.\n\t* java/awt/peer/TextAreaPeer.java: Replace with Classpath version.\n\t* java/awt/peer/TextComponentPeer.java: Replace with Classpath version.\n\t* java/awt/peer/TextFieldPeer.java: Replace with Classpath version.\n\t* java/awt/peer/WindowPeer.java: Replace with Classpath version.\n\t* gnu/awt/xlib/XPanelPeer.java (insets): New method.\n\t* gnu/awt/xlib/XCanvasPeer.java (show, hide): New methods.\n\t(minimumSize, preferredSize, reshape): Likewise.\n\t* gnu/awt/xlib/XFramePeer.java (insets, enable, disable,\n\tgetColorModel): New methods.\n\t* java/awt/PopupMenu.java: Merged with Classpath.\n\t* java/awt/MenuBar.java: Merged with Classpath.\n\t* java/awt/SystemColor.java: Replace with Classpath version.\n\t* java/awt/Panel.java: Merged with Classpath.\n\t* java/awt/PaintContext.java: Updated copyright.\n\t* java/awt/MenuShortcut.java: Merged with Classpath.\n\t* java/awt/MenuContainer.java: Merged with Classpath.\n\t* java/awt/Menu.java: Merged with Classpath.\n\t* java/awt/MediaEntry.java: New file from Classpath.\n\t* java/awt/MediaTracker.java: New file from Classpath.\n\t* java/awt/List.java: Merged with Classpath version.\n\t* java/awt/Insets.java: Merged with Classpath version.\n\t* java/awt/ImageMediaEntry.java: New file from Classpath.\n\t* java/awt/Image.java: Replaced with Classpath version.\n\t* java/awt/FontMetrics.java: Merged with Classpath version.\n\t* java/awt/Cursor.java (getDefaultCursor): Use DEFAULT_CURSOR\n\tconstant.\n\t* java/awt/Font.java: Merged with Classpath version.\n\t* java/awt/Dialog.java: Merged with Classpath version.\n\t* java/awt/Color.java: Merged with Classpath version.\n\t* java/awt/Choice.java: Merged with Classpath version.\n\t* java/awt/CheckboxMenuItem.java: Merged with Classpath version.\n\t* java/awt/Adjustable.java: Replace with Classpath version.\n\t* java/awt/MenuItem.java (paramString): Don't include class name\n\tor brackets.  Call superclass paramString.\n\t* java/awt/MenuComponent.java (toString): Call paramString.\n\t(paramString): Compute string; don't call toString.\n\t* java/awt/Label.java (paramString): Don't include class name\n\tor brackets.  Call superclass paramString.\n\t* java/awt/Checkbox.java (paramString): Don't include class name\n\tor brackets.  Call superclass paramString.\n\t* java/awt/Button.java (paramString): Don't include class name or\n\tbrackets.  Call superclass paramString.\n\t* java/awt/MenuComponent.java (getTreeLock): Now protected.\n\nFrom-SVN: r49099", "tree": {"sha": "317e29ad09d5c7d11f21d6999c1e4c2d70eb6650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/317e29ad09d5c7d11f21d6999c1e4c2d70eb6650"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bda145054363dfa5eef640d526542bc6130a56d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda145054363dfa5eef640d526542bc6130a56d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bda145054363dfa5eef640d526542bc6130a56d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda145054363dfa5eef640d526542bc6130a56d0/comments", "author": null, "committer": null, "parents": [{"sha": "e3b0efd1eeea460b091c1b9b9038605a672b1cb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b0efd1eeea460b091c1b9b9038605a672b1cb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b0efd1eeea460b091c1b9b9038605a672b1cb9"}], "stats": {"total": 9406, "additions": 6882, "deletions": 2524}, "files": [{"sha": "6c659351c822a6dc1e4153e56622ea70a09406bc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,3 +1,72 @@\n+2002-01-22  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/awt/peer/ButtonPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/CanvasPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/CheckboxMenuItemPeer.java: Replace with Classpath\n+\tversion.\n+\t* java/awt/peer/CheckboxPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/ChoicePeer.java: Replace with Classpath version.\n+\t* java/awt/peer/ComponentPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/ContainerPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/DialogPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/FileDialogPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/FontPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/FramePeer.java: Replace with Classpath version.\n+\t* java/awt/peer/LabelPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/LightweightPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/ListPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/MenuBarPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/MenuComponentPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/MenuItemPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/MenuPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/PanelPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/PopupMenuPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/ScrollPanePeer.java: Replace with Classpath version.\n+\t* java/awt/peer/ScrollbarPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/TextAreaPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/TextComponentPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/TextFieldPeer.java: Replace with Classpath version.\n+\t* java/awt/peer/WindowPeer.java: Replace with Classpath version.\n+\t* gnu/awt/xlib/XPanelPeer.java (insets): New method.\n+\t* gnu/awt/xlib/XCanvasPeer.java (show, hide): New methods.\n+\t(minimumSize, preferredSize, reshape): Likewise.\n+\t* gnu/awt/xlib/XFramePeer.java (insets, enable, disable,\n+\tgetColorModel): New methods.\n+\t* java/awt/PopupMenu.java: Merged with Classpath.\n+\t* java/awt/MenuBar.java: Merged with Classpath.\n+\t* java/awt/SystemColor.java: Replace with Classpath version.\n+\t* java/awt/Panel.java: Merged with Classpath.\n+\t* java/awt/PaintContext.java: Updated copyright.\n+\t* java/awt/MenuShortcut.java: Merged with Classpath.\n+\t* java/awt/MenuContainer.java: Merged with Classpath.\n+\t* java/awt/Menu.java: Merged with Classpath.\n+\t* java/awt/MediaEntry.java: New file from Classpath.\n+\t* java/awt/MediaTracker.java: New file from Classpath.\n+\t* java/awt/List.java: Merged with Classpath version.\n+\t* java/awt/Insets.java: Merged with Classpath version.\n+\t* java/awt/ImageMediaEntry.java: New file from Classpath.\n+\t* java/awt/Image.java: Replaced with Classpath version.\n+\t* java/awt/FontMetrics.java: Merged with Classpath version.\n+\t* java/awt/Cursor.java (getDefaultCursor): Use DEFAULT_CURSOR\n+\tconstant.\n+\t* java/awt/Font.java: Merged with Classpath version.\n+\t* java/awt/Dialog.java: Merged with Classpath version.\n+\t* java/awt/Color.java: Merged with Classpath version.\n+\t* java/awt/Choice.java: Merged with Classpath version.\n+\t* java/awt/CheckboxMenuItem.java: Merged with Classpath version.\n+\t* java/awt/Adjustable.java: Replace with Classpath version.\n+\t* java/awt/MenuItem.java (paramString): Don't include class name\n+\tor brackets.  Call superclass paramString.\n+\t* java/awt/MenuComponent.java (toString): Call paramString.\n+\t(paramString): Compute string; don't call toString.\n+\t* java/awt/Label.java (paramString): Don't include class name\n+\tor brackets.  Call superclass paramString.\n+\t* java/awt/Checkbox.java (paramString): Don't include class name\n+\tor brackets.  Call superclass paramString.\n+\t* java/awt/Button.java (paramString): Don't include class name or\n+\tbrackets.  Call superclass paramString.\n+\t* java/awt/MenuComponent.java (getTreeLock): Now protected.\n+\n 2002-01-20  Andreas Schwab  <schwab@suse.de>\n \n \t* java/net/natPlainSocketImpl.cc (_Jv_recv): Change return type of"}, {"sha": "a208be5c10387605d47bc2a938a5bccc68c38660", "filename": "libjava/gnu/awt/xlib/XCanvasPeer.java", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fgnu%2Fawt%2Fxlib%2FXCanvasPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fgnu%2Fawt%2Fxlib%2FXCanvasPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXCanvasPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -230,6 +230,11 @@ public FontMetrics getFontMetrics(Font f)\n     throw new UnsupportedOperationException(\"FIXME, not implemented\");\n   }\n \n+  public ColorModel getColorModel ()\n+  {\n+    return null;\n+  }\n+\n   public Graphics getGraphics()\n   {\n     DirectRasterGraphics gfxDevice = new XGraphics(window, config);\n@@ -251,11 +256,21 @@ public Dimension getMinimumSize ()\n     return MIN_SIZE;\n   }\n \n+  public Dimension minimumSize ()\n+  {\n+    return getMinimumSize ();\n+  }\n+\n   public Dimension getPreferredSize ()\n   {\n     return component.getSize();\n   }\n     \n+  public Dimension preferredSize ()\n+  {\n+    return getPreferredSize();\n+  }\n+    \n   public Toolkit getToolkit()\n   {\n     return getXToolkit();\n@@ -318,6 +333,11 @@ public void setBounds(int x, int y, int width, int height)\n     ensureFlush();\t    \n   }\n     \n+  public void reshape (int x, int y, int width, int height)\n+  {\n+    setBounds (x, y, width, height);\n+  }\n+\n   public void setCursor(Cursor cursor)\n   {\n     throw new UnsupportedOperationException(\"FIXME, not implemented\");\n@@ -328,6 +348,16 @@ public void setEnabled(boolean enabled)\n     throw new UnsupportedOperationException(\"FIXME, not implemented\");\n   }\n \n+  public void enable ()\n+  {\n+    setEnabled (true);\n+  }\n+\n+  public void disable ()\n+  {\n+    setEnabled (false);\n+  }\n+\n   public void setEventMask(long eventMask)\n   {\n     WindowAttributes attributes = new WindowAttributes();\n@@ -371,6 +401,16 @@ public void setVisible(boolean visible)\n       }\n   }\n \t\n+  public void show ()\n+  {\n+    setVisible (true);\n+  }\n+\n+  public void hide ()\n+  {\n+    setVisible (false);\n+  }\n+\n   static class DoMap implements Runnable \n   {\n     Window window;"}, {"sha": "80a972425e50d2cdfdb894c6ece842df88e5cf1f", "filename": "libjava/gnu/awt/xlib/XFramePeer.java", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fgnu%2Fawt%2Fxlib%2FXFramePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fgnu%2Fawt%2Fxlib%2FXFramePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXFramePeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -93,6 +93,11 @@ public Insets getInsets()\n     return (Insets) INSETS_0_PROTOTYPE.clone();\n   }\n \n+  public Insets insets ()\n+  {\n+    return getInsets ();\n+  }\n+\n   public void beginValidate()\n   {\n   }"}, {"sha": "f4d3b4bffb164635cd6e4307d4300c147a7a5531", "filename": "libjava/gnu/awt/xlib/XPanelPeer.java", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fgnu%2Fawt%2Fxlib%2FXPanelPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fgnu%2Fawt%2Fxlib%2FXPanelPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fxlib%2FXPanelPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -40,6 +40,11 @@ public Insets getInsets()\n     return (Insets) INSETS_0_PROTOTYPE.clone();\n   }\n \n+  public Insets insets()\n+  {\n+    return getInsets();\n+  }\n+\n   public void beginValidate()\n   {\n     // NOP"}, {"sha": "eb773a07c69bdbf155c95e19d6c9713bf4e1c7a1", "filename": "libjava/java/awt/Adjustable.java", "status": "modified", "additions": 203, "deletions": 30, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FAdjustable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FAdjustable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FAdjustable.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,39 +1,212 @@\n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+/* Adjustable.java -- Objects with a numeric adjustment scale.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libjava.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-details.  */\n \n package java.awt;\n-import java.awt.event.*;\n+\n+import java.awt.event.AdjustmentListener;\n \n /**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date April 8, 2000\n+  * This interface is for objects that take a numeric value that\n+  * can be adjusted within a bounded range.  For example, a scroll bar.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public interface Adjustable\n+{\n+\n+/*\n+ * Static Variables\n  */\n \n-/* Status: Believed complete and correct to JDK 1.2.  */\n+/**\n+  * Constant for a horizontal orientation\n+  */\n+public static final int HORIZONTAL = 0;\n+\n+/**\n+  * Constant for a vertical orientation\n+  */\n+public static final int VERTICAL = 1;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Returns the current value of the object.\n+  *\n+  * @return The current value of the object.\n+  */\n+public abstract int\n+getValue();\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the current value of the object.\n+  *\n+  * @param value The current value of the object.\n+  */\n+public abstract void\n+setValue(int value);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the orientation of the object, either <code>HORIZONTAL</code>\n+  * or <code>VERTICAL</code>.\n+  *\n+  * @return The orientation of this object.\n+  */\n+public abstract int\n+getOrientation();\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the minimum value this object can take.\n+  *\n+  * @return The minimum value this object can take.\n+  */\n+public abstract int\n+getMinimum();\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the minimum value this object can take to the specified value.\n+  *\n+  * @param minimum The new minimum value for this object.\n+  */\n+public abstract void\n+setMinimum(int minimum);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the maximum value this object can take.\n+  *\n+  * @return The maximum value this object can take.\n+  */\n+public abstract int\n+getMaximum();\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the maximum value this object can take to the specified value.\n+  *\n+  * @param maximum The new maximum value for this object.\n+  */\n+public abstract void\n+setMaximum(int maximum);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the increment value for incrementing by units.\n+  *\n+  * @return The unit increment value.\n+  */\n+public abstract int\n+getUnitIncrement();\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the increment value for incrementing by units to the specified value.\n+  *\n+  * @param increment The unit increment value.\n+  */\n+public abstract void\n+setUnitIncrement(int increment);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the increment value for incrementing by blocks.\n+  *\n+  * @return The block increment value.\n+  */\n+public abstract int\n+getBlockIncrement();\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the increment value for incrementing by blocks to the specified value.\n+  *\n+  * @param increment The block increment value.\n+  */\n+public abstract void\n+setBlockIncrement(int increment);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the length of the indicator for this object.\n+  *\n+  * @return The indicator length.\n+  */\n+public abstract int\n+getVisibleAmount();\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the length of the indicator for this object to the specified value.\n+  *\n+  * @param length The indicator length\n+  */\n+public abstract void\n+setVisibleAmount(int length);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds a listener that will receive adjustment events for this object.\n+  * \n+  * @param listener The adjustment listener to add.\n+  */\n+public abstract void\n+addAdjustmentListener(AdjustmentListener listener);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes an adjustment listener from this object.  It will no longer\n+  * receive adjustment events.\n+  *\n+  * @param listener The adjustment listener to remove.\n+  */\n+public abstract void\n+removeAdjustmentListener(AdjustmentListener listener);\n+\n+} // interface Adjustable\n \n-public interface Adjustable\n-{\n-  public static final int HORIZONTAL = 0;\n-  public static final int VERTICAL = 1;\n-\n-  public void addAdjustmentListener (AdjustmentListener l);\n-  public int getBlockIncrement ();\n-  public int getMaximum ();\n-  public int getMinimum ();\n-  public int getOrientation ();\n-  public int getUnitIncrement ();\n-  public int getValue ();\n-  public int getVisibleAmount ();\n-  public void removeAdjustmentListener (AdjustmentListener l);\n-  public void setBlockIncrement (int b);\n-  public void setMaximum (int max);\n-  public void setMinimum (int min);\n-  public void setUnitIncrement (int u);\n-  public void setValue (int v);\n-  public void setVisibleAmount (int v);\n-}"}, {"sha": "64c55cb5cf2b5ec22818ecde9acb0f0c4142f6b9", "filename": "libjava/java/awt/Button.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FButton.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FButton.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FButton.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -269,8 +269,8 @@ public class Button extends Component implements java.io.Serializable\n protected String\n paramString()\n {\n-  return(getClass().getName() + \"(label=\" + getLabel() + \",actionCommand=\" +\n-         getActionCommand() + \")\");\n+  return (\"label=\" + getLabel() + \",actionCommand=\" + getActionCommand()\n+\t  + \",\" + super.paramString());\n }\n \n } // class Button "}, {"sha": "a7d12ad5fe06697691b0c501c1a200035de1fe73", "filename": "libjava/java/awt/Checkbox.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FCheckbox.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FCheckbox.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckbox.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -362,8 +362,8 @@ public class Checkbox extends Component implements ItemSelectable, Serializable\n protected String\n paramString()\n {\n-  return(getClass().getName() + \"[label=\" + label + \",state=\" + state\n-\t + \",group=\" + group + \"]\");\n+  return (\"label=\" + label + \",state=\" + state + \",group=\" + group\n+\t  + \",\" + super.paramString());\n }\n \n } // class Checkbox "}, {"sha": "bdede7b85a83fcfccbfcebf9aabf2bc3f75d6598", "filename": "libjava/java/awt/CheckboxMenuItem.java", "status": "modified", "additions": 255, "deletions": 124, "changes": 379, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FCheckboxMenuItem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FCheckboxMenuItem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckboxMenuItem.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,134 +1,265 @@\n-/* Copyright (C) 2000, 2001  Free Software Foundation\n+/* CheckboxMenuItem.java -- A menu option with a checkbox on it.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n+\n import java.awt.peer.CheckboxMenuItemPeer;\n-import java.awt.event.ItemListener;\n+import java.awt.peer.MenuItemPeer;\n+import java.awt.peer.MenuComponentPeer;\n import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+\n+/**\n+  * This class implements a menu item that has a checkbox on it indicating\n+  * the selected state of some option.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@redhat.com>\n+  */\n+public class CheckboxMenuItem extends MenuItem implements ItemSelectable,\n+                                                          java.io.Serializable\n+{\n \n-/** This implements a menu item which keeps track of a boolean state.\n- * @author Tom Tromey <tromey@redhat.com>\n- * @date December 25, 2000\n+/*\n+ * Static Variables\n  */\n-public class CheckboxMenuItem extends MenuItem implements ItemSelectable\n+\n+// Serialization constant\n+private static final long serialVersionUID = 6190621106981774043L;\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * @serial The state of the checkbox, with <code>true</code> being on and\n+  * <code>false</code> being off.\n+  */\n+private boolean state;\n+\n+// List of registered ItemListeners\n+private transient ItemListener item_listeners;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>CheckboxMenuItem</code> with no\n+  * label and an initial state of off.\n+  */\n+public\n+CheckboxMenuItem()\n {\n-  /** Create a new CheckboxMenuItem.\n-   * @param label The checkbox label.  A null value is the same as \"\";\n-   *              null is the default.\n-   * @param state The initial check state; defaults to false.\n-   */\n-  public CheckboxMenuItem ()\n-  {\n-    this (null, false);\n-  }\n-\n-  public CheckboxMenuItem (String label)\n-  {\n-    this (label, false);\n-  }\n-\n-  public CheckboxMenuItem (String label, boolean state)\n-  {\n-    this.label = label;\n-    this.state = state;\n-  }\n-\n-  /** Add a listener for item events.\n-   * @param listener The listener to add.\n-   */\n-  public synchronized void addItemListener (ItemListener listener)\n-  {\n-    listeners = AWTEventMulticaster.add (listeners, listener);\n-  }\n-\n-  /** This creates the component's peer.  */\n-  public void addNotify ()\n-  {\n-    if (peer != null)\n-      {\n-\t// This choice of toolkit seems unsatisfying, but I'm not sure\n-\t// what else to do.\n-\tpeer = Toolkit.getDefaultToolkit ().createCheckboxMenuItem (this);\n-      }\n-    super.addNotify ();\n-  }\n-\n-  /** Returns this checkbox's label if this checkbox is selected.  */\n-  public Object[] getSelectedObjects ()\n-  {\n-    Object[] r;\n-    if (state)\n-      {\n-\tr = new Object[1];\n-\tr[0] = label;\n-      }\n-    else\n-      r = new Object[0];\n-    return r;\n-  }\n-\n-  /** Returns the current state of this checkbox.  */\n-  public boolean getState ()\n-  {\n-    return state;\n-  }\n-\n-  /** Generates a String representation of this Checkbox's state.  */\n-  public String paramString ()\n-  {\n-    return (\"[\" + getClass ().getName ()\n-\t    + \"state=\" + state + \",\"\n-\t    + \"label=\" + label + \"]\");\n-  }\n-\n-  /** Process an event for this Checkbox.\n-   * @param event The event the process.\n-   */\n-  protected void processEvent (AWTEvent event) \n-  {\n-    if (event instanceof ItemEvent)\n-      processItemEvent ((ItemEvent) event);\n-    else\n-      super.processEvent (event);\n-  }\n-\n-  /** Process an item event for this Checkbox.\n-   * @param event The ItemEvent to process\n-   */\n-  protected void processItemEvent (ItemEvent event)\n-  {\n-    if (listeners != null)\n-      listeners.itemStateChanged (event);\n-  }\n-\n-  /** Remove an item listener.\n-   * @param listener Item listener to remove.\n-   */\n-  public synchronized void removeItemListener (ItemListener listener)\n-  {\n-    listeners = AWTEventMulticaster.remove (listeners, listener);\n-  }\n-\n-  /** Set the checkbox's state.\n-   * @param state The new state.\n-   */\n-  public void setState (boolean state)\n-  {\n-    this.state = state;\n-    if (peer != null)\n-      {\n-\tCheckboxMenuItemPeer cp = (CheckboxMenuItemPeer) peer;\n-\tcp.setState (state);\n-      }\n-  }\n-\n-  // Private state.\n-  String label;\n-  boolean state;\n-  ItemListener listeners;\n+  this(\"\", false);\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>CheckboxMenuItem</code> with the\n+  * specified label and an initial state of off.\n+  *\n+  * @param label The label of the menu item.\n+  */\n+public\n+CheckboxMenuItem(String label)\n+{\n+  this(label, false);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>CheckboxMenuItem</code> with the\n+  * specified label and initial state.\n+  *\n+  * @param label The label of the menu item.\n+  * @param state The initial state of the menu item, where <code>true</code>\n+  * is on, and <code>false</code> is off.\n+  */\n+public\n+CheckboxMenuItem(String label, boolean state)\n+{\n+  super(label);\n+  this.state = state;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Returns the state of this menu item.\n+  *\n+  * @return The state of this menu item.\n+  */\n+public boolean\n+getState()\n+{\n+  return(state);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the state of this menu item.\n+  *\n+  * @param state The initial state of the menu item, where <code>true</code>\n+  * is on, and <code>false</code> is off.\n+  */\n+public synchronized void\n+setState(boolean state)\n+{\n+  this.state = state;\n+  if (peer != null)\n+    {\n+      CheckboxMenuItemPeer cp = (CheckboxMenuItemPeer) peer;\n+      cp.setState (state);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns an array of length 1 with the menu item label for this object\n+  * if the state is on.  Otherwise <code>null</code> is returned.\n+  *\n+  * @param An array with this menu item's label if it has a state of on,\n+  * or <code>null</code> otherwise.\n+  */\n+public Object[]\n+getSelectedObjects()\n+{\n+  if (state == false)\n+    return(null);\n+\n+  Object[] obj = new Object[1];\n+  obj[0] = getLabel();\n+\n+  return(obj);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Create's this object's native peer\n+  */\n+public synchronized void\n+addNotify()\n+{\n+  if (peer != null)\n+    {\n+      // This choice of toolkit seems unsatisfying, but I'm not sure\n+      // what else to do.\n+      peer = getToolkit().createCheckboxMenuItem(this);\n+    }\n+  super.addNotify ();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds the specified listener to the list of registered item listeners\n+  * for this object.\n+  *\n+  * @param listener The listener to add.\n+  */\n+public synchronized void\n+addItemListener(ItemListener listener)\n+{\n+  item_listeners = AWTEventMulticaster.add(item_listeners, listener);\n+\n+  enableEvents(AWTEvent.ITEM_EVENT_MASK);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes the specified listener from the list of registered item\n+  * listeners for this object.\n+  *\n+  * @param listener The listener to remove.\n+  */\n+public synchronized void\n+removeItemListener(ItemListener listener)\n+{\n+  item_listeners = AWTEventMulticaster.remove(item_listeners, listener);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Processes the specified event by calling <code>processItemEvent()</code>\n+  * if it is an instance of <code>ItemEvent</code> or calling the superclass\n+  * method otherwise.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void\n+processEvent(AWTEvent event)\n+{\n+  if (event instanceof ItemEvent)\n+    processItemEvent((ItemEvent)event);\n+  else\n+    super.processEvent(event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Processes the specified event by dispatching it to any registered listeners.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void\n+processItemEvent(ItemEvent event)\n+{\n+  if (item_listeners != null)\n+    item_listeners.itemStateChanged(event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a debugging string for this object.\n+  *\n+  * @return A debugging string for this object.\n+  */\n+public String\n+paramString()\n+{\n+  return (\"label=\" + getLabel() + \",state=\" + state\n+\t  + \",\" + super.paramString());\n+}\n+\n+} // class CheckboxMenuItem\n+"}, {"sha": "68064356de60c89b9f352dfc669858be30ae7a52", "filename": "libjava/java/awt/Choice.java", "status": "modified", "additions": 427, "deletions": 267, "changes": 694, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FChoice.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FChoice.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FChoice.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,276 +1,436 @@\n-/* Copyright (C) 2000, 2001  Free Software Foundation\n+/* Choice.java -- Java choice button widget.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n-import java.awt.event.*;\n+\n import java.awt.peer.ChoicePeer;\n-import java.util.ArrayList;\n+import java.awt.peer.ComponentPeer;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.io.Serializable;\n+import java.util.Vector;\n+\n+/**\n+  * This class implements a drop down choice list.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class Choice extends Component implements ItemSelectable, Serializable\n+{\n+\n+/*\n+ * Static Variables\n+ */\n+\n+// Serialization constant\n+private static final long serialVersionUID = -4075310674757313071L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * @serial A list of items for the choice box, which can be <code>null</code>.\n+  */\n+private Vector pItems = new Vector();\n+\n+/**\n+  * @serial The index of the selected item in the choice box.\n+  */\n+private int selectedIndex = -1;\n+\n+// Listener chain\n+private ItemListener item_listeners;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>Choice</code>.\n+  */\n+public\n+Choice()\n+{\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Returns the number of items in the list.\n+  *\n+  * @return The number of items in the list.\n+  */\n+public int\n+getItemCount()\n+{\n+  return(pItems.size());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the number of items in the list.\n+  *\n+  * @return The number of items in the list.\n+  *\n+  * @deprecated This method is deprecated in favor of <code>getItemCount</code>.\n+  */\n+public int\n+countItems()\n+{\n+  return(pItems.size());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the item at the specified index in the list.\n+  *\n+  * @param index The index into the list to return the item from.\n+  *\n+  * @exception ArrayIndexOutOfBoundsException If the index is invalid.\n+  */\n+public String\n+getItem(int index)\n+{\n+  return((String)pItems.elementAt(index));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds the specified item to this choice box.\n+  *\n+  * @param item The item to add.\n+  */\n+public synchronized void\n+add(String item)\n+{\n+  if (item == null)\n+    throw new IllegalArgumentException (\"item must be non-null\");\n+\n+  pItems.addElement(item);\n+\n+  int i = pItems.size () - 1;\n+  if (peer != null)\n+    {\n+      ChoicePeer cp = (ChoicePeer) peer;\n+      cp.add (item, i);\n+    }\n+\n+  if (i == 0)\n+    select (0);\n+}\n+\n+/*************************************************************************/\n \n-/** This component lets the user choose an item from a list of\n- * Strings.\n- * @author Tom Tromey <tromey@redhat.com>\n- * @date December 25, 2000\n+/**\n+  * Adds the specified item to this choice box.\n+  *\n+  * @param item The item to add.\n+  */\n+public synchronized void\n+addItem(String item)\n+{\n+  add(item);\n+}\n+\n+/*************************************************************************/\n+\n+/** Inserts an item into this Choice.  Existing items are shifted\n+ * upwards.  If the new item is the only item, then it is selected.\n+ * If the currently selected item is shifted, then the first item is\n+ * selected.  If the currently selected item is not shifted, then it\n+ * remains selected.\n+ *\n+ * @param item The item to add.\n+ * @param index The index at which the item should be inserted.\n  */\n-public class Choice extends Component implements ItemSelectable\n+public synchronized void\n+insert(String item, int index)\n {\n-  /** Create a new Choice object.  */\n-  public Choice ()\n-  {\n-    items = new ArrayList ();\n-    selected = -1;\n-  }\n-\n-  /** Add a new item to this Choice object.  If the item is the first\n-   * item on the list, then it is selected.\n-   * @param item The new item; must be non-null.\n-   */\n-  public synchronized void add (String item)\n-  {\n-    if (item == null)\n-      throw new IllegalArgumentException (\"item must be non-null\");\n-    items.add (item);\n-\n-    int i = items.size () - 1;\n-    if (peer != null)\n-      {\n-\tChoicePeer cp = (ChoicePeer) peer;\n-\tcp.add (item, i);\n-      }\n-\n-    if (i == 0)\n-      select (0);\n-  }\n-\n-  /** Add a new item to this Choice object.  This is the same as the\n-   * add method.  */\n-  public void addItem (String item)\n-  {\n-    add (item);\n-  }\n-\n-  /** Add a listener for item events.\n-   * @param listener The listener to add.\n-   */\n-  public synchronized void addItemListener (ItemListener listener)\n-  {\n-    listeners = AWTEventMulticaster.add (listeners, listener);\n-  }\n-\n-  /** This creates the component's peer.  */\n-  public void addNotify ()\n-  {\n-    if (peer == null)\n-      peer = getToolkit ().createChoice (this);\n-    super.addNotify ();\n-  }\n-\n-  /** Returns number of items.\n-   * @deprecated\n-   */\n-  public int countItems ()\n-  {\n-    return getItemCount ();\n-  }\n-\n-  /** Returns an item from this choice.\n-   * @param index Index of the item.  Indices start at zero.\n-   */\n-  public String getItem (int index)\n-  {\n-    return (String) items.get (index);\n-  }\n-\n-  /** Returns number of items in Choice.  */\n-  public int getItemCount ()\n-  {\n-    return items.size ();\n-  }\n-\n-  /** Returns index of selected item; -1 if no item is selected.  */\n-  public int getSelectedIndex ()\n-  {\n-    return selected;\n-  }\n-\n-  /** Returns currently selected item; null if no item is selected.  */\n-  public synchronized String getSelectedItem ()\n-  {\n-    return selected == -1 ? null : (String) items.get (selected);\n-  }\n-\n-  /** Returns the currently selected item.  */\n-  public synchronized Object[] getSelectedObjects ()\n-  {\n-    // The JCL says this can return null but that breaks the contract\n-    // for ItemSelectable.\n-    Object[] r;\n-    if (selected != -1)\n-      {\n-\tr = new Object[1];\n-\tr[0] = items.get (selected);\n-      }\n-    else\n-      r = new Object[0];\n-    return r;\n-  }\n-\n-  /** Inserts an item into this Choice.  Existing items are shifted\n-   * upwards.  If the new item is the only item, then it is selected.\n-   * If the currently selected item is shifted, then the first item is\n-   * selected.  If the currently selected item is not shifted, then it\n-   * remains selected.\n-   * @param item The new item\n-   * @param index The position at which to insert it.\n-   */\n-  public synchronized void insert (String item, int index)\n-  {\n-    if (index > items.size ())\n-      index = items.size ();\n-    items.add (index, item);\n-\n-    if (peer != null)\n-      {\n-\tChoicePeer cp = (ChoicePeer) peer;\n-\tcp.add (item, index);\n-      }\n-\n-    if (items.size () == 1 || selected >= index)\n-      select (0);\n-  }\n-\n-  /** Generates a String representation of this Choice's state.  */\n-  protected String paramString ()\n-  {\n-    return (\"Choice[\"\n-\t    + \"selected=\" + selected\n-\t    + \"]\");\n-  }\n-\n-  /** Process an event for this Choice\n-   * @param event The event the process.\n-   */\n-  protected void processEvent (AWTEvent event)\n-  {\n-    if (event instanceof ItemEvent)\n-      processItemEvent ((ItemEvent) event);\n-    else\n-      super.processEvent (event);\n-  }\n-\n-  /** Process an item event for this Choice.\n-   * @param event The ItemEvent to process\n-   */\n-  protected void processItemEvent (ItemEvent event)\n-  {\n-    if (listeners != null)\n-      listeners.itemStateChanged (event);\n-  }\n-\n-  /** Remove an item from this Choice.  If several matches exist, the\n-   * first one is removed.  If the removed item is selected, the the\n-   * first item is selected.\n-   * @param item The item string.\n-   */\n-  public synchronized void remove (String item)\n-  {\n-    int size = items.size ();\n-    for (int i = 0; i < size; ++i)\n-      {\n-\tif (item.equals (items.get (i)))\n-\t  {\n-\t    remove (i);\n-\t    break;\n-\t  }\n-      }\n-    throw new IllegalArgumentException (\"item \\\"\" + item + \"\\\" not in Choice\");\n-  }\n-\n-  /** Remove an item from this Choice.  If the removed item is\n-   * selected, the the first item is selected.\n-   * @param index Index of the item to remove\n-   */\n-  public synchronized void remove (int index)\n-  {\n-    items.remove (index);\n-\n-    if (peer != null)\n-      {\n-\tChoicePeer cp = (ChoicePeer) peer;\n-\tcp.remove (index);\n-      }\n-\n-    if (index == selected)\n-      select (0);\n-    else if (selected > index)\n-      --selected;\n-  }\n-\n-  /** Remove all items from this choice.  */\n-  public synchronized void removeAll ()\n-  {\n-    int oldsize = items.size ();\n-    items.clear ();\n-    selected = -1;\n-\n-    if (peer != null)\n-      {\n-\tChoicePeer cp = (ChoicePeer) peer;\n-\tfor (int i = 0; i < oldsize; ++i)\n-\t  {\n-\t    // Always remove item 0.\n-\t    cp.remove (0);\n-\t  }\n-      }\n-  }\n-\n-  /** Remove an item listener.\n-   * @param listener Item listener to remove.\n-   */\n-  public synchronized void removeItemListener (ItemListener listener)\n-  {\n-    listeners = AWTEventMulticaster.remove (listeners, listener);\n-  }\n-\n-  /** Select an item in this Choice.\n-   * @param item Name of the item to select.\n-   */\n-  public synchronized void select (String item)\n-  {\n-    int size = items.size ();\n-    for (int i = 0; i < size; ++i)\n-      {\n-\tif (item.equals (items.get (i)))\n-\t  {\n-\t    select (i);\n-\t    break;\n-\t  }\n-      }\n-  }\n-\n-  /** Select an item in this choice.\n-   * @param index Index of item to select.\n-   */\n-  public synchronized void select (int index)\n-  {\n-    if (index < 0 || index > items.size ())\n-      throw new IllegalArgumentException (\"index out of range\");\n-    selected = index;\n-    if (peer != null)\n-      {\n-\tChoicePeer cp = (ChoicePeer) peer;\n-\tcp.select (index);\n-      }\n-  }\n-\n-  private ItemListener listeners;\n-\n-  // List of items.\n-  ArrayList items;\n-  // Index of selected item.\n-  int selected;\n+  if (index > getItemCount ())\n+    index = getItemCount ();\n+\n+  pItems.insertElementAt(item, index);\n+\n+  if (peer != null)\n+    {\n+      ChoicePeer cp = (ChoicePeer) peer;\n+      cp.add (item, index);\n+    }\n+\n+  if (getItemCount () == 1 || selectedIndex >= index)\n+    select (0);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes the specified item from the choice box.\n+  *\n+  * @param item The item to remove.\n+  *\n+  * @param IllegalArgumentException If the specified item doesn't exist.\n+  */\n+public synchronized void\n+remove(String item)\n+{\n+  int index = pItems.indexOf(item);\n+  if (index == -1)\n+    throw new IllegalArgumentException (\"item \\\"\"\n+\t\t\t\t\t+ item + \"\\\" not found in Choice\");\n+  remove(index);\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes the item at the specified index from the choice box.\n+  *\n+  * @param index The index of the item to remove.\n+  *\n+  * @exception ArrayIndexOutOfBoundException If the index is not valid.\n+  */\n+public synchronized void\n+remove(int index)\n+{\n+  pItems.removeElementAt(index);\n+\n+  if (peer != null)\n+    {\n+      ChoicePeer cp = (ChoicePeer) peer;\n+      cp.remove (index);\n+    }\n+\n+  if (index == selectedIndex)\n+    select (0);\n+  else if (selectedIndex > index)\n+    --selectedIndex;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes all of the objects from this choice box.\n+  */\n+public synchronized void\n+removeAll()\n+{\n+  int count = getItemCount();\n+\n+  for (int i = 0; i < count; i++)\n+    {\n+      // Always remove 0.\n+      remove(0);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the currently selected item, or null if no item is\n+  * selected.\n+  *\n+  * @return The currently selected item.\n+  */\n+public synchronized String\n+getSelectedItem()\n+{\n+  return (selectedIndex == -1\n+\t  ? null\n+\t  : ((String)pItems.elementAt(selectedIndex)));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns an array with one row containing the selected item.\n+  *\n+  * @return An array containing the selected item.\n+  */\n+public synchronized Object[]\n+getSelectedObjects()\n+{\n+  if (selectedIndex == -1)\n+    return null;\n+\n+  Object[] objs = new Object[1];\n+  objs[0] = pItems.elementAt(selectedIndex);\n+\n+  return(objs);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the index of the selected item.\n+  *\n+  * @return The index of the selected item.\n+  */\n+public int\n+getSelectedIndex()\n+{\n+  return(selectedIndex);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Forces the item at the specified index to be selected.\n+  *\n+  * @param index The index of the row to make selected.\n+  *\n+  * @param IllegalArgumentException If the specified index is invalid.\n+  */\n+public synchronized void\n+select(int index)\n+{\n+  if ((index < 0) || (index > getItemCount()))\n+    throw new IllegalArgumentException(\"Bad index: \" + index);\n+\n+  this.selectedIndex = index;\n+  if (peer != null)\n+    {\n+      ChoicePeer cp = (ChoicePeer) peer;\n+      cp.select (index);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Forces the named item to be selected.\n+  *\n+  * @param item The item to be selected.\n+  *\n+  * @exception IllegalArgumentException If the specified item does not exist.\n+  */\n+public synchronized void\n+select(String item)\n+{\n+  int index = pItems.indexOf(item);\n+  if (index >= 0)\n+    select(index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Creates the native peer for this object.\n+  */\n+public void\n+addNotify()\n+{\n+  if (peer == null)\n+    peer = getToolkit ().createChoice (this);\n+  super.addNotify ();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds the specified listener to the list of registered listeners for\n+  * this object.\n+  *\n+  * @param listener The listener to add.\n+  */\n+public synchronized void\n+addItemListener(ItemListener listener)\n+{\n+  item_listeners = AWTEventMulticaster.add(item_listeners, listener);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes the specified listener from the list of registered listeners for\n+  * this object.\n+  *\n+  * @param listener The listener to remove.\n+  */\n+public synchronized void\n+removeItemListener(ItemListener listener)\n+{\n+  item_listeners = AWTEventMulticaster.remove(item_listeners, listener);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Processes this event by invoking <code>processItemEvent()</code> if the\n+  * event is an instance of <code>ItemEvent</code>, otherwise the event\n+  * is passed to the superclass.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void\n+processEvent(AWTEvent event)\n+{\n+  if (event instanceof ItemEvent)\n+    processItemEvent((ItemEvent)event);\n+  else\n+    super.processEvent(event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Processes item event by dispatching to any registered listeners.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void\n+processItemEvent(ItemEvent event)\n+{\n+  if (item_listeners != null)\n+    item_listeners.itemStateChanged(event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a debugging string for this object.\n+  *\n+  * @return A debugging string for this object.\n+  */\n+protected String\n+paramString()\n+{\n+  return (\"selectedIndex=\" + selectedIndex + \",\" + super.paramString());\n+}\n+\n+} // class Choice "}, {"sha": "52db41c8f47f613e5c7240ff0e0a036da557d637", "filename": "libjava/java/awt/Color.java", "status": "modified", "additions": 509, "deletions": 109, "changes": 618, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FColor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FColor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FColor.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,122 +1,522 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Color.java -- Class representing a color in Java\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 15, 2000.\n+  * This class represents a color value in the AWT system.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class Color implements java.io.Serializable\n+{\n+\n+/*\n+ * Static Variables\n+ */\n+\n+/**\n+  * Constant for the color white\n+  */\n+public static final Color white = new Color(255,255,255,255);\n+\n+/**\n+  * Constant for the color light gray\n+  */\n+public static final Color lightGray = new Color(192,192,192,255);\n+\n+/**\n+  * Constant for the color gray\n+  */\n+public static final Color gray = new Color(128,128,128,255);\n+\n+/**\n+  * Constant for the color dark gray\n+  */\n+public static final Color darkGray = new Color(64,64,64,255);\n+\n+/**\n+  * Constant for the color black\n+  */\n+public static final Color black = new Color(0,0,0,255);\n+\n+/**\n+  * Constant for the color red\n+  */\n+public static final Color red = new Color(255,0,0,255);\n+\n+/**\n+  * Constant for the color pink\n+  */\n+public static final Color pink = new Color(255, 175, 175,255);\n+\n+/**\n+  * Constant for the color orange\n+  */\n+public static final Color orange = new Color(255, 200, 0,255);\n+\n+/**\n+  * Constant for the color yellow\n+  */\n+public static final Color yellow = new Color(255,255,0,255);\n+\n+/**\n+  * Constant for the color green\n+  */\n+public static final Color green = new Color(0,255,0,255);\n+\n+/**\n+  * Constant for the color magenta\n+  */\n+public static final Color magenta = new Color(255,0,255,255);\n+\n+/**\n+  * Constant for the color cyan\n+  */\n+public static final Color cyan = new Color(0,255,255,255);\n+\n+/**\n+  * Constant for the color blue\n+  */\n+public static final Color blue = new Color(0,0,255,255);\n+\n+// Serialization Constant\n+private static final long serialVersionUID = 118526816881161077L;\n+\n+// Masks for individual color components\n+private static final int redmask = 255 << 16;\n+private static final int greenmask = 255 << 8;\n+private static final int bluemask = 255;\n+private static final int alphamask = 255 << 24;\n+\n+private static final int BRIGHT_STEP = 0x30;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n  */\n \n /**\n- * Written using on-line Java Platform 1.2 API Specification, as well\n- * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n- * Status:  Stubbed; A very incomplete implementation.\n+  * @serial The RGB value of the color.\n+  */\n+private int value = 0xFFFFFFFF;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Static Methods\n  */\n \n-public class Color extends Object implements Paint, java.io.Serializable\n-{\n-  public static final Color white =\tnew Color(0xFFFFFFFF, true);\n-  public static final Color lightGray =\tnew Color(0xFFC0C0C0, true);\n-  public static final Color gray =\tnew Color(0xFF808080, true);\n-  public static final Color darkGray =\tnew Color(0xFF404040, true);\n-  public static final Color black =\tnew Color(0xFF000000, true);\n-  public static final Color red =\tnew Color(0xFFFF0000, true);\n-  public static final Color pink =\tnew Color(0xFFFFAFAF, true);\n-  public static final Color orange =\tnew Color(0xFFFFC800, true);\n-  public static final Color yellow =\tnew Color(0xFFFFFF00, true);\n-  public static final Color green =\tnew Color(0xFF00FF00, true);\n-  public static final Color magenta =\tnew Color(0xFFFF00FF, true);\n-  public static final Color cyan =\tnew Color(0xFF00FFFF, true);\n-  public static final Color blue =\tnew Color(0xFF0000FF, true);\n-  \n-  // The internal sRGB representation.\n-  // Alpha is bits 24-31, if hasalpha is true.\n-  // Red is bits 16-23; Green is bits 8-15; Blue is bits 0-7.\n-  int rgba = 0xFFFFFFFF;\n-\n-  public Color(int rgb)\n-  {\n-    this(rgb, false);\n-  } \n-\n-  public Color(int rgba, boolean hasalpha)\n-  {\n-    this.rgba = rgba;\n-    if (!hasalpha)\n-      rgba |= 0xFF000000;\n-  }\n-\n-  public Color(int r, int g, int b)\n-  {\n-    this(r, g, b, 0xFF);\n-  }\n-\n-  public Color(int r, int g, int b, int a)\n-  {\n-    rgba = a << 24 | ((r << 16) & 0x00FF0000) | ((g << 8) & 0x0000FF00) |\n-    \t   (b & 0x000000FF);\n-  }\n-\n-  public int getRed()\n-  {\n-    return (rgba >> 16) & 0xFF;\n-  }\n-\n-  public int getGreen()\n-  {\n-    return (rgba >> 8) & 0xFF;\n-  }\n-\n-  public int getBlue()\n-  {\n-    return rgba & 0xFF;\n-  }\n-\n-  public int getAlpha()\n-  {\n-    return (rgba >> 24) & 0xFF;\n-  }\n-\n-  public int getRGB()\n-  {\n-    return rgba;\n-  }\n-\n-  static final int BRIGHT_STEP = 0x30;\n-\n-  public Color brighter()\n-  {\n-    return new Color(Math.min(255, getRed()   + BRIGHT_STEP),\n-\t\t     Math.min(255, getGreen() + BRIGHT_STEP),\n-\t\t     Math.min(255, getBlue()  + BRIGHT_STEP),\n-\t\t     getAlpha());\n-  }\n-    \n-  public Color darker()\n-  {\n-    return new Color(Math.max(0, getRed()   - BRIGHT_STEP),\n-\t\t     Math.max(0, getGreen() - BRIGHT_STEP),\n-\t\t     Math.max(0, getBlue()  - BRIGHT_STEP),\n-\t\t     getAlpha());\n-  }\n-    \n-  public int hashCode()\n-  {\n-    return rgba;\n-  }\n-  \n-  public int getTransparency()\n-  {\n-    if (getAlpha() == 0xFF)\n-      return Transparency.OPAQUE;\n-    else\n-      return Transparency.TRANSLUCENT;\n-  }\n+/**\n+  * Converts the specified string to a number and creates a new instance\n+  * of <code>Color</code> from the value.\n+  *\n+  * @param str The numeric color string.\n+  *\n+  * @return A new instance of <code>Color</code> for the string.\n+  *\n+  * @exception NumberFormatException If the string cannot be parsed.\n+  */\n+public static Color\n+decode(String str) throws NumberFormatException\n+{\n+  Integer i = Integer.decode(str);\n+  return(new Color(i.intValue()));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a new instance of <code>Color</code> from the value of\n+  * the system property named by the specified string.  If the property\n+  * does not exist, or cannot be parsed, then <code>null</code> will be\n+  * returned.\n+  *\n+  * @param prop The system property to retrieve.\n+  */\n+public static Color\n+getColor(String prop)\n+{\n+  return(getColor(prop, null));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a new instance of <code>Color</code> from the value of the\n+  * system property named by the specified string.  If the property does\n+  * not exist, or cannot be parsed, then the default RGB value will be\n+  * used to create a return value.\n+  *\n+  * @param prop The system property to retrieve.\n+  * @param defrgb The default RGB value.\n+  */\n+public static Color\n+getColor(String prop, int defrgb)\n+{\n+  return(getColor(prop, new Color(defrgb)));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a new instance of <code>Color</code> from the value of the\n+  * system property named by the specified string.  If the property does\n+  * not exist, or cannot be parsed, then the default color value will be\n+  * returned\n+  *\n+  * @param prop The system property to retrieve.\n+  * @param defcolor The default color\n+  */\n+public static Color\n+getColor(String prop, Color defcolor)\n+{\n+  String val = System.getProperty(prop);\n+  if (val == null)\n+    return(defcolor);\n+\n+  try\n+    {\n+      return(decode(val));\n+    }\n+  catch(NumberFormatException e)\n+    {\n+      return(defcolor);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Converts from the HSB (hue, saturation, brightness) color model to\n+  * the RGB (red, green, blue) color model.\n+  *\n+  * @param hue The hue of the HSB value.\n+  * @param saturation The saturation of the HSB value.\n+  * @param brightness The brightness of the HSB value.\n+  *\n+  * @return The RGB value.\n+  */\n+public static int\n+HSBtoRGB(float hue, float saturation, float brightness)\n+{\n+  // FIXME: Implement\n+  throw new RuntimeException(\"Not implemented yet\");\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Converts from the RGB (red, green, blue) color model to the HSB\n+  * (hue, saturation, brightness) color model.\n+  *\n+  * @param red The red part of the RGB value.\n+  * @param green The green part of the RGB value.\n+  * @param blue The blue part of the RGB value.\n+  * @param hsbvals An array of three floats used for storing the HSB values,\n+  * or <code>null</code> if this return mechanism is not used.\n+  *\n+  * @return The HSB value.\n+  */\n+public static float[]\n+RGBtoHSB(int red, int green, int blue, float hsbvals[])\n+{\n+  // FIXME: Implement\n+  throw new RuntimeException(\"Not implemented yet\");\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a new instance of <code>Color</code> based on the specified\n+  * HSB values.\n+  *\n+  * @param hue The hue of the HSB value.\n+  * @param saturation The saturation of the HSB value.\n+  * @param brightness The brightness of the HSB value.\n+  *\n+  * @return The new <code>Color</code> object.\n+  */\n+public static Color\n+getHSBColor(float hue, float saturation, float brightness)\n+{\n+  return(new Color(HSBtoRGB(hue, saturation, brightness)));\n }\n \n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>Color</code> using the specified\n+  * red, green, and blue values, which must be given as integers in the\n+  * range of 0-255.\n+  *\n+  * @param red The red component of the RGB value.\n+  * @param green The green component of the RGB value.\n+  * @param blue The blue component of the RGB value.\n+  *\n+  * @exception IllegalArgumentException If the values are out of range.\n+  */\n+public\n+Color(int red, int green, int blue)\n+{\n+  if ((red < 0) || (red > 255) || (green < 0) || (green > 255) ||\n+      (blue < 0) || (blue > 255))\n+    throw new IllegalArgumentException(\"Bad RGB values\");\n+\n+  value = blue + (green << 8) + (red << 16);\n+}\n+\n+public\n+Color(int red, int green, int blue, int alpha)\n+{\n+  if ((red < 0) || (red > 255) || (green < 0) || (green > 255) ||\n+      (blue < 0) || (blue > 255))\n+    throw new IllegalArgumentException(\"Bad RGB values\");\n+\n+  value = blue + (green << 8) + (red << 16) + (alpha << 24);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Color</code> using the specified\n+  * RGB value.  The blue value is in bits 0-7, green in bits 8-15, and \n+  * red in bits 16-23.  The other bits are ignored.\n+  *\n+  * @param value The RGB value\n+  */\n+public\n+Color(int value)\n+{\n+  this.value = value;\n+}\n+\n+public\n+Color(int value, boolean hasalpha)\n+{\n+  this.value = value;\n+  if (! hasalpha)\n+    this.value |= 0xFF000000;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Color</code> using the specified\n+  * RGB values.  These must be in the range of 0.0-1.0.\n+  *\n+  * @param red The red component of the RGB value.\n+  * @param green The green component of the RGB value.\n+  * @param blue The blue component of the RGB value.\n+  *\n+  * @exception IllegalArgumentException If the values are out of range.\n+  */\n+public\n+Color(float red, float green, float blue)\n+{\n+  if ((red < 0.0) || (red > 1.0) || (green < 0.0) || (green > 1.0) ||\n+      (blue < 0.0) || (blue > 1.0))\n+    throw new IllegalArgumentException(\"Bad RGB values\");\n+\n+  int redval = (int)(255 * red);\n+  int greenval = (int)(255 * green);\n+  int blueval = (int)(255 * blue);\n+\n+  value = blueval + (greenval << 8) + (redval << 16);\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Returns the red value for this color.\n+  *\n+  * @return The red value for this color.\n+  */\n+public int\n+getRed()\n+{\n+  int redval = (value & redmask) >> 16;\n+\n+  return(redval);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the green value for this color.\n+  *\n+  * @return The green value for this color.\n+  */\n+public int\n+getGreen()\n+{\n+  int greenval = (value & greenmask) >> 8;\n+\n+  return(greenval);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the blue value for this color.\n+  *\n+  * @return The blue value for this color.\n+  */\n+public int\n+getBlue()\n+{\n+  int blueval = (value & bluemask);\n+\n+  return(blueval);\n+}\n+\n+public int\n+getAlpha()\n+{\n+  int alphaval = (value & alphamask);\n+\n+  return(alphaval);\n+}\n+\n+public int\n+getTransparency()\n+{\n+  if (getAlpha() == 0xFF)\n+    return Transparency.OPAQUE;\n+  else\n+    return Transparency.TRANSLUCENT;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the RGB value for this color.  The blue value will be in bits\n+  * 0-7, green in 8-15, and red in 6-23.  The upper bits should be ignored.\n+  *\n+  * @return The RGB value for this color.\n+  */\n+public int\n+getRGB()\n+{\n+  return(value);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a brighter version of this color.  This is done by increasing\n+  * the RGB values by an arbitrary scale factor.  Note that this method\n+  * and the <code>darker()</code> method are not necessarily inverses.\n+  *\n+  * @return A brighter version of this color.\n+  */\n+public Color\n+brighter()\n+{\n+  return new Color(Math.min(255, getRed()   + BRIGHT_STEP),\n+\t\t   Math.min(255, getGreen() + BRIGHT_STEP),\n+\t\t   Math.min(255, getBlue()  + BRIGHT_STEP),\n+\t\t   getAlpha());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a darker version of this color.  This is done by decreasing\n+  * the RGB values by an arbitrary scale factor.  Note that this method\n+  * and the <code>brighter()</code> method are not necessarily inverses.\n+  *\n+  * @return A darker version of this color.\n+  */\n+public Color\n+darker()\n+{\n+  return new Color(Math.max(0, getRed()   - BRIGHT_STEP),\n+\t\t   Math.max(0, getGreen() - BRIGHT_STEP),\n+\t\t   Math.max(0, getBlue()  - BRIGHT_STEP),\n+\t\t   getAlpha());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a hash value for this color.\n+  *\n+  * @return A hash value for this color.\n+  */\n+public int\n+hashCode()\n+{\n+  return(value);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests this object for equality against the specified object.  This will\n+  * be true if and only if the specified object is an instance of\n+  * <code>Color</code> and has the same red, green, and blue values as\n+  * this object.\n+  *\n+  * @return <code>true</code> if the specified object is equal to this one,\n+  * <code>false</code> otherwise.\n+  */\n+public boolean\n+equals(Object obj)\n+{\n+  if (!(obj instanceof Color))\n+    return(false);\n+\n+  Color c = (Color)obj;\n+  return value == c.value;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a string representation of this object.\n+  * \n+  * @return A string representation of this object.\n+  */\n+public String\n+toString()\n+{\n+  return(getClass().getName() + \"(red=\" + getRed() + \",green=\" + getGreen() +\n+         \",blue=\" + getBlue() + \")\");\n+}\n+\n+} // class Color\n+"}, {"sha": "79b1d6c52edf37d01c848394a345b5038dbe422a", "filename": "libjava/java/awt/Cursor.java", "status": "modified", "additions": 133, "deletions": 25, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FCursor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FCursor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCursor.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,39 +1,126 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2002  Free Software Foundation\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n \n-package java.awt;\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/* A somewhat incomplete placeholder. */\n \n+package java.awt;\n+\n+/**\n+  * This class represents various predefined cursor types.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n public class Cursor implements java.io.Serializable\n {\n-  public static final int DEFAULT_CURSOR   = 0,\n-\t\t\t  CROSSHAIR_CURSOR = 1,\n-\t\t\t  TEXT_CURSOR      = 2,\n-\t\t\t  WAIT_CURSOR      = 3,\n-\t\t\t  SW_RESIZE_CURSOR = 4,\n-\t\t\t  SE_RESIZE_CURSOR = 5,\n-\t\t\t  NW_RESIZE_CURSOR = 6,\n-\t\t\t  NE_RESIZE_CURSOR = 7,\n-\t\t\t  N_RESIZE_CURSOR  = 8,\n-\t\t\t  S_RESIZE_CURSOR  = 9,\n-\t\t\t  W_RESIZE_CURSOR  = 10,\n-\t\t\t  E_RESIZE_CURSOR  = 11,\n-\t\t\t  HAND_CURSOR      = 12,\n-\t\t\t  MOVE_CURSOR      = 13,\n-\t\t\t  CUSTOM_CURSOR    = 0xFFFFFFFF;\n+  /**\n+  * Constant for the system default cursor type\n+  */\n+  public static final int DEFAULT_CURSOR = 0;\n+\n+  /**\n+  * Constant for a cross-hair cursor.\n+  */\n+  public static final int CROSSHAIR_CURSOR = 1;\n+\n+  /**\n+  * Constant for a cursor over a text field.\n+  */\n+  public static final int TEXT_CURSOR = 2;\n+\n+  /**\n+  * Constant for a cursor to display while waiting for an action to complete.\n+  */\n+  public static final int WAIT_CURSOR = 3;\n+\n+  /**\n+  * Cursor used over SW corner of window decorations.\n+  */\n+  public static final int SW_RESIZE_CURSOR = 4;\n+\n+  /**\n+  * Cursor used over SE corner of window decorations.\n+  */\n+  public static final int SE_RESIZE_CURSOR = 5;\n+\n+  /**\n+  * Cursor used over NW corner of window decorations.\n+  */\n+  public static final int NW_RESIZE_CURSOR = 6;\n+\n+  /**\n+  * Cursor used over NE corner of window decorations.\n+  */\n+  public static final int NE_RESIZE_CURSOR = 7;\n+\n+  /**\n+  * Cursor used over N edge of window decorations.\n+  */\n+  public static final int N_RESIZE_CURSOR = 8;\n+\n+  /**\n+  * Cursor used over S edge of window decorations.\n+  */\n+  public static final int S_RESIZE_CURSOR = 9;\n+\n+  /**\n+  * Cursor used over W edge of window decorations.\n+  */\n+  public static final int W_RESIZE_CURSOR = 10;\n+\n+  /**\n+  * Cursor used over E edge of window decorations.\n+  */\n+  public static final int E_RESIZE_CURSOR = 11;\n+\n+  /**\n+  * Constant for a hand cursor.\n+  */\n+  public static final int HAND_CURSOR = 12;\n+\n+  /**\n+  * Constant for a cursor used during window move operations.\n+  */\n+  public static final int MOVE_CURSOR = 13;\n+\n+  public static final int CUSTOM_CURSOR    = 0xFFFFFFFF;\n \n   private static final int PREDEFINED_COUNT = 14;\n \n   protected static Cursor[] predefined = new Cursor[PREDEFINED_COUNT];\n   protected String name;\n+\n+  /**\n+   * @serial The numeric id of this cursor.\n+   */\n   int type;\n \n+  /**\n+   * Initializes a new instance of <code>Cursor</code> with the specified\n+   * type.\n+   *\n+   * @param type The cursor type.\n+   */\n   public Cursor(int type)\n   {\n     if (type < 0 || type >= PREDEFINED_COUNT)\n@@ -43,14 +130,25 @@ public Cursor(int type)\n   }\n \n   /** This constructor is used internally only. \n-    * Application code should call Toolkit.createCustomCursor().\n-    */\n+   * Application code should call Toolkit.createCustomCursor().\n+   */\n   protected Cursor(String name)\n   {\n     this.name = name;\n     this.type = CUSTOM_CURSOR;\n   }\n \n+  /**\n+   * Returns an instance of <code>Cursor</code> for one of the specified\n+   * predetermined types.\n+   *\n+   * @param type The type contant from this class.\n+   *\n+   * @return The requested predefined cursor.\n+   *\n+   * @exception IllegalArgumentException If the constant is not one of the\n+   * predefined cursor type constants from this class.\n+   */\n   public static Cursor getPredefinedCursor(int type)\n   {\n     if (type < 0 || type >= PREDEFINED_COUNT)\n@@ -67,11 +165,21 @@ public static Cursor getSystemCustomCursor(String name)\n     return null;\n   }\n \n+  /**\n+   * Returns an instance of the system default cursor type.\n+   *\n+   * @return The system default cursor.\n+   */\n   public static Cursor getDefaultCursor()\n   {\n-    return getPredefinedCursor(0);\n+    return getPredefinedCursor(DEFAULT_CURSOR);\n   }\n \n+  /**\n+   * Returns the numeric type identifier for this cursor.\n+   *\n+   * @return The cursor id.\n+   */\n   public int getType()\n   {\n     return type;"}, {"sha": "5469d8de906a4351fb05f002b872309a7b268a32", "filename": "libjava/java/awt/Dialog.java", "status": "modified", "additions": 292, "deletions": 152, "changes": 444, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FDialog.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FDialog.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FDialog.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,163 +1,303 @@\n-/* Copyright (C) 2000, 2001  Free Software Foundation\n+/* Dialog.java -- An AWT dialog box\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n import java.awt.peer.DialogPeer;\n+import java.awt.peer.WindowPeer;\n+import java.awt.peer.ContainerPeer;\n+import java.awt.peer.ComponentPeer;\n+\n+/**\n+  * A dialog box widget class.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@redhat.com>\n+  */\n+public class Dialog extends Window implements java.io.Serializable\n+{\n+\n+/*\n+ * Static Variables\n+ */\n+\n+// Serialization constant\n+private static final long serialVersionUID = 5920926903803293709L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * @serial Indicates whether or not this dialog box is modal.\n+  */\n+private boolean modal;\n+\n+/**\n+  * @serial Indicates whether or not this dialog box is resizable.\n+  */\n+private boolean resizable;\n+\n+/**\n+  * @serial The title string for this dialog box, which can be\n+  * <code>null</code>.\n+  */\n+private String title;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>Dialog</code> with the specified\n+  * parent, that is not resizable and not modal, and which has no title.\n+  *\n+  * @param parent The parent frame of this dialog box.\n+  */\n+public\n+Dialog(Frame parent)\n+{\n+  this(parent, \"\", false);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Dialog</code> with the specified\n+  * parent and modality, that is not resizable and which has no title.\n+  *\n+  * @param parent The parent frame of this dialog box.\n+  * @param modal <true> if this dialog box is modal, <code>false</code>\n+  * otherwise.\n+  */\n+public\n+Dialog(Frame parent, boolean modal)\n+{\n+  this(parent, \"\", modal);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Dialog</code> with the specified\n+  * parent, that is not resizable and not modal, and which has the specified\n+  * title.\n+  *\n+  * @param parent The parent frame of this dialog box.\n+  * @param title The title string for this dialog box.\n+  */\n+public\n+Dialog(Frame parent, String title)\n+{\n+  this(parent, title, false);\n+}\n+\n+/*************************************************************************/\n \n /**\n- * @author Tom Tromey <tromey@redhat.com>\n- * @date April 17, 2001\n+  * Initializes a new instance of <code>Dialog</code> with the specified,\n+  * parent, title, and modality, that is not resizable.\n+  *\n+  * @param parent The parent frame of this dialog box.\n+  * @param title The title string for this dialog box.\n+  * @param modal <true> if this dialog box is modal, <code>false</code>\n+  * otherwise.\n+  */\n+public\n+Dialog(Frame parent, String title, boolean modal)\n+{\n+  super(parent);\n+\n+  this.title = title;\n+  this.modal = modal;\n+  resizable = false;\n+\n+  setLayout(new BorderLayout());\n+}\n+\n+public\n+Dialog (Dialog owner)\n+{\n+  this (owner, \"\", false);\n+}\n+\n+public\n+Dialog (Dialog owner, String title)\n+{\n+  this (owner, title, false);\n+}\n+\n+public\n+Dialog (Dialog owner, String title, boolean modal)\n+{\n+  super (owner);\n+  this.modal = modal;\n+  this.title = title;\n+  setLayout (new BorderLayout ());\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n  */\n \n-public class Dialog extends Window\n-{\n-  public Dialog (Dialog owner)\n-  {\n-    this (owner, \"\", false);\n-  }\n-\n-  public Dialog (Dialog owner, String title)\n-  {\n-    this (owner, title, false);\n-  }\n-\n-  public Dialog (Dialog owner, String title, boolean modal)\n-  {\n-    super (owner);\n-    this.modal = modal;\n-    this.title = title;\n-    setLayout (new BorderLayout ());\n-  }\n-\n-  public Dialog (Frame owner)\n-  {\n-    this (owner, \"\", false);\n-  }\n-\n-  public Dialog (Frame owner, boolean modal)\n-  {\n-    this (owner, \"\", modal);\n-  }\n-\n-  public Dialog (Frame owner, String title)\n-  {\n-    this (owner, title, false);\n-  }\n-\n-  public Dialog (Frame owner, String title, boolean modal)\n-  {\n-    super (owner);\n-    this.modal = modal;\n-    this.title = title;\n-    setLayout (new BorderLayout ());\n-  }\n-\n-  /** Create the peer if it does not already exist.  */\n-  public void addNotify ()\n-  {\n-    if (peer == null)\n-      peer = getToolkit ().createDialog (this);\n-    super.addNotify ();\n-  }\n-\n-  public boolean isModal ()\n-  {\n-    return modal;\n-  }\n-\n-  public void setModal (boolean modal)\n-  {\n-    this.modal = modal;\n-  }\n-\n-  public String getTitle ()\n-  {\n-    return title;\n-  }\n-\n-  public void setTitle (String title)\n-  {\n-    this.title = title;\n-    if (peer != null)\n-      {\n-\tDialogPeer d = (DialogPeer) peer;\n-\td.setTitle (title);\n-      }\n-  }\n-\n-  public void show ()\n-  {\n-    boolean vis = isVisible ();\n-    super.show ();\n-    if (modal && vis)\n-      {\n-\t// Don't return until something happens.  We lock on the peer\n-\t// instead of `this' so that we don't interfere with whatever\n-\t// locks the caller might want to use.\n-\tsynchronized (peer)\n-\t  {\n-\t    try\n-\t      {\n-\t\tpeer.wait ();\n-\t      }\n-\t    catch (InterruptedException _)\n-\t      {\n-\t      }\n-\t  }\n-      }\n-  }\n-\n-  public void hide ()\n-  {\n-    super.hide ();\n-    synchronized (peer)\n-      {\n-\tpeer.notify ();\n-      }\n-  }\n-\n-  public void dispose ()\n-  {\n-    super.dispose ();\n-    synchronized (peer)\n-      {\n-\tpeer.notify ();\n-      }\n-  }\n-\n-  public boolean isResizable ()\n-  {\n-    return resizable;\n-  }\n-\n-  public void setResizable (boolean resizable)\n-  {\n-    this.resizable = resizable;\n-    if (peer != null)\n-      {\n-\tDialogPeer d = (DialogPeer) peer;\n-\td.setResizable (resizable);\n-      }\n-  }\n-\n-  protected String paramString ()\n-  {\n-    return (\"Dialog[\"\n-\t    + title + \",\"\n-\t    + modal + \",\"\n-\t    + resizable + \"]\");\n-  }\n-\n-  // True if dialog is modal.\n-  private boolean modal;\n-  // True if dialog is resizable by the user.\n-  private boolean resizable = false;\n-  // Dialog title.\n-  private String title;\n+/**\n+  * Returns the title of this dialog box.\n+  * \n+  * @return The title of this dialog box.\n+  */\n+public String\n+getTitle()\n+{\n+  return(title);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the title of this dialog box to the specified string.\n+  *\n+  * @param title The new title.\n+  */\n+public synchronized void\n+setTitle(String title)\n+{\n+  this.title = title;\n+  if (peer != null)\n+    {\n+      DialogPeer d = (DialogPeer) peer;\n+      d.setTitle (title);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests whether or not this dialog box is modal.\n+  *\n+  * @return <code>true</code> if this dialog box is modal,\n+  * <code>false</code> otherwise.\n+  */\n+public boolean\n+isModal()\n+{\n+  return(modal);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Changes the modality of this dialog box.  This can only be done before\n+  * the peer is created.\n+  *\n+  * @param modal <code>true</code> to make this dialog box modal,\n+  * <code>false</code> to make it non-modal.\n+  */\n+public void\n+setModal(boolean modal)\n+{\n+  this.modal = modal;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests whether or not this dialog box is resizable.\n+  *\n+  * @return <code>true</code> if this dialog is resizable, <code>false</code>,\n+  * otherwise.\n+  */\n+public boolean\n+isResizable()\n+{\n+  return(resizable);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Changes the resizability of this dialog box.\n+  *\n+  * @param resizable <code>true</code> to make this dialog resizable,\n+  * <code>false</code> to make it non-resizable.\n+  */\n+public synchronized void\n+setResizable(boolean resizable)\n+{\n+  this.resizable = resizable;\n+  if (peer != null)\n+    {\n+      DialogPeer d = (DialogPeer) peer;\n+      d.setResizable (resizable);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Creates this object's native peer.\n+  */\n+public synchronized void\n+addNotify()\n+{\n+  if (peer == null)\n+    peer = getToolkit ().createDialog (this);\n+  super.addNotify ();\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Makes this dialog visible and brings it to the front.\n+  */\n+public void\n+show()\n+{\n+  super.show();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a debugging string for this component.\n+  * \n+  * @return A debugging string for this component.\n+  */\n+protected String\n+paramString()\n+{\n+  return (\"title+\" + title + \",modal=\" + modal +\n+\t  \",resizable=\" + resizable + \",\" + super.paramString());\n+}\n+\n+} // class Dialog\n+"}, {"sha": "247ee596d4d36afc627cb077c5d501ef9e5e44e5", "filename": "libjava/java/awt/FileDialog.java", "status": "modified", "additions": 290, "deletions": 106, "changes": 396, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FFileDialog.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FFileDialog.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFileDialog.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,119 +1,303 @@\n-/* Copyright (C) 2000, 2001  Free Software Foundation\n+/* FileDialog.java -- A filename selection dialog box\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n import java.awt.peer.FileDialogPeer;\n+import java.awt.peer.DialogPeer;\n+import java.awt.peer.WindowPeer;\n+import java.awt.peer.ContainerPeer;\n+import java.awt.peer.ComponentPeer;\n import java.io.FilenameFilter;\n \n /**\n- * @author Tom Tromey <tromey@redhat.com>\n- * @date April 20, 2001\n+  * This class implements a file selection dialog box widget.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@redhat.com>\n+  */\n+public class FileDialog extends Dialog implements java.io.Serializable\n+{\n+\n+/*\n+ * Static Variables\n+ */\n+\n+/**\n+  * Indicates that the purpose of the dialog is for opening a file.\n+  */\n+public static final int LOAD = 0;\n+\n+/**\n+  * Indicates that the purpose of the dialog is for saving a file.\n+  */\n+public static final int SAVE = 1;\n+\n+// Serialization constant\n+private static final long serialVersionUID = 5035145889651310422L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n  */\n \n-public class FileDialog extends Dialog\n+/**\n+  * @serial The directory for this file dialog.\n+  */\n+private String dir;\n+\n+/**\n+  * @serial The filename for this file dialog\n+  */\n+private String file;\n+\n+/**\n+  * @serial The filter for selecting filenames to display\n+  */\n+private FilenameFilter filter;\n+\n+/**\n+  * @serial The mode of this dialog, either <code>LOAD</code> or \n+  * <code>SAVE</code>.\n+  */\n+private int mode;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>FileDialog</code> with the \n+  * specified parent.  This dialog will have no title and will be for\n+  * loading a file.\n+  *\n+  * @param parent The parent frame for this dialog.\n+  */\n+public\n+FileDialog(Frame parent)\n+{\n+  this(parent, \"\", LOAD);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initialized a new instance of <code>FileDialog</code> with the\n+  * specified parent and title.  This dialog will be for opening a file.\n+  *\n+  * @param parent The parent frame for this dialog.\n+  * @param title The title for this dialog.\n+  */\n+public\n+FileDialog(Frame parent, String title)\n {\n-  public static int LOAD = 0;\n-  public static int SAVE = 1;\n-\n-  public FileDialog (Frame parent)\n-  {\n-    this (parent, \"\", LOAD);\n-  }\n-\n-  public FileDialog (Frame parent, String title)\n-  {\n-    this (parent, title, LOAD);\n-  }\n-\n-  public FileDialog (Frame parent, String title, int mode)\n-  {\n-    super (parent, title, true);\n-    if (mode != LOAD && mode != SAVE)\n-      throw new IllegalArgumentException (\"unknown mode: \" + mode);\n-    this.mode = mode;\n-  }\n-\n-  public void addNotify ()\n-  {\n-    if (peer == null)\n-      peer = getToolkit ().createFileDialog (this);\n-    super.addNotify ();\n-  }\n-\n-  public String getDirectory ()\n-  {\n-    return dir;\n-  }\n-\n-  public String getFile ()\n-  {\n-    return file;\n-  }\n-\n-  public FilenameFilter getFilenameFilter ()\n-  {\n-    return filter;\n-  }\n-\n-  public int getMode ()\n-  {\n-    return mode;\n-  }\n-\n-  protected String paramString ()\n-  {\n-    return (\"FileDialog[mode=\" + mode\n-\t    + \",dir=\" + dir\n-\t    + \",file=\" + file + \"]\");\n-  }\n-\n-  public void setDirectory (String dir)\n-  {\n-    this.dir = dir;\n-    if (peer != null)\n-      {\n-\tFileDialogPeer f = (FileDialogPeer) peer;\n-\tf.setDirectory (dir);\n-      }\n-  }\n-\n-  public void setFile (String file)\n-  {\n-    this.file = file;\n-    if (peer != null)\n-      {\n-\tFileDialogPeer f = (FileDialogPeer) peer;\n-\tf.setFile (file);\n-      }\n-  }\n-\n-  public void setFilenameFilter (FilenameFilter filter)\n-  {\n-    this.filter = filter;\n-    if (peer != null)\n-      {\n-\tFileDialogPeer f = (FileDialogPeer) peer;\n-\tf.setFilenameFilter (filter);\n-      }\n-  }\n-\n-  public void setMode (int mode)\n-  {\n-    if (mode != LOAD && mode != SAVE)\n-      throw new IllegalArgumentException (\"unknown mode: \" + mode);\n-    this.mode = mode;\n-    // FIXME: update peer?\n-  }\n-\n-  // Names here from serialization spec.\n-  private int mode;\n-  private String dir;\n-  private String file;\n-  private FilenameFilter filter;\n+  this(parent, title, LOAD);\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initialized a new instance of <code>FileDialog</code> with the\n+  * specified parent, title, and mode.\n+  *\n+  * @param parent The parent frame for this dialog.\n+  * @param title The title for this dialog.\n+  * @param mode The mode of the dialog, either <code>LOAD</code> or\n+  * <code>SAVE</code>.\n+  */\n+public\n+FileDialog(Frame parent, String title, int mode)\n+{\n+  super(parent, title, true);\n+\n+  if ((mode != LOAD) && (mode != SAVE))\n+    throw new IllegalArgumentException(\"Bad mode: \" + mode);\n+\n+  this.mode = mode;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Returns the mode of this dialog, either <code>LOAD</code> or\n+  * <code>SAVE</code>.\n+  *\n+  * @return The mode of this dialog.\n+  */\n+public int\n+getMode()\n+{\n+  return(mode);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the mode of this dialog to either <code>LOAD</code> or\n+  * <code>SAVE</code>.  This method is only effective before the native\n+  * peer is created.\n+  *\n+  * @param mode The new mode of this file dialog.\n+  */\n+public void\n+setMode(int mode)\n+{\n+  if ((mode != LOAD) && (mode != SAVE))\n+    throw new IllegalArgumentException(\"Bad mode: \" + mode);\n+\n+  this.mode = mode;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the directory for this file dialog.\n+  *\n+  * @return The directory for this file dialog.\n+  */\n+public String\n+getDirectory()\n+{\n+  return(dir);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the directory for this file dialog.\n+  *\n+  * @param dir The new directory for this file dialog.\n+  */\n+public synchronized void\n+setDirectory(String dir)\n+{\n+  this.dir = dir;\n+  if (peer != null)\n+    {\n+      FileDialogPeer f = (FileDialogPeer) peer;\n+      f.setDirectory (dir);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the file that is selected in this dialog.\n+  *\n+  * @return The file that is selected in this dialog.\n+  */\n+public String\n+getFile()\n+{\n+  return(file);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the selected file for this dialog.\n+  *\n+  * @param file The selected file for this dialog.\n+  */\n+public synchronized void\n+setFile(String file)\n+{\n+  this.file = file;\n+  if (peer != null)\n+    {\n+      FileDialogPeer f = (FileDialogPeer) peer;\n+      f.setFile (file);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the filename filter being used by this dialog.\n+  *\n+  * @param The filename filter being used by this dialog.\n+  */\n+public FilenameFilter\n+getFilenameFilter()\n+{\n+  return(filter);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the filename filter used by this dialog.\n+  *\n+  * @param filter The new filename filter for this file dialog box.\n+  */\n+public synchronized void\n+setFilenameFilter(FilenameFilter filter)\n+{\n+  this.filter = filter;\n+  if (peer != null)\n+    {\n+      FileDialogPeer f = (FileDialogPeer) peer;\n+      f.setFilenameFilter (filter);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Creates the native peer for this file dialog box.\n+  */\n+public void\n+addNotify()\n+{\n+  if (peer == null)\n+    peer = getToolkit ().createFileDialog (this);\n+  super.addNotify ();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a debugging string for this object.\n+  *\n+  * @return A debugging string for this object.\n+  */\n+protected String\n+paramString()\n+{\n+  return (\"dir=\" + dir + \",file=\" + file +\n+\t  \",mode=\" + mode + \",\" + super.paramString());\n+}\n+\n+} // class FileDialog \n+"}, {"sha": "266a358e30fdf5a45ab6aae4eb17b5a305abb8d5", "filename": "libjava/java/awt/Font.java", "status": "modified", "additions": 401, "deletions": 107, "changes": 508, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FFont.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FFont.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFont.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,120 +1,414 @@\n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+/* Font.java -- Font object\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libjava.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n-import java.util.Locale;\n+import java.awt.peer.FontPeer;\n+import java.util.StringTokenizer;\n+\n+/**\n+  * This class represents a windowing system font.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  */\n+public class Font implements java.io.Serializable\n+{\n+\n+/*\n+ * Static Variables\n+ */\n+\n+/**\n+  * Constant indicating a \"plain\" font.\n+  */\n+public static final int PLAIN = 0;\n+\n+/**\n+  * Constant indicating a \"bold\" font.\n+  */\n+public static final int BOLD = 1;\n+\n+/**\n+  * Constant indicating an \"italic\" font.\n+  */\n+public static final int ITALIC = 2;\n+\n+public static final int ROMAN_BASELINE = 0;\n+public static final int CENTER_BASELINE = 1;\n+public static final int HANGING_BASELINE = 2;\n+\n+// Serialization constant\n+private static final long serialVersionUID = -4206021311591459213L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * The name of this font\n+  */\n+protected String name;\n+\n+/**\n+  * The font style, which is a combination (by summing, not OR-ing) of\n+  * the font style constants in this class.\n+  */\n+protected int style;\n+\n+/**\n+  * The font point size.\n+  */\n+protected int size;\n+\n+protected float pointSize;\n+\n+// The native peer for this font\n+private FontPeer peer;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Static Methods\n+ */\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 16, 2000.\n+  * Creates a <code>Font</code> object from the specified string, which\n+  * is in one of the following formats:\n+  * <p>\n+  * <ul>\n+  * <li>fontname-style-pointsize\n+  * <li>fontname-style\n+  * <li>fontname-pointsize\n+  * <li>fontname\n+  * </ul>\n+  * <p>\n+  * The style should be one of BOLD, ITALIC, or BOLDITALIC.  The default\n+  * style if none is specified is PLAIN.  The default size if none\n+  * is specified is 12.\n+  */\n+public static Font\n+decode(String fontspec)\n+{\n+  String name = null;\n+  int style = PLAIN;\n+  int size = 12;\n+\n+  StringTokenizer st = new StringTokenizer(fontspec, \"-\");\n+  while (st.hasMoreTokens())\n+    {\n+      String token = st.nextToken();\n+      if (name == null)\n+        {\n+          name = token;\n+          continue;\n+        }\n+\n+      if (token.toUpperCase().equals(\"BOLD\"))\n+        {\n+          style = BOLD;\n+          continue;\n+        }\n+      if (token.toUpperCase().equals(\"ITALIC\"))\n+        {\n+          style = ITALIC;\n+          continue;\n+        }\n+      if (token.toUpperCase().equals(\"BOLDITALIC\"))\n+        {\n+          style = BOLD + ITALIC;\n+          continue;\n+        }\n+\n+      int tokenval = 0;\n+      try\n+        {\n+          tokenval = Integer.parseInt(token);\n+        }\n+      catch(Exception e) { ; }\n+\n+      if (tokenval != 0)\n+        size = tokenval;\n+    }\n+\n+  return(new Font(name, style, size));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a <code>Font</code> object from the passed property name.\n+  *\n+  * @param propname The name of the system property.\n+  * @param default Value to use if the property is not found.\n+  *\n+  * @return The requested font, or <code>default</code> if the property \n+  * not exist or is malformed.\n+  */\n+public static Font\n+getFont(String propname, Font defval)\n+{\n+  String propval = System.getProperty(propname);\n+  if (propval != null)\n+    return(decode(propval));\n+\n+  return(defval);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a <code>Font</code> object from the passed property name.\n+  *\n+  * @param propname The name of the system property.\n+  *\n+  * @return The requested font, or <code>null</code> if the property \n+  * not exist or is malformed.\n+  */\n+public static Font\n+getFont(String propname)\n+{\n+  return(getFont(propname, null));\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n  */\n \n /**\n- * Written using on-line Java Platform 1.2 API Specification, as well\n- * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n- * Status:  Stubbed; A very incomplete implementation.\n+  * Initializes a new instance of <code>Font</code> with the specified\n+  * attributes.\n+  *\n+  * @param name The name of the font.\n+  * @param style The font style.\n+  * @param size The font point size.\n+  */\n+public\n+Font(String name, int style, int size)\n+{\n+  this.name = name;\n+  this.style = style;\n+  this.size = size;\n+  this.pointSize = size;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n  */\n \n-public class Font\n-{\n-  // FIXME\n-\n-  public static final int PLAIN = 0;\n-  public static final int BOLD = 1;\n-  public static final int ITALIC = 2;\n-  public static final int ROMAN_BASELINE = 0;\n-  public static final int CENTER_BASELINE = 1;\n-  public static final int HANGING_BASELINE = 2;\n-  protected String name;\n-  protected int style;\n-  protected int size;\n-  protected float pointSize;\n-\n-  public Font(String name, int style, int size)\n-  {\n-    this.name = name;\n-    this.style = style & 0x3;\t// Only use lowest 2 bits.\n-    this.size = size;\n-    pointSize = size;\t\t// Assume some subclass can set a different val.\n-  }\n-\n-  public boolean isPlain()\n-  {\n-    if (style == PLAIN)\n-      return true;\n-\n-    return false;\n-  }\n-\n-  public boolean isBold()\n-  {\n-    if ((style & BOLD) == BOLD)\n-      return true;\n-\n-    return false;\n-  }\n-\n-  public boolean isItalic()\n-  {\n-    if ((style & ITALIC) == ITALIC)\n-      return true;\n-\n-    return false;\n-  }\n-  \n-  public String getName()\n-  {\n-    return name;\n-  }\n-\n-  public String getFamily()\n-  {\n-    // FIXME\n-    return null;\n-  }\n-\n-  public String getFamily(Locale l)\n-  {\n-    // FIXME\n-    return null;\n-  }\n-\n-  public int getStyle()\n-  {\n-    return style;\n-  }\n-\n-  public int getSize()\n-  {\n-    return size;\n-  }\n-\n-  public float getSize2D()\n-  {\n-    return pointSize;\n-  }\n-\n-  public static Font decode(String str) { return null; } // FIXME\n-  \n-  public String toString()\n-  {\n-    String style_str = \"\";\n-    if (isPlain())\n-      style_str = \"plain\";\n-    else \n-      {\n-        if (isBold())\n-\t  style_str += \"bold\";\t\n-\tif (isItalic())\n-\t  style_str += \"italic\";\n-      }\n-    return getClass().getName() + \"[family=\" + getFamily() + \",name=\" + \n-           getName() + \",style=\" + style_str + \",size=\" + getSize() + \"]\";\n-  }\n+/**\n+  * Returns the name of the font.\n+  *\n+  * @return The name of the font.\n+  */\n+public String\n+getName()\n+{\n+  return(name);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the style of the font.\n+  * \n+  * @return The font style.\n+  */\n+public int\n+getSize()\n+{\n+  return(size);\n+}\n+\n+public float\n+getSize2D()\n+{\n+  return pointSize;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests whether or not this is a plain font.  This will be true if\n+  * and only if neither the bold nor the italics style is set.\n+  *\n+  * @return <code>true</code> if this is a plain font, <code>false</code>\n+  * otherwise.\n+  */\n+public boolean\n+isPlain()\n+{\n+  if (style == PLAIN)\n+    return(true);\n+  else\n+    return(false);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests whether or not this font is bold.\n+  *\n+  * @return <code>true</code> if this font is bold, <code>false</code>\n+  * otherwise.\n+  */\n+public boolean\n+isBold()\n+{\n+  if ((style == BOLD) || (style == (BOLD+ITALIC)))\n+    return(true);\n+  else\n+    return(false);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests whether or not this font is italic.\n+  *\n+  * @return <code>true</code> if this font is italic, <code>false</code>\n+  * otherwise.\n+  */\n+public boolean\n+isItalic()\n+{\n+  if ((style == ITALIC) || (style == (BOLD+ITALIC)))\n+    return(true);\n+  else\n+    return(false);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the system specific font family name.\n+  *\n+  * @return The system specific font family name.\n+  */\n+public String\n+getFamily()\n+{\n+  // FIXME: How do I implement this?\n+  return(name);\n+}\n+\n+public int\n+getStyle()\n+{\n+  return style;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a native peer object for this font.\n+  *\n+  * @return A native peer object for this font.\n+  */\n+public FontPeer\n+getPeer()\n+{\n+  if (peer != null)\n+    return(peer);\n+\n+  peer = Toolkit.getDefaultToolkit().getFontPeer(name, style);\n+  return(peer);\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a hash value for this font.\n+  * \n+  * @return A hash for this font.\n+  */\n+public int\n+hashCode()\n+{\n+  return((new String(name + size + style)).hashCode());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests whether or not the specified object is equal to this font.  This\n+  * will be true if and only if:\n+  * <P>\n+  * <ul>\n+  * <li>The object is not <code>null</code>.\n+  * <li>The object is an instance of <code>Font</code>.\n+  * <li>The object has the same name, style, and size as this object.\n+  * </ul>\n+  *\n+  * @return <code>true</code> if the specified object is equal to this\n+  * object, <code>false</code> otherwise.\n+  */\n+public boolean\n+equals(Object obj)\n+{\n+  if (obj == null)\n+    return(false);\n+\n+  if (!(obj instanceof Font))\n+    return(false);\n+\n+  Font f = (Font)obj;\n+\n+  if (!f.name.equals(name))\n+    return(false);\n+\n+  if (f.size != size)\n+    return(false);\n+\n+  if (f.style != style)\n+    return(false);\n+\n+  return(true);\n+} \n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a string representation of this font.\n+  *\n+  * @return A string representation of this font.\n+  */\n+public String\n+toString()\n+{\n+  return(getClass().getName() + \"(name=\" + name + \",style=\" + style +\n+         \",size=\" + size + \")\");\n+}\n+\n+} // class Font \n+"}, {"sha": "890ffd164ed4ace7d4658c11a23ec6fbb17b1542", "filename": "libjava/java/awt/FontMetrics.java", "status": "modified", "additions": 329, "deletions": 137, "changes": 466, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FFontMetrics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FFontMetrics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFontMetrics.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,146 +1,338 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* FontMetrics.java -- Information about about a fonts display characteristics\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n+// FIXME: I leave many methods basically unimplemented.  This\n+// should be reviewed.\n+\n /**\n- * Status:  Stubbed; A very incomplete implementation.\n+  * This class returns information about the display characteristics of\n+  * a font.  It is abstract, and concrete subclasses should implement at\n+  * least the following methods:\n+  * <p>\n+  * <ul>\n+  * <li>getAscent\n+  * <li>getDescent\n+  * <li>getLeading()\n+  * <li>getMaxAdvance()\n+  * <li>charWidth(char)\n+  * <li>charsWidth(char[], int, int)\n+  * </ul>\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public abstract class FontMetrics implements java.io.Serializable\n+{\n+\n+/*\n+ * Static Variables\n  */\n \n-public class FontMetrics implements java.io.Serializable\n-{\n-  protected Font font;\n-  \n-  protected FontMetrics(Font font)\n-  {\n-    this.font = font;\n-  }\n-\n-  public Font getFont()\n-  {\n-    return font;\n-  }\n-\n-  public int getLeading()\n-  {\n-    return getMaxAscent() + getMaxDescent() - (getAscent() + getDescent());\n-  }\n-\n-  public int getAscent()\n-  {\n-    return getHeight() - (getDescent() + getLeading());\n-  }\n-\n-  public int getDescent()\n-  {\n-    return getHeight() - (getLeading() + getDescent());\n-  }\n-\n-  public int getHeight()\n-  {\n-    return getLeading() + getAscent() + getDescent();\n-  }\n-\n-  public int getMaxAscent()\n-  {\n-    return getAscent();\n-  }\n-\n-  public int getMaxDescent()\n-  {\n-    return getDescent();\n-  }\n-\n-  /* @deprecated Use getMaxDescent() instead. */\n-  public int getMaxDecent()\n-  {\n-    return getMaxDescent();\n-  }\n-\n-  /** @return max advance, or -1 if unknown. */\n-  public int getMaxAdvance()\n-  {\n-    return -1;\n-  }\n-\n-\n-  public int charWidth(int ch)\n-  {\n-    return charWidth((char) ch);\n-  }\n-\n-  public int charWidth(char ch)\n-  {\n-    Character chObj = new Character(ch);\n-    return stringWidth(chObj.toString());\n-  }\n-    \n-  public int stringWidth(String str)\n-  {\n-    return charsWidth(str.toCharArray(), 0, str.length());\n-  }\n-\n-  public int charsWidth(char[] data, int off, int len)\n-  {\n-    return stringWidth(new String(data, off, len));\n-  }\n-\n-  public int bytesWidth(byte[] data, int off, int len)\n-  {\n-    return stringWidth(new String(data, off, len));\n-  }\n-    \n-  public int[] getWidths()\n-  {\n-    int[] widths = new int[256];\n-    for (char c=0; c<256; c++) widths[c] = charWidth(c);\n-    return widths;\n-  }\n-\n-  public boolean hasUniformLineMetrics()\n-  {\n-    // FIXME\n-    return false;\n-  }\n-\n-  // Don't have LineMetrics yet...\n-  /*\n-  public LineMetrics getLineMetrics(String str, Graphics context)\n-\n-  public LineMetrics getLineMetrics(String str, int beginIndex, int limit,\n-                                    Graphics context)\n-\n-  public LineMetrics getLineMetrics(char[] chars, int beginIndex, int limit,\n-                                    Graphics context)\n-\n-  public LineMetrics getLineMetrics(CharacterIterator ci, int beginIndex,\n-\t\t\t\t    int limit, Graphics context)\n-  */\n-\n-  // Don't have Java2D yet.\n-  /*\n-  public Rectangle2D getStringBounds(String str, Graphics context)\n-\n-  public Rectangle2D getStringBounds(String str, int beginIndex, int limit,\n-                                     Graphics context)\n-\n-  public Rectangle2D getStringBounds(char[] chars, int beginIndex, int limit,\n-                                     Graphics context)\n-\n-  public Rectangle2D getStringBounds(CharacterIterator ci, int beginIndex,\n-                                     int limit, Graphics context)\n-\n-  public Rectangle2D getMaxCharBounds(Graphics context)\n-  */\n-\n-  public String toString()\n-  {\n-    return this.getClass() + \"[font=\" + font + \",ascent=\" + getAscent() \n-\t   + \",descent=\" + getDescent() + \",height=\" + getHeight() + \"]\";\n-  }\n+// Serialization constant\n+private static final long serialVersionUID = 1681126225205050147L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * This is the font for which metrics will be returned.\n+  */\n+protected Font font;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>FontMetrics</code> for the\n+  * specified font.\n+  *\n+  * @param font The font to return metric information for.\n+  */\n+protected\n+FontMetrics(Font font)\n+{\n+  this.font = font;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Returns the font that this object is creating metric information fo.\n+  *\n+  * @return The font for this object.\n+  */\n+public Font\n+getFont()\n+{\n+  return(font);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the leading, or spacing between lines, for this font.\n+  *\n+  * @return The font leading.\n+  */\n+public int\n+getLeading()\n+{\n+  return(0);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the ascent of the font, which is the distance from the base\n+  * to the top of the majority of characters in the set.  Some characters\n+  * can exceed this value however.\n+  *\n+  * @return The font ascent.\n+  */\n+public int\n+getAscent()\n+{\n+  return(1);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the descent of the font, which is the distance from the base\n+  * to the bottom of the majority of characters in the set.  Some characters\n+  * can exceed this value however.\n+  *\n+  * @return The font descent.\n+  */\n+public int\n+getDescent()\n+{\n+  return(1);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the height of a line in this font.  This will be the sum\n+  * of the leading, the ascent, and the descent.\n+  *\n+  * @return The height of the font.\n+  */\n+public int\n+getHeight()\n+{\n+  return(getAscent() + getDescent() + getLeading());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the maximum ascent value.  This is the maximum distance any\n+  * character in the font rised above the baseline.\n+  *\n+  * @return The maximum ascent for this font.\n+  */\n+public int\n+getMaxAscent()\n+{\n+  return(getAscent());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the maximum descent value.  This is the maximum distance any\n+  * character in the font extends below the baseline.\n+  *\n+  * @return The maximum descent for this font.\n+  */\n+public int\n+getMaxDescent()\n+{\n+  return(getDescent());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the maximum descent value.  This is the maximum distance any\n+  * character in the font extends below the baseline.\n+  *\n+  * @return The maximum descent for this font.\n+  *\n+  * @deprecated This method is deprecated in favor of\n+  * <code>getMaxDescent()</code>.\n+  */\n+public int\n+getMaxDecent()\n+{\n+  return(getMaxDescent());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the width of the widest character in the font.\n+  *\n+  * @return The width of the widest character in the font.\n+  */\n+public int\n+getMaxAdvance()\n+{\n+  return(-1);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the width of the specified character.\n+  *\n+  * @param ch The character to return the width of.\n+  *\n+  * @return The width of the specified character.\n+  */\n+public int\n+charWidth(int ch)\n+{\n+  return(charWidth((char)ch));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the width of the specified character.\n+  *\n+  * @param ch The character to return the width of.\n+  *\n+  * @return The width of the specified character.\n+  */\n+public int\n+charWidth(char ch)\n+{\n+  return(1);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the total width of the specified string\n+  *\n+  * @param str The string to return the width of.\n+  *\n+  * @return The width of the string.\n+  */\n+public int\n+stringWidth(String str)\n+{\n+  char[] buf = new char[str.length()];\n+  str.getChars(0, str.length(), buf, 0);\n+\n+  return(charsWidth(buf, 0, buf.length));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the total width of the specified character array.\n+  *\n+  * @param buf The character array containing the data.\n+  * @param offset The offset into the array to start calculating from.\n+  * @param len The total number of bytes to process.\n+  *\n+  * @return The width of the requested characters.\n+  */\n+public int\n+charsWidth(char buf[], int offset, int len)\n+{\n+  int total_width = 0;\n+  for (int i = offset; i < len; i++)\n+    total_width = charWidth(buf[i]);\n+\n+  return(total_width);\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the total width of the specified byte array.\n+  *\n+  * @param buf The byte array containing the data.\n+  * @param offset The offset into the array to start calculating from.\n+  * @param len The total number of bytes to process.\n+  *\n+  * @return The width of the requested characters.\n+  */\n+public int\n+bytesWidth(byte buf[], int offset, int len)\n+{\n+  int total_width = 0;\n+  for (int i = offset; i < len; i++)\n+    total_width = charWidth((char)buf[i]);\n+\n+  return(total_width);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the widths of the first 256 characters in the font.\n+  *\n+  * @return The widths of the first 256 characters in the font.\n+  */\n+public int[]\n+getWidths()\n+{\n+  return(new int[256]);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a string representation of this object.\n+  *\n+  * @return A string representation of this object.\n+  */\n+public String\n+toString()\n+{\n+  return (this.getClass() + \"[font=\" + font + \",ascent=\" + getAscent() \n+\t  + \",descent=\" + getDescent() + \",height=\" + getHeight() + \"]\");\n+}\n+\n+} // class FontMetrics \n+"}, {"sha": "4e263360169acbb16618aa92981df8cfdb446738", "filename": "libjava/java/awt/Image.java", "status": "modified", "additions": 164, "deletions": 29, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FImage.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,51 +1,186 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Image.java -- Java class for images\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n-import java.awt.image.ImageObserver;\n-import java.awt.image.ImageProducer;\n+import java.awt.image.*;\n \n /**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 15, 2000.\n+  * This is the abstract superclass of all image objects in Java.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public abstract class Image\n+{\n+\n+/*\n+ * Static Variables\n  */\n \n /**\n- * Written using on-line Java Platform 1.2 API Specification, as well\n- * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n- * Status:  Mostly complete, but look for FIXMEs.\n+  * Constant indicating that the default scaling algorithm should be used.\n+  */\n+public static final int SCALE_DEFAULT = 1;\n+\n+/**\n+  * Constant indicating that a fast scaling algorithm should be used.\n+  */\n+public static final int SCALE_FAST = 2;\n+\n+/**\n+  * Constant indicating that a smooth scaling algorithm should be used.\n+  */\n+public static final int SCALE_SMOOTH = 4;\n+\n+/**\n+  * Constant indicating that the <code>ReplicateScaleFilter</code> class\n+  * algorithm should be used for scaling.\n+  */\n+public static final int SCALE_REPLICATE = 8; \n+\n+/**\n+  * Constant indicating that the area averaging scaling algorithm should be\n+  * used.\n+  */\n+public static final int SCALE_AREA_AVERAGING = 16;\n+\n+/**\n+  * This variable is returned whenever a property that is not defined\n+  * is requested.\n+  */\n+public static final Object UndefinedProperty = Image.class;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n  */\n \n-public abstract class Image extends Object\n+/**\n+  * A default constructor for subclasses.\n+  */\n+public \n+Image()\n {\n-  public static final Object UndefinedProperty = new Object();\n+}\n \n-  public static final int SCALE_DEFAULT        = 1<<0,\n-                          SCALE_FAST           = 1<<1,\n-                          SCALE_SMOOTH         = 1<<2,\n-                          SCALE_REPLICATE      = 1<<3,\n-                          SCALE_AREA_AVERAGING = 1<<4;\n+/*************************************************************************/\n \n-  public abstract int getWidth(ImageObserver observer);\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Returns the width of the image, or -1 if it is unknown.  If the\n+  * image width is unknown, the observer object will be notified when\n+  * the value is known.\n+  *\n+  * @param observer The image observer for this object.\n+  */\n+public abstract int\n+getWidth(ImageObserver observer);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the height of the image, or -1 if it is unknown.  If the\n+  * image height is unknown, the observer object will be notified when\n+  * the value is known.\n+  *\n+  * @param observer The image observer for this object.\n+  */\n+public abstract int\n+getHeight(ImageObserver observer);\n+\n+/*************************************************************************/\n \n-  public abstract int getHeight(ImageObserver observer);\n+/**\n+  * Returns the image producer object for this object.\n+  *\n+  * @return The image producer for this object.\n+  */\n+public abstract ImageProducer\n+getSource();\n \n-  public abstract ImageProducer getSource();\n-  \n-  public abstract Graphics getGraphics();\n+/*************************************************************************/\n+\n+/**\n+  * Returns a graphics context object for drawing an off-screen object.\n+  * This method is only valid for off-screen objects.\n+  *\n+  * @return A graphics context object for an off-screen object.\n+  */\n+public abstract Graphics\n+getGraphics();\n \n-  public abstract Object getProperty(String name, ImageObserver observer);\n+/*************************************************************************/\n \n-  public Image getScaledInstance(int width, int height, int hints)\n+/**\n+  * This method requests a named property for an object.  The value of the\n+  * property is returned. The value <code>UndefinedProperty</code> is\n+  * returned if there is no property with the specified name.  The value\n+  * <code>null</code> is returned if the properties for the object are\n+  * not yet known.  In this case, the specified image observer is notified\n+  * when the properties are known.\n+  *\n+  * @param name The requested property name.\n+  * @param observer The image observer for this object.\n+  */\n+public abstract Object\n+getProperty(String name, ImageObserver observer);\n+\n+/*************************************************************************/\n+\n+/**\n+  * Scales the image to the requested dimension.\n+  * \n+  * XXX: FIXME\n+  * \n+  * @param width The width of the scaled image.\n+  * @param height The height of the scaled image.\n+  * @param flags A value indicating the algorithm to use, which will be\n+  * set from contants defined in this class.\n+  *\n+  * @return The scaled <code>Image</code> object.\n+  */\n+public Image\n+getScaledInstance(int width, int height, int flags)\n   {\n-    throw new UnsupportedOperationException(\"FIXME: not implemented yet\");\n+    return null;\n   }\n \n-  public abstract void flush();\n-}\n+/*************************************************************************/\n+\n+/**\n+  * Flushes (that is, destroys) any resources used for this image.  This\n+  * includes the actual image data.\n+  */\n+public abstract void\n+flush();\n+\n+} // class Image\n+"}, {"sha": "cd2439058ee0fcae6ba9b0617a69745b3f1f2dcc", "filename": "libjava/java/awt/ImageMediaEntry.java", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FImageMediaEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FImageMediaEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FImageMediaEntry.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -0,0 +1,75 @@\n+/* ImageMediaEntry.java -- A media entry type for images.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.awt;\n+\n+import java.awt.image.ImageObserver;\n+import java.io.Serializable;\n+\n+/**\n+  * A concrete MediaEntry subtype for images.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+class ImageMediaEntry extends MediaEntry implements ImageObserver,\n+                                                                 Serializable\n+{\n+\n+private Image image;\n+private int width;\n+private int height;\n+\n+ImageMediaEntry(MediaTracker tracker, Image image, int ID, int width, int height)\n+{\n+  super(tracker, ID);\n+  this.image = image;\n+  this.width = width;\n+  this.height = height; \n+}\n+\n+public Object\n+getMedia()\n+{\n+  return(image.getSource()); // FIXME: Is this really right?\n+}\n+\n+public void\n+startLoad()\n+{\n+  int status = getStatus();\n+//  status |= MediaEntry.LOADSTARTED;\n+}\n+\n+public boolean\n+imageUpdate(Image image, int flags, int x, int y, int width, int height)\n+{\n+  // implement me\n+  return true;\n+}\n+\n+} // class ImageMediaEntry\n+"}, {"sha": "20857d560bd8e89cd6f1aef309a1fa3120459496", "filename": "libjava/java/awt/Insets.java", "status": "modified", "additions": 155, "deletions": 48, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FInsets.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FInsets.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FInsets.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,56 +1,163 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Insets.java -- Information about a container border.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n+/**\n+  * This class represents the \"margin\" or space around a container.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n public class Insets implements Cloneable, java.io.Serializable\n {\n-  public int top;\n-  public int left;\n-  public int bottom;\n-  public int right;\n-  \n-  public Insets(int top, int left, int bottom, int right)\n-  {\n-    this.top = top;\n-    this.left = left;\n-    this.bottom = bottom;\n-    this.right = right;  \n-  }\n-\n-  public boolean equals(Object obj)\n-  {\n-    if (obj instanceof Insets)\n-      {\n-        Insets i = (Insets) obj;\n-\treturn (i.top == top \n-        \t&& i.left == left \n-\t\t&& i.bottom == bottom \n-\t\t&& i.right == right);    \n-      }\n-    return false;\n-  }\n-\n-  public int hashCode()\n-  {\n-    // FIXME: what is the correct algorithm for this?\n-    return (top * (2 * left) * (3 * right) * (4 * bottom));\n-  }\n-\n-  public String toString()\n-  {\n-    return (getClass() + \"[top=\" + top + \",left=\" + left + \",bottom=\" \n-            + bottom + \",right=\" + right + \"]\");\n-  }\n-  \n-  public Object clone()\n-  {\n-    Insets r = new Insets(top, left, bottom, right);\n-    return r;\n-  }\n+\n+/*\n+ * Instance Variable\n+ */\n+\n+/**\n+  * @serial The top inset\n+  */\n+public int top;\n+\n+/**\n+  * @serial This bottom inset\n+  */\n+public int bottom;\n+\n+/**\n+  * @serial The left inset\n+  */\n+public int left;\n+\n+/**\n+  * @serial The right inset\n+  */\n+public int right;\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Inset</code> with the specified\n+  * inset values.\n+  *\n+  * @param top The top inset\n+  * @param left The left inset\n+  * @param bottom The bottom inset\n+  * @param right The right inset\n+  */\n+public\n+Insets(int top, int left, int bottom, int right)\n+{\n+  this.top = top;\n+  this.left = left;\n+  this.bottom = bottom;\n+  this.right = right;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Tests whether this object is equal to the specified object.  This will\n+  * be true if and only if the specified object:\n+  * <p>\n+  * <ul>\n+  * <li>Is not <code>null</code>.\n+  * <li>Is an instance of <code>Insets</code>.\n+  * <li>Has the same top, bottom, left, and right inset values as this object.\n+  * </ul>\n+  *\n+  * @param obj The object to test against.\n+  *\n+  * @return <code>true</code> if the specified object is equal to this\n+  * one, <code>false</code> otherwise.\n+  */\n+public boolean\n+equals(Object obj)\n+{\n+  if (!(obj instanceof Insets))\n+    return(false);\n+\n+  Insets i = (Insets)obj;\n+\n+  if (i.top != top)\n+    return(false);\n+  if (i.bottom != bottom)\n+    return(false);\n+  if (i.left != left)\n+    return(false);\n+  if (i.right != right)\n+    return(false);\n+\n+  return(true);\n+}\n+\n+public int\n+hashCode()\n+{\n+  return top + bottom + left + right;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a string representation of this object.\n+  *\n+  * @return A string representation of this object.\n+  */\n+public String\n+toString()\n+{\n+  return(getClass().getName() + \"(top=\" + top + \",bottom=\" + bottom +\n+         \",left=\" + left + \",right=\" + right + \")\");\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a copy of this object.\n+  *\n+  * @return A copy of this object.\n+  */\n+public Object\n+clone()\n+{\n+  try\n+    {\n+      return(super.clone());\n+    }\n+  catch(Exception e)\n+    {\n+      return(null);\n+    }\n }\n+\n+} // class Insets "}, {"sha": "3f972aa2999d25fed7817043963c10ab665c3b31", "filename": "libjava/java/awt/Label.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FLabel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FLabel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FLabel.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -225,8 +225,8 @@ public class Label extends Component implements java.io.Serializable\n protected String\n paramString()\n {\n-  return(getClass().getName() + \"(text=\" + getText() + \",alignment=\" +\n-         getAlignment() + \")\");\n+  return (\"text=\" + getText() + \",alignment=\" +\n+\t  getAlignment() + \",\" + super.paramString());\n }\n \n } // class Label"}, {"sha": "c4fa0aa879b49442e51cddce51ac2736d0a3bad3", "filename": "libjava/java/awt/List.java", "status": "modified", "additions": 982, "deletions": 431, "changes": 1413, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FList.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,443 +1,994 @@\n-/* Copyright (C) 2000, 2001  Free Software Foundation\n+/* List.java -- A listbox widget\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n+import java.io.Serializable;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n import java.awt.peer.ListPeer;\n-import java.awt.event.*;\n+import java.awt.peer.ComponentPeer;\n import java.util.Vector;\n \n /**\n- * @author Tom Tromey <tromey@redhat.com>\n- * @date April 17, 2001\n- * Status: incomplete\n+  * Class that implements a listbox widget\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class List extends Component implements ItemSelectable, Serializable\n+{\n+\n+/*\n+ * Static Variables\n+ */\n+\n+// Serialization constant\n+private static final long serialVersionUID = -3304312411574666869L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+// FIXME: Need read/writeObject\n+\n+/**\n+  * @serial The items in the list.\n+  */\n+private Vector items = new Vector();\n+\n+/**\n+  * @serial Indicates whether or not multiple items can be selected\n+  * simultaneously.\n+  */\n+private boolean multipleMode;\n+\n+/**\n+  * @serial The number of rows in the list.  This is set on creation\n+  * only and cannot be modified.\n+  */\n+private int rows;\n+\n+/**\n+  * @serial An array of the item indices that are selected.\n+  */\n+private int[] selected;\n+\n+/**\n+  * @serial An index value used by <code>makeVisible()</code> and\n+  * <code>getVisibleIndex</code>.\n+  */\n+private int visibleIndex;\n+\n+// The list of ItemListeners for this object.\n+private ItemListener item_listeners;\n+\n+// The list of ActionListeners for this object.\n+private ActionListener action_listeners;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>List</code> with no visible lines\n+  * and multi-select disabled.\n+  */\n+public\n+List()\n+{\n+  this(4, false);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>List</code> with the specified\n+  * number of visible lines and multi-select disabled.\n+  *\n+  * @param lines The number of visible lines in the list.\n+  */\n+public\n+List(int rows)\n+{\n+  this(rows, false);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>List</code> with the specified\n+  * number of lines and the specified multi-select setting.\n+  *\n+  * @param lines The number of visible lines in the list.\n+  * @param multipleMode <code>true</code> if multiple lines can be selected\n+  * simultaneously, <code>false</code> otherwise.\n+  */\n+public \n+List(int rows, boolean multipleMode)\n+{\n+  this.rows = rows;\n+  this.multipleMode = multipleMode;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n  */\n \n-public class List extends Component implements ItemSelectable\n-{\n-  /** Creates a new scrolling list with four rows.\n-   * Initially, multiple selections are not allowed.\n-   */\n-  public List ()\n-  {\n-    this (4, false);\n-  }\n-\n-  /** Create a new scrolling list with the indicated number of rows.\n-   * Initially, multiple selections are not allowed.\n-   * @param rows Number of rows\n-   */\n-  public List (int rows)\n-  {\n-    this (rows, false);\n-  }\n-\n-  /** Create a new scrolling list with the indicated number of rows.\n-   * @param rows Number of rows\n-   * @param multiple True if multiple selections allowed\n-   */\n-  public List (int rows, boolean multiple)\n-  {\n-    this.rows = rows;\n-    this.multipleMode = multiple;\n-  }\n-\n-  /** Create the peer if it does not already exist.  */\n-  public void addNotify ()\n-  {\n-    if (peer != null)\n-      peer = getToolkit ().createList (this);\n-    super.addNotify ();\n-  }\n-\n-  public int getItemCount ()\n-  {\n-    return items.size ();\n-  }\n-\n-  /** @deprecated Use getItemCount() instead.  */\n-  public int countItems ()\n-  {\n-    return getItemCount ();\n-  }\n-\n-  public String getItem (int index)\n-  {\n-    return (String) items.elementAt (index);\n-  }\n-\n-  public String[] getItems ()\n-  {\n-    String[] els = new String[items.size ()];\n-    items.copyInto (els);\n-    return els;\n-  }\n-\n-  public void add (String item)\n-  {\n-    add (item, items.size ());\n-  }\n-\n-  /** @deprecated Use add() instead.  */\n-  public void addItem (String item)\n-  {\n-    add (item);\n-  }\n-\n-  public void add (String item, int index)\n-  {\n-    items.insertElementAt (item, index);\n-    if (peer != null)\n-      {\n-\tListPeer l = (ListPeer) peer;\n-\tl.add (item, index);\n-      }\n-  }\n-\n-  /** @deprecated Use add() instead.  */\n-  public void addItem (String item, int index)\n-  {\n-    add (item, index);\n-  }\n-\n-  public void replaceItem (String item, int index)\n-  {\n-    items.setElementAt (item, index);\n-    if (peer != null)\n-      {\n-\tListPeer l = (ListPeer) peer;\n-\tl.delItems (index, index);\n-\tl.add (item, index);\n-      }\n-  }\n-\n-  public void removeAll ()\n-  {\n-    items.clear ();\n-    if (peer != null)\n-      {\n-\tListPeer l = (ListPeer) peer;\n-\tl.removeAll ();\n-      }\n-  }\n-\n-  /** @deprecated Use removeAll() instead.  */\n-  public void clear ()\n-  {\n-    removeAll ();\n-  }\n-\n-  public void remove (String item)\n-  {\n-    remove (items.indexOf (item));\n-  }\n-\n-  public void remove (int index)\n-  {\n-    items.removeElementAt (index);\n-    if (peer != null)\n-      {\n-\tListPeer l = (ListPeer) peer;\n-\tl.delItems (index, index);\n-      }\n-  }\n-\n-  /** @deprecated Use remove() instead.  */\n-  public void delItem (int index)\n-  {\n-    remove (index);\n-  }\n-\n-  public int getSelectedIndex ()\n-  {\n-    if (peer != null)\n-      {\n-\tListPeer l = (ListPeer) peer;\n-\tselected = l.getSelectedIndexes ();\n-      }\n-\n-    if (selected == null || selected.length > 1)\n-      return -1;\n-    return selected[0];\n-  }\n-\n-  public int[] getSelectedIndexes ()\n-  {\n-    if (peer != null)\n-      {\n-\tListPeer l = (ListPeer) peer;\n-\tselected = l.getSelectedIndexes ();\n-      }\n-    return selected;\n-  }\n-\n-  public String getSelectedItem ()\n-  {\n-    int i = getSelectedIndex ();\n-    return i == -1 ? null : (String) items.elementAt (i);\n-  }\n-\n-  public String[] getSelectedItems ()\n-  {\n-    int[] is = getSelectedIndexes ();\n-    if (is == null)\n-      return null;\n-    String[] r = new String[is.length];\n-    for (int i = 0; i < is.length; ++i)\n-      r[i] = (String) items.elementAt (is[i]);\n-    return r;\n-  }\n-\n-  public Object[] getSelectedObjects ()\n-  {\n-    return getSelectedItems ();\n-  }\n-\n-  public void select (int index)\n-  {\n-    if (peer != null)\n-      {\n-\tListPeer l = (ListPeer) peer;\n-\tl.select (index);\n-      }\n-    else if (selected == null)\n-      {\n-\tselected = new int[1];\n-\tselected[0] = index;\n-      }\n-    else\n-      {\n-\tint i;\n-\tfor (i = 0; i < selected.length; ++i)\n-\t  {\n-\t    if (selected[i] == index)\n-\t      return;\n-\t    if (selected[i] > index)\n-\t      break;\n-\t  }\n-\n-\tint[] ns = new int[selected.length + 1];\n-\tSystem.arraycopy (selected, 0, ns, 0, i);\n-\tns[i] = index;\n-\tSystem.arraycopy (selected, i, ns, i + 1, selected.length - i);\n-\n-\tselected = ns;\n-      }\n-  }\n-\n-  public void deselect (int index)\n-  {\n-    if (peer != null)\n-      {\n-\tListPeer l = (ListPeer) peer;\n-\tl.deselect (index);\n-      }\n-    else if (selected != null)\n-      {\n-\tint i;\n-\tfor (i = 0; i < selected.length; ++i)\n-\t  {\n-\t    if (selected[i] == index)\n-\t      break;\n-\t  }\n-\tif (i < selected.length)\n-\t  {\n-\t    int[] ns = new int[selected.length - 1];\n-\t    System.arraycopy (selected, 0, ns, 0, i);\n-\t    System.arraycopy (selected, i + 1, ns, i, selected.length - i);\n-\t    selected = ns;\n-\t  }\n-      }\n-  }\n-\n-  public boolean isIndexSelected (int index)\n-  {\n-    int[] is = getSelectedIndexes ();\n-    for (int i = 0; i < is.length; ++i)\n-      {\n-\tif (is[i] == index)\n-\t  return true;\n-      }\n-    return false;\n-  }\n-\n-  /** @deprecated Use isIndexSelected().  */\n-  public boolean isSelected (int index)\n-  {\n-    return isIndexSelected (index);\n-  }\n-\n-  public int getRows ()\n-  {\n-    return rows;\n-  }\n-\n-  public boolean isMultipleMode ()\n-  {\n-    return multipleMode;\n-  }\n-\n-  /** @deprecated Use isMultipleMode().  */\n-  public boolean allowsMultipleSelections ()\n-  {\n-    return isMultipleMode ();\n-  }\n-\n-  public void setMultipleMode (boolean multiple)\n-  {\n-    this.multipleMode = multiple;\n-    if (peer != null)\n-      {\n-\tListPeer l = (ListPeer) peer;\n-\tl.setMultipleMode (multiple);\n-      }\n-  }\n-\n-  /** @deprecated Use setMultipleMode().  */\n-  public void setMultipleSelections (boolean multiple)\n-  {\n-    setMultipleMode (multiple);\n-  }\n-\n-  public int getVisibleIndex ()\n-  {\n-    return visibleIndex;\n-  }\n-\n-  public void makeVisible (int index)\n-  {\n-    visibleIndex = index;\n-    if (peer != null)\n-      {\n-\tListPeer l = (ListPeer) peer;\n-\tl.makeVisible (index);\n-      }\n-  }\n-\n-  public Dimension getPreferredSize (int rows)\n-  {\n-    return null;\t\t// FIXME\n-  }\n-\n-  /** @deprecated Use getPreferredSize(int).  */\n-  public Dimension preferredSize (int rows)\n-  {\n-    return getPreferredSize (rows);\n-  }\n-\n-  public Dimension getPreferredSize ()\n-  {\n-    return null;\t\t// FIXME\n-  }\n-\n-  /** @deprecated Use getPreferredSize().  */\n-  public Dimension preferredSize ()\n-  {\n-    return getPreferredSize ();\n-  }\n-\n-  public Dimension getMinimumSize (int rows)\n-  {\n-    return null;\t\t// FIXME\n-  }\n-\n-  /** @deprecated Use getMinimumSize(int).  */\n-  public Dimension minimumSize (int rows)\n-  {\n-    return getMinimumSize (rows);\n-  }\n-  \n-  public Dimension getMinimumSize ()\n-  {\n-    return null;\t\t// FIXME\n-  }\n-\n-  /** @deprecated Use getMinimumSize().  */\n-  public Dimension minimumSize ()\n-  {\n-    return getMinimumSize ();\n-  }\n-\n-  public void addItemListener (ItemListener listen)\n-  {\n-    item_listeners = AWTEventMulticaster.add (item_listeners, listen);\n-  }\n-\n-  public void removeItemListener (ItemListener listen)\n-  {\n-    item_listeners = AWTEventMulticaster.remove (item_listeners, listen);\n-  }\n-\n-  public void addActionListener (ActionListener listen)\n-  {\n-    action_listeners = AWTEventMulticaster.add (action_listeners, listen);\n-  }\n-\n-  public void removeActionListener (ActionListener listen)\n-  {\n-    action_listeners = AWTEventMulticaster.remove (action_listeners, listen);\n-  }\n-\n-  protected void processEvent (AWTEvent e)\n-  {\n-    if (e instanceof ItemEvent)\n-      processItemEvent ((ItemEvent) e);\n-    else if (e instanceof ActionEvent)\n-      processActionEvent ((ActionEvent) e);\n-    else\n-      super.processEvent (e);\n-  }\n-\n-  protected void processItemEvent (ItemEvent e)\n-  {\n-    if (item_listeners != null)\n-      item_listeners.itemStateChanged (e);\n-  }\n-\n-  protected void processActionEvent (ActionEvent e)\n-  {\n-    if (action_listeners != null)\n-      action_listeners.actionPerformed (e);\n-  }\n-\n-  protected String paramString ()\n-  {\n-    return (\"List[multiple=\" + multipleMode\n-\t    + \",rows=\" + rows\n-\t    + \"]\");\n-  }\n-\n-  /** @deprecated */\n-  public void delItems (int start, int end)\n-  {\n-    for (int i = end; i >= start; --i)\n-      items.removeElementAt (i);\n-    if (peer != null)\n-      {\n-\tListPeer l = (ListPeer) peer;\n-\tl.delItems (start, end);\n-      }\n-  }\n-\n-  // Vector of items in the list.\n-  private Vector items;\n-  // True if multiple selection mode enabled.\n-  private boolean multipleMode;\n-  // Number of rows.\n-  private int rows;\n-  // Array of indices of selected items.  When there is no peer, we\n-  // maintain this in place.  When there is a peer, the peer maintains\n-  // the list and we ask for it whenever needed.\n-  private int[] selected;\n-  // Value used by makeVisible().\n-  private int visibleIndex;\n-\n-  // Listeners.\n-  private ActionListener action_listeners;\n-  private ItemListener item_listeners;\n+/**\n+  * Returns the number of items in this list.\n+  *\n+  * @return The number of items in this list.\n+  */\n+public int\n+getItemCount()\n+{\n+  return(items.size());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the number of items in this list.\n+  *\n+  * @return The number of items in this list.\n+  *\n+  * @deprecated This method is deprecated in favor of\n+  * <code>getItemCount()</code>\n+  */\n+public int\n+countItems()\n+{\n+  return(getItemCount());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the complete list of items.\n+  *\n+  * @return The complete list of items in the list.\n+  */\n+public synchronized String[]\n+getItems()\n+{\n+  String[] l_items = new String[getItemCount()];\n+ \n+  items.copyInto(l_items);\n+  return(l_items);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the item at the specified index.\n+  *\n+  * @param index The index of the item to retrieve.\n+  *\n+  * @exception IndexOutOfBoundsException If the index value is not valid.\n+  */\n+public String\n+getItem(int index)\n+{\n+  return((String)items.elementAt(index));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the number of visible rows in the list.\n+  *\n+  * @return The number of visible rows in the list.\n+  */\n+public int\n+getRows()\n+{\n+  return(rows);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests whether or not multi-select mode is enabled.\n+  *\n+  * @return <code>true</code> if multi-select mode is enabled,\n+  * <code>false</code> otherwise.\n+  */\n+public boolean\n+isMultipleMode()\n+{\n+  return(multipleMode);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests whether or not multi-select mode is enabled.\n+  *\n+  * @return <code>true</code> if multi-select mode is enabled,\n+  * <code>false</code> otherwise.\n+  *\n+  * @deprecated This method is deprecated in favor of \n+  * <code>isMultipleMode()</code>.\n+  */\n+public boolean\n+allowsMultipleSelections()\n+{\n+  return(multipleMode);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method enables or disables multiple selection mode for this\n+  * list.\n+  *\n+  * @param multipleMode <code>true</code> to enable multiple mode,\n+  * <code>false</code> otherwise.\n+  */\n+public void\n+setMultipleMode(boolean multipleMode)\n+{\n+  this.multipleMode = multipleMode;\n+  if (peer != null)\n+    {\n+      ListPeer l = (ListPeer) peer;\n+      l.setMultipleMode (multipleMode);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method enables or disables multiple selection mode for this\n+  * list.\n+  *\n+  * @param multipleMode <code>true</code> to enable multiple mode,\n+  * <code>false</code> otherwise.\n+  */\n+public void\n+setMultipleSelections(boolean multipleMode)\n+{\n+  setMultipleMode(multipleMode);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the minimum size of this component.\n+  *\n+  * @return The minimum size of this component.\n+  */\n+public Dimension\n+getMinimumSize()\n+{\n+  return(getMinimumSize(rows));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the minimum size of this component.\n+  *\n+  * @return The minimum size of this component.\n+  *\n+  * @deprecated This method is deprecated in favor of\n+  * <code>getMinimumSize</code>.\n+  */\n+public Dimension\n+minimumSize()\n+{\n+  return(getMinimumSize(rows));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the minimum size of this component assuming it had the specified\n+  * number of rows.\n+  *\n+  * @param rows The number of rows to size for.\n+  *\n+  * @return The minimum size of this component.\n+  */\n+public Dimension\n+getMinimumSize(int rows)\n+{\n+  ListPeer lp = (ListPeer)getPeer();\n+  if (lp != null)\n+    return(lp.minimumSize(rows));\n+  else\n+    return(new Dimension(0,0));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the minimum size of this component assuming it had the specified\n+  * number of rows.\n+  *\n+  * @param rows The number of rows to size for.\n+  *\n+  * @return The minimum size of this component.\n+  *\n+  * @deprecated This method is deprecated in favor of \n+  * <code>getMinimumSize(int)</code>>\n+  */\n+public Dimension\n+minimumSize(int rows)\n+{\n+  return(getMinimumSize(rows));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the preferred size of this component.\n+  *\n+  * @return The preferred size of this component.\n+  */\n+public Dimension\n+getPreferredSize()\n+{\n+  return(getPreferredSize(rows));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the preferred size of this component.\n+  *\n+  * @return The preferred size of this component.\n+  *\n+  * @deprecated This method is deprecated in favor of\n+  * <code>getPreferredSize</code>.\n+  */\n+public Dimension\n+preferredSize()\n+{\n+  return(getPreferredSize(rows));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the preferred size of this component assuming it had the specified\n+  * number of rows.\n+  *\n+  * @param rows The number of rows to size for.\n+  *\n+  * @return The preferred size of this component.\n+  */\n+public Dimension\n+getPreferredSize(int rows)\n+{\n+  ListPeer lp = (ListPeer)getPeer();\n+  if (lp != null)\n+    return(lp.preferredSize(rows));\n+  else\n+    return(new Dimension(0,0));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the preferred size of this component assuming it had the specified\n+  * number of rows.\n+  *\n+  * @param rows The number of rows to size for.\n+  *\n+  * @return The preferred size of this component.\n+  *\n+  * @deprecated This method is deprecated in favor of \n+  * <code>getPreferredSize(int)</code>>\n+  */\n+public Dimension\n+preferredSize(int rows)\n+{\n+  return(getPreferredSize(rows));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method adds the specified item to the end of the list.\n+  *\n+  * @param item The item to add to the list.\n+  */\n+public void\n+add(String item)\n+{\n+  add(item, -1);\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method adds the specified item to the end of the list.\n+  *\n+  * @param item The item to add to the list.\n+  *\n+  * @deprecated Use add() instead.\n+  */\n+public void\n+addItem(String item)\n+{\n+  addItem(item, -1);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds the specified item to the specified location in the list.\n+  * If the desired index is -1 or greater than the number of rows\n+  * in the list, then the item is added to the end.\n+  *\n+  * @param item The item to add to the list.\n+  * @param index The location in the list to add the item, or -1 to add\n+  * to the end.\n+  */\n+public void\n+add(String item, int index)\n+{\n+  if ((index == -1) || (index >= items.size()))\n+    items.addElement(item);\n+  else\n+    items.insertElementAt(item, index);\n+\n+  if (peer != null)\n+    {\n+      ListPeer l = (ListPeer) peer;\n+      l.add (item, index);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds the specified item to the specified location in the list.\n+  * If the desired index is -1 or greater than the number of rows\n+  * in the list, then the item is added to the end.\n+  *\n+  * @param item The item to add to the list.\n+  * @param index The location in the list to add the item, or -1 to add\n+  * to the end.\n+  *\n+  * @deprecated Use add() instead.\n+  */\n+public void\n+addItem(String item, int index)\n+{\n+  add(item, index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Deletes the item at the specified index.\n+  *\n+  * @param index The index of the item to delete.\n+  *\n+  * @exception IllegalArgumentException If the index is not valid\n+  */\n+public void\n+delItem(int index) throws IllegalArgumentException\n+{\n+  remove(index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Deletes the item at the specified index.\n+  *\n+  * @param index The index of the item to delete.\n+  *\n+  * @exception IllegalArgumentException If the index is not valid\n+  */\n+public void\n+remove(int index) throws IllegalArgumentException\n+{\n+  items.removeElementAt (index);\n+  if (peer != null)\n+    {\n+      ListPeer l = (ListPeer) peer;\n+      l.delItems (index, index);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Deletes all items in the specified index range.\n+  *\n+  * @param start The beginning index of the range to delete.\n+  * @param end The ending index of the range to delete.\n+  *\n+  * @exception IllegalArgumentException If the indexes are not valid\n+  *\n+  * @deprecated This method is deprecated for some unknown reason.\n+  */\n+public synchronized void\n+delItems(int start, int end) throws IllegalArgumentException\n+{\n+  if ((start < 0) || (start >= items.size()))\n+    throw new IllegalArgumentException(\"Bad list start index value: \" + start);\n+\n+  if ((start < 0) || (start >= items.size()))\n+    throw new IllegalArgumentException(\"Bad list start index value: \" + start);\n+\n+  if (start > end)\n+    throw new IllegalArgumentException(\"Start is greater than end!\");\n+\n+  // We must run the loop in reverse direction.\n+  for (int i = end; i >= start; --i)\n+    items.removeElementAt (i);\n+  if (peer != null)\n+    {\n+      ListPeer l = (ListPeer) peer;\n+      l.delItems (start, end);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Deletes the first occurrence of the specified item from the list.\n+  *\n+  * @param item The item to delete.\n+  *\n+  * @exception IllegalArgumentException If the specified item does not exist.\n+  */\n+public synchronized void\n+remove(String item) throws IllegalArgumentException\n+{\n+  int index = items.indexOf(item);\n+  if (index == -1)\n+    throw new IllegalArgumentException(\"List element to delete not found\");\n+\n+  remove(index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Deletes all of the items from the list.\n+  */\n+public synchronized void\n+removeAll()\n+{\n+  items.clear();\n+  if (peer != null)\n+    {\n+      ListPeer l = (ListPeer) peer;\n+      l.removeAll ();\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Deletes all of the items from the list.\n+  * \n+  * @deprecated This method is deprecated in favor of <code>removeAll()</code>.\n+  */\n+public void\n+clear()\n+{\n+  removeAll();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Replaces the item at the specified index with the specified item.\n+  *\n+  * @param item The new item value.\n+  * @param index The index of the item to replace.\n+  *\n+  * @exception IllegalArgumentException If the index is not valid.\n+  */\n+public synchronized void\n+replaceItem(String item, int index) throws IllegalArgumentException\n+{\n+  remove(index);\n+  addItem(item, index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the index of the currently selected item.  -1 will be returned\n+  * if there are no selected rows or if there are multiple selected rows.\n+  *\n+  * @return The index of the selected row.\n+  */\n+public synchronized int\n+getSelectedIndex()\n+{\n+  if (peer != null)\n+    {\n+      ListPeer l = (ListPeer) peer;\n+      selected = l.getSelectedIndexes ();\n+    }\n+\n+  if (selected == null || selected.length > 1)\n+    return -1;\n+  return selected[0];\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns an array containing the indexes of the rows that are \n+  * currently selected.\n+  *\n+  * @return A list of indexes of selected rows.\n+  */\n+public synchronized int[]\n+getSelectedIndexes()\n+{\n+  if (peer != null)\n+    {\n+      ListPeer l = (ListPeer) peer;\n+      selected = l.getSelectedIndexes ();\n+    }\n+  return selected;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the item that is currently selected, or <code>null</code> if there \n+  * is no item selected.  FIXME: What happens if multiple items selected?\n+  *\n+  * @return The selected item, or <code>null</code> if there is no\n+  * selected item.\n+  */\n+public synchronized String\n+getSelectedItem()\n+{\n+  int index = getSelectedIndex();\n+  if (index == -1)\n+    return(null);\n+\n+  return((String)items.elementAt(index));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the list of items that are currently selected in this list.\n+  *\n+  * @return The list of currently selected items.\n+  */\n+public synchronized String[]\n+getSelectedItems()\n+{\n+  int[] indexes = getSelectedIndexes();\n+  if (indexes == null)\n+    return(new String[0]);\n+\n+  String[] retvals = new String[indexes.length];\n+  if (retvals.length > 0)\n+    for (int i = 0 ; i < retvals.length; i++)\n+       retvals[i] = (String)items.elementAt(indexes[i]);\n+\n+  return(retvals);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the list of items that are currently selected in this list as\n+  * an array of type <code>Object[]</code> instead of <code>String[]</code>.\n+  *\n+  * @return The list of currently selected items.\n+  */\n+public synchronized Object[]\n+getSelectedObjects()\n+{\n+  int[] indexes = getSelectedIndexes();\n+  if (indexes == null)\n+    return(new Object[0]);\n+\n+  Object[] retvals = new Object[indexes.length];\n+  if (retvals.length > 0)\n+    for (int i = 0 ; i < retvals.length; i++)\n+       retvals[i] = items.elementAt(indexes[i]);\n+\n+  return(retvals);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests whether or not the specified index is selected.\n+  *\n+  * @param index The index to test.\n+  *\n+  * @return <code>true</code> if the index is selected, <code>false</code>\n+  * otherwise.\n+  */\n+public boolean\n+isIndexSelected(int index)\n+{\n+  int[] indexes = getSelectedIndexes();\n+\n+  for (int i = 0; i < indexes.length; i++)\n+    if (indexes[i] == index)\n+      return(true);\n+\n+  return(false);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests whether or not the specified index is selected.\n+  *\n+  * @param index The index to test.\n+  *\n+  * @return <code>true</code> if the index is selected, <code>false</code>\n+  * otherwise.\n+  *\n+  * @deprecated This method is deprecated in favor of\n+  * <code>isIndexSelected(int)</code>.\n+  */\n+public boolean\n+isSelected(int index)\n+{\n+  return(isIndexSelected(index));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method ensures that the item at the specified index is visible.\n+  *\n+  * @exception IllegalArgumentException If the specified index is out of\n+  * range.\n+  */\n+public synchronized void\n+makeVisible(int index) throws IllegalArgumentException\n+{\n+  if ((index < 0) || (index >= items.size()))\n+    throw new IllegalArgumentException(\"Bad list index: \" + index);\n+\n+  visibleIndex = index;\n+  if (peer != null)\n+    {\n+      ListPeer l = (ListPeer) peer;\n+      l.makeVisible (index);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the index of the last item that was made visible via the\n+  * <code>makeVisible()</code> method.\n+  *\n+  * @return The index of the last item made visible via the \n+  * <code>makeVisible()</code> method.\n+  */\n+public int\n+getVisibleIndex()\n+{\n+  return(visibleIndex);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Makes the item at the specified index selected.\n+  *\n+  * @param index The index of the item to select.\n+  */\n+public synchronized void\n+select(int index)\n+{\n+  ListPeer lp = (ListPeer)getPeer();\n+  if (lp != null)\n+    lp.select(index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Makes the item at the specified index not selected.\n+  *\n+  * @param index The index of the item to unselect.\n+  */\n+public synchronized void\n+deselect(int index)\n+{\n+  ListPeer lp = (ListPeer)getPeer();\n+  if (lp != null)\n+    lp.deselect(index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Notifies this object to create its native peer.\n+  */\n+public void\n+addNotify()\n+{\n+  if (peer != null)\n+    peer = getToolkit ().createList (this);\n+  super.addNotify ();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Notifies this object to destroy its native peer.\n+  */\n+public void\n+removeNotify()\n+{\n+  super.removeNotify();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds the specified <code>ActionListener</code> to the list of\n+  * registered listeners for this object.\n+  *\n+  * @param listener The listener to add.\n+  */\n+public synchronized void\n+addActionListener(ActionListener listener)\n+{\n+  action_listeners = AWTEventMulticaster.add(action_listeners, listener);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes the specified <code>ActionListener</code> from the list of\n+  * registers listeners for this object.\n+  *\n+  * @param listener The listener to remove.\n+  */\n+public synchronized void\n+removeActionListener(ActionListener listener)\n+{\n+  action_listeners = AWTEventMulticaster.remove(action_listeners, listener);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds the specified <code>ItemListener</code> to the list of\n+  * registered listeners for this object.\n+  *\n+  * @param listener The listener to add.\n+  */\n+public synchronized void\n+addItemListener(ItemListener listener)\n+{\n+  item_listeners = AWTEventMulticaster.add(item_listeners, listener);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes the specified <code>ItemListener</code> from the list of\n+  * registers listeners for this object.\n+  *\n+  * @param listener The listener to remove.\n+  */\n+public synchronized void\n+removeItemListener(ItemListener listener)\n+{\n+  item_listeners = AWTEventMulticaster.remove(item_listeners, listener);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Processes the specified event for this object.  If the event is an\n+  * instance of <code>ActionEvent</code> then the\n+  * <code>processActionEvent()</code> method is called.  Similarly, if the\n+  * even is an instance of <code>ItemEvent</code> then the\n+  * <code>processItemEvent()</code> method is called.  Otherwise the\n+  * superclass method is called to process this event.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void\n+processEvent(AWTEvent event)\n+{\n+  if (event instanceof ActionEvent)\n+    processActionEvent((ActionEvent)event);\n+  if (event instanceof ItemEvent)\n+    processItemEvent((ItemEvent)event);\n+\n+  super.processEvent(event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method processes the specified event by dispatching it to any\n+  * registered listeners.  Note that this method will only get called if\n+  * action events are enabled.  This will happen automatically if any\n+  * listeners are added, or it can be done \"manually\" by calling\n+  * the <code>enableEvents()</code> method.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void \n+processActionEvent(ActionEvent event)\n+{\n+  if (action_listeners != null)\n+    action_listeners.actionPerformed(event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method processes the specified event by dispatching it to any\n+  * registered listeners.  Note that this method will only get called if\n+  * item events are enabled.  This will happen automatically if any\n+  * listeners are added, or it can be done \"manually\" by calling\n+  * the <code>enableEvents()</code> method.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void \n+processItemEvent(ItemEvent event)\n+{\n+  if (item_listeners != null)\n+    item_listeners.itemStateChanged(event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a debugging string for this object.\n+  *\n+  * @return A debugging string for this object.\n+  */\n+protected String\n+paramString()\n+{\n+  return \"multiple=\" + multipleMode + \",rows=\" + rows + super.paramString();\n+}\n+\n+} // class List"}, {"sha": "7b5b8a0855c8c0452c04410f8dc8e241adef20a9", "filename": "libjava/java/awt/MediaEntry.java", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMediaEntry.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMediaEntry.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMediaEntry.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -0,0 +1,106 @@\n+/* MediaEntry.java -- An entry in a MediaTracker\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.awt;\n+\n+/**\n+  * This is an entry in the media tracker\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+abstract class MediaEntry implements java.io.Serializable\n+{\n+\n+protected static final int LOADING = 1;\n+protected static final int ABORTED = 2;\n+protected static final int ERRORED = 4;\n+protected static final int COMPLETE = 8;\n+protected static final int LOADSTARTED = 16;\n+protected static final int DONE = 32;\n+\n+private MediaTracker tracker;\n+private int ID;\n+private int status;\n+private boolean cancelled;\n+private MediaEntry next;\n+\n+static MediaEntry\n+insert(MediaEntry a, MediaEntry b)\n+{\n+  while (a.next != null)\n+    a = a.next;\n+\n+  a.next = b;\n+  return(b);\n+}\n+\n+MediaEntry(MediaTracker tracker, int ID)\n+{\n+  this.tracker = tracker;\n+  this.ID = ID;\n+}\n+\n+public int\n+getID()\n+{\n+  return(ID);\n+}\n+\n+public int\n+getStatus()\n+{\n+  return(status);\n+}\n+\n+public void\n+setStatus(int status)\n+{\n+  this.status = status;\n+}\n+\n+public MediaEntry\n+getNext()\n+{\n+  return(next);\n+}\n+\n+public void\n+cancel()\n+{\n+  cancelled = true;\n+  if ((status == LOADING) || (status == LOADSTARTED))\n+    setStatus(ABORTED);\n+}\n+\n+abstract void\n+startLoad();\n+\n+abstract Object\n+getMedia();\n+\n+} // class MediaEntry \n+"}, {"sha": "53b9c8f4057c15eedfab0302ad95496622a9ef0a", "filename": "libjava/java/awt/MediaTracker.java", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMediaTracker.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMediaTracker.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMediaTracker.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -0,0 +1,40 @@\n+/* MediaTracker.java -- Class used for keeping track of images\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.awt;\n+\n+/**\n+  * This class is used for keeping track of the status of various media\n+  * objects.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class MediaTracker implements java.io.Serializable\n+{\n+\n+} // class MediaTracker \n+"}, {"sha": "ab73a233afa202aa267a0cb4c346d67098153e97", "filename": "libjava/java/awt/Menu.java", "status": "modified", "additions": 390, "deletions": 133, "changes": 523, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMenu.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMenu.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenu.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,141 +1,398 @@\n-/* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n+/* Menu.java -- A Java AWT Menu\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libjava.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n+import java.awt.peer.MenuPeer;\n+import java.awt.peer.MenuItemPeer;\n+import java.awt.peer.MenuComponentPeer;\n+import java.io.Serializable;\n import java.util.Vector;\n+import java.util.Enumeration;\n+\n+/**\n+  * This class represents a pull down or tear off menu in Java's AWT.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class Menu extends MenuItem implements MenuContainer, Serializable\n+{\n+\n+/*\n+ * Static Variables\n+ */\n+\n+// Serialization Constant\n+private static final long serialVersionUID = -8809584163345499784L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * @serial The actual items in the menu\n+  */\n+private Vector items = new Vector();\n+\n+/**\n+  * @serial Flag indicating whether or not this menu is a tear off\n+  */\n+private boolean isTearOff;\n+\n+/**\n+  * @serial Indicates whether or not this is a help menu.\n+  */\n+private boolean isHelpMenu;\n+\n+// From the serialization spec.  FIXME: what should it be?\n+private int menuSerializedDataVersion;\n+\n+static final MenuItem separator = new MenuItem(\"-\");\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>Menu</code> with no label and that\n+  * is not a tearoff;\n+  */\n+public\n+Menu()\n+{\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Menu</code> that is not a tearoff and\n+  * that has the specified label.\n+  *\n+  * @param label The menu label.\n+  */\n+public\n+Menu(String label)\n+{\n+  this(label, false);\n+}\n+\n+/*************************************************************************/\n \n-/* Status: Incomplete. */\n-\n-public class Menu extends MenuItem implements MenuContainer\n-{\n-  // Fields from the serialization spec. Decalare others \"transient\".\n-  Vector items = new Vector();\n-  boolean tearOff;\n-  boolean isHelpMenu;\n-  int menuSerializedDataVersion;\n-  \n-  static final MenuItem separator = new MenuItem(\"-\");\n-\n-  public Menu()\n-  {\n-    this(null, false);\n-  }\n-  \n-  public Menu(String label)\n-  {\n-    this(label, false);\n-  }\n-  \n-  public Menu(String label, boolean tearOff)\n-  {\n-    super(label);\n-    this.tearOff = tearOff;\n-  }\n-\n-  public void addNotify()\n-  {\n-    if (peer != null)\n-      {\n-\t// This choice of toolkit seems unsatisfying, but I'm not sure\n-\t// what else to do.\n-\tpeer = Toolkit.getDefaultToolkit ().createMenu (this);\n-      }\n-    super.addNotify ();\n-  }\n-\n-  public void removeNotify()\n-  {\n-    // FIXME\n-  }\n-\n-  public boolean isTearOff()\n-  {\n-    return tearOff;\n-  }\n-\n-  public int getItemCount()\n-  {\n-    return items.size();\n-  }\n-\n-  /** @deprecated Use getItemCount() instead. */\n-  public int countItems()\n-  {\n-    return getItemCount();\n-  }\n-\n-  public MenuItem getItem(int index)\n-  {\n-    return (MenuItem) items.elementAt(index);\n-  }\n-\n-  public synchronized MenuItem add(MenuItem mi)\n-  {\n-    items.addElement(mi);\n-    if (mi.parent != null)\n-      {\n-\tmi.parent.remove(mi);\n-      }\n-    mi.parent = this;\n-    return mi;\n-  }\n-\n-  public void add(String label)\n-  {\n-    MenuItem mi = new MenuItem(label);\n-    this.add(mi);\n-  }\n-\n-  public synchronized void insert(MenuItem menuitem, int index)\n-  {\n-    if (index < 0)\n-      throw new IllegalArgumentException();\n-    items.insertElementAt(menuitem, index);\n-  }\n-\n-  public void insert(String label, int index)\n-  {\n-    MenuItem mi = new MenuItem(label);\n-    this.insert(mi, index);\n-  }\n-\n-  public void addSeparator()\n-  {\n-    this.add(separator);\n-  }\n-\n-  public void insertSeparator(int index)\n-  {\n-    this.insert(separator, index);    \n-  }\n-\n-  public synchronized void remove(int index)\n-  {\n-    items.removeElementAt(index);\n-  }\n-\n-  public synchronized void remove(MenuComponent item)\n-  {\n-    items.removeElement(item);\n-  }\n-\n-  public synchronized void removeAll()\n-  {\n-    items.removeAllElements();\n-  }\n-\n-  public String paramString()\n-  {\n-    return getName() + \",label\" + label + \",tearOff=\" + tearOff + \n-           \",isHelpMenu=\" + isHelpMenu;\n-  }\n-  \n-  // Accessibility API not yet implemented.\n-  // public AccessibleContext getAccessibleContext()\n+/**\n+  * Initializes a new instance of <code>Menu</code> with the specified\n+  * label and tearoff status.\n+  *\n+  * @param label The label for this menu\n+  * @param isTearOff <code>true</code> if this menu is a tear off menu,\n+  * <code>false</code> otherwise.\n+  */\n+public\n+Menu(String label, boolean isTearOff)\n+{\n+  super(label);\n+\n+  this.isTearOff = isTearOff;\n+\n+  if (label.equals(\"Help\"))\n+    isHelpMenu = true;\n }\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Tests whether or not this menu is a tearoff.\n+  *\n+  * @return <code>true</code> if this menu is a tearoff, <code>false</code>\n+  * otherwise.\n+  */\n+public boolean\n+isTearOff()\n+{\n+  return(isTearOff);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the number of items in this menu.\n+  *\n+  * @return The number of items in this menu.\n+  */\n+public int\n+getItemCount()\n+{\n+  return(items.size());\n+}\n+ \n+/*************************************************************************/\n+\n+/**\n+  * Returns the number of items in this menu.\n+  *\n+  * @return The number of items in this menu.\n+  *\n+  * @deprecated This method is deprecated in favor of <code>getItemCount()</code>.\n+  */\n+public int\n+count()\n+{\n+  return(items.size());\n+}\n+ \n+/*************************************************************************/\n+\n+/**\n+  * Returns the item at the specified index.\n+  *\n+  * @return The item at the specified index.\n+  *\n+  * @exception ArrayIndexOutOfBoundsException If the index value is not valid.\n+  */\n+public MenuItem\n+getItem(int index)\n+{\n+  return((MenuItem)items.elementAt(index));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds the specified item to this menu.  If it was previously part of\n+  * another menu, it is first removed from that menu.\n+  *\n+  * @param item The new item to add.\n+  *\n+  * @return The item that was added.\n+  */\n+public MenuItem\n+add(MenuItem item)\n+{\n+  items.addElement(item);\n+  if (item.parent != null)\n+    {\n+      item.parent.remove(item);\n+    }\n+  item.parent = this;\n+\n+  if (peer != null)\n+    {\n+      MenuPeer mp = (MenuPeer) peer;\n+      mp.addItem(item);\n+    }\n+\n+  return item;\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Add an item with the specified label to this menu.\n+  *\n+  * @param label The label of the menu item to add.\n+  */\n+public void\n+add(String label)\n+{\n+  add(new MenuItem(label));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Inserts the specified menu item into this menu at the specified index.\n+  *\n+  * @param item The menu item to add.\n+  * @param index The index of the menu item.\n+  *\n+  * XXX: FIXME\n+  *\n+  * @exception IllegalArgumentException If the index is less than zero.\n+  * @exception ArrayIndexOutOfBoundsException If the index is otherwise invalid.\n+  */\n+public void\n+insert(MenuItem item, int index)\n+{\n+  if (index < 0)\n+    throw new IllegalArgumentException(\"Index is less than zero\");\n+\n+  items.insertElementAt(item, index);\n+\n+  MenuPeer mp = (MenuPeer)getPeer();\n+  // FIXME: Need to add a peer method here.\n+//    if (mp != null)\n+//      mp.insertItem(item, index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Inserts an item with the specified label into this menu at the specified index.\n+  *\n+  * @param label The label of the item to add.\n+  * @param index The index of the menu item.\n+  *\n+  * @exception IllegalArgumentException If the index is less than zero.\n+  * @exception ArrayIndexOutOfBoundsException If the index is otherwise invalid.\n+  */\n+public void\n+insert(String label, int index)\n+{\n+  insert(new MenuItem(label), index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds a separator bar at the current menu location.\n+  */\n+public void\n+addSeparator()\n+{\n+  add(separator);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Inserts a separator bar at the specified index value.\n+  *\n+  * @param index The index at which to insert a separator bar.\n+  *\n+  * XXX: FIXME\n+  *\n+  * @exception IllegalArgumentException If the index is less than zero.\n+  * @exception ArrayIndexOutOfBoundsException If the index is otherwise invalid.\n+  */\n+public void\n+insertSeparator(int index)\n+{\n+  insert(separator, index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Deletes the item at the specified index from this menu.\n+  *\n+  * @param index The index of the item to remove.\n+  * \n+  * @exception ArrayIndexOutOfBoundsException If the index is otherwise invalid.\n+  */\n+public synchronized void\n+remove(int index)\n+{\n+  items.removeElementAt(index);\n+\n+  MenuPeer mp = (MenuPeer)getPeer();\n+  if (mp != null)\n+    mp.delItem(index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes the specifed item from the menu.  If the specified component\n+  * does not exist, this method does nothing. // FIXME: Right?\n+  *\n+  * @param item The component to remove.\n+  */\n+public void\n+remove(MenuComponent item)\n+{\n+  int index = items.indexOf(item);\n+  if (index == -1)\n+    return;\n+\n+  remove(index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes all the elements from this menu.\n+  */\n+public synchronized void\n+removeAll()\n+{\n+  int count = getItemCount();\n+  for(int i = 0; i < count; i++)\n+    {\n+      // We must always remove item 0.\n+      remove(0);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Creates the native peer for this object.\n+  */\n+public void\n+addNotify()\n+{\n+  if (peer != null)\n+    peer = getToolkit().createMenu(this);\n+  super.addNotify ();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Destroys the native peer for this object.\n+  */\n+public void\n+removeNotify()\n+{\n+  super.removeNotify();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a debugging string for this menu.\n+  *\n+  * @return A debugging string for this menu.\n+  */\n+public String\n+paramString()\n+{\n+  return (\",isTearOff=\" + isTearOff + \",isHelpMenu=\" + isHelpMenu\n+\t  + super.paramString());\n+}\n+\n+// Accessibility API not yet implemented.\n+// public AccessibleContext getAccessibleContext()\n+\n+} // class Menu"}, {"sha": "7ad688b65c401a17d15c289c778e4df8ccb2a2f1", "filename": "libjava/java/awt/MenuBar.java", "status": "modified", "additions": 298, "deletions": 257, "changes": 555, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMenuBar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMenuBar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuBar.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,288 +1,329 @@\n-/* Copyright (C) 1999, 2000, 2001  Free Software Foundation\n+/* MenuBar.java -- An AWT menu bar class\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libjava.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n import java.awt.peer.MenuBarPeer;\n-import java.util.Vector;\n+import java.awt.peer.MenuComponentPeer;\n+\n+import java.io.Serializable;\n import java.util.Enumeration;\n-import java.util.NoSuchElementException;\n+import java.util.Vector;\n+\n+/**\n+  * This class implements a menu bar in the AWT system.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@redhat.com>\n+  */\n+public class MenuBar extends MenuComponent\n+  implements MenuContainer, Serializable\n+{\n+\n+/*\n+ * Static Variables\n+ */\n+\n+// Serialization Constant\n+private static final long serialVersionUID = -4930327919388951260L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n \n-/** This class implements a MenuBar, such as might appear across the\n- * top of a window.\n- * @author Tom Tromey <tromey@redhat.com>\n- * @date December 25, 2000\n+/**\n+  * @serial The menu used for providing help information\n+  */\n+private Menu helpMenu;\n+\n+/**\n+  * @serial The menus contained in this menu bar.\n+  */\n+private Vector menus = new Vector();\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n  */\n-public class MenuBar extends MenuComponent implements MenuContainer\n+\n+/**\n+  * Initializes a new instance of <code>MenuBar</code>.\n+  */\n+public\n+MenuBar()\n {\n-  /** Create a new MenuBar.  */\n-  public MenuBar ()\n-  {\n-    menus = new Vector ();\n-  }\n-\n-  /** Add a menu to this MenuBar.  If the menu has already has a\n-   * parent, it is first removed from its old parent before being\n-   * added.\n-   * @param menu The menu to add.\n-   * @returns menu\n-   */\n-  public synchronized Menu add (Menu menu)\n-  {\n-    if (menu.parent != null)\n-      menu.parent.remove (menu);\n-\n-    menu.parent = this;\n-    menus.add (menu);\n-\n-    if (peer != null)\n-      {\n-\tMenuBarPeer mp = (MenuBarPeer) peer;\n-\tmp.add (menu);\n-      }\n-\n-    return menu;\n-  }\n-\n-  /** This creates the component's peer.  */\n-  public void addNotify ()\n-  {\n-    if (peer != null)\n-      {\n-\t// This choice of toolkit seems unsatisfying, but I'm not sure\n-\t// what else to do.\n-\tpeer = Toolkit.getDefaultToolkit ().createMenuBar (this);\n-      }\n-  }\n-\n-  /** @deprecated  Use getMenuCount() instead.  */\n-  public int countMenus ()\n-  {\n-    return getMenuCount ();\n-  }\n-\n-  /** Delete a keyboard shortcut.\n-   * @param shortcut The short cut which should be deleted from all\n-   *                 menus on this MenuBar.\n-   */\n-  public void deleteShortcut (MenuShortcut shortcut)\n-  {\n-    MenuItem it;\n-    // This is a slow implementation, but it probably doesn't matter.\n-    while ((it = getShortcutMenuItem (shortcut)) != null)\n-      it.deleteShortcut ();\n-  }\n-\n-  /** Returns the current Help menu.  */\n-  public Menu getHelpMenu ()\n-  {\n-    return help_menu;\n-  }\n-\n-  /** Returns a menu from this object.\n-   * @param index Index of menu to return.\n-   */\n-  public Menu getMenu (int index)\n-  {\n-    return (Menu) menus.get (index);\n-  }\n-\n-  /** Returns the number of menus on this MenuBar.  */\n-  public int getMenuCount ()\n-  {\n-    return menus.size ();\n-  }\n-\n-  /** Returns the menu item on this MenuBar with the specified\n-   * shortcut.\n-   * @param shortcut Shortcut to look for\n-   */\n-  public MenuItem getShortcutMenuItem (MenuShortcut shortcut)\n-  {\n-    Enumeration m = new MenuEnumeration (this);\n-    while (m.hasMoreElements ())\n-      {\n-\tMenuItem item = (MenuItem) m.nextElement ();\n-\tif (item.getShortcut () == shortcut)\n-\t  return item;\n-      }\n-    return null;\n-  }\n-\n-  /** Remove a menu from the menu bar.  If the menu is specified by\n-   * component (and not index), and does not exist on the menu, then\n-   * the method does nothing.  If the removed menu has a peer, it is\n-   * destroyed.\n-   * @param menu The menu to remove\n-   * @param index The index of the menu to remove\n-   */\n-  public synchronized void remove (MenuComponent menu)\n-  {\n-    int s = menus.size ();\n-    for (int i = 0; i < s; ++i)\n-      {\n-\tif (menus.get (i) == menu)\n-\t  {\n-\t    remove (i);\n-\t    break;\n-\t  }\n-      }\n-  }\n-\n-  public synchronized void remove (int index)\n-  {\n-    Menu m = (Menu) menus.get (index);\n-    menus.remove (index);\n-    m.removeNotify ();\n-    m.parent = null;\n-\n-    if (peer != null)\n-      {\n-\tMenuBarPeer mp = (MenuBarPeer) peer;\n-\tmp.remove (index);\n-      }\n-  }\n-\n-  /** Set the Help menu for this MenuBar.  If a Help menu already\n-   * exists, it is first removed.\n-   * @param menu The new Help menu.\n-   */\n-  public synchronized void setHelpMenu (Menu menu)\n-  {\n-    if (help_menu != null)\n-      {\n-\thelp_menu.removeNotify ();\n-\thelp_menu.parent = null;\n-      }\n-\n-    if (menu.parent != null)\n-      menu.parent.remove (menu);\n-    if (menu.parent != null)\n-      menu.parent.remove (menu);\n-    menu.parent = this;\n-\n-    if (peer != null)\n-      {\n-\tMenuBarPeer mp = (MenuBarPeer) peer;\n-\tmp.addHelpMenu (menu);\n-      }\n-  }\n-\n-  /** Returns an Enumeration which lists the keyboard shortcuts\n-   * associated with menu items on this MenuBar.\n-   */\n-  public synchronized Enumeration shortcuts ()\n-  {\n-    return new ShortcutEnumeration (new MenuEnumeration (this));\n-  }\n-\n-  // Iterate over the items of a menu.\n-  private static class MenuEnumeration implements Enumeration\n-  {\n-    // Enumerate over the menu's items.\n-    Enumeration main;\n-    // Enumerate over a submenu.\n-    Enumeration sub;\n-    // Menubar so we can keep track of help menu too.\n-    MenuBar menubar;\n-\n-    MenuEnumeration (Menu m)\n-    {\n-      sub = null;\n-      menubar = null;\n-      main = m.items.elements ();\n-    }\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n \n-    MenuEnumeration (MenuBar mb)\n+/**\n+  * Returns the help menu for this menu bar.  This may be <code>null</code>.\n+  *\n+  * @return The help menu for this menu bar.\n+  */\n+public Menu\n+getHelpMenu()\n+{\n+  return(helpMenu);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the help menu for this menu bar.\n+  *\n+  * @param helpMenu The new help menu for this menu bar.\n+  */\n+public synchronized void\n+setHelpMenu(Menu menu)\n+{\n+  if (helpMenu != null)\n     {\n-      sub = null;\n-      menubar = mb;\n-      main = mb.menus.elements ();\n+      helpMenu.removeNotify ();\n+      helpMenu.parent = null;\n     }\n \n-    public boolean hasMoreElements ()\n+  if (menu.parent != null)\n+    menu.parent.remove (menu);\n+  if (menu.parent != null)\n+    menu.parent.remove (menu);\n+  menu.parent = this;\n+\n+  if (peer != null)\n     {\n-      boolean r = false;\n-      if (sub != null)\n-\tr = sub.hasMoreElements ();\n-      if (! r)\n-\tr = main.hasMoreElements ();\n-      if (! r && menubar != null)\n-\t{\n-\t  if (menubar.help_menu != null)\n-\t    {\n-\t      main = new MenuEnumeration (menubar.help_menu);\n-\t      r = main.hasMoreElements ();\n-\t    }\n-\t  menubar = null;\n-\t}\n-      return r;\n+      MenuBarPeer mp = (MenuBarPeer) peer;\n+      mp.addHelpMenu (menu);\n     }\n+}\n+\n+/*************************************************************************/\n \n-    public Object nextElement () throws NoSuchElementException\n+/** Add a menu to this MenuBar.  If the menu has already has a\n+ * parent, it is first removed from its old parent before being\n+ * added.\n+ *\n+ * @param menu The menu to add.\n+ *\n+ * @return The menu that was added.\n+ */\n+public synchronized Menu\n+add(Menu menu)\n+{\n+  if (menu.parent != null)\n+    menu.parent.remove (menu);\n+\n+  menu.parent = this;\n+  menus.addElement(menu);\n+\n+  if (peer != null)\n     {\n-      while (true)\n-\t{\n-\t  if (! sub.hasMoreElements ())\n-\t    sub = null;\n-\t  else\n-\t    return sub.nextElement ();\n-\n-\t  if (! main.hasMoreElements () && menubar != null\n-\t      && menubar.help_menu != null)\n-\t    {\n-\t      main = new MenuEnumeration (menubar.help_menu);\n-\t      menubar = null;\n-\t    }\n-\n-\t  Object r = main.nextElement ();\n-\t  if (r instanceof Menu)\n-\t    {\n-\t      sub = new MenuEnumeration ((Menu) r);\n-\t      continue;\n-\t    }\n-\n-\t  return r;\n-\t}\n+      MenuBarPeer mp = (MenuBarPeer) peer;\n+      mp.addMenu (menu);\n     }\n-  }\n \n-  // This is an enumeration that shadows another enumeration and\n-  // returns the shortcut for each item returned.  I wonder if we're\n-  // only supposed to return unique shortcuts?  If so then we could\n-  // keep a hash table here and remove duplicates.\n-  private static class ShortcutEnumeration implements Enumeration\n-  {\n-    Enumeration back;\n+  return(menu);\n+}\n+\n+/*************************************************************************/\n \n-    ShortcutEnumeration (Enumeration back)\n+/**\n+  * Removes the menu at the specified index.\n+  *\n+  * @param index The index of the menu to remove from the menu bar.\n+  */\n+public synchronized void\n+remove(int index)\n+{\n+  Menu m = (Menu) menus.get (index);\n+  menus.remove (index);\n+  m.removeNotify ();\n+  m.parent = null;\n+\n+  if (peer != null)\n     {\n-      this.back = back;\n+      MenuBarPeer mp = (MenuBarPeer) peer;\n+      mp.delMenu (index);\n     }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes the specified menu from the menu bar.\n+  *\n+  * @param menu The menu to remove from the menu bar.\n+  */\n+public void\n+remove(MenuComponent menu)\n+{\n+  int index = menus.indexOf(menu);\n+  if (index == -1)\n+    return;\n+\n+  remove(index);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the number of elements in this menu bar.\n+  *\n+  * @return The number of elements in the menu bar.\n+  */\n+public int\n+getMenuCount()\n+{\n+  // FIXME: How does the help menu fit in here?\n+  return(menus.size());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the number of elements in this menu bar.\n+  *\n+  * @return The number of elements in the menu bar.\n+  *\n+  * @deprecated This method is deprecated in favor of <code>getMenuCount()</code>.\n+  */\n+public int\n+countMenus()\n+{\n+  return(getMenuCount());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the menu at the specified index.\n+  *\n+  * @return The requested menu.\n+  *\n+  * @exception ArrayIndexOutOfBoundsException If the index is not valid.\n+  */\n+public Menu\n+getMenu(int index)\n+{\n+  return((Menu)menus.elementAt(index));\n+}\n+\n+/*************************************************************************/\n \n-    public boolean hasMoreElements ()\n+/**\n+  * Creates this object's native peer.\n+  */\n+public void\n+addNotify()\n+{\n+  if (getPeer() == null)\n+    setPeer((MenuComponentPeer)getToolkit().createMenuBar(this));\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Destroys this object's native peer.\n+  */\n+public void\n+removeNotify()\n+{\n+  super.removeNotify();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a list of all shortcuts for the menus in this menu bar.\n+  *\n+  * @return A list of all shortcuts for the menus in this menu bar.\n+  */\n+public synchronized Enumeration\n+shortcuts()\n+{\n+  Vector shortcuts = new Vector();\n+  Enumeration e = menus.elements();\n+\n+  while (e.hasMoreElements())\n     {\n-      return back.hasMoreElements ();\n+      Menu menu = (Menu)e.nextElement();\n+      if (menu.getShortcut() != null)\n+        shortcuts.addElement(menu.getShortcut());\n     }\n \n-    public Object nextElement () throws NoSuchElementException\n+  return(shortcuts.elements());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the menu item for the specified shortcut, or <code>null</code>\n+  * if no such item exists.\n+  *\n+  * @param shortcut The shortcut to return the menu item for.\n+  *\n+  * @return The menu item for the specified shortcut.\n+  */\n+public MenuItem\n+getShortcutMenuItem(MenuShortcut shortcut)\n+{\n+  Enumeration e = menus.elements();\n+\n+  while (e.hasMoreElements())\n     {\n-      while (true)\n-\t{\n-\t  MenuItem item = (MenuItem) back.nextElement ();\n-\t  if (item.getShortcut () != null)\n-\t    return item.getShortcut ();\n-\t}\n+      Menu menu = (Menu)e.nextElement();\n+      MenuShortcut s = menu.getShortcut();\n+      if ((s != null) && (s.equals(shortcut)))\n+        return(menu);\n     }\n-  }\n \n-  // We use Vector because it makes enumerating easier than ArrayList\n-  // in this case.\n-  Vector menus;\n-  Menu help_menu;\n+  return(null);\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Deletes the specified menu shortcut.\n+  *\n+  * @param shortcut The shortcut to delete.\n+  */\n+public void\n+deleteShortcut(MenuShortcut shortcut)\n+{\n+  MenuItem it;\n+  // This is a slow implementation, but it probably doesn't matter.\n+  while ((it = getShortcutMenuItem (shortcut)) != null)\n+    it.deleteShortcut ();\n+}\n+\n+} // class MenuBar"}, {"sha": "d856b7592e22790acaea7c9a88a183bec422bd7c", "filename": "libjava/java/awt/MenuComponent.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMenuComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMenuComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuComponent.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -221,7 +221,7 @@ public abstract class MenuComponent implements java.io.Serializable\n   *\n   * @return The synchronization lock for this component.\n   */\n-public final Object\n+protected final Object\n getTreeLock()\n {\n   return(tree_lock);\n@@ -292,7 +292,7 @@ public abstract class MenuComponent implements java.io.Serializable\n public String\n toString()\n {\n-  return(getClass().getName() + \"(\" + getName() + \")\");\n+  return this.getClass().getName() + \"[\" + paramString() + \"]\";\n }\n \n /*************************************************************************/\n@@ -303,7 +303,7 @@ public abstract class MenuComponent implements java.io.Serializable\n protected String\n paramString()\n {\n-  return(toString());\n+  return \"name=\" + getName();\n }\n \n // Accessibility API not yet implemented."}, {"sha": "09fe0f0466f410897b021c2b6531bb030b6d3d18", "filename": "libjava/java/awt/MenuContainer.java", "status": "modified", "additions": 59, "deletions": 17, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMenuContainer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMenuContainer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuContainer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,27 +1,69 @@\n-/* Copyright (C) 1999, 2000  Free Software Foundation\n+/* MenuContainer.java -- Container for menu items.\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libjava.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-package java.awt;\n \n-/* Written using \"Java Class Libraries\", 2nd edition, plus online\n- * API docs for JDK 1.2 beta from http://www.javasoft.com.\n- * Status:  Believed complete and correct.\n- */\n+package java.awt;\n \n+/**\n+  * This interface is a container for menu components.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n public interface MenuContainer\n {\n-  public Font getFont();\n \n-  /**\n-   * @deprecated\n-   */\n-  public boolean postEvent(Event evt);\n+/**\n+  * Returns the font in use by this container.\n+  *\n+  * @return The font in use by this container.\n+  */\n+public abstract Font\n+getFont();\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes the specified menu component from the menu.\n+  *\n+  * @param component The menu component to remove.\n+  */\n+public abstract void\n+remove(MenuComponent component);\n+\n+/*************************************************************************/\n \n-  public void remove(MenuComponent comp);\n-}\n+/**\n+  * Posts and event to the listeners.  This is replaced by \n+  * <code>dispatchEvent</code>.\n+  *\n+  * @param event The event to dispatch.\n+  *\n+  * @deprecated\n+  */  \n+public abstract boolean\n+postEvent(Event event);\n \n+} // interface MenuContainer"}, {"sha": "742b23d436a58c9fd17a2ef34e7513eb8a5bfaad", "filename": "libjava/java/awt/MenuItem.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMenuItem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMenuItem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuItem.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -437,8 +437,8 @@ public class MenuItem extends MenuComponent implements java.io.Serializable\n public String\n paramString()\n {\n-  return(getClass().getName() + \"(label+\" + label + \",enabled=\" + enabled +\n-         \",actionCommand=\" + actionCommand + \")\");\n+  return (\"label=\" + label + \",enabled=\" + enabled +\n+\t  \",actionCommand=\" + actionCommand + \",\" + super.paramString());\n }\n \n // Accessibility API not yet implemented."}, {"sha": "c79635d3080e0082999c5883227b06fae408b95a", "filename": "libjava/java/awt/MenuShortcut.java", "status": "modified", "additions": 187, "deletions": 66, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMenuShortcut.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FMenuShortcut.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuShortcut.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,75 +1,196 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* MenuShortcut.java -- A class for menu accelerators\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n \n-package java.awt;\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-import java.awt.event.KeyEvent;\n \n-/* Status: Complete, except for hashCode(). Untested. */\n+package java.awt;\n \n+/**\n+  * This class implements a keyboard accelerator for a menu item.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n public class MenuShortcut implements java.io.Serializable\n {\n-  // Fields from the serialization spec. Decalare others \"transient\".\n-  int key;\n-  boolean usesShift;\n-\n-  public MenuShortcut(int key)\n-  {\n-    this.key = key;\n-  }\n-\n-  public MenuShortcut(int key, boolean useShiftModifier)\n-  {\n-    this.key = key;\n-    this.usesShift = useShiftModifier;\n-  }\n-\n-  public int getKey()\n-  {\n-    return key;\n-  }\n-\n-  public boolean usesShiftModifier()\n-  {\n-    return usesShift;\n-  }\n-\n-  public boolean equals(MenuShortcut ms)\n-  {\n-    return (ms.key == key && ms.usesShift == usesShift);\n-  }\n-\n-  public boolean equals(Object obj)\n-  {\n-    if (obj instanceof MenuShortcut)\n-      {\n-        MenuShortcut ms = (MenuShortcut) obj;\n-\treturn (ms.key == key && ms.usesShift == usesShift);\n-      }      \n-    return false;\n-  }\n-\n-  public int hashCode()\n-  {\n-    // FIXME: find/implement the correct algorithm for this\n-    if (usesShift)\n-      return (2 * key);\n-    else\n-      return key;\n-  }\n-\n-  public String toString()\n-  {\n-    return paramString(); // ?\n-  }\n-  \n-  protected String paramString()\n-  {\n-    return KeyEvent.getKeyText(key);\n-  }\n+\n+/*\n+ * Static Variables\n+ */\n+\n+// Serialization Constant\n+private static final long serialVersionUID = 143448358473180225L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * @serial The virtual keycode for the shortcut.\n+  */\n+private int key;\n+\n+/**\n+  * @serial <code>true</code> if the shift key was used with this shortcut,\n+  * or <code>false</code> otherwise.\n+  */\n+private boolean usesShift;\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>MenuShortcut</code> with the\n+  * specified virtual key value.\n+  *\n+  * @param key The virtual keycode for the shortcut.\n+  */\n+public\n+MenuShortcut(int key)\n+{\n+  this(key, false);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>MenuShortcut</code> with the\n+  * specified virtual key value and shift setting.\n+  *\n+  * @param key The virtual keycode for the shortcut.\n+  * @param usesShift <code>true</code> if the shift key was pressed,\n+  * <code>false</code> otherwise.\n+  */\n+public\n+MenuShortcut(int key, boolean usesShift)\n+{\n+  this.key = key;\n+  this.usesShift = usesShift;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Returns the virtual keycode for this shortcut.\n+  *\n+  * @return The virtual keycode for this shortcut.\n+  */\n+public int\n+getKey()\n+{\n+  return(key);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the shift setting for this shortcut.\n+  *\n+  * @return <code>true</code> if the shift key was pressed, <code>false</code>\n+  * otherwise.\n+  */\n+public boolean\n+usesShiftModifier()\n+{\n+  return(usesShift);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Tests this object for equality against the specified object.  The two\n+  * objects will be considered equal if and only if the specified object\n+  * is an instance of <code>MenuShortcut</code> and has the same key value\n+  * and shift setting as this object.\n+  *\n+  * @param obj The object to test for equality against.\n+  *\n+  * @return <code>true</code> if the two objects are equal, <code>false</code>\n+  * otherwise.\n+  */\n+public boolean\n+equals(MenuShortcut obj)\n+{\n+  if (obj == null)\n+    return(false);\n+\n+  if (obj.key != this.key)\n+    return(false);\n+\n+  if (obj.usesShift != this.usesShift)\n+    return(false);\n+\n+  return(true);\n+}\n+\n+public boolean\n+equals(Object obj)\n+{\n+  if (obj instanceof MenuShortcut)\n+    {\n+      MenuShortcut ms = (MenuShortcut) obj;\n+      return (ms.key == key && ms.usesShift == usesShift);\n+    }      \n+  return false;\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a string representation of this shortcut.\n+  *\n+  * @return A string representation of this shortcut.\n+  */\n+public String\n+toString()\n+{\n+  return(getClass().getName() + \"[\" + paramString () + \"]\");\n+}\n+\n+public int\n+hashCode()\n+{\n+  // Arbitrary.\n+  return key + (usesShift ? 23 : 57);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a debugging string for this object.\n+  *\n+  * @return A debugging string for this object.\n+  */\n+protected String\n+paramString()\n+{\n+  return \"key=\" + key + \",usesShift=\" + usesShift;\n+}\n+\n+} // class MenuShortcut "}, {"sha": "203772002a2a38fc501bec02ccf3278c4658d718", "filename": "libjava/java/awt/PaintContext.java", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FPaintContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FPaintContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FPaintContext.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,10 +1,28 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2002  Free Software Foundation\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n "}, {"sha": "47b0b95d9e0e1a040ced8f9682730cd8cbf1cb5d", "filename": "libjava/java/awt/Panel.java", "status": "modified", "additions": 78, "deletions": 26, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FPanel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FPanel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FPanel.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,36 +1,88 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Panel.java -- Simple container object.\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n+import java.awt.peer.PanelPeer;\n+import java.awt.peer.ContainerPeer;\n import java.awt.peer.ComponentPeer;\n \n-/* This class is complete to 1.2.  */\n+/**\n+  * A panel is a simple container class. \n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class Panel extends Container implements java.io.Serializable\n+{\n \n-public class Panel extends Container\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>Panel</code> that has a default\n+  * layout manager of <code>FlowLayout</code>.\n+  */\n+public\n+Panel()\n {\n-  public Panel()\n-  { \n-    this (new FlowLayout ());\n-  }\n-\n-  public Panel(LayoutManager layout)\n-  {\n-    super();\n-    setLayout (layout);    \n-  }\n-\n-  //public AccessibleContext getAccessibleContext()\n-\n-  public void addNotify()\n-  {\n-    if (peer == null)\n-      peer = getToolkit().createPanel(this);\n-    super.addNotify();\n-  }\n+  this(new FlowLayout());\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Panel</code> with the specified\n+  * layout manager.\n+  *\n+  * @param layoutManager The layout manager for this object.\n+  */\n+public\n+Panel(LayoutManager layoutManager)\n+{\n+  setLayout(layoutManager);\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Notifies this object to create its native peer.\n+  */\n+public void\n+addNotify()\n+{\n+  if (peer == null)\n+    peer = getToolkit().createPanel(this);\n+  super.addNotify();\n+}\n+\n+} // class Panel \n+"}, {"sha": "7ec2ad5154a6ca80a4ce5a913a1f7fc29421dc12", "filename": "libjava/java/awt/PopupMenu.java", "status": "modified", "additions": 109, "deletions": 46, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FPopupMenu.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FPopupMenu.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FPopupMenu.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,56 +1,119 @@\n-/* Copyright (C) 2000, 2001  Free Software Foundation\n+/* PopupMenu.java -- An AWT popup menu\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libjava.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libjava License.  Please consult the file \"LIBJAVA_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n import java.awt.peer.PopupMenuPeer;\n+import java.awt.peer.MenuPeer;\n+import java.awt.peer.MenuItemPeer;\n+import java.awt.peer.MenuComponentPeer;\n+/**\n+  * This class implement an AWT popup menu widget\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n+public class PopupMenu extends Menu implements java.io.Serializable\n+{\n+\n+/*\n+ * Static Variables\n+ */\n+\n+// Serialization Constant\n+private static final long serialVersionUID = -4620452533522760060L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>PopupMenu</code>.\n+  */\n+public\n+PopupMenu()\n+{\n+}\n \n-/* Status: Incomplete. */\n+/*************************************************************************/\n \n-public class PopupMenu extends Menu\n+/**\n+  * Initializes a new instance of <code>PopupMenu</code> with the specified\n+  * label.\n+  *\n+  * @param label The label for this popup menu.\n+  */\n+public\n+PopupMenu(String label)\n {\n-  public PopupMenu()\n-  {\n-    super();\n-  }\n-\n-  public PopupMenu(String label)\n-  {\n-    super(label);\n-  }\n-\n-  public void addNotify()\n-  {\n-    if (peer != null)\n-      {\n-\t// This choice of toolkit seems unsatisfying, but I'm not sure\n-\t// what else to do.\n-\tpeer = Toolkit.getDefaultToolkit ().createPopupMenu (this);\n-      }\n-    super.addNotify ();\n-  }\n-\n-  public void show(Component origin, int x, int y)\n-  {\n-    if (! origin.isShowing ()\n-\t// FIXME: or ! parent is showing -- but how?\n-\t)\n-      {\n-\t// This is an invalid call which we choose to ignore.\n-\treturn;\n-      }\n-\t\n-    addNotify ();\t\t// FIXME?\n-    Event e = new Event (origin, 0, 0, x, y, 0, 0);\n-    PopupMenuPeer p = (PopupMenuPeer) peer;\n-    p.show (e);\n-  }\n-\n-  // Accessibility API not yet implemented.\n-  // public AccessibleContext getAccessibleContext()\n+  super(label);\n }\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Creates this object's native peer.\n+  */\n+public void\n+addNotify()\n+{\n+  if (peer != null)\n+    peer = getToolkit ().createPopupMenu (this);\n+  super.addNotify ();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Displays this popup menu at the specified coordinates relative to\n+  * the specified component.\n+  *\n+  * @param component The component to which the display coordinates are relative.\n+  * @param x The X coordinate of the menu.\n+  * @param y The Y coordinate of the menu.\n+  */\n+public void\n+show(Component component, int x, int y)\n+{\n+  PopupMenuPeer pmp = (PopupMenuPeer)getPeer();\n+  if (pmp != null)\n+    {\n+      /* XXX\n+      Event e = new Event (component, Event.ACTION_EVENT, component);\n+      e.x = x;\n+      e.y = y;*/\n+      pmp.show (component, x, y);\n+    }\n+}\n+\n+} // class PopupMenu\n+"}, {"sha": "ebe2ee2e48c17d987290c1eb2e01b1917bdc156c", "filename": "libjava/java/awt/SystemColor.java", "status": "modified", "additions": 411, "deletions": 150, "changes": 561, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FSystemColor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2FSystemColor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FSystemColor.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,158 +1,419 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* SystemColor.java -- Class to access system color values.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n-/** This class contains most of the colors used by the native\n- * windowing sytem to draw native components.\n- * @author Tom Tromey <tromey@redhat.com>\n- * @date December 25, 2000\n- */\n+/**\n+  * This class contains the various \"system colors\" in use by the\n+  * native windowing system.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  */\n public final class SystemColor extends Color implements java.io.Serializable\n {\n-  /** The background color for the title bar of an active window.  */\n-  public static final SystemColor activeCaption\n-      = new SystemColor (ACTIVE_CAPTION);\n-  /** The border color of an active window.  */\n-  public static final SystemColor activeCaptionBorder\n-      = new SystemColor (ACTIVE_CAPTION_BORDER);\n-  /** The color of text in the title bar of an active window.  */\n-  public static final SystemColor activeCaptionText\n-      = new SystemColor (ACTIVE_CAPTION_TEXT);\n-  /** The background color.  */\n-  public static final SystemColor control = new SystemColor (CONTROL);\n-  /** The darkest color of an outline.  */\n-  public static final SystemColor controlDkShadow\n-      = new SystemColor (CONTROL_DK_SHADOW);\n-  /** The second brightest color of an outline.  */\n-  public static final SystemColor controlHighlight\n-      = new SystemColor (CONTROL_HIGHLIGHT);\n-  /** The brightest color of an outline.  */\n-  public static final SystemColor controlLtHighlight\n-      = new SystemColor (CONTROL_LT_HIGHLIGHT);\n-  /** The second darkest color of an outline.  */\n-  public static final SystemColor controlShadow\n-      = new SystemColor (CONTROL_SHADOW);\n-  /** The color of text in a label.  */\n-  public static final SystemColor controlText = new SystemColor (CONTROL_TEXT);\n-  /** The background color of the desktop.  */\n-  public static final SystemColor desktop = new SystemColor (DESKTOP);\n-  /** The background color for the title bar of an inactive window.  */\n-  public static final SystemColor inactiveCaption\n-      = new SystemColor (INACTIVE_CAPTION);\n-  /** The border color of an inactive window.  */\n-  public static final SystemColor inactiveCaptionBorder\n-      = new SystemColor (INACTIVE_CAPTION_BORDER);\n-  /** The color of text in the title ar of an inactive window.  */\n-  public static final SystemColor inactiveCaptionText\n-      = new SystemColor (INACTIVE_CAPTION_TEXT);\n-  /** The background color of tooltips. */\n-  public static final SystemColor info = new SystemColor (INFO);\n-  /** The color of text in tooltips.  */\n-  public static final SystemColor infoText = new SystemColor (INFO_TEXT);\n-  /** The background color of a menu.  */\n-  public static final SystemColor menu = new SystemColor (MENU);\n-  /** The color of text in a menu.  */\n-  public static final SystemColor menuText = new SystemColor (MENU_TEXT);\n-  /** The background color of a scrollbar.  */\n-  public static final SystemColor scrollbar = new SystemColor (SCROLLBAR);\n-  /** The background color of text components.  */\n-  public static final SystemColor text = new SystemColor (TEXT);\n-  /** The background color of highlighted text.  */\n-  public static final SystemColor textHighlight\n-      = new SystemColor (TEXT_HIGHLIGHT);\n-  /** The color of highlighted text.  */\n-  public static final SystemColor textHighlightText\n-      = new SystemColor (TEXT_HIGHLIGHT_TEXT);\n-  /** The color of inactive text.  */\n-  public static final SystemColor textInactiveText\n-      = new SystemColor (TEXT_INACTIVE_TEXT);\n-  /** The color of text in text components.  */\n-  public static final SystemColor textText = new SystemColor (TEXT_TEXT);\n-  /** The background color of a window.  */\n-  public static final SystemColor window = new SystemColor (WINDOW);\n-  /** The border color of a window.  */\n-  public static final SystemColor windowBorder\n-      = new SystemColor (WINDOW_BORDER);\n-  /** The color of text in a window.  */\n-  public static final SystemColor windowText = new SystemColor (WINDOW_TEXT);\n-\n-  public static final int DESKTOP = 0;\n-  public static final int ACTIVE_CAPTION = 1;\n-  public static final int ACTIVE_CAPTION_TEXT = 2;\n-  public static final int ACTIVE_CAPTION_BORDER = 3;\n-  public static final int INACTIVE_CAPTION = 4;\n-  public static final int INACTIVE_CAPTION_TEXT = 5;\n-  public static final int INACTIVE_CAPTION_BORDER = 6;\n-  public static final int WINDOW = 7;\n-  public static final int WINDOW_BORDER = 8;\n-  public static final int WINDOW_TEXT = 9;\n-  public static final int MENU = 10;\n-  public static final int MENU_TEXT = 11;\n-  public static final int TEXT = 12;\n-  public static final int TEXT_TEXT = 13;\n-  public static final int TEXT_HIGHLIGHT = 14;\n-  public static final int TEXT_HIGHLIGHT_TEXT = 15;\n-  public static final int TEXT_INACTIVE_TEXT = 16;\n-  public static final int CONTROL = 17;\n-  public static final int CONTROL_TEXT = 18;\n-  public static final int CONTROL_HIGHLIGHT = 19;\n-  public static final int CONTROL_LT_HIGHLIGHT = 20;\n-  public static final int CONTROL_SHADOW = 21;\n-  public static final int CONTROL_DK_SHADOW = 22;\n-  public static final int SCROLLBAR = 23;\n-  public static final int INFO = 24;\n-  public static final int INFO_TEXT = 25;\n-\n-  public static final int NUM_COLORS = 26;\n-\n-  private static final int rgbs[] =\n-  {\n-    0x005c5c,\n-    0x000080,\n-    0xffffff,\n-    0xc0c0c0,\n-    0x808080,\n-    0xc0c0c0,\n-    0xc0c0c0,\n-    0xffffff,\n-    0x000000,\n-    0x000000,\n-    0xc0c0c0,\n-    0x000000,\n-    0xc0c0c0,\n-    0x000000,\n-    0x000080,\n-    0xffffff,\n-    0x808080,\n-    0xc0c0c0,\n-    0x000000,\n-    0xffffff,\n-    0xe0e0e0,\n-    0x808080,\n-    0x000000,\n-    0xe0e0e0,\n-    0xe0e000,\n-    0x000000\n-  };\n-\n-  public int getRGB ()\n-  {\n-    return rgbs[rgba];\n-  }\n-\n-  public String toString ()\n-  {\n-    return \"[\" + getClass ().getName () + \" \" + rgba + \"]\";\n-  }\n-\n-  private SystemColor (int index)\n-  {\n-    super (index, true);\n-  }\n+\n+/*\n+ * Static Variables\n+ */\n+\n+/**\n+  * Array index of the desktop color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int DESKTOP = 0;\n+\n+/**\n+  * Array index of the active caption color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int ACTIVE_CAPTION = 1;\n+\n+/**\n+  * Array index of the active caption text color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int ACTIVE_CAPTION_TEXT = 2;\n+\n+/**\n+  * Array index of the active caption border color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int ACTIVE_CAPTION_BORDER = 3;\n+\n+/**\n+  * Array index of the inactive caption color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int INACTIVE_CAPTION = 4;\n+\n+/**\n+  * Array index of the inactive caption text color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int INACTIVE_CAPTION_TEXT = 5;\n+\n+/**\n+  * Array index of the inactive caption border color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int INACTIVE_CAPTION_BORDER = 6;\n+\n+/**\n+  * Array index of the window background color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int WINDOW = 7;\n+\n+/**\n+  * Array index of the window border color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int WINDOW_BORDER = 8;\n+\n+/**\n+  * Array index of the window text color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int WINDOW_TEXT = 9;\n+\n+/**\n+  * Array index of the menu background color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int MENU = 10;\n+\n+/**\n+  * Array index of the menu text color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int MENU_TEXT = 11;\n+\n+/**\n+  * Array index of the text background color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int TEXT = 12;\n+\n+/**\n+  * Array index of the text foreground color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int TEXT_TEXT = 13;\n+\n+/**\n+  * Array index of the highlighted text background color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int TEXT_HIGHLIGHT = 14;\n+\n+/**\n+  * Array index of the highlighted text foreground color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int TEXT_HIGHLIGHT_TEXT = 15;\n+\n+/**\n+  * Array index of the inactive text foreground color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int TEXT_INACTIVE_TEXT = 16;\n+\n+/**\n+  * Array index of the control background color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int CONTROL = 17;\n+\n+/**\n+  * Array index of the control text color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int CONTROL_TEXT = 18;\n+\n+/**\n+  * Array index of the highlighted control background color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int CONTROL_HIGHLIGHT = 19;\n+\n+/**\n+  * Array index of the lightly highlighted control background color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int CONTROL_LT_HIGHLIGHT = 20;\n+\n+/**\n+  * Array index of the shadowed control background color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int CONTROL_SHADOW = 21;\n+\n+/**\n+  * Array index of the darkly shadowed control background color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int CONTROL_DK_SHADOW = 22;\n+\n+/**\n+  * Array index of the scrollbar background color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int SCROLLBAR = 23;\n+\n+/**\n+  * Array index of the info background color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int INFO = 24;\n+\n+/**\n+  * Array index of the info text color.  Used by \n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int INFO_TEXT = 25;\n+\n+/**\n+  * The number of system colors. Used by\n+  * <code>Toolkit.loadSystemColors()</code>.\n+  */\n+public static final int NUM_COLORS = 26;\n+\n+/**\n+  * The desktop color.\n+  */\n+public static final SystemColor desktop;\n+\n+/**\n+  * The active caption background color.\n+  */\n+public static final SystemColor activeCaption;\n+\n+/**\n+  * The active caption text color.\n+  */\n+public static final SystemColor activeCaptionText;\n+\n+/**\n+  * The active caption border color.\n+  */\n+public static final SystemColor activeCaptionBorder;\n+\n+/**\n+  * The inactive caption background color.\n+  */\n+public static final SystemColor inactiveCaption;\n+\n+/**\n+  * The inactive caption text color.\n+  */\n+public static final SystemColor inactiveCaptionText;\n+\n+/**\n+  * The inactive caption border color.\n+  */\n+public static final SystemColor inactiveCaptionBorder;\n+\n+/**\n+  * The window background color.\n+  */\n+public static final SystemColor window;\n+\n+/**\n+  * The window border color.\n+  */\n+public static final SystemColor windowBorder;\n+\n+/**\n+  * The window text color.\n+  */\n+public static final SystemColor windowText;\n+\n+/**\n+  * The menu background color.\n+  */\n+public static final SystemColor menu;\n+\n+/**\n+  * The menu text color.\n+  */\n+public static final SystemColor menuText;\n+\n+/**\n+  * The text background color.\n+  */\n+public static final SystemColor text;\n+\n+/**\n+  * The text foreground color.\n+  */\n+public static final SystemColor textText;\n+\n+/**\n+  * The highlighted text background color.\n+  */\n+public static final SystemColor textHighlight;\n+\n+/**\n+  * The highlighted text foreground color.\n+  */\n+public static final SystemColor textHighlightText;\n+\n+/**\n+  * The inactive text color.\n+  */\n+public static final SystemColor textInactiveText;\n+\n+/**\n+  * The control background color.\n+  */\n+public static final SystemColor control;\n+\n+/**\n+  * The control text color.\n+  */\n+public static final SystemColor controlText;\n+\n+/**\n+  * The control highlight color.\n+  */\n+public static final SystemColor controlHighlight;\n+\n+/**\n+  * The control light highlight color.\n+  */\n+public static final SystemColor controlLtHighlight; \n+\n+/**\n+  * The control shadow color.\n+  */\n+public static final SystemColor controlShadow;\n+\n+/**\n+  * The control dark shadow color.\n+  */\n+public static final SystemColor controlDkShadow;\n+\n+/**\n+  * The scrollbar color.\n+  */\n+public static final SystemColor scrollbar;\n+\n+/**\n+  * The info text background color.\n+  */\n+public static final SystemColor info;\n+\n+/**\n+  * The info text foreground color.\n+  */\n+public static final SystemColor infoText;\n+\n+// Serialization version constant\n+private static final long serialVersionUID = 4503142729533789064L;\n+\n+static\n+{\n+  int[] sys_color_rgbs = new int[NUM_COLORS];\n+  Toolkit.getDefaultToolkit().loadSystemColors(sys_color_rgbs);\n+\n+  desktop = new SystemColor(sys_color_rgbs[DESKTOP]);\n+  activeCaption= new SystemColor(sys_color_rgbs[ACTIVE_CAPTION]);\n+  activeCaptionText= new SystemColor(sys_color_rgbs[ACTIVE_CAPTION_TEXT]);\n+  activeCaptionBorder = new SystemColor(sys_color_rgbs[ACTIVE_CAPTION_BORDER]);\n+  inactiveCaption = new SystemColor(sys_color_rgbs[INACTIVE_CAPTION]);\n+  inactiveCaptionText = new SystemColor(sys_color_rgbs[INACTIVE_CAPTION_TEXT]);\n+  inactiveCaptionBorder = \n+    new SystemColor(sys_color_rgbs[INACTIVE_CAPTION_BORDER]);\n+  window = new SystemColor(sys_color_rgbs[WINDOW]);\n+  windowBorder = new SystemColor(sys_color_rgbs[WINDOW_BORDER]);\n+  windowText = new SystemColor(sys_color_rgbs[WINDOW_TEXT]);\n+  menu = new SystemColor(sys_color_rgbs[MENU]);\n+  menuText = new SystemColor(sys_color_rgbs[MENU_TEXT]);\n+  text = new SystemColor(sys_color_rgbs[TEXT]);\n+  textText = new SystemColor(sys_color_rgbs[TEXT_TEXT]);\n+  textHighlight = new SystemColor(sys_color_rgbs[TEXT_HIGHLIGHT]);\n+  textHighlightText = new SystemColor(sys_color_rgbs[TEXT_HIGHLIGHT_TEXT]);\n+  textInactiveText = new SystemColor(sys_color_rgbs[TEXT_INACTIVE_TEXT]);\n+  control = new SystemColor(sys_color_rgbs[CONTROL]);\n+  controlText = new SystemColor(sys_color_rgbs[CONTROL_TEXT]);\n+  controlHighlight = new SystemColor(sys_color_rgbs[CONTROL_HIGHLIGHT]);\n+  controlLtHighlight = new SystemColor(sys_color_rgbs[CONTROL_LT_HIGHLIGHT]);\n+  controlShadow = new SystemColor(sys_color_rgbs[CONTROL_SHADOW]);\n+  controlDkShadow = new SystemColor(sys_color_rgbs[CONTROL_DK_SHADOW]);\n+  scrollbar = new SystemColor(sys_color_rgbs[SCROLLBAR]);\n+  info = new SystemColor(sys_color_rgbs[INFO]);\n+  infoText = new SystemColor(sys_color_rgbs[INFO_TEXT]);\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+private\n+SystemColor(int rgb)\n+{\n+  super(rgb);\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Methods\n+ */\n+\n+/**\n+  * Returns the RGB value for this color as an <code>int</code>.  The first\n+  * byte is the blue value, the second the green value, the third the\n+  * red value and the fourth is set to 0xFF.\n+  *\n+  * @return The RGB value.\n+  */\n+public int\n+getRGB()\n+{\n+  // Override only to be spec consistent.\n+  return(super.getRGB());\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a string describing this color.\n+  *\n+  * @return A string describing this color.\n+  */\n+public String\n+toString()\n+{\n+  return(\"SystemColor(R=\" + getRed() + \",G=\" + getGreen() + \",B=\" +\n+         getBlue() + \")\");\n }\n+\n+} // class SystemColor \n+"}, {"sha": "f4cfc4584c2e41fef2ec08f758c1cf31eae4bd03", "filename": "libjava/java/awt/peer/ButtonPeer.java", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FButtonPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FButtonPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FButtonPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,15 +1,36 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* ButtonPeer.java -- Peer interface for buttons\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface ButtonPeer extends ComponentPeer\n {\n-  void setLabel(String label);\n-}\n+\n+public abstract void setLabel(String label);\n+\n+} // interface ButtonPeer\n "}, {"sha": "5d09ef0315ebf810791336f4c9ba7ef2caceec71", "filename": "libjava/java/awt/peer/CanvasPeer.java", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FCanvasPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FCanvasPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FCanvasPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,13 +1,34 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* CanvasPeer.java -- Peer interface for a canvas\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface CanvasPeer extends ComponentPeer\n {\n-}\n+\n+} // interface CanvasPeer \n+"}, {"sha": "f12b7abd58994def75eeb7ee8974840a289d6b65", "filename": "libjava/java/awt/peer/CheckboxMenuItemPeer.java", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxMenuItemPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxMenuItemPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxMenuItemPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,15 +1,36 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* CheckboxMenuItemPeer.java -- Peer interface for checkbox menu items\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface CheckboxMenuItemPeer extends MenuItemPeer\n {\n-  void setState(boolean state);\n-}\n+\n+public abstract void setState(boolean state);\n+\n+} // interface CheckboxMenuItemPeer\n "}, {"sha": "9efc543673dacaae08249b41cd5bab23473a6338", "filename": "libjava/java/awt/peer/CheckboxPeer.java", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FCheckboxPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,16 +1,38 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* CheckboxPeer.java -- Interface for checkbox peer\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface CheckboxPeer extends ComponentPeer\n {\n-  void setCheckboxGroup(java.awt.CheckboxGroup group);\n-  void setLabel(String label);\n-  void setState(boolean state);\n-}\n+\n+public abstract void setCheckboxGroup(java.awt.CheckboxGroup group);\n+public abstract void setLabel(String label);\n+public abstract void setState(boolean state);\n+\n+} // interface CheckboxPeer\n+"}, {"sha": "5a2234bda1ea467e6a49c3887c6d2a30c7e50654", "filename": "libjava/java/awt/peer/ChoicePeer.java", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FChoicePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FChoicePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FChoicePeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,17 +1,39 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* ChoicePeer.java -- Peer for choice box\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface ChoicePeer extends ComponentPeer\n {\n-  void add(String item, int index);\n-  void remove(int index);\n-  void select(int index);\n-}\n+\n+public abstract void add(String item, int index);\n+public abstract void addItem(String item, int index);\n+public abstract void remove(int index);\n+public abstract void select(int index);\n+\n+} // interface ChoicePeer \n "}, {"sha": "2b2ae215ca792376eaf99ae42c15f47e4797b5d6", "filename": "libjava/java/awt/peer/ComponentPeer.java", "status": "modified", "additions": 61, "deletions": 32, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FComponentPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,10 +1,29 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* ComponentPeer.java -- Toplevel component peer\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n@@ -13,38 +32,48 @@\n \n public interface ComponentPeer\n {\n-  int checkImage(Image img, int width, int height, ImageObserver o);\n-  Image createImage(ImageProducer prod);\n-  Image createImage(int width, int height);\n-  void dispose();\n+  public int checkImage(Image img, int width, int height, \n+\t\t\tImageObserver ob);\n+  public Image createImage(ImageProducer prod);\n+  public Image createImage(int width, int height);\n+  public void disable();\n+  public void dispose();\n+  public void enable();\n+  public ColorModel getColorModel();\n+  public FontMetrics getFontMetrics(Font f);\n+  public Graphics getGraphics();\n+  public Point getLocationOnScreen();\n+  public Dimension getMinimumSize();\n+  public Dimension getPreferredSize();\n+  public Toolkit getToolkit();\n+  // The JCL says that handleEvent returns boolean.  However, we've\n+  // experimentally determined that it in fact actually returns void.\n+  public void handleEvent(AWTEvent e);\n+  public void hide();\n+  public boolean isFocusTraversable();\n+  public Dimension minimumSize();\n+  public Dimension preferredSize();\n+  public void paint(Graphics graphics);\n+  public boolean prepareImage(Image img, int width, int height,\n+\t\t\t\t       ImageObserver ob);\n+  public void print(Graphics graphics);\n+  public void repaint(long tm, int x, int y, int width, int height);\n+  public void requestFocus();\n+  public void reshape(int x, int y, int width, int height);\n+  public void setBackground(Color color);\n+  public void setBounds(int x, int y, int width, int height);\n+  public void setCursor(Cursor cursor);\n+  public void setEnabled(boolean enabled);\n+  public void setFont(Font font);\n+  public void setForeground(Color color);\n+  public void setVisible(boolean visible);\n+  public void show();\n \n   /** \n    * Get the graphics configuration of the component. The color model\n    * of the component can be derived from the configuration.\n    */\n   GraphicsConfiguration getGraphicsConfiguration();\n \n-  FontMetrics getFontMetrics(Font f);\n-  Graphics getGraphics();\n-  Point getLocationOnScreen();\n-  Dimension getMinimumSize();\n-  Dimension getPreferredSize();\n-  Toolkit getToolkit();\n-  // The JCL says that handleEvent returns boolean.  However, we've\n-  // experimentally determined that it in fact actually returns void.\n-  void handleEvent(AWTEvent e);\n-  boolean isFocusTraversable();\n-  void paint(Graphics graphics);\n-  boolean prepareImage(Image img, int width, int height, ImageObserver o);\n-  void print(Graphics graphics);\n-  void repaint(long tm, int x, int y, int width, int height);\n-  void requestFocus();\n-  void setBackground(Color color);\n-  void setBounds(int x, int y, int width, int height);\n-  void setCursor(Cursor cursor);\n-  void setEnabled(boolean enabled);\n-  void setEventMask(long eventMask);\n-  void setFont(Font font);\n-  void setForeground(Color color);\n-  void setVisible(boolean visible);\n+  public void setEventMask (long mask);\n }"}, {"sha": "ea08c006080fa295fe5d2be6f4b5a7e541e71009", "filename": "libjava/java/awt/peer/ContainerPeer.java", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FContainerPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FContainerPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FContainerPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,18 +1,41 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* ContainerPeer.java -- Interface for container peers\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n import java.awt.Insets;\n \n public interface ContainerPeer extends ComponentPeer\n {\n-  Insets getInsets();\n-  void beginValidate();\n-  void endValidate();\n-}\n+\n+public abstract Insets insets();\n+public abstract Insets getInsets();\n+public abstract void beginValidate();\n+public abstract void endValidate();\n+\n+} // interface ContainerPeer \n+"}, {"sha": "faa95f1b3510df1582de8081c130e2baadf3c1c0", "filename": "libjava/java/awt/peer/DialogPeer.java", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FDialogPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,15 +1,37 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* DialogPeer.java -- Interface for dialog box peer\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface DialogPeer extends WindowPeer\n {\n-  void setResizable(boolean resizeable);\n-  void setTitle(String title);\n-}\n+\n+public abstract void setResizable(boolean resizeable);\n+public abstract void setTitle(String title);\n+\n+} // interface DialogPeer \n+"}, {"sha": "549450eb033f9a7bf5607b913f39d7689dc0b9ee", "filename": "libjava/java/awt/peer/FileDialogPeer.java", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FFileDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FFileDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FFileDialogPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,18 +1,40 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* FileDialogPeer.java -- Interface for file selection dialog box peer\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n import java.io.FilenameFilter;\n \n public interface FileDialogPeer extends DialogPeer\n {\n-  void setDirectory(String dir);\n-  void setFile(String file);\n-  void setFilenameFilter(FilenameFilter filter);\n-}\n+\n+public abstract void setFile(String file);\n+public abstract void setDirectory(String dir);\n+public abstract void setFilenameFilter(FilenameFilter ff);\n+\n+} // interface FileDialogPeer \n+"}, {"sha": "9ca400e77ca6988bfe39687d25a468d49654d44b", "filename": "libjava/java/awt/peer/FontPeer.java", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FFontPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FFontPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FFontPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,13 +1,34 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* FontPeer.java -- Interface for font peers\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface FontPeer\n {\n-}\n+\n+} // interface FontPeer\n+"}, {"sha": "c90e84f98f9a8703eac89e304663de7a2e58aece", "filename": "libjava/java/awt/peer/FramePeer.java", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FFramePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FFramePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FFramePeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,10 +1,29 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* FramePeer.java -- Interface for frame peers\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n@@ -13,8 +32,11 @@\n \n public interface FramePeer extends WindowPeer\n {\n-  void setIconImage(Image image);\n-  void setMenuBar(MenuBar mb);\n-  void setResizable(boolean resizable);\n-  void setTitle(String title);\n-}\n+\n+public abstract void setIconImage(Image image);\n+public abstract void setMenuBar(MenuBar mb);\n+public abstract void setResizable(boolean resizable);\n+public abstract void setTitle(String title);\n+\n+} // interface FramePeer\n+"}, {"sha": "be7c4de1cd83d69029ba8f9f781634dfd34ebefa", "filename": "libjava/java/awt/peer/LabelPeer.java", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FLabelPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FLabelPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FLabelPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,15 +1,37 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* LabelPeer.java -- Interface for simple text lable peer\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface LabelPeer extends ComponentPeer\n {\n-  void setAlignment(int alignment);\n-  void setText(String text);\n-}\n+\n+public abstract void setAlignment(int alignment);\n+public abstract void setText(String text);\n+\n+} // interface LabelPeer \n+"}, {"sha": "ecca769b194b3ec3607ddeb91f5dd942b56e2925", "filename": "libjava/java/awt/peer/LightweightPeer.java", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FLightweightPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FLightweightPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FLightweightPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,13 +1,34 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* LightweightPeer.java -- Interface for lightweight peers\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface LightweightPeer extends ComponentPeer\n {\n-}\n+\n+} // interface LightweightPeer\n+"}, {"sha": "557629488287b80eb50b86a7057fd64f0469ac88", "filename": "libjava/java/awt/peer/ListPeer.java", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FListPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FListPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FListPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,23 +1,50 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* ListPeer.java -- Interface for list box peer\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n import java.awt.Dimension;\n \n public interface ListPeer extends ComponentPeer\n {\n-  void add(String item, int index);\n-  void delItems(int start_index, int end_index);\n-  void deselect(int index);\n-  int[] getSelectedIndexes();\n-  void makeVisible(int index);\n-  void removeAll();\n-  void select(int index);\n-  void setMultipleMode(boolean multipleMode);\n-}\n+\n+public abstract void add(String item, int index);\n+public abstract void addItem(String item, int index);\n+public abstract void clear();\n+public abstract void delItems(int start_index, int end_index);\n+public abstract void deselect(int index);\n+public abstract int[] getSelectedIndexes();\n+public abstract void makeVisible(int index);\n+public abstract Dimension minimumSize(int s);\n+public abstract Dimension preferredSize(int s);\n+public abstract void removeAll();\n+public abstract void select(int index);\n+public abstract void setMultipleMode(boolean multi);\n+public abstract void setMultipleSelections(boolean multi);\n+\n+} // interface ListPeer \n+"}, {"sha": "a9abce84b7b0b20bfa4185d7fc148b9b5b52c357", "filename": "libjava/java/awt/peer/MenuBarPeer.java", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FMenuBarPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FMenuBarPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FMenuBarPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,18 +1,40 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* MenuBarPeer.java -- Interface for menu bar peer\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n import java.awt.Menu;\n \n public interface MenuBarPeer extends MenuComponentPeer\n {\n-  void addHelpMenu(Menu menu);\n-  void add(Menu menu);\n-  void remove(int index);\n-}\n+\n+public abstract void addHelpMenu(Menu menu);\n+public abstract void addMenu(Menu menu);\n+public abstract void delMenu(int index);\n+\n+} // interface MenuBarPeer \n+"}, {"sha": "702579e27c2b5e3d528427d00cb8ce7a979eef11", "filename": "libjava/java/awt/peer/MenuComponentPeer.java", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FMenuComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FMenuComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FMenuComponentPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,14 +1,36 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* MenuComponentPeer.java -- \n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface MenuComponentPeer\n {\n-  void dispose();\n-}\n+\n+public abstract void dispose();\n+\n+} // interface MenuComponentPeer\n+"}, {"sha": "a158485a8414d1cf3a4fe5d55658275ce432c6b5", "filename": "libjava/java/awt/peer/MenuItemPeer.java", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FMenuItemPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FMenuItemPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FMenuItemPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,15 +1,39 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* MenuItemPeer.java -- Interface for menu item peers\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface MenuItemPeer extends MenuComponentPeer\n {\n-  void setEnabled(boolean enabled);\n-  void setLabel(String text);\n-}\n+\n+public abstract void disable();\n+public abstract void enable();\n+public abstract void setEnabled(boolean enabled);\n+public abstract void setLabel(String text);\n+\n+} // interface MenuItemPeer \n+"}, {"sha": "d347d422eaf388741f18f9bc65bef402f47b8320", "filename": "libjava/java/awt/peer/MenuPeer.java", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FMenuPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FMenuPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FMenuPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,18 +1,38 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* MenuPeer.java -- Interface for menu peers\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n import java.awt.MenuItem;\n \n public interface MenuPeer extends MenuItemPeer\n {\n-  void add(MenuItem item);\n-  void addSeparator();\n-  void remove(int index);\n+  public abstract void addItem (MenuItem item);\n+  public abstract void addSeparator ();\n+  public abstract void delItem (int index);\n }\n+"}, {"sha": "b41bee70306863dff9b989b8b9058ac77540b35e", "filename": "libjava/java/awt/peer/PanelPeer.java", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FPanelPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FPanelPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FPanelPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,13 +1,34 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* PanelPeer.java -- Interface for panel peers\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface PanelPeer extends ContainerPeer\n {\n-}\n+\n+} // interface PanelPeer\n+"}, {"sha": "5d0af8becba38a6305abcf324e9168519385f96c", "filename": "libjava/java/awt/peer/PopupMenuPeer.java", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FPopupMenuPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FPopupMenuPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FPopupMenuPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,16 +1,37 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* PopupMenuPeer.java -- Interface for popup menu peers\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-package java.awt.peer;\n \n-import java.awt.Event;\n+package java.awt.peer;\n \n+import java.awt.Component;\n public interface PopupMenuPeer extends MenuPeer\n {\n-  void show(Event e);\n-}\n+\n+public abstract void show (Component origin, int x, int y);\n+\n+} // interface PopupMenuPeer\n+"}, {"sha": "e71c172ebead665026acebc7020233aabfda0d10", "filename": "libjava/java/awt/peer/ScrollPanePeer.java", "status": "modified", "additions": 34, "deletions": 12, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FScrollPanePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FScrollPanePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FScrollPanePeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,21 +1,43 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* ScrollPanePeer.java -- Interface for scrollable panes\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n import java.awt.Adjustable;\n \n public interface ScrollPanePeer extends ContainerPeer\n {\n-  void childResized(int width, int height);\n-  int getHScrollbarHeight();\n-  int getVScrollbarWidth();\n-  void setScrollPosition(int x, int y);\n-  void setUnitIncrement(Adjustable adj, int increment);\n-  void setValue(Adjustable adj, int value);\n-}\n+\n+public abstract int getHScrollbarHeight();\n+public abstract int getVScrollbarWidth();\n+public abstract void setScrollPosition(int h, int v);\n+public abstract void childResized(int width, int height);\n+public abstract void setUnitIncrement(Adjustable item, int inc);\n+public abstract void setValue(Adjustable item, int value);\n+\n+} // interface ScollPanePeer\n+"}, {"sha": "51504054ce8f4ab9438a3f32da6867211d5c4e55", "filename": "libjava/java/awt/peer/ScrollbarPeer.java", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FScrollbarPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FScrollbarPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FScrollbarPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,16 +1,38 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* ScrollbarPeer.java -- Interface for scrollbar peers\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface ScrollbarPeer extends ComponentPeer\n {\n-  void setLineIncrement(int increment);\n-  void setPageIncrement(int increment);\n-  void setValues(int value, int visible, int minimum, int maximum);\n-}\n+\n+public abstract void setLineIncrement(int inc);\n+public abstract void setPageIncrement(int inc);\n+public abstract void setValues(int value, int visible, int min, int max);\n+\n+} // interface ScrollbarPeer \n+"}, {"sha": "3830d017f74c6b3d68d34a6be2758eb841a06542", "filename": "libjava/java/awt/peer/TextAreaPeer.java", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FTextAreaPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FTextAreaPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FTextAreaPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,17 +1,44 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* TextAreaPeer.java -- Interface for text area peers\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n import java.awt.Dimension;\n \n public interface TextAreaPeer extends TextComponentPeer\n {\n-  void insert(String text, int pos);\n-  void replaceRange(String text, int start, int end);\n-}\n+\n+public abstract void insert(String text, int pos);\n+public abstract void insertText(String text, int pos);\n+public abstract Dimension minimumSize(int rows, int cols);\n+public abstract Dimension getMinimumSize(int rows, int cols);\n+public abstract Dimension preferredSize(int rows, int cols);\n+public abstract Dimension getPreferredSize(int rows, int cols);\n+public abstract void replaceRange(String text, int start_pos, int end_pos);\n+public abstract void replaceText(String text, int start_pos, int end_pos);\n+\n+} // interface TextAreaPeer"}, {"sha": "0617993950eaca901ab898ddb3e1c890c7f5fca7", "filename": "libjava/java/awt/peer/TextComponentPeer.java", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FTextComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FTextComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FTextComponentPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,21 +1,43 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* TextComponentPeer.java -- Superclass interface for text components\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface TextComponentPeer extends ComponentPeer\n {\n-  int getCaretPosition();\n-  int getSelectionEnd();\n-  int getSelectionStart();\n-  String getText();\n-  void select(int start, int end);\n-  void setCaretPosition(int pos);\n-  void setEditable(boolean editable);\n-  void setText(String text);\n-}\n+\n+public abstract int getSelectionEnd();\n+public abstract int getSelectionStart();\n+public abstract String getText();\n+public abstract void setText(String text);\n+public abstract void select(int start_pos, int end_pos);\n+public abstract void setEditable(boolean editable);\n+public abstract int getCaretPosition();\n+public abstract void setCaretPosition(int pos);\n+\n+} // interface TextComponentPeer \n+"}, {"sha": "71f18544531bbe9d38dd7cab13b1348c3b5d0ddf", "filename": "libjava/java/awt/peer/TextFieldPeer.java", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FTextFieldPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FTextFieldPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FTextFieldPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,16 +1,43 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* TextFieldPeer.java -- Interface for text field peers\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n import java.awt.Dimension;\n \n public interface TextFieldPeer extends TextComponentPeer\n {\n-  void setEchoChar(char echo);\n-}\n+\n+public abstract Dimension minimumSize(int len);\n+public abstract Dimension preferredSize(int len);\n+public abstract Dimension getMinimumSize(int len);\n+public abstract Dimension getPreferredSize(int len);\n+public abstract void setEchoChar(char echo_char);\n+public abstract void setEchoCharacter(char echo_char);\n+\n+} // interface TextFieldPeer \n+"}, {"sha": "28fe81d1618782861e1453640d5bd7e32421e104", "filename": "libjava/java/awt/peer/WindowPeer.java", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda145054363dfa5eef640d526542bc6130a56d0/libjava%2Fjava%2Fawt%2Fpeer%2FWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fpeer%2FWindowPeer.java?ref=bda145054363dfa5eef640d526542bc6130a56d0", "patch": "@@ -1,15 +1,37 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* WindowPeer.java -- Interface for window peers\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt.peer;\n \n public interface WindowPeer extends ContainerPeer\n {\n-  void toBack();\n-  void toFront();\n-}\n+\n+public abstract void toBack();\n+public abstract void toFront();\n+\n+} // interface WindowPeer \n+"}]}