{"sha": "6734617cedcadfddfc33378ce824b4620381d91c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjczNDYxN2NlZGNhZGZkZGZjMzMzNzhjZTgyNGI0NjIwMzgxZDkxYw==", "commit": {"author": {"name": "Maroua Maalej", "email": "maalej@adacore.com", "date": "2018-05-23T10:22:41Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-23T10:22:41Z"}, "message": "[Ada] Fix of some permission rules of pointers in SPARK\n\nThis commit fixes bugs in the code that implements the rules for safe pointers\nin SPARK. This only affects SPARK tools, not compilation.\n\n  * Global variables should be handled differently compared\n    to parameters. The whole tree of an in global variable has the\n    permission Read-Only. In contrast, an in parameter has the\n    permission Read-Only for the first level and Read-Write permission\n    for suffixes.\n  * The suffix X of Integer'image(X) was not analyzed correctly.\n  * The instruction X'img was not dealt with.\n  * Shallow aliased types which are not initialized are now allowed\n    and analyzed.\n\nDealing with function inlining is not handled correctly yet.\n\n2018-05-23  Maroua Maalej  <maalej@adacore.com>\n\ngcc/ada/\n\n\t* sem_spark.adb: Fix of some permission rules of pointers in SPARK.\n\nFrom-SVN: r260583", "tree": {"sha": "1e991009a1ab7bcdb12be98cd9d244fce47187b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e991009a1ab7bcdb12be98cd9d244fce47187b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6734617cedcadfddfc33378ce824b4620381d91c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6734617cedcadfddfc33378ce824b4620381d91c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6734617cedcadfddfc33378ce824b4620381d91c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6734617cedcadfddfc33378ce824b4620381d91c/comments", "author": null, "committer": null, "parents": [{"sha": "a0fa549732f1a6ab26c7b904472a8f7d241dae39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0fa549732f1a6ab26c7b904472a8f7d241dae39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0fa549732f1a6ab26c7b904472a8f7d241dae39"}], "stats": {"total": 99, "additions": 64, "deletions": 35}, "files": [{"sha": "cd5cd128cf5310941e841de2bd16078fbe910e9e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6734617cedcadfddfc33378ce824b4620381d91c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6734617cedcadfddfc33378ce824b4620381d91c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6734617cedcadfddfc33378ce824b4620381d91c", "patch": "@@ -1,3 +1,7 @@\n+2018-05-23  Maroua Maalej  <maalej@adacore.com>\n+\n+\t* sem_spark.adb: Fix of some permission rules of pointers in SPARK.\n+\n 2018-05-23  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch5.adb (Preanalyze_Range): The pre-analysis of the domain of"}, {"sha": "ac04bc93a6c25f20213a00d4aa7c4b55070c5aca", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 60, "deletions": 35, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6734617cedcadfddfc33378ce824b4620381d91c/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6734617cedcadfddfc33378ce824b4620381d91c/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=6734617cedcadfddfc33378ce824b4620381d91c", "patch": "@@ -554,9 +554,10 @@ package body Sem_SPARK is\n \n       Super_Move,\n       --  Enhanced moving semantics (under 'Access). Checks that paths have\n-      --  Read_Write permission. After moving a path, its permission is set\n-      --  to No_Access, as well as the permission of its extensions and the\n-      --  permission of its prefixes up to the first Reference node.\n+      --  Read_Write permission (shallow types may have only Write permission).\n+      --  After moving a path, its permission is set to No_Access, as well as\n+      --  the permission of its extensions and the permission of its prefixes\n+      --  up to the first Reference node.\n \n       Borrow_Out,\n       --  Used for actual OUT parameters. Checks that paths have Write_Perm\n@@ -750,9 +751,10 @@ package body Sem_SPARK is\n    --  execution.\n \n    procedure Return_Parameter_Or_Global\n-     (Id   : Entity_Id;\n-      Mode : Formal_Kind;\n-      Subp : Entity_Id);\n+     (Id         : Entity_Id;\n+      Mode       : Formal_Kind;\n+      Subp       : Entity_Id;\n+      Global_Var : Boolean);\n    --  Auxiliary procedure to Return_Parameters and Return_Globals\n \n    procedure Return_Parameters (Subp : Entity_Id);\n@@ -813,8 +815,9 @@ package body Sem_SPARK is\n    --  global items with appropriate permissions.\n \n    procedure Setup_Parameter_Or_Global\n-     (Id   : Entity_Id;\n-      Mode : Formal_Kind);\n+     (Id         : Entity_Id;\n+      Mode       : Formal_Kind;\n+      Global_Var : Boolean);\n    --  Auxiliary procedure to Setup_Parameters and Setup_Globals\n \n    procedure Setup_Parameters (Subp : Entity_Id);\n@@ -1049,23 +1052,27 @@ package body Sem_SPARK is\n \n             declare\n                Elem : Perm_Tree_Access;\n-\n+               Deep : constant Boolean :=\n+                 Is_Deep (Etype (Defining_Identifier (Decl)));\n             begin\n                Elem := new Perm_Tree_Wrapper'\n                  (Tree =>\n                     (Kind                => Entire_Object,\n-                     Is_Node_Deep        =>\n-                       Is_Deep (Etype (Defining_Identifier (Decl))),\n+                     Is_Node_Deep        => Deep,\n                      Permission          => Read_Write,\n                      Children_Permission => Read_Write));\n \n                --  If unitialized declaration, then set to Write_Only. If a\n                --  pointer declaration, it has a null default initialization.\n-               if Nkind (Expression (Decl)) = N_Empty\n+               if No (Expression (Decl))\n                  and then not Has_Full_Default_Initialization\n                    (Etype (Defining_Identifier (Decl)))\n                  and then not Is_Access_Type\n                    (Etype (Defining_Identifier (Decl)))\n+                 --  Objects of shallow types are considered as always\n+                 --  initialized, leaving the checking of initialization to\n+                 --  flow analysis.\n+                 and then Deep\n                then\n                   Elem.all.Tree.Permission := Write_Only;\n                   Elem.all.Tree.Children_Permission := Write_Only;\n@@ -1209,6 +1216,9 @@ package body Sem_SPARK is\n                   Check_Node (Prefix (Expr));\n \n                when Name_Image =>\n+                  Check_List (Expressions (Expr));\n+\n+               when Name_Img =>\n                   Check_Node (Prefix (Expr));\n \n                when Name_SPARK_Mode =>\n@@ -2350,7 +2360,7 @@ package body Sem_SPARK is\n             | N_Use_Type_Clause\n             | N_Validate_Unchecked_Conversion\n             | N_Variable_Reference_Marker\n-         =>\n+            =>\n             null;\n \n          --  The following nodes are rewritten by semantic analysis\n@@ -3528,10 +3538,10 @@ package body Sem_SPARK is\n          when N_Identifier\n             | N_Expanded_Name\n          =>\n-            return Has_Alias_Deep (Etype (N));\n+            return Is_Aliased (Entity (N)) or else Has_Alias_Deep (Etype (N));\n \n          when N_Defining_Identifier =>\n-            return Has_Alias_Deep (Etype (N));\n+            return Is_Aliased (N) or else Has_Alias_Deep (Etype (N));\n \n          when N_Type_Conversion\n             | N_Unchecked_Type_Conversion\n@@ -4231,6 +4241,7 @@ package body Sem_SPARK is\n    procedure Process_Path (N : Node_Id) is\n       Root : constant Entity_Id := Get_Enclosing_Object (N);\n    begin\n+\n       --  We ignore if yielding to synchronized\n \n       if Present (Root)\n@@ -4242,7 +4253,8 @@ package body Sem_SPARK is\n       --  We ignore shallow unaliased. They are checked in flow analysis,\n       --  allowing backward compatibility.\n \n-      if not Has_Alias (N)\n+      if Current_Checking_Mode /= Super_Move\n+        and then not Has_Alias (N)\n         and then Is_Shallow (Etype (N))\n       then\n          return;\n@@ -4259,6 +4271,7 @@ package body Sem_SPARK is\n             when Read =>\n                if Perm_N not in Read_Perm then\n                   Perm_Error (N, Read_Only, Perm_N);\n+                  return;\n                end if;\n \n             --  If shallow type no need for RW, only R\n@@ -4267,12 +4280,14 @@ package body Sem_SPARK is\n                if Is_Shallow (Etype (N)) then\n                   if Perm_N not in Read_Perm then\n                      Perm_Error (N, Read_Only, Perm_N);\n+                     return;\n                   end if;\n                else\n                   --  Check permission RW if deep\n \n                   if Perm_N /= Read_Write then\n                      Perm_Error (N, Read_Write, Perm_N);\n+                     return;\n                   end if;\n \n                   declare\n@@ -4303,6 +4318,7 @@ package body Sem_SPARK is\n             when Super_Move =>\n                if Perm_N /= Read_Write then\n                   Perm_Error (N, Read_Write, Perm_N);\n+                  return;\n                end if;\n \n                declare\n@@ -4330,6 +4346,7 @@ package body Sem_SPARK is\n             when Assign =>\n                if Perm_N not in Write_Perm then\n                   Perm_Error (N, Write_Only, Perm_N);\n+                  return;\n                end if;\n \n                --  If the tree has an array component, then the permissions do\n@@ -4341,7 +4358,7 @@ package body Sem_SPARK is\n \n                --  Same if has function component\n \n-               if Has_Function_Component (N) then\n+               if Has_Function_Component (N) then  --  Dead code?\n                   return;\n                end if;\n \n@@ -4534,7 +4551,7 @@ package body Sem_SPARK is\n             if Ekind (E) = E_Abstract_State then\n                null;\n             else\n-               Return_Parameter_Or_Global (E, Kind, Subp);\n+               Return_Parameter_Or_Global (E, Kind, Subp, Global_Var => True);\n             end if;\n             Next_Global (Item);\n          end loop;\n@@ -4580,9 +4597,10 @@ package body Sem_SPARK is\n    --------------------------------\n \n    procedure Return_Parameter_Or_Global\n-     (Id   : Entity_Id;\n-      Mode : Formal_Kind;\n-      Subp : Entity_Id)\n+     (Id         : Entity_Id;\n+      Mode       : Formal_Kind;\n+      Subp       : Entity_Id;\n+      Global_Var : Boolean)\n    is\n       Elem : constant Perm_Tree_Access := Get (Current_Perm_Env, Id);\n       pragma Assert (Elem /= null);\n@@ -4591,13 +4609,18 @@ package body Sem_SPARK is\n       --  Shallow unaliased parameters and globals cannot introduce pointer\n       --  aliasing.\n \n-      if not Has_Alias (Id) and then Is_Shallow (Etype (Id)) then\n+      if not Has_Alias (Id)\n+        and then Is_Shallow (Etype (Id))\n+      then\n          null;\n \n       --  Observed IN parameters and globals need not return a permission to\n       --  the caller.\n \n-      elsif Mode = E_In_Parameter and then not Is_Borrowed_In (Id) then\n+      elsif Mode = E_In_Parameter\n+        and then (not Is_Borrowed_In (Id)\n+                   or else Global_Var)\n+      then\n          null;\n \n       --  All other parameters and globals should return with mode RW to the\n@@ -4624,7 +4647,7 @@ package body Sem_SPARK is\n    begin\n       Formal := First_Formal (Subp);\n       while Present (Formal) loop\n-         Return_Parameter_Or_Global (Formal, Ekind (Formal), Subp);\n+         Return_Parameter_Or_Global (Formal, Ekind (Formal), Subp, False);\n          Next_Formal (Formal);\n       end loop;\n    end Return_Parameters;\n@@ -4877,6 +4900,7 @@ package body Sem_SPARK is\n       case Kind (C) is\n          when Entire_Object =>\n             pragma Assert (Children_Permission (C) = Read_Write);\n+            --  Maroua: Children could have read_only perm. Why Read_Write?\n             C.all.Tree.Permission := Read_Write;\n \n          when Reference =>\n@@ -4888,9 +4912,9 @@ package body Sem_SPARK is\n          when Array_Component =>\n             pragma Assert (C.all.Tree.Get_Elem /= null);\n \n-            --  Given that it is not possible to know which element has been\n-            --  assigned, then the permissions do not get changed in case of\n-            --  Array_Component.\n+           --  Given that it is not possible to know which element has been\n+           --  assigned, then the permissions do not get changed in case of\n+           --  Array_Component.\n \n             null;\n \n@@ -4901,8 +4925,8 @@ package body Sem_SPARK is\n                Comp : Perm_Tree_Access;\n \n             begin\n-               --  We take the Glb of all the descendants, and then update the\n-               --  permission of the node with it.\n+            --  We take the Glb of all the descendants, and then update the\n+            --  permission of the node with it.\n                Comp := Perm_Tree_Maps.Get_First (Component (C));\n                while Comp /= null loop\n                   Perm := Glb (Perm, Permission (Comp));\n@@ -6081,7 +6105,7 @@ package body Sem_SPARK is\n             if Ekind (E) = E_Abstract_State then\n                null;\n             else\n-               Setup_Parameter_Or_Global (E, Kind);\n+               Setup_Parameter_Or_Global (E, Kind, Global_Var => True);\n             end if;\n             Next_Global (Item);\n          end loop;\n@@ -6127,8 +6151,9 @@ package body Sem_SPARK is\n    -------------------------------\n \n    procedure Setup_Parameter_Or_Global\n-     (Id   : Entity_Id;\n-      Mode : Formal_Kind)\n+     (Id         : Entity_Id;\n+      Mode       : Formal_Kind;\n+      Global_Var : Boolean)\n    is\n       Elem : Perm_Tree_Access;\n \n@@ -6145,7 +6170,7 @@ package body Sem_SPARK is\n \n             --  Borrowed IN: RW for everybody\n \n-            if Is_Borrowed_In (Id) then\n+            if Is_Borrowed_In (Id) and not Global_Var then\n                Elem.all.Tree.Permission := Read_Write;\n                Elem.all.Tree.Children_Permission := Read_Write;\n \n@@ -6182,9 +6207,9 @@ package body Sem_SPARK is\n    begin\n       Formal := First_Formal (Subp);\n       while Present (Formal) loop\n-         Setup_Parameter_Or_Global (Formal, Ekind (Formal));\n+         Setup_Parameter_Or_Global\n+           (Formal, Ekind (Formal), Global_Var => False);\n          Next_Formal (Formal);\n       end loop;\n    end Setup_Parameters;\n-\n end Sem_SPARK;"}]}