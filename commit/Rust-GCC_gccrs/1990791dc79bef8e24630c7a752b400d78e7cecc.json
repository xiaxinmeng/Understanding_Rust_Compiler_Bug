{"sha": "1990791dc79bef8e24630c7a752b400d78e7cecc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk5MDc5MWRjNzliZWY4ZTI0NjMwYzdhNzUyYjQwMGQ3OGU3Y2VjYw==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2007-07-25T07:34:52Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2007-07-25T07:34:52Z"}, "message": "struct-layout-1_generate.c (COMPAT_PRLL): Define and use throughout as long long printf format specifier.\n\n\t* gcc.dg/compat/struct-layout-1_generate.c (COMPAT_PRLL):\n\tDefine and use throughout as long long printf format specifier.\n\t* g++.dg/compat/struct-layout-1_generate.c (COMPAT_PRLL):\n\tLikewise.\n\nFrom-SVN: r126903", "tree": {"sha": "df6cbbe388aa51cdeb91b1d1197c088b2e60d094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df6cbbe388aa51cdeb91b1d1197c088b2e60d094"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1990791dc79bef8e24630c7a752b400d78e7cecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1990791dc79bef8e24630c7a752b400d78e7cecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1990791dc79bef8e24630c7a752b400d78e7cecc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1990791dc79bef8e24630c7a752b400d78e7cecc/comments", "author": null, "committer": null, "parents": [{"sha": "f4f29b599812c8790f6d7903f5da8ca211c7657e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4f29b599812c8790f6d7903f5da8ca211c7657e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4f29b599812c8790f6d7903f5da8ca211c7657e"}], "stats": {"total": 68, "additions": 50, "deletions": 18}, "files": [{"sha": "8b2dda7f07f3bfc73b997eeb26b04684880cc8a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1990791dc79bef8e24630c7a752b400d78e7cecc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1990791dc79bef8e24630c7a752b400d78e7cecc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1990791dc79bef8e24630c7a752b400d78e7cecc", "patch": "@@ -1,3 +1,10 @@\n+2007-07-25  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\t* gcc.dg/compat/struct-layout-1_generate.c (COMPAT_PRLL):\n+\tDefine and use throughout as long long printf format specifier.\n+\t* g++.dg/compat/struct-layout-1_generate.c (COMPAT_PRLL):\n+\tLikewise.\n+\n 2007-07-24  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t*  gcc.dg/dfp/fe-convert-2.c: Unconditionally enable testing"}, {"sha": "49608f9481c4267f5d5a6a0892095c13a66e8e92", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1990791dc79bef8e24630c7a752b400d78e7cecc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1990791dc79bef8e24630c7a752b400d78e7cecc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=1990791dc79bef8e24630c7a752b400d78e7cecc", "patch": "@@ -36,6 +36,12 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n # error Need 64-bit long long\n #endif\n \n+#if defined __MSVCRT__ \n+#define COMPAT_PRLL \"I64\"\n+#else \n+#define COMPAT_PRLL \"ll\"\n+#endif\n+\n typedef unsigned int hashval_t;\n \n enum TYPE\n@@ -778,7 +784,7 @@ output_FNB (char mode, struct entry *e)\n \tm &= e->len > 1 ? (1ULL << (e->len - 1)) - 1 : 1;\n       l1 &= m;\n       l2 &= m;\n-      fprintf (outfile, \"%s%llu%s,%s%llu%s\",\n+      fprintf (outfile, \"%s%\" COMPAT_PRLL \"u%s,%s%\" COMPAT_PRLL \"u%s\",\n \t       (signs & 1) ? \"-\" : \"\", l1, l1 > 2147483647 ? \"LL\" : \"\",\n \t       (signs & 2) ? \"-\" : \"\", l2, l2 > 2147483647 ? \"LL\" : \"\");\n       break;\n@@ -788,7 +794,8 @@ output_FNB (char mode, struct entry *e)\n \tm &= (1ULL << e->len) - 1;\n       l1 &= m;\n       l2 &= m;\n-      fprintf (outfile, \"%lluU%s,%lluU%s\", l1, l1 > 4294967295U ? \"LL\" : \"\",\n+      fprintf (outfile,\"%\" COMPAT_PRLL \"uU%s,%\" COMPAT_PRLL \"uU%s\",\n+\t       l1, l1 > 4294967295U ? \"LL\" : \"\",\n \t       l2, l2 > 4294967295U ? \"LL\" : \"\");\n       break;\n     case TYPE_FLOAT:\n@@ -802,7 +809,8 @@ output_FNB (char mode, struct entry *e)\n       if (e->type->maxval == 0)\n \tfputs (\"e0_0,e0_0\", outfile);\n       else if (e->type->maxval == 1)\n-\tfprintf (outfile, \"e1_%lld,e1_%lld\", l1 & 1, l2 & 1);\n+\tfprintf (outfile, \"e1_%\" COMPAT_PRLL \"d,e1_%\" COMPAT_PRLL \"d\",\n+\t\t l1 & 1, l2 & 1);\n       else\n \t{\n \t  p = strchr (e->type->name, '\\0');\n@@ -814,7 +822,8 @@ output_FNB (char mode, struct entry *e)\n \t    l1 += e->type->maxval - 6;\n \t  if (l2 > 3)\n \t    l2 += e->type->maxval - 6;\n-\t  fprintf (outfile, \"e%s_%lld,e%s_%lld\", p, l1, p, l2);\n+\t  fprintf (outfile, \"e%s_%\" COMPAT_PRLL \"d,e%s_%\" COMPAT_PRLL \"d\",\n+\t\t   p, l1, p, l2);\n \t}\n       break;\n     case TYPE_SENUM:\n@@ -823,7 +832,7 @@ output_FNB (char mode, struct entry *e)\n       p++;\n       l1 %= 7;\n       l2 %= 7;\n-      fprintf (outfile, \"e%s_%s%lld,e%s_%s%lld\",\n+      fprintf (outfile, \"e%s_%s%\" COMPAT_PRLL \"d,e%s_%s%\" COMPAT_PRLL \"d\",\n \t       p, l1 < 3 ? \"m\" : \"\",\n \t       l1 == 3 ? 0LL : e->type->maxval - (l1 & 3),\n \t       p, l2 < 3 ? \"m\" : \"\",\n@@ -832,13 +841,15 @@ output_FNB (char mode, struct entry *e)\n     case TYPE_PTR:\n       l1 %= 256;\n       l2 %= 256;\n-      fprintf (outfile, \"(%s)&intarray[%lld],(%s)&intarray[%lld]\",\n+      fprintf (outfile,\n+\t      \"(%s)&intarray[%\" COMPAT_PRLL \"d], (%s)&intarray[%\" COMPAT_PRLL \"d]\",\n \t       e->type->name, l1, e->type->name, l2);\n       break;\n     case TYPE_FNPTR:\n       l1 %= 10;\n       l2 %= 10;\n-      fprintf (outfile, \"fn%lld,fn%lld\", l1, l2);\n+      fprintf (outfile,\n+\t       \"fn%\" COMPAT_PRLL \"d,fn%\" COMPAT_PRLL \"d\", l1, l2);\n       break;\n     default:\n       abort ();"}, {"sha": "3e86f6ca66111dc6452039883c1ddcd65307c3d1", "filename": "gcc/testsuite/gcc.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1990791dc79bef8e24630c7a752b400d78e7cecc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1990791dc79bef8e24630c7a752b400d78e7cecc/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=1990791dc79bef8e24630c7a752b400d78e7cecc", "patch": "@@ -36,6 +36,12 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n # error Need 64-bit long long\n #endif\n \n+#if defined __MSVCRT__ \n+#define COMPAT_PRLL \"I64\"\n+#else \n+#define COMPAT_PRLL \"ll\"\n+#endif\n+\n typedef unsigned int hashval_t;\n \n enum TYPE\n@@ -1038,7 +1044,7 @@ output_FNB (char mode, struct entry *e)\n \tm &= e->len > 1 ? (1ULL << (e->len - 1)) - 1 : 1;\n       l1 &= m;\n       l2 &= m;\n-      fprintf (outfile, \"%s%llu%s,%s%llu%s\",\n+      fprintf (outfile, \"%s%\" COMPAT_PRLL \"u%s,%s%\" COMPAT_PRLL \"u%s\",\n \t       (signs & 1) ? \"-\" : \"\", l1, l1 > 2147483647 ? \"LL\" : \"\",\n \t       (signs & 2) ? \"-\" : \"\", l2, l2 > 2147483647 ? \"LL\" : \"\");\n       break;\n@@ -1048,7 +1054,8 @@ output_FNB (char mode, struct entry *e)\n \tm &= (1ULL << e->len) - 1;\n       l1 &= m;\n       l2 &= m;\n-      fprintf (outfile, \"%lluU%s,%lluU%s\", l1, l1 > 4294967295U ? \"LL\" : \"\",\n+      fprintf (outfile, \"%\" COMPAT_PRLL \"uU%s,%\" COMPAT_PRLL \"uU%s\",\n+\t       l1, l1 > 4294967295U ? \"LL\" : \"\",\n \t       l2, l2 > 4294967295U ? \"LL\" : \"\");\n       break;\n     case TYPE_FLOAT:\n@@ -1085,29 +1092,33 @@ output_FNB (char mode, struct entry *e)\n       signs = generate_random () & 3;\n       l1 &= e->type->maxval;\n       l2 &= e->type->maxval;\n-      fprintf (outfile, \"CINT(%s%llu%s,%s%llu%s),\",\n+      fprintf (outfile,\n+\t       \"CINT(%s%\" COMPAT_PRLL \"u%s,%s%\" COMPAT_PRLL \"u%s),\",\n \t       (signs & 1) ? \"-\" : \"\", l1, l1 > 2147483647 ? \"LL\" : \"\",\n \t       (signs & 2) ? \"-\" : \"\", l2, l2 > 2147483647 ? \"LL\" : \"\");\n       signs = generate_random () & 3;\n       l1 = getrandll ();\n       l2 = getrandll ();\n       l1 &= e->type->maxval;\n       l2 &= e->type->maxval;\n-      fprintf (outfile, \"CINT(%s%llu%s,%s%llu%s)\",\n+      fprintf (outfile,\n+\t       \"CINT(%s%\" COMPAT_PRLL \"u%s,%s%\" COMPAT_PRLL \"u%s)\",\n \t       (signs & 1) ? \"-\" : \"\", l1, l1 > 2147483647 ? \"LL\" : \"\",\n \t       (signs & 2) ? \"-\" : \"\", l2, l2 > 2147483647 ? \"LL\" : \"\");\n       break;\n     case TYPE_CUINT:\n       l1 &= e->type->maxval;\n       l2 &= e->type->maxval;\n-      fprintf (outfile, \"CINT(%lluU%s,%lluU%s),\",\n+      fprintf (outfile,\n+\t       \"CINT(%\" COMPAT_PRLL \"uU%s,%\" COMPAT_PRLL \"uU%s),\",\n \t       l1, l1 > 4294967295U ? \"LL\" : \"\",\n \t       l2, l2 > 4294967295U ? \"LL\" : \"\");\n       l1 = getrandll ();\n       l2 = getrandll ();\n       l1 &= e->type->maxval;\n       l2 &= e->type->maxval;\n-      fprintf (outfile, \"CINT(%lluU%s,%lluU%s)\",\n+      fprintf (outfile,\n+\t       \"CINT(%\" COMPAT_PRLL \"uU%s,%\" COMPAT_PRLL \"uU%s)\",\n \t       l1, l1 > 4294967295U ? \"LL\" : \"\",\n \t       l2, l2 > 4294967295U ? \"LL\" : \"\");\n       break;\n@@ -1131,7 +1142,8 @@ output_FNB (char mode, struct entry *e)\n       if (e->type->maxval == 0)\n \tfputs (\"e0_0,e0_0\", outfile);\n       else if (e->type->maxval == 1)\n-        fprintf (outfile, \"e1_%lld,e1_%lld\", l1 & 1, l2 & 1);\n+        fprintf (outfile, \"e1_%\" COMPAT_PRLL \"d,e1_%\" COMPAT_PRLL \"d\",\n+\t\t l1 & 1, l2 & 1);\n       else\n         {\n \t  p = strchr (e->type->name, '\\0');\n@@ -1143,7 +1155,8 @@ output_FNB (char mode, struct entry *e)\n             l1 += e->type->maxval - 6;\n           if (l2 > 3)\n             l2 += e->type->maxval - 6;\n-\t  fprintf (outfile, \"e%s_%lld,e%s_%lld\", p, l1, p, l2);\n+\t  fprintf (outfile, \"e%s_%\" COMPAT_PRLL \"d,e%s_%\" COMPAT_PRLL \"d\",\n+\t           p, l1, p, l2);\n         }\n       break;\n     case TYPE_SENUM:\n@@ -1152,7 +1165,7 @@ output_FNB (char mode, struct entry *e)\n       p++;\n       l1 %= 7;\n       l2 %= 7;\n-      fprintf (outfile, \"e%s_%s%lld,e%s_%s%lld\",\n+      fprintf (outfile, \"e%s_%s%\" COMPAT_PRLL \"d,e%s_%s%\" COMPAT_PRLL \"d\",\n \t       p, l1 < 3 ? \"m\" : \"\",\n \t       l1 == 3 ? 0LL : e->type->maxval - (l1 & 3),\n \t       p, l2 < 3 ? \"m\" : \"\",\n@@ -1161,13 +1174,14 @@ output_FNB (char mode, struct entry *e)\n     case TYPE_PTR:\n       l1 %= 256;\n       l2 %= 256;\n-      fprintf (outfile, \"(%s)&intarray[%lld],(%s)&intarray[%lld]\",\n+      fprintf (outfile,\n+\t       \"(%s)&intarray[%\" COMPAT_PRLL \"d], (%s)&intarray[%\" COMPAT_PRLL \"d]\",\n \t       e->type->name, l1, e->type->name, l2);\n       break;\n     case TYPE_FNPTR:\n       l1 %= 10;\n       l2 %= 10;\n-      fprintf (outfile, \"fn%lld,fn%lld\", l1, l2);\n+      fprintf (outfile, \"fn%\" COMPAT_PRLL \"d,fn%\" COMPAT_PRLL \"d\", l1, l2);\n       break;\n     default:\n       abort ();"}]}