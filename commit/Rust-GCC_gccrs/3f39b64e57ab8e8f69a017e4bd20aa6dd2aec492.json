{"sha": "3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YzOWI2NGU1N2FiOGU4ZjY5YTAxN2U0YmQyMGFhNmRkMmFlYzQ5Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-28T09:30:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-28T09:30:41Z"}, "message": "xfail and improve some failing libgomp tests [PR81690]\n\nWith the patch I've posted today to fix up declare variant LTO handling,\nTobias reported the patch still doesn't work, and there are two\nreasons for that.\nOne is that when the base function is marked implicitly as declare target,\nwe don't mark also implicitly the variants.  I'll need to ask on omp-lang\nabout details for that, but generally the compiler should do it some way.\nThe other one is that the way base_delay is written, it will always\ncall the usleep function, which is undesirable for nvptx.  While the\ncompiler will replace all direct calls to base_delay to nvptx_delay,\nthe base_delay definition which calls usleep stays.\n\n2020-10-28  Jakub Jelinek  <jakub@redhat.com>\n\t    Tom de Vries  <tdevries@suse.de>\n\n\tPR testsuite/81690\n\t* testsuite/libgomp.c/usleep.h: New file.\n\t* testsuite/libgomp.c/target-32.c: Include usleep.h.\n\t(main): Use tgt_usleep instead of usleep.\n\t* testsuite/libgomp.c/thread-limit-2.c: Include usleep.h.\n\t(main): Use tgt_usleep instead of usleep.", "tree": {"sha": "d01be8c3419211f4d591d1aa708ecf516d20fd8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d01be8c3419211f4d591d1aa708ecf516d20fd8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f165ef89c08ddabb19583e45e8a6819f810d95ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f165ef89c08ddabb19583e45e8a6819f810d95ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f165ef89c08ddabb19583e45e8a6819f810d95ab"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "1444523615eaf127a913e5b8b5f628d2ce7f41f6", "filename": "libgomp/testsuite/libgomp.c/target-32.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-32.c?ref=3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492", "patch": "@@ -1,5 +1,6 @@\n #include <stdlib.h>\n #include <unistd.h>\n+#include \"usleep.h\"\n \n int main ()\n {\n@@ -18,28 +19,28 @@ int main ()\n \n     #pragma omp target nowait map(alloc: b) depend(in: d[2]) depend(out: d[3])\n     {\n-      usleep (1000);\n+      tgt_usleep (1000);\n       #pragma omp atomic update\n       b |= 4;\n     }\n \n     #pragma omp target nowait map(alloc: b) depend(in: d[2]) depend(out: d[4])\n     {\n-      usleep (5000);\n+      tgt_usleep (5000);\n       #pragma omp atomic update\n       b |= 1;\n     }\n \n     #pragma omp target nowait map(alloc: c) depend(in: d[3], d[4]) depend(out: d[5])\n     {\n-      usleep (5000);\n+      tgt_usleep (5000);\n       #pragma omp atomic update\n       c |= 8;\n     }\n \n     #pragma omp target nowait map(alloc: c) depend(in: d[3], d[4]) depend(out: d[6])\n     {\n-      usleep (1000);\n+      tgt_usleep (1000);\n       #pragma omp atomic update\n       c |= 2;\n     }"}, {"sha": "dc247a714fcf69bebe88924d24cae7299109b35b", "filename": "libgomp/testsuite/libgomp.c/thread-limit-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fthread-limit-2.c?ref=3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492", "patch": "@@ -4,6 +4,7 @@\n #include <stdlib.h>\n #include <unistd.h>\n #include <omp.h>\n+#include \"usleep.h\"\n \n int\n main ()\n@@ -48,7 +49,7 @@ main ()\n \t  v = ++cnt;\n \t  if (v > 6)\n \t    abort ();\n-\t  usleep (10000);\n+\t  tgt_usleep (10000);\n \t  #pragma omp atomic\n \t  --cnt;\n \t}"}, {"sha": "c01aaa0a88f143c20df53eaad511963a5bc440e6", "filename": "libgomp/testsuite/libgomp.c/usleep.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492/libgomp%2Ftestsuite%2Flibgomp.c%2Fusleep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492/libgomp%2Ftestsuite%2Flibgomp.c%2Fusleep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fusleep.h?ref=3f39b64e57ab8e8f69a017e4bd20aa6dd2aec492", "patch": "@@ -0,0 +1,24 @@\n+#include <unistd.h>\n+\n+int\n+nvptx_usleep (useconds_t d)\n+{\n+  /* This function serves as a replacement for usleep in\n+     this test case.  It does not even attempt to be functionally\n+     equivalent  - we just want some sort of delay. */\n+  int i;\n+  int N = d * 2000;\n+  for (i = 0; i < N; i++)\n+    asm volatile (\"\" : : : \"memory\");\n+  return 0;\n+}\n+\n+#pragma omp declare variant (nvptx_usleep) match(construct={target},device={arch(nvptx)})\n+#pragma omp declare variant (usleep) match(user={condition(1)})\n+int\n+tgt_usleep (useconds_t d)\n+{\n+  return 0;\n+}\n+\n+#pragma omp declare target to (nvptx_usleep, tgt_usleep)"}]}