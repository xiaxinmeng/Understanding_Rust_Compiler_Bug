{"sha": "4252ccd73701a330db365ccd39829e27d0d3b42d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI1MmNjZDczNzAxYTMzMGRiMzY1Y2NkMzk4MjllMjdkMGQzYjQyZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-06-18T22:17:57Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-06-18T22:17:57Z"}, "message": "PR middle-end/85602 - -Wsizeof-pointer-memaccess for strncat with size of source\n\ngcc/c-family/ChangeLog:\n\n\tPR middle-end/85602\n\t* c-warn.c (sizeof_pointer_memaccess_warning): Check for attribute\n\tnonstring.\n\ngcc/ChangeLog:\n\n\tPR middle-end/85602\n\t* calls.c (maybe_warn_nonstring_arg): Handle strncat.\n\t* tree-ssa-strlen.c (is_strlen_related_p): Make extern.\n\tHandle integer subtraction.\n\t(maybe_diag_stxncpy_trunc): Handle nonstring source arguments.\n\t* tree-ssa-strlen.h (is_strlen_related_p): Declare.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/85602\n\t* gcc.dg/attr-nonstring-2.c: Adjust text of expected warning.\n\t* c-c++-common/attr-nonstring-8.c: New test.\n\nFrom-SVN: r261718", "tree": {"sha": "18e21cecd1210c34cebb0fd5809861a217fbf0eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18e21cecd1210c34cebb0fd5809861a217fbf0eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4252ccd73701a330db365ccd39829e27d0d3b42d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4252ccd73701a330db365ccd39829e27d0d3b42d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4252ccd73701a330db365ccd39829e27d0d3b42d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4252ccd73701a330db365ccd39829e27d0d3b42d/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e03592e40e7da85f9779ea1988a69f154d1ba7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e03592e40e7da85f9779ea1988a69f154d1ba7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e03592e40e7da85f9779ea1988a69f154d1ba7f"}], "stats": {"total": 299, "additions": 279, "deletions": 20}, "files": [{"sha": "239d08aa6a181773a74b7ee0e7af782999a5f955", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4252ccd73701a330db365ccd39829e27d0d3b42d", "patch": "@@ -1,3 +1,12 @@\n+2018-06-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/85602\n+\t* calls.c (maybe_warn_nonstring_arg): Handle strncat.\n+\t* tree-ssa-strlen.c (is_strlen_related_p): Make extern.\n+\tHandle integer subtraction.\n+\t(maybe_diag_stxncpy_trunc): Handle nonstring source arguments.\n+\t* tree-ssa-strlen.h (is_strlen_related_p): Declare.\n+\n 2018-06-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* config/frv/frv-protos.h (frv_ifcvt_modify_insn): Strengthen 3rd"}, {"sha": "18388517e12f31805e0552d829fd3dfcc84e9a65", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4252ccd73701a330db365ccd39829e27d0d3b42d", "patch": "@@ -1,3 +1,9 @@\n+2018-06-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/85602\n+\t* c-warn.c (sizeof_pointer_memaccess_warning): Check for attribute\n+\tnonstring.\n+\n 2018-06-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* c-common.c (c_common_truthvalue_conversion): Handle ABSU_EXPR."}, {"sha": "d34d6672937c539c394caee44369e983ab4315d5", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=4252ccd73701a330db365ccd39829e27d0d3b42d", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gcc-rich-location.h\"\n #include \"gimplify.h\"\n #include \"c-family/c-indentation.h\"\n+#include \"calls.h\"\n \n /* Print a warning if a constant expression had overflow in folding.\n    Invoke this function on every expression that the language\n@@ -801,6 +802,12 @@ sizeof_pointer_memaccess_warning (location_t *sizeof_arg_loc, tree callee,\n \t  if (TREE_CODE (tem) == ADDR_EXPR)\n \t    tem = TREE_OPERAND (tem, 0);\n \n+\t  /* Avoid diagnosing sizeof SRC when SRC is declared with\n+\t     attribute nonstring.  */\n+\t  tree dummy;\n+\t  if (get_attr_nonstring_decl (tem, &dummy))\n+\t    return;\n+\n \t  tree d = tree_strip_nop_conversions (dest);\n \t  if (TREE_CODE (d) == ADDR_EXPR)\n \t    d = TREE_OPERAND (d, 0);"}, {"sha": "1970f1c51ddfdf3e156e734d248ce41a9bcfd841", "filename": "gcc/calls.c", "status": "modified", "additions": 73, "deletions": 11, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=4252ccd73701a330db365ccd39829e27d0d3b42d", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl-iter.h\"\n #include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n+#include \"tree-ssa-strlen.h\"\n #include \"intl.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n@@ -1627,8 +1628,10 @@ maybe_warn_nonstring_arg (tree fndecl, tree exp)\n \n   /* It's safe to call \"bounded\" string functions with a non-string\n      argument since the functions provide an explicit bound for this\n-     purpose.  */\n-  switch (DECL_FUNCTION_CODE (fndecl))\n+     purpose.  The exception is strncat where the bound may refer to\n+     either the destination or the source.  */\n+  int fncode = DECL_FUNCTION_CODE (fndecl);\n+  switch (fncode)\n     {\n     case BUILT_IN_STRCMP:\n     case BUILT_IN_STRNCMP:\n@@ -1648,6 +1651,7 @@ maybe_warn_nonstring_arg (tree fndecl, tree exp)\n       }\n       /* Fall through.  */\n \n+    case BUILT_IN_STRNCAT:\n     case BUILT_IN_STPNCPY:\n     case BUILT_IN_STRNCPY:\n       if (2 < nargs)\n@@ -1772,15 +1776,36 @@ maybe_warn_nonstring_arg (tree fndecl, tree exp)\n       if (!decl)\n \tcontinue;\n \n-      tree type = TREE_TYPE (decl);\n-\n       /* The maximum number of array elements accessed.  */\n       offset_int wibnd = 0;\n-      if (bndrng[0])\n+\n+      if (argno && fncode == BUILT_IN_STRNCAT)\n+\t{\n+\t  /* See if the bound in strncat is derived from the length\n+\t     of the strlen of the destination (as it's expected to be).\n+\t     If so, reset BOUND and FNCODE to trigger a warning.  */\n+\t  tree dstarg = CALL_EXPR_ARG (exp, 0);\n+\t  if (is_strlen_related_p (dstarg, bound))\n+\t    {\n+\t      /* The bound applies to the destination, not to the source,\n+\t\t so reset these to trigger a warning without mentioning\n+\t\t the bound.  */\n+\t      bound = NULL;\n+\t      fncode = 0;\n+\t    }\n+\t  else if (bndrng[1])\n+\t    /* Use the upper bound of the range for strncat.  */\n+\t    wibnd = wi::to_offset (bndrng[1]);\n+\t}\n+      else if (bndrng[0])\n+\t/* Use the lower bound of the range for functions other than\n+\t   strncat.  */\n \twibnd = wi::to_offset (bndrng[0]);\n \n-      /* Size of the array.  */\n+      /* Determine the size of the argument array if it is one.  */\n       offset_int asize = wibnd;\n+      bool known_size = false;\n+      tree type = TREE_TYPE (decl);\n \n       /* Determine the array size.  For arrays of unknown bound and\n \t pointers reset BOUND to trigger the appropriate warning.  */\n@@ -1789,21 +1814,58 @@ maybe_warn_nonstring_arg (tree fndecl, tree exp)\n \t  if (tree arrbnd = TYPE_DOMAIN (type))\n \t    {\n \t      if ((arrbnd = TYPE_MAX_VALUE (arrbnd)))\n-\t\tasize = wi::to_offset (arrbnd) + 1;\n+\t\t{\n+\t\t  asize = wi::to_offset (arrbnd) + 1;\n+\t\t  known_size = true;\n+\t\t}\n \t    }\n \t  else if (bound == void_type_node)\n \t    bound = NULL_TREE;\n \t}\n       else if (bound == void_type_node)\n \tbound = NULL_TREE;\n \n+      /* In a call to strncat with a bound in a range whose lower but\n+\t not upper bound is less than the array size, reset ASIZE to\n+\t be the same as the bound and the other variable to trigger\n+\t the apprpriate warning below.  */\n+      if (fncode == BUILT_IN_STRNCAT\n+\t  && bndrng[0] != bndrng[1]\n+\t  && wi::ltu_p (wi::to_offset (bndrng[0]), asize)\n+\t  && (!known_size\n+\t      || wi::ltu_p (asize, wibnd)))\n+\t{\n+\t  asize = wibnd;\n+\t  bound = NULL_TREE;\n+\t  fncode = 0;\n+\t}\n+\n       bool warned = false;\n \n       if (wi::ltu_p (asize, wibnd))\n-\twarned = warning_at (loc, OPT_Wstringop_overflow_,\n-\t\t\t     \"%qD argument %i declared attribute %<nonstring%> \"\n-\t\t\t     \"is smaller than the specified bound %E\",\n-\t\t\t     fndecl, argno + 1, bndrng[0]);\n+\t{\n+\t  if (bndrng[0] == bndrng[1])\n+\t    warned = warning_at (loc, OPT_Wstringop_overflow_,\n+\t\t\t\t \"%qD argument %i declared attribute \"\n+\t\t\t\t \"%<nonstring%> is smaller than the specified \"\n+\t\t\t\t \"bound %wu\",\n+\t\t\t\t fndecl, argno + 1, wibnd.to_uhwi ());\n+\t  else if (wi::ltu_p (asize, wi::to_offset (bndrng[0])))\n+\t    warned = warning_at (loc, OPT_Wstringop_overflow_,\n+\t\t\t\t \"%qD argument %i declared attribute \"\n+\t\t\t\t \"%<nonstring%> is smaller than \"\n+\t\t\t\t \"the specified bound [%E, %E]\",\n+\t\t\t\t fndecl, argno + 1, bndrng[0], bndrng[1]);\n+\t  else\n+\t    warned = warning_at (loc, OPT_Wstringop_overflow_,\n+\t\t\t\t \"%qD argument %i declared attribute \"\n+\t\t\t\t \"%<nonstring%> may be smaller than \"\n+\t\t\t\t \"the specified bound [%E, %E]\",\n+\t\t\t\t fndecl, argno + 1, bndrng[0], bndrng[1]);\n+\t}\n+      else if (fncode == BUILT_IN_STRNCAT)\n+\t; /* Avoid warning for calls to strncat() when the bound\n+\t     is equal to the size of the non-string argument.  */\n       else if (!bound)\n \twarned = warning_at (loc, OPT_Wstringop_overflow_,\n \t\t\t     \"%qD argument %i declared attribute %<nonstring%>\","}, {"sha": "b3b13226d2779b442e44c741b99614046952890c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4252ccd73701a330db365ccd39829e27d0d3b42d", "patch": "@@ -1,3 +1,9 @@\n+2018-06-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/85602\n+\t* gcc.dg/attr-nonstring-2.c: Adjust text of expected warning.\n+\t* c-c++-common/attr-nonstring-8.c: New test.\n+\n 2018-06-18  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/81384"}, {"sha": "15b68ed23a24cb77e456f8fa0b2b5e831432ce8d", "filename": "gcc/testsuite/c-c++-common/attr-nonstring-8.c", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nonstring-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nonstring-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-nonstring-8.c?ref=4252ccd73701a330db365ccd39829e27d0d3b42d", "patch": "@@ -0,0 +1,147 @@\n+/* PR middle-end/85602 - -Wsizeof-pointer-memaccess for strncat with size\n+   of source\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wno-array-bounds -Wsizeof-pointer-memaccess -Wstringop-truncation -ftrack-macro-expansion=0\" } */\n+\n+#include \"../gcc.dg/range.h\"\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+#if __cplusplus\n+extern \"C\" {\n+#endif\n+\n+char* strcpy (char*, const char*);\n+size_t strlen (const char*);\n+char* strncat (char*, const char*, __SIZE_TYPE__);\n+char* strncpy (char*, const char*, __SIZE_TYPE__);\n+\n+#if __cplusplus\n+}\n+#endif\n+\n+#define NONSTR __attribute__ ((nonstring))\n+\n+NONSTR char nd3[3];\n+NONSTR char nd4[4];\n+NONSTR char nd5[5];\n+\n+NONSTR char ns3[3];\n+NONSTR char ns4[4];\n+NONSTR char ns5[5];\n+\n+NONSTR char* pns;\n+\n+void sink (void*, ...);\n+\n+#define T(call) sink (call)\n+\n+/* Verify that for a nonstring source array of an unknown length\n+   a warning is issued only when the bound exceeds the array size.  */\n+\n+void test_strncat_nonstring_cst (char *d)\n+{\n+  T (strncat (d, ns3, 1));\n+  T (strncat (d, ns3, 2));\n+  T (strncat (d, ns3, 3));\n+  T (strncat (d, ns3, sizeof ns3));\n+  T (strncat (d, ns3, 4));     /* { dg-warning \"argument 2 declared attribute .nonstring. is smaller than the specified bound 4\" } */\n+\n+  T (strncat (d, ns4, 1));\n+  T (strncat (d, ns4, 2));\n+  T (strncat (d, ns4, 3));\n+  T (strncat (d, ns4, 4));\n+  T (strncat (d, ns4, sizeof ns4));\n+  T (strncat (d, ns4, 5));     /* { dg-warning \"argument 2 declared attribute .nonstring. is smaller than the specified bound 5\" } */\n+\n+  T (strncat (nd3, ns3, 1));\n+  T (strncat (nd3, ns3, 2));\n+  T (strncat (nd3, ns3, 3));     /* { dg-warning \"specified bound 3 equals destination size\" } */\n+  T (strncat (nd3, ns3, 4));     /* { dg-warning \"argument 2 declared attribute .nonstring. is smaller than the specified bound 4\" } */\n+  /* { dg-warning \"specified bound 4 exceeds destination size 3\" \"\" { target *-*-* } .-1 } */\n+\n+  T (strncat (d, pns, sizeof pns));   /* { dg-warning \"argument to .sizeof. in .strncat. call is the same expression as the source\" } */\n+}\n+\n+\n+void test_strncat_nonstring_var (char *d, size_t n)\n+{\n+  /* In the following the bound coulld apply to either the destination\n+     or the source.  The expected use of strncat() is to pass it as\n+     the bound DSIZE - strlen(D) - 1 so the call below is diagnosed.  */\n+  T (strncat (d, ns3, n));            /* { dg-warning \"argument 2 declared attribute .nonstring.\" } */\n+\n+  T (strncat (d, ns3, UR (0, 1)));\n+  T (strncat (d, ns3, UR (1, 2)));\n+  T (strncat (d, ns3, UR (2, 3)));\n+  T (strncat (d, ns3, UR (3, 4)));    /* { dg-warning \"argument 2 declared attribute 'nonstring' may be smaller than the specified bound \\\\\\[3, 4]\" } */\n+  T (strncat (d, ns3, UR (4, 5)));    /* { dg-warning \"argument 2 declared attribute 'nonstring' is smaller than the specified bound \\\\\\[4, 5]\" } */\n+\n+  /* Verify that the call below (the intended use of strncat()) is\n+     also diagnosed.  */\n+  T (strncat (d, ns3, 256 - strlen (d) - 1));   /* { dg-warning \"argument 2 declared attribute .nonstring.\" } */\n+\n+  T (strncat (nd3, ns5, UR (0, 1)));\n+  T (strncat (nd3, ns5, UR (1, 2)));\n+  T (strncat (nd3, ns5, UR (2, 3)));\n+  T (strncat (nd3, ns5, UR (3, 4)));\n+  T (strncat (nd3, ns5, UR (4, 5)));  /* { dg-warning \"specified bound between 4 and 5 exceeds destination size 3\" } */\n+\n+  T (strncat (nd5, ns3, UR (0, 1)));\n+  T (strncat (nd5, ns3, UR (1, 2)));\n+  T (strncat (nd5, ns3, UR (2, 3)));\n+  T (strncat (nd5, ns3, UR (3, 4)));  /* { dg-warning \"argument 2 declared attribute 'nonstring' may be smaller than the specified bound \\\\\\[3, 4]\" } */\n+}\n+\n+/* Verify that for a nonstring source array of a known length (i.e.,\n+   a nonstring array containing a nul-terminated string) a warning\n+   is issued only for certain truncation.\n+\n+   The test cases are split up to work around bug 81343 (or one like\n+   it).  */\n+\n+void test_strncat_string_1_1 (char *d)\n+{\n+  strcpy (ns3, \"1\");\n+  T (strncat (d, ns3, 1));    /* { dg-warning \"output truncated before terminating nul copying 1 byte from a string of the same length\" } */\n+}\n+\n+void test_strncat_string_1_2 (char *d)\n+{\n+  strcpy (ns3, \"1\");\n+  T (strncat (d, ns3, 2));\n+}\n+\n+void test_strncat_string_1_3 (char *d)\n+{\n+  strcpy (ns3, \"1\");\n+  T (strncat (d, ns3, 3));\n+}\n+\n+void test_strncat_string_2_1 (char *d)\n+{\n+  strcpy (ns3, \"12\");\n+  T (strncat (d, ns3, 1));    /* { dg-warning \"output truncated copying 1 byte from a string of length 2\" } */\n+}\n+\n+void test_strncat_string_2_2 (char *d)\n+{\n+  strcpy (ns3, \"12\");\n+  T (strncat (d, ns3, 2));    /* { dg-warning \"output truncated before terminating nul copying 2 bytes from a string of the same length\" } */\n+}\n+\n+void test_strncat_string_2_3 (char *d)\n+{\n+  strcpy (ns3, \"12\");\n+  T (strncat (d, ns3, 3));\n+}\n+\n+\n+void test_strcncpy_nonstring_cst (char *d)\n+{\n+  T (strncpy (d, ns3, 1));\n+  T (strncpy (d, ns3, 2));\n+  T (strncpy (d, ns3, 3));\n+  T (strncpy (d, ns3, sizeof ns3));\n+  T (strncpy (d, ns3, 4));      /* { dg-warning \"argument 2 declared attribute .nonstring. is smaller than the specified bound 4\" } */\n+}"}, {"sha": "ef2144d62075fdafbd5568a804e0c45844afa119", "filename": "gcc/testsuite/gcc.dg/attr-nonstring-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-nonstring-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-nonstring-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-nonstring-2.c?ref=4252ccd73701a330db365ccd39829e27d0d3b42d", "patch": "@@ -52,7 +52,7 @@ void test_strnlen_array_range (void)\n   T (strnlen (ns3, UR (0, 9)));\n   T (strnlen (ns3, UR (3, 4)));\n   T (strnlen (ns3, UR (3, DIFF_MAX)));\n-  T (strnlen (ns3, UR (4, 5)));     /* { dg-warning \"argument 1 declared attribute .nonstring. is smaller than the specified bound \\[0-9\\]+\" } */\n+  T (strnlen (ns3, UR (4, 5)));     /* { dg-warning \"argument 1 declared attribute .nonstring. is smaller than the specified bound \\\\\\[4, 5]\" } */\n   T (strnlen (ns3, UR (DIFF_MAX, SIZE_MAX)));  /* { dg-warning \"argument 1 declared attribute .nonstring. is smaller \" } */\n }\n \n@@ -110,6 +110,6 @@ void test_strnlen_string_range (void)\n {\n   T (3, \"1\",   2, UR (0, 1));\n   T (3, \"1\",   2, UR (3, 9));\n-  T (3, \"123\", 3, UR (4, 5));       /* { dg-warning \"argument 1 declared attribute .nonstring. is smaller than the specified bound 4\" } */\n-  T (3, \"123\", 3, UR (5, 9));       /* { dg-warning \"argument 1 declared attribute .nonstring. is smaller than the specified bound 5\" } */\n+  T (3, \"123\", 3, UR (4, 5));       /* { dg-warning \"argument 1 declared attribute .nonstring. is smaller than the specified bound \\\\\\[4, 5]\" } */\n+  T (3, \"123\", 3, UR (5, 9));       /* { dg-warning \"argument 1 declared attribute .nonstring. is smaller than the specified bound \\\\\\[5, 9]\" } */\n }"}, {"sha": "92545b9ce4d03af5d3fbe296b38b587048476291", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=4252ccd73701a330db365ccd39829e27d0d3b42d", "patch": "@@ -1757,7 +1757,7 @@ handle_builtin_strncat (built_in_function bcode, gimple_stmt_iterator *gsi)\n    assumed to be the argument in some call to strlen() whose relationship\n    to SRC is being ascertained.  */\n \n-static bool\n+bool\n is_strlen_related_p (tree src, tree len)\n {\n   if (TREE_CODE (TREE_TYPE (len)) == POINTER_TYPE\n@@ -1794,12 +1794,20 @@ is_strlen_related_p (tree src, tree len)\n \t  && (code == BIT_AND_EXPR\n \t      || code == NOP_EXPR)))\n     {\n-      /* Pointer plus (an integer) and integer cast or truncation are\n-\t considered among the (potentially) related expressions to strlen.\n-\t Others are not.  */\n+      /* Pointer plus (an integer), and truncation are considered among\n+\t the (potentially) related expressions to strlen.  */\n       return is_strlen_related_p (src, rhs1);\n     }\n \n+  if (tree rhs2 = gimple_assign_rhs2 (def_stmt))\n+    {\n+      /* Integer subtraction is considered strlen-related when both\n+\t arguments are integers and second one is strlen-related.  */\n+      rhstype = TREE_TYPE (rhs2);\n+      if (INTEGRAL_TYPE_P (rhstype) && code == MINUS_EXPR)\n+\treturn is_strlen_related_p (src, rhs2);\n+    }\n+\n   return false;\n }\n \n@@ -1870,9 +1878,22 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n   if (TREE_CODE (dstdecl) == ADDR_EXPR)\n     dstdecl = TREE_OPERAND (dstdecl, 0);\n \n-  /* If the destination refers to a an array/pointer declared nonstring\n-     return early.  */\n   tree ref = NULL_TREE;\n+\n+  if (!sidx)\n+    {\n+      /* If the source is a non-string return early to avoid warning\n+\t for possible truncation (if the truncation is certain SIDX\n+\t is non-zero).  */\n+      tree srcdecl = gimple_call_arg (stmt, 1);\n+      if (TREE_CODE (srcdecl) == ADDR_EXPR)\n+\tsrcdecl = TREE_OPERAND (srcdecl, 0);\n+      if (get_attr_nonstring_decl (srcdecl, &ref))\n+\treturn false;\n+    }\n+\n+  /* Likewise, if the destination refers to a an array/pointer declared\n+     nonstring return early.  */\n   if (get_attr_nonstring_decl (dstdecl, &ref))\n     return false;\n "}, {"sha": "f427fb741a5f52a778268a89b06a79e7b074375c", "filename": "gcc/tree-ssa-strlen.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Ftree-ssa-strlen.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4252ccd73701a330db365ccd39829e27d0d3b42d/gcc%2Ftree-ssa-strlen.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.h?ref=4252ccd73701a330db365ccd39829e27d0d3b42d", "patch": "@@ -21,6 +21,7 @@\n #ifndef GCC_TREE_SSA_STRLEN_H\n #define GCC_TREE_SSA_STRLEN_H\n \n+extern bool is_strlen_related_p (tree, tree);\n extern bool maybe_diag_stxncpy_trunc (gimple_stmt_iterator, tree, tree);\n \n #endif   // GCC_TREE_SSA_STRLEN_H"}]}