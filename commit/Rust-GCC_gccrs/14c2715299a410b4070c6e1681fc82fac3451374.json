{"sha": "14c2715299a410b4070c6e1681fc82fac3451374", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRjMjcxNTI5OWE0MTBiNDA3MGM2ZTE2ODFmYzgyZmFjMzQ1MTM3NA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2009-11-24T23:06:47Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-11-24T23:06:47Z"}, "message": "i386.md (plusminus_carry_mnemonic): New code attribute.\n\n\t* config/i386/i386.md (plusminus_carry_mnemonic): New code attribute.\n\t(add<mode>3_carry): Change operand order of plus RTX.\n\t(*add<mode>3_carry): Ditto.\n\t(*addsi3_carry_zext): Ditto.\n\t(*add<dwi>3_doubleword): Update for changed operand order.\n\t(*negti2_1 splitter): Ditto.\n\t(*negdi2_1 splitter): Ditto.\n\t(<plusminus_insn><mode>3_carry): Macroize expander from\n\t{add,sub}<mode>3_carry patterns using plusminus code iterator.\n\t(*<plusminus_insn><mode>3_carry): Macroize insn from\n\t*{add,sub}<mode>3_carry patetrns using plusminus code iterator.\n\t(neg<mode>2): Macroize expander from neg{qi,hi,si,di,ti}2\n\tpatterns using SDWIM mode iterator.\n\t(*neg<dwi>2_doubleword): New insn_and_split pattern.  Macroize\n\tpattern from *neg{di,ti}2_1 patterns and corresponding splitters\n\tusing DWIH mode iterator.\n\t(*neg<mode>2_1): Macroize insn from neg{qi,hi,si,di}2_1 patterns\n\tusing SWI mode iterator.\n\t(*neg<mode>2_cmpz): Ditto from neg{qi,hi,si,di}2_cmpz patterns.\n\t(one_cmpl<mode>2): Macroize expander from one_cmpl{qi,hi,si,di}2\n\tpatterns using SWIM mode iterator.\n\t(*one_cmpl<mode>2_1): Macroize insn from one_cmpl{hi,si,di}2_1\n\tpatterns using SWI248 mode iterator.\n\t(*one_cmpl<mode>2_2): Macroize insn from one_cmpl{qi,hi,si,di}2_2\n\tpatterns using SWI mode iterator.\n\t(*one_cmpl<mode>2_2 splitter): Macroize splitter from\n\tone_cmpl{qi,hi,si,di}2_2 splitter patterns using SWI mode iterator.\n\nFrom-SVN: r154522", "tree": {"sha": "95717bcabd1abbc0706b7e5f1fafeae24a87d392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95717bcabd1abbc0706b7e5f1fafeae24a87d392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14c2715299a410b4070c6e1681fc82fac3451374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c2715299a410b4070c6e1681fc82fac3451374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c2715299a410b4070c6e1681fc82fac3451374", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c2715299a410b4070c6e1681fc82fac3451374/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "678ff8235a39ac14d9bead05d90ed094c8fbdd3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678ff8235a39ac14d9bead05d90ed094c8fbdd3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/678ff8235a39ac14d9bead05d90ed094c8fbdd3d"}], "stats": {"total": 629, "additions": 199, "deletions": 430}, "files": [{"sha": "0e6d118829409fbfbb2f3453c6a5ad194bf8cfe9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2715299a410b4070c6e1681fc82fac3451374/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2715299a410b4070c6e1681fc82fac3451374/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14c2715299a410b4070c6e1681fc82fac3451374", "patch": "@@ -1,3 +1,33 @@\n+2009-11-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (plusminus_carry_mnemonic): New code attribute.\n+\t(add<mode>3_carry): Change operand order of plus RTX.\n+\t(*add<mode>3_carry): Ditto.\n+\t(*addsi3_carry_zext): Ditto.\n+\t(*add<dwi>3_doubleword): Update for changed operand order.\n+\t(*negti2_1 splitter): Ditto.\n+\t(*negdi2_1 splitter): Ditto.\n+\t(<plusminus_insn><mode>3_carry): Macroize expander from\n+\t{add,sub}<mode>3_carry patterns using plusminus code iterator.\n+\t(*<plusminus_insn><mode>3_carry): Macroize insn from\n+\t*{add,sub}<mode>3_carry patetrns using plusminus code iterator.\n+\t(neg<mode>2): Macroize expander from neg{qi,hi,si,di,ti}2\n+\tpatterns using SDWIM mode iterator.\n+\t(*neg<dwi>2_doubleword): New insn_and_split pattern.  Macroize\n+\tpattern from *neg{di,ti}2_1 patterns and corresponding splitters\n+\tusing DWIH mode iterator.\n+\t(*neg<mode>2_1): Macroize insn from neg{qi,hi,si,di}2_1 patterns\n+\tusing SWI mode iterator.\n+\t(*neg<mode>2_cmpz): Ditto from neg{qi,hi,si,di}2_cmpz patterns.\n+\t(one_cmpl<mode>2): Macroize expander from one_cmpl{qi,hi,si,di}2\n+\tpatterns using SWIM mode iterator.\n+\t(*one_cmpl<mode>2_1): Macroize insn from one_cmpl{hi,si,di}2_1\n+\tpatterns using SWI248 mode iterator.\n+\t(*one_cmpl<mode>2_2): Macroize insn from one_cmpl{qi,hi,si,di}2_2\n+\tpatterns using SWI mode iterator.\n+\t(*one_cmpl<mode>2_2 splitter): Macroize splitter from\n+\tone_cmpl{qi,hi,si,di}2_2 splitter patterns using SWI mode iterator.\n+\n 2009-11-24  Michael Matz  <matz@suse.de>\n \n \t* expr.c (set_storage_via_libcall): Fix build_call_expr call.\n@@ -443,7 +473,7 @@\n \ton all nodes we write summaries for.\n \n 2009-11-18  Shujing Zhao  <pearly.zhao@oracle.com>\n-\t\n+\n \tPR middle-end/22201\n \t* params.def (PARAM_INLINE_UNIT_GROWTH, PARAM_IPCP_UNIT_GROWTH)\n \t(PARAM_EARLY_INLINING_INSNS, PARAM_IRA_MAX_LOOPS_NUM)\n@@ -586,8 +616,8 @@\n \t(cmpdi_1): Rename from cmpdi_1_rex64.\n \t(cmp<mode>_1): Macroize expander from cmp{si,di}_1 patterns using\n \tSWI48 mode iterator.\n-\t(*cmp<mode>_1): Macroize insn from *cmp{qi,hi,si,di}_1_insn using SWI\n-\tmode iterator.\n+\t(*cmp<mode>_1): Macroize insn from *cmp{qi,hi,si,di}_1_insn patterns\n+\tusing SWI mode iterator.\n \t(*cmp<mode>_ccno_1): Ditto from *cmp{qi,hi,si,di}_ccno_1.\n \t(*cmp<mode>_minus_1): Ditto from *cmp{qi,hi,si,di}_minus_1.\n \t(*cmpqi_ext_3_insn): Make private."}, {"sha": "66d879d02bf2c76f0e96794bc49cafab6fe4e81c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 166, "deletions": 427, "changes": 593, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2715299a410b4070c6e1681fc82fac3451374/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2715299a410b4070c6e1681fc82fac3451374/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=14c2715299a410b4070c6e1681fc82fac3451374", "patch": "@@ -696,6 +696,8 @@\n (define_code_attr plusminus_mnemonic\n   [(plus \"add\") (ss_plus \"adds\") (us_plus \"addus\")\n    (minus \"sub\") (ss_minus \"subs\") (us_minus \"subus\")])\n+(define_code_attr plusminus_carry_mnemonic\n+  [(plus \"adc\") (minus \"sbb\")])\n \n ;; Mark commutative operators as such in constraints.\n (define_code_attr comm [(plus \"%\") (ss_plus \"%\") (us_plus \"%\")\n@@ -5908,57 +5910,13 @@\n \t\t   (plus:DWIH (match_dup 1) (match_dup 2)))])\n    (parallel [(set (match_dup 3)\n \t\t   (plus:DWIH\n+\t\t     (match_dup 4)\n \t\t     (plus:DWIH\n \t\t       (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0))\n-\t\t       (match_dup 4))\n-\t\t     (match_dup 5)))\n+\t\t       (match_dup 5))))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"split_<dwi> (&operands[0], 3, &operands[0], &operands[3]);\")\n \n-(define_expand \"add<mode>3_carry\"\n-  [(parallel\n-    [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"\")\n-\t  (plus:SWI\n-\t    (plus:SWI (match_operator:SWI 4 \"ix86_carry_flag_operator\"\n-\t\t       [(match_operand 3 \"flags_reg_operand\" \"\")\n-\t\t\t(const_int 0)])\n-\t\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"\"))\n-\t    (match_operand:SWI 2 \"<general_operand>\" \"\")))\n-     (clobber (reg:CC FLAGS_REG))])]\n-  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n-  \"\")\n-\n-(define_insn \"*add<mode>3_carry\"\n-  [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n-\t(plus:SWI\n-\t  (plus:SWI (match_operator 3 \"ix86_carry_flag_operator\"\n-\t\t     [(reg FLAGS_REG) (const_int 0)])\n-\t\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0,0\"))\n-\t  (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n-  \"adc{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"use_carry\" \"1\")\n-   (set_attr \"pent_pair\" \"pu\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*addsi3_carry_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI\n-\t  (plus:SI\n-\t    (plus:SI (match_operator 3 \"ix86_carry_flag_operator\"\n-\t\t      [(reg FLAGS_REG) (const_int 0)])\n-\t\t     (match_operand:SI 1 \"nonimmediate_operand\" \"%0\"))\n-\t  (match_operand:SI 2 \"general_operand\" \"g\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (PLUS, SImode, operands)\"\n-  \"adc{l}\\t{%2, %k0|%k0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"use_carry\" \"1\")\n-   (set_attr \"pent_pair\" \"pu\")\n-   (set_attr \"mode\" \"SI\")])\n-\n (define_insn \"*add<mode>3_cc\"\n   [(set (reg:CC FLAGS_REG)\n \t(unspec:CC\n@@ -5985,19 +5943,6 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*add<mode>3_cconly_overflow\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (plus:SWI\n-\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0\")\n-\t    (match_operand:SWI 2 \"<general_operand>\" \"<r><i>m\"))\n-\t  (match_dup 1)))\n-   (clobber (match_scratch:SWI 0 \"=<r>\"))]\n-  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n-  \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"*lea_1\"\n   [(set (match_operand:DWIH 0 \"register_operand\" \"=r\")\n \t(match_operand:DWIH 1 \"no_seg_address_operand\" \"p\"))]\n@@ -7455,62 +7400,6 @@\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"split_<dwi> (&operands[0], 3, &operands[0], &operands[3]);\")\n \n-(define_expand \"sub<mode>3_carry\"\n-  [(parallel\n-    [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"\")\n-\t    (minus:SWI\n-\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"\")\n-\t      (plus:SWI\n-\t\t(match_operator:SWI 4 \"ix86_carry_flag_operator\"\n-\t\t [(match_operand 3 \"flags_reg_operand\" \"\")\n-\t\t  (const_int 0)])\n-\t\t(match_operand:SWI 2 \"<general_operand>\" \"\"))))\n-     (clobber (reg:CC FLAGS_REG))])]\n-  \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n-  \"\")\n-\n-(define_insn \"*sub<mode>3_carry\"\n-  [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n-\t  (minus:SWI\n-\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"0,0\")\n-\t    (plus:SWI\n-\t      (match_operator 3 \"ix86_carry_flag_operator\"\n-\t       [(reg FLAGS_REG) (const_int 0)])\n-\t      (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\"))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (MINUS, <MODE>mode, operands)\"\n-  \"sbb{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"use_carry\" \"1\")\n-   (set_attr \"pent_pair\" \"pu\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"*subsi3_carry_zext\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t  (zero_extend:DI\n-\t    (minus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t      (plus:SI (match_operator 3 \"ix86_carry_flag_operator\"\n-\t\t\t[(reg FLAGS_REG) (const_int 0)])\n-\t\t (match_operand:SI 2 \"general_operand\" \"g\")))))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_binary_operator_ok (MINUS, SImode, operands)\"\n-  \"sbb{l}\\t{%2, %k0|%k0, %2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"pent_pair\" \"pu\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*sub<mode>3_cconly_overflow\"\n-  [(set (reg:CCC FLAGS_REG)\n-\t(compare:CCC\n-\t  (minus:SWI\n-\t    (match_operand:SWI 0 \"nonimmediate_operand\" \"<r>m,<r>\")\n-\t    (match_operand:SWI 1 \"<general_operand>\" \"<r><i>,<r>m\"))\n-\t  (match_dup 0)))]\n-  \"\"\n-  \"cmp{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"icmp\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n (define_insn \"*sub<mode>_1\"\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(minus:SWI\n@@ -7600,7 +7489,93 @@\n   \"sub{l}\\t{%2, %1|%1, %2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI\")])\n+\f\n+;; Add with carry and subtract with borrow\n+\n+(define_expand \"<plusminus_insn><mode>3_carry\"\n+  [(parallel\n+    [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"\")\n+\t  (plusminus:SWI\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"\")\n+\t    (plus:SWI (match_operator:SWI 4 \"ix86_carry_flag_operator\"\n+\t\t       [(match_operand 3 \"flags_reg_operand\" \"\")\n+\t\t\t(const_int 0)])\n+\t\t      (match_operand:SWI 2 \"<general_operand>\" \"\"))))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"\")\n+\n+(define_insn \"*<plusminus_insn><mode>3_carry\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n+\t(plusminus:SWI\n+\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"<comm>0,0\")\n+\t  (plus:SWI\n+\t    (match_operator 3 \"ix86_carry_flag_operator\"\n+\t     [(reg FLAGS_REG) (const_int 0)])\n+\t    (match_operand:SWI 2 \"<general_operand>\" \"<r><i>,<r>m\"))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n+  \"<plusminus_carry_mnemonic>{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*addsi3_carry_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (plus:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t   (plus:SI (match_operator 3 \"ix86_carry_flag_operator\"\n+\t\t\t     [(reg FLAGS_REG) (const_int 0)])\n+\t\t\t    (match_operand:SI 2 \"general_operand\" \"g\")))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (PLUS, SImode, operands)\"\n+  \"adc{l}\\t{%2, %k0|%k0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"use_carry\" \"1\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*subsi3_carry_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (minus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n+\t\t    (plus:SI (match_operator 3 \"ix86_carry_flag_operator\"\n+\t\t\t      [(reg FLAGS_REG) (const_int 0)])\n+\t\t\t     (match_operand:SI 2 \"general_operand\" \"g\")))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && ix86_binary_operator_ok (MINUS, SImode, operands)\"\n+  \"sbb{l}\\t{%2, %k0|%k0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"pent_pair\" \"pu\")\n+   (set_attr \"mode\" \"SI\")])\n+\f\n+;; Overflow setting add and subtract instructions\n+\n+(define_insn \"*add<mode>3_cconly_overflow\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (plus:SWI\n+\t    (match_operand:SWI 1 \"nonimmediate_operand\" \"%0\")\n+\t    (match_operand:SWI 2 \"<general_operand>\" \"<r><i>m\"))\n+\t  (match_dup 1)))\n+   (clobber (match_scratch:SWI 0 \"=<r>\"))]\n+  \"ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n+  \"add{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*sub<mode>3_cconly_overflow\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC\n+\t  (minus:SWI\n+\t    (match_operand:SWI 0 \"nonimmediate_operand\" \"<r>m,<r>\")\n+\t    (match_operand:SWI 1 \"<general_operand>\" \"<r><i>,<r>m\"))\n+\t  (match_dup 0)))]\n+  \"\"\n+  \"cmp{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"icmp\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*<plusminus_insn><mode>3_cc_overflow\"\n   [(set (reg:CCC FLAGS_REG)\n@@ -9752,122 +9727,51 @@\n \f\n ;; Negation instructions\n \n-(define_expand \"negti2\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"\")\n-\t(neg:TI (match_operand:TI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_64BIT\"\n-  \"ix86_expand_unary_operator (NEG, TImode, operands); DONE;\")\n-\n-(define_insn \"*negti2_1\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=ro\")\n-\t(neg:TI (match_operand:TI 1 \"nonimmediate_operand\" \"0\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\n-   && ix86_unary_operator_ok (NEG, TImode, operands)\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"\")\n-\t(neg:TI (match_operand:TI 1 \"nonimmediate_operand\" \"\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && reload_completed\"\n-  [(parallel\n-    [(set (reg:CCZ FLAGS_REG)\n-\t  (compare:CCZ (neg:DI (match_dup 1)) (const_int 0)))\n-     (set (match_dup 0) (neg:DI (match_dup 1)))])\n-   (parallel\n-    [(set (match_dup 2)\n-\t  (plus:DI (plus:DI (ltu:DI (reg:CC FLAGS_REG) (const_int 0))\n-\t\t\t    (match_dup 3))\n-\t\t   (const_int 0)))\n-     (clobber (reg:CC FLAGS_REG))])\n-   (parallel\n-    [(set (match_dup 2)\n-\t  (neg:DI (match_dup 2)))\n-     (clobber (reg:CC FLAGS_REG))])]\n-  \"split_ti (&operands[0], 2, &operands[0], &operands[2]);\")\n-\n-(define_expand \"negdi2\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(neg:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n+(define_expand \"neg<mode>2\"\n+  [(set (match_operand:SDWIM 0 \"nonimmediate_operand\" \"\")\n+\t(neg:SDWIM (match_operand:SDWIM 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n-  \"ix86_expand_unary_operator (NEG, DImode, operands); DONE;\")\n+  \"ix86_expand_unary_operator (NEG, <MODE>mode, operands); DONE;\")\n \n-(define_insn \"*negdi2_1\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=ro\")\n-\t(neg:DI (match_operand:DI 1 \"general_operand\" \"0\")))\n+(define_insn_and_split \"*neg<dwi>2_doubleword\"\n+  [(set (match_operand:<DWI> 0 \"nonimmediate_operand\" \"=ro\")\n+\t(neg:<DWI> (match_operand:<DWI> 1 \"nonimmediate_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT\n-   && ix86_unary_operator_ok (NEG, DImode, operands)\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(neg:DI (match_operand:DI 1 \"general_operand\" \"\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT && reload_completed\"\n+  \"ix86_unary_operator_ok (NEG, <DWI>mode, operands)\"\n+  \"#\"\n+  \"reload_completed\"\n   [(parallel\n     [(set (reg:CCZ FLAGS_REG)\n-\t  (compare:CCZ (neg:SI (match_dup 1)) (const_int 0)))\n-     (set (match_dup 0) (neg:SI (match_dup 1)))])\n+\t  (compare:CCZ (neg:DWIH (match_dup 1)) (const_int 0)))\n+     (set (match_dup 0) (neg:DWIH (match_dup 1)))])\n    (parallel\n     [(set (match_dup 2)\n-\t  (plus:SI (plus:SI (ltu:SI (reg:CC FLAGS_REG) (const_int 0))\n-\t\t\t    (match_dup 3))\n-\t\t   (const_int 0)))\n+\t  (plus:DWIH (match_dup 3)\n+\t\t     (plus:DWIH (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0))\n+\t\t\t\t(const_int 0))))\n      (clobber (reg:CC FLAGS_REG))])\n    (parallel\n     [(set (match_dup 2)\n-\t  (neg:SI (match_dup 2)))\n+\t  (neg:DWIH (match_dup 2)))\n      (clobber (reg:CC FLAGS_REG))])]\n-  \"split_di (&operands[0], 2, &operands[0], &operands[2]);\");\n+  \"split_<dwi> (&operands[0], 2, &operands[0], &operands[2]);\")\n \n-(define_insn \"*negdi2_1_rex64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(neg:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")))\n+(define_insn \"*neg<mode>2_1\"\n+  [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n+\t(neg:SWI (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT && ix86_unary_operator_ok (NEG, DImode, operands)\"\n-  \"neg{q}\\t%0\"\n+  \"ix86_unary_operator_ok (NEG, <MODE>mode, operands)\"\n+  \"neg{<imodesuffix>}\\t%0\"\n   [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-;; The problem with neg is that it does not perform (compare x 0),\n-;; it really performs (compare 0 x), which leaves us with the zero\n-;; flag being the only useful item.\n-\n-(define_insn \"*negdi2_cmpz_rex64\"\n-  [(set (reg:CCZ FLAGS_REG)\n-\t(compare:CCZ (neg:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t     (const_int 0)))\n-   (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(neg:DI (match_dup 1)))]\n-  \"TARGET_64BIT && ix86_unary_operator_ok (NEG, DImode, operands)\"\n-  \"neg{q}\\t%0\"\n-  [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-\n-(define_expand \"negsi2\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t(neg:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n-  \"ix86_expand_unary_operator (NEG, SImode, operands); DONE;\")\n-\n-(define_insn \"*negsi2_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(neg:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_unary_operator_ok (NEG, SImode, operands)\"\n-  \"neg{l}\\t%0\"\n-  [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n ;; Combine is quite creative about this pattern.\n (define_insn \"*negsi2_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(lshiftrt:DI (neg:DI (ashift:DI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t\t\t\t(const_int 32)))\n-\t\t     (const_int 32)))\n+\t(lshiftrt:DI\n+\t  (neg:DI (ashift:DI (match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t\t     (const_int 32)))\n+\t(const_int 32)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_unary_operator_ok (NEG, SImode, operands)\"\n   \"neg{l}\\t%k0\"\n@@ -9878,25 +9782,27 @@\n ;; it really performs (compare 0 x), which leaves us with the zero\n ;; flag being the only useful item.\n \n-(define_insn \"*negsi2_cmpz\"\n+(define_insn \"*neg<mode>2_cmpz\"\n   [(set (reg:CCZ FLAGS_REG)\n-\t(compare:CCZ (neg:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t     (const_int 0)))\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(neg:SI (match_dup 1)))]\n-  \"ix86_unary_operator_ok (NEG, SImode, operands)\"\n-  \"neg{l}\\t%0\"\n+\t(compare:CCZ\n+\t  (neg:SWI (match_operand:SWI 1 \"nonimmediate_operand\" \"0\"))\n+\t\t   (const_int 0)))\n+   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n+\t(neg:SWI (match_dup 1)))]\n+  \"ix86_unary_operator_ok (NEG, <MODE>mode, operands)\"\n+  \"neg{<imodesuffix>}\\t%0\"\n   [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*negsi2_cmpz_zext\"\n   [(set (reg:CCZ FLAGS_REG)\n-\t(compare:CCZ (lshiftrt:DI\n-\t\t       (neg:DI (ashift:DI\n-\t\t\t\t (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t\t\t (const_int 32)))\n-\t\t       (const_int 32))\n-\t\t     (const_int 0)))\n+\t(compare:CCZ\n+\t  (lshiftrt:DI\n+\t    (neg:DI (ashift:DI\n+\t\t      (match_operand:DI 1 \"register_operand\" \"0\")\n+\t\t      (const_int 32)))\n+\t    (const_int 32))\n+\t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (neg:DI (ashift:DI (match_dup 1)\n \t\t\t\t\t(const_int 32)))\n@@ -9906,58 +9812,6 @@\n   [(set_attr \"type\" \"negnot\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_expand \"neghi2\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n-\t(neg:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_HIMODE_MATH\"\n-  \"ix86_expand_unary_operator (NEG, HImode, operands); DONE;\")\n-\n-(define_insn \"*neghi2_1\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(neg:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_unary_operator_ok (NEG, HImode, operands)\"\n-  \"neg{w}\\t%0\"\n-  [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_insn \"*neghi2_cmpz\"\n-  [(set (reg:CCZ FLAGS_REG)\n-\t(compare:CCZ (neg:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t     (const_int 0)))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(neg:HI (match_dup 1)))]\n-  \"ix86_unary_operator_ok (NEG, HImode, operands)\"\n-  \"neg{w}\\t%0\"\n-  [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_expand \"negqi2\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n-\t(neg:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_QIMODE_MATH\"\n-  \"ix86_expand_unary_operator (NEG, QImode, operands); DONE;\")\n-\n-(define_insn \"*negqi2_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n-\t(neg:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_unary_operator_ok (NEG, QImode, operands)\"\n-  \"neg{b}\\t%0\"\n-  [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"QI\")])\n-\n-(define_insn \"*negqi2_cmpz\"\n-  [(set (reg:CCZ FLAGS_REG)\n-\t(compare:CCZ (neg:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t     (const_int 0)))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n-\t(neg:QI (match_dup 1)))]\n-  \"ix86_unary_operator_ok (NEG, QImode, operands)\"\n-  \"neg{b}\\t%0\"\n-  [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"QI\")])\n-\n ;; Changing of sign for FP values is doable using integer unit too.\n \n (define_expand \"<code><mode>2\"\n@@ -10240,96 +10094,66 @@\n \f\n ;; One complement instructions\n \n-(define_expand \"one_cmpldi2\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(not:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_64BIT\"\n-  \"ix86_expand_unary_operator (NOT, DImode, operands); DONE;\")\n+(define_expand \"one_cmpl<mode>2\"\n+  [(set (match_operand:SWIM 0 \"nonimmediate_operand\" \"\")\n+\t(not:SWIM (match_operand:SWIM 1 \"nonimmediate_operand\" \"\")))]\n+  \"\"\n+  \"ix86_expand_unary_operator (NOT, <MODE>mode, operands); DONE;\")\n \n-(define_insn \"*one_cmpldi2_1_rex64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(not:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\")))]\n-  \"TARGET_64BIT && ix86_unary_operator_ok (NOT, DImode, operands)\"\n-  \"not{q}\\t%0\"\n+(define_insn \"*one_cmpl<mode>2_1\"\n+  [(set (match_operand:SWI248 0 \"nonimmediate_operand\" \"=rm\")\n+\t(not:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\" \"0\")))]\n+  \"ix86_unary_operator_ok (NOT, <MODE>mode, operands)\"\n+  \"not{<imodesuffix>}\\t%0\"\n   [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"*one_cmpldi2_2_rex64\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (not:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t (const_int 0)))\n-   (set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(not:DI (match_dup 1)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\n-   && ix86_unary_operator_ok (NOT, DImode, operands)\"\n-  \"#\"\n-  [(set_attr \"type\" \"alu1\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_split\n-  [(set (match_operand 0 \"flags_reg_operand\" \"\")\n-\t(match_operator 2 \"compare_operator\"\n-\t  [(not:DI (match_operand:DI 3 \"nonimmediate_operand\" \"\"))\n-\t   (const_int 0)]))\n-   (set (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n-\t(not:DI (match_dup 3)))]\n-  \"TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\"\n-  [(parallel [(set (match_dup 0)\n-\t\t   (match_op_dup 2\n-\t\t     [(xor:DI (match_dup 3) (const_int -1))\n-\t\t      (const_int 0)]))\n-\t      (set (match_dup 1)\n-\t\t   (xor:DI (match_dup 3) (const_int -1)))])]\n-  \"\")\n-\n-(define_expand \"one_cmplsi2\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t(not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n-  \"ix86_expand_unary_operator (NOT, SImode, operands); DONE;\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*one_cmplsi2_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")))]\n-  \"ix86_unary_operator_ok (NOT, SImode, operands)\"\n-  \"not{l}\\t%0\"\n+;; %%% Potential partial reg stall on alternative 1.  What to do?\n+(define_insn \"*one_cmplqi2_1\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r\")\n+\t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")))]\n+  \"ix86_unary_operator_ok (NOT, QImode, operands)\"\n+  \"@\n+   not{b}\\t%0\n+   not{l}\\t%k0\"\n   [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"QI,SI\")])\n \n ;; ??? Currently never generated - xor is used instead.\n (define_insn \"*one_cmplsi2_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (not:SI (match_operand:SI 1 \"register_operand\" \"0\"))))]\n+\t(zero_extend:DI\n+\t  (not:SI (match_operand:SI 1 \"register_operand\" \"0\"))))]\n   \"TARGET_64BIT && ix86_unary_operator_ok (NOT, SImode, operands)\"\n   \"not{l}\\t%k0\"\n   [(set_attr \"type\" \"negnot\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*one_cmplsi2_2\"\n+(define_insn \"*one_cmpl<mode>2_2\"\n   [(set (reg FLAGS_REG)\n-\t(compare (not:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\"))\n+\t(compare (not:SWI (match_operand:SWI 1 \"nonimmediate_operand\" \"0\"))\n \t\t (const_int 0)))\n-   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(not:SI (match_dup 1)))]\n+   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n+\t(not:SWI (match_dup 1)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n-   && ix86_unary_operator_ok (NOT, SImode, operands)\"\n+   && ix86_unary_operator_ok (NOT, <MODE>mode, operands)\"\n   \"#\"\n   [(set_attr \"type\" \"alu1\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_split\n   [(set (match_operand 0 \"flags_reg_operand\" \"\")\n \t(match_operator 2 \"compare_operator\"\n-\t  [(not:SI (match_operand:SI 3 \"nonimmediate_operand\" \"\"))\n+\t  [(not:SWI (match_operand:SWI 3 \"nonimmediate_operand\" \"\"))\n \t   (const_int 0)]))\n-   (set (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n-\t(not:SI (match_dup 3)))]\n+   (set (match_operand:SWI 1 \"nonimmediate_operand\" \"\")\n+\t(not:SWI (match_dup 3)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\"\n   [(parallel [(set (match_dup 0)\n-\t\t   (match_op_dup 2 [(xor:SI (match_dup 3) (const_int -1))\n+\t\t   (match_op_dup 2 [(xor:SWI (match_dup 3) (const_int -1))\n \t\t\t\t    (const_int 0)]))\n \t      (set (match_dup 1)\n-\t\t   (xor:SI (match_dup 3) (const_int -1)))])]\n+\t\t   (xor:SWI (match_dup 3) (const_int -1)))])]\n   \"\")\n \n ;; ??? Currently never generated - xor is used instead.\n@@ -10359,91 +10183,6 @@\n \t      (set (match_dup 1)\n \t\t   (zero_extend:DI (xor:SI (match_dup 3) (const_int -1))))])]\n   \"\")\n-\n-(define_expand \"one_cmplhi2\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n-\t(not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_HIMODE_MATH\"\n-  \"ix86_expand_unary_operator (NOT, HImode, operands); DONE;\")\n-\n-(define_insn \"*one_cmplhi2_1\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")))]\n-  \"ix86_unary_operator_ok (NOT, HImode, operands)\"\n-  \"not{w}\\t%0\"\n-  [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_insn \"*one_cmplhi2_2\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (not:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t (const_int 0)))\n-   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n-\t(not:HI (match_dup 1)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n-   && ix86_unary_operator_ok (NEG, HImode, operands)\"\n-  \"#\"\n-  [(set_attr \"type\" \"alu1\")\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_split\n-  [(set (match_operand 0 \"flags_reg_operand\" \"\")\n-\t(match_operator 2 \"compare_operator\"\n-\t  [(not:HI (match_operand:HI 3 \"nonimmediate_operand\" \"\"))\n-\t   (const_int 0)]))\n-   (set (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n-\t(not:HI (match_dup 3)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\"\n-  [(parallel [(set (match_dup 0)\n-\t\t   (match_op_dup 2 [(xor:HI (match_dup 3) (const_int -1))\n-\t\t      \t\t    (const_int 0)]))\n-\t      (set (match_dup 1)\n-\t\t   (xor:HI (match_dup 3) (const_int -1)))])]\n-  \"\")\n-\n-;; %%% Potential partial reg stall on alternative 1.  What to do?\n-(define_expand \"one_cmplqi2\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n-\t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n-  \"TARGET_QIMODE_MATH\"\n-  \"ix86_expand_unary_operator (NOT, QImode, operands); DONE;\")\n-\n-(define_insn \"*one_cmplqi2_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r\")\n-\t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")))]\n-  \"ix86_unary_operator_ok (NOT, QImode, operands)\"\n-  \"@\n-   not{b}\\t%0\n-   not{l}\\t%k0\"\n-  [(set_attr \"type\" \"negnot\")\n-   (set_attr \"mode\" \"QI,SI\")])\n-\n-(define_insn \"*one_cmplqi2_2\"\n-  [(set (reg FLAGS_REG)\n-\t(compare (not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t (const_int 0)))\n-   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n-\t(not:QI (match_dup 1)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\n-   && ix86_unary_operator_ok (NOT, QImode, operands)\"\n-  \"#\"\n-  [(set_attr \"type\" \"alu1\")\n-   (set_attr \"mode\" \"QI\")])\n-\n-(define_split\n-  [(set (match_operand 0 \"flags_reg_operand\" \"\")\n-\t(match_operator 2 \"compare_operator\"\n-\t  [(not:QI (match_operand:QI 3 \"nonimmediate_operand\" \"\"))\n-\t   (const_int 0)]))\n-   (set (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n-\t(not:QI (match_dup 3)))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\"\n-  [(parallel [(set (match_dup 0)\n-\t\t   (match_op_dup 2 [(xor:QI (match_dup 3) (const_int -1))\n-\t\t      \t\t    (const_int 0)]))\n-\t      (set (match_dup 1)\n-\t\t   (xor:QI (match_dup 3) (const_int -1)))])]\n-  \"\")\n \f\n ;; Arithmetic shift instructions\n "}]}