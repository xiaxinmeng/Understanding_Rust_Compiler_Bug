{"sha": "c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAxYjllYzhlYmNhM2IzNjBjZWIwY2EzNmE2ODVjNWJkZTFmNzMyMg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-08-15T21:16:52Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-08-15T21:16:52Z"}, "message": "parse.y (sizeof, [...]): New non-terminals to increment skip_evaluation.\n\n* parse.y (sizeof, alignof, typeof): New non-terminals to\nincrement skip_evaluation.  Replace terminals with them and\ndecrement skip_evaluation at the end of rules using them.\n* decl2.c (mark_used): Don't assemble_external if\nskipping evaluation.\n\nFrom-SVN: r56359", "tree": {"sha": "95089cc71f56476e15c245fd3e1233b5298fa642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95089cc71f56476e15c245fd3e1233b5298fa642"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322/comments", "author": null, "committer": null, "parents": [{"sha": "25587e40f5d35cc73b6351b140e4c3d90aed8f7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25587e40f5d35cc73b6351b140e4c3d90aed8f7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25587e40f5d35cc73b6351b140e4c3d90aed8f7c"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "7d47a099a477bb1a5554dc762168a8af6bd236b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322", "patch": "@@ -1,3 +1,11 @@\n+2002-08-15  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* parse.y (sizeof, alignof, typeof): New non-terminals to\n+\tincrement skip_evaluation.  Replace terminals with them and\n+\tdecrement skip_evaluation at the end of rules using them.\n+\t* decl2.c (mark_used): Don't assemble_external if\n+\tskipping evaluation.\n+\n 2002-08-15  Gabriel Dos Reis  <gdr@nerim.net>\n \n \tFix PR/7504"}, {"sha": "960dff3338e794e1a0e6064d6e4680fa19ea2c3f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322", "patch": "@@ -4717,7 +4717,8 @@ mark_used (decl)\n   TREE_USED (decl) = 1;\n   if (processing_template_decl)\n     return;\n-  assemble_external (decl);\n+  if (!skip_evaluation)\n+    assemble_external (decl);\n \n   /* Is it a synthesized method that needs to be synthesized?  */\n   if (TREE_CODE (decl) == FUNCTION_DECL"}, {"sha": "8fe244e6147fae3502ea14824047d0e4215e4cb9", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=c01b9ec8ebca3b360ceb0ca36a685c5bde1f7322", "patch": "@@ -1277,16 +1277,20 @@ unary_expr:\n \t/* Refer to the address of a label as a pointer.  */\n \t| ANDAND identifier\n \t\t{ $$ = finish_label_address_expr ($2); }\n-\t| SIZEOF unary_expr  %prec UNARY\n-\t\t{ $$ = finish_sizeof ($2); }\n-\t| SIZEOF '(' type_id ')'  %prec HYPERUNARY\n+\t| sizeof unary_expr  %prec UNARY\n+\t\t{ $$ = finish_sizeof ($2);\n+\t\t  skip_evaluation--; }\n+\t| sizeof '(' type_id ')'  %prec HYPERUNARY\n \t\t{ $$ = finish_sizeof (groktypename ($3.t));\n-\t\t  check_for_new_type (\"sizeof\", $3); }\n-\t| ALIGNOF unary_expr  %prec UNARY\n-\t\t{ $$ = finish_alignof ($2); }\n-\t| ALIGNOF '(' type_id ')'  %prec HYPERUNARY\n+\t\t  check_for_new_type (\"sizeof\", $3);\n+\t\t  skip_evaluation--; }\n+\t| alignof unary_expr  %prec UNARY\n+\t\t{ $$ = finish_alignof ($2);\n+\t\t  skip_evaluation--; }\n+\t| alignof '(' type_id ')'  %prec HYPERUNARY\n \t\t{ $$ = finish_alignof (groktypename ($3.t));\n-\t\t  check_for_new_type (\"alignof\", $3); }\n+\t\t  check_for_new_type (\"alignof\", $3);\n+\t\t  skip_evaluation--; }\n \n \t/* The %prec EMPTY's here are required by the = init initializer\n \t   syntax extension; see below.  */\n@@ -2004,6 +2008,18 @@ reserved_typespecquals:\n \t\t{ $$ = tree_cons ($1, NULL_TREE, NULL_TREE); }\n \t;\n \n+sizeof:\n+\tSIZEOF { skip_evaluation++; }\n+\t;\n+\n+alignof:\n+\tALIGNOF { skip_evaluation++; }\n+\t;\n+\n+typeof:\n+\tTYPEOF { skip_evaluation++; }\n+\t;\n+\n /* A typespec (but not a type qualifier).\n    Once we have seen one of these in a declaration,\n    if a typedef name appears then it is being redeclared.  */\n@@ -2015,12 +2031,14 @@ typespec:\n \t\t{ $$.t = $1; $$.new_type_flag = 0; $$.lookups = NULL_TREE; }\n \t| complete_type_name\n \t\t{ $$.t = $1; $$.new_type_flag = 0; $$.lookups = NULL_TREE; }\n-\t| TYPEOF '(' expr ')'\n+\t| typeof '(' expr ')'\n \t\t{ $$.t = finish_typeof ($3);\n-\t\t  $$.new_type_flag = 0; $$.lookups = NULL_TREE; }\n-\t| TYPEOF '(' type_id ')'\n+\t\t  $$.new_type_flag = 0; $$.lookups = NULL_TREE;\n+\t\t  skip_evaluation--; }\n+\t| typeof '(' type_id ')'\n \t\t{ $$.t = groktypename ($3.t);\n-\t\t  $$.new_type_flag = 0; $$.lookups = NULL_TREE; }\n+\t\t  $$.new_type_flag = 0; $$.lookups = NULL_TREE;\n+\t\t  skip_evaluation--; }\n \t| SIGOF '(' expr ')'\n \t\t{ tree type = TREE_TYPE ($3);\n "}]}