{"sha": "1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e", "node_id": "C_kwDOANBUbNoAKDFjZDNmYWY1ZGRkYjNjYmZhMmVkMzA4ZWNmM2RiNGY3MGJmZjMzN2U", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-03-30T20:59:33Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-05-04T20:10:09Z"}, "message": "c-family: Tweak -Woverflow diagnostic\n\nWhen g++ emits\n\nwarning: overflow in conversion from 'int' to 'char' changes value from '300' to '',''\n\nfor code like \"char c = 300;\" it might raise a few eyebrows.  With this\nwarning we're not interested in the ASCII representation of the char, only\nthe numerical value, so convert constants of type char to int.  It looks\nlike this conversion only needs to be done for char_type_node.\n\ngcc/c-family/ChangeLog:\n\n\t* c-warn.cc (warnings_for_convert_and_check): Convert constants of type\n\tchar to int.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/Wconversion-1.c: New test.", "tree": {"sha": "1342bb9e55c0fdfc47b5370c4af01ed3ffb566ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1342bb9e55c0fdfc47b5370c4af01ed3ffb566ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a733dea9e7c39352ce9f72059938833eaa819467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a733dea9e7c39352ce9f72059938833eaa819467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a733dea9e7c39352ce9f72059938833eaa819467"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "cae89294aea124159f38b84de5f95742a8cc869b", "filename": "gcc/c-family/c-warn.cc", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e/gcc%2Fc-family%2Fc-warn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e/gcc%2Fc-family%2Fc-warn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.cc?ref=1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e", "patch": "@@ -1404,8 +1404,14 @@ warnings_for_convert_and_check (location_t loc, tree type, tree expr,\n     result = TREE_OPERAND (result, 1);\n \n   bool cst = TREE_CODE_CLASS (TREE_CODE (result)) == tcc_constant;\n-\n   tree exprtype = TREE_TYPE (expr);\n+  tree result_diag;\n+  /* We're interested in the actual numerical value here, not its ASCII\n+     representation.  */\n+  if (cst && TYPE_MAIN_VARIANT (TREE_TYPE (result)) == char_type_node)\n+    result_diag = fold_convert (integer_type_node, result);\n+  else\n+    result_diag = result;\n \n   if (TREE_CODE (expr) == INTEGER_CST\n       && (TREE_CODE (type) == INTEGER_TYPE\n@@ -1430,7 +1436,7 @@ warnings_for_convert_and_check (location_t loc, tree type, tree expr,\n \t\t\t\t  \"changes value from %qE to %qE\")\n \t\t\t     : G_(\"unsigned conversion from %qT to %qT \"\n \t\t\t\t  \"changes value from %qE to %qE\")),\n-\t\t\t    exprtype, type, expr, result);\n+\t\t\t    exprtype, type, expr, result_diag);\n \t      else\n \t\twarning_at (loc, OPT_Woverflow,\n \t\t\t    (TYPE_UNSIGNED (exprtype)\n@@ -1449,7 +1455,7 @@ warnings_for_convert_and_check (location_t loc, tree type, tree expr,\n \t    warning_at (loc, OPT_Woverflow,\n \t\t\t\"overflow in conversion from %qT to %qT \"\n \t\t\t\"changes value from %qE to %qE\",\n-\t\t\texprtype, type, expr, result);\n+\t\t\texprtype, type, expr, result_diag);\n \t  else\n \t    warning_at (loc, OPT_Woverflow,\n \t\t\t\"overflow in conversion from %qT to %qT \"\n@@ -1466,7 +1472,7 @@ warnings_for_convert_and_check (location_t loc, tree type, tree expr,\n \t    warning_at (loc, OPT_Woverflow,\n \t\t\t\"overflow in conversion from %qT to %qT \"\n \t\t\t\"changes value from %qE to %qE\",\n-\t\t\texprtype, type, expr, result);\n+\t\t\texprtype, type, expr, result_diag);\n \t  else\n \t    warning_at (loc, OPT_Woverflow,\n \t\t\t\"overflow in conversion from %qT to %qT \"\n@@ -1483,7 +1489,7 @@ warnings_for_convert_and_check (location_t loc, tree type, tree expr,\n \twarning_at (loc, OPT_Woverflow,\n \t\t    \"overflow in conversion from %qT to %qT \"\n \t\t    \"changes value from %qE to %qE\",\n-\t\t    exprtype, type, expr, result);\n+\t\t    exprtype, type, expr, result_diag);\n       else\n \twarning_at (loc, OPT_Woverflow,\n \t\t    \"overflow in conversion from %qT to %qT \""}, {"sha": "ed65918c70f65a63f021023f39d331da94e2e6ce", "filename": "gcc/testsuite/c-c++-common/Wconversion-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWconversion-1.c?ref=1cd3faf5dddb3cbfa2ed308ecf3db4f70bff337e", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wconversion\" } */\n+\n+typedef char T;\n+\n+void g()\n+{\n+  char c = 300; /* { dg-warning \"conversion from .int. to .char. changes value from .300. to .44.\" } */\n+  T t = 300; /* { dg-warning \"conversion from .int. to .T. {aka .char.} changes value from .300. to .44.\" } */\n+  signed char sc = 300; /* { dg-warning \"conversion from .int. to .signed char. changes value from .300. to .44.\" } */\n+  unsigned char uc = 300; /* { dg-warning \"conversion from .int. to .unsigned char. changes value from .300. to .44.\" } */\n+  unsigned char uc2 = 300u; /* { dg-warning \"conversion from .unsigned int. to .unsigned char. changes value from .300. to .44.\" } */\n+  char c2 = (double)1.0 + 200; /* { dg-warning \"overflow in conversion from .double. to .char. changes value from .2.01e\\\\+2. to .127.\" } */\n+}"}]}