{"sha": "2fa030864034f6cc54250eaa1ae51df568535cd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZhMDMwODY0MDM0ZjZjYzU0MjUwZWFhMWFlNTFkZjU2ODUzNWNkOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-08-02T13:14:15Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-08-02T13:14:15Z"}, "message": "gigi.h (end_subprog_body): Tweak comment.\n\n\t* gcc-interface/gigi.h (end_subprog_body): Tweak comment.\n\t* gcc-interface/utils.c (end_subprog_body): Likewise.\n\t* gcc-interface/trans.c (gigi): Likewise.\n\t(gnat_to_gnu): Likewise.\n\nFrom-SVN: r150352", "tree": {"sha": "206363b66b0edfa77cb38b07adec48d2aa42b2e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/206363b66b0edfa77cb38b07adec48d2aa42b2e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fa030864034f6cc54250eaa1ae51df568535cd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fa030864034f6cc54250eaa1ae51df568535cd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fa030864034f6cc54250eaa1ae51df568535cd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fa030864034f6cc54250eaa1ae51df568535cd8/comments", "author": null, "committer": null, "parents": [{"sha": "e2ab8b0935d02525be9db7bc1a46fa41a4c256e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ab8b0935d02525be9db7bc1a46fa41a4c256e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2ab8b0935d02525be9db7bc1a46fa41a4c256e9"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "aed7ce6f579a5e440d23ac1a19f60525cbada607", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa030864034f6cc54250eaa1ae51df568535cd8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa030864034f6cc54250eaa1ae51df568535cd8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2fa030864034f6cc54250eaa1ae51df568535cd8", "patch": "@@ -1,3 +1,10 @@\n+2009-08-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (end_subprog_body): Tweak comment.\n+\t* gcc-interface/utils.c (end_subprog_body): Likewise.\n+\t* gcc-interface/trans.c (gigi): Likewise.\n+\t(gnat_to_gnu): Likewise.\n+\n 2009-07-30  Ben Brosgol  <brosgol@adacore.com>\n \n \t* gnat_ugn.texi: Correct minor texi glitch."}, {"sha": "a6171b26578b4d9d8e65d1372dca067812859106", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa030864034f6cc54250eaa1ae51df568535cd8/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa030864034f6cc54250eaa1ae51df568535cd8/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=2fa030864034f6cc54250eaa1ae51df568535cd8", "patch": "@@ -677,8 +677,7 @@ extern tree create_label_decl (tree label_name);\n    appearing in the subprogram.  */\n extern void begin_subprog_body (tree subprog_decl);\n \n-/* Finish the definition of the current subprogram BODY and compile it all the\n-   way to assembler language output.  */\n+/* Finish the definition of the current subprogram BODY and finalize it.  */\n extern void end_subprog_body (tree body);\n \n /* Build a template of type TEMPLATE_TYPE from the array bounds of ARRAY_TYPE."}, {"sha": "84053a4c2e8a19923ed4dfe1357762b186e58d0b", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa030864034f6cc54250eaa1ae51df568535cd8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa030864034f6cc54250eaa1ae51df568535cd8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=2fa030864034f6cc54250eaa1ae51df568535cd8", "patch": "@@ -626,8 +626,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n   /* Finally see if we have any elaboration procedures to deal with.  */\n   for (info = elab_info_list; info; info = info->next)\n     {\n-      tree gnu_body = DECL_SAVED_TREE (info->elab_proc);\n-      tree gnu_stmts;\n+      tree gnu_body = DECL_SAVED_TREE (info->elab_proc), gnu_stmts;\n \n       /* Unshare SAVE_EXPRs between subprograms.  These are not unshared by\n \t the gimplifier for obvious reasons, but it turns out that we need to\n@@ -639,21 +638,16 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n \t an upstream bug for which we would not change the outcome.  */\n       walk_tree_without_duplicates (&gnu_body, unshare_save_expr, NULL);\n \n-\n-      /* We should have a BIND_EXPR, but it may or may not have any statements\n-\t in it.  If it doesn't have any, we have nothing to do.  */\n+      /* We should have a BIND_EXPR but it may not have any statements in it.\n+\t If it doesn't have any, we have nothing to do except for setting the\n+\t flag on the GNAT node.  Otherwise, process the function as others.  */\n       gnu_stmts = gnu_body;\n       if (TREE_CODE (gnu_stmts) == BIND_EXPR)\n \tgnu_stmts = BIND_EXPR_BODY (gnu_stmts);\n-\n-      /* If there are no statements, there is no elaboration code.  */\n       if (!gnu_stmts || !STATEMENT_LIST_HEAD (gnu_stmts))\n-\t{\n-\t  Set_Has_No_Elaboration_Code (info->gnat_node, 1);\n-\t}\n+\tSet_Has_No_Elaboration_Code (info->gnat_node, 1);\n       else\n \t{\n-\t  /* Process the function as others.  */\n \t  begin_subprog_body (info->elab_proc);\n \t  end_subprog_body (gnu_body);\n \t}\n@@ -5294,12 +5288,11 @@ gnat_to_gnu (Node_Id gnat_node)\n       gnu_result = alloc_stmt_list ();\n       break;\n \n-    /* SCIL nodes require no processing by this backend */\n-\n     case N_SCIL_Dispatch_Table_Object_Init:\n     case N_SCIL_Dispatch_Table_Tag_Init:\n     case N_SCIL_Dispatching_Call:\n     case N_SCIL_Tag_Init:\n+      /* SCIL nodes require no processing for GCC.  */\n       gnu_result = alloc_stmt_list ();\n       break;\n "}, {"sha": "e61a0fad537ba8319add3617dcbe96d1c2d335ea", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fa030864034f6cc54250eaa1ae51df568535cd8/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fa030864034f6cc54250eaa1ae51df568535cd8/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=2fa030864034f6cc54250eaa1ae51df568535cd8", "patch": "@@ -2069,8 +2069,7 @@ gnat_genericize (tree fndecl)\n   pointer_set_destroy (p_set);\n }\n \n-/* Finish the definition of the current subprogram BODY and compile it all the\n-   way to assembler language output.  */\n+/* Finish the definition of the current subprogram BODY and finalize it.  */\n \n void\n end_subprog_body (tree body)\n@@ -2109,8 +2108,7 @@ end_subprog_body (tree body)\n   /* Dump functions before gimplification.  */\n   dump_function (TDI_original, fndecl);\n \n-  /* We do different things for nested and non-nested functions.\n-     ??? This should be in cgraph.  */\n+  /* ??? This special handling of nested functions is probably obsolete.  */\n   if (!DECL_CONTEXT (fndecl))\n     cgraph_finalize_function (fndecl, false);\n   else"}]}