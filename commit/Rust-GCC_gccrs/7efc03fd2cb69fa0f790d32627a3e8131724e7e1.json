{"sha": "7efc03fd2cb69fa0f790d32627a3e8131724e7e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VmYzAzZmQyY2I2OWZhMGY3OTBkMzI2MjdhM2U4MTMxNzI0ZTdlMQ==", "commit": {"author": {"name": "Dmitrij Pochepko", "email": "dmitrij.pochepko@bell-sw.com", "date": "2020-07-17T09:20:12Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-07-17T09:20:12Z"}, "message": "__builtin_shuffle sometimes should produce zip1 rather than TBL (PR82199)\n\nThe following patch enables vector permutations optimization by using\nanother vector element size when applicable.  It allows usage of simpler\ninstructions in applicable cases.\n\nexample:\n\nvector float f(vector float a, vector float b)\n{\n  return __builtin_shuffle  (a, b, (vector int){0, 1, 4,5});\n}\n\nwas compiled into:\n...\n\tadrp    x0, .LC0\n\tldr     q2, [x0, #:lo12:.LC0]\n\ttbl     v0.16b, {v0.16b - v1.16b}, v2.16b\n...\n\nand after patch:\n...\n\tzip1    v0.2d, v0.2d, v1.2d\n...\n\nbootstrapped and tested on aarch64-linux-gnu with no regressions\n\ngcc/ChangeLog:\n\n2020-07-17  Andrew Pinski  <apinksi@marvell.com>\n\n\tPR target/82199\n\t* config/aarch64/aarch64.c (aarch64_evpc_reencode): New function.\n\t(aarch64_expand_vec_perm_const_1): Call it.\n\ngcc/testsuite/ChangeLog:\n\n2020-07-17  Andrew Pinski  <apinksi@marvell.com>\n\n\tPR target/82199\n\t* gcc.target/aarch64/vdup_n_3.c: New test.\n\t* gcc.target/aarch64/vzip_1.c: New test.\n\t* gcc.target/aarch64/vzip_2.c: New test.\n\t* gcc.target/aarch64/vzip_3.c: New test.\n\t* gcc.target/aarch64/vzip_4.c: New test.\n\nCo-Authored-By: Dmitrij Pochepko <dmitrij.pochepko@bell-sw.com>", "tree": {"sha": "8a218ef90b87eb98a1f20d51a83ff3047d70cf04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a218ef90b87eb98a1f20d51a83ff3047d70cf04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7efc03fd2cb69fa0f790d32627a3e8131724e7e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7efc03fd2cb69fa0f790d32627a3e8131724e7e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7efc03fd2cb69fa0f790d32627a3e8131724e7e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7efc03fd2cb69fa0f790d32627a3e8131724e7e1/comments", "author": {"login": "dpochepk", "id": 60473343, "node_id": "MDQ6VXNlcjYwNDczMzQz", "avatar_url": "https://avatars.githubusercontent.com/u/60473343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dpochepk", "html_url": "https://github.com/dpochepk", "followers_url": "https://api.github.com/users/dpochepk/followers", "following_url": "https://api.github.com/users/dpochepk/following{/other_user}", "gists_url": "https://api.github.com/users/dpochepk/gists{/gist_id}", "starred_url": "https://api.github.com/users/dpochepk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dpochepk/subscriptions", "organizations_url": "https://api.github.com/users/dpochepk/orgs", "repos_url": "https://api.github.com/users/dpochepk/repos", "events_url": "https://api.github.com/users/dpochepk/events{/privacy}", "received_events_url": "https://api.github.com/users/dpochepk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf592b2ff776aef71c91924cdb5e0d10488496cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf592b2ff776aef71c91924cdb5e0d10488496cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf592b2ff776aef71c91924cdb5e0d10488496cf"}], "stats": {"total": 124, "additions": 124, "deletions": 0}, "files": [{"sha": "110f49d0c735fbd3ab0a5eb97868aafe3703d995", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efc03fd2cb69fa0f790d32627a3e8131724e7e1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efc03fd2cb69fa0f790d32627a3e8131724e7e1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7efc03fd2cb69fa0f790d32627a3e8131724e7e1", "patch": "@@ -20020,6 +20020,8 @@ struct expand_vec_perm_d\n   bool testing_p;\n };\n \n+static bool aarch64_expand_vec_perm_const_1 (struct expand_vec_perm_d *d);\n+\n /* Generate a variable permutation.  */\n \n static void\n@@ -20205,6 +20207,59 @@ aarch64_evpc_trn (struct expand_vec_perm_d *d)\n   return true;\n }\n \n+/* Try to re-encode the PERM constant so it combines odd and even elements.\n+   This rewrites constants such as {0, 1, 4, 5}/V4SF to {0, 2}/V2DI.\n+   We retry with this new constant with the full suite of patterns.  */\n+static bool\n+aarch64_evpc_reencode (struct expand_vec_perm_d *d)\n+{\n+  expand_vec_perm_d newd;\n+  unsigned HOST_WIDE_INT nelt;\n+\n+  if (d->vec_flags != VEC_ADVSIMD)\n+    return false;\n+\n+  /* Get the new mode.  Always twice the size of the inner\n+     and half the elements.  */\n+  poly_uint64 vec_bits = GET_MODE_BITSIZE (d->vmode);\n+  unsigned int new_elt_bits = GET_MODE_UNIT_BITSIZE (d->vmode) * 2;\n+  auto new_elt_mode = int_mode_for_size (new_elt_bits, false).require ();\n+  machine_mode new_mode = aarch64_simd_container_mode (new_elt_mode, vec_bits);\n+\n+  if (new_mode == word_mode)\n+    return false;\n+\n+  /* to_constant is safe since this routine is specific to Advanced SIMD\n+     vectors.  */\n+  nelt = d->perm.length ().to_constant ();\n+\n+  vec_perm_builder newpermconst;\n+  newpermconst.new_vector (nelt / 2, nelt / 2, 1);\n+\n+  /* Convert the perm constant if we can.  Require even, odd as the pairs.  */\n+  for (unsigned int i = 0; i < nelt; i += 2)\n+    {\n+      poly_int64 elt0 = d->perm[i];\n+      poly_int64 elt1 = d->perm[i + 1];\n+      poly_int64 newelt;\n+      if (!multiple_p (elt0, 2, &newelt) || maybe_ne (elt0 + 1, elt1))\n+\treturn false;\n+      newpermconst.quick_push (newelt.to_constant ());\n+    }\n+  newpermconst.finalize ();\n+\n+  newd.vmode = new_mode;\n+  newd.vec_flags = VEC_ADVSIMD;\n+  newd.target = d->target ? gen_lowpart (new_mode, d->target) : NULL;\n+  newd.op0 = d->op0 ? gen_lowpart (new_mode, d->op0) : NULL;\n+  newd.op1 = d->op1 ? gen_lowpart (new_mode, d->op1) : NULL;\n+  newd.testing_p = d->testing_p;\n+  newd.one_vector_p = d->one_vector_p;\n+\n+  newd.perm.new_vector (newpermconst, newd.one_vector_p ? 1 : 2, nelt / 2);\n+  return aarch64_expand_vec_perm_const_1 (&newd);\n+}\n+\n /* Recognize patterns suitable for the UZP instructions.  */\n static bool\n aarch64_evpc_uzp (struct expand_vec_perm_d *d)\n@@ -20602,6 +20657,8 @@ aarch64_expand_vec_perm_const_1 (struct expand_vec_perm_d *d)\n \treturn true;\n       else if (aarch64_evpc_sel (d))\n \treturn true;\n+      else if (aarch64_evpc_reencode (d))\n+\treturn true;\n       if (d->vec_flags == VEC_SVE_DATA)\n \treturn aarch64_evpc_sve_tbl (d);\n       else if (d->vec_flags == VEC_ADVSIMD)"}, {"sha": "5234f5e563dc37968c62543edce8e5b622a6d0b4", "filename": "gcc/testsuite/gcc.target/aarch64/vdup_n_3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efc03fd2cb69fa0f790d32627a3e8131724e7e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvdup_n_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efc03fd2cb69fa0f790d32627a3e8131724e7e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvdup_n_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvdup_n_3.c?ref=7efc03fd2cb69fa0f790d32627a3e8131724e7e1", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define vector __attribute__((vector_size(4*sizeof(float))))\n+\n+/* These are both dups. */\n+vector float f(vector float a, vector float b)\n+{\n+  return __builtin_shuffle (a, a, (vector int){0, 1, 0, 1});\n+}\n+vector float f1(vector float a, vector float b)\n+{\n+  return __builtin_shuffle (a, a, (vector int){2, 3, 2, 3});\n+}\n+\n+/* { dg-final { scan-assembler-times {[ \\t]*dup[ \\t]+v[0-9]+\\.2d} 2 } } */"}, {"sha": "837adb029cb8b8e2ad3a689b61f1a814701afa42", "filename": "gcc/testsuite/gcc.target/aarch64/vzip_1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efc03fd2cb69fa0f790d32627a3e8131724e7e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvzip_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efc03fd2cb69fa0f790d32627a3e8131724e7e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvzip_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvzip_1.c?ref=7efc03fd2cb69fa0f790d32627a3e8131724e7e1", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target aarch64_little_endian } */\n+\n+#define vector __attribute__((vector_size(2*sizeof(float))))\n+\n+vector float f(vector float a, vector float b)\n+{\n+  return __builtin_shuffle (a, b, (vector int){0, 2});\n+}\n+\n+/* { dg-final { scan-assembler-times {[ \\t]*zip1[ \\t]+v[0-9]+\\.2s} 1 } } */"}, {"sha": "2287d815ffc796c75d3608ca8611269d70ff9122", "filename": "gcc/testsuite/gcc.target/aarch64/vzip_2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efc03fd2cb69fa0f790d32627a3e8131724e7e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvzip_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efc03fd2cb69fa0f790d32627a3e8131724e7e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvzip_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvzip_2.c?ref=7efc03fd2cb69fa0f790d32627a3e8131724e7e1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target aarch64_little_endian } */\n+\n+#define vector __attribute__((vector_size(4*sizeof(float))))\n+\n+vector float f(vector float a, vector float b)\n+{\n+  /* This is the same as zip1 v.2d as {0, 1, 4, 5} can be converted to {0, 2}. */\n+  return __builtin_shuffle (a, b, (vector int){0, 1, 4, 5});\n+}\n+\n+/* { dg-final { scan-assembler-times {[ \\t]*zip1[ \\t]+v[0-9]+\\.2d} 1 } } */"}, {"sha": "91c444b8d88d8132bffaac7742f9539f138158d4", "filename": "gcc/testsuite/gcc.target/aarch64/vzip_3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efc03fd2cb69fa0f790d32627a3e8131724e7e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvzip_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efc03fd2cb69fa0f790d32627a3e8131724e7e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvzip_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvzip_3.c?ref=7efc03fd2cb69fa0f790d32627a3e8131724e7e1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target aarch64_little_endian } */\n+\n+#define vector __attribute__((vector_size(4*sizeof(float))))\n+\n+vector float f(vector float a, vector float b)\n+{\n+  /* This is the same as zip1 v.2d as {4, 5, 0, 1} can be converted to {2, 0}. */\n+  return __builtin_shuffle (a, b, (vector int){4, 5, 0, 1});\n+}\n+\n+/* { dg-final { scan-assembler-times {[ \\t]*zip1[ \\t]+v[0-9]+\\.2d} 1 } } */"}, {"sha": "b4047e22b73d9d8d66a9b666328f00cedf086368", "filename": "gcc/testsuite/gcc.target/aarch64/vzip_4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7efc03fd2cb69fa0f790d32627a3e8131724e7e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvzip_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7efc03fd2cb69fa0f790d32627a3e8131724e7e1/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvzip_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvzip_4.c?ref=7efc03fd2cb69fa0f790d32627a3e8131724e7e1", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target aarch64_little_endian } */\n+\n+#define vector __attribute__((vector_size(4*sizeof(float))))\n+\n+vector float f(vector float a, vector float b)\n+{\n+  /* This is the same as zip2 v.2d as {2, 3, 6, 7} can be converted to {1, 3}. */\n+  return __builtin_shuffle (a, b, (vector int){2, 3, 6, 7});\n+}\n+\n+/* { dg-final { scan-assembler-times {[ \\t]*zip2[ \\t]+v[0-9]+\\.2d} 1 } } */"}]}