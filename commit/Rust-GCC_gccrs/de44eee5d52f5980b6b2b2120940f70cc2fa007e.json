{"sha": "de44eee5d52f5980b6b2b2120940f70cc2fa007e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU0NGVlZTVkNTJmNTk4MGI2YjJiMjEyMDk0MGY3MGNjMmZhMDA3ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-18T11:24:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-18T13:26:39Z"}, "message": "libstdc++: Minor optimization for min/max/minmax\n\nThe debug mode checks for a valid range are redundant when we have an\ninitializer_list argument, because we know it's a valid range already.\nBy making std::min(initialier_list<T>) call the internal __min_element\nfunction directly we avoid a function call and skip those checks. The\nsame can be done for the overload taking a comparison function, and also\nfor the std::max and std::minmax overloads for initializer_list\narguments.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_algo.h (min(initializer_list<T>))\n\t(min(initializer_list<T>, Compare)): Call __min_element directly to\n\tavoid redundant debug checks for valid ranges.\n\t(max(initializer_list<T>), max(initializer_list<T>, Compare)):\n\tLikewise, for __max_element.\n\t(minmax(initializer_list<T>), minmax(initializer_list<T>, Compare)):\n\tLikewise, for __minmax_element.", "tree": {"sha": "250ab418e6450e3c888bd77a575c98b74e2d48b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/250ab418e6450e3c888bd77a575c98b74e2d48b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de44eee5d52f5980b6b2b2120940f70cc2fa007e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de44eee5d52f5980b6b2b2120940f70cc2fa007e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de44eee5d52f5980b6b2b2120940f70cc2fa007e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de44eee5d52f5980b6b2b2120940f70cc2fa007e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "085c2f8f0e13d7c1515ce86755a52a31faf0cf47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/085c2f8f0e13d7c1515ce86755a52a31faf0cf47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/085c2f8f0e13d7c1515ce86755a52a31faf0cf47"}], "stats": {"total": 78, "additions": 50, "deletions": 28}, "files": [{"sha": "ac4f2d0f7211cc22c704e758cdc2d7936bbe7ec0", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 50, "deletions": 28, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de44eee5d52f5980b6b2b2120940f70cc2fa007e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de44eee5d52f5980b6b2b2120940f70cc2fa007e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=de44eee5d52f5980b6b2b2120940f70cc2fa007e", "patch": "@@ -3445,38 +3445,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t   __gnu_cxx::__ops::__iter_comp_iter(__comp));\n     }\n \n-  // N2722 + DR 915.\n-  template<typename _Tp>\n-    _GLIBCXX14_CONSTEXPR\n-    inline _Tp\n-    min(initializer_list<_Tp> __l)\n-    { return *std::min_element(__l.begin(), __l.end()); }\n-\n-  template<typename _Tp, typename _Compare>\n-    _GLIBCXX14_CONSTEXPR\n-    inline _Tp\n-    min(initializer_list<_Tp> __l, _Compare __comp)\n-    { return *std::min_element(__l.begin(), __l.end(), __comp); }\n-\n-  template<typename _Tp>\n-    _GLIBCXX14_CONSTEXPR\n-    inline _Tp\n-    max(initializer_list<_Tp> __l)\n-    { return *std::max_element(__l.begin(), __l.end()); }\n-\n-  template<typename _Tp, typename _Compare>\n-    _GLIBCXX14_CONSTEXPR\n-    inline _Tp\n-    max(initializer_list<_Tp> __l, _Compare __comp)\n-    { return *std::max_element(__l.begin(), __l.end(), __comp); }\n-\n   template<typename _Tp>\n     _GLIBCXX14_CONSTEXPR\n     inline pair<_Tp, _Tp>\n     minmax(initializer_list<_Tp> __l)\n     {\n+      __glibcxx_requires_irreflexive(__l.begin(), __l.end());\n       pair<const _Tp*, const _Tp*> __p =\n-\tstd::minmax_element(__l.begin(), __l.end());\n+\tstd::__minmax_element(__l.begin(), __l.end(),\n+\t\t\t      __gnu_cxx::__ops::__iter_less_iter());\n       return std::make_pair(*__p.first, *__p.second);\n     }\n \n@@ -3485,8 +3462,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline pair<_Tp, _Tp>\n     minmax(initializer_list<_Tp> __l, _Compare __comp)\n     {\n+      __glibcxx_requires_irreflexive_pred(__l.begin(), __l.end(), __comp);\n       pair<const _Tp*, const _Tp*> __p =\n-\tstd::minmax_element(__l.begin(), __l.end(), __comp);\n+\tstd::__minmax_element(__l.begin(), __l.end(),\n+\t\t\t      __gnu_cxx::__ops::__iter_comp_iter(__comp));\n       return std::make_pair(*__p.first, *__p.second);\n     }\n \n@@ -3793,7 +3772,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)\n \tstd::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));\n     }\n-#endif\n+#endif // USE C99_STDINT\n \n #endif // C++11\n \n@@ -5746,6 +5725,49 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_iter(__comp));\n     }\n \n+#if __cplusplus >= 201103L\n+  // N2722 + DR 915.\n+  template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n+    inline _Tp\n+    min(initializer_list<_Tp> __l)\n+    {\n+      __glibcxx_requires_irreflexive(__l.begin(), __l.end());\n+      return *_GLIBCXX_STD_A::__min_element(__l.begin(), __l.end(),\n+\t  __gnu_cxx::__ops::__iter_less_iter());\n+    }\n+\n+  template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n+    inline _Tp\n+    min(initializer_list<_Tp> __l, _Compare __comp)\n+    {\n+      __glibcxx_requires_irreflexive_pred(__l.begin(), __l.end(), __comp);\n+      return *_GLIBCXX_STD_A::__min_element(__l.begin(), __l.end(),\n+\t  __gnu_cxx::__ops::__iter_comp_iter(__comp));\n+    }\n+\n+  template<typename _Tp>\n+    _GLIBCXX14_CONSTEXPR\n+    inline _Tp\n+    max(initializer_list<_Tp> __l)\n+    {\n+      __glibcxx_requires_irreflexive(__l.begin(), __l.end());\n+      return *_GLIBCXX_STD_A::__max_element(__l.begin(), __l.end(),\n+\t  __gnu_cxx::__ops::__iter_less_iter());\n+    }\n+\n+  template<typename _Tp, typename _Compare>\n+    _GLIBCXX14_CONSTEXPR\n+    inline _Tp\n+    max(initializer_list<_Tp> __l, _Compare __comp)\n+    {\n+      __glibcxx_requires_irreflexive_pred(__l.begin(), __l.end(), __comp);\n+      return *_GLIBCXX_STD_A::__max_element(__l.begin(), __l.end(),\n+\t  __gnu_cxx::__ops::__iter_comp_iter(__comp));\n+    }\n+#endif // C++11\n+\n #if __cplusplus >= 201402L\n   /// Reservoir sampling algorithm.\n   template<typename _InputIterator, typename _RandomAccessIterator,"}]}