{"sha": "76a893cfc4c7e0980235816599bac497af8c40f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZhODkzY2ZjNGM3ZTA5ODAyMzU4MTY1OTliYWM0OTdhZjhjNDBmNw==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2008-02-20T07:36:47Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2008-02-20T07:36:47Z"}, "message": "spu.md (vec_unpacku_hi_v8hi, [...]): Implement.\n\n\t* config/spu/spu.md (vec_unpacku_hi_v8hi, vec_unpacku_lo_v8hi,\n\tvec_unpacks_hi_v8hi, vec_unpacks_lo_v8hi, vec_unpacku_hi_v16qi,\n\tvec_unpacku_lo_v16qi, vec_unpacks_lo_v16qi): Implement.\n\nFrom-SVN: r132472", "tree": {"sha": "5bea47e418b546bcbf5153933e1593b45545ca5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bea47e418b546bcbf5153933e1593b45545ca5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76a893cfc4c7e0980235816599bac497af8c40f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a893cfc4c7e0980235816599bac497af8c40f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76a893cfc4c7e0980235816599bac497af8c40f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a893cfc4c7e0980235816599bac497af8c40f7/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8971bdb014f33727ad39d9cfe43afc2af60ac4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8971bdb014f33727ad39d9cfe43afc2af60ac4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8971bdb014f33727ad39d9cfe43afc2af60ac4b"}], "stats": {"total": 198, "additions": 195, "deletions": 3}, "files": [{"sha": "5a188dcd328a657e54557ae68c26a221d6d2a49c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a893cfc4c7e0980235816599bac497af8c40f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a893cfc4c7e0980235816599bac497af8c40f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76a893cfc4c7e0980235816599bac497af8c40f7", "patch": "@@ -1,3 +1,9 @@\n+2008-02-20  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* config/spu/spu.md (vec_unpacku_hi_v8hi, vec_unpacku_lo_v8hi,\n+\tvec_unpacks_hi_v8hi, vec_unpacks_lo_v8hi, vec_unpacku_hi_v16qi,\n+\tvec_unpacku_lo_v16qi, vec_unpacks_lo_v16qi): Implement.\n+\n 2008-02-19  Jan Hubicka  <jh@suse.cz>\n \n \t* predict.c (tree_bb_level_predictions): Remove variable next"}, {"sha": "14854606b8ddeb9c0beb930a4c7e37093fd5d5c8", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a893cfc4c7e0980235816599bac497af8c40f7/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a893cfc4c7e0980235816599bac497af8c40f7/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=76a893cfc4c7e0980235816599bac497af8c40f7", "patch": "@@ -4455,3 +4455,179 @@ selb\\t%0,%4,%0,%3\"\n \n   DONE;\n }\")\n+\n+(define_expand \"vec_unpacku_hi_v8hi\"\n+  [(set (match_operand:V4SI 0 \"spu_reg_operand\" \"=r\")\n+        (zero_extend:V4SI \n+          (vec_select:V4HI\n+            (match_operand:V8HI 1 \"spu_reg_operand\" \"r\")\n+            (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)]))))]\n+  \"\"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x80, 0x80, 0x00, 0x01, 0x80, 0x80, 0x02, 0x03,\n+    0x80, 0x80, 0x04, 0x05, 0x80, 0x80, 0x06, 0x07};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[1], mask));\n+\n+  DONE;\n+})\n+\n+(define_expand \"vec_unpacku_lo_v8hi\"\n+  [(set (match_operand:V4SI 0 \"spu_reg_operand\" \"=r\")\n+         (zero_extend:V4SI\n+          (vec_select:V4HI\n+            (match_operand:V8HI 1 \"spu_reg_operand\" \"r\")\n+            (parallel [(const_int 4)(const_int 5)(const_int 6)(const_int 7)]))))]\n+\"\"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x80, 0x80, 0x08, 0x09, 0x80, 0x80, 0x0A, 0x0B,\n+    0x80, 0x80, 0x0C, 0x0D, 0x80, 0x80, 0x0E, 0x0F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[1], mask));\n+  \n+  DONE;\n+})\n+\n+(define_expand \"vec_unpacks_hi_v8hi\"\n+  [(set (match_operand:V4SI 0 \"spu_reg_operand\" \"=r\")\n+         (sign_extend:V4SI\n+          (vec_select:V4HI\n+            (match_operand:V8HI 1 \"spu_reg_operand\" \"r\")\n+            (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)]))))]\n+  \"\"\n+{\n+  rtx tmp1 = gen_reg_rtx (V8HImode);\n+  rtx tmp2 = gen_reg_rtx (V4SImode);\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x80, 0x80, 0x00, 0x01, 0x80, 0x80, 0x02, 0x03,\n+    0x80, 0x80, 0x04, 0x05, 0x80, 0x80, 0x06, 0x07};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (tmp1, operands[1], operands[1], mask));\n+  emit_insn (gen_spu_xshw (tmp2, tmp1)); \n+  emit_move_insn (operands[0], tmp2);\n+\n+  DONE;\n+})\n+\n+(define_expand \"vec_unpacks_lo_v8hi\"\n+  [(set (match_operand:V4SI 0 \"spu_reg_operand\" \"=r\")\n+         (sign_extend:V4SI\n+          (vec_select:V4HI\n+            (match_operand:V8HI 1 \"spu_reg_operand\" \"r\")\n+            (parallel [(const_int 4)(const_int 5)(const_int 6)(const_int 7)]))))]\n+\"\"\n+{\n+  rtx tmp1 = gen_reg_rtx (V8HImode);\n+  rtx tmp2 = gen_reg_rtx (V4SImode);\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x80, 0x80, 0x08, 0x09, 0x80, 0x80, 0x0A, 0x0B,\n+    0x80, 0x80, 0x0C, 0x0D, 0x80, 0x80, 0x0E, 0x0F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (tmp1, operands[1], operands[1], mask));\n+  emit_insn (gen_spu_xshw (tmp2, tmp1)); \n+  emit_move_insn (operands[0], tmp2);\n+\n+DONE;\n+})\n+\n+(define_expand \"vec_unpacku_hi_v16qi\"\n+  [(set (match_operand:V8HI 0 \"spu_reg_operand\" \"=r\")\n+        (zero_extend:V8HI\n+          (vec_select:V8QI\n+            (match_operand:V16QI 1 \"spu_reg_operand\" \"r\")\n+            (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)\n+                       (const_int 4)(const_int 5)(const_int 6)(const_int 7)]))))]\n+  \"\"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x80, 0x00, 0x80, 0x01, 0x80, 0x02, 0x80, 0x03,\n+    0x80, 0x04, 0x80, 0x05, 0x80, 0x06, 0x80, 0x07};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[1], mask));\n+\n+  DONE;\n+})\n+\n+(define_expand \"vec_unpacku_lo_v16qi\"\n+  [(set (match_operand:V8HI 0 \"spu_reg_operand\" \"=r\")\n+          (zero_extend:V8HI\n+          (vec_select:V8QI\n+            (match_operand:V16QI 1 \"spu_reg_operand\" \"r\")\n+            (parallel [(const_int 8)(const_int 9)(const_int 10)(const_int 11)\n+                       (const_int 12)(const_int 13)(const_int 14)(const_int 15)]))))]\n+\"\"\n+{\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x80, 0x08, 0x80, 0x09, 0x80, 0x0A, 0x80, 0x0B,\n+    0x80, 0x0C, 0x80, 0x0D, 0x80, 0x0E, 0x80, 0x0F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[1], mask));\n+\n+  DONE;\n+})\n+\n+(define_expand \"vec_unpacks_hi_v16qi\"\n+  [(set (match_operand:V8HI 0 \"spu_reg_operand\" \"=r\")\n+         (sign_extend:V8HI\n+          (vec_select:V8QI\n+            (match_operand:V16QI 1 \"spu_reg_operand\" \"r\")\n+            (parallel [(const_int 0)(const_int 1)(const_int 2)(const_int 3)\n+                       (const_int 4)(const_int 5)(const_int 6)(const_int 7)]))))]\n+\"\"\n+{\n+  rtx tmp1 = gen_reg_rtx (V16QImode);\n+  rtx tmp2 = gen_reg_rtx (V8HImode);\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x80, 0x00, 0x80, 0x01, 0x80, 0x02, 0x80, 0x03,\n+    0x80, 0x04, 0x80, 0x05, 0x80, 0x06, 0x80, 0x07};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (tmp1, operands[1], operands[1], mask));\n+  emit_insn (gen_spu_xsbh (tmp2, tmp1));\n+  emit_move_insn (operands[0], tmp2);\n+\n+  DONE;\n+})\n+\n+(define_expand \"vec_unpacks_lo_v16qi\"\n+  [(set (match_operand:V8HI 0 \"spu_reg_operand\" \"=r\")\n+         (sign_extend:V8HI\n+          (vec_select:V8QI\n+            (match_operand:V16QI 1 \"spu_reg_operand\" \"r\")\n+            (parallel [(const_int 8)(const_int 9)(const_int 10)(const_int 11)\n+                       (const_int 12)(const_int 13)(const_int 14)(const_int 15)]))))]\n+\"\"\n+{\n+  rtx tmp1 = gen_reg_rtx (V16QImode);\n+  rtx tmp2 = gen_reg_rtx (V8HImode);\n+  rtx mask = gen_reg_rtx (TImode);\n+  unsigned char arr[16] = {\n+    0x80, 0x08, 0x80, 0x09, 0x80, 0x0A, 0x80, 0x0B,\n+    0x80, 0x0C, 0x80, 0x0D, 0x80, 0x0E, 0x80, 0x0F};\n+\n+  emit_move_insn (mask, array_to_constant (TImode, arr));\n+  emit_insn (gen_shufb (tmp1, operands[1], operands[1], mask));\n+  emit_insn (gen_spu_xsbh (tmp2, tmp1));\n+  emit_move_insn (operands[0], tmp2);\n+\n+DONE;\n+})\n+\n+\n+\n+"}, {"sha": "4037344d74248fed18c7453a17658e4ade815112", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a893cfc4c7e0980235816599bac497af8c40f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a893cfc4c7e0980235816599bac497af8c40f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76a893cfc4c7e0980235816599bac497af8c40f7", "patch": "@@ -1,3 +1,11 @@\n+2008-02-20  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_unpack):\n+\tReturn true for SPU.\n+\t(check_effective_target_vect_short_mult): Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-s16b.c: Expect vectorization of\n+\tthe loop on targets that support vect_unpack.\n+\n 2008-02-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/compat/struct-layout-1_generate.c (DG_OPTIONS): New define."}, {"sha": "587800c032aff9cb6ab22101522b0f1059bb0a2a", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-s16b.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a893cfc4c7e0980235816599bac497af8c40f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-s16b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a893cfc4c7e0980235816599bac497af8c40f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-s16b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-s16b.c?ref=76a893cfc4c7e0980235816599bac497af8c40f7", "patch": "@@ -48,9 +48,9 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_short_mult && vect_widen_sum_hi_to_si } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_short_mult && { vect_widen_sum_hi_to_si || vect_unpack } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_short_mult } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { ! vect_widen_sum_hi_to_si } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" { target { { ! vect_widen_sum_hi_to_si } && { ! vect_unpack } } } } } */\n \n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "ba1454eaab8d2ba3daab93943d234bd863ea328c", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a893cfc4c7e0980235816599bac497af8c40f7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a893cfc4c7e0980235816599bac497af8c40f7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=76a893cfc4c7e0980235816599bac497af8c40f7", "patch": "@@ -1667,7 +1667,8 @@ proc check_effective_target_vect_unpack { } {\n         set et_vect_unpack_saved 0\n         if { ([istarget powerpc*-*-*] && ![istarget powerpc-*paired*])\n              || [istarget i?86-*-*]\n-             || [istarget x86_64-*-*] } {\n+             || [istarget x86_64-*-*] \n+             || [istarget spu-*-*] } {\n             set et_vect_unpack_saved 1\n         }\n     }\n@@ -1876,6 +1877,7 @@ proc check_effective_target_vect_short_mult { } {\n     } else {\n \tset et_vect_short_mult_saved 0\n \tif { [istarget ia64-*-*]\n+\t     || [istarget spu-*-*]\n \t     || [istarget i?86-*-*]\n \t     || [istarget x86_64-*-*] } {\n \t   set et_vect_short_mult_saved 1"}]}