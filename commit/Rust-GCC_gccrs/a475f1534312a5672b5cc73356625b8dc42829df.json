{"sha": "a475f1534312a5672b5cc73356625b8dc42829df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3NWYxNTM0MzEyYTU2NzJiNWNjNzMzNTY2MjViOGRjNDI4MjlkZg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-17T14:21:50Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-17T14:21:50Z"}, "message": "[ARM][GCC][4/1x]: MVE intrinsics with unary operand.\n\nThis patch supports following MVE ACLE intrinsics with unary operand.\n\nvctp16q, vctp32q, vctp64q, vctp8q, vpnot.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\nThere are few conflicts in defining the machine registers, resolved by re-ordering VPR_REGNUM, APSRQ_REGNUM and APSRGE_REGNUM.\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (hi_UP): Define mode.\n\t* config/arm/arm.h (IS_VPR_REGNUM): Move.\n\t* config/arm/arm.md (VPR_REGNUM): Define before APSRQ_REGNUM.\n\t(APSRQ_REGNUM): Modify.\n\t(APSRGE_REGNUM): Modify.\n\t* config/arm/arm_mve.h (vctp16q): Define macro.\n\t(vctp32q): Likewise.\n\t(vctp64q): Likewise.\n\t(vctp8q): Likewise.\n\t(vpnot): Likewise.\n\t(__arm_vctp16q): Define intrinsic.\n\t(__arm_vctp32q): Likewise.\n\t(__arm_vctp64q): Likewise.\n\t(__arm_vctp8q): Likewise.\n\t(__arm_vpnot): Likewise.\n\t* config/arm/arm_mve_builtins.def (UNOP_UNONE_UNONE): Use builtin\n\tqualifier.\n\t* config/arm/mve.md (mve_vctp<mode1>qhi): Define RTL pattern.\n\t(mve_vpnothi): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vctp16q.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vctp32q.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp64q.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vctp8q.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vpnot.c: Likewise.", "tree": {"sha": "a6a74275448ff587271c6f146fe403826bcf9a40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6a74275448ff587271c6f146fe403826bcf9a40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a475f1534312a5672b5cc73356625b8dc42829df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a475f1534312a5672b5cc73356625b8dc42829df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a475f1534312a5672b5cc73356625b8dc42829df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a475f1534312a5672b5cc73356625b8dc42829df/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6df4618cac91499f411673b33a516a5310cfbf79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df4618cac91499f411673b33a516a5310cfbf79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df4618cac91499f411673b33a516a5310cfbf79"}], "stats": {"total": 224, "additions": 223, "deletions": 1}, "files": [{"sha": "501484cc0bacecdf10c17d83112f76c5eb8874d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a475f1534312a5672b5cc73356625b8dc42829df", "patch": "@@ -1,3 +1,27 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (hi_UP): Define mode.\n+\t* config/arm/arm.h (IS_VPR_REGNUM): Move.\n+\t* config/arm/arm.md (VPR_REGNUM): Define before APSRQ_REGNUM.\n+\t(APSRQ_REGNUM): Modify.\n+\t(APSRGE_REGNUM): Modify.\n+\t* config/arm/arm_mve.h (vctp16q): Define macro.\n+\t(vctp32q): Likewise.\n+\t(vctp64q): Likewise.\n+\t(vctp8q): Likewise.\n+\t(vpnot): Likewise.\n+\t(__arm_vctp16q): Define intrinsic.\n+\t(__arm_vctp32q): Likewise.\n+\t(__arm_vctp64q): Likewise.\n+\t(__arm_vctp8q): Likewise.\n+\t(__arm_vpnot): Likewise.\n+\t* config/arm/arm_mve_builtins.def (UNOP_UNONE_UNONE): Use builtin\n+\tqualifier.\n+\t* config/arm/mve.md (mve_vctp<mode1>qhi): Define RTL pattern.\n+\t(mve_vpnothi): Likewise.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "81d6546027c772718a80c5c0b1a185e2ac5e91a6", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=a475f1534312a5672b5cc73356625b8dc42829df", "patch": "@@ -415,6 +415,7 @@ arm_set_sat_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define hf_UP\t E_HFmode\n #define bf_UP    E_BFmode\n #define si_UP\t E_SImode\n+#define hi_UP    E_HImode\n #define void_UP\t E_VOIDmode\n #define sf_UP\t E_SFmode\n #define UP(X) X##_UP"}, {"sha": "7f94e11c0ea23dfbdb7e64fafbdfc68d83411865", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=a475f1534312a5672b5cc73356625b8dc42829df", "patch": "@@ -192,6 +192,11 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vcvtmq_u32_f32(__a) __arm_vcvtmq_u32_f32(__a)\n #define vcvtaq_u16_f16(__a) __arm_vcvtaq_u16_f16(__a)\n #define vcvtaq_u32_f32(__a) __arm_vcvtaq_u32_f32(__a)\n+#define vctp16q(__a) __arm_vctp16q(__a)\n+#define vctp32q(__a) __arm_vctp32q(__a)\n+#define vctp64q(__a) __arm_vctp64q(__a)\n+#define vctp8q(__a) __arm_vctp8q(__a)\n+#define vpnot(__a) __arm_vpnot(__a)\n #endif\n \n __extension__ extern __inline void\n@@ -703,6 +708,41 @@ __arm_vaddlvq_u32 (uint32x4_t __a)\n   return __builtin_mve_vaddlvq_uv4si (__a);\n }\n \n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vctp16q (uint32_t __a)\n+{\n+  return __builtin_mve_vctp16qhi (__a);\n+}\n+\n+__extension__ extern __inline mve_pred16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vctp32q (uint32_t __a)\n+{\n+  return __builtin_mve_vctp32qhi (__a);\n+}\n+\n+__extension__ extern __inline mve_pred16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vctp64q (uint32_t __a)\n+{\n+  return __builtin_mve_vctp64qhi (__a);\n+}\n+\n+__extension__ extern __inline mve_pred16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vctp8q (uint32_t __a)\n+{\n+  return __builtin_mve_vctp8qhi (__a);\n+}\n+\n+__extension__ extern __inline mve_pred16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vpnot (mve_pred16_t __a)\n+{\n+  return __builtin_mve_vpnothi (__a);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void"}, {"sha": "5d5696965457e4fe138c194d7f3c3c5737bf68d0", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=a475f1534312a5672b5cc73356625b8dc42829df", "patch": "@@ -71,3 +71,8 @@ VAR2 (UNOP_UNONE_NONE, vcvtaq_u, v8hi, v4si)\n VAR2 (UNOP_UNONE_IMM, vmvnq_n_u, v8hi, v4si)\n VAR1 (UNOP_UNONE_UNONE, vrev16q_u, v16qi)\n VAR1 (UNOP_UNONE_UNONE, vaddlvq_u, v4si)\n+VAR1 (UNOP_UNONE_UNONE, vctp16q, hi)\n+VAR1 (UNOP_UNONE_UNONE, vctp32q, hi)\n+VAR1 (UNOP_UNONE_UNONE, vctp64q, hi)\n+VAR1 (UNOP_UNONE_UNONE, vctp8q, hi)\n+VAR1 (UNOP_UNONE_UNONE, vpnot, hi)"}, {"sha": "2f997e8f80b41d7e9f173c54bf4fd5854e2d8c24", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=a475f1534312a5672b5cc73356625b8dc42829df", "patch": "@@ -36,7 +36,7 @@\n \t\t\t VREV32Q_U VREV32Q_S VMOVLTQ_U VMOVLTQ_S VMOVLBQ_S\n \t\t\t VMOVLBQ_U VCVTQ_FROM_F_S VCVTQ_FROM_F_U VCVTPQ_S\n \t\t\t VCVTPQ_U VCVTNQ_S VCVTNQ_U VCVTMQ_S VCVTMQ_U\n-\t\t\t VADDLVQ_U])\n+\t\t\t VADDLVQ_U VCTP8Q VCTP16Q VCTP32Q VCTP64Q VPNOT])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -54,6 +54,9 @@\n \t\t       (VCLZQ_U \"u\") (VCLZQ_S \"s\") (VREV32Q_U \"u\")\n \t\t       (VREV32Q_S \"s\") (VADDLVQ_U \"u\") (VADDLVQ_S \"s\")])\n \n+(define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n+\t\t\t(VCTP64Q \"64\")])\n+\n (define_int_iterator VCVTQ_TO_F [VCVTQ_TO_F_S VCVTQ_TO_F_U])\n (define_int_iterator VMVNQ_N [VMVNQ_N_U VMVNQ_N_S])\n (define_int_iterator VREV64Q [VREV64Q_S VREV64Q_U])\n@@ -71,6 +74,7 @@\n (define_int_iterator VCVTNQ [VCVTNQ_S VCVTNQ_U])\n (define_int_iterator VCVTMQ [VCVTMQ_S VCVTMQ_U])\n (define_int_iterator VADDLVQ [VADDLVQ_U VADDLVQ_S])\n+(define_int_iterator VCTPQ [VCTP8Q VCTP16Q VCTP32Q VCTP64Q])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -655,3 +659,31 @@\n   \"vaddlv.<supf>32 %Q0, %R0, %q1\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+\n+;;\n+;; [vctp8q vctp16q vctp32q vctp64q])\n+;;\n+(define_insn \"mve_vctp<mode1>qhi\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:SI 1 \"s_register_operand\" \"r\")]\n+\tVCTPQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vctp.<mode1> %1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vpnot])\n+;;\n+(define_insn \"mve_vpnothi\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:HI 1 \"vpr_register_operand\" \"0\")]\n+\t VPNOT))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpnot\"\n+  [(set_attr \"type\" \"mve_move\")\n+])"}, {"sha": "de68c54e6b42fd832d0ff6dcdacbb955b163928f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a475f1534312a5672b5cc73356625b8dc42829df", "patch": "@@ -1,3 +1,13 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vctp16q.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vctp32q.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vctp64q.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vctp8q.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vpnot.c: Likewise.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "52a6b52725f9cc6ac9c8249847001b1d824142fe", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vctp16q.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp16q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp16q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp16q.c?ref=a475f1534312a5672b5cc73356625b8dc42829df", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32_t a)\n+{\n+  return vctp16q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vctp.16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32_t a)\n+{\n+  return vctp16q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vctp.16\"  }  } */"}, {"sha": "703518a4d9cca6a1553eb84bee6f382b99de022c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vctp32q.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp32q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp32q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp32q.c?ref=a475f1534312a5672b5cc73356625b8dc42829df", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32_t a)\n+{\n+  return vctp32q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vctp.32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32_t a)\n+{\n+  return vctp32q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vctp.32\"  }  } */"}, {"sha": "2f83a2249eed51b4ef2b9d12da9171eced8e0b41", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vctp64q.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp64q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp64q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp64q.c?ref=a475f1534312a5672b5cc73356625b8dc42829df", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32_t a)\n+{\n+  return vctp64q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vctp.64\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32_t a)\n+{\n+  return vctp64q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vctp.64\"  }  } */"}, {"sha": "ed696ac86e68ade93e2d741dd8eab72122046901", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vctp8q.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp8q.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp8q.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvctp8q.c?ref=a475f1534312a5672b5cc73356625b8dc42829df", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32_t a)\n+{\n+  return vctp8q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vctp.8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32_t a)\n+{\n+  return vctp8q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vctp.8\"  }  } */"}, {"sha": "7e08b1b90fe124881b17f5e7ab5690375a253bd4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vpnot.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpnot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a475f1534312a5672b5cc73356625b8dc42829df/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpnot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvpnot.c?ref=a475f1534312a5672b5cc73356625b8dc42829df", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (mve_pred16_t a)\n+{\n+  return vpnot (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vpnot\"  }  } */\n+\n+mve_pred16_t\n+foo1 (mve_pred16_t a)\n+{\n+  return vpnot (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vpnot\"  }  } */"}]}