{"sha": "5207696c34c49d2a6f888eb29a5e0bbc6d5df779", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIwNzY5NmMzNGM0OWQyYTZmODg4ZWIyOWE1ZTBiYmM2ZDVkZjc3OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T15:24:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T15:24:27Z"}, "message": "[multiple changes]\n\n2011-08-04  Nicolas Roche  <roche@adacore.com>\n\n\t* alfa_test.adb: Not all ali files are containing alfa information even\n\tif compiled with -gnatd.F. So suppress warning about missing ALFA\n\tinformation.\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* lib-xref-alfa.adb (Add_ALFA_Scope): use non-empty unique name for\n\tscope.\n\t* put_alfa.adb: Check that scope name is not empty.\n\n2011-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Stream_Operation_Ok): new predicate\n\tNeeds_Elementary_Stream_Operation, to determine whether user-defined\n\tRead and Write attributes are available for the elementary components\n\tof the given type. If only the predefined attributes are available,\n\tthen when restriction No_Default_Stream_Attributes is active the\n\tpredefined stream attributes for the composite type cannot be created.\n\n2011-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* bindgen.adb: Fix obsolete comments and names from Ada/C days.\n\tPut routines in alpha order\n\nFrom-SVN: r177399", "tree": {"sha": "a93b5656b06977ae6ec518633ad334e76a5337a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a93b5656b06977ae6ec518633ad334e76a5337a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5207696c34c49d2a6f888eb29a5e0bbc6d5df779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5207696c34c49d2a6f888eb29a5e0bbc6d5df779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5207696c34c49d2a6f888eb29a5e0bbc6d5df779", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5207696c34c49d2a6f888eb29a5e0bbc6d5df779/comments", "author": null, "committer": null, "parents": [{"sha": "2bd2d858e40c9db2bea9d3aaea7649b5499bfa4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bd2d858e40c9db2bea9d3aaea7649b5499bfa4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bd2d858e40c9db2bea9d3aaea7649b5499bfa4d"}], "stats": {"total": 494, "additions": 285, "deletions": 209}, "files": [{"sha": "283365b125480f560e9577a4c5ababa130595294", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5207696c34c49d2a6f888eb29a5e0bbc6d5df779/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5207696c34c49d2a6f888eb29a5e0bbc6d5df779/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5207696c34c49d2a6f888eb29a5e0bbc6d5df779", "patch": "@@ -1,3 +1,29 @@\n+2011-08-04  Nicolas Roche  <roche@adacore.com>\n+\n+\t* alfa_test.adb: Not all ali files are containing alfa information even\n+\tif compiled with -gnatd.F. So suppress warning about missing ALFA\n+\tinformation.\n+\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* lib-xref-alfa.adb (Add_ALFA_Scope): use non-empty unique name for\n+\tscope.\n+\t* put_alfa.adb: Check that scope name is not empty.\n+\n+2011-08-04  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Stream_Operation_Ok): new predicate\n+\tNeeds_Elementary_Stream_Operation, to determine whether user-defined\n+\tRead and Write attributes are available for the elementary components\n+\tof the given type. If only the predefined attributes are available,\n+\tthen when restriction No_Default_Stream_Attributes is active the\n+\tpredefined stream attributes for the composite type cannot be created.\n+\n+2011-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* bindgen.adb: Fix obsolete comments and names from Ada/C days.\n+\tPut routines in alpha order\n+\n 2011-08-04  Jose Ruiz  <ruiz@adacore.com>\n \n \t* gcc-interface/Makefile.in: Remove xenomai specific versions of system."}, {"sha": "40c18a8caffdac7e70696d386668f2c75ca3bfa3", "filename": "gcc/ada/alfa_test.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5207696c34c49d2a6f888eb29a5e0bbc6d5df779/gcc%2Fada%2Falfa_test.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5207696c34c49d2a6f888eb29a5e0bbc6d5df779/gcc%2Fada%2Falfa_test.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Falfa_test.adb?ref=5207696c34c49d2a6f888eb29a5e0bbc6d5df779", "patch": "@@ -251,8 +251,6 @@ begin\n          C := Get_Char (Infile);\n \n          if C = EOF then\n-            Ada.Text_IO.Put_Line\n-              (Argument (1) & \": no SCO found, recompile with -gnateS\");\n             raise Stop;\n \n          elsif C = LF or else C = CR then"}, {"sha": "98dc98607d79edd7a3c39d3912e04eb7d9eb0ff5", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 203, "deletions": 206, "changes": 409, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5207696c34c49d2a6f888eb29a5e0bbc6d5df779/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5207696c34c49d2a6f888eb29a5e0bbc6d5df779/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=5207696c34c49d2a6f888eb29a5e0bbc6d5df779", "patch": "@@ -178,9 +178,9 @@ package body Bindgen is\n    --  policy name, or 'F' (for FIFO_Within_Priorities) as the default value\n    --  for those priority ranges not specified.\n \n-   --  Num_Specific_Dispatching is the length of the\n-   --  Priority_Specific_Dispatching string. It will be set to zero if no\n-   --  Priority_Specific_Dispatching pragmas are present.\n+   --  Num_Specific_Dispatching is length of the Priority_Specific_Dispatching\n+   --  string. It will be set to zero if no Priority_Specific_Dispatching\n+   --  pragmas are present.\n \n    --  Restrictions is the address of a null-terminated string specifying the\n    --  restrictions information for the partition. The format is identical to\n@@ -226,58 +226,58 @@ package body Bindgen is\n    --  Main_CPU is the processor set by pragma CPU in the main program. If no\n    --  such pragma is present, the value is -1.\n \n+   procedure WBI (Info : String) renames Osint.B.Write_Binder_Info;\n+   --  Convenient shorthand used throughout\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n \n-   procedure WBI (Info : String) renames Osint.B.Write_Binder_Info;\n-   --  Convenient shorthand used throughout\n-\n    procedure Check_System_Restrictions_Used;\n    --  Sets flag System_Restrictions_Used (Set to True if and only if the unit\n    --  System.Restrictions is present in the partition, otherwise False).\n \n-   procedure Gen_Adainit_Ada;\n-   --  Generates the Adainit procedure (Ada code case)\n+   procedure Gen_Adainit;\n+   --  Generates the Adainit procedure\n \n-   procedure Gen_Adafinal_Ada;\n-   --  Generate the Adafinal procedure (Ada code case)\n+   procedure Gen_Adafinal;\n+   --  Generate the Adafinal procedure\n \n-   procedure Gen_Elab_Externals_Ada;\n-   --  Generate sequence of external declarations for elaboration (Ada)\n+   procedure Gen_CodePeer_Wrapper;\n+   --  For CodePeer, generate wrapper which calls user-defined main subprogram\n \n-   procedure Gen_Elab_Calls_Ada;\n-   --  Generate sequence of elaboration calls (Ada code case)\n+   procedure Gen_Elab_Calls;\n+   --  Generate sequence of elaboration calls\n \n-   procedure Gen_Elab_Order_Ada;\n-   --  Generate comments showing elaboration order chosen (Ada code case)\n+   procedure Gen_Elab_Externals;\n+   --  Generate sequence of external declarations for elaboration\n \n-   procedure Gen_Finalize_Library_Ada;\n-   --  Generate a sequence of finalization calls to elaborated packages (Ada)\n+   procedure Gen_Elab_Order;\n+   --  Generate comments showing elaboration order chosen\n \n-   procedure Gen_CodePeer_Wrapper;\n-   --  For CodePeer, generate wrapper which calls user-defined main subprogram\n+   procedure Gen_Finalize_Library;\n+   --  Generate a sequence of finalization calls to elaborated packages\n \n-   procedure Gen_Main_Ada;\n-   --  Generate procedure main (Ada code case)\n+   procedure Gen_Main;\n+   --  Generate procedure main\n \n    procedure Gen_Object_Files_Options;\n    --  Output comments containing a list of the full names of the object\n    --  files to be linked and the list of linker options supplied by\n-   --  Linker_Options pragmas in the source. (C and Ada code case)\n+   --  Linker_Options pragmas in the source.\n \n    procedure Gen_Output_File_Ada (Filename : String);\n-   --  Generate output file (Ada code case)\n+   --  Generate Ada output file\n \n-   procedure Gen_Restrictions_Ada;\n-   --  Generate initialization of restrictions variable (Ada code case)\n+   procedure Gen_Restrictions;\n+   --  Generate initialization of restrictions variable\n \n-   procedure Gen_Versions_Ada;\n-   --  Output series of definitions for unit versions (Ada code case)\n+   procedure Gen_Versions;\n+   --  Output series of definitions for unit versions\n \n    function Get_Ada_Main_Name return String;\n-   --  This function is used in the Ada main output case to compute a usable\n-   --  name for the generated main program. The normal main program name is\n+   --  This function is used for the Ada main output to compute a usable name\n+   --  for the generated main program. The normal main program name is\n    --  Ada_Main, but this won't work if the user has a unit with this name.\n    --  This function tries Ada_Main first, and if there is such a clash, then\n    --  it tries Ada_Name_01, Ada_Name_02 ... Ada_Name_99 in sequence.\n@@ -286,11 +286,11 @@ package body Bindgen is\n    --  Return the main unit name corresponding to S by replacing '.' with '_'\n \n    function Get_Main_Name return String;\n-   --  This function is used in the Ada main output case to compute the\n-   --  correct external main program. It is \"main\" by default, unless the\n-   --  flag Use_Ada_Main_Program_Name_On_Target is set, in which case it\n-   --  is the name of the Ada main name without the \"_ada\". This default\n-   --  can be overridden explicitly using the -Mname binder switch.\n+   --  This function is used in the main output case to compute the correct\n+   --  external main program. It is \"main\" by default, unless the flag\n+   --  Use_Ada_Main_Program_Name_On_Target is set, in which case it is the name\n+   --  of the Ada main name without the \"_ada\". This default can be overridden\n+   --  explicitly using the -Mname binder switch.\n \n    function Get_WC_Encoding return Character;\n    --  Return wide character encoding method to set as WC_Encoding in output.\n@@ -387,11 +387,11 @@ package body Bindgen is\n       System_Restrictions_Used := False;\n    end Check_System_Restrictions_Used;\n \n-   ----------------------\n-   -- Gen_Adafinal_Ada --\n-   ----------------------\n+   ------------------\n+   -- Gen_Adafinal --\n+   ------------------\n \n-   procedure Gen_Adafinal_Ada is\n+   procedure Gen_Adafinal is\n    begin\n       WBI (\"   procedure \" & Ada_Final_Name.all & \" is\");\n \n@@ -436,13 +436,13 @@ package body Bindgen is\n \n       WBI (\"   end \" & Ada_Final_Name.all & \";\");\n       WBI (\"\");\n-   end Gen_Adafinal_Ada;\n+   end Gen_Adafinal;\n \n-   ---------------------\n-   -- Gen_Adainit_Ada --\n-   ---------------------\n+   -----------------\n+   -- Gen_Adainit --\n+   -----------------\n \n-   procedure Gen_Adainit_Ada is\n+   procedure Gen_Adainit is\n       Main_Priority : Int renames ALIs.Table (ALIs.First).Main_Priority;\n       Main_CPU      : Int renames ALIs.Table (ALIs.First).Main_CPU;\n \n@@ -709,7 +709,7 @@ package body Bindgen is\n          Set_String (\"';\");\n          Write_Statement_Buffer;\n \n-         Gen_Restrictions_Ada;\n+         Gen_Restrictions;\n \n          WBI (\"      Priority_Specific_Dispatching :=\");\n          WBI (\"        Local_Priority_Specific_Dispatching'Address;\");\n@@ -898,7 +898,7 @@ package body Bindgen is\n          WBI (\"\");\n       end if;\n \n-      Gen_Elab_Calls_Ada;\n+      Gen_Elab_Calls;\n \n       --  Case of main program is CIL function or procedure\n \n@@ -921,102 +921,45 @@ package body Bindgen is\n \n       WBI (\"   end \" & Ada_Init_Name.all & \";\");\n       WBI (\"\");\n-   end Gen_Adainit_Ada;\n+   end Gen_Adainit;\n \n-   ----------------------------\n-   -- Gen_Elab_Externals_Ada --\n-   ----------------------------\n+   --------------------------\n+   -- Gen_CodePeer_Wrapper --\n+   --------------------------\n \n-   procedure Gen_Elab_Externals_Ada is\n+   procedure Gen_CodePeer_Wrapper is\n    begin\n-      if CodePeer_Mode then\n-         return;\n-      end if;\n-\n-      for E in Elab_Order.First .. Elab_Order.Last loop\n-         declare\n-            Unum : constant Unit_Id := Elab_Order.Table (E);\n-            U    : Unit_Record renames Units.Table (Unum);\n-\n-         begin\n-            --  Check for Elab_Entity to be set for this unit\n-\n-            if U.Set_Elab_Entity\n-\n-              --  Don't generate reference for stand alone library\n-\n-              and then not U.SAL_Interface\n-\n-              --  Don't generate reference for predefined file in No_Run_Time\n-              --  mode, since we don't include the object files in this case\n-\n-              and then not\n-                (No_Run_Time_Mode\n-                  and then Is_Predefined_File_Name (U.Sfile))\n-            then\n-               Set_String (\"   \");\n-               Set_String (\"E\");\n-               Set_Unit_Number (Unum);\n-\n-               case VM_Target is\n-                  when No_VM | JVM_Target =>\n-                     Set_String (\" : Short_Integer; pragma Import (Ada, \");\n-                  when CLI_Target =>\n-                     Set_String (\" : Short_Integer; pragma Import (CIL, \");\n-               end case;\n-\n-               Set_String (\"E\");\n-               Set_Unit_Number (Unum);\n-               Set_String (\", \"\"\");\n-               Get_Name_String (U.Uname);\n-\n-               --  In the case of JGNAT we need to emit an Import name that\n-               --  includes the class name (using '$' separators in the case\n-               --  of a child unit name).\n-\n-               if VM_Target /= No_VM then\n-                  for J in 1 .. Name_Len - 2 loop\n-                     if VM_Target = CLI_Target\n-                       or else Name_Buffer (J) /= '.'\n-                     then\n-                        Set_Char (Name_Buffer (J));\n-                     else\n-                        Set_String (\"$\");\n-                     end if;\n-                  end loop;\n+      Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n \n-                  if VM_Target /= CLI_Target or else U.Unit_Kind = 's' then\n-                     Set_String (\".\");\n-                  else\n-                     Set_String (\"_pkg.\");\n-                  end if;\n+      declare\n+         --  Bypass Ada_Main_Program; its Import pragma confuses CodePeer\n \n-                  --  If the unit name is very long, then split the\n-                  --  Import link name across lines using \"&\" (occurs\n-                  --  in some C2 tests).\n+         Callee_Name : String renames Name_Buffer (1 .. Name_Len - 2);\n+         --  Strip trailing \"%b\"\n \n-                  if 2 * Name_Len + 60 > Hostparm.Max_Line_Length then\n-                     Set_String (\"\"\" &\");\n-                     Write_Statement_Buffer;\n-                     Set_String (\"         \"\"\");\n-                  end if;\n-               end if;\n+      begin\n+         if ALIs.Table (ALIs.First).Main_Program = Proc then\n+            WBI (\"   procedure \" & CodePeer_Wrapper_Name & \" is \");\n+            WBI (\"   begin\");\n+            WBI (\"      \" & Callee_Name & \";\");\n \n-               Set_Unit_Name;\n-               Set_String (\"_E\"\");\");\n-               Write_Statement_Buffer;\n-            end if;\n-         end;\n-      end loop;\n+         else\n+            WBI\n+              (\"   function \" & CodePeer_Wrapper_Name & \" return Integer is\");\n+            WBI (\"   begin\");\n+            WBI (\"      return \" & Callee_Name & \";\");\n+         end if;\n+      end;\n \n+      WBI (\"   end \" & CodePeer_Wrapper_Name & \";\");\n       WBI (\"\");\n-   end Gen_Elab_Externals_Ada;\n+   end Gen_CodePeer_Wrapper;\n \n-   ------------------------\n-   -- Gen_Elab_Calls_Ada --\n-   ------------------------\n+   --------------------\n+   -- Gen_Elab_Calls --\n+   --------------------\n \n-   procedure Gen_Elab_Calls_Ada is\n+   procedure Gen_Elab_Calls is\n       Check_Elab_Flag : Boolean;\n \n    begin\n@@ -1151,13 +1094,102 @@ package body Bindgen is\n             end if;\n          end;\n       end loop;\n-   end Gen_Elab_Calls_Ada;\n+   end Gen_Elab_Calls;\n \n    ------------------------\n-   -- Gen_Elab_Order_Ada --\n+   -- Gen_Elab_Externals --\n    ------------------------\n \n-   procedure Gen_Elab_Order_Ada is\n+   procedure Gen_Elab_Externals is\n+   begin\n+      if CodePeer_Mode then\n+         return;\n+      end if;\n+\n+      for E in Elab_Order.First .. Elab_Order.Last loop\n+         declare\n+            Unum : constant Unit_Id := Elab_Order.Table (E);\n+            U    : Unit_Record renames Units.Table (Unum);\n+\n+         begin\n+            --  Check for Elab_Entity to be set for this unit\n+\n+            if U.Set_Elab_Entity\n+\n+              --  Don't generate reference for stand alone library\n+\n+              and then not U.SAL_Interface\n+\n+              --  Don't generate reference for predefined file in No_Run_Time\n+              --  mode, since we don't include the object files in this case\n+\n+              and then not\n+                (No_Run_Time_Mode\n+                  and then Is_Predefined_File_Name (U.Sfile))\n+            then\n+               Set_String (\"   \");\n+               Set_String (\"E\");\n+               Set_Unit_Number (Unum);\n+\n+               case VM_Target is\n+                  when No_VM | JVM_Target =>\n+                     Set_String (\" : Short_Integer; pragma Import (Ada, \");\n+                  when CLI_Target =>\n+                     Set_String (\" : Short_Integer; pragma Import (CIL, \");\n+               end case;\n+\n+               Set_String (\"E\");\n+               Set_Unit_Number (Unum);\n+               Set_String (\", \"\"\");\n+               Get_Name_String (U.Uname);\n+\n+               --  In the case of JGNAT we need to emit an Import name that\n+               --  includes the class name (using '$' separators in the case\n+               --  of a child unit name).\n+\n+               if VM_Target /= No_VM then\n+                  for J in 1 .. Name_Len - 2 loop\n+                     if VM_Target = CLI_Target\n+                       or else Name_Buffer (J) /= '.'\n+                     then\n+                        Set_Char (Name_Buffer (J));\n+                     else\n+                        Set_String (\"$\");\n+                     end if;\n+                  end loop;\n+\n+                  if VM_Target /= CLI_Target or else U.Unit_Kind = 's' then\n+                     Set_String (\".\");\n+                  else\n+                     Set_String (\"_pkg.\");\n+                  end if;\n+\n+                  --  If the unit name is very long, then split the\n+                  --  Import link name across lines using \"&\" (occurs\n+                  --  in some C2 tests).\n+\n+                  if 2 * Name_Len + 60 > Hostparm.Max_Line_Length then\n+                     Set_String (\"\"\" &\");\n+                     Write_Statement_Buffer;\n+                     Set_String (\"         \"\"\");\n+                  end if;\n+               end if;\n+\n+               Set_Unit_Name;\n+               Set_String (\"_E\"\");\");\n+               Write_Statement_Buffer;\n+            end if;\n+         end;\n+      end loop;\n+\n+      WBI (\"\");\n+   end Gen_Elab_Externals;\n+\n+   --------------------\n+   -- Gen_Elab_Order --\n+   --------------------\n+\n+   procedure Gen_Elab_Order is\n    begin\n       WBI (\"   --  BEGIN ELABORATION ORDER\");\n \n@@ -1170,13 +1202,13 @@ package body Bindgen is\n \n       WBI (\"   --  END ELABORATION ORDER\");\n       WBI (\"\");\n-   end Gen_Elab_Order_Ada;\n+   end Gen_Elab_Order;\n \n-   ------------------------------\n-   -- Gen_Finalize_Library_Ada --\n-   ------------------------------\n+   --------------------------\n+   -- Gen_Finalize_Library --\n+   --------------------------\n \n-   procedure Gen_Finalize_Library_Ada is\n+   procedure Gen_Finalize_Library is\n       Count : Int := 1;\n       U     : Unit_Record;\n       Uspec : Unit_Record;\n@@ -1193,10 +1225,9 @@ package body Bindgen is\n       begin\n          WBI (\"   procedure finalize_library is\");\n \n-         --  The following flag is used to check for library-level\n-         --  exceptions raised during finalization. The symbol comes\n-         --  from System.Soft_Links. VM targets use regular Ada to\n-         --  reference the entity.\n+         --  The following flag is used to check for library-level exceptions\n+         --  raised during finalization. Symbol comes from System.Soft_Links.\n+         --  VM targets use regular Ada to reference the entity.\n \n          if VM_Target = No_VM then\n             WBI (\"      LE_Set : Boolean;\");\n@@ -1209,7 +1240,7 @@ package body Bindgen is\n          WBI (\"   begin\");\n       end Gen_Header;\n \n-   --  Start of processing for Gen_Finalize_Library_Ada\n+   --  Start of processing for Gen_Finalize_Library\n \n    begin\n       if CodePeer_Mode then\n@@ -1442,44 +1473,13 @@ package body Bindgen is\n          WBI (\"   end finalize_library;\");\n          WBI (\"\");\n       end if;\n-   end Gen_Finalize_Library_Ada;\n-\n-   --------------------------\n-   -- Gen_CodePeer_Wrapper --\n-   --------------------------\n-\n-   procedure Gen_CodePeer_Wrapper is\n-   begin\n-      Get_Name_String (Units.Table (First_Unit_Entry).Uname);\n-\n-      declare\n-         --  Bypass Ada_Main_Program; its Import pragma confuses CodePeer\n+   end Gen_Finalize_Library;\n \n-         Callee_Name : String renames Name_Buffer (1 .. Name_Len - 2);\n-         --  Strip trailing \"%b\"\n-\n-      begin\n-         if ALIs.Table (ALIs.First).Main_Program = Proc then\n-            WBI (\"   procedure \" & CodePeer_Wrapper_Name & \" is \");\n-            WBI (\"   begin\");\n-            WBI (\"      \" & Callee_Name & \";\");\n-         else\n-            WBI\n-              (\"   function \" & CodePeer_Wrapper_Name & \" return Integer is\");\n-            WBI (\"   begin\");\n-            WBI (\"      return \" & Callee_Name & \";\");\n-         end if;\n-      end;\n-\n-      WBI (\"   end \" & CodePeer_Wrapper_Name & \";\");\n-      WBI (\"\");\n-   end Gen_CodePeer_Wrapper;\n-\n-   ------------------\n-   -- Gen_Main_Ada --\n-   ------------------\n+   --------------\n+   -- Gen_Main --\n+   --------------\n \n-   procedure Gen_Main_Ada is\n+   procedure Gen_Main is\n    begin\n       if Exit_Status_Supported_On_Target then\n          Set_String (\"   function \");\n@@ -1533,8 +1533,7 @@ package body Bindgen is\n          WBI (\"      pragma Import (C, Finalize, \"\"__gnat_finalize\"\");\");\n       end if;\n \n-      --  If we want to analyze the stack, we have to import corresponding\n-      --  symbols\n+      --  If we want to analyze the stack, we must import corresponding symbols\n \n       if Dynamic_Stack_Measurement then\n          WBI (\"\");\n@@ -1679,7 +1678,6 @@ package body Bindgen is\n       WBI (\"      \" & Ada_Init_Name.all & \";\");\n \n       if not No_Main_Subprogram then\n-\n          if CodePeer_Mode then\n             if ALIs.Table (ALIs.First).Main_Program = Proc then\n                WBI (\"      \" & CodePeer_Wrapper_Name & \";\");\n@@ -1729,7 +1727,7 @@ package body Bindgen is\n \n       WBI (\"   end;\");\n       WBI (\"\");\n-   end Gen_Main_Ada;\n+   end Gen_Main;\n \n    ------------------------------\n    -- Gen_Object_Files_Options --\n@@ -2061,7 +2059,7 @@ package body Bindgen is\n \n       --  We always compile the binder file in Ada 95 mode so that we properly\n       --  handle use of Ada 2005 keywords as identifiers in Ada 95 mode. None\n-      --  of the Ada 2005 constructs are needed by the binder file.\n+      --  of the Ada 2005 or Ada 2012 constructs are needed by the binder file.\n \n       WBI (\"pragma Ada_95;\");\n \n@@ -2104,8 +2102,7 @@ package body Bindgen is\n       Resolve_Binder_Options;\n \n       --  Usually, adafinal is called using a pragma Import C. Since Import C\n-      --  doesn't have the same semantics for VMs or CodePeer, use standard\n-      --  Ada.\n+      --  doesn't have the same semantics for VMs or CodePeer use standard Ada.\n \n       if not Suppress_Standard_Library_On_Target then\n          if CodePeer_Mode then\n@@ -2257,8 +2254,8 @@ package body Bindgen is\n            Get_Main_Name & \"\"\");\");\n       end if;\n \n-      Gen_Versions_Ada;\n-      Gen_Elab_Order_Ada;\n+      Gen_Versions;\n+      Gen_Elab_Order;\n \n       --  Spec is complete\n \n@@ -2272,7 +2269,7 @@ package body Bindgen is\n \n       --  We always compile the binder file in Ada 95 mode so that we properly\n       --  handle use of Ada 2005 keywords as identifiers in Ada 95 mode. None\n-      --  of the Ada 2005 constructs are needed by the binder file.\n+      --  of the Ada 2005/2012 constructs are needed by the binder file.\n \n       WBI (\"pragma Ada_95;\");\n \n@@ -2331,7 +2328,7 @@ package body Bindgen is\n \n       --  Generate externals for elaboration entities\n \n-      Gen_Elab_Externals_Ada;\n+      Gen_Elab_Externals;\n \n       if not CodePeer_Mode then\n          if not Suppress_Standard_Library_On_Target then\n@@ -2373,13 +2370,13 @@ package body Bindgen is\n \n       if not Cumulative_Restrictions.Set (No_Finalization) then\n          if Needs_Library_Finalization then\n-            Gen_Finalize_Library_Ada;\n+            Gen_Finalize_Library;\n          end if;\n \n-         Gen_Adafinal_Ada;\n+         Gen_Adafinal;\n       end if;\n \n-      Gen_Adainit_Ada;\n+      Gen_Adainit;\n \n       if Bind_Main_Program and then VM_Target = No_VM then\n \n@@ -2389,7 +2386,7 @@ package body Bindgen is\n             Gen_CodePeer_Wrapper;\n          end if;\n \n-         Gen_Main_Ada;\n+         Gen_Main;\n       end if;\n \n       --  Output object file list and the Ada body is complete\n@@ -2402,11 +2399,11 @@ package body Bindgen is\n       Close_Binder_Output;\n    end Gen_Output_File_Ada;\n \n-   --------------------------\n-   -- Gen_Restrictions_Ada --\n-   --------------------------\n+   ----------------------\n+   -- Gen_Restrictions --\n+   ----------------------\n \n-   procedure Gen_Restrictions_Ada is\n+   procedure Gen_Restrictions is\n       Count : Integer;\n \n    begin\n@@ -2482,11 +2479,11 @@ package body Bindgen is\n       Set_String_Replace (\"))\");\n       Set_String (\";\");\n       Write_Statement_Buffer;\n-   end Gen_Restrictions_Ada;\n+   end Gen_Restrictions;\n \n-   ----------------------\n-   -- Gen_Versions_Ada --\n-   ----------------------\n+   ------------------\n+   -- Gen_Versions --\n+   ------------------\n \n    --  This routine generates lines such as:\n \n@@ -2497,7 +2494,7 @@ package body Bindgen is\n    --  body or spec, with dots replaced by double underscores, and hhhhhhhh is\n    --  the version number, and nnnnn is a 5-digits serial number.\n \n-   procedure Gen_Versions_Ada is\n+   procedure Gen_Versions is\n       Ubuf : String (1 .. 6) := \"u00000\";\n \n       procedure Increment_Ubuf;\n@@ -2516,7 +2513,7 @@ package body Bindgen is\n          end loop;\n       end Increment_Ubuf;\n \n-   --  Start of processing for Gen_Versions_Ada\n+   --  Start of processing for Gen_Versions\n \n    begin\n       WBI (\"\");\n@@ -2559,7 +2556,7 @@ package body Bindgen is\n             Write_Statement_Buffer;\n          end if;\n       end loop;\n-   end Gen_Versions_Ada;\n+   end Gen_Versions;\n \n    ------------------------\n    -- Get_Main_Unit_Name --"}, {"sha": "44896515bf0dbf91c22141d50c9fef85d7c5abee", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5207696c34c49d2a6f888eb29a5e0bbc6d5df779/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5207696c34c49d2a6f888eb29a5e0bbc6d5df779/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=5207696c34c49d2a6f888eb29a5e0bbc6d5df779", "patch": "@@ -8964,7 +8964,60 @@ package body Exp_Ch3 is\n    is\n       Has_Predefined_Or_Specified_Stream_Attribute : Boolean := False;\n \n+      function Needs_Elementary_Stream_Operation\n+        (T : Entity_Id) return Boolean;\n+      --  AI05-0161 : if the restriction No_Default_Stream_Attributes is active\n+      --  then we can generate stream subprograms for records that have scalar\n+      --  subcomponents only if those subcomponents have user-defined stream\n+      --  subprograms. For elementary types only 'Read and 'Write are needed.\n+\n+      ---------------------------------------\n+      -- Needs_Elementary_Stream_Operation --\n+      ---------------------------------------\n+\n+      function Needs_Elementary_Stream_Operation\n+        (T : Entity_Id) return Boolean\n+      is\n+      begin\n+         if not Restriction_Active (No_Default_Stream_Attributes) then\n+            return False;\n+\n+         elsif Is_Elementary_Type (T) then\n+            return No (TSS (T, TSS_Stream_Read))\n+              or else No (TSS (T, TSS_Stream_Write));\n+\n+         elsif Is_Array_Type (T) then\n+            return Needs_Elementary_Stream_Operation (Component_Type (T));\n+\n+         elsif Is_Record_Type (T) then\n+            declare\n+               Comp : Entity_Id;\n+\n+            begin\n+               Comp := First_Component (T);\n+               while Present (Comp) loop\n+                  if Needs_Elementary_Stream_Operation (Etype (Comp)) then\n+                     return True;\n+                  end if;\n+                  Next_Component (Comp);\n+               end loop;\n+               return False;\n+            end;\n+\n+         elsif Is_Private_Type (T)\n+           and then Present (Full_View (T))\n+         then\n+            return Needs_Elementary_Stream_Operation (Full_View (T));\n+\n+         else\n+            return False;\n+         end if;\n+      end Needs_Elementary_Stream_Operation;\n+\n+   --  Start processing for Stream_Operation_OK\n+\n    begin\n+\n       --  Special case of a limited type extension: a default implementation\n       --  of the stream attributes Read or Write exists if that attribute\n       --  has been specified or is available for an ancestor type; a default\n@@ -9057,6 +9110,7 @@ package body Exp_Ch3 is\n         and then not Restriction_Active (No_Dispatch)\n         and then not No_Run_Time_Mode\n         and then RTE_Available (RE_Tag)\n+        and then not Needs_Elementary_Stream_Operation (Typ)\n         and then RTE_Available (RE_Root_Stream_Type)\n         and then not Is_RTE (Typ, RE_Finalization_Collection);\n    end Stream_Operation_OK;"}, {"sha": "7c2d2750693f3b29e72dc73a323ee00617a484b0", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5207696c34c49d2a6f888eb29a5e0bbc6d5df779/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5207696c34c49d2a6f888eb29a5e0bbc6d5df779/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=5207696c34c49d2a6f888eb29a5e0bbc6d5df779", "patch": "@@ -321,7 +321,7 @@ package body ALFA is\n       --  filled even later, but are initialized to represent an empty range.\n \n       ALFA_Scope_Table.Append (\n-        (Scope_Name     => new String'(Exact_Source_Name (Sloc (E))),\n+        (Scope_Name     => new String'(Unique_Name (E)),\n          File_Num       => 0,\n          Scope_Num      => 0,\n          Spec_File_Num  => 0,"}, {"sha": "7ccb80a34f2d0cc12cc0426e7070c3bcb108662b", "filename": "gcc/ada/put_alfa.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5207696c34c49d2a6f888eb29a5e0bbc6d5df779/gcc%2Fada%2Fput_alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5207696c34c49d2a6f888eb29a5e0bbc6d5df779/gcc%2Fada%2Fput_alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_alfa.adb?ref=5207696c34c49d2a6f888eb29a5e0bbc6d5df779", "patch": "@@ -74,6 +74,7 @@ begin\n                Write_Info_Nat (S.Col);\n                Write_Info_Char (' ');\n \n+               pragma Assert (S.Scope_Name.all /= \"\");\n                for N in S.Scope_Name'Range loop\n                   Write_Info_Char (S.Scope_Name (N));\n                end loop;"}]}