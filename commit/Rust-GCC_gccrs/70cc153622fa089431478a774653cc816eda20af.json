{"sha": "70cc153622fa089431478a774653cc816eda20af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBjYzE1MzYyMmZhMDg5NDMxNDc4YTc3NDY1M2NjODE2ZWRhMjBhZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-05-23T18:32:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-05-23T18:32:12Z"}, "message": "re PR target/57379 (Segfault in invalidate_any_buried_refs (x=0x0) at ../../gcc-svn/trunk/gcc/gcse.c:3850)\n\n\tPR target/57379\n\t* config/alpha/alpha.md (unspec): Add UNSPEC_XFLT_COMPARE.\n\t* config/alpha/alpha.c (alpha_emit_xfloating_compare): Construct\n\tREG_EQUAL note as UNSPEC_XFLT_COMPARE unspec.\n\nFrom-SVN: r199263", "tree": {"sha": "c1180c89bf40558e52fee93fe6a4a46186854561", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1180c89bf40558e52fee93fe6a4a46186854561"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70cc153622fa089431478a774653cc816eda20af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70cc153622fa089431478a774653cc816eda20af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70cc153622fa089431478a774653cc816eda20af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70cc153622fa089431478a774653cc816eda20af/comments", "author": null, "committer": null, "parents": [{"sha": "b3851501be90860cfe5086b1cc4e7de247ac0404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3851501be90860cfe5086b1cc4e7de247ac0404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3851501be90860cfe5086b1cc4e7de247ac0404"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "0288258f3ce868c93a7087ec120b7a41d875d995", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70cc153622fa089431478a774653cc816eda20af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70cc153622fa089431478a774653cc816eda20af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70cc153622fa089431478a774653cc816eda20af", "patch": "@@ -1,3 +1,10 @@\n+2013-05-23  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/57379\n+\t* config/alpha/alpha.md (unspec): Add UNSPEC_XFLT_COMPARE.\n+\t* config/alpha/alpha.c (alpha_emit_xfloating_compare): Construct\n+\tREG_EQUAL note as UNSPEC_XFLT_COMPARE unspec.\n+\n 2013-05-23  Christian Bruel  <christian.bruel@st.com>\n \n \tPR debug/57351\n@@ -31,7 +38,8 @@\n \tPR middle-end/57347\n \t* tree.h (contains_bitfld_component_ref_p): Declare.\n \t* tree-sra.c (contains_bitfld_comp_ref_p): Move...\n-\t* tree.c (contains_bitfld_component_ref_p): ...here.  Adjust its caller.\n+\t* tree.c (contains_bitfld_component_ref_p): ...here.  Adjust its\n+\tcaller.\n \t* ipa-prop.c (determine_known_aggregate_parts): Check that LHS does\n \tnot access a bit-field.  Assert all final offsets are byte-aligned.\n \n@@ -57,9 +65,8 @@\n 2013-05-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/57344\n-\t* expmed.c (store_split_bit_field): If op0 is a REG or\n-\tSUBREG of a REG, don't lower unit.  Handle unit not being\n-\talways BITS_PER_WORD.\n+\t* expmed.c (store_split_bit_field): If op0 is a REG or SUBREG of a REG,\n+\tdon't lower unit.  Handle unit not being always BITS_PER_WORD.\n \n 2013-05-23  Richard Biener  <rguenther@suse.de>\n \n@@ -179,8 +186,7 @@\n \tpower8.\n \t(rs6000_hard_regno_mode_ok): Make PTImode only match even GPR\n \tregisters.\n-\t(rs6000_debug_reg_print): Print the base register class if\n-\t-mdebug=reg.\n+\t(rs6000_debug_reg_print): Print the base register class if -mdebug=reg.\n \t(rs6000_debug_vector_unit): Add p8_vector.\n \t(rs6000_debug_reg_global): If -mdebug=reg, print power8 constraint\n \tdefinitions.  Also print fusion state.\n@@ -215,10 +221,9 @@\n \t(MASK_DIRECT_MOVE): Likewise.\n \t(MASK_P8_FUSION): Likewise.\n \t(MASK_P8_VECTOR): Likewise.\n-\t(REG_ALLOC_ORDER): Move fr13 to be lower in priority so that the\n-\tTFmode temporary used by some of the direct move instructions to\n-\tget two FP temporary registers does not force creation of a stack\n-\tframe.\n+\t(REG_ALLOC_ORDER): Move fr13 to be lower in priority so that the TFmode\n+\ttemporary used by some of the direct move instructions to get two FP\n+\ttemporary registers does not force creation of a stack frame.\n \t(VLOGICAL_REGNO_P): Allow vector logical operations in GPRs.\n \t(MODES_TIEABLE_P): Move the VSX tests above the Altivec tests so\n \tthat any VSX registers are tieable, even if they are also an\n@@ -269,9 +274,8 @@\n 2013-05-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/57331\n-\t* tree-vrp.c (simplify_cond_using_ranges): Don't optimize\n-\tcomparison of conversion from pointer type to integral type\n-\twith integer.\n+\t* tree-vrp.c (simplify_cond_using_ranges): Don't optimize comparison\n+\tof conversion from pointer type to integral type with integer.\n \n 2013-05-21  Martin Jambor  <mjambor@suse.cz>\n "}, {"sha": "096ef3b1f56c5348fe9be18275f13605731a7148", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70cc153622fa089431478a774653cc816eda20af/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70cc153622fa089431478a774653cc816eda20af/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=70cc153622fa089431478a774653cc816eda20af", "patch": "@@ -3067,12 +3067,8 @@ alpha_emit_xfloating_compare (enum rtx_code *pcode, rtx op0, rtx op1)\n   operands[1] = op1;\n   out = gen_reg_rtx (DImode);\n \n-  /* What's actually returned is -1,0,1, not a proper boolean value,\n-     so use an EXPR_LIST as with a generic libcall instead of a \n-     comparison type expression.  */\n-  note = gen_rtx_EXPR_LIST (VOIDmode, op1, NULL_RTX);\n-  note = gen_rtx_EXPR_LIST (VOIDmode, op0, note);\n-  note = gen_rtx_EXPR_LIST (VOIDmode, func, note);\n+  /* What's actually returned is -1,0,1, not a proper boolean value.  */\n+  note = gen_rtx_UNSPEC (DImode, gen_rtvec (2, op0, op1), UNSPEC_XFLT_COMPARE);\n   alpha_emit_xfloating_libcall (func, out, operands, 2, note);\n \n   return out;"}, {"sha": "b020b457df2d23edf5b62499c869b6a4c83e3a0a", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70cc153622fa089431478a774653cc816eda20af/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70cc153622fa089431478a774653cc816eda20af/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=70cc153622fa089431478a774653cc816eda20af", "patch": "@@ -23,6 +23,7 @@\n ;; Uses of UNSPEC in this file:\n \n (define_c_enum \"unspec\" [\n+  UNSPEC_XFLT_COMPARE\n   UNSPEC_ARG_HOME\n   UNSPEC_LDGP1\n   UNSPEC_INSXH"}]}