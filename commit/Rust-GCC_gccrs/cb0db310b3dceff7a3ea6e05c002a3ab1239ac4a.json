{"sha": "cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IwZGIzMTBiM2RjZWZmN2EzZWE2ZTA1YzAwMmEzYWIxMjM5YWM0YQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-25T11:28:22Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-25T11:28:22Z"}, "message": "Add support for unit-struct\n\nIdentifierExpr's can reference types like a unit-struct, referencing other\nstructs actually form a function item type which is not supported yet.", "tree": {"sha": "202655cf9e81606e5ba289f2acfa9e8aedc698e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/202655cf9e81606e5ba289f2acfa9e8aedc698e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ede4ff311bed634753293858b2547e13a84f4bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ede4ff311bed634753293858b2547e13a84f4bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ede4ff311bed634753293858b2547e13a84f4bf"}], "stats": {"total": 86, "additions": 74, "deletions": 12}, "files": [{"sha": "e92c7cd49435621389cc1bc7e0d226801be1d15a", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 61, "deletions": 12, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a", "patch": "@@ -109,32 +109,81 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::IdentifierExpr &expr) override\n   {\n-    // need to look up the reference for this identifier\n-    NodeId ref_node_id;\n-    if (!ctx->get_resolver ()->lookup_resolved_name (\n-\t  expr.get_mappings ().get_nodeid (), &ref_node_id))\n+    NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n+\n+    bool is_value = false;\n+    NodeId ref_node_id = UNKNOWN_NODEID;\n+    if (ctx->get_resolver ()->lookup_resolved_name (ast_node_id, &ref_node_id))\n+      {\n+\t// these ref_node_ids will resolve to a pattern declaration but we are\n+\t// interested in the definition that this refers to get the parent id\n+\tResolver::Definition def;\n+\tif (!ctx->get_resolver ()->lookup_definition (ref_node_id, &def))\n+\t  {\n+\t    rust_error_at (expr.get_locus (),\n+\t\t\t   \"unknown reference for resolved name\");\n+\t    return;\n+\t  }\n+\tref_node_id = def.parent;\n+\tis_value = true;\n+      }\n+    else if (!ctx->get_resolver ()->lookup_resolved_type (ast_node_id,\n+\t\t\t\t\t\t\t  &ref_node_id))\n       {\n-\trust_fatal_error (expr.get_locus (), \"failed to look up resolved name\");\n+\trust_error_at (expr.get_locus (),\n+\t\t       \"Failed to lookup type reference for node: %s\",\n+\t\t       expr.as_string ().c_str ());\n \treturn;\n       }\n \n-    // these ref_node_ids will resolve to a pattern declaration but we are\n-    // interested in the definition that this refers to get the parent id\n-    Resolver::Definition def;\n-    if (!ctx->get_resolver ()->lookup_definition (ref_node_id, &def))\n+    if (ref_node_id == UNKNOWN_NODEID)\n       {\n-\trust_error_at (expr.get_locus (), \"unknown reference\");\n+\trust_fatal_error (expr.get_locus (), \"unresolved IdentifierExpr: %s\",\n+\t\t\t  expr.as_string ().c_str ());\n \treturn;\n       }\n \n+    // node back to HIR\n     HirId ref;\n     if (!ctx->get_mappings ()->lookup_node_to_hir (\n-\t  expr.get_mappings ().get_crate_num (), def.parent, &ref))\n+\t  expr.get_mappings ().get_crate_num (), ref_node_id, &ref))\n+      {\n+\trust_error_at (expr.get_locus (), \"reverse lookup failure\");\n+\treturn;\n+      }\n+\n+    TyTy::BaseType *lookup = nullptr;\n+    if (!ctx->get_tyctx ()->lookup_type (ref, &lookup))\n       {\n-\trust_fatal_error (expr.get_locus (), \"reverse lookup failure\");\n+\trust_fatal_error (expr.get_locus (),\n+\t\t\t  \"failed to find type relevant to this context: %s\",\n+\t\t\t  expr.get_mappings ().as_string ().c_str ());\n \treturn;\n       }\n \n+    bool is_type_ref = !is_value;\n+    if (is_type_ref)\n+      {\n+\t// this might be a case for\n+\t//\n+\t// struct S;\n+\t//\n+\t// fn main() {\n+\t//    let s = S;\n+\t// }\n+\n+\tif (lookup->is_unit ())\n+\t  {\n+\t    translated = ctx->get_backend ()->unit_expression ();\n+\t    return;\n+\t  }\n+\n+\t// rust actually treats like this an fn call or structs with fields but\n+\t// unit structs are just the struct name lets catch it with an is-unit\n+\t// check\n+\tgcc_unreachable ();\n+      }\n+\n     Bfunction *fn = nullptr;\n     Bvariable *var = nullptr;\n     if (ctx->lookup_const_decl (ref, &translated))"}, {"sha": "0d4963c1cb239b190286fd50e35717cf00514285", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a", "patch": "@@ -138,6 +138,13 @@ MarkLive::visit (HIR::IdentifierExpr &expr)\n \t}\n       ref_node_id = def.parent;\n     }\n+  else if (!resolver->lookup_resolved_type (ast_node_id, &ref_node_id))\n+    {\n+      rust_error_at (expr.get_locus (),\n+\t\t     \"Failed to lookup type reference for node: %s\",\n+\t\t     expr.as_string ().c_str ());\n+      return;\n+    }\n \n   if (ref_node_id == UNKNOWN_NODEID)\n     {"}, {"sha": "d48a691046b7ff1c2a7de9f3858c32db17699959", "filename": "gcc/testsuite/rust/compile/torture/unit_type3.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funit_type3.rs?ref=cb0db310b3dceff7a3ea6e05c002a3ab1239ac4a", "patch": "@@ -0,0 +1,6 @@\n+struct S;\n+\n+fn main() {\n+    let s = S;\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}]}