{"sha": "0a553c7e1853074ee0616f92ce6b749f389e547a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE1NTNjN2UxODUzMDc0ZWUwNjE2ZjkyY2U2Yjc0OWYzODllNTQ3YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2002-01-10T16:04:23Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2002-01-10T16:04:23Z"}, "message": "Makefile.in ($(docdir)/gccint.info, gccint.dvi): Add additional dependencies.\n\n\t* Makefile.in ($(docdir)/gccint.info, gccint.dvi): Add additional\n\tdependencies.\n\t* doc/languages.texi, doc/sourcebuild.texi: New files.\n\t* doc/configfiles.texi: Make a subsubsection.  Update.\n\t* doc/configterms.texi: Add @node.  Remove warning that this isn't\n\tinstructions for building GCC.\n\t* doc/makefile.texi: Make a subsection.\n\t* doc/gccint.texi: Update.\n\nFrom-SVN: r48731", "tree": {"sha": "1b51c9c6d40a0aa3d4f51db20a7b7e22c18fbf6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b51c9c6d40a0aa3d4f51db20a7b7e22c18fbf6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a553c7e1853074ee0616f92ce6b749f389e547a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a553c7e1853074ee0616f92ce6b749f389e547a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a553c7e1853074ee0616f92ce6b749f389e547a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a553c7e1853074ee0616f92ce6b749f389e547a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "195a5def1cd526aa9160c33f54d9c4103d01dd79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/195a5def1cd526aa9160c33f54d9c4103d01dd79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/195a5def1cd526aa9160c33f54d9c4103d01dd79"}], "stats": {"total": 1054, "additions": 1007, "deletions": 47}, "files": [{"sha": "88d53090504a0b760a005731b534030ed52d6e28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a553c7e1853074ee0616f92ce6b749f389e547a", "patch": "@@ -1,3 +1,14 @@\n+2002-01-10  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* Makefile.in ($(docdir)/gccint.info, gccint.dvi): Add additional\n+\tdependencies.\n+\t* doc/languages.texi, doc/sourcebuild.texi: New files.\n+\t* doc/configfiles.texi: Make a subsubsection.  Update.\n+\t* doc/configterms.texi: Add @node.  Remove warning that this isn't\n+\tinstructions for building GCC.\n+\t* doc/makefile.texi: Make a subsection.\n+\t* doc/gccint.texi: Update.\n+\n Thu Jan 10 16:39:58 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (sse_mov?fcc_const0_?): Fix constraints."}, {"sha": "6ebbb2e87d1690a272e4077ec25314a74d7659a4", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0a553c7e1853074ee0616f92ce6b749f389e547a", "patch": "@@ -2278,7 +2278,8 @@ $(docdir)/gccint.info: $(docdir)/gccint.texi \\\n \t $(docdir)/configfiles.texi $(docdir)/collect2.texi \\\n \t $(docdir)/headerdirs.texi $(docdir)/include/funding.texi \\\n \t $(docdir)/gnu.texi $(docdir)/include/gpl.texi \\\n-\t $(docdir)/include/fdl.texi $(docdir)/contrib.texi\n+\t $(docdir)/include/fdl.texi $(docdir)/contrib.texi \\\n+\t $(docdir)/languages.texi $(docdir)/sourcebuild.texi\n \tcd $(srcdir) && $(MAKEINFO) $(MAKEINFOFLAGS) -I doc -I doc/include -o doc/gccint.info doc/gccint.texi\n \n $(docdir)/cppinternals.info: $(docdir)/cppinternals.texi\n@@ -2312,7 +2313,8 @@ gccint.dvi: $(docdir)/gccint.texi \\\n \t $(docdir)/configfiles.texi $(docdir)/collect2.texi \\\n \t $(docdir)/headerdirs.texi $(docdir)/include/funding.texi \\\n \t $(docdir)/gnu.texi $(docdir)/include/gpl.texi \\\n-\t $(docdir)/include/fdl.texi $(docdir)/contrib.texi\n+\t $(docdir)/include/fdl.texi $(docdir)/contrib.texi \\\n+\t $(docdir)/languages.texi $(docdir)/sourcebuild.texi\n \t$(TEXI2DVI) -I $(docdir) -I $(docdir)/include $(docdir)/gccint.texi\n \n cppinternals.dvi: $(docdir)/cppinternals.texi"}, {"sha": "c6c60bbe802af90882f979481b1199aa5385f367", "filename": "gcc/doc/configfiles.texi", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2Fdoc%2Fconfigfiles.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2Fdoc%2Fconfigfiles.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fconfigfiles.texi?ref=0a553c7e1853074ee0616f92ce6b749f389e547a", "patch": "@@ -1,44 +1,74 @@\n-@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+@c 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n @node Configuration Files\n-@chapter Files Created by @code{configure}\n+@subsubsection Files Created by @code{configure}\n \n-Here we spell out what files will be set up by @code{configure}.  Normally\n-you need not be concerned with these files.\n+Here we spell out what files will be set up by @file{configure} in the\n+@file{gcc} directory.  Some other files are created as temporary files\n+in the configuration process, and are not used in the subsequent\n+build; these are not documented.\n \n @itemize @bullet\n @item\n-A file named @file{config.h} is created that contains a @samp{#include}\n-of the top-level config file for the machine you will run the compiler\n-on (@pxref{Config}).  This file is responsible for defining information\n-about the host machine.  It includes @file{tm.h}.\n-\n-The top-level config file is located in the subdirectory @file{config}.\n-Its name is always @file{xm-@var{something}.h}; usually\n-@file{xm-@var{machine}.h}, but there are some exceptions.\n+@file{Makefile} is constructed from @file{Makefile.in}, together with\n+the host and target fragments (@pxref{Fragments, , Makefile\n+Fragments}) @file{t-@var{target}} and @file{x-@var{host}} from\n+@file{config}, if any, and language Makefile fragments\n+@file{@var{language}/Make-lang.in}.\n+@item\n+@file{auto-host.h} contains information about the host machine\n+determined by @file{configure}.  If the host machine is different from\n+the build machine, then @file{auto-build.h} is also created,\n+containing such information about the build machine.\n+@item\n+@file{config.status} is a script that may be run to recreate the\n+current configuration.\n+@item\n+@file{configargs.h} is a header containing details of the arguments\n+passed to @file{configure} to configure GCC, and of the thread model\n+used.\n+@item\n+@file{cstamp-h} is used as a timestamp.\n+@item\n+@file{fixinc/Makefile} is constructed from @file{fixinc/Makefile.in}.\n+@item\n+@file{gccbug}, a script for reporting bugs in GCC, is constructed from\n+@file{gccbug.in}.\n+@item\n+@file{intl/Makefile} is constructed from @file{intl/Makefile.in}.\n+@item\n+@file{mklibgcc}, a shell script to create a Makefile to build libgcc,\n+is constructed from @file{mklibgcc.in}.\n+@item\n+If a language @file{config-lang.in} file (@pxref{Front End Config, ,\n+The Front End @file{config-lang.in} File}) sets @code{outputs}, then\n+the files listed in @code{outputs} there are also generated.\n+@end itemize\n \n-If your system does not support symbolic links, you might want to\n-set up @file{config.h} to contain a @samp{#include} command which\n-refers to the appropriate file.\n+The following configuration headers are created from the Makefile,\n+using @file{mkconfig.sh}, rather than directly by @file{configure}.\n+@file{config.h}, @file{hconfig.h} and @file{tconfig.h} all contain the\n+@file{xm-@var{machine}.h} header, if any, appropriate to the host,\n+build and target machines respectively, the configuration headers for\n+the target, and some definitions; for the host and build machines,\n+these include the autoconfigured headers generated by\n+@file{configure}.  The other configuration headers are determined by\n+@file{config.gcc}.  They also contain the typedefs for @code{rtx},\n+@code{rtvec} and @code{tree}.\n \n+@itemize @bullet\n @item\n-A file named @file{tconfig.h} is created which includes the top-level config\n-file for your target machine.  This is used for compiling certain\n-programs to run on that machine.\n-\n+@file{config.h}, for use in programs that run on the host machine.\n @item\n-A file named @file{tm.h} is created which includes the\n-machine-description macro file for your target machine.  It should be in\n-the subdirectory @file{config} and its name is often\n-@file{@var{machine}.h}.\n-\n+@file{hconfig.h}, for use in programs that run on the build machine.\n+@item\n+@file{tconfig.h}, for use in programs and libraries for the target\n+machine.\n @item\n-The command file @file{configure} also constructs the file\n-@file{Makefile} by adding some text to the template file\n-@file{Makefile.in}.  The additional text comes from files in the\n-@file{config} directory, named @file{t-@var{target}} and\n-@file{x-@var{host}}.  If these files do not exist, it means nothing\n-needs to be added for a given target or host.\n+@file{tm_p.h}, which includes the header @file{@var{machine}-protos.h}\n+that contains prototypes for functions in the target @file{.c} file.\n+FIXME: why is such a separate header necessary?\n @end itemize"}, {"sha": "39b3152d5286bc9482282d38d530b3a362f265e1", "filename": "gcc/doc/configterms.texi", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2Fdoc%2Fconfigterms.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2Fdoc%2Fconfigterms.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fconfigterms.texi?ref=0a553c7e1853074ee0616f92ce6b749f389e547a", "patch": "@@ -1,15 +1,12 @@\n-@c Copyright (C) 2001 Free Software Foundation, Inc.\n+@c Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n+@node Configure Terms\n @section Configure Terms and History\n @cindex configure terms\n @cindex canadian\n \n-This section is not instructions for building GCC.  If you are trying to\n-do a build, you should first read @uref{http://gcc.gnu.org/install/} or\n-whatever installation instructions came with your source package.\n-\n The configure and build process has a long and colorful history, and can\n be confusing to anyone who doesn't know why things are the way they are.\n While there are other documents which describe the configuration process"}, {"sha": "e5f604094ae3ea3fbf8cc4ae4f0443949e14606b", "filename": "gcc/doc/gccint.texi", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2Fdoc%2Fgccint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2Fdoc%2Fgccint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgccint.texi?ref=0a553c7e1853074ee0616f92ce6b749f389e547a", "patch": "@@ -88,7 +88,7 @@ included in the section entitled ``GNU Free Documentation License''.\n @sp 2\n @center Richard M. Stallman\n @sp 3\n-@center Last updated 7 January 2002\n+@center Last updated 10 January 2002\n @sp 1\n \n @center for GCC @value{version-GCC}\n@@ -141,19 +141,32 @@ write front ends for new languages.  It corresponds to GCC version\n separate manual.  @xref{Top,, Introduction, gcc, Using the GNU\n Compiler Collection (GCC)}.\n \n+This manual is mainly a reference manual rather than a tutorial.  It\n+discusses how to contribute to GCC (@pxref{Contributing}), the\n+characteristics of the machines supported by GCC as hosts and targets\n+(@pxref{Portability}), how GCC relates to the ABIs on such systems\n+(@pxref{Interface}), and the characteristics of the languages for\n+which GCC front ends are written (@pxref{Languages}).  It then\n+describes the GCC source tree structure and build system, some of the\n+interfaces to GCC front ends, and how support for a target system is\n+implemented in GCC@.\n+\n+Additional tutorial information is linked to from\n+@uref{http://gcc.gnu.org/readings.html}.\n+\n @menu\n * Contributing::    How to contribute to testing and developing GCC.\n-* Makefile::        Additional Makefile and configure information.\n * Portability::     Goals of GCC's portability features.\n * Interface::       Function-call interface of GCC output.\n+* Languages::       Languages for which GCC front ends are written.\n+* Source Tree::     GCC source tree structure and build system.\n * Passes::          Order of passes, what they do, and what each file is for.\n * Trees::           The source representation used by the C and C++ front ends.\n * RTL::             The intermediate representation that most passes work on.\n * Machine Desc::    How to write machine description instruction patterns.\n * Target Macros::   How to write the machine description C macros and functions.\n * Config::          Writing the @file{xm-@var{machine}.h} file.\n * Fragments::       Writing the @file{t-@var{target}} and @file{x-@var{host}} files.\n-* Configuration Files::  Files created by running @code{configure}.\n * Collect2::        How @code{collect2} works; how it finds @code{ld}.\n * Header Dirs::     Understanding the standard header file directories.\n \n@@ -170,18 +183,17 @@ Compiler Collection (GCC)}.\n @end menu\n \n @include contribute.texi\n-@include makefile.texi\n-@include configterms.texi\n @include portability.texi\n @include interface.texi\n+@include languages.texi\n+@include sourcebuild.texi\n @include passes.texi\n @include c-tree.texi\n @include rtl.texi\n @include md.texi\n @include tm.texi\n @include hostconfig.texi\n @include fragments.texi\n-@include configfiles.texi\n @include collect2.texi\n @include headerdirs.texi\n "}, {"sha": "514cb08ecced2360054ed43f0c2852f01c70dd98", "filename": "gcc/doc/languages.texi", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2Fdoc%2Flanguages.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2Fdoc%2Flanguages.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flanguages.texi?ref=0a553c7e1853074ee0616f92ce6b749f389e547a", "patch": "@@ -0,0 +1,36 @@\n+@c Copyright (C) 2002 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Languages\n+@chapter Language Front Ends in GCC\n+\n+The interface to front ends for languages in GCC, and in particular\n+the @code{tree} structure (@pxref{Trees}), was initially designed for\n+C, and many aspects of it are still somewhat biased towards C and\n+C-like languages.  It is, however, reasonably well suited to other\n+procedural languages, and front ends for many such languages have been\n+written for GCC@.\n+\n+Writing a compiler as a front end for GCC, rather than compiling\n+directly to assembler or generating C code which is then compiled by\n+GCC, has several advantages:\n+\n+@itemize @bullet\n+@item GCC front ends benefit from the support for many different\n+target machines already present in GCC@.\n+@item GCC front ends benefit from all the optimizations in GCC@.  Some\n+of these, such as alias analysis, may work better when GCC is\n+compiling directly from source code then when it is compiling from\n+generated C code.\n+@item Better debugging information is generated when compiling\n+directly from source code than when going via intermediate generated C\n+code.\n+@end itemize\n+\n+Because of the advantages of writing a compiler as a GCC front end,\n+GCC front ends have also been created for languages very different\n+from those for which GCC was designed, such as the declarative\n+logic/functional language Mercury.  For these reasons, it may also be\n+useful to implement compilers created for specialized purposes (for\n+example, as part of a research project) as GCC front ends."}, {"sha": "69d621ba66c63f1c2dc76d9f649634269c883c8b", "filename": "gcc/doc/makefile.texi", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2Fdoc%2Fmakefile.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2Fdoc%2Fmakefile.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmakefile.texi?ref=0a553c7e1853074ee0616f92ce6b749f389e547a", "patch": "@@ -1,11 +1,9 @@\n-@c Copyright (C) 2001 Free Software Foundation, Inc.\n+@c Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n @node Makefile\n-@chapter Additional Makefile and configure information.\n-\n-@section Makefile Targets\n+@subsection Makefile Targets\n @cindex makefile targets\n @cindex targets, makefile\n "}, {"sha": "b18f7f296054fc67226556fbab0ca7299e6ebb89", "filename": "gcc/doc/sourcebuild.texi", "status": "added", "additions": 874, "deletions": 0, "changes": 874, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a553c7e1853074ee0616f92ce6b749f389e547a/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=0a553c7e1853074ee0616f92ce6b749f389e547a", "patch": "@@ -0,0 +1,874 @@\n+@c Copyright (C) 2002 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Source Tree\n+@chapter Source Tree Structure and Build System\n+\n+This chapter describes the structure of the GCC source tree, and how\n+GCC is built.  The user documentation for building and installing GCC\n+is in a separate manual (@uref{http://gcc.gnu.org/install/}), with\n+which it is presumed that you are familiar.\n+\n+@menu\n+* Configure Terms:: Configuration terminology and history.\n+* Top Level::       The top level source directory.\n+* gcc Directory::   The @file{gcc} subdirectory.\n+* Test Suites::     The GCC test suites.\n+@end menu\n+\n+@include configterms.texi\n+\n+@node Top Level\n+@section Top Level Source Directory\n+\n+The top level source directory in a GCC distribution contains several\n+files and directories that are shared with other software\n+distributions such as that of GNU Binutils.  It also contains several\n+subdirectories that contain parts of GCC and its runtime libraries:\n+\n+@table @file\n+@item boehm-gc\n+The Boehm conservative garbage collector, used as part of the Java\n+runtime library.\n+\n+@item contrib\n+Contributed scripts that may be found useful in conjunction with GCC@.\n+One of these, @file{contrib/texi2pod.pl}, is used to generate man\n+pages from Texinfo manuals as part of the GCC build process.\n+\n+@item fastjar\n+An implementation of the @command{jar} command, used with the Java\n+front end.\n+\n+@item gcc\n+The main sources of GCC itself (except for runtime libraries),\n+including optimizers, support for different target architectures,\n+language front ends, and test suites.  @xref{gcc Directory, , The\n+@file{gcc} Subdirectory}, for details.\n+\n+@item include\n+Headers for the @code{libiberty} library.\n+\n+@item libchill\n+The CHILL runtime library.\n+\n+@item libf2c\n+The Fortran runtime library.\n+\n+@item libffi\n+The @code{libffi} library, used as part of the Java runtime library.\n+\n+@item libiberty\n+The @code{libibery} library, used for portability and for some\n+generally useful data structures and algorithms.  @xref{Top, ,\n+Introduction, libiberty, @sc{gnu} libiberty}, for more information\n+about this library.\n+\n+@item libjava\n+The Java runtime library.\n+\n+@item libobjc\n+The Objective-C runtime library.\n+\n+@item libstdc++-v3\n+The C++ runtime library.\n+\n+@item maintainer-scripts\n+Scripts used by the @code{gccadmin} account on @code{gcc.gnu.org}.\n+\n+@item zlib\n+The @code{zlib} compression library, used by the Java front end and as\n+part of the Java runtime library.\n+@end table\n+\n+The build system in the top level directory, including how recursion\n+into subdirectories works and how building runtime libraries for\n+multilibs is handled, is documented in a separate manual, included\n+with GNU Binutils.  @xref{Top, , GNU configure and build system,\n+configure, The GNU configure and build system}, for details.\n+\n+@node gcc Directory\n+@section The @file{gcc} Subdirectory\n+\n+The @file{gcc} directory contains many files that are part of the C\n+sources of GCC, other files used as part of the configuration and\n+build process, and subdirectories including documentation and a\n+test suite.  The files that are sources of GCC are documented in a\n+separate chapter.  @xref{Passes, , Passes and Files of the Compiler}.\n+\n+@menu\n+* Subdirectories:: Subdirectories of @file{gcc}.\n+* Configuration::  The configuration process, and the files it uses.\n+* Build::          The build system in the @file{gcc} directory.\n+* Makefile::       Targets in @file{gcc/Makefile}.\n+* Library Files::  Library source files and headers under @file{gcc/}.\n+* Headers::        Headers installed by GCC.\n+* Documentation::  Building documentation in GCC.\n+* Front End::      Anatomy of a language front end.\n+* Back End::       Anatomy of a target back end.\n+@end menu\n+\n+@node Subdirectories\n+@subsection Subdirectories of @file{gcc}\n+\n+The @file{gcc} directory contains the following subdirectories:\n+\n+@table @file\n+@item @var{language}\n+Subdirectories for various languages.  Directories containing a file\n+@file{config-lang.in} are language subdirectories.  The contents of\n+the subdirectories @file{cp} (for C++) and @file{objc} (for\n+Objective-C) are documented in this manual (@pxref{Passes, , Passes\n+and Files of the Compiler}); those for other languages are not.\n+@xref{Front End, , Anatomy of a Language Front End}, for details of\n+the files in these directories.\n+\n+@item config\n+Configuration files for supported architectures and operating\n+systems.  @xref{Back End, , Anatomy of a Target Back End}, for\n+details of the files in thie directory.\n+\n+@item doc\n+Texinfo documentation for GCC, together with automatically generated\n+man pages and support for converting the installation manual to\n+HTML@.  @xref{Documentation}.\n+\n+@item fixinc\n+The support for fixing system headers to work with GCC@.  See\n+@file{fixinc/README} for more information.  The headers fixed by this\n+mechanism are installed in @file{@var{libsubdir}/include}.  Along with\n+those headers, @file{README-fixinc} is also installed, as\n+@file{@var{libsubdir}/include/README}.\n+\n+@item ginclude\n+System headers installed by GCC, mainly those required by the C\n+standard of freestanding implementations.  @xref{Headers, , Headers\n+Installed by GCC}, for details of when these and other headers are\n+installed.\n+\n+@item intl\n+GNU @code{libintl}, from GNU @code{gettext}, for systems which do not\n+include it in libc.  Properly, this directory should be at top level,\n+parallel to the @file{gcc} directory.\n+\n+@item po\n+Message catalogs with translations of messages produced by GCC into\n+various languages, @file{@var{language}.po}.  This directory also\n+contains @file{gcc.pot}, the template for these message catalogues,\n+@file{exgettext}, a wrapper around @command{gettext} to extract the\n+messages from the GCC sources and create @file{gcc.pot}, which is run\n+by @command{make gcc.pot}, and @file{EXCLUDES}, a list of files from\n+which messages should not be extracted.\n+\n+@item testsuite\n+The GCC test suites (except for those for runtime libraries).\n+@xref{Test Suites}.\n+@end table\n+\n+@node Configuration\n+@subsection Configuration in the @file{gcc} Directory\n+\n+The @file{gcc} directory is configured with an Autoconf-generated\n+script @file{configure}.  The @file{configure} script is generated\n+from @file{configure.in} and @file{aclocal.m4}.  From the files\n+@file{configure.in} and @file{acconfig.h}, Autoheader generates the\n+file @file{config.in}.  The file @file{cstamp-h.in} is used as a\n+timestamp.\n+\n+@menu\n+* Config Fragments::     Scripts used by @file{configure}.\n+* System Config::        The @file{config.gcc} file.\n+* Configuration Files::  Files created by running @file{configure}.\n+@end menu\n+\n+@node Config Fragments\n+@subsubsection Scripts Used by @file{configure}\n+\n+@file{configure} uses some other scripts to help in its work:\n+\n+@itemize @bullet\n+@item The standard GNU @file{config.sub} and @file{config.guess}\n+files, kept in the top level directory, are used.  FIXME: when is the\n+@file{config.guess} file in the @file{gcc} directory (that just calls\n+the top level one) used?\n+\n+@item The file @file{config.gcc} is used to handle configuration\n+specific to the particular build, host or target machine.  (In\n+general, this should only be used for features that cannot reasonably\n+be tested in Autoconf feature tests.)  @xref{System Config, , The\n+@file{config.gcc} File}, for details of the contents of this file.\n+\n+@item Each language subdirectory has a file\n+@file{@var{language}/config-lang.in} that is used for\n+front-end-specific configuration.  @xref{Front End Config, , The Front\n+End @file{config-lang.in} File}, for details of this file.\n+\n+@item A helper script @file{configure.frag} is used as part of\n+creating the output of @file{configure}.\n+@end itemize\n+\n+@node System Config\n+@subsubsection The @file{config.gcc} File\n+\n+FIXME: document the contents of this file, and what variables should\n+be set to control build, host and target configuration.\n+\n+@include configfiles.texi\n+\n+@node Build\n+@subsection Build System in the @file{gcc} Directory\n+\n+FIXME: describe the build system, including what is built in what\n+stages.  Also list the various source files that are used in the build\n+process but aren't source files of GCC itself and so aren't documented\n+below (@pxref{Passes}).\n+\n+@include makefile.texi\n+\n+@node Library Files\n+@subsection Library Source Files and Headers under the @file{gcc} Directory\n+\n+FIXME: list here, with explanation, all the C source files and headers\n+under the @file{gcc} directory that aren't built into the GCC\n+executable but rather are part of runtime libraries and object files,\n+such as @file{crtstuff.c} and @file{unwind-dw2.c}.  @xref{Headers, ,\n+Headers Installed by GCC}, for more information about the\n+@file{ginclude} directory.\n+\n+@node Headers\n+@subsection Headers Installed by GCC\n+\n+In general, GCC expects the system C library to provide most of the\n+headers to be used with it.  However, GCC will fix those headers if\n+necessary to make them work with GCC, and will install some headers\n+required of freestanding implementations.  These headers are installed\n+in @file{@var{libsubdir}/include}.  Headers for non-C runtime\n+libraries are also installed by GCC; these are not documented here.\n+(FIXME: document them somewhere.)\n+\n+Several of the headers GCC installs are in the @file{ginclude}\n+directory.  These headers, @file{iso646.h},\n+@file{stdarg.h}, @file{stdbool.h}, @file{stddef.h} and\n+@file{varargs.h}, are installed in @file{@var{libsubdir}/include},\n+unless the target Makefile fragment (@pxref{Target Fragment})\n+overrides this by setting @code{USER_H}.\n+\n+In addition to these headers and those generated by fixing system\n+headers to work with GCC, some other headers may also be installed in\n+@file{@var{libsubdir}/include}.  @file{config.gcc} may set\n+@code{extra_headers}; this specifies additional headers under\n+@file{config} to be installed on some systems.  GCC normally installs\n+a @code{<float.h>} file; these are kept as\n+@file{config/float-@var{format}.h}, where @var{format} is specified by\n+a @code{float_format} setting in @file{config.gcc}, and a setting\n+@samp{float_format=none} disables installation of this header.  GCC\n+also installs its own version of @code{<limits.h>}; this is generated\n+from @file{glimits.h}, together with @file{limitx.h} and\n+@file{limity.h} if the system also has its own version of\n+@code{<limits.h>}.  (GCC provides its own header because it is\n+required of ISO C freestanding implementations, but needs to include\n+the system header from its own header as well because other standards\n+such as POSIX specify additional values to be defined in\n+@code{<limits.h>}.)  The system's @code{<limits.h>} header is used via\n+@file{@var{libsubdir}/include/syslimits.h}, which is copied from\n+@file{gsyslimits.h} if it does not need fixing to work with GCC; if it\n+needs fixing, @file{syslimits.h} is the fixed copy.\n+\n+@node Documentation\n+@subsection Building Documentation\n+\n+The main GCC documentation is in the form of manuals in Texinfo\n+format.  These are installed in Info format, and DVI versions may be\n+generated by @command{make dvi}.  In addition, some man pages are\n+generated from the Texinfo manuals, there are some other text files\n+with miscellaneous documentation, and runtime libraries have their own\n+documentation outside the @file{gcc} directory.  FIXME: document the\n+documentation for runtime libraries somewhere.\n+\n+@menu\n+* Texinfo Manuals::      GCC manuals in Texinfo format.\n+* Man Page Generation::  Generating man pages from Texinfo manuals.\n+* Miscellaneous Docs::   Miscellaneous text files with documentation.\n+@end menu\n+\n+@node Texinfo Manuals\n+@subsubsection Texinfo Manuals\n+\n+The manuals for GCC as a whole, and the C and C++ front ends, are in\n+files @file{doc/*.texi}.  Other front ends have their own manuals in\n+files @file{@var{language}/*.texi}.  Common files\n+@file{doc/include/*.texi} are provided which may be included in\n+multiple manuals; the following files are in @file{doc/include}:\n+\n+@table @file\n+@item fdl.texi\n+The GNU Free Documentation License.\n+@item funding.texi\n+The section ``Funding Free Software''.\n+@item gcc-common.texi\n+Common definitions for manuals.\n+@item gpl.texi\n+The GNU General Public License.\n+@item texinfo.tex\n+A copy of @file{texinfo.tex} known to work with the GCC manuals.\n+@end table\n+\n+DVI formatted manuals are generated by @command{make dvi}, which uses\n+@command{texi2dvi} (via the Makefile macro @code{$(TEXI2DVI)}).  Info\n+manuals are generated by @command{make info} (which is run as part of\n+a bootstrap); this generates the manuals in the source directory,\n+using @command{makeinfo} via the Makefile macro @code{$(MAKEINFO)},\n+and they are included in release distributions.\n+\n+Manuals are also provided on the GCC web site, in both HTML and\n+PostScript forms.  This is done via the script\n+@file{maintainer-scripts/update_web_docs}.  Each manual to be\n+provided online must be listed in the definition of @code{MANUALS} in\n+that file; a file @file{@var{name}.texi} must only appear once in the\n+source tree, and the output manual must have the same name as the\n+source file.  (However, other Texinfo files, included in manuals but\n+not themselves the root files of manuals, may have names that appear\n+more than once in the source tree.)  The manual file\n+@file{@var{name}.texi} should only include other files in its own\n+directory or in @file{doc/include}.  HTML manuals will be generated by\n+@command{makeinfo --html} and PostScript manuals by @command{texi2dvi}\n+and @command{dvips}.  All Texinfo files that are parts of manuals must\n+be checked into CVS, even if they are generated files, for the\n+generation of online manuals to work.\n+\n+The installation manual, @file{doc/install.texi}, is also provided on\n+the GCC web site.  The HTML version is generated by the script\n+@file{doc/install.texi2html}.\n+\n+@node Man Page Generation\n+@subsubsection Man Page Generation\n+\n+Because of user demand, in addition to full Texinfo manuals, man pages\n+are provided which contain extracts from those manuals.  These man\n+pages are generated from the Texinfo manuals using\n+@file{contrib/texi2pod.pl} and @command{pod2man}.  (The man page for\n+@command{g++}, @file{cp/g++.1}, just contains a @samp{.so} reference\n+to @file{gcc.1}, but all the other man pages are generated from\n+Texinfo manuals.)\n+\n+Because many systems may not have the necessary tools installed to\n+generate the man pages, they are only generated if the\n+@file{configure} script detects that recent enough tools are\n+installed, and the Makefiles allow generating man pages to fail\n+without aborting the build.  Man pages are also included in release\n+distributions.  They are generated in the source directory.\n+\n+Magic comments in Texinfo files starting @samp{@@c man} control what\n+parts of a Texinfo file go into a man page.  Only a subset of Texinfo\n+is supported by @file{texi2pod.pl}, and it may be necessary to add\n+support for more Texinfo features to this script when generating new\n+man pages.  To improve the man page output, some special Texinfo\n+macros are provided in @file{doc/include/gcc-common.texi} which\n+@file{texi2pod.pl} understands:\n+\n+@table @code\n+@item @@gcctabopt\n+Use in the form @samp{@@table @@gcctabopt} for tables of options,\n+where for printed output the effect of @samp{@@code} is better than\n+that of @samp{@@option} but for man page output a different effect is\n+wanted.\n+@item @@gccoptlist\n+Use for summary lists of options in manuals.\n+@item @@gol\n+Use at the end of each line inside @samp{@@gccoptlist}.  This is\n+necessary to avoid problems with differences in how the\n+@samp{@@gccoptlist} macro is handled by different Texinfo formatters.\n+@end table\n+\n+FIXME: describe the @file{texi2pod.pl} input language and magic\n+comments in more detail.\n+\n+@node Miscellaneous Docs\n+@subsubsection Miscellaneous Documentation\n+\n+In addition to the formal documentation that is installed by GCC,\n+there are several other text files with miscellaneous documentation:\n+\n+@table @file\n+@item ABOUT-GCC-NLS\n+Notes on GCC's Native Language Support.  FIXME: this should be part of\n+this manual rather than a separate file.\n+@item ABOUT-NLS\n+Notes on the Free Translation Project.\n+@item COPYING\n+The GNU General Public License.\n+@item COPYING.LIB\n+The GNU Lesser General Public License.\n+@item *ChangeLog*\n+@itemx */ChangeLog*\n+Change log files for various parts of GCC@.\n+@item LANGUAGES\n+Details of a few changes to the GCC front-end interface.  FIXME: the\n+information in this file should be part of general documentation of\n+the front-end interface in this manual.\n+@item ONEWS\n+Information about new features in old versions of GCC@.  (For recent\n+versions, the information is on the GCC web site.)\n+@item README.Portability\n+Information about portability issues when writing code in GCC@.  FIXME:\n+why isn't this part of this manual or of the GCC Coding Conventions?\n+@item SERVICE\n+A pointer to the GNU Service Directory.\n+@end table\n+\n+FIXME: document such files in subdirectories, at least @file{config},\n+@file{cp}, @file{objc}, @file{testsuite}.\n+\n+@node Front End\n+@subsection Anatomy of a Language Front End\n+\n+A front end for a language in GCC has the following parts:\n+\n+@itemize @bullet\n+@item\n+A directory @file{@var{language}} under @file{gcc} containing source\n+files for that front end.  @xref{Front End Directory, , The Front End\n+@file{@var{language}} Directory}, for details.\n+@item\n+A mention of the language in the list of supported languages in\n+@file{gcc/doc/install.texi}.\n+@item\n+Details of contributors to that front end in\n+@file{gcc/doc/contrib.texi}.  If the details are in that front end's\n+own manual then there should be a link to that manual's list in\n+@file{contrib.texi}.\n+@item\n+Information about support for that language in\n+@file{gcc/doc/frontends.texi}.\n+@item\n+Information about standards for that language, and the front end's\n+support for them, in @file{gcc/doc/standards.texi}.  This may be a\n+link to such information in the front end's own manual.\n+@item\n+Details of source file suffixes for that language and @option{-x\n+@var{lang}} options supported, in @file{gcc/doc/invoke.texi}.\n+@item\n+Entries in @code{default_compilers} in @file{gcc.c} for source file\n+suffixes for that language.\n+@item\n+Preferably test suites, which may be under @file{gcc/testsuite} or\n+runtime library directories.  FIXME: document somewhere how to write\n+test suite harnesses.\n+@item\n+Probably a runtime library for the language, outside the @file{gcc}\n+directory.  FIXME: document this further.\n+@item\n+Details of the directories of any runtime libraries in\n+@file{gcc/doc/sourcebuild.texi}.\n+@end itemize\n+\n+If the front end is added to the official GCC CVS repository, the\n+following are also necessary:\n+\n+@itemize @bullet\n+@item\n+At least one GNATS category for bugs in that front end and runtime\n+libraries.  This category needs to be mentioned in\n+@file{gcc/gccbug.in}, and in @file{gnats.html} on the GCC web site, as\n+well as being added to the GNATS database.\n+@item\n+Normally, one or more maintainers of that front end listed in\n+@file{MAINTAINERS}.\n+@item\n+Mentions on the GCC web site in @file{index.html} and\n+@file{frontends.html}, with any relevant links on\n+@file{readings.html}.  (Front ends that are not an official part of\n+GCC may also be listed on @file{frontends.html}, with relevant links.)\n+@item\n+A news item on @file{index.html}, and possibly an announcement on the\n+@email{gcc-announce@@gcc.gnu.org} mailing list.\n+@item\n+The front end's manuals should be mentioned in\n+@file{maintainer-scripts/update_web_docs} (@pxref{Texinfo Manuals})\n+and the online manuals should be linked to from\n+@file{onlinedocs/index.html}.\n+@item\n+Any old releases or CVS repositories of the front end, before its\n+inclusion in GCC, should be made available on the GCC FTP site\n+@uref{ftp://gcc.gnu.org/pub/gcc/old-releases/}.\n+@item\n+The release and snapshot script @file{maintainer-scripts/gcc_release}\n+should be updated to generate appropriate tarballs for this front end.\n+@item\n+If this front end includes its own version files that include the\n+current date, @file{maintainer-scripts/update_version} should be\n+updated accordingly.\n+@item\n+@file{CVSROOT/modules} in the GCC CVS repository should be updated.\n+@end itemize\n+\n+@menu\n+* Front End Directory::  The front end @file{@var{language}} directory.\n+* Front End Config::     The front end @file{config-lang.in} file.\n+@end menu\n+\n+@node Front End Directory\n+@subsubsection The Front End @file{@var{language}} Directory\n+\n+A front end @file{@var{language}} directory contains the source files\n+of that front end (but not of any runtime libraries, which should be\n+outside the @file{gcc} directory).  This includes documentation, and\n+possibly some subsidiary programs build alongside the front end.\n+Certain files are special and other parts of the compiler depend on\n+their names:\n+\n+@table @file\n+@item config-lang.in\n+This file is required in all language subdirectories.  @xref{Front End\n+Config, , The Front End @file{config-lang.in} File}, for details of\n+its contents\n+@item Make-lang.in\n+This file is required in all language subdirectories.  It contains\n+targets @code{@var{lang}.@var{hook}} (where @code{@var{lang}} is the\n+setting of @code{language} in @file{config-lang.in}) for the following\n+values of @code{@var{hook}}, and any other Makefile rules required to\n+build those targets (which may if necessary use other Makefiles\n+specified in @code{outputs} in @file{config-lang.in}, although this is\n+deprecated).\n+\n+@table @code\n+@item all.build\n+@itemx all.cross\n+@itemx start.encap\n+@itemx rest.encap\n+FIXME: exactly what goes in each of these targets?\n+@item info\n+Build info documentation for the front end, in the source directory.\n+This target is only called by @command{make bootstrap} if a suitable\n+version of @command{makeinfo} is available, so does not need to check\n+for this, and should fail if an error occurs.\n+@item dvi\n+Build DVI documentation for the front end, in the build directory.\n+This should be done using @code{$(TEXI2DVI)}, with appropriate\n+@option{-I} arguments pointing to directories of included files.\n+@item generated-manpages\n+Build generated man pages for the front end from Texinfo manuals\n+(@pxref{Man Page Generation}), in the source directory.  This target\n+is only called if the necessary tools are available, but should ignore\n+errors so as not to stop the build if errors occur; man pages are\n+optional and the tools involved may be installed in a broken way.\n+@item install-normal\n+FIXME: what is this target for?\n+@item install-common\n+Install everything that is part of the front end, apart from the\n+compiler executables listed in @code{compilers} in\n+@file{config-lang.in} that are installed in @file{@var{libsubdir}} by\n+the main @file{Makefile}.\n+@item install-info\n+Install info documentation for the front end, if it is present in the\n+source directory.  (It may not be present if a suitable version of\n+@command{makeinfo} was not installed.)  This target should run the\n+command @command{install-info} to update the info directory, but\n+should ignore errors when running that command.\n+@item install-man\n+Install man pages for the front end.  This target should ignore\n+errors.\n+@item uninstall\n+Uninstall files installed by installing the compiler.  This is\n+currently documented not to be supported, so the hook need not do\n+anything.\n+@item mostlyclean\n+@itemx clean\n+@itemx distclean\n+@itemx extraclean\n+@itemx maintainer-clean\n+Except for @code{extraclean}, the language parts of the standard GNU\n+@samp{*clean} targets. @xref{Standard Targets, , Standard Targets for\n+Users, standards, GNU Coding Standards}, for details of the standard\n+targets.  @code{extraclean} does @code{distclean} and also deletes\n+anything likely to be found in the source directory that shouldn't be\n+in the distribution.  For GCC, @code{maintainer-clean} should delete\n+all generated files in the source directory that are not checked into\n+CVS, but should not delete anything checked into CVS@.\n+@item stage1\n+@itemx stage2\n+@itemx stage3\n+@itemx stage4\n+Move to the stage directory files not included in @code{stagestuff} in\n+@file{config-lang.in} or otherwise moved by the main @file{Makefile}.\n+@end table\n+\n+@item lang-options.h\n+This file provides entries for @code{documented_lang_options} in\n+@file{toplev.c} describing command-line options the front end accepts\n+for @option{--help} output.\n+@item lang-specs.h\n+This file provides entries for @code{default_compilers} in\n+@file{gcc.c} which override the default of giving an error that a\n+compiler for that language is not installed.\n+@item @var{language}-tree.def\n+This file, which need not exist, defines any language-specific tree\n+codes.\n+@end table\n+\n+@node Front End Config\n+@subsubsection The Front End @file{config-lang.in} File\n+\n+Each language subdirectory contains a @file{config-lang.in} file.\n+This file is a shell script that may define some variables describing\n+the language:\n+\n+@table @code\n+@item language\n+This definition must be present, and gives the name of the language\n+for some purposes such as arguments to @option{--enable-languages}.\n+@item lang_requires\n+If defined, this variable lists (space-separated) language front ends\n+other than C that this front end requires to be enabled (with the\n+names given being their @code{language} settings).  For example, the\n+Java front end depends on the C++ front end, so sets\n+@samp{lang_requires=c++}.\n+@item target_libs\n+If defined, this variable lists (space-separated) targets in the top\n+level @file{Makefile} to build the runtime libraries for this\n+language, such as @code{target-libobjc}.\n+@item lang_dirs\n+If defined, this variable lists (space-separated) top level\n+directories (parallel to @file{gcc}), apart from the runtime libraries,\n+that should not be configured if this front end is not built.\n+@item build_by_default\n+If defined to @samp{no}, this language front end is not built unless\n+enabled in a @option{--enable-languages} argument.  Otherwise, front\n+ends are built by default, subject to any special logic in\n+@file{configure.in} (as is present to disable the Ada front end if the\n+Ada compiler is not already installed).\n+@item boot_language\n+If defined to @samp{yes}, this front end is built in stage 1 of the\n+bootstrap.  This is only relevant to front ends written in their own\n+languages.\n+@item compilers\n+If defined, a space-separated list of compiler executables that should\n+be installed in @file{@var{libsubdir}}.  The names here will each end\n+with @samp{\\$(exeext)}.\n+@item stagestuff\n+If defined, a space-separated list of files that should be moved to\n+the @file{stage@var{n}} directories in each stage of bootstrap.\n+@item outputs\n+If defined, a space-separated list of files that should be generated\n+by @file{configure} substituting values in them.  This mechanism can\n+be used to create a file @file{@var{language}/Makefile} from\n+@file{@var{language}/Makefile.in}, but this is deprecated, building\n+everything from the single @file{gcc/Makefile} is preferred.\n+@end table\n+\n+@node Back End\n+@subsection Anatomy of a Target Back End\n+\n+A back end for a target architecture in GCC has the following parts:\n+\n+@itemize @bullet\n+@item\n+A directory @file{@var{machine}} under @file{gcc/config}, containing a\n+machine description @file{@var{machine}.md} file (@pxref{Machine Desc,\n+, Machine Descriptions}), header files @file{@var{machine}.h} and\n+@file{@var{machine}-protos.h} and a source file @file{@var{machine}.c}\n+(@pxref{Target Macros, , Target Description Macros and Functions}),\n+possibly a target Makefile fragment @file{t-@var{machine}}\n+(@pxref{Target Fragment, , The Target Makefile Fragment}), and maybe\n+some other files.  The names of these files may be changed from the\n+defaults given by explicit specifications in @file{config.gcc}.\n+@item\n+Entries in @file{config.gcc} (@pxref{System Config, , The\n+@file{config.gcc} File}) for the systems with this target\n+architecture.\n+@item\n+Documentation in @file{gcc/doc/invoke.texi} for any command-line\n+options supported by this target (@pxref{Run-time Target, , Run-time\n+Target Specification}).  This means both entries in the summary table\n+of options and details of the individual options.\n+@item\n+Documentation in @file{gcc/doc/extend.texi} for any target-specific\n+attributes supported (@pxref{Target Attributes, , Defining\n+target-specific uses of @code{__attribute__}}), including where the\n+same attribute is already supported on some targets, which are\n+enumerated in the manual.\n+@item\n+Documentation in @file{gcc/doc/extend.texi} for any target-specific\n+pragmas supported.\n+@item\n+Documentation of any target-specific built-in functions supported.\n+FIXME: where should this documentation be?  For MMX built-in functions\n+it is currently in @file{gcc/doc/invoke.texi}.\n+@item\n+Documentation in @file{gcc/doc/md.texi} of any target-specific\n+constraint letters (@pxref{Machine Constraints, , Constraints for\n+Particular Machines}).\n+@item\n+A note in @file{gcc/doc/contrib.texi} under the person or people who\n+contributed the target support.\n+@item\n+Entries in @file{gcc/doc/install.texi} for all target triplets\n+supported with this target architecture, giving details of any special\n+notes about installation for this target, or saying that there are no\n+special notes if there are none.\n+@item\n+Possibly other support outside the @file{gcc} directory for runtime\n+libraries.  FIXME: reference docs for this.  The libstdc++ porting\n+manual needs to be installed as info for this to work, or to be a\n+chapter of this manual.\n+@end itemize\n+\n+If the back end is added to the official GCC CVS repository, the\n+following are also necessary:\n+\n+@itemize @bullet\n+@item\n+An entry for the target architecture in @file{readings.html} on the\n+GCC web site, with any relevant links.\n+@item\n+A news item about the contribution of support for that target\n+architecture, in @file{index.html} on the GCC web site.\n+@item\n+Normally, one or more maintainers of that target listed in\n+@file{MAINTAINERS}.  Some existing architectures may be unmaintained,\n+but it would be unusual to add support for a target that does not have\n+a maintainer when support is added.\n+@end itemize\n+\n+@node Test Suites\n+@section Test Suites\n+\n+GCC contains several test suites to help maintain compiler quality.\n+Most of the runtime libraries and language front ends in GCC have test\n+suites.  Currently only the C language test suites are documented\n+here; FIXME: document the others.\n+\n+@menu\n+* Test Idioms::  Idioms used in test suite code.\n+* C Tests::      The C language test suites.\n+@end menu\n+\n+@node Test Idioms\n+@subsection Idioms Used in Test Suite Code\n+\n+In the @file{gcc.c-torture} test suites, test cases are commonly named\n+after the date on which they were added.  This allows people to tell\n+at a glance whether a test failure is because of a recently found bug\n+that has not yet been fixed, or whether it may be a regression.  In\n+other test suites, more descriptive names are used.  In general C test\n+cases have a trailing @file{-@var{n}.c}, starting with @file{-1.c}, in\n+case other test cases with similar names are added later.\n+\n+Test cases should use @code{abort ()} to indicate failure and\n+@code{exit (0)} for success; on some targets these may be redefined to\n+indicate failure and success in other ways.\n+\n+In the @file{gcc.dg} test suite, it is often necessary to test that an\n+error is indeed a hard error and not just a warning---for example,\n+where it is a constraint violation in the C standard, which must\n+become an error with @option{-pedantic-errors}.  The following idiom,\n+where the first line shown is line @var{line} of the file and the line\n+that generates the error, is used for this:\n+\n+@smallexample\n+/* @{ dg-bogus \"warning\" \"warning in place of error\" @} */\n+/* @{ dg-error \"@var{regexp}\" \"@var{message}\" @{ target *-*-* @} @var{line} @} */\n+@end smallexample\n+\n+It may be necessary to check that an expression is an integer constant\n+expression and has a certain value.  To check that @code{@var{E}} has\n+value @code{@var{V}}, an idiom similar to the following is used:\n+\n+@smallexample\n+char x[((E) == (V) ? 1 : -1)];\n+@end smallexample\n+\n+In @file{gcc.dg} tests, @code{__typeof__} is sometimes used to make\n+assertions about the types of expressions.  See, for example,\n+@file{gcc.dg/c99-condexpr-1.c}.  The more subtle uses depend on the\n+exact rules for the types of conditional expressions in the C\n+standard; see, for example, @file{gcc.dg/c99-intconst-1.c}.\n+\n+It is useful to be able to test that optimizations are being made\n+properly.  This cannot be done in all cases, but it can be done where\n+the optimization will lead to code being optimized away (for example,\n+where flow analysis or alias analysis should show that certain code\n+cannot be called) or to functions not being called because they have\n+been expanded as built-in functions.  Such tests go in\n+@file{gcc.c-torture/execute}.  Where code should be optimized away, a\n+call to a nonexistent function such as @code{link_failure ()} may be\n+inserted; a definition\n+\n+@smallexample\n+#ifndef __OPTIMIZE__\n+void\n+link_failure (void)\n+@{\n+  abort ();\n+@}\n+#endif\n+@end smallexample\n+\n+@noindent\n+will also be needed so that linking still succeeds when the test is\n+run without optimization.  When all calls to a built-in function\n+should have been optimized and no calls to the non-built-in version of\n+the function should remain, that function may be defined as\n+@code{static} to call @code{abort ()} (although redeclaring a function\n+as static may not work on all targets).\n+\n+FIXME: discuss non-C test suites here.\n+\n+@node C Tests\n+@subsection C Language Test Suites\n+\n+GCC contains the following C language test suites, in the\n+@file{gcc/testsuite} directory:\n+\n+@table @file\n+@item gcc.c-torture/compat\n+FIXME: describe this.\n+\n+This directory should probably not be used for new tests.\n+@item gcc.c-torture/compile\n+This test suite contains test cases that should compile, but do not\n+need to link or run.  These test cases are compiled with several\n+different combinations of optimization options.  All warnings are\n+disabled for these test cases, so this directory is not suitable if\n+you wish to test for the presence or absence of compiler warnings.\n+While special options can be set, and tests disabled on specific\n+platforms, by the use of @file{.x} files, mostly these test cases\n+should not contain platform dependencies.  FIXME: discuss how defines\n+such as @code{NO_LABEL_VALUES} and @code{STACK_SIZE} are used.\n+@item gcc.c-torture/execute\n+This test suite contains test cases that should compile, link and run;\n+otherwise the same comments as for @file{gcc.c-torture/compile} apply.\n+@item gcc.c-torture/unsorted\n+FIXME: describe this.\n+\n+This directory should probably not be used for new tests.\n+@item gcc.dg\n+This test suite contains tests using the more modern @samp{dg}\n+harness.  Magic comments determine whether the file is preprocessed,\n+compiled, linked or run.  In these tests, error and warning message\n+texts are compared against expected texts or regular expressions given\n+in comments.  These tests are run with the options @samp{-ansi\n+-pedantic} unless other options are given in the test.  Except for the\n+@file{noncompile} subdirectory, they are not run with multiple\n+optimization options.\n+@item gcc.dg/cpp\n+This subdirectory contains tests of the preprocessor.\n+@item gcc.dg/format\n+This subdirectory contains tests of the @option{-Wformat} format\n+checking.  Tests in this directory are run with and without\n+@option{-DWIDE}.\n+@item gcc.dg/noncompile\n+This subdirectory contains tests of code that should not compile and\n+does not need any special compilation options.  They are run with\n+multiple optimization options, since sometimes invalid code crashes\n+the compiler with optimization.\n+@item gcc.dg/special\n+FIXME: describe this.\n+@item gcc.c-torture/misc-tests\n+FIXME: describe this, when it should be used for new tests and when it\n+shouldn't.\n+@end table\n+\n+FIXME: merge in @file{testsuite/README.gcc} and discuss the format of\n+test cases and magic comments more."}]}