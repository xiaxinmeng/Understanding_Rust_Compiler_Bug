{"sha": "62e475c55096f01d5eeb8fa15ac75c4300e606b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJlNDc1YzU1MDk2ZjAxZDVlZWI4ZmExNWFjNzVjNDMwMGU2MDZiMA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-11-25T05:13:30Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T05:13:30Z"}, "message": "graphite-sese-to-poly.c (find_scop_parameters): Initialize SCOP_CONTEXT.\n\n2009-10-17  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-sese-to-poly.c (find_scop_parameters): Initialize\n\tSCOP_CONTEXT.\n\t(build_loop_iteration_domains): Extract bounds on parameters\n\tbased on the data size.\n\t(build_scop_context): Do not initialize SCOP_CONTEXT;\n\tadd new constraints.\n\nFrom-SVN: r154601", "tree": {"sha": "ae82754cf384a2f316425983f9013a95c9ebd6e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae82754cf384a2f316425983f9013a95c9ebd6e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62e475c55096f01d5eeb8fa15ac75c4300e606b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e475c55096f01d5eeb8fa15ac75c4300e606b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e475c55096f01d5eeb8fa15ac75c4300e606b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e475c55096f01d5eeb8fa15ac75c4300e606b0/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ecbce7e02d83a2c45bd87626ad5175f51fb27cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ecbce7e02d83a2c45bd87626ad5175f51fb27cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ecbce7e02d83a2c45bd87626ad5175f51fb27cb"}], "stats": {"total": 79, "additions": 78, "deletions": 1}, "files": [{"sha": "d15f0436da622b39eb8835d0e5010db252e67bef", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e475c55096f01d5eeb8fa15ac75c4300e606b0/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e475c55096f01d5eeb8fa15ac75c4300e606b0/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=62e475c55096f01d5eeb8fa15ac75c4300e606b0", "patch": "@@ -1,3 +1,12 @@\n+2009-10-17  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-sese-to-poly.c (find_scop_parameters): Initialize\n+\tSCOP_CONTEXT.\n+\t(build_loop_iteration_domains): Extract bounds on parameters\n+\tbased on the data size.\n+\t(build_scop_context): Do not initialize SCOP_CONTEXT;\n+\tadd new constraints.\n+\n 2009-10-17  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-ppl.c (ppl_min_for_le_polyhedron): New."}, {"sha": "8f4d302e6207055ae7b434ee333bb07ddfd861f9", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e475c55096f01d5eeb8fa15ac75c4300e606b0/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e475c55096f01d5eeb8fa15ac75c4300e606b0/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=62e475c55096f01d5eeb8fa15ac75c4300e606b0", "patch": "@@ -1044,6 +1044,9 @@ find_scop_parameters (scop_p scop)\n \n   scop_set_nb_params (scop, sese_nb_params (region));\n   SESE_ADD_PARAMS (region) = false;\n+\n+  ppl_new_Pointset_Powerset_C_Polyhedron_from_space_dimension\n+    (&SCOP_CONTEXT (scop), scop_nb_params (scop), 0);\n }\n \n /* Returns a gimple_bb from BB.  */\n@@ -1119,6 +1122,7 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n       Value one;\n       ppl_Constraint_t ub;\n       ppl_Linear_Expression_t ub_expr;\n+      double_int nit;\n \n       value_init (one);\n       value_set_si (one, 1);\n@@ -1127,6 +1131,66 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n       scan_tree_for_params (SCOP_REGION (scop), nb_iters, ub_expr, one);\n       value_clear (one);\n \n+      /* N <= estimated_nb_iters\n+\n+\t FIXME: This is a workaround that should go away once we will\n+\t have the PIP algorithm.  */\n+      if (estimated_loop_iterations (loop, true, &nit))\n+\t{\n+\t  Value val;\n+\t  ppl_Linear_Expression_t nb_iters_le;\n+\t  ppl_Polyhedron_t pol;\n+\t  graphite_dim_t p, n = scop_nb_params (scop);\n+\t  ppl_Coefficient_t coef;\n+\n+\t  ppl_new_C_Polyhedron_from_space_dimension (&pol, dim, 0);\n+\t  ppl_new_Linear_Expression_from_Linear_Expression (&nb_iters_le,\n+\t\t\t\t\t\t\t    ub_expr);\n+\n+\t  value_init (val);\n+\t  mpz_set_double_int (val, nit, false);\n+\t  ppl_new_Coefficient_from_mpz_t (&coef, val);\n+\t  ppl_Linear_Expression_add_to_inhomogeneous (nb_iters_le, coef);\n+\t  ppl_delete_Coefficient (coef);\n+\t  ppl_new_Constraint (&ub, nb_iters_le,\n+\t\t\t      PPL_CONSTRAINT_TYPE_LESS_OR_EQUAL);\n+\t  ppl_Polyhedron_add_constraint (pol, ub);\n+\n+\t  for (p = 0; p < n; p++)\n+\t    {\n+\t      ppl_Linear_Expression_t le;\n+\n+\t      ppl_new_Linear_Expression_with_dimension (&le, dim);\n+\t      ppl_set_coef (le, nb + 1 + p, -1);\n+\n+\t      value_set_si (val, -1);\n+\t      ppl_min_for_le_polyhedron (pol, le, val);\n+\t      if (!value_mone_p (val))\n+\t\t{\n+\t\t  ppl_Linear_Expression_t parm_bound;\n+\t\t  ppl_Constraint_t cstr;\n+\n+\t\t  ppl_new_Linear_Expression_with_dimension (&parm_bound, n);\n+\t\t  ppl_set_coef (parm_bound, p, -1);\n+\t\t  ppl_set_inhomogeneous_gmp (parm_bound, val);\n+\t\t  ppl_new_Constraint (&cstr, parm_bound,\n+\t\t\t\t      PPL_CONSTRAINT_TYPE_GREATER_OR_EQUAL);\n+\t\t  ppl_Pointset_Powerset_C_Polyhedron_add_constraint\n+\t\t    (SCOP_CONTEXT (scop), cstr);\n+\n+\t\t  ppl_delete_Constraint (cstr);\n+\t\t  ppl_delete_Linear_Expression (parm_bound);\n+\t\t}\n+\n+\t      ppl_delete_Linear_Expression (le);\n+\t    }\n+\n+\t  ppl_delete_Polyhedron (pol);\n+\t  ppl_delete_Linear_Expression (nb_iters_le);\n+\t  ppl_delete_Constraint (ub);\n+\t  value_clear (val);\n+\t}\n+\n       /* loop_i <= expr_nb_iters */\n       ppl_set_coef (ub_expr, nb, -1);\n       ppl_new_Constraint (&ub, ub_expr, PPL_CONSTRAINT_TYPE_GREATER_OR_EQUAL);\n@@ -1496,6 +1560,7 @@ static void\n build_scop_context (scop_p scop)\n {\n   ppl_Polyhedron_t context;\n+  ppl_Pointset_Powerset_C_Polyhedron_t ps;\n   graphite_dim_t p, n = scop_nb_params (scop);\n \n   ppl_new_C_Polyhedron_from_space_dimension (&context, n, 0);\n@@ -1504,8 +1569,11 @@ build_scop_context (scop_p scop)\n     add_param_constraints (scop, context, p);\n \n   ppl_new_Pointset_Powerset_C_Polyhedron_from_C_Polyhedron\n-    (&SCOP_CONTEXT (scop), context);\n+    (&ps, context);\n+  ppl_Pointset_Powerset_C_Polyhedron_intersection_assign\n+    (SCOP_CONTEXT (scop), ps);\n \n+  ppl_delete_Pointset_Powerset_C_Polyhedron (ps);\n   ppl_delete_Polyhedron (context);\n }\n "}]}