{"sha": "baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFmM2I5YjJlNTI1OTU1OGVmODZiZDYyMzk4ZTJjY2VjZDdhNGE0Yw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-04-18T15:39:18Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-04-18T15:39:18Z"}, "message": "Don't let DEBUG_INSNSs change register renaming decisions\n\n\tPR debug/94439\n\t* regrename.c (check_new_reg_p): Ignore DEBUG_INSNs when walking\n\tthe chain.\n\n\tPR debug/94439\n\t* gcc.dg/torture/pr94439.c: New test.", "tree": {"sha": "e6f26876f0c50c218be7ffbd8a442c88769f533d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6f26876f0c50c218be7ffbd8a442c88769f533d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c/comments", "author": null, "committer": null, "parents": [{"sha": "b57e1621eb76ba80c949ad098829aa8171a8c4ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b57e1621eb76ba80c949ad098829aa8171a8c4ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b57e1621eb76ba80c949ad098829aa8171a8c4ab"}], "stats": {"total": 82, "additions": 77, "deletions": 5}, "files": [{"sha": "1edb5f2d70ba948981ec83775ef7efd00bc5f8bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c", "patch": "@@ -1,3 +1,9 @@\n+2020-04-18  Jeff Law  <law@redhat.com>\n+\n+\tPR debug/94439\n+\t* regrename.c (check_new_reg_p): Ignore DEBUG_INSNs when walking\n+\tthe chain.\n+\n 2020-04-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* doc/sourcebuild.texi (Effective-Target Keywords, Environment"}, {"sha": "669a6ead705c930031843687dddc970560feb148", "filename": "gcc/regrename.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c", "patch": "@@ -348,11 +348,17 @@ check_new_reg_p (int reg ATTRIBUTE_UNUSED, int new_reg,\n   /* See whether it accepts all modes that occur in\n      definition and uses.  */\n   for (tmp = this_head->first; tmp; tmp = tmp->next_use)\n-    if ((!targetm.hard_regno_mode_ok (new_reg, GET_MODE (*tmp->loc))\n-\t && ! DEBUG_INSN_P (tmp->insn))\n-\t|| call_clobbered_in_chain_p (this_head, GET_MODE (*tmp->loc),\n-\t\t\t\t      new_reg))\n-      return false;\n+    {\n+      /* Completely ignore DEBUG_INSNs, otherwise we can get\n+\t -fcompare-debug failures.  */\n+      if (DEBUG_INSN_P (tmp->insn))\n+\tcontinue;\n+\n+      if (!targetm.hard_regno_mode_ok (new_reg, GET_MODE (*tmp->loc))\n+\t  || call_clobbered_in_chain_p (this_head, GET_MODE (*tmp->loc),\n+\t\t\t\t\tnew_reg))\n+\treturn false;\n+    }\n \n   return true;\n }"}, {"sha": "c2b5ddfa5cc75ce71ca584be8ded3948d3303175", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c", "patch": "@@ -1,3 +1,8 @@\n+2020-04-18  Jeff Law  <law@redhat.com>\n+\n+\tPR debug/94439\n+\t* gcc.dg/torture/pr94439.c: New test.\n+\n 2020-04-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* gdc.dg/link.d: Use d_runtime_has_std_library effective target."}, {"sha": "a461b2f8c18f9c4dfdd7d855c4342cef23a83899", "filename": "gcc/testsuite/gcc.dg/torture/pr94439.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr94439.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr94439.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr94439.c?ref=baf3b9b2e5259558ef86bd62398e2ccecd7a4a4c", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-additional-options \"-flive-patching=inline-clone -funroll-loops -fno-tree-forwprop -fno-expensive-optimizations -mstack-arg-probe -fcompare-debug\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+extern void exit (int);\n+extern void abort (void);\n+\n+#define COMPARE_BODY(A, B, TYPE, COPYSIGN)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    TYPE s1 = COPYSIGN ((TYPE) 1.0, A);\t\t\t\t\t\\\n+    TYPE s2 = COPYSIGN ((TYPE) 1.0, B);\t\t\t\t\t\\\n+    if (s1 != s2)\t\t\t\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\t\t\\\n+    if ((__builtin_isnan (A) != 0) != (__builtin_isnan (B) != 0))\t\\\n+      abort ();\t\t\t\t\t\t\t\t\\\n+    if ((A != B) != (__builtin_isnan (A) != 0))\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+void\n+comparel (long double a, long double b)\n+{\n+  COMPARE_BODY (a, b, long double, __builtin_copysignl);\n+}\n+\n+void\n+comparecl (_Complex long double a, long double r, long double i)\n+{\n+  comparel (__real__ a, r);\n+  comparel (__imag__ a, i);\n+}\n+\n+#define VERIFY(A, B, TYPE, COMPARE)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    TYPE a = A;\t\t\t\t\t\t\\\n+    TYPE b = B;\t\t\t\t\t\t\\\n+    _Complex TYPE cr = __builtin_complex (a, b);\t\\\n+    static _Complex TYPE cs = __builtin_complex (A, B);\t\\\n+    COMPARE (cr, A, B);\t\t\t\t\t\\\n+    COMPARE (cs, A, B);\t\t\t\t\t\\\n+  } while (0)\n+\n+#define ALL_CHECKS(PZ, NZ, NAN, INF, TYPE, COMPARE)\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    VERIFY (NAN, NZ, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (INF, NZ, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (INF, NAN, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (INF, INF, TYPE, COMPARE);\t\t\t\\\n+  } while (0)\n+\n+void\n+check_long_double (void)\n+{\n+  ALL_CHECKS (0.0l, -0.0l, __builtin_nanl(\"\"), __builtin_infl(), long double, comparecl);\n+}"}]}