{"sha": "887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg3YThiZDlmYTM5ZGMyYmI5NmNlNDc5YTBjMWI1YjEzZDg4YzY1NA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-05-08T02:36:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-05-08T02:36:19Z"}, "message": "h8300.c: Include obstack.h.\n\n        * h8300/h8300.c: Include obstack.h.\n        (bit_memory_operand): New function.\n        (print_operand): Append \":16\" to a memory reference to\n        the tiny data area.\n        (h8300_tiny_data_p): New function.\n        (h8300_valid_machine_decl_attribute): Accept \"tiny_data\".  Fix\n        typo.\n        (h8300_encode_label): New function.\n        (h8300_adjust_insn_length): References to the tiny data section\n        are two bytes shorter than normal accesses on the H8/300H.\n        * h8300/h8300.h (OK_FOR_U): Fix thinko.\n        (ENCODE_SECTION_INFO): Encode info for tiny data variables.\n        (STRIP_NAME_ENCODING): Define.\n        * h8300/h8300.md (movqi insn): Fix length for a constant load.\n        (movstrictqi): Likewise.\n        (movhi, movstricthi): Likewise.\n        (memory btst patterns): Add register to the constraints to keep\n        reload happy.\n\nFrom-SVN: r11955", "tree": {"sha": "5c3671694562fc8e5bb0d77d3fb8e37a8ac6099f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c3671694562fc8e5bb0d77d3fb8e37a8ac6099f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654", "html_url": "https://github.com/Rust-GCC/gccrs/commit/887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654/comments", "author": null, "committer": null, "parents": [{"sha": "3fb9e749791211cb3df74e5ae929579a29bb6861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb9e749791211cb3df74e5ae929579a29bb6861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb9e749791211cb3df74e5ae929579a29bb6861"}], "stats": {"total": 147, "additions": 116, "deletions": 31}, "files": [{"sha": "f086cafaaecbb6f6a7d9919b50f0b6ea42602a35", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 73, "deletions": 3, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654", "patch": "@@ -35,6 +35,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"expr.h\"\n #include \"tree.h\"\n+#include \"obstack.h\"\n \n /* Forward declarations.  */\n void print_operand_address ();\n@@ -615,6 +616,15 @@ bit_operand (op, mode)\n     }\n }\n \n+int\n+bit_memory_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return (GET_CODE (op) == MEM\n+\t  && EXTRA_CONSTRAINT (op, 'U'));\n+}\n+\n /* Recognize valid operators for bit test.  */\n \n int\n@@ -1193,6 +1203,9 @@ print_operand (file, x, code)\n \t      && GET_CODE (XEXP (x, 0)) == SYMBOL_REF\n \t      && SYMBOL_REF_FLAG (XEXP (x, 0)))\n \t    fprintf (file, \":8\");\n+\t  if (GET_CODE (XEXP (x, 0)) == SYMBOL_REF\n+\t      && TINY_DATA_NAME_P (XSTR (XEXP (x, 0), 0)))\n+\t    fprintf (file, \":16\");\n \t  break;\n \n \tcase CONST_INT:\n@@ -2188,7 +2201,7 @@ h8300_funcvec_function_p (func)\n   return a != NULL_TREE;\n }\n \n-/* Return nonzero if DECL is a variable that's in the tiny\n+/* Return nonzero if DECL is a variable that's in the eight bit\n    data area.  */\n \n int\n@@ -2204,6 +2217,22 @@ h8300_eightbit_data_p (decl)\n   return a != NULL_TREE;\n }\n \n+/* Return nonzero if DECL is a variable that's in the tiny\n+   data area.  */\n+\n+int\n+h8300_tiny_data_p (decl)\n+     tree decl;\n+{\n+  tree a;\n+\n+  if (TREE_CODE (decl) != VAR_DECL)\n+    return 0;\n+\n+  a = lookup_attribute (\"tiny_data\", DECL_MACHINE_ATTRIBUTES (decl));\n+  return a != NULL_TREE;\n+}\n+\n /* Return nonzero if ATTR is a valid attribute for DECL.\n    ATTRIBUTES are any existing attributes and ARGS are the arguments\n    supplied with ATTR.\n@@ -2214,7 +2243,13 @@ h8300_eightbit_data_p (decl)\n    interrupt handler.\n \n    function_vector: This function should be called through the\n-   function vector.  */\n+   function vector.\n+\n+   eightbit_data: This variable lives in the 8-bit data area and can\n+   be referenced with 8-bit absolute memory addresses.\n+\n+   tiny_data: This variable lives in the tiny data area and can be\n+   referenced with 16-bit absolute memory references.  */\n \n int\n h8300_valid_machine_decl_attribute (decl, attributes, attr, args)\n@@ -2238,13 +2273,41 @@ h8300_valid_machine_decl_attribute (decl, attributes, attr, args)\n \t  warning (\"Only initialized variables can be placed into the 8-bit area.\");\n \t  return 0;\n \t}\n-      DECL_SECTION_NAME (decl) = build_string (8, \".eight\");\n+      DECL_SECTION_NAME (decl) = build_string (7, \".eight\");\n+      return 1;\n+    }\n+\n+  if (is_attribute_p (\"tiny_data\", attr)\n+      && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n+    {\n+      if (DECL_INITIAL (decl) == NULL_TREE)\n+\t{\n+\t  warning (\"Only initialized variables can be placed into the 8-bit area.\");\n+\t  return 0;\n+\t}\n+      DECL_SECTION_NAME (decl) = build_string (6, \".tiny\");\n       return 1;\n     }\n       \n   return 0;\n }\n \n+extern struct obstack *saveable_obstack;\n+\n+h8300_encode_label (decl)\n+     tree decl;\n+{\n+  char *str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+  int len = strlen (str);\n+  char *newstr;\n+\n+  newstr = obstack_alloc (saveable_obstack, len + 2);\n+\n+  strcpy (newstr + 1, str);\n+  *newstr = '*';\n+  XSTR (XEXP (DECL_RTL (decl), 0), 0) = newstr;\n+}\n+\n char *\n output_simode_bld (bild, log2, operands)\n      int bild;\n@@ -2316,6 +2379,13 @@ h8300_adjust_insn_length (insn, length)\n \t  && INTVAL (XEXP (addr, 1)) > -32768\n \t  && INTVAL (XEXP (addr, 1)) < 32767)\n \treturn -4;\n+\n+      /* On the H8/300H, abs:16 is two bytes shorter than the\n+\t more general abs:24.  */\n+      if (TARGET_H8300H\n+\t  && GET_CODE (addr) == SYMBOL_REF\n+\t  && TINY_DATA_NAME_P (XSTR (addr, 0)))\n+\treturn -2;\n     }\n \n   /* Loading some constants needs adjustment.  */"}, {"sha": "3020fbe57fc91b19cb42501b80a0b90c283d90f8", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654", "patch": "@@ -150,7 +150,7 @@ do {\t\t\t\t\\\n /* Define this if most significant word of a multiword number is lowest\n    numbered.  \n    This is true on an H8/300 (actually we can make it up, but we choose to\n-   be consistent.  */ \n+   be consistent).  */ \n #define WORDS_BIG_ENDIAN 1\n \n /* Number of bits in an addressable storage unit */\n@@ -784,8 +784,7 @@ struct rtx_def *function_arg();\n \n /* Extra constraints - 'U' if for an operand valid for a bset\n    destination; i.e. a register, register indirect, or the\n-   eightbit memory region (a SYMBOL_REF with the SYMBOL_REF_FLAG\n-   set.  */\n+   eightbit memory region (a SYMBOL_REF with an SYMBOL_REF_FLAG set).  */\n #define OK_FOR_U(OP) \\\n   ((GET_CODE (OP) == REG && REG_OK_FOR_BASE_P (OP)) \\\n    || (GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == REG \\\n@@ -795,7 +794,7 @@ struct rtx_def *function_arg();\n    || (GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) == CONST \\\n        && GET_CODE (XEXP (XEXP (OP, 0), 0)) == PLUS \\\n        && GET_CODE (XEXP (XEXP (XEXP (OP, 0), 0), 0)) == SYMBOL_REF \\\n-       && SYMBOL_REF_FLAG (XEXP (XEXP (XEXP (OP, 0), 0), 0)) \\\n+       && SYMBOL_REF_FLAG (XEXP (XEXP (OP, 0), 0)) \\\n        && GET_CODE (XEXP (XEXP (XEXP (OP, 0), 0), 1)) == CONST_INT))\n  \n #define EXTRA_CONSTRAINT(OP, C) \\\n@@ -1106,16 +1105,28 @@ readonly_data() \t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\\\n }\t\t\t\t\t\t \n \n+#define TINY_DATA_NAME_P(NAME) (*(NAME) == '*')\n+\n /* If we are referencing a function that is supposed to be called\n    through the function vector, the SYMBOL_REF_FLAG in the rtl\n    so the call patterns can generate the correct code.  */\n #define ENCODE_SECTION_INFO(DECL)  \\\n-  if ((TREE_CODE (DECL) == FUNCTION_DECL \\\n+  if (TREE_CODE (DECL) == FUNCTION_DECL \\\n        && h8300_funcvec_function_p (DECL)) \\\n-      || ((TREE_STATIC (DECL) || DECL_EXTERNAL (DECL)) \\\n-\t  && TREE_CODE (DECL) == VAR_DECL \\\n-\t  && h8300_eightbit_data_p (DECL))) \\\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1; \\\n+  else if ((TREE_STATIC (DECL) || DECL_EXTERNAL (DECL)) \\\n+      && TREE_CODE (DECL) == VAR_DECL \\\n+      && h8300_eightbit_data_p (DECL)) \\\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1; \\\n+  else if ((TREE_STATIC (DECL) || DECL_EXTERNAL (DECL)) \\\n+      && TREE_CODE (DECL) == VAR_DECL \\\n+      && h8300_tiny_data_p (DECL)) \\\n+    h8300_encode_label (DECL);\n+\n+/* Store the user-specified part of SYMBOL_NAME in VAR.\n+   This is sort of inverse to ENCODE_SECTION_INFO.  */\n+#define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME) \\\n+  (VAR) = (SYMBOL_NAME) + ((SYMBOL_NAME)[0] == '*' || (SYMBOL_NAME)[0] == '@');\n \n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */"}, {"sha": "f714b84317d756357768aa62957a4197fa08a9b1", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=887a8bd9fa39dc2bb96ce479a0c1b5b13d88c654", "patch": "@@ -116,21 +116,22 @@\n    (set_attr \"cc\" \"set\")])\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r,<,r,o\")\n-\t(match_operand:QI 1 \"general_operand_src\" \"I,r>,r,io,r\"))]\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r,<,r,r,o\")\n+\t(match_operand:QI 1 \"general_operand_src\" \"I,r>,r,i,o,r\"))]\n   \"register_operand (operands[0],QImode)\n    || register_operand (operands[1], QImode)\"\n   \"@\n    sub.b\t%X0,%X0\n    mov.b\t%R1,%X0\n    mov.b\t%X1,%R0\n    mov.b\t%R1,%X0\n+   mov.b\t%R1,%X0\n    mov.b\t%X1,%R0\"\n   [(set_attr_alternative \"length\"\n-     [(const_int 2) (const_int 2) (const_int 2)\n+     [(const_int 2) (const_int 2) (const_int 2) (const_int 2)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n-   (set_attr \"cc\" \"set_zn_c0,set,set,set,set\")])\n+   (set_attr \"cc\" \"set_zn_c0,set,set,set,set,set\")])\n \n (define_expand \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand_dst\" \"\")\n@@ -147,17 +148,18 @@\n }\")\n \n (define_insn \"movstrictqi\"\n-  [(set (strict_low_part (match_operand:QI 0 \"general_operand_dst\" \"=r,r,r\"))\n-\t\t\t (match_operand:QI 1 \"general_operand_src\" \"I,r,io\"))]\n+  [(set (strict_low_part (match_operand:QI 0 \"general_operand_dst\" \"=r,r,r,r\"))\n+\t\t\t (match_operand:QI 1 \"general_operand_src\" \"I,r,i,o\"))]\n   \"\"\n   \"@\n    sub.b\t%X0,%X0\n    mov.b\t%X1,%X0\n+   mov.b\t%R1,%X0\n    mov.b\t%R1,%X0\"\n   [(set_attr_alternative \"length\"\n-     [(const_int 2) (const_int 2)\n+     [(const_int 2) (const_int 2) (const_int 2)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n-   (set_attr \"cc\" \"set_zn_c0,set,set\")])\n+   (set_attr \"cc\" \"set_zn_c0,set,set,set\")])\n    \n ;; movhi\n \n@@ -178,21 +180,22 @@\n    (set_attr \"cc\" \"set\")])\n \n (define_insn \"\"\n-  [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,<,r,o\")\n-\t(match_operand:HI 1 \"general_operand_src\" \"I,r>,r,io,r\"))]\n+  [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,<,r,r,o\")\n+\t(match_operand:HI 1 \"general_operand_src\" \"I,r>,r,i,o,r\"))]\n   \"register_operand (operands[0],HImode)\n    || register_operand (operands[1], HImode)\"\n   \"@\n    sub.w\t%T0,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n+   mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\"\n   [(set_attr_alternative \"length\"\n-     [(const_int 2) (const_int 2) (const_int 2)\n+     [(const_int 2) (const_int 2) (const_int 2) (const_int 4)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n-   (set_attr \"cc\" \"set_zn_c0,set,set,set,set\")])\n+   (set_attr \"cc\" \"set_zn_c0,set,set,set,set,set\")])\n \n (define_expand \"movhi\"\n   [(set (match_operand:HI 0 \"general_operand_dst\" \"\")\n@@ -209,17 +212,18 @@\n }\")\n \n (define_insn \"movstricthi\"\n-  [(set (strict_low_part (match_operand:HI 0 \"general_operand_dst\" \"=r,r,r\"))\n-\t\t\t (match_operand:HI 1 \"general_operand_src\" \"I,r,io\"))]\n+  [(set (strict_low_part (match_operand:HI 0 \"general_operand_dst\" \"=r,r,r,r\"))\n+\t\t\t (match_operand:HI 1 \"general_operand_src\" \"I,r,i,o\"))]\n   \"\"\n   \"@\n    sub.w\t%T0,%T0\n    mov.w\t%T1,%T0\n+   mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\"\n   [(set_attr_alternative \"length\"\n-     [(const_int 2) (const_int 2)\n+     [(const_int 2) (const_int 2) (const_int 4)\n       (if_then_else (eq_attr \"cpu\" \"h8300\") (const_int 4) (const_int 8))])\n-   (set_attr \"cc\" \"set_zn_c0,set,set\")])\n+   (set_attr \"cc\" \"set_zn_c0,set,set,set\")])\n \n ;; movsi\n \n@@ -453,7 +457,7 @@\n ;; ----------------------------------------------------------------------\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract:QI (match_operand:QI 0 \"memory_operand\" \"U\")\n+  [(set (cc0) (zero_extract:QI (match_operand:QI 0 \"bit_memory_operand\" \"rU\")\n \t\t\t       (const_int 1)\n \t\t\t       (match_operand:QI 1 \"const_int_operand\" \"n\")))]\n   \"\"\n@@ -462,7 +466,7 @@\n    (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract:HI (match_operand:QI 0 \"memory_operand\" \"U\")\n+  [(set (cc0) (zero_extract:HI (match_operand:QI 0 \"bit_memory_operand\" \"rU\")\n \t\t\t       (const_int 1)\n \t\t\t       (match_operand:QI 1 \"const_int_operand\" \"n\")))]\n   \"\"\n@@ -471,7 +475,7 @@\n    (set_attr \"cc\" \"set_zn_c0\")])\n \n (define_insn \"\"\n-  [(set (cc0) (zero_extract:SI (match_operand:QI 0 \"memory_operand\" \"U\")\n+  [(set (cc0) (zero_extract:SI (match_operand:QI 0 \"bit_memory_operand\" \"rU\")\n \t\t\t       (const_int 1)\n \t\t\t       (match_operand:QI 1 \"const_int_operand\" \"n\")))]\n   \"\""}]}