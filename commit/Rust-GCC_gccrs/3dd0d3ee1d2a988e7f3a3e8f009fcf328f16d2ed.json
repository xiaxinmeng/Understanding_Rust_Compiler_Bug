{"sha": "3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RkMGQzZWUxZDJhOTg4ZTdmM2EzZThmMDA5ZmNmMzI4ZjE2ZDJlZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-07T16:47:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-01-11T16:12:48Z"}, "message": "c++, abi: Fix abi_tag attribute handling [PR98481]\n\nIn GCC10 cp_walk_subtrees has been changed to walk template arguments.\nAs the following testcase, that changed the mangling of some functions.\nI believe the previous behavior that find_abi_tags_r doesn't recurse into\ntemplate args has been the correct one, but setting *walk_subtrees = 0\nfor the types and handling the types subtree walking manually in\nfind_abi_tags_r looks too hard, there are a lot of subtrees and details what\nshould and shouldn't be walked, both in tree.c (walk_type_fields there,\nwhich is static) and in cp_walk_subtrees itself.\n\nThe following patch abuses the fact that *walk_subtrees is an int to\ntell cp_walk_subtrees it shouldn't walk the template args.\n\nCo-authored-by: Jason Merrill <jason@redhat.com>\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98481\n\t* class.c (find_abi_tags_r): Set *walk_subtrees to 2 instead of 1\n\tfor types.\n\t(mark_abi_tags_r): Likewise.\n\t* decl2.c (min_vis_r): Likewise.\n\t* tree.c (cp_walk_subtrees): If *walk_subtrees_p is 2, look through\n\ttypedefs.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98481\n\t* g++.dg/abi/abi-tag24.C: New test.", "tree": {"sha": "9dfb8f62a37b9b2871383eb8efa1268dfb2851a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dfb8f62a37b9b2871383eb8efa1268dfb2851a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c09b788a96ddf63b282a8f92c02ad23535c912f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c09b788a96ddf63b282a8f92c02ad23535c912f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c09b788a96ddf63b282a8f92c02ad23535c912f"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "00c0dba0a554f9e5f370bacfa06fc3e73c88e8c5", "filename": "gcc/cp/class.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed", "patch": "@@ -1507,6 +1507,10 @@ mark_or_check_tags (tree t, tree *tp, abi_tag_data *p, bool val)\n static tree\n find_abi_tags_r (tree *tp, int *walk_subtrees, void *data)\n {\n+  if (TYPE_P (*tp) && *walk_subtrees == 1)\n+    /* Tell cp_walk_subtrees to look though typedefs.  */\n+    *walk_subtrees = 2;\n+\n   if (!OVERLOAD_TYPE_P (*tp))\n     return NULL_TREE;\n \n@@ -1527,6 +1531,10 @@ find_abi_tags_r (tree *tp, int *walk_subtrees, void *data)\n static tree\n mark_abi_tags_r (tree *tp, int *walk_subtrees, void *data)\n {\n+  if (TYPE_P (*tp) && *walk_subtrees == 1)\n+    /* Tell cp_walk_subtrees to look though typedefs.  */\n+    *walk_subtrees = 2;\n+\n   if (!OVERLOAD_TYPE_P (*tp))\n     return NULL_TREE;\n "}, {"sha": "b087753cfba51ae89fa3a292545b005eafd054b6", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed", "patch": "@@ -2358,9 +2358,6 @@ min_vis_r (tree *tp, int *walk_subtrees, void *data)\n   int this_vis = VISIBILITY_DEFAULT;\n   if (! TYPE_P (*tp))\n     *walk_subtrees = 0;\n-  else if (typedef_variant_p (*tp))\n-    /* Look through typedefs despite cp_walk_subtrees.  */\n-    this_vis = type_visibility (DECL_ORIGINAL_TYPE (TYPE_NAME (*tp)));\n   else if (OVERLOAD_TYPE_P (*tp)\n \t   && !TREE_PUBLIC (TYPE_MAIN_DECL (*tp)))\n     {\n@@ -2379,6 +2376,10 @@ min_vis_r (tree *tp, int *walk_subtrees, void *data)\n   if (this_vis > *vis_p)\n     *vis_p = this_vis;\n \n+  /* Tell cp_walk_subtrees to look through typedefs.  */\n+  if (*walk_subtrees == 1)\n+    *walk_subtrees = 2;\n+\n   return NULL;\n }\n "}, {"sha": "c536eb581a768fab25272b14450e999f7cec87a1", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed", "patch": "@@ -5146,16 +5146,26 @@ cp_walk_subtrees (tree *tp, int *walk_subtrees_p, walk_tree_fn func,\n \n   if (TYPE_P (*tp))\n     {\n-      /* Walk into template args without looking through typedefs.  */\n-      if (tree ti = TYPE_TEMPLATE_INFO_MAYBE_ALIAS (*tp))\n-\tWALK_SUBTREE (TI_ARGS (ti));\n-      /* Don't look through typedefs; walk_tree_fns that want to look through\n-\t typedefs (like min_vis_r) need to do that themselves.  */\n-      if (typedef_variant_p (*tp))\n+      /* If *WALK_SUBTREES_P is 1, we're interested in the syntactic form of\n+\t the argument, so don't look through typedefs, but do walk into\n+\t template arguments for alias templates (and non-typedefed classes).\n+\n+\t If *WALK_SUBTREES_P > 1, we're interested in type identity or\n+\t equivalence, so look through typedefs, ignoring template arguments for\n+\t alias templates, and walk into template args of classes.\n+\n+\t See find_abi_tags_r for an example of setting *WALK_SUBTREES_P to 2\n+\t when that's the behavior the walk_tree_fn wants.  */\n+      if (*walk_subtrees_p == 1 && typedef_variant_p (*tp))\n \t{\n+\t  if (tree ti = TYPE_ALIAS_TEMPLATE_INFO (*tp))\n+\t    WALK_SUBTREE (TI_ARGS (ti));\n \t  *walk_subtrees_p = 0;\n \t  return NULL_TREE;\n \t}\n+\n+      if (tree ti = TYPE_TEMPLATE_INFO (*tp))\n+\tWALK_SUBTREE (TI_ARGS (ti));\n     }\n \n   /* Not one of the easy cases.  We must explicitly go through the"}, {"sha": "c758544b0908695d84d72f1dc2488b55a005fb4d", "filename": "gcc/testsuite/g++.dg/abi/abi-tag24.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag24.C?ref=3dd0d3ee1d2a988e7f3a3e8f009fcf328f16d2ed", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/98481\n+// { dg-do compile { target c++11 } }\n+inline namespace N __attribute ((__abi_tag__ (\"myabi\")))\n+{\n+  struct A {};\n+}\n+template <typename T>\n+struct B { typedef int size_type; };\n+struct S1 { B<A>::size_type foo () const { return 1; } };\n+struct S2 { B<A>::size_type foo () const; };\n+int S2::foo () const { return 2; }\n+int (S1::*f1) () const = &S1::foo;\n+int (S2::*f2) () const = &S2::foo;\n+\n+// { dg-final { scan-assembler \"_ZNK2S13fooEv\" } }\n+// { dg-final { scan-assembler \"_ZNK2S23fooEv\" } }\n+// { dg-final { scan-assembler-not \"_ZNK2S13fooB5myabiEv\" } }"}]}