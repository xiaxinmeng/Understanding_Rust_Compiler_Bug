{"sha": "7862d4962909c8cb237c55a00ab86dbf8e56e40a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2MmQ0OTYyOTA5YzhjYjIzN2M1NWEwMGFiODZkYmY4ZTU2ZTQwYQ==", "commit": {"author": {"name": "Dan Witte", "email": "dwitte@mozilla.com", "date": "2010-08-06T20:05:33Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2010-08-06T20:05:33Z"}, "message": "Remove warnings\n\nFrom-SVN: r162959", "tree": {"sha": "bcac03c9a446a168dc61fe2dcfd71bbb9e5677ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcac03c9a446a168dc61fe2dcfd71bbb9e5677ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7862d4962909c8cb237c55a00ab86dbf8e56e40a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7862d4962909c8cb237c55a00ab86dbf8e56e40a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7862d4962909c8cb237c55a00ab86dbf8e56e40a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7862d4962909c8cb237c55a00ab86dbf8e56e40a/comments", "author": null, "committer": null, "parents": [{"sha": "833bb7dfad9a511ddeddcd77c9264d3ad24926ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833bb7dfad9a511ddeddcd77c9264d3ad24926ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833bb7dfad9a511ddeddcd77c9264d3ad24926ef"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "981e5ccdc4767e7e13aa06f01103ccd77afaad36", "filename": "libffi/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7862d4962909c8cb237c55a00ab86dbf8e56e40a/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7862d4962909c8cb237c55a00ab86dbf8e56e40a/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=7862d4962909c8cb237c55a00ab86dbf8e56e40a", "patch": "@@ -36,6 +36,13 @@\n \t* configure.ac: Ditto.\n \t* configure: Rebuilt.\n \n+2010-04-13  Dan Witte  <dwitte@mozilla.com>\n+\n+\t* msvcc.sh: Build with -W3 instead of -Wall.\n+\t* src/powerpc/ffi_darwin.c: Remove build warnings.\n+\t* src/x86/ffi.c: Ditto.\n+\t* src/x86/ffitarget.h: Ditto.\n+\n 2010-04-12  Dan Witte  <dwitte@mozilla.com>\n \t    Walter Meinl <wuno@lsvw.de>\n "}, {"sha": "551c73d96559da08e3f96db8da868799b9b7d029", "filename": "libffi/msvcc.sh", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7862d4962909c8cb237c55a00ab86dbf8e56e40a/libffi%2Fmsvcc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7862d4962909c8cb237c55a00ab86dbf8e56e40a/libffi%2Fmsvcc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fmsvcc.sh?ref=7862d4962909c8cb237c55a00ab86dbf8e56e40a", "patch": "@@ -42,7 +42,7 @@\n # format and translated into something sensible for cl or ml.\n #\n \n-args=\"-nologo -W3\"\n+args=\"-nologo\"\n md=-MD\n cl=\"cl\"\n ml=\"ml\"\n@@ -108,7 +108,8 @@ do\n       shift 1\n     ;;\n     -Wall)\n-      args=\"$args -Wall\"\n+      # -Wall on MSVC is overzealous. Use -W3 instead.\n+      args=\"$args -W3\"\n       shift 1\n     ;;\n     -Werror)"}, {"sha": "82265e832b4680677db895f1f3454149eab0e0fb", "filename": "libffi/src/powerpc/ffi_darwin.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7862d4962909c8cb237c55a00ab86dbf8e56e40a/libffi%2Fsrc%2Fpowerpc%2Fffi_darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7862d4962909c8cb237c55a00ab86dbf8e56e40a/libffi%2Fsrc%2Fpowerpc%2Fffi_darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Fffi_darwin.c?ref=7862d4962909c8cb237c55a00ab86dbf8e56e40a", "patch": "@@ -344,7 +344,7 @@ ffi_status\n ffi_prep_cif_machdep (ffi_cif *cif)\n {\n   /* All this is for the DARWIN ABI.  */\n-  int i;\n+  unsigned i;\n   ffi_type **ptr;\n   unsigned bytes;\n   int fparg_count = 0, intarg_count = 0;\n@@ -542,11 +542,11 @@ ffi_call (ffi_cif *cif, void (*fn)(void), void *rvalue, void **avalue)\n     {\n     case FFI_AIX:\n       ffi_call_AIX(&ecif, -(long)cif->bytes, cif->flags, ecif.rvalue, fn,\n-\t\t   ffi_prep_args);\n+\t\t   FFI_FN(ffi_prep_args));\n       break;\n     case FFI_DARWIN:\n       ffi_call_DARWIN(&ecif, -(long)cif->bytes, cif->flags, ecif.rvalue, fn,\n-\t\t      ffi_prep_args);\n+\t\t      FFI_FN(ffi_prep_args));\n       break;\n     default:\n       FFI_ASSERT(0);\n@@ -799,9 +799,9 @@ ffi_closure_helper_DARWIN (ffi_closure *closure, void *rvalue,\n \t  if (arg_types[i]->elements[0]->type == FFI_TYPE_DOUBLE)\n \t    size_al = ALIGN (arg_types[i]->size, 8);\n \t  if (size_al < 3 && cif->abi == FFI_DARWIN)\n-\t    avalue[i] = (void *) pgr + 8 - size_al;\n+\t    avalue[i] = (char *) pgr + 8 - size_al;\n \t  else\n-\t    avalue[i] = (void *) pgr;\n+\t    avalue[i] = pgr;\n \t  pgr += (size_al + 7) / 8;\n #else\n \t  /* Structures that match the basic modes (QI 1 byte, HI 2 bytes,\n@@ -812,9 +812,9 @@ ffi_closure_helper_DARWIN (ffi_closure *closure, void *rvalue,\n \t  if (arg_types[i]->elements[0]->type == FFI_TYPE_DOUBLE)\n \t    size_al = ALIGN(arg_types[i]->size, 8);\n \t  if (size_al < 3 && cif->abi == FFI_DARWIN)\n-\t    avalue[i] = (void*) pgr + 4 - size_al;\n+\t    avalue[i] = (char*) pgr + 4 - size_al;\n \t  else\n-\t    avalue[i] = (void*) pgr;\n+\t    avalue[i] = pgr;\n \t  pgr += (size_al + 3) / 4;\n #endif\n \t  break;"}, {"sha": "69a4dcddeaa8a2fa24d10e79a184fca19176b53f", "filename": "libffi/src/x86/ffi.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7862d4962909c8cb237c55a00ab86dbf8e56e40a/libffi%2Fsrc%2Fx86%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7862d4962909c8cb237c55a00ab86dbf8e56e40a/libffi%2Fsrc%2Fx86%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi.c?ref=7862d4962909c8cb237c55a00ab86dbf8e56e40a", "patch": "@@ -209,7 +209,7 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n #endif\n         {\n           cif->flags = FFI_TYPE_STRUCT;\n-          // allocate space for return value pointer\n+          /* allocate space for return value pointer */\n           cif->bytes += ALIGN(sizeof(void*), FFI_SIZEOF_ARG);\n         }\n       break;\n@@ -234,7 +234,7 @@ ffi_status ffi_prep_cif_machdep(ffi_cif *cif)\n     }\n \n #ifdef X86_WIN64\n-  // ensure space for storing four registers\n+  /* ensure space for storing four registers */\n   cif->bytes += 4 * sizeof(ffi_arg);\n #endif\n \n@@ -292,8 +292,8 @@ void ffi_call(ffi_cif *cif, void (*fn)(void), void *rvalue, void **avalue)\n #ifdef X86_WIN64\n     case FFI_WIN64:\n       {\n-        // Make copies of all struct arguments\n-        // NOTE: not sure if responsibility should be here or in caller\n+        /* Make copies of all struct arguments\n+           NOTE: not sure if responsibility should be here or in caller */\n         unsigned int i;\n         for (i=0; i < cif->nargs;i++) {\n           size_t size = cif->arg_types[i]->size;"}, {"sha": "b85016cc01b2f1c51be46ea3d6e3745d140e403d", "filename": "libffi/src/x86/ffitarget.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7862d4962909c8cb237c55a00ab86dbf8e56e40a/libffi%2Fsrc%2Fx86%2Fffitarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7862d4962909c8cb237c55a00ab86dbf8e56e40a/libffi%2Fsrc%2Fx86%2Fffitarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffitarget.h?ref=7862d4962909c8cb237c55a00ab86dbf8e56e40a", "patch": "@@ -38,7 +38,7 @@\n \n #ifdef X86_WIN64\n #define FFI_SIZEOF_ARG 8\n-#define USE_BUILTIN_FFS 0 // not yet implemented in mingw-64 \n+#define USE_BUILTIN_FFS 0 /* not yet implemented in mingw-64 */\n #endif\n \n /* ---- Generic type definitions ----------------------------------------- */"}]}