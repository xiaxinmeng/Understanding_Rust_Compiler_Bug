{"sha": "1e4a8c782e5574ed5ee0ea24d869a118a441bf0a", "node_id": "C_kwDOANBUbNoAKDFlNGE4Yzc4MmU1NTc0ZWQ1ZWUwZWEyNGQ4NjlhMTE4YTQ0MWJmMGE", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2022-08-03T21:52:31Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2022-08-03T21:52:31Z"}, "message": "Do not enable -mblock-ops-vector-pair.\n\nTesting has shown that using the load vector pair and store vector pair\ninstructions for block moves has some performance issues on power10.\n\nA patch on June 11th modified the code so that GCC would not set\n-mblock-ops-vector-pair by default if we are tuning for power10, but it would\nset the option if we were tuning for a different machine and have load and store\nvector pair instructions enabled.\n\nThis patch eliminates the code setting -mblock-ops-vector-pair.  If you want to\ngenerate load vector pair and store vector pair instructions for block moves,\nyou must use -mblock-ops-vector-pair.\n\n2022-08-03   Michael Meissner  <meissner@linux.ibm.com>\n\ngcc/\n\n\t* config/rs6000/rs6000.cc (rs6000_option_override_internal): Remove code\n\tsetting -mblock-ops-vector-pair.", "tree": {"sha": "ca8eeb2880c8dd16334e866c7cc758dbf2ef2a6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca8eeb2880c8dd16334e866c7cc758dbf2ef2a6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e4a8c782e5574ed5ee0ea24d869a118a441bf0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4a8c782e5574ed5ee0ea24d869a118a441bf0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e4a8c782e5574ed5ee0ea24d869a118a441bf0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4a8c782e5574ed5ee0ea24d869a118a441bf0a/comments", "author": null, "committer": null, "parents": [{"sha": "19ffb35d17474bb4dd3eb78963c28d10b5362321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ffb35d17474bb4dd3eb78963c28d10b5362321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ffb35d17474bb4dd3eb78963c28d10b5362321"}], "stats": {"total": 11, "additions": 0, "deletions": 11}, "files": [{"sha": "df491bee2ea7bc42896e54803ce7503ece5d74a8", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e4a8c782e5574ed5ee0ea24d869a118a441bf0a/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e4a8c782e5574ed5ee0ea24d869a118a441bf0a/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=1e4a8c782e5574ed5ee0ea24d869a118a441bf0a", "patch": "@@ -4094,17 +4094,6 @@ rs6000_option_override_internal (bool global_init_p)\n \trs6000_isa_flags &= ~OPTION_MASK_BLOCK_OPS_UNALIGNED_VSX;\n     }\n \n-  if (!(rs6000_isa_flags_explicit & OPTION_MASK_BLOCK_OPS_VECTOR_PAIR))\n-    {\n-      /* Do not generate lxvp and stxvp on power10 since there are some\n-\t performance issues.  */\n-      if (TARGET_MMA && TARGET_EFFICIENT_UNALIGNED_VSX\n-\t  && rs6000_tune != PROCESSOR_POWER10)\n-\trs6000_isa_flags |= OPTION_MASK_BLOCK_OPS_VECTOR_PAIR;\n-      else\n-\trs6000_isa_flags &= ~OPTION_MASK_BLOCK_OPS_VECTOR_PAIR;\n-    }\n-\n   /* Use long double size to select the appropriate long double.  We use\n      TYPE_PRECISION to differentiate the 3 different long double types.  We map\n      128 into the precision used for TFmode.  */"}]}