{"sha": "63645982e7f5d9d95f152052431db81c2f119a15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM2NDU5ODJlN2Y1ZDlkOTVmMTUyMDUyNDMxZGI4MWMyZjExOWExNQ==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-05-27T12:35:12Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-05-27T12:35:12Z"}, "message": "gfortran.h (gfc_current_locus, [...]): Remove.\n\n* gfortran.h (gfc_current_locus, gfc_set_locus): Remove.\n(gfc_current_locus): Declare new global variable.\n* scanner.c (gfc_current_locus, gfc_set_locus): Remove.\n(gfc_current_locus1): Rename ...\n(gfc_current_locus): ... to this.\n(gfc_at_eof, gfc_at_bol, gfc_at_eol, gfc_advance_line, next_char,\nskip_fixed_comments, skip_free_comments, gfc_next_char_literal,\ngfc_peek_char, gfc_gobble_whitespace, gfc_new_file): Use\ngfc_current_locus instead of gfc_current_locus1, gfc_set_locus()\nand gfc_current_locus(), respectively.\n* array.c (match_subscript, gfc_match_array_ref, match_array_list,\nmatch_array_cons_element, gfc_match_array_constructor):\nRead/modify gfc_current_locus instead of calling gfc_set_locus()\nand gfc_current_locus().\n* decl.c (gfc_match_null, variable_decl, gfc_match_kind_spec,\nmatch_attr_spec, gfc_match_function_decl, gfc_match_end,\nattr_decl1, gfc_match_save): Likewise.\n* error.c (error_print, gfc_internal_error): Likewise.\n* expr.c (gfc_int_expr, gfc_default_logical_kind): Likewise.\n* interface.c (gfc_add_interface): Likewise.\n* io.c (gfc_match_format, match_dt_format, match_dt_element,\nmatch_io_iterator, match_io): Likewise.\n* match.c (gfc_match_space, gfc_match_eos,\ngfc_match_small_literal_int, gfc_match_st_label,\ngfc_match_strings, gfc_match_name, gfc_match_iterator,\ngfc_match_char, gfc_match, gfc_match_assignment,\ngfc_match_pointer_assignment, gfc_match_if, gfc_match_do,\ngfc_match_nullify, gfc_match_call, match_implicit_range,\ngfc_match_implicit, gfc_match_data, match_case_selector,\ngfc_match_case, match_forall_iterator): Likewise.\n* matchexp.c (gfc_match_defined_op_name, next_operator,\nmatch_level_1, match_mult_operand, match_ext_mult_operand,\nmatch_add_operand, match_ext_add_operand, match_level_2,\nmatch_level_3, match_level_4, match_and_operand, match_or_operand,\nmatch_equiv_operand, match_level_5, gfc_match_expr): Likewise.\n* module.c (gfc_match_use, mio_array_ref, mio_expr): Likewise.\n* parse.c (match_word, decode_statement, next_free, next_fixed,\nadd_statement, verify_st_order, parse_if_block, gfc_parse_file):\nLikewise.\n* primary.c (match_digits, match_integer_constant,\nmatch_boz_constant, match_real_constant, match_substring,\nnext_string_char, match_charkind_name, match_string_constant,\nmatch_logical_constant, match_const_complex_part,\nmatch_complex_constant, match_actual_arg, match_keyword_arg,\ngfc_match_actual_arglist, gfc_match_structure_constructor,\ngfc_match_rvalue, gfc_match_variable): Likewise.\n* st.c (gfc_get_code): Likewise.\n* symbol.c (check_conflict, check_used, check_done,\nduplicate_attr, add_flavor, gfc_add_procedure, gfc_add_intent,\ngfc_add_access, gfc_add_explicit_interface, gfc_add_type,\ngfc_add_component, gfc_reference_st_label, gfc_new_symbol): Likewise.\n\nFrom-SVN: r82320", "tree": {"sha": "3c7af6dcd25c3b7df4df9f719eb578e68eb49801", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c7af6dcd25c3b7df4df9f719eb578e68eb49801"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63645982e7f5d9d95f152052431db81c2f119a15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63645982e7f5d9d95f152052431db81c2f119a15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63645982e7f5d9d95f152052431db81c2f119a15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63645982e7f5d9d95f152052431db81c2f119a15/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4171ce18efea96907998485b2a71e3d4f9dde4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4171ce18efea96907998485b2a71e3d4f9dde4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4171ce18efea96907998485b2a71e3d4f9dde4f"}], "stats": {"total": 521, "additions": 275, "deletions": 246}, "files": [{"sha": "69fa1f563c6d773640b82aebbfb4257b6b64e5a5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -1,3 +1,57 @@\n+2004-05-27  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* gfortran.h (gfc_current_locus, gfc_set_locus): Remove.\n+\t(gfc_current_locus): Declare new global variable.\n+\t* scanner.c (gfc_current_locus, gfc_set_locus): Remove.\n+\t(gfc_current_locus1): Rename ...\n+\t(gfc_current_locus): ... to this.\n+\t(gfc_at_eof, gfc_at_bol, gfc_at_eol, gfc_advance_line, next_char,\n+\tskip_fixed_comments, skip_free_comments, gfc_next_char_literal,\n+\tgfc_peek_char, gfc_gobble_whitespace, gfc_new_file): Use\n+\tgfc_current_locus instead of gfc_current_locus1, gfc_set_locus()\n+\tand gfc_current_locus(), respectively.\n+\t* array.c (match_subscript, gfc_match_array_ref, match_array_list,\n+\tmatch_array_cons_element, gfc_match_array_constructor):\n+\tRead/modify gfc_current_locus instead of calling gfc_set_locus()\n+\tand gfc_current_locus().\n+\t* decl.c (gfc_match_null, variable_decl, gfc_match_kind_spec,\n+\tmatch_attr_spec, gfc_match_function_decl, gfc_match_end,\n+\tattr_decl1, gfc_match_save): Likewise.\n+\t* error.c (error_print, gfc_internal_error): Likewise.\n+\t* expr.c (gfc_int_expr, gfc_default_logical_kind): Likewise.\n+\t* interface.c (gfc_add_interface): Likewise.\n+\t* io.c (gfc_match_format, match_dt_format, match_dt_element,\n+\tmatch_io_iterator, match_io): Likewise.\n+\t* match.c (gfc_match_space, gfc_match_eos,\n+\tgfc_match_small_literal_int, gfc_match_st_label,\n+\tgfc_match_strings, gfc_match_name, gfc_match_iterator,\n+\tgfc_match_char, gfc_match, gfc_match_assignment,\n+\tgfc_match_pointer_assignment, gfc_match_if, gfc_match_do,\n+\tgfc_match_nullify, gfc_match_call, match_implicit_range,\n+\tgfc_match_implicit, gfc_match_data, match_case_selector,\n+\tgfc_match_case, match_forall_iterator): Likewise.\n+\t* matchexp.c (gfc_match_defined_op_name, next_operator,\n+\tmatch_level_1, match_mult_operand, match_ext_mult_operand,\n+\tmatch_add_operand, match_ext_add_operand, match_level_2,\n+\tmatch_level_3, match_level_4, match_and_operand, match_or_operand,\n+\tmatch_equiv_operand, match_level_5, gfc_match_expr): Likewise.\n+\t* module.c (gfc_match_use, mio_array_ref, mio_expr): Likewise.\n+\t* parse.c (match_word, decode_statement, next_free, next_fixed,\n+\tadd_statement, verify_st_order, parse_if_block, gfc_parse_file):\n+\tLikewise.\n+\t* primary.c (match_digits, match_integer_constant,\n+\tmatch_boz_constant, match_real_constant, match_substring,\n+\tnext_string_char, match_charkind_name, match_string_constant,\n+\tmatch_logical_constant, match_const_complex_part,\n+\tmatch_complex_constant, match_actual_arg, match_keyword_arg,\n+\tgfc_match_actual_arglist, gfc_match_structure_constructor,\n+\tgfc_match_rvalue, gfc_match_variable): Likewise.\n+\t* st.c (gfc_get_code): Likewise.\n+\t* symbol.c (check_conflict, check_used, check_done,\n+\tduplicate_attr, add_flavor, gfc_add_procedure, gfc_add_intent,\n+\tgfc_add_access, gfc_add_explicit_interface, gfc_add_type,\n+\tgfc_add_component, gfc_reference_st_label, gfc_new_symbol): Likewise.\n+\n 2004-05-26  Roger Sayle  <roger@eyesopen.com>\n \n \t* io.c (format_asterisk): Silence compiler warnings by correcting"}, {"sha": "bfe8aafc9602d8053012417b4b4f43b2d838cffd", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -77,7 +77,7 @@ match_subscript (gfc_array_ref * ar, int init)\n \n   i = ar->dimen;\n \n-  ar->c_where[i] = *gfc_current_locus ();\n+  ar->c_where[i] = gfc_current_locus;\n   ar->start[i] = ar->end[i] = ar->stride[i] = NULL;\n \n   /* We can't be sure of the difference between DIMEN_ELEMENT and\n@@ -143,7 +143,7 @@ gfc_match_array_ref (gfc_array_ref * ar, gfc_array_spec * as, int init)\n \n   memset (ar, '\\0', sizeof (ar));\n \n-  ar->where = *gfc_current_locus ();\n+  ar->where = gfc_current_locus;\n   ar->as = as;\n \n   if (gfc_match_char ('(') != MATCH_YES)\n@@ -743,7 +743,7 @@ match_array_list (gfc_constructor ** result)\n   match m;\n   int n;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   if (gfc_match_char ('(') == MATCH_NO)\n     return MATCH_NO;\n@@ -809,7 +809,7 @@ match_array_list (gfc_constructor ** result)\n   e->value.constructor = head;\n \n   p = gfc_get_constructor ();\n-  p->where = *gfc_current_locus ();\n+  p->where = gfc_current_locus;\n   p->iterator = gfc_get_iterator ();\n   *p->iterator = iter;\n \n@@ -825,7 +825,7 @@ match_array_list (gfc_constructor ** result)\n cleanup:\n   gfc_free_constructor (head);\n   gfc_free_iterator (&iter, 0);\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   return m;\n }\n \n@@ -849,7 +849,7 @@ match_array_cons_element (gfc_constructor ** result)\n     return m;\n \n   p = gfc_get_constructor ();\n-  p->where = *gfc_current_locus ();\n+  p->where = gfc_current_locus;\n   p->expr = expr;\n \n   *result = p;\n@@ -870,7 +870,7 @@ gfc_match_array_constructor (gfc_expr ** result)\n   if (gfc_match (\" (/\") == MATCH_NO)\n     return MATCH_NO;\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n   head = tail = NULL;\n \n   if (gfc_match (\" /)\") == MATCH_YES)"}, {"sha": "69b1cfdb5c363065422257605c8b1b1cca886dc4", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -423,7 +423,7 @@ gfc_match_null (gfc_expr ** result)\n     return MATCH_ERROR;\n \n   e = gfc_get_expr ();\n-  e->where = *gfc_current_locus ();\n+  e->where = gfc_current_locus;\n   e->expr_type = EXPR_NULL;\n   e->ts.type = BT_UNKNOWN;\n \n@@ -459,7 +459,7 @@ variable_decl (void)\n   if (m != MATCH_YES)\n     goto cleanup;\n \n-  var_locus = *gfc_current_locus ();\n+  var_locus = gfc_current_locus;\n \n   /* Now we could see the optional array spec. or character length.  */\n   m = gfc_match_array_spec (&as);\n@@ -659,7 +659,7 @@ gfc_match_kind_spec (gfc_typespec * ts)\n   m = MATCH_NO;\n   e = NULL;\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n \n   if (gfc_match_char ('(') == MATCH_NO)\n     return MATCH_NO;\n@@ -711,7 +711,7 @@ gfc_match_kind_spec (gfc_typespec * ts)\n \n no_match:\n   gfc_free_expr (e);\n-  gfc_set_locus (&where);\n+  gfc_current_locus = where;\n   return m;\n }\n \n@@ -1028,7 +1028,7 @@ match_attr_spec (void)\n   try t;\n \n   gfc_clear_attr (&current_attr);\n-  start = *gfc_current_locus ();\n+  start = gfc_current_locus;\n \n   current_as = NULL;\n   colon_seen = 0;\n@@ -1044,7 +1044,7 @@ match_attr_spec (void)\n \tbreak;\n \n       seen[d]++;\n-      seen_at[d] = *gfc_current_locus ();\n+      seen_at[d] = gfc_current_locus;\n \n       if (d == DECL_DIMENSION)\n \t{\n@@ -1218,7 +1218,7 @@ match_attr_spec (void)\n   return MATCH_YES;\n \n cleanup:\n-  gfc_set_locus (&start);\n+  gfc_current_locus = start;\n   gfc_free_array_spec (current_as);\n   current_as = NULL;\n   return m;\n@@ -1558,18 +1558,18 @@ gfc_match_function_decl (void)\n \n   gfc_clear_ts (&current_ts);\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   m = match_prefix (&current_ts);\n   if (m != MATCH_YES)\n     {\n-      gfc_set_locus (&old_loc);\n+      gfc_current_locus = old_loc;\n       return m;\n     }\n \n   if (gfc_match (\"function% %n\", name) != MATCH_YES)\n     {\n-      gfc_set_locus (&old_loc);\n+      gfc_current_locus = old_loc;\n       return MATCH_NO;\n     }\n \n@@ -1630,7 +1630,7 @@ gfc_match_function_decl (void)\n   return MATCH_YES;\n \n cleanup:\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   return m;\n }\n \n@@ -1790,7 +1790,7 @@ gfc_match_end (gfc_statement * st)\n   const char *target;\n   match m;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n   if (gfc_match (\"end\") != MATCH_YES)\n     return MATCH_NO;\n \n@@ -1943,7 +1943,7 @@ gfc_match_end (gfc_statement * st)\n   gfc_syntax_error (*st);\n \n cleanup:\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   return MATCH_ERROR;\n }\n \n@@ -1971,7 +1971,7 @@ attr_decl1 (void)\n   if (find_special (name, &sym))\n     return MATCH_ERROR;\n \n-  var_locus = *gfc_current_locus ();\n+  var_locus = gfc_current_locus;\n \n   /* Deal with possible array specification for certain attributes.  */\n   if (current_attr.dimension\n@@ -2423,7 +2423,7 @@ gfc_match_save (void)\n       switch (m)\n \t{\n \tcase MATCH_YES:\n-\t  if (gfc_add_save (&sym->attr, gfc_current_locus ()) == FAILURE)\n+\t  if (gfc_add_save (&sym->attr, &gfc_current_locus) == FAILURE)\n \t    return MATCH_ERROR;\n \t  goto next_item;\n "}, {"sha": "aab196fdfdbd7bfac769314cd388832010954e75", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -338,7 +338,7 @@ error_print (const char *type, const char *format0, va_list argp)\n \n \t    case 'C':\n \t      if (c == 'C')\n-\t\tloc = gfc_current_locus ();\n+\t\tloc = &gfc_current_locus;\n \n \t      if (have_l1)\n \t\t{\n@@ -652,7 +652,7 @@ gfc_internal_error (const char *format, ...)\n \n   va_start (argp, format);\n \n-  show_loci (gfc_current_locus (), NULL);\n+  show_loci (&gfc_current_locus, NULL);\n   error_printf (\"Internal Error at (1):\");\n \n   error_print (\"\", format, argp);"}, {"sha": "6abc9244c51a9c4cc5f498c9368cced021948588", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -477,7 +477,7 @@ gfc_int_expr (int i)\n   p->ts.type = BT_INTEGER;\n   p->ts.kind = gfc_default_integer_kind ();\n \n-  p->where = *gfc_current_locus ();\n+  p->where = gfc_current_locus;\n   mpz_init_set_si (p->value.integer, i);\n \n   return p;\n@@ -498,7 +498,7 @@ gfc_logical_expr (int i, locus * where)\n   p->ts.kind = gfc_default_logical_kind ();\n \n   if (where == NULL)\n-    where = gfc_current_locus ();\n+    where = &gfc_current_locus;\n   p->where = *where;\n   p->value.logical = i;\n "}, {"sha": "0384fe41ad366f5933d9c70e90c30cd5a3a04e70", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -1289,9 +1289,6 @@ void gfc_add_include_path (const char *);\n void gfc_release_include_path (void);\n FILE *gfc_open_included_file (const char *);\n \n-locus *gfc_current_locus (void);\n-void gfc_set_locus (locus *);\n-\n int gfc_at_end (void);\n int gfc_at_eof (void);\n int gfc_at_bol (void);\n@@ -1309,7 +1306,7 @@ try gfc_new_file (const char *, gfc_source_form);\n \n extern gfc_source_form gfc_current_form;\n extern char *gfc_source_file;\n-/* extern locus gfc_current_locus; */\n+extern locus gfc_current_locus;\n \n /* misc.c */\n void *gfc_getmem (size_t) ATTRIBUTE_MALLOC;"}, {"sha": "a3c3acc9fa82ebcebd94a0224310440b0d7a15fc", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -1833,7 +1833,7 @@ gfc_add_interface (gfc_symbol * new)\n \n   intr = gfc_get_interface ();\n   intr->sym = new;\n-  intr->where = *gfc_current_locus ();\n+  intr->where = gfc_current_locus;\n \n   intr->next = *head;\n   *head = intr;"}, {"sha": "56cbe8705178d1891a1338f0853bb5e30dd0b47a", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -819,7 +819,7 @@ gfc_match_format (void)\n   mode = MODE_FORMAT;\n   format_length = 0;\n \n-  start = *gfc_current_locus ();\n+  start = gfc_current_locus;\n \n   if (check_format () == FAILURE)\n     return MATCH_ERROR;\n@@ -833,7 +833,7 @@ gfc_match_format (void)\n   /* The label doesn't get created until after the statement is done\n      being matched, so we have to leave the string for later.  */\n \n-  gfc_set_locus (&start);\t/* Back to the beginning */\n+  gfc_current_locus = start;\t/* Back to the beginning */\n \n   new_st.loc = start;\n   new_st.op = EXEC_NOP;\n@@ -1480,7 +1480,7 @@ match_dt_format (gfc_dt * dt)\n   gfc_expr *e;\n   gfc_st_label *label;\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n \n   if (gfc_match_char ('*') == MATCH_YES)\n     {\n@@ -1520,7 +1520,7 @@ match_dt_format (gfc_dt * dt)\n       return MATCH_YES;\n     }\n \n-  gfc_set_locus (&where);\t/* The only case where we have to restore */\n+  gfc_current_locus = where;\t/* The only case where we have to restore */\n \n   return MATCH_NO;\n \n@@ -1617,13 +1617,13 @@ match_dt_element (io_kind k, gfc_dt * dt)\n \n   m = match_ltag (&tag_end, &dt->end);\n   if (m == MATCH_YES)\n-    dt->end_where = *gfc_current_locus ();\n+    dt->end_where = gfc_current_locus;\n   if (m != MATCH_NO)\n     return m;\n \n   m = match_ltag (&tag_eor, &dt->eor);\n   if (m == MATCH_YES)\n-    dt->eor_where = *gfc_current_locus ();\n+    dt->eor_where = gfc_current_locus;\n   if (m != MATCH_NO)\n     return m;\n \n@@ -1818,7 +1818,7 @@ match_io_iterator (io_kind k, gfc_code ** result)\n \n   iter = NULL;\n   head = NULL;\n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   if (gfc_match_char ('(') != MATCH_YES)\n     return MATCH_NO;\n@@ -1885,7 +1885,7 @@ match_io_iterator (io_kind k, gfc_code ** result)\n cleanup:\n   gfc_free_iterator (iter, 1);\n   gfc_free_statements (head);\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   return m;\n }\n \n@@ -2093,7 +2093,7 @@ match_io (io_kind k)\n   if (m == MATCH_ERROR)\n     goto cleanup;\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n \n   if (gfc_match_name (name) == MATCH_YES\n       && !gfc_find_symbol (name, NULL, 1, &sym)\n@@ -2108,7 +2108,7 @@ match_io (io_kind k)\n       goto next;\n     }\n \n-  gfc_set_locus (&where);\n+  gfc_current_locus = where;\n \n   goto loop;\t\t\t/* No matches, try regular elements */\n "}, {"sha": "79a7e4c73b2235d0ab68dfe25e3cb896f2d4dba1", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -80,12 +80,12 @@ gfc_match_space (void)\n   if (gfc_current_form == FORM_FIXED)\n     return MATCH_YES;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   c = gfc_next_char ();\n   if (!gfc_is_whitespace (c))\n     {\n-      gfc_set_locus (&old_loc);\n+      gfc_current_locus = old_loc;\n       return MATCH_NO;\n     }\n \n@@ -109,7 +109,7 @@ gfc_match_eos (void)\n \n   for (;;)\n     {\n-      old_loc = *gfc_current_locus ();\n+      old_loc = gfc_current_locus;\n       gfc_gobble_whitespace ();\n \n       c = gfc_next_char ();\n@@ -135,7 +135,7 @@ gfc_match_eos (void)\n       break;\n     }\n \n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   return (flag) ? MATCH_YES : MATCH_NO;\n }\n \n@@ -151,22 +151,22 @@ gfc_match_small_literal_int (int *value)\n   char c;\n   int i;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   gfc_gobble_whitespace ();\n   c = gfc_next_char ();\n \n   if (!ISDIGIT (c))\n     {\n-      gfc_set_locus (&old_loc);\n+      gfc_current_locus = old_loc;\n       return MATCH_NO;\n     }\n \n   i = c - '0';\n \n   for (;;)\n     {\n-      old_loc = *gfc_current_locus ();\n+      old_loc = gfc_current_locus;\n       c = gfc_next_char ();\n \n       if (!ISDIGIT (c))\n@@ -181,7 +181,7 @@ gfc_match_small_literal_int (int *value)\n \t}\n     }\n \n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n \n   *value = i;\n   return MATCH_YES;\n@@ -227,7 +227,7 @@ gfc_match_st_label (gfc_st_label ** label, int allow_zero)\n   match m;\n   int i;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   m = gfc_match_small_literal_int (&i);\n   if (m != MATCH_YES)\n@@ -240,7 +240,7 @@ gfc_match_st_label (gfc_st_label ** label, int allow_zero)\n     }\n \n   gfc_error (\"Statement label at %C is out of range\");\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   return MATCH_ERROR;\n }\n \n@@ -320,7 +320,7 @@ gfc_match_strings (mstring * a)\n   no_match = p->tag;\n \n   best_match = NULL;\n-  match_loc = *gfc_current_locus ();\n+  match_loc = gfc_current_locus;\n \n   gfc_gobble_whitespace ();\n \n@@ -356,15 +356,15 @@ gfc_match_strings (mstring * a)\n \t  if (*p->mp == '\\0')\n \t    {\n \t      /* Found a match.  */\n-\t      match_loc = *gfc_current_locus ();\n+\t      match_loc = gfc_current_locus;\n \t      best_match = p;\n \t      possibles--;\n \t      p->mp = NULL;\n \t    }\n \t}\n     }\n \n-  gfc_set_locus (&match_loc);\n+  gfc_current_locus = match_loc;\n \n   return (best_match == NULL) ? no_match : best_match->tag;\n }\n@@ -379,13 +379,13 @@ gfc_match_name (char *buffer)\n   locus old_loc;\n   int i, c;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n   gfc_gobble_whitespace ();\n \n   c = gfc_next_char ();\n   if (!ISALPHA (c))\n     {\n-      gfc_set_locus (&old_loc);\n+      gfc_current_locus = old_loc;\n       return MATCH_NO;\n     }\n \n@@ -401,15 +401,15 @@ gfc_match_name (char *buffer)\n \t  return MATCH_ERROR;\n \t}\n \n-      old_loc = *gfc_current_locus ();\n+      old_loc = gfc_current_locus;\n       c = gfc_next_char ();\n     }\n   while (ISALNUM (c)\n \t || c == '_'\n \t || (gfc_option.flag_dollar_ok && c == '$'));\n \n   buffer[i] = '\\0';\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n \n   return MATCH_YES;\n }\n@@ -495,9 +495,9 @@ gfc_match_iterator (gfc_iterator * iter, int init_flag)\n   /* Match the start of an iterator without affecting the symbol\n      table.  */\n \n-  start = *gfc_current_locus ();\n+  start = gfc_current_locus;\n   m = gfc_match (\" %n =\", name);\n-  gfc_set_locus (&start);\n+  gfc_current_locus = start;\n \n   if (m != MATCH_YES)\n     return MATCH_NO;\n@@ -586,13 +586,13 @@ gfc_match_char (char c)\n {\n   locus where;\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n   gfc_gobble_whitespace ();\n \n   if (gfc_next_char () == c)\n     return MATCH_YES;\n \n-  gfc_set_locus (&where);\n+  gfc_current_locus = where;\n   return MATCH_NO;\n }\n \n@@ -624,7 +624,7 @@ gfc_match (const char *target, ...)\n   void **vp;\n   const char *p;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n   va_start (argp, target);\n   m = MATCH_NO;\n   matches = 0;\n@@ -750,7 +750,7 @@ gfc_match (const char *target, ...)\n   if (m != MATCH_YES)\n     {\n       /* Clean up after a failed match.  */\n-      gfc_set_locus (&old_loc);\n+      gfc_current_locus = old_loc;\n       va_start (argp, target);\n \n       p = target;\n@@ -832,7 +832,7 @@ gfc_match_assignment (void)\n   locus old_loc;\n   match m;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   lvalue = rvalue = NULL;\n   m = gfc_match (\" %v =\", &lvalue);\n@@ -852,7 +852,7 @@ gfc_match_assignment (void)\n   return MATCH_YES;\n \n cleanup:\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   gfc_free_expr (lvalue);\n   gfc_free_expr (rvalue);\n   return m;\n@@ -868,7 +868,7 @@ gfc_match_pointer_assignment (void)\n   locus old_loc;\n   match m;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   lvalue = rvalue = NULL;\n \n@@ -890,7 +890,7 @@ gfc_match_pointer_assignment (void)\n   return MATCH_YES;\n \n cleanup:\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   gfc_free_expr (lvalue);\n   gfc_free_expr (rvalue);\n   return m;\n@@ -920,7 +920,7 @@ gfc_match_if (gfc_statement * if_type)\n   if (n == MATCH_ERROR)\n     return n;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   m = gfc_match (\" if ( %e\", &expr);\n   if (m != MATCH_YES)\n@@ -996,7 +996,7 @@ gfc_match_if (gfc_statement * if_type)\n \n   gfc_free_expr (expr);\n   gfc_undo_symbols ();\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n \n   gfc_match (\" if ( %e ) \", &expr);\t/* Guaranteed to match */\n \n@@ -1006,7 +1006,7 @@ gfc_match_if (gfc_statement * if_type)\n \n   gfc_free_expr (expr);\n   gfc_undo_symbols ();\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n \n   gfc_match (\" if ( %e ) \", &expr);\t/* Guaranteed to match */\n \n@@ -1066,7 +1066,7 @@ gfc_match_if (gfc_statement * if_type)\n   p = gfc_get_code ();\n   p->next = gfc_get_code ();\n   *p->next = new_st;\n-  p->next->loc = *gfc_current_locus ();\n+  p->next->loc = gfc_current_locus;\n \n   p->expr = expr;\n   p->op = EXEC_IF;\n@@ -1182,7 +1182,7 @@ gfc_match_do (void)\n   gfc_st_label *label;\n   match m;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   label = NULL;\n   iter.var = iter.start = iter.end = iter.step = NULL;\n@@ -1222,7 +1222,7 @@ gfc_match_do (void)\n   /* The abortive DO WHILE may have done something to the symbol\n      table, so we start over: */\n   gfc_undo_symbols ();\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n \n   gfc_match_label ();\t\t/* This won't error */\n   gfc_match (\" do \");\t\t/* This will work */\n@@ -1780,7 +1780,7 @@ gfc_match_nullify (void)\n \n       /* build ' => NULL() ' */\n       e = gfc_get_expr ();\n-      e->where = *gfc_current_locus ();\n+      e->where = gfc_current_locus;\n       e->expr_type = EXPR_NULL;\n       e->ts.type = BT_UNKNOWN;\n \n@@ -1985,7 +1985,7 @@ gfc_match_call (void)\n   i = 0;\n   for (a = arglist; a; a = a->next)\n     if (a->expr == NULL)\n-      i = 1;\n+\ti = 1;\n \n   if (i)\n     {\n@@ -2006,7 +2006,7 @@ gfc_match_call (void)\n       c->expr->expr_type = EXPR_VARIABLE;\n       c->expr->symtree = select_st;\n       c->expr->ts = select_sym->ts;\n-      c->expr->where = *gfc_current_locus ();\n+      c->expr->where = gfc_current_locus;\n \n       i = 0;\n       for (a = arglist; a; a = a->next)\n@@ -2069,7 +2069,7 @@ match_implicit_range (gfc_typespec * ts)\n   int c, c1, c2, inner;\n   locus cur_loc;\n \n-  cur_loc = *gfc_current_locus ();\n+  cur_loc = gfc_current_locus;\n \n   gfc_gobble_whitespace ();\n   c = gfc_next_char ();\n@@ -2140,7 +2140,7 @@ match_implicit_range (gfc_typespec * ts)\n bad:\n   gfc_syntax_error (ST_IMPLICIT);\n \n-  gfc_set_locus (&cur_loc);\n+  gfc_current_locus = cur_loc;\n   return MATCH_ERROR;\n }\n \n@@ -2191,7 +2191,7 @@ gfc_match_implicit (void)\n       if (m == MATCH_NO)\n \tgoto syntax;\n \n-      cur_loc = *gfc_current_locus ();\n+      cur_loc = gfc_current_locus;\n       m = match_implicit_range (&ts);\n \n       if (m == MATCH_YES)\n@@ -2202,7 +2202,7 @@ gfc_match_implicit (void)\n \t  if ((c == '\\n') || (c == ','))\n \t    continue;\n \n-\t  gfc_set_locus (&cur_loc);\n+\t  gfc_current_locus = cur_loc;\n \t}\n \n       /* Last chance -- check <TYPE> (<KIND>) (<RANGE>).  */\n@@ -3026,7 +3026,7 @@ gfc_match_data (void)\n   for (;;)\n     {\n       new = gfc_get_data ();\n-      new->where = *gfc_current_locus ();\n+      new->where = gfc_current_locus;\n \n       m = top_var_list (new);\n       if (m != MATCH_YES)\n@@ -3098,7 +3098,7 @@ match_case_selector (gfc_case ** cp)\n   match m;\n \n   c = gfc_get_case ();\n-  c->where = *gfc_current_locus ();\n+  c->where = gfc_current_locus;\n \n   if (gfc_match_char (':') == MATCH_YES)\n     {\n@@ -3219,7 +3219,7 @@ gfc_match_case (void)\n \n       new_st.op = EXEC_SELECT;\n       c = gfc_get_case ();\n-      c->where = *gfc_current_locus ();\n+      c->where = gfc_current_locus;\n       new_st.ext.case_list = c;\n       return MATCH_YES;\n     }\n@@ -3417,7 +3417,7 @@ match_forall_iterator (gfc_forall_iterator ** result)\n   locus where;\n   match m;\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n   iter = gfc_getmem (sizeof (gfc_forall_iterator));\n \n   m = gfc_match_variable (&iter->var, 0);\n@@ -3464,7 +3464,7 @@ match_forall_iterator (gfc_forall_iterator ** result)\n   m = MATCH_ERROR;\n \n cleanup:\n-  gfc_set_locus (&where);\n+  gfc_current_locus = where;\n   gfc_free_forall_iterator (iter);\n   return m;\n }"}, {"sha": "1035e8888c33c9849ca01f7febea07e9b7632f92", "filename": "gcc/fortran/matchexp.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fmatchexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fmatchexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatchexp.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -46,7 +46,7 @@ gfc_match_defined_op_name (char *result, int error_flag)\n   match m;\n   int i;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   m = gfc_match (\" . %n .\", name);\n   if (m != MATCH_YES)\n@@ -59,7 +59,7 @@ gfc_match_defined_op_name (char *result, int error_flag)\n     {\n       if (error_flag)\n \tgoto error;\n-      gfc_set_locus (&old_loc);\n+      gfc_current_locus = old_loc;\n       return MATCH_NO;\n     }\n \n@@ -81,7 +81,7 @@ gfc_match_defined_op_name (char *result, int error_flag)\n   gfc_error (\"The name '%s' cannot be used as a defined operator at %C\",\n \t     name);\n \n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   return MATCH_ERROR;\n }\n \n@@ -113,11 +113,11 @@ next_operator (gfc_intrinsic_op t)\n   gfc_intrinsic_op u;\n   locus old_loc;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n   if (gfc_match_intrinsic_op (&u) == MATCH_YES && t == u)\n     return 1;\n \n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   return 0;\n }\n \n@@ -199,7 +199,7 @@ match_level_1 (gfc_expr ** result)\n   locus where;\n   match m;\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n   uop = NULL;\n   m = match_defined_operator (&uop);\n   if (m == MATCH_ERROR)\n@@ -271,7 +271,7 @@ match_mult_operand (gfc_expr ** result)\n       return MATCH_YES;\n     }\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n \n   m = match_ext_mult_operand (&exp);\n   if (m == MATCH_NO)\n@@ -305,7 +305,7 @@ match_ext_mult_operand (gfc_expr ** result)\n   match m;\n   int i;\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n   i = match_add_op ();\n \n   if (i == 0)\n@@ -353,7 +353,7 @@ match_add_operand (gfc_expr ** result)\n     {\n       /* Build up a string of products or quotients.  */\n \n-      old_loc = *gfc_current_locus ();\n+      old_loc = gfc_current_locus;\n \n       if (next_operator (INTRINSIC_TIMES))\n \ti = INTRINSIC_TIMES;\n@@ -365,12 +365,12 @@ match_add_operand (gfc_expr ** result)\n \t    break;\n \t}\n \n-      where = *gfc_current_locus ();\n+      where = gfc_current_locus;\n \n       m = match_ext_mult_operand (&e);\n       if (m == MATCH_NO)\n \t{\n-\t  gfc_set_locus (&old_loc);\n+\t  gfc_current_locus = old_loc;\n \t  break;\n \t}\n \n@@ -409,7 +409,7 @@ match_ext_add_operand (gfc_expr ** result)\n   match m;\n   int i;\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n   i = match_add_op ();\n \n   if (i == 0)\n@@ -451,7 +451,7 @@ match_level_2 (gfc_expr ** result)\n   match m;\n   int i;\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n   i = match_add_op ();\n \n   if (i != 0)\n@@ -491,7 +491,7 @@ match_level_2 (gfc_expr ** result)\n \n   for (;;)\n     {\n-      where = *gfc_current_locus ();\n+      where = gfc_current_locus;\n       i = match_add_op ();\n       if (i == 0)\n \tbreak;\n@@ -544,7 +544,7 @@ match_level_3 (gfc_expr ** result)\n       if (!next_operator (INTRINSIC_CONCAT))\n \tbreak;\n \n-      where = *gfc_current_locus ();\n+      where = gfc_current_locus;\n \n       m = match_level_2 (&e);\n       if (m == MATCH_NO)\n@@ -587,7 +587,7 @@ match_level_4 (gfc_expr ** result)\n   if (m != MATCH_YES)\n     return m;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   if (gfc_match_intrinsic_op (&i) != MATCH_YES)\n     {\n@@ -598,12 +598,12 @@ match_level_4 (gfc_expr ** result)\n   if (i != INTRINSIC_EQ && i != INTRINSIC_NE && i != INTRINSIC_GE\n       && i != INTRINSIC_LE && i != INTRINSIC_LT && i != INTRINSIC_GT)\n     {\n-      gfc_set_locus (&old_loc);\n+      gfc_current_locus = old_loc;\n       *result = left;\n       return MATCH_YES;\n     }\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n \n   m = match_level_3 (&right);\n   if (m == MATCH_NO)\n@@ -667,7 +667,7 @@ match_and_operand (gfc_expr ** result)\n   int i;\n \n   i = next_operator (INTRINSIC_NOT);\n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n \n   m = match_level_4 (&e);\n   if (m != MATCH_YES)\n@@ -706,7 +706,7 @@ match_or_operand (gfc_expr ** result)\n     {\n       if (!next_operator (INTRINSIC_AND))\n \tbreak;\n-      where = *gfc_current_locus ();\n+      where = gfc_current_locus;\n \n       m = match_and_operand (&e);\n       if (m == MATCH_NO)\n@@ -749,7 +749,7 @@ match_equiv_operand (gfc_expr ** result)\n     {\n       if (!next_operator (INTRINSIC_OR))\n \tbreak;\n-      where = *gfc_current_locus ();\n+      where = gfc_current_locus;\n \n       m = match_or_operand (&e);\n       if (m == MATCH_NO)\n@@ -803,7 +803,7 @@ match_level_5 (gfc_expr ** result)\n \t    break;\n \t}\n \n-      where = *gfc_current_locus ();\n+      where = gfc_current_locus;\n \n       m = match_equiv_operand (&e);\n       if (m == MATCH_NO)\n@@ -861,7 +861,7 @@ gfc_match_expr (gfc_expr ** result)\n \t  return MATCH_ERROR;\n \t}\n \n-      where = *gfc_current_locus ();\n+      where = gfc_current_locus;\n \n       m = match_level_5 (&e);\n       if (m == MATCH_NO)"}, {"sha": "09f945292aa9d5a7a43e10d9974e86f3f3e1289e", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -506,7 +506,7 @@ gfc_match_use (void)\n     {\n       /* Get a new rename struct and add it to the rename list.  */\n       new = gfc_get_use_rename ();\n-      new->where = *gfc_current_locus ();\n+      new->where = gfc_current_locus;\n       new->found = 0;\n \n       if (gfc_rename_list == NULL)\n@@ -1766,10 +1766,10 @@ mio_array_ref (gfc_array_ref * ar)\n \n   if (iomode == IO_INPUT)\n     {\n-      ar->where = *gfc_current_locus ();\n+      ar->where = gfc_current_locus;\n \n       for (i = 0; i < ar->dimen; i++)\n-\tar->c_where[i] = *gfc_current_locus ();\n+\tar->c_where[i] = gfc_current_locus;\n     }\n \n   mio_rparen ();\n@@ -2401,7 +2401,7 @@ mio_expr (gfc_expr ** ep)\n \tbad_module (\"Expected expression type\");\n \n       e = *ep = gfc_get_expr ();\n-      e->where = *gfc_current_locus ();\n+      e->where = gfc_current_locus;\n       e->expr_type = (expr_t) find_enum (expr_types);\n     }\n "}, {"sha": "8b8aa5af4a0223fce8cb858fd85a89df8435e682", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -66,7 +66,7 @@ match_word (const char *str, match (*subr) (void), locus * old_locus)\n \n   if (m != MATCH_YES)\n     {\n-      gfc_set_locus (old_locus);\n+      gfc_current_locus = *old_locus;\n       reject_statement ();\n     }\n \n@@ -101,7 +101,7 @@ decode_statement (void)\n   if (gfc_match_eos () == MATCH_YES)\n     return ST_NONE;\n \n-  old_locus = *gfc_current_locus ();\n+  old_locus = gfc_current_locus;\n \n   /* Try matching a data declaration or function declaration. The\n       input \"REALFUNCTIONA(N)\" can mean several things in different\n@@ -118,7 +118,7 @@ decode_statement (void)\n \treject_statement ();\n \n       gfc_undo_symbols ();\n-      gfc_set_locus (&old_locus);\n+      gfc_current_locus = old_locus;\n     }\n \n   /* Match statements whose error messages are meant to be overwritten\n@@ -136,7 +136,7 @@ decode_statement (void)\n   if (gfc_match_subroutine () == MATCH_YES)\n     return ST_SUBROUTINE;\n   gfc_undo_symbols ();\n-  gfc_set_locus (&old_locus);\n+  gfc_current_locus = old_locus;\n \n   /* Check for the IF, DO, SELECT, WHERE and FORALL statements, which\n      might begin with a block label.  The match functions for these\n@@ -146,17 +146,17 @@ decode_statement (void)\n   if (gfc_match_if (&st) == MATCH_YES)\n     return st;\n   gfc_undo_symbols ();\n-  gfc_set_locus (&old_locus);\n+  gfc_current_locus = old_locus;\n \n   if (gfc_match_where (&st) == MATCH_YES)\n     return st;\n   gfc_undo_symbols ();\n-  gfc_set_locus (&old_locus);\n+  gfc_current_locus = old_locus;\n \n   if (gfc_match_forall (&st) == MATCH_YES)\n     return st;\n   gfc_undo_symbols ();\n-  gfc_set_locus (&old_locus);\n+  gfc_current_locus = old_locus;\n \n   match (NULL, gfc_match_do, ST_DO);\n   match (NULL, gfc_match_select, ST_SELECT_CASE);\n@@ -327,7 +327,7 @@ next_free (void)\n \t}\n       else\n \t{\n-\t  label_locus = *gfc_current_locus ();\n+\t  label_locus = gfc_current_locus;\n \n \t  if (gfc_statement_label->value == 0)\n \t    {\n@@ -394,7 +394,7 @@ next_fixed (void)\n \tcase '8':\n \tcase '9':\n \t  label = label * 10 + c - '0';\n-\t  label_locus = *gfc_current_locus ();\n+\t  label_locus = gfc_current_locus;\n \t  digit_flag = 1;\n \t  break;\n \n@@ -440,14 +440,14 @@ next_fixed (void)\n \n   do\n     {\n-      loc = *gfc_current_locus ();\n+      loc = gfc_current_locus;\n       c = gfc_next_char_literal (0);\n     }\n   while (gfc_is_whitespace (c));\n \n   if (c == '!')\n     goto blank_line;\n-  gfc_set_locus (&loc);\n+  gfc_current_locus = loc;\n \n   if (gfc_match_eos () == MATCH_YES)\n     goto blank_line;\n@@ -606,7 +606,7 @@ add_statement (void)\n   p = gfc_get_code ();\n   *p = new_st;\n \n-  p->loc = *gfc_current_locus ();\n+  p->loc = gfc_current_locus;\n \n   if (gfc_state_stack->head == NULL)\n     gfc_state_stack->head = p;\n@@ -1237,7 +1237,7 @@ verify_st_order (st_state * p, gfc_statement st)\n     }\n \n   /* All is well, record the statement in case we need it next time.  */\n-  p->where = *gfc_current_locus ();\n+  p->where = gfc_current_locus;\n   p->last_statement = st;\n   return SUCCESS;\n \n@@ -1811,7 +1811,7 @@ parse_if_block (void)\n \t    }\n \n \t  seen_else = 1;\n-\t  else_locus = *gfc_current_locus ();\n+\t  else_locus = gfc_current_locus;\n \n \t  d = new_level (gfc_state_stack->head);\n \t  d->op = EXEC_IF;\n@@ -2411,7 +2411,7 @@ gfc_parse_file (void)\n       if (seen_program)\n \tgoto duplicate_main;\n       seen_program = 1;\n-      prog_locus = *gfc_current_locus ();\n+      prog_locus = gfc_current_locus;\n \n       push_state (&s, COMP_PROGRAM, gfc_new_block);\n       accept_statement (st);\n@@ -2449,7 +2449,7 @@ gfc_parse_file (void)\n       if (seen_program)\n \tgoto duplicate_main;\n       seen_program = 1;\n-      prog_locus = *gfc_current_locus ();\n+      prog_locus = gfc_current_locus;\n \n       push_state (&s, COMP_PROGRAM, gfc_new_block);\n       parse_progunit (st);"}, {"sha": "e1f40493256511f041f7f6af81309a856fb9b1bf", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -159,7 +159,7 @@ match_digits (int signflag, int radix, char *buffer)\n \n   for (;;)\n     {\n-      old_loc = *gfc_current_locus ();\n+      old_loc = gfc_current_locus;\n       c = gfc_next_char ();\n \n       if (!check_digit (c, radix))\n@@ -170,7 +170,7 @@ match_digits (int signflag, int radix, char *buffer)\n       length++;\n     }\n \n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n \n   return length;\n }\n@@ -187,11 +187,11 @@ match_integer_constant (gfc_expr ** result, int signflag)\n   char *buffer;\n   gfc_expr *e;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n   gfc_gobble_whitespace ();\n \n   length = match_digits (signflag, 10, NULL);\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   if (length == -1)\n     return MATCH_NO;\n \n@@ -214,7 +214,7 @@ match_integer_constant (gfc_expr ** result, int signflag)\n       return MATCH_ERROR;\n     }\n \n-  e = gfc_convert_integer (buffer, kind, 10, gfc_current_locus ());\n+  e = gfc_convert_integer (buffer, kind, 10, &gfc_current_locus);\n \n   if (gfc_range_check (e) != ARITH_OK)\n     {\n@@ -241,7 +241,7 @@ match_boz_constant (gfc_expr ** result)\n   gfc_expr *e;\n   const char *rname;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n   gfc_gobble_whitespace ();\n \n   switch (gfc_next_char ())\n@@ -276,7 +276,7 @@ match_boz_constant (gfc_expr ** result)\n   if (delim != '\\'' && delim != '\\\"')\n     goto backup;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   length = match_digits (0, radix, NULL);\n   if (length == -1)\n@@ -291,7 +291,7 @@ match_boz_constant (gfc_expr ** result)\n       return MATCH_ERROR;\n     }\n \n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n \n   buffer = alloca (length + 1);\n   memset (buffer, '\\0', length + 1);\n@@ -300,7 +300,7 @@ match_boz_constant (gfc_expr ** result)\n   gfc_next_char ();\n \n   e = gfc_convert_integer (buffer, gfc_default_integer_kind (), radix,\n-\t\t\t   gfc_current_locus ());\n+\t\t\t   &gfc_current_locus);\n \n   if (gfc_range_check (e) != ARITH_OK)\n     {\n@@ -314,7 +314,7 @@ match_boz_constant (gfc_expr ** result)\n   return MATCH_YES;\n \n backup:\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   return MATCH_NO;\n }\n \n@@ -329,7 +329,7 @@ match_real_constant (gfc_expr ** result, int signflag)\n   char *p, *buffer;\n   gfc_expr *e;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n   gfc_gobble_whitespace ();\n \n   e = NULL;\n@@ -355,7 +355,7 @@ match_real_constant (gfc_expr ** result, int signflag)\n \t    goto done;\n \n \t  /* Check to see if \".\" goes with a following operator like \".eq.\".  */\n-\t  temp_loc = *gfc_current_locus ();\n+\t  temp_loc = gfc_current_locus;\n \t  c = gfc_next_char ();\n \n \t  if (c == 'e' || c == 'd' || c == 'q')\n@@ -368,7 +368,7 @@ match_real_constant (gfc_expr ** result, int signflag)\n \t  if (ISALPHA (c))\n \t    goto done;\t\t/* Distinguish 1.e9 from 1.eq.2 */\n \n-\t  gfc_set_locus (&temp_loc);\n+\t  gfc_current_locus = temp_loc;\n \t  seen_dp = 1;\n \t  continue;\n \t}\n@@ -401,7 +401,7 @@ match_real_constant (gfc_expr ** result, int signflag)\n       /* TODO: seen_digits is always true at this point */\n       if (!seen_digits)\n \t{\n-\t  gfc_set_locus (&old_loc);\n+\t  gfc_current_locus = old_loc;\n \t  return MATCH_NO;\t/* \".e\" can be something else */\n \t}\n \n@@ -419,12 +419,12 @@ match_real_constant (gfc_expr ** result, int signflag)\n   /* See what we've got!  */\n   if (!seen_digits || (!seen_dp && exp_char == ' '))\n     {\n-      gfc_set_locus (&old_loc);\n+      gfc_current_locus = old_loc;\n       return MATCH_NO;\n     }\n \n   /* Convert the number.  */\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   gfc_gobble_whitespace ();\n \n   buffer = alloca (count + 1);\n@@ -478,7 +478,7 @@ match_real_constant (gfc_expr ** result, int signflag)\n \t}\n     }\n \n-  e = gfc_convert_real (buffer, kind, gfc_current_locus ());\n+  e = gfc_convert_real (buffer, kind, &gfc_current_locus);\n \n   switch (gfc_range_check (e))\n     {\n@@ -520,7 +520,7 @@ match_substring (gfc_charlen * cl, int init, gfc_ref ** result)\n   start = NULL;\n   end = NULL;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   m = gfc_match_char ('(');\n   if (m != MATCH_YES)\n@@ -589,7 +589,7 @@ match_substring (gfc_charlen * cl, int init, gfc_ref ** result)\n   gfc_free_expr (start);\n   gfc_free_expr (end);\n \n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   return m;\n }\n \n@@ -617,7 +617,7 @@ next_string_char (char delimiter)\n \n   if (c == '\\\\')\n     {\n-      old_locus = *gfc_current_locus ();\n+      old_locus = gfc_current_locus;\n \n       switch (gfc_next_char_literal (1))\n \t{\n@@ -648,20 +648,20 @@ next_string_char (char delimiter)\n \n \tdefault:\n \t  /* Unknown backslash codes are simply not expanded */\n-\t  gfc_set_locus (&old_locus);\n+\t  gfc_current_locus = old_locus;\n \t  break;\n \t}\n     }\n \n   if (c != delimiter)\n     return c;\n \n-  old_locus = *gfc_current_locus ();\n+  old_locus = gfc_current_locus;\n   c = gfc_next_char_literal (1);\n \n   if (c == delimiter)\n     return c;\n-  gfc_set_locus (&old_locus);\n+  gfc_current_locus = old_locus;\n \n   return -1;\n }\n@@ -696,7 +696,7 @@ match_charkind_name (char *name)\n \n   for (;;)\n     {\n-      old_loc = *gfc_current_locus ();\n+      old_loc = gfc_current_locus;\n       c = gfc_next_char ();\n \n       if (c == '_')\n@@ -705,7 +705,7 @@ match_charkind_name (char *name)\n \n \t  if (peek == '\\'' || peek == '\\\"')\n \t    {\n-\t      gfc_set_locus (&old_loc);\n+\t      gfc_current_locus = old_loc;\n \t      *name = '\\0';\n \t      return MATCH_YES;\n \t    }\n@@ -743,11 +743,11 @@ match_string_constant (gfc_expr ** result)\n   const char *q;\n   match m;\n \n-  old_locus = *gfc_current_locus ();\n+  old_locus = gfc_current_locus;\n \n   gfc_gobble_whitespace ();\n \n-  start_locus = *gfc_current_locus ();\n+  start_locus = gfc_current_locus;\n \n   c = gfc_next_char ();\n   if (c == '\\'' || c == '\"')\n@@ -771,7 +771,7 @@ match_string_constant (gfc_expr ** result)\n     }\n   else\n     {\n-      gfc_set_locus (&old_locus);\n+      gfc_current_locus = old_locus;\n \n       m = match_charkind_name (name);\n       if (m != MATCH_YES)\n@@ -796,7 +796,7 @@ match_string_constant (gfc_expr ** result)\n     goto no_match;\n \n   gfc_gobble_whitespace ();\n-  start_locus = *gfc_current_locus ();\n+  start_locus = gfc_current_locus;\n \n   c = gfc_next_char ();\n   if (c != '\\'' && c != '\"')\n@@ -834,7 +834,7 @@ match_string_constant (gfc_expr ** result)\n \tbreak;\n       if (c == -2)\n \t{\n-\t  gfc_set_locus (&start_locus);\n+\t  gfc_current_locus = start_locus;\n \t  gfc_error (\"Unterminated character constant beginning at %C\");\n \t  return MATCH_ERROR;\n \t}\n@@ -853,7 +853,7 @@ match_string_constant (gfc_expr ** result)\n   e->value.character.string = p = gfc_getmem (length + 1);\n   e->value.character.length = length;\n \n-  gfc_set_locus (&start_locus);\n+  gfc_current_locus = start_locus;\n   gfc_next_char ();\t\t/* Skip delimiter */\n \n   for (i = 0; i < length; i++)\n@@ -872,7 +872,7 @@ match_string_constant (gfc_expr ** result)\n   return MATCH_YES;\n \n no_match:\n-  gfc_set_locus (&old_locus);\n+  gfc_current_locus = old_locus;\n   return MATCH_NO;\n }\n \n@@ -910,7 +910,7 @@ match_logical_constant (gfc_expr ** result)\n   e->value.logical = i;\n   e->ts.type = BT_LOGICAL;\n   e->ts.kind = kind;\n-  e->where = *gfc_current_locus ();\n+  e->where = gfc_current_locus;\n \n   *result = e;\n   return MATCH_YES;\n@@ -999,7 +999,7 @@ match_const_complex_part (gfc_expr ** result)\n   char *p, c, exp_char, *buffer;\n   locus old_loc;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n   gfc_gobble_whitespace ();\n \n   seen_dp = 0;\n@@ -1064,7 +1064,7 @@ match_const_complex_part (gfc_expr ** result)\n     goto no_match;\n \n   /* Convert the number.  */\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   gfc_gobble_whitespace ();\n \n   buffer = alloca (count + 1);\n@@ -1121,11 +1121,11 @@ match_const_complex_part (gfc_expr ** result)\n \t}\n     }\n \n-  *result = gfc_convert_real (buffer, kind, gfc_current_locus ());\n+  *result = gfc_convert_real (buffer, kind, &gfc_current_locus);\n   return MATCH_YES;\n \n no_match:\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n   return MATCH_NO;\n }\n \n@@ -1157,7 +1157,7 @@ match_complex_constant (gfc_expr ** result)\n   int kind;\n   match m;\n \n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n   real = imag = e = NULL;\n \n   m = gfc_match_char ('(');\n@@ -1210,7 +1210,7 @@ match_complex_constant (gfc_expr ** result)\n     gfc_convert_type (imag, &target, 2);\n \n   e = gfc_convert_complex (real, imag, kind);\n-  e->where = *gfc_current_locus ();\n+  e->where = gfc_current_locus;\n \n   gfc_free_expr (real);\n   gfc_free_expr (imag);\n@@ -1226,7 +1226,7 @@ match_complex_constant (gfc_expr ** result)\n   gfc_free_expr (e);\n   gfc_free_expr (real);\n   gfc_free_expr (imag);\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n \n   return m;\n }\n@@ -1284,7 +1284,7 @@ match_actual_arg (gfc_expr ** result)\n   gfc_expr *e;\n   int c;\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n \n   switch (gfc_match_name (name))\n     {\n@@ -1295,10 +1295,10 @@ match_actual_arg (gfc_expr ** result)\n       break;\n \n     case MATCH_YES:\n-      w = *gfc_current_locus ();\n+      w = gfc_current_locus;\n       gfc_gobble_whitespace ();\n       c = gfc_next_char ();\n-      gfc_set_locus (&w);\n+      gfc_current_locus = w;\n \n       if (c != ',' && c != ')')\n \tbreak;\n@@ -1343,7 +1343,7 @@ match_actual_arg (gfc_expr ** result)\n       return MATCH_YES;\n     }\n \n-  gfc_set_locus (&where);\n+  gfc_current_locus = where;\n   return gfc_match_expr (result);\n }\n \n@@ -1358,7 +1358,7 @@ match_keyword_arg (gfc_actual_arglist * actual, gfc_actual_arglist * base)\n   locus name_locus;\n   match m;\n \n-  name_locus = *gfc_current_locus ();\n+  name_locus = gfc_current_locus;\n   m = gfc_match_name (name);\n \n   if (m != MATCH_YES)\n@@ -1391,7 +1391,7 @@ match_keyword_arg (gfc_actual_arglist * actual, gfc_actual_arglist * base)\n   return MATCH_YES;\n \n cleanup:\n-  gfc_set_locus (&name_locus);\n+  gfc_current_locus = name_locus;\n   return m;\n }\n \n@@ -1412,7 +1412,7 @@ gfc_match_actual_arglist (int sub_flag, gfc_actual_arglist ** argp)\n   match m;\n \n   *argp = tail = NULL;\n-  old_loc = *gfc_current_locus ();\n+  old_loc = gfc_current_locus;\n \n   seen_keyword = 0;\n \n@@ -1496,7 +1496,7 @@ gfc_match_actual_arglist (int sub_flag, gfc_actual_arglist ** argp)\n \n cleanup:\n   gfc_free_actual_arglist (head);\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n \n   return MATCH_ERROR;\n }\n@@ -1766,7 +1766,7 @@ gfc_match_structure_constructor (gfc_symbol * sym, gfc_expr ** result)\n   if (gfc_match_char ('(') != MATCH_YES)\n     goto syntax;\n \n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n \n   gfc_find_component (sym, NULL);\n \n@@ -1862,7 +1862,7 @@ gfc_match_rvalue (gfc_expr ** result)\n \n   sym = symtree->n.sym;\n   e = NULL;\n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n \n   gfc_set_sym_referenced (sym);\n \n@@ -1975,7 +1975,7 @@ gfc_match_rvalue (gfc_expr ** result)\n       e->symtree = symtree;\n       e->expr_type = EXPR_FUNCTION;\n       e->value.function.actual = actual_arglist;\n-      e->where = *gfc_current_locus ();\n+      e->where = gfc_current_locus;\n \n       if (sym->as != NULL)\n \te->rank = sym->as->rank;\n@@ -2154,7 +2154,7 @@ gfc_match_variable (gfc_expr ** result, int equiv_flag)\n   m = gfc_match_sym_tree (&st, 1);\n   if (m != MATCH_YES)\n     return m;\n-  where = *gfc_current_locus ();\n+  where = gfc_current_locus;\n \n   sym = st->n.sym;\n   gfc_set_sym_referenced (sym);"}, {"sha": "b280e1417ba0a43b2c73a95e35512b7a14b26664", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 29, "deletions": 51, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -67,7 +67,7 @@ static int continue_flag, end_flag;\n gfc_source_form gfc_current_form;\n static gfc_linebuf *line_head, *line_tail;\n        \n-locus gfc_current_locus1;\n+locus gfc_current_locus;\n char *gfc_source_file;\n       \n \n@@ -191,28 +191,6 @@ gfc_open_included_file (const char *name)\n   return NULL;\n }\n \n-\n-/* Return a pointer to the current locus.  */\n-\n-locus *\n-gfc_current_locus (void)\n-{\n-\n-  return &gfc_current_locus1;\n-}\n-\n-\n-\n-/* Let a caller move the current read pointer (backwards).  */\n-\n-void\n-gfc_set_locus (locus * lp)\n-{\n-\n-  gfc_current_locus1 = *lp;\n-}\n-\n-\n /* Test to see if we're at the end of the main source file.  */\n \n int\n@@ -235,7 +213,7 @@ gfc_at_eof (void)\n   if (line_head == NULL)\n     return 1;\t\t\t/* Null file */\n \n-  if (gfc_current_locus1.lb == NULL)\n+  if (gfc_current_locus.lb == NULL)\n     return 1;\n \n   return 0;\n@@ -250,7 +228,7 @@ gfc_at_bol (void)\n   if (gfc_at_eof ())\n     return 1;\n \n-  return (gfc_current_locus1.nextc == gfc_current_locus1.lb->line);\n+  return (gfc_current_locus.nextc == gfc_current_locus.lb->line);\n }\n \n \n@@ -263,7 +241,7 @@ gfc_at_eol (void)\n   if (gfc_at_eof ())\n     return 1;\n \n-  return (*gfc_current_locus1.nextc == '\\0');\n+  return (*gfc_current_locus.nextc == '\\0');\n }\n \n \n@@ -275,19 +253,19 @@ gfc_advance_line (void)\n   if (gfc_at_end ())\n     return;\n \n-  if (gfc_current_locus1.lb == NULL) \n+  if (gfc_current_locus.lb == NULL) \n     {\n       end_flag = 1;\n       return;\n     } \n \n-  gfc_current_locus1.lb = gfc_current_locus1.lb->next;\n+  gfc_current_locus.lb = gfc_current_locus.lb->next;\n \n-  if (gfc_current_locus1.lb != NULL)         \n-    gfc_current_locus1.nextc = gfc_current_locus1.lb->line;\n+  if (gfc_current_locus.lb != NULL)         \n+    gfc_current_locus.nextc = gfc_current_locus.lb->line;\n   else \n     {\n-      gfc_current_locus1.nextc = NULL;\n+      gfc_current_locus.nextc = NULL;\n       end_flag = 1;\n     }       \n }\n@@ -307,13 +285,13 @@ next_char (void)\n {\n   int c;\n   \n-  if (gfc_current_locus1.nextc == NULL)\n+  if (gfc_current_locus.nextc == NULL)\n     return '\\n';\n \n-  c = *gfc_current_locus1.nextc++;\n+  c = *gfc_current_locus.nextc++;\n   if (c == '\\0')\n     {\n-      gfc_current_locus1.nextc--; /* Remain on this line.  */\n+      gfc_current_locus.nextc--; /* Remain on this line.  */\n       c = '\\n';\n     }\n \n@@ -351,7 +329,7 @@ skip_free_comments (void)\n \n   for (;;)\n     {\n-      start = gfc_current_locus1;\n+      start = gfc_current_locus;\n       if (gfc_at_eof ())\n \tbreak;\n \n@@ -376,7 +354,7 @@ skip_free_comments (void)\n       break;\n     }\n \n-  gfc_set_locus (&start);\n+  gfc_current_locus = start;\n }\n \n \n@@ -393,7 +371,7 @@ skip_fixed_comments (void)\n \n   for (;;)\n     {\n-      start = gfc_current_locus1;\n+      start = gfc_current_locus;\n       if (gfc_at_eof ())\n \tbreak;\n \n@@ -433,7 +411,7 @@ skip_fixed_comments (void)\n       break;\n     }\n \n-  gfc_set_locus (&start);\n+  gfc_current_locus = start;\n }\n \n \n@@ -491,7 +469,7 @@ gfc_next_char_literal (int in_string)\n \n       /* If the next nonblank character is a ! or \\n, we've got a\n          continuation line. */\n-      old_loc = gfc_current_locus1;\n+      old_loc = gfc_current_locus;\n \n       c = next_char ();\n       while (gfc_is_whitespace (c))\n@@ -502,14 +480,14 @@ gfc_next_char_literal (int in_string)\n \n       if (in_string && c != '\\n')\n \t{\n-\t  gfc_set_locus (&old_loc);\n+\t  gfc_current_locus = old_loc;\n \t  c = '&';\n \t  goto done;\n \t}\n \n       if (c != '!' && c != '\\n')\n \t{\n-\t  gfc_set_locus (&old_loc);\n+\t  gfc_current_locus = old_loc;\n \t  c = '&';\n \t  goto done;\n \t}\n@@ -529,14 +507,14 @@ gfc_next_char_literal (int in_string)\n          reading starts at the next character, otherwise we must back\n          up to where the whitespace started and resume from there.  */\n \n-      old_loc = *gfc_current_locus ();\n+      old_loc = gfc_current_locus;\n \n       c = next_char ();\n       while (gfc_is_whitespace (c))\n \tc = next_char ();\n \n       if (c != '&')\n-\tgfc_set_locus (&old_loc);\n+\tgfc_current_locus = old_loc;\n \n     }\n   else\n@@ -556,7 +534,7 @@ gfc_next_char_literal (int in_string)\n \tgoto done;\n \n       continue_flag = 1;\n-      old_loc = *gfc_current_locus ();\n+      old_loc = gfc_current_locus;\n \n       gfc_advance_line ();\n       gfc_skip_comments ();\n@@ -580,7 +558,7 @@ gfc_next_char_literal (int in_string)\n \n not_continuation:\n   c = '\\n';\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n \n done:\n   continue_flag = 0;\n@@ -614,9 +592,9 @@ gfc_peek_char (void)\n   locus old_loc;\n   int c;\n \n-  old_loc = gfc_current_locus1;\n+  old_loc = gfc_current_locus;\n   c = gfc_next_char ();\n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n \n   return c;\n }\n@@ -684,12 +662,12 @@ gfc_gobble_whitespace (void)\n \n   do\n     {\n-      old_loc = gfc_current_locus1;\n+      old_loc = gfc_current_locus;\n       c = gfc_next_char_literal (0);\n     }\n   while (gfc_is_whitespace (c));\n \n-  gfc_set_locus (&old_loc);\n+  gfc_current_locus = old_loc;\n }\n \n \n@@ -1123,8 +1101,8 @@ gfc_new_file (const char *filename, gfc_source_form form)\n \n   result = load_file (gfc_source_file, true);\n \n-  gfc_current_locus1.lb = line_head;\n-  gfc_current_locus1.nextc = (line_head == NULL) ? NULL : line_head->line;\n+  gfc_current_locus.lb = line_head;\n+  gfc_current_locus.nextc = (line_head == NULL) ? NULL : line_head->line;\n \n #if 0 /* Debugging aid.  */\n   for (; line_head; line_head = line_head->next)"}, {"sha": "743769c2c9781df0657ea904df9e5984fada0830", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -50,7 +50,7 @@ gfc_get_code (void)\n   gfc_code *c;\n \n   c = gfc_getmem (sizeof (gfc_code));\n-  c->loc = *gfc_current_locus ();\n+  c->loc = gfc_current_locus;\n   return c;\n }\n "}, {"sha": "6cdd23b45425cbd36dae40fb2cf2dfd10ec16dec", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63645982e7f5d9d95f152052431db81c2f119a15/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=63645982e7f5d9d95f152052431db81c2f119a15", "patch": "@@ -272,7 +272,7 @@ check_conflict (symbol_attribute * attr, locus * where)\n   const char *a1, *a2;\n \n   if (where == NULL)\n-    where = gfc_current_locus ();\n+    where = &gfc_current_locus;\n \n   if (attr->pointer && attr->intent != INTENT_UNKNOWN)\n     {\n@@ -484,7 +484,7 @@ check_used (symbol_attribute * attr, locus * where)\n     return 0;\n \n   if (where == NULL)\n-    where = gfc_current_locus ();\n+    where = &gfc_current_locus;\n \n   gfc_error (\"Cannot change attributes of USE-associated symbol at %L\",\n              where);\n@@ -506,7 +506,7 @@ check_done (symbol_attribute * attr, locus * where)\n     return 0;\n \n   if (where == NULL)\n-    where = gfc_current_locus ();\n+    where = &gfc_current_locus;\n \n   gfc_error (\"Cannot change attributes of symbol at %L\"\n              \" after it has been used\", where);\n@@ -522,7 +522,7 @@ duplicate_attr (const char *attr, locus * where)\n {\n \n   if (where == NULL)\n-    where = gfc_current_locus ();\n+    where = &gfc_current_locus;\n \n   gfc_error (\"Duplicate %s attribute specified at %L\", attr, where);\n }\n@@ -886,7 +886,7 @@ gfc_add_flavor (symbol_attribute * attr, sym_flavor f, locus * where)\n   if (attr->flavor != FL_UNKNOWN)\n     {\n       if (where == NULL)\n-\twhere = gfc_current_locus ();\n+\twhere = &gfc_current_locus;\n \n       gfc_error (\"%s attribute conflicts with %s attribute at %L\",\n \t\t gfc_code2string (flavors, attr->flavor),\n@@ -913,7 +913,7 @@ gfc_add_procedure (symbol_attribute * attr, procedure_type t, locus * where)\n     return FAILURE;\n \n   if (where == NULL)\n-    where = gfc_current_locus ();\n+    where = &gfc_current_locus;\n \n   if (attr->proc != PROC_UNKNOWN)\n     {\n@@ -951,7 +951,7 @@ gfc_add_intent (symbol_attribute * attr, sym_intent intent, locus * where)\n     }\n \n   if (where == NULL)\n-    where = gfc_current_locus ();\n+    where = &gfc_current_locus;\n \n   gfc_error (\"INTENT (%s) conflicts with INTENT(%s) at %L\",\n \t     gfc_intent_string (attr->intent),\n@@ -974,7 +974,7 @@ gfc_add_access (symbol_attribute * attr, gfc_access access, locus * where)\n     }\n \n   if (where == NULL)\n-    where = gfc_current_locus ();\n+    where = &gfc_current_locus;\n   gfc_error (\"ACCESS specification at %L was already specified\", where);\n \n   return FAILURE;\n@@ -990,7 +990,7 @@ gfc_add_explicit_interface (gfc_symbol * sym, ifsrc source,\n     return FAILURE;\n \n   if (where == NULL)\n-    where = gfc_current_locus ();\n+    where = &gfc_current_locus;\n \n   if (sym->attr.if_source != IFSRC_UNKNOWN\n       && sym->attr.if_source != IFSRC_DECL)\n@@ -1019,7 +1019,7 @@ gfc_add_type (gfc_symbol * sym, gfc_typespec * ts, locus * where)\n     return FAILURE;*/\n \n   if (where == NULL)\n-    where = gfc_current_locus ();\n+    where = &gfc_current_locus;\n \n   if (sym->ts.type != BT_UNKNOWN)\n     {\n@@ -1221,7 +1221,7 @@ gfc_add_component (gfc_symbol * sym, const char *name, gfc_component ** componen\n     tail->next = p;\n \n   strcpy (p->name, name);\n-  p->loc = *gfc_current_locus ();\n+  p->loc = gfc_current_locus;\n \n   *component = p;\n   return SUCCESS;\n@@ -1565,7 +1565,7 @@ gfc_reference_st_label (gfc_st_label * lp, gfc_sl_type type)\n   else\n     {\n       label_type = lp->referenced;\n-      lp->where = *gfc_current_locus ();\n+      lp->where = gfc_current_locus;\n     }\n \n   if (label_type == ST_LABEL_FORMAT && type == ST_LABEL_TARGET)\n@@ -1811,7 +1811,7 @@ gfc_new_symbol (const char *name, gfc_namespace * ns)\n   gfc_clear_attr (&p->attr);\n   p->ns = ns;\n \n-  p->declared_at = *gfc_current_locus ();\n+  p->declared_at = gfc_current_locus;\n \n   if (strlen (name) > GFC_MAX_SYMBOL_LEN)\n     gfc_internal_error (\"new_symbol(): Symbol name too long\");"}]}