{"sha": "60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBjZjI1M2E4YjFlYmFhYmY2ZGQ0NzZhMTE3N2EyNGFiN2Y2ZDQ4Yw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-09-22T20:19:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-09-22T20:19:39Z"}, "message": "opts-common.c (prune_options): Make static.\n\n\t* opts-common.c (prune_options): Make static.  Work with decoded\n\toptions.\n\t(decode_cmdline_options_to_array): Call prune_options.  Don't\n\tresize option array here.\n\t* opts.h (prune_options): Remove prototype.\n\t* gcc.c (process_command): Take decoded options; don't call\n\tdecode_cmdline_options_to_array here.  Use decoded options for\n\targv[0].\n\t(main): Call decode_cmdline_options_to_array here instead of\n\tprune_options.  Update call to process_command.\n\t* config/darwin-driver.c: Include opts.h.\n\t(darwin_default_min_version): Work with decoded options.  Don't\n\thandle -b or -V here.\n\t* config/darwin.h (darwin_default_min_version): Update prototype.\n\t(GCC_DRIVER_HOST_INITIALIZATION): Update call to\n\tdarwin_default_min_version.\n\t* config/i386/cygwin.h (mingw_scan): Update prototype.\n\t(GCC_DRIVER_HOST_INITIALIZATION): Update call to mingw_scan.\n\t* config/i386/cygwin1.c: Include opts.h.\n\t(mingw_scan): Work with decoded options.\n\t* config/i386/t-cygwin (cygwin1.o): Update dependencies.\n\t* config/t-darwin (darwin-driver.o): Update dependencies.\n\nFrom-SVN: r164532", "tree": {"sha": "6f696b6dcc2f7574f8c3f96ec2645c09aa05edd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f696b6dcc2f7574f8c3f96ec2645c09aa05edd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e200444e3bf13cabbb9ad5bd29fdc840f82462a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e200444e3bf13cabbb9ad5bd29fdc840f82462a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e200444e3bf13cabbb9ad5bd29fdc840f82462a8"}], "stats": {"total": 343, "additions": 166, "deletions": 177}, "files": [{"sha": "83ca51b6fcfcc7414a5efd41ea14e722b12c5b9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "patch": "@@ -1,3 +1,28 @@\n+2010-09-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* opts-common.c (prune_options): Make static.  Work with decoded\n+\toptions.\n+\t(decode_cmdline_options_to_array): Call prune_options.  Don't\n+\tresize option array here.\n+\t* opts.h (prune_options): Remove prototype.\n+\t* gcc.c (process_command): Take decoded options; don't call\n+\tdecode_cmdline_options_to_array here.  Use decoded options for\n+\targv[0].\n+\t(main): Call decode_cmdline_options_to_array here instead of\n+\tprune_options.  Update call to process_command.\n+\t* config/darwin-driver.c: Include opts.h.\n+\t(darwin_default_min_version): Work with decoded options.  Don't\n+\thandle -b or -V here.\n+\t* config/darwin.h (darwin_default_min_version): Update prototype.\n+\t(GCC_DRIVER_HOST_INITIALIZATION): Update call to\n+\tdarwin_default_min_version.\n+\t* config/i386/cygwin.h (mingw_scan): Update prototype.\n+\t(GCC_DRIVER_HOST_INITIALIZATION): Update call to mingw_scan.\n+\t* config/i386/cygwin1.c: Include opts.h.\n+\t(mingw_scan): Work with decoded options.\n+\t* config/i386/t-cygwin (cygwin1.o): Update dependencies.\n+\t* config/t-darwin (darwin-driver.o): Update dependencies.\n+\n 2010-09-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* common.opt (-assemble, -compile, -coverage, -debug, -dump,"}, {"sha": "099226c25d323852446aa7b76f1d753286f9f3db", "filename": "gcc/config/darwin-driver.c", "status": "modified", "additions": 27, "deletions": 37, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fconfig%2Fdarwin-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fconfig%2Fdarwin-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-driver.c?ref=60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"gcc.h\"\n+#include \"opts.h\"\n #include <sys/sysctl.h>\n #include \"xregex.h\"\n \n@@ -32,46 +33,30 @@ along with GCC; see the file COPYING3.  If not see\n    of the system on which the compiler is running.  */\n \n void\n-darwin_default_min_version (int * argc_p, char *** argv_p)\n+darwin_default_min_version (unsigned int *decoded_options_count,\n+\t\t\t    struct cl_decoded_option **decoded_options)\n {\n-  const int argc = *argc_p;\n-  char ** const argv = *argv_p;\n-  int i;\n+  const unsigned int argc = *decoded_options_count;\n+  struct cl_decoded_option *const argv = *decoded_options;\n+  unsigned int i;\n   char osversion[32];\n   size_t osversion_len = sizeof (osversion) - 1;\n   static int osversion_name[2] = { CTL_KERN, KERN_OSRELEASE };\n   char * version_p;\n   char * version_pend;\n   int major_vers;\n   char minor_vers[6];\n-  static char new_flag[sizeof (\"-mmacosx-version-min=10.0.0\") + 6];\n+  static char new_flag[sizeof (\"10.0.0\") + 6];\n \n   /* If the command-line is empty, just return.  */\n   if (argc <= 1)\n     return;\n-  /* Don't do this if the user has specified -b or -V at the start\n-     of the command-line.  */\n-  if (argv[1][0] == '-'\n-      && (argv[1][1] == 'V' ||\n-\t  ((argv[1][1] == 'b') && (NULL != strchr(argv[1] + 2,'-')))))\n-    return;\n   \n   /* Don't do this if the user specified -mmacosx-version-min= or\n      -mno-macosx-version-min.  */\n   for (i = 1; i < argc; i++)\n-    if (argv[i][0] == '-')\n-      {\n-\tconst char * const p = argv[i];\n-\tif (strncmp (p, \"-mno-macosx-version-min\", 23) == 0\n-\t    || strncmp (p, \"-mmacosx-version-min\", 20) == 0)\n-\t  return;\n-\t\n-\t/* It doesn't count if it's an argument to a different switch.  */\n-\tif (p[0] == '-'\n-\t    && ((SWITCH_TAKES_ARG (p[1]) > (p[2] != 0))\n-\t\t|| WORD_SWITCH_TAKES_ARG (p + 1)))\n-\t  i++;\n-      }\n+    if (argv[i].opt_index == OPT_mmacosx_version_min_)\n+      return;\n \n   /* Retrieve the deployment target from the environment and insert\n      it as a flag.  */\n@@ -84,12 +69,14 @@ darwin_default_min_version (int * argc_p, char *** argv_p)\n \t   to ignore the environment variable, as if it was never set.  */\n \t&& macosx_deployment_target[0])\n       {\n-\t++*argc_p;\n-\t*argv_p = XNEWVEC (char *, *argc_p);\n-\t(*argv_p)[0] = argv[0];\n-\t(*argv_p)[1] = concat (\"-mmacosx-version-min=\",\n-\t\t\t       macosx_deployment_target, NULL);\n-\tmemcpy (*argv_p + 2, argv + 1, (argc - 1) * sizeof (char *));\n+\t++*decoded_options_count;\n+\t*decoded_options = XNEWVEC (struct cl_decoded_option,\n+\t\t\t\t    *decoded_options_count);\n+\t(*decoded_options)[0] = argv[0];\n+\tgenerate_option (OPT_mmacosx_version_min_, macosx_deployment_target,\n+\t\t\t 1, CL_DRIVER, &(*decoded_options)[1]);\n+\tmemcpy (*decoded_options + 2, argv + 1,\n+\t\t(argc - 1) * sizeof (struct cl_decoded_option *));\n \treturn;\n       }\n   }\n@@ -128,17 +115,20 @@ darwin_default_min_version (int * argc_p, char *** argv_p)\n   if (major_vers - 4 <= 4)\n     /* On 10.4 and earlier, the old linker is used which does not\n        support three-component system versions.  */\n-    sprintf (new_flag, \"-mmacosx-version-min=10.%d\", major_vers - 4);\n+    sprintf (new_flag, \"10.%d\", major_vers - 4);\n   else\n-    sprintf (new_flag, \"-mmacosx-version-min=10.%d.%s\", major_vers - 4,\n+    sprintf (new_flag, \"10.%d.%s\", major_vers - 4,\n \t     minor_vers);\n \n   /* Add the new flag.  */\n-  ++*argc_p;\n-  *argv_p = XNEWVEC (char *, *argc_p);\n-  (*argv_p)[0] = argv[0];\n-  (*argv_p)[1] = new_flag;\n-  memcpy (*argv_p + 2, argv + 1, (argc - 1) * sizeof (char *));\n+  ++*decoded_options_count;\n+  *decoded_options = XNEWVEC (struct cl_decoded_option,\n+\t\t\t      *decoded_options_count);\n+  (*decoded_options)[0] = argv[0];\n+  generate_option (OPT_mmacosx_version_min_, new_flag,\n+\t\t   1, CL_DRIVER, &(*decoded_options)[1]);\n+  memcpy (*decoded_options + 2, argv + 1,\n+\t  (argc - 1) * sizeof (struct cl_decoded_option *));\n   return;\n   \n  parse_failed:"}, {"sha": "f0ff9010b9346faba17e797823146d60ccfabf7e", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "patch": "@@ -1059,9 +1059,10 @@ extern int flag_apple_kext;\n #define TARGET_HAS_TARGETCM 1\n \n #ifndef CROSS_DIRECTORY_STRUCTURE\n-extern void darwin_default_min_version (int * argc, char *** argv);\n+extern void darwin_default_min_version (unsigned int *decoded_options_count,\n+\t\t\t\t\tstruct cl_decoded_option **decoded_options);\n #define GCC_DRIVER_HOST_INITIALIZATION \\\n-  darwin_default_min_version (&argc, &argv)\n+  darwin_default_min_version (&decoded_options_count, &decoded_options)\n #endif /* CROSS_DIRECTORY_STRUCTURE */\n \n /* The Apple assembler and linker do not support constructor priorities.  */"}, {"sha": "67308fc7dff50a778744e71ff0d73a7aebe7cc75", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "patch": "@@ -252,12 +252,13 @@ char *cvt_to_mingw[] =\n #undef GEN_CVT_ARRAY\n #endif /*GEN_CVT_ARRAY*/\n \n-void mingw_scan (int, const char * const *, const char **);\n+void mingw_scan (unsigned int, const struct cl_decoded_option *,\n+\t\t const char **);\n #if 1\n #define GCC_DRIVER_HOST_INITIALIZATION \\\n do \\\n { \\\n-  mingw_scan(argc, (const char * const *) argv, &spec_machine); \\\n+  mingw_scan (decoded_options_count, decoded_options, &spec_machine);\t\\\n   } \\\n while (0)\n #else\n@@ -277,7 +278,7 @@ do \\\n   add_prefix (&startfile_prefixes,\\\n \t      concat (standard_startfile_prefix, \"w32api\", NULL),\\\n \t      \"GCC\", PREFIX_PRIORITY_LAST, 0, NULL);\\\n-  mingw_scan(argc, (const char * const *) argv, &spec_machine); \\\n+  mingw_scan (decoded_options_count, decoded_options, &spec_machine);\t\\\n   } \\\n while (0)\n #endif"}, {"sha": "99d9d8f82439cbc999a4908a67747b9444de1a3d", "filename": "gcc/config/i386/cygwin1.c", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fconfig%2Fi386%2Fcygwin1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fconfig%2Fi386%2Fcygwin1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin1.c?ref=60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "patch": "@@ -22,32 +22,42 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"opts.h\"\n #include <string.h>\n \n void\n-mingw_scan (int argc ATTRIBUTE_UNUSED,\n-            const char *const *argv,\n+mingw_scan (unsigned int decoded_options_count,\n+\t    const struct cl_decoded_option *decoded_options,\n             const char **spec_machine)\n {\n+  unsigned int i;\n   putenv (xstrdup (\"GCC_CYGWIN_MINGW=0\"));\n  \n-  while (*++argv)\n-    if (strcmp (*argv, \"-mno-win32\") == 0)\n-      putenv (xstrdup (\"GCC_CYGWIN_WIN32=0\"));\n-    else if (strcmp (*argv, \"-mwin32\") == 0)\n-      putenv (xstrdup (\"GCC_CYGWIN_WIN32=1\"));\n-    else if (strcmp (*argv, \"-mno-cygwin\") == 0)\n+  for (i = 1; i < decoded_options_count; i++)\n+    switch (decoded_options[i].opt_index)\n       {\n-\tchar *p = strstr (*spec_machine, \"-cygwin\");\n-\tif (p)\n+      case OPT_mwin32:\n+\tif (decoded_options[i].value == 0)\n+\t  putenv (xstrdup (\"GCC_CYGWIN_WIN32=0\"));\n+\telse\n+\t  putenv (xstrdup (\"GCC_CYGWIN_WIN32=1\"));\n+\tbreak;\n+\n+      case OPT_mcygwin:\n+\tif (decoded_options[i].value == 0)\n \t  {\n-\t    int len = p - *spec_machine;\n-\t    char *s = XNEWVEC (char, strlen (*spec_machine) + 3);\n-\t    memcpy (s, *spec_machine, len);\n-\t    strcpy (s + len, \"-mingw32\");\n-\t    *spec_machine = s;\n+\t    char *p = strstr (*spec_machine, \"-cygwin\");\n+\t    if (p)\n+\t      {\n+\t\tint len = p - *spec_machine;\n+\t\tchar *s = XNEWVEC (char, strlen (*spec_machine) + 3);\n+\t\tmemcpy (s, *spec_machine, len);\n+\t\tstrcpy (s + len, \"-mingw32\");\n+\t\t*spec_machine = s;\n+\t      }\n+\t    putenv (xstrdup (\"GCC_CYGWIN_MINGW=1\"));\n \t  }\n-\tputenv (xstrdup (\"GCC_CYGWIN_MINGW=1\"));\n+\tbreak;\n       }\n   return;\n }"}, {"sha": "a01219cfb9d4e87031970874fa8f724903ca76f7", "filename": "gcc/config/i386/t-cygwin", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fconfig%2Fi386%2Ft-cygwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fconfig%2Fi386%2Ft-cygwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-cygwin?ref=60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2008, 2009\n+# Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2008, 2009, 2010\n # Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n@@ -24,7 +24,7 @@ LIBGCC2_INCLUDES += -I$(srcdir)/../winsup/include \\\n \t-I$(srcdir)/../winsup/cygwin/include\n \n cygwin1.o: $(srcdir)/config/i386/cygwin1.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  $(TM_H) $(TM_P_H)\n+  $(TM_H) $(TM_P_H) opts.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t$(srcdir)/config/i386/cygwin1.c\n "}, {"sha": "70c0da54bbcffecf54281cb30cee71c3053385b0", "filename": "gcc/config/t-darwin", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fconfig%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fconfig%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-darwin?ref=60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "patch": "@@ -36,7 +36,7 @@ darwin-f.o: $(srcdir)/config/darwin-f.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\n \t  $(srcdir)/config/darwin-f.c $(PREPROCESSOR_DEFINES)\n \n darwin-driver.o: $(srcdir)/config/darwin-driver.c \\\n-  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H)\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(GCC_H) opts.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  $(srcdir)/config/darwin-driver.c\n "}, {"sha": "2614faf5b7bb9e24d08bb773c243f28cc310e03b", "filename": "gcc/gcc.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "patch": "@@ -261,7 +261,7 @@ static void display_help (void);\n static void add_preprocessor_option (const char *, int);\n static void add_assembler_option (const char *, int);\n static void add_linker_option (const char *, int);\n-static void process_command (int, const char **);\n+static void process_command (unsigned int, struct cl_decoded_option *);\n static int execute (void);\n static void alloc_args (void);\n static void clear_args (void);\n@@ -3506,16 +3506,16 @@ driver_handle_option (const struct cl_decoded_option *decoded,\n    Store its length in `n_switches'.  */\n \n static void\n-process_command (int argc, const char **argv)\n+process_command (unsigned int decoded_options_count,\n+\t\t struct cl_decoded_option *decoded_options)\n {\n   const char *temp;\n   char *temp1;\n   const char *tooldir_prefix;\n   char *(*get_relative_prefix) (const char *, const char *,\n \t\t\t\tconst char *) = NULL;\n   struct cl_option_handlers handlers;\n-  struct cl_decoded_option *decoded_options;\n-  unsigned int decoded_options_count, j;\n+  unsigned int j;\n \n   GET_ENVIRONMENT (gcc_exec_prefix, \"GCC_EXEC_PREFIX\");\n \n@@ -3536,9 +3536,6 @@ process_command (int argc, const char **argv)\n \t}\n     }\n \n-  decode_cmdline_options_to_array (argc, argv, CL_DRIVER,\n-\t\t\t\t   &decoded_options, &decoded_options_count);\n-\n   /* Handle any -no-canonical-prefixes flag early, to assign the function\n      that builds relative prefixes.  This function creates default search\n      paths that are needed later in normal option handling.  */\n@@ -3555,17 +3552,18 @@ process_command (int argc, const char **argv)\n     get_relative_prefix = make_relative_prefix;\n \n   /* Set up the default search paths.  If there is no GCC_EXEC_PREFIX,\n-     see if we can create it from the pathname specified in argv[0].  */\n+     see if we can create it from the pathname specified in\n+     decoded_options[0].arg.  */\n \n   gcc_libexec_prefix = standard_libexec_prefix;\n #ifndef VMS\n   /* FIXME: make_relative_prefix doesn't yet work for VMS.  */\n   if (!gcc_exec_prefix)\n     {\n-      gcc_exec_prefix = get_relative_prefix (argv[0],\n+      gcc_exec_prefix = get_relative_prefix (decoded_options[0].arg,\n \t\t\t\t\t     standard_bindir_prefix,\n \t\t\t\t\t     standard_exec_prefix);\n-      gcc_libexec_prefix = get_relative_prefix (argv[0],\n+      gcc_libexec_prefix = get_relative_prefix (decoded_options[0].arg,\n \t\t\t\t\t     standard_bindir_prefix,\n \t\t\t\t\t     standard_libexec_prefix);\n       if (gcc_exec_prefix)\n@@ -3592,7 +3590,8 @@ process_command (int argc, const char **argv)\n #endif\n   /* From this point onward, gcc_exec_prefix is non-null if the toolchain\n      is relocated. The toolchain was either relocated using GCC_EXEC_PREFIX\n-     or an automatically created GCC_EXEC_PREFIX from argv[0].  */\n+     or an automatically created GCC_EXEC_PREFIX from\n+     decoded_options[0].arg.  */\n \n   /* Do language-specific adjustment/addition of flags.  */\n   lang_specific_driver (&decoded_options, &decoded_options_count,\n@@ -3888,7 +3887,7 @@ process_command (int argc, const char **argv)\n      ``make_relative_prefix'' is not compiled for VMS, so don't call it.  */\n   if (target_system_root && !target_system_root_changed && gcc_exec_prefix)\n     {\n-      char *tmp_prefix = get_relative_prefix (argv[0],\n+      char *tmp_prefix = get_relative_prefix (decoded_options[0].arg,\n \t\t\t\t\t      standard_bindir_prefix,\n \t\t\t\t\t      target_system_root);\n       if (tmp_prefix && access_check (tmp_prefix, F_OK) == 0)\n@@ -6099,6 +6098,8 @@ main (int argc, char **argv)\n   const char *p;\n   struct user_specs *uptr;\n   char **old_argv = argv;\n+  struct cl_decoded_option *decoded_options;\n+  unsigned int decoded_options_count;\n \n   /* Initialize here, not in definition.  The IRIX 6 O32 cc sometimes chokes\n      on ?: in file-scope variable initializations.  */\n@@ -6117,7 +6118,10 @@ main (int argc, char **argv)\n   if (argv != old_argv)\n     at_file_supplied = true;\n \n-  prune_options (&argc, &argv);\n+  decode_cmdline_options_to_array (argc, CONST_CAST2 (const char **, char **,\n+\t\t\t\t\t\t      argv),\n+\t\t\t\t   CL_DRIVER,\n+\t\t\t\t   &decoded_options, &decoded_options_count);\n \n #ifdef GCC_DRIVER_HOST_INITIALIZATION\n   /* Perform host dependent initialization when needed.  */\n@@ -6207,7 +6211,7 @@ main (int argc, char **argv)\n      Make a table of specified input files (infiles, n_infiles).\n      Decode switches that are handled locally.  */\n \n-  process_command (argc, CONST_CAST2 (const char **, char **, argv));\n+  process_command (decoded_options_count, decoded_options);\n \n   /* Initialize the vector of specs to just the default.\n      This means one element containing 0s, as a terminator.  */"}, {"sha": "078610fdb579cbbe8be2ec177c1b41e78d6aed0d", "filename": "gcc/opts-common.c", "status": "modified", "additions": 60, "deletions": 101, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "patch": "@@ -27,6 +27,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\" /* For SWITCH_TAKES_ARG, WORD_SWITCH_TAKES_ARG and\n \t\t   TARGET_OPTION_TRANSLATE_TABLE.  */\n \n+static void prune_options (struct cl_decoded_option **, unsigned int *);\n+\n /* Perform a binary search to find which option the command-line INPUT\n    matches.  Returns its index in the option array, and\n    OPT_SPECIAL_unknown on failure.\n@@ -698,10 +700,9 @@ decode_cmdline_options_to_array (unsigned int argc, const char **argv,\n \n   if (argv_copied)\n     free (argv);\n-  opt_array = XRESIZEVEC (struct cl_decoded_option, opt_array,\n-\t\t\t  num_decoded_options);\n   *decoded_options = opt_array;\n   *decoded_options_count = num_decoded_options;\n+  prune_options (decoded_options, decoded_options_count);\n }\n \n /* Return true if NEXT_OPT_IDX cancels OPT_IDX.  Return false if the\n@@ -724,119 +725,77 @@ cancel_option (int opt_idx, int next_opt_idx, int orig_next_opt_idx)\n \n /* Filter out options canceled by the ones after them.  */\n \n-void\n-prune_options (int *argcp, char ***argvp)\n+static void\n+prune_options (struct cl_decoded_option **decoded_options,\n+\t       unsigned int *decoded_options_count)\n {\n-  int argc = *argcp;\n-  int *options = XNEWVEC (int, argc);\n-  /* We will only return this replacement argv if we remove at least\n-     one argument, so it does not need to be size (argc + 1) to\n-     make room for the terminating NULL because we will always have\n-     freed up at least one slot when we end up using it at all.  */\n-  char **argv = XNEWVEC (char *, argc);\n-  int i, arg_count, need_prune = 0;\n+  unsigned int old_decoded_options_count = *decoded_options_count;\n+  struct cl_decoded_option *old_decoded_options = *decoded_options;\n+  unsigned int new_decoded_options_count;\n+  struct cl_decoded_option *new_decoded_options\n+    = XNEWVEC (struct cl_decoded_option, old_decoded_options_count);\n+  unsigned int i;\n   const struct cl_option *option;\n-  size_t opt_index;\n-\n-  /* Scan all arguments.  */\n-  for (i = 1; i < argc; i++)\n-    {\n-      int value = 1;\n-      const char *opt = (*argvp) [i];\n-\n-      opt_index = find_opt (opt + 1, -1);\n-      if (opt_index == OPT_SPECIAL_unknown\n-\t  && (opt[1] == 'W' || opt[1] == 'f' || opt[1] == 'm')\n-\t  && opt[2] == 'n' && opt[3] == 'o' && opt[4] == '-')\n-\t{\n-\t  char *dup;\n-\n-\t  /* Drop the \"no-\" from negative switches.  */\n-\t  size_t len = strlen (opt) - 3;\n-\n-\t  dup = XNEWVEC (char, len + 1);\n-\t  dup[0] = '-';\n-\t  dup[1] = opt[1];\n-\t  memcpy (dup + 2, opt + 5, len - 2 + 1);\n-\t  opt = dup;\n-\t  value = 0;\n-\t  opt_index = find_opt (opt + 1, -1);\n-\t  free (dup);\n-\t}\n-\n-      if (opt_index == OPT_SPECIAL_unknown)\n-\t{\n-cont:\n-\t  options [i] = 0;\n-\t  continue;\n-\t}\n-\n-      option = &cl_options[opt_index];\n-      if (option->neg_index < 0)\n-\tgoto cont;\n-\n-      /* Skip joined switches.  */\n-      if ((option->flags & CL_JOINED))\n-\tgoto cont;\n-\n-      /* Reject negative form of switches that don't take negatives as\n-\t unrecognized.  */\n-      if (!value && (option->flags & CL_REJECT_NEGATIVE))\n-\tgoto cont;\n-\n-      options [i] = (int) opt_index;\n-      need_prune |= options [i];\n-    }\n-\n-  if (!need_prune)\n-    goto done;\n \n   /* Remove arguments which are negated by others after them.  */\n-  argv [0] = (*argvp) [0];\n-  arg_count = 1;\n-  for (i = 1; i < argc; i++)\n+  new_decoded_options_count = 0;\n+  for (i = 0; i < old_decoded_options_count; i++)\n     {\n-      int j, opt_idx;\n+      unsigned int j, opt_idx, next_opt_idx;\n+\n+      if (old_decoded_options[i].errors & ~CL_ERR_WRONG_LANG)\n+\tgoto keep;\n \n-      opt_idx = options [i];\n-      if (opt_idx)\n+      opt_idx = old_decoded_options[i].opt_index;\n+      switch (opt_idx)\n \t{\n-\t  int next_opt_idx;\n-\t  for (j = i + 1; j < argc; j++)\n+\tcase OPT_SPECIAL_unknown:\n+\tcase OPT_SPECIAL_ignore:\n+\tcase OPT_SPECIAL_program_name:\n+\tcase OPT_SPECIAL_input_file:\n+\t  goto keep;\n+\n+\tdefault:\n+\t  gcc_assert (opt_idx < cl_options_count);\n+\t  option = &cl_options[opt_idx];\n+\t  if (option->neg_index < 0)\n+\t    goto keep;\n+\n+\t  /* Skip joined switches.  */\n+\t  if ((option->flags & CL_JOINED))\n+\t    goto keep;\n+\n+\t  for (j = i + 1; j < old_decoded_options_count; j++)\n \t    {\n-\t      next_opt_idx = options [j];\n-\t      if (next_opt_idx\n-\t\t  && cancel_option (opt_idx, next_opt_idx,\n-\t\t\t\t    next_opt_idx))\n+\t      if (old_decoded_options[j].errors & ~CL_ERR_WRONG_LANG)\n+\t\tcontinue;\n+\t      next_opt_idx = old_decoded_options[j].opt_index;\n+\t      if (next_opt_idx >= cl_options_count)\n+\t\tcontinue;\n+\t      if (cl_options[next_opt_idx].neg_index < 0)\n+\t\tcontinue;\n+\t      if ((cl_options[next_opt_idx].flags & CL_JOINED))\n+\t\t  continue;\n+\t      if (cancel_option (opt_idx, next_opt_idx, next_opt_idx))\n \t\tbreak;\n \t    }\n-\t}\n-      else\n-\tgoto keep;\n-\n-      if (j == argc)\n-\t{\n+\t  if (j == old_decoded_options_count)\n+\t    {\n keep:\n-\t  argv [arg_count] = (*argvp) [i];\n-\t  arg_count++;\n+\t      new_decoded_options[new_decoded_options_count]\n+\t\t= old_decoded_options[i];\n+\t      new_decoded_options_count++;\n+\t    }\n+\t  break;\n \t}\n     }\n \n-  if (arg_count != argc)\n-    {\n-      *argcp = arg_count;\n-      *argvp = argv;\n-      /* Add NULL-termination.  Guaranteed not to overflow because\n-\t arg_count here can only be less than argc.  */\n-      argv[arg_count] = 0;\n-    }\n-  else\n-    {\n-done:\n-      free (argv);\n-    }\n-\n-  free (options);\n+  free (old_decoded_options);\n+  new_decoded_options = XRESIZEVEC (struct cl_decoded_option,\n+\t\t\t\t    new_decoded_options,\n+\t\t\t\t    new_decoded_options_count);\n+  *decoded_options = new_decoded_options;\n+  *decoded_options_count = new_decoded_options_count;\n }\n \n /* Handle option DECODED for the language indicated by LANG_MASK,"}, {"sha": "c4d253ff04a3183709f1052917e98c1661b80ec4", "filename": "gcc/opts.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=60cf253a8b1ebaabf6dd476a1177a24ab7f6d48c", "patch": "@@ -206,7 +206,6 @@ extern void decode_cmdline_options_to_array (unsigned int argc,\n \t\t\t\t\t     unsigned int lang_mask,\n \t\t\t\t\t     struct cl_decoded_option **decoded_options,\n \t\t\t\t\t     unsigned int *decoded_options_count);\n-extern void prune_options (int *argcp, char ***argvp);\n extern void decode_options (unsigned int argc, const char **argv,\n \t\t\t    struct cl_decoded_option **decoded_options,\n \t\t\t    unsigned int *decoded_options_count);"}]}