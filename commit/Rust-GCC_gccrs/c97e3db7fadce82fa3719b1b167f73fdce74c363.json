{"sha": "c97e3db7fadce82fa3719b1b167f73fdce74c363", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk3ZTNkYjdmYWRjZTgyZmEzNzE5YjFiMTY3ZjczZmRjZTc0YzM2Mw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-10T14:56:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-10T14:56:57Z"}, "message": "(alpha_sa_size): Need to save $26 if it is used or if any other register is saved...\n\n(alpha_sa_size): Need to save $26 if it is used or if any other\nregister is saved, but not just because a stack space is needed.\n(output_prolog): Add code to probe the stack if we allocate more than\n4096 bytes; required by chapter 7 (for threads).\nKnow when to save $26.\n(output_epilog): Know when to restore $26.\n\nFrom-SVN: r4079", "tree": {"sha": "b795a7c9d20ddd3da48c072e5beda42218f1086f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b795a7c9d20ddd3da48c072e5beda42218f1086f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c97e3db7fadce82fa3719b1b167f73fdce74c363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97e3db7fadce82fa3719b1b167f73fdce74c363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c97e3db7fadce82fa3719b1b167f73fdce74c363", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97e3db7fadce82fa3719b1b167f73fdce74c363/comments", "author": null, "committer": null, "parents": [{"sha": "26958509940f82795f35673f4003a16e60cb5da1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26958509940f82795f35673f4003a16e60cb5da1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26958509940f82795f35673f4003a16e60cb5da1"}], "stats": {"total": 104, "additions": 72, "deletions": 32}, "files": [{"sha": "6ecb98ee46b58be3a7a162d9afeeb73bc686692c", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 72, "deletions": 32, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c97e3db7fadce82fa3719b1b167f73fdce74c363/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c97e3db7fadce82fa3719b1b167f73fdce74c363/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c97e3db7fadce82fa3719b1b167f73fdce74c363", "patch": "@@ -1066,12 +1066,9 @@ alpha_sa_size ()\n     if (! fixed_regs[i] && ! call_used_regs[i] && regs_ever_live[i])\n       size++;\n \n-  /* If we are going to need a frame, we MUST save $26.  */\n-  if (! regs_ever_live[26]\n-      && (size != 0\n-\t  || get_frame_size () != 0\n-\t  || current_function_outgoing_args_size != 0\n-\t  || current_function_pretend_args_size != 0))\n+  /* If some registers were saved but not reg 26, reg 26 must also\n+     be saved, so leave space for it.  */\n+  if (size != 0 && ! regs_ever_live[26])\n     size++;\n \n   return size * 8;\n@@ -1146,27 +1143,57 @@ output_prolog (file, size)\n   /* Put a label after the GP load so we can enter the function at it.  */\n   fprintf (file, \"%s..ng:\\n\", alpha_function_name);\n \n-  /* Adjust the stack by the frame size.  If the frame size is > 32768\n-     bytes, we have to load it into a register first and then subtract\n-     from sp.  Note that we are only allowed to adjust sp once in the\n-     prologue.  */\n+  /* Adjust the stack by the frame size.  If the frame size is > 4096\n+     bytes, we need to be sure we probe somewhere in the first and last\n+     4096 bytes (we can probably get away without the latter test) and\n+     every 8192 bytes in between.  If the frame size is > 32768, we\n+     do this in a loop.  Otherwise, we generate the explicit probe\n+     instructions. \n \n-  if (frame_size > 32768)\n+     Note that we are only allowed to adjust sp once in the prologue.  */\n+\n+  if (frame_size < 32768)\n+    {\n+      if (frame_size > 4096)\n+\t{\n+\t  int probed = 4096;\n+\t  int regnum = 2;\n+\n+\t  fprintf (file, \"\\tldq $%d,-%d($30)\\n\", regnum++, probed);\n+\n+\t  while (probed + 8192 < frame_size)\n+\t    fprintf (file, \"\\tldq $%d,-%d($30)\\n\", regnum++, probed += 8192);\n+\n+\t  if (probed + 4096 < frame_size)\n+\t    fprintf (file, \"\\tldq $%d,-%d($30)\\n\", regnum++, probed += 4096);\n+\n+\t  if (regnum > 9)\n+\t    abort ();\n+\t}\n+\n+      if (frame_size != 0)\n+\tfprintf (file, \"\\tlda $30,-%d($30)\\n\", frame_size);\n+    }\n+  else\n     {\n-      HOST_WIDE_INT low = (frame_size & 0xffff) - 2 * (frame_size & 0x8000);\n-      HOST_WIDE_INT tmp1 = frame_size - low;\n+      /* Here we generate code to set R4 to SP + 4096 and set R5 to the\n+\t number of 8192 byte blocks to probe.  We then probe each block\n+\t in the loop and then set SP to the proper location.  If the\n+\t amount remaining is > 4096, we have to do one more probe.\n+\n+\t This is complicated by the code we would generate if\n+\t the number of blocks > 32767.  */\n+\n+      HOST_WIDE_INT blocks = (frame_size + 4096) / 8192;\n+      HOST_WIDE_INT leftover = frame_size + 4096 - blocks * 8192;\n+      HOST_WIDE_INT low = (blocks & 0xffff) - 2 * (blocks & 0x8000);\n+      HOST_WIDE_INT tmp1 = blocks - low;\n       HOST_WIDE_INT high\n-\t= ((tmp1 >> 16) & 0xfff) - 2 * ((tmp1 >> 16) & 0x8000);\n-      HOST_WIDE_INT tmp2 = frame_size - (high << 16) - low;\n+\t= ((tmp1 >> 16) & 0xffff) - 2 * ((tmp1 >> 16) & 0x8000);\n+      HOST_WIDE_INT tmp2 = blocks - (high << 16) - low;\n       HOST_WIDE_INT extra = 0;\n       int in_reg = 31;\n \n-      /* We haven't written code to handle frames > 4GB.  */\n-#if HOST_BITS_PER_LONG_INT == 64\n-      if ((unsigned HOST_WIDE_INT) frame_size >> 32 != 0)\n-\tabort ();\n-#endif\n-\n       if (tmp2)\n \t{\n \t  extra = 0x4000;\n@@ -1176,29 +1203,42 @@ output_prolog (file, size)\n \n       if (low != 0)\n \t{\n-\t  fprintf (file, \"\\tlda $28,%d($%d)\\n\", low, in_reg);\n-\t  in_reg = 28;\n+\t  if (low < 255)\n+\t    fprintf (file, \"\\tbis $31,%d,$5\\n\", low);\n+\t  else\n+\t    fprintf (file, \"\\tlda $5,%d($31)\\n\", low);\n+\t  in_reg = 5;\n \t}\n \n       if (extra)\n \t{\n-\t  fprintf (file, \"\\tldah $28,%d($%d)\\n\", extra, in_reg);\n-\t  in_reg = 28;\n+\t  fprintf (file, \"\\tldah $5,%d($%d)\\n\", extra, in_reg);\n+\t  in_reg = 5;\n \t}\n \n-      fprintf (file, \"\\tldah $28,%d($%d)\\n\", high, in_reg);\n-      fprintf (file, \"\\tsubq $30,$28,$30\\n\");\n+      if (high)\n+\tfprintf (file, \"\\tldah $5,%d($%d)\\n\", high, in_reg);\n+\n+      fprintf (file, \"\\tlda $4,4096($30)\\n\");\n+      fprintf (file, \"%s..sc:\\n\", alpha_function_name);\n+      fprintf (file, \"\\tldq $6,-8192($4)\\n\");\n+      fprintf (file, \"\\tsubq $5,1,$5\\n\");\n+      fprintf (file, \"\\tlda $4,-8192($4)\\n\");\n+      fprintf (file, \"\\tbne $5,%s..sc\\n\", alpha_function_name);\n+      fprintf (file, \"\\tlda $30,-%d($4)\\n\", leftover);\n+\n+      if (leftover > 4096)\n+\tfprintf (file, \"\\tldq $2,%d(sp)\\n\", leftover - 4096);\n     }\n-  else if (frame_size)\n-    fprintf (file, \"\\tlda $30,-%d($30)\\n\", frame_size);\n \n   /* Describe our frame.  */\n   fprintf (file, \"\\t.frame $%d,%d,$26,%d\\n\", \n \t   frame_pointer_needed ? FRAME_POINTER_REGNUM : STACK_POINTER_REGNUM,\n \t   frame_size, current_function_pretend_args_size);\n     \n-  /* Save register 26 if we have a frame.  */\n-  if (frame_size != 0)\n+  /* Save register 26 if it is used or if any other register needs to\n+     be saved.  */\n+  if (regs_ever_live[26] || alpha_sa_size () != 0)\n     {\n       reg_mask |= 1 << 26;\n       fprintf (file, \"\\tstq $26,%d($30)\\n\", reg_offset);\n@@ -1272,7 +1312,7 @@ output_epilog (file, size)\n \n       /* Restore all the registers, starting with the return address\n \t register.  */\n-      if (frame_size != 0)\n+      if (regs_ever_live[26] || alpha_sa_size () != 0)\n \t{\n \t  fprintf (file, \"\\tldq $26,%d($30)\\n\", reg_offset);\n \t  reg_offset += 8;"}]}