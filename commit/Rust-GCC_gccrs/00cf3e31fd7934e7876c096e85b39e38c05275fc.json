{"sha": "00cf3e31fd7934e7876c096e85b39e38c05275fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBjZjNlMzFmZDc5MzRlNzg3NmMwOTZlODViMzllMzhjMDUyNzVmYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-06-20T05:52:43Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-06-20T05:52:43Z"}, "message": "re PR c++/10939 (ICE with templated code)\n\n\tPR c++/10939\n\t* pt.c (tsubst_decl): Do not try to substitute into non-dependent\n\tfunctions.\n\t(value_dependent_expression_p): Correct logic for FUNCTION_DECLs.\n\n\tPR c++/10939\n\t* g++.dg/template/func1.C: New test.\n\nFrom-SVN: r68244", "tree": {"sha": "7b1a1427ec2e377d2ea72a73a148655cd4165f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b1a1427ec2e377d2ea72a73a148655cd4165f8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00cf3e31fd7934e7876c096e85b39e38c05275fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cf3e31fd7934e7876c096e85b39e38c05275fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00cf3e31fd7934e7876c096e85b39e38c05275fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00cf3e31fd7934e7876c096e85b39e38c05275fc/comments", "author": null, "committer": null, "parents": [{"sha": "e2b9853b291bb738919adb4e31990135a6e677e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2b9853b291bb738919adb4e31990135a6e677e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2b9853b291bb738919adb4e31990135a6e677e1"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "32532d886ccb760ee7330bc1e9e13fc09dda9853", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cf3e31fd7934e7876c096e85b39e38c05275fc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cf3e31fd7934e7876c096e85b39e38c05275fc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=00cf3e31fd7934e7876c096e85b39e38c05275fc", "patch": "@@ -1,5 +1,10 @@\n 2003-06-19  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/10939\n+\t* pt.c (tsubst_decl): Do not try to substitute into non-dependent\n+\tfunctions.\n+\t(value_dependent_expression_p): Correct logic for FUNCTION_DECLs.\n+\n \tPR c++/9649\n \t* cp-tree.h (pushdecl_class_level): Change prototype.\n \t(push_class_level_binding): Likewise."}, {"sha": "1a43d020c594ca5053f1e796e3a77969233e035c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cf3e31fd7934e7876c096e85b39e38c05275fc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cf3e31fd7934e7876c096e85b39e38c05275fc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=00cf3e31fd7934e7876c096e85b39e38c05275fc", "patch": "@@ -5909,6 +5909,17 @@ tsubst_decl (tree t, tree args, tree type, tsubst_flags_t complain)\n \tif (TREE_CODE (DECL_TI_TEMPLATE (t)) == TEMPLATE_DECL)\n \t  {\n \t    tree spec;\n+\t    bool dependent_p;\n+\n+\t    /* If T is not dependent, just return it.  We have to\n+\t       increment PROCESSING_TEMPLATE_DECL because\n+\t       value_dependent_expression_p assumes that nothing is\n+\t       dependent when PROCESSING_TEMPLATE_DECL is zero.  */\n+\t    ++processing_template_decl;\n+\t    dependent_p = value_dependent_expression_p (t);\n+\t    --processing_template_decl;\n+\t    if (!dependent_p)\n+\t      return t;\n \n \t    /* Calculate the most general template of which R is a\n \t       specialization, and the complete set of arguments used to\n@@ -11368,8 +11379,8 @@ value_dependent_expression_p (tree expression)\n \n   /* A name declared with a dependent type.  */\n   if (TREE_CODE (expression) == LOOKUP_EXPR\n-      || (DECL_P (expression)\n-\t  && dependent_type_p (TREE_TYPE (expression))))\n+      || (DECL_P (expression) \n+\t  && type_dependent_expression_p (expression)))\n     return true;\n   /* A non-type template parameter.  */\n   if ((TREE_CODE (expression) == CONST_DECL"}, {"sha": "1e4cafa9446811753bfb077ac751d1cb328c5ae6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cf3e31fd7934e7876c096e85b39e38c05275fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cf3e31fd7934e7876c096e85b39e38c05275fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00cf3e31fd7934e7876c096e85b39e38c05275fc", "patch": "@@ -1,5 +1,8 @@\n 2003-06-19  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/10939\n+\t* g++.dg/template/func1.C: New test.\n+\n \tPR c++/9649\n \t* g++.dg/template/static4.C: New test.\n \t* g++.old-deja/g++.other/anon7.C: Remove spurious error messages."}, {"sha": "0d1677060c37f10305bd325d981f1e500c47378e", "filename": "gcc/testsuite/g++.dg/template/func1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00cf3e31fd7934e7876c096e85b39e38c05275fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00cf3e31fd7934e7876c096e85b39e38c05275fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffunc1.C?ref=00cf3e31fd7934e7876c096e85b39e38c05275fc", "patch": "@@ -0,0 +1,13 @@\n+template <typename T1,typename T2>\n+inline void f(const T1&,const T2&) { }\n+\n+template <typename T1,typename T2,void F(const T1&,const T2&)>\n+struct A {\n+    template <typename T> void g(T& i) { }\n+};\n+\n+int main() {\n+    int i;\n+    A<int,int,f> a;\n+    a.g(i);\n+}"}]}