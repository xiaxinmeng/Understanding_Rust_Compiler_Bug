{"sha": "562ff1637faf0ce60e65c13a9a7c27015b6226bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYyZmYxNjM3ZmFmMGNlNjBlNjVjMTNhOWE3YzI3MDE1YjYyMjZiYw==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2002-03-01T05:36:31Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2002-03-01T05:36:31Z"}, "message": "Add pointer support to the reflection code.\n\nFrom-SVN: r50180", "tree": {"sha": "fee50ca42721a37c89d4a83d75b79098c5200676", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fee50ca42721a37c89d4a83d75b79098c5200676"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/562ff1637faf0ce60e65c13a9a7c27015b6226bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/562ff1637faf0ce60e65c13a9a7c27015b6226bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/562ff1637faf0ce60e65c13a9a7c27015b6226bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/562ff1637faf0ce60e65c13a9a7c27015b6226bc/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc36a670f7286d12e924dcf273259a511a96b3a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc36a670f7286d12e924dcf273259a511a96b3a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc36a670f7286d12e924dcf273259a511a96b3a7"}], "stats": {"total": 78, "additions": 49, "deletions": 29}, "files": [{"sha": "e1dd01f08ab75abbac3202a03b7ef059891b6dde", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/562ff1637faf0ce60e65c13a9a7c27015b6226bc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/562ff1637faf0ce60e65c13a9a7c27015b6226bc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=562ff1637faf0ce60e65c13a9a7c27015b6226bc", "patch": "@@ -1,3 +1,16 @@\n+2002-02-28  Anthony Green  <green@redhat.com>\n+\n+\t* java/lang/reflect/natMethod.cc (result): Add void* element.\n+\t(_Jv_CallAnyMethodA): Handle FFI_TYPE_POINTER arguments.  Move\n+\tconstructor test.\n+\n+2002-02-17  Anthony Green  <green@redhat.com>\n+\n+\t* configure.host (FILE): New macro for specifing File\n+\timplementation.\n+\t* configure: Rebuilt.\t\n+\t* configure.in: Use FILE.  Define HAVE_TIME for newlib targets.\n+\n 2002-02-27  Adam Megacz <adam@xwt.org>\n \n \t* java/net/natInetAddress.cc: Changed USE_WINSOCK to WIN32, added"}, {"sha": "d4cbb72ed96e92387897bfc5012d3fbf8f888fee", "filename": "libjava/java/lang/reflect/natMethod.cc", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/562ff1637faf0ce60e65c13a9a7c27015b6226bc/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/562ff1637faf0ce60e65c13a9a7c27015b6226bc/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc?ref=562ff1637faf0ce60e65c13a9a7c27015b6226bc", "patch": "@@ -426,6 +426,7 @@ _Jv_CallAnyMethodA (jobject obj,\n   union\n   {\n     ffi_arg i;\n+    jobject o;\n     jlong l;\n     jfloat f;\n     jdouble d;\n@@ -448,37 +449,43 @@ _Jv_CallAnyMethodA (jobject obj,\n   // a narrowing conversion for jbyte, jchar, etc. results.\n   // Note that boolean is handled either by the FFI_TYPE_SINT8 or\n   // FFI_TYPE_SINT32 case.\n-  switch (rtype->type)\n-    {\n-    case FFI_TYPE_VOID:\n-      break;\n-    case FFI_TYPE_SINT8:\n-      result->b = (jbyte)ffi_result.i;\n-      break;\n-    case FFI_TYPE_SINT16:\n-      result->s = (jshort)ffi_result.i;\n-      break;\n-    case FFI_TYPE_UINT16:\n-      result->c = (jchar)ffi_result.i;\n-      break;\n-    case FFI_TYPE_SINT32:\n-      result->i = (jint)ffi_result.i;\n-      break;\n-    case FFI_TYPE_SINT64:\n-      result->j = (jlong)ffi_result.l;\n-      break;\n-    case FFI_TYPE_FLOAT:\n-      result->f = (jfloat)ffi_result.f;\n-      break;\n-    case FFI_TYPE_DOUBLE:\n-      result->d = (jdouble)ffi_result.d;\n-      break;\n-    default:\n-      JvFail (\"Unknown ffi_call return type\");\n-      break;\n-    }\n   if (is_constructor)\n     result->l = obj;\n+  else\n+    {\n+      switch (rtype->type)\n+\t{\n+\tcase FFI_TYPE_VOID:\n+\t  break;\n+\tcase FFI_TYPE_SINT8:\n+\t  result->b = (jbyte)ffi_result.i;\n+\t  break;\n+\tcase FFI_TYPE_SINT16:\n+\t  result->s = (jshort)ffi_result.i;\n+\t  break;\n+\tcase FFI_TYPE_UINT16:\n+\t  result->c = (jchar)ffi_result.i;\n+\t  break;\n+\tcase FFI_TYPE_SINT32:\n+\t  result->i = (jint)ffi_result.i;\n+\t  break;\n+\tcase FFI_TYPE_SINT64:\n+\t  result->j = (jlong)ffi_result.l;\n+\t  break;\n+\tcase FFI_TYPE_FLOAT:\n+\t  result->f = (jfloat)ffi_result.f;\n+\t  break;\n+\tcase FFI_TYPE_DOUBLE:\n+\t  result->d = (jdouble)ffi_result.d;\n+\t  break;\n+\tcase FFI_TYPE_POINTER:\n+\t  result->l = (jobject)ffi_result.o;\n+\t  break;\n+\tdefault:\n+\t  JvFail (\"Unknown ffi_call return type\");\n+\t  break;\n+\t}\n+    }\n \n   return ex;\n #else"}]}