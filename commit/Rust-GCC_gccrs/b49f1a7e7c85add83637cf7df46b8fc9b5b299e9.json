{"sha": "b49f1a7e7c85add83637cf7df46b8fc9b5b299e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ5ZjFhN2U3Yzg1YWRkODM2MzdjZjdkZjQ2YjhmYzliNWIyOTllOQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2018-11-30T13:35:25Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2018-11-30T13:35:25Z"}, "message": "[RS6000] PowerPC64 soft-float\n\nThis patch aims to prevent long sequences loading soft-float\nconstants.  For 32-bit, it makes sense to load values inline to a gpr\nwith lis, addi, but not so much for 64-bit where a 5 insn sequence\nmight be needed for each gpr.  For TFmode in particular, a 10 insn\nsequence is reduced to 2 loads from memory plus 1 or 2 address setup\ninsns.\n\n\t* config/rs6000/predicates.md (easy_fp_constant): Avoid long\n\tdependent insn sequences.\n\t* config/rs6000/rs6000.c (num_insns_constant): Support long\n\tdouble constants.\n\t* config/rs6000/rs6000.md (mov<mode>_softfloat <FMOVE128>): Adjust\n\tlength attribute.\n\nFrom-SVN: r266663", "tree": {"sha": "d3cba1d26194ebe465ba3abbdc1bc4b7e64133af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3cba1d26194ebe465ba3abbdc1bc4b7e64133af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b49f1a7e7c85add83637cf7df46b8fc9b5b299e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49f1a7e7c85add83637cf7df46b8fc9b5b299e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b49f1a7e7c85add83637cf7df46b8fc9b5b299e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49f1a7e7c85add83637cf7df46b8fc9b5b299e9/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ceb8c8c4cae47fd07cd7dda74bb31b98ce4adadc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceb8c8c4cae47fd07cd7dda74bb31b98ce4adadc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceb8c8c4cae47fd07cd7dda74bb31b98ce4adadc"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "15cbe00abd6e1c0b48e726944e14ae425cda4ce5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49f1a7e7c85add83637cf7df46b8fc9b5b299e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49f1a7e7c85add83637cf7df46b8fc9b5b299e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b49f1a7e7c85add83637cf7df46b8fc9b5b299e9", "patch": "@@ -1,3 +1,12 @@\n+2018-11-30  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/predicates.md (easy_fp_constant): Avoid long\n+\tdependent insn sequences.\n+\t* config/rs6000/rs6000.c (num_insns_constant): Support long\n+\tdouble constants.\n+\t* config/rs6000/rs6000.md (mov<mode>_softfloat <FMOVE128>): Adjust\n+\tlength attribute.\n+\n 2018-11-30  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.c (num_insns_constant_gpr): Renamed from"}, {"sha": "94feae28c0224871ac3de3c596cbd2ca695db718", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49f1a7e7c85add83637cf7df46b8fc9b5b299e9/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49f1a7e7c85add83637cf7df46b8fc9b5b299e9/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=b49f1a7e7c85add83637cf7df46b8fc9b5b299e9", "patch": "@@ -564,9 +564,26 @@\n {\n   gcc_assert (GET_MODE (op) == mode && SCALAR_FLOAT_MODE_P (mode));\n \n-  /* Consider all constants with -msoft-float to be easy.  */\n+  /* Consider all constants with -msoft-float to be easy when regs are\n+     32-bit and thus can be loaded with a maximum of 2 insns.  For\n+     64-bit avoid long dependent insn sequences.  */\n   if (TARGET_SOFT_FLOAT)\n-    return 1;\n+    {\n+      if (!TARGET_POWERPC64)\n+        return 1;\n+\n+      int size = GET_MODE_SIZE (mode);\n+      if (size < 8)\n+        return 1;\n+\n+      int load_from_mem_insns = 2;\n+      if (size > 8)\n+        load_from_mem_insns++;\n+      if (TARGET_CMODEL != CMODEL_SMALL)\n+        load_from_mem_insns++;\n+      if (num_insns_constant (op, mode) <= load_from_mem_insns)\n+        return 1;\n+    }\n \n   /* 0.0D is not all zero bits.  */\n   if (DECIMAL_FLOAT_MODE_P (mode))"}, {"sha": "03b983b6d60f7e5af7fea2c03a6e040945993663", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49f1a7e7c85add83637cf7df46b8fc9b5b299e9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49f1a7e7c85add83637cf7df46b8fc9b5b299e9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b49f1a7e7c85add83637cf7df46b8fc9b5b299e9", "patch": "@@ -5940,6 +5940,25 @@ num_insns_constant (rtx op, machine_mode mode)\n \t    val |= l[WORDS_BIG_ENDIAN ? 1 : 0] & 0xffffffffUL;\n \t    mode = DImode;\n \t  }\n+\telse if (mode == TFmode || mode == TDmode\n+\t\t || mode == KFmode || mode == IFmode)\n+\t  {\n+\t    long l[4];\n+\t    int insns;\n+\n+\t    if (mode == TDmode)\n+\t      REAL_VALUE_TO_TARGET_DECIMAL128 (*rv, l);\n+\t    else\n+\t      REAL_VALUE_TO_TARGET_LONG_DOUBLE (*rv, l);\n+\n+\t    val = (unsigned HOST_WIDE_INT) l[WORDS_BIG_ENDIAN ? 0 : 3] << 32;\n+\t    val |= l[WORDS_BIG_ENDIAN ? 1 : 2] & 0xffffffffUL;\n+\t    insns = num_insns_constant_multi (val, DImode);\n+\t    val = (unsigned HOST_WIDE_INT) l[WORDS_BIG_ENDIAN ? 2 : 1] << 32;\n+\t    val |= l[WORDS_BIG_ENDIAN ? 3 : 0] & 0xffffffffUL;\n+\t    insns += num_insns_constant_multi (val, DImode);\n+\t    return insns;\n+\t  }\n \telse\n \t  gcc_unreachable ();\n       }"}, {"sha": "797d5c32e64dabcabe069835690f57f3ac51d5e3", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49f1a7e7c85add83637cf7df46b8fc9b5b299e9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49f1a7e7c85add83637cf7df46b8fc9b5b299e9/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b49f1a7e7c85add83637cf7df46b8fc9b5b299e9", "patch": "@@ -7729,7 +7729,7 @@\n \t    (const_string \"8\")\n \t    (const_string \"16\"))\n \t(if_then_else (match_test \"TARGET_POWERPC64\")\n-\t    (const_string \"40\")\n+\t    (const_string \"16\")\n \t    (const_string \"32\"))\n \t(if_then_else (match_test \"TARGET_POWERPC64\")\n \t    (const_string \"8\")"}]}