{"sha": "fb60d5d766e38b1a48c69821fabd6f3d1ab5781e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI2MGQ1ZDc2NmUzOGIxYTQ4YzY5ODIxZmFiZDZmM2QxYWI1NzgxZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2004-11-11T20:36:26Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-11-11T20:36:26Z"}, "message": "* gcc.dg/precedence-1.c: New test.\n\nFrom-SVN: r90493", "tree": {"sha": "cdd95403b33d2e06d112fe0f4788677da0a86a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdd95403b33d2e06d112fe0f4788677da0a86a28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb60d5d766e38b1a48c69821fabd6f3d1ab5781e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb60d5d766e38b1a48c69821fabd6f3d1ab5781e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb60d5d766e38b1a48c69821fabd6f3d1ab5781e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb60d5d766e38b1a48c69821fabd6f3d1ab5781e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8e9d51205091e8ca25cd831fc32671c714bf2f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e9d51205091e8ca25cd831fc32671c714bf2f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8e9d51205091e8ca25cd831fc32671c714bf2f7"}], "stats": {"total": 157, "additions": 157, "deletions": 0}, "files": [{"sha": "bc7f2fb9ca67c35274c48e62b69f110501979b62", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb60d5d766e38b1a48c69821fabd6f3d1ab5781e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb60d5d766e38b1a48c69821fabd6f3d1ab5781e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb60d5d766e38b1a48c69821fabd6f3d1ab5781e", "patch": "@@ -1,3 +1,7 @@\n+2004-11-11  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/precedence-1.c: New test.\n+\n 2004-11-11  Janis Johnson  <janis187@us.ibm.com>\n \n \t* gcc.misc-tests/linkage.exp: Handle biarch GCC for powerpc64."}, {"sha": "f3f1e352708d5d68aa5908fa5032239433918799", "filename": "gcc/testsuite/gcc.dg/precedence-1.c", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb60d5d766e38b1a48c69821fabd6f3d1ab5781e/gcc%2Ftestsuite%2Fgcc.dg%2Fprecedence-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb60d5d766e38b1a48c69821fabd6f3d1ab5781e/gcc%2Ftestsuite%2Fgcc.dg%2Fprecedence-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fprecedence-1.c?ref=fb60d5d766e38b1a48c69821fabd6f3d1ab5781e", "patch": "@@ -0,0 +1,153 @@\n+/* Test precedence and associativity in expressions.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+struct s { int *a; } *p, q, *r[2], *g();\n+int *i[2];\n+int j[2];\n+_Complex double c[2];\n+\n+void\n+f (void)\n+{\n+#define ASSERT(expr) do { char x[(expr) ? 1 : -1]; } while (0)\n+  /* Postfix and unary operators and casts.  */\n+  *p++;\n+  *p--;\n+  *p->a;\n+  *q.a;\n+  *r[1];\n+  (*g()).a;\n+  ++i[0];\n+  --i[0];\n+  +j[0];\n+  -j[0];\n+  ~j[0];\n+  !j[0];\n+  __real__ c[1];\n+  __imag__ c[1];\n+  ASSERT ((sizeof p++) == (sizeof p));\n+  ASSERT ((sizeof (int) + 1) == ((sizeof (int)) + 1));\n+  ASSERT ((__alignof p++) == (__alignof p));\n+  ASSERT ((__alignof (int) + 1) == ((__alignof (int)) + 1));\n+  ASSERT ((sizeof __extension__ 1 + 1) == ((sizeof 1) + 1));\n+  /* Binary operators.  */\n+  ASSERT (((_Bool) 1 * 2) == 2);\n+  ASSERT (((_Bool) 8 / 4) == 0);\n+  ASSERT (((_Bool) 8 % 4) == 1);\n+#define ASSERT_BIN(C1, O1, C2, O2, C3, V1, V2, V3)\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    ASSERT ((C1 O1 C2 O2 C3) == V1);\t\t\t\\\n+    ASSERT (((C1 O1 C2) O2 C3) == V2);\t\t\t\\\n+    ASSERT ((C1 O1 (C2 O2 C3)) == V3);\t\t\t\\\n+  } while (0);\n+  ASSERT_BIN (1, *, 2, *, 3, 6, 6, 6);\n+  ASSERT_BIN (2, *, 2, /, 3, 1, 1, 0);\n+  ASSERT_BIN (2, *, 2, %, 3, 1, 1, 4);\n+  ASSERT_BIN (2, /, 2, *, 3, 3, 3, 0);\n+  ASSERT_BIN (2, /, 2, /, 2, 0, 0, 2);\n+  ASSERT_BIN (2, /, 4, %, 3, 0, 0, 2);\n+  ASSERT_BIN (2, %, 2, *, 3, 0, 0, 2);\n+  ASSERT_BIN (2, %, 9, /, 3, 0, 0, 2);\n+  ASSERT_BIN (2, %, 4, %, 3, 2, 2, 0);\n+  ASSERT_BIN (2, *, 3, +, 4, 10, 10, 14);\n+  ASSERT_BIN (2, *, 3, -, 4, 2, 2, -2);\n+  ASSERT_BIN (2, /, 3, +, 4, 4, 4, 0);\n+  ASSERT_BIN (2, /, 3, -, 4, -4, -4, -2);\n+  ASSERT_BIN (2, %, 3, +, 4, 6, 6, 2);\n+  ASSERT_BIN (2, %, 3, -, 4, -2, -2, 0);\n+  ASSERT_BIN (2, +, 3, *, 4, 14, 20, 14);\n+  ASSERT_BIN (2, +, 3, /, 4, 2, 1, 2);\n+  ASSERT_BIN (2, +, 3, %, 4, 5, 1, 5);\n+  ASSERT_BIN (2, -, 3, *, 4, -10, -4, -10);\n+  ASSERT_BIN (2, -, 3, /, 4, 2, 0, 2);\n+  ASSERT_BIN (2, -, 4, %, 4, 2, -2, 2);\n+  ASSERT_BIN (2, +, 3, +, 4, 9, 9, 9);\n+  ASSERT_BIN (2, +, 3, -, 4, 1, 1, 1);\n+  ASSERT_BIN (2, -, 3, +, 4, 3, 3, -5);\n+  ASSERT_BIN (2, -, 3, -, 4, -5, -5, 3);\n+  ASSERT_BIN (3, +, 2, <<, 4, 80, 80, 35);\n+  ASSERT_BIN (3, +, 2, >>, 4, 0, 0, 3);\n+  ASSERT_BIN (3, -, 2, <<, 4, 16, 16, -29);\n+  ASSERT_BIN (3, -, 2, >>, 4, 0, 0, 3);\n+  ASSERT_BIN (2, <<, 4, +, 3, 256, 35, 256);\n+  ASSERT_BIN (2, <<, 4, -, 3, 4, 29, 4);\n+  ASSERT_BIN (2, >>, 4, +, 3, 0, 3, 0);\n+  ASSERT_BIN (2, >>, 4, -, 3, 1, -3, 1);\n+  ASSERT_BIN (4L, <<, 2L, <<, 3L, 128L, 128L, 262144L);\n+  ASSERT_BIN (4L, <<, 2L, >>, 3L, 2L, 2L, 4L);\n+  ASSERT_BIN (4L, >>, 2L, <<, 3L, 8L, 8L, 0L);\n+  ASSERT_BIN (4L, >>, 2L, >>, 3L, 0L, 0L, 4L);\n+  ASSERT_BIN (2, <<, 5, <, 4, 0, 0, 2);\n+  ASSERT_BIN (2, <<, 5, >, 4, 1, 1, 4);\n+  ASSERT_BIN (2, <<, 5, <=, 4, 0, 0, 2);\n+  ASSERT_BIN (2, <<, 5, >=, 4, 1, 1, 4);\n+  ASSERT_BIN (2, >>, 5, <, 4, 1, 1, 2);\n+  ASSERT_BIN (2, >>, 5, >, 4, 0, 0, 1);\n+  ASSERT_BIN (2, >>, 5, <=, 4, 1, 1, 2);\n+  ASSERT_BIN (2, >>, 5, >=, 4, 0, 0, 1);\n+  ASSERT_BIN (4, <, 3, <<, 2, 1, 0, 1);\n+  ASSERT_BIN (4, <, 20, >>, 2, 1, 0, 1);\n+  ASSERT_BIN (4, >, 3, <<, 2, 0, 4, 0);\n+  ASSERT_BIN (4, >, 3, >>, 2, 1, 0, 1);\n+  ASSERT_BIN (4, <=, 3, <<, 2, 1, 0, 1);\n+  ASSERT_BIN (4, <=, 20, >>, 2, 1, 0, 1);\n+  ASSERT_BIN (4, >=, 3, <<, 2, 0, 4, 0);\n+  ASSERT_BIN (4, >=, 3, >>, 2, 1, 0, 1);\n+  ASSERT_BIN (1, <, 2, <, 3, 1, 1, 0);\n+  ASSERT_BIN (1, <, 2, >, 0, 1, 1, 0);\n+  ASSERT_BIN (1, <, 2, <=, 3, 1, 1, 0);\n+  ASSERT_BIN (0, <, 4, >=, 3, 0, 0, 1);\n+  ASSERT_BIN (1, >, 2, <, 3, 1, 1, 0);\n+  ASSERT_BIN (1, >, 2, >, 3, 0, 0, 1);\n+  ASSERT_BIN (1, >, 2, <=, 3, 1, 1, 0);\n+  ASSERT_BIN (1, >, 2, >=, 3, 0, 0, 1);\n+  ASSERT_BIN (3, <=, 2, <, 3, 1, 1, 0);\n+  ASSERT_BIN (2, <=, 3, >, 0, 1, 1, 0);\n+  ASSERT_BIN (2, <=, 3, <=, 4, 1, 1, 0);\n+  ASSERT_BIN (2, <=, 3, >=, 1, 1, 1, 0);\n+  ASSERT_BIN (0, >=, 2, <, 3, 1, 1, 0);\n+  ASSERT_BIN (1, >=, 2, >, 3, 0, 0, 1);\n+  ASSERT_BIN (0, >=, 2, <=, 3, 1, 1, 0);\n+  ASSERT_BIN (1, >=, 2, >=, 3, 0, 0, 1);\n+  ASSERT_BIN (-1, <, 2, ==, 3, 0, 0, 1);\n+  ASSERT_BIN (1, <, 2, !=, 3, 1, 1, 0);\n+  ASSERT_BIN (1, >, 2, ==, 3, 0, 0, 1);\n+  ASSERT_BIN (1, >, 2, !=, 3, 1, 1, 0);\n+  ASSERT_BIN (0, <=, 2, ==, 3, 0, 0, 1);\n+  ASSERT_BIN (2, <=, 2, !=, 3, 1, 1, 0);\n+  ASSERT_BIN (1, >=, 2, ==, 3, 0, 0, 1);\n+  ASSERT_BIN (0, >=, 2, !=, 3, 1, 1, 0);\n+  ASSERT_BIN (1, ==, 3, <, 2, 0, 1, 0);\n+  ASSERT_BIN (1, ==, 3, >, 2, 1, 0, 1);\n+  ASSERT_BIN (1, ==, 3, <=, 2, 0, 1, 0);\n+  ASSERT_BIN (1, ==, 3, >=, 2, 1, 0, 1);\n+  ASSERT_BIN (1, !=, 2, <, 3, 0, 1, 0);\n+  ASSERT_BIN (1, !=, 2, >, 3, 1, 0, 1);\n+  ASSERT_BIN (1, !=, 2, <=, 3, 0, 1, 0);\n+  ASSERT_BIN (1, !=, 2, >=, 3, 1, 0, 1);\n+  ASSERT_BIN (1, ==, 2, ==, 0, 1, 1, 0);\n+  ASSERT_BIN (1, ==, 2, !=, 0, 0, 0, 1);\n+  ASSERT_BIN (1, !=, 2, ==, 3, 0, 0, 1);\n+  ASSERT_BIN (1, !=, 2, !=, 3, 1, 1, 0);\n+  ASSERT_BIN (0, ==, 2, &, 1, 0, 0, 1);\n+  ASSERT_BIN (0, !=, 2, &, 1, 1, 1, 0);\n+  ASSERT_BIN (1, &, 2, ==, 0, 0, 1, 0);\n+  ASSERT_BIN (1, &, 2, !=, 0, 1, 0, 1);\n+  ASSERT_BIN (1, &, 2, ^, 3, 3, 3, 1);\n+  ASSERT_BIN (3, ^, 2, &, 1, 3, 1, 3);\n+  ASSERT_BIN (3, ^, 2, |, 1, 1, 1, 0);\n+  ASSERT_BIN (3, |, 2, ^, 1, 3, 2, 3);\n+  ASSERT_BIN (2, |, 0, &&, 2, 1, 1, 2);\n+  ASSERT_BIN (2, &&, 0, |, 2, 1, 2, 1);\n+  ASSERT_BIN (0, &&, 0, ||, 1, 1, 1, 0);\n+  ASSERT_BIN (1, ||, 0, &&, 0, 1, 0, 1);\n+  /* Conditional expressions.  */\n+  ASSERT ((1 || 2 ? 3 : 4) == 3);\n+  ASSERT ((1 || (2 ? 3 : 4)) == 1);\n+  /* Assignment expressions.  */\n+  p = p = p;\n+  /* Expressions.  */\n+  p, p = p;\n+}"}]}