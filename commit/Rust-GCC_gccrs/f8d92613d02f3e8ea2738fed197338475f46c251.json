{"sha": "f8d92613d02f3e8ea2738fed197338475f46c251", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhkOTI2MTNkMDJmM2U4ZWEyNzM4ZmVkMTk3MzM4NDc1ZjQ2YzI1MQ==", "commit": {"author": {"name": "Toon Moene", "email": "toon@moene.indiv.nluug.nl", "date": "2001-07-06T12:09:39Z"}, "committer": {"name": "Toon Moene", "email": "toon@gcc.gnu.org", "date": "2001-07-06T12:09:39Z"}, "message": "configure.in: Check for fseeko, ftello.\n\n2001-07-06  Toon Moene  <toon@moene.indiv.nluug.nl>\n            Pedro Vazquez  <vazquez@penelope.iqm.unicamp.br>\n\n\t* configure.in: Check for fseeko, ftello.\n\t* configure: Rebuilt.\n\t* config.h.in: Rebuilt.\n\t* fio.h: Define FSEEK to be fseek or fseeko, depending\n\ton configure's findings.  Ditto for FTELL and ftell / ftello.\n\t* backspace.c (f_back): Use FSEEK for fseek, FTELL for ftell.\n\t* dfe.c (c_dfe): Ditto.\n\t* due.c (c_due, e_rdue): Ditto.\n\t* endfile.c (t_runc): Ditto.\n\t* err.c (f__nowreading, f__nowwriting): Ditto.\n\t* ftell_.c (G77_ftell_0, G77_fseek_0): Ditto.\n\t* inquire.c (f_inqu): Ditto.\n\t* open.c (f_open): Ditto.\n\t* rdfmt.c (rd_ed): Ditto.\n\t* sue.c (s_wsue, e_wsue, e_rsue): Ditto.\n\nCo-Authored-By: Pedro Vazquez <vazquez@penelope.iqm.unicamp.br>\n\nFrom-SVN: r43806", "tree": {"sha": "a83b79124d799de88e7fc451469c64c17a5013aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a83b79124d799de88e7fc451469c64c17a5013aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8d92613d02f3e8ea2738fed197338475f46c251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d92613d02f3e8ea2738fed197338475f46c251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d92613d02f3e8ea2738fed197338475f46c251", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d92613d02f3e8ea2738fed197338475f46c251/comments", "author": null, "committer": null, "parents": [{"sha": "6331d1c1d9859927b5509e07b856e60f98b4821f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6331d1c1d9859927b5509e07b856e60f98b4821f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6331d1c1d9859927b5509e07b856e60f98b4821f"}], "stats": {"total": 231, "additions": 189, "deletions": 42}, "files": [{"sha": "7f5e7d081113b730f7042f3779ba6e0a0456f79b", "filename": "libf2c/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FChangeLog?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -1,3 +1,22 @@\n+2001-07-06  Toon Moene  <toon@moene.indiv.nluug.nl>\n+            Pedro Vazquez  <vazquez@penelope.iqm.unicamp.br>\n+\n+\t* configure.in: Check for fseeko, ftello.\n+\t* configure: Rebuilt.\n+\t* config.h.in: Rebuilt.\n+\t* fio.h: Define FSEEK to be fseek or fseeko, depending\n+\ton configure's findings.  Ditto for FTELL and ftell / ftello.\n+\t* backspace.c (f_back): Use FSEEK for fseek, FTELL for ftell.\n+\t* dfe.c (c_dfe): Ditto.\n+\t* due.c (c_due, e_rdue): Ditto.\n+\t* endfile.c (t_runc): Ditto.\n+\t* err.c (f__nowreading, f__nowwriting): Ditto.\n+\t* ftell_.c (G77_ftell_0, G77_fseek_0): Ditto.\n+\t* inquire.c (f_inqu): Ditto.\n+\t* open.c (f_open): Ditto.\n+\t* rdfmt.c (rd_ed): Ditto.\n+\t* sue.c (s_wsue, e_wsue, e_rsue): Ditto.\n+\n 2001-07-04  Zack Weinberg  <zackw@stanford.edu>\n \n \t* Makefile.in: Take PICFLAG and RUNTESTFLAGS out of FLAGS_TO_PASS."}, {"sha": "848923912bf85fe2014c91f61b4e7d0f2129f42c", "filename": "libf2c/libI77/backspace.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fbackspace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fbackspace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fbackspace.c?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -34,31 +34,31 @@ integer f_back(alist *a)\n \tf = b->ufd;\t/* may have changed in t_runc() */\n \tif(b->url>0)\n \t{\n-\t\tx=ftell(f);\n+\t\tx=FTELL(f);\n \t\ty = x % b->url;\n \t\tif(y == 0) x--;\n \t\tx /= b->url;\n \t\tx *= b->url;\n-\t\t(void) fseek(f,x,SEEK_SET);\n+\t\tFSEEK(f,x,SEEK_SET);\n \t\treturn(0);\n \t}\n \n \tif(b->ufmt==0)\n-\t{\tfseek(f,-(long)sizeof(uiolen),SEEK_CUR);\n+\t{\tFSEEK(f,-(off_t)sizeof(uiolen),SEEK_CUR);\n \t\tfread((char *)&n,sizeof(uiolen),1,f);\n-\t\tfseek(f,-(long)n-2*sizeof(uiolen),SEEK_CUR);\n+\t\tFSEEK(f,-(off_t)n-2*sizeof(uiolen),SEEK_CUR);\n \t\treturn(0);\n \t}\n-\tw = x = ftell(f);\n+\tw = x = FTELL(f);\n \tz = 0;\n  loop:\n \twhile(x) {\n \t\tx -= x < 64 ? x : 64;\n-\t\tfseek(f,x,SEEK_SET);\n+\t\tFSEEK(f,x,SEEK_SET);\n \t\tfor(y = x; y < w; y++) {\n \t\t\tif (getc(f) != '\\n')\n \t\t\t\tcontinue;\n-\t\t\tv = ftell(f);\n+\t\t\tv = FTELL(f);\n \t\t\tif (v == w) {\n \t\t\t\tif (z)\n \t\t\t\t\tgoto break2;\n@@ -69,6 +69,6 @@ integer f_back(alist *a)\n \t\terr(a->aerr,(EOF),\"backspace\");\n \t\t}\n  break2:\n-\tfseek(f, z, SEEK_SET);\n+\tFSEEK(f, z, SEEK_SET);\n \treturn 0;\n }"}, {"sha": "9bd85163b18e59abd3cab08b4c6359d90450b102", "filename": "libf2c/libI77/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fconfig.h.in?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -15,6 +15,12 @@\n /* Define if you have the ANSI C header files.  */\n #undef STDC_HEADERS\n \n+/* Define if you have the fseeko function.  */\n+#undef HAVE_FSEEKO\n+\n+/* Define if you have the ftello function.  */\n+#undef HAVE_FTELLO\n+\n /* Define if you have the ftruncate function.  */\n #undef HAVE_FTRUNCATE\n "}, {"sha": "d44e657e59c81c31d29a8ca2028c9e18d17594b3", "filename": "libf2c/libI77/configure", "status": "modified", "additions": 121, "deletions": 11, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fconfigure?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -1134,7 +1134,7 @@ else\n int main() {\n \n /* Ultrix mips cc rejects this.  */\n-typedef int charset[2]; const charset x;\n+typedef int charset[2]; const charset x = {0,0};\n /* SunOS 4.1.1 cc rejects this.  */\n char const *const *ccp;\n char **p;\n@@ -1297,7 +1297,7 @@ else\n   echo \"$ac_t\"\"no\" 1>&6\n fi\n \n-for ac_func in ftruncate\n+for ac_func in fseeko\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n echo \"configure:1304: checking for $ac_func\" >&5\n@@ -1352,7 +1352,7 @@ else\n fi\n done\n \n-for ac_func in mkstemp\n+for ac_func in ftello\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n echo \"configure:1359: checking for $ac_func\" >&5\n@@ -1407,7 +1407,7 @@ else\n fi\n done\n \n-for ac_func in tempnam\n+for ac_func in ftruncate\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n echo \"configure:1414: checking for $ac_func\" >&5\n@@ -1462,25 +1462,135 @@ else\n fi\n done\n \n+for ac_func in mkstemp\n+do\n+echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n+echo \"configure:1469: checking for $ac_func\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  cat > conftest.$ac_ext <<EOF\n+#line 1474 \"configure\"\n+#include \"confdefs.h\"\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func(); below.  */\n+#include <assert.h>\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+/* We use char because int might match the return type of a gcc2\n+    builtin and then its argument prototype would still apply.  */\n+char $ac_func();\n+\n+int main() {\n+\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+$ac_func();\n+#endif\n+\n+; return 0; }\n+EOF\n+if { (eval echo configure:1497: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+  rm -rf conftest*\n+  eval \"ac_cv_func_$ac_func=yes\"\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  eval \"ac_cv_func_$ac_func=no\"\n+fi\n+rm -f conftest*\n+fi\n+\n+if eval \"test \\\"`echo '$ac_cv_func_'$ac_func`\\\" = yes\"; then\n+  echo \"$ac_t\"\"yes\" 1>&6\n+    ac_tr_func=HAVE_`echo $ac_func | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n+  cat >> confdefs.h <<EOF\n+#define $ac_tr_func 1\n+EOF\n+ \n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+done\n+\n+for ac_func in tempnam\n+do\n+echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n+echo \"configure:1524: checking for $ac_func\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  cat > conftest.$ac_ext <<EOF\n+#line 1529 \"configure\"\n+#include \"confdefs.h\"\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func(); below.  */\n+#include <assert.h>\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+/* We use char because int might match the return type of a gcc2\n+    builtin and then its argument prototype would still apply.  */\n+char $ac_func();\n+\n+int main() {\n+\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+$ac_func();\n+#endif\n+\n+; return 0; }\n+EOF\n+if { (eval echo configure:1552: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+  rm -rf conftest*\n+  eval \"ac_cv_func_$ac_func=yes\"\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  eval \"ac_cv_func_$ac_func=no\"\n+fi\n+rm -f conftest*\n+fi\n+\n+if eval \"test \\\"`echo '$ac_cv_func_'$ac_func`\\\" = yes\"; then\n+  echo \"$ac_t\"\"yes\" 1>&6\n+    ac_tr_func=HAVE_`echo $ac_func | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n+  cat >> confdefs.h <<EOF\n+#define $ac_tr_func 1\n+EOF\n+ \n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+done\n+\n \n # posix will guarantee the right behaviour for sprintf, else we can't be\n # sure; HEADER_STDC wouldn't be the right check in sunos4, for instance.\n # However, on my sunos4/gcc setup unistd.h leads us wrongly to believe\n # we're posix-conformant, so always do the test.\n echo $ac_n \"checking for ansi/posix sprintf result\"\"... $ac_c\" 1>&6\n-echo \"configure:1472: checking for ansi/posix sprintf result\" >&5\n+echo \"configure:1582: checking for ansi/posix sprintf result\" >&5\n if test \"$cross_compiling\" = yes; then\n   g77_cv_sys_sprintf_ansi=no\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1477 \"configure\"\n+#line 1587 \"configure\"\n #include \"confdefs.h\"\n   #include <stdio.h>\n     /* does sprintf return the number of chars transferred? */\n     main () {char foo[2]; (sprintf(foo, \"1\") == 1) ? exit(0) : exit(1);}\n \n EOF\n-if { (eval echo configure:1484: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:1594: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   g77_cv_sys_sprintf_ansi=yes\n else\n@@ -1511,9 +1621,9 @@ fi\n \n # define NON_ANSI_RW_MODES on unix (can't hurt)\n echo $ac_n \"checking NON_ANSI_RW_MODES\"\"... $ac_c\" 1>&6\n-echo \"configure:1515: checking NON_ANSI_RW_MODES\" >&5\n+echo \"configure:1625: checking NON_ANSI_RW_MODES\" >&5\n cat > conftest.$ac_ext <<EOF\n-#line 1517 \"configure\"\n+#line 1627 \"configure\"\n #include \"confdefs.h\"\n #ifdef unix\n   yes\n@@ -1558,12 +1668,12 @@ EOF\n \n \n echo $ac_n \"checking for off_t\"\"... $ac_c\" 1>&6\n-echo \"configure:1562: checking for off_t\" >&5\n+echo \"configure:1672: checking for off_t\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_type_off_t'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1567 \"configure\"\n+#line 1677 \"configure\"\n #include \"confdefs.h\"\n #include <sys/types.h>\n #if STDC_HEADERS"}, {"sha": "de38d6d635d23c0d071db3ea853d1957b203d4a0", "filename": "libf2c/libI77/configure.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fconfigure.in?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -136,6 +136,8 @@ else\n   AC_MSG_RESULT(no)\n fi\n \n+AC_CHECK_FUNCS(fseeko)\n+AC_CHECK_FUNCS(ftello)\n AC_CHECK_FUNCS(ftruncate)\n AC_CHECK_FUNCS(mkstemp)\n AC_CHECK_FUNCS(tempnam)"}, {"sha": "5290a96b033ea0d5f04077a76ab601c1da327dc0", "filename": "libf2c/libI77/dfe.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fdfe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fdfe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fdfe.c?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -82,7 +82,7 @@ c_dfe(cilist *a)\n \tf__fmtbuf=a->cifmt;\n \tif(a->cirec <= 0)\n \t\terr(a->cierr,130,\"dfe\");\n-\t(void) fseek(f__cf,(long)f__curunit->url * (a->cirec-1),SEEK_SET);\n+\tFSEEK(f__cf,f__curunit->url * (a->cirec-1),SEEK_SET);\n \tf__curunit->uend = 0;\n \treturn(0);\n }"}, {"sha": "0315e7d5dc587fe43702c45cc7c96fcd00adfe2a", "filename": "libf2c/libI77/due.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fdue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fdue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fdue.c?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -25,7 +25,7 @@ c_due(cilist *a)\n \tif(f__curunit->ufd==NULL) err(a->cierr,114,\"cdue\");\n \tif(a->cirec <= 0)\n \t\terr(a->cierr,130,\"due\");\n-\tfseek(f__cf,(long)(a->cirec-1)*f__curunit->url,SEEK_SET);\n+\tFSEEK(f__cf,(a->cirec-1)*f__curunit->url,SEEK_SET);\n \tf__curunit->uend = 0;\n \treturn(0);\n }\n@@ -60,8 +60,8 @@ integer e_rdue(Void)\n \tf__init = 1;\n \tif(f__curunit->url==1 || f__recpos==f__curunit->url)\n \t\treturn(0);\n-\tfseek(f__cf,(long)(f__curunit->url-f__recpos),SEEK_CUR);\n-\tif(ftell(f__cf)%f__curunit->url)\n+\tFSEEK(f__cf,(f__curunit->url-f__recpos),SEEK_CUR);\n+\tif(FTELL(f__cf)%f__curunit->url)\n \t\terr(f__elist->cierr,200,\"syserr\");\n \treturn(0);\n }"}, {"sha": "859eb314f4dae35bbd703be59e99bd7b39d34417", "filename": "libf2c/libI77/endfile.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fendfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fendfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fendfile.c?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -81,9 +81,9 @@ t_runc(alist *a)\n \tb = &f__units[a->aunit];\n \tif(b->url)\n \t\treturn(0);\t/*don't truncate direct files*/\n-\tloc=ftell(bf = b->ufd);\n-\tfseek(bf,0L,SEEK_END);\n-\tlen=ftell(bf);\n+\tloc=FTELL(bf = b->ufd);\n+\tFSEEK(bf,0,SEEK_END);\n+\tlen=FTELL(bf);\n \tif (loc >= len || b->useek == 0 || b->ufnm == NULL)\n \t\treturn(0);\n #ifndef HAVE_FTRUNCATE\n@@ -121,7 +121,7 @@ t_runc(alist *a)\n \t\tfclose(bf);\n \t\tif (!(bf = fopen(b->ufnm, f__w_mode[3])))\n \t\t\tgoto bad;\n-\t\tfseek(bf,0L,SEEK_END);\n+\t\tFSEEK(bf,0,SEEK_END);\n \t\tb->urw = 3;\n \t\t}\n #endif"}, {"sha": "5cafab70734933c7b147f051af55119f040f2340", "filename": "libf2c/libI77/err.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Ferr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Ferr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Ferr.c?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -219,7 +219,7 @@ f__nowreading(unit *x)\n \tif (!x->ufnm)\n \t\tgoto cantread;\n \tufmt = x->url ? 0 : x->ufmt;\n-\tloc = ftell(x->ufd);\n+\tloc = FTELL(x->ufd);\n \turw = 3;\n \tif (!freopen(x->ufnm, f__w_mode[ufmt|2], x->ufd)) {\n \t\turw = 1;\n@@ -229,7 +229,7 @@ f__nowreading(unit *x)\n \t\t\treturn 1;\n \t\t\t}\n \t\t}\n-\tfseek(x->ufd,loc,SEEK_SET);\n+\tFSEEK(x->ufd,loc,SEEK_SET);\n \tx->urw = urw;\n  done:\n \tx->uwrt = 0;\n@@ -257,7 +257,7 @@ f__nowwriting(unit *x)\n \t\tx->urw = 2;\n \t\t}\n \telse {\n-\t\tloc=ftell(x->ufd);\n+\t\tloc=FTELL(x->ufd);\n \t\tif (!(f__cf = x->ufd =\n \t\t\tfreopen(x->ufnm, f__w_mode[ufmt |= 2], x->ufd)))\n \t\t\t{\n@@ -267,7 +267,7 @@ f__nowwriting(unit *x)\n \t\t\treturn(1);\n \t\t\t}\n \t\tx->urw = 3;\n-\t\tfseek(x->ufd,loc,SEEK_SET);\n+\t\tFSEEK(x->ufd,loc,SEEK_SET);\n \t\t}\n  done:\n \tx->uwrt = 1;"}, {"sha": "aaeb68dbb870d7beb93a91f47f51c1c85438b86a", "filename": "libf2c/libI77/fio.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Ffio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Ffio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Ffio.h?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -15,6 +15,16 @@\n #define SEEK_END 2\n #endif\n \n+/* Only use fseeko/ftello if they are both there.  */\n+\n+#if defined (HAVE_FSEEKO) && defined (HAVE_FTELLO)\n+#define FSEEK fseeko\n+#define FTELL ftello\n+#else\n+#define FSEEK fseek\n+#define FTELL ftell\n+#endif\n+\n #if defined (MSDOS) && !defined (GO32)\n #ifndef NON_UNIX_STDIO\n #define NON_UNIX_STDIO"}, {"sha": "d2b2432eb60bb95f10ec3fad477a8d6f8f66ccc7", "filename": "libf2c/libI77/ftell_.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fftell_.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fftell_.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fftell_.c?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -22,7 +22,7 @@ G77_ftell_0 (integer *Unit)\n #endif\n {\n \tFILE *f;\n-\treturn (f = unit_chk(*Unit, \"ftell\")) ? ftell(f) : -1L;\n+\treturn (f = unit_chk(*Unit, \"ftell\")) ? FTELL(f) : -1L;\n \t}\n \n  integer\n@@ -43,5 +43,5 @@ G77_fseek_0 (integer *Unit, integer *offset, integer *xwhence)\n \tw = wohin[w];\n #endif\n \treturn\t!(f = unit_chk(*Unit, \"fseek\"))\n-\t\t|| fseek(f, *offset, w) ? 1 : 0;\n+\t\t|| FSEEK(f, *offset, w) ? 1 : 0;\n \t}"}, {"sha": "5c5575a1d12435dd8fda5f55dc90297b8b7cb730", "filename": "libf2c/libI77/inquire.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Finquire.c?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -100,7 +100,7 @@ integer f_inqu(inlist *a)\n \tif(a->inrecl!=NULL && p!=NULL)\n \t\t*a->inrecl=p->url;\n \tif(a->innrec!=NULL && p!=NULL && p->url>0)\n-\t\t*a->innrec=ftell(p->ufd)/p->url+1;\n+\t\t*a->innrec=FTELL(p->ufd)/p->url+1;\n \tif(a->inblank && p!=NULL && p->ufmt)\n \t\tif(p->ublnk)\n \t\t\tb_char(\"ZERO\",a->inblank,a->inblanklen);"}, {"sha": "e28faafbdcc8d15bbcc7cca3942e51a9c0194151", "filename": "libf2c/libI77/open.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fopen.c?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -283,7 +283,7 @@ integer f_open(olist *a)\n \t\tif (a->orl)\n \t\t\trewind(b->ufd);\n \t\telse if ((s = a->oacc) && (*s == 'a' || *s == 'A')\n-\t\t\t&& fseek(b->ufd, 0L, SEEK_END))\n+\t\t\t&& FSEEK(b->ufd, 0, SEEK_END))\n \t\t\t\topnerr(a->oerr,129,\"open\");\n \treturn(0);\n }"}, {"sha": "81426ae7d1a2b255fb7c1fce9944aa540aeaa422", "filename": "libf2c/libI77/rdfmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Frdfmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Frdfmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Frdfmt.c?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -471,7 +471,7 @@ rd_ed(struct syl *p, char *ptr, ftnlen len)\n \t\t\tf__icptr += f__cursor;\n \t\t}\n \t\telse if(f__curunit && f__curunit->useek)\n-\t\t\t(void) fseek(f__cf,(long) f__cursor,SEEK_CUR);\n+\t\t\tFSEEK(f__cf,(off_t)f__cursor,SEEK_CUR);\n \t\telse\n \t\t\terr(f__elist->cierr,106,\"fmt\");\n \t\tf__recpos += f__cursor;"}, {"sha": "8865054b10b7cddf739052a2da21dbebdc61f8e2", "filename": "libf2c/libI77/sue.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fsue.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d92613d02f3e8ea2738fed197338475f46c251/libf2c%2FlibI77%2Fsue.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libf2c%2FlibI77%2Fsue.c?ref=f8d92613d02f3e8ea2738fed197338475f46c251", "patch": "@@ -62,8 +62,8 @@ integer s_wsue(cilist *a)\n \tf__reclen=0;\n \tif(f__curunit->uwrt != 1 && f__nowwriting(f__curunit))\n \t\terr(a->cierr, errno, \"write start\");\n-\tf__recloc=ftell(f__cf);\n-\t(void) fseek(f__cf,(long)sizeof(uiolen),SEEK_CUR);\n+\tf__recloc=FTELL(f__cf);\n+\tFSEEK(f__cf,(off_t)sizeof(uiolen),SEEK_CUR);\n \treturn(0);\n }\n integer e_wsue(Void)\n@@ -74,15 +74,15 @@ integer e_wsue(Void)\n \tif (fflush(f__cf))\n \t\terr(f__elist->cierr, errno, \"write end\");\n #endif\n-\tloc=ftell(f__cf);\n-\tfseek(f__cf,f__recloc,SEEK_SET);\n+\tloc=FTELL(f__cf);\n+\tFSEEK(f__cf,f__recloc,SEEK_SET);\n \tfwrite((char *)&f__reclen,sizeof(uiolen),1,f__cf);\n-\tfseek(f__cf,loc,SEEK_SET);\n+\tFSEEK(f__cf,loc,SEEK_SET);\n \treturn(0);\n }\n integer e_rsue(Void)\n {\n \tf__init = 1;\n-\t(void) fseek(f__cf,(long)(f__reclen-f__recpos+sizeof(uiolen)),SEEK_CUR);\n+\tFSEEK(f__cf,(off_t)(f__reclen-f__recpos+sizeof(uiolen)),SEEK_CUR);\n \treturn(0);\n }"}]}