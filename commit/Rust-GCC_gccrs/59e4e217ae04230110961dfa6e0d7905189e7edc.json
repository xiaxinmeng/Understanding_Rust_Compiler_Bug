{"sha": "59e4e217ae04230110961dfa6e0d7905189e7edc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTllNGUyMTdhZTA0MjMwMTEwOTYxZGZhNmUwZDc5MDUxODllN2VkYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-08-19T21:04:38Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-08-19T21:04:38Z"}, "message": "c-common.c: Fix comment formatting.\n\n\t* c-common.c: Fix comment formatting.\n\t* c-common.h: Likewise.\n\t* c-decl.c: Likewise.\n\t* cppinit.c: Likewise.\n\t* cpplib.h: Likewise.\n\t* emit-rtl.c: Likewise.\n\t* input.h: Likewise.\n\t* line-map.h: Likewise.\n\t* opts.c: Likewise.\n\t* opts.h: Likewise.\n\t* simplify-rtx.c: Likewise.\n\nFrom-SVN: r70577", "tree": {"sha": "65a1b182fb86bfce6ef7b7223a461de628f18346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65a1b182fb86bfce6ef7b7223a461de628f18346"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59e4e217ae04230110961dfa6e0d7905189e7edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e4e217ae04230110961dfa6e0d7905189e7edc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e4e217ae04230110961dfa6e0d7905189e7edc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e4e217ae04230110961dfa6e0d7905189e7edc/comments", "author": null, "committer": null, "parents": [{"sha": "1ee93c1b047f574e69996666ff3f740ac56705e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ee93c1b047f574e69996666ff3f740ac56705e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ee93c1b047f574e69996666ff3f740ac56705e4"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "37f746e2485403e6d3f552b2d4be8357729b19ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59e4e217ae04230110961dfa6e0d7905189e7edc", "patch": "@@ -1,3 +1,17 @@\n+2003-08-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-common.c: Fix comment formatting.\n+\t* c-common.h: Likewise.\n+\t* c-decl.c: Likewise.\n+\t* cppinit.c: Likewise.\n+\t* cpplib.h: Likewise.\n+\t* emit-rtl.c: Likewise.\n+\t* input.h: Likewise.\n+\t* line-map.h: Likewise.\n+\t* opts.c: Likewise.\n+\t* opts.h: Likewise.\n+\t* simplify-rtx.c: Likewise.\n+\n 2003-08-19  Daniel Jacobowitz  <drow@mvista.com>\n \n \t* unwind-c.c: Add libgcc-style exception."}, {"sha": "cc9caf7061d52d64310e51787b0317dbe9781a7d", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=59e4e217ae04230110961dfa6e0d7905189e7edc", "patch": "@@ -413,7 +413,7 @@ int warn_main;\n int warn_sequence_point;\n \n /* Nonzero means warn about uninitialized variable when it is initialized with itself.\n-   For example: int i = i;, GCC will not warn about this when warn_init_self is nonzero. */\n+   For example: int i = i;, GCC will not warn about this when warn_init_self is nonzero.  */\n \n int warn_init_self;\n \n@@ -5739,7 +5739,7 @@ c_estimate_num_insns (tree decl)\n static tree\n c_decl_uninit_1 (tree *t, int *walk_sub_trees, void *x)\n {\n-  /* If x = EXP(&x)EXP, then do not warn about the use of x. */\n+  /* If x = EXP(&x)EXP, then do not warn about the use of x.  */\n   if (TREE_CODE (*t) == ADDR_EXPR && TREE_OPERAND (*t, 0) == x)\n     {\n       *walk_sub_trees = 0;\n@@ -5755,11 +5755,11 @@ c_decl_uninit_1 (tree *t, int *walk_sub_trees, void *x)\n bool\n c_decl_uninit (tree t)\n {\n-  /* int x = x; is GCC extension to turn off this warning, only if warn_init_self is zero. */\n+  /* int x = x; is GCC extension to turn off this warning, only if warn_init_self is zero.  */\n   if (DECL_INITIAL (t) == t)\n     return warn_init_self ? true : false;\n \n-  /* Walk the trees looking for the variable itself. */\n+  /* Walk the trees looking for the variable itself.  */\n   if (walk_tree_without_duplicates (&DECL_INITIAL (t), c_decl_uninit_1, t))\n     return true;\n   return false;"}, {"sha": "73a932cce8e033288d786bb142376eafda884887", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=59e4e217ae04230110961dfa6e0d7905189e7edc", "patch": "@@ -574,7 +574,7 @@ extern int warn_main;\n extern int warn_sequence_point;\n \n /* Nonzero means warn about uninitialized variable when it is initialized with itself. \n-   For example: int i = i;, GCC will not warn about this when warn_init_self is nonzero. */\n+   For example: int i = i;, GCC will not warn about this when warn_init_self is nonzero.  */\n \n extern int warn_init_self;\n "}, {"sha": "feef9900145f5d3949ba4d89d739416a60830271", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=59e4e217ae04230110961dfa6e0d7905189e7edc", "patch": "@@ -461,7 +461,7 @@ pushlevel (int dummy ATTRIBUTE_UNUSED)\n \n \t The outermost block of a function always gets a BLOCK node,\n \t because the debugging output routines expect that each\n-\t function has at least one BLOCK. */\n+\t function has at least one BLOCK.  */\n       current_scope->parm_flag         = false;\n       current_scope->function_body     = true;\n       current_scope->keep              = true;"}, {"sha": "351ce187eac5b4bf5ff874984df40f14fa9f7f68", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=59e4e217ae04230110961dfa6e0d7905189e7edc", "patch": "@@ -435,7 +435,7 @@ cpp_add_dependency_target (cpp_reader *pfile, const char *target, int quote)\n }\n \n /* This is called after options have been parsed, and partially\n-   processed. */\n+   processed.  */\n void\n cpp_post_options (cpp_reader *pfile)\n {"}, {"sha": "b63f363807d70fb82f7ea381bf6b39dcba444d97", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=59e4e217ae04230110961dfa6e0d7905189e7edc", "patch": "@@ -537,7 +537,7 @@ extern const char *cpp_read_main_file (cpp_reader *, const char *);\n extern void cpp_init_builtins (cpp_reader *, int);\n \n /* This is called after options have been parsed, and partially\n-   processed. */\n+   processed.  */\n extern void cpp_post_options (cpp_reader *);\n \n /* Set up translation to the target character set.  */"}, {"sha": "45ff41ce67ae0b039cd2138bc490def99dbe0636", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=59e4e217ae04230110961dfa6e0d7905189e7edc", "patch": "@@ -5317,7 +5317,7 @@ init_emit_once (int line_numbers)\n   enum machine_mode mode;\n   enum machine_mode double_mode;\n \n-  /* We need reg_raw_mode, so initialize the modes now. */\n+  /* We need reg_raw_mode, so initialize the modes now.  */\n   init_reg_modes_once ();\n \n   /* Initialize the CONST_INT, CONST_DOUBLE, and memory attribute hash"}, {"sha": "fba597e2af0b9c43e47dd3a030dc3a892801b149", "filename": "gcc/input.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=59e4e217ae04230110961dfa6e0d7905189e7edc", "patch": "@@ -23,7 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define GCC_INPUT_H\n \n /* The data structure used to record a location in a translation unit.  */\n-/* Long-term, we want to get rid of this and typedef fileline location_t. */\n+/* Long-term, we want to get rid of this and typedef fileline location_t.  */\n struct location_s GTY (())\n {\n   /* The name of the source file involved.  */"}, {"sha": "b53f5e06be6e4e9e1916fb218355d5cd24a60ea8", "filename": "gcc/line-map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fline-map.h?ref=59e4e217ae04230110961dfa6e0d7905189e7edc", "patch": "@@ -30,9 +30,9 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n    (e.g. a #line directive in C).  */\n enum lc_reason {LC_ENTER = 0, LC_LEAVE, LC_RENAME};\n \n-/* A logical line number, i,e, an \"index\" into a line_map. */\n+/* A logical line number, i,e, an \"index\" into a line_map.  */\n /* Long-term, we want to use this to replace struct location_s (in input.h),\n-   and effectively typedef fileline location_t. */\n+   and effectively typedef fileline location_t.  */\n typedef unsigned int fileline;\n \n /* The logical line FROM_LINE maps to physical source file TO_FILE at"}, {"sha": "24741da5588cf7da43961339a26afe95516a6545", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=59e4e217ae04230110961dfa6e0d7905189e7edc", "patch": "@@ -148,7 +148,7 @@ static unsigned int columns = 80;\n /* What to print when a switch has no documentation.  */\n static const char undocumented_msg[] = N_(\"This switch lacks documentation\");\n \n-/* Input file names. */\n+/* Input file names.  */\n const char **in_fnames;\n unsigned num_in_fnames;\n "}, {"sha": "eb7c868120be271f20410f7cef610cec8ef254c7", "filename": "gcc/opts.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=59e4e217ae04230110961dfa6e0d7905189e7edc", "patch": "@@ -45,11 +45,11 @@ extern const char *const lang_names[];\n #define CL_COMMON\t\t(1 << 29) /* Language-independent.  */\n #define CL_UNDOCUMENTED\t\t(1 << 30) /* Do not output with --help.  */\n \n-/* Input file names. */\n+/* Input file names.  */\n \n extern const char **in_fnames;\n \n-/* The count of input filenames. */\n+/* The count of input filenames.  */\n \n extern unsigned num_in_fnames;\n "}, {"sha": "ddd55cc5c965daaf3716843a4732df68e490f730", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59e4e217ae04230110961dfa6e0d7905189e7edc/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=59e4e217ae04230110961dfa6e0d7905189e7edc", "patch": "@@ -130,7 +130,7 @@ avoid_constant_pool_reference (rtx x)\n \n   addr = XEXP (x, 0);\n \n-  /* Call target hook to avoid the effects of -fpic etc...  */\n+  /* Call target hook to avoid the effects of -fpic etc....  */\n   addr = (*targetm.delegitimize_address) (addr);\n \n   if (GET_CODE (addr) == LO_SUM)\n@@ -1041,7 +1041,7 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t  neg_double (l2, h2, &lv, &hv);\n \t  l2 = lv, h2 = hv;\n \n-\t  /* .. fall through ...  */\n+\t  /* Fall through....  */\n \n \tcase PLUS:\n \t  add_double (l1, h1, l2, h2, &lv, &hv);\n@@ -1542,7 +1542,7 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t      && (arg1 = exact_log2 (INTVAL (trueop1))) > 0)\n \t    return simplify_gen_binary (LSHIFTRT, mode, op0, GEN_INT (arg1));\n \n-\t  /* ... fall through ...  */\n+\t  /* Fall through....  */\n \n \tcase DIV:\n \t  if (trueop1 == CONST1_RTX (mode))\n@@ -1594,7 +1594,7 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t    return simplify_gen_binary (AND, mode, op0,\n \t\t\t\t\tGEN_INT (INTVAL (op1) - 1));\n \n-\t  /* ... fall through ...  */\n+\t  /* Fall through....  */\n \n \tcase MOD:\n \t  if ((trueop0 == const0_rtx || trueop1 == const1_rtx)\n@@ -1611,7 +1611,7 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t      && ! side_effects_p (op1))\n \t    return op0;\n \n-\t  /* ... fall through ...  */\n+\t  /* Fall through....  */\n \n \tcase ASHIFT:\n \tcase LSHIFTRT:\n@@ -3163,7 +3163,7 @@ simplify_rtx (rtx x)\n       if (swap_commutative_operands_p (XEXP (x, 0), XEXP (x, 1)))\n \treturn simplify_gen_binary (code, mode, XEXP (x, 1), XEXP (x, 0));\n \n-      /* ... fall through ... */\n+      /* Fall through.... */\n \n     case '2':\n       return simplify_binary_operation (code, mode, XEXP (x, 0), XEXP (x, 1));"}]}