{"sha": "ac53d5f2542c1f667448d87b6640531caf3fa234", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM1M2Q1ZjI1NDJjMWY2Njc0NDhkODdiNjY0MDUzMWNhZjNmYTIzNA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-04-21T07:00:44Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-04-21T07:00:44Z"}, "message": "utils.c (create_type_decl): Do not pass declarations of dummy fat pointer types to the debug back-end.\n\n\t* gcc-interface/utils.c (create_type_decl): Do not pass declarations\n\tof dummy fat pointer types to the debug back-end.\n\nFrom-SVN: r146467", "tree": {"sha": "40c4fb7f5a4df2ce0fc89746f672c6af1875c17f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40c4fb7f5a4df2ce0fc89746f672c6af1875c17f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac53d5f2542c1f667448d87b6640531caf3fa234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac53d5f2542c1f667448d87b6640531caf3fa234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac53d5f2542c1f667448d87b6640531caf3fa234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac53d5f2542c1f667448d87b6640531caf3fa234/comments", "author": null, "committer": null, "parents": [{"sha": "59356222e01ceec1b1bdd27e02a27bd8a4f3ec3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59356222e01ceec1b1bdd27e02a27bd8a4f3ec3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59356222e01ceec1b1bdd27e02a27bd8a4f3ec3d"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "0e48f7848b1b26fcda921f21434804db06adedfc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac53d5f2542c1f667448d87b6640531caf3fa234/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac53d5f2542c1f667448d87b6640531caf3fa234/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ac53d5f2542c1f667448d87b6640531caf3fa234", "patch": "@@ -1,3 +1,8 @@\n+2009-04-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (create_type_decl): Do not pass declarations\n+\tof dummy fat pointer types to the debug back-end.\n+\n 2009-04-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Rewrite Esize calculation."}, {"sha": "8802827cf09be5209424461fa05c677324ebfc5b", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac53d5f2542c1f667448d87b6640531caf3fa234/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac53d5f2542c1f667448d87b6640531caf3fa234/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=ac53d5f2542c1f667448d87b6640531caf3fa234", "patch": "@@ -1244,15 +1244,19 @@ create_type_decl (tree type_name, tree type, struct attrib *attr_list,\n     TYPE_STUB_DECL (type) = type_decl;\n \n   /* Pass the type declaration to the debug back-end unless this is an\n-     UNCONSTRAINED_ARRAY_TYPE that the back-end does not support, an\n-     ENUMERAL_TYPE or RECORD_TYPE which are handled separately, or a\n-     type for which debugging information was not requested.  */\n+     UNCONSTRAINED_ARRAY_TYPE that the back-end does not support, or a\n+     type for which debugging information was not requested, or else an\n+     ENUMERAL_TYPE or RECORD_TYPE (except for fat pointers) which are\n+     handled separately.  And do not pass dummy types either.  */\n   if (code == UNCONSTRAINED_ARRAY_TYPE || !debug_info_p)\n     DECL_IGNORED_P (type_decl) = 1;\n   else if (code != ENUMERAL_TYPE\n \t   && (code != RECORD_TYPE || TYPE_IS_FAT_POINTER_P (type))\n \t   && !((code == POINTER_TYPE || code == REFERENCE_TYPE)\n-\t\t&& TYPE_IS_DUMMY_P (TREE_TYPE (type))))\n+\t\t&& TYPE_IS_DUMMY_P (TREE_TYPE (type)))\n+\t   && !(code == RECORD_TYPE\n+\t\t&& TYPE_IS_DUMMY_P\n+\t\t   (TREE_TYPE (TREE_TYPE (TYPE_FIELDS (type))))))\n     rest_of_type_decl_compilation (type_decl);\n \n   return type_decl;"}]}