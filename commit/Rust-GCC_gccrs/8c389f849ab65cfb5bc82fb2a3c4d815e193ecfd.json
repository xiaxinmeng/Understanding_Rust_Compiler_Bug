{"sha": "8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMzODlmODQ5YWI2NWNmYjViYzgyZmIyYTNjNGQ4MTVlMTkzZWNmZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-04-10T03:27:21Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-04-10T03:27:21Z"}, "message": "cpphash.c (timestamp): Delete.\n\n\t* cpphash.c (timestamp): Delete.\n\t(del_HASHNODE): If type is T_MCONST, free value.cpval.\n\t(special_symbol): Remove unnecessary braces.  Remove\n\tT_VERSION.  Treat T_STDC like T_CONST unless\n\tSTDC_0_IN_SYSTEM_HEADERS.  Render both __DATE__ and __TIME__\n\twhen one is encountered, then convert them into T_MCONST\n\tnodes.\n\t* cppinit.c (builtin_array): version_string is T_MCONST.\n\t__STDC__ has a \"1\" in its cpval.  Don't have a terminator\n\tentry.  Clean up which entries are dumped.\n\t(initialize_builtins): Only __STDC__ gets the special\n\t-traditional treatment.  Count the length of builtin_array.\n\tRender version_string here.\n\t* cpphash.h: Remove T_VERSION.  Add T_MCONST.\n\t* cpplib.h (struct cpp_reader): Remove timebuf.\n\nFrom-SVN: r33047", "tree": {"sha": "e001640b191e5f97c968fedc53d3750c074b5126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e001640b191e5f97c968fedc53d3750c074b5126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd/comments", "author": null, "committer": null, "parents": [{"sha": "3a3677ff46c5e086f59fdf7dc64e5eb09354bf25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a3677ff46c5e086f59fdf7dc64e5eb09354bf25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a3677ff46c5e086f59fdf7dc64e5eb09354bf25"}], "stats": {"total": 183, "additions": 93, "deletions": 90}, "files": [{"sha": "c18abd60b75929ebe3abaac7b653043c8bf1a048", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd", "patch": "@@ -1,3 +1,21 @@\n+2000-04-09  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpphash.c (timestamp): Delete.\n+\t(del_HASHNODE): If type is T_MCONST, free value.cpval.\n+\t(special_symbol): Remove unnecessary braces.  Remove\n+\tT_VERSION.  Treat T_STDC like T_CONST unless\n+\tSTDC_0_IN_SYSTEM_HEADERS.  Render both __DATE__ and __TIME__\n+\twhen one is encountered, then convert them into T_MCONST\n+\tnodes.\n+\t* cppinit.c (builtin_array): version_string is T_MCONST.\n+\t__STDC__ has a \"1\" in its cpval.  Don't have a terminator\n+\tentry.  Clean up which entries are dumped.\n+\t(initialize_builtins): Only __STDC__ gets the special\n+\t-traditional treatment.  Count the length of builtin_array.\n+\tRender version_string here.\n+\t* cpphash.h: Remove T_VERSION.  Add T_MCONST.\n+\t* cpplib.h (struct cpp_reader): Remove timebuf.\t\n+\n 2000-04-09  Richard Henderson  <rth@cygnus.com>\n \n \t* genrecog.c (pred): Update comparison_operator for the unordered"}, {"sha": "c4cf5f458f8a1eb4da397fe8793de3409d9c9faa", "filename": "gcc/cpphash.c", "status": "modified", "additions": 47, "deletions": 61, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd", "patch": "@@ -42,7 +42,6 @@ static void push_macro_expansion PARAMS ((cpp_reader *,\n static int unsafe_chars\t\t PARAMS ((cpp_reader *, int, int));\n static int macro_cleanup\t PARAMS ((cpp_buffer *, cpp_reader *));\n static enum cpp_token macarg\t PARAMS ((cpp_reader *, int));\n-static struct tm *timestamp\t PARAMS ((cpp_reader *));\n static void special_symbol\t PARAMS ((HASHNODE *, cpp_reader *));\n \n /* Initial hash table size.  (It can grow if necessary - see hashtab.c.)  */\n@@ -141,6 +140,8 @@ del_HASHNODE (x)\n   \n   if (h->type == T_MACRO)\n     _cpp_free_definition (h->value.defn);\n+  else if (h->type == T_MCONST)\n+    free ((void *) h->value.cpval);\n   free ((void *) h->name);\n   free (h);\n }\n@@ -794,18 +795,6 @@ macarg (pfile, rest_args)\n }\n \f\n \n-static struct tm *\n-timestamp (pfile)\n-     cpp_reader *pfile;\n-{\n-  if (!pfile->timebuf)\n-    {\n-      time_t t = time ((time_t *) 0);\n-      pfile->timebuf = localtime (&t);\n-    }\n-  return pfile->timebuf;\n-}\n-\n static const char * const monthnames[] =\n {\n   \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n@@ -854,6 +843,7 @@ _cpp_quote_string (pfile, src)\n  * buffer *without* rescanning.\n  */\n \n+#define DSC(str) (const U_CHAR *)str, sizeof str - 1\n static void\n special_symbol (hp, pfile)\n      HASHNODE *hp;\n@@ -867,22 +857,15 @@ special_symbol (hp, pfile)\n     {\n     case T_FILE:\n     case T_BASE_FILE:\n-      {\n-\tip = cpp_file_buffer (pfile);\n-\tif (hp->type == T_BASE_FILE)\n-\t  {\n-\t    while (CPP_PREV_BUFFER (ip) != NULL)\n-\t      ip = CPP_PREV_BUFFER (ip);\n-\t  }\n-\n-\tbuf = ip->nominal_fname;\n+      ip = cpp_file_buffer (pfile);\n+      if (hp->type == T_BASE_FILE)\n+\twhile (CPP_PREV_BUFFER (ip) != NULL)\n+\t  ip = CPP_PREV_BUFFER (ip);\n \n-\tif (!buf)\n-\t  buf = \"\";\n-\tCPP_RESERVE (pfile, 3 + 4 * strlen (buf));\n-\t_cpp_quote_string (pfile, buf);\n-\treturn;\n-      }\n+      buf = ip->nominal_fname;\n+      CPP_RESERVE (pfile, 3 + 4 * strlen (buf));\n+      _cpp_quote_string (pfile, buf);\n+      return;\n \n     case T_INCLUDE_LEVEL:\n       {\n@@ -897,16 +880,21 @@ special_symbol (hp, pfile)\n \treturn;\n       }\n \n-    case T_VERSION:\n-      len = strlen (hp->value.cpval);\n-      CPP_RESERVE (pfile, 3 + len);\n-      CPP_PUTC_Q (pfile, '\"');\n-      CPP_PUTS_Q (pfile, hp->value.cpval, len);\n-      CPP_PUTC_Q (pfile, '\"');\n-      CPP_NUL_TERMINATE_Q (pfile);\n-      return;\n-\n+    case T_STDC:\n+#ifdef STDC_0_IN_SYSTEM_HEADERS\n+      ip = cpp_file_buffer (pfile);\n+      if (ip->system_header_p && !cpp_defined (pfile, DSC(\"__STRICT_ANSI__\")))\n+\t{\n+\t  CPP_RESERVE (pfile, 2);\n+\t  CPP_PUTC_Q (pfile, '0');\n+\t  CPP_NUL_TERMINATE_Q (pfile);\n+\t  return;\n+\t}\n+#endif\n+      /* else fall through */\n     case T_CONST:\n+    case T_MCONST:\n+    constant:\n       buf = hp->value.cpval;\n       if (!buf)\n \treturn;\n@@ -919,19 +907,6 @@ special_symbol (hp, pfile)\n       CPP_NUL_TERMINATE_Q (pfile);\n       return;\n \n-    case T_STDC:\n-      CPP_RESERVE (pfile, 2);\n-#ifdef STDC_0_IN_SYSTEM_HEADERS\n-      ip = cpp_file_buffer (pfile);\n-      if (ip->system_header_p\n-\t  && !cpp_defined (pfile, (const U_CHAR *) \"__STRICT_ANSI__\", 15))\n-\tCPP_PUTC_Q (pfile, '0');\n-      else\n-#endif\n-\tCPP_PUTC_Q (pfile, '1');\n-      CPP_NUL_TERMINATE_Q (pfile);\n-      return;\n-\n     case T_SPECLINE:\n       {\n \tlong line;\n@@ -945,21 +920,31 @@ special_symbol (hp, pfile)\n \n     case T_DATE:\n     case T_TIME:\n+      /* Generate both __DATE__ and __TIME__, stuff them into their\n+\t respective hash nodes, and mark the nodes T_MCONST so we\n+\t don't have to do this again.  We don't generate these strings\n+\t at init time because time() and localtime() are very slow on\n+\t some systems.  */\n       {\n-\tstruct tm *timebuf;\n+\ttime_t tt = time (NULL);\n+\tstruct tm *tb = localtime (&tt);\n+\tHASHNODE *d, *t;\n \n-\tCPP_RESERVE (pfile, 20);\n-\ttimebuf = timestamp (pfile);\n \tif (hp->type == T_DATE)\n-\t  sprintf (CPP_PWRITTEN (pfile), \"\\\"%s %2d %4d\\\"\",\n-\t\t   monthnames[timebuf->tm_mon],\n-\t\t   timebuf->tm_mday, timebuf->tm_year + 1900);\n+\t  d = hp, t = _cpp_lookup (pfile, DSC(\"__TIME__\"));\n \telse\n-\t  sprintf (CPP_PWRITTEN (pfile), \"\\\"%02d:%02d:%02d\\\"\",\n-\t\t   timebuf->tm_hour, timebuf->tm_min, timebuf->tm_sec);\n-\n-\tCPP_ADJUST_WRITTEN (pfile, strlen (CPP_PWRITTEN (pfile)));\n-\treturn;\n+\t  t = hp, d = _cpp_lookup (pfile, DSC(\"__DATE__\"));\n+\n+\td->value.cpval = xmalloc (sizeof \"'Oct 11 1347'\");\n+\tsprintf ((char *)d->value.cpval, \"\\\"%s %2d %4d\\\"\",\n+\t\t monthnames[tb->tm_mon], tb->tm_mday, tb->tm_year + 1900);\n+\td->type = T_MCONST;\n+\n+\tt->value.cpval = xmalloc (sizeof \"'12:34:56'\");\n+\tsprintf ((char *)t->value.cpval, \"\\\"%02d:%02d:%02d\\\"\",\n+\t\t tb->tm_hour, tb->tm_min, tb->tm_sec);\n+\tt->type = T_MCONST;\n+\tgoto constant;\n       }\n \n     case T_POISON:\n@@ -974,6 +959,7 @@ special_symbol (hp, pfile)\n       return;\n     }\n }\n+#undef DSC\n \n /* Expand a macro call.\n    HP points to the symbol that is the macro being called."}, {"sha": "35d48e85d90f3e2c6a925c2fe1ba7ac8f9083b2b", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd", "patch": "@@ -91,10 +91,10 @@ enum node_type\n   T_FILE,\t   /* `__FILE__' */\n   T_BASE_FILE,\t   /* `__BASE_FILE__' */\n   T_INCLUDE_LEVEL, /* `__INCLUDE_LEVEL__' */\n-  T_VERSION,\t   /* `__VERSION__' */\n   T_TIME,\t   /* `__TIME__' */\n   T_STDC,\t   /* `__STDC__' */\n   T_CONST,\t   /* Constant string, used by `__SIZE_TYPE__' etc */\n+  T_MCONST,\t   /* Ditto, but the string is malloced memory */\n   T_MACRO,\t   /* macro defined by `#define' */\n   T_DISABLED,\t   /* macro temporarily turned off for rescan */\n   T_POISON,\t   /* macro defined with `#pragma poison' */"}, {"sha": "32293f6d27f7c34d113474884ca9232eb18d426b", "filename": "gcc/cppinit.c", "status": "modified", "additions": 27, "deletions": 26, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd", "patch": "@@ -588,9 +588,8 @@ cpp_cleanup (pfile)\n    be entered in the macro hash table under the name NAME, with value\n    VALUE (if any).  FLAGS tweaks the behavior a little:\n    DUMP\t\twrite debug info for this macro\n-   STDC\t\tdefine only if not -traditional\n-   ULP\t\tvalue is the global user_label_prefix (which can't be\n-\t\tput directly into the table).\n+   VERS\t\tvalue is the global version_string, quoted\n+   ULP\t\tvalue is the global user_label_prefix\n  */\n \n struct builtin\n@@ -601,35 +600,35 @@ struct builtin\n   unsigned short flags;\n };\n #define DUMP 0x01\n-#define STDC 0x02\n-#define VERS 0x04\n-#define ULP  0x08\n+#define VERS 0x02\n+#define ULP  0x04\n \n static const struct builtin builtin_array[] =\n {\n-  { \"__TIME__\",\t\t\t0, T_TIME,\t\tDUMP },\n-  { \"__DATE__\",\t\t\t0, T_DATE,\t\tDUMP },\n-  { \"__FILE__\",\t\t\t0, T_FILE,\t\t0    },\n-  { \"__BASE_FILE__\",\t\t0, T_BASE_FILE,\t\t0    },\n-  { \"__LINE__\",\t\t\t0, T_SPECLINE,\t\t0    },\n-  { \"__INCLUDE_LEVEL__\",\t0, T_INCLUDE_LEVEL,\t0    },\n-  { \"__VERSION__\",\t\t0, T_VERSION,\t\tDUMP|VERS },\n-  { \"__STDC__\",\t\t\t0, T_STDC,\t\tDUMP|STDC },\n-\n-  { \"__USER_LABEL_PREFIX__\",\t0,\t\t T_CONST, ULP  },\n-  { \"__REGISTER_PREFIX__\",\tREGISTER_PREFIX, T_CONST, 0    },\n-  { \"__HAVE_BUILTIN_SETJMP__\",\t\"1\",\t\t T_CONST, 0    },\n+  { \"__TIME__\",\t\t\t0, T_TIME,\t\t0 },\n+  { \"__DATE__\",\t\t\t0, T_DATE,\t\t0 },\n+  { \"__FILE__\",\t\t\t0, T_FILE,\t\t0 },\n+  { \"__BASE_FILE__\",\t\t0, T_BASE_FILE,\t\t0 },\n+  { \"__LINE__\",\t\t\t0, T_SPECLINE,\t\t0 },\n+  { \"__INCLUDE_LEVEL__\",\t0, T_INCLUDE_LEVEL,\t0 },\n+\n+  { \"__VERSION__\",\t\t0,\t\t T_MCONST, DUMP|VERS },\n+  { \"__USER_LABEL_PREFIX__\",\t0,\t\t T_CONST,  DUMP|ULP  },\n+  { \"__STDC__\",\t\t\t\"1\",\t\t T_STDC,   DUMP },\n+  { \"__REGISTER_PREFIX__\",\tREGISTER_PREFIX, T_CONST,  DUMP },\n+  { \"__HAVE_BUILTIN_SETJMP__\",\t\"1\",\t\t T_CONST,  DUMP },\n #ifndef NO_BUILTIN_SIZE_TYPE\n-  { \"__SIZE_TYPE__\",\t\tSIZE_TYPE,\t T_CONST, DUMP },\n+  { \"__SIZE_TYPE__\",\t\tSIZE_TYPE,\t T_CONST,  DUMP },\n #endif\n #ifndef NO_BUILTIN_PTRDIFF_TYPE\n-  { \"__PTRDIFF_TYPE__\",\t\tPTRDIFF_TYPE,\t T_CONST, DUMP },\n+  { \"__PTRDIFF_TYPE__\",\t\tPTRDIFF_TYPE,\t T_CONST,  DUMP },\n #endif\n #ifndef NO_BUILTIN_WCHAR_TYPE\n-  { \"__WCHAR_TYPE__\",\t\tWCHAR_TYPE,\t T_CONST, DUMP },\n+  { \"__WCHAR_TYPE__\",\t\tWCHAR_TYPE,\t T_CONST,  DUMP },\n #endif\n-  { 0, 0, 0, 0 }\n };\n+#define builtin_array_end \\\n+ builtin_array + sizeof(builtin_array)/sizeof(struct builtin)\n \n /* Subroutine of cpp_start_read; reads the builtins table above and\n    enters the macros into the hash table.  */\n@@ -641,15 +640,18 @@ initialize_builtins (pfile)\n   const struct builtin *b;\n   const char *val;\n   HASHNODE *hp;\n-  for(b = builtin_array; b->name; b++)\n+  for(b = builtin_array; b < builtin_array_end; b++)\n     {\n-      if ((b->flags & STDC) && CPP_TRADITIONAL (pfile))\n+      if (b->type == T_STDC && CPP_TRADITIONAL (pfile))\n \tcontinue;\n \n       if (b->flags & ULP)\n \tval = user_label_prefix;\n       else if (b->flags & VERS)\n-\tval = version_string;\n+\t{\n+\t  val = xmalloc (strlen (version_string) + 3);\n+\t  sprintf ((char *)val, \"\\\"%s\\\"\", version_string);\n+\t}\n       else\n \tval = b->value;\n \n@@ -662,7 +664,6 @@ initialize_builtins (pfile)\n       if ((b->flags & DUMP) && CPP_OPTION (pfile, debug_output))\n \tdump_special_to_buffer (pfile, b->name);\n     }\n-\n }\n #undef DUMP\n #undef STDC"}, {"sha": "c28cf3a67ab9723edc5ce59a699fe5edc5663b5d", "filename": "gcc/cpplib.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=8c389f849ab65cfb5bc82fb2a3c4d815e193ecfd", "patch": "@@ -352,8 +352,6 @@ struct cpp_reader\n \n   long lineno;\n \n-  struct tm *timebuf;\n-\n   /* Buffer of -M output.  */\n   struct deps *deps;\n "}]}