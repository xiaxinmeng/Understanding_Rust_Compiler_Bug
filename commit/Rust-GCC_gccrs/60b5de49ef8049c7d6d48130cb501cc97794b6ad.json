{"sha": "60b5de49ef8049c7d6d48130cb501cc97794b6ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBiNWRlNDllZjgwNDljN2Q2ZDQ4MTMwY2I1MDFjYzk3Nzk0YjZhZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-08-24T18:57:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-08-24T18:57:50Z"}, "message": "pt.c (register_specialization): Correct argument to check_specialization_namespace.\n\n\t* pt.c (register_specialization): Correct argument to\n\tcheck_specialization_namespace.\n\t(determine_specialization): Don't consider members of\n\tunspecialized types.\n\nFrom-SVN: r190652", "tree": {"sha": "f3394b3c598b11bdffcbd2eae88e815c89b04f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3394b3c598b11bdffcbd2eae88e815c89b04f56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60b5de49ef8049c7d6d48130cb501cc97794b6ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b5de49ef8049c7d6d48130cb501cc97794b6ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60b5de49ef8049c7d6d48130cb501cc97794b6ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b5de49ef8049c7d6d48130cb501cc97794b6ad/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "013734b91bc257a1f03f2e94dca9efa1b94e39c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/013734b91bc257a1f03f2e94dca9efa1b94e39c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/013734b91bc257a1f03f2e94dca9efa1b94e39c9"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "9eb4b87420cbae5a1dfbbb7ce5debe72616a3f26", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60b5de49ef8049c7d6d48130cb501cc97794b6ad/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60b5de49ef8049c7d6d48130cb501cc97794b6ad/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=60b5de49ef8049c7d6d48130cb501cc97794b6ad", "patch": "@@ -1,3 +1,10 @@\n+2012-08-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (register_specialization): Correct argument to\n+\tcheck_specialization_namespace.\n+\t(determine_specialization): Don't consider members of\n+\tunspecialized types.\n+\n 2012-08-23  Jason Merrill  <jason@redhat.com>\n \n \t* decl.c (compute_array_index_type): Use type_dependent_expression_p."}, {"sha": "580a3d4b099729c97d7702c370a14efbb9e0a350", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60b5de49ef8049c7d6d48130cb501cc97794b6ad/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60b5de49ef8049c7d6d48130cb501cc97794b6ad/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=60b5de49ef8049c7d6d48130cb501cc97794b6ad", "patch": "@@ -735,7 +735,7 @@ end_explicit_instantiation (void)\n   processing_explicit_instantiation = false;\n }\n \n-/* An explicit specialization or partial specialization TMPL is being\n+/* An explicit specialization or partial specialization of TMPL is being\n    declared.  Check that the namespace in which the specialization is\n    occurring is permissible.  Returns false iff it is invalid to\n    specialize TMPL in the current namespace.  */\n@@ -1407,7 +1407,7 @@ register_specialization (tree spec, tree tmpl, tree args, bool is_friend,\n \t\t  DECL_SOURCE_LOCATION (clone)\n \t\t    = DECL_SOURCE_LOCATION (fn);\n \t\t}\n-\t      check_specialization_namespace (fn);\n+\t      check_specialization_namespace (tmpl);\n \n \t      return fn;\n \t    }\n@@ -1804,6 +1804,16 @@ determine_specialization (tree template_id,\n   if (template_id == error_mark_node || decl == error_mark_node)\n     return error_mark_node;\n \n+  /* We shouldn't be specializing a member template of an\n+     unspecialized class template; we already gave an error in\n+     check_specialization_scope, now avoid crashing.  */\n+  if (template_count && DECL_CLASS_SCOPE_P (decl)\n+      && template_class_depth (DECL_CONTEXT (decl)) > 0)\n+    {\n+      gcc_assert (errorcount);\n+      return error_mark_node;\n+    }\n+\n   fns = TREE_OPERAND (template_id, 0);\n   explicit_targs = TREE_OPERAND (template_id, 1);\n "}, {"sha": "385d19ada0c45048e91e2d9be2610969abb457e6", "filename": "gcc/testsuite/g++.dg/template/spec25.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60b5de49ef8049c7d6d48130cb501cc97794b6ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60b5de49ef8049c7d6d48130cb501cc97794b6ad/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec25.C?ref=60b5de49ef8049c7d6d48130cb501cc97794b6ad", "patch": "@@ -1,10 +1,10 @@\n namespace N {\n   template <typename T>\n   struct S {\n-    void f() {}\n+    void f() {}\t\t\t// { dg-error \"definition\" }\n   };\n }\n \n namespace K {\n-  template <> void N::S<char>::f() {} // { dg-error \"namespace|definition\" }\n+  template <> void N::S<char>::f() {} // { dg-error \"different namespace\" }\n }"}]}