{"sha": "793d9a16a2f863af4552edf27d846a1a71815b9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkzZDlhMTZhMmY4NjNhZjQ1NTJlZGYyN2Q4NDZhMWE3MTgxNWI5Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-10T10:40:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-10T10:40:33Z"}, "message": "tree-vectorizer.h (struct _slp_oprnd_info): Remove first_const_oprnd field, rename first_def_type to first_op_type.\n\n2013-04-10  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (struct _slp_oprnd_info): Remove\n\tfirst_const_oprnd field, rename first_def_type to first_op_type.\n\t* tree-vect-slp.c (vect_create_oprnd_info): Adjust.\n\t(vect_get_and_check_slp_defs): Always use the type of the\n\toperand.  Allow mixed vect_external_def, vect_constant_def types.\n\t(vect_get_constant_vectors): Handle mixed vect_external_def,\n\tvect_constant_def types.\n\n\t* gcc.dg/vect/slp-39.c: New testcase.\n\nFrom-SVN: r197669", "tree": {"sha": "baa1624b3c689a0c7c65d0aca659aa1d6db8f3b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baa1624b3c689a0c7c65d0aca659aa1d6db8f3b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/793d9a16a2f863af4552edf27d846a1a71815b9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793d9a16a2f863af4552edf27d846a1a71815b9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793d9a16a2f863af4552edf27d846a1a71815b9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793d9a16a2f863af4552edf27d846a1a71815b9c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee8a9b7b507013b0431cabd314a245461c3b86b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee8a9b7b507013b0431cabd314a245461c3b86b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee8a9b7b507013b0431cabd314a245461c3b86b9"}], "stats": {"total": 77, "additions": 53, "deletions": 24}, "files": [{"sha": "98feb2c23141592731d9ef60afdbf03747cc18b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793d9a16a2f863af4552edf27d846a1a71815b9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793d9a16a2f863af4552edf27d846a1a71815b9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=793d9a16a2f863af4552edf27d846a1a71815b9c", "patch": "@@ -1,3 +1,13 @@\n+2013-04-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (struct _slp_oprnd_info): Remove\n+\tfirst_const_oprnd field, rename first_def_type to first_op_type.\n+\t* tree-vect-slp.c (vect_create_oprnd_info): Adjust.\n+\t(vect_get_and_check_slp_defs): Always use the type of the\n+\toperand.  Allow mixed vect_external_def, vect_constant_def types.\n+\t(vect_get_constant_vectors): Handle mixed vect_external_def,\n+\tvect_constant_def types.\n+\n 2013-04-10  Joern Rennecke <joern.rennecke@embecosm.com>\n \n \tPR tree-optimization/55524"}, {"sha": "debc2aba16bd81238a81d62b81a6e80bd1cdc8a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793d9a16a2f863af4552edf27d846a1a71815b9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793d9a16a2f863af4552edf27d846a1a71815b9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=793d9a16a2f863af4552edf27d846a1a71815b9c", "patch": "@@ -1,3 +1,7 @@\n+2013-04-10  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/slp-39.c: New testcase.\n+\n 2013-04-10  Joern Rennecke <joern.rennecke@embecosm.com>\n \n \tPR tree-optimization/55524"}, {"sha": "b3c278a5fe38ef53e946d27ebd1a7874a39837e7", "filename": "gcc/testsuite/gcc.dg/vect/slp-39.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793d9a16a2f863af4552edf27d846a1a71815b9c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-39.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793d9a16a2f863af4552edf27d846a1a71815b9c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-39.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-39.c?ref=793d9a16a2f863af4552edf27d846a1a71815b9c", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\r\n+/* { dg-require-effective-target vect_double } */\r\n+\r\n+double x[1024], y[1024], z[1024];\r\n+void foo (double w)\r\n+{\r\n+  int i;\r\n+  for (i = 0; i < 1023; i+=2)\r\n+    {\r\n+      z[i] = x[i] + 1;\r\n+      z[i+1] = x[i+1] + w;\r\n+    }\r\n+}\r\n+void bar (double w)\r\n+{\r\n+  int i;\r\n+  for (i = 0; i < 1023; i+=2)\r\n+    {\r\n+      z[i] = x[i] + w;\r\n+      z[i+1] = x[i+1] + 1;\r\n+    }\r\n+}\r\n+\r\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" } } */\r\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */\r"}, {"sha": "108a87a27ee21d845845364708f632e1ac6f262b", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793d9a16a2f863af4552edf27d846a1a71815b9c/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793d9a16a2f863af4552edf27d846a1a71815b9c/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=793d9a16a2f863af4552edf27d846a1a71815b9c", "patch": "@@ -140,8 +140,7 @@ vect_create_oprnd_info (int nops, int group_size)\n       oprnd_info = XNEW (struct _slp_oprnd_info);\n       oprnd_info->def_stmts.create (group_size);\n       oprnd_info->first_dt = vect_uninitialized_def;\n-      oprnd_info->first_def_type = NULL_TREE;\n-      oprnd_info->first_const_oprnd = NULL_TREE;\n+      oprnd_info->first_op_type = NULL_TREE;\n       oprnd_info->first_pattern = false;\n       oprnds_info.quick_push (oprnd_info);\n     }\n@@ -321,16 +320,7 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t{\n \t  oprnd_info->first_dt = dt;\n \t  oprnd_info->first_pattern = pattern;\n-\t  if (def)\n-\t    {\n-\t      oprnd_info->first_def_type = TREE_TYPE (def);\n-\t      oprnd_info->first_const_oprnd = NULL_TREE;\n-\t    }\n-\t  else\n-            {\n-              oprnd_info->first_def_type = NULL_TREE;\n-              oprnd_info->first_const_oprnd = oprnd;\n-            }\n+\t  oprnd_info->first_op_type = TREE_TYPE (oprnd);\n \t}\n       else\n \t{\n@@ -341,14 +331,13 @@ vect_get_and_check_slp_defs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t     vect_internal_def.  */\n \t  if (((oprnd_info->first_dt != dt\n                 && !(oprnd_info->first_dt == vect_reduction_def\n-                     && dt == vect_internal_def))\n-               || (oprnd_info->first_def_type != NULL_TREE\n-\t\t   && def\n-\t\t   && !types_compatible_p (oprnd_info->first_def_type,\n-\t\t\t\t\t   TREE_TYPE (def))))\n-\t       || (!def\n-\t\t   && !types_compatible_p (TREE_TYPE (oprnd_info->first_const_oprnd),\n-\t\t\t\t\t   TREE_TYPE (oprnd))))\n+                     && dt == vect_internal_def)\n+\t\t&& !((oprnd_info->first_dt == vect_external_def\n+\t\t      || oprnd_info->first_dt == vect_constant_def)\n+\t\t     && (dt == vect_external_def\n+\t\t\t || dt == vect_constant_def)))\n+               || !types_compatible_p (oprnd_info->first_op_type,\n+\t\t\t\t       TREE_TYPE (oprnd))))\n \t    {\n \t      if (dump_enabled_p ())\n \t\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -2471,7 +2460,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n \t\t       the lhs, so make sure the scalar is the right type if\n \t\t       we are dealing with vectors of\n \t\t       long long/long/short/char.  */\n-\t\t    if (op_num == 1 && constant_p)\n+\t\t    if (op_num == 1 && TREE_CODE (op) == INTEGER_CST)\n \t\t      op = fold_convert (TREE_TYPE (vector_type), op);\n \t\t    break;\n \n@@ -2504,7 +2493,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n           number_of_places_left_in_vector--;\n \t  if (!types_compatible_p (TREE_TYPE (vector_type), TREE_TYPE (op)))\n \t    {\n-\t      if (constant_p)\n+\t      if (CONSTANT_CLASS_P (op))\n \t\t{\n \t\t  op = fold_unary (VIEW_CONVERT_EXPR,\n \t\t\t\t   TREE_TYPE (vector_type), op);\n@@ -2525,6 +2514,8 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n \t\t}\n \t    }\n \t  elts[number_of_places_left_in_vector] = op;\n+\t  if (!CONSTANT_CLASS_P (op))\n+\t    constant_p = false;\n \n           if (number_of_places_left_in_vector == 0)\n             {"}, {"sha": "0f1a02a2e373a3410f51a0cd9b51b388eccb1140", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793d9a16a2f863af4552edf27d846a1a71815b9c/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793d9a16a2f863af4552edf27d846a1a71815b9c/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=793d9a16a2f863af4552edf27d846a1a71815b9c", "patch": "@@ -169,8 +169,7 @@ typedef struct _slp_oprnd_info\n      operand itself in case it's constant, and an indication if it's a pattern\n      stmt.  */\n   enum vect_def_type first_dt;\n-  tree first_def_type;\n-  tree first_const_oprnd;\n+  tree first_op_type;\n   bool first_pattern;\n } *slp_oprnd_info;\n "}]}