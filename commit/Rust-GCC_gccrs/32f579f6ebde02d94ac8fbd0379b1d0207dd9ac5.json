{"sha": "32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJmNTc5ZjZlYmRlMDJkOTRhYzhmYmQwMzc5YjFkMDIwN2RkOWFjNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-05-05T21:09:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-05-05T21:09:16Z"}, "message": "re PR middle-end/39666 (spurious warning with ranged-switch statements)\n\n\tPR middle-end/39666\n\t* gimplify.c (gimplify_switch_expr): If case labels cover the whole\n\trange of the type, but default label is missing, add it with one\n\tof the existing labels instead of adding a new label for it.\n\n\t* gcc.dg/pr39666-1.c: New test.\n\t* gcc.dg/pr39666-2.c: Likewise.\n\t* g++.dg/warn/Wuninitialized-4.C: Likewise.\n\t* g++.dg/warn/Wuninitialized-5.C: Likewise.\n\t* gfortran.dg/pr39666-1.f90: Likewise.\n\t* gfortran.dg/pr39666-2.f90: Likewise.\n\nFrom-SVN: r147136", "tree": {"sha": "04135baa9f723c92400dc6a7d81d23fdc587597b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04135baa9f723c92400dc6a7d81d23fdc587597b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e57a01df44693719cdaa9c552bfc3d729f5c095", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e57a01df44693719cdaa9c552bfc3d729f5c095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e57a01df44693719cdaa9c552bfc3d729f5c095"}], "stats": {"total": 192, "additions": 183, "deletions": 9}, "files": [{"sha": "9ab24dbad9e0e5df5695af72c15ec0fc9578da23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "patch": "@@ -12,6 +12,11 @@\n \t(gen_variable_die): Likewise.  Check TREE_PRIVATE/TREE_PROTECTED\n \tunconditionally.\n \n+\tPR middle-end/39666\n+\t* gimplify.c (gimplify_switch_expr): If case labels cover the whole\n+\trange of the type, but default label is missing, add it with one\n+\tof the existing labels instead of adding a new label for it.\n+\n 2009-05-05  Joseph Myers  <joseph@codesourcery.com>\n \n \t* dwarf.h: Remove."}, {"sha": "0c33dab479afc55a3d0b7e661671aa691b332925", "filename": "gcc/gimplify.c", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "patch": "@@ -1604,20 +1604,63 @@ gimplify_switch_expr (tree *expr_p, gimple_seq *pre_p)\n \t}\n       len = i;\n \n+      if (!VEC_empty (tree, labels))\n+\tsort_case_labels (labels);\n+\n       if (!default_case)\n \t{\n-\t  gimple new_default;\n+\t  tree type = TREE_TYPE (switch_expr);\n \n \t  /* If the switch has no default label, add one, so that we jump\n-\t     around the switch body.  */\n-\t  default_case = build3 (CASE_LABEL_EXPR, void_type_node, NULL_TREE,\n-\t                         NULL_TREE, create_artificial_label ());\n-\t  new_default = gimple_build_label (CASE_LABEL (default_case));\n-\t  gimplify_seq_add_stmt (&switch_body_seq, new_default);\n-\t}\n+\t     around the switch body.  If the labels already cover the whole\n+\t     range of type, add the default label pointing to one of the\n+\t     existing labels.  */\n+\t  if (type == void_type_node)\n+\t    type = TREE_TYPE (SWITCH_COND (switch_expr));\n+\t  if (len\n+\t      && INTEGRAL_TYPE_P (type)\n+\t      && TYPE_MIN_VALUE (type)\n+\t      && TYPE_MAX_VALUE (type)\n+\t      && tree_int_cst_equal (CASE_LOW (VEC_index (tree, labels, 0)),\n+\t\t\t\t     TYPE_MIN_VALUE (type)))\n+\t    {\n+\t      tree low, high = CASE_HIGH (VEC_index (tree, labels, len - 1));\n+\t      if (!high)\n+\t\thigh = CASE_LOW (VEC_index (tree, labels, len - 1));\n+\t      if (tree_int_cst_equal (high, TYPE_MAX_VALUE (type)))\n+\t\t{\n+\t\t  for (i = 1; i < len; i++)\n+\t\t    {\n+\t\t      high = CASE_LOW (VEC_index (tree, labels, i));\n+\t\t      low = CASE_HIGH (VEC_index (tree, labels, i - 1));\n+\t\t      if (!low)\n+\t\t\tlow = CASE_LOW (VEC_index (tree, labels, i - 1));\n+\t\t      if ((TREE_INT_CST_LOW (low) + 1\n+\t\t\t   != TREE_INT_CST_LOW (high))\n+\t\t\t  || (TREE_INT_CST_HIGH (low)\n+\t\t\t      + (TREE_INT_CST_LOW (high) == 0)\n+\t\t\t      != TREE_INT_CST_HIGH (high)))\n+\t\t\tbreak;\n+\t\t    }\n+\t\t  if (i == len)\n+\t\t    default_case = build3 (CASE_LABEL_EXPR, void_type_node,\n+\t\t\t\t\t   NULL_TREE, NULL_TREE,\n+\t\t\t\t\t   CASE_LABEL (VEC_index (tree,\n+\t\t\t\t\t\t\t\t  labels, 0)));\n+\t\t}\n+\t    }\n \n-      if (!VEC_empty (tree, labels))\n-\tsort_case_labels (labels);\n+\t  if (!default_case)\n+\t    {\n+\t      gimple new_default;\n+\n+\t      default_case = build3 (CASE_LABEL_EXPR, void_type_node,\n+\t\t\t\t     NULL_TREE, NULL_TREE,\n+\t\t\t\t     create_artificial_label ());\n+\t      new_default = gimple_build_label (CASE_LABEL (default_case));\n+\t      gimplify_seq_add_stmt (&switch_body_seq, new_default);\n+\t    }\n+\t}\n \n       gimple_switch = gimple_build_switch_vec (SWITCH_COND (switch_expr), \n                                                default_case, labels);"}, {"sha": "e5a6e5e2549a9a5dc5e3ef0c2e7d0358d1694911", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "patch": "@@ -1,3 +1,13 @@\n+2009-05-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/39666\n+\t* gcc.dg/pr39666-1.c: New test.\n+\t* gcc.dg/pr39666-2.c: Likewise.\n+\t* g++.dg/warn/Wuninitialized-4.C: Likewise.\n+\t* g++.dg/warn/Wuninitialized-5.C: Likewise.\n+\t* gfortran.dg/pr39666-1.f90: Likewise.\n+\t* gfortran.dg/pr39666-2.f90: Likewise.\n+\n 2009-05-05  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* gcc.target/mips/mips.exp: Add -mtune= to mips_option_groups."}, {"sha": "3d2543fb175889fc57d04290d376c895b90d7e92", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-4.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-4.C?ref=32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "patch": "@@ -0,0 +1,22 @@\n+// PR middle-end/39666\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wuninitialized\" }\n+\n+int\n+foo (int i)\n+{\n+  int j;\n+  switch (i)\n+    {\n+    case -__INT_MAX__ - 1 ... -1:\n+      j = 6;\n+      break;\n+    case 0:\n+      j = 5;\n+      break;\n+    case 1 ... __INT_MAX__:\n+      j = 4;\n+      break;\n+    }\n+  return j;\n+}"}, {"sha": "26add34945f2304404d359e588941e30c826813c", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-5.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-5.C?ref=32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "patch": "@@ -0,0 +1,22 @@\n+// PR middle-end/39666\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wuninitialized\" }\n+\n+int\n+foo (int i)\n+{\n+  int j;\t// { dg-warning \"may be used uninitialized\" }\n+  switch (i)\n+    {\n+    case -__INT_MAX__ - 1 ... -1:\n+      j = 6;\n+      break;\n+    case 0:\n+      j = 5;\n+      break;\n+    case 2 ... __INT_MAX__:\n+      j = 4;\n+      break;\n+    }\n+  return j;\n+}"}, {"sha": "f1ba499c33110ac90652541e3b8cb38162a24dcd", "filename": "gcc/testsuite/gcc.dg/pr39666-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39666-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39666-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39666-1.c?ref=32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "patch": "@@ -0,0 +1,22 @@\n+/* PR middle-end/39666 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wuninitialized\" } */\n+\n+int\n+foo (int i)\n+{\n+  int j;\n+  switch (i)\n+    {\n+    case -__INT_MAX__ - 1 ... -1:\n+      j = 6;\n+      break;\n+    case 0:\n+      j = 5;\n+      break;\n+    case 1 ... __INT_MAX__:\n+      j = 4;\n+      break;\n+    }\n+  return j;\n+}"}, {"sha": "e4ef1d5d2b72f0d925e8b3218f8487392095c3ab", "filename": "gcc/testsuite/gcc.dg/pr39666-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39666-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39666-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr39666-2.c?ref=32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "patch": "@@ -0,0 +1,22 @@\n+/* PR middle-end/39666 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wuninitialized\" } */\n+\n+int\n+foo (int i)\n+{\n+  int j;\t/* { dg-warning \"may be used uninitialized\" } */\n+  switch (i)\n+    {\n+    case -__INT_MAX__ - 1 ... -1:\n+      j = 6;\n+      break;\n+    case 0:\n+      j = 5;\n+      break;\n+    case 2 ... __INT_MAX__:\n+      j = 4;\n+      break;\n+    }\n+  return j;\n+}"}, {"sha": "31840ec1df822f0482a5485b8f8e4a7cee7220db", "filename": "gcc/testsuite/gfortran.dg/pr39666-1.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39666-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39666-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39666-1.f90?ref=32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "patch": "@@ -0,0 +1,14 @@\n+! PR middle-end/39666\n+! { dg-do compile }\n+! { dg-options \"-O2 -Wuninitialized\" }\n+\n+FUNCTION f(n)\n+  INTEGER, INTENT(in) :: n\n+  REAL                :: f\n+\n+  SELECT CASE (n)\n+    CASE (:-1); f = -1.0\n+    CASE (0);   f =  0.0\n+    CASE (1:);  f =  1.0\n+  END SELECT\n+END FUNCTION"}, {"sha": "720a716ae3153ff52944513cea4b7b4b8ab41cea", "filename": "gcc/testsuite/gfortran.dg/pr39666-2.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39666-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39666-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr39666-2.f90?ref=32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "patch": "@@ -0,0 +1,14 @@\n+! PR middle-end/39666\n+! { dg-do compile }\n+! { dg-options \"-O2 -Wuninitialized\" }\n+\n+FUNCTION f(n)\t! { dg-warning \"may be used uninitialized\" }\n+  INTEGER, INTENT(in) :: n\n+  REAL                :: f\n+\n+  SELECT CASE (n)\n+    CASE (:-1); f = -1.0\n+    CASE (0);   f =  0.0\n+    CASE (2:);  f =  1.0\n+  END SELECT\n+END FUNCTION"}]}