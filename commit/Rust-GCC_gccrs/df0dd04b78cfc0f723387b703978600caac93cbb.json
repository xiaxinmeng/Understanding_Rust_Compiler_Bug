{"sha": "df0dd04b78cfc0f723387b703978600caac93cbb", "node_id": "C_kwDOANBUbNoAKGRmMGRkMDRiNzhjZmMwZjcyMzM4N2I3MDM5Nzg2MDBjYWFjOTNjYmI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-27T19:42:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-28T19:38:57Z"}, "message": "libstdc++: Add noexcept to functions in <regex>\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/regex.h (basic_regex, swap): Add noexcept to\n\tnon-throwing functions.\n\t* include/bits/regex_automaton.h (_State_base, _State)\n\t(_NFA_base): Likewise.\n\t* include/bits/regex_compiler.h (_Compiler): Likewise.\n\t* include/bits/regex_error.h (regex_error::code()): Likewise.\n\t* include/bits/regex_scanner.h (_Scanner): Likewise.", "tree": {"sha": "323bdfa00f22cc2e015b59b7567020bc6a449e99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/323bdfa00f22cc2e015b59b7567020bc6a449e99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df0dd04b78cfc0f723387b703978600caac93cbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0dd04b78cfc0f723387b703978600caac93cbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df0dd04b78cfc0f723387b703978600caac93cbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0dd04b78cfc0f723387b703978600caac93cbb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeaea265cea3a2b2e772af7825351a4ceef29aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeaea265cea3a2b2e772af7825351a4ceef29aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeaea265cea3a2b2e772af7825351a4ceef29aac"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "d4a7729de2c45ca12b7cf05368167f33f2c36aaa", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0dd04b78cfc0f723387b703978600caac93cbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0dd04b78cfc0f723387b703978600caac93cbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=df0dd04b78cfc0f723387b703978600caac93cbb", "patch": "@@ -421,7 +421,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * Constructs a basic regular expression that does not match any\n        * character sequence.\n        */\n-      basic_regex()\n+      basic_regex() noexcept\n       : _M_flags(ECMAScript), _M_loc(), _M_automaton(nullptr)\n       { }\n \n@@ -697,7 +697,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * expression.\n        */\n       unsigned int\n-      mark_count() const\n+      mark_count() const noexcept\n       {\n \tif (_M_automaton)\n \t  return _M_automaton->_M_sub_count() - 1;\n@@ -709,7 +709,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * or in the last call to assign().\n        */\n       flag_type\n-      flags() const\n+      flags() const noexcept\n       { return _M_flags; }\n \n       // [7.8.5] locale\n@@ -731,7 +731,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *        object.\n        */\n       locale_type\n-      getloc() const\n+      getloc() const noexcept\n       { return _M_loc; }\n \n       // [7.8.6] swap\n@@ -741,7 +741,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        * @param __rhs Another regular expression object.\n        */\n       void\n-      swap(basic_regex& __rhs)\n+      swap(basic_regex& __rhs) noexcept\n       {\n \tstd::swap(_M_flags, __rhs._M_flags);\n \tstd::swap(_M_loc, __rhs._M_loc);\n@@ -848,7 +848,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   template<typename _Ch_type, typename _Rx_traits>\n     inline void\n     swap(basic_regex<_Ch_type, _Rx_traits>& __lhs,\n-\t basic_regex<_Ch_type, _Rx_traits>& __rhs)\n+\t basic_regex<_Ch_type, _Rx_traits>& __rhs) noexcept\n     { __lhs.swap(__rhs); }\n \n "}, {"sha": "02d81f3e4174a35aa5a8fa02e9b3bdd7fd09e302", "filename": "libstdc++-v3/include/bits/regex_automaton.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0dd04b78cfc0f723387b703978600caac93cbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0dd04b78cfc0f723387b703978600caac93cbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.h?ref=df0dd04b78cfc0f723387b703978600caac93cbb", "patch": "@@ -95,13 +95,13 @@ namespace __detail\n     };\n \n   protected:\n-    explicit _State_base(_Opcode __opcode)\n+    explicit _State_base(_Opcode __opcode) noexcept\n     : _M_opcode(__opcode), _M_next(_S_invalid_state_id)\n     { }\n \n   public:\n     bool\n-    _M_has_alt()\n+    _M_has_alt() const noexcept\n     {\n       return _M_opcode == _S_opcode_alternative\n \t|| _M_opcode == _S_opcode_repeat\n@@ -130,7 +130,7 @@ namespace __detail\n \t\t    \"std::function<bool(char)>\");\n \n       explicit\n-      _State(_Opcode __opcode) : _State_base(__opcode)\n+      _State(_Opcode __opcode) noexcept : _State_base(__opcode)\n       {\n \tif (_M_opcode() == _S_opcode_match)\n \t  new (this->_M_matcher_storage._M_addr()) _MatcherT();\n@@ -143,7 +143,7 @@ namespace __detail\n \t    _MatcherT(__rhs._M_get_matcher());\n       }\n \n-      _State(_State&& __rhs) : _State_base(__rhs)\n+      _State(_State&& __rhs) noexcept : _State_base(__rhs)\n       {\n \tif (__rhs._M_opcode() == _S_opcode_match)\n \t  new (this->_M_matcher_storage._M_addr())\n@@ -162,19 +162,19 @@ namespace __detail\n       // Since correct ctor and dtor rely on _M_opcode, it's better not to\n       // change it over time.\n       _Opcode\n-      _M_opcode() const\n+      _M_opcode() const noexcept\n       { return _State_base::_M_opcode; }\n \n       bool\n       _M_matches(_Char_type __char) const\n       { return _M_get_matcher()(__char); }\n \n       _MatcherT&\n-      _M_get_matcher()\n+      _M_get_matcher() noexcept\n       { return *static_cast<_MatcherT*>(this->_M_matcher_storage._M_addr()); }\n \n       const _MatcherT&\n-      _M_get_matcher() const\n+      _M_get_matcher() const noexcept\n       {\n \treturn *static_cast<const _MatcherT*>(\n \t    this->_M_matcher_storage._M_addr());\n@@ -187,7 +187,7 @@ namespace __detail\n     typedef regex_constants::syntax_option_type _FlagT;\n \n     explicit\n-    _NFA_base(_FlagT __f)\n+    _NFA_base(_FlagT __f) noexcept\n     : _M_flags(__f), _M_start_state(0), _M_subexpr_count(0),\n     _M_has_backref(false)\n     { }\n@@ -199,15 +199,15 @@ namespace __detail\n \n   public:\n     _FlagT\n-    _M_options() const\n+    _M_options() const noexcept\n     { return _M_flags; }\n \n     _StateIdT\n-    _M_start() const\n+    _M_start() const noexcept\n     { return _M_start_state; }\n \n     _SizeT\n-    _M_sub_count() const\n+    _M_sub_count() const noexcept\n     { return _M_subexpr_count; }\n \n     _GLIBCXX_STD_C::vector<size_t> _M_paren_stack;"}, {"sha": "423ab823194ded184da3ff6eb524cef1f90e47c3", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0dd04b78cfc0f723387b703978600caac93cbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0dd04b78cfc0f723387b703978600caac93cbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=df0dd04b78cfc0f723387b703978600caac93cbb", "patch": "@@ -66,7 +66,7 @@ namespace __detail\n \t\tconst typename _TraitsT::locale_type& __traits, _FlagT __flags);\n \n       shared_ptr<const _RegexT>\n-      _M_get_nfa()\n+      _M_get_nfa() noexcept\n       { return std::move(_M_nfa); }\n \n     private:"}, {"sha": "d3713fa5f4753ef1c3702b94a096fbeb0460bab5", "filename": "libstdc++-v3/include/bits/regex_error.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0dd04b78cfc0f723387b703978600caac93cbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0dd04b78cfc0f723387b703978600caac93cbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h?ref=df0dd04b78cfc0f723387b703978600caac93cbb", "patch": "@@ -150,7 +150,7 @@ namespace regex_constants\n      * @returns the regex error code.\n      */\n     regex_constants::error_type\n-    code() const\n+    code() const noexcept\n     { return _M_code; }\n \n   private:"}, {"sha": "05d8172a0ad69aaa5e14674ae4d9a844a2e4572c", "filename": "libstdc++-v3/include/bits/regex_scanner.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0dd04b78cfc0f723387b703978600caac93cbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0dd04b78cfc0f723387b703978600caac93cbb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.h?ref=df0dd04b78cfc0f723387b703978600caac93cbb", "patch": "@@ -223,11 +223,11 @@ namespace __detail\n       _M_advance();\n \n       _TokenT\n-      _M_get_token() const\n+      _M_get_token() const noexcept\n       { return _M_token; }\n \n       const _StringT&\n-      _M_get_value() const\n+      _M_get_value() const noexcept\n       { return _M_value; }\n \n #ifdef _GLIBCXX_DEBUG"}]}