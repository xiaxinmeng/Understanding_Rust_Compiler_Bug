{"sha": "c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3Y2QzZDE0MGNiZjhmYTAyYTUzODNjM2QxZjZhZmFiZTdhMzNjMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-07-03T05:53:58Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-07-03T05:53:58Z"}, "message": "cpplib.h (CPP_N_WIDTH_MD, [...]): Add new constants.\n\nlibcpp/ChangeLog:\n\n\t* include/cpplib.h (CPP_N_WIDTH_MD, CPP_N_MD_W, CPP_N_MD_Q):\n\tAdd new constants.\n\t* expr.c (interpret_float_suffix): Process 'w', 'W', 'q' and 'Q'\n\tsuffixes.  Return CPP_N_MD_W for 'w' or 'W' suffixes and CPP_N_MD_Q\n\tfor 'q' or 'Q' suffixes.\n\ngcc/ChangeLog:\n\n\t* targhooks.h (default_mode_for_suffix): New function declaration.\n\t* targhooks.c (default_mode_for_suffix): New default target hook.\n\t* target.h (struct c): New structure in the targetm struct.\n\t(mode_for_suffix): New target hook as part of struct c.\n\ttarget-def.h (TARGET_C_MODE_FOR_SUFFIX): Define as\n\tdefault_mode_for_suffix.\n\t(TARGET_C): New define.\n\t* c-lex.c: Include \"target.h\".\n\t(interpret_float): Use targetm.c.mode_for_suffix to determine\n\tthe mode for a given non-standard suffix.\n\tMakefile.in (c-lex.o): Depend on $(TARGET_H).\n\n\t* config/i386/i386.c (ix86_c_mode_for_suffix): New static function.\n\t(TARGET_C_MODE_FOR_SUFFIX): Define to ix86_c_mode_for_suffix.\n\n\t* doc/extend.texi (Floating Types): New node.  Document __float80 and\n\t__float128 types.  Document 'w', 'W', 'q' and 'Q' suffixes.\n\ntestsuite/ChangeLog:\n\n\t* gcc.dg/const-float80.c : New test.\n\t* gcc.dg/const-float128.c : New test.\n\t* gcc.dg/const-float80-ped.c : New test.\n\t* gcc.dg/const-float128-ped.c : New test.\n\nFrom-SVN: r126244", "tree": {"sha": "e606116f129427fd27bb72ba8a7b9932d86c2880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e606116f129427fd27bb72ba8a7b9932d86c2880"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ed50f7194d46aa97af8072b0da2bcd68f906488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed50f7194d46aa97af8072b0da2bcd68f906488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ed50f7194d46aa97af8072b0da2bcd68f906488"}], "stats": {"total": 189, "additions": 182, "deletions": 7}, "files": [{"sha": "35f68c1d945c6b91f54fd936c07d860e0ac30e2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -1,3 +1,23 @@\n+2007-07-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* targhooks.h (default_mode_for_suffix): New function declaration.\n+\t* targhooks.c (default_mode_for_suffix): New default target hook.\n+\t* target.h (struct c): New structure in the targetm struct.\n+\t(mode_for_suffix): New target hook as part of struct c.\n+\ttarget-def.h (TARGET_C_MODE_FOR_SUFFIX): Define as\n+\tdefault_mode_for_suffix.\n+\t(TARGET_C): New define.\n+\t* c-lex.c: Include \"target.h\".\n+\t(interpret_float): Use targetm.c.mode_for_suffix to determine\n+\tthe mode for a given non-standard suffix.\n+\tMakefile.in (c-lex.o): Depend on $(TARGET_H).\n+\n+\t* config/i386/i386.c (ix86_c_mode_for_suffix): New static function.\n+\t(TARGET_C_MODE_FOR_SUFFIX): Define to ix86_c_mode_for_suffix.\n+\n+\t* doc/extend.texi (Floating Types): New node.  Document __float80 and\n+\t__float128 types.  Document 'w', 'W', 'q' and 'Q' suffixes.\n+\n 2007-07-03  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/32506"}, {"sha": "c084f0a838bf5a3073f5909107c9bf0a033b25a7", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -1718,7 +1718,7 @@ stub-objc.o : stub-objc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n     $(RTL_H) debug.h $(C_TREE_H) $(C_COMMON_H) $(REAL_H) $(SPLAY_TREE_H) \\\n     $(C_PRAGMA_H) input.h intl.h $(FLAGS_H) toplev.h output.h \\\n-    $(CPPLIB_H) $(TIMEVAR_H) $(TM_P_H)\n+    $(CPPLIB_H) $(TARGET_H) $(TIMEVAR_H) $(TM_P_H)\n c-ppoutput.o : c-ppoutput.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n     $(C_COMMON_H) $(TREE_H) $(CPPLIB_H) $(srcdir)/../libcpp/internal.h \\\n     $(C_PRAGMA_H)"}, {"sha": "ff8eee6baecfe736586bf29757801ba5f4bd1895", "filename": "gcc/c-lex.c", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -41,6 +41,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"tm_p.h\"\n #include \"splay-tree.h\"\n #include \"debug.h\"\n+#include \"target.h\"\n \n /* We may keep statistics about how long which files took to compile.  */\n static int header_time, body_time;\n@@ -649,7 +650,31 @@ interpret_float (const cpp_token *token, unsigned int flags)\n     else\n       type = dfloat64_type_node;\n   else\n-    if ((flags & CPP_N_WIDTH) == CPP_N_LARGE)\n+    if (flags & CPP_N_WIDTH_MD)\n+      {\n+\tchar suffix;\n+\tenum machine_mode mode;\n+\n+\tif ((flags & CPP_N_WIDTH_MD) == CPP_N_MD_W)\n+\t  suffix = 'w';\n+\telse\n+\t  suffix = 'q';\n+\n+\tmode = targetm.c.mode_for_suffix (suffix);\n+\tif (mode == VOIDmode)\n+\t  {\n+\t    error (\"unsupported non-standard suffix on floating constant\");\n+\t    errorcount++;\n+\n+\t    return error_mark_node;\n+\t  }\n+\telse if (pedantic)\n+\t  pedwarn (\"non-standard suffix on floating constant\");\n+\n+\ttype = c_common_type_for_mode (mode, 0);\n+\tgcc_assert (type);\n+      }\n+    else if ((flags & CPP_N_WIDTH) == CPP_N_LARGE)\n       type = long_double_type_node;\n     else if ((flags & CPP_N_WIDTH) == CPP_N_SMALL\n \t     || flag_single_precision_constant)\n@@ -666,7 +691,7 @@ interpret_float (const cpp_token *token, unsigned int flags)\n   else \n     {\n       if ((flags & CPP_N_WIDTH) != CPP_N_MEDIUM)\n-\t/* Must be an F or L suffix.  */\n+\t/* Must be an F or L or machine defined suffix.  */\n \tcopylen--;\n       if (flags & CPP_N_IMAGINARY)\n \t/* I or J suffix.  */"}, {"sha": "341bf90bf9e66637961ba3ea8e716e3736e74293", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -22423,6 +22423,18 @@ ix86_vector_mode_supported_p (enum machine_mode mode)\n   return false;\n }\n \n+/* Target hook for c_mode_for_suffix.  */\n+static enum machine_mode\n+ix86_c_mode_for_suffix (char suffix)\n+{\n+  if (TARGET_64BIT && suffix == 'q')\n+    return TFmode;\n+  if (TARGET_MMX && suffix == 'w')\n+    return XFmode;\n+\n+  return VOIDmode;\n+}\n+\n /* Worker function for TARGET_MD_ASM_CLOBBERS.\n \n    We do this in the new i386 backend to maintain source compatibility\n@@ -23520,6 +23532,9 @@ static const struct attribute_spec ix86_attribute_table[] =\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P ix86_vector_mode_supported_p\n \n+#undef TARGET_C_MODE_FOR_SUFFIX\n+#define TARGET_C_MODE_FOR_SUFFIX ix86_c_mode_for_suffix\n+\n #ifdef HAVE_AS_TLS\n #undef TARGET_ASM_OUTPUT_DWARF_DTPREL\n #define TARGET_ASM_OUTPUT_DWARF_DTPREL i386_output_dwarf_dtprel"}, {"sha": "0a1cdeb2abf18a70183bc943bfaa1a245b191161", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -33,6 +33,7 @@ extensions, accepted by GCC in C89 mode and in C++.\n * Conditionals::        Omitting the middle operand of a @samp{?:} expression.\n * Long Long::\t\tDouble-word integers---@code{long long int}.\n * Complex::             Data types for complex numbers.\n+* Floating Types::      Additional Floating Types.\n * Decimal Float::       Decimal Floating Types. \n * Hex Floats::          Hexadecimal floating-point constants.\n * Zero Length::         Zero-length arrays.\n@@ -816,6 +817,37 @@ If the variable's actual name is @code{foo}, the two fictitious\n variables are named @code{foo$real} and @code{foo$imag}.  You can\n examine and set these two fictitious variables with your debugger.\n \n+@node Floating Types\n+@section Additional Floating Types\n+@cindex additional floating types\n+@cindex @code{__float80} data type\n+@cindex @code{__float128} data type\n+@cindex @code{w} floating point suffix\n+@cindex @code{q} floating point suffix\n+@cindex @code{W} floating point suffix\n+@cindex @code{Q} floating point suffix\n+\n+As an extension, the GNU C compiler supports additional floating\n+types, @code{__float80} and @code{__float128} to support 80bit\n+(@code{XFmode}) and 128 bit (@code{TFmode}) floating types.\n+Support for additional types includes the arithmetic operators:\n+add, subtract, multiply, divide; unary arithmetic operators;\n+relational operators; equality operators; and conversions to and from\n+integer and other floating types.  Use a suffix @samp{w} or @samp{W}\n+in a literal constant of type @code{__float80} and @samp{q} or @samp{Q}\n+for @code{_float128}.  You can declare complex types using the\n+corresponding internal complex type, @code{XCmode} for @code{__float80}\n+type and @code{TCmode} for @code{__float128} type:\n+\n+@smallexample\n+typedef _Complex float __attribute__((mode(TC))) _Complex128;\n+typedef _Complex float __attribute__((mode(XC))) _Complex80;\n+@end smallexample\n+\n+Not all targets support additional floating point types.  @code{__float80}\n+is supported on i386, x86_64 and ia64 targets and target @code{__float128}\n+is supported on x86_64 and ia64 targets.\n+\n @node Decimal Float\n @section Decimal Floating Types\n @cindex decimal floating types"}, {"sha": "c106577c7fb7e6811c333c9faa000df4b4683cfa", "filename": "gcc/target-def.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -578,6 +578,15 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #define TARGET_SECONDARY_RELOAD default_secondary_reload\n #endif\n \n+/* C specific.  */\n+#ifndef TARGET_C_MODE_FOR_SUFFIX\n+#define TARGET_C_MODE_FOR_SUFFIX default_mode_for_suffix\n+#endif\n+\n+#define TARGET_C\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    TARGET_C_MODE_FOR_SUFFIX\t\t\t\\\n+  }\n \n /* C++ specific.  */\n #ifndef TARGET_CXX_GUARD_TYPE\n@@ -729,8 +738,9 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n   TARGET_INVALID_UNARY_OP,\t\t\t\\\n   TARGET_INVALID_BINARY_OP,\t\t\t\\\n   TARGET_SECONDARY_RELOAD,\t\t\t\\\n+  TARGET_C,\t\t\t\t\t\\\n   TARGET_CXX,\t\t\t\t\t\\\n-  TARGET_EXTRA_LIVE_ON_ENTRY,                    \\\n+  TARGET_EXTRA_LIVE_ON_ENTRY,\t\t\t\\\n   TARGET_UNWIND_TABLES_DEFAULT,\t\t\t\\\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\\n   TARGET_HAVE_SWITCHABLE_BSS_SECTIONS,\t\t\\"}, {"sha": "effd93345ddb3218e331bd5a2bf5c68283e1d07c", "filename": "gcc/target.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -798,6 +798,13 @@ struct gcc_target\n \t\t\t\t      enum machine_mode,\n \t\t\t\t      struct secondary_reload_info *);\n \n+  /* Functions specific to the C family of frontends.  */\n+  struct c {\n+    /* Return machine mode for non-standard suffix\n+       or VOIDmode if non-standard suffixes are unsupported.  */\n+    enum machine_mode (*mode_for_suffix) (char);\n+  } c;\n+\n   /* Functions specific to the C++ frontend.  */\n   struct cxx {\n     /* Return the integer type used for guard variables.  */"}, {"sha": "cc375890fc5828060e95911f1c9d8f9026db1864", "filename": "gcc/targhooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -173,6 +173,13 @@ hook_bool_CUMULATIVE_ARGS_true (CUMULATIVE_ARGS * a ATTRIBUTE_UNUSED)\n   return true;\n }\n \n+/* Return machine mode for non-standard suffix\n+   or VOIDmode if non-standard suffixes are unsupported.  */\n+enum machine_mode\n+default_mode_for_suffix (char suffix ATTRIBUTE_UNUSED)\n+{\n+  return VOIDmode;\n+}\n \n /* The generic C++ ABI specifies this is a 64-bit value.  */\n tree"}, {"sha": "c69be80f3d2c131ca738bf04f7fe34ce06e6a1e6", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -40,6 +40,8 @@ extern tree default_stack_protect_guard (void);\n extern tree default_external_stack_protect_fail (void);\n extern tree default_hidden_stack_protect_fail (void);\n \n+extern enum machine_mode default_mode_for_suffix (char);\n+\n extern tree default_cxx_guard_type (void);\n extern tree default_cxx_get_cookie_size (tree);\n "}, {"sha": "9b068650cfa3975106fb62c5faf46c4489052735", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -1,3 +1,10 @@\n+2007-07-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.dg/const-float80.c : New test.\n+\t* gcc.dg/const-float128.c : New test.\n+\t* gcc.dg/const-float80-ped.c : New test.\n+\t* gcc.dg/const-float128-ped.c : New test.\n+\n 2007-07-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/c99-math.h: Fix typo."}, {"sha": "52f0525dcd31bd1afa8305294aca033db468931d", "filename": "gcc/testsuite/gcc.dg/const-float128-ped.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float128-ped.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float128-ped.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float128-ped.c?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -0,0 +1,5 @@\n+/* Test 'q' suffix with -pedantic on __float128 type constants.  */\n+/* { dg-do compile { target { ia64-*-* || { { i?86-*-* x86_64-*-*} && lp64 } } } } */\n+/* { dg-options \"-pedantic\" } */\n+\n+__float128 a = 123.456789q; /* { dg-warning \"non-standard suffix on floating constant\" } */"}, {"sha": "1797e08bc3000714ac35d86646be464a14d90b2d", "filename": "gcc/testsuite/gcc.dg/const-float128.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float128.c?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -0,0 +1,6 @@\n+/* Test 'q' and 'Q' suffixes on __float128 type constants.  */\n+/* { dg-do compile { target { ia64-*-* || { { i?86-*-* x86_64-*-*} && lp64 } } } } */\n+/* { dg-options \"\" } */\n+\n+__float128 a = 123.456789q;\n+__float128 b = 123.456789Q;"}, {"sha": "9cf047804a4aaf55a66d6ea79d2bacd5128c2fcb", "filename": "gcc/testsuite/gcc.dg/const-float80-ped.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float80-ped.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float80-ped.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float80-ped.c?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -0,0 +1,6 @@\n+/* Test 'w' suffix with -pedantic on __float80 type constants.  */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-options \"-pedantic\" } */\n+/* { dg-options \"-mmmx -pedantic\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+__float80 a = 123.456789w;  /* { dg-warning \"non-standard suffix on floating constant\" } */"}, {"sha": "f2a836d3e6495ac7f70a15596a0f5a183ea307c8", "filename": "gcc/testsuite/gcc.dg/const-float80.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float80.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float80.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-float80.c?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -0,0 +1,7 @@\n+/* Test 'w' and 'W' suffixes on __float80 type constants.  */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-options \"\" } */\n+/* { dg-options \"-mmmx\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+__float80 a = 123.456789W;\n+__float80 b = 123.456789w;"}, {"sha": "0c11a0fb5819cb490e60abefdb3042343f042a3c", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -1,3 +1,11 @@\n+2007-07-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* include/cpplib.h (CPP_N_WIDTH_MD, CPP_N_MD_W, CPP_N_MD_Q):\n+\tAdd new constants.\n+\t* expr.c (interpret_float_suffix): Process 'w', 'W', 'q' and 'Q'\n+\tsuffixes.  Return CPP_N_MD_W for 'w' or 'W' suffixes and CPP_N_MD_Q\n+\tfor 'q' or 'Q' suffixes.\n+\n 2007-06-17  Danny Smith  <dannysmith@users.sourceforge.net\n \n \t* files.c (open_file): Correct typo."}, {"sha": "f20d50c3fdd671e5c7146583f505a6403fc1b3df", "filename": "libcpp/expr.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -82,7 +82,9 @@ static void check_promotion (cpp_reader *, const struct op *);\n static unsigned int\n interpret_float_suffix (const uchar *s, size_t len)\n {\n-  size_t f = 0, l = 0, i = 0, d = 0;\n+  size_t f, l, w, q, i, d;\n+\n+  f = l = w = q = i = d = 0;\n \n   while (len--)\n     switch (s[len])\n@@ -97,14 +99,24 @@ interpret_float_suffix (const uchar *s, size_t len)\n \t  return 0;\n \tl++;\n \tbreak;\n+      case 'w': case 'W':\n+\tif (d > 0)\n+\t  return 0;\n+\tw++;\n+\tbreak;\n+      case 'q': case 'Q':\n+\tif (d > 0)\n+\t  return 0;\n+\tq++;\n+\tbreak;\n       case 'i': case 'I':\n       case 'j': case 'J': i++; break;\n       case 'd': case 'D': d++; break;\n       default:\n \treturn 0;\n       }\n \n-  if (f + l > 1 || i > 1)\n+  if (f + l + w + q > 1 || i > 1)\n     return 0;\n \n   /* Allow dd, df, dl suffixes for decimal float constants.  */\n@@ -113,7 +125,9 @@ interpret_float_suffix (const uchar *s, size_t len)\n \n   return ((i ? CPP_N_IMAGINARY : 0)\n \t  | (f ? CPP_N_SMALL :\n-\t     l ? CPP_N_LARGE : CPP_N_MEDIUM)\n+\t     l ? CPP_N_LARGE :\n+\t     w ? CPP_N_MD_W :\n+\t     q ? CPP_N_MD_Q : CPP_N_MEDIUM)\n \t  | (d ? CPP_N_DFLOAT : 0));\n }\n "}, {"sha": "ee46c4f169ffdec3380393d4710b917cfdde2479", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=c77cd3d140cbf8fa02a5383c3d1f6afabe7a33c3", "patch": "@@ -744,6 +744,10 @@ struct cpp_num\n #define CPP_N_MEDIUM\t0x0020\t/* long, double.  */\n #define CPP_N_LARGE\t0x0040\t/* long long, long double.  */\n \n+#define CPP_N_WIDTH_MD\t0xF0000\t/* machine defined.  */\n+#define CPP_N_MD_W\t0x10000\n+#define CPP_N_MD_Q\t0x20000\n+\n #define CPP_N_RADIX\t0x0F00\n #define CPP_N_DECIMAL\t0x0100\n #define CPP_N_HEX\t0x0200"}]}