{"sha": "a56b31caff25c5583ad6b7db6b828b6b07582fc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU2YjMxY2FmZjI1YzU1ODNhZDZiN2RiNmI4MjhiNmIwNzU4MmZjOQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-07-10T21:42:15Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-07-10T21:42:15Z"}, "message": "reginfo.h (reg_classes_intersect_p): Change arguments type to reg_class_t.\n\n\t* reginfo.h (reg_classes_intersect_p): Change arguments type to\n\treg_class_t.\n\t* rtl.h (reg_classes_intersect_p): Adjust prototype.\n\n\t* config/rs6000/rs6000.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST):\n\tRemove macros.\n\t* config/rs6000/rs6000-protos.h (rs6000_register_move_cost,\n\trs6000_memory_move_cost): Remove\n\t* config/rs6000/rs6000.c (TARGET_REGISTER_MOVE_COST,\n\tTARGET_MEMORY_MOVE_COST): Define.\n\t(rs6000_register_move_cost): Make static. Change arguments type from\n\tenum reg_class to reg_class_t. Adjust rs6000_memory_move_cost calls.\n\t(rs6000_memory_move_cost): Make static. Change arguments type from\n\t'enum reg_class' to reg_class_t.\n\nFrom-SVN: r162045", "tree": {"sha": "3550a11df33366ca32eb249890c987d9056dd0d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3550a11df33366ca32eb249890c987d9056dd0d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a56b31caff25c5583ad6b7db6b828b6b07582fc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56b31caff25c5583ad6b7db6b828b6b07582fc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a56b31caff25c5583ad6b7db6b828b6b07582fc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56b31caff25c5583ad6b7db6b828b6b07582fc9/comments", "author": null, "committer": null, "parents": [{"sha": "bec922f0407cfb7f184581dc7b5cc10d91cc1063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bec922f0407cfb7f184581dc7b5cc10d91cc1063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bec922f0407cfb7f184581dc7b5cc10d91cc1063"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "364118c3cc4e0064322ecdfc6bd823b728d5daf3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56b31caff25c5583ad6b7db6b828b6b07582fc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56b31caff25c5583ad6b7db6b828b6b07582fc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a56b31caff25c5583ad6b7db6b828b6b07582fc9", "patch": "@@ -1,3 +1,20 @@\n+2010-07-10  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* reginfo.h (reg_classes_intersect_p): Change arguments type to\n+\treg_class_t.\n+\t* rtl.h (reg_classes_intersect_p): Adjust prototype.\n+\n+\t* config/rs6000/rs6000.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST):\n+\tRemove macros.\n+\t* config/rs6000/rs6000-protos.h (rs6000_register_move_cost,\n+\trs6000_memory_move_cost): Remove\n+\t* config/rs6000/rs6000.c (TARGET_REGISTER_MOVE_COST,\n+\tTARGET_MEMORY_MOVE_COST): Define.\n+\t(rs6000_register_move_cost): Make static. Change arguments type from\n+\tenum reg_class to reg_class_t. Adjust rs6000_memory_move_cost calls.\n+\t(rs6000_memory_move_cost): Make static. Change arguments type from\n+\t'enum reg_class' to reg_class_t.\n+\n 2010-07-10  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR middle-end/42505"}, {"sha": "02377f298e5b548163ade6758ec3dfaf1661900e", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56b31caff25c5583ad6b7db6b828b6b07582fc9/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56b31caff25c5583ad6b7db6b828b6b07582fc9/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=a56b31caff25c5583ad6b7db6b828b6b07582fc9", "patch": "@@ -170,9 +170,6 @@ extern unsigned int rs6000_dbx_register_number (unsigned int);\n extern void rs6000_emit_epilogue (int);\n extern void rs6000_emit_eh_reg_restore (rtx, rtx);\n extern const char * output_isel (rtx *);\n-extern int rs6000_register_move_cost (enum machine_mode,\n-\t\t\t\t      enum reg_class, enum reg_class);\n-extern int rs6000_memory_move_cost (enum machine_mode, enum reg_class, int);\n extern bool rs6000_tls_referenced_p (rtx);\n extern void rs6000_conditional_register_usage (void);\n "}, {"sha": "23f6a563ad7cbe89aa03effc61d123d4e196eb7c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56b31caff25c5583ad6b7db6b828b6b07582fc9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56b31caff25c5583ad6b7db6b828b6b07582fc9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a56b31caff25c5583ad6b7db6b828b6b07582fc9", "patch": "@@ -1031,6 +1031,9 @@ static void rs6000_xcoff_file_start (void);\n static void rs6000_xcoff_file_end (void);\n #endif\n static int rs6000_variable_issue (FILE *, int, rtx, int);\n+static int rs6000_register_move_cost (enum machine_mode,\n+\t\t\t\t      reg_class_t, reg_class_t);\n+static int rs6000_memory_move_cost (enum machine_mode, reg_class_t, bool);\n static bool rs6000_rtx_costs (rtx, int, int, int *, bool);\n static bool rs6000_debug_rtx_costs (rtx, int, int, int *, bool);\n static int rs6000_debug_address_cost (rtx, bool);\n@@ -1508,6 +1511,10 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_INVALID_WITHIN_DOLOOP\n #define TARGET_INVALID_WITHIN_DOLOOP rs6000_invalid_within_doloop\n \n+#undef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST rs6000_register_move_cost\n+#undef TARGET_MEMORY_MOVE_COST\n+#define TARGET_MEMORY_MOVE_COST rs6000_memory_move_cost\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS rs6000_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -25573,9 +25580,9 @@ rs6000_debug_address_cost (rtx x, bool speed)\n /* A C expression returning the cost of moving data from a register of class\n    CLASS1 to one of CLASS2.  */\n \n-int\n+static int\n rs6000_register_move_cost (enum machine_mode mode,\n-\t\t\t   enum reg_class from, enum reg_class to)\n+\t\t\t   reg_class_t from, reg_class_t to)\n {\n   int ret;\n \n@@ -25587,8 +25594,8 @@ rs6000_register_move_cost (enum machine_mode mode,\n \tfrom = to;\n \n       if (from == FLOAT_REGS || from == ALTIVEC_REGS || from == VSX_REGS)\n-\tret = (rs6000_memory_move_cost (mode, from, 0)\n-\t       + rs6000_memory_move_cost (mode, GENERAL_REGS, 0));\n+\tret = (rs6000_memory_move_cost (mode, from, false)\n+\t       + rs6000_memory_move_cost (mode, GENERAL_REGS, false));\n \n       /* It's more expensive to move CR_REGS than CR0_REGS because of the\n \t shift.  */\n@@ -25633,9 +25640,9 @@ rs6000_register_move_cost (enum machine_mode mode,\n /* A C expressions returning the cost of moving data of MODE from a register to\n    or from memory.  */\n \n-int\n-rs6000_memory_move_cost (enum machine_mode mode, enum reg_class rclass,\n-\t\t\t int in ATTRIBUTE_UNUSED)\n+static int\n+rs6000_memory_move_cost (enum machine_mode mode, reg_class_t rclass,\n+\t\t\t bool in ATTRIBUTE_UNUSED)\n {\n   int ret;\n "}, {"sha": "ab0784572d56f2b44d6240e3e436d243cf878ef9", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56b31caff25c5583ad6b7db6b828b6b07582fc9/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56b31caff25c5583ad6b7db6b828b6b07582fc9/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a56b31caff25c5583ad6b7db6b828b6b07582fc9", "patch": "@@ -1173,16 +1173,6 @@ extern unsigned rs6000_pointer_size;\n #define HARD_REGNO_RENAME_OK(SRC, DST) \\\n   (! ALTIVEC_REGNO_P (DST) || df_regs_ever_live_p (DST))\n \n-/* A C expression returning the cost of moving data from a register of class\n-   CLASS1 to one of CLASS2.  */\n-\n-#define REGISTER_MOVE_COST rs6000_register_move_cost\n-\n-/* A C expressions returning the cost of moving data of MODE from a register to\n-   or from memory.  */\n-\n-#define MEMORY_MOVE_COST rs6000_memory_move_cost\n-\n /* Specify the cost of a branch insn; roughly the number of extra insns that\n    should be added to avoid a branch.\n "}, {"sha": "a9d29c8356569a5f6ca405690aa495566dff8ada", "filename": "gcc/reginfo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56b31caff25c5583ad6b7db6b828b6b07582fc9/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56b31caff25c5583ad6b7db6b828b6b07582fc9/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=a56b31caff25c5583ad6b7db6b828b6b07582fc9", "patch": "@@ -1256,7 +1256,7 @@ reg_class_subset_p (enum reg_class c1, enum reg_class c2)\n \n /* Return nonzero if there is a register that is in both C1 and C2.  */\n int\n-reg_classes_intersect_p (enum reg_class c1, enum reg_class c2)\n+reg_classes_intersect_p (reg_class_t c1, reg_class_t c2)\n {\n   return (c1 == c2\n \t  || c1 == ALL_REGS"}, {"sha": "6cc44b914b90de7ce262620d723c118988677b8d", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56b31caff25c5583ad6b7db6b828b6b07582fc9/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56b31caff25c5583ad6b7db6b828b6b07582fc9/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=a56b31caff25c5583ad6b7db6b828b6b07582fc9", "patch": "@@ -2314,7 +2314,7 @@ extern HARD_REG_SET eliminable_regset;\n extern void mark_elimination (int, int);\n \n /* In reginfo.c */\n-extern int reg_classes_intersect_p (enum reg_class, enum reg_class);\n+extern int reg_classes_intersect_p (reg_class_t, reg_class_t);\n extern int reg_class_subset_p (enum reg_class, enum reg_class);\n extern void globalize_reg (int);\n extern void init_reg_modes_target (void);"}]}