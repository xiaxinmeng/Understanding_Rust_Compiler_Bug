{"sha": "cd7097527ee51b1bef879ef53505dff0673c98ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q3MDk3NTI3ZWU1MWIxYmVmODc5ZWY1MzUwNWRmZjA2NzNjOThiYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-08T16:16:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-08T16:16:41Z"}, "message": "tree-cfg.c (make_exit_edges): Use get_call_expr_in.\n\n        * tree-cfg.c (make_exit_edges): Use get_call_expr_in.\n        (remove_useless_stmts_1, is_ctrl_altering_stmt): Likewise.\n        (tree_block_ends_with_call_p, need_fake_edge_p): Likewise.\n        * tree-eh.c (lower_eh_constructs_1): Likewise.\n        * tree-sra.c (sra_walk_modify_expr): Likewise.\n        * tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Likewise.\n        (eliminate_unnecessary_stmts): Likewise.\n        * tree-ssa-dse.c (dse_optimize_stmt): Likewise.\n        * tree-tailcall.c (optimize_tail_call): Likewise.\n        * tree-ssa-ccp.c (get_rhs, set_rhs): Reorg to use switch.\n\nFrom-SVN: r84298", "tree": {"sha": "200138df775b12823401ef7db79aecec6a2142da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/200138df775b12823401ef7db79aecec6a2142da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd7097527ee51b1bef879ef53505dff0673c98ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd7097527ee51b1bef879ef53505dff0673c98ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd7097527ee51b1bef879ef53505dff0673c98ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd7097527ee51b1bef879ef53505dff0673c98ba/comments", "author": null, "committer": null, "parents": [{"sha": "c618c6ec7e797b5aa69218b86cd643bb65c0c48a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c618c6ec7e797b5aa69218b86cd643bb65c0c48a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c618c6ec7e797b5aa69218b86cd643bb65c0c48a"}], "stats": {"total": 212, "additions": 110, "deletions": 102}, "files": [{"sha": "094cd4b65950d9a14fc742f4b51ee1761b9efc97", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd7097527ee51b1bef879ef53505dff0673c98ba", "patch": "@@ -1,3 +1,16 @@\n+2004-07-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree-cfg.c (make_exit_edges): Use get_call_expr_in.\n+\t(remove_useless_stmts_1, is_ctrl_altering_stmt): Likewise.\n+\t(tree_block_ends_with_call_p, need_fake_edge_p): Likewise.\n+\t* tree-eh.c (lower_eh_constructs_1): Likewise.\n+\t* tree-sra.c (sra_walk_modify_expr): Likewise.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Likewise.\n+\t(eliminate_unnecessary_stmts): Likewise.\n+\t* tree-ssa-dse.c (dse_optimize_stmt): Likewise.\n+\t* tree-tailcall.c (optimize_tail_call): Likewise.\n+\t* tree-ssa-ccp.c (get_rhs, set_rhs): Reorg to use switch.\n+\n 2004-07-08  Paolo Bonzini  <bonzini@gnu.org>\n             Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "ca51213af4fee62c89b958a37eb731c1752445ce", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 18, "deletions": 41, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=cd7097527ee51b1bef879ef53505dff0673c98ba", "patch": "@@ -510,7 +510,7 @@ make_ctrl_stmt_edges (basic_block bb)\n static void\n make_exit_edges (basic_block bb)\n {\n-  tree last = last_stmt (bb);\n+  tree last = last_stmt (bb), op;\n \n   if (last == NULL_TREE)\n     abort ();\n@@ -550,8 +550,8 @@ make_exit_edges (basic_block bb)\n       /* A MODIFY_EXPR may have a CALL_EXPR on its RHS and the CALL_EXPR\n \t may have an abnormal edge.  Search the RHS for this case and\n \t create any required edges.  */\n-      if (TREE_CODE (TREE_OPERAND (last, 1)) == CALL_EXPR\n-\t  && TREE_SIDE_EFFECTS (TREE_OPERAND (last, 1))\n+      op = get_call_expr_in (last);\n+      if (op && TREE_SIDE_EFFECTS (op)\n \t  && current_function_has_nonlocal_label)\n \tmake_goto_expr_edges (bb);\n \n@@ -1520,7 +1520,7 @@ clear_special_calls (void)\n static void\n remove_useless_stmts_1 (tree *tp, struct rus_data *data)\n {\n-  tree t = *tp;\n+  tree t = *tp, op;\n \n   switch (TREE_CODE (t))\n     {\n@@ -1566,10 +1566,11 @@ remove_useless_stmts_1 (tree *tp, struct rus_data *data)\n     case MODIFY_EXPR:\n       data->last_goto = NULL;\n       fold_stmt (tp);\n-      if (TREE_CODE (TREE_OPERAND (t, 1)) == CALL_EXPR)\n+      op = get_call_expr_in (t);\n+      if (op)\n \t{\n-\t  update_call_expr_flags (TREE_OPERAND (t, 1));\n-\t  notice_special_calls (TREE_OPERAND (t, 1));\n+\t  update_call_expr_flags (op);\n+\t  notice_special_calls (op);\n \t}\n       if (tree_could_throw_p (t))\n \tdata->may_throw = true;\n@@ -2478,37 +2479,24 @@ is_ctrl_stmt (tree t)\n bool\n is_ctrl_altering_stmt (tree t)\n {\n-  tree call = t;\n+  tree call;\n \n #if defined ENABLE_CHECKING\n   if (t == NULL)\n     abort ();\n #endif\n \n-  switch (TREE_CODE (t))\n+  call = get_call_expr_in (t);\n+  if (call)\n     {\n-    case MODIFY_EXPR:\n-      /* A MODIFY_EXPR with a rhs of a call has the characteristics\n-\t of the call.  */\n-      call = TREE_OPERAND (t, 1);\n-      if (TREE_CODE (call) != CALL_EXPR)\n-\tbreak;\n-      /* FALLTHRU */\n-\n-    case CALL_EXPR:\n       /* A non-pure/const CALL_EXPR alters flow control if the current\n \t function has nonlocal labels.  */\n-      if (TREE_SIDE_EFFECTS (t)\n-\t  && current_function_has_nonlocal_label)\n+      if (TREE_SIDE_EFFECTS (call) && current_function_has_nonlocal_label)\n \treturn true;\n \n       /* A CALL_EXPR also alters control flow if it does not return.  */\n       if (call_expr_flags (call) & (ECF_NORETURN | ECF_LONGJMP))\n \treturn true;\n-      break;\n-\n-    default:\n-      return false;\n     }\n \n   /* If a statement can throw, it alters control flow.  */\n@@ -4509,15 +4497,7 @@ static bool\n tree_block_ends_with_call_p (basic_block bb)\n {\n   block_stmt_iterator bsi = bsi_last (bb);\n-  tree t = tsi_stmt (bsi.tsi);\n-\n-  if (TREE_CODE (t) == RETURN_EXPR && TREE_OPERAND (t, 0))\n-    t = TREE_OPERAND (t, 0);\n-\n-  if (TREE_CODE (t) == MODIFY_EXPR)\n-    t = TREE_OPERAND (t, 1);\n-\n-  return TREE_CODE (t) == CALL_EXPR;\n+  return get_call_expr_in (bsi_stmt (bsi)) != NULL;\n }\n \n \n@@ -4538,11 +4518,7 @@ tree_block_ends_with_condjump_p (basic_block bb)\n static bool\n need_fake_edge_p (tree t)\n {\n-  if (TREE_CODE (t) == RETURN_EXPR && TREE_OPERAND (t, 0))\n-    t = TREE_OPERAND (t, 0);\n-\n-  if (TREE_CODE (t) == MODIFY_EXPR)\n-    t = TREE_OPERAND (t, 1);\n+  tree call;\n \n   /* NORETURN and LONGJMP calls already have an edge to exit.\n      CONST, PURE and ALWAYS_RETURN calls do not need one.\n@@ -4551,9 +4527,10 @@ need_fake_edge_p (tree t)\n      figured out from the RTL in mark_constant_function, and\n      the counter incrementation code from -fprofile-arcs\n      leads to different results from -fbranch-probabilities.  */\n-  if (TREE_CODE (t) == CALL_EXPR\n-      && !(call_expr_flags (t) & \n-\t    (ECF_NORETURN | ECF_LONGJMP | ECF_ALWAYS_RETURN)))\n+  call = get_call_expr_in (t);\n+  if (call\n+      && !(call_expr_flags (call) & \n+\t   (ECF_NORETURN | ECF_LONGJMP | ECF_ALWAYS_RETURN)))\n     return true;\n \n   if (TREE_CODE (t) == ASM_EXPR"}, {"sha": "9666e998f045e5ffb1b5947c607d86a85d8136d4", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=cd7097527ee51b1bef879ef53505dff0673c98ba", "patch": "@@ -1552,14 +1552,17 @@ lower_eh_constructs_1 (struct leh_state *state, tree *tp)\n       /* Look for things that can throw exceptions, and record them.  */\n       if (state->cur_region && tree_could_throw_p (t))\n \t{\n+\t  tree op;\n+\n \t  record_stmt_eh_region (state->cur_region, t);\n \t  note_eh_region_may_contain_throw (state->cur_region);\n \n \t  /* ??? For the benefit of calls.c, converting all this to rtl, \n \t     we need to record the call expression, not just the outer\n \t     modify statement.  */\n-\t  if (TREE_CODE (TREE_OPERAND (t, 1)) == CALL_EXPR)\n-\t    record_stmt_eh_region (state->cur_region, TREE_OPERAND (t, 1));\n+\t  op = get_call_expr_in (t);\n+\t  if (op)\n+\t    record_stmt_eh_region (state->cur_region, op);\n \t}\n       break;\n "}, {"sha": "6769407a71998f347e68529f59f07ff65a8420a0", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=cd7097527ee51b1bef879ef53505dff0673c98ba", "patch": "@@ -811,10 +811,14 @@ sra_walk_modify_expr (tree expr, block_stmt_iterator *bsi,\n       else\n \tfns->use (rhs_elt, &TREE_OPERAND (expr, 1), bsi, false);\n     }\n-  else if (TREE_CODE (rhs) == CALL_EXPR)\n-    sra_walk_call_expr (rhs, bsi, fns);\n   else\n-    sra_walk_expr (&TREE_OPERAND (expr, 1), bsi, false, fns);\n+    {\n+      tree call = get_call_expr_in (rhs);\n+      if (call)\n+\tsra_walk_call_expr (call, bsi, fns);\n+      else\n+\tsra_walk_expr (&TREE_OPERAND (expr, 1), bsi, false, fns);\n+    }\n }\n \n /* Entry point to the walk functions.  Search the entire function,"}, {"sha": "722f552c97007a72e859471fe4e721c30d7e1fe3", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 55, "deletions": 41, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=cd7097527ee51b1bef879ef53505dff0673c98ba", "patch": "@@ -2106,27 +2106,30 @@ get_rhs (tree stmt)\n {\n   enum tree_code code = TREE_CODE (stmt);\n \n-  if (code == MODIFY_EXPR)\n-    return TREE_OPERAND (stmt, 1);\n-  if (code == COND_EXPR)\n-    return COND_EXPR_COND (stmt);\n-  else if (code == SWITCH_EXPR)\n-    return SWITCH_COND (stmt);\n-  else if (code == RETURN_EXPR)\n-    {\n-      if (!TREE_OPERAND (stmt, 0))\n-\treturn NULL_TREE;\n-      if (TREE_CODE (TREE_OPERAND (stmt, 0)) == MODIFY_EXPR)\n-\treturn TREE_OPERAND (TREE_OPERAND (stmt, 0), 1);\n+  switch (code)\n+    {\n+    case RETURN_EXPR:\n+      stmt = TREE_OPERAND (stmt, 0);\n+      if (stmt)\n+\treturn get_rhs (stmt);\n       else\n-\treturn TREE_OPERAND (stmt, 0);\n+\treturn NULL;\n+\n+    case MODIFY_EXPR:\n+      return TREE_OPERAND (stmt, 1);\n+\n+    case COND_EXPR:\n+      return COND_EXPR_COND (stmt);\n+    case SWITCH_EXPR:\n+      return SWITCH_COND (stmt);\n+    case GOTO_EXPR:\n+      return GOTO_DESTINATION (stmt);\n+    case LABEL_EXPR:\n+      return LABEL_EXPR_LABEL (stmt);\n+\n+    default:\n+      return stmt;\n     }\n-  else if (code == GOTO_EXPR)\n-    return GOTO_DESTINATION (stmt);\n-  else if (code == LABEL_EXPR)\n-    return LABEL_EXPR_LABEL (stmt);\n-  else\n-    return stmt;\n }\n \n \n@@ -2135,8 +2138,9 @@ get_rhs (tree stmt)\n static bool\n set_rhs (tree *stmt_p, tree expr)\n {\n-  tree stmt = *stmt_p;\n+  tree stmt = *stmt_p, op;\n   enum tree_code code = TREE_CODE (expr);\n+  stmt_ann_t ann;\n \n   /* Verify the constant folded result is valid gimple.  */\n   if (TREE_CODE_CLASS (code) == '2')\n@@ -2151,30 +2155,39 @@ set_rhs (tree *stmt_p, tree expr)\n \treturn false;\n     }\n \n-  code = TREE_CODE (stmt);\n-  if (code == MODIFY_EXPR)\n-    TREE_OPERAND (stmt, 1) = expr;\n-  else if (code == COND_EXPR)\n-    COND_EXPR_COND (stmt) = expr;\n-  else if (code == SWITCH_EXPR)\n-    SWITCH_COND (stmt) = expr;\n-  else if (code == RETURN_EXPR)\n-    {\n-      if (TREE_OPERAND (stmt, 0)\n-\t  && TREE_CODE (TREE_OPERAND (stmt, 0)) == MODIFY_EXPR)\n-\tTREE_OPERAND (TREE_OPERAND (stmt, 0), 1) = expr;\n-      else\n-\tTREE_OPERAND (stmt, 0) = expr;\n-    }\n-  else if (code == GOTO_EXPR)\n-    GOTO_DESTINATION (stmt) = expr;\n-  else if (code == LABEL_EXPR)\n-    LABEL_EXPR_LABEL (stmt) = expr;\n-  else\n+  switch (TREE_CODE (stmt))\n     {\n+    case RETURN_EXPR:\n+      op = TREE_OPERAND (stmt, 0);\n+      if (TREE_CODE (op) != MODIFY_EXPR)\n+\t{\n+\t  TREE_OPERAND (stmt, 0) = expr;\n+\t  break;\n+\t}\n+      stmt = op;\n+      /* FALLTHRU */\n+\n+    case MODIFY_EXPR:\n+      TREE_OPERAND (stmt, 1) = expr;\n+      break;\n+\n+    case COND_EXPR:\n+      COND_EXPR_COND (stmt) = expr;\n+      break;\n+    case SWITCH_EXPR:\n+      SWITCH_COND (stmt) = expr;\n+      break;\n+    case GOTO_EXPR:\n+      GOTO_DESTINATION (stmt) = expr;\n+      break;\n+    case LABEL_EXPR:\n+      LABEL_EXPR_LABEL (stmt) = expr;\n+      break;\n+\n+    default:\n       /* Replace the whole statement with EXPR.  If EXPR has no side\n \t effects, then replace *STMT_P with an empty statement.  */\n-      stmt_ann_t ann = stmt_ann (stmt);\n+      ann = stmt_ann (stmt);\n       *stmt_p = TREE_SIDE_EFFECTS (expr) ? expr : build_empty_stmt ();\n       (*stmt_p)->common.ann = (tree_ann_t) ann;\n \n@@ -2211,6 +2224,7 @@ set_rhs (tree *stmt_p, tree expr)\n \t\tSSA_NAME_DEF_STMT (var) = *stmt_p;\n \t    }\n \t}\n+      break;\n     }\n \n   return true;"}, {"sha": "60287ce5c1ce8f3fa76428d61e75a52feb0cd980", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=cd7097527ee51b1bef879ef53505dff0673c98ba", "patch": "@@ -290,6 +290,7 @@ mark_stmt_if_obviously_necessary (tree stmt, bool aggressive)\n   v_must_def_optype v_must_defs;\n   stmt_ann_t ann;\n   size_t i;\n+  tree op;\n \n   /* Statements that are implicitly live.  Most function calls, asm and return\n      statements are required.  Labels and BIND_EXPR nodes are kept because\n@@ -319,8 +320,8 @@ mark_stmt_if_obviously_necessary (tree stmt, bool aggressive)\n       return;\n \n     case MODIFY_EXPR:\n-      if (TREE_CODE (TREE_OPERAND (stmt, 1)) == CALL_EXPR\n-\t  && TREE_SIDE_EFFECTS (TREE_OPERAND (stmt, 1)))\n+      op = get_call_expr_in (stmt);\n+      if (op && TREE_SIDE_EFFECTS (op))\n \t{\n \t  mark_stmt_necessary (stmt, true);\n \t  return;\n@@ -638,11 +639,9 @@ eliminate_unnecessary_stmts (void)\n \t    remove_dead_stmt (&i, bb);\n \t  else\n \t    {\n-\t      if (TREE_CODE (t) == CALL_EXPR)\n-\t\tnotice_special_calls (t);\n-\t      else if (TREE_CODE (t) == MODIFY_EXPR\n-\t\t       && TREE_CODE (TREE_OPERAND (t, 1)) == CALL_EXPR)\n-\t\tnotice_special_calls (TREE_OPERAND (t, 1));\n+\t      tree call = get_call_expr_in (t);\n+\t      if (call)\n+\t\tnotice_special_calls (call);\n \t      bsi_next (&i);\n \t    }\n \t}"}, {"sha": "efc7d7fbef4040aa92801106a3c1ff5b1d2c91c4", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=cd7097527ee51b1bef879ef53505dff0673c98ba", "patch": "@@ -244,10 +244,11 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n   if (NUM_V_MAY_DEFS (v_may_defs) == 0)\n     return;\n \n-  /* We know we have virtual definitions.  If this is a MODIFY_EXPR, then\n-     record it into our table.  */\n-  if (TREE_CODE (stmt) == MODIFY_EXPR\n-      && TREE_CODE (TREE_OPERAND (stmt, 1)) != CALL_EXPR)\n+  /* We know we have virtual definitions.  If this is a MODIFY_EXPR that's\n+     not also a function call, then record it into our table.  */\n+  if (get_call_expr_in (stmt))\n+    return;\n+  if (TREE_CODE (stmt) == MODIFY_EXPR)\n     {\n       dataflow_t df = get_immediate_uses (stmt);\n       unsigned int num_uses = num_immediate_uses (df);"}, {"sha": "323c239cece634e570101877fc2c4d416f002ebe", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd7097527ee51b1bef879ef53505dff0673c98ba/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=cd7097527ee51b1bef879ef53505dff0673c98ba", "patch": "@@ -757,10 +757,7 @@ optimize_tail_call (struct tailcall *t, bool opt_tailcalls)\n     {\n       tree stmt = bsi_stmt (t->call_bsi);\n \n-      if (TREE_CODE (stmt) == MODIFY_EXPR)\n-\tstmt = TREE_OPERAND (stmt, 1);\n-      if (TREE_CODE (stmt) != CALL_EXPR)\n-\tabort ();\n+      stmt = get_call_expr_in (stmt);\n       CALL_EXPR_TAILCALL (stmt) = 1;\n       if (dump_file && (dump_flags & TDF_DETAILS))\n         {"}]}