{"sha": "8db1028ebab32f0d725be8dc886a6aa335d81575", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRiMTAyOGViYWIzMmYwZDcyNWJlOGRjODg2YTZhYTMzNWQ4MTU3NQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-03T16:10:52Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-03T16:10:52Z"}, "message": "re PR c++/9162 ([New parser] Problem with default argument in a friend function)\n\ncp:\n\tPR c++/9162\n\t* decl.c (grokdeclarator): Return friend decls, not\n\tvoid_type_node.\n\t* decl2.c (grokfield): Alter friend decl check.\n\t* parser.c (struct cp_parser): Document default_arg chain on\n\tunparsed_functions_queue.\n\t(cp_parser_save_default_args): New.\n\t(cp_parser_init_declarator, cp_parser_function_definition,\n\tcp_parser_member_declaration): Call it.\n\t(cp_parser_class_specifier): Remove unused variable. Alter\n\tprocessing of unparsed_functions_queue.\ntestsuite:\n\tPR c++/9162\n\t* g++.dg/parse/defarg4.C: New.\n\nFrom-SVN: r68886", "tree": {"sha": "cecd1124ba5e8aecaff532002a217533915f83ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cecd1124ba5e8aecaff532002a217533915f83ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8db1028ebab32f0d725be8dc886a6aa335d81575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db1028ebab32f0d725be8dc886a6aa335d81575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db1028ebab32f0d725be8dc886a6aa335d81575", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db1028ebab32f0d725be8dc886a6aa335d81575/comments", "author": null, "committer": null, "parents": [{"sha": "58eabcb1e9b9e16550757ba6b744148d20a7457f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58eabcb1e9b9e16550757ba6b744148d20a7457f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58eabcb1e9b9e16550757ba6b744148d20a7457f"}], "stats": {"total": 207, "additions": 135, "deletions": 72}, "files": [{"sha": "f75b8ac4a4f4d1c72f6df09c9607d419f72aeb64", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8db1028ebab32f0d725be8dc886a6aa335d81575", "patch": "@@ -1,3 +1,17 @@\n+2003-07-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/9162\n+\t* decl.c (grokdeclarator): Return friend decls, not\n+\tvoid_type_node.\n+\t* decl2.c (grokfield): Alter friend decl check.\n+\t* parser.c (struct cp_parser): Document default_arg chain on\n+\tunparsed_functions_queue.\n+\t(cp_parser_save_default_args): New.\n+\t(cp_parser_init_declarator, cp_parser_function_definition,\n+\tcp_parser_member_declaration): Call it.\n+\t(cp_parser_class_specifier): Remove unused variable. Alter\n+\tprocessing of unparsed_functions_queue.\n+\n 2003-07-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* class.c (add_method, check_field_decl): Fix format specifier."}, {"sha": "219c65996fd3f974ad5ac1687b329e45d50af799", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8db1028ebab32f0d725be8dc886a6aa335d81575", "patch": "@@ -10779,9 +10779,6 @@ grokdeclarator (tree declarator,\n \n \t    declarator = TREE_OPERAND (declarator, 0);\n \n-\t    /* FIXME: This is where default args should be fully\n-\t       processed.  */\n-\n \t    arg_types = grokparms (inner_parms);\n \n \t    if (declarator && flags == DTOR_FLAG)\n@@ -11536,30 +11533,24 @@ grokdeclarator (tree declarator,\n \t    /* Friends are treated specially.  */\n \t    if (ctype == current_class_type)\n \t      warning (\"member functions are implicitly friends of their class\");\n- \t    else\n- \t      {\n- \t\ttree t = NULL_TREE;\n- \t\tif (decl && DECL_NAME (decl))\n- \t\t  {\n- \t\t    if (template_class_depth (current_class_type) == 0)\n- \t\t      {\n- \t\t\tdecl\n- \t\t\t  = check_explicit_specialization\n- \t\t\t  (declarator, decl,\n- \t\t\t   template_count, 2 * (funcdef_flag != 0) + 4);\n- \t\t\tif (decl == error_mark_node)\n- \t\t\t  return error_mark_node;\n- \t\t      }\n-\t\t    \n- \t\t    t = do_friend (ctype, declarator, decl,\n- \t\t\t\t   last_function_parms, *attrlist,\n-\t\t\t\t   flags, quals, funcdef_flag);\n- \t\t  }\n- \t\tif (t && funcdef_flag)\n- \t\t  return t;\n-  \n- \t\treturn void_type_node;\n- \t      }\n+ \t    else if (decl && DECL_NAME (decl))\n+\t      {\n+\t\tif (template_class_depth (current_class_type) == 0)\n+\t\t  {\n+\t\t    decl = check_explicit_specialization\n+\t\t      (declarator, decl, template_count,\n+\t\t       2 * (funcdef_flag != 0) + 4);\n+\t\t    if (decl == error_mark_node)\n+\t\t      return error_mark_node;\n+\t\t  }\n+\t\t\n+\t\tdecl = do_friend (ctype, declarator, decl,\n+\t\t\t\t  last_function_parms, *attrlist,\n+\t\t\t\t  flags, quals, funcdef_flag);\n+\t\treturn decl;\n+\t      }\n+\t    else\n+\t      return void_type_node;\n \t  }\n \n \t/* Structure field.  It may not be a function, except for C++ */"}, {"sha": "ab29aeed45d1dd275189e067105e6344c348d483", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=8db1028ebab32f0d725be8dc886a6aa335d81575", "patch": "@@ -889,8 +889,14 @@ grokfield (tree declarator, tree declspecs, tree init, tree asmspec_tree,\n     }\n \n   /* Pass friendly classes back.  */\n-  if (TREE_CODE (value) == VOID_TYPE)\n-    return void_type_node;\n+  if (value == void_type_node)\n+    return value;\n+\n+  /* Pass friend decls back. */\n+  if ((TREE_CODE (value) == FUNCTION_DECL\n+       || TREE_CODE (value) == TEMPLATE_DECL)\n+      && DECL_CONTEXT (value) != current_class_type)\n+    return value;\n \n   if (DECL_NAME (value) != NULL_TREE\n       && IDENTIFIER_POINTER (DECL_NAME (value))[0] == '_'"}, {"sha": "e458a14bf1a478ac1f53a19c47fc161c63124cff", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=8db1028ebab32f0d725be8dc886a6aa335d81575", "patch": "@@ -306,10 +306,7 @@ make_friend_class (type, friend_type)\n     }\n }\n \n-/* Main friend processor.  This is large, and for modularity purposes,\n-   has been removed from grokdeclarator.  It returns `void_type_node'\n-   to indicate that something happened, though a FIELD_DECL is\n-   not returned.\n+/* Main friend processor. \n \n    CTYPE is the class this friend belongs to.\n "}, {"sha": "6155af404cdd74c57fa2008a53fe39bb03dc9bda", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 58, "deletions": 39, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8db1028ebab32f0d725be8dc886a6aa335d81575", "patch": "@@ -1295,16 +1295,20 @@ typedef struct cp_parser GTY(())\n      issued as an error message if a type is defined.  */\n   const char *type_definition_forbidden_message;\n \n-  /* A TREE_LIST of queues of functions whose bodies have been lexed,\n-     but may not have been parsed.  These functions are friends of\n-     members defined within a class-specification; they are not\n-     procssed until the class is complete.  The active queue is at the\n-     front of the list.\n-\n-     Within each queue, functions appear in the reverse order that\n-     they appeared in the source.  Each TREE_VALUE is a\n-     FUNCTION_DECL of TEMPLATE_DECL corresponding to a member\n-     function.  */\n+  /* A list of lists. The outer list is a stack, used for member\n+     functions of local classes. At each level there are two sub-list,\n+     one on TREE_VALUE and one on TREE_PURPOSE. Each of those\n+     sub-lists has a FUNCTION_DECL or TEMPLATE_DECL on their\n+     TREE_VALUE's. The functions are chained in reverse declaration\n+     order.\n+\n+     The TREE_PURPOSE sublist contains those functions with default\n+     arguments that need post processing, and the TREE_VALUE sublist\n+     contains those functions with definitions that need post\n+     processing.\n+\n+     These lists can only be processed once the outermost class being\n+     defined is complete. */\n   tree unparsed_functions_queues;\n \n   /* The number of classes whose definitions are currently in\n@@ -1679,6 +1683,8 @@ static tree cp_parser_single_declaration\n   (cp_parser *, bool, bool *);\n static tree cp_parser_functional_cast\n   (cp_parser *, tree);\n+static void cp_parser_save_default_args\n+  (cp_parser *, tree);\n static void cp_parser_late_parsing_for_member\n   (cp_parser *, tree);\n static void cp_parser_late_parsing_default_args\n@@ -9735,10 +9741,14 @@ cp_parser_init_declarator (cp_parser* parser,\n   /* For an in-class declaration, use `grokfield' to create the\n      declaration.  */\n   if (member_p)\n-    decl = grokfield (declarator, decl_specifiers,\n-\t\t      initializer, /*asmspec=*/NULL_TREE,\n+    {\n+      decl = grokfield (declarator, decl_specifiers,\n+\t\t\tinitializer, /*asmspec=*/NULL_TREE,\n \t\t\t/*attributes=*/NULL_TREE);\n-\n+      if (decl && TREE_CODE (decl) == FUNCTION_DECL)\n+\tcp_parser_save_default_args (parser, decl);\n+    }\n+  \n   /* Finish processing the declaration.  But, skip friend\n      declarations.  */\n   if (!friend_p && decl)\n@@ -11031,6 +11041,9 @@ cp_parser_function_definition (cp_parser* parser, bool* friend_p)\n \t  return error_mark_node;\n \t}\n \n+      /* Remember it, if there default args to post process.  */\n+      cp_parser_save_default_args (parser, fn);\n+      \n       /* Create a token cache.  */\n       cache = cp_token_cache_new ();\n       /* Save away the tokens that make up the body of the \n@@ -11505,14 +11518,9 @@ cp_parser_class_specifier (cp_parser* parser)\n      there is no need to delay the parsing of `A::B::f'.  */\n   if (--parser->num_classes_being_defined == 0) \n     {\n-      tree last_scope = NULL_TREE;\n       tree queue_entry;\n       tree fn;\n \n-      /* Reverse the queue, so that we process it in the order the\n-\t functions were declared.  */\n-      TREE_VALUE (parser->unparsed_functions_queues)\n-\t= nreverse (TREE_VALUE (parser->unparsed_functions_queues));\n       /* In a first pass, parse default arguments to the functions.\n \t Then, in a second pass, parse the bodies of the functions.\n \t This two-phased approach handles cases like:\n@@ -11523,13 +11531,13 @@ cp_parser_class_specifier (cp_parser* parser)\n             };\n \n          */\n-      for (queue_entry = TREE_VALUE (parser->unparsed_functions_queues);\n-\t   queue_entry;\n-\t   queue_entry = TREE_CHAIN (queue_entry))\n+      for (TREE_PURPOSE (parser->unparsed_functions_queues)\n+\t     = nreverse (TREE_PURPOSE (parser->unparsed_functions_queues));\n+\t   (queue_entry = TREE_PURPOSE (parser->unparsed_functions_queues));\n+\t   TREE_PURPOSE (parser->unparsed_functions_queues)\n+\t     = TREE_CHAIN (TREE_PURPOSE (parser->unparsed_functions_queues)))\n \t{\n \t  fn = TREE_VALUE (queue_entry);\n-\t  if (DECL_FUNCTION_TEMPLATE_P (fn))\n-\t    fn = DECL_TEMPLATE_RESULT (fn);\n \t  /* Make sure that any template parameters are in scope.  */\n \t  maybe_begin_member_template_processing (fn);\n \t  /* If there are default arguments that have not yet been processed,\n@@ -11539,24 +11547,19 @@ cp_parser_class_specifier (cp_parser* parser)\n \t  maybe_end_member_template_processing ();\n \t}\n       /* Now parse the body of the functions.  */\n-      while (TREE_VALUE (parser->unparsed_functions_queues))\n-\n+      for (TREE_VALUE (parser->unparsed_functions_queues)\n+\t     = nreverse (TREE_VALUE (parser->unparsed_functions_queues));\n+\t   (queue_entry = TREE_VALUE (parser->unparsed_functions_queues));\n+\t   TREE_VALUE (parser->unparsed_functions_queues)\n+\t     = TREE_CHAIN (TREE_VALUE (parser->unparsed_functions_queues)))\n \t{\n \t  /* Figure out which function we need to process.  */\n-\t  queue_entry = TREE_VALUE (parser->unparsed_functions_queues);\n \t  fn = TREE_VALUE (queue_entry);\n \n \t  /* Parse the function.  */\n \t  cp_parser_late_parsing_for_member (parser, fn);\n-\n-\t  TREE_VALUE (parser->unparsed_functions_queues)\n-\t    = TREE_CHAIN (TREE_VALUE (parser->unparsed_functions_queues));\n \t}\n \n-      /* If LAST_SCOPE is non-NULL, then we have pushed scopes one\n-\t more time than we have popped, so me must pop here.  */\n-      if (last_scope)\n-\tpop_scope (last_scope);\n     }\n \n   /* Put back any saved access checks.  */\n@@ -12268,13 +12271,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      if (!friend_p)\n \t\tfinish_member_declaration (decl);\n \n-\t      /* If DECL is a function, we must return\n-\t\t to parse it later.  (Even though there is no definition,\n-\t\t there might be default arguments that need handling.)  */\n \t      if (TREE_CODE (decl) == FUNCTION_DECL)\n-\t\tTREE_VALUE (parser->unparsed_functions_queues)\n-\t\t  = tree_cons (NULL_TREE, decl, \n-\t\t\t       TREE_VALUE (parser->unparsed_functions_queues));\n+\t\tcp_parser_save_default_args (parser, decl);\n \t    }\n \t}\n     }\n@@ -14129,6 +14127,27 @@ cp_parser_late_parsing_for_member (cp_parser* parser, tree member_function)\n     = TREE_CHAIN (parser->unparsed_functions_queues);\n }\n \n+/* If DECL contains any default args, remeber it on the unparsed\n+   functions queue.  */\n+\n+static void\n+cp_parser_save_default_args (cp_parser* parser, tree decl)\n+{\n+  tree probe;\n+\n+  for (probe = TYPE_ARG_TYPES (TREE_TYPE (decl));\n+       probe;\n+       probe = TREE_CHAIN (probe))\n+    if (TREE_PURPOSE (probe))\n+      {\n+\tTREE_PURPOSE (parser->unparsed_functions_queues)\n+\t  = tree_cons (NULL_TREE, decl, \n+\t\t       TREE_PURPOSE (parser->unparsed_functions_queues));\n+\tbreak;\n+      }\n+  return;\n+}\n+\n /* FN is a FUNCTION_DECL which may contains a parameter with an\n    unparsed DEFAULT_ARG.  Parse the default args now.  */\n "}, {"sha": "c158b78539d58d438a93f26875944797092963c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8db1028ebab32f0d725be8dc886a6aa335d81575", "patch": "@@ -1,3 +1,8 @@\n+2003-07-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/9162\n+\t* g++.dg/parse/defarg4.C: New.\n+\n 2003-07-03  Roger Sayle  <roger@eyesopen.com>\n \n \tPR target/10700"}, {"sha": "39d0a89904ffd832b73c4643b6f01947347d9c0f", "filename": "gcc/testsuite/g++.dg/parse/defarg4.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db1028ebab32f0d725be8dc886a6aa335d81575/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdefarg4.C?ref=8db1028ebab32f0d725be8dc886a6aa335d81575", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 3 Jul 2003 <nathan@codesourcery.com>\n+\n+// PR c++ 9162. default args got left unprocessed\n+\n+struct S {\n+  friend int foo (int = 100);\n+};\n+int i = foo ();\n+\n+struct R\n+{\n+  template <typename T> R (T, int = 0);\n+};\n+\n+int Foo ()\n+{\n+  R s (1);\n+}\n+\n+template <typename T> struct Q\n+{\n+  int Foo (T, int = 0);\n+};\n+\n+int Foo (Q<int> *s)\n+{\n+  s->Foo (1);\n+}"}]}