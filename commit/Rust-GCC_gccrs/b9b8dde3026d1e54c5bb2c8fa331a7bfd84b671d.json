{"sha": "b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjliOGRkZTMwMjZkMWU1NGM1YmIyYzhmYTMzMWE3YmZkODRiNjcxZA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2005-07-19T20:19:16Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-07-19T20:19:16Z"}, "message": "toplev.h: Add comment about the first parameter for warning().\n\n* toplev.h: Add comment about the first parameter for warning().\n* errors.h: Likewise.\n\n* c.opt (Wpragmas): New.\n* doc/invoke.texi: Document it.\n\n* function.c (do_warn_unused_parameter): Add warning control to\nwarning call.\n* c-decl.c (warn_if_shadowing): Likewise.\n* c-lex.c (cb_def_pragma): Likewise.\n* c-pragma.c (GCC_BAD, GCC_BAD2): Likewise.\n(pop_alignment): Likewise.\n(handle_pragma_pack): Likewise.\n(apply_pragma_weak): Likewise.\n(handle_pragma_weak): Likewise.\n(handle_pragma_redefine_extname): Likewise.\n(add_to_renaming_pragma_list): Likewise.\n(handle_pragma_extern_prefix): Likewise.\n(maybe_apply_renaming_pragma): Likewise.\n(handle_pragma_visibility): Likewise.\n\n* config/c4x/c4x-c.c (BAD): Likewise.\n(c4x_parse_pragma): Likewise.\n* config/ia64/ia64-c.c (ia64_hpux_handle_builtin_pragma): Likewise.\n* config/rs6000/rs6000-c.c (SYNTAX_ERROR): Likewise.\n(rs6000_pragma_longcall): Likewise.\n* config/v850/v850-c.c (pop_data_area): Likewise.\n(ghs_pragma_section): Likewise.\n(ghs_pragma_section): Likewise.\n(ghs_pragma_interrupt): Likewise.\n(ghs_pragma_starttda): Likewise.\n(ghs_pragma_startsda): Likewise.\n(ghs_pragma_startzda): Likewise.\n(ghs_pragma_endtda): Likewise.\n(ghs_pragma_endsda): Likewise.\n(ghs_pragma_endzda): Likewise.\n\nFrom-SVN: r102168", "tree": {"sha": "1c8849b78f20cc8bc1516f5d7faf8239837a6fcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c8849b78f20cc8bc1516f5d7faf8239837a6fcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/comments", "author": null, "committer": null, "parents": [{"sha": "24d36d28c4519d1fe2d07b586a75b3957c5cccfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d36d28c4519d1fe2d07b586a75b3957c5cccfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d36d28c4519d1fe2d07b586a75b3957c5cccfb"}], "stats": {"total": 157, "additions": 109, "deletions": 48}, "files": [{"sha": "ec8a08eef0b08cc13e6f43bff86a8b7bc29a9335", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "patch": "@@ -1,3 +1,42 @@\n+2005-07-15  DJ Delorie  <dj@redhat.com>\n+\n+\t* toplev.h: Add comment about the first parameter for warning().\n+\t* errors.h: Likewise.\n+\n+\t* c.opt (Wpragmas): New.\n+\t* doc/invoke.texi: Document it.\n+\t\n+\t* function.c (do_warn_unused_parameter): Add warning control to\n+\twarning call.\n+\t* c-decl.c (warn_if_shadowing): Likewise.\n+\t* c-lex.c (cb_def_pragma): Likewise.\n+\t* c-pragma.c (GCC_BAD, GCC_BAD2): Likewise.\n+\t(pop_alignment): Likewise.\n+\t(handle_pragma_pack): Likewise.\n+\t(apply_pragma_weak): Likewise.\n+\t(handle_pragma_weak): Likewise.\n+\t(handle_pragma_redefine_extname): Likewise.\n+\t(add_to_renaming_pragma_list): Likewise.\n+\t(handle_pragma_extern_prefix): Likewise.\n+\t(maybe_apply_renaming_pragma): Likewise.\n+\t(handle_pragma_visibility): Likewise.\n+\t\n+\t* config/c4x/c4x-c.c (BAD): Likewise.\n+\t(c4x_parse_pragma): Likewise.\n+\t* config/ia64/ia64-c.c (ia64_hpux_handle_builtin_pragma): Likewise.\n+\t* config/rs6000/rs6000-c.c (SYNTAX_ERROR): Likewise.\n+\t(rs6000_pragma_longcall): Likewise.\n+\t* config/v850/v850-c.c (pop_data_area): Likewise.\n+\t(ghs_pragma_section): Likewise.\n+\t(ghs_pragma_section): Likewise.\n+\t(ghs_pragma_interrupt): Likewise.\n+\t(ghs_pragma_starttda): Likewise.\n+\t(ghs_pragma_startsda): Likewise.\n+\t(ghs_pragma_startzda): Likewise.\n+\t(ghs_pragma_endtda): Likewise.\n+\t(ghs_pragma_endsda): Likewise.\n+\t(ghs_pragma_endzda): Likewise.\n+\n 2005-07-19  Danny Berlin <dberlin@dberlin.org>\n \t    Kenneth Zadeck <zadeck@naturalbridge.com>\n "}, {"sha": "71a955380eca54c1f66c1da15991acfbc4561f2e", "filename": "gcc/c-decl.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "patch": "@@ -1908,27 +1908,28 @@ warn_if_shadowing (tree new_decl)\n \n \tif (old_decl == error_mark_node)\n \t  {\n-\t    warning (0, \"declaration of %q+D shadows previous non-variable\",\n-\t\t     new_decl);\n+\t    warning (OPT_Wshadow, \"declaration of %q+D shadows previous \"\n+\t\t     \"non-variable\", new_decl);\n \t    break;\n \t  }\n \telse if (TREE_CODE (old_decl) == PARM_DECL)\n-\t  warning (0, \"declaration of %q+D shadows a parameter\", new_decl);\n-\telse if (DECL_FILE_SCOPE_P (old_decl))\n-\t  warning (0, \"declaration of %q+D shadows a global declaration\",\n+\t  warning (OPT_Wshadow, \"declaration of %q+D shadows a parameter\",\n \t\t   new_decl);\n+\telse if (DECL_FILE_SCOPE_P (old_decl))\n+\t  warning (OPT_Wshadow, \"declaration of %q+D shadows a global \"\n+\t\t   \"declaration\", new_decl);\n \telse if (TREE_CODE (old_decl) == FUNCTION_DECL\n \t\t && DECL_BUILT_IN (old_decl))\n \t  {\n-\t    warning (0, \"declaration of %q+D shadows a built-in function\",\n-\t\t     new_decl);\n+\t    warning (OPT_Wshadow, \"declaration of %q+D shadows \"\n+\t\t     \"a built-in function\", new_decl);\n \t    break;\n \t  }\n \telse\n-\t  warning (0, \"declaration of %q+D shadows a previous local\",\n+\t  warning (OPT_Wshadow, \"declaration of %q+D shadows a previous local\",\n \t\t   new_decl);\n \n-\twarning (0, \"%Jshadowed declaration is here\", old_decl);\n+\twarning (OPT_Wshadow, \"%Jshadowed declaration is here\", old_decl);\n \n \tbreak;\n       }"}, {"sha": "1c832c50d15a648979fbedb5864d82eb4a73f1e4", "filename": "gcc/c-lex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "patch": "@@ -299,7 +299,8 @@ cb_def_pragma (cpp_reader *pfile, source_location loc)\n \t    name = cpp_token_as_text (pfile, s);\n \t}\n \n-      warning (0, \"%Hignoring #pragma %s %s\", &fe_loc, space, name);\n+      warning (OPT_Wunknown_pragmas, \"%Hignoring #pragma %s %s\",\n+\t       &fe_loc, space, name);\n     }\n }\n "}, {"sha": "1407a114c52513029d7e77bafe7056294c188705", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "patch": "@@ -37,9 +37,10 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"vec.h\"\n #include \"target.h\"\n \n-#define GCC_BAD(gmsgid) do { warning (0, gmsgid); return; } while (0)\n+#define GCC_BAD(gmsgid) \\\n+  do { warning (OPT_Wpragmas, gmsgid); return; } while (0)\n #define GCC_BAD2(gmsgid, arg) \\\n-  do { warning (0, gmsgid, arg); return; } while (0)\n+  do { warning (OPT_Wpragmas, gmsgid, arg); return; } while (0)\n \n typedef struct align_stack GTY(())\n {\n@@ -110,7 +111,7 @@ pop_alignment (tree id)\n \t    break;\n \t  }\n       if (entry == NULL)\n-\twarning (0, \"\\\n+\twarning (OPT_Wpragmas, \"\\\n #pragma pack(pop, %s) encountered without matching #pragma pack(push, %s)\"\n \t\t , IDENTIFIER_POINTER (id), IDENTIFIER_POINTER (id));\n     }\n@@ -203,7 +204,7 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n     GCC_BAD (\"malformed %<#pragma pack%> - ignored\");\n \n   if (c_lex (&x) != CPP_EOF)\n-    warning (0, \"junk at end of %<#pragma pack%>\");\n+    warning (OPT_Wpragmas, \"junk at end of %<#pragma pack%>\");\n \n   if (flag_pack_struct)\n     GCC_BAD (\"#pragma pack has no effect with -fpack-struct - ignored\");\n@@ -259,8 +260,8 @@ apply_pragma_weak (tree decl, tree value)\n   if (SUPPORTS_WEAK && DECL_EXTERNAL (decl) && TREE_USED (decl)\n       && !DECL_WEAK (decl) /* Don't complain about a redundant #pragma.  */\n       && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n-    warning (0, \"applying #pragma weak %q+D after first use results \"\n-             \"in unspecified behavior\", decl);\n+    warning (OPT_Wpragmas, \"applying #pragma weak %q+D after first use \"\n+             \"results in unspecified behavior\", decl);\n \n   declare_weak (decl);\n }\n@@ -342,7 +343,7 @@ handle_pragma_weak (cpp_reader * ARG_UNUSED (dummy))\n       t = c_lex (&x);\n     }\n   if (t != CPP_EOF)\n-    warning (0, \"junk at end of #pragma weak\");\n+    warning (OPT_Wpragmas, \"junk at end of #pragma weak\");\n \n   decl = identifier_global_value (name);\n   if (decl && DECL_P (decl))\n@@ -415,7 +416,7 @@ handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n     GCC_BAD (\"malformed #pragma redefine_extname, ignored\");\n   t = c_lex (&x);\n   if (t != CPP_EOF)\n-    warning (0, \"junk at end of #pragma redefine_extname\");\n+    warning (OPT_Wpragmas, \"junk at end of #pragma redefine_extname\");\n \n   if (!flag_mudflap && !targetm.handle_pragma_redefine_extname)\n     {\n@@ -438,8 +439,8 @@ handle_pragma_redefine_extname (cpp_reader * ARG_UNUSED (dummy))\n \t  name = targetm.strip_name_encoding (name);\n \n \t  if (strcmp (name, IDENTIFIER_POINTER (newname)))\n-\t    warning (0, \"#pragma redefine_extname ignored due to conflict with \"\n-\t\t     \"previous rename\");\n+\t    warning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n+\t\t     \"conflict with previous rename\");\n \t}\n       else\n \tchange_decl_assembler_name (decl, newname);\n@@ -461,8 +462,8 @@ add_to_renaming_pragma_list (tree oldname, tree newname)\n   if (previous)\n     {\n       if (TREE_VALUE (previous) != newname)\n-\twarning (0, \"#pragma redefine_extname ignored due to conflict with \"\n-\t\t \"previous #pragma redefine_extname\");\n+\twarning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n+\t\t \"conflict with previous #pragma redefine_extname\");\n       return;\n     }\n   \n@@ -483,7 +484,7 @@ handle_pragma_extern_prefix (cpp_reader * ARG_UNUSED (dummy))\n     GCC_BAD (\"malformed #pragma extern_prefix, ignored\");\n   t = c_lex (&x);\n   if (t != CPP_EOF)\n-    warning (0, \"junk at end of #pragma extern_prefix\");\n+    warning (OPT_Wpragmas, \"junk at end of #pragma extern_prefix\");\n \n   if (targetm.handle_pragma_extern_prefix)\n     /* Note that the length includes the null terminator.  */\n@@ -516,7 +517,7 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n       oldname = targetm.strip_name_encoding (oldname);\n \n       if (asmname && strcmp (TREE_STRING_POINTER (asmname), oldname))\n-\t  warning (0, \"asm declaration ignored due to \"\n+\t  warning (OPT_Wpragmas, \"asm declaration ignored due to \"\n \t\t   \"conflict with previous rename\");\n \n       /* Take any pending redefine_extname off the list.  */\n@@ -525,7 +526,7 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n \t  {\n \t    /* Only warn if there is a conflict.  */\n \t    if (strcmp (IDENTIFIER_POINTER (TREE_VALUE (t)), oldname))\n-\t      warning (0, \"#pragma redefine_extname ignored due to \"\n+\t      warning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n \t\t       \"conflict with previous rename\");\n \n \t    *p = TREE_CHAIN (t);\n@@ -547,7 +548,7 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n \t  {\n \t    if (strcmp (TREE_STRING_POINTER (asmname),\n \t\t\tIDENTIFIER_POINTER (newname)) != 0)\n-\t      warning (0, \"#pragma redefine_extname ignored due to \"\n+\t      warning (OPT_Wpragmas, \"#pragma redefine_extname ignored due to \"\n \t\t       \"conflict with __asm__ declaration\");\n \t    return asmname;\n \t  }\n@@ -661,7 +662,7 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n         }\n     }\n   if (c_lex (&x) != CPP_EOF)\n-    warning (0, \"junk at end of %<#pragma GCC visibility%>\");\n+    warning (OPT_Wpragmas, \"junk at end of %<#pragma GCC visibility%>\");\n }\n \n #endif"}, {"sha": "908efd61f9c1db946551811d9c7addabe0da69dc", "filename": "gcc/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc.opt?ref=b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "patch": "@@ -331,6 +331,10 @@ Wpointer-to-int-cast\n C ObjC Var(warn_pointer_to_int_cast) Init(1)\n Warn when a pointer is cast to an integer of a different size\n \n+Wpragmas\n+C ObjC C++ ObjC++ Var(warn_pragmas) Init(1)\n+Warn about misuses of pragmas\n+\n Wprotocol\n ObjC ObjC++ Var(warn_protocol) Init(1)\n Warn if inherited methods are unimplemented"}, {"sha": "fe3a92229816778412b7a8b2214b633a16e315a8", "filename": "gcc/config/c4x/c4x-c.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fconfig%2Fc4x%2Fc4x-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-c.c?ref=b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "patch": "@@ -57,7 +57,8 @@ static int c4x_parse_pragma (const char *, tree *, tree *);\n    the STRING_CST node of the string.  If SECT is null, then this\n    pragma doesn't take a section string.  Returns 0 for a good pragma,\n    -1 for a malformed pragma.  */\n-#define BAD(gmsgid, arg) do { warning (0, gmsgid, arg); return -1; } while (0)\n+#define BAD(gmsgid, arg) \\\n+  do { warning (OPT_Wpragmas, gmsgid, arg); return -1; } while (0)\n \n static int\n c4x_parse_pragma (name, func, sect)\n@@ -86,7 +87,7 @@ c4x_parse_pragma (name, func, sect)\n     BAD (\"missing ')' for '#pragma %s' - ignored\", name);\n \n   if (c_lex (&x) != CPP_EOF)\n-    warning (0, \"junk at end of '#pragma %s'\", name);\n+    warning (OPT_Wpragmas, \"junk at end of '#pragma %s'\", name);\n \n   *func = f;\n   return 0;"}, {"sha": "d51a98d6ebc1ab40c3a0c8db108e2b33be4e3510", "filename": "gcc/config/ia64/ia64-c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fconfig%2Fia64%2Fia64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fconfig%2Fia64%2Fia64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-c.c?ref=b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "patch": "@@ -49,7 +49,7 @@ ia64_hpux_handle_builtin_pragma (cpp_reader *pfile ATTRIBUTE_UNUSED)\n \ttype = c_lex (&x);\n     }\n   if (type != CPP_EOF)\n-    warning (0, \"malformed #pragma builtin\");\n+    warning (OPT_Wpragmas, \"malformed #pragma builtin\");\n }\n \n /* List of standard math functions which do not set matherr by default"}, {"sha": "c125c78295164bfe0c9687f7faf874feabc4b4c2", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "patch": "@@ -50,10 +50,10 @@ static tree altivec_resolve_overloaded_builtin (tree, tree);\n    whether or not new function declarations receive a longcall\n    attribute by default.  */\n \n-#define SYNTAX_ERROR(gmsgid) do {\t\t\t\\\n-  warning (0, gmsgid);\t\t\t\t\t\\\n-  warning (0, \"ignoring malformed #pragma longcall\");\t\\\n-  return;\t\t\t\t\t\t\\\n+#define SYNTAX_ERROR(gmsgid) do {\t\t\t\t\t\\\n+  warning (OPT_Wpragmas, gmsgid);\t\t\t\t\t\\\n+  warning (OPT_Wpragmas, \"ignoring malformed #pragma longcall\");\t\\\n+  return;\t\t\t\t\t\t\t\t\\\n } while (0)\n \n void\n@@ -75,7 +75,7 @@ rs6000_pragma_longcall (cpp_reader *pfile ATTRIBUTE_UNUSED)\n     SYNTAX_ERROR (\"number must be 0 or 1\");\n \n   if (c_lex (&x) != CPP_EOF)\n-    warning (0, \"junk at end of #pragma longcall\");\n+    warning (OPT_Wpragmas, \"junk at end of #pragma longcall\");\n \n   rs6000_default_long_calls = (n == integer_one_node);\n }"}, {"sha": "cbb86cdd426bf8425aa5cab81a43c073971cb02c", "filename": "gcc/config/v850/v850-c.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fconfig%2Fv850%2Fv850-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fconfig%2Fv850%2Fv850-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-c.c?ref=b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "patch": "@@ -64,9 +64,11 @@ static int\n pop_data_area (v850_data_area data_area)\n {\n   if (data_area_stack == NULL)\n-    warning (0, \"#pragma GHS endXXXX found without previous startXXX\");\n+    warning (OPT_Wpragmas, \"#pragma GHS endXXXX found without \"\n+\t     \"previous startXXX\");\n   else if (data_area != data_area_stack->data_area)\n-    warning (0, \"#pragma GHS endXXX does not match previous startXXX\");\n+    warning (OPT_Wpragmas, \"#pragma GHS endXXX does not match \"\n+\t     \"previous startXXX\");\n   else\n     {\n       data_area_stack_element * elem;\n@@ -144,7 +146,7 @@ ghs_pragma_section (cpp_reader * pfile ATTRIBUTE_UNUSED)\n       if (type == CPP_COMMA)\n \trepeat = 1;\n       else if (type != CPP_EOF)\n-\twarning (0, \"junk at end of #pragma ghs section\");\n+\twarning (OPT_Wpragmas, \"junk at end of #pragma ghs section\");\n       \n       if      (streq (sect, \"data\"))    kind = GHS_SECTION_KIND_DATA;\n       else if (streq (sect, \"text\"))    kind = GHS_SECTION_KIND_TEXT;\n@@ -176,7 +178,7 @@ ghs_pragma_section (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   return;\n \n  bad:\n-  warning (0, \"malformed #pragma ghs section\");\n+  warning (OPT_Wpragmas, \"malformed #pragma ghs section\");\n   return;\n \n  reset:\n@@ -195,7 +197,7 @@ ghs_pragma_interrupt (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (0, \"junk at end of #pragma ghs interrupt\");\n+    warning (OPT_Wpragmas, \"junk at end of #pragma ghs interrupt\");\n   \n   mark_current_function_as_interrupt ();\n }\n@@ -206,7 +208,7 @@ ghs_pragma_starttda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (0, \"junk at end of #pragma ghs starttda\");\n+    warning (OPT_Wpragmas, \"junk at end of #pragma ghs starttda\");\n   \n   push_data_area (DATA_AREA_TDA);\n }\n@@ -217,7 +219,7 @@ ghs_pragma_startsda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (0, \"junk at end of #pragma ghs startsda\");\n+    warning (OPT_Wpragmas, \"junk at end of #pragma ghs startsda\");\n   \n   push_data_area (DATA_AREA_SDA);\n }\n@@ -228,7 +230,7 @@ ghs_pragma_startzda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (0, \"junk at end of #pragma ghs startzda\");\n+    warning (OPT_Wpragmas, \"junk at end of #pragma ghs startzda\");\n   \n   push_data_area (DATA_AREA_ZDA);\n }\n@@ -239,7 +241,7 @@ ghs_pragma_endtda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (0, \"junk at end of #pragma ghs endtda\");\n+    warning (OPT_Wpragmas, \"junk at end of #pragma ghs endtda\");\n   \n   pop_data_area (DATA_AREA_TDA);\n }\n@@ -250,7 +252,7 @@ ghs_pragma_endsda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (0, \"junk at end of #pragma ghs endsda\");\n+    warning (OPT_Wpragmas, \"junk at end of #pragma ghs endsda\");\n   \n   pop_data_area (DATA_AREA_SDA);\n }\n@@ -261,7 +263,7 @@ ghs_pragma_endzda (cpp_reader * pfile ATTRIBUTE_UNUSED)\n   tree x;\n   \n   if (c_lex (&x) != CPP_EOF)\n-    warning (0, \"junk at end of #pragma ghs endzda\");\n+    warning (OPT_Wpragmas, \"junk at end of #pragma ghs endzda\");\n   \n   pop_data_area (DATA_AREA_ZDA);\n }"}, {"sha": "48764a632077c58117b88009854350896d249d64", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "patch": "@@ -241,7 +241,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wsign-compare  -Wstrict-aliasing -Wstrict-aliasing=2 @gol\n -Wswitch  -Wswitch-default  -Wswitch-enum @gol\n -Wsystem-headers  -Wtrigraphs  -Wundef  -Wuninitialized @gol\n--Wunknown-pragmas  -Wunreachable-code @gol\n+-Wunknown-pragmas  -Wno-pragmas -Wunreachable-code @gol\n -Wunused  -Wunused-function  -Wunused-label  -Wunused-parameter @gol\n -Wunused-value  -Wunused-variable  -Wwrite-strings @gol\n -Wvariadic-macros}\n@@ -2709,6 +2709,13 @@ GCC@.  If this command line option is used, warnings will even be issued\n for unknown pragmas in system header files.  This is not the case if\n the warnings were only enabled by the @option{-Wall} command line option.\n \n+@item -Wno-pragmas\n+@opindex Wno-pragmas\n+@opindex Wpragmas\n+Do not warn about misuses of pragmas, such as incorrect parameters,\n+invalid syntax, or conflicts between pragmas.  See also\n+@samp{-Wunknown-pragmas}.\n+\n @item -Wstrict-aliasing\n @opindex Wstrict-aliasing\n This option is only active when @option{-fstrict-aliasing} is active."}, {"sha": "5fefa07164412065be45467da307091ca3fdc489", "filename": "gcc/errors.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Ferrors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Ferrors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.h?ref=b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "patch": "@@ -30,6 +30,10 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #ifndef GCC_ERRORS_H\n #define GCC_ERRORS_H\n \n+/* The first parameter is for compatibility with the non-generator\n+   version of warning().  For those, you'd pass an OPT_W* value from\n+   options.h, but in generator programs it has no effect, so it's OK\n+   to just pass zero for calls from generator-only files.  */\n extern void warning (int, const char *, ...) ATTRIBUTE_PRINTF_2;\n extern void error (const char *, ...) ATTRIBUTE_PRINTF_1;\n extern void fatal (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF_1;"}, {"sha": "38f56a607e29edba63dd0e08f631f85644508c0f", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "patch": "@@ -4315,7 +4315,7 @@ do_warn_unused_parameter (tree fn)\n        decl; decl = TREE_CHAIN (decl))\n     if (!TREE_USED (decl) && TREE_CODE (decl) == PARM_DECL\n \t&& DECL_NAME (decl) && !DECL_ARTIFICIAL (decl))\n-      warning (0, \"unused parameter %q+D\", decl);\n+      warning (OPT_Wunused_parameter, \"unused parameter %q+D\", decl);\n }\n \n static GTY(()) rtx initial_trampoline;"}, {"sha": "45797b133816f70d486ce4f18c15de1262d7716d", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=b9b8dde3026d1e54c5bb2c8fa331a7bfd84b671d", "patch": "@@ -57,6 +57,7 @@ extern void _fatal_insn (const char *, rtx, const char *, int, const char *)\n extern void internal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n extern void warning0 (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+/* Pass one of the OPT_W* from options.h as the first parameter.  */\n extern void warning (int, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)"}]}