{"sha": "f742538d13375aa90ccaa787b06e07835bba5887", "node_id": "C_kwDOANBUbNoAKGY3NDI1MzhkMTMzNzVhYTkwY2NhYTc4N2IwNmUwNzgzNWJiYTU4ODc", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-26T09:52:12Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-29T16:18:54Z"}, "message": "unsafe: Report errors on calls to unsafe or extern functions and methods", "tree": {"sha": "e2faec377641b1cadb98f4941339a6d6c38a4c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2faec377641b1cadb98f4941339a6d6c38a4c17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f742538d13375aa90ccaa787b06e07835bba5887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f742538d13375aa90ccaa787b06e07835bba5887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f742538d13375aa90ccaa787b06e07835bba5887", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f742538d13375aa90ccaa787b06e07835bba5887/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b38dee3d3808d43d5c25dba30259462eed93b2c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b38dee3d3808d43d5c25dba30259462eed93b2c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b38dee3d3808d43d5c25dba30259462eed93b2c0"}], "stats": {"total": 132, "additions": 131, "deletions": 1}, "files": [{"sha": "174901f04492ad05f2b3b7670936972e3e46e904", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 86, "deletions": 1, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f742538d13375aa90ccaa787b06e07835bba5887/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f742538d13375aa90ccaa787b06e07835bba5887/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=f742538d13375aa90ccaa787b06e07835bba5887", "patch": "@@ -69,6 +69,7 @@ UnsafeChecker::check_use_of_static (HirId node_id, Location locus)\n     return;\n \n   auto maybe_static_mut = mappings.lookup_hir_item (node_id);\n+\n   HirId extern_block;\n   auto maybe_extern_static\n     = mappings.lookup_hir_extern_item (node_id, &extern_block);\n@@ -81,6 +82,52 @@ UnsafeChecker::check_use_of_static (HirId node_id, Location locus)\n \t\t\t locus);\n }\n \n+static void\n+check_unsafe_call (HIR::Function *fn, Location locus, const std::string &kind)\n+{\n+  if (fn->get_qualifiers ().is_unsafe ())\n+    rust_error_at (locus, \"call to unsafe %s requires unsafe function or block\",\n+\t\t   kind.c_str ());\n+}\n+\n+static void\n+check_extern_call (HIR::ExternalItem *maybe_fn, HIR::ExternBlock *parent_block,\n+\t\t   Location locus)\n+{\n+  // We have multiple operations to perform here\n+  //     1. Is the item an actual function we're calling\n+  //     2. Is the block it's defined in an FFI block or an `extern crate` block\n+  //\n+  // It is not unsafe to call into other crates, so items defined in an `extern\n+  // crate` must be callable without being in an unsafe context. On the other\n+  // hand, any function defined in a block with a specific ABI (even `extern\n+  // \"Rust\"` blocks) is unsafe to call\n+\n+  if (maybe_fn->get_extern_kind () == ExternalItem::ExternKind::Function)\n+    rust_error_at (locus,\n+\t\t   \"call to extern function requires unsafe function or block\");\n+}\n+\n+void\n+UnsafeChecker::check_function_call (HirId node_id, Location locus)\n+{\n+  if (unsafe_context.is_in_context ())\n+    return;\n+\n+  HirId parent_extern_block;\n+  auto maybe_fn = mappings.lookup_hir_item (node_id);\n+  auto maybe_extern\n+    = mappings.lookup_hir_extern_item (node_id, &parent_extern_block);\n+\n+  if (maybe_fn && maybe_fn->get_item_kind () == Item::ItemKind::Function)\n+    check_unsafe_call (static_cast<Function *> (maybe_fn), locus, \"function\");\n+\n+  if (maybe_extern)\n+    check_extern_call (static_cast<ExternalItem *> (maybe_extern),\n+\t\t       mappings.lookup_hir_extern_block (parent_extern_block),\n+\t\t       locus);\n+}\n+\n void\n UnsafeChecker::visit (IdentifierExpr &ident_expr)\n {\n@@ -299,14 +346,52 @@ UnsafeChecker::visit (StructExprStructBase &expr)\n void\n UnsafeChecker::visit (CallExpr &expr)\n {\n+  auto fn = expr.get_fnexpr ();\n+  if (!fn)\n+    return;\n+\n+  NodeId ast_node_id = fn->get_mappings ().get_nodeid ();\n+  NodeId ref_node_id;\n+  HirId definition_id;\n+\n+  // There are no unsafe types, and functions are defined in the name resolver.\n+  // If we can't find the name, then we're dealing with a type and should return\n+  // early.\n+  if (!resolver.lookup_resolved_name (ast_node_id, &ref_node_id))\n+    return;\n+\n+  rust_assert (mappings.lookup_node_to_hir (ref_node_id, &definition_id));\n+\n+  // At this point we have the function's HIR Id. There are two checks we\n+  // must perform:\n+  //     1. The function is an unsafe one\n+  //     2. The function is an extern one\n+  check_function_call (definition_id, expr.get_locus ());\n+\n   if (expr.has_params ())\n     for (auto &arg : expr.get_arguments ())\n       arg->accept_vis (*this);\n }\n \n void\n UnsafeChecker::visit (MethodCallExpr &expr)\n-{}\n+{\n+  TyTy::BaseType *method_type;\n+  context.lookup_type (expr.get_method_name ().get_mappings ().get_hirid (),\n+\t\t       &method_type);\n+\n+  auto fn = *static_cast<TyTy::FnType *> (method_type);\n+  auto method = mappings.lookup_hir_implitem (fn.get_ref (), nullptr);\n+\n+  if (!unsafe_context.is_in_context () && method)\n+    check_unsafe_call (static_cast<Function *> (method), expr.get_locus (),\n+\t\t       \"method\");\n+\n+  expr.get_receiver ()->accept_vis (*this);\n+\n+  for (auto &arg : expr.get_arguments ())\n+    arg->accept_vis (*this);\n+}\n \n void\n UnsafeChecker::visit (FieldAccessExpr &expr)"}, {"sha": "087bdb77b56a9115f9b43093e5764f33eb1a3c7b", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f742538d13375aa90ccaa787b06e07835bba5887/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f742538d13375aa90ccaa787b06e07835bba5887/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=f742538d13375aa90ccaa787b06e07835bba5887", "patch": "@@ -40,7 +40,14 @@ class UnsafeChecker : public HIRFullVisitor\n    */\n   void check_use_of_static (HirId node_id, Location locus);\n \n+  /**\n+   * Check if a call to an unsafe or external function is outside of an unsafe\n+   * context\n+   */\n+  void check_function_call (HirId node_id, Location locus);\n+\n   StackedContexts<HirId> unsafe_context;\n+\n   Resolver::TypeCheckContext &context;\n   Resolver::Resolver &resolver;\n   Analysis::Mappings &mappings;"}, {"sha": "cf4b75456e4d5dc4055614f2d89c957530b204f5", "filename": "gcc/testsuite/rust/compile/unsafe6.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f742538d13375aa90ccaa787b06e07835bba5887/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f742538d13375aa90ccaa787b06e07835bba5887/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe6.rs?ref=f742538d13375aa90ccaa787b06e07835bba5887", "patch": "@@ -0,0 +1,14 @@\n+unsafe fn foo() {}\n+unsafe fn bar() {\n+    foo();\n+}\n+\n+fn main() {\n+    foo(); // { dg-error \"call to unsafe function\" }\n+    bar(); // { dg-error \"call to unsafe function\" }\n+\n+    unsafe {\n+        foo();\n+        bar();\n+    }\n+}"}, {"sha": "a6b69e1ac37505310a934b2b1c22f27ee9503ac3", "filename": "gcc/testsuite/rust/compile/unsafe7.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f742538d13375aa90ccaa787b06e07835bba5887/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f742538d13375aa90ccaa787b06e07835bba5887/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe7.rs?ref=f742538d13375aa90ccaa787b06e07835bba5887", "patch": "@@ -0,0 +1,9 @@\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn main() {\n+    let s = \"hey\\0\";\n+\n+    printf(s as *const str as *const i8); // { dg-error \"call to extern function\" }\n+}"}, {"sha": "03fe4910c979cc9c0b96e546fe8eb3dab110fdfe", "filename": "gcc/testsuite/rust/compile/unsafe8.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f742538d13375aa90ccaa787b06e07835bba5887/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f742538d13375aa90ccaa787b06e07835bba5887/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe8.rs?ref=f742538d13375aa90ccaa787b06e07835bba5887", "patch": "@@ -0,0 +1,14 @@\n+struct S;\n+\n+impl S {\n+    unsafe fn foo(self) {}\n+}\n+\n+fn main() {\n+    let s = S;\n+    s.foo(); // { dg-error \"call to unsafe method\" }\n+\n+    unsafe {\n+        s.foo();\n+    }\n+}"}, {"sha": "5bd4926def85a07ab7e450454d8635ab11f2c9ec", "filename": "gcc/testsuite/rust/link/simple_function_0.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f742538d13375aa90ccaa787b06e07835bba5887/gcc%2Ftestsuite%2Frust%2Flink%2Fsimple_function_0.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f742538d13375aa90ccaa787b06e07835bba5887/gcc%2Ftestsuite%2Frust%2Flink%2Fsimple_function_0.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Flink%2Fsimple_function_0.rs?ref=f742538d13375aa90ccaa787b06e07835bba5887", "patch": "@@ -3,5 +3,6 @@ use simple_function_1::test_func;\n \n fn main() -> i32 {\n     let a = test_func(123);\n+    // { dg-bogus \"call to extern function\" \"\" { xfail *-*-* } .-1 }\n     a - 124\n }"}]}