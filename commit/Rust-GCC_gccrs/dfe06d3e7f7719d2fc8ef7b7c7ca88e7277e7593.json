{"sha": "dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZlMDZkM2U3Zjc3MTlkMmZjOGVmN2I3YzdjYTg4ZTcyNzdlNzU5Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-11-12T15:51:34Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-11-12T15:51:34Z"}, "message": "Initial asan cleanups\n\nThis patch defines a new asan_shadow_offset target macro, instead of\nhaving a mere macro in the asan.c file.  It becomes thus cleaner to\ndefine the target macro for targets that supports asan, namely x86 for\nnow.  The ASAN_SHADOW_SHIFT (which, along with the asan_shadow_offset\nconstant, is used to compute the address of the shadow memory byte for\na given memory address) is defined in asan.h.\n\ngcc/ChangeLog\n\n\t* toplev.c (process_options): Warn and turn off\n\t-faddress-sanitizer if not supported by target.\n\t* asan.c: Include target.h.\n\t(asan_scale, asan_offset_log_32, asan_offset_log_64,\n\tasan_offset_log): Removed.\n\t(build_check_stmt): Use ASAN_SHADOW_SHIFT and\n\ttargetm.asan_shadow_offset ().\n\t(asan_instrument): Don't initialize asan_offset_log.\n\t* asan.h (ASAN_SHADOW_SHIFT): Define.\n\t* target.def (TARGET_ASAN_SHADOW_OFFSET): New hook.\n\t* doc/tm.texi.in (TARGET_ASAN_SHADOW_OFFSET): Add it.\n\t* doc/tm.texi: Regenerated.\n\t* Makefile.in (asan.o): Depend on $(TARGET_H).\n\t* config/i386/i386.c (ix86_asan_shadow_offset): New function.\n\t(TARGET_ASAN_SHADOW_OFFSET): Define.\n\nFrom-SVN: r193433", "tree": {"sha": "4f0f7a2a85c05539f589338ab08d8fab607d18d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f0f7a2a85c05539f589338ab08d8fab607d18d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37d6f666cae62d9d44c5aef4b2185e43635d5091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d6f666cae62d9d44c5aef4b2185e43635d5091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d6f666cae62d9d44c5aef4b2185e43635d5091"}], "stats": {"total": 88, "additions": 67, "deletions": 21}, "files": [{"sha": "90607906312fb2ae60b9ab335d51609d09dd14d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593", "patch": "@@ -1,3 +1,21 @@\n+2012-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* toplev.c (process_options): Warn and turn off\n+\t-faddress-sanitizer if not supported by target.\n+\t* asan.c: Include target.h.\n+\t(asan_scale, asan_offset_log_32, asan_offset_log_64,\n+\tasan_offset_log): Removed.\n+\t(build_check_stmt): Use ASAN_SHADOW_SHIFT and\n+\ttargetm.asan_shadow_offset ().\n+\t(asan_instrument): Don't initialize asan_offset_log.\n+\t* asan.h (ASAN_SHADOW_SHIFT): Define.\n+\t* target.def (TARGET_ASAN_SHADOW_OFFSET): New hook.\n+\t* doc/tm.texi.in (TARGET_ASAN_SHADOW_OFFSET): Add it.\n+\t* doc/tm.texi: Regenerated.\n+\t* Makefile.in (asan.o): Depend on $(TARGET_H).\n+\t* config/i386/i386.c (ix86_asan_shadow_offset): New function.\n+\t(TARGET_ASAN_SHADOW_OFFSET): Define.\n+\n 2012-11-12  Wei Mi <wmi@google.com>\n \t    Diego Novillo <dnovillo@google.com>\n \t    Dodji Seketeli <dodji@redhat.com>"}, {"sha": "469c72f168b9aab96333da82a164ec9d9a62709f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593", "patch": "@@ -2211,7 +2211,7 @@ stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n asan.o : asan.c asan.h $(CONFIG_H) pointer-set.h \\\n    $(SYSTEM_H) $(TREE_H) $(GIMPLE_H) \\\n    output.h $(DIAGNOSTIC_H) coretypes.h $(TREE_DUMP_H) $(FLAGS_H) \\\n-   tree-pretty-print.h\n+   tree-pretty-print.h $(TARGET_H)\n tree-ssa-tail-merge.o: tree-ssa-tail-merge.c \\\n    $(SYSTEM_H) $(CONFIG_H) coretypes.h $(TM_H) $(BITMAP_H) \\\n    $(FLAGS_H) $(TM_P_H) $(BASIC_BLOCK_H) \\"}, {"sha": "9655b118bff1644a39ccbe44f785da890a95c65d", "filename": "gcc/asan.c", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593", "patch": "@@ -1,5 +1,5 @@\n /* AddressSanitizer, a fast memory error detector.\n-   Copyright (C) 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2012 Free Software Foundation, Inc.\n    Contributed by Kostya Serebryany <kcc@google.com>\n \n This file is part of GCC.\n@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"asan.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"target.h\"\n \n /*\n  AddressSanitizer finds out-of-bounds and use-after-free bugs \n@@ -78,15 +79,6 @@ along with GCC; see the file COPYING3.  If not see\n  to create redzones for stack and global object and poison them.\n */\n \n-/* The shadow address is computed as (X>>asan_scale) + (1<<asan_offset_log).\n- We may want to add command line flags to change these values.  */\n-\n-static const int asan_scale = 3;\n-static const int asan_offset_log_32 = 29;\n-static const int asan_offset_log_64 = 44;\n-static int asan_offset_log;\n-\n-\n /* Construct a function tree for __asan_report_{load,store}{1,2,4,8,16}.\n    IS_STORE is either 1 (for a store) or 0 (for a load).\n    SIZE_IN_BYTES is one of 1, 2, 4, 8, 16.  */\n@@ -202,15 +194,13 @@ build_check_stmt (tree base,\n   gimple_set_location (g, location);\n   gimple_seq_add_stmt (&seq, g);\n \n-  /* Build (base_addr >> asan_scale) + (1 << asan_offset_log).  */\n+  /* Build\n+     (base_addr >> ASAN_SHADOW_SHIFT) | targetm.asan_shadow_offset ().  */\n \n   t = build2 (RSHIFT_EXPR, uintptr_type, base_addr,\n-              build_int_cst (uintptr_type, asan_scale));\n+\t      build_int_cst (uintptr_type, ASAN_SHADOW_SHIFT));\n   t = build2 (PLUS_EXPR, uintptr_type, t,\n-              build2 (LSHIFT_EXPR, uintptr_type,\n-                      build_int_cst (uintptr_type, 1),\n-                      build_int_cst (uintptr_type, asan_offset_log)\n-                     ));\n+\t      build_int_cst (uintptr_type, targetm.asan_shadow_offset ()));\n   t = build1 (INDIRECT_REF, shadow_type,\n               build1 (VIEW_CONVERT_EXPR, shadow_ptr_type, t));\n   t = force_gimple_operand (t, &stmts, false, NULL_TREE);\n@@ -367,9 +357,6 @@ static unsigned int\n asan_instrument (void)\n {\n   struct gimplify_ctx gctx;\n-  tree uintptr_type = lang_hooks.types.type_for_mode (ptr_mode, true);\n-  int is_64 = tree_low_cst (TYPE_SIZE (uintptr_type), 0) == 64;\n-  asan_offset_log = is_64 ? asan_offset_log_64 : asan_offset_log_32;\n   push_gimplify_context (&gctx);\n   transform_statements ();\n   pop_gimplify_context (NULL);"}, {"sha": "699820b852c00e41226d331a9af651ddec632365", "filename": "gcc/asan.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593", "patch": "@@ -1,5 +1,5 @@\n /* AddressSanitizer, a fast memory error detector.\n-   Copyright (C) 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Kostya Serebryany <kcc@google.com>\n \n This file is part of GCC.\n@@ -23,4 +23,8 @@ along with GCC; see the file COPYING3.  If not see\n \n extern void asan_finish_file(void);\n \n+/* Shadow memory is found at\n+   (address >> ASAN_SHADOW_SHIFT) | targetm.asan_shadow_offset ().  */\n+#define ASAN_SHADOW_SHIFT\t3\n+\n #endif /* TREE_ASAN */"}, {"sha": "6da59814edb33f4efe4cea89572015ba21f19214", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593", "patch": "@@ -5186,6 +5186,14 @@ ix86_legitimate_combined_insn (rtx insn)\n   return true;\n }\n \f\n+/* Implement the TARGET_ASAN_SHADOW_OFFSET hook.  */\n+\n+static unsigned HOST_WIDE_INT\n+ix86_asan_shadow_offset (void)\n+{\n+  return (unsigned HOST_WIDE_INT) 1 << (TARGET_LP64 ? 44 : 29);\n+}\n+\f\n /* Argument support functions.  */\n \n /* Return true when register may be used to pass function parameters.  */\n@@ -42012,6 +42020,9 @@ ix86_memmodel_check (unsigned HOST_WIDE_INT val)\n #undef TARGET_LEGITIMATE_COMBINED_INSN\n #define TARGET_LEGITIMATE_COMBINED_INSN ix86_legitimate_combined_insn\n \n+#undef TARGET_ASAN_SHADOW_OFFSET\n+#define TARGET_ASAN_SHADOW_OFFSET ix86_asan_shadow_offset\n+\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR ix86_gimplify_va_arg\n "}, {"sha": "eeb3f083a9bf1bef56ba10d6fe390a24e9297679", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593", "patch": "@@ -11357,6 +11357,12 @@ MIPS, where add-immediate takes a 16-bit signed value,\n is zero, which disables this optimization.\n @end deftypevr\n \n+@deftypefn {Target Hook} {unsigned HOST_WIDE_INT} TARGET_ASAN_SHADOW_OFFSET (void)\n+Return the offset bitwise ored into shifted address to get corresponding\n+Address Sanitizer shadow memory address.  NULL if Address Sanitizer is not\n+supported by the target.\n+@end deftypefn\n+\n @deftypefn {Target Hook} {unsigned HOST_WIDE_INT} TARGET_MEMMODEL_CHECK (unsigned HOST_WIDE_INT @var{val})\n Validate target specific memory model mask bits. When NULL no target specific\n memory model bits are allowed."}, {"sha": "2c9cb1045e70ebf9951bbf5213cbb79c299d5edd", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593", "patch": "@@ -11199,6 +11199,8 @@ MIPS, where add-immediate takes a 16-bit signed value,\n is zero, which disables this optimization.\n @end deftypevr\n \n+@hook TARGET_ASAN_SHADOW_OFFSET\n+\n @hook TARGET_MEMMODEL_CHECK\n Validate target specific memory model mask bits. When NULL no target specific\n memory model bits are allowed."}, {"sha": "6d00262d68ca8cca99e64ef72f8d08be047736a7", "filename": "gcc/target.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593", "patch": "@@ -2056,6 +2056,17 @@ DEFHOOK\n  \"\",\n  unsigned HOST_WIDE_INT, (unsigned HOST_WIDE_INT val), NULL)\n \n+/* Defines an offset bitwise ored into shifted address to get corresponding\n+   Address Sanitizer shadow address, or -1 if Address Sanitizer is not\n+   supported by the target.  */\n+DEFHOOK\n+(asan_shadow_offset,\n+ \"Return the offset bitwise ored into shifted address to get corresponding\\n\\\n+Address Sanitizer shadow memory address.  NULL if Address Sanitizer is not\\n\\\n+supported by the target.\",\n+ unsigned HOST_WIDE_INT, (void),\n+ NULL)\n+\n /* Functions relating to calls - argument passing, returns, etc.  */\n /* Members of struct call have no special macro prefix.  */\n HOOK_VECTOR (TARGET_CALLS, calls)"}, {"sha": "d9dfb2a574e5fc61061a9188029d2ecb40bf53b4", "filename": "gcc/toplev.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=dfe06d3e7f7719d2fc8ef7b7c7ca88e7277e7593", "patch": "@@ -1541,6 +1541,13 @@ process_options (void)\n       flag_omit_frame_pointer = 0;\n     }\n \n+  /* Address Sanitizer needs porting to each target architecture.  */\n+  if (flag_asan && targetm.asan_shadow_offset == NULL)\n+    {\n+      warning (0, \"-faddress-sanitizer not supported for this target\");\n+      flag_asan = 0;\n+    }\n+\n   /* Enable -Werror=coverage-mismatch when -Werror and -Wno-error\n      have not been set.  */\n   if (!global_options_set.x_warnings_are_errors"}]}