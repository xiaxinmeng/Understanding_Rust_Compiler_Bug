{"sha": "6c849e2fab3f682b715a81cb4ccc792f20c00eeb", "node_id": "C_kwDOANBUbNoAKDZjODQ5ZTJmYWIzZjY4MmI3MTVhODFjYjRjY2M3OTJmMjBjMDBlZWI", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-06-16T16:44:33Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-06-16T18:16:19Z"}, "message": "Clear invariant bit for inferred ranges.\n\nThe range of an invariant SSA (no outgoing edge range anywhere) is not tracked.\nIf an inferred range is registered, remove the invariant flag.\n\n\t* gimple-range-cache.cc (ranger_cache::apply_inferred_ranges): If name\n\twas invaraint before, clear the invariant bit.\n\t* gimple-range-gori.cc (gori_map::set_range_invariant): Add a flag.\n\t* gimple-range-gori.h (gori_map::set_range_invariant): Adjust prototype.", "tree": {"sha": "380e12d8d882a331c72e8962d1c04732d5247cc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/380e12d8d882a331c72e8962d1c04732d5247cc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c849e2fab3f682b715a81cb4ccc792f20c00eeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c849e2fab3f682b715a81cb4ccc792f20c00eeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c849e2fab3f682b715a81cb4ccc792f20c00eeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c849e2fab3f682b715a81cb4ccc792f20c00eeb/comments", "author": null, "committer": null, "parents": [{"sha": "5b1594dc2d053803ae98ae39f76fbd71f35cb657", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b1594dc2d053803ae98ae39f76fbd71f35cb657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b1594dc2d053803ae98ae39f76fbd71f35cb657"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "5df744184c4c5c0eff2e40eed83cedf7531c115e", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c849e2fab3f682b715a81cb4ccc792f20c00eeb/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c849e2fab3f682b715a81cb4ccc792f20c00eeb/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=6c849e2fab3f682b715a81cb4ccc792f20c00eeb", "patch": "@@ -1474,7 +1474,12 @@ ranger_cache::apply_inferred_ranges (gimple *s)\n \t  if (!m_on_entry.get_bb_range (r, name, bb))\n \t    exit_range (r, name, bb, RFD_READ_ONLY);\n \t  if (r.intersect (infer.range (x)))\n-\t    m_on_entry.set_bb_range (name, bb, r);\n+\t    {\n+\t      m_on_entry.set_bb_range (name, bb, r);\n+\t      // If this range was invariant before, remove invariance.\n+\t      if (!m_gori.has_edge_range_p (name))\n+\t\tm_gori.set_range_invariant (name, false);\n+\t    }\n \t}\n     }\n }"}, {"sha": "a43e44c841e9152629c79f0811581a3937f90670", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c849e2fab3f682b715a81cb4ccc792f20c00eeb/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c849e2fab3f682b715a81cb4ccc792f20c00eeb/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=6c849e2fab3f682b715a81cb4ccc792f20c00eeb", "patch": "@@ -499,12 +499,16 @@ gori_map::is_export_p (tree name, basic_block bb)\n   return bitmap_bit_p (exports (bb), SSA_NAME_VERSION (name));\n }\n \n-// Clear the m_maybe_variant bit so ranges will not be tracked for NAME.\n+// Set or clear the m_maybe_variant bit to determine if ranges will be tracked\n+// for NAME.  A clear bit means they will NOT be tracked.\n \n void\n-gori_map::set_range_invariant (tree name)\n+gori_map::set_range_invariant (tree name, bool invariant)\n {\n-  bitmap_clear_bit (m_maybe_variant, SSA_NAME_VERSION (name));\n+  if (invariant)\n+    bitmap_clear_bit (m_maybe_variant, SSA_NAME_VERSION (name));\n+  else\n+    bitmap_set_bit (m_maybe_variant, SSA_NAME_VERSION (name));\n }\n \n // Return true if NAME is an import to block BB."}, {"sha": "3d57ab94624d44a4f35e630078c040f22accf9a5", "filename": "gcc/gimple-range-gori.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c849e2fab3f682b715a81cb4ccc792f20c00eeb/gcc%2Fgimple-range-gori.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c849e2fab3f682b715a81cb4ccc792f20c00eeb/gcc%2Fgimple-range-gori.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.h?ref=6c849e2fab3f682b715a81cb4ccc792f20c00eeb", "patch": "@@ -94,7 +94,7 @@ class gori_map : public range_def_chain\n   bool is_import_p (tree name, basic_block bb);\n   bitmap exports (basic_block bb);\n   bitmap imports (basic_block bb);\n-  void set_range_invariant (tree name);\n+  void set_range_invariant (tree name, bool invariant = true);\n \n   void dump (FILE *f);\n   void dump (FILE *f, basic_block bb, bool verbose = true);"}]}