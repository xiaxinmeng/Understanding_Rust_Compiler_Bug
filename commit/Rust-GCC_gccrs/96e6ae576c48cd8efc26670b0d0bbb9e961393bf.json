{"sha": "96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZlNmFlNTc2YzQ4Y2Q4ZWZjMjY2NzBiMGQwYmJiOWU5NjEzOTNiZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-08-15T18:09:35Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-08-15T18:09:35Z"}, "message": "diagnostics: add labeling of source ranges\n\nThis patch adds the ability to label source ranges within a rich_location,\nto be printed by diagnostic_show_locus.\n\nFor example:\n\npr69554-1.c:11:18: error: invalid operands to binary + (have 'const char *' and 'const char *')\n11 |   return (p + 1) + (q + 1);\n   |          ~~~~~~~ ^ ~~~~~~~\n   |             |         |\n   |             |         const char *\n   |             const char *\n\nThe patch implements labels for various type mismatch errors in the C and\nC++ frontends, and in -Wformat.  I implemented it wherever accurate location\ninformation was guaranteed (there are other places that could benefit, but\nwe need better location information in those places).\n\nThe labels can be disabled via -fno-diagnostics-show-labels.\n\nSimilarly:\n\nparam-type-mismatch.C: In function 'int test_1(int, int, float)':\nparam-type-mismatch.C:11:27: error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n11 |   return callee_1 (first, second, third);\n   |                           ^~~~~~\n   |                           |\n   |                           int\nparam-type-mismatch.C:7:43: note:   initializing argument 2 of 'int callee_1(int, const char*, float)'\n7 | extern int callee_1 (int one, const char *two, float three);\n  |                               ~~~~~~~~~~~~^~~\n\nwhere the first \"error\" describing the bad argument gets a label\ndescribing the type inline (since it's non-obvious from \"second\").\nThe \"note\" describing the type of the param of the callee *doesn't*\nget a label, since that information is explicit there in the\nsource (\"const char *two\").\n\nThe idea is that in any diagnostic where two aspects of the source aren't\nin sync it ought to be easier for the user if we directly show them the\nmismatching aspects inline (e.g. types).\n\nAs well as type mismatch errors, perhaps labels could also be used for\nbuffer overflow warnings, for describing the capacity of the destination\nbuffer vs the size of what's being written:\n\n  sprintf (buf, \"filename: %s\\n\", file);\n           ^~~   ~~~~~~~~~~~^~~\n           |                |\n           capacity: 32     10 + strlen(file) + 2\n\nor somesuch.  Another idea might be for macro expansion warnings:\n\nwarning: repeated side effects in macro expansion...\n   x = MIN (p++, q++);\n       ~~~~^~~~~~~~~~\nnote: ...expanded here as\n #define MIN(X,Y) (X<Y?X:Y)\n         ^~~ ~ ~   ~ ~ ~ ~\n             | |   | | | |\n             | |   | | | q++\n             | |   | | p++\n             | |   | q++\n             | q++ p++\n             p++\n\nThe patch removes some logic from multiline.exp which special-cased\nlines ending with a '|' character (thus complicating testing of this\npatch).  I believe that this was a vestige from experiments I did to\nsupport strippng dg directives from the output; it was present in the\nearliest version of multiline.exp I posted:\n  \"[RFC, stage1] Richer source location information for gcc 6 (location ranges etc)\"\n    https://gcc.gnu.org/ml/gcc-patches/2015-03/msg00837.html\nand I believe was neved used.\n\ngcc/c-family/ChangeLog:\n\t* c-format.c: Include \"selftest-diagnostic.h\" and\n\t\"gcc-rich-location.h\".\n\t(format_warning_at_char): Pass NULL for new label params of\n\tformat_warning_va.\n\t(class indirection_suffix): New class.\n\t(class range_label_for_format_type_mismatch): New class.\n\t(format_type_warning): Move logic for generating \"*\" suffix to\n\tclass indirection_suffix.  Create \"fmt_label\" and \"param_label\"\n\tto show their types, and pass them to the\n\tformat_warning_at_substring calls.\n\t(selftest::test_type_mismatch_range_labels): New test.\n\t(selftest::c_format_c_tests): Call it.\n\ngcc/c/ChangeLog:\n\t* c-objc-common.c: Include \"gcc-rich-location.h\".\n\t(c_tree_printer): Move implemenation of '%T' to...\n\t(print_type): ...this new function.\n\t(range_label_for_type_mismatch::get_text): New function.\n\t* c-typeck.c (convert_for_assignment): Add type labels to the rhs\n\trange for the various ic_argpass cases.\n\t(class maybe_range_label_for_tree_type_mismatch): New class.\n\t(build_binary_op): Use it when calling binary_op_error.\n\ngcc/cp/ChangeLog:\n\t* call.c: Include \"gcc-rich-location.h\".\n\t(convert_like_real): Add range label for \"invalid conversion\"\n\tdiagnostic.\n\t(perform_implicit_conversion_flags): Add type label to the\n\t\"could not convert\" error.\n\t* error.c: Include \"gcc-rich-location.h\".\n\t(range_label_for_type_mismatch::get_text): New function.\n\t* typeck.c (convert_for_assignment): Add type label to\n\tthe \"cannot convert\" error if a location is available.\n\ngcc/ChangeLog:\n\t* common.opt (fdiagnostics-show-labels): New option.\n\t* diagnostic-show-locus.c (class layout_range): Add field\n\t\"m_label\".\n\t(class layout): Add field \"m_show_labels_p\".\n\t(layout_range::layout_range): Add param \"label\" and use it to\n\tinitialize m_label.\n\t(make_range): Pass in NULL for new \"label\" param of layout_range's\n\tctor.\n\t(layout::layout): Initialize m_show_labels_p.\n\t(layout::maybe_add_location_range): Pass in loc_range->m_label\n\twhen constructing layout_range instances.\n\t(struct line_label): New struct.\n\t(layout::print_any_labels): New member function.\n\t(layout::print_line): Call it if label-printing is enabled.\n\t(selftest::test_one_liner_labels): New test.\n\t(selftest::test_diagnostic_show_locus_one_liner): Call it.\n\t* diagnostic.c (diagnostic_initialize): Initialize\n\tcontext->show_labels_p.\n\t* diagnostic.h (struct diagnostic_context): Add field\n\t\"show_labels_p\".\n\t* doc/invoke.texi (Diagnostic Message Formatting Options): Add\n\t-fno-diagnostics-show-labels.\n\t* dwarf2out.c (gen_producer_string): Add\n\tOPT_fdiagnostics_show_labels to the ignored options.\n\t* gcc-rich-location.c (gcc_rich_location::add_expr): Add \"label\"\n\tparam.\n\t(gcc_rich_location::maybe_add_expr): Likewise.\n\t* gcc-rich-location.h (gcc_rich_location::gcc_rich_location): Add\n\tlabel\" param, defaulting to NULL.\n\t(gcc_rich_location::add_expr): Add \"label\" param.\n\t(gcc_rich_location::maybe_add_expr): Likewise.\n\t(class text_range_label): New class.\n\t(class range_label_for_type_mismatch): New class.\n\t* gimple-ssa-sprintf.c (fmtwarn): Pass NULL for new label params\n\tof format_warning_va.\n\t(fmtwarn_n): Likewise for new params of format_warning_n_va.\n\t* lto-wrapper.c (merge_and_complain): Add\n\tOPT_fdiagnostics_show_labels to the \"pick one setting\" options.\n\t(append_compiler_options): Likewise to the dropped options.\n\t(append_diag_options): Likewise to the passed-on options.\n\t* opts.c (common_handle_option): Handle the new option.\n\t* selftest-diagnostic.c\n\t(test_diagnostic_context::test_diagnostic_context): Enable\n\tshow_labels_p.\n\t* substring-locations.c: Include \"gcc-rich-location.h\".\n\t(format_warning_n_va): Add \"fmt_label\" and \"param_label\" params\n\tand use them as appropriate.\n\t(format_warning_va): Add \"fmt_label\" and \"param_label\" params,\n\tpassing them on to format_warning_n_va.\n\t(format_warning_at_substring): Likewise.\n\t(format_warning_at_substring_n): Likewise.\n\t* substring-locations.h (format_warning_va): Add \"fmt_label\" and\n\t\"param_label\" params.\n\t(format_warning_n_va): Likewise.\n\t(format_warning_at_substring): Likewise.\n\t(format_warning_at_substring_n): Likewise.\n\t* toplev.c (general_init): Initialize global_dc->show_labels_p.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/diagnostic/aka3.C: New test.\n\t* g++.dg/diagnostic/param-type-mismatch-2.C: Update expected\n\toutput to show range labels.\n\t* g++.dg/diagnostic/param-type-mismatch.C: Likewise.\n\t* g++.dg/plugin/plugin.exp (plugin_test_list): Add...\n\t* g++.dg/plugin/show-template-tree-color-labels.C: New test.\n\t* gcc.dg/bad-binary-ops.c: Update expected output to show range\n\tlabels.  Add an \"aka\" example.\n\t* gcc.dg/cpp/pr66415-1.c: Update expected output to show range\n\tlabels.\n\t* gcc.dg/format/diagnostic-ranges.c: Likewise.\n\t* gcc.dg/format/pr72858.c: Likewise.\n\t* gcc.dg/format/pr78498.c: Likewise.\n\t* gcc.dg/param-type-mismatch.c: Add \"-Wpointer-sign\" to options.\n\tUpdate expected output to show range labels.  Add examples of\n\t-Wincompatible-pointer-types and -Wpointer-sign for parameters.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-bw-line-numbers.c:\n\tUpdate expected output to show range labels.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-bw.c: Likewise.\n\t(test_very_wide_line): Adjust so that label is at left-clipping\n\tboundary.\n\t(test_very_wide_line_2): New test.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-color-line-numbers.c:\n\tUpdate expected output to show range labels.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-color.c: Likewise.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-no-labels.c: New test.\n\t* gcc.dg/plugin/diagnostic_plugin_show_trees.c (show_tree): Update\n\tfor new param to gcc_rich_location::add_expr.\n\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c (add_range):\n\tAdd \"label\" param.\n\t(test_show_locus): Add examples of labels to various tests.  Tweak\n\tthe \"very wide_line\" test case and duplicate it, to cover the\n\tboundary values for clipping of labels against the left-margin.\n\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add\n\tdiagnostic-test-show-locus-no-labels.c.\n\t* gcc.dg/pr69554-1.c: Update expected output to show range labels.\n\tUpdate line numbers of dg-locus directives.\n\t* gcc.dg/pr69627.c:  Update expected output to show range labels.\n\t* lib/multiline.exp (proc _build_multiline_regex): Remove\n\tspecial-case handling of lines with trailing '|'.\n\nlibcpp/ChangeLog:\n\t* include/line-map.h (struct location_range): Add \"m_label\" field.\n\t(class rich_location): Add description of labels to leading\n\tcomment.\n\t(rich_location::rich_location): Add \"label\" param, defaulting to\n\tNULL.\n\t(rich_location::add_range): Likewise.\n\t(struct label_text): New struct.\n\t(class range_label): New abstract base class.\n\t* line-map.c (rich_location::rich_location): Add \"label\" param;\n\tuse it.\n\t(rich_location::add_range): Likewise.\n\nFrom-SVN: r263564", "tree": {"sha": "3ac7b1d0a088c0fb8d1ae7fe7866fa06b3d3f232", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ac7b1d0a088c0fb8d1ae7fe7866fa06b3d3f232"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b99d7d976ba2475f038ea1406a1fb9a8fb6c4f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b99d7d976ba2475f038ea1406a1fb9a8fb6c4f5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b99d7d976ba2475f038ea1406a1fb9a8fb6c4f5a"}], "stats": {"total": 1831, "additions": 1637, "deletions": 194}, "files": [{"sha": "8ea97839c67357c1da42e150b49ccbcebdbcf969", "filename": "gcc/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -1,3 +1,63 @@\n+2018-08-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* common.opt (fdiagnostics-show-labels): New option.\n+\t* diagnostic-show-locus.c (class layout_range): Add field\n+\t\"m_label\".\n+\t(class layout): Add field \"m_show_labels_p\".\n+\t(layout_range::layout_range): Add param \"label\" and use it to\n+\tinitialize m_label.\n+\t(make_range): Pass in NULL for new \"label\" param of layout_range's\n+\tctor.\n+\t(layout::layout): Initialize m_show_labels_p.\n+\t(layout::maybe_add_location_range): Pass in loc_range->m_label\n+\twhen constructing layout_range instances.\n+\t(struct line_label): New struct.\n+\t(layout::print_any_labels): New member function.\n+\t(layout::print_line): Call it if label-printing is enabled.\n+\t(selftest::test_one_liner_labels): New test.\n+\t(selftest::test_diagnostic_show_locus_one_liner): Call it.\n+\t* diagnostic.c (diagnostic_initialize): Initialize\n+\tcontext->show_labels_p.\n+\t* diagnostic.h (struct diagnostic_context): Add field\n+\t\"show_labels_p\".\n+\t* doc/invoke.texi (Diagnostic Message Formatting Options): Add\n+\t-fno-diagnostics-show-labels.\n+\t* dwarf2out.c (gen_producer_string): Add\n+\tOPT_fdiagnostics_show_labels to the ignored options.\n+\t* gcc-rich-location.c (gcc_rich_location::add_expr): Add \"label\"\n+\tparam.\n+\t(gcc_rich_location::maybe_add_expr): Likewise.\n+\t* gcc-rich-location.h (gcc_rich_location::gcc_rich_location): Add\n+\tlabel\" param, defaulting to NULL.\n+\t(gcc_rich_location::add_expr): Add \"label\" param.\n+\t(gcc_rich_location::maybe_add_expr): Likewise.\n+\t(class text_range_label): New class.\n+\t(class range_label_for_type_mismatch): New class.\n+\t* gimple-ssa-sprintf.c (fmtwarn): Pass NULL for new label params\n+\tof format_warning_va.\n+\t(fmtwarn_n): Likewise for new params of format_warning_n_va.\n+\t* lto-wrapper.c (merge_and_complain): Add\n+\tOPT_fdiagnostics_show_labels to the \"pick one setting\" options.\n+\t(append_compiler_options): Likewise to the dropped options.\n+\t(append_diag_options): Likewise to the passed-on options.\n+\t* opts.c (common_handle_option): Handle the new option.\n+\t* selftest-diagnostic.c\n+\t(test_diagnostic_context::test_diagnostic_context): Enable\n+\tshow_labels_p.\n+\t* substring-locations.c: Include \"gcc-rich-location.h\".\n+\t(format_warning_n_va): Add \"fmt_label\" and \"param_label\" params\n+\tand use them as appropriate.\n+\t(format_warning_va): Add \"fmt_label\" and \"param_label\" params,\n+\tpassing them on to format_warning_n_va.\n+\t(format_warning_at_substring): Likewise.\n+\t(format_warning_at_substring_n): Likewise.\n+\t* substring-locations.h (format_warning_va): Add \"fmt_label\" and\n+\t\"param_label\" params.\n+\t(format_warning_n_va): Likewise.\n+\t(format_warning_at_substring): Likewise.\n+\t(format_warning_at_substring_n): Likewise.\n+\t* toplev.c (general_init): Initialize global_dc->show_labels_p.\n+\n 2018-08-15  Qing Zhao  <qing.zhao@oracle.com>\n \n \tPR testsuite/86519"}, {"sha": "b94a7ae9ab7ceb37100cd1111a1d645570aa746d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -1,3 +1,18 @@\n+2018-08-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-format.c: Include \"selftest-diagnostic.h\" and\n+\t\"gcc-rich-location.h\".\n+\t(format_warning_at_char): Pass NULL for new label params of\n+\tformat_warning_va.\n+\t(class indirection_suffix): New class.\n+\t(class range_label_for_format_type_mismatch): New class.\n+\t(format_type_warning): Move logic for generating \"*\" suffix to\n+\tclass indirection_suffix.  Create \"fmt_label\" and \"param_label\"\n+\tto show their types, and pass them to the\n+\tformat_warning_at_substring calls.\n+\t(selftest::test_type_mismatch_range_labels): New test.\n+\t(selftest::c_format_c_tests): Call it.\n+\n 2018-08-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/71625"}, {"sha": "5a04f050acd0d0229d79bd9be0e99e054d66d4bc", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 153, "deletions": 26, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -32,8 +32,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"substring-locations.h\"\n #include \"selftest.h\"\n+#include \"selftest-diagnostic.h\"\n #include \"builtins.h\"\n #include \"attribs.h\"\n+#include \"gcc-rich-location.h\"\n \n /* Handle attributes associated with format checking.  */\n \n@@ -97,8 +99,8 @@ format_warning_at_char (location_t fmt_string_loc, tree format_string_cst,\n \n   substring_loc fmt_loc (fmt_string_loc, string_type, char_idx, char_idx,\n \t\t\t char_idx);\n-  bool warned = format_warning_va (fmt_loc, UNKNOWN_LOCATION, NULL, opt,\n-\t\t\t\t   gmsgid, &ap);\n+  bool warned = format_warning_va (fmt_loc, NULL, UNKNOWN_LOCATION, NULL,\n+\t\t\t\t   NULL, opt, gmsgid, &ap);\n   va_end (ap);\n \n   return warned;\n@@ -3510,6 +3512,82 @@ get_corrected_substring (const substring_loc &fmt_loc,\n   return result;\n }\n \n+/* Helper class for adding zero or more trailing '*' to types.\n+\n+   The format type and name exclude any '*' for pointers, so those\n+   must be formatted manually.  For all the types we currently have,\n+   this is adequate, but formats taking pointers to functions or\n+   arrays would require the full type to be built up in order to\n+   print it with %T.  */\n+\n+class indirection_suffix\n+{\n+ public:\n+  indirection_suffix (int pointer_count) : m_pointer_count (pointer_count) {}\n+\n+  /* Determine the size of the buffer (including NUL-terminator).  */\n+\n+  size_t get_buffer_size () const\n+  {\n+    return m_pointer_count + 2;\n+  }\n+\n+  /* Write the '*' to DST and add a NUL-terminator.  */\n+\n+  void fill_buffer (char *dst) const\n+  {\n+    if (m_pointer_count == 0)\n+      dst[0] = 0;\n+    else if (c_dialect_cxx ())\n+      {\n+\tmemset (dst, '*', m_pointer_count);\n+\tdst[m_pointer_count] = 0;\n+      }\n+    else\n+      {\n+\tdst[0] = ' ';\n+\tmemset (dst + 1, '*', m_pointer_count);\n+\tdst[m_pointer_count + 1] = 0;\n+      }\n+  }\n+\n+ private:\n+  int m_pointer_count;\n+};\n+\n+/* Subclass of range_label for labelling the range in the format string\n+   with the type in question, adding trailing '*' for pointer_count.  */\n+\n+class range_label_for_format_type_mismatch\n+  : public range_label_for_type_mismatch\n+{\n+ public:\n+  range_label_for_format_type_mismatch (tree labelled_type, tree other_type,\n+\t\t\t\t\tint pointer_count)\n+  : range_label_for_type_mismatch (labelled_type, other_type),\n+    m_pointer_count (pointer_count)\n+  {\n+  }\n+\n+  label_text get_text () const FINAL OVERRIDE\n+  {\n+    label_text text = range_label_for_type_mismatch::get_text ();\n+    if (text.m_buffer == NULL)\n+      return text;\n+\n+    indirection_suffix suffix (m_pointer_count);\n+    char *p = (char *) alloca (suffix.get_buffer_size ());\n+    suffix.fill_buffer (p);\n+\n+    char *result = concat (text.m_buffer, p, NULL);\n+    text.maybe_free ();\n+    return label_text (result, true);\n+  }\n+\n+ private:\n+  int m_pointer_count;\n+};\n+\n /* Give a warning about a format argument of different type from that expected.\n    The range of the diagnostic is taken from WHOLE_FMT_LOC; the caret location\n    is based on the location of the char at TYPE->offset_loc.\n@@ -3558,7 +3636,6 @@ format_type_warning (const substring_loc &whole_fmt_loc,\n   int pointer_count = type->pointer_count;\n   int arg_num = type->arg_num;\n \n-  char *p;\n   /* If ARG_TYPE is a typedef with a misleading name (for example,\n      size_t but not the standard size_t expected by printf %zu), avoid\n      printing the typedef name.  */\n@@ -3570,32 +3647,21 @@ format_type_warning (const substring_loc &whole_fmt_loc,\n       && !strcmp (wanted_type_name,\n \t\t  lang_hooks.decl_printable_name (TYPE_NAME (arg_type), 2)))\n     arg_type = TYPE_MAIN_VARIANT (arg_type);\n-  /* The format type and name exclude any '*' for pointers, so those\n-     must be formatted manually.  For all the types we currently have,\n-     this is adequate, but formats taking pointers to functions or\n-     arrays would require the full type to be built up in order to\n-     print it with %T.  */\n-  p = (char *) alloca (pointer_count + 2);\n-  if (pointer_count == 0)\n-    p[0] = 0;\n-  else if (c_dialect_cxx ())\n-    {\n-      memset (p, '*', pointer_count);\n-      p[pointer_count] = 0;\n-    }\n-  else\n-    {\n-      p[0] = ' ';\n-      memset (p + 1, '*', pointer_count);\n-      p[pointer_count + 1] = 0;\n-    }\n+\n+  indirection_suffix suffix (pointer_count);\n+  char *p = (char *) alloca (suffix.get_buffer_size ());\n+  suffix.fill_buffer (p);\n \n   /* WHOLE_FMT_LOC has the caret at the end of the range.\n      Set the caret to be at the offset from TYPE.  Subtract one\n      from the offset for the same reason as in format_warning_at_char.  */\n   substring_loc fmt_loc (whole_fmt_loc);\n   fmt_loc.set_caret_index (type->offset_loc - 1);\n \n+  range_label_for_format_type_mismatch fmt_label (wanted_type, arg_type,\n+\t\t\t\t\t\t  pointer_count);\n+  range_label_for_type_mismatch param_label (arg_type, wanted_type);\n+\n   /* Get a string for use as a replacement fix-it hint for the range in\n      fmt_loc, or NULL.  */\n   char *corrected_substring\n@@ -3606,7 +3672,7 @@ format_type_warning (const substring_loc &whole_fmt_loc,\n     {\n       if (arg_type)\n \tformat_warning_at_substring\n-\t  (fmt_loc, param_loc,\n+\t  (fmt_loc, &fmt_label, param_loc, &param_label,\n \t   corrected_substring, OPT_Wformat_,\n \t   \"%s %<%s%.*s%> expects argument of type %<%s%s%>, \"\n \t   \"but argument %d has type %qT\",\n@@ -3616,7 +3682,7 @@ format_type_warning (const substring_loc &whole_fmt_loc,\n \t   wanted_type_name, p, arg_num, arg_type);\n       else\n \tformat_warning_at_substring\n-\t  (fmt_loc, param_loc,\n+\t  (fmt_loc, &fmt_label, param_loc, &param_label,\n \t   corrected_substring, OPT_Wformat_,\n \t   \"%s %<%s%.*s%> expects a matching %<%s%s%> argument\",\n \t   gettext (kind_descriptions[kind]),\n@@ -3627,7 +3693,7 @@ format_type_warning (const substring_loc &whole_fmt_loc,\n     {\n       if (arg_type)\n \tformat_warning_at_substring\n-\t  (fmt_loc, param_loc,\n+\t  (fmt_loc, &fmt_label, param_loc, &param_label,\n \t   corrected_substring, OPT_Wformat_,\n \t   \"%s %<%s%.*s%> expects argument of type %<%T%s%>, \"\n \t   \"but argument %d has type %qT\",\n@@ -3637,7 +3703,7 @@ format_type_warning (const substring_loc &whole_fmt_loc,\n \t   wanted_type, p, arg_num, arg_type);\n       else\n \tformat_warning_at_substring\n-\t  (fmt_loc, param_loc,\n+\t  (fmt_loc, &fmt_label, param_loc, &param_label,\n \t   corrected_substring, OPT_Wformat_,\n \t   \"%s %<%s%.*s%> expects a matching %<%T%s%> argument\",\n \t   gettext (kind_descriptions[kind]),\n@@ -4217,6 +4283,66 @@ test_get_format_for_type_scanf ()\n \n #undef ASSERT_FORMAT_FOR_TYPE_STREQ\n \n+/* Exercise the type-printing label code, to give some coverage\n+   under \"make selftest-valgrind\" (in particular, to ensure that\n+   the label-printing machinery doesn't leak).  */\n+\n+static void\n+test_type_mismatch_range_labels ()\n+{\n+  /* Create a tempfile and write some text to it.\n+     ....................0000000001 11111111 12 22222222\n+     ....................1234567890 12345678 90 12345678.  */\n+  const char *content = \"  printf (\\\"msg: %i\\\\n\\\", msg);\\n\";\n+  temp_source_file tmp (SELFTEST_LOCATION, \".c\", content);\n+  line_table_test ltt;\n+\n+  linemap_add (line_table, LC_ENTER, false, tmp.get_filename (), 1);\n+\n+  location_t c17 = linemap_position_for_column (line_table, 17);\n+  ASSERT_EQ (LOCATION_COLUMN (c17), 17);\n+  location_t c18 = linemap_position_for_column (line_table, 18);\n+  location_t c24 = linemap_position_for_column (line_table, 24);\n+  location_t c26 = linemap_position_for_column (line_table, 26);\n+\n+  /* Don't attempt to run the tests if column data might be unavailable.  */\n+  if (c26 > LINE_MAP_MAX_LOCATION_WITH_COLS)\n+    return;\n+\n+  location_t fmt = make_location (c18, c17, c18);\n+  ASSERT_EQ (LOCATION_COLUMN (fmt), 18);\n+\n+  location_t param = make_location (c24, c24, c26);\n+  ASSERT_EQ (LOCATION_COLUMN (param), 24);\n+\n+  range_label_for_format_type_mismatch fmt_label (char_type_node,\n+\t\t\t\t\t\t  integer_type_node, 1);\n+  range_label_for_type_mismatch param_label (integer_type_node,\n+\t\t\t\t\t     char_type_node);\n+  gcc_rich_location richloc (fmt, &fmt_label);\n+  richloc.add_range (param, false, &param_label);\n+\n+  test_diagnostic_context dc;\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  if (c_dialect_cxx ())\n+    /* \"char*\", without a space.  */\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \"   printf (\\\"msg: %i\\\\n\\\", msg);\\n\"\n+\t\t  \"                 ~^     ~~~\\n\"\n+\t\t  \"                  |     |\\n\"\n+\t\t  \"                  char* int\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  else\n+    /* \"char *\", with a space.  */\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \"   printf (\\\"msg: %i\\\\n\\\", msg);\\n\"\n+\t\t  \"                 ~^     ~~~\\n\"\n+\t\t  \"                  |     |\\n\"\n+\t\t  \"                  |     int\\n\"\n+\t\t  \"                  char *\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -4225,6 +4351,7 @@ c_format_c_tests ()\n   test_get_modifier_for_format_len ();\n   test_get_format_for_type_printf ();\n   test_get_format_for_type_scanf ();\n+  test_type_mismatch_range_labels ();\n }\n \n } // namespace selftest"}, {"sha": "7bde11c1f1959c2eead755bc7b170704c54660f4", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -1,3 +1,14 @@\n+2018-08-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-objc-common.c: Include \"gcc-rich-location.h\".\n+\t(c_tree_printer): Move implemenation of '%T' to...\n+\t(print_type): ...this new function.\n+\t(range_label_for_type_mismatch::get_text): New function.\n+\t* c-typeck.c (convert_for_assignment): Add type labels to the rhs\n+\trange for the various ic_argpass cases.\n+\t(class maybe_range_label_for_tree_type_mismatch): New class.\n+\t(build_binary_op): Use it when calling binary_op_error.\n+\n 2018-08-15  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \t\n \t* c-decl.c (start_decl): Do not warn if variables is named as main"}, {"sha": "238af199ab5222fb3946866fe4945b892b5fdcf8", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 73, "deletions": 51, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"langhooks.h\"\n #include \"c-objc-common.h\"\n+#include \"gcc-rich-location.h\"\n \n static bool c_tree_printer (pretty_printer *, text_info *, const char *,\n \t\t\t    int, bool, bool, bool, bool *, const char **);\n@@ -61,6 +62,60 @@ c_objc_common_init (void)\n   return c_common_init ();\n }\n \n+/* Print T to CPP.  */\n+\n+static void\n+print_type (c_pretty_printer *cpp, tree t, bool *quoted)\n+{\n+  gcc_assert (TYPE_P (t));\n+  struct obstack *ob = pp_buffer (cpp)->obstack;\n+  char *p = (char *) obstack_base (ob);\n+  /* Remember the end of the initial dump.  */\n+  int len = obstack_object_size (ob);\n+\n+  tree name = TYPE_NAME (t);\n+  if (name && TREE_CODE (name) == TYPE_DECL && DECL_NAME (name))\n+    pp_identifier (cpp, lang_hooks.decl_printable_name (name, 2));\n+  else\n+    cpp->type_id (t);\n+\n+  /* If we're printing a type that involves typedefs, also print the\n+     stripped version.  But sometimes the stripped version looks\n+     exactly the same, so we don't want it after all.  To avoid\n+     printing it in that case, we play ugly obstack games.  */\n+  if (TYPE_CANONICAL (t) && t != TYPE_CANONICAL (t))\n+    {\n+      c_pretty_printer cpp2;\n+      /* Print the stripped version into a temporary printer.  */\n+      cpp2.type_id (TYPE_CANONICAL (t));\n+      struct obstack *ob2 = cpp2.buffer->obstack;\n+      /* Get the stripped version from the temporary printer.  */\n+      const char *aka = (char *) obstack_base (ob2);\n+      int aka_len = obstack_object_size (ob2);\n+      int type1_len = obstack_object_size (ob) - len;\n+\n+      /* If they are identical, bail out.  */\n+      if (aka_len == type1_len && memcmp (p + len, aka, aka_len) == 0)\n+\treturn;\n+\n+      /* They're not, print the stripped version now.  */\n+      if (*quoted)\n+\tpp_end_quote (cpp, pp_show_color (cpp));\n+      pp_c_whitespace (cpp);\n+      pp_left_brace (cpp);\n+      pp_c_ws_string (cpp, _(\"aka\"));\n+      pp_c_whitespace (cpp);\n+      if (*quoted)\n+\tpp_begin_quote (cpp, pp_show_color (cpp));\n+      cpp->type_id (TYPE_CANONICAL (t));\n+      if (*quoted)\n+\tpp_end_quote (cpp, pp_show_color (cpp));\n+      pp_right_brace (cpp);\n+      /* No further closing quotes are needed.  */\n+      *quoted = false;\n+    }\n+}\n+\n /* Called during diagnostic message formatting process to print a\n    source-level entity onto BUFFER.  The meaning of the format specifiers\n    is as follows:\n@@ -82,7 +137,6 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n \t\tbool *quoted, const char **)\n {\n   tree t = NULL_TREE;\n-  tree name;\n   // FIXME: the next cast should be a dynamic_cast, when it is permitted.\n   c_pretty_printer *cpp = (c_pretty_printer *) pp;\n   pp->padding = pp_none;\n@@ -133,56 +187,8 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n       break;\n \n     case 'T':\n-      {\n-\tgcc_assert (TYPE_P (t));\n-\tstruct obstack *ob = pp_buffer (cpp)->obstack;\n-\tchar *p = (char *) obstack_base (ob);\n-\t/* Remember the end of the initial dump.  */\n-\tint len = obstack_object_size (ob);\n-\n-\tname = TYPE_NAME (t);\n-\tif (name && TREE_CODE (name) == TYPE_DECL && DECL_NAME (name))\n-\t  pp_identifier (cpp, lang_hooks.decl_printable_name (name, 2));\n-\telse\n-\t  cpp->type_id (t);\n-\n-\t/* If we're printing a type that involves typedefs, also print the\n-\t   stripped version.  But sometimes the stripped version looks\n-\t   exactly the same, so we don't want it after all.  To avoid\n-\t   printing it in that case, we play ugly obstack games.  */\n-\tif (TYPE_CANONICAL (t) && t != TYPE_CANONICAL (t))\n-\t  {\n-\t    c_pretty_printer cpp2;\n-\t    /* Print the stripped version into a temporary printer.  */\n-\t    cpp2.type_id (TYPE_CANONICAL (t));\n-\t    struct obstack *ob2 = cpp2.buffer->obstack;\n-\t    /* Get the stripped version from the temporary printer.  */\n-\t    const char *aka = (char *) obstack_base (ob2);\n-\t    int aka_len = obstack_object_size (ob2);\n-\t    int type1_len = obstack_object_size (ob) - len;\n-\n-\t    /* If they are identical, bail out.  */\n-\t    if (aka_len == type1_len && memcmp (p + len, aka, aka_len) == 0)\n-\t      return true;\n-\n-\t    /* They're not, print the stripped version now.  */\n-\t    if (*quoted)\n-\t      pp_end_quote (pp, pp_show_color (pp));\n-\t    pp_c_whitespace (cpp);\n-\t    pp_left_brace (cpp);\n-\t    pp_c_ws_string (cpp, _(\"aka\"));\n-\t    pp_c_whitespace (cpp);\n-\t    if (*quoted)\n-\t      pp_begin_quote (pp, pp_show_color (pp));\n-\t    cpp->type_id (TYPE_CANONICAL (t));\n-\t    if (*quoted)\n-\t      pp_end_quote (pp, pp_show_color (pp));\n-\t    pp_right_brace (cpp);\n-\t    /* No further closing quotes are needed.  */\n-\t    *quoted = false;\n-\t  }\n-\treturn true;\n-      }\n+      print_type (cpp, t, quoted);\n+      return true;\n \n     case 'E':\n       if (TREE_CODE (t) == IDENTIFIER_NODE)\n@@ -207,6 +213,22 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n   return true;\n }\n \n+/* C-specific implementation of range_label::get_text () vfunc for\n+   range_label_for_type_mismatch.  */\n+\n+label_text\n+range_label_for_type_mismatch::get_text () const\n+{\n+  if (m_labelled_type == NULL_TREE)\n+    return label_text (NULL, false);\n+\n+  c_pretty_printer cpp;\n+  bool quoted = false;\n+  print_type (&cpp, m_labelled_type, &quoted);\n+  return label_text (xstrdup (pp_formatted_text (&cpp)), true);\n+}\n+\n+\n /* In C and ObjC, all decls have \"C\" linkage.  */\n bool\n has_c_linkage (const_tree decl ATTRIBUTE_UNUSED)"}, {"sha": "726ea832ae1056e47499bd717c6ab226aa26eeac", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 82, "deletions": 26, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -6924,13 +6924,15 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t\tswitch (errtype)\n \t\t  {\n \t\t  case ic_argpass:\n-\t\t    if (pedwarn (expr_loc, OPT_Wpointer_sign,\n-\t\t\t\t \"pointer targets in passing argument %d of \"\n-\t\t\t\t \"%qE differ in signedness\", parmnum, rname))\n-\t\t      inform ((fundecl && !DECL_IS_BUILTIN (fundecl))\n-\t\t\t      ? DECL_SOURCE_LOCATION (fundecl) : expr_loc,\n-\t\t\t      \"expected %qT but argument is of type %qT\",\n-\t\t\t      type, rhstype);\n+\t\t    {\n+\t\t      range_label_for_type_mismatch rhs_label (rhstype, type);\n+\t\t      gcc_rich_location richloc (expr_loc, &rhs_label);\n+\t\t      if (pedwarn (&richloc, OPT_Wpointer_sign,\n+\t\t\t\t   \"pointer targets in passing argument %d of \"\n+\t\t\t\t   \"%qE differ in signedness\", parmnum, rname))\n+\t\t\tinform_for_arg (fundecl, expr_loc, parmnum, type,\n+\t\t\t\t\trhstype);\n+\t\t    }\n \t\t    break;\n \t\t  case ic_assign:\n \t\t    pedwarn (location, OPT_Wpointer_sign,\n@@ -6981,10 +6983,14 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t  switch (errtype)\n \t    {\n \t    case ic_argpass:\n-\t      if (pedwarn (expr_loc, OPT_Wincompatible_pointer_types,\n-\t\t\t   \"passing argument %d of %qE from incompatible \"\n-\t\t\t   \"pointer type\", parmnum, rname))\n-\t\tinform_for_arg (fundecl, expr_loc, parmnum, type, rhstype);\n+\t      {\n+\t\trange_label_for_type_mismatch rhs_label (rhstype, type);\n+\t\tgcc_rich_location richloc (expr_loc, &rhs_label);\n+\t\tif (pedwarn (&richloc, OPT_Wincompatible_pointer_types,\n+\t\t\t     \"passing argument %d of %qE from incompatible \"\n+\t\t\t     \"pointer type\", parmnum, rname))\n+\t\t  inform_for_arg (fundecl, expr_loc, parmnum, type, rhstype);\n+\t      }\n \t      break;\n \t    case ic_assign:\n \t      pedwarn (location, OPT_Wincompatible_pointer_types,\n@@ -7024,10 +7030,14 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \tswitch (errtype)\n \t  {\n \t  case ic_argpass:\n-\t    if (pedwarn (expr_loc, OPT_Wint_conversion,\n-\t\t\t \"passing argument %d of %qE makes pointer from \"\n-\t\t\t \"integer without a cast\", parmnum, rname))\n-\t      inform_for_arg (fundecl, expr_loc, parmnum, type, rhstype);\n+\t    {\n+\t      range_label_for_type_mismatch rhs_label (rhstype, type);\n+\t      gcc_rich_location richloc (expr_loc, &rhs_label);\n+\t      if (pedwarn (&richloc, OPT_Wint_conversion,\n+\t\t\t   \"passing argument %d of %qE makes pointer from \"\n+\t\t\t   \"integer without a cast\", parmnum, rname))\n+\t\tinform_for_arg (fundecl, expr_loc, parmnum, type, rhstype);\n+\t    }\n \t    break;\n \t  case ic_assign:\n \t    pedwarn (location, OPT_Wint_conversion,\n@@ -7055,10 +7065,14 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n       switch (errtype)\n \t{\n \tcase ic_argpass:\n-\t  if (pedwarn (expr_loc, OPT_Wint_conversion,\n-\t\t       \"passing argument %d of %qE makes integer from \"\n-\t\t       \"pointer without a cast\", parmnum, rname))\n-\t    inform_for_arg (fundecl, expr_loc, parmnum, type, rhstype);\n+\t  {\n+\t    range_label_for_type_mismatch rhs_label (rhstype, type);\n+\t    gcc_rich_location richloc (expr_loc, &rhs_label);\n+\t    if (pedwarn (&richloc, OPT_Wint_conversion,\n+\t\t\t \"passing argument %d of %qE makes integer from \"\n+\t\t\t \"pointer without a cast\", parmnum, rname))\n+\t      inform_for_arg (fundecl, expr_loc, parmnum, type, rhstype);\n+\t  }\n \t  break;\n \tcase ic_assign:\n \t  pedwarn (location, OPT_Wint_conversion,\n@@ -7094,9 +7108,13 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n   switch (errtype)\n     {\n     case ic_argpass:\n-      error_at (expr_loc, \"incompatible type for argument %d of %qE\", parmnum,\n-\t\trname);\n-      inform_for_arg (fundecl, expr_loc, parmnum, type, rhstype);\n+      {\n+\trange_label_for_type_mismatch rhs_label (rhstype, type);\n+\tgcc_rich_location richloc (expr_loc, &rhs_label);\n+\terror_at (&richloc, \"incompatible type for argument %d of %qE\", parmnum,\n+\t\t  rname);\n+\tinform_for_arg (fundecl, expr_loc, parmnum, type, rhstype);\n+      }\n       break;\n     case ic_assign:\n       error_at (location, \"incompatible types when assigning to type %qT from \"\n@@ -10992,6 +11010,38 @@ build_vec_cmp (tree_code code, tree type,\n   return build3 (VEC_COND_EXPR, type, cmp, minus_one_vec, zero_vec);\n }\n \n+/* Subclass of range_label for labelling the type of EXPR when reporting\n+   a type mismatch between EXPR and OTHER_EXPR.\n+   Either or both of EXPR and OTHER_EXPR could be NULL.  */\n+\n+class maybe_range_label_for_tree_type_mismatch : public range_label\n+{\n+ public:\n+  maybe_range_label_for_tree_type_mismatch (tree expr, tree other_expr)\n+  : m_expr (expr), m_other_expr (other_expr)\n+  {\n+  }\n+\n+  label_text get_text () const FINAL OVERRIDE\n+  {\n+    if (m_expr == NULL_TREE\n+\t|| !EXPR_P (m_expr))\n+      return label_text (NULL, false);\n+    tree expr_type = TREE_TYPE (m_expr);\n+\n+    tree other_type = NULL_TREE;\n+    if (m_other_expr && EXPR_P (m_other_expr))\n+      other_type = TREE_TYPE (m_other_expr);\n+\n+   range_label_for_type_mismatch inner (expr_type, other_type);\n+   return inner.get_text ();\n+  }\n+\n+ private:\n+  tree m_expr;\n+  tree m_other_expr;\n+};\n+\n /* Build a binary-operation expression without default conversions.\n    CODE is the kind of expression to build.\n    LOCATION is the operator's location.\n@@ -11864,8 +11914,11 @@ build_binary_op (location_t location, enum tree_code code,\n \t  || !vector_types_compatible_elements_p (type0, type1)))\n     {\n       gcc_rich_location richloc (location);\n-      richloc.maybe_add_expr (orig_op0);\n-      richloc.maybe_add_expr (orig_op1);\n+      maybe_range_label_for_tree_type_mismatch\n+\tlabel_for_op0 (orig_op0, orig_op1),\n+\tlabel_for_op1 (orig_op1, orig_op0);\n+      richloc.maybe_add_expr (orig_op0, &label_for_op0);\n+      richloc.maybe_add_expr (orig_op1, &label_for_op1);\n       binary_op_error (&richloc, code, type0, type1);\n       return error_mark_node;\n     }\n@@ -12106,8 +12159,11 @@ build_binary_op (location_t location, enum tree_code code,\n   if (!result_type)\n     {\n       gcc_rich_location richloc (location);\n-      richloc.maybe_add_expr (orig_op0);\n-      richloc.maybe_add_expr (orig_op1);\n+      maybe_range_label_for_tree_type_mismatch\n+\tlabel_for_op0 (orig_op0, orig_op1),\n+\tlabel_for_op1 (orig_op1, orig_op0);\n+      richloc.maybe_add_expr (orig_op0, &label_for_op0);\n+      richloc.maybe_add_expr (orig_op1, &label_for_op1);\n       binary_op_error (&richloc, code, TREE_TYPE (op0), TREE_TYPE (op1));\n       return error_mark_node;\n     }"}, {"sha": "507291f43945ec9603ae4459f3330ef6f9276289", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -1233,6 +1233,10 @@ fdiagnostics-show-caret\n Common Var(flag_diagnostics_show_caret) Init(1)\n Show the source line with a caret indicating the column.\n \n+fdiagnostics-show-labels\n+Common Var(flag_diagnostics_show_labels) Init(1)\n+Show labels annotating ranges of source code when showing source\n+\n fdiagnostics-show-line-numbers\n Common Var(flag_diagnostics_show_line_numbers) Init(1)\n Show line numbers in the left margin when showing source"}, {"sha": "0b695907cf137ea6bc85198707581e395db9755c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -1,3 +1,15 @@\n+2018-08-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* call.c: Include \"gcc-rich-location.h\".\n+\t(convert_like_real): Add range label for \"invalid conversion\"\n+\tdiagnostic.\n+\t(perform_implicit_conversion_flags): Add type label to the\n+\t\"could not convert\" error.\n+\t* error.c: Include \"gcc-rich-location.h\".\n+\t(range_label_for_type_mismatch::get_text): New function.\n+\t* typeck.c (convert_for_assignment): Add type label to\n+\tthe \"cannot convert\" error if a location is available.\n+\n 2018-08-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (check_previous_goto_1): When decl_jump_unsafe returns 2"}, {"sha": "16bb6bfd46726b68c264fde3bc484f3dca48e2fe", "filename": "gcc/cp/call.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"internal-fn.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n+#include \"gcc-rich-location.h\"\n \n /* The various kinds of conversion.  */\n \n@@ -6748,8 +6749,13 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t    break;\n \t}\n       if (!complained)\n-\tcomplained = permerror (loc, \"invalid conversion from %qH to %qI\",\n-\t\t\t\tTREE_TYPE (expr), totype);\n+\t{\n+\t  range_label_for_type_mismatch label (TREE_TYPE (expr), totype);\n+\t  gcc_rich_location richloc (loc, &label);\n+\t  complained = permerror (&richloc,\n+\t\t\t\t  \"invalid conversion from %qH to %qI\",\n+\t\t\t\t  TREE_TYPE (expr), totype);\n+\t}\n       if (complained && fn)\n \tinform (get_fndecl_argument_location (fn, argnum),\n \t\t\"  initializing argument %P of %qD\", argnum, fn);\n@@ -10755,8 +10761,12 @@ perform_implicit_conversion_flags (tree type, tree expr,\n \t  else if (invalid_nonstatic_memfn_p (loc, expr, complain))\n \t    /* We gave an error.  */;\n \t  else\n-\t    error_at (loc, \"could not convert %qE from %qH to %qI\", expr,\n-\t\t      TREE_TYPE (expr), type);\n+\t    {\n+\t      range_label_for_type_mismatch label (TREE_TYPE (expr), type);\n+\t      gcc_rich_location rich_loc (loc, &label);\n+\t      error_at (&rich_loc, \"could not convert %qE from %qH to %qI\",\n+\t\t\texpr, TREE_TYPE (expr), type);\n+\t    }\n \t}\n       expr = error_mark_node;\n     }"}, {"sha": "355a5e82f15064003e5668a8aa3c0e53e4a4afae", "filename": "gcc/cp/error.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-objc.h\"\n #include \"ubsan.h\"\n #include \"internal-fn.h\"\n+#include \"gcc-rich-location.h\"\n \n #define pp_separate_with_comma(PP) pp_cxx_separate_with (PP, ',')\n #define pp_separate_with_semicolon(PP) pp_cxx_separate_with (PP, ';')\n@@ -4279,3 +4280,30 @@ qualified_name_lookup_error (tree scope, tree name,\n       suggest_alternatives_for (location, name, true);\n     }\n }\n+\n+/* C++-specific implementation of range_label::get_text () vfunc for\n+   range_label_for_type_mismatch.\n+\n+   Compare with print_template_differences above.  */\n+\n+label_text\n+range_label_for_type_mismatch::get_text () const\n+{\n+  if (m_labelled_type == NULL_TREE)\n+    return label_text (NULL, false);\n+\n+  const bool verbose = false;\n+  const bool show_color = false;\n+\n+  const char *result;\n+  if (m_other_type\n+      && comparable_template_types_p (m_labelled_type, m_other_type))\n+    result = type_to_string_with_compare (m_labelled_type, m_other_type,\n+\t\t\t\t\t  verbose, show_color);\n+  else\n+    result = type_to_string (m_labelled_type, verbose, true, NULL, show_color);\n+\n+  /* Both of the above return GC-allocated buffers, so the caller mustn't\n+     free them.  */\n+  return label_text (const_cast <char *> (result), false);\n+}"}, {"sha": "64b3d583356c45c1ff4c3fba608525ed9142366c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -8805,7 +8805,16 @@ convert_for_assignment (tree type, tree rhs,\n \t\t}\n \t      else if (fndecl)\n \t\t{\n-\t\t  error_at (cp_expr_loc_or_loc (rhs, input_location),\n+\t\t  location_t loc = cp_expr_location (rhs);\n+\t\t  range_label_for_type_mismatch rhs_label (rhstype, type);\n+\t\t  range_label *label = &rhs_label;\n+\t\t  if (loc == UNKNOWN_LOCATION)\n+\t\t    {\n+\t\t      loc = input_location;\n+\t\t      label = NULL;\n+\t\t    }\n+\t\t  gcc_rich_location richloc (loc, label);\n+\t\t  error_at (&richloc,\n \t\t\t    \"cannot convert %qH to %qI\",\n \t\t\t    rhstype, type);\n \t\t  inform (get_fndecl_argument_location (fndecl, parmnum),"}, {"sha": "c9edaab4e22ae277e0212ee5c52bad9aa159438c", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 341, "deletions": 5, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -127,7 +127,8 @@ class layout_range\n   layout_range (const expanded_location *start_exploc,\n \t\tconst expanded_location *finish_exploc,\n \t\tbool show_caret_p,\n-\t\tconst expanded_location *caret_exploc);\n+\t\tconst expanded_location *caret_exploc,\n+\t\tconst range_label *label);\n \n   bool contains_point (linenum_type row, int column) const;\n   bool intersects_line_p (linenum_type row) const;\n@@ -136,6 +137,7 @@ class layout_range\n   layout_point m_finish;\n   bool m_show_caret_p;\n   layout_point m_caret;\n+  const range_label *m_label;\n };\n \n /* A struct for use by layout::print_source_line for telling\n@@ -253,6 +255,7 @@ class layout\n   bool should_print_annotation_line_p (linenum_type row) const;\n   void start_annotation_line () const;\n   void print_annotation_line (linenum_type row, const line_bounds lbounds);\n+  void print_any_labels (linenum_type row);\n   void print_trailing_fixits (linenum_type row);\n \n   bool annotation_line_showed_range_p (linenum_type line, int start_column,\n@@ -287,6 +290,7 @@ class layout\n   expanded_location m_exploc;\n   colorizer m_colorizer;\n   bool m_colorize_source_p;\n+  bool m_show_labels_p;\n   bool m_show_line_numbers_p;\n   auto_vec <layout_range> m_layout_ranges;\n   auto_vec <const fixit_hint *> m_fixit_hints;\n@@ -408,11 +412,13 @@ colorizer::get_color_by_name (const char *name)\n layout_range::layout_range (const expanded_location *start_exploc,\n \t\t\t    const expanded_location *finish_exploc,\n \t\t\t    bool show_caret_p,\n-\t\t\t    const expanded_location *caret_exploc)\n+\t\t\t    const expanded_location *caret_exploc,\n+\t\t\t    const range_label *label)\n : m_start (*start_exploc),\n   m_finish (*finish_exploc),\n   m_show_caret_p (show_caret_p),\n-  m_caret (*caret_exploc)\n+  m_caret (*caret_exploc),\n+  m_label (label)\n {\n }\n \n@@ -539,7 +545,7 @@ make_range (int start_line, int start_col, int end_line, int end_col)\n   const expanded_location finish_exploc\n     = {\"test.c\", end_line, end_col, NULL, false};\n   return layout_range (&start_exploc, &finish_exploc, false,\n-\t\t       &start_exploc);\n+\t\t       &start_exploc, NULL);\n }\n \n /* Selftests for layout_range::contains_point and\n@@ -879,6 +885,7 @@ layout::layout (diagnostic_context * context,\n   m_exploc (richloc->get_expanded_location (0)),\n   m_colorizer (context, diagnostic_kind),\n   m_colorize_source_p (context->colorize_source_p),\n+  m_show_labels_p (context->show_labels_p),\n   m_show_line_numbers_p (context->show_line_numbers_p),\n   m_layout_ranges (richloc->get_num_locations ()),\n   m_fixit_hints (richloc->get_num_fixit_hints ()),\n@@ -989,7 +996,8 @@ layout::maybe_add_location_range (const location_range *loc_range,\n \n   /* Everything is now known to be in the correct source file,\n      but it may require further sanitization.  */\n-  layout_range ri (&start, &finish, loc_range->m_show_caret_p, &caret);\n+  layout_range ri (&start, &finish, loc_range->m_show_caret_p, &caret,\n+\t\t   loc_range->m_label);\n \n   /* If we have a range that finishes before it starts (perhaps\n      from something built via macro expansion), printing the\n@@ -1379,6 +1387,180 @@ layout::print_annotation_line (linenum_type row, const line_bounds lbounds)\n   print_newline ();\n }\n \n+/* Implementation detail of layout::print_any_labels.\n+\n+   A label within the given row of source.  */\n+\n+struct line_label\n+{\n+  line_label (int state_idx, int column, label_text text)\n+  : m_state_idx (state_idx), m_column (column),\n+    m_text (text), m_length (strlen (text.m_buffer)),\n+    m_label_line (0)\n+  {}\n+\n+  /* Sorting is primarily by column, then by state index.  */\n+  static int comparator (const void *p1, const void *p2)\n+  {\n+    const line_label *ll1 = (const line_label *)p1;\n+    const line_label *ll2 = (const line_label *)p2;\n+    int column_cmp = compare (ll1->m_column, ll2->m_column);\n+    if (column_cmp)\n+      return column_cmp;\n+    return compare (ll1->m_state_idx, ll2->m_state_idx);\n+  }\n+\n+  int m_state_idx;\n+  int m_column;\n+  label_text m_text;\n+  size_t m_length;\n+  int m_label_line;\n+};\n+\n+/* Print any labels in this row.  */\n+void\n+layout::print_any_labels (linenum_type row)\n+{\n+  int i;\n+  auto_vec<line_label> labels;\n+\n+  /* Gather the labels that are to be printed into \"labels\".  */\n+  {\n+    layout_range *range;\n+    FOR_EACH_VEC_ELT (m_layout_ranges, i, range)\n+      {\n+\t/* Most ranges don't have labels, so reject this first.  */\n+\tif (range->m_label == NULL)\n+\t  continue;\n+\n+\t/* The range's caret must be on this line.  */\n+\tif (range->m_caret.m_line != row)\n+\t  continue;\n+\n+\t/* Reject labels that aren't fully visible due to clipping\n+\t   by m_x_offset.  */\n+\tif (range->m_caret.m_column <= m_x_offset)\n+\t  continue;\n+\n+\tlabel_text text;\n+\ttext = range->m_label->get_text ();\n+\n+\t/* Allow for labels that return NULL from their get_text\n+\t   implementation (so e.g. such labels can control their own\n+\t   visibility).  */\n+\tif (text.m_buffer == NULL)\n+\t  continue;\n+\n+\tlabels.safe_push (line_label (i, range->m_caret.m_column, text));\n+      }\n+  }\n+\n+  /* Bail out if there are no labels on this row.  */\n+  if (labels.length () == 0)\n+    return;\n+\n+  /* Sort them.  */\n+  labels.qsort(line_label::comparator);\n+\n+  /* Figure out how many \"label lines\" we need, and which\n+     one each label is printed in.\n+\n+     For example, if the labels aren't too densely packed,\n+     we can fit them on the same line, giving two \"label lines\":\n+\n+       foo + bar\n+       ~~~   ~~~\n+       |     |        : label line 0\n+       l0    l1       : label line 1\n+\n+     If they would touch each other or overlap, then we need\n+     additional \"label lines\":\n+\n+       foo + bar\n+       ~~~   ~~~\n+       |     |             : label line 0\n+       |     label 1       : label line 1\n+       label 0             : label line 2\n+\n+     Place the final label on label line 1, and work backwards, adding\n+     label lines as needed.\n+\n+     If multiple labels are at the same place, put them on separate\n+     label lines:\n+\n+       foo + bar\n+           ^               : label line 0\n+           |               : label line 1\n+           label 1         : label line 2\n+           label 0         : label line 3.  */\n+\n+  int max_label_line = 1;\n+  {\n+    int next_column = INT_MAX;\n+    line_label *label;\n+    FOR_EACH_VEC_ELT_REVERSE (labels, i, label)\n+      {\n+\t/* Would this label \"touch\" or overlap the next label?  */\n+\tif (label->m_column + label->m_length >= (size_t)next_column)\n+\t  max_label_line++;\n+\n+\tlabel->m_label_line = max_label_line;\n+\tnext_column = label->m_column;\n+      }\n+  }\n+\n+  /* Print the \"label lines\".  For each label within the line, print\n+     either a vertical bar ('|') for the labels that are lower down, or the\n+     labels themselves once we've reached their line.  */\n+  {\n+    /* Keep track of in which column we last printed a vertical bar.\n+       This allows us to suppress duplicate vertical bars for the case\n+       where multiple labels are on one column.  */\n+    int last_vbar = 0;\n+    for (int label_line = 0; label_line <= max_label_line; label_line++)\n+      {\n+\tstart_annotation_line ();\n+\tpp_space (m_pp);\n+\tint column = 1 + m_x_offset;\n+\tline_label *label;\n+\tFOR_EACH_VEC_ELT (labels, i, label)\n+\t  {\n+\t    if (label_line > label->m_label_line)\n+\t      /* We've printed all the labels for this label line.  */\n+\t      break;\n+\n+\t    if (label_line == label->m_label_line)\n+\t      {\n+\t\tgcc_assert (column <= label->m_column);\n+\t\tmove_to_column (&column, label->m_column, true);\n+\t\tm_colorizer.set_range (label->m_state_idx);\n+\t\tpp_string (m_pp, label->m_text.m_buffer);\n+\t\tm_colorizer.set_normal_text ();\n+\t\tcolumn += label->m_length;\n+\t      }\n+\t    else if (label->m_column != last_vbar)\n+\t      {\n+\t\tgcc_assert (column <= label->m_column);\n+\t\tmove_to_column (&column, label->m_column, true);\n+\t\tm_colorizer.set_range (label->m_state_idx);\n+\t\tpp_character (m_pp, '|');\n+\t\tm_colorizer.set_normal_text ();\n+\t\tlast_vbar = column;\n+\t\tcolumn++;\n+\t      }\n+\t  }\n+\tprint_newline ();\n+      }\n+    }\n+\n+  /* Clean up.  */\n+  {\n+    line_label *label;\n+    FOR_EACH_VEC_ELT (labels, i, label)\n+      label->m_text.maybe_free ();\n+  }\n+}\n+\n /* If there are any fixit hints inserting new lines before source line ROW,\n    print them.\n \n@@ -2023,6 +2205,8 @@ layout::print_line (linenum_type row)\n   print_source_line (row, line.get_buffer (), line.length (), &lbounds);\n   if (should_print_annotation_line_p (row))\n     print_annotation_line (row, lbounds);\n+  if (m_show_labels_p)\n+    print_any_labels (row);\n   print_trailing_fixits (row);\n }\n \n@@ -2429,6 +2613,157 @@ test_one_liner_many_fixits_2 ()\n \t\tpp_formatted_text (dc.printer));\n }\n \n+/* Test of labeling the ranges within a rich_location.  */\n+\n+static void\n+test_one_liner_labels ()\n+{\n+  location_t foo\n+    = make_location (linemap_position_for_column (line_table, 1),\n+\t\t     linemap_position_for_column (line_table, 1),\n+\t\t     linemap_position_for_column (line_table, 3));\n+  location_t bar\n+    = make_location (linemap_position_for_column (line_table, 7),\n+\t\t     linemap_position_for_column (line_table, 7),\n+\t\t     linemap_position_for_column (line_table, 9));\n+  location_t field\n+    = make_location (linemap_position_for_column (line_table, 11),\n+\t\t     linemap_position_for_column (line_table, 11),\n+\t\t     linemap_position_for_column (line_table, 15));\n+\n+  /* Example where all the labels fit on one line.  */\n+  {\n+    text_range_label label0 (\"0\");\n+    text_range_label label1 (\"1\");\n+    text_range_label label2 (\"2\");\n+    gcc_rich_location richloc (foo, &label0);\n+    richloc.add_range (bar, false, &label1);\n+    richloc.add_range (field, false, &label2);\n+\n+    {\n+      test_diagnostic_context dc;\n+      diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+      ASSERT_STREQ (\"\\n\"\n+\t\t    \" foo = bar.field;\\n\"\n+\t\t    \" ^~~   ~~~ ~~~~~\\n\"\n+\t\t    \" |     |   |\\n\"\n+\t\t    \" 0     1   2\\n\",\n+\t\t    pp_formatted_text (dc.printer));\n+    }\n+\n+    /* Verify that we can disable label-printing.  */\n+    {\n+      test_diagnostic_context dc;\n+      dc.show_labels_p = false;\n+      diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+      ASSERT_STREQ (\"\\n\"\n+\t\t    \" foo = bar.field;\\n\"\n+\t\t    \" ^~~   ~~~ ~~~~~\\n\",\n+\t\t    pp_formatted_text (dc.printer));\n+    }\n+  }\n+\n+  /* Example where the labels need extra lines.  */\n+  {\n+    text_range_label label0 (\"label 0\");\n+    text_range_label label1 (\"label 1\");\n+    text_range_label label2 (\"label 2\");\n+    gcc_rich_location richloc (foo, &label0);\n+    richloc.add_range (bar, false, &label1);\n+    richloc.add_range (field, false, &label2);\n+\n+    test_diagnostic_context dc;\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \" foo = bar.field;\\n\"\n+\t\t  \" ^~~   ~~~ ~~~~~\\n\"\n+\t\t  \" |     |   |\\n\"\n+\t\t  \" |     |   label 2\\n\"\n+\t\t  \" |     label 1\\n\"\n+\t\t  \" label 0\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  }\n+\n+  /* Example of boundary conditions: label 0 and 1 have just enough clearance,\n+     but label 1 just touches label 2.  */\n+  {\n+    text_range_label label0 (\"aaaaa\");\n+    text_range_label label1 (\"bbbb\");\n+    text_range_label label2 (\"c\");\n+    gcc_rich_location richloc (foo, &label0);\n+    richloc.add_range (bar, false, &label1);\n+    richloc.add_range (field, false, &label2);\n+\n+    test_diagnostic_context dc;\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \" foo = bar.field;\\n\"\n+\t\t  \" ^~~   ~~~ ~~~~~\\n\"\n+\t\t  \" |     |   |\\n\"\n+\t\t  \" |     |   c\\n\"\n+\t\t  \" aaaaa bbbb\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  }\n+\n+  /* Example of out-of-order ranges (thus requiring a sort).  */\n+  {\n+    text_range_label label0 (\"0\");\n+    text_range_label label1 (\"1\");\n+    text_range_label label2 (\"2\");\n+    gcc_rich_location richloc (field, &label0);\n+    richloc.add_range (bar, false, &label1);\n+    richloc.add_range (foo, false, &label2);\n+\n+    test_diagnostic_context dc;\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \" foo = bar.field;\\n\"\n+\t\t  \" ~~~   ~~~ ^~~~~\\n\"\n+\t\t  \" |     |   |\\n\"\n+\t\t  \" 2     1   0\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  }\n+\n+  /* Ensure we don't ICE if multiple ranges with labels are on\n+     the same point.  */\n+  {\n+    text_range_label label0 (\"label 0\");\n+    text_range_label label1 (\"label 1\");\n+    text_range_label label2 (\"label 2\");\n+    gcc_rich_location richloc (bar, &label0);\n+    richloc.add_range (bar, false, &label1);\n+    richloc.add_range (bar, false, &label2);\n+\n+    test_diagnostic_context dc;\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \" foo = bar.field;\\n\"\n+\t\t  \"       ^~~\\n\"\n+\t\t  \"       |\\n\"\n+\t\t  \"       label 2\\n\"\n+\t\t  \"       label 1\\n\"\n+\t\t  \"       label 0\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+  }\n+\n+  /* Verify that a NULL result from range_label::get_text is\n+     handled gracefully.  */\n+  {\n+    text_range_label label (NULL);\n+    gcc_rich_location richloc (bar, &label);\n+\n+    test_diagnostic_context dc;\n+    diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+    ASSERT_STREQ (\"\\n\"\n+\t\t  \" foo = bar.field;\\n\"\n+\t\t  \"       ^~~\\n\",\n+\t\t  pp_formatted_text (dc.printer));\n+   }\n+\n+  /* TODO: example of formatted printing (needs to be in\n+     gcc-rich-location.c due to Makefile.in issues).  */\n+}\n+\n /* Run the various one-liner tests.  */\n \n static void\n@@ -2465,6 +2800,7 @@ test_diagnostic_show_locus_one_liner (const line_table_case &case_)\n   test_one_liner_fixit_validation_adhoc_locations ();\n   test_one_liner_many_fixits_1 ();\n   test_one_liner_many_fixits_2 ();\n+  test_one_liner_labels ();\n }\n \n /* Verify that gcc_rich_location::add_location_if_nearby works.  */"}, {"sha": "59477ce93f607d124b6c00109fb41da019ddd1ed", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -175,6 +175,7 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   context->lock = 0;\n   context->inhibit_notes_p = false;\n   context->colorize_source_p = false;\n+  context->show_labels_p = false;\n   context->show_line_numbers_p = false;\n   context->show_ruler_p = false;\n   context->parseable_fixits_p = false;"}, {"sha": "fe3130bdf9d14fa6e99b8a5fdc5c4725b89f1f88", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -204,6 +204,9 @@ struct diagnostic_context\n      a token, which would look strange).  */\n   bool colorize_source_p;\n \n+  /* When printing source code, should labelled ranges be printed?  */\n+  bool show_labels_p;\n+\n   /* When printing source code, should there be a left-hand margin\n      showing line numbers?  */\n   bool show_line_numbers_p;"}, {"sha": "586af1787c7f7c4760125784bed665b86b1181a6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -267,7 +267,7 @@ Objective-C and Objective-C++ Dialects}.\n -fdiagnostics-show-location=@r{[}once@r{|}every-line@r{]}  @gol\n -fdiagnostics-color=@r{[}auto@r{|}never@r{|}always@r{]}  @gol\n -fno-diagnostics-show-option  -fno-diagnostics-show-caret @gol\n--fno-diagnostics-show-line-numbers @gol\n+-fno-diagnostics-show-labels -fno-diagnostics-show-line-numbers @gol\n -fdiagnostics-parseable-fixits  -fdiagnostics-generate-patch @gol\n -fdiagnostics-show-template-tree -fno-elide-type @gol\n -fno-show-column}\n@@ -3711,6 +3711,23 @@ the @option{-fmessage-length=n} option is given.  When the output is done\n to the terminal, the width is limited to the width given by the\n @env{COLUMNS} environment variable or, if not set, to the terminal width.\n \n+@item -fno-diagnostics-show-labels\n+@opindex fno-diagnostics-show-labels\n+@opindex fdiagnostics-show-labels\n+By default, when printing source code (via @option{-fdiagnostics-show-caret}),\n+diagnostics can label ranges of source code with pertinent information, such\n+as the types of expressions:\n+\n+@smallexample\n+    printf (\"foo %s bar\", long_i + long_j);\n+                 ~^       ~~~~~~~~~~~~~~~\n+                  |              |\n+                  char *         long int\n+@end smallexample\n+\n+This option suppresses the printing of these labels (in the example above,\n+the vertical bars and the ``char *'' and ``long int'' text).\n+\n @item -fno-diagnostics-show-line-numbers\n @opindex fno-diagnostics-show-line-numbers\n @opindex fdiagnostics-show-line-numbers"}, {"sha": "5a74131d332d132975ed58d07eda9cfaffc0d7e4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -24247,6 +24247,7 @@ gen_producer_string (void)\n       case OPT_fdiagnostics_show_location_:\n       case OPT_fdiagnostics_show_option:\n       case OPT_fdiagnostics_show_caret:\n+      case OPT_fdiagnostics_show_labels:\n       case OPT_fdiagnostics_show_line_numbers:\n       case OPT_fdiagnostics_color_:\n       case OPT_fverbose_asm:"}, {"sha": "2576c7387ee38d4bc5a33d48350243894dd46f2d", "filename": "gcc/gcc-rich-location.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fgcc-rich-location.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fgcc-rich-location.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-rich-location.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -38,24 +38,26 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cpplib.h\"\n #include \"diagnostic.h\"\n \n-/* Add a range to the rich_location, covering expression EXPR. */\n+/* Add a range to the rich_location, covering expression EXPR,\n+   using LABEL if non-NULL. */\n \n void\n-gcc_rich_location::add_expr (tree expr)\n+gcc_rich_location::add_expr (tree expr, range_label *label)\n {\n   gcc_assert (expr);\n \n   if (CAN_HAVE_RANGE_P (expr))\n-    add_range (EXPR_LOCATION (expr), false);\n+    add_range (EXPR_LOCATION (expr), false, label);\n }\n \n-/* If T is an expression, add a range for it to the rich_location.  */\n+/* If T is an expression, add a range for it to the rich_location,\n+   using LABEL if non-NULL. */\n \n void\n-gcc_rich_location::maybe_add_expr (tree t)\n+gcc_rich_location::maybe_add_expr (tree t, range_label *label)\n {\n   if (EXPR_P (t))\n-    add_expr (t);\n+    add_expr (t, label);\n }\n \n /* Add a fixit hint suggesting replacing the range at MISSPELLED_TOKEN_LOC"}, {"sha": "dc11ee87552d9208426d49c9bd660b9eadc62557", "filename": "gcc/gcc-rich-location.h", "status": "modified", "additions": 67, "deletions": 4, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fgcc-rich-location.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fgcc-rich-location.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-rich-location.h?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -28,15 +28,17 @@ class gcc_rich_location : public rich_location\n   /* Constructors.  */\n \n   /* Constructing from a location.  */\n-  gcc_rich_location (source_location loc) :\n-    rich_location (line_table, loc) {}\n+  gcc_rich_location (source_location loc, const range_label *label = NULL)\n+  : rich_location (line_table, loc, label)\n+  {\n+  }\n \n   /* Methods for adding ranges via gcc entities.  */\n   void\n-  add_expr (tree expr);\n+  add_expr (tree expr, range_label *label);\n \n   void\n-  maybe_add_expr (tree t);\n+  maybe_add_expr (tree t, range_label *label);\n \n   void add_fixit_misspelled_id (location_t misspelled_token_loc,\n \t\t\t\ttree hint_id);\n@@ -99,4 +101,65 @@ class gcc_rich_location : public rich_location\n \t\t\t\t   location_t indent);\n };\n \n+/* Concrete subclass of libcpp's range_label.\n+   Simple implementation using a string literal.  */\n+\n+class text_range_label : public range_label\n+{\n+ public:\n+  text_range_label (const char *text) : m_text (text) {}\n+\n+  label_text get_text () const FINAL OVERRIDE\n+  {\n+    return label_text (const_cast <char *> (m_text), false);\n+  }\n+\n+ private:\n+  const char *m_text;\n+};\n+\n+/* Concrete subclass of libcpp's range_label for use in\n+   diagnostics involving mismatched types.\n+\n+   Each frontend that uses this should supply its own implementation.\n+\n+   Generate a label describing LABELLED_TYPE.  The frontend may use\n+   OTHER_TYPE where appropriate for highlighting the differences between\n+   the two types (analogous to C++'s use of %H and %I with\n+   template types).\n+\n+   Either or both of LABELLED_TYPE and OTHER_TYPE may be NULL_TREE.\n+   If LABELLED_TYPE is NULL_TREE, then there is no label.\n+\n+   For example, this rich_location could use two instances of\n+   range_label_for_type_mismatch:\n+\n+      printf (\"arg0: %i  arg1: %s arg2: %i\",\n+                               ^~\n+                               |\n+                               const char *\n+              100, 101, 102);\n+                   ~~~\n+                   |\n+                   int\n+\n+   (a) the label for \"%s\" with LABELLED_TYPE for \"const char*\" and\n+   (b) the label for \"101\" with LABELLED TYPE for \"int\"\n+   where each one uses the other's type as OTHER_TYPE.  */\n+\n+class range_label_for_type_mismatch : public range_label\n+{\n+ public:\n+  range_label_for_type_mismatch (tree labelled_type, tree other_type)\n+  : m_labelled_type (labelled_type), m_other_type (other_type)\n+  {\n+  }\n+\n+  label_text get_text () const OVERRIDE;\n+\n+ protected:\n+  tree m_labelled_type;\n+  tree m_other_type;\n+};\n+\n #endif /* GCC_RICH_LOCATION_H */"}, {"sha": "5213e17d68f51f7e9d2cced332c1d5ddede69644", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -601,8 +601,8 @@ fmtwarn (const substring_loc &fmt_loc, location_t param_loc,\n {\n   va_list ap;\n   va_start (ap, gmsgid);\n-  bool warned = format_warning_va (fmt_loc, param_loc, corrected_substring,\n-\t\t\t\t   opt, gmsgid, &ap);\n+  bool warned = format_warning_va (fmt_loc, NULL, param_loc, NULL,\n+\t\t\t\t   corrected_substring, opt, gmsgid, &ap);\n   va_end (ap);\n \n   return warned;\n@@ -616,7 +616,8 @@ fmtwarn_n (const substring_loc &fmt_loc, location_t param_loc,\n {\n   va_list ap;\n   va_start (ap, plural_gmsgid);\n-  bool warned = format_warning_n_va (fmt_loc, param_loc, corrected_substring,\n+  bool warned = format_warning_n_va (fmt_loc, NULL, param_loc, NULL,\n+\t\t\t\t     corrected_substring,\n \t\t\t\t     opt, n, singular_gmsgid, plural_gmsgid,\n \t\t\t\t     &ap);\n   va_end (ap);"}, {"sha": "d44678694c3d630c51a50244004d9f96400813d3", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -255,6 +255,7 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n \n \t  /* Fallthru.  */\n \tcase OPT_fdiagnostics_show_caret:\n+\tcase OPT_fdiagnostics_show_labels:\n \tcase OPT_fdiagnostics_show_line_numbers:\n \tcase OPT_fdiagnostics_show_option:\n \tcase OPT_fdiagnostics_show_location_:\n@@ -537,6 +538,7 @@ append_compiler_options (obstack *argv_obstack, struct cl_decoded_option *opts,\n       switch (option->opt_index)\n \t{\n \tcase OPT_fdiagnostics_show_caret:\n+\tcase OPT_fdiagnostics_show_labels:\n \tcase OPT_fdiagnostics_show_line_numbers:\n \tcase OPT_fdiagnostics_show_option:\n \tcase OPT_fdiagnostics_show_location_:\n@@ -584,6 +586,7 @@ append_diag_options (obstack *argv_obstack, struct cl_decoded_option *opts,\n \t{\n \tcase OPT_fdiagnostics_color_:\n \tcase OPT_fdiagnostics_show_caret:\n+\tcase OPT_fdiagnostics_show_labels:\n \tcase OPT_fdiagnostics_show_line_numbers:\n \tcase OPT_fdiagnostics_show_option:\n \tcase OPT_fdiagnostics_show_location_:"}, {"sha": "a5c9ed9d09d332e42ea7583483563e685bb7ac22", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -2175,6 +2175,10 @@ common_handle_option (struct gcc_options *opts,\n       dc->show_caret = value;\n       break;\n \n+    case OPT_fdiagnostics_show_labels:\n+      dc->show_labels_p = value;\n+      break;\n+\n     case OPT_fdiagnostics_show_line_numbers:\n       dc->show_line_numbers_p = value;\n       break;"}, {"sha": "f3c255e3346409c2fbf4a256d752389f9875dcde", "filename": "gcc/selftest-diagnostic.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fselftest-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fselftest-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-diagnostic.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -37,6 +37,7 @@ test_diagnostic_context::test_diagnostic_context ()\n {\n   diagnostic_initialize (this, 0);\n   show_caret = true;\n+  show_labels_p = true;\n   show_column = true;\n   start_span = start_span_cb;\n }"}, {"sha": "82f2f4577f0bb7cc0b1d86fb8e6971ee6d10f9cd", "filename": "gcc/substring-locations.c", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fsubstring-locations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fsubstring-locations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsubstring-locations.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -26,6 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"langhooks.h\"\n #include \"substring-locations.h\"\n+#include \"gcc-rich-location.h\"\n \n /* Emit a warning governed by option OPT, using SINGULAR_GMSGID as the\n    format string (or if PLURAL_GMSGID is different from SINGULAR_GMSGID,\n@@ -89,6 +90,27 @@ along with GCC; see the file COPYING3.  If not see\n      printf(fmt, msg);\n             ^~~  ~~~\n \n+   If non-NULL, then FMT_LABEL will be used to label the location within the\n+   string for cases 1 and 2; if non-NULL, then PARAM_LABEL will be used to label\n+   the parameter.  For example with case 1:\n+\n+    test.c:90:16: warning: '%s' here but arg 2 has 'long' type [-Wformat=]\n+     printf (\"foo %s bar\", long_i + long_j);\n+                  ~^       ~~~~~~~~~~~~~~~\n+                                  |\n+                                  int\n+\n+   and with case 2:\n+\n+     test.c:90:10: warning: problem with '%i' here [-Wformat=]\n+     printf(\"hello \" INT_FMT \" world\", msg);\n+            ^~~~~~~~~~~~~~~~~~~~~~~~~\n+     test.c:19: note: format string is defined here\n+     #define INT_FMT \"%i\"\n+                      ~^\n+                       |\n+                       int\n+\n    If CORRECTED_SUBSTRING is non-NULL, use it for cases 1 and 2 to provide\n    a fix-it hint, suggesting that it should replace the text within the\n    substring range.  For example:\n@@ -102,7 +124,9 @@ along with GCC; see the file COPYING3.  If not see\n \n bool\n format_warning_n_va (const substring_loc &fmt_loc,\n+\t\t     const range_label *fmt_label,\n \t\t     location_t param_loc,\n+\t\t     const range_label *param_label,\n \t\t     const char *corrected_substring,\n \t\t     int opt, unsigned HOST_WIDE_INT n,\n \t\t     const char *singular_gmsgid,\n@@ -138,10 +162,15 @@ format_warning_n_va (const substring_loc &fmt_loc,\n \t}\n     }\n \n-  rich_location richloc (line_table, primary_loc);\n+  /* Only use fmt_label in the initial warning for case 1.  */\n+  const range_label *primary_label = NULL;\n+  if (substring_within_range)\n+    primary_label = fmt_label;\n+\n+  gcc_rich_location richloc (primary_loc, primary_label);\n \n   if (param_loc != UNKNOWN_LOCATION)\n-    richloc.add_range (param_loc, false);\n+    richloc.add_range (param_loc, false, param_label);\n \n   if (!err && corrected_substring && substring_within_range)\n     richloc.add_fixit_replace (fmt_substring_range, corrected_substring);\n@@ -173,7 +202,9 @@ format_warning_n_va (const substring_loc &fmt_loc,\n     /* Case 2.  */\n     if (warned)\n       {\n-\trich_location substring_richloc (line_table, fmt_substring_loc);\n+\t/* Use fmt_label in the note for case 2.  */\n+\trich_location substring_richloc (line_table, fmt_substring_loc,\n+\t\t\t\t\t fmt_label);\n \tif (corrected_substring)\n \t  substring_richloc.add_fixit_replace (fmt_substring_range,\n \t\t\t\t\t       corrected_substring);\n@@ -188,26 +219,31 @@ format_warning_n_va (const substring_loc &fmt_loc,\n \n bool\n format_warning_va (const substring_loc &fmt_loc,\n+\t\t   const range_label *fmt_label,\n \t\t   location_t param_loc,\n+\t\t   const range_label *param_label,\n \t\t   const char *corrected_substring,\n \t\t   int opt, const char *gmsgid, va_list *ap)\n {\n-  return format_warning_n_va (fmt_loc, param_loc, corrected_substring, opt,\n+  return format_warning_n_va (fmt_loc, fmt_label, param_loc, param_label,\n+\t\t\t      corrected_substring, opt,\n \t\t\t      0, gmsgid, gmsgid, ap);\n }\n \n /* Variadic call to format_warning_va.  */\n \n bool\n format_warning_at_substring (const substring_loc &fmt_loc,\n+\t\t\t     const range_label *fmt_label,\n \t\t\t     location_t param_loc,\n+\t\t\t     const range_label *param_label,\n \t\t\t     const char *corrected_substring,\n \t\t\t     int opt, const char *gmsgid, ...)\n {\n   va_list ap;\n   va_start (ap, gmsgid);\n-  bool warned = format_warning_va (fmt_loc, param_loc, corrected_substring,\n-\t\t\t\t   opt, gmsgid, &ap);\n+  bool warned = format_warning_va (fmt_loc, fmt_label, param_loc, param_label,\n+\t\t\t\t   corrected_substring, opt, gmsgid, &ap);\n   va_end (ap);\n \n   return warned;\n@@ -217,15 +253,18 @@ format_warning_at_substring (const substring_loc &fmt_loc,\n \n bool\n format_warning_at_substring_n (const substring_loc &fmt_loc,\n+\t\t\t       const range_label *fmt_label,\n \t\t\t       location_t param_loc,\n+\t\t\t       const range_label *param_label,\n \t\t\t       const char *corrected_substring,\n \t\t\t       int opt, unsigned HOST_WIDE_INT n,\n \t\t\t       const char *singular_gmsgid,\n \t\t\t       const char *plural_gmsgid, ...)\n {\n   va_list ap;\n   va_start (ap, plural_gmsgid);\n-  bool warned = format_warning_n_va (fmt_loc, param_loc, corrected_substring,\n+  bool warned = format_warning_n_va (fmt_loc, fmt_label, param_loc, param_label,\n+\t\t\t\t     corrected_substring,\n \t\t\t\t     opt, n, singular_gmsgid, plural_gmsgid,\n \t\t\t\t     &ap);\n   va_end (ap);"}, {"sha": "919fdf0127d8c4a3aa6dc2a5a90b7d8b67efc3b2", "filename": "gcc/substring-locations.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fsubstring-locations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Fsubstring-locations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsubstring-locations.h?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -77,32 +77,40 @@ class substring_loc\n /* Functions for emitting a warning about a format string.  */\n \n extern bool format_warning_va (const substring_loc &fmt_loc,\n+\t\t\t       const range_label *fmt_label,\n \t\t\t       location_t param_loc,\n+\t\t\t       const range_label *param_label,\n \t\t\t       const char *corrected_substring,\n \t\t\t       int opt, const char *gmsgid, va_list *ap)\n-  ATTRIBUTE_GCC_DIAG (5, 0);\n+  ATTRIBUTE_GCC_DIAG (7, 0);\n \n extern bool format_warning_n_va (const substring_loc &fmt_loc,\n+\t\t\t\t const range_label *fmt_label,\n \t\t\t\t location_t param_loc,\n+\t\t\t\t const range_label *param_label,\n \t\t\t\t const char *corrected_substring,\n \t\t\t\t int opt, unsigned HOST_WIDE_INT n,\n \t\t\t\t const char *singular_gmsgid,\n \t\t\t\t const char *plural_gmsgid, va_list *ap)\n-  ATTRIBUTE_GCC_DIAG (6, 0) ATTRIBUTE_GCC_DIAG (7, 0);\n+  ATTRIBUTE_GCC_DIAG (8, 0) ATTRIBUTE_GCC_DIAG (9, 0);\n \n extern bool format_warning_at_substring (const substring_loc &fmt_loc,\n+\t\t\t\t\t const range_label *fmt_label,\n \t\t\t\t\t location_t param_loc,\n+\t\t\t\t\t const range_label *param_label,\n \t\t\t\t\t const char *corrected_substring,\n \t\t\t\t\t int opt, const char *gmsgid, ...)\n-  ATTRIBUTE_GCC_DIAG (5, 6);\n+  ATTRIBUTE_GCC_DIAG (7, 8);\n \n extern bool format_warning_at_substring_n (const substring_loc &fmt_loc,\n+\t\t\t\t\t   const range_label *fmt_label,\n \t\t\t\t\t   location_t param_loc,\n+\t\t\t\t\t   const range_label *param_label,\n \t\t\t\t\t   const char *corrected_substring,\n \t\t\t\t\t   int opt, unsigned HOST_WIDE_INT n,\n \t\t\t\t\t   const char *singular_gmsgid,\n \t\t\t\t\t   const char *plural_gmsgid, ...)\n-  ATTRIBUTE_GCC_DIAG (6, 8) ATTRIBUTE_GCC_DIAG (7, 8);\n+  ATTRIBUTE_GCC_DIAG (8, 10) ATTRIBUTE_GCC_DIAG (9, 10);\n \n /* Implementation detail, for use when implementing\n    LANG_HOOKS_GET_SUBSTRING_LOCATION.  */"}, {"sha": "20e0b99f02ae9b205b01eb1af29949d976b34377", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -1,3 +1,46 @@\n+2018-08-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/diagnostic/aka3.C: New test.\n+\t* g++.dg/diagnostic/param-type-mismatch-2.C: Update expected\n+\toutput to show range labels.\n+\t* g++.dg/diagnostic/param-type-mismatch.C: Likewise.\n+\t* g++.dg/plugin/plugin.exp (plugin_test_list): Add...\n+\t* g++.dg/plugin/show-template-tree-color-labels.C: New test.\n+\t* gcc.dg/bad-binary-ops.c: Update expected output to show range\n+\tlabels.  Add an \"aka\" example.\n+\t* gcc.dg/cpp/pr66415-1.c: Update expected output to show range\n+\tlabels.\n+\t* gcc.dg/format/diagnostic-ranges.c: Likewise.\n+\t* gcc.dg/format/pr72858.c: Likewise.\n+\t* gcc.dg/format/pr78498.c: Likewise.\n+\t* gcc.dg/param-type-mismatch.c: Add \"-Wpointer-sign\" to options.\n+\tUpdate expected output to show range labels.  Add examples of\n+\t-Wincompatible-pointer-types and -Wpointer-sign for parameters.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-bw-line-numbers.c:\n+\tUpdate expected output to show range labels.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-bw.c: Likewise.\n+\t(test_very_wide_line): Adjust so that label is at left-clipping\n+\tboundary.\n+\t(test_very_wide_line_2): New test.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-color-line-numbers.c:\n+\tUpdate expected output to show range labels.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-color.c: Likewise.\n+\t* gcc.dg/plugin/diagnostic-test-show-locus-no-labels.c: New test.\n+\t* gcc.dg/plugin/diagnostic_plugin_show_trees.c (show_tree): Update\n+\tfor new param to gcc_rich_location::add_expr.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_show_locus.c (add_range):\n+\tAdd \"label\" param.\n+\t(test_show_locus): Add examples of labels to various tests.  Tweak\n+\tthe \"very wide_line\" test case and duplicate it, to cover the\n+\tboundary values for clipping of labels against the left-margin.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add\n+\tdiagnostic-test-show-locus-no-labels.c.\n+\t* gcc.dg/pr69554-1.c: Update expected output to show range labels.\n+\tUpdate line numbers of dg-locus directives.\n+\t* gcc.dg/pr69627.c:  Update expected output to show range labels.\n+\t* lib/multiline.exp (proc _build_multiline_regex): Remove\n+\tspecial-case handling of lines with trailing '|'.\n+\n 2018-08-15  Qing Zhao <qing.zhao@oracle.com>\n \n \tPR testsuite/86519"}, {"sha": "1eb4fb2e26a4c9a8ceadd9bdf5c6c5f097612a2e", "filename": "gcc/testsuite/g++.dg/diagnostic/aka3.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka3.C?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -0,0 +1,25 @@\n+/* Verify the \"aka\" descriptions for typedefs are correctly\n+   quoted and shown within labels.  */\n+\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+typedef struct s1 t1;\n+typedef struct s2 {int i;} t2;\n+\n+int foo(t1 *);\n+\n+void test_1 () {\n+  t2 pos;\n+\n+  foo (&pos); // { dg-error \"cannot convert 't2\\\\*' {aka 's2\\\\*'} to 't1\\\\*' {aka 's1\\\\*'}\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   foo (&pos);\n+        ^~~~\n+        |\n+        t2* {aka s2*}\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+ int foo(t1 *);\n+         ^~~~\n+     { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "8cf2dabca64c5324c412a1a3286da8c2d996c4e7", "filename": "gcc/testsuite/g++.dg/diagnostic/param-type-mismatch-2.C", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-2.C?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -12,6 +12,8 @@ int test_1 (int first, const char *second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_1 (first, second, third);\n                            ^~~~~~\n+                           |\n+                           const char*\n      { dg-end-multiline-output \"\" } */\n   // { dg-message \"initializing argument 2 of 'int callee_1\\\\(int, const char\\\\*\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_1 }\n   /* { dg-begin-multiline-output \"\" }\n@@ -30,6 +32,8 @@ int test_2 (int first, const char *second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_2 (first, second, third);\n                            ^~~~~~\n+                           |\n+                           const char*\n      { dg-end-multiline-output \"\" } */\n   // { dg-message \"initializing argument 2 of 'int callee_2\\\\(int, const char\\\\*\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_2 }\n   /* { dg-begin-multiline-output \"\" }\n@@ -51,6 +55,8 @@ int test_3 (int first, const char *second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_3 (first, second, third);\n                            ^~~~~~\n+                           |\n+                           const char*\n      { dg-end-multiline-output \"\" } */\n   // { dg-message \"initializing argument 2 of 'int callee_3\\\\(int, const char\\\\*\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_3 }\n   /* { dg-begin-multiline-output \"\" }"}, {"sha": "50bbd4ae94eab0dce41e9940b6652e18d99b21e8", "filename": "gcc/testsuite/g++.dg/diagnostic/param-type-mismatch.C", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch.C?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -12,6 +12,8 @@ int test_1 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_1 (first, second, third);\n                            ^~~~~~\n+                           |\n+                           int\n      { dg-end-multiline-output \"\" } */\n   // { dg-message \"initializing argument 2 of 'int callee_1\\\\(int, const char\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_1 }\n   /* { dg-begin-multiline-output \"\" }\n@@ -30,6 +32,8 @@ int test_2 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_2 (first, second, third);\n                            ^~~~~~\n+                           |\n+                           int\n      { dg-end-multiline-output \"\" } */\n   // { dg-message \"initializing argument 2 of 'int callee_2\\\\(int, const char\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_2 }\n   /* { dg-begin-multiline-output \"\" }\n@@ -51,6 +55,8 @@ int test_3 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_3 (first, second, third);\n                            ^~~~~~\n+                           |\n+                           int\n      { dg-end-multiline-output \"\" } */\n   // { dg-message \"initializing argument 2 of 'int callee_3\\\\(int, const char\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_3 }\n   /* { dg-begin-multiline-output \"\" }\n@@ -69,6 +75,8 @@ int test_4 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return s4::member_1 (first, second, third);\n                                ^~~~~~\n+                               |\n+                               int\n      { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n  struct s4 { static int member_1 (int one, const char *two, float three); };\n@@ -87,6 +95,8 @@ int test_5 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return inst.member_1 (first, second, third);\n                                 ^~~~~~\n+                                |\n+                                int\n      { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n  struct s5 { int member_1 (int one, const char *two, float three); };\n@@ -104,6 +114,8 @@ int test_6 (int first, int second, float third, s6 *ptr)\n   /* { dg-begin-multiline-output \"\" }\n    return ptr->member_1 (first, second, third);\n                                 ^~~~~~\n+                                |\n+                                int\n      { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n  struct s6 { int member_1 (int one, const char *two, float three); };\n@@ -144,6 +156,8 @@ int test_8 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return s8 <const char *>::member_1 (first, second, third);\n                                               ^~~~~~\n+                                              |\n+                                              int\n      { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n  struct s8 { static int member_1 (int one, T two, float three); };\n@@ -163,6 +177,8 @@ int test_9 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return inst.member_1 (first, second, third);\n                                 ^~~~~~\n+                                |\n+                                int\n      { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n  struct s9 { int member_1 (int one, T two, float three); };\n@@ -180,6 +196,8 @@ int test_10 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_10 (first, second, third);\n                             ^~~~~~\n+                            |\n+                            int\n      { dg-end-multiline-output \"\" } */\n   // { dg-message \"initializing argument 2 of 'int callee_10\\\\(int, int \\\\(\\\\*\\\\)\\\\(int, int\\\\), float\\\\)'\" \"\" { target *-*-* } callee_10 }\n   /* { dg-begin-multiline-output \"\" }\n@@ -198,6 +216,8 @@ int test_11 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_11 (first, second, third);\n                             ^~~~~~\n+                            |\n+                            int\n      { dg-end-multiline-output \"\" } */\n   // { dg-message \"initializing argument 2 of 'int callee_11\\\\(int, int \\\\(\\\\*\\\\)\\\\(int, int\\\\), float\\\\)'\" \"\" { target *-*-* } callee_11 }\n   /* { dg-begin-multiline-output \"\" }"}, {"sha": "d9f54ab9877e86d307e3e6b72dc234eb50d656aa", "filename": "gcc/testsuite/g++.dg/plugin/plugin.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -69,6 +69,7 @@ set plugin_test_list [list \\\n \t  diagnostic-test-inlining-1.C } \\\n     { show_template_tree_color_plugin.c \\\n     \t  show-template-tree-color.C \\\n+    \t  show-template-tree-color-labels.C \\\n     \t  show-template-tree-color-no-elide-type.C } \\\n     { comment_plugin.c comments-1.C } \\\n ]"}, {"sha": "462e1bd33ee5cfb1e5419ef4be89157cc65bd56d", "filename": "gcc/testsuite/g++.dg/plugin/show-template-tree-color-labels.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fshow-template-tree-color-labels.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fshow-template-tree-color-labels.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fshow-template-tree-color-labels.C?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -0,0 +1,38 @@\n+/* Verify colorization of the labels in diagnostic-show-locus.c\n+   for template comparisons.\n+   Doing so requires a plugin; see the comments in the plugin for the\n+   rationale.  */\n+\n+// { dg-options \"-fdiagnostics-color=always -fdiagnostics-show-caret\" }\n+\n+template<typename> struct vector {};\n+template<typename, typename> struct map {};\n+\n+void fn_1(vector<int>);\n+void fn_2(map<int, int>);\n+\n+void test_1 (vector<double> vec)\n+{\n+  fn_1 (vec);\n+  /* { dg-begin-multiline-output \"\" }\n+could not convert '\u001b[01m\u001b[Kvec\u001b[m\u001b[K' from '\u001b[01m\u001b[Kvector<\u001b[01;32m\u001b[Kdouble\u001b[m\u001b[K>\u001b[m\u001b[K' to '\u001b[01m\u001b[Kvector<\u001b[01;32m\u001b[Kint\u001b[m\u001b[K>\u001b[m\u001b[K'\n+   fn_1 (\u001b[01;31m\u001b[Kvec\u001b[m\u001b[K);\n+         \u001b[01;31m\u001b[K^~~\u001b[m\u001b[K\n+         \u001b[01;31m\u001b[K|\u001b[m\u001b[K\n+         \u001b[01;31m\u001b[Kvector<double>\u001b[m\u001b[K\n+     { dg-end-multiline-output \"\" } */\n+  // TODO: we don't yet highlight the mismatching part with color\n+}\n+\n+void test_2 (const map<int, double> &m)\n+{\n+  fn_2 (m);\n+  /* { dg-begin-multiline-output \"\" }\n+could not convert '\u001b[01m\u001b[Km\u001b[m\u001b[K' from '\u001b[01m\u001b[Kmap<[...],\u001b[01;32m\u001b[Kdouble\u001b[m\u001b[K>\u001b[m\u001b[K' to '\u001b[01m\u001b[Kmap<[...],\u001b[01;32m\u001b[Kint\u001b[m\u001b[K>\u001b[m\u001b[K'\n+   fn_2 (\u001b[01;31m\u001b[Km\u001b[m\u001b[K);\n+         \u001b[01;31m\u001b[K^\u001b[m\u001b[K\n+         \u001b[01;31m\u001b[K|\u001b[m\u001b[K\n+         \u001b[01;31m\u001b[Kmap<[...],double>\u001b[m\u001b[K\n+     { dg-end-multiline-output \"\" } */\n+  // TODO: we don't yet highlight the mismatching part with color\n+}"}, {"sha": "46c158e6a5f6780f2edcc8b34ae5dda120937ee5", "filename": "gcc/testsuite/gcc.dg/bad-binary-ops.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fbad-binary-ops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fbad-binary-ops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbad-binary-ops.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -13,6 +13,8 @@ void test_1 ()\n { dg-begin-multiline-output \"\" }\n    myvec[1]/ptr;\n    ~~~~~~~~^\n+        |\n+        __m128\n { dg-end-multiline-output \"\" } */\n \n \n@@ -31,8 +33,12 @@ int test_2 (void)\n /* { dg-begin-multiline-output \"\" }\n    return (some_function ()\n            ~~~~~~~~~~~~~~~~\n+           |\n+           struct s\n     + some_other_function ());\n     ^ ~~~~~~~~~~~~~~~~~~~~~~\n+      |\n+      struct t\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -46,3 +52,23 @@ int test_3 (struct s param_s, struct t param_t)\n    { dg-end-multiline-output \"\" } */\n /* TODO: ideally we'd underline both params here.  */\n }\n+\n+typedef struct s S;\n+typedef struct t T;\n+\n+extern S callee_4a (void);\n+extern T callee_4b (void);\n+\n+int test_4 (void)\n+{\n+  return callee_4a () + callee_4b (); /* { dg-error \"invalid operands to binary \\+\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+   return callee_4a () + callee_4b ();\n+          ~~~~~~~~~~~~ ^ ~~~~~~~~~~~~\n+          |              |\n+          |              T {aka struct t}\n+          S {aka struct s}\n+   { dg-end-multiline-output \"\" } */\n+}\n+"}, {"sha": "cc4e41724a200edaf140da98eae5a8aa210f7032", "filename": "gcc/testsuite/gcc.dg/cpp/pr66415-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr66415-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr66415-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr66415-1.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -11,6 +11,8 @@ fn1 (void)\n /* { dg-begin-multiline-output \"\" }\n    __builtin_printf                                (\"xxxxxxxxxxxxxxxxx%dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");\n                                                                       ~^\n+                                                                       |\n+                                                                       int\n    { dg-end-multiline-output \"\" } */\n \n }"}, {"sha": "84535f018d7323fe565314aba14c0859ac7320af", "filename": "gcc/testsuite/gcc.dg/format/diagnostic-ranges.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -11,6 +11,8 @@ void test_mismatching_types (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello %i\", msg);\n                  ~^   ~~~\n+                  |   |\n+                  int const char *\n                  %s\n    { dg-end-multiline-output \"\" } */\n \n@@ -19,13 +21,18 @@ void test_mismatching_types (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello %s\", 42);\n                  ~^   ~~\n+                  |   |\n+                  |   int\n+                  char *\n                  %d\n    { dg-end-multiline-output \"\" } */\n \n   printf(\"hello %i\", (long)0);  /* { dg-warning \"format '%i' expects argument of type 'int', but argument 2 has type 'long int' \" } */\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello %i\", (long)0);\n                  ~^   ~~~~~~~\n+                  |   |\n+                  int long int\n                  %li\n    { dg-end-multiline-output \"\" } */\n }\n@@ -37,9 +44,13 @@ void test_multiple_arguments (void)\n /* { dg-begin-multiline-output \"\" }\n    printf (\"arg0: %i  arg1: %s arg 2: %i\",\n                             ~^\n+                             |\n+                             char *\n                             %d\n            100, 101, 102);\n                 ~~~           \n+                |\n+                int\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -50,9 +61,13 @@ void test_multiple_arguments_2 (int i, int j)\n /* { dg-begin-multiline-output \"\" }\n    printf (\"arg0: %i  arg1: %s arg 2: %i\",\n                             ~^\n+                             |\n+                             char *\n                             %d\n            100, i + j, 102);\n                 ~~~~~         \n+                  |\n+                  int\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -72,6 +87,8 @@ void multiline_format_string (void) {\n             ~~\n            \"d\"\n            ~^\n+            |\n+            int\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -84,6 +101,8 @@ void test_hex (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello \\x25\\x69\", msg);\n                  ~~~~^~~~   ~~~\n+                     |      |\n+                     int    const char *\n                  \\x25s\n    { dg-end-multiline-output \"\" } */\n }\n@@ -97,6 +116,8 @@ void test_oct (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello \\045\\151\", msg);\n                  ~~~~^~~~   ~~~\n+                     |      |\n+                     int    const char *\n                  \\045s\n    { dg-end-multiline-output \"\" } */\n }\n@@ -112,11 +133,15 @@ void test_multiple (const char *msg)\n           ^~~~~~~~\n           msg);\n           ~~~\n+          |\n+          const char *\n   { dg-end-multiline-output \"\" } */\n \n /* { dg-begin-multiline-output \"\" }\n    printf(\"prefix\"  \"\\x25\"  \"\\151\"  \"suffix\",\n                      ~~~~~~~~^~~~\n+                             |\n+                             int\n                      \\x25\"  \"s\n   { dg-end-multiline-output \"\" } */\n }\n@@ -127,6 +152,8 @@ void test_u8 (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n    printf(u8\"hello %i\", msg);\n                    ~^   ~~~\n+                    |   |\n+                    int const char *\n                    %s\n    { dg-end-multiline-output \"\" } */\n }\n@@ -137,6 +164,8 @@ void test_param (long long_i, long long_j)\n /* { dg-begin-multiline-output \"\" }\n    printf (\"foo %s bar\", long_i + long_j);\n                 ~^       ~~~~~~~~~~~~~~~\n+                 |              |\n+                 char *         long int\n                 %ld\n    { dg-end-multiline-output \"\" } */\n }\n@@ -147,6 +176,8 @@ void test_field_width_specifier (long l, int i1, int i2)\n /* { dg-begin-multiline-output \"\" }\n    printf (\" %*.*d \", l, i1, i2);\n              ~^~~~    ~\n+              |       |\n+              int     long int\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -158,12 +189,16 @@ void test_field_width_specifier_2 (char *d, long foo, long bar)\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_sprintf (d, \" %*ld \", foo, foo);\n                            ~^~~    ~~~\n+                            |      |\n+                            int    long int\n    { dg-end-multiline-output \"\" } */\n \n   __builtin_sprintf (d, \" %*ld \", foo + bar, foo); /* { dg-warning \"28: field width specifier '\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_sprintf (d, \" %*ld \", foo + bar, foo);\n                            ~^~~    ~~~~~~~~~\n+                            |          |\n+                            int        long int\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -173,12 +208,16 @@ void test_field_precision_specifier (char *d, long foo, long bar)\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_sprintf (d, \" %.*ld \", foo, foo);\n                            ~~^~~    ~~~\n+                             |      |\n+                             int    long int\n    { dg-end-multiline-output \"\" } */\n \n   __builtin_sprintf (d, \" %.*ld \", foo + bar, foo); /* { dg-warning \"29: field precision specifier '\\\\.\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_sprintf (d, \" %.*ld \", foo + bar, foo);\n                            ~~^~~    ~~~~~~~~~\n+                             |          |\n+                             int        long int\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -241,10 +280,14 @@ void test_macro (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello \" INT_FMT \" world\", msg);\n           ^~~~~~~~                   ~~~\n+                                     |\n+                                     const char *\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n  #define INT_FMT \"%i\"\n                   ~^\n+                   |\n+                   int\n                   %s\n    { dg-end-multiline-output \"\" } */\n #undef INT_FMT\n@@ -257,10 +300,14 @@ void test_macro_2 (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello %\" PRIu32 \" world\", msg);\n           ^~~~~~~~~                  ~~~\n+                                     |\n+                                     const char *\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n  #define PRIu32 \"u\"\n                  ^\n+                 |\n+                 unsigned int\n    { dg-end-multiline-output \"\" } */\n #undef PRIu32\n }\n@@ -295,6 +342,8 @@ void test_macro_4 (const char *msg)\n /* { dg-begin-multiline-output \"\" }\n  #define FMT_STRING \"hello %i world\"\n                            ~^\n+                            |\n+                            int\n                            %s\n    { dg-end-multiline-output \"\" } */\n #undef FMT_STRING\n@@ -307,10 +356,14 @@ void test_non_contiguous_strings (void)\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_printf(\" %\" \"d \", 0.5);\n                     ^~~~       ~~~\n+                               |\n+                               double\n    { dg-end-multiline-output \"\" } */\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_printf(\" %\" \"d \", 0.5);\n                       ~~~~^\n+                          |\n+                          int\n                       %\" \"f\n    { dg-end-multiline-output \"\" } */\n }\n@@ -324,5 +377,7 @@ void test_const_arrays (void)\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_printf(a, 0.5);\n                     ^  ~~~\n+                       |\n+                       double\n    { dg-end-multiline-output \"\" } */\n }"}, {"sha": "77260943c8c71c1843a4811a4918cbf85af33aee", "filename": "gcc/testsuite/gcc.dg/format/pr72858.c", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr72858.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr72858.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr72858.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -28,25 +28,37 @@ test_x (char *d,\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", lexpr);\n                  ~~~^    ~~~~~\n+                    |    |\n+                    |    long int\n+                    unsigned int\n                  %-8lx\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8x \", ulexpr); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'long unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", ulexpr);\n                  ~~~^    ~~~~~~\n+                    |    |\n+                    |    long unsigned int\n+                    unsigned int\n                  %-8lx\n    { dg-end-multiline-output \"\" } */\n \n   sprintf (d, \" %-8x \", llexpr); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'long long int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", llexpr);\n                  ~~~^    ~~~~~~\n+                    |    |\n+                    |    long long int\n+                    unsigned int\n                  %-8llx\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8x \", ullexpr); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'long long unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", ullexpr);\n                  ~~~^    ~~~~~~~\n+                    |    |\n+                    |    long long unsigned int\n+                    unsigned int\n                  %-8llx\n    { dg-end-multiline-output \"\" } */\n \n@@ -56,18 +68,27 @@ test_x (char *d,\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", fexpr);\n                  ~~~^    ~~~~~\n+                    |    |\n+                    |    double\n+                    unsigned int\n                  %-8f\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8x \", dexpr); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'double'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", dexpr);\n                  ~~~^    ~~~~~\n+                    |    |\n+                    |    double\n+                    unsigned int\n                  %-8f\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8x \", ldexpr); /* { dg-warning \"20: format '%x' expects argument of type 'unsigned int', but argument 3 has type 'long double'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", ldexpr);\n                  ~~~^    ~~~~~~\n+                    |    |\n+                    |    long double\n+                    unsigned int\n                  %-8Lf\n    { dg-end-multiline-output \"\" } */\n \n@@ -76,6 +97,9 @@ test_x (char *d,\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", ptr);\n                  ~~~^    ~~~\n+                    |    |\n+                    |    void *\n+                    unsigned int\n                  %-8p\n    { dg-end-multiline-output \"\" } */\n \n@@ -86,6 +110,9 @@ test_x (char *d,\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8x \", s);\n                  ~~~^    ~\n+                    |    |\n+                    |    struct s\n+                    unsigned int\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -105,12 +132,18 @@ test_lx (char *d,\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", iexpr);\n                  ~~~~^    ~~~~~\n+                     |    |\n+                     |    int\n+                     long unsigned int\n                  %-8x\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8lx \", uiexpr); /* { dg-warning \"21: format '%lx' expects argument of type 'long unsigned int', but argument 3 has type 'unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", uiexpr);\n                  ~~~~^    ~~~~~~\n+                     |    |\n+                     |    unsigned int\n+                     long unsigned int\n                  %-8x\n    { dg-end-multiline-output \"\" } */\n \n@@ -121,12 +154,18 @@ test_lx (char *d,\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", llexpr);\n                  ~~~~^    ~~~~~~\n+                     |    |\n+                     |    long long int\n+                     long unsigned int\n                  %-8llx\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8lx \", ullexpr); /* { dg-warning \"21: format '%lx' expects argument of type 'long unsigned int', but argument 3 has type 'long long unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", ullexpr);\n                  ~~~~^    ~~~~~~~\n+                     |    |\n+                     |    long long unsigned int\n+                     long unsigned int\n                  %-8llx\n    { dg-end-multiline-output \"\" } */\n \n@@ -136,18 +175,27 @@ test_lx (char *d,\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", fexpr);\n                  ~~~~^    ~~~~~\n+                     |    |\n+                     |    double\n+                     long unsigned int\n                  %-8f\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8lx \", dexpr); /* { dg-warning \"21: format '%lx' expects argument of type 'long unsigned int', but argument 3 has type 'double'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", dexpr);\n                  ~~~~^    ~~~~~\n+                     |    |\n+                     |    double\n+                     long unsigned int\n                  %-8f\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8lx \", ldexpr); /* { dg-warning \"21: format '%lx' expects argument of type 'long unsigned int', but argument 3 has type 'long double'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lx \", ldexpr);\n                  ~~~~^    ~~~~~~\n+                     |    |\n+                     |    long double\n+                     long unsigned int\n                  %-8Lf\n    { dg-end-multiline-output \"\" } */\n }\n@@ -170,25 +218,37 @@ test_o (char *d,\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8o \", lexpr);\n                  ~~~^    ~~~~~\n+                    |    |\n+                    |    long int\n+                    unsigned int\n                  %-8lo\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8o \", ulexpr); /* { dg-warning \"20: format '%o' expects argument of type 'unsigned int', but argument 3 has type 'long unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8o \", ulexpr);\n                  ~~~^    ~~~~~~\n+                    |    |\n+                    |    long unsigned int\n+                    unsigned int\n                  %-8lo\n    { dg-end-multiline-output \"\" } */\n \n   sprintf (d, \" %-8o \", llexpr); /* { dg-warning \"20: format '%o' expects argument of type 'unsigned int', but argument 3 has type 'long long int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8o \", llexpr);\n                  ~~~^    ~~~~~~\n+                    |    |\n+                    |    long long int\n+                    unsigned int\n                  %-8llo\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8o \", ullexpr); /* { dg-warning \"20: format '%o' expects argument of type 'unsigned int', but argument 3 has type 'long long unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8o \", ullexpr);\n                  ~~~^    ~~~~~~~\n+                    |    |\n+                    |    long long unsigned int\n+                    unsigned int\n                  %-8llo\n    { dg-end-multiline-output \"\" } */\n }\n@@ -208,12 +268,18 @@ test_lo (char *d,\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lo \", iexpr);\n                  ~~~~^    ~~~~~\n+                     |    |\n+                     |    int\n+                     long unsigned int\n                  %-8o\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8lo \", uiexpr); /* { dg-warning \"21: format '%lo' expects argument of type 'long unsigned int', but argument 3 has type 'unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lo \", uiexpr);\n                  ~~~~^    ~~~~~~\n+                     |    |\n+                     |    unsigned int\n+                     long unsigned int\n                  %-8o\n    { dg-end-multiline-output \"\" } */\n \n@@ -224,12 +290,18 @@ test_lo (char *d,\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lo \", llexpr);\n                  ~~~~^    ~~~~~~\n+                     |    |\n+                     |    long long int\n+                     long unsigned int\n                  %-8llo\n    { dg-end-multiline-output \"\" } */\n   sprintf (d, \" %-8lo \", ullexpr); /* { dg-warning \"21: format '%lo' expects argument of type 'long unsigned int', but argument 3 has type 'long long unsigned int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8lo \", ullexpr);\n                  ~~~~^    ~~~~~~~\n+                     |    |\n+                     |    long long unsigned int\n+                     long unsigned int\n                  %-8llo\n    { dg-end-multiline-output \"\" } */\n }\n@@ -246,6 +318,9 @@ test_e (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8e \", iexpr);\n                  ~~~^    ~~~~~\n+                    |    |\n+                    |    int\n+                    double\n                  %-8d\n    { dg-end-multiline-output \"\" } */\n \n@@ -257,6 +332,9 @@ test_e (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8e \", ldexpr);\n                  ~~~^    ~~~~~~\n+                    |    |\n+                    |    long double\n+                    double\n                  %-8Le\n    { dg-end-multiline-output \"\" } */\n }\n@@ -273,6 +351,9 @@ test_Le (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8Le \", iexpr);\n                  ~~~~^    ~~~~~\n+                     |    |\n+                     |    int\n+                     long double\n                  %-8d\n    { dg-end-multiline-output \"\" } */\n \n@@ -282,13 +363,19 @@ test_Le (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8Le \", fexpr);\n                  ~~~~^    ~~~~~\n+                     |    |\n+                     |    double\n+                     long double\n                  %-8e\n    { dg-end-multiline-output \"\" } */\n \n   sprintf (d, \" %-8Le \", dexpr); /* { dg-warning \"21: format '%Le' expects argument of type 'long double', but argument 3 has type 'double'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8Le \", dexpr);\n                  ~~~~^    ~~~~~\n+                     |    |\n+                     |    double\n+                     long double\n                  %-8e\n    { dg-end-multiline-output \"\" } */\n \n@@ -307,6 +394,9 @@ test_E (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8E \", iexpr);\n                  ~~~^    ~~~~~\n+                    |    |\n+                    |    int\n+                    double\n                  %-8d\n    { dg-end-multiline-output \"\" } */\n \n@@ -318,6 +408,9 @@ test_E (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8E \", ldexpr);\n                  ~~~^    ~~~~~~\n+                    |    |\n+                    |    long double\n+                    double\n                  %-8LE\n    { dg-end-multiline-output \"\" } */\n }\n@@ -334,20 +427,29 @@ test_LE (char *d, int iexpr, float fexpr, double dexpr, long double ldexpr)\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8LE \", iexpr);\n                  ~~~~^    ~~~~~\n+                     |    |\n+                     |    int\n+                     long double\n                  %-8d\n    { dg-end-multiline-output \"\" } */\n \n   sprintf (d, \" %-8LE \", fexpr); /* { dg-warning \"21: format '%LE' expects argument of type 'long double', but argument 3 has type 'double'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8LE \", fexpr);\n                  ~~~~^    ~~~~~\n+                     |    |\n+                     |    double\n+                     long double\n                  %-8E\n    { dg-end-multiline-output \"\" } */\n \n   sprintf (d, \" %-8LE \", dexpr); /* { dg-warning \"21: format '%LE' expects argument of type 'long double', but argument 3 has type 'double'\" } */\n /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \" %-8LE \", dexpr);\n                  ~~~~^    ~~~~~\n+                     |    |\n+                     |    double\n+                     long double\n                  %-8E\n    { dg-end-multiline-output \"\" } */\n \n@@ -367,18 +469,24 @@ test_everything (char *d, long lexpr)\n   /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \"before %-+*.*lld after\", lexpr, lexpr, lexpr);\n                        ~~~^~~~~~         ~~~~~\n+                          |              |\n+                          int            long int\n    { dg-end-multiline-output \"\" } */\n \n   /* { dg-warning \"28: field precision specifier '\\\\.\\\\*' expects argument of type 'int', but argument 4 has type 'long int'\" \"\" { target *-*-* } test_everything_sprintf } */\n   /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \"before %-+*.*lld after\", lexpr, lexpr, lexpr);\n                        ~~~~~^~~~                ~~~~~\n+                            |                   |\n+                            int                 long int\n    { dg-end-multiline-output \"\" } */\n \n   /* { dg-warning \"31: format '%lld' expects argument of type 'long long int', but argument 5 has type 'long int'\" \"\" { target *-*-* } test_everything_sprintf } */\n   /* { dg-begin-multiline-output \"\" }\n    sprintf (d, \"before %-+*.*lld after\", lexpr, lexpr, lexpr);\n                        ~~~~~~~~^                       ~~~~~\n+                               |                       |\n+                               long long int           long int\n                        %-+*.*ld\n    { dg-end-multiline-output \"\" } */\n }"}, {"sha": "b911b04eb7d36ba878c42dc405a00615465b1f64", "filename": "gcc/testsuite/gcc.dg/format/pr78498.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr78498.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr78498.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fpr78498.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -7,6 +7,8 @@ void f (void)\n /* { dg-begin-multiline-output \"\" }\n    __builtin_printf (\"%i\", \"\");\n                       ~^   ~~\n+                       |   |\n+                       int char *\n                       %s\n    { dg-end-multiline-output \"\" } */\n }"}, {"sha": "9e654a9e9c65abbe260b01ecb264a421d3109560", "filename": "gcc/testsuite/gcc.dg/param-type-mismatch.c", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fparam-type-mismatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fparam-type-mismatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparam-type-mismatch.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-fdiagnostics-show-caret\" }  */\n+/* { dg-options \"-fdiagnostics-show-caret -Wpointer-sign\" }  */\n \n /* A collection of calls where argument 2 is of the wrong type.  */\n \n@@ -12,6 +12,8 @@ int test_1 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_1 (first, second, third);\n                            ^~~~~~\n+                           |\n+                           int\n      { dg-end-multiline-output \"\" } */\n   /* { dg-message \"expected 'const char \\\\*' but argument is of type 'int'\" \"\" { target *-*-* } callee_1 } */\n   /* { dg-begin-multiline-output \"\" }\n@@ -30,6 +32,8 @@ int test_2 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_2 (first, second, third);\n                            ^~~~~~\n+                           |\n+                           int\n      { dg-end-multiline-output \"\" } */\n   /* { dg-message \"expected 'const char \\\\*' but argument is of type 'int'\" \"\" { target *-*-* } callee_2 } */\n   /* { dg-begin-multiline-output \"\" }\n@@ -51,6 +55,8 @@ int test_3 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_3 (first, second, third);\n                            ^~~~~~\n+                           |\n+                           int\n      { dg-end-multiline-output \"\" } */\n   /* { dg-message \"expected 'const char \\\\*' but argument is of type 'int'\" \"\" { target *-*-* } callee_3 } */\n   /* { dg-begin-multiline-output \"\" }\n@@ -69,6 +75,8 @@ int test_4 (int first, const char *second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_4 (first, second, third);\n                            ^~~~~~\n+                           |\n+                           const char *\n      { dg-end-multiline-output \"\" } */\n   /* { dg-message \"expected 'float' but argument is of type 'const char \\\\*'\" \"\" { target *-*-* } callee_4 } */\n   /* { dg-begin-multiline-output \"\" }\n@@ -87,6 +95,8 @@ int test_5 (int first, const char *second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_5 (first, second, third);\n                            ^~~~~~\n+                           |\n+                           const char *\n      { dg-end-multiline-output \"\" } */\n   /* { dg-message \"expected 'float' but argument is of type 'const char \\\\*'\" \"\" { target *-*-* } callee_5 } */\n   /* { dg-begin-multiline-output \"\" }\n@@ -105,6 +115,8 @@ int test_6 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_6 (first, second, third);\n                            ^~~~~~\n+                           |\n+                           int\n      { dg-end-multiline-output \"\" } */\n   /* { dg-message \" expected 'int \\\\(\\\\*\\\\)\\\\(int,  int\\\\)' but argument is of type 'int'\" \"\" { target *-*-* } callee_6 } */\n   /* { dg-begin-multiline-output \"\" }\n@@ -123,10 +135,52 @@ int test_7 (int first, int second, float third)\n   /* { dg-begin-multiline-output \"\" }\n    return callee_7 (first, second, third);\n                            ^~~~~~\n+                           |\n+                           int\n      { dg-end-multiline-output \"\" } */\n   /* { dg-message \" expected 'int \\\\(\\\\*\\\\)\\\\(int,  int\\\\)' but argument is of type 'int'\" \"\" { target *-*-* } callee_7 } */\n   /* { dg-begin-multiline-output \"\" }\n  extern int callee_7 (int one, int (*)(int, int), float three);\n                                ^~~~~~~~~~~~~~~~~\n      { dg-end-multiline-output \"\" } */\n }\n+\n+/* -Wincompatible-pointer-types for a parameter.  */\n+\n+extern int callee_8 (int one, float *two, float (three)); /* { dg-line callee_8 } */\n+\n+int test_8 (int first, int *second, float third)\n+{\n+  return callee_8 (first, second, third); /* { dg-warning \"passing argument 2 of 'callee_8' from incompatible pointer type\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_8 (first, second, third);\n+                           ^~~~~~\n+                           |\n+                           int *\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-message \"expected 'float \\\\*' but argument is of type 'int \\\\*'\" \"\" { target *-*-* } callee_8 } */\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_8 (int one, float *two, float (three));\n+                               ~~~~~~~^~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* -Wpointer-sign for a parameter.  */\n+\n+extern int callee_9 (int one, int *two, float (three)); /* { dg-line callee_9 } */\n+\n+int test_9 (int first, unsigned int *second, float third)\n+{\n+  return callee_9 (first, second, third); /* { dg-warning \"pointer targets in passing argument 2 of 'callee_9' differ in signedness\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_9 (first, second, third);\n+                           ^~~~~~\n+                           |\n+                           unsigned int *\n+     { dg-end-multiline-output \"\" } */\n+  /* { dg-message \"expected 'int \\\\*' but argument is of type 'unsigned int \\\\*'\" \"\" { target *-*-* } callee_9 } */\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_9 (int one, int *two, float (three));\n+                               ~~~~~^~~\n+     { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "89213eb2b255d218951c74edfd98d8577aa22d92", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-bw-line-numbers.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw-line-numbers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw-line-numbers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw-line-numbers.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -31,6 +31,8 @@ void test_multiline (void)\n    |        ~~~~~~~~~~~~~~~~~\n 27 |        + second_function ());\n    |        ^ ~~~~~~~~~~~~~~~~~~\n+   |        |\n+   |        label\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -43,8 +45,10 @@ void test_very_wide_line (void)\n    | 0         0         0         0         0         0         1         \n    | 4         5         6         7         8         9         0         \n    | 0123456789012345678901234567890123456789012345678901234567890123456789\n-41 |                                          float f = foo * bar;\n+43 |                                          float f = foo * bar;\n    |                                                    ~~~~^~~~~\n+   |                                                        |\n+   |                                                        label\n    |                                                    bar * foo\n    { dg-end-multiline-output \"\" } */\n #endif\n@@ -58,7 +62,7 @@ void test_fixit_insert (void)\n #if 0\n    int a[2][2] = { 0, 1 , 2, 3 }; /* { dg-warning \"insertion hints\" } */\n /* { dg-begin-multiline-output \"\" }\n-59 |    int a[2][2] = { 0, 1 , 2, 3 };\n+63 |    int a[2][2] = { 0, 1 , 2, 3 };\n    |                    ^~~~\n    |                    {   }\n    { dg-end-multiline-output \"\" } */\n@@ -72,7 +76,7 @@ void test_fixit_remove (void)\n #if 0\n   int a;; /* { dg-warning \"example of a removal hint\" } */\n /* { dg-begin-multiline-output \"\" }\n-73 |   int a;;\n+77 |   int a;;\n    |         ^\n    |         -\n    { dg-end-multiline-output \"\" } */\n@@ -86,7 +90,7 @@ void test_fixit_replace (void)\n #if 0\n   gtk_widget_showall (dlg); /* { dg-warning \"example of a replacement hint\" } */\n /* { dg-begin-multiline-output \"\" }\n-87 |   gtk_widget_showall (dlg);\n+91 |   gtk_widget_showall (dlg);\n    |   ^~~~~~~~~~~~~~~~~~\n    |   gtk_widget_show_all\n    { dg-end-multiline-output \"\" } */\n@@ -108,7 +112,7 @@ void test_fixit_insert_newline (void)\n     }\n /* { dg-begin-multiline-output \"\" }\n     |+      break;\n-106 |     case 'b':\n+110 |     case 'b':\n     |     ^~~~~~~~\n    { dg-end-multiline-output \"\" } */\n #endif"}, {"sha": "bdfa420d8497d4bbb19d78cc09869df9bb92f1f5", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-bw.c", "status": "modified", "additions": 70, "deletions": 2, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-bw.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -44,6 +44,8 @@ void test_multiline (void)\n         ~~~~~~~~~~~~~~~~~\n         + second_function ());\n         ^ ~~~~~~~~~~~~~~~~~~\n+        |\n+        label\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -66,6 +68,8 @@ void test_many_lines (void)\n /* { dg-begin-multiline-output \"\" }\n    x = (first_function_with_a_very_long_name (lorem, ipsum, dolor, sit, amet,\n         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+        |\n+        label 1\n                                              consectetur, adipiscing, elit,\n                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                                              sed, eiusmod, tempor,\n@@ -76,6 +80,9 @@ void test_many_lines (void)\n                                              ~~~~~~~~~~~~~~~~~~~~~~\n         + second_function_with_a_very_long_name (lorem, ipsum, dolor, sit,\n         ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+        | |\n+        | label 2\n+        label 0\n                                                  amet, consectetur,\n                                                  ~~~~~~~~~~~~~~~~~~\n                                                  adipiscing, elit, sed,\n@@ -115,13 +122,32 @@ void test_caret_within_proper_range (void)\n void test_very_wide_line (void)\n {\n #if 0\n-                                                                                float f = foo * bar; /* { dg-warning \"95: test\" } */\n+                             float x                                                    = foo * bar; /* { dg-warning \"95: test\" } */\n /* { dg-begin-multiline-output \"\" }\n      0         0         0         0         0         0         1     \n      4         5         6         7         8         9         0     \n  6789012345678901234567890123456789012345678901234567890123456789012345\n-                                              float f = foo * bar;\n+ x                                                    = foo * bar;\n+ ~                                                      ~~~~^~~~~\n+ |                                                          |\n+ label 1                                                    label 0\n+                                                        bar * foo\n+   { dg-end-multiline-output \"\" } */\n+#endif\n+}\n+\n+void test_very_wide_line_2 (void)\n+{\n+#if 0\n+                            float x                                                     = foo * bar; /* { dg-warning \"95: test\" } */\n+/* { dg-begin-multiline-output \"\" }\n+     0         0         0         0         0         0         1     \n+     4         5         6         7         8         9         0     \n+ 6789012345678901234567890123456789012345678901234567890123456789012345\n+                                                      = foo * bar;\n                                                         ~~~~^~~~~\n+                                                            |\n+                                                            label 0\n                                                         bar * foo\n    { dg-end-multiline-output \"\" } */\n #endif\n@@ -226,27 +252,69 @@ void test_many_nested_locations (void)\n    ^\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n      ^~~~~ ^~~~~ ^~~~~ ^~~ ^~~~  ^~~~~~~~~~~ ^~~~~~~~~~ ^~~~\n+     |     |     |     |   |     |           |          |\n+     |     |     |     |   label label       label      label\n+     label label label label\n      LOREM IPSUM DOLOR SIT AMET  CONSECTETUR ADIPISCING ELIT\n      sed do eiusmod tempor incididunt ut labore et dolore magna\n      ^~~ ^~ ^~~~~~~ ^~~~~~ ^~~~~~~~~~ ^~ ^~~~~~ ^~ ^~~~~~ ^~~~~\n+     |   |  |       |      |          |  |      |  |      |\n+     |   |  |       |      |          |  |      |  label  label\n+     |   |  |       |      |          |  label  label\n+     |   |  label   label  label      label\n+     |   label\n+     label\n      SED DO EIUSMOD TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA\n      aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n      ^~~~~~  ^~ ^~~~ ^~ ^~~~~ ^~~~~~  ^~~~ ^~~~~~~ ^~~~~~~~~~~~\n+     |       |  |    |  |     |       |    |       |\n+     |       |  |    |  |     |       |    label   label\n+     |       |  |    |  label label   label\n+     |       |  |    label\n+     |       |  label\n+     label   label\n      ALIQUA  UT ENIM AD MINIM VENIAM  QUIS NOSTRUD EXERCITATION\n      ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis\n      ^~~~~~~ ^~~~~~~ ^~~~ ^~ ^~~~~~~ ^~ ^~ ^~~~~~~ ^~~~~~~~~  ^~~~\n+     |       |       |    |  |       |  |  |       |          |\n+     |       |       |    |  |       |  |  label   label      label\n+     |       |       |    |  |       |  label\n+     |       |       |    |  label   label\n+     |       |       |    label\n+     label   label   label\n      ULLAMCO LABORIS NISI UT ALIQUIP EX EA COMMODO CONSEQUAT  DUIS\n      aute irure dolor in reprehenderit in voluptate velit esse cillum\n      ^~~~ ^~~~~ ^~~~~ ^~ ^~~~~~~~~~~~~ ^~ ^~~~~~~~~ ^~~~~ ^~~~ ^~~~~~\n+     |    |     |     |  |             |  |         |     |    |\n+     |    |     |     |  |             |  |         |     |    label\n+     |    |     |     |  |             |  label     label label\n+     |    |     |     |  label         label\n+     |    label label label\n+     label\n      AUTE IRURE DOLOR IN REPREHENDERIT IN VOLUPTATE VELIT ESSE CILLUM\n      dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n      ^~~~~~ ^~ ^~~~~~ ^~~~~ ^~~~~~~~  ^~~~~~~~~ ^~~~ ^~~~~~~~\n+     |      |  |      |     |         |         |    |\n+     |      |  |      |     |         |         |    label\n+     |      |  label  label label     label     label\n+     label  label\n      DOLORE EU FUGIAT NULLA PARIATUR  EXCEPTEUR SINT OCCAECAT\n      cupidatat non proident, sunt in culpa qui officia deserunt\n      ^~~~~~~~~ ^~~ ^~~~~~~~  ^~~~ ^~ ^~~~~ ^~~ ^~~~~~~ ^~~~~~~~\n+     |         |   |         |    |  |     |   |       |\n+     |         |   |         |    |  |     |   label   label\n+     |         |   |         |    |  label label\n+     |         |   |         |    label\n+     |         |   label     label\n+     label     label\n      CUPIDATAT NON PROIDENT  SUNT IN CULPA QUI OFFICIA DESERUNT\n      mollit anim id est laborum.\n      ^~~~~~ ^~~~ ^~ ^~~ ^~~~~~~\n+     |      |    |  |   |\n+     |      |    |  |   label\n+     |      |    |  label\n+     |      |    label\n+     label  label\n      MOLLIT ANIM ID EST LABORUM\n    { dg-end-multiline-output \"\" } */\n }"}, {"sha": "0453c52b2ccfa2328f6a30e9acbf5cd4ea141c2b", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-color-line-numbers.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color-line-numbers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color-line-numbers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color-line-numbers.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -19,6 +19,8 @@ void test_multiline (void)\n    |        \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n 15 |        \u001b[01;35m\u001b[K+\u001b[m\u001b[K \u001b[34m\u001b[Ksecond_function ()\u001b[m\u001b[K);\n    |        \u001b[01;35m\u001b[K^\u001b[m\u001b[K \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+   |        \u001b[01;35m\u001b[K|\u001b[m\u001b[K\n+   |        \u001b[01;35m\u001b[Klabel\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }"}, {"sha": "094bc6535d5e4c9748c815bea1facef81eba0902", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-color.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-color.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -44,6 +44,8 @@ void test_multiline (void)\n         \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n         \u001b[01;35m\u001b[K+\u001b[m\u001b[K \u001b[34m\u001b[Ksecond_function ()\u001b[m\u001b[K);\n         \u001b[01;35m\u001b[K^\u001b[m\u001b[K \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+        \u001b[01;35m\u001b[K|\u001b[m\u001b[K\n+        \u001b[01;35m\u001b[Klabel\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif\n }\n@@ -66,6 +68,8 @@ void test_many_lines (void)\n /* { dg-begin-multiline-output \"\" }\n    x = (\u001b[32m\u001b[Kfirst_function_with_a_very_long_name (lorem, ipsum, dolor, sit, amet,\u001b[m\u001b[K\n         \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+        \u001b[32m\u001b[K|\u001b[m\u001b[K\n+        \u001b[32m\u001b[Klabel 1\u001b[m\u001b[K\n  \u001b[32m\u001b[K                                            consectetur, adipiscing, elit,\u001b[m\u001b[K\n                                              \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n  \u001b[32m\u001b[K                                            sed, eiusmod, tempor,\u001b[m\u001b[K\n@@ -76,6 +80,9 @@ void test_many_lines (void)\n                                              \u001b[32m\u001b[K~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n         \u001b[01;35m\u001b[K+\u001b[m\u001b[K \u001b[34m\u001b[Ksecond_function_with_a_very_long_name (lorem, ipsum, dolor, sit,\n         \u001b[01;35m\u001b[K^\u001b[m\u001b[K \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n+        \u001b[01;35m\u001b[K|\u001b[m\u001b[K \u001b[34m\u001b[K|\u001b[m\u001b[K\n+        \u001b[01;35m\u001b[K|\u001b[m\u001b[K \u001b[34m\u001b[Klabel 2\u001b[m\u001b[K\n+        \u001b[01;35m\u001b[Klabel 0\u001b[m\u001b[K\n  \u001b[34m\u001b[K                                                amet, consectetur,\u001b[m\u001b[K\n                                                  \u001b[34m\u001b[K~~~~~~~~~~~~~~~~~~\u001b[m\u001b[K\n  \u001b[34m\u001b[K                                                adipiscing, elit, sed,\u001b[m\u001b[K\n@@ -115,13 +122,15 @@ void test_caret_within_proper_range (void)\n void test_very_wide_line (void)\n {\n #if 0\n-                                                                                float f = foo * bar; /* { dg-warning \"95: test\" } */\n+                             float x                                                    = foo * bar; /* { dg-warning \"95: test\" } */\n /* { dg-begin-multiline-output \"\" }\n      0         0         0         0         0         0         1     \n      4         5         6         7         8         9         0     \n  6789012345678901234567890123456789012345678901234567890123456789012345\n-                                              float f = \u001b[01;35m\u001b[Kfoo * bar\u001b[m\u001b[K;\n-                                                        \u001b[01;35m\u001b[K~~~~^~~~~\u001b[m\u001b[K\n+ \u001b[32m\u001b[Kx\u001b[m\u001b[K                                                    = \u001b[01;35m\u001b[Kfoo * bar\u001b[m\u001b[K;\n+ \u001b[32m\u001b[K~\u001b[m\u001b[K                                                      \u001b[01;35m\u001b[K~~~~^~~~~\u001b[m\u001b[K\n+ \u001b[32m\u001b[K|\u001b[m\u001b[K                                                          \u001b[01;35m\u001b[K|\u001b[m\u001b[K\n+ \u001b[32m\u001b[Klabel 1\u001b[m\u001b[K                                                    \u001b[01;35m\u001b[Klabel 0\u001b[m\u001b[K\n                                                         \u001b[32m\u001b[Kbar * foo\u001b[m\u001b[K\n    { dg-end-multiline-output \"\" } */\n #endif"}, {"sha": "4c06368a201aa7d4dd9bd006e0641f39d2de42e6", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-no-labels.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-no-labels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-no-labels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-no-labels.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdiagnostics-show-caret -fno-diagnostics-show-labels\" } */\n+\n+/* Verify that -fno-diagnostics-show-labels works.  */\n+\n+/* This is a collection of unittests for diagnostic_show_locus;\n+   see the overview in diagnostic_plugin_test_show_locus.c.\n+\n+   In particular, note the discussion of why we need a very long line here:\n+01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n+   and that we can't use macros in this file.  */\n+\n+void test_multiline (void)\n+{\n+#if 0\n+  x = (first_function ()\n+       + second_function ()); /* { dg-warning \"test\" } */\n+\n+  /* This shouldn't have a label.  */\n+  /* { dg-begin-multiline-output \"\" }\n+   x = (first_function ()\n+        ~~~~~~~~~~~~~~~~~\n+        + second_function ());\n+        ^ ~~~~~~~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+#endif\n+}"}, {"sha": "71e6740b17876acb0874b8db4ff97fd1d46981fb", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_show_trees.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_show_trees.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_show_trees.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_show_trees.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -41,7 +41,7 @@ show_tree (tree node)\n     return;\n \n   gcc_rich_location richloc (EXPR_LOCATION (node));\n-  richloc.add_expr (node);\n+  richloc.add_expr (node, NULL);\n \n   if (richloc.get_num_locations () < 2)\n     {"}, {"sha": "3d7853813ae5d0120e961b3037dd59f0d6fb0daf", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_show_locus.c", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_show_locus.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -145,9 +145,10 @@ custom_diagnostic_finalizer (diagnostic_context *context,\n \n static void\n add_range (rich_location *richloc, location_t start, location_t finish,\n-\t   bool show_caret_p)\n+\t   bool show_caret_p, const range_label *label = NULL)\n {\n-  richloc->add_range (make_location (start, start, finish), show_caret_p);\n+  richloc->add_range (make_location (start, start, finish), show_caret_p,\n+\t\t      label);\n }\n \n /* Exercise the diagnostic machinery to emit various warnings,\n@@ -192,7 +193,8 @@ test_show_locus (function *fun)\n   if (0 == strcmp (fnname, \"test_multiline\"))\n     {\n       const int line = fnstart_line + 2;\n-      rich_location richloc (line_table, get_loc (line + 1, 7));\n+      text_range_label label (\"label\");\n+      rich_location richloc (line_table, get_loc (line + 1, 7), &label);\n       add_range (&richloc, get_loc (line, 7), get_loc (line, 23), false);\n       add_range (&richloc, get_loc (line + 1, 9), get_loc (line + 1, 26),\n \t\t false);\n@@ -202,10 +204,14 @@ test_show_locus (function *fun)\n   if (0 == strcmp (fnname, \"test_many_lines\"))\n     {\n       const int line = fnstart_line + 2;\n-      rich_location richloc (line_table, get_loc (line + 5, 7));\n-      add_range (&richloc, get_loc (line, 7), get_loc (line + 4, 65), false);\n+      text_range_label label0 (\"label 0\");\n+      text_range_label label1 (\"label 1\");\n+      text_range_label label2 (\"label 2\");\n+      rich_location richloc (line_table, get_loc (line + 5, 7), &label0);\n+      add_range (&richloc, get_loc (line, 7), get_loc (line + 4, 65), false,\n+\t\t &label1);\n       add_range (&richloc, get_loc (line + 5, 9), get_loc (line + 10, 61),\n-\t\t false);\n+\t\t false, &label2);\n       warning_at (&richloc, 0, \"test\");\n     }\n \n@@ -231,16 +237,40 @@ test_show_locus (function *fun)\n     }\n \n   /* Example of a very wide line, where the information of interest\n-     is beyond the width of the terminal (hardcoded above).  */\n+     is beyond the width of the terminal (hardcoded above), with\n+     a secondary location that exactly fits on the left-margin.  */\n   if (0 == strcmp (fnname, \"test_very_wide_line\"))\n     {\n       const int line = fnstart_line + 2;\n       global_dc->show_ruler_p = true;\n+      text_range_label label0 (\"label 0\");\n+      text_range_label label1 (\"label 1\");\n+      rich_location richloc (line_table,\n+\t\t\t     make_location (get_loc (line, 94),\n+\t\t\t\t\t    get_loc (line, 90),\n+\t\t\t\t\t    get_loc (line, 98)),\n+\t\t\t     &label0);\n+      richloc.add_range (get_loc (line, 35), false, &label1);\n+      richloc.add_fixit_replace (\"bar * foo\");\n+      warning_at (&richloc, 0, \"test\");\n+      global_dc->show_ruler_p = false;\n+    }\n+\n+  /* Likewise, but with a secondary location that's immediately before\n+     the left margin; the location and label should be gracefully dropped.  */\n+  if (0 == strcmp (fnname, \"test_very_wide_line_2\"))\n+    {\n+      const int line = fnstart_line + 2;\n+      global_dc->show_ruler_p = true;\n+      text_range_label label0 (\"label 0\");\n+      text_range_label label1 (\"label 1\");\n       rich_location richloc (line_table,\n \t\t\t     make_location (get_loc (line, 94),\n \t\t\t\t\t    get_loc (line, 90),\n-\t\t\t\t\t    get_loc (line, 98)));\n+\t\t\t\t\t    get_loc (line, 98)),\n+\t\t\t     &label0);\n       richloc.add_fixit_replace (\"bar * foo\");\n+      richloc.add_range (get_loc (line, 34), false, &label1);\n       warning_at (&richloc, 0, \"test\");\n       global_dc->show_ruler_p = false;\n     }\n@@ -391,13 +421,14 @@ test_show_locus (function *fun)\n \n   /* Example of many locations and many fixits.\n      Underline (separately) every word in a comment, and convert them\n-     to upper case.  */\n+     to upper case.  Give all of the ranges labels (sharing one label).  */\n   if (0 == strcmp (fnname, \"test_many_nested_locations\"))\n     {\n       const char *file = LOCATION_FILE (fnstart);\n       const int start_line = fnstart_line + 2;\n       const int finish_line = start_line + 7;\n       location_t loc = get_loc (start_line - 1, 2);\n+      text_range_label label (\"label\");\n       rich_location richloc (line_table, loc);\n       for (int line = start_line; line <= finish_line; line++)\n \t{\n@@ -418,7 +449,7 @@ test_show_locus (function *fun)\n \t\t      location_t word\n \t\t\t= make_location (start_of_word, start_of_word,\n \t\t\t\t\t end_of_word);\n-\t\t      richloc.add_range (word, true);\n+\t\t      richloc.add_range (word, true, &label);\n \n \t\t      /* Add a fixit, converting to upper case.  */\n \t\t      char_span word_span = content.subspan (start_idx, idx - start_idx);"}, {"sha": "86ab1dd8d932aeca9c881c22d61758eb2f3ba439", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -72,6 +72,7 @@ set plugin_test_list [list \\\n     { diagnostic_plugin_test_show_locus.c \\\n \t  diagnostic-test-show-locus-bw.c \\\n \t  diagnostic-test-show-locus-color.c \\\n+\t  diagnostic-test-show-locus-no-labels.c \\\n \t  diagnostic-test-show-locus-bw-line-numbers.c \\\n \t  diagnostic-test-show-locus-color-line-numbers.c \\\n \t  diagnostic-test-show-locus-parseable-fixits.c \\"}, {"sha": "b979b5596f2a443ad21f14e6e8251183afdad0b0", "filename": "gcc/testsuite/gcc.dg/pr69554-1.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69554-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69554-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69554-1.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -12,6 +12,9 @@ int test_1 (const char *p, const char *q)\n /* { dg-begin-multiline-output \"\" }\n    return (p + 1) + (q + 1);\n           ~~~~~~~ ^ ~~~~~~~\n+             |         |\n+             |         const char *\n+             const char *\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -26,10 +29,14 @@ int test_2 (const char *p, const char *q)\n /* { dg-begin-multiline-output \"\" }\n    return (p + 1)\n           ~~~~~~~\n+             |\n+             const char *\n             +\n             ^\n              (q + 1);\n              ~~~~~~~\n+                |\n+                const char *\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -43,16 +50,20 @@ int test_3 (const char *p, const char *q)\n \n            +  /* { dg-error \"invalid operands\" } */\n              (q + 1);\n-/* { dg-locus \"12\" \"\" { target *-*-* } \"44\" } */\n+/* { dg-locus \"12\" \"\" { target *-*-* } \"51\" } */\n /* { dg-begin-multiline-output \"\" }\n    return (p + 1)\n           ~~~~~~~\n+             |\n+             const char *\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n             +\n             ^\n               (q + 1);\n               ~~~~~~~\n+                 |\n+                 const char *\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -68,12 +79,16 @@ int test_4 (const char *p, const char *q)\n /* { dg-begin-multiline-output \"\" }\n    return (p + 1)\n           ~~~~~~~\n+             |\n+             const char *\n             +\n             ^\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n               (q + 1);\n               ~~~~~~~\n+                 |\n+                 const char *\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -88,10 +103,12 @@ int test_5 (const char *p, const char *q)\n            +  /* { dg-error \"invalid operands\" } */\n \n              (q + 1); /* { dg-locus \"14\" } */\n-/* { dg-locus \"12\" \"\" { target *-*-* } \"88\" } */\n+/* { dg-locus \"12\" \"\" { target *-*-* } \"103\" } */\n /* { dg-begin-multiline-output \"\" }\n    return (p + 1)\n           ~~~~~~~\n+             |\n+             const char *\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n             +\n@@ -100,6 +117,8 @@ int test_5 (const char *p, const char *q)\n /* { dg-begin-multiline-output \"\" }\n               (q + 1);\n               ~~~~~~~\n+                 |\n+                 const char *\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -136,10 +155,12 @@ int test_6 (const char *p, const char *q)\n \t     fringilla sapien elit vitae nisl. Fusce mattis commodo risus\n \t     nec convallis. */\n              (q + 1); /* { dg-locus \"14\" } */\n-/* { dg-locus \"12\" \"\" { target *-*-* } \"125\" } */\n+/* { dg-locus \"12\" \"\" { target *-*-* } \"144\" } */\n /* { dg-begin-multiline-output \"\" }\n    return (p + 1)\n           ~~~~~~~\n+             |\n+             const char *\n    { dg-end-multiline-output \"\" } */\n /* { dg-begin-multiline-output \"\" }\n             +\n@@ -148,5 +169,7 @@ int test_6 (const char *p, const char *q)\n /* { dg-begin-multiline-output \"\" }\n               (q + 1);\n               ~~~~~~~\n+                 |\n+                 const char *\n    { dg-end-multiline-output \"\" } */\n }"}, {"sha": "bc48bb1aa81e75d79de69c08b3cb8fdcd068381d", "filename": "gcc/testsuite/gcc.dg/pr69627.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69627.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69627.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69627.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -11,6 +11,8 @@ foo ()\n /* { dg-begin-multiline-output \"\" }\n    t[1] / s;\n    ~~~~ ^\n+    |\n+    float\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -23,5 +25,7 @@ bar ()\n /* { dg-begin-multiline-output \"\" }\n    t[1] / s[0];\n    ~~~~ ^ ~~~~\n+    |      |\n+    float  const int *\n    { dg-end-multiline-output \"\" } */\n }"}, {"sha": "5f8b62fd301e791d41e124ac1734c93eaeb5f077", "filename": "gcc/testsuite/lib/multiline.exp", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Flib%2Fmultiline.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftestsuite%2Flib%2Fmultiline.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fmultiline.exp?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -202,26 +202,6 @@ proc _build_multiline_regex { multiline index } {\n \tif {[string match \"*^\" $line] || [string match \"*~\" $line]} {\n \t    # Assume a line containing a caret/range.  This must be\n \t    # an exact match.\n-\t} elseif {[string match \"*\\\\|\" $line]} {\n-\t    # Assume a source line with a right-margin.  Support\n-\t    # arbitrary text in place of any whitespace before the\n-\t    # right-margin, to deal with comments containing containing\n-\t    # DejaGnu directives.\n-\n-\t    # Remove final \"\\|\":\n-\t    set rexp [string range $rexp 0 [expr [string length $rexp] - 3]]\n-\n-\t    # Trim off trailing whitespace:\n-\t    set old_length [string length $rexp]\n-\t    set rexp [string trimright $rexp]\n-\t    set new_length [string length $rexp]\n-\n-\t    # Replace the trimmed whitespace with \".\" chars to match anything:\n-\t    set ws [string repeat \".\" [expr $old_length - $new_length]]\n-\t    set rexp \"${rexp}${ws}\"\n-\n-\t    # Add back the trailing '\\|':\n-\t    set rexp \"${rexp}\\\\|\"\n \t} else {\n \t    # Assume that we have a quoted source line.\n \t    if {![string equal \"\" $line] }  {"}, {"sha": "2789d71b24f5f695d1415cbdbc51f2dc9332b25e", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -1112,6 +1112,8 @@ general_init (const char *argv0, bool init_signals)\n \n   global_dc->show_caret\n     = global_options_init.x_flag_diagnostics_show_caret;\n+  global_dc->show_labels_p\n+    = global_options_init.x_flag_diagnostics_show_labels;\n   global_dc->show_line_numbers_p\n     = global_options_init.x_flag_diagnostics_show_line_numbers;\n   global_dc->show_option_requested"}, {"sha": "a39144c6b014bd5ea609566431a4437d9c0c4aea", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -1,3 +1,17 @@\n+2018-08-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/line-map.h (struct location_range): Add \"m_label\" field.\n+\t(class rich_location): Add description of labels to leading\n+\tcomment.\n+\t(rich_location::rich_location): Add \"label\" param, defaulting to\n+\tNULL.\n+\t(rich_location::add_range): Likewise.\n+\t(struct label_text): New struct.\n+\t(class range_label): New abstract base class.\n+\t* line-map.c (rich_location::rich_location): Add \"label\" param;\n+\tuse it.\n+\t(rich_location::add_range): Likewise.\n+\n 2018-08-08  Nathan Sidwell  <nathan@acm.org>\n \n \tMake linemap::included_from a location"}, {"sha": "4f0ff8719a79abe5779851205de0549f60b1436e", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 70, "deletions": 8, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -1281,8 +1281,11 @@ typedef struct\n   bool sysp;\n } expanded_location;\n \n+class range_label;\n+\n /* A location within a rich_location: a caret&range, with\n-   the caret potentially flagged for display.  */\n+   the caret potentially flagged for display, and an optional\n+   label.  */\n \n struct location_range\n {\n@@ -1298,6 +1301,9 @@ struct location_range\n \n      where \"1\" and \"2\" are notionally carets.  */\n   bool m_show_caret_p;\n+\n+  /* If non-NULL, the label for this range.  */\n+  const range_label *m_label;\n };\n \n /* A partially-embedded vec for use within rich_location for storing\n@@ -1439,6 +1445,8 @@ class fixit_hint;\n    Additional ranges may be added to help the user identify other\n    pertinent clauses in a diagnostic.\n \n+   Ranges can (optionally) be given labels via class range_label.\n+\n    rich_location instances are intended to be allocated on the stack\n    when generating diagnostics, and to be short-lived.\n \n@@ -1484,18 +1492,22 @@ class fixit_hint;\n    equal to their caret point.  The frontend overrides the diagnostic\n    context's default caret character for these ranges.\n \n-   Example E\n-   *********\n+   Example E (range labels)\n+   ************************\n       printf (\"arg0: %i  arg1: %s arg2: %i\",\n                                ^~\n+                               |\n+                               const char *\n               100, 101, 102);\n                    ~~~\n+                   |\n+                   int\n    This rich location has two ranges:\n    - range 0 is at the \"%s\" with start = caret = \"%\" and finish at\n-     the \"s\".\n+     the \"s\".  It has a range_label (\"const char *\").\n    - range 1 has start/finish covering the \"101\" and is not flagged for\n-     caret printing; it is perhaps at the start of \"101\".\n-\n+     caret printing.  The caret is at the start of \"101\", where its\n+     range_label is printed (\"int\").\n \n    Fix-it hints\n    ------------\n@@ -1587,7 +1599,8 @@ class rich_location\n   /* Constructors.  */\n \n   /* Constructing from a location.  */\n-  rich_location (line_maps *set, source_location loc);\n+  rich_location (line_maps *set, source_location loc,\n+\t\t const range_label *label = NULL);\n \n   /* Destructor.  */\n   ~rich_location ();\n@@ -1597,7 +1610,8 @@ class rich_location\n   source_location get_loc (unsigned int idx) const;\n \n   void\n-  add_range (source_location loc,  bool show_caret_p);\n+  add_range (source_location loc,  bool show_caret_p,\n+\t     const range_label *label = NULL);\n \n   void\n   set_range (unsigned int idx, source_location loc, bool show_caret_p);\n@@ -1721,6 +1735,54 @@ class rich_location\n   bool m_fixits_cannot_be_auto_applied;\n };\n \n+/* A struct for the result of range_label::get_text: a NUL-terminated buffer\n+   of localized text, and a flag to determine if the caller should \"free\" the\n+   buffer.  */\n+\n+struct label_text\n+{\n+  label_text ()\n+  : m_buffer (NULL), m_caller_owned (false)\n+  {}\n+\n+  label_text (char *buffer, bool caller_owned)\n+  : m_buffer (buffer), m_caller_owned (caller_owned)\n+  {}\n+\n+  void maybe_free ()\n+  {\n+    if (m_caller_owned)\n+      free (m_buffer);\n+  }\n+\n+  char *m_buffer;\n+  bool m_caller_owned;\n+};\n+\n+/* Abstract base class for labelling a range within a rich_location\n+   (e.g. for labelling expressions with their type).\n+\n+   Generating the text could require non-trivial work, so this work\n+   is delayed (via the \"get_text\" virtual function) until the diagnostic\n+   printing code \"knows\" it needs it, thus avoiding doing it e.g. for\n+   warnings that are filtered by command-line flags.  This virtual\n+   function also isolates libcpp and the diagnostics subsystem from\n+   the front-end and middle-end-specific code for generating the text\n+   for the labels.\n+\n+   Like the rich_location instances they annotate, range_label instances\n+   are intended to be allocated on the stack when generating diagnostics,\n+   and to be short-lived.  */\n+\n+class range_label\n+{\n+ public:\n+  virtual ~range_label () {}\n+\n+  /* Get localized text for the label.  */\n+  virtual label_text get_text () const = 0;\n+};\n+\n /* A fix-it hint: a suggested insertion, replacement, or deletion of text.\n    We handle these three types of edit with one class, by representing\n    them as replacement of a half-open range:"}, {"sha": "f0e6318e412cd8823ee5fcdd08fe86d6d950efaa", "filename": "libcpp/line-map.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e6ae576c48cd8efc26670b0d0bbb9e961393bf/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=96e6ae576c48cd8efc26670b0d0bbb9e961393bf", "patch": "@@ -1988,7 +1988,8 @@ line_table_dump (FILE *stream, struct line_maps *set, unsigned int num_ordinary,\n \n /* Construct a rich_location with location LOC as its initial range.  */\n \n-rich_location::rich_location (line_maps *set, source_location loc) :\n+rich_location::rich_location (line_maps *set, source_location loc,\n+\t\t\t      const range_label *label) :\n   m_line_table (set),\n   m_ranges (),\n   m_column_override (0),\n@@ -1997,7 +1998,7 @@ rich_location::rich_location (line_maps *set, source_location loc) :\n   m_seen_impossible_fixit (false),\n   m_fixits_cannot_be_auto_applied (false)\n {\n-  add_range (loc, true);\n+  add_range (loc, true, label);\n }\n \n /* The destructor for class rich_location.  */\n@@ -2073,11 +2074,13 @@ rich_location::override_column (int column)\n /* Add the given range.  */\n \n void\n-rich_location::add_range (source_location loc, bool show_caret_p)\n+rich_location::add_range (source_location loc, bool show_caret_p,\n+\t\t\t  const range_label *label)\n {\n   location_range range;\n   range.m_loc = loc;\n   range.m_show_caret_p = show_caret_p;\n+  range.m_label = label;\n   m_ranges.push (range);\n }\n "}]}