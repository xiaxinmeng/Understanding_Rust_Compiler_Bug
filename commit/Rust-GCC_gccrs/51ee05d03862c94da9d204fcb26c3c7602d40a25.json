{"sha": "51ee05d03862c94da9d204fcb26c3c7602d40a25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFlZTA1ZDAzODYyYzk0ZGE5ZDIwNGZjYjI2YzNjNzYwMmQ0MGEyNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-03-25T09:28:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-03-25T09:28:33Z"}, "message": "combine.c (simplify_compare_const): Add MODE argument.\n\n\t* combine.c (simplify_compare_const): Add MODE argument.\n\tHandle mode_width 0 as very large mode_width.\n\t(try_combine, simplify_comparison): Adjust callers.\n\nFrom-SVN: r208805", "tree": {"sha": "35a37fa129107f583b80eb1d0e5849bb490dbc3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35a37fa129107f583b80eb1d0e5849bb490dbc3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51ee05d03862c94da9d204fcb26c3c7602d40a25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ee05d03862c94da9d204fcb26c3c7602d40a25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51ee05d03862c94da9d204fcb26c3c7602d40a25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51ee05d03862c94da9d204fcb26c3c7602d40a25/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8acccddfd67f1a0c6c4716700e188b1d0f1a148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8acccddfd67f1a0c6c4716700e188b1d0f1a148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8acccddfd67f1a0c6c4716700e188b1d0f1a148"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "8c8fbeaf43b74459df861326a220e89a90536945", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ee05d03862c94da9d204fcb26c3c7602d40a25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ee05d03862c94da9d204fcb26c3c7602d40a25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51ee05d03862c94da9d204fcb26c3c7602d40a25", "patch": "@@ -1,5 +1,9 @@\n 2014-03-25  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* combine.c (simplify_compare_const): Add MODE argument.\n+\tHandle mode_width 0 as very large mode_width.\n+\t(try_combine, simplify_comparison): Adjust callers.\n+\n \t* cselib.c (cselib_hash_rtx): Perform addition in unsigned\n \ttype to avoid signed integer overflow.\n \t* explow.c (plus_constant): Likewise."}, {"sha": "f7a279e86d5b653266ac06cf5fac8545ec669d83", "filename": "gcc/combine.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51ee05d03862c94da9d204fcb26c3c7602d40a25/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51ee05d03862c94da9d204fcb26c3c7602d40a25/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=51ee05d03862c94da9d204fcb26c3c7602d40a25", "patch": "@@ -446,7 +446,8 @@ static rtx simplify_shift_const (rtx, enum rtx_code, enum machine_mode, rtx,\n \t\t\t\t int);\n static int recog_for_combine (rtx *, rtx, rtx *);\n static rtx gen_lowpart_for_combine (enum machine_mode, rtx);\n-static enum rtx_code simplify_compare_const (enum rtx_code, rtx, rtx *);\n+static enum rtx_code simplify_compare_const (enum rtx_code, enum machine_mode,\n+\t\t\t\t\t     rtx, rtx *);\n static enum rtx_code simplify_comparison (enum rtx_code, rtx *, rtx *);\n static void update_table_tick (rtx);\n static void record_value_for_reg (rtx, rtx, rtx);\n@@ -2949,7 +2950,7 @@ try_combine (rtx i3, rtx i2, rtx i1, rtx i0, int *new_direct_jump_p,\n \t{\n \t  compare_code = orig_compare_code = GET_CODE (*cc_use_loc);\n \t  compare_code = simplify_compare_const (compare_code,\n-\t\t\t\t\t\t op0, &op1);\n+\t\t\t\t\t\t GET_MODE (i2dest), op0, &op1);\n \t  target_canonicalize_comparison (&compare_code, &op0, &op1, 1);\n \t}\n \n@@ -10817,9 +10818,9 @@ gen_lowpart_for_combine (enum machine_mode omode, rtx x)\n    *POP1 may be updated.  */\n \n static enum rtx_code\n-simplify_compare_const (enum rtx_code code, rtx op0, rtx *pop1)\n+simplify_compare_const (enum rtx_code code, enum machine_mode mode,\n+\t\t\trtx op0, rtx *pop1)\n {\n-  enum machine_mode mode = GET_MODE (op0);\n   unsigned int mode_width = GET_MODE_PRECISION (mode);\n   HOST_WIDE_INT const_op = INTVAL (*pop1);\n \n@@ -10835,7 +10836,7 @@ simplify_compare_const (enum rtx_code code, rtx op0, rtx *pop1)\n   if (const_op\n       && (code == EQ || code == NE || code == GE || code == GEU\n \t  || code == LT || code == LTU)\n-      && mode_width <= HOST_BITS_PER_WIDE_INT\n+      && mode_width - 1 < HOST_BITS_PER_WIDE_INT\n       && exact_log2 (const_op & GET_MODE_MASK (mode)) >= 0\n       && (nonzero_bits (op0, mode)\n \t  == (unsigned HOST_WIDE_INT) (const_op & GET_MODE_MASK (mode))))\n@@ -10882,7 +10883,7 @@ simplify_compare_const (enum rtx_code code, rtx op0, rtx *pop1)\n       /* If we are doing a <= 0 comparison on a value known to have\n \t a zero sign bit, we can replace this with == 0.  */\n       else if (const_op == 0\n-\t       && mode_width <= HOST_BITS_PER_WIDE_INT\n+\t       && mode_width - 1 < HOST_BITS_PER_WIDE_INT\n \t       && (nonzero_bits (op0, mode)\n \t\t   & ((unsigned HOST_WIDE_INT) 1 << (mode_width - 1)))\n \t       == 0)\n@@ -10911,7 +10912,7 @@ simplify_compare_const (enum rtx_code code, rtx op0, rtx *pop1)\n       /* If we are doing a > 0 comparison on a value known to have\n \t a zero sign bit, we can replace this with != 0.  */\n       else if (const_op == 0\n-\t       && mode_width <= HOST_BITS_PER_WIDE_INT\n+\t       && mode_width - 1 < HOST_BITS_PER_WIDE_INT\n \t       && (nonzero_bits (op0, mode)\n \t\t   & ((unsigned HOST_WIDE_INT) 1 << (mode_width - 1)))\n \t       == 0)\n@@ -10927,7 +10928,7 @@ simplify_compare_const (enum rtx_code code, rtx op0, rtx *pop1)\n \t  /* ... fall through ...  */\n \t}\n       /* (unsigned) < 0x80000000 is equivalent to >= 0.  */\n-      else if (mode_width <= HOST_BITS_PER_WIDE_INT\n+      else if (mode_width - 1 < HOST_BITS_PER_WIDE_INT\n \t       && (unsigned HOST_WIDE_INT) const_op\n \t       == (unsigned HOST_WIDE_INT) 1 << (mode_width - 1))\n \t{\n@@ -10943,7 +10944,7 @@ simplify_compare_const (enum rtx_code code, rtx op0, rtx *pop1)\n       if (const_op == 0)\n \tcode = EQ;\n       /* (unsigned) <= 0x7fffffff is equivalent to >= 0.  */\n-      else if (mode_width <= HOST_BITS_PER_WIDE_INT\n+      else if (mode_width - 1 < HOST_BITS_PER_WIDE_INT\n \t       && (unsigned HOST_WIDE_INT) const_op\n \t       == ((unsigned HOST_WIDE_INT) 1 << (mode_width - 1)) - 1)\n \t{\n@@ -10962,7 +10963,7 @@ simplify_compare_const (enum rtx_code code, rtx op0, rtx *pop1)\n \t}\n \n       /* (unsigned) >= 0x80000000 is equivalent to < 0.  */\n-      else if (mode_width <= HOST_BITS_PER_WIDE_INT\n+      else if (mode_width - 1 < HOST_BITS_PER_WIDE_INT\n \t       && (unsigned HOST_WIDE_INT) const_op\n \t       == (unsigned HOST_WIDE_INT) 1 << (mode_width - 1))\n \t{\n@@ -10978,7 +10979,7 @@ simplify_compare_const (enum rtx_code code, rtx op0, rtx *pop1)\n       if (const_op == 0)\n \tcode = NE;\n       /* (unsigned) > 0x7fffffff is equivalent to < 0.  */\n-      else if (mode_width <= HOST_BITS_PER_WIDE_INT\n+      else if (mode_width - 1 < HOST_BITS_PER_WIDE_INT\n \t       && (unsigned HOST_WIDE_INT) const_op\n \t       == ((unsigned HOST_WIDE_INT) 1 << (mode_width - 1)) - 1)\n \t{\n@@ -11185,7 +11186,7 @@ simplify_comparison (enum rtx_code code, rtx *pop0, rtx *pop1)\n \n       /* Try to simplify the compare to constant, possibly changing the\n \t comparison op, and/or changing op1 to zero.  */\n-      code = simplify_compare_const (code, op0, &op1);\n+      code = simplify_compare_const (code, mode, op0, &op1);\n       const_op = INTVAL (op1);\n \n       /* Compute some predicates to simplify code below.  */"}]}