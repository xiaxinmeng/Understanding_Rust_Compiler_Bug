{"sha": "00020c1638f4b23d9889cad741ef40b4997775bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwMjBjMTYzOGY0YjIzZDk4ODljYWQ3NDFlZjQwYjQ5OTc3NzViZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2009-06-24T04:03:51Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2009-06-24T04:03:51Z"}, "message": "configure.ac: Add --enable-build-with-cxx.\n\n./:\t* configure.ac: Add --enable-build-with-cxx.  When set, add c++ to\n\tboot_languages.  Only bootstrap target libraries listed in\n\ttarget_libs for some boot language.  Add --with-stage1-ldflags,\n\t--with-stage1-libs, --with-boot-ldflags, --with-boot-libs.  Remove\n\twith_host_libstdcxx from ppllibs.  Only add -fkeep-inline-functions\n\tif not building with C++.\n\t* Makefile.def: For target_module libstdc++-v3, set bootstrap=true.\n\t* Makefile.tpl (STAGE1_LDFLAGS, STAGE1_LIBS): New variables.\n\t(POSTSTAGE1_LDFLAGS, POSTSTAGE1_LIBS): New variables.\n\t(HOST_EXPORTS): Add STAGE1_LDFLAGS to LDFLAGS.  Export HOST_LIBS.\n\t(POSTSTAGE1_HOST_EXPORTS): Set CXX and CXX_FOR_BUILD.  Add\n\tPOSTSTAGE1_LDFLAGS to LDFLAGS.  Export HOST_LIBS.\n\t(POSTSTAGE1_FLAGS_TO_PASS): Likewise.\n\t* configure, Makefile.in: Rebuild.\ngcc/:\n\t* configure.ac: Invoke AC_PROG_CXX.  Separate C specific warnings\n\tfrom loose_warn into c_loose_warn and from strict_warn into\n\tc_strict_warn.  Set and substitute warn_cxxflags.  Check for\n\t--enable-build-with-cxx.  Set and substitute\n\tENABLE_BUILD_WITH_CXX.  Set and substitute HOST_LIBS.\n\t* Makefile.in (CXXFLAGS): New variable.\n\t(C_LOOSE_WARN, C_STRICT_WARN): New variables.\n\t(GCC_WARN_CFLAGS): Add $(C_LOOSE_WARN).  Add $(C_STRICT_WARN) if\n\tthe default is the same as $(STRICT_WARN).\n\t(GCC_WARN_CXXFLAGS, WARN_CXXFLAGS): New variables.\n\t(CXX): New variable.\n\t(COMPILER): New value if ENABLE_BUILD_WITH_CXX.\n\t(COMPILER_FLAGS, LINKER, LINKER_FLAGS): Likewise.\n\t(ALL_COMPILERFLAGS, ALL_LINKERFLAGS): Likewise.\n\t(HOST_LIBS): New variable.\n\t(GCC_CFLAGS): Add $(C_LOOSE_WARN).\n\t(ALL_CXXFLAGS): New variable.\n\t(LIBS, BACKENDLIBS): Add $(HOST_LIBS).\n\t* doc/install.texi (Configuration): Document\n\t--enable-build-with-cxx, --with-stage1-ldflags,\n\t--with-stage1-libs, --with-boot-ldflags, --with-boot-libs.\n\t* configure: Rebuild.\n\nFrom-SVN: r148889", "tree": {"sha": "20ac25787d7feed69119a7cd8e85e41e13482447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20ac25787d7feed69119a7cd8e85e41e13482447"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00020c1638f4b23d9889cad741ef40b4997775bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00020c1638f4b23d9889cad741ef40b4997775bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00020c1638f4b23d9889cad741ef40b4997775bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00020c1638f4b23d9889cad741ef40b4997775bf/comments", "author": null, "committer": null, "parents": [{"sha": "9006a1617947532ece5e1db63f5fa9199dc747c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9006a1617947532ece5e1db63f5fa9199dc747c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9006a1617947532ece5e1db63f5fa9199dc747c2"}], "stats": {"total": 15444, "additions": 10195, "deletions": 5249}, "files": [{"sha": "4059ec1e7b961fb87f42218e975ed7c53f3e7078", "filename": "ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00020c1638f4b23d9889cad741ef40b4997775bf/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00020c1638f4b23d9889cad741ef40b4997775bf/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=00020c1638f4b23d9889cad741ef40b4997775bf", "patch": "@@ -1,3 +1,20 @@\n+2009-06-23  Ian Lance Taylor  <iant@google.com>\n+\n+\t* configure.ac: Add --enable-build-with-cxx.  When set, add c++ to\n+\tboot_languages.  Only bootstrap target libraries listed in\n+\ttarget_libs for some boot language.  Add --with-stage1-ldflags,\n+\t--with-stage1-libs, --with-boot-ldflags, --with-boot-libs.  Remove\n+\twith_host_libstdcxx from ppllibs.  Only add -fkeep-inline-functions\n+\tif not building with C++.\n+\t* Makefile.def: For target_module libstdc++-v3, set bootstrap=true.\n+\t* Makefile.tpl (STAGE1_LDFLAGS, STAGE1_LIBS): New variables.\n+\t(POSTSTAGE1_LDFLAGS, POSTSTAGE1_LIBS): New variables.\n+\t(HOST_EXPORTS): Add STAGE1_LDFLAGS to LDFLAGS.  Export HOST_LIBS.\n+\t(POSTSTAGE1_HOST_EXPORTS): Set CXX and CXX_FOR_BUILD.  Add\n+\tPOSTSTAGE1_LDFLAGS to LDFLAGS.  Export HOST_LIBS.\n+\t(POSTSTAGE1_FLAGS_TO_PASS): Likewise.\n+\t* configure, Makefile.in: Rebuild.\n+\n 2009-06-23  Li Feng  <nemokingdom@gmail.com>\n \n \t* MAINTAINERS: Added my name to write-after-approval list."}, {"sha": "fb963fe7824c7979062bdc9dff64aa80e715a65f", "filename": "Makefile.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00020c1638f4b23d9889cad741ef40b4997775bf/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00020c1638f4b23d9889cad741ef40b4997775bf/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=00020c1638f4b23d9889cad741ef40b4997775bf", "patch": "@@ -141,7 +141,10 @@ host_modules= { module= libtermcap; no_check=true;\n host_modules= { module= utils; no_check=true; };\n host_modules= { module= gnattools; };\n \n-target_modules = { module= libstdc++-v3; lib_path=.libs; raw_cxx=true; };\n+target_modules = { module= libstdc++-v3;\n+\t\t   bootstrap=true;\n+\t\t   lib_path=.libs;\n+\t\t   raw_cxx=true; };\n target_modules = { module= libmudflap; lib_path=.libs; };\n target_modules = { module= libssp; lib_path=.libs; };\n target_modules = { module= newlib; };"}, {"sha": "cccb0f973f54898f50aa1f49852a4bb5db3e33ca", "filename": "Makefile.in", "status": "modified", "additions": 572, "deletions": 8, "changes": 580, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00020c1638f4b23d9889cad741ef40b4997775bf/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00020c1638f4b23d9889cad741ef40b4997775bf/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=00020c1638f4b23d9889cad741ef40b4997775bf", "patch": "@@ -117,6 +117,19 @@ BUILD_SUBDIR = @build_subdir@\n # directories built for the build system.\n BUILD_CONFIGARGS = @build_configargs@ --with-build-subdir=\"$(BUILD_SUBDIR)\"\n \n+# Linker flags to use on the host, for stage1 or when not\n+# bootstrapping.\n+STAGE1_LDFLAGS = @stage1_ldflags@\n+\n+# Libraries to use on the host, for stage1 or when not bootstrapping.\n+STAGE1_LIBS = @stage1_libs@\n+\n+# Linker flags to use for stage2 and later.\n+POSTSTAGE1_LDFLAGS = @poststage1_ldflags@\n+\n+# Libraries to use for stage2 and later.\n+POSTSTAGE1_LIBS = @poststage1_libs@\n+\n # This is the list of variables to export in the environment when\n # configuring any subdirectory.  It must also be exported whenever\n # recursing into a build directory in case that directory's Makefile\n@@ -182,7 +195,7 @@ HOST_EXPORTS = \\\n \tCC_FOR_BUILD=\"$(CC_FOR_BUILD)\"; export CC_FOR_BUILD; \\\n \tDLLTOOL=\"$(DLLTOOL)\"; export DLLTOOL; \\\n \tLD=\"$(LD)\"; export LD; \\\n-\tLDFLAGS=\"$(LDFLAGS)\"; export LDFLAGS; \\\n+\tLDFLAGS=\"$(STAGE1_LDFLAGS) $(LDFLAGS)\"; export LDFLAGS; \\\n \tNM=\"$(NM)\"; export NM; \\\n \tRANLIB=\"$(RANLIB)\"; export RANLIB; \\\n \tWINDRES=\"$(WINDRES)\"; export WINDRES; \\\n@@ -197,6 +210,7 @@ HOST_EXPORTS = \\\n \tOBJDUMP_FOR_TARGET=\"$(OBJDUMP_FOR_TARGET)\"; export OBJDUMP_FOR_TARGET; \\\n \tRANLIB_FOR_TARGET=\"$(RANLIB_FOR_TARGET)\"; export RANLIB_FOR_TARGET; \\\n \tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n+\tHOST_LIBS=\"$(STAGE1_LIBS)\"; export HOST_LIBS; \\\n \tGMPLIBS=\"$(HOST_GMPLIBS)\"; export GMPLIBS; \\\n \tGMPINC=\"$(HOST_GMPINC)\"; export GMPINC; \\\n \tPPLLIBS=\"$(HOST_PPLLIBS)\"; export PPLLIBS; \\\n@@ -215,8 +229,16 @@ POSTSTAGE1_HOST_EXPORTS = \\\n \t  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/ \\\n \t  $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS\"; export CC; \\\n \tCC_FOR_BUILD=\"$$CC\"; export CC_FOR_BUILD; \\\n-\tGNATBIND=\"$$r/$(HOST_SUBDIR)/prev-gcc/gnatbind\"; export GNATBIND \\\n-\tLDFLAGS=\"$(BOOT_LDFLAGS)\"; export LDFLAGS;\n+\tCXX=\"$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/prev-gcc/g++$(exeext) \\\n+\t  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/ -nostdinc++ \\\n+\t  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include/$(TARGET_SUBDIR) \\\n+\t  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include \\\n+\t  -I$$r/$(srcdir)/libstdc++-v3/libsupc++ \\\n+\t  -L$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/src/.libs\"; export CXX; \\\n+\tCXX_FOR_BUILD=\"$$CXX\"; export CXX_FOR_BUILD; \\\n+\tGNATBIND=\"$$r/$(HOST_SUBDIR)/prev-gcc/gnatbind\"; export GNATBIND; \\\n+\tLDFLAGS=\"$(POSTSTAGE1_LDFLAGS) $(BOOT_LDFLAGS)\"; export LDFLAGS; \\\n+\tHOST_LIBS=\"$(POSTSTAGE1_LIBS)\"; export HOST_LIBS;\n \n # Target libraries are put under this directory:\n TARGET_SUBDIR = @target_subdir@\n@@ -690,8 +712,11 @@ X11_FLAGS_TO_PASS = \\\n # Flags to pass to stage2 and later makes.\n \n POSTSTAGE1_FLAGS_TO_PASS = \\\n-\tCC=\"$${CC}\" CC_FOR_BUILD=\"$${CC_FOR_BUILD}\" GNATBIND=\"$${GNATBIND}\" \\\n-\tLDFLAGS=\"$(BOOT_LDFLAGS)\" \\\n+\tCC=\"$${CC}\" CC_FOR_BUILD=\"$${CC_FOR_BUILD}\" \\\n+\tCXX=\"$${CXX}\" CXX_FOR_BUILD=\"$${CXX_FOR_BUILD}\" \\\n+\tGNATBIND=\"$${GNATBIND}\" \\\n+\tLDFLAGS=\"$(POSTSTAGE1_LDFLAGS) $(BOOT_LDFLAGS)\" \\\n+\tHOST_LIBS=\"$(POSTSTAGE1_LIBS)\" \\\n \t\"`echo 'ADAFLAGS=$(BOOT_ADAFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`\"\n \n # Flags to pass down to makes which are built with the target environment.\n@@ -996,7 +1021,9 @@ all-host: maybe-all-gnattools\n \n .PHONY: all-target\n \n+@if target-libstdc++-v3-no-bootstrap\n all-target: maybe-all-target-libstdc++-v3\n+@endif target-libstdc++-v3-no-bootstrap\n all-target: maybe-all-target-libmudflap\n all-target: maybe-all-target-libssp\n all-target: maybe-all-target-newlib\n@@ -42509,7 +42536,6 @@ configure-target-libstdc++-v3: stage_current\n @if target-libstdc++-v3\n maybe-configure-target-libstdc++-v3: configure-target-libstdc++-v3\n configure-target-libstdc++-v3: \n-\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \techo \"Checking multilib configuration for libstdc++-v3...\"; \\\n@@ -42546,6 +42572,276 @@ configure-target-libstdc++-v3:\n \n \n \n+.PHONY: configure-stage1-target-libstdc++-v3 maybe-configure-stage1-target-libstdc++-v3\n+maybe-configure-stage1-target-libstdc++-v3:\n+@if target-libstdc++-v3-bootstrap\n+maybe-configure-stage1-target-libstdc++-v3: configure-stage1-target-libstdc++-v3\n+configure-stage1-target-libstdc++-v3:\n+\t@[ $(current_stage) = stage1 ] || $(MAKE) stage1-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libstdc++-v3\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE1_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libstdc++-v3...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile || exit 0; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS; \\\n+\techo Configuring stage 1 in $(TARGET_SUBDIR)/libstdc++-v3 ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libstdc++-v3 ; \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libstdc++-v3/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libstdc++-v3\"; \\\n+\tlibsrcdir=\"$$s/libstdc++-v3\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  $(STAGE1_CONFIGURE_FLAGS)\n+@endif target-libstdc++-v3-bootstrap\n+\n+.PHONY: configure-stage2-target-libstdc++-v3 maybe-configure-stage2-target-libstdc++-v3\n+maybe-configure-stage2-target-libstdc++-v3:\n+@if target-libstdc++-v3-bootstrap\n+maybe-configure-stage2-target-libstdc++-v3: configure-stage2-target-libstdc++-v3\n+configure-stage2-target-libstdc++-v3:\n+\t@[ $(current_stage) = stage2 ] || $(MAKE) stage2-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libstdc++-v3\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE2_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libstdc++-v3...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile || exit 0; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS; \\\n+\techo Configuring stage 2 in $(TARGET_SUBDIR)/libstdc++-v3 ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libstdc++-v3 ; \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libstdc++-v3/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libstdc++-v3\"; \\\n+\tlibsrcdir=\"$$s/libstdc++-v3\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGE2_CONFIGURE_FLAGS)\n+@endif target-libstdc++-v3-bootstrap\n+\n+.PHONY: configure-stage3-target-libstdc++-v3 maybe-configure-stage3-target-libstdc++-v3\n+maybe-configure-stage3-target-libstdc++-v3:\n+@if target-libstdc++-v3-bootstrap\n+maybe-configure-stage3-target-libstdc++-v3: configure-stage3-target-libstdc++-v3\n+configure-stage3-target-libstdc++-v3:\n+\t@[ $(current_stage) = stage3 ] || $(MAKE) stage3-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libstdc++-v3\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE3_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libstdc++-v3...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile || exit 0; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS; \\\n+\techo Configuring stage 3 in $(TARGET_SUBDIR)/libstdc++-v3 ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libstdc++-v3 ; \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libstdc++-v3/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libstdc++-v3\"; \\\n+\tlibsrcdir=\"$$s/libstdc++-v3\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGE3_CONFIGURE_FLAGS)\n+@endif target-libstdc++-v3-bootstrap\n+\n+.PHONY: configure-stage4-target-libstdc++-v3 maybe-configure-stage4-target-libstdc++-v3\n+maybe-configure-stage4-target-libstdc++-v3:\n+@if target-libstdc++-v3-bootstrap\n+maybe-configure-stage4-target-libstdc++-v3: configure-stage4-target-libstdc++-v3\n+configure-stage4-target-libstdc++-v3:\n+\t@[ $(current_stage) = stage4 ] || $(MAKE) stage4-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libstdc++-v3\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE4_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libstdc++-v3...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile || exit 0; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS; \\\n+\techo Configuring stage 4 in $(TARGET_SUBDIR)/libstdc++-v3 ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libstdc++-v3 ; \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libstdc++-v3/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libstdc++-v3\"; \\\n+\tlibsrcdir=\"$$s/libstdc++-v3\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGE4_CONFIGURE_FLAGS)\n+@endif target-libstdc++-v3-bootstrap\n+\n+.PHONY: configure-stageprofile-target-libstdc++-v3 maybe-configure-stageprofile-target-libstdc++-v3\n+maybe-configure-stageprofile-target-libstdc++-v3:\n+@if target-libstdc++-v3-bootstrap\n+maybe-configure-stageprofile-target-libstdc++-v3: configure-stageprofile-target-libstdc++-v3\n+configure-stageprofile-target-libstdc++-v3:\n+\t@[ $(current_stage) = stageprofile ] || $(MAKE) stageprofile-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libstdc++-v3\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEprofile_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libstdc++-v3...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile || exit 0; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS; \\\n+\techo Configuring stage profile in $(TARGET_SUBDIR)/libstdc++-v3 ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libstdc++-v3 ; \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libstdc++-v3/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libstdc++-v3\"; \\\n+\tlibsrcdir=\"$$s/libstdc++-v3\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGEprofile_CONFIGURE_FLAGS)\n+@endif target-libstdc++-v3-bootstrap\n+\n+.PHONY: configure-stagefeedback-target-libstdc++-v3 maybe-configure-stagefeedback-target-libstdc++-v3\n+maybe-configure-stagefeedback-target-libstdc++-v3:\n+@if target-libstdc++-v3-bootstrap\n+maybe-configure-stagefeedback-target-libstdc++-v3: configure-stagefeedback-target-libstdc++-v3\n+configure-stagefeedback-target-libstdc++-v3:\n+\t@[ $(current_stage) = stagefeedback ] || $(MAKE) stagefeedback-start\n+\t@$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libstdc++-v3\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\"; \\\n+\techo \"Checking multilib configuration for libstdc++-v3...\"; \\\n+\t$(CC_FOR_TARGET) --print-multi-lib > $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp 2> /dev/null ; \\\n+\tif test -r $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; then \\\n+\t  if cmp -s $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; then \\\n+\t    rm -f $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp; \\\n+\t  else \\\n+\t    rm -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile; \\\n+\t    mv $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; \\\n+\t  fi; \\\n+\telse \\\n+\t  mv $(TARGET_SUBDIR)/libstdc++-v3/multilib.tmp $(TARGET_SUBDIR)/libstdc++-v3/multilib.out; \\\n+\tfi; \\\n+\ttest ! -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile || exit 0; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\"; export CFLAGS; \\\n+\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS; \\\n+\techo Configuring stage feedback in $(TARGET_SUBDIR)/libstdc++-v3 ; \\\n+\t$(SHELL) $(srcdir)/mkinstalldirs $(TARGET_SUBDIR)/libstdc++-v3 ; \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 || exit 1; \\\n+\tcase $(srcdir) in \\\n+\t  /* | [A-Za-z]:[\\\\/]*) topdir=$(srcdir) ;; \\\n+\t  *) topdir=`echo $(TARGET_SUBDIR)/libstdc++-v3/ | \\\n+\t\tsed -e 's,\\./,,g' -e 's,[^/]*/,../,g' `$(srcdir) ;; \\\n+\tesac; \\\n+\tsrcdiroption=\"--srcdir=$${topdir}/libstdc++-v3\"; \\\n+\tlibsrcdir=\"$$s/libstdc++-v3\"; \\\n+\t$(SHELL) $${libsrcdir}/configure \\\n+\t  $(TARGET_CONFIGARGS) --build=${build_alias} --host=${target_alias} \\\n+\t  --target=${target_alias} $${srcdiroption} \\\n+\t  --with-build-libsubdir=$(HOST_SUBDIR) \\\n+\t  $(STAGEfeedback_CONFIGURE_FLAGS)\n+@endif target-libstdc++-v3-bootstrap\n+\n+\n+\n \n \n .PHONY: all-target-libstdc++-v3 maybe-all-target-libstdc++-v3\n@@ -42557,7 +42853,6 @@ all-target-libstdc++-v3: stage_current\n TARGET-target-libstdc++-v3=all\n maybe-all-target-libstdc++-v3: all-target-libstdc++-v3\n all-target-libstdc++-v3: configure-target-libstdc++-v3\n-\t@: $(MAKE); $(unstage)\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \t$(RAW_CXX_TARGET_EXPORTS) \\\n@@ -42568,6 +42863,264 @@ all-target-libstdc++-v3: configure-target-libstdc++-v3\n \n \n \n+.PHONY: all-stage1-target-libstdc++-v3 maybe-all-stage1-target-libstdc++-v3\n+.PHONY: clean-stage1-target-libstdc++-v3 maybe-clean-stage1-target-libstdc++-v3\n+maybe-all-stage1-target-libstdc++-v3:\n+maybe-clean-stage1-target-libstdc++-v3:\n+@if target-libstdc++-v3-bootstrap\n+maybe-all-stage1-target-libstdc++-v3: all-stage1-target-libstdc++-v3\n+all-stage1: all-stage1-target-libstdc++-v3\n+TARGET-stage1-target-libstdc++-v3 = $(TARGET-target-libstdc++-v3)\n+all-stage1-target-libstdc++-v3: configure-stage1-target-libstdc++-v3\n+\t@[ $(current_stage) = stage1 ] || $(MAKE) stage1-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE1_TFLAGS)\"; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   \\\n+\t\tTFLAGS=\"$(STAGE1_TFLAGS)\" \\\n+\t\t$(TARGET-stage1-target-libstdc++-v3)\n+\n+maybe-clean-stage1-target-libstdc++-v3: clean-stage1-target-libstdc++-v3\n+clean-stage1: clean-stage1-target-libstdc++-v3\n+clean-stage1-target-libstdc++-v3:\n+\t@if [ $(current_stage) = stage1 ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stage1-libstdc++-v3/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage1-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'  \\\n+\t\t clean\n+@endif target-libstdc++-v3-bootstrap\n+\n+\n+.PHONY: all-stage2-target-libstdc++-v3 maybe-all-stage2-target-libstdc++-v3\n+.PHONY: clean-stage2-target-libstdc++-v3 maybe-clean-stage2-target-libstdc++-v3\n+maybe-all-stage2-target-libstdc++-v3:\n+maybe-clean-stage2-target-libstdc++-v3:\n+@if target-libstdc++-v3-bootstrap\n+maybe-all-stage2-target-libstdc++-v3: all-stage2-target-libstdc++-v3\n+all-stage2: all-stage2-target-libstdc++-v3\n+TARGET-stage2-target-libstdc++-v3 = $(TARGET-target-libstdc++-v3)\n+all-stage2-target-libstdc++-v3: configure-stage2-target-libstdc++-v3\n+\t@[ $(current_stage) = stage2 ] || $(MAKE) stage2-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE2_TFLAGS)\"; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   \\\n+\t\tTFLAGS=\"$(STAGE2_TFLAGS)\" \\\n+\t\t$(TARGET-stage2-target-libstdc++-v3)\n+\n+maybe-clean-stage2-target-libstdc++-v3: clean-stage2-target-libstdc++-v3\n+clean-stage2: clean-stage2-target-libstdc++-v3\n+clean-stage2-target-libstdc++-v3:\n+\t@if [ $(current_stage) = stage2 ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stage2-libstdc++-v3/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage2-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'  \\\n+\t\t  \\\n+\t\t clean\n+@endif target-libstdc++-v3-bootstrap\n+\n+\n+.PHONY: all-stage3-target-libstdc++-v3 maybe-all-stage3-target-libstdc++-v3\n+.PHONY: clean-stage3-target-libstdc++-v3 maybe-clean-stage3-target-libstdc++-v3\n+maybe-all-stage3-target-libstdc++-v3:\n+maybe-clean-stage3-target-libstdc++-v3:\n+@if target-libstdc++-v3-bootstrap\n+maybe-all-stage3-target-libstdc++-v3: all-stage3-target-libstdc++-v3\n+all-stage3: all-stage3-target-libstdc++-v3\n+TARGET-stage3-target-libstdc++-v3 = $(TARGET-target-libstdc++-v3)\n+all-stage3-target-libstdc++-v3: configure-stage3-target-libstdc++-v3\n+\t@[ $(current_stage) = stage3 ] || $(MAKE) stage3-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE3_TFLAGS)\"; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   \\\n+\t\tTFLAGS=\"$(STAGE3_TFLAGS)\" \\\n+\t\t$(TARGET-stage3-target-libstdc++-v3)\n+\n+maybe-clean-stage3-target-libstdc++-v3: clean-stage3-target-libstdc++-v3\n+clean-stage3: clean-stage3-target-libstdc++-v3\n+clean-stage3-target-libstdc++-v3:\n+\t@if [ $(current_stage) = stage3 ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stage3-libstdc++-v3/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage3-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'  \\\n+\t\t  \\\n+\t\t clean\n+@endif target-libstdc++-v3-bootstrap\n+\n+\n+.PHONY: all-stage4-target-libstdc++-v3 maybe-all-stage4-target-libstdc++-v3\n+.PHONY: clean-stage4-target-libstdc++-v3 maybe-clean-stage4-target-libstdc++-v3\n+maybe-all-stage4-target-libstdc++-v3:\n+maybe-clean-stage4-target-libstdc++-v3:\n+@if target-libstdc++-v3-bootstrap\n+maybe-all-stage4-target-libstdc++-v3: all-stage4-target-libstdc++-v3\n+all-stage4: all-stage4-target-libstdc++-v3\n+TARGET-stage4-target-libstdc++-v3 = $(TARGET-target-libstdc++-v3)\n+all-stage4-target-libstdc++-v3: configure-stage4-target-libstdc++-v3\n+\t@[ $(current_stage) = stage4 ] || $(MAKE) stage4-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGE4_TFLAGS)\"; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   \\\n+\t\tTFLAGS=\"$(STAGE4_TFLAGS)\" \\\n+\t\t$(TARGET-stage4-target-libstdc++-v3)\n+\n+maybe-clean-stage4-target-libstdc++-v3: clean-stage4-target-libstdc++-v3\n+clean-stage4: clean-stage4-target-libstdc++-v3\n+clean-stage4-target-libstdc++-v3:\n+\t@if [ $(current_stage) = stage4 ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stage4-libstdc++-v3/Makefile ] || exit 0; \\\n+\t  $(MAKE) stage4-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'  \\\n+\t\t  \\\n+\t\t clean\n+@endif target-libstdc++-v3-bootstrap\n+\n+\n+.PHONY: all-stageprofile-target-libstdc++-v3 maybe-all-stageprofile-target-libstdc++-v3\n+.PHONY: clean-stageprofile-target-libstdc++-v3 maybe-clean-stageprofile-target-libstdc++-v3\n+maybe-all-stageprofile-target-libstdc++-v3:\n+maybe-clean-stageprofile-target-libstdc++-v3:\n+@if target-libstdc++-v3-bootstrap\n+maybe-all-stageprofile-target-libstdc++-v3: all-stageprofile-target-libstdc++-v3\n+all-stageprofile: all-stageprofile-target-libstdc++-v3\n+TARGET-stageprofile-target-libstdc++-v3 = $(TARGET-target-libstdc++-v3)\n+all-stageprofile-target-libstdc++-v3: configure-stageprofile-target-libstdc++-v3\n+\t@[ $(current_stage) = stageprofile ] || $(MAKE) stageprofile-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEprofile_TFLAGS)\"; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   \\\n+\t\tTFLAGS=\"$(STAGEprofile_TFLAGS)\" \\\n+\t\t$(TARGET-stageprofile-target-libstdc++-v3)\n+\n+maybe-clean-stageprofile-target-libstdc++-v3: clean-stageprofile-target-libstdc++-v3\n+clean-stageprofile: clean-stageprofile-target-libstdc++-v3\n+clean-stageprofile-target-libstdc++-v3:\n+\t@if [ $(current_stage) = stageprofile ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stageprofile-libstdc++-v3/Makefile ] || exit 0; \\\n+\t  $(MAKE) stageprofile-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'  \\\n+\t\t  \\\n+\t\t clean\n+@endif target-libstdc++-v3-bootstrap\n+\n+\n+.PHONY: all-stagefeedback-target-libstdc++-v3 maybe-all-stagefeedback-target-libstdc++-v3\n+.PHONY: clean-stagefeedback-target-libstdc++-v3 maybe-clean-stagefeedback-target-libstdc++-v3\n+maybe-all-stagefeedback-target-libstdc++-v3:\n+maybe-clean-stagefeedback-target-libstdc++-v3:\n+@if target-libstdc++-v3-bootstrap\n+maybe-all-stagefeedback-target-libstdc++-v3: all-stagefeedback-target-libstdc++-v3\n+all-stagefeedback: all-stagefeedback-target-libstdc++-v3\n+TARGET-stagefeedback-target-libstdc++-v3 = $(TARGET-target-libstdc++-v3)\n+all-stagefeedback-target-libstdc++-v3: configure-stagefeedback-target-libstdc++-v3\n+\t@[ $(current_stage) = stagefeedback ] || $(MAKE) stagefeedback-start\n+\t@r=`${PWD_COMMAND}`; export r; \\\n+\ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n+\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\"; \\\n+\t$(RAW_CXX_TARGET_EXPORTS) \\\n+\t \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 && \\\n+\t$(MAKE) $(BASE_FLAGS_TO_PASS) \\\n+\t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\\n+\t\tCXXFLAGS_FOR_TARGET=\"$(CXXFLAGS_FOR_TARGET)\" \\\n+\t\tLIBCFLAGS_FOR_TARGET=\"$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\t$(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'   \\\n+\t\tTFLAGS=\"$(STAGEfeedback_TFLAGS)\" \\\n+\t\t$(TARGET-stagefeedback-target-libstdc++-v3)\n+\n+maybe-clean-stagefeedback-target-libstdc++-v3: clean-stagefeedback-target-libstdc++-v3\n+clean-stagefeedback: clean-stagefeedback-target-libstdc++-v3\n+clean-stagefeedback-target-libstdc++-v3:\n+\t@if [ $(current_stage) = stagefeedback ]; then \\\n+\t  [ -f $(TARGET_SUBDIR)/libstdc++-v3/Makefile ] || exit 0; \\\n+\telse \\\n+\t  [ -f $(TARGET_SUBDIR)/stagefeedback-libstdc++-v3/Makefile ] || exit 0; \\\n+\t  $(MAKE) stagefeedback-start; \\\n+\tfi; \\\n+\tcd $(TARGET_SUBDIR)/libstdc++-v3 && \\\n+\t$(MAKE) $(EXTRA_TARGET_FLAGS) 'CXX=$$(RAW_CXX_FOR_TARGET)' 'CXX_FOR_TARGET=$$(RAW_CXX_FOR_TARGET)'  \\\n+\t\t  \\\n+\t\t clean\n+@endif target-libstdc++-v3-bootstrap\n+\n+\n+\n+\n \n \n .PHONY: check-target-libstdc++-v3 maybe-check-target-libstdc++-v3\n@@ -54124,7 +54677,12 @@ restrap:: all\n \n # Generic dependencies for target modules on host stuff, especially gcc\n @if gcc-bootstrap\n-configure-target-libstdc++-v3: stage_last\n+configure-stage1-target-libstdc++-v3: maybe-all-stage1-gcc\n+configure-stage2-target-libstdc++-v3: maybe-all-stage2-gcc\n+configure-stage3-target-libstdc++-v3: maybe-all-stage3-gcc\n+configure-stage4-target-libstdc++-v3: maybe-all-stage4-gcc\n+configure-stageprofile-target-libstdc++-v3: maybe-all-stageprofile-gcc\n+configure-stagefeedback-target-libstdc++-v3: maybe-all-stagefeedback-gcc\n configure-target-libmudflap: stage_last\n configure-target-libssp: stage_last\n configure-target-newlib: stage_last\n@@ -54877,6 +55435,12 @@ all-target-winsup: maybe-all-target-libtermcap\n \n \n @if gcc-bootstrap\n+configure-stage1-target-libstdc++-v3: maybe-all-stage1-target-libgcc\n+configure-stage2-target-libstdc++-v3: maybe-all-stage2-target-libgcc\n+configure-stage3-target-libstdc++-v3: maybe-all-stage3-target-libgcc\n+configure-stage4-target-libstdc++-v3: maybe-all-stage4-target-libgcc\n+configure-stageprofile-target-libstdc++-v3: maybe-all-stageprofile-target-libgcc\n+configure-stagefeedback-target-libstdc++-v3: maybe-all-stagefeedback-target-libgcc\n @endif gcc-bootstrap\n \n @if gcc-no-bootstrap"}, {"sha": "2495281334734ac9164c0d80d7084231adac4520", "filename": "Makefile.tpl", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00020c1638f4b23d9889cad741ef40b4997775bf/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00020c1638f4b23d9889cad741ef40b4997775bf/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=00020c1638f4b23d9889cad741ef40b4997775bf", "patch": "@@ -120,6 +120,19 @@ BUILD_SUBDIR = @build_subdir@\n # directories built for the build system.\n BUILD_CONFIGARGS = @build_configargs@ --with-build-subdir=\"$(BUILD_SUBDIR)\"\n \n+# Linker flags to use on the host, for stage1 or when not\n+# bootstrapping.\n+STAGE1_LDFLAGS = @stage1_ldflags@\n+\n+# Libraries to use on the host, for stage1 or when not bootstrapping.\n+STAGE1_LIBS = @stage1_libs@\n+\n+# Linker flags to use for stage2 and later.\n+POSTSTAGE1_LDFLAGS = @poststage1_ldflags@\n+\n+# Libraries to use for stage2 and later.\n+POSTSTAGE1_LIBS = @poststage1_libs@\n+\n # This is the list of variables to export in the environment when\n # configuring any subdirectory.  It must also be exported whenever\n # recursing into a build directory in case that directory's Makefile\n@@ -185,7 +198,7 @@ HOST_EXPORTS = \\\n \tCC_FOR_BUILD=\"$(CC_FOR_BUILD)\"; export CC_FOR_BUILD; \\\n \tDLLTOOL=\"$(DLLTOOL)\"; export DLLTOOL; \\\n \tLD=\"$(LD)\"; export LD; \\\n-\tLDFLAGS=\"$(LDFLAGS)\"; export LDFLAGS; \\\n+\tLDFLAGS=\"$(STAGE1_LDFLAGS) $(LDFLAGS)\"; export LDFLAGS; \\\n \tNM=\"$(NM)\"; export NM; \\\n \tRANLIB=\"$(RANLIB)\"; export RANLIB; \\\n \tWINDRES=\"$(WINDRES)\"; export WINDRES; \\\n@@ -200,6 +213,7 @@ HOST_EXPORTS = \\\n \tOBJDUMP_FOR_TARGET=\"$(OBJDUMP_FOR_TARGET)\"; export OBJDUMP_FOR_TARGET; \\\n \tRANLIB_FOR_TARGET=\"$(RANLIB_FOR_TARGET)\"; export RANLIB_FOR_TARGET; \\\n \tTOPLEVEL_CONFIGURE_ARGUMENTS=\"$(TOPLEVEL_CONFIGURE_ARGUMENTS)\"; export TOPLEVEL_CONFIGURE_ARGUMENTS; \\\n+\tHOST_LIBS=\"$(STAGE1_LIBS)\"; export HOST_LIBS; \\\n \tGMPLIBS=\"$(HOST_GMPLIBS)\"; export GMPLIBS; \\\n \tGMPINC=\"$(HOST_GMPINC)\"; export GMPINC; \\\n \tPPLLIBS=\"$(HOST_PPLLIBS)\"; export PPLLIBS; \\\n@@ -218,8 +232,16 @@ POSTSTAGE1_HOST_EXPORTS = \\\n \t  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/ \\\n \t  $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS\"; export CC; \\\n \tCC_FOR_BUILD=\"$$CC\"; export CC_FOR_BUILD; \\\n-\tGNATBIND=\"$$r/$(HOST_SUBDIR)/prev-gcc/gnatbind\"; export GNATBIND \\\n-\tLDFLAGS=\"$(BOOT_LDFLAGS)\"; export LDFLAGS;\n+\tCXX=\"$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/prev-gcc/g++$(exeext) \\\n+\t  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/ -nostdinc++ \\\n+\t  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include/$(TARGET_SUBDIR) \\\n+\t  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include \\\n+\t  -I$$r/$(srcdir)/libstdc++-v3/libsupc++ \\\n+\t  -L$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/src/.libs\"; export CXX; \\\n+\tCXX_FOR_BUILD=\"$$CXX\"; export CXX_FOR_BUILD; \\\n+\tGNATBIND=\"$$r/$(HOST_SUBDIR)/prev-gcc/gnatbind\"; export GNATBIND; \\\n+\tLDFLAGS=\"$(POSTSTAGE1_LDFLAGS) $(BOOT_LDFLAGS)\"; export LDFLAGS; \\\n+\tHOST_LIBS=\"$(POSTSTAGE1_LIBS)\"; export HOST_LIBS;\n \n # Target libraries are put under this directory:\n TARGET_SUBDIR = @target_subdir@\n@@ -540,8 +562,11 @@ X11_FLAGS_TO_PASS = \\\n # Flags to pass to stage2 and later makes.\n \n POSTSTAGE1_FLAGS_TO_PASS = \\\n-\tCC=\"$${CC}\" CC_FOR_BUILD=\"$${CC_FOR_BUILD}\" GNATBIND=\"$${GNATBIND}\" \\\n-\tLDFLAGS=\"$(BOOT_LDFLAGS)\" \\\n+\tCC=\"$${CC}\" CC_FOR_BUILD=\"$${CC_FOR_BUILD}\" \\\n+\tCXX=\"$${CXX}\" CXX_FOR_BUILD=\"$${CXX_FOR_BUILD}\" \\\n+\tGNATBIND=\"$${GNATBIND}\" \\\n+\tLDFLAGS=\"$(POSTSTAGE1_LDFLAGS) $(BOOT_LDFLAGS)\" \\\n+\tHOST_LIBS=\"$(POSTSTAGE1_LIBS)\" \\\n \t\"`echo 'ADAFLAGS=$(BOOT_ADAFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`\"\n \n # Flags to pass down to makes which are built with the target environment."}, {"sha": "54db127f77a787ecefd568723c4c162c2aa78aa5", "filename": "configure", "status": "modified", "additions": 106, "deletions": 8, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00020c1638f4b23d9889cad741ef40b4997775bf/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00020c1638f4b23d9889cad741ef40b4997775bf/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=00020c1638f4b23d9889cad741ef40b4997775bf", "patch": "@@ -272,7 +272,7 @@ PACKAGE_STRING=\n PACKAGE_BUGREPORT=\n \n ac_unique_file=\"move-if-change\"\n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS TOPLEVEL_CONFIGURE_ARGUMENTS build build_cpu build_vendor build_os build_noncanonical host_noncanonical target_noncanonical host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA LN LN_S build_libsubdir build_subdir host_subdir target_subdir CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT CXX CXXFLAGS ac_ct_CXX GNATBIND ac_ct_GNATBIND GNATMAKE ac_ct_GNATMAKE do_compare gmplibs gmpinc extra_mpfr_configure_flags extra_mpc_gmp_configure_flags extra_mpc_mpfr_configure_flags ppllibs pplinc clooglibs clooginc stage1_languages SYSROOT_CFLAGS_FOR_TARGET DEBUG_PREFIX_CFLAGS_FOR_TARGET CFLAGS_FOR_TARGET CXXFLAGS_FOR_TARGET RPATH_ENVVAR GCC_SHLIB_SUBDIR tooldir build_tooldir CONFIGURE_GDB_TK GDB_TK INSTALL_GDB_TK build_configargs build_configdirs host_configargs configdirs target_configargs AR_FOR_BUILD AS_FOR_BUILD CC_FOR_BUILD CFLAGS_FOR_BUILD CXXFLAGS_FOR_BUILD CXX_FOR_BUILD DLLTOOL_FOR_BUILD GCJ_FOR_BUILD GFORTRAN_FOR_BUILD LDFLAGS_FOR_BUILD LD_FOR_BUILD NM_FOR_BUILD RANLIB_FOR_BUILD WINDMC_FOR_BUILD WINDRES_FOR_BUILD config_shell YACC BISON M4 LEX FLEX MAKEINFO EXPECT RUNTEST AR AS DLLTOOL LD LIPO NM RANLIB STRIP WINDRES WINDMC OBJCOPY OBJDUMP CC_FOR_TARGET CXX_FOR_TARGET GCC_FOR_TARGET GCJ_FOR_TARGET GFORTRAN_FOR_TARGET AR_FOR_TARGET AS_FOR_TARGET DLLTOOL_FOR_TARGET LD_FOR_TARGET LIPO_FOR_TARGET NM_FOR_TARGET OBJDUMP_FOR_TARGET RANLIB_FOR_TARGET STRIP_FOR_TARGET WINDRES_FOR_TARGET WINDMC_FOR_TARGET RAW_CXX_FOR_TARGET FLAGS_FOR_TARGET COMPILER_AS_FOR_TARGET COMPILER_LD_FOR_TARGET COMPILER_NM_FOR_TARGET MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT stage1_cflags stage1_checking stage2_werror_flag datarootdir docdir pdfdir htmldir LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS TOPLEVEL_CONFIGURE_ARGUMENTS build build_cpu build_vendor build_os build_noncanonical host_noncanonical target_noncanonical host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA LN LN_S build_libsubdir build_subdir host_subdir target_subdir CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT CXX CXXFLAGS ac_ct_CXX GNATBIND ac_ct_GNATBIND GNATMAKE ac_ct_GNATMAKE do_compare gmplibs gmpinc extra_mpfr_configure_flags extra_mpc_gmp_configure_flags extra_mpc_mpfr_configure_flags stage1_ldflags stage1_libs poststage1_ldflags poststage1_libs ppllibs pplinc clooglibs clooginc stage1_languages SYSROOT_CFLAGS_FOR_TARGET DEBUG_PREFIX_CFLAGS_FOR_TARGET CFLAGS_FOR_TARGET CXXFLAGS_FOR_TARGET RPATH_ENVVAR GCC_SHLIB_SUBDIR tooldir build_tooldir CONFIGURE_GDB_TK GDB_TK INSTALL_GDB_TK build_configargs build_configdirs host_configargs configdirs target_configargs AR_FOR_BUILD AS_FOR_BUILD CC_FOR_BUILD CFLAGS_FOR_BUILD CXXFLAGS_FOR_BUILD CXX_FOR_BUILD DLLTOOL_FOR_BUILD GCJ_FOR_BUILD GFORTRAN_FOR_BUILD LDFLAGS_FOR_BUILD LD_FOR_BUILD NM_FOR_BUILD RANLIB_FOR_BUILD WINDMC_FOR_BUILD WINDRES_FOR_BUILD config_shell YACC BISON M4 LEX FLEX MAKEINFO EXPECT RUNTEST AR AS DLLTOOL LD LIPO NM RANLIB STRIP WINDRES WINDMC OBJCOPY OBJDUMP CC_FOR_TARGET CXX_FOR_TARGET GCC_FOR_TARGET GCJ_FOR_TARGET GFORTRAN_FOR_TARGET AR_FOR_TARGET AS_FOR_TARGET DLLTOOL_FOR_TARGET LD_FOR_TARGET LIPO_FOR_TARGET NM_FOR_TARGET OBJDUMP_FOR_TARGET RANLIB_FOR_TARGET STRIP_FOR_TARGET WINDRES_FOR_TARGET WINDMC_FOR_TARGET RAW_CXX_FOR_TARGET FLAGS_FOR_TARGET COMPILER_AS_FOR_TARGET COMPILER_LD_FOR_TARGET COMPILER_NM_FOR_TARGET MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT stage1_cflags stage1_checking stage2_werror_flag datarootdir docdir pdfdir htmldir LIBOBJS LTLIBOBJS'\n ac_subst_files='serialization_dependencies host_makefile_frag target_makefile_frag alphaieee_frag ospace_frag'\n ac_pwd=`pwd`\n \n@@ -935,6 +935,7 @@ Optional Features:\n   --enable-gold           use gold instead of ld\n   --enable-libada         build libada directory\n   --enable-libssp         build libssp directory\n+  --enable-build-with-cxx build with C++ compiler instead of C compiler\n   --disable-ppl-version-check    disable check for PPL version\n   --disable-cloog-version-check  disable check for CLooG version\n   --enable-stage1-languages[=all]   choose additional languages to build during\n@@ -977,6 +978,15 @@ Optional Packages:\n   --with-gmp-lib=PATH     specify directory for the installed GMP library\n   --with-host-libstdcxx=L Use linker arguments L to link with libstdc++\n                           when linking with PPL\n+  --with-stage1-ldflags=FLAGS Linker flags for stage1\n+  -with-stage1-libs=LIBS      Libraries for stage1\n+  --with-boot-ldflags=FLAGS Linker flags for stage2 and later\n+  --with-boot-libs=LIBS     Libraries for stage2 and later\n+if test \"$withval\" = \"no\" -o \"$withval\" = \"yes\"; then\n+   poststage1_libs=\n+ else\n+  poststage1_libs=$withval\n+ fi\n   --with-ppl=PATH         Specify prefix directory for the installed PPL package\n                           Equivalent to --with-ppl-include=PATH/include\n                           plus --with-ppl-lib=PATH/lib\n@@ -4504,6 +4514,15 @@ do_compare=\"$gcc_cv_prog_cmp_skip\"\n \n \n \n+# See if we are building gcc with C++.\n+# Check whether --enable-build-with-cxx or --disable-build-with-cxx was given.\n+if test \"${enable_build_with_cxx+set}\" = set; then\n+  enableval=\"$enable_build_with_cxx\"\n+  ENABLE_BUILD_WITH_CXX=$enableval\n+else\n+  ENABLE_BUILD_WITH_CXX=no\n+fi;\n+\n # Check for GMP, MPFR and MPC\n gmplibs=\"-lmpfr -lgmp\"\n gmpinc=\n@@ -5080,10 +5099,69 @@ echo \"$as_me: error: -with-host-libstdcxx needs an argument\" >&2;}\n     ;;\n esac\n \n+# Linker flags to use for stage1 or when not boostrapping.\n+\n+# Check whether --with-stage1-ldflags or --without-stage1-ldflags was given.\n+if test \"${with_stage1_ldflags+set}\" = set; then\n+  withval=\"$with_stage1_ldflags\"\n+  if test \"$withval\" = \"no\" -o \"$withval\" = \"yes\"; then\n+   stage1_ldflags=\n+ else\n+   stage1_ldflags=$withval\n+ fi\n+else\n+  stage1_ldflags=\n+fi;\n+\n+\n+# Libraries to use for stage1 or when not bootstrapping.\n+\n+# Check whether --with-stage1-libs or --without-stage1-libs was given.\n+if test \"${with_stage1_libs+set}\" = set; then\n+  withval=\"$with_stage1_libs\"\n+  if test \"$withval\" = \"no\" -o \"$withval\" = \"yes\"; then\n+   stage1_libs=\n+ else\n+   stage1_libs=$withval\n+ fi\n+else\n+  stage1_libs=$with_host_libstdcxx\n+fi;\n+\n+\n+# Linker flags to use for stage2 and later builds.\n+\n+# Check whether --with-boot-ldflags or --without-boot-ldflags was given.\n+if test \"${with_boot_ldflags+set}\" = set; then\n+  withval=\"$with_boot_ldflags\"\n+  if test \"$withval\" = \"no\" -o \"$withval\" = \"yes\"; then\n+   poststage1_ldflags=\n+ else\n+   poststage1_ldflags=$withval\n+ fi\n+else\n+  if test \"$ENABLE_BUILD_WITH_CXX\" = \"yes\"; then\n+   poststage1_ldflags=-static-libstdc++\n+ else\n+   poststage1_ldflags=\n+ fi\n+fi;\n+\n+\n+# Libraries to use for stage2 and later builds.  This defaults to the\n+# argument passed to --with-host-libstdcxx.\n+\n+# Check whether --with-boot-libs or --without-boot-libs was given.\n+if test \"${with_boot_libs+set}\" = set; then\n+  withval=\"$with_boot_libs\"\n+  poststage1_libs=$with_host_libstdcxx\n+fi;\n+\n+\n # Check for PPL\n ppl_major_version=0\n ppl_minor_version=10\n-ppllibs=\" -lppl_c -lppl -lgmpxx $with_host_libstdcxx \"\n+ppllibs=\" -lppl_c -lppl -lgmpxx\"\n pplinc=\n \n \n@@ -5112,7 +5190,7 @@ case $with_ppl in\n     ppllibs=\n     ;;\n   *)\n-    ppllibs=\"-L$with_ppl/lib -lppl_c -lppl -lgmpxx $with_host_libstdcxx\"\n+    ppllibs=\"-L$with_ppl/lib -lppl_c -lppl -lgmpxx\"\n     pplinc=\"-I$with_ppl/include $pplinc\"\n     LIBS=\"$ppllibs $LIBS\"\n     ;;\n@@ -5121,11 +5199,11 @@ if test \"x$with_ppl_include\" != x; then\n   pplinc=\"-I$with_ppl_include $pplinc\"\n fi\n if test \"x$with_ppl_lib\" != x; then\n-  ppllibs=\"-L$with_ppl_lib -lppl_c -lppl -lgmpxx $with_host_libstdcxx\"\n+  ppllibs=\"-L$with_ppl_lib -lppl_c -lppl -lgmpxx\"\n   LIBS=\"$ppllibs $LIBS\"\n fi\n if test \"x$with_ppl$with_ppl_include$with_ppl_lib\" = x && test -d ${srcdir}/ppl; then\n-  ppllibs='-L$$r/$(HOST_SUBDIR)/ppl/.libs -L$$r/$(HOST_SUBDIR)/ppl/_libs -lppl_c -lppl -lgmpxx '\"$with_host_libstdcxx \"\n+  ppllibs='-L$$r/$(HOST_SUBDIR)/ppl/.libs -L$$r/$(HOST_SUBDIR)/ppl/_libs -lppl_c -lppl -lgmpxx '\n   pplinc='-I$$r/$(HOST_SUBDIR)/ppl/include -I$$s/ppl/include '\n   LIBS=\"$ppllibs $LIBS\"\n fi\n@@ -5326,6 +5404,9 @@ fi\n # By default, C is the only stage 1 language.\n stage1_languages=,c,\n \n+# Target libraries that we bootstrap.\n+bootstrap_target_libs=,target-libgcc,\n+\n # Figure out what language subdirectories are present.\n # Look if the user specified --enable-languages=\"...\"; if not, use\n # the environment variable $LANGUAGES if defined. $LANGUAGES might\n@@ -5411,6 +5492,10 @@ if test -d ${srcdir}/gcc; then\n           exit 1\n         fi\n \n+\tif test \"$language\" = \"c++\" -a \"$ENABLE_BUILD_WITH_CXX\" = \"yes\"; then\n+\t  boot_language=yes\n+\tfi\n+\n         case ,${enable_languages}, in\n           *,${language},*)\n             # Language was explicitly selected; include it.\n@@ -5481,6 +5566,8 @@ echo \"$as_me: error: GNAT is required to build $language\" >&2;}\n \t      yes)\n \t\t# Add to (comma-separated) list of stage 1 languages.\n \t\tstage1_languages=\"${stage1_languages}${language},\"\n+\t\t# We need to bootstrap any supporting libraries.\n+\t\tbootstrap_target_libs=\"${bootstrap_target_libs}${target_libs},\"\n \t\t;;\n \t    esac\n \t    ;;\n@@ -6280,11 +6367,18 @@ for module in ${target_configdirs} ; do\n     echo 1>&2 \"*** removing ${target_subdir}/${module}/Makefile to force reconfigure\"\n     rm -f ${target_subdir}/${module}/Makefile\n   fi\n+\n+  # We only bootstrap target libraries listed in bootstrap_target_libs.\n+  case $bootstrap_target_libs in\n+    *,target-$module,*) target_bootstrap_suffix=$bootstrap_suffix ;;\n+    *) target_bootstrap_suffix=no-bootstrap ;;\n+  esac\n+\n   extrasub=\"$extrasub\n /^@if target-$module\\$/d\n /^@endif target-$module\\$/d\n-/^@if target-$module-$bootstrap_suffix\\$/d\n-/^@endif target-$module-$bootstrap_suffix\\$/d\"\n+/^@if target-$module-$target_bootstrap_suffix\\$/d\n+/^@endif target-$module-$target_bootstrap_suffix\\$/d\"\n done\n \n extrasub=\"$extrasub\n@@ -12691,7 +12785,7 @@ case $build in\n esac\n \n # This is aimed to mimic bootstrap with a non-GCC compiler to catch problems.\n-if test \"$GCC\" = yes; then\n+if test \"$GCC\" = yes -a \"$ENABLE_BUILD_WITH_CXX\" != yes; then\n   saved_CFLAGS=\"$CFLAGS\"\n \n   # Pass -fkeep-inline-functions for stage 1 if the GCC version supports it.\n@@ -13512,6 +13606,10 @@ s,@gmpinc@,$gmpinc,;t t\n s,@extra_mpfr_configure_flags@,$extra_mpfr_configure_flags,;t t\n s,@extra_mpc_gmp_configure_flags@,$extra_mpc_gmp_configure_flags,;t t\n s,@extra_mpc_mpfr_configure_flags@,$extra_mpc_mpfr_configure_flags,;t t\n+s,@stage1_ldflags@,$stage1_ldflags,;t t\n+s,@stage1_libs@,$stage1_libs,;t t\n+s,@poststage1_ldflags@,$poststage1_ldflags,;t t\n+s,@poststage1_libs@,$poststage1_libs,;t t\n s,@ppllibs@,$ppllibs,;t t\n s,@pplinc@,$pplinc,;t t\n s,@clooglibs@,$clooglibs,;t t"}, {"sha": "dc72b2f137fa7a60fbcf4b260e593e4ebda44e1d", "filename": "configure.ac", "status": "modified", "additions": 78, "deletions": 7, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00020c1638f4b23d9889cad741ef40b4997775bf/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00020c1638f4b23d9889cad741ef40b4997775bf/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=00020c1638f4b23d9889cad741ef40b4997775bf", "patch": "@@ -1191,6 +1191,12 @@ fi\n ACX_PROG_GNAT\n ACX_PROG_CMP_IGNORE_INITIAL\n \n+# See if we are building gcc with C++.\n+AC_ARG_ENABLE(build-with-cxx,\n+[  --enable-build-with-cxx build with C++ compiler instead of C compiler],\n+ENABLE_BUILD_WITH_CXX=$enableval,\n+ENABLE_BUILD_WITH_CXX=no)\n+\n # Check for GMP, MPFR and MPC\n gmplibs=\"-lmpfr -lgmp\"\n gmpinc=\n@@ -1422,10 +1428,59 @@ case $with_host_libstdcxx in\n     ;;\n esac\n \n+# Linker flags to use for stage1 or when not boostrapping.\n+AC_ARG_WITH(stage1-ldflags,\n+[  --with-stage1-ldflags=FLAGS Linker flags for stage1],\n+[if test \"$withval\" = \"no\" -o \"$withval\" = \"yes\"; then\n+   stage1_ldflags=\n+ else\n+   stage1_ldflags=$withval\n+ fi],\n+[stage1_ldflags=])\n+AC_SUBST(stage1_ldflags)\n+\n+# Libraries to use for stage1 or when not bootstrapping.\n+AC_ARG_WITH(stage1-libs,\n+[  -with-stage1-libs=LIBS      Libraries for stage1],\n+[if test \"$withval\" = \"no\" -o \"$withval\" = \"yes\"; then\n+   stage1_libs=\n+ else\n+   stage1_libs=$withval\n+ fi],\n+[stage1_libs=$with_host_libstdcxx])\n+AC_SUBST(stage1_libs)\n+\n+# Linker flags to use for stage2 and later builds.\n+AC_ARG_WITH(boot-ldflags,\n+[  --with-boot-ldflags=FLAGS Linker flags for stage2 and later],\n+[if test \"$withval\" = \"no\" -o \"$withval\" = \"yes\"; then\n+   poststage1_ldflags=\n+ else\n+   poststage1_ldflags=$withval\n+ fi],\n+[if test \"$ENABLE_BUILD_WITH_CXX\" = \"yes\"; then\n+   poststage1_ldflags=-static-libstdc++\n+ else\n+   poststage1_ldflags=\n+ fi])\n+AC_SUBST(poststage1_ldflags)\n+\n+# Libraries to use for stage2 and later builds.  This defaults to the\n+# argument passed to --with-host-libstdcxx.\n+AC_ARG_WITH(boot-libs,\n+[  --with-boot-libs=LIBS     Libraries for stage2 and later]\n+[if test \"$withval\" = \"no\" -o \"$withval\" = \"yes\"; then\n+   poststage1_libs=\n+ else\n+  poststage1_libs=$withval\n+ fi],\n+[poststage1_libs=$with_host_libstdcxx])\n+AC_SUBST(poststage1_libs)\n+\n # Check for PPL\n ppl_major_version=0\n ppl_minor_version=10\n-ppllibs=\" -lppl_c -lppl -lgmpxx $with_host_libstdcxx \"\n+ppllibs=\" -lppl_c -lppl -lgmpxx\"\n pplinc=\n \n AC_ARG_WITH(ppl, [  --with-ppl=PATH         Specify prefix directory for the installed PPL package\n@@ -1439,7 +1494,7 @@ case $with_ppl in\n     ppllibs=\n     ;;\n   *)\n-    ppllibs=\"-L$with_ppl/lib -lppl_c -lppl -lgmpxx $with_host_libstdcxx\"\n+    ppllibs=\"-L$with_ppl/lib -lppl_c -lppl -lgmpxx\"\n     pplinc=\"-I$with_ppl/include $pplinc\"\n     LIBS=\"$ppllibs $LIBS\"\n     ;;\n@@ -1448,11 +1503,11 @@ if test \"x$with_ppl_include\" != x; then\n   pplinc=\"-I$with_ppl_include $pplinc\"\n fi\n if test \"x$with_ppl_lib\" != x; then\n-  ppllibs=\"-L$with_ppl_lib -lppl_c -lppl -lgmpxx $with_host_libstdcxx\"\n+  ppllibs=\"-L$with_ppl_lib -lppl_c -lppl -lgmpxx\"\n   LIBS=\"$ppllibs $LIBS\"\n fi\n if test \"x$with_ppl$with_ppl_include$with_ppl_lib\" = x && test -d ${srcdir}/ppl; then\n-  ppllibs='-L$$r/$(HOST_SUBDIR)/ppl/.libs -L$$r/$(HOST_SUBDIR)/ppl/_libs -lppl_c -lppl -lgmpxx '\"$with_host_libstdcxx \"\n+  ppllibs='-L$$r/$(HOST_SUBDIR)/ppl/.libs -L$$r/$(HOST_SUBDIR)/ppl/_libs -lppl_c -lppl -lgmpxx '\n   pplinc='-I$$r/$(HOST_SUBDIR)/ppl/include -I$$s/ppl/include '\n   LIBS=\"$ppllibs $LIBS\"\n fi\n@@ -1538,6 +1593,9 @@ AC_SUBST(clooginc)\n # By default, C is the only stage 1 language.\n stage1_languages=,c,\n \n+# Target libraries that we bootstrap.\n+bootstrap_target_libs=,target-libgcc,\n+\n # Figure out what language subdirectories are present.\n # Look if the user specified --enable-languages=\"...\"; if not, use\n # the environment variable $LANGUAGES if defined. $LANGUAGES might\n@@ -1623,6 +1681,10 @@ if test -d ${srcdir}/gcc; then\n           exit 1\n         fi\n \n+\tif test \"$language\" = \"c++\" -a \"$ENABLE_BUILD_WITH_CXX\" = \"yes\"; then\n+\t  boot_language=yes\n+\tfi\n+\n         case ,${enable_languages}, in\n           *,${language},*)\n             # Language was explicitly selected; include it.\n@@ -1689,6 +1751,8 @@ if test -d ${srcdir}/gcc; then\n \t      yes)\n \t\t# Add to (comma-separated) list of stage 1 languages.\n \t\tstage1_languages=\"${stage1_languages}${language},\"\n+\t\t# We need to bootstrap any supporting libraries.\n+\t\tbootstrap_target_libs=\"${bootstrap_target_libs}${target_libs},\"\n \t\t;;\n \t    esac\n \t    ;;\n@@ -2420,11 +2484,18 @@ for module in ${target_configdirs} ; do\n     echo 1>&2 \"*** removing ${target_subdir}/${module}/Makefile to force reconfigure\"\n     rm -f ${target_subdir}/${module}/Makefile\n   fi\n+\n+  # We only bootstrap target libraries listed in bootstrap_target_libs.\n+  case $bootstrap_target_libs in\n+    *,target-$module,*) target_bootstrap_suffix=$bootstrap_suffix ;;\n+    *) target_bootstrap_suffix=no-bootstrap ;;\n+  esac\n+\n   extrasub=\"$extrasub\n /^@if target-$module\\$/d\n /^@endif target-$module\\$/d\n-/^@if target-$module-$bootstrap_suffix\\$/d\n-/^@endif target-$module-$bootstrap_suffix\\$/d\"\n+/^@if target-$module-$target_bootstrap_suffix\\$/d\n+/^@endif target-$module-$target_bootstrap_suffix\\$/d\"\n done\n \n extrasub=\"$extrasub\n@@ -2988,7 +3059,7 @@ case $build in\n esac\n \n # This is aimed to mimic bootstrap with a non-GCC compiler to catch problems.\n-if test \"$GCC\" = yes; then\n+if test \"$GCC\" = yes -a \"$ENABLE_BUILD_WITH_CXX\" != yes; then\n   saved_CFLAGS=\"$CFLAGS\"\n \n   # Pass -fkeep-inline-functions for stage 1 if the GCC version supports it."}, {"sha": "e1f70c9e4b6fad35cb228854d77d747500631681", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00020c1638f4b23d9889cad741ef40b4997775bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00020c1638f4b23d9889cad741ef40b4997775bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00020c1638f4b23d9889cad741ef40b4997775bf", "patch": "@@ -1,3 +1,28 @@\n+2009-06-23  Ian Lance Taylor  <iant@google.com>\n+\n+\t* configure.ac: Invoke AC_PROG_CXX.  Separate C specific warnings\n+\tfrom loose_warn into c_loose_warn and from strict_warn into\n+\tc_strict_warn.  Set and substitute warn_cxxflags.  Check for\n+\t--enable-build-with-cxx.  Set and substitute\n+\tENABLE_BUILD_WITH_CXX.  Set and substitute HOST_LIBS.\n+\t* Makefile.in (CXXFLAGS): New variable.\n+\t(C_LOOSE_WARN, C_STRICT_WARN): New variables.\n+\t(GCC_WARN_CFLAGS): Add $(C_LOOSE_WARN).  Add $(C_STRICT_WARN) if\n+\tthe default is the same as $(STRICT_WARN).\n+\t(GCC_WARN_CXXFLAGS, WARN_CXXFLAGS): New variables.\n+\t(CXX): New variable.\n+\t(COMPILER): New value if ENABLE_BUILD_WITH_CXX.\n+\t(COMPILER_FLAGS, LINKER, LINKER_FLAGS): Likewise.\n+\t(ALL_COMPILERFLAGS, ALL_LINKERFLAGS): Likewise.\n+\t(HOST_LIBS): New variable.\n+\t(GCC_CFLAGS): Add $(C_LOOSE_WARN).\n+\t(ALL_CXXFLAGS): New variable.\n+\t(LIBS, BACKENDLIBS): Add $(HOST_LIBS).\n+\t* doc/install.texi (Configuration): Document\n+\t--enable-build-with-cxx, --with-stage1-ldflags,\n+\t--with-stage1-libs, --with-boot-ldflags, --with-boot-libs.\n+\t* configure: Rebuild.\n+\n 2009-06-24  Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm.c (arm_override_options): Fix braces and formatting from previous "}, {"sha": "d215e0fb258c864f4caf0a0a901818b25906cbfc", "filename": "gcc/Makefile.in", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00020c1638f4b23d9889cad741ef40b4997775bf/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00020c1638f4b23d9889cad741ef40b4997775bf/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=00020c1638f4b23d9889cad741ef40b4997775bf", "patch": "@@ -134,6 +134,7 @@ LANGUAGES = c gcov$(exeext) gcov-dump$(exeext) $(CONFIG_LANGUAGES)\n T_CFLAGS =\n TCFLAGS =\n CFLAGS = @CFLAGS@\n+CXXFLAGS = @CXXFLAGS@\n LDFLAGS = @LDFLAGS@\n \n # Flags to determine code coverage. When coverage is disabled, this will\n@@ -149,11 +150,15 @@ coverageexts = .{gcda,gcno}\n # off if they wish.\n # LOOSE_WARN are the warning flags to use when compiling something\n # which is only compiled with gcc, such as libgcc.\n+# C_LOOSE_WARN is similar, but with C-only warnings.\n # STRICT_WARN are the additional warning flags to\n # apply to the back end and some front ends, which may be compiled\n # with other compilers.\n+# C_STRICT_WARN is similar, with C-only warnings.\n LOOSE_WARN = @loose_warn@\n+C_LOOSE_WARN = @c_loose_warn@\n STRICT_WARN = @strict_warn@\n+C_STRICT_WARN = @c_strict_warn@\n \n # This is set by --enable-checking.  The idea is to catch forgotten\n # \"extern\" tags in header files.\n@@ -169,7 +174,8 @@ VALGRIND_DRIVER_DEFINES = @valgrind_path_defines@\n # This is how we control whether or not the additional warnings are applied.\n .-warn = $(STRICT_WARN)\n build-warn = $(STRICT_WARN)\n-GCC_WARN_CFLAGS = $(LOOSE_WARN) $($(@D)-warn) $(NOCOMMON_FLAG) $($@-warn)\n+GCC_WARN_CFLAGS = $(LOOSE_WARN) $(C_LOOSE_WARN) $($(@D)-warn) $(if $(filter-out $(STRICT_WARN),$($(@D)-warn)),,$(C_STRICT_WARN)) $(NOCOMMON_FLAG) $($@-warn)\n+GCC_WARN_CXXFLAGS = $(LOOSE_WARN) $($(@D)-warn) $(NOCOMMON_FLAG) $($@-warn)\n \n # These files are to have specific diagnostics suppressed, or are not to\n # be subject to -Werror:\n@@ -180,13 +186,16 @@ mips-tfile.o-warn = -Wno-error\n \n # All warnings have to be shut off in stage1 if the compiler used then\n # isn't gcc; configure determines that.  WARN_CFLAGS will be either\n-# $(GCC_WARN_CFLAGS), or nothing.\n+# $(GCC_WARN_CFLAGS), or nothing.  Similarly, WARN_CXXFLAGS will be\n+# either $(GCC_WARN_CXXFLAGS), or nothing.\n WARN_CFLAGS = @warn_cflags@\n+WARN_CXXFLAGS = @warn_cxxflags@\n \n CPPFLAGS = @CPPFLAGS@\n \n AWK = @AWK@\n CC = @CC@\n+CXX = @CXX@\n BISON = @BISON@\n BISONFLAGS =\n FLEX = @FLEX@\n@@ -197,12 +206,19 @@ NM = @NM@\n RANLIB = @RANLIB@\n RANLIB_FLAGS = @ranlib_flags@\n \n-# The name of the compiler to use.  Currently always $(CC).  In the\n-# future this may change to $(CXX).\n+# The name of the compiler to use.\n+ENABLE_BUILD_WITH_CXX = @ENABLE_BUILD_WITH_CXX@\n+ifneq ($(ENABLE_BUILD_WITH_CXX),yes)\n COMPILER = $(CC)\n COMPILER_FLAGS = $(CFLAGS)\n LINKER = $(CC)\n LINKER_FLAGS = $(CFLAGS)\n+else\n+COMPILER = $(CXX)\n+COMPILER_FLAGS = $(CXXFLAGS)\n+LINKER = $(CXX)\n+LINKER_FLAGS = $(CXXFLAGS)\n+endif\n \n # -------------------------------------------\n # Programs which operate on the build machine\n@@ -272,6 +288,9 @@ write_entries_to_file = $(shell rm -f $(2) || :) $(shell touch $(2)) \\\n # In stage2 and beyond, we force this to \"-o $@\" since we know we're using gcc.\n OUTPUT_OPTION = @OUTPUT_OPTION@\n \n+# Libraries to use on the host.\n+HOST_LIBS = @HOST_LIBS@\n+\n # This is where we get zlib from.  zlibdir is -L../zlib and zlibinc is\n # -I../zlib, unless we were configured with --with-system-zlib, in which\n # case both are empty.\n@@ -330,7 +349,7 @@ GCC_FOR_TARGET = $(STAGE_CC_WRAPPER) ./xgcc -B./ -B$(build_tooldir)/bin/ -isyste\n # This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.\n # It specifies -B./.\n # It also specifies -isystem ./include to find, e.g., stddef.h.\n-GCC_CFLAGS=$(CFLAGS_FOR_TARGET) $(INTERNAL_CFLAGS) $(T_CFLAGS) $(LOOSE_WARN) -Wold-style-definition $($@-warn) -isystem ./include $(TCFLAGS)\n+GCC_CFLAGS=$(CFLAGS_FOR_TARGET) $(INTERNAL_CFLAGS) $(T_CFLAGS) $(LOOSE_WARN) $(C_LOOSE_WARN) -Wold-style-definition $($@-warn) -isystem ./include $(TCFLAGS)\n \n # ---------------------------------------------------\n # Programs which produce files for the target machine\n@@ -917,16 +936,28 @@ INTERNAL_CFLAGS = -DIN_GCC @CROSS@\n ALL_CFLAGS = $(T_CFLAGS) \\\n   $(CFLAGS) $(INTERNAL_CFLAGS) $(COVERAGE_FLAGS) $(WARN_CFLAGS) @DEFS@\n \n+# The C++ version.\n+ALL_CXXFLAGS = $(T_CFLAGS) $(CXXFLAGS) $(INTERNAL_CFLAGS) \\\n+  $(COVERAGE_FLAGS) $(WARN_CXXFLAGS) @DEFS@\n+\n # Likewise.  Put INCLUDES at the beginning: this way, if some autoconf macro\n # puts -I options in CPPFLAGS, our include files in the srcdir will always\n # win against random include files in /usr/include.\n ALL_CPPFLAGS = $(INCLUDES) $(CPPFLAGS)\n \n # This is the variable to use when using $(COMPILER).\n+ifneq ($(ENABLE_BUILD_WITH_CXX),yes)\n ALL_COMPILERFLAGS = $(ALL_CFLAGS)\n+else\n+ALL_COMPILERFLAGS = $(ALL_CXXFLAGS)\n+endif\n \n # This is the variable to use when using $(LINKER).\n+ifneq ($(ENABLE_BUILD_WITH_CXX),yes)\n ALL_LINKERFLAGS = $(ALL_CFLAGS)\n+else\n+ALL_LINKERFLAGS = $(ALL_CXXFLAGS)\n+endif\n \n # Build and host support libraries.\n LIBIBERTY = ../libiberty/libiberty.a\n@@ -941,8 +972,9 @@ BUILD_LIBDEPS= $(BUILD_LIBIBERTY)\n \n # How to link with both our special library facilities\n # and the system's installed libraries.\n-LIBS = @LIBS@ $(CPPLIB) $(LIBINTL) $(LIBICONV) $(LIBIBERTY) $(LIBDECNUMBER)\n-BACKENDLIBS = $(CLOOGLIBS) $(PPLLIBS) $(GMPLIBS) $(PLUGINLIBS)\n+LIBS = @LIBS@ $(CPPLIB) $(LIBINTL) $(LIBICONV) $(LIBIBERTY) $(LIBDECNUMBER) \\\n+\t$(HOST_LIBS)\n+BACKENDLIBS = $(CLOOGLIBS) $(PPLLIBS) $(GMPLIBS) $(PLUGINLIBS) $(HOST_LIBS)\n # Any system libraries needed just for GNAT.\n SYSLIBS = @GNAT_LIBEXC@\n "}, {"sha": "6948ca4b6808544389edcefc937c3eb4723eb464", "filename": "gcc/configure", "status": "modified", "additions": 9272, "deletions": 5207, "changes": 14479, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00020c1638f4b23d9889cad741ef40b4997775bf/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00020c1638f4b23d9889cad741ef40b4997775bf/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=00020c1638f4b23d9889cad741ef40b4997775bf"}, {"sha": "f0a239b9cade6e05dca90f9233ccbc34e46a2ade", "filename": "gcc/configure.ac", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00020c1638f4b23d9889cad741ef40b4997775bf/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00020c1638f4b23d9889cad741ef40b4997775bf/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=00020c1638f4b23d9889cad741ef40b4997775bf", "patch": "@@ -276,6 +276,7 @@ rm -f a.out a.exe b.out\n # Find the native compiler\n AC_PROG_CC\n AM_PROG_CC_C_O\n+AC_PROG_CXX\n ACX_PROG_GNAT([-I\"$srcdir\"/ada])\n \n # autoconf is lame and doesn't give us any substitution variable for this.\n@@ -323,24 +324,30 @@ AC_CHECK_TYPES([__int64], [AC_CHECK_SIZEOF(__int64)])\n # So, we only use -pedantic if we can disable those warnings.\n \n ACX_PROG_CC_WARNING_OPTS(\n-\tm4_quote(m4_do([-W -Wall -Wwrite-strings -Wstrict-prototypes ],\n-\t\t       [-Wmissing-prototypes -Wcast-qual])), [loose_warn])\n+\tm4_quote(m4_do([-W -Wall -Wwrite-strings -Wcast-qual])), [loose_warn])\n ACX_PROG_CC_WARNING_OPTS(\n-\tm4_quote(m4_do([-Wold-style-definition -Wc++-compat ], \n-\t\t       [-Wmissing-format-attribute])), [strict_warn])\n+\tm4_quote(m4_do([-Wstrict-prototypes -Wmissing-prototypes])),\n+\t[c_loose_warn])\n+ACX_PROG_CC_WARNING_OPTS(\n+\tm4_quote(m4_do([-Wmissing-format-attribute])), [strict_warn])\n+ACX_PROG_CC_WARNING_OPTS(\n+\tm4_quote(m4_do([-Wold-style-definition -Wc++-compat])), [c_strict_warn])\n ACX_PROG_CC_WARNING_ALMOST_PEDANTIC(\n \tm4_quote(m4_do([-Wno-long-long -Wno-variadic-macros ], \n \t\t       [-Wno-overlength-strings])), [strict_warn])\n ACX_PROG_CC_WARNINGS_ARE_ERRORS([manual], [strict_warn])\n \n # The above macros do nothing if the compiler is not GCC.  However, the\n-# Makefile has more goo to add other flags, so this variabl is used to\n-# enables warnings only for GCC.\n+# Makefile has more goo to add other flags, so these variables are used\n+# to enable warnings only for GCC.\n warn_cflags=\n+warn_cxxflags=\n if test \"x$GCC\" = \"xyes\"; then\n   warn_cflags='$(GCC_WARN_CFLAGS)'\n+  warn_cxxflags='$(GCC_WARN_CXXFLAGS)'\n fi\n AC_SUBST(warn_cflags)\n+AC_SUBST(warn_cxxflags)\n \n # Enable expensive internal checks\n is_release=\n@@ -573,6 +580,13 @@ fi\n # Miscenalleous configure options\n # -------------------------------\n \n+# See if we are building gcc with C++.\n+AC_ARG_ENABLE(build-with-cxx,\n+[  --enable-build-with-cxx build with C++ compiler instead of C compiler],\n+ENABLE_BUILD_WITH_CXX=$enableval,\n+ENABLE_BUILD_WITH_CXX=no)\n+AC_SUBST(ENABLE_BUILD_WITH_CXX)\n+\n # With stabs\n AC_ARG_WITH(stabs,\n [  --with-stabs            arrange to use stabs instead of host debug format],\n@@ -3749,6 +3763,13 @@ esac],\n AC_SUBST(GGC)\n echo \"Using $GGC for garbage collection.\"\n \n+# Libraries to use on the host.  This will normally be set by the top\n+# level Makefile.  Here we simply capture the value for our Makefile.\n+if test -z \"${HOST_LIBS+set}\"; then\n+  HOST_LIBS=\n+fi\n+AC_SUBST(HOST_LIBS)\n+\n # Use the system's zlib library.\n zlibdir=-L../zlib\n zlibinc=\"-I\\$(srcdir)/../zlib\""}, {"sha": "4f7e433c614b3f1f5f3b7f360259712e6feee5ed", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00020c1638f4b23d9889cad741ef40b4997775bf/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00020c1638f4b23d9889cad741ef40b4997775bf/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=00020c1638f4b23d9889cad741ef40b4997775bf", "patch": "@@ -1204,6 +1204,10 @@ opposite effect.  If neither option is specified, the configure script\n will try to guess whether the @code{.init_array} and\n @code{.fini_array} sections are supported and, if they are, use them.\n \n+@item --enable-build-with-cxx\n+Build GCC using a C++ compiler rather than a C compiler.  This is an\n+experimental option which may become the default in a later release.\n+\n @item --enable-maintainer-mode\n The build rules that\n regenerate the GCC master message catalog @file{gcc.pot} are normally\n@@ -1549,6 +1553,27 @@ linking with a shared copy of PPL, you probably do not need this\n option; shared library dependencies will cause the linker to search\n for the standard C++ library automatically.\n \n+@item --with-stage1-ldflags=@var{flags}\n+This option may be used to set linker flags to be used when linking\n+stage 1 of GCC.  These are also used when linking GCC if configured with\n+@option{--disable-bootstrap}.  By default no special flags are used.\n+\n+@item --with-stage1-libs=@var{libs}\n+This option may be used to set libraries to be used when linking stage 1\n+of GCC.  These are also used when linking GCC if configured with\n+@option{--disable-bootstrap}.  The default is the argument to\n+@option{--with-host-libstdcxx}, if specified.\n+\n+@item --with-boot-ldflags=@var{flags}\n+This option may be used to set linker flags to be used when linking\n+stage 2 and later when bootstrapping GCC.  By default no special flags\n+are used.\n+\n+@item --with-boot-libs=@var{libs}\n+This option may be used to set libraries to be used when linking stage 2\n+and later when bootstrapping GCC.  The default is the argument to\n+@option{--with-host-libstdcxx}, if specified.\n+\n @item --with-debug-prefix-map=@var{map}\n Convert source directory names using @option{-fdebug-prefix-map} when\n building runtime libraries.  @samp{@var{map}} is a space-separated"}]}