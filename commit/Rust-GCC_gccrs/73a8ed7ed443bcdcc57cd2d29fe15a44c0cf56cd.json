{"sha": "73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNhOGVkN2VkNDQzYmNkY2M1N2NkMmQyOWZlMTVhNDRjMGNmNTZjZA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-11-12T15:46:48Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-11-12T15:46:48Z"}, "message": "gcc.texi: Move several chapters out to ...\n\n\t* doc/gcc.texi: Move several chapters out to ...\n\t* doc/configterms.texi, doc/fragments.texi, doc/hostconfig.texi,\n\tdoc/include/linux-and-gnu.texi, doc/interface.texi,\n\tdoc/makefile.texi, doc/passes.texi, doc/portability.texi:\n\t... here.  New files.\n\t* doc/gcc.texi, doc/contrib.texi: Move section headings into\n\tcontrib.texi.\n\t* Makefile.in ($(docdir)/gcc.info, gcc.dvi): Update dependencies.\n\nFrom-SVN: r46951", "tree": {"sha": "7ce809932fcd2257692c59cd13c2e788c4e9896a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ce809932fcd2257692c59cd13c2e788c4e9896a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "285a5742c0cc7d86f78dca98ee0287ae6511d16d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/285a5742c0cc7d86f78dca98ee0287ae6511d16d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/285a5742c0cc7d86f78dca98ee0287ae6511d16d"}], "stats": {"total": 2960, "additions": 1506, "deletions": 1454}, "files": [{"sha": "94bd0e60283fd428354e458b6be92fee87909eef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "patch": "@@ -1,3 +1,14 @@\n+2001-11-12  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/gcc.texi: Move several chapters out to ...\n+\t* doc/configterms.texi, doc/fragments.texi, doc/hostconfig.texi,\n+\tdoc/include/linux-and-gnu.texi, doc/interface.texi,\n+\tdoc/makefile.texi, doc/passes.texi, doc/portability.texi:\n+\t... here.  New files.\n+\t* doc/gcc.texi, doc/contrib.texi: Move section headings into\n+\tcontrib.texi.\n+\t* Makefile.in ($(docdir)/gcc.info, gcc.dvi): Update dependencies.\n+\n 2001-11-12  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/alpha/alpha-interix.h: Fix comment formatting."}, {"sha": "1069f0b1fc099180fb98b74fdb27e04dd9ca1097", "filename": "gcc/Makefile.in", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "patch": "@@ -2318,7 +2318,11 @@ $(docdir)/gcc.info: $(docdir)/gcc.texi $(docdir)/extend.texi \\\n \t $(docdir)/include/funding.texi $(docdir)/bugreport.texi \\\n \t $(docdir)/contribute.texi $(docdir)/frontends.texi \\\n \t $(docdir)/service.texi $(docdir)/standards.texi \\\n-\t $(docdir)/trouble.texi $(docdir)/vms.texi\n+\t $(docdir)/trouble.texi $(docdir)/vms.texi $(docdir)/configterms.texi \\\n+\t $(docdir)/fragments.texi $(docdir)/hostconfig.texi \\\n+\t $(docdir)/include/linux-and-gnu.texi $(docdir)/interface.texi \\\n+\t $(docdir)/makefile.texi $(docdir)/passes.texi \\\n+\t $(docdir)/portability.texi\n \tcd $(srcdir) && $(MAKEINFO) $(MAKEINFOFLAGS) -I doc -I doc/include -o doc/gcc.info doc/gcc.texi\n \n $(docdir)/cppinternals.info: $(docdir)/cppinternals.texi\n@@ -2339,7 +2343,11 @@ gcc.dvi: $(docdir)/gcc.texi $(docdir)/extend.texi $(docdir)/install-old.texi \\\n \t $(docdir)/include/funding.texi $(docdir)/bugreport.texi \\\n \t $(docdir)/contribute.texi $(docdir)/frontends.texi \\\n \t $(docdir)/service.texi $(docdir)/standards.texi \\\n-\t $(docdir)/trouble.texi $(docdir)/vms.texi\n+\t $(docdir)/trouble.texi $(docdir)/vms.texi $(docdir)/configterms.texi \\\n+\t $(docdir)/fragments.texi $(docdir)/hostconfig.texi \\\n+\t $(docdir)/include/linux-and-gnu.texi $(docdir)/interface.texi \\\n+\t $(docdir)/makefile.texi $(docdir)/passes.texi \\\n+\t $(docdir)/portability.texi\n \t$(TEXI2DVI) -I $(docdir) -I $(docdir)/include $(docdir)/gcc.texi\n \n cppinternals.dvi: $(docdir)/cppinternals.texi"}, {"sha": "a40fbe09f2b162c310239648d1f2f52fbb0198e6", "filename": "gcc/doc/configterms.texi", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fconfigterms.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fconfigterms.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fconfigterms.texi?ref=73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "patch": "@@ -0,0 +1,65 @@\n+@c Copyright (C) 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@section Configure Terms and History\n+@cindex configure terms\n+@cindex canadian\n+\n+This section is not instructions for building GCC.  If you are trying to\n+do a build, you should first read @uref{http://gcc.gnu.org/install/} or\n+whatever installation instructions came with your source package.\n+\n+The configure and build process has a long and colorful history, and can\n+be confusing to anyone who doesn't know why things are the way they are.\n+While there are other documents which describe the configuration process\n+in detail, here are a few things that everyone working on GCC should\n+know.\n+\n+There are three system names that the build knows about: the machine you\n+are building on (@dfn{build}), the machine that you are building for\n+(@dfn{host}), and the machine that GCC will produce code for\n+(@dfn{target}).  When you configure GCC, you specify these with\n+@option{--build=}, @option{--host=}, and @option{--target=}.\n+\n+Specifying the host without specifying the build should be avoided, as\n+@command{configure} may (and once did) assume that the host you specify\n+is also the build, which may not be true.\n+\n+If build, host, and target are all the same, this is called a\n+@dfn{native}.  If build and host are the same but target is different,\n+this is called a @dfn{cross}.  If build, host, and target are all\n+different this is called a @dfn{canadian} (for obscure reasons dealing\n+with Canada's political party and the background of the person working\n+on the build at that time).  If host and target are the same, but build\n+is different, you are using a cross-compiler to build a native for a\n+different system.  Some people call this a @dfn{host-x-host},\n+@dfn{crossed native}, or @dfn{cross-built native}.  If build and target\n+are the same, but host is different, you are using a cross compiler to\n+build a cross compiler that produces code for the machine you're\n+building on.  This is rare, so there is no common say of describing it\n+(although I propose calling it a @dfn{crossback}).\n+\n+If build and host are the same, the GCC you are building will also be\n+used to build the target libraries (like @code{libstdc++}).  If build and host\n+are different, you must have already build and installed a cross\n+compiler that will be used to build the target libraries (if you\n+configured with @option{--target=foo-bar}, this compiler will be called\n+@command{foo-bar-gcc}).\n+\n+In the case of target libraries, the machine you're building for is the\n+machine you specified with @option{--target}.  So, build is the machine\n+you're building on (no change there), host is the machine you're\n+building for (the target libraries are built for the target, so host is\n+the target you specified), and target doesn't apply (because you're not\n+building a compiler, you're building libraries).  The configure/make\n+process will adjust these variables as needed.  It also sets\n+@code{$with_cross_host} to the original @option{--host} value in case you\n+need it.\n+\n+Libiberty, for example, is built twice.  The first time, host comes from\n+@option{--host} and the second time host comes from @option{--target}.\n+Historically, libiberty has not been built for the build machine,\n+though, which causes some interesting issues with programs used to\n+generate sources for the build.  Fixing this, so that libiberty is built\n+three times, has long been on the to-do list."}, {"sha": "a85d96aa6f96fd1bd86250f37c9e403a6fad83ff", "filename": "gcc/doc/contrib.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcontrib.texi?ref=73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "patch": "@@ -3,6 +3,10 @@\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n+@node Contributors\n+@unnumbered Contributors to GCC\n+@cindex contributors\n+\n The GCC project would like to thank its many contributors.  Without them the\n project would not have been nearly as successful as it has been.  Any omissions\n in this list are accidental.  Feel free to contact"}, {"sha": "21f83a742d3a0b3d36d7be8914d676ffd7ecbde3", "filename": "gcc/doc/fragments.texi", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Ffragments.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Ffragments.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffragments.texi?ref=73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "patch": "@@ -0,0 +1,159 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Fragments\n+@chapter Makefile Fragments\n+@cindex makefile fragment\n+\n+When you configure GCC using the @file{configure} script\n+(@pxref{Installation}), it will construct the file @file{Makefile} from\n+the template file @file{Makefile.in}.  When it does this, it will\n+incorporate makefile fragment files from the @file{config} directory,\n+named @file{t-@var{target}} and @file{x-@var{host}}.  If these files do\n+not exist, it means nothing needs to be added for a given target or\n+host.\n+\n+@menu\n+* Target Fragment:: Writing the @file{t-@var{target}} file.\n+* Host Fragment::   Writing the @file{x-@var{host}} file.\n+@end menu\n+\n+@node Target Fragment\n+@section The Target Makefile Fragment\n+@cindex target makefile fragment\n+@cindex @file{t-@var{target}}\n+\n+The target makefile fragment, @file{t-@var{target}}, defines special\n+target dependent variables and targets used in the @file{Makefile}:\n+\n+@table @code\n+@findex LIBGCC2_CFLAGS\n+@item LIBGCC2_CFLAGS\n+Compiler flags to use when compiling @file{libgcc2.c}.\n+\n+@findex LIB2FUNCS_EXTRA\n+@item LIB2FUNCS_EXTRA\n+A list of source file names to be compiled or assembled and inserted\n+into @file{libgcc.a}.\n+\n+@findex Floating Point Emulation\n+@item Floating Point Emulation\n+To have GCC include software floating point libraries in @file{libgcc.a}\n+define @code{FPBIT} and @code{DPBIT} along with a few rules as follows:\n+@smallexample\n+# We want fine grained libraries, so use the new code\n+# to build the floating point emulation libraries.\n+FPBIT = fp-bit.c\n+DPBIT = dp-bit.c\n+\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+        echo '#define FLOAT' > fp-bit.c\n+        cat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+        cat $(srcdir)/config/fp-bit.c > dp-bit.c\n+@end smallexample\n+\n+You may need to provide additional #defines at the beginning of @file{fp-bit.c}\n+and @file{dp-bit.c} to control target endianness and other options.\n+\n+\n+@findex CRTSTUFF_T_CFLAGS\n+@item CRTSTUFF_T_CFLAGS\n+Special flags used when compiling @file{crtstuff.c}.\n+@xref{Initialization}.\n+\n+@findex CRTSTUFF_T_CFLAGS_S\n+@item CRTSTUFF_T_CFLAGS_S\n+Special flags used when compiling @file{crtstuff.c} for shared\n+linking.  Used if you use @file{crtbeginS.o} and @file{crtendS.o}\n+in @code{EXTRA-PARTS}.\n+@xref{Initialization}.\n+\n+@findex MULTILIB_OPTIONS\n+@item MULTILIB_OPTIONS\n+For some targets, invoking GCC in different ways produces objects\n+that can not be linked together.  For example, for some targets GCC\n+produces both big and little endian code.  For these targets, you must\n+arrange for multiple versions of @file{libgcc.a} to be compiled, one for\n+each set of incompatible options.  When GCC invokes the linker, it\n+arranges to link in the right version of @file{libgcc.a}, based on\n+the command line options used.\n+\n+The @code{MULTILIB_OPTIONS} macro lists the set of options for which\n+special versions of @file{libgcc.a} must be built.  Write options that\n+are mutually incompatible side by side, separated by a slash.  Write\n+options that may be used together separated by a space.  The build\n+procedure will build all combinations of compatible options.\n+\n+For example, if you set @code{MULTILIB_OPTIONS} to @samp{m68000/m68020\n+msoft-float}, @file{Makefile} will build special versions of\n+@file{libgcc.a} using the following sets of options:  @option{-m68000},\n+@option{-m68020}, @option{-msoft-float}, @samp{-m68000 -msoft-float}, and\n+@samp{-m68020 -msoft-float}.\n+\n+@findex MULTILIB_DIRNAMES\n+@item MULTILIB_DIRNAMES\n+If @code{MULTILIB_OPTIONS} is used, this variable specifies the\n+directory names that should be used to hold the various libraries.\n+Write one element in @code{MULTILIB_DIRNAMES} for each element in\n+@code{MULTILIB_OPTIONS}.  If @code{MULTILIB_DIRNAMES} is not used, the\n+default value will be @code{MULTILIB_OPTIONS}, with all slashes treated\n+as spaces.\n+\n+For example, if @code{MULTILIB_OPTIONS} is set to @samp{m68000/m68020\n+msoft-float}, then the default value of @code{MULTILIB_DIRNAMES} is\n+@samp{m68000 m68020 msoft-float}.  You may specify a different value if\n+you desire a different set of directory names.\n+\n+@findex MULTILIB_MATCHES\n+@item MULTILIB_MATCHES\n+Sometimes the same option may be written in two different ways.  If an\n+option is listed in @code{MULTILIB_OPTIONS}, GCC needs to know about\n+any synonyms.  In that case, set @code{MULTILIB_MATCHES} to a list of\n+items of the form @samp{option=option} to describe all relevant\n+synonyms.  For example, @samp{m68000=mc68000 m68020=mc68020}.\n+\n+@findex MULTILIB_EXCEPTIONS\n+@item MULTILIB_EXCEPTIONS\n+Sometimes when there are multiple sets of @code{MULTILIB_OPTIONS} being\n+specified, there are combinations that should not be built.  In that\n+case, set @code{MULTILIB_EXCEPTIONS} to be all of the switch exceptions\n+in shell case syntax that should not be built.\n+\n+For example, in the PowerPC embedded ABI support, it is not desirable\n+to build libraries compiled with the @option{-mcall-aix} option\n+and either of the @option{-fleading-underscore} or @option{-mlittle} options\n+at the same time.  Therefore @code{MULTILIB_EXCEPTIONS} is set to\n+@smallexample\n+*mcall-aix/*fleading-underscore* *mlittle/*mcall-aix*\n+@end smallexample\n+\n+@findex MULTILIB_EXTRA_OPTS\n+@item MULTILIB_EXTRA_OPTS\n+Sometimes it is desirable that when building multiple versions of\n+@file{libgcc.a} certain options should always be passed on to the\n+compiler.  In that case, set @code{MULTILIB_EXTRA_OPTS} to be the list\n+of options to be used for all builds.\n+@end table\n+\n+@node Host Fragment\n+@section The Host Makefile Fragment\n+@cindex host makefile fragment\n+@cindex @file{x-@var{host}}\n+\n+The host makefile fragment, @file{x-@var{host}}, defines special host\n+dependent variables and targets used in the @file{Makefile}:\n+\n+@table @code\n+@findex CC\n+@item CC\n+The compiler to use when building the first stage.\n+\n+@findex INSTALL\n+@item INSTALL\n+The install program to use.\n+@end table"}, {"sha": "cc1b32deee598167e3a67a8cb717125157b4cb50", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 8, "deletions": 1452, "changes": 1460, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "patch": "@@ -302,1468 +302,27 @@ bugs.  It corresponds to GCC version 3.1.\n \n @include vms.texi\n \n-@node Makefile\n-@chapter Additional Makefile and configure information.\n-\n-@section Makefile Targets\n-@cindex makefile targets\n-@cindex targets, makefile\n-\n-@table @code\n-@item all\n-This is the default target.  Depending on what your build/host/target\n-configuration is, it coordinates all the things that need to be built.\n-\n-@item doc\n-Produce info-formatted documentation.  Also, @code{make dvi} is\n-available for DVI-formatted documentation, and @code{make\n-generated-manpages} to generate man pages.\n-\n-@item mostlyclean\n-Delete the files made while building the compiler.\n-\n-@item clean\n-That, and all the other files built by @code{make all}.\n-\n-@item distclean\n-That, and all the files created by @code{configure}.\n-\n-@item extraclean\n-That, and any temporary or intermediate files, like emacs backup files.\n-\n-@item maintainer-clean\n-Distclean plus any file that can be generated from other files.  Note\n-that additional tools may be required beyond what is normally needed to\n-build gcc.\n-\n-@item install\n-Installs gcc.\n-\n-@item uninstall\n-Deletes installed files.\n-\n-@item check\n-Run the testsuite.  This creates a @file{testsuite} subdirectory that\n-has various @file{.sum} and @file{.log} files containing the results of\n-the testing.  You can run subsets with, for example, @code{make check-gcc}.\n-You can specify specific tests by setting RUNTESTFLAGS to be the name\n-of the @file{.exp} file, optionally followed by (for some tests) an equals\n-and a file wildcard, like:\n-\n-@example\n-make check-gcc RUNTESTFLAGS=\"execute.exp=19980413-*\"\n-@end example\n-\n-Note that running the testsuite may require additional tools be\n-installed, such as TCL or dejagnu.\n-\n-@item bootstrap\n-Builds gcc three times---once with the native compiler, once with the\n-native-built compiler it just built, and once with the compiler it built\n-the second time.  In theory, the last two should produce the same\n-results, which @code{make compare} can check.  Each step of this process\n-is called a ``stage'', and the results of each stage @var{N}\n-(@var{N} = 1@dots{}3) are copied to a subdirectory @file{stage@var{N}/}.\n-\n-@item bootstrap-lean\n-Like @code{bootstrap}, except that the various stages are removed once\n-they're no longer needed.  This saves disk space.\n-\n-@item bubblestrap\n-Once bootstrapped, this incrementally rebuilds each of the three stages,\n-one at a time.  It does this by ``bubbling'' the stages up from their\n-subdirectories, rebuilding them, and copying them back to their\n-subdirectories.  This will allow you to, for example, quickly rebuild a\n-bootstrapped compiler after changing the sources, without having to do a\n-full bootstrap.\n-\n-@item quickstrap\n-Rebuilds the most recently built stage.  Since each stage requires\n-special invocation, using this target means you don't have to keep track\n-of which stage you're on or what invocation that stage needs.\n-\n-@item cleanstrap\n-Removed everything (@code{make clean}) and rebuilds (@code{make bootstrap}).\n-\n-@item stage@var{N} (@var{N} = 1@dots{}4)\n-For each stage, moves the appropriate files to the @file{stage@var{N}}\n-subdirectory.\n-\n-@item unstage@var{N} (@var{N} = 1@dots{}4)\n-Undoes the corresponding @code{stage@var{N}}.\n-\n-@item restage@var{N} (@var{N} = 1@dots{}4)\n-Undoes the corresponding @code{stage@var{N}} and rebuilds it with the\n-appropriate flags.\n-\n-@item compare\n-Compares the results of stages 2 and 3.  This ensures that the compiler\n-is running properly, since it should produce the same object files\n-regardless of how it itself was compiled.\n-\n-@end table\n-\n-@section Configure Terms and History\n-@cindex configure terms\n-@cindex canadian\n-\n-This section is not instructions for building GCC.  If you are trying to\n-do a build, you should first read @uref{http://gcc.gnu.org/install/} or\n-whatever installation instructions came with your source package.\n-\n-The configure and build process has a long and colorful history, and can\n-be confusing to anyone who doesn't know why things are the way they are.\n-While there are other documents which describe the configuration process\n-in detail, here are a few things that everyone working on GCC should\n-know.\n-\n-There are three system names that the build knows about: the machine you\n-are building on (@dfn{build}), the machine that you are building for\n-(@dfn{host}), and the machine that GCC will produce code for\n-(@dfn{target}).  When you configure GCC, you specify these with\n-@option{--build=}, @option{--host=}, and @option{--target=}.\n-\n-Specifying the host without specifying the build should be avoided, as\n-@command{configure} may (and once did) assume that the host you specify\n-is also the build, which may not be true.\n-\n-If build, host, and target are all the same, this is called a\n-@dfn{native}.  If build and host are the same but target is different,\n-this is called a @dfn{cross}.  If build, host, and target are all\n-different this is called a @dfn{canadian} (for obscure reasons dealing\n-with Canada's political party and the background of the person working\n-on the build at that time).  If host and target are the same, but build\n-is different, you are using a cross-compiler to build a native for a\n-different system.  Some people call this a @dfn{host-x-host},\n-@dfn{crossed native}, or @dfn{cross-built native}.  If build and target\n-are the same, but host is different, you are using a cross compiler to\n-build a cross compiler that produces code for the machine you're\n-building on.  This is rare, so there is no common say of describing it\n-(although I propose calling it a @dfn{crossback}).\n-\n-If build and host are the same, the GCC you are building will also be\n-used to build the target libraries (like @code{libstdc++}).  If build and host\n-are different, you must have already build and installed a cross\n-compiler that will be used to build the target libraries (if you\n-configured with @option{--target=foo-bar}, this compiler will be called\n-@command{foo-bar-gcc}).\n-\n-In the case of target libraries, the machine you're building for is the\n-machine you specified with @option{--target}.  So, build is the machine\n-you're building on (no change there), host is the machine you're\n-building for (the target libraries are built for the target, so host is\n-the target you specified), and target doesn't apply (because you're not\n-building a compiler, you're building libraries).  The configure/make\n-process will adjust these variables as needed.  It also sets\n-@code{$with_cross_host} to the original @option{--host} value in case you\n-need it.\n-\n-Libiberty, for example, is built twice.  The first time, host comes from\n-@option{--host} and the second time host comes from @option{--target}.\n-Historically, libiberty has not been built for the build machine,\n-though, which causes some interesting issues with programs used to\n-generate sources for the build.  Fixing this, so that libiberty is built\n-three times, has long been on the to-do list.\n+@include makefile.texi\n \n-@end ifset\n+@include configterms.texi\n \n-@ifset INTERNALS\n-@node Portability\n-@chapter GCC and Portability\n-@cindex portability\n-@cindex GCC and portability\n-\n-The main goal of GCC was to make a good, fast compiler for machines in\n-the class that the GNU system aims to run on: 32-bit machines that address\n-8-bit bytes and have several general registers.  Elegance, theoretical\n-power and simplicity are only secondary.\n-\n-GCC gets most of the information about the target machine from a machine\n-description which gives an algebraic formula for each of the machine's\n-instructions.  This is a very clean way to describe the target.  But when\n-the compiler needs information that is difficult to express in this\n-fashion, I have not hesitated to define an ad-hoc parameter to the machine\n-description.  The purpose of portability is to reduce the total work needed\n-on the compiler; it was not of interest for its own sake.\n-\n-@cindex endianness\n-@cindex autoincrement addressing, availability\n-@findex abort\n-GCC does not contain machine dependent code, but it does contain code\n-that depends on machine parameters such as endianness (whether the most\n-significant byte has the highest or lowest address of the bytes in a word)\n-and the availability of autoincrement addressing.  In the RTL-generation\n-pass, it is often necessary to have multiple strategies for generating code\n-for a particular kind of syntax tree, strategies that are usable for different\n-combinations of parameters.  Often I have not tried to address all possible\n-cases, but only the common ones or only the ones that I have encountered.\n-As a result, a new target may require additional strategies.  You will know\n-if this happens because the compiler will call @code{abort}.  Fortunately,\n-the new strategies can be added in a machine-independent fashion, and will\n-affect only the target machines that need them.\n-@end ifset\n-\n-@ifset INTERNALS\n-@node Interface\n-@chapter Interfacing to GCC Output\n-@cindex interfacing to GCC output\n-@cindex run-time conventions\n-@cindex function call conventions\n-@cindex conventions, run-time\n-\n-GCC is normally configured to use the same function calling convention\n-normally in use on the target system.  This is done with the\n-machine-description macros described (@pxref{Target Macros}).\n-\n-@cindex unions, returning\n-@cindex structures, returning\n-@cindex returning structures and unions\n-However, returning of structure and union values is done differently on\n-some target machines.  As a result, functions compiled with PCC\n-returning such types cannot be called from code compiled with GCC,\n-and vice versa.  This does not cause trouble often because few Unix\n-library routines return structures or unions.\n-\n-GCC code returns structures and unions that are 1, 2, 4 or 8 bytes\n-long in the same registers used for @code{int} or @code{double} return\n-values.  (GCC typically allocates variables of such types in\n-registers also.)  Structures and unions of other sizes are returned by\n-storing them into an address passed by the caller (usually in a\n-register).  The machine-description macros @code{STRUCT_VALUE} and\n-@code{STRUCT_INCOMING_VALUE} tell GCC where to pass this address.\n-\n-By contrast, PCC on most target machines returns structures and unions\n-of any size by copying the data into an area of static storage, and then\n-returning the address of that storage as if it were a pointer value.\n-The caller must copy the data from that memory area to the place where\n-the value is wanted.  This is slower than the method used by GCC, and\n-fails to be reentrant.\n-\n-On some target machines, such as RISC machines and the 80386, the\n-standard system convention is to pass to the subroutine the address of\n-where to return the value.  On these machines, GCC has been\n-configured to be compatible with the standard compiler, when this method\n-is used.  It may not be compatible for structures of 1, 2, 4 or 8 bytes.\n-\n-@cindex argument passing\n-@cindex passing arguments\n-GCC uses the system's standard convention for passing arguments.  On\n-some machines, the first few arguments are passed in registers; in\n-others, all are passed on the stack.  It would be possible to use\n-registers for argument passing on any machine, and this would probably\n-result in a significant speedup.  But the result would be complete\n-incompatibility with code that follows the standard convention.  So this\n-change is practical only if you are switching to GCC as the sole C\n-compiler for the system.  We may implement register argument passing on\n-certain machines once we have a complete GNU system so that we can\n-compile the libraries with GCC@.\n-\n-On some machines (particularly the Sparc), certain types of arguments\n-are passed ``by invisible reference''.  This means that the value is\n-stored in memory, and the address of the memory location is passed to\n-the subroutine.\n-\n-@cindex @code{longjmp} and automatic variables\n-If you use @code{longjmp}, beware of automatic variables.  ISO C says that\n-automatic variables that are not declared @code{volatile} have undefined\n-values after a @code{longjmp}.  And this is all GCC promises to do,\n-because it is very difficult to restore register variables correctly, and\n-one of GCC's features is that it can put variables in registers without\n-your asking it to.\n-\n-If you want a variable to be unaltered by @code{longjmp}, and you don't\n-want to write @code{volatile} because old C compilers don't accept it,\n-just take the address of the variable.  If a variable's address is ever\n-taken, even if just to compute it and ignore it, then the variable cannot\n-go in a register:\n-\n-@example\n-@{\n-  int careful;\n-  &careful;\n-  @dots{}\n-@}\n-@end example\n-\n-@cindex arithmetic libraries\n-@cindex math libraries\n-@opindex msoft-float\n-Code compiled with GCC may call certain library routines.  Most of\n-them handle arithmetic for which there are no instructions.  This\n-includes multiply and divide on some machines, and floating point\n-operations on any machine for which floating point support is disabled\n-with @option{-msoft-float}.  Some standard parts of the C library, such as\n-@code{bcopy} or @code{memcpy}, are also called automatically.  The usual\n-function call interface is used for calling the library routines.\n-\n-Some of these routines can be defined in mostly machine-independent C;\n-they appear in @file{libgcc2.c}.  Others must be hand-written in\n-assembly language for each processor.  Wherever they are defined, they\n-are compiled into the support library, @file{libgcc.a}, which is\n-automatically searched when you link programs with GCC@.\n-@end ifset\n-\n-@ifset INTERNALS\n-@node Passes\n-@chapter Passes and Files of the Compiler\n-@cindex passes and files of the compiler\n-@cindex files and passes of the compiler\n-@cindex compiler passes and files\n-\n-@cindex top level of compiler\n-The overall control structure of the compiler is in @file{toplev.c}.  This\n-file is responsible for initialization, decoding arguments, opening and\n-closing files, and sequencing the passes.\n-\n-@cindex parsing pass\n-The parsing pass is invoked only once, to parse the entire input.  A\n-high level tree representation is then generated from the input,\n-one function at a time.  This tree code is then transformed into RTL\n-intermediate code, and processed.  The files involved in transforming\n-the trees into RTL are @file{expr.c}, @file{expmed.c}, and\n-@file{stmt.c}.\n-@c Note, the above files aren't strictly the only files involved. It's\n-@c all over the place (function.c, final.c,etc).  However, those are\n-@c the files that are supposed to be directly involved, and have\n-@c their purpose listed as such, so i've only listed them.\n-The order of trees that are processed, is not\n-necessarily the same order they are generated from\n-the input, due to deferred inlining, and other considerations.\n-\n-@findex rest_of_compilation\n-@findex rest_of_decl_compilation\n-Each time the parsing pass reads a complete function definition or\n-top-level declaration, it calls either the function\n-@code{rest_of_compilation}, or the function\n-@code{rest_of_decl_compilation} in @file{toplev.c}, which are\n-responsible for all further processing necessary, ending with output of\n-the assembler language.  All other compiler passes run, in sequence,\n-within @code{rest_of_compilation}.  When that function returns from\n-compiling a function definition, the storage used for that function\n-definition's compilation is entirely freed, unless it is an inline\n-function, or was deferred for some reason (this can occur in\n-templates, for example).\n-@ifset USING\n-(@pxref{Inline,,An Inline Function is As Fast As a Macro}).\n-@end ifset\n-@ifclear USING\n-(@pxref{Inline,,An Inline Function is As Fast As a Macro,gcc.texi,Using GCC}).\n-@end ifclear\n-\n-Here is a list of all the passes of the compiler and their source files.\n-Also included is a description of where debugging dumps can be requested\n-with @option{-d} options.\n-\n-@itemize @bullet\n-@item\n-Parsing.  This pass reads the entire text of a function definition,\n-constructing a high level tree representation.  (Because of the semantic\n-analysis that takes place during this pass, it does more than is\n-formally considered to be parsing.)\n-\n-The tree representation does not entirely follow C syntax, because it is\n-intended to support other languages as well.\n-\n-Language-specific data type analysis is also done in this pass, and every\n-tree node that represents an expression has a data type attached.\n-Variables are represented as declaration nodes.\n-\n-The language-independent source files for parsing are\n-@file{tree.c}, @file{fold-const.c}, and @file{stor-layout.c}.\n-There are also header files @file{tree.h} and @file{tree.def}\n-which define the format of the tree representation.\n-\n-C preprocessing, for language front ends, that want or require it, is\n-performed by cpplib, which is covered in separate documentation.  In\n-particular, the internals are covered in @xref{Top, ,Cpplib internals,\n-cppinternals, Cpplib Internals}.\n-\n-@c Avoiding overfull is tricky here.\n-The source files to parse C are\n-@file{c-convert.c},\n-@file{c-decl.c},\n-@file{c-errors.c},\n-@file{c-lang.c},\n-@file{c-parse.in},\n-@file{c-aux-info.c},\n-and\n-@file{c-typeck.c},\n-along with a header file\n-@file{c-tree.h}\n-and some files shared with Objective-C and C++.\n-\n-The source files for parsing C++ are in @file{cp/}.\n-They are @file{parse.y},\n-@file{class.c},\n-@file{cvt.c}, @file{decl.c}, @file{decl2.c},\n-@file{except.c},\n-@file{expr.c}, @file{init.c}, @file{lex.c},\n-@file{method.c}, @file{ptree.c},\n-@file{search.c}, @file{spew.c},\n-@file{semantics.c}, @file{tree.c},\n-@file{typeck2.c}, and\n-@file{typeck.c}, along with header files @file{cp-tree.def},\n-@file{cp-tree.h}, and @file{decl.h}.\n-\n-The special source files for parsing Objective-C are in @file{objc/}.\n-They are @file{objc-act.c}, @file{objc-tree.def}, and @file{objc-act.h}.\n-Certain C-specific files are used for this as well.\n-\n-The files\n-@file{c-common.c},\n-@file{c-common.def},\n-@file{c-dump.c},\n-@file{c-format.c},\n-@file{c-pragma.c},\n-@file{c-semantics.c},\n-and\n-@file{c-lex.c},\n-along with header files\n-@file{c-common.h},\n-@file{c-dump.h},\n-@file{c-lex.h},\n-and\n-@file{c-pragma.h},\n-are also used for all of the above languages.\n-\n-\n-@cindex Tree optimization\n-@item\n-Tree optimization.   This is the optimization of the tree\n-representation, before converting into RTL code.\n-\n-@cindex inline on trees, automatic\n-Currently, the main optimization performed here is tree-based\n-inlining.\n-This is implemented for C++ in @file{cp/optimize.c}.  Note that\n-tree based inlining turns off rtx based inlining (since it's more\n-powerful, it would be a waste of time to do rtx based inlining in\n-addition).\n-The C front end currently does not perform tree based inlining.\n-\n-@cindex constant folding\n-@cindex arithmetic simplifications\n-@cindex simplifications, arithmetic\n-Constant folding and some arithmetic simplifications are also done\n-during this pass, on the tree representation.\n-The routines that perform these tasks are located in @file{fold-const.c}.\n-\n-@cindex RTL generation\n-@item\n-RTL generation.  This is the conversion of syntax tree into RTL code.\n-\n-@cindex target-parameter-dependent code\n-This is where the bulk of target-parameter-dependent code is found,\n-since often it is necessary for strategies to apply only when certain\n-standard kinds of instructions are available.  The purpose of named\n-instruction patterns is to provide this information to the RTL\n-generation pass.\n-\n-@cindex tail recursion optimization\n-Optimization is done in this pass for @code{if}-conditions that are\n-comparisons, boolean operations or conditional expressions.  Tail\n-recursion is detected at this time also.  Decisions are made about how\n-best to arrange loops and how to output @code{switch} statements.\n-\n-@c Avoiding overfull is tricky here.\n-The source files for RTL generation include\n-@file{stmt.c},\n-@file{calls.c},\n-@file{expr.c},\n-@file{explow.c},\n-@file{expmed.c},\n-@file{function.c},\n-@file{optabs.c}\n-and @file{emit-rtl.c}.\n-Also, the file\n-@file{insn-emit.c}, generated from the machine description by the\n-program @code{genemit}, is used in this pass.  The header file\n-@file{expr.h} is used for communication within this pass.\n-\n-@findex genflags\n-@findex gencodes\n-The header files @file{insn-flags.h} and @file{insn-codes.h},\n-generated from the machine description by the programs @code{genflags}\n-and @code{gencodes}, tell this pass which standard names are available\n-for use and which patterns correspond to them.\n-\n-Aside from debugging information output, none of the following passes\n-refers to the tree structure representation of the function (only\n-part of which is saved).\n-\n-@cindex inline on rtx, automatic\n-The decision of whether the function can and should be expanded inline\n-in its subsequent callers is made at the end of rtl generation.  The\n-function must meet certain criteria, currently related to the size of\n-the function and the types and number of parameters it has.  Note that\n-this function may contain loops, recursive calls to itself\n-(tail-recursive functions can be inlined!), gotos, in short, all\n-constructs supported by GCC@.  The file @file{integrate.c} contains\n-the code to save a function's rtl for later inlining and to inline that\n-rtl when the function is called.  The header file @file{integrate.h}\n-is also used for this purpose.\n-\n-@opindex dr\n-The option @option{-dr} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.rtl} to\n-the input file name.\n-\n-@c Should the exception handling pass be talked about here?\n-\n-@cindex sibling call optimization\n-@item\n-Sibiling call optimization.   This pass performs tail recursion\n-elimination, and tail and sibling call optimizations.  The purpose of\n-these optimizations is to reduce the overhead of function calls,\n-whenever possible.\n-\n-The source file of this pass is @file{sibcall.c}\n-\n-@opindex di\n-The option @option{-di} causes a debugging dump of the RTL code after\n-this pass is run.  This dump file's name is made by appending\n-@samp{.sibling} to the input file name.\n-\n-@cindex jump optimization\n-@cindex unreachable code\n-@cindex dead code\n-@item\n-Jump optimization.  This pass simplifies jumps to the following\n-instruction, jumps across jumps, and jumps to jumps.  It deletes\n-unreferenced labels and unreachable code, except that unreachable code\n-that contains a loop is not recognized as unreachable in this pass.\n-(Such loops are deleted later in the basic block analysis.)  It also\n-converts some code originally written with jumps into sequences of\n-instructions that directly set values from the results of comparisons,\n-if the machine has such instructions.\n-\n-Jump optimization is performed two or three times.  The first time is\n-immediately following RTL generation.  The second time is after CSE,\n-but only if CSE says repeated jump optimization is needed.  The\n-last time is right before the final pass.  That time, cross-jumping\n-and deletion of no-op move instructions are done together with the\n-optimizations described above.\n-\n-The source file of this pass is @file{jump.c}.\n-\n-@opindex dj\n-The option @option{-dj} causes a debugging dump of the RTL code after\n-this pass is run for the first time.  This dump file's name is made by\n-appending @samp{.jump} to the input file name.\n-\n-\n-@cindex register use analysis\n-@item\n-Register scan.  This pass finds the first and last use of each\n-register, as a guide for common subexpression elimination.  Its source\n-is in @file{regclass.c}.\n-\n-@cindex jump threading\n-@item\n-@opindex fthread-jumps\n-Jump threading.  This pass detects a condition jump that branches to an\n-identical or inverse test.  Such jumps can be @samp{threaded} through\n-the second conditional test.  The source code for this pass is in\n-@file{jump.c}.  This optimization is only performed if\n-@option{-fthread-jumps} is enabled.\n-\n-@cindex SSA optimizations\n-@cindex Single Static Assignment optimizations\n-@opindex fssa\n-@item\n-Static Single Assignment (SSA) based optimization passes.  The\n-SSA conversion passes (to/from) are turned on by the @option{-fssa}\n-option (it is also done automatically if you enable an SSA optimization pass).\n-These passes utilize a form called Static Single Assignment.  In SSA form,\n-each variable (pseudo register) is only set once, giving you def-use\n-and use-def chains for free, and enabling a lot more optimization\n-passes to be run in linear time.\n-Conversion to and from SSA form is handled by functions in\n-@file{ssa.c}.\n-\n-@opindex de\n-The option @option{-de} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.ssa} to\n-the input file name.\n-@itemize @bullet\n-@cindex SSA Conditional Constant Propagation\n-@cindex Conditional Constant Propagation, SSA based\n-@cindex conditional constant propagation\n-@opindex fssa-ccp\n-@item\n-SSA Conditional Constant Propagation.  Turned on by the @option{-fssa-ccp}\n-SSA Aggressive Dead Code Elimination.  Turned on by the @option{-fssa-dce}\n-option.  This pass performs conditional constant propagation to simplify\n-instructions including conditional branches.  This pass is more aggressive\n-than the constant propgation done by the CSE and GCSE pases, but operates\n-in linear time.\n-\n-@opindex dW\n-The option @option{-dW} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.ssaccp} to\n-the input file name.\n-\n-@cindex SSA DCE\n-@cindex DCE, SSA based\n-@cindex dead code elimination\n-@opindex fssa-dce\n-@item\n-SSA Aggressive Dead Code Elimination.  Turned on by the @option{-fssa-dce}\n-option.  This pass performs elimination of code considered unnecessary because\n-it has no externally visible effects on the program.  It operates in\n-linear time.\n-\n-@opindex dX\n-The option @option{-dX} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.ssadce} to\n-the input file name.\n-@end itemize\n-\n-@cindex common subexpression elimination\n-@cindex constant propagation\n-@item\n-Common subexpression elimination.  This pass also does constant\n-propagation.  Its source files are @file{cse.c}, and @file{cselib.c}.\n-If constant  propagation causes conditional jumps to become\n-unconditional or to become no-ops, jump optimization is run again when\n-CSE is finished.\n-\n-@opindex ds\n-The option @option{-ds} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.cse} to\n-the input file name.\n-\n-@cindex global common subexpression elimination\n-@cindex constant propagation\n-@cindex copy propagation\n-@item\n-Global common subexpression elimination.  This pass performs two\n-different types of GCSE  depending on whether you are optimizing for\n-size or not (LCM based GCSE tends to increase code size for a gain in\n-speed, while Morel-Renvoise based GCSE does not).\n-When optimizing for size, GCSE is done using Morel-Renvoise Partial\n-Redundancy Elimination, with the exception that it does not try to move\n-invariants out of loops---that is left to  the loop optimization pass.\n-If MR PRE GCSE is done, code hoisting (aka unification) is also done, as\n-well as load motion.\n-If you are optimizing for speed, LCM (lazy code motion) based GCSE is\n-done.  LCM is based on the work of Knoop, Ruthing, and Steffen.  LCM\n-based GCSE also does loop invariant code motion.  We also perform load\n-and store motion when optimizing for speed.\n-Regardless of which type of GCSE is used, the GCSE pass also performs\n-global constant and  copy propagation.\n-\n-The source file for this pass is @file{gcse.c}, and the LCM routines\n-are in @file{lcm.c}.\n-\n-@opindex dG\n-The option @option{-dG} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.gcse} to\n-the input file name.\n-\n-@cindex loop optimization\n-@cindex code motion\n-@cindex strength-reduction\n-@item\n-Loop optimization.  This pass moves constant expressions out of loops,\n-and optionally does strength-reduction and loop unrolling as well.\n-Its source files are @file{loop.c} and @file{unroll.c}, plus the header\n-@file{loop.h} used for communication between them.  Loop unrolling uses\n-some functions in @file{integrate.c} and the header @file{integrate.h}.\n-Loop dependency analysis routines are contained in @file{dependence.c}.\n-\n-@opindex dL\n-The option @option{-dL} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.loop} to\n-the input file name.\n-\n-@item\n-@opindex frerun-cse-after-loop\n-If @option{-frerun-cse-after-loop} was enabled, a second common\n-subexpression elimination pass is performed after the loop optimization\n-pass.  Jump threading is also done again at this time if it was specified.\n-\n-@opindex dt\n-The option @option{-dt} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.cse2} to\n-the input file name.\n-\n-@cindex data flow analysis\n-@cindex analysis, data flow\n-@cindex basic blocks\n-@item\n-Data flow analysis (@file{flow.c}).  This pass divides the program\n-into basic blocks (and in the process deletes unreachable loops); then\n-it computes which pseudo-registers are live at each point in the\n-program, and makes the first instruction that uses a value point at\n-the instruction that computed the value.\n-\n-@cindex autoincrement/decrement analysis\n-This pass also deletes computations whose results are never used, and\n-combines memory references with add or subtract instructions to make\n-autoincrement or autodecrement addressing.\n-\n-@opindex df\n-The option @option{-df} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.flow} to\n-the input file name.  If stupid register allocation is in use, this\n-dump file reflects the full results of such allocation.\n-\n-@cindex instruction combination\n-@item\n-Instruction combination (@file{combine.c}).  This pass attempts to\n-combine groups of two or three instructions that are related by data\n-flow into single instructions.  It combines the RTL expressions for\n-the instructions by substitution, simplifies the result using algebra,\n-and then attempts to match the result against the machine description.\n-\n-@opindex dc\n-The option @option{-dc} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.combine}\n-to the input file name.\n-\n-@cindex if conversion\n-@item\n-If-conversion is a transformation that transforms control dependencies\n-into data dependencies (IE it transforms conditional code into a\n-single control stream).\n-It is implemented in the file @file{ifcvt.c}.\n-\n-@opindex dE\n-The option @option{-dE} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.ce} to\n-the input file name.\n-\n-@cindex register movement\n-@item\n-Register movement (@file{regmove.c}).  This pass looks for cases where\n-matching constraints would force an instruction to need a reload, and\n-this reload would be a register to register move.  It then attempts\n-to change the registers used by the instruction to avoid the move\n-instruction.\n-\n-@opindex dN\n-The option @option{-dN} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.regmove}\n-to the input file name.\n-\n-@cindex instruction scheduling\n-@cindex scheduling, instruction\n-@item\n-Instruction scheduling (@file{sched.c}).  This pass looks for\n-instructions whose output will not be available by the time that it is\n-used in subsequent instructions.  (Memory loads and floating point\n-instructions often have this behavior on RISC machines).  It re-orders\n-instructions within a basic block to try to separate the definition and\n-use of items that otherwise would cause pipeline stalls.\n-\n-Instruction scheduling is performed twice.  The first time is immediately\n-after instruction combination and the second is immediately after reload.\n-\n-@opindex dS\n-The option @option{-dS} causes a debugging dump of the RTL code after this\n-pass is run for the first time.  The dump file's name is made by\n-appending @samp{.sched} to the input file name.\n-\n-@cindex register class preference pass\n-@item\n-Register class preferencing.  The RTL code is scanned to find out\n-which register class is best for each pseudo register.  The source\n-file is @file{regclass.c}.\n-\n-@cindex register allocation\n-@cindex local register allocation\n-@item\n-Local register allocation (@file{local-alloc.c}).  This pass allocates\n-hard registers to pseudo registers that are used only within one basic\n-block.  Because the basic block is linear, it can use fast and\n-powerful techniques to do a very good job.\n-\n-@opindex dl\n-The option @option{-dl} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.lreg} to\n-the input file name.\n-\n-@cindex global register allocation\n-@item\n-Global register allocation (@file{global.c}).  This pass\n-allocates hard registers for the remaining pseudo registers (those\n-whose life spans are not contained in one basic block).\n-\n-@cindex reloading\n-@item\n-Reloading.  This pass renumbers pseudo registers with the hardware\n-registers numbers they were allocated.  Pseudo registers that did not\n-get hard registers are replaced with stack slots.  Then it finds\n-instructions that are invalid because a value has failed to end up in\n-a register, or has ended up in a register of the wrong kind.  It fixes\n-up these instructions by reloading the problematical values\n-temporarily into registers.  Additional instructions are generated to\n-do the copying.\n-\n-The reload pass also optionally eliminates the frame pointer and inserts\n-instructions to save and restore call-clobbered registers around calls.\n-\n-Source files are @file{reload.c} and @file{reload1.c}, plus the header\n-@file{reload.h} used for communication between them.\n-\n-@opindex dg\n-The option @option{-dg} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.greg} to\n-the input file name.\n-\n-@cindex instruction scheduling\n-@cindex scheduling, instruction\n-@item\n-Instruction scheduling is repeated here to try to avoid pipeline stalls\n-due to memory loads generated for spilled pseudo registers.\n-\n-@opindex dR\n-The option @option{-dR} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.sched2}\n-to the input file name.\n-\n-@cindex basic block reordering\n-@cindex reordering, block\n-@item\n-Basic block reordering.  This pass implements profile guided code\n-positioning.  If profile information is not available, various types of\n-static analysis are performed to make the predictions normally coming\n-from the profile feedback (IE execution frequency, branch probability,\n-etc).  It is implemented in the file @file{bb-reorder.c}, and the\n-various prediction routines are in @file{predict.c}.\n-\n-@opindex dB\n-The option @option{-dB} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.bbro} to\n-the input file name.\n-\n-@cindex cross-jumping\n-@cindex no-op move instructions\n-@item\n-Jump optimization is repeated, this time including cross-jumping\n-and deletion of no-op move instructions.\n-\n-@opindex dJ\n-The option @option{-dJ} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.jump2}\n-to the input file name.\n-\n-@cindex delayed branch scheduling\n-@cindex scheduling, delayed branch\n-@item\n-Delayed branch scheduling.  This optional pass attempts to find\n-instructions that can go into the delay slots of other instructions,\n-usually jumps and calls.  The source file name is @file{reorg.c}.\n-\n-@opindex dd\n-The option @option{-dd} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.dbr}\n-to the input file name.\n-\n-@cindex branch shortening\n-@item\n-Branch shortening.  On many RISC machines, branch instructions have a\n-limited range.  Thus, longer sequences of instructions must be used for\n-long branches.  In this pass, the compiler figures out what how far each\n-instruction will be from each other instruction, and therefore whether\n-the usual instructions, or the longer sequences, must be used for each\n-branch.\n-\n-@cindex register-to-stack conversion\n-@item\n-Conversion from usage of some hard registers to usage of a register\n-stack may be done at this point.  Currently, this is supported only\n-for the floating-point registers of the Intel 80387 coprocessor.   The\n-source file name is @file{reg-stack.c}.\n-\n-@opindex dk\n-The options @option{-dk} causes a debugging dump of the RTL code after\n-this pass.  This dump file's name is made by appending @samp{.stack}\n-to the input file name.\n-\n-@cindex final pass\n-@cindex peephole optimization\n-@item\n-Final.  This pass outputs the assembler code for the function.  It is\n-also responsible for identifying spurious test and compare\n-instructions.  Machine-specific peephole optimizations are performed\n-at the same time.  The function entry and exit sequences are generated\n-directly as assembler code in this pass; they never exist as RTL@.\n-\n-The source files are @file{final.c} plus @file{insn-output.c}; the\n-latter is generated automatically from the machine description by the\n-tool @file{genoutput}.  The header file @file{conditions.h} is used\n-for communication between these files.\n-\n-@cindex debugging information generation\n-@item\n-Debugging information output.  This is run after final because it must\n-output the stack slot offsets for pseudo registers that did not get\n-hard registers.  Source files are @file{dbxout.c} for DBX symbol table\n-format, @file{sdbout.c} for SDB symbol table format,  @file{dwarfout.c}\n-for DWARF symbol table format, and the files @file{dwarf2out.c} and\n-@file{dwarf2asm.c} for DWARF2 symbol table format.\n-@end itemize\n-\n-Some additional files are used by all or many passes:\n-\n-@itemize @bullet\n-@item\n-Every pass uses @file{machmode.def} and @file{machmode.h} which define\n-the machine modes.\n-\n-@item\n-Several passes use @file{real.h}, which defines the default\n-representation of floating point constants and how to operate on them.\n-\n-@item\n-All the passes that work with RTL use the header files @file{rtl.h}\n-and @file{rtl.def}, and subroutines in file @file{rtl.c}.  The tools\n-@code{gen*} also use these files to read and work with the machine\n-description RTL@.\n-\n-@item\n-All the tools that read the machine description use support routines\n-found in @file{gensupport.c}, @file{errors.c}, and @file{read-rtl.c}.\n-\n-@findex genconfig\n-@item\n-Several passes refer to the header file @file{insn-config.h} which\n-contains a few parameters (C macro definitions) generated\n-automatically from the machine description RTL by the tool\n-@code{genconfig}.\n-\n-@cindex instruction recognizer\n-@item\n-Several passes use the instruction recognizer, which consists of\n-@file{recog.c} and @file{recog.h}, plus the files @file{insn-recog.c}\n-and @file{insn-extract.c} that are generated automatically from the\n-machine description by the tools @file{genrecog} and\n-@file{genextract}.\n-\n-@item\n-Several passes use the header files @file{regs.h} which defines the\n-information recorded about pseudo register usage, and @file{basic-block.h}\n-which defines the information recorded about basic blocks.\n-\n-@item\n-@file{hard-reg-set.h} defines the type @code{HARD_REG_SET}, a bit-vector\n-with a bit for each hard register, and some macros to manipulate it.\n-This type is just @code{int} if the machine has few enough hard registers;\n-otherwise it is an array of @code{int} and some of the macros expand\n-into loops.\n-\n-@item\n-Several passes use instruction attributes.  A definition of the\n-attributes defined for a particular machine is in file\n-@file{insn-attr.h}, which is generated from the machine description by\n-the program @file{genattr}.  The file @file{insn-attrtab.c} contains\n-subroutines to obtain the attribute values for insns.  It is generated\n-from the machine description by the program @file{genattrtab}.\n-@end itemize\n @end ifset\n \n @ifset INTERNALS\n+@include portability.texi\n+@include interface.texi\n+@include passes.texi\n @include c-tree.texi\n @include rtl.texi\n @include md.texi\n @include tm.texi\n-@end ifset\n-\n-@ifset INTERNALS\n-@node Config\n-@chapter The Configuration File\n-@cindex configuration file\n-@cindex @file{xm-@var{machine}.h}\n-\n-The configuration file @file{xm-@var{machine}.h} contains macro\n-definitions that describe the machine and system on which the compiler\n-is running, unlike the definitions in @file{@var{machine}.h}, which\n-describe the machine for which the compiler is producing output.  Most\n-of the values in @file{xm-@var{machine}.h} are actually the same on all\n-machines that GCC runs on, so large parts of all configuration files\n-are identical.  But there are some macros that vary:\n-\n-@table @code\n-@findex USG\n-@item USG\n-Define this macro if the host system is System V@.\n-\n-@findex VMS\n-@item VMS\n-Define this macro if the host system is VMS@.\n-\n-@findex FATAL_EXIT_CODE\n-@item FATAL_EXIT_CODE\n-A C expression for the status code to be returned when the compiler\n-exits after serious errors.  The default is the system-provided macro\n-@samp{EXIT_FAILURE}, or @samp{1} if the system doesn't define that\n-macro.  Define this macro only if these defaults are incorrect.\n-\n-@findex SUCCESS_EXIT_CODE\n-@item SUCCESS_EXIT_CODE\n-A C expression for the status code to be returned when the compiler\n-exits without serious errors.  (Warnings are not serious errors.)  The\n-default is the system-provided macro @samp{EXIT_SUCCESS}, or @samp{0} if\n-the system doesn't define that macro.  Define this macro only if these\n-defaults are incorrect.\n-\n-@findex HOST_WORDS_BIG_ENDIAN\n-@item HOST_WORDS_BIG_ENDIAN\n-Defined if the host machine stores words of multi-word values in\n-big-endian order.  (GCC does not depend on the host byte ordering\n-within a word.)\n-\n-@findex HOST_FLOAT_WORDS_BIG_ENDIAN\n-@item HOST_FLOAT_WORDS_BIG_ENDIAN\n-Define this macro to be 1 if the host machine stores @code{DFmode},\n-@code{XFmode} or @code{TFmode} floating point numbers in memory with the\n-word containing the sign bit at the lowest address; otherwise, define it\n-to be zero.\n-\n-This macro need not be defined if the ordering is the same as for\n-multi-word integers.\n-\n-@findex HOST_FLOAT_FORMAT\n-@item HOST_FLOAT_FORMAT\n-A numeric code distinguishing the floating point format for the host\n-machine.  See @code{TARGET_FLOAT_FORMAT} in @ref{Storage Layout} for the\n-alternatives and default.\n-\n-@findex HOST_BITS_PER_CHAR\n-@item HOST_BITS_PER_CHAR\n-A C expression for the number of bits in @code{char} on the host\n-machine.\n-\n-@findex HOST_BITS_PER_SHORT\n-@item HOST_BITS_PER_SHORT\n-A C expression for the number of bits in @code{short} on the host\n-machine.\n-\n-@findex HOST_BITS_PER_INT\n-@item HOST_BITS_PER_INT\n-A C expression for the number of bits in @code{int} on the host\n-machine.\n-\n-@findex HOST_BITS_PER_LONG\n-@item HOST_BITS_PER_LONG\n-A C expression for the number of bits in @code{long} on the host\n-machine.\n-\n-@findex HOST_BITS_PER_LONGLONG\n-@item HOST_BITS_PER_LONGLONG\n-A C expression for the number of bits in @code{long long} on the host\n-machine.\n-\n-@findex ONLY_INT_FIELDS\n-@item ONLY_INT_FIELDS\n-Define this macro to indicate that the host compiler only supports\n-@code{int} bit-fields, rather than other integral types, including\n-@code{enum}, as do most C compilers.\n-\n-@findex OBSTACK_CHUNK_SIZE\n-@item OBSTACK_CHUNK_SIZE\n-A C expression for the size of ordinary obstack chunks.\n-If you don't define this, a usually-reasonable default is used.\n-\n-@findex OBSTACK_CHUNK_ALLOC\n-@item OBSTACK_CHUNK_ALLOC\n-The function used to allocate obstack chunks.\n-If you don't define this, @code{xmalloc} is used.\n-\n-@findex OBSTACK_CHUNK_FREE\n-@item OBSTACK_CHUNK_FREE\n-The function used to free obstack chunks.\n-If you don't define this, @code{free} is used.\n-\n-@findex USE_C_ALLOCA\n-@item USE_C_ALLOCA\n-Define this macro to indicate that the compiler is running with the\n-@code{alloca} implemented in C@.  This version of @code{alloca} can be\n-found in the file @file{alloca.c}; to use it, you must also alter the\n-@file{Makefile} variable @code{ALLOCA}.  (This is done automatically\n-for the systems on which we know it is needed.)\n-\n-If you do define this macro, you should probably do it as follows:\n-\n-@example\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#else\n-#define alloca __builtin_alloca\n-#endif\n-@end example\n-\n-@noindent\n-so that when the compiler is compiled with GCC it uses the more\n-efficient built-in @code{alloca} function.\n-\n-@item FUNCTION_CONVERSION_BUG\n-@findex FUNCTION_CONVERSION_BUG\n-Define this macro to indicate that the host compiler does not properly\n-handle converting a function value to a pointer-to-function when it is\n-used in an expression.\n-\n-@findex MULTIBYTE_CHARS\n-@item MULTIBYTE_CHARS\n-Define this macro to enable support for multibyte characters in the\n-input to GCC@.  This requires that the host system support the ISO C\n-library functions for converting multibyte characters to wide\n-characters.\n-\n-@findex POSIX\n-@item POSIX\n-Define this if your system is POSIX.1 compliant.\n-\n-@findex PATH_SEPARATOR\n-@item PATH_SEPARATOR\n-Define this macro to be a C character constant representing the\n-character used to separate components in paths.  The default value is\n-the colon character\n-\n-@findex DIR_SEPARATOR\n-@item DIR_SEPARATOR\n-If your system uses some character other than slash to separate\n-directory names within a file specification, define this macro to be a C\n-character constant specifying that character.  When GCC displays file\n-names, the character you specify will be used.  GCC will test for\n-both slash and the character you specify when parsing filenames.\n-\n-@findex DIR_SEPARATOR_2\n-@item DIR_SEPARATOR_2\n-If your system uses an alternative character other than\n-@samp{DIR_SEPARATOR} to separate directory names within a file\n-specification, define this macro to be a C character constant specifying\n-that character.  If you define this macro, GCC will test for slash,\n-@samp{DIR_SEPARATOR}, and @samp{DIR_SEPARATOR_2} when parsing filenames.\n-\n-@findex TARGET_OBJECT_SUFFIX\n-@item TARGET_OBJECT_SUFFIX\n-Define this macro to be a C string representing the suffix for object\n-files on your target machine.  If you do not define this macro, GCC will\n-use @samp{.o} as the suffix for object files.\n-\n-@findex TARGET_EXECUTABLE_SUFFIX\n-@item TARGET_EXECUTABLE_SUFFIX\n-Define this macro to be a C string representing the suffix to be\n-automatically added to executable files on your target machine.  If you\n-do not define this macro, GCC will use the null string as the suffix for\n-executable files.\n-\n-@findex HOST_OBJECT_SUFFIX\n-@item HOST_OBJECT_SUFFIX\n-Define this macro to be a C string representing the suffix for object\n-files on your host machine (@samp{xm-*.h}).  If you do not define this\n-macro, GCC will use @samp{.o} as the suffix for object files.\n-\n-@findex HOST_EXECUTABLE_SUFFIX\n-@item HOST_EXECUTABLE_SUFFIX\n-Define this macro to be a C string representing the suffix for\n-executable files on your host machine (@samp{xm-*.h}).  If you do not\n-define this macro, GCC will use the null string as the suffix for\n-executable files.\n-\n-@findex HOST_BIT_BUCKET\n-@item HOST_BIT_BUCKET\n-The name of a file or file-like object on the host system which acts as\n-a ``bit bucket''.  If you do not define this macro, GCC will use\n-@samp{/dev/null} as the bit bucket.  If the target does not support a\n-bit bucket, this should be defined to the null string, or some other\n-invalid filename.  If the bit bucket is not writable, GCC will use a\n-temporary file instead.\n-\n-@findex COLLECT_EXPORT_LIST\n-@item COLLECT_EXPORT_LIST\n-If defined, @code{collect2} will scan the individual object files\n-specified on its command line and create an export list for the linker.\n-Define this macro for systems like AIX, where the linker discards\n-object files that are not referenced from @code{main} and uses export\n-lists.\n-\n-@findex COLLECT2_HOST_INITIALIZATION\n-@item COLLECT2_HOST_INITIALIZATION\n-If defined, a C statement (sans semicolon) that performs host-dependent\n-initialization when @code{collect2} is being initialized.\n-\n-@findex GCC_DRIVER_HOST_INITIALIZATION\n-@item GCC_DRIVER_HOST_INITIALIZATION\n-If defined, a C statement (sans semicolon) that performs host-dependent\n-initialization when a compilation driver is being initialized.\n-\n-@findex UPDATE_PATH_HOST_CANONICALIZE\n-@item UPDATE_PATH_HOST_CANONICALIZE (@var{path})\n-If defined, a C statement (sans semicolon) that performs host-dependent\n-canonicalization when a path used in a compilation driver or\n-preprocessor is canonicalized.  @var{path} is a malloc-ed path to be\n-canonicalized.  If the C statement does canonicalize @var{path} into a\n-different buffer, the old path should be freed and the new buffer should\n-have been allocated with malloc.\n-@end table\n-\n-@findex bzero\n-@findex bcmp\n-In addition, configuration files for system V define @code{bcopy},\n-@code{bzero} and @code{bcmp} as aliases.  Some files define @code{alloca}\n-as a macro when compiled with GCC, in order to take advantage of the\n-benefit of GCC's built-in @code{alloca}.\n-\n-@node Fragments\n-@chapter Makefile Fragments\n-@cindex makefile fragment\n-\n-When you configure GCC using the @file{configure} script\n-(@pxref{Installation}), it will construct the file @file{Makefile} from\n-the template file @file{Makefile.in}.  When it does this, it will\n-incorporate makefile fragment files from the @file{config} directory,\n-named @file{t-@var{target}} and @file{x-@var{host}}.  If these files do\n-not exist, it means nothing needs to be added for a given target or\n-host.\n-\n-@menu\n-* Target Fragment:: Writing the @file{t-@var{target}} file.\n-* Host Fragment::   Writing the @file{x-@var{host}} file.\n-@end menu\n-\n-@node Target Fragment\n-@section The Target Makefile Fragment\n-@cindex target makefile fragment\n-@cindex @file{t-@var{target}}\n-\n-The target makefile fragment, @file{t-@var{target}}, defines special\n-target dependent variables and targets used in the @file{Makefile}:\n-\n-@table @code\n-@findex LIBGCC2_CFLAGS\n-@item LIBGCC2_CFLAGS\n-Compiler flags to use when compiling @file{libgcc2.c}.\n-\n-@findex LIB2FUNCS_EXTRA\n-@item LIB2FUNCS_EXTRA\n-A list of source file names to be compiled or assembled and inserted\n-into @file{libgcc.a}.\n-\n-@findex Floating Point Emulation\n-@item Floating Point Emulation\n-To have GCC include software floating point libraries in @file{libgcc.a}\n-define @code{FPBIT} and @code{DPBIT} along with a few rules as follows:\n-@smallexample\n-# We want fine grained libraries, so use the new code\n-# to build the floating point emulation libraries.\n-FPBIT = fp-bit.c\n-DPBIT = dp-bit.c\n-\n-\n-fp-bit.c: $(srcdir)/config/fp-bit.c\n-        echo '#define FLOAT' > fp-bit.c\n-        cat $(srcdir)/config/fp-bit.c >> fp-bit.c\n-\n-dp-bit.c: $(srcdir)/config/fp-bit.c\n-        cat $(srcdir)/config/fp-bit.c > dp-bit.c\n-@end smallexample\n-\n-You may need to provide additional #defines at the beginning of @file{fp-bit.c}\n-and @file{dp-bit.c} to control target endianness and other options.\n-\n-\n-@findex CRTSTUFF_T_CFLAGS\n-@item CRTSTUFF_T_CFLAGS\n-Special flags used when compiling @file{crtstuff.c}.\n-@xref{Initialization}.\n-\n-@findex CRTSTUFF_T_CFLAGS_S\n-@item CRTSTUFF_T_CFLAGS_S\n-Special flags used when compiling @file{crtstuff.c} for shared\n-linking.  Used if you use @file{crtbeginS.o} and @file{crtendS.o}\n-in @code{EXTRA-PARTS}.\n-@xref{Initialization}.\n-\n-@findex MULTILIB_OPTIONS\n-@item MULTILIB_OPTIONS\n-For some targets, invoking GCC in different ways produces objects\n-that can not be linked together.  For example, for some targets GCC\n-produces both big and little endian code.  For these targets, you must\n-arrange for multiple versions of @file{libgcc.a} to be compiled, one for\n-each set of incompatible options.  When GCC invokes the linker, it\n-arranges to link in the right version of @file{libgcc.a}, based on\n-the command line options used.\n-\n-The @code{MULTILIB_OPTIONS} macro lists the set of options for which\n-special versions of @file{libgcc.a} must be built.  Write options that\n-are mutually incompatible side by side, separated by a slash.  Write\n-options that may be used together separated by a space.  The build\n-procedure will build all combinations of compatible options.\n-\n-For example, if you set @code{MULTILIB_OPTIONS} to @samp{m68000/m68020\n-msoft-float}, @file{Makefile} will build special versions of\n-@file{libgcc.a} using the following sets of options:  @option{-m68000},\n-@option{-m68020}, @option{-msoft-float}, @samp{-m68000 -msoft-float}, and\n-@samp{-m68020 -msoft-float}.\n-\n-@findex MULTILIB_DIRNAMES\n-@item MULTILIB_DIRNAMES\n-If @code{MULTILIB_OPTIONS} is used, this variable specifies the\n-directory names that should be used to hold the various libraries.\n-Write one element in @code{MULTILIB_DIRNAMES} for each element in\n-@code{MULTILIB_OPTIONS}.  If @code{MULTILIB_DIRNAMES} is not used, the\n-default value will be @code{MULTILIB_OPTIONS}, with all slashes treated\n-as spaces.\n-\n-For example, if @code{MULTILIB_OPTIONS} is set to @samp{m68000/m68020\n-msoft-float}, then the default value of @code{MULTILIB_DIRNAMES} is\n-@samp{m68000 m68020 msoft-float}.  You may specify a different value if\n-you desire a different set of directory names.\n-\n-@findex MULTILIB_MATCHES\n-@item MULTILIB_MATCHES\n-Sometimes the same option may be written in two different ways.  If an\n-option is listed in @code{MULTILIB_OPTIONS}, GCC needs to know about\n-any synonyms.  In that case, set @code{MULTILIB_MATCHES} to a list of\n-items of the form @samp{option=option} to describe all relevant\n-synonyms.  For example, @samp{m68000=mc68000 m68020=mc68020}.\n-\n-@findex MULTILIB_EXCEPTIONS\n-@item MULTILIB_EXCEPTIONS\n-Sometimes when there are multiple sets of @code{MULTILIB_OPTIONS} being\n-specified, there are combinations that should not be built.  In that\n-case, set @code{MULTILIB_EXCEPTIONS} to be all of the switch exceptions\n-in shell case syntax that should not be built.\n-\n-For example, in the PowerPC embedded ABI support, it is not desirable\n-to build libraries compiled with the @option{-mcall-aix} option\n-and either of the @option{-fleading-underscore} or @option{-mlittle} options\n-at the same time.  Therefore @code{MULTILIB_EXCEPTIONS} is set to\n-@smallexample\n-*mcall-aix/*fleading-underscore* *mlittle/*mcall-aix*\n-@end smallexample\n-\n-@findex MULTILIB_EXTRA_OPTS\n-@item MULTILIB_EXTRA_OPTS\n-Sometimes it is desirable that when building multiple versions of\n-@file{libgcc.a} certain options should always be passed on to the\n-compiler.  In that case, set @code{MULTILIB_EXTRA_OPTS} to be the list\n-of options to be used for all builds.\n-@end table\n-\n-@node Host Fragment\n-@section The Host Makefile Fragment\n-@cindex host makefile fragment\n-@cindex @file{x-@var{host}}\n-\n-The host makefile fragment, @file{x-@var{host}}, defines special host\n-dependent variables and targets used in the @file{Makefile}:\n-\n-@table @code\n-@findex CC\n-@item CC\n-The compiler to use when building the first stage.\n-\n-@findex INSTALL\n-@item INSTALL\n-The install program to use.\n-@end table\n+@include hostconfig.texi\n+@include fragments.texi\n @end ifset\n \n @include funding.texi\n \n-@node GNU/Linux\n-@unnumbered Linux and the GNU Project\n-\n-Many computer users run a modified version of the GNU system every\n-day, without realizing it.  Through a peculiar turn of events, the\n-version of GNU which is widely used today is more often known as\n-``Linux'', and many users are not aware of the extent of its\n-connection with the GNU Project.\n-\n-There really is a Linux; it is a kernel, and these people are using\n-it.  But you can't use a kernel by itself; a kernel is useful only as\n-part of a whole system.  The system in which Linux is typically used\n-is a modified variant of the GNU system---in other words, a Linux-based\n-GNU system.\n-\n-Many users are not fully aware of the distinction between the kernel,\n-which is Linux, and the whole system, which they also call ``Linux''.\n-The ambiguous use of the name doesn't promote understanding.\n-\n-Programmers generally know that Linux is a kernel.  But since they\n-have generally heard the whole system called ``Linux'' as well, they\n-often envisage a history which fits that name.  For example, many\n-believe that once Linus Torvalds finished writing the kernel, his\n-friends looked around for other free software, and for no particular\n-reason most everything necessary to make a Unix-like system was\n-already available.\n-\n-What they found was no accident---it was the GNU system.  The available\n-free software added up to a complete system because the GNU Project\n-had been working since 1984 to make one.  The GNU Manifesto\n-had set forth the goal of developing a free Unix-like system, called\n-GNU@.  By the time Linux was written, the system was almost finished.\n-\n-Most free software projects have the goal of developing a particular\n-program for a particular job.  For example, Linus Torvalds set out to\n-write a Unix-like kernel (Linux); Donald Knuth set out to write a text\n-formatter (TeX); Bob Scheifler set out to develop a window system (X\n-Windows).  It's natural to measure the contribution of this kind of\n-project by specific programs that came from the project.\n-\n-If we tried to measure the GNU Project's contribution in this way,\n-what would we conclude?  One CD-ROM vendor found that in their ``Linux\n-distribution'', GNU software was the largest single contingent, around\n-28% of the total source code, and this included some of the essential\n-major components without which there could be no system.  Linux itself\n-was about 3%.  So if you were going to pick a name for the system\n-based on who wrote the programs in the system, the most appropriate\n-single choice would be ``GNU''@.\n-\n-But we don't think that is the right way to consider the question.\n-The GNU Project was not, is not, a project to develop specific\n-software packages.  It was not a project to develop a C compiler,\n-although we did.  It was not a project to develop a text editor,\n-although we developed one.  The GNU Project's aim was to develop\n-@emph{a complete free Unix-like system}.\n-\n-Many people have made major contributions to the free software in the\n-system, and they all deserve credit.  But the reason it is @emph{a\n-system}---and not just a collection of useful programs---is because the\n-GNU Project set out to make it one.  We wrote the programs that were\n-needed to make a @emph{complete} free system.  We wrote essential but\n-unexciting major components, such as the assembler and linker, because\n-you can't have a system without them.  A complete system needs more\n-than just programming tools, so we wrote other components as well,\n-such as the Bourne Again SHell, the PostScript interpreter\n-Ghostscript, and the GNU C library.\n-\n-By the early 90s we had put together the whole system aside from the\n-kernel (and we were also working on a kernel, the GNU Hurd, which runs\n-on top of Mach).  Developing this kernel has been a lot harder than we\n-expected, and we are still working on finishing it.\n-\n-Fortunately, you don't have to wait for it, because Linux is working\n-now.  When Linus Torvalds wrote Linux, he filled the last major gap.\n-People could then put Linux together with the GNU system to make a\n-complete free system: a Linux-based GNU system (or GNU/Linux system,\n-for short).\n-\n-Putting them together sounds simple, but it was not a trivial job.\n-The GNU C library (called glibc for short) needed substantial changes.\n-Integrating a complete system as a distribution that would work ``out\n-of the box'' was a big job, too.  It required addressing the issue of\n-how to install and boot the system---a problem we had not tackled,\n-because we hadn't yet reached that point.  The people who developed\n-the various system distributions made a substantial contribution.\n-\n-The GNU Project supports GNU/Linux systems as well as @emph{the}\n-GNU system---even with funds.  We funded the rewriting of the\n-Linux-related extensions to the GNU C library, so that now they are\n-well integrated, and the newest GNU/Linux systems use the current\n-library release with no changes.  We also funded an early stage of the\n-development of Debian GNU/Linux.\n-\n-We use Linux-based GNU systems today for most of our work, and we hope\n-you use them too.  But please don't confuse the public by using the\n-name ``Linux'' ambiguously.  Linux is the kernel, one of the essential\n-major components of the system.  The system as a whole is more or less\n-the GNU system.\n+@include linux-and-gnu.texi\n \n @include gpl.texi\n \n@@ -1773,9 +332,6 @@ the GNU system.\n \n @include fdl.texi\n \n-@node Contributors\n-@unnumbered Contributors to GCC\n-@cindex contributors\n @include contrib.texi\n \n @c ---------------------------------------------------------------------"}, {"sha": "f7a1c423e8fa3c86fb7302e2a05d58b2c67d4587", "filename": "gcc/doc/hostconfig.texi", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fhostconfig.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fhostconfig.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fhostconfig.texi?ref=73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "patch": "@@ -0,0 +1,240 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Config\n+@chapter The Configuration File\n+@cindex configuration file\n+@cindex @file{xm-@var{machine}.h}\n+\n+The configuration file @file{xm-@var{machine}.h} contains macro\n+definitions that describe the machine and system on which the compiler\n+is running, unlike the definitions in @file{@var{machine}.h}, which\n+describe the machine for which the compiler is producing output.  Most\n+of the values in @file{xm-@var{machine}.h} are actually the same on all\n+machines that GCC runs on, so large parts of all configuration files\n+are identical.  But there are some macros that vary:\n+\n+@table @code\n+@findex USG\n+@item USG\n+Define this macro if the host system is System V@.\n+\n+@findex VMS\n+@item VMS\n+Define this macro if the host system is VMS@.\n+\n+@findex FATAL_EXIT_CODE\n+@item FATAL_EXIT_CODE\n+A C expression for the status code to be returned when the compiler\n+exits after serious errors.  The default is the system-provided macro\n+@samp{EXIT_FAILURE}, or @samp{1} if the system doesn't define that\n+macro.  Define this macro only if these defaults are incorrect.\n+\n+@findex SUCCESS_EXIT_CODE\n+@item SUCCESS_EXIT_CODE\n+A C expression for the status code to be returned when the compiler\n+exits without serious errors.  (Warnings are not serious errors.)  The\n+default is the system-provided macro @samp{EXIT_SUCCESS}, or @samp{0} if\n+the system doesn't define that macro.  Define this macro only if these\n+defaults are incorrect.\n+\n+@findex HOST_WORDS_BIG_ENDIAN\n+@item HOST_WORDS_BIG_ENDIAN\n+Defined if the host machine stores words of multi-word values in\n+big-endian order.  (GCC does not depend on the host byte ordering\n+within a word.)\n+\n+@findex HOST_FLOAT_WORDS_BIG_ENDIAN\n+@item HOST_FLOAT_WORDS_BIG_ENDIAN\n+Define this macro to be 1 if the host machine stores @code{DFmode},\n+@code{XFmode} or @code{TFmode} floating point numbers in memory with the\n+word containing the sign bit at the lowest address; otherwise, define it\n+to be zero.\n+\n+This macro need not be defined if the ordering is the same as for\n+multi-word integers.\n+\n+@findex HOST_FLOAT_FORMAT\n+@item HOST_FLOAT_FORMAT\n+A numeric code distinguishing the floating point format for the host\n+machine.  See @code{TARGET_FLOAT_FORMAT} in @ref{Storage Layout} for the\n+alternatives and default.\n+\n+@findex HOST_BITS_PER_CHAR\n+@item HOST_BITS_PER_CHAR\n+A C expression for the number of bits in @code{char} on the host\n+machine.\n+\n+@findex HOST_BITS_PER_SHORT\n+@item HOST_BITS_PER_SHORT\n+A C expression for the number of bits in @code{short} on the host\n+machine.\n+\n+@findex HOST_BITS_PER_INT\n+@item HOST_BITS_PER_INT\n+A C expression for the number of bits in @code{int} on the host\n+machine.\n+\n+@findex HOST_BITS_PER_LONG\n+@item HOST_BITS_PER_LONG\n+A C expression for the number of bits in @code{long} on the host\n+machine.\n+\n+@findex HOST_BITS_PER_LONGLONG\n+@item HOST_BITS_PER_LONGLONG\n+A C expression for the number of bits in @code{long long} on the host\n+machine.\n+\n+@findex ONLY_INT_FIELDS\n+@item ONLY_INT_FIELDS\n+Define this macro to indicate that the host compiler only supports\n+@code{int} bit-fields, rather than other integral types, including\n+@code{enum}, as do most C compilers.\n+\n+@findex OBSTACK_CHUNK_SIZE\n+@item OBSTACK_CHUNK_SIZE\n+A C expression for the size of ordinary obstack chunks.\n+If you don't define this, a usually-reasonable default is used.\n+\n+@findex OBSTACK_CHUNK_ALLOC\n+@item OBSTACK_CHUNK_ALLOC\n+The function used to allocate obstack chunks.\n+If you don't define this, @code{xmalloc} is used.\n+\n+@findex OBSTACK_CHUNK_FREE\n+@item OBSTACK_CHUNK_FREE\n+The function used to free obstack chunks.\n+If you don't define this, @code{free} is used.\n+\n+@findex USE_C_ALLOCA\n+@item USE_C_ALLOCA\n+Define this macro to indicate that the compiler is running with the\n+@code{alloca} implemented in C@.  This version of @code{alloca} can be\n+found in the file @file{alloca.c}; to use it, you must also alter the\n+@file{Makefile} variable @code{ALLOCA}.  (This is done automatically\n+for the systems on which we know it is needed.)\n+\n+If you do define this macro, you should probably do it as follows:\n+\n+@example\n+#ifndef __GNUC__\n+#define USE_C_ALLOCA\n+#else\n+#define alloca __builtin_alloca\n+#endif\n+@end example\n+\n+@noindent\n+so that when the compiler is compiled with GCC it uses the more\n+efficient built-in @code{alloca} function.\n+\n+@item FUNCTION_CONVERSION_BUG\n+@findex FUNCTION_CONVERSION_BUG\n+Define this macro to indicate that the host compiler does not properly\n+handle converting a function value to a pointer-to-function when it is\n+used in an expression.\n+\n+@findex MULTIBYTE_CHARS\n+@item MULTIBYTE_CHARS\n+Define this macro to enable support for multibyte characters in the\n+input to GCC@.  This requires that the host system support the ISO C\n+library functions for converting multibyte characters to wide\n+characters.\n+\n+@findex POSIX\n+@item POSIX\n+Define this if your system is POSIX.1 compliant.\n+\n+@findex PATH_SEPARATOR\n+@item PATH_SEPARATOR\n+Define this macro to be a C character constant representing the\n+character used to separate components in paths.  The default value is\n+the colon character\n+\n+@findex DIR_SEPARATOR\n+@item DIR_SEPARATOR\n+If your system uses some character other than slash to separate\n+directory names within a file specification, define this macro to be a C\n+character constant specifying that character.  When GCC displays file\n+names, the character you specify will be used.  GCC will test for\n+both slash and the character you specify when parsing filenames.\n+\n+@findex DIR_SEPARATOR_2\n+@item DIR_SEPARATOR_2\n+If your system uses an alternative character other than\n+@samp{DIR_SEPARATOR} to separate directory names within a file\n+specification, define this macro to be a C character constant specifying\n+that character.  If you define this macro, GCC will test for slash,\n+@samp{DIR_SEPARATOR}, and @samp{DIR_SEPARATOR_2} when parsing filenames.\n+\n+@findex TARGET_OBJECT_SUFFIX\n+@item TARGET_OBJECT_SUFFIX\n+Define this macro to be a C string representing the suffix for object\n+files on your target machine.  If you do not define this macro, GCC will\n+use @samp{.o} as the suffix for object files.\n+\n+@findex TARGET_EXECUTABLE_SUFFIX\n+@item TARGET_EXECUTABLE_SUFFIX\n+Define this macro to be a C string representing the suffix to be\n+automatically added to executable files on your target machine.  If you\n+do not define this macro, GCC will use the null string as the suffix for\n+executable files.\n+\n+@findex HOST_OBJECT_SUFFIX\n+@item HOST_OBJECT_SUFFIX\n+Define this macro to be a C string representing the suffix for object\n+files on your host machine (@samp{xm-*.h}).  If you do not define this\n+macro, GCC will use @samp{.o} as the suffix for object files.\n+\n+@findex HOST_EXECUTABLE_SUFFIX\n+@item HOST_EXECUTABLE_SUFFIX\n+Define this macro to be a C string representing the suffix for\n+executable files on your host machine (@samp{xm-*.h}).  If you do not\n+define this macro, GCC will use the null string as the suffix for\n+executable files.\n+\n+@findex HOST_BIT_BUCKET\n+@item HOST_BIT_BUCKET\n+The name of a file or file-like object on the host system which acts as\n+a ``bit bucket''.  If you do not define this macro, GCC will use\n+@samp{/dev/null} as the bit bucket.  If the target does not support a\n+bit bucket, this should be defined to the null string, or some other\n+invalid filename.  If the bit bucket is not writable, GCC will use a\n+temporary file instead.\n+\n+@findex COLLECT_EXPORT_LIST\n+@item COLLECT_EXPORT_LIST\n+If defined, @code{collect2} will scan the individual object files\n+specified on its command line and create an export list for the linker.\n+Define this macro for systems like AIX, where the linker discards\n+object files that are not referenced from @code{main} and uses export\n+lists.\n+\n+@findex COLLECT2_HOST_INITIALIZATION\n+@item COLLECT2_HOST_INITIALIZATION\n+If defined, a C statement (sans semicolon) that performs host-dependent\n+initialization when @code{collect2} is being initialized.\n+\n+@findex GCC_DRIVER_HOST_INITIALIZATION\n+@item GCC_DRIVER_HOST_INITIALIZATION\n+If defined, a C statement (sans semicolon) that performs host-dependent\n+initialization when a compilation driver is being initialized.\n+\n+@findex UPDATE_PATH_HOST_CANONICALIZE\n+@item UPDATE_PATH_HOST_CANONICALIZE (@var{path})\n+If defined, a C statement (sans semicolon) that performs host-dependent\n+canonicalization when a path used in a compilation driver or\n+preprocessor is canonicalized.  @var{path} is a malloc-ed path to be\n+canonicalized.  If the C statement does canonicalize @var{path} into a\n+different buffer, the old path should be freed and the new buffer should\n+have been allocated with malloc.\n+@end table\n+\n+@findex bzero\n+@findex bcmp\n+In addition, configuration files for system V define @code{bcopy},\n+@code{bzero} and @code{bcmp} as aliases.  Some files define @code{alloca}\n+as a macro when compiled with GCC, in order to take advantage of the\n+benefit of GCC's built-in @code{alloca}."}, {"sha": "cd82d1dda17726131746d17a096121dcfcb9a1ea", "filename": "gcc/doc/include/linux-and-gnu.texi", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Finclude%2Flinux-and-gnu.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Finclude%2Flinux-and-gnu.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finclude%2Flinux-and-gnu.texi?ref=73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "patch": "@@ -0,0 +1,102 @@\n+@c Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node GNU/Linux\n+@unnumbered Linux and the GNU Project\n+\n+Many computer users run a modified version of the GNU system every\n+day, without realizing it.  Through a peculiar turn of events, the\n+version of GNU which is widely used today is more often known as\n+``Linux'', and many users are not aware of the extent of its\n+connection with the GNU Project.\n+\n+There really is a Linux; it is a kernel, and these people are using\n+it.  But you can't use a kernel by itself; a kernel is useful only as\n+part of a whole system.  The system in which Linux is typically used\n+is a modified variant of the GNU system---in other words, a Linux-based\n+GNU system.\n+\n+Many users are not fully aware of the distinction between the kernel,\n+which is Linux, and the whole system, which they also call ``Linux''.\n+The ambiguous use of the name doesn't promote understanding.\n+\n+Programmers generally know that Linux is a kernel.  But since they\n+have generally heard the whole system called ``Linux'' as well, they\n+often envisage a history which fits that name.  For example, many\n+believe that once Linus Torvalds finished writing the kernel, his\n+friends looked around for other free software, and for no particular\n+reason most everything necessary to make a Unix-like system was\n+already available.\n+\n+What they found was no accident---it was the GNU system.  The available\n+free software added up to a complete system because the GNU Project\n+had been working since 1984 to make one.  The GNU Manifesto\n+had set forth the goal of developing a free Unix-like system, called\n+GNU@.  By the time Linux was written, the system was almost finished.\n+\n+Most free software projects have the goal of developing a particular\n+program for a particular job.  For example, Linus Torvalds set out to\n+write a Unix-like kernel (Linux); Donald Knuth set out to write a text\n+formatter (TeX); Bob Scheifler set out to develop a window system (X\n+Windows).  It's natural to measure the contribution of this kind of\n+project by specific programs that came from the project.\n+\n+If we tried to measure the GNU Project's contribution in this way,\n+what would we conclude?  One CD-ROM vendor found that in their ``Linux\n+distribution'', GNU software was the largest single contingent, around\n+28% of the total source code, and this included some of the essential\n+major components without which there could be no system.  Linux itself\n+was about 3%.  So if you were going to pick a name for the system\n+based on who wrote the programs in the system, the most appropriate\n+single choice would be ``GNU''@.\n+\n+But we don't think that is the right way to consider the question.\n+The GNU Project was not, is not, a project to develop specific\n+software packages.  It was not a project to develop a C compiler,\n+although we did.  It was not a project to develop a text editor,\n+although we developed one.  The GNU Project's aim was to develop\n+@emph{a complete free Unix-like system}.\n+\n+Many people have made major contributions to the free software in the\n+system, and they all deserve credit.  But the reason it is @emph{a\n+system}---and not just a collection of useful programs---is because the\n+GNU Project set out to make it one.  We wrote the programs that were\n+needed to make a @emph{complete} free system.  We wrote essential but\n+unexciting major components, such as the assembler and linker, because\n+you can't have a system without them.  A complete system needs more\n+than just programming tools, so we wrote other components as well,\n+such as the Bourne Again SHell, the PostScript interpreter\n+Ghostscript, and the GNU C library.\n+\n+By the early 90s we had put together the whole system aside from the\n+kernel (and we were also working on a kernel, the GNU Hurd, which runs\n+on top of Mach).  Developing this kernel has been a lot harder than we\n+expected, and we are still working on finishing it.\n+\n+Fortunately, you don't have to wait for it, because Linux is working\n+now.  When Linus Torvalds wrote Linux, he filled the last major gap.\n+People could then put Linux together with the GNU system to make a\n+complete free system: a Linux-based GNU system (or GNU/Linux system,\n+for short).\n+\n+Putting them together sounds simple, but it was not a trivial job.\n+The GNU C library (called glibc for short) needed substantial changes.\n+Integrating a complete system as a distribution that would work ``out\n+of the box'' was a big job, too.  It required addressing the issue of\n+how to install and boot the system---a problem we had not tackled,\n+because we hadn't yet reached that point.  The people who developed\n+the various system distributions made a substantial contribution.\n+\n+The GNU Project supports GNU/Linux systems as well as @emph{the}\n+GNU system---even with funds.  We funded the rewriting of the\n+Linux-related extensions to the GNU C library, so that now they are\n+well integrated, and the newest GNU/Linux systems use the current\n+library release with no changes.  We also funded an early stage of the\n+development of Debian GNU/Linux.\n+\n+We use Linux-based GNU systems today for most of our work, and we hope\n+you use them too.  But please don't confuse the public by using the\n+name ``Linux'' ambiguously.  Linux is the kernel, one of the essential\n+major components of the system.  The system as a whole is more or less\n+the GNU system."}, {"sha": "846de56bd62c6429ccfd9e381d630fbd659b6944", "filename": "gcc/doc/interface.texi", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Finterface.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Finterface.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finterface.texi?ref=73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "patch": "@@ -0,0 +1,102 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Interface\n+@chapter Interfacing to GCC Output\n+@cindex interfacing to GCC output\n+@cindex run-time conventions\n+@cindex function call conventions\n+@cindex conventions, run-time\n+\n+GCC is normally configured to use the same function calling convention\n+normally in use on the target system.  This is done with the\n+machine-description macros described (@pxref{Target Macros}).\n+\n+@cindex unions, returning\n+@cindex structures, returning\n+@cindex returning structures and unions\n+However, returning of structure and union values is done differently on\n+some target machines.  As a result, functions compiled with PCC\n+returning such types cannot be called from code compiled with GCC,\n+and vice versa.  This does not cause trouble often because few Unix\n+library routines return structures or unions.\n+\n+GCC code returns structures and unions that are 1, 2, 4 or 8 bytes\n+long in the same registers used for @code{int} or @code{double} return\n+values.  (GCC typically allocates variables of such types in\n+registers also.)  Structures and unions of other sizes are returned by\n+storing them into an address passed by the caller (usually in a\n+register).  The machine-description macros @code{STRUCT_VALUE} and\n+@code{STRUCT_INCOMING_VALUE} tell GCC where to pass this address.\n+\n+By contrast, PCC on most target machines returns structures and unions\n+of any size by copying the data into an area of static storage, and then\n+returning the address of that storage as if it were a pointer value.\n+The caller must copy the data from that memory area to the place where\n+the value is wanted.  This is slower than the method used by GCC, and\n+fails to be reentrant.\n+\n+On some target machines, such as RISC machines and the 80386, the\n+standard system convention is to pass to the subroutine the address of\n+where to return the value.  On these machines, GCC has been\n+configured to be compatible with the standard compiler, when this method\n+is used.  It may not be compatible for structures of 1, 2, 4 or 8 bytes.\n+\n+@cindex argument passing\n+@cindex passing arguments\n+GCC uses the system's standard convention for passing arguments.  On\n+some machines, the first few arguments are passed in registers; in\n+others, all are passed on the stack.  It would be possible to use\n+registers for argument passing on any machine, and this would probably\n+result in a significant speedup.  But the result would be complete\n+incompatibility with code that follows the standard convention.  So this\n+change is practical only if you are switching to GCC as the sole C\n+compiler for the system.  We may implement register argument passing on\n+certain machines once we have a complete GNU system so that we can\n+compile the libraries with GCC@.\n+\n+On some machines (particularly the Sparc), certain types of arguments\n+are passed ``by invisible reference''.  This means that the value is\n+stored in memory, and the address of the memory location is passed to\n+the subroutine.\n+\n+@cindex @code{longjmp} and automatic variables\n+If you use @code{longjmp}, beware of automatic variables.  ISO C says that\n+automatic variables that are not declared @code{volatile} have undefined\n+values after a @code{longjmp}.  And this is all GCC promises to do,\n+because it is very difficult to restore register variables correctly, and\n+one of GCC's features is that it can put variables in registers without\n+your asking it to.\n+\n+If you want a variable to be unaltered by @code{longjmp}, and you don't\n+want to write @code{volatile} because old C compilers don't accept it,\n+just take the address of the variable.  If a variable's address is ever\n+taken, even if just to compute it and ignore it, then the variable cannot\n+go in a register:\n+\n+@example\n+@{\n+  int careful;\n+  &careful;\n+  @dots{}\n+@}\n+@end example\n+\n+@cindex arithmetic libraries\n+@cindex math libraries\n+@opindex msoft-float\n+Code compiled with GCC may call certain library routines.  Most of\n+them handle arithmetic for which there are no instructions.  This\n+includes multiply and divide on some machines, and floating point\n+operations on any machine for which floating point support is disabled\n+with @option{-msoft-float}.  Some standard parts of the C library, such as\n+@code{bcopy} or @code{memcpy}, are also called automatically.  The usual\n+function call interface is used for calling the library routines.\n+\n+Some of these routines can be defined in mostly machine-independent C;\n+they appear in @file{libgcc2.c}.  Others must be hand-written in\n+assembly language for each processor.  Wherever they are defined, they\n+are compiled into the support library, @file{libgcc.a}, which is\n+automatically searched when you link programs with GCC@."}, {"sha": "d4eb9f35dd2145fc2935bfb7657c3b5de9389557", "filename": "gcc/doc/makefile.texi", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fmakefile.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fmakefile.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmakefile.texi?ref=73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "patch": "@@ -0,0 +1,104 @@\n+@c Copyright (C) 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Makefile\n+@chapter Additional Makefile and configure information.\n+\n+@section Makefile Targets\n+@cindex makefile targets\n+@cindex targets, makefile\n+\n+@table @code\n+@item all\n+This is the default target.  Depending on what your build/host/target\n+configuration is, it coordinates all the things that need to be built.\n+\n+@item doc\n+Produce info-formatted documentation.  Also, @code{make dvi} is\n+available for DVI-formatted documentation, and @code{make\n+generated-manpages} to generate man pages.\n+\n+@item mostlyclean\n+Delete the files made while building the compiler.\n+\n+@item clean\n+That, and all the other files built by @code{make all}.\n+\n+@item distclean\n+That, and all the files created by @code{configure}.\n+\n+@item extraclean\n+That, and any temporary or intermediate files, like emacs backup files.\n+\n+@item maintainer-clean\n+Distclean plus any file that can be generated from other files.  Note\n+that additional tools may be required beyond what is normally needed to\n+build gcc.\n+\n+@item install\n+Installs gcc.\n+\n+@item uninstall\n+Deletes installed files.\n+\n+@item check\n+Run the testsuite.  This creates a @file{testsuite} subdirectory that\n+has various @file{.sum} and @file{.log} files containing the results of\n+the testing.  You can run subsets with, for example, @code{make check-gcc}.\n+You can specify specific tests by setting RUNTESTFLAGS to be the name\n+of the @file{.exp} file, optionally followed by (for some tests) an equals\n+and a file wildcard, like:\n+\n+@example\n+make check-gcc RUNTESTFLAGS=\"execute.exp=19980413-*\"\n+@end example\n+\n+Note that running the testsuite may require additional tools be\n+installed, such as TCL or dejagnu.\n+\n+@item bootstrap\n+Builds gcc three times---once with the native compiler, once with the\n+native-built compiler it just built, and once with the compiler it built\n+the second time.  In theory, the last two should produce the same\n+results, which @code{make compare} can check.  Each step of this process\n+is called a ``stage'', and the results of each stage @var{N}\n+(@var{N} = 1@dots{}3) are copied to a subdirectory @file{stage@var{N}/}.\n+\n+@item bootstrap-lean\n+Like @code{bootstrap}, except that the various stages are removed once\n+they're no longer needed.  This saves disk space.\n+\n+@item bubblestrap\n+Once bootstrapped, this incrementally rebuilds each of the three stages,\n+one at a time.  It does this by ``bubbling'' the stages up from their\n+subdirectories, rebuilding them, and copying them back to their\n+subdirectories.  This will allow you to, for example, quickly rebuild a\n+bootstrapped compiler after changing the sources, without having to do a\n+full bootstrap.\n+\n+@item quickstrap\n+Rebuilds the most recently built stage.  Since each stage requires\n+special invocation, using this target means you don't have to keep track\n+of which stage you're on or what invocation that stage needs.\n+\n+@item cleanstrap\n+Removed everything (@code{make clean}) and rebuilds (@code{make bootstrap}).\n+\n+@item stage@var{N} (@var{N} = 1@dots{}4)\n+For each stage, moves the appropriate files to the @file{stage@var{N}}\n+subdirectory.\n+\n+@item unstage@var{N} (@var{N} = 1@dots{}4)\n+Undoes the corresponding @code{stage@var{N}}.\n+\n+@item restage@var{N} (@var{N} = 1@dots{}4)\n+Undoes the corresponding @code{stage@var{N}} and rebuilds it with the\n+appropriate flags.\n+\n+@item compare\n+Compares the results of stages 2 and 3.  This ensures that the compiler\n+is running properly, since it should produce the same object files\n+regardless of how it itself was compiled.\n+\n+@end table"}, {"sha": "731a1d0174e9e5ee8ef33aec4f6f6e6482b3a704", "filename": "gcc/doc/passes.texi", "status": "added", "additions": 663, "deletions": 0, "changes": 663, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "patch": "@@ -0,0 +1,663 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Passes\n+@chapter Passes and Files of the Compiler\n+@cindex passes and files of the compiler\n+@cindex files and passes of the compiler\n+@cindex compiler passes and files\n+\n+@cindex top level of compiler\n+The overall control structure of the compiler is in @file{toplev.c}.  This\n+file is responsible for initialization, decoding arguments, opening and\n+closing files, and sequencing the passes.\n+\n+@cindex parsing pass\n+The parsing pass is invoked only once, to parse the entire input.  A\n+high level tree representation is then generated from the input,\n+one function at a time.  This tree code is then transformed into RTL\n+intermediate code, and processed.  The files involved in transforming\n+the trees into RTL are @file{expr.c}, @file{expmed.c}, and\n+@file{stmt.c}.\n+@c Note, the above files aren't strictly the only files involved. It's\n+@c all over the place (function.c, final.c,etc).  However, those are\n+@c the files that are supposed to be directly involved, and have\n+@c their purpose listed as such, so i've only listed them.\n+The order of trees that are processed, is not\n+necessarily the same order they are generated from\n+the input, due to deferred inlining, and other considerations.\n+\n+@findex rest_of_compilation\n+@findex rest_of_decl_compilation\n+Each time the parsing pass reads a complete function definition or\n+top-level declaration, it calls either the function\n+@code{rest_of_compilation}, or the function\n+@code{rest_of_decl_compilation} in @file{toplev.c}, which are\n+responsible for all further processing necessary, ending with output of\n+the assembler language.  All other compiler passes run, in sequence,\n+within @code{rest_of_compilation}.  When that function returns from\n+compiling a function definition, the storage used for that function\n+definition's compilation is entirely freed, unless it is an inline\n+function, or was deferred for some reason (this can occur in\n+templates, for example).\n+@ifset USING\n+(@pxref{Inline,,An Inline Function is As Fast As a Macro}).\n+@end ifset\n+@ifclear USING\n+(@pxref{Inline,,An Inline Function is As Fast As a Macro,gcc.texi,Using GCC}).\n+@end ifclear\n+\n+Here is a list of all the passes of the compiler and their source files.\n+Also included is a description of where debugging dumps can be requested\n+with @option{-d} options.\n+\n+@itemize @bullet\n+@item\n+Parsing.  This pass reads the entire text of a function definition,\n+constructing a high level tree representation.  (Because of the semantic\n+analysis that takes place during this pass, it does more than is\n+formally considered to be parsing.)\n+\n+The tree representation does not entirely follow C syntax, because it is\n+intended to support other languages as well.\n+\n+Language-specific data type analysis is also done in this pass, and every\n+tree node that represents an expression has a data type attached.\n+Variables are represented as declaration nodes.\n+\n+The language-independent source files for parsing are\n+@file{tree.c}, @file{fold-const.c}, and @file{stor-layout.c}.\n+There are also header files @file{tree.h} and @file{tree.def}\n+which define the format of the tree representation.\n+\n+C preprocessing, for language front ends, that want or require it, is\n+performed by cpplib, which is covered in separate documentation.  In\n+particular, the internals are covered in @xref{Top, ,Cpplib internals,\n+cppinternals, Cpplib Internals}.\n+\n+@c Avoiding overfull is tricky here.\n+The source files to parse C are\n+@file{c-convert.c},\n+@file{c-decl.c},\n+@file{c-errors.c},\n+@file{c-lang.c},\n+@file{c-parse.in},\n+@file{c-aux-info.c},\n+and\n+@file{c-typeck.c},\n+along with a header file\n+@file{c-tree.h}\n+and some files shared with Objective-C and C++.\n+\n+The source files for parsing C++ are in @file{cp/}.\n+They are @file{parse.y},\n+@file{class.c},\n+@file{cvt.c}, @file{decl.c}, @file{decl2.c},\n+@file{except.c},\n+@file{expr.c}, @file{init.c}, @file{lex.c},\n+@file{method.c}, @file{ptree.c},\n+@file{search.c}, @file{spew.c},\n+@file{semantics.c}, @file{tree.c},\n+@file{typeck2.c}, and\n+@file{typeck.c}, along with header files @file{cp-tree.def},\n+@file{cp-tree.h}, and @file{decl.h}.\n+\n+The special source files for parsing Objective-C are in @file{objc/}.\n+They are @file{objc-act.c}, @file{objc-tree.def}, and @file{objc-act.h}.\n+Certain C-specific files are used for this as well.\n+\n+The files\n+@file{c-common.c},\n+@file{c-common.def},\n+@file{c-dump.c},\n+@file{c-format.c},\n+@file{c-pragma.c},\n+@file{c-semantics.c},\n+and\n+@file{c-lex.c},\n+along with header files\n+@file{c-common.h},\n+@file{c-dump.h},\n+@file{c-lex.h},\n+and\n+@file{c-pragma.h},\n+are also used for all of the above languages.\n+\n+\n+@cindex Tree optimization\n+@item\n+Tree optimization.   This is the optimization of the tree\n+representation, before converting into RTL code.\n+\n+@cindex inline on trees, automatic\n+Currently, the main optimization performed here is tree-based\n+inlining.\n+This is implemented for C++ in @file{cp/optimize.c}.  Note that\n+tree based inlining turns off rtx based inlining (since it's more\n+powerful, it would be a waste of time to do rtx based inlining in\n+addition).\n+The C front end currently does not perform tree based inlining.\n+\n+@cindex constant folding\n+@cindex arithmetic simplifications\n+@cindex simplifications, arithmetic\n+Constant folding and some arithmetic simplifications are also done\n+during this pass, on the tree representation.\n+The routines that perform these tasks are located in @file{fold-const.c}.\n+\n+@cindex RTL generation\n+@item\n+RTL generation.  This is the conversion of syntax tree into RTL code.\n+\n+@cindex target-parameter-dependent code\n+This is where the bulk of target-parameter-dependent code is found,\n+since often it is necessary for strategies to apply only when certain\n+standard kinds of instructions are available.  The purpose of named\n+instruction patterns is to provide this information to the RTL\n+generation pass.\n+\n+@cindex tail recursion optimization\n+Optimization is done in this pass for @code{if}-conditions that are\n+comparisons, boolean operations or conditional expressions.  Tail\n+recursion is detected at this time also.  Decisions are made about how\n+best to arrange loops and how to output @code{switch} statements.\n+\n+@c Avoiding overfull is tricky here.\n+The source files for RTL generation include\n+@file{stmt.c},\n+@file{calls.c},\n+@file{expr.c},\n+@file{explow.c},\n+@file{expmed.c},\n+@file{function.c},\n+@file{optabs.c}\n+and @file{emit-rtl.c}.\n+Also, the file\n+@file{insn-emit.c}, generated from the machine description by the\n+program @code{genemit}, is used in this pass.  The header file\n+@file{expr.h} is used for communication within this pass.\n+\n+@findex genflags\n+@findex gencodes\n+The header files @file{insn-flags.h} and @file{insn-codes.h},\n+generated from the machine description by the programs @code{genflags}\n+and @code{gencodes}, tell this pass which standard names are available\n+for use and which patterns correspond to them.\n+\n+Aside from debugging information output, none of the following passes\n+refers to the tree structure representation of the function (only\n+part of which is saved).\n+\n+@cindex inline on rtx, automatic\n+The decision of whether the function can and should be expanded inline\n+in its subsequent callers is made at the end of rtl generation.  The\n+function must meet certain criteria, currently related to the size of\n+the function and the types and number of parameters it has.  Note that\n+this function may contain loops, recursive calls to itself\n+(tail-recursive functions can be inlined!), gotos, in short, all\n+constructs supported by GCC@.  The file @file{integrate.c} contains\n+the code to save a function's rtl for later inlining and to inline that\n+rtl when the function is called.  The header file @file{integrate.h}\n+is also used for this purpose.\n+\n+@opindex dr\n+The option @option{-dr} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.rtl} to\n+the input file name.\n+\n+@c Should the exception handling pass be talked about here?\n+\n+@cindex sibling call optimization\n+@item\n+Sibiling call optimization.   This pass performs tail recursion\n+elimination, and tail and sibling call optimizations.  The purpose of\n+these optimizations is to reduce the overhead of function calls,\n+whenever possible.\n+\n+The source file of this pass is @file{sibcall.c}\n+\n+@opindex di\n+The option @option{-di} causes a debugging dump of the RTL code after\n+this pass is run.  This dump file's name is made by appending\n+@samp{.sibling} to the input file name.\n+\n+@cindex jump optimization\n+@cindex unreachable code\n+@cindex dead code\n+@item\n+Jump optimization.  This pass simplifies jumps to the following\n+instruction, jumps across jumps, and jumps to jumps.  It deletes\n+unreferenced labels and unreachable code, except that unreachable code\n+that contains a loop is not recognized as unreachable in this pass.\n+(Such loops are deleted later in the basic block analysis.)  It also\n+converts some code originally written with jumps into sequences of\n+instructions that directly set values from the results of comparisons,\n+if the machine has such instructions.\n+\n+Jump optimization is performed two or three times.  The first time is\n+immediately following RTL generation.  The second time is after CSE,\n+but only if CSE says repeated jump optimization is needed.  The\n+last time is right before the final pass.  That time, cross-jumping\n+and deletion of no-op move instructions are done together with the\n+optimizations described above.\n+\n+The source file of this pass is @file{jump.c}.\n+\n+@opindex dj\n+The option @option{-dj} causes a debugging dump of the RTL code after\n+this pass is run for the first time.  This dump file's name is made by\n+appending @samp{.jump} to the input file name.\n+\n+\n+@cindex register use analysis\n+@item\n+Register scan.  This pass finds the first and last use of each\n+register, as a guide for common subexpression elimination.  Its source\n+is in @file{regclass.c}.\n+\n+@cindex jump threading\n+@item\n+@opindex fthread-jumps\n+Jump threading.  This pass detects a condition jump that branches to an\n+identical or inverse test.  Such jumps can be @samp{threaded} through\n+the second conditional test.  The source code for this pass is in\n+@file{jump.c}.  This optimization is only performed if\n+@option{-fthread-jumps} is enabled.\n+\n+@cindex SSA optimizations\n+@cindex Single Static Assignment optimizations\n+@opindex fssa\n+@item\n+Static Single Assignment (SSA) based optimization passes.  The\n+SSA conversion passes (to/from) are turned on by the @option{-fssa}\n+option (it is also done automatically if you enable an SSA optimization pass).\n+These passes utilize a form called Static Single Assignment.  In SSA form,\n+each variable (pseudo register) is only set once, giving you def-use\n+and use-def chains for free, and enabling a lot more optimization\n+passes to be run in linear time.\n+Conversion to and from SSA form is handled by functions in\n+@file{ssa.c}.\n+\n+@opindex de\n+The option @option{-de} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.ssa} to\n+the input file name.\n+@itemize @bullet\n+@cindex SSA Conditional Constant Propagation\n+@cindex Conditional Constant Propagation, SSA based\n+@cindex conditional constant propagation\n+@opindex fssa-ccp\n+@item\n+SSA Conditional Constant Propagation.  Turned on by the @option{-fssa-ccp}\n+SSA Aggressive Dead Code Elimination.  Turned on by the @option{-fssa-dce}\n+option.  This pass performs conditional constant propagation to simplify\n+instructions including conditional branches.  This pass is more aggressive\n+than the constant propgation done by the CSE and GCSE pases, but operates\n+in linear time.\n+\n+@opindex dW\n+The option @option{-dW} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.ssaccp} to\n+the input file name.\n+\n+@cindex SSA DCE\n+@cindex DCE, SSA based\n+@cindex dead code elimination\n+@opindex fssa-dce\n+@item\n+SSA Aggressive Dead Code Elimination.  Turned on by the @option{-fssa-dce}\n+option.  This pass performs elimination of code considered unnecessary because\n+it has no externally visible effects on the program.  It operates in\n+linear time.\n+\n+@opindex dX\n+The option @option{-dX} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.ssadce} to\n+the input file name.\n+@end itemize\n+\n+@cindex common subexpression elimination\n+@cindex constant propagation\n+@item\n+Common subexpression elimination.  This pass also does constant\n+propagation.  Its source files are @file{cse.c}, and @file{cselib.c}.\n+If constant  propagation causes conditional jumps to become\n+unconditional or to become no-ops, jump optimization is run again when\n+CSE is finished.\n+\n+@opindex ds\n+The option @option{-ds} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.cse} to\n+the input file name.\n+\n+@cindex global common subexpression elimination\n+@cindex constant propagation\n+@cindex copy propagation\n+@item\n+Global common subexpression elimination.  This pass performs two\n+different types of GCSE  depending on whether you are optimizing for\n+size or not (LCM based GCSE tends to increase code size for a gain in\n+speed, while Morel-Renvoise based GCSE does not).\n+When optimizing for size, GCSE is done using Morel-Renvoise Partial\n+Redundancy Elimination, with the exception that it does not try to move\n+invariants out of loops---that is left to  the loop optimization pass.\n+If MR PRE GCSE is done, code hoisting (aka unification) is also done, as\n+well as load motion.\n+If you are optimizing for speed, LCM (lazy code motion) based GCSE is\n+done.  LCM is based on the work of Knoop, Ruthing, and Steffen.  LCM\n+based GCSE also does loop invariant code motion.  We also perform load\n+and store motion when optimizing for speed.\n+Regardless of which type of GCSE is used, the GCSE pass also performs\n+global constant and  copy propagation.\n+\n+The source file for this pass is @file{gcse.c}, and the LCM routines\n+are in @file{lcm.c}.\n+\n+@opindex dG\n+The option @option{-dG} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.gcse} to\n+the input file name.\n+\n+@cindex loop optimization\n+@cindex code motion\n+@cindex strength-reduction\n+@item\n+Loop optimization.  This pass moves constant expressions out of loops,\n+and optionally does strength-reduction and loop unrolling as well.\n+Its source files are @file{loop.c} and @file{unroll.c}, plus the header\n+@file{loop.h} used for communication between them.  Loop unrolling uses\n+some functions in @file{integrate.c} and the header @file{integrate.h}.\n+Loop dependency analysis routines are contained in @file{dependence.c}.\n+\n+@opindex dL\n+The option @option{-dL} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.loop} to\n+the input file name.\n+\n+@item\n+@opindex frerun-cse-after-loop\n+If @option{-frerun-cse-after-loop} was enabled, a second common\n+subexpression elimination pass is performed after the loop optimization\n+pass.  Jump threading is also done again at this time if it was specified.\n+\n+@opindex dt\n+The option @option{-dt} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.cse2} to\n+the input file name.\n+\n+@cindex data flow analysis\n+@cindex analysis, data flow\n+@cindex basic blocks\n+@item\n+Data flow analysis (@file{flow.c}).  This pass divides the program\n+into basic blocks (and in the process deletes unreachable loops); then\n+it computes which pseudo-registers are live at each point in the\n+program, and makes the first instruction that uses a value point at\n+the instruction that computed the value.\n+\n+@cindex autoincrement/decrement analysis\n+This pass also deletes computations whose results are never used, and\n+combines memory references with add or subtract instructions to make\n+autoincrement or autodecrement addressing.\n+\n+@opindex df\n+The option @option{-df} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.flow} to\n+the input file name.  If stupid register allocation is in use, this\n+dump file reflects the full results of such allocation.\n+\n+@cindex instruction combination\n+@item\n+Instruction combination (@file{combine.c}).  This pass attempts to\n+combine groups of two or three instructions that are related by data\n+flow into single instructions.  It combines the RTL expressions for\n+the instructions by substitution, simplifies the result using algebra,\n+and then attempts to match the result against the machine description.\n+\n+@opindex dc\n+The option @option{-dc} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.combine}\n+to the input file name.\n+\n+@cindex if conversion\n+@item\n+If-conversion is a transformation that transforms control dependencies\n+into data dependencies (IE it transforms conditional code into a\n+single control stream).\n+It is implemented in the file @file{ifcvt.c}.\n+\n+@opindex dE\n+The option @option{-dE} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.ce} to\n+the input file name.\n+\n+@cindex register movement\n+@item\n+Register movement (@file{regmove.c}).  This pass looks for cases where\n+matching constraints would force an instruction to need a reload, and\n+this reload would be a register to register move.  It then attempts\n+to change the registers used by the instruction to avoid the move\n+instruction.\n+\n+@opindex dN\n+The option @option{-dN} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.regmove}\n+to the input file name.\n+\n+@cindex instruction scheduling\n+@cindex scheduling, instruction\n+@item\n+Instruction scheduling (@file{sched.c}).  This pass looks for\n+instructions whose output will not be available by the time that it is\n+used in subsequent instructions.  (Memory loads and floating point\n+instructions often have this behavior on RISC machines).  It re-orders\n+instructions within a basic block to try to separate the definition and\n+use of items that otherwise would cause pipeline stalls.\n+\n+Instruction scheduling is performed twice.  The first time is immediately\n+after instruction combination and the second is immediately after reload.\n+\n+@opindex dS\n+The option @option{-dS} causes a debugging dump of the RTL code after this\n+pass is run for the first time.  The dump file's name is made by\n+appending @samp{.sched} to the input file name.\n+\n+@cindex register class preference pass\n+@item\n+Register class preferencing.  The RTL code is scanned to find out\n+which register class is best for each pseudo register.  The source\n+file is @file{regclass.c}.\n+\n+@cindex register allocation\n+@cindex local register allocation\n+@item\n+Local register allocation (@file{local-alloc.c}).  This pass allocates\n+hard registers to pseudo registers that are used only within one basic\n+block.  Because the basic block is linear, it can use fast and\n+powerful techniques to do a very good job.\n+\n+@opindex dl\n+The option @option{-dl} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.lreg} to\n+the input file name.\n+\n+@cindex global register allocation\n+@item\n+Global register allocation (@file{global.c}).  This pass\n+allocates hard registers for the remaining pseudo registers (those\n+whose life spans are not contained in one basic block).\n+\n+@cindex reloading\n+@item\n+Reloading.  This pass renumbers pseudo registers with the hardware\n+registers numbers they were allocated.  Pseudo registers that did not\n+get hard registers are replaced with stack slots.  Then it finds\n+instructions that are invalid because a value has failed to end up in\n+a register, or has ended up in a register of the wrong kind.  It fixes\n+up these instructions by reloading the problematical values\n+temporarily into registers.  Additional instructions are generated to\n+do the copying.\n+\n+The reload pass also optionally eliminates the frame pointer and inserts\n+instructions to save and restore call-clobbered registers around calls.\n+\n+Source files are @file{reload.c} and @file{reload1.c}, plus the header\n+@file{reload.h} used for communication between them.\n+\n+@opindex dg\n+The option @option{-dg} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.greg} to\n+the input file name.\n+\n+@cindex instruction scheduling\n+@cindex scheduling, instruction\n+@item\n+Instruction scheduling is repeated here to try to avoid pipeline stalls\n+due to memory loads generated for spilled pseudo registers.\n+\n+@opindex dR\n+The option @option{-dR} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.sched2}\n+to the input file name.\n+\n+@cindex basic block reordering\n+@cindex reordering, block\n+@item\n+Basic block reordering.  This pass implements profile guided code\n+positioning.  If profile information is not available, various types of\n+static analysis are performed to make the predictions normally coming\n+from the profile feedback (IE execution frequency, branch probability,\n+etc).  It is implemented in the file @file{bb-reorder.c}, and the\n+various prediction routines are in @file{predict.c}.\n+\n+@opindex dB\n+The option @option{-dB} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.bbro} to\n+the input file name.\n+\n+@cindex cross-jumping\n+@cindex no-op move instructions\n+@item\n+Jump optimization is repeated, this time including cross-jumping\n+and deletion of no-op move instructions.\n+\n+@opindex dJ\n+The option @option{-dJ} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.jump2}\n+to the input file name.\n+\n+@cindex delayed branch scheduling\n+@cindex scheduling, delayed branch\n+@item\n+Delayed branch scheduling.  This optional pass attempts to find\n+instructions that can go into the delay slots of other instructions,\n+usually jumps and calls.  The source file name is @file{reorg.c}.\n+\n+@opindex dd\n+The option @option{-dd} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.dbr}\n+to the input file name.\n+\n+@cindex branch shortening\n+@item\n+Branch shortening.  On many RISC machines, branch instructions have a\n+limited range.  Thus, longer sequences of instructions must be used for\n+long branches.  In this pass, the compiler figures out what how far each\n+instruction will be from each other instruction, and therefore whether\n+the usual instructions, or the longer sequences, must be used for each\n+branch.\n+\n+@cindex register-to-stack conversion\n+@item\n+Conversion from usage of some hard registers to usage of a register\n+stack may be done at this point.  Currently, this is supported only\n+for the floating-point registers of the Intel 80387 coprocessor.   The\n+source file name is @file{reg-stack.c}.\n+\n+@opindex dk\n+The options @option{-dk} causes a debugging dump of the RTL code after\n+this pass.  This dump file's name is made by appending @samp{.stack}\n+to the input file name.\n+\n+@cindex final pass\n+@cindex peephole optimization\n+@item\n+Final.  This pass outputs the assembler code for the function.  It is\n+also responsible for identifying spurious test and compare\n+instructions.  Machine-specific peephole optimizations are performed\n+at the same time.  The function entry and exit sequences are generated\n+directly as assembler code in this pass; they never exist as RTL@.\n+\n+The source files are @file{final.c} plus @file{insn-output.c}; the\n+latter is generated automatically from the machine description by the\n+tool @file{genoutput}.  The header file @file{conditions.h} is used\n+for communication between these files.\n+\n+@cindex debugging information generation\n+@item\n+Debugging information output.  This is run after final because it must\n+output the stack slot offsets for pseudo registers that did not get\n+hard registers.  Source files are @file{dbxout.c} for DBX symbol table\n+format, @file{sdbout.c} for SDB symbol table format,  @file{dwarfout.c}\n+for DWARF symbol table format, and the files @file{dwarf2out.c} and\n+@file{dwarf2asm.c} for DWARF2 symbol table format.\n+@end itemize\n+\n+Some additional files are used by all or many passes:\n+\n+@itemize @bullet\n+@item\n+Every pass uses @file{machmode.def} and @file{machmode.h} which define\n+the machine modes.\n+\n+@item\n+Several passes use @file{real.h}, which defines the default\n+representation of floating point constants and how to operate on them.\n+\n+@item\n+All the passes that work with RTL use the header files @file{rtl.h}\n+and @file{rtl.def}, and subroutines in file @file{rtl.c}.  The tools\n+@code{gen*} also use these files to read and work with the machine\n+description RTL@.\n+\n+@item\n+All the tools that read the machine description use support routines\n+found in @file{gensupport.c}, @file{errors.c}, and @file{read-rtl.c}.\n+\n+@findex genconfig\n+@item\n+Several passes refer to the header file @file{insn-config.h} which\n+contains a few parameters (C macro definitions) generated\n+automatically from the machine description RTL by the tool\n+@code{genconfig}.\n+\n+@cindex instruction recognizer\n+@item\n+Several passes use the instruction recognizer, which consists of\n+@file{recog.c} and @file{recog.h}, plus the files @file{insn-recog.c}\n+and @file{insn-extract.c} that are generated automatically from the\n+machine description by the tools @file{genrecog} and\n+@file{genextract}.\n+\n+@item\n+Several passes use the header files @file{regs.h} which defines the\n+information recorded about pseudo register usage, and @file{basic-block.h}\n+which defines the information recorded about basic blocks.\n+\n+@item\n+@file{hard-reg-set.h} defines the type @code{HARD_REG_SET}, a bit-vector\n+with a bit for each hard register, and some macros to manipulate it.\n+This type is just @code{int} if the machine has few enough hard registers;\n+otherwise it is an array of @code{int} and some of the macros expand\n+into loops.\n+\n+@item\n+Several passes use instruction attributes.  A definition of the\n+attributes defined for a particular machine is in file\n+@file{insn-attr.h}, which is generated from the machine description by\n+the program @file{genattr}.  The file @file{insn-attrtab.c} contains\n+subroutines to obtain the attribute values for insns.  It is generated\n+from the machine description by the program @file{genattrtab}.\n+@end itemize"}, {"sha": "c3d8e3913d779a603636e9bd500997e4015c30dd", "filename": "gcc/doc/portability.texi", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fportability.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd/gcc%2Fdoc%2Fportability.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fportability.texi?ref=73a8ed7ed443bcdcc57cd2d29fe15a44c0cf56cd", "patch": "@@ -0,0 +1,38 @@\n+@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node Portability\n+@chapter GCC and Portability\n+@cindex portability\n+@cindex GCC and portability\n+\n+The main goal of GCC was to make a good, fast compiler for machines in\n+the class that the GNU system aims to run on: 32-bit machines that address\n+8-bit bytes and have several general registers.  Elegance, theoretical\n+power and simplicity are only secondary.\n+\n+GCC gets most of the information about the target machine from a machine\n+description which gives an algebraic formula for each of the machine's\n+instructions.  This is a very clean way to describe the target.  But when\n+the compiler needs information that is difficult to express in this\n+fashion, I have not hesitated to define an ad-hoc parameter to the machine\n+description.  The purpose of portability is to reduce the total work needed\n+on the compiler; it was not of interest for its own sake.\n+\n+@cindex endianness\n+@cindex autoincrement addressing, availability\n+@findex abort\n+GCC does not contain machine dependent code, but it does contain code\n+that depends on machine parameters such as endianness (whether the most\n+significant byte has the highest or lowest address of the bytes in a word)\n+and the availability of autoincrement addressing.  In the RTL-generation\n+pass, it is often necessary to have multiple strategies for generating code\n+for a particular kind of syntax tree, strategies that are usable for different\n+combinations of parameters.  Often I have not tried to address all possible\n+cases, but only the common ones or only the ones that I have encountered.\n+As a result, a new target may require additional strategies.  You will know\n+if this happens because the compiler will call @code{abort}.  Fortunately,\n+the new strategies can be added in a machine-independent fashion, and will\n+affect only the target machines that need them."}]}