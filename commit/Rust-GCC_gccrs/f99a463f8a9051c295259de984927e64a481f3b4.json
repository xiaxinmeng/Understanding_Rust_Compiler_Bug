{"sha": "f99a463f8a9051c295259de984927e64a481f3b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5YTQ2M2Y4YTkwNTFjMjk1MjU5ZGU5ODQ5MjdlNjRhNDgxZjNiNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-10-25T18:26:34Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-10-25T18:26:34Z"}, "message": "libgo: Solaris portability patches.\n\nFrom Rainer Orth.\n\nFrom-SVN: r192819", "tree": {"sha": "55b7a233610658420ab33285a3557bfdc8ccb7c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55b7a233610658420ab33285a3557bfdc8ccb7c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f99a463f8a9051c295259de984927e64a481f3b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99a463f8a9051c295259de984927e64a481f3b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99a463f8a9051c295259de984927e64a481f3b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99a463f8a9051c295259de984927e64a481f3b4/comments", "author": null, "committer": null, "parents": [{"sha": "992ca0f0697472856e4b7cc81185c1c787b2398b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/992ca0f0697472856e4b7cc81185c1c787b2398b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/992ca0f0697472856e4b7cc81185c1c787b2398b"}], "stats": {"total": 111, "additions": 19, "deletions": 92}, "files": [{"sha": "f470c054860e5115824a69c9b33769a9088bffb1", "filename": "libgo/Makefile.am", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99a463f8a9051c295259de984927e64a481f3b4/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99a463f8a9051c295259de984927e64a481f3b4/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=f99a463f8a9051c295259de984927e64a481f3b4", "patch": "@@ -704,7 +704,7 @@ if LIBGO_IS_SOLARIS\n go_net_cgo_file = go/net/cgo_linux.go\n go_net_sock_file = go/net/sock_solaris.go\n go_net_sockopt_file = go/net/sockopt_bsd.go\n-go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_solaris.go\n+go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_posix.go\n else\n if LIBGO_IS_FREEBSD\n go_net_cgo_file = go/net/cgo_bsd.go\n@@ -968,6 +968,9 @@ endif\n if LIBGO_IS_OPENBSD\n archive_tar_atim_file = go/archive/tar/stat_atim.go\n endif\n+if LIBGO_IS_SOLARIS\n+archive_tar_atim_file = go/archive/tar/stat_atim.go\n+endif\n if LIBGO_IS_DARWIN\n archive_tar_atim_file = go/archive/tar/stat_atimespec.go\n endif"}, {"sha": "b413094e841ab1d8affc442f175f930f6ff0fc72", "filename": "libgo/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99a463f8a9051c295259de984927e64a481f3b4/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99a463f8a9051c295259de984927e64a481f3b4/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=f99a463f8a9051c295259de984927e64a481f3b4", "patch": "@@ -993,7 +993,7 @@ go_mime_files = \\\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_posix.go\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_NETBSD_TRUE@@LIBGO_IS_SOLARIS_FALSE@go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_posix.go\n @LIBGO_IS_FREEBSD_TRUE@@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_FALSE@go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_posix.go\n-@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_solaris.go\n+@LIBGO_IS_IRIX_FALSE@@LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@go_net_sockoptip_file = go/net/sockoptip_bsd.go go/net/sockoptip_posix.go\n @LIBGO_IS_IRIX_TRUE@@LIBGO_IS_LINUX_FALSE@go_net_sockoptip_file = go/net/sockoptip_linux.go go/net/sockoptip_posix.go\n @LIBGO_IS_LINUX_TRUE@go_net_sockoptip_file = go/net/sockoptip_linux.go go/net/sockoptip_posix.go\n @LIBGO_IS_FREEBSD_FALSE@@LIBGO_IS_LINUX_FALSE@go_net_sendfile_file = go/net/sendfile_stub.go\n@@ -1174,6 +1174,7 @@ go_unicode_files = \\\n @LIBGO_IS_LINUX_TRUE@archive_tar_atim_file = go/archive/tar/stat_atim.go\n @LIBGO_IS_NETBSD_TRUE@archive_tar_atim_file = go/archive/tar/stat_atimespec.go\n @LIBGO_IS_OPENBSD_TRUE@archive_tar_atim_file = go/archive/tar/stat_atim.go\n+@LIBGO_IS_SOLARIS_TRUE@archive_tar_atim_file = go/archive/tar/stat_atim.go\n go_archive_tar_files = \\\n \tgo/archive/tar/common.go \\\n \tgo/archive/tar/reader.go \\"}, {"sha": "538ef0d117940114de7b1d17dbc8990349d8b8d3", "filename": "libgo/go/net/sockoptip_solaris.go", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992ca0f0697472856e4b7cc81185c1c787b2398b/libgo%2Fgo%2Fnet%2Fsockoptip_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992ca0f0697472856e4b7cc81185c1c787b2398b/libgo%2Fgo%2Fnet%2Fsockoptip_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Fsockoptip_solaris.go?ref=992ca0f0697472856e4b7cc81185c1c787b2398b", "patch": "@@ -1,90 +0,0 @@\n-// Copyright 2011 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// IP-level socket options for Solaris\n-\n-package net\n-\n-import (\n-\t\"os\"\n-\t\"syscall\"\n-)\n-\n-func ipv4MulticastInterface(fd *netFD) (*Interface, error) {\n-\tif err := fd.incref(false); err != nil {\n-\t\treturn nil, err\n-\t}\n-\tdefer fd.decref()\n-\ta, err := syscall.GetsockoptInet4Addr(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_IF)\n-\tif err != nil {\n-\t\treturn nil, os.NewSyscallError(\"getsockopt\", err)\n-\t}\n-\treturn ipv4AddrToInterface(IPv4(a[0], a[1], a[2], a[3]))\n-}\n-\n-func setIPv4MulticastInterface(fd *netFD, ifi *Interface) error {\n-\tip, err := interfaceToIPv4Addr(ifi)\n-\tif err != nil {\n-\t\treturn os.NewSyscallError(\"setsockopt\", err)\n-\t}\n-\tvar x [4]byte\n-\tcopy(x[:], ip.To4())\n-\tif err := fd.incref(false); err != nil {\n-\t\treturn err\n-\t}\n-\tdefer fd.decref()\n-\terr = syscall.SetsockoptInet4Addr(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_IF, x)\n-\tif err != nil {\n-\t\treturn os.NewSyscallError(\"setsockopt\", err)\n-\t}\n-\treturn nil\n-}\n-\n-func ipv4MulticastLoopback(fd *netFD) (bool, error) {\n-\tif err := fd.incref(false); err != nil {\n-\t\treturn false, err\n-\t}\n-\tdefer fd.decref()\n-\tv, err := syscall.GetsockoptByte(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_LOOP)\n-\tif err != nil {\n-\t\treturn false, os.NewSyscallError(\"getsockopt\", err)\n-\t}\n-\treturn v == 1, nil\n-}\n-\n-func setIPv4MulticastLoopback(fd *netFD, v bool) error {\n-\tif err := fd.incref(false); err != nil {\n-\t\treturn err\n-\t}\n-\tdefer fd.decref()\n-\terr := syscall.SetsockoptByte(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_LOOP, byte(boolint(v)))\n-\tif err != nil {\n-\t\treturn os.NewSyscallError(\"setsockopt\", err)\n-\t}\n-\treturn nil\n-}\n-\n-func ipv4ReceiveInterface(fd *netFD) (bool, error) {\n-\tif err := fd.incref(false); err != nil {\n-\t\treturn false, err\n-\t}\n-\tdefer fd.decref()\n-\tv, err := syscall.GetsockoptInt(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_RECVIF)\n-\tif err != nil {\n-\t\treturn false, os.NewSyscallError(\"getsockopt\", err)\n-\t}\n-\treturn v == 1, nil\n-}\n-\n-func setIPv4ReceiveInterface(fd *netFD, v bool) error {\n-\tif err := fd.incref(false); err != nil {\n-\t\treturn err\n-\t}\n-\tdefer fd.decref()\n-\terr := syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_RECVIF, boolint(v))\n-\tif err != nil {\n-\t\treturn os.NewSyscallError(\"setsockopt\", err)\n-\t}\n-\treturn nil\n-}"}, {"sha": "c1919171b7d5c62ae10bac23ab0735aad5a3eb18", "filename": "libgo/go/syscall/syscall_solaris.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f99a463f8a9051c295259de984927e64a481f3b4/libgo%2Fgo%2Fsyscall%2Fsyscall_solaris.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f99a463f8a9051c295259de984927e64a481f3b4/libgo%2Fgo%2Fsyscall%2Fsyscall_solaris.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_solaris.go?ref=f99a463f8a9051c295259de984927e64a481f3b4", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package syscall\n+\n+func (ts *Timestruc) Unix() (sec int64, nsec int64) {\n+\treturn int64(ts.Sec), int64(ts.Nsec)\n+}\n+\n+func (ts *Timestruc) Nano() int64 {\n+\treturn int64(ts.Sec)*1e9 + int64(ts.Nsec)\n+}"}]}