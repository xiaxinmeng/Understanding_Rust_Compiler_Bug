{"sha": "a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThiNTIyYjQ4M2ViYjhjOTcyZWNmZGU4Nzc5YTdhNmVjMTZhZWNkNg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-08-11T08:14:54Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-08-11T08:14:54Z"}, "message": "Introduce TARGET_SUPPORTS_ALIASES\n\n2017-08-11  Martin Liska  <mliska@suse.cz>\n\n\t* c-opts.c (c_common_post_options): Replace ASM_OUTPUT_DEF with\n\tTARGET_SUPPORTS_ALIASES.\n2017-08-11  Martin Liska  <mliska@suse.cz>\n\n\t* asan.c (asan_protect_global): Replace ASM_OUTPUT_DEF with\n\tTARGET_SUPPORTS_ALIASES.\n\t* cgraph.c (cgraph_node::create_same_body_alias): Likewise.\n\t* ipa-visibility.c (can_replace_by_local_alias): Likewise.\n\t(optimize_weakref): Likewise.\n\t* symtab.c (symtab_node::noninterposable_alias): Likewise.\n\t* varpool.c (varpool_node::create_extra_name_alias): Likewise.\n\t* defaults.h: Introduce TARGET_SUPPORTS_ALIASES.\n2017-08-11  Martin Liska  <mliska@suse.cz>\n\n\t* decl2.c (get_tls_init_fn): Replace ASM_OUTPUT_DEF with\n\tTARGET_SUPPORTS_ALIASES.\n\t(handle_tls_init): Likewise.\n\t(note_mangling_alias): Likewise.  Remove ATTRIBUTE_UNUSED for\n\tboth arguments.\n\t* optimize.c (can_alias_cdtor): Likewise.\n\nFrom-SVN: r251048", "tree": {"sha": "9758313b56edfd190549a5e205c9576068fe786e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9758313b56edfd190549a5e205c9576068fe786e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c71a171edb5e21a89a08643abfe933a43bb5d6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c71a171edb5e21a89a08643abfe933a43bb5d6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c71a171edb5e21a89a08643abfe933a43bb5d6d"}], "stats": {"total": 125, "additions": 76, "deletions": 49}, "files": [{"sha": "a926516ed778043eba36e86bd4e2a9b5de3f977b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "patch": "@@ -1,3 +1,14 @@\n+2017-08-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* asan.c (asan_protect_global): Replace ASM_OUTPUT_DEF with\n+\tTARGET_SUPPORTS_ALIASES.\n+\t* cgraph.c (cgraph_node::create_same_body_alias): Likewise.\n+\t* ipa-visibility.c (can_replace_by_local_alias): Likewise.\n+\t(optimize_weakref): Likewise.\n+\t* symtab.c (symtab_node::noninterposable_alias): Likewise.\n+\t* varpool.c (varpool_node::create_extra_name_alias): Likewise.\n+\t* defaults.h: Introduce TARGET_SUPPORTS_ALIASES.\n+\n 2017-08-11  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/81213"}, {"sha": "ce1e0244ec68791d21b3b9b0c025adc5806d03fb", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "patch": "@@ -1665,10 +1665,8 @@ asan_protect_global (tree decl)\n   if (lookup_attribute (\"weakref\", DECL_ATTRIBUTES (decl)))\n     return false;\n \n-#ifndef ASM_OUTPUT_DEF\n-  if (asan_needs_local_alias (decl))\n+  if (!TARGET_SUPPORTS_ALIASES && asan_needs_local_alias (decl))\n     return false;\n-#endif\n \n   return true;\n }"}, {"sha": "6d33192c5ac7a009402a9e68bf79332825eb6d2d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "patch": "@@ -1,3 +1,8 @@\n+2017-08-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-opts.c (c_common_post_options): Replace ASM_OUTPUT_DEF with\n+\tTARGET_SUPPORTS_ALIASES.\n+\n 2017-08-10  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-common.c (c_parse_error): Add rich_location * param, using it"}, {"sha": "0b13a188c1b380a2fcbb2711947f3165e81b0853", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "patch": "@@ -957,16 +957,18 @@ c_common_post_options (const char **pfilename)\n \n   if (flag_extern_tls_init)\n     {\n-#if !defined (ASM_OUTPUT_DEF) || !SUPPORTS_WEAK\n-      /* Lazy TLS initialization for a variable in another TU requires\n-\t alias and weak reference support. */\n-      if (flag_extern_tls_init > 0)\n-\tsorry (\"external TLS initialization functions not supported \"\n-\t       \"on this target\");\n-      flag_extern_tls_init = 0;\n-#else\n-      flag_extern_tls_init = 1;\n-#endif\n+      if (!TARGET_SUPPORTS_ALIASES || !SUPPORTS_WEAK)\n+\t{\n+\t  /* Lazy TLS initialization for a variable in another TU requires\n+\t     alias and weak reference support.  */\n+\t  if (flag_extern_tls_init > 0)\n+\t    sorry (\"external TLS initialization functions not supported \"\n+\t\t   \"on this target\");\n+\n+\t  flag_extern_tls_init = 0;\n+\t}\n+      else\n+\tflag_extern_tls_init = 1;\n     }\n \n   if (num_in_fnames > 1)"}, {"sha": "69aa6c5bce2f1345489ea77325a86540bef52907", "filename": "gcc/cgraph.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "patch": "@@ -584,10 +584,11 @@ cgraph_node *\n cgraph_node::create_same_body_alias (tree alias, tree decl)\n {\n   cgraph_node *n;\n-#ifndef ASM_OUTPUT_DEF\n+\n   /* If aliases aren't supported by the assembler, fail.  */\n-  return NULL;\n-#endif\n+  if (!TARGET_SUPPORTS_ALIASES)\n+    return NULL;\n+\n   /* Langhooks can create same body aliases of symbols not defined.\n      Those are useless. Drop them on the floor.  */\n   if (symtab->global_info_ready)"}, {"sha": "a8a3fccdcd1972b5871e10983967c4c2b5521309", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "patch": "@@ -1,3 +1,12 @@\n+2017-08-11  Martin Liska  <mliska@suse.cz>\n+\n+\t* decl2.c (get_tls_init_fn): Replace ASM_OUTPUT_DEF with\n+\tTARGET_SUPPORTS_ALIASES.\n+\t(handle_tls_init): Likewise.\n+\t(note_mangling_alias): Likewise.  Remove ATTRIBUTE_UNUSED for\n+\tboth arguments.\n+\t* optimize.c (can_alias_cdtor): Likewise.\n+\n 2017-08-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/81671 - nullptr_t template parameter"}, {"sha": "37393a1a253c65e4718f14a22ff84191bf6189b5", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "patch": "@@ -3156,11 +3156,9 @@ get_tls_init_fn (tree var)\n   if (!flag_extern_tls_init && DECL_EXTERNAL (var))\n     return NULL_TREE;\n \n-#ifdef ASM_OUTPUT_DEF\n   /* If the variable is internal, or if we can't generate aliases,\n      call the local init function directly.  */\n-  if (!TREE_PUBLIC (var))\n-#endif\n+  if (!TREE_PUBLIC (var) || !TARGET_SUPPORTS_ALIASES)\n     return get_local_tls_init_fn ();\n \n   tree sname = mangle_tls_init_fn (var);\n@@ -4241,9 +4239,8 @@ handle_tls_init (void)\n       tree init = TREE_PURPOSE (vars);\n       one_static_initialization_or_destruction (var, init, true);\n \n-#ifdef ASM_OUTPUT_DEF\n       /* Output init aliases even with -fno-extern-tls-init.  */\n-      if (TREE_PUBLIC (var))\n+      if (TARGET_SUPPORTS_ALIASES && TREE_PUBLIC (var))\n \t{\n           tree single_init_fn = get_tls_init_fn (var);\n \t  if (single_init_fn == NULL_TREE)\n@@ -4253,7 +4250,6 @@ handle_tls_init (void)\n \t\t(single_init_fn, fn);\n \t  gcc_assert (alias != NULL);\n \t}\n-#endif\n     }\n \n   finish_then_clause (if_stmt);\n@@ -4298,17 +4294,18 @@ generate_mangling_alias (tree decl, tree id2)\n    implementation.  */\n \n void\n-note_mangling_alias (tree decl ATTRIBUTE_UNUSED, tree id2 ATTRIBUTE_UNUSED)\n+note_mangling_alias (tree decl, tree id2)\n {\n-#ifdef ASM_OUTPUT_DEF\n-  if (!defer_mangling_aliases)\n-    generate_mangling_alias (decl, id2);\n-  else\n+  if (TARGET_SUPPORTS_ALIASES)\n     {\n-      vec_safe_push (mangling_aliases, decl);\n-      vec_safe_push (mangling_aliases, id2);\n+      if (!defer_mangling_aliases)\n+\tgenerate_mangling_alias (decl, id2);\n+      else\n+\t{\n+\t  vec_safe_push (mangling_aliases, decl);\n+\t  vec_safe_push (mangling_aliases, id2);\n+\t}\n     }\n-#endif\n }\n \n /* Emit all mangling aliases that were deferred up to this point.  */"}, {"sha": "09ffbda7ca8be1bef78d34ba77a28a01933136d7", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "patch": "@@ -184,10 +184,10 @@ cdtor_comdat_group (tree complete, tree base)\n static bool\n can_alias_cdtor (tree fn)\n {\n-#ifndef ASM_OUTPUT_DEF\n   /* If aliases aren't supported by the assembler, fail.  */\n-  return false;\n-#endif\n+  if (!TARGET_SUPPORTS_ALIASES)\n+    return false;\n+\n   /* We can't use an alias if there are virtual bases.  */\n   if (CLASSTYPE_VBASECLASSES (DECL_CONTEXT (fn)))\n     return false;"}, {"sha": "072ef6b6d174230c5a7993a2163a3367d35d18a9", "filename": "gcc/defaults.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "patch": "@@ -863,6 +863,15 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n #endif\n \n+/* Decide whether target supports aliases.  */\n+#ifndef TARGET_SUPPORTS_ALIASES\n+#ifdef ASM_OUTPUT_DEF\n+#define TARGET_SUPPORTS_ALIASES 1\n+#else\n+#define TARGET_SUPPORTS_ALIASES 0\n+#endif\n+#endif\n+\n /* Select a format to encode pointers in exception handling data.  We\n    prefer those that result in fewer dynamic relocations.  Assume no\n    special support here and encode direct references.  */"}, {"sha": "b6bc870b11de4539fc291ecfad39dd35cf12ec9d", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "patch": "@@ -339,10 +339,10 @@ varpool_node::externally_visible_p (void)\n static bool\n can_replace_by_local_alias (symtab_node *node)\n {\n-#ifndef ASM_OUTPUT_DEF\n   /* If aliases aren't supported, we can't do replacement.  */\n-  return false;\n-#endif\n+  if (!TARGET_SUPPORTS_ALIASES)\n+    return false;\n+\n   /* Weakrefs have a reason to be non-local.  Be sure we do not replace\n      them.  */\n   while (node->transparent_alias && node->definition && !node->weakref)\n@@ -463,11 +463,6 @@ update_visibility_by_resolution_info (symtab_node * node)\n static void\n optimize_weakref (symtab_node *node)\n {\n-#ifdef ASM_OUTPUT_DEF\n-  bool aliases_supported = true;\n-#else\n-  bool aliases_supported = false;\n-#endif\n   bool strip_weakref = false;\n   bool static_alias = false;\n \n@@ -486,8 +481,8 @@ optimize_weakref (symtab_node *node)\n \n   /* If we have definition of weakref's target and we know it binds locally,\n      we can turn weakref to static alias.  */\n-  if (target->definition && decl_binds_to_current_def_p (target->decl)\n-      && aliases_supported)\n+  if (TARGET_SUPPORTS_ALIASES\n+      && target->definition && decl_binds_to_current_def_p (target->decl))\n     strip_weakref = static_alias = true;\n   /* Otherwise we can turn weakref into transparent alias.  This transformation\n      may break asm statements which directly refers to symbol name and expect"}, {"sha": "a507ace8a3479c3224fbe031b470030aaa1e2cba", "filename": "gcc/symtab.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "patch": "@@ -1765,10 +1765,10 @@ symtab_node::noninterposable_alias (void)\n \t\t\t\t   (void *)&new_node, true);\n   if (new_node)\n     return new_node;\n-#ifndef ASM_OUTPUT_DEF\n+\n   /* If aliases aren't supported by the assembler, fail.  */\n-  return NULL;\n-#endif\n+  if (!TARGET_SUPPORTS_ALIASES)\n+    return NULL;\n \n   /* Otherwise create a new one.  */\n   new_decl = copy_node (node->decl);"}, {"sha": "d849fe8a7da2ff9f1bb3c646b76c1d41ae914fbb", "filename": "gcc/varpool.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8b522b483ebb8c972ecfde8779a7a6ec16aecd6/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=a8b522b483ebb8c972ecfde8779a7a6ec16aecd6", "patch": "@@ -788,10 +788,10 @@ varpool_node::create_extra_name_alias (tree alias, tree decl)\n {\n   varpool_node *alias_node;\n \n-#ifndef ASM_OUTPUT_DEF\n   /* If aliases aren't supported by the assembler, fail.  */\n-  return NULL;\n-#endif\n+  if (!TARGET_SUPPORTS_ALIASES)\n+    return NULL;\n+\n   alias_node = varpool_node::create_alias (alias, decl);\n   alias_node->cpp_implicit_alias = true;\n "}]}