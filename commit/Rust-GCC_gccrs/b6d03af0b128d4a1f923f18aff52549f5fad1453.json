{"sha": "b6d03af0b128d4a1f923f18aff52549f5fad1453", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkMDNhZjBiMTI4ZDRhMWY5MjNmMThhZmY1MjU0OWY1ZmFkMTQ1Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-06-22T14:16:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-06-22T14:16:38Z"}, "message": "PR libstdc++/81173 fix undefined memset with null pointer\n\n\tPR libstdc++/81173\n\t* include/bits/stl_bvector.h (vector<bool>::_M_initialize_value):\n\tDo not pass null pointer to memset.\n\nFrom-SVN: r249554", "tree": {"sha": "99bfa141a37aa9487d479465580bc973c654cf44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99bfa141a37aa9487d479465580bc973c654cf44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6d03af0b128d4a1f923f18aff52549f5fad1453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d03af0b128d4a1f923f18aff52549f5fad1453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d03af0b128d4a1f923f18aff52549f5fad1453", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d03af0b128d4a1f923f18aff52549f5fad1453/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0759db190d979bb4adaeaedd19ab0c823c168691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0759db190d979bb4adaeaedd19ab0c823c168691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0759db190d979bb4adaeaedd19ab0c823c168691"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "6be91fedcc5564d16b5a3d8e48354ccff3978e04", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d03af0b128d4a1f923f18aff52549f5fad1453/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d03af0b128d4a1f923f18aff52549f5fad1453/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b6d03af0b128d4a1f923f18aff52549f5fad1453", "patch": "@@ -1,3 +1,9 @@\n+2017-06-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/81173\n+\t* include/bits/stl_bvector.h (vector<bool>::_M_initialize_value):\n+\tDo not pass null pointer to memset.\n+\n 2017-06-21  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR libstdc++/80675"}, {"sha": "bf4b23eb2d3f0318f194afdbd941bda60df94831", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d03af0b128d4a1f923f18aff52549f5fad1453/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d03af0b128d4a1f923f18aff52549f5fad1453/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=b6d03af0b128d4a1f923f18aff52549f5fad1453", "patch": "@@ -364,7 +364,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       return *this;\n     }\n \n-    const_iterator \n+    const_iterator\n     operator+(difference_type __i) const\n     {\n       const_iterator __tmp = *this;\n@@ -406,7 +406,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   {\n     if (__first._M_p != __last._M_p)\n       {\n-\t_Bit_type *__first_p = __first._M_p;\n+\t_Bit_type* __first_p = __first._M_p;\n \tif (__first._M_offset != 0)\n \t  __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);\n \n@@ -509,7 +509,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #else\n       _Bvector_base() { }\n #endif\n-      \n+\n       _Bvector_base(const allocator_type& __a)\n       : _M_impl(__a) { }\n \n@@ -632,11 +632,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : vector(__n, false, __a)\n       { }\n \n-      vector(size_type __n, const bool& __value, \n+      vector(size_type __n, const bool& __value,\n \t     const allocator_type& __a = allocator_type())\n #else\n       explicit\n-      vector(size_type __n, const bool& __value = bool(), \n+      vector(size_type __n, const bool& __value = bool(),\n \t     const allocator_type& __a = allocator_type())\n #endif\n       : _Base(__a)\n@@ -955,7 +955,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \tstd::swap(this->_M_impl._M_start, __x._M_impl._M_start);\n \tstd::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);\n-\tstd::swap(this->_M_impl._M_end_of_storage, \n+\tstd::swap(this->_M_impl._M_end_of_storage,\n \t\t  __x._M_impl._M_end_of_storage);\n \t_Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(),\n \t\t\t\t      __x._M_get_Bit_allocator());\n@@ -1129,9 +1129,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       void\n       _M_initialize_value(bool __x)\n       {\n-\t__builtin_memset(this->_M_impl._M_start._M_p, __x ? ~0 : 0,\n-\t\t(this->_M_impl._M_end_addr() - this->_M_impl._M_start._M_p)\n-\t\t* sizeof(_Bit_type));\n+\tif (_Bit_type* __p = this->_M_impl._M_start._M_p)\n+\t  __builtin_memset(__p, __x ? ~0 : 0,\n+\t\t\t   (this->_M_impl._M_end_addr() - __p)\n+\t\t\t   * sizeof(_Bit_type));\n       }\n \n       void\n@@ -1155,10 +1156,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t}\n \n       template<typename _InputIterator>\n-\tvoid \n+\tvoid\n \t_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,\n \t\t\t       __false_type)\n-\t{ _M_initialize_range(__first, __last, \n+\t{ _M_initialize_range(__first, __last,\n \t\t\t      std::__iterator_category(__first)); }\n \n       template<typename _InputIterator>\n@@ -1223,7 +1224,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  else\n \t    insert(end(), __first, __last);\n \t}\n-    \n+\n       template<typename _ForwardIterator>\n \tvoid\n \t_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,\n@@ -1264,7 +1265,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       template<typename _InputIterator>\n \tvoid\n-\t_M_insert_range(iterator __pos, _InputIterator __first, \n+\t_M_insert_range(iterator __pos, _InputIterator __first,\n \t\t\t_InputIterator __last, std::input_iterator_tag)\n \t{\n \t  for (; __first != __last; ++__first)\n@@ -1276,7 +1277,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       template<typename _ForwardIterator>\n \tvoid\n-\t_M_insert_range(iterator __position, _ForwardIterator __first, \n+\t_M_insert_range(iterator __position, _ForwardIterator __first,\n \t\t\t_ForwardIterator __last, std::forward_iterator_tag);\n \n       void"}]}