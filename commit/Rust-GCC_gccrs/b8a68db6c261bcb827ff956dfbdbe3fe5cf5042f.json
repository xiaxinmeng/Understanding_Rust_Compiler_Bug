{"sha": "b8a68db6c261bcb827ff956dfbdbe3fe5cf5042f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhhNjhkYjZjMjYxYmNiODI3ZmY5NTZkZmJkYmUzZmU1Y2Y1MDQyZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-01T22:13:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-01T22:13:39Z"}, "message": "Remove trash character introduced by last patch.\n\nFrom-SVN: r3576", "tree": {"sha": "92e0f802a285e458b008915512fa9f797cabe550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92e0f802a285e458b008915512fa9f797cabe550"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8a68db6c261bcb827ff956dfbdbe3fe5cf5042f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a68db6c261bcb827ff956dfbdbe3fe5cf5042f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a68db6c261bcb827ff956dfbdbe3fe5cf5042f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a68db6c261bcb827ff956dfbdbe3fe5cf5042f/comments", "author": null, "committer": null, "parents": [{"sha": "500c518b4de7d7f41364ee22d2600e86fb256a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500c518b4de7d7f41364ee22d2600e86fb256a53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/500c518b4de7d7f41364ee22d2600e86fb256a53"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "e6c925051d5d21e1813ec26a3767093d88bf1308", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8a68db6c261bcb827ff956dfbdbe3fe5cf5042f/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8a68db6c261bcb827ff956dfbdbe3fe5cf5042f/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b8a68db6c261bcb827ff956dfbdbe3fe5cf5042f", "patch": "@@ -5920,7 +5920,7 @@ simplify_and_const_int (x, mode, varop, constop)\n \tcase LSHIFTRT:\n \t  /* If we have (and (lshiftrt FOO C1) C2) where the combination of the\n \t     shift and AND produces only copies of the sign bit (C2 is one less\n-\t     than a power of two), we can do this with just a shift.  */+\n+\t     than a power of two), we can do this with just a shift.  */\n \n \t  if (GET_CODE (XEXP (varop, 1)) == CONST_INT\n \t      && ((INTVAL (XEXP (varop, 1))"}]}