{"sha": "acd15a286e182ee4b3331a35503bcd67a4294331", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNkMTVhMjg2ZTE4MmVlNGIzMzMxYTM1NTAzYmNkNjdhNDI5NDMzMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-10-11T14:34:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-10-11T14:34:18Z"}, "message": "c-common.h (omp_clause_mask::operator !=): New method.\n\n\t* c-common.h (omp_clause_mask::operator !=): New method.\n\t* c-omp.c (c_omp_split_clauses): Use if ((mask & something) != 0)\n\tinstead of if (mask & something) tests everywhere.\n\nFrom-SVN: r203447", "tree": {"sha": "061329497e33d96c498c15d410155ebc48d55268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/061329497e33d96c498c15d410155ebc48d55268"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acd15a286e182ee4b3331a35503bcd67a4294331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd15a286e182ee4b3331a35503bcd67a4294331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acd15a286e182ee4b3331a35503bcd67a4294331", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acd15a286e182ee4b3331a35503bcd67a4294331/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddc757fe19adf1b99121fd6c42f6149b8d8cac2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc757fe19adf1b99121fd6c42f6149b8d8cac2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc757fe19adf1b99121fd6c42f6149b8d8cac2e"}], "stats": {"total": 62, "additions": 40, "deletions": 22}, "files": [{"sha": "106bfa8c8c857f6fc8c441f641407a6bffd75bb7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd15a286e182ee4b3331a35503bcd67a4294331/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd15a286e182ee4b3331a35503bcd67a4294331/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=acd15a286e182ee4b3331a35503bcd67a4294331", "patch": "@@ -1,5 +1,9 @@\n 2013-10-11  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-common.h (omp_clause_mask::operator !=): New method.\n+\t* c-omp.c (c_omp_split_clauses): Use if ((mask & something) != 0)\n+\tinstead of if (mask & something) tests everywhere.\n+\n \t* c-cppbuiltin.c (c_cpp_builtins): Predefine _OPENMP to\n \t201307 instead of 201107.\n \t* c-common.c (DEF_FUNCTION_TYPE_8): Define."}, {"sha": "1f8333e94a0ed5d37ec7c4b3b4120a3faa1e821a", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd15a286e182ee4b3331a35503bcd67a4294331/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd15a286e182ee4b3331a35503bcd67a4294331/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=acd15a286e182ee4b3331a35503bcd67a4294331", "patch": "@@ -1052,6 +1052,7 @@ struct omp_clause_mask\n   inline omp_clause_mask operator >> (int);\n   inline omp_clause_mask operator << (int);\n   inline bool operator == (omp_clause_mask) const;\n+  inline bool operator != (omp_clause_mask) const;\n   unsigned HOST_WIDE_INT low, high;\n };\n \n@@ -1156,6 +1157,12 @@ omp_clause_mask::operator == (omp_clause_mask b) const\n   return low == b.low && high == b.high;\n }\n \n+inline bool\n+omp_clause_mask::operator != (omp_clause_mask b) const\n+{\n+  return low != b.low || high != b.high;\n+}\n+\n # define OMP_CLAUSE_MASK_1 omp_clause_mask (1)\n #endif\n "}, {"sha": "f001a75cd228dd8a5b271ebc2402e51836e77ccc", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acd15a286e182ee4b3331a35503bcd67a4294331/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acd15a286e182ee4b3331a35503bcd67a4294331/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=acd15a286e182ee4b3331a35503bcd67a4294331", "patch": "@@ -631,7 +631,7 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n     cclauses[i] = NULL;\n   /* Add implicit nowait clause on\n      #pragma omp parallel {for,for simd,sections}.  */\n-  if (mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_THREADS))\n+  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_THREADS)) != 0)\n     switch (code)\n       {\n       case OMP_FOR:\n@@ -691,10 +691,10 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t      OMP_CLAUSE_CHAIN (c) = cclauses[C_OMP_CLAUSE_SPLIT_SIMD];\n \t      cclauses[C_OMP_CLAUSE_SPLIT_SIMD] = c;\n \t    }\n-\t  if (mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_SCHEDULE))\n+\t  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_SCHEDULE)) != 0)\n \t    {\n-\t      if (mask & (OMP_CLAUSE_MASK_1\n-\t\t\t  << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE))\n+\t      if ((mask & (OMP_CLAUSE_MASK_1\n+\t\t\t   << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE)) != 0)\n \t\t{\n \t\t  c = build_omp_clause (OMP_CLAUSE_LOCATION (clauses),\n \t\t\t\t\tOMP_CLAUSE_COLLAPSE);\n@@ -729,19 +729,20 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t   target and simd.  Put it on the outermost of those and\n \t   duplicate on parallel.  */\n \tcase OMP_CLAUSE_FIRSTPRIVATE:\n-\t  if (mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_THREADS))\n+\t  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_THREADS))\n+\t      != 0)\n \t    {\n-\t      if (mask & ((OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_TEAMS)\n-\t\t\t  | (OMP_CLAUSE_MASK_1\n-\t\t\t     << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE)))\n+\t      if ((mask & ((OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_TEAMS)\n+\t\t\t   | (OMP_CLAUSE_MASK_1\n+\t\t\t      << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE))) != 0)\n \t\t{\n \t\t  c = build_omp_clause (OMP_CLAUSE_LOCATION (clauses),\n \t\t\t\t\tOMP_CLAUSE_FIRSTPRIVATE);\n \t\t  OMP_CLAUSE_DECL (c) = OMP_CLAUSE_DECL (clauses);\n \t\t  OMP_CLAUSE_CHAIN (c) = cclauses[C_OMP_CLAUSE_SPLIT_PARALLEL];\n \t\t  cclauses[C_OMP_CLAUSE_SPLIT_PARALLEL] = c;\n-\t\t  if (mask & (OMP_CLAUSE_MASK_1\n-\t\t\t      << PRAGMA_OMP_CLAUSE_NUM_TEAMS))\n+\t\t  if ((mask & (OMP_CLAUSE_MASK_1\n+\t\t\t       << PRAGMA_OMP_CLAUSE_NUM_TEAMS)) != 0)\n \t\t    s = C_OMP_CLAUSE_SPLIT_TEAMS;\n \t\t  else\n \t\t    s = C_OMP_CLAUSE_SPLIT_DISTRIBUTE;\n@@ -751,14 +752,15 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t\t   #pragma omp parallel{, for{, simd}, sections}.  */\n \t\ts = C_OMP_CLAUSE_SPLIT_PARALLEL;\n \t    }\n-\t  else if (mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_TEAMS))\n+\t  else if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_TEAMS))\n+\t\t   != 0)\n \t    {\n \t      /* This must be #pragma omp {,target }teams distribute.  */\n \t      gcc_assert (code == OMP_DISTRIBUTE);\n \t      s = C_OMP_CLAUSE_SPLIT_TEAMS;\n \t    }\n-\t  else if (mask & (OMP_CLAUSE_MASK_1\n-\t\t\t   << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE))\n+\t  else if ((mask & (OMP_CLAUSE_MASK_1\n+\t\t\t    << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE)) != 0)\n \t    {\n \t      /* This must be #pragma omp distribute simd.  */\n \t      gcc_assert (code == OMP_SIMD);\n@@ -777,19 +779,21 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \tcase OMP_CLAUSE_LASTPRIVATE:\n \t  if (code == OMP_FOR || code == OMP_SECTIONS)\n \t    {\n-\t      if (mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_THREADS))\n+\t      if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_THREADS))\n+\t\t  != 0)\n \t\ts = C_OMP_CLAUSE_SPLIT_PARALLEL;\n \t      else\n \t\ts = C_OMP_CLAUSE_SPLIT_FOR;\n \t      break;\n \t    }\n \t  gcc_assert (code == OMP_SIMD);\n-\t  if (mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_SCHEDULE))\n+\t  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_SCHEDULE)) != 0)\n \t    {\n \t      c = build_omp_clause (OMP_CLAUSE_LOCATION (clauses),\n \t\t\t\t    OMP_CLAUSE_LASTPRIVATE);\n \t      OMP_CLAUSE_DECL (c) = OMP_CLAUSE_DECL (clauses);\n-\t      if (mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_THREADS))\n+\t      if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_THREADS))\n+\t\t  != 0)\n \t\ts = C_OMP_CLAUSE_SPLIT_PARALLEL;\n \t      else\n \t\ts = C_OMP_CLAUSE_SPLIT_FOR;\n@@ -806,7 +810,8 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t      s = C_OMP_CLAUSE_SPLIT_TEAMS;\n \t      break;\n \t    }\n-\t  if (mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_TEAMS))\n+\t  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_TEAMS))\n+\t      != 0)\n \t    {\n \t      c = build_omp_clause (OMP_CLAUSE_LOCATION (clauses),\n \t\t\t\t    OMP_CLAUSE_CODE (clauses));\n@@ -837,9 +842,10 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t      OMP_CLAUSE_CHAIN (c) = cclauses[C_OMP_CLAUSE_SPLIT_SIMD];\n \t      cclauses[C_OMP_CLAUSE_SPLIT_SIMD] = c;\n \t    }\n-\t  if (mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_SCHEDULE))\n+\t  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_SCHEDULE)) != 0)\n \t    {\n-\t      if (mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_TEAMS))\n+\t      if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_TEAMS))\n+\t\t  != 0)\n \t\t{\n \t\t  c = build_omp_clause (OMP_CLAUSE_LOCATION (clauses),\n \t\t\t\t\tOMP_CLAUSE_REDUCTION);\n@@ -852,8 +858,8 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t\t  cclauses[C_OMP_CLAUSE_SPLIT_PARALLEL] = c;\n \t\t  s = C_OMP_CLAUSE_SPLIT_TEAMS;\n \t\t}\n-\t      else if (mask & (OMP_CLAUSE_MASK_1\n-\t\t\t       << PRAGMA_OMP_CLAUSE_NUM_THREADS))\n+\t      else if ((mask & (OMP_CLAUSE_MASK_1\n+\t\t\t\t<< PRAGMA_OMP_CLAUSE_NUM_THREADS)) != 0)\n \t\ts = C_OMP_CLAUSE_SPLIT_PARALLEL;\n \t      else\n \t\ts = C_OMP_CLAUSE_SPLIT_FOR;\n@@ -865,7 +871,8 @@ c_omp_split_clauses (location_t loc, enum tree_code code,\n \t  break;\n \tcase OMP_CLAUSE_IF:\n \t  /* FIXME: This is currently being discussed.  */\n-\t  if (mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_THREADS))\n+\t  if ((mask & (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_NUM_THREADS))\n+\t      != 0)\n \t    s = C_OMP_CLAUSE_SPLIT_PARALLEL;\n \t  else\n \t    s = C_OMP_CLAUSE_SPLIT_TARGET;"}]}