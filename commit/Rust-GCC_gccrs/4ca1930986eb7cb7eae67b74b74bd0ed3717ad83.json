{"sha": "4ca1930986eb7cb7eae67b74b74bd0ed3717ad83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNhMTkzMDk4NmViN2NiN2VhZTY3Yjc0Yjc0YmQwZWQzNzE3YWQ4Mw==", "commit": {"author": {"name": "Teresa Johnson", "email": "tejohnson@google.com", "date": "2013-11-18T22:38:51Z"}, "committer": {"name": "Teresa Johnson", "email": "tejohnson@gcc.gnu.org", "date": "2013-11-18T22:38:51Z"}, "message": "This patch fixes an lto profiledbootstrap failure with -freorder-blocks-and-partition enabled.\n\nThis patch fixes an lto profiledbootstrap failure with\n-freorder-blocks-and-partition enabled. Currently compgotos\nis the only pass that goes into cfglayout mode after bb reordering,\nwhich is undesireable (and in the case of -freorder-blocks-and-partition\ncan cause illegal partitioning) because of the optimizations performed\non the cfg when going into cfglayout mode. Moved compgoto before\nbb reordering to avoid these problems.\n\n2013-11-18  Teresa Johnson  <tejohnson@google.com>\n\n\t* gcc/cfgrtl.c (cfg_layout_initialize): Assert if we\n\ttry to go into cfglayout after bb reordering.\n\t* gcc/passes.def: Move compgotos before bb reordering\n\tsince it goes into cfglayout.\n\nFrom-SVN: r204985", "tree": {"sha": "5c71565f2ef787716805387748dca8ac915527bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c71565f2ef787716805387748dca8ac915527bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ca1930986eb7cb7eae67b74b74bd0ed3717ad83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca1930986eb7cb7eae67b74b74bd0ed3717ad83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca1930986eb7cb7eae67b74b74bd0ed3717ad83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca1930986eb7cb7eae67b74b74bd0ed3717ad83/comments", "author": {"login": "teresajohnson", "id": 20446403, "node_id": "MDQ6VXNlcjIwNDQ2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/20446403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teresajohnson", "html_url": "https://github.com/teresajohnson", "followers_url": "https://api.github.com/users/teresajohnson/followers", "following_url": "https://api.github.com/users/teresajohnson/following{/other_user}", "gists_url": "https://api.github.com/users/teresajohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/teresajohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teresajohnson/subscriptions", "organizations_url": "https://api.github.com/users/teresajohnson/orgs", "repos_url": "https://api.github.com/users/teresajohnson/repos", "events_url": "https://api.github.com/users/teresajohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/teresajohnson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38f4f02fd6a83607aada3b3270469143bd9ffc7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f4f02fd6a83607aada3b3270469143bd9ffc7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38f4f02fd6a83607aada3b3270469143bd9ffc7a"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "d49af5073bce001609b830ac3426032a4342fb44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca1930986eb7cb7eae67b74b74bd0ed3717ad83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca1930986eb7cb7eae67b74b74bd0ed3717ad83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ca1930986eb7cb7eae67b74b74bd0ed3717ad83", "patch": "@@ -1,3 +1,10 @@\n+2013-11-18  Teresa Johnson  <tejohnson@google.com>\n+\n+\t* gcc/cfgrtl.c (cfg_layout_initialize): Assert if we\n+\ttry to go into cfglayout after bb reordering.\n+\t* gcc/passes.def: Move compgotos before bb reordering\n+\tsince it goes into cfglayout.\n+\n 2013-11-18  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* cgraphunit.c (ipa_passes): Don't execute all_lto_gen_passes."}, {"sha": "1f99aa1dfff800fbf9ad3232eed9f07238353f60", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca1930986eb7cb7eae67b74b74bd0ed3717ad83/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca1930986eb7cb7eae67b74b74bd0ed3717ad83/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=4ca1930986eb7cb7eae67b74b74bd0ed3717ad83", "patch": "@@ -4204,6 +4204,15 @@ cfg_layout_initialize (unsigned int flags)\n   rtx x;\n   basic_block bb;\n \n+  /* Once bb reordering is complete, cfg layout mode should not be re-entered.\n+     Entering cfg layout mode will perform optimizations on the cfg that\n+     could affect the bb layout negatively or even require fixups. An\n+     example of the latter is if edge forwarding performed when optimizing\n+     the cfg layout required moving a block from the hot to the cold section\n+     under -freorder-blocks-and-partition. This would create an illegal\n+     partitioning unless some manual fixup was performed.  */\n+  gcc_assert (!crtl->bb_reorder_complete);\n+\n   initialize_original_copy_tables ();\n \n   cfg_layout_rtl_register_cfg_hooks ();"}, {"sha": "0aba1d9efef28efd5d8e6b9327e41b7ed2905137", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca1930986eb7cb7eae67b74b74bd0ed3717ad83/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca1930986eb7cb7eae67b74b74bd0ed3717ad83/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=4ca1930986eb7cb7eae67b74b74bd0ed3717ad83", "patch": "@@ -382,6 +382,7 @@ along with GCC; see the file COPYING3.  If not see\n \t  NEXT_PASS (pass_regrename);\n \t  NEXT_PASS (pass_cprop_hardreg);\n \t  NEXT_PASS (pass_fast_rtl_dce);\n+\t  NEXT_PASS (pass_duplicate_computed_gotos);\n \t  NEXT_PASS (pass_reorder_blocks);\n \t  NEXT_PASS (pass_branch_target_load_optimize2);\n \t  NEXT_PASS (pass_leaf_regs);\n@@ -393,7 +394,6 @@ along with GCC; see the file COPYING3.  If not see\n \t      NEXT_PASS (pass_stack_regs_run);\n \t  POP_INSERT_PASSES ()\n \t  NEXT_PASS (pass_compute_alignments);\n-\t  NEXT_PASS (pass_duplicate_computed_gotos);\n \t  NEXT_PASS (pass_variable_tracking);\n \t  NEXT_PASS (pass_free_cfg);\n \t  NEXT_PASS (pass_machine_reorg);"}]}