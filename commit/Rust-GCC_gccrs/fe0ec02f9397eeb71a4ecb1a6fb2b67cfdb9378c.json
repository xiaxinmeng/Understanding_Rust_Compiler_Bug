{"sha": "fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUwZWMwMmY5Mzk3ZWViNzFhNGVjYjFhNmZiMmI2N2NmZGI5Mzc4Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T09:42:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-04T09:42:31Z"}, "message": "[multiple changes]\n\n2011-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aggr.adb, par_sco.adb, sem_type.adb, exp_util.adb, exp_ch9.adb,\n\tprj-nmsc.adb, sem_ch13.adb, exp_strm.adb: Minor reformatting.\n\n2011-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Minor documentation fix for pragma Annotate.\n\n2011-08-04  Yannick Moy  <moy@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute): add check during pre-analysis that\n\t'Result only appears in postcondition of function.\n\n2011-08-04  Thomas Quinot  <quinot@adacore.com>\n\n\t* a-tags.adb (Check_TSD): When raising PROGRAM_ERROR for a duplicated\n\texternal tag, include the value of the external tag in the exception\n\tmessage.\n\nFrom-SVN: r177344", "tree": {"sha": "530ca85c7b786fbb130ac6ee1fa9db7bf616ddc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/530ca85c7b786fbb130ac6ee1fa9db7bf616ddc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/comments", "author": null, "committer": null, "parents": [{"sha": "0180fd267e87d29e79230628d2a3858d89f498ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0180fd267e87d29e79230628d2a3858d89f498ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0180fd267e87d29e79230628d2a3858d89f498ca"}], "stats": {"total": 110, "additions": 84, "deletions": 26}, "files": [{"sha": "ed0bfd7bc076bf20608848e6200ab90753d90b30", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "patch": "@@ -1,3 +1,23 @@\n+2011-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aggr.adb, par_sco.adb, sem_type.adb, exp_util.adb, exp_ch9.adb,\n+\tprj-nmsc.adb, sem_ch13.adb, exp_strm.adb: Minor reformatting.\n+\n+2011-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Minor documentation fix for pragma Annotate.\n+\n+2011-08-04  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): add check during pre-analysis that\n+\t'Result only appears in postcondition of function.\n+\n+2011-08-04  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* a-tags.adb (Check_TSD): When raising PROGRAM_ERROR for a duplicated\n+\texternal tag, include the value of the external tag in the exception\n+\tmessage.\n+\n 2011-08-04  Yannick Moy  <moy@adacore.com>\n \n \t* sem_attr.adb (Result): modify error message for misplaced 'Result"}, {"sha": "7070fa792b805e6de40c0f83e9b754db163591fb", "filename": "gcc/ada/a-tags.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fa-tags.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fa-tags.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.adb?ref=fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "patch": "@@ -310,14 +310,21 @@ package body Ada.Tags is\n    procedure Check_TSD (TSD : Type_Specific_Data_Ptr) is\n       T : Tag;\n \n+      E_Tag_Len : constant Integer := Length (TSD.External_Tag);\n+      E_Tag     : String (1 .. E_Tag_Len);\n+      for E_Tag'Address use TSD.External_Tag.all'Address;\n+      pragma Import (Ada, E_Tag);\n+\n+   --  Start of processing for Check_TSD\n+\n    begin\n       --  Verify that the external tag of this TSD is not registered in the\n       --  runtime hash table.\n \n       T := External_Tag_HTable.Get (To_Address (TSD.External_Tag));\n \n       if T /= null then\n-         raise Program_Error with \"duplicated external tag\";\n+         raise Program_Error with \"duplicated external tag \" & E_Tag;\n       end if;\n    end Check_TSD;\n \n@@ -718,6 +725,8 @@ package body Ada.Tags is\n    -- Length --\n    ------------\n \n+   --  Should this be reimplemented using the strlen GCC builtin???\n+\n    function Length (Str : Cstring_Ptr) return Natural is\n       Len : Integer;\n "}, {"sha": "fa193832a59bf989d1aaf75a842f7ac9050e958a", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "patch": "@@ -949,8 +949,7 @@ package body Exp_Ch9 is\n \n       if Opt.Suppress_Control_Flow_Optimizations then\n          Stmt := Make_Implicit_If_Statement (Cond,\n-                   Condition       =>\n-                     Cond,\n+                   Condition       => Cond,\n                    Then_Statements => New_List (\n                      Make_Simple_Return_Statement (Loc,\n                        New_Occurrence_Of (Standard_True, Loc))),"}, {"sha": "f70ec41eac68e2d6818014571aa861bffede1121", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "patch": "@@ -203,6 +203,7 @@ package body Exp_Strm is\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Make_Defining_Identifier (Loc, Name_V),\n              Object_Definition   => New_Occurrence_Of (Typ, Loc));\n+\n       else\n          Odecl :=\n            Make_Object_Declaration (Loc,\n@@ -270,10 +271,10 @@ package body Exp_Strm is\n       for J in 1 .. Number_Dimensions (Typ) loop\n          Append_To (Stms,\n            Make_Attribute_Reference (Loc,\n-             Prefix =>\n+             Prefix         =>\n                New_Occurrence_Of (Stream_Base_Type (Etype (Indx)), Loc),\n              Attribute_Name => Name_Write,\n-             Expressions => New_List (\n+             Expressions    => New_List (\n                Make_Identifier (Loc, Name_S),\n                Make_Attribute_Reference (Loc,\n                  Prefix         => Make_Identifier (Loc, Name_V),\n@@ -283,10 +284,10 @@ package body Exp_Strm is\n \n          Append_To (Stms,\n            Make_Attribute_Reference (Loc,\n-             Prefix =>\n+             Prefix         =>\n                New_Occurrence_Of (Stream_Base_Type (Etype (Indx)), Loc),\n              Attribute_Name => Name_Write,\n-             Expressions => New_List (\n+             Expressions    => New_List (\n                Make_Identifier (Loc, Name_S),\n                Make_Attribute_Reference (Loc,\n                  Prefix         => Make_Identifier (Loc, Name_V),\n@@ -301,7 +302,7 @@ package body Exp_Strm is\n \n       Append_To (Stms,\n         Make_Attribute_Reference (Loc,\n-          Prefix => New_Occurrence_Of (Typ, Loc),\n+          Prefix         => New_Occurrence_Of (Typ, Loc),\n           Attribute_Name => Name_Write,\n           Expressions => New_List (\n             Make_Identifier (Loc, Name_S),\n@@ -566,13 +567,18 @@ package body Exp_Strm is\n       --  then the representation is unsigned\n \n       elsif not Is_Unsigned_Type (FST)\n+\n+        --  The following set of tests gets repeated many times, we should\n+        --  have an abstraction defined ???\n+\n         and then\n           (Is_Fixed_Point_Type (U_Type)\n              or else\n            Is_Enumeration_Type (U_Type)\n              or else\n            (Is_Signed_Integer_Type (U_Type)\n               and then not Has_Biased_Representation (FST)))\n+\n       then\n          if P_Size <= Standard_Short_Short_Integer_Size then\n             Lib_RE := RE_I_SSI;"}, {"sha": "72831936483ac0a2ee507253e4b1a8a88bff6743", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "patch": "@@ -3888,13 +3888,13 @@ package body Exp_Util is\n                                      N_Selected_Component)\n                then\n                   Ren_Obj := Prefix (Ren_Obj);\n-                  Change  := True;\n+                  Change := True;\n \n                elsif Nkind_In (Ren_Obj, N_Type_Conversion,\n                                         N_Unchecked_Type_Conversion)\n                then\n                   Ren_Obj := Expression (Ren_Obj);\n-                  Change  := True;\n+                  Change := True;\n                end if;\n             end loop;\n \n@@ -3909,8 +3909,7 @@ package body Exp_Util is\n \n       begin\n          --  If a previous invocation of this routine has determined that a\n-         --  list has no renamings, there is no point in repeating the same\n-         --  scan.\n+         --  list has no renamings, then no point in repeating the same scan.\n \n          if not Has_Rens then\n             return False;"}, {"sha": "3a3c86c0d7546bff6b5e4de66c5b2382e0ed3073", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "patch": "@@ -1003,8 +1003,11 @@ All other kinds of arguments are analyzed as expressions, and must be\n unambiguous.\n \n The analyzed pragma is retained in the tree, but not otherwise processed\n-by any part of the GNAT compiler.  This pragma is intended for use by\n-external tools, including ASIS@.\n+by any part of the GNAT compiler, except to generate corresponding note\n+lines in the generated ALI file. For the format of these note lines, see\n+the compiler source file lib-writ.ads. This pragma is intended for use by\n+external tools, including ASIS@. The use of pragma Annotate does not\n+affect the compilation process in any way.\n \n @node Pragma Assert\n @unnumberedsec Pragma Assert"}, {"sha": "f42300ada1fb8a7c7e55610465a4d05a92539e29", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "patch": "@@ -575,7 +575,7 @@ package body Par_SCO is\n             when N_Case_Expression =>\n                return OK; -- ???\n \n-            --  Conditional expression, processed like an IF statement\n+            --  Conditional expression, processed like an if statement\n \n             when N_Conditional_Expression =>\n                declare"}, {"sha": "ba3b683ec04527b0585a5f218c9d088056247ded", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "patch": "@@ -7820,8 +7820,7 @@ package body Prj.Nmsc is\n \n    begin\n       Debug_Output (\"Path_Name_Of file_name=\", Name_Id (File_Name));\n-      Debug_Output (\"Path_Name_Of directory=\",\n-                    Name_Id (Directory));\n+      Debug_Output (\"Path_Name_Of directory=\", Name_Id (Directory));\n       Get_Name_String (File_Name);\n       Result :=\n         Locate_Regular_File"}, {"sha": "e8ce47de5346011719006e9bc30183fe861642ea", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "patch": "@@ -997,6 +997,7 @@ package body Sem_Aggr is\n                   Insert_Actions (N, Freeze_Entity (Typ, N));\n                   exit;\n                end if;\n+\n                Next (Comp);\n             end loop;\n          end;"}, {"sha": "3e653a7335a64a3eeff7bfddfb2b07c011586984", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "patch": "@@ -3990,6 +3990,9 @@ package body Sem_Attr is\n          --  source subprogram to which the postcondition applies. During\n          --  pre-analysis, CS is the scope of the subprogram declaration.\n \n+         Prag : Node_Id;\n+         --  During pre-analysis, Prag is the enclosing pragma node if any\n+\n       begin\n          --  Find enclosing scopes, excluding loops\n \n@@ -4029,6 +4032,23 @@ package body Sem_Attr is\n                Error_Attr;\n             end if;\n \n+            --  Check in postcondition of function\n+\n+            Prag := N;\n+            while not Nkind_In (Prag, N_Pragma, N_Function_Specification,\n+                                N_Subprogram_Body)\n+            loop\n+               Prag := Parent (Prag);\n+            end loop;\n+\n+            if Nkind (Prag) /= N_Pragma\n+              or else Get_Pragma_Id (Prag) /= Pragma_Postcondition\n+            then\n+               Error_Attr\n+                 (\"% attribute can only appear in postcondition of function\",\n+                  P);\n+            end if;\n+\n             --  The attribute reference is a primary. If expressions follow,\n             --  the attribute reference is really an indexable object, so\n             --  rewrite and analyze as an indexed component."}, {"sha": "0e5833351ed68e776db4edcd8ad552540036d085", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "patch": "@@ -4228,10 +4228,10 @@ package body Sem_Ch13 is\n                Arg1 := Get_Pragma_Arg (Arg1);\n                Arg2 := Get_Pragma_Arg (Arg2);\n \n-               --  See if this predicate pragma is for the current type\n-               --  or for its full view. A predicate on a private completion\n-               --  is placed on the partial view beause this is the visible\n-               --  entity that is frozen..\n+               --  See if this predicate pragma is for the current type or for\n+               --  its full view. A predicate on a private completion is placed\n+               --  on the partial view beause this is the visible entity that\n+               --  is frozen.\n \n                if Entity (Arg1) = Typ\n                  or else Full_View (Entity (Arg1)) = Typ"}, {"sha": "91d7a9dd0dfd46e1336321a901584d61d95650b2", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=fe0ec02f9397eeb71a4ecb1a6fb2b67cfdb9378c", "patch": "@@ -1208,7 +1208,7 @@ package body Sem_Type is\n \n       function Operand_Type return Entity_Id;\n       --  Determine type of operand for an equality operation, to apply\n-      --  Ada2005 rules to equality on anonymous access types.\n+      --  Ada 2005 rules to equality on anonymous access types.\n \n       function Standard_Operator return Boolean;\n       --  Check whether subprogram is predefined operator declared in Standard.\n@@ -1287,14 +1287,15 @@ package body Sem_Type is\n \n       function Operand_Type return Entity_Id is\n          Opnd : Node_Id;\n+\n       begin\n          if Nkind (N) = N_Function_Call then\n             Opnd := First_Actual (N);\n          else\n             Opnd := Left_Opnd (N);\n          end if;\n-         return Etype (Opnd);\n \n+         return Etype (Opnd);\n       end Operand_Type;\n \n       ------------------------\n@@ -1927,14 +1928,14 @@ package body Sem_Type is\n             --  may be an operator or a function call.\n \n             elsif (Chars (Nam1) = Name_Op_Eq\n-                  or else\n-                Chars (Nam1) = Name_Op_Ne)\n+                     or else\n+                   Chars (Nam1) = Name_Op_Ne)\n               and then Ada_Version >= Ada_2005\n               and then Etype (User_Subp) = Standard_Boolean\n               and then Ekind (Operand_Type) = E_Anonymous_Access_Type\n               and then\n                 In_Same_List (Parent (Designated_Type (Operand_Type)),\n-                                    Unit_Declaration_Node (User_Subp))\n+                              Unit_Declaration_Node (User_Subp))\n             then\n                if It2.Nam = Predef_Subp then\n                   return It1;\n@@ -2675,6 +2676,7 @@ package body Sem_Type is\n             end if;\n \n             Par := Etype (Full_View (BT2));\n+\n          else\n             Par := Etype (BT2);\n          end if;"}]}