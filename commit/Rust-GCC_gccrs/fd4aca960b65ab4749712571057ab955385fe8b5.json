{"sha": "fd4aca960b65ab4749712571057ab955385fe8b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ0YWNhOTYwYjY1YWI0NzQ5NzEyNTcxMDU3YWI5NTUzODVmZThiNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-10-19T02:13:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-10-19T02:13:37Z"}, "message": "re PR target/24428 (TLS miscompilation on x86_64)\n\n        PR target/24428\n        * config/i386/i386.c (legitimate_constant_p): Check\n        SYMBOL_REF_TLS_MODEL directly.  Don't fallthru to SYMBOL_REF\n        if LABEL_REF.\n        (legitimate_pic_operand_p): Test SYMBOL_REF_TLS_MODEL directly.\n        (legitimate_pic_address_disp_p): Reorg CONST checking to make\n        sure SYMBOL_REF_TLS_MODEL is tested.  Test SYMBOL_REF_TLS_MODEL\n        directly.\n        (print_operand_address): Likewise.\n        * config/i386/predicates.md (x86_64_immediate_operand): Test\n        SYMBOL_REF_TLS_MODEL properly inside CONST.\n        (x86_64_zext_immediate_operand): Likewise.\n        (global_dynamic_symbolic_operand, local_dynamic_symbolic_operand,\n        initial_exec_symbolic_operand, local_exec_symbolic_operand): Remove.\n        * config/i386/i386-protos.h: Remove predicates.md entries.\n\nFrom-SVN: r105592", "tree": {"sha": "4eb72723f1e1fa0265c96e81441ba4127ff0b02d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eb72723f1e1fa0265c96e81441ba4127ff0b02d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd4aca960b65ab4749712571057ab955385fe8b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd4aca960b65ab4749712571057ab955385fe8b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd4aca960b65ab4749712571057ab955385fe8b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd4aca960b65ab4749712571057ab955385fe8b5/comments", "author": null, "committer": null, "parents": [{"sha": "14a814a401be5351d9114bcbf1d0bf59c9c41f30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a814a401be5351d9114bcbf1d0bf59c9c41f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14a814a401be5351d9114bcbf1d0bf59c9c41f30"}], "stats": {"total": 207, "additions": 100, "deletions": 107}, "files": [{"sha": "88c5974f207022c98c685b55b2cdc7552fa7822a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4aca960b65ab4749712571057ab955385fe8b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4aca960b65ab4749712571057ab955385fe8b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd4aca960b65ab4749712571057ab955385fe8b5", "patch": "@@ -1,3 +1,21 @@\n+2006-10-18  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/24428\n+\t* config/i386/i386.c (legitimate_constant_p): Check\n+\tSYMBOL_REF_TLS_MODEL directly.  Don't fallthru to SYMBOL_REF\n+\tif LABEL_REF.\n+\t(legitimate_pic_operand_p): Test SYMBOL_REF_TLS_MODEL directly.\n+\t(legitimate_pic_address_disp_p): Reorg CONST checking to make\n+\tsure SYMBOL_REF_TLS_MODEL is tested.  Test SYMBOL_REF_TLS_MODEL\n+\tdirectly.\n+\t(print_operand_address): Likewise.\n+\t* config/i386/predicates.md (x86_64_immediate_operand): Test\n+\tSYMBOL_REF_TLS_MODEL properly inside CONST.\n+\t(x86_64_zext_immediate_operand): Likewise.\n+\t(global_dynamic_symbolic_operand, local_dynamic_symbolic_operand,\n+\tinitial_exec_symbolic_operand, local_exec_symbolic_operand): Remove.\n+\t* config/i386/i386-protos.h: Remove predicates.md entries.\n+\n 2005-10-18  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* config/i386/winnt-cxx.c (i386_pe_adjust_class_at_definition):"}, {"sha": "df2ba4e8841778ae075ccdb8a99d664073e10fe3", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4aca960b65ab4749712571057ab955385fe8b5/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4aca960b65ab4749712571057ab955385fe8b5/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=fd4aca960b65ab4749712571057ab955385fe8b5", "patch": "@@ -46,53 +46,6 @@ extern int symbolic_reference_mentioned_p (rtx);\n extern bool extended_reg_mentioned_p (rtx);\n extern bool x86_extended_QIreg_mentioned_p (rtx);\n extern bool x86_extended_reg_mentioned_p (rtx);\n-\n-extern int any_fp_register_operand (rtx, enum machine_mode);\n-extern int register_and_not_any_fp_reg_operand (rtx, enum machine_mode);\n-\n-extern int fp_register_operand (rtx, enum machine_mode);\n-extern int register_and_not_fp_reg_operand (rtx, enum machine_mode);\n-\n-extern int x86_64_general_operand (rtx, enum machine_mode);\n-extern int x86_64_szext_general_operand (rtx, enum machine_mode);\n-extern int x86_64_nonmemory_operand (rtx, enum machine_mode);\n-extern int x86_64_szext_nonmemory_operand (rtx, enum machine_mode);\n-extern int x86_64_immediate_operand (rtx, enum machine_mode);\n-extern int x86_64_zext_immediate_operand (rtx, enum machine_mode);\n-extern int symbolic_operand (rtx, enum machine_mode);\n-extern int tls_symbolic_operand (rtx, enum machine_mode);\n-extern int global_dynamic_symbolic_operand (rtx, enum machine_mode);\n-extern int local_dynamic_symbolic_operand (rtx, enum machine_mode);\n-extern int initial_exec_symbolic_operand (rtx, enum machine_mode);\n-extern int local_exec_symbolic_operand (rtx, enum machine_mode);\n-extern int pic_symbolic_operand (rtx, enum machine_mode);\n-extern int call_insn_operand (rtx, enum machine_mode);\n-extern int sibcall_insn_operand (rtx, enum machine_mode);\n-extern int constant_call_address_operand (rtx, enum machine_mode);\n-extern int const0_operand (rtx, enum machine_mode);\n-extern int const1_operand (rtx, enum machine_mode);\n-extern int const248_operand (rtx, enum machine_mode);\n-extern int incdec_operand (rtx, enum machine_mode);\n-extern int reg_no_sp_operand (rtx, enum machine_mode);\n-extern int mmx_reg_operand (rtx, enum machine_mode);\n-extern int general_no_elim_operand (rtx, enum machine_mode);\n-extern int nonmemory_no_elim_operand (rtx, enum machine_mode);\n-extern int q_regs_operand (rtx, enum machine_mode);\n-extern int non_q_regs_operand (rtx, enum machine_mode);\n-extern int sse_comparison_operator (rtx, enum machine_mode);\n-extern int fcmov_comparison_operator (rtx, enum machine_mode);\n-extern int cmp_fp_expander_operand (rtx, enum machine_mode);\n-extern int ix86_comparison_operator (rtx, enum machine_mode);\n-extern int ext_register_operand (rtx, enum machine_mode);\n-extern int binary_fp_operator (rtx, enum machine_mode);\n-extern int mult_operator (rtx, enum machine_mode);\n-extern int div_operator (rtx, enum machine_mode);\n-extern int arith_or_logical_operator (rtx, enum machine_mode);\n-extern int promotable_binary_operator (rtx, enum machine_mode);\n-extern int memory_displacement_operand (rtx, enum machine_mode);\n-extern int cmpsi_operand (rtx, enum machine_mode);\n-extern int long_memory_operand (rtx, enum machine_mode);\n-extern int aligned_operand (rtx, enum machine_mode);\n extern enum machine_mode ix86_cc_mode (enum rtx_code, rtx, rtx);\n \n extern int ix86_expand_movmem (rtx, rtx, rtx, rtx);"}, {"sha": "5fe9e3f0062503283e90d42c821c2cd64f8d14e2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 63, "deletions": 42, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4aca960b65ab4749712571057ab955385fe8b5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4aca960b65ab4749712571057ab955385fe8b5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fd4aca960b65ab4749712571057ab955385fe8b5", "patch": "@@ -5423,21 +5423,27 @@ legitimate_constant_p (rtx x)\n \t    return TARGET_64BIT;\n \t  case UNSPEC_TPOFF:\n \t  case UNSPEC_NTPOFF:\n-\t    return local_exec_symbolic_operand (XVECEXP (x, 0, 0), Pmode);\n+\t    x = XVECEXP (x, 0, 0);\n+\t    return (GET_CODE (x) == SYMBOL_REF\n+\t\t    && SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_EXEC);\n \t  case UNSPEC_DTPOFF:\n-\t    return local_dynamic_symbolic_operand (XVECEXP (x, 0, 0), Pmode);\n+\t    x = XVECEXP (x, 0, 0);\n+\t    return (GET_CODE (x) == SYMBOL_REF\n+\t\t    && SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_DYNAMIC);\n \t  default:\n \t    return false;\n \t  }\n \n       /* We must have drilled down to a symbol.  */\n-      if (!symbolic_operand (x, Pmode))\n+      if (GET_CODE (x) == LABEL_REF)\n+\treturn true;\n+      if (GET_CODE (x) != SYMBOL_REF)\n \treturn false;\n       /* FALLTHRU */\n \n     case SYMBOL_REF:\n       /* TLS symbols are never valid.  */\n-      if (tls_symbolic_operand (x, Pmode))\n+      if (SYMBOL_REF_TLS_MODEL (x))\n \treturn false;\n       break;\n \n@@ -5491,7 +5497,9 @@ legitimate_pic_operand_p (rtx x)\n \t  case UNSPEC_GOTOFF:\n \t    return TARGET_64BIT;\n \t  case UNSPEC_TPOFF:\n-\t    return local_exec_symbolic_operand (XVECEXP (inner, 0, 0), Pmode);\n+\t    x = XVECEXP (inner, 0, 0);\n+\t    return (GET_CODE (x) == SYMBOL_REF\n+\t\t    && SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_EXEC);\n \t  default:\n \t    return false;\n \t  }\n@@ -5518,32 +5526,38 @@ legitimate_pic_address_disp_p (rtx disp)\n      when they are not dynamic symbols.  */\n   if (TARGET_64BIT)\n     {\n-      /* TLS references should always be enclosed in UNSPEC.  */\n-      if (tls_symbolic_operand (disp, GET_MODE (disp)))\n-\treturn 0;\n-      if (GET_CODE (disp) == SYMBOL_REF\n-\t  && !SYMBOL_REF_FAR_ADDR_P (disp)\n-\t  && SYMBOL_REF_LOCAL_P (disp))\n-\treturn 1;\n-      if (GET_CODE (disp) == LABEL_REF)\n-\treturn 1;\n-      if (GET_CODE (disp) == CONST\n-\t  && GET_CODE (XEXP (disp, 0)) == PLUS)\n+      rtx op0 = disp, op1;\n+\n+      switch (GET_CODE (disp))\n \t{\n-\t  rtx op0 = XEXP (XEXP (disp, 0), 0);\n-\t  rtx op1 = XEXP (XEXP (disp, 0), 1);\n+\tcase LABEL_REF:\n+\t  return true;\n+\n+\tcase CONST:\n+\t  if (GET_CODE (XEXP (disp, 0)) != PLUS)\n+\t    break;\n+\t  op0 = XEXP (XEXP (disp, 0), 0);\n+\t  op1 = XEXP (XEXP (disp, 0), 1);\n+\t  if (GET_CODE (op1) != CONST_INT\n+\t      || INTVAL (op1) >= 16*1024*1024\n+\t      || INTVAL (op1) < -16*1024*1024)\n+\t    break;\n+\t  if (GET_CODE (op0) == LABEL_REF)\n+\t    return true;\n+\t  if (GET_CODE (op0) != SYMBOL_REF)\n+\t    break;\n+\t  /* FALLTHRU */\n \n+\tcase SYMBOL_REF:\n \t  /* TLS references should always be enclosed in UNSPEC.  */\n-\t  if (tls_symbolic_operand (op0, GET_MODE (op0)))\n-\t    return 0;\n-\t  if (((GET_CODE (op0) == SYMBOL_REF\n-\t\t&& !SYMBOL_REF_FAR_ADDR_P (op0)\n-\t\t&& SYMBOL_REF_LOCAL_P (op0))\n-\t       || GET_CODE (op0) == LABEL_REF)\n-\t      && GET_CODE (op1) == CONST_INT\n-\t      && INTVAL (op1) < 16*1024*1024\n-\t      && INTVAL (op1) >= -16*1024*1024)\n-\t    return 1;\n+\t  if (SYMBOL_REF_TLS_MODEL (op0))\n+\t    return false;\n+\t  if (!SYMBOL_REF_FAR_ADDR_P (op0) && SYMBOL_REF_LOCAL_P (op0))\n+\t    return true;\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n \t}\n     }\n   if (GET_CODE (disp) != CONST)\n@@ -5600,11 +5614,17 @@ legitimate_pic_address_disp_p (rtx disp)\n     case UNSPEC_INDNTPOFF:\n       if (saw_plus)\n \treturn false;\n-      return initial_exec_symbolic_operand (XVECEXP (disp, 0, 0), Pmode);\n+      disp = XVECEXP (disp, 0, 0);\n+      return (GET_CODE (disp) == SYMBOL_REF\n+\t      && SYMBOL_REF_TLS_MODEL (disp) == TLS_MODEL_INITIAL_EXEC);\n     case UNSPEC_NTPOFF:\n-      return local_exec_symbolic_operand (XVECEXP (disp, 0, 0), Pmode);\n+      disp = XVECEXP (disp, 0, 0);\n+      return (GET_CODE (disp) == SYMBOL_REF\n+\t      && SYMBOL_REF_TLS_MODEL (disp) == TLS_MODEL_LOCAL_EXEC);\n     case UNSPEC_DTPOFF:\n-      return local_dynamic_symbolic_operand (XVECEXP (disp, 0, 0), Pmode);\n+      disp = XVECEXP (disp, 0, 0);\n+      return (GET_CODE (disp) == SYMBOL_REF\n+\t      && SYMBOL_REF_TLS_MODEL (disp) == TLS_MODEL_LOCAL_DYNAMIC);\n     }\n \n   return 0;\n@@ -6856,7 +6876,7 @@ get_some_local_dynamic_name_1 (rtx *px, void *data ATTRIBUTE_UNUSED)\n   rtx x = *px;\n \n   if (GET_CODE (x) == SYMBOL_REF\n-      && local_dynamic_symbolic_operand (x, Pmode))\n+      && SYMBOL_REF_TLS_MODEL (x) == TLS_MODEL_LOCAL_DYNAMIC)\n     {\n       cfun->machine->some_ld_name = XSTR (x, 0);\n       return 1;\n@@ -7329,16 +7349,17 @@ print_operand_address (FILE *file, rtx addr)\n \toutput_addr_const (file, disp);\n \n       /* Use one byte shorter RIP relative addressing for 64bit mode.  */\n-      if (TARGET_64BIT\n-\t  && ((GET_CODE (disp) == SYMBOL_REF\n-\t       && ! tls_symbolic_operand (disp, GET_MODE (disp)))\n-\t      || GET_CODE (disp) == LABEL_REF\n-\t      || (GET_CODE (disp) == CONST\n-\t\t  && GET_CODE (XEXP (disp, 0)) == PLUS\n-\t\t  && (GET_CODE (XEXP (XEXP (disp, 0), 0)) == SYMBOL_REF\n-\t\t      || GET_CODE (XEXP (XEXP (disp, 0), 0)) == LABEL_REF)\n-\t\t  && GET_CODE (XEXP (XEXP (disp, 0), 1)) == CONST_INT)))\n-\tfputs (\"(%rip)\", file);\n+      if (TARGET_64BIT)\n+\t{\n+\t  if (GET_CODE (disp) == CONST\n+\t      && GET_CODE (XEXP (disp, 0)) == PLUS\n+\t      && GET_CODE (XEXP (XEXP (disp, 0), 1)) == CONST_INT)\n+\t    disp = XEXP (XEXP (disp, 0), 0);\n+\t  if (GET_CODE (disp) == LABEL_REF\n+\t      || (GET_CODE (disp) == SYMBOL_REF\n+\t\t  && SYMBOL_REF_TLS_MODEL (disp) == 0))\n+\t    fputs (\"(%rip)\", file);\n+\t}\n     }\n   else\n     {"}, {"sha": "b61d2d25bde8057b2635f1d2e48a8130ff581a35", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4aca960b65ab4749712571057ab955385fe8b5/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4aca960b65ab4749712571057ab955385fe8b5/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=fd4aca960b65ab4749712571057ab955385fe8b5", "patch": "@@ -108,7 +108,7 @@\n \t library.  Don't count TLS SYMBOL_REFs here, since they should fit\n \t only if inside of UNSPEC handled below.  */\n       /* TLS symbols are not constant.  */\n-      if (tls_symbolic_operand (op, Pmode))\n+      if (SYMBOL_REF_TLS_MODEL (op))\n \treturn false;\n       return (ix86_cmodel == CM_SMALL || ix86_cmodel == CM_KERNEL\n \t      || (ix86_cmodel == CM_MEDIUM && !SYMBOL_REF_FAR_ADDR_P (op)));\n@@ -147,6 +147,9 @@\n \t  switch (GET_CODE (op1))\n \t    {\n \t    case SYMBOL_REF:\n+\t      /* TLS symbols are not constant.  */\n+\t      if (SYMBOL_REF_TLS_MODEL (op1))\n+\t\treturn 0;\n \t      /* For CM_SMALL assume that latest object is 16MB before\n \t\t end of 31bits boundary.  We may also accept pretty\n \t\t large negative constants knowing that all objects are\n@@ -225,7 +228,7 @@\n     case SYMBOL_REF:\n       /* For certain code models, the symbolic references are known to fit.  */\n       /* TLS symbols are not constant.  */\n-      if (tls_symbolic_operand (op, Pmode))\n+      if (SYMBOL_REF_TLS_MODEL (op))\n \treturn false;\n       return (ix86_cmodel == CM_SMALL\n \t      || (ix86_cmodel == CM_MEDIUM\n@@ -248,6 +251,9 @@\n \t  switch (GET_CODE (op1))\n \t    {\n \t    case SYMBOL_REF:\n+\t      /* TLS symbols are not constant.  */\n+\t      if (SYMBOL_REF_TLS_MODEL (op1))\n+\t\treturn 0;\n \t      /* For small code model we may accept pretty large positive\n \t\t offsets, since one bit is available for free.  Negative\n \t\t offsets are limited by the size of NULL pointer area\n@@ -456,22 +462,6 @@\n   (and (match_code \"symbol_ref\")\n        (match_test \"SYMBOL_REF_TLS_MODEL (op) != 0\")))\n \n-(define_predicate \"global_dynamic_symbolic_operand\"\n-  (and (match_code \"symbol_ref\")\n-       (match_test \"SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_GLOBAL_DYNAMIC\")))\n-\n-(define_predicate \"local_dynamic_symbolic_operand\"\n-  (and (match_code \"symbol_ref\")\n-       (match_test \"SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_LOCAL_DYNAMIC\")))\n-\n-(define_predicate \"initial_exec_symbolic_operand\"\n-  (and (match_code \"symbol_ref\")\n-       (match_test \"SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_INITIAL_EXEC\")))\n-\n-(define_predicate \"local_exec_symbolic_operand\"\n-  (and (match_code \"symbol_ref\")\n-       (match_test \"SYMBOL_REF_TLS_MODEL (op) == TLS_MODEL_LOCAL_EXEC\")))\n-\n ;; Test for a pc-relative call operand\n (define_predicate \"constant_call_address_operand\"\n   (ior (match_code \"symbol_ref\")"}, {"sha": "53b1245d5096f8cdb7ae09010b9fbb00ff17e1e2", "filename": "gcc/testsuite/gcc.dg/tls/pr24428.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd4aca960b65ab4749712571057ab955385fe8b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr24428.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd4aca960b65ab4749712571057ab955385fe8b5/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr24428.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr24428.c?ref=fd4aca960b65ab4749712571057ab955385fe8b5", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+__thread double thrtest[81];\n+int main ()\n+{\n+  int i;\n+  for (i = 0; i < 81; i++)\n+    thrtest[i] = 1.0;\n+  return 0;\n+}"}]}