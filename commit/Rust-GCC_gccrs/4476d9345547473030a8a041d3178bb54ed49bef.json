{"sha": "4476d9345547473030a8a041d3178bb54ed49bef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ3NmQ5MzQ1NTQ3NDczMDMwYThhMDQxZDMxNzhiYjU0ZWQ0OWJlZg==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2021-03-10T22:20:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-17T14:32:14Z"}, "message": "[Ada] Remove dubious wrapper of a recursive function\n\ngcc/ada/\n\n\t* sem_util.adb (Is_Valid_Renaming): Body moved from its nested\n\troutine.", "tree": {"sha": "d2d3162a3ce7bed0ec2f0b0eb0dbf0432b1f55e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2d3162a3ce7bed0ec2f0b0eb0dbf0432b1f55e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4476d9345547473030a8a041d3178bb54ed49bef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4476d9345547473030a8a041d3178bb54ed49bef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4476d9345547473030a8a041d3178bb54ed49bef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4476d9345547473030a8a041d3178bb54ed49bef/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83a5b1df3da2d6c50efabdbf4767a32e80f0cab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a5b1df3da2d6c50efabdbf4767a32e80f0cab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a5b1df3da2d6c50efabdbf4767a32e80f0cab1"}], "stats": {"total": 94, "additions": 40, "deletions": 54}, "files": [{"sha": "855195dd220123926f9578ccb77381f02c8ccd03", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 40, "deletions": 54, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4476d9345547473030a8a041d3178bb54ed49bef/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4476d9345547473030a8a041d3178bb54ed49bef/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4476d9345547473030a8a041d3178bb54ed49bef", "patch": "@@ -7294,70 +7294,56 @@ package body Sem_Util is\n       -----------------------\n \n       function Is_Valid_Renaming (N : Node_Id) return Boolean is\n-         function Check_Renaming (N : Node_Id) return Boolean;\n-         --  Recursive function used to traverse all the prefixes of N\n-\n-         --------------------\n-         -- Check_Renaming --\n-         --------------------\n-\n-         function Check_Renaming (N : Node_Id) return Boolean is\n-         begin\n-            if Is_Renaming (N)\n-              and then not Check_Renaming (Renamed_Entity (Entity (N)))\n-            then\n-               return False;\n-            end if;\n-\n-            if Nkind (N) = N_Indexed_Component then\n-               declare\n-                  Indx : Node_Id;\n-\n-               begin\n-                  Indx := First (Expressions (N));\n-                  while Present (Indx) loop\n-                     if not Is_OK_Static_Expression (Indx) then\n-                        return False;\n-                     end if;\n-\n-                     Next_Index (Indx);\n-                  end loop;\n-               end;\n-            end if;\n+      begin\n+         if Is_Renaming (N)\n+           and then not Is_Valid_Renaming (Renamed_Entity (Entity (N)))\n+         then\n+            return False;\n+         end if;\n \n-            if Has_Prefix (N) then\n-               declare\n-                  P : constant Node_Id := Prefix (N);\n+         if Nkind (N) = N_Indexed_Component then\n+            declare\n+               Indx : Node_Id;\n \n-               begin\n-                  if Nkind (N) = N_Explicit_Dereference\n-                    and then Is_Variable (P)\n-                  then\n+            begin\n+               Indx := First (Expressions (N));\n+               while Present (Indx) loop\n+                  if not Is_OK_Static_Expression (Indx) then\n                      return False;\n+                  end if;\n \n-                  elsif Is_Entity_Name (P)\n-                    and then Ekind (Entity (P)) = E_Function\n-                  then\n-                     return False;\n+                  Next_Index (Indx);\n+               end loop;\n+            end;\n+         end if;\n \n-                  elsif Nkind (P) = N_Function_Call then\n-                     return False;\n-                  end if;\n+         if Has_Prefix (N) then\n+            declare\n+               P : constant Node_Id := Prefix (N);\n+\n+            begin\n+               if Nkind (N) = N_Explicit_Dereference\n+                 and then Is_Variable (P)\n+               then\n+                  return False;\n \n-                  --  Recursion to continue traversing the prefix of the\n-                  --  renaming expression\n+               elsif Is_Entity_Name (P)\n+                 and then Ekind (Entity (P)) = E_Function\n+               then\n+                  return False;\n \n-                  return Check_Renaming (P);\n-               end;\n-            end if;\n+               elsif Nkind (P) = N_Function_Call then\n+                  return False;\n+               end if;\n \n-            return True;\n-         end Check_Renaming;\n+               --  Recursion to continue traversing the prefix of the\n+               --  renaming expression\n \n-      --  Start of processing for Is_Valid_Renaming\n+               return Is_Valid_Renaming (P);\n+            end;\n+         end if;\n \n-      begin\n-         return Check_Renaming (N);\n+         return True;\n       end Is_Valid_Renaming;\n \n       --  Local variables"}]}