{"sha": "11719d1474c6dbd574867646b7c53f9719abc178", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE3MTlkMTQ3NGM2ZGJkNTc0ODY3NjQ2YjdjNTNmOTcxOWFiYzE3OA==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2019-02-08T12:39:27Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@gcc.gnu.org", "date": "2019-02-08T12:39:27Z"}, "message": "S/390: Introduce jdd constraint\n\nImplementation of section anchors in S/390 back-end added in r266741\nbroke jump labels in S/390 Linux kernel [1].  Currently jump labels\npass global variable addresses to .quad directive in inline assembly\nusing \"X\" constraint.  In the past this used to produce regular symbol\nreferences, however, after r266741 we sometimes get values like\n(plus (reg) (const_int)), where (reg) points to a section anchor.\nStrictly speaking, this is still correct, since \"X\" accepts anything.\nThus, now we need another way to support jump labels.\n\nThe existing \"i\" constraint cannot be used, since with -fPIC it must\nnot accept non-local symbols, however, jump labels do require that,\ne.g. __tracepoint_xdp_exception from kernel proper might be referenced\nfrom kernel modules.\n\nThe existing \"ZL\" constraint cannot be used for the same reason.\n\nThe existing \"b\" constraint cannot be used because of the way\nexpand_asm_stmt works.  It deduces whether the constraint allows\nregs, subregs or mems, and processes asm operands differently based on\nthat.  \"b\" is supposed to accept values like (mem (symbol_ref)), and\nthere appears to be no way to explain to expand_asm_stmt that for \"b\"\nmem's address must not be in a register.\n\nThis patch introduces the new machine-specific constraint named \"jdd\" -\n\"j\" prefix is already used for constants, and \"d\" stands for \"data\".\nIt accepts anything that fits into the data section, whether or not\nthis might require a relocation, that is, anything that passes\nCONSTANT_P check.\n\n[1] https://lkml.org/lkml/2019/1/23/346\n\ngcc/ChangeLog:\n\n2019-02-08  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* config/s390/constraints.md (jdd): New constraint.\n\ngcc/testsuite/ChangeLog:\n\n2019-02-08  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\t* gcc.target/s390/jump-label.c: New test.\n\nFrom-SVN: r268688", "tree": {"sha": "2eda6c5ea5df299062509119d9c47bd770d4d319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2eda6c5ea5df299062509119d9c47bd770d4d319"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11719d1474c6dbd574867646b7c53f9719abc178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11719d1474c6dbd574867646b7c53f9719abc178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11719d1474c6dbd574867646b7c53f9719abc178", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11719d1474c6dbd574867646b7c53f9719abc178/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f5d88d82bcc0d7a483c6872368e66e3961df7ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5d88d82bcc0d7a483c6872368e66e3961df7ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f5d88d82bcc0d7a483c6872368e66e3961df7ff"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "ef22ae29eb7c8f10b4ae0cb5d500b4fdf93f3a17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11719d1474c6dbd574867646b7c53f9719abc178/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11719d1474c6dbd574867646b7c53f9719abc178/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11719d1474c6dbd574867646b7c53f9719abc178", "patch": "@@ -1,3 +1,7 @@\n+2019-02-08  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/constraints.md (jdd): New constraint.\n+\n 2019-02-08  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89229"}, {"sha": "4055cbc7c68124f06f3d40e4ad0d22d55898fd3b", "filename": "gcc/config/s390/constraints.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11719d1474c6dbd574867646b7c53f9719abc178/gcc%2Fconfig%2Fs390%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11719d1474c6dbd574867646b7c53f9719abc178/gcc%2Fconfig%2Fs390%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fconstraints.md?ref=11719d1474c6dbd574867646b7c53f9719abc178", "patch": "@@ -37,6 +37,7 @@\n ;;         jKK: constant vector with all elements having the same value and\n ;;              matching K constraint\n ;;         jm6: An integer operand with the lowest order 6 bits all ones.\n+;;         jdd: A constant operand that fits into the data section.\n ;;    t -- Access registers 36 and 37.\n ;;    v -- Vector registers v0-v31.\n ;;    C -- A signed 8-bit constant (-128..127)\n@@ -567,3 +568,19 @@\n (define_constraint \"ZL\"\n   \"LARL operand when in 64-bit mode, otherwise nothing.\"\n   (match_test \"TARGET_64BIT && larl_operand (op, VOIDmode)\"))\n+\n+;; This constraint must behave like \"i\", in particular, the matching values\n+;; must never be placed into registers or memory by\n+;; cfgexpand.c:expand_asm_stmt.  It could be straightforward to start its name\n+;; with a letter from genpreds.c:const_int_constraints, however it would\n+;; require using (match_code \"const_int\"), which is infeasible.  To achieve the\n+;; same effect, that is, setting maybe_allows_reg and maybe_allows_mem to false\n+;; in genpreds.c:add_constraint, we explicitly exclude reg, subreg and mem\n+;; codes.\n+(define_constraint \"jdd\"\n+  \"A constant operand that fits into the data section.\n+   Usage of this constraint might produce a relocation.\"\n+  (and (not (match_code \"reg\"))\n+       (not (match_code \"subreg\"))\n+       (not (match_code \"mem\"))\n+       (match_test \"CONSTANT_P (op)\")))"}, {"sha": "53ad08a2e58ff088c5ed73bb61e669a213a37b89", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11719d1474c6dbd574867646b7c53f9719abc178/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11719d1474c6dbd574867646b7c53f9719abc178/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11719d1474c6dbd574867646b7c53f9719abc178", "patch": "@@ -1,3 +1,7 @@\n+2019-02-08  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/jump-label.c: New test.\n+\n 2019-02-08  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/89250"}, {"sha": "3de73f6bb6cf92ebcaec1939ba7e9c6ee7cc6728", "filename": "gcc/testsuite/gcc.target/s390/jump-label.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11719d1474c6dbd574867646b7c53f9719abc178/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fjump-label.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11719d1474c6dbd574867646b7c53f9719abc178/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fjump-label.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fjump-label.c?ref=11719d1474c6dbd574867646b7c53f9719abc178", "patch": "@@ -0,0 +1,19 @@\n+/* Test jdd constraint, which is used for linux kernel jump labels.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -fPIC -shared\" } */\n+\n+__attribute__ ((visibility (\"default\"))) extern int i;\n+\n+void f (void)\n+{\n+  asm goto (\".pushsection foo\\n\"\n+#if defined(__s390x__)\n+            \".quad %0-.\\n\"\n+#else\n+            \".long %0-.\\n\"\n+#endif\n+            \".popsection\\n\"\n+            : : \"jdd\" (&i) : : l);\n+l:;\n+}"}]}