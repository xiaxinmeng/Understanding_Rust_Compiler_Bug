{"sha": "106d7d7de857f613209718cae33a2da5a922bf59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA2ZDdkN2RlODU3ZjYxMzIwOTcxOGNhZTMzYTJkYTVhOTIyYmY1OQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-20T19:34:20Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-20T19:34:20Z"}, "message": "(decl of create_definition): Move forward declaration past the definition of struct macrodef.\n\n(decl of create_definition): Move forward declaration\npast the definition of struct macrodef.\n(VMS_strncat): New function.\n\nFrom-SVN: r1915", "tree": {"sha": "f124e5e5b54b8ae5de55fcdf505fce6f455262cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f124e5e5b54b8ae5de55fcdf505fce6f455262cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/106d7d7de857f613209718cae33a2da5a922bf59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106d7d7de857f613209718cae33a2da5a922bf59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/106d7d7de857f613209718cae33a2da5a922bf59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/106d7d7de857f613209718cae33a2da5a922bf59/comments", "author": null, "committer": null, "parents": [{"sha": "ebea352be590cd4d63acd2e68a9c5b3153473021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebea352be590cd4d63acd2e68a9c5b3153473021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebea352be590cd4d63acd2e68a9c5b3153473021"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "4ac4cb6a4af53024a1134520294151e6ec5a77d1", "filename": "gcc/cccp.c", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/106d7d7de857f613209718cae33a2da5a922bf59/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/106d7d7de857f613209718cae33a2da5a922bf59/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=106d7d7de857f613209718cae33a2da5a922bf59", "patch": "@@ -85,9 +85,6 @@ typedef unsigned char U_CHAR;\n #include <fcntl.h>\n #endif /* USG */\n #endif /* not VMS */\n-  \n-extern char *index ();\n-extern char *rindex ();\n \n /* VMS-specific definitions */\n #ifdef VMS\n@@ -102,6 +99,8 @@ extern char *rindex ();\n #define open(fname,mode,prot)\tVMS_open(fname,mode,prot)\n #define fopen(fname,mode)\tVMS_fopen(fname,mode)\n #define freopen(fname,mode,ofile) VMS_freopen(fname,mode,ofile)\n+#define strncat(dst,src,cnt) VMS_strncat(dst,src,cnt)\n+static char * VMS_strncat ();\n static int VMS_read ();\n static int VMS_write ();\n static int VMS_open ();\n@@ -115,6 +114,9 @@ typedef struct { unsigned :16, :16, :16; } vms_ino_t;\n #define BSTRING\t\t\t/* VMS/GCC supplies the bstring routines */\n #endif /* __GNUC__ */\n #endif /* VMS */\n+  \n+extern char *index ();\n+extern char *rindex ();\n \n #ifndef O_RDONLY\n #define O_RDONLY 0\n@@ -299,7 +301,7 @@ static U_CHAR *skip_quoted_string ();\n static U_CHAR *skip_paren_group ();\n \n static char *check_precompiled ();\n-static struct macrodef create_definition ();\n+/* static struct macrodef create_definition ();\t[moved below] */\n static void dump_single_macro ();\n \f\n #ifndef FAILURE_EXIT_CODE\n@@ -595,6 +597,8 @@ struct macrodef\n   int symlen;\n };\n \n+static struct macrodef create_definition ();\n+\n \f\n /* Structure allocated for every #define.  For a simple replacement\n    such as\n@@ -8867,4 +8871,23 @@ open (fname, flags, prot)\n   return open (fname, flags, prot, \"mbc=16\", \"deq=64\", \"fop=tef\");\n }\n \n+/* Avoid run-time library bug, where copying M out of N+M characters with\n+   N >= 65535 results in VAXCRTL's strncat falling into an infinite loop.\n+   gcc-cpp exercises this particular bug.  */\n+\n+static char *\n+strncat (dst, src, cnt)\n+     char *dst;\n+     const char *src;\n+     unsigned cnt;\n+{\n+  register char *d = dst, *s = (char *) src;\n+  register int n = cnt;\t/* convert to _signed_ type */\n+\n+  while (*d) d++;\t/* advance to end */\n+  while (--n >= 0)\n+    if (!(*d++ = *s++)) break;\n+  if (n < 0) *d = '\\0';\n+  return dst;\n+}\n #endif /* VMS */"}]}