{"sha": "1af5627c40801eb1715b9ac1eadff50d1de46288", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmNTYyN2M0MDgwMWViMTcxNWI5YWMxZWFkZmY1MGQxZGU0NjI4OA==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-05-14T19:29:33Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-05-14T19:29:33Z"}, "message": "re PR fortran/31725 ([4.1 only] substring bound evaluated multiple times: wrong code for string(function():) = 'X')\n\n\tPR fortran/31725\n\n\t* trans-expr.c (gfc_conv_substring): Evaluate substring bounds\n\tonly once.\n\n\t* gfortran.dg/substr_4.f: New test.\n\nFrom-SVN: r124720", "tree": {"sha": "881664a2a668dabf5b889bcf482119a96600fb05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/881664a2a668dabf5b889bcf482119a96600fb05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1af5627c40801eb1715b9ac1eadff50d1de46288", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af5627c40801eb1715b9ac1eadff50d1de46288", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af5627c40801eb1715b9ac1eadff50d1de46288", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af5627c40801eb1715b9ac1eadff50d1de46288/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c40feebdbb2bf7edd0dc43709ea47de67130a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c40feebdbb2bf7edd0dc43709ea47de67130a59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c40feebdbb2bf7edd0dc43709ea47de67130a59"}], "stats": {"total": 89, "additions": 88, "deletions": 1}, "files": [{"sha": "87947c269233df8091a6fdb0e99254194fbfabce", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af5627c40801eb1715b9ac1eadff50d1de46288/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af5627c40801eb1715b9ac1eadff50d1de46288/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1af5627c40801eb1715b9ac1eadff50d1de46288", "patch": "@@ -1,3 +1,9 @@\n+2007-05-14  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31725\n+\t* trans-expr.c (gfc_conv_substring): Evaluate substring bounds\n+\tonly once.\n+\n 2007-05-14  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* f95-lang.c (LANG_HOOKS_UNSIGNED_TYPE): Remove."}, {"sha": "34be30c19a179dce739f8db44023cf871041b1f9", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af5627c40801eb1715b9ac1eadff50d1de46288/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af5627c40801eb1715b9ac1eadff50d1de46288/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=1af5627c40801eb1715b9ac1eadff50d1de46288", "patch": "@@ -261,6 +261,10 @@ gfc_conv_substring (gfc_se * se, gfc_ref * ref, int kind,\n     gfc_conv_string_parameter (se);\n   else\n     {\n+      /* Avoid multiple evaluation of substring start.  */\n+      if (!CONSTANT_CLASS_P (start.expr) && !DECL_P (start.expr))\n+\tstart.expr = gfc_evaluate_now (start.expr, &se->pre);\n+\n       /* Change the start of the string.  */\n       if (TYPE_STRING_FLAG (TREE_TYPE (se->expr)))\n \ttmp = se->expr;\n@@ -279,6 +283,9 @@ gfc_conv_substring (gfc_se * se, gfc_ref * ref, int kind,\n       gfc_conv_expr_type (&end, ref->u.ss.end, gfc_charlen_type_node);\n       gfc_add_block_to_block (&se->pre, &end.pre);\n     }\n+  if (!CONSTANT_CLASS_P (end.expr) && !DECL_P (end.expr))\n+    end.expr = gfc_evaluate_now (end.expr, &se->pre);\n+\n   if (flag_bounds_check)\n     {\n       tree nonempty = fold_build2 (LE_EXPR, boolean_type_node,"}, {"sha": "ddb8c1f348fdb9fc8a11d2d54f2c5ec6bf0807b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af5627c40801eb1715b9ac1eadff50d1de46288/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af5627c40801eb1715b9ac1eadff50d1de46288/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1af5627c40801eb1715b9ac1eadff50d1de46288", "patch": "@@ -1,11 +1,16 @@\n+2007-05-14  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/31725\n+\t* gfortran.dg/substr_4.f: New test.\n+\n 2007-05-14  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* gcc.target/m68k/interrupt_thread-1.c,\n \tgcc.target/m68k/interrupt_thread-2.c,\n \tgcc.target/m68k/interrupt_thread-3.c: New.\n \t* gcc.target/m68k/m68k.exp: Accept fido.\n \n-2007-05-13  Dominique d'Humi\u00e8res  <dominiq@lps.ens.fr>\n+2007-05-13  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \t* alloc_comp_basics_1.f90: Fix dg directive.\n \t* altreturn_3.f90: Likewise."}, {"sha": "fadd5b32d2f4bc78b94f24c4713fb122db66a57d", "filename": "gcc/testsuite/gfortran.dg/substr_4.f", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af5627c40801eb1715b9ac1eadff50d1de46288/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubstr_4.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af5627c40801eb1715b9ac1eadff50d1de46288/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubstr_4.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubstr_4.f?ref=1af5627c40801eb1715b9ac1eadff50d1de46288", "patch": "@@ -0,0 +1,69 @@\n+! { dg-do run }\n+      subroutine test_lower\n+      implicit none\n+      character(3), dimension(3) :: zsymel,zsymelr\n+      common /xx/ zsymel, zsymelr\n+      integer :: znsymelr\n+      zsymel = (/ 'X', 'Y', ' ' /)\n+      zsymelr= (/ 'X', 'Y', ' ' /)\n+      znsymelr=2\n+      call check_zsymel(zsymel,zsymelr,znsymelr)\n+\n+      contains\n+\n+      subroutine check_zsymel(zsymel,zsymelr,znsymelr)\n+        implicit none\n+        integer znsymelr, isym\n+        character(*) zsymel(*),zsymelr(*)\n+        character(len=80) buf\n+        zsymel(3)(lenstr(zsymel(3))+1:)='X'\n+        write (buf,10) (trim(zsymelr(isym)),isym=1,znsymelr)\n+10      format(3(a,:,','))\n+        if (trim(buf) /= 'X,Y') call abort\n+      end subroutine check_zsymel\n+\n+      function lenstr(s)\n+        character(len=*),intent(in) :: s\n+        integer :: lenstr\n+        if (len_trim(s) /= 0) call abort\n+        lenstr = len_trim(s)\n+      end function lenstr\n+\n+      end subroutine test_lower\n+\n+      subroutine test_upper\n+      implicit none\n+      character(3), dimension(3) :: zsymel,zsymelr\n+      common /xx/ zsymel, zsymelr\n+      integer :: znsymelr\n+      zsymel = (/ 'X', 'Y', ' ' /)\n+      zsymelr= (/ 'X', 'Y', ' ' /)\n+      znsymelr=2\n+      call check_zsymel(zsymel,zsymelr,znsymelr)\n+\n+      contains\n+\n+      subroutine check_zsymel(zsymel,zsymelr,znsymelr)\n+        implicit none\n+        integer znsymelr, isym\n+        character(*) zsymel(*),zsymelr(*)\n+        character(len=80) buf\n+        zsymel(3)(:lenstr(zsymel(3))+1)='X'\n+        write (buf,20) (trim(zsymelr(isym)),isym=1,znsymelr)\n+20      format(3(a,:,','))\n+        if (trim(buf) /= 'X,Y') call abort\n+      end subroutine check_zsymel\n+\n+      function lenstr(s)\n+        character(len=*),intent(in) :: s\n+        integer :: lenstr\n+        if (len_trim(s) /= 0) call abort\n+        lenstr = len_trim(s)\n+      end function lenstr\n+\n+      end subroutine test_upper\n+\n+      program test\n+        call test_lower\n+        call test_upper\n+      end program test"}]}