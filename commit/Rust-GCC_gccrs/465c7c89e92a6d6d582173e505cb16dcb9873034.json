{"sha": "465c7c89e92a6d6d582173e505cb16dcb9873034", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY1YzdjODllOTJhNmQ2ZDU4MjE3M2U1MDVjYjE2ZGNiOTg3MzAzNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-26T13:01:48Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-28T11:06:44Z"}, "message": "simplify-rtx: Extend (truncate (*extract ...)) fold [PR87763]\n\nIn the gcc.target/aarch64/lsl_asr_sbfiz.c part of this PR, we have:\n\nFailed to match this instruction:\n(set (reg:SI 95)\n    (ashift:SI (subreg:SI (sign_extract:DI (subreg:DI (reg:SI 97) 0)\n                (const_int 3 [0x3])\n                (const_int 0 [0])) 0)\n        (const_int 19 [0x13])))\n\nIf we perform the natural simplification to:\n\n(set (reg:SI 95)\n    (ashift:SI (sign_extract:SI (reg:SI 97)\n                (const_int 3 [0x3])\n                (const_int 0 [0])) 0)\n        (const_int 19 [0x13])))\n\nthen the pattern matches.  And it turns out that we do have a\nsimplification like that already, but it would only kick in for\nextractions from a reg, not a subreg.  E.g.:\n\n(set (reg:SI 95)\n    (ashift:SI (subreg:SI (sign_extract:DI (reg:DI X)\n                (const_int 3 [0x3])\n                (const_int 0 [0])) 0)\n        (const_int 19 [0x13])))\n\nwould simplify to:\n\n(set (reg:SI 95)\n    (ashift:SI (sign_extract:SI (subreg:SI (reg:DI X) 0)\n                (const_int 3 [0x3])\n                (const_int 0 [0])) 0)\n        (const_int 19 [0x13])))\n\nIMO the subreg case is even more obviously a simplification\nthan the bare reg case, since the net effect is to remove\neither one or two subregs, rather than simply change the\nposition of a subreg/truncation.\n\nHowever, doing that regressed gcc.dg/tree-ssa/pr64910-2.c\nfor -m32 on x86_64-linux-gnu, because we could then simplify\na :HI zero_extract to a :QI one.  The associated *testqi_ext_3\npattern did already seem to want to handle QImode extractions:\n\n  \"ix86_match_ccmode (insn, CCNOmode)\n   && ((TARGET_64BIT && GET_MODE (operands[2]) == DImode)\n       || GET_MODE (operands[2]) == SImode\n       || GET_MODE (operands[2]) == HImode\n       || GET_MODE (operands[2]) == QImode)\n\nbut I'm not sure how often the QI case would trigger in practice,\nsince the zero_extract mode was restricted to HI and above.  I checked\nthe other x86 patterns and couldn't see any other instances of this.\n\n2020-01-28  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR rtl-optimization/87763\n\t* simplify-rtx.c (simplify_truncation): Extend sign/zero_extract\n\tsimplification to handle subregs as well as bare regs.\n\t* config/i386/i386.md (*testqi_ext_3): Match QI extracts too.", "tree": {"sha": "59e696d6fde95a1a5dcef26ae64c08d625a58e93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59e696d6fde95a1a5dcef26ae64c08d625a58e93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/465c7c89e92a6d6d582173e505cb16dcb9873034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/465c7c89e92a6d6d582173e505cb16dcb9873034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/465c7c89e92a6d6d582173e505cb16dcb9873034", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/465c7c89e92a6d6d582173e505cb16dcb9873034/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e26ff7391c54c6d30760aea427b6bc2bdb46124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e26ff7391c54c6d30760aea427b6bc2bdb46124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e26ff7391c54c6d30760aea427b6bc2bdb46124"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "9fc93c918f508911bd95f8654b9a1deee46690ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/465c7c89e92a6d6d582173e505cb16dcb9873034/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/465c7c89e92a6d6d582173e505cb16dcb9873034/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=465c7c89e92a6d6d582173e505cb16dcb9873034", "patch": "@@ -1,3 +1,10 @@\n+2020-01-28  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/87763\n+\t* simplify-rtx.c (simplify_truncation): Extend sign/zero_extract\n+\tsimplification to handle subregs as well as bare regs.\n+\t* config/i386/i386.md (*testqi_ext_3): Match QI extracts too.\n+\n 2020-01-28  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-loop.c (vectorizable_reduction): Fail gracefully"}, {"sha": "a125ab350bb2698517cfe9744a13bc75c3470e98", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/465c7c89e92a6d6d582173e505cb16dcb9873034/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/465c7c89e92a6d6d582173e505cb16dcb9873034/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=465c7c89e92a6d6d582173e505cb16dcb9873034", "patch": "@@ -8927,7 +8927,7 @@\n (define_insn_and_split \"*testqi_ext_3\"\n   [(set (match_operand 0 \"flags_reg_operand\")\n         (match_operator 1 \"compare_operator\"\n-\t  [(zero_extract:SWI248\n+\t  [(zero_extract:SWI\n \t     (match_operand 2 \"nonimmediate_operand\" \"rm\")\n \t     (match_operand 3 \"const_int_operand\" \"n\")\n \t     (match_operand 4 \"const_int_operand\" \"n\"))"}, {"sha": "db4f9339c157b1d032a25677d1af08aab9c15749", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/465c7c89e92a6d6d582173e505cb16dcb9873034/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/465c7c89e92a6d6d582173e505cb16dcb9873034/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=465c7c89e92a6d6d582173e505cb16dcb9873034", "patch": "@@ -736,7 +736,9 @@ simplify_truncation (machine_mode mode, rtx op,\n      (*_extract:M1 (truncate:M1 (reg:M2)) (len) (pos')) if possible without\n      changing len.  */\n   if ((GET_CODE (op) == ZERO_EXTRACT || GET_CODE (op) == SIGN_EXTRACT)\n-      && REG_P (XEXP (op, 0))\n+      && (REG_P (XEXP (op, 0))\n+\t  || (SUBREG_P (XEXP (op, 0))\n+\t      && REG_P (SUBREG_REG (XEXP (op, 0)))))\n       && GET_MODE (XEXP (op, 0)) == GET_MODE (op)\n       && CONST_INT_P (XEXP (op, 1))\n       && CONST_INT_P (XEXP (op, 2)))"}]}