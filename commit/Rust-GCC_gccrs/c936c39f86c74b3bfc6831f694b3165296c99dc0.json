{"sha": "c936c39f86c74b3bfc6831f694b3165296c99dc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkzNmMzOWY4NmM3NGIzYmZjNjgzMWY2OTRiMzE2NTI5NmM5OWRjMA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-26T13:11:42Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-28T11:13:05Z"}, "message": "d: fix ICE at convert_expr(tree_node*, Type*, Type*) (PR101490)\n\nBoth the front-end and code generator had a modulo by zero bug when testing if\na conversion from a static array to dynamic array was valid.\n\n\tPR d/101490\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 27e388b4c.\n\t* d-codegen.cc (build_array_index): Handle void arrays same as byte.\n\t* d-convert.cc (convert_expr): Handle converting to zero-sized arrays.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/pr101490.d: New test.", "tree": {"sha": "1ec07b3f72bc318fa0a2e16dbdac4b544c659154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ec07b3f72bc318fa0a2e16dbdac4b544c659154"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c936c39f86c74b3bfc6831f694b3165296c99dc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c936c39f86c74b3bfc6831f694b3165296c99dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c936c39f86c74b3bfc6831f694b3165296c99dc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c936c39f86c74b3bfc6831f694b3165296c99dc0/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a2306ffe79df89389cc850ce85c586d0f1c8264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a2306ffe79df89389cc850ce85c586d0f1c8264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a2306ffe79df89389cc850ce85c586d0f1c8264"}], "stats": {"total": 83, "additions": 57, "deletions": 26}, "files": [{"sha": "f35de90b54c2a1ff8c5ad3063ff3b59a47ae9842", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c936c39f86c74b3bfc6831f694b3165296c99dc0/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c936c39f86c74b3bfc6831f694b3165296c99dc0/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=c936c39f86c74b3bfc6831f694b3165296c99dc0", "patch": "@@ -1639,21 +1639,9 @@ build_array_index (tree ptr, tree index)\n   /* Array element size.  */\n   tree size_exp = size_in_bytes (target_type);\n \n-  if (integer_zerop (size_exp))\n+  if (integer_zerop (size_exp) || integer_onep (size_exp))\n     {\n-      /* Test for array of void.  */\n-      if (TYPE_MODE (target_type) == TYPE_MODE (void_type_node))\n-\tindex = fold_convert (type, index);\n-      else\n-\t{\n-\t  /* Should catch this earlier.  */\n-\t  error (\"invalid use of incomplete type %qD\", TYPE_NAME (target_type));\n-\t  ptr_type = error_mark_node;\n-\t}\n-    }\n-  else if (integer_onep (size_exp))\n-    {\n-      /* Array of bytes -- No need to multiply.  */\n+      /* Array of void or bytes -- No need to multiply.  */\n       index = fold_convert (type, index);\n     }\n   else"}, {"sha": "237c084acf51b29094dab7ee30ee06ec225a3f17", "filename": "gcc/d/d-convert.cc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c936c39f86c74b3bfc6831f694b3165296c99dc0/gcc%2Fd%2Fd-convert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c936c39f86c74b3bfc6831f694b3165296c99dc0/gcc%2Fd%2Fd-convert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-convert.cc?ref=c936c39f86c74b3bfc6831f694b3165296c99dc0", "patch": "@@ -473,13 +473,18 @@ convert_expr (tree exp, Type *etype, Type *totype)\n \n \t  tree ptrtype = build_ctype (tbtype->nextOf ()->pointerTo ());\n \n-\t  if ((dim * esize) % tsize != 0)\n+\t  if (esize != tsize)\n \t    {\n-\t      error (\"cannot cast %qs to %qs since sizes do not line up\",\n-\t\t     etype->toChars (), totype->toChars ());\n-\t      return error_mark_node;\n+\t      /* Array element sizes do not match, so we must adjust the\n+\t\t dimensions.  */\n+\t      if (tsize == 0 || (dim * esize) % tsize != 0)\n+\t\t{\n+\t\t  error (\"cannot cast %qs to %qs since sizes do not line up\",\n+\t\t\t etype->toChars (), totype->toChars ());\n+\t\t  return error_mark_node;\n+\t\t}\n+\t      dim = (dim * esize) / tsize;\n \t    }\n-\t  dim = (dim * esize) / tsize;\n \n \t  /* Assumes casting to dynamic array of same type or void.  */\n \t  return d_array_value (build_ctype (totype), size_int (dim),"}, {"sha": "2568993fbf48a0f89cb0e864c196fb3bf4fd447d", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c936c39f86c74b3bfc6831f694b3165296c99dc0/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c936c39f86c74b3bfc6831f694b3165296c99dc0/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=c936c39f86c74b3bfc6831f694b3165296c99dc0", "patch": "@@ -1,4 +1,4 @@\n-f8c1ca928360dd8c9f2fbb5771e2a5e398878ca0\n+27e388b4c4d292cac25811496aaf79341c05c940\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "d84ab7ffc21a2a6e90268e6b6ada72127c0b77ce", "filename": "gcc/d/dmd/dcast.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c936c39f86c74b3bfc6831f694b3165296c99dc0/gcc%2Fd%2Fdmd%2Fdcast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c936c39f86c74b3bfc6831f694b3165296c99dc0/gcc%2Fd%2Fdmd%2Fdcast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdcast.c?ref=c936c39f86c74b3bfc6831f694b3165296c99dc0", "patch": "@@ -1496,13 +1496,16 @@ Expression *castTo(Expression *e, Scope *sc, Type *t)\n                     // cast(U[])sa; // ==> cast(U[])sa[];\n                     d_uns64 fsize = t1b->nextOf()->size();\n                     d_uns64 tsize = tob->nextOf()->size();\n-                    if ((((TypeSArray *)t1b)->dim->toInteger() * fsize) % tsize != 0)\n+                    if (fsize != tsize)\n                     {\n-                        // copied from sarray_toDarray() in e2ir.c\n-                        e->error(\"cannot cast expression %s of type %s to %s since sizes don't line up\",\n-                            e->toChars(), e->type->toChars(), t->toChars());\n-                        result = new ErrorExp();\n-                        return;\n+                        dinteger_t dim = ((TypeSArray *)t1b)->dim->toInteger();\n+                        if (tsize == 0 || (dim * fsize) % tsize != 0)\n+                        {\n+                            e->error(\"cannot cast expression `%s` of type `%s` to `%s` since sizes don't line up\",\n+                                     e->toChars(), e->type->toChars(), t->toChars());\n+                            result = new ErrorExp();\n+                            return;\n+                        }\n                     }\n                     goto Lok;\n                 }"}, {"sha": "6929d406863d161a070fc59f8ca128b8414f0db2", "filename": "gcc/testsuite/gdc.dg/pr101490.d", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c936c39f86c74b3bfc6831f694b3165296c99dc0/gcc%2Ftestsuite%2Fgdc.dg%2Fpr101490.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c936c39f86c74b3bfc6831f694b3165296c99dc0/gcc%2Ftestsuite%2Fgdc.dg%2Fpr101490.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr101490.d?ref=c936c39f86c74b3bfc6831f694b3165296c99dc0", "patch": "@@ -0,0 +1,21 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101490\n+// { dg-do compile }\n+\n+struct S101490\n+{\n+    int[0] arr;\n+}\n+\n+void main()\n+{\n+    S101490* t;\n+    auto a = cast(typeof(t.arr)[0])t.arr;\n+    write(a);\n+}\n+\n+void write(S)(S args)\n+{\n+    foreach (arg; args)\n+    {\n+    }\n+}"}, {"sha": "e0fd5b192258839cc50a7193eb87fdc5f5b5019d", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail22144.d", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c936c39f86c74b3bfc6831f694b3165296c99dc0/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22144.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c936c39f86c74b3bfc6831f694b3165296c99dc0/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22144.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail22144.d?ref=c936c39f86c74b3bfc6831f694b3165296c99dc0", "patch": "@@ -0,0 +1,14 @@\n+// https://issues.dlang.org/show_bug.cgi?id=22144\n+/* TEST_OUTPUT\n+---\n+fail_compilation/fail22144.d(12): Error: cannot cast expression `zarray1` of type `int[0]` to `int[0][]` since sizes don't line up\n+---\n+*/\n+void main()\n+{\n+  int[0] zarray1;\n+  int[0][0] zarray2;\n+\n+  auto zslice1 = cast(int[0][])zarray1; // ICE -> Error\n+  auto zslice2 = cast(int[0][])zarray2; // ICE -> OK\n+}"}]}