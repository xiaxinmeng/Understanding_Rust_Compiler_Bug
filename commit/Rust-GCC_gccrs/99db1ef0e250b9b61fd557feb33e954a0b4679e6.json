{"sha": "99db1ef0e250b9b61fd557feb33e954a0b4679e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlkYjFlZjBlMjUwYjliNjFmZDU1N2ZlYjMzZTk1NGEwYjQ2NzllNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-09-24T16:21:43Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-09-24T16:21:43Z"}, "message": "c-common.c (handle_mode_attribute): When not modifying in place, create subtypes for enumerations.\n\n        * c-common.c (handle_mode_attribute): When not modifying in place,\n        create subtypes for enumerations.\n        (sync_resolve_return): Use TYPE_MAIN_VARIANT.\n        * gimplify.c (create_tmp_from_val): Likewise.\n\nFrom-SVN: r104603", "tree": {"sha": "79c051c1fe84984303e562b69bfcdedba9bf5026", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79c051c1fe84984303e562b69bfcdedba9bf5026"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99db1ef0e250b9b61fd557feb33e954a0b4679e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99db1ef0e250b9b61fd557feb33e954a0b4679e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99db1ef0e250b9b61fd557feb33e954a0b4679e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99db1ef0e250b9b61fd557feb33e954a0b4679e6/comments", "author": null, "committer": null, "parents": [{"sha": "e347ff9e3d0cfd13aa97f51d99dc08b280c94d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e347ff9e3d0cfd13aa97f51d99dc08b280c94d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e347ff9e3d0cfd13aa97f51d99dc08b280c94d7d"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "25938ff74b2c437d5b0d226c3706c527713784d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99db1ef0e250b9b61fd557feb33e954a0b4679e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99db1ef0e250b9b61fd557feb33e954a0b4679e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99db1ef0e250b9b61fd557feb33e954a0b4679e6", "patch": "@@ -1,3 +1,10 @@\n+2005-09-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* c-common.c (handle_mode_attribute): When not modifying in place,\n+\tcreate subtypes for enumerations.\n+\t(sync_resolve_return): Use TYPE_MAIN_VARIANT.\n+\t* gimplify.c (create_tmp_from_val): Likewise.\n+\n 2005-09-24  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/i386/i386.md (*tls_global_dynamic_64,"}, {"sha": "fe4bd8c48647e76e93957038f6058895a6011f60", "filename": "gcc/c-common.c", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99db1ef0e250b9b61fd557feb33e954a0b4679e6/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99db1ef0e250b9b61fd557feb33e954a0b4679e6/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=99db1ef0e250b9b61fd557feb33e954a0b4679e6", "patch": "@@ -4520,21 +4520,24 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \t      return NULL_TREE;\n \t    }\n \n-\t  if (!(flags & (int) ATTR_FLAG_TYPE_IN_PLACE))\n-\t    type = build_variant_type_copy (type);\n-\n-\t  /* We cannot use layout_type here, because that will attempt\n-\t     to re-layout all variants, corrupting our original.  */\n-\t  TYPE_PRECISION (type) = TYPE_PRECISION (typefm);\n-\t  TYPE_MIN_VALUE (type) = TYPE_MIN_VALUE (typefm);\n-\t  TYPE_MAX_VALUE (type) = TYPE_MAX_VALUE (typefm);\n-\t  TYPE_SIZE (type) = TYPE_SIZE (typefm);\n-\t  TYPE_SIZE_UNIT (type) = TYPE_SIZE_UNIT (typefm);\n-\t  TYPE_MODE (type) = TYPE_MODE (typefm);\n-\t  if (!TYPE_USER_ALIGN (type))\n-\t    TYPE_ALIGN (type) = TYPE_ALIGN (typefm);\n-\n-\t  typefm = type;\n+\t  if (flags & ATTR_FLAG_TYPE_IN_PLACE)\n+\t    {\n+\t      TYPE_PRECISION (type) = TYPE_PRECISION (typefm);\n+\t      typefm = type;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* We cannot build a type variant, as there's code that assumes\n+\t\t that TYPE_MAIN_VARIANT has the same mode.  This includes the\n+\t\t debug generators.  Instead, create a subrange type.  This\n+\t\t results in all of the enumeral values being emitted only once\n+\t\t in the original, and the subtype gets them by reference.  */\n+\t      if (TYPE_UNSIGNED (type))\n+\t\ttypefm = make_unsigned_type (TYPE_PRECISION (typefm));\n+\t      else\n+\t\ttypefm = make_signed_type (TYPE_PRECISION (typefm));\n+\t      TREE_TYPE (typefm) = type;\n+\t    }\n \t}\n       else if (VECTOR_MODE_P (mode)\n \t       ? TREE_CODE (type) != TREE_CODE (TREE_TYPE (typefm))\n@@ -6119,6 +6122,7 @@ static tree\n sync_resolve_return (tree params, tree result)\n {\n   tree ptype = TREE_TYPE (TREE_TYPE (TREE_VALUE (params)));\n+  ptype = TYPE_MAIN_VARIANT (ptype);\n   return convert (ptype, result);\n }\n "}, {"sha": "42b8740d08330b910adfb545be5853152b82636d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99db1ef0e250b9b61fd557feb33e954a0b4679e6/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99db1ef0e250b9b61fd557feb33e954a0b4679e6/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=99db1ef0e250b9b61fd557feb33e954a0b4679e6", "patch": "@@ -404,7 +404,7 @@ get_name (tree t)\n static inline tree\n create_tmp_from_val (tree val)\n {\n-  return create_tmp_var (TREE_TYPE (val), get_name (val));\n+  return create_tmp_var (TYPE_MAIN_VARIANT (TREE_TYPE (val)), get_name (val));\n }\n \n /* Create a temporary to hold the value of VAL.  If IS_FORMAL, try to reuse"}]}