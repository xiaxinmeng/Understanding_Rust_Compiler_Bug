{"sha": "ca5667e867252db3c8642ee90f55427149cd92b6", "node_id": "C_kwDOANBUbNoAKGNhNTY2N2U4NjcyNTJkYjNjODY0MmVlOTBmNTU0MjcxNDljZDkyYjY", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-11-29T21:16:12Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-11-29T21:17:20Z"}, "message": "i386: Fix and improve movhi_internal and movhf_internal some more.\n\nAn (*v,C) alternative can be added to movhi_internal to directly load\nHImode constant 0 to xmm register. Also, V4SFmode moves can be used\nfor xmm->xmm moves instead of TImode moves when optimizing for size.\nFix invalid %vpinsrw insn template, which needs to duplicate %xmm\nregister for AVX targets.\n\nOptimize GPR moves in movhf_internal in the same way as in movhi_internal.\nFix pinsrw and pextrw templates for AVX targets. Use sselog1\ninstead of sselog type.  Also, handle TARGET_SSE_PARTIAL_REG_DEPENDENCY\nand TARGET_SSE_SPLIT_REGS targets.\n\n2021-11-29  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/102811\n\t* config/i386/i386.md (*movhi_internal): Introduce (*v,C) alternative.\n\tDo not allocate non-GPR registers.  Optimize xmm->xmm moves when\n\toptimizing for size.  Fix vpinsrw insn template.\n\t(*movhf_internal): Fix pinsrw and pextrw insn templates for\n\tAVX targets. Use sselog1 type instead of sselog.  Optimize GPR moves.\n\tOptimize xmm->xmm moves for TARGET_SSE_PARTIAL_REG_DEPENDENCY\n\tand TARGET_SSE_SPLIT_REGS targets.", "tree": {"sha": "63b20ecc038f1f5c3ec9a21db9943143180d3eaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63b20ecc038f1f5c3ec9a21db9943143180d3eaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca5667e867252db3c8642ee90f55427149cd92b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5667e867252db3c8642ee90f55427149cd92b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca5667e867252db3c8642ee90f55427149cd92b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5667e867252db3c8642ee90f55427149cd92b6/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f81c5a86dc03352682ac8ae3daa6ec507528a265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f81c5a86dc03352682ac8ae3daa6ec507528a265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f81c5a86dc03352682ac8ae3daa6ec507528a265"}], "stats": {"total": 211, "additions": 128, "deletions": 83}, "files": [{"sha": "c88374c9d2b2df53599af650973f8d2752171c94", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 128, "deletions": 83, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5667e867252db3c8642ee90f55427149cd92b6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5667e867252db3c8642ee90f55427149cd92b6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ca5667e867252db3c8642ee90f55427149cd92b6", "patch": "@@ -2495,11 +2495,12 @@\n \t   (symbol_ref \"true\")))])\n \n (define_insn \"*movhi_internal\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r ,r ,m ,*k,*k ,*r,*m,*k,?r,?v,*v,*v,*m\")\n-\t(match_operand:HI 1 \"general_operand\"      \"r ,rn,rm,rn,*r,*km,*k,*k,CBC,v, r, v, m, v\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\"\n+    \"=r,r,r,m ,*k,*k ,r ,m ,*k ,?r,?*v,*v,*v,*v,m\")\n+\t(match_operand:HI 1 \"general_operand\"\n+    \"r ,n,m,rn,r ,*km,*k,*k,CBC,*v,r  ,C ,*v,m ,*v\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && ix86_hardreg_mov_ok (operands[0], operands[1])\"\n-\n {\n   switch (get_attr_type (insn))\n     {\n@@ -2526,10 +2527,13 @@\n       return ix86_output_ssemov (insn, operands);\n \n     case TYPE_SSELOG1:\n+      if (satisfies_constraint_C (operands[1]))\n+\treturn standard_sse_constant_opcode (insn, operands);\n+\n       if (SSE_REG_P (operands[0]))\n \treturn MEM_P (operands[1])\n-\t  ? \"%vpinsrw\\t{$0, %1, %0|%0, %1, 0}\"\n-\t  : \"%vpinsrw\\t{$0, %k1, %0|%0, %k1, 0}\";\n+\t  ? \"%vpinsrw\\t{$0, %1, %d0|%d0, %1, 0}\"\n+\t  : \"%vpinsrw\\t{$0, %k1, %d0|%d0, %k1, 0}\";\n       else\n \treturn MEM_P (operands[0])\n \t  ? \"%vpextrw\\t{$0, %1, %0|%0, %1, 0}\"\n@@ -2550,23 +2554,25 @@\n     }\n }\n   [(set (attr \"isa\")\n-\t(cond [(eq_attr \"alternative\" \"9,10,11,12\")\n+\t(cond [(eq_attr \"alternative\" \"9,10,11,12,13\")\n \t\t  (const_string \"sse2\")\n-\t       (eq_attr \"alternative\" \"13\")\n+\t       (eq_attr \"alternative\" \"14\")\n \t\t  (const_string \"sse4\")\n \t       ]\n \t       (const_string \"*\")))\n    (set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"9,10,12,13\")\n+     (cond [(eq_attr \"alternative\" \"4,5,6,7\")\n+\t      (const_string \"mskmov\")\n+\t    (eq_attr \"alternative\" \"8\")\n+\t      (const_string \"msklog\")\n+\t    (eq_attr \"alternative\" \"9,10,13,14\")\n \t      (if_then_else (match_test \"TARGET_AVX512FP16\")\n \t\t(const_string \"ssemov\")\n \t\t(const_string \"sselog1\"))\n-\t    (eq_attr \"alternative\" \"4,5,6,7\")\n-\t      (const_string \"mskmov\")\n \t    (eq_attr \"alternative\" \"11\")\n+\t      (const_string \"sselog1\")\n+\t    (eq_attr \"alternative\" \"12\")\n \t      (const_string \"ssemov\")\n-\t    (eq_attr \"alternative\" \"8\")\n-\t      (const_string \"msklog\")\n \t    (match_test \"optimize_function_for_size_p (cfun)\")\n \t      (const_string \"imov\")\n \t    (and (eq_attr \"alternative\" \"0\")\n@@ -2581,33 +2587,54 @@\n \t      (const_string \"imovx\")\n \t   ]\n \t   (const_string \"imov\")))\n-    (set (attr \"prefix\")\n-\t (cond [(eq_attr \"alternative\" \"9,10,11,12,13\")\n-\t\t  (const_string \"maybe_evex\")\n-\t\t(eq_attr \"alternative\" \"4,5,6,7,8\")\n-\t\t  (const_string \"vex\")\n-\t       ]\n-\t       (const_string \"orig\")))\n-    (set (attr \"mode\")\n-      (cond [(eq_attr \"type\" \"imovx\")\n-\t       (const_string \"SI\")\n-\t     (eq_attr \"alternative\" \"9,10,12,13\")\n-\t       (if_then_else (match_test \"TARGET_AVX512FP16\")\n-\t\t (const_string \"HI\")\n-\t\t (const_string \"TI\"))\n-\t     (eq_attr \"alternative\" \"11\")\n-\t       (if_then_else (match_test \"TARGET_AVX512FP16\")\n-\t\t (const_string \"HF\")\n-\t\t (const_string \"SF\"))\n-\t     (and (eq_attr \"alternative\" \"1,2\")\n-\t\t  (match_operand:HI 1 \"aligned_operand\"))\n-\t       (const_string \"SI\")\n-\t     (and (eq_attr \"alternative\" \"0\")\n-\t\t  (ior (not (match_test \"TARGET_PARTIAL_REG_STALL\"))\n-\t\t       (not (match_test \"TARGET_HIMODE_MATH\"))))\n-\t       (const_string \"SI\")\n+   (set (attr \"prefix\")\n+\t(cond [(eq_attr \"alternative\" \"4,5,6,7,8\")\n+\t\t (const_string \"vex\")\n+\t       (eq_attr \"alternative\" \"9,10,11,12,13,14\")\n+\t\t (const_string \"maybe_evex\")\n+\t      ]\n+\t      (const_string \"orig\")))\n+   (set (attr \"mode\")\n+     (cond [(eq_attr \"alternative\" \"9,10,13,14\")\n+\t      (if_then_else (match_test \"TARGET_AVX512FP16\")\n+\t\t(const_string \"HI\")\n+\t\t(const_string \"TI\"))\n+\t    (eq_attr \"alternative\" \"11\")\n+\t      (cond [(match_test \"TARGET_AVX\")\n+\t\t       (const_string \"TI\")\n+\t\t     (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t\t  (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t       (const_string \"V4SF\")\n+\t\t    ]\n+\t\t    (const_string \"TI\"))\n+\t    (eq_attr \"alternative\" \"12\")\n+\t      (cond [(match_test \"TARGET_AVX512FP16\")\n+\t\t       (const_string \"HI\")\n+\t\t     (match_test \"TARGET_AVX\")\n+\t\t       (const_string \"TI\")\n+\t\t     (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t\t  (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t       (const_string \"V4SF\")\n+\t\t    ]\n+\t\t    (const_string \"TI\"))\n+\t    (eq_attr \"type\" \"imovx\")\n+\t      (const_string \"SI\")\n+\t    (and (eq_attr \"alternative\" \"1,2\")\n+\t\t (match_operand:HI 1 \"aligned_operand\"))\n+\t      (const_string \"SI\")\n+\t    (and (eq_attr \"alternative\" \"0\")\n+\t\t (ior (not (match_test \"TARGET_PARTIAL_REG_STALL\"))\n+\t\t      (not (match_test \"TARGET_HIMODE_MATH\"))))\n+\t      (const_string \"SI\")\n \t    ]\n-\t    (const_string \"HI\")))])\n+\t    (const_string \"HI\")))\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"9\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t    (eq_attr \"alternative\" \"10\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n \n ;; Situation is quite tricky about when to choose full sized (SImode) move\n ;; over QImode moves.  For Q_REG -> Q_REG move we use full size only for\n@@ -3774,92 +3801,110 @@\n \n (define_insn \"*movhf_internal\"\n  [(set (match_operand:HF 0 \"nonimmediate_operand\"\n-\t \"=?r,?m,v,v,?r,m,?v,v\")\n+\t \"=?r,?r,?r,?m,v,v,?r,m,?v,v\")\n        (match_operand:HF 1 \"general_operand\"\n-\t \"rmF,rF,C,v, v,v, r,m\"))]\n+\t \"r  ,F ,m ,rF,C,v, v,v,r ,m\"))]\n  \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n   && (lra_in_progress\n       || reload_completed\n       || !CONST_DOUBLE_P (operands[1])\n-      || (TARGET_SSE && TARGET_SSE_MATH\n+      || (TARGET_SSE2\n \t  && standard_sse_constant_p (operands[1], HFmode) == 1)\n       || memory_operand (operands[0], HFmode))\"\n {\n   switch (get_attr_type (insn))\n     {\n-    case TYPE_IMOV:\n-      return \"mov{w}\\t{%1, %0|%0, %1}\";\n-\n-    case TYPE_SSELOG1:\n-      return standard_sse_constant_opcode (insn, operands);\n+    case TYPE_IMOVX:\n+      /* movzwl is faster than movw on p2 due to partial word stalls,\n+\t though not as fast as an aligned movl.  */\n+      return \"movz{wl|x}\\t{%1, %k0|%k0, %1}\";\n \n     case TYPE_SSEMOV:\n       return ix86_output_ssemov (insn, operands);\n \n-    case TYPE_SSELOG:\n+    case TYPE_SSELOG1:\n+      if (satisfies_constraint_C (operands[1]))\n+\treturn standard_sse_constant_opcode (insn, operands);\n+\n       if (SSE_REG_P (operands[0]))\n \treturn MEM_P (operands[1])\n-\t       ? \"pinsrw\\t{$0, %1, %0|%0, %1, 0}\"\n-\t       : \"pinsrw\\t{$0, %k1, %0|%0, %k1, 0}\";\n+\t       ? \"%vpinsrw\\t{$0, %1, %d0|%d0, %1, 0}\"\n+\t       : \"%vpinsrw\\t{$0, %k1, %d0|%d0, %k1, 0}\";\n       else\n \treturn MEM_P (operands[0])\n-\t       ? \"pextrw\\t{$0, %1, %0|%0, %1, 0}\"\n-\t       : \"pextrw\\t{$0, %1, %k0|%k0, %1, 0}\";\n+\t       ? \"%vpextrw\\t{$0, %1, %0|%0, %1, 0}\"\n+\t       : \"%vpextrw\\t{$0, %1, %k0|%k0, %1, 0}\";\n \n     default:\n-      gcc_unreachable ();\n+      if (get_attr_mode (insn) == MODE_SI)\n+\treturn \"mov{l}\\t{%k1, %k0|%k0, %k1}\";\n+      else\n+\treturn \"mov{w}\\t{%1, %0|%0, %1}\";\n     }\n }\n   [(set (attr \"isa\")\n-\t(cond [(eq_attr \"alternative\" \"2,3,4,6,7\")\n+\t(cond [(eq_attr \"alternative\" \"4,5,6,8,9\")\n \t\t (const_string \"sse2\")\n-\t       (eq_attr \"alternative\" \"5\")\n+\t       (eq_attr \"alternative\" \"7\")\n \t\t (const_string \"sse4\")\n \t      ]\n \t      (const_string \"*\")))\n    (set (attr \"type\")\n-\t(cond [(eq_attr \"alternative\" \"0,1\")\n-\t\t (const_string \"imov\")\n-\t       (eq_attr \"alternative\" \"2\")\n+\t(cond [(eq_attr \"alternative\" \"4\")\n \t\t (const_string \"sselog1\")\n-\t       (eq_attr \"alternative\" \"4,5,6,7\")\n+\t       (eq_attr \"alternative\" \"5\")\n+\t\t (const_string \"ssemov\")\n+\t       (eq_attr \"alternative\" \"6,7,8,9\")\n \t\t (if_then_else\n \t\t   (match_test (\"TARGET_AVX512FP16\"))\n \t\t   (const_string \"ssemov\")\n-\t\t   (const_string \"sselog\"))\n-\t      ]\n-\t      (const_string \"ssemov\")))\n-   (set (attr \"memory\")\n-\t(cond [(eq_attr \"alternative\" \"4,6\")\n-\t\t (const_string \"none\")\n-\t       (eq_attr \"alternative\" \"5\")\n-\t\t (const_string \"store\")\n-\t       (eq_attr \"alternative\" \"7\")\n-\t\t (const_string \"load\")\n-\t      ]\n-\t      (const_string \"*\")))\n+\t\t   (const_string \"sselog1\"))\n+\t       (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t (const_string \"imov\")\n+\t       (and (eq_attr \"alternative\" \"0\")\n+\t\t    (ior (not (match_test \"TARGET_PARTIAL_REG_STALL\"))\n+\t\t\t (not (match_test \"TARGET_HIMODE_MATH\"))))\n+\t\t (const_string \"imov\")\n+\t       (and (eq_attr \"alternative\" \"1,2\")\n+\t\t    (match_operand:HI 1 \"aligned_operand\"))\n+\t\t (const_string \"imov\")\n+\t       (and (match_test \"TARGET_MOVX\")\n+\t\t    (eq_attr \"alternative\" \"0,2\"))\n+\t\t (const_string \"imovx\")\n+\t\t ]\n+\t      (const_string \"imov\")))\n    (set (attr \"prefix\")\n-\t(cond [(eq_attr \"alternative\" \"0,1\")\n-\t\t (const_string \"orig\")\n+\t(cond [(eq_attr \"alternative\" \"4,5,6,7,8,9\")\n+\t\t (const_string \"maybe_vex\")\n \t      ]\n-\t      (const_string \"maybe_vex\")))\n+\t      (const_string \"orig\")))\n    (set (attr \"mode\")\n-\t(cond [(eq_attr \"alternative\" \"0,1\")\n-\t\t (const_string \"HI\")\n-\t       (eq_attr \"alternative\" \"2\")\n+\t(cond [(eq_attr \"alternative\" \"4\")\n \t\t (const_string \"V4SF\")\n-\t       (eq_attr \"alternative\" \"4,5,6,7\")\n+\t       (eq_attr \"alternative\" \"6,7,8,9\")\n \t\t (if_then_else\n \t\t   (match_test \"TARGET_AVX512FP16\")\n \t\t   (const_string \"HI\")\n \t\t   (const_string \"TI\"))\n-\t       (eq_attr \"alternative\" \"3\")\n-\t\t (if_then_else\n-\t\t   (match_test \"TARGET_AVX512FP16\")\n-\t\t   (const_string \"HF\")\n-\t\t   (const_string \"SF\"))\n+\t       (eq_attr \"alternative\" \"5\")\n+\t\t (cond [(match_test \"TARGET_AVX512FP16\")\n+\t\t\t  (const_string \"HF\")\n+\t\t\t(ior (match_test \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t\t\t     (match_test \"TARGET_SSE_SPLIT_REGS\"))\n+\t\t\t  (const_string \"V4SF\")\n+\t\t       ]\n+\t\t       (const_string \"SF\"))\n+\t       (eq_attr \"type\" \"imovx\")\n+\t\t (const_string \"SI\")\n+\t       (and (eq_attr \"alternative\" \"1,2\")\n+\t\t    (match_operand:HI 1 \"aligned_operand\"))\n+\t\t (const_string \"SI\")\n+\t       (and (eq_attr \"alternative\" \"0\")\n+\t\t    (ior (not (match_test \"TARGET_PARTIAL_REG_STALL\"))\n+\t\t\t (not (match_test \"TARGET_HIMODE_MATH\"))))\n+\t\t (const_string \"SI\")\n \t      ]\n-\t      (const_string \"*\")))])\n+\t      (const_string \"HI\")))])\n \n (define_split\n   [(set (match_operand 0 \"any_fp_register_operand\")"}]}