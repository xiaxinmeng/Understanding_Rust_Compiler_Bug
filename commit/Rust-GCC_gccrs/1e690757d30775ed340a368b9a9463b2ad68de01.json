{"sha": "1e690757d30775ed340a368b9a9463b2ad68de01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU2OTA3NTdkMzA3NzVlZDM0MGEzNjhiOWE5NDYzYjJhZDY4ZGUwMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-11T18:18:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-06-11T18:18:11Z"}, "message": "libstdc++: Fix filesystem::path comparisons for C++23\n\nIn C++23 there is a basic_string_view(Range&&) constructor, which is\nconstrained to take a range (specifically, a contiguous_range). When the\nfilesystem::path comparison operators call lhs.compare(rhs) the overload\ntaking a string_view is considered, which means checking whether path\nsatisfies the range concept. That satisfaction result changes depending\nwhether path::iterator is complete, which is ill-formed; no diagnostic\nrequired. To avoid the problem, this change ensures that the overload\nresolution is performed in a context where path::iterator is complete\nand the range concept is satisfied. (The result of overload resolution\nis always that the compare(const path&) overload is the best match, but\nwe still have to consider the compare(basic_string_view<value_type>) one\nto decide if it even participates in overload resolution).\n\nFor std::filesystem::path we can't define the comparison operators later\nin the file, because they are hidden friends, so a new helper is\nintroduced that gets defined when everything else is complete.\n\nFor std::experimental::filesystem::path we can just move the definitions\nof the comparison operators later in the file.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/fs_path.h (operator==, operator<=>): Use new\n\t_S_compare function.\n\t(path::_S_compare): New function to call path::compare in a\n\tcontext where path::iterator is complete.\n\t* include/experimental/bits/fs_path.h (operator<, operator==):\n\tDefine after path::iterator is complete.\n\t* testsuite/27_io/filesystem/path/native/conv_c++23.cc: New\n\ttest.\n\t* testsuite/experimental/filesystem/path/native/conv_c++23.cc:\n\tNew test.", "tree": {"sha": "4e7f202016e8d39dc2c09b19c54ebad3d3dc3908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e7f202016e8d39dc2c09b19c54ebad3d3dc3908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e690757d30775ed340a368b9a9463b2ad68de01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e690757d30775ed340a368b9a9463b2ad68de01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e690757d30775ed340a368b9a9463b2ad68de01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e690757d30775ed340a368b9a9463b2ad68de01/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68f46862d33707450bdf70cfddd91ae2a12527a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f46862d33707450bdf70cfddd91ae2a12527a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f46862d33707450bdf70cfddd91ae2a12527a8"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "5e285204527897a52b61d0562799e1765b51fab4", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e690757d30775ed340a368b9a9463b2ad68de01/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e690757d30775ed340a368b9a9463b2ad68de01/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=1e690757d30775ed340a368b9a9463b2ad68de01", "patch": "@@ -513,13 +513,13 @@ namespace __detail\n \n     /// Compare paths\n     friend bool operator==(const path& __lhs, const path& __rhs) noexcept\n-    { return __lhs.compare(__rhs) == 0; }\n+    { return path::_S_compare(__lhs, __rhs) == 0; }\n \n #if __cpp_lib_three_way_comparison\n     /// Compare paths\n     friend strong_ordering\n     operator<=>(const path& __lhs, const path& __rhs) noexcept\n-    { return __lhs.compare(__rhs) <=> 0; }\n+    { return path::_S_compare(__lhs, __rhs) <=> 0; }\n #else\n     /// Compare paths\n     friend bool operator!=(const path& __lhs, const path& __rhs) noexcept\n@@ -627,6 +627,11 @@ namespace __detail\n       static basic_string<_CharT, _Traits, _Allocator>\n       _S_str_convert(basic_string_view<value_type>, const _Allocator&);\n \n+    // Returns lhs.compare(rhs), but defined after path::iterator is complete.\n+    __attribute__((__always_inline__))\n+    static int\n+    _S_compare(const path& __lhs, const path& __rhs) noexcept;\n+\n     void _M_split_cmpts();\n \n     _Type _M_type() const noexcept { return _M_cmpts.type(); }\n@@ -1330,6 +1335,14 @@ namespace __detail\n     return _M_at_end == __rhs._M_at_end;\n   }\n \n+  // Define this now that path and path::iterator are complete.\n+  // It needs to consider the string_view(Range&&) constructor during\n+  // overload resolution, which depends on whether range<path> is satisfied,\n+  // which depends on whether path::iterator is complete.\n+  inline int\n+  path::_S_compare(const path& __lhs, const path& __rhs) noexcept\n+  { return __lhs.compare(__rhs); }\n+\n   /// @} group filesystem\n _GLIBCXX_END_NAMESPACE_CXX11\n } // namespace filesystem"}, {"sha": "1fb84ec1e780e0e6018bccf3448984e0471551a6", "filename": "libstdc++-v3/include/experimental/bits/fs_path.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e690757d30775ed340a368b9a9463b2ad68de01/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e690757d30775ed340a368b9a9463b2ad68de01/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fbits%2Ffs_path.h?ref=1e690757d30775ed340a368b9a9463b2ad68de01", "patch": "@@ -551,8 +551,7 @@ namespace __detail\n   size_t hash_value(const path& __p) noexcept;\n \n   /// Compare paths\n-  inline bool operator<(const path& __lhs, const path& __rhs) noexcept\n-  { return __lhs.compare(__rhs) < 0; }\n+  inline bool operator<(const path& __lhs, const path& __rhs) noexcept;\n \n   /// Compare paths\n   inline bool operator<=(const path& __lhs, const path& __rhs) noexcept\n@@ -567,8 +566,7 @@ namespace __detail\n   { return !(__lhs < __rhs); }\n \n   /// Compare paths\n-  inline bool operator==(const path& __lhs, const path& __rhs) noexcept\n-  { return __lhs.compare(__rhs) == 0; }\n+  inline bool operator==(const path& __lhs, const path& __rhs) noexcept;\n \n   /// Compare paths\n   inline bool operator!=(const path& __lhs, const path& __rhs) noexcept\n@@ -1275,6 +1273,16 @@ namespace __detail\n     return _M_at_end == __rhs._M_at_end;\n   }\n \n+  // Define these now that path and path::iterator are complete.\n+  // They needs to consider the string_view(Range&&) constructor during\n+  // overload resolution, which depends on whether range<path> is satisfied,\n+  // which depends on whether path::iterator is complete.\n+  inline bool operator<(const path& __lhs, const path& __rhs) noexcept\n+  { return __lhs.compare(__rhs) < 0; }\n+\n+  inline bool operator==(const path& __lhs, const path& __rhs) noexcept\n+  { return __lhs.compare(__rhs) == 0; }\n+\n   /// @} group filesystem-ts\n _GLIBCXX_END_NAMESPACE_CXX11\n } // namespace v1"}, {"sha": "b4efed2bd471058b68915ceece22d7e47280077b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/native/conv_c++23.cc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e690757d30775ed340a368b9a9463b2ad68de01/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fconv_c%2B%2B23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e690757d30775ed340a368b9a9463b2ad68de01/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fconv_c%2B%2B23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnative%2Fconv_c%2B%2B23.cc?ref=1e690757d30775ed340a368b9a9463b2ad68de01", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <filesystem>\n+\n+void\n+test01()\n+{\n+  using std::filesystem::path;\n+  path p;\n+  path::string_type s(p);\n+}"}, {"sha": "f3c3f8849656a131e6ac380926bb1e9a24015e64", "filename": "libstdc++-v3/testsuite/experimental/filesystem/path/native/conv_c++23.cc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e690757d30775ed340a368b9a9463b2ad68de01/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fconv_c%2B%2B23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e690757d30775ed340a368b9a9463b2ad68de01/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fconv_c%2B%2B23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Fpath%2Fnative%2Fconv_c%2B%2B23.cc?ref=1e690757d30775ed340a368b9a9463b2ad68de01", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <experimental/filesystem>\n+\n+void\n+test01()\n+{\n+  using std::experimental::filesystem::path;\n+  path p;\n+  path::string_type s(p);\n+}"}]}