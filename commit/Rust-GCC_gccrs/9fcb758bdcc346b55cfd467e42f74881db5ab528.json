{"sha": "9fcb758bdcc346b55cfd467e42f74881db5ab528", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjYjc1OGJkY2MzNDZiNTVjZmQ0NjdlNDJmNzQ4ODFkYjVhYjUyOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-08-24T12:55:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-24T12:55:18Z"}, "message": "tree-data-ref.c (dr_analyze_indices): Avoid unsharing the ref in the basic-block case.\n\n2011-08-24  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-data-ref.c (dr_analyze_indices): Avoid unsharing the\n\tref in the basic-block case.  Move stripping array-refs\n\tto the place we create an access-function for it.  Remove\n\tbogus stripping down a MEM_REF to its base.\n\nFrom-SVN: r178037", "tree": {"sha": "6456fc1efb5e72f3319617cf31b041ce359f1b70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6456fc1efb5e72f3319617cf31b041ce359f1b70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fcb758bdcc346b55cfd467e42f74881db5ab528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fcb758bdcc346b55cfd467e42f74881db5ab528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fcb758bdcc346b55cfd467e42f74881db5ab528", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fcb758bdcc346b55cfd467e42f74881db5ab528/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e66132e141e14f3773e1e666309ab84ead8b68c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66132e141e14f3773e1e666309ab84ead8b68c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66132e141e14f3773e1e666309ab84ead8b68c1"}], "stats": {"total": 67, "additions": 35, "deletions": 32}, "files": [{"sha": "3b3731c7d2091daf04dd9b12a71f30dbe460c1c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcb758bdcc346b55cfd467e42f74881db5ab528/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcb758bdcc346b55cfd467e42f74881db5ab528/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fcb758bdcc346b55cfd467e42f74881db5ab528", "patch": "@@ -1,3 +1,10 @@\n+2011-08-24  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-data-ref.c (dr_analyze_indices): Avoid unsharing the\n+\tref in the basic-block case.  Move stripping array-refs\n+\tto the place we create an access-function for it.  Remove\n+\tbogus stripping down a MEM_REF to its base.\n+\n 2011-08-24  Richard Guenther  <rguenther@suse.de>\n \n \t* fold-const.c (fold_comparison): Fold &a < &a + 4 even"}, {"sha": "388ea8aaeb22e4319f9d0178a60852f0142ecc8c", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fcb758bdcc346b55cfd467e42f74881db5ab528/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fcb758bdcc346b55cfd467e42f74881db5ab528/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=9fcb758bdcc346b55cfd467e42f74881db5ab528", "patch": "@@ -838,44 +838,52 @@ static void\n dr_analyze_indices (struct data_reference *dr, loop_p nest, loop_p loop)\n {\n   VEC (tree, heap) *access_fns = NULL;\n-  tree ref = unshare_expr (DR_REF (dr)), aref = ref, op;\n-  tree base, off, access_fn = NULL_TREE;\n-  basic_block before_loop = NULL;\n+  tree ref, aref, op;\n+  tree base, off, access_fn;\n+  basic_block before_loop;\n \n+  /* If analyzing a basic-block there are no indices to analyze\n+     and thus no access functions.  */\n   if (!nest)\n     {\n-      DR_BASE_OBJECT (dr) = ref;\n+      DR_BASE_OBJECT (dr) = DR_REF (dr);\n       DR_ACCESS_FNS (dr) = NULL;\n       return;\n     }\n \n+  ref = unshare_expr (DR_REF (dr));\n   before_loop = block_before_loop (nest);\n \n+  /* REALPART_EXPR and IMAGPART_EXPR can be handled like accesses\n+     into a two element array with a constant index.  The base is\n+     then just the immediate underlying object.  */\n+  if (TREE_CODE (ref) == REALPART_EXPR)\n+    {\n+      ref = TREE_OPERAND (ref, 0);\n+      VEC_safe_push (tree, heap, access_fns, integer_zero_node);\n+    }\n+  else if (TREE_CODE (ref) == IMAGPART_EXPR)\n+    {\n+      ref = TREE_OPERAND (ref, 0);\n+      VEC_safe_push (tree, heap, access_fns, integer_one_node);\n+    }\n+\n   /* Analyze access functions of dimensions we know to be independent.  */\n+  aref = ref;\n   while (handled_component_p (aref))\n     {\n-      /* For ARRAY_REFs the base is the reference with the index replaced\n-\t by zero.  */\n       if (TREE_CODE (aref) == ARRAY_REF)\n \t{\n \t  op = TREE_OPERAND (aref, 1);\n \t  access_fn = analyze_scalar_evolution (loop, op);\n \t  access_fn = instantiate_scev (before_loop, loop, access_fn);\n \t  VEC_safe_push (tree, heap, access_fns, access_fn);\n-\t  TREE_OPERAND (aref, 1) = build_int_cst (TREE_TYPE (op), 0);\n-\t}\n-      /* REALPART_EXPR and IMAGPART_EXPR can be handled like accesses\n-\t into a two element array with a constant index.  The base is\n-\t then just the immediate underlying object.  */\n-      else if (TREE_CODE (aref) == REALPART_EXPR)\n-\t{\n-\t  ref = TREE_OPERAND (ref, 0);\n-\t  VEC_safe_push (tree, heap, access_fns, integer_zero_node);\n-\t}\n-      else if (TREE_CODE (aref) == IMAGPART_EXPR)\n-\t{\n-\t  ref = TREE_OPERAND (ref, 0);\n-\t  VEC_safe_push (tree, heap, access_fns, integer_one_node);\n+\t  /* For ARRAY_REFs the base is the reference with the index replaced\n+\t     by zero if we can not strip it as the outermost component.  */\n+\t  if (aref == ref)\n+\t    ref = TREE_OPERAND (ref, 0);\n+\t  else\n+\t    TREE_OPERAND (aref, 1) = build_int_cst (TREE_TYPE (op), 0);\n \t}\n \n       aref = TREE_OPERAND (aref, 0);\n@@ -909,18 +917,6 @@ dr_analyze_indices (struct data_reference *dr, loop_p nest, loop_p loop)\n \t}\n     }\n \n-  if (TREE_CODE (ref) == MEM_REF\n-      && TREE_CODE (TREE_OPERAND (ref, 0)) == ADDR_EXPR\n-      && integer_zerop (TREE_OPERAND (ref, 1)))\n-    ref = TREE_OPERAND (TREE_OPERAND (ref, 0), 0);\n-\n-  /* For canonicalization purposes we'd like to strip all outermost\n-     zero-offset component-refs.\n-     ???  For now simply handle zero-index array-refs.  */\n-  while (TREE_CODE (ref) == ARRAY_REF\n-\t && integer_zerop (TREE_OPERAND (ref, 1)))\n-    ref = TREE_OPERAND (ref, 0);\n-\n   DR_BASE_OBJECT (dr) = ref;\n   DR_ACCESS_FNS (dr) = access_fns;\n }"}]}