{"sha": "fa37b948cd133bef51590a9294cab8c82efa10ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEzN2I5NDhjZDEzM2JlZjUxNTkwYTkyOTRjYWI4YzgyZWZhMTBjZQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-03-09T17:31:22Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-03-09T17:31:22Z"}, "message": "cp-hacking.texinfo: Fix spacing after periods.\n\nlibjava/classpath/\n\n\t* doc/cp-hacking.texinfo: Fix spacing after periods.\n\t* doc/cp-tools.texinfo: Likewise.\n\t* doc/cp-vmintegration.texinfo: Likewise.\n\nFrom-SVN: r133058", "tree": {"sha": "24ca00fbd04e08fc45922a60a68f498bd46edcfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24ca00fbd04e08fc45922a60a68f498bd46edcfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa37b948cd133bef51590a9294cab8c82efa10ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa37b948cd133bef51590a9294cab8c82efa10ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa37b948cd133bef51590a9294cab8c82efa10ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa37b948cd133bef51590a9294cab8c82efa10ce/comments", "author": null, "committer": null, "parents": [{"sha": "d95c087c3622213b2e60474a54a9a75176104a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d95c087c3622213b2e60474a54a9a75176104a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d95c087c3622213b2e60474a54a9a75176104a02"}], "stats": {"total": 72, "additions": 38, "deletions": 34}, "files": [{"sha": "1a39f6b48d5b9beddd7876db2df23e807fd8ff1a", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37b948cd133bef51590a9294cab8c82efa10ce/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37b948cd133bef51590a9294cab8c82efa10ce/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=fa37b948cd133bef51590a9294cab8c82efa10ce", "patch": "@@ -1,5 +1,9 @@\n 2008-03-09  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n+\t* doc/cp-hacking.texinfo: Fix spacing after periods.\n+\t* doc/cp-tools.texinfo: Likewise.\n+\t* doc/cp-vmintegration.texinfo: Likewise.\n+\n \t* doc/cp-hacking.texinfo: Fix some typos.\n \t* doc/cp-tools.texinfo: Likewise.\n \t* doc/cp-vmintegration.texinfo: Likewise."}, {"sha": "ee2b8f53cabe8c2c05ac5756fa6a0a60f3d445ec", "filename": "libjava/classpath/doc/cp-hacking.texinfo", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37b948cd133bef51590a9294cab8c82efa10ce/libjava%2Fclasspath%2Fdoc%2Fcp-hacking.texinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37b948cd133bef51590a9294cab8c82efa10ce/libjava%2Fclasspath%2Fdoc%2Fcp-hacking.texinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fdoc%2Fcp-hacking.texinfo?ref=fa37b948cd133bef51590a9294cab8c82efa10ce", "patch": "@@ -303,7 +303,7 @@ Classpath stories page}.\n \n As with OS platform support, this priority list could change if a\n volunteer comes forward to port, maintain, and test releases for a\n-particular JVM.  Since gcj is part of the GNU Compiler Collective it\n+particular JVM@.  Since gcj is part of the GNU Compiler Collective it\n is one of the most important targets.  But since it doesn't currently\n work out of the box with GNU Classpath it is currently not the easiest\n target.  When hacking on GNU Classpath the easiest is to use\n@@ -952,7 +952,7 @@ use @code{+Predundant-modifiers} on the command line.\n \n @item\n Modifiers should be listed in the standard order recommended by the\n-JLS.  Jikes will warn for this when given @code{+Pmodifier-order}.\n+JLS@.  Jikes will warn for this when given @code{+Pmodifier-order}.\n \n @item\n Because the output of different compilers differs, we have\n@@ -1002,7 +1002,7 @@ words which have been added in later versions.  Notable examples are\n @code{assert} (added in 1.4) and @code{enum} (added in 1.5).  Jikes will warn\n of the use of the word @code{enum}, but, as it doesn't yet support the 1.5\n version of the language, it will still allow this usage through.  A\n-compiler which supports 1.5 (e.g. the Eclipse compiler, ecj) will simply\n+compiler which supports 1.5 (e.g.@: the Eclipse compiler, ecj) will simply\n fail to compile the offending source code.\n \n @c fixme Describe Anonymous classes (example).\n@@ -1073,7 +1073,7 @@ You can find instructions on getting a CVS checkout for classpath at\n \n You don't have to get CVS commit write access to contribute, but it is\n sometimes more convenient to be able to add your changes directly to\n-the project CVS. Please contact the GNU Classpath savannah admins to\n+the project CVS@. Please contact the GNU Classpath savannah admins to\n arrange CVS access if you would like to have it.\n \n Make sure to be subscribed to the commit-classpath mailinglist while"}, {"sha": "9e370c092965fce13390321499a6fc226d45ecf1", "filename": "libjava/classpath/doc/cp-tools.texinfo", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37b948cd133bef51590a9294cab8c82efa10ce/libjava%2Fclasspath%2Fdoc%2Fcp-tools.texinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37b948cd133bef51590a9294cab8c82efa10ce/libjava%2Fclasspath%2Fdoc%2Fcp-tools.texinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fdoc%2Fcp-tools.texinfo?ref=fa37b948cd133bef51590a9294cab8c82efa10ce", "patch": "@@ -338,7 +338,7 @@ jarsigner @option{-verify} [@var{OPTION}]@dots{} @var{FILE}\n @c man begin DESCRIPTION gjarsigner\n When the first form is used, the tool signs the designated JAR file. The second form, on the other hand, is used to verify a previously signed JAR file.\n \n-@var{FILE} is the .JAR file to process; i.e. to sign if the first syntax form is used, or to verify if the second syntax form is used instead.\n+@var{FILE} is the .JAR file to process; i.e., to sign if the first syntax form is used, or to verify if the second syntax form is used instead.\n \n @var{ALIAS} must be a known @i{Alias} of a @i{Key Entry} in the designated @i{Key Store}. The private key material associated with this @i{Alias} is then used for signing the designated .JAR file.\n @c man end\n@@ -369,7 +369,7 @@ When present, the tool will include --which otherwise it does not-- the @code{.S\n When present, the tool will include in the @code{.SF} generated file --which otherwise it does not-- a header containing a hash of the whole manifest file.  When that header is included, the tool can quickly check, during verification, if the hash (in the header) matches or not the manifest file.\n \n @item -provider PROVIDER_CLASS_NAME\n-A fully qualified class name of a @i{Security Provider} to add to the current list of @i{Security Providers} already installed in the JVM in-use. If a provider class is specified with this option, and was successfully added to the runtime --i.e. it was not already installed-- then the tool will attempt to remove this @i{Security Provider} before exiting.\n+A fully qualified class name of a @i{Security Provider} to add to the current list of @i{Security Providers} already installed in the JVM in-use. If a provider class is specified with this option, and was successfully added to the runtime --i.e.@: it was not already installed-- then the tool will attempt to remove this @i{Security Provider} before exiting.\n \n @item -help\n Prints a help text similar to this one.\n@@ -390,7 +390,7 @@ The following options may be specified when using the tool for signing purposes.\n @item -keystore @var{URL}\n Use this option to specify the location of the key store to use. The default value is a file URL referencing the file named @file{.keystore} located in the path returned by the call to @code{java.lang.System#getProperty(String)} using @code{user.home} as argument.\n \n-If a URL was specified, but was found to be malformed --e.g. missing protocol element-- the tool will attempt to use the URL value as a file-name (with absolute or relative path-name) of a key store --as if the protocol was @code{file:}.\n+If a URL was specified, but was found to be malformed --e.g.@: missing protocol element-- the tool will attempt to use the URL value as a file-name (with absolute or relative path-name) of a key store --as if the protocol was @code{file:}.\n \n @item -storetype @var{STORE_TYPE}\n Use this option to specify the type of the key store to use. The default value, if this option is omitted, is that of the property @code{keystore.type} in the security properties file, which is obtained by invoking the static method call @code{getDefaultType()} in @code{java.security.KeyStore}.\n@@ -404,12 +404,12 @@ Use this option to specify the password which the tool will use to unlock the @i\n If this option is omitted, the tool will first attempt to unlock the @i{Key Entry} using the same password protecting the key store. If this fails, you will then be prompted to provide a password.\n \n @item -sigfile @var{NAME}\n-Use this option to designate a literal that will be used to construct file names for both the @code{.SF} and @code{.DSA} signature files. These files  will be generated, by the tool, and placed in the @file{META-INF} directory of the signed JAR.  Permissible characters for @var{NAME} must be in the range \"a-zA-Z0-9_-\".  All characters will be converted to upper-case ones.\n+Use this option to designate a literal that will be used to construct file names for both the @code{.SF} and @code{.DSA} signature files. These files  will be generated, by the tool, and placed in the @file{META-INF} directory of the signed JAR@.  Permissible characters for @var{NAME} must be in the range \"a-zA-Z0-9_-\".  All characters will be converted to upper-case ones.\n \n If this option is missing, the first eight characters of the @var{ALIAS} argument will be used. When this is the case, any character in @var{ALIAS} that is outside the permissible range of characters will be replaced by an underscore.\n \n @item -signedjar @var{FILE}\n-Use this option to specify the file name of the signed JAR. If this option is omitted, then the signed JAR will be named the same as @var{FILE}; i.e. the input JAR file will be replaced with the signed copy.\n+Use this option to specify the file name of the signed JAR@. If this option is omitted, then the signed JAR will be named the same as @var{FILE}; i.e., the input JAR file will be replaced with the signed copy.\n \n @end table\n @c man end\n@@ -449,7 +449,7 @@ keytool [@var{COMMAND}] @dots{}\n @c man begin DESCRIPTION gkeytool\n Cryptographic credentials, in a Java environment, are usually stored in a @i{Key Store}. The Java SDK specifies a @i{Key Store} as a persistent container of two types of objects: @i{Key Entries} and @i{Trusted Certificates}. The security tool @command{keytool} is a Java-based application for managing those types of objects.\n \n-A @i{Key Entry} represents the private key part of a key-pair used in Public-Key Cryptography, and a signed X.509 certificate which authenticates the public key part for a known entity; i.e. the owner of the key-pair. The X.509 certificate itself contains the public key part of the key-pair.\n+A @i{Key Entry} represents the private key part of a key-pair used in Public-Key Cryptography, and a signed X.509 certificate which authenticates the public key part for a known entity; i.e.@: the owner of the key-pair. The X.509 certificate itself contains the public key part of the key-pair.\n \n A @i{Trusted Certificate} is a signed X.509 certificate issued by a trusted entity. The @i{Trust} in this context is relative to the User of the @command{keytool}. In other words, the existence of a @i{Trusted Certificate} in the @i{Key Store} processed by a @command{keytool} command implies that the User trusts the @i{Issuer} of that @i{Trusted Certificate} to also sign, and hence authenticates, other @i{Subjects} the tool may process.\n \n@@ -596,11 +596,11 @@ Use this option to specify the password protecting the key store. If this option\n @item -keystore @var{URL}\n Use this option to specify the location of the key store to use. The default value is a file URL referencing the file named @file{.keystore} located in the path returned by the call to @code{java.lang.System#getProperty(String)} using @code{user.home} as argument.\n \n-If a URL was specified, but was found to be malformed --e.g. missing protocol element-- the tool will attempt to use the URL value as a file-name (with absolute or relative path-name) of a key store --as if the protocol was @code{file:}.\n+If a URL was specified, but was found to be malformed --e.g.@: missing protocol element-- the tool will attempt to use the URL value as a file-name (with absolute or relative path-name) of a key store --as if the protocol was @code{file:}.\n \n @anchor{provider}\n @item -provider @var{PROVIDER_CLASS_NAME}\n-A fully qualified class name of a @i{Security Provider} to add to the current list of @i{Security Providers} already installed in the JVM in-use. If a provider class is specified with this option, and was successfully added to the runtime --i.e. it was not already installed-- then the tool will attempt to removed this @i{Security Provider} before exiting.\n+A fully qualified class name of a @i{Security Provider} to add to the current list of @i{Security Providers} already installed in the JVM in-use. If a provider class is specified with this option, and was successfully added to the runtime --i.e.@: it was not already installed-- then the tool will attempt to removed this @i{Security Provider} before exiting.\n \n @anchor{file}\n @item -file @var{FILE}\n@@ -624,17 +624,17 @@ A @i{Distinguished Name} (or DN) MUST be supplied with some of the @code{COMMAND\n \n @ftable @var\n @item CN\n-The Common Name; e.g. @kbd{host.domain.com}\n+The Common Name; e.g.@: @kbd{host.domain.com}\n @item OU\n-The Organizational Unit; e.g. @kbd{IT Department}\n+The Organizational Unit; e.g.@: @kbd{IT Department}\n @item O\n-The Organization Name; e.g. @kbd{The Sample Company}\n+The Organization Name; e.g.@: @kbd{The Sample Company}\n @item L\n-The Locality Name; e.g. @kbd{Sydney}\n+The Locality Name; e.g.@: @kbd{Sydney}\n @item ST\n-The State Name; e.g. @kbd{New South Wales}\n+The State Name; e.g.@: @kbd{New South Wales}\n @item C\n-The 2-letter Country identifier; e.g. @kbd{AU}\n+The 2-letter Country identifier; e.g.@: @kbd{AU}\n @end ftable\n \n When specified with a @code{-dname} option, each pair of component/value will be separated from the other with a comma. Each component and value pair MUST be separated by an equal sign. For example, the following is a valid DN value:@*\n@@ -683,10 +683,10 @@ For more details @pxref{keyalg,, ALGORITHM}.\n For more details @pxref{keysize,, KEY_SIZE}.\n \n @item -sigalg @var{ALGORITHM}\n-The canonical name of the digital signature algorithm to use for signing certificates. If this option is omitted, a default value will be chosen based on the type of the key-pair; i.e. the algorithm that ends up being used by the -keyalg option. If the key-pair generation algorithm is @code{DSA}, the value for the signature algorithm will be @code{SHA1withDSA}. If on the other hand the key-pair generation algorithm is @code{RSA}, then the tool will use @code{MD5withRSA} as the signature algorithm.\n+The canonical name of the digital signature algorithm to use for signing certificates. If this option is omitted, a default value will be chosen based on the type of the key-pair; i.e., the algorithm that ends up being used by the -keyalg option. If the key-pair generation algorithm is @code{DSA}, the value for the signature algorithm will be @code{SHA1withDSA}. If on the other hand the key-pair generation algorithm is @code{RSA}, then the tool will use @code{MD5withRSA} as the signature algorithm.\n \n @item -dname @var{NAME}\n-This a mandatory value for the command. If no value is specified --i.e. the @option{-dname} option is omitted-- the tool will prompt you to enter a @i{Distinguished Name} to use as both the @i{Owner} and @i{Issuer} of the generated self-signed certificate.\n+This a mandatory value for the command. If no value is specified --i.e.@: the @option{-dname} option is omitted-- the tool will prompt you to enter a @i{Distinguished Name} to use as both the @i{Owner} and @i{Issuer} of the generated self-signed certificate.\n \n For more details @pxref{dn,, X.500 DISTINGUISHED NAME}.\n \n@@ -909,7 +909,7 @@ FC...IVwNVOfQLRX+O5kAhQ/a4RTZme2L8PnpvgRwrf7Eg8D6w==\n -----END NEW CERTIFICATE REQUEST-----\n @end example\n \n-@b{IMPORTANT}: Some documentation (e.g. RSA examples) claims that the @code{Attributes} field, in the CSR is @code{OPTIONAL} while RFC-2986 implies the opposite. This implementation considers this field, by default, as @code{OPTIONAL}, unless the option @option{-attributes} is specified on the command line.\n+@b{IMPORTANT}: Some documentation (e.g.@: RSA examples) claims that the @code{Attributes} field, in the CSR is @code{OPTIONAL} while RFC-2986 implies the opposite. This implementation considers this field, by default, as @code{OPTIONAL}, unless the option @option{-attributes} is specified on the command line.\n \n @table @gcctabopt\n @item -alias @var{ALIAS}"}, {"sha": "8381828de6d8daacab2f6ea04e5540060590c93b", "filename": "libjava/classpath/doc/cp-vmintegration.texinfo", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa37b948cd133bef51590a9294cab8c82efa10ce/libjava%2Fclasspath%2Fdoc%2Fcp-vmintegration.texinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa37b948cd133bef51590a9294cab8c82efa10ce/libjava%2Fclasspath%2Fdoc%2Fcp-vmintegration.texinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fdoc%2Fcp-vmintegration.texinfo?ref=fa37b948cd133bef51590a9294cab8c82efa10ce", "patch": "@@ -281,7 +281,7 @@ which is responsible for the specified class.\n @item @code{forName(String, boolean, ClassLoader)} -- The VM should create a\n @code{Class} instance corresponding to the named class.  As noted in\n @ref{VM Hooks}, the internal content of the instance is the\n-responsibility of the VM.  The supplied class loader is recorded as that\n+responsibility of the VM@.  The supplied class loader is recorded as that\n which loaded the class, and the boolean specifies whether or not to\n run the class initializer.\n @item @code{isArray(Class)} -- Another property test, corresponding to a\n@@ -393,7 +393,7 @@ supplied class.\n loader.\n @item @code{getPrimitiveClass(char)} -- The VM should provide a @code{Class}\n implementation for one of the primitive classes.  The supplied character\n-matches the JNI code for the primitive class e.g. `B' for byte and\n+matches the JNI code for the primitive class e.g.@: `B' for byte and\n `Z' for boolean.\n @end itemize\n @item Java Methods\n@@ -485,7 +485,7 @@ making a VM implementation optional.\n @subsection @code{java.lang.VMThrowable}\n @code{VMThrowable} is used to hold the VM state of a throwable, created either\n when a @code{Throwable} is created or the @code{fillInStackTrace()} method is\n-called (i.e. when the actual stack trace is needed, as a lot of exceptions are\n+called (i.e., when the actual stack trace is needed, as a lot of exceptions are\n never actually used).  The actual class has two @code{native} methods,\n one (@code{fillInStackTrace()}) being a method of the class used to obtain\n instances, and the other an instance method, @code{getStackTrace()}.\n@@ -633,7 +633,7 @@ running the finalization process at exit.\n returning an integer which is non-zero for success.  Nothing happens if the\n file has already been loaded.\n @item @code{mapLibraryName(String)} -- The VM should map the system-independent\n-library name supplied to the platform-dependent equivalent (e.g. a @code{.so}\n+library name supplied to the platform-dependent equivalent (e.g.@: a @code{.so}\n or @code{.dll} file)\n @end itemize\n \n@@ -962,7 +962,7 @@ a directory.\n @itemize @bullet\n @item @code{canWriteDirectory(File)} -- Checks that the directory can be\n written to, by trying to create a temporary file in it.\n-@item @code{listRoots()} -- Returns the root of a GNU filesystem i.e. `/'\n+@item @code{listRoots()} -- Returns the root of a GNU filesystem, i.e.@: `/'\n in an array.\n @item @code{isHidden(String)} -- Checks whether the file starts with `.',\n which is how files are hidden on UNIX-style systems.\n@@ -1247,7 +1247,7 @@ by a specific class loader.\n @end itemize\n \n Instrumentation allows to modify the bytecode of a class before it gets read\n-by the VM. In GNU Classpath, the @code{ClassLoader.defineClass} method calls\n+by the VM@. In GNU Classpath, the @code{ClassLoader.defineClass} method calls\n the @code{VMClassLoader.defineClassWithTransformers} method which first checks\n if @code{VMClassLoader.instrumenter} is @code{null}. If it's the case, it\n directly calls @code{VMClassLoader.defineClass}. If it's not the case, the\n@@ -1257,11 +1257,11 @@ object and returns a new bytecode array. Then, it calls the\n @code{VMClassLoader.defineClass} method with this new bytecode array.\n \n The second use of instrumentation is to redefine a class after it has been\n-loaded by the VM. This is done in the Java application by calling the\n+loaded by the VM@. This is done in the Java application by calling the\n @code{Instrumentation.redefineClasses} method of the standard interface on\n a @code{Instrumentation} object. The @code{InstrumentationImpl.redefineClasses}\n method calls the @code{VMInstrumentationImpl.redefineClasses} native method\n-which must be implemented by the VM. The implementation should call the\n+which must be implemented by the VM@. The implementation should call the\n @code{InstrumentationImpl.callTransformers} method.\n \n @node gnu.java.lang.management, java.lang.management, gnu.java.lang, Classpath Hooks\n@@ -1304,7 +1304,7 @@ arguments, excluding those that are directed at the\n this to be a native method.\n @item @code{(getName())} -- The VM developer should choose\n an appropriate name for the virtual machine.  This name can\n-be instance-specific e.g. it can include things like the\n+be instance-specific e.g.@: it can include things like the\n process identifier or host name of the machine, which only\n apply to the current running instance.  Thus, the intention is\n that this name refers to the entity that the other information\n@@ -1611,7 +1611,7 @@ memory pools that the manager maintains.  A default implementation\n which scans the results of @code{getMemoryManagerNames()} for each\n pool is provided.\n @item @code{(isValid(String))} -- Returns true if the specified\n-manager is still valid i.e. it is still in use by the virtual machine.\n+manager is still valid, i.e., it is still in use by the virtual machine.\n @end itemize\n \n @node gnu.java.lang.management.VMGarbageCollectorMXBeanImpl,,gnu.java.lang.management.VMMemoryManagerMXBeanImpl,gnu.java.lang.management\n@@ -1739,7 +1739,7 @@ The following issues are of note;\n The GNU Classpath implementation of @code{java.lang.Class} provides an\n object for storing the internal state of the class maintained by the VM.\n This is the only known place where this matters.  The class is\n-constructed with this data by the VM.  Some VMs do not create the\n+constructed with this data by the VM@.  Some VMs do not create the\n @code{Class} object at the point where the class is defined; instead,\n they wait until a @code{Class} object is actually used.\n \n@@ -1920,7 +1920,7 @@ configured with its jthreads model.\n @item\n @i{Green threads 2}: The essential difference with this model is to\n not switch threads on an event, but at fixed points in the code being\n-executed by the VM. Points chosen could be backward branches (loops)\n+executed by the VM@. Points chosen could be backward branches (loops)\n or method calls. This approach can be advantageous to nonconservative\n garbage collectors, as non-running threads would be at known points\n and can have fixed register maps. It can also reduce the number of\n@@ -1989,7 +1989,7 @@ must wait for the lock.\n As of GNU Classpath 0.15 a system property named @code{gnu.classpath.boot.library.path}\n can be set by the VM to specify the directories which contain GNU Classpath's native\n libraries. Usually this value is given at configuration time and is then hardcoded\n-in the VM. However for development purposes it is handy to switch to another installation\n+in the VM@. However for development purposes it is handy to switch to another installation\n by overriding the properties' value on the command line.\n \n A VM that does not support this feature can simply ignore the property."}]}