{"sha": "843192c0ebde5cc6e4f1abeb02e3ac05b02d984a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzMTkyYzBlYmRlNWNjNmU0ZjFhYmViMDJlM2FjMDViMDJkOTg0YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-02-16T18:46:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-02-16T18:46:04Z"}, "message": "re PR tree-optimization/88074 (g++ hangs on math expression)\n\n\tPR middle-end/88074\n\t* simplify.c (simplify_transformation_to_array): Run post_op\n\timmediately after processing corresponding row, rather than at the\n\tend.\n\t(norm2_scale): New variable.\n\t(add_squared): Rename to ...\n\t(norm2_add_squared): ... this.  Scale down operand and/or result\n\tif needed.\n\t(do_sqrt): Rename to ...\n\t(norm2_do_sqrt): ... this.  Handle the result == e case.  Scale up\n\tresult and clear norm2_scale.\n\t(gfc_simplify_norm2): Clear norm2_scale.  Change add_squared to\n\tnorm2_add_squared and &do_sqrt to norm2_do_sqrt.  Scale up result\n\tand clear norm2_scale again.\n\nFrom-SVN: r268962", "tree": {"sha": "79ecf432d5606a1767ac365b360e68389080f284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79ecf432d5606a1767ac365b360e68389080f284"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/843192c0ebde5cc6e4f1abeb02e3ac05b02d984a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843192c0ebde5cc6e4f1abeb02e3ac05b02d984a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/843192c0ebde5cc6e4f1abeb02e3ac05b02d984a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843192c0ebde5cc6e4f1abeb02e3ac05b02d984a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fe53000bbaa5024af7ceecb950e0a7fd6b189e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3"}], "stats": {"total": 99, "additions": 89, "deletions": 10}, "files": [{"sha": "fb01bf12aa8f4c4c3e940d64928c66690696cac6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843192c0ebde5cc6e4f1abeb02e3ac05b02d984a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843192c0ebde5cc6e4f1abeb02e3ac05b02d984a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=843192c0ebde5cc6e4f1abeb02e3ac05b02d984a", "patch": "@@ -1,3 +1,20 @@\n+2019-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/88074\n+\t* simplify.c (simplify_transformation_to_array): Run post_op\n+\timmediately after processing corresponding row, rather than at the\n+\tend.\n+\t(norm2_scale): New variable.\n+\t(add_squared): Rename to ...\n+\t(norm2_add_squared): ... this.  Scale down operand and/or result\n+\tif needed.\n+\t(do_sqrt): Rename to ...\n+\t(norm2_do_sqrt): ... this.  Handle the result == e case.  Scale up\n+\tresult and clear norm2_scale.\n+\t(gfc_simplify_norm2): Clear norm2_scale.  Change add_squared to\n+\tnorm2_add_squared and &do_sqrt to norm2_do_sqrt.  Scale up result\n+\tand clear norm2_scale again.\n+\n 2019-02-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/71066"}, {"sha": "65059c871d285651d2ed118d5fd840e709638094", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 72, "deletions": 10, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843192c0ebde5cc6e4f1abeb02e3ac05b02d984a/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843192c0ebde5cc6e4f1abeb02e3ac05b02d984a/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=843192c0ebde5cc6e4f1abeb02e3ac05b02d984a", "patch": "@@ -636,6 +636,9 @@ simplify_transformation_to_array (gfc_expr *result, gfc_expr *array, gfc_expr *d\n \tif (*src)\n \t  *dest = op (*dest, gfc_copy_expr (*src));\n \n+      if (post_op)\n+\t*dest = post_op (*dest, *dest);\n+\n       count[0]++;\n       base += sstride[0];\n       dest += dstride[0];\n@@ -671,10 +674,7 @@ simplify_transformation_to_array (gfc_expr *result, gfc_expr *array, gfc_expr *d\n   result_ctor = gfc_constructor_first (result->value.constructor);\n   for (i = 0; i < resultsize; ++i)\n     {\n-      if (post_op)\n-\tresult_ctor->expr = post_op (result_ctor->expr, resultvec[i]);\n-      else\n-\tresult_ctor->expr = resultvec[i];\n+      result_ctor->expr = resultvec[i];\n       result_ctor = gfc_constructor_next (result_ctor);\n     }\n \n@@ -6048,9 +6048,10 @@ gfc_simplify_idnint (gfc_expr *e)\n   return simplify_nint (\"IDNINT\", e, NULL);\n }\n \n+static int norm2_scale;\n \n static gfc_expr *\n-add_squared (gfc_expr *result, gfc_expr *e)\n+norm2_add_squared (gfc_expr *result, gfc_expr *e)\n {\n   mpfr_t tmp;\n \n@@ -6059,8 +6060,45 @@ add_squared (gfc_expr *result, gfc_expr *e)\n \t      && result->expr_type == EXPR_CONSTANT);\n \n   gfc_set_model_kind (result->ts.kind);\n+  int index = gfc_validate_kind (BT_REAL, result->ts.kind, false);\n+  mpfr_exp_t exp;\n+  if (mpfr_regular_p (result->value.real))\n+    {\n+      exp = mpfr_get_exp (result->value.real);\n+      /* If result is getting close to overflowing, scale down.  */\n+      if (exp >= gfc_real_kinds[index].max_exponent - 4\n+\t  && norm2_scale <= gfc_real_kinds[index].max_exponent - 2)\n+\t{\n+\t  norm2_scale += 2;\n+\t  mpfr_div_ui (result->value.real, result->value.real, 16,\n+\t\t       GFC_RND_MODE);\n+\t}\n+    }\n+\n   mpfr_init (tmp);\n-  mpfr_pow_ui (tmp, e->value.real, 2, GFC_RND_MODE);\n+  if (mpfr_regular_p (e->value.real))\n+    {\n+      exp = mpfr_get_exp (e->value.real);\n+      /* If e**2 would overflow or close to overflowing, scale down.  */\n+      if (exp - norm2_scale >= gfc_real_kinds[index].max_exponent / 2 - 2)\n+\t{\n+\t  int new_scale = gfc_real_kinds[index].max_exponent / 2 + 4;\n+\t  mpfr_set_ui (tmp, 1, GFC_RND_MODE);\n+\t  mpfr_set_exp (tmp, new_scale - norm2_scale);\n+\t  mpfr_div (result->value.real, result->value.real, tmp, GFC_RND_MODE);\n+\t  mpfr_div (result->value.real, result->value.real, tmp, GFC_RND_MODE);\n+\t  norm2_scale = new_scale;\n+\t}\n+    }\n+  if (norm2_scale)\n+    {\n+      mpfr_set_ui (tmp, 1, GFC_RND_MODE);\n+      mpfr_set_exp (tmp, norm2_scale);\n+      mpfr_div (tmp, e->value.real, tmp, GFC_RND_MODE);\n+    }\n+  else\n+    mpfr_set (tmp, e->value.real, GFC_RND_MODE);\n+  mpfr_pow_ui (tmp, tmp, 2, GFC_RND_MODE);\n   mpfr_add (result->value.real, result->value.real, tmp,\n \t    GFC_RND_MODE);\n   mpfr_clear (tmp);\n@@ -6070,14 +6108,26 @@ add_squared (gfc_expr *result, gfc_expr *e)\n \n \n static gfc_expr *\n-do_sqrt (gfc_expr *result, gfc_expr *e)\n+norm2_do_sqrt (gfc_expr *result, gfc_expr *e)\n {\n   gcc_assert (e->ts.type == BT_REAL && e->expr_type == EXPR_CONSTANT);\n   gcc_assert (result->ts.type == BT_REAL\n \t      && result->expr_type == EXPR_CONSTANT);\n \n-  mpfr_set (result->value.real, e->value.real, GFC_RND_MODE);\n+  if (result != e)\n+    mpfr_set (result->value.real, e->value.real, GFC_RND_MODE);\n   mpfr_sqrt (result->value.real, result->value.real, GFC_RND_MODE);\n+  if (norm2_scale && mpfr_regular_p (result->value.real))\n+    {\n+      mpfr_t tmp;\n+      mpfr_init (tmp);\n+      mpfr_set_ui (tmp, 1, GFC_RND_MODE);\n+      mpfr_set_exp (tmp, norm2_scale);\n+      mpfr_mul (result->value.real, result->value.real, tmp, GFC_RND_MODE);\n+      mpfr_clear (tmp);\n+    }\n+  norm2_scale = 0;\n+\n   return result;\n }\n \n@@ -6100,15 +6150,27 @@ gfc_simplify_norm2 (gfc_expr *e, gfc_expr *dim)\n   if (size_zero)\n     return result;\n \n+  norm2_scale = 0;\n   if (!dim || e->rank == 1)\n     {\n       result = simplify_transformation_to_scalar (result, e, NULL,\n-\t\t\t\t\t\t  add_squared);\n+\t\t\t\t\t\t  norm2_add_squared);\n       mpfr_sqrt (result->value.real, result->value.real, GFC_RND_MODE);\n+      if (norm2_scale && mpfr_regular_p (result->value.real))\n+\t{\n+\t  mpfr_t tmp;\n+\t  mpfr_init (tmp);\n+\t  mpfr_set_ui (tmp, 1, GFC_RND_MODE);\n+\t  mpfr_set_exp (tmp, norm2_scale);\n+\t  mpfr_mul (result->value.real, result->value.real, tmp, GFC_RND_MODE);\n+\t  mpfr_clear (tmp);\n+\t}\n+      norm2_scale = 0;\n     }\n   else\n     result = simplify_transformation_to_array (result, e, dim, NULL,\n-\t\t\t\t\t       add_squared, &do_sqrt);\n+\t\t\t\t\t       norm2_add_squared,\n+\t\t\t\t\t       norm2_do_sqrt);\n \n   return result;\n }"}]}