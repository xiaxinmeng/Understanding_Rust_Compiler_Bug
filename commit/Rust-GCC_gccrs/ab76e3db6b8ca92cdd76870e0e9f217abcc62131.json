{"sha": "ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI3NmUzZGI2YjhjYTkyY2RkNzY4NzBlMGU5ZjIxN2FiY2M2MjEzMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:22Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:22Z"}, "message": "aarch64: Add general unpacked SVE conditional binary arithmetic\n\nThis patch adds support for conditional binary ADD, SUB, MUL, SMAX,\nUMAX, SMIN, UMIN, LSL, LSR, ASR, AND, ORR and EOR.  It's not really\npossible to split it up further given how the patterns are written.\n\nMin, max and right-shift need the element size rather than the container\nsize.  The others would work with both, although MUL should be more\nefficient when applied to elements instead of containers.\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (@cond_<SVE_INT_BINARY:optab><mode>)\n\t(*cond_<SVE_INT_BINARY:optab><mode>_2): Extend from SVE_FULL_I\n\tto SVE_I.\n\t(*cond_<SVE_INT_BINARY:optab><mode>_3): Likewise.\n\t(*cond_<SVE_INT_BINARY:optab><mode>_any): Likewise.\n\t(*cond_<SVE_INT_BINARY:optab><mode>_2_const): Likewise.\n\t(*cond_<SVE_INT_BINARY:optab><mode>_any_const): Likewise.\n\ngcc/testsuite/\n\t* g++.target/aarch64/sve/cond_arith_1.C: New test.\n\t* g++.target/aarch64/sve/cond_arith_2.C: Likewise.\n\t* g++.target/aarch64/sve/cond_arith_3.C: Likewise.\n\t* g++.target/aarch64/sve/cond_arith_4.C: Likewise.\n\t* g++.target/aarch64/sve/cond_shift_1.C: New test.\n\t* g++.target/aarch64/sve/cond_shift_2.C: Likewise.\n\t* g++.target/aarch64/sve/cond_shift_3.C: Likewise.\n\t* g++.target/aarch64/sve/cond_shift_4.C: Likewise.", "tree": {"sha": "6348044abb6e2e355eba798214ae8b238c6fb230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6348044abb6e2e355eba798214ae8b238c6fb230"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48c7f5b88116c894d76209db0f47216ed5ccd333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48c7f5b88116c894d76209db0f47216ed5ccd333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48c7f5b88116c894d76209db0f47216ed5ccd333"}], "stats": {"total": 797, "additions": 764, "deletions": 33}, "files": [{"sha": "547f34134a17b5297efde4a1536983ebe971654c", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "patch": "@@ -3687,25 +3687,25 @@\n \n ;; Predicated integer operations with merging.\n (define_expand \"@cond_<optab><mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\")\n-\t   (SVE_INT_BINARY:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\")\n-\t     (match_operand:SVE_FULL_I 3 \"<sve_pred_int_rhs2_operand>\"))\n-\t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_reg_or_zero\")]\n+\t   (SVE_INT_BINARY:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\")\n+\t     (match_operand:SVE_I 3 \"<sve_pred_int_rhs2_operand>\"))\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_reg_or_zero\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n )\n \n ;; Predicated integer operations, merging with the first input.\n (define_insn \"*cond_<optab><mode>_2\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (SVE_INT_BINARY:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\")\n-\t     (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))\n+\t   (SVE_INT_BINARY:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t     (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))\n \t   (match_dup 2)]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n@@ -3717,12 +3717,12 @@\n \n ;; Predicated integer operations, merging with the second input.\n (define_insn \"*cond_<optab><mode>_3\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (SVE_INT_BINARY:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w\")\n-\t     (match_operand:SVE_FULL_I 3 \"register_operand\" \"0, w\"))\n+\t   (SVE_INT_BINARY:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n+\t     (match_operand:SVE_I 3 \"register_operand\" \"0, w\"))\n \t   (match_dup 3)]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\"\n@@ -3734,13 +3734,13 @@\n \n ;; Predicated integer operations, merging with an independent value.\n (define_insn_and_rewrite \"*cond_<optab><mode>_any\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=&w, &w, &w, &w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, &w, &w, &w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl\")\n-\t   (SVE_INT_BINARY:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w, w, w, w\")\n-\t     (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, 0, w, w, w\"))\n-\t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, 0, w\")]\n+\t   (SVE_INT_BINARY:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"0, w, w, w, w\")\n+\t     (match_operand:SVE_I 3 \"register_operand\" \"w, 0, w, w, w\"))\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, 0, w\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\n    && !rtx_equal_p (operands[2], operands[4])\n@@ -4579,12 +4579,12 @@\n \n ;; Predicated integer shift, merging with the first input.\n (define_insn \"*cond_<optab><mode>_2_const\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (ASHIFT:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\")\n-\t     (match_operand:SVE_FULL_I 3 \"aarch64_simd_<lr>shift_imm\"))\n+\t   (ASHIFT:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t     (match_operand:SVE_I 3 \"aarch64_simd_<lr>shift_imm\"))\n \t   (match_dup 2)]\n \t UNSPEC_SEL))]\n   \"TARGET_SVE\"\n@@ -4596,13 +4596,13 @@\n \n ;; Predicated integer shift, merging with an independent value.\n (define_insn_and_rewrite \"*cond_<optab><mode>_any_const\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, &w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, &w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n-\t   (ASHIFT:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, w, w\")\n-\t     (match_operand:SVE_FULL_I 3 \"aarch64_simd_<lr>shift_imm\"))\n-\t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, 0, w\")]\n+\t   (ASHIFT:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"w, w, w\")\n+\t     (match_operand:SVE_I 3 \"aarch64_simd_<lr>shift_imm\"))\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, 0, w\")]\n \t UNSPEC_SEL))]\n   \"TARGET_SVE && !rtx_equal_p (operands[2], operands[4])\"\n   \"@"}, {"sha": "0c6f640e35b5a3fdc0438a532403fd5cfe31c6c9", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_arith_1.C", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_arith_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_arith_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_arith_1.C?ref=ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define op_add(A, B) ((A) + (B))\n+#define op_sub(A, B) ((A) - (B))\n+#define op_and(A, B) ((A) & (B))\n+#define op_ior(A, B) ((A) | (B))\n+#define op_xor(A, B) ((A) ^ (B))\n+#define op_mul(A, B) ((A) * (B))\n+#define op_max(A, B) ((A) > (B) ? (A) : (B))\n+#define op_min(A, B) ((A) < (B) ? (A) : (B))\n+\n+#define TEST_SHIFT(TYPE, NAME) \\\n+  TYPE \\\n+  NAME##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return a ? op_##NAME (b, c) : b; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_SHIFT (TYPE##SIZE, add) \\\n+  TEST_SHIFT (TYPE##SIZE, sub) \\\n+  TEST_SHIFT (TYPE##SIZE, and) \\\n+  TEST_SHIFT (TYPE##SIZE, ior) \\\n+  TEST_SHIFT (TYPE##SIZE, xor) \\\n+  TEST_SHIFT (TYPE##SIZE, mul) \\\n+  TEST_SHIFT (TYPE##SIZE, min) \\\n+  TEST_SHIFT (TYPE##SIZE, max)\n+\n+TEST_TYPE (int8_t, 32)\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (int8_t, 64)\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (int16_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (int8_t, 128)\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (int16_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (int32_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "8965c94987358d10207d014a9632bb44e7b54c1e", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_arith_2.C", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_arith_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_arith_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_arith_2.C?ref=ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define op_add(A, B) ((A) + (B))\n+#define op_sub(A, B) ((A) - (B))\n+#define op_and(A, B) ((A) & (B))\n+#define op_ior(A, B) ((A) | (B))\n+#define op_xor(A, B) ((A) ^ (B))\n+#define op_mul(A, B) ((A) * (B))\n+#define op_max(A, B) ((A) > (B) ? (A) : (B))\n+#define op_min(A, B) ((A) < (B) ? (A) : (B))\n+\n+#define TEST_SHIFT(TYPE, NAME) \\\n+  TYPE \\\n+  NAME##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return a ? op_##NAME (b, c) : c; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_SHIFT (TYPE##SIZE, add) \\\n+  TEST_SHIFT (TYPE##SIZE, sub) \\\n+  TEST_SHIFT (TYPE##SIZE, and) \\\n+  TEST_SHIFT (TYPE##SIZE, ior) \\\n+  TEST_SHIFT (TYPE##SIZE, xor) \\\n+  TEST_SHIFT (TYPE##SIZE, mul) \\\n+  TEST_SHIFT (TYPE##SIZE, min) \\\n+  TEST_SHIFT (TYPE##SIZE, max)\n+\n+TEST_TYPE (int8_t, 32)\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (int8_t, 64)\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (int16_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (int8_t, 128)\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (int16_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (int32_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tsubr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "3aa8669fe3e13b2a3106f5e463b7fa2c4a55bd38", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_arith_3.C", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_arith_3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_arith_3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_arith_3.C?ref=ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define op_add(A, B) ((A) + (B))\n+#define op_sub(A, B) ((A) - (B))\n+#define op_and(A, B) ((A) & (B))\n+#define op_ior(A, B) ((A) | (B))\n+#define op_xor(A, B) ((A) ^ (B))\n+#define op_mul(A, B) ((A) * (B))\n+#define op_max(A, B) ((A) > (B) ? (A) : (B))\n+#define op_min(A, B) ((A) < (B) ? (A) : (B))\n+\n+#define TEST_SHIFT(TYPE, NAME) \\\n+  TYPE \\\n+  NAME##_##TYPE##_reg (TYPE a, TYPE b, TYPE c, TYPE d) \\\n+  { \\\n+    return a ? op_##NAME (b, c) : d; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_SHIFT (TYPE##SIZE, add) \\\n+  TEST_SHIFT (TYPE##SIZE, sub) \\\n+  TEST_SHIFT (TYPE##SIZE, and) \\\n+  TEST_SHIFT (TYPE##SIZE, ior) \\\n+  TEST_SHIFT (TYPE##SIZE, xor) \\\n+  TEST_SHIFT (TYPE##SIZE, mul) \\\n+  TEST_SHIFT (TYPE##SIZE, min) \\\n+  TEST_SHIFT (TYPE##SIZE, max)\n+\n+TEST_TYPE (int8_t, 32)\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (int8_t, 64)\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (int16_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (int8_t, 128)\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (int16_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (int32_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b\\n} 48 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 32 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 16 } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "efa4b8953a3ecba78225c93469a03b1de14b55cc", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_arith_4.C", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_arith_4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_arith_4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_arith_4.C?ref=ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define op_add(A, B) ((A) + (B))\n+#define op_sub(A, B) ((A) - (B))\n+#define op_and(A, B) ((A) & (B))\n+#define op_ior(A, B) ((A) | (B))\n+#define op_xor(A, B) ((A) ^ (B))\n+#define op_mul(A, B) ((A) * (B))\n+#define op_max(A, B) ((A) > (B) ? (A) : (B))\n+#define op_min(A, B) ((A) < (B) ? (A) : (B))\n+\n+#define TEST_SHIFT(TYPE, NAME) \\\n+  TYPE \\\n+  NAME##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return a ? op_##NAME (b, c) : 0; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_SHIFT (TYPE##SIZE, add) \\\n+  TEST_SHIFT (TYPE##SIZE, sub) \\\n+  TEST_SHIFT (TYPE##SIZE, and) \\\n+  TEST_SHIFT (TYPE##SIZE, ior) \\\n+  TEST_SHIFT (TYPE##SIZE, xor) \\\n+  TEST_SHIFT (TYPE##SIZE, mul) \\\n+  TEST_SHIFT (TYPE##SIZE, min) \\\n+  TEST_SHIFT (TYPE##SIZE, max)\n+\n+TEST_TYPE (int8_t, 32)\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (int8_t, 64)\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (int16_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (int8_t, 128)\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (int16_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (int32_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tsub\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tand\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\torr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\teor\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmul\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsmax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumin\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tumax\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/z, z[0-9]+\\.b\\n} 48 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h\\n} 32 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 16 } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "5e028a0c75712e62773718df0ac21023e125b253", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_shift_1.C", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_shift_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_shift_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_shift_1.C?ref=ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_SHIFT_IMM(TYPE, NAME, OP, AMT) \\\n+  TYPE \\\n+  NAME##_##TYPE##_##AMT (TYPE a, TYPE b) \\\n+  { \\\n+    return a ? b OP AMT : b; \\\n+  }\n+\n+#define TEST_SHIFT(TYPE, NAME, OP, LIMIT) \\\n+  TYPE \\\n+  NAME##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return a ? b OP c : b; \\\n+  } \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, 1) \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, 5) \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, LIMIT)\n+\n+#define TEST_TYPE(TYPE, SIZE, LIMIT) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_SHIFT (TYPE##SIZE, shl, <<, LIMIT) \\\n+  TEST_SHIFT (TYPE##SIZE, shr, >>, LIMIT) \\\n+\n+TEST_TYPE (int8_t, 32, 7)\n+TEST_TYPE (uint8_t, 32, 7)\n+\n+TEST_TYPE (int8_t, 64, 7)\n+TEST_TYPE (uint8_t, 64, 7)\n+TEST_TYPE (int16_t, 64, 15)\n+TEST_TYPE (uint16_t, 64, 15)\n+\n+TEST_TYPE (int8_t, 128, 7)\n+TEST_TYPE (uint8_t, 128, 7)\n+TEST_TYPE (int16_t, 128, 15)\n+TEST_TYPE (uint16_t, 128, 15)\n+TEST_TYPE (int32_t, 128, 31)\n+TEST_TYPE (uint32_t, 128, 31)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #1\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #5\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #5\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #5\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #7\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #15\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #31\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #7\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #31\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #7\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #31\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "b8555f735d29bf3a2e5cae4793429744a8e34bf3", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_shift_2.C", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_shift_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_shift_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_shift_2.C?ref=ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "patch": "@@ -0,0 +1,91 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_SHIFT_IMM(TYPE, NAME, OP, AMT) \\\n+  TYPE \\\n+  NAME##_##TYPE##_##AMT (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return a ? b OP AMT : AMT; \\\n+  }\n+\n+#define TEST_SHIFT(TYPE, NAME, OP, LIMIT) \\\n+  TYPE \\\n+  NAME##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return a ? b OP c : c; \\\n+  } \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, 1) \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, 5) \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, LIMIT)\n+\n+#define TEST_TYPE(TYPE, SIZE, LIMIT) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_SHIFT (TYPE##SIZE, shl, <<, LIMIT) \\\n+  TEST_SHIFT (TYPE##SIZE, shr, >>, LIMIT) \\\n+\n+TEST_TYPE (int8_t, 32, 7)\n+TEST_TYPE (uint8_t, 32, 7)\n+\n+TEST_TYPE (int8_t, 64, 7)\n+TEST_TYPE (uint8_t, 64, 7)\n+TEST_TYPE (int16_t, 64, 15)\n+TEST_TYPE (uint16_t, 64, 15)\n+\n+TEST_TYPE (int8_t, 128, 7)\n+TEST_TYPE (uint8_t, 128, 7)\n+TEST_TYPE (int16_t, 128, 15)\n+TEST_TYPE (uint16_t, 128, 15)\n+TEST_TYPE (int32_t, 128, 31)\n+TEST_TYPE (uint32_t, 128, 31)\n+\n+/* { dg-final { scan-assembler-times {\\tlslr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlslr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlslr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsrr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsrr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsrr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasrr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasrr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasrr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #1\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #5\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #5\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #5\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #7\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #15\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #31\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #7\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #31\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #7\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #31\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "b3da23ccb3a5a95c2d9fe0f47750910b35230b60", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_shift_3.C", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_shift_3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_shift_3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_shift_3.C?ref=ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_SHIFT_IMM(TYPE, NAME, OP, AMT) \\\n+  TYPE \\\n+  NAME##_##TYPE##_##AMT (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return a ? b OP AMT : c; \\\n+  }\n+\n+#define TEST_SHIFT(TYPE, NAME, OP, LIMIT) \\\n+  TYPE \\\n+  NAME##_##TYPE##_reg (TYPE a, TYPE b, TYPE c, TYPE d) \\\n+  { \\\n+    return a ? b OP c : d; \\\n+  } \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, 1) \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, 5) \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, LIMIT)\n+\n+#define TEST_TYPE(TYPE, SIZE, LIMIT) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_SHIFT (TYPE##SIZE, shl, <<, LIMIT) \\\n+  TEST_SHIFT (TYPE##SIZE, shr, >>, LIMIT) \\\n+\n+TEST_TYPE (int8_t, 32, 7)\n+TEST_TYPE (uint8_t, 32, 7)\n+\n+TEST_TYPE (int8_t, 64, 7)\n+TEST_TYPE (uint8_t, 64, 7)\n+TEST_TYPE (int16_t, 64, 15)\n+TEST_TYPE (uint16_t, 64, 15)\n+\n+TEST_TYPE (int8_t, 128, 7)\n+TEST_TYPE (uint8_t, 128, 7)\n+TEST_TYPE (int16_t, 128, 15)\n+TEST_TYPE (uint16_t, 128, 15)\n+TEST_TYPE (int32_t, 128, 31)\n+TEST_TYPE (uint32_t, 128, 31)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #1\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #5\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #5\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #5\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #7\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #15\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #31\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #7\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #31\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #7\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #31\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b\\n} 48 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 32 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 16 } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "68e06bc0d063ac786ed92a78764b815a82b2c75f", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_shift_4.C", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_shift_4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab76e3db6b8ca92cdd76870e0e9f217abcc62131/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_shift_4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_shift_4.C?ref=ab76e3db6b8ca92cdd76870e0e9f217abcc62131", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_SHIFT_IMM(TYPE, NAME, OP, AMT) \\\n+  TYPE \\\n+  NAME##_##TYPE##_##AMT (TYPE a, TYPE b) \\\n+  { \\\n+    return a ? b OP AMT : 0; \\\n+  }\n+\n+#define TEST_SHIFT(TYPE, NAME, OP, LIMIT) \\\n+  TYPE \\\n+  NAME##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return a ? b OP c : 0; \\\n+  } \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, 1) \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, 5) \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, LIMIT)\n+\n+#define TEST_TYPE(TYPE, SIZE, LIMIT) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_SHIFT (TYPE##SIZE, shl, <<, LIMIT) \\\n+  TEST_SHIFT (TYPE##SIZE, shr, >>, LIMIT) \\\n+\n+TEST_TYPE (int8_t, 32, 7)\n+TEST_TYPE (uint8_t, 32, 7)\n+\n+TEST_TYPE (int8_t, 64, 7)\n+TEST_TYPE (uint8_t, 64, 7)\n+TEST_TYPE (int16_t, 64, 15)\n+TEST_TYPE (uint16_t, 64, 15)\n+\n+TEST_TYPE (int8_t, 128, 7)\n+TEST_TYPE (uint8_t, 128, 7)\n+TEST_TYPE (int16_t, 128, 15)\n+TEST_TYPE (uint16_t, 128, 15)\n+TEST_TYPE (int32_t, 128, 31)\n+TEST_TYPE (uint32_t, 128, 31)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #1\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #5\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #5\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #5\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #5\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #7\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #15\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #31\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #7\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #31\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, #7\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #31\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/z, z[0-9]+\\.b\\n} 48 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h\\n} 32 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 16 } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}]}