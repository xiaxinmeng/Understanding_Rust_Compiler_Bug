{"sha": "ebe0dd380206cd6fbc294ed254b2571441844d16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJlMGRkMzgwMjA2Y2Q2ZmJjMjk0ZWQyNTRiMjU3MTQ0MTg0NGQxNg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-27T17:36:20Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-27T17:36:20Z"}, "message": "re PR target/54089 ([SH] Refactor shift patterns)\n\n\tPR target/54089\n\t* config/sh/sh.c (shiftcosts): Remove case where first operand \n\tis a const_int.  Move COSTS_N_INSNS usage into caller ...\n\t(sh_rtx_costs) ... here.  Return false when shiftcosts cannot be\n\tcalculated instead of MAX_COST.\n\nFrom-SVN: r189917", "tree": {"sha": "c5690e1af636ae863119469a318c3586dffb1a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5690e1af636ae863119469a318c3586dffb1a48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebe0dd380206cd6fbc294ed254b2571441844d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebe0dd380206cd6fbc294ed254b2571441844d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebe0dd380206cd6fbc294ed254b2571441844d16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebe0dd380206cd6fbc294ed254b2571441844d16/comments", "author": null, "committer": null, "parents": [{"sha": "d03cefc12cf6decd1eda9d35a056f6f7b1e42dff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d03cefc12cf6decd1eda9d35a056f6f7b1e42dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d03cefc12cf6decd1eda9d35a056f6f7b1e42dff"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "66406b3d1831a1d4751fda01ac785a9dae838316", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebe0dd380206cd6fbc294ed254b2571441844d16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebe0dd380206cd6fbc294ed254b2571441844d16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebe0dd380206cd6fbc294ed254b2571441844d16", "patch": "@@ -1,3 +1,11 @@\n+2012-07-27  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54089\n+\t* config/sh/sh.c (shiftcosts): Remove case where first operand \n+\tis a const_int.  Move COSTS_N_INSNS usage into caller ...\n+\t(sh_rtx_costs) ... here.  Return false when shiftcosts cannot be\n+\tcalculated instead of MAX_COST.\n+\n 2012-07-27  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-cfg.c (gimple_can_merge_blocks_p): Do more fine-grained"}, {"sha": "8edbb34e05987759aa1e68fff9e5eaf8fbf9bc9e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebe0dd380206cd6fbc294ed254b2571441844d16/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebe0dd380206cd6fbc294ed254b2571441844d16/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=ebe0dd380206cd6fbc294ed254b2571441844d16", "patch": "@@ -2859,26 +2859,22 @@ shiftcosts (rtx x)\n {\n   int value;\n \n-  /* There is no pattern for constant first operand.  */\n-  if (CONST_INT_P (XEXP (x, 0)))\n-    return MAX_COST;\n-\n   if (TARGET_SHMEDIA)\n-    return COSTS_N_INSNS (1);\n+    return 1;\n \n   if (GET_MODE_SIZE (GET_MODE (x)) > UNITS_PER_WORD)\n     {\n       if (GET_MODE (x) == DImode\n \t  && CONST_INT_P (XEXP (x, 1))\n \t  && INTVAL (XEXP (x, 1)) == 1)\n-\treturn COSTS_N_INSNS (2);\n+\treturn 2;\n \n       /* Everything else is invalid, because there is no pattern for it.  */\n-      return MAX_COST;\n+      return -1;\n     }\n   /* If shift by a non constant, then this will be expensive.  */\n   if (!CONST_INT_P (XEXP (x, 1)))\n-    return COSTS_N_INSNS (SH_DYNAMIC_SHIFT_COST);\n+    return SH_DYNAMIC_SHIFT_COST;\n \n   /* Otherwise, return the true cost in instructions.  Cope with out of range\n      shift counts more or less arbitrarily.  */\n@@ -2887,13 +2883,14 @@ shiftcosts (rtx x)\n   if (GET_CODE (x) == ASHIFTRT)\n     {\n       int cost = ashiftrt_insns[value];\n-      /* If SH3, then we put the constant in a reg and use shad.  */\n+      /* If dynamic shifts are available and profitable in this case, then we\n+\t put the constant in a reg and use shad.  */\n       if (cost > 1 + SH_DYNAMIC_SHIFT_COST)\n \tcost = 1 + SH_DYNAMIC_SHIFT_COST;\n-      return COSTS_N_INSNS (cost);\n+      return cost;\n     }\n   else\n-    return COSTS_N_INSNS (shift_insns[value]);\n+    return shift_insns[value];\n }\n \n /* Return the cost of an AND/XOR/IOR operation.  */\n@@ -3147,8 +3144,13 @@ sh_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,\n     case ASHIFT:\n     case ASHIFTRT:\n     case LSHIFTRT:\n-      *total = shiftcosts (x);\n-      return true;\n+      {\n+\tint cost = shiftcosts (x);\n+\tif (cost < 0)\n+\t  return false;\n+\t*total = COSTS_N_INSNS (cost);\n+\treturn true;\n+      }\n \n     case DIV:\n     case UDIV:"}]}