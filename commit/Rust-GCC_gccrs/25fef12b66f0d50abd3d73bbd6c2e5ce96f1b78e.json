{"sha": "25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVmZWYxMmI2NmYwZDUwYWJkM2Q3M2JiZDZjMmU1Y2U5NmYxYjc4ZQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "1999-08-03T00:30:53Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "1999-08-03T00:30:53Z"}, "message": "ServerSocket.java: Define ANY_IF.\n\n        * java/net/ServerSocket.java: Define ANY_IF.\n        (ServerSocket (int,int)): Use ANY_IF instead of null to bind to\n        all network interfaces.\n        * java/net/DatagramSocket.java (DatagramSocket): ditto.\n        * java/net/natPlainSocketImpl.cc (bind): Expect 0.0.0' instead of\n        null.\n        * java/net/natPlainDatagramSocketImpl (bind): Expect 0.0.0'\n        instead of null.\n\nFrom-SVN: r28429", "tree": {"sha": "78d5c8974c85c8fca85f6fa82aca2c306a8999c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78d5c8974c85c8fca85f6fa82aca2c306a8999c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/comments", "author": null, "committer": null, "parents": [{"sha": "a0e4da0d17c4722c9c8e6c84acdac3ff4e33888b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e4da0d17c4722c9c8e6c84acdac3ff4e33888b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e4da0d17c4722c9c8e6c84acdac3ff4e33888b"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "dcaae77c40cc8f16e2020874ae86a6910da746d5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e", "patch": "@@ -2,6 +2,14 @@\n \n \t* boehm.cc (_Jv_RegisterFinalizer): Cast `meth' to GC_PTR.\n \t* exception.cc (_Jv_Throw): Cast `_Jv_type_matcher' to __eh_matcher.\n+\t* java/net/ServerSocket.java: Define ANY_IF.\n+\t(ServerSocket (int,int)): Use ANY_IF instead of null to bind to\n+\tall network interfaces.\n+\t* java/net/DatagramSocket.java (DatagramSocket): ditto.\n+\t* java/net/natPlainSocketImpl.cc (bind): Expect `0.0.0.0' instead of\n+\tnull.\n+\t* java/net/natPlainDatagramSocketImpl (bind): Expect `0.0.0.0'\n+\tinstead of null.\n \n 1999-08-01  Alexandre Oliva  <oliva@dcc.unicamp.br>\n "}, {"sha": "f9e72bade8efcf4345ddfe07f1665400cb42449b", "filename": "libjava/boehm.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e", "patch": "@@ -260,7 +260,7 @@ call_finalizer (GC_PTR obj, GC_PTR client_data)\n void\n _Jv_RegisterFinalizer (void *object, _Jv_FinalizerFunc *meth)\n {\n-  GC_REGISTER_FINALIZER_NO_ORDER (object, call_finalizer, (GC_PTR)meth,\n+  GC_REGISTER_FINALIZER_NO_ORDER (object, call_finalizer, (GC_PTR) meth,\n \t\t\t\t  NULL, NULL);\n }\n "}, {"sha": "9a0c79628fc5d85b1892a4d3ccd0fec5a0f739f5", "filename": "libjava/exception.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fexception.cc?ref=25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e", "patch": "@@ -147,7 +147,7 @@ _Jv_Throw (void *value)\n       _Jv_eh_alloc ();\n       ehinfo = *(__get_eh_info ());\n     }\n-  ehinfo->eh_info.match_function = (__eh_matcher)_Jv_type_matcher;\n+  ehinfo->eh_info.match_function = (__eh_matcher) _Jv_type_matcher;\n   ehinfo->eh_info.language = EH_LANG_Java;\n   ehinfo->eh_info.version = 1;\n   ehinfo->value = value;"}, {"sha": "6f5e73549955a4b4a975564a88eeeb9b8ca4986b", "filename": "libjava/java/net/DatagramSocket.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2Fjava%2Fnet%2FDatagramSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FDatagramSocket.java?ref=25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e", "patch": "@@ -28,12 +28,12 @@\n \n   public DatagramSocket() throws SocketException\n   {\n-    this(0, null);\n+    this(0, ServerSocket.ANY_IF);\n   }\n \n   public DatagramSocket(int port) throws SocketException\n   {\n-    this(port, null);\n+    this(port, ServerSocket.ANY_IF);\n   }\n \n   public DatagramSocket(int port, InetAddress laddr) throws SocketException"}, {"sha": "95c9f358c1c1997649effcac0f7cc00f712782e1", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e", "patch": "@@ -25,6 +25,10 @@\n   static SocketImplFactory factory;\n   SocketImpl impl;\n \n+  static final byte[] zeros = {0,0,0,0};\n+  /* dummy InetAddress, used to bind socket to any (all) network interfaces */\n+  static final InetAddress ANY_IF = new InetAddress(zeros, null);\n+\n   public ServerSocket (int port)\n     throws java.io.IOException\n   {\n@@ -34,7 +38,7 @@ public ServerSocket (int port)\n   public ServerSocket (int port, int backlog)\n     throws java.io.IOException\n   {\n-    this(port, backlog, null);\n+    this(port, backlog, ANY_IF);\n   }\n \n   public ServerSocket (int port, int backlog, InetAddress bindAddr)"}, {"sha": "8ef7fd2bd3129217d432118bdbad43703d5e2f05", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e", "patch": "@@ -101,16 +101,10 @@ java::net::PlainDatagramSocketImpl::bind (jint lport,\n   // FIXME: prob. need to do a setsockopt with SO_BROADCAST to allow multicast.\n   union SockAddr u;\n   struct sockaddr *ptr = (struct sockaddr *) &u.address;\n-  jbyte *bytes = NULL;\n   // FIXME: Use getaddrinfo() to get actual protocol instead of assuming ipv4.\n-  int len = 4;\t// Initialize for INADDR_ANY in case host is NULL.\n-\n-  if (host != NULL)\n-    {\n-      jbyteArray haddress = host->address;\n-      bytes = elements (haddress);\n-      len = haddress->length;\n-    }\n+  jbyteArray haddress = host->address;\n+  jbyte *bytes = elements (haddress);\n+  int len = haddress->length;\n \n   if (len == 4)\n     {"}, {"sha": "d42b821614f3c6bfd1c76fee6a75d71f2417127a", "filename": "libjava/java/net/natPlainSocketImpl.cc", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc?ref=25fef12b66f0d50abd3d73bbd6c2e5ce96f1b78e", "patch": "@@ -71,17 +71,10 @@ java::net::PlainSocketImpl::bind (java::net::InetAddress *host, jint lport)\n {\n   union SockAddr u;\n   struct sockaddr *ptr = (struct sockaddr *) &u.address;\n-  jbyte *bytes = NULL;\n-  // FIXME: Use getaddrinfo() to get actual protocol instead of assuming ipv4.\n-  int len = 4;\t// Initialize for INADDR_ANY in case host is NULL.\n+  jbyteArray haddress = host->address;\n+  jbyte *bytes = elements (haddress);\n+  int len = haddress->length;\n \n-  if (host != NULL)\n-    {\n-      jbyteArray haddress = host->address;\n-      bytes = elements (haddress);\n-      len = haddress->length;\n-    }\n-  \n   if (len == 4)\n     {\n       u.address.sin_family = AF_INET;"}]}