{"sha": "bac564c53e908cff16f9938320a344d62bca26a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFjNTY0YzUzZTkwOGNmZjE2Zjk5MzgzMjBhMzQ0ZDYyYmNhMjZhNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-24T21:07:18Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-24T21:07:18Z"}, "message": "runtime: Make runtime.Stack actually work.\n\nFrom-SVN: r187854", "tree": {"sha": "a27dc3ab64413eb9182aec30bb5d15c96e7bb5e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a27dc3ab64413eb9182aec30bb5d15c96e7bb5e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bac564c53e908cff16f9938320a344d62bca26a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bac564c53e908cff16f9938320a344d62bca26a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bac564c53e908cff16f9938320a344d62bca26a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bac564c53e908cff16f9938320a344d62bca26a7/comments", "author": null, "committer": null, "parents": [{"sha": "27c53c0cceefe287c5dd8776fc6668d419bfc1b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c53c0cceefe287c5dd8776fc6668d419bfc1b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c53c0cceefe287c5dd8776fc6668d419bfc1b1"}], "stats": {"total": 127, "additions": 61, "deletions": 66}, "files": [{"sha": "4e99ca7d2f47924a2913fe44efb5bd20588d745d", "filename": "libgo/runtime/go-traceback.c", "status": "modified", "additions": 23, "deletions": 43, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac564c53e908cff16f9938320a344d62bca26a7/libgo%2Fruntime%2Fgo-traceback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac564c53e908cff16f9938320a344d62bca26a7/libgo%2Fruntime%2Fgo-traceback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-traceback.c?ref=bac564c53e908cff16f9938320a344d62bca26a7", "patch": "@@ -6,57 +6,37 @@\n \n #include \"config.h\"\n \n-#include \"unwind.h\"\n-\n #include \"runtime.h\"\n #include \"go-string.h\"\n \n-static _Unwind_Reason_Code\n-traceback (struct _Unwind_Context *context, void *varg)\n+/* Print a stack trace for the current goroutine.  */\n+\n+void\n+runtime_traceback ()\n {\n-  int *parg = (int *) varg;\n-  uintptr pc;\n-  int ip_before_insn = 0;\n-  struct __go_string fn;\n-  struct __go_string file;\n-  int line;\n-\n-#ifdef HAVE_GETIPINFO\n-  pc = _Unwind_GetIPInfo (context, &ip_before_insn);\n-#else\n-  pc = _Unwind_GetIP (context);\n-#endif\n-\n-  if (*parg > 100)\n-    return _URC_END_OF_STACK;\n-  ++*parg;\n-\n-  /* FIXME: If PC is in the __morestack routine, we should ignore\n-     it.  */\n-\n-  /* Back up to the call instruction.  */\n-  if (!ip_before_insn)\n-    --pc;\n-\n-  if (!__go_file_line (pc, &fn, &file, &line))\n-    return _URC_END_OF_STACK;\n-\n-  if (runtime_showframe (fn.__data))\n-    {\n-      runtime_printf (\"%s\\n\", fn.__data);\n-      runtime_printf (\"\\t%s:%d\\n\", file.__data, line);\n-    }\n+  uintptr pcbuf[100];\n+  int32 c;\n \n-  return _URC_NO_REASON;\n+  c = runtime_callers (1, pcbuf, sizeof pcbuf / sizeof pcbuf[0]);\n+  runtime_printtrace (pcbuf, c);\n }\n \n-/* Print a stack trace for the current goroutine.  */\n-\n void\n-runtime_traceback ()\n+runtime_printtrace (uintptr *pcbuf, int32 c)\n {\n-  int c;\n+  int32 i;\n \n-  c = 0;\n-  _Unwind_Backtrace (traceback, &c);\n+  for (i = 0; i < c; ++i)\n+    {\n+      struct __go_string fn;\n+      struct __go_string file;\n+      int line;\n+\n+      if (__go_file_line (pcbuf[i], &fn, &file, &line)\n+\t  && runtime_showframe (fn.__data))\n+\t{\n+\t  runtime_printf (\"%s\\n\", fn.__data);\n+\t  runtime_printf (\"\\t%s:%d\\n\", file.__data, line);\n+\t}\n+    }\n }"}, {"sha": "875abe38d6127da6e9dd882c0c52997bed8e92e5", "filename": "libgo/runtime/mprof.goc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac564c53e908cff16f9938320a344d62bca26a7/libgo%2Fruntime%2Fmprof.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac564c53e908cff16f9938320a344d62bca26a7/libgo%2Fruntime%2Fmprof.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmprof.goc?ref=bac564c53e908cff16f9938320a344d62bca26a7", "patch": "@@ -343,6 +343,7 @@ func ThreadCreateProfile(p Slice) (n int32, ok bool) {\n \n func Stack(b Slice, all bool) (n int32) {\n \tbyte *pc, *sp;\n+\tbool enablegc;\n \t\n \tsp = runtime_getcallersp(&b);\n \tpc = runtime_getcallerpc(&b);\n@@ -351,6 +352,8 @@ func Stack(b Slice, all bool) (n int32) {\n \t\truntime_semacquire(&runtime_worldsema);\n \t\truntime_m()->gcing = 1;\n \t\truntime_stoptheworld();\n+\t\tenablegc = mstats.enablegc;\n+\t\tmstats.enablegc = false;\n \t}\n \n \tif(b.__count == 0)\n@@ -373,33 +376,31 @@ func Stack(b Slice, all bool) (n int32) {\n \t\n \tif(all) {\n \t\truntime_m()->gcing = 0;\n+\t\tmstats.enablegc = enablegc;\n \t\truntime_semrelease(&runtime_worldsema);\n \t\truntime_starttheworld(false);\n \t}\n }\n \n static void\n-saveg(byte *pc, byte *sp, G *g, TRecord *r)\n+saveg(G *g, TRecord *r)\n {\n \tint32 n;\n \n-\tUSED(pc);\n-\tUSED(sp);\n-\tUSED(g);\n-\t// n = runtime_gentraceback(pc, sp, 0, g, 0, r->stk, nelem(r->stk));\n-\tn = 0;\n+\tif(g == runtime_g())\n+\t\tn = runtime_callers(0, r->stk, nelem(r->stk));\n+\telse {\n+\t\t// FIXME: Not implemented.\n+\t\tn = 0;\n+\t}\n \tif((size_t)n < nelem(r->stk))\n \t\tr->stk[n] = 0;\n }\n \n func GoroutineProfile(b Slice) (n int32, ok bool) {\n-\tbyte *pc, *sp;\n \tTRecord *r;\n \tG *gp;\n \t\n-\tsp = runtime_getcallersp(&b);\n-\tpc = runtime_getcallerpc(&b);\n-\t\n \tok = false;\n \tn = runtime_gcount();\n \tif(n <= b.__count) {\n@@ -412,12 +413,11 @@ func GoroutineProfile(b Slice) (n int32, ok bool) {\n \t\t\tG* g = runtime_g();\n \t\t\tok = true;\n \t\t\tr = (TRecord*)b.__values;\n-\t\t\tsaveg(pc, sp, g, r++);\n+\t\t\tsaveg(g, r++);\n \t\t\tfor(gp = runtime_allg; gp != nil; gp = gp->alllink) {\n \t\t\t\tif(gp == g || gp->status == Gdead)\n \t\t\t\t\tcontinue;\n-\t\t\t\t//saveg(gp->sched.pc, gp->sched.sp, gp, r++);\n-\t\t\t\tr++;\n+\t\t\t\tsaveg(gp, r++);\n \t\t\t}\n \t\t}\n \t"}, {"sha": "2d0044dca6a73b5d53ec9538d12a3f8a4229dfa1", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac564c53e908cff16f9938320a344d62bca26a7/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac564c53e908cff16f9938320a344d62bca26a7/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=bac564c53e908cff16f9938320a344d62bca26a7", "patch": "@@ -348,7 +348,7 @@ runtime_mcall(void (*pfn)(G*))\n \t\tmp = runtime_m();\n \t\tgp = runtime_g();\n \n-\t\tif(gp->dotraceback != nil)\n+\t\tif(gp->traceback != nil)\n \t\t\tgtraceback(gp);\n \t}\n \tif (gp == nil || !gp->fromgogo) {\n@@ -542,11 +542,20 @@ runtime_goroutinetrailer(G *g)\n \t}\n }\n \n+struct Traceback\n+{\n+\tG* gp;\n+\tuintptr pcbuf[100];\n+\tint32 c;\n+};\n+\n void\n runtime_tracebackothers(G * volatile me)\n {\n \tG * volatile g;\n+\tTraceback traceback;\n \n+\ttraceback.gp = me;\n \tfor(g = runtime_allg; g != nil; g = g->alllink) {\n \t\tif(g == me || g->status == Gdead)\n \t\t\tcontinue;\n@@ -567,16 +576,19 @@ runtime_tracebackothers(G * volatile me)\n \t\t\tcontinue;\n \t\t}\n \n-\t\tg->dotraceback = me;\n+\t\tg->traceback = &traceback;\n \n #ifdef USING_SPLIT_STACK\n \t\t__splitstack_getcontext(&me->stack_context[0]);\n #endif\n \t\tgetcontext(&me->context);\n \n-\t\tif(g->dotraceback) {\n+\t\tif(g->traceback != nil) {\n \t\t\truntime_gogo(g);\n \t\t}\n+\n+\t\truntime_printtrace(traceback.pcbuf, traceback.c);\n+\t\truntime_goroutinetrailer(g);\n \t}\n }\n \n@@ -586,13 +598,13 @@ runtime_tracebackothers(G * volatile me)\n static void\n gtraceback(G* gp)\n {\n-\tG* ret;\n+\tTraceback* traceback;\n \n-\truntime_traceback(nil);\n-\truntime_goroutinetrailer(gp);\n-\tret = gp->dotraceback;\n-\tgp->dotraceback = nil;\n-\truntime_gogo(ret);\n+\ttraceback = gp->traceback;\n+\tgp->traceback = nil;\n+\ttraceback->c = runtime_callers(1, traceback->pcbuf,\n+\t\tsizeof traceback->pcbuf / sizeof traceback->pcbuf[0]);\n+\truntime_gogo(traceback->gp);\n }\n \n // Mark this g as m's idle goroutine."}, {"sha": "5b3283a3aa9632221ceff3f685392226d39d54aa", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bac564c53e908cff16f9938320a344d62bca26a7/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bac564c53e908cff16f9938320a344d62bca26a7/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=bac564c53e908cff16f9938320a344d62bca26a7", "patch": "@@ -71,6 +71,8 @@ typedef\tstruct\t__go_panic_stack\tPanic;\n typedef struct\t__go_func_type\t\tFuncType;\n typedef struct\t__go_map_type\t\tMapType;\n \n+typedef struct  Traceback\tTraceback;\n+\n /*\n  * per-cpu declaration.\n  */\n@@ -151,7 +153,7 @@ struct\tG\n \t// uintptr\tsigpc;\n \tuintptr\tgopc;\t// pc of go statement that created this goroutine\n \n-\tG*\tdotraceback;\n+\tTraceback* traceback;\n \n \tucontext_t\tcontext;\n \tvoid*\t\tstack_context[10];\n@@ -299,6 +301,7 @@ void\truntime_goroutineheader(G*);\n void\truntime_goroutinetrailer(G*);\n void\truntime_traceback();\n void\truntime_tracebackothers(G*);\n+void\truntime_printtrace(uintptr*, int32);\n String\truntime_gostringnocopy(const byte*);\n void*\truntime_mstart(void*);\n G*\truntime_malg(int32, byte**, size_t*);"}]}