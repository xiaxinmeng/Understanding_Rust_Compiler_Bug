{"sha": "f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFmYjExZjFlODMyMmE5NGI5MGVhOGMxYTFjYmFlNzljNWYxYmFiNQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-04-25T06:25:48Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-04-25T06:25:48Z"}, "message": "re PR fortran/52196 (Add -Wrealloc-lhs)\n\n2012-04-25  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52196\n        * lang.opt (Wrealloc-lhs, Wrealloc-lhs-all): New flags.\n        * gfortran.h (gfc_option_t): Add them.\n        * options.c (gfc_init_options, gfc_post_options,\n        gfc_handle_option): Handle them.\n        * invoke.texi: Document them.\n        * trans-expr.c (realloc_lhs_warning): New function.\n        (gfc_trans_arrayfunc_assign,\n        alloc_scalar_allocatable_for_assignment,\n        gfc_trans_assignment_1): Use it.\n\n2012-04-25  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52196\n        * gfortran.dg/realloc_on_assign_14.f90: New.\n\nFrom-SVN: r186806", "tree": {"sha": "cf5861882524a9b89885cd03d357099ba5ab7625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf5861882524a9b89885cd03d357099ba5ab7625"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad1d9a5079591596b5ccd5a924a8b9c65c542e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1d9a5079591596b5ccd5a924a8b9c65c542e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1d9a5079591596b5ccd5a924a8b9c65c542e3e"}], "stats": {"total": 128, "additions": 122, "deletions": 6}, "files": [{"sha": "f5ce12c94f6dd2d92d3fa82d2117322f4332d2c8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5", "patch": "@@ -1,3 +1,16 @@\n+2012-04-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52196\n+\t* lang.opt (Wrealloc-lhs, Wrealloc-lhs-all): New flags.\n+\t* gfortran.h (gfc_option_t): Add them.\n+\t* options.c (gfc_init_options, gfc_post_options,\n+\tgfc_handle_option): Handle them.\n+\t* invoke.texi: Document them.\n+\t* trans-expr.c (realloc_lhs_warning): New function.\n+\t(gfc_trans_arrayfunc_assign,\n+\talloc_scalar_allocatable_for_assignment,\n+\tgfc_trans_assignment_1): Use it.\n+\n 2012-04-18  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* trans-decl.c (gfc_trans_entry_master_switch): Build SWITCH_EXPR"}, {"sha": "1143314db7baf27e6c84bb19978655f08373fc68", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5", "patch": "@@ -2219,6 +2219,8 @@ typedef struct\n   int warn_align_commons;\n   int warn_real_q_constant;\n   int warn_unused_dummy_argument;\n+  int warn_realloc_lhs;\n+  int warn_realloc_lhs_all;\n   int max_errors;\n \n   int flag_all_intrinsics;"}, {"sha": "8db869bfa6843d56d70cac9b901c03c4fd846b94", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5", "patch": "@@ -146,9 +146,8 @@ and warnings}.\n -Wconversion -Wfunction-elimination -Wimplicit-interface @gol\n -Wimplicit-procedure -Wintrinsic-shadow -Wintrinsics-std @gol\n -Wline-truncation -Wno-align-commons -Wno-tabs -Wreal-q-constant @gol\n--Wsurprising -Wunderflow -Wunused-parameter -fmax-errors=@var{n}\n--fsyntax-only @gol\n--pedantic -pedantic-errors\n+-Wsurprising -Wunderflow -Wunused-parameter -Wrealloc-lhs Wrealloc-lhs-all @gol\n+-fmax-errors=@var{n} -fsyntax-only -pedantic -pedantic-errors\n }\n \n @item Debugging Options\n@@ -919,6 +918,23 @@ off via @option{-Wno-align-commons}. See also @option{-falign-commons}.\n Warn if any calls to functions are eliminated by the optimizations\n enabled by the @option{-ffrontend-optimize} option.\n \n+@item -Wrealloc-lhs\n+@opindex @code{Wrealloc-lhs}\n+@cindex Reallocate the LHS in assignments, notification\n+Warn when the compiler might insert code to for allocation or reallocation of\n+an allocatable array variable of intrinsic type in intrinsic assignments.  In\n+hot loops, the Fortran 2003 reallocation feature may reduce the performance.\n+If the array is already allocated with the correct shape, consider using a\n+whole-array array-spec (e.g. @code{(:,:,:)}) for the variable on the left-hand\n+side to prevent the reallocation check. Note that in some cases the warning\n+is shown, even if the compiler will optimize reallocation checks away.  For\n+instance, when the right-hand side contains the same variable multiplied by\n+a scalar.  See also @option{-frealloc-lhs}.\n+\n+@item -Wrealloc-lhs-all\n+@opindex @code{Wrealloc-lhs-all}\n+Warn when the compiler inserts code to for allocation or reallocation of an\n+allocatable variable; this includes scalars and derived types.\n \n @item -Werror\n @opindex @code{Werror}\n@@ -1561,7 +1577,8 @@ need to be in effect. The parentheses protection is enabled by default, unless\n @cindex Reallocate the LHS in assignments\n An allocatable left-hand side of an intrinsic assignment is automatically\n (re)allocated if it is either unallocated or has a different shape. The\n-option is enabled by default except when @option{-std=f95} is given.\n+option is enabled by default except when @option{-std=f95} is given. See\n+also @option{-Wrealloc-lhs}.\n \n @item -faggressive-function-elimination\n @opindex @code{faggressive-function-elimination}"}, {"sha": "3b9d29b0328dc37a7d95e58a0bf845b14a7fc7d0", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5", "patch": "@@ -250,6 +250,14 @@ Wreal-q-constant\n Fortran Warning\n Warn about real-literal-constants with 'q' exponent-letter\n \n+Wrealloc-lhs\n+Fortran Warning\n+Warn when a left-hand-side array variable is reallocated\n+\n+Wrealloc-lhs-all\n+Fortran Warning\n+Warn when a left-hand-side variable is reallocated\n+\n Wreturn-type\n Fortran Warning\n ; Documented in C"}, {"sha": "dde7ff2f38283eaaf4217e0792fb9de1aadf714d", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5", "patch": "@@ -111,6 +111,8 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.warn_align_commons = 1;\n   gfc_option.warn_real_q_constant = 0;\n   gfc_option.warn_unused_dummy_argument = 0;\n+  gfc_option.warn_realloc_lhs = 0;\n+  gfc_option.warn_realloc_lhs_all = 0;\n   gfc_option.max_errors = 25;\n \n   gfc_option.flag_all_intrinsics = 0;\n@@ -437,6 +439,9 @@ gfc_post_options (const char **pfilename)\n   if (gfc_option.flag_frontend_optimize == -1)\n     gfc_option.flag_frontend_optimize = optimize;\n \n+  if (gfc_option.warn_realloc_lhs_all)\n+    gfc_option.warn_realloc_lhs = 1;\n+\n   gfc_cpp_post_options ();\n \n /* FIXME: return gfc_cpp_preprocess_only ();\n@@ -654,6 +659,14 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.warn_line_truncation = value;\n       break;\n \n+    case OPT_Wrealloc_lhs:\n+      gfc_option.warn_realloc_lhs = value;\n+      break;\n+\n+    case OPT_Wrealloc_lhs_all:\n+      gfc_option.warn_realloc_lhs_all = value;\n+      break;\n+\n     case OPT_Wreturn_type:\n       warn_return_type = value;\n       break;"}, {"sha": "7092bc2f153d1ea253a226f54a47366966b7942b", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5", "patch": "@@ -581,6 +581,19 @@ gfc_trans_class_assign (gfc_expr *expr1, gfc_expr *expr2, gfc_exec_op op)\n /* End of prototype trans-class.c  */\n \n \n+static void\n+realloc_lhs_warning (bt type, bool array, locus *where)\n+{\n+  if (array && type != BT_CLASS && type != BT_DERIVED\n+      && gfc_option.warn_realloc_lhs)\n+    gfc_warning (\"Code for reallocating the allocatable array at %L will \"\n+\t\t \"be added\", where);\n+  else if (gfc_option.warn_realloc_lhs_all)\n+    gfc_warning (\"Code for reallocating the allocatable variable at %L \"\n+\t\t \"will be added\", where);\n+}\n+\n+\n static tree gfc_trans_structure_assign (tree dest, gfc_expr * expr);\n static void gfc_apply_interface_mapping_to_expr (gfc_interface_mapping *,\n \t\t\t\t\t\t gfc_expr *);\n@@ -6479,6 +6492,8 @@ gfc_trans_arrayfunc_assign (gfc_expr * expr1, gfc_expr * expr2)\n \t&& !(expr2->value.function.esym\n \t    && expr2->value.function.esym->result->attr.allocatable))\n     {\n+      realloc_lhs_warning (expr1->ts.type, true, &expr1->where);\n+\n       if (!expr2->value.function.isym)\n \t{\n \t  realloc_lhs_loop_for_fcn_call (&se, &expr1->where, &ss, &loop);\n@@ -6740,6 +6755,8 @@ alloc_scalar_allocatable_for_assignment (stmtblock_t *block,\n   if (!expr2 || expr2->rank)\n     return;\n \n+  realloc_lhs_warning (expr2->ts.type, false, &expr2->where);\n+\n   /* Since this is a scalar lhs, we can afford to do this.  That is,\n      there is no risk of side effects being repeated.  */\n   gfc_init_se (&lse, NULL);\n@@ -6988,7 +7005,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n     {\n       /* F2003: Add the code for reallocation on assignment.  */\n       if (gfc_option.flag_realloc_lhs\n-\t    && is_scalar_reallocatable_lhs (expr1))\n+\t  && is_scalar_reallocatable_lhs (expr1))\n \talloc_scalar_allocatable_for_assignment (&block, rse.string_length,\n \t\t\t\t\t\t expr1, expr2);\n \n@@ -7031,8 +7048,10 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n       if (gfc_option.flag_realloc_lhs\n \t    && gfc_is_reallocatable_lhs (expr1)\n \t    && !gfc_expr_attr (expr1).codimension\n-\t    && !gfc_is_coindexed (expr1))\n+\t    && !gfc_is_coindexed (expr1)\n+\t    && expr2->rank)\n \t{\n+\t  realloc_lhs_warning (expr1->ts.type, true, &expr1->where);\n \t  ompws_flags &= ~OMPWS_SCALARIZER_WS;\n \t  tmp = gfc_alloc_allocatable_for_assignment (&loop, expr1, expr2);\n \t  if (tmp != NULL_TREE)"}, {"sha": "52ab438c398305c77be55d6bcfcc1eacd9b3848d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5", "patch": "@@ -1,3 +1,8 @@\n+2012-04-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52196\n+\t* gfortran.dg/realloc_on_assign_14.f90: New.\n+\n 2012-04-24  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR testsuite/52641"}, {"sha": "8474d18622df1946942828385ac7bd23dfd14448", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_14.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_14.f90?ref=f1fb11f1e8322a94b90ea8c1a1cbae79c5f1bab5", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do compile }\n+! { dg-options \"-Wrealloc-lhs-all -Wrealloc-lhs\" }\n+!\n+! PR fortran/52196\n+!\n+implicit none\n+type t\n+  integer :: x\n+end type t\n+integer, allocatable :: a(:), b\n+real, allocatable :: r(:)\n+type(t), allocatable :: c(:)\n+character(len=:), allocatable :: str\n+character(len=:), allocatable :: astr(:)\n+\n+allocate(a(2), b, c(1))\n+b = 4          ! { dg-warning \"Code for reallocating the allocatable variable\" }\n+a = [b,b]      ! { dg-warning \"Code for reallocating the allocatable array\" }\n+c = [t(4)]     ! { dg-warning \"Code for reallocating the allocatable variable\" }\n+a = 5          ! no realloc\n+c = t(5)       ! no realloc\n+str = 'abc'    ! { dg-warning \"Code for reallocating the allocatable variable\" }\n+astr = 'abc'   ! no realloc\n+astr = ['abc'] ! { dg-warning \"Code for reallocating the allocatable array\" }\n+a = reshape(a,shape(a)) ! { dg-warning \"Code for reallocating the allocatable array\" }\n+r = sin(r)     ! { dg-warning \"Code for reallocating the allocatable array\" }\n+r = sin(r(1))  ! no realloc\n+b = sin(r(1))  ! { dg-warning \"Code for reallocating the allocatable variable\" }\n+\n+a = nar() ! { dg-warning \"Code for reallocating the allocatable array\" }\n+a = nar2() ! { dg-warning \"Code for reallocating the allocatable array\" }\n+contains\n+  function nar()\n+    integer,allocatable :: nar(:)\n+  end function\n+  function nar2()\n+    integer :: nar2(8)\n+  end function\n+end"}]}