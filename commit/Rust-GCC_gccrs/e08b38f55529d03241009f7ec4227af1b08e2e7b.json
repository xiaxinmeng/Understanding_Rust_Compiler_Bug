{"sha": "e08b38f55529d03241009f7ec4227af1b08e2e7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4YjM4ZjU1NTI5ZDAzMjQxMDA5ZjdlYzQyMjdhZjFiMDhlMmU3Yg==", "commit": {"author": {"name": "Vincent Celier", "email": "celier@adacore.com", "date": "2007-06-06T10:51:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:51:44Z"}, "message": "xgnatugn.adb: Allow dots to be used in ug_words (-gnatw.c and -gnatw.C)\n\n2007-04-20  Vincent Celier  <celier@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* xgnatugn.adb: Allow dots to be used in ug_words (-gnatw.c and\n\t-gnatw.C)\n\n\t* gnat_ugn.texi: Fix ordering of -g switch for gnatmake\n\tDocument gnatbind switch -a\n\t(case Constructions): Document that variables declarations are allowed\n\tfor previously declared variables.\n\tFix external lib project example\n\t-gnatg: Indicate new VMS qualifier /GNAT_INTERNAL\n\tIndicate that \"#if not X or Y then\" is not allowed in input files to\n\tgnatprep.\n\tDocument gnatw.x and gnatw.X warning flags\n\tMention -Winline switch to activate warnings when back-end inlining is\n\tineffective.\n\tAdd gnatcheck rule descriptions\n\tDescribe how to use the GNAT driver to call a tool on a closure.\n\tDescribe how to run project-wide checks or metrics.\n\tDocument gnatbind's -R option\n\tUpdated to account for Ada 2005 support\n\n\t* gnat_rm.texi (Case Construction): Allow variable declarations for\n\tpreviously declared variables.\n\t(Representation Clauses and Pragmas): Lift restriction on alignment\n\tclauses for record types.\n\t(Ada.Characters.*): Fix typo in reference to A.3.3(27).\n\tDocument No_Exception_Propagation restriction\n\tDocument No_Body pragma\n\tUpdated to account for Ada 2005 support; corrected some typos\n\t(Implementation Defined Pragmas): Document pragma Universal_Aliasing.\n\n\t* gnat-style.texi: Make it clear that we never use mode IN for\n\tprocedures or functions\n\n\t* ug_words: Add entries for -gnatw.x and -gnatw.X\n\tAdd entries for -gnatw.c/.C\n\nFrom-SVN: r125475", "tree": {"sha": "4c99be52d880ac0c1736da9a0f6fcf0b4bbdc540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c99be52d880ac0c1736da9a0f6fcf0b4bbdc540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e08b38f55529d03241009f7ec4227af1b08e2e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08b38f55529d03241009f7ec4227af1b08e2e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08b38f55529d03241009f7ec4227af1b08e2e7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08b38f55529d03241009f7ec4227af1b08e2e7b/comments", "author": {"login": "vcelier", "id": 8888056, "node_id": "MDQ6VXNlcjg4ODgwNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/8888056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vcelier", "html_url": "https://github.com/vcelier", "followers_url": "https://api.github.com/users/vcelier/followers", "following_url": "https://api.github.com/users/vcelier/following{/other_user}", "gists_url": "https://api.github.com/users/vcelier/gists{/gist_id}", "starred_url": "https://api.github.com/users/vcelier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vcelier/subscriptions", "organizations_url": "https://api.github.com/users/vcelier/orgs", "repos_url": "https://api.github.com/users/vcelier/repos", "events_url": "https://api.github.com/users/vcelier/events{/privacy}", "received_events_url": "https://api.github.com/users/vcelier/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9de6e08232cd4628b08fa92b802858189cce2a2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de6e08232cd4628b08fa92b802858189cce2a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9de6e08232cd4628b08fa92b802858189cce2a2f"}], "stats": {"total": 3749, "additions": 2606, "deletions": 1143}, "files": [{"sha": "4600d1fd8494a3d051cf6cf2c9bc7b09e302bcf3", "filename": "gcc/ada/gnat-style.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08b38f55529d03241009f7ec4227af1b08e2e7b/gcc%2Fada%2Fgnat-style.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08b38f55529d03241009f7ec4227af1b08e2e7b/gcc%2Fada%2Fgnat-style.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat-style.texi?ref=e08b38f55529d03241009f7ec4227af1b08e2e7b", "patch": "@@ -7,7 +7,7 @@\n @c                                                                            o\n @c                     G N A T   C O D I N G   S T Y L E                      o\n @c                                                                            o\n-@c                     Copyright (C) 1992-2005, AdaCore                       o\n+@c                     Copyright (C) 1992-2007, AdaCore                       o\n @c                                                                            o\n @c  GNAT is free software;  you can  redistribute it  and/or modify it under  o\n @c  terms of the  GNU General Public License as published  by the Free Soft-  o\n@@ -43,13 +43,13 @@\n @titlefont{GNAT Coding Style:}\n @sp 1\n @title @hfill A Guide for GNAT Developers\n-@subtitle GNAT, The GNU Ada 95 Compiler\n+@subtitle GNAT, The GNU Ada Compiler\n @versionsubtitle\n @author Ada Core Technologies, Inc.\n @page\n @vskip 0pt plus 1filll\n \n-Copyright @copyright{} 1995-2005, Free Software Foundation\n+Copyright @copyright{} 1995-2007, Free Software Foundation\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.1\n@@ -73,7 +73,7 @@ GNAT Coding Style@*\n A Guide for GNAT Developers\n @sp 2\n @noindent\n-GNAT, The GNU Ada 95 Compiler@*\n+GNAT, The GNU Ada Compiler@*\n \n @noindent\n Permission is granted to copy, distribute and/or modify this document\n@@ -640,7 +640,7 @@ is a blank line before the @code{begin} keyword:\n @itemize @bullet\n \n @item\n-Do not write the @code{in} for parameters, especially in functions:\n+Do not write the @code{in} for parameters.\n \n @smallexample @c adanocomment\n       function Length (S : String) return Integer;"}, {"sha": "902498fed693e3494e11a4369548e0238488e0f7", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 285, "deletions": 229, "changes": 514, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08b38f55529d03241009f7ec4227af1b08e2e7b/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08b38f55529d03241009f7ec4227af1b08e2e7b/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=e08b38f55529d03241009f7ec4227af1b08e2e7b", "patch": "@@ -8,7 +8,7 @@\n @c                                                                            o\n @c                              G N A T _ RM                                  o\n @c                                                                            o\n-@c              Copyright (C) 1995-2006 Free Software Foundation              o\n+@c              Copyright (C) 1995-2007, Free Software Foundation             o\n @c                                                                            o\n @c                                                                            o\n @c  GNAT is maintained by Ada Core Technologies Inc (http://www.gnat.com).    o\n@@ -18,6 +18,9 @@\n @setfilename gnat_rm.info\n \n @set EDITION GNAT\n+@set DEFAULTLANGUAGEVERSION Ada 2005\n+@set NONDEFAULTLANGUAGEVERSION Ada 95\n+\n @settitle GNAT Reference Manual\n \n @setchapternewpage odd\n@@ -31,7 +34,7 @@\n @end direntry\n \n @copying\n-Copyright @copyright{} 1995-2004, Free Software Foundation\n+Copyright @copyright{} 1995-2007, Free Software Foundation\n \n Permission is granted to copy, distribute and/or modify this document\n under the terms of the GNU Free Documentation License, Version 1.2\n@@ -44,9 +47,9 @@ entitled ``GNU Free Documentation License''.\n \n @titlepage\n @title GNAT Reference Manual\n-@subtitle GNAT, The GNU Ada 95 Compiler\n+@subtitle GNAT, The GNU Ada Compiler\n @versionsubtitle\n-@author Ada Core Technologies, Inc.\n+@author AdaCore\n @page\n @vskip 0pt plus 1filll\n \n@@ -62,7 +65,7 @@ entitled ``GNU Free Documentation License''.\n GNAT Reference Manual\n \n @noindent\n-GNAT, The GNU Ada 95 Compiler@*\n+GNAT, The GNU Ada Compiler@*\n GCC version @value{version-GCC}@*\n \n @noindent\n@@ -156,6 +159,7 @@ Implementation Defined Pragmas\n * Pragma Long_Float::\n * Pragma Machine_Attribute::\n * Pragma Main_Storage::\n+* Pragma No_Body::\n * Pragma No_Return::\n * Pragma No_Strict_Aliasing ::\n * Pragma Normalize_Scalars::\n@@ -181,11 +185,11 @@ Implementation Defined Pragmas\n * Pragma Task_Info::\n * Pragma Task_Name::\n * Pragma Task_Storage::\n-* Pragma Thread_Body::\n * Pragma Time_Slice::\n * Pragma Title::\n * Pragma Unchecked_Union::\n * Pragma Unimplemented_Unit::\n+* Pragma Universal_Aliasing ::\n * Pragma Universal_Data::\n * Pragma Unreferenced::\n * Pragma Unreferenced_Objects::\n@@ -410,7 +414,7 @@ Implementation of Specific Ada Features\n * GNAT Implementation of Shared Passive Packages::\n * Code Generation for Array Aggregates::\n * The Size of Discriminated Records with Default Discriminants::\n-* Strict Conformance to the Ada 95 Reference Manual::\n+* Strict Conformance to the Ada Reference Manual::\n \n Project File Reference\n \n@@ -426,26 +430,26 @@ Index\n @node About This Guide\n @unnumbered About This Guide\n \n-@ifclear PROEDITION\n-@noindent\n-This manual contains useful information in writing programs using the\n-GNAT compiler.  It includes information on implementation dependent\n-characteristics of GNAT, including all the information required by Annex\n-M of the standard.\n-@end ifclear\n-\n-@ifset PROEDITION\n @noindent\n This manual contains useful information in writing programs using the\n-GNAT Pro compiler.  It includes information on implementation dependent\n-characteristics of GNAT Pro, including all the information required by Annex\n-M of the standard.\n-@end ifset\n-\n-Ada 95 is designed to be highly portable.\n+@value{EDITION} compiler.  It includes information on implementation dependent\n+characteristics of @value{EDITION}, including all the information required by\n+Annex M of the Ada language standard.\n+\n+@value{EDITION} implements Ada 95 and Ada 2005, and it may also be invoked in\n+Ada 83 compatibility mode.\n+By default, @value{EDITION} assumes @value{DEFAULTLANGUAGEVERSION},\n+but you can override with a compiler switch\n+to explicitly specify the language version.\n+(Please refer to the section ``Compiling Different Versions of Ada'', in\n+@cite{@value{EDITION} User's Guide}, for details on these switches.)\n+Throughout this manual, references to ``Ada'' without a year suffix\n+apply to both the Ada 95 and Ada 2005 versions of the language.\n+\n+Ada is designed to be highly portable.\n In general, a program will have the same effect even when compiled by\n different compilers on different platforms.\n-However, since Ada 95 is designed to be used in a\n+However, since Ada is designed to be used in a\n wide variety of applications, it also contains a number of system\n dependent features to be used in interfacing to the external world.\n @cindex Implementation-dependent features\n@@ -542,11 +546,17 @@ obsolescent forms are retained for backwards compatibility.\n \n @end itemize\n \n-@cindex Ada 95 ISO/ANSI Standard\n+@cindex Ada 95 Language Reference Manual\n+@cindex Ada 2005 Language Reference Manual\n @noindent\n-This reference manual assumes that you are familiar with Ada 95\n-language, as described in the International Standard\n-ANSI/ISO/IEC-8652:1995, Jan 1995.\n+This reference manual assumes a basic familiarity with the Ada 95 language, as\n+described in the International Standard ANSI/ISO/IEC-8652:1995,\n+January 1995.\n+It does not require knowledge of the new features introduced by Ada 2005,\n+(officially known as ISO/IEC 8652:1995 with Technical Corrigendum 1\n+and Amendment 1).\n+Both reference manuals are included in the GNAT documentation\n+package.\n \n @node Conventions\n @unnumberedsec Conventions\n@@ -607,10 +617,20 @@ material for the Ada 95 programming language.\n \n @item\n @cite{Ada 95 Annotated Reference Manual}, which is an annotated version\n-of the standard reference manual cited above.  The annotations describe\n+of the Ada 95 standard.  The annotations describe\n detailed aspects of the design decision, and in particular contain useful\n sections on Ada 83 compatibility.\n \n+@item\n+@cite{Ada 2005 Reference Manual}, which contains all reference\n+material for the Ada 2005 programming language.\n+\n+@item\n+@cite{Ada 2005 Annotated Reference Manual}, which is an annotated version\n+of the Ada 2005 standard.  The annotations describe\n+detailed aspects of the design decision, and in particular contain useful\n+sections on Ada 83 and Ada 95 compatibility.\n+\n @item\n @cite{DEC Ada, Technical Overview and Comparison on DIGITAL Platforms},\n which contains specific information on compatibility between GNAT and\n@@ -627,12 +647,12 @@ compiler system.\n @chapter Implementation Defined Pragmas\n \n @noindent\n-Ada 95 defines a set of pragmas that can be used to supply additional\n+Ada defines a set of pragmas that can be used to supply additional\n information to the compiler.  These language defined pragmas are\n-implemented in GNAT and work as described in the Ada 95 Reference\n+implemented in GNAT and work as described in the Ada Reference\n Manual.\n \n-In addition, Ada 95 allows implementations to define additional pragmas\n+In addition, Ada allows implementations to define additional pragmas\n whose meaning is defined by the implementation.  GNAT provides a number\n of these implementation-dependent pragmas which can be used to extend\n and enhance the functionality of the compiler.  This section of the GNAT\n@@ -704,6 +724,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Long_Float::\n * Pragma Machine_Attribute::\n * Pragma Main_Storage::\n+* Pragma No_Body::\n * Pragma No_Return::\n * Pragma No_Strict_Aliasing::\n * Pragma Normalize_Scalars::\n@@ -729,11 +750,11 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Task_Info::\n * Pragma Task_Name::\n * Pragma Task_Storage::\n-* Pragma Thread_Body::\n * Pragma Time_Slice::\n * Pragma Title::\n * Pragma Unchecked_Union::\n * Pragma Unimplemented_Unit::\n+* Pragma Universal_Aliasing ::\n * Pragma Universal_Data::\n * Pragma Unreferenced::\n * Pragma Unreferenced_Objects::\n@@ -778,14 +799,14 @@ A configuration pragma that establishes Ada 83 mode for the unit to\n which it applies, regardless of the mode set by the command line\n switches.  In Ada 83 mode, GNAT attempts to be as compatible with\n the syntax and semantics of Ada 83, as defined in the original Ada\n-83 Reference Manual as possible.  In particular, the new Ada 95\n-keywords are not recognized, optional package bodies are allowed,\n+83 Reference Manual as possible.  In particular, the keywords added by Ada 95\n+(and Ada 2005) are not recognized, optional package bodies are allowed,\n and generics may name types with unknown discriminants without using\n the @code{(<>)} notation.  In addition, some but not all of the additional\n restrictions of Ada 83 are enforced.\n \n Ada 83 mode is intended for two purposes.  Firstly, it allows existing\n-legacy Ada 83 code to be compiled and adapted to GNAT with less effort.\n+Ada 83 code to be compiled and adapted to GNAT with less effort.\n Secondly, it aids in keeping code backwards compatible with Ada 83.\n However, there is no guarantee that code that is processed correctly\n by GNAT in Ada 83 mode will in fact compile and execute with an Ada\n@@ -1056,7 +1077,7 @@ pragma Compile_Time_Error\n @noindent\n This pragma can be used to generate additional compile time\n error messages. It\n-is particularly useful in generics, where errrs can be issued for\n+is particularly useful in generics, where errors can be issued for\n specific problematic instantiations. The first parameter is a boolean\n expression. The pragma is effective only if the value of this expression\n is known at compile time, and has the value True. The set of expressions\n@@ -1269,7 +1290,9 @@ way that C++ would lay out the type.\n Types for which @code{CPP_Class} is specified do not have assignment or\n equality operators defined (such operations can be imported or declared\n as subprograms as required). Initialization is allowed only by constructor\n-functions (see pragma @code{CPP_Constructor}).\n+functions (see pragma @code{CPP_Constructor}). Such types are implicitly\n+limited if not explicitly declared as limited or derived from a limited\n+type, and a warning is issued in that case.\n \n Pragma @code{CPP_Class} is intended primarily for automatic generation\n using an automatic binding generator tool.\n@@ -1647,6 +1670,9 @@ MECHANISM_ASSOCIATION ::=\n MECHANISM_NAME ::=\n   Value\n | Reference\n+| Descriptor [([Class =>] CLASS_NAME)]\n+\n+CLASS_NAME ::= ubs | ubsb | uba | s | sb | a\n @end smallexample\n \n @noindent\n@@ -1676,8 +1702,7 @@ anonymous access parameter.\n \n @cindex OpenVMS\n @cindex Passing by descriptor\n-Note that passing by descriptor is not supported, even on the OpenVMS\n-ports of GNAT@.\n+Passing by descriptor is supported only on the OpenVMS ports of GNAT@.\n \n @cindex Suppressing external name\n Special treatment is given if the EXTERNAL is an explicit null\n@@ -1746,6 +1771,9 @@ MECHANISM_ASSOCIATION ::=\n MECHANISM_NAME ::=\n   Value\n | Reference\n+| Descriptor [([Class =>] CLASS_NAME)]\n+\n+CLASS_NAME ::= ubs | ubsb | uba | s | sb | a\n @end smallexample\n \n @noindent\n@@ -1760,8 +1788,7 @@ pragma that specifies the desired foreign convention.\n \n @cindex OpenVMS\n @cindex Passing by descriptor\n-Note that passing by descriptor is not supported, even on the OpenVMS\n-ports of GNAT@.\n+Passing by descriptor is supported only on the OpenVMS ports of GNAT@.\n \n @cindex Suppressing external name\n Special treatment is given if the EXTERNAL is an explicit null\n@@ -1826,6 +1853,9 @@ MECHANISM_ASSOCIATION ::=\n MECHANISM_NAME ::=\n   Value\n | Reference\n+| Descriptor [([Class =>] CLASS_NAME)]\n+\n+CLASS_NAME ::= ubs | ubsb | uba | s | sb | a\n @end smallexample\n \n @noindent\n@@ -1845,8 +1875,7 @@ pragma that specifies the desired foreign convention.\n \n @cindex OpenVMS\n @cindex Passing by descriptor\n-Note that passing by descriptor is not supported, even on the OpenVMS\n-ports of GNAT@.\n+Passing by descriptor is supported only on the OpenVMS ports of GNAT@.\n \n @cindex Suppressing external name\n Special treatment is given if the EXTERNAL is an explicit null\n@@ -1870,7 +1899,7 @@ pragma Extend_System ([Name =>] IDENTIFIER);\n This pragma is used to provide backwards compatibility with other\n implementations that extend the facilities of package @code{System}.  In\n GNAT, @code{System} contains only the definitions that are present in\n-the Ada 95 RM@.  However, other implementations, notably the DEC Ada 83\n+the Ada RM@.  However, other implementations, notably the DEC Ada 83\n implementation, provide many extensions to package @code{System}.\n \n For each such implementation accommodated by this pragma, GNAT provides a\n@@ -1944,15 +1973,15 @@ with Import and Export pragmas.  There are two cases to consider:\n @table @asis\n @item Implicit external names\n Implicit external names are derived from identifiers.  The most common case\n-arises when a standard Ada 95 Import or Export pragma is used with only two\n+arises when a standard Ada Import or Export pragma is used with only two\n arguments, as in:\n \n @smallexample @c ada\n    pragma Import (C, C_Routine);\n @end smallexample\n \n @noindent\n-Since Ada is a case insensitive language, the spelling of the identifier in\n+Since Ada is a case-insensitive language, the spelling of the identifier in\n the Ada source program does not provide any information on the desired\n casing of the external name, and so a convention is needed.  In GNAT the\n default treatment is that such names are converted to all lower case\n@@ -1968,7 +1997,7 @@ specified using an identifier rather than a string.\n \n @item Explicit external names\n Explicit external names are given as string literals.  The most common case\n-arises when a standard Ada 95 Import or Export pragma is used with three\n+arises when a standard Ada Import or Export pragma is used with three\n arguments, as in:\n \n @smallexample @c ada\n@@ -2436,7 +2465,7 @@ pragma Interface (\n \n @noindent\n This pragma is identical in syntax and semantics to\n-the standard Ada 95 pragma @code{Import}.  It is provided for compatibility\n+the standard Ada pragma @code{Import}.  It is provided for compatibility\n with Ada 83.  The definition is upwards compatible both with pragma\n @code{Interface} as defined in the Ada 83 Reference Manual, and also\n with some extended implementations of this pragma in certain Ada 83\n@@ -2909,6 +2938,29 @@ This pragma is provided for compatibility with OpenVMS VAX Systems.  It has\n no effect in GNAT, other than being syntax checked.  Note that the pragma\n also has no effect in DEC Ada 83 for OpenVMS Alpha Systems.\n \n+@node Pragma No_Body\n+@unnumberedsec Pragma No_Body\n+@findex No_Body\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma No_Body;\n+@end smallexample\n+\n+@noindent\n+There are a number of cases in which a package spec does not require a body,\n+and in fact a body is not permitted. GNAT will not permit the spec to be\n+compiled if there is a body around. The pragma No_Body allows you to provide\n+a body file, even in a case where no body is allowed. The body file must\n+contain only comments and a single No_Body pragma. This is recognized by\n+the compiler as indicating that no body is logically present.\n+\n+This is particularly useful during maintenance when a package is modified in\n+such a way that a body needed before is no longer needed. The provision of a\n+dummy body with a No_Body pragma ensures that there is no inteference from\n+earlier versions of the package body.\n+\n @node Pragma No_Return\n @unnumberedsec Pragma No_Return\n @findex No_Return\n@@ -3649,7 +3701,7 @@ pragma Stream_Convert\n @end smallexample\n \n @noindent\n-The specifications of the referenced functions, as given in the Ada 95\n+The specifications of the referenced functions, as given in the Ada\n Reference Manual are:\n \n @smallexample @c ada\n@@ -3925,46 +3977,6 @@ created, depending on the target.  This pragma can appear anywhere a\n @code{Storage_Size} attribute definition clause is allowed for a task\n type.\n \n-@node Pragma Thread_Body\n-@unnumberedsec Pragma Thread_Body\n-@findex Thread_Body\n-Syntax:\n-\n-@smallexample @c ada\n-pragma Thread_Body (\n-  [Entity =>] local_NAME,\n- [[Secondary_Stack_Size =>] static_integer_EXPRESSION)];\n-@end smallexample\n-\n-@noindent\n-This pragma specifies that the subprogram whose name is given as the\n-@code{Entity} argument is a thread body, which will be activated\n-by being called via its Address from foreign code. The purpose is\n-to allow execution and registration of the foreign thread within the\n-Ada run-time system.\n-\n-See the library unit @code{System.Threads} for details on the expansion of\n-a thread body subprogram, including the calls made to subprograms\n-within System.Threads to register the task.  This unit also lists the\n-targets and runtime systems for which this pragma is supported.\n-\n-A thread body subprogram may not be called directly from Ada code, and\n-it is not permitted to apply the Access (or Unrestricted_Access) attributes\n-to such a subprogram. The only legitimate way of calling such a subprogram\n-is to pass its Address to foreign code and then make the call from the\n-foreign code.\n-\n-A thread body subprogram may have any parameters, and it may be a function\n-returning a result. The convention of the thread body subprogram may be\n-set in the usual manner using @code{pragma Convention}.\n-\n-The secondary stack size parameter, if given, is used to set the size\n-of secondary stack for the thread. The secondary stack is allocated as\n-a local variable of the expanded thread body subprogram, and thus is\n-allocated out of the main thread stack size. If no secondary stack\n-size parameter is present, the default size (from the declaration in\n-@code{System.Secondary_Stack} is used.\n-\n @node Pragma Time_Slice\n @unnumberedsec Pragma Time_Slice\n @findex Time_Slice\n@@ -4026,7 +4038,7 @@ equivalent to a C union. It was introduced as a GNAT implementation defined\n pragma in the GNAT Ada 95 mode. Ada 2005 includes an extended version of this\n pragma, making it language defined, and GNAT fully implements this extended\n version in all language modes (Ada 83, Ada 95, and Ada 2005). For full\n-details, consult the Ada 2005 RM, section B.3.3.\n+details, consult the Ada 2005 Reference Manual, section B.3.3.\n \n @node Pragma Unimplemented_Unit\n @unnumberedsec Pragma Unimplemented_Unit\n@@ -4048,6 +4060,25 @@ a clean manner.\n The abort only happens if code is being generated.  Thus you can use\n specs of unimplemented packages in syntax or semantic checking mode.\n \n+@node Pragma Universal_Aliasing\n+@unnumberedsec Pragma Universal_Aliasing\n+@findex Universal_Aliasing\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Universal_Aliasing [([Entity =>] type_LOCAL_NAME)];\n+@end smallexample\n+\n+@noindent\n+@var{type_LOCAL_NAME} must refer to a type declaration in the current\n+declarative part.  The effect is to inhibit strict type-based aliasing\n+optimization for the given type.  In other words, the effect is as though\n+access types designating this type were subject to pragma No_Strict_Aliasing.\n+For a detailed description of the strict aliasing optimization, and the\n+situations in which it must be suppressed, see section\n+``Optimization and Strict Aliasing'' in the @value{EDITION} User's Guide.\n+\n @node Pragma Universal_Data\n @unnumberedsec Pragma Universal_Data\n @findex Universal_Data\n@@ -4218,8 +4249,8 @@ pragma Use_VADS_Size;\n This is a configuration pragma.  In a unit to which it applies, any use\n of the 'Size attribute is automatically interpreted as a use of the\n 'VADS_Size attribute.  Note that this may result in incorrect semantic\n-processing of valid Ada 95 programs.  This is intended to aid in the\n-handling of legacy code which depends on the interpretation of Size\n+processing of valid Ada 95 or Ada 2005 programs.  This is intended to aid in\n+the handling of existing code which depends on the interpretation of Size\n as implemented in the VADS compiler.  See description of the VADS_Size\n attribute for further details.\n \n@@ -4293,12 +4324,12 @@ pragma Volatile (local_NAME);\n @end smallexample\n \n @noindent\n-This pragma is defined by the Ada 95 Reference Manual, and the GNAT\n+This pragma is defined by the Ada Reference Manual, and the GNAT\n implementation is fully conformant with this definition.  The reason it\n is mentioned in this section is that a pragma of the same name was supplied\n-in some Ada 83 compilers, including DEC Ada 83.  The Ada 95 implementation\n-of pragma Volatile is upwards compatible with the implementation in\n-Dec Ada 83.\n+in some Ada 83 compilers, including DEC Ada 83.  The Ada 95 / Ada 2005\n+implementation of pragma Volatile is upwards compatible with the\n+implementation in DEC Ada 83.\n \n @node Pragma Warnings\n @unnumberedsec Pragma Warnings\n@@ -4484,7 +4515,7 @@ end External_Module;\n Syntax:\n \n @smallexample @c ada\n-pragma Wide_Character_Encoding (IDENTIFIER | CHRARACTER_LITERAL);\n+pragma Wide_Character_Encoding (IDENTIFIER | CHARACTER_LITERAL);\n @end smallexample\n \n @noindent\n@@ -4505,13 +4536,13 @@ or subunits.\n \n @node Implementation Defined Attributes\n @chapter Implementation Defined Attributes\n-Ada 95 defines (throughout the Ada 95 reference manual,\n-summarized in annex K),\n+Ada defines (throughout the Ada reference manual,\n+summarized in Annex K),\n a set of attributes that provide useful additional functionality in all\n areas of the language.  These language defined attributes are implemented\n-in GNAT and work as described in the Ada 95 Reference Manual.\n+in GNAT and work as described in the Ada Reference Manual.\n \n-In addition, Ada 95 allows implementations to define additional\n+In addition, Ada allows implementations to define additional\n attributes whose meaning is defined by the implementation.  GNAT provides\n a number of these implementation-dependent attributes which can be used\n to extend and enhance the functionality of the compiler.  This section of\n@@ -4684,8 +4715,8 @@ the containing record @var{R}.\n @cindex Address of subprogram code\n @noindent\n The @code{'Address}\n-attribute may be applied to subprograms in Ada 95, but the\n-intended effect from the Ada 95 reference manual seems to be to provide\n+attribute may be applied to subprograms in Ada 95 and Ada 2005, but the\n+intended effect seems to be to provide\n an address value which can be used to call the subprogram by means of\n an address clause as in the following example:\n \n@@ -4700,7 +4731,7 @@ pragma Import (Ada, L);\n @noindent\n A call to @code{L} is then expected to result in a call to @code{K}@.\n In Ada 83, where there were no access-to-subprogram values, this was\n-a common work around for getting the effect of an indirect call.\n+a common work-around for getting the effect of an indirect call.\n GNAT implements the above use of @code{Address} and the technique\n illustrated by the example code works correctly.\n \n@@ -5136,7 +5167,8 @@ this attribute.\n @cindex Ada 83 attributes\n @findex Small\n @noindent\n-The @code{Small} attribute is defined in Ada 95 only for fixed-point types.\n+The @code{Small} attribute is defined in Ada 95 (and Ada 2005) only for\n+fixed-point types.\n GNAT also allows this attribute to be applied to floating-point types\n for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n@@ -5293,7 +5325,7 @@ conversion to a desired access type.  In GNAT, but not necessarily in\n other implementations, the use of static chains for inner level\n subprograms means that @code{Unrestricted_Access} applied to a\n subprogram yields a value that can be called as long as the subprogram\n-is in scope (normal Ada 95 accessibility rules restrict this usage).\n+is in scope (normal Ada accessibility rules restrict this usage).\n \n It is possible to use @code{Unrestricted_Access} for any type, but care\n must be exercised if it is used to create pointers to unconstrained\n@@ -5344,21 +5376,20 @@ prefix) provides the value @code{System.Word_Size}.\n @node Implementation Advice\n @chapter Implementation Advice\n @noindent\n-The main text of the Ada 95 Reference Manual describes the required\n-behavior of all Ada 95 compilers, and the GNAT compiler conforms to\n+The main text of the Ada Reference Manual describes the required\n+behavior of all Ada compilers, and the GNAT compiler conforms to\n these requirements.\n \n-In addition, there are sections throughout the Ada 95\n-reference manual headed\n-by the phrase ``implementation advice''.  These sections are not normative,\n-i.e.@: they do not specify requirements that all compilers must\n+In addition, there are sections throughout the Ada Reference Manual headed\n+by the phrase ``Implementation advice''.  These sections are not normative,\n+i.e., they do not specify requirements that all compilers must\n follow.  Rather they provide advice on generally desirable behavior.  You\n may wonder why they are not requirements.  The most typical answer is\n that they describe behavior that seems generally desirable, but cannot\n be provided on all systems, or which may be undesirable on some systems.\n \n As far as practical, GNAT follows the implementation advice sections in\n-the Ada 95 Reference Manual.  This chapter contains a table giving the\n+the Ada Reference Manual.  This chapter contains a table giving the\n reference manual section number, paragraph number and several keywords\n for each advice.  Each entry consists of the text of the advice followed\n by the GNAT interpretation of this advice.  Most often, this simply says\n@@ -6233,7 +6264,7 @@ the given hardware architecture should be provided directly in\n @code{Interfaces}.\n @end cartouche\n Followed. An additional package not defined\n-in the Ada 95 Reference Manual is @code{Interfaces.CPP}, used\n+in the Ada Reference Manual is @code{Interfaces.CPP}, used\n for interfacing to C++.\n \n @sp 1\n@@ -6792,9 +6823,9 @@ Followed.\n \n @noindent\n In addition to the implementation dependent pragmas and attributes, and\n-the implementation advice, there are a number of other features of Ada\n-95 that are potentially implementation dependent.  These are mentioned\n-throughout the Ada 95 Reference Manual, and are summarized in annex M@.\n+the implementation advice, there are a number of other Ada features\n+that are potentially implementation dependent.  These are mentioned\n+throughout the Ada Reference Manual, and are summarized in annex M@.\n \n A requirement for conforming Ada compilers is that they provide\n documentation describing how the implementation deals with each of these\n@@ -6810,7 +6841,7 @@ handles the implementation dependence.\n You can use this chapter as a guide to minimizing implementation\n dependent features in your programs if portability to other compilers\n and other operating systems is an important consideration.  The numbers\n-in each section below correspond to the paragraph number in the Ada 95\n+in each section below correspond to the paragraph number in the Ada\n Reference Manual.\n \n @sp 1\n@@ -7168,9 +7199,9 @@ corresponding @file{ALI} file as the input parameter to the binder.\n @end cartouche\n @noindent\n The first constraint on ordering is that it meets the requirements of\n-chapter 10 of the Ada 95 Reference Manual.  This still leaves some\n+Chapter 10 of the Ada Reference Manual.  This still leaves some\n implementation dependent choices, which are resolved by first\n-elaborating bodies as early as possible (i.e.@: in preference to specs\n+elaborating bodies as early as possible (i.e., in preference to specs\n where there is a choice), and second by evaluating the immediate with\n clauses of a unit to determine the probably best choice, and\n third by elaborating in alphabetical order of unit names\n@@ -7589,8 +7620,19 @@ must define with the following profile:\n    statement generated by the compiler). The Line parameter when nonzero\n    represents the line number in the source program where the raise occurs.\n \n-@item No_Exception_Streams\n-@findex No_Exception_Streams\n+@item No_Exception_Propagation\n+@findex No_Exception_Propagation\n+This restriction guarantees that exceptions are never propagated to an outer\n+subprogram scope). The only case in which an exception may be raised is when\n+the handler is statically in the same subprogram, so that the effect of a raise\n+is essentially like a goto statement. Any other raise statement (implicit or\n+explicit) will be considered unhandled. Exception handlers are allowed, but may\n+not contain an exception occurrence identifier (exception choice). In addition\n+use of the package GNAT.Current_Exception is not permitted, and reraise\n+statements (raise with no operand) are not permitted.\n+\n+@item No_Exception_Registration\n+@findex No_Exception_Registration\n This restriction ensures at compile time that no stream operations for\n types Exception_Id or Exception_Occurrence are used. This also makes it\n impossible to pass exceptions to or from a partition with this restriction\n@@ -7771,20 +7813,20 @@ is made to queue a second task on such an entry.\n @findex No_Implementation_Attributes\n This restriction checks at compile time that no GNAT-defined attributes\n are present.  With this restriction, the only attributes that can be used\n-are those defined in the Ada 95 Reference Manual.\n+are those defined in the Ada Reference Manual.\n \n @item No_Implementation_Pragmas\n @findex No_Implementation_Pragmas\n This restriction checks at compile time that no GNAT-defined pragmas\n are present.  With this restriction, the only pragmas that can be used\n-are those defined in the Ada 95 Reference Manual.\n+are those defined in the Ada Reference Manual.\n \n @item No_Implementation_Restrictions\n @findex No_Implementation_Restrictions\n This restriction checks at compile time that no GNAT-defined restriction\n identifiers (other than @code{No_Implementation_Restrictions} itself)\n are present.  With this restriction, the only other restriction identifiers\n-that can be used are those defined in the Ada 95 Reference Manual.\n+that can be used are those defined in the Ada Reference Manual.\n \n @item No_Wide_Characters\n @findex No_Wide_Characters\n@@ -8166,7 +8208,8 @@ attribute.  See C.7.1(7).\n @noindent\n The result of this attribute is a string that identifies\n the object or component that denotes a given task. If a variable Var has a task\n-type, the image for this task will have the form Var_XXXXXXXX, where the sufffix\n+type, the image for this task will have the form Var_XXXXXXXX, where the\n+suffix\n is the hexadecimal representation of the virtual address of the corresponding\n task control block. If the variable is an array of tasks, the image of each\n task will have the form of an indexed component indicating the position of a\n@@ -8177,8 +8220,9 @@ is a subcomponent of a composite object corresponds to the expression that\n designates this task.\n @noindent\n If a task is created by an allocator, its image depends on the context. If the\n-allocator is part of an object declaration, the rules described above  are used\n-to construct its image, and this image is not affected by subsequent assignments. If the allocator appears within an expression, the image\n+allocator is part of an object declaration, the rules described above are used\n+to construct its image, and this image is not affected by subsequent\n+assignments. If the allocator appears within an expression, the image\n includes only the name of the task type.\n @noindent\n If the configuration pragma Discard_Names is present, or if the restriction\n@@ -8326,7 +8370,7 @@ requesting the lock.\n @end cartouche\n @noindent\n The ceiling priority of protected objects of the type\n-@code{System.Interrupt_Priority'Last} as described in the Ada 95\n+@code{System.Interrupt_Priority'Last} as described in the Ada\n Reference Manual D.3(10),\n \n @sp 1\n@@ -8860,7 +8904,7 @@ source line.\n @section Rotate_Left\n @cindex Rotate_Left\n @noindent\n-In standard Ada 95, the @code{Rotate_Left} function is available only\n+In standard Ada, the @code{Rotate_Left} function is available only\n for the predefined modular types in package @code{Interfaces}.  However, in\n GNAT it is possible to define a Rotate_Left function for a user\n defined modular type or any signed integer type as in this example:\n@@ -9027,36 +9071,24 @@ strict alignment.\n @end itemize\n \n @noindent\n-An alignment clause may\n-always specify a larger alignment than the default value, up to some\n-maximum value dependent on the target (obtainable by using the\n-attribute reference @code{Standard'Maximum_Alignment}).\n-The only case where\n-it is permissible to specify a smaller alignment than the default value\n-is for a record with a record representation clause.\n-In this case, packable fields for which a component clause is\n-given still result in a default alignment corresponding to the original\n-type, but this may be overridden, since these components in fact only\n-require an alignment of one byte.  For example, given\n+An alignment clause may specify a larger alignment than the default value\n+up to some maximum value dependent on the target (obtainable by using the\n+attribute reference @code{Standard'Maximum_Alignment}). It may also specify\n+a smaller alignment than the default value, for example\n \n @smallexample @c ada\n   type V is record\n      A : Integer;\n   end record;\n \n-  for V use record\n-     A at 0  range 0 .. 31;\n-  end record;\n-\n   for V'alignment use 1;\n @end smallexample\n \n @noindent\n @cindex Alignment, default\n The default alignment for the type @code{V} is 4, as a result of the\n-Integer field in the record, but since this field is placed with a\n-component clause, it is permissible, as shown, to override the default\n-alignment of the record with a smaller value.\n+Integer field in the record, but it is permissible, as shown, to\n+override the default alignment of the record with a smaller value.\n \n @node Size Clauses\n @section Size Clauses\n@@ -9361,14 +9393,15 @@ enumeration types for which a representation clause is given.\n @cindex Size, of objects\n \n @noindent\n-In Ada 95, @code{T'Size} for a type @code{T} is the minimum number of bits\n-required to hold values of type @code{T}.  Although this interpretation was\n-allowed in Ada 83, it was not required, and this requirement in practice\n-can cause some significant difficulties.  For example, in most Ada 83\n-compilers, @code{Natural'Size} was 32.  However, in Ada 95,\n+In Ada 95 and Ada 2005, @code{T'Size} for a type @code{T} is the minimum\n+number of bits required to hold values of type @code{T}.\n+Although this interpretation was allowed in Ada 83, it was not required,\n+and this requirement in practice can cause some significant difficulties.\n+For example, in most Ada 83 compilers, @code{Natural'Size} was 32.\n+However, in Ada 95 and Ada 2005,\n @code{Natural'Size} is\n typically 31.  This means that code may change in behavior when moving\n-from Ada 83 to Ada 95.  For example, consider:\n+from Ada 83 to Ada 95 or Ada 2005.  For example, consider:\n \n @smallexample @c ada\n    type Rec is record;\n@@ -9385,8 +9418,8 @@ from Ada 83 to Ada 95.  For example, consider:\n @noindent\n In the above code, since the typical size of @code{Natural} objects\n is 32 bits and @code{Natural'Size} is 31, the above code can cause\n-unexpected inefficient packing in Ada 95, and in general there are\n-cases where the fact that the object size can exceed the\n+unexpected inefficient packing in Ada 95 and Ada 2005, and in general\n+there are cases where the fact that the object size can exceed the\n size of the type causes surprises.\n \n To help get around this problem GNAT provides two implementation\n@@ -9505,9 +9538,9 @@ subtype x6 is x2'base range 0 .. dynamic;   8               3*\n @end smallexample\n \n @noindent\n-Note: the entries marked ``3*'' are not actually specified by the Ada 95 RM,\n-but it seems in the spirit of the RM rules to allocate the minimum number\n-of bits (here 3, given the range for @code{x2})\n+Note: the entries marked ``3*'' are not actually specified by the Ada\n+Reference Manual, but it seems in the spirit of the RM rules to allocate\n+the minimum number of bits (here 3, given the range for @code{x2})\n known to be large enough to hold the given range of values.\n \n So far, so good, but GNAT has to obey the RM rules, so the question is\n@@ -9980,8 +10013,9 @@ Then the component size of @code{ar} will be set to 5 (i.e.@: to @code{r'size},\n and the size of the array @code{ar} will be exactly 40 bits.\n \n Note that in some cases this rather fierce approach to packing can produce\n-unexpected effects.  For example, in Ada 95, type Natural typically has a\n-size of 31, meaning that if you pack an array of Natural, you get 31-bit\n+unexpected effects.  For example, in Ada 95 and Ada 2005,\n+subtype @code{Natural} typically has a size of 31, meaning that if you\n+pack an array of @code{Natural}, you get 31-bit\n close packing, which saves a few bits, but results in far less efficient\n access.  Since many other Ada compilers will ignore such a packing request,\n GNAT will generate a warning on some uses of pragma @code{Pack} that it guesses\n@@ -10038,11 +10072,12 @@ In all commonly used Ada 83 compilers, this pragma Pack would be ignored,\n since typically @code{Natural'Size} is 32 in Ada 83, and in any case most\n Ada 83 compilers did not attempt 31 bit packing.\n \n-In Ada 95, @code{Natural'Size} is required to be 31. Furthermore, GNAT really\n-does pack 31-bit subtype to 31 bits. This may result in a substantial\n-unintended performance penalty when porting legacy Ada 83 code. To help\n-prevent this, GNAT generates a warning in such cases. If you really want 31\n-bit packing in a case like this, you can set the component size explicitly:\n+In Ada 95 and Ada 2005, @code{Natural'Size} is required to be 31. Furthermore,\n+GNAT really does pack 31-bit subtype to 31 bits. This may result in a\n+substantial unintended performance penalty when porting legacy Ada 83 code.\n+To help prevent this, GNAT generates a warning in such cases. If you really\n+want 31 bit packing in a case like this, you can set the component size\n+explicitly:\n \n @smallexample @c ada\n    type Arr is array (1 .. 32) of Natural;\n@@ -10470,9 +10505,9 @@ In both of these cases, @code{A}\n and @code{B} become aliased to one another via the\n address clause. This use of address clauses to overlay\n variables, achieving an effect similar to unchecked\n-conversion was erroneous in Ada 83, but in Ada 95\n+conversion was erroneous in Ada 83, but in Ada 95 and Ada 2005\n the effect is implementation defined. Furthermore, the\n-Ada 95 RM specifically recommends that in a situation\n+Ada RM specifically recommends that in a situation\n like this, @code{B} should be subject to the following\n implementation advice (RM 13.3(19)):\n \n@@ -10528,6 +10563,14 @@ are essentially of type int.  If pragma @code{Convention C} is specified for an\n Ada enumeration type, then the size is modified as necessary (usually to\n 32 bits) to be consistent with the C convention for enum values.\n \n+Note that this treatment applies only to types. If Convention C is given for\n+an enumeration object, where the enumeration type is not Convention C, then\n+Object_Size bits are allocated. For example, for a normal enumeration type,\n+with less than 256 elements, only 8 bits will be allocated for the object.\n+Since this may be a surprise in terms of what C expects, GNAT will issue a\n+warning in this situation. The warning can be suppressed by giving an explicit\n+size clause specifying the desired size.\n+\n @item Convention C/Fortran and Boolean types\n In C, the usual convention for boolean values, that is values used for\n conditions, is that zero represents false, and nonzero values represent\n@@ -10714,26 +10757,25 @@ the actual representation to be used.\n @chapter Standard Library Routines\n \n @noindent\n-The Ada 95 Reference Manual contains in Annex A a full description of an\n+The Ada Reference Manual contains in Annex A a full description of an\n extensive set of standard library routines that can be used in any Ada\n program, and which must be provided by all Ada compilers.  They are\n analogous to the standard C library used by C programs.\n \n GNAT implements all of the facilities described in annex A, and for most\n-purposes the description in the Ada 95\n-reference manual, or appropriate Ada\n+purposes the description in the Ada Reference Manual, or appropriate Ada\n text book, will be sufficient for making use of these facilities.\n \n In the case of the input-output facilities,\n @xref{The Implementation of Standard I/O},\n gives details on exactly how GNAT interfaces to the\n-file system.  For the remaining packages, the Ada 95 reference manual\n+file system.  For the remaining packages, the Ada Reference Manual\n should be sufficient.  The following is a list of the packages included,\n together with a brief description of the functionality that is provided.\n \n For completeness, references are included to other predefined library\n-routines defined in other sections of the Ada 95 reference manual (these are\n-cross-indexed from annex A).\n+routines defined in other sections of the Ada Reference Manual (these are\n+cross-indexed from Annex A).\n \n @table @code\n @item Ada (A.2)\n@@ -11077,7 +11119,8 @@ be unaligned in this case).\n A pointer other than a pointer to an unconstrained array type may be\n converted to and from System.Address.  Such usage is common in Ada 83\n programs, but note that Ada.Address_To_Access_Conversions is the\n-preferred method of performing such conversions in Ada 95.  Neither\n+preferred method of performing such conversions in Ada 95 and Ada 2005.\n+Neither\n unchecked conversion nor Ada.Address_To_Access_Conversions should be\n used in conjunction with pointers to unconstrained objects, since\n the bounds information cannot be handled correctly in this case.\n@@ -11218,14 +11261,14 @@ types are @code{Wide_Character} and @code{Wide_String} instead of\n \n @noindent\n GNAT implements all the required input-output facilities described in\n-A.6 through A.14.  These sections of the Ada 95 reference manual describe the\n+A.6 through A.14.  These sections of the Ada Reference Manual describe the\n required behavior of these packages from the Ada point of view, and if\n you are writing a portable Ada program that does not need to know the\n exact manner in which Ada maps to the outside world when it comes to\n reading or writing external files, then you do not need to read this\n chapter.  As long as your files are all regular files (not pipes or\n devices), and as long as you write and read the files only from Ada, the\n-description in the Ada 95 reference manual is sufficient.\n+description in the Ada Reference Manual is sufficient.\n \n However, if you want to do input-output to pipes or other devices, such\n as the keyboard or screen, or if the files you are dealing with are\n@@ -11403,9 +11446,9 @@ On some Ada implementations, this will print @code{hell}, but the program is\n clearly incorrect, since there is only one element in the file, and that\n element is the string @code{hello!}.\n \n-In Ada 95, this kind of behavior can be legitimately achieved using\n-Stream_IO, and this is the preferred mechanism.  In particular, the above\n-program fragment rewritten to use Stream_IO will work correctly.\n+In Ada 95 and Ada 2005, this kind of behavior can be legitimately achieved\n+using Stream_IO, and this is the preferred mechanism.  In particular, the\n+above program fragment rewritten to use Stream_IO will work correctly.\n \n @node Text_IO\n @section Text_IO\n@@ -11446,10 +11489,10 @@ or @code{Put_Line}.  There will be no @code{FF} character at the end of\n the file unless an explicit @code{New_Page} operation was performed\n before closing the file.\n \n-A canonical Text_IO file that is a regular file, i.e.@: not a device or a\n-pipe, can be read using any of the routines in Text_IO@.  The\n-semantics in this case will be exactly as defined in the Ada 95 reference\n-manual and all the routines in Text_IO are fully implemented.\n+A canonical Text_IO file that is a regular file (i.e., not a device or a\n+pipe) can be read using any of the routines in Text_IO@.  The\n+semantics in this case will be exactly as defined in the Ada Reference\n+Manual, and all the routines in Text_IO are fully implemented.\n \n A text file that does not meet the requirements for a canonical Text_IO\n file has one of the following:\n@@ -12020,7 +12063,7 @@ it is possible to read beyond an end of file.\n \n @noindent\n A stream file is a sequence of bytes, where individual elements are\n-written to the file as described in the Ada 95 reference manual.  The type\n+written to the file as described in the Ada Reference Manual.  The type\n @code{Stream_Element} is simply a byte.  There are two ways to read or\n write a stream file.\n \n@@ -12038,7 +12081,7 @@ manner described for stream attributes.\n @section Shared Files\n \n @noindent\n-Section A.14 of the Ada 95 Reference Manual allows implementations to\n+Section A.14 of the Ada Reference Manual allows implementations to\n provide a wide variety of behavior if an attempt is made to access the\n same external file with two or more internal files.\n \n@@ -12065,7 +12108,7 @@ multiple accesses to the same external files using separate streams.\n If the form parameter @samp{shared=yes} appears in the form string for\n each of two or more files opened using the same full name, the same\n stream is shared between these files, and the semantics are as described\n-in Ada 95 Reference Manual, Section A.14.\n+in Ada Reference Manual, Section A.14.\n @end itemize\n \n @noindent\n@@ -12092,7 +12135,7 @@ completely.\n One common use of file sharing in Ada 83 is the use of instantiations of\n Sequential_IO on the same file with different types, to achieve\n heterogeneous input-output.  Although this approach will work in GNAT if\n-@samp{shared=yes} is specified, it is preferable in Ada 95 to use Stream_IO\n+@samp{shared=yes} is specified, it is preferable in Ada to use Stream_IO\n for this purpose (using the stream attributes)\n \n @node Filenames encoding\n@@ -12554,7 +12597,7 @@ RM-defined package @code{Ada.Characters.Latin_1} but with the\n few modifications required for @code{Latin-9}\n The provision of such a package\n is specifically authorized by the Ada Reference Manual\n-(RM A.3(27)).\n+(RM A.3.3(27)).\n \n @node Ada.Characters.Wide_Latin_1 (a-cwila1.ads)\n @section @code{Ada.Characters.Wide_Latin_1} (@file{a-cwila1.ads})\n@@ -12568,7 +12611,7 @@ RM-defined package @code{Ada.Characters.Latin_1} but with the\n types of the constants being @code{Wide_Character}\n instead of @code{Character}.  The provision of such a package\n is specifically authorized by the Ada Reference Manual\n-(RM A.3(27)).\n+(RM A.3.3(27)).\n \n @node Ada.Characters.Wide_Latin_9 (a-cwila9.ads)\n @section @code{Ada.Characters.Wide_Latin_9} (@file{a-cwila1.ads})\n@@ -12582,7 +12625,7 @@ GNAT defined package @code{Ada.Characters.Latin_9} but with the\n types of the constants being @code{Wide_Character}\n instead of @code{Character}.  The provision of such a package\n is specifically authorized by the Ada Reference Manual\n-(RM A.3(27)).\n+(RM A.3.3(27)).\n \n @node Ada.Characters.Wide_Wide_Latin_1 (a-czila1.ads)\n @section @code{Ada.Characters.Wide_Wide_Latin_1} (@file{a-czila1.ads})\n@@ -12596,7 +12639,7 @@ RM-defined package @code{Ada.Characters.Latin_1} but with the\n types of the constants being @code{Wide_Wide_Character}\n instead of @code{Character}.  The provision of such a package\n is specifically authorized by the Ada Reference Manual\n-(RM A.3(27)).\n+(RM A.3.3(27)).\n \n @node Ada.Characters.Wide_Wide_Latin_9 (a-czila9.ads)\n @section @code{Ada.Characters.Wide_Wide_Latin_9} (@file{a-czila9.ads})\n@@ -12610,7 +12653,7 @@ GNAT defined package @code{Ada.Characters.Latin_9} but with the\n types of the constants being @code{Wide_Wide_Character}\n instead of @code{Character}.  The provision of such a package\n is specifically authorized by the Ada Reference Manual\n-(RM A.3(27)).\n+(RM A.3.3(27)).\n \n @node Ada.Command_Line.Remove (a-colire.ads)\n @section @code{Ada.Command_Line.Remove} (@file{a-colire.ads})\n@@ -12920,10 +12963,6 @@ of this algorithm see\n @cite{Communications of the ACM}, Vol.@: 31 No.@: 8, pp.@: 1008-1013,\n Aug.@: 1988.  Sarwate, D.V@.\n \n-@noindent\n-Provides an extended capability for formatted output of time values with\n-full user control over the format.  Modeled on the GNU Date specification.\n-\n @node GNAT.Case_Util (g-casuti.ads)\n @section @code{GNAT.Case_Util} (@file{g-casuti.ads})\n @cindex @code{GNAT.Case_Util} (@file{g-casuti.ads})\n@@ -13006,8 +13045,9 @@ Provides a simple interface to handle Ctrl-C keyboard events.\n \n @noindent\n Provides access to information on the current exception that has been raised\n-without the need for using the Ada-95 exception choice parameter specification\n-syntax.  This is particularly useful in simulating typical facilities for\n+without the need for using the Ada 95 / Ada 2005 exception choice parameter\n+specification syntax.\n+This is particularly useful in simulating typical facilities for\n obtaining information about exceptions provided by Ada 83 compilers.\n \n @node GNAT.Debug_Pools (g-debpoo.ads)\n@@ -13033,8 +13073,8 @@ to and from string images of address values. Supports both C and Ada formats\n for hexadecimal literals.\n \n @node GNAT.Directory_Operations (g-dirope.ads)\n-@section @code{GNAT.Directory_Operations} (g-dirope.ads)\n-@cindex @code{GNAT.Directory_Operations} (g-dirope.ads)\n+@section @code{GNAT.Directory_Operations} (@file{g-dirope.ads})\n+@cindex @code{GNAT.Directory_Operations} (@file{g-dirope.ads})\n @cindex Directory operations\n \n @noindent\n@@ -13514,7 +13554,8 @@ in various debugging situations.\n \n @noindent\n Provides symbolic traceback information that includes the subprogram\n-name and line number information.\n+name and line number information. Note that this capability is not available\n+on all targets, see g-trasym.ads for list of supported targets.\n \n @node GNAT.Wide_String_Split (g-wistsp.ads)\n @section @code{GNAT.Wide_String_Split} (@file{g-wistsp.ads})\n@@ -13755,7 +13796,7 @@ the package @code{System.Wch_Cnv}.\n @node Interfacing to Other Languages\n @chapter Interfacing to Other Languages\n @noindent\n-The facilities in annex B of the Ada 95 Reference Manual are fully\n+The facilities in annex B of the Ada Reference Manual are fully\n implemented in GNAT, and in addition, a full interface to C++ is\n provided.\n \n@@ -13870,14 +13911,14 @@ with pragma @code{Import}) as corresponding to a C++ constructor.\n \n @noindent\n Interfacing to COBOL is achieved as described in section B.4 of\n-the Ada 95 reference manual.\n+the Ada Reference Manual.\n \n @node Interfacing to Fortran\n @section Interfacing to Fortran\n \n @noindent\n Interfacing to Fortran is achieved as described in section B.5 of the\n-reference manual.  The pragma @code{Convention Fortran}, applied to a\n+Ada Reference Manual.  The pragma @code{Convention Fortran}, applied to a\n multi-dimensional array causes the array to be stored in column-major\n order as required for convenient interface to Fortran.\n \n@@ -13887,7 +13928,7 @@ order as required for convenient interface to Fortran.\n It is possible to specify the convention @code{Ada} in a pragma\n @code{Import} or pragma @code{Export}.  However this refers to\n the calling conventions used by GNAT, which may or may not be\n-similar enough to those used by some other Ada 83 or Ada 95\n+similar enough to those used by some other Ada 83 / Ada 95 / Ada 2005\n compiler to allow interoperation.\n \n If arguments types are kept simple, and if the foreign compiler generally\n@@ -13907,9 +13948,9 @@ types with fixed bounds.\n @chapter Specialized Needs Annexes\n \n @noindent\n-Ada 95 defines a number of specialized needs annexes, which are not\n+Ada 95 and Ada 2005 define a number of Specialized Needs Annexes, which are not\n required in all implementations.  However, as described in this chapter,\n-GNAT implements all of these special needs annexes:\n+GNAT implements all of these annexes:\n \n @table @asis\n @item Systems Programming (Annex C)\n@@ -13930,8 +13971,9 @@ The Information Systems annex is fully implemented.\n @item Numerics (Annex G)\n The Numerics Annex is fully implemented.\n \n-@item Safety and Security (Annex H)\n-The Safety and Security annex is fully implemented.\n+@item Safety and Security / High-Integrity Systems (Annex H)\n+The Safety and Security Annex (termed the High-Integrity Systems Annex\n+in Ada 2005) is fully implemented.\n @end table\n \n @node Implementation of Specific Ada Features\n@@ -13947,15 +13989,16 @@ facilities.\n * GNAT Implementation of Shared Passive Packages::\n * Code Generation for Array Aggregates::\n * The Size of Discriminated Records with Default Discriminants::\n-* Strict Conformance to the Ada 95 Reference Manual::\n+* Strict Conformance to the Ada Reference Manual::\n @end menu\n \n @node Machine Code Insertions\n @section Machine Code Insertions\n+@cindex Machine Code insertions\n \n @noindent\n Package @code{Machine_Code} provides machine code support as described\n-in the Ada 95 Reference Manual in two separate forms:\n+in the Ada Reference Manual in two separate forms:\n @itemize @bullet\n @item\n Machine code statements, consisting of qualified expressions that\n@@ -13971,7 +14014,8 @@ provided by the asm instruction in the GNU C compiler.  Full understanding\n and use of the facilities in this package requires understanding the asm\n instruction as described in @cite{Using the GNU Compiler Collection (GCC)}\n by Richard Stallman. The relevant section is titled ``Extensions to the C\n-Language Family'' -> ``Assembler Instructions with C Expression Operands''.\n+Language Family'' @result{} ``Assembler Instructions with C Expression\n+Operands''.\n \n Calls to the function @code{Asm} and the procedure @code{Asm} have identical\n semantic restrictions and effects as described below.  Both are provided so\n@@ -14546,7 +14590,7 @@ was used by some Ada83 compilers, where the @code{Name} component above\n would have\n been stored as a pointer to a dynamic string). Following the principle that\n dynamic storage management should never be introduced implicitly,\n-an Ada95 compiler should reserve the full size for an unconstrained declared\n+an Ada compiler should reserve the full size for an unconstrained declared\n object, and place it on the stack.\n \n This maximum size approach\n@@ -14585,20 +14629,20 @@ aliasing all views of the object (which may be manipulated by different tasks,\n say) must be consistent, so it is imperative that the object, once created,\n remain invariant.\n \n-@node Strict Conformance to the Ada 95 Reference Manual\n-@section Strict Conformance to the Ada 95 Reference Manual\n+@node Strict Conformance to the Ada Reference Manual\n+@section Strict Conformance to the Ada Reference Manual\n \n @noindent\n-The dynamic semantics defined by the Ada 95 Reference Manual impose a set of\n+The dynamic semantics defined by the Ada Reference Manual impose a set of\n run-time checks to be generated. By default, the GNAT compiler will insert many\n run-time checks into the compiled code, including most of those required by the\n-Ada 95 Reference Manual. However, there are three checks that are not enabled\n+Ada Reference Manual. However, there are three checks that are not enabled\n in the default mode for efficiency reasons: arithmetic overflow checking for\n integer operations (including division by zero), checks for access before\n elaboration on subprogram calls, and stack overflow checking (most operating\n systems do not perform this check by default).\n \n-Strict conformance to the Ada 95 Reference Manual can be achieved by adding\n+Strict conformance to the Ada Reference Manual can be achieved by adding\n three compiler options for overflow checking for integer operations\n (@option{-gnato}), dynamic checks for access-before-elaboration on subprogram\n calls and generic instantiations (@option{-gnatE}), and stack overflow\n@@ -14648,7 +14692,7 @@ See the chapter on project files in the GNAT Users guide for examples of use.\n @section Reserved Words\n \n @noindent\n-All Ada95 reserved words are reserved in project files, and cannot be used\n+All Ada reserved words are reserved in project files, and cannot be used\n as variable names or project names. In addition, the following are\n also reserved in project files:\n \n@@ -14665,9 +14709,9 @@ also reserved in project files:\n @section Lexical Elements\n \n @noindent\n-Rules for identifiers are the same as in Ada95. Identifiers\n+Rules for identifiers are the same as in Ada. Identifiers\n are case-insensitive.  Strings are case sensitive, except where noted.\n-Comments have the same form as in Ada95.\n+Comments have the same form as in Ada.\n \n @noindent\n Syntax:\n@@ -14943,17 +14987,19 @@ and must be writable.\n Expression must be a single string. Its value is the single file name of a\n symbol file to be created when building a stand-alone library when the\n symbol policy is either \"compliant\", \"controlled\" or \"restricted\",\n-on platforms that support symbol control, such as VMS.\n+on platforms that support symbol control, such as VMS. When symbol policy\n+is \"direct\", then a file with this name must exist in the object directory.\n \n @item   Library_Reference_Symbol_File\n-Expression must be a single string. Its value is the single file name of a\n+Expression must be a single string. Its value is the path name of a\n reference symbol file that is read when the symbol policy is either\n \"compliant\" or \"controlled\", on platforms that support symbol control,\n-such as VMS, when building a stand-alone library.\n+such as VMS, when building a stand-alone library. The path may be an absolute\n+path or a path relative to the project directory.\n \n @item  Library_Symbol_Policy\n Expression must be a single string. Its case-insensitive value can only be\n-\"autonomous\", \"default\", \"compliant\", \"controlled\" or \"restricted\".\n+\"autonomous\", \"default\", \"compliant\", \"controlled\", \"restricted\" or \"direct\".\n \n This attribute is not taken into account on all platforms. It controls the\n policy for exported symbols and, on some platforms (like VMS) that have the\n@@ -14979,6 +15025,10 @@ will fail to build if there are symbols in the symbol file that are not in\n the exported symbols of the object files of the interfaces. Additional symbols\n in the object files are not added to the symbol file.\n \n+\"direct\": The attribute Library_Symbol_File must be defined and must designate\n+an existing file in the object directory. This symbol file is passed directly\n+to the underlying linker without any symbol processing.\n+\n @item  Main\n Expression must be a list of strings that are legal file names.\n These file names designate existing compilation units in the source directory\n@@ -15057,8 +15107,8 @@ external value either on the command line or in the environment.\n @section Case Construction\n \n @noindent\n-A case construction supports attribute declarations that depend on the value of\n-a previously declared variable.\n+A case construction supports attribute and variable declarations that depend\n+on the value of a previously declared variable.\n \n Syntax:\n @smallexample\n@@ -15069,14 +15119,20 @@ case_construction ::=\n \n case_item ::=\n   @b{when} discrete_choice_list =>\n-    @{case_construction | attribute_declaration | empty_declaration@}\n+    @{case_construction |\n+      attribute_declaration |\n+      variable_declaration |\n+      empty_declaration@}\n \n discrete_choice_list ::=\n   string_literal @{| string_literal@} |\n     @b{others}\n @end smallexample\n \n @noindent\n+Inside a case construction, variable declarations must be for variables that\n+have already been declared before the case construction.\n+\n All choices in a choice list must be distinct. The choice lists of two\n distinct alternatives must be disjoint. Unlike Ada, the choice lists of all\n alternatives do not need to include all values of the type. An @code{others}"}, {"sha": "12a79bac207b742a9a187eb9159dc76f200c1245", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 2311, "deletions": 908, "changes": 3219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08b38f55529d03241009f7ec4227af1b08e2e7b/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08b38f55529d03241009f7ec4227af1b08e2e7b/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=e08b38f55529d03241009f7ec4227af1b08e2e7b"}, {"sha": "bd4f779fb9e930e45d583ca55574c7707d82a7f0", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08b38f55529d03241009f7ec4227af1b08e2e7b/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08b38f55529d03241009f7ec4227af1b08e2e7b/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=e08b38f55529d03241009f7ec4227af1b08e2e7b", "patch": "@@ -116,6 +116,8 @@ gcc -c          ^ GNAT COMPILE\n -gnatwB         ^ /WARNINGS=NO_BAD_FIXED_VALUES\n -gnatwc         ^ /WARNINGS=CONDITIONALS\n -gnatwC         ^ /WARNINGS=NOCONDITIONALS\n+-gnatw.c        ^ /WARNINGS=MISSING_COMPONENT_CLAUSES\n+-gnatw.C        ^ /WARNINGS=NOMISSING_COMPONENT_CLAUSES\n -gnatwd         ^ /WARNINGS=IMPLICIT_DEREFERENCE\n -gnatwD         ^ /WARNINGS=NOIMPLICIT_DEREFERENCE\n -gnatwe         ^ /WARNINGS=ERRORS\n@@ -155,6 +157,8 @@ gcc -c          ^ GNAT COMPILE\n -gnatwW         ^ /WARNINGS=NOLOWBOUND_ASSUMED\n -gnatwx         ^ /WARNINGS=IMPORT_EXPORT_PRAGMAS\n -gnatwX         ^ /WARNINGS=NOIMPORT_EXPORT_PRAGMAS\n+-gnatw.x        ^ /WARNINGS=LOCAL_RAISE_HANDLING\n+-gnatw.X        ^ /WARNINGS=NOLOCAL_RAISE_HANDLING\n -gnatwy         ^ /WARNINGS=ADA_2005_COMPATIBILITY\n -gnatwY         ^ /WARNINGS=NOADA_2005_COMPATIBILITY\n -gnatwz         ^ /WARNINGS=UNCHECKED_CONVERSIONS"}, {"sha": "7688b62c9e34bd48b0bb2285e4e5f94901309b74", "filename": "gcc/ada/xgnatugn.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08b38f55529d03241009f7ec4227af1b08e2e7b/gcc%2Fada%2Fxgnatugn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08b38f55529d03241009f7ec4227af1b08e2e7b/gcc%2Fada%2Fxgnatugn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxgnatugn.adb?ref=e08b38f55529d03241009f7ec4227af1b08e2e7b", "patch": "@@ -477,7 +477,7 @@ procedure Xgnatugn is\n                   Non_Word_Character : constant Natural :=\n                                          Index (Source,\n                                                 Word_Characters or\n-                                                  To_Set (\" \"),\n+                                                  To_Set (\" .\"),\n                                                 Outside);\n \n                begin"}]}