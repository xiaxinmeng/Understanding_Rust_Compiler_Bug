{"sha": "02cab1c17d01ff160ab64281acc85a5c3709cafd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJjYWIxYzE3ZDAxZmYxNjBhYjY0MjgxYWNjODVhNWMzNzA5Y2FmZA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2013-07-30T15:58:32Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2013-07-30T15:58:32Z"}, "message": "config.gcc (arm): Require 64-bit host-wide-int for all ARM target configs.\n\n\t* config.gcc (arm): Require 64-bit host-wide-int for all ARM target\n\tconfigs.\n\nFrom-SVN: r201342", "tree": {"sha": "283eccccd67033e43da206a7268493b57c19befa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/283eccccd67033e43da206a7268493b57c19befa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02cab1c17d01ff160ab64281acc85a5c3709cafd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02cab1c17d01ff160ab64281acc85a5c3709cafd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02cab1c17d01ff160ab64281acc85a5c3709cafd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02cab1c17d01ff160ab64281acc85a5c3709cafd/comments", "author": null, "committer": null, "parents": [{"sha": "b2d3f886f51d4d62f5c5321b3fa00e5d4f7a28df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2d3f886f51d4d62f5c5321b3fa00e5d4f7a28df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2d3f886f51d4d62f5c5321b3fa00e5d4f7a28df"}], "stats": {"total": 18, "additions": 6, "deletions": 12}, "files": [{"sha": "500fa7cdf31915838b179d5781520f2413062b73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02cab1c17d01ff160ab64281acc85a5c3709cafd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02cab1c17d01ff160ab64281acc85a5c3709cafd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02cab1c17d01ff160ab64281acc85a5c3709cafd", "patch": "@@ -1,3 +1,8 @@\n+2013-07-30  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config.gcc (arm): Require 64-bit host-wide-int for all ARM target\n+\tconfigs.\n+\n 2013-07-30  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.md (mulhi3): New expand pattern."}, {"sha": "efb74f7e1345626ad9236a917f6bf468d05bda90", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02cab1c17d01ff160ab64281acc85a5c3709cafd/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02cab1c17d01ff160ab64281acc85a5c3709cafd/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=02cab1c17d01ff160ab64281acc85a5c3709cafd", "patch": "@@ -330,6 +330,7 @@ arm*-*-*)\n \ttarget_type_format_char='%'\n \tc_target_objs=\"arm-c.o\"\n \tcxx_target_objs=\"arm-c.o\"\n+\tneed_64bit_hwint=yes\n \textra_options=\"${extra_options} arm/arm-tables.opt\"\n \t;;\n avr-*-*)\n@@ -943,10 +944,6 @@ arm*-*-linux-*)\t\t\t# ARM GNU/Linux with ELF\n \t    tmake_file=\"$tmake_file arm/t-linux-androideabi\"\n \t    ;;\n \tesac\n-  \t# The BPABI long long divmod functions return a 128-bit value in\n-\t# registers r0-r3.  Correctly modeling that requires the use of\n-\t# TImode.\n-\tneed_64bit_hwint=yes\n \t# The EABI requires the use of __cxa_atexit.\n \tdefault_use_cxa_atexit=yes\n \twith_tls=${with_tls:-gnu}\n@@ -955,10 +952,6 @@ arm*-*-uclinux*eabi*)\t\t# ARM ucLinux\n \ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/linux-gas.h arm/uclinux-elf.h glibc-stdint.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-elf arm/t-bpabi\"\n \ttm_file=\"$tm_file arm/bpabi.h arm/uclinux-eabi.h arm/aout.h vxworks-dummy.h arm/arm.h\"\n-\t# The BPABI long long divmod functions return a 128-bit value in\n-\t# registers r0-r3.  Correctly modeling that requires the use of\n-\t# TImode.\n-\tneed_64bit_hwint=yes\n \t# The EABI requires the use of __cxa_atexit.\n \tdefault_use_cxa_atexit=yes\n \t;;\n@@ -967,10 +960,6 @@ arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems*)\n \tarm*eb-*-eabi*)\n \t  tm_defines=\"${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1\"\n \tesac\n-\t# The BPABI long long divmod functions return a 128-bit value in\n-\t# registers r0-r3.  Correctly modeling that requires the use of\n-\t# TImode.\n-\tneed_64bit_hwint=yes\n \tdefault_use_cxa_atexit=yes\n \ttm_file=\"dbxelf.h elfos.h arm/unknown-elf.h arm/elf.h arm/bpabi.h\"\n \ttmake_file=\"arm/t-arm arm/t-arm-elf\""}]}