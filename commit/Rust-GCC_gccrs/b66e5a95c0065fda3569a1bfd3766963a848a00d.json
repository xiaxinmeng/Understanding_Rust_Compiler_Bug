{"sha": "b66e5a95c0065fda3569a1bfd3766963a848a00d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY2ZTVhOTVjMDA2NWZkYTM1NjlhMWJmZDM3NjY5NjNhODQ4YTAwZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-08-10T20:20:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-10T20:20:27Z"}, "message": "PR libstdc++/68210 adjust operator new and delete for LWG 206\n\nEnsure that nothrow versions of new and delete call the ordinary\nversions of new or delete, instead of calling malloc or free directly.\n\nThese files are all compiled with -std=gnu++14 so can use noexcept and\nnullptr to make the code more readable.\n\n\tPR libstdc++/68210\n\t* doc/xml/manual/intro.xml: Document LWG 206 change.\n\t* libsupc++/del_op.cc: Replace _GLIBCXX_USE_NOEXCEPT with noexcept.\n\t* libsupc++/del_opa.cc: Likewise.\n\t* libsupc++/del_opant.cc: Likewise.\n\t* libsupc++/del_opnt.cc: Likewise. Call operator delete(ptr) instead\n\tof free(ptr).\n\t* libsupc++/del_ops.cc: Replace _GLIBCXX_USE_NOEXCEPT with noexcept.\n\t* libsupc++/del_opsa.cc: Likewise.\n\t* libsupc++/del_opva.cc: Likewise.\n\t* libsupc++/del_opvant.cc: Likewise.\n\t* libsupc++/del_opvnt.cc: Likewise. Call operator delete[](ptr)\n\tinstead of operator delete(ptr).\n\t* libsupc++/del_opvs.cc: Replace _GLIBCXX_USE_NOEXCEPT with noexcept.\n\t* libsupc++/del_opvsa.cc: Likewise.\n\t* libsupc++/new_op.cc: Use __builtin_expect in check for zero size.\n\t* libsupc++/new_opa.cc: Use nullptr instead of literal 0.\n\t* libsupc++/new_opant.cc: Likewise. Replace _GLIBCXX_USE_NOEXCEPT\n\twith noexcept.\n\t* libsupc++/new_opnt.cc: Likewise. Call operator new(sz) instead of\n\tmalloc(sz).\n\t* libsupc++/new_opvant.cc: Use nullptr and noexcept.\n\t* libsupc++/new_opvnt.cc: Likewise. Call operator new[](sz) instead of\n\toperator new(sz, nothrow).\n\t* testsuite/18_support/new_nothrow.cc: New test.\n\nFrom-SVN: r263478", "tree": {"sha": "53e48d628c8491683df2c3f5157fe66602679234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53e48d628c8491683df2c3f5157fe66602679234"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b66e5a95c0065fda3569a1bfd3766963a848a00d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66e5a95c0065fda3569a1bfd3766963a848a00d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b66e5a95c0065fda3569a1bfd3766963a848a00d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b66e5a95c0065fda3569a1bfd3766963a848a00d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6894c57b1e2c9068471f26f3d8d4f3f374126f52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6894c57b1e2c9068471f26f3d8d4f3f374126f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6894c57b1e2c9068471f26f3d8d4f3f374126f52"}], "stats": {"total": 313, "additions": 268, "deletions": 45}, "files": [{"sha": "fd547e26039146f0e9e96e7ad8047fe7b9ac0b0c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -1,3 +1,31 @@\n+2018-08-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/68210\n+\t* doc/xml/manual/intro.xml: Document LWG 206 change.\n+\t* libsupc++/del_op.cc: Replace _GLIBCXX_USE_NOEXCEPT with noexcept.\n+\t* libsupc++/del_opa.cc: Likewise.\n+\t* libsupc++/del_opant.cc: Likewise.\n+\t* libsupc++/del_opnt.cc: Likewise. Call operator delete(ptr) instead\n+\tof free(ptr).\n+\t* libsupc++/del_ops.cc: Replace _GLIBCXX_USE_NOEXCEPT with noexcept.\n+\t* libsupc++/del_opsa.cc: Likewise.\n+\t* libsupc++/del_opva.cc: Likewise.\n+\t* libsupc++/del_opvant.cc: Likewise.\n+\t* libsupc++/del_opvnt.cc: Likewise. Call operator delete[](ptr)\n+\tinstead of operator delete(ptr).\n+\t* libsupc++/del_opvs.cc: Replace _GLIBCXX_USE_NOEXCEPT with noexcept.\n+\t* libsupc++/del_opvsa.cc: Likewise.\n+\t* libsupc++/new_op.cc: Use __builtin_expect in check for zero size.\n+\t* libsupc++/new_opa.cc: Use nullptr instead of literal 0.\n+\t* libsupc++/new_opant.cc: Likewise. Replace _GLIBCXX_USE_NOEXCEPT\n+\twith noexcept.\n+\t* libsupc++/new_opnt.cc: Likewise. Call operator new(sz) instead of\n+\tmalloc(sz).\n+\t* libsupc++/new_opvant.cc: Use nullptr and noexcept.\n+\t* libsupc++/new_opvnt.cc: Likewise. Call operator new[](sz) instead of\n+\toperator new(sz, nothrow).\n+\t* testsuite/18_support/new_nothrow.cc: New test.\n+\n 2018-08-10  Martin Liska  <mliska@suse.cz>\n \n \t* libsupc++/new_op.cc (new): Remove __builtin_expect as malloc"}, {"sha": "cb187e1a2ed7733305069872aac70c2c383a5b7b", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -440,6 +440,17 @@ requirements of the license of GCC.\n     <listitem><para>Yes, it can, specifically if EOF is reached while skipping whitespace.\n     </para></listitem></varlistentry>\n \n+    <varlistentry xml:id=\"manual.bugs.dr206\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#206\">206</link>:\n+\t<emphasis><code>operator new(size_t, nothrow)</code> may become\n+          unlinked to ordinary <code>operator new</code> if ordinary\n+          version replaced\n+        </emphasis>\n+    </term>\n+    <listitem><para>The <code>nothrow</code> forms of new and delete were\n+      changed to call the throwing forms, handling any exception by\n+      catching it and returning a null pointer.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry xml:id=\"manual.bugs.dr211\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#211\">211</link>:\n \t<emphasis>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</emphasis>\n     </term>"}, {"sha": "ab3b617afa7a5a822d52155d61b9199857c58911", "filename": "libstdc++-v3/libsupc++/del_op.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -44,7 +44,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #pragma GCC diagnostic ignored \"-Wsized-deallocation\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete(void* ptr) _GLIBCXX_USE_NOEXCEPT\n+operator delete(void* ptr) noexcept\n {\n   std::free(ptr);\n }"}, {"sha": "2a1f0aba3a16134f5641c6b5d8100c8b8c0b5a9d", "filename": "libstdc++-v3/libsupc++/del_opa.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opa.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -44,7 +44,7 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #pragma GCC diagnostic ignored \"-Wsized-deallocation\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete(void* ptr, std::align_val_t) _GLIBCXX_USE_NOEXCEPT\n+operator delete(void* ptr, std::align_val_t) noexcept\n {\n #if _GLIBCXX_HAVE_ALIGNED_ALLOC || _GLIBCXX_HAVE_POSIX_MEMALIGN \\\n     || _GLIBCXX_HAVE_MEMALIGN"}, {"sha": "603d9f2e9d29f0eb3b56cfe66586540c467d8d58", "filename": "libstdc++-v3/libsupc++/del_opant.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opant.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opant.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opant.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -27,7 +27,7 @@\n #include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete (void *ptr, std::align_val_t al, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n+operator delete (void *ptr, std::align_val_t al, const std::nothrow_t&) noexcept\n {\n   ::operator delete (ptr, al);\n }"}, {"sha": "a2762659d9feaa366d3d9e182a792fc60129d11a", "filename": "libstdc++-v3/libsupc++/del_opnt.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -41,7 +41,10 @@ _GLIBCXX_END_NAMESPACE_VERSION\n #include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete (void *ptr, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n+operator delete (void *ptr, const std::nothrow_t&) noexcept\n {\n-  std::free(ptr);\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 206. operator new(size_t, nothrow) may become unlinked to ordinary\n+  // operator new if ordinary version replaced\n+  ::operator delete (ptr);\n }"}, {"sha": "e452c7cf19eb85fcc81f5863fae7ac7b4d9b9190", "filename": "libstdc++-v3/libsupc++/del_ops.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_ops.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -28,7 +28,7 @@\n #include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete(void* ptr, std::size_t) _GLIBCXX_USE_NOEXCEPT\n+operator delete(void* ptr, std::size_t) noexcept\n {\n   ::operator delete (ptr);\n }"}, {"sha": "2cadb4b6ae428272213e9fdf39b9d1467a6cb5a0", "filename": "libstdc++-v3/libsupc++/del_opsa.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opsa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opsa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opsa.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -27,7 +27,7 @@\n #include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete(void* ptr, std::size_t, std::align_val_t al) _GLIBCXX_USE_NOEXCEPT\n+operator delete(void* ptr, std::size_t, std::align_val_t al) noexcept\n {\n   ::operator delete (ptr, al);\n }"}, {"sha": "a539ccc81878c090a4fc08512634e54d27d0fb40", "filename": "libstdc++-v3/libsupc++/del_opva.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opva.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opva.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opva.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -30,7 +30,7 @@\n #pragma GCC diagnostic ignored \"-Wsized-deallocation\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete[] (void *ptr, std::align_val_t al) _GLIBCXX_USE_NOEXCEPT\n+operator delete[] (void *ptr, std::align_val_t al) noexcept\n {\n   ::operator delete (ptr, al);\n }"}, {"sha": "892c8b7999b3cd83590831df09a4e6c8cde8ad27", "filename": "libstdc++-v3/libsupc++/del_opvant.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvant.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvant.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvant.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -27,7 +27,7 @@\n #include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete[] (void *ptr, std::align_val_t al, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n+operator delete[] (void *ptr, std::align_val_t al, const std::nothrow_t&) noexcept\n {\n   ::operator delete[] (ptr, al);\n }"}, {"sha": "f050526093b4174315d45cd1810599f31a0182ff", "filename": "libstdc++-v3/libsupc++/del_opvnt.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -27,7 +27,7 @@\n #include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete[] (void *ptr, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n+operator delete[] (void *ptr, const std::nothrow_t&) noexcept\n {\n-  ::operator delete (ptr);\n+  ::operator delete[] (ptr);\n }"}, {"sha": "4b1e161fb2574b2cba011c7979fd0ef9d2d170cf", "filename": "libstdc++-v3/libsupc++/del_opvs.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvs.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -28,7 +28,7 @@\n #include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete[] (void *ptr, std::size_t) _GLIBCXX_USE_NOEXCEPT\n+operator delete[] (void *ptr, std::size_t) noexcept\n {\n   ::operator delete[] (ptr);\n }"}, {"sha": "00ea369ee6909767eadd8502ee28c957aa1dbb27", "filename": "libstdc++-v3/libsupc++/del_opvsa.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvsa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvsa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvsa.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -27,7 +27,7 @@\n #include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void\n-operator delete[] (void *ptr, std::size_t, std::align_val_t al) _GLIBCXX_USE_NOEXCEPT\n+operator delete[] (void *ptr, std::size_t, std::align_val_t al) noexcept\n {\n   ::operator delete[] (ptr, al);\n }"}, {"sha": "df77950cd97d0151ee915a70ced4087fd6c14f5d", "filename": "libstdc++-v3/libsupc++/new_op.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -44,7 +44,7 @@ operator new (std::size_t sz) _GLIBCXX_THROW (std::bad_alloc)\n   void *p;\n \n   /* malloc (0) is unpredictable; avoid it.  */\n-  if (sz == 0)\n+  if (__builtin_expect (sz == 0, false))\n     sz = 1;\n \n   while ((p = malloc (sz)) == 0)"}, {"sha": "aa3e5dc4ce5d6ed553e3e1ab4e0e60c972e63aa8", "filename": "libstdc++-v3/libsupc++/new_opa.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opa.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -101,7 +101,6 @@ aligned_alloc (std::size_t al, std::size_t sz)\n _GLIBCXX_WEAK_DEFINITION void *\n operator new (std::size_t sz, std::align_val_t al)\n {\n-  void *p;\n   std::size_t align = (std::size_t)al;\n \n   /* Alignment must be a power of two.  */\n@@ -125,8 +124,9 @@ operator new (std::size_t sz, std::align_val_t al)\n     sz += align - rem;\n #endif\n \n-  using __gnu_cxx::aligned_alloc;\n-  while ((p = aligned_alloc (align, sz)) == 0)\n+  void *p;\n+\n+  while ((p = __gnu_cxx::aligned_alloc (align, sz)) == nullptr)\n     {\n       new_handler handler = std::get_new_handler ();\n       if (! handler)"}, {"sha": "f08ae0c2ac480a6911e69570bd28b3648007b454", "filename": "libstdc++-v3/libsupc++/new_opant.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opant.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opant.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opant.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -29,14 +29,14 @@\n \n _GLIBCXX_WEAK_DEFINITION void*\n operator new(std::size_t sz, std::align_val_t al, const std::nothrow_t&)\n-  _GLIBCXX_USE_NOEXCEPT\n+  noexcept\n {\n   __try\n     {\n       return operator new(sz, al);\n     }\n   __catch(...)\n     {\n-      return 0;\n+      return nullptr;\n     }\n }"}, {"sha": "ffe44b939bb5400af347e2938c27f6b5f7f52fb4", "filename": "libstdc++-v3/libsupc++/new_opnt.cc", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -32,28 +32,17 @@ using std::bad_alloc;\n extern \"C\" void *malloc (std::size_t);\n \n _GLIBCXX_WEAK_DEFINITION void *\n-operator new (std::size_t sz, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT\n+operator new (std::size_t sz, const std::nothrow_t&) noexcept\n {\n-  void *p;\n-\n-  /* malloc (0) is unpredictable; avoid it.  */\n-  if (sz == 0)\n-    sz = 1;\n-\n-  while ((p = malloc (sz)) == 0)\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 206. operator new(size_t, nothrow) may become unlinked to ordinary\n+  // operator new if ordinary version replaced\n+  __try\n     {\n-      new_handler handler = std::get_new_handler ();\n-      if (! handler)\n-\treturn 0;\n-      __try\n-\t{\n-\t  handler ();\n-\t}\n-      __catch(const bad_alloc&)\n-\t{\n-\t  return 0;\n-\t}\n+      return ::operator new(sz);\n+    }\n+  __catch (...)\n+    {\n+      return nullptr;\n     }\n-\n-  return p;\n }"}, {"sha": "4ba1268fbe9ce799f040e30442952752f069aac1", "filename": "libstdc++-v3/libsupc++/new_opvant.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvant.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvant.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvant.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -29,14 +29,14 @@\n \n _GLIBCXX_WEAK_DEFINITION void*\n operator new[] (std::size_t sz, std::align_val_t al, const std::nothrow_t&)\n-  _GLIBCXX_USE_NOEXCEPT\n+  noexcept\n {\n   __try\n     {\n       return ::operator new[](sz, al);\n     }\n   __catch(...)\n     {\n-      return 0;\n+      return nullptr;\n     }\n }"}, {"sha": "3678b8e1ac9395e120142bc32fce17ac6ec9f869", "filename": "libstdc++-v3/libsupc++/new_opvnt.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -27,8 +27,17 @@\n #include \"new\"\n  \n _GLIBCXX_WEAK_DEFINITION void*\n-operator new[] (std::size_t sz, const std::nothrow_t& nothrow)\n-  _GLIBCXX_USE_NOEXCEPT\n+operator new[] (std::size_t sz, const std::nothrow_t&) noexcept\n {\n-  return ::operator new(sz, nothrow);\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 206. operator new(size_t, nothrow) may become unlinked to ordinary\n+  // operator new if ordinary version replaced\n+  __try\n+    {\n+      return ::operator new[](sz);\n+    }\n+  __catch (...)\n+    {\n+      return nullptr;\n+    }\n }"}, {"sha": "362dabf2bcf102913fafb56a25809403b7b58e3f", "filename": "libstdc++-v3/testsuite/18_support/new_nothrow.cc", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnew_nothrow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b66e5a95c0065fda3569a1bfd3766963a848a00d/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnew_nothrow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnew_nothrow.cc?ref=b66e5a95c0065fda3569a1bfd3766963a848a00d", "patch": "@@ -0,0 +1,183 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+\n+#include <new>\n+#include <stdlib.h>\n+#include <testsuite_hooks.h>\n+\n+// PR libstdc++/68210\n+\n+struct MyBadAlloc: std::bad_alloc { };\n+\n+static bool new_fail;\n+static bool bad_alloc_thrown;\n+static unsigned new_called;\n+static unsigned delete_called;\n+static unsigned new_vec_called;\n+static unsigned delete_vec_called;\n+static unsigned new_handler_called;\n+\n+static void new_handler ()\n+{\n+    if (new_handler_called++)\n+        throw MyBadAlloc ();\n+}\n+\n+void* operator new (size_t n)\n+{\n+    static size_t cntr;\n+\n+    ++new_called;\n+\n+    for ( ; ; ) {\n+        if (void *p = new_fail ? 0 : malloc (n + sizeof n)) {\n+            *static_cast<size_t*>(p) = ++cntr;\n+            return static_cast<size_t*>(p) + 1;\n+        }\n+\n+        if (std::new_handler h = std::set_new_handler (0)) {\n+            std::set_new_handler (h);\n+            h ();\n+        }\n+        else {\n+            bad_alloc_thrown = true;\n+            throw MyBadAlloc ();\n+        }\n+    }\n+}\n+\n+void operator delete (void *p)\n+{\n+    ++delete_called;\n+    if (p)\n+        free (static_cast<size_t*>(p) - 1);\n+}\n+\n+void* operator new[] (size_t n)\n+{\n+    ++new_vec_called;\n+    return operator new(n);\n+}\n+\n+void operator delete[] (void *p)\n+{\n+    ++delete_vec_called;\n+    operator delete(p);\n+}\n+\n+#if __cplusplus >= 201402L\n+void operator delete (void *p, std::size_t)\n+{\n+  ::operator delete(p);\n+}\n+void operator delete[] (void *p, std::size_t)\n+{\n+  ::operator delete[](p);\n+}\n+#endif\n+\n+void init()\n+{\n+    new_fail = false;\n+    new_called = 0;\n+    delete_called = 0;\n+    new_vec_called = 0;\n+    delete_vec_called = 0;\n+    new_handler_called = 0;\n+    std::set_new_handler (0);\n+}\n+\n+void\n+test01()\n+{\n+    init ();\n+\n+    void *p = operator new (1, std::nothrow);\n+\n+    VERIFY (p != 0);\n+    VERIFY (1 == new_called);\n+    VERIFY (0 == new_handler_called);\n+    VERIFY (!bad_alloc_thrown);\n+\n+    operator delete (p, std::nothrow);\n+    VERIFY( 1 == delete_called );\n+\n+    new_fail = true;\n+    p = operator new (1, std::nothrow);\n+\n+    VERIFY (0 == p);\n+    VERIFY (2 == new_called);\n+    VERIFY (0 == new_handler_called);\n+    VERIFY (bad_alloc_thrown);\n+\n+    new_fail = true;\n+    bad_alloc_thrown = false;\n+    std::set_new_handler (new_handler);\n+    p = operator new (1, std::nothrow);\n+\n+    VERIFY (0 == p);\n+    VERIFY (3 == new_called);\n+    VERIFY (2 == new_handler_called);\n+    VERIFY (!bad_alloc_thrown);\n+}\n+\n+void\n+test02()\n+{\n+    init ();\n+\n+    void *p = operator new[] (1, std::nothrow);\n+\n+    VERIFY (p != 0);\n+    VERIFY (1 == new_called);\n+    VERIFY (1 == new_vec_called);\n+    VERIFY (0 == new_handler_called);\n+    VERIFY (!bad_alloc_thrown);\n+\n+    operator delete[] (p, std::nothrow);\n+    VERIFY( 1 == delete_called );\n+    VERIFY( 1 == delete_vec_called );\n+\n+    new_fail = true;\n+    p = operator new[] (1, std::nothrow);\n+\n+    VERIFY (0 == p);\n+    VERIFY (2 == new_called);\n+    VERIFY (2 == new_vec_called);\n+    VERIFY (0 == new_handler_called);\n+    VERIFY (bad_alloc_thrown);\n+\n+    new_fail = true;\n+    bad_alloc_thrown = false;\n+    std::set_new_handler (new_handler);\n+    p = operator new[] (1, std::nothrow);\n+\n+    VERIFY (0 == p);\n+    VERIFY (3 == new_called);\n+    VERIFY (3 == new_vec_called);\n+    VERIFY (2 == new_handler_called);\n+    VERIFY (!bad_alloc_thrown);\n+}\n+\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}