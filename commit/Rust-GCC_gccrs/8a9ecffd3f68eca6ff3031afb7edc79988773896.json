{"sha": "8a9ecffd3f68eca6ff3031afb7edc79988773896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE5ZWNmZmQzZjY4ZWNhNmZmMzAzMWFmYjdlZGM3OTk4ODc3Mzg5Ng==", "commit": {"author": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2010-05-10T14:31:37Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2010-05-10T14:31:37Z"}, "message": "tree-ssa-reassoc.c (undistribute_ops_list): Use create_tmp_reg.\n\n\t* tree-ssa-reassoc.c (undistribute_ops_list): Use create_tmp_reg.\n\t(can_reassociate_p): Use FLOAT_TYPE_P.\n\t* tree-vectorizer.h (vect_is_simple_reduction): Rename to ...\n\t(vect_force_simple_reduction): ... this.\n\t* tree-parloops.c (gather_scalar_reductions): Use \n\tvect_force_simple_reduction.\n\t* tree-vect-loop.c (vect_is_simple_reduction_1): Rename from\n\tvect_is_simple_reduction, add modify argument, if true rewrite\n\t\"a-b\" into \"a+(-b)\".\n\t(vect_is_simple_reduction, vect_force_simple_reduction): New\n\tfunctions.\n\t(vect_analyze_scalar_cycles_1): Use vect_force_simple_reduction.\n\ntestsuite/\n\t* gcc.dg/vect/fast-math-vect-reduc-8.c: New test.\n\nFrom-SVN: r159226", "tree": {"sha": "23003a727a703aa73b4c09b5ba60eb77c600ebdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23003a727a703aa73b4c09b5ba60eb77c600ebdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a9ecffd3f68eca6ff3031afb7edc79988773896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9ecffd3f68eca6ff3031afb7edc79988773896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a9ecffd3f68eca6ff3031afb7edc79988773896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9ecffd3f68eca6ff3031afb7edc79988773896/comments", "author": null, "committer": null, "parents": [{"sha": "46044dd988812b122ba11b1d517f936eaeec4a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46044dd988812b122ba11b1d517f936eaeec4a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46044dd988812b122ba11b1d517f936eaeec4a52"}], "stats": {"total": 126, "additions": 111, "deletions": 15}, "files": [{"sha": "a0bd1f08abf68f1111d5676c3f32c1ac3dbec99e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a9ecffd3f68eca6ff3031afb7edc79988773896", "patch": "@@ -1,5 +1,20 @@\n-2010-05-10  H.J. Lu<hongjiu.lu@intel.com>\n-\t    Vladimir Makarov<vmakarov@redhat.com>\n+2010-05-10  Michael Matz  <matz@suse.de>\n+\n+\t* tree-ssa-reassoc.c (undistribute_ops_list): Use create_tmp_reg.\n+\t(can_reassociate_p): Use FLOAT_TYPE_P.\n+\t* tree-vectorizer.h (vect_is_simple_reduction): Rename to ...\n+\t(vect_force_simple_reduction): ... this.\n+\t* tree-parloops.c (gather_scalar_reductions): Use \n+\tvect_force_simple_reduction.\n+\t* tree-vect-loop.c (vect_is_simple_reduction_1): Rename from\n+\tvect_is_simple_reduction, add modify argument, if true rewrite\n+\t\"a-b\" into \"a+(-b)\".\n+\t(vect_is_simple_reduction, vect_force_simple_reduction): New\n+\tfunctions.\n+\t(vect_analyze_scalar_cycles_1): Use vect_force_simple_reduction.\n+\n+2010-05-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/44012\n \t* ira-build.c (remove_unnecessary_allocnos): Nullify"}, {"sha": "252c4514d40c0f8ff9aaf1770ad4711c3cd536c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a9ecffd3f68eca6ff3031afb7edc79988773896", "patch": "@@ -1,3 +1,7 @@\n+2010-05-10  Michael Matz  <matz@suse.de>\n+\n+\t* gcc.dg/vect/fast-math-vect-reduc-8.c: New test.\n+\n 2010-05-10  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/44012"}, {"sha": "cc5db93ff87de840af3bcd2e333663b17a8986a5", "filename": "gcc/testsuite/gcc.dg/vect/fast-math-vect-reduc-8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-reduc-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-reduc-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-vect-reduc-8.c?ref=8a9ecffd3f68eca6ff3031afb7edc79988773896", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-require-effective-target vect_float } */\n+/* { dg-do compile } */\n+\n+#include \"tree-vect.h\"\n+\n+extern float x[128] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+extern float y[128] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+extern float z[128] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+\n+float f (unsigned n)\n+{\n+  float ret = 0.0;\n+  unsigned i;\n+  for (i = 0; i < n; i++)\n+    {\n+      float diff = x[i] - y[i];\n+      ret -= diff * diff * z[i];\n+    }\n+  return ret;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "52a6dc424f2d90fd78fa23685241d4a77b7e89fd", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=8a9ecffd3f68eca6ff3031afb7edc79988773896", "patch": "@@ -64,7 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /*\n   Reduction handling:\n-  currently we use vect_is_simple_reduction() to detect reduction patterns.\n+  currently we use vect_force_simple_reduction() to detect reduction patterns.\n   The code transformation will be introduced by an example.\n \n \n@@ -1745,7 +1745,9 @@ gather_scalar_reductions (loop_p loop, htab_t reduction_list)\n       if (!simple_iv (loop, loop, res, &iv, true)\n \t&& simple_loop_info)\n \t{\n-           gimple reduc_stmt = vect_is_simple_reduction (simple_loop_info, phi, true, &double_reduc);\n+           gimple reduc_stmt = vect_force_simple_reduction (simple_loop_info,\n+\t\t\t\t\t\t\t    phi, true,\n+\t\t\t\t\t\t\t    &double_reduc);\n \t   if (reduc_stmt && !double_reduc)\n               build_new_reduction (reduction_list, reduc_stmt, phi);\n         }"}, {"sha": "ae630e55fdb125e37c7881d477e8ec0813e0a19c", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=8a9ecffd3f68eca6ff3031afb7edc79988773896", "patch": "@@ -1165,7 +1165,7 @@ undistribute_ops_list (enum tree_code opcode,\n \t      fprintf (dump_file, \"Building (\");\n \t      print_generic_expr (dump_file, oe1->op, 0);\n \t    }\n-\t  tmpvar = create_tmp_var (TREE_TYPE (oe1->op), NULL);\n+\t  tmpvar = create_tmp_reg (TREE_TYPE (oe1->op), NULL);\n \t  add_referenced_var (tmpvar);\n \t  zero_one_operation (&oe1->op, c->oecode, c->op);\n \t  EXECUTE_IF_SET_IN_SBITMAP (candidates2, first+1, i, sbi0)\n@@ -1948,7 +1948,7 @@ can_reassociate_p (tree op)\n   tree type = TREE_TYPE (op);\n   if (INTEGRAL_TYPE_P (type)\n       || NON_SAT_FIXED_POINT_TYPE_P (type)\n-      || (flag_associative_math && SCALAR_FLOAT_TYPE_P (type)))\n+      || (flag_associative_math && FLOAT_TYPE_P (type)))\n     return true;\n   return false;\n }"}, {"sha": "8acc99289bc9e1bb5c21c2fc8e26eda91b2b92ca", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 60, "deletions": 8, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=8a9ecffd3f68eca6ff3031afb7edc79988773896", "patch": "@@ -513,8 +513,8 @@ vect_analyze_scalar_cycles_1 (loop_vec_info loop_vinfo, struct loop *loop)\n       gcc_assert (STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_unknown_def_type);\n \n       nested_cycle = (loop != LOOP_VINFO_LOOP (loop_vinfo));\n-      reduc_stmt = vect_is_simple_reduction (loop_vinfo, phi, !nested_cycle,\n-                                             &double_reduc);\n+      reduc_stmt = vect_force_simple_reduction (loop_vinfo, phi, !nested_cycle,\n+\t\t\t\t\t\t&double_reduc);\n       if (reduc_stmt)\n         {\n           if (double_reduc)\n@@ -1584,7 +1584,7 @@ report_vect_op (gimple stmt, const char *msg)\n }\n \n \n-/* Function vect_is_simple_reduction\n+/* Function vect_is_simple_reduction_1\n \n    (1) Detect a cross-iteration def-use cycle that represents a simple\n    reduction computation. We look for the following pattern:\n@@ -1612,18 +1612,23 @@ report_vect_op (gimple stmt, const char *msg)\n      a1 = phi < a0, a2 >\n      inner loop (def of a3)\n      a2 = phi < a3 >\n+\n+   If MODIFY is true it tries also to rework the code in-place to enable\n+   detection of more reduction patterns.  For the time being we rewrite\n+   \"res -= RHS\" into \"rhs += -RHS\" when it seems worthwhile.\n */\n \n-gimple\n-vect_is_simple_reduction (loop_vec_info loop_info, gimple phi,\n-                          bool check_reduction, bool *double_reduc)\n+static gimple\n+vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n+\t\t\t    bool check_reduction, bool *double_reduc,\n+\t\t\t    bool modify)\n {\n   struct loop *loop = (gimple_bb (phi))->loop_father;\n   struct loop *vect_loop = LOOP_VINFO_LOOP (loop_info);\n   edge latch_e = loop_latch_edge (loop);\n   tree loop_arg = PHI_ARG_DEF_FROM_EDGE (phi, latch_e);\n   gimple def_stmt, def1 = NULL, def2 = NULL;\n-  enum tree_code code;\n+  enum tree_code orig_code, code;\n   tree op1, op2, op3 = NULL_TREE, op4 = NULL_TREE;\n   tree type;\n   int nloop_uses;\n@@ -1743,7 +1748,14 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple phi,\n       return NULL;\n     }\n \n-  code = gimple_assign_rhs_code (def_stmt);\n+  code = orig_code = gimple_assign_rhs_code (def_stmt);\n+\n+  /* We can handle \"res -= x[i]\", which is non-associative by\n+     simply rewriting this into \"res += -x[i]\".  Avoid changing\n+     gimple instruction for the first simple tests and only do this\n+     if we're allowed to change code at all.  */\n+  if (code == MINUS_EXPR && modify)\n+    code = PLUS_EXPR;\n \n   if (check_reduction\n       && (!commutative_tree_code (code) || !associative_tree_code (code)))\n@@ -1863,6 +1875,24 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple phi,\n       return NULL;\n     }\n \n+  /* If we detected \"res -= x[i]\" earlier, rewrite it into\n+     \"res += -x[i]\" now.  If this turns out to be useless reassoc\n+     will clean it up again.  */\n+  if (orig_code == MINUS_EXPR)\n+    {\n+      tree rhs = gimple_assign_rhs2 (def_stmt);\n+      tree negrhs = make_ssa_name (SSA_NAME_VAR (rhs), NULL);\n+      gimple negate_stmt = gimple_build_assign_with_ops (NEGATE_EXPR, negrhs,\n+\t\t\t\t\t\t\t rhs, NULL);\n+      gimple_stmt_iterator gsi = gsi_for_stmt (def_stmt);\n+      set_vinfo_for_stmt (negate_stmt, new_stmt_vec_info (negate_stmt, \n+\t\t\t\t\t\t\t  loop_info, NULL));\n+      gsi_insert_before (&gsi, negate_stmt, GSI_NEW_STMT);\n+      gimple_assign_set_rhs2 (def_stmt, negrhs);\n+      gimple_assign_set_rhs_code (def_stmt, PLUS_EXPR);\n+      update_stmt (def_stmt);\n+    }\n+\n   /* Reduction is safe. We're dealing with one of the following:\n      1) integer arithmetic and no trapv\n      2) floating point arithmetic, and special flags permit this optimization\n@@ -1940,6 +1970,28 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple phi,\n     }\n }\n \n+/* Wrapper around vect_is_simple_reduction_1, that won't modify code\n+   in-place.  Arguments as there.  */\n+\n+static gimple\n+vect_is_simple_reduction (loop_vec_info loop_info, gimple phi,\n+                          bool check_reduction, bool *double_reduc)\n+{\n+  return vect_is_simple_reduction_1 (loop_info, phi, check_reduction,\n+\t\t\t\t     double_reduc, false);\n+}\n+\n+/* Wrapper around vect_is_simple_reduction_1, which will modify code\n+   in-place if it enables detection of more reductions.  Arguments\n+   as there.  */\n+\n+gimple\n+vect_force_simple_reduction (loop_vec_info loop_info, gimple phi,\n+                          bool check_reduction, bool *double_reduc)\n+{\n+  return vect_is_simple_reduction_1 (loop_info, phi, check_reduction,\n+\t\t\t\t     double_reduc, true);\n+}\n \n /* Function vect_estimate_min_profitable_iters\n "}, {"sha": "79fe6abfa78ba18f0e93b83cbf4c733cfecb361c", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9ecffd3f68eca6ff3031afb7edc79988773896/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=8a9ecffd3f68eca6ff3031afb7edc79988773896", "patch": "@@ -846,7 +846,7 @@ extern tree vect_create_addr_base_for_vector_ref (gimple, gimple_seq *,\n /* In tree-vect-loop.c.  */\n /* FORNOW: Used in tree-parloops.c.  */\n extern void destroy_loop_vec_info (loop_vec_info, bool);\n-extern gimple vect_is_simple_reduction (loop_vec_info, gimple, bool, bool *);\n+extern gimple vect_force_simple_reduction (loop_vec_info, gimple, bool, bool *);\n /* Drive for loop analysis stage.  */\n extern loop_vec_info vect_analyze_loop (struct loop *);\n /* Drive for loop transformation stage.  */"}]}