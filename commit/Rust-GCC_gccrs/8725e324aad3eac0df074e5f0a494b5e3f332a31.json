{"sha": "8725e324aad3eac0df074e5f0a494b5e3f332a31", "node_id": "C_kwDOANBUbNoAKDg3MjVlMzI0YWFkM2VhYzBkZjA3NGU1ZjBhNDk0YjVlM2YzMzJhMzE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-08-05T12:42:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-05T12:42:24Z"}, "message": "Merge #1435\n\n1435: Update the type hasher to stop duplication of aggregate types r=philberty a=philberty\n\nThe hasher we ported was always calling TYPE_HASH which ends up with\r\nDECL_UID which is geneated causing aggregate types keep having a unique\r\nhash which ends up confusing the middle end as two copy's of the same\r\naggegate type ends up making GCC think there is some kind of type\r\nconversion required here.\r\n\r\nFixes #1434\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "6747c98ef8dfbea1c7062c3ae0e8480e1a711e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6747c98ef8dfbea1c7062c3ae0e8480e1a711e3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8725e324aad3eac0df074e5f0a494b5e3f332a31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi7RAwCRBK7hj4Ov3rIwAAEeMIABYhJCoQ9sbZmEMkdXKKGpPp\nLZn6QW8MW1gm02U492Abf/uZqQ0T1UvgKyFXE/RTbJKd3BfbgpUXrcrgyajnNXhf\nn7nb9JOlGmmhXFzK/OJBw0fWNsl0M2gjirbtf2qutfn36hZm/aKdmKyLZyRAIJDY\nu4RGAtcY59q0t7ArWtlSHPW3AG0DsmpBtjmXnat2tV7qYGG6MiZnvoBRGfm1YxUd\niU4xLqUARH/kZJS369uv829HlXrxbd9+vtlBqm3hl4+zGjmiWERKbEM+RfT9RQY/\nyLNeoA0ZxRd6buKpNzNLe/4rIW+SeGJqIOSkc0HkEx2c6zg908d0t8d56LSuPIY=\n=Wbxy\n-----END PGP SIGNATURE-----\n", "payload": "tree 6747c98ef8dfbea1c7062c3ae0e8480e1a711e3e\nparent a39108dea1d091545982fefa88ce3be31b9eedf2\nparent f70783d06336dbd94c63f37dd5623d4ffdc2e4a5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1659703344 +0000\ncommitter GitHub <noreply@github.com> 1659703344 +0000\n\nMerge #1435\n\n1435: Update the type hasher to stop duplication of aggregate types r=philberty a=philberty\n\nThe hasher we ported was always calling TYPE_HASH which ends up with\r\nDECL_UID which is geneated causing aggregate types keep having a unique\r\nhash which ends up confusing the middle end as two copy's of the same\r\naggegate type ends up making GCC think there is some kind of type\r\nconversion required here.\r\n\r\nFixes #1434\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8725e324aad3eac0df074e5f0a494b5e3f332a31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8725e324aad3eac0df074e5f0a494b5e3f332a31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8725e324aad3eac0df074e5f0a494b5e3f332a31/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39108dea1d091545982fefa88ce3be31b9eedf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39108dea1d091545982fefa88ce3be31b9eedf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a39108dea1d091545982fefa88ce3be31b9eedf2"}, {"sha": "f70783d06336dbd94c63f37dd5623d4ffdc2e4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f70783d06336dbd94c63f37dd5623d4ffdc2e4a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f70783d06336dbd94c63f37dd5623d4ffdc2e4a5"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "cb2addf6c21734b267733a2fd86e5d31a8e1f83b", "filename": "gcc/rust/backend/rust-compile-context.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8725e324aad3eac0df074e5f0a494b5e3f332a31/gcc%2Frust%2Fbackend%2Frust-compile-context.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8725e324aad3eac0df074e5f0a494b5e3f332a31/gcc%2Frust%2Fbackend%2Frust-compile-context.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.cc?ref=8725e324aad3eac0df074e5f0a494b5e3f332a31", "patch": "@@ -62,9 +62,6 @@ Context::type_hasher (tree type)\n       hstate.add_object (record_name_hash);\n     }\n \n-  if (TREE_TYPE (type))\n-    hstate.add_object (TYPE_HASH (TREE_TYPE (type)));\n-\n   for (tree t = TYPE_ATTRIBUTES (type); t; t = TREE_CHAIN (t))\n     /* Just the identifier is adequate to distinguish.  */\n     hstate.add_object (IDENTIFIER_HASH_VALUE (TREE_PURPOSE (t)));\n@@ -128,6 +125,16 @@ Context::type_hasher (tree type)\n       }\n       break;\n \n+    case BOOLEAN_TYPE:\n+      break;\n+\n+    case REFERENCE_TYPE:\n+      case POINTER_TYPE: {\n+\thashval_t type_hash = type_hasher (TREE_TYPE (type));\n+\thstate.add_object (type_hash);\n+      }\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "dc000e942e687749223abc1cb4f1db7d4f7b09fd", "filename": "gcc/testsuite/rust/compile/torture/issue-1434.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8725e324aad3eac0df074e5f0a494b5e3f332a31/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1434.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8725e324aad3eac0df074e5f0a494b5e3f332a31/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1434.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-1434.rs?ref=8725e324aad3eac0df074e5f0a494b5e3f332a31", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-w\" }\n+const BLOCK_LEN: usize = 64;\n+\n+const IV: [u32; 8] = [\n+    0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19,\n+];\n+\n+struct ChunkState {\n+    chaining_value: [u32; 8],\n+    chunk_counter: u64,\n+    block: [u8; BLOCK_LEN],\n+    block_len: u8,\n+    blocks_compressed: u8,\n+    flags: u32,\n+}\n+\n+impl ChunkState {\n+    fn new(key_words: [u32; 8], chunk_counter: u64, flags: u32) -> Self {\n+        Self {\n+            chaining_value: key_words,\n+            chunk_counter,\n+            block: [0; BLOCK_LEN],\n+            block_len: 0,\n+            blocks_compressed: 0,\n+            flags,\n+        }\n+    }\n+}\n+\n+pub struct Hasher {\n+    chunk_state: ChunkState,\n+    key_words: [u32; 8],\n+    cv_stack: [[u32; 8]; 54], // Space for 54 subtree chaining values:\n+    cv_stack_len: u8,         // 2^54 * CHUNK_LEN = 2^64\n+    flags: u32,\n+}\n+\n+impl Hasher {\n+    fn new_internal(key_words: [u32; 8], flags: u32) -> Self {\n+        Self {\n+            chunk_state: ChunkState::new(key_words, 0, flags),\n+            key_words,\n+            cv_stack: [[0; 8]; 54],\n+            cv_stack_len: 0,\n+            flags,\n+        }\n+    }\n+\n+    /// Construct a new `Hasher` for the regular hash function.\n+    pub fn new() -> Self {\n+        Self::new_internal(IV, 0)\n+    }\n+}"}]}