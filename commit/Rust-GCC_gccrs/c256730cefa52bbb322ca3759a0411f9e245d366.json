{"sha": "c256730cefa52bbb322ca3759a0411f9e245d366", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI1NjczMGNlZmE1MmJiYjMyMmNhMzc1OWEwNDExZjllMjQ1ZDM2Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-01-25T12:54:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-01-25T12:54:42Z"}, "message": "re PR middle-end/33880 (ICE: in extract_omp_for_data, at omp-low.c:162)\n\n\tPR middle-end/33880\n\t* tree-nested.c (walk_omp_for): New function.\n\t(convert_nonlocal_reference, convert_local_reference): Call\n\twalk_omp_for on OMP_FOR.\n\t(convert_call_expr): Call walk_body on OMP_FOR's\n\tOMP_FOR_PRE_INIT_BODY.\n\n\t* testsuite/libgomp.c/pr33880.c: New test.\n\t* testsuite/libgomp.fortran/pr33880.f90: New test.\n\nFrom-SVN: r131825", "tree": {"sha": "9a5c3be70549d48c772a09123c8b458d609517b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a5c3be70549d48c772a09123c8b458d609517b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c256730cefa52bbb322ca3759a0411f9e245d366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c256730cefa52bbb322ca3759a0411f9e245d366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c256730cefa52bbb322ca3759a0411f9e245d366", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c256730cefa52bbb322ca3759a0411f9e245d366/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59805c3b29f62c729aa176eea03bbd20b455b7e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59805c3b29f62c729aa176eea03bbd20b455b7e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59805c3b29f62c729aa176eea03bbd20b455b7e5"}], "stats": {"total": 227, "additions": 226, "deletions": 1}, "files": [{"sha": "f16c87ac3fa821a1f02b6a473930a92cee6f6f7c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c256730cefa52bbb322ca3759a0411f9e245d366/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c256730cefa52bbb322ca3759a0411f9e245d366/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c256730cefa52bbb322ca3759a0411f9e245d366", "patch": "@@ -1,3 +1,12 @@\n+2008-01-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/33880\n+\t* tree-nested.c (walk_omp_for): New function.\n+\t(convert_nonlocal_reference, convert_local_reference): Call\n+\twalk_omp_for on OMP_FOR.\n+\t(convert_call_expr): Call walk_body on OMP_FOR's\n+\tOMP_FOR_PRE_INIT_BODY.\n+\n 2008-01-25  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/34966"}, {"sha": "08f3eb1b49191884420e22f8e5524afcebc166d7", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c256730cefa52bbb322ca3759a0411f9e245d366/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c256730cefa52bbb322ca3759a0411f9e245d366/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=c256730cefa52bbb322ca3759a0411f9e245d366", "patch": "@@ -1,5 +1,5 @@\n /* Nested function decomposition for trees.\n-   Copyright (C) 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -665,6 +665,59 @@ walk_function (walk_tree_fn callback, struct nesting_info *info)\n   walk_body (callback, info, &DECL_SAVED_TREE (info->context));\n }\n \n+/* Invoke CALLBACK on OMP_FOR init, cond, incr and pre-body.  */\n+\n+static void\n+walk_omp_for (walk_tree_fn callback, struct nesting_info *info, tree for_stmt)\n+{\n+  struct walk_stmt_info wi;\n+  tree t, list = NULL, empty;\n+\n+  walk_body (callback, info, &OMP_FOR_PRE_BODY (for_stmt));\n+\n+  empty = build_empty_stmt ();\n+  append_to_statement_list_force (empty, &list);\n+  memset (&wi, 0, sizeof (wi));\n+  wi.callback = callback;\n+  wi.info = info;\n+  wi.tsi = tsi_last (list);\n+\n+  t = OMP_FOR_INIT (for_stmt);\n+  gcc_assert (TREE_CODE (t) == GIMPLE_MODIFY_STMT);\n+  SET_EXPR_LOCUS (empty, EXPR_LOCUS (t));\n+  wi.val_only = false;\n+  walk_tree (&GIMPLE_STMT_OPERAND (t, 0), callback, &wi, NULL);\n+  wi.val_only = true;\n+  wi.is_lhs = false;\n+  walk_tree (&GIMPLE_STMT_OPERAND (t, 1), callback, &wi, NULL);\n+\n+  t = OMP_FOR_COND (for_stmt);\n+  gcc_assert (COMPARISON_CLASS_P (t));\n+  SET_EXPR_LOCUS (empty, EXPR_LOCUS (t));\n+  wi.val_only = false;\n+  walk_tree (&TREE_OPERAND (t, 0), callback, &wi, NULL);\n+  wi.val_only = true;\n+  wi.is_lhs = false;\n+  walk_tree (&TREE_OPERAND (t, 1), callback, &wi, NULL);\n+\n+  t = OMP_FOR_INCR (for_stmt);\n+  gcc_assert (TREE_CODE (t) == GIMPLE_MODIFY_STMT);\n+  SET_EXPR_LOCUS (empty, EXPR_LOCUS (t));\n+  wi.val_only = false;\n+  walk_tree (&GIMPLE_STMT_OPERAND (t, 0), callback, &wi, NULL);\n+  t = GIMPLE_STMT_OPERAND (t, 1);\n+  gcc_assert (BINARY_CLASS_P (t));\n+  wi.val_only = false;\n+  walk_tree (&TREE_OPERAND (t, 0), callback, &wi, NULL);\n+  wi.val_only = true;\n+  wi.is_lhs = false;\n+  walk_tree (&TREE_OPERAND (t, 1), callback, &wi, NULL);\n+\n+  /* Remove empty statement added above from the end of statement list.  */\n+  tsi_delink (&wi.tsi);\n+  append_to_statement_list (list, &OMP_FOR_PRE_BODY (for_stmt));\n+}\n+\n /* Similarly for ROOT and all functions nested underneath, depth first.  */\n     \n static void\n@@ -1065,6 +1118,13 @@ convert_nonlocal_reference (tree *tp, int *walk_subtrees, void *data)\n       break;\n \n     case OMP_FOR:\n+      save_suppress = info->suppress_expansion;\n+      convert_nonlocal_omp_clauses (&OMP_FOR_CLAUSES (t), wi);\n+      walk_omp_for (convert_nonlocal_reference, info, t);\n+      walk_body (convert_nonlocal_reference, info, &OMP_FOR_BODY (t));\n+      info->suppress_expansion = save_suppress;\n+      break;\n+\n     case OMP_SECTIONS:\n     case OMP_SINGLE:\n       save_suppress = info->suppress_expansion;\n@@ -1350,6 +1410,13 @@ convert_local_reference (tree *tp, int *walk_subtrees, void *data)\n       break;\n \n     case OMP_FOR:\n+      save_suppress = info->suppress_expansion;\n+      convert_local_omp_clauses (&OMP_FOR_CLAUSES (t), wi);\n+      walk_omp_for (convert_local_reference, info, t);\n+      walk_body (convert_local_reference, info, &OMP_FOR_BODY (t));\n+      info->suppress_expansion = save_suppress;\n+      break;\n+\n     case OMP_SECTIONS:\n     case OMP_SINGLE:\n       save_suppress = info->suppress_expansion;\n@@ -1682,6 +1749,8 @@ convert_call_expr (tree *tp, int *walk_subtrees, void *data)\n       break;\n \n     case OMP_FOR:\n+      walk_body (convert_call_expr, info, &OMP_FOR_PRE_BODY (t));\n+      /* FALLTHRU */\n     case OMP_SECTIONS:\n     case OMP_SECTION:\n     case OMP_SINGLE:"}, {"sha": "7a40894b68bd3ea1d9a79a0145eeebc6b5f01664", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c256730cefa52bbb322ca3759a0411f9e245d366/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c256730cefa52bbb322ca3759a0411f9e245d366/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c256730cefa52bbb322ca3759a0411f9e245d366", "patch": "@@ -1,3 +1,9 @@\n+2008-01-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/33880\n+\t* testsuite/libgomp.c/pr33880.c: New test.\n+\t* testsuite/libgomp.fortran/pr33880.f90: New test.\n+\n 2008-01-24  David Edelsohn  <edelsohn@gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "5d719cd635dfee18155092d2623415d8c128fea8", "filename": "libgomp/testsuite/libgomp.c/pr33880.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c256730cefa52bbb322ca3759a0411f9e245d366/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr33880.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c256730cefa52bbb322ca3759a0411f9e245d366/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr33880.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fpr33880.c?ref=c256730cefa52bbb322ca3759a0411f9e245d366", "patch": "@@ -0,0 +1,123 @@\n+/* PR middle-end/33880 */\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+void\n+test1 (void)\n+{\n+  int i = 0, j = 0;\n+  void bar (void)\n+  {\n+    i++;\n+    j++;\n+  }\n+  bar ();\n+  #pragma omp parallel for num_threads(4)\n+    for (i = 0; i < 100; i++)\n+      #pragma omp atomic\n+\tj += 1;\n+  if (j != 101)\n+    abort ();\n+  #pragma omp parallel for lastprivate(i) num_threads(2)\n+    for (i = 0; i < 100; i++)\n+      #pragma omp atomic\n+\tj += 1;\n+  if (i != 100)\n+    abort ();\n+  i = 3;\n+  bar ();\n+  if (j != 202)\n+    abort ();\n+  if (i != 4)\n+    abort ();\n+}\n+\n+void\n+test2 (void)\n+{\n+  int i = -1, j = 99, k, l = 9, m = 0;\n+  void bar (void)\n+  {\n+    i++;\n+    j++;\n+    l++;\n+    m++;\n+  }\n+  bar ();\n+  #pragma omp parallel for num_threads(4)\n+    for (k = i; k < j; k += l)\n+      #pragma omp atomic\n+\tm += 1;\n+  bar ();\n+  if (i != 1 || j != 101 || l != 11 || m != 12)\n+    abort ();\n+}\n+\n+void\n+test3 (void)\n+{\n+  int i, j, k, l, m;\n+  void bar (void)\n+  {\n+  #pragma omp parallel for num_threads(4)\n+    for (i = j; i < k; i += l)\n+      #pragma omp atomic\n+        m += 1;\n+  }\n+  void baz (void)\n+  {\n+  #pragma omp parallel for num_threads(2) lastprivate(i)\n+    for (i = j; i < k * 2; i += l / 2)\n+      #pragma omp atomic\n+        m += 1;\n+  }\n+  i = 7;\n+  j = 0;\n+  k = 100;\n+  l = 2;\n+  m = 0;\n+  bar ();\n+  if (j != 0 || k != 100 || l != 2 || m != 50)\n+    abort ();\n+  baz ();\n+  if (i != 200 || j != 0 || k != 100 || l != 2 || m != 250)\n+    abort ();\n+}\n+\n+void\n+test4 (void)\n+{\n+  int i, j, k, l, m = 0;\n+  int foo (void)\n+  {\n+    return j;\n+  }\n+  int bar (void)\n+  {\n+    return k;\n+  }\n+  int baz (void)\n+  {\n+    return l;\n+  }\n+  j = 0;\n+  k = 1000;\n+  l = 2;\n+  #pragma omp parallel for num_threads(8) lastprivate(i)\n+  for (i = foo (); i < bar (); i += baz ())\n+    #pragma omp atomic\n+      m += 1;\n+  if (i != 1000 || m != 500 || j != 0 || k != 1000 || l != 2)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  test1 ();\n+  test2 ();\n+  test3 ();\n+  test4 ();\n+  return 0;\n+}"}, {"sha": "679cab6822dcfd55cc65385e1d1f913d83cc1d98", "filename": "libgomp/testsuite/libgomp.fortran/pr33880.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c256730cefa52bbb322ca3759a0411f9e245d366/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr33880.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c256730cefa52bbb322ca3759a0411f9e245d366/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr33880.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fpr33880.f90?ref=c256730cefa52bbb322ca3759a0411f9e245d366", "patch": "@@ -0,0 +1,18 @@\n+! PR middle-end/33880\n+! { dg-do run }\n+\n+program pr33880\n+  integer :: i, j\n+  call something ()\n+  !$omp parallel do\n+  do i = 1, 1000\n+    !$omp atomic\n+      j = j + 1\n+  end do\n+  if (j .ne. 1000) call abort\n+contains\n+  subroutine something()\n+    i = 0\n+    j = 0\n+  end subroutine something\n+end program pr33880                    "}]}