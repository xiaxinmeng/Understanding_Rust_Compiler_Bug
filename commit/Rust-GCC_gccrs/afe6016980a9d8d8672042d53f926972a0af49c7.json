{"sha": "afe6016980a9d8d8672042d53f926972a0af49c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZlNjAxNjk4MGE5ZDhkODY3MjA0MmQ1M2Y5MjY5NzJhMGFmNDljNw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-11T18:49:51Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-11T18:49:51Z"}, "message": "Array.java, [...]: Removed redundant modifiers.\n\n2003-10-11  Michael Koch  <konqueror@gmx.de>\n\n\t* java/sql/Array.java,\n\tjava/sql/Blob.java,\n\tjava/sql/CallableStatement.java,\n\tjava/sql/Clob.java,\n\tjava/sql/Connection.java,\n\tjava/sql/DatabaseMetaData.java,\n\tjava/sql/Driver.java,\n\tjava/sql/ParameterMetaData.java,\n\tjava/sql/PreparedStatement.java,\n\tjava/sql/Ref.java,\n\tjava/sql/ResultSet.java,\n\tjava/sql/ResultSetMetaData.java,\n\tjava/sql/SQLData.java,\n\tjava/sql/SQLInput.java,\n\tjava/sql/SQLOutput.java,\n\tjava/sql/Savepoint.java,\n\tjava/sql/Statement.java,\n\tjava/sql/Struct.java:\n\tRemoved redundant modifiers.\n\nFrom-SVN: r72356", "tree": {"sha": "5f8e4e09e41fddb2564b5726cad645fa7ddb6ef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f8e4e09e41fddb2564b5726cad645fa7ddb6ef8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afe6016980a9d8d8672042d53f926972a0af49c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe6016980a9d8d8672042d53f926972a0af49c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afe6016980a9d8d8672042d53f926972a0af49c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe6016980a9d8d8672042d53f926972a0af49c7/comments", "author": null, "committer": null, "parents": [{"sha": "eb0043a05776bf4bbeb4c058246af15a75d36916", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0043a05776bf4bbeb4c058246af15a75d36916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb0043a05776bf4bbeb4c058246af15a75d36916"}], "stats": {"total": 1426, "additions": 724, "deletions": 702}, "files": [{"sha": "39f8187ed3e8d5912ddd550059591a9c58b09293", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -1,3 +1,25 @@\n+2003-10-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/sql/Array.java,\n+\tjava/sql/Blob.java,\n+\tjava/sql/CallableStatement.java,\n+\tjava/sql/Clob.java,\n+\tjava/sql/Connection.java,\n+\tjava/sql/DatabaseMetaData.java,\n+\tjava/sql/Driver.java,\n+\tjava/sql/ParameterMetaData.java,\n+\tjava/sql/PreparedStatement.java,\n+\tjava/sql/Ref.java,\n+\tjava/sql/ResultSet.java,\n+\tjava/sql/ResultSetMetaData.java,\n+\tjava/sql/SQLData.java,\n+\tjava/sql/SQLInput.java,\n+\tjava/sql/SQLOutput.java,\n+\tjava/sql/Savepoint.java,\n+\tjava/sql/Statement.java,\n+\tjava/sql/Struct.java:\n+\tRemoved redundant modifiers.\n+\n 2003-10-11  Michael Koch  <konqueror@gmx.de>\n \n \t* java/nio/channels/Channel.java,"}, {"sha": "0bb84cbe3d1237743c476d604b7a08f9913ab96c", "filename": "libjava/java/sql/Array.java", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FArray.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FArray.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FArray.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -53,7 +53,7 @@ public interface Array\n    * @param The name of the SQL type of the elements in this array.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getBaseTypeName() throws SQLException;\n+  String getBaseTypeName() throws SQLException;\n \n   /**\n    * Returns the JDBC type identifier of the elements in this\n@@ -64,7 +64,7 @@ public interface Array\n    * @exception SQLException If an error occurs.\n    * @see Types\n    */\n-  public int getBaseType() throws SQLException;\n+  int getBaseType() throws SQLException;\n \n   /**\n    * Returns the contents of this array.  This object returned\n@@ -73,7 +73,7 @@ public interface Array\n    * @return The contents of the array as an array of Java objects.\n    * @exception SQLException If an error occurs.\n    */\n-  public Object getArray() throws SQLException;\n+  Object getArray() throws SQLException;\n \n   /**\n    * Returns the contents of this array.  The specified\n@@ -84,7 +84,7 @@ public interface Array\n    * @return The contents of the array as an array of Java objects.\n    * @exception SQLException If an error occurs.\n    */\n-  public Object getArray(Map map) throws SQLException;\n+  Object getArray(Map map) throws SQLException;\n \n   /**\n    * Returns a portion of this array starting at <code>index</code>\n@@ -99,7 +99,7 @@ public interface Array\n    * @return The requested portion of the array.\n    * @exception SQLException If an error occurs.\n    */\n-  public Object getArray(long index, int count) throws SQLException;\n+  Object getArray(long index, int count) throws SQLException;\n \n   /**\n    * This method returns a portion of this array starting at <code>index</code>\n@@ -116,7 +116,7 @@ public interface Array\n    * @return The requested portion of the array.\n    * @exception SQLException If an error occurs.\n    */\n-  public Object getArray(long index, int count, Map map) throws SQLException;\n+  Object getArray(long index, int count, Map map) throws SQLException;\n \n   /**\n    * Returns the elements in the array as a <code>ResultSet</code>.\n@@ -128,7 +128,7 @@ public interface Array\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public ResultSet getResultSet() throws SQLException;\n+  ResultSet getResultSet() throws SQLException;\n \n   /**\n    * This method returns the elements in the array as a <code>ResultSet</code>.\n@@ -143,7 +143,7 @@ public interface Array\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public ResultSet getResultSet(Map map) throws SQLException;\n+  ResultSet getResultSet(Map map) throws SQLException;\n \n   /**\n    * This method returns a portion of the array as a <code>ResultSet</code>.\n@@ -160,7 +160,7 @@ public interface Array\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public ResultSet getResultSet(long index, int count) throws SQLException;\n+  ResultSet getResultSet(long index, int count) throws SQLException;\n   \n   /**\n    * This method returns a portion of the array as a <code>ResultSet</code>.\n@@ -180,6 +180,6 @@ public interface Array\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */  \n-  public ResultSet getResultSet(long index, int count, Map map)\n+  ResultSet getResultSet(long index, int count, Map map)\n     throws SQLException;\n }"}, {"sha": "070201bb89c712daec94b76018e09c090f297e7a", "filename": "libjava/java/sql/Blob.java", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FBlob.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FBlob.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FBlob.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -55,7 +55,7 @@ public interface Blob\n    * @return The number of bytes in the BLOB.\n    * @exception SQLException If an error occurs.\n    */\n-  public long length() throws SQLException;\n+  long length() throws SQLException;\n \n   /**\n    * This method returns up to the requested bytes of this BLOB as a \n@@ -66,15 +66,15 @@ public interface Blob\n    * @return The requested bytes from the BLOB.\n    * @exception SQLException If an error occurs.\n    */\n-  public byte[] getBytes(long pos, int length) throws SQLException;\n+  byte[] getBytes(long pos, int length) throws SQLException;\n \n   /**\n    * This method returns a stream that will read the bytes of the BLOB.\n    *\n    * @return A stream that will read the bytes of the BLOB.\n    * @exception SQLException If an error occurs.\n    */\n-  public InputStream getBinaryStream() throws SQLException;\n+  InputStream getBinaryStream() throws SQLException;\n \n   /**\n    * This method returns the index into the BLOB at which the first instance\n@@ -87,7 +87,7 @@ public interface Blob\n    *         pattern is not found.\n    * @exception SQLException If an error occurs.\n    */\n-  public long position(byte[] pattern, long start) throws SQLException;\n+  long position(byte[] pattern, long start) throws SQLException;\n \n   /**\n    * This method returns the index into the BLOB at which the first instance\n@@ -102,30 +102,30 @@ public interface Blob\n    *         pattern is not found.\n    * @exception SQLException If an error occurs.\n    */\n-  public long position(Blob pattern, long start) throws SQLException;\n+  long position(Blob pattern, long start) throws SQLException;\n \n   /**\n    * @exception SQLException If an error occurs.\n    * @since 1.4\n    */\n-  public int setBytes(long pos, byte[] bytes) throws SQLException;\n+  int setBytes(long pos, byte[] bytes) throws SQLException;\n \n   /**\n    * @exception SQLException If an error occurs.\n    * @since 1.4\n    */\n-  public int setBytes(long pos, byte[] bytes, int offset, int len)\n+  int setBytes(long pos, byte[] bytes, int offset, int len)\n     throws SQLException;\n \n   /**\n    * @exception SQLException If an error occurs.\n    * @since 1.4\n    */\n-  public OutputStream setBinaryStream(long pos) throws SQLException;\n+  OutputStream setBinaryStream(long pos) throws SQLException;\n \n   /**\n    * @exception SQLException If an error occurs.\n    * @since 1.4\n    */\n-  public void truncate(long len) throws SQLException;\n+  void truncate(long len) throws SQLException;\n }"}, {"sha": "68a22d03aeaad4360bd57d956fddf15909a36810", "filename": "libjava/java/sql/CallableStatement.java", "status": "modified", "additions": 79, "deletions": 79, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FCallableStatement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FCallableStatement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FCallableStatement.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -59,7 +59,7 @@ public interface CallableStatement extends PreparedStatement\n    * @param type The SQL type value from <code>Types</code>.\n    * @exception SQLException If an error occurs.\n    */   \n-  public void registerOutParameter(int parameterIndex, int sqlType)\n+  void registerOutParameter(int parameterIndex, int sqlType)\n     throws SQLException;\n \n   /**\n@@ -71,7 +71,7 @@ public void registerOutParameter(int parameterIndex, int sqlType)\n    * @param scale The scale of the value that will be returned.\n    * @exception SQLException If an error occurs.\n    */   \n-  public void registerOutParameter(int parameterIndex, int sqlType, int scale)\n+  void registerOutParameter(int parameterIndex, int sqlType, int scale)\n     throws SQLException;\n \n   /**\n@@ -82,7 +82,7 @@ public void registerOutParameter(int parameterIndex, int sqlType, int scale)\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean wasNull() throws SQLException;\n+  boolean wasNull() throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -92,7 +92,7 @@ public void registerOutParameter(int parameterIndex, int sqlType, int scale)\n    * @return The parameter value as a <code>String</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getString(int parameterIndex) throws SQLException;\n+  String getString(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -102,7 +102,7 @@ public void registerOutParameter(int parameterIndex, int sqlType, int scale)\n    * @return The parameter value as a <code>boolean</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean getBoolean(int parameterIndex) throws SQLException;\n+  boolean getBoolean(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -112,7 +112,7 @@ public void registerOutParameter(int parameterIndex, int sqlType, int scale)\n    * @return The parameter value as a <code>byte</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public byte getByte(int parameterIndex) throws SQLException;\n+  byte getByte(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -122,7 +122,7 @@ public void registerOutParameter(int parameterIndex, int sqlType, int scale)\n    * @return The parameter value as a <code>short</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public short getShort(int parameterIndex) throws SQLException;\n+  short getShort(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -132,7 +132,7 @@ public void registerOutParameter(int parameterIndex, int sqlType, int scale)\n    * @return The parameter value as a <code>int</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getInt(int parameterIndex) throws SQLException;\n+  int getInt(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -142,7 +142,7 @@ public void registerOutParameter(int parameterIndex, int sqlType, int scale)\n    * @return The parameter value as a <code>long</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public long getLong(int parameterIndex) throws SQLException;\n+  long getLong(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -152,7 +152,7 @@ public void registerOutParameter(int parameterIndex, int sqlType, int scale)\n    * @return The parameter value as a <code>float</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public float getFloat(int parameterIndex) throws SQLException;\n+  float getFloat(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -162,7 +162,7 @@ public void registerOutParameter(int parameterIndex, int sqlType, int scale)\n    * @return The parameter value as a <code>double</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public double getDouble(int parameterIndex) throws SQLException;\n+  double getDouble(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -175,7 +175,7 @@ public void registerOutParameter(int parameterIndex, int sqlType, int scale)\n    * @deprecated Use getBigDecimal(int parameterIndex)\n    *             or getBigDecimal(String parameterName) instead.\n    */\n-  public BigDecimal getBigDecimal(int parameterIndex, int scale)\n+  BigDecimal getBigDecimal(int parameterIndex, int scale)\n     throws SQLException;\n \n   /**\n@@ -186,7 +186,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @return The parameter value as a byte array\n    * @exception SQLException If an error occurs.\n    */\n-  public byte[] getBytes(int parameterIndex) throws SQLException;\n+  byte[] getBytes(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -196,7 +196,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @return The parameter value as a <code>java.sql.Date</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Date getDate(int parameterIndex) throws SQLException;\n+  Date getDate(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -206,7 +206,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @return The parameter value as a <code>java.sql.Time</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Time getTime(int parameterIndex) throws SQLException;\n+  Time getTime(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -216,7 +216,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @return The parameter value as a <code>java.sql.Timestamp</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Timestamp getTimestamp(int parameterIndex) throws SQLException;\n+  Timestamp getTimestamp(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -227,7 +227,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public Object getObject(int parameterIndex) throws SQLException;\n+  Object getObject(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -238,7 +238,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public BigDecimal getBigDecimal(int parameterIndex) throws SQLException;\n+  BigDecimal getBigDecimal(int parameterIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -250,7 +250,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public Object getObject(int index, Map map) throws SQLException;\n+  Object getObject(int index, Map map) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -261,7 +261,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public Ref getRef(int index) throws SQLException;\n+  Ref getRef(int index) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -272,7 +272,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */   \n-  public Blob getBlob(int index) throws SQLException;\n+  Blob getBlob(int index) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -283,7 +283,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public Clob getClob(int index) throws SQLException;\n+  Clob getClob(int index) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -294,7 +294,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public Array getArray(int index) throws SQLException;\n+  Array getArray(int index) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -306,7 +306,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public Date getDate(int parameterIndex, Calendar cal) throws SQLException;\n+  Date getDate(int parameterIndex, Calendar cal) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -318,7 +318,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public Time getTime(int parameterIndex, Calendar cal) throws SQLException;\n+  Time getTime(int parameterIndex, Calendar cal) throws SQLException;\n \n   /**\n    * This method returns the value of the specified parameter as a Java\n@@ -329,7 +329,7 @@ public BigDecimal getBigDecimal(int parameterIndex, int scale)\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public Timestamp getTimestamp(int parameterIndex, Calendar cal)\n+  Timestamp getTimestamp(int parameterIndex, Calendar cal)\n     throws SQLException;\n \n   /**\n@@ -342,7 +342,7 @@ public Timestamp getTimestamp(int parameterIndex, Calendar cal)\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public void registerOutParameter(int paramIndex, int sqlType,\n+  void registerOutParameter(int paramIndex, int sqlType,\n \t\t\t\t   String typeName)\n     throws SQLException;\n \n@@ -355,7 +355,7 @@ public void registerOutParameter(int paramIndex, int sqlType,\n    * @exception SQLException If an error occurs.\n    * @since 1.4\n    */\n-  public void registerOutParameter(String parameterName, int sqlType)\n+  void registerOutParameter(String parameterName, int sqlType)\n     throws SQLException;\n \n   /**\n@@ -369,7 +369,7 @@ public void registerOutParameter(String parameterName, int sqlType)\n    * @exception SQLException If an error occurs.\n    * @since 1.4\n    */\n-  public void registerOutParameter(String parameterName, int sqlType,\n+  void registerOutParameter(String parameterName, int sqlType,\n \t\t\t\t   int scale)\n     throws SQLException;\n \n@@ -386,266 +386,266 @@ public void registerOutParameter(String parameterName, int sqlType,\n    * @exception SQLException If an error occurs.\n    * @since 1.4\n    */\n-  public void registerOutParameter(String parameterName, int sqlType,\n+  void registerOutParameter(String parameterName, int sqlType,\n \t\t\t\t   String typeName) \n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public URL getURL(int parameterIndex) throws SQLException;\n+  URL getURL(int parameterIndex) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setURL(String parameterName, URL val) throws SQLException;\n+  void setURL(String parameterName, URL val) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setNull(String parameterName, int sqlType) throws SQLException;\n+  void setNull(String parameterName, int sqlType) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setBoolean(String parameterName, boolean x) throws SQLException;\n+  void setBoolean(String parameterName, boolean x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setByte(String parameterName, byte x) throws SQLException;\n+  void setByte(String parameterName, byte x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setShort(String parameterName, short x) throws SQLException;\n+  void setShort(String parameterName, short x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setInt(String parameterName, int x) throws SQLException;\n+  void setInt(String parameterName, int x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setLong(String parameterName, long x) throws SQLException;\n+  void setLong(String parameterName, long x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setFloat(String parameterName, float x) throws SQLException;\n+  void setFloat(String parameterName, float x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setDouble(String parameterName, double x) throws SQLException;\n+  void setDouble(String parameterName, double x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setBigDecimal(String parameterName, BigDecimal x)\n+  void setBigDecimal(String parameterName, BigDecimal x)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setString(String parameterName, String x) throws SQLException;\n+  void setString(String parameterName, String x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setBytes(String parameterName, byte[] x) throws SQLException;\n+  void setBytes(String parameterName, byte[] x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setDate(String parameterName, Date x) throws SQLException;\n+  void setDate(String parameterName, Date x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setTime(String parameterName, Time x) throws SQLException;\n+  void setTime(String parameterName, Time x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setTimestamp(String parameterName, Timestamp x)\n+  void setTimestamp(String parameterName, Timestamp x)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setAsciiStream(String parameterName, InputStream x, int length)\n+  void setAsciiStream(String parameterName, InputStream x, int length)\n       throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setBinaryStream(String parameterName, InputStream x, int length)\n+  void setBinaryStream(String parameterName, InputStream x, int length)\n       throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setObject(String parameterName, Object x, int targetSqlType,\n+  void setObject(String parameterName, Object x, int targetSqlType,\n \t\t\tint scale)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setObject(String parameterName, Object x, int targetSqlType)\n+  void setObject(String parameterName, Object x, int targetSqlType)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setObject(String parameterName, Object x) throws SQLException;\n+  void setObject(String parameterName, Object x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setCharacterStream(String parameterName, Reader reader,\n+  void setCharacterStream(String parameterName, Reader reader,\n \t\t\t\t int length)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setDate(String parameterName, Date x, Calendar cal)\n+  void setDate(String parameterName, Date x, Calendar cal)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setTime(String parameterName, Time x, Calendar cal)\n+  void setTime(String parameterName, Time x, Calendar cal)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setTimestamp(String parameterName, Timestamp x, Calendar cal)\n+  void setTimestamp(String parameterName, Timestamp x, Calendar cal)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setNull(String parameterName, int sqlType, String typeName)\n+  void setNull(String parameterName, int sqlType, String typeName)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public String getString(String parameterName) throws SQLException;\n+  String getString(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public boolean getBoolean(String parameterName) throws SQLException;\n+  boolean getBoolean(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public byte getByte(String parameterName) throws SQLException;\n+  byte getByte(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public short getShort(String parameterName) throws SQLException;\n+  short getShort(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int getInt(String parameterName) throws SQLException;\n+  int getInt(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public long getLong(String parameterName) throws SQLException;\n+  long getLong(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public float getFloat(String parameterName) throws SQLException;\n+  float getFloat(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public double getDouble(String parameterName) throws SQLException;\n+  double getDouble(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public byte[] getBytes(String parameterName) throws SQLException;\n+  byte[] getBytes(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Date getDate(String parameterName) throws SQLException;\n+  Date getDate(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Time getTime(String parameterName) throws SQLException;\n+  Time getTime(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Timestamp getTimestamp(String parameterName) throws SQLException;\n+  Timestamp getTimestamp(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Object getObject(String parameterName) throws SQLException;\n+  Object getObject(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public BigDecimal getBigDecimal(String parameterName) throws SQLException;\n+  BigDecimal getBigDecimal(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Object getObject(String parameterName, Map map) throws SQLException;\n+  Object getObject(String parameterName, Map map) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Ref getRef(String parameterName) throws SQLException;\n+  Ref getRef(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Blob getBlob(String parameterName) throws SQLException;\n+  Blob getBlob(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Clob getClob(String parameterName) throws SQLException;\n+  Clob getClob(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Array getArray(String parameterName) throws SQLException;\n+  Array getArray(String parameterName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Date getDate(String parameterName, Calendar cal) throws SQLException;\n+  Date getDate(String parameterName, Calendar cal) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Time getTime(String parameterName, Calendar cal) throws SQLException;\n+  Time getTime(String parameterName, Calendar cal) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Timestamp getTimestamp(String parameterName, Calendar cal)\n+  Timestamp getTimestamp(String parameterName, Calendar cal)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public URL getURL(String parameterName) throws SQLException;\n+  URL getURL(String parameterName) throws SQLException;\n }"}, {"sha": "f764f5cfcc29e6b25047083b00f4208dbf401c8f", "filename": "libjava/java/sql/Clob.java", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FClob.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FClob.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FClob.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -57,7 +57,7 @@ public interface Clob\n   * @exception SQLException If an error occurs.\n   * @since 1.2\n   */\n-  public long length() throws SQLException;\n+  long length() throws SQLException;\n \n   /**\n    * This method returns the specified portion of the CLOB as a \n@@ -70,7 +70,7 @@ public interface Clob\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public String getSubString(long pos, int length) throws SQLException;\n+  String getSubString(long pos, int length) throws SQLException;\n \n   /**\n    * This method returns a character stream that reads the contents of the\n@@ -80,7 +80,7 @@ public interface Clob\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public Reader getCharacterStream() throws SQLException;\n+  Reader getCharacterStream() throws SQLException;\n \n   /**\n    * This method returns a byte stream that reads the contents of the\n@@ -90,7 +90,7 @@ public interface Clob\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public InputStream getAsciiStream() throws SQLException;\n+  InputStream getAsciiStream() throws SQLException;\n \n   /**\n    * This method returns the index into the CLOB of the first occurrence of\n@@ -106,7 +106,7 @@ public interface Clob\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public long position(String searchstr, long start) throws SQLException;\n+  long position(String searchstr, long start) throws SQLException;\n \n   /**\n    * This method returns the index into the CLOB of the first occurrence of\n@@ -122,31 +122,31 @@ public interface Clob\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public long position(Clob searchstr, long start) throws SQLException;\n+  long position(Clob searchstr, long start) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int setString(long pos, String str) throws SQLException;\n+  int setString(long pos, String str) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int setString(long pos, String str, int offset, int len)\n+  int setString(long pos, String str, int offset, int len)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public OutputStream setAsciiStream(long pos) throws SQLException;\n+  OutputStream setAsciiStream(long pos) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Writer setCharacterStream(long pos) throws SQLException;\n+  Writer setCharacterStream(long pos) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void truncate(long len) throws SQLException;\n+  void truncate(long len) throws SQLException;\n }"}, {"sha": "af7c987d11730c942020c3be5920fd1ead3f3aa2", "filename": "libjava/java/sql/Connection.java", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FConnection.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -51,30 +51,30 @@ public interface Connection\n    * This transaction isolation level indicates that transactions are not\n    * supported.\n    */\n-  public static final int TRANSACTION_NONE = 0;\n+  int TRANSACTION_NONE = 0;\n \n   /**\n    * This transaction isolation level indicates that one transaction can\n    * read modifications by other transactions before the other transactions\n    * have committed their changes.  This could result in invalid reads.\n    */\n-  public static final int TRANSACTION_READ_UNCOMMITTED = 1;\n+  int TRANSACTION_READ_UNCOMMITTED = 1;\n \n   /**\n    * This transaction isolation leve indicates that only committed data from\n    * other transactions will be read.  If a transaction reads a row, then\n    * another transaction commits a change to that row, the first transaction\n    * would retrieve the changed row on subsequent reads of the same row.\n    */\n-  public static final int TRANSACTION_READ_COMMITTED = 2;\n+  int TRANSACTION_READ_COMMITTED = 2;\n \n   /**\n    * This transaction isolation level indicates that only committed data from\n    * other transactions will be read.  It also ensures that data read from\n    * a row will not be different on a subsequent read even if another\n    * transaction commits a change.\n    */\n-  public static final int TRANSACTION_REPEATABLE_READ = 4;\n+  int TRANSACTION_REPEATABLE_READ = 4;\n \n   /**\n    * This transaction isolation level indicates that only committed data from\n@@ -84,7 +84,7 @@ public interface Connection\n    * transactions will not affect the result set returned during subsequent\n    * executions of the same WHERE clause in this transaction.\n    */\n-  public static final int TRANSACTION_SERIALIZABLE = 8;\n+  int TRANSACTION_SERIALIZABLE = 8;\n \n   /**\n    * This method creates a new SQL statement.  The default result set type\n@@ -94,7 +94,7 @@ public interface Connection\n    * @exception SQLException If an error occurs.\n    * @see Statement\n    */\n-  public Statement createStatement() throws SQLException;\n+  Statement createStatement() throws SQLException;\n \n   /**\n    * This method creates a new <code>PreparedStatement</code> for the specified\n@@ -107,7 +107,7 @@ public interface Connection\n    * @exception SQLException If an error occurs.\n    * @see PreparedStatement\n    */\n-  public PreparedStatement prepareStatement(String sql) throws SQLException;\n+  PreparedStatement prepareStatement(String sql) throws SQLException;\n \n   /**\n    * This method creates a new <code>CallableStatement</code> for the \n@@ -121,7 +121,7 @@ public interface Connection\n    * @exception SQLException If an error occurs.\n    * @see CallableStatement\n    */\n-  public CallableStatement prepareCall(String sql) throws SQLException;\n+  CallableStatement prepareCall(String sql) throws SQLException;\n \n   /**\n    * This method converts the specified generic SQL statement into the\n@@ -131,7 +131,7 @@ public interface Connection\n    * @return The native SQL statement.\n    * @exception SQLException If an error occurs.\n    */\n-  public String nativeSQL(String sql) throws SQLException;\n+  String nativeSQL(String sql) throws SQLException;\n \n   /**\n    * This method turns auto commit mode on or off.  In auto commit mode,\n@@ -144,7 +144,7 @@ public interface Connection\n    * @see commit\n    * @see rollback\n    */\n-  public void setAutoCommit(boolean autoCommit) throws SQLException;\n+  void setAutoCommit(boolean autoCommit) throws SQLException;\n \n   /**\n    * This method tests whether or not auto commit mode is currently enabled.\n@@ -159,30 +159,30 @@ public interface Connection\n    * @see commit\n    * @see rollback\n    */\n-  public boolean getAutoCommit() throws SQLException;\n+  boolean getAutoCommit() throws SQLException;\n \n  /**\n   * This method commits any SQL statements executed on this connection since \n   * the last commit or rollback.\n   *\n   * @exception SQLException If an error occurs.\n   */\n-  public void commit() throws SQLException;\n+  void commit() throws SQLException;\n \n   /**\n    * This method rolls back any SQL statements executed on this connection\n    * since the last commit or rollback.\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void rollback() throws SQLException;\n+  void rollback() throws SQLException;\n \n   /**\n    * This method immediately closes this database connection.\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void close() throws SQLException;\n+  void close() throws SQLException;\n \n   /**\n    * This method tests whether or not this connection has been closed. \n@@ -191,7 +191,7 @@ public interface Connection\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isClosed() throws SQLException;\n+  boolean isClosed() throws SQLException;\n \n   /**\n    * This method returns the meta data for this database connection.\n@@ -200,7 +200,7 @@ public interface Connection\n    * @exception SQLException If an error occurs.\n    * @see DatabaseMetaData\n    */\n-  public DatabaseMetaData getMetaData() throws SQLException;\n+  DatabaseMetaData getMetaData() throws SQLException;\n \n   /**\n    * This method turns read only mode on or off.  It may not be called while\n@@ -210,7 +210,7 @@ public interface Connection\n    *        <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setReadOnly(boolean readOnly) throws SQLException;\n+  void setReadOnly(boolean readOnly) throws SQLException;\n \n   /**\n    * This method tests whether or not this connection is in read only mode.\n@@ -219,7 +219,7 @@ public interface Connection\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isReadOnly() throws SQLException;\n+  boolean isReadOnly() throws SQLException;\n \n   /**\n    * This method sets the name of the catalog in use by this connection.\n@@ -229,7 +229,7 @@ public interface Connection\n    * @param catalog The name of the catalog to use for this connection.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setCatalog(String catalog) throws SQLException;\n+  void setCatalog(String catalog) throws SQLException;\n \n   /**\n    * This method returns the name of the catalog in use by this connection,\n@@ -239,7 +239,7 @@ public interface Connection\n    *         exist or catalogs are not supported by this database.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getCatalog() throws SQLException;\n+  String getCatalog() throws SQLException;\n \n   /**\n    * This method sets the current transaction isolation mode.  This must\n@@ -248,7 +248,7 @@ public interface Connection\n    * @param level The transaction isolation level.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setTransactionIsolation(int level) throws SQLException;\n+  void setTransactionIsolation(int level) throws SQLException;\n \n   /**\n    * This method returns the current transaction isolation mode.  This will\n@@ -257,7 +257,7 @@ public interface Connection\n    * @return The transaction isolation level.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getTransactionIsolation() throws SQLException;\n+  int getTransactionIsolation() throws SQLException;\n \n   /**\n    * This method returns the first warning that occurred on this connection,\n@@ -268,14 +268,14 @@ public interface Connection\n    *         <code>null</code> if there have been no warnings.\n    * @exception SQLException If an error occurs.\n    */\n-  public SQLWarning getWarnings() throws SQLException;\n+  SQLWarning getWarnings() throws SQLException;\n \n   /**\n    * This method clears all warnings that have occurred on this connection.\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void clearWarnings() throws SQLException;\n+  void clearWarnings() throws SQLException;\n \n   /**\n    * This method creates a new SQL statement with the specified type and\n@@ -290,7 +290,7 @@ public interface Connection\n    * @see Statement\n    * @see ResultSet\n    */\n-  public Statement createStatement(int resultSetType, int resultSetConcurrency)\n+  Statement createStatement(int resultSetType, int resultSetConcurrency)\n     throws SQLException;\n \n   /**\n@@ -310,7 +310,7 @@ public Statement createStatement(int resultSetType, int resultSetConcurrency)\n    * @see PreparedStatement\n    * @see ResultSet\n    */\n-  public PreparedStatement prepareStatement(String sql, int resultSetType, \n+  PreparedStatement prepareStatement(String sql, int resultSetType, \n     int resultSetConcurrency) throws SQLException;\n \n   /**\n@@ -330,7 +330,7 @@ public PreparedStatement prepareStatement(String sql, int resultSetType,\n    * @see CallableStatement\n    * @see ResultSet\n    */\n-  public CallableStatement prepareCall(String sql, int resultSetType, int\n+  CallableStatement prepareCall(String sql, int resultSetType, int\n     resultSetConcurrency) throws SQLException;\n \n   /**\n@@ -341,7 +341,7 @@ public CallableStatement prepareCall(String sql, int resultSetType, int\n    * @return The SQL type to Java class mapping.\n    * @exception SQLException If an error occurs.\n    */\n-  public Map getTypeMap() throws SQLException;\n+  Map getTypeMap() throws SQLException;\n \n   /**\n    * This method sets the mapping table for SQL types to Java classes.\n@@ -350,71 +350,71 @@ public CallableStatement prepareCall(String sql, int resultSetType, int\n    * @param map The new SQL mapping table.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setTypeMap(Map map) throws SQLException;\n+  void setTypeMap(Map map) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setHoldability(int holdability) throws SQLException;\n+  void setHoldability(int holdability) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int getHoldability() throws SQLException;\n+  int getHoldability() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Savepoint setSavepoint() throws SQLException;\n+  Savepoint setSavepoint() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Savepoint setSavepoint(String name) throws SQLException;\n+  Savepoint setSavepoint(String name) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void rollback(Savepoint savepoint) throws SQLException;\n+  void rollback(Savepoint savepoint) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void releaseSavepoint(Savepoint savepoint) throws SQLException;\n+  void releaseSavepoint(Savepoint savepoint) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Statement createStatement(int resultSetType, int\n+  Statement createStatement(int resultSetType, int\n       resultSetConcurrency, int resultSetHoldability) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public PreparedStatement prepareStatement(String sql, int resultSetType, int\n+  PreparedStatement prepareStatement(String sql, int resultSetType, int\n       resultSetConcurrency, int resultSetHoldability) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public CallableStatement prepareCall(String sql, int resultSetType, int\n+  CallableStatement prepareCall(String sql, int resultSetType, int\n       resultSetConcurrency, int resultSetHoldability) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)\n+  PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)\n       throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public PreparedStatement prepareStatement(String sql, int[] columnIndexes)\n+  PreparedStatement prepareStatement(String sql, int[] columnIndexes)\n       throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public PreparedStatement prepareStatement(String sql, String[] columnNames)\n+  PreparedStatement prepareStatement(String sql, String[] columnNames)\n       throws SQLException;\n }"}, {"sha": "056c8ba5863aeef8d752a60f1a006c936ab0b376", "filename": "libjava/java/sql/DatabaseMetaData.java", "status": "modified", "additions": 214, "deletions": 214, "changes": 428, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -37,234 +37,234 @@\n \n package java.sql;\n \n-public interface DatabaseMetaData \n+interface DatabaseMetaData \n {\n   /**\n    * It is unknown whether or not the procedure returns a result.\n    */\n-  public static final int procedureResultUnknown = 0;\n+  int procedureResultUnknown = 0;\n \n   /**\n    * The procedure does not return a result.\n    */\n-  public static final int procedureNoResult = 1;\n+  int procedureNoResult = 1;\n \n   /**\n    * The procedure returns a result.\n    */\n-  public static final int procedureReturnsResult = 2;\n+  int procedureReturnsResult = 2;\n \n   /**\n    * The column type is unknown.\n    */\n-  public static final int procedureColumnUnknown = 0;\n+  int procedureColumnUnknown = 0;\n \n   /**\n    * The column type is input.\n    */\n-  public static final int procedureColumnIn = 1;\n+  int procedureColumnIn = 1;\n \n   /**\n    * The column type is input/output.\n    */\n-  public static final int procedureColumnInOut = 2;\n+  int procedureColumnInOut = 2;\n \n   /**\n    * The column type is output\n    */\n-  public static final int procedureColumnOut = 4;\n+  int procedureColumnOut = 4;\n \n   /**\n    * The column is used for return values.\n    */\n-  public static final int procedureColumnReturn = 5;\n+  int procedureColumnReturn = 5;\n \n   /**\n    * The column is used for storing results\n    */\n-  public static final int procedureColumnResult = 3;\n+  int procedureColumnResult = 3;\n \n   /**\n    * NULL values are not allowed.\n    */\n-  public static final int procedureNoNulls = 0;\n+  int procedureNoNulls = 0;\n \n   /**\n    * NULL values are allowed.\n    */\n-  public static final int procedureNullable = 1;\n+  int procedureNullable = 1;\n \n   /**\n    * It is unknown whether or not NULL values are allowed.\n    */\n-  public static final int procedureNullableUnknown = 2;\n+  int procedureNullableUnknown = 2;\n \n   /**\n    * The column does not allow NULL\n    */\n-  public static final int columnNoNulls = 0;\n+  int columnNoNulls = 0;\n \n   /**\n    * The column does allow NULL\n    */\n-  public static final int columnNullable = 1;\n+  int columnNullable = 1;\n \n   /**\n    * It is unknown whether or not the column allows NULL\n    */\n-  public static final int columnNullableUnknown = 2;\n+  int columnNullableUnknown = 2;\n \n   /**\n    * The best row's scope is only guaranteed to be valid so long as the\n    * row is actually being used.\n    */\n-  public static final int bestRowTemporary = 0;\n+  int bestRowTemporary = 0;\n \n   /**\n    * The best row identifier is valid to the end of the transaction.\n    */\n-  public static final int bestRowTransaction = 1;\n+  int bestRowTransaction = 1;\n \n   /**\n    * The best row identifier is valid to the end of the session.\n    */\n-  public static final int bestRowSession = 2;\n+  int bestRowSession = 2;\n \n   /**\n    * The best row may or may not be a pseudo-column.\n    */\n-  public static final int bestRowUnknown = 0;\n+  int bestRowUnknown = 0;\n \n   /**\n    * The best row identifier is not a pseudo-column.\n    */\n-  public static final int bestRowNotPseudo = 1;\n+  int bestRowNotPseudo = 1;\n \n   /**\n    * The best row identifier is a pseudo-column.\n    */\n-  public static final int bestRowPseudo = 2;\n+  int bestRowPseudo = 2;\n \n   /**\n    * It is unknown whether or not the version column is a pseudo-column.\n    */\n-  public static final int versionColumnUnknown = 0;\n+  int versionColumnUnknown = 0;\n \n   /**\n    * The version column is not a pseudo-column\n    */\n-  public static final int versionColumnNotPseudo = 1;\n+  int versionColumnNotPseudo = 1;\n \n   /**\n    * The version column is a pseudo-column\n    */\n-  public static final int versionColumnPseudo = 2;\n+  int versionColumnPseudo = 2;\n \n   /**\n    * Foreign key changes are cascaded in updates or deletes.\n    */\n-  public static final int importedKeyCascade = 0;\n+  int importedKeyCascade = 0;\n \n   /**\n    * Column may not be updated or deleted in use as a foreign key.\n    */\n-  public static final int importedKeyRestrict = 1;\n+  int importedKeyRestrict = 1;\n \n   /**\n    * When primary key is updated or deleted, the foreign key is set to NULL.\n    */\n-  public static final int importedKeySetNull = 2;\n+  int importedKeySetNull = 2;\n \n   /**\n    * If the primary key is a foreign key, it cannot be udpated or deleted.\n    */\n-  public static final int importedKeyNoAction = 3;\n+  int importedKeyNoAction = 3;\n \n   /**\n    * If the primary key is updated or deleted, the foreign key is set to\n    * a default value.\n    */\n-  public static final int importedKeySetDefault = 4;\n+  int importedKeySetDefault = 4;\n \n   /**\n    * Wish I knew what this meant.\n    */\n-  public static final int importedKeyInitiallyDeferred = 5;\n+  int importedKeyInitiallyDeferred = 5;\n \n   /**\n    * Wish I knew what this meant.\n    */\n-  public static final int importedKeyInitiallyImmediate = 6;\n+  int importedKeyInitiallyImmediate = 6;\n \n   /**\n    * Wish I knew what this meant.\n    */\n-  public static final int importedKeyNotDeferrable = 7;\n+  int importedKeyNotDeferrable = 7;\n \n   /**\n    * A NULL value is not allowed for this data type.\n    */\n-  public static final int typeNoNulls = 0;\n+  int typeNoNulls = 0;\n \n   /**\n    * A NULL value is allowed for this data type.\n    */\n-  public static final int typeNullable = 1;\n+  int typeNullable = 1;\n \n   /**\n    * It is unknown whether or not NULL values are allowed for this data type.\n    */\n-  public static final int typeNullableUnknown = 2;\n+  int typeNullableUnknown = 2;\n \n   /**\n    * Where clauses are not supported for this type.\n    */\n-  public static final int typePredNone = 0;\n+  int typePredNone = 0;\n \n   /**\n    * Only \"WHERE..LIKE\" style WHERE clauses are allowed on this data type.\n    */\n-  public static final int typePredChar = 1;\n+  int typePredChar = 1;\n \n   /**\n    * All WHERE clauses except \"WHERE..LIKE\" style are allowed on this data type.\n    */\n-  public static final int typePredBasic = 2;\n+  int typePredBasic = 2;\n \n   /**\n    * Any type of WHERE clause is allowed for this data type.\n    */\n-  public static final int typeSearchable = 3;\n+  int typeSearchable = 3;\n \n   /**\n    * This column contains table statistics.\n    */\n-  public static final short tableIndexStatistic = 0;\n+  short tableIndexStatistic = 0;\n \n   /**\n    * This table index is clustered.\n    */\n-  public static final short tableIndexClustered = 1;\n+  short tableIndexClustered = 1;\n \n   /**\n    * This table index is hashed.\n    */\n-  public static final short tableIndexHashed = 2;\n+  short tableIndexHashed = 2;\n \n   /**\n    * This table index is of another type.\n    */\n-  public static final short tableIndexOther = 3;\n+  short tableIndexOther = 3;\n \n-  public static final short attributeNoNulls = 0;\n+  short attributeNoNulls = 0;\n \n-  public static final short attributeNullable = 1;\n+  short attributeNullable = 1;\n \n-  public static final short attributeNullableUnknown = 2;\n+  short attributeNullableUnknown = 2;\n \n-  public static final int sqlStateXOpen = 1;\n+  int sqlStateXOpen = 1;\n \n-  public static final int sqlStateSQL99 = 2;\n+  int sqlStateSQL99 = 2;\n \n   /**\n    * This method tests whether or not all the procedures returned by\n@@ -274,7 +274,7 @@ public interface DatabaseMetaData\n    * <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean allProceduresAreCallable() throws SQLException;\n+  boolean allProceduresAreCallable() throws SQLException;\n \n   /**\n    * This method tests whether or not all the table returned by the\n@@ -285,7 +285,7 @@ public interface DatabaseMetaData\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean allTablesAreSelectable() throws SQLException;\n+  boolean allTablesAreSelectable() throws SQLException;\n \n   /**\n    * This method returns the URL for this database.\n@@ -294,15 +294,15 @@ public interface DatabaseMetaData\n    *         is not known.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getURL() throws SQLException;\n+  String getURL() throws SQLException;\n \n   /**\n    * This method returns the database username for this connection.\n    *\n    * @return The database username.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getUserName() throws SQLException;\n+  String getUserName() throws SQLException;\n \n   /**\n    * This method tests whether or not the database is in read only mode.\n@@ -311,7 +311,7 @@ public interface DatabaseMetaData\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isReadOnly() throws SQLException;\n+  boolean isReadOnly() throws SQLException;\n \n   /**\n    * This method tests whether or not NULL's sort as high values.\n@@ -320,7 +320,7 @@ public interface DatabaseMetaData\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean nullsAreSortedHigh() throws SQLException;\n+  boolean nullsAreSortedHigh() throws SQLException;\n \n   /**\n    * This method tests whether or not NULL's sort as low values.\n@@ -329,7 +329,7 @@ public interface DatabaseMetaData\n    * otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean nullsAreSortedLow() throws SQLException;\n+  boolean nullsAreSortedLow() throws SQLException;\n \n   /**\n    * This method tests whether or not NULL's sort as high values.\n@@ -338,7 +338,7 @@ public interface DatabaseMetaData\n    * otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean nullsAreSortedAtStart() throws SQLException;\n+  boolean nullsAreSortedAtStart() throws SQLException;\n \n   /**\n    * This method test whether or not NULL's are sorted to the end\n@@ -348,53 +348,53 @@ public interface DatabaseMetaData\n    * <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean nullsAreSortedAtEnd() throws SQLException;\n+  boolean nullsAreSortedAtEnd() throws SQLException;\n \n   /**\n    * This method returns the name of the database product.\n    *\n    * @return The database product.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getDatabaseProductName() throws SQLException;\n+  String getDatabaseProductName() throws SQLException;\n \n   /**\n    * This method returns the version of the database product.\n    *\n    * @return The version of the database product.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getDatabaseProductVersion() throws SQLException;\n+  String getDatabaseProductVersion() throws SQLException;\n \n   /**\n    * This method returns the name of the JDBC driver.\n    *\n    * @return The name of the JDBC driver.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getDriverName() throws SQLException;\n+  String getDriverName() throws SQLException;\n \n   /**\n    * This method returns the version of the JDBC driver.\n    *\n    * @return The version of the JDBC driver.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getDriverVersion() throws SQLException;\n+  String getDriverVersion() throws SQLException;\n \n   /**\n    * This method returns the major version number of the JDBC driver.\n    *\n    * @return The major version number of the JDBC driver.\n    */\n-  public int getDriverMajorVersion();\n+  int getDriverMajorVersion();\n \n   /**\n    * This method returns the minor version number of the JDBC driver.\n    *\n    * @return The minor version number of the JDBC driver.\n    */\n-  public int getDriverMinorVersion();\n+  int getDriverMinorVersion();\n \n   /**\n    * This method tests whether or not the database uses local files to\n@@ -405,7 +405,7 @@ public interface DatabaseMetaData\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean usesLocalFiles() throws SQLException;\n+  boolean usesLocalFiles() throws SQLException;\n \n   /**\n    * This method tests whether or not the database uses a separate file for\n@@ -416,7 +416,7 @@ public interface DatabaseMetaData\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean usesLocalFilePerTable() throws SQLException;\n+  boolean usesLocalFilePerTable() throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports identifiers\n@@ -427,7 +427,7 @@ public interface DatabaseMetaData\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsMixedCaseIdentifiers() throws SQLException;\n+  boolean supportsMixedCaseIdentifiers() throws SQLException;\n \n   /**\n    * This method tests whether or not the database treats mixed case\n@@ -437,7 +437,7 @@ public interface DatabaseMetaData\n    *            upper case, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean storesUpperCaseIdentifiers() throws SQLException;\n+  boolean storesUpperCaseIdentifiers() throws SQLException;\n \n   /**\n    * This method tests whether or not the database treats mixed case\n@@ -447,7 +447,7 @@ public interface DatabaseMetaData\n    *            lower case, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean storesLowerCaseIdentifiers() throws SQLException;\n+  boolean storesLowerCaseIdentifiers() throws SQLException;\n \n   /**\n    * This method tests whether or not the database stores mixed case \n@@ -457,7 +457,7 @@ public interface DatabaseMetaData\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean storesMixedCaseIdentifiers() throws SQLException;\n+  boolean storesMixedCaseIdentifiers() throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports quoted identifiers\n@@ -467,7 +467,7 @@ public interface DatabaseMetaData\n    *         identifiers, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException;\n+  boolean supportsMixedCaseQuotedIdentifiers() throws SQLException;\n \n   /**\n    * This method tests whether or not the database treats mixed case\n@@ -477,7 +477,7 @@ public interface DatabaseMetaData\n    *            as upper case, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean storesUpperCaseQuotedIdentifiers() throws SQLException;\n+  boolean storesUpperCaseQuotedIdentifiers() throws SQLException;\n \n   /**\n    * This method tests whether or not the database treats mixed case\n@@ -487,7 +487,7 @@ public interface DatabaseMetaData\n    *            as lower case, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean storesLowerCaseQuotedIdentifiers() throws SQLException;\n+  boolean storesLowerCaseQuotedIdentifiers() throws SQLException;\n \n   /**\n    * This method tests whether or not the database stores mixed case \n@@ -497,7 +497,7 @@ public interface DatabaseMetaData\n    *         identifiers, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean storesMixedCaseQuotedIdentifiers() throws SQLException;\n+  boolean storesMixedCaseQuotedIdentifiers() throws SQLException;\n \n   /**\n    * This metohd returns the quote string for SQL identifiers.\n@@ -506,7 +506,7 @@ public interface DatabaseMetaData\n    *         is not supported.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getIdentifierQuoteString() throws SQLException;\n+  String getIdentifierQuoteString() throws SQLException;\n \n   /**\n    * This method returns a comma separated list of all the SQL keywords in\n@@ -515,47 +515,47 @@ public interface DatabaseMetaData\n    * @return The list of SQL keywords not in SQL92.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getSQLKeywords() throws SQLException;\n+  String getSQLKeywords() throws SQLException;\n \n   /**\n    * This method returns a comma separated list of math functions.\n    *\n    * @return The list of math functions.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getNumericFunctions() throws SQLException;\n+  String getNumericFunctions() throws SQLException;\n \n   /**\n    * This method returns a comma separated list of string functions.\n    *\n    * @return The list of string functions.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getStringFunctions() throws SQLException;\n+  String getStringFunctions() throws SQLException;\n \n   /**\n    * This method returns a comma separated list of of system functions.\n    *\n    * @return A comma separated list of system functions.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getSystemFunctions() throws SQLException;\n+  String getSystemFunctions() throws SQLException;\n \n   /**\n    * This method returns comma separated list of time/date functions.\n    * \n    * @return The list of time/date functions.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getTimeDateFunctions() throws SQLException;\n+  String getTimeDateFunctions() throws SQLException;\n \n   /**\n    * This method returns the string used to escape wildcards in search strings.\n    *\n    * @return The string used to escape wildcards in search strings.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getSearchStringEscape() throws SQLException;\n+  String getSearchStringEscape() throws SQLException;\n \n   /**\n    * This methods returns non-standard characters that can appear in \n@@ -564,7 +564,7 @@ public interface DatabaseMetaData\n    * @return Non-standard characters that can appear in unquoted identifiers.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getExtraNameCharacters() throws SQLException;\n+  String getExtraNameCharacters() throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports\n@@ -574,7 +574,7 @@ public interface DatabaseMetaData\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsAlterTableWithAddColumn() throws SQLException;\n+  boolean supportsAlterTableWithAddColumn() throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports\n@@ -584,7 +584,7 @@ public interface DatabaseMetaData\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsAlterTableWithDropColumn() throws SQLException;\n+  boolean supportsAlterTableWithDropColumn() throws SQLException;\n \n   /**\n    * This method tests whether or not column aliasing is supported.\n@@ -593,7 +593,7 @@ public interface DatabaseMetaData\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsColumnAliasing() throws SQLException;\n+  boolean supportsColumnAliasing() throws SQLException;\n \n   /**\n    * This method tests whether the concatenation of a NULL and non-NULL\n@@ -604,7 +604,7 @@ public interface DatabaseMetaData\n    *         returns a NULL, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean nullPlusNonNullIsNull() throws SQLException;\n+  boolean nullPlusNonNullIsNull() throws SQLException;\n \n   /**\n    * Tests whether or not CONVERT is supported.\n@@ -613,7 +613,7 @@ public interface DatabaseMetaData\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsConvert() throws SQLException;\n+  boolean supportsConvert() throws SQLException;\n \n   /**\n    * This method tests whether or not CONVERT can be performed between the\n@@ -625,7 +625,7 @@ public interface DatabaseMetaData\n    *         <code>false</code> otherwise.\n    * @see Types\n    */\n-  public boolean supportsConvert(int fromType, int toType) throws\n+  boolean supportsConvert(int fromType, int toType) throws\n       SQLException;\n \n   /**\n@@ -637,7 +637,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsTableCorrelationNames() throws SQLException;\n+  boolean supportsTableCorrelationNames() throws SQLException;\n \n   /**\n    * This method tests whether correlation names must be different from the\n@@ -647,7 +647,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         the table name, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsDifferentTableCorrelationNames() throws SQLException;\n+  boolean supportsDifferentTableCorrelationNames() throws SQLException;\n \n   /**\n    * This method tests whether or not expressions are allowed in an\n@@ -657,7 +657,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         lists, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsExpressionsInOrderBy() throws SQLException;\n+  boolean supportsExpressionsInOrderBy() throws SQLException;\n \n   /**\n    * This method tests whether or ORDER BY on a non-selected column is\n@@ -667,7 +667,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         ORDER BY, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsOrderByUnrelated() throws SQLException;\n+  boolean supportsOrderByUnrelated() throws SQLException;\n \n   /**\n    * This method tests whether or not GROUP BY is supported.\n@@ -676,7 +676,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsGroupBy() throws SQLException;\n+  boolean supportsGroupBy() throws SQLException;\n \n   /**\n    * This method tests whether GROUP BY on a non-selected column is\n@@ -686,7 +686,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         GROUP BY, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsGroupByUnrelated() throws SQLException;\n+  boolean supportsGroupByUnrelated() throws SQLException;\n \n   /**\n    * This method tests whether or not a GROUP BY can add columns not in the\n@@ -696,7 +696,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         all columns in the select, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsGroupByBeyondSelect() throws SQLException;\n+  boolean supportsGroupByBeyondSelect() throws SQLException;\n \n   /**\n    * This method tests whether or not the escape character is supported in\n@@ -707,7 +707,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsLikeEscapeClause() throws SQLException;\n+  boolean supportsLikeEscapeClause() throws SQLException;\n \n   /**\n    * This method tests whether multiple result sets for a single statement are\n@@ -717,7 +717,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         single statement, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsMultipleResultSets() throws SQLException;\n+  boolean supportsMultipleResultSets() throws SQLException;\n \n   /**\n    * This method test whether or not multiple transactions may be open\n@@ -727,7 +727,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         connections are supported, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsMultipleTransactions() throws SQLException;\n+  boolean supportsMultipleTransactions() throws SQLException;\n \n   /**\n    * This method tests whether or not columns can be defined as NOT NULL.  A\n@@ -737,7 +737,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsNonNullableColumns() throws SQLException;\n+  boolean supportsNonNullableColumns() throws SQLException;\n \n   /**\n    * This method tests whether or not the minimum grammer for ODBC is supported.\n@@ -747,7 +747,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsMinimumSQLGrammar() throws SQLException;\n+  boolean supportsMinimumSQLGrammar() throws SQLException;\n \n   /**\n    * This method tests whether or not the core grammer for ODBC is supported.\n@@ -756,7 +756,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsCoreSQLGrammar() throws SQLException;\n+  boolean supportsCoreSQLGrammar() throws SQLException;\n \n   /**\n    * This method tests whether or not the extended grammer for ODBC is supported.\n@@ -765,7 +765,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsExtendedSQLGrammar() throws SQLException;\n+  boolean supportsExtendedSQLGrammar() throws SQLException;\n \n   /**\n    * This method tests whether or not the ANSI92 entry level SQL\n@@ -776,7 +776,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         supported, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsANSI92EntryLevelSQL() throws SQLException;\n+  boolean supportsANSI92EntryLevelSQL() throws SQLException;\n \n   /**\n    * This method tests whether or not the ANSI92 intermediate SQL\n@@ -786,7 +786,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         supported, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsANSI92IntermediateSQL() throws SQLException;\n+  boolean supportsANSI92IntermediateSQL() throws SQLException;\n \n   /**\n    * This method tests whether or not the ANSI92 full SQL\n@@ -796,7 +796,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         supported, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsANSI92FullSQL() throws SQLException;\n+  boolean supportsANSI92FullSQL() throws SQLException;\n \n   /**\n    * This method tests whether or not the SQL integrity enhancement\n@@ -806,7 +806,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         supported, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsIntegrityEnhancementFacility() throws SQLException;\n+  boolean supportsIntegrityEnhancementFacility() throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports outer joins.\n@@ -815,7 +815,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsOuterJoins() throws SQLException;\n+  boolean supportsOuterJoins() throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports full outer joins.\n@@ -824,7 +824,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsFullOuterJoins() throws SQLException;\n+  boolean supportsFullOuterJoins() throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports limited outer joins.\n@@ -833,31 +833,31 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsLimitedOuterJoins() throws SQLException;\n+  boolean supportsLimitedOuterJoins() throws SQLException;\n \n   /**\n    * This method returns the vendor's term for \"schema\".\n    *\n    * @return The vendor's term for schema.\n    * @exception SQLException if an error occurs.\n    */\n-  public String getSchemaTerm() throws SQLException;\n+  String getSchemaTerm() throws SQLException;\n \n   /**\n    * This method returns the vendor's term for \"procedure\".\n    *\n    * @return The vendor's term for procedure.\n    * @exception SQLException if an error occurs.\n    */\n-  public String getProcedureTerm() throws SQLException;\n+  String getProcedureTerm() throws SQLException;\n \n   /**\n    * This method returns the vendor's term for \"catalog\".\n    *\n    * @return The vendor's term for catalog.\n    * @exception SQLException if an error occurs.\n    */\n-  public String getCatalogTerm() throws SQLException;\n+  String getCatalogTerm() throws SQLException;\n \n   /**\n    * This method tests whether a catalog name appears at the beginning of\n@@ -867,7 +867,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> if it appears at the end.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isCatalogAtStart() throws SQLException;\n+  boolean isCatalogAtStart() throws SQLException;\n \n   /**\n    * This method returns the separator between the catalog name and the\n@@ -876,7 +876,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    * @return The separator between the catalog name and the table name.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getCatalogSeparator() throws SQLException;\n+  String getCatalogSeparator() throws SQLException;\n \n   /**\n    * This method tests whether a catalog name can appear in a data\n@@ -886,7 +886,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         manipulation statement, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsSchemasInDataManipulation() throws SQLException;\n+  boolean supportsSchemasInDataManipulation() throws SQLException;\n \n   /**\n    * This method tests whether a catalog name can appear in a procedure\n@@ -896,7 +896,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         call, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsSchemasInProcedureCalls() throws SQLException;\n+  boolean supportsSchemasInProcedureCalls() throws SQLException;\n \n   /**\n    * This method tests whether a catalog name can appear in a table definition.\n@@ -905,7 +905,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         definition, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsSchemasInTableDefinitions() throws SQLException;\n+  boolean supportsSchemasInTableDefinitions() throws SQLException;\n \n   /**\n    * This method tests whether a catalog name can appear in an index definition.\n@@ -914,7 +914,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         definition, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsSchemasInIndexDefinitions() throws SQLException;\n+  boolean supportsSchemasInIndexDefinitions() throws SQLException;\n \n   /**\n    * This method tests whether a catalog name can appear in privilege definitions.\n@@ -923,7 +923,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         definition, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsSchemasInPrivilegeDefinitions() throws SQLException;\n+  boolean supportsSchemasInPrivilegeDefinitions() throws SQLException;\n \n   /**\n    * This method tests whether a catalog name can appear in a data\n@@ -933,7 +933,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         manipulation statement, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsCatalogsInDataManipulation() throws SQLException;\n+  boolean supportsCatalogsInDataManipulation() throws SQLException;\n \n   /**\n    * This method tests whether a catalog name can appear in a procedure\n@@ -943,7 +943,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         call, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsCatalogsInProcedureCalls() throws SQLException;\n+  boolean supportsCatalogsInProcedureCalls() throws SQLException;\n \n   /**\n    * This method tests whether a catalog name can appear in a table definition.\n@@ -952,7 +952,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         definition, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsCatalogsInTableDefinitions() throws SQLException;\n+  boolean supportsCatalogsInTableDefinitions() throws SQLException;\n \n   /**\n    * This method tests whether a catalog name can appear in an index definition.\n@@ -961,7 +961,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         definition, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsCatalogsInIndexDefinitions() throws SQLException;\n+  boolean supportsCatalogsInIndexDefinitions() throws SQLException;\n \n   /**\n    * This method tests whether a catalog name can appear in privilege definitions.\n@@ -970,7 +970,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         definition, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsCatalogsInPrivilegeDefinitions() throws SQLException;\n+  boolean supportsCatalogsInPrivilegeDefinitions() throws SQLException;\n \n   /**\n    * This method tests whether or not that database supports positioned\n@@ -980,7 +980,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsPositionedDelete() throws SQLException;\n+  boolean supportsPositionedDelete() throws SQLException;\n \n   /**\n    * This method tests whether or not that database supports positioned\n@@ -990,7 +990,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsPositionedUpdate() throws SQLException;\n+  boolean supportsPositionedUpdate() throws SQLException;\n \n   /**\n    * This method tests whether or not SELECT FOR UPDATE is supported by the\n@@ -1000,7 +1000,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsSelectForUpdate() throws SQLException;\n+  boolean supportsSelectForUpdate() throws SQLException;\n \n   /**\n    * This method tests whether or not stored procedures are supported on\n@@ -1010,7 +1010,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsStoredProcedures() throws SQLException;\n+  boolean supportsStoredProcedures() throws SQLException;\n \n   /**\n    * This method tests whether or not subqueries are allowed in comparisons.\n@@ -1020,7 +1020,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsSubqueriesInComparisons() throws SQLException;\n+  boolean supportsSubqueriesInComparisons() throws SQLException;\n \n   /**\n    * This method tests whether or not subqueries are allowed in exists\n@@ -1031,7 +1031,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         expressions, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsSubqueriesInExists() throws SQLException;\n+  boolean supportsSubqueriesInExists() throws SQLException;\n \n   /**\n    * This method tests whether subqueries are allowed in IN statements.\n@@ -1041,7 +1041,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         statements, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsSubqueriesInIns() throws SQLException;\n+  boolean supportsSubqueriesInIns() throws SQLException;\n \n   /**\n    * This method tests whether or not subqueries are allowed in quantified\n@@ -1052,7 +1052,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         expressions, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsSubqueriesInQuantifieds() throws SQLException;\n+  boolean supportsSubqueriesInQuantifieds() throws SQLException;\n \n   /**\n    * This method test whether or not correlated subqueries are allowed. A\n@@ -1062,7 +1062,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsCorrelatedSubqueries() throws SQLException;\n+  boolean supportsCorrelatedSubqueries() throws SQLException;\n \n   /**\n    * This method tests whether or not the UNION statement is supported.\n@@ -1071,7 +1071,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsUnion() throws SQLException;\n+  boolean supportsUnion() throws SQLException;\n \n   /**\n    * This method tests whether or not the UNION ALL statement is supported.\n@@ -1080,7 +1080,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsUnionAll() throws SQLException;\n+  boolean supportsUnionAll() throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports cursors\n@@ -1090,7 +1090,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsOpenCursorsAcrossCommit() throws SQLException;\n+  boolean supportsOpenCursorsAcrossCommit() throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports cursors\n@@ -1100,7 +1100,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsOpenCursorsAcrossRollback() throws SQLException;\n+  boolean supportsOpenCursorsAcrossRollback() throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports statements\n@@ -1110,7 +1110,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsOpenStatementsAcrossCommit() throws SQLException;\n+  boolean supportsOpenStatementsAcrossCommit() throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports statements\n@@ -1120,7 +1120,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsOpenStatementsAcrossRollback() throws SQLException;\n+  boolean supportsOpenStatementsAcrossRollback() throws SQLException;\n \n   /**\n    * This method returns the number of hex characters allowed in an inline\n@@ -1130,63 +1130,63 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         either an unknown or unlimited number.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxBinaryLiteralLength() throws SQLException;\n+  int getMaxBinaryLiteralLength() throws SQLException;\n \n   /**\n    * This method returns the maximum length of a character literal.\n    * \n    * @return The maximum length of a character literal.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxCharLiteralLength() throws SQLException;\n+  int getMaxCharLiteralLength() throws SQLException;\n \n   /**\n    * This method returns the maximum length of a column name.\n    *\n    * @return The maximum length of a column name.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxColumnNameLength() throws SQLException;\n+  int getMaxColumnNameLength() throws SQLException;\n \n   /**\n    * This method returns the maximum number of columns in a GROUP BY statement.\n    *\n    * @return The maximum number of columns in a GROUP BY statement.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxColumnsInGroupBy() throws SQLException;\n+  int getMaxColumnsInGroupBy() throws SQLException;\n \n   /**\n    * This method returns the maximum number of columns in an index.\n    *\n    * @return The maximum number of columns in an index.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxColumnsInIndex() throws SQLException;\n+  int getMaxColumnsInIndex() throws SQLException;\n \n   /**\n    * This method returns the maximum number of columns in an ORDER BY statement.\n    *\n    * @return The maximum number of columns in an ORDER BY statement.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxColumnsInOrderBy() throws SQLException;\n+  int getMaxColumnsInOrderBy() throws SQLException;\n \n   /**\n    * This method returns the maximum number of columns in a SELECT statement.\n    *\n    * @return The maximum number of columns in a SELECT statement.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxColumnsInSelect() throws SQLException;\n+  int getMaxColumnsInSelect() throws SQLException;\n \n   /**\n    * This method returns the maximum number of columns in a table.\n    *\n    * @return The maximum number of columns in a table.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxColumnsInTable() throws SQLException;\n+  int getMaxColumnsInTable() throws SQLException;\n \n   /**\n    * This method returns the maximum number of connections this client\n@@ -1195,55 +1195,55 @@ public boolean supportsConvert(int fromType, int toType) throws\n    * @return The maximum number of database connections.\n    * @SQLException If an error occurs.\n    */\n-  public int getMaxConnections() throws SQLException;\n+  int getMaxConnections() throws SQLException;\n \n   /**\n    * This method returns the maximum length of a cursor name.\n    *\n    * @return The maximum length of a cursor name.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxCursorNameLength() throws SQLException;\n+  int getMaxCursorNameLength() throws SQLException;\n \n   /**\n    * This method returns the maximum length of an index.\n    *\n    * @return The maximum length of an index.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxIndexLength() throws SQLException;\n+  int getMaxIndexLength() throws SQLException;\n \n   /**\n    * This method returns the maximum length of a schema name.\n    *\n    * @return The maximum length of a schema name.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxSchemaNameLength() throws SQLException;\n+  int getMaxSchemaNameLength() throws SQLException;\n \n   /**\n    * This method returns the maximum length of a procedure name.\n    *\n    * @return The maximum length of a procedure name.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxProcedureNameLength() throws SQLException;\n+  int getMaxProcedureNameLength() throws SQLException;\n \n   /**\n    * This method returns the maximum length of a catalog name.\n    *\n    * @return The maximum length of a catalog name.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxCatalogNameLength() throws SQLException;\n+  int getMaxCatalogNameLength() throws SQLException;\n \n   /**\n    * This method returns the maximum size of a row in bytes.\n    *\n    * @return The maximum size of a row.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxRowSize() throws SQLException;\n+  int getMaxRowSize() throws SQLException;\n \n   /**\n    * This method tests whether or not the maximum row size includes BLOB's\n@@ -1252,15 +1252,15 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean doesMaxRowSizeIncludeBlobs() throws SQLException;\n+  boolean doesMaxRowSizeIncludeBlobs() throws SQLException;\n \n   /**\n    * This method includes the maximum length of a SQL statement.\n    *\n    * @return The maximum length of a SQL statement.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxStatementLength() throws SQLException;\n+  int getMaxStatementLength() throws SQLException;\n \n   /**\n    * This method returns the maximum number of statements that can be\n@@ -1269,15 +1269,15 @@ public boolean supportsConvert(int fromType, int toType) throws\n    * @return The maximum number of statements that can be active at any time.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxStatements() throws SQLException;\n+  int getMaxStatements() throws SQLException;\n \n   /**\n    * This method returns the maximum length of a table name.\n    *\n    * @return The maximum length of a table name.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxTableNameLength() throws SQLException;\n+  int getMaxTableNameLength() throws SQLException;\n \n   /**\n    * This method returns the maximum number of tables that may be referenced\n@@ -1286,15 +1286,15 @@ public boolean supportsConvert(int fromType, int toType) throws\n    * @return The maximum number of tables allowed in a SELECT statement.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxTablesInSelect() throws SQLException;\n+  int getMaxTablesInSelect() throws SQLException;\n \n   /**\n    * This method returns the maximum length of a user name.\n    *\n    * @return The maximum length of a user name.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxUserNameLength() throws SQLException;\n+  int getMaxUserNameLength() throws SQLException;\n \n   /**\n    * This method returns the default transaction isolation level of the\n@@ -1304,7 +1304,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    * @exception SQLException If an error occurs.\n    * @see Connection\n    */\n-  public int getDefaultTransactionIsolation() throws SQLException;\n+  int getDefaultTransactionIsolation() throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports transactions.\n@@ -1313,7 +1313,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsTransactions() throws SQLException;\n+  boolean supportsTransactions() throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports the specified\n@@ -1325,7 +1325,7 @@ public boolean supportsConvert(int fromType, int toType) throws\n    *         is supported, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsTransactionIsolationLevel(int level) throws\n+  boolean supportsTransactionIsolationLevel(int level) throws\n       SQLException;\n \n   /**\n@@ -1336,7 +1336,7 @@ public boolean supportsTransactionIsolationLevel(int level) throws\n    *         same transaction, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsDataDefinitionAndDataManipulationTransactions()\n+  boolean supportsDataDefinitionAndDataManipulationTransactions()\n       throws SQLException;\n \n   /**\n@@ -1347,7 +1347,7 @@ public boolean supportsDataDefinitionAndDataManipulationTransactions()\n    *         transactions, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsDataManipulationTransactionsOnly() throws\n+  boolean supportsDataManipulationTransactionsOnly() throws\n       SQLException;\n \n   /**\n@@ -1358,7 +1358,7 @@ public boolean supportsDataManipulationTransactionsOnly() throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean dataDefinitionCausesTransactionCommit() throws SQLException;\n+  boolean dataDefinitionCausesTransactionCommit() throws SQLException;\n \n   /**\n    * This method tests whether or not DDL statements are ignored in\n@@ -1368,7 +1368,7 @@ public boolean supportsDataManipulationTransactionsOnly() throws\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean dataDefinitionIgnoredInTransactions() throws SQLException;\n+  boolean dataDefinitionIgnoredInTransactions() throws SQLException;\n \n   /**\n    * This method returns a list of all the stored procedures matching the\n@@ -1399,7 +1399,7 @@ public boolean supportsDataManipulationTransactionsOnly() throws\n    * @returns A <code>ResultSet</code> with all the requested procedures.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getProcedures(String catalog, String schemaPattern, String\n+  ResultSet getProcedures(String catalog, String schemaPattern, String\n       procedureNamePattern) throws SQLException;\n \n   /**\n@@ -1441,7 +1441,7 @@ public ResultSet getProcedures(String catalog, String schemaPattern, String\n    * @returns A <code>ResultSet</code> with all the requested procedures.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getProcedureColumns(String catalog, String schemaPattern,\n+  ResultSet getProcedureColumns(String catalog, String schemaPattern,\n       String procedureNamePattern, String columnNamePattern) throws\n       SQLException;\n \n@@ -1467,7 +1467,7 @@ public ResultSet getProcedureColumns(String catalog, String schemaPattern,\n    * @returns A <code>ResultSet</code> with all the requested tables.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getTables(String catalog, String schemaPattern, String\n+  ResultSet getTables(String catalog, String schemaPattern, String\n       tableNamePattern, String[] types) throws SQLException;\n \n   /**\n@@ -1478,7 +1478,7 @@ public ResultSet getTables(String catalog, String schemaPattern, String\n    * @return A <code>ResultSet</code> with all the requested schemas.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getSchemas() throws SQLException;\n+  ResultSet getSchemas() throws SQLException;\n \n   /**\n    * This method returns the list of database catalogs as a\n@@ -1488,7 +1488,7 @@ public ResultSet getTables(String catalog, String schemaPattern, String\n    * @return A <code>ResultSet</code> with all the requested catalogs.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getCatalogs() throws SQLException;\n+  ResultSet getCatalogs() throws SQLException;\n \n   /**\n    * This method returns the list of database table types as a\n@@ -1498,7 +1498,7 @@ public ResultSet getTables(String catalog, String schemaPattern, String\n    * @return A <code>ResultSet</code> with all the requested table types.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getTableTypes() throws SQLException;\n+  ResultSet getTableTypes() throws SQLException;\n \n   /**\n    * This method returns a list of the tables columns for\n@@ -1541,7 +1541,7 @@ public ResultSet getTables(String catalog, String schemaPattern, String\n    * @returns A <code>ResultSet</code> with all the requested tables.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getColumns(String catalog, String schemaPattern, String\n+  ResultSet getColumns(String catalog, String schemaPattern, String\n       tableNamePattern, String columnNamePattern) throws SQLException;\n \n   /**\n@@ -1573,7 +1573,7 @@ public ResultSet getColumns(String catalog, String schemaPattern, String\n    * @return A <code>ResultSet</code> with all the requested privileges.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getColumnPrivileges(String catalog, String schema, String\n+  ResultSet getColumnPrivileges(String catalog, String schema, String\n       table, String columnNamePattern) throws SQLException;\n \n   /**\n@@ -1604,7 +1604,7 @@ public ResultSet getColumnPrivileges(String catalog, String schema, String\n    * @return A <code>ResultSet</code> with all the requested privileges.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getTablePrivileges(String catalog, String schemaPattern,\n+  ResultSet getTablePrivileges(String catalog, String schemaPattern,\n       String tableNamePattern) throws SQLException;\n \n   /**\n@@ -1642,7 +1642,7 @@ public ResultSet getTablePrivileges(String catalog, String schemaPattern,\n    * @return A <code>ResultSet</code> with the best row identifier.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getBestRowIdentifier(String catalog, String schema,\n+  ResultSet getBestRowIdentifier(String catalog, String schema,\n     String table, int scope, boolean nullable) throws SQLException;\n \n   /**\n@@ -1675,7 +1675,7 @@ public ResultSet getBestRowIdentifier(String catalog, String schema,\n    * @return A <code>ResultSet</code> with the version columns.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getVersionColumns(String catalog, String schema,\n+  ResultSet getVersionColumns(String catalog, String schema,\n     String table) throws SQLException;\n \n   /**\n@@ -1701,7 +1701,7 @@ public ResultSet getVersionColumns(String catalog, String schema,\n    * @return A <code>ResultSet</code> with the primary key columns.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getPrimaryKeys(String catalog, String schema, String table)\n+  ResultSet getPrimaryKeys(String catalog, String schema, String table)\n       throws SQLException;\n \n   /**\n@@ -1746,7 +1746,7 @@ public ResultSet getPrimaryKeys(String catalog, String schema, String table)\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getImportedKeys(String catalog, String schema,\n+  ResultSet getImportedKeys(String catalog, String schema,\n     String table) throws SQLException;\n \n   /**\n@@ -1790,7 +1790,7 @@ public ResultSet getImportedKeys(String catalog, String schema,\n    * @return A <code>ResultSet</code> with the requested information\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getExportedKeys(String catalog, String schema,\n+  ResultSet getExportedKeys(String catalog, String schema,\n     String table) throws SQLException;\n \n   /**\n@@ -1842,7 +1842,7 @@ public ResultSet getExportedKeys(String catalog, String schema,\n    * @return A <code>ResultSet</code> with the requested information\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getCrossReference(String primaryCatalog, String\n+  ResultSet getCrossReference(String primaryCatalog, String\n     primarySchema, String primaryTable, String foreignCatalog, String\n     foreignSchema, String foreignTable) throws SQLException;\n \n@@ -1885,7 +1885,7 @@ public ResultSet getCrossReference(String primaryCatalog, String\n    * @return A <code>ResultSet</code> with the list of available data types.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getTypeInfo() throws SQLException;\n+  ResultSet getTypeInfo() throws SQLException;\n \n   /**\n    * This method returns information about a tables indices and statistics.\n@@ -1929,7 +1929,7 @@ public ResultSet getCrossReference(String primaryCatalog, String\n    * @return A <code>ResultSet</code> with the requested index information\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getIndexInfo(String catalog, String schema, String table,\n+  ResultSet getIndexInfo(String catalog, String schema, String table,\n     boolean unique, boolean approximate) throws SQLException;\n \n   /**\n@@ -1946,7 +1946,7 @@ public ResultSet getIndexInfo(String catalog, String schema, String table,\n    *\n    * @see ResultSet\n    */\n-  public boolean supportsResultSetType(int type) throws SQLException;\n+  boolean supportsResultSetType(int type) throws SQLException;\n \n   /**\n    * This method tests whether the specified result set type and result set\n@@ -1961,7 +1961,7 @@ public ResultSet getIndexInfo(String catalog, String schema, String table,\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public boolean supportsResultSetConcurrency(int type, int concurrency)\n+  boolean supportsResultSetConcurrency(int type, int concurrency)\n       throws SQLException;\n \n   /**\n@@ -1975,7 +1975,7 @@ public boolean supportsResultSetConcurrency(int type, int concurrency)\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public boolean ownUpdatesAreVisible(int type) throws SQLException;\n+  boolean ownUpdatesAreVisible(int type) throws SQLException;\n \n  /**\n    * This method tests whether or not the specified result set type sees its\n@@ -1988,7 +1988,7 @@ public boolean supportsResultSetConcurrency(int type, int concurrency)\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public boolean ownDeletesAreVisible(int type) throws SQLException;\n+  boolean ownDeletesAreVisible(int type) throws SQLException;\n \n   /**\n    * This method tests whether or not the specified result set type sees its\n@@ -2001,7 +2001,7 @@ public boolean supportsResultSetConcurrency(int type, int concurrency)\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public boolean ownInsertsAreVisible(int type) throws SQLException;\n+  boolean ownInsertsAreVisible(int type) throws SQLException;\n \n   /**\n    * This method tests whether or not the specified result set type sees \n@@ -2014,7 +2014,7 @@ public boolean supportsResultSetConcurrency(int type, int concurrency)\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public boolean othersUpdatesAreVisible(int type) throws SQLException;\n+  boolean othersUpdatesAreVisible(int type) throws SQLException;\n \n   /**\n    * This method tests whether or not the specified result set type sees \n@@ -2027,7 +2027,7 @@ public boolean supportsResultSetConcurrency(int type, int concurrency)\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public boolean othersDeletesAreVisible(int type) throws SQLException;\n+  boolean othersDeletesAreVisible(int type) throws SQLException;\n \n   /**\n    * This method tests whether or not the specified result set type sees \n@@ -2040,7 +2040,7 @@ public boolean supportsResultSetConcurrency(int type, int concurrency)\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public boolean othersInsertsAreVisible(int type) throws SQLException;\n+  boolean othersInsertsAreVisible(int type) throws SQLException;\n \n   /**\n    * This method tests whether or not the specified result set type can detect\n@@ -2053,7 +2053,7 @@ public boolean supportsResultSetConcurrency(int type, int concurrency)\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public boolean updatesAreDetected(int type) throws SQLException;\n+  boolean updatesAreDetected(int type) throws SQLException;\n \n   /**\n    * This method tests whether or not the specified result set type can detect\n@@ -2066,7 +2066,7 @@ public boolean supportsResultSetConcurrency(int type, int concurrency)\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public boolean deletesAreDetected(int type) throws SQLException;\n+  boolean deletesAreDetected(int type) throws SQLException;\n   \n   /**\n    * This method tests whether or not the specified result set type can detect\n@@ -2079,7 +2079,7 @@ public boolean supportsResultSetConcurrency(int type, int concurrency)\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public boolean insertsAreDetected(int type) throws SQLException;\n+  boolean insertsAreDetected(int type) throws SQLException;\n \n   /**\n    * This method tests whether or not the database supports batch updates.\n@@ -2088,7 +2088,7 @@ public boolean supportsResultSetConcurrency(int type, int concurrency)\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean supportsBatchUpdates() throws SQLException;\n+  boolean supportsBatchUpdates() throws SQLException;\n \n   /**\n    * This method returns the list of user defined data types in use.  These\n@@ -2116,7 +2116,7 @@ public boolean supportsResultSetConcurrency(int type, int concurrency)\n    * @return A <code>ResultSet</code> with the requested type information\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet getUDTs(String catalog, String schemaPattern, String\n+  ResultSet getUDTs(String catalog, String schemaPattern, String\n       typeNamePattern, int[] types) throws SQLException;\n \n   /**\n@@ -2126,89 +2126,89 @@ public ResultSet getUDTs(String catalog, String schemaPattern, String\n    * @return The connection for this object.\n    * @exception SQLException If an error occurs.\n    */\n-  public Connection getConnection() throws SQLException;\n+  Connection getConnection() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public boolean supportsSavepoints() throws SQLException;\n+  boolean supportsSavepoints() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public boolean supportsNamedParameters() throws SQLException;\n+  boolean supportsNamedParameters() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public boolean supportsMultipleOpenResults() throws SQLException;\n+  boolean supportsMultipleOpenResults() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public boolean supportsGetGeneratedKeys() throws SQLException;\n+  boolean supportsGetGeneratedKeys() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public ResultSet getSuperTypes(String catalog, String schemaPattern,\n+  ResultSet getSuperTypes(String catalog, String schemaPattern,\n     String typeNamePattern) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public ResultSet getSuperTables(String catalog, String schemaPattern,\n+  ResultSet getSuperTables(String catalog, String schemaPattern,\n     String tableNamePattern) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public ResultSet getAttributes(String catalog, String schemaPattern, String\n+  ResultSet getAttributes(String catalog, String schemaPattern, String\n     typeNamePattern, String attributeNamePattern) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public boolean supportsResultSetHoldability(int holdability)\n+  boolean supportsResultSetHoldability(int holdability)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int getResultSetHoldability() throws SQLException;\n+  int getResultSetHoldability() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int getDatabaseMajorVersion() throws SQLException;\n+  int getDatabaseMajorVersion() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int getDatabaseMinorVersion() throws SQLException;\n+  int getDatabaseMinorVersion() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int getJDBCMajorVersion() throws SQLException;\n+  int getJDBCMajorVersion() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int getJDBCMinorVersion() throws SQLException;\n+  int getJDBCMinorVersion() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int getSQLStateType() throws SQLException;\n+  int getSQLStateType() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public boolean locatorsUpdateCopy() throws SQLException;\n+  boolean locatorsUpdateCopy() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public boolean supportsStatementPooling() throws SQLException;\n+  boolean supportsStatementPooling() throws SQLException;\n }"}, {"sha": "ebd0265378af764669d4a230fbebb2826f6b86f0", "filename": "libjava/java/sql/Driver.java", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FDriver.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FDriver.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDriver.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -68,7 +68,7 @@ public interface Driver\n    *         connection, or <code>null</code> if the URL is not understood.\n    * @exception SQLException If an error occurs.\n    */\n-  public Connection connect(String url, Properties info) throws SQLException;\n+  Connection connect(String url, Properties info) throws SQLException;\n \n   /**\n    * This method tests whether or not the driver believes it can connect to\n@@ -81,9 +81,9 @@ public interface Driver\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean acceptsURL(String url) throws SQLException;\n+  boolean acceptsURL(String url) throws SQLException;\n \n-   /**\n+  /**\n    * This method returns an array of possible properties that could be\n    * used to connect to the specified database.\n    *\n@@ -94,22 +94,22 @@ public interface Driver\n    *         database.  This list may be empty.\n    * @exception SQLException If an error occurs.\n    */\n-  public DriverPropertyInfo[] getPropertyInfo(String url, Properties properties)\n+  DriverPropertyInfo[] getPropertyInfo(String url, Properties properties)\n     throws SQLException;\n \n   /**\n    * This method returns the major version number of the driver.\n    *\n    * @return The major version number of the driver.\n    */      \n-  public int getMajorVersion();\n+  int getMajorVersion();\n \n   /**\n    * This method returns the minor version number of the driver.\n    *\n    * @return The minor version number of the driver.\n    */\n-  public int getMinorVersion();\n+  int getMinorVersion();\n \n   /**\n    * This method tests whether or not the driver is JDBC compliant.  This\n@@ -119,5 +119,5 @@ public DriverPropertyInfo[] getPropertyInfo(String url, Properties properties)\n    * @return <code>true</code> if the driver has been certified JDBC compliant,\n    *         <code>false</code> otherwise.\n    */\n-  public boolean jdbcCompliant();\n+  boolean jdbcCompliant();\n }"}, {"sha": "118c76e669d671c99f40a714e51211928976787e", "filename": "libjava/java/sql/ParameterMetaData.java", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FParameterMetaData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FParameterMetaData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FParameterMetaData.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -40,64 +40,64 @@\n /**\n  * @since 1.4\n  */\n-public interface ParameterMetaData \n+interface ParameterMetaData \n {\n-  public static final int parameterNoNulls = 0;\n+  int parameterNoNulls = 0;\n \n-  public static final int parameterNullable = 1;\n+  int parameterNullable = 1;\n \n-  public static final int parameterNullableUnknown = 2;\n+  int parameterNullableUnknown = 2;\n \n-  public static final int parameterModeUnknown = 0;\n+  int parameterModeUnknown = 0;\n \n-  public static final int parameterModeIn = 1;\n+  int parameterModeIn = 1;\n \n-  public static final int parameterModeInOut = 2;\n+  int parameterModeInOut = 2;\n \n-  public static final int parameterModeOut = 4;\n+  int parameterModeOut = 4;\n \n   /**\n    * @since 1.4\n    */\n-  public int getParameterCount() throws SQLException;\n+  int getParameterCount() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int isNullable(int param) throws SQLException;\n+  int isNullable(int param) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public boolean isSigned(int param) throws SQLException;\n+  boolean isSigned(int param) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int getPrecision(int param) throws SQLException;\n+  int getPrecision(int param) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int getScale(int param) throws SQLException;\n+  int getScale(int param) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int getParameterType(int param) throws SQLException;\n+  int getParameterType(int param) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public String getParameterTypeName(int param) throws SQLException;\n+  String getParameterTypeName(int param) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public String getParameterClassName(int param) throws SQLException;\n+  String getParameterClassName(int param) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int getParameterMode(int param) throws SQLException;\n+  int getParameterMode(int param) throws SQLException;\n }"}, {"sha": "3d095e0a6609ff78559767e694089d067144d8b9", "filename": "libjava/java/sql/PreparedStatement.java", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FPreparedStatement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FPreparedStatement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FPreparedStatement.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -51,15 +51,15 @@\n  *\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-public interface PreparedStatement extends Statement \n+interface PreparedStatement extends Statement \n {\n   /**\n    * This method executes a prepared SQL query and returns its ResultSet.\n    *\n    * @return The ResultSet of the SQL statement.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet executeQuery() throws SQLException;\n+  ResultSet executeQuery() throws SQLException;\n \n   /**\n    * This method executes an SQL INSERT, UPDATE or DELETE statement.  SQL\n@@ -69,7 +69,7 @@ public interface PreparedStatement extends Statement\n    *         statements; or 0 for SQL statements that return nothing.\n    * @exception SQLException If an error occurs.\n    */\n-  public int executeUpdate() throws SQLException;\n+  int executeUpdate() throws SQLException;\n \n   /**\n    * This method populates the specified parameter with a SQL NULL value\n@@ -80,7 +80,7 @@ public interface PreparedStatement extends Statement\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void setNull(int parameterIndex, int sqlType) throws SQLException;\n+  void setNull(int parameterIndex, int sqlType) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -90,7 +90,7 @@ public interface PreparedStatement extends Statement\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setBoolean(int parameterIndex, boolean x) throws SQLException;\n+  void setBoolean(int parameterIndex, boolean x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -100,7 +100,7 @@ public interface PreparedStatement extends Statement\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setByte(int parameterIndex, byte x) throws SQLException;\n+  void setByte(int parameterIndex, byte x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -110,7 +110,7 @@ public interface PreparedStatement extends Statement\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setShort(int parameterIndex, short x) throws SQLException;\n+  void setShort(int parameterIndex, short x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -120,7 +120,7 @@ public interface PreparedStatement extends Statement\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setInt(int parameterIndex, int x) throws SQLException;\n+  void setInt(int parameterIndex, int x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -130,7 +130,7 @@ public interface PreparedStatement extends Statement\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setLong(int parameterIndex, long x) throws SQLException;\n+  void setLong(int parameterIndex, long x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -140,7 +140,7 @@ public interface PreparedStatement extends Statement\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setFloat(int parameterIndex, float x) throws SQLException;\n+  void setFloat(int parameterIndex, float x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -150,7 +150,7 @@ public interface PreparedStatement extends Statement\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setDouble(int parameterIndex, double x) throws SQLException;\n+  void setDouble(int parameterIndex, double x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -160,7 +160,7 @@ public interface PreparedStatement extends Statement\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setBigDecimal(int parameterIndex, BigDecimal x) throws\n+  void setBigDecimal(int parameterIndex, BigDecimal x) throws\n       SQLException;\n \n   /**\n@@ -171,7 +171,7 @@ public void setBigDecimal(int parameterIndex, BigDecimal x) throws\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setString(int parameterIndex, String x) throws SQLException;\n+  void setString(int parameterIndex, String x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -181,7 +181,7 @@ public void setBigDecimal(int parameterIndex, BigDecimal x) throws\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setBytes(int parameterIndex, byte[] x) throws SQLException;\n+  void setBytes(int parameterIndex, byte[] x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -191,7 +191,7 @@ public void setBigDecimal(int parameterIndex, BigDecimal x) throws\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setDate(int parameterIndex, Date x) throws SQLException;\n+  void setDate(int parameterIndex, Date x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -201,7 +201,7 @@ public void setBigDecimal(int parameterIndex, BigDecimal x) throws\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setTime(int parameterIndex, Time x) throws SQLException;\n+  void setTime(int parameterIndex, Time x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -211,7 +211,7 @@ public void setBigDecimal(int parameterIndex, BigDecimal x) throws\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setTimestamp(int parameterIndex, Timestamp x)\n+  void setTimestamp(int parameterIndex, Timestamp x)\n     throws SQLException;\n \n   /**\n@@ -223,7 +223,7 @@ public void setTimestamp(int parameterIndex, Timestamp x)\n    * @param length The number of bytes in the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setAsciiStream(int parameterIndex, InputStream x, int length)\n+  void setAsciiStream(int parameterIndex, InputStream x, int length)\n     throws SQLException;\n \n   /**\n@@ -236,7 +236,7 @@ public void setAsciiStream(int parameterIndex, InputStream x, int length)\n    * @exception SQLException If an error occurs.\n    * @deprecated\n    */\n-  public void setUnicodeStream(int parameterIndex, InputStream x, int length)\n+  void setUnicodeStream(int parameterIndex, InputStream x, int length)\n     throws SQLException;\n \n   /**\n@@ -248,7 +248,7 @@ public void setUnicodeStream(int parameterIndex, InputStream x, int length)\n    * @param length The number of bytes in the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setBinaryStream(int parameterIndex, InputStream x, int length)\n+  void setBinaryStream(int parameterIndex, InputStream x, int length)\n     throws SQLException;\n \n   /**\n@@ -257,7 +257,7 @@ public void setBinaryStream(int parameterIndex, InputStream x, int length)\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void clearParameters() throws SQLException;\n+  void clearParameters() throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -270,7 +270,7 @@ public void setBinaryStream(int parameterIndex, InputStream x, int length)\n    * @exception SQLException If an error occurs.\n    * @see Types\n    */\n-  public void setObject(int parameterIndex, Object x, int targetSqlType,\n+  void setObject(int parameterIndex, Object x, int targetSqlType,\n     int scale) throws SQLException;\n \n   /**\n@@ -283,7 +283,7 @@ public void setObject(int parameterIndex, Object x, int targetSqlType,\n    * @exception SQLException If an error occurs.\n    * @see Types\n    */\n-  public void setObject(int parameterIndex, Object x, int targetSqlType)\n+  void setObject(int parameterIndex, Object x, int targetSqlType)\n     throws SQLException;\n \n   /**\n@@ -295,7 +295,7 @@ public void setObject(int parameterIndex, Object x, int targetSqlType)\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setObject(int parameterIndex, Object x) throws SQLException;\n+  void setObject(int parameterIndex, Object x) throws SQLException;\n \n   /**\n    * This method executes a prepared SQL query.\n@@ -306,13 +306,13 @@ public void setObject(int parameterIndex, Object x, int targetSqlType)\n    * @return The result of the SQL statement.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean execute() throws SQLException;\n+  boolean execute() throws SQLException;\n \n   /**\n    * This method adds a set of parameters to the batch for JDBC 2.0.\n    * @exception SQLException If an error occurs.\n    */\n-  public void addBatch() throws SQLException;\n+  void addBatch() throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -323,7 +323,7 @@ public void setObject(int parameterIndex, Object x, int targetSqlType)\n    * @param length The number of bytes in the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setCharacterStream(int parameterIndex, Reader reader,\n+  void setCharacterStream(int parameterIndex, Reader reader,\n     int length) throws SQLException;\n \n   /**\n@@ -335,7 +335,7 @@ public void setCharacterStream(int parameterIndex, Reader reader,\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setRef(int i, Ref x) throws SQLException;\n+  void setRef(int i, Ref x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -346,7 +346,7 @@ public void setCharacterStream(int parameterIndex, Reader reader,\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setBlob(int i, Blob x) throws SQLException;\n+  void setBlob(int i, Blob x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -357,7 +357,7 @@ public void setCharacterStream(int parameterIndex, Reader reader,\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setClob(int i, Clob x) throws SQLException;\n+  void setClob(int i, Clob x) throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -368,15 +368,15 @@ public void setCharacterStream(int parameterIndex, Reader reader,\n    * @param value The value of the parameter.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setArray(int i, Array x) throws SQLException;\n+  void setArray(int i, Array x) throws SQLException;\n \n   /**\n    * This method returns meta data for the result set from this statement.\n    *\n    * @return Meta data for the result set from this statement.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSetMetaData getMetaData() throws SQLException;\n+  ResultSetMetaData getMetaData() throws SQLException;\n \n   /**\n    * This method sets the specified parameter from the given Java\n@@ -387,7 +387,7 @@ public void setCharacterStream(int parameterIndex, Reader reader,\n    * @param calendar The <code>Calendar</code> to use for timezone and locale.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setDate(int parameterIndex, Date x, Calendar cal)\n+  void setDate(int parameterIndex, Date x, Calendar cal)\n     throws SQLException;\n \n   /**\n@@ -399,7 +399,7 @@ public void setDate(int parameterIndex, Date x, Calendar cal)\n    * @param calendar The <code>Calendar</code> to use for timezone and locale.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setTime(int parameterIndex, Time x, Calendar cal)\n+  void setTime(int parameterIndex, Time x, Calendar cal)\n     throws SQLException;\n \n   /**\n@@ -411,7 +411,7 @@ public void setTime(int parameterIndex, Time x, Calendar cal)\n    * @param calendar The <code>Calendar</code> to use for timezone and locale.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)\n+  void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)\n     throws SQLException;\n \n   /**\n@@ -423,16 +423,16 @@ public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)\n    * @param name The name of the data type, for user defined types.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setNull(int paramIndex, int sqlType, String typeName)\n+  void setNull(int paramIndex, int sqlType, String typeName)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setURL(int parameterIndex, URL x) throws SQLException;\n+  void setURL(int parameterIndex, URL x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public ParameterMetaData getParameterMetaData() throws SQLException;\n+  ParameterMetaData getParameterMetaData() throws SQLException;\n }"}, {"sha": "d55abe1fe50c5aae0a23b05bb96635d9077e2d44", "filename": "libjava/java/sql/Ref.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FRef.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FRef.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FRef.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -46,7 +46,7 @@\n  * @author Aaron M. Renn (arenn@urbanophile.com)\n  * @since 1.2\n  */\n-public interface Ref \n+interface Ref \n {\n   /**\n    * This method returns the fully qualified name of the SQL structured\n@@ -56,20 +56,20 @@ public interface Ref\n    * @exception SQLException If an error occurs.\n    * @since 1.2\n    */\n-  public String getBaseTypeName() throws SQLException;\n+  String getBaseTypeName() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Object getObject(Map map) throws SQLException;\n+  Object getObject(Map map) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public Object getObject() throws SQLException;\n+  Object getObject() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void setObject(Object value) throws SQLException;\n+  void setObject(Object value) throws SQLException;\n }"}, {"sha": "46a6c65c3f705627a8b7ef06c9587a707b02c29e", "filename": "libjava/java/sql/ResultSet.java", "status": "modified", "additions": 149, "deletions": 149, "changes": 298, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FResultSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FResultSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FResultSet.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -64,48 +64,48 @@ public interface ResultSet\n   /**\n    * The rows will be processed in order from first to last.\n    */\n-  public static final int FETCH_FORWARD = 1000;\n+  int FETCH_FORWARD = 1000;\n \n   /**\n    * The rows will be processed in order from last to first.\n    */\n-  public static final int FETCH_REVERSE = 1001;\n+  int FETCH_REVERSE = 1001;\n \n   /**\n    * The rows will be processed in an unknown order\n    */\n-  public static final int FETCH_UNKNOWN = 1002;\n+  int FETCH_UNKNOWN = 1002;\n \n   /**\n    * This type of result set may only step forward through the rows returned.\n    */\n-  public static final int TYPE_FORWARD_ONLY = 1003;\n+  int TYPE_FORWARD_ONLY = 1003;\n \n   /**\n    * This type of result set is scrollable and is not sensitive to changes\n    * made by other statements.\n    */\n-  public static final int TYPE_SCROLL_INSENSITIVE = 1004;\n+  int TYPE_SCROLL_INSENSITIVE = 1004;\n \n   /**\n    * This type of result set is scrollable and is also sensitive to changes\n    * made by other statements.\n    */\n-  public static final int TYPE_SCROLL_SENSITIVE = 1005;\n+  int TYPE_SCROLL_SENSITIVE = 1005;\n \n   /**\n    * The concurrency mode of for the result set may not be modified.\n    */\n-  public static final int CONCUR_READ_ONLY = 1007;\n+  int CONCUR_READ_ONLY = 1007;\n \n   /**\n    * The concurrency mode of for the result set may be modified.\n    */\n-  public static final int CONCUR_UPDATABLE = 1008;\n+  int CONCUR_UPDATABLE = 1008;\n \n-  public static final int HOLD_CURSORS_OVER_COMMIT = 1;\n+  int HOLD_CURSORS_OVER_COMMIT = 1;\n \n-  public static final int CLOSE_CURSORS_AT_COMMIT = 2;\n+  int CLOSE_CURSORS_AT_COMMIT = 2;\n \n   /**\n    * This method advances to the next row in the result set.  Any streams\n@@ -115,14 +115,14 @@ public interface ResultSet\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean next() throws SQLException;\n+  boolean next() throws SQLException;\n \n   /**\n    * This method closes the result set and frees any associated resources.\n    * \n    * @exception SQLException If an error occurs.\n    */\n-  public void close() throws SQLException;\n+  void close() throws SQLException;\n \n   /**\n    * This method tests whether the value of the last column that was fetched\n@@ -132,7 +132,7 @@ public interface ResultSet\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean wasNull() throws SQLException;\n+  boolean wasNull() throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -142,7 +142,7 @@ public interface ResultSet\n    * @return The column value as a <code>String</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getString(int columnIndex) throws SQLException;\n+  String getString(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -152,7 +152,7 @@ public interface ResultSet\n    * @return The column value as a <code>boolean</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean getBoolean(int columnIndex) throws SQLException;\n+  boolean getBoolean(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -162,7 +162,7 @@ public interface ResultSet\n    * @return The column value as a <code>byte</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public byte getByte(int columnIndex) throws SQLException;\n+  byte getByte(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -172,7 +172,7 @@ public interface ResultSet\n    * @return The column value as a <code>short</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public short getShort(int columnIndex) throws SQLException;\n+  short getShort(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -182,7 +182,7 @@ public interface ResultSet\n    * @return The column value as a <code>int</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getInt(int columnIndex) throws SQLException;\n+  int getInt(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -192,7 +192,7 @@ public interface ResultSet\n    * @return The column value as a <code>long</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public long getLong(int columnIndex) throws SQLException;\n+  long getLong(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -202,7 +202,7 @@ public interface ResultSet\n    * @return The column value as a <code>float</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public float getFloat(int columnIndex) throws SQLException;\n+  float getFloat(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -212,7 +212,7 @@ public interface ResultSet\n    * @return The column value as a <code>double</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public double getDouble(int columnIndex) throws SQLException;\n+  double getDouble(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -224,7 +224,7 @@ public interface ResultSet\n    * @exception SQLException If an error occurs.\n    * @deprecated\n    */\n-  public BigDecimal getBigDecimal(int columnIndex, int scale)\n+  BigDecimal getBigDecimal(int columnIndex, int scale)\n     throws SQLException;\n \n   /**\n@@ -235,7 +235,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as a byte array\n    * @exception SQLException If an error occurs.\n    */\n-  public byte[] getBytes(int columnIndex) throws SQLException;\n+  byte[] getBytes(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -245,7 +245,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as a <code>java.sql.Date</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Date getDate(int columnIndex) throws SQLException;\n+  Date getDate(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -255,7 +255,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as a <code>java.sql.Time</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Time getTime(int columnIndex) throws SQLException;\n+  Time getTime(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -265,7 +265,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as a <code>java.sql.Timestamp</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Timestamp getTimestamp(int columnIndex) throws SQLException;\n+  Timestamp getTimestamp(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as an ASCII \n@@ -278,7 +278,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as an ASCII <code>InputStream</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public InputStream getAsciiStream(int columnIndex) throws SQLException;\n+  InputStream getAsciiStream(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Unicode UTF-8\n@@ -292,7 +292,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @exception SQLException If an error occurs.\n    * @deprecated Use getCharacterStream instead.\n    */\n-  public InputStream getUnicodeStream(int columnIndex) throws SQLException;\n+  InputStream getUnicodeStream(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a raw byte\n@@ -305,7 +305,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as a raw byte <code>InputStream</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public InputStream getBinaryStream(int columnIndex) throws SQLException;\n+  InputStream getBinaryStream(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -315,7 +315,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as a <code>String</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getString(String columnName) throws SQLException;\n+  String getString(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -325,7 +325,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as a <code>boolean</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean getBoolean(String columnName) throws SQLException;\n+  boolean getBoolean(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -335,7 +335,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as a <code>byte</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public byte getByte(String columnName) throws SQLException;\n+  byte getByte(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -345,7 +345,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as a <code>short</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public short getShort(String columnName) throws SQLException;\n+  short getShort(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -355,7 +355,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as a <code>int</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getInt(String columnName) throws SQLException;\n+  int getInt(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -365,7 +365,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as a <code>long</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public long getLong(String columnName) throws SQLException;\n+  long getLong(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -375,7 +375,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as a <code>float</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public float getFloat(String columnName) throws SQLException;\n+  float getFloat(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -385,7 +385,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @return The column value as a <code>double</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public double getDouble(String columnName) throws SQLException;\n+  double getDouble(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -396,7 +396,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale)\n    * @exception SQLException If an error occurs.\n    * @deprecated\n    */\n-  public BigDecimal getBigDecimal(String columnName, int scale)\n+  BigDecimal getBigDecimal(String columnName, int scale)\n     throws SQLException;\n \n   /**\n@@ -407,7 +407,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The column value as a byte array\n    * @exception SQLException If an error occurs.\n    */\n-  public byte[] getBytes(String columnName) throws SQLException;\n+  byte[] getBytes(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -417,7 +417,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The column value as a <code>java.sql.Date</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Date getDate(String columnName) throws SQLException;\n+  Date getDate(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -427,7 +427,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The column value as a <code>java.sql.Time</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Time getTime(String columnName) throws SQLException;\n+  Time getTime(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -437,7 +437,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The column value as a <code>java.sql.Timestamp</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Timestamp getTimestamp(String columnName) throws SQLException;\n+  Timestamp getTimestamp(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as an ASCII \n@@ -450,7 +450,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The column value as an ASCII <code>InputStream</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public InputStream getAsciiStream(String columnName) throws SQLException;\n+  InputStream getAsciiStream(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Unicode UTF-8\n@@ -464,7 +464,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @exception SQLException If an error occurs.\n    * @deprecated Use getCharacterStream instead.\n    */\n-  public InputStream getUnicodeStream(String columnName) throws SQLException;\n+  InputStream getUnicodeStream(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a raw byte\n@@ -477,7 +477,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The column value as a raw byte <code>InputStream</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public InputStream getBinaryStream(String columnName) throws SQLException;\n+  InputStream getBinaryStream(String columnName) throws SQLException;\n \n   /**\n    * This method returns the first SQL warning associated with this result\n@@ -487,14 +487,14 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    *         there are no warnings.\n    * @exception SQLException If an error occurs.\n    */\n-  public SQLWarning getWarnings() throws SQLException;\n+  SQLWarning getWarnings() throws SQLException;\n \n   /**\n    * This method clears all warnings associated with this result set.\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void clearWarnings() throws SQLException;\n+  void clearWarnings() throws SQLException;\n \n   /**\n    * This method returns the name of the database cursor used by this\n@@ -503,7 +503,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The name of the database cursor used by this result set.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getCursorName() throws SQLException;\n+  String getCursorName() throws SQLException;\n \n   /**\n    * This method returns data about the columns returned as part of the\n@@ -512,7 +512,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The <code>ResultSetMetaData</code> instance for this result set.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSetMetaData getMetaData() throws SQLException;\n+  ResultSetMetaData getMetaData() throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -522,7 +522,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The column value as an <code>Object</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Object getObject(int columnIndex) throws SQLException;\n+  Object getObject(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -532,7 +532,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The column value as an <code>Object</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Object getObject(String columnName) throws SQLException;\n+  Object getObject(String columnName) throws SQLException;\n \n   /**\n    * This method returns the column index of the specified named column.\n@@ -541,7 +541,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The index of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public int findColumn(String columnName) throws SQLException;\n+  int findColumn(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a character\n@@ -554,7 +554,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The column value as an character <code>Reader</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Reader getCharacterStream(int columnIndex) throws SQLException;\n+  Reader getCharacterStream(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a character\n@@ -567,7 +567,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The column value as an character <code>Reader</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Reader getCharacterStream(String columnName) throws SQLException;\n+  Reader getCharacterStream(String columnName) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -577,7 +577,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The column value as a <code>BigDecimal</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public BigDecimal getBigDecimal(int columnIndex) throws SQLException;\n+  BigDecimal getBigDecimal(int columnIndex) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -587,7 +587,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The column value as a <code>BigDecimal</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public BigDecimal getBigDecimal(String columnName) throws SQLException;\n+  BigDecimal getBigDecimal(String columnName) throws SQLException;\n \n   /**\n    * This method tests whether or not the cursor is before the first row\n@@ -597,7 +597,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    *         row, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isBeforeFirst() throws SQLException;\n+  boolean isBeforeFirst() throws SQLException;\n \n   /**\n    * This method tests whether or not the cursor is after the last row\n@@ -607,7 +607,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    *         row, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isAfterLast() throws SQLException;\n+  boolean isAfterLast() throws SQLException;\n \n   /**\n    * This method tests whether or not the cursor is positioned on the first\n@@ -617,7 +617,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    *         row, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isFirst() throws SQLException;\n+  boolean isFirst() throws SQLException;\n \n   /**\n    * This method tests whether or not the cursor is on the last row\n@@ -627,23 +627,23 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    *         row, <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isLast() throws SQLException;\n+  boolean isLast() throws SQLException;\n \n   /**\n    * This method repositions the cursor to before the first row in the\n    * result set.\n    * \n    * @exception SQLException If an error occurs.\n    */\n-  public void beforeFirst() throws SQLException;\n+  void beforeFirst() throws SQLException;\n \n   /**\n    * This method repositions the cursor to after the last row in the result\n    * set.\n    * \n    * @exception SQLException If an error occurs.\n    */\n-  public void afterLast() throws SQLException;\n+  void afterLast() throws SQLException;\n \n   /**\n    * This method repositions the cursor on the first row in the\n@@ -653,7 +653,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    *         <code>false</code> if there are no rows in the result set.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean first() throws SQLException;\n+  boolean first() throws SQLException;\n \n   /**\n    * This method repositions the cursor on the last row in the result\n@@ -663,7 +663,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    *         <code>false</code> if there are no rows in the result set.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean last() throws SQLException;\n+  boolean last() throws SQLException;\n \n   /**\n    * This method returns the current row number in the cursor.  Numbering\n@@ -672,7 +672,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The current row number, or 0 if there is not current row.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getRow() throws SQLException;\n+  int getRow() throws SQLException;\n \n   /**\n    * This method positions the result set to the specified absolute row.\n@@ -686,7 +686,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean absolute(int row) throws SQLException;\n+  boolean absolute(int row) throws SQLException;\n \n   /**\n    * This method moves the result set position relative to the current row.\n@@ -697,7 +697,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean relative(int rows) throws SQLException;\n+  boolean relative(int rows) throws SQLException;\n \n   /**\n    * This method moves the current position to the previous row in the\n@@ -707,7 +707,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean previous() throws SQLException;\n+  boolean previous() throws SQLException;\n \n   /**\n    * This method provides a hint to the driver about which direction the\n@@ -716,15 +716,15 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @param direction The direction in which rows will be processed. (Values?)\n    * @exception SQLException If an error occurs.\n    */\n-  public void setFetchDirection(int direction) throws SQLException;\n+  void setFetchDirection(int direction) throws SQLException;\n \n   /**\n    * This method returns the current fetch direction for this result set.\n    *\n    * @return The fetch direction for this result set.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getFetchDirection() throws SQLException;\n+  int getFetchDirection() throws SQLException;\n \n   /**\n    * This method provides a hint to the driver about how many rows at a\n@@ -733,7 +733,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @param rows The number of rows the driver should fetch per call.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setFetchSize(int rows) throws SQLException;\n+  void setFetchSize(int rows) throws SQLException;\n \n   /**\n    * This method returns the current number of rows that will be fetched \n@@ -742,7 +742,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The current fetch size for this result set.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getFetchSize() throws SQLException;\n+  int getFetchSize() throws SQLException;\n \n   /**\n    * This method returns the result set type of this result set.  This will\n@@ -751,7 +751,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The result set type.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getType() throws SQLException;\n+  int getType() throws SQLException;\n \n   /**\n    * This method returns the concurrency type of this result set.  This will\n@@ -760,7 +760,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return The result set concurrency type.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getConcurrency() throws SQLException;\n+  int getConcurrency() throws SQLException;\n \n   /**\n    * This method tests whether or not the current row in the result set\n@@ -771,7 +771,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean rowUpdated() throws SQLException;\n+  boolean rowUpdated() throws SQLException;\n \n   /**\n    * This method tests whether or not the current row in the result set\n@@ -782,7 +782,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean rowInserted() throws SQLException;\n+  boolean rowInserted() throws SQLException;\n \n   /**\n    * This method tests whether or not the current row in the result set\n@@ -793,7 +793,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean rowDeleted() throws SQLException;\n+  boolean rowDeleted() throws SQLException;\n \n   /**\n    * This method updates the specified column to have a NULL value.  This\n@@ -803,7 +803,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @return index The index of the column to update.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateNull(int columnIndex) throws SQLException;\n+  void updateNull(int columnIndex) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a boolean value.  This\n@@ -814,7 +814,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateBoolean(int columnIndex, boolean x) throws SQLException;\n+  void updateBoolean(int columnIndex, boolean x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a byte value.  This\n@@ -825,7 +825,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateByte(int columnIndex, byte x) throws SQLException;\n+  void updateByte(int columnIndex, byte x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a short value.  This\n@@ -836,7 +836,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateShort(int columnIndex, short x) throws SQLException;\n+  void updateShort(int columnIndex, short x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have an int value.  This\n@@ -847,7 +847,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateInt(int columnIndex, int x) throws SQLException;\n+  void updateInt(int columnIndex, int x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a long value.  This\n@@ -858,7 +858,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateLong(int columnIndex, long x) throws SQLException;\n+  void updateLong(int columnIndex, long x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a float value.  This\n@@ -869,7 +869,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateFloat(int columnIndex, float x) throws SQLException;\n+  void updateFloat(int columnIndex, float x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a double value.  This\n@@ -880,7 +880,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateDouble(int columnIndex, double x) throws SQLException;\n+  void updateDouble(int columnIndex, double x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a BigDecimal value.  This\n@@ -891,7 +891,7 @@ public BigDecimal getBigDecimal(String columnName, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateBigDecimal(int columnIndex, BigDecimal x)\n+  void updateBigDecimal(int columnIndex, BigDecimal x)\n     throws SQLException;\n \n   /**\n@@ -903,7 +903,7 @@ public void updateBigDecimal(int columnIndex, BigDecimal x)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateString(int columnIndex, String x) throws SQLException;\n+  void updateString(int columnIndex, String x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a byte array value.  This\n@@ -914,7 +914,7 @@ public void updateBigDecimal(int columnIndex, BigDecimal x)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateBytes(int columnIndex, byte[] x) throws SQLException;\n+  void updateBytes(int columnIndex, byte[] x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a java.sql.Date value.  This\n@@ -925,7 +925,7 @@ public void updateBigDecimal(int columnIndex, BigDecimal x)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateDate(int columnIndex, Date x) throws SQLException;\n+  void updateDate(int columnIndex, Date x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a java.sql.Time value.  This\n@@ -936,7 +936,7 @@ public void updateBigDecimal(int columnIndex, BigDecimal x)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateTime(int columnIndex, Time x) throws SQLException;\n+  void updateTime(int columnIndex, Time x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a java.sql.Timestamp value.  \n@@ -947,7 +947,7 @@ public void updateBigDecimal(int columnIndex, BigDecimal x)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateTimestamp(int columnIndex, Timestamp x)\n+  void updateTimestamp(int columnIndex, Timestamp x)\n     throws SQLException;\n \n   /**\n@@ -960,7 +960,7 @@ public void updateTimestamp(int columnIndex, Timestamp x)\n    * @param length The length of the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateAsciiStream(int columnIndex, InputStream x, int length)\n+  void updateAsciiStream(int columnIndex, InputStream x, int length)\n     throws SQLException;\n \n   /**\n@@ -973,7 +973,7 @@ public void updateAsciiStream(int columnIndex, InputStream x, int length)\n    * @param length The length of the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateBinaryStream(int columnIndex, InputStream x, int length)\n+  void updateBinaryStream(int columnIndex, InputStream x, int length)\n     throws SQLException;\n \n   /**\n@@ -986,7 +986,7 @@ public void updateBinaryStream(int columnIndex, InputStream x, int length)\n    * @param length The length of the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateCharacterStream(int columnIndex, Reader x, int length)\n+  void updateCharacterStream(int columnIndex, Reader x, int length)\n     throws SQLException;\n \n   /**\n@@ -999,7 +999,7 @@ public void updateCharacterStream(int columnIndex, Reader x, int length)\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateObject(int columnIndex, Object x, int scale)\n+  void updateObject(int columnIndex, Object x, int scale)\n     throws SQLException;\n \n   /**\n@@ -1013,7 +1013,7 @@ public void updateObject(int columnIndex, Object x, int scale)\n    *        for numeric type objects.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateObject(int columnIndex, Object x) throws SQLException;\n+  void updateObject(int columnIndex, Object x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a NULL value.  This\n@@ -1023,7 +1023,7 @@ public void updateObject(int columnIndex, Object x, int scale)\n    * @return name The name of the column to update.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateNull(String columnName) throws SQLException;\n+  void updateNull(String columnName) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a boolean value.  This\n@@ -1034,7 +1034,7 @@ public void updateObject(int columnIndex, Object x, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateBoolean(String columnName, boolean x) throws SQLException;\n+  void updateBoolean(String columnName, boolean x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a byte value.  This\n@@ -1045,7 +1045,7 @@ public void updateObject(int columnIndex, Object x, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateByte(String columnName, byte x) throws SQLException;\n+  void updateByte(String columnName, byte x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a short value.  This\n@@ -1056,7 +1056,7 @@ public void updateObject(int columnIndex, Object x, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateShort(String columnName, short x) throws SQLException;\n+  void updateShort(String columnName, short x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have an int value.  This\n@@ -1067,7 +1067,7 @@ public void updateObject(int columnIndex, Object x, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateInt(String columnName, int x) throws SQLException;\n+  void updateInt(String columnName, int x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a long value.  This\n@@ -1078,7 +1078,7 @@ public void updateObject(int columnIndex, Object x, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateLong(String columnName, long x) throws SQLException;\n+  void updateLong(String columnName, long x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a float value.  This\n@@ -1089,7 +1089,7 @@ public void updateObject(int columnIndex, Object x, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateFloat(String columnName, float x) throws SQLException;\n+  void updateFloat(String columnName, float x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a double value.  This\n@@ -1100,7 +1100,7 @@ public void updateObject(int columnIndex, Object x, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateDouble(String columnName, double x) throws SQLException;\n+  void updateDouble(String columnName, double x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a BigDecimal value.  This\n@@ -1111,7 +1111,7 @@ public void updateObject(int columnIndex, Object x, int scale)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateBigDecimal(String columnName, BigDecimal x)\n+  void updateBigDecimal(String columnName, BigDecimal x)\n     throws SQLException;\n \n   /**\n@@ -1123,7 +1123,7 @@ public void updateBigDecimal(String columnName, BigDecimal x)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateString(String columnName, String x) throws SQLException;\n+  void updateString(String columnName, String x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a byte array value.  This\n@@ -1134,7 +1134,7 @@ public void updateBigDecimal(String columnName, BigDecimal x)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateBytes(String columnName, byte[] x) throws SQLException;\n+  void updateBytes(String columnName, byte[] x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a java.sql.Date value.  This\n@@ -1145,7 +1145,7 @@ public void updateBigDecimal(String columnName, BigDecimal x)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateDate(String columnName, Date x) throws SQLException;\n+  void updateDate(String columnName, Date x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a java.sql.Time value.  This\n@@ -1156,7 +1156,7 @@ public void updateBigDecimal(String columnName, BigDecimal x)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateTime(String columnName, Time x) throws SQLException;\n+  void updateTime(String columnName, Time x) throws SQLException;\n \n   /**\n    * This method updates the specified column to have a java.sql.Timestamp value.  \n@@ -1167,7 +1167,7 @@ public void updateBigDecimal(String columnName, BigDecimal x)\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateTimestamp(String columnName, Timestamp x)\n+  void updateTimestamp(String columnName, Timestamp x)\n     throws SQLException;\n \n   /**\n@@ -1180,7 +1180,7 @@ public void updateTimestamp(String columnName, Timestamp x)\n    * @param length The length of the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateAsciiStream(String columnName, InputStream x, int length)\n+  void updateAsciiStream(String columnName, InputStream x, int length)\n     throws SQLException;\n \n   /**\n@@ -1193,7 +1193,7 @@ public void updateAsciiStream(String columnName, InputStream x, int length)\n    * @param length The length of the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateBinaryStream(String columnName, InputStream x, int length)\n+  void updateBinaryStream(String columnName, InputStream x, int length)\n     throws SQLException;\n \n   /**\n@@ -1207,7 +1207,7 @@ public void updateBinaryStream(String columnName, InputStream x, int length)\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateCharacterStream(String columnName, Reader reader,\n+  void updateCharacterStream(String columnName, Reader reader,\n     int length) throws SQLException;\n \n   /**\n@@ -1219,7 +1219,7 @@ public void updateCharacterStream(String columnName, Reader reader,\n    * @param value The new value of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateObject(String columnName, Object x, int scale)\n+  void updateObject(String columnName, Object x, int scale)\n     throws SQLException;\n \n   /**\n@@ -1233,7 +1233,7 @@ public void updateObject(String columnName, Object x, int scale)\n    *        for numeric type objects.\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateObject(String columnName, Object x) throws SQLException;\n+  void updateObject(String columnName, Object x) throws SQLException;\n \n   /**\n    * This method inserts the current row into the database.  The result set\n@@ -1242,28 +1242,28 @@ public void updateObject(String columnName, Object x, int scale)\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void insertRow() throws SQLException;\n+  void insertRow() throws SQLException;\n \n   /**\n    * This method updates the current row in the database.\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void updateRow() throws SQLException;\n+  void updateRow() throws SQLException;\n \n   /**\n    * This method deletes the current row in the database.\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void deleteRow() throws SQLException;\n+  void deleteRow() throws SQLException;\n \n   /**\n    * This method refreshes the contents of the current row from the database.\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void refreshRow() throws SQLException;\n+  void refreshRow() throws SQLException;\n \n   /**\n    * This method cancels any changes that have been made to a row.  If \n@@ -1272,23 +1272,23 @@ public void updateObject(String columnName, Object x, int scale)\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void cancelRowUpdates() throws SQLException;\n+  void cancelRowUpdates() throws SQLException;\n \n   /**\n    * This method positions the result set to the \"insert row\", which allows\n    * a new row to be inserted into the database from the result set.\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void moveToInsertRow() throws SQLException;\n+  void moveToInsertRow() throws SQLException;\n \n   /**\n    * This method moves the result set position from the insert row back to\n    * the current row that was selected prior to moving to the insert row.\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void moveToCurrentRow() throws SQLException;\n+  void moveToCurrentRow() throws SQLException;\n \n   /**\n    * This method returns a the <code>Statement</code> that was used to\n@@ -1298,7 +1298,7 @@ public void updateObject(String columnName, Object x, int scale)\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public Statement getStatement() throws SQLException;\n+  Statement getStatement() throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -1309,7 +1309,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return The value of the column as an <code>Object</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Object getObject(int i, Map map) throws SQLException;\n+  Object getObject(int i, Map map) throws SQLException;\n \n   /**\n    * This method returns a <code>Ref</code> for the specified column which\n@@ -1319,7 +1319,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return A <code>Ref</code> object for the column\n    * @exception SQLException If an error occurs.\n    */\n-  public Ref getRef(int i) throws SQLException;\n+  Ref getRef(int i) throws SQLException;\n \n   /**\n    * This method returns the specified column value as a BLOB.\n@@ -1328,7 +1328,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return The value of the column as a BLOB.\n    * @exception SQLException If an error occurs.\n    */\n-  public Blob getBlob(int i) throws SQLException;\n+  Blob getBlob(int i) throws SQLException;\n \n   /**\n    * This method returns the specified column value as a CLOB.\n@@ -1337,7 +1337,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return The value of the column as a CLOB.\n    * @exception SQLException If an error occurs.\n    */\n-  public Clob getClob(int i) throws SQLException;\n+  Clob getClob(int i) throws SQLException;\n \n   /**\n    * This method returns the specified column value as an <code>Array</code>.\n@@ -1346,7 +1346,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return The value of the column as an <code>Array</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Array getArray(int i) throws SQLException;\n+  Array getArray(int i) throws SQLException;\n \n   /**\n    * This method returns the value of the specified column as a Java\n@@ -1357,7 +1357,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return The value of the column as an <code>Object</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Object getObject(String colName, Map map) throws SQLException;\n+  Object getObject(String colName, Map map) throws SQLException;\n \n   /**\n    * This method returns a <code>Ref</code> for the specified column which\n@@ -1367,7 +1367,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return A <code>Ref</code> object for the column\n    * @exception SQLException If an error occurs.\n    */\n-  public Ref getRef(String colName) throws SQLException;\n+  Ref getRef(String colName) throws SQLException;\n \n   /**\n    * This method returns the specified column value as a BLOB.\n@@ -1376,7 +1376,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return The value of the column as a BLOB.\n    * @exception SQLException If an error occurs.\n    */\n-  public Blob getBlob(String colName) throws SQLException;\n+  Blob getBlob(String colName) throws SQLException;\n \n   /**\n    * This method returns the specified column value as a CLOB.\n@@ -1385,7 +1385,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return The value of the column as a CLOB.\n    * @exception SQLException If an error occurs.\n    */\n-  public Clob getClob(String colName) throws SQLException;\n+  Clob getClob(String colName) throws SQLException;\n \n   /**\n    * This method returns the specified column value as an <code>Array</code>.\n@@ -1394,7 +1394,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return The value of the column as an <code>Array</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Array getArray(String colName) throws SQLException;\n+  Array getArray(String colName) throws SQLException;\n \n   /**\n    * This method returns the specified column value as a \n@@ -1407,7 +1407,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return The value of the column as a <code>java.sql.Date</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Date getDate(int columnIndex, Calendar cal) throws SQLException;\n+  Date getDate(int columnIndex, Calendar cal) throws SQLException;\n \n   /**\n    * This method returns the specified column value as a \n@@ -1420,7 +1420,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return The value of the column as a <code>java.sql.Date</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Date getDate(String columnName, Calendar cal) throws SQLException;\n+  Date getDate(String columnName, Calendar cal) throws SQLException;\n \n   /**\n    * This method returns the specified column value as a \n@@ -1433,7 +1433,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return The value of the column as a <code>java.sql.Time</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Time getTime(int columnIndex, Calendar cal) throws SQLException;\n+  Time getTime(int columnIndex, Calendar cal) throws SQLException;\n \n   /**\n    * This method returns the specified column value as a \n@@ -1446,7 +1446,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return The value of the column as a <code>java.sql.Time</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Time getTime(String columnName, Calendar cal) throws SQLException;\n+  Time getTime(String columnName, Calendar cal) throws SQLException;\n \n   /**\n    * This method returns the specified column value as a \n@@ -1459,7 +1459,7 @@ public void updateObject(String columnName, Object x, int scale)\n    * @return The value of the column as a <code>java.sql.Timestamp</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Timestamp getTimestamp(int columnIndex, Calendar cal)\n+  Timestamp getTimestamp(int columnIndex, Calendar cal)\n     throws SQLException;\n \n   /**\n@@ -1475,56 +1475,56 @@ public Timestamp getTimestamp(int columnIndex, Calendar cal)\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public Timestamp getTimestamp(String columnName, Calendar cal)\n+  Timestamp getTimestamp(String columnName, Calendar cal)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public URL getURL(int columnIndex) throws SQLException;\n+  URL getURL(int columnIndex) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public URL getURL(String columnName) throws SQLException;\n+  URL getURL(String columnName) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void updateRef(int columnIndex, Ref x) throws SQLException;\n+  void updateRef(int columnIndex, Ref x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void updateRef(String columnName, Ref x) throws SQLException;\n+  void updateRef(String columnName, Ref x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void updateBlob(int columnIndex, Blob x) throws SQLException;\n+  void updateBlob(int columnIndex, Blob x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void updateBlob(String columnName, Blob x) throws SQLException;\n+  void updateBlob(String columnName, Blob x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void updateClob(int columnIndex, Clob x) throws SQLException;\n+  void updateClob(int columnIndex, Clob x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void updateClob(String columnName, Clob x) throws SQLException;\n+  void updateClob(String columnName, Clob x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void updateArray(int columnIndex, Array x) throws SQLException;\n+  void updateArray(int columnIndex, Array x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void updateArray(String columnName, Array x) throws SQLException;\n+  void updateArray(String columnName, Array x) throws SQLException;\n }"}, {"sha": "5cadb00bdd2488d4b395076d046697fd8e6306ab", "filename": "libjava/java/sql/ResultSetMetaData.java", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FResultSetMetaData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FResultSetMetaData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FResultSetMetaData.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -51,25 +51,25 @@ public interface ResultSetMetaData\n   /**\n    * The column does not allow NULL's.\n    */\n-  public static final int columnNoNulls = 0;\n+  int columnNoNulls = 0;\n \n   /**\n    * The column allows NULL's.\n    */\n-  public static final int columnNullable = 1;\n+  int columnNullable = 1;\n \n   /**\n    * It is unknown whether or not the column allows NULL's.\n    */\n-  public static final int columnNullableUnknown = 2;\n+  int columnNullableUnknown = 2;\n \n   /**\n    * This method returns the number of columns in the result set.\n    *\n    * @return The number of columns in the result set.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getColumnCount() throws SQLException;\n+  int getColumnCount() throws SQLException;\n \n   /**\n    * This method test whether or not the column is an auto-increment column.\n@@ -80,7 +80,7 @@ public interface ResultSetMetaData\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isAutoIncrement(int column) throws SQLException;\n+  boolean isAutoIncrement(int column) throws SQLException;\n \n   /**\n    * This method tests whether or not a column is case sensitive in its values.\n@@ -90,7 +90,7 @@ public interface ResultSetMetaData\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isCaseSensitive(int column) throws SQLException;\n+  boolean isCaseSensitive(int column) throws SQLException;\n \n   /**\n    * This method tests whether not the specified column can be used in \n@@ -101,7 +101,7 @@ public interface ResultSetMetaData\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isSearchable(int column) throws SQLException;\n+  boolean isSearchable(int column) throws SQLException;\n \n   /**\n    * This method tests whether or not the column stores a monetary value.\n@@ -111,7 +111,7 @@ public interface ResultSetMetaData\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isCurrency(int column) throws SQLException;\n+  boolean isCurrency(int column) throws SQLException;\n \n   /**\n    * This method returns a value indicating whether or not the specified\n@@ -123,7 +123,7 @@ public interface ResultSetMetaData\n    *         <code>columnNullable</code>, or <code>columnNullableUnknown</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public int isNullable(int column) throws SQLException;\n+  int isNullable(int column) throws SQLException;\n \n   /**\n    * This method tests whether or not the value of the specified column\n@@ -134,7 +134,7 @@ public interface ResultSetMetaData\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isSigned(int column) throws SQLException;\n+  boolean isSigned(int column) throws SQLException;\n \n   /**\n    * This method returns the maximum number of characters that can be used\n@@ -145,7 +145,7 @@ public interface ResultSetMetaData\n    *         value for this column.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getColumnDisplaySize(int column) throws SQLException;\n+  int getColumnDisplaySize(int column) throws SQLException;\n \n   /**\n    * This method returns a string that should be used as a caption for this\n@@ -155,7 +155,7 @@ public interface ResultSetMetaData\n    * @return A display string for the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getColumnLabel(int column) throws SQLException;\n+  String getColumnLabel(int column) throws SQLException;\n \n   /**\n    * This method returns the name of the specified column.\n@@ -164,7 +164,7 @@ public interface ResultSetMetaData\n    * @return The name of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getColumnName(int column) throws SQLException;\n+  String getColumnName(int column) throws SQLException;\n \n   /**\n    * This method returns the name of the schema that contains the specified\n@@ -174,7 +174,7 @@ public interface ResultSetMetaData\n    * @return The name of the schema that contains the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getSchemaName(int column) throws SQLException;\n+  String getSchemaName(int column) throws SQLException;\n \n   /**\n    * This method returns the precision of the specified column, which is the\n@@ -184,7 +184,7 @@ public interface ResultSetMetaData\n    * @return The precision of the specified column.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getPrecision(int column) throws SQLException;\n+  int getPrecision(int column) throws SQLException;\n \n   /**\n    * This method returns the scale of the specified column, which is the\n@@ -194,7 +194,7 @@ public interface ResultSetMetaData\n    * @return The scale of the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getScale(int column) throws SQLException;\n+  int getScale(int column) throws SQLException;\n \n   /**\n    * This method returns the name of the table containing the specified\n@@ -204,7 +204,7 @@ public interface ResultSetMetaData\n    * @return The name of the table containing the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getTableName(int column) throws SQLException;\n+  String getTableName(int column) throws SQLException;\n \n   /**\n    * This method returns the name of the catalog containing the specified\n@@ -214,7 +214,7 @@ public interface ResultSetMetaData\n    * @return The name of the catalog containing the column.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getCatalogName(int column) throws SQLException;\n+  String getCatalogName(int column) throws SQLException;\n \n   /**\n    * This method returns the SQL type of the specified column.  This will\n@@ -225,7 +225,7 @@ public interface ResultSetMetaData\n    * @exception SQLException If an error occurs.\n    * @see Types\n    */\n-  public int getColumnType(int column) throws SQLException;\n+  int getColumnType(int column) throws SQLException;\n \n   /**\n    * This method returns the name of the SQL type for this column.\n@@ -234,7 +234,7 @@ public interface ResultSetMetaData\n    * @return The name of the SQL type for this column.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getColumnTypeName(int column) throws SQLException;\n+  String getColumnTypeName(int column) throws SQLException;\n \n   /**\n    * This method tests whether or not the specified column is read only.\n@@ -244,7 +244,7 @@ public interface ResultSetMetaData\n    *         otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isReadOnly(int column) throws SQLException;\n+  boolean isReadOnly(int column) throws SQLException;\n \n   /**\n    * This method tests whether or not the column may be writable.  This\n@@ -255,7 +255,7 @@ public interface ResultSetMetaData\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isWritable(int column) throws SQLException;\n+  boolean isWritable(int column) throws SQLException;\n \n   /**\n    * This method tests whether or not the column is writable.  This\n@@ -266,7 +266,7 @@ public interface ResultSetMetaData\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean isDefinitelyWritable(int column) throws SQLException;\n+  boolean isDefinitelyWritable(int column) throws SQLException;\n \n   /**\n    * This method returns the name of the Java class which will be used to\n@@ -277,5 +277,5 @@ public interface ResultSetMetaData\n    *         this column.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getColumnClassName(int column) throws SQLException;\n+  String getColumnClassName(int column) throws SQLException;\n }"}, {"sha": "7fa60be12305a4a23f9a3360d1060e4db6e4e3d7", "filename": "libjava/java/sql/SQLData.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FSQLData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FSQLData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLData.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -51,7 +51,7 @@ public interface SQLData\n    * @return The user defined data type name for this object.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getSQLTypeName() throws SQLException;\n+  String getSQLTypeName() throws SQLException;\n \n   /**\n    * This method populates the data in the object from the specified stream.\n@@ -60,13 +60,13 @@ public interface SQLData\n    * @param name The data type name of the data on the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void readSQL(SQLInput stream, String typeName) throws SQLException;\n+  void readSQL(SQLInput stream, String typeName) throws SQLException;\n \n   /**\n    * This method writes the data in this object to the specified stream.\n    *\n    * @param stream The stream to write the data to.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeSQL(SQLOutput stream) throws SQLException;\n+  void writeSQL(SQLOutput stream) throws SQLException;\n }"}, {"sha": "e15ae238412a6b8e7a6698ba0e12c617487bf2d1", "filename": "libjava/java/sql/SQLInput.java", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FSQLInput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FSQLInput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLInput.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -59,7 +59,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>String</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public String readString() throws SQLException;\n+  String readString() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java\n@@ -68,7 +68,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>boolean</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean readBoolean() throws SQLException;\n+  boolean readBoolean() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java\n@@ -77,7 +77,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>byte</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public byte readByte() throws SQLException;\n+  byte readByte() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java\n@@ -86,7 +86,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>short</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public short readShort() throws SQLException;\n+  short readShort() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java\n@@ -95,7 +95,7 @@ public interface SQLInput\n    * @return The value read from the stream as an <code>int</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public int readInt() throws SQLException;\n+  int readInt() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java\n@@ -104,7 +104,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>long</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public long readLong() throws SQLException;\n+  long readLong() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java\n@@ -113,7 +113,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>float</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public float readFloat() throws SQLException;\n+  float readFloat() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java\n@@ -122,7 +122,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>double</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public double readDouble() throws SQLException;\n+  double readDouble() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java\n@@ -131,7 +131,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>BigDecimal</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public BigDecimal readBigDecimal() throws SQLException;\n+  BigDecimal readBigDecimal() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java\n@@ -140,7 +140,7 @@ public interface SQLInput\n    * @return The value read from the stream as a byte array. \n    * @exception SQLException If an error occurs.\n    */\n-  public byte[] readBytes() throws SQLException;\n+  byte[] readBytes() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java\n@@ -149,7 +149,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>java.sql.Date</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Date readDate() throws SQLException;\n+  Date readDate() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java\n@@ -158,7 +158,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>java.sql.Time</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Time readTime() throws SQLException;\n+  Time readTime() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java\n@@ -167,7 +167,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>java.sql.Timestamp</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Timestamp readTimestamp() throws SQLException;\n+  Timestamp readTimestamp() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a character\n@@ -176,7 +176,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>Reader</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Reader readCharacterStream() throws SQLException;\n+  Reader readCharacterStream() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a ASCII text\n@@ -185,7 +185,7 @@ public interface SQLInput\n    * @return The value read from the stream as an <code>InputStream</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public InputStream readAsciiStream() throws SQLException;\n+  InputStream readAsciiStream() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a binary\n@@ -194,7 +194,7 @@ public interface SQLInput\n    * @return The value read from the stream as an <code>InputStream</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public InputStream readBinaryStream() throws SQLException;\n+  InputStream readBinaryStream() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java\n@@ -203,7 +203,7 @@ public interface SQLInput\n    * @return The value read from the stream as an <code>Object</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Object readObject() throws SQLException;\n+  Object readObject() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java SQL\n@@ -212,7 +212,7 @@ public interface SQLInput\n    * @return The value read from the stream as an <code>Ref</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Ref readRef() throws SQLException;\n+  Ref readRef() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java SQL\n@@ -221,7 +221,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>Blob</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Blob readBlob() throws SQLException;\n+  Blob readBlob() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java SQL\n@@ -230,7 +230,7 @@ public interface SQLInput\n    * @return The value read from the stream as a <code>Clob</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Clob readClob() throws SQLException;\n+  Clob readClob() throws SQLException;\n \n   /**\n    * This method reads the next item from the stream a Java SQL\n@@ -239,7 +239,7 @@ public interface SQLInput\n    * @return The value read from the stream as an <code>Array</code>.\n    * @exception SQLException If an error occurs.\n    */\n-  public Array readArray() throws SQLException;\n+  Array readArray() throws SQLException;\n \n   /**\n    * This method tests whether or not the last value read was a SQL\n@@ -249,11 +249,11 @@ public interface SQLInput\n    *         <code>false</code> otherwise.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean wasNull() throws SQLException;\n+  boolean wasNull() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public URL readURL() throws SQLException;\n+  URL readURL() throws SQLException;\n }\n "}, {"sha": "c07ca158d3d32dba2e304ebebb440d7ef0657f4c", "filename": "libjava/java/sql/SQLOutput.java", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FSQLOutput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FSQLOutput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLOutput.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -59,7 +59,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeString(String x) throws SQLException;\n+  void writeString(String x) throws SQLException;\n \n   /**\n    * This method writes the specified Java <code>boolean</code>\n@@ -68,7 +68,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeBoolean(boolean x) throws SQLException;\n+  void writeBoolean(boolean x) throws SQLException;\n \n   /**\n    * This method writes the specified Java <code>byte</code>\n@@ -77,7 +77,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeByte(byte x) throws SQLException;\n+  void writeByte(byte x) throws SQLException;\n \n   /**\n    * This method writes the specified Java <code>short</code>\n@@ -86,7 +86,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeShort(short x) throws SQLException;\n+  void writeShort(short x) throws SQLException;\n \n   /**\n    * This method writes the specified Java <code>int</code>\n@@ -95,7 +95,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeInt(int x) throws SQLException;\n+  void writeInt(int x) throws SQLException;\n \n   /**\n    * This method writes the specified Java <code>long</code>\n@@ -104,7 +104,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeLong(long x) throws SQLException;\n+  void writeLong(long x) throws SQLException;\n \n   /**\n    * This method writes the specified Java <code>float</code>\n@@ -113,7 +113,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeFloat(float x) throws SQLException;\n+  void writeFloat(float x) throws SQLException;\n \n   /**\n    * This method writes the specified Java <code>double</code>\n@@ -122,7 +122,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeDouble(double x) throws SQLException;\n+  void writeDouble(double x) throws SQLException;\n \n   /**\n    * This method writes the specified Java <code>BigDecimal</code>\n@@ -131,7 +131,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeBigDecimal(BigDecimal x) throws SQLException;\n+  void writeBigDecimal(BigDecimal x) throws SQLException;\n \n   /**\n    * This method writes the specified Java <code>byte</code> array\n@@ -140,7 +140,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeBytes(byte[] x) throws SQLException;\n+  void writeBytes(byte[] x) throws SQLException;\n \n   /**\n    * This method writes the specified Java <code>java.sql.Date</code> \n@@ -149,7 +149,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeDate(Date x) throws SQLException;\n+  void writeDate(Date x) throws SQLException;\n \n   /**\n    * This method writes the specified Java <code>java.sql.Time</code> \n@@ -158,7 +158,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeTime(Time x) throws SQLException;\n+  void writeTime(Time x) throws SQLException;\n \n   /**\n    * This method writes the specified Java <code>java.sql.Timestamp</code> \n@@ -167,7 +167,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeTimestamp(Timestamp x) throws SQLException;\n+  void writeTimestamp(Timestamp x) throws SQLException;\n \n   /**\n    * This method writes the specified Java character stream\n@@ -176,7 +176,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeCharacterStream(Reader x) throws SQLException;\n+  void writeCharacterStream(Reader x) throws SQLException;\n \n   /**\n    * This method writes the specified ASCII text stream\n@@ -185,7 +185,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeAsciiStream(InputStream x) throws SQLException;\n+  void writeAsciiStream(InputStream x) throws SQLException;\n \n   /**\n    * This method writes the specified uninterpreted binary byte stream\n@@ -194,7 +194,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeBinaryStream(InputStream x) throws SQLException;\n+  void writeBinaryStream(InputStream x) throws SQLException;\n \n   /**\n    * This method writes the specified Java <code>SQLData</code> object\n@@ -203,7 +203,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeObject(SQLData x) throws SQLException;\n+  void writeObject(SQLData x) throws SQLException;\n \n   /**\n    * This method writes the specified Java SQL <code>Ref</code> object\n@@ -212,7 +212,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeRef(Ref x) throws SQLException;\n+  void writeRef(Ref x) throws SQLException;\n \n   /**\n    * This method writes the specified Java SQL <code>Blob</code> object\n@@ -221,7 +221,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeBlob(Blob x) throws SQLException;\n+  void writeBlob(Blob x) throws SQLException;\n \n   /**\n    * This method writes the specified Java SQL <code>Clob</code> object\n@@ -230,7 +230,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeClob(Clob x) throws SQLException;\n+  void writeClob(Clob x) throws SQLException;\n \n   /**\n    * This method writes the specified Java SQL <code>Struct</code> object\n@@ -239,7 +239,7 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeStruct(Struct x) throws SQLException;\n+  void writeStruct(Struct x) throws SQLException;\n \n   /**\n    * This method writes the specified Java SQL <code>Array</code> object\n@@ -248,10 +248,10 @@ public interface SQLOutput\n    * @param value The value to write to the stream.\n    * @exception SQLException If an error occurs.\n    */\n-  public void writeArray(Array x) throws SQLException;\n+  void writeArray(Array x) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public void writeURL(URL x) throws SQLException;\n+  void writeURL(URL x) throws SQLException;\n }"}, {"sha": "ac3d56001414069214acd6cf7b12705371e86d95", "filename": "libjava/java/sql/Savepoint.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FSavepoint.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FSavepoint.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSavepoint.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -46,10 +46,10 @@ public interface Savepoint\n   /**\n    * @since 1.4\n    */\n-  public int getSavepointId() throws SQLException;\n+  int getSavepointId() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public String getSavepointName() throws SQLException;\n+  String getSavepointName() throws SQLException;\n }"}, {"sha": "1bff06e0822c7397b3d38bfe81a1387460e30de1", "filename": "libjava/java/sql/Statement.java", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FStatement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FStatement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FStatement.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -45,13 +45,13 @@\n  */\n public interface Statement \n {\n-  public static final int CLOSE_CURRENT_RESULT = 1;\n-  public static final int KEEP_CURRENT_RESULT = 2;\n-  public static final int CLOSE_ALL_RESULTS = 3;\n-  public static final int SUCCESS_NO_INFO = -2;\n-  public static final int EXECUTE_FAILED = -3;\n-  public static final int RETURN_GENERATED_KEYS = 1;\n-  public static final int NO_GENERATED_KEYS = 2;\n+  int CLOSE_CURRENT_RESULT = 1;\n+  int KEEP_CURRENT_RESULT = 2;\n+  int CLOSE_ALL_RESULTS = 3;\n+  int SUCCESS_NO_INFO = -2;\n+  int EXECUTE_FAILED = -3;\n+  int RETURN_GENERATED_KEYS = 1;\n+  int NO_GENERATED_KEYS = 2;\n \n   /**\n    * This method executes the specified SQL SELECT statement and returns a\n@@ -61,7 +61,7 @@ public interface Statement\n    * @return The result set of the SQL statement.\n    * @exception SQLException If an error occurs.\n    */\n-  public ResultSet executeQuery(String sql) throws SQLException;\n+  ResultSet executeQuery(String sql) throws SQLException;\n \n   /**\n    * This method executes the specified SQL INSERT, UPDATE, or DELETE statement\n@@ -71,38 +71,38 @@ public interface Statement\n    * @return The number of rows affected by the SQL statement.\n    * @exception SQLException If an error occurs.\n    */\n-  public int executeUpdate(String sql) throws SQLException;\n+  int executeUpdate(String sql) throws SQLException;\n \n   /**\n    * This method closes the statement and frees any associated resources.\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void close() throws SQLException;\n+  void close() throws SQLException;\n \n   /**\n    * This method returns the maximum length of any column value in bytes.\n    *\n    * @return The maximum length of any column value in bytes.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxFieldSize() throws SQLException;\n+  int getMaxFieldSize() throws SQLException;\n \n   /**\n    * This method sets the limit for the maximum length of any column in bytes.\n    *\n    * @param maxsize The new maximum length of any column in bytes.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setMaxFieldSize(int max) throws SQLException;\n+  void setMaxFieldSize(int max) throws SQLException;\n \n   /**\n    * This method returns the maximum possible number of rows in a result set.\n    *\n    * @return The maximum possible number of rows in a result set.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getMaxRows() throws SQLException;\n+  int getMaxRows() throws SQLException;\n \n   /**\n    * This method sets the maximum number of rows that can be present in a\n@@ -111,7 +111,7 @@ public interface Statement\n    * @param maxrows The maximum possible number of rows in a result set.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setMaxRows(int max) throws SQLException;\n+  void setMaxRows(int max) throws SQLException;\n \n   /**\n    * This method sets the local escape processing mode on or off.  The\n@@ -121,7 +121,7 @@ public interface Statement\n    *        <code>false</code> to disable it.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setEscapeProcessing(boolean enable) throws SQLException;\n+  void setEscapeProcessing(boolean enable) throws SQLException;\n \n   /**\n    * The method returns the number of seconds a statement may be in process\n@@ -130,7 +130,7 @@ public interface Statement\n    * @return The SQL statement timeout in seconds.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getQueryTimeout() throws SQLException;\n+  int getQueryTimeout() throws SQLException;\n \n   /**\n    * This method sets the number of seconds a statement may be in process\n@@ -139,15 +139,15 @@ public interface Statement\n    * @param timeout The new SQL statement timeout value.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setQueryTimeout(int seconds) throws SQLException;\n+  void setQueryTimeout(int seconds) throws SQLException;\n \n   /**\n    * This method cancels an outstanding statement, if the database supports\n    * that operation.\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void cancel() throws SQLException;\n+  void cancel() throws SQLException;\n \n   /**\n    * This method returns the first SQL warning attached to this statement.\n@@ -156,23 +156,23 @@ public interface Statement\n    * @return The first SQL warning for this statement.\n    * @exception SQLException If an error occurs.\n    */\n-  public SQLWarning getWarnings() throws SQLException;\n+  SQLWarning getWarnings() throws SQLException;\n \n   /**\n    * This method clears any SQL warnings that have been attached to this\n    * statement.\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void clearWarnings() throws SQLException;\n+  void clearWarnings() throws SQLException;\n \n   /**\n    * This method sets the cursor name that will be used by the result set.\n    *\n    * @param name The cursor name to use for this statement.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setCursorName(String name) throws SQLException;\n+  void setCursorName(String name) throws SQLException;\n \n   /**\n    * This method executes an arbitrary SQL statement of any time.  The\n@@ -183,7 +183,7 @@ public interface Statement\n    *         if an update count was returned.\n    * @exception SQLException If an error occurs.\n    */\n-  public boolean execute(String sql) throws SQLException;\n+  boolean execute(String sql) throws SQLException;\n \n   /**\n    * This method returns the result set of the SQL statement that was\n@@ -194,7 +194,7 @@ public interface Statement\n    * @exception SQLException If an error occurs.\n    * @see execute\n    */\n-  public ResultSet getResultSet() throws SQLException;\n+  ResultSet getResultSet() throws SQLException;\n \n   /**\n    * This method returns the update count of the SQL statement that was\n@@ -205,7 +205,7 @@ public interface Statement\n    * @exception SQLException If an error occurs.\n    * @see execute\n    */\n-  public int getUpdateCount() throws SQLException;\n+  int getUpdateCount() throws SQLException;\n \n   /**\n    * This method advances the result set pointer to the next result set, \n@@ -217,7 +217,7 @@ public interface Statement\n    * @exception SQLException If an error occurs.\n    * @see execute\n    */\n-  public boolean getMoreResults() throws SQLException;\n+  boolean getMoreResults() throws SQLException;\n \n   /**\n    * This method informs the driver which direction the result set will\n@@ -226,7 +226,7 @@ public interface Statement\n    * @param direction The direction the result set will be accessed in (?????)\n    * @exception SQLException If an error occurs.\n    */\n-  public void setFetchDirection(int direction) throws SQLException;\n+  void setFetchDirection(int direction) throws SQLException;\n \n   /**\n    * This method returns the current direction that the driver thinks the\n@@ -235,7 +235,7 @@ public interface Statement\n    * @return The direction the result set will be accessed in (????)\n    * @exception SQLException If an error occurs.\n    */\n-  public int getFetchDirection() throws SQLException;\n+  int getFetchDirection() throws SQLException;\n \n   /**\n    * This method informs the driver how many rows it should fetch from the\n@@ -245,7 +245,7 @@ public interface Statement\n    *        to populate the result set.\n    * @exception SQLException If an error occurs.\n    */\n-  public void setFetchSize(int rows) throws SQLException;\n+  void setFetchSize(int rows) throws SQLException;\n \n   /**\n    * This method returns the number of rows the driver believes should be\n@@ -254,7 +254,7 @@ public interface Statement\n    * @return The number of rows that will be fetched from the database at a time.\n    * @exception SQLException If an error occurs.\n    */\n-  public int getFetchSize() throws SQLException;\n+  int getFetchSize() throws SQLException;\n \n   /**\n    * This method returns the concurrency type of the result set for this\n@@ -265,7 +265,7 @@ public interface Statement\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public int getResultSetConcurrency() throws SQLException;\n+  int getResultSetConcurrency() throws SQLException;\n \n   /**\n    * This method returns the result set type for this statement.  This will\n@@ -275,7 +275,7 @@ public interface Statement\n    * @exception SQLException If an error occurs.\n    * @see ResultSet\n    */\n-  public int getResultSetType() throws SQLException;\n+  int getResultSetType() throws SQLException;\n \n   /**\n    * This method adds a SQL statement to a SQL batch.  A driver is not\n@@ -284,15 +284,15 @@ public interface Statement\n    * @param sql The sql statement to add to the batch.\n    * @exception SQLException If an error occurs.\n    */\n-  public void addBatch(String sql) throws SQLException;\n+  void addBatch(String sql) throws SQLException;\n \n   /**\n    * This method clears out any SQL statements that have been populated in\n    * the current batch.  A driver is not required to implement this method.\n    *\n    * @exception SQLException If an error occurs.\n    */\n-  public void clearBatch() throws SQLException;\n+  void clearBatch() throws SQLException;\n \n   /**\n    * This method executes the SQL batch and returns an array of update\n@@ -303,7 +303,7 @@ public interface Statement\n    * @return An array of update counts for this batch.\n    * @exception SQLException If an error occurs.\n    */\n-  public int[] executeBatch() throws SQLException;\n+  int[] executeBatch() throws SQLException;\n \n   /**\n    * This method returns the <code>Connection</code> instance that was\n@@ -312,55 +312,55 @@ public interface Statement\n    * @return The connection used to create this object.\n    * @exception SQLException If an error occurs.\n    */\n-  public Connection getConnection() throws SQLException;\n+  Connection getConnection() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public boolean getMoreResults(int current) throws SQLException;\n+  boolean getMoreResults(int current) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public ResultSet getGeneratedKeys() throws SQLException;\n+  ResultSet getGeneratedKeys() throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int executeUpdate(String sql, int autoGeneratedKeys)\n+  int executeUpdate(String sql, int autoGeneratedKeys)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int executeUpdate(String sql, int[] columnIndexes)\n+  int executeUpdate(String sql, int[] columnIndexes)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int executeUpdate(String sql, String[] columnNames)\n+  int executeUpdate(String sql, String[] columnNames)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public boolean execute(String sql, int autoGeneratedKeys)\n+  boolean execute(String sql, int autoGeneratedKeys)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public boolean execute(String sql, int[] columnIndexes) throws SQLException;\n+  boolean execute(String sql, int[] columnIndexes) throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public boolean execute(String sql, String[] columnNames)\n+  boolean execute(String sql, String[] columnNames)\n     throws SQLException;\n \n   /**\n    * @since 1.4\n    */\n-  public int getResultSetHoldability() throws SQLException;\n+  int getResultSetHoldability() throws SQLException;\n }"}, {"sha": "861d7049e3bab52e7f417815c4f79dabbccb816a", "filename": "libjava/java/sql/Struct.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FStruct.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6016980a9d8d8672042d53f926972a0af49c7/libjava%2Fjava%2Fsql%2FStruct.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FStruct.java?ref=afe6016980a9d8d8672042d53f926972a0af49c7", "patch": "@@ -55,15 +55,15 @@ public interface Struct\n    * @return The SQL structured type name.\n    * @exception SQLException If an error occurs.\n    */\n-  public String getSQLTypeName() throws SQLException;\n+  String getSQLTypeName() throws SQLException;\n \n   /**\n    * This method returns the attributes of this SQL structured type.\n    *\n    * @return The attributes of this structure type.\n    * @exception SQLException If an error occurs.\n    */\n-  public Object[] getAttributes() throws SQLException;\n+  Object[] getAttributes() throws SQLException;\n \n   /**\n    * This method returns the attributes of this SQL structured type.\n@@ -73,5 +73,5 @@ public interface Struct\n    * @return The attributes of this structure type.\n    * @exception SQLException If a error occurs.\n    */\n-  public Object[] getAttributes(Map map) throws SQLException;\n+  Object[] getAttributes(Map map) throws SQLException;\n }"}]}