{"sha": "a42cc1f883f7a4aabd7f29e2fb842a51a213e37d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQyY2MxZjg4M2Y3YTRhYWJkN2YyOWUyZmI4NDJhNTFhMjEzZTM3ZA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-05-25T14:07:48Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-05-25T14:07:48Z"}, "message": "BRIG FE testsuite: Fix dump scan patterns in packed.hsail test\n\nStarting with r11-165-eb72dc663e9 which converted DECL_GIMPLE_REG_P to\nDECL_NOT_GIMPLE_REG_P we have failing BRIG testcase:\n\n-PASS: packed.hsail.brig scan-tree-dump gimple \"_[0-9]+ = q2 \\\\+ q3;\"\n-PASS: packed.hsail.brig scan-tree-dump gimple \"= VEC_PERM_EXPR <new_output.[0-9]+_[0-9]+, [a-z0-9_]+, { 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }>;\"\n+FAIL: packed.hsail.brig scan-tree-dump gimple \"_[0-9]+ = q2 \\\\+ q3;\"\n+FAIL: packed.hsail.brig scan-tree-dump gimple \"= VEC_PERM_EXPR <new_output.[0-9]+_[0-9]+, [a-z0-9_]+, { 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }>;\"\n\nbecause the gimplifier is now smarter and generates nicer code, which\nhowever, does not match the regexp in the testsuite:\n\n--- before/packed.hsail.brig.005t.gimple        2020-05-12 17:59:26.434305513 +0200\n+++ after/packed.hsail.brig.005t.gimple 2020-05-12 17:52:34.477055987 +0200\n@@ -109,277 +109,267 @@\n   q2 = q1 + _24;\n   _25 = VEC_PERM_EXPR <q1, q1, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }>;\n   q3 = q2 + _25;\n-  _26 = q2 + q3;\n-  new_output.11 = _26;\n-  new_output.21_27 = new_output.11;\n-  _28 = VEC_PERM_EXPR <new_output.21_27, q4, { 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }>;\n-  s_output.12 = _28;\n+  new_output.11 = q2 + q3;\n+  s_output.12 = VEC_PERM_EXPR <new_output.11, q4, { 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }>;\n   q4 = s_output.12;\n\nI have looked at the SSA dump and verified that the variable in\nquestion is a gimple register because it gets its SSA name.  I have\nnot looked into why the gimplifier previously though it had to go\nthrough the additional temporaries though.\n\nTested with make -k check-brig.\n\n\t* brig.dg/test/gimple/packed.hsail: Fix scan dump patterns.", "tree": {"sha": "8f350994a08db8ca8788cac3421657ef97a24b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f350994a08db8ca8788cac3421657ef97a24b6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a42cc1f883f7a4aabd7f29e2fb842a51a213e37d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42cc1f883f7a4aabd7f29e2fb842a51a213e37d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a42cc1f883f7a4aabd7f29e2fb842a51a213e37d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a42cc1f883f7a4aabd7f29e2fb842a51a213e37d/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc0c0196340f7ac58b10d0042d7cea776d6f7864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc0c0196340f7ac58b10d0042d7cea776d6f7864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc0c0196340f7ac58b10d0042d7cea776d6f7864"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "58521437e2d4abe37e174c4b49e49e790b1c995d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42cc1f883f7a4aabd7f29e2fb842a51a213e37d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42cc1f883f7a4aabd7f29e2fb842a51a213e37d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a42cc1f883f7a4aabd7f29e2fb842a51a213e37d", "patch": "@@ -1,3 +1,7 @@\n+2020-05-25  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* brig.dg/test/gimple/packed.hsail: Fix scan dump patterns.\n+\n 2020-05-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/95308"}, {"sha": "1e2bb53de0d5ee0f19b4cecd7f4bc2b2df56091b", "filename": "gcc/testsuite/brig.dg/test/gimple/packed.hsail", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a42cc1f883f7a4aabd7f29e2fb842a51a213e37d/gcc%2Ftestsuite%2Fbrig.dg%2Ftest%2Fgimple%2Fpacked.hsail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a42cc1f883f7a4aabd7f29e2fb842a51a213e37d/gcc%2Ftestsuite%2Fbrig.dg%2Ftest%2Fgimple%2Fpacked.hsail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fbrig.dg%2Ftest%2Fgimple%2Fpacked.hsail?ref=a42cc1f883f7a4aabd7f29e2fb842a51a213e37d", "patch": "@@ -61,10 +61,10 @@ prog kernel &Kernel(kernarg_u64 %input_ptr, kernarg_u64 %output_ptr)\n /* For the add_ss we assume performing the computation over the whole vector is cheaper than */\n /* extracting the scalar and performing a scalar operation. This aims to stay in the vector\n /* datapath as long as possible. */\n-/* { dg-final { scan-tree-dump \"_\\[0-9\\]+ = q2 \\\\\\+ q3;\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"new_output.\\[0-9\\]+ = q2 \\\\\\+ q3;\" \"gimple\" } } */\n \n /* Insert the lowest element of the result to the lowest element of the result register. */\n-/* { dg-final { scan-tree-dump \"= VEC_PERM_EXPR <new_output.\\[0-9\\]+_\\[0-9\\]+, \\[a-z0-9_\\]+, { 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }>;\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"= VEC_PERM_EXPR <new_output.\\[0-9\\]+, \\[a-z0-9_\\]+, { 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 }>;\" \"gimple\" } } */\n \n /* FIXME */\n /* { dg-final { scan-tree-dump \"q4 = \\(VIEW_CONVERT_EXPR<uint128_t>\\\\\\()?s_output.\\[0-9\\]+\\(_\\[0-9\\]+\\)*\\\\\\)?;\" \"gimple\" } } */"}]}