{"sha": "52249a2e3f3d67b8a86ad232428005c449b77a3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIyNDlhMmUzZjNkNjdiOGE4NmFkMjMyNDI4MDA1YzQ0OWI3N2EzZQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-03-24T14:19:55Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-03-24T14:19:55Z"}, "message": "diagnostic.c (diagnostic_count_diagnostic): Delete.\n\n2008-03-24  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\t* diagnostic.c (diagnostic_count_diagnostic): Delete.\n\t(diagnostic_report_diagnostic): Update. Handle ICEs here.\n\nFrom-SVN: r133478", "tree": {"sha": "8075ebd2cd698493f7945fb23861bd30957abc62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8075ebd2cd698493f7945fb23861bd30957abc62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52249a2e3f3d67b8a86ad232428005c449b77a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52249a2e3f3d67b8a86ad232428005c449b77a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52249a2e3f3d67b8a86ad232428005c449b77a3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52249a2e3f3d67b8a86ad232428005c449b77a3e/comments", "author": null, "committer": null, "parents": [{"sha": "37ca4602e62349bcd982429df91853a4b9f81b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ca4602e62349bcd982429df91853a4b9f81b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37ca4602e62349bcd982429df91853a4b9f81b3b"}], "stats": {"total": 113, "additions": 44, "deletions": 69}, "files": [{"sha": "fd9ef6023656f73d54bc049856f0972618793a3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52249a2e3f3d67b8a86ad232428005c449b77a3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52249a2e3f3d67b8a86ad232428005c449b77a3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52249a2e3f3d67b8a86ad232428005c449b77a3e", "patch": "@@ -1,3 +1,8 @@\n+2008-03-24  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* diagnostic.c (diagnostic_count_diagnostic): Delete.\n+\t(diagnostic_report_diagnostic): Update. Handle ICEs here.\n+\t\n 2008-03-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gthr-vxworks.h (UNUSED): Define."}, {"sha": "5a6aaee914d2b532aa0bef2bee6ea2b7da3635e8", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 39, "deletions": 69, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52249a2e3f3d67b8a86ad232428005c449b77a3e/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52249a2e3f3d67b8a86ad232428005c449b77a3e/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=52249a2e3f3d67b8a86ad232428005c449b77a3e", "patch": "@@ -51,8 +51,7 @@ static void default_diagnostic_finalizer (diagnostic_context *,\n \t\t\t\t\t  diagnostic_info *);\n \n static void error_recursion (diagnostic_context *) ATTRIBUTE_NORETURN;\n-static bool diagnostic_count_diagnostic (diagnostic_context *,\n-\t\t\t\t\t diagnostic_info *);\n+\n static void diagnostic_action_after_output (diagnostic_context *,\n \t\t\t\t\t    diagnostic_info *);\n static void real_abort (void) ATTRIBUTE_NORETURN;\n@@ -162,54 +161,6 @@ diagnostic_build_prefix (diagnostic_info *diagnostic)\n      : build_message_string (\"%s:%d: %s\", s.file, s.line, text));\n }\n \n-/* Count a diagnostic.  Return true if the message should be printed.  */\n-static bool\n-diagnostic_count_diagnostic (diagnostic_context *context,\n-\t\t\t     diagnostic_info *diagnostic)\n-{\n-  diagnostic_t kind = diagnostic->kind;\n-  switch (kind)\n-    {\n-    default:\n-      gcc_unreachable ();\n-\n-    case DK_ICE:\n-#ifndef ENABLE_CHECKING\n-      /* When not checking, ICEs are converted to fatal errors when an\n-\t error has already occurred.  This is counteracted by\n-\t abort_on_error.  */\n-      if ((diagnostic_kind_count (context, DK_ERROR) > 0\n-\t   || diagnostic_kind_count (context, DK_SORRY) > 0)\n-\t  && !context->abort_on_error)\n-\t{\n-\t  expanded_location s = expand_location (diagnostic->location);\n-\t  fnotice (stderr, \"%s:%d: confused by earlier errors, bailing out\\n\",\n-\t\t   s.file, s.line);\n-\t  exit (ICE_EXIT_CODE);\n-\t}\n-#endif\n-      if (context->internal_error)\n-\t(*context->internal_error) (diagnostic->message.format_spec,\n-\t\t\t\t    diagnostic->message.args_ptr);\n-      /* Fall through.  */\n-\n-    case DK_FATAL: case DK_SORRY:\n-    case DK_ANACHRONISM: case DK_NOTE:\n-      ++diagnostic_kind_count (context, kind);\n-      break;\n-\n-    case DK_WARNING:\n-      ++diagnostic_kind_count (context, DK_WARNING);\n-      break;\n-\n-    case DK_ERROR:\n-      ++diagnostic_kind_count (context, DK_ERROR);\n-      break;\n-    }\n-\n-  return true;\n-}\n-\n /* Take any action which is expected to happen after the diagnostic\n    is written out.  This function does not always return.  */\n static void\n@@ -349,6 +300,7 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \t\t\t      diagnostic_info *diagnostic)\n {\n   bool maybe_print_warnings_as_errors_message = false;\n+  const char *saved_format_spec;\n \n   /* Give preference to being able to inhibit warnings, before they\n      get reclassified to something else.  */\n@@ -409,27 +361,45 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \n   context->lock++;\n \n-  if (diagnostic_count_diagnostic (context, diagnostic))\n+  if (diagnostic->kind == DK_ICE) \n     {\n-      const char *saved_format_spec = diagnostic->message.format_spec;\n-\n-      if (context->show_option_requested && diagnostic->option_index)\n-\tdiagnostic->message.format_spec\n-\t  = ACONCAT ((diagnostic->message.format_spec,\n-\t\t      \" [\", cl_options[diagnostic->option_index].opt_text, \"]\", NULL));\n-\n-      diagnostic->message.locus = &diagnostic->location;\n-      diagnostic->message.abstract_origin = &diagnostic->abstract_origin;\n-      diagnostic->abstract_origin = NULL;\n-      pp_format (context->printer, &diagnostic->message);\n-      (*diagnostic_starter (context)) (context, diagnostic);\n-      pp_output_formatted_text (context->printer);\n-      (*diagnostic_finalizer (context)) (context, diagnostic);\n-      pp_flush (context->printer);\n-      diagnostic_action_after_output (context, diagnostic);\n-      diagnostic->message.format_spec = saved_format_spec;\n-      diagnostic->abstract_origin = NULL;\n+#ifndef ENABLE_CHECKING\n+      /* When not checking, ICEs are converted to fatal errors when an\n+\t error has already occurred.  This is counteracted by\n+\t abort_on_error.  */\n+      if ((diagnostic_kind_count (context, DK_ERROR) > 0\n+\t   || diagnostic_kind_count (context, DK_SORRY) > 0)\n+\t  && !context->abort_on_error)\n+\t{\n+\t  expanded_location s = expand_location (diagnostic->location);\n+\t  fnotice (stderr, \"%s:%d: confused by earlier errors, bailing out\\n\",\n+\t\t   s.file, s.line);\n+\t  exit (ICE_EXIT_CODE);\n+\t}\n+#endif\n+      if (context->internal_error)\n+\t(*context->internal_error) (diagnostic->message.format_spec,\n+\t\t\t\t    diagnostic->message.args_ptr);\n     }\n+  ++diagnostic_kind_count (context, diagnostic->kind);\n+  \n+  saved_format_spec = diagnostic->message.format_spec;\n+  if (context->show_option_requested && diagnostic->option_index)\n+    diagnostic->message.format_spec\n+      = ACONCAT ((diagnostic->message.format_spec,\n+                  \" [\", cl_options[diagnostic->option_index].opt_text, \"]\", NULL));\n+  \n+  diagnostic->message.locus = &diagnostic->location;\n+  diagnostic->message.abstract_origin = &diagnostic->abstract_origin;\n+  diagnostic->abstract_origin = NULL;\n+  pp_format (context->printer, &diagnostic->message);\n+  (*diagnostic_starter (context)) (context, diagnostic);\n+  pp_output_formatted_text (context->printer);\n+  (*diagnostic_finalizer (context)) (context, diagnostic);\n+  pp_flush (context->printer);\n+  diagnostic_action_after_output (context, diagnostic);\n+  diagnostic->message.format_spec = saved_format_spec;\n+  diagnostic->abstract_origin = NULL;\n \n   context->lock--;\n }"}]}