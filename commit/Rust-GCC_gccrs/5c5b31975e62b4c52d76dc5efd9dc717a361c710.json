{"sha": "5c5b31975e62b4c52d76dc5efd9dc717a361c710", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM1YjMxOTc1ZTYyYjRjNTJkNzZkYzVlZmQ5ZGM3MTdhMzYxYzcxMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-07T14:21:55Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-04-07T14:21:55Z"}, "message": "vect: Don't split store groups if we have IFN_STORE_LANES [PR99873]\n\nAs noted in the PR, we were no longer using ST3 for the testcase and\ninstead stored each lane individually.  This is because we'd split\nthe store group during SLP and couldn't recover when SLP failed.\n\nHowever, we can also get better code with ST3 and ST4 even if SLP would\nhave succeeded, such as for vect-complex-5.c.  I'm not sure exactly\nwhere the cut-off point is, but it seems reasonable to allow the split\nif either of the new groups would operate on full vectors *within*\nrather than across scalar loop iterations.\n\nE.g. on a Cortex-A57, pr99873_3.c performs better using ST4 while\npr99873_2.c performs better with SLP.\n\nAnother factor is that SLP can handle smaller iteration counts than\nIFN_STORE_LANES can, but we don't have the infrastructure to choose\nreliably based on that.\n\ngcc/\n\tPR tree-optimization/99873\n\t* tree-vect-slp.c (vect_slp_prefer_store_lanes_p): New function.\n\t(vect_build_slp_instance): Don't split store groups that could\n\tuse IFN_STORE_LANES.\n\ngcc/testsuite/\n\t* gcc.dg/vect/slp-21.c: Only expect 2 of the loops to use SLP\n\tif IFN_STORE_LANES is available.\n\t* gcc.dg/vect/vect-complex-5.c: Expect no loops to use SLP if\n\tIFN_STORE_LANES is available.\n\t* gcc.target/aarch64/pr99873_1.c: New test.\n\t* gcc.target/aarch64/pr99873_2.c: Likewise.\n\t* gcc.target/aarch64/pr99873_3.c: Likewise.\n\t* gcc.target/aarch64/sve/pr99873_1.c: Likewise.\n\t* gcc.target/aarch64/sve/pr99873_2.c: Likewise.\n\t* gcc.target/aarch64/sve/pr99873_3.c: Likewise.", "tree": {"sha": "3c565ac2ef249b42fa35e020bcdf0abaab253556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c565ac2ef249b42fa35e020bcdf0abaab253556"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c5b31975e62b4c52d76dc5efd9dc717a361c710", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5b31975e62b4c52d76dc5efd9dc717a361c710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c5b31975e62b4c52d76dc5efd9dc717a361c710", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5b31975e62b4c52d76dc5efd9dc717a361c710/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b51321bc5193b65b308a26663fc02f786ba6cc89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b51321bc5193b65b308a26663fc02f786ba6cc89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b51321bc5193b65b308a26663fc02f786ba6cc89"}], "stats": {"total": 146, "additions": 142, "deletions": 4}, "files": [{"sha": "85393975b45fab12a87f23ebe33e513c9e4db027", "filename": "gcc/testsuite/gcc.dg/vect/slp-21.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-21.c?ref=5c5b31975e62b4c52d76dc5efd9dc717a361c710", "patch": "@@ -210,7 +210,7 @@ int main (void)\n \n    Not all vect_perm targets support that, and it's a bit too specific to have\n    its own effective-target selector, so we just test targets directly.  */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" { target { aarch64*-*-* arm*-*-* powerpc64*-*-* } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target { vect_strided4 && { ! { aarch64*-*-* arm*-*-* powerpc64*-*-* } } } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" { target powerpc64*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target { vect_strided4 && { ! powerpc64*-*-* } } } } } */\n /* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\"  { target { ! { vect_strided4 } } } } } */\n   "}, {"sha": "addcf60438cd85a311532be3aa24915e25302ddd", "filename": "gcc/testsuite/gcc.dg/vect/vect-complex-5.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-complex-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-complex-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-complex-5.c?ref=5c5b31975e62b4c52d76dc5efd9dc717a361c710", "patch": "@@ -40,4 +40,5 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { xfail { ! vect_hw_misalign } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 0 \"vect\" { target vect_load_lanes } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\" { target { ! vect_load_lanes } xfail { ! vect_hw_misalign } } } } */"}, {"sha": "bc4d81e3ae50ef83d16c69dcae6bcd3d48ac0e5b", "filename": "gcc/testsuite/gcc.target/aarch64/pr99873_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99873_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99873_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99873_1.c?ref=5c5b31975e62b4c52d76dc5efd9dc717a361c710", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-options \"-O3\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+void\n+f (int *restrict x, int *restrict y, int *restrict z, int n)\n+{\n+  for (int i = 0; i < n; i += 3)\n+    {\n+      x[i] = y[i] + z[i];\n+      x[i + 1] = y[i + 1] - z[i + 1];\n+      x[i + 2] = y[i + 2] | z[i + 2];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld3\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3\\t} 1 } } */"}, {"sha": "b73fbdc0a18989a15a4c59b142271fb55e7b2eaa", "filename": "gcc/testsuite/gcc.target/aarch64/pr99873_2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99873_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99873_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99873_2.c?ref=5c5b31975e62b4c52d76dc5efd9dc717a361c710", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+#pragma GCC target \"+nosve\"\n+\n+void __attribute ((noipa))\n+foo (uint64_t *__restrict x, uint64_t *__restrict y, int n)\n+{\n+  for (int i = 0; i < n; i += 4)\n+    {\n+      x[i] += y[i];\n+      x[i + 1] += y[i + 1];\n+      x[i + 2] |= y[i + 2];\n+      x[i + 3] |= y[i + 3];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tld4\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tst4\\t} } } */"}, {"sha": "ccbab6d74be626346033f94aa71dbf4511d61b7c", "filename": "gcc/testsuite/gcc.target/aarch64/pr99873_3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99873_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99873_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr99873_3.c?ref=5c5b31975e62b4c52d76dc5efd9dc717a361c710", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+#pragma GCC target \"+nosve\"\n+\n+void __attribute ((noipa))\n+foo (uint32_t *__restrict x, uint32_t *__restrict y, int n)\n+{\n+  for (int i = 0; i < n; i += 4)\n+    {\n+      x[i] += y[i];\n+      x[i + 1] += y[i + 1];\n+      x[i + 2] |= y[i + 2];\n+      x[i + 3] |= y[i + 3];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld4\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4\\t} 1 } } */"}, {"sha": "f4b95da2afa282ba29922dbfa4246e895f2ef0a3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr99873_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99873_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99873_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99873_1.c?ref=5c5b31975e62b4c52d76dc5efd9dc717a361c710", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-O3\" } */\n+\n+void\n+f (int *restrict x, int *restrict y, int *restrict z, int n)\n+{\n+  for (int i = 0; i < n; i += 3)\n+    {\n+      x[i] = y[i] + z[i];\n+      x[i + 1] = y[i + 1] - z[i + 1];\n+      x[i + 2] = y[i + 2] | z[i + 2];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld3w\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3w\\t} 1 } } */"}, {"sha": "03dc4ef930d14fa89e9679a1e417eaffd8c3871c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr99873_2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99873_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99873_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99873_2.c?ref=5c5b31975e62b4c52d76dc5efd9dc717a361c710", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+void __attribute ((noipa))\n+foo (uint64_t *__restrict x, uint64_t *__restrict y, int n)\n+{\n+  for (int i = 0; i < n; i += 4)\n+    {\n+      x[i] += y[i];\n+      x[i + 1] += y[i + 1];\n+      x[i + 2] |= y[i + 2];\n+      x[i + 3] |= y[i + 3];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld4d\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4d\\t} 1 } } */"}, {"sha": "87a0141e5082edfa761bf94b4d008e880013d26c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr99873_3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99873_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99873_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr99873_3.c?ref=5c5b31975e62b4c52d76dc5efd9dc717a361c710", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+void __attribute ((noipa))\n+foo (uint32_t *__restrict x, uint32_t *__restrict y, int n)\n+{\n+  for (int i = 0; i < n; i += 4)\n+    {\n+      x[i] += y[i];\n+      x[i + 1] += y[i + 1];\n+      x[i + 2] |= y[i + 2];\n+      x[i + 3] |= y[i + 3];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tld4w\\t} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4w\\t} 1 } } */"}, {"sha": "7d5f9d10ca47fb8258b959f239c5a98c14c69f3a", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b31975e62b4c52d76dc5efd9dc717a361c710/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=5c5b31975e62b4c52d76dc5efd9dc717a361c710", "patch": "@@ -2458,6 +2458,34 @@ vect_match_slp_patterns (slp_instance instance, vec_info *vinfo,\n   return vect_match_slp_patterns_2 (ref_node, vinfo, perm_cache, visited);\n }\n \n+/* STMT_INFO is a store group of size GROUP_SIZE that we are considering\n+   splitting into two, with the first split group having size NEW_GROUP_SIZE.\n+   Return true if we could use IFN_STORE_LANES instead and if that appears\n+   to be the better approach.  */\n+\n+static bool\n+vect_slp_prefer_store_lanes_p (vec_info *vinfo, stmt_vec_info stmt_info,\n+\t\t\t       unsigned int group_size,\n+\t\t\t       unsigned int new_group_size)\n+{\n+  tree scalar_type = TREE_TYPE (DR_REF (STMT_VINFO_DATA_REF (stmt_info)));\n+  tree vectype = get_vectype_for_scalar_type (vinfo, scalar_type);\n+  if (!vectype)\n+    return false;\n+  /* Allow the split if one of the two new groups would operate on full\n+     vectors *within* rather than across one scalar loop iteration.\n+     This is purely a heuristic, but it should work well for group\n+     sizes of 3 and 4, where the possible splits are:\n+\n+       3->2+1:  OK if the vector has exactly two elements\n+       4->2+2:  Likewise\n+       4->3+1:  Less clear-cut.  */\n+  if (multiple_p (group_size - new_group_size, TYPE_VECTOR_SUBPARTS (vectype))\n+      || multiple_p (new_group_size, TYPE_VECTOR_SUBPARTS (vectype)))\n+    return false;\n+  return vect_store_lanes_supported (vectype, group_size, false);\n+}\n+\n /* Analyze an SLP instance starting from a group of grouped stores.  Call\n    vect_build_slp_tree to build a tree of packed stmts if possible.\n    Return FALSE if it's impossible to SLP any stmt in the loop.  */\n@@ -2693,7 +2721,8 @@ vect_build_slp_instance (vec_info *vinfo,\n \n       /* For loop vectorization split into arbitrary pieces of size > 1.  */\n       if (is_a <loop_vec_info> (vinfo)\n-\t  && (i > 1 && i < group_size))\n+\t  && (i > 1 && i < group_size)\n+\t  && !vect_slp_prefer_store_lanes_p (vinfo, stmt_info, group_size, i))\n \t{\n \t  unsigned group1_size = i;\n "}]}