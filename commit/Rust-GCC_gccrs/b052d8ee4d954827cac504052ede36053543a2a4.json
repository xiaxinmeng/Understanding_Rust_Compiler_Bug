{"sha": "b052d8ee4d954827cac504052ede36053543a2a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA1MmQ4ZWU0ZDk1NDgyN2NhYzUwNDA1MmVkZTM2MDUzNTQzYTJhNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-02-26T03:02:14Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-02-26T03:02:14Z"}, "message": "builtins.def (DEF_LIB_ALWAYS_BUILTIN, [...]): Delete.\n\n\n\t* builtins.def (DEF_LIB_ALWAYS_BUILTIN, DEF_UNUSED_BUILTIN): Delete.\n\t(abs, labs, fabs, fabsf, fabsl, abort, exit, _exit, _Exit):  Use\n\tthe appropriate macro to define built-in function.\n\t(fmod,fmodf,fmodl): New built-in functions.\n\n\t* java/decl.c (java_init_decl_processing): Get soft_fmod_node from\n\tbuilt_in_decls[BUILT_IN_FMOD] rather than define it ourselves.\n\n\t* doc/extend.texi (fmod,fmodf,fmodl): Document new built-ins.\n\nFrom-SVN: r63445", "tree": {"sha": "62a6d7eda515c0ef561243d4759cd9642e58e72f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62a6d7eda515c0ef561243d4759cd9642e58e72f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b052d8ee4d954827cac504052ede36053543a2a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b052d8ee4d954827cac504052ede36053543a2a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b052d8ee4d954827cac504052ede36053543a2a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b052d8ee4d954827cac504052ede36053543a2a4/comments", "author": null, "committer": null, "parents": [{"sha": "8d4540089a757d0f1860f2169937c95c77b6388b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4540089a757d0f1860f2169937c95c77b6388b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d4540089a757d0f1860f2169937c95c77b6388b"}], "stats": {"total": 223, "additions": 106, "deletions": 117}, "files": [{"sha": "8d0407b5e1dc8b2cf1dda3308fc7c8911b005613", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b052d8ee4d954827cac504052ede36053543a2a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b052d8ee4d954827cac504052ede36053543a2a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b052d8ee4d954827cac504052ede36053543a2a4", "patch": "@@ -1,3 +1,12 @@\n+2003-02-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.def (DEF_LIB_ALWAYS_BUILTIN, DEF_UNUSED_BUILTIN): Delete.\n+\t(abs, labs, fabs, fabsf, fabsl, abort, exit, _exit, _Exit):  Use\n+\tthe appropriate macro to define built-in function.\n+\t(fmod,fmodf,fmodl): New built-in functions.\n+\n+\t* doc/extend.texi (fmod,fmodf,fmodl): Document new built-ins.\n+\n 2003-02-25  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (function_arg): Pass variable sized"}, {"sha": "ae7d640f581aed8199c57007a6c41388726adf42", "filename": "gcc/builtins.def", "status": "modified", "additions": 56, "deletions": 71, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b052d8ee4d954827cac504052ede36053543a2a4/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b052d8ee4d954827cac504052ede36053543a2a4/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=b052d8ee4d954827cac504052ede36053543a2a4", "patch": "@@ -99,13 +99,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n \t       true, true, false, ATTRS, true)\n \n-/* Like DEF_LIB_BUILTIN, except that a call to the builtin should\n-   never fall back to the library version.  */\n-#undef DEF_LIB_ALWAYS_BUILTIN\t\t\t\t\n-#define DEF_LIB_ALWAYS_BUILTIN(ENUM, NAME, TYPE)\t\\\n-  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n-    \t       true, false, true, ATTR_CONST_NOTHROW_LIST, true)\n-\n /* Like DEF_LIB_BUILTIN, except that the function is not one that is\n    specified by ANSI/ISO C.  So, when we're being fully conformant we\n    ignore the version of these builtins that does not begin with\n@@ -146,12 +139,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n   DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,\t\\\n \t       true, true, true, ATTRS, true)\n \n-/* A built-in that is not currently used.  */\n-#undef DEF_UNUSED_BUILTIN\t\t\t\t\t\n-#define DEF_UNUSED_BUILTIN(X)\t\t\t\t\t\\\n-  DEF_BUILTIN (X, (const char *) NULL, NOT_BUILT_IN, BT_LAST,\t\\\n-\t       BT_LAST, false, false, false, ATTR_NOTHROW_LIST, false)\n-\n /* If SMALL_STACK is defined, then `alloca' is only defined in its\n    `__builtin' form.  */\n #if SMALL_STACK  \n@@ -166,22 +153,27 @@ DEF_EXT_LIB_BUILTIN(BUILT_IN_ALLOCA,\n \t\t    ATTR_MALLOC_NOTHROW_LIST)\n #endif\n \n-DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_ABS,\n-\t\t       \"__builtin_abs\",\n-\t\t       BT_FN_INT_INT)\n-DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_LABS,\n-\t\t       \"__builtin_labs\",\n-\t\t       BT_FN_LONG_LONG)\n-\n-DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_FABS,\n-\t\t       \"__builtin_fabs\",\n-\t\t       BT_FN_DOUBLE_DOUBLE)\n-DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_FABSF,\n+DEF_LIB_BUILTIN(BUILT_IN_ABS,\n+\t\t\"__builtin_abs\",\n+\t\tBT_FN_INT_INT,\n+\t\tATTR_CONST_NOTHROW_LIST)\n+DEF_LIB_BUILTIN(BUILT_IN_LABS,\n+\t\t\"__builtin_labs\",\n+\t\tBT_FN_LONG_LONG,\n+\t\tATTR_CONST_NOTHROW_LIST)\n+\n+DEF_LIB_BUILTIN(BUILT_IN_FABS,\n+\t\t\"__builtin_fabs\",\n+\t\tBT_FN_DOUBLE_DOUBLE,\n+\t\tATTR_CONST_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_FABSF,\n \t\t       \"__builtin_fabsf\",\n-\t\t       BT_FN_FLOAT_FLOAT)\n-DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_FABSL,\n+\t\t       BT_FN_FLOAT_FLOAT,\n+\t\t       ATTR_CONST_NOTHROW_LIST)\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_FABSL,\n \t\t       \"__builtin_fabsl\",\n-\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE)\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t       ATTR_CONST_NOTHROW_LIST)\n \n DEF_LIB_BUILTIN(BUILT_IN_FLOOR,\n                 \"__builtin_floor\",\n@@ -293,13 +285,6 @@ DEF_C99_BUILTIN(BUILT_IN_CIMAGL,\n \t\tBT_FN_LONG_DOUBLE_COMPLEX_LONG_DOUBLE,\n \t\tATTR_CONST_NOTHROW_LIST)\n \n-DEF_UNUSED_BUILTIN(BUILT_IN_DIV)\n-DEF_UNUSED_BUILTIN(BUILT_IN_LDIV)\n-DEF_UNUSED_BUILTIN(BUILT_IN_FFLOOR)\n-DEF_UNUSED_BUILTIN(BUILT_IN_FCEIL)\n-DEF_UNUSED_BUILTIN(BUILT_IN_FMOD)\n-DEF_UNUSED_BUILTIN(BUILT_IN_FREM)\n-\n /* The system prototypes for `bzero' and `bcmp' functions have many\n    variations, so don't specify parameters to avoid conflicts.  The\n    expand_* functions check the argument types anyway.  */\n@@ -501,6 +486,13 @@ DEF_LIB_BUILTIN(BUILT_IN_ATAN2,\n \t\t\t\t: (flag_unsafe_math_optimizations\n \t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n+DEF_LIB_BUILTIN(BUILT_IN_FMOD,\n+\t\t\"__builtin_fmod\",\n+\t\tBT_FN_DOUBLE_DOUBLE_DOUBLE,\n+\t\tflag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t: (flag_unsafe_math_optimizations\n+\t\t\t\t   ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t   : ATTR_PURE_NOTHROW_LIST))\n DEF_C99_C90RES_BUILTIN(BUILT_IN_SQRTF,\n \t\t       \"__builtin_sqrtf\",\n \t\t       BT_FN_FLOAT_FLOAT,\n@@ -546,6 +538,13 @@ DEF_C99_C90RES_BUILTIN(BUILT_IN_ATAN2F,\n \t\t\t\t       : (flag_unsafe_math_optimizations\n \t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_FMODF,\n+\t\t       \"__builtin_fmodf\",\n+\t\t       BT_FN_FLOAT_FLOAT_FLOAT,\n+\t\t       flag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t       : (flag_unsafe_math_optimizations\n+\t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n DEF_C99_C90RES_BUILTIN(BUILT_IN_SQRTL,\n \t\t       \"__builtin_sqrtl\",\n \t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE,\n@@ -591,6 +590,13 @@ DEF_C99_C90RES_BUILTIN(BUILT_IN_ATAN2L,\n \t\t\t\t       : (flag_unsafe_math_optimizations\n \t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n \t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n+DEF_C99_C90RES_BUILTIN(BUILT_IN_FMODL,\n+\t\t       \"__builtin_fmodl\",\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE_LONG_DOUBLE,\n+\t\t       flag_errno_math ? ATTR_NOTHROW_LIST\n+\t\t\t\t       : (flag_unsafe_math_optimizations\n+\t\t\t\t\t  ? ATTR_CONST_NOTHROW_LIST\n+\t\t\t\t\t  : ATTR_PURE_NOTHROW_LIST))\n \n DEF_GCC_BUILTIN(BUILT_IN_INF,\n \t\t\"__builtin_inf\",\n@@ -857,42 +863,21 @@ DEF_GCC_BUILTIN(BUILT_IN_EXPECT,\n \t\tBT_FN_LONG_LONG_LONG,\n \t\tATTR_NULL)\n \n-/* C++ extensions */\n-DEF_UNUSED_BUILTIN(BUILT_IN_NEW)\n-DEF_UNUSED_BUILTIN(BUILT_IN_VEC_NEW)\n-DEF_UNUSED_BUILTIN(BUILT_IN_DELETE)\n-DEF_UNUSED_BUILTIN(BUILT_IN_VEC_DELETE)\n-\n /* Declare abort, exit, _exit and _Exit */\n-DEF_BUILTIN (BUILT_IN_ABORT,\n-\t     \"__builtin_abort\",\n-\t     NOT_BUILT_IN,\n-\t     BT_FN_VOID,\n-\t     BT_FN_VOID,\n-\t     1, 0, 0,\n-\t     ATTR_NORETURN_NOTHROW_LIST, true)\n-\n-DEF_BUILTIN (BUILT_IN_EXIT,\n-\t     \"__builtin_exit\",\n-\t     NOT_BUILT_IN,\n-\t     BT_FN_VOID_INT,\n-\t     BT_FN_VOID_INT,\n-\t     1, 0, 0,\n-\t     ATTR_NORETURN_NOTHROW_LIST, true)\n-\n-DEF_BUILTIN (BUILT_IN__EXIT,\n-\t     \"__builtin__exit\",\n-\t     NOT_BUILT_IN,\n-\t     BT_FN_VOID_INT,\n-\t     BT_FN_VOID_INT,\n-\t     1, 0, 1,\n-\t     ATTR_NORETURN_NOTHROW_LIST, false)\n-\n-DEF_BUILTIN (BUILT_IN__EXIT2,\n-\t     \"__builtin__Exit\",\n-\t     NOT_BUILT_IN,\n-\t     BT_FN_VOID_INT,\n-\t     BT_FN_VOID_INT,\n-\t     1, 0, !flag_isoc99,\n-\t     ATTR_NORETURN_NOTHROW_LIST, false)\n+DEF_LIB_BUILTIN(BUILT_IN_ABORT,\n+\t\t \"__builtin_abort\",\n+\t\tBT_FN_VOID,\n+\t\tATTR_NORETURN_NOTHROW_LIST)\n+DEF_LIB_BUILTIN(BUILT_IN_EXIT,\n+\t\t\"__builtin_exit\",\n+\t\tBT_FN_VOID_INT,\n+\t\tATTR_NORETURN_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN(BUILT_IN__EXIT,\n+\t\t    \"__builtin__exit\",\n+\t\t    BT_FN_VOID_INT,\n+\t\t    ATTR_NORETURN_NOTHROW_LIST)\n+DEF_C99_BUILTIN(BUILT_IN__EXIT2,\n+\t\t\"__builtin__Exit\",\n+\t\tBT_FN_VOID_INT,\n+\t\tATTR_NORETURN_NOTHROW_LIST)\n "}, {"sha": "e148c2f046c01ac2aa3824c8c6d855555152b5f9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b052d8ee4d954827cac504052ede36053543a2a4/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b052d8ee4d954827cac504052ede36053543a2a4/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b052d8ee4d954827cac504052ede36053543a2a4", "patch": "@@ -1,4 +1,5 @@\n-@c Copyright (C) 1988,1989,1992,1993,1994,1996,1998,1999,2000,2001,2002,2003 Free Software Foundation, Inc.\n+@c Copyright (C) 1988,1989,1992,1993,1994,1996,1998,1999,2000,2001,2002,\n+@c 2003 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -4537,6 +4538,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex atan2l\n @findex bcmp\n @findex bzero\n+@findex ceil\n+@findex ceilf\n+@findex ceill\n @findex cimag\n @findex cimagf\n @findex cimagl\n@@ -4559,6 +4563,12 @@ v4si f (v4si a, v4si b, v4si c)\n @findex fabsf\n @findex fabsl\n @findex ffs\n+@findex floor\n+@findex floorf\n+@findex floorl\n+@findex fmod\n+@findex fmodf\n+@findex fmodl\n @findex fprintf\n @findex fprintf_unlocked\n @findex fputs\n@@ -4573,12 +4583,18 @@ v4si f (v4si a, v4si b, v4si c)\n @findex memcmp\n @findex memcpy\n @findex memset\n+@findex nearbyint\n+@findex nearbyintf\n+@findex nearbyintl\n @findex pow\n @findex powf\n @findex powl\n @findex printf\n @findex printf_unlocked\n @findex rindex\n+@findex round\n+@findex roundf\n+@findex roundl\n @findex sin\n @findex sinf\n @findex sinl\n@@ -4598,21 +4614,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex strrchr\n @findex strspn\n @findex strstr\n-@findex floor\n-@findex floorf\n-@findex floorl\n-@findex ceil\n-@findex ceilf\n-@findex ceill\n-@findex round\n-@findex roundf\n-@findex roundl\n @findex trunc\n @findex truncf\n @findex truncl\n-@findex nearbyint\n-@findex nearbyintf\n-@findex nearbyintl\n \n GCC provides a large number of built-in functions other than the ones\n mentioned above.  Some of these are for internal use in the processing\n@@ -4633,39 +4637,36 @@ be emitted.\n \n @opindex ansi\n @opindex std\n-The functions @code{abort}, @code{exit}, @code{_Exit} and @code{_exit}\n-are recognized and presumed not to return, but otherwise are not built\n-in.  @code{_exit} is not recognized in strict ISO C mode (@option{-ansi},\n-@option{-std=c89} or @option{-std=c99}).  @code{_Exit} is not recognized in\n-strict C89 mode (@option{-ansi} or @option{-std=c89}).  All these functions\n-have corresponding versions prefixed with @code{__builtin_}, which may be\n-used even in strict C89 mode.\n-\n-Outside strict ISO C mode, the functions @code{alloca}, @code{bcmp},\n-@code{bzero}, @code{index}, @code{rindex}, @code{ffs}, @code{fputs_unlocked},\n-@code{printf_unlocked} and @code{fprintf_unlocked} may be handled as\n-built-in functions.  All these functions have corresponding versions\n+Outside strict ISO C mode (@option{-ansi}, @option{-std=c89} or\n+@option{-std=c99}), the functions @code{alloca}, @code{bcmp},\n+@code{bzero}, @code{_exit}, @code{ffs}, @code{fprintf_unlocked},\n+@code{fputs_unlocked}, @code{index}, @code{printf_unlocked},\n+and @code{rindex} may be handled as built-in functions.\n+All these functions have corresponding versions\n prefixed with @code{__builtin_}, which may be used even in strict C89\n mode.\n \n The ISO C99 functions @code{conj}, @code{conjf}, @code{conjl}, @code{creal},\n @code{crealf}, @code{creall}, @code{cimag}, @code{cimagf}, @code{cimagl},\n+@code{_Exit},\n @code{llabs}, @code{imaxabs}, @code{round}, @code{roundf}, @code{roundl},\n @code{trunc}, @code{truncf}, @code{truncl}, @code{nearbyint},\n @code{nearbyintf} and @code{nearbyintl} are handled as built-in functions\n-except in strict ISO C90 mode.\n+except in strict ISO C90 mode (@option{-ansi} or @option{-std=c89}).\n \n There are also built-in versions of the ISO C99 functions @code{atan2f},\n @code{atan2l}, @code{ceilf}, @code{ceill}, @code{cosf}, @code{cosl},\n @code{expf}, @code{expl}, @code{fabsf}, @code{fabsl}, @code{floorf},\n-@code{floorl}, @code{logf}, @code{logl}, @code{powf}, @code{powl},\n+@code{floorl}, @code{fmodf}, @code{fmodl},\n+@code{logf}, @code{logl}, @code{powf}, @code{powl},\n @code{sinf}, @code{sinl}, @code{sqrtf} and @code{sqrtl}\n that are recognized in any mode since ISO C90 reserves these names for\n the purpose to which ISO C99 puts them.  All these functions have\n corresponding versions prefixed with @code{__builtin_}.\n \n-The ISO C90 functions @code{abs}, @code{atan2}, @code{ceil}, @code{cos},\n-@code{exp}, @code{fabs}, @code{floor},\n+The ISO C90 functions @code{abort}, @code{abs}, @code{atan2}, @code{ceil},\n+@code{cos}, @code{exit},\n+@code{exp}, @code{fabs}, @code{floor}, @code{fmod},\n @code{fprintf}, @code{fputs}, @code{labs}, @code{log},\n @code{memcmp}, @code{memcpy}, @code{memset}, @code{pow}, @code{printf},\n @code{sin}, @code{sqrt}, @code{strcat}, @code{strchr}, @code{strcmp},"}, {"sha": "35460f5c7fc60ba170da48e875246e2fe7c743a6", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b052d8ee4d954827cac504052ede36053543a2a4/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b052d8ee4d954827cac504052ede36053543a2a4/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=b052d8ee4d954827cac504052ede36053543a2a4", "patch": "@@ -1,3 +1,8 @@\n+2003-02-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* java/decl.c (java_init_decl_processing): Get soft_fmod_node from\n+\tbuilt_in_decls[BUILT_IN_FMOD] rather than define it ourselves.\n+ \n 2003-02-23  Tom Tromey  <tromey@redhat.com>\n \n \t* lang-options.h: Added -Wdeprecated."}, {"sha": "70d6e5980f919671f341cf779eb412e8218efb47", "filename": "gcc/java/decl.c", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b052d8ee4d954827cac504052ede36053543a2a4/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b052d8ee4d954827cac504052ede36053543a2a4/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=b052d8ee4d954827cac504052ede36053543a2a4", "patch": "@@ -885,22 +885,6 @@ java_init_decl_processing (void)\n \t\t\tbuild_function_type (ptr_type_node, t),\n \t\t\t0, NOT_BUILT_IN, NULL, NULL_TREE);\n \n-  t = tree_cons (NULL_TREE, double_type_node,\n-\t\t tree_cons (NULL_TREE, double_type_node, endlink));\n-  soft_fmod_node\n-    = builtin_function (\"__builtin_fmod\",\n-\t\t\tbuild_function_type (double_type_node, t),\n-\t\t\tBUILT_IN_FMOD, BUILT_IN_NORMAL, \"fmod\", NULL_TREE);\n-\n-#if 0\n-  t = tree_cons (NULL_TREE, float_type_node,\n-\t\t tree_cons (NULL_TREE, float_type_node, endlink));\n-  soft_fmodf_node\n-    = builtin_function (\"__builtin_fmodf\",\n-\t\t\tbuild_function_type (float_type_node, t),\n-\t\t\tBUILT_IN_FMOD, BUILT_IN_NORMAL, \"fmodf\", NULL_TREE);\n-#endif\n-    \n   soft_idiv_node\n     = builtin_function (\"_Jv_divI\",\n \t\t\tbuild_function_type (int_type_node, t),\n@@ -928,8 +912,13 @@ java_init_decl_processing (void)\n   lang_eh_runtime_type = prepare_eh_table_type;\n \n   init_jcf_parse ();\n-\n+    \n   initialize_builtins ();\n+\n+  soft_fmod_node = built_in_decls[BUILT_IN_FMOD];\n+#if 0\n+  soft_fmodf_node = built_in_decls[BUILT_IN_FMODF];\n+#endif\n }\n \n "}]}