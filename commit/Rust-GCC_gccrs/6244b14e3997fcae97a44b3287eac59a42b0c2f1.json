{"sha": "6244b14e3997fcae97a44b3287eac59a42b0c2f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI0NGIxNGUzOTk3ZmNhZTk3YTQ0YjMyODdlYWM1OWE0MmIwYzJmMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-07-04T21:42:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-07-04T21:42:28Z"}, "message": "sparc.c (SIBCALL_SLOT_EMPTY_P): Rename into LEAF_SIBCALL_SLOT_RESERVED_P after negation.\n\n\t* config/sparc/sparc.c (SIBCALL_SLOT_EMPTY_P): Rename\n\tinto LEAF_SIBCALL_SLOT_RESERVED_P after negation.\n\t(eligible_for_sibcall_delay): Adjust use of SIBCALL_SLOT_EMPTY_P.\n\t(output_restore): Change parameter from 'insn' to 'pat'.\n\t(output_return): Adjust call to output_restore.\n\t(output_sibcall): Adjust use of SIBCALL_SLOT_EMPTY_P.\n\tAdjust call to output_restore.\n\nFrom-SVN: r84097", "tree": {"sha": "14bd65e2aee3887709a162554c477c6874e7b3d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14bd65e2aee3887709a162554c477c6874e7b3d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6244b14e3997fcae97a44b3287eac59a42b0c2f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6244b14e3997fcae97a44b3287eac59a42b0c2f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6244b14e3997fcae97a44b3287eac59a42b0c2f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6244b14e3997fcae97a44b3287eac59a42b0c2f1/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0188c2183ac76a92e8095dcb7736c7877942cf5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0188c2183ac76a92e8095dcb7736c7877942cf5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0188c2183ac76a92e8095dcb7736c7877942cf5b"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "665d5f12e096b9c930e1bbe04381415e1f5643bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6244b14e3997fcae97a44b3287eac59a42b0c2f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6244b14e3997fcae97a44b3287eac59a42b0c2f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6244b14e3997fcae97a44b3287eac59a42b0c2f1", "patch": "@@ -1,3 +1,13 @@\n+2004-07-04  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.c (SIBCALL_SLOT_EMPTY_P): Rename\n+\tinto LEAF_SIBCALL_SLOT_RESERVED_P after negation.\n+\t(eligible_for_sibcall_delay): Adjust use of SIBCALL_SLOT_EMPTY_P.\n+\t(output_restore): Change parameter from 'insn' to 'pat'.\n+\t(output_return): Adjust call to output_restore.\n+\t(output_sibcall): Adjust use of SIBCALL_SLOT_EMPTY_P.\n+\tAdjust call to output_restore.\n+\n 2004-07-04  Neil Booth  <neil@duron.akihabara.co.uk>\n \n \t* config/netbsd.h (NETBSD_OS_CPP_BUILTINS_COMMON): Define __unix__"}, {"sha": "6bbfb601a81d1f38767354595f606fa70c432a1f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6244b14e3997fcae97a44b3287eac59a42b0c2f1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6244b14e3997fcae97a44b3287eac59a42b0c2f1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=6244b14e3997fcae97a44b3287eac59a42b0c2f1", "patch": "@@ -54,10 +54,10 @@ Boston, MA 02111-1307, USA.  */\n    \"or %o7,%g0,X; call Y; or X,%g0,%o7\" always, so that it can be optimized.\n    With sethi/jmp, neither 'as' nor 'ld' has an easy way how to find out if\n    somebody does not branch between the sethi and jmp.  */\n-#define SIBCALL_SLOT_EMPTY_P 0\n+#define LEAF_SIBCALL_SLOT_RESERVED_P 1\n #else\n-#define SIBCALL_SLOT_EMPTY_P \\\n-  ((TARGET_ARCH32 || TARGET_CM_MEDLOW) && ! flag_pic)\n+#define LEAF_SIBCALL_SLOT_RESERVED_P \\\n+  ((TARGET_ARCH64 && !TARGET_CM_MEDLOW) || flag_pic)\n #endif\n \n /* Global variables for machine-dependent things.  */\n@@ -2946,7 +2946,7 @@ eligible_for_sibcall_delay (rtx trial)\n     {\n       /* If the tail call is done using the call instruction,\n \t we have to restore %o7 in the delay slot.  */\n-      if (! SIBCALL_SLOT_EMPTY_P)\n+      if (LEAF_SIBCALL_SLOT_RESERVED_P)\n \treturn 0;\n \n       /* %g1 is used to build the function address */\n@@ -4355,17 +4355,16 @@ sparc_asm_function_epilogue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n /* Output a 'restore' instruction.  */\n  \n static void\n-output_restore (rtx insn)\n+output_restore (rtx pat)\n {\n-  rtx operands[3], pat;\n+  rtx operands[3];\n \n-  if (! insn)\n+  if (! pat)\n     {\n       fputs (\"\\t restore\\n\", asm_out_file);\n       return;\n     }\n \n-  pat = PATTERN (insn);\n   if (GET_CODE (pat) != SET)\n     abort ();\n \n@@ -4483,7 +4482,7 @@ output_return (rtx insn)\n \t    {\n \t      fprintf (asm_out_file, \"\\tjmp\\t%%i7+%d\\n\",\n \t\t       sparc_skip_caller_unimp ? 12 : 8);\n-\t      output_restore (delay);\n+\t      output_restore (pat);\n \t    }\n \n \t  PATTERN (delay) = gen_blockage ();\n@@ -4521,7 +4520,7 @@ output_sibcall (rtx insn, rtx call_operand)\n \t register window.  We simply output the jump to the function and\n \t the insn in the delay slot (if any).  */\n \n-      if (! SIBCALL_SLOT_EMPTY_P && delay_slot_filled_p)\n+      if (LEAF_SIBCALL_SLOT_RESERVED_P && delay_slot_filled_p)\n \tabort();\n \n       if (delay_slot_filled_p)\n@@ -4560,13 +4559,13 @@ output_sibcall (rtx insn, rtx call_operand)\n \t  if (! delay)\n \t    abort ();\n \n-\t  output_restore (delay);\n+\t  output_restore (PATTERN (delay));\n \n \t  PATTERN (delay) = gen_blockage ();\n \t  INSN_CODE (delay) = -1;\n \t}\n       else\n-\toutput_restore (0);\n+\toutput_restore (NULL_RTX);\n     }\n \n   return \"\";"}]}