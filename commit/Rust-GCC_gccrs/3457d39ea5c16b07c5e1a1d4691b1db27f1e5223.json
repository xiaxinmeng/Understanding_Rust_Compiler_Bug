{"sha": "3457d39ea5c16b07c5e1a1d4691b1db27f1e5223", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ1N2QzOWVhNWMxNmIwN2M1ZTFhMWQ0NjkxYjFkYjI3ZjFlNTIyMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2015-07-07T19:29:58Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2015-07-07T19:29:58Z"}, "message": "PR jit/66783: prevent use of opaque structs\n\ngcc/jit/ChangeLog:\n\tPR jit/66783\n\t* jit-recording.h: Within namespace gcc:jit::recording...\n\t(type::has_known_size): New virtual function.\n\t(struct_has_known_size): New function.\n\t* libgccjit.c (gcc_jit_context_new_field): Verify that the type\n\thas a known size.\n\t(gcc_jit_context_new_global): Likewise.\n\t(gcc_jit_function_new_local): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR jit/66783\n\t* jit.dg/test-error-gcc_jit_context_new_field-opaque-struct.c: New\n\ttest case.\n\t* jit.dg/test-error-gcc_jit_context_new_global-opaque-struct.c:\n\tNew test case.\n\t* jit.dg/test-error-gcc_jit_function_new_local-opaque-struct.c:\n\tNew test case.\n\t* jit.dg/test-error-mismatching-types-in-call.c (create_code):\n\tAvoid using an opaque struct for local \"f\".\n\nFrom-SVN: r225523", "tree": {"sha": "4e27cf9de6ad3f9acd2c9a0c0386dbab0e1f4e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e27cf9de6ad3f9acd2c9a0c0386dbab0e1f4e2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bada4bed71933a5170b41585b6fb52a45eaf5e8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bada4bed71933a5170b41585b6fb52a45eaf5e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bada4bed71933a5170b41585b6fb52a45eaf5e8a"}], "stats": {"total": 148, "additions": 147, "deletions": 1}, "files": [{"sha": "dbead11e0e28d40716b91393a9f0db36056129f7", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=3457d39ea5c16b07c5e1a1d4691b1db27f1e5223", "patch": "@@ -1,3 +1,14 @@\n+2015-07-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/66783\n+\t* jit-recording.h: Within namespace gcc:jit::recording...\n+\t(type::has_known_size): New virtual function.\n+\t(struct_has_known_size): New function.\n+\t* libgccjit.c (gcc_jit_context_new_field): Verify that the type\n+\thas a known size.\n+\t(gcc_jit_context_new_global): Likewise.\n+\t(gcc_jit_function_new_local): Likewise.\n+\n 2015-07-07  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/66779"}, {"sha": "884304b0ff832a91cd8474fd9b4e92be03221e85", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=3457d39ea5c16b07c5e1a1d4691b1db27f1e5223", "patch": "@@ -497,6 +497,7 @@ class type : public memento\n   virtual type *is_pointer () = 0;\n   virtual type *is_array () = 0;\n   virtual bool is_void () const { return false; }\n+  virtual bool has_known_size () const { return true; }\n \n   bool is_numeric () const\n   {\n@@ -795,6 +796,8 @@ class compound_type : public type\n   type *is_pointer () { return NULL; }\n   type *is_array () { return NULL; }\n \n+  bool has_known_size () const { return m_fields != NULL; }\n+\n   playback::compound_type *\n   playback_compound_type ()\n   {"}, {"sha": "85d9f62f041f801a7f30b2a1881e5595dd8a491c", "filename": "gcc/jit/libgccjit.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Fjit%2Flibgccjit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Fjit%2Flibgccjit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Flibgccjit.c?ref=3457d39ea5c16b07c5e1a1d4691b1db27f1e5223", "patch": "@@ -543,6 +543,11 @@ gcc_jit_context_new_field (gcc_jit_context *ctxt,\n   /* LOC can be NULL.  */\n   RETURN_NULL_IF_FAIL (type, ctxt, loc, \"NULL type\");\n   RETURN_NULL_IF_FAIL (name, ctxt, loc, \"NULL name\");\n+  RETURN_NULL_IF_FAIL_PRINTF1 (\n+    type->has_known_size (),\n+    ctxt, loc,\n+    \"type has unknown size (type: %s)\",\n+    type->get_debug_string ());\n \n   return (gcc_jit_field *)ctxt->new_field (loc, type, name);\n }\n@@ -1033,6 +1038,11 @@ gcc_jit_context_new_global (gcc_jit_context *ctxt,\n     kind);\n   RETURN_NULL_IF_FAIL (type, ctxt, loc, \"NULL type\");\n   RETURN_NULL_IF_FAIL (name, ctxt, loc, \"NULL name\");\n+  RETURN_NULL_IF_FAIL_PRINTF1 (\n+    type->has_known_size (),\n+    ctxt, loc,\n+    \"type has unknown size (type: %s)\",\n+    type->get_debug_string ());\n \n   return (gcc_jit_lvalue *)ctxt->new_global (loc, kind, type, name);\n }\n@@ -1829,6 +1839,11 @@ gcc_jit_function_new_local (gcc_jit_function *func,\n \t\t       \"Cannot add locals to an imported function\");\n   RETURN_NULL_IF_FAIL (type, ctxt, loc, \"NULL type\");\n   RETURN_NULL_IF_FAIL (name, ctxt, loc, \"NULL name\");\n+  RETURN_NULL_IF_FAIL_PRINTF1 (\n+    type->has_known_size (),\n+    ctxt, loc,\n+    \"type has unknown size (type: %s)\",\n+    type->get_debug_string ());\n \n   return (gcc_jit_lvalue *)func->new_local (loc, type, name);\n }"}, {"sha": "ca13429495f222b0982c7f44185c5d929ecfd27b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3457d39ea5c16b07c5e1a1d4691b1db27f1e5223", "patch": "@@ -1,3 +1,15 @@\n+2015-07-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/66783\n+\t* jit.dg/test-error-gcc_jit_context_new_field-opaque-struct.c: New\n+\ttest case.\n+\t* jit.dg/test-error-gcc_jit_context_new_global-opaque-struct.c:\n+\tNew test case.\n+\t* jit.dg/test-error-gcc_jit_function_new_local-opaque-struct.c:\n+\tNew test case.\n+\t* jit.dg/test-error-mismatching-types-in-call.c (create_code):\n+\tAvoid using an opaque struct for local \"f\".\n+\n 2015-07-07  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/66779"}, {"sha": "c4e144865cfe42b6ae9d99ca666a19724aa8e31b", "filename": "gcc/testsuite/jit.dg/test-error-gcc_jit_context_new_field-opaque-struct.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_context_new_field-opaque-struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_context_new_field-opaque-struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_context_new_field-opaque-struct.c?ref=3457d39ea5c16b07c5e1a1d4691b1db27f1e5223", "patch": "@@ -0,0 +1,31 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+/* Try to put an opaque struct inside another struct\n+   (or union); the API ought to complain.  */\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  gcc_jit_struct *t_opaque =\n+    gcc_jit_context_new_opaque_struct (ctxt, NULL, \"opaque\");\n+\n+  (void)gcc_jit_context_new_field (ctxt, NULL,\n+\t\t\t\t   gcc_jit_struct_as_type (t_opaque),\n+\t\t\t\t   \"f_opaque\");\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"gcc_jit_context_new_field:\"\n+\t\t      \" type has unknown size (type: struct opaque)\");\n+}"}, {"sha": "5f096afcff6b2b3d089469040f7f5df1d982ec3d", "filename": "gcc/testsuite/jit.dg/test-error-gcc_jit_context_new_global-opaque-struct.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_context_new_global-opaque-struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_context_new_global-opaque-struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_context_new_global-opaque-struct.c?ref=3457d39ea5c16b07c5e1a1d4691b1db27f1e5223", "patch": "@@ -0,0 +1,32 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+/* Try to create a global of an opaque struct;\n+   the API ought to complain.  */\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  gcc_jit_struct *t_opaque =\n+    gcc_jit_context_new_opaque_struct (ctxt, NULL, \"opaque\");\n+\n+  (void)gcc_jit_context_new_global (ctxt, NULL,\n+\t\t\t\t    GCC_JIT_GLOBAL_EXPORTED,\n+\t\t\t\t    gcc_jit_struct_as_type (t_opaque),\n+\t\t\t\t    \"instance_of_opaque\");\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"gcc_jit_context_new_global:\"\n+\t\t      \" type has unknown size (type: struct opaque)\");\n+}"}, {"sha": "f263d6730705f4f12c1300e5a9ac881ee5e62f92", "filename": "gcc/testsuite/jit.dg/test-error-gcc_jit_function_new_local-opaque-struct.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_function_new_local-opaque-struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_function_new_local-opaque-struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-gcc_jit_function_new_local-opaque-struct.c?ref=3457d39ea5c16b07c5e1a1d4691b1db27f1e5223", "patch": "@@ -0,0 +1,42 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+/* Try to create a local of an opaque struct;\n+   the API ought to complain.  */\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  gcc_jit_type *t_void =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+\n+  gcc_jit_struct *t_opaque =\n+    gcc_jit_context_new_opaque_struct (ctxt, NULL, \"opaque\");\n+\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+                                  GCC_JIT_FUNCTION_EXPORTED,\n+                                  t_void,\n+                                  \"test_fn\",\n+\t\t\t\t  0, NULL,\n+                                  0);\n+\n+  (void)gcc_jit_function_new_local (func, NULL,\n+\t\t\t\t    gcc_jit_struct_as_type (t_opaque),\n+\t\t\t\t    \"i\");\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error message was emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"gcc_jit_function_new_local:\"\n+\t\t      \" type has unknown size (type: struct opaque)\");\n+}"}, {"sha": "e89c281699a0815b1f5e8757c6bac48242c7c1ee", "filename": "gcc/testsuite/jit.dg/test-error-mismatching-types-in-call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-mismatching-types-in-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3457d39ea5c16b07c5e1a1d4691b1db27f1e5223/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-mismatching-types-in-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-mismatching-types-in-call.c?ref=3457d39ea5c16b07c5e1a1d4691b1db27f1e5223", "patch": "@@ -26,7 +26,7 @@ create_code (gcc_jit_context *ctxt, void *user_data)\n   gcc_jit_type *void_type =\n     gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n   gcc_jit_struct *struct_foo =\n-    gcc_jit_context_new_opaque_struct (ctxt, NULL, \"foo\");\n+    gcc_jit_context_new_struct_type (ctxt, NULL, \"foo\", 0, NULL);\n   gcc_jit_type *foo_ptr =\n     gcc_jit_type_get_pointer (gcc_jit_struct_as_type (struct_foo));\n   gcc_jit_param *param ="}]}