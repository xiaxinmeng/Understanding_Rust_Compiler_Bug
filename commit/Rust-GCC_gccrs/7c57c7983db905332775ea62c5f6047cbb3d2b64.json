{"sha": "7c57c7983db905332775ea62c5f6047cbb3d2b64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M1N2M3OTgzZGI5MDUzMzI3NzVlYTYyYzVmNjA0N2NiYjNkMmI2NA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-01-30T19:59:11Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-01-30T19:59:11Z"}, "message": "Add many prototypes from bill@cygnus.com.\n\nFrom-SVN: r3390", "tree": {"sha": "81ad9d62218f02da2fa7b4d84441891b2b7f3d63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81ad9d62218f02da2fa7b4d84441891b2b7f3d63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c57c7983db905332775ea62c5f6047cbb3d2b64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c57c7983db905332775ea62c5f6047cbb3d2b64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c57c7983db905332775ea62c5f6047cbb3d2b64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c57c7983db905332775ea62c5f6047cbb3d2b64/comments", "author": null, "committer": null, "parents": [{"sha": "5d63b07f422b4341ab9439d81835c1f704beadca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d63b07f422b4341ab9439d81835c1f704beadca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d63b07f422b4341ab9439d81835c1f704beadca"}], "stats": {"total": 262, "additions": 168, "deletions": 94}, "files": [{"sha": "80e7f2af36ef03e71c427437ee90a6202559b0cc", "filename": "gcc/c-tree.h", "status": "modified", "additions": 168, "deletions": 94, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c57c7983db905332775ea62c5f6047cbb3d2b64/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c57c7983db905332775ea62c5f6047cbb3d2b64/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=7c57c7983db905332775ea62c5f6047cbb3d2b64", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for C parsing and type checking.\n-   Copyright (C) 1987 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -17,6 +17,13 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n+#ifndef _C_TREE_H\n+#define _C_TREE_H\n+#if 0 /* I fear this may cause failures on some systems,\n+\t so I turned off the few prototypes that needed it -- rms. */\n+#include <stdio.h>\n+#endif\n+\n /* Language-dependent contents of an identifier.  */\n \n /* The limbo_value is used for block level extern declarations, which need\n@@ -131,110 +138,175 @@ struct lang_type\n        || TYPE_MAIN_VARIANT (t) == short_integer_type_node\t\\\n        || TYPE_MAIN_VARIANT (t) == short_unsigned_type_node))\n \f\n-/* in c-typecheck.c */\n-extern tree build_component_ref (), build_conditional_expr (), build_compound_expr ();\n-extern tree build_unary_op (), build_binary_op (), build_function_call ();\n-extern tree parser_build_binary_op ();\n-extern tree build_indirect_ref (), build_array_ref (), build_c_cast ();\n-extern tree build_modify_expr ();\n-extern tree c_sizeof (), c_alignof (), c_alignof_expr ();\n-extern void store_init_value ();\n-extern tree digest_init ();\n-extern tree c_expand_start_case ();\n-extern tree default_conversion ();\n-\n-/* Given two integer or real types, return the type for their sum.\n-   Given two compatible ANSI C types, returns the merged type.  */\n-\n-extern tree common_type ();\n-\n-/* in c-decl.c */\n-extern tree build_label ();\n-\n-extern int start_function ();\n-extern void finish_function ();\n-extern void store_parm_decls ();\n-extern tree get_parm_info ();\n-extern tree combine_parm_decls ();\n-\n-extern void pushlevel ();\n-extern tree poplevel ();\n-\n-extern tree groktypename (), lookup_name ();\n-\n-extern tree lookup_label (), define_label (), shadow_label ();\n-\n-extern tree implicitly_declare (), getdecls (), gettags ();\n-\n-extern tree start_decl ();\n-extern void finish_decl ();\n-\n-extern tree start_struct (), finish_struct (), xref_tag ();\n-extern tree grokfield ();\n-\n-extern tree start_enum (), finish_enum ();\n-extern tree build_enumerator ();\n-\n-extern tree make_index_type ();\n-\n-/* Add qualifiers to a type, in the fashion for C.  */\n-extern tree c_build_type_variant ();\n-\n-/* Declare a predefined function.  Return the declaration.  */\n-extern tree builtin_function ();\n-\n-/* Functions in c-common.c: */\n-\n-/* Concatenate a list of STRING_CST nodes into one STRING_CST.  */\n-extern tree combine_strings ();\n-\n-/* Validate the expression after `case' and apply default promotions.  */\n-extern tree check_case_value ();\n+extern int maybe_objc_comptypes                 PROTO((tree, tree));\n+extern tree maybe_building_objc_message_expr    PROTO((void));\n+\f\n+/* in c-aux-info.c */\n+extern void gen_aux_info_record                 PROTO((tree, int, int, int));\n \n+/* in c-common.c */\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n-\n-extern void binary_op_error ();\n-\n+extern void binary_op_error                     PROTO((enum tree_code));\n+extern void c_expand_expr_stmt                  PROTO((tree));\n+/* Validate the expression after `case' and apply default promotions.  */\n+extern tree check_case_value                    PROTO((tree));\n+/* Concatenate a list of STRING_CST nodes into one STRING_CST.  */\n+extern tree combine_strings                     PROTO((tree));\n+extern void constant_expression_warning         PROTO((tree));\n+extern void decl_attributes                     PROTO((tree, tree));\n+extern void declare_function_name               PROTO((void));\n+/* Read the rest of the current #-directive line.  */\n+#if 0\n+extern char *get_directive_line                 PROTO((FILE *));\n+#endif\n+extern char *get_directive_line ();\n /* Subroutine of build_binary_op, used for comparison operations.\n    See if the operands have both been converted from subword integer types\n    and, if so, perhaps change them both back to their original type.  */\n-\n-extern tree shorten_compare ();\n-\n-/* Read the rest of the current #-directive line.  */\n-extern char *get_directive_line ();\n-\n+extern tree shorten_compare                     PROTO((tree *, tree *, tree *, enum tree_code *));\n /* Prepare expr to be an argument of a TRUTH_NOT_EXPR,\n    or validate its data type for an `if' or `while' statement or ?..: exp. */\n-extern tree truthvalue_conversion ();\n+extern tree truthvalue_conversion               PROTO((tree));\n+extern tree type_for_mode                       PROTO((enum machine_mode, int));\n+extern tree type_for_size                       PROTO((unsigned, int));\n \n-extern int maybe_objc_comptypes ();\n-extern tree maybe_building_objc_message_expr ();\n-\f\n-/* Standard named or nameless data types of the C compiler.  */\n+/* in c-convert.c */\n+extern tree convert                             PROTO((tree, tree));\n \n-extern tree short_integer_type_node, integer_type_node;\n-extern tree long_integer_type_node, long_long_integer_type_node;\n-extern tree short_unsigned_type_node, unsigned_type_node;\n-extern tree long_unsigned_type_node, long_long_unsigned_type_node;\n-extern tree ptrdiff_type_node;\n-extern tree unsigned_char_type_node, signed_char_type_node, char_type_node;\n-extern tree wchar_type_node, signed_wchar_type_node, unsigned_wchar_type_node;\n-extern tree float_type_node, double_type_node, long_double_type_node;\n-extern tree intQI_type_node, unsigned_intQI_type_node;\n-extern tree intHI_type_node, unsigned_intHI_type_node;\n-extern tree intSI_type_node, unsigned_intSI_type_node;\n-extern tree intDI_type_node, unsigned_intDI_type_node;\n-extern tree void_type_node, ptr_type_node, const_ptr_type_node;\n-extern tree string_type_node, const_string_type_node;\n-extern tree char_array_type_node, int_array_type_node, wchar_array_type_node;\n+/* in c-decl.c */\n+/* Standard named or nameless data types of the C compiler.  */\n+extern tree char_array_type_node;\n+extern tree char_type_node;\n+extern tree const_ptr_type_node;\n+extern tree const_string_type_node;\n extern tree default_function_type;\n-extern tree double_ftype_double, double_ftype_double_double;\n-extern tree int_ftype_int, long_ftype_long;\n-extern tree void_ftype_ptr_ptr_int, int_ftype_ptr_ptr_int;\n-extern tree void_ftype_ptr_int_int, string_ftype_ptr_ptr;\n-extern tree int_ftype_string_string, int_ftype_cptr_cptr_sizet;\n+extern tree double_ftype_double;\n+extern tree double_ftype_double_double;\n+extern tree double_type_node;\n+extern tree float_type_node;\n+extern tree intDI_type_node;\n+extern tree intHI_type_node;\n+extern tree intQI_type_node;\n+extern tree intSI_type_node;\n+extern tree int_array_type_node;\n+extern tree int_ftype_cptr_cptr_sizet;\n+extern tree int_ftype_int;\n+extern tree int_ftype_ptr_ptr_int;\n+extern tree int_ftype_string_string;\n+extern tree integer_type_node;\n+extern tree long_double_type_node;\n+extern tree long_ftype_long;\n+extern tree long_integer_type_node;\n+extern tree long_long_integer_type_node;\n+extern tree long_long_unsigned_type_node;\n+extern tree long_unsigned_type_node;\n+extern tree ptr_type_node;\n+extern tree ptrdiff_type_node;\n+extern tree short_integer_type_node;\n+extern tree short_unsigned_type_node;\n+extern tree signed_char_type_node;\n+extern tree signed_wchar_type_node;\n+extern tree string_ftype_ptr_ptr;\n+extern tree string_type_node;\n+extern tree unsigned_char_type_node;\n+extern tree unsigned_intDI_type_node;\n+extern tree unsigned_intHI_type_node;\n+extern tree unsigned_intQI_type_node;\n+extern tree unsigned_intSI_type_node;\n+extern tree unsigned_type_node;\n+extern tree unsigned_wchar_type_node;\n+extern tree void_ftype_ptr_int_int;\n+extern tree void_ftype_ptr_ptr_int;\n+extern tree void_type_node;\n+extern tree wchar_array_type_node;\n+extern tree wchar_type_node;\n+\n+extern tree build_enumerator                    PROTO((tree, tree));\n+/* Declare a predefined function.  Return the declaration.  */\n+extern tree builtin_function                    PROTO((char *, tree, enum built_in_function function_, char *));\n+/* Add qualifiers to a type, in the fashion for C.  */\n+extern tree c_build_type_variant                PROTO((tree, int, int));\n+extern int  c_decode_option                     PROTO((char *));\n+extern void c_mark_varargs                      PROTO((void));\n+extern tree check_identifier                    PROTO((tree, tree));\n+extern void clear_parm_order                    PROTO((void));\n+extern tree combine_parm_decls                  PROTO((tree, tree, int));\n+extern int  complete_array_type                 PROTO((tree, tree, int));\n+extern void declare_parm_level                  PROTO((int));\n+extern tree define_label                        PROTO((char *, int, tree));\n+extern void delete_block                        PROTO((tree));\n+extern void finish_decl                         PROTO((tree, tree, tree));\n+extern tree finish_enum                         PROTO((tree, tree));\n+extern void finish_function                     PROTO((int));\n+extern tree finish_struct                       PROTO((tree, tree));\n+extern tree get_parm_info                       PROTO((int));\n+extern tree getdecls                            PROTO((void));\n+extern tree gettags                             PROTO((void));\n+extern int  global_bindings_p                   PROTO((void));\n+extern tree grokfield                           PROTO((char *, int, tree, tree, tree));\n+extern tree groktypename                        PROTO((tree));\n+extern tree groktypename_in_parm_context        PROTO((tree));\n+extern tree implicitly_declare                  PROTO((tree));\n+extern int  in_parm_level_p                     PROTO((void));\n+extern void init_decl_processing                PROTO((void));\n+extern void insert_block                        PROTO((tree));\n+extern void keep_next_level                     PROTO((void));\n+extern int  kept_level_p                        PROTO((void));\n+extern tree lookup_label                        PROTO((tree));\n+extern tree lookup_name                         PROTO((tree));\n+extern tree maybe_build_cleanup                 PROTO((tree));\n+extern void parmlist_tags_warning               PROTO((void));\n+extern void pending_xref_error                  PROTO((void));\n+extern void pop_c_function_context              PROTO((void));\n+extern void pop_label_level                     PROTO((void));\n+extern tree poplevel                            PROTO((int, int, int));\n+extern void print_lang_decl                     PROTO((void));\n+#if 0\n+extern void print_lang_identifier               PROTO((FILE *, tree, int));\n+#endif\n+extern void print_lang_type                     PROTO((void));\n+extern void push_c_function_context             PROTO((void));\n+extern void push_label_level                    PROTO((void));\n+extern void push_parm_decl                      PROTO((tree));\n+extern tree pushdecl                            PROTO((tree));\n+extern tree pushdecl_top_level                  PROTO((tree));\n+extern void pushlevel                           PROTO((int));\n+extern void pushtag                             PROTO((tree, tree));\n+extern void set_block                           PROTO((tree));\n+extern tree shadow_label                        PROTO((tree));\n+extern void shadow_record_fields                PROTO((tree));\n+extern void shadow_tag                          PROTO((tree));\n+extern void shadow_tag_warned                   PROTO((tree, int));\n+extern tree start_enum                          PROTO((tree));\n+extern int  start_function                      PROTO((tree, tree, int));\n+extern tree start_decl                          PROTO((tree, tree, int));\n+extern tree start_struct                        PROTO((enum tree_code, tree));\n+extern void store_parm_decls                    PROTO((void));\n+extern tree xref_tag                            PROTO((enum tree_code, tree));\n+\n+/* in c-typeck.c */\n+extern tree build_array_ref                     PROTO((tree, tree));\n+extern tree build_binary_op                     PROTO((enum tree_code, tree, tree, int));\n+extern tree build_c_cast                        PROTO((tree, tree));\n+extern tree build_component_ref                 PROTO((tree, tree));\n+extern tree build_compound_expr                 PROTO((tree));\n+extern tree build_conditional_expr              PROTO((tree, tree, tree));\n+extern tree build_function_call                 PROTO((tree, tree));\n+extern tree build_indirect_ref                  PROTO((tree, char *));\n+extern tree build_modify_expr                   PROTO((tree, enum tree_code, tree));\n+extern tree build_unary_op                      PROTO((enum tree_code, tree, int));\n+extern tree c_alignof                           PROTO((tree));\n+extern tree c_alignof_expr                      PROTO((tree));\n+extern tree c_sizeof                            PROTO((tree));\n+extern tree c_expand_start_case                 PROTO((tree));\n+/* Given two integer or real types, return the type for their sum.\n+   Given two compatible ANSI C types, returns the merged type.  */\n+extern tree common_type                         PROTO((tree, tree));\n+extern tree default_conversion                  PROTO((tree));\n+extern tree digest_init                         PROTO((tree, tree, tree *, int, int, char *));\n+extern tree parser_build_binary_op              PROTO((enum tree_code, tree, tree));\n+extern void store_init_value                    PROTO((tree, tree));\n \n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */\n@@ -332,3 +404,5 @@ extern int (*comptypes_record_hook) ();\n /* Nonzero means we are reading code that came from a system header file.  */\n \n extern int system_header_p;\n+\n+#endif /* not _C_TREE_H */"}]}