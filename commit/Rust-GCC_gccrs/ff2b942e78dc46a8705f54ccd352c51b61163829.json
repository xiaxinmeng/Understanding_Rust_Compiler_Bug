{"sha": "ff2b942e78dc46a8705f54ccd352c51b61163829", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYyYjk0MmU3OGRjNDZhODcwNWY1NGNjZDM1MmM1MWI2MTE2MzgyOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-04-23T19:42:39Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-04-23T19:42:39Z"}, "message": "bits: Add.\n\n\n2000-04-23  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* shadow/bits: Add.\n\t* shadow/sys: Add.\n\nFrom-SVN: r33356", "tree": {"sha": "070c46a92d0352e91d525ae9086699e94723621c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/070c46a92d0352e91d525ae9086699e94723621c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff2b942e78dc46a8705f54ccd352c51b61163829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2b942e78dc46a8705f54ccd352c51b61163829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2b942e78dc46a8705f54ccd352c51b61163829", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2b942e78dc46a8705f54ccd352c51b61163829/comments", "author": null, "committer": null, "parents": [{"sha": "d9e0bd53b2da36f66fcd18b168b354612ef7f4df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9e0bd53b2da36f66fcd18b168b354612ef7f4df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9e0bd53b2da36f66fcd18b168b354612ef7f4df"}], "stats": {"total": 2681, "additions": 2681, "deletions": 0}, "files": [{"sha": "cd7c939a3cf180fb5ffadc163c8859d324f932ea", "filename": "libstdc++-v3/shadow/bits/std_cassert.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cassert.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,42 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 19.2  Assertions\n+//\n+\n+// No include guards or wrappers on this header...\n+//\n+//   If <assert.h> sub-includes anything else that \n+//   defines a global used in other headers, we are sunk.\n+\n+extern \"C\" {\n+# include_next <assert.h>\n+}\n+"}, {"sha": "b8555c16e513d312e6492e1bfeb0b4aa6ff8b89e", "filename": "libstdc++-v3/shadow/bits/std_cctype.h", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cctype.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,142 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// ISO C++ 14882: 22\n+//\n+\n+#ifndef _CPP_CCTYPE\n+#define _CPP_CCTYPE 1\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <ctype.h>\n+    }\n+\n+    inline int _CPP_isalnum_capture(int c) { return isalnum (c); }\n+    inline int _CPP_isalpha_capture(int c) { return isalpha (c); }\n+    inline int _CPP_iscntrl_capture(int c) { return iscntrl (c); }\n+    inline int _CPP_isdigit_capture(int c) { return isdigit (c); }\n+    inline int _CPP_isgraph_capture(int c) { return isgraph (c); }\n+    inline int _CPP_islower_capture(int c) { return islower (c); }\n+    inline int _CPP_isprint_capture(int c) { return isprint (c); }\n+    inline int _CPP_ispunct_capture(int c) { return ispunct (c); }\n+    inline int _CPP_isspace_capture(int c) { return isspace (c); }\n+    inline int _CPP_isupper_capture(int c) { return isupper (c); }\n+    inline int _CPP_isxdigit_capture(int c) { return isxdigit (c); }\n+\n+    inline int _CPP_tolower_capture(int c) { return tolower (c); }\n+    inline int _CPP_toupper_capture(int c) { return toupper (c); }\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+# undef isalnum\n+# undef isalpha\n+# undef iscntrl\n+# undef isdigit\n+# undef isgraph\n+# undef islower\n+# undef isprint\n+# undef ispunct\n+# undef isspace\n+# undef isupper\n+# undef isxdigit\n+\n+# undef tolower\n+# undef toupper\n+\n+#if 0  /* these might not be necessary any more. 98-09-29 */\n+# undef _U\n+# undef _L\n+# undef _N\n+# undef _S\n+# undef _P\n+# undef _C\n+# undef _B\n+# undef _X\n+#endif\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+  namespace std {\n+\n+    inline int isalnum(int __c)\n+      { return ::_C_Swamp::_CPP_isalnum_capture (__c); }\n+    inline int isalpha (int __c)\n+      { return ::_C_Swamp::_CPP_isalpha_capture (__c); }\n+    inline int iscntrl (int __c)\n+      { return ::_C_Swamp::_CPP_iscntrl_capture (__c); }\n+    inline int isdigit (int __c)\n+      { return ::_C_Swamp::_CPP_isdigit_capture (__c); }\n+    inline int isgraph (int __c)\n+      { return ::_C_Swamp::_CPP_isgraph_capture (__c); }\n+    inline int islower (int __c)\n+      { return ::_C_Swamp::_CPP_islower_capture (__c); }\n+    inline int isprint (int __c)\n+      { return ::_C_Swamp::_CPP_isprint_capture (__c); }\n+    inline int ispunct (int __c)\n+      { return ::_C_Swamp::_CPP_ispunct_capture (__c); }\n+    inline int isspace (int __c)\n+      { return ::_C_Swamp::_CPP_isspace_capture (__c); }\n+    inline int isupper (int __c)\n+      { return ::_C_Swamp::_CPP_isupper_capture (__c); }\n+    inline int isxdigit (int __c)\n+      { return ::_C_Swamp::_CPP_isxdigit_capture (__c); }\n+\n+    inline int tolower (int __c)\n+      { return ::_C_Swamp::_CPP_tolower_capture (__c); }\n+    inline int toupper (int __c)\n+      { return ::_C_Swamp::_CPP_toupper_capture (__c); }\n+\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      using ::std::isalnum;\n+      using ::std::isalpha;\n+      using ::std::iscntrl;\n+      using ::std::isdigit;\n+      using ::std::isgraph;\n+      using ::std::islower;\n+      using ::std::isprint;\n+      using ::std::ispunct;\n+      using ::std::isspace;\n+      using ::std::isupper;\n+      using ::std::isxdigit;\n+      using ::std::tolower;\n+      using ::std::toupper;\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif"}, {"sha": "0ca6b6c2d6aba2a3aeb8f8622111ee01fed99792", "filename": "libstdc++-v3/shadow/bits/std_cerrno.h", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cerrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cerrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cerrno.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,67 @@\n+// -*- C++ -*- header wrapper.\n+\n+\n+//// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// ISO C++ 14882: 19.3  Error numbers\n+//\n+\n+#ifndef _CPP_CERRNO\n+#define _CPP_CERRNO 1\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <errno.h>\n+    }\n+\n+    int& _CPP_errno_capture() { return errno; }\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+#  undef  errno\n+#  define errno ::_C_Swamp::_CPP_errno_capture()\n+// # undef EDOM\n+// # undef ERANGE\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+  namespace std { \n+  } // close namespace std::\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif\n+"}, {"sha": "2b8dbdf8ca3498117aadda82c38ae55d78b40933", "filename": "libstdc++-v3/shadow/bits/std_cfloat.h", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cfloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cfloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cfloat.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,184 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 18.2.2  Implementation properties: C library\n+//\n+\n+#ifndef _CPP_CFLOAT\n+#define _CPP_CFLOAT 1\n+\n+#if 0  /* 1998-09-29 */\n+# ifdef __GLIBC__\n+// For GNU libc we must also include this one:\n+#  include <fenv.h>\n+# endif\n+#endif\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <float.h>\n+    }\n+\n+    inline int _CPP_FLT_ROUNDS_capture() { return FLT_ROUNDS; }\n+\n+    // FLT_RADIX is OK as-is.\n+    // const int     _CPP_FLT_RADIX_capture() { return FLT_RADIX; }\n+ \n+    inline int _CPP_FLT_MANT_DIG_capture() { return FLT_MANT_DIG; }\n+    inline int _CPP_DBL_MANT_DIG_capture() { return DBL_MANT_DIG; }\n+    inline int _CPP_LDBL_MANT_DIG_capture() { return LDBL_MANT_DIG; }\n+\n+    inline int _CPP_FLT_DIG_capture() { return FLT_DIG; }\n+    inline int _CPP_DBL_DIG_capture() { return DBL_DIG; }\n+    inline int _CPP_LDBL_DIG_capture() { return LDBL_DIG; }\n+\n+    inline int _CPP_FLT_MIN_EXP_capture() { return FLT_MIN_EXP; }\n+    inline int _CPP_DBL_MIN_EXP_capture() { return DBL_MIN_EXP; }\n+    inline int _CPP_LDBL_MIN_EXP_capture() { return LDBL_MIN_EXP; }\n+\n+    inline int _CPP_FLT_MIN_10_EXP_capture() { return FLT_MIN_10_EXP; }\n+    inline int _CPP_DBL_MIN_10_EXP_capture() { return DBL_MIN_10_EXP; }\n+    inline int _CPP_LDBL_MIN_10_EXP_capture() { return LDBL_MIN_10_EXP; }\n+\n+    inline int _CPP_FLT_MAX_EXP_capture() { return FLT_MAX_EXP; }\n+    inline int _CPP_DBL_MAX_EXP_capture() { return DBL_MAX_EXP; }\n+    inline int _CPP_LDBL_MAX_EXP_capture() { return LDBL_MAX_EXP; }\n+\n+    inline int _CPP_FLT_MAX_10_EXP_capture() { return FLT_MAX_10_EXP; }\n+    inline int _CPP_DBL_MAX_10_EXP_capture() { return DBL_MAX_10_EXP; }\n+    inline int _CPP_LDBL_MAX_10_EXP_capture() { return LDBL_MAX_10_EXP; }\n+\n+    inline float _CPP_FLT_MAX_capture() { return FLT_MAX; }\n+    inline double _CPP_DBL_MAX_capture() { return DBL_MAX; }\n+    inline long double _CPP_LDBL_MAX_capture() { return LDBL_MAX; }\n+\n+    inline float _CPP_FLT_EPSILON_capture() { return FLT_EPSILON; }\n+    inline double _CPP_DBL_EPSILON_capture() { return DBL_EPSILON; }\n+    inline long double _CPP_LDBL_EPSILON_capture() { return LDBL_EPSILON; }\n+\n+    inline float _CPP_FLT_MIN_capture() { return FLT_MIN; }\n+    inline double _CPP_DBL_MIN_capture() { return DBL_MIN; }\n+    inline long double _CPP_LDBL_MIN_capture() { return LDBL_MIN; }\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+# undef FLT_ROUNDS\n+# define FLT_ROUNDS ::_C_Swamp::_CPP_FLT_ROUNDS_capture() \n+\n+// # undef FLT_RADIX  // OK as-is.\n+\n+# undef FLT_MANT_DIG\n+# define FLT_MANT_DIG ::_C_Swamp::_CPP_FLT_MANT_DIG_capture()\n+# undef DBL_MANT_DIG\n+# define DBL_MANT_DIG ::_C_Swamp::_CPP_DBL_MANT_DIG_capture()\n+# undef LDBL_MANT_DIG\n+# define LDBL_MANT_DIG ::_C_Swamp::_CPP_LDBL_MANT_DIG_capture()\n+\n+# undef FLT_DIG\n+# define FLT_DIG ::_C_Swamp::_CPP_FLT_DIG_capture()\n+# undef DBL_DIG\n+# define DBL_DIG ::_C_Swamp::_CPP_DBL_DIG_capture()\n+# undef LDBL_DIG\n+# define LDBL_DIG ::_C_Swamp::_CPP_LDBL_DIG_capture()\n+\n+# undef FLT_MIN_MIN_DIG\n+# define FLT_MIN_MIN_DIG ::_C_Swamp::_CPP_FLT_MIN_MIN_DIG_capture()\n+# undef DBL_MIN_MIN_DIG\n+# define DBL_MIN_MIN_DIG ::_C_Swamp::_CPP_DBL_MIN_MIN_DIG_capture()\n+# undef LDBL_MIN_MIN_DIG\n+# define LDBL_MIN_MIN_DIG ::_C_Swamp::_CPP_LDBL_MIN_MIN_DIG_capture()\n+\n+# undef FLT_MIN_EXP\n+# define FLT_MIN_EXP ::_C_Swamp::_CPP_FLT_MIN_EXP_capture()\n+# undef DBL_MIN_EXP\n+# define DBL_MIN_EXP ::_C_Swamp::_CPP_DBL_MIN_EXP_capture()\n+# undef LDBL_MIN_EXP\n+# define LDBL_MIN_EXP ::_C_Swamp::_CPP_LDBL_MIN_EXP_capture()\n+\n+# undef FLT_MIN_10_EXP\n+# define FLT_MIN_10_EXP ::_C_Swamp::_CPP_FLT_MIN_10_EXP_capture()\n+# undef DBL_MIN_10_EXP\n+# define DBL_MIN_10_EXP _::_C_Swamp::CPP_DBL_MIN_10_EXP_capture()\n+# undef LDBL_MIN_10_EXP\n+# define LDBL_MIN_10_EXP ::_C_Swamp::_CPP_LDBL_MIN_10_EXP_capture()\n+\n+# undef FLT_MAX_EXP\n+# define FLT_MAX_EXP ::_C_Swamp::_CPP_FLT_MAX_EXP_capture()\n+# undef DBL_MAX_EXP\n+# define DBL_MAX_EXP ::_C_Swamp::_CPP_DBL_MAX_EXP_capture()\n+# undef LDBL_MAX_EXP\n+# define LDBL_MAX_EXP ::_C_Swamp::_CPP_LDBL_MAX_EXP_capture()\n+\n+# undef FLT_MAX_10_EXP\n+# define FLT_MAX_10_EXP ::_C_Swamp::_CPP_FLT_MAX_10_EXP_capture()\n+# undef DBL_MAX_10_EXP\n+# define DBL_MAX_10_EXP ::_C_Swamp::_CPP_DBL_MAX_10_EXP_capture()\n+# undef LDBL_MAX_10_EXP\n+# define LDBL_MAX_10_EXP ::_C_Swamp::_CPP_LDBL_MAX_10_EXP_capture()\n+\n+# undef FLT_MAX\n+# define FLT_MAX ::_C_Swamp::_CPP_FLT_MAX_capture()\n+# undef DBL_MAX\n+# define DBL_MAX ::_C_Swamp::_CPP_DBL_MAX_capture()\n+# undef LDBL_MAX\n+# define LDBL_MAX ::_C_Swamp::_CPP_LDBL_MAX_capture()\n+\n+# undef FLT_EPSILON\n+# define FLT_EPSILON ::_C_Swamp::_CPP_FLT_EPSILON_capture()\n+# undef DBL_EPSILON\n+# define DBL_EPSILON ::_C_Swamp::_CPP_DBL_EPSILON_capture()\n+# undef LDBL_EPSILON\n+# define LDBL_EPSILON ::_C_Swamp::_CPP_LDBL_EPSILON_capture()\n+\n+# undef FLT_MIN\n+# define FLT_MIN ::_C_Swamp::_CPP_FLT_MIN_capture()\n+# undef DBL_MIN\n+# define DBL_MIN ::_C_Swamp::_CPP_DBL_MIN_capture()\n+# undef LDBL_MIN\n+# define LDBL_MIN ::_C_Swamp::_CPP_LDBL_MIN_capture()\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+  namespace std {\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif\n+"}, {"sha": "d1159df2e40ff96974345133a81db5396c50273f", "filename": "libstdc++-v3/shadow/bits/std_climits.h", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_climits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_climits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_climits.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,63 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 18.2.2  Implementation properties: C library\n+//\n+\n+#ifndef _CPP_CLIMITS\n+#define _CPP_CLIMTIS\t1\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <limits.h>\n+    }\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+  // Note: there is not much for this wrapper to do besides hiding \n+  // vendor-extension names and (perhaps) replacing one or other\n+  // macro with a larger value.\n+\n+// #undef MB_LEN_MAX\n+// #define MB_LEN_MAX 16  /* or something */\n+\n+  namespace std {\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif\n+"}, {"sha": "85add2d2292e9c2917230c8e3c649d0831819c80", "filename": "libstdc++-v3/shadow/bits/std_clocale.h", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_clocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_clocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_clocale.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,108 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 18.2.2  Implementation properties: C library\n+//\n+\n+#ifndef _CPP_CLOCALE\n+#define _CPP_CLOCALE     1\n+\n+# include <bits/std_cstddef.h> /* pick up NULL */\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <locale.h>\n+    }\n+\n+    typedef struct lconv _CPP_lconv_capture;\n+    const int _CPP_LC_ALL_capture = LC_ALL;\n+    const int _CPP_LC_COLLATE_capture = LC_COLLATE;\n+    const int _CPP_LC_CTYPE_capture = LC_CTYPE;\n+    const int _CPP_LC_MONETARY_capture = LC_MONETARY;\n+    const int _CPP_LC_NUMERIC_capture = LC_NUMERIC;\n+    const int _CPP_LC_TIME_capture = LC_TIME;\n+#if 0 /* XXX need proper macro guard for this common extension. */\n+    const int _CPP_LC_MESSAGES_capture = LC_MESSAGES;\n+#endif\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+// #  undef  NULL\n+// #  define NULL 0  /* handled in <cstddef> */\n+#  undef LC_ALL\n+#  define LC_ALL\t::_C_Swamp::_CPP_LC_ALL_capture\n+#  undef LC_COLLATE\n+#  define LC_COLLATE\t::_C_Swamp::_CPP_LC_COLLATE_capture\n+#  undef LC_CTYPE\n+#  define LC_CTYPE\t::_C_Swamp::_CPP_LC_CTYPE_capture\n+#  undef LC_MONETARY\n+#  define LC_MONETARY\t::_C_Swamp::_CPP_LC_MONETARY_capture\n+#  undef LC_NUMERIC\n+#  define LC_NUMERIC\t::_C_Swamp::_CPP_LC_NUMERIC_capture\n+#  undef LC_TIME\n+#  define LC_TIME\t::_C_Swamp::_CPP_LC_TIME_capture\n+#if 0 /* XXX need proper macro guard for this common extension. */\n+#  undef LC_MESSAGES\n+#  define LC_MESSAGES\t::_C_Swamp::_CPP_LC_MESSAGES_capture\n+#endif\n+\n+#  undef lconv\n+#  undef setlocale\n+#  undef localeconv\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+  namespace std {\n+\n+    // Adopt C names into std::\n+    using ::_C_Swamp::setlocale;  \n+\n+    // note: still a POD type:\n+    struct lconv  : ::_C_Swamp::_CPP_lconv_capture  { };\n+\n+    inline lconv* localeconv() \n+      { return reinterpret_cast<lconv*>(::_C_Swamp::localeconv()); }\n+\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      using ::std::lconv;\n+      using ::std::localeconv;\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif /* _CPP_CLOCALE */"}, {"sha": "a6f97b990e7ace2920f91ddb8f04d8513d24013c", "filename": "libstdc++-v3/shadow/bits/std_cmath.h", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cmath.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,184 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 26.5  C library\n+//\n+\n+#ifndef _CPP_CMATH\n+#define _CPP_CMATH 1\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <math.h>\n+    }\n+    inline double _CPP_HUGE_VAL_capture()        { return HUGE_VAL; }\n+    inline double _CPP_acos_capture(double __x)  { return acos(__x); }\n+    inline double _CPP_asin_capture(double __x)  { return asin(__x); }\n+    inline double _CPP_atan_capture(double __x)  { return atan(__x); }\n+    inline double _CPP_atan2_capture(double __y, double __x) \n+      { return atan2(__y,__x); }\n+    inline double _CPP_cos_capture(double __x)   { return cos(__x); }\n+    inline double _CPP_sin_capture(double __x)   { return sin(__x); }\n+    inline double _CPP_tan_capture(double __x)   { return tan(__x); }\n+    inline double _CPP_cosh_capture(double __x)  { return cosh(__x); }\n+    inline double _CPP_sinh_capture(double __x)  { return sinh(__x); }\n+    inline double _CPP_tanh_capture(double __x)  { return tanh(__x); }\n+    inline double _CPP_exp_capture(double __x)   { return exp(__x); }\n+    inline double _CPP_frexp_capture(double __x, int* __exp) \n+      { return frexp(__x, __exp); }\n+    inline double _CPP_ldexp_capture(double __x, int __exp) \n+      { return ldexp(__x, __exp); }\n+    inline double _CPP_log_capture(double __x)   { return log(__x); }\n+    inline double _CPP_log10_capture(double __x) { return log10(__x); }\n+    inline double _CPP_modf_capture(double __x, double* __iptr) \n+      { return modf(__x, __iptr); }\n+    inline double _CPP_pow_capture(double __x, double __y) \n+      { return pow(__x, __y); }\n+    inline double _CPP_sqrt_capture(double __x)  { return sqrt(__x); }\n+    inline double _CPP_ceil_capture(double __x)  { return ceil(__x); }\n+    inline double _CPP_fabs_capture(double __x)  { return fabs(__x); }\n+    inline double _CPP_floor_capture(double __x) { return floor(__x); }\n+    inline double _CPP_fmod_capture(double __x, double __y) \n+      { return fmod(__x, __y); }\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+# undef HUGE_VAL\n+# define HUGE_VAL ::_C_Swamp::_CPP_HUGE_VAL_capture()\n+# undef acos\n+# undef asin\n+# undef atan\n+# undef atan2\n+# undef cos\n+# undef sin\n+# undef tan\n+# undef cosh\n+# undef sinh\n+# undef tanh\n+# undef exp\n+# undef frexp\n+# undef ldexp\n+# undef log\n+# undef log10\n+# undef modf\n+# undef pow\n+# undef sqrt\n+# undef ceil\n+# undef fabs\n+# undef floor\n+# undef fmod\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      inline double acos(double __x)\n+        { return ::_C_Swamp::_CPP_acos_capture(__x); }\n+      inline double asin(double __x)\n+        { return ::_C_Swamp::_CPP_asin_capture(__x); }\n+      inline double atan(double __x)\n+        { return ::_C_Swamp::_CPP_atan_capture(__x); }\n+      inline double atan2(double __y, double __x)\n+      \t{ return ::_C_Swamp::_CPP_atan2_capture(__y,__x); }\n+      inline double cos(double __x)\n+        { return ::_C_Swamp::_CPP_cos_capture(__x); }\n+      inline double sin(double __x)\n+        { return ::_C_Swamp::_CPP_sin_capture(__x); }\n+      inline double tan(double __x)\n+        { return ::_C_Swamp::_CPP_tan_capture(__x); }\n+      inline double cosh(double __x)\n+        { return ::_C_Swamp::_CPP_cosh_capture(__x); }\n+      inline double sinh(double __x)\n+        { return ::_C_Swamp::_CPP_sinh_capture(__x); }\n+      inline double tanh(double __x)\n+        { return ::_C_Swamp::_CPP_tanh_capture(__x); }\n+      inline double exp(double __x)\n+        { return ::_C_Swamp::_CPP_exp_capture(__x); }\n+      inline double frexp(double __x, int* __exp)\n+      \t{ return ::_C_Swamp::_CPP_frexp_capture(__x, __exp); }\n+      inline double ldexp(double __x, int __exp)\n+      \t{ return ::_C_Swamp::_CPP_ldexp_capture(__x, __exp); }\n+      inline double log(double __x)\n+        { return ::_C_Swamp::_CPP_log_capture(__x); }\n+      inline double log10(double __x)\n+        { return ::_C_Swamp::_CPP_log10_capture(__x); }\n+      inline double modf(double __x, double* __iptr)\n+      \t{ return ::_C_Swamp::_CPP_modf_capture(__x, __iptr); }\n+      inline double pow(double __x, double __y)\n+      \t{ return ::_C_Swamp::_CPP_pow_capture(__x, __y); }\n+      inline double sqrt(double __x)\n+        { return ::_C_Swamp::_CPP_sqrt_capture(__x); }\n+      inline double ceil(double __x)\n+        { return ::_C_Swamp::_CPP_ceil_capture(__x); }\n+      inline double fabs(double __x)\n+        { return ::_C_Swamp::_CPP_fabs_capture(__x); }\n+      inline double floor(double __x)\n+        { return ::_C_Swamp::_CPP_floor_capture(__x); }\n+      inline double fmod(double __x, double __y)\n+      \t{ return ::_C_Swamp::_CPP_fmod_capture(__x, __y); }\n+\n+    }\n+  }\n+  namespace std {\n+\n+    // Adopt C names into std::\n+    using ::_C_Swamp::_C_Shadow::acos;\n+    using ::_C_Swamp::_C_Shadow::asin;\n+    using ::_C_Swamp::_C_Shadow::atan;\n+    using ::_C_Swamp::_C_Shadow::atan2;\n+    using ::_C_Swamp::_C_Shadow::cos;\n+    using ::_C_Swamp::_C_Shadow::sin;\n+    using ::_C_Swamp::_C_Shadow::tan;\n+    using ::_C_Swamp::_C_Shadow::cosh;\n+    using ::_C_Swamp::_C_Shadow::sinh;\n+    using ::_C_Swamp::_C_Shadow::tanh;\n+    using ::_C_Swamp::_C_Shadow::exp;\n+    using ::_C_Swamp::_C_Shadow::frexp;\n+    using ::_C_Swamp::_C_Shadow::ldexp;\n+    using ::_C_Swamp::_C_Shadow::log;\n+    using ::_C_Swamp::_C_Shadow::log10;\n+    using ::_C_Swamp::_C_Shadow::modf;\n+    using ::_C_Swamp::_C_Shadow::pow;\n+    using ::_C_Swamp::_C_Shadow::sqrt;\n+    using ::_C_Swamp::_C_Shadow::ceil;\n+    using ::_C_Swamp::_C_Shadow::fabs;\n+    using ::_C_Swamp::_C_Shadow::floor;\n+    using ::_C_Swamp::_C_Shadow::fmod;\n+\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif"}, {"sha": "5313887270a735330538c6231fcdf739c1fbd53f", "filename": "libstdc++-v3/shadow/bits/std_csetjmp.h", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csetjmp.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,74 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+#ifndef _CPP_CSETJMP\n+#define _CPP_CSETJMP 1\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <setjmp.h>\n+    }\n+    typedef jmp_buf   _CPP_jmp_buf_capture;\n+    inline int _CPP_setjmp_capture(jmp_buf __jb) { return setjmp(__jb); }\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+#  undef jmp_buf\n+#  undef setjmp\n+#  define setjmp(__jb) ::_C_Swamp::_CPP_setjmp_capture(__jb)\n+#  undef longjmp\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      typedef ::_C_Swamp::_CPP_jmp_buf_capture  jmp_buf;\n+    }\n+  }\n+  namespace std {\n+\n+    // Adopt C names into std::\n+    using ::_C_Swamp::_C_Shadow::jmp_buf;  \n+    using ::_C_Swamp::longjmp;\n+\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif\n+"}, {"sha": "36f3cb7681735e367586b1482626f9eecf2fcb56", "filename": "libstdc++-v3/shadow/bits/std_csignal.h", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_csignal.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,110 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+#ifndef _CPP_CSIGNAL\n+#define _CPP_CSIGNAL 1\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <signal.h>\n+      typedef void (*_CPP_CSIGFUN_capture)(int);  // a C function pointer\n+      typedef sig_atomic_t _CPP_sig_atomic_t_capture; \n+      const _CPP_CSIGFUN_capture _CPP_SIG_DFL_capture = SIG_DFL;\n+      const _CPP_CSIGFUN_capture _CPP_SIG_ERR_capture = SIG_ERR;\n+      const _CPP_CSIGFUN_capture _CPP_SIG_IGN_capture = SIG_IGN;\n+    }\n+    const int _CPP_SIGABRT_capture = SIGABRT;\n+    const int _CPP_SIGFPE_capture  = SIGFPE;\n+    const int _CPP_SIGILL_capture  = SIGILL;\n+    const int _CPP_SIGINT_capture  = SIGINT;\n+    const int _CPP_SIGSEGV_capture = SIGSEGV;\n+    const int _CPP_SIGTERM_capture = SIGTERM;\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+#  undef sig_atomic_t\n+#  undef raise\n+#  undef signal\n+#  undef SIG_DFL\n+#  define SIG_DFL \\\n+     reinterpret_cast<void (*)(int)>(::_C_Swamp::_CPP_SIG_DFL_capture)\n+#  undef SIG_ERR\n+#  define SIG_ERR \\\n+     reinterpret_cast<void (*)(int)>(::_C_Swamp::_CPP_SIG_ERR_capture)\n+#  undef SIG_IGN\n+#  define SIG_IGN \\\n+     reinterpret_cast<void (*)(int)>(::_C_Swamp::_CPP_SIG_IGN_capture)\n+#  undef SIGABRT\n+#  define SIGABRT ::_C_Swamp::_CPP_SIGABRT_capture\n+#  undef SIGFPE\n+#  define SIGFPE  ::_C_Swamp::_CPP_SIGFPE_capture \n+#  undef SIGILL\n+#  define SIGILL  ::_C_Swamp::_CPP_SIGILL_capture\n+#  undef SIGINT\n+#  define SIGINT  ::_C_Swamp::_CPP_SIGINT_capture\n+#  undef SIGSEGV\n+#  define SIGSEGV ::_C_Swamp::_CPP_SIGSEGV_capture\n+#  undef SIGTERM\n+#  define SIGTERM ::_C_Swamp::_CPP_SIGTERM_capture\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      typedef ::_C_Swamp::_CPP_sig_atomic_t_capture sig_atomic_t;\n+    }\n+  }\n+  namespace std {\n+\n+    // Adopt C names into std::\n+    using ::_C_Swamp::_C_Shadow::sig_atomic_t;\n+    using ::_C_Swamp::raise;\n+\n+    inline void (*signal(int __sig, void (* __fun)(int)))(int)\n+      { return reinterpret_cast<void (*)(int)>(\n+          ::_C_Swamp::signal(__sig,\n+\t    reinterpret_cast< ::_C_Swamp::_CPP_CSIGFUN_capture>(__fun)));\n+      }\n+\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      using ::std::signal;\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif\n+"}, {"sha": "29aee63e05eea172d9fa7d2a2260e09a707aef22", "filename": "libstdc++-v3/shadow/bits/std_cstdarg.h", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdarg.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,99 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+#ifndef _CPP_CSTDARG\n+#define _CPP_CSTDARG 1\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <stdarg.h>\n+    }\n+    typedef va_list   _CPP_va_list_capture;\n+#   ifdef __GNUC__\n+\n+#   elif\n+      template <class T>\n+        inline void _CPP_va_start_capture(va_list& __val, T& __v) \n+          { va_start(__val, __v); }\n+      template <class T>\n+        inline void _CPP_va_arg_capture(va_list& __val, T& __arg) \n+          { va_start(__val, __arg); }\n+      template <class T>\n+        inline T& _CPP_va_arg_capture(va_list& __val)\n+          { return va_arg(__val, T); }\n+      template <class T>\n+        inline void _CPP_va_end(va_list& __val)\n+          { va_end(__val); }\n+#   endif\n+\n+    // typedef size_t    _CPP_size_t_capture;  // handled in <cstddef>\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+#  ifdef __GNUC__\n+\n+#    undef va_list\n+     using _C_Swamp::__gnuc_va_list;\n+\n+#  elif  /* probably must be tailored for each compiler, as above. */\n+\n+#    undef va_list\n+#    undef va_start\n+#    define va_start(a,b) ::_C_Swamp::_CPP_va_start_capture(a,b)\n+#    undef va_arg\n+#    define va_arg(a,b)   ::_C_Swamp::_CPP_va_arg_capture<b>(a)\n+#    undef va_end\n+#    define va_end(a)     ::_C_Swamp::_CPP_va_end_capture(a)\n+\n+#  endif\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      typedef ::_C_Swamp::_CPP_va_list_capture va_list;\n+    }\n+  }\n+  namespace std {\n+    using ::_C_Swamp::_C_Shadow::va_list;  \n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif\n+"}, {"sha": "9ea0b6ccedc2ac78fabb69426e381674d2119242", "filename": "libstdc++-v3/shadow/bits/std_cstddef.h", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstddef.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,77 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 18.1  Types\n+//\n+\n+#ifndef _CPP_CSTDDEF\n+#define _CPP_CSTDDEF 1\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <stddef.h>\n+    }\n+    typedef ptrdiff_t _CPP_ptrdiff_t_capture; \n+    typedef size_t    _CPP_size_t_capture; \n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+#  undef ptrdiff_t  \n+#  undef size_t  \n+#  undef wchar_t  \n+#  undef  NULL\n+#  define NULL 0 \n+// # undef offsetof\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      typedef ::_C_Swamp::_CPP_ptrdiff_t_capture  ptrdiff_t;\n+      typedef ::_C_Swamp::_CPP_size_t_capture  size_t;\n+    }\n+  }\n+  namespace std {\n+\n+    // Adopt C names into std::\n+    using ::_C_Swamp::_C_Shadow::ptrdiff_t;  \n+    using ::_C_Swamp::_C_Shadow::size_t;  \n+\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif\n+"}, {"sha": "44e16338e25bafa417d63e269fd540dd7babf0fe", "filename": "libstdc++-v3/shadow/bits/std_cstdio.h", "status": "added", "additions": 367, "deletions": 0, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdio.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,367 @@\n+// -*- C++ -*- header wrapper.\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 27.8.2  C Library files\n+//\n+\n+// XXX problems?  Uses size_t, va_list in interfaces.  \n+//   Maybe <stdio.h> needs a size_t macro defined.  Maybe it \n+//   clobbers va_list.\n+// \n+// Also,\n+//  uses va_start, va_end in implementation of vfprintf and\n+//  vfscanf.  Maybe those shouldn't be inline.\n+\n+#ifndef _CPP_CSTDIO\n+#define _CPP_CSTDIO 1\n+\n+# include <bits/std_cstddef.h>  /* pick up size_t, NULL */\n+# include <bits/std_cstdarg.h>  /* pick up va_list, va_start, va_end */\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <stdio.h>\n+    }\n+    // size_t handled in <cstddef>\n+    typedef FILE _CPP_FILE_capture;\n+    typedef fpos_t _CPP_fpos_t_capture;\n+    // NULL done in <stddef.h>\n+    const int _CPP_IOFBF_capture = _IOFBF;\n+    const int _CPP_IOLBF_capture = _IOLBF;\n+    const int _CPP_IONBF_capture = _IONBF;\n+    const int _CPP_BUFSIZ_capture = BUFSIZ;\n+    const int _CPP_EOF_capture = EOF;\n+    const int _CPP_FOPEN_MAX_capture = FOPEN_MAX;\n+    const int _CPP_FILENAME_MAX_capture = FILENAME_MAX;\n+    const int _CPP_L_tmpnam_capture = L_tmpnam;\n+    const int _CPP_SEEK_CUR_capture = SEEK_CUR;\n+    const int _CPP_SEEK_END_capture = SEEK_END;\n+    const int _CPP_SEEK_SET_capture = SEEK_SET;\n+    const int _CPP_TMP_MAX_capture = TMP_MAX;\n+\n+    inline FILE* _CPP_stderr_capture() { return stderr; }\n+    inline FILE* _CPP_stdin_capture()  { return stdin; }\n+    inline FILE* _CPP_stdout_capture() { return stdout; }\n+\n+    inline int _CPP_getc_capture(FILE* __f)        { return getc(__f); }\n+    inline int _CPP_getchar_capture()              { return getchar(); }\n+    inline int _CPP_putc_capture(int __c, FILE* __f) { return putc(__c, __f); }\n+    inline int _CPP_putchar_capture(int __c)       { return putchar(__c); }\n+    inline int _CPP_feof_capture(FILE* __f)        { return feof(__f); }\n+\n+    namespace _C_Shadow {\n+    }\n+\n+  } // close namespace ::_C_Swamp::\n+\n+// # undef size_t  /* handled in <cstddef> */\n+# undef FILE \n+# undef fpos_t \n+# undef _IOFBF\n+# define _IOFBF\t\t::_C_Swamp::_CPP__IOFBF_capture\n+# undef _IOLBF\n+# define _IOLBF\t\t::_C_Swamp::_CPP__IOLBF_capture\n+# undef _IONBF\t\n+# define _IONBF\t\t::_C_Swamp::_CPP__IONBF_capture\n+# undef BUFSIZ\n+# define BUFSIZ\t\t::_C_Swamp::_CPP_BUFSIZ_capture\n+# undef EOF\n+# define EOF\t\t::_C_Swamp::_CPP_EOF_capture\n+# undef FOPEN_MAX\n+# define FOPEN_MAX\t::_C_Swamp::_CPP_FOPEN_MAX_capture\n+# undef FILENAME_MAX\n+# define FILENAME_MAX\t::_C_Swamp::_CPP_FILENAME_MAX_capture\n+# undef L_tmpnam\n+# define L_tmpnam\t::_C_Swamp::_CPP_L_tmpnam_capture\n+# undef SEEK_CUR\n+# define SEEK_CUR\t::_C_Swamp::_CPP_SEEK_CUR_capture\n+# undef SEEK_END\n+# define SEEK_END\t::_C_Swamp::_CPP_SEEK_END_capture\n+# undef SEEK_SET\n+# define SEEK_SET\t::_C_Swamp::_CPP_SEEK_SET_capture\n+# undef TMP_MAX\n+# define TMP_MAX\t::_C_Swamp::_CPP_TMP_MAX_capture\n+\n+# undef remove\n+# undef rename\n+# undef tmpfile\n+# undef tmpnam\n+# undef fclose\n+# undef fflush\n+# undef fopen\n+# undef freopen\n+# undef setbuf\n+# undef setvbuf\n+# undef fprintf\n+# undef fscanf\n+# undef printf\n+# undef scanf\n+# undef sprintf\n+# undef sscanf\n+# undef vfprintf\n+# undef vprintf\n+# undef vsprintf\n+# undef fgetc\n+# undef fgets\n+# undef fputc\n+# undef fputs\n+# undef getc\n+# undef getchar\n+# undef gets\n+# undef putc\n+# undef putchar\n+# undef puts\n+# undef ungetc\n+# undef fread\n+# undef fwrite\n+# undef fgetpos\n+# undef fseek\n+# undef fsetpos\n+# undef ftell\n+# undef rewind\n+# undef clearerr\n+# undef feof\n+# undef ferror\n+# undef perror\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+  namespace std {\n+\n+    // Adopt C names into std::\n+\n+    struct FILE   : ::_C_Swamp::_CPP_FILE_capture { };\n+    struct fpos_t { ::_C_Swamp::_CPP_fpos_t_capture _M_dummy; };\n+\n+    inline FILE* _CPP_stderr()\n+      { return reinterpret_cast<FILE*>( ::_C_Swamp::_CPP_stderr_capture() ); }\n+    inline FILE* _CPP_stdin()\n+      { return reinterpret_cast<FILE*>( ::_C_Swamp::_CPP_stdin_capture() ); }\n+    inline FILE* _CPP_stdout()\n+      { return reinterpret_cast<FILE*>( ::_C_Swamp::_CPP_stdout_capture() ); }\n+\n+    using ::_C_Swamp::remove;\n+    using ::_C_Swamp::rename;\n+\n+    inline FILE*\n+      tmpfile() { return reinterpret_cast<FILE*>(::_C_Swamp::tmpfile()); }\n+\n+    using ::_C_Swamp::tmpnam;\n+\n+    inline int\n+      fclose(FILE* __f) { return ::_C_Swamp::fclose(__f); }\n+\n+    inline int\n+      fflush(FILE* __f) { return ::_C_Swamp::fflush(__f); }\n+\n+    inline FILE*\n+      fopen(char const* __name, char const* __mode) \n+        { return reinterpret_cast<FILE*>(::_C_Swamp::fopen(__name,__mode)); }\n+\n+    inline FILE*\n+      freopen(char const* __name, char const* __mode, FILE* __f) \n+        { return reinterpret_cast<FILE*>(\n+\t  ::_C_Swamp::freopen(__name,__mode,__f)); }\n+\n+    inline void\n+      setbuf(FILE* __f, char* __buf) \n+        { return ::_C_Swamp::setbuf(__f, __buf); }\n+\n+    inline int\n+      setvbuf(FILE* __f, char* __buf, int __mode, size_t __size) \n+        { return ::_C_Swamp::setvbuf(__f, __buf, __mode, __size); }\n+\n+    inline int\n+      fprintf(FILE* __f, char const* __fmt, ...)\n+        { va_list __v; va_start(__v,__fmt); \n+          int __i = ::_C_Swamp::vfprintf(__f, __fmt, __v); va_end(__v);\n+\t    return __i; }\n+\n+    inline int\n+      fscanf(FILE* __f, char const* __fmt, ...)\n+        { va_list __v; va_start(__v,__fmt); \n+          int __i = ::_C_Swamp::vfscanf(__f, __fmt, __v); va_end(__v);\n+\t    return __i; }\n+\n+    using ::_C_Swamp::printf;\n+    using ::_C_Swamp::scanf;\n+    using ::_C_Swamp::sprintf;\n+    using ::_C_Swamp::sscanf;\n+\n+    // using ::_C_Swamp::vfprintf;\n+    inline int\n+      vfprintf(FILE* __f, char const* __fmt, va_list __v)\n+        { return ::_C_Swamp::vfprintf(__f, __fmt, __v); }\n+\n+    inline int\n+      vprintf(char const* __fmt, va_list __v)\n+        { return ::_C_Swamp::vprintf(__fmt, __v); }\n+\n+    inline int\n+      vsprintf(char* __buf, char const* __fmt, va_list __v)\n+        { return ::_C_Swamp::vsprintf(__buf, __fmt, __v); }\n+\n+    inline int\n+      fgetc(FILE* __f) { return ::_C_Swamp::fgetc(__f); }\n+\n+    // using ::_C_Swamp::fgets;\n+    inline char*\n+      fgets(char* __buf, int __n, FILE* __f) \n+        { return ::_C_Swamp::fgets(__buf, __n, __f); }\n+\n+    inline int\n+      fputc(int __c, FILE* __f) { return ::_C_Swamp::fputc(__c, __f); }\n+\n+    inline int\n+      fputs(char const* __s, FILE* __f) \n+        { return ::_C_Swamp::fputs(__s, __f); }\n+\n+    inline int\n+      getc(FILE* __f) { return ::_C_Swamp::_CPP_getc_capture(__f); }\n+\n+    inline int\n+      getchar() { return ::_C_Swamp::_CPP_getchar_capture(); }\n+\n+    using ::_C_Swamp::gets;\n+\n+    inline int\n+      putc(int __c, FILE* __f) \n+        { return ::_C_Swamp::_CPP_putc_capture(__c, __f); }\n+\n+    inline int\n+      putchar(int __c) { return ::_C_Swamp::_CPP_putchar_capture(__c); }\n+\n+    using ::_C_Swamp::puts;\n+\n+    // using ::_C_Swamp::ungetc;\n+    inline int\n+      ungetc(int __c, FILE* __f) { return ::_C_Swamp::ungetc(__c, __f); }\n+\n+    inline size_t\n+      fread(void* __p, size_t __z, size_t __n, FILE* __f)\n+        { return ::_C_Swamp::fread(__p,__z,__n,__f); }\n+\n+    inline size_t\n+      fwrite(void const* __p, size_t __z, size_t __n, FILE* __f)\n+        { return ::_C_Swamp::fwrite(__p,__z,__n,__f); }\n+\n+    inline int\n+      fgetpos(FILE* __f, fpos_t* __pos)\n+        { return ::_C_Swamp::fgetpos(__f,&__pos->_M_dummy); }\n+\n+    inline int\n+      fseek(FILE* __f, long __off, int __how)\n+        { return ::_C_Swamp::fseek(__f,__off,__how); }\n+\n+    inline int\n+      fsetpos(FILE* __f, fpos_t const* __pos)\n+        { return ::_C_Swamp::fsetpos(__f,&__pos->_M_dummy); }\n+\n+    inline long\n+      ftell(FILE* __f) { return ::_C_Swamp::ftell(__f); }\n+\n+    inline void\n+      rewind(FILE* __f) { return ::_C_Swamp::rewind(__f); }\n+\n+    inline void\n+      clearerr(FILE* __f) { return ::_C_Swamp::clearerr(__f); }\n+\n+    inline int\n+      feof(FILE* __f) { return ::_C_Swamp::_CPP_feof_capture(__f); }\n+\n+    inline int\n+      ferror(FILE* __f) { return ::_C_Swamp::ferror(__f); }\n+\n+    using ::_C_Swamp::perror;\n+\n+  } // close namespace std::\n+  \n+# undef stderr\n+# define stderr ::std::_CPP_stderr()\n+# undef stdin\n+# define stdin  ::std::_CPP_stdin()\n+# undef stdout\n+# define stdout ::std::_CPP_stdout()\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      using ::std::FILE;\n+      using ::std::fpos_t;\n+\n+      // using ::std::remove;\n+      // using ::std::rename;\n+      using ::std::tmpfile;\n+      // using ::std::tmpnam;\n+      using ::std::fclose;\n+      using ::std::fflush;\n+      using ::std::fopen;\n+      using ::std::freopen;\n+      using ::std::setbuf;\n+      using ::std::setvbuf;\n+      using ::std::fprintf;\n+      using ::std::fscanf;\n+      // using ::std::printf;\n+      // using ::std::scanf;\n+      // using ::std::sprintf;\n+      // using ::std::sscanf;\n+      using ::std::vfprintf;\n+      using ::std::vprintf;\n+      using ::std::vsprintf;  \n+      using ::std::fgetc;\n+      using ::std::fgets;\n+      using ::std::fputc;\n+      using ::std::fputs;\n+      using ::std::getc;\n+      using ::std::getchar;\n+      // using ::std::gets;\n+      using ::std::putc;\n+      using ::std::putchar;\n+      // using ::std::puts;\n+      using ::std::ungetc;\n+      using ::std::fread;\n+      using ::std::fwrite;\n+      using ::std::fgetpos;\n+      using ::std::fseek;\n+      using ::std::fsetpos;\n+      using ::std::ftell;\n+      using ::std::rewind;\n+      using ::std::clearerr;\n+      using ::std::feof;\n+      using ::std::ferror;\n+      // using ::std::perror;\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif\n+"}, {"sha": "3427cd84ccb8564fd5e9be2ed3076bdf07775104", "filename": "libstdc++-v3/shadow/bits/std_cstdlib.h", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstdlib.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,221 @@\n+// -*- C++ -*- header wrapper\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+// Function decls in this header are overloaded on the \n+// extern \"C\"-ness of arguments.  This is a rich ground\n+// for compiler bugs.\n+\n+#ifndef _CPP_CSTDLIB\n+#define _CPP_CSTDLIB 1\n+\n+# include <bits/std_cstddef.h>  /* pick up NULL, size_t */\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <stdlib.h>\n+      typedef int (*_C_cmp_fun_ptr)(const void*, const void*);  // C fn ptr\n+    }\n+    const int _CPP_EXIT_SUCCESS_capture = int(EXIT_SUCCESS);\n+    const int _CPP_EXIT_FAILURE_capture = int(EXIT_FAILURE);\n+    const int _CPP_RAND_MAX_capture     = int(RAND_MAX);\n+    inline int _CPP_MB_CUR_MAX_capture() { return int(MB_CUR_MAX); }\n+    // typedef size_t  _CPP_size_t_capture;\n+    // typedef wchar_t _CPP_wchar_t_capture;\n+    typedef div_t   _CPP_div_t_capture;\n+    typedef ldiv_t  _CPP_ldiv_t_capture;\n+\n+    namespace _C_Shadow { \n+    }\n+  } // close namespace ::_C_Swamp::\n+\n+#  undef size_t\n+#  undef wchar_t\n+#  undef div_t\n+#  undef ldiv_t\n+\n+// <cstddef>\n+// #  undef  NULL\n+// #  define NULL         0\n+#  undef  EXIT_SUCCESS\n+#  define EXIT_SUCCESS (::_C_Swamp::_CPP_EXIT_SUCCESS_capture)\n+#  undef  EXIT_FAILURE\n+#  define EXIT_FAILURE (::_C_Swamp::_CPP_EXIT_FAILURE_capture)\n+#  undef  RAND_MAX\n+#  define RAND_MAX     (::_C_Swamp::_CPP_RAND_MAX_capture)\n+#  undef  MB_CUR_MAX\n+#  define MB_CUR_MAX   (::_C_Swamp::_CPP_MB_CUR_MAX_capture())\n+\n+#  undef atof\n+#  undef atoi\n+#  undef atol\n+#  undef strtod\n+#  undef strtol\n+#  undef strtoul\n+#  undef rand\n+#  undef srand\n+#  undef calloc\n+#  undef free\n+#  undef malloc\n+#  undef realloc\n+#  undef abort\n+#  undef atexit\n+#  undef exit\n+#  undef getenv\n+#  undef system\n+#  undef bsearch\n+#  undef qsort\n+#  undef abs\n+#  undef div\n+#  undef labs\n+#  undef ldiv\n+#  undef mblen\n+#  undef mbtowc\n+#  undef wctomb\n+#  undef mbstowcs\n+#  undef wcstombs\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      // these come from <cstddef>\n+      // typedef ::_C_Swamp::_CPP_size_t_capture  size_t;\n+      // typedef ::_C_Swamp::_CPP_wchar_t_capture wchar_t;\n+    }\n+  }\n+  namespace std {\n+\n+    // Adopt C names into std::\n+    // using ::_C_Swamp::_C_Shadow::size_t;  \n+    // using ::_C_Swamp::_C_Shadow::wchar_t;\n+\n+    typedef ::_C_Swamp::_CPP_div_t_capture _CPP_div_t;\n+    struct div_t  : _CPP_div_t {};\n+    typedef ::_C_Swamp::_CPP_ldiv_t_capture _CPP_ldiv_t;\n+    struct ldiv_t : _CPP_ldiv_t {};\n+    // note: div_t and ldiv_t are still POD types \n+\n+    // EXIT_SUCCESS, EXIT_FAILURE, RAND_MAX, MB_CUR_MAX, NULL\n+\n+    using ::_C_Swamp::atof;\n+    using ::_C_Swamp::atoi;\n+    using ::_C_Swamp::atol;\n+    using ::_C_Swamp::strtod;\n+    using ::_C_Swamp::strtol;\n+    using ::_C_Swamp::strtoul;\n+    using ::_C_Swamp::rand;\n+    using ::_C_Swamp::srand;\n+    using ::_C_Swamp::calloc;\n+    using ::_C_Swamp::free;\n+    using ::_C_Swamp::malloc;\n+    using ::_C_Swamp::realloc;\n+    void abort();     // XXX must define this correctly for C++.\n+\n+#define _FUN_OVERLOAD_BUG\n+    // extern \"C\" funs declared void f(int (*)()) overload OK with C++ funs,\n+    //  but not if declared void f(int (*)(void)).\n+\n+#if !defined(__GNUC__) || !defined(_FUN_OVERLOAD_BUG)\n+    using ::_C_Swamp::atexit;     // XXX must redefine this one!\n+#endif\n+    int atexit(void (*)());       // XXX must define this.\n+      // More precisely, we need an extern \"C\" atexit() that\n+      //   implements the correct semantics, but hides the link-name\n+      //   atexit found in the C library, and a C++ atexit too.  If\n+      //   C and C++ calling conventions differ, each pointer must\n+      //   be marked to be called using the proper convention.\n+\n+    void exit(int __i)   // XXX must define correctly for C++, like atexit().\n+      { ::_C_Swamp::exit(__i); }\n+\n+    using ::_C_Swamp::getenv;\n+    using ::_C_Swamp::system;\n+\n+    // XXX note that the raw conversion between C and C++ function \n+    // pointers may not be portable to some targets; those targets need\n+    // a forwarding function.\n+\n+#if !defined(__GNUC__) || !defined(_FUN_OVERLOAD_BUG)\n+    using ::_C_Swamp::bsearch;  // overload\n+#endif\n+    inline void* bsearch(const void* __key, const void* __base, size_t __n, \n+\t\t  size_t __size, int (*__cmp)(const void*, const void*))\n+      { return ::_C_Swamp::bsearch(__key,__base,__n,__size,\n+          reinterpret_cast< ::_C_Swamp::_C_cmp_fun_ptr>(__cmp)); }  // XXX\n+\n+#if !defined(__GNUC__) || !defined(_FUN_OVERLOAD_BUG)\n+    using ::_C_Swamp::qsort;    // overload\n+#endif\n+    inline void qsort(void* __base, size_t __n, size_t __size,\n+\t              int (*__cmp)(const void*, const void*)) \n+      { return ::_C_Swamp::qsort(__base,__n,__size,\n+          reinterpret_cast< ::_C_Swamp::_C_cmp_fun_ptr>(__cmp)); }  // XXX\n+\n+\n+    inline int abs(int __x) \n+      { return __x >= 0 ? __x : -__x; }\n+    inline div_t div(int __n, int __d)\n+      { _div_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+    inline long labs(long __x)\n+      { return __x >= 0 ? __x : -__x; }\n+    inline ldiv_t ldiv(long __num, long __den)\n+      { _ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+\n+    using ::_C_Swamp::mblen;\n+    using ::_C_Swamp::mbtowc;;\n+    using ::_C_Swamp::wctomb;\n+    using ::_C_Swamp::mbstowcs;\n+    using ::_C_Swamp::wcstombs;\n+\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      using ::std::div_t;\n+      using ::std::ldiv_t;\n+\n+      using ::std::abort;\n+      using ::std::atexit;\n+      using ::std::exit;\n+      using ::std::bsearch;\n+      using ::std::qsort;\n+      using ::std::abs;\n+      using ::std::div;\n+      using ::std::labs;\n+      using ::std::ldiv;\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif\n+"}, {"sha": "258082be24257633e6ebf9ebcb1aeb8bb3322054", "filename": "libstdc++-v3/shadow/bits/std_cstring.h", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cstring.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,237 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+#ifndef _CPP_CSTRING\n+#define _CPP_CSTRING 1\n+# if defined __GLIBC__ && __GLIBC__ >= 2\n+// We must not see the optimized string functions GNU libc defines.\n+#  define __NO_STRING_INLINES\n+# endif\n+\n+# include <bits/std_cstddef.h>  /* pick up size_t, NULL */\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <string.h>\n+    }\n+\n+    // size_t\n+    // NULL\n+\n+    // We do inline captures of most of these in case they\n+    // have been optimized with macros.  \n+\n+    inline void* _CPP_memcpy_capture(void* __s1, void const* __s2, size_t __n)\n+      { return memcpy(__s1,__s2,__n); }\n+    inline void* _CPP_memmove_capture(void* __s1, void const* __s2, size_t __n)\n+      { return memmove(__s1,__s2,__n); }\n+    inline void* _CPP_strcpy_capture(char* __s1, char const* __s2)\n+      { return strcpy(__s1,__s2); }\n+    inline char* _CPP_strncpy_capture(char* __s1, char const* __s2, size_t __n)\n+      { return strncpy(__s1,__s2,__n); }\n+    inline char* _CPP_strcat_capture(char* __s1, char const* __s2)\n+      { return strcat(__s1,__s2); }\n+    inline char* _CPP_strncat_capture(char* __s1, char const* __s2, size_t __n)\n+      { return strncat(__s1,__s2,__n); }\n+    inline int _CPP_memcmp_capture(void const* __s1, \n+\t\t\t\t   void const* __s2, size_t __n)\n+      { return memcmp(__s1,__s2,__n); }\n+    inline int _CPP_strcmp_capture(char const* __s1, char const* __s2)\n+      { return strcmp(__s1,__s2); }\n+    inline int _CPP_strcoll_capture(char const* __s1, char const* __s2)\n+      { return strcoll(__s1,__s2); }\n+    inline int _CPP_strncmp_capture(char const* __s1, \n+\t\t                    char const* __s2, size_t __n)\n+      { return strncmp(__s1,__s2,__n); }\n+    inline size_t _CPP_strxfrm_capture(char* __b, char const* __s, size_t __n)\n+      { return strxfrm(__b,__s,__n); }\n+    inline void* _CPP_memchr_capture(void const* __s1, int __c, size_t __n)\n+      { return memchr(__s1,__c,__n); }\n+    inline char* _CPP_strchr_capture(char const* __s1, int __c)\n+      { return strchr(__s1,__c); }\n+    inline size_t _CPP_strcspn_capture(char const* __s1, char const* __s2)\n+      { return strcspn(__s1,__s2); }\n+    inline char* _CPP_strpbrk_capture(char const* __s1, char const* __s2)\n+      { return strpbrk(__s1,__s2); }\n+    inline char* _CPP_strrchr_capture(char const* __s1, int __c)\n+      { return strrchr(__s1,__c); }\n+    inline size_t _CPP_strspn_capture(char const* __s1, char const* __s2)\n+      { return strspn(__s1,__s2); }\n+    inline char* _CPP_strstr_capture(char const* __s1, char const* __s2)\n+      { return strstr(__s1,__s2); }\n+    inline char* _CPP_strtok_capture(char* __s1, char const* __s2)\n+      { return strtok(__s1,__s2); }\n+    inline void* _CPP_memset_capture(void* __s, int __c, size_t __n)\n+      { return memset(__s,__c,__n); }\n+    // inline char* _CPP_strerror_capture(int __num)\n+    //  { return strerror(__num); }\n+    inline size_t _CPP_strlen_capture(char const* __s)\n+      { return strlen(__s); }\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+// size_t, NULL\n+# undef memcpy\n+# undef memmove\n+# undef strcpy\n+# undef strncpy\n+# undef strcat\n+# undef strncat\n+# undef memcmp\n+# undef strcmp\n+# undef strcoll\n+# undef strncmp\n+# undef strxfrm\n+# undef memchr\n+# undef strchr\n+# undef strcspn\n+# undef strpbrk\n+# undef strrchr\n+# undef strspn\n+# undef strstr\n+# undef strtok\n+# undef memset\n+# undef strerror\n+# undef strlen\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+  namespace std {\n+\n+    // Redefine most of these inline.  Note that the \n+    // C++ definition differs from C in some cases.\n+\n+    inline void* memcpy(void* __s1, void const* __s2, size_t __n)\n+      { return ::_C_Swamp::_CPP_memcpy_capture(__s1,__s2,__n); }\n+    inline void* memmove(void* __s1, void const* __s2, size_t __n)\n+      { return ::_C_Swamp::_CPP_memmove_capture(__s1,__s2,__n); }\n+    inline void* strcpy(char* __s1, char const* __s2)\n+      { return ::_C_Swamp::_CPP_strcpy_capture(__s1,__s2); }\n+    inline char* strncpy(char* __s1, char const* __s2, size_t __n)\n+      { return ::_C_Swamp::_CPP_strncpy_capture(__s1,__s2,__n); }\n+    inline char* strcat(char* __s1, char const* __s2)\n+      { return ::_C_Swamp::_CPP_strcat_capture(__s1,__s2); }\n+    inline char* strncat(char* __s1, char const* __s2, size_t __n)\n+      { return ::_C_Swamp::_CPP_strncat_capture(__s1,__s2,__n); }\n+    inline int memcmp(void const* __s1, \n+\t\t      void const* __s2, size_t __n)\n+      { return ::_C_Swamp::_CPP_memcmp_capture(__s1,__s2,__n); }\n+    inline int strcmp(char const* __s1, char const* __s2)\n+      { return ::_C_Swamp::_CPP_strcmp_capture(__s1,__s2); }\n+    inline int strcoll(char const* __s1, char const* __s2)\n+      { return ::_C_Swamp::_CPP_strcoll_capture(__s1,__s2); }\n+    inline int strncmp(char const* __s1, \n+\t\t                    char const* __s2, size_t __n)\n+      { return ::_C_Swamp::_CPP_strncmp_capture(__s1,__s2,__n); }\n+    inline size_t strxfrm(char* __b, char const* __s, size_t __n)\n+      { return ::_C_Swamp::_CPP_strxfrm_capture(__b,__s,__n); }\n+\n+    inline void const* memchr(void const* __s1, int __c, size_t __n)\n+      { return ::_C_Swamp::_CPP_memchr_capture(__s1,__c,__n); }\n+    inline       void* memchr(      void* __s1, int __c, size_t __n)\n+      { return ::_C_Swamp::_CPP_memchr_capture(__s1,__c,__n); }\n+\n+    inline char const* strchr(char const* __s1, int __c)\n+      { return ::_C_Swamp::_CPP_strchr_capture(__s1,__c); }\n+    inline       char* strchr(      char* __s1, int __c)\n+      { return ::_C_Swamp::_CPP_strchr_capture(__s1,__c); }\n+\n+    inline size_t strcspn(char const* __s1, char const* __s2)\n+      { return ::_C_Swamp::_CPP_strcspn_capture(__s1,__s2); }\n+\n+    inline char const* strpbrk(char const* __s1, char const* __s2)\n+      { return ::_C_Swamp::_CPP_strpbrk_capture(__s1,__s2); }\n+    inline       char* strpbrk(      char* __s1, char const* __s2)\n+      { return ::_C_Swamp::_CPP_strpbrk_capture(__s1,__s2); }\n+\n+    inline char const* strrchr(char const* __s1, int __c)\n+      { return ::_C_Swamp::_CPP_strrchr_capture(__s1,__c); }\n+    inline       char* strrchr(      char* __s1, int __c)\n+      { return ::_C_Swamp::_CPP_strrchr_capture(__s1,__c); }\n+\n+    inline size_t strspn(char const* __s1, char const* __s2)\n+      { return ::_C_Swamp::_CPP_strspn_capture(__s1,__s2); }\n+\n+    inline char const* strstr(char const* __s1, char const* __s2)\n+      { return ::_C_Swamp::_CPP_strstr_capture(__s1,__s2); }\n+    inline       char* strstr(      char* __s1, char const* __s2)\n+      { return ::_C_Swamp::_CPP_strstr_capture(__s1,__s2); }\n+\n+    inline char* strtok(char* __s1, char const* __s2)\n+      { return ::_C_Swamp::_CPP_strtok_capture(__s1,__s2); }\n+    inline void* memset(void* __s, int __c, size_t __n)\n+      { return ::_C_Swamp::_CPP_memset_capture(__s,__c,__n); }\n+\n+    using ::_C_Swamp::strerror;\n+\n+    inline size_t strlen(char const* __s)\n+      { return ::_C_Swamp::_CPP_strlen_capture(__s); }\n+\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      // adopt names back into C\n+      using ::std::memcpy;\n+      using ::std::memmove;\n+      using ::std::strcpy;\n+      using ::std::strncpy;\n+      using ::std::strcat;\n+      using ::std::strncat;\n+      using ::std::memcmp;\n+      using ::std::strcmp;\n+      using ::std::strcoll;\n+      using ::std::strncmp;\n+      using ::std::strxfrm;\n+      using ::std::memchr;\n+      using ::std::strchr;\n+      using ::std::strcspn;\n+      using ::std::strpbrk;\n+      using ::std::strrchr;\n+      using ::std::strspn;\n+      using ::std::strstr;\n+      using ::std::strtok;\n+      using ::std::memset;\n+      // using ::std::strerror;\n+      using ::std::strlen;\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif\n+"}, {"sha": "4caba882e9cc316157d12bd710d72ed6fd20338e", "filename": "libstdc++-v3/shadow/bits/std_ctime.h", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_ctime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_ctime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_ctime.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,127 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.5  Date and time\n+//\n+\n+#ifndef _CPP_CTIME\n+#define _CPP_CTIME 1\n+\n+# include <bits/std_cstddef.h>  /* pick up size_t, NULL */\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <time.h>\n+    }\n+    inline clock_t _CPP_CLOCKS_PER_SEC_capture() \n+      { return CLOCKS_PER_SEC; }\n+    // typedef size_t    _CPP_size_t_capture;  // handled in <cstddef>\n+    typedef clock_t   _CPP_clock_t_capture;\n+    typedef time_t    _CPP_time_t_capture;\n+    typedef struct tm _CPP_tm_capture;\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+// #  undef  NULL\n+// #  define NULL 0  /* handled in <cstddef> */\n+#  undef  CLOCKS_PER_SEC\n+#  define CLOCKS_PER_SEC (::_C_Swamp::_CPP_CLOCKS_PER_SEC_capture())\n+\n+#  undef size_t  /* handled in <cstddef> */\n+#  undef clock_t\n+#  undef time_t\n+#  undef tm\n+#  undef clock\n+#  undef difftime\n+#  undef mktime\n+#  undef time\n+#  undef asctime\n+#  undef ctime\n+#  undef gmtime\n+#  undef localtime\n+#  undef strftime\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      // typedef ::_C_Swamp::_CPP_size_t_capture  size_t;\n+      typedef ::_C_Swamp::_CPP_clock_t_capture  clock_t;\n+      typedef ::_C_Swamp::_CPP_time_t_capture   time_t;\n+    }\n+  }\n+  namespace std {\n+\n+    // Adopt C names into std::\n+    // using ::_C_Swamp::_C_Shadow::size_t;  \n+    using ::_C_Swamp::_C_Shadow::clock_t;  \n+    using ::_C_Swamp::_C_Shadow::time_t;\n+\n+    // note: still a POD type:\n+    struct tm  : ::_C_Swamp::_CPP_tm_capture  { };\n+\n+    using ::_C_Swamp::clock;\n+    using ::_C_Swamp::difftime;\n+    using ::_C_Swamp::mktime;\n+    using ::_C_Swamp::time;\n+\n+    inline char* asctime(const tm* __tp) \n+      { return ::_C_Swamp::asctime(\n+          static_cast< ::_C_Swamp::_CPP_tm_capture const*>(__tp)); }\n+\n+    using ::_C_Swamp::ctime;\n+\n+    inline tm* gmtime(time_t const* __tp) \n+      { return reinterpret_cast<tm*>(::_C_Swamp::gmtime(__tp)); }\n+\n+    inline tm* localtime(const time_t* __tp) \n+      { return reinterpret_cast<tm*>(::_C_Swamp::localtime(__tp)); } \n+\n+    inline size_t strftime(char* __buf, size_t __maxsz, \n+                           char const* __fmt, tm const* __tp) \n+      { return ::_C_Swamp::strftime(__buf, __maxsz, __fmt,\n+                 static_cast< ::_C_Swamp::_CPP_tm_capture const*>(__tp)); }\n+\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      using ::std::tm;\n+      using ::std::asctime;\n+      using ::std::gmtime;\n+      using ::std::localtime;\n+      using ::std::strftime;\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif\n+"}, {"sha": "bd1ec656af67da4bdf92823fafc9c13e516fc1f6", "filename": "libstdc++-v3/shadow/bits/std_cwchar.h", "status": "added", "additions": 278, "deletions": 0, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwchar.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,278 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 21\n+\n+// XXX: this file still needs hackery for system version dependencies\n+\n+#ifndef _CPP_CWCHAR\n+# define _CPP_CWCHAR 1\n+\n+# include <bits/std_cstddef.h>  /* size_t, NULL */\n+# include <bits/std_cstdio.h>   /* FILE */\n+# include <bits/std_ctime.h>    /* struct tm */\n+# include <bits/std_cstring.h>  /* memset */\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <wchar.h>\n+    }\n+    // NULL, size_t handled in <cstddef>\n+\n+    // wchar_t\n+    typedef wint_t _CPP_wint_t_capture;\n+    typedef mbstate_t _CPP_mbstate_t_capture;\n+    const wint_t _CPP_WEOF_capture = (wint_t)(WEOF);\n+\n+#if 0 /* XXX glibc-2.0 does not implement these. */\n+    inline wint_t _CPP_getwc_capture(FILE* __f)\n+      { return getwc(__f); }\n+    inline wint_t _CPP_getwchar_capture()\n+      { return getwchar(); }\n+    inline wint_t _CPP_putwc_capture(wint_t __c, FILE* __f)\n+      { return putwc(__c,__f); }\n+    inline wint_t _CPP_putwchar_capture(wint_t __c)\n+      { return putwchar(__c); }\n+#endif\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+// #  undef size_t  /* handled in <cstddef> */\n+# undef wchar_t\n+# undef wint_t\n+# undef mbstate_t\n+# undef WEOF\n+# define WEOF ::_C_Swamp::_CPP_WEOF_capture\n+\n+// the following are not in glibc-2.0\n+# undef fgetwc\n+# undef fgetws\n+# undef fputwc\n+# undef fputws\n+# undef ungetwc\n+# undef getwc\n+# undef getwchar\n+# undef putwc\n+# undef putwchar\n+# undef wprintf\n+# undef wsprintf\n+# undef wvsprintf\n+# undef wfsprintf\n+# undef wscanf\n+# undef wsscanf\n+# undef wvsscanf\n+# undef wfscanf\n+// XXX etc.\n+\n+# undef wcscpy\n+# undef wcscat\n+# undef wcscmp\n+# undef wcscoll\n+# undef wcsxfrm\n+# undef wcsdup\n+# undef wcschr\n+# undef wcscspn\n+# undef wcspbrk\n+# undef wcsstr\n+# undef wcstok\n+# undef wcslen\n+# undef wmemchr\n+# undef wmemcmp\n+# undef wmemcpy\n+# undef wmemmove\n+# undef wmemset\n+# undef btowc\n+# undef wctob\n+# undef mbsinit\n+# undef mbrtowc\n+# undef wcrtomb\n+# undef mbrlen\n+# undef mbsrtowcs\n+# undef wcsrtombs\n+#ifdef __USE_GNU\n+# undef mbsnrtowcs\n+# undef mbsnrtombs\n+# undef wcwidth\n+# undef wcswidth\n+# undef wcscmpy\n+#endif\n+# undef wcstod\n+# undef wcstol\n+# undef wcstoul\n+# undef wcsncat\n+# undef wcsncmp\n+# undef wcsncpy\n+# undef wcsrchr\n+# undef wcsspn\n+\n+  // XXX a bunch more names are required under C89 Amendment 1, \n+  // but they are not uniformly implemented.\n+\n+  // XXX the following are not supposed to be defined in <wchar.h>, \n+  //  but Sun does anyway.\n+# undef iswalpha\n+# undef iswupper\n+# undef iswlower\n+# undef iswdigit\n+# undef iswxdigit\n+# undef iswalnum\n+# undef iswspace\n+# undef iswpunct\n+# undef iswprint\n+# undef iswgraph\n+# undef iswcntrl\n+# undef iswctype\n+# undef towlower\n+# undef towupper\n+# undef wctype_t\n+# undef wctype\n+# undef wcspbrk\n+# undef wcswcs\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      typedef ::_C_Swamp::_CPP_wint_t_capture wint_t; \n+      // typedef ::_C_Swamp::_CPP_wctype_t_capture wctype_t;\n+    }\n+  }\n+  namespace std {\n+\n+    // using ::_C_Swamp::wchar_t;\n+    using ::_C_Swamp::_C_Shadow::wint_t;\n+    // using ::_C_Swamp::WEOF;\n+\n+   // XXX this might better be replaced with one unrelated to the C mbstate_t.\n+\n+   struct mbstate_t { \n+     _C_Swamp::_CPP_mbstate_t_capture _M_dum; \n+     mbstate_t() { std::memset(&_M_dum,0,sizeof(_M_dum)); }\n+   };\n+\n+#if 0 /* glibc-2.0 does not implement these. */\n+    inline wint_t fgetwc(FILE* __f)\n+      { return ::_C_Swamp::fgetwc(__f); }\n+    inline wchar_t* fgetws(wchar_t* __s, int __n, FILE* __f)\n+      { return ::_C_Swamp::fgetws(__s,__n,__f); }\n+    inline wint_t fputwc(wint_t __c, FILE* __f)\n+      { return ::_C_Swamp::fputwc(__c,__f); }\n+    inline int fputws(const wchar_t* __s, FILE* __f)\n+      { return ::_C_Swamp::fputws(__s,__f); }\n+    inline wint_t ungetwc(wint_t __c, FILE* __f)\n+      { return ::_C_Swamp::ungetwc(__c,__f); }\n+\n+    inline wint_t getwc(FILE* __f)\n+      { return ::_C_Swamp::_CPP_getwc_capture(__f); }\n+    inline wint_t getwchar()\n+      { return ::_C_Swamp::_CPP_getwchar_capture(); }\n+    inline wint_t putwc(wint_t __c, FILE* __f)\n+      { return ::_C_Swamp::_CPP_putwc_capture(__c,__f); }\n+    inline wint_t putwchar(wint_t __c)\n+      { return ::_C_Swamp::_CPP_putwchar_capture(__c); }\n+\n+    // similarly wprintf etc.\n+#endif\n+\n+    using ::_C_Swamp::wcscpy;\n+    using ::_C_Swamp::wcscat;\n+    using ::_C_Swamp::wcscmp;\n+    using ::_C_Swamp::wcscoll;\n+    using ::_C_Swamp::wcsxfrm;\n+    using ::_C_Swamp::wcschr;\n+    using ::_C_Swamp::wcscspn;\n+    using ::_C_Swamp::wcspbrk;\n+    using ::_C_Swamp::wcstok;\n+    using ::_C_Swamp::wcslen;\n+#ifndef __sun\n+    using ::_C_Swamp::wcsdup;\n+    using ::_C_Swamp::wcsstr;\n+    using ::_C_Swamp::wmemchr;\n+    using ::_C_Swamp::wmemcmp;\n+    using ::_C_Swamp::wmemcpy;\n+    using ::_C_Swamp::wmemmove;\n+    using ::_C_Swamp::wmemset;\n+    using ::_C_Swamp::btowc;\n+    using ::_C_Swamp::wctob;\n+    using ::_C_Swamp::mbsinit;\n+    using ::_C_Swamp::mbrtowc;\n+    using ::_C_Swamp::wcrtomb;\n+    using ::_C_Swamp::mbrlen;\n+#endif\n+#ifdef __USE_GNU\n+    using ::_C_Swamp::mbsrtowcs;\n+    using ::_C_Swamp::wcsrtombs;\n+    using ::_C_Swamp::mbsnrtowcs;\n+    using ::_C_Swamp::mbsnrtombs;\n+    using ::_C_Swamp::wcscmpy\n+    using ::_C_Swamp::wcwidth;\n+    using ::_C_Swamp::wcswidth;\n+#endif\n+    using ::_C_Swamp::wcstod;\n+    using ::_C_Swamp::wcstol;\n+    using ::_C_Swamp::wcstoul;\n+    using ::_C_Swamp::wcsncat;\n+    using ::_C_Swamp::wcsncmp;\n+    using ::_C_Swamp::wcsncpy;\n+    using ::_C_Swamp::wcsrchr;\n+    using ::_C_Swamp::wcsspn;\n+    // using ::_C_Swamp::wcswcs;\n+\n+#if 0  /* not implemented in glibc-2 */\n+    inline size_t wcsftime(wchar_t* __s, size_t __n, \n+\t\t           char const* __fmt, struct tm const* __tmb)\n+      { return ::_C_Swamp::wcsftime(__s,__n,__fmt,__tmb); }\n+\n+    using ::_C_Swamp::wctype;\n+#endif\n+\n+  }\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+#if 0 /* XXX glibc-2.0 does not implement these. */\n+      using ::std::fgetwc;\n+      using ::std::fgetws;\n+      using ::std::fputwc;\n+      using ::std::fputws;\n+      using ::std::ungetwc;\n+      using ::std::getwc;\n+      using ::std::getwchar;\n+      using ::std::putwc;\n+      using ::std::putwchar;\n+      using ::std::wcsftime;\n+      // XXX also wprintf etc.\n+#endif\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif"}, {"sha": "e3b1a292b40d810187c7e30991810083aabe3c1f", "filename": "libstdc++-v3/shadow/bits/std_cwctype.h", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fstd_cwctype.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,117 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: ???\n+//\n+\n+// XXX this is not complete\n+\n+#ifndef _CPP_CWCTYPE\n+#define _CPP_CWCTYPE 1\n+\n+# include <bits/std_cwchar.h>  /* pick up wint_t, WEOF */\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <wctype.h>\n+    }\n+    typedef wctype_t _CPP_wctype_t_capture;\n+    typedef wctrans_t _CPP_wctrans_t_capture;\n+\n+    // XXX probably should capture defs of the \"is\" functions.\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+# undef size_t  /* handled in <cstddef> */\n+# undef wchar_t\n+# undef wint_t\n+# undef wctype_t\n+# undef wctrans_t\n+// # undef WEOF\n+# undef iswalpha\n+# undef iswupper\n+# undef iswlower\n+# undef iswdigit\n+# undef iswxdigit\n+# undef iswalnum\n+# undef iswspace\n+# undef iswpunct\n+# undef iswprint\n+# undef iswgraph\n+# undef iswcntrl\n+# undef iswctype\n+# undef towlower\n+# undef towupper\n+\n+// SunOS macros\n+# undef iswascii\n+# undef iscodeset0\n+# undef iscodeset1\n+# undef iscodeset2\n+# undef iscodeset3\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      typedef ::_C_Swamp::_CPP_wctype_t_capture wctype_t;\n+      typedef ::_C_Swamp::_CPP_wctrans_t_capture wctrans_t;\n+    }\n+  }\n+  namespace std {\n+    using ::_C_Swamp::_C_Shadow::wctype_t;\n+    using ::_C_Swamp::_C_Shadow::wctrans_t;\n+\n+    // XXX probably should capture these to inlines.\n+    using ::_C_Swamp::iswalpha;\n+    using ::_C_Swamp::iswupper;\n+    using ::_C_Swamp::iswlower;\n+    using ::_C_Swamp::iswdigit;\n+    using ::_C_Swamp::iswxdigit;\n+    using ::_C_Swamp::iswalnum;\n+    using ::_C_Swamp::iswspace;\n+    using ::_C_Swamp::iswpunct;\n+    using ::_C_Swamp::iswprint;\n+    using ::_C_Swamp::iswgraph;\n+    using ::_C_Swamp::iswcntrl;\n+    using ::_C_Swamp::iswctype;\n+    using ::_C_Swamp::towlower;\n+    using ::_C_Swamp::towupper;\n+\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif"}, {"sha": "3632043dd1f59703bd24301c9f8473e7a9d5aeab", "filename": "libstdc++-v3/shadow/bits/wrap_libio.h", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_libio.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,70 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.5  Date and time\n+//\n+\n+// XXX incomplete\n+\n+#ifndef _CPP_WRAP_LIBIO_H\n+#define _CPP_WRAP_LIBIO_H 1\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <libio.h>\n+    }\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+// #  undef that\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      // typedef stuff\n+    }\n+  }\n+  namespace std {\n+\n+    // using ::_C_Swamp::stuff\n+\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      // using ::std::stuff\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif\n+"}, {"sha": "109a6102515c5668b9c3e8d60aaa8fb4dd1f6592", "filename": "libstdc++-v3/shadow/bits/wrap_unistd.h", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_unistd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_unistd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fbits%2Fwrap_unistd.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,72 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.5  Date and time\n+//\n+\n+// XXX incomplete\n+\n+#ifndef _CPP_WRAP_UNISTD_H\n+#define _CPP_WRAP_UNISTD_H 1\n+\n+  namespace _C_Swamp {\n+    extern \"C\" {\n+#     define _IN_C_SWAMP_\n+#     include_next <unistd.h>\n+    }\n+\n+    namespace _C_Shadow { }\n+  } // close namespace ::_C_Swamp::\n+\n+// #  undef that\n+\n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      // typedef stuff\n+    }\n+  }\n+  namespace std {\n+\n+    using ::_C_Swamp::read;\n+    using ::_C_Swamp::write;\n+    using ::_C_Swamp::open;\n+\n+  } // close namespace std::\n+  \n+  namespace _C_Swamp {\n+    namespace _C_Shadow {\n+      // using ::std::stuff\n+    }\n+  }\n+\n+# undef _IN_C_SWAMP_\n+\n+#endif\n+"}, {"sha": "ebcad9a7b802343d32a9ecba1d13c947f3c485e3", "filename": "libstdc++-v3/shadow/sys/cdefs.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fsys%2Fcdefs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2b942e78dc46a8705f54ccd352c51b61163829/libstdc%2B%2B-v3%2Fshadow%2Fsys%2Fcdefs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fshadow%2Fsys%2Fcdefs.h?ref=ff2b942e78dc46a8705f54ccd352c51b61163829", "patch": "@@ -0,0 +1,42 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+#ifndef _CPP_SYS_CDEFS_H\n+# define _CPP_SYS_CDEFS_H\n+\n+# include_next <sys/cdefs.h>\n+\n+// glibc-2 hackery.  Other systems likely require other hacks.\n+#undef\t__BEGIN_DECLS\n+#define\t__BEGIN_DECLS\n+#undef\t__END_DECLS\n+#define\t__END_DECLS\n+\n+#endif"}]}