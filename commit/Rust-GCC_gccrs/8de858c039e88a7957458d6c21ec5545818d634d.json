{"sha": "8de858c039e88a7957458d6c21ec5545818d634d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRlODU4YzAzOWU4OGE3OTU3NDU4ZDZjMjFlYzU1NDU4MThkNjM0ZA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-04-01T16:40:38Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-04-01T16:40:38Z"}, "message": "c4x.md (*db): Enable pattern if TARGET_LOOP_UNSIGNED is non-zero.\n\n\t* config/c4x/c4x.md (*db): Enable pattern if TARGET_LOOP_UNSIGNED\n\tis non-zero.\n\t(movstrqi_small, movstrqi_large, *cmpstrqi): Add + modifier to address\n \tregister constraints.\n\t(*movhi_clobber+1): Modify splitter pattern to handle destination\n\tregister that is used in the source address.\n\t(*xorhi3_clobber): Replace AND with XOR in call to legitimize_operands.\n\nFrom-SVN: r26108", "tree": {"sha": "b4c785c6724b4526f0558090a018d812c99e2b37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4c785c6724b4526f0558090a018d812c99e2b37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8de858c039e88a7957458d6c21ec5545818d634d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de858c039e88a7957458d6c21ec5545818d634d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de858c039e88a7957458d6c21ec5545818d634d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de858c039e88a7957458d6c21ec5545818d634d/comments", "author": null, "committer": null, "parents": [{"sha": "4adf744bb421f09a46cf1a3eaa67dc3c816fd427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4adf744bb421f09a46cf1a3eaa67dc3c816fd427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4adf744bb421f09a46cf1a3eaa67dc3c816fd427"}], "stats": {"total": 61, "additions": 48, "deletions": 13}, "files": [{"sha": "84a589e1d029bb7827f0c889561f424c06a214b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de858c039e88a7957458d6c21ec5545818d634d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de858c039e88a7957458d6c21ec5545818d634d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8de858c039e88a7957458d6c21ec5545818d634d", "patch": "@@ -1,3 +1,13 @@\n+Fri Apr  2 12:19:17 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.md (*db): Enable pattern if TARGET_LOOP_UNSIGNED\n+\tis non-zero.\n+\t(movstrqi_small, movstrqi_large, *cmpstrqi): Add + modifier to address\n+ \tregister constraints.\n+\t(*movhi_clobber+1): Modify splitter pattern to handle destination\n+\tregister that is used in the source address.\n+\t(*xorhi3_clobber): Replace AND with XOR in call to legitimize_operands.\n+\n Fri Apr  2 12:16:15 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.h: Added more comments."}, {"sha": "6509941e4e24c455954ee23c8cec36744973948f", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de858c039e88a7957458d6c21ec5545818d634d/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de858c039e88a7957458d6c21ec5545818d634d/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=8de858c039e88a7957458d6c21ec5545818d634d", "patch": "@@ -4553,7 +4553,7 @@\n         (plus:QI (match_dup 0)\n                  (const_int -1)))\n    (clobber (reg:CC_NOOV 21))]\n-  \"TARGET_DB && find_reg_note (insn, REG_NONNEG, 0)\"\n+  \"TARGET_DB && (find_reg_note (insn, REG_NONNEG, 0) || TARGET_LOOP_UNSIGNED)\"\n   \"*\n   if (which_alternative == 0)\n     return \\\"dbu%#\\\\t%0,%l1\\\";\n@@ -4705,8 +4705,8 @@\n ; operand 4 is a scratch register\n \n (define_insn \"movstrqi_small\"\n-  [(set (mem:BLK (match_operand:QI 0 \"addr_reg_operand\" \"a\"))\n-        (mem:BLK (match_operand:QI 1 \"addr_reg_operand\" \"a\")))\n+  [(set (mem:BLK (match_operand:QI 0 \"addr_reg_operand\" \"+a\"))\n+        (mem:BLK (match_operand:QI 1 \"addr_reg_operand\" \"+a\")))\n    (use (match_operand:QI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:QI 3 \"immediate_operand\" \"\"))\n    (clobber (match_operand:QI 4 \"ext_low_reg_operand\" \"=&q\"))\n@@ -4734,8 +4734,8 @@\n   [(set_attr \"type\" \"multi\")])\n \n (define_insn \"movstrqi_large\"\n-  [(set (mem:BLK (match_operand:QI 0 \"addr_reg_operand\" \"a\"))\n-        (mem:BLK (match_operand:QI 1 \"addr_reg_operand\" \"a\")))\n+  [(set (mem:BLK (match_operand:QI 0 \"addr_reg_operand\" \"+a\"))\n+        (mem:BLK (match_operand:QI 1 \"addr_reg_operand\" \"+a\")))\n    (use (match_operand:QI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:QI 3 \"immediate_operand\" \"\"))\n    (clobber (match_operand:QI 4 \"ext_low_reg_operand\" \"=&q\"))\n@@ -4804,8 +4804,8 @@\n \n (define_insn \"*cmpstrqi\"\n   [(set (match_operand:QI 0 \"ext_reg_operand\" \"=d\")\n-        (compare:QI (mem:BLK (match_operand:QI 1 \"addr_reg_operand\" \"a\"))\n-                    (mem:BLK (match_operand:QI 2 \"addr_reg_operand\" \"a\"))))\n+        (compare:QI (mem:BLK (match_operand:QI 1 \"addr_reg_operand\" \"+a\"))\n+                    (mem:BLK (match_operand:QI 2 \"addr_reg_operand\" \"+a\"))))\n    (use (match_operand:QI 3 \"immediate_operand\" \"i\"))\n    (use (match_operand:QI 4 \"immediate_operand\" \"\"))\n    (clobber (match_operand:QI 5 \"std_reg_operand\" \"=&c\"))\n@@ -5397,19 +5397,44 @@\n   \"#\"\n   [(set_attr \"type\" \"multi,multi\")])\n \n+; This will fail miserably if the destination register is used in the \n+; source memory address.\n+; The usual strategy in this case is to swap the order of insns we emit,\n+; however, this will fail if we have an autoincrement memory address.\n+; For example:\n+; ldi *ar0++, ar0\n+; ldi *ar0++, ar1\n+;\n+; We could convert this to\n+; ldi *ar0(1), ar1\n+; ldi *ar0, ar0\n+;\n+; However, things are likely to be very screwed up if we get this.\n+\n (define_split\n   [(set (match_operand:HI 0 \"src_operand\" \"\")\n \t(match_operand:HI 1 \"src_operand\" \"\"))]\n   \"reload_completed\n    && (reg_operand (operands[0], HImode)\n        || reg_operand (operands[1], HImode)\n        || stik_const_operand (operands[1], HImode))\"\n-  [(set (match_dup 2) (match_dup 3))\n-   (set (match_dup 4) (match_dup 5))]\n+  [(set (match_dup 2) (match_dup 4))\n+   (set (match_dup 3) (match_dup 5))]\n   \"operands[2] = c4x_operand_subword (operands[0], 0, 1, HImode);\n-   operands[3] = c4x_operand_subword (operands[1], 0, 1, HImode);\n-   operands[4] = c4x_operand_subword (operands[0], 1, 1, HImode);\n-   operands[5] = c4x_operand_subword (operands[1], 1, 1, HImode);\")\n+   operands[3] = c4x_operand_subword (operands[0], 1, 1, HImode);\n+   operands[4] = c4x_operand_subword (operands[1], 0, 1, HImode);\n+   operands[5] = c4x_operand_subword (operands[1], 1, 1, HImode);\n+   if (reg_overlap_mentioned_p (operands[2], operands[5]))\n+     {\n+\t/* Swap order of move insns.  */\n+\trtx tmp;\n+\ttmp = operands[2];\n+        operands[2] =operands[3];\n+        operands[3] = tmp;\n+\ttmp = operands[4];\n+        operands[4] =operands[5];\n+        operands[5] = tmp;        \n+     }\")\n \n \n (define_insn \"extendqihi2\"\n@@ -5737,7 +5762,7 @@\n                            (match_operand:HI 2 \"src_operand\" \"\")))\n               (clobber (reg:CC 21))])]\n   \"\"\n-  \"legitimize_operands (AND, operands, HImode);\")\n+  \"legitimize_operands (XOR, operands, HImode);\")\n \n \n (define_insn \"*xorhi3_clobber\""}]}