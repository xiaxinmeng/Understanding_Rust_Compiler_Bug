{"sha": "b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFkY2JjM2Q4ZTJmZWRkN2IwYzJmNDI1NTRmNGMyMjk3NDY5ZGFiZQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-30T16:16:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-30T16:16:38Z"}, "message": "Merge #401\n\n401: Add defaults support for generics r=philberty a=philberty\n\nThis adds in the basic support for default arguments for generics such as:\r\n\r\n```rust\r\nstruct Foo<A,B=f32>(A,B);\r\n```\r\n\r\nor recursive type params such as:\r\n\r\n```rust\r\nstruct Foo<A, B = (A, A)>(A, B);\r\n```\r\n\r\nFixes #307 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "6ac4d268325bf75dfc747c12ff18122826a5c151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ac4d268325bf75dfc747c12ff18122826a5c151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgjC1nCRBK7hj4Ov3rIwAAE/oIAHPvuOHkdG6GelMcvs3XPj5w\niC6BP6SYLi2iPdB4Cfhi874K5xQ5oh3rLqsnm4B5GYjcoUiQsO2BmA9ZkHWnb8Ac\n84brxRFSLLWtbz6WEhyLTKwzMESsQ5lz60Iqi6+B72iGnUAWvdSlK6fyGsPv9oYo\n0nylAiKpOXTxa1IoWxlZ+9MIm9CDCxDeEUDMhuh9OeHOHTshLpIiw9vpaqcdkIiZ\nTvqlaIxtLVF/3jzK3NYm/tHM1gztzsFM679+kd/r6TyNyPKDUyvwgn38TNdatCZw\n+dG9LuWhAyCfYXeHhM08LI9BvVipvvYRW1Yid68ondahpuk49pGIP5ze2BwCgHs=\n=8Tjk\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ac4d268325bf75dfc747c12ff18122826a5c151\nparent 0276ec39a9c3b839c47ce28838a8d5af25fbf598\nparent 2216cab0c9f694016d6cc220cfa8f5c23ba5f465\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1619799398 +0000\ncommitter GitHub <noreply@github.com> 1619799398 +0000\n\nMerge #401\n\n401: Add defaults support for generics r=philberty a=philberty\n\nThis adds in the basic support for default arguments for generics such as:\r\n\r\n```rust\r\nstruct Foo<A,B=f32>(A,B);\r\n```\r\n\r\nor recursive type params such as:\r\n\r\n```rust\r\nstruct Foo<A, B = (A, A)>(A, B);\r\n```\r\n\r\nFixes #307 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0276ec39a9c3b839c47ce28838a8d5af25fbf598", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0276ec39a9c3b839c47ce28838a8d5af25fbf598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0276ec39a9c3b839c47ce28838a8d5af25fbf598"}, {"sha": "2216cab0c9f694016d6cc220cfa8f5c23ba5f465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2216cab0c9f694016d6cc220cfa8f5c23ba5f465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2216cab0c9f694016d6cc220cfa8f5c23ba5f465"}], "stats": {"total": 81, "additions": 75, "deletions": 6}, "files": [{"sha": "fe0b791e664c39a4a105804459026eaa5787ea5f", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe", "patch": "@@ -349,6 +349,29 @@ class ASTLoweringItem : public ASTLoweringBase\n       {\n \tgeneric_params\n \t  = lower_generic_params (impl_block.get_generic_params ());\n+\n+\tfor (auto &generic_param : generic_params)\n+\t  {\n+\t    switch (generic_param->get_kind ())\n+\t      {\n+\t\tcase HIR::GenericParam::GenericKind::TYPE: {\n+\t\t  const HIR::TypeParam &t\n+\t\t    = static_cast<const HIR::TypeParam &> (*generic_param);\n+\n+\t\t  if (t.has_type ())\n+\t\t    {\n+\t\t      // see https://github.com/rust-lang/rust/issues/36887\n+\t\t      rust_error_at (\n+\t\t\tt.get_locus (),\n+\t\t\t\"defaults for type parameters are not allowed here\");\n+\t\t    }\n+\t\t}\n+\t\tbreak;\n+\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\t  }\n       }\n \n     HIR::Type *trait_type"}, {"sha": "a1dcb4c73f62a9e2c360e06c76a74ea9f94ca8d7", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe", "patch": "@@ -262,6 +262,12 @@ class ResolveGenericParam : public ResolverBase\n   {\n     ok = true;\n \n+    // if it has a type lets resolve it\n+    if (param.has_type ())\n+      {\n+\tResolveType::go (param.get_type ().get (), param.get_node_id ());\n+      }\n+\n     // for now lets focus on handling the basics: like struct<T> { a:T, ....}\n     resolver->get_type_scope ().insert (\n       CanonicalPath (param.get_type_representation ()), param.get_node_id (),\n@@ -271,12 +277,6 @@ class ResolveGenericParam : public ResolverBase\n \t\t       \"generic param redefined multiple times\");\n \trust_error_at (locus, \"was defined here\");\n       });\n-\n-    // if it has a type lets resolve it\n-    if (param.has_type ())\n-      {\n-\tResolveType::go (param.get_type ().get (), param.get_node_id ());\n-      }\n   }\n \n private:"}, {"sha": "f5daf3a87f2e5e66f7dd040f911c8e39eec0aab9", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe", "patch": "@@ -271,6 +271,20 @@ SubstitutionRef::get_mappings_from_generic_args (HIR::GenericArgs &args)\n \t  rust_assert (param.param_has_default_ty ());\n \n \t  BaseType *resolved = param.get_default_ty ();\n+\t  if (resolved->get_kind () == TypeKind::ERROR)\n+\t    return SubstitutionArgumentMappings::error ();\n+\n+\t  // this resolved default might already contain default parameters\n+\t  if (resolved->contains_type_parameters ())\n+\t    {\n+\t      SubstitutionArgumentMappings intermediate (mappings,\n+\t\t\t\t\t\t\t args.get_locus ());\n+\t      resolved = Resolver::SubstMapperInternal::Resolve (resolved,\n+\t\t\t\t\t\t\t\t intermediate);\n+\t      if (resolved->get_kind () == TypeKind::ERROR)\n+\t\treturn SubstitutionArgumentMappings::error ();\n+\t    }\n+\n \t  SubstitutionArg subst_arg (&param, resolved);\n \t  mappings.push_back (std::move (subst_arg));\n \t}"}, {"sha": "e7792e3efb31784ba5983d32eabd2b86a005a9a5", "filename": "gcc/testsuite/rust.test/compile/generics25.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics25.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics25.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompile%2Fgenerics25.rs?ref=b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe", "patch": "@@ -0,0 +1,9 @@\n+struct Foo<A, B = (A, A)>(A, B);\n+\n+fn main() {\n+    let a: Foo<bool>;\n+    a = Foo::<bool>(true, (false, true));\n+\n+    let b: (bool, bool);\n+    b = a.1;\n+}"}, {"sha": "a734fa8a19786da45c9efff65116478441a5bd91", "filename": "gcc/testsuite/rust.test/xfail_compile/generics10.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics10.rs?ref=b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe", "patch": "@@ -0,0 +1,12 @@\n+struct Foo<A, B>(A, B);\n+\n+impl<X = i32> Foo<X, f32> { // { dg-error \"defaults for type parameters are not allowed here\" }\n+    fn new(a: X, b: f32) -> Self {\n+        Self(a, b)\n+    }\n+}\n+\n+fn main() {\n+    let a;\n+    a = Foo::new(123, 456f32);\n+}"}, {"sha": "c1ff89b118ef8bd241c98713c5160beda94428a3", "filename": "gcc/testsuite/rust.test/xfail_compile/generics9.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics9.rs?ref=b1dcbc3d8e2fedd7b0c2f42554f4c2297469dabe", "patch": "@@ -0,0 +1,11 @@\n+// { dg-excess-errors \"Noisy error and debug\" }\n+struct Foo<A, B = (A, B)>(A, B);\n+// { dg-error \"failed to resolve TypePath: B\" \"\" { target { *-*-* } } .-1 }\n+\n+fn main() {\n+    let a: Foo<bool>;\n+    a = Foo::<bool>(true, (false, true));\n+\n+    let b: (bool, bool);\n+    b = a.1;\n+}"}]}