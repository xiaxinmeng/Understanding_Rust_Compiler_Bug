{"sha": "dc3577989d23572bc6f695e791eeaad33cfe8f6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMzNTc3OTg5ZDIzNTcyYmM2ZjY5NWU3OTFlZWFhZDMzY2ZlOGY2YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-02-27T07:28:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-27T07:28:09Z"}, "message": "opts.h: Include obstack.h.\n\n\t* opts.h: Include obstack.h.\n\t(opts_concat): New prototype.\n\t(opts_obstack): New declaration.\n\t* opts.c (opts_concat): New function.\n\t(opts_obstack): New variable.\n\t(init_options_struct): Call gcc_init_obstack on opts_obstack.\n\t(finish_options): Use opts_concat instead of concat\n\tand XOBNEWVEC instead of XNEWVEC.\n\t* opts-common.c (generate_canonical_option, decode_cmdline_option,\n\tgenerate_option): Likewise.\n\t* Makefile.in (OPTS_H): Depend on $(OBSTACK_H).\n\t* lto-wrapper.c (main): Call gcc_init_obstack on opts_obstack.\n\nFrom-SVN: r196305", "tree": {"sha": "bd4cfc1abd9fbaa6e8743ef8ed88707b9b753706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd4cfc1abd9fbaa6e8743ef8ed88707b9b753706"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc3577989d23572bc6f695e791eeaad33cfe8f6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3577989d23572bc6f695e791eeaad33cfe8f6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc3577989d23572bc6f695e791eeaad33cfe8f6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc3577989d23572bc6f695e791eeaad33cfe8f6a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5c2cacaad0d670aee9993c31c0eb93887e49d33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c2cacaad0d670aee9993c31c0eb93887e49d33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c2cacaad0d670aee9993c31c0eb93887e49d33"}], "stats": {"total": 84, "additions": 71, "deletions": 13}, "files": [{"sha": "e7f05869e8d60e38bc3f5d604fa30d46871ae236", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3577989d23572bc6f695e791eeaad33cfe8f6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3577989d23572bc6f695e791eeaad33cfe8f6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc3577989d23572bc6f695e791eeaad33cfe8f6a", "patch": "@@ -1,5 +1,18 @@\n 2013-02-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* opts.h: Include obstack.h.\n+\t(opts_concat): New prototype.\n+\t(opts_obstack): New declaration.\n+\t* opts.c (opts_concat): New function.\n+\t(opts_obstack): New variable.\n+\t(init_options_struct): Call gcc_init_obstack on opts_obstack.\n+\t(finish_options): Use opts_concat instead of concat\n+\tand XOBNEWVEC instead of XNEWVEC.\n+\t* opts-common.c (generate_canonical_option, decode_cmdline_option,\n+\tgenerate_option): Likewise.\n+\t* Makefile.in (OPTS_H): Depend on $(OBSTACK_H).\n+\t* lto-wrapper.c (main): Call gcc_init_obstack on opts_obstack.\n+\n \tPR target/56455\n \t* stmt.c (expand_switch_as_decision_tree_p): If flag_pic\n \tand ASM_OUTPUT_ADDR_DIFF_ELT isn't defined, return true."}, {"sha": "0cdfa51e73ec5f071a6878b751372cb47852fa54", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3577989d23572bc6f695e791eeaad33cfe8f6a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3577989d23572bc6f695e791eeaad33cfe8f6a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=dc3577989d23572bc6f695e791eeaad33cfe8f6a", "patch": "@@ -919,7 +919,7 @@ PREDICT_H = predict.h predict.def\n CPPLIB_H = $(srcdir)/../libcpp/include/line-map.h \\\n \t$(srcdir)/../libcpp/include/cpplib.h\n INPUT_H = $(srcdir)/../libcpp/include/line-map.h input.h\n-OPTS_H = $(INPUT_H) $(VEC_H) opts.h\n+OPTS_H = $(INPUT_H) $(VEC_H) opts.h $(OBSTACK_H)\n DECNUM_H = $(DECNUM)/decContext.h $(DECNUM)/decDPD.h $(DECNUM)/decNumber.h \\\n \t$(DECNUMFMT)/decimal32.h $(DECNUMFMT)/decimal64.h \\\n \t$(DECNUMFMT)/decimal128.h $(DECNUMFMT)/decimal128Local.h"}, {"sha": "15a34dd69569a2a39652cafab6689b26d65d2de9", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3577989d23572bc6f695e791eeaad33cfe8f6a/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3577989d23572bc6f695e791eeaad33cfe8f6a/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=dc3577989d23572bc6f695e791eeaad33cfe8f6a", "patch": "@@ -915,6 +915,8 @@ main (int argc, char *argv[])\n {\n   const char *p;\n \n+  gcc_obstack_init (&opts_obstack);\n+\n   p = argv[0] + strlen (argv[0]);\n   while (p != argv[0] && !IS_DIR_SEPARATOR (p[-1]))\n     --p;"}, {"sha": "95ca5841acceecfa9b30644f7ca94593bb487a3c", "filename": "gcc/opts-common.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3577989d23572bc6f695e791eeaad33cfe8f6a/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3577989d23572bc6f695e791eeaad33cfe8f6a/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=dc3577989d23572bc6f695e791eeaad33cfe8f6a", "patch": "@@ -276,7 +276,7 @@ generate_canonical_option (size_t opt_index, const char *arg, int value,\n       && !option->cl_reject_negative\n       && (opt_text[1] == 'W' || opt_text[1] == 'f' || opt_text[1] == 'm'))\n     {\n-      char *t = XNEWVEC (char, option->opt_len + 5);\n+      char *t = XOBNEWVEC (&opts_obstack, char, option->opt_len + 5);\n       t[0] = '-';\n       t[1] = opt_text[1];\n       t[2] = 'n';\n@@ -301,11 +301,9 @@ generate_canonical_option (size_t opt_index, const char *arg, int value,\n       else\n \t{\n \t  gcc_assert (option->flags & CL_JOINED);\n-\t  decoded->canonical_option[0] = concat (opt_text, arg, NULL);\n+\t  decoded->canonical_option[0] = opts_concat (opt_text, arg, NULL);\n \t  decoded->canonical_option[1] = NULL;\n \t  decoded->canonical_option_num_elements = 1;\n-\t  if (opt_text != option->opt_text)\n-\t    free (CONST_CAST (char *, opt_text));\n \t}\n     }\n   else\n@@ -590,7 +588,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n     {\n       size_t j;\n       size_t len = strlen (arg);\n-      char *arg_lower = XNEWVEC (char, len + 1);\n+      char *arg_lower = XOBNEWVEC (&opts_obstack, char, len + 1);\n \n       for (j = 0; j < len; j++)\n \targ_lower[j] = TOLOWER ((unsigned char) arg[j]);\n@@ -670,7 +668,8 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n \t  decoded->canonical_option_num_elements = result;\n \t}\n     }\n-  decoded->orig_option_with_args_text = p = XNEWVEC (char, total_len);\n+  decoded->orig_option_with_args_text\n+    = p = XOBNEWVEC (&opts_obstack, char, total_len);\n   for (i = 0; i < result; i++)\n     {\n       size_t len = strlen (argv[i]);\n@@ -932,8 +931,8 @@ generate_option (size_t opt_index, const char *arg, int value,\n \n     case 2:\n       decoded->orig_option_with_args_text\n-\t= concat (decoded->canonical_option[0], \" \",\n-\t\t  decoded->canonical_option[1], NULL);\n+\t= opts_concat (decoded->canonical_option[0], \" \",\n+\t\t       decoded->canonical_option[1], NULL);\n       break;\n \n     default:"}, {"sha": "d569b5e7e90d324f75feb753e8d7f0c64ed7dd2d", "filename": "gcc/opts.c", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3577989d23572bc6f695e791eeaad33cfe8f6a/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3577989d23572bc6f695e791eeaad33cfe8f6a/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=dc3577989d23572bc6f695e791eeaad33cfe8f6a", "patch": "@@ -268,13 +268,49 @@ add_comma_separated_to_vector (void **pvec, const char *arg)\n   *pvec = v;\n }\n \n+/* Like libiberty concat, but allocate using opts_obstack.  */\n+\n+char *\n+opts_concat (const char *first, ...)\n+{\n+  char *newstr, *end;\n+  size_t length = 0;\n+  const char *arg;\n+  va_list ap;\n+\n+  /* First compute the size of the result and get sufficient memory.  */\n+  va_start (ap, first);\n+  for (arg = first; arg; arg = va_arg (ap, const char *))\n+    length += strlen (arg);\n+  newstr = XOBNEWVEC (&opts_obstack, char, length + 1);\n+  va_end (ap);\n+\n+  /* Now copy the individual pieces to the result string. */\n+  va_start (ap, first);\n+  for (arg = first, end = newstr; arg; arg = va_arg (ap, const char *))\n+    {\n+      length = strlen (arg);\n+      memcpy (end, arg, length);\n+      end += length;\n+    }\n+  *end = '\\0';\n+  va_end (ap);\n+  return newstr;\n+}\n+\n+/* Obstack for option strings.  */\n+\n+struct obstack opts_obstack;\n+\n /* Initialize OPTS and OPTS_SET before using them in parsing options.  */\n \n void\n init_options_struct (struct gcc_options *opts, struct gcc_options *opts_set)\n {\n   size_t num_params = get_num_compiler_params ();\n \n+  gcc_obstack_init (&opts_obstack);\n+\n   *opts = global_options_init;\n   memset (opts_set, 0, sizeof (*opts_set));\n \n@@ -638,8 +674,8 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t directory, typically the directory to contain the object\n \t file.  */\n       if (opts->x_dump_dir_name)\n-\topts->x_dump_base_name = concat (opts->x_dump_dir_name,\n-\t\t\t\t\t opts->x_dump_base_name, NULL);\n+\topts->x_dump_base_name = opts_concat (opts->x_dump_dir_name,\n+\t\t\t\t\t      opts->x_dump_base_name, NULL);\n       else if (opts->x_aux_base_name\n \t       && strcmp (opts->x_aux_base_name, HOST_BIT_BUCKET) != 0)\n \t{\n@@ -649,8 +685,9 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t  if (opts->x_aux_base_name != aux_base)\n \t    {\n \t      int dir_len = aux_base - opts->x_aux_base_name;\n-\t      char *new_dump_base_name =\n-\t\tXNEWVEC (char, strlen (opts->x_dump_base_name) + dir_len + 1);\n+\t      char *new_dump_base_name\n+\t\t= XOBNEWVEC (&opts_obstack, char,\n+\t\t\t     strlen (opts->x_dump_base_name) + dir_len + 1);\n \n \t      /* Copy directory component from OPTS->X_AUX_BASE_NAME.  */\n \t      memcpy (new_dump_base_name, opts->x_aux_base_name, dir_len);"}, {"sha": "264f4de7daafb1b8742e12e3e4138d7c3b6a3ba0", "filename": "gcc/opts.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc3577989d23572bc6f695e791eeaad33cfe8f6a/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc3577989d23572bc6f695e791eeaad33cfe8f6a/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=dc3577989d23572bc6f695e791eeaad33cfe8f6a", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"input.h\"\n #include \"vec.h\"\n+#include \"obstack.h\"\n \n /* Specifies how a switch's VAR_VALUE relates to its FLAG_VAR.  */\n enum cl_var_type {\n@@ -304,6 +305,12 @@ extern const char **in_fnames;\n \n extern unsigned num_in_fnames;\n \n+extern char *opts_concat (const char *first, ...);\n+\n+/* Obstack for option strings.  */\n+\n+extern struct obstack opts_obstack;\n+\n size_t find_opt (const char *input, unsigned int lang_mask);\n extern int integral_argument (const char *arg);\n extern bool enum_value_to_arg (const struct cl_enum_arg *enum_args,"}]}