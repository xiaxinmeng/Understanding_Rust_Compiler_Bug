{"sha": "5d861bf2cb8d21efd5f87f03150ab8e20f4e1155", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ4NjFiZjJjYjhkMjFlZmQ1Zjg3ZjAzMTUwYWI4ZTIwZjRlMTE1NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-18T18:05:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-18T18:05:17Z"}, "message": "initializer_list: Use noexcept specifier.\n\n2011-05-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* libsupc++/initializer_list: Use noexcept specifier.\n\t(initializer_list<>::size, begin, end): Qualify as const.\n\t* include/bits/move.h (__addressof, forward, move, addressof): Specify\n\tas noexcept.\n\t* include/std/bitset: Use noexcept specifier throughout.\n\t* include/debug/bitset: Update.\n\t* include/profile/bitset: Likewise.\n\nFrom-SVN: r173871", "tree": {"sha": "c4f14d8b7b1e6ae132811f82b60a35dab51be8bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4f14d8b7b1e6ae132811f82b60a35dab51be8bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155/comments", "author": null, "committer": null, "parents": [{"sha": "0bda47a37afb63ee0162ea39ded62305469eed7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bda47a37afb63ee0162ea39ded62305469eed7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bda47a37afb63ee0162ea39ded62305469eed7d"}], "stats": {"total": 409, "additions": 218, "deletions": 191}, "files": [{"sha": "55fd465973608c1abd99caa3c3146d9fca323d47", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5d861bf2cb8d21efd5f87f03150ab8e20f4e1155", "patch": "@@ -1,3 +1,13 @@\n+2011-05-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* libsupc++/initializer_list: Use noexcept specifier.\n+\t(initializer_list<>::size, begin, end): Qualify as const.\n+\t* include/bits/move.h (__addressof, forward, move, addressof): Specify\n+\tas noexcept.\n+\t* include/std/bitset: Use noexcept specifier throughout.\n+\t* include/debug/bitset: Update.\n+\t* include/profile/bitset: Likewise.\n+\n 2011-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/tuple: Use noexcept where appropriate."}, {"sha": "4b50bbb9efc934aec0485c1889f144c091116524", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=5d861bf2cb8d21efd5f87f03150ab8e20f4e1155", "patch": "@@ -40,7 +40,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Used, in C++03 mode too, by allocators, etc.\n   template<typename _Tp>\n     inline _Tp*\n-    __addressof(_Tp& __r)\n+    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT\n     {\n       return reinterpret_cast<_Tp*>\n \t(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));\n@@ -59,12 +59,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// forward (as per N3143)\n   template<typename _Tp>\n     inline _Tp&&\n-    forward(typename std::remove_reference<_Tp>::type& __t) \n+    forward(typename std::remove_reference<_Tp>::type& __t) noexcept\n     { return static_cast<_Tp&&>(__t); }\n \n   template<typename _Tp>\n     inline _Tp&&\n-    forward(typename std::remove_reference<_Tp>::type&& __t) \n+    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept\n     {\n       static_assert(!std::is_lvalue_reference<_Tp>::value, \"template argument\"\n \t\t    \" substituting _Tp is an lvalue reference type\");\n@@ -79,7 +79,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _Tp>\n     inline typename std::remove_reference<_Tp>::type&&\n-    move(_Tp&& __t)\n+    move(_Tp&& __t) noexcept\n     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n \n   /**\n@@ -108,7 +108,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   */\n   template<typename _Tp>\n     inline _Tp*\n-    addressof(_Tp& __r)\n+    addressof(_Tp& __r) noexcept\n     { return std::__addressof(__r); }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n@@ -135,6 +135,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     inline void\n     swap(_Tp& __a, _Tp& __b)\n+    // noexcept has to wait is_nothrow_move_assignable\n     {\n       // concept requirements\n       __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)\n@@ -149,6 +150,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, size_t _Nm>\n     inline void\n     swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\n+    // noexcept waits for c++/49045\n     {\n       for (size_t __n = 0; __n < _Nm; ++__n)\n \tswap(__a[__n], __b[__n]);"}, {"sha": "21d281787ad72a2f3962970bb2e02012a049aad2", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=5d861bf2cb8d21efd5f87f03150ab8e20f4e1155", "patch": "@@ -1,6 +1,6 @@\n // Debugging bitset implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -66,19 +66,19 @@ namespace __debug\n \treference();\n \n \treference(const _Base_ref& __base,\n-\t\t  bitset* __seq __attribute__((__unused__)))\n+\t\t  bitset* __seq __attribute__((__unused__))) _GLIBCXX_NOEXCEPT\n \t: _Base_ref(__base)\n \t, _Safe_iterator_base(__seq, false)\n \t{ }\n \n       public:\n-\treference(const reference& __x)\n+\treference(const reference& __x) _GLIBCXX_NOEXCEPT\n \t: _Base_ref(__x)\n \t, _Safe_iterator_base(__x, false)\n \t{ }\n \n \treference&\n-\toperator=(bool __x)\n+\toperator=(bool __x) _GLIBCXX_NOEXCEPT\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n \t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_write)\n@@ -88,7 +88,7 @@ namespace __debug\n \t}\n \n \treference&\n-\toperator=(const reference& __x)\n+\toperator=(const reference& __x) _GLIBCXX_NOEXCEPT\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! __x._M_singular(),\n \t\t\t       _M_message(__gnu_debug::__msg_bad_bitset_read)\n@@ -101,15 +101,15 @@ namespace __debug\n \t}\n \n \tbool\n-\toperator~() const\n+\toperator~() const _GLIBCXX_NOEXCEPT\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n \t\t\t       _M_message(__gnu_debug::__msg_bad_bitset_read)\n \t\t\t\t._M_iterator(*this));\n \t  return ~(*static_cast<const _Base_ref*>(this));\n \t}\n \n-\toperator bool() const\n+\toperator bool() const _GLIBCXX_NOEXCEPT\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n \t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_read)\n@@ -118,7 +118,7 @@ namespace __debug\n \t}\n \n \treference&\n-\tflip()\n+\tflip() _GLIBCXX_NOEXCEPT\n \t{\n \t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n \t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_flip)\n@@ -130,10 +130,11 @@ namespace __debug\n #endif\n \n       // 23.3.5.1 constructors:\n-      _GLIBCXX_CONSTEXPR bitset() : _Base() { }\n+      _GLIBCXX_CONSTEXPR bitset() _GLIBCXX_NOEXCEPT\n+      : _Base() { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      constexpr bitset(unsigned long long __val)\n+      constexpr bitset(unsigned long long __val) noexcept\n #else\n       bitset(unsigned long __val)\n #endif\n@@ -173,42 +174,42 @@ namespace __debug\n \n       // 23.3.5.2 bitset operations:\n       bitset<_Nb>&\n-      operator&=(const bitset<_Nb>& __rhs)\n+      operator&=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() &= __rhs;\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      operator|=(const bitset<_Nb>& __rhs)\n+      operator|=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() |= __rhs;\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      operator^=(const bitset<_Nb>& __rhs)\n+      operator^=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() ^= __rhs;\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      operator<<=(size_t __pos)\n+      operator<<=(size_t __pos) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() <<= __pos;\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      operator>>=(size_t __pos)\n+      operator>>=(size_t __pos) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() >>= __pos;\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      set()\n+      set() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::set();\n \treturn *this;\n@@ -224,7 +225,7 @@ namespace __debug\n       }\n \n       bitset<_Nb>&\n-      reset()\n+      reset() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::reset();\n \treturn *this;\n@@ -237,10 +238,12 @@ namespace __debug\n \treturn *this;\n       }\n \n-      bitset<_Nb> operator~() const { return bitset(~_M_base()); }\n+      bitset<_Nb>\n+      operator~() const _GLIBCXX_NOEXCEPT\n+      { return bitset(~_M_base()); }\n \n       bitset<_Nb>&\n-      flip()\n+      flip() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::flip();\n \treturn *this;\n@@ -346,11 +349,11 @@ namespace __debug\n       using _Base::size;\n \n       bool\n-      operator==(const bitset<_Nb>& __rhs) const\n+      operator==(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n       { return _M_base() == __rhs; }\n \n       bool\n-      operator!=(const bitset<_Nb>& __rhs) const\n+      operator!=(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n       { return _M_base() != __rhs; }\n \n       using _Base::test;\n@@ -359,33 +362,35 @@ namespace __debug\n       using _Base::none;\n \n       bitset<_Nb>\n-      operator<<(size_t __pos) const\n+      operator<<(size_t __pos) const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(_M_base() << __pos); }\n \n       bitset<_Nb>\n-      operator>>(size_t __pos) const\n+      operator>>(size_t __pos) const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(_M_base() >> __pos); }\n \n-      _Base&\n-      _M_base() { return *this; }\n+      _Base& \n+      _M_base() _GLIBCXX_NOEXCEPT\n+      { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT\n+      { return *this; }\n     };\n \n   template<size_t _Nb>\n     bitset<_Nb>\n-    operator&(const bitset<_Nb>& __x, const bitset<_Nb>& __y)\n+    operator&(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     { return bitset<_Nb>(__x) &= __y; }\n \n   template<size_t _Nb>\n     bitset<_Nb>\n-    operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y)\n+    operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     { return bitset<_Nb>(__x) |= __y; }\n \n   template<size_t _Nb>\n     bitset<_Nb>\n-    operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y)\n+    operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     { return bitset<_Nb>(__x) ^= __y; }\n \n   template<typename _CharT, typename _Traits, size_t _Nb>"}, {"sha": "bd4aa3e152f987a6a04ff6caf863d9e765923c3a", "filename": "libstdc++-v3/include/profile/bitset", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset?ref=5d861bf2cb8d21efd5f87f03150ab8e20f4e1155", "patch": "@@ -1,6 +1,6 @@\n // Profiling bitset implementation -*- C++ -*-\n \n-// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -52,53 +52,54 @@ namespace __profile\n \tfriend class bitset;\n \treference();\n \n-\treference(const _Base_ref& __base, bitset* __seq)\n+\treference(const _Base_ref& __base, bitset* __seq) _GLIBCXX_NOEXCEPT\n \t: _Base_ref(__base)\n \t{ }\n \n       public:\n-\treference(const reference& __x)\n+\treference(const reference& __x) _GLIBCXX_NOEXCEPT\n \t: _Base_ref(__x)\n \t{ }\n \n \treference&\n-\toperator=(bool __x)\n+\toperator=(bool __x) _GLIBCXX_NOEXCEPT\n \t{\n \t  *static_cast<_Base_ref*>(this) = __x;\n \t  return *this;\n \t}\n \n \treference&\n-\toperator=(const reference& __x)\n+\toperator=(const reference& __x) _GLIBCXX_NOEXCEPT\n \t{\n \t  *static_cast<_Base_ref*>(this) = __x;\n \t  return *this;\n \t}\n \n \tbool\n-\toperator~() const\n+\toperator~() const _GLIBCXX_NOEXCEPT\n \t{\n \t  return ~(*static_cast<const _Base_ref*>(this));\n \t}\n \n-\toperator bool() const\n+\toperator bool() const _GLIBCXX_NOEXCEPT\n \t{\n \t  return *static_cast<const _Base_ref*>(this);\n \t}\n \n \treference&\n-\tflip()\n+\tflip() _GLIBCXX_NOEXCEPT\n \t{\n \t  _Base_ref::flip();\n \t  return *this;\n \t}\n       };\n \n       // 23.3.5.1 constructors:\n-      _GLIBCXX_CONSTEXPR bitset() : _Base() { }\n+      _GLIBCXX_CONSTEXPR bitset() _GLIBCXX_NOEXCEPT\n+      : _Base() { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      constexpr bitset(unsigned long long __val)\n+      constexpr bitset(unsigned long long __val) noexcept\n #else\n       bitset(unsigned long __val)\n #endif\n@@ -138,42 +139,42 @@ namespace __profile\n \n       // 23.3.5.2 bitset operations:\n       bitset<_Nb>&\n-      operator&=(const bitset<_Nb>& __rhs)\n+      operator&=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() &= __rhs;\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      operator|=(const bitset<_Nb>& __rhs)\n+      operator|=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() |= __rhs;\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      operator^=(const bitset<_Nb>& __rhs)\n+      operator^=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() ^= __rhs;\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      operator<<=(size_t __pos)\n+      operator<<=(size_t __pos) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() <<= __pos;\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      operator>>=(size_t __pos)\n+      operator>>=(size_t __pos) _GLIBCXX_NOEXCEPT\n       {\n \t_M_base() >>= __pos;\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      set()\n+      set() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::set();\n \treturn *this;\n@@ -189,7 +190,7 @@ namespace __profile\n       }\n \n       bitset<_Nb>&\n-      reset()\n+      reset() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::reset();\n \treturn *this;\n@@ -202,10 +203,12 @@ namespace __profile\n \treturn *this;\n       }\n \n-      bitset<_Nb> operator~() const { return bitset(~_M_base()); }\n+      bitset<_Nb>\n+      operator~() const _GLIBCXX_NOEXCEPT\n+      { return bitset(~_M_base()); }\n \n       bitset<_Nb>&\n-      flip()\n+      flip() _GLIBCXX_NOEXCEPT\n       {\n \t_Base::flip();\n \treturn *this;\n@@ -305,11 +308,11 @@ namespace __profile\n       using _Base::size;\n \n       bool\n-      operator==(const bitset<_Nb>& __rhs) const\n+      operator==(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n       { return _M_base() == __rhs; }\n \n       bool\n-      operator!=(const bitset<_Nb>& __rhs) const\n+      operator!=(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n       { return _M_base() != __rhs; }\n \n       using _Base::test;\n@@ -318,33 +321,35 @@ namespace __profile\n       using _Base::none;\n \n       bitset<_Nb>\n-      operator<<(size_t __pos) const\n+      operator<<(size_t __pos) const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(_M_base() << __pos); }\n \n       bitset<_Nb>\n-      operator>>(size_t __pos) const\n+      operator>>(size_t __pos) const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(_M_base() >> __pos); }\n \n       _Base&\n-      _M_base() { return *this; }\n+      _M_base() _GLIBCXX_NOEXCEPT\n+      { return *this; }\n \n       const _Base&\n-      _M_base() const { return *this; }\n+      _M_base() const _GLIBCXX_NOEXCEPT\n+      { return *this; }\n     };\n \n   template<size_t _Nb>\n     bitset<_Nb>\n-    operator&(const bitset<_Nb>& __x, const bitset<_Nb>& __y)\n+    operator&(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     { return bitset<_Nb>(__x) &= __y; }\n \n   template<size_t _Nb>\n     bitset<_Nb>\n-    operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y)\n+    operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     { return bitset<_Nb>(__x) |= __y; }\n \n   template<size_t _Nb>\n     bitset<_Nb>\n-    operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y)\n+    operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     { return bitset<_Nb>(__x) ^= __y; }\n \n   template<typename _CharT, typename _Traits, size_t _Nb>"}, {"sha": "6d23df2cba84d1c86cc7da8f878493f6ce576b9c", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 126, "deletions": 122, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=5d861bf2cb8d21efd5f87f03150ab8e20f4e1155", "patch": "@@ -75,11 +75,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /// 0 is the least significant word.\n       _WordT \t\t_M_w[_Nw];\n \n-      _GLIBCXX_CONSTEXPR _Base_bitset()\n+      _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT\n       : _M_w() { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      constexpr _Base_bitset(unsigned long long __val)\n+      constexpr _Base_bitset(unsigned long long __val) noexcept\n       : _M_w{ _WordT(__val)\n #if __SIZEOF_LONG_LONG__ > __SIZEOF_LONG__\n \t       , _WordT(__val >> _GLIBCXX_BITSET_BITS_PER_WORD)\n@@ -92,90 +92,90 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \n       static _GLIBCXX_CONSTEXPR size_t\n-      _S_whichword(size_t __pos )\n+      _S_whichword(size_t __pos ) _GLIBCXX_NOEXCEPT\n       { return __pos / _GLIBCXX_BITSET_BITS_PER_WORD; }\n \n       static _GLIBCXX_CONSTEXPR size_t\n-      _S_whichbyte(size_t __pos )\n+      _S_whichbyte(size_t __pos ) _GLIBCXX_NOEXCEPT\n       { return (__pos % _GLIBCXX_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }\n \n       static _GLIBCXX_CONSTEXPR size_t\n-      _S_whichbit(size_t __pos )\n+      _S_whichbit(size_t __pos ) _GLIBCXX_NOEXCEPT\n       { return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }\n \n       static _GLIBCXX_CONSTEXPR _WordT\n-      _S_maskbit(size_t __pos )\n+      _S_maskbit(size_t __pos ) _GLIBCXX_NOEXCEPT\n       { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }\n \n       _WordT&\n-      _M_getword(size_t __pos)\n+      _M_getword(size_t __pos) _GLIBCXX_NOEXCEPT\n       { return _M_w[_S_whichword(__pos)]; }\n \n       _WordT\n-      _M_getword(size_t __pos) const\n+      _M_getword(size_t __pos) const _GLIBCXX_NOEXCEPT\n       { return _M_w[_S_whichword(__pos)]; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const _WordT*\n-      _M_getdata() const\n+      _M_getdata() const noexcept\n       { return _M_w; }\n #endif\n \n       _WordT&\n-      _M_hiword()\n+      _M_hiword() _GLIBCXX_NOEXCEPT\n       { return _M_w[_Nw - 1]; }\n \n       _GLIBCXX_CONSTEXPR _WordT\n-      _M_hiword() const\n+      _M_hiword() const _GLIBCXX_NOEXCEPT\n       { return _M_w[_Nw - 1]; }\n \n       void\n-      _M_do_and(const _Base_bitset<_Nw>& __x)\n+      _M_do_and(const _Base_bitset<_Nw>& __x) _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n \t  _M_w[__i] &= __x._M_w[__i];\n       }\n \n       void\n-      _M_do_or(const _Base_bitset<_Nw>& __x)\n+      _M_do_or(const _Base_bitset<_Nw>& __x) _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n \t  _M_w[__i] |= __x._M_w[__i];\n       }\n \n       void\n-      _M_do_xor(const _Base_bitset<_Nw>& __x)\n+      _M_do_xor(const _Base_bitset<_Nw>& __x) _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n \t  _M_w[__i] ^= __x._M_w[__i];\n       }\n \n       void\n-      _M_do_left_shift(size_t __shift);\n+      _M_do_left_shift(size_t __shift) _GLIBCXX_NOEXCEPT;\n \n       void\n-      _M_do_right_shift(size_t __shift);\n+      _M_do_right_shift(size_t __shift) _GLIBCXX_NOEXCEPT;\n \n       void\n-      _M_do_flip()\n+      _M_do_flip() _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n \t  _M_w[__i] = ~_M_w[__i];\n       }\n \n       void\n-      _M_do_set()\n+      _M_do_set() _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n \t  _M_w[__i] = ~static_cast<_WordT>(0);\n       }\n \n       void\n-      _M_do_reset()\n+      _M_do_reset() _GLIBCXX_NOEXCEPT\n       { __builtin_memset(_M_w, 0, _Nw * sizeof(_WordT)); }\n \n       bool\n-      _M_is_equal(const _Base_bitset<_Nw>& __x) const\n+      _M_is_equal(const _Base_bitset<_Nw>& __x) const _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; ++__i)\n \t  if (_M_w[__i] != __x._M_w[__i])\n@@ -184,7 +184,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       size_t\n-      _M_are_all_aux() const\n+      _M_are_all_aux() const _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw - 1; __i++)\n \t  if (_M_w[__i] != ~static_cast<_WordT>(0))\n@@ -194,7 +194,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       bool\n-      _M_is_any() const\n+      _M_is_any() const _GLIBCXX_NOEXCEPT\n       {\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n \t  if (_M_w[__i] != static_cast<_WordT>(0))\n@@ -203,7 +203,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       size_t\n-      _M_do_count() const\n+      _M_do_count() const _GLIBCXX_NOEXCEPT\n       {\n \tsize_t __result = 0;\n \tfor (size_t __i = 0; __i < _Nw; __i++)\n@@ -221,17 +221,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // find first \"on\" bit\n       size_t\n-      _M_do_find_first(size_t __not_found) const;\n+      _M_do_find_first(size_t __not_found) const _GLIBCXX_NOEXCEPT;\n \n       // find the next \"on\" bit that follows \"prev\"\n       size_t\n-      _M_do_find_next(size_t __prev, size_t __not_found) const;\n+      _M_do_find_next(size_t __prev, size_t __not_found) const\n+\t_GLIBCXX_NOEXCEPT;\n     };\n \n   // Definitions of non-inline functions from _Base_bitset.\n   template<size_t _Nw>\n     void\n-    _Base_bitset<_Nw>::_M_do_left_shift(size_t __shift)\n+    _Base_bitset<_Nw>::_M_do_left_shift(size_t __shift) _GLIBCXX_NOEXCEPT\n     {\n       if (__builtin_expect(__shift != 0, 1))\n \t{\n@@ -257,7 +258,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<size_t _Nw>\n     void\n-    _Base_bitset<_Nw>::_M_do_right_shift(size_t __shift)\n+    _Base_bitset<_Nw>::_M_do_right_shift(size_t __shift) _GLIBCXX_NOEXCEPT\n     {\n       if (__builtin_expect(__shift != 0, 1))\n \t{\n@@ -311,7 +312,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<size_t _Nw>\n     size_t\n-    _Base_bitset<_Nw>::_M_do_find_first(size_t __not_found) const\n+    _Base_bitset<_Nw>::\n+    _M_do_find_first(size_t __not_found) const _GLIBCXX_NOEXCEPT\n     {\n       for (size_t __i = 0; __i < _Nw; __i++)\n \t{\n@@ -326,7 +328,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<size_t _Nw>\n     size_t\n-    _Base_bitset<_Nw>::_M_do_find_next(size_t __prev, size_t __not_found) const\n+    _Base_bitset<_Nw>::\n+    _M_do_find_next(size_t __prev, size_t __not_found) const _GLIBCXX_NOEXCEPT\n     {\n       // make bound inclusive\n       ++__prev;\n@@ -370,116 +373,116 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef unsigned long _WordT;\n       _WordT _M_w;\n \n-      _GLIBCXX_CONSTEXPR _Base_bitset()\n+      _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT\n       : _M_w(0)\n       { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      constexpr _Base_bitset(unsigned long long __val)\n+      constexpr _Base_bitset(unsigned long long __val) noexcept\n #else\n       _Base_bitset(unsigned long __val)\n #endif\n       : _M_w(__val)\n       { }\n \n       static _GLIBCXX_CONSTEXPR size_t\n-      _S_whichword(size_t __pos )\n+      _S_whichword(size_t __pos ) _GLIBCXX_NOEXCEPT\n       { return __pos / _GLIBCXX_BITSET_BITS_PER_WORD; }\n \n       static _GLIBCXX_CONSTEXPR size_t\n-      _S_whichbyte(size_t __pos )\n+      _S_whichbyte(size_t __pos ) _GLIBCXX_NOEXCEPT\n       { return (__pos % _GLIBCXX_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }\n \n       static _GLIBCXX_CONSTEXPR size_t\n-      _S_whichbit(size_t __pos )\n+      _S_whichbit(size_t __pos ) _GLIBCXX_NOEXCEPT\n       {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }\n \n       static _GLIBCXX_CONSTEXPR _WordT\n-      _S_maskbit(size_t __pos )\n+      _S_maskbit(size_t __pos ) _GLIBCXX_NOEXCEPT\n       { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }\n \n       _WordT&\n-      _M_getword(size_t)\n+      _M_getword(size_t) _GLIBCXX_NOEXCEPT\n       { return _M_w; }\n \n       _WordT\n-      _M_getword(size_t) const\n+      _M_getword(size_t) const _GLIBCXX_NOEXCEPT\n       { return _M_w; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       const _WordT*\n-      _M_getdata() const\n+      _M_getdata() const noexcept\n       { return &_M_w; }\n #endif\n \n       _WordT&\n-      _M_hiword()\n+      _M_hiword() _GLIBCXX_NOEXCEPT\n       { return _M_w; }\n \n       _GLIBCXX_CONSTEXPR _WordT\n-      _M_hiword() const\n+      _M_hiword() const _GLIBCXX_NOEXCEPT\n       { return _M_w; }\n \n       void\n-      _M_do_and(const _Base_bitset<1>& __x)\n+      _M_do_and(const _Base_bitset<1>& __x) _GLIBCXX_NOEXCEPT\n       { _M_w &= __x._M_w; }\n \n       void\n-      _M_do_or(const _Base_bitset<1>& __x)\n+      _M_do_or(const _Base_bitset<1>& __x) _GLIBCXX_NOEXCEPT\n       { _M_w |= __x._M_w; }\n \n       void\n-      _M_do_xor(const _Base_bitset<1>& __x)\n+      _M_do_xor(const _Base_bitset<1>& __x) _GLIBCXX_NOEXCEPT\n       { _M_w ^= __x._M_w; }\n \n       void\n-      _M_do_left_shift(size_t __shift)\n+      _M_do_left_shift(size_t __shift) _GLIBCXX_NOEXCEPT\n       { _M_w <<= __shift; }\n \n       void\n-      _M_do_right_shift(size_t __shift)\n+      _M_do_right_shift(size_t __shift) _GLIBCXX_NOEXCEPT\n       { _M_w >>= __shift; }\n \n       void\n-      _M_do_flip()\n+      _M_do_flip() _GLIBCXX_NOEXCEPT\n       { _M_w = ~_M_w; }\n \n       void\n-      _M_do_set()\n+      _M_do_set() _GLIBCXX_NOEXCEPT\n       { _M_w = ~static_cast<_WordT>(0); }\n \n       void\n-      _M_do_reset()\n+      _M_do_reset() _GLIBCXX_NOEXCEPT\n       { _M_w = 0; }\n \n       bool\n-      _M_is_equal(const _Base_bitset<1>& __x) const\n+      _M_is_equal(const _Base_bitset<1>& __x) const _GLIBCXX_NOEXCEPT\n       { return _M_w == __x._M_w; }\n \n       size_t\n-      _M_are_all_aux() const\n+      _M_are_all_aux() const _GLIBCXX_NOEXCEPT\n       { return __builtin_popcountl(_M_w); }\n \n       bool\n-      _M_is_any() const\n+      _M_is_any() const _GLIBCXX_NOEXCEPT\n       { return _M_w != 0; }\n \n       size_t\n-      _M_do_count() const\n+      _M_do_count() const _GLIBCXX_NOEXCEPT\n       { return __builtin_popcountl(_M_w); }\n \n       unsigned long\n-      _M_do_to_ulong() const\n+      _M_do_to_ulong() const _GLIBCXX_NOEXCEPT\n       { return _M_w; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       unsigned long long\n-      _M_do_to_ullong() const\n+      _M_do_to_ullong() const noexcept\n       { return _M_w; }\n #endif\n \n       size_t\n-      _M_do_find_first(size_t __not_found) const\n+      _M_do_find_first(size_t __not_found) const _GLIBCXX_NOEXCEPT\n       {\n         if (_M_w != 0)\n           return __builtin_ctzl(_M_w);\n@@ -490,6 +493,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // find the next \"on\" bit that follows \"prev\"\n       size_t\n       _M_do_find_next(size_t __prev, size_t __not_found) const\n+\t_GLIBCXX_NOEXCEPT\n       {\n \t++__prev;\n \tif (__prev >= ((size_t) _GLIBCXX_BITSET_BITS_PER_WORD))\n@@ -513,30 +517,30 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       typedef unsigned long _WordT;\n \n-      _GLIBCXX_CONSTEXPR _Base_bitset()\n+      _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT\n       { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      constexpr _Base_bitset(unsigned long long)\n+      constexpr _Base_bitset(unsigned long long) noexcept\n #else\n       _Base_bitset(unsigned long)\n #endif\n       { }\n \n       static _GLIBCXX_CONSTEXPR size_t\n-      _S_whichword(size_t __pos )\n+      _S_whichword(size_t __pos ) _GLIBCXX_NOEXCEPT\n       { return __pos / _GLIBCXX_BITSET_BITS_PER_WORD; }\n \n       static _GLIBCXX_CONSTEXPR size_t\n-      _S_whichbyte(size_t __pos )\n+      _S_whichbyte(size_t __pos ) _GLIBCXX_NOEXCEPT\n       { return (__pos % _GLIBCXX_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }\n \n       static _GLIBCXX_CONSTEXPR size_t\n-      _S_whichbit(size_t __pos )\n+      _S_whichbit(size_t __pos ) _GLIBCXX_NOEXCEPT\n       {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }\n \n       static _GLIBCXX_CONSTEXPR _WordT\n-      _S_maskbit(size_t __pos )\n+      _S_maskbit(size_t __pos ) _GLIBCXX_NOEXCEPT\n       { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }\n \n       // This would normally give access to the data.  The bounds-checking\n@@ -547,89 +551,89 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       // make an unchecked call; all the memory ugliness is therefore\n       // localized to this single should-never-get-this-far function.\n       _WordT&\n-      _M_getword(size_t)\n-      { \n+      _M_getword(size_t) _GLIBCXX_NOEXCEPT\n+      {\n \t__throw_out_of_range(__N(\"_Base_bitset::_M_getword\")); \n-\treturn *new _WordT; \n+\treturn *new _WordT;\n       }\n \n       _WordT\n-      _M_getword(size_t __pos) const\n+      _M_getword(size_t __pos) const _GLIBCXX_NOEXCEPT\n       { return 0; }\n \n       _GLIBCXX_CONSTEXPR _WordT\n-      _M_hiword() const\n+      _M_hiword() const _GLIBCXX_NOEXCEPT\n       { return 0; }\n \n       void\n-      _M_do_and(const _Base_bitset<0>&)\n+      _M_do_and(const _Base_bitset<0>&) _GLIBCXX_NOEXCEPT\n       { }\n \n       void\n-      _M_do_or(const _Base_bitset<0>&)\n+      _M_do_or(const _Base_bitset<0>&) _GLIBCXX_NOEXCEPT\n       { }\n \n       void\n-      _M_do_xor(const _Base_bitset<0>&)\n+      _M_do_xor(const _Base_bitset<0>&) _GLIBCXX_NOEXCEPT\n       { }\n \n       void\n-      _M_do_left_shift(size_t)\n+      _M_do_left_shift(size_t) _GLIBCXX_NOEXCEPT\n       { }\n \n       void\n-      _M_do_right_shift(size_t)\n+      _M_do_right_shift(size_t) _GLIBCXX_NOEXCEPT\n       { }\n \n       void\n-      _M_do_flip()\n+      _M_do_flip() _GLIBCXX_NOEXCEPT\n       { }\n \n       void\n-      _M_do_set()\n+      _M_do_set() _GLIBCXX_NOEXCEPT\n       { }\n \n       void\n-      _M_do_reset()\n+      _M_do_reset() _GLIBCXX_NOEXCEPT\n       { }\n \n       // Are all empty bitsets equal to each other?  Are they equal to\n       // themselves?  How to compare a thing which has no state?  What is\n       // the sound of one zero-length bitset clapping?\n       bool\n-      _M_is_equal(const _Base_bitset<0>&) const\n+      _M_is_equal(const _Base_bitset<0>&) const _GLIBCXX_NOEXCEPT\n       { return true; }\n \n       size_t\n-      _M_are_all_aux() const\n+      _M_are_all_aux() const _GLIBCXX_NOEXCEPT\n       { return 0; }\n \n       bool\n-      _M_is_any() const\n+      _M_is_any() const _GLIBCXX_NOEXCEPT\n       { return false; }\n \n       size_t\n-      _M_do_count() const\n+      _M_do_count() const _GLIBCXX_NOEXCEPT\n       { return 0; }\n \n       unsigned long\n-      _M_do_to_ulong() const\n+      _M_do_to_ulong() const _GLIBCXX_NOEXCEPT\n       { return 0; }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       unsigned long long\n-      _M_do_to_ullong() const\n+      _M_do_to_ullong() const noexcept\n       { return 0; }\n #endif\n \n       // Normally \"not found\" is the size, but that could also be\n       // misinterpreted as an index in this corner case.  Oh well.\n       size_t\n-      _M_do_find_first(size_t) const\n+      _M_do_find_first(size_t) const _GLIBCXX_NOEXCEPT\n       { return 0; }\n \n       size_t\n-      _M_do_find_next(size_t, size_t) const\n+      _M_do_find_next(size_t, size_t) const _GLIBCXX_NOEXCEPT\n       { return 0; }\n     };\n \n@@ -641,7 +645,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef unsigned long _WordT;\n \n       static void \n-      _S_do_sanitize(_WordT& __val)\n+      _S_do_sanitize(_WordT& __val) _GLIBCXX_NOEXCEPT\n       { __val &= ~((~static_cast<_WordT>(0)) << _Extrabits); }\n     };\n \n@@ -651,7 +655,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef unsigned long _WordT;\n \n       static void \n-      _S_do_sanitize(_WordT) { } \n+      _S_do_sanitize(_WordT) _GLIBCXX_NOEXCEPT { } \n     };\n \n   /**\n@@ -727,7 +731,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef unsigned long _WordT;\n \n       void\n-      _M_do_sanitize()\n+      _M_do_sanitize() _GLIBCXX_NOEXCEPT\n       { \n \ttypedef _Sanitize<_Nb % _GLIBCXX_BITSET_BITS_PER_WORD> __sanitize_type;\n \t__sanitize_type::_S_do_sanitize(this->_M_hiword());\n@@ -761,18 +765,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treference();\n \t\n       public:\n-\treference(bitset& __b, size_t __pos)\n+\treference(bitset& __b, size_t __pos) _GLIBCXX_NOEXCEPT\n \t{\n \t  _M_wp = &__b._M_getword(__pos);\n \t  _M_bpos = _Base::_S_whichbit(__pos);\n \t}\n \n-\t~reference()\n+\t~reference() _GLIBCXX_NOEXCEPT\n \t{ }\n \n \t// For b[i] = __x;\n \treference&\n-\toperator=(bool __x)\n+\toperator=(bool __x) _GLIBCXX_NOEXCEPT\n \t{\n \t  if (__x)\n \t    *_M_wp |= _Base::_S_maskbit(_M_bpos);\n@@ -783,7 +787,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n \t// For b[i] = b[__j];\n \treference&\n-\toperator=(const reference& __j)\n+\toperator=(const reference& __j) _GLIBCXX_NOEXCEPT\n \t{\n \t  if ((*(__j._M_wp) & _Base::_S_maskbit(__j._M_bpos)))\n \t    *_M_wp |= _Base::_S_maskbit(_M_bpos);\n@@ -794,16 +798,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n \t// Flips the bit\n \tbool\n-\toperator~() const\n+\toperator~() const _GLIBCXX_NOEXCEPT\n \t{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) == 0; }\n \n \t// For __x = b[i];\n-\toperator bool() const\n+\toperator bool() const _GLIBCXX_NOEXCEPT\n \t{ return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }\n \n \t// For b[i].flip();\n \treference&\n-\tflip()\n+\tflip() _GLIBCXX_NOEXCEPT\n \t{\n \t  *_M_wp ^= _Base::_S_maskbit(_M_bpos);\n \t  return *this;\n@@ -813,12 +817,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // 23.3.5.1 constructors:\n       /// All bits set to zero.\n-      _GLIBCXX_CONSTEXPR bitset()\n+      _GLIBCXX_CONSTEXPR bitset() _GLIBCXX_NOEXCEPT\n       { }\n \n       /// Initial bits bitwise-copied from a single word (others set to zero).\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-      constexpr bitset(unsigned long long __val)\n+      constexpr bitset(unsigned long long __val) noexcept\n       : _Base(__val) { }\n #else\n       bitset(unsigned long __val)\n@@ -921,21 +925,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  These should be self-explanatory.\n        */\n       bitset<_Nb>&\n-      operator&=(const bitset<_Nb>& __rhs)\n+      operator&=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_do_and(__rhs);\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      operator|=(const bitset<_Nb>& __rhs)\n+      operator|=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_do_or(__rhs);\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      operator^=(const bitset<_Nb>& __rhs)\n+      operator^=(const bitset<_Nb>& __rhs) _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_do_xor(__rhs);\n \treturn *this;\n@@ -950,7 +954,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  These should be self-explanatory.\n        */\n       bitset<_Nb>&\n-      operator<<=(size_t __position)\n+      operator<<=(size_t __position) _GLIBCXX_NOEXCEPT\n       {\n \tif (__builtin_expect(__position < _Nb, 1))\n \t  {\n@@ -963,7 +967,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       bitset<_Nb>&\n-      operator>>=(size_t __position)\n+      operator>>=(size_t __position) _GLIBCXX_NOEXCEPT\n       {\n \tif (__builtin_expect(__position < _Nb, 1))\n \t  {\n@@ -983,14 +987,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @ingroup SGIextensions\n        */\n       bitset<_Nb>&\n-      _Unchecked_set(size_t __pos)\n+      _Unchecked_set(size_t __pos) _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_getword(__pos) |= _Base::_S_maskbit(__pos);\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      _Unchecked_set(size_t __pos, int __val)\n+      _Unchecked_set(size_t __pos, int __val) _GLIBCXX_NOEXCEPT\n       {\n \tif (__val)\n \t  this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);\n@@ -1000,21 +1004,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n \n       bitset<_Nb>&\n-      _Unchecked_reset(size_t __pos)\n+      _Unchecked_reset(size_t __pos) _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_getword(__pos) &= ~_Base::_S_maskbit(__pos);\n \treturn *this;\n       }\n \n       bitset<_Nb>&\n-      _Unchecked_flip(size_t __pos)\n+      _Unchecked_flip(size_t __pos) _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_getword(__pos) ^= _Base::_S_maskbit(__pos);\n \treturn *this;\n       }\n \n       bool\n-      _Unchecked_test(size_t __pos) const\n+      _Unchecked_test(size_t __pos) const _GLIBCXX_NOEXCEPT\n       { return ((this->_M_getword(__pos) & _Base::_S_maskbit(__pos))\n \t\t!= static_cast<_WordT>(0)); }\n       //@}\n@@ -1024,7 +1028,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief Sets every bit to true.\n        */\n       bitset<_Nb>&\n-      set()\n+      set() _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_do_set();\n \tthis->_M_do_sanitize();\n@@ -1049,7 +1053,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief Sets every bit to false.\n        */\n       bitset<_Nb>&\n-      reset()\n+      reset() _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_do_reset();\n \treturn *this;\n@@ -1074,7 +1078,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @brief Toggles every bit to its opposite value.\n        */\n       bitset<_Nb>&\n-      flip()\n+      flip() _GLIBCXX_NOEXCEPT\n       {\n \tthis->_M_do_flip();\n \tthis->_M_do_sanitize();\n@@ -1096,7 +1100,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       \n       /// See the no-argument flip().\n       bitset<_Nb>\n-      operator~() const\n+      operator~() const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(*this).flip(); }\n \n       //@{\n@@ -1247,22 +1251,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /// Returns the number of bits which are set.\n       size_t\n-      count() const\n+      count() const _GLIBCXX_NOEXCEPT\n       { return this->_M_do_count(); }\n \n       /// Returns the total number of bits.\n       _GLIBCXX_CONSTEXPR size_t\n-      size() const\n+      size() const _GLIBCXX_NOEXCEPT\n       { return _Nb; }\n \n       //@{\n       /// These comparisons for equality/inequality are, well, @e bitwise.\n       bool\n-      operator==(const bitset<_Nb>& __rhs) const\n+      operator==(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n       { return this->_M_is_equal(__rhs); }\n \n       bool\n-      operator!=(const bitset<_Nb>& __rhs) const\n+      operator!=(const bitset<_Nb>& __rhs) const _GLIBCXX_NOEXCEPT\n       { return !this->_M_is_equal(__rhs); }\n       //@}\n       \n@@ -1287,33 +1291,33 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @return  True if all the bits are set.\n        */\n       bool\n-      all() const\n+      all() const _GLIBCXX_NOEXCEPT\n       { return this->_M_are_all_aux() == _Nb; }\n \n       /**\n        *  @brief Tests whether any of the bits are on.\n        *  @return  True if at least one bit is set.\n        */\n       bool\n-      any() const\n+      any() const _GLIBCXX_NOEXCEPT\n       { return this->_M_is_any(); }\n \n       /**\n        *  @brief Tests whether any of the bits are on.\n        *  @return  True if none of the bits are set.\n        */\n       bool\n-      none() const\n+      none() const _GLIBCXX_NOEXCEPT\n       { return !this->_M_is_any(); }\n \n       //@{\n       /// Self-explanatory.\n       bitset<_Nb>\n-      operator<<(size_t __position) const\n+      operator<<(size_t __position) const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(*this) <<= __position; }\n \n       bitset<_Nb>\n-      operator>>(size_t __position) const\n+      operator>>(size_t __position) const _GLIBCXX_NOEXCEPT\n       { return bitset<_Nb>(*this) >>= __position; }\n       //@}\n       \n@@ -1324,7 +1328,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @sa  _Find_next\n        */\n       size_t\n-      _Find_first() const\n+      _Find_first() const _GLIBCXX_NOEXCEPT\n       { return this->_M_do_find_first(_Nb); }\n \n       /**\n@@ -1335,7 +1339,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @sa  _Find_first\n        */\n       size_t\n-      _Find_next(size_t __prev ) const\n+      _Find_next(size_t __prev ) const _GLIBCXX_NOEXCEPT\n       { return this->_M_do_find_next(__prev, _Nb); }\n     };\n \n@@ -1386,7 +1390,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   */\n   template<size_t _Nb>\n     inline bitset<_Nb>\n-    operator&(const bitset<_Nb>& __x, const bitset<_Nb>& __y)\n+    operator&(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     {\n       bitset<_Nb> __result(__x);\n       __result &= __y;\n@@ -1395,7 +1399,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<size_t _Nb>\n     inline bitset<_Nb>\n-    operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y)\n+    operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     {\n       bitset<_Nb> __result(__x);\n       __result |= __y;\n@@ -1404,7 +1408,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template <size_t _Nb>\n     inline bitset<_Nb>\n-    operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y)\n+    operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y) _GLIBCXX_NOEXCEPT\n     {\n       bitset<_Nb> __result(__x);\n       __result ^= __y;"}, {"sha": "3a980a54a3ccf49714fdad44b0066667e1f0aa5f", "filename": "libstdc++-v3/libsupc++/initializer_list", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Finitializer_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d861bf2cb8d21efd5f87f03150ab8e20f4e1155/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Finitializer_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Finitializer_list?ref=5d861bf2cb8d21efd5f87f03150ab8e20f4e1155", "patch": "@@ -1,6 +1,6 @@\n // std::initializer_list support -*- C++ -*-\n \n-// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -61,19 +61,20 @@ namespace std\n       : _M_array(__a), _M_len(__l) { }\n \n     public:\n-      constexpr initializer_list() : _M_array(0), _M_len(0) { }\n+      constexpr initializer_list() noexcept\n+      : _M_array(0), _M_len(0) { }\n \n       // Number of elements.\n       constexpr size_type\n-      size() { return _M_len; }\n+      size() const noexcept { return _M_len; }\n \n       // First element.\n       constexpr const_iterator\n-      begin() { return _M_array; }\n+      begin() const noexcept { return _M_array; }\n \n       // One past the last element.\n       constexpr const_iterator\n-      end() { return begin() + size(); }\n+      end() const noexcept { return begin() + size(); }\n   };\n \n   /**\n@@ -83,7 +84,7 @@ namespace std\n    */\n   template<class _Tp>\n     constexpr const _Tp*\n-    begin(initializer_list<_Tp> __ils)\n+    begin(initializer_list<_Tp> __ils) noexcept\n     { return __ils.begin(); }\n \n   /**\n@@ -93,7 +94,7 @@ namespace std\n    */\n   template<class _Tp>\n     constexpr const _Tp*\n-    end(initializer_list<_Tp> __ils)\n+    end(initializer_list<_Tp> __ils) noexcept\n     { return __ils.end(); }\n }\n "}]}