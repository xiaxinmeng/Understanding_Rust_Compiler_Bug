{"sha": "1027275d2e6e9c34d1703406111ca2d7cab150dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAyNzI3NWQyZTZlOWMzNGQxNzAzNDA2MTExY2EyZDdjYWIxNTBkYw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-12-09T20:52:27Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-12-09T20:52:27Z"}, "message": "re PR fortran/29464 ([4.1 only] problem with duplicate USE, ONLY of procedure in INTERFACE)\n\n2006-11-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/29464\n\t* module.c (load_generic_interfaces): Add symbols for all the\n\tlocal names of an interface.  Share the interface amongst the\n\tsymbols.\n\t* gfortran.h : Add generic_copy to symbol_attribute.\n\t* symbol.c (free_symbol): Only free interface if generic_copy\n\tis not set.\n\n2006-11-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/29464\n\t* gfortran.dg/module_interface_2.f90: New test.\n\nFrom-SVN: r119696", "tree": {"sha": "e1bb0983bc4f7aef81f313ba20585da56a4b546a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1bb0983bc4f7aef81f313ba20585da56a4b546a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1027275d2e6e9c34d1703406111ca2d7cab150dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1027275d2e6e9c34d1703406111ca2d7cab150dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1027275d2e6e9c34d1703406111ca2d7cab150dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1027275d2e6e9c34d1703406111ca2d7cab150dc/comments", "author": null, "committer": null, "parents": [{"sha": "4d4074e415dbf2029f49bef9fe48ed79c8c5a106", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4074e415dbf2029f49bef9fe48ed79c8c5a106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4074e415dbf2029f49bef9fe48ed79c8c5a106"}], "stats": {"total": 95, "additions": 79, "deletions": 16}, "files": [{"sha": "f3602064f96e1bbb2ecc01f11bd269af738af70c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1027275d2e6e9c34d1703406111ca2d7cab150dc/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1027275d2e6e9c34d1703406111ca2d7cab150dc/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1027275d2e6e9c34d1703406111ca2d7cab150dc", "patch": "@@ -1,3 +1,13 @@\n+2006-12-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/29464\n+\t* module.c (load_generic_interfaces): Add symbols for all the\n+\tlocal names of an interface.  Share the interface amongst the\n+\tsymbols.\n+\t* gfortran.h : Add generic_copy to symbol_attribute.\n+\t* symbol.c (free_symbol): Only free interface if generic_copy\n+\tis not set.\n+\n 2006-12-09  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29941"}, {"sha": "5e4b322aebf03904f10e191d9aac7cc9c3de847d", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1027275d2e6e9c34d1703406111ca2d7cab150dc/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1027275d2e6e9c34d1703406111ca2d7cab150dc/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=1027275d2e6e9c34d1703406111ca2d7cab150dc", "patch": "@@ -486,7 +486,7 @@ typedef struct\n     use_assoc:1;\t\t/* Symbol has been use-associated.  */\n \n   unsigned in_namelist:1, in_common:1, in_equivalence:1;\n-  unsigned function:1, subroutine:1, generic:1;\n+  unsigned function:1, subroutine:1, generic:1, generic_copy:1;\n   unsigned implicit_type:1;\t/* Type defined via implicit rules.  */\n   unsigned untyped:1;           /* No implicit type could be found.  */\n "}, {"sha": "7c9c2b1ab3cbf1933c377e313829931603c9c918", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1027275d2e6e9c34d1703406111ca2d7cab150dc/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1027275d2e6e9c34d1703406111ca2d7cab150dc/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=1027275d2e6e9c34d1703406111ca2d7cab150dc", "patch": "@@ -3024,6 +3024,8 @@ load_generic_interfaces (void)\n   const char *p;\n   char name[GFC_MAX_SYMBOL_LEN + 1], module[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_symbol *sym;\n+  gfc_interface *generic = NULL;\n+  int n, i;\n \n   mio_lparen ();\n \n@@ -3034,25 +3036,39 @@ load_generic_interfaces (void)\n       mio_internal_string (name);\n       mio_internal_string (module);\n \n-      /* Decide if we need to load this one or not.  */\n-      p = find_use_name (name);\n+      n = number_use_names (name);\n+      n = n ? n : 1;\n \n-      if (p == NULL || gfc_find_symbol (p, NULL, 0, &sym))\n+      for (i = 1; i <= n; i++)\n \t{\n-\t  while (parse_atom () != ATOM_RPAREN);\n-\t  continue;\n-\t}\n+\t  /* Decide if we need to load this one or not.  */\n+\t  p = find_use_name_n (name, &i);\n \n-      if (sym == NULL)\n-\t{\n-\t  gfc_get_symbol (p, NULL, &sym);\n+\t  if (p == NULL || gfc_find_symbol (p, NULL, 0, &sym))\n+\t    {\n+\t      while (parse_atom () != ATOM_RPAREN);\n+\t        continue;\n+\t    }\n \n-\t  sym->attr.flavor = FL_PROCEDURE;\n-\t  sym->attr.generic = 1;\n-\t  sym->attr.use_assoc = 1;\n-\t}\n+\t  if (sym == NULL)\n+\t    {\n+\t      gfc_get_symbol (p, NULL, &sym);\n \n-      mio_interface_rest (&sym->generic);\n+\t      sym->attr.flavor = FL_PROCEDURE;\n+\t      sym->attr.generic = 1;\n+\t      sym->attr.use_assoc = 1;\n+\t    }\n+\t  if (i == 1)\n+\t    {\n+\t      mio_interface_rest (&sym->generic);\n+\t      generic = sym->generic;\n+\t    }\n+\t  else\n+\t    {\n+\t      sym->generic = generic;\n+\t      sym->attr.generic_copy = 1;\n+\t    }\n+\t}\n     }\n \n   mio_rparen ();"}, {"sha": "7cb5e762de50be0f8115c61ef45d181eda3aadd5", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1027275d2e6e9c34d1703406111ca2d7cab150dc/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1027275d2e6e9c34d1703406111ca2d7cab150dc/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=1027275d2e6e9c34d1703406111ca2d7cab150dc", "patch": "@@ -1971,7 +1971,8 @@ gfc_free_symbol (gfc_symbol * sym)\n \n   gfc_free_namespace (sym->formal_ns);\n \n-  gfc_free_interface (sym->generic);\n+  if (!sym->attr.generic_copy)\n+    gfc_free_interface (sym->generic);\n \n   gfc_free_formal_arglist (sym->formal);\n "}, {"sha": "5204470816a20fa2518585f7944b3770c7d11df1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1027275d2e6e9c34d1703406111ca2d7cab150dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1027275d2e6e9c34d1703406111ca2d7cab150dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1027275d2e6e9c34d1703406111ca2d7cab150dc", "patch": "@@ -1,3 +1,8 @@\n+2006-12-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/29464\n+\t* gfortran.dg/module_interface_2.f90: New test.\n+\n 2006-12-09  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29941"}, {"sha": "1f9fde81edb4e4afc7753e72f8d5f68afdcc9418", "filename": "gcc/testsuite/gfortran.dg/module_interface_2.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1027275d2e6e9c34d1703406111ca2d7cab150dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_interface_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1027275d2e6e9c34d1703406111ca2d7cab150dc/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_interface_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_interface_2.f90?ref=1027275d2e6e9c34d1703406111ca2d7cab150dc", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! Tests the fix for PR29464, in which the second USE of the generic\n+! interface caused an error.\n+!\n+! Contributed by Vivek Rao <vivekrao4@yahoo.com>\n+!\n+module foo_mod\n+  implicit none\n+  interface twice\n+     module procedure twice_real\n+  end interface twice\n+contains\n+  real function twice_real(x)\n+    real :: x\n+    twice_real = 2*x\n+  end function twice_real\n+end module foo_mod\n+\n+  subroutine foobar ()\n+    use foo_mod, only: twice, twice\n+    print *, twice (99.0)\n+  end subroutine foobar\n+\n+  program xfoo\n+  use foo_mod, only: two => twice, dbl => twice\n+  implicit none\n+  call foobar ()\n+  print *, two (2.3)\n+  print *, dbl (2.3)\n+end program xfoo\n+! { dg-final { cleanup-modules \"foo_mod\" } }"}]}