{"sha": "500e4868bf5c89a3136fb329293872d29632ffad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAwZTQ4NjhiZjVjODlhMzEzNmZiMzI5MjkzODcyZDI5NjMyZmZhZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-05-20T21:33:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-05-20T21:33:46Z"}, "message": "re PR c++/59813 (tail-call elimination didn't fire for left-shift of char to cout)\n\n\tPR c++/59813\n\tPR target/90418\n\t* function.h (struct function): Add calls_eh_return member.\n\t* gimplify.c (gimplify_call_expr): Set cfun->calls_eh_return when\n\tgimplifying __builtin_eh_return call.\n\t* tree-inline.c (initialize_cfun): Copy calls_eh_return from src_cfun\n\tto cfun.\n\t(expand_call_inline): Or in src_cfun->calls_eh_return into\n\tdst_cfun->calls_eh_return.\n\t* tree-tailcall.c (suitable_for_tail_call_opt_p): Return false if\n\tcfun->calls_eh_return.\n\t* lto-streamer-in.c (input_struct_function_base): Read calls_eh_return.\n\t* lto-streamer-out.c (output_struct_function_base): Write\n\tcalls_eh_return.\n\nFrom-SVN: r271440", "tree": {"sha": "0176007982f06d3562abe18ff9dd21f58bf4643a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0176007982f06d3562abe18ff9dd21f58bf4643a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/500e4868bf5c89a3136fb329293872d29632ffad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500e4868bf5c89a3136fb329293872d29632ffad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/500e4868bf5c89a3136fb329293872d29632ffad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500e4868bf5c89a3136fb329293872d29632ffad/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e03ed662651dada81e39d8850da82e80f54fd2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e03ed662651dada81e39d8850da82e80f54fd2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e03ed662651dada81e39d8850da82e80f54fd2d"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "1c4e714e7d1057fe25579ef4c96845d102c44572", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=500e4868bf5c89a3136fb329293872d29632ffad", "patch": "@@ -1,3 +1,20 @@\n+2019-05-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/59813\n+\tPR target/90418\n+\t* function.h (struct function): Add calls_eh_return member.\n+\t* gimplify.c (gimplify_call_expr): Set cfun->calls_eh_return when\n+\tgimplifying __builtin_eh_return call.\n+\t* tree-inline.c (initialize_cfun): Copy calls_eh_return from src_cfun\n+\tto cfun.\n+\t(expand_call_inline): Or in src_cfun->calls_eh_return into\n+\tdst_cfun->calls_eh_return.\n+\t* tree-tailcall.c (suitable_for_tail_call_opt_p): Return false if\n+\tcfun->calls_eh_return.\n+\t* lto-streamer-in.c (input_struct_function_base): Read calls_eh_return.\n+\t* lto-streamer-out.c (output_struct_function_base): Write\n+\tcalls_eh_return.\n+\n 2019-05-20  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR rtl-optimization/43147"}, {"sha": "bfe9919a760fb3412c7ceda21dd3ce35d1740280", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=500e4868bf5c89a3136fb329293872d29632ffad", "patch": "@@ -327,6 +327,9 @@ struct GTY(()) function {\n      either as a subroutine or builtin.  */\n   unsigned int calls_alloca : 1;\n \n+  /* Nonzero if function being compiled can call __builtin_eh_return.  */\n+  unsigned int calls_eh_return : 1;\n+\n   /* Nonzero if function being compiled receives nonlocal gotos\n      from nested functions.  */\n   unsigned int has_nonlocal_label : 1;"}, {"sha": "5bacb255ba75901a3cd95e3b99b1f274216bf85d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=500e4868bf5c89a3136fb329293872d29632ffad", "patch": "@@ -3297,6 +3297,10 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n \t  break;\n \t}\n \n+      case BUILT_IN_EH_RETURN:\n+\tcfun->calls_eh_return = true;\n+\tbreak;\n+\n       default:\n         ;\n       }"}, {"sha": "49fd5730c7030608bb2e53aae7282d8c2e47a069", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=500e4868bf5c89a3136fb329293872d29632ffad", "patch": "@@ -1005,6 +1005,7 @@ input_struct_function_base (struct function *fn, struct data_in *data_in,\n   fn->has_forced_label_in_static = bp_unpack_value (&bp, 1);\n   fn->calls_alloca = bp_unpack_value (&bp, 1);\n   fn->calls_setjmp = bp_unpack_value (&bp, 1);\n+  fn->calls_eh_return = bp_unpack_value (&bp, 1);\n   fn->has_force_vectorize_loops = bp_unpack_value (&bp, 1);\n   fn->has_simduid_loops = bp_unpack_value (&bp, 1);\n   fn->va_list_fpr_size = bp_unpack_value (&bp, 8);"}, {"sha": "e22a9e596e1dd4cdaff0aac4e887125d6c56a552", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=500e4868bf5c89a3136fb329293872d29632ffad", "patch": "@@ -2029,6 +2029,7 @@ output_struct_function_base (struct output_block *ob, struct function *fn)\n   bp_pack_value (&bp, fn->has_forced_label_in_static, 1);\n   bp_pack_value (&bp, fn->calls_alloca, 1);\n   bp_pack_value (&bp, fn->calls_setjmp, 1);\n+  bp_pack_value (&bp, fn->calls_eh_return, 1);\n   bp_pack_value (&bp, fn->has_force_vectorize_loops, 1);\n   bp_pack_value (&bp, fn->has_simduid_loops, 1);\n   bp_pack_value (&bp, fn->va_list_fpr_size, 8);"}, {"sha": "719846ac9a2e45c1a0407290a559e84e0966cc5f", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=500e4868bf5c89a3136fb329293872d29632ffad", "patch": "@@ -2662,6 +2662,7 @@ initialize_cfun (tree new_fndecl, tree callee_fndecl, profile_count count)\n   cfun->va_list_gpr_size = src_cfun->va_list_gpr_size;\n   cfun->va_list_fpr_size = src_cfun->va_list_fpr_size;\n   cfun->has_nonlocal_label = src_cfun->has_nonlocal_label;\n+  cfun->calls_eh_return = src_cfun->calls_eh_return;\n   cfun->stdarg = src_cfun->stdarg;\n   cfun->after_inlining = src_cfun->after_inlining;\n   cfun->can_throw_non_call_exceptions\n@@ -4778,6 +4779,7 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n   src_properties = id->src_cfun->curr_properties & prop_mask;\n   if (src_properties != prop_mask)\n     dst_cfun->curr_properties &= src_properties | ~prop_mask;\n+  dst_cfun->calls_eh_return |= id->src_cfun->calls_eh_return;\n \n   gcc_assert (!id->src_cfun->after_inlining);\n "}, {"sha": "a99cd113ce660cd5f09efa4765c962acf418a583", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/500e4868bf5c89a3136fb329293872d29632ffad/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=500e4868bf5c89a3136fb329293872d29632ffad", "patch": "@@ -140,6 +140,7 @@ suitable_for_tail_opt_p (void)\n \n   return true;\n }\n+\n /* Returns false when the function is not suitable for tail call optimization\n    for some reason (e.g. if it takes variable number of arguments).\n    This test must pass in addition to suitable_for_tail_opt_p in order to make\n@@ -168,6 +169,11 @@ suitable_for_tail_call_opt_p (void)\n   if (cfun->calls_setjmp)\n     return false;\n \n+  /* Various targets don't handle tail calls correctly in functions\n+     that call __builtin_eh_return.  */\n+  if (cfun->calls_eh_return)\n+    return false;\n+\n   /* ??? It is OK if the argument of a function is taken in some cases,\n      but not in all cases.  See PR15387 and PR19616.  Revisit for 4.1.  */\n   for (param = DECL_ARGUMENTS (current_function_decl);"}]}