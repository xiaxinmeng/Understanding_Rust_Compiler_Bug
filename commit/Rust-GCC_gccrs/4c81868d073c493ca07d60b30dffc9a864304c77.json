{"sha": "4c81868d073c493ca07d60b30dffc9a864304c77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM4MTg2OGQwNzNjNDkzY2EwN2Q2MGIzMGRmZmM5YTg2NDMwNGM3Nw==", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2020-06-08T19:17:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-16T09:18:13Z"}, "message": "[Ada] v7r2cert: minor refactoring\n\ngcc/ada/\n\n\t* libgnat/s-thread__ae653.adb (taskVarAdd): Defunct, so remove.\n\t(Current_ATSD):  Make it a TLS variable.\n\t(OK): Move to package scope.\n\t(System.Storage_Elements): Import and Use.", "tree": {"sha": "753693b235ed5308639ef74e5f24009e2c4d8e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/753693b235ed5308639ef74e5f24009e2c4d8e8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c81868d073c493ca07d60b30dffc9a864304c77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c81868d073c493ca07d60b30dffc9a864304c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c81868d073c493ca07d60b30dffc9a864304c77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c81868d073c493ca07d60b30dffc9a864304c77/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "340375cae9e62db137a1d8231324097e8b6de856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/340375cae9e62db137a1d8231324097e8b6de856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/340375cae9e62db137a1d8231324097e8b6de856"}], "stats": {"total": 55, "additions": 20, "deletions": 35}, "files": [{"sha": "fcf1304e8baac2ff96d2349f0f980f33bf74c3ed", "filename": "gcc/ada/libgnat/s-thread__ae653.adb", "status": "modified", "additions": 20, "deletions": 35, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c81868d073c493ca07d60b30dffc9a864304c77/gcc%2Fada%2Flibgnat%2Fs-thread__ae653.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c81868d073c493ca07d60b30dffc9a864304c77/gcc%2Fada%2Flibgnat%2Fs-thread__ae653.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-thread__ae653.adb?ref=4c81868d073c493ca07d60b30dffc9a864304c77", "patch": "@@ -36,6 +36,7 @@ pragma Restrictions (No_Tasking);\n --  which do not use Ada tasking. This restriction ensures that this\n --  will be checked by the binder.\n \n+with System.Storage_Elements; use System.Storage_Elements;\n with System.OS_Versions; use System.OS_Versions;\n \n package body System.Threads is\n@@ -44,14 +45,16 @@ package body System.Threads is\n \n    package SSL renames System.Soft_Links;\n \n-   Current_ATSD : aliased System.Address := System.Null_Address;\n-   pragma Export (C, Current_ATSD, \"__gnat_current_atsd\");\n-\n    Main_ATSD : aliased ATSD;\n    --  TSD for environment task\n \n-   Stack_Limit : Address;\n+   Current_ATSD : aliased System.Address := System.Null_Address;\n+   pragma Thread_Local_Storage (Current_ATSD);\n+   --  pragma TLS needed since TaskVarAdd no longer available\n \n+   --  Assume guard pages for Helix APEX partitions, but leave\n+   --  checking mechanism in for now, in case of surprises. ???\n+   Stack_Limit : Address;\n    pragma Import (C, Stack_Limit, \"__gnat_stack_limit\");\n \n    type Set_Stack_Limit_Proc_Acc is access procedure;\n@@ -62,22 +65,17 @@ package body System.Threads is\n    --  Procedure to be called when a task is created to set stack limit if\n    --  limit checking is used.\n \n-   --------------------------\n-   -- VxWorks specific API --\n-   --------------------------\n+   --  VxWorks specific API\n \n    ERROR : constant STATUS := Interfaces.C.int (-1);\n+   OK    : constant STATUS := Interfaces.C.int (0);\n \n    function taskIdVerify (tid : t_id) return STATUS;\n    pragma Import (C, taskIdVerify, \"taskIdVerify\");\n \n    function taskIdSelf return t_id;\n    pragma Import (C, taskIdSelf, \"taskIdSelf\");\n \n-   function taskVarAdd\n-     (tid : t_id; pVar : System.Address) return int;\n-   pragma Import (C, taskVarAdd, \"taskVarAdd\");\n-\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -102,21 +100,18 @@ package body System.Threads is\n      (Sec_Stack_Ptr        : SST.SS_Stack_Ptr;\n       Process_ATSD_Address : System.Address)\n    is\n-      --  Current_ATSD must already be a taskVar of taskIdSelf.\n-      --  No assertion because taskVarGet is not available on VxWorks/CERT,\n-      --  which is used on VxWorks 653 3.x as a guest OS.\n \n-      TSD : constant ATSD_Access := From_Address (Process_ATSD_Address);\n+      ATSD : constant ATSD_Access := From_Address (Process_ATSD_Address);\n \n    begin\n \n-      TSD.Sec_Stack_Ptr := Sec_Stack_Ptr;\n-      SST.SS_Init (TSD.Sec_Stack_Ptr);\n+      ATSD.Sec_Stack_Ptr := Sec_Stack_Ptr;\n+      SST.SS_Init (ATSD.Sec_Stack_Ptr);\n       Current_ATSD := Process_ATSD_Address;\n-\n       Install_Handler;\n \n-      --  Initialize stack limit if needed\n+      --  Assume guard pages for Helix/Vx7, but leave in for now ???\n+      --  Initialize stack limit if needed.\n \n       if Current_ATSD /= Main_ATSD'Address\n         and then Set_Stack_Limit_Hook /= null\n@@ -184,24 +179,16 @@ package body System.Threads is\n    --------------\n \n    function Register (T : Thread_Id) return STATUS is\n-      Result : STATUS;\n-\n    begin\n       --  It cannot be assumed that the caller of this routine has a ATSD;\n       --  so neither this procedure nor the procedures that it calls should\n       --  raise or handle exceptions, or make use of a secondary stack.\n \n-      --  This routine is only necessary because taskVarAdd cannot be\n-      --  executed once an VxWorks 653 partition has entered normal mode\n-      --  (depending on configRecord.c, allocation could be disabled).\n-      --  Otherwise, everything could have been done in Thread_Body_Enter.\n-\n       if taskIdVerify (T) = ERROR then\n          return ERROR;\n       end if;\n \n-      Result := taskVarAdd (T, Current_ATSD'Address);\n-      pragma Assert (Result /= ERROR);\n+      Current_ATSD := To_Address (Integer_Address (T));\n \n       --  The same issue applies to the task variable that contains the stack\n       --  limit when that overflow checking mechanism is used instead of\n@@ -211,17 +198,15 @@ package body System.Threads is\n       --  System.Stack_Check_Limits = True.\n \n       pragma Warnings (Off);\n+\n       --  OS is a constant\n-      if Result /= ERROR\n-        and then OS /= VxWorks_653\n-        and then Set_Stack_Limit_Hook /= null\n-      then\n-         Result := taskVarAdd (T, Stack_Limit'Address);\n-         pragma Assert (Result /= ERROR);\n+      if OS /= VxWorks_653 and then Set_Stack_Limit_Hook /= null then\n+         --  Check that this is correct if limit checking left in. ???\n+         Stack_Limit := To_Address (Integer_Address (T));\n       end if;\n       pragma Warnings (On);\n \n-      return Result;\n+      return OK;\n    end Register;\n \n    -------------------"}]}