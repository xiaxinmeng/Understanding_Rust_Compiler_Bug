{"sha": "b4822ade387234e8ee361ed9b69ab399f12afa04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ4MjJhZGUzODcyMzRlOGVlMzYxZWQ5YjY5YWIzOTlmMTJhZmEwNA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-02T14:24:48Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-02T14:24:48Z"}, "message": "DnDEventMulticaster.java: New file.\n\n2003-03-02  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/dnd/DnDEventMulticaster.java: New file.\n\t* java/awt/dnd/DragSource.java\n\t(flavorMap): New member variable.\n\t(dragSourceListener): New member variable.\n\t(dragSourceMotionListener): New member variable.\n\t(getFlavorMap): Implemented.\n\t(createDragGestureRecognizer): Implemented.\n\t(addDragSourceListener): Implemented.\n\t(removeDragSourceListener): Implemented.\n\t(getDragSourceListeners): Implemented.\n\t(addDragSourceMotionListener): Implemented.\n\t(removeDragSourceMotionListener): Implemented.\n\t(getDragSourceMotionListeners): Implemented.\n\t(getListeners): Implemented.\n\t* java/awt/dnd/DragSourceContext.java\n\t(peer): New member variable.\n\t(cursor): New member variable.\n\t(transferable): New member variable.\n\t(trigger): New member variable.\n\t(dragSourceListener): New member variable.\n\t(image): New member variable.\n\t(offset): New member variable.\n\t(DragSourceContext): Implemented.\n\t(getDragSource): Implemented.\n\t(getComponent): Implemented.\n\t(getTrigger): Implemented.\n\t(getSourceActions): Implemented.\n\t(setCursor): Implemented.\n\t(getCursor): Implemented.\n\t(addDragSourceListener): Implemented.\n\t(removeDragSourceListener): Implemented.\n\t(getTransferable): Implemented.\n\t* java/awt/dnd/DropTarget.java\n\t(DropTargetAutoScroller.component): New member variable.\n\t(DropTargetAutoScroller.point): New member variable.\n\t(DropTargetAutoScroller.DropTargetAutoScroller): Implemented.\n\t(DropTargetAutoScroller.updateLocation): Implemented.\n\t(active): Renamed from isActive, defaults to true now.\n\t(component): New member variable.\n\t(flavorMap): New member variable.\n\t(actions): New member variable.\n\t(dropTargetContext): New member variable.\n\t(dropTargetListener): New member variable.\n\t(DropTarget): Implemented.\n\t(getComponent): Implemented.\n\t(setComponent): Implemented.\n\t(setDefaultActions): Implemented.\n\t(getDefaultActions): Implemented.\n\t(setActive): Use active instead of isActive.\n\t(isActive): Use active instead of isActive.\n\t(addDropTargetListener): Implemented.\n\t(removeDropTargetListener): Implemented.\n\t(getFlavorMap): Implemented.\n\t(setFlavorMap): Implemented.\n\t(getDropTargetContext): Implemented.\n\t(createDropTargetContext): Implemented.\n\t(createDropTargetAutoScroller): Implemented.\n\t* java/awt/dnd/DropTargetContext.java\n\t(TransferableProxy.getTransferDataFlavors): Implemented.\n\t(TransferableProxy.isDataFlavorSupported): Implemented.\n\t(TransferableProxy.getTransferData): Implemented.\n\t(dropTarget):  New member variable.\n\t(dtcp): New member variable.\n\t(DropTargetContext): New package private constructor.\n\t(getDropTarget): Implemented.\n\t(getComponent): Implemented.\n\t(addNotify): Implemented.\n\t(removeNotify): Implemented.\n\t(getCurrentDataFlavorsAsList): Implemented.\n\t(isDataFlavorSupported): Implemented.\n\t* java/awt/dnd/MouseDragGestureRecognizer.java\n\t(registerListeners): Implemented.\n\t(unregisterListeners): Implemented.\n\t* Makefile.am\n\t(awt_java_source_files): Added java/awt/dnd/DnDEventMulticaster.java.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r63665", "tree": {"sha": "43e0188013ec61445b1395a9275af27bbb9149b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43e0188013ec61445b1395a9275af27bbb9149b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4822ade387234e8ee361ed9b69ab399f12afa04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4822ade387234e8ee361ed9b69ab399f12afa04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4822ade387234e8ee361ed9b69ab399f12afa04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4822ade387234e8ee361ed9b69ab399f12afa04/comments", "author": null, "committer": null, "parents": [{"sha": "8a035a6bf6c79874f0d3f57152562979d0e222f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a035a6bf6c79874f0d3f57152562979d0e222f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a035a6bf6c79874f0d3f57152562979d0e222f6"}], "stats": {"total": 405, "additions": 354, "deletions": 51}, "files": [{"sha": "3416b9ba9548c27b98746eeace3ddb934641809c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b4822ade387234e8ee361ed9b69ab399f12afa04", "patch": "@@ -1,3 +1,82 @@\n+2003-03-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/dnd/DnDEventMulticaster.java: New file.\n+\t* java/awt/dnd/DragSource.java\n+\t(flavorMap): New member variable.\n+\t(dragSourceListener): New member variable.\n+\t(dragSourceMotionListener): New member variable.\n+\t(getFlavorMap): Implemented.\n+\t(createDragGestureRecognizer): Implemented.\n+\t(addDragSourceListener): Implemented.\n+\t(removeDragSourceListener): Implemented.\n+\t(getDragSourceListeners): Implemented.\n+\t(addDragSourceMotionListener): Implemented.\n+\t(removeDragSourceMotionListener): Implemented.\n+\t(getDragSourceMotionListeners): Implemented.\n+\t(getListeners): Implemented.\n+\t* java/awt/dnd/DragSourceContext.java\n+\t(peer): New member variable.\n+\t(cursor): New member variable.\n+\t(transferable): New member variable.\n+\t(trigger): New member variable.\n+\t(dragSourceListener): New member variable.\n+\t(image): New member variable.\n+\t(offset): New member variable.\n+\t(DragSourceContext): Implemented.\n+\t(getDragSource): Implemented.\n+\t(getComponent): Implemented.\n+\t(getTrigger): Implemented.\n+\t(getSourceActions): Implemented.\n+\t(setCursor): Implemented.\n+\t(getCursor): Implemented.\n+\t(addDragSourceListener): Implemented.\n+\t(removeDragSourceListener): Implemented.\n+\t(getTransferable): Implemented.\n+\t* java/awt/dnd/DropTarget.java\n+\t(DropTargetAutoScroller.component): New member variable.\n+\t(DropTargetAutoScroller.point): New member variable.\n+\t(DropTargetAutoScroller.DropTargetAutoScroller): Implemented.\n+\t(DropTargetAutoScroller.updateLocation): Implemented.\n+\t(active): Renamed from isActive, defaults to true now.\n+\t(component): New member variable.\n+\t(flavorMap): New member variable.\n+\t(actions): New member variable.\n+\t(dropTargetContext): New member variable.\n+\t(dropTargetListener): New member variable.\n+\t(DropTarget): Implemented.\n+\t(getComponent): Implemented.\n+\t(setComponent): Implemented.\n+\t(setDefaultActions): Implemented.\n+\t(getDefaultActions): Implemented.\n+\t(setActive): Use active instead of isActive.\n+\t(isActive): Use active instead of isActive.\n+\t(addDropTargetListener): Implemented.\n+\t(removeDropTargetListener): Implemented.\n+\t(getFlavorMap): Implemented.\n+\t(setFlavorMap): Implemented.\n+\t(getDropTargetContext): Implemented.\n+\t(createDropTargetContext): Implemented.\n+\t(createDropTargetAutoScroller): Implemented.\n+\t* java/awt/dnd/DropTargetContext.java\n+\t(TransferableProxy.getTransferDataFlavors): Implemented.\n+\t(TransferableProxy.isDataFlavorSupported): Implemented.\n+\t(TransferableProxy.getTransferData): Implemented.\n+\t(dropTarget):  New member variable.\n+\t(dtcp): New member variable.\n+\t(DropTargetContext): New package private constructor.\n+\t(getDropTarget): Implemented.\n+\t(getComponent): Implemented.\n+\t(addNotify): Implemented.\n+\t(removeNotify): Implemented.\n+\t(getCurrentDataFlavorsAsList): Implemented.\n+\t(isDataFlavorSupported): Implemented.\n+\t* java/awt/dnd/MouseDragGestureRecognizer.java\n+\t(registerListeners): Implemented.\n+\t(unregisterListeners): Implemented.\n+\t* Makefile.am\n+\t(awt_java_source_files): Added java/awt/dnd/DnDEventMulticaster.java.\n+\t* Makefile.in: Regenerated.\n+\n 2003-03-02  Michael Koch  <konqueror@gmx.de>\n \n \t* java/awt/Component.java"}, {"sha": "e5f849fcce2fcfd37fd3f641ca601b762f0fc5c3", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=b4822ade387234e8ee361ed9b69ab399f12afa04", "patch": "@@ -1037,6 +1037,7 @@ java/awt/dnd/peer/DragSourceContextPeer.java \\\n java/awt/dnd/peer/DropTargetContextPeer.java \\\n java/awt/dnd/peer/DropTargetPeer.java \\\n java/awt/dnd/DnDConstants.java \\\n+java/awt/dnd/DnDEventMulticaster.java \\\n java/awt/dnd/DragGestureEvent.java \\\n java/awt/dnd/DragGestureListener.java \\\n java/awt/dnd/DragGestureRecognizer.java\t\\"}, {"sha": "589605c7f3f0d91401ba096c8f207f0300963ec5", "filename": "libjava/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=b4822ade387234e8ee361ed9b69ab399f12afa04", "patch": "@@ -805,6 +805,7 @@ java/awt/dnd/peer/DragSourceContextPeer.java \\\n java/awt/dnd/peer/DropTargetContextPeer.java \\\n java/awt/dnd/peer/DropTargetPeer.java \\\n java/awt/dnd/DnDConstants.java \\\n+java/awt/dnd/DnDEventMulticaster.java \\\n java/awt/dnd/DragGestureEvent.java \\\n java/awt/dnd/DragGestureListener.java \\\n java/awt/dnd/DragGestureRecognizer.java\t\\\n@@ -3042,6 +3043,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/datatransfer/Transferable.P \\\n .deps/java/awt/datatransfer/UnsupportedFlavorException.P \\\n .deps/java/awt/dnd/Autoscroll.P .deps/java/awt/dnd/DnDConstants.P \\\n+.deps/java/awt/dnd/DnDEventMulticaster.P \\\n .deps/java/awt/dnd/DragGestureEvent.P \\\n .deps/java/awt/dnd/DragGestureListener.P \\\n .deps/java/awt/dnd/DragGestureRecognizer.P \\"}, {"sha": "0241e371f4450770dc2f882aab156af046f7f68b", "filename": "libjava/java/awt/dnd/DnDEventMulticaster.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2Fjava%2Fawt%2Fdnd%2FDnDEventMulticaster.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2Fjava%2Fawt%2Fdnd%2FDnDEventMulticaster.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDnDEventMulticaster.java?ref=b4822ade387234e8ee361ed9b69ab399f12afa04", "patch": "@@ -0,0 +1,74 @@\n+/* DnDEventMulticaster.java -- helper class for listener chains in java.awt.dnd\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.awt.dnd;\n+\n+import java.awt.AWTEventMulticaster;\n+import java.util.EventListener;\n+\n+class DnDEventMulticaster extends AWTEventMulticaster\n+{\n+  protected DnDEventMulticaster (EventListener a, EventListener b)\n+  {\n+    super (a, b);\n+  }\n+  \n+  public static DragSourceListener add (DragSourceListener a,\n+                                        DragSourceListener b)\n+  {\n+    return (DragSourceListener) addInternal (a, b);\n+  }\n+\n+  public static DragSourceMotionListener add (DragSourceMotionListener a,\n+                                              DragSourceMotionListener b)\n+  {\n+    return (DragSourceMotionListener) addInternal (a, b);\n+  }\n+  \n+  public static DragSourceListener remove (DragSourceListener a,\n+                                           DragSourceListener b)\n+  {\n+    return (DragSourceListener) removeInternal (a, b);\n+  }\n+\n+  public static DragSourceMotionListener remove (DragSourceMotionListener a,\n+                                                 DragSourceMotionListener b)\n+  {\n+    return (DragSourceMotionListener) removeInternal (a, b);\n+  }\n+}"}, {"sha": "f6083f674f60fa16b2d2bcf3dfe9849296f2fad0", "filename": "libjava/java/awt/dnd/DragSource.java", "status": "modified", "additions": 59, "deletions": 8, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2Fjava%2Fawt%2Fdnd%2FDragSource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2Fjava%2Fawt%2Fdnd%2FDragSource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDragSource.java?ref=b4822ade387234e8ee361ed9b69ab399f12afa04", "patch": "@@ -44,12 +44,20 @@\n import java.awt.HeadlessException;\n import java.awt.Image;\n import java.awt.Point;\n+import java.awt.Toolkit;\n import java.awt.datatransfer.FlavorMap;\n+import java.awt.datatransfer.SystemFlavorMap;\n import java.awt.datatransfer.Transferable;\n import java.awt.dnd.peer.DragSourceContextPeer;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.EventListener;\n \n+/**\n+ * @since 1.2\n+ */\n public class DragSource implements Serializable\n {\n   /**\n@@ -64,6 +72,11 @@ public class DragSource implements Serializable\n   public static final Cursor DefaultMoveNoDrop = null;\n   public static final Cursor DefaultLinkNoDrop = null;\n \n+  private transient FlavorMap flavorMap = SystemFlavorMap.getDefaultFlavorMap ();\n+\n+  private transient DragSourceListener dragSourceListener;\n+  private transient DragSourceMotionListener dragSourceMotionListener;\n+\n   /**\n    * Initializes the drag source.\n    *\n@@ -159,51 +172,89 @@ public void startDrag(DragGestureEvent trigger, Cursor dragCursor,\n \n   public FlavorMap getFlavorMap()\n   {\n-    return null;\n+    return flavorMap;\n   }\n \n   public DragGestureRecognizer\n     createDragGestureRecognizer(Class recognizer, Component c, int actions,\n                                 DragGestureListener dgl)\n   {\n-    return null;\n+    return Toolkit.getDefaultToolkit ()\n+                  .createDragGestureRecognizer (recognizer, this, c, actions,\n+                                                dgl);\n   }\n \n   public DragGestureRecognizer\n     createDefaultDragGestureRecognizer(Component c, int actions,\n                                        DragGestureListener dgl)\n   {\n-    return null;\n+    return createDragGestureRecognizer (MouseDragGestureRecognizer.class, c,\n+                                        actions, dgl);\n   }\n \n+  /**\n+   * @since 1.4\n+   */\n   public void addDragSourceListener(DragSourceListener l)\n   {\n+    DnDEventMulticaster.add (dragSourceListener, l);\n   }\n \n+  /**\n+   * @since 1.4\n+   */\n   public void removeDragSourceListener(DragSourceListener l)\n   {\n+    DnDEventMulticaster.remove (dragSourceListener, l);\n   }\n \n+  /**\n+   * @since 1.4\n+   */\n   public DragSourceListener[] getDragSourceListeners()\n   {\n-    return null;\n+    return (DragSourceListener[]) getListeners (DragSourceListener.class);\n   }\n \n+  /**\n+   * @since 1.4\n+   */\n   public void addDragSourceMotionListener(DragSourceMotionListener l)\n   {\n+    DnDEventMulticaster.add (dragSourceMotionListener, l);\n   }\n \n+  /**\n+   * @since 1.4\n+   */\n   public void removeDragSourceMotionListener(DragSourceMotionListener l)\n   {\n+    DnDEventMulticaster.remove (dragSourceMotionListener, l);\n   }\n \n-  public DragSourceMotionListener[] getDragSourceMotionListeners()\n+  /**\n+   * @since 1.4\n+   */\n+  public DragSourceMotionListener[] getDragSourceMotionListeners ()\n   {\n-    return null;\n+    return (DragSourceMotionListener[]) getListeners\n+                                         (DragSourceMotionListener.class);\n   }\n \n-  public EventListener[] getListeners(Class type)\n+  /**\n+   * @since 1.4\n+   */\n+  public EventListener[] getListeners (Class listenerType)\n   {\n-    return null;\n+    if (listenerType == DragSourceListener.class)\n+      return DnDEventMulticaster.getListeners (dragSourceListener,\n+                                               listenerType);\n+\n+    if (listenerType == DragSourceMotionListener.class)\n+      return DnDEventMulticaster.getListeners (dragSourceMotionListener,\n+                                               listenerType);\n+\n+    // Return an empty EventListener array.\n+    return new EventListener [0];\n   }\n } // class DragSource"}, {"sha": "1760cd02065b692f49498790bdcaff636b9b6042", "filename": "libjava/java/awt/dnd/DragSourceContext.java", "status": "modified", "additions": 69, "deletions": 12, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2Fjava%2Fawt%2Fdnd%2FDragSourceContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2Fjava%2Fawt%2Fdnd%2FDragSourceContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDragSourceContext.java?ref=b4822ade387234e8ee361ed9b69ab399f12afa04", "patch": "@@ -44,52 +44,103 @@\n import java.awt.Point;\n import java.awt.datatransfer.Transferable;\n import java.awt.dnd.peer.DragSourceContextPeer;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.TooManyListenersException;\n \n+/**\n+ * @since 1.2\n+ */\n public class DragSourceContext\n   implements DragSourceListener, DragSourceMotionListener, Serializable\n {\n+  /**\n+   * Compatible with JDK 1.2+\n+   */\n   static final long serialVersionUID = -115407898692194719L;\n \n   protected static final int DEFAULT = 0;\n   protected static final int ENTER = 1;\n   protected static final int OVER = 2;\n   protected static final int CHANGED = 3;\n \n-  public DragSourceContext(DragSourceContextPeer peer, DragGestureEvent dge,\n-                           Cursor cursor, Image image, Point offset,\n-                           Transferable trans, DragSourceListener dsl)\n-  {\n+  private DragSourceContextPeer peer;\n+  private Cursor cursor;\n+  private Transferable transferable;\n+  private DragGestureEvent trigger;\n+  private DragSourceListener dragSourceListener;\n+  private boolean useCustomCursor; // FIXME: currently unused but needed for serialization.\n+  private int sourceActions; // FIXME: currently unused but needed for serialization.\n+  private Image image;\n+  private Point offset;\n+  \n+  /**\n+   * Initializes a drag source context.\n+   *\n+   * @exception IllegalArgumentException If Component or DragSource of trigger\n+   * are null, the drag action for the trigger event is DnDConstants.ACTION_NONE\n+   * or if the source actions for the DragGestureRecognizer associated with the\n+   * trigger event are equal to DnDConstants.ACTION_NONE.\n+   * @exception NullPointerException If peer or trigger is null.\n+   */\n+  public DragSourceContext (DragSourceContextPeer peer,\n+                            DragGestureEvent trigger, Cursor cursor,\n+                            Image image, Point offset, Transferable trans,\n+                            DragSourceListener dsl)\n+  {\n+    if (peer == null\n+        || trigger == null)\n+      throw new NullPointerException ();\n+\n+    if (trigger.getComponent () == null\n+        || trigger.getDragSource () == null\n+        || trigger.getDragAction () == DnDConstants.ACTION_NONE\n+        || trigger.getSourceAsDragGestureRecognizer ()\n+              .getSourceActions () == DnDConstants.ACTION_NONE)\n+      throw new IllegalArgumentException ();\n+\n+    this.peer = peer;\n+    this.trigger = trigger;\n+    this.cursor = cursor;\n+    this.image = image;\n+    this.offset = offset;\n+    this.transferable = trans;\n+    this.dragSourceListener = dsl;\n+    \n+    throw new Error (\"not implemented\");\n   }\n \n   public DragSource getDragSource()\n   {\n-    return null;\n+    return trigger.getDragSource ();\n   }\n \n   public Component getComponent()\n   {\n-    return null;\n+    return trigger.getComponent ();\n   }\n \n   public DragGestureEvent getTrigger()\n   {\n-    return null;\n+    return trigger;\n   }\n \n   public int getSourceActions()\n   {\n-    return 0;\n+    return trigger.getSourceAsDragGestureRecognizer ().getSourceActions ();\n   }\n \n-  public void setCursor(Cursor c)\n+  public void setCursor (Cursor cursor)\n   {\n+    this.cursor = cursor;\n+    // FIXME: Check if we need to do more here\n   }\n \n   public Cursor getCursor()\n   {\n-    return null;\n+    return cursor;\n   }\n \n   /**\n@@ -101,10 +152,16 @@ public Cursor getCursor()\n   public void addDragSourceListener (DragSourceListener dsl)\n     throws TooManyListenersException\n   {\n+    if (dragSourceListener != null)\n+      throw new TooManyListenersException ();\n+\n+    dragSourceListener = dsl;\n   }\n \n-  public void removeDragSourceListener(DragSourceListener l)\n+  public void removeDragSourceListener (DragSourceListener dsl)\n   {\n+    if (dragSourceListener == dsl)\n+      dragSourceListener = null;\n   }\n \n   public void transferablesFlavorsChanged()\n@@ -137,7 +194,7 @@ public void dragMouseMoved(DragSourceDragEvent e)\n \n   public Transferable getTransferable()\n   {\n-    return null;\n+    return transferable;\n   }\n \n   protected void updateCurrentCursor(int dropOp, int targetAct, int status)"}, {"sha": "3be2786a5a9c636e039c7413a0e3b372a799901e", "filename": "libjava/java/awt/dnd/DropTarget.java", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2Fjava%2Fawt%2Fdnd%2FDropTarget.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2Fjava%2Fawt%2Fdnd%2FDropTarget.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDropTarget.java?ref=b4822ade387234e8ee361ed9b69ab399f12afa04", "patch": "@@ -39,14 +39,19 @@\n \n import java.awt.Point;\n import java.awt.Component;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.HeadlessException;\n import java.awt.datatransfer.FlavorMap;\n import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n import java.io.Serializable;\n import java.util.EventListener;\n import java.util.TooManyListenersException;\n \n-/** STUB CLASS ONLY */\n+/**\n+ * @author Michael Koch\n+ * @since 1.2\n+ */\n public class DropTarget\n   implements DropTargetListener, EventListener, Serializable\n {\n@@ -58,12 +63,18 @@\n   protected static class DropTargetAutoScroller\n     implements ActionListener\n   {\n+    private Component component;\n+    private Point point;\n+    \n     protected DropTargetAutoScroller (Component c, Point p)\n     {\n+      component = c;\n+      point = p;\n     }\n \n     protected void updateLocation (Point newLocn)\n     {\n+      point = newLocn;\n     }\n \n     protected void stop ()\n@@ -74,9 +85,13 @@ public void actionPerformed (ActionEvent e)\n     {\n     }\n   }\n-  \n-  // FIXME: check the correctness of default value.\n-  private boolean isActive = false;\n+\n+  private Component component;\n+  private FlavorMap flavorMap;\n+  private int actions;\n+  private DropTargetContext dropTargetContext;\n+  private DropTargetListener dropTargetListener;\n+  private boolean active = true;\n     \n   /**\n    * Creates a <code>DropTarget</code> object.\n@@ -131,46 +146,57 @@ public DropTarget (Component c, int i, DropTargetListener dtl, boolean b)\n   public DropTarget (Component c, int i, DropTargetListener dtl, boolean b,\n                      FlavorMap fm)\n   {\n+    if (GraphicsEnvironment.isHeadless ())\n+      throw new HeadlessException ();\n+\n+    component = c;\n+    actions = i;\n+    dropTargetListener = dtl;\n+    flavorMap = fm;\n+    \n+    setActive (b);\n   }\n \n   /**\n    * Sets the component associated with this drop target object.\n    */\n   public void setComponent (Component c)\n   {\n+    component = c;\n   }\n \n   /**\n    * Returns the component associated with this drop target object.\n    */\n   public Component getComponent ()\n   {\n-    return null;\n+    return component;\n   }\n \n   /**\n    * Sets the default actions.\n    */\n   public void setDefaultActions (int ops)\n   {\n+    actions = ops;\n   }\n \n   /**\n    * Returns the default actions.\n    */\n   public int getDefaultActions ()\n   {\n-    return 0;\n+    return actions;\n   }\n \n-  public void setActive(boolean isActive)\n+  public void setActive (boolean active)\n   {\n-    this.isActive = isActive;\n+    this.active = active;\n   }\n \n   public boolean isActive()\n   {\n-    return this.isActive;\n+    return active;\n   }\n \n   /**\n@@ -182,10 +208,16 @@ public boolean isActive()\n   public void addDropTargetListener (DropTargetListener dtl)\n     throws TooManyListenersException\n   {\n+    if (dtl != null)\n+      throw new TooManyListenersException ();\n+    \n+    dropTargetListener = dtl;\n   }\n \n   public void removeDropTargetListener(DropTargetListener dtl)\n   {\n+    // FIXME: Do we need to do something with dtl ?\n+    dropTargetListener = null;\n   }\n \n   public void dragEnter(DropTargetDragEvent dtde)\n@@ -210,11 +242,12 @@ public void drop(DropTargetDropEvent dtde)\n \n   public FlavorMap getFlavorMap()\n   {\n-    return null;\n+    return flavorMap;\n   }\n \n   public void setFlavorMap(FlavorMap fm)\n   {\n+    flavorMap = fm;\n   }\n \n   public void addNotify(java.awt.peer.ComponentPeer peer)\n@@ -227,18 +260,21 @@ public void removeNotify(java.awt.peer.ComponentPeer peer)\n \n   public DropTargetContext getDropTargetContext()\n   {\n-    return null;\n+    if (dropTargetContext == null)\n+      dropTargetContext = createDropTargetContext ();\n+    \n+    return dropTargetContext;\n   }\n \n   protected DropTargetContext createDropTargetContext()\n   {\n-    return null;\n+    return new DropTargetContext (this);\n   }\n \n   protected DropTarget.DropTargetAutoScroller createDropTargetAutoScroller\n                                                        (Component c, Point p)\n   {\n-    return null;\n+    return new DropTarget.DropTargetAutoScroller (c, p);\n   }\n \n   protected void initializeAutoscrolling(Point p)"}, {"sha": "4fc1a4428a9b80869193b8084d488cca9b956d5c", "filename": "libjava/java/awt/dnd/DropTargetContext.java", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDropTargetContext.java?ref=b4822ade387234e8ee361ed9b69ab399f12afa04", "patch": "@@ -67,46 +67,49 @@ protected class TransferableProxy implements Transferable\n     \n     public DataFlavor[] getTransferDataFlavors ()\n     {\n-      // FIXME: implement this\n-      return null;\n+      return transferable.getTransferDataFlavors ();\n     }\n \n     public boolean isDataFlavorSupported (DataFlavor flavor)\n     {\n-      // FIXME: implement this\n-      return false;\n+      return transferable.isDataFlavorSupported (flavor);\n     }\n \n     public Object getTransferData (DataFlavor flavor)\n       throws UnsupportedFlavorException, IOException\n     {\n-      // FIXME: implement this\n-      return null;\n+      return transferable.getTransferData (flavor);\n     }\n   }\n \n+  private DropTarget dropTarget;\n   private int targetActions;\n+  private java.awt.dnd.peer.DropTargetContextPeer dtcp;\n+\n+  // package private\n+  DropTargetContext (DropTarget dropTarget)\n+  {\n+    this.dropTarget = dropTarget;\n+  }\n \n   public DropTarget getDropTarget ()\n   {\n-    // FIXME: implement this\n-    return null;\n+    return dropTarget;\n   }\n \n   public Component getComponent ()\n   {\n-    // FIXME: implement this\n-    return null;\n+    return dropTarget.getComponent ();\n   }\n \n   public void addNotify (java.awt.dnd.peer.DropTargetContextPeer dtcp)\n   {\n-    // FIXME: implement this\n+    this.dtcp = dtcp;\n   }\n \n   public void removeNotify ()\n   {\n-    // FIXME: implement this\n+    this.dtcp = null;\n   }\n \n   protected void setTargetActions (int actions)\n@@ -157,14 +160,12 @@ protected DataFlavor[] getCurrentDataFlavors ()\n \n   protected List getCurrentDataFlavorsAsList ()\n   {\n-    // FIXME: implement this\n-    return null;\n+    return Arrays.asList (getCurrentDataFlavors ());\n   }\n \n   protected boolean isDataFlavorSupported (DataFlavor flavor)\n   {\n-    // FIXME: implement this\n-    return false;\n+    return getCurrentDataFlavorsAsList ().contains (flavor);\n   }\n \n   /**"}, {"sha": "a94c82525dc0935f9456d0518d86a3420319d219", "filename": "libjava/java/awt/dnd/MouseDragGestureRecognizer.java", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2Fjava%2Fawt%2Fdnd%2FMouseDragGestureRecognizer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4822ade387234e8ee361ed9b69ab399f12afa04/libjava%2Fjava%2Fawt%2Fdnd%2FMouseDragGestureRecognizer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FMouseDragGestureRecognizer.java?ref=b4822ade387234e8ee361ed9b69ab399f12afa04", "patch": "@@ -84,12 +84,14 @@ protected MouseDragGestureRecognizer (DragSource ds)\n \n   protected void registerListeners ()\n   {\n-    // FIXME: implement this\n+    component.addMouseListener (this);\n+    component.addMouseMotionListener (this);\n   }\n \n   protected void unregisterListeners ()\n   {\n-    // FIXME: implement this\n+    component.removeMouseListener (this);\n+    component.removeMouseMotionListener (this);\n   }\n \n   public void mouseClicked (MouseEvent e)"}]}