{"sha": "d6e8719dd8e883b61121fede6e78e34012c84c9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZlODcxOWRkOGU4ODNiNjExMjFmZWRlNmU3OGUzNDAxMmM4NGM5Yg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-07-30T14:21:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T14:21:09Z"}, "message": "checks.adb, [...]: Minor reformatting.\n\n2014-07-30  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb, a-cihase.adb, a-cihase.ads, a-chtgop.adb, a-chtgop.ads,\n\ta-except.adb, a-except-2005.adb, a-cborse.adb, a-cborse.ads,\n\ta-exexda.adb, a-elchha.adb, exp_aggr.adb, a-cohase.adb: Minor\n\treformatting.\n\nFrom-SVN: r213280", "tree": {"sha": "44e4c774ab702d0af7e2bcd8781d4f2883d3d6e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44e4c774ab702d0af7e2bcd8781d4f2883d3d6e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6e8719dd8e883b61121fede6e78e34012c84c9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e8719dd8e883b61121fede6e78e34012c84c9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e8719dd8e883b61121fede6e78e34012c84c9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e8719dd8e883b61121fede6e78e34012c84c9b/comments", "author": null, "committer": null, "parents": [{"sha": "6b6bce610bb78e3cbe6a7d00d66270b9ba71e5a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6bce610bb78e3cbe6a7d00d66270b9ba71e5a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6bce610bb78e3cbe6a7d00d66270b9ba71e5a8"}], "stats": {"total": 655, "additions": 328, "deletions": 327}, "files": [{"sha": "ee7d601b3936f814cde6166d35ae4cd40c1c9e33", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -1,3 +1,10 @@\n+2014-07-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb, a-cihase.adb, a-cihase.ads, a-chtgop.adb, a-chtgop.ads,\n+\ta-except.adb, a-except-2005.adb, a-cborse.adb, a-cborse.ads,\n+\ta-exexda.adb, a-elchha.adb, exp_aggr.adb, a-cohase.adb: Minor\n+\treformatting.\n+\n 2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n \n \t* a-chtgop.ads, a-chtgop.adb (Delete_Node_At_Index): New"}, {"sha": "ffb06a12d531e73c4b0d28511b713bce396c4790", "filename": "gcc/ada/a-cborse.adb", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-cborse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-cborse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborse.adb?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -991,18 +991,17 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n             L : Natural renames Container.Lock;\n          begin\n             return R : constant Reference_Type :=\n-                (Element  => N.Element'Access,\n-                 Control =>\n-                    (Controlled with\n-                      Container => Container'Access,\n-                      Pos       => Position,\n-                      Old_Key   => new Key_Type'(Key (Position))))\n+                         (Element => N.Element'Access,\n+                          Control =>\n+                            (Controlled with\n+                              Container => Container'Access,\n+                              Pos       => Position,\n+                              Old_Key   => new Key_Type'(Key (Position))))\n             do\n                B := B + 1;\n                L := L + 1;\n             end return;\n          end;\n-\n       end Reference_Preserving_Key;\n \n       function Reference_Preserving_Key\n@@ -1022,17 +1021,16 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n             L : Natural renames Container.Lock;\n          begin\n             return R : constant Reference_Type :=\n-                (Element  => N.Element'Access,\n-                 Control =>\n-                    (Controlled with\n-                      Container => Container'Access,\n-                       Pos      => Find (Container, Key),\n-                       Old_Key  => new Key_Type'(Key)))\n+                         (Element => N.Element'Access,\n+                          Control =>\n+                            (Controlled with\n+                              Container => Container'Access,\n+                               Pos      => Find (Container, Key),\n+                               Old_Key  => new Key_Type'(Key)))\n             do\n                B := B + 1;\n                L := L + 1;\n             end return;\n-\n          end;\n       end Reference_Preserving_Key;\n "}, {"sha": "09cb6510b2c8d1c152ae2c5be08d223e9fcffbd4", "filename": "gcc/ada/a-cborse.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-cborse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-cborse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborse.ads?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -292,12 +292,10 @@ package Ada.Containers.Bounded_Ordered_Sets is\n          Old_Key   : Key_Access;\n       end record;\n \n-      overriding procedure\n-         Adjust (Control : in out Reference_Control_Type);\n+      overriding procedure Adjust (Control : in out Reference_Control_Type);\n       pragma Inline (Adjust);\n \n-      overriding procedure\n-         Finalize (Control : in out Reference_Control_Type);\n+      overriding procedure Finalize (Control : in out Reference_Control_Type);\n       pragma Inline (Finalize);\n \n       type Reference_Type (Element : not null access Element_Type) is record"}, {"sha": "dda5f2cccf7db4fa493dc0f604123ef074e9a9e7", "filename": "gcc/ada/a-chtgop.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-chtgop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-chtgop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgop.adb?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -209,6 +209,7 @@ package body Ada.Containers.Hash_Tables.Generic_Operations is\n \n    begin\n       Prev := HT.Buckets (Indx);\n+\n       if Prev = X then\n          HT.Buckets (Indx) := Next (Prev);\n          HT.Length := HT.Length - 1;\n@@ -235,11 +236,11 @@ package body Ada.Containers.Hash_Tables.Generic_Operations is\n             Free (X);\n             return;\n          end if;\n+\n          Prev := Curr;\n       end loop;\n+   end Delete_Node_At_Index;\n \n-   end Delete_Node_At_Index\n-;\n    ---------------------------\n    -- Delete_Node_Sans_Free --\n    ---------------------------"}, {"sha": "70e1535c86ad0834e88a332dfa41a83f8d96fa0c", "filename": "gcc/ada/a-chtgop.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-chtgop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-chtgop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgop.ads?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -129,10 +129,9 @@ package Ada.Containers.Hash_Tables.Generic_Operations is\n    --  deallocated. Program_Error is raised if the hash table is busy.\n \n    procedure Delete_Node_At_Index\n-     (HT    : in out Hash_Table_Type;\n-      Indx  : Hash_Type;\n-      X     : in out Node_Access);\n-\n+     (HT   : in out Hash_Table_Type;\n+      Indx : Hash_Type;\n+      X    : in out Node_Access);\n    --  Delete a node whose bucket position is known. Used to remove a node\n    --  whose element has been modified through a key_preserving reference.\n    --  We cannot use the value of the element precisely because the current\n@@ -173,8 +172,9 @@ package Ada.Containers.Hash_Tables.Generic_Operations is\n \n    generic\n       use Ada.Streams;\n-      with function New_Node (Stream : not null access Root_Stream_Type'Class)\n-         return Node_Access;\n+      with function New_Node\n+             (Stream : not null access Root_Stream_Type'Class)\n+              return Node_Access;\n    procedure Generic_Read\n      (Stream : not null access Root_Stream_Type'Class;\n       HT     : out Hash_Table_Type);\n@@ -184,7 +184,7 @@ package Ada.Containers.Hash_Tables.Generic_Operations is\n \n    function New_Buckets (Length : Hash_Type) return Buckets_Access;\n    pragma Inline (New_Buckets);\n-   --  Allocate a new Buckets_Type array with bounds 0..Length-1\n+   --  Allocate a new Buckets_Type array with bounds 0 .. Length - 1\n \n    procedure Free_Buckets (Buckets : in out Buckets_Access);\n    pragma Inline (Free_Buckets);"}, {"sha": "7d503668702ce28a7d416974deb4bbf72c043e1a", "filename": "gcc/ada/a-cihase.adb", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.adb?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -2148,8 +2148,8 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n          if Control.Container /= null then\n             declare\n                HT : Hash_Table_Type renames Control.Container.HT;\n-               B : Natural renames HT.Busy;\n-               L : Natural renames HT.Lock;\n+               B  : Natural renames HT.Busy;\n+               L  : Natural renames HT.Lock;\n             begin\n                B := B + 1;\n                L := L + 1;\n@@ -2275,17 +2275,17 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n       begin\n          if Control.Container /= null then\n             declare\n-               HT   : Hash_Table_Type renames Control.Container.HT;\n-               B : Natural renames HT.Busy;\n-               L : Natural renames HT.Lock;\n+               HT : Hash_Table_Type renames Control.Container.HT;\n+               B  : Natural renames HT.Busy;\n+               L  : Natural renames HT.Lock;\n             begin\n                B := B - 1;\n                L := L - 1;\n             end;\n \n             if Hash (Key (Control.Old_Pos)) /= Control.Old_Hash then\n                HT_Ops.Delete_Node_At_Index\n-                 (Control.Container.HT, Control.Index,  Control.Old_Pos.Node);\n+                 (Control.Container.HT, Control.Index, Control.Old_Pos.Node);\n                raise Program_Error;\n             end if;\n \n@@ -2368,19 +2368,18 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n          declare\n             HT : Hash_Table_Type renames Container.HT;\n-            B : Natural renames HT.Busy;\n-            L : Natural renames HT.Lock;\n-\n+            B  : Natural renames HT.Busy;\n+            L  : Natural renames HT.Lock;\n          begin\n             return R : constant Reference_Type :=\n-              (Element  => Position.Node.Element.all'Access,\n-                 Control =>\n-                   (Controlled with\n-                     Container => Container'Access,\n-                     Index     => HT_Ops.Index (HT, Position.Node),\n-                     Old_Pos   => Position,\n-                     Old_Hash  => Hash (Key (Position))))\n-            do\n+                         (Element => Position.Node.Element.all'Access,\n+                          Control =>\n+                            (Controlled with\n+                              Container => Container'Access,\n+                              Index     => HT_Ops.Index (HT, Position.Node),\n+                              Old_Pos   => Position,\n+                              Old_Hash  => Hash (Key (Position))))\n+         do\n                B := B + 1;\n                L := L + 1;\n             end return;\n@@ -2391,8 +2390,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n         (Container : aliased in out Set;\n          Key       : Key_Type) return Reference_Type\n       is\n-         Node : constant Node_Access :=\n-           Key_Keys.Find (Container.HT, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.HT, Key);\n \n       begin\n          if Node = null then\n@@ -2405,19 +2403,18 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n \n          declare\n             HT : Hash_Table_Type renames Container.HT;\n-            B : Natural renames HT.Busy;\n-            L : Natural renames HT.Lock;\n-            P : constant Cursor := Find (Container, Key);\n-\n+            B  : Natural renames HT.Busy;\n+            L  : Natural renames HT.Lock;\n+            P  : constant Cursor := Find (Container, Key);\n          begin\n             return R : constant Reference_Type :=\n-              (Element  => Node.Element.all'Access,\n-                 Control =>\n-                   (Controlled with\n-                     Container => Container'Access,\n-                     Index  => HT_Ops.Index (HT, P.Node),\n-                     Old_Pos => P,\n-                     Old_Hash => Hash (Key)))\n+                         (Element => Node.Element.all'Access,\n+                          Control =>\n+                            (Controlled with\n+                              Container => Container'Access,\n+                              Index     => HT_Ops.Index (HT, P.Node),\n+                              Old_Pos   => P,\n+                              Old_Hash  => Hash (Key)))\n             do\n                B := B + 1;\n                L := L + 1;\n@@ -2434,8 +2431,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n          Key       : Key_Type;\n          New_Item  : Element_Type)\n       is\n-         Node : constant Node_Access :=\n-           Key_Keys.Find (Container.HT, Key);\n+         Node : constant Node_Access := Key_Keys.Find (Container.HT, Key);\n \n       begin\n          if Node = null then"}, {"sha": "05af6bf32ed3fddb5f6acb6b541e896eff0960dd", "filename": "gcc/ada/a-cihase.ads", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-cihase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-cihase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihase.ads?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -442,16 +442,14 @@ package Ada.Containers.Indefinite_Hashed_Sets is\n          Old_Hash  : Hash_Type;\n       end record;\n \n-      overriding procedure\n-         Adjust (Control : in out Reference_Control_Type);\n+      overriding procedure Adjust (Control : in out Reference_Control_Type);\n       pragma Inline (Adjust);\n \n-      overriding procedure\n-         Finalize (Control : in out Reference_Control_Type);\n+      overriding procedure Finalize (Control : in out Reference_Control_Type);\n       pragma Inline (Finalize);\n \n       type Reference_Type (Element : not null access Element_Type) is record\n-         Control  : Reference_Control_Type;\n+         Control : Reference_Control_Type;\n       end record;\n \n       use Ada.Streams;"}, {"sha": "f7f49aab96cee3bb227d93ba1fa5ace5a4c4e078", "filename": "gcc/ada/a-cohase.adb", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohase.adb?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -2078,8 +2078,8 @@ package body Ada.Containers.Hashed_Sets is\n          if Control.Container /= null then\n             declare\n                HT : Hash_Table_Type renames Control.Container.all.HT;\n-               B : Natural renames HT.Busy;\n-               L : Natural renames HT.Lock;\n+               B  : Natural renames HT.Busy;\n+               L  : Natural renames HT.Lock;\n             begin\n                B := B - 1;\n                L := L - 1;\n@@ -2088,7 +2088,7 @@ package body Ada.Containers.Hashed_Sets is\n             if Hash (Key (Element (Control.Old_Pos))) /= Control.Old_Hash\n             then\n                HT_Ops.Delete_Node_At_Index\n-                (Control.Container.HT, Control.Index,  Control.Old_Pos.Node);\n+                 (Control.Container.HT, Control.Index, Control.Old_Pos.Node);\n                raise Program_Error with \"key not preserved in reference\";\n             end if;\n \n@@ -2106,13 +2106,12 @@ package body Ada.Containers.Hashed_Sets is\n       is\n          HT   : Hash_Table_Type renames Container'Unrestricted_Access.HT;\n          Node : constant Node_Access := Key_Keys.Find (HT, Key);\n-\n       begin\n          if Node = null then\n             return No_Element;\n+         else\n+            return Cursor'(Container'Unrestricted_Access, Node);\n          end if;\n-\n-         return Cursor'(Container'Unrestricted_Access, Node);\n       end Find;\n \n       ---------\n@@ -2167,17 +2166,17 @@ package body Ada.Containers.Hashed_Sets is\n \n          declare\n             HT : Hash_Table_Type renames Position.Container.all.HT;\n-            B : Natural renames HT.Busy;\n-            L : Natural renames HT.Lock;\n+            B  : Natural renames HT.Busy;\n+            L  : Natural renames HT.Lock;\n          begin\n             return R : constant Reference_Type :=\n-                (Element  => Position.Node.Element'Access,\n-                  Control  =>\n-                    (Controlled with\n-                       Container'Unrestricted_Access,\n-                       Index  => HT_Ops.Index (HT, Position.Node),\n-                       Old_Pos => Position,\n-                       Old_Hash => Hash (Key (Position))))\n+                         (Element => Position.Node.Element'Access,\n+                          Control =>\n+                            (Controlled with\n+                              Container'Unrestricted_Access,\n+                              Index    => HT_Ops.Index (HT, Position.Node),\n+                              Old_Pos  => Position,\n+                              Old_Hash => Hash (Key (Position))))\n             do\n                B := B + 1;\n                L := L + 1;\n@@ -2203,13 +2202,13 @@ package body Ada.Containers.Hashed_Sets is\n             P  : constant Cursor := Find (Container, Key);\n          begin\n             return R : constant Reference_Type :=\n-              (Element  => Node.Element'Access,\n-               Control  =>\n-                 (Controlled with\n-                   Container'Unrestricted_Access,\n-                   Index    => HT_Ops.Index (HT, P.Node),\n-                   Old_Pos  => P,\n-                   Old_Hash => Hash (Key)))\n+                         (Element => Node.Element'Access,\n+                          Control =>\n+                            (Controlled with\n+                              Container'Unrestricted_Access,\n+                              Index    => HT_Ops.Index (HT, P.Node),\n+                              Old_Pos  => P,\n+                              Old_Hash => Hash (Key)))\n             do\n                B := B + 1;\n                L := L + 1;"}, {"sha": "6ef2e0339f2d716f6a44549ab75e3ef56eb5a063", "filename": "gcc/ada/a-elchha.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-elchha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-elchha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-elchha.adb?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -49,12 +49,16 @@ is\n    pragma Import (Ada, Exception_Message_Length, \"__gnat_exception_msg_len\");\n \n    procedure Append_Info_Exception_Message\n-     (X : Exception_Occurrence; Info : in out String; Ptr : in out Natural);\n+     (X    : Exception_Occurrence;\n+      Info : in out String;\n+      Ptr  : in out Natural);\n    pragma Import\n      (Ada, Append_Info_Exception_Message, \"__gnat_append_info_e_msg\");\n \n    procedure Append_Info_Untailored_Exception_Information\n-     (X : Exception_Occurrence; Info : in out String; Ptr : in out Natural);\n+     (X    : Exception_Occurrence;\n+      Info : in out String;\n+      Ptr  : in out Natural);\n    pragma Import\n      (Ada, Append_Info_Untailored_Exception_Information,\n       \"__gnat_append_info_u_e_info\");"}, {"sha": "85adb7c4a1e6713e5ed8780fa07d685716475f14", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -74,14 +74,14 @@ package body Ada.Exceptions is\n    --  These procedures are used to provide exclusion bounds in\n    --  calls to Call_Chain at exception raise points from this unit. The\n    --  purpose is to arrange for the exception tracebacks not to include\n-   --  frames from routines involved in the raise process, as these are\n+   --  frames from subprograms involved in the raise process, as these are\n    --  meaningless from the user's standpoint.\n    --\n    --  For these bounds to be meaningful, we need to ensure that the object\n-   --  code for the routines involved in processing a raise is located after\n-   --  the object code Code_Address_For_AAA and before the object code\n-   --  Code_Address_For_ZZZ. This will indeed be the case as long as the\n-   --  following rules are respected:\n+   --  code for the subprograms involved in processing a raise is located\n+   --  after the object code Code_Address_For_AAA and before the object\n+   --  code Code_Address_For_ZZZ. This will indeed be the case as long as\n+   --  the following rules are respected:\n    --\n    --  1) The bodies of the subprograms involved in processing a raise\n    --     are located after the body of Code_Address_For_AAA and before the\n@@ -111,9 +111,9 @@ package body Ada.Exceptions is\n \n    package Exception_Data is\n \n-      ---------------------------------\n-      -- Exception messages routines --\n-      ---------------------------------\n+      -----------------------------------\n+      -- Exception Message Subprograms --\n+      -----------------------------------\n \n       procedure Set_Exception_C_Msg\n         (Excep  : EOA;\n@@ -139,7 +139,7 @@ package body Ada.Exceptions is\n       --  which is generated as the exception message.\n \n       ---------------------------------------\n-      -- Exception information subprograms --\n+      -- Exception Information Subprograms --\n       ---------------------------------------\n \n       function Untailored_Exception_Information\n@@ -164,17 +164,17 @@ package body Ada.Exceptions is\n       --\n       --  The Exception_Name and Message lines are omitted in the abort\n       --  signal case, since this is not really an exception.\n-\n+      --\n       --  Note: If the format of the generated string is changed, please note\n       --  that an equivalent modification to the routine String_To_EO must be\n       --  made to preserve proper functioning of the stream attributes.\n-\n+      --\n       --  What is automatically output when exception tracing is on is the\n       --  usual exception information with the call chain backtrace possibly\n       --  tailored by a backtrace decorator. Modifying Exception_Information\n       --  itself is not a good idea because the decorated output is completely\n       --  out of control and would break all our code related to the streaming\n-      --  of exceptions.  We then provide an alternative function to compute\n+      --  of exceptions. We then provide an alternative function to compute\n       --  the possibly tailored output, which is equivalent if no decorator is\n       --  currently set:\n \n@@ -195,9 +195,9 @@ package body Ada.Exceptions is\n \n    package Exception_Traces is\n \n-      ----------------------------------------------\n-      -- Run-Time Exception Notification Routines --\n-      ----------------------------------------------\n+      -------------------------------------------------\n+      -- Run-Time Exception Notification Subprograms --\n+      -------------------------------------------------\n \n       --  These subprograms provide a common run-time interface to trigger the\n       --  actions required when an exception is about to be propagated (e.g.\n@@ -229,9 +229,9 @@ package body Ada.Exceptions is\n \n    package Exception_Propagation is\n \n-      ------------------------------------\n-      -- Exception propagation routines --\n-      ------------------------------------\n+      ---------------------------------------\n+      -- Exception Propagation Subprograms --\n+      ---------------------------------------\n \n       function Allocate_Occurrence return EOA;\n       --  Allocate an exception occurence (as well as the machine occurence)\n@@ -244,9 +244,9 @@ package body Ada.Exceptions is\n \n    package Stream_Attributes is\n \n-      --------------------------------\n-      -- Stream attributes routines --\n-      --------------------------------\n+      ----------------------------------\n+      -- Stream Attribute Subprograms --\n+      ----------------------------------\n \n       function EId_To_String (X : Exception_Id) return String;\n       function String_To_EId (S : String) return Exception_Id;\n@@ -392,11 +392,11 @@ package body Ada.Exceptions is\n    --  Source as an exception to be propagated in the caller task. Target is\n    --  expected to be a pointer to the fixed TSD occurrence for this task.\n \n-   -----------------------------\n-   -- Run-Time Check Routines --\n-   -----------------------------\n+   --------------------------------\n+   -- Run-Time Check Subprograms --\n+   --------------------------------\n \n-   --  These routines raise a specific exception with a reason message\n+   --  These subprograms raise a specific exception with a reason message\n    --  attached. The parameters are the file name and line number in each\n    --  case. The names are defined by Exp_Ch11.Get_RT_Exception_Name.\n \n@@ -486,7 +486,7 @@ package body Ada.Exceptions is\n    --  This routine is separated out because it has quite different behavior\n    --  from the others. This is the \"finalize/adjust raised exception\". This\n    --  subprogram is always called with abort deferred, unlike all other\n-   --  Rcheck_* routines, it needs to call Raise_Exception_No_Defer.\n+   --  Rcheck_* subprograms, it needs to call Raise_Exception_No_Defer.\n \n    pragma Export (C, Rcheck_CE_Access_Check,\n                   \"__gnat_rcheck_CE_Access_Check\");\n@@ -1207,9 +1207,9 @@ package body Ada.Exceptions is\n       Complete_And_Propagate_Occurrence (Excep);\n    end Raise_With_Msg;\n \n-   --------------------------------------\n-   -- Calls to Run-Time Check Routines --\n-   --------------------------------------\n+   -----------------------------------------\n+   -- Calls to Run-Time Check Subprograms --\n+   -----------------------------------------\n \n    procedure Rcheck_CE_Access_Check\n      (File : System.Address; Line : Integer)\n@@ -1474,9 +1474,9 @@ package body Ada.Exceptions is\n      (File : System.Address; Line, Column, Index, First, Last : Integer)\n    is\n       Msg : constant String :=\n-        Rmsg_05 (Rmsg_05'First .. Rmsg_05'Last - 1) & ASCII.LF &\n-        \"index \" & Image (Index) & \" not in \" & Image (First) &\n-        \"..\" & Image (Last) & ASCII.NUL;\n+              Rmsg_05 (Rmsg_05'First .. Rmsg_05'Last - 1) & ASCII.LF\n+              & \"index \" & Image (Index) & \" not in \" & Image (First)\n+              & \"..\" & Image (Last) & ASCII.NUL;\n    begin\n       Raise_Constraint_Error_Msg (File, Line, Column, Msg'Address);\n    end Rcheck_CE_Index_Check_Ext;\n@@ -1485,9 +1485,9 @@ package body Ada.Exceptions is\n      (File : System.Address; Line, Column, Index, First, Last : Integer)\n    is\n       Msg : constant String :=\n-        Rmsg_06 (Rmsg_06'First .. Rmsg_06'Last - 1) & ASCII.LF &\n-        \"value \" & Image (Index) & \" not in \" & Image (First) &\n-        \"..\" & Image (Last) & ASCII.NUL;\n+              Rmsg_06 (Rmsg_06'First .. Rmsg_06'Last - 1) & ASCII.LF\n+              & \"value \" & Image (Index) & \" not in \" & Image (First)\n+              & \"..\" & Image (Last) & ASCII.NUL;\n    begin\n       Raise_Constraint_Error_Msg (File, Line, Column, Msg'Address);\n    end Rcheck_CE_Invalid_Data_Ext;\n@@ -1496,9 +1496,9 @@ package body Ada.Exceptions is\n      (File : System.Address; Line, Column, Index, First, Last : Integer)\n    is\n       Msg : constant String :=\n-        Rmsg_12 (Rmsg_12'First .. Rmsg_12'Last - 1) & ASCII.LF &\n-        \"value \" & Image (Index) & \" not in \" & Image (First) &\n-        \"..\" & Image (Last) & ASCII.NUL;\n+              Rmsg_12 (Rmsg_12'First .. Rmsg_12'Last - 1) & ASCII.LF\n+              & \"value \" & Image (Index) & \" not in \" & Image (First)\n+              & \"..\" & Image (Last) & ASCII.NUL;\n    begin\n       Raise_Constraint_Error_Msg (File, Line, Column, Msg'Address);\n    end Rcheck_CE_Range_Check_Ext;\n@@ -1510,7 +1510,7 @@ package body Ada.Exceptions is\n \n    begin\n       --  This is \"finalize/adjust raised exception\". This subprogram is always\n-      --  called with abort deferred, unlike all other Rcheck_* routines, it\n+      --  called with abort deferred, unlike all other Rcheck_* subprograms, it\n       --  needs to call Raise_Exception_No_Defer.\n \n       --  This is consistent with Raise_From_Controlled_Operation"}, {"sha": "e75900851804c921214c13ac8648277e60e23010", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -88,9 +88,9 @@ package body Ada.Exceptions is\n \n    package Exception_Data is\n \n-      ---------------------------------\n-      -- Exception messages routines --\n-      ---------------------------------\n+      -----------------------------------\n+      -- Exception Message Subprograms --\n+      -----------------------------------\n \n       procedure Set_Exception_C_Msg\n         (Excep  : EOA;\n@@ -117,7 +117,7 @@ package body Ada.Exceptions is\n       --  message.\n \n       ---------------------------------------\n-      -- Exception information subprograms --\n+      -- Exception Information Subprograms --\n       ---------------------------------------\n \n       function Untailored_Exception_Information\n@@ -142,17 +142,17 @@ package body Ada.Exceptions is\n       --\n       --  The Exception_Name and Message lines are omitted in the abort\n       --  signal case, since this is not really an exception.\n-\n+      --\n       --  Note: If the format of the generated string is changed, please note\n       --  that an equivalent modification to the routine String_To_EO must be\n       --  made to preserve proper functioning of the stream attributes.\n-\n+      --\n       --  What is automatically output when exception tracing is on is the\n       --  usual exception information with the call chain backtrace possibly\n       --  tailored by a backtrace decorator. Modifying Exception_Information\n       --  itself is not a good idea because the decorated output is completely\n       --  out of control and would break all our code related to the streaming\n-      --  of exceptions.  We then provide an alternative function to compute\n+      --  of exceptions. We then provide an alternative function to compute\n       --  the possibly tailored output, which is equivalent if no decorator is\n       --  currently set:\n \n@@ -173,9 +173,9 @@ package body Ada.Exceptions is\n \n    package Exception_Traces is\n \n-      ----------------------------------------------\n-      -- Run-Time Exception Notification Routines --\n-      ----------------------------------------------\n+      -------------------------------------------------\n+      -- Run-Time Exception Notification Subprograms --\n+      -------------------------------------------------\n \n       --  These subprograms provide a common run-time interface to trigger the\n       --  actions required when an exception is about to be propagated (e.g.\n@@ -207,9 +207,9 @@ package body Ada.Exceptions is\n \n    package Stream_Attributes is\n \n-      --------------------------------\n-      -- Stream attributes routines --\n-      --------------------------------\n+      ----------------------------------\n+      -- Stream Attribute Subprograms --\n+      ----------------------------------\n \n       function EId_To_String (X : Exception_Id) return String;\n       function String_To_EId (S : String) return Exception_Id;\n@@ -232,7 +232,8 @@ package body Ada.Exceptions is\n    --  about it.\n \n    procedure Raise_Exception_No_Defer\n-      (E : Exception_Id; Message : String := \"\");\n+      (E       : Exception_Id;\n+       Message : String := \"\");\n    pragma Export\n     (Ada, Raise_Exception_No_Defer,\n      \"ada__exceptions__raise_exception_no_defer\");\n@@ -346,18 +347,18 @@ package body Ada.Exceptions is\n    --  caller task. Target is expected to be a pointer to the fixed TSD\n    --  occurrence for this task.\n \n-   -----------------------------\n-   -- Run-Time Check Routines --\n-   -----------------------------\n+   --------------------------------\n+   -- Run-Time Check Subprograms --\n+   --------------------------------\n \n-   --  These routines raise a specific exception with a reason message\n+   --  These subprograms raise a specific exception with a reason message\n    --  attached. The parameters are the file name and line number in each\n    --  case. The names are defined by Exp_Ch11.Get_RT_Exception_Name.\n \n-   --  Note on ordering of these routines. Normally in the Ada.Exceptions units\n-   --  we don't care about the ordering of entries for Rcheck routines, and\n-   --  the normal approach is to keep them in the same order as declarations\n-   --  in Types.\n+   --  Note on ordering of these subprograms. Normally in the Ada.Exceptions\n+   --  units we do not care about the ordering of entries for Rcheck\n+   --  subprograms, and the normal approach is to keep them in the same\n+   --  order as declarations in Types.\n \n    --  This section is an IMPORTANT EXCEPTION. It is required by the .Net\n    --  runtime that the routine Rcheck_PE_Finalize_Raise_Exception is at the\n@@ -443,7 +444,7 @@ package body Ada.Exceptions is\n    --  This routine is separated out because it has quite different behavior\n    --  from the others. This is the \"finalize/adjust raised exception\". This\n    --  subprogram is always called with abort deferred, unlike all other\n-   --  Rcheck_* routines, it needs to call Raise_Exception_No_Defer.\n+   --  Rcheck_* subprograms, it needs to call Raise_Exception_No_Defer.\n \n    pragma Export (C, Rcheck_CE_Access_Check,\n                   \"__gnat_rcheck_CE_Access_Check\");\n@@ -1184,9 +1185,9 @@ package body Ada.Exceptions is\n       Raise_Current_Excep (E);\n    end Raise_With_Msg;\n \n-   --------------------------------------\n-   -- Calls to Run-Time Check Routines --\n-   --------------------------------------\n+   -----------------------------------------\n+   -- Calls to Run-Time Check Subprograms --\n+   -----------------------------------------\n \n    procedure Rcheck_CE_Access_Check\n      (File : System.Address; Line : Integer)\n@@ -1445,10 +1446,11 @@ package body Ada.Exceptions is\n    is\n       E     : constant Exception_Id := Program_Error_Def'Access;\n       Excep : constant EOA := Get_Current_Excep.all;\n+\n    begin\n       --  This is \"finalize/adjust raised exception\". This subprogram is always\n-      --  called with abort deferred, unlike all other Rcheck_* routines, it\n-      --  needs to call Raise_Exception_No_Defer.\n+      --  called with abort deferred, unlike all other Rcheck_* subprograms,\n+      --  itneeds to call Raise_Exception_No_Defer.\n \n       --  This is consistent with Raise_From_Controlled_Operation\n "}, {"sha": "ec45c02e0355a3ccd83d363a7cee054a4fe9bea3", "filename": "gcc/ada/a-exexda.adb", "status": "modified", "additions": 167, "deletions": 170, "changes": 337, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-exexda.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fa-exexda.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexda.adb?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -244,6 +244,55 @@ package body Exception_Data is\n       Append_Info_String (S (P - 1 .. S'Last), Info, Ptr);\n    end Append_Info_Address;\n \n+   ---------------------------------------------\n+   -- Append_Info_Basic_Exception_Information --\n+   ---------------------------------------------\n+\n+   --  To ease the maximum length computation, we define and pull out a couple\n+   --  of string constants:\n+\n+   BEI_Name_Header : constant String := \"Exception name: \";\n+   BEI_Msg_Header  : constant String := \"Message: \";\n+   BEI_PID_Header  : constant String := \"PID: \";\n+\n+   procedure Append_Info_Basic_Exception_Information\n+     (X    : Exception_Occurrence;\n+      Info : in out String;\n+      Ptr  : in out Natural)\n+   is\n+      Name : String (1 .. Exception_Name_Length (X));\n+      --  Buffer in which to fetch the exception name, in order to check\n+      --  whether this is an internal _ABORT_SIGNAL or a regular occurrence.\n+\n+      Name_Ptr : Natural := Name'First - 1;\n+\n+   begin\n+      --  Output exception name and message except for _ABORT_SIGNAL, where\n+      --  these two lines are omitted.\n+\n+      Append_Info_Exception_Name (X, Name, Name_Ptr);\n+\n+      if Name (Name'First) /= '_' then\n+         Append_Info_String (BEI_Name_Header, Info, Ptr);\n+         Append_Info_String (Name, Info, Ptr);\n+         Append_Info_NL (Info, Ptr);\n+\n+         if Exception_Message_Length (X) /= 0 then\n+            Append_Info_String (BEI_Msg_Header, Info, Ptr);\n+            Append_Info_Exception_Message  (X, Info, Ptr);\n+            Append_Info_NL (Info, Ptr);\n+         end if;\n+      end if;\n+\n+      --  Output PID line if non-zero\n+\n+      if X.Pid /= 0 then\n+         Append_Info_String (BEI_PID_Header, Info, Ptr);\n+         Append_Info_Nat (X.Pid, Info, Ptr);\n+         Append_Info_NL (Info, Ptr);\n+      end if;\n+   end Append_Info_Basic_Exception_Information;\n+\n    ---------------------------\n    -- Append_Info_Character --\n    ---------------------------\n@@ -262,6 +311,72 @@ package body Exception_Data is\n       end if;\n    end Append_Info_Character;\n \n+   -----------------------------------\n+   -- Append_Info_Exception_Message --\n+   -----------------------------------\n+\n+   procedure Append_Info_Exception_Message\n+     (X    : Exception_Occurrence;\n+      Info : in out String;\n+      Ptr  : in out Natural)\n+   is\n+   begin\n+      if X.Id = Null_Id then\n+         raise Constraint_Error;\n+      end if;\n+\n+      declare\n+         Len : constant Natural           := Exception_Message_Length (X);\n+         Msg : constant String (1 .. Len) := X.Msg (1 .. Len);\n+      begin\n+         Append_Info_String (Msg, Info, Ptr);\n+      end;\n+   end Append_Info_Exception_Message;\n+\n+   --------------------------------\n+   -- Append_Info_Exception_Name --\n+   --------------------------------\n+\n+   procedure Append_Info_Exception_Name\n+     (Id   : Exception_Id;\n+      Info : in out String;\n+      Ptr  : in out Natural)\n+   is\n+   begin\n+      if Id = Null_Id then\n+         raise Constraint_Error;\n+      end if;\n+\n+      declare\n+         Len  : constant Natural           := Exception_Name_Length (Id);\n+         Name : constant String (1 .. Len) := To_Ptr (Id.Full_Name) (1 .. Len);\n+      begin\n+         Append_Info_String (Name, Info, Ptr);\n+      end;\n+   end Append_Info_Exception_Name;\n+\n+   procedure Append_Info_Exception_Name\n+     (X    : Exception_Occurrence;\n+      Info : in out String;\n+      Ptr  : in out Natural)\n+   is\n+   begin\n+      Append_Info_Exception_Name (X.Id, Info, Ptr);\n+   end Append_Info_Exception_Name;\n+\n+   ------------------------------\n+   -- Exception_Info_Maxlength --\n+   ------------------------------\n+\n+   function Exception_Info_Maxlength\n+     (X : Exception_Occurrence) return Natural\n+   is\n+   begin\n+      return\n+        Basic_Exception_Info_Maxlength (X)\n+        + Untailored_Exception_Traceback_Maxlength (X);\n+   end Exception_Info_Maxlength;\n+\n    ---------------------\n    -- Append_Info_Nat --\n    ---------------------\n@@ -315,67 +430,19 @@ package body Exception_Data is\n       end if;\n    end Append_Info_String;\n \n-   ---------------------------------------------\n-   -- Append_Info_Basic_Exception_Information --\n-   ---------------------------------------------\n-\n-   --  To ease the maximum length computation, we define and pull out a couple\n-   --  of string constants:\n-\n-   BEI_Name_Header : constant String := \"Exception name: \";\n-   BEI_Msg_Header  : constant String := \"Message: \";\n-   BEI_PID_Header  : constant String := \"PID: \";\n+   --------------------------------------------------\n+   -- Append_Info_Untailored_Exception_Information --\n+   --------------------------------------------------\n \n-   procedure Append_Info_Basic_Exception_Information\n+   procedure Append_Info_Untailored_Exception_Information\n      (X    : Exception_Occurrence;\n       Info : in out String;\n       Ptr  : in out Natural)\n    is\n-      Name : String (1 .. Exception_Name_Length (X));\n-      --  Buffer in which to fetch the exception name, in order to check\n-      --  whether this is an internal _ABORT_SIGNAL or a regular occurrence.\n-\n-      Name_Ptr : Natural := Name'First - 1;\n-\n-   begin\n-      --  Output exception name and message except for _ABORT_SIGNAL, where\n-      --  these two lines are omitted.\n-\n-      Append_Info_Exception_Name (X, Name, Name_Ptr);\n-\n-      if Name (Name'First) /= '_' then\n-         Append_Info_String (BEI_Name_Header, Info, Ptr);\n-         Append_Info_String (Name, Info, Ptr);\n-         Append_Info_NL (Info, Ptr);\n-\n-         if Exception_Message_Length (X) /= 0 then\n-            Append_Info_String (BEI_Msg_Header, Info, Ptr);\n-            Append_Info_Exception_Message  (X, Info, Ptr);\n-            Append_Info_NL (Info, Ptr);\n-         end if;\n-      end if;\n-\n-      --  Output PID line if non-zero\n-\n-      if X.Pid /= 0 then\n-         Append_Info_String (BEI_PID_Header, Info, Ptr);\n-         Append_Info_Nat (X.Pid, Info, Ptr);\n-         Append_Info_NL (Info, Ptr);\n-      end if;\n-   end Append_Info_Basic_Exception_Information;\n-\n-   -------------------------------------------\n-   -- Basic_Exception_Information_Maxlength --\n-   -------------------------------------------\n-\n-   function Basic_Exception_Info_Maxlength\n-     (X : Exception_Occurrence) return Natural is\n    begin\n-      return\n-        BEI_Name_Header'Length + Exception_Name_Length (X) + 1\n-        + BEI_Msg_Header'Length + Exception_Message_Length (X) + 1\n-        + BEI_PID_Header'Length + 15;\n-   end Basic_Exception_Info_Maxlength;\n+      Append_Info_Basic_Exception_Information (X, Info, Ptr);\n+      Append_Info_Untailored_Exception_Traceback (X, Info, Ptr);\n+   end Append_Info_Untailored_Exception_Information;\n \n    ------------------------------------------------\n    -- Append_Info_Untailored_Exception_Traceback --\n@@ -409,6 +476,7 @@ package body Exception_Data is\n       end if;\n \n       --  The traceback lines\n+\n       Append_Info_String (BETB_Header, Info, Ptr);\n       Append_Info_NL (Info, Ptr);\n \n@@ -421,132 +489,68 @@ package body Exception_Data is\n       Append_Info_NL (Info, Ptr);\n    end Append_Info_Untailored_Exception_Traceback;\n \n-   ----------------------------------------------\n-   -- Untailored_Exception_Traceback_Maxlength --\n-   ----------------------------------------------\n+   -------------------------------------------\n+   -- Basic_Exception_Information_Maxlength --\n+   -------------------------------------------\n \n-   function Untailored_Exception_Traceback_Maxlength\n+   function Basic_Exception_Info_Maxlength\n      (X : Exception_Occurrence) return Natural\n    is\n-      Space_Per_Address : constant := 2 + 16 + 1;\n-      --  Space for \"0x\" + HHHHHHHHHHHHHHHH + \" \"\n    begin\n       return\n-        LDAD_Header'Length + Space_Per_Address + BETB_Header'Length + 1 +\n-          X.Num_Tracebacks * Space_Per_Address + 1;\n-   end Untailored_Exception_Traceback_Maxlength;\n+        BEI_Name_Header'Length + Exception_Name_Length (X) + 1\n+        + BEI_Msg_Header'Length + Exception_Message_Length (X) + 1\n+        + BEI_PID_Header'Length + 15;\n+   end Basic_Exception_Info_Maxlength;\n \n-   --------------------------------------------------\n-   -- Append_Info_Untailored_Exception_Information --\n-   --------------------------------------------------\n+   ---------------------------\n+   -- Exception_Information --\n+   ---------------------------\n+\n+   function Exception_Information (X : Exception_Occurrence) return String is\n+      --  The tailored exception information is the basic information\n+      --  associated with the tailored call chain backtrace.\n+\n+      Tback_Info : constant String  := Tailored_Exception_Traceback (X);\n+      Tback_Len  : constant Natural := Tback_Info'Length;\n+\n+      Info : String (1 .. Basic_Exception_Info_Maxlength (X) + Tback_Len);\n+      Ptr  : Natural := Info'First - 1;\n \n-   procedure Append_Info_Untailored_Exception_Information\n-     (X    : Exception_Occurrence;\n-      Info : in out String;\n-      Ptr  : in out Natural)\n-   is\n    begin\n       Append_Info_Basic_Exception_Information (X, Info, Ptr);\n-      Append_Info_Untailored_Exception_Traceback (X, Info, Ptr);\n-   end Append_Info_Untailored_Exception_Information;\n+      Append_Info_String (Tback_Info, Info, Ptr);\n+      return Info (Info'First .. Ptr);\n+   end Exception_Information;\n \n    ------------------------------\n-   -- Exception_Info_Maxlength --\n+   -- Exception_Message_Length --\n    ------------------------------\n \n-   function Exception_Info_Maxlength\n+   function Exception_Message_Length\n      (X : Exception_Occurrence) return Natural\n    is\n    begin\n-      return\n-        Basic_Exception_Info_Maxlength (X)\n-        + Untailored_Exception_Traceback_Maxlength (X);\n-   end Exception_Info_Maxlength;\n-\n-   -----------------------------------\n-   -- Append_Info_Exception_Message --\n-   -----------------------------------\n-\n-   procedure Append_Info_Exception_Message\n-     (X    : Exception_Occurrence;\n-      Info : in out String;\n-      Ptr  : in out Natural)\n-   is\n-   begin\n-      if X.Id = Null_Id then\n-         raise Constraint_Error;\n-      end if;\n-\n-      declare\n-         Len : constant Natural           := Exception_Message_Length (X);\n-         Msg : constant String (1 .. Len) := X.Msg (1 .. Len);\n-      begin\n-         Append_Info_String (Msg, Info, Ptr);\n-      end;\n-   end Append_Info_Exception_Message;\n-\n-   --------------------------------\n-   -- Append_Info_Exception_Name --\n-   --------------------------------\n-\n-   procedure Append_Info_Exception_Name\n-     (Id   : Exception_Id;\n-      Info : in out String;\n-      Ptr  : in out Natural)\n-   is\n-   begin\n-      if Id = Null_Id then\n-         raise Constraint_Error;\n-      end if;\n-\n-      declare\n-         Len  : constant Natural           := Exception_Name_Length (Id);\n-         Name : constant String (1 .. Len) := To_Ptr (Id.Full_Name) (1 .. Len);\n-      begin\n-         Append_Info_String (Name, Info, Ptr);\n-      end;\n-   end Append_Info_Exception_Name;\n-\n-   procedure Append_Info_Exception_Name\n-     (X    : Exception_Occurrence;\n-      Info : in out String;\n-      Ptr  : in out Natural)\n-   is\n-   begin\n-      Append_Info_Exception_Name (X.Id, Info, Ptr);\n-   end Append_Info_Exception_Name;\n+      return X.Msg_Length;\n+   end Exception_Message_Length;\n \n    ---------------------------\n    -- Exception_Name_Length --\n    ---------------------------\n \n-   function Exception_Name_Length\n-     (Id : Exception_Id) return Natural\n-   is\n+   function Exception_Name_Length (Id : Exception_Id) return Natural is\n    begin\n       --  What is stored in the internal Name buffer includes a terminating\n       --  null character that we never care about.\n \n       return Id.Name_Length - 1;\n    end Exception_Name_Length;\n \n-   function Exception_Name_Length\n-     (X : Exception_Occurrence) return Natural is\n+   function Exception_Name_Length (X : Exception_Occurrence) return Natural is\n    begin\n       return Exception_Name_Length (X.Id);\n    end Exception_Name_Length;\n \n-   ------------------------------\n-   -- Exception_Message_Length --\n-   ------------------------------\n-\n-   function Exception_Message_Length\n-     (X : Exception_Occurrence) return Natural\n-   is\n-   begin\n-      return X.Msg_Length;\n-   end Exception_Message_Length;\n-\n    -------------------------------\n    -- Untailored_Exception_Traceback --\n    -------------------------------\n@@ -681,8 +685,8 @@ package body Exception_Data is\n       Id      : Exception_Id;\n       Message : String)\n    is\n-      Len   : constant Natural :=\n-        Natural'Min (Message'Length, Exception_Msg_Max_Length);\n+      Len : constant Natural :=\n+              Natural'Min (Message'Length, Exception_Msg_Max_Length);\n       First : constant Integer := Message'First;\n    begin\n       Excep.Exception_Raised := False;\n@@ -712,7 +716,7 @@ package body Exception_Data is\n       --  call become inoffensive.\n \n       Wrapper : constant Traceback_Decorator_Wrapper_Call :=\n-        Traceback_Decorator_Wrapper;\n+                  Traceback_Decorator_Wrapper;\n \n    begin\n       if Wrapper = null then\n@@ -722,26 +726,19 @@ package body Exception_Data is\n       end if;\n    end Tailored_Exception_Traceback;\n \n-   ---------------------------\n-   -- Exception_Information --\n-   ---------------------------\n+   ----------------------------------------------\n+   -- Untailored_Exception_Traceback_Maxlength --\n+   ----------------------------------------------\n \n-   function Exception_Information\n-     (X : Exception_Occurrence) return String\n+   function Untailored_Exception_Traceback_Maxlength\n+     (X : Exception_Occurrence) return Natural\n    is\n-      --  The tailored exception information is the basic information\n-      --  associated with the tailored call chain backtrace.\n-\n-      Tback_Info : constant String  := Tailored_Exception_Traceback (X);\n-      Tback_Len  : constant Natural := Tback_Info'Length;\n-\n-      Info : String (1 .. Basic_Exception_Info_Maxlength (X) + Tback_Len);\n-      Ptr  : Natural := Info'First - 1;\n-\n+      Space_Per_Address : constant := 2 + 16 + 1;\n+      --  Space for \"0x\" + HHHHHHHHHHHHHHHH + \" \"\n    begin\n-      Append_Info_Basic_Exception_Information (X, Info, Ptr);\n-      Append_Info_String (Tback_Info, Info, Ptr);\n-      return Info (Info'First .. Ptr);\n-   end Exception_Information;\n+      return\n+        LDAD_Header'Length + Space_Per_Address + BETB_Header'Length + 1 +\n+          X.Num_Tracebacks * Space_Per_Address + 1;\n+   end Untailored_Exception_Traceback_Maxlength;\n \n end Exception_Data;"}, {"sha": "c117319dbffc6a6b617aea6083b7a4d93d8a92c7", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -4705,6 +4705,7 @@ package body Checks is\n          else\n             OK := False;\n          end if;\n+\n          return;\n       end if;\n \n@@ -5100,7 +5101,7 @@ package body Checks is\n    ---------------------------\n \n    procedure Enable_Overflow_Check (N : Node_Id) is\n-      Typ  : constant Entity_Id           := Base_Type (Etype (N));\n+      Typ  : constant Entity_Id          := Base_Type (Etype (N));\n       Mode : constant Overflow_Mode_Type := Overflow_Check_Mode;\n       Chk  : Nat;\n       OK   : Boolean;"}, {"sha": "b6602503f4322785a971a2fe25bcdf5d506fd5ec", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e8719dd8e883b61121fede6e78e34012c84c9b/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=d6e8719dd8e883b61121fede6e78e34012c84c9b", "patch": "@@ -5361,8 +5361,8 @@ package body Exp_Aggr is\n                 Make_Assignment_Statement (Loc,\n                   Name       => Target,\n                   Expression => New_Copy (N)));\n-         else\n \n+         else\n             Aggr_Code :=\n               Build_Array_Aggr_Code (N,\n                 Ctype       => Ctyp,"}]}