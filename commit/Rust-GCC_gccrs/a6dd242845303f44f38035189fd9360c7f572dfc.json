{"sha": "a6dd242845303f44f38035189fd9360c7f572dfc", "node_id": "C_kwDOANBUbNoAKGE2ZGQyNDI4NDUzMDNmNDRmMzgwMzUxODlmZDkzNjBjN2Y1NzJkZmM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-24T11:59:16Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-24T11:59:19Z"}, "message": "Refactor ArrayIndexExpr code into implementation cc file", "tree": {"sha": "112a5102be29f9d4df0162592ff0d63f591177ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/112a5102be29f9d4df0162592ff0d63f591177ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6dd242845303f44f38035189fd9360c7f572dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6dd242845303f44f38035189fd9360c7f572dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6dd242845303f44f38035189fd9360c7f572dfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6dd242845303f44f38035189fd9360c7f572dfc/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d4845bc958712b3a437ad636d64fc241610fbc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4845bc958712b3a437ad636d64fc241610fbc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4845bc958712b3a437ad636d64fc241610fbc0"}], "stats": {"total": 62, "additions": 32, "deletions": 30}, "files": [{"sha": "6849471ee484e60e5d23b71a1d17345eae032c66", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dd242845303f44f38035189fd9360c7f572dfc/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dd242845303f44f38035189fd9360c7f572dfc/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=a6dd242845303f44f38035189fd9360c7f572dfc", "patch": "@@ -1484,5 +1484,36 @@ CompileExpr::visit (HIR::RangeFromToInclExpr &expr)\n \t\t\t\t\t\t   expr.get_locus ());\n }\n \n+void\n+CompileExpr::visit (HIR::ArrayIndexExpr &expr)\n+{\n+  tree array_reference = CompileExpr::Compile (expr.get_array_expr (), ctx);\n+  tree index = CompileExpr::Compile (expr.get_index_expr (), ctx);\n+\n+  // lets check if the array is a reference type then we can add an\n+  // indirection if required\n+  TyTy::BaseType *array_expr_ty = nullptr;\n+  bool ok = ctx->get_tyctx ()->lookup_type (\n+    expr.get_array_expr ()->get_mappings ().get_hirid (), &array_expr_ty);\n+  rust_assert (ok);\n+\n+  // do we need to add an indirect reference\n+  if (array_expr_ty->get_kind () == TyTy::TypeKind::REF)\n+    {\n+      TyTy::ReferenceType *r\n+\t= static_cast<TyTy::ReferenceType *> (array_expr_ty);\n+      TyTy::BaseType *tuple_type = r->get_base ();\n+      tree array_tyty = TyTyResolveCompile::compile (ctx, tuple_type);\n+\n+      array_reference\n+\t= ctx->get_backend ()->indirect_expression (array_tyty, array_reference,\n+\t\t\t\t\t\t    true, expr.get_locus ());\n+    }\n+\n+  translated\n+    = ctx->get_backend ()->array_index_expression (array_reference, index,\n+\t\t\t\t\t\t   expr.get_locus ());\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "7fd708cdc7e5c4f1085dacbf9978b4d0f5d89e5d", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6dd242845303f44f38035189fd9360c7f572dfc/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6dd242845303f44f38035189fd9360c7f572dfc/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=a6dd242845303f44f38035189fd9360c7f572dfc", "patch": "@@ -201,36 +201,7 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::CompoundAssignmentExpr &expr) override;\n \n-  void visit (HIR::ArrayIndexExpr &expr) override\n-  {\n-    tree array_reference = CompileExpr::Compile (expr.get_array_expr (), ctx);\n-    tree index = CompileExpr::Compile (expr.get_index_expr (), ctx);\n-\n-    // lets check if the array is a reference type then we can add an\n-    // indirection if required\n-    TyTy::BaseType *array_expr_ty = nullptr;\n-    bool ok = ctx->get_tyctx ()->lookup_type (\n-      expr.get_array_expr ()->get_mappings ().get_hirid (), &array_expr_ty);\n-    rust_assert (ok);\n-\n-    // do we need to add an indirect reference\n-    if (array_expr_ty->get_kind () == TyTy::TypeKind::REF)\n-      {\n-\tTyTy::ReferenceType *r\n-\t  = static_cast<TyTy::ReferenceType *> (array_expr_ty);\n-\tTyTy::BaseType *tuple_type = r->get_base ();\n-\ttree array_tyty = TyTyResolveCompile::compile (ctx, tuple_type);\n-\n-\tarray_reference\n-\t  = ctx->get_backend ()->indirect_expression (array_tyty,\n-\t\t\t\t\t\t      array_reference, true,\n-\t\t\t\t\t\t      expr.get_locus ());\n-      }\n-\n-    translated\n-      = ctx->get_backend ()->array_index_expression (array_reference, index,\n-\t\t\t\t\t\t     expr.get_locus ());\n-  }\n+  void visit (HIR::ArrayIndexExpr &expr) override;\n \n   void visit (HIR::ArrayExpr &expr) override;\n "}]}