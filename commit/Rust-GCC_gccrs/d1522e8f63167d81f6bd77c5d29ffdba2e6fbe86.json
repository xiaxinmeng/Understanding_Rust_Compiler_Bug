{"sha": "d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE1MjJlOGY2MzE2N2Q4MWY2YmQ3N2M1ZDI5ZmZkYmEyZTZmYmU4Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-10-12T01:42:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-10-12T01:42:31Z"}, "message": "re PR c++/62115 (ICE with invalid default argument)\n\n\tPR c++/62115\n\t* class.c (build_base_path): Preserve rvalueness.\n\t* call.c (convert_like_real) [ck_base]: Let convert_to_base handle &/*.\n\t* rtti.c (build_dynamic_cast_1): Call convert_to_reference later.\n\nFrom-SVN: r216124", "tree": {"sha": "52a295c7a10b57d2b3007a653db61008c5031b70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52a295c7a10b57d2b3007a653db61008c5031b70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4b9dcad0837d3bc03843df6f96e6cb830550af6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b9dcad0837d3bc03843df6f96e6cb830550af6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4b9dcad0837d3bc03843df6f96e6cb830550af6"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "ebb62d277f173d8543cfa4fc1289f1ff97de97b2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86", "patch": "@@ -1,5 +1,10 @@\n 2014-10-10  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/62115\n+\t* class.c (build_base_path): Preserve rvalueness.\n+\t* call.c (convert_like_real) [ck_base]: Let convert_to_base handle &/*.\n+\t* rtti.c (build_dynamic_cast_1): Call convert_to_reference later.\n+\n \tPR c++/63194\n \t* method.c (defaulted_late_check): Call maybe_instantiate_noexcept.\n "}, {"sha": "8a89aadeaf9c1ab70756feefe2f725d9695d5d46", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86", "patch": "@@ -6341,10 +6341,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t  /* We are going to bind a reference directly to a base-class\n \t     subobject of EXPR.  */\n \t  /* Build an expression for `*((base*) &expr)'.  */\n-\t  expr = cp_build_addr_expr (expr, complain);\n-\t  expr = convert_to_base (expr, build_pointer_type (totype),\n+\t  expr = convert_to_base (expr, totype,\n \t\t\t\t  !c_cast_p, /*nonnull=*/true, complain);\n-\t  expr = cp_build_indirect_ref (expr, RO_IMPLICIT_CONVERSION, complain);\n \t  return expr;\n \t}\n "}, {"sha": "99bfa957f6374e8ad8d557b1ff9c39271b877805", "filename": "gcc/cp/class.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86", "patch": "@@ -251,6 +251,7 @@ build_base_path (enum tree_code code,\n   int want_pointer = TYPE_PTR_P (TREE_TYPE (expr));\n   bool has_empty = false;\n   bool virtual_access;\n+  bool rvalue = false;\n \n   if (expr == error_mark_node || binfo == error_mark_node || !binfo)\n     return error_mark_node;\n@@ -324,8 +325,11 @@ build_base_path (enum tree_code code,\n     }\n \n   if (!want_pointer)\n-    /* This must happen before the call to save_expr.  */\n-    expr = cp_build_addr_expr (expr, complain);\n+    {\n+      rvalue = !real_lvalue_p (expr);\n+      /* This must happen before the call to save_expr.  */\n+      expr = cp_build_addr_expr (expr, complain);\n+    }\n   else\n     expr = mark_rvalue_use (expr);\n \n@@ -351,9 +355,7 @@ build_base_path (enum tree_code code,\n       || in_template_function ())\n     {\n       expr = build_nop (ptr_target_type, expr);\n-      if (!want_pointer)\n-\texpr = build_indirect_ref (EXPR_LOCATION (expr), expr, RO_NULL);\n-      return expr;\n+      goto indout;\n     }\n \n   /* If we're in an NSDMI, we don't have the full constructor context yet\n@@ -364,9 +366,7 @@ build_base_path (enum tree_code code,\n     {\n       expr = build1 (CONVERT_EXPR, ptr_target_type, expr);\n       CONVERT_EXPR_VBASE_PATH (expr) = true;\n-      if (!want_pointer)\n-\texpr = build_indirect_ref (EXPR_LOCATION (expr), expr, RO_NULL);\n-      return expr;\n+      goto indout;\n     }\n \n   /* Do we need to check for a null pointer?  */\n@@ -402,6 +402,8 @@ build_base_path (enum tree_code code,\n     {\n       expr = cp_build_indirect_ref (expr, RO_NULL, complain);\n       expr = build_simple_base_path (expr, binfo);\n+      if (rvalue)\n+\texpr = move (expr);\n       if (want_pointer)\n \texpr = build_address (expr);\n       target_type = TREE_TYPE (expr);\n@@ -478,8 +480,13 @@ build_base_path (enum tree_code code,\n   else\n     null_test = NULL;\n \n+ indout:\n   if (!want_pointer)\n-    expr = cp_build_indirect_ref (expr, RO_NULL, complain);\n+    {\n+      expr = cp_build_indirect_ref (expr, RO_NULL, complain);\n+      if (rvalue)\n+\texpr = move (expr);\n+    }\n \n  out:\n   if (null_test)"}, {"sha": "762953b38a015793cf1635f117ed957f2d7304c7", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86", "patch": "@@ -608,10 +608,6 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n \t  errstr = _(\"source is of incomplete class type\");\n \t  goto fail;\n \t}\n-\n-      /* Apply trivial conversion T -> T& for dereferenced ptrs.  */\n-      expr = convert_to_reference (exprtype, expr, CONV_IMPLICIT,\n-\t\t\t\t   LOOKUP_NORMAL, NULL_TREE, complain);\n     }\n \n   /* The dynamic_cast operator shall not cast away constness.  */\n@@ -631,6 +627,11 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n       return build_static_cast (type, expr, complain);\n   }\n \n+  /* Apply trivial conversion T -> T& for dereferenced ptrs.  */\n+  if (tc == REFERENCE_TYPE)\n+    expr = convert_to_reference (exprtype, expr, CONV_IMPLICIT,\n+\t\t\t\t LOOKUP_NORMAL, NULL_TREE, complain);\n+\n   /* Otherwise *exprtype must be a polymorphic class (have a vtbl).  */\n   if (TYPE_POLYMORPHIC_P (TREE_TYPE (exprtype)))\n     {"}, {"sha": "8f7f084ce5425d6c1781ce9e43c7148d9ac50222", "filename": "gcc/testsuite/g++.dg/expr/cond6.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcond6.C?ref=d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86", "patch": "@@ -1,10 +1,11 @@\n // { dg-do run }\n \n extern \"C\" void abort ();\n+bool ok = false;\n \n struct B {\n   B() {}\n-  B(const B& b) { abort (); }\n+  B(const B& b) { ok = true; }\n };\n \n struct D : public B {\n@@ -21,4 +22,5 @@ D f() {\n \n int main () {\n   b = (true ? f() : b);\n+  return !ok;\n }"}, {"sha": "401fe0e324c4d7b9aebb8879443a239333b3c4e4", "filename": "gcc/testsuite/g++.dg/overload/defarg9.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg9.C?ref=d1522e8f63167d81f6bd77c5d29ffdba2e6fbe86", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/62115\n+\n+struct A {};\n+struct B : A {};\n+\n+struct C\n+{\n+  C(A& a = B()) {}\t\t// { dg-error \"rvalue\" }\n+};\n+\n+C c;\t\t\t\t// { dg-error \"\" }"}]}