{"sha": "8ea6262761029a1cccc0e0280ce8be198e687636", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVhNjI2Mjc2MTAyOWExY2NjYzBlMDI4MGNlOGJlMTk4ZTY4NzYzNg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-10-18T00:05:29Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-10-18T00:05:29Z"}, "message": "SHA1PRNG.java (engineNextBytes): Rewrote.\n\n\t* gnu/java/security/provider/SHA1PRNG.java (engineNextBytes):\n\tRewrote.\n\t* java/security/SecureRandom.java (setSeed(long)): Don't set seed\n\tif secureRandomSpi is not initialized.\n\nFrom-SVN: r46327", "tree": {"sha": "7f91c804fed22e2aa07052194ebcc4fbdc5ccf99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f91c804fed22e2aa07052194ebcc4fbdc5ccf99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ea6262761029a1cccc0e0280ce8be198e687636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea6262761029a1cccc0e0280ce8be198e687636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ea6262761029a1cccc0e0280ce8be198e687636", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea6262761029a1cccc0e0280ce8be198e687636/comments", "author": null, "committer": null, "parents": [{"sha": "9c48b4d1e45a17795b4c37a359433c254f8c2d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c48b4d1e45a17795b4c37a359433c254f8c2d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c48b4d1e45a17795b4c37a359433c254f8c2d77"}], "stats": {"total": 76, "additions": 45, "deletions": 31}, "files": [{"sha": "629b3a830b00378d57344063e9a7406f1483ceb0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea6262761029a1cccc0e0280ce8be198e687636/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea6262761029a1cccc0e0280ce8be198e687636/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8ea6262761029a1cccc0e0280ce8be198e687636", "patch": "@@ -1,5 +1,10 @@\n 2001-10-17  Tom Tromey  <tromey@redhat.com>\n \n+\t* gnu/java/security/provider/SHA1PRNG.java (engineNextBytes):\n+\tRewrote.\n+\t* java/security/SecureRandom.java (setSeed(long)): Don't set seed\n+\tif secureRandomSpi is not initialized.\n+\n \t* Makefile.in: Rebuilt.\n \t* Makefile.am (secdir): New macro.\n \t(install-data-local): Install new data files."}, {"sha": "c5d31be7478ec089e78a56fa4a8d23ace59bb2a0", "filename": "libjava/gnu/java/security/provider/SHA1PRNG.java", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea6262761029a1cccc0e0280ce8be198e687636/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA1PRNG.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea6262761029a1cccc0e0280ce8be198e687636/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA1PRNG.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fsecurity%2Fprovider%2FSHA1PRNG.java?ref=8ea6262761029a1cccc0e0280ce8be198e687636", "patch": "@@ -1,5 +1,5 @@\n /* SHA1PRNG.java --- Secure Random SPI SHA1PRNG\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -73,29 +73,26 @@ public void engineSetSeed(byte[] seed)\n \n   public void engineNextBytes(byte[] bytes)\n   {\n-\n-    if( bytes.length < (20 - datapos) ) {\n-      System.arraycopy( data, datapos, bytes, 0, bytes.length);\n-      datapos += bytes.length;\n-      return;\n-    }\n-\n-    int i, blen = bytes.length, bpos = 0;\n-    byte digestdata[];\n-    while( bpos < blen ) {\n-      i = 20 - datapos;\n-      System.arraycopy( data, datapos, bytes, bpos, i);\n-      bpos += i;\n-      datapos += i;\n-      if( datapos >= 20) {\n-\t//System.out.println( (0 + 20) + \"\\n\" + (20 + 20) );\n-\tSystem.arraycopy( seed, 0, data, 20, 20);\n-\tdigestdata = digest.digest( data );\n-\tSystem.arraycopy( digestdata, 0, data, 0, 20);\n-\tdatapos = 0;\n+    int loc = 0;\n+    while (loc < bytes.length)\n+      {\n+\tint copy = Math.min (bytes.length - loc, 20 - datapos);\n+\n+\tif (copy > 0)\n+\t  {\n+\t    System.arraycopy (data, datapos, bytes, loc, copy);\n+\t    datapos += copy;\n+\t    loc += copy;\n+\t  }\n+\telse\n+\t  {\n+\t    // No data ready for copying, so refill our buffer.\n+\t    System.arraycopy( seed, 0, data, 20, 20);\n+\t    byte[] digestdata = digest.digest( data );\n+\t    System.arraycopy( digestdata, 0, data, 0, 20);\n+\t    datapos = 0;\n+\t  }\n       }\n-    }\n-\n   }\n \n   public byte[] engineGenerateSeed(int numBytes)"}, {"sha": "597d077993bb797b5563ea6ca94d2a76ad1a6413", "filename": "libjava/java/security/SecureRandom.java", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ea6262761029a1cccc0e0280ce8be198e687636/libjava%2Fjava%2Fsecurity%2FSecureRandom.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ea6262761029a1cccc0e0280ce8be198e687636/libjava%2Fjava%2Fsecurity%2FSecureRandom.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FSecureRandom.java?ref=8ea6262761029a1cccc0e0280ce8be198e687636", "patch": "@@ -1,5 +1,5 @@\n /* SecureRandom.java --- Secure Random class implmentation\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -52,7 +52,7 @@ public class SecureRandom extends Random\n      new SecureRandom by instantating the first SecureRandom \n      algorithm in the default security provier. \n \n-     It is not seeded and should be seeded using setseed or else\n+     It is not seeded and should be seeded using setSeed or else\n      on the first call to getnextBytes it will force a seed.\n \n      It is maintained for backwards compatability and programs\n@@ -267,12 +267,24 @@ public void setSeed(byte[] seed)\n    */\n   public void setSeed(long seed)\n   {\n-    byte tmp[] = { (byte) (0xff & (seed >> 56)), (byte) (0xff & (seed >> 48)),\n-      (byte) (0xff & (seed >> 40)), (byte) (0xff & (seed >> 32)),\n-      (byte) (0xff & (seed >> 24)), (byte) (0xff & (seed >> 16)),\n-      (byte) (0xff & (seed >> 8)), (byte) (0xff & seed)\n-    };\n-    secureRandomSpi.engineSetSeed(tmp);\n+    // This particular setSeed will be called by Random.Random(), via\n+    // our own constructor, before secureRandomSpi is initialized.  In\n+    // this case we can't call a method on secureRandomSpi, and we\n+    // definitely don't want to throw a NullPointerException.\n+    // Therefore we test.\n+    if (secureRandomSpi != null)\n+      {\n+        byte tmp[] = { (byte) (0xff & (seed >> 56)),\n+\t\t       (byte) (0xff & (seed >> 48)),\n+\t\t       (byte) (0xff & (seed >> 40)),\n+\t\t       (byte) (0xff & (seed >> 32)),\n+\t\t       (byte) (0xff & (seed >> 24)),\n+\t\t       (byte) (0xff & (seed >> 16)),\n+\t\t       (byte) (0xff & (seed >> 8)),\n+\t\t       (byte) (0xff & seed)\n+\t};\n+\tsecureRandomSpi.engineSetSeed(tmp);\n+      }\n   }\n \n   /**"}]}