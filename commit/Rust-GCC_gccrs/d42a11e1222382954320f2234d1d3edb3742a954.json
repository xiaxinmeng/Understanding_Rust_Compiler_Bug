{"sha": "d42a11e1222382954320f2234d1d3edb3742a954", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQyYTExZTEyMjIzODI5NTQzMjBmMjIzNGQxZDNlZGIzNzQyYTk1NA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-09-01T20:46:47Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-09-01T20:46:47Z"}, "message": "std_cmath.h: Declare C99 functions and helper functions as inline.\n\n\n2005-09-01  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/c_std/std_cmath.h: Declare C99 functions and helper\n\tfunctions as inline.\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r103743", "tree": {"sha": "b0c5d434d98b67e26652730ad0126c3144eb6ca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0c5d434d98b67e26652730ad0126c3144eb6ca1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d42a11e1222382954320f2234d1d3edb3742a954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42a11e1222382954320f2234d1d3edb3742a954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d42a11e1222382954320f2234d1d3edb3742a954", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42a11e1222382954320f2234d1d3edb3742a954/comments", "author": null, "committer": null, "parents": [{"sha": "868057591bdfd7240ad49c388933e04e67b938cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868057591bdfd7240ad49c388933e04e67b938cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/868057591bdfd7240ad49c388933e04e67b938cd"}], "stats": {"total": 73, "additions": 39, "deletions": 34}, "files": [{"sha": "5ba15010349ef75d767a26c204b5b148b2ed4ef9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42a11e1222382954320f2234d1d3edb3742a954/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42a11e1222382954320f2234d1d3edb3742a954/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d42a11e1222382954320f2234d1d3edb3742a954", "patch": "@@ -1,5 +1,10 @@\n 2005-09-01  Benjamin Kosnik  <bkoz@redhat.com>\n-\t     Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/c_std/std_cmath.h: Declare C99 functions and helper\n+\tfunctions as inline.\n+\n+2005-09-01  Benjamin Kosnik  <bkoz@redhat.com>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n \t\n \t* testsuite/lib/libstdc++.exp (check_v3_target_cxa_atexit): Fix\n \tcomment."}, {"sha": "3d125e4422cd0caf4ab66231f2d014d80a96e7a4", "filename": "libstdc++-v3/include/c_std/std_cmath.h", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d42a11e1222382954320f2234d1d3edb3742a954/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d42a11e1222382954320f2234d1d3edb3742a954/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h?ref=d42a11e1222382954320f2234d1d3edb3742a954", "patch": "@@ -444,57 +444,57 @@ namespace std\n namespace __gnu_cxx\n {\n   template<typename _Tp>\n-    int\n+    inline int\n     __capture_fpclassify(_Tp __f) { return fpclassify(__f); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     __capture_isfinite(_Tp __f) { return isfinite(__f); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     __capture_isinf(_Tp __f) { return isinf(__f); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     __capture_isnan(_Tp __f) { return isnan(__f); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     __capture_isnormal(_Tp __f) { return isnormal(__f); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     __capture_signbit(_Tp __f) { return signbit(__f); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     __capture_isgreater(_Tp __f1, _Tp __f2)\n     { return isgreater(__f1, __f2); }\n \n   template<typename _Tp>\n-     int\n-     __capture_isgreaterequal(_Tp __f1, _Tp __f2)\n-     { return isgreaterequal(__f1, __f2); }\n+    inline int\n+    __capture_isgreaterequal(_Tp __f1, _Tp __f2)\n+    { return isgreaterequal(__f1, __f2); }\n \n   template<typename _Tp>\n-     int\n-     __capture_isless(_Tp __f1, _Tp __f2) { return isless(__f1, __f2); }\n+    int\n+    __capture_isless(_Tp __f1, _Tp __f2) { return isless(__f1, __f2); }\n \n   template<typename _Tp>\n-     int\n-     __capture_islessequal(_Tp __f1, _Tp __f2)\n-     { return islessequal(__f1, __f2); }\n+    inline int\n+    __capture_islessequal(_Tp __f1, _Tp __f2)\n+    { return islessequal(__f1, __f2); }\n \n   template<typename _Tp>\n-     int\n-     __capture_islessgreater(_Tp __f1, _Tp __f2)\n-     { return islessgreater(__f1, __f2); }\n+    inline int\n+    __capture_islessgreater(_Tp __f1, _Tp __f2)\n+    { return islessgreater(__f1, __f2); }\n \n   template<typename _Tp>\n-     int\n-     __capture_isunordered(_Tp __f1, _Tp __f2)\n-     { return isunordered(__f1, __f2); }\n+    inline int\n+    __capture_isunordered(_Tp __f1, _Tp __f2)\n+    { return isunordered(__f1, __f2); }\n }\n \n // Only undefine the C99 FP macros, if actually captured for namespace movement\n@@ -514,56 +514,56 @@ namespace __gnu_cxx\n namespace std\n {\n   template<typename _Tp>\n-    int\n+    inline int\n     fpclassify(_Tp __f) { return __gnu_cxx::__capture_fpclassify(__f); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     isfinite(_Tp __f) { return __gnu_cxx::__capture_isfinite(__f); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     isinf(_Tp __f) { return __gnu_cxx::__capture_isinf(__f); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     isnan(_Tp __f) { return __gnu_cxx::__capture_isnan(__f); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     isnormal(_Tp __f) { return __gnu_cxx::__capture_isnormal(__f); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     signbit(_Tp __f) { return __gnu_cxx::__capture_signbit(__f); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     isgreater(_Tp __f1, _Tp __f2)\n     { return __gnu_cxx::__capture_isgreater(__f1, __f2); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     isgreaterequal(_Tp __f1, _Tp __f2)\n     { return __gnu_cxx::__capture_isgreaterequal(__f1, __f2); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     isless(_Tp __f1, _Tp __f2)\n     { return __gnu_cxx::__capture_isless(__f1, __f2); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     islessequal(_Tp __f1, _Tp __f2)\n     { return __gnu_cxx::__capture_islessequal(__f1, __f2); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     islessgreater(_Tp __f1, _Tp __f2)\n     { return __gnu_cxx::__capture_islessgreater(__f1, __f2); }\n \n   template<typename _Tp>\n-    int\n+    inline int\n     isunordered(_Tp __f1, _Tp __f2)\n     { return __gnu_cxx::__capture_isunordered(__f1, __f2); }\n }"}]}