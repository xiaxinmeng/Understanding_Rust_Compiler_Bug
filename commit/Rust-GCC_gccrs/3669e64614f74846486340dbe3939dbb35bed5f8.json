{"sha": "3669e64614f74846486340dbe3939dbb35bed5f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY2OWU2NDYxNGY3NDg0NjQ4NjM0MGRiZTM5MzlkYmIzNWJlZDVmOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-14T12:27:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-14T12:27:10Z"}, "message": "(find_splittable_{regs,givs}, final_[bg]iv_value): Use loop_number_exit_count instead of loop_number_exit_labels.\n\n(find_splittable_{regs,givs}, final_[bg]iv_value): Use loop_number_exit_count\ninstead of loop_number_exit_labels.\n(reg_dead_after_loop): Check loop_number_exit_count, and fail if the count\ndoesn't match loop_number_exit_labels.\n\nFrom-SVN: r10130", "tree": {"sha": "8ec8b20df28afb9253898213681c754c11a6e196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ec8b20df28afb9253898213681c754c11a6e196"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3669e64614f74846486340dbe3939dbb35bed5f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3669e64614f74846486340dbe3939dbb35bed5f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3669e64614f74846486340dbe3939dbb35bed5f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3669e64614f74846486340dbe3939dbb35bed5f8/comments", "author": null, "committer": null, "parents": [{"sha": "85ee74529a9ae57ca64c807956048308976c8ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ee74529a9ae57ca64c807956048308976c8ea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ee74529a9ae57ca64c807956048308976c8ea5"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "4bc72aea032a245310219951189671232295ae31", "filename": "gcc/unroll.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3669e64614f74846486340dbe3939dbb35bed5f8/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3669e64614f74846486340dbe3939dbb35bed5f8/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=3669e64614f74846486340dbe3939dbb35bed5f8", "patch": "@@ -2357,13 +2357,13 @@ find_splittable_regs (unroll_type, loop_start, loop_end, end_insert_before,\n \t it is unsafe to split the biv since it may not have the proper\n \t value on loop exit.  */\n \n-      /* loop_number_exit_labels is non-zero if the loop has an exit other than\n+      /* loop_number_exit_count is non-zero if the loop has an exit other than\n \t a fall through at the end.  */\n \n       biv_splittable = 1;\n       biv_final_value = 0;\n       if (unroll_type != UNROLL_COMPLETELY\n-\t  && (loop_number_exit_labels[uid_loop_num[INSN_UID (loop_start)]]\n+\t  && (loop_number_exit_count[uid_loop_num[INSN_UID (loop_start)]]\n \t      || unroll_type == UNROLL_NAIVE)\n \t  && (uid_luid[regno_last_uid[bl->regno]] >= INSN_LUID (loop_end)\n \t      || ! bl->init_insn\n@@ -2451,7 +2451,7 @@ find_splittable_regs (unroll_type, loop_start, loop_end, end_insert_before,\n \t     loop to ensure that it will always be executed no matter\n \t     how the loop exits.  Otherwise emit the insn after the loop,\n \t     since this is slightly more efficient.  */\n-\t  if (! loop_number_exit_labels[uid_loop_num[INSN_UID (loop_start)]])\n+\t  if (! loop_number_exit_count[uid_loop_num[INSN_UID (loop_start)]])\n \t    emit_insn_before (gen_move_insn (bl->biv->src_reg,\n \t\t\t\t\t     biv_final_value),\n \t\t\t      end_insert_before);\n@@ -2574,7 +2574,7 @@ find_splittable_givs (bl, unroll_type, loop_start, loop_end, increment,\n \n       final_value = 0;\n       if (unroll_type != UNROLL_COMPLETELY\n-\t  && (loop_number_exit_labels[uid_loop_num[INSN_UID (loop_start)]]\n+\t  && (loop_number_exit_count[uid_loop_num[INSN_UID (loop_start)]]\n \t      || unroll_type == UNROLL_NAIVE)\n \t  && v->giv_type != DEST_ADDR\n \t  && ((regno_first_uid[REGNO (v->dest_reg)] != INSN_UID (v->insn)\n@@ -2914,13 +2914,26 @@ reg_dead_after_loop (reg, loop_start, loop_end)\n   rtx insn, label;\n   enum rtx_code code;\n   int jump_count = 0;\n+  int label_count = 0;\n+  int this_loop_num = uid_loop_num[INSN_UID (loop_start)];\n+\n+  /* In addition to checking all exits of this loop, we must also check\n+     all exits of inner nested loops that would exit this loop.  We don't\n+     have any way to identify those, so we just give up if there are any\n+     such inner loop exits.  */\n+     \n+  for (label = loop_number_exit_labels[this_loop_num]; label;\n+       label = LABEL_NEXTREF (label))\n+    label_count++;\n+\n+  if (label_count != loop_number_exit_count[this_loop_num])\n+    return 0;\n \n   /* HACK: Must also search the loop fall through exit, create a label_ref\n      here which points to the loop_end, and append the loop_number_exit_labels\n      list to it.  */\n   label = gen_rtx (LABEL_REF, VOIDmode, loop_end);\n-  LABEL_NEXTREF (label)\n-    = loop_number_exit_labels[uid_loop_num[INSN_UID (loop_start)]];\n+  LABEL_NEXTREF (label) = loop_number_exit_labels[this_loop_num];\n \n   for ( ; label; label = LABEL_NEXTREF (label))\n     {\n@@ -2999,7 +3012,7 @@ final_biv_value (bl, loop_start, loop_end)\n      value of the biv must be invariant.  */\n \n   if (loop_n_iterations != 0\n-      && ! loop_number_exit_labels[uid_loop_num[INSN_UID (loop_start)]]\n+      && ! loop_number_exit_count[uid_loop_num[INSN_UID (loop_start)]]\n       && invariant_p (bl->initial_value))\n     {\n       increment = biv_total_increment (bl, loop_start, loop_end);\n@@ -3077,7 +3090,7 @@ final_giv_value (v, loop_start, loop_end)\n      to be known.  */\n \n   if (loop_n_iterations != 0\n-      && ! loop_number_exit_labels[uid_loop_num[INSN_UID (loop_start)]])\n+      && ! loop_number_exit_count[uid_loop_num[INSN_UID (loop_start)]])\n     {\n       /* ?? It is tempting to use the biv's value here since these insns will\n \t be put after the loop, and hence the biv will have its final value"}]}