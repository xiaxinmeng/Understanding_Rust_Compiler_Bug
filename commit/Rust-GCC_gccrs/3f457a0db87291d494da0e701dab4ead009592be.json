{"sha": "3f457a0db87291d494da0e701dab4ead009592be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y0NTdhMGRiODcyOTFkNDk0ZGEwZTcwMWRhYjRlYWQwMDk1OTJiZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2007-05-22T20:25:48Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2007-05-22T20:25:48Z"}, "message": "i386-2.C: Update comments on header files tested.\n\n2007-05-22  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* g++.dg/other/i386-2.C: Update comments on header files tested.\n\tUse -msse4.1 instead of -mssse3.  Include <smmintrin.h> instead\n\tof <tmmintrin.h>.\n\t* gcc.target/i386/sse-12.c: Likewise.\n\t* gcc.target/i386/sse-13.c: Likewise.\n\t* gcc.target/i386/sse-14.c: Likewise.\n\n\t* gcc.target/i386/sse-13.c (__builtin_ia32_pblendw128): New.\n\tRedefined to test with immediate operand.\n\t(__builtin_ia32_blendps): Likewise.\n\t(__builtin_ia32_blendpd): Likewise.\n\t(__builtin_ia32_dpps): Likewise.\n\t(__builtin_ia32_dpps): Likewise.\n\t(__builtin_ia32_insertps128): Likewise.\n\t(__builtin_ia32_vec_ext_v4sf): Likewise.\n\t(__builtin_ia32_vec_set_v16qi): Likewise.\n\t(__builtin_ia32_vec_set_v4si): Likewise.\n\t(__builtin_ia32_vec_set_v2di): Likewise.\n\t(__builtin_ia32_vec_ext_v16qi): Likewise.\n\t(__builtin_ia32_vec_ext_v4si): Likewise.\n\t(__builtin_ia32_vec_ext_v2di): Likewise.\n\t(__builtin_ia32_roundpd): Likewise.\n\t(__builtin_ia32_roundsd): Likewise.\n\t(__builtin_ia32_roundps): Likewise.\n\t(__builtin_ia32_roundss): Likewise.\n\t(__builtin_ia32_mpsadbw128): Likewise.\n\nFrom-SVN: r124959", "tree": {"sha": "e6548f288197db24031adb459aab1b8025e5234b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6548f288197db24031adb459aab1b8025e5234b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f457a0db87291d494da0e701dab4ead009592be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f457a0db87291d494da0e701dab4ead009592be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f457a0db87291d494da0e701dab4ead009592be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f457a0db87291d494da0e701dab4ead009592be/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce3fcf8c5f85276695ee9f5c66deffdc304cc6f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce3fcf8c5f85276695ee9f5c66deffdc304cc6f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce3fcf8c5f85276695ee9f5c66deffdc304cc6f6"}], "stats": {"total": 82, "additions": 65, "deletions": 17}, "files": [{"sha": "601700c8debfca17551ca137720ac5ab59463e3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f457a0db87291d494da0e701dab4ead009592be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f457a0db87291d494da0e701dab4ead009592be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3f457a0db87291d494da0e701dab4ead009592be", "patch": "@@ -1,3 +1,32 @@\n+2007-05-22  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Update comments on header files tested.\n+\tUse -msse4.1 instead of -mssse3.  Include <smmintrin.h> instead\n+\tof <tmmintrin.h>.\n+\t* gcc.target/i386/sse-12.c: Likewise.\n+\t* gcc.target/i386/sse-13.c: Likewise.\n+\t* gcc.target/i386/sse-14.c: Likewise.\n+\n+\t* gcc.target/i386/sse-13.c (__builtin_ia32_pblendw128): New.\n+\tRedefined to test with immediate operand.\n+\t(__builtin_ia32_blendps): Likewise.\n+\t(__builtin_ia32_blendpd): Likewise.\n+\t(__builtin_ia32_dpps): Likewise.\n+\t(__builtin_ia32_dpps): Likewise.\n+\t(__builtin_ia32_insertps128): Likewise.\n+\t(__builtin_ia32_vec_ext_v4sf): Likewise.\n+\t(__builtin_ia32_vec_set_v16qi): Likewise.\n+\t(__builtin_ia32_vec_set_v4si): Likewise.\n+\t(__builtin_ia32_vec_set_v2di): Likewise.\n+\t(__builtin_ia32_vec_ext_v16qi): Likewise.\n+\t(__builtin_ia32_vec_ext_v4si): Likewise.\n+\t(__builtin_ia32_vec_ext_v2di): Likewise.\n+\t(__builtin_ia32_roundpd): Likewise.\n+\t(__builtin_ia32_roundsd): Likewise.\n+\t(__builtin_ia32_roundps): Likewise.\n+\t(__builtin_ia32_roundss): Likewise.\n+\t(__builtin_ia32_mpsadbw128): Likewise.\n+\n 2007-05-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/sse4_1-check.h: Don't include ../auto-host.h."}, {"sha": "2b9509ac503a3436f4ae7e4dfa43df9605bb1cf4", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f457a0db87291d494da0e701dab4ead009592be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f457a0db87291d494da0e701dab4ead009592be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=3f457a0db87291d494da0e701dab4ead009592be", "patch": "@@ -1,10 +1,10 @@\n-/* Test that {,x,e,p,t,a}mmintrin.h, mm3dnow.h and mm_malloc.h are\n+/* Test that {,x,e,p,t,s,a}mmintrin.h, mm3dnow.h and mm_malloc.h are\n    usable with -O -pedantic-errors.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mssse3 -msse4a\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -msse4.1 -msse4a\" } */\n \n #include <ammintrin.h>\n-#include <tmmintrin.h>\n+#include <smmintrin.h>\n #include <mm3dnow.h>\n \n int dummy;"}, {"sha": "ef153b2ae85d1773872acae8541f42f9d20eacc5", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f457a0db87291d494da0e701dab4ead009592be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f457a0db87291d494da0e701dab4ead009592be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=3f457a0db87291d494da0e701dab4ead009592be", "patch": "@@ -1,10 +1,10 @@\n-/* Test that {,x,e,p,t,a}mmintrin.h, mm3dnow.h and mm_malloc.h are\n+/* Test that {,x,e,p,t,s,a}mmintrin.h, mm3dnow.h and mm_malloc.h are\n    usable with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -mssse3 -msse4a\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -msse4.1 -msse4a\" } */\n \n #include <ammintrin.h>\n-#include <tmmintrin.h>\n+#include <smmintrin.h>\n #include <mm3dnow.h>\n \n int dummy;"}, {"sha": "9b49d9e291740f08e20faffda79b0283268b9226", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f457a0db87291d494da0e701dab4ead009592be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f457a0db87291d494da0e701dab4ead009592be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=3f457a0db87291d494da0e701dab4ead009592be", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O2 -mssse3 -msse4a\" } */\n+/* { dg-options \"-O2 -msse4.1 -msse4a\" } */\n \n /* Test that the intrinsics compile with optimization.  All of them are\n-   defined as inline functions in mmintrin.h that reference the proper\n-   builtin functions.  Defining away \"static\" and \"__inline\" results in\n-   all of them being compiled as proper functions.  */\n+   defined as inline functions in {,x,e,p,t,s,a}mmintrin.h that reference\n+   the proper builtin functions.  Defining away \"static\" and \"__inline\"\n+   results in all of them being compiled as proper functions.  */\n \n #define static\n #define __inline\n@@ -15,6 +15,26 @@\n #define __builtin_ia32_extrqi(X, I, L)  __builtin_ia32_extrqi(X, 1, 1)\n #define __builtin_ia32_insertqi(X, Y, I, L) __builtin_ia32_insertqi(X, Y, 1, 1)\n \n+/* smmintrin.h */\n+#define __builtin_ia32_pblendw128(X, Y, M) __builtin_ia32_pblendw128 (X, Y, 1)\n+#define __builtin_ia32_blendps(X, Y, M) __builtin_ia32_blendps(X, Y, 1)\n+#define __builtin_ia32_blendpd(X, Y, M) __builtin_ia32_blendpd(X, Y, 1)\n+#define __builtin_ia32_dpps(X, Y, M) __builtin_ia32_dpps(X, Y, 1)\n+#define __builtin_ia32_dppd(X, Y, M) __builtin_ia32_dppd(X, Y, 1)\n+#define __builtin_ia32_insertps128(D, S, N) __builtin_ia32_insertps128(D, S, 1)\n+#define __builtin_ia32_vec_ext_v4sf(X, N) __builtin_ia32_vec_ext_v4sf(X, 1)\n+#define __builtin_ia32_vec_set_v16qi(D, S, N) __builtin_ia32_vec_set_v16qi(D, S, 1)\n+#define __builtin_ia32_vec_set_v4si(D, S, N) __builtin_ia32_vec_set_v4si(D, S, 1)\n+#define __builtin_ia32_vec_set_v2di(D, S, N) __builtin_ia32_vec_set_v2di(D, S, 1)\n+#define __builtin_ia32_vec_ext_v16qi(X, N) __builtin_ia32_vec_ext_v16qi(X, 1)\n+#define __builtin_ia32_vec_ext_v4si(X, N) __builtin_ia32_vec_ext_v4si(X, 1)\n+#define __builtin_ia32_vec_ext_v2di(X, N) __builtin_ia32_vec_ext_v2di(X, 1)\n+#define __builtin_ia32_roundpd(V, M) __builtin_ia32_roundpd(V, 1)\n+#define __builtin_ia32_roundsd(D, V, M) __builtin_ia32_roundsd(D, V, 1)\n+#define __builtin_ia32_roundps(V, M) __builtin_ia32_roundps(V, 1)\n+#define __builtin_ia32_roundss(D, V, M) __builtin_ia32_roundss(D, V, 1)\n+#define __builtin_ia32_mpsadbw128(X, Y, M) __builtin_ia32_mpsadbw128(X, Y, 1)\n+\n /* tmmintrin.h */\n #define __builtin_ia32_palignr128(X, Y, N) __builtin_ia32_palignr128(X, Y, 8)\n #define __builtin_ia32_palignr(X, Y, N) __builtin_ia32_palignr(X, Y, 8)\n@@ -47,4 +67,4 @@\n #define __builtin_ia32_shufps(A, B, N) __builtin_ia32_shufps(A, B, 0)\n \n #include <ammintrin.h>\n-#include <tmmintrin.h>\n+#include <smmintrin.h>"}, {"sha": "8214075c6874055ec0d1cf88a93a326331eb4ab9", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f457a0db87291d494da0e701dab4ead009592be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f457a0db87291d494da0e701dab4ead009592be/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=3f457a0db87291d494da0e701dab4ead009592be", "patch": "@@ -1,14 +1,13 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O0 -mssse3 -msse4a\" } */\n+/* { dg-options \"-O0 -msse4.1 -msse4a\" } */\n \n /* Test that the intrinsics compile without optimization.  All of them are\n-   defined as inline functions in mmintrin.h that reference the proper\n-   builtin functions.  Defining away \"static\" and \"__inline\" results in\n-   all of them being compiled as proper functions.  */\n+   defined as inline functions in {,x,e,p,t,s,a}mmintrin.h that reference\n+   the proper builtin functions.  Defining away \"static\" and \"__inline\"\n+   results in all of them being compiled as proper functions.  */\n \n #define static\n #define __inline\n \n #include <ammintrin.h>\n-#include <tmmintrin.h>\n-\n+#include <smmintrin.h>"}]}