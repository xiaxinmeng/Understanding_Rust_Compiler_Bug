{"sha": "f5aee6316d591598ac8574b47b79fa35e10bca2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhZWU2MzE2ZDU5MTU5OGFjODU3NGI0N2I3OWZhMzVlMTBiY2EyYw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@redhat.com", "date": "2001-09-21T00:00:03Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2001-09-21T00:00:03Z"}, "message": "re PR c/3917 (IA-64 assembler output shows erroneous cycle counting)\n\nFix for PR 3917.\n\t* config/ia64/ia64.c (itanium_split_issue): Allow max 2 FP per cycle.\n\t(insn_matches_slot): Handle TYPE_L and TYPE_X slots when checking\n\tfor issue port conflicts.\n\t(cycle_end_fill_slots): TYPE_L instructions take two slots.\n\nFrom-SVN: r45713", "tree": {"sha": "220dcf15cf9235d9adff55d1a0543beacd269e91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/220dcf15cf9235d9adff55d1a0543beacd269e91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5aee6316d591598ac8574b47b79fa35e10bca2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5aee6316d591598ac8574b47b79fa35e10bca2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5aee6316d591598ac8574b47b79fa35e10bca2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5aee6316d591598ac8574b47b79fa35e10bca2c/comments", "author": null, "committer": null, "parents": [{"sha": "91dc6f6e47905cc863d5a70cefd083cad066cb5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91dc6f6e47905cc863d5a70cefd083cad066cb5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91dc6f6e47905cc863d5a70cefd083cad066cb5f"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "c0190fc2cd6172e150c8f9555721fcc7aefc6cfd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5aee6316d591598ac8574b47b79fa35e10bca2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5aee6316d591598ac8574b47b79fa35e10bca2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5aee6316d591598ac8574b47b79fa35e10bca2c", "patch": "@@ -1,3 +1,10 @@\n+2001-09-20  Jim Wilson  <wilson@redhat.com>\n+\n+\t* config/ia64/ia64.c (itanium_split_issue): Allow max 2 FP per cycle.\n+\t(insn_matches_slot): Handle TYPE_L and TYPE_X slots when checking\n+\tfor issue port conflicts.\n+\t(cycle_end_fill_slots): TYPE_L instructions take two slots.\n+\n 2001-09-20  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* testsuite/gcc.c-torture/execute/990208-1.x: New. XFAIL at -O3"}, {"sha": "9da42706d00c497da5ba9f6784cad67917f971ea", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5aee6316d591598ac8574b47b79fa35e10bca2c/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5aee6316d591598ac8574b47b79fa35e10bca2c/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f5aee6316d591598ac8574b47b79fa35e10bca2c", "patch": "@@ -5153,9 +5153,13 @@ itanium_split_issue (p, begin)\n       enum attr_type t = (t0 == TYPE_L ? TYPE_F\n \t\t\t  : t0 == TYPE_X ? TYPE_I\n \t\t\t  : t0);\n-      int max = (t == TYPE_B ? 3 : t == TYPE_F ? 1 : 2);\n+\n+      /* Itanium can execute up to 3 branches, 2 floating point, 2 memory, and\n+\t 2 integer per cycle.  */\n+      int max = (t == TYPE_B ? 3 : 2);\n       if (type_count[t] == max)\n \treturn i;\n+\n       type_count[t]++;\n     }\n   return split;\n@@ -5347,7 +5351,9 @@ insn_matches_slot (p, itype, slot, insn)\n \t{\n \t  int i;\n \t  for (i = sched_data.first_slot; i < slot; i++)\n-\t    if (p->t[i] == stype)\n+\t    if (p->t[i] == stype\n+\t\t|| (stype == TYPE_F && p->t[i] == TYPE_L)\n+\t\t|| (stype == TYPE_I && p->t[i] == TYPE_X))\n \t      return 0;\n \t}\n       if (GET_CODE (insn) == CALL_INSN)\n@@ -5487,6 +5493,12 @@ cycle_end_fill_slots (dump)\n \t  sched_data.types[slot] = packet->t[slot];\n \t  sched_data.insns[slot] = 0;\n \t  sched_data.stopbit[slot] = 0;\n+\n+\t  /* ??? TYPE_L instructions always fill up two slots, but we don't\n+\t     support TYPE_L nops.  */\n+\t  if (packet->t[slot] == TYPE_L)\n+\t    abort ();\n+\n \t  slot++;\n \t}\n       /* Do _not_ use T here.  If T == TYPE_A, then we'd risk changing the\n@@ -5495,6 +5507,9 @@ cycle_end_fill_slots (dump)\n       sched_data.insns[slot] = tmp_insns[i];\n       sched_data.stopbit[slot] = 0;\n       slot++;\n+      /* TYPE_L instructions always fill up two slots.  */\n+      if (t == TYPE_L)\n+\tslot++;\n     }\n \n   /* This isn't right - there's no need to pad out until the forced split;"}]}