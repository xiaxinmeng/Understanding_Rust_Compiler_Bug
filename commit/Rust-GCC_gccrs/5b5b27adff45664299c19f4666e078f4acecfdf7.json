{"sha": "5b5b27adff45664299c19f4666e078f4acecfdf7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI1YjI3YWRmZjQ1NjY0Mjk5YzE5ZjQ2NjZlMDc4ZjRhY2VjZmRmNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-05-15T12:06:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-05-15T12:06:55Z"}, "message": "[multiple changes]\n\n2012-05-15  Thomas Quinot  <quinot@adacore.com>\n\n\t* uintp.adb (Image_Uint): Use UI_Div_Rem to get quotient and\n\tremainder of U / Base in a single operation.\n\n2012-05-15  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch5.adb, inline.adb, sem_ch10.adb, prj.ads, sem_util.adb,\n\ta-ngelfu.ads, exp_ch4.adb, exp_ch6.adb, aspects.ads, sem_ch6.adb,\n\tvms_data.ads, exp_ch3.adb, prj-env.adb: Minor reformatting.\n\nFrom-SVN: r187529", "tree": {"sha": "01c416110922a7e372c9c428f0077e8b755bd4ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01c416110922a7e372c9c428f0077e8b755bd4ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b5b27adff45664299c19f4666e078f4acecfdf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b5b27adff45664299c19f4666e078f4acecfdf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b5b27adff45664299c19f4666e078f4acecfdf7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b5b27adff45664299c19f4666e078f4acecfdf7/comments", "author": null, "committer": null, "parents": [{"sha": "053cf9940a4086500ebaa994d29b894e8f5ed71a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053cf9940a4086500ebaa994d29b894e8f5ed71a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053cf9940a4086500ebaa994d29b894e8f5ed71a"}], "stats": {"total": 177, "additions": 97, "deletions": 80}, "files": [{"sha": "81f1da4d069a60505f6c86ab9c30d287a3106050", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -1,3 +1,14 @@\n+2012-05-15  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* uintp.adb (Image_Uint): Use UI_Div_Rem to get quotient and\n+\tremainder of U / Base in a single operation.\n+\n+2012-05-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch5.adb, inline.adb, sem_ch10.adb, prj.ads, sem_util.adb,\n+\ta-ngelfu.ads, exp_ch4.adb, exp_ch6.adb, aspects.ads, sem_ch6.adb,\n+\tvms_data.ads, exp_ch3.adb, prj-env.adb: Minor reformatting.\n+\n 2012-05-15  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_ch4.adb (Has_Inferable_Discriminants): For a qualified"}, {"sha": "9f7d3a3a168196a7569aece89b9dd683a88a8be3", "filename": "gcc/ada/a-ngelfu.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fa-ngelfu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fa-ngelfu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngelfu.ads?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -11,10 +11,6 @@\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n -- apply solely to the Post aspects that have been added to the spec.       --\n--- Except for these parts of the document, in accordance with the copyright --\n--- of that document,  you can  freely copy and  modify this  specification, --\n--- provided that  if you redistribute a modified version,  any changes that --\n--- you have made are clearly indicated.                                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "7392beea85896768befd1ef13e8fa80eb3b5289b", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -34,30 +34,35 @@\n --  aspect specifications from the tree. The semantic processing for aspect\n --  specifications is found in Sem_Ch13.Analyze_Aspect_Specifications.\n \n+------------------------\n+-- Adding New Aspects --\n+------------------------\n+\n --  In general, each aspect should have a corresponding pragma, so that the\n --  newly developed functionality is available for Ada versions < Ada 2012.\n --  When both are defined, it is convenient to first transform the aspect into\n --  an equivalent pragma in Sem_Ch13.Analyze_Aspect_Specifications, and then\n --  analyze the pragma in Sem_Prag.Analyze_Pragma.\n \n---  To add a new aspect:\n---  * create a name in snames.ads-tmpl\n---  * create a value in type Aspect_Id in this unit\n---  * add a value for the aspect in the global arrays defined in this unit\n---  * add code for analyzing the aspect in\n---    Sem_Ch13.Analyze_Aspect_Specifications. This may involve adding some\n---    nodes to the tree to perform additional treatments later.\n---  * if the semantic analysis of expressions/names in the aspect should not\n---    occur at the point the aspect is defined, add code in the adequate\n---    semantic analysis procedure for the aspect. For example, this is the case\n---    for aspects Pre and Post on subprograms, which are pre-analyzed at the\n---    end of the list of declarations to which the subprogram belongs, and\n---    fully analyzed (possibly with expansion) during the semantic analysis of\n---    subprogram bodies.\n-\n---  Additionally, to add a corresponding pragma for a new aspect:\n---  * create a name for the pragma in snames.ads-tmpl\n---  * add code for analyzing the pragma in Sem_Prag.Analyze_Pragma\n+--  To add a new aspect, you need to do the following\n+\n+--    1. Create a name in snames.ads-tmpl\n+\n+--    2. Create a value in type Aspect_Id in this unit\n+\n+--    3. Add a value for the aspect in the global arrays defined in this unit\n+\n+--    4. Add code for the aspect in Sem_Ch13.Analyze_Aspect_Specifications.\n+--       This may involve adding some nodes to the tree to perform additional\n+--       treatments later.\n+\n+--    5. Ff the semantic analysis of expressions/names in the aspect should not\n+--       occur at the point the aspect is defined, add code in the adequate\n+--       semantic analysis procedure for the aspect. For example, this is the\n+--       case for aspects Pre and Post on subprograms, which are pre-analyzed\n+--       at the end of the declaration list to which the subprogram belongs,\n+--       and fully analyzed (possibly with expansion) during the semantic\n+--       analysis of subprogram bodies.\n \n with Namet;  use Namet;\n with Snames; use Snames;"}, {"sha": "8240ed4d9a26203e5094fdb0b987594269b637ff", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -1931,7 +1931,7 @@ package body Exp_Ch3 is\n             Set_Declarations (Body_Node, New_List (\n               Make_Full_Type_Declaration (Loc,\n                 Defining_Identifier => Acc_Type,\n-                Type_Definition =>\n+                Type_Definition     =>\n                   Make_Access_To_Object_Definition (Loc,\n                     All_Present            => True,\n                     Null_Exclusion_Present => False,\n@@ -1949,7 +1949,7 @@ package body Exp_Ch3 is\n                           Make_Selected_Component (Loc,\n                             Prefix        =>\n                               Unchecked_Convert_To (Acc_Type,\n-                                 Make_Identifier (Loc, Name_uO)),\n+                                Make_Identifier (Loc, Name_uO)),\n                             Selector_Name =>\n                               New_Reference_To (Iface_Comp, Loc)),\n                         Attribute_Name => Name_Position)))));"}, {"sha": "4efa476c4fa0ffc32a15d0d1b1810dd190a6122a", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -10106,9 +10106,7 @@ package body Exp_Ch4 is\n \n       elsif Nkind (N) = N_Qualified_Expression then\n          return Is_Unchecked_Union (Etype (Subtype_Mark (N)))\n-                  and then\n-                Is_Constrained (Etype (Subtype_Mark (N)));\n-\n+           and then Is_Constrained (Etype (Subtype_Mark (N)));\n       end if;\n \n       return False;"}, {"sha": "a9f6ce46e5e38cad79e4992d91a639f55bd6bacb", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -344,14 +344,12 @@ package body Exp_Ch5 is\n       elsif Has_Controlled_Component (L_Type) then\n          Loop_Required := True;\n \n-      --  If changing scalar storage order and assigning a bit packed arrau,\n+      --  If changing scalar storage order and assigning a bit packed array,\n       --  force loop expansion.\n \n       elsif Is_Bit_Packed_Array (L_Type)\n-              and then\n-            (In_Reverse_Storage_Order_Record (Rhs)\n-               /=\n-             In_Reverse_Storage_Order_Record (Lhs))\n+        and then (In_Reverse_Storage_Order_Record (Rhs) /=\n+                  In_Reverse_Storage_Order_Record (Lhs))\n       then\n          Loop_Required := True;\n "}, {"sha": "3cbb790ec2d988761252bab9938ec23996e44f16", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -2712,7 +2712,7 @@ package body Exp_Ch6 is\n                      end loop;\n \n                   --  Handle unchecked conversion of access types generated\n-                  --  in thunks (cf. Expand_Interface_Thunk)\n+                  --  in thunks (cf. Expand_Interface_Thunk).\n \n                   elsif Is_Access_Type (Etype (Actual))\n                     and then Nkind (Actual) = N_Unchecked_Type_Conversion"}, {"sha": "2fa6054a89a5f459f344bc2f5b67e36483c571b8", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -743,14 +743,17 @@ package body Inline is\n \n          for Index in Inlined.First .. Inlined.Last loop\n             if not Is_Called (Inlined.Table (Index).Name) then\n+\n                --  This means that Add_Inlined_Body added the subprogram to the\n                --  table but wasn't able to handle its code unit. Do nothing.\n \n                Inlined.Table (Index).Processed := True;\n+\n             elsif Inlined.Table (Index).Main_Call then\n                Pending_Inlined.Increment_Last;\n                Pending_Inlined.Table (Pending_Inlined.Last) := Index;\n                Inlined.Table (Index).Processed := True;\n+\n             else\n                Set_Is_Called (Inlined.Table (Index).Name, False);\n             end if;\n@@ -967,10 +970,12 @@ package body Inline is\n \n    function Get_Code_Unit_Entity (E : Entity_Id) return Entity_Id is\n       Unit : Entity_Id := Cunit_Entity (Get_Code_Unit (E));\n+\n    begin\n       if Ekind (Unit) = E_Package_Body then\n          Unit := Spec_Entity (Unit);\n       end if;\n+\n       return Unit;\n    end Get_Code_Unit_Entity;\n \n@@ -1003,6 +1008,28 @@ package body Inline is\n       return False;\n    end Has_Initialized_Type;\n \n+   -----------------------------\n+   -- In_Main_Unit_Or_Subunit --\n+   -----------------------------\n+\n+   function In_Main_Unit_Or_Subunit (E : Entity_Id) return Boolean is\n+      Comp : Node_Id := Cunit (Get_Code_Unit (E));\n+\n+   begin\n+      --  Check whether the subprogram or package to inline is within the main\n+      --  unit or its spec or within a subunit. In either case there are no\n+      --  additional bodies to process. If the subprogram appears in a parent\n+      --  of the current unit, the check on whether inlining is possible is\n+      --  done in Analyze_Inlined_Bodies.\n+\n+      while Nkind (Unit (Comp)) = N_Subunit loop\n+         Comp := Library_Unit (Comp);\n+      end loop;\n+\n+      return Comp = Cunit (Main_Unit)\n+        or else Comp = Library_Unit (Cunit (Main_Unit));\n+   end In_Main_Unit_Or_Subunit;\n+\n    ----------------\n    -- Initialize --\n    ----------------\n@@ -1037,7 +1064,6 @@ package body Inline is\n \n    begin\n       if Serious_Errors_Detected = 0 then\n-\n          Expander_Active := (Operating_Mode = Opt.Generate_Code);\n          Push_Scope (Standard_Standard);\n          To_Clean := New_Elmt_List;\n@@ -1156,27 +1182,4 @@ package body Inline is\n       end loop;\n    end Remove_Dead_Instance;\n \n-   -----------------------------\n-   -- In_Main_Unit_Or_Subunit --\n-   -----------------------------\n-\n-   function In_Main_Unit_Or_Subunit (E : Entity_Id) return Boolean is\n-      Comp : Node_Id := Cunit (Get_Code_Unit (E));\n-\n-   begin\n-      --  Check whether the subprogram or package to inline is within the main\n-      --  unit or its spec or within a subunit. In either case there are no\n-      --  additional bodies to process. If the subprogram appears in a parent\n-      --  of the current unit, the check on whether inlining is possible is\n-      --  done in Analyze_Inlined_Bodies.\n-\n-      while Nkind (Unit (Comp)) = N_Subunit loop\n-         Comp := Library_Unit (Comp);\n-      end loop;\n-\n-      return\n-        Comp = Cunit (Main_Unit)\n-          or else Comp = Library_Unit (Cunit (Main_Unit));\n-   end In_Main_Unit_Or_Subunit;\n-\n end Inline;"}, {"sha": "dac6512ee041526f322cd1a3ac05d93dca4792f3", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -754,7 +754,7 @@ package body Prj.Env is\n          exit when Data = No_Source;\n \n          if Data.Unit /= No_Unit_Index then\n-            if Data.Locally_Removed and then (not Data.Suppressed) then\n+            if Data.Locally_Removed and then not Data.Suppressed then\n                Fmap.Add_Forbidden_File_Name (Data.File);\n             else\n                Fmap.Add_To_File_Map\n@@ -829,7 +829,7 @@ package body Prj.Env is\n             Source := Prj.Element (Iter);\n             exit when Source = No_Source;\n \n-            if (not Source.Suppressed)\n+            if not Source.Suppressed\n               and then Source.Replaced_By = No_Source\n               and then Source.Path.Name /= No_Path\n               and then (Source.Language.Config.Kind = File_Based"}, {"sha": "b0d76661b069628ff52144f07bab642b2aa612a9", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -788,8 +788,7 @@ package Prj is\n       --  These sources should not be put in the mapping file.\n \n       Replaced_By : Source_Id := No_Source;\n-      --  Indicate the source in an extending project that replaces the current\n-      --  source.\n+      --  Source in an extending project that replaces the current source\n \n       File : File_Name_Type := No_File;\n       --  Canonical file name of the source"}, {"sha": "11239f8f2331e118f64ac254d1eea1c7bc7a8ec3", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -2991,8 +2991,8 @@ package body Sem_Ch10 is\n       --  with_clause on a child unit implies that the implicit with on the\n       --  parent is also private.\n \n-      if Nkind_In\n-         (Unit (N), N_Package_Declaration, N_Generic_Package_Declaration)\n+      if Nkind_In (Unit (N), N_Package_Declaration,\n+                             N_Generic_Package_Declaration)\n       then\n          Set_Private_Present (Withn, Private_Present (Item));\n       end if;"}, {"sha": "a2868a97daa0317c34b728a49a7f4a89b1ad6da2", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -6072,7 +6072,6 @@ package body Sem_Ch6 is\n \n    begin\n       while Present (Old_Discr) and then Present (New_Discr) loop\n-\n          New_Discr_Id := Defining_Identifier (New_Discr);\n \n          --  The subtype mark of the discriminant on the full type has not"}, {"sha": "bf245f0a86e42d0d935832a72beefab2e938af1e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -3172,12 +3172,13 @@ package body Sem_Util is\n    function Enclosing_Lib_Unit_Entity\n       (E : Entity_Id := Current_Scope) return Entity_Id\n    is\n-      Unit_Entity : Entity_Id := E;\n+      Unit_Entity : Entity_Id;\n \n    begin\n       --  Look for enclosing library unit entity by following scope links.\n       --  Equivalent to, but faster than indexing through the scope stack.\n \n+      Unit_Entity := E;\n       while (Present (Scope (Unit_Entity))\n         and then Scope (Unit_Entity) /= Standard_Standard)\n         and not Is_Child_Unit (Unit_Entity)"}, {"sha": "fe8624dc966a1859fd8e0c82199192a05b410b01", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -370,17 +370,20 @@ package body Uintp is\n          H : constant array (Int range 0 .. 15) of Character :=\n                \"0123456789ABCDEF\";\n \n+         Q, R : Uint;\n       begin\n-         if U >= Base then\n-            Image_Uint (U / Base);\n+         UI_Div_Rem (U, Base, Q, R);\n+\n+         if Q > Uint_0 then\n+            Image_Uint (Q);\n          end if;\n \n          if Digs_Output = 4 and then Base = Uint_16 then\n             Image_Char ('_');\n             Digs_Output := 0;\n          end if;\n \n-         Image_Char (H (UI_To_Int (U rem Base)));\n+         Image_Char (H (UI_To_Int (R)));\n \n          Digs_Output := Digs_Output + 1;\n       end Image_Uint;\n@@ -2383,8 +2386,8 @@ package body Uintp is\n \n             --  Special cases when Right is less than 13 and Left is larger\n             --  larger than one digit. All of these algorithms depend on the\n-            --  base being 2 ** 15 We work with Abs (Left) and Abs(Right)\n-            --  then multiply result by Sign (Left)\n+            --  base being 2 ** 15. We work with Abs (Left) and Abs(Right)\n+            --  then multiply result by Sign (Left).\n \n             if (Right <= Uint_12) and then (Right >= Uint_Minus_12) then\n \n@@ -2394,7 +2397,7 @@ package body Uintp is\n                   Sign := 1;\n                end if;\n \n-               --  All cases are listed, grouped by mathematical method It is\n+               --  All cases are listed, grouped by mathematical method. It is\n                --  not inefficient to do have this case list out of order since\n                --  GCC sorts the cases we list.\n \n@@ -2403,9 +2406,10 @@ package body Uintp is\n                   when 1 =>\n                      return Uint_0;\n \n-                  --  Powers of two are simple AND's with LS Left Digit GCC\n-                  --  will recognise these constants as powers of 2 and replace\n-                  --  the rem with simpler operations where possible.\n+                  --  Powers of two are simple AND's with the least significant\n+                  --  digit of Left. GCC will recognise these constants as\n+                  --  powers of 2 and replace the rem with simpler operations\n+                  --  where possible.\n \n                   --  Least_Sig_Digit might return Negative numbers\n \n@@ -2426,7 +2430,7 @@ package body Uintp is\n                   --    If B Rem Right = 1 then\n                   --    Left Rem Right = Sum_Of_Digits_Base_B (Left) Rem Right\n \n-                  --  Note: 2^32 mod 3 = 1\n+                  --  Note: 2^30 mod 3 = 1\n \n                   when 3 =>\n                      return UI_From_Int (\n@@ -2438,7 +2442,7 @@ package body Uintp is\n                      return UI_From_Int (\n                         Sign * (Sum_Digits (Left, 1) rem Int (7)));\n \n-                  --  Note: 2^32 mod 5 = -1\n+                  --  Note: 2^30 mod 5 = -1\n \n                   --  Alternating sums might be negative, but rem is always\n                   --  positive hence we must use mod here.\n@@ -2483,7 +2487,7 @@ package body Uintp is\n                   --     (M1 mod m1) = (M2 mod m2) = 1 AND\n                   --     (M1 mod m2) = (M2 mod m1) = 0\n \n-                  --  So u mod m = (u1 * M1 + u2 * M2) mod m Where u1 = (u mod\n+                  --  So u mod m = (u1 * M1 + u2 * M2) mod m where u1 = (u mod\n                   --  m1) AND u2 = (u mod m2); Under typical circumstances the\n                   --  last mod m can be done with a (possible) single\n                   --  subtraction."}, {"sha": "e438f8436707a469b24aaa41da0bfe72263d095d", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b5b27adff45664299c19f4666e078f4acecfdf7/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=5b5b27adff45664299c19f4666e078f4acecfdf7", "patch": "@@ -1779,9 +1779,12 @@ package VMS_Data is\n    --   Causes errors to be displayed as soon as they are encountered, rather\n    --   than after compilation is terminated. If GNAT terminates prematurely\n    --   or goes into an infinite loop, the last error message displayed may\n-   --   help to pinpoint the culprit. Use with caution: This qualifier is\n-   --   intended for use in debugging the compiler proper, and may cause\n-   --   output of warnings suppressed by pragma.\n+   --   help to pinpoint the culprit.\n+   --\n+   --   Note that this qualifier is intended only for helping to diagnose\n+   --   illegal programs when the compiler fails. It disconnects many of the\n+   --   normal handling procedures for error messages, and may for example\n+   --   cause malfunction of pragma Warnings.\n \n    S_GCC_Inline  : aliased constant S := \"/INLINE=\"                        &\n                                             \"PRAGMA \"                      &"}]}