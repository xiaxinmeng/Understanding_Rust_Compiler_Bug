{"sha": "96acdb8dc260f2ab3ec5826e8a510c6a7fee665d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZhY2RiOGRjMjYwZjJhYjNlYzU4MjZlOGE1MTBjNmE3ZmVlNjY1ZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-12-28T13:22:36Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-12-28T13:22:36Z"}, "message": "re PR fortran/83567 (Parametrized derived types: Segmentation fault when assigning a function return value)\n\n2017-12-28  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/83567\n\t* trans-expr.c (gfc_trans_assignment_1): Free parameterized\n\tcomponents of the lhs if dealloc is set.\n\t*trans-decl.c (gfc_trans_deferred_vars): Do not free the\n\tparameterized components of function results on leaving scope.\n\n\n2017-12-28  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/83567\n\t* gfortran.dg/pdt_26.f90 : New test.\n\nFrom-SVN: r256019", "tree": {"sha": "6397b7b179b1437798cb0c17ee9afde33d64130a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6397b7b179b1437798cb0c17ee9afde33d64130a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d/comments", "author": null, "committer": null, "parents": [{"sha": "7b7801e35116595a6ef0669f7a7874b90b0a55a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7801e35116595a6ef0669f7a7874b90b0a55a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b7801e35116595a6ef0669f7a7874b90b0a55a1"}], "stats": {"total": 97, "additions": 92, "deletions": 5}, "files": [{"sha": "3f3dc3ee23a9122b679ac16aed591f234efc56a9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=96acdb8dc260f2ab3ec5826e8a510c6a7fee665d", "patch": "@@ -1,3 +1,11 @@\n+2017-12-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/83567\n+\t* trans-expr.c (gfc_trans_assignment_1): Free parameterized\n+\tcomponents of the lhs if dealloc is set.\n+\t*trans-decl.c (gfc_trans_deferred_vars): Do not free the\n+\tparameterized components of function results on leaving scope.\n+\n 2017_12_27  Louis Krupp  <louis.krupp@zoho.com>\n \n \tPR fortran/83092"}, {"sha": "35dee6107cc50c3a6991c51ead25cf36960846ce", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=96acdb8dc260f2ab3ec5826e8a510c6a7fee665d", "patch": "@@ -4344,9 +4344,12 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t\t\t\t   sym->as ? sym->as->rank : 0,\n \t\t\t\t\t   sym->param_list);\n \t      gfc_add_expr_to_block (&tmpblock, tmp);\n-\t      tmp = gfc_deallocate_pdt_comp (sym->ts.u.derived,\n-\t\t\t\t\t     sym->backend_decl,\n-\t\t\t\t\t     sym->as ? sym->as->rank : 0);\n+\t      if (!sym->attr.result)\n+\t\ttmp = gfc_deallocate_pdt_comp (sym->ts.u.derived,\n+\t\t\t\t\t       sym->backend_decl,\n+\t\t\t\t\t       sym->as ? sym->as->rank : 0);\n+\t      else\n+\t\ttmp = NULL_TREE;\n \t      gfc_add_init_cleanup (block, gfc_finish_block (&tmpblock), tmp);\n \t    }\n \t  else if (sym->attr.dummy)\n@@ -4376,8 +4379,11 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t\t\t\t   sym->param_list);\n \t      gfc_add_expr_to_block (&tmpblock, tmp);\n \t      tmp = gfc_class_data_get (sym->backend_decl);\n-\t      tmp = gfc_deallocate_pdt_comp (data->ts.u.derived, tmp,\n-\t\t\t\t\t     data->as ? data->as->rank : 0);\n+\t      if (!sym->attr.result)\n+\t\ttmp = gfc_deallocate_pdt_comp (data->ts.u.derived, tmp,\n+\t\t\t\t\t       data->as ? data->as->rank : 0);\n+\t      else\n+\t\ttmp = NULL_TREE;\n \t      gfc_add_init_cleanup (block, gfc_finish_block (&tmpblock), tmp);\n \t    }\n \t  else if (sym->attr.dummy)"}, {"sha": "30151dd9fa4048b71b07dd1f36ad207323d9d8c4", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=96acdb8dc260f2ab3ec5826e8a510c6a7fee665d", "patch": "@@ -10076,6 +10076,28 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n \t  gfc_trans_runtime_check (true, false, cond, &loop.pre,\n \t\t\t\t   &expr1->where, msg);\n \t}\n+\n+      /* Deallocate the lhs parameterized components if required.  */ \n+      if (dealloc && expr2->expr_type == EXPR_FUNCTION)\n+\t{\n+\t  if (expr1->ts.type == BT_DERIVED\n+\t      && expr1->ts.u.derived\n+\t      && expr1->ts.u.derived->attr.pdt_type)\n+\t    {\n+\t      tmp = gfc_deallocate_pdt_comp (expr1->ts.u.derived, lse.expr,\n+\t\t\t\t\t     expr1->rank);\n+\t      gfc_add_expr_to_block (&lse.pre, tmp);\n+\t    }\n+\t  else if (expr1->ts.type == BT_CLASS\n+\t\t   && CLASS_DATA (expr1)->ts.u.derived\n+\t\t   && CLASS_DATA (expr1)->ts.u.derived->attr.pdt_type)\n+\t    {\n+\t      tmp = gfc_class_data_get (lse.expr);\n+\t      tmp = gfc_deallocate_pdt_comp (CLASS_DATA (expr1)->ts.u.derived,\n+\t\t\t\t\t     tmp, expr1->rank);\n+\t      gfc_add_expr_to_block (&lse.pre, tmp);\n+\t    }\n+\t}\n     }\n \n   /* Assignments of scalar derived types with allocatable components"}, {"sha": "2e69175084c42ace2b94d1246404d9ac8311a0bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96acdb8dc260f2ab3ec5826e8a510c6a7fee665d", "patch": "@@ -1,3 +1,8 @@\n+2017-12-28  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/83567\n+\t* gfortran.dg/pdt_26.f90 : New test.\n+\n 2017_12_27  Louis Krupp  <louis.krupp@zoho.com>\n \n \tPR fortran/83092"}, {"sha": "a4819b0b1daee15ab2b280291c28dd40ea8e4c4b", "filename": "gcc/testsuite/gfortran.dg/pdt_26.f03", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_26.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96acdb8dc260f2ab3ec5826e8a510c6a7fee665d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_26.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpdt_26.f03?ref=96acdb8dc260f2ab3ec5826e8a510c6a7fee665d", "patch": "@@ -0,0 +1,46 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! Test the fix for PR83567 in which the parameterized component 'foo' was\n+! being deallocated before return from 'addw', with consequent segfault in \n+! the main program.\n+!\n+! Contributed by Berke Durak  <berke.durak@gmail.com>\n+! The function 'addvv' has been made elemental so that the test can check that\n+! arrays are correctly treated and that no memory leaks occur.\n+!\n+module pdt_m\n+  implicit none\n+  type :: vec(k)\n+     integer, len :: k=3\n+     integer :: foo(k)=[1,2,3]\n+  end type vec\n+contains\n+  elemental function addvv(a,b) result(c)\n+    type(vec(k=*)), intent(in) :: a\n+    type(vec(k=*)), intent(in) :: b\n+    type(vec(k=a%k)) :: c\n+\n+    c%foo=a%foo+b%foo\n+  end function\n+end module pdt_m\n+\n+program test_pdt\n+  use pdt_m\n+  implicit none\n+  type(vec) :: u,v,w, a(2), b(2), c(2)\n+  integer :: i\n+\n+  u%foo=[1,2,3]\n+  v%foo=[2,3,4]\n+  w=addvv(u,v)\n+  if (any (w%foo .ne. [3,5,7])) call abort\n+  do i = 1 , a(1)%k\n+    a%foo(i) = i + 4\n+    b%foo(i) = i + 7\n+  end do\n+  c = addvv(a,b)\n+  if (any (c(1)%foo .ne. [13,15,17])) call abort\n+end program test_pdt\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 8 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_malloc\" 7 \"original\" } }"}]}