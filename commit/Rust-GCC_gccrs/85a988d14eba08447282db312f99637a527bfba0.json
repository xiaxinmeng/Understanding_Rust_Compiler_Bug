{"sha": "85a988d14eba08447282db312f99637a527bfba0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVhOTg4ZDE0ZWJhMDg0NDcyODJkYjMxMmY5OTYzN2E1MjdiZmJhMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-06-08T16:26:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-06-08T16:26:01Z"}, "message": "re PR c++/40370 (ICE with invalid array bound in template class)\n\n\tPR c++/40370\n\tPR c++/40372\n\t* parser.c (cp_parser_direct_declarator): Don't set TREE_SIDE_EFFECTS\n\ton error_mark_node.  Check for VLAs outside of function context\n\tbefore check whether to wrap bounds into a NOP_EXPR with\n\tTREE_SIDE_EFFECTS.\n\n\t* g++.dg/template/error41.C: New test.\n\t* g++.dg/template/error42.C: New test.\n\nFrom-SVN: r148278", "tree": {"sha": "0996b2383b9560e0508fc26e2c0b221bced86d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0996b2383b9560e0508fc26e2c0b221bced86d75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85a988d14eba08447282db312f99637a527bfba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a988d14eba08447282db312f99637a527bfba0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a988d14eba08447282db312f99637a527bfba0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a988d14eba08447282db312f99637a527bfba0/comments", "author": null, "committer": null, "parents": [{"sha": "db34470d17bd803cf74f747e7714f6029abd9b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db34470d17bd803cf74f747e7714f6029abd9b38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db34470d17bd803cf74f747e7714f6029abd9b38"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "5c0d4730ce6d91c25348b35133c07342730e7e2f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a988d14eba08447282db312f99637a527bfba0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a988d14eba08447282db312f99637a527bfba0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=85a988d14eba08447282db312f99637a527bfba0", "patch": "@@ -1,3 +1,12 @@\n+2009-06-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/40370\n+\tPR c++/40372\n+\t* parser.c (cp_parser_direct_declarator): Don't set TREE_SIDE_EFFECTS\n+\ton error_mark_node.  Check for VLAs outside of function context\n+\tbefore check whether to wrap bounds into a NOP_EXPR with\n+\tTREE_SIDE_EFFECTS.\n+\n 2009-06-08  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* repo.c (get_base_filename): Use aux_base_name rather than"}, {"sha": "05ae257fbf79c19da4369cb7d76e31f35f412f01", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a988d14eba08447282db312f99637a527bfba0/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a988d14eba08447282db312f99637a527bfba0/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=85a988d14eba08447282db312f99637a527bfba0", "patch": "@@ -13336,13 +13336,6 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t\t\t\t\t &non_constant_p);\n \t      if (!non_constant_p)\n \t\tbounds = fold_non_dependent_expr (bounds);\n-\t      else if (processing_template_decl)\n-\t\t{\n-\t\t  /* Remember this wasn't a constant-expression.  */\n-\t\t  bounds = build_nop (TREE_TYPE (bounds), bounds);\n-\t\t  TREE_SIDE_EFFECTS (bounds) = 1;\n-\t\t}\n-\n \t      /* Normally, the array bound must be an integral constant\n \t\t expression.  However, as an extension, we allow VLAs\n \t\t in function scopes.  */\n@@ -13352,6 +13345,12 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t\t &token->location);\n \t\t  bounds = error_mark_node;\n \t\t}\n+\t      else if (processing_template_decl && !error_operand_p (bounds))\n+\t\t{\n+\t\t  /* Remember this wasn't a constant-expression.  */\n+\t\t  bounds = build_nop (TREE_TYPE (bounds), bounds);\n+\t\t  TREE_SIDE_EFFECTS (bounds) = 1;\n+\t\t}\n \t    }\n \t  else\n \t    bounds = NULL_TREE;"}, {"sha": "9c7651db722fab07ff0b5868be9f39cb3b27c189", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a988d14eba08447282db312f99637a527bfba0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a988d14eba08447282db312f99637a527bfba0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85a988d14eba08447282db312f99637a527bfba0", "patch": "@@ -1,6 +1,13 @@\n+2009-06-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/40370\n+\tPR c++/40372\n+\t* g++.dg/template/error41.C: New test.\n+\t* g++.dg/template/error42.C: New test.\n+\n 2009-06-08  Revital Eres  <eres@il.ibm.com>\n \n-\tPR40359\n+\tPR testsuite/40359\n \t* gcc.dg/vect/vect-58.c: Change checks to use vect_hw_misalign.\n \t* gcc.dg/vect/vect-88.c: Likewise.\n \t* gcc.dg/vect/no-section-anchors-vect-66.c: Likewise."}, {"sha": "c92b8497aff2c791eda1045cd1cc2e8ff1d92727", "filename": "gcc/testsuite/g++.dg/template/error41.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a988d14eba08447282db312f99637a527bfba0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a988d14eba08447282db312f99637a527bfba0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror41.C?ref=85a988d14eba08447282db312f99637a527bfba0", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/40370\n+// { dg-do compile }\n+\n+struct A\n+{\n+  static int i;\n+};\n+\n+template <int> struct B\n+{\n+  int x[A::i];\t// { dg-error \"array bound is not an integer constant\" }\n+};"}, {"sha": "0d651e3162028509685b75ada4fbf774c8a1f79a", "filename": "gcc/testsuite/g++.dg/template/error42.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a988d14eba08447282db312f99637a527bfba0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a988d14eba08447282db312f99637a527bfba0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror42.C?ref=85a988d14eba08447282db312f99637a527bfba0", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/40372\n+// { dg-do compile }\n+\n+template <int> struct A\n+{\n+  int i;\t\t// { dg-error \"invalid use of non-static data member\" }\n+  friend void foo ()\n+  {\n+    int x[i];\t\t// { dg-error \"from this location\" }\n+  }\n+};\n+\n+struct B\n+{\n+  int j;\t\t// { dg-error \"invalid use of non-static data member\" }\n+  friend int bar ()\n+  {\n+    return j;\t\t// { dg-error \"from this location\" }\n+  }\n+};"}]}