{"sha": "41e52aa5859d5ec202f05ec2e36984b7cb708fc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlNTJhYTU4NTlkNWVjMjAyZjA1ZWMyZTM2OTg0YjdjYjcwOGZjMw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-04-20T19:11:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-18T09:08:19Z"}, "message": "[Ada] AI12-0293-1 Implement storage streams\n\n2020-06-18  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/a-strsto.ads, libgnat/a-ststbo.adb,\n\tlibgnat/a-ststbo.ads, libgnat/a-ststun.adb,\n\tlibgnat/a-ststun.ads: New files, containing packages\n\tAda.Streams.Storage, Ada.Streams.Storage.Bounded, and\n\tAda.Streams.Storage.Unbounded.\n\t* impunit.adb, Makefile.rtl: Add new file names.", "tree": {"sha": "15b5fd215cf7cdb54b9a4e526730449a6b103763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15b5fd215cf7cdb54b9a4e526730449a6b103763"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41e52aa5859d5ec202f05ec2e36984b7cb708fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e52aa5859d5ec202f05ec2e36984b7cb708fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e52aa5859d5ec202f05ec2e36984b7cb708fc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02bf80a34e49498cfa886cfb4c906761b6218e27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02bf80a34e49498cfa886cfb4c906761b6218e27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02bf80a34e49498cfa886cfb4c906761b6218e27"}], "stats": {"total": 484, "additions": 483, "deletions": 1}, "files": [{"sha": "2092c1773c928f670106c324e4af0ec98a976b38", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=41e52aa5859d5ec202f05ec2e36984b7cb708fc3", "patch": "@@ -274,6 +274,9 @@ GNATRTL_NONTASKING_OBJS= \\\n   a-stouut$(objext) \\\n   a-strbou$(objext) \\\n   a-stream$(objext) \\\n+  a-strsto$(objext) \\\n+  a-ststbo$(objext) \\\n+  a-ststun$(objext) \\\n   a-strfix$(objext) \\\n   a-strhas$(objext) \\\n   a-string$(objext) \\"}, {"sha": "367837f374c5b72924b3eeccba8428d197e7d782", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=41e52aa5859d5ec202f05ec2e36984b7cb708fc3", "patch": "@@ -635,7 +635,10 @@ package body Impunit is\n     (\"a-stoufi\", T),  -- Ada.Strings.Text_Output.Files\n     (\"a-stobfi\", T),  -- Ada.Strings.Text_Output.Basic_Files\n     (\"a-stobbu\", T),  -- Ada.Strings.Text_Output.Bit_Buckets\n-    (\"a-stoufo\", T)   -- Ada.Strings.Text_Output.Formatting\n+    (\"a-stoufo\", T),  -- Ada.Strings.Text_Output.Formatting\n+    (\"a-strsto\", T),  -- Ada.Streams.Storage\n+    (\"a-ststbo\", T),  -- Ada.Streams.Storage.Bounded\n+    (\"a-ststun\", T)   -- Ada.Streams.Storage.Unbounded\n    );\n \n    -----------------------"}, {"sha": "1e2814b6baf9ca97e79086fa7d6fdbdc23aeebe1", "filename": "gcc/ada/libgnat/a-strsto.ads", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2Flibgnat%2Fa-strsto.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2Flibgnat%2Fa-strsto.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strsto.ads?ref=41e52aa5859d5ec202f05ec2e36984b7cb708fc3", "patch": "@@ -0,0 +1,45 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT LIBRARY COMPONENTS                          --\n+--                                                                          --\n+--                   A D A . S T R E A M S . S T O R A G E                  --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2020, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Ada_2020;\n+package Ada.Streams.Storage with Pure is\n+\n+   type Storage_Stream_Type is abstract new Root_Stream_Type with private;\n+\n+   function Element_Count\n+     (Stream : Storage_Stream_Type) return Stream_Element_Count is abstract;\n+\n+   procedure Clear (Stream : in out Storage_Stream_Type) is abstract;\n+\n+private\n+   type Storage_Stream_Type is abstract new Root_Stream_Type with null record;\n+end Ada.Streams.Storage;"}, {"sha": "3b31acc0a5d5e342570a116282801be68d5ad3a4", "filename": "gcc/ada/libgnat/a-ststbo.adb", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2Flibgnat%2Fa-ststbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2Flibgnat%2Fa-ststbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ststbo.adb?ref=41e52aa5859d5ec202f05ec2e36984b7cb708fc3", "patch": "@@ -0,0 +1,115 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT LIBRARY COMPONENTS                          --\n+--                                                                          --\n+--           A D A . S T R E A M S . S T O R A G E . B O U N D E D          --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--             Copyright (C) 2020, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Ada_2020;\n+package body Ada.Streams.Storage.Bounded is\n+\n+   ----------\n+   -- Read --\n+   ----------\n+\n+   overriding procedure Read\n+     (Stream : in out Stream_Type; Item : out Stream_Element_Array;\n+      Last   :    out Stream_Element_Offset)\n+   is\n+      EA : Stream_Element_Array renames\n+        Stream.Elements (1 .. Element_Count (Stream));\n+   begin\n+      if Item'Length = 0 then\n+         Last := Item'First - 1;\n+\n+      --  If the entire content of the stream fits in Item, then copy it and\n+      --  clear the stream. This is likely the usual case.\n+\n+      elsif Element_Count (Stream) <= Item'Length then\n+         Last := Item'First + Element_Count (Stream) - 1;\n+         Item (Item'First .. Last) := EA;\n+         Clear (Stream);\n+\n+      --  Otherwise, copy as much into Item as will fit. Then slide the\n+      --  remaining part of the stream down, and compute the new Count.\n+      --  We expect this to be the unusual case, so the cost of copying\n+      --  the remaining part probably doesn't matter.\n+\n+      else\n+         Last := Item'Last;\n+\n+         declare\n+            New_Count : constant Stream_Element_Count :=\n+              Element_Count (Stream) - Item'Length;\n+         begin\n+            Item := EA (1 .. Item'Length);\n+            EA (1 .. New_Count) :=\n+              EA (Element_Count (Stream) - New_Count + 1 ..\n+                  Element_Count (Stream));\n+            Stream.Count := New_Count;\n+         end;\n+      end if;\n+   end Read;\n+\n+   -----------\n+   -- Write --\n+   -----------\n+\n+   overriding procedure Write\n+     (Stream : in out Stream_Type; Item : Stream_Element_Array)\n+   is\n+      pragma Assert\n+        (Element_Count (Stream) + Item'Length <= Stream.Max_Elements\n+           or else (raise Constraint_Error));\n+      --  That is a precondition in the RM\n+\n+      New_Count : constant Stream_Element_Count :=\n+        Element_Count (Stream) + Item'Length;\n+   begin\n+      Stream.Elements (Element_Count (Stream) + 1 .. New_Count) := Item;\n+      Stream.Count := New_Count;\n+   end Write;\n+\n+   -------------------\n+   -- Element_Count --\n+   -------------------\n+\n+   overriding function Element_Count\n+     (Stream : Stream_Type) return Stream_Element_Count\n+   is\n+   begin\n+      return Stream.Count;\n+   end Element_Count;\n+\n+   -----------\n+   -- Clear --\n+   -----------\n+\n+   overriding procedure Clear (Stream : in out Stream_Type)\n+   is\n+   begin\n+      Stream.Count := 0;\n+   end Clear;\n+\n+end Ada.Streams.Storage.Bounded;"}, {"sha": "1ce6d90f808e700aaf5f89e57733ec9ab4d996c3", "filename": "gcc/ada/libgnat/a-ststbo.ads", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2Flibgnat%2Fa-ststbo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2Flibgnat%2Fa-ststbo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ststbo.ads?ref=41e52aa5859d5ec202f05ec2e36984b7cb708fc3", "patch": "@@ -0,0 +1,74 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT LIBRARY COMPONENTS                          --\n+--                                                                          --\n+--           A D A . S T R E A M S . S T O R A G E . B O U N D E D          --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2020, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Ada_2020;\n+package Ada.Streams.Storage.Bounded with Pure is\n+\n+   type Stream_Type (Max_Elements : Stream_Element_Count) is\n+     new Storage_Stream_Type with private with\n+      Default_Initial_Condition => Element_Count (Stream_Type) = 0;\n+\n+   overriding procedure Read\n+     (Stream : in out Stream_Type; Item : out Stream_Element_Array;\n+      Last   :    out Stream_Element_Offset)\n+       with Post =>\n+         (declare\n+            Num_Read : constant Stream_Element_Count :=\n+              Stream_Element_Count'Min\n+                (Element_Count (Stream)'Old, Item'Length);\n+          begin\n+            Last = Num_Read + Item'First - 1\n+              and\n+            Element_Count (Stream) =\n+              Element_Count (Stream)'Old - Num_Read);\n+\n+   overriding procedure Write\n+     (Stream : in out Stream_Type; Item : Stream_Element_Array) with\n+      Post => Element_Count (Stream) =\n+      Element_Count (Stream)'Old + Item'Length;\n+\n+   overriding function Element_Count\n+     (Stream : Stream_Type) return Stream_Element_Count with\n+      Post => Element_Count'Result <= Stream.Max_Elements;\n+\n+   overriding procedure Clear (Stream : in out Stream_Type) with\n+      Post => Element_Count (Stream) = 0;\n+\n+private\n+\n+   type Stream_Type (Max_Elements : Stream_Element_Count) is\n+     new Storage_Stream_Type with record\n+      Count : Stream_Element_Count := 0;\n+      Elements : Stream_Element_Array (1 .. Max_Elements);\n+   end record;\n+\n+end Ada.Streams.Storage.Bounded;"}, {"sha": "f2f433be61c8dba1ce2143a6db5cc88b86691f80", "filename": "gcc/ada/libgnat/a-ststun.adb", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2Flibgnat%2Fa-ststun.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2Flibgnat%2Fa-ststun.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ststun.adb?ref=41e52aa5859d5ec202f05ec2e36984b7cb708fc3", "patch": "@@ -0,0 +1,151 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT LIBRARY COMPONENTS                          --\n+--                                                                          --\n+--         A D A . S T R E A M S . S T O R A G E . U N B O U N D E D        --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--             Copyright (C) 2020, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Ada_2020;\n+with Ada.Unchecked_Deallocation;\n+package body Ada.Streams.Storage.Unbounded is\n+\n+   procedure Free is new Ada.Unchecked_Deallocation\n+     (Elements_Type, Elements_Access);\n+\n+   --------------\n+   -- Finalize --\n+   --------------\n+\n+   overriding procedure Finalize (X : in out Controlled_Elements_Access) is\n+   begin\n+      if X.A /= Empty_Elements'Access then\n+         Free (X.A);\n+      end if;\n+   end Finalize;\n+\n+   ----------\n+   -- Read --\n+   ----------\n+\n+   overriding procedure Read\n+     (Stream : in out Stream_Type; Item : out Stream_Element_Array;\n+      Last   :    out Stream_Element_Offset)\n+   is\n+      EA : Stream_Element_Array renames\n+        Stream.Elements.A.EA (1 .. Element_Count (Stream));\n+   begin\n+      if Item'Length = 0 then\n+         Last := Item'First - 1;\n+\n+      --  If the entire content of the stream fits in Item, then copy it and\n+      --  clear the stream. This is likely the usual case.\n+\n+      elsif Element_Count (Stream) <= Item'Length then\n+         Last := Item'First + Element_Count (Stream) - 1;\n+         Item (Item'First .. Last) := EA;\n+         Clear (Stream);\n+\n+      --  Otherwise, copy as much into Item as will fit. Then slide the\n+      --  remaining part of the stream down, and compute the new Count.\n+      --  We expect this to be the unusual case, so the cost of copying\n+      --  the remaining part probably doesn't matter.\n+\n+      else\n+         Last := Item'Last;\n+\n+         declare\n+            New_Count : constant Stream_Element_Count :=\n+              Element_Count (Stream) - Item'Length;\n+         begin\n+            Item := EA (1 .. Item'Length);\n+            EA (1 .. New_Count) :=\n+              EA (Element_Count (Stream) - New_Count + 1 ..\n+                  Element_Count (Stream));\n+            Stream.Count := New_Count;\n+         end;\n+      end if;\n+   end Read;\n+\n+   -----------\n+   -- Write --\n+   -----------\n+\n+   overriding procedure Write\n+     (Stream : in out Stream_Type; Item : Stream_Element_Array)\n+   is\n+      New_Count : constant Stream_Element_Count :=\n+        Element_Count (Stream) + Item'Length;\n+   begin\n+      --  Check whether we need to grow the array. If so, then if the Stream is\n+      --  empty, allocate a goodly amount. Otherwise double the length, for\n+      --  amortized efficiency. In any case, we need to make sure it's at least\n+      --  big enough for New_Count.\n+\n+      if New_Count > Stream.Elements.A.Last then\n+         declare\n+            New_Last : Stream_Element_Index :=\n+              (if Stream.Elements.A.Last = 0 then 2**10 -- goodly amount\n+               else Stream.Elements.A.Last * 2);\n+            Old_Elements : Elements_Access := Stream.Elements.A;\n+         begin\n+            if New_Last < New_Count then\n+               New_Last := New_Count;\n+            end if;\n+\n+            Stream.Elements.A := new Elements_Type (Last => New_Last);\n+\n+            if Old_Elements /= Empty_Elements'Access then\n+               Stream.Elements.A.EA (Old_Elements.EA'Range) := Old_Elements.EA;\n+               Free (Old_Elements);\n+            end if;\n+         end;\n+      end if;\n+\n+      Stream.Elements.A.EA (Element_Count (Stream) + 1 .. New_Count) := Item;\n+      Stream.Count := New_Count;\n+   end Write;\n+\n+   -------------------\n+   -- Element_Count --\n+   -------------------\n+\n+   overriding function Element_Count\n+     (Stream : Stream_Type) return Stream_Element_Count\n+   is\n+   begin\n+      return Stream.Count;\n+   end Element_Count;\n+\n+   -----------\n+   -- Clear --\n+   -----------\n+\n+   overriding procedure Clear (Stream : in out Stream_Type) is\n+   begin\n+      Stream.Count := 0;\n+      --  We don't free Stream.Elements here, because we want to reuse it if\n+      --  there are more Write calls.\n+   end Clear;\n+\n+end Ada.Streams.Storage.Unbounded;"}, {"sha": "2f01fa097cf07910be581e47e6e7edbd85615c57", "filename": "gcc/ada/libgnat/a-ststun.ads", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2Flibgnat%2Fa-ststun.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e52aa5859d5ec202f05ec2e36984b7cb708fc3/gcc%2Fada%2Flibgnat%2Fa-ststun.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ststun.ads?ref=41e52aa5859d5ec202f05ec2e36984b7cb708fc3", "patch": "@@ -0,0 +1,91 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT LIBRARY COMPONENTS                          --\n+--                                                                          --\n+--         A D A . S T R E A M S . S T O R A G E . U N B O U N D E D        --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2020, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the  contents of the part following the private keyword. --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+pragma Ada_2020;\n+private with Ada.Finalization;\n+package Ada.Streams.Storage.Unbounded with Preelaborate is\n+\n+   type Stream_Type is new Storage_Stream_Type with private with\n+      Default_Initial_Condition => Element_Count (Stream_Type) = 0;\n+\n+   overriding procedure Read\n+     (Stream : in out Stream_Type; Item : out Stream_Element_Array;\n+      Last   :    out Stream_Element_Offset)\n+       with Post =>\n+         (declare\n+            Num_Read : constant Stream_Element_Count :=\n+              Stream_Element_Count'Min\n+                (Element_Count (Stream)'Old, Item'Length);\n+          begin\n+            Last = Num_Read + Item'First - 1\n+              and\n+            Element_Count (Stream) =\n+              Element_Count (Stream)'Old - Num_Read);\n+\n+   overriding procedure Write\n+     (Stream : in out Stream_Type; Item : Stream_Element_Array) with\n+      Post => Element_Count (Stream) =\n+      Element_Count (Stream)'Old + Item'Length;\n+\n+   overriding function Element_Count\n+     (Stream : Stream_Type) return Stream_Element_Count;\n+\n+   overriding procedure Clear (Stream : in out Stream_Type) with\n+      Post => Element_Count (Stream) = 0;\n+\n+private\n+\n+   subtype Stream_Element_Index is Stream_Element_Count\n+     range 1 .. Stream_Element_Count'Last;\n+\n+   type Elements_Type (Last : Stream_Element_Count) is limited record\n+      EA : Stream_Element_Array (1 .. Last);\n+   end record;\n+\n+   Empty_Elements : aliased Elements_Type := (Last => 0, EA => (others => <>));\n+\n+   type Elements_Access is access all Elements_Type;\n+\n+   type Controlled_Elements_Access is\n+     new Finalization.Limited_Controlled with record\n+      A : Elements_Access;\n+   end record;\n+\n+   overriding procedure Finalize (X : in out Controlled_Elements_Access);\n+\n+   type Stream_Type is new Storage_Stream_Type with record\n+      Elements : Controlled_Elements_Access :=\n+        (Finalization.Limited_Controlled with A => Empty_Elements'Access);\n+      Count : Stream_Element_Count := 0;\n+   end record;\n+\n+end Ada.Streams.Storage.Unbounded;"}]}