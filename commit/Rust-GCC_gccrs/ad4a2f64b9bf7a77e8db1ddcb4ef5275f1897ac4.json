{"sha": "ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ0YTJmNjRiOWJmN2E3N2U4ZGIxZGRjYjRlZjUyNzVmMTg5N2FjNA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-08-29T13:08:55Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-08-29T13:08:55Z"}, "message": "re PR fortran/33215 (Bind(C): Bugs with empty \"name=\": Creates wrong result and accepts invalid)\n\n2007-08-29  Christopher D. Rickett  <crickett@lanl.gov>\n\n\tPR fortran/33215\n\t* decl.c (build_sym): Pass number of identifiers on line to\n\tset_binding_label.\n\t(set_binding_label): Verify that only one identifier given if\n\tNAME= specified, even if the given binding label has zero length.\n\t(gfc_match_bind_c): Remove declaration for has_name_equals because\n\tit hides the static global one that is needed.\n\n2007-08-29  Christopher D. Rickett  <crickett@lanl.gov>\n\n\tPR fortran/33215\n\t* gfortran.dg/binding_label_tests_15.f03: New test case.\n\t* gfortran.dg/binding_label_tests_16.f03: Ditto.\n\nFrom-SVN: r127898", "tree": {"sha": "13f2de74f89f6097aa95ac4bda69a46d83215792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13f2de74f89f6097aa95ac4bda69a46d83215792"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4/comments", "author": null, "committer": null, "parents": [{"sha": "4376b7cf2b7d906c1952205ec3242e689f84f671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4376b7cf2b7d906c1952205ec3242e689f84f671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4376b7cf2b7d906c1952205ec3242e689f84f671"}], "stats": {"total": 74, "additions": 62, "deletions": 12}, "files": [{"sha": "7e5a7d8885ef8312b58ec124989245e9c04fc948", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4", "patch": "@@ -1,3 +1,13 @@\n+2007-08-28  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/33215\n+\t* decl.c (build_sym): Pass number of identifiers on line to\n+\tset_binding_label.\n+\t(set_binding_label): Verify that only one identifier given if\n+\tNAME= specified, even if the given binding label has zero length.\n+\t(gfc_match_bind_c): Remove declaration for has_name_equals because\n+\tit hides the static global one that is needed.\n+\n 2007-08-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* trans-array.c (gfc_grow_array): Use gfc_call_realloc."}, {"sha": "8b3566204c6389f5f01ef8cdf6df1b85112acdc3", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4", "patch": "@@ -980,9 +980,10 @@ build_sym (const char *name, gfc_charlen *cl,\n     {\n       if (sym->binding_label[0] == '\\0')\n         {\n-          /* Here, we're not checking the numIdents (the last param).\n-             This could be an error we're letting slip through!  */\n-          if (set_binding_label (sym->binding_label, sym->name, 1) == FAILURE)\n+\t  /* Set the binding label and verify that if a NAME= was specified\n+\t     then only one identifier was in the entity-decl-list.  */\n+\t  if (set_binding_label (sym->binding_label, sym->name,\n+\t\t\t\t num_idents_on_line) == FAILURE)\n             return FAILURE;\n         }\n     }\n@@ -2847,15 +2848,15 @@ match_attr_spec (void)\n try\n set_binding_label (char *dest_label, const char *sym_name, int num_idents)\n {\n-  if (curr_binding_label[0] != '\\0')\n+  if (num_idents > 1 && has_name_equals)\n     {\n-      if (num_idents > 1 || num_idents_on_line > 1)\n-        {\n-          gfc_error (\"Multiple identifiers provided with \"\n-                     \"single NAME= specifier at %C\");\n-          return FAILURE;\n-        }\n+      gfc_error (\"Multiple identifiers provided with \"\n+\t\t \"single NAME= specifier at %C\");\n+      return FAILURE;\n+    }\n \n+  if (curr_binding_label[0] != '\\0')\n+    {\n       /* Binding label given; store in temp holder til have sym.  */\n       strncpy (dest_label, curr_binding_label,\n                strlen (curr_binding_label) + 1);\n@@ -4084,7 +4085,6 @@ gfc_match_bind_c (gfc_symbol *sym)\n   char binding_label[GFC_MAX_SYMBOL_LEN + 1];\n   match double_quote;\n   match single_quote;\n-  int has_name_equals = 0;\n \n   /* Initialize the flag that specifies whether we encountered a NAME= \n      specifier or not.  */"}, {"sha": "03edfa14b3ec31ec3f88706d628946c411058fe5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4", "patch": "@@ -1,3 +1,9 @@\n+2007-08-29  Christopher D. Rickett  <crickett@lanl.gov>\n+\n+\tPR fortran/33215\n+\t* gfortran.dg/binding_label_tests_15.f03: New test case.\n+\t* gfortran.dg/binding_label_tests_16.f03: Ditto.\n+\n 2007-08-29  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* gfortran.dg/alloc_comp_basics_1.f90: Update check.\n@@ -61,7 +67,7 @@\n \tPR c++/32596\n \t* g++.dg/ext/visibility/anon5.C: New test.\n \n-2007-07-28  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+2007-08-28  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \t* gfortran.dg/gamma_4.f90: Fix large-real kind selection.\n "}, {"sha": "b1b4b5805ba425ca6b75a2b5828822e1bfec7209", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_15.f03", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_15.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_15.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_15.f03?ref=ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+! Verify that an error is correctly reported if multiple identifiers are given\n+! with a bind(c) statement that has a NAME= specifier.\n+module m\n+  use iso_c_binding\n+  implicit none\n+  integer(c_int), bind(C, name=\"\") :: a,b ! { dg-error \"Multiple identifiers\" }\n+  integer(c_int), bind(C, name=\"bob\") :: c,d ! { dg-error \"Multiple identifiers\" }\n+  integer(c_int) :: e,f \n+  bind(c, name=\"foo\") :: e,f ! { dg-error \"Multiple identifiers\" }\n+end module m\n+"}, {"sha": "6b8f1f89bac8e869da12620be4917c7934e4c60e", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_16.f03", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_16.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_16.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_16.f03?ref=ad4a2f64b9bf7a77e8db1ddcb4ef5275f1897ac4", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run }\n+! Verify that the variables 'a' in both modules don't collide.\n+module m\n+  use iso_c_binding\n+  implicit none\n+  integer(c_int), save, bind(C, name=\"\") :: a = 5\n+end module m\n+\n+module n\n+  use iso_c_binding\n+  implicit none\n+  integer(c_int), save, bind(C,name=\"\") :: a = -5\n+end module n\n+\n+program prog\n+use m\n+use n, b=>a\n+implicit none\n+  print *, a, b\n+  if (a /= 5 .or. b /= -5) call abort()\n+end program prog\n+! { dg-final { cleanup-modules \"m n\" } }"}]}