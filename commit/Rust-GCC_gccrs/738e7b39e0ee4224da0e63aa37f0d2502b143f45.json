{"sha": "738e7b39e0ee4224da0e63aa37f0d2502b143f45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM4ZTdiMzllMGVlNDIyNGRhMGU2M2FhMzdmMGQyNTAyYjE0M2Y0NQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2003-10-10T22:44:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-10-10T22:44:41Z"}, "message": "ia64.c (ia64_vms_init_libfuncs): New function.\n\n\t* config/ia64/ia64.c (ia64_vms_init_libfuncs): New function.\n\t(ia64_output_function_prologue): Only write .prologue if --with-gnu-as.\n\t(ia64_initialize_trampoline): If not using GAS, declare trampoline\n\tas global.\n\t* config/ia64/ia64.h (ASM_APP_ON, ASM_APP_OFF): Add vers for not GAS.\n\t(ASM_OUTPUT_DEBUG_LABEL): Likewise.\n\nFrom-SVN: r72316", "tree": {"sha": "ac5c2af90dcd22ff2194bf6aed5553db07cdf854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac5c2af90dcd22ff2194bf6aed5553db07cdf854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/738e7b39e0ee4224da0e63aa37f0d2502b143f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/738e7b39e0ee4224da0e63aa37f0d2502b143f45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/738e7b39e0ee4224da0e63aa37f0d2502b143f45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/738e7b39e0ee4224da0e63aa37f0d2502b143f45/comments", "author": null, "committer": null, "parents": [{"sha": "737749725f22606c78615b44ffece353cda2e4ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/737749725f22606c78615b44ffece353cda2e4ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/737749725f22606c78615b44ffece353cda2e4ad"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "cf0a5f8be52797e830c47ac170bbdabe0aad2b2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/738e7b39e0ee4224da0e63aa37f0d2502b143f45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/738e7b39e0ee4224da0e63aa37f0d2502b143f45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=738e7b39e0ee4224da0e63aa37f0d2502b143f45", "patch": "@@ -46,16 +46,22 @@\n \t* config/ip2k/ip2k.h, config/iq2000/iq2000.h:\n \tNo need to define BITS_PER_UNIT.\n \n+2003-10-10  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* config/ia64/ia64.c (ia64_vms_init_libfuncs): New function.\n+\t(ia64_output_function_prologue): Only write .prologue if --with-gnu-as.\n+\t(ia64_initialize_trampoline): If not using GAS, declare trampoline\n+\tas global.\n+\t* config/ia64/ia64.h (ASM_APP_ON, ASM_APP_OFF): Add vers for not GAS.\n+\t(ASM_OUTPUT_DEBUG_LABEL): Likewise.\n+\t\n \t* stor-layout.c (compute_record_mode): Don't force BLKmode if\n \tfield is zero-length BLKmode.\n \t* expr.c (expand_expr, case COMPONENT_REF): Handle case of BLKmode\n \tzero-size references.\n \n \t* combine.c (distribute_links): Properly test for REG being set.\n \n-2003-10-10  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n-\n \t* config/alpha/alpha.c (alpha_expand_block_mode): Don't use\n \tgen_lowpart and company except for REG.\n "}, {"sha": "32e3c8b8e7bbcc56b8c70597a3ffe257fe94a5b6", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/738e7b39e0ee4224da0e63aa37f0d2502b143f45/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/738e7b39e0ee4224da0e63aa37f0d2502b143f45/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=738e7b39e0ee4224da0e63aa37f0d2502b143f45", "patch": "@@ -255,6 +255,8 @@ static void ia64_hpux_file_end (void)\n      ATTRIBUTE_UNUSED;\n static void ia64_hpux_init_libfuncs (void)\n      ATTRIBUTE_UNUSED;\n+static void ia64_vms_init_libfuncs (void)\n+     ATTRIBUTE_UNUSED;\n \n static tree ia64_handle_model_attribute (tree *, tree, tree, int, bool *);\n static void ia64_encode_section_info (tree, rtx, int);\n@@ -3132,7 +3134,7 @@ ia64_output_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \tgrsave = current_frame_info.reg_save_pr;\n     }\n \n-  if (mask)\n+  if (mask && TARGET_GNU_AS)\n     fprintf (file, \"\\t.prologue %d, %d\\n\", mask,\n \t     ia64_dbx_register_number (grsave));\n   else\n@@ -3215,6 +3217,19 @@ ia64_initialize_trampoline (rtx addr, rtx fnaddr, rtx static_chain)\n {\n   rtx addr_reg, eight = GEN_INT (8);\n \n+  /* The Intel assembler requires that the global __ia64_trampoline symbol\n+     be declared explicitly */\n+  if (!TARGET_GNU_AS)\n+    {\n+      static bool declared_ia64_trampoline = false;\n+\n+      if (!declared_ia64_trampoline)\n+\t{\n+\t  declared_ia64_trampoline = true;\n+\t  fputs (\"\\t.global\\t__ia64_trampoline\\n\", asm_out_file);\n+\t}\n+    }\n+\n   /* Load up our iterator.  */\n   addr_reg = gen_reg_rtx (Pmode);\n   emit_move_insn (addr_reg, addr);\n@@ -8307,6 +8322,7 @@ ia64_hpux_file_end (void)\n }\n \n /* Rename all the TFmode libfuncs using the HPUX conventions.  */\n+\n static void\n ia64_hpux_init_libfuncs (void)\n {\n@@ -8339,6 +8355,21 @@ ia64_hpux_init_libfuncs (void)\n   set_conv_libfunc (sfloat_optab, TFmode, SImode, \"_U_Qfcnvxf_sgl_to_quad\");\n   set_conv_libfunc (sfloat_optab, TFmode, DImode, \"_U_Qfcnvxf_dbl_to_quad\");\n }\n+\n+/* Rename the division and modulus functions in VMS.  */\n+\n+static void\n+ia64_vms_init_libfuncs (void)\n+{\n+  set_optab_libfunc (sdiv_optab, SImode, \"OTS$DIV_I\");\n+  set_optab_libfunc (sdiv_optab, DImode, \"OTS$DIV_L\");\n+  set_optab_libfunc (udiv_optab, SImode, \"OTS$DIV_UI\");\n+  set_optab_libfunc (udiv_optab, DImode, \"OTS$DIV_UL\");\n+  set_optab_libfunc (smod_optab, SImode, \"OTS$REM_I\");\n+  set_optab_libfunc (smod_optab, DImode, \"OTS$REM_L\");\n+  set_optab_libfunc (umod_optab, SImode, \"OTS$REM_UI\");\n+  set_optab_libfunc (umod_optab, DImode, \"OTS$REM_UL\");\n+}\n \f\n /* Switch to the section to which we should output X.  The only thing\n    special we do here is to honor small data.  */"}, {"sha": "2cff151336e7a95253209179f7e809ea325b5111", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/738e7b39e0ee4224da0e63aa37f0d2502b143f45/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/738e7b39e0ee4224da0e63aa37f0d2502b143f45/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=738e7b39e0ee4224da0e63aa37f0d2502b143f45", "patch": "@@ -1745,17 +1745,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* A C string constant for text to be output before each `asm' statement or\n    group of consecutive ones.  */\n \n-/* ??? This won't work with the Intel assembler, because it does not accept\n-   # as a comment start character.  However, //APP does not work in gas, so we\n-   can't use that either.  Same problem for ASM_APP_OFF below.  */\n-\n-#define ASM_APP_ON \"#APP\\n\"\n+#define ASM_APP_ON (TARGET_GNU_AS ? \"#APP\\n\" : \"//APP\\n\")\n \n /* A C string constant for text to be output after each `asm' statement or\n    group of consecutive ones.  */\n \n-#define ASM_APP_OFF \"#NO_APP\\n\"\n-\n+#define ASM_APP_OFF (TARGET_GNU_AS ? \"#NO_APP\\n\" : \"//NO_APP\\n\")\n \f\n /* Output of Uninitialized Variables.  */\n \n@@ -2133,7 +2128,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    add brackets around the label.  */\n \n #define ASM_OUTPUT_DEBUG_LABEL(FILE, PREFIX, NUM) \\\n-  fprintf (FILE, \"[.%s%d:]\\n\", PREFIX, NUM)\n+  fprintf (FILE, TARGET_GNU_AS ? \"[.%s%d:]\\n\" : \".%s%d:\\n\", PREFIX, NUM)\n \n /* Use section-relative relocations for debugging offsets.  Unlike other\n    targets that fake this by putting the section VMA at 0, IA-64 has"}]}