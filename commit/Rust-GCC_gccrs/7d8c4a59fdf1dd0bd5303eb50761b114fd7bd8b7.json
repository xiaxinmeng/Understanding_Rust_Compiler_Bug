{"sha": "7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "node_id": "C_kwDOANBUbNoAKDdkOGM0YTU5ZmRmMWRkMGJkNTMwM2ViNTA3NjFiMTE0ZmQ3YmQ4Yjc", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-03T07:40:24Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-10T11:27:05Z"}, "message": "RISC-V: Add vxor.vx C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vxor_vx_mu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_mu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_mu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_mu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_mu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_mu_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tu_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tum_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tum_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tum_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tum_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tum_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tum_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tumu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tumu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tumu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tumu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tumu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vxor_vx_tumu_rv64-3.C: New test.", "tree": {"sha": "507a75071b8944268a80323ea41dc74bb5802af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/507a75071b8944268a80323ea41dc74bb5802af8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce4b00f393b2c470b2c18e7fda1286d71408e41c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4b00f393b2c470b2c18e7fda1286d71408e41c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce4b00f393b2c470b2c18e7fda1286d71408e41c"}], "stats": {"total": 10422, "additions": 10422, "deletions": 0}, "files": [{"sha": "bfeac5bdcd9cb0905693ec91ca86058c1a468edb", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_mu_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv32-1.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "fe89c8321369a9c7d9ba80192172677beb50e4bd", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_mu_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv32-2.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "3e8556a0c38b981a3eb394db11d3811462daeeb4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_mu_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv32-3.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "7ea0054a01c3a92b4d027b51a0737f48e9cbc18b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_mu_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv64-1.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "1f8167b120932d1b941e336a45ddfca5ff302255", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_mu_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv64-2.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "67fb085c9033e6a72afa769a60cc39db6e764803", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_mu_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_mu_rv64-3.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "f0c3914300edafd6f16778ac5eb385a10e839a32", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_rv32-1.C", "status": "added", "additions": 572, "deletions": 0, "changes": 572, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv32-1.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,572 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vxor(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "11f8c28f9100257321af9558ed7351235ab93236", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_rv32-2.C", "status": "added", "additions": 572, "deletions": 0, "changes": 572, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv32-2.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,572 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vxor(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "c9911f6b1da2b201aefd2f1ae309997697a61f48", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_rv32-3.C", "status": "added", "additions": 572, "deletions": 0, "changes": 572, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv32-3.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,572 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vxor(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "e5e985d0ab5d01dfc60cd613f29a3a208174217a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_rv64-1.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv64-1.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vxor(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "720b3bd729ee648056d72ca1c8d6c3bb39bcede9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_rv64-2.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv64-2.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vxor(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "600654d0e64963e8a7adf61db7c20e300ae29805", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_rv64-3.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_rv64-3.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor(vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor(vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor(vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor(vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor(vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor(vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor(vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor(vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor(vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor(vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor(vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor(vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor(vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor(vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor(vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor(vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor(vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor(vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor(vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor(vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor(vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor(vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor(vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor(vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor(vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor(vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor(vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor(vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor(vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor(vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor(vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor(vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor(vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor(vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor(vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor(vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor(vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor(vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor(vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor(vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor(vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor(vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor(vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor(vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(op1,op2,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vxor(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "e8eb726443a3cc6be51493f614986797f1fff6bd", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tu_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv32-1.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "f11cd7d0afdaed7564518dfeaf26bed9bc8cab23", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tu_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv32-2.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "fbaf37221627f9243e9ee04e5fb5f65b23f4f4fe", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tu_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv32-3.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "779f5563a76c1da0beaf9e54a24f3bd341323b99", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tu_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv64-1.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */"}, {"sha": "9378d6bcbf0cc02cab09a1daf6128c0d1cdeefae", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tu_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv64-2.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */"}, {"sha": "b079cfbad6a19929c20d9ac3a7b6fa08e31617f8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tu_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tu_rv64-3.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tu(vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tu(vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tu(vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tu(vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tu(vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tu(vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tu(vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tu(vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tu(vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tu(vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tu(vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tu(vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tu(vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tu(vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tu(vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tu(vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tu(vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tu(vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tu(vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tu(vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tu(vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tu(vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tu(vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tu(vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tu(vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tu(vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tu(vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tu(vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tu(vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tu(vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tu(vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tu(vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tu(vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tu(vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tu(vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tu(vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tu(vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tu(vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tu(vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tu(vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tu(vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tu(vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tu(vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tu(vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tu(merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */"}, {"sha": "fe1a7b860015bce977cb74d080ba4e53f7e80886", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tum_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv32-1.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "cd2d88468eff9028df26196c8aa51dfd716204b8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tum_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv32-2.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "ee880f7e4e278c1b9855a1aa64a1267d1f8b5d3d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tum_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv32-3.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "75d0adf9345097f32ccd141b687566bf3b90ff79", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tum_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv64-1.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "c2cec33b7d35df801f7ea808d5d349783a514ac8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tum_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv64-2.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "011dd37c36652976da8d7c3af95cf6382767eed4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tum_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tum_rv64-3.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tum(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "f695b485272b482a1969ba6c90b5242f18a29b54", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tumu_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv32-1.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "907dd02995608cd77f76901bf77fddadb128aebc", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tumu_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv32-2.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "236f48a4fba16500ce1ca9ba1fe583ccaf1a8262", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tumu_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv32-3.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vxor\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "863cd2a96ae9a0b492adef8b83f7582e762853b4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tumu_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv64-1.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "d065cfeb2c07ab2676c0d58bd7b9ffb6e68f43c6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tumu_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv64-2.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "d37ae47e833d848289b932214c8eecbc87a4cb1c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vxor_vx_tumu_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvxor_vx_tumu_rv64-3.C?ref=7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vxor_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vxor_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vxor_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vxor_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vxor_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vxor_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vxor_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vxor_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vxor_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vxor_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vxor_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vxor_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vxor_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vxor_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vxor_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vxor_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vxor_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vxor_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vxor_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vxor_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vxor_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vxor_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vxor_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vxor_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vxor_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vxor_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vxor_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vxor_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vxor_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vxor_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vxor_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vxor_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vxor_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vxor_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vxor_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vxor_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vxor_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vxor_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vxor_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vxor_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vxor_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vxor_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vxor_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vxor_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vxor_tumu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vxor\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}]}