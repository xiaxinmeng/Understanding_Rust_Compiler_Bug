{"sha": "dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ2NmI4ZTgxZTMxODJiNTIwZWE1ZGU0MWUxZjQ1YmE4ZWFlZGY1ZA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-06-30T22:30:34Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-06-30T22:30:34Z"}, "message": "call.c (build_over_call), [...]): Call check_function_arguments instead of check_function_format.\n\ncp:\n\t* call.c (build_over_call), typeck.c (build_function_call): Call\n\tcheck_function_arguments instead of check_function_format.\n\ntestsuite:\n\t* g++.dg/warn/nonnull1.C: New test.\n\nFrom-SVN: r83937", "tree": {"sha": "aee24b2a12a5ea311774eaf196ad657bc620dd50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aee24b2a12a5ea311774eaf196ad657bc620dd50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0671a8a0b97ad91dcdaf7f0aaba0233ddaa5ac9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0671a8a0b97ad91dcdaf7f0aaba0233ddaa5ac9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0671a8a0b97ad91dcdaf7f0aaba0233ddaa5ac9d"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "4d15664a4b372f6ab720e8a6fc4d410b086f7298", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d", "patch": "@@ -1,3 +1,8 @@\n+2004-06-30  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* call.c (build_over_call), typeck.c (build_function_call): Call\n+\tcheck_function_arguments instead of check_function_format.\n+\n 2004-06-30  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* call.c (build_over_call), typeck.c (build_function_call): Update"}, {"sha": "76f0291a5a1b94099bc93e494cbe038762737299", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d", "patch": "@@ -4723,9 +4723,8 @@ build_over_call (struct z_candidate *cand, int flags)\n \n   converted_args = nreverse (converted_args);\n \n-  if (warn_format)\n-    check_function_format (TYPE_ATTRIBUTES (TREE_TYPE (fn)),\n-\t\t\t   converted_args);\n+  check_function_arguments (TYPE_ATTRIBUTES (TREE_TYPE (fn)),\n+\t\t\t    converted_args);\n \n   /* Avoid actually calling copy constructors and copy assignment operators,\n      if possible.  */"}, {"sha": "d099980e486aa841e2f2dcfeca07910d507e4fad", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d", "patch": "@@ -2483,10 +2483,10 @@ build_function_call (tree function, tree params)\n   if (coerced_params == error_mark_node)\n     return error_mark_node;\n \n-  /* Check for errors in format strings.  */\n+  /* Check for errors in format strings and inappropriately\n+     null parameters.  */\n \n-  if (warn_format)\n-    check_function_format (TYPE_ATTRIBUTES (fntype), coerced_params);\n+  check_function_arguments (TYPE_ATTRIBUTES (fntype), coerced_params);\n \n   return build_cxx_call (function, coerced_params);\n }"}, {"sha": "b08ec7d199d21ed01403b84d2e3c892606db0b89", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d", "patch": "@@ -1,3 +1,7 @@\n+2004-06-30  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* g++.dg/warn/nonnull1.C: New test.\n+\n 2004-06-30  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/compat/compat-common.h: Wrap up CINT in"}, {"sha": "46de7e9312c64f7b87668c109925e1c592e57ada", "filename": "gcc/testsuite/g++.dg/warn/nonnull1.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnonnull1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnonnull1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fnonnull1.C?ref=dd66b8e81e3182b520ea5de41e1f45ba8eaedf5d", "patch": "@@ -0,0 +1,16 @@\n+// Test that \"nonnull\" attribute works for C++.\n+// Origin: Joseph Myers <jsm@polyomino.org.uk>\n+// { dg-do compile }\n+// { dg-options \"-Wall\" }\n+\n+// The \"nonnull\" attribute is thoroughly tested for C, so here we\n+// simply test that it works at all, as at one point the relevant\n+// checking code was only called for C.\n+\n+extern void f (char *) __attribute__((nonnull));\n+\n+void\n+g ()\n+{\n+  f (0); // { dg-warning \"null\" \"null argument\" }\n+}"}]}