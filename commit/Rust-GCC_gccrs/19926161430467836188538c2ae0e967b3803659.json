{"sha": "19926161430467836188538c2ae0e967b3803659", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk5MjYxNjE0MzA0Njc4MzYxODg1MzhjMmFlMGU5NjdiMzgwMzY1OQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2014-07-29T13:48:38Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2014-07-29T13:48:38Z"}, "message": "libgcov.h: Move renaming of entry points to lib gcov specific portion.\n\n\tlibgcc/\n\t* libgcov.h: Move renaming of entry points to lib gcov specific\n\tportion.\n\t(gcov_do_dump): New rename.\n\t(gcov_rewrite): Remove inline, make HIDDEN.\n\t* libgcov-driver.c (gcov_clear, gcov_exit): Remove declarations.\n\t(gcov_exit_compute_summary): Rename to ...\n\t(compute_summary): ... here.  Add LIST argument.\n\t(gcov_exit_merge_gcda): Rename to ...\n\t(merge_one_data): ... here.\n\t(gcov_exit_write_gcda): Rename to ...\n\t(write_one_data): ... here.\n\t(gcov_exit_merge_summary): Rename to ...\n\t(merge_summary): Add RUN_COUNTED argument.\n\t(gcov_exit_dump_gcov): Rename to ...\n\t(dump_one_gcov): Add RUN_COUNTED argument.\n\t(gcov_do_dump): New function, broken out of ...\n\t(gcov_exit): ... here.  Call it.\n\n\tgcc/\n\t* gcov-io.c (gcov_var): Make hidden.\n\t* gcov-tool.c (gcov_list, gcov_exit): Remove declarations.\n\t(gcov_do_dump): Declare.\n\t(gcov_output_files): Call gcov_do_dump, not gcov_exit).\n\nFrom-SVN: r213188", "tree": {"sha": "a6a115ff7783aca4e43d8fcf658630bb5047a46c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6a115ff7783aca4e43d8fcf658630bb5047a46c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19926161430467836188538c2ae0e967b3803659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19926161430467836188538c2ae0e967b3803659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19926161430467836188538c2ae0e967b3803659", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19926161430467836188538c2ae0e967b3803659/comments", "author": null, "committer": null, "parents": [{"sha": "3808a9c7296e110a2ba0b40248445f043547b826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3808a9c7296e110a2ba0b40248445f043547b826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3808a9c7296e110a2ba0b40248445f043547b826"}], "stats": {"total": 173, "additions": 101, "deletions": 72}, "files": [{"sha": "64191a7990f566a09c9153018e806a440d1fcb4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19926161430467836188538c2ae0e967b3803659/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19926161430467836188538c2ae0e967b3803659/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19926161430467836188538c2ae0e967b3803659", "patch": "@@ -1,3 +1,10 @@\n+2014-07-29  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcov-io.c (gcov_var): Make hidden.\n+\t* gcov-tool.c (gcov_list, gcov_exit): Remove declarations.\n+\t(gcov_do_dump): Declare.\n+\t(gcov_output_files): Call gcov_do_dump, not gcov_exit).\n+\n 2014-07-29  Martin Jambor  <mjambor@suse.cz>\n \n \t* tree-sra.c (sra_modify_constructor_assign): Change type of stmt\n@@ -25,8 +32,8 @@\n \t(walk_ssa_copies): Break out from ...\n \t(get_polymorphic_call_info): ... here; set speculative context\n \tbefore giving up.\n-\t* ipa-prop.c (ipa_write_indirect_edge_info, ipa_read_indirect_edge_info):\n-\tStream speculative context.\n+\t* ipa-prop.c (ipa_write_indirect_edge_info,\n+\tipa_read_indirect_edge_info): Stream speculative context.\n \t* ipa-utils.h (ipa_polymorphic_call_context): Add speculative info\n \t(SPECULATIVE_OFFSET, SPECULATIVE_OUTER_TYPE,\n \tSPECULATIVE_MAYBE_DERIVED_TYPE).\n@@ -41,7 +48,7 @@\n \n 2014-07-28  Trevor Saunders  <tsaunders@mozilla.com>\n \n-\t* config/i386/i386.c (ix86_return_in_memory): replace one\n+\t* config/i386/i386.c (ix86_return_in_memory): Replace one\n \tATTRIBUTE_UNUSED where the attribute can actually sometimes be unused.\n \n 2014-07-28  Marek Polacek  <polacek@redhat.com>"}, {"sha": "75169463c3b44b9279cf8ad19bad889b516396a2", "filename": "gcc/gcov-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19926161430467836188538c2ae0e967b3803659/gcc%2Fgcov-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19926161430467836188538c2ae0e967b3803659/gcc%2Fgcov-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.c?ref=19926161430467836188538c2ae0e967b3803659", "patch": "@@ -39,7 +39,7 @@ static void gcov_allocate (unsigned);\n /* Optimum number of gcov_unsigned_t's read from or written to disk.  */\n #define GCOV_BLOCK_SIZE (1 << 10)\n \n-GCOV_LINKAGE struct gcov_var\n+GCOV_LINKAGE ATTRIBUTE_HIDDEN struct gcov_var\n {\n   FILE *file;\n   gcov_position_t start;\t/* Position of first byte of block */"}, {"sha": "61e82a3dcb1d15e8061cfcabed3a40762e82a36e", "filename": "gcc/gcov-tool.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19926161430467836188538c2ae0e967b3803659/gcc%2Fgcov-tool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19926161430467836188538c2ae0e967b3803659/gcc%2Fgcov-tool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-tool.c?ref=19926161430467836188538c2ae0e967b3803659", "patch": "@@ -38,13 +38,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <ftw.h>\n #include <getopt.h>\n \n-extern struct gcov_info *gcov_list;\n-\n extern int gcov_profile_merge (struct gcov_info*, struct gcov_info*, int, int);\n extern int gcov_profile_normalize (struct gcov_info*, gcov_type);\n extern int gcov_profile_scale (struct gcov_info*, float, int, int);\n extern struct gcov_info* gcov_read_profile_dir (const char*, int);\n-extern void gcov_exit (void);\n+extern void gcov_do_dump (struct gcov_info *, int);\n extern void gcov_set_verbose (void);\n \n /* Set to verbose output mode.  */\n@@ -110,8 +108,7 @@ gcov_output_files (const char *out, struct gcov_info *profile)\n   if (ret)\n     fatal_error (\"Cannot change directory to %s\", out);\n \n-  gcov_list = profile;\n-  gcov_exit ();\n+  gcov_do_dump (profile, 0);\n \n   ret = chdir (pwd);\n   if (ret)"}, {"sha": "88fb09f25cc328f734acc6a4c359428e6d8018e3", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19926161430467836188538c2ae0e967b3803659/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19926161430467836188538c2ae0e967b3803659/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=19926161430467836188538c2ae0e967b3803659", "patch": "@@ -1,3 +1,23 @@\n+2014-07-29  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libgcov.h: Move renaming of entry points to lib gcov specific\n+\tportion.\n+\t(gcov_do_dump): New rename.\n+\t(gcov_rewrite): Remove inline, make HIDDEN.\n+\t* libgcov-driver.c (gcov_clear, gcov_exit): Remove declarations.\n+\t(gcov_exit_compute_summary): Rename to ...\n+\t(compute_summary): ... here.  Add LIST argument.\n+\t(gcov_exit_merge_gcda): Rename to ...\n+\t(merge_one_data): ... here.\n+\t(gcov_exit_write_gcda): Rename to ...\n+\t(write_one_data): ... here.\n+\t(gcov_exit_merge_summary): Rename to ...\n+\t(merge_summary): Add RUN_COUNTED argument.\n+\t(gcov_exit_dump_gcov): Rename to ...\n+\t(dump_one_gcov): Add RUN_COUNTED argument.\n+\t(gcov_do_dump): New function, broken out of ...\n+\t(gcov_exit): ... here.  Call it.\n+\n 2014-07-27  Anthony Green  <green@moxielogic.com>\n \n \t* config.host: Add moxiebox configuration suppport."}, {"sha": "8c2510f1b8b7d75a4a95b8dd2b8b71148689f4ce", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 48, "deletions": 44, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19926161430467836188538c2ae0e967b3803659/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19926161430467836188538c2ae0e967b3803659/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=19926161430467836188538c2ae0e967b3803659", "patch": "@@ -48,10 +48,6 @@ static int gcov_error (const char *, ...);\n \n #include \"gcov-io.c\"\n \n-/* The following functions can be called from outside of this file.  */\n-extern void gcov_clear (void) ATTRIBUTE_HIDDEN;\n-extern void gcov_exit (void) ATTRIBUTE_HIDDEN;\n-\n struct gcov_fn_buffer\n {\n   struct gcov_fn_buffer *next;\n@@ -293,8 +289,8 @@ static int run_accounted = 0;\n    Also determines the longest filename length of the info files.  */\n \n static gcov_unsigned_t\n-gcov_exit_compute_summary (struct gcov_summary *this_prg,\n-\t\t\t   size_t *max_length)\n+compute_summary (struct gcov_info *list, struct gcov_summary *this_prg,\n+\t\t size_t *max_length)\n {\n   struct gcov_info *gi_ptr;\n   const struct gcov_fn_info *gfi_ptr;\n@@ -308,7 +304,7 @@ gcov_exit_compute_summary (struct gcov_summary *this_prg,\n   /* Find the totals for this execution.  */\n   memset (this_prg, 0, sizeof (*this_prg));\n   *max_length = 0;\n-  for (gi_ptr = gcov_list; gi_ptr; gi_ptr = gi_ptr->next)\n+  for (gi_ptr = list; gi_ptr; gi_ptr = gi_ptr->next)\n     {\n       size_t len = strlen (gi_ptr->filename);\n       if (len > *max_length)\n@@ -362,13 +358,13 @@ gcov_exit_compute_summary (struct gcov_summary *this_prg,\n    Return -1 on error. In this case, caller will goto read_fatal.  */\n \n static int\n-gcov_exit_merge_gcda (const char *filename,\n-\t\t      struct gcov_info *gi_ptr,\n-                      struct gcov_summary *prg_p,\n-                      struct gcov_summary *this_prg,\n-                      gcov_position_t *summary_pos_p,\n-                      gcov_position_t *eof_pos_p,\n-\t\t      gcov_unsigned_t crc32)\n+merge_one_data (const char *filename,\n+\t\tstruct gcov_info *gi_ptr,\n+\t\tstruct gcov_summary *prg_p,\n+\t\tstruct gcov_summary *this_prg,\n+\t\tgcov_position_t *summary_pos_p,\n+\t\tgcov_position_t *eof_pos_p,\n+\t\tgcov_unsigned_t crc32)\n {\n   gcov_unsigned_t tag, length;\n   unsigned t_ix;\n@@ -512,10 +508,10 @@ gcov_exit_merge_gcda (const char *filename,\n    We will write the file starting from SUMMAY_POS.  */\n \n static void\n-gcov_exit_write_gcda (const struct gcov_info *gi_ptr,\n-                      const struct gcov_summary *prg_p,\n-                      const gcov_position_t eof_pos,\n-                      const gcov_position_t summary_pos)\n+write_one_data (const struct gcov_info *gi_ptr,\n+\t\tconst struct gcov_summary *prg_p,\n+\t\tconst gcov_position_t eof_pos,\n+\t\tconst gcov_position_t summary_pos)\n {\n   unsigned f_ix;\n   struct gcov_summary_buffer *next_sum_buffer;\n@@ -607,10 +603,10 @@ gcov_exit_write_gcda (const struct gcov_info *gi_ptr,\n    Return -1 on error. Return 0 on success.  */\n \n static int\n-gcov_exit_merge_summary (const char *filename,\n-\t\t\t const struct gcov_info *gi_ptr, struct gcov_summary *prg,\n-                         struct gcov_summary *this_prg, gcov_unsigned_t crc32,\n-\t\t\t struct gcov_summary *all_prg __attribute__ ((unused)))\n+merge_summary (const char *filename, int run_counted,\n+\t       const struct gcov_info *gi_ptr, struct gcov_summary *prg,\n+\t       struct gcov_summary *this_prg, gcov_unsigned_t crc32,\n+\t       struct gcov_summary *all_prg __attribute__ ((unused)))\n {\n   struct gcov_ctr_summary *cs_prg, *cs_tprg;\n   unsigned t_ix;\n@@ -629,7 +625,7 @@ gcov_exit_merge_summary (const char *filename,\n         {\n \t  int first = !cs_prg->runs;\n \n-\t  if (!run_accounted)\n+\t  if (!run_counted)\n \t    cs_prg->runs++;\n           if (first)\n             cs_prg->num = cs_tprg->num;\n@@ -691,9 +687,10 @@ gcov_exit_merge_summary (const char *filename,\n    summaries separate.  */\n \n static void\n-gcov_exit_dump_gcov (struct gcov_info *gi_ptr, struct gcov_filename *gf,\n-\t\t     gcov_unsigned_t crc32, struct gcov_summary *all_prg,\n-                     struct gcov_summary *this_prg)\n+dump_one_gcov (struct gcov_info *gi_ptr, struct gcov_filename *gf,\n+\t       unsigned run_counted,\n+\t       gcov_unsigned_t crc32, struct gcov_summary *all_prg,\n+\t       struct gcov_summary *this_prg)\n {\n   struct gcov_summary prg; /* summary for this object over all program.  */\n   int error;\n@@ -717,8 +714,8 @@ gcov_exit_dump_gcov (struct gcov_info *gi_ptr, struct gcov_filename *gf,\n           gcov_error (\"profiling:%s:Not a gcov data file\\n\", gf->filename);\n           goto read_fatal;\n         }\n-      error = gcov_exit_merge_gcda (gf->filename, gi_ptr, &prg, this_prg,\n-\t\t\t\t    &summary_pos, &eof_pos, crc32);\n+      error = merge_one_data (gf->filename, gi_ptr, &prg, this_prg,\n+\t\t\t      &summary_pos, &eof_pos, crc32);\n       if (error == -1)\n         goto read_fatal;\n     }\n@@ -731,12 +728,12 @@ gcov_exit_dump_gcov (struct gcov_info *gi_ptr, struct gcov_filename *gf,\n       summary_pos = eof_pos;\n     }\n \n-  error = gcov_exit_merge_summary (gf->filename, gi_ptr, &prg, this_prg,\n-\t\t\t\t   crc32, all_prg);\n+  error = merge_summary (gf->filename, run_counted, gi_ptr, &prg, this_prg,\n+\t\t\t crc32, all_prg);\n   if (error == -1)\n     goto read_fatal;\n \n-  gcov_exit_write_gcda (gi_ptr, &prg, eof_pos, summary_pos);\n+  write_one_data (gi_ptr, &prg, eof_pos, summary_pos);\n   /* fall through */\n \n read_fatal:;\n@@ -755,37 +752,44 @@ read_fatal:;\n    summary and then traverses gcov_list list and dumps the gcov_info\n    objects one by one.  */\n \n-void\n-gcov_exit (void)\n+void ATTRIBUTE_HIDDEN\n+gcov_do_dump (struct gcov_info *list, int run_counted)\n {\n   struct gcov_info *gi_ptr;\n   struct gcov_filename gf;\n   gcov_unsigned_t crc32;\n   struct gcov_summary all_prg;\n   struct gcov_summary this_prg;\n \n-  /* Prevent the counters from being dumped a second time on exit when the\n-     application already wrote out the profile using __gcov_dump().  */\n-  if (gcov_dump_complete)\n-    return;\n-\n-  gcov_dump_complete = 1;\n-\n-  crc32 = gcov_exit_compute_summary (&this_prg, &gf.max_length);\n+  crc32 = compute_summary (list, &this_prg, &gf.max_length);\n \n   allocate_filename_struct (&gf);\n #if !GCOV_LOCKED\n   memset (&all_prg, 0, sizeof (all_prg));\n #endif\n \n   /* Now merge each file.  */\n-  for (gi_ptr = gcov_list; gi_ptr; gi_ptr = gi_ptr->next)\n-    gcov_exit_dump_gcov (gi_ptr, &gf, crc32, &all_prg, &this_prg);\n-  run_accounted = 1;\n+  for (gi_ptr = list; gi_ptr; gi_ptr = gi_ptr->next)\n+    dump_one_gcov (gi_ptr, &gf, run_counted, crc32, &all_prg, &this_prg);\n \n   free (gf.filename);\n }\n \n+void\n+gcov_exit (void)\n+{\n+  /* Prevent the counters from being dumped a second time on exit when the\n+     application already wrote out the profile using __gcov_dump().  */\n+  if (gcov_dump_complete)\n+    return;\n+\n+  gcov_dump_complete = 1;\n+\n+  gcov_do_dump (gcov_list, run_accounted);\n+  \n+  run_accounted = 1;\n+}\n+\n /* Reset all counters to zero.  */\n \n void"}, {"sha": "618a4d5b5d987c6125eab3b8aedb0873fd1486a1", "filename": "libgcc/libgcov.h", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19926161430467836188538c2ae0e967b3803659/libgcc%2Flibgcov.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19926161430467836188538c2ae0e967b3803659/libgcc%2Flibgcov.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov.h?ref=19926161430467836188538c2ae0e967b3803659", "patch": "@@ -83,6 +83,25 @@ typedef unsigned gcov_type_unsigned __attribute__ ((mode (QI)));\n #define GCOV_LOCKED 0\n #endif\n \n+/* In libgcov we need these functions to be extern, so prefix them with\n+   __gcov.  In libgcov they must also be hidden so that the instance in\n+   the executable is not also used in a DSO.  */\n+#define gcov_var __gcov_var\n+#define gcov_open __gcov_open\n+#define gcov_close __gcov_close\n+#define gcov_write_tag_length __gcov_write_tag_length\n+#define gcov_position __gcov_position\n+#define gcov_seek __gcov_seek\n+#define gcov_rewrite __gcov_rewrite\n+#define gcov_is_error __gcov_is_error\n+#define gcov_write_unsigned __gcov_write_unsigned\n+#define gcov_write_counter __gcov_write_counter\n+#define gcov_write_summary __gcov_write_summary\n+#define gcov_read_unsigned __gcov_read_unsigned\n+#define gcov_read_counter __gcov_read_counter\n+#define gcov_read_summary __gcov_read_summary\n+#define gcov_do_dump __gcov_do_dump\n+\n #else /* IN_GCOV_TOOL */\n /* About the host.  */\n /* This path will be compiled for the host and linked into\n@@ -126,24 +145,6 @@ extern struct gcov_info *gcov_list;\n #endif\n #endif\n \n-/* In libgcov we need these functions to be extern, so prefix them with\n-   __gcov.  In libgcov they must also be hidden so that the instance in\n-   the executable is not also used in a DSO.  */\n-#define gcov_var __gcov_var\n-#define gcov_open __gcov_open\n-#define gcov_close __gcov_close\n-#define gcov_write_tag_length __gcov_write_tag_length\n-#define gcov_position __gcov_position\n-#define gcov_seek __gcov_seek\n-#define gcov_rewrite __gcov_rewrite\n-#define gcov_is_error __gcov_is_error\n-#define gcov_write_unsigned __gcov_write_unsigned\n-#define gcov_write_counter __gcov_write_counter\n-#define gcov_write_summary __gcov_write_summary\n-#define gcov_read_unsigned __gcov_read_unsigned\n-#define gcov_read_counter __gcov_read_counter\n-#define gcov_read_summary __gcov_read_summary\n-\n /* Poison these, so they don't accidentally slip in.  */\n #pragma GCC poison gcov_write_string gcov_write_tag gcov_write_length\n #pragma GCC poison gcov_time gcov_magic\n@@ -265,7 +266,7 @@ GCOV_LINKAGE void gcov_write_summary (gcov_unsigned_t /*tag*/,\n                                       const struct gcov_summary *)\n     ATTRIBUTE_HIDDEN;\n GCOV_LINKAGE void gcov_seek (gcov_position_t /*position*/) ATTRIBUTE_HIDDEN;\n-GCOV_LINKAGE inline void gcov_rewrite (void);\n+GCOV_LINKAGE void gcov_rewrite (void) ATTRIBUTE_HIDDEN;\n \n /* \"Counts\" stored in gcda files can be a real counter value, or\n    an target address. When differentiate these two types because"}]}