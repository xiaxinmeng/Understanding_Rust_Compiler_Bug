{"sha": "87deeba6090a658a2861173e875d2d7c8f776c4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdkZWViYTYwOTBhNjU4YTI4NjExNzNlODc1ZDJkN2M4Zjc3NmM0ZQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2008-11-14T12:02:17Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2008-11-14T12:02:17Z"}, "message": "pr37514.c: Remove.\n\n\t* gcc.target/sh/pr37514.c: Remove.\n\nFrom-SVN: r141856", "tree": {"sha": "505cba68c717618eb71a9b1e3e41fd940ec144d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/505cba68c717618eb71a9b1e3e41fd940ec144d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87deeba6090a658a2861173e875d2d7c8f776c4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87deeba6090a658a2861173e875d2d7c8f776c4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87deeba6090a658a2861173e875d2d7c8f776c4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87deeba6090a658a2861173e875d2d7c8f776c4e/comments", "author": null, "committer": null, "parents": [{"sha": "11cc65d49a89837127a781bf59733c91a969a848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11cc65d49a89837127a781bf59733c91a969a848", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11cc65d49a89837127a781bf59733c91a969a848"}], "stats": {"total": 65, "additions": 0, "deletions": 65}, "files": [{"sha": "fa68ebeed4c841f312365150c2790404d3c158ac", "filename": "gcc/testsuite/gcc.target/sh/pr37514.c", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11cc65d49a89837127a781bf59733c91a969a848/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr37514.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11cc65d49a89837127a781bf59733c91a969a848/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr37514.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr37514.c?ref=11cc65d49a89837127a781bf59733c91a969a848", "patch": "@@ -1,65 +0,0 @@\n-/* This is essentially gcc.c-torture/execute/20021120-1.c run with\n-   -O3 -fomit-frame-pointer -fira-share-spill-slots.  */\n-/* { dg-do run { target \"sh*-*-*\" } } */\n-/* { dg-options \"-O3 -fomit-frame-pointer -fira-share-spill-slots\" } */\n-\n-/* Macros to emit \"L Nxx R\" for each octal number xx between 000 and 037.  */\n-#define OP1(L, N, R, I, J) L N##I##J R\n-#define OP2(L, N, R, I) \\\n-    OP1(L, N, R, 0, I), OP1(L, N, R, 1, I), \\\n-    OP1(L, N, R, 2, I), OP1(L, N, R, 3, I)\n-#define OP(L, N, R) \\\n-    OP2(L, N, R, 0), OP2(L, N, R, 1), OP2(L, N, R, 2), OP2(L, N, R, 3), \\\n-    OP2(L, N, R, 4), OP2(L, N, R, 5), OP2(L, N, R, 6), OP2(L, N, R, 7)\n-\n-/* Declare 32 unique variables with prefix N.  */\n-#define DECLARE(N) OP (, N,)\n-\n-/* Copy 32 variables with prefix N from the array at ADDR.\n-   Leave ADDR pointing to the end of the array.  */\n-#define COPYIN(N, ADDR) OP (, N, = *(ADDR++))\n-\n-/* Likewise, but copy the other way.  */\n-#define COPYOUT(N, ADDR) OP (*(ADDR++) =, N,)\n-\n-/* Add the contents of the array at ADDR to 32 variables with prefix N.\n-   Leave ADDR pointing to the end of the array.  */\n-#define ADD(N, ADDR) OP (, N, += *(ADDR++))\n-\n-volatile double gd[32];\n-volatile float gf[32];\n-\n-extern void abort (void);\n-\n-static void foo (int n)\n-{\n-  double DECLARE(d);\n-  float DECLARE(f);\n-  volatile double *pd;\n-  volatile float *pf;\n-  int i;\n-\n-  pd = gd; COPYIN (d, pd);\n-  for (i = 0; i < n; i++)\n-    {\n-      pf = gf; COPYIN (f, pf);\n-      pd = gd; ADD (d, pd);\n-      pd = gd; ADD (d, pd);\n-      pd = gd; ADD (d, pd);\n-      pf = gf; COPYOUT (f, pf);\n-    }\n-  pd = gd; COPYOUT (d, pd);\n-}\n-\n-int main ()\n-{\n-  int i;\n-\n-  for (i = 0; i < 32; i++)\n-    gd[i] = i, gf[i] = i;\n-  foo (1);\n-  for (i = 0; i < 32; i++)\n-    if (gd[i] != i * 4 || gf[i] != i)\n-      abort ();\n-  return 0;\n-}"}]}