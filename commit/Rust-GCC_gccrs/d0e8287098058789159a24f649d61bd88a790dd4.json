{"sha": "d0e8287098058789159a24f649d61bd88a790dd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBlODI4NzA5ODA1ODc4OTE1OWEyNGY2NDlkNjFiZDg4YTc5MGRkNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-01-17T12:07:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-01-17T12:07:58Z"}, "message": "ia64.md (prologue_use): New.\n\n\t* config/ia64/ia64.md (prologue_use): New.\n\t* config/ia64/ia64.c (ia64_expand_prologue): Use\n\tgen_prologue_use instead of gen_rtx_USE.\n\t(group_barrier_needed_p): Handle CODE_FOR_prologue_use the same way\n\tas CODE_FOR_pred_rel_mutex.\n\t(ia64_sched_reorder2): Likewise.\n\n\t* gcc.c-torture/compile/20020116-1.c: New test.\n\nFrom-SVN: r48946", "tree": {"sha": "008147a2a9b23216042d95c1ef782685b8f0a91f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/008147a2a9b23216042d95c1ef782685b8f0a91f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0e8287098058789159a24f649d61bd88a790dd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e8287098058789159a24f649d61bd88a790dd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e8287098058789159a24f649d61bd88a790dd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e8287098058789159a24f649d61bd88a790dd4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02c361a4722172970a81ff47d0b4cb95d605aefe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02c361a4722172970a81ff47d0b4cb95d605aefe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02c361a4722172970a81ff47d0b4cb95d605aefe"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "e21e363f1ce14350c5059939822c64b63ba7f0d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e8287098058789159a24f649d61bd88a790dd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e8287098058789159a24f649d61bd88a790dd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0e8287098058789159a24f649d61bd88a790dd4", "patch": "@@ -1,3 +1,12 @@\n+2002-01-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/ia64/ia64.md (prologue_use): New.\n+\t* config/ia64/ia64.c (ia64_expand_prologue): Use\n+\tgen_prologue_use instead of gen_rtx_USE.\n+\t(group_barrier_needed_p): Handle CODE_FOR_prologue_use the same way\n+\tas CODE_FOR_pred_rel_mutex.\n+\t(ia64_sched_reorder2): Likewise.\n+\n 2002-01-16  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/r3900.h: Reformat."}, {"sha": "1f36cb03543497bbb4ad864a467245658bbaafec", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e8287098058789159a24f649d61bd88a790dd4/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e8287098058789159a24f649d61bd88a790dd4/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=d0e8287098058789159a24f649d61bd88a790dd4", "patch": "@@ -2137,7 +2137,7 @@ ia64_expand_prologue ()\n       /* Even if we're not going to generate an epilogue, we still\n \t need to save the register so that EH works.  */\n       if (! epilogue_p && current_frame_info.reg_save_ar_unat)\n-\temit_insn (gen_rtx_USE (VOIDmode, ar_unat_save_reg));\n+\temit_insn (gen_prologue_use (ar_unat_save_reg));\n     }\n   else\n     ar_unat_save_reg = NULL_RTX;\n@@ -2178,7 +2178,7 @@ ia64_expand_prologue ()\n \t  /* Even if we're not going to generate an epilogue, we still\n \t     need to save the register so that EH works.  */\n \t  if (! epilogue_p)\n-\t    emit_insn (gen_rtx_USE (VOIDmode, alt_reg));\n+\t    emit_insn (gen_prologue_use (alt_reg));\n \t}\n       else\n \t{\n@@ -2222,7 +2222,7 @@ ia64_expand_prologue ()\n \t  /* Even if we're not going to generate an epilogue, we still\n \t     need to save the register so that EH works.  */\n \t  if (! epilogue_p)\n-\t    emit_insn (gen_rtx_USE (VOIDmode, alt_reg));\n+\t    emit_insn (gen_prologue_use (alt_reg));\n \t}\n       else\n \t{\n@@ -2262,7 +2262,7 @@ ia64_expand_prologue ()\n \t  /* Even if we're not going to generate an epilogue, we still\n \t     need to save the register so that EH works.  */\n \t  if (! epilogue_p)\n-\t    emit_insn (gen_rtx_USE (VOIDmode, alt_reg));\n+\t    emit_insn (gen_prologue_use (alt_reg));\n \t}\n       else\n \t{\n@@ -4776,6 +4776,7 @@ group_barrier_needed_p (insn)\n \n \t  /* Doesn't generate code.  */\n \tcase CODE_FOR_pred_rel_mutex:\n+\tcase CODE_FOR_prologue_use:\n \t  return 0;\n \n \tdefault:\n@@ -6393,7 +6394,8 @@ ia64_sched_reorder2 (dump, sched_verbose, ready, pn_ready, clock_var)\n \n \t  /* Ignore cycle displays and .pred.rel.mutex.  */\n \t  if (insn_code == CODE_FOR_cycle_display\n-\t      || insn_code == CODE_FOR_pred_rel_mutex)\n+\t      || insn_code == CODE_FOR_pred_rel_mutex\n+\t      || insn_code == CODE_FOR_prologue_use)\n \t    continue;\n \n \t  if (insn_code == CODE_FOR_insn_group_barrier)"}, {"sha": "c88e8b0270ad7a30f9978cfd369c19118b51566d", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e8287098058789159a24f649d61bd88a790dd4/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e8287098058789159a24f649d61bd88a790dd4/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=d0e8287098058789159a24f649d61bd88a790dd4", "patch": "@@ -67,6 +67,7 @@\n ;;\t22      bundle selector\n ;;\t23      cycle display\n ;;      24      addp4\n+;;\t25\tprologue_use\n ;;\n ;; unspec_volatile:\n ;;\t0\talloc\n@@ -5302,3 +5303,12 @@\n   \"addp4 %0 = 0,%1\"\n   [(set_attr \"itanium_class\" \"ialu\")])\n \n+;;\n+;; As USE insns aren't meaningful after reload, this is used instead\n+;; to prevent deleting instructions setting registers for EH handling\n+(define_insn \"prologue_use\"\n+  [(unspec:DI [(match_operand:DI 0 \"register_operand\" \"\")] 25)]\n+  \"\"\n+  \"// %0 needed for EH\"\n+  [(set_attr \"itanium_class\" \"ignore\")\n+   (set_attr \"predicable\" \"no\")])"}, {"sha": "f3bd7830104823d1ddb38ba3f9756e8e66a83d76", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e8287098058789159a24f649d61bd88a790dd4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e8287098058789159a24f649d61bd88a790dd4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0e8287098058789159a24f649d61bd88a790dd4", "patch": "@@ -1,3 +1,7 @@\n+2002-01-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/compile/20020116-1.c: New test.\n+\n 2002-01-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/20020116-2.c: New test."}, {"sha": "6c023edcabe7813fb0af5af07fdb2d8da5f10631", "filename": "gcc/testsuite/gcc.c-torture/compile/20020116-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e8287098058789159a24f649d61bd88a790dd4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020116-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e8287098058789159a24f649d61bd88a790dd4/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020116-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20020116-1.c?ref=d0e8287098058789159a24f649d61bd88a790dd4", "patch": "@@ -0,0 +1,28 @@\n+void noret (void) __attribute__ ((noreturn));\n+int foo (int, char **);\n+char *a, *b;\n+int d;\n+\n+int\n+main (int argc, char **argv)\n+{\n+  register int c;\n+\n+  d = 1;\n+  while ((c = foo (argc, argv)) != -1)\n+    switch (c) {\n+    case 's':\n+    case 'c':\n+    case 'f':\n+      a = b;\n+      break;\n+    case 'v':\n+      d = 1;\n+      break;\n+    case 'V':\n+      d = 0;\n+      break;\n+    }\n+  noret ();\n+  return 0;\n+}"}]}