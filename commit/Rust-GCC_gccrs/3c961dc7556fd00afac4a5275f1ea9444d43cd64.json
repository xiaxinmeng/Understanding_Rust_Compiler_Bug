{"sha": "3c961dc7556fd00afac4a5275f1ea9444d43cd64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M5NjFkYzc1NTZmZDAwYWZhYzRhNTI3NWYxZWE5NDQ0ZDQzY2Q2NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-06-10T19:31:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-06-10T19:31:49Z"}, "message": "Reduce constexpr_call memory consumption.\n\n\t* constexpr.c (cxx_bind_parameters_in_call): Use TREE_VEC rather\n\tthan TREE_LIST.\n\t(constexpr_call_hasher::equal, cxx_bind_parameters_in_call)\n\t(cxx_eval_call_expression): Adjust.\n\nFrom-SVN: r272125", "tree": {"sha": "3c0d2a7021422f86cb0f8cd1602c8ac81873174c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c0d2a7021422f86cb0f8cd1602c8ac81873174c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c961dc7556fd00afac4a5275f1ea9444d43cd64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c961dc7556fd00afac4a5275f1ea9444d43cd64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c961dc7556fd00afac4a5275f1ea9444d43cd64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c961dc7556fd00afac4a5275f1ea9444d43cd64/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2f879e1fe5b388fb0fcfee97f97fcbeae765e83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2f879e1fe5b388fb0fcfee97f97fcbeae765e83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2f879e1fe5b388fb0fcfee97f97fcbeae765e83"}], "stats": {"total": 55, "additions": 18, "deletions": 37}, "files": [{"sha": "7a782dc9f0f1a72845f503067b6f38bd0691422c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c961dc7556fd00afac4a5275f1ea9444d43cd64/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c961dc7556fd00afac4a5275f1ea9444d43cd64/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c961dc7556fd00afac4a5275f1ea9444d43cd64", "patch": "@@ -1,3 +1,11 @@\n+2019-06-10  Jason Merrill  <jason@redhat.com>\n+\n+\tReduce constexpr_call memory consumption.\n+\t* constexpr.c (cxx_bind_parameters_in_call): Use TREE_VEC rather\n+\tthan TREE_LIST.\n+\t(constexpr_call_hasher::equal, cxx_bind_parameters_in_call)\n+\t(cxx_eval_call_expression): Adjust.\n+\n 2019-06-10  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_omp_clause_reduction): Don't sorry_at on inscan"}, {"sha": "74752bc72dd1a0b5e1ab35f19869aab24ee4ad58", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 10, "deletions": 37, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c961dc7556fd00afac4a5275f1ea9444d43cd64/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c961dc7556fd00afac4a5275f1ea9444d43cd64/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=3c961dc7556fd00afac4a5275f1ea9444d43cd64", "patch": "@@ -974,12 +974,7 @@ explain_invalid_constexpr_fn (tree fun)\n struct GTY((for_user)) constexpr_call {\n   /* Description of the constexpr function definition.  */\n   constexpr_fundef *fundef;\n-  /* Parameter bindings environment.  A TREE_LIST where each TREE_PURPOSE\n-     is a parameter _DECL and the TREE_VALUE is the value of the parameter.\n-     Note: This arrangement is made to accommodate the use of\n-     iterative_hash_template_arg (see pt.c).  If you change this\n-     representation, also change the hash calculation in\n-     cxx_eval_call_expression.  */\n+  /* Parameter bindings environment.  A TREE_VEC of arguments.  */\n   tree bindings;\n   /* Result of the call.\n        NULL means the call is being evaluated.\n@@ -1069,8 +1064,6 @@ constexpr_call_hasher::hash (constexpr_call *info)\n bool\n constexpr_call_hasher::equal (constexpr_call *lhs, constexpr_call *rhs)\n {\n-  tree lhs_bindings;\n-  tree rhs_bindings;\n   if (lhs == rhs)\n     return true;\n   if (lhs->hash != rhs->hash)\n@@ -1079,19 +1072,7 @@ constexpr_call_hasher::equal (constexpr_call *lhs, constexpr_call *rhs)\n     return false;\n   if (!constexpr_fundef_hasher::equal (lhs->fundef, rhs->fundef))\n     return false;\n-  lhs_bindings = lhs->bindings;\n-  rhs_bindings = rhs->bindings;\n-  while (lhs_bindings != NULL && rhs_bindings != NULL)\n-    {\n-      tree lhs_arg = TREE_VALUE (lhs_bindings);\n-      tree rhs_arg = TREE_VALUE (rhs_bindings);\n-      gcc_assert (same_type_p (TREE_TYPE (lhs_arg), TREE_TYPE (rhs_arg)));\n-      if (!cp_tree_equal (lhs_arg, rhs_arg))\n-        return false;\n-      lhs_bindings = TREE_CHAIN (lhs_bindings);\n-      rhs_bindings = TREE_CHAIN (rhs_bindings);\n-    }\n-  return lhs_bindings == rhs_bindings;\n+  return cp_tree_equal (lhs->bindings, rhs->bindings);\n }\n \n /* Initialize the constexpr call table, if needed.  */\n@@ -1380,7 +1361,10 @@ cxx_bind_parameters_in_call (const constexpr_ctx *ctx, tree t,\n   tree fun = new_call->fundef->decl;\n   tree parms = new_call->fundef->parms;\n   int i;\n-  tree *p = &new_call->bindings;\n+  /* We don't record ellipsis args below.  */\n+  int nparms = list_length (parms);\n+  int nbinds = nargs < nparms ? nargs : nparms;\n+  tree binds = new_call->bindings = make_tree_vec (nbinds);\n   for (i = 0; i < nargs; ++i)\n     {\n       tree x, arg;\n@@ -1417,8 +1401,7 @@ cxx_bind_parameters_in_call (const constexpr_ctx *ctx, tree t,\n \t    arg = adjust_temp_type (type, arg);\n \t  if (!TREE_CONSTANT (arg))\n \t    *non_constant_args = true;\n-\t  *p = build_tree_list (parms, arg);\n-\t  p = &TREE_CHAIN (*p);\n+\t  TREE_VEC_ELT (binds, i) = arg;\n \t}\n       parms = TREE_CHAIN (parms);\n     }\n@@ -1745,14 +1728,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n     void preserve () { do_free = false; }\n     ~free_bindings () {\n       if (do_free)\n-\t{\n-\t  while (bindings)\n-\t    {\n-\t      tree b = bindings;\n-\t      bindings = TREE_CHAIN (bindings);\n-\t      ggc_free (b);\n-\t    }\n-\t}\n+\tggc_free (bindings);\n     }\n   } fb (new_call.bindings);\n \n@@ -1833,15 +1809,12 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t  /* Associate the bindings with the remapped parms.  */\n \t  tree bound = new_call.bindings;\n \t  tree remapped = parms;\n-\t  while (bound)\n+\t  for (int i = 0; i < TREE_VEC_LENGTH (bound); ++i)\n \t    {\n-\t      tree oparm = TREE_PURPOSE (bound);\n-\t      tree arg = TREE_VALUE (bound);\n-\t      gcc_assert (DECL_NAME (remapped) == DECL_NAME (oparm));\n+\t      tree arg = TREE_VEC_ELT (bound, i);\n \t      /* Don't share a CONSTRUCTOR that might be changed.  */\n \t      arg = unshare_constructor (arg);\n \t      ctx->values->put (remapped, arg);\n-\t      bound = TREE_CHAIN (bound);\n \t      remapped = DECL_CHAIN (remapped);\n \t    }\n \t  /* Add the RESULT_DECL to the values map, too.  */"}]}