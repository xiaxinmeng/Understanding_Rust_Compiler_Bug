{"sha": "c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI4MGI3ZWU1YzVkZmNjMWI0YWUyYzAzODk5ODdiN2I2N2VjOGNmOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-04-19T11:56:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-04-19T11:56:07Z"}, "message": "re PR c/89888 (When switch controlling expression is promoted from type narrower than int, GCC does not diagnose identical cases)\n\n\tPR c/89888\n\t* c-common.h (c_add_case_label): Remove orig_type and outside_range_p\n\targuments.\n\t(c_do_switch_warnings): Remove outside_range_p argument.\n\t* c-common.c (check_case_bounds): Removed.\n\t(c_add_case_label): Remove orig_type and outside_range_p arguments.\n\tDon't call check_case_bounds.  Fold low_value as well as high_value.\n\t* c-warn.c (c_do_switch_warnings): Remove outside_range_p argument.\n\tCheck for case labels outside of range of original type here and\n\tadjust them.\nc/\n\t* c-typeck.c (struct c_switch): Remove outside_range_p member.\n\t(c_start_case): Don't clear it.\n\t(do_case): Adjust c_add_case_label caller.\n\t(c_finish_case): Adjust c_do_switch_warnings caller.\ncp/\n\t* decl.c (struct cp_switch): Remove outside_range_p member.\n\t(push_switch): Don't clear it.\n\t(pop_switch): Adjust c_do_switch_warnings caller.\n\t(finish_case_label): Adjust c_add_case_label caller.\ntestsuite/\n\t* c-c++-common/pr89888.c: New test.\n\t* g++.dg/torture/pr40335.C: Change dg-bogus into dg-warning.\n\tDon't expect -Wswitch-unreachable warning.\n\nFrom-SVN: r270455", "tree": {"sha": "ea24706aa8db720c9a1d2368df12936553d81be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea24706aa8db720c9a1d2368df12936553d81be8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4180490732498b1d7e30eb73abb6a7c934b89256", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4180490732498b1d7e30eb73abb6a7c934b89256", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4180490732498b1d7e30eb73abb6a7c934b89256"}], "stats": {"total": 311, "additions": 188, "deletions": 123}, "files": [{"sha": "12d4587bb0d2b9260ddd20a63c76bef4879efe03", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "patch": "@@ -1,3 +1,16 @@\n+2019-04-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/89888\n+\t* c-common.h (c_add_case_label): Remove orig_type and outside_range_p\n+\targuments.\n+\t(c_do_switch_warnings): Remove outside_range_p argument.\n+\t* c-common.c (check_case_bounds): Removed.\n+\t(c_add_case_label): Remove orig_type and outside_range_p arguments.\n+\tDon't call check_case_bounds.  Fold low_value as well as high_value.\n+\t* c-warn.c (c_do_switch_warnings): Remove outside_range_p argument.\n+\tCheck for case labels outside of range of original type here and\n+\tadjust them.\n+\n 2019-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR translation/90041"}, {"sha": "99ca1ad3727cb4c2693ef4befe96ccf561773fe7", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 96, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "patch": "@@ -314,8 +314,6 @@ const struct fname_var_t fname_vars[] =\n struct visibility_flags visibility_options;\n \n static tree check_case_value (location_t, tree);\n-static bool check_case_bounds (location_t, tree, tree, tree *, tree *,\n-\t\t\t       bool *);\n \n \n static void check_nonnull_arg (void *, tree, unsigned HOST_WIDE_INT);\n@@ -2103,86 +2101,6 @@ check_case_value (location_t loc, tree value)\n   return value;\n }\n \f\n-/* See if the case values LOW and HIGH are in the range of the original\n-   type (i.e. before the default conversion to int) of the switch testing\n-   expression.\n-   TYPE is the promoted type of the testing expression, and ORIG_TYPE is\n-   the type before promoting it.  CASE_LOW_P is a pointer to the lower\n-   bound of the case label, and CASE_HIGH_P is the upper bound or NULL\n-   if the case is not a case range.\n-   The caller has to make sure that we are not called with NULL for\n-   CASE_LOW_P (i.e. the default case).  OUTSIDE_RANGE_P says whether there\n-   was a case value that doesn't fit into the range of the ORIG_TYPE.\n-   Returns true if the case label is in range of ORIG_TYPE (saturated or\n-   untouched) or false if the label is out of range.  */\n-\n-static bool\n-check_case_bounds (location_t loc, tree type, tree orig_type,\n-\t\t   tree *case_low_p, tree *case_high_p,\n-\t\t   bool *outside_range_p)\n-{\n-  tree min_value, max_value;\n-  tree case_low = *case_low_p;\n-  tree case_high = case_high_p ? *case_high_p : case_low;\n-\n-  /* If there was a problem with the original type, do nothing.  */\n-  if (orig_type == error_mark_node)\n-    return true;\n-\n-  min_value = TYPE_MIN_VALUE (orig_type);\n-  max_value = TYPE_MAX_VALUE (orig_type);\n-\n-  /* We'll really need integer constants here.  */\n-  case_low = fold (case_low);\n-  case_high = fold (case_high);\n-\n-  /* Case label is less than minimum for type.  */\n-  if (tree_int_cst_compare (case_low, min_value) < 0\n-      && tree_int_cst_compare (case_high, min_value) < 0)\n-    {\n-      warning_at (loc, 0, \"case label value is less than minimum value \"\n-\t\t  \"for type\");\n-      *outside_range_p = true;\n-      return false;\n-    }\n-\n-  /* Case value is greater than maximum for type.  */\n-  if (tree_int_cst_compare (case_low, max_value) > 0\n-      && tree_int_cst_compare (case_high, max_value) > 0)\n-    {\n-      warning_at (loc, 0, \"case label value exceeds maximum value for type\");\n-      *outside_range_p = true;\n-      return false;\n-    }\n-\n-  /* Saturate lower case label value to minimum.  */\n-  if (tree_int_cst_compare (case_high, min_value) >= 0\n-      && tree_int_cst_compare (case_low, min_value) < 0)\n-    {\n-      warning_at (loc, 0, \"lower value in case label range\"\n-\t\t  \" less than minimum value for type\");\n-      *outside_range_p = true;\n-      case_low = min_value;\n-    }\n-\n-  /* Saturate upper case label value to maximum.  */\n-  if (tree_int_cst_compare (case_low, max_value) <= 0\n-      && tree_int_cst_compare (case_high, max_value) > 0)\n-    {\n-      warning_at (loc, 0, \"upper value in case label range\"\n-\t\t  \" exceeds maximum value for type\");\n-      *outside_range_p = true;\n-      case_high = max_value;\n-    }\n-\n-  if (*case_low_p != case_low)\n-    *case_low_p = convert (type, case_low);\n-  if (case_high_p && *case_high_p != case_high)\n-    *case_high_p = convert (type, case_high);\n-\n-  return true;\n-}\n-\f\n /* Return an integer type with BITS bits of precision,\n    that is unsigned if UNSIGNEDP is nonzero, otherwise signed.  */\n \n@@ -4873,13 +4791,12 @@ case_compare (splay_tree_key k1, splay_tree_key k2)\n    usual C/C++ syntax, rather than the GNU case range extension.\n    CASES is a tree containing all the case ranges processed so far;\n    COND is the condition for the switch-statement itself.\n-   OUTSIDE_RANGE_P says whether there was a case value that doesn't\n-   fit into the range of the ORIG_TYPE.  Returns the CASE_LABEL_EXPR\n-   created, or ERROR_MARK_NODE if no CASE_LABEL_EXPR is created.  */\n+   Returns the CASE_LABEL_EXPR created, or ERROR_MARK_NODE if no\n+   CASE_LABEL_EXPR is created.  */\n \n tree\n-c_add_case_label (location_t loc, splay_tree cases, tree cond, tree orig_type,\n-\t\t  tree low_value, tree high_value, bool *outside_range_p)\n+c_add_case_label (location_t loc, splay_tree cases, tree cond,\n+\t\t  tree low_value, tree high_value)\n {\n   tree type;\n   tree label;\n@@ -4913,13 +4830,15 @@ c_add_case_label (location_t loc, splay_tree cases, tree cond, tree orig_type,\n     {\n       low_value = check_case_value (loc, low_value);\n       low_value = convert_and_check (loc, type, low_value);\n+      low_value = fold (low_value);\n       if (low_value == error_mark_node)\n \tgoto error_out;\n     }\n   if (high_value)\n     {\n       high_value = check_case_value (loc, high_value);\n       high_value = convert_and_check (loc, type, high_value);\n+      high_value = fold (high_value);\n       if (high_value == error_mark_node)\n \tgoto error_out;\n     }\n@@ -4935,15 +4854,6 @@ c_add_case_label (location_t loc, splay_tree cases, tree cond, tree orig_type,\n \twarning_at (loc, 0, \"empty range specified\");\n     }\n \n-  /* See if the case is in range of the type of the original testing\n-     expression.  If both low_value and high_value are out of range,\n-     don't insert the case label and return NULL_TREE.  */\n-  if (low_value\n-      && !check_case_bounds (loc, type, orig_type,\n-\t\t\t     &low_value, high_value ? &high_value : NULL,\n-\t\t\t     outside_range_p))\n-    return NULL_TREE;\n-\n   /* Look up the LOW_VALUE in the table of case labels we already\n      have.  */\n   node = splay_tree_lookup (cases, (splay_tree_key) low_value);"}, {"sha": "1cf2cae63951ede2ab14c258c62120655f523829", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "patch": "@@ -988,8 +988,7 @@ extern tree boolean_increment (enum tree_code, tree);\n \n extern int case_compare (splay_tree_key, splay_tree_key);\n \n-extern tree c_add_case_label (location_t, splay_tree, tree, tree, tree, tree,\n-\t\t\t      bool *);\n+extern tree c_add_case_label (location_t, splay_tree, tree, tree, tree);\n extern bool c_switch_covers_all_cases_p (splay_tree, tree);\n \n extern tree build_function_call (location_t, tree, tree);\n@@ -1291,8 +1290,7 @@ extern void sizeof_pointer_memaccess_warning (location_t *, tree,\n \t\t\t\t\t      bool (*) (tree, tree));\n extern void check_main_parameter_types (tree decl);\n extern void warnings_for_convert_and_check (location_t, tree, tree, tree);\n-extern void c_do_switch_warnings (splay_tree, location_t, tree, tree, bool,\n-\t\t\t\t  bool);\n+extern void c_do_switch_warnings (splay_tree, location_t, tree, tree, bool);\n extern void warn_for_omitted_condop (location_t, tree);\n extern bool warn_for_restrict (unsigned, tree *, unsigned);\n extern void warn_for_address_or_pointer_of_packed_member (tree, tree);"}, {"sha": "322cf98eb02b669bd636396097048133db94bd65", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 77, "deletions": 2, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "patch": "@@ -1428,12 +1428,87 @@ match_case_to_enum (splay_tree_node node, void *data)\n \n void\n c_do_switch_warnings (splay_tree cases, location_t switch_location,\n-\t\t      tree type, tree cond, bool bool_cond_p,\n-\t\t      bool outside_range_p)\n+\t\t      tree type, tree cond, bool bool_cond_p)\n {\n   splay_tree_node default_node;\n   splay_tree_node node;\n   tree chain;\n+  bool outside_range_p = false;\n+\n+  if (type != error_mark_node\n+      && type != TREE_TYPE (cond)\n+      && INTEGRAL_TYPE_P (type)\n+      && INTEGRAL_TYPE_P (TREE_TYPE (cond))\n+      && (!tree_int_cst_equal (TYPE_MIN_VALUE (type),\n+\t\t\t       TYPE_MIN_VALUE (TREE_TYPE (cond)))\n+\t  || !tree_int_cst_equal (TYPE_MAX_VALUE (type),\n+\t\t\t\t  TYPE_MAX_VALUE (TREE_TYPE (cond)))))\n+    {\n+      tree min_value = TYPE_MIN_VALUE (type);\n+      tree max_value = TYPE_MAX_VALUE (type);\n+\n+      node = splay_tree_predecessor (cases, (splay_tree_key) min_value);\n+      if (node && node->key)\n+\t{\n+\t  outside_range_p = true;\n+\t  /* There is at least one case smaller than TYPE's minimum value.\n+\t     NODE itself could be still a range overlapping the valid values,\n+\t     but any predecessors thereof except the default case will be\n+\t     completely outside of range.  */\n+\t  if (CASE_HIGH ((tree) node->value)\n+\t      && tree_int_cst_compare (CASE_HIGH ((tree) node->value),\n+\t\t\t\t       min_value) >= 0)\n+\t    {\n+\t      location_t loc = EXPR_LOCATION ((tree) node->value);\n+\t      warning_at (loc, 0, \"lower value in case label range\"\n+\t\t\t\t  \" less than minimum value for type\");\n+\t      CASE_LOW ((tree) node->value) = convert (TREE_TYPE (cond),\n+\t\t\t\t\t\t       min_value);\n+\t      node->key = (splay_tree_key) CASE_LOW ((tree) node->value);\n+\t    }\n+\t  /* All the following ones are completely outside of range.  */\n+\t  do\n+\t    {\n+\t      node = splay_tree_predecessor (cases,\n+\t\t\t\t\t     (splay_tree_key) min_value);\n+\t      if (node == NULL || !node->key)\n+\t\tbreak;\n+\t      location_t loc = EXPR_LOCATION ((tree) node->value);\n+\t      warning_at (loc, 0, \"case label value is less than minimum \"\n+\t\t\t\t  \"value for type\");\n+\t      splay_tree_remove (cases, node->key);\n+\t    }\n+\t  while (1);\n+\t}\n+      node = splay_tree_lookup (cases, (splay_tree_key) max_value);\n+      if (node == NULL)\n+\tnode = splay_tree_predecessor (cases, (splay_tree_key) max_value);\n+      /* Handle a single node that might partially overlap the range.  */\n+      if (node\n+\t  && node->key\n+\t  && CASE_HIGH ((tree) node->value)\n+\t  && tree_int_cst_compare (CASE_HIGH ((tree) node->value),\n+\t\t\t\t   max_value) > 0)\n+\t{\n+\t  location_t loc = EXPR_LOCATION ((tree) node->value);\n+\t  warning_at (loc, 0, \"upper value in case label range\"\n+\t\t\t      \" exceeds maximum value for type\");\n+\t  CASE_HIGH ((tree) node->value)\n+\t    = convert (TREE_TYPE (cond), max_value);\n+\t  outside_range_p = true;\n+\t}\n+      /* And any nodes that are completely outside of the range.  */\n+      while ((node = splay_tree_successor (cases,\n+\t\t\t\t\t   (splay_tree_key) max_value))\n+\t     != NULL)\n+\t{\n+\t  location_t loc = EXPR_LOCATION ((tree) node->value);\n+\t  warning_at (loc, 0,\n+\t\t      \"case label value exceeds maximum value for type\");\n+\t  splay_tree_remove (cases, node->key);\n+\t  outside_range_p = true;\n+\t}\n+    }\n \n   if (!warn_switch && !warn_switch_enum && !warn_switch_default\n       && !warn_switch_bool)"}, {"sha": "e5bc2b753030496a80acccbdbd9a04a9d18d9ca9", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "patch": "@@ -1,5 +1,11 @@\n 2019-04-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/89888\n+\t* c-typeck.c (struct c_switch): Remove outside_range_p member.\n+\t(c_start_case): Don't clear it.\n+\t(do_case): Adjust c_add_case_label caller.\n+\t(c_finish_case): Adjust c_do_switch_warnings caller.\n+\n \tPR c++/90108\n \t* c-decl.c (merge_decls): If remove is main variant and\n \tDECL_ORIGINAL_TYPE is some other type, remove a DECL_ORIGINAL_TYPE"}, {"sha": "8286b7d33298afcc60bf4f0d33533b8cd8f96fcf", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "patch": "@@ -10686,10 +10686,6 @@ struct c_switch {\n   /* Remember whether the controlling expression had boolean type\n      before integer promotions for the sake of -Wswitch-bool.  */\n   bool bool_cond_p;\n-\n-  /* Remember whether there was a case value that is outside the\n-     range of the ORIG_TYPE.  */\n-  bool outside_range_p;\n };\n \n /* A stack of the currently active switch statements.  The innermost\n@@ -10766,7 +10762,6 @@ c_start_case (location_t switch_loc,\n   cs->cases = splay_tree_new (case_compare, NULL, NULL);\n   cs->bindings = c_get_switch_bindings ();\n   cs->bool_cond_p = bool_cond_p;\n-  cs->outside_range_p = false;\n   cs->next = c_switch_stack;\n   c_switch_stack = cs;\n \n@@ -10812,9 +10807,7 @@ do_case (location_t loc, tree low_value, tree high_value)\n \n   label = c_add_case_label (loc, c_switch_stack->cases,\n \t\t\t    SWITCH_COND (c_switch_stack->switch_expr),\n-\t\t\t    c_switch_stack->orig_type,\n-\t\t\t    low_value, high_value,\n-\t\t\t    &c_switch_stack->outside_range_p);\n+\t\t\t    low_value, high_value);\n   if (label == error_mark_node)\n     label = NULL_TREE;\n   return label;\n@@ -10835,8 +10828,7 @@ c_finish_case (tree body, tree type)\n   switch_location = EXPR_LOCATION (cs->switch_expr);\n   c_do_switch_warnings (cs->cases, switch_location,\n \t\t\ttype ? type : TREE_TYPE (cs->switch_expr),\n-\t\t\tSWITCH_COND (cs->switch_expr),\n-\t\t\tcs->bool_cond_p, cs->outside_range_p);\n+\t\t\tSWITCH_COND (cs->switch_expr), cs->bool_cond_p);\n   if (c_switch_covers_all_cases_p (cs->cases, TREE_TYPE (cs->switch_expr)))\n     SWITCH_ALL_CASES_P (cs->switch_expr) = 1;\n "}, {"sha": "b35d875873056e4b1cbf290c7e5b6f4084daa3fb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "patch": "@@ -1,5 +1,11 @@\n 2019-04-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/89888\n+\t* decl.c (struct cp_switch): Remove outside_range_p member.\n+\t(push_switch): Don't clear it.\n+\t(pop_switch): Adjust c_do_switch_warnings caller.\n+\t(finish_case_label): Adjust c_add_case_label caller.\n+\n \tPR c++/90108\n \t* decl.c (duplicate_decls): If remove is main variant and\n \tDECL_ORIGINAL_TYPE is some other type, remove a DECL_ORIGINAL_TYPE"}, {"sha": "01c89cd572d12f9afacc83986568da116e1cbcca", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "patch": "@@ -3495,9 +3495,6 @@ struct cp_switch\n      label.  We need a tree, rather than simply a hash table, because\n      of the GNU case range extension.  */\n   splay_tree cases;\n-  /* Remember whether there was a case value that is outside the\n-     range of the original type of the controlling expression.  */\n-  bool outside_range_p;\n   /* Remember whether a default: case label has been seen.  */\n   bool has_default_p;\n   /* Remember whether a BREAK_STMT has been seen in this SWITCH_STMT.  */\n@@ -3526,7 +3523,6 @@ push_switch (tree switch_stmt)\n   p->next = switch_stack;\n   p->switch_stmt = switch_stmt;\n   p->cases = splay_tree_new (case_compare, NULL, NULL);\n-  p->outside_range_p = false;\n   p->has_default_p = false;\n   p->break_stmt_seen_p = false;\n   p->in_loop_body_p = false;\n@@ -3547,8 +3543,7 @@ pop_switch (void)\n   if (!processing_template_decl)\n     c_do_switch_warnings (cs->cases, switch_location,\n \t\t\t  SWITCH_STMT_TYPE (cs->switch_stmt),\n-\t\t\t  SWITCH_STMT_COND (cs->switch_stmt),\n-\t\t\t  bool_cond_p, cs->outside_range_p);\n+\t\t\t  SWITCH_STMT_COND (cs->switch_stmt), bool_cond_p);\n \n   /* For the benefit of block_may_fallthru remember if the switch body\n      case labels cover all possible values and if there are break; stmts.  */\n@@ -3663,9 +3658,7 @@ finish_case_label (location_t loc, tree low_value, tree high_value)\n   low_value = case_conversion (type, low_value);\n   high_value = case_conversion (type, high_value);\n \n-  r = c_add_case_label (loc, switch_stack->cases, cond, type,\n-\t\t\tlow_value, high_value,\n-\t\t\t&switch_stack->outside_range_p);\n+  r = c_add_case_label (loc, switch_stack->cases, cond, low_value, high_value);\n \n   /* After labels, make any new cleanups in the function go into their\n      own new (temporary) binding contour.  */"}, {"sha": "a5e5af59f548d4f45b377990389fed02e1b87ac8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "patch": "@@ -1,5 +1,10 @@\n 2019-04-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/89888\n+\t* c-c++-common/pr89888.c: New test.\n+\t* g++.dg/torture/pr40335.C: Change dg-bogus into dg-warning.\n+\tDon't expect -Wswitch-unreachable warning.\n+\n \tPR c++/90108\n \t* c-c++-common/pr90108.c: New test.\n "}, {"sha": "d9e11d6f26a95a09c45a89b3b1dfafecd02a81df", "filename": "gcc/testsuite/c-c++-common/pr89888.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr89888.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr89888.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr89888.c?ref=c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "patch": "@@ -0,0 +1,67 @@\n+/* PR c/89888 */\n+/* { dg-do compile { target { int32 } } } */\n+/* { dg-options \"\" } */\n+\n+long long y;\n+\n+void\n+foo (unsigned char x)\n+{\n+  switch (x)\n+    {\n+    case -1: y = -1; break;\t\t\t/* { dg-message \"previously used here\" } */\n+\t\t\t\t\t\t/* { dg-warning \"case label value is less than minimum value for type\" \"\" { target *-*-* } .-1 } */\n+    case 0xffffffff: y = 0xffffffff; break;\t/* { dg-error \"duplicate case value\" } */\n+    case ~0U: y = ~0U; break;\t\t\t/* { dg-error \"duplicate case value\" } */\n+    }\n+}\n+\n+void\n+bar (unsigned char x)\n+{\n+  switch (x)\n+    {\n+    case -1: y = -1; break;\t\t\t/* { dg-message \"previously used here\" } */\n+\t\t\t\t\t\t/* { dg-warning \"case label value is less than minimum value for type\" \"\" { target *-*-* } .-1  } */\n+    case -1: y = -1; break;\t\t\t/* { dg-error \"duplicate case value\" } */\n+    case -1: y = -1; break;\t\t\t/* { dg-error \"duplicate case value\" } */\n+    }\n+}\n+\n+void\n+baz (unsigned char x)\n+{\n+  switch (x)\n+    {\n+    case -7: y = -7; break;\t\t\t/* { dg-warning \"case label value is less than minimum value for type\" } */\n+    case -5 ... 2: y = -5; break;\t\t/* { dg-warning \"lower value in case label range less than minimum value for type\" } */\n+    case 18: y = 18; break;\n+    case (unsigned char) -2 ... 4 + (unsigned char) -2: y = 2; break;\t/* { dg-warning \"upper value in case label range exceeds maximum value for type\" } */\n+    case 24 + (unsigned char) -2: y = 3; break;\t/* { dg-warning \"case label value exceeds maximum value for type\" } */\n+    }\n+}\n+\n+void\n+qux (unsigned char x)\n+{\n+  switch (x)\n+    {\n+    case (unsigned char) -1 ... 1 + (unsigned char) -1: y = 2; break;\t/* { dg-warning \"upper value in case label range exceeds maximum value for type\" } */\n+    case -12: y = -7; break;\t\t\t/* { dg-warning \"case label value is less than minimum value for type\" } */\n+    case 18: y = 18; break;\n+    case 27 + (unsigned char) -1: y = 3; break;\t/* { dg-warning \"case label value exceeds maximum value for type\" } */\n+    case -1 ... 0: y = -5; break;\t\t/* { dg-warning \"lower value in case label range less than minimum value for type\" } */\n+    }\n+}\n+\n+void\n+quux (unsigned char x)\n+{\n+  switch (x)\n+    {\n+    case (unsigned char) -2 ... (unsigned char) -1: y = 2; break;\n+    case 18: y = 18; break;\n+    case 1 + (unsigned char) -1: y = 3; break;\t/* { dg-warning \"case label value exceeds maximum value for type\" } */\n+    case -2 ... -1: y = -5; break;\t\t/* { dg-warning \"case label value is less than minimum value for type\" } */\n+    }\n+}"}, {"sha": "bf335957e6046dca1df75bb406e0780febe2e81b", "filename": "gcc/testsuite/g++.dg/torture/pr40335.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40335.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40335.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40335.C?ref=c280b7ee5c5dfcc1b4ae2c0389987b7b67ec8cf8", "patch": "@@ -7,8 +7,8 @@ main (void)\n   int i = -1; \n   switch ((signed char) i)\n     {\n-      case 255: /* { dg-bogus \"exceeds maximum value\" \"\" { xfail *-*-* } } */\n-\tabort (); /* { dg-warning \"statement will never be executed\" } */\n+      case 255: /* { dg-warning \"exceeds maximum value\" } */\n+\tabort ();\n       default:\n \tbreak;\n     }"}]}