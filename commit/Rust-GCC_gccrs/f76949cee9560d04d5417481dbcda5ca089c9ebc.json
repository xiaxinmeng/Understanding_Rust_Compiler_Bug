{"sha": "f76949cee9560d04d5417481dbcda5ca089c9ebc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2OTQ5Y2VlOTU2MGQwNGQ1NDE3NDgxZGJjZGE1Y2EwODljOWViYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-13T17:13:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-10-13T17:13:26Z"}, "message": "combine: Fix up simplify_shift_const_1 for nested ROTATEs [PR97386]\n\nThe following testcases are miscompiled (the first one since my improvements\nto rotate discovery on GIMPLE, the other one for many years) because\ncombiner optimizes nested ROTATEs with narrowing SUBREG in between (i.e.\nthe outer rotate is performed in shorter precision than the inner one) to\njust one ROTATE of the rotated constant.  While that (under certain\nconditions) can work for shifts, it can't work for rotates where we can only\ndo that with rotates of the same precision.\n\n2020-10-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/97386\n\t* combine.c (simplify_shift_const_1): Don't optimize nested ROTATEs if\n\tthey have different modes.\n\n\t* gcc.c-torture/execute/pr97386-1.c: New test.\n\t* gcc.c-torture/execute/pr97386-2.c: New test.", "tree": {"sha": "ea08e15479dd07b8d8fc78dd9c1f8ed4b36fc985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea08e15479dd07b8d8fc78dd9c1f8ed4b36fc985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f76949cee9560d04d5417481dbcda5ca089c9ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76949cee9560d04d5417481dbcda5ca089c9ebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76949cee9560d04d5417481dbcda5ca089c9ebc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76949cee9560d04d5417481dbcda5ca089c9ebc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e0beddd7fb4c0d2157c7f0c7d3f39e9533bb323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e0beddd7fb4c0d2157c7f0c7d3f39e9533bb323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e0beddd7fb4c0d2157c7f0c7d3f39e9533bb323"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "4782e1d9dccb0aa21d75a6aff4d2769c60242e78", "filename": "gcc/combine.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76949cee9560d04d5417481dbcda5ca089c9ebc/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76949cee9560d04d5417481dbcda5ca089c9ebc/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=f76949cee9560d04d5417481dbcda5ca089c9ebc", "patch": "@@ -11003,8 +11003,11 @@ simplify_shift_const_1 (enum rtx_code code, machine_mode result_mode,\n \t\tbreak;\n \t      /* For ((int) (cstLL >> count)) >> cst2 just give up.  Queuing\n \t\t up outer sign extension (often left and right shift) is\n-\t\t hardly more efficient than the original.  See PR70429.  */\n-\t      if (code == ASHIFTRT && int_mode != int_result_mode)\n+\t\t hardly more efficient than the original.  See PR70429.\n+\t\t Similarly punt for rotates with different modes.\n+\t\t See PR97386.  */\n+\t      if ((code == ASHIFTRT || code == ROTATE)\n+\t\t  && int_mode != int_result_mode)\n \t\tbreak;\n \n \t      rtx count_rtx = gen_int_shift_amount (int_result_mode, count);"}, {"sha": "c50e0380a6538122dab5cbafc2db382d3ed524f0", "filename": "gcc/testsuite/gcc.c-torture/execute/pr97386-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76949cee9560d04d5417481dbcda5ca089c9ebc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr97386-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76949cee9560d04d5417481dbcda5ca089c9ebc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr97386-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr97386-1.c?ref=f76949cee9560d04d5417481dbcda5ca089c9ebc", "patch": "@@ -0,0 +1,16 @@\n+/* PR rtl-optimization/97386 */\n+\n+__attribute__((noipa)) unsigned char\n+foo (unsigned int c)\n+{\n+  return __builtin_bswap16 ((unsigned long long) (0xccccLLU << c | 0xccccLLU >> ((-c) & 63)));\n+}\n+\n+int\n+main ()\n+{\n+  unsigned char x = foo (0);\n+  if (__CHAR_BIT__ == 8 && __SIZEOF_SHORT__ == 2 && x != 0xcc)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "e61829d71abded76a16a852a25b82a44e758d103", "filename": "gcc/testsuite/gcc.c-torture/execute/pr97386-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76949cee9560d04d5417481dbcda5ca089c9ebc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr97386-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76949cee9560d04d5417481dbcda5ca089c9ebc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr97386-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr97386-2.c?ref=f76949cee9560d04d5417481dbcda5ca089c9ebc", "patch": "@@ -0,0 +1,20 @@\n+/* PR rtl-optimization/97386 */\n+\n+__attribute__((noipa)) unsigned\n+foo (int x)\n+{\n+  unsigned long long a = (0x800000000000ccccULL << x) | (0x800000000000ccccULL >> (64 - x));\n+  unsigned int b = a;\n+  return (b << 24) | (b >> 8);\n+}\n+\n+int\n+main ()\n+{\n+  if (__CHAR_BIT__ == 8\n+      && __SIZEOF_INT__ == 4\n+      &&  __SIZEOF_LONG_LONG__ == 8\n+      && foo (1) != 0x99000199U)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}