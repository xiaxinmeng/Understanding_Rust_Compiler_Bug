{"sha": "568e8e1e73145dedc973ee9543775b4085e53d26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY4ZThlMWU3MzE0NWRlZGM5NzNlZTk1NDM3NzViNDA4NWU1M2QyNg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-06-08T18:50:37Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-06-08T18:50:37Z"}, "message": "trans-array.h: Replace prototypes for gfc_conv_descriptor_offset...\n\n2009-06-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\t* trans-array.h : Replace prototypes for\n\tgfc_conv_descriptor_offset, gfc_conv_descriptor_stride,\n\tgfc_conv_descriptor_lbound, gfc_conv_descriptor_ubound with new\n\tprototypes of the same names with _get or _set appended.\n\t* trans-array.c : Make the originals of the above static and\n\tnew functions for the _get and _set functions. Update all the\n\treferences to these descriptor access functions.\n\t* trans-expr.c : Update references to the above descriptor\n\taccess functions.\n\t* trans-intrinsic.c : The same.\n\t* trans-openmp.c : The same.\n\t* trans-stmt.c : The same.\n\nFrom-SVN: r148290", "tree": {"sha": "90553c559dcb64a55bb7c9d376603bc3fc2c5234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90553c559dcb64a55bb7c9d376603bc3fc2c5234"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/568e8e1e73145dedc973ee9543775b4085e53d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568e8e1e73145dedc973ee9543775b4085e53d26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568e8e1e73145dedc973ee9543775b4085e53d26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568e8e1e73145dedc973ee9543775b4085e53d26/comments", "author": null, "committer": null, "parents": [{"sha": "72e4821846ba8167ec54d24db555d24118e10191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72e4821846ba8167ec54d24db555d24118e10191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72e4821846ba8167ec54d24db555d24118e10191"}], "stats": {"total": 283, "additions": 167, "deletions": 116}, "files": [{"sha": "5a371b8036f200acbc6d7a859e8dea774646f58c", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 114, "deletions": 67, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568e8e1e73145dedc973ee9543775b4085e53d26/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568e8e1e73145dedc973ee9543775b4085e53d26/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=568e8e1e73145dedc973ee9543775b4085e53d26", "patch": "@@ -197,7 +197,7 @@ gfc_conv_descriptor_data_addr (tree desc)\n   return gfc_build_addr_expr (NULL_TREE, t);\n }\n \n-tree\n+static tree\n gfc_conv_descriptor_offset (tree desc)\n {\n   tree type;\n@@ -213,6 +213,21 @@ gfc_conv_descriptor_offset (tree desc)\n \t\t      desc, field, NULL_TREE);\n }\n \n+tree\n+gfc_conv_descriptor_offset_get (tree desc)\n+{\n+  return gfc_conv_descriptor_offset (desc);\n+}\n+\n+void\n+gfc_conv_descriptor_offset_set (stmtblock_t *block, tree desc,\n+\t\t\t\ttree value)\n+{\n+  tree t = gfc_conv_descriptor_offset (desc);\n+  gfc_add_modify (block, t, fold_convert (TREE_TYPE (t), value));\n+}\n+\n+\n tree\n gfc_conv_descriptor_dtype (tree desc)\n {\n@@ -250,7 +265,7 @@ gfc_conv_descriptor_dimension (tree desc, tree dim)\n   return tmp;\n }\n \n-tree\n+static tree\n gfc_conv_descriptor_stride (tree desc, tree dim)\n {\n   tree tmp;\n@@ -267,6 +282,20 @@ gfc_conv_descriptor_stride (tree desc, tree dim)\n }\n \n tree\n+gfc_conv_descriptor_stride_get (tree desc, tree dim)\n+{\n+  return gfc_conv_descriptor_stride (desc, dim);\n+}\n+\n+void\n+gfc_conv_descriptor_stride_set (stmtblock_t *block, tree desc,\n+\t\t\t\ttree dim, tree value)\n+{\n+  tree t = gfc_conv_descriptor_stride (desc, dim);\n+  gfc_add_modify (block, t, fold_convert (TREE_TYPE (t), value));\n+}\n+\n+static tree\n gfc_conv_descriptor_lbound (tree desc, tree dim)\n {\n   tree tmp;\n@@ -283,6 +312,20 @@ gfc_conv_descriptor_lbound (tree desc, tree dim)\n }\n \n tree\n+gfc_conv_descriptor_lbound_get (tree desc, tree dim)\n+{\n+  return gfc_conv_descriptor_lbound (desc, dim);\n+}\n+\n+void\n+gfc_conv_descriptor_lbound_set (stmtblock_t *block, tree desc,\n+\t\t\t\ttree dim, tree value)\n+{\n+  tree t = gfc_conv_descriptor_lbound (desc, dim);\n+  gfc_add_modify (block, t, fold_convert (TREE_TYPE (t), value));\n+}\n+\n+static tree\n gfc_conv_descriptor_ubound (tree desc, tree dim)\n {\n   tree tmp;\n@@ -298,6 +341,19 @@ gfc_conv_descriptor_ubound (tree desc, tree dim)\n   return tmp;\n }\n \n+tree\n+gfc_conv_descriptor_ubound_get (tree desc, tree dim)\n+{\n+  return gfc_conv_descriptor_ubound (desc, dim);\n+}\n+\n+void\n+gfc_conv_descriptor_ubound_set (stmtblock_t *block, tree desc,\n+\t\t\t\ttree dim, tree value)\n+{\n+  tree t = gfc_conv_descriptor_ubound (desc, dim);\n+  gfc_add_modify (block, t, fold_convert (TREE_TYPE (t), value));\n+}\n \n /* Build a null array descriptor constructor.  */\n \n@@ -592,8 +648,7 @@ gfc_trans_allocate_array_storage (stmtblock_t * pre, stmtblock_t * post,\n \n   /* The offset is zero because we create temporaries with a zero\n      lower bound.  */\n-  tmp = gfc_conv_descriptor_offset (desc);\n-  gfc_add_modify (pre, tmp, gfc_index_zero_node);\n+  gfc_conv_descriptor_offset_set (pre, desc, gfc_index_zero_node);\n \n   if (dealloc && !onstack)\n     {\n@@ -704,21 +759,19 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n \t     of the descriptor fields.  */\n \t  tmp =\n \t    fold_build2 (MINUS_EXPR, gfc_array_index_type,\n-\t\t\t gfc_conv_descriptor_ubound (desc, gfc_rank_cst[n]),\n-\t\t\t gfc_conv_descriptor_lbound (desc, gfc_rank_cst[n]));\n+\t\t\t gfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[n]),\n+\t\t\t gfc_conv_descriptor_lbound_get (desc, gfc_rank_cst[n]));\n \t  loop->to[n] = tmp;\n \t  continue;\n \t}\n \t\n       /* Store the stride and bound components in the descriptor.  */\n-      tmp = gfc_conv_descriptor_stride (desc, gfc_rank_cst[n]);\n-      gfc_add_modify (pre, tmp, size);\n+      gfc_conv_descriptor_stride_set (pre, desc, gfc_rank_cst[n], size);\n \n-      tmp = gfc_conv_descriptor_lbound (desc, gfc_rank_cst[n]);\n-      gfc_add_modify (pre, tmp, gfc_index_zero_node);\n+      gfc_conv_descriptor_lbound_set (pre, desc, gfc_rank_cst[n],\n+\t\t\t\t      gfc_index_zero_node);\n \n-      tmp = gfc_conv_descriptor_ubound (desc, gfc_rank_cst[n]);\n-      gfc_add_modify (pre, tmp, loop->to[n]);\n+      gfc_conv_descriptor_ubound_set (pre, desc, gfc_rank_cst[n], loop->to[n]);\n \n       tmp = fold_build2 (PLUS_EXPR, gfc_array_index_type,\n \t\t\t loop->to[n], gfc_index_one_node);\n@@ -820,25 +873,22 @@ gfc_conv_array_transpose (gfc_se * se, gfc_expr * expr)\n       dest_index = gfc_rank_cst[n];\n       src_index = gfc_rank_cst[1 - n];\n \n-      gfc_add_modify (&se->pre,\n-\t\t\t   gfc_conv_descriptor_stride (dest, dest_index),\n-\t\t\t   gfc_conv_descriptor_stride (src, src_index));\n+      gfc_conv_descriptor_stride_set (&se->pre, dest, dest_index,\n+\t\t\t   gfc_conv_descriptor_stride_get (src, src_index));\n \n-      gfc_add_modify (&se->pre,\n-\t\t\t   gfc_conv_descriptor_lbound (dest, dest_index),\n-\t\t\t   gfc_conv_descriptor_lbound (src, src_index));\n+      gfc_conv_descriptor_lbound_set (&se->pre, dest, dest_index,\n+\t\t\t   gfc_conv_descriptor_lbound_get (src, src_index));\n \n-      gfc_add_modify (&se->pre,\n-\t\t\t   gfc_conv_descriptor_ubound (dest, dest_index),\n-\t\t\t   gfc_conv_descriptor_ubound (src, src_index));\n+      gfc_conv_descriptor_ubound_set (&se->pre, dest, dest_index,\n+\t\t\t   gfc_conv_descriptor_ubound_get (src, src_index));\n \n       if (!loop->to[n])\n         {\n \t  gcc_assert (integer_zerop (loop->from[n]));\n \t  loop->to[n] =\n \t    fold_build2 (MINUS_EXPR, gfc_array_index_type,\n-\t\t\t gfc_conv_descriptor_ubound (dest, dest_index),\n-\t\t\t gfc_conv_descriptor_lbound (dest, dest_index));\n+\t\t\t gfc_conv_descriptor_ubound_get (dest, dest_index),\n+\t\t\t gfc_conv_descriptor_lbound_get (dest, dest_index));\n         }\n     }\n \n@@ -850,13 +900,12 @@ gfc_conv_array_transpose (gfc_se * se, gfc_expr * expr)\n      element is still at the same offset as before, except where the loop\n      starts at zero.  */\n   if (!integer_zerop (loop->from[0]))\n-    dest_info->offset = gfc_conv_descriptor_offset (src);\n+    dest_info->offset = gfc_conv_descriptor_offset_get (src);\n   else\n     dest_info->offset = gfc_index_zero_node;\n \n-  gfc_add_modify (&se->pre,\n-\t\t       gfc_conv_descriptor_offset (dest),\n-\t\t       dest_info->offset);\n+  gfc_conv_descriptor_offset_set (&se->pre, dest,\n+\t\t\t\t  dest_info->offset);\n \t  \n   if (dest_info->dimen > loop->temp_dim)\n     loop->temp_dim = dest_info->dimen;\n@@ -894,11 +943,11 @@ gfc_grow_array (stmtblock_t * pblock, tree desc, tree extra)\n   if (integer_zerop (extra))\n     return;\n \n-  ubound = gfc_conv_descriptor_ubound (desc, gfc_rank_cst[0]);\n+  ubound = gfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[0]);\n \n   /* Add EXTRA to the upper bound.  */\n   tmp = fold_build2 (PLUS_EXPR, gfc_array_index_type, ubound, extra);\n-  gfc_add_modify (pblock, ubound, tmp);\n+  gfc_conv_descriptor_ubound_set (pblock, desc, gfc_rank_cst[0], tmp);\n \n   /* Get the value of the current data pointer.  */\n   arg0 = gfc_conv_descriptor_data_get (desc);\n@@ -1877,7 +1926,7 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss, locus * where)\n   /* If the array grows dynamically, the upper bound of the loop variable\n      is determined by the array's final upper bound.  */\n   if (dynamic)\n-    loop->to[0] = gfc_conv_descriptor_ubound (desc, gfc_rank_cst[0]);\n+    loop->to[0] = gfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[0]);\n \n   if (TREE_USED (offsetvar))\n     pushdecl (offsetvar);\n@@ -1931,8 +1980,8 @@ gfc_set_vector_loop_bounds (gfc_loopinfo * loop, gfc_ss_info * info)\n \t  desc = info->subscript[dim]->data.info.descriptor;\n \t  zero = gfc_rank_cst[0];\n \t  tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n-\t\t\t     gfc_conv_descriptor_ubound (desc, zero),\n-\t\t\t     gfc_conv_descriptor_lbound (desc, zero));\n+\t\t\t     gfc_conv_descriptor_ubound_get (desc, zero),\n+\t\t\t     gfc_conv_descriptor_lbound_get (desc, zero));\n \t  tmp = gfc_evaluate_now (tmp, &loop->pre);\n \t  loop->to[n] = tmp;\n \t}\n@@ -2160,7 +2209,7 @@ gfc_conv_array_offset (tree descriptor)\n   if (GFC_ARRAY_TYPE_P (type))\n     return GFC_TYPE_ARRAY_OFFSET (type);\n   else\n-    return gfc_conv_descriptor_offset (descriptor);\n+    return gfc_conv_descriptor_offset_get (descriptor);\n }\n \n \n@@ -2179,7 +2228,7 @@ gfc_conv_array_stride (tree descriptor, int dim)\n   if (tmp != NULL_TREE)\n     return tmp;\n \n-  tmp = gfc_conv_descriptor_stride (descriptor, gfc_rank_cst[dim]);\n+  tmp = gfc_conv_descriptor_stride_get (descriptor, gfc_rank_cst[dim]);\n   return tmp;\n }\n \n@@ -2198,7 +2247,7 @@ gfc_conv_array_lbound (tree descriptor, int dim)\n   if (tmp != NULL_TREE)\n     return tmp;\n \n-  tmp = gfc_conv_descriptor_lbound (descriptor, gfc_rank_cst[dim]);\n+  tmp = gfc_conv_descriptor_lbound_get (descriptor, gfc_rank_cst[dim]);\n   return tmp;\n }\n \n@@ -2222,7 +2271,7 @@ gfc_conv_array_ubound (tree descriptor, int dim)\n   if (GFC_ARRAY_TYPE_P (TREE_TYPE (descriptor)))\n     return gfc_index_zero_node;\n \n-  tmp = gfc_conv_descriptor_ubound (descriptor, gfc_rank_cst[dim]);\n+  tmp = gfc_conv_descriptor_ubound_get (descriptor, gfc_rank_cst[dim]);\n   return tmp;\n }\n \n@@ -3784,8 +3833,8 @@ gfc_array_init_size (tree descriptor, int rank, tree * poffset,\n               ubound = lower[n];\n             }\n \t}\n-      tmp = gfc_conv_descriptor_lbound (descriptor, gfc_rank_cst[n]);\n-      gfc_add_modify (pblock, tmp, se.expr);\n+      gfc_conv_descriptor_lbound_set (pblock, descriptor, gfc_rank_cst[n],\n+\t\t\t\t      se.expr);\n \n       /* Work out the offset for this component.  */\n       tmp = fold_build2 (MULT_EXPR, gfc_array_index_type, se.expr, stride);\n@@ -3801,12 +3850,10 @@ gfc_array_init_size (tree descriptor, int rank, tree * poffset,\n       gfc_conv_expr_type (&se, ubound, gfc_array_index_type);\n       gfc_add_block_to_block (pblock, &se.pre);\n \n-      tmp = gfc_conv_descriptor_ubound (descriptor, gfc_rank_cst[n]);\n-      gfc_add_modify (pblock, tmp, se.expr);\n+      gfc_conv_descriptor_ubound_set (pblock, descriptor, gfc_rank_cst[n], se.expr);\n \n       /* Store the stride.  */\n-      tmp = gfc_conv_descriptor_stride (descriptor, gfc_rank_cst[n]);\n-      gfc_add_modify (pblock, tmp, stride);\n+      gfc_conv_descriptor_stride_set (pblock, descriptor, gfc_rank_cst[n], stride);\n \n       /* Calculate the size of this dimension.  */\n       size = fold_build2 (PLUS_EXPR, gfc_array_index_type, se.expr, size);\n@@ -3935,8 +3982,7 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree pstat)\n   tmp = fold_build2 (MODIFY_EXPR, void_type_node, pointer, tmp);\n   gfc_add_expr_to_block (&se->pre, tmp);\n \n-  tmp = gfc_conv_descriptor_offset (se->expr);\n-  gfc_add_modify (&se->pre, tmp, offset);\n+  gfc_conv_descriptor_offset_set (&se->pre, se->expr, offset);\n \n   if (expr->ts.type == BT_DERIVED\n \t&& expr->ts.derived->attr.alloc_comp)\n@@ -4426,7 +4472,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n          anything as we still don't know the array stride.  */\n       partial = gfc_create_var (boolean_type_node, \"partial\");\n       TREE_USED (partial) = 1;\n-      tmp = gfc_conv_descriptor_stride (dumdesc, gfc_rank_cst[0]);\n+      tmp = gfc_conv_descriptor_stride_get (dumdesc, gfc_rank_cst[0]);\n       tmp = fold_build2 (EQ_EXPR, boolean_type_node, tmp, gfc_index_one_node);\n       gfc_add_modify (&block, partial, tmp);\n     }\n@@ -4440,7 +4486,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n   if (no_repack)\n     {\n       /* Set the first stride.  */\n-      stride = gfc_conv_descriptor_stride (dumdesc, gfc_rank_cst[0]);\n+      stride = gfc_conv_descriptor_stride_get (dumdesc, gfc_rank_cst[0]);\n       stride = gfc_evaluate_now (stride, &block);\n \n       tmp = fold_build2 (EQ_EXPR, boolean_type_node,\n@@ -4493,8 +4539,8 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n       if (checkparm || !sym->as->upper[n])\n \t{\n \t  /* Get the bounds of the actual parameter.  */\n-\t  dubound = gfc_conv_descriptor_ubound (dumdesc, gfc_rank_cst[n]);\n-\t  dlbound = gfc_conv_descriptor_lbound (dumdesc, gfc_rank_cst[n]);\n+\t  dubound = gfc_conv_descriptor_ubound_get (dumdesc, gfc_rank_cst[n]);\n+\t  dlbound = gfc_conv_descriptor_lbound_get (dumdesc, gfc_rank_cst[n]);\n \t}\n       else\n         {\n@@ -4564,7 +4610,7 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc, tree body)\n           if (no_repack || partial != NULL_TREE)\n             {\n               stmt_unpacked =\n-                gfc_conv_descriptor_stride (dumdesc, gfc_rank_cst[n+1]);\n+                gfc_conv_descriptor_stride_get (dumdesc, gfc_rank_cst[n+1]);\n             }\n \n           /* Figure out the stride if not a known constant.  */\n@@ -5266,19 +5312,21 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \t      to = fold_build2 (PLUS_EXPR, gfc_array_index_type, to, tmp);\n \t      from = gfc_index_one_node;\n \t    }\n-\t  tmp = gfc_conv_descriptor_lbound (parm, gfc_rank_cst[dim]);\n-\t  gfc_add_modify (&loop.pre, tmp, from);\n+\t  gfc_conv_descriptor_lbound_set (&loop.pre, parm,\n+\t\t\t\t\t  gfc_rank_cst[dim], from);\n \n \t  /* Set the new upper bound.  */\n-\t  tmp = gfc_conv_descriptor_ubound (parm, gfc_rank_cst[dim]);\n-\t  gfc_add_modify (&loop.pre, tmp, to);\n+\t  gfc_conv_descriptor_ubound_set (&loop.pre, parm,\n+\t\t\t\t\t  gfc_rank_cst[dim], to);\n \n \t  /* Multiply the stride by the section stride to get the\n \t     total stride.  */\n \t  stride = fold_build2 (MULT_EXPR, gfc_array_index_type,\n \t\t\t\tstride, info->stride[dim]);\n \n-\t  if (se->direct_byref && info->ref && info->ref->u.ar.type != AR_FULL)\n+\t  if (se->direct_byref\n+\t\t&& info->ref\n+\t\t&& info->ref->u.ar.type != AR_FULL)\n \t    {\n \t      base = fold_build2 (MINUS_EXPR, TREE_TYPE (base),\n \t\t\t\t  base, stride);\n@@ -5295,32 +5343,31 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \t    }\n \n \t  /* Store the new stride.  */\n-\t  tmp = gfc_conv_descriptor_stride (parm, gfc_rank_cst[dim]);\n-\t  gfc_add_modify (&loop.pre, tmp, stride);\n+\t  gfc_conv_descriptor_stride_set (&loop.pre, parm,\n+\t\t\t\t\t  gfc_rank_cst[dim], stride);\n \n \t  dim++;\n \t}\n \n       if (se->data_not_needed)\n-\tgfc_conv_descriptor_data_set (&loop.pre, parm, gfc_index_zero_node);\n+\tgfc_conv_descriptor_data_set (&loop.pre, parm,\n+\t\t\t\t      gfc_index_zero_node);\n       else\n-\t/* Point the data pointer at the first element in the section.  */\n+\t/* Point the data pointer at the 1st element in the section.  */\n \tgfc_get_dataptr_offset (&loop.pre, parm, desc, offset,\n \t\t\t\tsubref_array_target, expr);\n \n       if ((se->direct_byref || GFC_ARRAY_TYPE_P (TREE_TYPE (desc)))\n \t  && !se->data_not_needed)\n \t{\n \t  /* Set the offset.  */\n-\t  tmp = gfc_conv_descriptor_offset (parm);\n-\t  gfc_add_modify (&loop.pre, tmp, base);\n+\t  gfc_conv_descriptor_offset_set (&loop.pre, parm, base);\n \t}\n       else\n \t{\n \t  /* Only the callee knows what the correct offset it, so just set\n \t     it to zero here.  */\n-\t  tmp = gfc_conv_descriptor_offset (parm);\n-\t  gfc_add_modify (&loop.pre, tmp, gfc_index_zero_node);\n+\t  gfc_conv_descriptor_offset_set (&loop.pre, parm, gfc_index_zero_node);\n \t}\n       desc = parm;\n     }\n@@ -5355,8 +5402,8 @@ array_parameter_size (tree desc, gfc_expr *expr, tree *size)\n \t\t\t     gfc_build_addr_expr (NULL, desc));\n   else\n     {\n-      tree ubound = gfc_conv_descriptor_ubound (desc, gfc_index_zero_node);\n-      tree lbound = gfc_conv_descriptor_lbound (desc, gfc_index_zero_node);\n+      tree ubound = gfc_conv_descriptor_ubound_get (desc, gfc_index_zero_node);\n+      tree lbound = gfc_conv_descriptor_lbound_get (desc, gfc_index_zero_node);\n \n       *size = fold_build2 (MINUS_EXPR, gfc_array_index_type, ubound, lbound);\n       *size = fold_build2 (PLUS_EXPR, gfc_array_index_type, *size,\n@@ -5605,14 +5652,14 @@ get_full_array_size (stmtblock_t *block, tree decl, int rank)\n   tree nelems;\n   tree tmp;\n   idx = gfc_rank_cst[rank - 1];\n-  nelems = gfc_conv_descriptor_ubound (decl, idx);\n-  tmp = gfc_conv_descriptor_lbound (decl, idx);\n+  nelems = gfc_conv_descriptor_ubound_get (decl, idx);\n+  tmp = gfc_conv_descriptor_lbound_get (decl, idx);\n   tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type, nelems, tmp);\n   tmp = fold_build2 (PLUS_EXPR, gfc_array_index_type,\n \t\t     tmp, gfc_index_one_node);\n   tmp = gfc_evaluate_now (tmp, block);\n \n-  nelems = gfc_conv_descriptor_stride (decl, idx);\n+  nelems = gfc_conv_descriptor_stride_get (decl, idx);\n   tmp = fold_build2 (MULT_EXPR, gfc_array_index_type, nelems, tmp);\n   return gfc_evaluate_now (tmp, block);\n }"}, {"sha": "9b0b830d92e66d9f7de319da9d5cb9c72df6be53", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568e8e1e73145dedc973ee9543775b4085e53d26/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568e8e1e73145dedc973ee9543775b4085e53d26/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=568e8e1e73145dedc973ee9543775b4085e53d26", "patch": "@@ -120,13 +120,18 @@ tree gfc_conv_array_ubound (tree, int);\n \n /* Build expressions for accessing components of an array descriptor.  */\n tree gfc_conv_descriptor_data_get (tree);\n-void gfc_conv_descriptor_data_set (stmtblock_t *, tree, tree);\n tree gfc_conv_descriptor_data_addr (tree);\n-tree gfc_conv_descriptor_offset (tree);\n+tree gfc_conv_descriptor_offset_get (tree);\n tree gfc_conv_descriptor_dtype (tree);\n-tree gfc_conv_descriptor_stride (tree, tree);\n-tree gfc_conv_descriptor_lbound (tree, tree);\n-tree gfc_conv_descriptor_ubound (tree, tree);\n+tree gfc_conv_descriptor_stride_get (tree, tree);\n+tree gfc_conv_descriptor_lbound_get (tree, tree);\n+tree gfc_conv_descriptor_ubound_get (tree, tree);\n+\n+void gfc_conv_descriptor_data_set (stmtblock_t *, tree, tree);\n+void gfc_conv_descriptor_offset_set (stmtblock_t *, tree, tree);\n+void gfc_conv_descriptor_stride_set (stmtblock_t *, tree, tree, tree);\n+void gfc_conv_descriptor_lbound_set (stmtblock_t *, tree, tree, tree);\n+void gfc_conv_descriptor_ubound_set (stmtblock_t *, tree, tree, tree);\n \n /* Add pre-loop scalarization code for intrinsic functions which require\n    special handling.  */"}, {"sha": "29cbff3ed1dfd2650f73856a5c3f49b705454d55", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568e8e1e73145dedc973ee9543775b4085e53d26/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568e8e1e73145dedc973ee9543775b4085e53d26/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=568e8e1e73145dedc973ee9543775b4085e53d26", "patch": "@@ -1628,15 +1628,15 @@ gfc_set_interface_mapping_bounds (stmtblock_t * block, tree type, tree desc)\n       if (GFC_TYPE_ARRAY_LBOUND (type, n) == NULL_TREE)\n \t{\n \t  GFC_TYPE_ARRAY_LBOUND (type, n)\n-\t\t= gfc_conv_descriptor_lbound (desc, dim);\n+\t\t= gfc_conv_descriptor_lbound_get (desc, dim);\n \t  GFC_TYPE_ARRAY_UBOUND (type, n)\n-\t\t= gfc_conv_descriptor_ubound (desc, dim);\n+\t\t= gfc_conv_descriptor_ubound_get (desc, dim);\n \t}\n       else if (GFC_TYPE_ARRAY_UBOUND (type, n) == NULL_TREE)\n \t{\n \t  tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n-\t\t\t     gfc_conv_descriptor_ubound (desc, dim),\n-\t\t\t     gfc_conv_descriptor_lbound (desc, dim));\n+\t\t\t     gfc_conv_descriptor_ubound_get (desc, dim),\n+\t\t\t     gfc_conv_descriptor_lbound_get (desc, dim));\n \t  tmp = fold_build2 (PLUS_EXPR, gfc_array_index_type,\n \t\t\t     GFC_TYPE_ARRAY_LBOUND (type, n),\n \t\t\t     tmp);\n@@ -3620,7 +3620,7 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n \n \t  /* Shift the lbound and ubound of temporaries to being unity, rather\n \t     than zero, based.  Calculate the offset for all cases.  */\n-\t  offset = gfc_conv_descriptor_offset (dest);\n+\t  offset = gfc_conv_descriptor_offset_get (dest);\n \t  gfc_add_modify (&block, offset, gfc_index_zero_node);\n \t  tmp2 =gfc_create_var (gfc_array_index_type, NULL);\n \t  for (n = 0; n < expr->rank; n++)\n@@ -3629,24 +3629,24 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n \t\t    && expr->expr_type != EXPR_CONSTANT)\n \t\t{\n \t\t  tree span;\n-\t\t  tmp = gfc_conv_descriptor_ubound (dest, gfc_rank_cst[n]);\n+\t\t  tmp = gfc_conv_descriptor_ubound_get (dest, gfc_rank_cst[n]);\n \t\t  span = fold_build2 (MINUS_EXPR, gfc_array_index_type, tmp,\n-\t\t\t    gfc_conv_descriptor_lbound (dest, gfc_rank_cst[n]));\n-\t\t  gfc_add_modify (&block, tmp,\n-\t\t\t\t       fold_build2 (PLUS_EXPR,\n-\t\t\t\t\t\t    gfc_array_index_type,\n-\t\t\t\t\t\t    span, gfc_index_one_node));\n-\t\t  tmp = gfc_conv_descriptor_lbound (dest, gfc_rank_cst[n]);\n-\t\t  gfc_add_modify (&block, tmp, gfc_index_one_node);\n+\t\t\t    gfc_conv_descriptor_lbound_get (dest, gfc_rank_cst[n]));\n+\t\t  tmp = fold_build2 (PLUS_EXPR, gfc_array_index_type,\n+\t\t\t\t     span, gfc_index_one_node);\n+\t\t  gfc_conv_descriptor_ubound_set (&block, dest, gfc_rank_cst[n],\n+\t\t\t\t\t\t  tmp);\n+\t\t  gfc_conv_descriptor_lbound_set (&block, dest, gfc_rank_cst[n],\n+\t\t\t\t\t\t  gfc_index_one_node);\n \t\t}\n \t      tmp = fold_build2 (MULT_EXPR, gfc_array_index_type,\n-\t\t\t\t gfc_conv_descriptor_lbound (dest,\n+\t\t\t\t gfc_conv_descriptor_lbound_get (dest,\n \t\t\t\t\t\t\t     gfc_rank_cst[n]),\n-\t\t\t\t gfc_conv_descriptor_stride (dest,\n+\t\t\t\t gfc_conv_descriptor_stride_get (dest,\n \t\t\t\t\t\t\t     gfc_rank_cst[n]));\n \t      gfc_add_modify (&block, tmp2, tmp);\n \t      tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type, offset, tmp2);\n-\t      gfc_add_modify (&block, offset, tmp);\n+\t      gfc_conv_descriptor_offset_set (&block, dest, tmp);\n \t    }\n \n \t  if (expr->expr_type == EXPR_FUNCTION"}, {"sha": "f448893724de9967aa2a57fb39395ca8a691bdbc", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568e8e1e73145dedc973ee9543775b4085e53d26/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568e8e1e73145dedc973ee9543775b4085e53d26/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=568e8e1e73145dedc973ee9543775b4085e53d26", "patch": "@@ -899,8 +899,8 @@ gfc_conv_intrinsic_bound (gfc_se * se, gfc_expr * expr, int upper)\n         }\n     }\n \n-  ubound = gfc_conv_descriptor_ubound (desc, bound);\n-  lbound = gfc_conv_descriptor_lbound (desc, bound);\n+  ubound = gfc_conv_descriptor_ubound_get (desc, bound);\n+  lbound = gfc_conv_descriptor_lbound_get (desc, bound);\n   \n   /* Follow any component references.  */\n   if (arg->expr->expr_type == EXPR_VARIABLE\n@@ -962,7 +962,7 @@ gfc_conv_intrinsic_bound (gfc_se * se, gfc_expr * expr, int upper)\n \n   if (as)\n     {\n-      tree stride = gfc_conv_descriptor_stride (desc, bound);\n+      tree stride = gfc_conv_descriptor_stride_get (desc, bound);\n \n       cond1 = fold_build2 (GE_EXPR, boolean_type_node, ubound, lbound);\n       cond2 = fold_build2 (LE_EXPR, boolean_type_node, ubound, lbound);\n@@ -3476,8 +3476,8 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n       tree ubound, lbound;\n \n       arg1 = build_fold_indirect_ref (arg1);\n-      ubound = gfc_conv_descriptor_ubound (arg1, argse.expr);\n-      lbound = gfc_conv_descriptor_lbound (arg1, argse.expr);\n+      ubound = gfc_conv_descriptor_ubound_get (arg1, argse.expr);\n+      lbound = gfc_conv_descriptor_lbound_get (arg1, argse.expr);\n       se->expr = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n \t\t\t      ubound, lbound);\n       se->expr = fold_build2 (PLUS_EXPR, gfc_array_index_type, se->expr,\n@@ -3563,8 +3563,8 @@ gfc_conv_intrinsic_sizeof (gfc_se *se, gfc_expr *expr)\n \t{\n \t  tree idx;\n \t  idx = gfc_rank_cst[n];\n-\t  lower = gfc_conv_descriptor_lbound (argse.expr, idx);\n-\t  upper = gfc_conv_descriptor_ubound (argse.expr, idx);\n+\t  lower = gfc_conv_descriptor_lbound_get (argse.expr, idx);\n+\t  upper = gfc_conv_descriptor_ubound_get (argse.expr, idx);\n \t  tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n \t\t\t     upper, lower);\n \t  tmp = fold_build2 (PLUS_EXPR, gfc_array_index_type,\n@@ -3752,9 +3752,9 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n \t  tree idx;\n \t  idx = gfc_rank_cst[n];\n \t  gfc_add_modify (&argse.pre, source_bytes, tmp);\n-\t  stride = gfc_conv_descriptor_stride (argse.expr, idx);\n-\t  lower = gfc_conv_descriptor_lbound (argse.expr, idx);\n-\t  upper = gfc_conv_descriptor_ubound (argse.expr, idx);\n+\t  stride = gfc_conv_descriptor_stride_get (argse.expr, idx);\n+\t  lower = gfc_conv_descriptor_lbound_get (argse.expr, idx);\n+\t  upper = gfc_conv_descriptor_ubound_get (argse.expr, idx);\n \t  tmp = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n \t\t\t     upper, lower);\n \t  gfc_add_modify (&argse.pre, extent, tmp);\n@@ -4070,7 +4070,7 @@ gfc_conv_associated (gfc_se *se, gfc_expr *expr)\n \t     present.  */\n \t  arg1se.descriptor_only = 1;\n \t  gfc_conv_expr_lhs (&arg1se, arg1->expr);\n-\t  tmp = gfc_conv_descriptor_stride (arg1se.expr,\n+\t  tmp = gfc_conv_descriptor_stride_get (arg1se.expr,\n \t\t\t\t\t    gfc_rank_cst[arg1->expr->rank - 1]);\n \t  nonzero_arraylen = fold_build2 (NE_EXPR, boolean_type_node, tmp,\n \t\t\t\t\t  build_int_cst (TREE_TYPE (tmp), 0));"}, {"sha": "442290f36cb1f4b1bf6d8da1a2488c936325d2a9", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568e8e1e73145dedc973ee9543775b4085e53d26/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568e8e1e73145dedc973ee9543775b4085e53d26/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=568e8e1e73145dedc973ee9543775b4085e53d26", "patch": "@@ -150,14 +150,14 @@ gfc_omp_clause_default_ctor (tree clause, tree decl, tree outer)\n \n   gfc_add_modify (&cond_block, decl, outer);\n   rank = gfc_rank_cst[GFC_TYPE_ARRAY_RANK (type) - 1];\n-  size = gfc_conv_descriptor_ubound (decl, rank);\n+  size = gfc_conv_descriptor_ubound_get (decl, rank);\n   size = fold_build2 (MINUS_EXPR, gfc_array_index_type, size,\n-\t\t      gfc_conv_descriptor_lbound (decl, rank));\n+\t\t      gfc_conv_descriptor_lbound_get (decl, rank));\n   size = fold_build2 (PLUS_EXPR, gfc_array_index_type, size,\n \t\t      gfc_index_one_node);\n   if (GFC_TYPE_ARRAY_RANK (type) > 1)\n     size = fold_build2 (MULT_EXPR, gfc_array_index_type, size,\n-\t\t\tgfc_conv_descriptor_stride (decl, rank));\n+\t\t\tgfc_conv_descriptor_stride_get (decl, rank));\n   esize = fold_convert (gfc_array_index_type,\n \t\t\tTYPE_SIZE_UNIT (gfc_get_element_type (type)));\n   size = fold_build2 (MULT_EXPR, gfc_array_index_type, size, esize);\n@@ -202,14 +202,14 @@ gfc_omp_clause_copy_ctor (tree clause, tree dest, tree src)\n \n   gfc_add_modify (&block, dest, src);\n   rank = gfc_rank_cst[GFC_TYPE_ARRAY_RANK (type) - 1];\n-  size = gfc_conv_descriptor_ubound (dest, rank);\n+  size = gfc_conv_descriptor_ubound_get (dest, rank);\n   size = fold_build2 (MINUS_EXPR, gfc_array_index_type, size,\n-\t\t      gfc_conv_descriptor_lbound (dest, rank));\n+\t\t      gfc_conv_descriptor_lbound_get (dest, rank));\n   size = fold_build2 (PLUS_EXPR, gfc_array_index_type, size,\n \t\t      gfc_index_one_node);\n   if (GFC_TYPE_ARRAY_RANK (type) > 1)\n     size = fold_build2 (MULT_EXPR, gfc_array_index_type, size,\n-\t\t\tgfc_conv_descriptor_stride (dest, rank));\n+\t\t\tgfc_conv_descriptor_stride_get (dest, rank));\n   esize = fold_convert (gfc_array_index_type,\n \t\t\tTYPE_SIZE_UNIT (gfc_get_element_type (type)));\n   size = fold_build2 (MULT_EXPR, gfc_array_index_type, size, esize);\n@@ -243,14 +243,14 @@ gfc_omp_clause_assign_op (tree clause ATTRIBUTE_UNUSED, tree dest, tree src)\n   gfc_start_block (&block);\n \n   rank = gfc_rank_cst[GFC_TYPE_ARRAY_RANK (type) - 1];\n-  size = gfc_conv_descriptor_ubound (dest, rank);\n+  size = gfc_conv_descriptor_ubound_get (dest, rank);\n   size = fold_build2 (MINUS_EXPR, gfc_array_index_type, size,\n-\t\t      gfc_conv_descriptor_lbound (dest, rank));\n+\t\t      gfc_conv_descriptor_lbound_get (dest, rank));\n   size = fold_build2 (PLUS_EXPR, gfc_array_index_type, size,\n \t\t      gfc_index_one_node);\n   if (GFC_TYPE_ARRAY_RANK (type) > 1)\n     size = fold_build2 (MULT_EXPR, gfc_array_index_type, size,\n-\t\t\tgfc_conv_descriptor_stride (dest, rank));\n+\t\t\tgfc_conv_descriptor_stride_get (dest, rank));\n   esize = fold_convert (gfc_array_index_type,\n \t\t\tTYPE_SIZE_UNIT (gfc_get_element_type (type)));\n   size = fold_build2 (MULT_EXPR, gfc_array_index_type, size, esize);\n@@ -606,14 +606,14 @@ gfc_trans_omp_array_reduction (tree c, gfc_symbol *sym, locus where)\n \n       gfc_add_modify (&block, decl, outer_sym.backend_decl);\n       rank = gfc_rank_cst[GFC_TYPE_ARRAY_RANK (type) - 1];\n-      size = gfc_conv_descriptor_ubound (decl, rank);\n+      size = gfc_conv_descriptor_ubound_get (decl, rank);\n       size = fold_build2 (MINUS_EXPR, gfc_array_index_type, size,\n-\t\t\t  gfc_conv_descriptor_lbound (decl, rank));\n+\t\t\t  gfc_conv_descriptor_lbound_get (decl, rank));\n       size = fold_build2 (PLUS_EXPR, gfc_array_index_type, size,\n \t\t\t  gfc_index_one_node);\n       if (GFC_TYPE_ARRAY_RANK (type) > 1)\n \tsize = fold_build2 (MULT_EXPR, gfc_array_index_type, size,\n-\t\t\t    gfc_conv_descriptor_stride (decl, rank));\n+\t\t\t    gfc_conv_descriptor_stride_get (decl, rank));\n       esize = fold_convert (gfc_array_index_type,\n \t\t\t    TYPE_SIZE_UNIT (gfc_get_element_type (type)));\n       size = fold_build2 (MULT_EXPR, gfc_array_index_type, size, esize);"}, {"sha": "596e95ceb228668da8d4fec8669ed5594afb3007", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568e8e1e73145dedc973ee9543775b4085e53d26/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568e8e1e73145dedc973ee9543775b4085e53d26/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=568e8e1e73145dedc973ee9543775b4085e53d26", "patch": "@@ -309,8 +309,8 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n \t  offset = gfc_index_zero_node;\n \t  for (n = 0; n < info->dimen; n++)\n \t    {\n-\t      tmp = gfc_conv_descriptor_stride (info->descriptor,\n-\t\t\t\t\t\tgfc_rank_cst[n]);\n+\t      tmp = gfc_conv_descriptor_stride_get (info->descriptor,\n+\t\t\t\t\t\t    gfc_rank_cst[n]);\n \t      tmp = fold_build2 (MULT_EXPR, gfc_array_index_type,\n \t\t\t\t loopse->loop->from[n], tmp);\n \t      offset = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n@@ -1746,9 +1746,8 @@ forall_make_variable_temp (gfc_code *c, stmtblock_t *pre, stmtblock_t *post)\n       if (e->ts.type != BT_CHARACTER)\n \t{\n \t  /* Use the variable offset for the temporary.  */\n-\t  tmp = gfc_conv_descriptor_offset (tse.expr);\n-\t  gfc_add_modify (pre, tmp,\n-\t\tgfc_conv_array_offset (old_sym->backend_decl));\n+\t  tmp = gfc_conv_array_offset (old_sym->backend_decl);\n+\t  gfc_conv_descriptor_offset_set (pre, tse.expr, tmp);\n \t}\n     }\n   else"}]}