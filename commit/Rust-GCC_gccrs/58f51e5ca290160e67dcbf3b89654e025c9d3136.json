{"sha": "58f51e5ca290160e67dcbf3b89654e025c9d3136", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThmNTFlNWNhMjkwMTYwZTY3ZGNiZjNiODk2NTRlMDI1YzlkMzEzNg==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-07-27T17:38:10Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2018-07-27T17:38:10Z"}, "message": "extend.texi (Basic PowerPC Built-in Functions Available on ISA 2.05): Replace __uint128_t with __uint128 and __int128_t with __int128 in built-in...\n\ngcc/ChangeLog:\n\n2018-07-27  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* doc/extend.texi (Basic PowerPC Built-in Functions Available on\n\tISA 2.05):  Replace __uint128_t with __uint128 and __int128_t with\n\t__int128 in built-in function prototypes.\n\t(PowerPC AltiVec Built-in Functions on ISA 2.07): Likewise.\n\t(PowerPC AltiVec Built-in Functions on ISA 3.0): Likewise.\n\nFrom-SVN: r263033", "tree": {"sha": "7c673e0612cecb1ace74b207ce0e39beb63fcfe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c673e0612cecb1ace74b207ce0e39beb63fcfe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f51e5ca290160e67dcbf3b89654e025c9d3136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f51e5ca290160e67dcbf3b89654e025c9d3136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f51e5ca290160e67dcbf3b89654e025c9d3136", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f51e5ca290160e67dcbf3b89654e025c9d3136/comments", "author": null, "committer": null, "parents": [{"sha": "e4bbeea27ee88bca0261978ad389f2aff9a6b7fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4bbeea27ee88bca0261978ad389f2aff9a6b7fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4bbeea27ee88bca0261978ad389f2aff9a6b7fb"}], "stats": {"total": 98, "additions": 53, "deletions": 45}, "files": [{"sha": "8af2e842d5f184d198ef2742cb69ceb65eae0425", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f51e5ca290160e67dcbf3b89654e025c9d3136/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f51e5ca290160e67dcbf3b89654e025c9d3136/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58f51e5ca290160e67dcbf3b89654e025c9d3136", "patch": "@@ -1,3 +1,11 @@\n+2018-07-27  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* doc/extend.texi (Basic PowerPC Built-in Functions Available on\n+\tISA 2.05):  Replace __uint128_t with __uint128 and __int128_t with\n+\t__int128 in built-in function prototypes.\n+\t(PowerPC AltiVec Built-in Functions on ISA 2.07): Likewise.\n+\t(PowerPC AltiVec Built-in Functions on ISA 3.0): Likewise.\n+\n 2018-07-27  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/86696"}, {"sha": "7b4fc7c1e1e2d9752e6e2264426ba7298c0e9a17", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f51e5ca290160e67dcbf3b89654e025c9d3136/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f51e5ca290160e67dcbf3b89654e025c9d3136/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=58f51e5ca290160e67dcbf3b89654e025c9d3136", "patch": "@@ -15762,9 +15762,9 @@ long long __builtin_divde (long long, long long);\n unsigned long long __builtin_divdeu (unsigned long long, unsigned long long);\n int __builtin_divwe (int, int);\n unsigned int __builtin_divweu (unsigned int, unsigned int);\n-vector __int128_t __builtin_pack_vector_int128 (long long, long long);\n+vector __int128 __builtin_pack_vector_int128 (long long, long long);\n void __builtin_rs6000_speculation_barrier (void);\n-long long __builtin_unpack_vector_int128 (vector __int128_t, signed char);\n+long long __builtin_unpack_vector_int128 (vector __int128, signed char);\n @end smallexample\n \n Of these, the @code{__builtin_divde} and @code{__builtin_divdeu} functions\n@@ -18331,57 +18331,57 @@ vector unsigned long long vec_vupklsw (vector int);\n If the ISA 2.07 additions to the vector/scalar (power8-vector)\n instruction set are available, the following additional functions are\n available for 64-bit targets.  New vector types\n-(@var{vector __int128_t} and @var{vector __uint128_t}) are available\n-to hold the @var{__int128_t} and @var{__uint128_t} types to use these\n+(@var{vector __int128} and @var{vector __uint128}) are available\n+to hold the @var{__int128} and @var{__uint128} types to use these\n builtins.\n \n The normal vector extract, and set operations work on\n-@var{vector __int128_t} and @var{vector __uint128_t} types,\n+@var{vector __int128} and @var{vector __uint128} types,\n but the index value must be 0.\n \n @smallexample\n-vector __int128_t vec_vaddcuq (vector __int128_t, vector __int128_t);\n-vector __uint128_t vec_vaddcuq (vector __uint128_t, vector __uint128_t);\n+vector __int128 vec_vaddcuq (vector __int128, vector __int128);\n+vector __uint128 vec_vaddcuq (vector __uint128, vector __uint128);\n \n-vector __int128_t vec_vadduqm (vector __int128_t, vector __int128_t);\n-vector __uint128_t vec_vadduqm (vector __uint128_t, vector __uint128_t);\n+vector __int128 vec_vadduqm (vector __int128, vector __int128);\n+vector __uint128 vec_vadduqm (vector __uint128, vector __uint128);\n \n-vector __int128_t vec_vaddecuq (vector __int128_t, vector __int128_t,\n-                                vector __int128_t);\n-vector __uint128_t vec_vaddecuq (vector __uint128_t, vector __uint128_t,\n-                                 vector __uint128_t);\n+vector __int128 vec_vaddecuq (vector __int128, vector __int128,\n+                                vector __int128);\n+vector __uint128 vec_vaddecuq (vector __uint128, vector __uint128,\n+                                 vector __uint128);\n \n-vector __int128_t vec_vaddeuqm (vector __int128_t, vector __int128_t,\n-                                vector __int128_t);\n-vector __uint128_t vec_vaddeuqm (vector __uint128_t, vector __uint128_t,\n-                                 vector __uint128_t);\n+vector __int128 vec_vaddeuqm (vector __int128, vector __int128,\n+                                vector __int128);\n+vector __uint128 vec_vaddeuqm (vector __uint128, vector __uint128,\n+                                 vector __uint128);\n \n-vector __int128_t vec_vsubecuq (vector __int128_t, vector __int128_t,\n-                                vector __int128_t);\n-vector __uint128_t vec_vsubecuq (vector __uint128_t, vector __uint128_t,\n-                                 vector __uint128_t);\n+vector __int128 vec_vsubecuq (vector __int128, vector __int128,\n+                                vector __int128);\n+vector __uint128 vec_vsubecuq (vector __uint128, vector __uint128,\n+                                 vector __uint128);\n \n-vector __int128_t vec_vsubeuqm (vector __int128_t, vector __int128_t,\n-                                vector __int128_t);\n-vector __uint128_t vec_vsubeuqm (vector __uint128_t, vector __uint128_t,\n-                                 vector __uint128_t);\n+vector __int128 vec_vsubeuqm (vector __int128, vector __int128,\n+                                vector __int128);\n+vector __uint128 vec_vsubeuqm (vector __uint128, vector __uint128,\n+                                 vector __uint128);\n \n-vector __int128_t vec_vsubcuq (vector __int128_t, vector __int128_t);\n-vector __uint128_t vec_vsubcuq (vector __uint128_t, vector __uint128_t);\n+vector __int128 vec_vsubcuq (vector __int128, vector __int128);\n+vector __uint128 vec_vsubcuq (vector __uint128, vector __uint128);\n \n-__int128_t vec_vsubuqm (__int128_t, __int128_t);\n-__uint128_t vec_vsubuqm (__uint128_t, __uint128_t);\n+__int128 vec_vsubuqm (__int128, __int128);\n+__uint128 vec_vsubuqm (__uint128, __uint128);\n \n-vector __int128_t __builtin_bcdadd (vector __int128_t, vector __int128_t);\n-int __builtin_bcdadd_lt (vector __int128_t, vector __int128_t);\n-int __builtin_bcdadd_eq (vector __int128_t, vector __int128_t);\n-int __builtin_bcdadd_gt (vector __int128_t, vector __int128_t);\n-int __builtin_bcdadd_ov (vector __int128_t, vector __int128_t);\n-vector __int128_t bcdsub (vector __int128_t, vector __int128_t);\n-int __builtin_bcdsub_lt (vector __int128_t, vector __int128_t);\n-int __builtin_bcdsub_eq (vector __int128_t, vector __int128_t);\n-int __builtin_bcdsub_gt (vector __int128_t, vector __int128_t);\n-int __builtin_bcdsub_ov (vector __int128_t, vector __int128_t);\n+vector __int128 __builtin_bcdadd (vector __int128, vector __int128);\n+int __builtin_bcdadd_lt (vector __int128, vector __int128);\n+int __builtin_bcdadd_eq (vector __int128, vector __int128);\n+int __builtin_bcdadd_gt (vector __int128, vector __int128);\n+int __builtin_bcdadd_ov (vector __int128, vector __int128);\n+vector __int128 bcdsub (vector __int128, vector __int128);\n+int __builtin_bcdsub_lt (vector __int128, vector __int128);\n+int __builtin_bcdsub_eq (vector __int128, vector __int128);\n+int __builtin_bcdsub_gt (vector __int128, vector __int128);\n+int __builtin_bcdsub_ov (vector __int128, vector __int128);\n @end smallexample\n \n @node PowerPC AltiVec Built-in Functions Available on ISA 3.0\n@@ -18751,14 +18751,14 @@ are available:\n @smallexample\n vector long vec_vprtyb (vector long);\n vector unsigned long vec_vprtyb (vector unsigned long);\n-vector __int128_t vec_vprtyb (vector __int128_t);\n-vector __uint128_t vec_vprtyb (vector __uint128_t);\n+vector __int128 vec_vprtyb (vector __int128);\n+vector __uint128 vec_vprtyb (vector __uint128);\n \n vector long vec_vprtybd (vector long);\n vector unsigned long vec_vprtybd (vector unsigned long);\n \n-vector __int128_t vec_vprtybq (vector __int128_t);\n-vector __uint128_t vec_vprtybd (vector __uint128_t);\n+vector __int128 vec_vprtybq (vector __int128);\n+vector __uint128 vec_vprtybd (vector __uint128);\n @end smallexample\n \n The following built-in vector functions are available for the PowerPC family\n@@ -18960,8 +18960,8 @@ are available:\n @smallexample\n vector long vec_revb (vector long);\n vector unsigned long vec_revb (vector unsigned long);\n-vector __int128_t vec_revb (vector __int128_t);\n-vector __uint128_t vec_revb (vector __uint128_t);\n+vector __int128 vec_revb (vector __int128);\n+vector __uint128 vec_revb (vector __uint128);\n @end smallexample\n \n The @code{vec_revb} built-in function reverses the bytes on an element"}]}