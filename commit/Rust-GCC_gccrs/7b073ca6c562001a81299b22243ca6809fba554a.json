{"sha": "7b073ca6c562001a81299b22243ca6809fba554a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IwNzNjYTZjNTYyMDAxYTgxMjk5YjIyMjQzY2E2ODA5ZmJhNTU0YQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-20T09:21:06Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-20T09:21:06Z"}, "message": "(expand_builtin): For sin, cos, fsqrt, alloca, ffs, strlen,\n\nstrcpy, memcpy, strcmp, memcmp, if args are bad, use expand_call.\n\nFrom-SVN: r6122", "tree": {"sha": "c9b8ed46f2b6872b12eb8f9a5ee2e064d51d345d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9b8ed46f2b6872b12eb8f9a5ee2e064d51d345d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b073ca6c562001a81299b22243ca6809fba554a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b073ca6c562001a81299b22243ca6809fba554a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b073ca6c562001a81299b22243ca6809fba554a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b073ca6c562001a81299b22243ca6809fba554a/comments", "author": null, "committer": null, "parents": [{"sha": "4bc38260fcb82d270b5049603d0353846160538f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc38260fcb82d270b5049603d0353846160538f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc38260fcb82d270b5049603d0353846160538f"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "3b6a368f6b6eb36af10fad3b3f06e9ce5102da14", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b073ca6c562001a81299b22243ca6809fba554a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b073ca6c562001a81299b22243ca6809fba554a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7b073ca6c562001a81299b22243ca6809fba554a", "patch": "@@ -6635,7 +6635,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       if (arglist == 0\n \t  /* Arg could be wrong type if user redeclared this fcn wrong.  */\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != REAL_TYPE)\n-\treturn CONST0_RTX (TYPE_MODE (TREE_TYPE (exp)));\n+\tbreak;\n \n       /* Stabilize and compute the argument.  */\n       if (TREE_CODE (TREE_VALUE (arglist)) != VAR_DECL\n@@ -7051,7 +7051,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       if (arglist == 0\n \t  /* Arg could be non-integer if user redeclared this fcn wrong.  */\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != INTEGER_TYPE)\n-\treturn const0_rtx;\n+\tbreak;\n       current_function_calls_alloca = 1;\n       /* Compute the argument.  */\n       op0 = expand_expr (TREE_VALUE (arglist), NULL_RTX, VOIDmode, 0);\n@@ -7072,7 +7072,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       if (arglist == 0\n \t  /* Arg could be non-integer if user redeclared this fcn wrong.  */\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != INTEGER_TYPE)\n-\treturn const0_rtx;\n+\tbreak;\n \n       /* Compute the argument.  */\n       op0 = expand_expr (TREE_VALUE (arglist), subtarget, VOIDmode, 0);\n@@ -7092,7 +7092,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       if (arglist == 0\n \t  /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE)\n-\treturn const0_rtx;\n+\tbreak;\n       else\n \t{\n \t  tree src = TREE_VALUE (arglist);\n@@ -7176,7 +7176,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n \t  || TREE_CHAIN (arglist) == 0\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != POINTER_TYPE)\n-\treturn const0_rtx;\n+\tbreak;\n       else\n \t{\n \t  tree len = c_strlen (TREE_VALUE (TREE_CHAIN (arglist)));\n@@ -7202,7 +7202,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != POINTER_TYPE\n \t  || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist))))) != INTEGER_TYPE)\n-\treturn const0_rtx;\n+\tbreak;\n       else\n \t{\n \t  tree dest = TREE_VALUE (arglist);\n@@ -7254,7 +7254,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n \t  || TREE_CHAIN (arglist) == 0\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != POINTER_TYPE)\n-\treturn const0_rtx;\n+\tbreak;\n       else if (!HAVE_cmpstrsi)\n \tbreak;\n       {\n@@ -7309,7 +7309,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist)))) != POINTER_TYPE\n \t  || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n \t  || TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist))))) != INTEGER_TYPE)\n-\treturn const0_rtx;\n+\tbreak;\n       else if (!HAVE_cmpstrsi)\n \tbreak;\n       {"}]}