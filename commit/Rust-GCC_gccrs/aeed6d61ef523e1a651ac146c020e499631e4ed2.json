{"sha": "aeed6d61ef523e1a651ac146c020e499631e4ed2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVlZDZkNjFlZjUyM2UxYTY1MWFjMTQ2YzAyMGU0OTk2MzFlNGVkMg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-11-06T18:31:48Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-11-06T18:31:48Z"}, "message": "re PR target/82748 (ICE with __builtin_fabsq and __float128 in copy_to_mode_reg, at explow.c:612)\n\n[gcc]\n2017-11-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/82748\n\t* config/rs6000/rs6000-builtin.def (BU_FLOAT128_1): Delete\n\tfloat128 helper macros, which are no longer used after deleting\n\tthe old 'q' built-in functions, and moving the round to odd\n\tbuilt-in functions to being special built-in functions.\n\t(BU_FLOAT128_2): Likewise.\n\t(BU_FLOAT128_1_HW): Likewise.\n\t(BU_FLOAT128_2_HW): Likewise.\n\t(BU_FLOAT128_3_HW): Likewise.\n\t(FABSQ): Delete old 'q' built-in functions.\n\t(COPYSIGNQ): Likewise.\n\t(SQRTF128_ODD): Move round to odd built-in functions to be\n\tspecial built-in functions, so that we can handle\n\t-mabi=ieeelongdouble.\n\t(TRUNCF128_ODD): Likewise.\n\t(ADDF128_ODD): Likewise.\n\t(SUBF128_ODD): Likewise.\n\t(MULF128_ODD): Likewise.\n\t(DIVF128_ODD): Likewise.\n\t(FMAF128_ODD): Likewise.\n\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Map old 'q'\n\tbuilt-in names to 'f128'.\n\t* config/rs6000/rs6000.c (rs6000_fold_builtin): Remove folding the\n\told 'q' built-in functions, as the machine independent code for\n\t'f128' built-in functions handles this.\n\t(rs6000_expand_builtin): Add expansion for float128 round to odd\n\tfunctions, keying off on -mabi=ieeelongdouble of whether to use\n\tthe KFmode or TFmode variant.\n\t(rs6000_init_builtins): Initialize the _Float128 round to odd\n\tbuilt-in functions.\n\t* doc/extend.texi (PowerPC Built-in Functions): Document the old\n\t_Float128 'q' built-in functions are now mapped into the new\n\t'f128' built-in functions.\n\n[gcc/testsuite]\n2017-11-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/82748\n\t* gcc.target/powerpc/pr82748-1.c: New test.\n\t* gcc.target/powerpc/pr82748-2.c: Likewise.\n\nFrom-SVN: r254462", "tree": {"sha": "4750f4bf2c74b38c4131d0dd014c672688dd60ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4750f4bf2c74b38c4131d0dd014c672688dd60ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeed6d61ef523e1a651ac146c020e499631e4ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeed6d61ef523e1a651ac146c020e499631e4ed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeed6d61ef523e1a651ac146c020e499631e4ed2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeed6d61ef523e1a651ac146c020e499631e4ed2/comments", "author": null, "committer": null, "parents": [{"sha": "65371a7eddd37f9d5d15790486296cb441cabb40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65371a7eddd37f9d5d15790486296cb441cabb40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65371a7eddd37f9d5d15790486296cb441cabb40"}], "stats": {"total": 413, "additions": 279, "deletions": 134}, "files": [{"sha": "3663017d922f14eaf882df99c628522aa33d2de6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aeed6d61ef523e1a651ac146c020e499631e4ed2", "patch": "@@ -1,3 +1,39 @@\n+2017-11-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/82748\n+\t* config/rs6000/rs6000-builtin.def (BU_FLOAT128_1): Delete\n+\tfloat128 helper macros, which are no longer used after deleting\n+\tthe old 'q' built-in functions, and moving the round to odd\n+\tbuilt-in functions to being special built-in functions.\n+\t(BU_FLOAT128_2): Likewise.\n+\t(BU_FLOAT128_1_HW): Likewise.\n+\t(BU_FLOAT128_2_HW): Likewise.\n+\t(BU_FLOAT128_3_HW): Likewise.\n+\t(FABSQ): Delete old 'q' built-in functions.\n+\t(COPYSIGNQ): Likewise.\n+\t(SQRTF128_ODD): Move round to odd built-in functions to be\n+\tspecial built-in functions, so that we can handle\n+\t-mabi=ieeelongdouble.\n+\t(TRUNCF128_ODD): Likewise.\n+\t(ADDF128_ODD): Likewise.\n+\t(SUBF128_ODD): Likewise.\n+\t(MULF128_ODD): Likewise.\n+\t(DIVF128_ODD): Likewise.\n+\t(FMAF128_ODD): Likewise.\n+\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Map old 'q'\n+\tbuilt-in names to 'f128'.\n+\t* config/rs6000/rs6000.c (rs6000_fold_builtin): Remove folding the\n+\told 'q' built-in functions, as the machine independent code for\n+\t'f128' built-in functions handles this.\n+\t(rs6000_expand_builtin): Add expansion for float128 round to odd\n+\tfunctions, keying off on -mabi=ieeelongdouble of whether to use\n+\tthe KFmode or TFmode variant.\n+\t(rs6000_init_builtins): Initialize the _Float128 round to odd\n+\tbuilt-in functions.\n+\t* doc/extend.texi (PowerPC Built-in Functions): Document the old\n+\t_Float128 'q' built-in functions are now mapped into the new\n+\t'f128' built-in functions.\n+\n 2017-11-06  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* collect2.c (add_lto_object): Compile for OBJECT_COFF."}, {"sha": "86857c7658cf299e6dd7399cfb935d79031eeab4", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 24, "deletions": 67, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=aeed6d61ef523e1a651ac146c020e499631e4ed2", "patch": "@@ -660,48 +660,6 @@\n \t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n-/* IEEE 128-bit floating-point builtins.  */\n-#define BU_FLOAT128_2(ENUM, NAME, ATTR, ICODE)                          \\\n-  RS6000_BUILTIN_2 (MISC_BUILTIN_ ## ENUM,              /* ENUM */      \\\n-\t\t    \"__builtin_\" NAME,                  /* NAME */      \\\n-\t\t    RS6000_BTM_FLOAT128,                /* MASK */      \\\n-\t\t    (RS6000_BTC_ ## ATTR                /* ATTR */      \\\n-\t\t     | RS6000_BTC_BINARY),                              \\\n-\t\t    CODE_FOR_ ## ICODE)                 /* ICODE */\n-\n-#define BU_FLOAT128_1(ENUM, NAME, ATTR, ICODE)                          \\\n-  RS6000_BUILTIN_1 (MISC_BUILTIN_ ## ENUM,              /* ENUM */      \\\n-\t\t    \"__builtin_\" NAME,                  /* NAME */      \\\n-\t\t    RS6000_BTM_FLOAT128,                /* MASK */      \\\n-\t\t    (RS6000_BTC_ ## ATTR                /* ATTR */      \\\n-\t\t     | RS6000_BTC_UNARY),                               \\\n-\t\t    CODE_FOR_ ## ICODE)                 /* ICODE */\n-\n-/* IEEE 128-bit floating-point builtins that need the ISA 3.0 hardware.  */\n-#define BU_FLOAT128_1_HW(ENUM, NAME, ATTR, ICODE)                       \\\n-  RS6000_BUILTIN_1 (MISC_BUILTIN_ ## ENUM,              /* ENUM */      \\\n-\t\t    \"__builtin_\" NAME,                  /* NAME */      \\\n-\t\t    RS6000_BTM_FLOAT128_HW,             /* MASK */      \\\n-\t\t    (RS6000_BTC_ ## ATTR                /* ATTR */      \\\n-\t\t     | RS6000_BTC_UNARY),                               \\\n-\t\t    CODE_FOR_ ## ICODE)                 /* ICODE */\n-\n-#define BU_FLOAT128_2_HW(ENUM, NAME, ATTR, ICODE)                       \\\n-  RS6000_BUILTIN_2 (MISC_BUILTIN_ ## ENUM,              /* ENUM */      \\\n-\t\t    \"__builtin_\" NAME,                  /* NAME */      \\\n-\t\t    RS6000_BTM_FLOAT128_HW,             /* MASK */      \\\n-\t\t    (RS6000_BTC_ ## ATTR                /* ATTR */      \\\n-\t\t     | RS6000_BTC_BINARY),                              \\\n-\t\t    CODE_FOR_ ## ICODE)                 /* ICODE */\n-\n-#define BU_FLOAT128_3_HW(ENUM, NAME, ATTR, ICODE)                       \\\n-  RS6000_BUILTIN_3 (MISC_BUILTIN_ ## ENUM,              /* ENUM */      \\\n-\t\t    \"__builtin_\" NAME,                  /* NAME */      \\\n-\t\t    RS6000_BTM_FLOAT128_HW,             /* MASK */      \\\n-\t\t    (RS6000_BTC_ ## ATTR                /* ATTR */      \\\n-\t\t     | RS6000_BTC_TERNARY),                             \\\n-\t\t    CODE_FOR_ ## ICODE)                 /* ICODE */\n-\n /* Miscellaneous builtins for instructions added in ISA 3.0.  These\n    instructions don't require either the DFP or VSX options, just the basic\n    ISA 3.0 enablement since they operate on general purpose registers.  */\n@@ -2365,23 +2323,6 @@ BU_P9_64BIT_2 (CMPEQB,\t\"byte_in_set\",\tCONST,\tcmpeqb)\n BU_P9_OVERLOAD_2 (CMPRB,\t\"byte_in_range\")\n BU_P9_OVERLOAD_2 (CMPRB2,\t\"byte_in_either_range\")\n BU_P9_OVERLOAD_2 (CMPEQB,\t\"byte_in_set\")\n-\n-/* 1 and 2 argument IEEE 128-bit floating-point functions.  These functions use\n-   the older 'q' suffix from libquadmath.  The standard built-in functions\n-   support fabsf128 and copysignf128, but older code used these 'q' versions,\n-   so keep them around.  */\n-BU_FLOAT128_1 (FABSQ,\t\t\"fabsq\",       CONST, abskf2)\n-BU_FLOAT128_2 (COPYSIGNQ,\t\"copysignq\",   CONST, copysignkf3)\n-\n-/* 1, 2, and 3 argument IEEE 128-bit floating point functions that require ISA\n-   3.0 hardware.  These functions use the new 'f128' suffix.  */\n-BU_FLOAT128_1_HW (SQRTF128_ODD,\t \"sqrtf128_round_to_odd\",  CONST, sqrtkf2_odd)\n-BU_FLOAT128_1_HW (TRUNCF128_ODD, \"truncf128_round_to_odd\", CONST, trunckfdf2_odd)\n-BU_FLOAT128_2_HW (ADDF128_ODD,\t \"addf128_round_to_odd\",   CONST, addkf3_odd)\n-BU_FLOAT128_2_HW (SUBF128_ODD,\t \"subf128_round_to_odd\",   CONST, subkf3_odd)\n-BU_FLOAT128_2_HW (MULF128_ODD,\t \"mulf128_round_to_odd\",   CONST, mulkf3_odd)\n-BU_FLOAT128_2_HW (DIVF128_ODD,\t \"divf128_round_to_odd\",   CONST, divkf3_odd)\n-BU_FLOAT128_3_HW (FMAF128_ODD,\t \"fmaf128_round_to_odd\",   CONST, fmakf4_odd)\n \f\n /* 1 argument crypto functions.  */\n BU_CRYPTO_1 (VSBOX,\t\t\"vsbox\",\t  CONST, crypto_vsbox)\n@@ -2517,17 +2458,33 @@ BU_SPECIAL_X (RS6000_BUILTIN_CPU_IS, \"__builtin_cpu_is\",\n BU_SPECIAL_X (RS6000_BUILTIN_CPU_SUPPORTS, \"__builtin_cpu_supports\",\n \t      RS6000_BTM_ALWAYS, RS6000_BTC_MISC)\n \n-BU_SPECIAL_X (RS6000_BUILTIN_NANQ, \"__builtin_nanq\",\n-\t      RS6000_BTM_FLOAT128, RS6000_BTC_CONST)\n+BU_SPECIAL_X (FLOAT128_BUILTIN_SQRTF128_ODD,\n+\t      \"__builtin_sqrtf128_round_to_odd\",\n+\t      RS6000_BTM_FLOAT128_HW, RS6000_BTC_MISC)\n+\n+BU_SPECIAL_X (FLOAT128_BUILTIN_TRUNCF128_ODD,\n+\t      \"__builtin_truncf128_round_to_odd\",\n+\t      RS6000_BTM_FLOAT128_HW, RS6000_BTC_MISC)\n+\n+BU_SPECIAL_X (FLOAT128_BUILTIN_ADDF128_ODD,\n+\t      \"__builtin_addf128_round_to_odd\",\n+\t      RS6000_BTM_FLOAT128_HW, RS6000_BTC_MISC)\n+\n+BU_SPECIAL_X (FLOAT128_BUILTIN_SUBF128_ODD,\n+\t      \"__builtin_subf128_round_to_odd\",\n+\t      RS6000_BTM_FLOAT128_HW, RS6000_BTC_MISC)\n \n-BU_SPECIAL_X (RS6000_BUILTIN_NANSQ, \"__builtin_nansq\",\n-\t      RS6000_BTM_FLOAT128, RS6000_BTC_CONST)\n+BU_SPECIAL_X (FLOAT128_BUILTIN_MULF128_ODD,\n+\t      \"__builtin_mulf128_round_to_odd\",\n+\t      RS6000_BTM_FLOAT128_HW, RS6000_BTC_MISC)\n \n-BU_SPECIAL_X (RS6000_BUILTIN_INFQ, \"__builtin_infq\",\n-\t      RS6000_BTM_FLOAT128, RS6000_BTC_CONST)\n+BU_SPECIAL_X (FLOAT128_BUILTIN_DIVF128_ODD,\n+\t      \"__builtin_divf128_round_to_odd\",\n+\t      RS6000_BTM_FLOAT128_HW, RS6000_BTC_MISC)\n \n-BU_SPECIAL_X (RS6000_BUILTIN_HUGE_VALQ, \"__builtin_huge_valq\",\n-\t      RS6000_BTM_FLOAT128, RS6000_BTC_CONST)\n+BU_SPECIAL_X (FLOAT128_BUILTIN_FMAF128_ODD,\n+\t      \"__builtin_fmaf128_round_to_odd\",\n+\t      RS6000_BTM_FLOAT128_HW, RS6000_BTC_MISC)\n \n /* Darwin CfString builtin.  */\n BU_SPECIAL_X (RS6000_BUILTIN_CFSTRING, \"__builtin_cfstring\", RS6000_BTM_ALWAYS,"}, {"sha": "1e7128102e4b22a9ab8a34c61ed5ea06ea010d77", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=aeed6d61ef523e1a651ac146c020e499631e4ed2", "patch": "@@ -683,6 +683,17 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n       builtin_define (\"__builtin_vsx_xvnmsubmsp=__builtin_vsx_xvnmsubsp\");\n     }\n \n+  /* Map the old _Float128 'q' builtins into the new 'f128' builtins.  */\n+  if (TARGET_FLOAT128_TYPE)\n+    {\n+      builtin_define (\"__builtin_fabsq=__builtin_fabsf128\");\n+      builtin_define (\"__builtin_copysignq=__builtin_copysignf128\");\n+      builtin_define (\"__builtin_nanq=__builtin_nanf128\");\n+      builtin_define (\"__builtin_nansq=__builtin_nansf128\");\n+      builtin_define (\"__builtin_infq=__builtin_inff128\");\n+      builtin_define (\"__builtin_huge_valq=__builtin_huge_valf128\");\n+    }\n+\n   /* Tell users they can use __builtin_bswap{16,64}.  */\n   builtin_define (\"__HAVE_BSWAP__\");\n "}, {"sha": "b4ab2ab53e39a1388cda6c8476a423600c4540e3", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 65, "deletions": 41, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=aeed6d61ef523e1a651ac146c020e499631e4ed2", "patch": "@@ -16108,39 +16108,11 @@ rs6000_invalid_builtin (enum rs6000_builtins fncode)\n    from ia64.c.  */\n \n static tree\n-rs6000_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED,\n-\t\t     tree *args, bool ignore ATTRIBUTE_UNUSED)\n+rs6000_fold_builtin (tree fndecl ATTRIBUTE_UNUSED,\n+\t\t     int n_args ATTRIBUTE_UNUSED,\n+\t\t     tree *args ATTRIBUTE_UNUSED,\n+\t\t     bool ignore ATTRIBUTE_UNUSED)\n {\n-  if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n-    {\n-      enum rs6000_builtins fn_code\n-\t= (enum rs6000_builtins) DECL_FUNCTION_CODE (fndecl);\n-      switch (fn_code)\n-\t{\n-\tcase RS6000_BUILTIN_NANQ:\n-\tcase RS6000_BUILTIN_NANSQ:\n-\t  {\n-\t    tree type = TREE_TYPE (TREE_TYPE (fndecl));\n-\t    const char *str = c_getstr (*args);\n-\t    int quiet = fn_code == RS6000_BUILTIN_NANQ;\n-\t    REAL_VALUE_TYPE real;\n-\n-\t    if (str && real_nan (&real, str, quiet, TYPE_MODE (type)))\n-\t      return build_real (type, real);\n-\t    return NULL_TREE;\n-\t  }\n-\tcase RS6000_BUILTIN_INFQ:\n-\tcase RS6000_BUILTIN_HUGE_VALQ:\n-\t  {\n-\t    tree type = TREE_TYPE (TREE_TYPE (fndecl));\n-\t    REAL_VALUE_TYPE inf;\n-\t    real_inf (&inf);\n-\t    return build_real (type, inf);\n-\t  }\n-\tdefault:\n-\t  break;\n-\t}\n-    }\n #ifdef SUBTARGET_FOLD_BUILTIN\n   return SUBTARGET_FOLD_BUILTIN (fndecl, n_args, args, ignore);\n #else\n@@ -16772,6 +16744,41 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     case RS6000_BUILTIN_CPU_SUPPORTS:\n       return cpu_expand_builtin (fcode, exp, target);\n \n+    case FLOAT128_BUILTIN_SQRTF128_ODD:\n+      return rs6000_expand_unop_builtin (TARGET_IEEEQUAD\n+\t\t\t\t\t ? CODE_FOR_sqrttf2_odd\n+\t\t\t\t\t : CODE_FOR_sqrtkf2_odd, exp, target);\n+\n+    case FLOAT128_BUILTIN_TRUNCF128_ODD:\n+      return rs6000_expand_unop_builtin (TARGET_IEEEQUAD\n+\t\t\t\t\t ? CODE_FOR_trunctfdf2_odd\n+\t\t\t\t\t : CODE_FOR_trunckfdf2_odd, exp, target);\n+\n+    case FLOAT128_BUILTIN_ADDF128_ODD:\n+      return rs6000_expand_binop_builtin (TARGET_IEEEQUAD\n+\t\t\t\t\t  ? CODE_FOR_addtf3_odd\n+\t\t\t\t\t  : CODE_FOR_addkf3_odd, exp, target);\n+\n+    case FLOAT128_BUILTIN_SUBF128_ODD:\n+      return rs6000_expand_binop_builtin (TARGET_IEEEQUAD\n+\t\t\t\t\t  ? CODE_FOR_subtf3_odd\n+\t\t\t\t\t  : CODE_FOR_subkf3_odd, exp, target);\n+\n+    case FLOAT128_BUILTIN_MULF128_ODD:\n+      return rs6000_expand_binop_builtin (TARGET_IEEEQUAD\n+\t\t\t\t\t  ? CODE_FOR_multf3_odd\n+\t\t\t\t\t  : CODE_FOR_mulkf3_odd, exp, target);\n+\n+    case FLOAT128_BUILTIN_DIVF128_ODD:\n+      return rs6000_expand_binop_builtin (TARGET_IEEEQUAD\n+\t\t\t\t\t  ? CODE_FOR_divtf3_odd\n+\t\t\t\t\t  : CODE_FOR_divkf3_odd, exp, target);\n+\n+    case FLOAT128_BUILTIN_FMAF128_ODD:\n+      return rs6000_expand_ternop_builtin (TARGET_IEEEQUAD\n+\t\t\t\t\t   ? CODE_FOR_fmatf4_odd\n+\t\t\t\t\t   : CODE_FOR_fmakf4_odd, exp, target);\n+\n     case ALTIVEC_BUILTIN_MASK_FOR_LOAD:\n     case ALTIVEC_BUILTIN_MASK_FOR_STORE:\n       {\n@@ -17101,15 +17108,6 @@ rs6000_init_builtins (void)\n   if (TARGET_EXTRA_BUILTINS || TARGET_PAIRED_FLOAT)\n     rs6000_common_init_builtins ();\n \n-  ftype = build_function_type_list (ieee128_float_type_node,\n-\t\t\t\t    const_str_type_node, NULL_TREE);\n-  def_builtin (\"__builtin_nanq\", ftype, RS6000_BUILTIN_NANQ);\n-  def_builtin (\"__builtin_nansq\", ftype, RS6000_BUILTIN_NANSQ);\n-\n-  ftype = build_function_type_list (ieee128_float_type_node, NULL_TREE);\n-  def_builtin (\"__builtin_infq\", ftype, RS6000_BUILTIN_INFQ);\n-  def_builtin (\"__builtin_huge_valq\", ftype, RS6000_BUILTIN_HUGE_VALQ);\n-\n   ftype = builtin_function_type (DFmode, DFmode, DFmode, VOIDmode,\n \t\t\t\t RS6000_BUILTIN_RECIP, \"__builtin_recipdiv\");\n   def_builtin (\"__builtin_recipdiv\", ftype, RS6000_BUILTIN_RECIP);\n@@ -17159,6 +17157,32 @@ rs6000_init_builtins (void)\n   def_builtin (\"__builtin_cpu_is\", ftype, RS6000_BUILTIN_CPU_IS);\n   def_builtin (\"__builtin_cpu_supports\", ftype, RS6000_BUILTIN_CPU_SUPPORTS);\n \n+  ftype = build_function_type_list (ieee128_float_type_node,\n+\t\t\t\t    ieee128_float_type_node, NULL_TREE);\n+  def_builtin (\"__builtin_sqrtf128_round_to_odd\", ftype,\n+\t       FLOAT128_BUILTIN_SQRTF128_ODD);\n+  def_builtin (\"__builtin_truncf128_round_to_odd\", ftype,\n+\t       FLOAT128_BUILTIN_TRUNCF128_ODD);\n+\n+  ftype = build_function_type_list (ieee128_float_type_node,\n+\t\t\t\t    ieee128_float_type_node,\n+\t\t\t\t    ieee128_float_type_node, NULL_TREE);\n+  def_builtin (\"__builtin_addf128_round_to_odd\", ftype,\n+\t       FLOAT128_BUILTIN_ADDF128_ODD);\n+  def_builtin (\"__builtin_subf128_round_to_odd\", ftype,\n+\t       FLOAT128_BUILTIN_SUBF128_ODD);\n+  def_builtin (\"__builtin_mulf128_round_to_odd\", ftype,\n+\t       FLOAT128_BUILTIN_MULF128_ODD);\n+  def_builtin (\"__builtin_divf128_round_to_odd\", ftype,\n+\t       FLOAT128_BUILTIN_DIVF128_ODD);\n+\n+  ftype = build_function_type_list (ieee128_float_type_node,\n+\t\t\t\t    ieee128_float_type_node,\n+\t\t\t\t    ieee128_float_type_node,\n+\t\t\t\t    ieee128_float_type_node, NULL_TREE);\n+  def_builtin (\"__builtin_fmaf128_round_to_odd\", ftype,\n+\t       FLOAT128_BUILTIN_FMAF128_ODD);\n+\n   /* AIX libm provides clog as __clog.  */\n   if (TARGET_XCOFF &&\n       (tdecl = builtin_decl_explicit (BUILT_IN_CLOG)) != NULL_TREE)"}, {"sha": "63b58c0681e856da7ecc8c57c5d2f43613389a1d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=aeed6d61ef523e1a651ac146c020e499631e4ed2", "patch": "@@ -15547,36 +15547,19 @@ Additional built-in functions are available for the 64-bit PowerPC\n family of processors, for efficient use of 128-bit floating point\n (@code{__float128}) values.\n \n-The following floating-point built-in functions are available with\n-@code{-mfloat128} and Altivec support.  All of them implement the\n-function that is part of the name.\n+Previous versions of GCC supported some 'q' builtins for IEEE 128-bit\n+floating point.  These functions are now mapped into the equivalent\n+'f128' builtin functions.\n \n @smallexample\n-__float128 __builtin_fabsq (__float128)\n-__float128 __builtin_copysignq (__float128, __float128)\n+__builtin_fabsq is mapped into __builtin_fabsf128\n+__builtin_copysignq is mapped into __builtin_copysignf128\n+__builtin_infq is mapped into __builtin_inff128\n+__builtin_huge_valq is mapped into __builtin_huge_valf128\n+__builtin_nanq is mapped into __builtin_nanf128\n+__builtin_nansq is mapped into __builtin_nansf128\n @end smallexample\n \n-The following built-in functions are available with @code{-mfloat128}\n-and Altivec support.\n-\n-@table @code\n-@item __float128 __builtin_infq (void)\n-Similar to @code{__builtin_inf}, except the return type is @code{__float128}.\n-@findex __builtin_infq\n-\n-@item __float128 __builtin_huge_valq (void)\n-Similar to @code{__builtin_huge_val}, except the return type is @code{__float128}.\n-@findex __builtin_huge_valq\n-\n-@item __float128 __builtin_nanq (void)\n-Similar to @code{__builtin_nan}, except the return type is @code{__float128}.\n-@findex __builtin_nanq\n-\n-@item __float128 __builtin_nansq (void)\n-Similar to @code{__builtin_nans}, except the return type is @code{__float128}.\n-@findex __builtin_nansq\n-@end table\n-\n The following built-in functions are available on Linux 64-bit systems\n that use the ISA 3.0 instruction set.\n "}, {"sha": "2ab7972410cce0bfe41a3659dd092f9f408c74a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aeed6d61ef523e1a651ac146c020e499631e4ed2", "patch": "@@ -1,3 +1,9 @@\n+2017-11-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/82748\n+\t* gcc.target/powerpc/pr82748-1.c: New test.\n+\t* gcc.target/powerpc/pr82748-2.c: Likewise.\n+\n 2017-11-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/65579"}, {"sha": "15a746bcf63ea9220c8f280a727fc70403c9a3c2", "filename": "gcc/testsuite/gcc.target/powerpc/pr82748-1.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr82748-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr82748-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr82748-1.c?ref=aeed6d61ef523e1a651ac146c020e499631e4ed2", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2 -mabi=ieeelongdouble -Wno-psabi\" } */\n+\n+/* Make sure the old 'q' builtin functions work correctly when the long double\n+   default has been changed to be IEEE 128-bit floating point.  */\n+\n+_Float128\n+do_fabs_f (_Float128 a)\n+{\n+  return __builtin_fabsq (a);\n+}\n+\n+_Float128\n+do_copysign_f (_Float128 a, _Float128 b)\n+{\n+  return __builtin_copysignq (a, b);\n+}\n+\n+_Float128\n+do_inf_f (void)\n+{\n+  return __builtin_infq ();\n+}\n+\n+_Float128\n+do_nan_f (void)\n+{\n+  return __builtin_nanq (\"\");\n+}\n+\n+_Float128\n+do_nans_f (void)\n+{\n+  return __builtin_nansq (\"\");\n+}\n+\n+_Float128\n+do_huge_val_f (void)\n+{\n+  return __builtin_huge_valq ();\n+}\n+\n+long double\n+do_fabs_ld (long double a)\n+{\n+  return __builtin_fabsq (a);\n+}\n+\n+long double\n+do_copysign_ld (long double a, long double b)\n+{\n+  return __builtin_copysignq (a, b);\n+}\n+\n+long double\n+do_inf_ld (void)\n+{\n+  return __builtin_infq ();\n+}\n+\n+long double\n+do_nan_ld (void)\n+{\n+  return __builtin_nanq (\"\");\n+}\n+\n+long double\n+do_nans_ld (void)\n+{\n+  return __builtin_nansq (\"\");\n+}\n+\n+long double\n+do_huge_val_ld (void)\n+{\n+  return __builtin_huge_valq ();\n+}\n+\n+/* { dg-final { scan-assembler     {\\mxsabsqp\\M}   } } */\n+/* { dg-final { scan-assembler     {\\mxscpsgnqp\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mbl\\M} }      } */"}, {"sha": "0079394b1016ef9df3993096aa6e7b5242293cf1", "filename": "gcc/testsuite/gcc.target/powerpc/pr82748-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr82748-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeed6d61ef523e1a651ac146c020e499631e4ed2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr82748-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr82748-2.c?ref=aeed6d61ef523e1a651ac146c020e499631e4ed2", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2 -mabi=ibmlongdouble -Wno-psabi\" } */\n+\n+/* Make sure the old 'q' builtin functions work correctly when the long double\n+   default uses the IBM double-double format.  */\n+\n+_Float128\n+do_fabs (_Float128 a)\n+{\n+  return __builtin_fabsq (a);\n+}\n+\n+_Float128\n+do_copysign (_Float128 a, _Float128 b)\n+{\n+  return __builtin_copysignq (a, b);\n+}\n+\n+_Float128\n+do_inf (void)\n+{\n+  return __builtin_infq ();\n+}\n+\n+_Float128\n+do_nan (void)\n+{\n+  return __builtin_nanq (\"\");\n+}\n+\n+_Float128\n+do_nans (void)\n+{\n+  return __builtin_nansq (\"\");\n+}\n+\n+_Float128\n+do_huge_val (void)\n+{\n+  return __builtin_huge_valq ();\n+}\n+\n+/* { dg-final { scan-assembler     {\\mxsabsqp\\M}   } } */\n+/* { dg-final { scan-assembler     {\\mxscpsgnqp\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mbl\\M} }      } */"}]}