{"sha": "7d31a1f43716b73d356552e8879d061f8f5a3dbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QzMWExZjQzNzE2YjczZDM1NjU1MmU4ODc5ZDA2MWY4ZjVhM2RiYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-06-29T12:05:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-06-29T12:05:32Z"}, "message": "lwg-active.html, [...]: Import Revision 37.\n\n2005-06-29  Paolo Carlini  <pcarlini@suse.de>\n\n\t* docs/html/ext/lwg-active.html, lwg-defects.html: Import Revision 37.\n\t* docs/html/ext/howto.html: Adjust.\n\nFrom-SVN: r101418", "tree": {"sha": "dab9eb2abcc32d1520df8f8d7ee818fc98dd9a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dab9eb2abcc32d1520df8f8d7ee818fc98dd9a90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d31a1f43716b73d356552e8879d061f8f5a3dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d31a1f43716b73d356552e8879d061f8f5a3dbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d31a1f43716b73d356552e8879d061f8f5a3dbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d31a1f43716b73d356552e8879d061f8f5a3dbc/comments", "author": null, "committer": null, "parents": [{"sha": "c7b802913b04dab9286d61358922517fb266db12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b802913b04dab9286d61358922517fb266db12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b802913b04dab9286d61358922517fb266db12"}], "stats": {"total": 6454, "additions": 2623, "deletions": 3831}, "files": [{"sha": "14d29d5c4d7f960595800de533da75b5857f70a0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d31a1f43716b73d356552e8879d061f8f5a3dbc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d31a1f43716b73d356552e8879d061f8f5a3dbc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7d31a1f43716b73d356552e8879d061f8f5a3dbc", "patch": "@@ -1,3 +1,8 @@\n+2005-06-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* docs/html/ext/lwg-active.html, lwg-defects.html: Import Revision 37.\n+\t* docs/html/ext/howto.html: Adjust.\n+\n 2005-06-29  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/22131"}, {"sha": "0b7b17b59de5b618fd0b3e891fdcfdf21d156142", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d31a1f43716b73d356552e8879d061f8f5a3dbc/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d31a1f43716b73d356552e8879d061f8f5a3dbc/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=7d31a1f43716b73d356552e8879d061f8f5a3dbc", "patch": "@@ -503,19 +503,19 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>Replace &quot;new&quot; with &quot;::new&quot;.\n     </dd>\n \n-    <dt><a href=\"lwg-active.html#409\">409</a>:\n+    <dt><a href=\"lwg-defects.html#409\">409</a>:\n         <em>Closing an fstream should clear the error state</em>\n     </dt>\n     <dd>Have <code>open</code> clear the error flags.\n     </dd>\n \n-    <dt><a href=\"lwg-active.html#434\">434</a>:\n+    <dt><a href=\"lwg-defects.html#434\">434</a>:\n         <em>bitset::to_string() hard to use</em>\n     </dt>\n     <dd>Add three overloads, taking fewer template arguments.\n     </dd>\n \n-    <dt><a href=\"lwg-active.html#453\">453</a>:\n+    <dt><a href=\"lwg-defects.html#453\">453</a>:\n         <em>basic_stringbuf::seekoff need not always fail for an empty stream</em>\n     </dt>\n     <dd>Don't fail if the next pointer is null and newoff is zero."}, {"sha": "e698dc582d61a32c6fc2e0f98859b837611389ae", "filename": "libstdc++-v3/docs/html/ext/lwg-active.html", "status": "modified", "additions": 1621, "deletions": 3776, "changes": 5397, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d31a1f43716b73d356552e8879d061f8f5a3dbc/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d31a1f43716b73d356552e8879d061f8f5a3dbc/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html?ref=7d31a1f43716b73d356552e8879d061f8f5a3dbc"}, {"sha": "f7ff410c01de6bd90dfb262dfc45f83f0c668e8d", "filename": "libstdc++-v3/docs/html/ext/lwg-defects.html", "status": "modified", "additions": 994, "deletions": 52, "changes": 1046, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d31a1f43716b73d356552e8879d061f8f5a3dbc/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d31a1f43716b73d356552e8879d061f8f5a3dbc/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html?ref=7d31a1f43716b73d356552e8879d061f8f5a3dbc", "patch": "@@ -5,22 +5,22 @@\n <table>\n <tbody><tr>\n <td align=\"left\">Doc. no.</td>\n-<td align=\"left\">N1763=05-0023</td>\n+<td align=\"left\">N1831=05-0091</td>\n </tr>\n <tr>\n <td align=\"left\">Date:</td>\n-<td align=\"left\">2005-03-04</td>\n+<td align=\"left\">2005-06-24</td>\n </tr>\n <tr>\n <td align=\"left\">Project:</td>\n <td align=\"left\">Programming Language C++</td>\n </tr>\n <tr>\n <td align=\"left\">Reply to:</td>\n-<td align=\"left\">Matt Austern &lt;austern@google.com&gt;</td>\n+<td align=\"left\">Howard Hinnant &lt;howard.hinnant@gmail.com&gt;</td>\n </tr>\n </tbody></table>\n-<h1>C++ Standard Library Defect Report List (Revision 35)</h1>\n+<h1>C++ Standard Library Defect Report List (Revision R37)</h1>\n   <p>Reference ISO/IEC IS 14882:1998(E)</p>\n   <p>Also see:</p>\n     <ul>\n@@ -42,19 +42,28 @@ <h1>C++ Standard Library Defect Report List (Revision 35)</h1>\n   document.</p>\n <h2>Revision History</h2>\n <ul>\n+<li>R37: \n+2005-06 mid-term mailing.\n+Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#498\">498</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#503\">503</a>.\n+</li>\n+<li>R36: \n+2005-04 post-Lillehammer mailing. All issues in \"ready\" status except\n+for <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#454\">454</a> were moved to \"DR\" status, and all issues\n+previously in \"DR\" status were moved to \"WP\".\n+</li>\n <li>R35: \n 2005-03 pre-Lillehammer mailing.\n </li>\n <li>R34: \n-2005-01 mid-term mailing.  Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#488\">488</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#494\">494</a>.\n+2005-01 mid-term mailing.  Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#488\">488</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#494\">494</a>.\n </li>\n <li>R33: \n-2004-11 post-Redmond mailing.  Reflections actions taken in Redmond.\n+2004-11 post-Redmond mailing. Reflects actions taken in Redmond.\n </li>\n <li>R32: \n 2004-09 pre-Redmond mailing: reflects new proposed resolutions and\n new issues received after the 2004-07 mailing.  Added\n-new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#479\">479</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#481\">481</a>.\n+new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#479\">479</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#481\">481</a>.\n </li>\n <li>R31: \n 2004-07 mid-term mailing: reflects new proposed resolutions and\n@@ -64,10 +73,10 @@ <h2>Revision History</h2>\n <li>R30: \n Post-Sydney mailing: reflects decisions made at the Sydney meeting.\n Voted all \"Ready\" issues from R29 into the working paper.\n-Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#460\">460</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#462\">462</a>.\n+Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#460\">460</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#462\">462</a>.\n </li>\n <li>R29: \n-Pre-Sydney mailing.  Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#441\">441</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#457\">457</a>.\n+Pre-Sydney mailing.  Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#441\">441</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#457\">457</a>.\n </li>\n <li>R28: \n Post-Kona mailing: reflects decisions made at the Kona meeting.\n@@ -96,7 +105,7 @@ <h2>Revision History</h2>\n Moved issues in the TC to TC status.\n </li>\n <li>R22: \n-Post-Cura\ufffdao mailing.  Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#362\">362</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#366\">366</a>.\n+Post-Cura\ufffdao mailing.  Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#362\">362</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#366\">366</a>.\n </li>\n <li>R21: \n Pre-Cura\ufffdao mailing.  Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#351\">351</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#361\">361</a>.\n@@ -222,7 +231,7 @@ <h2>Revision History</h2>\n in Dublin. (99-0016/N1193, 21 Apr 99)\n </li>\n <li>R7: \n-pre-Dublin updated: Added issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#130\">130</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#131\">131</a>,\n+pre-Dublin updated: Added issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#130\">130</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#131\">131</a>,\n <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#132\">132</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#133\">133</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#134\">134</a>,\n <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#135\">135</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#136\">136</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#137\">137</a>,\n <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#138\">138</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#139\">139</a> (31 Mar 99)\n@@ -618,7 +627,7 @@ <h2>Defect Reports</h2>\n <p>See 99-0040/N1216, October 22, 1999, by Stephen D. Clamage for the analysis\n supporting to the proposed resolution.</p>\n <hr>\n-<a name=\"11\"><h3>11.&nbsp;Bitset minor problems</h3></a><p><b>Section:</b>&nbsp;23.3.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.template.bitset\"> [lib.template.bitset]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;22 Jan 1998</p>\n+<a name=\"11\"></a><h3><a name=\"11\">11.&nbsp;Bitset minor problems</a></h3><p><b>Section:</b>&nbsp;23.3.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.template.bitset\"> [lib.template.bitset]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;22 Jan 1998</p>\n <p>(1) bitset&lt;&gt;::operator[] is mentioned in the class synopsis (23.3.5), but it is\n not documented in 23.3.5.2. </p>\n \n@@ -671,7 +680,7 @@ <h2>Defect Reports</h2>\n <p>In 27.6.1.2.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream::extractors\"> [lib.istream::extractors]</a>, replace \"eos\" with\n \"charT()\"</p>\n <hr>\n-<a name=\"14\"><h3>14.&nbsp;Locale::combine should be const</h3></a><p><b>Section:</b>&nbsp;22.1.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.members\"> [lib.locale.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n+<a name=\"14\"></a><h3><a name=\"14\">14.&nbsp;Locale::combine should be const</a></h3><p><b>Section:</b>&nbsp;22.1.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.members\"> [lib.locale.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n <p>locale::combine is the only member function of locale (other than constructors and\n destructor) that is not const. There is no reason for it not to be const, and good reasons\n why it should have been const. Furthermore, leaving it non-const conflicts with 22.1.1\n@@ -880,7 +889,7 @@ <h2>Defect Reports</h2>\n \"do_convert\" to \"do_in or do_out\". Also, in 22.2.1.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>, change \"do_convert()\" to \"do_in\n or do_out\". </p>\n <hr>\n-<a name=\"25\"><h3>25.&nbsp;String operator&lt;&lt; uses width() value wrong</h3></a><p><b>Section:</b>&nbsp;21.3.7.9 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.io\"> [lib.string.io]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n+<a name=\"25\"></a><h3><a name=\"25\">25.&nbsp;String operator&lt;&lt; uses width() value wrong</a></h3><p><b>Section:</b>&nbsp;21.3.7.9 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.io\"> [lib.string.io]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n <p>In the description of operator&lt;&lt; applied to strings, the standard says that uses\n the smaller of os.width() and str.size(), to pad \"as described in stage 3\"\n elsewhere; but this is inconsistent, as this allows no possibility of space for padding. </p>\n@@ -1200,7 +1209,7 @@ <h2>Defect Reports</h2>\n editor's option) replace it with a place-holder to keep the paragraph\n numbering the same. </p>\n <hr>\n-<a name=\"41\"></a><h3><a name=\"41\">41.&nbsp;Ios_base needs clear(), exceptions()</a></h3><p><b>Section:</b>&nbsp;27.4.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ios.base\"> [lib.ios.base]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n+<a name=\"41\"><h3>41.&nbsp;Ios_base needs clear(), exceptions()</h3></a><p><b>Section:</b>&nbsp;27.4.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ios.base\"> [lib.ios.base]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n <p>The description of ios_base::iword() and pword() in 27.4.2.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ios.members.static\"> [lib.ios.members.static]</a>, say that if they fail, they \"set badbit,\n which may throw an exception\". However, ios_base offers no\n interface to set or to test badbit; those interfaces are defined in\n@@ -1662,8 +1671,7 @@ <h2>Defect Reports</h2>\n \n <p>for any sequences of characters; and the effect of pushing\n back a character c by</p>\n-<pre>\n-  ungetc(c, f);\n+<pre>  ungetc(c, f);\n </pre>\n \n <p>is the same as the effect of</p>\n@@ -2360,7 +2368,7 @@ <h2>Defect Reports</h2>\n   extracted.\n </blockquote>\n <hr>\n-<a name=\"69\"><h3>69.&nbsp;Must elements of a vector be contiguous?</h3></a><p><b>Section:</b>&nbsp;23.2.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector\"> [lib.vector]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Andrew Koenig&nbsp; <b>Date:</b>&nbsp;29 Jul 1998</p>\n+<a name=\"69\"></a><h3><a name=\"69\">69.&nbsp;Must elements of a vector be contiguous?</a></h3><p><b>Section:</b>&nbsp;23.2.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector\"> [lib.vector]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Andrew Koenig&nbsp; <b>Date:</b>&nbsp;29 Jul 1998</p>\n <p>The issue is this: Must the elements of a vector be in contiguous memory?</p>\n \n <p>(Please note that this is entirely separate from the question of\n@@ -2604,7 +2612,7 @@ <h2>Defect Reports</h2>\n <p>to:</p>\n <pre>   template&lt;class T&gt; complex&lt;T&gt; polar(const T&amp; rho, const T&amp; theta = 0); </pre>\n <hr>\n-<a name=\"80\"></a><h3><a name=\"80\">80.&nbsp;Global Operators of complex declared twice</a></h3><p><b>Section:</b>&nbsp;26.2.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.complex.synopsis\"> [lib.complex.synopsis]</a>, 26.2.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.complex\"> [lib.complex]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nico Josuttis&nbsp; <b>Date:</b>&nbsp;29 Sep 1998</p>\n+<a name=\"80\"><h3>80.&nbsp;Global Operators of complex declared twice</h3></a><p><b>Section:</b>&nbsp;26.2.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.complex.synopsis\"> [lib.complex.synopsis]</a>, 26.2.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.complex\"> [lib.complex]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nico Josuttis&nbsp; <b>Date:</b>&nbsp;29 Sep 1998</p>\n <p>Both 26.2.1 and 26.2.2 contain declarations of global operators for\n class complex. This redundancy should be removed.</p>\n <p><b>Proposed resolution:</b></p>\n@@ -2861,7 +2869,7 @@ <h2>Defect Reports</h2>\n    of input iterators, we can't impose any requirements in the Input\n    Iterator requirements table that forward iterators don't satisfy.</p>\n <hr>\n-<a name=\"103\"><h3>103.&nbsp;set::iterator is required to be modifiable, but this allows modification of keys</h3></a><p><b>Section:</b>&nbsp;23.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.associative.reqmts\"> [lib.associative.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;AFNOR&nbsp; <b>Date:</b>&nbsp;7 Oct 1998</p>\n+<a name=\"103\"></a><h3><a name=\"103\">103.&nbsp;set::iterator is required to be modifiable, but this allows modification of keys</a></h3><p><b>Section:</b>&nbsp;23.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.associative.reqmts\"> [lib.associative.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;AFNOR&nbsp; <b>Date:</b>&nbsp;7 Oct 1998</p>\n <p>Set::iterator is described as implementation-defined with a\n reference to the container requirement; the container requirement says\n that const_iterator is an iterator pointing to const T and iterator an\n@@ -3132,7 +3140,7 @@ <h2>Defect Reports</h2>\n   <pre>bool equal(const istreambuf_iterator&amp; b) const;</pre>\n </blockquote>\n <hr>\n-<a name=\"112\"></a><h3><a name=\"112\">112.&nbsp;Minor typo in <tt>ostreambuf_iterator</tt> constructor</a></h3><p><b>Section:</b>&nbsp;24.5.4.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.ostreambuf.iter.cons\"> [lib.ostreambuf.iter.cons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;20 Oct 1998</p>\n+<a name=\"112\"><h3>112.&nbsp;Minor typo in <tt>ostreambuf_iterator</tt> constructor</h3></a><p><b>Section:</b>&nbsp;24.5.4.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.ostreambuf.iter.cons\"> [lib.ostreambuf.iter.cons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;20 Oct 1998</p>\n <p>The <b>requires</b> clause for <tt>ostreambuf_iterator</tt>'s\n constructor from an <tt>ostream_type</tt> (24.5.4.1, paragraph 1)\n reads \"<i>s</i> is not null\". However, <i>s</i> is a\n@@ -3150,7 +3158,7 @@ <h2>Defect Reports</h2>\n   <p><b>Requires</b>: <tt>s.rdbuf()</tt> is not null.</p>\n </blockquote>\n <hr>\n-<a name=\"114\"><h3>114.&nbsp;Placement forms example in error twice</h3></a><p><b>Section:</b>&nbsp;18.4.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-support.html#lib.new.delete.placement\"> [lib.new.delete.placement]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Steve Clamage&nbsp; <b>Date:</b>&nbsp;28 Oct 1998</p>\n+<a name=\"114\"></a><h3><a name=\"114\">114.&nbsp;Placement forms example in error twice</a></h3><p><b>Section:</b>&nbsp;18.4.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-support.html#lib.new.delete.placement\"> [lib.new.delete.placement]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Steve Clamage&nbsp; <b>Date:</b>&nbsp;28 Oct 1998</p>\n <p>Section 18.4.1.3 contains the following example: </p>\n \n <pre>[Example: This can be useful for constructing an object at a known address:\n@@ -3359,7 +3367,7 @@ <h2>Defect Reports</h2>\n \n <p><i>[Post-Tokyo: PJP provided the above wording.]</i></p>\n <hr>\n-<a name=\"119\"></a><h3><a name=\"119\">119.&nbsp;Should virtual functions be allowed to strengthen the exception specification?</a></h3><p><b>Section:</b>&nbsp;17.4.4.8 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.res.on.exception.handling\"> [lib.res.on.exception.handling]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Judy Ward&nbsp; <b>Date:</b>&nbsp;15 Dec 1998</p>\n+<a name=\"119\"><h3>119.&nbsp;Should virtual functions be allowed to strengthen the exception specification?</h3></a><p><b>Section:</b>&nbsp;17.4.4.8 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.res.on.exception.handling\"> [lib.res.on.exception.handling]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Judy Ward&nbsp; <b>Date:</b>&nbsp;15 Dec 1998</p>\n <p>Section 17.4.4.8 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.res.on.exception.handling\"> [lib.res.on.exception.handling]</a> states: </p>\n \n <p>\"An implementation may strengthen the exception-specification\n@@ -3753,6 +3761,65 @@ <h2>Defect Reports</h2>\n </blockquote>\n <p><b>Rationale:</b></p>\n <p>Setting failbit is the usual error reporting mechanism for streams</p>\n+<hr>\n+<a name=\"130\"><h3>130.&nbsp;Return type of container::erase(iterator) differs for associative containers</h3></a><p><b>Section:</b>&nbsp;23.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.associative.reqmts\"> [lib.associative.reqmts]</a>, 23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Andrew Koenig&nbsp; <b>Date:</b>&nbsp;2 Mar 1999</p>\n+<p>Table 67 (23.1.1) says that container::erase(iterator) returns an\n+iterator. Table 69 (23.1.2) says that in addition to this requirement,\n+associative containers also say that container::erase(iterator)\n+returns void.  That's not an addition; it's a change to the\n+requirements, which has the effect of making associative containers\n+fail to meet the requirements for containers.</p>\n+<p><b>Proposed resolution:</b></p>\n+\n+<p>\n+In 23.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.associative.reqmts\"> [lib.associative.reqmts]</a>, in Table 69 Associative container\n+requirements, change the return type of <tt>a.erase(q)</tt> from\n+<tt>void</tt> to <tt>iterator</tt>.  Change the\n+assertion/not/pre/post-condition from \"erases the element pointed to\n+by <tt>q</tt>\" to \"erases the element pointed to by <tt>q</tt>.\n+Returns an iterator pointing to the element immediately following q\n+prior to the element being erased. If no such element exists, a.end()\n+is returned.\"\n+</p>\n+\n+<p>\n+In 23.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.associative.reqmts\"> [lib.associative.reqmts]</a>, in Table 69 Associative container\n+requirements, change the return type of <tt>a.erase(q1, q2)</tt>\n+from <tt>void</tt> to <tt>iterator</tt>.  Change the\n+assertion/not/pre/post-condition from \"erases the elements in the\n+range <tt>[q1, q2)</tt>\" to \"erases the elements in the range <tt>[q1,\n+q2)</tt>.  Returns q2.\"\n+</p>\n+\n+<p>\n+In 23.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.map\"> [lib.map]</a>, in the <tt>map</tt> class synopsis; and \n+in 23.3.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.multimap\"> [lib.multimap]</a>, in the <tt>multimap</tt> class synopsis; and\n+in 23.3.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.set\"> [lib.set]</a>, in the <tt>set</tt> class synopsis; and\n+in 23.3.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.multiset\"> [lib.multiset]</a>, in the <tt>multiset</tt> class synopsis:\n+change the signature of the first <tt>erase</tt> overload to\n+</p>\n+<pre>   iterator erase(iterator position);\n+</pre>\n+<p>and change the signature of the third <tt>erase</tt> overload to</p>\n+<pre>  iterator erase(iterator first, iterator last); \n+</pre>\n+\n+\n+<p><i>[Pre-Kona: reopened at the request of Howard Hinnant]</i></p>\n+\n+<p><i>[Post-Kona: the LWG agrees the return type should be\n+<tt>iterator</tt>, not <tt>void</tt>.  (Alex Stepanov agrees too.)\n+Matt provided wording.]</i></p>\n+\n+<p><i>[\n+ Sydney: the proposed wording went in the right direction, but it\n+ wasn't good enough. We want to return an iterator from the range form\n+ of erase as well as the single-iterator form. Also, the wording is\n+ slightly different from the wording we have for sequences; there's no\n+ good reason for having a difference.  Matt provided new wording,\n+ which we will review at the next meeting.\n+]</i></p>\n+\n <hr>\n <a name=\"132\"><h3>132.&nbsp;list::resize description uses random access iterators</h3></a><p><b>Section:</b>&nbsp;23.2.2.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.list.capacity\"> [lib.list.capacity]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Howard Hinnant&nbsp; <b>Date:</b>&nbsp;6 Mar 1999</p>\n <p>The description reads:</p>\n@@ -4084,7 +4151,7 @@ <h2>Defect Reports</h2>\n <p>For inserters, the LWG believes there is no defect; the standard is correct\n as written.</p>\n <hr>\n-<a name=\"147\"><h3>147.&nbsp;Library Intro refers to global functions that aren't global</h3></a><p><b>Section:</b>&nbsp;17.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.global.functions\"> [lib.global.functions]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Lois Goldthwaite&nbsp; <b>Date:</b>&nbsp;4 Jun 1999</p>\n+<a name=\"147\"></a><h3><a name=\"147\">147.&nbsp;Library Intro refers to global functions that aren't global</a></h3><p><b>Section:</b>&nbsp;17.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.global.functions\"> [lib.global.functions]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Lois Goldthwaite&nbsp; <b>Date:</b>&nbsp;4 Jun 1999</p>\n <p>The library had many global functions until 17.4.1.1 [lib.contents]\n paragraph 2 was added: </p>\n \n@@ -4338,8 +4405,8 @@ <h2>Defect Reports</h2>\n \"supplied\" with the words \"extracted from the\n stream\".</p>\n <hr>\n-<a name=\"160\"><h3>160.&nbsp;Typo: Use of non-existing function <tt>exception()</tt>\n-</h3></a><p><b>Section:</b>&nbsp;27.6.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream\"> [lib.istream]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Dietmar K\ufffdhl&nbsp; <b>Date:</b>&nbsp;20 Jul 1999</p>\n+<a name=\"160\"></a><h3><a name=\"160\">160.&nbsp;Typo: Use of non-existing function <tt>exception()</tt>\n+</a></h3><p><b>Section:</b>&nbsp;27.6.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream\"> [lib.istream]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Dietmar K\ufffdhl&nbsp; <b>Date:</b>&nbsp;20 Jul 1999</p>\n <p>The paragraph 4 refers to the function <tt>exception()</tt> which\n is not defined. Probably, the referred function is\n <tt>basic_ios&lt;&gt;::exceptions()</tt>.</p>\n@@ -4500,7 +4567,7 @@ <h2>Defect Reports</h2>\n deal with a const char*.  There's nothing better to do but fall back\n to char_traits&lt;char&gt;</p>\n <hr>\n-<a name=\"168\"><h3>168.&nbsp;Typo: formatted vs. unformatted</h3></a><p><b>Section:</b>&nbsp;27.6.2.6 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream.unformatted\"> [lib.ostream.unformatted]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Dietmar K\ufffdhl&nbsp; <b>Date:</b>&nbsp;20 Jul 1999</p>\n+<a name=\"168\"></a><h3><a name=\"168\">168.&nbsp;Typo: formatted vs. unformatted</a></h3><p><b>Section:</b>&nbsp;27.6.2.6 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream.unformatted\"> [lib.ostream.unformatted]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Dietmar K\ufffdhl&nbsp; <b>Date:</b>&nbsp;20 Jul 1999</p>\n <p>The first paragraph begins with a descriptions what has to be done\n in <i>formatted</i> output functions. Probably this is a typo and the\n paragraph really want to describe unformatted output functions...</p>\n@@ -5829,7 +5896,7 @@ <h2>Defect Reports</h2>\n or change the return to distance(b,a).  The LWG preferred the\n former for consistency.</p>\n <hr>\n-<a name=\"211\"><h3>211.&nbsp;operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</h3></a><p><b>Section:</b>&nbsp;21.3.7.9 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.io\"> [lib.string.io]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Scott Snyder&nbsp; <b>Date:</b>&nbsp;4 Feb 2000</p>\n+<a name=\"211\"></a><h3><a name=\"211\">211.&nbsp;operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</a></h3><p><b>Section:</b>&nbsp;21.3.7.9 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.io\"> [lib.string.io]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Scott Snyder&nbsp; <b>Date:</b>&nbsp;4 Feb 2000</p>\n <p>The description of the stream extraction operator for std::string (section\n 21.3.7.9 [lib.string.io]) does not contain a requirement that failbit be set in\n the case that the operator fails to extract any characters from the input\n@@ -5940,7 +6007,7 @@ <h2>Defect Reports</h2>\n     return 0;\n }</pre>\n <hr>\n-<a name=\"220\"></a><h3><a name=\"220\">220.&nbsp;~ios_base() usage valid?</a></h3><p><b>Section:</b>&nbsp;27.4.2.7 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ios.base.cons\"> [lib.ios.base.cons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Jonathan Schilling, Howard Hinnant&nbsp; <b>Date:</b>&nbsp;13 Mar 2000</p>\n+<a name=\"220\"><h3>220.&nbsp;~ios_base() usage valid?</h3></a><p><b>Section:</b>&nbsp;27.4.2.7 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ios.base.cons\"> [lib.ios.base.cons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Jonathan Schilling, Howard Hinnant&nbsp; <b>Date:</b>&nbsp;13 Mar 2000</p>\n <p>The pre-conditions for the ios_base destructor are described in 27.4.2.7\n paragraph 2:</p>\n <blockquote>\n@@ -7248,10 +7315,10 @@ <h2>Defect Reports</h2>\n <p>The original proposed resolution said that iterators and references\n would remain \"valid\".  The new proposed resolution clarifies what that\n means.  Note that this only applies to the case of equal allocators.\n-From 20.1.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.allocator.requirements\"> [lib.allocator.requirements]</a> paragraph 4, the behavior of list when\n+&gt;From 20.1.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.allocator.requirements\"> [lib.allocator.requirements]</a> paragraph 4, the behavior of list when\n allocators compare nonequal is outside the scope of the standard.</p>\n <hr>\n-<a name=\"251\"></a><h3><a name=\"251\">251.&nbsp;basic_stringbuf missing allocator_type</a></h3><p><b>Section:</b>&nbsp;27.7.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf\"> [lib.stringbuf]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;28 Jul 2000</p>\n+<a name=\"251\"><h3>251.&nbsp;basic_stringbuf missing allocator_type</h3></a><p><b>Section:</b>&nbsp;27.7.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf\"> [lib.stringbuf]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;28 Jul 2000</p>\n <p>The synopsis for the template class <tt>basic_stringbuf</tt>\n doesn't list a typedef for the template parameter\n <tt>Allocator</tt>. This makes it impossible to determine the type of\n@@ -7493,8 +7560,8 @@ <h2>Defect Reports</h2>\n <i>pos</i>)</tt>\".\n </p>\n <hr>\n-<a name=\"260\"></a><h3><a name=\"260\">260.&nbsp;Inconsistent return type of <tt>istream_iterator::operator++(int)</tt>\n-</a></h3><p><b>Section:</b>&nbsp;24.5.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.istream.iterator.ops\"> [lib.istream.iterator.ops]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;27 Aug 2000</p>\n+<a name=\"260\"><h3>260.&nbsp;Inconsistent return type of <tt>istream_iterator::operator++(int)</tt>\n+</h3></a><p><b>Section:</b>&nbsp;24.5.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.istream.iterator.ops\"> [lib.istream.iterator.ops]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;27 Aug 2000</p>\n <p>The synopsis of istream_iterator::operator++(int) in 24.5.1 shows\n it as returning the iterator by value. 24.5.1.2, p5 shows the same\n operator as returning the iterator by reference. That's incorrect\n@@ -8955,7 +9022,7 @@ <h2>Defect Reports</h2>\n <p><i>[Post-Cura\ufffdao: Robert Klarer provided new wording.]</i></p>\n \n <hr>\n-<a name=\"301\"><h3>301.&nbsp;basic_string template ctor effects clause omits allocator argument</h3></a><p><b>Section:</b>&nbsp;21.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.cons\"> [lib.string.cons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;27 Jan 2001</p>\n+<a name=\"301\"></a><h3><a name=\"301\">301.&nbsp;basic_string template ctor effects clause omits allocator argument</a></h3><p><b>Section:</b>&nbsp;21.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.cons\"> [lib.string.cons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;27 Jan 2001</p>\n <p>\n The effects clause for the basic_string template ctor in 21.3.1, p15\n leaves out the third argument of type Allocator. I believe this to be\n@@ -9506,7 +9573,7 @@ <h2>Defect Reports</h2>\n section 27.8 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.file.streams\"> [lib.file.streams]</a>, including 27.8.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.c.files\"> [lib.c.files]</a>.]</i></p>\n \n <hr>\n-<a name=\"310\"></a><h3><a name=\"310\">310.&nbsp;Is errno a macro?</a></h3><p><b>Section:</b>&nbsp;17.4.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.headers\"> [lib.headers]</a>, 19.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-diagnostics.html#lib.errno\"> [lib.errno]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Steve Clamage&nbsp; <b>Date:</b>&nbsp;21 Mar 2001</p>\n+<a name=\"310\"><h3>310.&nbsp;Is errno a macro?</h3></a><p><b>Section:</b>&nbsp;17.4.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.headers\"> [lib.headers]</a>, 19.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-diagnostics.html#lib.errno\"> [lib.errno]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Steve Clamage&nbsp; <b>Date:</b>&nbsp;21 Mar 2001</p>\n   <p>\n   Exactly how should errno be declared in a conforming C++ header?\n   </p>\n@@ -10449,7 +10516,7 @@ <h2>Defect Reports</h2>\n <hr>\n <a name=\"338\"><h3>338.&nbsp; is whitespace allowed between `-' and a digit?</h3></a><p><b>Section:</b>&nbsp;22.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.categories\"> [lib.locale.categories]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;17 Sep 2001</p>\n <p>\n-From Stage 2 processing in 22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>, p8 and 9 (the\n+&gt;From Stage 2 processing in 22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>, p8 and 9 (the\n original text or the text corrected by the proposed resolution of\n issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#221\">221</a>) it seems clear that no whitespace is allowed\n within a number, but 22.2.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.numpunct\"> [lib.locale.numpunct]</a>, p2, which gives the\n@@ -10506,7 +10573,7 @@ <h2>Defect Reports</h2>\n numeric processing in 22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>.  The proposed\n resolution removes all mention of \"whitespace\" from that format.</p>\n <hr>\n-<a name=\"339\"></a><h3><a name=\"339\">339.&nbsp;definition of bitmask type restricted to clause 27</a></h3><p><b>Section:</b>&nbsp;22.2.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.category.ctype\"> [lib.category.ctype]</a>, 17.3.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.bitmask.types\"> [lib.bitmask.types]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;17 September 2001</p>\n+<a name=\"339\"><h3>339.&nbsp;definition of bitmask type restricted to clause 27</h3></a><p><b>Section:</b>&nbsp;22.2.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.category.ctype\"> [lib.category.ctype]</a>, 17.3.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.bitmask.types\"> [lib.bitmask.types]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;17 September 2001</p>\n <p>\n The ctype_category::mask type is declared to be an enum in 22.2.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.category.ctype\"> [lib.category.ctype]</a> with p1 then stating that it is a bitmask type, most\n likely referring to the definition of bitmask type in 17.3.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.bitmask.types\"> [lib.bitmask.types]</a>, p1. However, the said definition only applies to\n@@ -10564,8 +10631,8 @@ <h2>Defect Reports</h2>\n consistent with the rest of the standard.]</i></p>\n \n <hr>\n-<a name=\"340\"></a><h3><a name=\"340\">340.&nbsp;interpretation of <tt>has_facet&lt;Facet&gt;(loc)</tt>\n-</a></h3><p><b>Section:</b>&nbsp;22.1.1.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.category\"> [lib.locale.category]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;18 Sep 2001</p>\n+<a name=\"340\"><h3>340.&nbsp;interpretation of <tt>has_facet&lt;Facet&gt;(loc)</tt>\n+</h3></a><p><b>Section:</b>&nbsp;22.1.1.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.category\"> [lib.locale.category]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;18 Sep 2001</p>\n <p>\n It's unclear whether 22.1.1.1.1, p3 says that\n <tt>has_facet&lt;Facet&gt;(loc)</tt> returns true for any <tt>Facet</tt>\n@@ -11489,6 +11556,57 @@ <h2>Defect Reports</h2>\n <p><b>Rationale:</b></p>\n <p>Fixes an obvious typo</p>\n <hr>\n+<a name=\"386\"><h3>386.&nbsp;Reverse iterator's operator[] has impossible return type</h3></a><p><b>Section:</b>&nbsp;24.4.1.3.11 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.reverse.iter.opindex\"> [lib.reverse.iter.opindex]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;23 Oct 2002</p>\n+<p>In 24.4.1.3.11 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.reverse.iter.opindex\"> [lib.reverse.iter.opindex]</a>, <tt>reverse_iterator&lt;&gt;::operator[]</tt> \n+is specified as having a return type of <tt>reverse_iterator::reference</tt>,\n+which is the same as <tt>iterator_traits&lt;Iterator&gt;::reference</tt>.\n+(Where <tt>Iterator</tt> is the underlying iterator type.)</p>\n+\n+<p>The trouble is that <tt>Iterator</tt>'s own operator[] doesn't\n+  necessarily have a return type\n+  of <tt>iterator_traits&lt;Iterator&gt;::reference</tt>.   Its\n+  return type is merely required to be convertible\n+  to <tt>Iterator</tt>'s value type.  The return type specified for\n+  reverse_iterator's operator[] would thus appear to be impossible.</p>\n+\n+<p>With the resolution of issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#299\">299</a>, the type of\n+  <tt>a[n]</tt> will continue to be required (for random access\n+  iterators) to be convertible to the value type, and also <tt>a[n] =\n+  t</tt> will be a valid expression.  Implementations of\n+  <tt>reverse_iterator</tt> will likely need to return a proxy from\n+  <tt>operator[]</tt> to meet these requirements. As mentioned in the\n+  comment from Dave Abrahams, the simplest way to specify that\n+  <tt>reverse_iterator</tt> meet this requirement to just mandate\n+  it and leave the return type of <tt>operator[]</tt> unspecified.</p>\n+\n+<p><b>Proposed resolution:</b></p>\n+\n+<p>In 24.4.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.reverse.iter.requirements\"> [lib.reverse.iter.requirements]</a> change:</p>\n+\n+<blockquote>\n+<pre>reference operator[](difference_type n) const;\n+</pre>\n+</blockquote>\n+\n+<p>to:</p>\n+\n+<blockquote>\n+<pre><b><i>unspecified</i></b> operator[](difference_type n) const; // see <font color=\"red\">lib.random.access.iterators</font>\n+</pre>\n+</blockquote>\n+\n+\n+\n+\n+<p><i>[\n+Comments from Dave Abrahams: IMO we should resolve 386 by just saying\n+    that the return type of reverse_iterator's operator[] is\n+    unspecified, allowing the random access iterator requirements to\n+    impose an appropriate return type.  If we accept 299's proposed\n+    resolution (and I think we should), the return type will be\n+    readable and writable, which is about as good as we can do.\n+]</i></p>\n+<hr>\n <a name=\"389\"><h3>389.&nbsp;Const overload of valarray::operator[] returns by value</h3></a><p><b>Section:</b>&nbsp;26.3.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.template.valarray\"> [lib.template.valarray]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Gabriel Dos Reis&nbsp; <b>Date:</b>&nbsp;8 Nov 2002</p>\n <p>Consider the following program:</p>\n <pre>    #include &lt;iostream&gt;\n@@ -11772,7 +11890,7 @@ <h2>Defect Reports</h2>\n believed to be of limited value.\n </p>\n <hr>\n-<a name=\"405\"><h3>405.&nbsp;qsort and POD</h3></a><p><b>Section:</b>&nbsp;25.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.c.library\"> [lib.alg.c.library]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Ray Lischner&nbsp; <b>Date:</b>&nbsp;08 Apr 2003</p>\n+<a name=\"405\"><h3>405.&nbsp;qsort and POD</h3></a><p><b>Section:</b>&nbsp;25.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.c.library\"> [lib.alg.c.library]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Ray Lischner&nbsp; <b>Date:</b>&nbsp;08 Apr 2003</p>\n <p>\n Section 25.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.c.library\"> [lib.alg.c.library]</a> describes bsearch and qsort, from the C\n standard library. Paragraph 4 does not list any restrictions on qsort,\n@@ -11790,6 +11908,29 @@ <h2>Defect Reports</h2>\n \n <p><i>[Something along these lines is clearly necessary.  Matt\n   provided wording.]</i></p>\n+<hr>\n+<a name=\"406\"><h3>406.&nbsp;vector::insert(s) exception safety</h3></a><p><b>Section:</b>&nbsp;23.2.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector.modifiers\"> [lib.vector.modifiers]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Dave Abrahams&nbsp; <b>Date:</b>&nbsp;27 Apr 2003</p>\n+<p>\n+There is a possible defect in the standard: the standard text was\n+never intended to prevent arbitrary ForwardIterators, whose operations\n+may throw exceptions, from being passed, and it also wasn't intended\n+to require a temporary buffer in the case where ForwardIterators were\n+passed (and I think most implementations don't use one).  As is, the\n+standard appears to impose requirements that aren't met by any\n+existing implementation.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Replace 23.2.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector.modifiers\"> [lib.vector.modifiers]</a> paragraph 1 with:</p>\n+<blockquote>\n+  1- Notes: Causes reallocation if the new size is greater than the\n+  old capacity. If no reallocation happens, all the iterators and\n+  references before the insertion point remain valid. If an exception\n+  is thrown other than by the copy constructor or assignment operator\n+  of T or by any InputIterator operation there are no effects.\n+</blockquote>\n+\n+<p><i>[We probably need to say something similar for deque.]</i></p>\n+\n <hr>\n <a name=\"407\"><h3>407.&nbsp;Can singular iterators be destroyed?</h3></a><p><b>Section:</b>&nbsp;24.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.iterator.requirements\"> [lib.iterator.requirements]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;3 June 2003</p>\n <p>\n@@ -11807,7 +11948,82 @@ <h2>Defect Reports</h2>\n of a non-singular value to an iterator that holds a singular value.\"\n </p>\n <hr>\n-<a name=\"410\"><h3>410.&nbsp;Missing semantics for stack and queue comparison operators</h3></a><p><b>Section:</b>&nbsp;23.2.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.queue\"> [lib.queue]</a>, 23.2.3.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.stack\"> [lib.stack]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Hans Bos&nbsp; <b>Date:</b>&nbsp;7 Jun 2003</p>\n+<a name=\"409\"><h3>409.&nbsp;Closing an fstream should clear error state</h3></a><p><b>Section:</b>&nbsp;27.8.1.7 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ifstream.members\"> [lib.ifstream.members]</a>, 27.8.1.10 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ofstream.members\"> [lib.ofstream.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;3 June 2003</p>\n+<p>\n+A strict reading of 27.8.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.fstreams\"> [lib.fstreams]</a> shows that opening or\n+closing a basic_[io]fstream does not affect the error bits.  This\n+means, for example, that if you read through a file up to EOF, and\n+then close the stream and reopen it at the beginning of the file,\n+the EOF bit in the stream's error state is still set.  This is\n+counterintuitive.\n+</p>\n+<p>\n+The LWG considered this issue once before, as issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#22\">22</a>,\n+and put in a footnote to clarify that the strict reading was indeed\n+correct.  We did that because we believed the standard was\n+unambiguous and consistent, and that we should not make architectural\n+changes in a TC.  Now that we're working on a new revision of the\n+language, those considerations no longer apply.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+\n+<p>Change 27.8.1.7 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ifstream.members\"> [lib.ifstream.members]</a>, para. 3 from:</p>\n+\n+<blockquote>\n+Calls rdbuf()-&gt;open(s,mode|in). If that function returns a null\n+pointer, calls setstate(failbit) (which may throw ios_base::failure\n+[Footnote: (lib.iostate.flags)].\n+</blockquote>\n+\n+<p>to:</p>\n+\n+<blockquote>Calls rdbuf()-&gt;open(s,mode|in). If that function returns\n+a null pointer, calls setstate(failbit) (which may throw\n+ios_base::failure [Footnote: (lib.iostate.flags)), else calls clear().\n+</blockquote>\n+\n+<p>Change 27.8.1.10 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ofstream.members\"> [lib.ofstream.members]</a>, para. 3 from:</p>\n+\n+<blockquote>Calls rdbuf()-&gt;open(s,mode|out). If that function\n+returns a null pointer, calls setstate(failbit) (which may throw\n+ios_base::failure [Footnote: (lib.iostate.flags)).\n+</blockquote>\n+\n+<p>to:</p>\n+\n+<blockquote>Calls rdbuf()-&gt;open(s,mode|out). If that function\n+returns a null pointer, calls setstate(failbit) (which may throw\n+ios_base::failure [Footnote: (lib.iostate.flags)), else calls clear().\n+</blockquote>\n+\n+<p>Change 27.8.1.13 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.fstream.members\"> [lib.fstream.members]</a>, para. 3 from:</p>\n+\n+<blockquote>Calls rdbuf()-&gt;open(s,mode), If that function returns a\n+null pointer, calls setstate(failbit), (which may throw\n+ios_base::failure). (lib.iostate.flags) )\n+</blockquote>\n+\n+<p>to:</p>\n+\n+<blockquote>Calls rdbuf()-&gt;open(s,mode), If that function returns a\n+null pointer, calls setstate(failbit), (which may throw\n+ios_base::failure). (lib.iostate.flags) ), else calls clear().\n+</blockquote>\n+\n+\n+\n+<p><i>[Kona: the LWG agrees this is a good idea.  Post-Kona: Bill\n+provided wording.  He suggests having open, not close, clear the error\n+flags.]</i></p>\n+\n+<p><i>[Post-Sydney: Howard provided a new proposed resolution.  The\n+  old one didn't make sense because it proposed to fix this at the\n+  level of basic_filebuf, which doesn't have access to the stream's\n+  error state.  Howard's proposed resolution fixes this at the level\n+  of the three fstream class template instead.]</i></p>\n+\n+<hr>\n+<a name=\"410\"></a><h3><a name=\"410\">410.&nbsp;Missing semantics for stack and queue comparison operators</a></h3><p><b>Section:</b>&nbsp;23.2.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.queue\"> [lib.queue]</a>, 23.2.3.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.stack\"> [lib.stack]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Hans Bos&nbsp; <b>Date:</b>&nbsp;7 Jun 2003</p>\n <p>\n Sections 23.2.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.queue\"> [lib.queue]</a> and 23.2.3.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.stack\"> [lib.stack]</a> list\n comparison operators (==, !=, &lt;, &lt;=, &gt;, =&gt;) for queue and\n@@ -11892,7 +12108,7 @@ <h2>Defect Reports</h2>\n <p><b>Proposed resolution:</b></p>\n <p>Change that sentence to use the correct names.</p>\n <hr>\n-<a name=\"412\"><h3>412.&nbsp;Typo in 27.4.4.3</h3></a><p><b>Section:</b>&nbsp;27.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostate.flags\"> [lib.iostate.flags]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;10 Jul 2003</p>\n+<a name=\"412\"></a><h3><a name=\"412\">412.&nbsp;Typo in 27.4.4.3</a></h3><p><b>Section:</b>&nbsp;27.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostate.flags\"> [lib.iostate.flags]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;10 Jul 2003</p>\n <p>\n The Effects clause in 27.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostate.flags\"> [lib.iostate.flags]</a> paragraph 5 says that the\n function only throws if the respective bits are already set prior to\n@@ -11913,6 +12129,51 @@ <h2>Defect Reports</h2>\n   setting the new state, or rdsate() after setting it.  We intend the\n   latter, of course. Post-Kona: Martin provided wording.]</i></p>\n \n+<hr>\n+<a name=\"413\"><h3>413.&nbsp;Proposed resolution to LDR#64 still wrong</h3></a><p><b>Section:</b>&nbsp;27.6.1.2.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream::extractors\"> [lib.istream::extractors]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Bo Persson&nbsp; <b>Date:</b>&nbsp;13 Jul 2003</p>\n+<p>\n+The second sentence of the proposed resolution says:\n+</p>\n+\n+<p>\n+\"If it inserted no characters because it caught an exception thrown\n+while extracting characters from sb and ...\"\n+</p>\n+\n+<p>\n+However, we are not extracting from sb, but extracting from the\n+basic_istream (*this) and inserting into sb. I can't really tell if\n+\"extracting\" or \"sb\" is a typo.\n+</p>\n+\n+<p><i>[\n+Sydney: Definitely a real issue. We are, indeed, extracting characters\n+from an istream and not from sb. The problem was there in the FDIS and\n+wasn't fixed by issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#64\">64</a>. Probably what was intended was\n+to have *this instead of sb. We're talking about the exception flag\n+state of a basic_istream object, and there's only one basic_istream\n+object in this discussion, so that would be a consistent\n+interpretation.  (But we need to be careful: the exception policy of\n+this member function must be consistent with that of other\n+extractors.)  PJP will provide wording.\n+]</i></p>\n+\n+<p><b>Proposed resolution:</b></p>\n+<p>Change the sentence from:</p>\n+\n+<blockquote>\n+If it inserted no characters because it caught an exception thrown\n+while extracting characters from sb and failbit is on in exceptions(),\n+then the caught exception is rethrown.\n+</blockquote>\n+\n+<p>to:</p>\n+\n+<blockquote>\n+If it inserted no characters because it caught an exception thrown\n+while extracting characters from *this and failbit is on in exceptions(),\n+then the caught exception is rethrown.\n+</blockquote>\n <hr>\n <a name=\"414\"><h3>414.&nbsp;Which iterators are invalidated by v.erase()?</h3></a><p><b>Section:</b>&nbsp;23.2.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector.modifiers\"> [lib.vector.modifiers]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;19 Aug 2003</p>\n <p>\n@@ -11975,7 +12236,7 @@ <h2>Defect Reports</h2>\n   and references in parallel, and it would seem counterintuitive to\n   say that a reference to an erased value remains valid.</p>\n <hr>\n-<a name=\"415\"><h3>415.&nbsp;behavior of std::ws</h3></a><p><b>Section:</b>&nbsp;27.6.1.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream.manip\"> [lib.istream.manip]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;18 Sep 2003</p>\n+<a name=\"415\"><h3>415.&nbsp;behavior of std::ws</h3></a><p><b>Section:</b>&nbsp;27.6.1.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream.manip\"> [lib.istream.manip]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;18 Sep 2003</p>\n <p>\n According to 27.6.1.4, the ws() manipulator is not required to construct\n the sentry object. The manipulator is also not a member function so the\n@@ -12023,7 +12284,7 @@ <h2>Defect Reports</h2>\n   already says. We don't want to make anything implementation defined,\n   because that imposes new requirements in implementations.</p>\n <hr>\n-<a name=\"425\"><h3>425.&nbsp;return value of std::get_temporary_buffer</h3></a><p><b>Section:</b>&nbsp;20.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.temporary.buffer\"> [lib.temporary.buffer]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;18 Sep 2003</p>\n+<a name=\"425\"><h3>425.&nbsp;return value of std::get_temporary_buffer</h3></a><p><b>Section:</b>&nbsp;20.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.temporary.buffer\"> [lib.temporary.buffer]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;18 Sep 2003</p>\n <p>\n The standard is not clear about the requirements on the value returned from\n a call to get_temporary_buffer(0). In particular, it fails to specify whether\n@@ -12038,7 +12299,7 @@ <h2>Defect Reports</h2>\n no storage can be obtained or if <i>n</i> &lt;= 0.\"</p>\n <p><i>[Kona: Matt provided wording]</i></p>\n <hr>\n-<a name=\"426\"><h3>426.&nbsp;search_n(), fill_n(), and generate_n() with negative n</h3></a><p><b>Section:</b>&nbsp;25.1.9 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.search\"> [lib.alg.search]</a>, 25.2.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.fill\"> [lib.alg.fill]</a>, 25.2.6 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.generate\"> [lib.alg.generate]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;18 Sep 2003</p>\n+<a name=\"426\"><h3>426.&nbsp;search_n(), fill_n(), and generate_n() with negative n</h3></a><p><b>Section:</b>&nbsp;25.1.9 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.search\"> [lib.alg.search]</a>, 25.2.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.fill\"> [lib.alg.fill]</a>, 25.2.6 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.generate\"> [lib.alg.generate]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;18 Sep 2003</p>\n <p>\n The complexity requirements for these function templates are incorrect\n (or don't even make sense) for negative n:</p>\n@@ -12129,7 +12390,7 @@ <h2>Defect Reports</h2>\n   option, on the grounds that duplicating text always risks the\n   possibility that it might be duplicated incorrectly.</p>\n <hr>\n-<a name=\"432\"><h3>432.&nbsp;stringbuf::overflow() makes only one write position available</h3></a><p><b>Section:</b>&nbsp;27.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Christian W Brock&nbsp; <b>Date:</b>&nbsp;24 Sep 2003</p>\n+<a name=\"432\"><h3>432.&nbsp;stringbuf::overflow() makes only one write position available</h3></a><p><b>Section:</b>&nbsp;27.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Christian W Brock&nbsp; <b>Date:</b>&nbsp;24 Sep 2003</p>\n <p>27.7.1.3 par 8 says:</p>\n <blockquote>\n Notes: The function can make a write position available only if\n@@ -12400,7 +12661,47 @@ <h2>Defect Reports</h2>\n uninitialized characters.  Positioning is only allowable over the\n initialized range.</p>\n <hr>\n-<a name=\"435\"><h3>435.&nbsp;bug in DR 25</h3></a><p><b>Section:</b>&nbsp;21.3.7.9 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.io\"> [lib.string.io]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;15 Oct 2003</p>\n+<a name=\"434\"><h3>434.&nbsp;bitset::to_string() hard to use</h3></a><p><b>Section:</b>&nbsp;23.3.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.bitset.members\"> [lib.bitset.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;15 Oct 2003</p>\n+<p>\n+It has been pointed out a number of times that the bitset to_string() member\n+function template is tedious to use since callers must explicitly specify the\n+entire template argument list (3 arguments). At least two implementations\n+provide a number of overloads of this template to make it easier to use.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>In order to allow callers to specify no template arguments at all, just the\n+first one (charT), or the first 2 (charT and traits), in addition to all\n+three template arguments, add the following three overloads to both the\n+interface (declarations only) of the class template bitset as well as to\n+section 23.3.5.2, immediately after p34, the Returns clause of the existing\n+to_string() member function template:</p>\n+\n+<pre>    template &lt;class charT, class traits&gt;\n+    basic_string&lt;charT, traits, allocator&lt;charT&gt; &gt;\n+    to_string () const;\n+\n+    -34.1- Returns: to_string&lt;charT, traits, allocator&lt;charT&gt; &gt;().\n+\n+    template &lt;class charT&gt;\n+    basic_string&lt;charT, char_traits&lt;charT&gt;, allocator&lt;charT&gt; &gt;\n+    to_string () const;\n+\n+    -34.2- Returns: to_string&lt;charT, char_traits&lt;charT&gt;, allocator&lt;charT&gt; &gt;().\n+\n+    basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;\n+    to_string () const;\n+\n+    -34.3- Returns: to_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt; &gt;().\n+</pre>\n+\n+<p><i>[Kona: the LWG agrees that this is an improvement over the\n+  status quo.  Dietmar thought about an alternative using a proxy\n+  object but now believes that the proposed resolution above is the\n+  right choice.\n+]</i></p>\n+\n+<hr>\n+<a name=\"435\"><h3>435.&nbsp;bug in DR 25</h3></a><p><b>Section:</b>&nbsp;21.3.7.9 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.io\"> [lib.string.io]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;15 Oct 2003</p>\n \n <p>\n It has been pointed out that the proposed resolution in DR 25 may not be\n@@ -12473,7 +12774,330 @@ <h2>Defect Reports</h2>\n text.]</i></p>\n \n <hr>\n-<a name=\"441\"><h3>441.&nbsp;Is fpos::state const?</h3></a><p><b>Section:</b>&nbsp;27.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.fpos\"> [lib.fpos]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Vincent Leloup&nbsp; <b>Date:</b>&nbsp;17 Nov 2003</p>\n+<a name=\"438\"></a><h3><a name=\"438\">438.&nbsp;Ambiguity in the \"do the right thing\" clause</a></h3><p><b>Section:</b>&nbsp;23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Howard Hinnant&nbsp; <b>Date:</b>&nbsp;20 Oct 2003</p>\n+\n+<p>Section 23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a>, paragraphs 9-11, fixed up the problem\n+noticed with statements like:</p>\n+<pre>vector&lt;int&gt; v(10, 1);\n+</pre>\n+\n+<p>The intent of the above statement was to construct with:</p>\n+<pre>vector(size_type, const value_type&amp;);\n+</pre>\n+\n+<p>but early implementations failed to compile as they bound to:</p>\n+<pre>template &lt;class InputIterator&gt;\n+vector(InputIterator f, InputIterator l);\n+</pre>\n+<p>instead.</p>\n+\n+<p>Paragraphs 9-11 say that if InputIterator is an integral type, then the\n+member template constructor will have the same effect as:</p>\n+<pre>vector&lt;static_cast&lt;size_type&gt;(f), static_cast&lt;value_type&gt;(l));\n+</pre>\n+<p>(and similarly for the other member template functions of sequences).</p>\n+\n+<p>There is also a note that describes one implementation technique:</p>\n+<blockquote>\n+   One way that sequence implementors can satisfy this requirement is to\n+   specialize the member template for every integral type.\n+</blockquote>\n+\n+<p>This might look something like:</p>\n+<blockquote>\n+<pre>template &lt;class T&gt;\n+struct vector\n+{\n+     typedef unsigned size_type;\n+\n+     explicit vector(size_type) {}\n+     vector(size_type, const T&amp;) {}\n+\n+     template &lt;class I&gt;\n+     vector(I, I);\n+\n+     // ...\n+};\n+\n+template &lt;class T&gt;\n+template &lt;class I&gt;\n+vector&lt;T&gt;::vector(I, I) { ... }\n+\n+template &lt;&gt;\n+template &lt;&gt;\n+vector&lt;int&gt;::vector(int, int) { ... }\n+\n+template &lt;&gt;\n+template &lt;&gt;\n+vector&lt;int&gt;::vector(unsigned, unsigned) { ... }\n+\n+//  ...\n+</pre>\n+</blockquote>\n+\n+<p>Label this solution 'A'.</p>\n+\n+<p>The standard also says:</p>\n+<blockquote>\n+ Less cumbersome implementation techniques also exist.\n+</blockquote>\n+<p>\n+A popular technique is to not specialize as above, but instead catch\n+every call with the member template, detect the type of InputIterator,\n+and then redirect to the correct logic.  Something like:\n+</p>\n+<blockquote>\n+<pre>template &lt;class T&gt;\n+template &lt;class I&gt;\n+vector&lt;T&gt;::vector(I f, I l)\n+{\n+     choose_init(f, l, int2type&lt;is_integral&lt;I&gt;::value&gt;());\n+}\n+\n+template &lt;class T&gt;\n+template &lt;class I&gt;\n+vector&lt;T&gt;::choose_init(I f, I l, int2type&lt;false&gt;)\n+{\n+    // construct with iterators\n+}\n+\n+template &lt;class T&gt;\n+template &lt;class I&gt;\n+vector&lt;T&gt;::choose_init(I f, I l, int2type&lt;true&gt;)\n+{\n+    size_type sz = static_cast&lt;size_type&gt;(f);\n+    value_type v = static_cast&lt;value_type&gt;(l);\n+    // construct with sz,v\n+}\n+</pre>\n+</blockquote>\n+\n+<p>Label this solution 'B'.</p>\n+\n+<p>Both of these solutions solve the case the standard specifically\n+mentions:</p>\n+<pre>vector&lt;int&gt; v(10, 1);  // ok, vector size 10, initialized to 1\n+</pre>\n+\n+<p>\n+However, (and here is the problem), the two solutions have different\n+behavior in some cases where the value_type of the sequence is not an\n+integral type.  For example consider:\n+</p>\n+<blockquote><pre>     pair&lt;char, char&gt;                     p('a', 'b');\n+     vector&lt;vector&lt;pair&lt;char, char&gt; &gt; &gt;   d('a', 'b');\n+</pre></blockquote>\n+<p>\n+The second line of this snippet is likely an error.  Solution A catches\n+the error and refuses to compile.  The reason is that there is no\n+specialization of the member template constructor that looks like:\n+</p>\n+<pre>template &lt;&gt;\n+template &lt;&gt;\n+vector&lt;vector&lt;pair&lt;char, char&gt; &gt; &gt;::vector(char, char) { ... }\n+</pre>\n+\n+<p>\n+So the expression binds to the unspecialized member template\n+constructor, and then fails (compile time) because char is not an\n+InputIterator.\n+</p>\n+\n+<p>\n+Solution B compiles the above example though.  'a' is casted to an\n+unsigned integral type and used to size the outer vector.  'b' is\n+static casted to the inner vector using it's explicit constructor:\n+</p>\n+\n+<pre>explicit vector(size_type n);\n+</pre>\n+\n+<p>\n+and so you end up with a static_cast&lt;size_type&gt;('a') by\n+static_cast&lt;size_type&gt;('b') matrix.\n+</p>\n+\n+<p>\n+It is certainly possible that this is what the coder intended.  But the\n+explicit qualifier on the inner vector has been thwarted at any rate.\n+</p>\n+\n+<p>\n+The standard is not clear whether the expression:\n+</p>\n+\n+<pre>     vector&lt;vector&lt;pair&lt;char, char&gt; &gt; &gt;   d('a', 'b');\n+</pre>\n+\n+<p>\n+(and similar expressions) are:\n+</p>\n+\n+<ol>\n+<li>  undefined behavior.</li>\n+<li>  illegal and must be rejected.</li>\n+<li>  legal and must be accepted.</li>\n+</ol>\n+\n+<p>My preference is listed in the order presented.</p>\n+\n+<p>There are still other techniques for implementing the requirements of\n+paragraphs 9-11, namely the \"restricted template technique\" (e.g.\n+enable_if).  This technique is the most compact and easy way of coding\n+the requirements, and has the behavior of #2 (rejects the above\n+expression).\n+</p>\n+\n+<p>\n+Choosing 1 would allow all implementation techniques I'm aware of.\n+Choosing 2 would allow only solution 'A' and the enable_if technique.\n+Choosing 3 would allow only solution 'B'.\n+</p>\n+\n+<p>\n+Possible wording for a future standard if we wanted to actively reject\n+the expression above would be to change \"static_cast\" in paragraphs\n+9-11 to \"implicit_cast\" where that is defined by:\n+</p>\n+\n+<blockquote>\n+<pre>template &lt;class T, class U&gt;\n+inline\n+T implicit_cast(const U&amp; u)\n+{\n+     return u;\n+}\n+</pre>\n+</blockquote>\n+\n+<p><b>Proposed resolution:</b></p>\n+\n+Replace 23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a> paragraphs 9 - 11 with:\n+\n+<p>For every sequence defined in this clause and in clause lib.strings:</p>\n+\n+<ul>\n+  <li>\n+    <p>If the constructor</p>\n+       <pre>       template &lt;class InputIterator&gt;\n+       X(InputIterator f, InputIterator l,\n+         const allocator_type&amp; a = allocator_type())\n+       </pre>\n+    <p>is called with a type InputIterator that does not qualify as\n+    an input iterator, then the constructor will behave as if the\n+    overloaded constructor:</p>\n+       <pre>       X(size_type, const value_type&amp; = value_type(),\n+         const allocator_type&amp; = allocator_type())\n+       </pre>\n+    <p>were called instead, with the arguments static_cast&lt;size_type&gt;(f), l and a, respectively.</p>\n+  </li>\n+\n+  <li>\n+    <p>If the member functions of the forms:</p>\n+       <pre>       template &lt;class InputIterator&gt;          //  such as  insert()\n+       rt fx1(iterator p, InputIterator f, InputIterator l);\n+\n+       template &lt;class InputIterator&gt;          //  such as  append(), assign()\n+       rt fx2(InputIterator f, InputIterator l);\n+\n+       template &lt;class InputIterator&gt;          //  such as  replace()\n+       rt fx3(iterator i1, iterator i2, InputIterator f, InputIterator l);\n+       </pre>\n+    <p>are called with a type InputIterator that does not qualify as\n+    an input iterator, then these functions will behave as if the\n+    overloaded member functions:</p>\n+       <pre>       rt fx1(iterator, size_type, const value_type&amp;);\n+\n+       rt fx2(size_type, const value_type&amp;);\n+\n+       rt fx3(iterator, iterator, size_type, const value_type&amp;);\n+       </pre>\n+    <p>were called instead, with the same arguments.</p>\n+  </li>\n+</ul>\n+\n+<p>In the previous paragraph the alternative binding will fail if f \n+is not implicitly convertible to X::size_type or if l is not implicitly \n+convertible to X::value_type.</p>\n+\n+<p>\n+The extent to which an implementation determines that a type cannot be\n+an input iterator is unspecified, except that as a minimum integral\n+types shall not qualify as input iterators.\n+</p>\n+\n+\n+\n+<p><i>[\n+Kona: agreed that the current standard requires <tt>v('a', 'b')</tt>\n+to be accepted, and also agreed that this is surprising behavior.  The\n+LWG considered several options, including something like\n+implicit_cast, which doesn't appear to be quite what we want.  We\n+considered Howards three options: allow acceptance or rejection,\n+require rejection as a compile time error, and require acceptance.  By\n+straw poll (1-6-1), we chose to require a compile time error.\n+Post-Kona: Howard provided wording.\n+]</i></p>\n+\n+<p><i>[\n+Sydney: The LWG agreed with this general direction, but there was some\n+discomfort with the wording in the original proposed resolution.\n+Howard submitted new wording, and we will review this again in\n+Redmond.\n+]</i></p>\n+\n+<p><i>[Redmond: one very small change in wording: the first argument\n+  is cast to size_t.  This fixes the problem of something like\n+  <tt>vector&lt;vector&lt;int&gt; &gt;(5, 5)</tt>, where int is not \n+  implicitly convertible to the value type.]</i></p>\n+\n+<p><b>Rationale:</b></p>\n+<p>The proposed resolution fixes:</p>\n+\n+<pre>  vector&lt;int&gt; v(10, 1);\n+</pre>\n+\n+<p>\n+since as integral types 10 and 1 must be disqualified as input\n+iterators and therefore the (size,value) constructor is called (as\n+if).</p>\n+\n+<p>The proposed resolution breaks:</p>\n+\n+<pre>  vector&lt;vector&lt;T&gt; &gt; v(10, 1);\n+</pre>\n+\n+<p>\n+because the integral type 1 is not *implicitly* convertible to\n+vector&lt;T&gt;.  The wording above requires a diagnostic.</p>\n+\n+<p>\n+The proposed resolution leaves the behavior of the following code\n+unspecified.\n+</p>\n+\n+<pre>  struct A\n+  {\n+    operator int () const {return 10;}\n+  };\n+\n+  struct B\n+  {\n+    B(A) {}\n+  };\n+\n+  vector&lt;B&gt; v(A(), A());\n+</pre>\n+\n+<p>\n+The implementation may or may not detect that A is not an input\n+iterator and employee the (size,value) constructor.  Note though that\n+in the above example if the B(A) constructor is qualified explicit,\n+then the implementation must reject the constructor as A is no longer\n+implicitly convertible to B.\n+</p>\n+<hr>\n+<a name=\"441\"><h3>441.&nbsp;Is fpos::state const?</h3></a><p><b>Section:</b>&nbsp;27.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.fpos\"> [lib.fpos]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Vincent Leloup&nbsp; <b>Date:</b>&nbsp;17 Nov 2003</p>\n <p>\n In section 27.4.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.fpos.members\"> [lib.fpos.members]</a> fpos&lt;stateT&gt;::state() is declared\n non const, but in section 27.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.fpos\"> [lib.fpos]</a> it is declared const.\n@@ -12484,7 +13108,7 @@ <h2>Defect Reports</h2>\n <tt>fpos&lt;stateT&gt;::state()</tt> to const.\n </p>\n <hr>\n-<a name=\"442\"><h3>442.&nbsp;sentry::operator bool() inconsistent signature</h3></a><p><b>Section:</b>&nbsp;27.6.2.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream::sentry\"> [lib.ostream::sentry]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Vincent Leloup&nbsp; <b>Date:</b>&nbsp;18 Nov 2003</p>\n+<a name=\"442\"><h3>442.&nbsp;sentry::operator bool() inconsistent signature</h3></a><p><b>Section:</b>&nbsp;27.6.2.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream::sentry\"> [lib.ostream::sentry]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Vincent Leloup&nbsp; <b>Date:</b>&nbsp;18 Nov 2003</p>\n <p>\n In section 27.6.2.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream::sentry\"> [lib.ostream::sentry]</a> paragraph 4, in description part\n basic_ostream&lt;charT, traits&gt;::sentry::operator bool() is declared\n@@ -12497,7 +13121,7 @@ <h2>Defect Reports</h2>\n of <tt>sentry::operator bool()</tt> to const.\n </p>\n <hr>\n-<a name=\"443\"><h3>443.&nbsp;filebuf::close() inconsistent use of EOF</h3></a><p><b>Section:</b>&nbsp;27.8.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.filebuf.members\"> [lib.filebuf.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Vincent Leloup&nbsp; <b>Date:</b>&nbsp;20 Nov 2003</p>\n+<a name=\"443\"><h3>443.&nbsp;filebuf::close() inconsistent use of EOF</h3></a><p><b>Section:</b>&nbsp;27.8.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.filebuf.members\"> [lib.filebuf.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Vincent Leloup&nbsp; <b>Date:</b>&nbsp;20 Nov 2003</p>\n <p>\n In section 27.8.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.filebuf.members\"> [lib.filebuf.members]</a> par6, in effects description of\n basic_filebuf&lt;charT, traits&gt;::close(), overflow(EOF) is used twice;\n@@ -12508,7 +13132,204 @@ <h2>Defect Reports</h2>\n Change overflow(EOF) to overflow(traits::eof()).\n </p>\n <hr>\n-<a name=\"448\"><h3>448.&nbsp;Random Access Iterators over abstract classes</h3></a><p><b>Section:</b>&nbsp;24.1.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.random.access.iterators\"> [lib.random.access.iterators]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Dave Abrahams&nbsp; <b>Date:</b>&nbsp;7 Jan 2004</p>\n+<a name=\"444\"><h3>444.&nbsp;Bad use of casts in fstream</h3></a><p><b>Section:</b>&nbsp;27.8.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.fstreams\"> [lib.fstreams]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Vincent Leloup&nbsp; <b>Date:</b>&nbsp;20 Nov 2003</p>\n+<p>\n+27.8.1.7 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ifstream.members\"> [lib.ifstream.members]</a> p1, 27.8.1.10 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ofstream.members\"> [lib.ofstream.members]</a> p1, 27.8.1.13 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.fstream.members\"> [lib.fstream.members]</a> p1 seems have same problem as exposed in LWG issue\n+<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#252\">252</a>.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+\n+<p><i>[Sydney: Genuine defect. 27.8.1.13 needs a cast to cast away\n+ constness. The other two places are stylistic: we could change the\n+ C-style casts to const_cast. Post-Sydney: Howard provided wording.\n+]</i></p>\n+\n+<p>Change 27.8.1.7/1 from:</p>\n+<blockquote>\n+  Returns: (basic_filebuf&lt;charT,traits&gt;*)&amp;sb.\n+</blockquote>\n+\n+<p>to:</p>\n+<blockquote>\n+  Returns: const_cast&lt;basic_filebuf&lt;charT,traits&gt;*&gt;(&amp;sb).\n+</blockquote>\n+\n+<p>Change 27.8.1.10/1 from:</p>\n+<blockquote>\n+  Returns: (basic_filebuf&lt;charT,traits&gt;*)&amp;sb.\n+</blockquote>\n+\n+<p>to:</p>\n+<blockquote>\n+  Returns: const_cast&lt;basic_filebuf&lt;charT,traits&gt;*&gt;(&amp;sb).\n+</blockquote>\n+\n+<p>Change 27.8.1.13/1 from:</p>\n+<blockquote>\n+  Returns: &amp;sb.\n+</blockquote>\n+\n+<p>to:</p>\n+<blockquote>\n+  Returns: const_cast&lt;basic_filebuf&lt;charT,traits&gt;*&gt;(&amp;sb).\n+</blockquote>\n+\n+\n+\n+<hr>\n+<a name=\"445\"><h3>445.&nbsp;iterator_traits::reference unspecified for some iterator categories</h3></a><p><b>Section:</b>&nbsp;24.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.iterator.traits\"> [lib.iterator.traits]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Dave Abrahams&nbsp; <b>Date:</b>&nbsp;9 Dec 2003</p>\n+<p>\n+The standard places no restrictions at all on the reference type\n+of input, output, or forward iterators (for forward iterators it\n+only specifies that *x must be value_type&amp; and doesn't mention\n+the reference type).  Bidirectional iterators' reference type is\n+restricted only by implication, since the base iterator's\n+reference type is used as the return type of reverse_iterator's\n+operator*, which must be T&amp; in order to be a conforming forward\n+iterator.\n+</p>\n+\n+<p>\n+Here's what I think we ought to be able to expect from an input\n+or forward iterator's reference type R, where a is an iterator\n+and V is its value_type\n+</p>\n+\n+<ul>\n+  <li>\n+      *a is convertible to R\n+  </li>\n+\n+  <li>\n+      R is convertible to V\n+  </li>\n+\n+  <li>\n+      static_cast&lt;V&gt;(static_cast&lt;R&gt;(*a)) is equivalent to\n+      static_cast&lt;V&gt;(*a) \n+  </li>\n+</ul>\n+\n+<p>A mutable forward iterator ought to satisfy, for x of type V:</p>\n+  <li>\n+      { R r = *a; r = x; } is equivalent to *a = x;\n+  </li>\n+\n+<p>\n+I think these requirements capture existing container iterators\n+(including vector&lt;bool&gt;'s), but render istream_iterator invalid;\n+its reference type would have to be changed to a constant\n+reference.\n+</p>\n+\n+\n+<p>\n+(Jeremy Siek) During the discussion in Sydney, it was felt that a\n+simpler long term solution for this was needed. The solution proposed\n+was to require <tt>reference</tt> to be the same type as <tt>*a</tt>\n+and <tt>pointer</tt> to be the same type as <tt>a-&gt;</tt>.  Most\n+iterators in the Standard Library already meet this requirement. Some\n+iterators are output iterators, and do not need to meet the\n+requirement, and others are only specified through the general\n+iterator requirements (which will change with this resolution). The\n+sole case where there is an explicit definition of the reference type\n+that will need to change is <tt>istreambuf_iterator</tt> which returns\n+<tt>charT</tt> from <tt>operator*</tt> but has a reference type of\n+<tt>charT&amp;</tt>. We propose changing the reference type of\n+<tt>istreambuf_iterator</tt> to <tt>charT</tt>.\n+</p>\n+\n+<p>The other option for resolving the issue with <tt>pointer</tt>,\n+  mentioned in the note below, is to remove <tt>pointer</tt>\n+  altogether. I prefer placing requirements on <tt>pointer</tt> to\n+  removing it for two reasons. First, <tt>pointer</tt> will become\n+  useful for implementing iterator adaptors and in particular,\n+  <tt>reverse_iterator</tt> will become more well defined. Second,\n+  removing <tt>pointer</tt> is a rather drastic and publicly-visible\n+  action to take.</p>\n+\n+<p>The proposed resolution technically enlarges the requirements for\n+iterators, which means there are existing iterators (such as\n+<tt>istreambuf_iterator</tt>, and potentially some programmer-defined\n+iterators) that will no longer meet the requirements. Will this break\n+existing code? The scenario in which it would is if an algorithm\n+implementation (say in the Standard Library) is changed to rely on\n+<tt>iterator_traits::reference</tt>, and then is used with one of the\n+iterators that do not have an appropriately defined\n+<tt>iterator_traits::reference</tt>.\n+</p>\n+\n+\n+<p>The proposed resolution makes one other subtle change. Previously,\n+it was required that output iterators have a <tt>difference_type</tt>\n+and <tt>value_type</tt> of <tt>void</tt>, which means that a forward\n+iterator could not be an output iterator. This is clearly a mistake,\n+so I've changed the wording to say that those types may be\n+<tt>void</tt>.\n+</p>\n+\n+<p><b>Proposed resolution:</b></p>\n+\n+<p>In 24.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.iterator.traits\"> [lib.iterator.traits]</a>, after:</p>\n+\n+<blockquote>\n+be defined as the iterator's difference type, value type and iterator\n+category, respectively.\n+</blockquote>\n+\n+<p>add</p>\n+\n+<blockquote>\n+In addition, the types\n+<pre>iterator_traits&lt;Iterator&gt;::reference\n+iterator_traits&lt;Iterator&gt;::pointer\n+</pre>\n+must be defined as the iterator's reference and pointer types, that\n+is, the same type as the type of <tt>*a</tt> and <tt>a-&gt;</tt>,\n+respectively.\n+</blockquote>\n+\n+<p>In 24.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.iterator.traits\"> [lib.iterator.traits]</a>, change:</p>\n+\n+<blockquote>\n+In the case of an output iterator, the types\n+<pre>iterator_traits&lt;Iterator&gt;::difference_type\n+iterator_traits&lt;Iterator&gt;::value_type\n+</pre>\n+are both defined as <tt>void</tt>.\n+</blockquote>\n+\n+<p>to:</p>\n+<blockquote>\n+In the case of an output iterator, the types\n+<pre>iterator_traits&lt;Iterator&gt;::difference_type\n+iterator_traits&lt;Iterator&gt;::value_type\n+iterator_traits&lt;Iterator&gt;::reference\n+iterator_traits&lt;Iterator&gt;::pointer\n+</pre>\n+may be defined as <tt>void</tt>.\n+</blockquote>\n+\n+<p>In 24.5.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.istreambuf.iterator\"> [lib.istreambuf.iterator]</a>, change:</p>\n+<blockquote>\n+<pre>typename traits::off_type, charT*, charT&amp;&gt;\n+</pre>\n+</blockquote>\n+<p>to:</p>\n+<blockquote>\n+<pre>typename traits::off_type, charT*, charT&gt;\n+</pre>\n+</blockquote>\n+\n+<p><i>[\n+Redmond: there was concern in Sydney that this might not be the only place\n+where things were underspecified and needed to be changed.  Jeremy\n+reviewed iterators in the standard and confirmed that nothing else\n+needed to be changed.\n+]</i></p>\n+\n+<hr>\n+<a name=\"448\"><h3>448.&nbsp;Random Access Iterators over abstract classes</h3></a><p><b>Section:</b>&nbsp;24.1.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.random.access.iterators\"> [lib.random.access.iterators]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Dave Abrahams&nbsp; <b>Date:</b>&nbsp;7 Jan 2004</p>\n <p>\n Table 76, the random access iterator requirement table, says that the\n return type of a[n] must be \"convertible to T\".  When an iterator's\n@@ -12520,7 +13341,7 @@ <h2>Defect Reports</h2>\n Change the return type to \"convertible to T const&amp;\".\n </p>\n <hr>\n-<a name=\"449\"><h3>449.&nbsp;Library Issue 306 Goes Too Far</h3></a><p><b>Section:</b>&nbsp;18.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-support.html#lib.support.types\"> [lib.support.types]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Pete Becker&nbsp; <b>Date:</b>&nbsp;15 Jan 2004</p>\n+<a name=\"449\"><h3>449.&nbsp;Library Issue 306 Goes Too Far</h3></a><p><b>Section:</b>&nbsp;18.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-support.html#lib.support.types\"> [lib.support.types]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Pete Becker&nbsp; <b>Date:</b>&nbsp;15 Jan 2004</p>\n <p>Original text:</p>\n <blockquote>\n The macro offsetof accepts a restricted set of type arguments in this\n@@ -12549,5 +13370,126 @@ <h2>Defect Reports</h2>\n to a field that is a static data member or a function member is\n undefined.\"\n </blockquote>\n+<hr>\n+<a name=\"453\"><h3>453.&nbsp;basic_stringbuf::seekoff need not always fail for an empty stream</h3></a><p><b>Section:</b>&nbsp;27.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Bill Plauger&nbsp; <b>Date:</b>&nbsp;30 Jan 2004</p>\n+<pre>  pos_type basic_stringbuf::seekoff(off_type, ios_base::seekdir,\n+                                    ios_base::openmode);\n+</pre>\n+<p>\n+is obliged to fail if nothing has been inserted into the stream. This\n+is unnecessary and undesirable. It should be permissible to seek to\n+an effective offset of zero.</p>\n+\n+<p><i>[\n+ Sydney: Agreed that this is an annoying problem: seeking to zero should be\n+ legal. Bill will provide wording.\n+]</i></p>\n+\n+<p><b>Proposed resolution:</b></p>\n+<p>Change the sentence from:</p>\n+<blockquote>\n+For a sequence to be positioned, if its next pointer (either\n+gptr() or pptr()) is a null pointer, the positioning operation\n+fails.\n+</blockquote>\n+\n+<p>to:</p>\n+\n+<blockquote>\n+For a sequence to be positioned, if its next pointer (either\n+gptr() or pptr()) is a null pointer and the new offset newoff\n+is nonzero, the positioning operation fails.\n+</blockquote>\n+<hr>\n+<a name=\"455\"><h3>455.&nbsp;cerr::tie() and wcerr::tie() are overspecified</h3></a><p><b>Section:</b>&nbsp;27.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostream.objects\"> [lib.iostream.objects]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Bill Plauger&nbsp; <b>Date:</b>&nbsp;30 Jan 2004</p>\n+<p>\n+Both cerr::tie() and wcerr::tie() are obliged to be null at program\n+startup. This is overspecification and overkill. It is both traditional\n+and useful to tie cerr to cout, to ensure that standard output is drained\n+whenever an error message is written. This behavior should at least be\n+permitted if not required. Same for wcerr::tie().\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+\n+<p>Add to the description of cerr:</p>\n+<blockquote>\n+After the object cerr is initialized, cerr.tie() returns &amp;cout.\n+Its state is otherwise the same as required for basic_ios&lt;char&gt;::init\n+(lib.basic.ios.cons).\n+</blockquote>\n+\n+<p>Add to the description of wcerr:</p>\n+\n+<blockquote>\n+After the object wcerr is initialized, wcerr.tie() returns &amp;wcout.\n+Its state is otherwise the same as required for basic_ios&lt;wchar_t&gt;::init\n+(lib.basic.ios.cons).\n+</blockquote>\n+\n+<p><i>[Sydney: straw poll (3-1): we should <i>require</i>, not just\n+  permit, cout and cerr to be tied on startup.  Pre-Redmond: Bill will\n+  provide wording.]</i></p>\n+<hr>\n+<a name=\"457\"><h3>457.&nbsp;bitset constructor: incorrect number of initialized bits</h3></a><p><b>Section:</b>&nbsp;23.3.5.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.bitset.cons\"> [lib.bitset.cons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Dag Henriksson&nbsp; <b>Date:</b>&nbsp;30 Jan 2004</p>\n+<p>\n+The constructor from unsigned long says it initializes \"the first M\n+bit positions to the corresponding bit values in val. M is the smaller\n+of N and the value CHAR_BIT * sizeof(unsigned long).\"\n+</p>\n+\n+<p>\n+Object-representation vs. value-representation strikes again. CHAR_BIT *\n+sizeof (unsigned long) does not give us the number of bits an unsigned long\n+uses to hold the value. Thus, the first M bit position above is not\n+guaranteed to have any corresponding bit values in val.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>In 23.3.5.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.bitset.cons\"> [lib.bitset.cons]</a> paragraph 2, change \"M is the smaller of\n+  N and the value CHAR_BIT * sizeof (unsigned long). (249)\" to\n+  \"<tt>M</tt> is the smaller of <tt>N</tt> and the number of bits in\n+  the value representation (section 3.9 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/basic.html#basic.types\"> [basic.types]</a>) of <tt>unsigned\n+  long</tt>.\"\n+</p>\n+<hr>\n+<a name=\"460\"><h3>460.&nbsp;Default modes missing from basic_fstream member specifications</h3></a><p><b>Section:</b>&nbsp;27.8.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.fstreams\"> [lib.fstreams]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Ben Hutchings&nbsp; <b>Date:</b>&nbsp;1 Apr 2004</p>\n+<p>\n+The second parameters of the non-default constructor and of the open\n+member function for basic_fstream, named \"mode\", are optional\n+according to the class declaration in 27.8.1.11 [lib.fstream].  The\n+specifications of these members in 27.8.1.12 [lib.fstream.cons] and\n+27.8.1.13 lib.fstream.members] disagree with this, though the\n+constructor declaration has the \"explicit\" function-specifier implying\n+that it is intended to be callable with one argument.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>In 27.8.1.12 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.fstream.cons\"> [lib.fstream.cons]</a>, change</p>\n+<pre>  explicit basic_fstream(const char* s, ios_base::openmode mode); \n+</pre>\n+<p>to</p>\n+<pre>  explicit basic_fstream(const char* s,\n+                         ios_base::openmode mode = ios_base::in|ios_base::out);\n+</pre>\n+<p>In 27.8.1.13 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.fstream.members\"> [lib.fstream.members]</a>, change</p>\n+<pre>  void open(const char*s, ios_base::openmode mode); \n+</pre>\n+<p>to</p>\n+  void open(const char*s,\n+            ios_base::openmode mode = ios_base::in|ios_base::out);\n+<hr>\n+<a name=\"469\"><h3>469.&nbsp;vector&lt;bool&gt; ill-formed relational operators</h3></a><p><b>Section:</b>&nbsp;23.2.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector.bool\"> [lib.vector.bool]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;28 Jun 2004</p>\n+\n+<p>\n+The overloads of relational operators for vector&lt;bool&gt; specified\n+in [lib.vector.bool] are redundant (they are semantically identical\n+to those provided for the vector primary template) and may even be\n+diagnosed as ill-formed (refer to Daveed Vandevoorde's explanation\n+in c++std-lib-13647).\n+</p>\n+\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+Remove all overloads of overloads of relational operators for\n+vector&lt;bool&gt; from [lib.vector.bool].\n+</p>\n <p>----- End of document -----</p>\n </body></html>\n\\ No newline at end of file"}]}