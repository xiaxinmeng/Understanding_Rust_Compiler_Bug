{"sha": "d8a7c72cba2e0a26671753d7af1904a2618cd6ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhhN2M3MmNiYTJlMGEyNjY3MTc1M2Q3YWYxOTA0YTI2MThjZDZmZg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-07-22T16:02:32Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-07-22T16:02:32Z"}, "message": "Fix vext[us]64_1.c test on ARM by unsharing test body.\n\n\t* gcc.target/arm/simd/vexts64_1.c: Remove #include, inline test body.\n\t* gcc.target/arm/simd/vextu64_1.c: Likewise.\n\t* gcc.target/aarch64/simd/ext_s64_1.c: Likewise.\n\t* gcc.target/aarch64/simd/ext_u64_1.c: Likewise.\n\t* gcc.target/aarch64/simd/ext_s64.x: Remove.\n\t* gcc.target/aarch64/simd/ext_u64.x: Remove.\n\nFrom-SVN: r212914", "tree": {"sha": "2ffcd6d41bd26c333f30cc4306a292c1d6783f9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ffcd6d41bd26c333f30cc4306a292c1d6783f9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8a7c72cba2e0a26671753d7af1904a2618cd6ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a7c72cba2e0a26671753d7af1904a2618cd6ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8a7c72cba2e0a26671753d7af1904a2618cd6ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a7c72cba2e0a26671753d7af1904a2618cd6ff/comments", "author": null, "committer": null, "parents": [{"sha": "781aeb73bccb86d892e1f565e807a2dfa647e4ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/781aeb73bccb86d892e1f565e807a2dfa647e4ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/781aeb73bccb86d892e1f565e807a2dfa647e4ee"}], "stats": {"total": 111, "additions": 73, "deletions": 38}, "files": [{"sha": "c68ce3c3d35c3e39883e5567b23530f40792f5b0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a7c72cba2e0a26671753d7af1904a2618cd6ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a7c72cba2e0a26671753d7af1904a2618cd6ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8a7c72cba2e0a26671753d7af1904a2618cd6ff", "patch": "@@ -1,3 +1,12 @@\n+2014-07-22  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/arm/simd/vexts64_1.c: Remove #include, inline test body.\n+\t* gcc.target/arm/simd/vextu64_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/ext_s64_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/ext_u64_1.c: Likewise.\n+\t* gcc.target/aarch64/simd/ext_s64.x: Remove.\n+\t* gcc.target/aarch64/simd/ext_u64.x: Remove.\n+\n 2014-07-22  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR tree-optimization/61822"}, {"sha": "b879fdacaa6544790e4d3ff98ca0055073d6d1d1", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_s64.x", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781aeb73bccb86d892e1f565e807a2dfa647e4ee/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s64.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781aeb73bccb86d892e1f565e807a2dfa647e4ee/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s64.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s64.x?ref=781aeb73bccb86d892e1f565e807a2dfa647e4ee", "patch": "@@ -1,17 +0,0 @@\n-extern void abort (void);\n-\n-int\n-main (int argc, char **argv)\n-{\n-  int i, off;\n-  int64_t arr1[] = {0};\n-  int64x1_t in1 = vld1_s64 (arr1);\n-  int64_t arr2[] = {1};\n-  int64x1_t in2 = vld1_s64 (arr2);\n-  int64x1_t actual = vext_s64 (in1, in2, 0);\n-  if (actual[0] != in1[0])\n-    abort ();\n-\n-  return 0;\n-}\n-"}, {"sha": "5d246978345b85ad93c1d19cc7aaf09d9a50056c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_s64_1.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a7c72cba2e0a26671753d7af1904a2618cd6ff/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a7c72cba2e0a26671753d7af1904a2618cd6ff/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_s64_1.c?ref=d8a7c72cba2e0a26671753d7af1904a2618cd6ff", "patch": "@@ -4,7 +4,22 @@\n /* { dg-options \"-save-temps -O3 -fno-inline\" } */\n \n #include \"arm_neon.h\"\n-#include \"ext_s64.x\"\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int64_t arr1[] = {0};\n+  int64x1_t in1 = vld1_s64 (arr1);\n+  int64_t arr2[] = {1};\n+  int64x1_t in2 = vld1_s64 (arr2);\n+  int64x1_t actual = vext_s64 (in1, in2, 0);\n+  if (actual[0] != in1[0])\n+    abort ();\n+\n+  return 0;\n+}\n \n /* Do not scan-assembler.  An EXT instruction could be emitted, but would merely\n    return its first argument, so it is legitimate to optimize it out.  */"}, {"sha": "bd51e27c2156bfcaca6b26798c449369b2894c08", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_u64.x", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/781aeb73bccb86d892e1f565e807a2dfa647e4ee/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u64.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/781aeb73bccb86d892e1f565e807a2dfa647e4ee/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u64.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u64.x?ref=781aeb73bccb86d892e1f565e807a2dfa647e4ee", "patch": "@@ -1,17 +0,0 @@\n-extern void abort (void);\n-\n-int\n-main (int argc, char **argv)\n-{\n-  int i, off;\n-  uint64_t arr1[] = {0};\n-  uint64x1_t in1 = vld1_u64 (arr1);\n-  uint64_t arr2[] = {1};\n-  uint64x1_t in2 = vld1_u64 (arr2);\n-  uint64x1_t actual = vext_u64 (in1, in2, 0);\n-  if (actual[0] != in1[0])\n-    abort ();\n-\n-  return 0;\n-}\n-"}, {"sha": "644b73202567fdb5fdc779f48bf398c9e5268c00", "filename": "gcc/testsuite/gcc.target/aarch64/simd/ext_u64_1.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a7c72cba2e0a26671753d7af1904a2618cd6ff/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a7c72cba2e0a26671753d7af1904a2618cd6ff/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fext_u64_1.c?ref=d8a7c72cba2e0a26671753d7af1904a2618cd6ff", "patch": "@@ -4,7 +4,22 @@\n /* { dg-options \"-save-temps -O3 -fno-inline\" } */\n \n #include \"arm_neon.h\"\n-#include \"ext_u64.x\"\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64_t arr1[] = {0};\n+  uint64x1_t in1 = vld1_u64 (arr1);\n+  uint64_t arr2[] = {1};\n+  uint64x1_t in2 = vld1_u64 (arr2);\n+  uint64x1_t actual = vext_u64 (in1, in2, 0);\n+  if (actual[0] != in1[0])\n+    abort ();\n+\n+  return 0;\n+}\n \n /* Do not scan-assembler.  An EXT instruction could be emitted, but would merely\n    return its first argument, so it is legitimate to optimize it out.  */"}, {"sha": "10053a5e398e8c01ac3ad78d93d13db33d4bb668", "filename": "gcc/testsuite/gcc.target/arm/simd/vexts64_1.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a7c72cba2e0a26671753d7af1904a2618cd6ff/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvexts64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a7c72cba2e0a26671753d7af1904a2618cd6ff/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvexts64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvexts64_1.c?ref=d8a7c72cba2e0a26671753d7af1904a2618cd6ff", "patch": "@@ -6,7 +6,22 @@\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n-#include \"../../aarch64/simd/ext_s64.x\"\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  int64_t arr1[] = {0};\n+  int64x1_t in1 = vld1_s64 (arr1);\n+  int64_t arr2[] = {1};\n+  int64x1_t in2 = vld1_s64 (arr2);\n+  int64x1_t actual = vext_s64 (in1, in2, 0);\n+  if (actual != in1)\n+    abort ();\n+\n+  return 0;\n+}\n \n /* Don't scan assembler for vext - it can be optimized into a move from r0.  */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "eeb0be2732c083f3aafa3d3067959e13f05cb47d", "filename": "gcc/testsuite/gcc.target/arm/simd/vextu64_1.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a7c72cba2e0a26671753d7af1904a2618cd6ff/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvextu64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a7c72cba2e0a26671753d7af1904a2618cd6ff/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvextu64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fvextu64_1.c?ref=d8a7c72cba2e0a26671753d7af1904a2618cd6ff", "patch": "@@ -6,7 +6,22 @@\n /* { dg-add-options arm_neon } */\n \n #include \"arm_neon.h\"\n-#include \"../../aarch64/simd/ext_u64.x\"\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  uint64_t arr1[] = {0};\n+  uint64x1_t in1 = vld1_u64 (arr1);\n+  uint64_t arr2[] = {1};\n+  uint64x1_t in2 = vld1_u64 (arr2);\n+  uint64x1_t actual = vext_u64 (in1, in2, 0);\n+  if (actual != in1)\n+    abort ();\n+\n+  return 0;\n+}\n \n /* Don't scan assembler for vext - it can be optimized into a move from r0.  */\n /* { dg-final { cleanup-saved-temps } } */"}]}