{"sha": "8f9ddf6acff067428b2312626c50caf9956978b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY5ZGRmNmFjZmYwNjc0MjhiMjMxMjYyNmM1MGNhZjk5NTY5NzhiMQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2008-07-02T15:30:11Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2008-07-02T15:30:11Z"}, "message": "SPU single-precision FP does not support subnormals:\n\n\t* gcc.c-torture/execute/ieee/mul-subnormal-single-1.x: New file.\n\n\tSPU single-precision FP does not support Inf or Nan:\n\t* gcc.c-torture/execute/ieee/inf-1.c: Disable \"float\" Inf test on SPU.\n\t* gcc.c-torture/execute/ieee/compare-fp-1.x: New file.\n\t* gcc.c-torture/execute/ieee/compare-fp-4.x: Disable test on SPU.\n\t* gcc.c-torture/execute/ieee/fp-cmp-2.x: Disable test on SPU.\n\t* gcc.c-torture/execute/ieee/fp-cmp-4f.x: New file.\n\t* gcc.c-torture/execute/ieee/fp-cmp-8f.x: New file.\n\t* gcc.dg/pr15784-3.c: Disable test on SPU.\n\t* gcc.dg/pr28796-2.c: Likewise.\n\t* gcc.dg/float-range-1.c: Likewise.\n\t* gcc.dg/float-range-3.c: Likewise.\n\t* gcc.dg/float-range-4.c: Likewise.\n\t* gcc.dg/float-range-5.c: Likewise.\n\t* gcc.dg/fold-overflow-1.c: Likewise.\n\t* gcc.dg/builtins-1.c: SPU does not support __builtin_inff.\n\t* gcc.dg/builtin-inf-1.c: SPU does not support __builtin_inff.\n\tCheck for error instead of warning \"does not support infinity\".\n\t* gcc.dg/builtins-43.c: Disable \"float\" Inf/Nan tests on SPU. \n\t* gcc.dg/builtins-44.c: Likewise.\n\t* gcc.dg/builtins-45.c: Likewise.\n\t* gcc.dg/torture/builtin-math-2.c: Likewise.\n\t* gcc.dg/torture/builtin-logb-1.c: Likewise.\n\t* gcc.dg/torture/builtin-modf-1.c: Likewise.\n\t* gcc.dg/torture/builtin-ldexp-1.c: Likewise.\n\t* gcc.dg/torture/builtin-frexp-1.c: Likewise.\n\t* gcc.dg/torture/type-generic-1.c: Disable test on SPU.\n\t* g++.dg/torture/type-generic-1.C: Likewise.\n\n\tSPU single-precision FP always rounds towards zero:\n\t* gcc.c-torture/execute/ieee/920518-1.x: New file.\n\t* gcc.c-torture/execute/ieee/20010114-2.x: New file.\n\t* gcc.c-torture/execute/ieee/20030331-1.x: New file.\n\t* gcc.dg/torture/fp-int-convert-float.c: Disable test on SPU.\n\t* gcc.dg/torture/fp-int-convert-timode.c: Disable \"float\" test on SPU.\n\nFrom-SVN: r137357", "tree": {"sha": "000bd5701d7196135d4a5c669a8b2d9290117bda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/000bd5701d7196135d4a5c669a8b2d9290117bda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f9ddf6acff067428b2312626c50caf9956978b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f9ddf6acff067428b2312626c50caf9956978b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f9ddf6acff067428b2312626c50caf9956978b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f9ddf6acff067428b2312626c50caf9956978b1/comments", "author": null, "committer": null, "parents": [{"sha": "04f2b606255665f14665146c28f6236d6f932dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f2b606255665f14665146c28f6236d6f932dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f2b606255665f14665146c28f6236d6f932dab"}], "stats": {"total": 253, "additions": 246, "deletions": 7}, "files": [{"sha": "e8175a1208385a8d81d668f74987ae5ebea08cc0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -1,3 +1,43 @@\n+2008-07-02  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\tSPU single-precision FP does not support subnormals:\n+\t* gcc.c-torture/execute/ieee/mul-subnormal-single-1.x: New file.\n+\n+\tSPU single-precision FP does not support Inf or Nan:\n+\t* gcc.c-torture/execute/ieee/inf-1.c: Disable \"float\" Inf test on SPU.\n+\t* gcc.c-torture/execute/ieee/compare-fp-1.x: New file.\n+\t* gcc.c-torture/execute/ieee/compare-fp-4.x: Disable test on SPU.\n+\t* gcc.c-torture/execute/ieee/fp-cmp-2.x: Disable test on SPU.\n+\t* gcc.c-torture/execute/ieee/fp-cmp-4f.x: New file.\n+\t* gcc.c-torture/execute/ieee/fp-cmp-8f.x: New file.\n+\t* gcc.dg/pr15784-3.c: Disable test on SPU.\n+\t* gcc.dg/pr28796-2.c: Likewise.\n+\t* gcc.dg/float-range-1.c: Likewise.\n+\t* gcc.dg/float-range-3.c: Likewise.\n+\t* gcc.dg/float-range-4.c: Likewise.\n+\t* gcc.dg/float-range-5.c: Likewise.\n+\t* gcc.dg/fold-overflow-1.c: Likewise.\n+\t* gcc.dg/builtins-1.c: SPU does not support __builtin_inff.\n+\t* gcc.dg/builtin-inf-1.c: SPU does not support __builtin_inff.\n+\tCheck for error instead of warning \"does not support infinity\".\n+\t* gcc.dg/builtins-43.c: Disable \"float\" Inf/Nan tests on SPU. \n+\t* gcc.dg/builtins-44.c: Likewise.\n+\t* gcc.dg/builtins-45.c: Likewise.\n+\t* gcc.dg/torture/builtin-math-2.c: Likewise.\n+\t* gcc.dg/torture/builtin-logb-1.c: Likewise.\n+\t* gcc.dg/torture/builtin-modf-1.c: Likewise.\n+\t* gcc.dg/torture/builtin-ldexp-1.c: Likewise.\n+\t* gcc.dg/torture/builtin-frexp-1.c: Likewise.\n+\t* gcc.dg/torture/type-generic-1.c: Disable test on SPU.\n+\t* g++.dg/torture/type-generic-1.C: Likewise.\n+\n+\tSPU single-precision FP always rounds towards zero:\n+\t* gcc.c-torture/execute/ieee/920518-1.x: New file.\n+\t* gcc.c-torture/execute/ieee/20010114-2.x: New file.\n+\t* gcc.c-torture/execute/ieee/20030331-1.x: New file.\n+\t* gcc.dg/torture/fp-int-convert-float.c: Disable test on SPU.\n+\t* gcc.dg/torture/fp-int-convert-timode.c: Disable \"float\" test on SPU.\n+\n 2008-07-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/36590"}, {"sha": "7db2e69d0a58de8ca49c0866c81bafb0e02e67e4", "filename": "gcc/testsuite/g++.dg/torture/type-generic-1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Ftype-generic-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Ftype-generic-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Ftype-generic-1.C?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -3,6 +3,7 @@\n \n /* { dg-do run } */\n /* { dg-options \"-mieee\" { target sh*-*-* } } */\n+/* { dg-skip-if \"No Inf/NaN support\" { spu-*-* } } */\n \n #include \"../../gcc.dg/tg-tests.h\"\n "}, {"sha": "73b18d1604d911a4804a94f88720d927d343fcda", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/20010114-2.x", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F20010114-2.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F20010114-2.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F20010114-2.x?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -0,0 +1,6 @@\n+if [istarget \"spu-*-*\"] {\n+    # This doesn't work on the SPU because single precision floats are\n+    # always rounded toward 0.\n+    return 1\n+}\n+return 0"}, {"sha": "73b18d1604d911a4804a94f88720d927d343fcda", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/20030331-1.x", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F20030331-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F20030331-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F20030331-1.x?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -0,0 +1,6 @@\n+if [istarget \"spu-*-*\"] {\n+    # This doesn't work on the SPU because single precision floats are\n+    # always rounded toward 0.\n+    return 1\n+}\n+return 0"}, {"sha": "73b18d1604d911a4804a94f88720d927d343fcda", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/920518-1.x", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F920518-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F920518-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2F920518-1.x?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -0,0 +1,6 @@\n+if [istarget \"spu-*-*\"] {\n+    # This doesn't work on the SPU because single precision floats are\n+    # always rounded toward 0.\n+    return 1\n+}\n+return 0"}, {"sha": "2f7a4ecc54a3db40bd1916e38b6ed793ead40179", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/compare-fp-1.x", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcompare-fp-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcompare-fp-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcompare-fp-1.x?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -0,0 +1,6 @@\n+if [istarget \"spu-*-*\"] {\n+    # The SPU single-precision floating point format does not\n+    # support Nan & Inf. \n+    return 1\n+}\n+return 0"}, {"sha": "d7ecd1100897d27c89cb9b71ba546278a0d9770e", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/compare-fp-4.x", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcompare-fp-4.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcompare-fp-4.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fcompare-fp-4.x?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -13,5 +13,11 @@ if [istarget \"arm*-*-vxworks*\"] {\n     }\n }\n \n+if [istarget \"spu-*-*\"] {\n+    # The SPU single-precision floating point format does not\n+    # support Nan & Inf.\n+    return 1\n+}\n+\n lappend additional_flags \"-fno-trapping-math\"\n return 0"}, {"sha": "0fe5a98d375760301d285652e75e063cffa331e8", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/fp-cmp-2.x", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-2.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-2.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-2.x?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -13,4 +13,10 @@ if [istarget \"arm*-*-vxworks*\"] {\n     }\n }\n \n+if [istarget \"spu-*-*\"] {\n+    # The SPU single-precision floating point format does not\n+    # support Nan & Inf.\n+    return 1\n+}\n+\n return 0"}, {"sha": "2f7a4ecc54a3db40bd1916e38b6ed793ead40179", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/fp-cmp-4f.x", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-4f.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-4f.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-4f.x?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -0,0 +1,6 @@\n+if [istarget \"spu-*-*\"] {\n+    # The SPU single-precision floating point format does not\n+    # support Nan & Inf. \n+    return 1\n+}\n+return 0"}, {"sha": "2f7a4ecc54a3db40bd1916e38b6ed793ead40179", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/fp-cmp-8f.x", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-8f.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-8f.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-8f.x?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -0,0 +1,6 @@\n+if [istarget \"spu-*-*\"] {\n+    # The SPU single-precision floating point format does not\n+    # support Nan & Inf. \n+    return 1\n+}\n+return 0"}, {"sha": "eee8c0130bacb6898f8aa274b3d63a869de948ee", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/inf-1.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Finf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Finf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Finf-1.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -2,30 +2,39 @@ extern void abort (void);\n \n int main()\n {\n+#ifndef __SPU__\n+  /* The SPU single-precision floating point format does not support Inf.  */\n   float fi = __builtin_inff();\n+#endif\n   double di = __builtin_inf();\n   long double li = __builtin_infl();\n \n   float fh = __builtin_huge_valf();\n   double dh = __builtin_huge_val();\n   long double lh = __builtin_huge_vall();\n \n+#ifndef __SPU__\n   if (fi + fi != fi)\n     abort ();\n+#endif\n   if (di + di != di)\n     abort ();\n   if (li + li != li)\n     abort ();\n \n+#ifndef __SPU__\n   if (fi != fh)\n     abort ();\n+#endif\n   if (di != dh)\n     abort ();\n   if (li != lh)\n     abort ();\n \n+#ifndef __SPU__\n   if (fi <= 0)\n     abort ();\n+#endif\n   if (di <= 0)\n     abort ();\n   if (li <= 0)"}, {"sha": "5978c94a8eae69c2d94e2db81f91943702ea791c", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/mul-subnormal-single-1.x", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmul-subnormal-single-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmul-subnormal-single-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fmul-subnormal-single-1.x?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -8,4 +8,9 @@ if {[istarget \"m68k-*-*\"] && [check_effective_target_coldfire_fpu]} {\n     # not aware of any system that has this.\n     set torture_execute_xfail \"m68k-*-*\"\n }\n+if [istarget \"spu-*-*\"] {\n+    # The SPU single-precision floating point format does not\n+    # support subnormals.\n+    return 1\n+}\n return 0"}, {"sha": "d96a5b6b3f506deda7ff39182ce7206a79d20fd7", "filename": "gcc/testsuite/gcc.dg/builtin-inf-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-inf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-inf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-inf-1.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -8,6 +8,6 @@ float fh = __builtin_huge_valf();\n double dh = __builtin_huge_val();\n long double lh = __builtin_huge_vall();\n \n-/* { dg-warning \"does not support infinity\" \"INF unsupported\" { target vax-*-* } 3 } */\n-/* { dg-warning \"does not support infinity\" \"INF unsupported\" { target vax-*-* } 4 } */\n-/* { dg-warning \"does not support infinity\" \"INF unsupported\" { target vax-*-* } 5 } */\n+/* { dg-error \"does not support infinity\" \"INF unsupported\" { target vax-*-* spu-*-* } 3 } */\n+/* { dg-error \"does not support infinity\" \"INF unsupported\" { target vax-*-* } 4 } */\n+/* { dg-error \"does not support infinity\" \"INF unsupported\" { target vax-*-* } 5 } */"}, {"sha": "5dab9fe0a4e0a410eea3f14c067430e52bc8fcca", "filename": "gcc/testsuite/gcc.dg/builtins-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-1.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -144,7 +144,7 @@ FPTEST2ARG2_REENT (gamma, int *) /* gamma_r */\n FPTEST0     (huge_val)\n FPTEST2     (hypot)\n FPTEST1     (ilogb)\n-FPTEST0     (inf)\n+FPTEST0     (inf)  /* { dg-warning \"target format does not support infinity\" \"inf\" {target spu-*-*} } */\n FPTEST1     (j0)\n FPTEST1     (j1)\n FPTEST2ARG1 (jn, int)"}, {"sha": "85d96b6cb0c45a1e857eef3614feb9ac00e533cf", "filename": "gcc/testsuite/gcc.dg/builtins-43.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-43.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -12,15 +12,20 @@ int\n main ()\n {\n   double nan = __builtin_nan (\"\");\n+#ifndef __SPU__\n+  /* The SPU single-precision floating point format does not support NANs.  */\n   float nanf = __builtin_nanf (\"\");\n+#endif\n   long double nanl = __builtin_nanl (\"\");\n \n   if (!__builtin_isnan (nan))\n     link_error ();\n+#ifndef __SPU__\n   if (!__builtin_isnan (nanf))\n     link_error ();\n   if (!__builtin_isnanf (nanf))\n     link_error ();\n+#endif\n   if (!__builtin_isnan (nanl))\n     link_error ();\n   if (!__builtin_isnanl (nanl))"}, {"sha": "9e19d774dfd78e7f9c82f4cf9df9184afa9f4a8c", "filename": "gcc/testsuite/gcc.dg/builtins-44.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-44.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -12,26 +12,33 @@ int\n main ()\n {\n   double pinf = __builtin_inf ();\n+#ifndef __SPU__\n+  /* The SPU single-precision floating point format does not support Inf.  */\n   float pinff = __builtin_inff ();\n+#endif\n   long double pinfl = __builtin_infl ();\n \n   if (__builtin_isinf (pinf) != 1)\n     link_error ();\n+#ifndef __SPU__\n   if (__builtin_isinf (pinff) != 1)\n     link_error ();\n   if (__builtin_isinff (pinff) != 1)\n     link_error ();\n+#endif\n   if (__builtin_isinf (pinfl) != 1)\n     link_error ();\n   if (__builtin_isinfl (pinfl) != 1)\n     link_error ();\n \n   if (__builtin_isinf (-pinf) != -1)\n     link_error ();\n+#ifndef __SPU__\n   if (__builtin_isinf (-pinff) != -1)\n     link_error ();\n   if (__builtin_isinff (-pinff) != -1)\n     link_error ();\n+#endif\n   if (__builtin_isinf (-pinfl) != -1)\n     link_error ();\n   if (__builtin_isinfl (-pinfl) != -1)"}, {"sha": "15ec33af6771b3234e0beb9d5c256025578fd4f2", "filename": "gcc/testsuite/gcc.dg/builtins-45.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-45.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-45.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-45.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -12,24 +12,34 @@ int\n main ()\n {\n   double nan = __builtin_nan (\"\");\n+#ifndef __SPU__\n+  /* The SPU single-precision floating point format does not support NANs.  */\n   float nanf = __builtin_nanf (\"\");\n+#endif\n   long double nanl = __builtin_nanl (\"\");\n \n   double pinf = __builtin_inf ();\n+#ifndef __SPU__\n+  /* The SPU single-precision floating point format does not support Inf.  */\n   float pinff = __builtin_inff ();\n+#endif\n   long double pinfl = __builtin_infl ();\n \n   if (__builtin_finite (pinf))\n     link_error ();\n+#ifndef __SPU__\n   if (__builtin_finitef (pinff))\n     link_error ();\n+#endif\n   if (__builtin_finitel (pinfl))\n     link_error ();\n \n   if (__builtin_finite (nan))\n     link_error ();\n+#ifndef __SPU__\n   if (__builtin_finitef (nanf))\n     link_error ();\n+#endif\n   if (__builtin_finitel (nanl))\n     link_error ();\n "}, {"sha": "ddd7fd672072a1d41fd98fd823d934570df1fc0a", "filename": "gcc/testsuite/gcc.dg/float-range-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-1.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -4,6 +4,7 @@\n /* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n /* { dg-do compile } */\n /* { dg-options \"-ansi -pedantic-errors -Woverflow\" } */\n+/* { dg-skip-if \"No Inf support\" { spu-*-* } } */\n \n void\n f (void)"}, {"sha": "e018a1ebc16989116e95eebcf4006669a28442c5", "filename": "gcc/testsuite/gcc.dg/float-range-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-3.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -1,6 +1,7 @@\n /* PR 23572 : warnings for out of range floating-point constants.  */\n /* { dg-compile } */\n /* { dg-options \"-std=c99\" } */\n+/* { dg-skip-if \"No Inf support\" { spu-*-* } } */\n #include <math.h>\n \n #ifndef INFINITY"}, {"sha": "fbb820f9b21f06f251f15875236cdfd60ae85988", "filename": "gcc/testsuite/gcc.dg/float-range-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-4.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -1,6 +1,7 @@\n /* PR 23572 : warnings for out of range floating-point constants.  */\n /* { dg-compile } */\n /* { dg-options \"-Wno-overflow -std=c99\" } */\n+/* { dg-skip-if \"No Inf support\" { spu-*-* } } */\n #include <math.h>\n \n #ifndef INFINITY"}, {"sha": "89f00796aec9be16d5c5b9e58ba886654ac8ab48", "filename": "gcc/testsuite/gcc.dg/float-range-5.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffloat-range-5.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -2,6 +2,7 @@\n    Test that they are NOT pedantic warnings.  */\n /* { dg-compile } */\n /* { dg-options \"-pedantic-errors -std=c99\" } */\n+/* { dg-skip-if \"No Inf support\" { spu-*-* } } */\n #include <math.h>\n \n #ifndef INFINITY"}, {"sha": "bd4d25a73ed23a227a4c0c46351e9970b49e66b7", "filename": "gcc/testsuite/gcc.dg/fold-overflow-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-overflow-1.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -1,5 +1,6 @@\n /* { dg-compile } */\n /* { dg-skip-if \"consts are shorts, not longs\" { \"m32c-*-*\" \"avr-*-*\" } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No Inf support\" { spu-*-* } } */\n /* { dg-options \"-O -ftrapping-math\" } */\n \n /* There should be exactly 2 +Inf in the assembly file.  */"}, {"sha": "746f9660e48fd6039d13f679f945d17aa1fffc4c", "filename": "gcc/testsuite/gcc.dg/pr15784-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15784-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15784-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15784-3.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-skip-if \"No NaN support\" { spu-*-* } } */\n /* SH4 without -mieee defaults to -ffinite-math-only.  */\n /* { dg-options \"-fdump-tree-gimple -fno-finite-math-only\" } */\n /* Test for folding abs(x) where appropriate.  */"}, {"sha": "17fd1584dde577a35c7a16cebd8accbf6d1a3600", "filename": "gcc/testsuite/gcc.dg/pr28796-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28796-2.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -funsafe-math-optimizations -fno-finite-math-only -DUNSAFE\" } */\n /* { dg-options \"-mieee -O2 -funsafe-math-optimizations -fno-finite-math-only -DUNSAFE\" { target alpha*-*-* } } */\n+/* { dg-skip-if \"No Inf/NaN support\" { spu-*-* } } */\n \n #include \"tg-tests.h\"\n "}, {"sha": "3ef23648a341497455dd4792a93c17ef086209bf", "filename": "gcc/testsuite/gcc.dg/torture/builtin-frexp-1.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-frexp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-frexp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-frexp-1.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -53,6 +53,7 @@ extern void link_error(int);\n \n /* Test that FUNCRES(frexp(NEG FUNCARG(ARGARG),&i)) is false.  Check\n    the sign as well.  Ensure side-effects are evaluated in i.  */\n+#ifndef __SPU__\n #define TESTIT_FREXP2(NEG,FUNCARG,ARGARG,FUNCRES) do { \\\n   int i=5; \\\n   if (!__builtin_##FUNCRES##f(__builtin_frexpf(NEG __builtin_##FUNCARG##f(ARGARG),&i)) \\\n@@ -68,6 +69,20 @@ extern void link_error(int);\n       || CKEXP(i,8)) \\\n     link_error(__LINE__); \\\n   } while (0)\n+#else\n+#define TESTIT_FREXP2(NEG,FUNCARG,ARGARG,FUNCRES) do { \\\n+  int i=6; \\\n+  /* SPU single-precision floating point format does not support Inf or Nan.  */ \\\n+  if (!__builtin_##FUNCRES(__builtin_frexp(NEG __builtin_##FUNCARG(ARGARG),&i)) \\\n+      || CKSGN(__builtin_frexp(NEG __builtin_##FUNCARG(ARGARG),(i++,&i)), NEG __builtin_##FUNCARG(ARGARG)) \\\n+      || CKEXP(i,7)) \\\n+    link_error(__LINE__); \\\n+  if (!__builtin_##FUNCRES##l(__builtin_frexpl(NEG __builtin_##FUNCARG##l(ARGARG),&i)) \\\n+      || CKSGN_L(__builtin_frexpl(NEG __builtin_##FUNCARG##l(ARGARG),(i++,&i)), NEG __builtin_##FUNCARG##l(ARGARG)) \\\n+      || CKEXP(i,8)) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+#endif\n \n void __attribute__ ((__noinline__))\n foo(void)"}, {"sha": "94560a8abb42c0ffdf650643d383f0cfc7991144", "filename": "gcc/testsuite/gcc.dg/torture/builtin-ldexp-1.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-ldexp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-ldexp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-ldexp-1.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -45,6 +45,7 @@ extern void link_error(int);\n \n /* Test that FUNCRES(FUNC(NEG FUNCARG(ARGARG),ARG2)) is false.  Check\n    the sign as well.  */\n+#ifndef __SPU__\n #define TESTIT3(FUNC,NEG,FUNCARG,ARGARG,ARG2,FUNCRES) do { \\\n   if (!__builtin_##FUNCRES##f(__builtin_##FUNC##f(NEG __builtin_##FUNCARG##f(ARGARG),ARG2)) \\\n       || CKSGN_F(__builtin_##FUNC##f(NEG __builtin_##FUNCARG##f(ARGARG),ARG2), NEG __builtin_##FUNCARG##f(ARGARG))) \\\n@@ -56,6 +57,17 @@ extern void link_error(int);\n       || CKSGN_L(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG),ARG2), NEG __builtin_##FUNCARG##l(ARGARG))) \\\n     link_error(__LINE__); \\\n   } while (0)\n+#else\n+#define TESTIT3(FUNC,NEG,FUNCARG,ARGARG,ARG2,FUNCRES) do { \\\n+  /* SPU single-precision floating point format does not support Inf or Nan.  */ \\\n+  if (!__builtin_##FUNCRES(__builtin_##FUNC(NEG __builtin_##FUNCARG(ARGARG),ARG2)) \\\n+      || CKSGN(__builtin_##FUNC(NEG __builtin_##FUNCARG(ARGARG),ARG2), NEG __builtin_##FUNCARG(ARGARG))) \\\n+    link_error(__LINE__); \\\n+  if (!__builtin_##FUNCRES##l(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG),ARG2)) \\\n+      || CKSGN_L(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG),ARG2), NEG __builtin_##FUNCARG##l(ARGARG))) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+#endif\n \n /* Using foo==MIN/MAX float values, test that FUNC(foo,EXP) == foo*exp2(EXP),\n    and also that FUNC(foo,-EXP) == foo*exp2(-EXP).  */"}, {"sha": "25d0f91064e7c3fa42a20628a72e8411c068de73", "filename": "gcc/testsuite/gcc.dg/torture/builtin-logb-1.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-logb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-logb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-logb-1.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -47,6 +47,7 @@ extern void link_error(int);\n \n /* Test if FUNCRES(FUNC(NEG FUNCARG(ARGARG))) is false.  Check the\n    sign as well.  */\n+#ifndef __SPU__\n #define TESTIT3(FUNC,NEG,FUNCARG,ARGARG,FUNCRES) do { \\\n   if (!__builtin_##FUNCRES##f(__builtin_##FUNC(NEG __builtin_##FUNCARG##f(ARGARG))) \\\n       || CKSGN_F(__builtin_##FUNC##f(NEG __builtin_##FUNCARG##f(ARGARG)), NEG __builtin_##FUNCARG##f(ARGARG))) \\\n@@ -58,6 +59,17 @@ extern void link_error(int);\n       || CKSGN_L(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG)), NEG __builtin_##FUNCARG##l(ARGARG))) \\\n     link_error(__LINE__); \\\n   } while (0)\n+#else\n+#define TESTIT3(FUNC,NEG,FUNCARG,ARGARG,FUNCRES) do { \\\n+  /* SPU single-precision floating point format does not support Inf or Nan.  */ \\\n+  if (!__builtin_##FUNCRES(__builtin_##FUNC(NEG __builtin_##FUNCARG(ARGARG))) \\\n+      || CKSGN(__builtin_##FUNC(NEG __builtin_##FUNCARG(ARGARG)), NEG __builtin_##FUNCARG(ARGARG))) \\\n+    link_error(__LINE__); \\\n+  if (!__builtin_##FUNCRES##l(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG))) \\\n+      || CKSGN_L(__builtin_##FUNC##l(NEG __builtin_##FUNCARG##l(ARGARG)), NEG __builtin_##FUNCARG##l(ARGARG))) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+#endif\n \n void __attribute__ ((__noinline__))\n foo(void)"}, {"sha": "5c402873ab786e4694dbad3c9b478428cdfa8655", "filename": "gcc/testsuite/gcc.dg/torture/builtin-math-2.c", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-2.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -59,15 +59,21 @@ extern void fool (long double);\n void bar()\n {\n   /* An argument of NaN is not evaluated at compile-time.  */\n+#ifndef __SPU__\n   foof (__builtin_exp2f (__builtin_nanf(\"\")));\n+#endif\n   foo (__builtin_exp2 (__builtin_nan(\"\")));\n   fool (__builtin_exp2l (__builtin_nanl(\"\")));\n \n   /* An argument of Inf/-Inf is not evaluated at compile-time.  */\n+#ifndef __SPU__\n   foof (__builtin_exp2f (__builtin_inff()));\n+#endif\n   foo (__builtin_exp2 (__builtin_inf()));\n   fool (__builtin_exp2l (__builtin_infl()));\n+#ifndef __SPU__\n   foof (__builtin_exp2f (-__builtin_inff()));\n+#endif\n   foo (__builtin_exp2 (-__builtin_inf()));\n   fool (__builtin_exp2l (-__builtin_infl()));\n \n@@ -130,24 +136,36 @@ void bar()\n   TESTIT (tgamma, -3.0);\n \n   /* An argument of NaN is not evaluated at compile-time.  */\n+#ifndef __SPU__\n   foof (__builtin_powf (__builtin_nanf(\"\"), 2.5F));\n+#endif\n   foo (__builtin_pow (__builtin_nan(\"\"), 2.5));\n   fool (__builtin_powl (__builtin_nanl(\"\"), 2.5L));\n+#ifndef __SPU__\n   foof (__builtin_powf (2.5F, __builtin_nanf(\"\")));\n+#endif\n   foo (__builtin_pow (2.5, __builtin_nan(\"\")));\n   fool (__builtin_powl (2.5L, __builtin_nanl(\"\")));\n \n   /* An argument of Inf/-Inf is not evaluated at compile-time.  */\n+#ifndef __SPU__\n   foof (__builtin_powf (__builtin_inff(), 2.5F));\n+#endif\n   foo (__builtin_pow (__builtin_inf(), 2.5));\n   fool (__builtin_powl (__builtin_infl(), 2.5L));\n+#ifndef __SPU__\n   foof (__builtin_powf (-__builtin_inff(), 2.5F));\n+#endif\n   foo (__builtin_pow (-__builtin_inf(), 2.5));\n   fool (__builtin_powl (-__builtin_infl(), 2.5L));\n+#ifndef __SPU__\n   foof (__builtin_powf (2.5F, __builtin_inff()));\n+#endif\n   foo (__builtin_pow (2.5, __builtin_inf()));\n   fool (__builtin_powl (2.5L, __builtin_infl()));\n+#ifndef __SPU__\n   foof (__builtin_powf (2.5F, -__builtin_inff()));\n+#endif\n   foo (__builtin_pow (2.5, -__builtin_inf()));\n   fool (__builtin_powl (2.5L, -__builtin_infl()));\n \n@@ -235,17 +253,25 @@ void bar()\n   TESTIT (ilogb, 0.0);\n   TESTIT (ilogb, -0.0);\n \n+#ifndef __SPU__\n   foof (__builtin_ilogbf (__builtin_inff()));\n+#endif\n   foo (__builtin_ilogb (__builtin_inf()));\n   fool (__builtin_ilogbl (__builtin_infl()));\n+#ifndef __SPU__\n   foof (__builtin_ilogbf (-__builtin_inff()));\n+#endif\n   foo (__builtin_ilogb (-__builtin_inf()));\n   fool (__builtin_ilogbl (-__builtin_infl()));\n \n+#ifndef __SPU__\n   foof (__builtin_ilogbf (__builtin_nanf(\"\")));\n+#endif\n   foo (__builtin_ilogb (__builtin_nan(\"\")));\n   fool (__builtin_ilogbl (__builtin_nanl(\"\")));\n+#ifndef __SPU__\n   foof (__builtin_ilogbf (-__builtin_nanf(\"\")));\n+#endif\n   foo (__builtin_ilogb (-__builtin_nan(\"\")));\n   fool (__builtin_ilogbl (-__builtin_nanl(\"\")));\n \n@@ -291,7 +317,8 @@ void bar()\n }\n \n /* { dg-final { scan-tree-dump-times \"exp2 \" 9 \"original\" } } */\n-/* { dg-final { scan-tree-dump-times \"exp2f\" 9 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"exp2f\" 9 \"original\" { target { ! { spu*-*-* } } } } } */\n+/* { dg-final { scan-tree-dump-times \"exp2f\" 6 \"original\" { target { spu*-*-* } } } } */\n /* { dg-final { scan-tree-dump-times \"exp2l\" 9 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"asin \" 2 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"asinf\" 2 \"original\" } } */\n@@ -321,7 +348,8 @@ void bar()\n /* { dg-final { scan-tree-dump-times \"tgammaf\" 5 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"tgammal\" 5 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"pow \" 13 \"original\" } } */\n-/* { dg-final { scan-tree-dump-times \"powf\" 13 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"powf\" 13 \"original\" { target { ! { spu*-*-* } } } } } */\n+/* { dg-final { scan-tree-dump-times \"powf\" 7 \"original\" { target { spu*-*-* } } } } */\n /* { dg-final { scan-tree-dump-times \"powl\" 13 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"fma \" 3 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"fmaf\" 3 \"original\" } } */\n@@ -342,7 +370,8 @@ void bar()\n /* { dg-final { scan-tree-dump-times \"_logbf\" 2 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"_logbl\" 2 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"ilogb \" 6 \"original\" } } */\n-/* { dg-final { scan-tree-dump-times \"ilogbf\" 6 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"ilogbf\" 6 \"original\" { target { ! { spu*-*-* } } } } } */\n+/* { dg-final { scan-tree-dump-times \"ilogbf\" 2 \"original\" { target { spu*-*-* } } } } */\n /* { dg-final { scan-tree-dump-times \"ilogbl\" 6 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"y0 \" 3 \"original\" } } */\n /* { dg-final { scan-tree-dump-times \"y0f\" 3 \"original\" } } */"}, {"sha": "05e16ac2cc473bd98395653a69be8575a051b1af", "filename": "gcc/testsuite/gcc.dg/torture/builtin-modf-1.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-modf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-modf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-modf-1.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -62,6 +62,7 @@ extern void link_error(int);\n /* Test that modf(NEG FUNCARG(ARGARG, &iptr)) == FRACRES &&\n    FUNCRES(iptr) is true.  Check the sign of both as well.  This is\n    for checking an argument of Inf.  */\n+#ifndef __SPU__\n #define TESTIT_MODF2(NEG,FUNCARG,ARGARG,FUNCRES,FRACRES) do { \\\n   float iptrf = 0.5; double iptr = 0.5; long double iptrl = 0.5; \\\n   if (__builtin_modff(NEG __builtin_##FUNCARG##f(ARGARG),&iptrf) != FRACRES##f \\\n@@ -80,10 +81,27 @@ extern void link_error(int);\n       || CKSGN_IPTR_L(iptrl,FRACRES##l)) \\\n     link_error(__LINE__); \\\n   } while (0)\n+#else\n+#define TESTIT_MODF2(NEG,FUNCARG,ARGARG,FUNCRES,FRACRES) do { \\\n+  /* SPU single-precision floating point format does not support Inf or Nan.  */ \\\n+  double iptr = 0.5; long double iptrl = 0.5; \\\n+  if (__builtin_modf(NEG __builtin_##FUNCARG(ARGARG),&iptr) != FRACRES \\\n+      || CKSGN(__builtin_modf(NEG __builtin_##FUNCARG(ARGARG),&iptr), FRACRES) \\\n+      || CKIPTR(!__builtin_##FUNCRES(iptr),0) \\\n+      || CKSGN_IPTR(iptr,FRACRES)) \\\n+    link_error(__LINE__); \\\n+  if (__builtin_modfl(NEG __builtin_##FUNCARG##l(ARGARG),&iptrl) != FRACRES##l \\\n+      || CKSGN_L(__builtin_modfl(NEG __builtin_##FUNCARG##l(ARGARG),&iptrl), FRACRES##l) \\\n+      || CKIPTR(!__builtin_##FUNCRES##l(iptrl),0) \\\n+      || CKSGN_IPTR_L(iptrl,FRACRES##l)) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+#endif\n \n /* Test that FUNCRES(modf(NEG FUNCARG(ARGARG, &iptr))) is true &&\n    FUNCRES(iptr) is true.  Check the sign of both as well.  This is\n    for checking an argument of NaN.  */\n+#ifndef __SPU__\n #define TESTIT_MODF3(NEG,FUNCARG,ARGARG,FUNCRES) do { \\\n   float iptrf = 0.5; double iptr = 0.5; long double iptrl = 0.5; \\\n   if (CKRES(!__builtin_##FUNCRES##f(__builtin_modff(NEG __builtin_##FUNCARG##f(ARGARG),&iptrf))) \\\n@@ -102,6 +120,22 @@ extern void link_error(int);\n       || CKSGN_IPTR_L(iptrl,NEG 1)) \\\n     link_error(__LINE__); \\\n   } while (0)\n+#else\n+#define TESTIT_MODF3(NEG,FUNCARG,ARGARG,FUNCRES) do { \\\n+  /* SPU single-precision floating point format does not support Inf or Nan.  */ \\\n+  double iptr = 0.5; long double iptrl = 0.5; \\\n+  if (CKRES(!__builtin_##FUNCRES(__builtin_modf(NEG __builtin_##FUNCARG(ARGARG),&iptr))) \\\n+      || CKSGN(__builtin_modf(NEG __builtin_##FUNCARG(ARGARG),&iptr), NEG 1) \\\n+      || CKIPTR(!__builtin_##FUNCRES(iptr),0) \\\n+      || CKSGN_IPTR(iptr,NEG 1)) \\\n+    link_error(__LINE__); \\\n+  if (CKRES(!__builtin_##FUNCRES##l(__builtin_modfl(NEG __builtin_##FUNCARG##l(ARGARG),&iptrl))) \\\n+      || CKSGN_L(__builtin_modfl(NEG __builtin_##FUNCARG##l(ARGARG),&iptrl), NEG 1) \\\n+      || CKIPTR(!__builtin_##FUNCRES##l(iptrl),0) \\\n+      || CKSGN_IPTR_L(iptrl,NEG 1)) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+#endif\n \n void __attribute__ ((__noinline__))\n foo(void)"}, {"sha": "ca5a4f8b6d7106b1eebf4e3614b02f9bc23e7a0d", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-float.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -2,6 +2,7 @@\n /* Origin: Joseph Myers <joseph@codesourcery.com> */\n /* { dg-do run } */\n /* { dg-options \"\" } */\n+/* { dg-skip-if \"Round to zero\" { spu-*-* } } */\n \n #include <float.h>\n #include \"fp-int-convert.h\""}, {"sha": "faeae6050d102bb000a7eb1280cc59fbe2745563", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-timode.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -9,7 +9,10 @@\n int\n main (void)\n {\n+#ifndef __SPU__\n+  /* Single-precision floating point on SPU always rounds to zero.  */\n   TEST_I_F(TItype, UTItype, float, FLT_MANT_DIG);\n+#endif\n   TEST_I_F(TItype, UTItype, double, DBL_MANT_DIG);\n   /* Disable the long double tests when using IBM Extended Doubles.\n      They have variable precision, but constants calculated by gcc's"}, {"sha": "9a8e9d0048c72117ecefb08bcc67a58cbac723d5", "filename": "gcc/testsuite/gcc.dg/torture/type-generic-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ftype-generic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f9ddf6acff067428b2312626c50caf9956978b1/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ftype-generic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ftype-generic-1.c?ref=8f9ddf6acff067428b2312626c50caf9956978b1", "patch": "@@ -3,6 +3,7 @@\n \n /* { dg-do run } */\n /* { dg-options \"-mieee\" { target sh*-*-* } } */\n+/* { dg-skip-if \"No Inf/NaN support\" { spu-*-* } } */\n \n #include \"../tg-tests.h\"\n "}]}