{"sha": "6232d02b4fce4c67d39815aa8fb956e4b10a4e1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIzMmQwMmI0ZmNlNGM2N2QzOTgxNWFhOGZiOTU2ZTRiMTBhNGUxYg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2020-05-26T14:02:21Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2020-05-26T14:02:21Z"}, "message": "do not skip validation of switch after %<opt\n\nAfter the patch that revamped dump and aux outputs, GCC compilation\ndrivers built without Ada would reject -d* options.  Such options\nwould only be validated because of the %{d*} in Ada lang specs, though\nother languages had it as well.  Other languages had %< specs that had\nto be there before %{d*} %:dumps(), while Ada was missing them.\nAdding them to Ada brought the same problem to compilers that had Ada\nenabled.\n\nThe reason validation failed was that they mishandled %< specs,\nadvancing past the beginning of the next spec, causing it not to be\nhandled.  Since %{d*} appeared after an odd %<, it was thus ignored.\nThe logic of validate_switches originally skipped the closing brace\nthat matched the opening brace, but this shouldn't happen for %<.\nFixed by letting validate_switches know whether it is handling a\nbraced group or a single atom, and behaving accordingly.\n\n\ngcc/ChangeLog:\n\n\t* gcc.c (validate_switches): Add braced parameter.  Adjust all\n\tcallers.  Expected and skip trailing brace only if braced.\n\tReturn after handling one atom otherwise.\n\t(DUMPS_OPTIONS): New.\n\t(cpp_debug_options): Define in terms of it.\n\ngcc/ada/ChangeLog:\n\n\t* gcc-interface/lang-specs.h (ADA_DUMPS_OPTIONS): Define in\n\tterms of DUMPS_OPTIONS.  Replace occurrences of %{d*} %:dumps\n\twith it.", "tree": {"sha": "10272b2b66191d25d85ed047c780df380714cacc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10272b2b66191d25d85ed047c780df380714cacc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6232d02b4fce4c67d39815aa8fb956e4b10a4e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6232d02b4fce4c67d39815aa8fb956e4b10a4e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6232d02b4fce4c67d39815aa8fb956e4b10a4e1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6232d02b4fce4c67d39815aa8fb956e4b10a4e1b/comments", "author": null, "committer": null, "parents": [{"sha": "1d72079ba3a370d6751953312f0de76d1a1c555d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d72079ba3a370d6751953312f0de76d1a1c555d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d72079ba3a370d6751953312f0de76d1a1c555d"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "f0ef3b92d0f6c3015ab435719ebbbf3f2a31c2ba", "filename": "gcc/ada/gcc-interface/lang-specs.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6232d02b4fce4c67d39815aa8fb956e4b10a4e1b/gcc%2Fada%2Fgcc-interface%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6232d02b4fce4c67d39815aa8fb956e4b10a4e1b/gcc%2Fada%2Fgcc-interface%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Flang-specs.h?ref=6232d02b4fce4c67d39815aa8fb956e4b10a4e1b", "patch": "@@ -23,6 +23,10 @@\n  *                                                                          *\n  ****************************************************************************/\n \n+/* Pass -d* flags to the actual compiler, but mapping non-Ada\n+   extensions to .ada in dump file names.  */\n+#define ADA_DUMPS_OPTIONS DUMPS_OPTIONS (\"%{!.adb:%{!.ads:.ada}}\")\n+\n /* This is the contribution to the `default_compilers' array in gcc.c for\n    GNAT.  */\n \n@@ -35,7 +39,7 @@\n  gnat1 %{I*} %{k8:-gnatk8} %{Wall:-gnatwa} %{w:-gnatws} %{!Q:-quiet}\\\n     %{nostdinc*} %{nostdlib*}\\\n     %{fcompare-debug-second:-gnatd_A} \\\n-    %{O*} %{W*} %{w} %{p} %{pg:-p} %{d*} %:dumps(%{!.adb:%{!.ads:.ada}}) \\\n+    %{O*} %{W*} %{w} %{p} %{pg:-p} \" ADA_DUMPS_OPTIONS \" \\\n     %{coverage:-fprofile-arcs -ftest-coverage} \"\n #if defined(TARGET_VXWORKS_RTP)\n    \"%{fRTS=rtp|fRTS=rtp-smp|fRTS=ravenscar-cert-rtp:-mrtp} \"\n@@ -51,7 +55,7 @@\n  %{!c:%e-c required for gnat2why}\\\n  gnat1why %{I*} %{k8:-gnatk8} %{!Q:-quiet}\\\n     %{nostdinc*} %{nostdlib*}\\\n-    %{a} %{d*} %:dumps(%{!.adb:%{!.ads:.ada}}) \\\n+    %{a} \" ADA_DUMPS_OPTIONS \" \\\n     %{gnatea:-gnatez} %{g*&m*&f*} \\\n     %1 %{o*:%w%*-gnatO} \\\n     %i \\\n@@ -62,7 +66,7 @@\n  %{!c:%e-c required for gnat2scil}\\\n  gnat1scil %{I*} %{k8:-gnatk8} %{!Q:-quiet}\\\n     %{nostdinc*} %{nostdlib*}\\\n-    %{a} %{d*} %:dumps(%{!.adb:%{!.ads:.ada}}) \\\n+    %{a} \" ADA_DUMPS_OPTIONS \" \\\n     %{gnatea:-gnatez} %{g*&m*&f*} \\\n     %1 %{o*:%w%*-gnatO} \\\n     %i \\"}, {"sha": "e2362175f40110c5eb2280dc8e2df9ae98ad1601", "filename": "gcc/gcc.c", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6232d02b4fce4c67d39815aa8fb956e4b10a4e1b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6232d02b4fce4c67d39815aa8fb956e4b10a4e1b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=6232d02b4fce4c67d39815aa8fb956e4b10a4e1b", "patch": "@@ -388,7 +388,7 @@ static void do_option_spec (const char *, const char *);\n static void do_self_spec (const char *);\n static const char *find_file (const char *);\n static int is_directory (const char *, bool);\n-static const char *validate_switches (const char *, bool);\n+static const char *validate_switches (const char *, bool, bool);\n static void validate_all_switches (void);\n static inline void validate_switches_from_spec (const char *, bool);\n static void give_switch (int, int);\n@@ -1176,9 +1176,16 @@ static const char *cpp_options =\n  %{!fno-working-directory:-fworking-directory}}} %{O*}\\\n  %{undef} %{save-temps*:-fpch-preprocess}\";\n \n+/* Pass -d* flags, possibly modifying -dumpdir, -dumpbase et al.\n+\n+   Make it easy for a language to override the argument for the\n+   %:dumps specs function call.  */\n+#define DUMPS_OPTIONS(EXTS) \\\n+  \"%<dumpdir %<dumpbase %<dumpbase-ext %{d*} %:dumps(\" EXTS \")\"\n+\n /* This contains cpp options which are not passed when the preprocessor\n    output will be used by another program.  */\n-static const char *cpp_debug_options = \"%<dumpdir %<dumpbase %<dumpbase-ext %{d*} %:dumps()\";\n+static const char *cpp_debug_options = DUMPS_OPTIONS (\"\");\n \n /* NB: This is shared amongst all front-ends, except for Ada.  */\n static const char *cc1_options =\n@@ -9061,7 +9068,7 @@ validate_switches_from_spec (const char *spec, bool user)\n \t    || (*p == 'W' && *++p == '{')\n \t    || (*p == '@' && *++p == '{')))\n       /* We have a switch spec.  */\n-      p = validate_switches (p + 1, user);\n+      p = validate_switches (p + 1, user, *p == '{');\n }\n \n static void\n@@ -9080,11 +9087,15 @@ validate_all_switches (void)\n   validate_switches_from_spec (link_command_spec, false);\n }\n \n-/* Look at the switch-name that comes after START\n-   and mark as valid all supplied switches that match it.  */\n+/* Look at the switch-name that comes after START and mark as valid\n+   all supplied switches that match it.  If BRACED, handle other\n+   switches after '|' and '&', and specs after ':' until ';' or '}',\n+   going back for more switches after ';'.  Without BRACED, handle\n+   only one atom.  Return a pointer to whatever follows the handled\n+   items, after the closing brace if BRACED.  */\n \n static const char *\n-validate_switches (const char *start, bool user_spec)\n+validate_switches (const char *start, bool user_spec, bool braced)\n {\n   const char *p = start;\n   const char *atom;\n@@ -9126,6 +9137,9 @@ validate_switches (const char *start, bool user_spec)\n \t      switches[i].validated = true;\n     }\n \n+  if (!braced)\n+    return p;\n+\n   if (*p) p++;\n   if (*p && (p[-1] == '|' || p[-1] == '&'))\n     goto next_member;\n@@ -9138,11 +9152,11 @@ validate_switches (const char *start, bool user_spec)\n \t    {\n \t      p++;\n \t      if (*p == '{' || *p == '<')\n-\t\tp = validate_switches (p+1, user_spec);\n+\t\tp = validate_switches (p+1, user_spec, *p == '{');\n \t      else if (p[0] == 'W' && p[1] == '{')\n-\t\tp = validate_switches (p+2, user_spec);\n+\t\tp = validate_switches (p+2, user_spec, true);\n \t      else if (p[0] == '@' && p[1] == '{')\n-\t\tp = validate_switches (p+2, user_spec);\n+\t\tp = validate_switches (p+2, user_spec, true);\n \t    }\n \t  else\n \t    p++;"}]}