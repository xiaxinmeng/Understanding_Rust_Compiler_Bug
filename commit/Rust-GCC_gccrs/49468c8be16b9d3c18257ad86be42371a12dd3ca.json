{"sha": "49468c8be16b9d3c18257ad86be42371a12dd3ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk0NjhjOGJlMTZiOWQzYzE4MjU3YWQ4NmJlNDIzNzFhMTJkZDNjYQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-05-09T09:25:34Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-05-09T09:25:34Z"}, "message": "c-parse.in (if_stmt_locus): New object.\n\n\t* c-parse.in (if_stmt_locus): New object.\n\t(if_prefix rule): Use it.  Don't use warning_with_file_and_line.\n\t(select_or_iter_stmt rule): Likewise.\n\t(if_stmt_file): Remove.\n\t(if_stmt_line): Likewise.\n\t* jump.c: include \"diagnostic.h\"\n\t(never_reached_warning): Don't use warning_with_file_and_line.\n\t* Makefile.in (jump.o): Add dependce on diagnostic.h\n\nFrom-SVN: r66627", "tree": {"sha": "235b8b6256cd629d05ae13903460b2c1e44f7f37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/235b8b6256cd629d05ae13903460b2c1e44f7f37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49468c8be16b9d3c18257ad86be42371a12dd3ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49468c8be16b9d3c18257ad86be42371a12dd3ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49468c8be16b9d3c18257ad86be42371a12dd3ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49468c8be16b9d3c18257ad86be42371a12dd3ca/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c478ce37c601f4a6a5f39aebe32aaa236ffebf6"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "4478a942c70a9b648d69896928d2d9781620a57a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49468c8be16b9d3c18257ad86be42371a12dd3ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49468c8be16b9d3c18257ad86be42371a12dd3ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49468c8be16b9d3c18257ad86be42371a12dd3ca", "patch": "@@ -1,3 +1,14 @@\n+2003-05-09  Gabriel Dos Reis <gdr@integrable-solutions.net>\n+\n+\t* c-parse.in (if_stmt_locus): New object.\n+\t(if_prefix rule): Use it.  Don't use warning_with_file_and_line.\n+\t(select_or_iter_stmt rule): Likewise.\n+\t(if_stmt_file): Remove.\n+\t(if_stmt_line): Likewise.\n+\t* jump.c: include \"diagnostic.h\"\n+\t(never_reached_warning): Don't use warning_with_file_and_line. \n+\t* Makefile.in (jump.o): Add dependce on diagnostic.h\n+\n 2003-05-09  Alan Modra  <amodra@bigpond.net.au>\n \n \t* expr.c (move_block_from_reg): Remove \"size\" parm.  Localize vars."}, {"sha": "f4c9a92e3e292c330008d03db308eac7d2286915", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49468c8be16b9d3c18257ad86be42371a12dd3ca/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49468c8be16b9d3c18257ad86be42371a12dd3ca/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=49468c8be16b9d3c18257ad86be42371a12dd3ca", "patch": "@@ -1578,7 +1578,8 @@ integrate.o : integrate.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $\n    $(PARAMS_H) $(TM_P_H) $(TARGET_H) langhooks.h gt-integrate.h\n jump.o : jump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n    hard-reg-set.h $(REGS_H) insn-config.h $(RECOG_H) $(EXPR_H) real.h except.h function.h \\\n-   toplev.h $(INSN_ATTR_H) $(TM_P_H) reload.h $(PREDICT_H) $(TIMEVAR_H)\n+   toplev.h $(INSN_ATTR_H) $(TM_P_H) reload.h $(PREDICT_H) $(TIMEVAR_H) \\\n+   diagnostic.h\n \n simplify-rtx.o : simplify-rtx.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\"}, {"sha": "f9d3656662daa9e0ca10cb1c77bdb24841c21cc0", "filename": "gcc/c-parse.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49468c8be16b9d3c18257ad86be42371a12dd3ca/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49468c8be16b9d3c18257ad86be42371a12dd3ca/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=49468c8be16b9d3c18257ad86be42371a12dd3ca", "patch": "@@ -261,10 +261,10 @@ end ifobjc\n static int stmt_count;\n static int compstmt_count;\n \n-/* Input file and line number of the end of the body of last simple_if;\n+/* Input location of the end of the body of last simple_if;\n    used by the stmt-rule immediately after simple_if returns.  */\n-static const char *if_stmt_file;\n-static int if_stmt_line;\n+static location_t if_stmt_locus;\n+\n \n /* List of types and structure classes of the current declaration.  */\n static GTY(()) tree current_declspecs;\n@@ -2215,8 +2215,8 @@ if_prefix:\n \t\t{ c_expand_start_cond (c_common_truthvalue_conversion ($4),\n \t\t\t\t       compstmt_count,$<ttype>2);\n \t\t  $<itype>$ = stmt_count;\n-\t\t  if_stmt_file = $<filename>-2;\n-\t\t  if_stmt_line = $<lineno>-1; }\n+\t\t  if_stmt_locus.file = $<filename>-2;\n+\t\t  if_stmt_locus.line = $<lineno>-1; }\n         ;\n \n /* This is a subroutine of stmt.\n@@ -2305,8 +2305,8 @@ select_or_iter_stmt:\n \t\t     else statement.  Increment stmt_count so we don't\n \t\t     give a second error if this is a nested `if'.  */\n \t\t  if (extra_warnings && stmt_count++ == $<itype>1)\n-\t\t    warning_with_file_and_line (if_stmt_file, if_stmt_line,\n-\t\t\t\t\t\t\"empty body in an if-statement\"); }\n+\t\t    warning (\"%Hempty body in an if-statement\",\n+                             &if_stmt_locus); }\n /* Make sure c_expand_end_cond is run once\n    for each call to c_expand_start_cond.\n    Otherwise a crash is likely.  */"}, {"sha": "4cb9bcb1f6f8b7653ea07ea62d0e38edea3b7150", "filename": "gcc/jump.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49468c8be16b9d3c18257ad86be42371a12dd3ca/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49468c8be16b9d3c18257ad86be42371a12dd3ca/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=49468c8be16b9d3c18257ad86be42371a12dd3ca", "patch": "@@ -54,6 +54,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"reload.h\"\n #include \"predict.h\"\n #include \"timevar.h\"\n+#include \"diagnostic.h\"\n \n /* Optimize jump y; x: ... y: jumpif... x?\n    Don't know if it is worth bothering with.  */\n@@ -1951,9 +1952,12 @@ never_reached_warning (avoided_insn, finish)\n \treached_end = 1;\n     }\n   if (two_avoided_lines && contains_insn)\n-    warning_with_file_and_line (NOTE_SOURCE_FILE (a_line_note),\n-\t\t\t\tNOTE_LINE_NUMBER (a_line_note),\n-\t\t\t\t\"will never be executed\");\n+    {\n+      location_t locus;\n+      locus.file = NOTE_SOURCE_FILE (a_line_note);\n+      locus.line = NOTE_LINE_NUMBER (a_line_note);\n+      warning (\"%Hwill never be executed\", &locus);\n+    }\n }\n \f\n /* Throughout LOC, redirect OLABEL to NLABEL.  Treat null OLABEL or"}]}