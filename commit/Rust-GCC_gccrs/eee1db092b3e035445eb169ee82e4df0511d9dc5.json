{"sha": "eee1db092b3e035445eb169ee82e4df0511d9dc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVlMWRiMDkyYjNlMDM1NDQ1ZWIxNjllZTgyZTRkZjA1MTFkOWRjNQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-21T23:30:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-21T23:30:05Z"}, "message": "(CPP_SPEC): Accept c++ style comments.\n\nFrom-SVN: r9003", "tree": {"sha": "0f9bb49107aa3e04c8dadad8f64e6935c0069559", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f9bb49107aa3e04c8dadad8f64e6935c0069559"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eee1db092b3e035445eb169ee82e4df0511d9dc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eee1db092b3e035445eb169ee82e4df0511d9dc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eee1db092b3e035445eb169ee82e4df0511d9dc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eee1db092b3e035445eb169ee82e4df0511d9dc5/comments", "author": null, "committer": null, "parents": [{"sha": "976ac3efa85fb1642f1e3353a88c9f94bd1e8b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976ac3efa85fb1642f1e3353a88c9f94bd1e8b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/976ac3efa85fb1642f1e3353a88c9f94bd1e8b74"}], "stats": {"total": 75, "additions": 57, "deletions": 18}, "files": [{"sha": "c1209ace5c5ad104f9c3a848f6fdfad5c452f8a9", "filename": "gcc/config/winnt/win-nt.h", "status": "modified", "additions": 57, "deletions": 18, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eee1db092b3e035445eb169ee82e4df0511d9dc5/gcc%2Fconfig%2Fwinnt%2Fwin-nt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eee1db092b3e035445eb169ee82e4df0511d9dc5/gcc%2Fconfig%2Fwinnt%2Fwin-nt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fwin-nt.h?ref=eee1db092b3e035445eb169ee82e4df0511d9dc5", "patch": "@@ -1,6 +1,6 @@\n-/* winnt.h  --  operating system specific defines to be used when\n-   targeting GCC for Windows NT 3.x.\n-   Copyright (C) 1994 Free Software Foundation, Inc.\n+/* Operating system specific defines to be used when targeting GCC for\n+   Windows NT 3.x.\n+   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n    Contributed by Douglas B. Rupp (drupp@cs.washington.edu).\n \n This file is part of GNU CC.\n@@ -19,27 +19,54 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n \n-   To use this file, put in your tm.h file something like:\n+/* The global __fltused is necessary to cause the printf/scanf routines\n+   for outputting/inputting floating point numbers to be loaded.  Since this\n+   is kind of hard to detect, we just do it all the time. */\n \n-\t#include \"?????.h\"\n-\t#include \"svr4.h\"\n-\n-   followed by any really system-specific defines (or overrides of\n-   defines) which you find that you need.  For example, CPP_PREDEFINES\n-   is defined here with only the defined -Dunix and -DSVR4.  You should\n-   probably override that in your target-specific ?????svr4.h file\n-   with a set of defines that includes these, but also contains an\n-   appropriate define for the type of hardware that you are targeting. */\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \"libc.lib kernel32.lib\"\n+#ifdef ASM_FILE_START\n+#undef ASM_FILE_START\n+#endif\n+#define ASM_FILE_START(FILE) \\\n+  do {\tfprintf (FILE, \"\\t.file\\t\");\t\t\t\t\\\n+\toutput_quoted_string (FILE, dump_base_name);\t\t\\\n+\tfprintf (FILE, \"\\n\");\t\t\t\t\t\\\n+        fprintf (FILE, \".global\\t__fltused\\n\");\t\t\t\\\n+  } while (0)\n+\n+\n+/* Value is the previously stored DECL_ASSEMBLER_NAME with a suffix \n+   consisting of an atsign (@) followed by string of digits that represents\n+   the number of bytes of arguments passed to the function, if it has the \n+   attribute STDCALL. */\n+\n+#define MODIFY_ASSEMBLER_NAME(fndecl) \\\n+      TREE_CODE (fndecl) == FUNCTION_DECL \\\n+\t? \\\n+\t  chain_member_value (get_identifier (\"stdcall\"), \\\n+                              DECL_MACHINE_ATTRIBUTES (fndecl)) \\\n+\t    ? \\\n+\t      (tree) gen_stdcall_suffix (fndecl) \\\n+\t    : (tree) DECL_ASSEMBLER_NAME (fndecl) \\\n+\t: (tree) DECL_ASSEMBLER_NAME (fndecl)\n+\n+/* Value is 1 if the declaration has either of the attributes: CDECL or\n+   STDCALL and 0 otherwise */\n+\n+#define VALID_MACHINE_DECL_ATTRIBUTE(decl,attr,name) \\\n+  ((TREE_CODE(decl) == FUNCTION_DECL) \\\n+   || (TREE_CODE(decl) == FIELD_DECL) \\\n+   || (TREE_CODE(decl) == TYPE_DECL)) \\\n+  && ((get_identifier(\"stdcall\") == name) \\\n+   || (get_identifier(\"cdecl\") == name))\n \n #undef STARTFILE_SPEC\n #define STARTFILE_SPEC \"\"\n \n #undef LINK_SPEC\n-#define LINK_SPEC \"-align:0x1000 -subsystem:console -entry:mainCRTStartup \\\n-  -stack:1000000,1000000\"\n+#define LINK_SPEC \"-align:0x1000 -stack:1000000,1000000\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"-lang-c-c++-comments\"\n \n #undef STANDARD_EXEC_PREFIX\n #define STANDARD_EXEC_PREFIX \"\"\n@@ -64,3 +91,15 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n     { 0, 0, 0 }\t\t\t\t\t\t\\\n   }\n \n+/* if the switch \"-mwindows\" is passed to ld, then specify to the Microsoft\n+   linker the proper switches and libraries to build a graphical program */\n+\n+#define LIB_SPEC \"%{mwindows:-subsystem:windows -entry:WinMainCRTStartup \\\n+  USER32.LIB GDI32.LIB COMDLG32.LIB WINSPOOL.LIB} \\\n+ %{!mwindows:-subsystem:console -entry:mainCRTStartup} \\\n+ %{mcrtmt:LIBCMT.LIB KERNEL32.LIB ADVAPI32.LIB} \\\n+ %{!mcrtmt:LIBC.LIB KERNEL32.LIB ADVAPI32.LIB} \\\n+ %{g:-debugtype:coff -debug:full} \\\n+ %{v}\"\n+\n+#define STDC_VALUE 0"}]}