{"sha": "2eddac76ab90866dbab1b2016450295ea3ea22f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVkZGFjNzZhYjkwODY2ZGJhYjFiMjAxNjQ1MDI5NWVhM2VhMjJmNw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-08-23T09:19:32Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-08-23T09:19:32Z"}, "message": "Don't create superfluous parm in expand_omp_taskreg\n\n2015-08-23  Tom de Vries  <tom@codesourcery.com>\n\n\t* omp-low.c (expand_omp_taskreg): If in ssa, set rhs of parcopy stmt to\n\tparm_decl, rather than generating a dummy default def in cfun.\n\t* tree-cfg.c (replace_ssa_name): Assume no default defs.  Make sure\n\tssa_name from cfun and child_fn do not share a stmt as def stmt.\n\t(move_stmt_op): Handle PARM_DECl.\n\t(gather_ssa_name_hash_map_from): New function.\n\t(move_sese_region_to_fn): Add default defs for function params, and add\n\tthem to vars_map.  Release copied ssa names.\n\t* tree-cfg.h (gather_ssa_name_hash_map_from): Declare.\n\nFrom-SVN: r227103", "tree": {"sha": "4eace75bf5f230bec99589e23b38ec7b718697b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4eace75bf5f230bec99589e23b38ec7b718697b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2eddac76ab90866dbab1b2016450295ea3ea22f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eddac76ab90866dbab1b2016450295ea3ea22f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eddac76ab90866dbab1b2016450295ea3ea22f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eddac76ab90866dbab1b2016450295ea3ea22f7/comments", "author": null, "committer": null, "parents": [{"sha": "1b950569994b39283865554b39fa75c32ca879d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b950569994b39283865554b39fa75c32ca879d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b950569994b39283865554b39fa75c32ca879d4"}], "stats": {"total": 78, "additions": 65, "deletions": 13}, "files": [{"sha": "89e1b5a6cbe7a8c4c3414f568956b4379b2b42fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eddac76ab90866dbab1b2016450295ea3ea22f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eddac76ab90866dbab1b2016450295ea3ea22f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2eddac76ab90866dbab1b2016450295ea3ea22f7", "patch": "@@ -1,3 +1,15 @@\n+2015-08-23  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* omp-low.c (expand_omp_taskreg): If in ssa, set rhs of parcopy stmt to\n+\tparm_decl, rather than generating a dummy default def in cfun.\n+\t* tree-cfg.c (replace_ssa_name): Assume no default defs.  Make sure\n+\tssa_name from cfun and child_fn do not share a stmt as def stmt.\n+\t(move_stmt_op): Handle PARM_DECl.\n+\t(gather_ssa_name_hash_map_from): New function.\n+\t(move_sese_region_to_fn): Add default defs for function params, and add\n+\tthem to vars_map.  Release copied ssa names.\n+\t* tree-cfg.h (gather_ssa_name_hash_map_from): Declare.\n+\n 2015-08-23  Tom de Vries  <tom@codesourcery.com>\n \n \t* doc/sourcebuild.texi: Rename vect_no_int_max with"}, {"sha": "d181101d6cf4355ed7512351397158eee117bd9c", "filename": "gcc/omp-low.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eddac76ab90866dbab1b2016450295ea3ea22f7/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eddac76ab90866dbab1b2016450295ea3ea22f7/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=2eddac76ab90866dbab1b2016450295ea3ea22f7", "patch": "@@ -5417,7 +5417,7 @@ expand_omp_taskreg (struct omp_region *region)\n \t  basic_block entry_succ_bb\n \t    = single_succ_p (entry_bb) ? single_succ (entry_bb)\n \t\t\t\t       : FALLTHRU_EDGE (entry_bb)->dest;\n-\t  tree arg, narg;\n+\t  tree arg;\n \t  gimple parcopy_stmt = NULL;\n \n \t  for (gsi = gsi_start_bb (entry_succ_bb); ; gsi_next (&gsi))\n@@ -5462,15 +5462,15 @@ expand_omp_taskreg (struct omp_region *region)\n \t    }\n \t  else\n \t    {\n-\t      /* If we are in ssa form, we must load the value from the default\n-\t\t definition of the argument.  That should not be defined now,\n-\t\t since the argument is not used uninitialized.  */\n-\t      gcc_assert (ssa_default_def (cfun, arg) == NULL);\n-\t      narg = make_ssa_name (arg, gimple_build_nop ());\n-\t      set_ssa_default_def (cfun, arg, narg);\n-\t      /* ?? Is setting the subcode really necessary ??  */\n-\t      gimple_omp_set_subcode (parcopy_stmt, TREE_CODE (narg));\n-\t      gimple_assign_set_rhs1 (parcopy_stmt, narg);\n+\t      tree lhs = gimple_assign_lhs (parcopy_stmt);\n+\t      gcc_assert (SSA_NAME_VAR (lhs) == arg);\n+\t      /* We'd like to set the rhs to the default def in the child_fn,\n+\t\t but it's too early to create ssa names in the child_fn.\n+\t\t Instead, we set the rhs to the parm.  In\n+\t\t move_sese_region_to_fn, we introduce a default def for the\n+\t\t parm, map the parm to it's default def, and once we encounter\n+\t\t this stmt, replace the parm with the default def.  */\n+\t      gimple_assign_set_rhs1 (parcopy_stmt, arg);\n \t      update_stmt (parcopy_stmt);\n \t    }\n \t}"}, {"sha": "5ac73b3266d14dbfaa27a15387f8c66a0a1b824a", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eddac76ab90866dbab1b2016450295ea3ea22f7/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eddac76ab90866dbab1b2016450295ea3ea22f7/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=2eddac76ab90866dbab1b2016450295ea3ea22f7", "patch": "@@ -6420,17 +6420,19 @@ replace_ssa_name (tree name, hash_map<tree, tree> *vars_map,\n       tree decl = SSA_NAME_VAR (name);\n       if (decl)\n \t{\n+\t  gcc_assert (!SSA_NAME_IS_DEFAULT_DEF (name));\n \t  replace_by_duplicate_decl (&decl, vars_map, to_context);\n \t  new_name = make_ssa_name_fn (DECL_STRUCT_FUNCTION (to_context),\n \t\t\t\t       decl, SSA_NAME_DEF_STMT (name));\n-\t  if (SSA_NAME_IS_DEFAULT_DEF (name))\n-\t    set_ssa_default_def (DECL_STRUCT_FUNCTION (to_context),\n-\t\t\t\t decl, new_name);\n \t}\n       else\n \tnew_name = copy_ssa_name_fn (DECL_STRUCT_FUNCTION (to_context),\n \t\t\t\t     name, SSA_NAME_DEF_STMT (name));\n \n+      /* Now that we've used the def stmt to define new_name, make sure it\n+\t doesn't define name anymore.  */\n+      SSA_NAME_DEF_STMT (name) = NULL;\n+\n       vars_map->put (name, new_name);\n     }\n   else\n@@ -6482,6 +6484,9 @@ move_stmt_op (tree *tp, int *walk_subtrees, void *data)\n     {\n       if (TREE_CODE (t) == SSA_NAME)\n \t*tp = replace_ssa_name (t, p->vars_map, p->to_context);\n+      else if (TREE_CODE (t) == PARM_DECL\n+\t       && gimple_in_ssa_p (cfun))\n+\t*tp = *(p->vars_map->get (t));\n       else if (TREE_CODE (t) == LABEL_DECL)\n \t{\n \t  if (p->new_label_map)\n@@ -6992,6 +6997,19 @@ verify_sese (basic_block entry, basic_block exit, vec<basic_block> *bbs_p)\n   BITMAP_FREE (bbs);\n }\n \n+/* If FROM is an SSA_NAME, mark the version in bitmap DATA.  */\n+\n+bool\n+gather_ssa_name_hash_map_from (tree const &from, tree const &, void *data)\n+{\n+  bitmap release_names = (bitmap)data;\n+\n+  if (TREE_CODE (from) != SSA_NAME)\n+    return true;\n+\n+  bitmap_set_bit (release_names, SSA_NAME_VERSION (from));\n+  return true;\n+}\n \n /* Move a single-entry, single-exit region delimited by ENTRY_BB and\n    EXIT_BB to function DEST_CFUN.  The whole region is replaced by a\n@@ -7189,6 +7207,14 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n   d.eh_map = eh_map;\n   d.remap_decls_p = true;\n \n+  if (gimple_in_ssa_p (cfun))\n+    for (tree arg = DECL_ARGUMENTS (d.to_context); arg; arg = DECL_CHAIN (arg))\n+      {\n+\ttree narg = make_ssa_name_fn (dest_cfun, arg, gimple_build_nop ());\n+\tset_ssa_default_def (dest_cfun, arg, narg);\n+\tvars_map.put (arg, narg);\n+      }\n+\n   FOR_EACH_VEC_ELT (bbs, i, bb)\n     {\n       /* No need to update edge counts on the last block.  It has\n@@ -7246,6 +7272,19 @@ move_sese_region_to_fn (struct function *dest_cfun, basic_block entry_bb,\n   if (eh_map)\n     delete eh_map;\n \n+  if (gimple_in_ssa_p (cfun))\n+    {\n+      /* We need to release ssa-names in a defined order, so first find them,\n+\t and then iterate in ascending version order.  */\n+      bitmap release_names = BITMAP_ALLOC (NULL);\n+      vars_map.traverse<void *, gather_ssa_name_hash_map_from> (release_names);\n+      bitmap_iterator bi;\n+      unsigned i;\n+      EXECUTE_IF_SET_IN_BITMAP (release_names, 0, i, bi)\n+\trelease_ssa_name (ssa_name (i));\n+      BITMAP_FREE (release_names);\n+    }\n+\n   /* Rewire the entry and exit blocks.  The successor to the entry\n      block turns into the successor of DEST_FN's ENTRY_BLOCK_PTR in\n      the child function.  Similarly, the predecessor of DEST_FN's"}, {"sha": "4bd6fcf361f6c7f8dc50e27815306886705ddb84", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eddac76ab90866dbab1b2016450295ea3ea22f7/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eddac76ab90866dbab1b2016450295ea3ea22f7/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=2eddac76ab90866dbab1b2016450295ea3ea22f7", "patch": "@@ -75,6 +75,7 @@ extern bool gimple_duplicate_sese_tail (edge, edge, basic_block *, unsigned,\n extern void gather_blocks_in_sese_region (basic_block entry, basic_block exit,\n \t\t\t\t\t  vec<basic_block> *bbs_p);\n extern void verify_sese (basic_block, basic_block, vec<basic_block> *);\n+extern bool gather_ssa_name_hash_map_from (tree const &, tree const &, void *);\n extern basic_block move_sese_region_to_fn (struct function *, basic_block,\n \t\t\t\t           basic_block, tree);\n extern void dump_function_to_file (tree, FILE *, int);"}]}