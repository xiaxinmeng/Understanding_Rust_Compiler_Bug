{"sha": "29f8b8449c6aafc8e6633871fd8783d61d5dcb04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmOGI4NDQ5YzZhYWZjOGU2NjMzODcxZmQ4NzgzZDYxZDVkY2IwNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-25T15:20:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-25T15:20:36Z"}, "message": "tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Fix type-based offset disambiguation...\n\n2011-05-25  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Fix\n\ttype-based offset disambiguation, streamline MEM_REF and\n\tTARGET_MEM_REF handling.\n\nFrom-SVN: r174206", "tree": {"sha": "686d21ac2371d5fa3c2b17b35fa4fe12d40b057c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/686d21ac2371d5fa3c2b17b35fa4fe12d40b057c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f8b8449c6aafc8e6633871fd8783d61d5dcb04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f8b8449c6aafc8e6633871fd8783d61d5dcb04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f8b8449c6aafc8e6633871fd8783d61d5dcb04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f8b8449c6aafc8e6633871fd8783d61d5dcb04/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b60f3408700c850bec15b0735f3955213b384b8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60f3408700c850bec15b0735f3955213b384b8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b60f3408700c850bec15b0735f3955213b384b8a"}], "stats": {"total": 71, "additions": 51, "deletions": 20}, "files": [{"sha": "a22c5d5357528af0aee8768c4538a14676495e78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f8b8449c6aafc8e6633871fd8783d61d5dcb04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f8b8449c6aafc8e6633871fd8783d61d5dcb04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29f8b8449c6aafc8e6633871fd8783d61d5dcb04", "patch": "@@ -1,3 +1,9 @@\n+2011-05-25  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Fix\n+\ttype-based offset disambiguation, streamline MEM_REF and\n+\tTARGET_MEM_REF handling.\n+\n 2011-05-25  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/i386/i386.c (ix86_builtins): Add IX86_BUILTIN_PAUSE."}, {"sha": "3656b396d86afad107d7a34a9565239653f27aa0", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f8b8449c6aafc8e6633871fd8783d61d5dcb04/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f8b8449c6aafc8e6633871fd8783d61d5dcb04/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=29f8b8449c6aafc8e6633871fd8783d61d5dcb04", "patch": "@@ -718,8 +718,9 @@ indirect_ref_may_alias_decl_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n \t\t\t       alias_set_type base2_alias_set, bool tbaa_p)\n {\n   tree ptr1;\n-  tree ptrtype1;\n+  tree ptrtype1, dbase2;\n   HOST_WIDE_INT offset1p = offset1, offset2p = offset2;\n+  HOST_WIDE_INT doffset1, doffset2;\n   double_int moff;\n \n   gcc_checking_assert ((TREE_CODE (base1) == MEM_REF\n@@ -766,20 +767,6 @@ indirect_ref_may_alias_decl_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n   if (base2_alias_set == -1)\n     base2_alias_set = get_alias_set (base2);\n \n-  /* If both references are through the same type, they do not alias\n-     if the accesses do not overlap.  This does extra disambiguation\n-     for mixed/pointer accesses but requires strict aliasing.\n-     For MEM_REFs we require that the component-ref offset we computed\n-     is relative to the start of the type which we ensure by\n-     comparing rvalue and access type and disregarding the constant\n-     pointer offset.  */\n-  if ((TREE_CODE (base1) != TARGET_MEM_REF\n-       || (!TMR_INDEX (base1) && !TMR_INDEX2 (base1)))\n-      && (TREE_CODE (base1) != MEM_REF\n-\t  || same_type_for_tbaa (TREE_TYPE (base1), TREE_TYPE (ptrtype1)) == 1)\n-      && same_type_for_tbaa (TREE_TYPE (ptrtype1), TREE_TYPE (base2)) == 1)\n-    return ranges_overlap_p (offset1, max_size1, offset2, max_size2);\n-\n   /* When we are trying to disambiguate an access with a pointer dereference\n      as base versus one with a decl as base we can use both the size\n      of the decl and its dynamic type for extra disambiguation.\n@@ -809,13 +796,51 @@ indirect_ref_may_alias_decl_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n       && tree_int_cst_lt (DECL_SIZE (base2), TYPE_SIZE (TREE_TYPE (ptrtype1))))\n     return false;\n \n+  if (!ref2)\n+    return true;\n+\n+  /* If the decl is accressed via a MEM_REF, reconstruct the base\n+     we can use for TBAA and an appropriately adjusted offset.  */\n+  dbase2 = ref2;\n+  while (handled_component_p (dbase2))\n+    dbase2 = TREE_OPERAND (dbase2, 0);\n+  doffset1 = offset1;\n+  doffset2 = offset2;\n+  if (TREE_CODE (dbase2) == MEM_REF\n+      || TREE_CODE (dbase2) == TARGET_MEM_REF)\n+    {\n+      double_int moff = mem_ref_offset (dbase2);\n+      moff = double_int_lshift (moff,\n+\t\t\t\tBITS_PER_UNIT == 8\n+\t\t\t\t? 3 : exact_log2 (BITS_PER_UNIT),\n+\t\t\t\tHOST_BITS_PER_DOUBLE_INT, true);\n+      if (double_int_negative_p (moff))\n+\tdoffset1 -= double_int_neg (moff).low;\n+      else\n+\tdoffset2 -= moff.low;\n+    }\n+\n+  /* If either reference is view-converted, give up now.  */\n+  if (same_type_for_tbaa (TREE_TYPE (base1), TREE_TYPE (ptrtype1)) != 1\n+      || same_type_for_tbaa (TREE_TYPE (dbase2),\n+\t\t\t     TREE_TYPE (reference_alias_ptr_type (dbase2))) != 1)\n+    return true;\n+\n+  /* If both references are through the same type, they do not alias\n+     if the accesses do not overlap.  This does extra disambiguation\n+     for mixed/pointer accesses but requires strict aliasing.\n+     For MEM_REFs we require that the component-ref offset we computed\n+     is relative to the start of the type which we ensure by\n+     comparing rvalue and access type and disregarding the constant\n+     pointer offset.  */\n+  if ((TREE_CODE (base1) != TARGET_MEM_REF\n+       || (!TMR_INDEX (base1) && !TMR_INDEX2 (base1)))\n+      && same_type_for_tbaa (TREE_TYPE (base1), TREE_TYPE (dbase2)) == 1)\n+    return ranges_overlap_p (doffset1, max_size1, doffset2, max_size2);\n+\n   /* Do access-path based disambiguation.  */\n   if (ref1 && ref2\n-      && handled_component_p (ref1)\n-      && handled_component_p (ref2)\n-      && TREE_CODE (base1) != TARGET_MEM_REF\n-      && (TREE_CODE (base1) != MEM_REF\n-\t  || same_type_for_tbaa (TREE_TYPE (base1), TREE_TYPE (ptrtype1)) == 1))\n+      && (handled_component_p (ref1) || handled_component_p (ref2)))\n     return aliasing_component_refs_p (ref1,\n \t\t\t\t      ref1_alias_set, base1_alias_set,\n \t\t\t\t      offset1, max_size1,"}]}