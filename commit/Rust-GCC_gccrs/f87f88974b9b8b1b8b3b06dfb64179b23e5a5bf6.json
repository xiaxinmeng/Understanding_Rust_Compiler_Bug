{"sha": "f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg3Zjg4OTc0YjliOGIxYjhiM2IwNmRmYjY0MTc5YjIzZTVhNWJmNg==", "commit": {"author": {"name": "Dominique d'Humieres", "email": "dominiq@gcc.gnu.org", "date": "2018-02-26T09:55:39Z"}, "committer": {"name": "Dominique d'Humieres", "email": "dominiq@gcc.gnu.org", "date": "2018-02-26T09:55:39Z"}, "message": "re PR fortran/32957 (C/Fortran interoperability and -fdefault-integer-8)\n\n2018-02-26  Dominique d'Humieres <dominiq@gcc.gnu.org>\n\n\tPR fortran/32957\n\t* gfortran.dg/c_f_pointer_shape_tests_2.f03: Use explicit KIND c_int.\n\t* gfortran.dg/c_f_pointer_shape_tests_4.f03: Likewise.\n\t* gfortran.dg/c_funloc_tests_3.f03: Likewise.\n\t* gfortran.dg/c_loc_test.f90: Likewise.\n\t* gfortran.dg/c_loc_tests_2.f03: Likewise.\n\t* gfortran.dg/proc_decl_17.f90: Likewise.\n\t* gfortran.dg/proc_ptr_8.f90: Likewise.\n\nFrom-SVN: r257985", "tree": {"sha": "e7bf527a6c1b4cd68517e7381719d68c239e141d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7bf527a6c1b4cd68517e7381719d68c239e141d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/comments", "author": null, "committer": null, "parents": [{"sha": "af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3b4514fcb92b6275ed52e47bb0dd8146f7e304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3b4514fcb92b6275ed52e47bb0dd8146f7e304"}], "stats": {"total": 64, "additions": 38, "deletions": 26}, "files": [{"sha": "3e0299c2f692586da592cf32a794432b433dd121", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6", "patch": "@@ -1,3 +1,14 @@\n+2018-02-26  Dominique d'Humieres <dominiq@gcc.gnu.org>\n+\n+\tPR fortran/32957\n+\t* gfortran.dg/c_f_pointer_shape_tests_2.f03: Use explicit KIND c_int.\n+\t* gfortran.dg/c_f_pointer_shape_tests_4.f03: Likewise.\n+\t* gfortran.dg/c_funloc_tests_3.f03: Likewise.\n+\t* gfortran.dg/c_loc_test.f90: Likewise.\n+\t* gfortran.dg/c_loc_tests_2.f03: Likewise.\n+\t* gfortran.dg/proc_decl_17.f90: Likewise.\n+\t* gfortran.dg/proc_ptr_8.f90: Likewise.\n+\n 2018-02-26  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR target/84521"}, {"sha": "79cf2c1bae3d24908be17bd133f8d0d26aada4fb", "filename": "gcc/testsuite/gfortran.dg/c_f_pointer_shape_tests_2.f03", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_2.f03?ref=f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6", "patch": "@@ -12,7 +12,7 @@ subroutine test_long_long_1d(cPtr, num_elems) bind(c)\n     use, intrinsic :: iso_c_binding\n     type(c_ptr), value :: cPtr\n     integer(c_int), value :: num_elems\n-    integer, dimension(:), pointer :: myArrayPtr\n+    integer(c_int), dimension(:), pointer :: myArrayPtr\n     integer(c_long_long), dimension(1) :: shape\n     integer :: i\n     \n@@ -28,7 +28,7 @@ subroutine test_long_long_2d(cPtr, num_rows, num_cols) bind(c)\n     type(c_ptr), value :: cPtr\n     integer(c_int), value :: num_rows\n     integer(c_int), value :: num_cols\n-    integer, dimension(:,:), pointer :: myArrayPtr\n+    integer(c_int), dimension(:,:), pointer :: myArrayPtr\n     integer(c_long_long), dimension(2) :: shape\n     integer :: i,j\n     \n@@ -46,7 +46,7 @@ subroutine test_long_1d(cPtr, num_elems) bind(c)\n     use, intrinsic :: iso_c_binding\n     type(c_ptr), value :: cPtr\n     integer(c_int), value :: num_elems\n-    integer, dimension(:), pointer :: myArrayPtr\n+    integer(c_int), dimension(:), pointer :: myArrayPtr\n     integer(c_long), dimension(1) :: shape\n     integer :: i\n     \n@@ -61,7 +61,7 @@ subroutine test_int_1d(cPtr, num_elems) bind(c)\n     use, intrinsic :: iso_c_binding\n     type(c_ptr), value :: cPtr\n     integer(c_int), value :: num_elems\n-    integer, dimension(:), pointer :: myArrayPtr\n+    integer(c_int), dimension(:), pointer :: myArrayPtr\n     integer(c_int), dimension(1) :: shape\n     integer :: i\n     \n@@ -76,7 +76,7 @@ subroutine test_short_1d(cPtr, num_elems) bind(c)\n     use, intrinsic :: iso_c_binding\n     type(c_ptr), value :: cPtr\n     integer(c_int), value :: num_elems\n-    integer, dimension(:), pointer :: myArrayPtr\n+    integer(c_int), dimension(:), pointer :: myArrayPtr\n     integer(c_short), dimension(1) :: shape\n     integer :: i\n     \n@@ -91,7 +91,7 @@ subroutine test_mixed(cPtr, num_elems) bind(c)\n     use, intrinsic :: iso_c_binding\n     type(c_ptr), value :: cPtr\n     integer(c_int), value :: num_elems\n-    integer, dimension(:), pointer :: myArrayPtr\n+    integer(c_int), dimension(:), pointer :: myArrayPtr\n     integer(c_int), dimension(1) :: shape1\n     integer(c_long_long), dimension(1) :: shape2\n     integer :: i"}, {"sha": "3f60f17e4bb8b63e6c8997316d50dc3bf9301673", "filename": "gcc/testsuite/gfortran.dg/c_f_pointer_shape_tests_4.f03", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_f_pointer_shape_tests_4.f03?ref=f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6", "patch": "@@ -12,7 +12,7 @@ subroutine test_long_long_1d(cPtr, num_elems) bind(c)\n     use, intrinsic :: iso_c_binding\n     type(c_ptr), value :: cPtr\n     integer(c_int), value :: num_elems\n-    integer, dimension(:), pointer :: myArrayPtr\n+    integer(c_int), dimension(:), pointer :: myArrayPtr\n     integer(c_long_long), dimension(1) :: shape\n     integer :: i\n     \n@@ -28,7 +28,7 @@ subroutine test_long_long_2d(cPtr, num_rows, num_cols) bind(c)\n     type(c_ptr), value :: cPtr\n     integer(c_int), value :: num_rows\n     integer(c_int), value :: num_cols\n-    integer, dimension(:,:), pointer :: myArrayPtr\n+    integer(c_int), dimension(:,:), pointer :: myArrayPtr\n     integer(c_long_long), dimension(3) :: shape\n     integer :: i,j\n     \n@@ -47,7 +47,7 @@ subroutine test_long_1d(cPtr, num_elems) bind(c)\n     use, intrinsic :: iso_c_binding\n     type(c_ptr), value :: cPtr\n     integer(c_int), value :: num_elems\n-    integer, dimension(:), pointer :: myArrayPtr\n+    integer(c_int), dimension(:), pointer :: myArrayPtr\n     integer(c_long), dimension(1) :: shape\n     integer :: i\n     \n@@ -62,7 +62,7 @@ subroutine test_int_1d(cPtr, num_elems) bind(c)\n     use, intrinsic :: iso_c_binding\n     type(c_ptr), value :: cPtr\n     integer(c_int), value :: num_elems\n-    integer, dimension(:), pointer :: myArrayPtr\n+    integer(c_int), dimension(:), pointer :: myArrayPtr\n     integer(c_int), dimension(1) :: shape\n     integer :: i\n     \n@@ -77,7 +77,7 @@ subroutine test_short_1d(cPtr, num_elems) bind(c)\n     use, intrinsic :: iso_c_binding\n     type(c_ptr), value :: cPtr\n     integer(c_int), value :: num_elems\n-    integer, dimension(:), pointer :: myArrayPtr\n+    integer(c_int), dimension(:), pointer :: myArrayPtr\n     integer(c_short), dimension(1) :: shape\n     integer :: i\n     \n@@ -92,7 +92,7 @@ subroutine test_mixed(cPtr, num_elems) bind(c)\n     use, intrinsic :: iso_c_binding\n     type(c_ptr), value :: cPtr\n     integer(c_int), value :: num_elems\n-    integer, dimension(:), pointer :: myArrayPtr\n+    integer(c_int), dimension(:), pointer :: myArrayPtr\n     integer(c_int), dimension(1) :: shape1\n     integer(c_long_long), dimension(1) :: shape2\n     integer :: i"}, {"sha": "2b6885825521bc900c6c7b58d7344ca40ac461db", "filename": "gcc/testsuite/gfortran.dg/c_funloc_tests_3.f03", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_funloc_tests_3.f03?ref=f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6", "patch": "@@ -9,11 +9,11 @@ function ffunc(j) bind(c)\n     use iso_c_binding, only: c_funptr, c_int\n     integer(c_int)        :: ffunc\n     integer(c_int), value :: j\n-    ffunc = -17*j\n+    ffunc = -17_c_int*j\n   end function ffunc\n end module c_funloc_tests_3\n program main\n-  use iso_c_binding, only: c_funptr, c_funloc\n+  use iso_c_binding, only: c_funptr, c_funloc, c_int\n   use c_funloc_tests_3, only: ffunc\n   implicit none\n   interface\n@@ -29,7 +29,7 @@ end subroutine callFunc\n   end interface\n   type(c_funptr) :: p\n   p = returnFunc()\n-  call callFunc(p, 13,3*13)\n+  call callFunc(p, 13_c_int, 3_c_int*13_c_int)\n   p = c_funloc(ffunc)\n-  call callFunc(p, 21,-17*21)\n+  call callFunc(p, 21_c_int, -17_c_int*21_c_int)\n end program main"}, {"sha": "598a426abfd7ebd01bad9935307262927735aad2", "filename": "gcc/testsuite/gfortran.dg/c_loc_test.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_test.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_test.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_test.f90?ref=f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6", "patch": "@@ -7,7 +7,7 @@ module c_loc_test\n   subroutine test0() bind(c)\n     use, intrinsic :: iso_c_binding\n     implicit none\n-    integer, target :: x\n+    integer(c_int), target :: x\n     type(c_ptr) :: my_c_ptr\n     interface\n        subroutine test_address(x, expected_value) bind(c)\n@@ -16,8 +16,8 @@ subroutine test_address(x, expected_value) bind(c)\n          integer(c_int), value :: expected_value\n        end subroutine test_address\n     end interface\n-    x = 100\n+    x = 100_c_int\n     my_c_ptr = c_loc(x)\n-    call test_address(my_c_ptr, 100)\n+    call test_address(my_c_ptr, 100_c_int)\n   end subroutine test0\n end module c_loc_test"}, {"sha": "289b6eb97a9f96a0391d70fdcf67291a92c53ac0", "filename": "gcc/testsuite/gfortran.dg/c_loc_tests_2.f03", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_loc_tests_2.f03?ref=f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6", "patch": "@@ -44,13 +44,13 @@ subroutine test0() bind(c)\n   end subroutine test0\n \n   subroutine test1() bind(c)\n-    integer, target, dimension(100) :: int_array_tar\n+    integer(c_int), target, dimension(100) :: int_array_tar\n     type(c_ptr) :: my_c_ptr_1 = c_null_ptr\n     type(c_ptr) :: my_c_ptr_2 = c_null_ptr\n     \n-    int_array_tar = 100\n+    int_array_tar = 100_c_int\n     my_c_ptr_1 = c_loc(int_array_tar)\n-    if(test_array_address(my_c_ptr_1, 100) .ne. 1) then\n+    if(test_array_address(my_c_ptr_1, 100_c_int) .ne. 1) then\n        STOP 3\n     end if\n   end subroutine test1"}, {"sha": "8c897cf24f0d2793e1159cf6c53b5237feabec56", "filename": "gcc/testsuite/gfortran.dg/proc_decl_17.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_decl_17.f90?ref=f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6", "patch": "@@ -35,7 +35,8 @@ function foo(y)\n   end function\n \n   subroutine check(p,a)\n-    integer a(:)\n+    use ISO_C_BINDING\n+    integer(C_INT) a(:)\n     procedure(abs_fun) :: p\n     character(size(my_message),C_CHAR) :: c(size(a))\n     integer k,l,m\n@@ -55,7 +56,7 @@ program prog\n \n use m\n \n-integer :: i(4) = (/0,6,12,18/)\n+integer(C_INT) :: i(4) = (/0,6,12,18/)\n \n allocate(my_message(1:6))\n "}, {"sha": "2e7a3779722923c4b0b1e3b9bb84b5058a3193eb", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_8.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_8.f90?ref=f87f88974b9b8b1b8b3b06dfb64179b23e5a5bf6", "patch": "@@ -27,11 +27,11 @@ END MODULE X\n \n CALL init()\n CALL C_F_PROCPOINTER(funpointer,ptype)\n-if (ptype(3) /= 9) STOP 1\n+if (ptype(3_c_int) /= 9) STOP 1\n \n ! the stuff below was added with PR 42072\n call setpointer(ptype2)\n-if (ptype2(4) /= 12) STOP 2\n+if (ptype2(4_c_int) /= 12) STOP 2\n \n contains\n "}]}