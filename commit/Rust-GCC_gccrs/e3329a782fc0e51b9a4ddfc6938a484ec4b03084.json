{"sha": "e3329a782fc0e51b9a4ddfc6938a484ec4b03084", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMzMjlhNzgyZmMwZTUxYjlhNGRkZmM2OTM4YTQ4NGVjNGIwMzA4NA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-06-12T18:05:13Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-06-12T18:05:13Z"}, "message": "PR tree-optimization/85259 - Missing -Wstringop-overflow= since r256683\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/85259\n\t* builtins.c (compute_objsize): Handle constant offsets.\n\t* gimple-ssa-warn-restrict.c (maybe_diag_offset_bounds): Return\n\ttrue iff a warning has been issued.\n\t* gimple.h (gimple_nonartificial_location): New function.\n\t* tree-ssa-strlen.c (maybe_diag_stxncpy_trunc): Call\n\tgimple_nonartificial_location and handle -Wno-system-headers.\n\t(handle_builtin_stxncpy): Same.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/85259\n\t* gcc.dg/Wstringop-overflow-5.c: New test.\n\t* gcc.dg/Wstringop-overflow-6.c: New test.\n\nFrom-SVN: r261518", "tree": {"sha": "54f2c40c75f1eaadb4e09b9210721c95bda1b3a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54f2c40c75f1eaadb4e09b9210721c95bda1b3a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3329a782fc0e51b9a4ddfc6938a484ec4b03084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3329a782fc0e51b9a4ddfc6938a484ec4b03084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3329a782fc0e51b9a4ddfc6938a484ec4b03084", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47feeb36526b106053ad8d4fc7a64c23ce16f5de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47feeb36526b106053ad8d4fc7a64c23ce16f5de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47feeb36526b106053ad8d4fc7a64c23ce16f5de"}], "stats": {"total": 271, "additions": 223, "deletions": 48}, "files": [{"sha": "aa0247df98f7039187c82329cf1d724f5385ec34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3329a782fc0e51b9a4ddfc6938a484ec4b03084", "patch": "@@ -1,3 +1,14 @@\n+2018-06-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/85259\n+\t* builtins.c (compute_objsize): Handle constant offsets.\n+\t* gimple-ssa-warn-restrict.c (maybe_diag_offset_bounds): Return\n+\ttrue iff a warning has been issued.\n+\t* gimple.h (gimple_nonartificial_location): New function.\n+\t* tree-ssa-strlen.c (maybe_diag_stxncpy_trunc): Call\n+\tgimple_nonartificial_location and handle -Wno-system-headers.\n+\t(handle_builtin_stxncpy): Same.\n+\n 2018-06-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/85931"}, {"sha": "6b3e6b2ea961f49e366a34ec10502ab5af316623", "filename": "gcc/builtins.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=e3329a782fc0e51b9a4ddfc6938a484ec4b03084", "patch": "@@ -3326,10 +3326,29 @@ compute_objsize (tree dest, int ostype)\n \t{\n \t  /* compute_builtin_object_size fails for addresses with\n \t     non-constant offsets.  Try to determine the range of\n-\t     such an offset here and use it to adjus the constant\n+\t     such an offset here and use it to adjust the constant\n \t     size.  */\n \t  tree off = gimple_assign_rhs2 (stmt);\n-\t  if (TREE_CODE (off) == SSA_NAME\n+\t  if (TREE_CODE (off) == INTEGER_CST)\n+\t    {\n+\t      if (tree size = compute_objsize (dest, ostype))\n+\t\t{\n+\t\t  wide_int wioff = wi::to_wide (off);\n+\t\t  wide_int wisiz = wi::to_wide (size);\n+\n+\t\t  /* Ignore negative offsets for now.  For others,\n+\t\t     use the lower bound as the most optimistic\n+\t\t     estimate of the (remaining) size.  */\n+\t\t  if (wi::sign_mask (wioff))\n+\t\t    ;\n+\t\t  else if (wi::ltu_p (wioff, wisiz))\n+\t\t    return wide_int_to_tree (TREE_TYPE (size),\n+\t\t\t\t\t     wi::sub (wisiz, wioff));\n+\t\t  else\n+\t\t    return size_zero_node;\n+\t\t}\n+\t    }\n+\t  else if (TREE_CODE (off) == SSA_NAME\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (off)))\n \t    {\n \t      wide_int min, max;"}, {"sha": "7dedb24fb9d8c4d27b0680410ea92af42c9a436f", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=e3329a782fc0e51b9a4ddfc6938a484ec4b03084", "patch": "@@ -1593,8 +1593,6 @@ maybe_diag_offset_bounds (location_t loc, gcall *call, tree func, int strict,\n \n   loc = expansion_point_location_if_in_system_header (loc);\n \n-  tree type;\n-\n   char rangestr[2][64];\n   if (ooboff[0] == ooboff[1]\n       || (ooboff[0] != ref.offrange[0]\n@@ -1605,6 +1603,8 @@ maybe_diag_offset_bounds (location_t loc, gcall *call, tree func, int strict,\n \t     (long long) ooboff[0].to_shwi (),\n \t     (long long) ooboff[1].to_shwi ());\n \n+  bool warned = false;\n+\n   if (oobref == error_mark_node)\n     {\n       if (ref.sizrange[0] == ref.sizrange[1])\n@@ -1614,26 +1614,31 @@ maybe_diag_offset_bounds (location_t loc, gcall *call, tree func, int strict,\n \t\t (long long) ref.sizrange[0].to_shwi (),\n \t\t (long long) ref.sizrange[1].to_shwi ());\n \n+      tree type;\n+\n       if (DECL_P (ref.base)\n \t  && TREE_CODE (type = TREE_TYPE (ref.base)) == ARRAY_TYPE)\n \t{\n \t  if (warning_at (loc, OPT_Warray_bounds,\n \t\t\t  \"%G%qD pointer overflow between offset %s \"\n \t\t\t  \"and size %s accessing array %qD with type %qT\",\n \t\t\t  call, func, rangestr[0], rangestr[1], ref.base, type))\n-\t    inform (DECL_SOURCE_LOCATION (ref.base),\n-\t\t    \"array %qD declared here\", ref.base);\n+\t    {\n+\t      inform (DECL_SOURCE_LOCATION (ref.base),\n+\t\t      \"array %qD declared here\", ref.base);\n+\t      warned = true;\n+\t    }\n \t  else\n-\t    warning_at (loc, OPT_Warray_bounds,\n-\t\t\t\"%G%qD pointer overflow between offset %s \"\n-\t\t\t\"and size %s\",\n-\t\t\tcall, func, rangestr[0], rangestr[1]);\n+\t    warned = warning_at (loc, OPT_Warray_bounds,\n+\t\t\t\t \"%G%qD pointer overflow between offset %s \"\n+\t\t\t\t \"and size %s\",\n+\t\t\t\t call, func, rangestr[0], rangestr[1]);\n \t}\n       else\n-\twarning_at (loc, OPT_Warray_bounds,\n-\t\t    \"%G%qD pointer overflow between offset %s \"\n-\t\t    \"and size %s\",\n-\t\t    call, func, rangestr[0], rangestr[1]);\n+\twarned = warning_at (loc, OPT_Warray_bounds,\n+\t\t\t     \"%G%qD pointer overflow between offset %s \"\n+\t\t\t     \"and size %s\",\n+\t\t\t     call, func, rangestr[0], rangestr[1]);\n     }\n   else if (oobref == ref.base)\n     {\n@@ -1664,22 +1669,26 @@ maybe_diag_offset_bounds (location_t loc, gcall *call, tree func, int strict,\n \t\t\t\t  \"of object %qD with type %qT\"),\n \t\t\t     call, func, rangestr[0],\n \t\t\t     ref.base, TREE_TYPE (ref.base)))\n-\t    inform (DECL_SOURCE_LOCATION (ref.base),\n-\t\t    \"%qD declared here\", ref.base);\n+\t    {\n+\t      inform (DECL_SOURCE_LOCATION (ref.base),\n+\t\t      \"%qD declared here\", ref.base);\n+\t      warned = true;\n+\t    }\n \t}\n       else if (ref.basesize < maxobjsize)\n-\twarning_at (loc, OPT_Warray_bounds,\n-\t\t    form\n-\t\t    ? G_(\"%G%qD forming offset %s is out of the bounds \"\n-\t\t\t \"[0, %wu]\")\n-\t\t    : G_(\"%G%qD offset %s is out of the bounds [0, %wu]\"),\n-\t\t    call, func, rangestr[0], ref.basesize.to_uhwi ());\n+\twarned = warning_at (loc, OPT_Warray_bounds,\n+\t\t\t     form\n+\t\t\t     ? G_(\"%G%qD forming offset %s is out \"\n+\t\t\t\t  \"of the bounds [0, %wu]\")\n+\t\t\t     : G_(\"%G%qD offset %s is out \"\n+\t\t\t\t  \"of the bounds [0, %wu]\"),\n+\t\t\t     call, func, rangestr[0], ref.basesize.to_uhwi ());\n       else\n-\twarning_at (loc, OPT_Warray_bounds,\n-\t\t    form\n-\t\t    ? G_(\"%G%qD forming offset %s is out of bounds\")\n-\t\t    : G_(\"%G%qD offset %s is out of bounds\"),\n-\t\t    call, func, rangestr[0]);\n+\twarned = warning_at (loc, OPT_Warray_bounds,\n+\t\t\t     form\n+\t\t\t     ? G_(\"%G%qD forming offset %s is out of bounds\")\n+\t\t\t     : G_(\"%G%qD offset %s is out of bounds\"),\n+\t\t\t     call, func, rangestr[0]);\n     }\n   else if (TREE_CODE (ref.ref) == MEM_REF)\n     {\n@@ -1688,24 +1697,25 @@ maybe_diag_offset_bounds (location_t loc, gcall *call, tree func, int strict,\n \ttype = TREE_TYPE (type);\n       type = TYPE_MAIN_VARIANT (type);\n \n-      warning_at (loc, OPT_Warray_bounds,\n-\t\t  \"%G%qD offset %s from the object at %qE is out \"\n-\t\t  \"of the bounds of %qT\",\n-\t\t  call, func, rangestr[0], ref.base, type);\n+      warned = warning_at (loc, OPT_Warray_bounds,\n+\t\t\t   \"%G%qD offset %s from the object at %qE is out \"\n+\t\t\t   \"of the bounds of %qT\",\n+\t\t\t   call, func, rangestr[0], ref.base, type);\n     }\n   else\n     {\n-      type = TYPE_MAIN_VARIANT (TREE_TYPE (ref.ref));\n-\n-      warning_at (loc, OPT_Warray_bounds,\n-\t\t\"%G%qD offset %s from the object at %qE is out \"\n-\t\t\"of the bounds of referenced subobject %qD with type %qT \"\n-\t\t\"at offset %wu\",\n-\t\tcall, func, rangestr[0], ref.base, TREE_OPERAND (ref.ref, 1),\n-\t\ttype, ref.refoff.to_uhwi ());\n+      tree type = TYPE_MAIN_VARIANT (TREE_TYPE (ref.ref));\n+\n+      warned = warning_at (loc, OPT_Warray_bounds,\n+\t\t\t   \"%G%qD offset %s from the object at %qE is out \"\n+\t\t\t   \"of the bounds of referenced subobject %qD with \"\n+\t\t\t   \"type %qT at offset %wu\",\n+\t\t\t   call, func, rangestr[0], ref.base,\n+\t\t\t   TREE_OPERAND (ref.ref, 1), type,\n+\t\t\t   ref.refoff.to_uhwi ());\n     }\n \n-  return true;\n+  return warned;\n }\n \n /* Check a CALL statement for restrict-violations and issue warnings\n@@ -1815,12 +1825,7 @@ bool\n check_bounds_or_overlap (gcall *call, tree dst, tree src, tree dstsize,\n \t\t\t tree srcsize, bool bounds_only /* = false */)\n {\n-  location_t loc = gimple_location (call);\n-\n-  if (tree block = gimple_block (call))\n-    if (location_t *pbloc = block_nonartificial_location (block))\n-      loc = *pbloc;\n-\n+  location_t loc = gimple_nonartificial_location (call);\n   loc = expansion_point_location_if_in_system_header (loc);\n \n   tree func = gimple_call_fndecl (call);"}, {"sha": "ab095f63908940c46031995ec647f8c1a0373e9b", "filename": "gcc/gimple.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=e3329a782fc0e51b9a4ddfc6938a484ec4b03084", "patch": "@@ -1796,6 +1796,20 @@ gimple_has_location (const gimple *g)\n }\n \n \n+/* Return non-artificial location information for statement G.  */\n+\n+static inline location_t\n+gimple_nonartificial_location (const gimple *g)\n+{\n+  location_t *ploc = NULL;\n+\n+  if (tree block = gimple_block (g))\n+    ploc = block_nonartificial_location (block);\n+\n+  return ploc ? *ploc : gimple_location (g);\n+}\n+\n+\n /* Return the file name of the location of STMT.  */\n \n static inline const char *"}, {"sha": "9ab1822be6efd077b211ceee4910c1650afd3ef3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3329a782fc0e51b9a4ddfc6938a484ec4b03084", "patch": "@@ -3,6 +3,12 @@\n \tPR fortran/44491\n \t* gfortran.dg/pr44491.f90: New testcase\n \n+2018-06-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/85259\n+\t* gcc.dg/Wstringop-overflow-5.c: New test.\n+\t* gcc.dg/Wstringop-overflow-6.c: New test.\n+\n 2018-06-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/85931"}, {"sha": "4abce01b5f8f2a189cc8177273a9f49db8f1bc05", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-5.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-5.c?ref=e3329a782fc0e51b9a4ddfc6938a484ec4b03084", "patch": "@@ -0,0 +1,58 @@\n+/* PR tree-optimization/85259 - Missing -Wstringop-overflow= since r256683\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wstringop-overflow\" } */\n+\n+extern char* strcpy (char*, const char*);\n+extern char* strcat (char*, const char*);\n+\n+char a1[1];\n+char a2[2];\n+char a3[3];\n+char a4[4];\n+char a5[5];\n+char a6[6];\n+char a7[7];\n+char a8[8];\n+\n+/* Verify that at least one instance of -Wstringop-overflow is issued\n+   for each pair of strcpy/strcat calls.  */\n+\n+void test_strcpy_strcat_1 (void)\n+{\n+  strcpy (a1, \"1\"), strcat (a1, \"2\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void test_strcpy_strcat_2 (void)\n+{\n+  strcpy (a2, \"12\"), strcat (a2, \"3\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void test_strcpy_strcat_3 (void)\n+{\n+  strcpy (a3, \"123\"), strcat (a3, \"4\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void test_strcpy_strcat_4 (void)\n+{\n+  strcpy (a4, \"1234\"), strcat (a4, \"5\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void test_strcpy_strcat_5 (void)\n+{\n+  strcpy (a5, \"12345\"), strcat (a5, \"6\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void test_strcpy_strcat_6 (void)\n+{\n+  strcpy (a6, \"123456\"), strcat (a6, \"7\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void test_strcpy_strcat_7 (void)\n+{\n+  strcpy (a7, \"1234567\"), strcat (a7, \"8\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void test_strcpy_strcat_8 (void)\n+{\n+  strcpy (a8, \"12345678\"), strcat (a8, \"9\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}"}, {"sha": "9284a87aeb0846d1ebe679945d5949bfad9f3fc5", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-6.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-6.c?ref=e3329a782fc0e51b9a4ddfc6938a484ec4b03084", "patch": "@@ -0,0 +1,59 @@\n+/* PR tree-optimization/85259 - Missing -Wstringop-overflow= since r256683\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wstringop-overflow -ftrack-macro-expansion=0\" } */\n+\n+#define bos1(p) __builtin_object_size (p, 1)\n+#define strcat(d, s) __builtin___strcat_chk (d, s, bos1 (d))\n+#define strcpy(d, s) __builtin___strcpy_chk (d, s, bos1 (d))\n+\n+char a1[1];\n+char a2[2];\n+char a3[3];\n+char a4[4];\n+char a5[5];\n+char a6[6];\n+char a7[7];\n+char a8[8];\n+\n+/* Verify that at least one instance of -Wstringop-overflow is issued\n+   for each pair of strcpy/strcat calls.  */\n+\n+void test_strcpy_strcat_1 (void)\n+{\n+  strcpy (a1, \"1\"), strcat (a1, \"2\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void test_strcpy_strcat_2 (void)\n+{\n+  strcpy (a2, \"12\"), strcat (a2, \"3\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" \"bug 86121\" { xfail *-*-* } } */\n+}\n+\n+void test_strcpy_strcat_3 (void)\n+{\n+  strcpy (a3, \"123\"), strcat (a3, \"4\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void test_strcpy_strcat_4 (void)\n+{\n+  strcpy (a4, \"1234\"), strcat (a4, \"5\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void test_strcpy_strcat_5 (void)\n+{\n+  strcpy (a5, \"12345\"), strcat (a5, \"6\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void test_strcpy_strcat_6 (void)\n+{\n+  strcpy (a6, \"123456\"), strcat (a6, \"7\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void test_strcpy_strcat_7 (void)\n+{\n+  strcpy (a7, \"1234567\"), strcat (a7, \"8\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}\n+\n+void test_strcpy_strcat_8 (void)\n+{\n+  strcpy (a8, \"12345678\"), strcat (a8, \"9\");   /* { dg-warning \"\\\\\\[-Wstringop-overflow=]\" } */\n+}"}, {"sha": "8794cc240c8b5cb2beb124981f3a35ff9633ff72", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3329a782fc0e51b9a4ddfc6938a484ec4b03084/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=e3329a782fc0e51b9a4ddfc6938a484ec4b03084", "patch": "@@ -1886,7 +1886,9 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \t}\n     }\n \n-  location_t callloc = gimple_location (stmt);\n+  location_t callloc = gimple_nonartificial_location (stmt);\n+  callloc = expansion_point_location_if_in_system_header (callloc);\n+\n   tree func = gimple_call_fndecl (stmt);\n \n   if (lenrange[0] != 0 || !wi::neg_p (lenrange[1]))\n@@ -2069,7 +2071,8 @@ handle_builtin_stxncpy (built_in_function, gimple_stmt_iterator *gsi)\n      to strlen(S)).  */\n   strinfo *silen = get_strinfo (pss->first);\n \n-  location_t callloc = gimple_location (stmt);\n+  location_t callloc = gimple_nonartificial_location (stmt);\n+  callloc = expansion_point_location_if_in_system_header (callloc);\n \n   tree func = gimple_call_fndecl (stmt);\n "}]}