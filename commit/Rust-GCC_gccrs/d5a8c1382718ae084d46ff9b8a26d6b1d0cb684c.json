{"sha": "d5a8c1382718ae084d46ff9b8a26d6b1d0cb684c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVhOGMxMzgyNzE4YWUwODRkNDZmZjliOGEyNmQ2YjFkMGNiNjg0Yw==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-07-26T21:25:06Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-07-26T21:30:25Z"}, "message": "Confirm and Handle only ASCII in toupper and tolower ranges.\n\n\tPR tree-optimization/78888\n\t* gimple-range-fold.cc (get_letter_range): New.\n\t(fold_using_range::range_of_builtin_call): Call get_letter_range.", "tree": {"sha": "4e0dea952fdb7ba05e0470c7b69df57e3596ff81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e0dea952fdb7ba05e0470c7b69df57e3596ff81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5a8c1382718ae084d46ff9b8a26d6b1d0cb684c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a8c1382718ae084d46ff9b8a26d6b1d0cb684c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5a8c1382718ae084d46ff9b8a26d6b1d0cb684c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a8c1382718ae084d46ff9b8a26d6b1d0cb684c/comments", "author": null, "committer": null, "parents": [{"sha": "3a1d168e9e0e3e38adedf5df393e9f8c075fc755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a1d168e9e0e3e38adedf5df393e9f8c075fc755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a1d168e9e0e3e38adedf5df393e9f8c075fc755"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "410bc4ddca4fb3dc3f75ffa87dbf51941639c93b", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5a8c1382718ae084d46ff9b8a26d6b1d0cb684c/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5a8c1382718ae084d46ff9b8a26d6b1d0cb684c/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=d5a8c1382718ae084d46ff9b8a26d6b1d0cb684c", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"tree-ssa-loop.h\"\n #include \"tree-scalar-evolution.h\"\n+#include \"langhooks.h\"\n #include \"vr-values.h\"\n #include \"range.h\"\n #include \"value-query.h\"\n@@ -835,6 +836,28 @@ fold_using_range::range_of_builtin_ubsan_call (irange &r, gcall *call,\n     r.set_varying (type);\n }\n \n+// Return TRUE if we recognize the target character set and return the\n+// range for lower case and upper case letters.\n+\n+static bool\n+get_letter_range (tree type, irange &lowers, irange &uppers)\n+{\n+  // ASCII\n+  int a = lang_hooks.to_target_charset ('a');\n+  int z = lang_hooks.to_target_charset ('z');\n+  int A = lang_hooks.to_target_charset ('A');\n+  int Z = lang_hooks.to_target_charset ('Z');\n+\n+  if ((z - a == 25) && (Z - A == 25))\n+    {\n+      lowers = int_range<2> (build_int_cst (type, a), build_int_cst (type, z));\n+      uppers = int_range<2> (build_int_cst (type, A), build_int_cst (type, Z));\n+      return true;\n+    }\n+  // Unknown character set.\n+  return false;\n+}\n+\n // For a builtin in CALL, return a range in R if known and return\n // TRUE.  Otherwise return FALSE.\n \n@@ -873,13 +896,16 @@ fold_using_range::range_of_builtin_call (irange &r, gcall *call,\n \targ = gimple_call_arg (call, 0);\n \tif (!src.get_operand (r, arg))\n \t  return false;\n+\n+\tint_range<3> lowers;\n+\tint_range<3> uppers;\n+\tif (!get_letter_range (type, lowers, uppers))\n+\t  return false;\n+\n \t// Return the range passed in without any lower case characters,\n \t// but including all the upper case ones.\n-\tint_range<2> exclude (build_int_cst (type, 'a'),\n-\t\t\t      build_int_cst (type, 'z'), VR_ANTI_RANGE);\n-\tr.intersect (exclude);\n-\tint_range<2> uppers (build_int_cst (type, 'A'),\n-\t\t\t      build_int_cst (type, 'Z'));\n+\tlowers.invert ();\n+\tr.intersect (lowers);\n \tr.union_ (uppers);\n \treturn true;\n       }\n@@ -889,13 +915,16 @@ fold_using_range::range_of_builtin_call (irange &r, gcall *call,\n \targ = gimple_call_arg (call, 0);\n \tif (!src.get_operand (r, arg))\n \t  return false;\n+\n+\tint_range<3> lowers;\n+\tint_range<3> uppers;\n+\tif (!get_letter_range (type, lowers, uppers))\n+\t  return false;\n+\n \t// Return the range passed in without any upper case characters,\n \t// but including all the lower case ones.\n-\tint_range<2> exclude (build_int_cst (type, 'A'),\n-\t\t\t      build_int_cst (type, 'Z'), VR_ANTI_RANGE);\n-\tr.intersect (exclude);\n-\tint_range<2> lowers (build_int_cst (type, 'a'),\n-\t\t\t      build_int_cst (type, 'z'));\n+\tuppers.invert ();\n+\tr.intersect (uppers);\n \tr.union_ (lowers);\n \treturn true;\n       }"}]}