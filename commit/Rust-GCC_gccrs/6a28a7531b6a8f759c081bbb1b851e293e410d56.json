{"sha": "6a28a7531b6a8f759c081bbb1b851e293e410d56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEyOGE3NTMxYjZhOGY3NTljMDgxYmJiMWI4NTFlMjkzZTQxMGQ1Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-07-11T11:11:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-07-11T11:11:33Z"}, "message": "Improvements to the libstdc++ FAQ and manual\n\n\t* doc/xml/faq.xml: Update several old entries. Improve\n\tcross-references.\n\t* doc/xml/manual/intro.xml: Add anchors to each DR.\n\t* doc/html/*: Regenerate.\n\nFrom-SVN: r250125", "tree": {"sha": "1a2c4e45bb55cb6625ef091dcae43dec54c72710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a2c4e45bb55cb6625ef091dcae43dec54c72710"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a28a7531b6a8f759c081bbb1b851e293e410d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a28a7531b6a8f759c081bbb1b851e293e410d56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a28a7531b6a8f759c081bbb1b851e293e410d56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a28a7531b6a8f759c081bbb1b851e293e410d56/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bee038f145133217be2bfc2750a06b4e527f7ccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bee038f145133217be2bfc2750a06b4e527f7ccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bee038f145133217be2bfc2750a06b4e527f7ccd"}], "stats": {"total": 865, "additions": 462, "deletions": 403}, "files": [{"sha": "04a1c7f7aeed7e8929a8b2f6b30d5721f92c60b6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a28a7531b6a8f759c081bbb1b851e293e410d56/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a28a7531b6a8f759c081bbb1b851e293e410d56/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6a28a7531b6a8f759c081bbb1b851e293e410d56", "patch": "@@ -1,3 +1,10 @@\n+2017-07-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/faq.xml: Update several old entries. Improve\n+\tcross-references.\n+\t* doc/xml/manual/intro.xml: Add anchors to each DR.\n+\t* doc/html/*: Regenerate.\n+\n 2017-07-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/abi/pr42230.cc: Add header for std::free."}, {"sha": "34a9b2bce60633480493a4675db914b05aea19dd", "filename": "libstdc++-v3/doc/html/faq.html", "status": "modified", "additions": 81, "deletions": 63, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a28a7531b6a8f759c081bbb1b851e293e410d56/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a28a7531b6a8f759c081bbb1b851e293e410d56/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Ffaq.html?ref=6a28a7531b6a8f759c081bbb1b851e293e410d56", "patch": "@@ -76,7 +76,8 @@\n     </a></dt><dt>6.9. <a href=\"faq.html#faq.easy_to_fix\">\n       Aw, that's easy to fix!\n     </a></dt></dl></dd><dt></dt><dd><dl><dt>7.1. <a href=\"faq.html#faq.iterator_as_pod\">\n-      string::iterator is not char*; vector&lt;T&gt;::iterator is not T*\n+      string::iterator is not char*;\n+      vector&lt;T&gt;::iterator is not T*\n     </a></dt><dt>7.2. <a href=\"faq.html#faq.what_is_next\">\n       What's next after libstdc++?\n     </a></dt><dt>7.3. <a href=\"faq.html#faq.sgi_stl\">\n@@ -133,10 +134,10 @@\n     <a class=\"link\" href=\"https://gcc.gnu.org/buildstat.html\" target=\"_top\">portability</a>\n     that are the hallmarks of an open-source project are applied to libstdc++.\n     </p><p>\n-    All of the standard classes and functions from C++98/C++03\n+    All of the standard classes and functions from C++98/C++03, C++11 and C++14\n     (such as <code class=\"classname\">string</code>,\n     <code class=\"classname\">vector&lt;&gt;</code>, iostreams, algorithms etc.)\n-    are freely available and atempt to be fully compliant.\n+    are freely available and attempt to be fully compliant.\n     Work is ongoing to complete support for the current revision of the\n     ISO C++ Standard.\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.who\"></a><a id=\"q-who\"></a><p><strong>1.3.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n@@ -431,7 +432,7 @@\n     C++ compiler.\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.solaris_long_long\"></a><a id=\"q-solaris_long_long\"></a><p><strong>4.2.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n       No '<span class=\"type\">long long</span>' type on Solaris?\n-    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-solaris_long_long\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-solaris_long_long\"></a></td><td align=\"left\" valign=\"top\"><div class=\"note\" style=\"margin-left: 0.5in; margin-right: 0.5in;\"><h3 class=\"title\">Note</h3><p>This answer is old and probably no longer be relevant.</p></div><p>\n     By default we try to support the C99 <span class=\"type\">long long</span> type.\n     This requires that certain functions from your C library be present.\n     </p><p> \n@@ -509,7 +510,7 @@\n          more recent the C library.  (This is also documented in the main\n          GCC installation instructions.)\n       </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.freebsd_wchar\"></a><a id=\"q-freebsd_wchar\"></a><p><strong>4.8.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n-      Can't use wchar_t/wstring on FreeBSD\n+      Can't use <span class=\"type\">wchar_t</span>/<code class=\"classname\">wstring</code> on FreeBSD\n     </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-freebsd_wchar\"></a></td><td align=\"left\" valign=\"top\"><div class=\"note\" style=\"margin-left: 0.5in; margin-right: 0.5in;\"><h3 class=\"title\">Note</h3><p>This answer is old and probably no longer be relevant.</p></div><p>\n     Older versions of FreeBSD's C library do not have sufficient\n     support for wide character functions, and as a result the\n@@ -552,7 +553,8 @@\n     place), a public list of the library defects is occasionally\n     published on <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/\" target=\"_top\">the WG21\n     website</a>.\n-    Many of these issues have resulted in code changes in libstdc++.\n+    Many of these issues have resulted in\n+    <a class=\"link\" href=\"manual/bugs.html#manual.intro.status.bugs.iso\" title=\"Standard Bugs\">code changes in libstdc++</a>.\n     </p><p>\n     If you think you've discovered a new bug that is not listed,\n     please post a message describing your problem to the author of\n@@ -570,8 +572,8 @@\n     these lists with terms describing your issue.\n     </p><p> \n     Before reporting a bug, please examine the\n-    <a class=\"link\" href=\"http://gcc.gnu.org/bugs/\" target=\"_top\">bugs database</a> with the\n-    category set to <span class=\"quote\">\u201c<span class=\"quote\">g++</span>\u201d</span>. \n+    <a class=\"link\" href=\"https://gcc.gnu.org/bugs/\" target=\"_top\">bugs database</a>, with the\n+    component set to <span class=\"quote\">\u201c<span class=\"quote\">c++</span>\u201d</span>.\n     </p></td></tr><tr class=\"toc\"><td align=\"left\" valign=\"top\" colspan=\"2\"><dl><dt>6.1. <a href=\"faq.html#faq.stream_reopening_fails\">\n       Reopening a stream fails\n     </a></dt><dt>6.2. <a href=\"faq.html#faq.wefcxx_verbose\">\n@@ -594,8 +596,9 @@\n       Aw, that's easy to fix!\n     </a></dt></dl></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.stream_reopening_fails\"></a><a id=\"q-stream_reopening_fails\"></a><p><strong>6.1.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n       Reopening a stream fails\n-    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-stream_reopening_fails\"></a></td><td align=\"left\" valign=\"top\"><p>\n-    One of the most-reported non-bug reports. Executing a sequence like:\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-stream_reopening_fails\"></a></td><td align=\"left\" valign=\"top\"><div class=\"note\" style=\"margin-left: 0.5in; margin-right: 0.5in;\"><h3 class=\"title\">Note</h3><p>This answer is old and probably no longer be relevant.</p></div><p>\n+    Prior to GCC 4.0 this was one of the most-reported non-bug reports.\n+    Executing a sequence like this would fail:\n     </p><pre class=\"programlisting\">\n     #include &lt;fstream&gt;\n     ...\n@@ -606,27 +609,30 @@\n     fs.close();\n     fs.open(\"a_new_file\");\n     </pre><p>\n-    All operations on the re-opened <code class=\"varname\">fs</code> will fail, or at\n-    least act very strangely.  Yes, they often will, especially if\n-    <code class=\"varname\">fs</code> reached the EOF state on the previous file.  The\n-    reason is that the state flags are <span class=\"emphasis\"><em>not</em></span> cleared\n-    on a successful call to open().  The standard unfortunately did\n-    not specify behavior in this case, and to everybody's great sorrow,\n-    the <a class=\"link\" href=\"manual/bugs.html\" title=\"Bugs\">proposed LWG resolution in\n-      DR #22</a> is to leave the flags unchanged.  You must insert a call\n-    to <code class=\"function\">fs.clear()</code> between the calls to close() and open(),\n-    and then everything will work like we all expect it to work.\n-    <span class=\"emphasis\"><em>Update:</em></span> for GCC 4.0 we implemented the resolution\n-    of <a class=\"link\" href=\"manual/bugs.html\" title=\"Bugs\">DR #409</a> and open() \n-    now calls <code class=\"function\">clear()</code> on success!\n+    All operations on the re-opened <code class=\"varname\">fs</code> would fail, or at\n+    least act very strangely, especially if <code class=\"varname\">fs</code> reached the\n+    EOF state on the previous file.\n+    The original C++98 standard did not specify behavior in this case, and\n+    the <a class=\"link\" href=\"manual/bugs.html#manual.bugs.dr22\">resolution of DR #22</a> was to\n+    leave the state flags unchanged on a successful call to\n+    <code class=\"function\">open()</code>.\n+    You had to insert a call to <code class=\"function\">fs.clear()</code> between the\n+    calls to <code class=\"function\">close()</code> and <code class=\"function\">open()</code>,\n+    and then everything will work as expected.\n+    <span class=\"emphasis\"><em>Update:</em></span> For GCC 4.0 we implemented the resolution\n+    of <a class=\"link\" href=\"manual/bugs.html#manual.bugs.dr409\">DR #409</a> and\n+    <code class=\"function\">open()</code>\n+    now calls <code class=\"function\">clear()</code> on success.\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.wefcxx_verbose\"></a><a id=\"q-wefcxx_verbose\"></a><p><strong>6.2.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n       -Weffc++ complains too much\n     </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-wefcxx_verbose\"></a></td><td align=\"left\" valign=\"top\"><p>\n     Many warnings are emitted when <code class=\"option\">-Weffc++</code> is used.  Making\n     libstdc++ <code class=\"option\">-Weffc++</code>-clean is not a goal of the project,\n     for a few reasons.  Mainly, that option tries to enforce\n     object-oriented programming, while the Standard Library isn't\n-    necessarily trying to be OO.\n+    necessarily trying to be OO. The option also enforces outdated guidelines\n+    from old editions of the books, and the advice isn't all relevant to\n+    modern C++ (especially C++11 and later).\n     </p><p>\n     We do, however, try to have libstdc++ sources as clean as possible. If\n     you see some simple changes that pacify <code class=\"option\">-Weffc++</code>\n@@ -637,15 +643,16 @@\n     Another problem is the <code class=\"literal\">rel_ops</code> namespace and the template\n     comparison operator functions contained therein.  If they become\n     visible in the same namespace as other comparison functions\n-    (e.g., <span class=\"quote\">\u201c<span class=\"quote\">using</span>\u201d</span> them and the &lt;iterator&gt; header),\n+    (e.g., <span class=\"quote\">\u201c<span class=\"quote\">using</span>\u201d</span> them and the\n+    <code class=\"filename\">&lt;iterator&gt;</code> header),\n     then you will suddenly be faced with huge numbers of ambiguity\n-    errors.  This was discussed on the -v3 list; Nathan Myers\n+    errors.  This was discussed on the mailing list; Nathan Myers\n     <a class=\"link\" href=\"http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\" target=\"_top\">sums\n       things up here</a>.  The collisions with vector/string iterator\n     types have been fixed for 3.1.\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.v2_headers\"></a><a id=\"q-v2_headers\"></a><p><strong>6.4.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n       The g++-3 headers are <span class=\"emphasis\"><em>not ours</em></span>\n-    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-v2_headers\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-v2_headers\"></a></td><td align=\"left\" valign=\"top\"><div class=\"note\" style=\"margin-left: 0.5in; margin-right: 0.5in;\"><h3 class=\"title\">Note</h3><p>This answer is old and probably no longer be relevant.</p></div><p>\n \tIf you are using headers in\n \t<code class=\"filename\">${prefix}/include/g++-3</code>, or if\n \tthe installed library's name looks like\n@@ -698,19 +705,20 @@\n \u00a0\u00a0\u00a0\u00a0<span class=\"command\"><strong>g++\u00a0-fPIC\u00a0-rdynamic\u00a0-o\u00a0foo\u00a0...\u00a0-L.\u00a0-lfoo\u00a0-ldl</strong></span><br />\n \u00a0\u00a0\u00a0\u00a0</p></div></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.memory_leaks\"></a><a id=\"q-memory_leaks\"></a><p><strong>6.7.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n       <span class=\"quote\">\u201c<span class=\"quote\">Memory leaks</span>\u201d</span> in containers\n-    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-memory_leaks\"></a></td><td align=\"left\" valign=\"top\"><p>\n+    </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-memory_leaks\"></a></td><td align=\"left\" valign=\"top\"><div class=\"note\" style=\"margin-left: 0.5in; margin-right: 0.5in;\"><h3 class=\"title\">Note</h3><p>This answer is old and probably no longer be relevant.</p></div><p>\n     A few people have reported that the standard containers appear\n     to leak memory when tested with memory checkers such as\n     <a class=\"link\" href=\"http://valgrind.org/\" target=\"_top\"><span class=\"command\"><strong>valgrind</strong></span></a>.\n-    Under some configurations the library's allocators keep free memory in a\n+    Under some (non-default) configurations the library's allocators keep\n+    free memory in a\n     pool for later reuse, rather than returning it to the OS.  Although\n     this memory is always reachable by the library and is never\n     lost, memory debugging tools can report it as a leak.  If you\n     want to test the library for memory leaks please read\n     <a class=\"link\" href=\"manual/debug.html#debug.memory\" title=\"Memory Leak Hunting\">Tips for memory leak hunting</a>\n     first.\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.list_size_on\"></a><a id=\"q-list_size_on\"></a><p><strong>6.8.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n-      list::size() is O(n)!\n+      <code class=\"code\">list::size()</code> is O(n)!\n     </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-list_size_on\"></a></td><td align=\"left\" valign=\"top\"><p>\n     See\n     the <a class=\"link\" href=\"manual/containers.html\" title=\"Chapter\u00a09.\u00a0 Containers\">Containers</a>\n@@ -734,7 +742,8 @@\n     creeps back in, it will be caught immediately by the testsuite -\n     but only if such a test exists.\n     </p></td></tr><tr class=\"toc\"><td align=\"left\" valign=\"top\" colspan=\"2\"><dl><dt>7.1. <a href=\"faq.html#faq.iterator_as_pod\">\n-      string::iterator is not char*; vector&lt;T&gt;::iterator is not T*\n+      string::iterator is not char*;\n+      vector&lt;T&gt;::iterator is not T*\n     </a></dt><dt>7.2. <a href=\"faq.html#faq.what_is_next\">\n       What's next after libstdc++?\n     </a></dt><dt>7.3. <a href=\"faq.html#faq.sgi_stl\">\n@@ -749,7 +758,8 @@\n     </a></dt><dt>7.8. <a href=\"faq.html#faq.size_equals_capacity\">\n       How do I make std::vector&lt;T&gt;::capacity() == std::vector&lt;T&gt;::size?\n     </a></dt></dl></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.iterator_as_pod\"></a><a id=\"faq.iterator_as_pod_q\"></a><p><strong>7.1.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n-      string::iterator is not char*; vector&lt;T&gt;::iterator is not T*\n+      <code class=\"classname\">string::iterator</code> is not <code class=\"code\">char*</code>;\n+      <code class=\"classname\">vector&lt;T&gt;::iterator</code> is not <code class=\"code\">T*</code>\n     </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"faq.iterator_as_pod_a\"></a></td><td align=\"left\" valign=\"top\"><p>\n     If you have code that depends on container&lt;T&gt; iterators\n     being implemented as pointer-to-T, your code is broken. It's\n@@ -762,38 +772,38 @@\n     than a typedef for <span class=\"type\">T*</span> outweighs nearly all opposing\n     arguments.\n     </p><p>\n-    Code which does assume that a vector iterator <code class=\"varname\">i</code>\n+    Code which does assume that a vector/string iterator <code class=\"varname\">i</code>\n     is a pointer can often be fixed by changing <code class=\"varname\">i</code> in\n-    certain expressions to <code class=\"varname\">&amp;*i</code>.  Future revisions\n-    of the Standard are expected to bless this usage for\n-    vector&lt;&gt; (but not for basic_string&lt;&gt;).\n+    certain expressions to <code class=\"varname\">&amp;*i</code>.\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.what_is_next\"></a><a id=\"q-what_is_next\"></a><p><strong>7.2.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n       What's next after libstdc++?\n     </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-what_is_next\"></a></td><td align=\"left\" valign=\"top\"><p>\n-\tHopefully, not much.  The goal of libstdc++ is to produce a\n-\tfully-compliant, fully-portable Standard Library.  After that,\n-\twe're mostly done: there won't <span class=\"emphasis\"><em>be</em></span> any\n-\tmore compliance work to do.\n-      </p><p>\n-\tThere is an effort underway to add significant extensions to\n-\tthe standard library specification.  The latest version of\n-\tthis effort is described in\n-         <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf\" target=\"_top\">\n-         The C++ Library Technical Report 1</a>.\n+\tThe goal of libstdc++ is to produce a\n+\tfully-compliant, fully-portable Standard Library.\n+\tWhile the C++ Standard continues to evolve the libstdc++ will\n+        continue to track it.\n       </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.sgi_stl\"></a><a id=\"q-sgi_stl\"></a><p><strong>7.3.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n       What about the STL from SGI?\n     </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-sgi_stl\"></a></td><td align=\"left\" valign=\"top\"><p>\n-      The <a class=\"link\" href=\"http://www.sgi.com/tech/stl/\" target=\"_top\">STL from SGI</a>,\n-    version 3.3, was the final merge of the STL codebase.  The\n-    code in libstdc++ contains many fixes and changes, and\n-    the SGI code is no longer under active\n-    development.  We expect that no future merges will take place.\n+    The STL (Standard Template Library) was the inspiration for large chunks\n+    of the C++ Standard Library, but the terms are not interchangeable and\n+    they don't mean the same thing. The C++ Standard Library includes lots of\n+    things that didn't come from the STL, and some of them aren't even\n+    templates, such as <code class=\"classname\">std::locale</code> and\n+    <code class=\"classname\">std::thread</code>.\n+    </p><p>\n+    Libstdc++-v3 incorporates a lot of code from\n+    <a class=\"link\" href=\"http://www.sgi.com/tech/stl/\" target=\"_top\">the SGI STL</a>\n+    (the final merge was from\n+    <a class=\"link\" href=\"http://www.sgi.com/tech/stl/whats_new.html\" target=\"_top\">release 3.3</a>).\n+    The code in libstdc++ contains many fixes and changes compared to the\n+    original SGI code.\n     </p><p>\n     In particular, <code class=\"classname\">string</code> is not from SGI and makes no\n-    use of their \"rope\" class (which is included as an\n-    optional extension), nor is <code class=\"classname\">valarray</code> and some others.\n-    Classes like <code class=\"classname\">vector&lt;&gt;</code> are, but have been\n-    extensively modified.\n+    use of their \"rope\" class (although that is included as an optional\n+    extension), neither is <code class=\"classname\">valarray</code> nor some others.\n+    Classes like <code class=\"classname\">vector&lt;&gt;</code> were from SGI, but have\n+    been extensively modified.\n     </p><p>\n     More information on the evolution of libstdc++ can be found at the\n     <a class=\"link\" href=\"manual/api.html\" title=\"API Evolution and Deprecation History\">API\n@@ -812,13 +822,17 @@\n     </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-tr1_support\"></a></td><td align=\"left\" valign=\"top\"><p>\n     Yes.\n     </p><p>\n-    The C++ Standard Library Technical Report adds many new features to \n-    the library.  The latest version of this effort is described in\n+    The C++ Standard Library\n     <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf\" target=\"_top\">\n-         Technical Report 1</a>.\n+    Technical Report 1</a> added many new features to the library.\n     </p><p>\n-    The implementation status of TR1 in libstdc++ can be tracked <a class=\"link\" href=\"manual/status.html#status.iso.tr1\" title=\"C++ TR1\">on the TR1 status\n-    page</a>.\n+    The implementation status of TR1 in libstdc++ can be tracked\n+    <a class=\"link\" href=\"manual/status.html#status.iso.tr1\" title=\"C++ TR1\">on the TR1 status page</a>.\n+    </p><p>\n+    New code should probably not use TR1, because almost everything in it has\n+    been added to the main C++ Standard Library (usually with significant\n+    improvements).\n+    The TR1 implementation in libstdc++ is no longer actively maintained.\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.get_iso_cxx\"></a><a id=\"q-get_iso_cxx\"></a><p><strong>7.6.</strong></p></td><td align=\"left\" valign=\"top\"><p>How do I get a copy of the ISO C++ Standard?\n     </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-get_iso_cxx\"></a></td><td align=\"left\" valign=\"top\"><p>\n     Please refer to the <a class=\"link\" href=\"manual/appendix_contributing.html\" title=\"Appendix\u00a0A.\u00a0 Contributing\">Contributing</a>\n@@ -878,10 +892,14 @@\n     the decisions, must happen before you can reasonably document a\n     candidate C++ ABI that encompasses the standard library.\n     </p></td></tr><tr class=\"question\"><td align=\"left\" valign=\"top\"><a id=\"faq.size_equals_capacity\"></a><a id=\"q-size_equals_capacity\"></a><p><strong>7.8.</strong></p></td><td align=\"left\" valign=\"top\"><p>\n-      How do I make std::vector&lt;T&gt;::capacity() == std::vector&lt;T&gt;::size?\n+      How do I make <code class=\"code\">std::vector&lt;T&gt;::capacity() == std::vector&lt;T&gt;::size</code>?\n     </p></td></tr><tr class=\"answer\"><td align=\"left\" valign=\"top\"><a id=\"a-size_equals_capacity\"></a></td><td align=\"left\" valign=\"top\"><p>\n-    The standard idiom for deallocating a <code class=\"classname\">vector&lt;T&gt;</code>'s\n-    unused memory is to create a temporary copy of the vector and swap their\n+    Since C++11 just call the <code class=\"function\">shrink_to_fit()</code> member\n+    function.\n+    </p><p>\n+    Before C++11, the standard idiom for deallocating a\n+    <code class=\"classname\">vector&lt;T&gt;</code>'s\n+    unused memory was to create a temporary copy of the vector and swap their\n     contents, e.g. for <code class=\"classname\">vector&lt;T&gt; v</code>\n     </p><div class=\"literallayout\"><p><br />\n \u00a0\u00a0\u00a0\u00a0\u00a0std::vector&lt;T&gt;(v).swap(v);<br />"}, {"sha": "1ed199e432ebb60d2e820892eff91f035fc2a654", "filename": "libstdc++-v3/doc/html/manual/bugs.html", "status": "modified", "additions": 142, "deletions": 140, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a28a7531b6a8f759c081bbb1b851e293e410d56/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a28a7531b6a8f759c081bbb1b851e293e410d56/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html?ref=6a28a7531b6a8f759c081bbb1b851e293e410d56", "patch": "@@ -1,8 +1,8 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Bugs</title><meta name=\"generator\" content=\"DocBook XSL-NS Stylesheets V1.78.1\" /><meta name=\"keywords\" content=\"ISO C++, library\" /><meta name=\"keywords\" content=\"ISO C++, runtime, library\" /><link rel=\"home\" href=\"../index.html\" title=\"The GNU C++ Library\" /><link rel=\"up\" href=\"status.html\" title=\"Chapter\u00a01.\u00a0Status\" /><link rel=\"prev\" href=\"license.html\" title=\"License\" /><link rel=\"next\" href=\"setup.html\" title=\"Chapter\u00a02.\u00a0Setup\" /></head><body><div class=\"navheader\"><table width=\"100%\" summary=\"Navigation header\"><tr><th colspan=\"3\" align=\"center\">Bugs</th></tr><tr><td width=\"20%\" align=\"left\"><a accesskey=\"p\" href=\"license.html\">Prev</a>\u00a0</td><th width=\"60%\" align=\"center\">Chapter\u00a01.\u00a0Status</th><td width=\"20%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"setup.html\">Next</a></td></tr></table><hr /></div><div class=\"section\"><div class=\"titlepage\"><div><div><h2 class=\"title\" style=\"clear: both\"><a id=\"manual.intro.status.bugs\"></a>Bugs</h2></div></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.status.bugs.impl\"></a>Implementation Bugs</h3></div></div></div><p>\n       Information on known bugs, details on efforts to fix them, and\n-      fixed bugs are all available as part of the <a class=\"link\" href=\"http://gcc.gnu.org/bugs/\" target=\"_top\">GCC bug tracking system</a>,\n-      with the category set to <code class=\"literal\">libstdc++</code>.\n+      fixed bugs are all available as part of the <a class=\"link\" href=\"https://gcc.gnu.org/bugs/\" target=\"_top\">GCC bug tracking system</a>,\n+      under the component <span class=\"quote\">\u201c<span class=\"quote\">libstdc++</span>\u201d</span>.\n     </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.status.bugs.iso\"></a>Standard Bugs</h3></div></div></div><p>\n \tEverybody's got issues.  Even the C++ Standard Library.\n       </p><p>\n@@ -12,259 +12,261 @@\n \ta consensus on proposed solutions, we often incorporate the solution.\n       </p><p>\n \tHere are the issues which have resulted in code changes to the library.\n-\tThe links are to the specific defect reports from a <span class=\"emphasis\"><em>partial\n-\tcopy</em></span> of the Issues List.  You can read the full version online\n+\tThe links are to the full version of the Issues List.\n+        You can read the full version online\n \tat the <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/\" target=\"_top\">ISO C++\n \tCommittee homepage</a>.\n       </p><p>\n \tIf a DR is not listed here, we may simply not have gotten to\n-\tit yet; feel free to submit a patch.  Search the include/bits\n-\tand src directories for appearances of\n+\tit yet; feel free to submit a patch.  Search the\n+        <code class=\"filename\">include</code> and\n+        <code class=\"filename\">src</code>\n+\tdirectories for appearances of\n \t<code class=\"constant\">_GLIBCXX_RESOLVE_LIB_DEFECTS</code> for examples\n \tof style.  Note that we usually do not make changes to the\n \tcode until an issue has reached <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\" target=\"_top\">DR</a> status.\n-      </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#5\" target=\"_top\">5</a>:\n+      </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><a id=\"manual.bugs.dr5\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#5\" target=\"_top\">5</a>:\n \t<span class=\"emphasis\"><em>string::compare specification questionable</em></span>\n     </span></dt><dd><p>This should be two overloaded functions rather than a single function.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#17\" target=\"_top\">17</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr17\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#17\" target=\"_top\">17</a>:\n \t<span class=\"emphasis\"><em>Bad bool parsing</em></span>\n     </span></dt><dd><p>Apparently extracting Boolean values was messed up...\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#19\" target=\"_top\">19</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr19\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#19\" target=\"_top\">19</a>:\n \t<span class=\"emphasis\"><em>\"Noconv\" definition too vague</em></span>\n     </span></dt><dd><p>If <code class=\"code\">codecvt::do_in</code> returns <code class=\"code\">noconv</code> there are\n \tno changes to the values in <code class=\"code\">[to, to_limit)</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#22\" target=\"_top\">22</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr22\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#22\" target=\"_top\">22</a>:\n \t<span class=\"emphasis\"><em>Member open vs flags</em></span>\n     </span></dt><dd><p>Re-opening a file stream does <span class=\"emphasis\"><em>not</em></span> clear the state flags.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#23\" target=\"_top\">23</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr23\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#23\" target=\"_top\">23</a>:\n \t<span class=\"emphasis\"><em>Num_get overflow result</em></span>\n     </span></dt><dd><p>Implement the proposed resolution.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#25\" target=\"_top\">25</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr25\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#25\" target=\"_top\">25</a>:\n \t<span class=\"emphasis\"><em>String operator&lt;&lt; uses width() value wrong</em></span>\n     </span></dt><dd><p>Padding issues.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#48\" target=\"_top\">48</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr48\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#48\" target=\"_top\">48</a>:\n \t<span class=\"emphasis\"><em>Use of non-existent exception constructor</em></span>\n     </span></dt><dd><p>An instance of <code class=\"code\">ios_base::failure</code> is constructed instead.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#49\" target=\"_top\">49</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr49\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#49\" target=\"_top\">49</a>:\n \t<span class=\"emphasis\"><em>Underspecification of ios_base::sync_with_stdio</em></span>\n     </span></dt><dd><p>The return type is the <span class=\"emphasis\"><em>previous</em></span> state of synchronization.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#50\" target=\"_top\">50</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr50\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#50\" target=\"_top\">50</a>:\n \t<span class=\"emphasis\"><em>Copy constructor and assignment operator of ios_base</em></span>\n     </span></dt><dd><p>These members functions are declared <code class=\"code\">private</code> and are\n \tthus inaccessible.  Specifying the correct semantics of\n \t\"copying stream state\" was deemed too complicated.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#60\" target=\"_top\">60</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr60\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#60\" target=\"_top\">60</a>:\n \t<span class=\"emphasis\"><em>What is a formatted input function?</em></span>\n     </span></dt><dd><p>This DR made many widespread changes to <code class=\"code\">basic_istream</code>\n \tand <code class=\"code\">basic_ostream</code> all of which have been implemented.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#63\" target=\"_top\">63</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr63\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#63\" target=\"_top\">63</a>:\n \t<span class=\"emphasis\"><em>Exception-handling policy for unformatted output</em></span>\n     </span></dt><dd><p>Make the policy consistent with that of formatted input, unformatted\n \tinput, and formatted output.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#68\" target=\"_top\">68</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr68\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#68\" target=\"_top\">68</a>:\n \t<span class=\"emphasis\"><em>Extractors for char* should store null at end</em></span>\n     </span></dt><dd><p>And they do now.  An editing glitch in the last item in the list of\n \t[27.6.1.2.3]/7.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#74\" target=\"_top\">74</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr74\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#74\" target=\"_top\">74</a>:\n \t<span class=\"emphasis\"><em>Garbled text for codecvt::do_max_length</em></span>\n     </span></dt><dd><p>The text of the standard was gibberish.  Typos gone rampant.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#75\" target=\"_top\">75</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr75\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#75\" target=\"_top\">75</a>:\n \t<span class=\"emphasis\"><em>Contradiction in codecvt::length's argument types</em></span>\n     </span></dt><dd><p>Change the first parameter to <code class=\"code\">stateT&amp;</code> and implement\n \tthe new effects paragraph.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#83\" target=\"_top\">83</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr83\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#83\" target=\"_top\">83</a>:\n \t<span class=\"emphasis\"><em>string::npos vs. string::max_size()</em></span>\n     </span></dt><dd><p>Safety checks on the size of the string should test against\n \t<code class=\"code\">max_size()</code> rather than <code class=\"code\">npos</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#90\" target=\"_top\">90</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr90\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#90\" target=\"_top\">90</a>:\n \t<span class=\"emphasis\"><em>Incorrect description of operator&gt;&gt; for strings</em></span>\n     </span></dt><dd><p>The effect contain <code class=\"code\">isspace(c,getloc())</code> which must be\n \treplaced by <code class=\"code\">isspace(c,is.getloc())</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#91\" target=\"_top\">91</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr91\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#91\" target=\"_top\">91</a>:\n \t<span class=\"emphasis\"><em>Description of operator&gt;&gt; and getline() for string&lt;&gt;\n \t    might cause endless loop</em></span>\n     </span></dt><dd><p>They behave as a formatted input function and as an unformatted\n \tinput function, respectively (except that <code class=\"code\">getline</code> is\n \tnot required to set <code class=\"code\">gcount</code>).\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#103\" target=\"_top\">103</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr103\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#103\" target=\"_top\">103</a>:\n \t<span class=\"emphasis\"><em>set::iterator is required to be modifiable, but this allows\n \t    modification of keys.</em></span>\n     </span></dt><dd><p>For associative containers where the value type is the same as\n \tthe key type, both <code class=\"code\">iterator</code> and <code class=\"code\">const_iterator\n \t</code> are constant iterators.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#109\" target=\"_top\">109</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr109\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#109\" target=\"_top\">109</a>:\n \t<span class=\"emphasis\"><em>Missing binders for non-const sequence elements</em></span>\n     </span></dt><dd><p>The <code class=\"code\">binder1st</code> and <code class=\"code\">binder2nd</code> didn't have an\n \t<code class=\"code\">operator()</code> taking a non-const parameter.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#110\" target=\"_top\">110</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr110\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#110\" target=\"_top\">110</a>:\n \t<span class=\"emphasis\"><em>istreambuf_iterator::equal not const</em></span>\n     </span></dt><dd><p>This was not a const member function.  Note that the DR says to\n \treplace the function with a const one; we have instead provided an\n \toverloaded version with identical contents.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#117\" target=\"_top\">117</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr117\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#117\" target=\"_top\">117</a>:\n \t<span class=\"emphasis\"><em>basic_ostream uses nonexistent num_put member functions</em></span>\n     </span></dt><dd><p><code class=\"code\">num_put::put()</code> was overloaded on the wrong types.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#118\" target=\"_top\">118</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr118\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#118\" target=\"_top\">118</a>:\n \t<span class=\"emphasis\"><em>basic_istream uses nonexistent num_get member functions</em></span>\n     </span></dt><dd><p>Same as 117, but for <code class=\"code\">num_get::get()</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#129\" target=\"_top\">129</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr129\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#129\" target=\"_top\">129</a>:\n \t<span class=\"emphasis\"><em>Need error indication from seekp() and seekg()</em></span>\n     </span></dt><dd><p>These functions set <code class=\"code\">failbit</code> on error now.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#130\" target=\"_top\">130</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr130\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#130\" target=\"_top\">130</a>:\n \t<span class=\"emphasis\"><em>Return type of container::erase(iterator) differs for associative containers</em></span>\n     </span></dt><dd><p>Make member <code class=\"code\">erase</code> return iterator for <code class=\"code\">set</code>, <code class=\"code\">multiset</code>, <code class=\"code\">map</code>, <code class=\"code\">multimap</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#136\" target=\"_top\">136</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr136\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#136\" target=\"_top\">136</a>:\n \t<span class=\"emphasis\"><em>seekp, seekg setting wrong streams?</em></span>\n     </span></dt><dd><p><code class=\"code\">seekp</code> should only set the output stream, and\n \t<code class=\"code\">seekg</code> should only set the input stream.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#167\" target=\"_top\">167</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr167\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#167\" target=\"_top\">167</a>:\n \t<span class=\"emphasis\"><em>Improper use of traits_type::length()</em></span>\n     </span></dt><dd><p><code class=\"code\">op&lt;&lt;</code> with a <code class=\"code\">const char*</code> was\n \tcalculating an incorrect number of characters to write.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#169\" target=\"_top\">169</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr169\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#169\" target=\"_top\">169</a>:\n \t<span class=\"emphasis\"><em>Bad efficiency of overflow() mandated</em></span>\n     </span></dt><dd><p>Grow efficiently the internal array object.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#171\" target=\"_top\">171</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr171\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#171\" target=\"_top\">171</a>:\n \t<span class=\"emphasis\"><em>Strange seekpos() semantics due to joint position</em></span>\n     </span></dt><dd><p>Quite complex to summarize...\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#181\" target=\"_top\">181</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr181\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#181\" target=\"_top\">181</a>:\n \t<span class=\"emphasis\"><em>make_pair() unintended behavior</em></span>\n     </span></dt><dd><p>This function used to take its arguments as reference-to-const, now\n \tit copies them (pass by value).\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#195\" target=\"_top\">195</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr195\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#195\" target=\"_top\">195</a>:\n \t<span class=\"emphasis\"><em>Should basic_istream::sentry's constructor ever set eofbit?</em></span>\n     </span></dt><dd><p>Yes, it can, specifically if EOF is reached while skipping whitespace.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#211\" target=\"_top\">211</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr211\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#211\" target=\"_top\">211</a>:\n \t<span class=\"emphasis\"><em>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</em></span>\n     </span></dt><dd><p>If nothing is extracted into the string, <code class=\"code\">op&gt;&gt;</code> now\n \tsets <code class=\"code\">failbit</code> (which can cause an exception, etc., etc.).\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#214\" target=\"_top\">214</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr214\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#214\" target=\"_top\">214</a>:\n \t<span class=\"emphasis\"><em>set::find() missing const overload</em></span>\n     </span></dt><dd><p>Both <code class=\"code\">set</code> and <code class=\"code\">multiset</code> were missing\n \toverloaded find, lower_bound, upper_bound, and equal_range functions\n \tfor const instances.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#231\" target=\"_top\">231</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr231\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#231\" target=\"_top\">231</a>:\n \t<span class=\"emphasis\"><em>Precision in iostream?</em></span>\n     </span></dt><dd><p>For conversion from a floating-point type, <code class=\"code\">str.precision()</code>\n \tis specified in the conversion specification.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#233\" target=\"_top\">233</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr233\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#233\" target=\"_top\">233</a>:\n \t<span class=\"emphasis\"><em>Insertion hints in associative containers</em></span>\n     </span></dt><dd><p>Implement N1780, first check before then check after, insert as close\n \tto hint as possible.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#235\" target=\"_top\">235</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr235\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#235\" target=\"_top\">235</a>:\n \t<span class=\"emphasis\"><em>No specification of default ctor for reverse_iterator</em></span>\n     </span></dt><dd><p>The declaration of <code class=\"code\">reverse_iterator</code> lists a default constructor.\n \tHowever, no specification is given what this constructor should do.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#241\" target=\"_top\">241</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr241\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#241\" target=\"_top\">241</a>:\n \t<span class=\"emphasis\"><em>Does unique_copy() require CopyConstructible and Assignable?</em></span>\n     </span></dt><dd><p>Add a helper for forward_iterator/output_iterator, fix the existing\n \tone for input_iterator/output_iterator to not rely on Assignability.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#243\" target=\"_top\">243</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr243\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#243\" target=\"_top\">243</a>:\n \t<span class=\"emphasis\"><em>get and getline when sentry reports failure</em></span>\n     </span></dt><dd><p>Store a null character only if the character array has a non-zero size.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#251\" target=\"_top\">251</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr251\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#251\" target=\"_top\">251</a>:\n \t<span class=\"emphasis\"><em>basic_stringbuf missing allocator_type</em></span>\n     </span></dt><dd><p>This nested typedef was originally not specified.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#253\" target=\"_top\">253</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr253\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#253\" target=\"_top\">253</a>:\n \t<span class=\"emphasis\"><em>valarray helper functions are almost entirely useless</em></span>\n     </span></dt><dd><p>Make the copy constructor and copy-assignment operator declarations\n \tpublic in gslice_array, indirect_array, mask_array, slice_array; provide\n \tdefinitions.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#265\" target=\"_top\">265</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr265\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#265\" target=\"_top\">265</a>:\n \t<span class=\"emphasis\"><em>std::pair::pair() effects overly restrictive</em></span>\n     </span></dt><dd><p>The default ctor would build its members from copies of temporaries;\n \tnow it simply uses their respective default ctors.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#266\" target=\"_top\">266</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr266\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#266\" target=\"_top\">266</a>:\n \t<span class=\"emphasis\"><em>bad_exception::~bad_exception() missing Effects clause</em></span>\n     </span></dt><dd><p>The <code class=\"code\">bad_</code>* classes no longer have destructors (they\n \tare trivial), since no description of them was ever given.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#271\" target=\"_top\">271</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr271\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#271\" target=\"_top\">271</a>:\n \t<span class=\"emphasis\"><em>basic_iostream missing typedefs</em></span>\n     </span></dt><dd><p>The typedefs it inherits from its base classes can't be used, since\n \t(for example) <code class=\"code\">basic_iostream&lt;T&gt;::traits_type</code> is ambiguous.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#275\" target=\"_top\">275</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr275\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#275\" target=\"_top\">275</a>:\n \t<span class=\"emphasis\"><em>Wrong type in num_get::get() overloads</em></span>\n     </span></dt><dd><p>Similar to 118.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#280\" target=\"_top\">280</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr280\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#280\" target=\"_top\">280</a>:\n \t<span class=\"emphasis\"><em>Comparison of reverse_iterator to const reverse_iterator</em></span>\n     </span></dt><dd><p>Add global functions with two template parameters.\n \t(NB: not added for now a templated assignment operator)\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#292\" target=\"_top\">292</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr292\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#292\" target=\"_top\">292</a>:\n \t<span class=\"emphasis\"><em>Effects of a.copyfmt (a)</em></span>\n     </span></dt><dd><p>If <code class=\"code\">(this == &amp;rhs)</code> do nothing.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#300\" target=\"_top\">300</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr300\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#300\" target=\"_top\">300</a>:\n \t<span class=\"emphasis\"><em>List::merge() specification incomplete</em></span>\n     </span></dt><dd><p>If <code class=\"code\">(this == &amp;x)</code> do nothing.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#303\" target=\"_top\">303</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr303\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#303\" target=\"_top\">303</a>:\n \t<span class=\"emphasis\"><em>Bitset input operator underspecified</em></span>\n     </span></dt><dd><p>Basically, compare the input character to\n \t\t    <code class=\"code\">is.widen(0)</code> and <code class=\"code\">is.widen(1)</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#305\" target=\"_top\">305</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr305\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#305\" target=\"_top\">305</a>:\n \t<span class=\"emphasis\"><em>Default behavior of codecvt&lt;wchar_t, char,\n \t\t  mbstate_t&gt;::length()</em></span>\n     </span></dt><dd><p>Do not specify what <code class=\"code\">codecvt&lt;wchar_t, char,\n \t\t    mbstate_t&gt;::do_length</code> must return.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#328\" target=\"_top\">328</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr328\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#328\" target=\"_top\">328</a>:\n \t<span class=\"emphasis\"><em>Bad sprintf format modifier in\n \t\t  money_put&lt;&gt;::do_put()</em></span>\n     </span></dt><dd><p>Change the format string to \"%.0Lf\".\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#365\" target=\"_top\">365</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr365\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#365\" target=\"_top\">365</a>:\n \t<span class=\"emphasis\"><em>Lack of const-qualification in clause 27</em></span>\n     </span></dt><dd><p>Add const overloads of <code class=\"code\">is_open</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#387\" target=\"_top\">387</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr387\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#387\" target=\"_top\">387</a>:\n \t<span class=\"emphasis\"><em>std::complex over-encapsulated</em></span>\n     </span></dt><dd><p>Add the <code class=\"code\">real(T)</code> and <code class=\"code\">imag(T)</code>\n \t\t    members;  in C++11 mode, also adjust the existing\n \t\t    <code class=\"code\">real()</code> and <code class=\"code\">imag()</code> members and\n \t\t    free functions.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#389\" target=\"_top\">389</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr389\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#389\" target=\"_top\">389</a>:\n \t<span class=\"emphasis\"><em>Const overload of valarray::operator[] returns\n \t\t  by value</em></span>\n     </span></dt><dd><p>Change it to return a <code class=\"code\">const T&amp;</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#396\" target=\"_top\">396</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr396\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#396\" target=\"_top\">396</a>:\n \t<span class=\"emphasis\"><em>what are characters zero and one</em></span>\n     </span></dt><dd><p>Implement the proposed resolution.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#402\" target=\"_top\">402</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr402\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#402\" target=\"_top\">402</a>:\n \t<span class=\"emphasis\"><em>Wrong new expression in [some_]allocator::construct</em></span>\n     </span></dt><dd><p>Replace \"new\" with \"::new\".\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#408\" target=\"_top\">408</a>:\n \t<span class=\"emphasis\"><em>\n \tIs vector&lt;reverse_iterator&lt;char*&gt; &gt; forbidden?\n \t</em></span>\n     </span></dt><dd><p>Tweak the debug-mode checks in _Safe_iterator.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#409\" target=\"_top\">409</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr409\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#409\" target=\"_top\">409</a>:\n \t<span class=\"emphasis\"><em>Closing an fstream should clear the error state</em></span>\n     </span></dt><dd><p>Have <code class=\"code\">open</code> clear the error flags.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#431\" target=\"_top\">431</a>:\n \t<span class=\"emphasis\"><em>Swapping containers with unequal allocators</em></span>\n     </span></dt><dd><p>Implement Option 3, as per N1599.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#432\" target=\"_top\">432</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr432\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#432\" target=\"_top\">432</a>:\n \t<span class=\"emphasis\"><em>stringbuf::overflow() makes only one write position\n \t    available</em></span>\n     </span></dt><dd><p>Implement the resolution, beyond DR 169.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#434\" target=\"_top\">434</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr434\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#434\" target=\"_top\">434</a>:\n \t<span class=\"emphasis\"><em>bitset::to_string() hard to use</em></span>\n     </span></dt><dd><p>Add three overloads, taking fewer template arguments.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#438\" target=\"_top\">438</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr438\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#438\" target=\"_top\">438</a>:\n \t<span class=\"emphasis\"><em>Ambiguity in the \"do the right thing\" clause</em></span>\n     </span></dt><dd><p>Implement the resolution, basically cast less.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#445\" target=\"_top\">445</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr445\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#445\" target=\"_top\">445</a>:\n \t<span class=\"emphasis\"><em>iterator_traits::reference unspecified for some iterator categories</em></span>\n     </span></dt><dd><p>Change <code class=\"code\">istreambuf_iterator::reference</code> in C++11 mode.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#453\" target=\"_top\">453</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr453\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#453\" target=\"_top\">453</a>:\n \t<span class=\"emphasis\"><em>basic_stringbuf::seekoff need not always fail for an empty stream</em></span>\n     </span></dt><dd><p>Don't fail if the next pointer is null and newoff is zero.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#455\" target=\"_top\">455</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr455\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#455\" target=\"_top\">455</a>:\n \t<span class=\"emphasis\"><em>cerr::tie() and wcerr::tie() are overspecified</em></span>\n     </span></dt><dd><p>Initialize cerr tied to cout and wcerr tied to wcout.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#464\" target=\"_top\">464</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr464\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#464\" target=\"_top\">464</a>:\n \t<span class=\"emphasis\"><em>Suggestion for new member functions in standard containers</em></span>\n     </span></dt><dd><p>Add <code class=\"code\">data()</code> to <code class=\"code\">std::vector</code> and\n \t<code class=\"code\">at(const key_type&amp;)</code> to <code class=\"code\">std::map</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#467\" target=\"_top\">467</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr467\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#467\" target=\"_top\">467</a>:\n \t<span class=\"emphasis\"><em>char_traits::lt(), compare(), and memcmp()</em></span>\n     </span></dt><dd><p>Change <code class=\"code\">lt</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#508\" target=\"_top\">508</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr508\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#508\" target=\"_top\">508</a>:\n \t<span class=\"emphasis\"><em>Bad parameters for ranlux64_base_01</em></span>\n     </span></dt><dd><p>Fix the parameters.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#512\" target=\"_top\">512</a>:\n@@ -274,246 +276,246 @@\n \t<span class=\"emphasis\"><em>Is it undefined if a function in the standard changes in\n \t    parameters?</em></span>\n     </span></dt><dd><p>Use &amp;value.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#538\" target=\"_top\">538</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr538\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#538\" target=\"_top\">538</a>:\n \t<span class=\"emphasis\"><em>241 again: Does unique_copy() require CopyConstructible\n \t    and Assignable?</em></span>\n     </span></dt><dd><p>In case of input_iterator/output_iterator rely on Assignability of\n \tinput_iterator' value_type.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#539\" target=\"_top\">539</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr539\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#539\" target=\"_top\">539</a>:\n \t<span class=\"emphasis\"><em>partial_sum and adjacent_difference should mention\n \t    requirements</em></span>\n     </span></dt><dd><p>We were almost doing the right thing, just use std::move\n \tin adjacent_difference.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#541\" target=\"_top\">541</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr541\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#541\" target=\"_top\">541</a>:\n \t<span class=\"emphasis\"><em>shared_ptr template assignment and void</em></span>\n     </span></dt><dd><p>Add an auto_ptr&lt;void&gt; specialization.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#543\" target=\"_top\">543</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr543\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#543\" target=\"_top\">543</a>:\n \t<span class=\"emphasis\"><em>valarray slice default constructor</em></span>\n     </span></dt><dd><p>Follow the straightforward proposed resolution.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#550\" target=\"_top\">550</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr550\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#550\" target=\"_top\">550</a>:\n \t<span class=\"emphasis\"><em>What should the return type of pow(float,int) be?</em></span>\n     </span></dt><dd><p>In C++11 mode, remove the pow(float,int), etc., signatures.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#586\" target=\"_top\">586</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr586\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#586\" target=\"_top\">586</a>:\n \t<span class=\"emphasis\"><em>string inserter not a formatted function</em></span>\n     </span></dt><dd><p>Change it to be a formatted output function (i.e. catch exceptions).\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#596\" target=\"_top\">596</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr596\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#596\" target=\"_top\">596</a>:\n \t<span class=\"emphasis\"><em>27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes</em></span>\n     </span></dt><dd><p>Add the missing modes to fopen_mode.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#630\" target=\"_top\">630</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr630\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#630\" target=\"_top\">630</a>:\n \t<span class=\"emphasis\"><em>arrays of valarray</em></span>\n     </span></dt><dd><p>Implement the simple resolution.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#660\" target=\"_top\">660</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr660\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#660\" target=\"_top\">660</a>:\n \t<span class=\"emphasis\"><em>Missing bitwise operations</em></span>\n     </span></dt><dd><p>Add the missing operations.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#691\" target=\"_top\">691</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr691\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#691\" target=\"_top\">691</a>:\n \t<span class=\"emphasis\"><em>const_local_iterator cbegin, cend missing from TR1</em></span>\n     </span></dt><dd><p>In C++11 mode add cbegin(size_type) and cend(size_type)\n \t\t    to the unordered containers.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#693\" target=\"_top\">693</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr693\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#693\" target=\"_top\">693</a>:\n \t<span class=\"emphasis\"><em>std::bitset::all() missing</em></span>\n     </span></dt><dd><p>Add it, consistently with the discussion.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#695\" target=\"_top\">695</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr695\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#695\" target=\"_top\">695</a>:\n \t<span class=\"emphasis\"><em>ctype&lt;char&gt;::classic_table() not accessible</em></span>\n     </span></dt><dd><p>Make the member functions table and classic_table public.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#696\" target=\"_top\">696</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr696\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#696\" target=\"_top\">696</a>:\n \t<span class=\"emphasis\"><em>istream::operator&gt;&gt;(int&amp;) broken</em></span>\n     </span></dt><dd><p>Implement the straightforward resolution.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#761\" target=\"_top\">761</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr761\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#761\" target=\"_top\">761</a>:\n \t<span class=\"emphasis\"><em>unordered_map needs an at() member function</em></span>\n     </span></dt><dd><p>In C++11 mode, add at() and at() const.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#775\" target=\"_top\">775</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr775\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#775\" target=\"_top\">775</a>:\n \t<span class=\"emphasis\"><em>Tuple indexing should be unsigned?</em></span>\n     </span></dt><dd><p>Implement the int -&gt; size_t replacements.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#776\" target=\"_top\">776</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr776\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#776\" target=\"_top\">776</a>:\n \t<span class=\"emphasis\"><em>Undescribed assign function of std::array</em></span>\n     </span></dt><dd><p>In C++11 mode, remove assign, add fill.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#781\" target=\"_top\">781</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr781\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#781\" target=\"_top\">781</a>:\n \t<span class=\"emphasis\"><em>std::complex should add missing C99 functions</em></span>\n     </span></dt><dd><p>In C++11 mode, add std::proj.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#809\" target=\"_top\">809</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr809\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#809\" target=\"_top\">809</a>:\n \t<span class=\"emphasis\"><em>std::swap should be overloaded for array types</em></span>\n     </span></dt><dd><p>Add the overload.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#853\" target=\"_top\">853</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr853\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#853\" target=\"_top\">853</a>:\n \t<span class=\"emphasis\"><em>to_string needs updating with zero and one</em></span>\n     </span></dt><dd><p>Update / add the signatures.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#865\" target=\"_top\">865</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr865\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#865\" target=\"_top\">865</a>:\n \t<span class=\"emphasis\"><em>More algorithms that throw away information</em></span>\n     </span></dt><dd><p>The traditional HP / SGI return type and value is blessed\n \t\t    by the resolution of the DR.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1339\" target=\"_top\">1339</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr1339\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1339\" target=\"_top\">1339</a>:\n        <span class=\"emphasis\"><em>uninitialized_fill_n should return the end of its range</em></span>\n     </span></dt><dd><p>Return the end of the filled range.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2021\" target=\"_top\">2021</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2021\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2021\" target=\"_top\">2021</a>:\n        <span class=\"emphasis\"><em>Further incorrect uses of <code class=\"code\">result_of</code></em></span>\n     </span></dt><dd><p>Correctly decay types in signature of <code class=\"code\">std::async</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2049\" target=\"_top\">2049</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2049\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2049\" target=\"_top\">2049</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">is_destructible</code> underspecified</em></span>\n     </span></dt><dd><p>Handle non-object types.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2056\" target=\"_top\">2056</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2056\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2056\" target=\"_top\">2056</a>:\n \t<span class=\"emphasis\"><em>future_errc enums start with value 0 (invalid value for broken_promise)</em></span>\n     </span></dt><dd><p>Reorder enumerators.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2059\" target=\"_top\">2059</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2059\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2059\" target=\"_top\">2059</a>:\n \t<span class=\"emphasis\"><em>C++0x ambiguity problem with map::erase</em></span>\n     </span></dt><dd><p>Add additional overloads.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2062\" target=\"_top\">2062</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2062\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2062\" target=\"_top\">2062</a>:\n \t<span class=\"emphasis\"><em>2062. Effect contradictions w/o no-throw guarantee of <code class=\"code\">std::function</code> swaps</em></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code> to swap functions.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2063\" target=\"_top\">2063</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2063\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2063\" target=\"_top\">2063</a>:\n \t<span class=\"emphasis\"><em>Contradictory requirements for string move assignment</em></span>\n     </span></dt><dd><p>Respect propagation trait for move assignment.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2064\" target=\"_top\">2064</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2064\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2064\" target=\"_top\">2064</a>:\n \t<span class=\"emphasis\"><em>More noexcept issues in basic_string</em></span>\n     </span></dt><dd><p>Add noexcept to the comparison operators.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2067\" target=\"_top\">2067</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2067\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2067\" target=\"_top\">2067</a>:\n \t<span class=\"emphasis\"><em>packaged_task should have deleted copy c'tor with const parameter</em></span>\n     </span></dt><dd><p>Fix signatures.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2101\" target=\"_top\">2101</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2101\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2101\" target=\"_top\">2101</a>:\n \t<span class=\"emphasis\"><em>Some transformation types can produce impossible types</em></span>\n     </span></dt><dd><p>Use the referenceable type concept.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2106\" target=\"_top\">2106</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2106\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2106\" target=\"_top\">2106</a>:\n \t<span class=\"emphasis\"><em>move_iterator wrapping iterators returning prvalues</em></span>\n     </span></dt><dd><p>Change the <code class=\"code\">reference</code> type.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2108\" target=\"_top\">2108</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2108\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2108\" target=\"_top\">2108</a>:\n \t<span class=\"emphasis\"><em>No way to identify allocator types that always compare equal</em></span>\n     </span></dt><dd><p>Define and use <code class=\"code\">is_always_equal</code> even for C++11.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2118\" target=\"_top\">2118</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2118\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2118\" target=\"_top\">2118</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">unique_ptr</code> for array does not support cv qualification conversion of actual argument</em></span>\n     </span></dt><dd><p>Adjust constraints to allow safe conversions.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2127\" target=\"_top\">2127</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2127\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2127\" target=\"_top\">2127</a>:\n \t<span class=\"emphasis\"><em>Move-construction with <code class=\"code\">raw_storage_iterator</code></em></span>\n     </span></dt><dd><p>Add assignment operator taking an rvalue.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2132\" target=\"_top\">2132</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2132\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2132\" target=\"_top\">2132</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">std::function</code> ambiguity</em></span>\n     </span></dt><dd><p>Constrain the constructor to only accept callable types.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2141\" target=\"_top\">2141</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2141\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2141\" target=\"_top\">2141</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">common_type</code> trait produces reference types</em></span>\n     </span></dt><dd><p>Use <code class=\"code\">decay</code> for the result type.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2144\" target=\"_top\">2144</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2144\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2144\" target=\"_top\">2144</a>:\n \t<span class=\"emphasis\"><em>Missing <code class=\"code\">noexcept</code> specification in <code class=\"code\">type_index</code></em></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code>\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2145\" target=\"_top\">2145</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2145\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2145\" target=\"_top\">2145</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">error_category</code> default constructor</em></span>\n     </span></dt><dd><p>Declare a public constexpr constructor.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2162\" target=\"_top\">2162</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2162\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2162\" target=\"_top\">2162</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">allocator_traits::max_size</code> missing <code class=\"code\">noexcept</code></em></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2187\" target=\"_top\">2187</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2187\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2187\" target=\"_top\">2187</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">vector&lt;bool&gt;</code> is missing <code class=\"code\">emplace</code> and <code class=\"code\">emplace_back</code> member functions</em></span>\n     </span></dt><dd><p>Add <code class=\"code\">emplace</code> and <code class=\"code\">emplace_back</code> member functions.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2192\" target=\"_top\">2192</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2192\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2192\" target=\"_top\">2192</a>:\n \t<span class=\"emphasis\"><em>Validity and return type of <code class=\"code\">std::abs(0u)</code> is unclear</em></span>\n     </span></dt><dd><p>Move all declarations to a common header and remove the\n     generic <code class=\"code\">abs</code> which accepted unsigned arguments.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2196\" target=\"_top\">2196</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2196\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2196\" target=\"_top\">2196</a>:\n \t<span class=\"emphasis\"><em>Specification of <code class=\"code\">is_*[copy/move]_[constructible/assignable]</code> unclear for non-referencable types</em></span>\n     </span></dt><dd><p>Use the referenceable type concept.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2212\" target=\"_top\">2212</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2212\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2212\" target=\"_top\">2212</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">tuple_size</code> for <code class=\"code\">const pair</code> request <code class=\"code\">&lt;tuple&gt;</code> header</em></span>\n     </span></dt><dd><p>The <code class=\"code\">tuple_size</code> and <code class=\"code\">tuple_element</code>\n     partial specializations are defined in <code class=\"code\">&lt;utility&gt;</code> which\n     is included by <code class=\"code\">&lt;array&gt;</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2296\" target=\"_top\">2296</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2296\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2296\" target=\"_top\">2296</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">std::addressof</code> should be constexpr</em></span>\n     </span></dt><dd><p>Use <code class=\"code\">__builtin_addressof</code> and add\n     <code class=\"code\">constexpr</code> to <code class=\"code\">addressof</code> for C++17 and later.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2313\" target=\"_top\">2313</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2313\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2313\" target=\"_top\">2313</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">tuple_size</code> should always derive from <code class=\"code\">integral_constant&lt;size_t, N&gt;</code></em></span>\n     </span></dt><dd><p>Update definitions of the partial specializations for const and volatile types.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2328\" target=\"_top\">2328</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2328\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2328\" target=\"_top\">2328</a>:\n        <span class=\"emphasis\"><em>Rvalue stream extraction should use perfect forwarding</em></span>\n     </span></dt><dd><p>Use perfect forwarding for right operand.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2329\" target=\"_top\">2329</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2329\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2329\" target=\"_top\">2329</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">regex_match()/regex_search()</code> with <code class=\"code\">match_results</code> should forbid temporary strings</em></span>\n     </span></dt><dd><p>Add deleted overloads for rvalue strings.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2332\" target=\"_top\">2332</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2332\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2332\" target=\"_top\">2332</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">regex_iterator/regex_token_iterator</code> should forbid temporary regexes</em></span>\n     </span></dt><dd><p>Add deleted constructors.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2399\" target=\"_top\">2399</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2399\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2399\" target=\"_top\">2399</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">shared_ptr</code>'s constructor from <code class=\"code\">unique_ptr</code> should be constrained</em></span>\n     </span></dt><dd><p>Constrain the constructor to require convertibility.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2400\" target=\"_top\">2400</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2400\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2400\" target=\"_top\">2400</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">shared_ptr</code>'s <code class=\"code\">get_deleter()</code> should use <code class=\"code\">addressof()</code></em></span>\n     </span></dt><dd><p>Use <code class=\"code\">addressof</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2401\" target=\"_top\">2401</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2401\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2401\" target=\"_top\">2401</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">std::function</code> needs more <code class=\"code\">noexcept</code></em></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code> to the assignment and comparisons.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2407\" target=\"_top\">2407</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2407\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2407\" target=\"_top\">2407</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">packaged_task(allocator_arg_t, const Allocator&amp;, F&amp;&amp;)</code>\n                  should neither be constrained nor <code class=\"code\">explicit</code>\n        </em></span>\n     </span></dt><dd><p>Remove <code class=\"code\">explicit</code> from the constructor.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2415\" target=\"_top\">2415</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2415\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2415\" target=\"_top\">2415</a>:\n        <span class=\"emphasis\"><em>Inconsistency between <code class=\"code\">unique_ptr</code> and <code class=\"code\">shared_ptr</code></em></span>\n     </span></dt><dd><p>Create empty an <code class=\"code\">shared_ptr</code> from an empty\n                     <code class=\"code\">unique_ptr</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2418\" target=\"_top\">2418</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2418\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2418\" target=\"_top\">2418</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">apply</code> does not work with member pointers</em></span>\n     </span></dt><dd><p>Use <code class=\"code\">mem_fn</code> for member pointers.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2440\" target=\"_top\">2440</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2440\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2440\" target=\"_top\">2440</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">seed_seq::size()</code> should be <code class=\"code\">noexcept</code></em></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2441\" target=\"_top\">2441</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2441\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2441\" target=\"_top\">2441</a>:\n        <span class=\"emphasis\"><em>Exact-width atomic typedefs should be provided</em></span>\n     </span></dt><dd><p>Define the typedefs.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2442\" target=\"_top\">2442</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2442\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2442\" target=\"_top\">2442</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">call_once()</code> shouldn't <code class=\"code\">DECAY_COPY()</code></em></span>\n     </span></dt><dd><p>Remove indirection through call wrapper that made copies\n     of arguments and forward arguments straight to <code class=\"code\">std::invoke</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2454\" target=\"_top\">2454</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2454\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2454\" target=\"_top\">2454</a>:\n        <span class=\"emphasis\"><em>Add <code class=\"code\">raw_storage_iterator::base()</code> member\n        </em></span>\n     </span></dt><dd><p>Add the <code class=\"code\">base()</code> member function.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2455\" target=\"_top\">2455</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2455\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2455\" target=\"_top\">2455</a>:\n        <span class=\"emphasis\"><em>Allocator default construction should be allowed to throw\n        </em></span>\n     </span></dt><dd><p>Make <code class=\"code\">noexcept</code> specifications conditional.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2458\" target=\"_top\">2458</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2458\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2458\" target=\"_top\">2458</a>:\n        <span class=\"emphasis\"><em>N3778 and new library deallocation signatures\n        </em></span>\n     </span></dt><dd><p>Remove unused overloads.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2459\" target=\"_top\">2459</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2459\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2459\" target=\"_top\">2459</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">std::polar</code> should require a non-negative rho\n        </em></span>\n     </span></dt><dd><p>Add debug mode assertion.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2466\" target=\"_top\">2466</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2466\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2466\" target=\"_top\">2466</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">allocator_traits::max_size()</code> default behavior is incorrect\n        </em></span>\n     </span></dt><dd><p>Divide by the object type.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2484\" target=\"_top\">2484</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2484\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2484\" target=\"_top\">2484</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">rethrow_if_nested()</code>  is doubly unimplementable\n        </em></span>\n     </span></dt><dd><p>Avoid using <code class=\"code\">dynamic_cast</code> when it would be\n     ill-formed.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2583\" target=\"_top\">2583</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2583\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2583\" target=\"_top\">2583</a>:\n        <span class=\"emphasis\"><em>There is no way to supply an allocator for <code class=\"code\">basic_string(str, pos)</code>\n        </em></span>\n     </span></dt><dd><p>Add new constructor\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2684\" target=\"_top\">2684</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2684\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2684\" target=\"_top\">2684</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">priority_queue</code> lacking comparator typedef\n        </em></span>\n     </span></dt><dd><p>Define the <code class=\"code\">value_compare</code> typedef.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2770\" target=\"_top\">2770</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2770\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2770\" target=\"_top\">2770</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">tuple_size&lt;const T&gt;</code> specialization is not\n \t SFINAE compatible and breaks decomposition declarations\n        </em></span>\n     </span></dt><dd><p>Safely detect <code class=\"code\">tuple_size&lt;T&gt;::value</code> and\n       only use it if valid.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2781\" target=\"_top\">2781</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2781\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2781\" target=\"_top\">2781</a>:\n        <span class=\"emphasis\"><em>Contradictory requirements for <code class=\"code\">std::function</code>\n          and <code class=\"code\">std::reference_wrapper</code>\n        </em></span>\n     </span></dt><dd><p>Remove special handling for <code class=\"code\">reference_wrapper</code>\n       arguments and store them directly as the target object.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2802\" target=\"_top\">2802</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2802\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2802\" target=\"_top\">2802</a>:\n        <span class=\"emphasis\"><em>Add noexcept to several <code class=\"code\">shared_ptr</code> related\n          functions\n        </em></span>\n     </span></dt><dd><p>Add noexcept.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2873\" target=\"_top\">2873</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2873\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2873\" target=\"_top\">2873</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">shared_ptr</code> constructor requirements for a deleter\n        </em></span>\n     </span></dt><dd><p>Use rvalues for deleters.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2942\" target=\"_top\">2942</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2942\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2942\" target=\"_top\">2942</a>:\n        <span class=\"emphasis\"><em>LWG 2873's resolution missed\n          <code class=\"code\">weak_ptr::owner_before</code>\n        </em></span>"}, {"sha": "f19a8e82a2c4f1bfa74b5d36230b74b2063193aa", "filename": "libstdc++-v3/doc/html/manual/test.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a28a7531b6a8f759c081bbb1b851e293e410d56/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ftest.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a28a7531b6a8f759c081bbb1b851e293e410d56/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ftest.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ftest.html?ref=6a28a7531b6a8f759c081bbb1b851e293e410d56", "patch": "@@ -327,13 +327,13 @@\n       For example, to run the tests with\n       <code class=\"option\">-O1 -D_GLIBCXX_ASSERTIONS</code>\n       you could use:\n-</p><pre class=\"programlisting\">    make RUNTESTFLAGS=--target_board=unix/-O1/-D_GLIBCXX_ASSERTIONS</pre><p>\n+</p><pre class=\"programlisting\">    make check RUNTESTFLAGS=--target_board=unix/-O1/-D_GLIBCXX_ASSERTIONS</pre><p>\n     </p><p>\n       The <code class=\"option\">--target_board</code> option can also be used to run the\n       tests multiple times in different variations. For example, to run the\n       entire testsuite three times using <code class=\"option\">-O3</code> but with\n       different <code class=\"option\">-std</code> options:\n-</p><pre class=\"programlisting\">    make 'RUNTESTFLAGS=--target_board=unix/-O3\\\"{-std=gnu++98,-std=gnu++11,-std=gnu++14}\\\"'</pre><p>\n+</p><pre class=\"programlisting\">    make check 'RUNTESTFLAGS=--target_board=unix/-O3\\\"{-std=gnu++98,-std=gnu++11,-std=gnu++14}\\\"'</pre><p>\n       N.B. that set of variations could also be written as\n       <code class=\"literal\">unix/-O3\\\"{-std=gnu++98,-std=gnu++11,}\\\"</code> so that\n       the third variation would use the default for <code class=\"option\">-std</code>"}, {"sha": "703ade5b20db210ad2a6545df737e35ecde09d00", "filename": "libstdc++-v3/doc/xml/faq.xml", "status": "modified", "additions": 88, "deletions": 58, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a28a7531b6a8f759c081bbb1b851e293e410d56/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a28a7531b6a8f759c081bbb1b851e293e410d56/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml?ref=6a28a7531b6a8f759c081bbb1b851e293e410d56", "patch": "@@ -66,10 +66,10 @@\n     that are the hallmarks of an open-source project are applied to libstdc++.\n     </para> \n     <para>\n-    All of the standard classes and functions from C++98/C++03\n+    All of the standard classes and functions from C++98/C++03, C++11 and C++14\n     (such as <classname>string</classname>,\n     <classname>vector&lt;&gt;</classname>, iostreams, algorithms etc.)\n-    are freely available and atempt to be fully compliant.\n+    are freely available and attempt to be fully compliant.\n     Work is ongoing to complete support for the current revision of the\n     ISO C++ Standard.\n     </para>\n@@ -539,6 +539,9 @@\n     </para>\n   </question>\n   <answer xml:id=\"a-solaris_long_long\">\n+    <note>\n+       <para>This answer is old and probably no longer be relevant.</para>\n+    </note>\n     <para>\n     By default we try to support the C99 <type>long long</type> type.\n     This requires that certain functions from your C library be present.\n@@ -692,7 +695,7 @@\n <qandaentry xml:id=\"faq.freebsd_wchar\">\n   <question xml:id=\"q-freebsd_wchar\">\n     <para>\n-      Can't use wchar_t/wstring on FreeBSD\n+      Can't use <type>wchar_t</type>/<classname>wstring</classname> on FreeBSD\n     </para>\n   </question>\n   <answer xml:id=\"a-freebsd_wchar\">\n@@ -764,7 +767,8 @@\n     published on <link xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n     xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/\">the WG21\n     website</link>.\n-    Many of these issues have resulted in code changes in libstdc++.\n+    Many of these issues have resulted in\n+    <link linkend=\"manual.intro.status.bugs.iso\">code changes in libstdc++</link>.\n     </para> \n     <para>\n     If you think you've discovered a new bug that is not listed,\n@@ -794,8 +798,8 @@\n     </para> \n     <para> \n     Before reporting a bug, please examine the\n-    <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/bugs/\">bugs database</link> with the\n-    category set to <quote>g++</quote>. \n+    <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://gcc.gnu.org/bugs/\">bugs database</link>, with the\n+    component set to <quote>c++</quote>.\n     </para> \n   </answer>\n </qandaentry>\n@@ -813,8 +817,12 @@\n     </para>\n   </question>\n   <answer xml:id=\"a-stream_reopening_fails\">\n+    <note>\n+      <para>This answer is old and probably no longer be relevant.</para>\n+    </note>\n     <para>\n-    One of the most-reported non-bug reports. Executing a sequence like:\n+    Prior to GCC 4.0 this was one of the most-reported non-bug reports.\n+    Executing a sequence like this would fail:\n     </para>\n \n     <programlisting>\n@@ -829,19 +837,20 @@\n     </programlisting>\n     \n     <para>\n-    All operations on the re-opened <varname>fs</varname> will fail, or at\n-    least act very strangely.  Yes, they often will, especially if\n-    <varname>fs</varname> reached the EOF state on the previous file.  The\n-    reason is that the state flags are <emphasis>not</emphasis> cleared\n-    on a successful call to open().  The standard unfortunately did\n-    not specify behavior in this case, and to everybody's great sorrow,\n-    the <link linkend=\"manual.intro.status.bugs\">proposed LWG resolution in\n-      DR #22</link> is to leave the flags unchanged.  You must insert a call\n-    to <function>fs.clear()</function> between the calls to close() and open(),\n-    and then everything will work like we all expect it to work.\n-    <emphasis>Update:</emphasis> for GCC 4.0 we implemented the resolution\n-    of <link linkend=\"manual.intro.status.bugs\">DR #409</link> and open() \n-    now calls <function>clear()</function> on success!\n+    All operations on the re-opened <varname>fs</varname> would fail, or at\n+    least act very strangely, especially if <varname>fs</varname> reached the\n+    EOF state on the previous file.\n+    The original C++98 standard did not specify behavior in this case, and\n+    the <link linkend=\"manual.bugs.dr22\">resolution of DR #22</link> was to\n+    leave the state flags unchanged on a successful call to\n+    <function>open()</function>.\n+    You had to insert a call to <function>fs.clear()</function> between the\n+    calls to <function>close()</function> and <function>open()</function>,\n+    and then everything will work as expected.\n+    <emphasis>Update:</emphasis> For GCC 4.0 we implemented the resolution\n+    of <link linkend=\"manual.bugs.dr409\">DR #409</link> and\n+    <function>open()</function>\n+    now calls <function>clear()</function> on success.\n     </para> \n   </answer>\n </qandaentry>\n@@ -858,7 +867,9 @@\n     libstdc++ <option>-Weffc++</option>-clean is not a goal of the project,\n     for a few reasons.  Mainly, that option tries to enforce\n     object-oriented programming, while the Standard Library isn't\n-    necessarily trying to be OO.\n+    necessarily trying to be OO. The option also enforces outdated guidelines\n+    from old editions of the books, and the advice isn't all relevant to\n+    modern C++ (especially C++11 and later).\n     </para> \n     <para>\n     We do, however, try to have libstdc++ sources as clean as possible. If\n@@ -879,9 +890,10 @@\n     Another problem is the <literal>rel_ops</literal> namespace and the template\n     comparison operator functions contained therein.  If they become\n     visible in the same namespace as other comparison functions\n-    (e.g., <quote>using</quote> them and the &lt;iterator&gt; header),\n+    (e.g., <quote>using</quote> them and the\n+    <filename class=\"headerfile\">&lt;iterator&gt;</filename> header),\n     then you will suddenly be faced with huge numbers of ambiguity\n-    errors.  This was discussed on the -v3 list; Nathan Myers\n+    errors.  This was discussed on the mailing list; Nathan Myers\n     <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/ml/libstdc++/2001-01/msg00247.html\">sums\n       things up here</link>.  The collisions with vector/string iterator\n     types have been fixed for 3.1.\n@@ -896,6 +908,9 @@\n     </para>\n   </question>\n   <answer xml:id=\"a-v2_headers\">\n+    <note>\n+      <para>This answer is old and probably no longer be relevant.</para>\n+    </note>\n       <para>\n \tIf you are using headers in\n \t<filename class=\"directory\">${prefix}/include/g++-3</filename>, or if\n@@ -981,11 +996,15 @@\n     </para>\n   </question>\n   <answer xml:id=\"a-memory_leaks\">\n+    <note>\n+      <para>This answer is old and probably no longer be relevant.</para>\n+    </note>\n     <para>\n     A few people have reported that the standard containers appear\n     to leak memory when tested with memory checkers such as\n     <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://valgrind.org/\"><command>valgrind</command></link>.\n-    Under some configurations the library's allocators keep free memory in a\n+    Under some (non-default) configurations the library's allocators keep\n+    free memory in a\n     pool for later reuse, rather than returning it to the OS.  Although\n     this memory is always reachable by the library and is never\n     lost, memory debugging tools can report it as a leak.  If you\n@@ -999,7 +1018,7 @@\n <qandaentry xml:id=\"faq.list_size_on\">\n   <question xml:id=\"q-list_size_on\">\n     <para>\n-      list::size() is O(n)!\n+      <code>list::size()</code> is O(n)!\n     </para>\n   </question>\n   <answer xml:id=\"a-list_size_on\">\n@@ -1049,7 +1068,8 @@\n <qandaentry xml:id=\"faq.iterator_as_pod\">\n   <question xml:id=\"faq.iterator_as_pod_q\">\n     <para>\n-      string::iterator is not char*; vector&lt;T&gt;::iterator is not T*\n+      <classname>string::iterator</classname> is not <code>char*</code>;\n+      <classname>vector&lt;T&gt;::iterator</classname> is not <code>T*</code>\n     </para>\n   </question>\n   <answer xml:id=\"faq.iterator_as_pod_a\">\n@@ -1067,11 +1087,9 @@\n     arguments.\n     </para>\n     <para>\n-    Code which does assume that a vector iterator <varname>i</varname>\n+    Code which does assume that a vector/string iterator <varname>i</varname>\n     is a pointer can often be fixed by changing <varname>i</varname> in\n-    certain expressions to <varname>&amp;*i</varname>.  Future revisions\n-    of the Standard are expected to bless this usage for\n-    vector&lt;&gt; (but not for basic_string&lt;&gt;).\n+    certain expressions to <varname>&amp;*i</varname>.\n     </para>\n   </answer>\n </qandaentry>\n@@ -1084,17 +1102,10 @@\n   </question>\n   <answer xml:id=\"a-what_is_next\">\n       <para>\n-\tHopefully, not much.  The goal of libstdc++ is to produce a\n-\tfully-compliant, fully-portable Standard Library.  After that,\n-\twe're mostly done: there won't <emphasis>be</emphasis> any\n-\tmore compliance work to do.\n-      </para>\n-      <para>\n-\tThere is an effort underway to add significant extensions to\n-\tthe standard library specification.  The latest version of\n-\tthis effort is described in\n-         <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf\">\n-         The C++ Library Technical Report 1</link>.\n+\tThe goal of libstdc++ is to produce a\n+\tfully-compliant, fully-portable Standard Library.\n+\tWhile the C++ Standard continues to evolve the libstdc++ will\n+        continue to track it.\n       </para>\n   </answer>\n </qandaentry>\n@@ -1107,18 +1118,27 @@\n   </question>\n   <answer xml:id=\"a-sgi_stl\">\n     <para>\n-      The <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.sgi.com/tech/stl/\">STL from SGI</link>,\n-    version 3.3, was the final merge of the STL codebase.  The\n-    code in libstdc++ contains many fixes and changes, and\n-    the SGI code is no longer under active\n-    development.  We expect that no future merges will take place.\n+    The STL (Standard Template Library) was the inspiration for large chunks\n+    of the C++ Standard Library, but the terms are not interchangeable and\n+    they don't mean the same thing. The C++ Standard Library includes lots of\n+    things that didn't come from the STL, and some of them aren't even\n+    templates, such as <classname>std::locale</classname> and\n+    <classname>std::thread</classname>.\n+    </para>\n+    <para>\n+    Libstdc++-v3 incorporates a lot of code from\n+    <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.sgi.com/tech/stl/\">the SGI STL</link>\n+    (the final merge was from\n+    <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.sgi.com/tech/stl/whats_new.html\">release 3.3</link>).\n+    The code in libstdc++ contains many fixes and changes compared to the\n+    original SGI code.\n     </para>\n     <para>\n     In particular, <classname>string</classname> is not from SGI and makes no\n-    use of their \"rope\" class (which is included as an\n-    optional extension), nor is <classname>valarray</classname> and some others.\n-    Classes like <classname>vector&lt;&gt;</classname> are, but have been\n-    extensively modified.\n+    use of their \"rope\" class (although that is included as an optional\n+    extension), neither is <classname>valarray</classname> nor some others.\n+    Classes like <classname>vector&lt;&gt;</classname> were from SGI, but have\n+    been extensively modified.\n     </para>\n     <para>\n     More information on the evolution of libstdc++ can be found at the\n@@ -1158,14 +1178,19 @@\n     Yes.\n     </para>\n     <para>\n-    The C++ Standard Library Technical Report adds many new features to \n-    the library.  The latest version of this effort is described in\n+    The C++ Standard Library\n     <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf\">\n-         Technical Report 1</link>.\n+    Technical Report 1</link> added many new features to the library.\n     </para>\n     <para>\n-    The implementation status of TR1 in libstdc++ can be tracked <link linkend=\"status.iso.tr1\">on the TR1 status\n-    page</link>.\n+    The implementation status of TR1 in libstdc++ can be tracked\n+    <link linkend=\"status.iso.tr1\">on the TR1 status page</link>.\n+    </para>\n+    <para>\n+    New code should probably not use TR1, because almost everything in it has\n+    been added to the main C++ Standard Library (usually with significant\n+    improvements).\n+    The TR1 implementation in libstdc++ is no longer actively maintained.\n     </para>\n   </answer>\n </qandaentry>\n@@ -1252,13 +1277,18 @@\n <qandaentry xml:id=\"faq.size_equals_capacity\">\n   <question xml:id=\"q-size_equals_capacity\">\n     <para>\n-      How do I make std::vector&lt;T&gt;::capacity() == std::vector&lt;T&gt;::size?\n+      How do I make <code>std::vector&lt;T&gt;::capacity() == std::vector&lt;T&gt;::size</code>?\n     </para>\n   </question>\n   <answer xml:id=\"a-size_equals_capacity\">\n     <para>\n-    The standard idiom for deallocating a <classname>vector&lt;T&gt;</classname>'s\n-    unused memory is to create a temporary copy of the vector and swap their\n+    Since C++11 just call the <function>shrink_to_fit()</function> member\n+    function.\n+    </para>\n+    <para>\n+    Before C++11, the standard idiom for deallocating a\n+    <classname>vector&lt;T&gt;</classname>'s\n+    unused memory was to create a temporary copy of the vector and swap their\n     contents, e.g. for <classname>vector&lt;T&gt; v</classname>\n     </para>\n     <literallayout class=\"normal\">"}, {"sha": "782817e0698de6c47b966f69c7918ae373d465db", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 142, "deletions": 140, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a28a7531b6a8f759c081bbb1b851e293e410d56/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a28a7531b6a8f759c081bbb1b851e293e410d56/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=6a28a7531b6a8f759c081bbb1b851e293e410d56", "patch": "@@ -193,8 +193,8 @@ requirements of the license of GCC.\n       \n     <para>\n       Information on known bugs, details on efforts to fix them, and\n-      fixed bugs are all available as part of the <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/bugs/\">GCC bug tracking system</link>,\n-      with the category set to <literal>libstdc++</literal>.\n+      fixed bugs are all available as part of the <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://gcc.gnu.org/bugs/\">GCC bug tracking system</link>,\n+      under the component <quote>libstdc++</quote>.\n     </para>\n     </section>\n \n@@ -211,127 +211,129 @@ requirements of the license of GCC.\n       </para>\n       <para>\n \tHere are the issues which have resulted in code changes to the library.\n-\tThe links are to the specific defect reports from a <emphasis>partial\n-\tcopy</emphasis> of the Issues List.  You can read the full version online\n+\tThe links are to the full version of the Issues List.\n+        You can read the full version online\n \tat the <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/\">ISO C++\n \tCommittee homepage</link>.\n       </para>\n       <para>\n \tIf a DR is not listed here, we may simply not have gotten to\n-\tit yet; feel free to submit a patch.  Search the include/bits\n-\tand src directories for appearances of\n+\tit yet; feel free to submit a patch.  Search the\n+        <filename class=\"directory\">include</filename> and\n+        <filename class=\"directory\">src</filename>\n+\tdirectories for appearances of\n \t<constant>_GLIBCXX_RESOLVE_LIB_DEFECTS</constant> for examples\n \tof style.  Note that we usually do not make changes to the\n \tcode until an issue has reached <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</link> status.\n       </para>\n \n       <variablelist>\n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#5\">5</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr5\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#5\">5</link>:\n \t<emphasis>string::compare specification questionable</emphasis>\n     </term>\n     <listitem><para>This should be two overloaded functions rather than a single function.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#17\">17</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr17\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#17\">17</link>:\n \t<emphasis>Bad bool parsing</emphasis>\n     </term>\n     <listitem><para>Apparently extracting Boolean values was messed up...\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#19\">19</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr19\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#19\">19</link>:\n \t<emphasis>\"Noconv\" definition too vague</emphasis>\n     </term>\n     <listitem><para>If <code>codecvt::do_in</code> returns <code>noconv</code> there are\n \tno changes to the values in <code>[to, to_limit)</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#22\">22</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr22\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#22\">22</link>:\n \t<emphasis>Member open vs flags</emphasis>\n     </term>\n     <listitem><para>Re-opening a file stream does <emphasis>not</emphasis> clear the state flags.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#23\">23</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr23\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#23\">23</link>:\n \t<emphasis>Num_get overflow result</emphasis>\n     </term>\n     <listitem><para>Implement the proposed resolution.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#25\">25</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr25\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#25\">25</link>:\n \t<emphasis>String operator&lt;&lt; uses width() value wrong</emphasis>\n     </term>\n     <listitem><para>Padding issues.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#48\">48</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr48\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#48\">48</link>:\n \t<emphasis>Use of non-existent exception constructor</emphasis>\n     </term>\n     <listitem><para>An instance of <code>ios_base::failure</code> is constructed instead.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#49\">49</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr49\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#49\">49</link>:\n \t<emphasis>Underspecification of ios_base::sync_with_stdio</emphasis>\n     </term>\n     <listitem><para>The return type is the <emphasis>previous</emphasis> state of synchronization.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#50\">50</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr50\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#50\">50</link>:\n \t<emphasis>Copy constructor and assignment operator of ios_base</emphasis>\n     </term>\n     <listitem><para>These members functions are declared <code>private</code> and are\n \tthus inaccessible.  Specifying the correct semantics of\n \t\"copying stream state\" was deemed too complicated.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#60\">60</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr60\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#60\">60</link>:\n \t<emphasis>What is a formatted input function?</emphasis>\n     </term>\n     <listitem><para>This DR made many widespread changes to <code>basic_istream</code>\n \tand <code>basic_ostream</code> all of which have been implemented.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#63\">63</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr63\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#63\">63</link>:\n \t<emphasis>Exception-handling policy for unformatted output</emphasis>\n     </term>\n     <listitem><para>Make the policy consistent with that of formatted input, unformatted\n \tinput, and formatted output.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#68\">68</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr68\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#68\">68</link>:\n \t<emphasis>Extractors for char* should store null at end</emphasis>\n     </term>\n     <listitem><para>And they do now.  An editing glitch in the last item in the list of\n \t[27.6.1.2.3]/7.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#74\">74</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr74\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#74\">74</link>:\n \t<emphasis>Garbled text for codecvt::do_max_length</emphasis>\n     </term>\n     <listitem><para>The text of the standard was gibberish.  Typos gone rampant.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#75\">75</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr75\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#75\">75</link>:\n \t<emphasis>Contradiction in codecvt::length's argument types</emphasis>\n     </term>\n     <listitem><para>Change the first parameter to <code>stateT&amp;</code> and implement\n \tthe new effects paragraph.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#83\">83</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr83\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#83\">83</link>:\n \t<emphasis>string::npos vs. string::max_size()</emphasis>\n     </term>\n     <listitem><para>Safety checks on the size of the string should test against\n \t<code>max_size()</code> rather than <code>npos</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#90\">90</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr90\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#90\">90</link>:\n \t<emphasis>Incorrect description of operator&gt;&gt; for strings</emphasis>\n     </term>\n     <listitem><para>The effect contain <code>isspace(c,getloc())</code> which must be\n \treplaced by <code>isspace(c,is.getloc())</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#91\">91</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr91\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#91\">91</link>:\n \t<emphasis>Description of operator&gt;&gt; and getline() for string&lt;&gt;\n \t    might cause endless loop</emphasis>\n     </term>\n@@ -340,7 +342,7 @@ requirements of the license of GCC.\n \tnot required to set <code>gcount</code>).\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#103\">103</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr103\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#103\">103</link>:\n \t<emphasis>set::iterator is required to be modifiable, but this allows\n \t    modification of keys.</emphasis>\n     </term>\n@@ -349,46 +351,46 @@ requirements of the license of GCC.\n \t</code> are constant iterators.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#109\">109</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr109\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#109\">109</link>:\n \t<emphasis>Missing binders for non-const sequence elements</emphasis>\n     </term>\n     <listitem><para>The <code>binder1st</code> and <code>binder2nd</code> didn't have an\n \t<code>operator()</code> taking a non-const parameter.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#110\">110</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr110\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#110\">110</link>:\n \t<emphasis>istreambuf_iterator::equal not const</emphasis>\n     </term>\n     <listitem><para>This was not a const member function.  Note that the DR says to\n \treplace the function with a const one; we have instead provided an\n \toverloaded version with identical contents.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#117\">117</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr117\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#117\">117</link>:\n \t<emphasis>basic_ostream uses nonexistent num_put member functions</emphasis>\n     </term>\n     <listitem><para><code>num_put::put()</code> was overloaded on the wrong types.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#118\">118</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr118\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#118\">118</link>:\n \t<emphasis>basic_istream uses nonexistent num_get member functions</emphasis>\n     </term>\n     <listitem><para>Same as 117, but for <code>num_get::get()</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#129\">129</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr129\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#129\">129</link>:\n \t<emphasis>Need error indication from seekp() and seekg()</emphasis>\n     </term>\n     <listitem><para>These functions set <code>failbit</code> on error now.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#130\">130</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr130\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#130\">130</link>:\n \t<emphasis>Return type of container::erase(iterator) differs for associative containers</emphasis>\n     </term>\n     <listitem><para>Make member <code>erase</code> return iterator for <code>set</code>, <code>multiset</code>, <code>map</code>, <code>multimap</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#136\">136</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr136\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#136\">136</link>:\n \t<emphasis>seekp, seekg setting wrong streams?</emphasis>\n     </term>\n     <listitem><para><code>seekp</code> should only set the output stream, and\n@@ -402,176 +404,176 @@ requirements of the license of GCC.\n \tshould probably not be calling <code>underflow()</code>.\n     </para></listitem></varlistentry> -->\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#167\">167</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr167\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#167\">167</link>:\n \t<emphasis>Improper use of traits_type::length()</emphasis>\n     </term>\n     <listitem><para><code>op&lt;&lt;</code> with a <code>const char*</code> was\n \tcalculating an incorrect number of characters to write.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#169\">169</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr169\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#169\">169</link>:\n \t<emphasis>Bad efficiency of overflow() mandated</emphasis>\n     </term>\n     <listitem><para>Grow efficiently the internal array object.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#171\">171</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr171\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#171\">171</link>:\n \t<emphasis>Strange seekpos() semantics due to joint position</emphasis>\n     </term>\n     <listitem><para>Quite complex to summarize...\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#181\">181</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr181\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#181\">181</link>:\n \t<emphasis>make_pair() unintended behavior</emphasis>\n     </term>\n     <listitem><para>This function used to take its arguments as reference-to-const, now\n \tit copies them (pass by value).\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#195\">195</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr195\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#195\">195</link>:\n \t<emphasis>Should basic_istream::sentry's constructor ever set eofbit?</emphasis>\n     </term>\n     <listitem><para>Yes, it can, specifically if EOF is reached while skipping whitespace.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#211\">211</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr211\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#211\">211</link>:\n \t<emphasis>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</emphasis>\n     </term>\n     <listitem><para>If nothing is extracted into the string, <code>op&gt;&gt;</code> now\n \tsets <code>failbit</code> (which can cause an exception, etc., etc.).\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#214\">214</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr214\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#214\">214</link>:\n \t<emphasis>set::find() missing const overload</emphasis>\n     </term>\n     <listitem><para>Both <code>set</code> and <code>multiset</code> were missing\n \toverloaded find, lower_bound, upper_bound, and equal_range functions\n \tfor const instances.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#231\">231</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr231\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#231\">231</link>:\n \t<emphasis>Precision in iostream?</emphasis>\n     </term>\n     <listitem><para>For conversion from a floating-point type, <code>str.precision()</code>\n \tis specified in the conversion specification.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#233\">233</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr233\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#233\">233</link>:\n \t<emphasis>Insertion hints in associative containers</emphasis>\n     </term>\n     <listitem><para>Implement N1780, first check before then check after, insert as close\n \tto hint as possible.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#235\">235</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr235\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#235\">235</link>:\n \t<emphasis>No specification of default ctor for reverse_iterator</emphasis>\n     </term>\n     <listitem><para>The declaration of <code>reverse_iterator</code> lists a default constructor.\n \tHowever, no specification is given what this constructor should do.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#241\">241</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr241\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#241\">241</link>:\n \t<emphasis>Does unique_copy() require CopyConstructible and Assignable?</emphasis>\n     </term>\n     <listitem><para>Add a helper for forward_iterator/output_iterator, fix the existing\n \tone for input_iterator/output_iterator to not rely on Assignability.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#243\">243</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr243\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#243\">243</link>:\n \t<emphasis>get and getline when sentry reports failure</emphasis>\n     </term>\n     <listitem><para>Store a null character only if the character array has a non-zero size.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#251\">251</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr251\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#251\">251</link>:\n \t<emphasis>basic_stringbuf missing allocator_type</emphasis>\n     </term>\n     <listitem><para>This nested typedef was originally not specified.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#253\">253</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr253\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#253\">253</link>:\n \t<emphasis>valarray helper functions are almost entirely useless</emphasis>\n     </term>\n     <listitem><para>Make the copy constructor and copy-assignment operator declarations\n \tpublic in gslice_array, indirect_array, mask_array, slice_array; provide\n \tdefinitions.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#265\">265</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr265\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#265\">265</link>:\n \t<emphasis>std::pair::pair() effects overly restrictive</emphasis>\n     </term>\n     <listitem><para>The default ctor would build its members from copies of temporaries;\n \tnow it simply uses their respective default ctors.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#266\">266</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr266\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#266\">266</link>:\n \t<emphasis>bad_exception::~bad_exception() missing Effects clause</emphasis>\n     </term>\n     <listitem><para>The <code>bad_</code>* classes no longer have destructors (they\n \tare trivial), since no description of them was ever given.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#271\">271</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr271\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#271\">271</link>:\n \t<emphasis>basic_iostream missing typedefs</emphasis>\n     </term>\n     <listitem><para>The typedefs it inherits from its base classes can't be used, since\n \t(for example) <code>basic_iostream&lt;T&gt;::traits_type</code> is ambiguous.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#275\">275</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr275\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#275\">275</link>:\n \t<emphasis>Wrong type in num_get::get() overloads</emphasis>\n     </term>\n     <listitem><para>Similar to 118.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#280\">280</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr280\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#280\">280</link>:\n \t<emphasis>Comparison of reverse_iterator to const reverse_iterator</emphasis>\n     </term>\n     <listitem><para>Add global functions with two template parameters.\n \t(NB: not added for now a templated assignment operator)\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#292\">292</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr292\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#292\">292</link>:\n \t<emphasis>Effects of a.copyfmt (a)</emphasis>\n     </term>\n     <listitem><para>If <code>(this == &amp;rhs)</code> do nothing.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#300\">300</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr300\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#300\">300</link>:\n \t<emphasis>List::merge() specification incomplete</emphasis>\n     </term>\n     <listitem><para>If <code>(this == &amp;x)</code> do nothing.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#303\">303</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr303\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#303\">303</link>:\n \t<emphasis>Bitset input operator underspecified</emphasis>\n     </term>\n     <listitem><para>Basically, compare the input character to\n \t\t    <code>is.widen(0)</code> and <code>is.widen(1)</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#305\">305</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr305\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#305\">305</link>:\n \t<emphasis>Default behavior of codecvt&lt;wchar_t, char,\n \t\t  mbstate_t&gt;::length()</emphasis>\n     </term>\n     <listitem><para>Do not specify what <code>codecvt&lt;wchar_t, char,\n \t\t    mbstate_t&gt;::do_length</code> must return.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#328\">328</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr328\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#328\">328</link>:\n \t<emphasis>Bad sprintf format modifier in\n \t\t  money_put&lt;&gt;::do_put()</emphasis>\n     </term>\n     <listitem><para>Change the format string to \"%.0Lf\".\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#365\">365</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr365\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#365\">365</link>:\n \t<emphasis>Lack of const-qualification in clause 27</emphasis>\n     </term>\n     <listitem><para>Add const overloads of <code>is_open</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#387\">387</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr387\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#387\">387</link>:\n \t<emphasis>std::complex over-encapsulated</emphasis>\n     </term>\n     <listitem><para>Add the <code>real(T)</code> and <code>imag(T)</code>\n@@ -580,20 +582,20 @@ requirements of the license of GCC.\n \t\t    free functions.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#389\">389</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr389\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#389\">389</link>:\n \t<emphasis>Const overload of valarray::operator[] returns\n \t\t  by value</emphasis>\n     </term>\n     <listitem><para>Change it to return a <code>const T&amp;</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#396\">396</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr396\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#396\">396</link>:\n \t<emphasis>what are characters zero and one</emphasis>\n     </term>\n     <listitem><para>Implement the proposed resolution.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#402\">402</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr402\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#402\">402</link>:\n \t<emphasis>Wrong new expression in [some_]allocator::construct</emphasis>\n     </term>\n     <listitem><para>Replace \"new\" with \"::new\".\n@@ -607,7 +609,7 @@ requirements of the license of GCC.\n     <listitem><para>Tweak the debug-mode checks in _Safe_iterator.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#409\">409</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr409\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#409\">409</link>:\n \t<emphasis>Closing an fstream should clear the error state</emphasis>\n     </term>\n     <listitem><para>Have <code>open</code> clear the error flags.\n@@ -619,57 +621,57 @@ requirements of the license of GCC.\n     <listitem><para>Implement Option 3, as per N1599.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#432\">432</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr432\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#432\">432</link>:\n \t<emphasis>stringbuf::overflow() makes only one write position\n \t    available</emphasis>\n     </term>\n     <listitem><para>Implement the resolution, beyond DR 169.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#434\">434</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr434\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#434\">434</link>:\n \t<emphasis>bitset::to_string() hard to use</emphasis>\n     </term>\n     <listitem><para>Add three overloads, taking fewer template arguments.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#438\">438</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr438\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#438\">438</link>:\n \t<emphasis>Ambiguity in the \"do the right thing\" clause</emphasis>\n     </term>\n     <listitem><para>Implement the resolution, basically cast less.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#445\">445</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr445\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#445\">445</link>:\n \t<emphasis>iterator_traits::reference unspecified for some iterator categories</emphasis>\n     </term>\n     <listitem><para>Change <code>istreambuf_iterator::reference</code> in C++11 mode.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#453\">453</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr453\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#453\">453</link>:\n \t<emphasis>basic_stringbuf::seekoff need not always fail for an empty stream</emphasis>\n     </term>\n     <listitem><para>Don't fail if the next pointer is null and newoff is zero.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#455\">455</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr455\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#455\">455</link>:\n \t<emphasis>cerr::tie() and wcerr::tie() are overspecified</emphasis>\n     </term>\n     <listitem><para>Initialize cerr tied to cout and wcerr tied to wcout.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#464\">464</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr464\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#464\">464</link>:\n \t<emphasis>Suggestion for new member functions in standard containers</emphasis>\n     </term>\n     <listitem><para>Add <code>data()</code> to <code>std::vector</code> and\n \t<code>at(const key_type&amp;)</code> to <code>std::map</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#467\">467</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr467\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#467\">467</link>:\n \t<emphasis>char_traits::lt(), compare(), and memcmp()</emphasis>\n     </term>\n     <listitem><para>Change <code>lt</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#508\">508</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr508\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#508\">508</link>:\n \t<emphasis>Bad parameters for ranlux64_base_01</emphasis>\n     </term>\n     <listitem><para>Fix the parameters.\n@@ -688,420 +690,420 @@ requirements of the license of GCC.\n     <listitem><para>Use &amp;value.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#538\">538</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr538\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#538\">538</link>:\n \t<emphasis>241 again: Does unique_copy() require CopyConstructible\n \t    and Assignable?</emphasis>\n     </term>\n     <listitem><para>In case of input_iterator/output_iterator rely on Assignability of\n \tinput_iterator' value_type.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#539\">539</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr539\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#539\">539</link>:\n \t<emphasis>partial_sum and adjacent_difference should mention\n \t    requirements</emphasis>\n     </term>\n     <listitem><para>We were almost doing the right thing, just use std::move\n \tin adjacent_difference.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#541\">541</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr541\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#541\">541</link>:\n \t<emphasis>shared_ptr template assignment and void</emphasis>\n     </term>\n     <listitem><para>Add an auto_ptr&lt;void&gt; specialization.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#543\">543</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr543\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#543\">543</link>:\n \t<emphasis>valarray slice default constructor</emphasis>\n     </term>\n     <listitem><para>Follow the straightforward proposed resolution.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#550\">550</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr550\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#550\">550</link>:\n \t<emphasis>What should the return type of pow(float,int) be?</emphasis>\n     </term>\n     <listitem><para>In C++11 mode, remove the pow(float,int), etc., signatures.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#586\">586</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr586\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#586\">586</link>:\n \t<emphasis>string inserter not a formatted function</emphasis>\n     </term>\n     <listitem><para>Change it to be a formatted output function (i.e. catch exceptions).\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#596\">596</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr596\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#596\">596</link>:\n \t<emphasis>27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes</emphasis>\n     </term>\n     <listitem><para>Add the missing modes to fopen_mode.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#630\">630</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr630\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#630\">630</link>:\n \t<emphasis>arrays of valarray</emphasis>\n     </term>\n     <listitem><para>Implement the simple resolution.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#660\">660</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr660\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#660\">660</link>:\n \t<emphasis>Missing bitwise operations</emphasis>\n     </term>\n     <listitem><para>Add the missing operations.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#691\">691</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr691\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#691\">691</link>:\n \t<emphasis>const_local_iterator cbegin, cend missing from TR1</emphasis>\n     </term>\n     <listitem><para>In C++11 mode add cbegin(size_type) and cend(size_type)\n \t\t    to the unordered containers.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#693\">693</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr693\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#693\">693</link>:\n \t<emphasis>std::bitset::all() missing</emphasis>\n     </term>\n     <listitem><para>Add it, consistently with the discussion.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#695\">695</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr695\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#695\">695</link>:\n \t<emphasis>ctype&lt;char&gt;::classic_table() not accessible</emphasis>\n     </term>\n     <listitem><para>Make the member functions table and classic_table public.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#696\">696</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr696\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#696\">696</link>:\n \t<emphasis>istream::operator&gt;&gt;(int&amp;) broken</emphasis>\n     </term>\n     <listitem><para>Implement the straightforward resolution.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#761\">761</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr761\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#761\">761</link>:\n \t<emphasis>unordered_map needs an at() member function</emphasis>\n     </term>\n     <listitem><para>In C++11 mode, add at() and at() const.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#775\">775</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr775\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#775\">775</link>:\n \t<emphasis>Tuple indexing should be unsigned?</emphasis>\n     </term>\n     <listitem><para>Implement the int -&gt; size_t replacements.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#776\">776</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr776\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#776\">776</link>:\n \t<emphasis>Undescribed assign function of std::array</emphasis>\n     </term>\n     <listitem><para>In C++11 mode, remove assign, add fill.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#781\">781</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr781\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#781\">781</link>:\n \t<emphasis>std::complex should add missing C99 functions</emphasis>\n     </term>\n     <listitem><para>In C++11 mode, add std::proj.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#809\">809</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr809\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#809\">809</link>:\n \t<emphasis>std::swap should be overloaded for array types</emphasis>\n     </term>\n     <listitem><para>Add the overload.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#853\">853</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr853\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#853\">853</link>:\n \t<emphasis>to_string needs updating with zero and one</emphasis>\n     </term>\n     <listitem><para>Update / add the signatures.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#865\">865</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr865\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#865\">865</link>:\n \t<emphasis>More algorithms that throw away information</emphasis>\n     </term>\n     <listitem><para>The traditional HP / SGI return type and value is blessed\n \t\t    by the resolution of the DR.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#1339\">1339</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr1339\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#1339\">1339</link>:\n        <emphasis>uninitialized_fill_n should return the end of its range</emphasis>\n     </term>\n     <listitem><para>Return the end of the filled range.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2021\">2021</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2021\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2021\">2021</link>:\n        <emphasis>Further incorrect uses of <code>result_of</code></emphasis>\n     </term>\n     <listitem><para>Correctly decay types in signature of <code>std::async</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2049\">2049</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2049\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2049\">2049</link>:\n \t<emphasis><code>is_destructible</code> underspecified</emphasis>\n     </term>\n     <listitem><para>Handle non-object types.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2056\">2056</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2056\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2056\">2056</link>:\n \t<emphasis>future_errc enums start with value 0 (invalid value for broken_promise)</emphasis>\n     </term>\n     <listitem><para>Reorder enumerators.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2059\">2059</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2059\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2059\">2059</link>:\n \t<emphasis>C++0x ambiguity problem with map::erase</emphasis>\n     </term>\n     <listitem><para>Add additional overloads.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2062\">2062</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2062\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2062\">2062</link>:\n \t<emphasis>2062. Effect contradictions w/o no-throw guarantee of <code>std::function</code> swaps</emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code> to swap functions.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2063\">2063</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2063\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2063\">2063</link>:\n \t<emphasis>Contradictory requirements for string move assignment</emphasis>\n     </term>\n     <listitem><para>Respect propagation trait for move assignment.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2064\">2064</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2064\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2064\">2064</link>:\n \t<emphasis>More noexcept issues in basic_string</emphasis>\n     </term>\n     <listitem><para>Add noexcept to the comparison operators.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2067\">2067</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2067\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2067\">2067</link>:\n \t<emphasis>packaged_task should have deleted copy c'tor with const parameter</emphasis>\n     </term>\n     <listitem><para>Fix signatures.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2101\">2101</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2101\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2101\">2101</link>:\n \t<emphasis>Some transformation types can produce impossible types</emphasis>\n     </term>\n     <listitem><para>Use the referenceable type concept.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2106\">2106</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2106\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2106\">2106</link>:\n \t<emphasis>move_iterator wrapping iterators returning prvalues</emphasis>\n     </term>\n     <listitem><para>Change the <code>reference</code> type.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2108\">2108</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2108\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2108\">2108</link>:\n \t<emphasis>No way to identify allocator types that always compare equal</emphasis>\n     </term>\n     <listitem><para>Define and use <code>is_always_equal</code> even for C++11.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2118\">2118</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2118\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2118\">2118</link>:\n \t<emphasis><code>unique_ptr</code> for array does not support cv qualification conversion of actual argument</emphasis>\n     </term>\n     <listitem><para>Adjust constraints to allow safe conversions.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2127\">2127</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2127\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2127\">2127</link>:\n \t<emphasis>Move-construction with <code>raw_storage_iterator</code></emphasis>\n     </term>\n     <listitem><para>Add assignment operator taking an rvalue.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2132\">2132</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2132\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2132\">2132</link>:\n \t<emphasis><code>std::function</code> ambiguity</emphasis>\n     </term>\n     <listitem><para>Constrain the constructor to only accept callable types.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2141\">2141</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2141\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2141\">2141</link>:\n \t<emphasis><code>common_type</code> trait produces reference types</emphasis>\n     </term>\n     <listitem><para>Use <code>decay</code> for the result type.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2144\">2144</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2144\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2144\">2144</link>:\n \t<emphasis>Missing <code>noexcept</code> specification in <code>type_index</code></emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code>\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2145\">2145</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2145\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2145\">2145</link>:\n \t<emphasis><code>error_category</code> default constructor</emphasis>\n     </term>\n     <listitem><para>Declare a public constexpr constructor.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2162\">2162</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2162\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2162\">2162</link>:\n \t<emphasis><code>allocator_traits::max_size</code> missing <code>noexcept</code></emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2187\">2187</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2187\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2187\">2187</link>:\n \t<emphasis><code>vector&lt;bool&gt;</code> is missing <code>emplace</code> and <code>emplace_back</code> member functions</emphasis>\n     </term>\n     <listitem><para>Add <code>emplace</code> and <code>emplace_back</code> member functions.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2192\">2192</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2192\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2192\">2192</link>:\n \t<emphasis>Validity and return type of <code>std::abs(0u)</code> is unclear</emphasis>\n     </term>\n     <listitem><para>Move all declarations to a common header and remove the\n     generic <code>abs</code> which accepted unsigned arguments.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2196\">2196</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2196\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2196\">2196</link>:\n \t<emphasis>Specification of <code>is_*[copy/move]_[constructible/assignable]</code> unclear for non-referencable types</emphasis>\n     </term>\n     <listitem><para>Use the referenceable type concept.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2212\">2212</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2212\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2212\">2212</link>:\n \t<emphasis><code>tuple_size</code> for <code>const pair</code> request <code>&lt;tuple&gt;</code> header</emphasis>\n     </term>\n     <listitem><para>The <code>tuple_size</code> and <code>tuple_element</code>\n     partial specializations are defined in <code>&lt;utility&gt;</code> which\n     is included by <code>&lt;array&gt;</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2296\">2296</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2296\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2296\">2296</link>:\n \t<emphasis><code>std::addressof</code> should be constexpr</emphasis>\n     </term>\n     <listitem><para>Use <code>__builtin_addressof</code> and add\n     <code>constexpr</code> to <code>addressof</code> for C++17 and later.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2313\">2313</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2313\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2313\">2313</link>:\n \t<emphasis><code>tuple_size</code> should always derive from <code>integral_constant&lt;size_t, N&gt;</code></emphasis>\n     </term>\n     <listitem><para>Update definitions of the partial specializations for const and volatile types.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2328\">2328</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2328\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2328\">2328</link>:\n        <emphasis>Rvalue stream extraction should use perfect forwarding</emphasis>\n     </term>\n     <listitem><para>Use perfect forwarding for right operand.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2329\">2329</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2329\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2329\">2329</link>:\n        <emphasis><code>regex_match()/regex_search()</code> with <code>match_results</code> should forbid temporary strings</emphasis>\n     </term>\n     <listitem><para>Add deleted overloads for rvalue strings.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2332\">2332</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2332\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2332\">2332</link>:\n        <emphasis><code>regex_iterator/regex_token_iterator</code> should forbid temporary regexes</emphasis>\n     </term>\n     <listitem><para>Add deleted constructors.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2399\">2399</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2399\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2399\">2399</link>:\n \t<emphasis><code>shared_ptr</code>'s constructor from <code>unique_ptr</code> should be constrained</emphasis>\n     </term>\n     <listitem><para>Constrain the constructor to require convertibility.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2400\">2400</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2400\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2400\">2400</link>:\n \t<emphasis><code>shared_ptr</code>'s <code>get_deleter()</code> should use <code>addressof()</code></emphasis>\n     </term>\n     <listitem><para>Use <code>addressof</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2401\">2401</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2401\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2401\">2401</link>:\n \t<emphasis><code>std::function</code> needs more <code>noexcept</code></emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code> to the assignment and comparisons.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2407\">2407</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2407\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2407\">2407</link>:\n        <emphasis><code>packaged_task(allocator_arg_t, const Allocator&amp;, F&amp;&amp;)</code>\n                  should neither be constrained nor <code>explicit</code>\n        </emphasis>\n     </term>\n     <listitem><para>Remove <code>explicit</code> from the constructor.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2415\">2415</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2415\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2415\">2415</link>:\n        <emphasis>Inconsistency between <code>unique_ptr</code> and <code>shared_ptr</code></emphasis>\n     </term>\n     <listitem><para>Create empty an <code>shared_ptr</code> from an empty\n                     <code>unique_ptr</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2418\">2418</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2418\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2418\">2418</link>:\n        <emphasis><code>apply</code> does not work with member pointers</emphasis>\n     </term>\n     <listitem><para>Use <code>mem_fn</code> for member pointers.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2440\">2440</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2440\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2440\">2440</link>:\n        <emphasis><code>seed_seq::size()</code> should be <code>noexcept</code></emphasis>\n     </term>\n     <listitem><para>Add <code>noexcept</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2441\">2441</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2441\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2441\">2441</link>:\n        <emphasis>Exact-width atomic typedefs should be provided</emphasis>\n     </term>\n     <listitem><para>Define the typedefs.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2442\">2442</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2442\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2442\">2442</link>:\n        <emphasis><code>call_once()</code> shouldn't <code>DECAY_COPY()</code></emphasis>\n     </term>\n     <listitem><para>Remove indirection through call wrapper that made copies\n     of arguments and forward arguments straight to <code>std::invoke</code>.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2454\">2454</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2454\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2454\">2454</link>:\n        <emphasis>Add <code>raw_storage_iterator::base()</code> member\n        </emphasis>\n     </term>\n     <listitem><para>Add the <code>base()</code> member function.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2455\">2455</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2455\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2455\">2455</link>:\n        <emphasis>Allocator default construction should be allowed to throw\n        </emphasis>\n     </term>\n     <listitem><para>Make <code>noexcept</code> specifications conditional.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2458\">2458</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2458\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2458\">2458</link>:\n        <emphasis>N3778 and new library deallocation signatures\n        </emphasis>\n     </term>\n     <listitem><para>Remove unused overloads.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2459\">2459</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2459\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2459\">2459</link>:\n        <emphasis><code>std::polar</code> should require a non-negative rho\n        </emphasis>\n     </term>\n     <listitem><para>Add debug mode assertion.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2466\">2466</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2466\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2466\">2466</link>:\n        <emphasis><code>allocator_traits::max_size()</code> default behavior is incorrect\n        </emphasis>\n     </term>\n     <listitem><para>Divide by the object type.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2484\">2484</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2484\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2484\">2484</link>:\n        <emphasis><code>rethrow_if_nested()</code>  is doubly unimplementable\n        </emphasis>\n     </term>\n     <listitem><para>Avoid using <code>dynamic_cast</code> when it would be\n     ill-formed.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2583\">2583</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2583\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2583\">2583</link>:\n        <emphasis>There is no way to supply an allocator for <code>basic_string(str, pos)</code>\n        </emphasis>\n     </term>\n     <listitem><para>Add new constructor\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2684\">2684</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2684\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2684\">2684</link>:\n        <emphasis><code>priority_queue</code> lacking comparator typedef\n        </emphasis>\n     </term>\n     <listitem><para>Define the <code>value_compare</code> typedef.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2770\">2770</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2770\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2770\">2770</link>:\n        <emphasis><code>tuple_size&lt;const T&gt;</code> specialization is not\n \t SFINAE compatible and breaks decomposition declarations\n        </emphasis>\n@@ -1110,7 +1112,7 @@ requirements of the license of GCC.\n       only use it if valid.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2781\">2781</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2781\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2781\">2781</link>:\n        <emphasis>Contradictory requirements for <code>std::function</code>\n          and <code>std::reference_wrapper</code>\n        </emphasis>\n@@ -1119,22 +1121,22 @@ requirements of the license of GCC.\n       arguments and store them directly as the target object.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2802\">2802</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2802\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2802\">2802</link>:\n        <emphasis>Add noexcept to several <code>shared_ptr</code> related\n          functions\n        </emphasis>\n     </term>\n     <listitem><para>Add noexcept.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2873\">2873</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2873\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2873\">2873</link>:\n        <emphasis><code>shared_ptr</code> constructor requirements for a deleter\n        </emphasis>\n     </term>\n     <listitem><para>Use rvalues for deleters.\n     </para></listitem></varlistentry>\n \n-    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2942\">2942</link>:\n+    <varlistentry xml:id=\"manual.bugs.dr2942\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#2942\">2942</link>:\n        <emphasis>LWG 2873's resolution missed\n          <code>weak_ptr::owner_before</code>\n        </emphasis>"}]}