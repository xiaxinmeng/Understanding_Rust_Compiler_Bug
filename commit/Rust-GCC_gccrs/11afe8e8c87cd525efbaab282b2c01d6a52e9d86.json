{"sha": "11afe8e8c87cd525efbaab282b2c01d6a52e9d86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFhZmU4ZThjODdjZDUyNWVmYmFhYjI4MmIyYzAxZDZhNTJlOWQ4Ng==", "commit": {"author": {"name": "Mike Stump", "email": "mikestump@comcast.net", "date": "2010-12-08T20:11:05Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2010-12-08T20:11:05Z"}, "message": "re PR debug/46749 (gcc.dg/debug/pr41893-1.c -gdwarf-2 testsuite failures on darwin)\n\n\tPR debug/46749\n\t* config/darwin.h (COLLECT_RUN_DSYMUTIL): Add.\n\t(DSYMUTIL_SPEC): Use `linker' flags instead to handle lto\n\tbetter.\n\t* config/darwin9.h (COLLECT_RUN_DSYMUTIL): Add.\n\t(DSYMUTIL_SPEC): Use `linker' flags instead to handle lto\n\tbetter.\n\t* collect2.c (post_ld_pass): Add.\n\t(process_args): Add.\n\t(maybe_run_lto_and_relink): Call post_ld_pass after ld.\n\t(main): Likewise.  Call process_args.\n\nFrom-SVN: r167603", "tree": {"sha": "547569b1d1a28e530e730a8288aa2cc1a6d6fbb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/547569b1d1a28e530e730a8288aa2cc1a6d6fbb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11afe8e8c87cd525efbaab282b2c01d6a52e9d86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11afe8e8c87cd525efbaab282b2c01d6a52e9d86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11afe8e8c87cd525efbaab282b2c01d6a52e9d86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11afe8e8c87cd525efbaab282b2c01d6a52e9d86/comments", "author": null, "committer": null, "parents": [{"sha": "b8bf6ad91b81efc271a5c91c9db34af15e2a483c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8bf6ad91b81efc271a5c91c9db34af15e2a483c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8bf6ad91b81efc271a5c91c9db34af15e2a483c"}], "stats": {"total": 107, "additions": 103, "deletions": 4}, "files": [{"sha": "90a7ff9922c840916b7f8f23ac868e51711ce01f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11afe8e8c87cd525efbaab282b2c01d6a52e9d86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11afe8e8c87cd525efbaab282b2c01d6a52e9d86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11afe8e8c87cd525efbaab282b2c01d6a52e9d86", "patch": "@@ -1,3 +1,15 @@\n+2010-12-08  Mike Stump  <mikestump@comcast.net>\n+\n+\tPR debug/46749\n+\t* config/darwin.h (COLLECT_RUN_DSYMUTIL): Add.\n+\t(DSYMUTIL_SPEC): Use `linker' flags instead to handle lto better.\n+\t* config/darwin9.h (COLLECT_RUN_DSYMUTIL): Add.\n+\t(DSYMUTIL_SPEC): Use `linker' flags instead to handle lto better.\n+\t* collect2.c (post_ld_pass): Add.\n+\t(process_args): Add.\n+\t(maybe_run_lto_and_relink): Call post_ld_pass after ld.\n+\t(main): Likewise.  Call process_args.\n+\n 2010-12-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/46844"}, {"sha": "89b21d5eb5043dc2fb78a90cf22127b606aeea51", "filename": "gcc/collect2.c", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11afe8e8c87cd525efbaab282b2c01d6a52e9d86/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11afe8e8c87cd525efbaab282b2c01d6a52e9d86/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=11afe8e8c87cd525efbaab282b2c01d6a52e9d86", "patch": "@@ -333,6 +333,8 @@ static void write_aix_file (FILE *, struct id *);\n static char *resolve_lib_name (const char *);\n #endif\n static char *extract_string (const char **);\n+static void post_ld_pass (bool);\n+static void process_args (int *argcp, char **argv);\n \n /* Enumerations describing which pass this is for scanning the\n    program file ...  */\n@@ -1054,6 +1056,7 @@ maybe_run_lto_and_relink (char **lto_ld_argv, char **object_lst,\n       /* Run the linker again, this time replacing the object files\n          optimized by the LTO with the temporary file generated by the LTO.  */\n       fork_execute (\"ld\", out_lto_ld_argv);\n+      post_ld_pass (true);\n       free (lto_ld_argv);\n \n       maybe_unlink_list (lto_o_files);\n@@ -1062,7 +1065,8 @@ maybe_run_lto_and_relink (char **lto_ld_argv, char **object_lst,\n     {\n       /* Our caller is relying on us to do the link\n          even though there is no LTO back end work to be done.  */\n-      fork_execute  (\"ld\", lto_ld_argv);\n+      fork_execute (\"ld\", lto_ld_argv);\n+      post_ld_pass (false);\n     }\n }\n \f\n@@ -1151,6 +1155,8 @@ main (int argc, char **argv)\n   if (argv != old_argv)\n     at_file_supplied = 1;\n \n+  process_args (&argc, argv);\n+\n   num_c_args = argc + 9;\n \n   no_demangle = !! getenv (\"COLLECT_NO_DEMANGLE\");\n@@ -1764,6 +1770,8 @@ main (int argc, char **argv)\n #endif\n \tif (lto_mode != LTO_MODE_NONE)\n \t  maybe_run_lto_and_relink (ld1_argv, object_lst, object, false);\n+\telse\n+\t  post_ld_pass (false);\n \n \tmaybe_unlink (c_file);\n \tmaybe_unlink (o_file);\n@@ -1835,6 +1843,8 @@ main (int argc, char **argv)\n #ifdef COLLECT_EXPORT_LIST\n       maybe_unlink (export_file);\n #endif\n+      post_ld_pass (false);\n+\n       maybe_unlink (c_file);\n       maybe_unlink (o_file);\n       return 0;\n@@ -1920,7 +1930,10 @@ main (int argc, char **argv)\n   if (lto_mode)\n     maybe_run_lto_and_relink (ld2_argv, object_lst, object, true);\n   else\n-    fork_execute (\"ld\", ld2_argv);\n+    {\n+      fork_execute (\"ld\", ld2_argv);\n+      post_ld_pass (false);\n+    }\n \n   /* Let scan_prog_file do any final mods (OSF/rose needs this for\n      constructors/destructors in shared libraries.  */\n@@ -3203,3 +3216,67 @@ resolve_lib_name (const char *name)\n   return (NULL);\n }\n #endif /* COLLECT_EXPORT_LIST */\n+\n+#ifdef COLLECT_RUN_DSYMUTIL\n+static int flag_dsym = false;\n+static int flag_idsym = false;\n+\n+static void\n+process_args (int *argcp, char **argv) {\n+  int i, j;\n+  int argc = *argcp;\n+  for (i=0; i<argc; ++i)\n+    {\n+      if (strcmp (argv[i], \"-dsym\") == 0)\n+\t{\n+\t  flag_dsym = true;\n+\t  /* Remove the flag, as we handle all processing for it.  */\n+\t  j = i;\n+\t  do\n+\t    argv[j] = argv[j+1];\n+\t  while (++j < argc);\n+\t  --i;\n+\t  argc = --(*argcp);\n+\t}\n+      else if (strcmp (argv[i], \"-idsym\") == 0)\n+\t{\n+\t  flag_idsym = true;\n+\t  /* Remove the flag, as we handle all processing for it.  */\n+\t  j = i;\n+\t  do\n+\t    argv[j] = argv[j+1];\n+\t  while (++j < argc);\n+\t  --i;\n+\t  argc = --(*argcp);\n+\t}\n+    }\n+}\n+\n+static void\n+do_dsymutil (const char *output_file) {\n+  const char *dsymutil = DSYMUTIL + 1;\n+  struct pex_obj *pex;\n+  char **real_argv = XCNEWVEC (char *, 3);\n+  const char ** argv = CONST_CAST2 (const char **, char **,\n+\t\t\t\t    real_argv);\n+\n+  argv[0] = dsymutil;\n+  argv[1] = output_file;\n+  argv[2] = (char *) 0;\n+\n+  pex = collect_execute (dsymutil, real_argv, NULL, NULL, PEX_LAST | PEX_SEARCH);\n+  do_wait (dsymutil, pex);\n+}\n+\n+static void\n+post_ld_pass (bool temp_file) {\n+  if (!(temp_file && flag_idsym) && !flag_dsym)\n+    return;\n+      \n+  do_dsymutil (output_file);\n+}\n+#else\n+static void\n+process_args (int *argcp ATTRIBUTE_UNUSED, char **argv ATTRIBUTE_UNUSED) { }\n+static void post_ld_pass (bool temp_file ATTRIBUTE_UNUSED) { }\n+#endif"}, {"sha": "e34b6e0434acefc80b45ad71328eec42c0714dab", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11afe8e8c87cd525efbaab282b2c01d6a52e9d86/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11afe8e8c87cd525efbaab282b2c01d6a52e9d86/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=11afe8e8c87cd525efbaab282b2c01d6a52e9d86", "patch": "@@ -188,11 +188,16 @@ extern GTY(()) int darwin_ms_struct;\n \n #define DSYMUTIL_SPEC \\\n    \"%{!fdump=*:%{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\\\n+    %{v} \\\n+    %{gdwarf-2:%{!gstabs*:%{!g0: -idsym}}}\\\n     %{.c|.cc|.C|.cpp|.cp|.c++|.cxx|.CPP|.m|.mm: \\\n-    %{gdwarf-2:%{!gstabs*:%{!g0: \" DSYMUTIL \" %{o*:%*}%{!o:a.out}}}}}}}}}}}}\"\n+    %{gdwarf-2:%{!gstabs*:%{!g0: -dsym}}}}}}}}}}}\"\n \n #define LINK_COMMAND_SPEC LINK_COMMAND_SPEC_A DSYMUTIL_SPEC\n \n+/* Tell collet2 to run dsymutil for us as necessary.  */\n+#define COLLECT_RUN_DSYMUTIL 1\n+\n /* We only want one instance of %G, since libSystem (Darwin's -lc) does not depend\n    on libgcc.  */\n #undef  LINK_GCC_C_SEQUENCE_SPEC"}, {"sha": "d0a7a1f75e4344d8fb9239773df32aab61f07db0", "filename": "gcc/config/darwin9.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11afe8e8c87cd525efbaab282b2c01d6a52e9d86/gcc%2Fconfig%2Fdarwin9.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11afe8e8c87cd525efbaab282b2c01d6a52e9d86/gcc%2Fconfig%2Fdarwin9.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin9.h?ref=11afe8e8c87cd525efbaab282b2c01d6a52e9d86", "patch": "@@ -27,8 +27,13 @@ along with GCC; see the file COPYING3.  If not see\n #undef DSYMUTIL_SPEC\n #define DSYMUTIL_SPEC \\\n    \"%{!fdump=*:%{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\\\n+    %{v} \\\n+    %{g*:%{!gstabs*:%{!g0: -idsym}}}\\\n     %{.c|.cc|.C|.cpp|.cp|.c++|.cxx|.CPP|.m|.mm|.s: \\\n-    %{g*:%{!gstabs*:%{!g0: \" DSYMUTIL \" %{o*:%*}%{!o:a.out}}}}}}}}}}}}\"\n+    %{g*:%{!gstabs*:%{!g0: -dsym}}}}}}}}}}}\"\n+\n+/* Tell collet2 to run dsymutil for us as necessary.  */\n+#define COLLECT_RUN_DSYMUTIL 1\n \n /* libSystem contains unwind information for signal frames.  */\n #define DARWIN_LIBSYSTEM_HAS_UNWIND"}]}