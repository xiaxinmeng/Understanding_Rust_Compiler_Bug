{"sha": "0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE1MDhiYjY2YjYwNTZkZDdhN2NkN2E2ODlkYWExYjFkZmZmNjg2Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-11-22T20:07:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-11-22T20:07:31Z"}, "message": "ubsan.c (ubsan_source_location): Don't crash on unknown locations.\n\n\t* ubsan.c (ubsan_source_location): Don't crash on\n\tunknown locations.\n\t(ubsan_pass): Ignore clobber stmts.\n\n\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_MISSING_RETURN): New built-in.\n\t* opts.c (common_handle_option): Add -fsanitize=return.\n\t* flag-types.h (enum sanitize_code): Add SANITIZE_RETURN and\n\tor it into SANITIZE_UNDEFINED.\nc-family/\n\t* c-ubsan.h (ubsan_instrument_return): New prototype.\n\t* c-ubsan.c (ubsan_instrument_return): New function.\ncp/\n\t* cp-gimplify.c: Include target.h and c-family/c-ubsan.h.\n\t(cp_ubsan_maybe_instrument_return): New function.\n\t(cp_genericize): Call it if -fsanitize=return.\ntestsuite/\n\t* g++.dg/ubsan/return-1.C: New test.\n\t* g++.dg/ubsan/return-2.C: New test.\n\nFrom-SVN: r205283", "tree": {"sha": "27f73f1a16fc3ef2b2d49ac81210b2c02c06ba3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27f73f1a16fc3ef2b2d49ac81210b2c02c06ba3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59b36ecf239ba0164f55a2ac2cd37154d7963dd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59b36ecf239ba0164f55a2ac2cd37154d7963dd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59b36ecf239ba0164f55a2ac2cd37154d7963dd9"}], "stats": {"total": 157, "additions": 153, "deletions": 4}, "files": [{"sha": "f380e4459b1cc07e183d7b7115a0f8b793396663", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "patch": "@@ -1,5 +1,14 @@\n 2013-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* ubsan.c (ubsan_source_location): Don't crash on\n+\tunknown locations.\n+\t(ubsan_pass): Ignore clobber stmts.\n+\n+\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_MISSING_RETURN): New built-in.\n+\t* opts.c (common_handle_option): Add -fsanitize=return.\n+\t* flag-types.h (enum sanitize_code): Add SANITIZE_RETURN and\n+\tor it into SANITIZE_UNDEFINED.\n+\n \t* sanitizer.def (BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT,\n \tBUILT_IN_ASAN_AFTER_DYNAMIC_INIT): New.\n \t* asan.c (instrument_derefs): Handle also VAR_DECL loads/stores."}, {"sha": "43c4dad09458ba62134772b71ea5744d711aed7c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "patch": "@@ -1,3 +1,8 @@\n+2013-11-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-ubsan.h (ubsan_instrument_return): New prototype.\n+\t* c-ubsan.c (ubsan_instrument_return): New function.\n+\n 2013-11-22  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* c-common.c: Add required include files from gimple.h."}, {"sha": "a2769352be47f54369c2679f4a034a1c52ff0eba", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "patch": "@@ -179,3 +179,14 @@ ubsan_instrument_vla (location_t loc, tree size)\n \n   return t;\n }\n+\n+/* Instrument missing return in C++ functions returning non-void.  */\n+\n+tree\n+ubsan_instrument_return (location_t loc)\n+{\n+  tree data = ubsan_create_data (\"__ubsan_missing_return_data\", loc,\n+\t\t\t\t NULL, NULL_TREE);\n+  tree t = builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_MISSING_RETURN);\n+  return build_call_expr_loc (loc, t, 1, build_fold_addr_expr_loc (loc, data));\n+}"}, {"sha": "9b91bad8cdc19b9a0ca7e1dcb9a9648208146ca7", "filename": "gcc/c-family/c-ubsan.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fc-family%2Fc-ubsan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fc-family%2Fc-ubsan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.h?ref=0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "patch": "@@ -24,5 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n extern tree ubsan_instrument_division (location_t, tree, tree);\n extern tree ubsan_instrument_shift (location_t, enum tree_code, tree, tree);\n extern tree ubsan_instrument_vla (location_t, tree);\n+extern tree ubsan_instrument_return (location_t);\n \n #endif  /* GCC_C_UBSAN_H  */"}, {"sha": "ee0674c230006de76804889688f2aa667e3147b0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "patch": "@@ -1,5 +1,9 @@\n 2013-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* cp-gimplify.c: Include target.h and c-family/c-ubsan.h.\n+\t(cp_ubsan_maybe_instrument_return): New function.\n+\t(cp_genericize): Call it if -fsanitize=return.\n+\n \t* decl2.c: Include asan.h.\n \t(one_static_initialization_or_destruction): If -fsanitize=address,\n \tinit is non-NULL and guard is NULL, set"}, {"sha": "b1270a187f1dc6eb074411a6c72c87bfeee5bac4", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "patch": "@@ -39,6 +39,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hashtab.h\"\n #include \"flags.h\"\n #include \"splay-tree.h\"\n+#include \"target.h\"\n+#include \"c-family/c-ubsan.h\"\n \n /* Forward declarations.  */\n \n@@ -1178,6 +1180,59 @@ cp_genericize_tree (tree* t_p)\n   wtd.bind_expr_stack.release ();\n }\n \n+/* If a function that should end with a return in non-void\n+   function doesn't obviously end with return, add ubsan\n+   instrmentation code to verify it at runtime.  */\n+\n+static void\n+cp_ubsan_maybe_instrument_return (tree fndecl)\n+{\n+  if (VOID_TYPE_P (TREE_TYPE (TREE_TYPE (fndecl)))\n+      || DECL_CONSTRUCTOR_P (fndecl)\n+      || DECL_DESTRUCTOR_P (fndecl)\n+      || !targetm.warn_func_return (fndecl))\n+    return;\n+\n+  tree t = DECL_SAVED_TREE (fndecl);\n+  while (t)\n+    {\n+      switch (TREE_CODE (t))\n+\t{\n+\tcase BIND_EXPR:\n+\t  t = BIND_EXPR_BODY (t);\n+\t  continue;\n+\tcase TRY_FINALLY_EXPR:\n+\t  t = TREE_OPERAND (t, 0);\n+\t  continue;\n+\tcase STATEMENT_LIST:\n+\t  {\n+\t    tree_stmt_iterator i = tsi_last (t);\n+\t    if (!tsi_end_p (i))\n+\t      {\n+\t\tt = tsi_stmt (i);\n+\t\tcontinue;\n+\t      }\n+\t  }\n+\t  break;\n+\tcase RETURN_EXPR:\n+\t  return;\n+\tdefault:\n+\t  break;\n+\t}\n+      break;\n+    }\n+  if (t == NULL_TREE)\n+    return;\n+  t = DECL_SAVED_TREE (fndecl);\n+  if (TREE_CODE (t) == BIND_EXPR\n+      && TREE_CODE (BIND_EXPR_BODY (t)) == STATEMENT_LIST)\n+    {\n+      tree_stmt_iterator i = tsi_last (BIND_EXPR_BODY (t));\n+      t = ubsan_instrument_return (DECL_SOURCE_LOCATION (fndecl));\n+      tsi_link_after (&i, t, TSI_NEW_STMT);\n+    }\n+}\n+\n void\n cp_genericize (tree fndecl)\n {\n@@ -1240,6 +1295,9 @@ cp_genericize (tree fndecl)\n      walk_tree's hash functionality.  */\n   cp_genericize_tree (&DECL_SAVED_TREE (fndecl));\n \n+  if (flag_sanitize & SANITIZE_RETURN)\n+    cp_ubsan_maybe_instrument_return (fndecl);\n+\n   /* Do everything else.  */\n   c_genericize (fndecl);\n "}, {"sha": "1d85a9aa4e85b451a2f4116f926b8fecf91172d7", "filename": "gcc/flag-types.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "patch": "@@ -212,8 +212,9 @@ enum sanitize_code {\n   SANITIZE_UNREACHABLE = 1 << 4,\n   SANITIZE_VLA = 1 << 5,\n   SANITIZE_NULL = 1 << 6,\n+  SANITIZE_RETURN = 1 << 7,\n   SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE\n-\t\t       | SANITIZE_VLA | SANITIZE_NULL\n+\t\t       | SANITIZE_VLA | SANITIZE_NULL | SANITIZE_RETURN\n };\n \n /* flag_vtable_verify initialization levels. */"}, {"sha": "21ca9dcdf7aefd75aa5805d047769e8587499267", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "patch": "@@ -1457,6 +1457,7 @@ common_handle_option (struct gcc_options *opts,\n \t      { \"unreachable\", SANITIZE_UNREACHABLE,\n \t\tsizeof \"unreachable\" - 1 },\n \t      { \"vla-bound\", SANITIZE_VLA, sizeof \"vla-bound\" - 1 },\n+\t      { \"return\", SANITIZE_RETURN, sizeof \"return\" - 1 },\n \t      { \"null\", SANITIZE_NULL, sizeof \"null\" - 1 },\n \t      { NULL, 0, 0 }\n \t    };"}, {"sha": "5bf1e3cebe6215d64e52ea299b436b645cd44442", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "patch": "@@ -303,6 +303,10 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE,\n \t\t      \"__ubsan_handle_builtin_unreachable\",\n \t\t      BT_FN_VOID_PTR,\n \t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_MISSING_RETURN,\n+\t\t      \"__ubsan_handle_missing_return\",\n+\t\t      BT_FN_VOID_PTR,\n+\t\t      ATTR_NORETURN_NOTHROW_LEAF_LIST)\n DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE,\n \t\t      \"__ubsan_handle_vla_bound_not_positive\",\n \t\t      BT_FN_VOID_PTR_PTR,"}, {"sha": "091cc52c84d3dc79d5e16a536feb8aa988a36355", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "patch": "@@ -1,5 +1,8 @@\n 2013-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* g++.dg/ubsan/return-1.C: New test.\n+\t* g++.dg/ubsan/return-2.C: New test.\n+\n \t* c-c++-common/asan/no-redundant-instrumentation-1.c: Tweak to avoid\n \toptimizing away some __asan_report* calls.\n "}, {"sha": "43791b9e33f7e6adf86b3c22371d09502af044ce", "filename": "gcc/testsuite/g++.dg/ubsan/return-1.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-1.C?ref=0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do run }\n+// { dg-options \"-fsanitize=return\" }\n+// { dg-shouldfail \"ubsan\" }\n+\n+struct S { S (); ~S (); };\n+\n+S::S () {}\n+S::~S () {}\n+\n+int\n+foo (int x)\n+{\n+  S a;\n+  {\n+    S b;\n+    if (x)\n+      return 1;\n+  }\n+}\n+\n+int\n+main ()\n+{\n+  foo (0);\n+}\n+\n+// { dg-output \"execution reached the end of a value-returning function without returning a value\" }"}, {"sha": "c7380f03ed6ba67541b255683a359158d24c625b", "filename": "gcc/testsuite/g++.dg/ubsan/return-2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-2.C?ref=0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do run }\n+// { dg-options \"-fsanitize=return\" }\n+\n+struct S { S (); ~S (); };\n+\n+S::S () {}\n+S::~S () {}\n+\n+int\n+foo (int x)\n+{\n+  S a;\n+  {\n+    S b;\n+    if (x)\n+      return 1;\n+  }\n+}\n+\n+int\n+main ()\n+{\n+  foo (1);\n+  foo (14);\n+}"}, {"sha": "f2b66bf4d571867513095e6d5b9f783d100f370f", "filename": "gcc/ubsan.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a508bb66b6056dd7a7cd7a689daa1b1dfff6863/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=0a508bb66b6056dd7a7cd7a689daa1b1dfff6863", "patch": "@@ -229,8 +229,8 @@ ubsan_source_location (location_t loc)\n   xloc = expand_location (loc);\n \n   /* Fill in the values from LOC.  */\n-  size_t len = strlen (xloc.file);\n-  tree str = build_string (len + 1, xloc.file);\n+  size_t len = xloc.file ? strlen (xloc.file) : 0;\n+  tree str = build_string (len + 1, xloc.file ? xloc.file : \"\");\n   TREE_TYPE (str) = build_array_type (char_type_node,\n \t\t\t\t      build_index_type (size_int (len)));\n   TREE_READONLY (str) = 1;\n@@ -644,7 +644,7 @@ ubsan_pass (void)\n \t{\n \t  struct walk_stmt_info wi;\n \t  gimple stmt = gsi_stmt (gsi);\n-\t  if (is_gimple_debug (stmt))\n+\t  if (is_gimple_debug (stmt) || gimple_clobber_p (stmt))\n \t    {\n \t      gsi_next (&gsi);\n \t      continue;"}]}