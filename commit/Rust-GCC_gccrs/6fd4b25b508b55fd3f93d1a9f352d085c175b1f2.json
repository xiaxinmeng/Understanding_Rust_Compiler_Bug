{"sha": "6fd4b25b508b55fd3f93d1a9f352d085c175b1f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZkNGIyNWI1MDhiNTVmZDNmOTNkMWE5ZjM1MmQwODVjMTc1YjFmMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-08-12T14:54:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-08-12T14:54:12Z"}, "message": "Add noexcept-specifier to std::apply and std::make_from_tuple\n\nWhen unpacking a std::tuple we know that the std::get calls are\nnoexcept, so only the invocation (for std::apply) and construction (for\nstd::make_from_tuple) can throw.\n\nWe also know the std::get calls won't throw for a std::array, but this\npatch doesn't specialize the variable template for std::array. For an\narbitrary tuple-like type we don't know if the std::get calls will\nthrow, and so just use a potentially-throwing noexcept-specifier.\n\n\t* include/std/tuple (__unpack_std_tuple): New variable template and\n\tpartial specializations.\n\t(apply, make_from_tuple): Add noexcept-specifier.\n\t* testsuite/20_util/tuple/apply/2.cc: New test.\n\t* testsuite/20_util/tuple/make_from_tuple/2.cc: New test.\n\nFrom-SVN: r274312", "tree": {"sha": "4ba6092d25863aa4f2f429b4a55801aab9b9f876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ba6092d25863aa4f2f429b4a55801aab9b9f876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0dffed9dae9bd2d61292beb13038414270c03e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0dffed9dae9bd2d61292beb13038414270c03e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0dffed9dae9bd2d61292beb13038414270c03e5"}], "stats": {"total": 159, "additions": 159, "deletions": 0}, "files": [{"sha": "6c24ed68054045435aacbbbb86f7a7c616a38247", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6fd4b25b508b55fd3f93d1a9f352d085c175b1f2", "patch": "@@ -1,3 +1,11 @@\n+2019-08-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/tuple (__unpack_std_tuple): New variable template and\n+\tpartial specializations.\n+\t(apply, make_from_tuple): Add noexcept-specifier.\n+\t* testsuite/20_util/tuple/apply/2.cc: New test.\n+\t* testsuite/20_util/tuple/make_from_tuple/2.cc: New test.\n+\n 2019-08-09  Corentin Gay  <gay@adacore.com>\n \n \t* testsuite/ext/random/beta_distribution/operators/serialize.cc,"}, {"sha": "dd966b3a0bc694fc0ce464ab58512aaa8768e445", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=6fd4b25b508b55fd3f93d1a9f352d085c175b1f2", "patch": "@@ -1591,6 +1591,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { }\n \n #if __cplusplus >= 201703L\n+\n+  // Unpack a std::tuple into a type trait and use its value.\n+  // For cv std::tuple<_Up> the result is _Trait<_Tp, cv _Up...>::value.\n+  // For cv std::tuple<_Up>& the result is _Trait<_Tp, cv _Up&...>::value.\n+  // Otherwise the result is false (because we don't know if std::get throws).\n+  template<template<typename...> class _Trait, typename _Tp, typename _Tuple>\n+    inline constexpr bool __unpack_std_tuple = false;\n+\n+  template<template<typename...> class _Trait, typename _Tp, typename... _Up>\n+    inline constexpr bool __unpack_std_tuple<_Trait, _Tp, tuple<_Up...>>\n+      = _Trait<_Tp, _Up...>::value;\n+\n+  template<template<typename...> class _Trait, typename _Tp, typename... _Up>\n+    inline constexpr bool __unpack_std_tuple<_Trait, _Tp, tuple<_Up...>&>\n+      = _Trait<_Tp, _Up&...>::value;\n+\n+  template<template<typename...> class _Trait, typename _Tp, typename... _Up>\n+    inline constexpr bool __unpack_std_tuple<_Trait, _Tp, const tuple<_Up...>>\n+      = _Trait<_Tp, const _Up...>::value;\n+\n+  template<template<typename...> class _Trait, typename _Tp, typename... _Up>\n+    inline constexpr bool __unpack_std_tuple<_Trait, _Tp, const tuple<_Up...>&>\n+      = _Trait<_Tp, const _Up&...>::value;\n+\n # define __cpp_lib_apply 201603\n \n   template <typename _Fn, typename _Tuple, size_t... _Idx>\n@@ -1604,6 +1628,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <typename _Fn, typename _Tuple>\n     constexpr decltype(auto)\n     apply(_Fn&& __f, _Tuple&& __t)\n+    noexcept(__unpack_std_tuple<is_nothrow_invocable, _Fn, _Tuple>)\n     {\n       using _Indices\n \t= make_index_sequence<tuple_size_v<remove_reference_t<_Tuple>>>;\n@@ -1622,6 +1647,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <typename _Tp, typename _Tuple>\n     constexpr _Tp\n     make_from_tuple(_Tuple&& __t)\n+    noexcept(__unpack_std_tuple<is_nothrow_constructible, _Tp, _Tuple>)\n     {\n       return __make_from_tuple_impl<_Tp>(\n         std::forward<_Tuple>(__t),"}, {"sha": "aa5968f397f7e545b32149a71bc97ff6d3cd9c34", "filename": "libstdc++-v3/testsuite/20_util/tuple/apply/2.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fapply%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fapply%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fapply%2F2.cc?ref=6fd4b25b508b55fd3f93d1a9f352d085c175b1f2", "patch": "@@ -0,0 +1,62 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+// Test noexcept-specifier on std::apply\n+\n+#include <tuple>\n+\n+using std::tuple;\n+using std::declval;\n+\n+void f1();\n+\n+static_assert( !noexcept(apply(f1, declval<tuple<>>())) );\n+static_assert( !noexcept(apply(f1, declval<tuple<>&>())) );\n+static_assert( !noexcept(apply(f1, declval<const tuple<>>())) );\n+static_assert( !noexcept(apply(f1, declval<const tuple<>&>())) );\n+\n+void f2() noexcept;\n+\n+static_assert( noexcept(apply(f2, declval<tuple<>>())) );\n+static_assert( noexcept(apply(f2, declval<tuple<>&>())) );\n+static_assert( noexcept(apply(f2, declval<const tuple<>>())) );\n+static_assert( noexcept(apply(f2, declval<const tuple<>&>())) );\n+\n+struct F3 {\n+  void operator()(int&);\n+  void operator()(int&&) noexcept;\n+  void operator()(const int&) noexcept;\n+  void operator()(const int&&);\n+} f3;\n+\n+static_assert( noexcept(apply(f3, declval<tuple<int>>())) );\n+static_assert( !noexcept(apply(f3, declval<tuple<int>&>())) );\n+static_assert( !noexcept(apply(f3, declval<const tuple<int>>())) );\n+static_assert( noexcept(apply(f3, declval<const tuple<int>&>())) );\n+\n+struct F4 {\n+  void operator()(int&, const int&);\n+  void operator()(int&&, int&&) noexcept;\n+} f4;\n+\n+static_assert( noexcept(apply(f4, declval<tuple<int, int>>())) );\n+static_assert( !noexcept(apply(f4, declval<tuple<int, int>&>())) );\n+static_assert( !noexcept(apply(f4, declval<tuple<int&, const int>>())) );\n+static_assert( !noexcept(apply(f4, declval<tuple<int, const int>&>())) );"}, {"sha": "18a9466ef429c416f49b4d867c17affb17c07841", "filename": "libstdc++-v3/testsuite/20_util/tuple/make_from_tuple/2.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmake_from_tuple%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmake_from_tuple%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fmake_from_tuple%2F2.cc?ref=6fd4b25b508b55fd3f93d1a9f352d085c175b1f2", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+// Test noexcept-specifier on std::make_from_tuple\n+\n+#include <tuple>\n+\n+using std::make_from_tuple;\n+using std::tuple;\n+using std::declval;\n+\n+struct T1 { T1(); };\n+\n+static_assert( !noexcept(make_from_tuple<T1>(declval<tuple<>>())) );\n+static_assert( !noexcept(make_from_tuple<T1>(declval<tuple<>&>())) );\n+static_assert( !noexcept(make_from_tuple<T1>(declval<const tuple<>>())) );\n+static_assert( !noexcept(make_from_tuple<T1>(declval<const tuple<>&>())) );\n+\n+struct T2 { };\n+\n+static_assert( noexcept(make_from_tuple<T2>(declval<tuple<>>())) );\n+static_assert( noexcept(make_from_tuple<T2>(declval<tuple<>&>())) );\n+static_assert( noexcept(make_from_tuple<T2>(declval<const tuple<>>())) );\n+static_assert( noexcept(make_from_tuple<T2>(declval<const tuple<>&>())) );\n+\n+struct T3 {\n+  T3(int&);\n+  T3(int&&) noexcept;\n+  T3(const int&) noexcept;\n+  T3(const int&&);\n+};\n+\n+static_assert( noexcept(make_from_tuple<T3>(declval<tuple<int>>())) );\n+static_assert( !noexcept(make_from_tuple<T3>(declval<tuple<int>&>())) );\n+static_assert( !noexcept(make_from_tuple<T3>(declval<const tuple<int>>())) );\n+static_assert( noexcept(make_from_tuple<T3>(declval<const tuple<int>&>())) );\n+\n+struct T4 {\n+  T4(int&, const int&);\n+  T4(int&&, int&&) noexcept;\n+};\n+\n+static_assert( noexcept(make_from_tuple<T4>(declval<tuple<int, int>>())) );\n+static_assert( !noexcept(make_from_tuple<T4>(declval<tuple<int, int>&>())) );\n+static_assert( !noexcept(make_from_tuple<T4>(declval<tuple<int&, const int>>())) );\n+static_assert( !noexcept(make_from_tuple<T4>(declval<tuple<int, const int>&>())) );"}]}