{"sha": "072339477c2005943492579576764494b07f1f06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcyMzM5NDc3YzIwMDU5NDM0OTI1Nzk1NzY3NjQ0OTRiMDdmMWYwNg==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@google.com", "date": "2011-06-01T20:36:55Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2011-06-01T20:36:55Z"}, "message": "lto-streamer-out.c (lto_output_ts_decl_with_vis_tree_pointers): Call output_record_start with LTO_null instead of output_zero.\n\n\t* lto-streamer-out.c (lto_output_ts_decl_with_vis_tree_pointers): Call\n\toutput_record_start with LTO_null instead of output_zero.\n\t(lto_output_ts_binfo_tree_pointers): Likewise.\n\t(lto_output_tree): Likewise.\n\t(output_eh_try_list): Likewise.\n\t(output_eh_region): Likewise.\n\t(output_eh_lp): Likewise.\n\t(output_eh_regions): Likewise.\n\t(output_bb): Likewise.\n\t(output_function): Likewise.\n\t(output_unreferenced_globals): Likewise.\n\t* lto-streamer.h (enum LTO_tags): Reserve MAX_TREE_CODES\n\tinstead of NUM_TREE_CODES.\n\t(lto_tag_is_tree_code_p): Check max value against MAX_TREE_CODES.\n\t(lto_output_int_in_range): Change << to >> when shifting VAL.\n\nFrom-SVN: r174544", "tree": {"sha": "bc32f2535fb9ff5735df8d35ceafc095aafffd18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc32f2535fb9ff5735df8d35ceafc095aafffd18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/072339477c2005943492579576764494b07f1f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072339477c2005943492579576764494b07f1f06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/072339477c2005943492579576764494b07f1f06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/072339477c2005943492579576764494b07f1f06/comments", "author": {"login": "dnovillo", "id": 7295335, "node_id": "MDQ6VXNlcjcyOTUzMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7295335?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dnovillo", "html_url": "https://github.com/dnovillo", "followers_url": "https://api.github.com/users/dnovillo/followers", "following_url": "https://api.github.com/users/dnovillo/following{/other_user}", "gists_url": "https://api.github.com/users/dnovillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/dnovillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dnovillo/subscriptions", "organizations_url": "https://api.github.com/users/dnovillo/orgs", "repos_url": "https://api.github.com/users/dnovillo/repos", "events_url": "https://api.github.com/users/dnovillo/events{/privacy}", "received_events_url": "https://api.github.com/users/dnovillo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4324a55c06f5e18cbcf6b1a1180435187cfd9876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4324a55c06f5e18cbcf6b1a1180435187cfd9876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4324a55c06f5e18cbcf6b1a1180435187cfd9876"}], "stats": {"total": 56, "additions": 37, "deletions": 19}, "files": [{"sha": "148a53027ad6d67b40ca505181054d79b042e85b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072339477c2005943492579576764494b07f1f06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072339477c2005943492579576764494b07f1f06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=072339477c2005943492579576764494b07f1f06", "patch": "@@ -1,3 +1,21 @@\n+2011-06-01  Diego Novillo  <dnovillo@google.com>\n+\n+\t* lto-streamer-out.c (lto_output_ts_decl_with_vis_tree_pointers): Call\n+\toutput_record_start with LTO_null instead of output_zero.\n+\t(lto_output_ts_binfo_tree_pointers): Likewise.\n+\t(lto_output_tree): Likewise.\n+\t(output_eh_try_list): Likewise.\n+\t(output_eh_region): Likewise.\n+\t(output_eh_lp): Likewise.\n+\t(output_eh_regions): Likewise.\n+\t(output_bb): Likewise.\n+\t(output_function): Likewise.\n+\t(output_unreferenced_globals): Likewise.\n+\t* lto-streamer.h (enum LTO_tags): Reserve MAX_TREE_CODES\n+\tinstead of NUM_TREE_CODES.\n+\t(lto_tag_is_tree_code_p): Check max value against MAX_TREE_CODES.\n+\t(lto_output_int_in_range): Change << to >> when shifting VAL.\n+\n 2011-06-01  Diego Novillo  <dnovillo@google.com>\n \n \t* lto-streamer-out.c (lto_output_ts_decl_non_common_tree_pointers):"}, {"sha": "3d42483bb75b190c964cb3cab4740cdca34a092b", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072339477c2005943492579576764494b07f1f06/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072339477c2005943492579576764494b07f1f06/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=072339477c2005943492579576764494b07f1f06", "patch": "@@ -950,7 +950,7 @@ lto_output_ts_decl_with_vis_tree_pointers (struct output_block *ob, tree expr,\n   if (DECL_ASSEMBLER_NAME_SET_P (expr))\n     lto_output_tree_or_ref (ob, DECL_ASSEMBLER_NAME (expr), ref_p);\n   else\n-    output_zero (ob);\n+    output_record_start (ob, LTO_null);\n \n   lto_output_tree_or_ref (ob, DECL_SECTION_NAME (expr), ref_p);\n   lto_output_tree_or_ref (ob, DECL_COMDAT_GROUP (expr), ref_p);\n@@ -1131,7 +1131,7 @@ lto_output_ts_binfo_tree_pointers (struct output_block *ob, tree expr,\n      is needed to build the empty BINFO node on the reader side.  */\n   FOR_EACH_VEC_ELT (tree, BINFO_BASE_BINFOS (expr), i, t)\n     lto_output_tree_or_ref (ob, t, ref_p);\n-  output_zero (ob);\n+  output_record_start (ob, LTO_null);\n \n   lto_output_tree_or_ref (ob, BINFO_OFFSET (expr), ref_p);\n   lto_output_tree_or_ref (ob, BINFO_VTABLE (expr), ref_p);\n@@ -1425,7 +1425,7 @@ lto_output_tree (struct output_block *ob, tree expr, bool ref_p)\n \n   if (expr == NULL_TREE)\n     {\n-      output_zero (ob);\n+      output_record_start (ob, LTO_null);\n       return;\n     }\n \n@@ -1481,7 +1481,7 @@ output_eh_try_list (struct output_block *ob, eh_catch first)\n       lto_output_tree_ref (ob, n->label);\n     }\n \n-  output_zero (ob);\n+  output_record_start (ob, LTO_null);\n }\n \n \n@@ -1496,7 +1496,7 @@ output_eh_region (struct output_block *ob, eh_region r)\n \n   if (r == NULL)\n     {\n-      output_zero (ob);\n+      output_record_start (ob, LTO_null);\n       return;\n     }\n \n@@ -1559,7 +1559,7 @@ output_eh_lp (struct output_block *ob, eh_landing_pad lp)\n {\n   if (lp == NULL)\n     {\n-      output_zero (ob);\n+      output_record_start (ob, LTO_null);\n       return;\n     }\n \n@@ -1628,9 +1628,9 @@ output_eh_regions (struct output_block *ob, struct function *fn)\n \t}\n     }\n \n-  /* The 0 either terminates the record or indicates that there are no\n-     eh_records at all.  */\n-  output_zero (ob);\n+  /* The LTO_null either terminates the record or indicates that there\n+     are no eh_records at all.  */\n+  output_record_start (ob, LTO_null);\n }\n \n \n@@ -1875,10 +1875,10 @@ output_bb (struct output_block *ob, basic_block bb, struct function *fn)\n \t      output_sleb128 (ob, region);\n \t    }\n \t  else\n-\t    output_zero (ob);\n+\t    output_record_start (ob, LTO_null);\n \t}\n \n-      output_zero (ob);\n+      output_record_start (ob, LTO_null);\n \n       for (bsi = gsi_start_phis (bb); !gsi_end_p (bsi); gsi_next (&bsi))\n \t{\n@@ -1891,7 +1891,7 @@ output_bb (struct output_block *ob, basic_block bb, struct function *fn)\n \t    output_phi (ob, phi);\n \t}\n \n-      output_zero (ob);\n+      output_record_start (ob, LTO_null);\n     }\n }\n \n@@ -2048,7 +2048,7 @@ output_function (struct cgraph_node *node)\n     output_bb (ob, bb, fn);\n \n   /* The terminator for this function.  */\n-  output_zero (ob);\n+  output_record_start (ob, LTO_null);\n \n   output_cfg (ob, fn);\n \n@@ -2162,7 +2162,7 @@ output_unreferenced_globals (cgraph_node_set set, varpool_node_set vset)\n       }\n   symbol_alias_set_destroy (defined);\n \n-  output_zero (ob);\n+  output_record_start (ob, LTO_null);\n \n   produce_asm (ob, NULL);\n   destroy_output_block (ob);"}, {"sha": "9de24fff63e5e6d1e9779421c9a412ba265e1e85", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/072339477c2005943492579576764494b07f1f06/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/072339477c2005943492579576764494b07f1f06/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=072339477c2005943492579576764494b07f1f06", "patch": "@@ -186,7 +186,7 @@ enum LTO_tags\n \n      Conversely, to map between LTO tags and tree/gimple codes, the\n      reverse operation must be applied.  */\n-  LTO_bb0 = 1 + NUM_TREE_CODES + LAST_AND_UNUSED_GIMPLE_CODE,\n+  LTO_bb0 = 1 + MAX_TREE_CODES + LAST_AND_UNUSED_GIMPLE_CODE,\n   LTO_bb1,\n \n   /* EH region holding the previous statement.  */\n@@ -957,7 +957,7 @@ extern VEC(lto_out_decl_state_ptr, heap) *lto_function_decl_states;\n static inline bool\n lto_tag_is_tree_code_p (enum LTO_tags tag)\n {\n-  return tag > LTO_null && (unsigned) tag <= NUM_TREE_CODES;\n+  return tag > LTO_null && (unsigned) tag <= MAX_TREE_CODES;\n }\n \n \n@@ -1226,11 +1226,11 @@ lto_output_int_in_range (struct lto_output_stream *obs,\n   val -= min;\n   lto_output_1_stream (obs, val & 255);\n   if (range >= 0xff)\n-    lto_output_1_stream (obs, (val << 8) & 255);\n+    lto_output_1_stream (obs, (val >> 8) & 255);\n   if (range >= 0xffff)\n-    lto_output_1_stream (obs, (val << 16) & 255);\n+    lto_output_1_stream (obs, (val >> 16) & 255);\n   if (range >= 0xffffff)\n-    lto_output_1_stream (obs, (val << 24) & 255);\n+    lto_output_1_stream (obs, (val >> 24) & 255);\n }\n \n /* Input VAL into OBS and verify it is in range MIN...MAX that is supposed"}]}