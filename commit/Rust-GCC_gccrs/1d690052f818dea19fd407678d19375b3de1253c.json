{"sha": "1d690052f818dea19fd407678d19375b3de1253c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ2OTAwNTJmODE4ZGVhMTlmZDQwNzY3OGQxOTM3NWIzZGUxMjUzYw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-01-19T03:06:55Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-01-19T03:06:55Z"}, "message": "20020118-1.c: New.\n\n2002-01-18  Aldy Hernandez  <aldyh@redhat.com>\n\n        * gcc.dg/20020118-1.c: New.\n\n        * tm.texi (STARTING_FRAME_PHASE): Document.\n\n        * function.c (assign_stack_local_1): Adjust x_frame_offset with\n        STARTING_FRAME_PHASE.\n        (STARTING_FRAME_PHASE): New.\n        (instantiate_virtual_regs): Check saneness of\n        STARTING_FRAME_PHASE.\n\n        * rs6000.h (STARTING_FRAME_PHASE): New.\n\nFrom-SVN: r49006", "tree": {"sha": "57f9b0ff876cce6890a9cbd4f22cfe7d8b273f21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57f9b0ff876cce6890a9cbd4f22cfe7d8b273f21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d690052f818dea19fd407678d19375b3de1253c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d690052f818dea19fd407678d19375b3de1253c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d690052f818dea19fd407678d19375b3de1253c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d690052f818dea19fd407678d19375b3de1253c/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4dd8c0932b7e2561fd5cc1bb95dbb1462b505c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dd8c0932b7e2561fd5cc1bb95dbb1462b505c08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dd8c0932b7e2561fd5cc1bb95dbb1462b505c08"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "20612cc687af74dd1bd34c23ed97d19edfbc70d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d690052f818dea19fd407678d19375b3de1253c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d690052f818dea19fd407678d19375b3de1253c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d690052f818dea19fd407678d19375b3de1253c", "patch": "@@ -1,3 +1,15 @@\n+2002-01-18  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * doc/tm.texi (STARTING_FRAME_PHASE): Document.\n+\n+        * function.c (assign_stack_local_1): Adjust x_frame_offset with\n+        STARTING_FRAME_PHASE.\n+        (STARTING_FRAME_PHASE): New.\n+        (instantiate_virtual_regs): Check saneness of\n+        STARTING_FRAME_PHASE.\n+\n+        * config/rs6000/rs6000.h (STARTING_FRAME_PHASE): New.\n+\n 2002-01-19  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/sh/sh.md (movdf_i4 split): Fix alter_subreg calls."}, {"sha": "d00b7ed44f17a881aa62454652efff73056afa22", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d690052f818dea19fd407678d19375b3de1253c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d690052f818dea19fd407678d19375b3de1253c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=1d690052f818dea19fd407678d19375b3de1253c", "patch": "@@ -1399,6 +1399,11 @@ typedef struct rs6000_stack {\n    + RS6000_VARARGS_AREA\t\t\t\t\t\t\\\n    + RS6000_SAVE_AREA)\n \n+/* How far (in bytes) is the start of the frame from the stack\n+   alignment.  For ppc 32bits, the stack is aligned to 128 bits, but\n+   the frame starts 64bits later.  */\n+#define STARTING_FRAME_PHASE (TARGET_32BIT ? 8 : 0)\n+\n /* Offset from the stack pointer register to an item dynamically\n    allocated on the stack, e.g., by `alloca'.\n "}, {"sha": "bb296eee3865af0e09a608e8c6816d98dec46ad6", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d690052f818dea19fd407678d19375b3de1253c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d690052f818dea19fd407678d19375b3de1253c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=1d690052f818dea19fd407678d19375b3de1253c", "patch": "@@ -2598,6 +2598,18 @@ value @code{STARTING_FRAME_OFFSET}.\n @c i'm not sure if the above is still correct.. had to change it to get\n @c rid of an overfull.  --mew 2feb93\n \n+@findex STARTING_FRAME_PHASE\n+@item STARTING_FRAME_PHASE\n+This option species how many bytes the frame is out of phase from the\n+stack alignment.\n+\n+For example, some ports assume a stack alignment of 128 bits, but the\n+start of the frame is 64 bits displaced from this alignment.  In this\n+case, you would define @code{STARTING_FRAME_PHASE} to be 8.\n+\n+This macro defaults to 0, so there is no need to define it if the start\n+of the frame maintains the stack alignment.\n+\n @findex STACK_POINTER_OFFSET\n @item STACK_POINTER_OFFSET\n Offset from the stack pointer register to the first location at which"}, {"sha": "cd397579865abbb0438e43a973029a1251400e39", "filename": "gcc/function.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d690052f818dea19fd407678d19375b3de1253c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d690052f818dea19fd407678d19375b3de1253c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=1d690052f818dea19fd407678d19375b3de1253c", "patch": "@@ -68,6 +68,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define LOCAL_ALIGNMENT(TYPE, ALIGNMENT) ALIGNMENT\n #endif\n \n+#ifndef STARTING_FRAME_PHASE\n+#define STARTING_FRAME_PHASE 0\n+#endif\n+\n /* Some systems use __main in a way incompatible with its use in gcc, in these\n    cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n    give the same symbol without quotes for an alternative entry point.  You\n@@ -567,9 +571,9 @@ assign_stack_local_1 (mode, size, align, function)\n      like.  So we instead assume that ALIGNMENT is a power of two and\n      use logical operations which are unambiguous.  */\n #ifdef FRAME_GROWS_DOWNWARD\n-  function->x_frame_offset = FLOOR_ROUND (function->x_frame_offset, alignment);\n+  function->x_frame_offset = FLOOR_ROUND (function->x_frame_offset - STARTING_FRAME_PHASE, alignment) + STARTING_FRAME_PHASE;\n #else\n-  function->x_frame_offset = CEIL_ROUND (function->x_frame_offset, alignment);\n+  function->x_frame_offset = CEIL_ROUND (function->x_frame_offset - STARTING_FRAME_PHASE, alignment) + STARTING_FRAME_PHASE;\n #endif\n \n   /* On a big-endian machine, if we are allocating more space than we will use,\n@@ -3477,6 +3481,21 @@ instantiate_virtual_regs (fndecl, insns)\n   rtx insn;\n   unsigned int i;\n \n+  if (STARTING_FRAME_PHASE > 0)\n+    {\n+      /* Make sure the frame offset and phase displacement are aligned as\n+\t advertised.\n+\n+\t Only do the sanity check if we have a STARTING_FRAME_PHASE,\n+\t else we might trigger this abort on ports who claim to have\n+\t STARTING_FRAME_OFFSET aligned properly, but don't.  I suppose\n+\t we could enable this and fix those ports.  */\n+\n+      if ((STARTING_FRAME_OFFSET + STARTING_FRAME_PHASE)\n+\t  % (STACK_BOUNDARY / BITS_PER_UNIT))\n+\tabort ();\n+    }\n+\n   /* Compute the offsets to use for this function.  */\n   in_arg_offset = FIRST_PARM_OFFSET (fndecl);\n   var_offset = STARTING_FRAME_OFFSET;"}]}