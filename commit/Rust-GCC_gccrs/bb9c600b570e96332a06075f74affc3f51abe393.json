{"sha": "bb9c600b570e96332a06075f74affc3f51abe393", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI5YzYwMGI1NzBlOTYzMzJhMDYwNzVmNzRhZmZjM2Y1MWFiZTM5Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-05-15T09:37:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-05-15T09:37:57Z"}, "message": "[multiple changes]\n\n2012-05-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_eval.adb (Subtypes_Statically_Match): In Ada 2012, static\n\tmatching requires matching of static subtype predicates as well.\n\n2012-05-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_case.adb (Analyze_Choices): If the subtype of the\n\texpression has a non-static predicate, the case alternatives\n\tmust cover the base type.\n\n2012-05-15  Tristan Gingold  <gingold@adacore.com>\n\n\t* a-calend-vms.ads: Add pragma export to Split and Time_Of.\n\tMerge comments from a-calend.ads to minimize differences.\n\n2012-05-15  Sergey Rybin  <rybin@adacore.com frybin>\n\n\t* gnat_ugn.texi: gnatmetric: add a small example that demonstrates\n\tthe difference between control coupling and unit coupling.\n\n2012-05-15  Tristan Gingold  <gingold@adacore.com>\n\n\t* bindgen.adb (Gen_Header): Remove code to emit LE_Set.\n\t(Gen_Finalize_Library): Replace test with\n\ta call to __gnat_reraise_library_exception_if_any.\n\t* s-soflin.ads (Library_Exception): Do not export.\n\t(Library_Exception_Set): Likewise.\n\t* a-except-2005.ads, a-except-2005.adb\n\t(Reraise_Library_Exception_If_Any): New procedure.\n\nFrom-SVN: r187509", "tree": {"sha": "0bf23f114d97e5a8f1413d50d35b32ce8ee4119f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf23f114d97e5a8f1413d50d35b32ce8ee4119f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb9c600b570e96332a06075f74affc3f51abe393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb9c600b570e96332a06075f74affc3f51abe393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb9c600b570e96332a06075f74affc3f51abe393", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb9c600b570e96332a06075f74affc3f51abe393/comments", "author": null, "committer": null, "parents": [{"sha": "c4c768ddedd306d53d4b32166816c974c14e0f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4c768ddedd306d53d4b32166816c974c14e0f61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4c768ddedd306d53d4b32166816c974c14e0f61"}], "stats": {"total": 285, "additions": 233, "deletions": 52}, "files": [{"sha": "0b9c112cb15a2e3d8d0272ce4c5d5302353ad353", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bb9c600b570e96332a06075f74affc3f51abe393", "patch": "@@ -1,3 +1,34 @@\n+2012-05-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_eval.adb (Subtypes_Statically_Match): In Ada 2012, static\n+\tmatching requires matching of static subtype predicates as well.\n+\n+2012-05-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_case.adb (Analyze_Choices): If the subtype of the\n+\texpression has a non-static predicate, the case alternatives\n+\tmust cover the base type.\n+\n+2012-05-15  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* a-calend-vms.ads: Add pragma export to Split and Time_Of.\n+\tMerge comments from a-calend.ads to minimize differences.\n+\n+2012-05-15  Sergey Rybin  <rybin@adacore.com frybin>\n+\n+\t* gnat_ugn.texi: gnatmetric: add a small example that demonstrates\n+\tthe difference between control coupling and unit coupling.\n+\n+2012-05-15  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* bindgen.adb (Gen_Header): Remove code to emit LE_Set.\n+\t(Gen_Finalize_Library): Replace test with\n+\ta call to __gnat_reraise_library_exception_if_any.\n+\t* s-soflin.ads (Library_Exception): Do not export.\n+\t(Library_Exception_Set): Likewise.\n+\t* a-except-2005.ads, a-except-2005.adb\n+\t(Reraise_Library_Exception_If_Any): New procedure.\n+\n 2012-05-15  Geert Bosch  <bosch@adacore.com>\n \n \t* sem_ch9.adb (Allows_Lock_Free_Implementation): out or in out"}, {"sha": "134882b0d4f729d340438a4805792c4919419ef4", "filename": "gcc/ada/a-calend-vms.ads", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fa-calend-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fa-calend-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend-vms.ads?ref=bb9c600b570e96332a06075f74affc3f51abe393", "patch": "@@ -33,28 +33,31 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is the Alpha/VMS version\n+--  This is the OpenVMS version\n \n with System.OS_Primitives;\n \n package Ada.Calendar is\n \n-   package OSP renames System.OS_Primitives;\n-\n    type Time is private;\n \n-   --  Declarations representing limits of allowed local time values. Note\n-   --  that these do NOT constrain the possible stored values of time which\n-   --  may well permit a larger range of times (this is explicitly allowed\n-   --  in Ada 95).\n+   --  Declarations representing limits of allowed local time values. Note that\n+   --  these do NOT constrain the possible stored values of time which may well\n+   --  permit a larger range of times (this is explicitly allowed in Ada 95).\n \n    subtype Year_Number  is Integer range 1901 .. 2399;\n    subtype Month_Number is Integer range 1 .. 12;\n    subtype Day_Number   is Integer range 1 .. 31;\n \n+   --  A Day_Duration value of 86_400.0 designates a new day\n+\n    subtype Day_Duration is Duration range 0.0 .. 86_400.0;\n \n    function Clock return Time;\n+   --  The returned time value is the number of nanoseconds since the start\n+   --  of Ada time (1901-01-01 00:00:00.0 UTC). If leap seconds are enabled,\n+   --  the result will contain all elapsed leap seconds since the start of\n+   --  Ada time until now.\n \n    function Year    (Date : Time) return Year_Number;\n    function Month   (Date : Time) return Month_Number;\n@@ -67,17 +70,39 @@ package Ada.Calendar is\n       Month   : out Month_Number;\n       Day     : out Day_Number;\n       Seconds : out Day_Duration);\n+   --  Break down a time value into its date components set in the current\n+   --  time zone. If Split is called on a time value created using Ada 2005\n+   --  Time_Of in some arbitrary time zone, the input value will always be\n+   --  interpreted as relative to the local time zone.\n \n    function Time_Of\n      (Year    : Year_Number;\n       Month   : Month_Number;\n       Day     : Day_Number;\n       Seconds : Day_Duration := 0.0) return Time;\n+   --  GNAT Note: Normally when procedure Split is called on a Time value\n+   --  result of a call to function Time_Of, the out parameters of procedure\n+   --  Split are identical to the in parameters of function Time_Of. However,\n+   --  when a non-existent time of day is specified, the values for Seconds\n+   --  may or may not be different. This may happen when Daylight Saving Time\n+   --  (DST) is in effect, on the day when switching to DST, if Seconds\n+   --  specifies a time of day in the hour that does not exist. For example,\n+   --  in New York:\n+   --\n+   --    Time_Of (Year => 1998, Month => 4, Day => 5, Seconds => 10740.0)\n+   --\n+   --  will return a Time value T. If Split is called on T, the resulting\n+   --  Seconds may be 14340.0 (3:59:00) instead of 10740.0 (2:59:00 being\n+   --  a time that not exist).\n \n    function \"+\" (Left : Time;     Right : Duration) return Time;\n    function \"+\" (Left : Duration; Right : Time)     return Time;\n    function \"-\" (Left : Time;     Right : Duration) return Time;\n    function \"-\" (Left : Time;     Right : Time)     return Duration;\n+   --  The first three functions will raise Time_Error if the resulting time\n+   --  value is less than the start of Ada time in UTC or greater than the\n+   --  end of Ada time in UTC. The last function will raise Time_Error if the\n+   --  resulting difference cannot fit into a duration value.\n \n    function \"<\"  (Left, Right : Time) return Boolean;\n    function \"<=\" (Left, Right : Time) return Boolean;\n@@ -121,19 +146,25 @@ private\n    --  Relative Time is positive, whereas relative OS_Time is negative,\n    --  but this declaration makes for easier conversion.\n \n-   type Time is new OSP.OS_Time;\n+   type Time is new System.OS_Primitives.OS_Time;\n \n    Days_In_Month : constant array (Month_Number) of Day_Number :=\n                      (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);\n+   --  Days in month for non-leap year, leap year case is adjusted in code\n \n    Invalid_Time_Zone_Offset : Long_Integer;\n    pragma Import (C, Invalid_Time_Zone_Offset, \"__gnat_invalid_tzoff\");\n \n    function Is_Leap (Year : Year_Number) return Boolean;\n    --  Determine whether a given year is leap\n \n-   --  The following packages provide a target independent interface to the\n-   --  children of Calendar - Arithmetic, Formatting and Time_Zones.\n+   ----------------------------------------------------------\n+   -- Target-Independent Interface to Children of Calendar --\n+   ----------------------------------------------------------\n+\n+   --  The following packages provide a target-independent interface to the\n+   --  children of Calendar - Arithmetic, Conversions, Delays, Formatting and\n+   --  Time_Zones.\n \n    --  NOTE: Delays does not need a target independent interface because\n    --  VMS already has a target specific file for that package.\n@@ -168,6 +199,7 @@ private\n    ---------------------------\n \n    package Conversion_Operations is\n+\n       function To_Ada_Time (Unix_Time : Long_Integer) return Time;\n       --  Unix to Ada Epoch conversion\n \n@@ -231,6 +263,7 @@ private\n          Use_TZ      : Boolean;\n          Is_Historic : Boolean;\n          Time_Zone   : Long_Integer);\n+      pragma Export (Ada, Split, \"__gnat_split\");\n       --  Split a time value into its components. If flag Is_Historic is set,\n       --  this routine would try to use to the best of the OS's abilities the\n       --  time zone offset that was or will be in effect on Date. Set Use_TZ\n@@ -251,6 +284,7 @@ private\n          Use_TZ       : Boolean;\n          Is_Historic  : Boolean;\n          Time_Zone    : Long_Integer) return Time;\n+      pragma Export (Ada, Time_Of, \"__gnat_time_of\");\n       --  Given all the components of a date, return the corresponding time\n       --  value. Set Use_Day_Secs to use the value in Day_Secs, otherwise the\n       --  day duration will be calculated from Hour, Minute, Second and Sub_\n@@ -269,7 +303,8 @@ private\n    package Time_Zones_Operations is\n \n       function UTC_Time_Offset (Date : Time) return Long_Integer;\n-      --  Return the offset in seconds from UTC\n+      --  Return (in seconds) the difference between the local time zone and\n+      --  UTC time at a specific historic date.\n \n    end Time_Zones_Operations;\n "}, {"sha": "989280801ae6a7f578b809b569cd3260114c42df", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=bb9c600b570e96332a06075f74affc3f51abe393", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1287,6 +1287,19 @@ package body Ada.Exceptions is\n       Raise_Current_Excep (Excep.Id);\n    end Reraise;\n \n+   --------------------------------------\n+   -- Reraise_Library_Exception_If_Any --\n+   --------------------------------------\n+\n+   procedure Reraise_Library_Exception_If_Any is\n+      LE : Exception_Occurrence;\n+   begin\n+      if Library_Exception_Set then\n+         LE := Library_Exception;\n+         Raise_From_Controlled_Operation (LE);\n+      end if;\n+   end Reraise_Library_Exception_If_Any;\n+\n    ------------------------\n    -- Reraise_Occurrence --\n    ------------------------"}, {"sha": "3f4b17a8d3a3b525e5b51c2dd339086f248ec909", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=bb9c600b570e96332a06075f74affc3f51abe393", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -236,6 +236,13 @@ private\n    --  Raise Program_Error, providing information about X (an exception raised\n    --  during a controlled operation) in the exception message.\n \n+   procedure Reraise_Library_Exception_If_Any;\n+   pragma Export\n+     (Ada, Reraise_Library_Exception_If_Any,\n+           \"__gnat_reraise_library_exception_if_any\");\n+   --  If there was an exception raised during library-level finalization,\n+   --  reraise the exception.\n+\n    procedure Reraise_Occurrence_Always (X : Exception_Occurrence);\n    pragma No_Return (Reraise_Occurrence_Always);\n    --  This differs from Raise_Occurrence only in that the caller guarantees"}, {"sha": "686082d61ac5bf65b22b602b319335d13975cdc7", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=bb9c600b570e96332a06075f74affc3f51abe393", "patch": "@@ -1357,19 +1357,6 @@ package body Bindgen is\n       procedure Gen_Header is\n       begin\n          WBI (\"   procedure finalize_library is\");\n-\n-         --  The following flag is used to check for library-level exceptions\n-         --  raised during finalization. Symbol comes from System.Soft_Links.\n-         --  VM targets use regular Ada to reference the entity.\n-\n-         if VM_Target = No_VM then\n-            WBI (\"      LE_Set : Boolean;\");\n-\n-            Set_String (\"      pragma Import (Ada, LE_Set, \");\n-            Set_String (\"\"\"__gnat_library_exception_set\"\");\");\n-            Write_Statement_Buffer;\n-         end if;\n-\n          WBI (\"   begin\");\n       end Gen_Header;\n \n@@ -1569,27 +1556,17 @@ package body Bindgen is\n          --  and the routine necessary to raise it.\n \n          if VM_Target = No_VM then\n-            WBI (\"      if LE_Set then\");\n-            WBI (\"         declare\");\n-            WBI (\"            LE : Ada.Exceptions.Exception_Occurrence;\");\n-\n-            Set_String (\"            pragma Import (Ada, LE, \");\n-            Set_String (\"\"\"__gnat_library_exception\"\");\");\n-            Write_Statement_Buffer;\n-\n-            Set_String (\"            procedure Raise_From_Controlled_\");\n-            Set_String (\"Operation (X : Ada.Exceptions.Exception_\");\n-            Set_String (\"Occurrence);\");\n-            Write_Statement_Buffer;\n+            WBI (\"      declare\");\n+            WBI (\"         procedure Reraise_Library_Exception_If_Any;\");\n \n-            Set_String (\"            pragma Import (Ada, Raise_From_\");\n-            Set_String (\"Controlled_Operation, \");\n-            Set_String (\"\"\"__gnat_raise_from_controlled_operation\"\");\");\n+            Set_String (\"            pragma Import (Ada, \");\n+            Set_String (\"Reraise_Library_Exception_If_Any, \");\n+            Set_String (\"\"\"__gnat_reraise_library_exception_if_any\"\");\");\n             Write_Statement_Buffer;\n \n-            WBI (\"         begin\");\n-            WBI (\"            Raise_From_Controlled_Operation (LE);\");\n-            WBI (\"         end;\");\n+            WBI (\"      begin\");\n+            WBI (\"         Reraise_Library_Exception_If_Any;\");\n+            WBI (\"      end;\");\n \n          --  VM-specific code, use regular Ada to produce the desired behavior\n \n@@ -1599,9 +1576,10 @@ package body Bindgen is\n             Set_String (\"         Ada.Exceptions.Reraise_Occurrence (\");\n             Set_String (\"System.Soft_Links.Library_Exception);\");\n             Write_Statement_Buffer;\n+\n+            WBI (\"      end if;\");\n          end if;\n \n-         WBI (\"      end if;\");\n          WBI (\"   end finalize_library;\");\n          WBI (\"\");\n       end if;"}, {"sha": "6adfb207cc495cd4d66458cc7db637b5eafd6fa4", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 76, "deletions": 2, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=bb9c600b570e96332a06075f74affc3f51abe393", "patch": "@@ -14954,14 +14954,88 @@ upon units that define subprograms are counted, so control fan-out coupling\n is reported for all units, but control fan-in coupling - only for the units\n that define subprograms.\n \n+The following simple example illustrates the difference between unit coupling\n+and control coupling metrics:\n \n+@smallexample @c ada\n+package Lib_1 is\n+    function F_1 (I : Integer) return Integer;\n+end Lib_1;\n+\n+package Lib_2 is\n+    type T_2 is new Integer;\n+end Lib_2;\n+\n+package body Lib_1 is\n+    function F_1 (I : Integer) return Integer is\n+    begin\n+       return I + 1;\n+    end F_1;\n+end Lib_1;\n+\n+with Lib_2; use Lib_2;\n+package Pack is\n+    Var : T_2;\n+    function Fun (I : Integer) return Integer;\n+end Pack;\n+\n+with Lib_1; use Lib_1;\n+package body Pack is\n+    function Fun (I : Integer) return Integer is\n+    begin\n+       return F_1 (I);\n+    end Fun;\n+end Pack;\n+@end smallexample\n+\n+@noindent\n+if we apply @command{gnatmetric} with @code{--coupling-all} option to these\n+units, the result will be:\n+\n+@smallexample\n+Coupling metrics:\n+=================\n+    Unit Lib_1 (C:\\customers\\662\\L406-007\\lib_1.ads)\n+       control fan-out coupling  : 0\n+       control fan-in coupling   : 1\n+       unit fan-out coupling     : 0\n+       unit fan-in coupling      : 1\n+\n+    Unit Pack (C:\\customers\\662\\L406-007\\pack.ads)\n+       control fan-out coupling  : 1\n+       control fan-in coupling   : 0\n+       unit fan-out coupling     : 2\n+       unit fan-in coupling      : 0\n+\n+    Unit Lib_2 (C:\\customers\\662\\L406-007\\lib_2.ads)\n+       control fan-out coupling  : 0\n+       unit fan-out coupling     : 0\n+       unit fan-in coupling      : 1\n+@end smallexample\n+\n+@noindent\n+The result does not contain values for object-oriented\n+coupling because none of the argument unit contains a tagged type and\n+therefore none of these units can be treated as a class.\n \n+@code{Pack} (considered as a program unit, that is spec+body) depends on two\n+units - @code{Lib_1} @code{and Lib_2}, therefore it has unit fan-out coupling\n+equals to 2. And nothing depend on it, so its unit fan-in coupling is 0 as\n+well as control fan-in coupling. Only one of the units @code{Pack} depends\n+upon defines a subprogram, so its control fan-out coupling is 1.\n \n+@code{Lib_2} depends on nothing, so fan-out metrics for it are 0. It does\n+not define a subprogram, so control fan-in metric cannot be applied to it,\n+and there is one unit that depends on it (@code{Pack}), so it has\n+unit fan-in coupling equals to 1.\n \n+@code{Lib_1} is similar to @code{Lib_2}, but it does define a subprogram.\n+So it has control fan-in coupling equals to 1 (because there is a unit\n+depending on it).\n \n When computing coupling metrics, @command{gnatmetric} counts only\n-dependencies between units that are arguments of the gnatmetric call.\n-Coupling metrics are program-wide (or project-wide) metrics, so to\n+dependencies between units that are arguments of the @command{gnatmetric}\n+call. Coupling metrics are program-wide (or project-wide) metrics, so to\n get a valid result, you should call @command{gnatmetric} for\n the whole set of sources that make up your program. It can be done\n by calling @command{gnatmetric} from the GNAT driver with @option{-U}"}, {"sha": "701b3bceff609e819ec287c4e09ec6662880d287", "filename": "gcc/ada/s-soflin.ads", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fs-soflin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fs-soflin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-soflin.ads?ref=bb9c600b570e96332a06075f74affc3f51abe393", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -289,12 +289,10 @@ package System.Soft_Links is\n    -------------------------------------\n \n    Library_Exception : EO;\n-   pragma Export (Ada, Library_Exception, \"__gnat_library_exception\");\n    --  Library-level finalization routines use this common reference to store\n    --  the first library-level exception which occurs during finalization.\n \n    Library_Exception_Set : Boolean := False;\n-   pragma Export (Ada, Library_Exception_Set, \"__gnat_library_exception_set\");\n    --  Used in conjunction with Library_Exception, set when an exception has\n    --  been stored.\n "}, {"sha": "3e37440a3c9f78dea50f7898a2f4fe7854665ccf", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=bb9c600b570e96332a06075f74affc3f51abe393", "patch": "@@ -803,8 +803,18 @@ package body Sem_Case is\n          --  bounds of its base type to determine the values covered by the\n          --  discrete choices.\n \n+         --  In Ada 2012, if the subtype has a non-static predicate the full\n+         --  range of the base type must be covered as well.\n+\n          if Is_OK_Static_Subtype (Subtyp) then\n-            Bounds_Type := Subtyp;\n+            if not Has_Predicates (Subtyp)\n+              or else Present (Static_Predicate (Subtyp))\n+            then\n+               Bounds_Type := Subtyp;\n+            else\n+               Bounds_Type := Choice_Type;\n+            end if;\n+\n          else\n             Bounds_Type := Choice_Type;\n          end if;"}, {"sha": "329a2677ba16394292b6644d453b3aa5e0432446", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb9c600b570e96332a06075f74affc3f51abe393/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=bb9c600b570e96332a06075f74affc3f51abe393", "patch": "@@ -4664,6 +4664,41 @@ package body Sem_Eval is\n    --  values match (RM 4.9.1(1)).\n \n    function Subtypes_Statically_Match (T1, T2 : Entity_Id) return Boolean is\n+\n+      function Predicates_Match return Boolean;\n+      --  In Ada 2012, subtypes statically match if their static predicates\n+      --  match as well.\n+\n+      function Predicates_Match return Boolean is\n+         Pred1 : Node_Id;\n+         Pred2 : Node_Id;\n+\n+      begin\n+         if Ada_Version < Ada_2012 then\n+            return True;\n+\n+         elsif Has_Predicates (T1) /= Has_Predicates (T2) then\n+            return False;\n+\n+         else\n+            Pred1 := Get_Rep_Item_For_Entity (T1, Name_Static_Predicate);\n+            Pred2 := Get_Rep_Item_For_Entity (T2, Name_Static_Predicate);\n+\n+            --  Subtypes statically match if the predicate comes from the\n+            --  same declaration, which can only happen if one is a subtype\n+            --  of the other and has no explicit predicate.\n+\n+            --  Suppress warnings on order of actuals, which is otherwise\n+            --  triggered by one of the two calls below.\n+\n+            pragma Warnings (Off);\n+            return Pred1 = Pred2\n+              or else (No (Pred1) and then Is_Subtype_Of (T1, T2))\n+              or else (No (Pred2) and then Is_Subtype_Of (T2, T1));\n+            pragma Warnings (On);\n+         end if;\n+      end Predicates_Match;\n+\n    begin\n       --  A type always statically matches itself\n \n@@ -4736,7 +4771,7 @@ package body Sem_Eval is\n             --  If the bounds are the same tree node, then match\n \n             if LB1 = LB2 and then HB1 = HB2 then\n-               return True;\n+               return Predicates_Match;\n \n             --  Otherwise bounds must be static and identical value\n "}]}