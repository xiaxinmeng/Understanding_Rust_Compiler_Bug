{"sha": "13868f4049616f5ac73bb89ce38474ada50ff28c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM4NjhmNDA0OTYxNmY1YWM3M2JiODljZTM4NDc0YWRhNTBmZjI4Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-09-03T14:56:53Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-09-03T14:56:53Z"}, "message": "cfgexpand.c (add_stack_var): Assert that the alignment is not zero.\n\n\t* cfgexpand.c (add_stack_var): Assert that the alignment is not zero.\n\t* tree-ssa-ccp.c (fold_builtin_alloca_for_var): Revert latest change.\n\tForce at least BITS_PER_UNIT alignment on the new variable.\n\nFrom-SVN: r178499", "tree": {"sha": "cd3c3578717b3ddf37c3ceddfbcd16e8ecd43868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd3c3578717b3ddf37c3ceddfbcd16e8ecd43868"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13868f4049616f5ac73bb89ce38474ada50ff28c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13868f4049616f5ac73bb89ce38474ada50ff28c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13868f4049616f5ac73bb89ce38474ada50ff28c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13868f4049616f5ac73bb89ce38474ada50ff28c/comments", "author": null, "committer": null, "parents": [{"sha": "1822c31f05cbcece4d73aa95ec824bd0086af445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1822c31f05cbcece4d73aa95ec824bd0086af445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1822c31f05cbcece4d73aa95ec824bd0086af445"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "8da81f7cbe3fa4435fcf14e6b55851f3b5e42cb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13868f4049616f5ac73bb89ce38474ada50ff28c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13868f4049616f5ac73bb89ce38474ada50ff28c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13868f4049616f5ac73bb89ce38474ada50ff28c", "patch": "@@ -1,3 +1,9 @@\n+2011-09-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cfgexpand.c (add_stack_var): Assert that the alignment is not zero.\n+\t* tree-ssa-ccp.c (fold_builtin_alloca_for_var): Revert latest change.\n+\tForce at least BITS_PER_UNIT alignment on the new variable.\n+\n 2011-09-02  Gary Funck <gary@intrepid.com>\n \n \t* opts.c (print_specific_help): Fix off-by-one compare in"}, {"sha": "1495633840bb11f73d497c8e28d36da9698f9826", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13868f4049616f5ac73bb89ce38474ada50ff28c/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13868f4049616f5ac73bb89ce38474ada50ff28c/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=13868f4049616f5ac73bb89ce38474ada50ff28c", "patch": "@@ -271,6 +271,8 @@ add_stack_var (tree decl)\n   if (v->size == 0)\n     v->size = 1;\n   v->alignb = align_local_variable (SSAVAR (decl));\n+  /* An alignment of zero can mightily confuse us later.  */\n+  gcc_assert (v->alignb != 0);\n \n   /* All variables are initially in their own partition.  */\n   v->representative = stack_vars_num;"}, {"sha": "fc59d386cad5c65bbb55438d533f8f90ea87dfc7", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13868f4049616f5ac73bb89ce38474ada50ff28c/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13868f4049616f5ac73bb89ce38474ada50ff28c/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=13868f4049616f5ac73bb89ce38474ada50ff28c", "patch": "@@ -1708,8 +1708,6 @@ fold_builtin_alloca_for_var (gimple stmt)\n     return NULL_TREE;\n \n   size = TREE_INT_CST_LOW (arg);\n-  if (size == 0)\n-    return NULL_TREE;\n \n   /* Heuristic: don't fold large vlas.  */\n   threshold = (unsigned HOST_WIDE_INT)PARAM_VALUE (PARAM_LARGE_STACK_FRAME);\n@@ -1726,6 +1724,8 @@ fold_builtin_alloca_for_var (gimple stmt)\n   elem_type = build_nonstandard_integer_type (BITS_PER_UNIT, 1);\n   n_elem = size * 8 / BITS_PER_UNIT;\n   align = MIN (size * 8, BIGGEST_ALIGNMENT);\n+  if (align < BITS_PER_UNIT)\n+    align = BITS_PER_UNIT;\n   array_type = build_array_type_nelts (elem_type, n_elem);\n   var = create_tmp_var (array_type, NULL);\n   DECL_ALIGN (var) = align;"}]}