{"sha": "2300b9ddbb131f85b67d78a46e3cc8364dc2e338", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMwMGI5ZGRiYjEzMWY4NWI2N2Q3OGE0NmUzY2M4MzY0ZGMyZTMzOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-02-19T01:27:56Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-02-19T01:27:56Z"}, "message": "frv.c, [...]: Follow spelling conventions.\n\n\t* config/frv/frv.c, config/frv/frv.h, config/frv/frv.md,\n\tconfig/frv/predicates.md: Follow spelling conventions.\n\nFrom-SVN: r122118", "tree": {"sha": "cacf82eac8b292b364f41964a5c3436fc7b7d2c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cacf82eac8b292b364f41964a5c3436fc7b7d2c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2300b9ddbb131f85b67d78a46e3cc8364dc2e338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2300b9ddbb131f85b67d78a46e3cc8364dc2e338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2300b9ddbb131f85b67d78a46e3cc8364dc2e338", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2300b9ddbb131f85b67d78a46e3cc8364dc2e338/comments", "author": null, "committer": null, "parents": [{"sha": "3b962ea0f7a52b2a9ebba04df33410d3dffd2c91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b962ea0f7a52b2a9ebba04df33410d3dffd2c91"}], "stats": {"total": 85, "additions": 44, "deletions": 41}, "files": [{"sha": "a2493c79d5d0f15a25d0360b51c3905eaec5af3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2300b9ddbb131f85b67d78a46e3cc8364dc2e338/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2300b9ddbb131f85b67d78a46e3cc8364dc2e338/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2300b9ddbb131f85b67d78a46e3cc8364dc2e338", "patch": "@@ -3,6 +3,9 @@\n \t* config/sh/divtab.c, config/sh/sh.c, config/sh/sh.h,\n \tconfig/sh/sh.md: Follow spelling conventions.\n \n+\t* config/frv/frv.c, config/frv/frv.h, config/frv/frv.md,\n+\tconfig/frv/predicates.md: Follow spelling conventions.\n+\n 2007-02-18  Roger Sayle  <roger@eyesopen.com>\n \n \tPR rtl-optimization/28173"}, {"sha": "cc18ac036a5468a691d6d5e8eb104c9932136da3", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2300b9ddbb131f85b67d78a46e3cc8364dc2e338/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2300b9ddbb131f85b67d78a46e3cc8364dc2e338/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=2300b9ddbb131f85b67d78a46e3cc8364dc2e338", "patch": "@@ -3360,7 +3360,7 @@ frv_legitimate_address_p (enum machine_mode mode,\n       break;\n \n     case CONST_INT:\n-      /* 12 bit immediate */\n+      /* 12-bit immediate */\n       if (condexec_p)\n \tret = FALSE;\n       else\n@@ -3411,7 +3411,7 @@ frv_legitimate_address_p (enum machine_mode mode,\n \t  break;\n \n \tcase CONST_INT:\n-          /* 12 bit immediate */\n+          /* 12-bit immediate */\n \t  if (condexec_p)\n \t    ret = FALSE;\n \t  else\n@@ -9483,7 +9483,7 @@ frv_rtx_costs (rtx x,\n   switch (code)\n     {\n     case CONST_INT:\n-      /* Make 12 bit integers really cheap.  */\n+      /* Make 12-bit integers really cheap.  */\n       if (IN_RANGE_P (INTVAL (x), -2048, 2047))\n \t{\n \t  *total = 0;"}, {"sha": "ab8704f6695e4d14eaf9783fd029015bf1c58960", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2300b9ddbb131f85b67d78a46e3cc8364dc2e338/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2300b9ddbb131f85b67d78a46e3cc8364dc2e338/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=2300b9ddbb131f85b67d78a46e3cc8364dc2e338", "patch": "@@ -1272,21 +1272,21 @@ extern enum reg_class reg_class_from_letter[];\n \n #define ZERO_P(x) (x == CONST0_RTX (GET_MODE (x)))\n \n-/* 6 bit signed immediate.  */\n+/* 6-bit signed immediate.  */\n #define CONST_OK_FOR_I(VALUE) IN_RANGE_P(VALUE, -32, 31)\n-/* 10 bit signed immediate.  */\n+/* 10-bit signed immediate.  */\n #define CONST_OK_FOR_J(VALUE) IN_RANGE_P(VALUE, -512, 511)\n /* Unused */\n #define CONST_OK_FOR_K(VALUE)  0\n-/* 16 bit signed immediate.  */\n+/* 16-bit signed immediate.  */\n #define CONST_OK_FOR_L(VALUE) IN_RANGE_P(VALUE, -32768, 32767)\n-/* 16 bit unsigned immediate.  */\n+/* 16-bit unsigned immediate.  */\n #define CONST_OK_FOR_M(VALUE)  IN_RANGE_P (VALUE, 0, 65535)\n-/* 12 bit signed immediate that is negative.  */\n+/* 12-bit signed immediate that is negative.  */\n #define CONST_OK_FOR_N(VALUE) IN_RANGE_P(VALUE, -2048, -1)\n /* Zero */\n #define CONST_OK_FOR_O(VALUE) ((VALUE) == 0)\n-/* 12 bit signed immediate that is negative.  */\n+/* 12-bit signed immediate that is negative.  */\n #define CONST_OK_FOR_P(VALUE) IN_RANGE_P(VALUE, 1, 2047)\n \n /* A C expression that defines the machine-dependent operand constraint letters"}, {"sha": "14c863f3c49ff39472dbb88739d3ba1f5f286641", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2300b9ddbb131f85b67d78a46e3cc8364dc2e338/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2300b9ddbb131f85b67d78a46e3cc8364dc2e338/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=2300b9ddbb131f85b67d78a46e3cc8364dc2e338", "patch": "@@ -133,11 +133,11 @@\n ;;     than a word wide.  Constraints for these operands should use `n' rather\n ;;     than `i'.\n ;;\n-;; 'I' First machine-dependent integer constant (6 bit signed ints).\n-;; 'J' Second machine-dependent integer constant (10 bit signed ints).\n+;; 'I' First machine-dependent integer constant (6-bit signed ints).\n+;; 'J' Second machine-dependent integer constant (10-bit signed ints).\n ;; 'K' Third machine-dependent integer constant (-2048).\n-;; 'L' Fourth machine-dependent integer constant (16 bit signed ints).\n-;; 'M' Fifth machine-dependent integer constant (16 bit unsigned ints).\n+;; 'L' Fourth machine-dependent integer constant (16-bit signed ints).\n+;; 'M' Fifth machine-dependent integer constant (16-bit unsigned ints).\n ;; 'N' Sixth machine-dependent integer constant (-2047..-1).\n ;; 'O' Seventh machine-dependent integer constant (zero).\n ;; 'P' Eighth machine-dependent integer constant (1..2047).\n@@ -2916,7 +2916,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 32 bit Integer arithmetic\n+;; :: 32-bit Integer arithmetic\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -2943,7 +2943,7 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"int\")])\n \n-;; Signed multiplication producing 64 bit results from 32 bit inputs\n+;; Signed multiplication producing 64-bit results from 32-bit inputs\n ;; Note, frv doesn't have a 32x32->32 bit multiply, but the compiler\n ;; will do the 32x32->64 bit multiply and use the bottom word.\n (define_expand \"mulsidi3\"\n@@ -2978,7 +2978,7 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"mul\")])\n \n-;; Unsigned multiplication producing 64 bit results from 32 bit inputs\n+;; Unsigned multiplication producing 64-bit results from 32-bit inputs\n (define_expand \"umulsidi3\"\n   [(set (match_operand:DI 0 \"even_gpr_operand\" \"\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"integer_register_operand\" \"\"))\n@@ -3051,7 +3051,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 64 bit Integer arithmetic\n+;; :: 64-bit Integer arithmetic\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -3230,7 +3230,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 32 bit floating point arithmetic\n+;; :: 32-bit floating point arithmetic\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -3325,7 +3325,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 64 bit floating point arithmetic\n+;; :: 64-bit floating point arithmetic\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -3420,7 +3420,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 32 bit Integer Shifts and Rotates\n+;; :: 32-bit Integer Shifts and Rotates\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -3475,7 +3475,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 64 bit Integer Shifts and Rotates\n+;; :: 64-bit Integer Shifts and Rotates\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -3527,11 +3527,11 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 32 Bit Integer Logical operations\n+;; :: 32-Bit Integer Logical operations\n ;; ::\n ;; ::::::::::::::::::::\n \n-;; Logical AND, 32 bit integers\n+;; Logical AND, 32-bit integers\n (define_insn \"andsi3_media\"\n   [(set (match_operand:SI 0 \"gpr_or_fpr_operand\" \"=d,f\")\n \t(and:SI (match_operand:SI 1 \"gpr_or_fpr_operand\" \"%d,f\")\n@@ -3559,7 +3559,7 @@\n   \"\"\n   \"\")\n \n-;; Inclusive OR, 32 bit integers\n+;; Inclusive OR, 32-bit integers\n (define_insn \"iorsi3_media\"\n   [(set (match_operand:SI 0 \"gpr_or_fpr_operand\" \"=d,f\")\n \t(ior:SI (match_operand:SI 1 \"gpr_or_fpr_operand\" \"%d,f\")\n@@ -3587,7 +3587,7 @@\n   \"\"\n   \"\")\n \n-;; Exclusive OR, 32 bit integers\n+;; Exclusive OR, 32-bit integers\n (define_insn \"xorsi3_media\"\n   [(set (match_operand:SI 0 \"gpr_or_fpr_operand\" \"=d,f\")\n \t(xor:SI (match_operand:SI 1 \"gpr_or_fpr_operand\" \"%d,f\")\n@@ -3615,7 +3615,7 @@\n   \"\"\n   \"\")\n \n-;; One's complement, 32 bit integers\n+;; One's complement, 32-bit integers\n (define_insn \"one_cmplsi2_media\"\n   [(set (match_operand:SI 0 \"gpr_or_fpr_operand\" \"=d,f\")\n \t(not:SI (match_operand:SI 1 \"gpr_or_fpr_operand\" \"d,f\")))]\n@@ -3643,11 +3643,11 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 64 Bit Integer Logical operations\n+;; :: 64-Bit Integer Logical operations\n ;; ::\n ;; ::::::::::::::::::::\n \n-;; Logical AND, 64 bit integers\n+;; Logical AND, 64-bit integers\n ;; (define_insn \"anddi3\"\n ;;   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n ;; \t(and:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n@@ -3656,7 +3656,7 @@\n ;;   \"anddi3 %0,%1,%2\"\n ;;   [(set_attr \"length\" \"4\")])\n \n-;; Inclusive OR, 64 bit integers\n+;; Inclusive OR, 64-bit integers\n ;; (define_insn \"iordi3\"\n ;;   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n ;; \t(ior:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n@@ -3665,7 +3665,7 @@\n ;;   \"iordi3 %0,%1,%2\"\n ;;   [(set_attr \"length\" \"4\")])\n \n-;; Exclusive OR, 64 bit integers\n+;; Exclusive OR, 64-bit integers\n ;; (define_insn \"xordi3\"\n ;;   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n ;; \t(xor:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n@@ -3674,7 +3674,7 @@\n ;;   \"xordi3 %0,%1,%2\"\n ;;   [(set_attr \"length\" \"4\")])\n \n-;; One's complement, 64 bit integers\n+;; One's complement, 64-bit integers\n ;; (define_insn \"one_cmpldi2\"\n ;;   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n ;; \t(not:DI (match_operand:DI 1 \"register_operand\" \"r\")))]"}, {"sha": "a1eaf9a799a13273f98629d6dab8416d22de229c", "filename": "gcc/config/frv/predicates.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2300b9ddbb131f85b67d78a46e3cc8364dc2e338/gcc%2Fconfig%2Ffrv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2300b9ddbb131f85b67d78a46e3cc8364dc2e338/gcc%2Fconfig%2Ffrv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Fpredicates.md?ref=2300b9ddbb131f85b67d78a46e3cc8364dc2e338", "patch": "@@ -105,7 +105,7 @@\n   return FALSE;\n })\n \n-;; Return 1 if operand is a GPR register or 12 bit signed immediate.\n+;; Return 1 if operand is a GPR register or 12-bit signed immediate.\n \n (define_predicate \"gpr_or_int12_operand\"\n   (match_code \"reg,subreg,const_int,const\")\n@@ -165,7 +165,7 @@\n   return FALSE;\n })\n \n-;; Return 1 if operand is a register or 10 bit signed immediate.\n+;; Return 1 if operand is a register or 10-bit signed immediate.\n \n (define_predicate \"gpr_or_int10_operand\"\n   (match_code \"reg,subreg,const_int\")\n@@ -486,7 +486,7 @@\n \t  || frv_legitimate_memory_operand (op, mode, FALSE));\n })\n \n-;; Return 1 if operand is a 12 bit signed immediate.\n+;; Return 1 if operand is a 12-bit signed immediate.\n \n (define_predicate \"int12_operand\"\n   (match_code \"const_int\")\n@@ -1110,7 +1110,7 @@\n   return ((INTVAL (op) & 0xffff) == 0);\n })\n \n-;; Return 1 if operand is a 16 bit unsigned immediate.\n+;; Return 1 if operand is a 16-bit unsigned immediate.\n \n (define_predicate \"uint16_operand\"\n   (match_code \"const_int\")\n@@ -1445,7 +1445,7 @@\n     }\n })\n \n-;; Return 1 if operand is a register or 6 bit signed immediate.\n+;; Return 1 if operand is a register or 6-bit signed immediate.\n \n (define_predicate \"fpr_or_int6_operand\"\n   (match_code \"reg,subreg,const_int\")\n@@ -1470,7 +1470,7 @@\n   return FPR_OR_PSEUDO_P (REGNO (op));\n })\n \n-;; Return 1 if operand is a 6 bit signed immediate.\n+;; Return 1 if operand is a 6-bit signed immediate.\n \n (define_predicate \"int6_operand\"\n   (match_code \"const_int\")\n@@ -1481,31 +1481,31 @@\n   return IN_RANGE_P (INTVAL (op), -32, 31);\n })\n \n-;; Return 1 if operand is a 5 bit signed immediate.\n+;; Return 1 if operand is a 5-bit signed immediate.\n \n (define_predicate \"int5_operand\"\n   (match_code \"const_int\")\n {\n   return GET_CODE (op) == CONST_INT && IN_RANGE_P (INTVAL (op), -16, 15);\n })\n \n-;; Return 1 if operand is a 5 bit unsigned immediate.\n+;; Return 1 if operand is a 5-bit unsigned immediate.\n \n (define_predicate \"uint5_operand\"\n   (match_code \"const_int\")\n {\n   return GET_CODE (op) == CONST_INT && IN_RANGE_P (INTVAL (op), 0, 31);\n })\n \n-;; Return 1 if operand is a 4 bit unsigned immediate.\n+;; Return 1 if operand is a 4-bit unsigned immediate.\n \n (define_predicate \"uint4_operand\"\n   (match_code \"const_int\")\n {\n   return GET_CODE (op) == CONST_INT && IN_RANGE_P (INTVAL (op), 0, 15);\n })\n \n-;; Return 1 if operand is a 1 bit unsigned immediate (0 or 1).\n+;; Return 1 if operand is a 1-bit unsigned immediate (0 or 1).\n \n (define_predicate \"uint1_operand\"\n   (match_code \"const_int\")"}]}