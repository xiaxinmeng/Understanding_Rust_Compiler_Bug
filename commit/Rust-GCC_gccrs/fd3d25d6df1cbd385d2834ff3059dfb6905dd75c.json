{"sha": "fd3d25d6df1cbd385d2834ff3059dfb6905dd75c", "node_id": "C_kwDOANBUbNoAKGZkM2QyNWQ2ZGYxY2JkMzg1ZDI4MzRmZjMwNTlkZmI2OTA1ZGQ3NWM", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-15T21:48:56Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-15T21:48:56Z"}, "message": "PR target/106273: Add earlyclobber to *andn<dwi>3_doubleword_bmi on x86_64.\n\nThis patch resolves PR target/106273 which is a wrong code regression\ncaused by the recent reorganization to split doubleword operations after\nreload on x86.  For the failing test case, the constraints on the\nandnti3_doubleword_bmi pattern allow reload to allocate the output and\noperand in overlapping but non-identical registers, i.e.\n\n(insn 45 44 66 2 (parallel [\n            (set (reg/v:TI 5 di [orig:96 i ] [96])\n                (and:TI (not:TI (reg:TI 39 r11 [orig:83 _2 ] [83]))\n                    (reg/v:TI 4 si [orig:100 i ] [100])))\n            (clobber (reg:CC 17 flags))\n        ]) \"pr106273.c\":13:5 562 {*andnti3_doubleword_bmi}\n\nwhere the output is in registers 5 and 6, and the second operand is\nregisters 4 and 5, which then leads to the incorrect split:\n\n(insn 113 44 114 2 (parallel [\n            (set (reg:DI 5 di [orig:96 i ] [96])\n                (and:DI (not:DI (reg:DI 39 r11 [orig:83 _2 ] [83]))\n                    (reg:DI 4 si [orig:100 i ] [100])))\n            (clobber (reg:CC 17 flags))\n        ]) \"pr106273.c\":13:5 566 {*andndi_1}\n\n(insn 114 113 66 2 (parallel [\n            (set (reg:DI 6 bp [ i+8 ])\n                (and:DI (not:DI (reg:DI 40 r12 [ _2+8 ]))\n                    (reg:DI 5 di [ i+8 ])))\n            (clobber (reg:CC 17 flags))\n        ]) \"pr106273.c\":13:5 566 {*andndi_1}\n\n[Notice that reg:DI 5 is set in the first instruction, but assumed\nto have its original value in the second].  My first thought was\nthat this could be fixed by swapping the order of the split instructions\n(which works in this case), but in the general case, it's impossible\nto handle (set (reg:TI x) (op (reg:TI x+1) (reg:TI x-1)).  Hence for\ncorrectness this pattern needs an earlyclobber \"=&r\", but we can also\nallow cases where the output is the same as one of the operands (using\nconstraint \"0\").  The other binary logic operations (AND, IOR, XOR)\nare unaffected as they constrain the output to match the first\noperand, but BMI's andn is a three-operand instruction which can\nlead to the overlapping cases described above.\n\n2022-07-15  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR target/106273\n\t* config/i386/i386.md (*andn<dwi>3_doubleword_bmi): Update the\n\tconstraints to reflect the output is earlyclobber, unless it is\n\tthe same register (pair) as one of the operands.\n\ngcc/testsuite/ChangeLog\n\tPR target/106273\n\t* gcc.target/i386/pr106273.c: New test case.", "tree": {"sha": "2c17fb85db50a2a5ac019b1d86cfb59b7144785f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c17fb85db50a2a5ac019b1d86cfb59b7144785f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd3d25d6df1cbd385d2834ff3059dfb6905dd75c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd3d25d6df1cbd385d2834ff3059dfb6905dd75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd3d25d6df1cbd385d2834ff3059dfb6905dd75c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd3d25d6df1cbd385d2834ff3059dfb6905dd75c/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "517fb1a78102df43f052c6934c27dd51d786aff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517fb1a78102df43f052c6934c27dd51d786aff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/517fb1a78102df43f052c6934c27dd51d786aff7"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "31637bd755fc08a573d897bd60cd2de6c40ea0fe", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3d25d6df1cbd385d2834ff3059dfb6905dd75c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3d25d6df1cbd385d2834ff3059dfb6905dd75c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=fd3d25d6df1cbd385d2834ff3059dfb6905dd75c", "patch": "@@ -10423,10 +10423,10 @@\n })\n \n (define_insn_and_split \"*andn<dwi>3_doubleword_bmi\"\n-  [(set (match_operand:<DWI> 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:<DWI> 0 \"register_operand\" \"=&r,r,r\")\n \t(and:<DWI>\n-\t  (not:<DWI> (match_operand:<DWI> 1 \"register_operand\" \"r\"))\n-\t  (match_operand:<DWI> 2 \"nonimmediate_operand\" \"ro\")))\n+\t  (not:<DWI> (match_operand:<DWI> 1 \"register_operand\" \"r,0,r\"))\n+\t  (match_operand:<DWI> 2 \"nonimmediate_operand\" \"ro,ro,0\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_BMI\"\n   \"#\""}, {"sha": "0f4221340c72db1f7ad6cb300b0dea928a0d748a", "filename": "gcc/testsuite/gcc.target/i386/pr106273.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd3d25d6df1cbd385d2834ff3059dfb6905dd75c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106273.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd3d25d6df1cbd385d2834ff3059dfb6905dd75c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106273.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106273.c?ref=fd3d25d6df1cbd385d2834ff3059dfb6905dd75c", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-Og -march=cascadelake\" } */\n+typedef unsigned char u8;\n+typedef unsigned short u16;\n+typedef unsigned long long u64;\n+\n+u8 g;\n+\n+void\n+foo (__int128 i, u8 *r)\n+{\n+  u16 a = __builtin_sub_overflow_p (0, i * g, 0);\n+  i ^= g & i;\n+  u64 s = (i >> 64) + i;\n+  *r = ((union { u16 a; u8 b[2]; }) a).b[1] + s;\n+}\n+\n+int\n+bar (void)\n+{\n+  u8 x;\n+  foo (5, &x);\n+  if (x != 5)\n+    __builtin_abort ();\n+  return 0;\n+}\n+/* { dg-final { scan-assembler-not \"andn\\[ \\\\t\\]+%rdi, %r11, %rdi\" } } */"}]}