{"sha": "800f4153ad5cc1f8b9c269a3fcf42bb515098acd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAwZjQxNTNhZDVjYzFmOGI5YzI2OWEzZmNmNDJiYjUxNTA5OGFjZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-09T11:35:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-09T11:35:43Z"}, "message": "(split_specs_attrs): New function.\n\nFrom-SVN: r12925", "tree": {"sha": "393ad2828ef3145f9b7ab5fbba5b0f7271d00ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/393ad2828ef3145f9b7ab5fbba5b0f7271d00ac5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/800f4153ad5cc1f8b9c269a3fcf42bb515098acd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/800f4153ad5cc1f8b9c269a3fcf42bb515098acd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/800f4153ad5cc1f8b9c269a3fcf42bb515098acd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/800f4153ad5cc1f8b9c269a3fcf42bb515098acd/comments", "author": null, "committer": null, "parents": [{"sha": "084c4c25c149ba8b5dbbfbf84d12c29d934f54a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084c4c25c149ba8b5dbbfbf84d12c29d934f54a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084c4c25c149ba8b5dbbfbf84d12c29d934f54a2"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "9a9c6759a43b31ae9a18788b23691d38e037bd81", "filename": "gcc/c-common.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/800f4153ad5cc1f8b9c269a3fcf42bb515098acd/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/800f4153ad5cc1f8b9c269a3fcf42bb515098acd/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=800f4153ad5cc1f8b9c269a3fcf42bb515098acd", "patch": "@@ -752,6 +752,76 @@ decl_attributes (node, attributes, prefix_attributes)\n \t}\n     }\n }\n+\n+/* Split SPECS_ATTRS, a list of declspecs and prefix attributes, into two\n+   lists.  SPECS_ATTRS may also be just a typespec (eg: RECORD_TYPE).\n+\n+   The head of the declspec list is stored in DECLSPECS.\n+   The head of the attribute list is stored in PREFIX_ATTRIBUTES.\n+\n+   Note that attributes in SPECS_ATTRS are stored in the TREE_PURPOSE of\n+   the list elements.  We drop the containing TREE_LIST nodes and link the\n+   resulting attributes together the way decl_attributes expects them.  */\n+\n+void\n+split_specs_attrs (specs_attrs, declspecs, prefix_attributes)\n+     tree specs_attrs;\n+     tree *declspecs, *prefix_attributes;\n+{\n+  tree t, s, a, next, specs, attrs;\n+\n+  /* This can happen in c++ (eg: decl: typespec initdecls ';').  */\n+  if (specs_attrs != NULL_TREE\n+      && TREE_CODE (specs_attrs) != TREE_LIST)\n+    {\n+      *declspecs = specs_attrs;\n+      *prefix_attributes = NULL_TREE;\n+      return;\n+    }\n+\n+  /* Remember to keep the lists in the same order, element-wise.  */\n+\n+  specs = s = NULL_TREE;\n+  attrs = a = NULL_TREE;\n+  for (t = specs_attrs; t; t = next)\n+    {\n+      next = TREE_CHAIN (t);\n+      /* Declspecs have a non-NULL TREE_VALUE.  */\n+      if (TREE_VALUE (t) != NULL_TREE)\n+\t{\n+\t  if (specs == NULL_TREE)\n+\t    specs = s = t;\n+\t  else\n+\t    {\n+\t      TREE_CHAIN (s) = t;\n+\t      s = t;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  if (attrs == NULL_TREE)\n+\t    attrs = a = TREE_PURPOSE (t);\n+\t  else\n+\t    {\n+\t      TREE_CHAIN (a) = TREE_PURPOSE (t);\n+\t      a = TREE_PURPOSE (t);\n+\t    }\n+\t  /* More attrs can be linked here, move A to the end.  */\n+\t  while (TREE_CHAIN (a) != NULL_TREE)\n+\t    a = TREE_CHAIN (a);\n+\t}\n+    }\n+\n+  /* Terminate the lists.  */\n+  if (s != NULL_TREE)\n+    TREE_CHAIN (s) = NULL_TREE;\n+  if (a != NULL_TREE)\n+    TREE_CHAIN (a) = NULL_TREE;\n+\n+  /* All done.  */\n+  *declspecs = specs;\n+  *prefix_attributes = attrs;\n+}\n \f\n /* Check a printf/fprintf/sprintf/scanf/fscanf/sscanf format against\n    a parameter list.  */"}]}