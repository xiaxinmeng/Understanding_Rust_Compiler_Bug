{"sha": "2e2b6ec156e3035297bd76edfd462d68d1f87314", "node_id": "C_kwDOANBUbNoAKDJlMmI2ZWMxNTZlMzAzNTI5N2JkNzZlZGZkNDYyZDY4ZDFmODczMTQ", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-04-15T17:35:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-04-15T17:35:02Z"}, "message": "Fix fallout of previous change on x86/Linux\n\ngcc/ada/\n\tPR bootstrap/109510\n\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <types>: Do not reset\n\talign to zero in any case.  Set TYPE_USER_ALIGN on the type only if\n\tit is an aggregate type, or else a type whose default alignment is\n\tspecifically capped on selected platforms.", "tree": {"sha": "278a5218251a2d32ad59147a04ac07b74bc406de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/278a5218251a2d32ad59147a04ac07b74bc406de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e2b6ec156e3035297bd76edfd462d68d1f87314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2b6ec156e3035297bd76edfd462d68d1f87314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e2b6ec156e3035297bd76edfd462d68d1f87314", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e2b6ec156e3035297bd76edfd462d68d1f87314/comments", "author": null, "committer": null, "parents": [{"sha": "4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f1c5e54d782b26304b0095ffb3ceb4c92c3c78d"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "20f43de9ea9f125ad6257474e96841eb8bad766b", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e2b6ec156e3035297bd76edfd462d68d1f87314/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e2b6ec156e3035297bd76edfd462d68d1f87314/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=2e2b6ec156e3035297bd76edfd462d68d1f87314", "patch": "@@ -4371,10 +4371,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  align = validate_alignment (Alignment (gnat_entity), gnat_entity,\n \t\t\t\t      TYPE_ALIGN (gnu_type));\n \n-\t  /* Treat confirming clauses on scalar types like the default.  */\n-\t  if (align == TYPE_ALIGN (gnu_type) && !AGGREGATE_TYPE_P (gnu_type))\n-\t    align = 0;\n-\n \t  /* Warn on suspiciously large alignments.  This should catch\n \t     errors about the (alignment,byte)/(size,bit) discrepancy.  */\n \t  if (align > BIGGEST_ALIGNMENT && Has_Alignment_Clause (gnat_entity))\n@@ -4657,6 +4653,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       /* If this is not an unconstrained array type, set some flags.  */\n       if (TREE_CODE (gnu_type) != UNCONSTRAINED_ARRAY_TYPE)\n \t{\n+\t  bool align_clause;\n+\n \t  /* Record the property that objects of tagged types are guaranteed to\n \t     be properly aligned.  This is necessary because conversions to the\n \t     class-wide type are translated into conversions to the root type,\n@@ -4669,8 +4667,20 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  if (is_by_ref && !VOID_TYPE_P (gnu_type))\n \t    TYPE_BY_REFERENCE_P (gnu_type) = 1;\n \n-\t  /* Record whether an alignment clause was specified.  */\n-\t  if (align > 0 && Present (Alignment_Clause (gnat_entity)))\n+\t  /* Record whether an alignment clause was specified.  At this point\n+\t     scalar types with a non-confirming clause have been wrapped into\n+\t     a record type, so only scalar types with a confirming clause are\n+\t     left untouched; we do not set the flag on them except if they are\n+\t     types whose default alignment is specifically capped in order not\n+\t     to lose the specified alignment.  */\n+\t  if ((AGGREGATE_TYPE_P (gnu_type)\n+\t       && Present (Alignment_Clause (gnat_entity)))\n+\t      || (double_float_alignment > 0\n+\t\t  && is_double_float_or_array (gnat_entity, &align_clause)\n+\t\t  && align_clause)\n+\t      || (double_scalar_alignment > 0\n+\t\t  && is_double_scalar_or_array (gnat_entity, &align_clause)\n+\t\t  && align_clause))\n \t    TYPE_USER_ALIGN (gnu_type) = 1;\n \n \t  /* Record whether a pragma Universal_Aliasing was specified.  */"}]}