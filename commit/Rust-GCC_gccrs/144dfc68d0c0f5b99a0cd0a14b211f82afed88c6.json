{"sha": "144dfc68d0c0f5b99a0cd0a14b211f82afed88c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ0ZGZjNjhkMGMwZjViOTlhMGNkMGExNGIyMTFmODJhZmVkODhjNg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-03T00:39:46Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-04T03:44:39Z"}, "message": "libstdc++: Move-only input iterator support in <memory> algorithms (LWG 3355)\n\nThis adds support for move-only input iterators in the ranges::unitialized_*\nalgorithms defined in <memory>, as per LWG 3355.  The only changes needed are to\nadd calls to std::move in the appropriate places and to use operator- instead of\nranges::distance because the latter cannot be used with a move-only iterator\nthat has a sized sentinel, as is the case here.  (This issue with\nranges::distance is LWG 3392.)\n\nlibstdc++-v3/ChangeLog:\n\n\tLWG 3355 The memory algorithms should support move-only input iterators\n\tintroduced by P1207\n\t* include/bits/ranges_uninitialized.h\n\t(__uninitialized_copy_fn::operator()): Use std::move to avoid attempting\n\tto copy __ifirst, which could be a move-only input iterator.  Use\n\toperator- instead of ranges::distance to compute distance from a sized\n\tsentinel.\n\t(__uninitialized_copy_n_fn::operator()): Likewise.\n\t(__uninitialized_move_fn::operator()): Likewise.\n\t(__uninitialized_move_n_fn::operator()): Likewise.\n\t(__uninitialized_destroy_fn::operator()): Use std::move to avoid\n\tattempting to copy __first.\n\t(__uninitialized_destroy_n_fn::operator()): Likewise.\n\t* testsuite/20_util/specialized_algorithms/destroy/constrained.cc:\n\tAugment test.\n\t* .../specialized_algorithms/uninitialized_copy/constrained.cc:\n\tLikewise.\n\t* .../specialized_algorithms/uninitialized_move/constrained.cc:\n\tLikewise.", "tree": {"sha": "fce1c69a345fe914fd8b7962e6277a183d155ebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fce1c69a345fe914fd8b7962e6277a183d155ebb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6/comments", "author": null, "committer": null, "parents": [{"sha": "26af9cd8af1b3b603434586a17127d8c3d2d8266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26af9cd8af1b3b603434586a17127d8c3d2d8266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26af9cd8af1b3b603434586a17127d8c3d2d8266"}], "stats": {"total": 119, "additions": 103, "deletions": 16}, "files": [{"sha": "3e4e58c1a7ce51cf0c05b502dc20d29798d41035", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=144dfc68d0c0f5b99a0cd0a14b211f82afed88c6", "patch": "@@ -1,5 +1,25 @@\n 2020-03-04  Patrick Palka  <ppalka@redhat.com>\n \n+\tLWG 3355 The memory algorithms should support move-only input iterators\n+\tintroduced by P1207\n+\t* include/bits/ranges_uninitialized.h\n+\t(__uninitialized_copy_fn::operator()): Use std::move to avoid attempting\n+\tto copy __ifirst, which could be a move-only input iterator.  Use\n+\toperator- instead of ranges::distance to compute distance from a sized\n+\tsentinel.\n+\t(__uninitialized_copy_n_fn::operator()): Likewise.\n+\t(__uninitialized_move_fn::operator()): Likewise.\n+\t(__uninitialized_move_n_fn::operator()): Likewise.\n+\t(__uninitialized_destroy_fn::operator()): Use std::move to avoid\n+\tattempting to copy __first.\n+\t(__uninitialized_destroy_n_fn::operator()): Likewise.\n+\t* testsuite/20_util/specialized_algorithms/destroy/constrained.cc:\n+\tAugment test.\n+\t* .../specialized_algorithms/uninitialized_copy/constrained.cc:\n+\tLikewise.\n+\t* .../specialized_algorithms/uninitialized_move/constrained.cc:\n+\tLikewise.\n+\n \t* testsuite/util/testsuite_iterators.h (test_range::get_iterator): Make\n \tprotected instead of private.\n \t(test_sized_range_sized_sent): New."}, {"sha": "d758078fc03a6bf986a53cf78550408c35caffe6", "filename": "libstdc++-v3/include/bits/ranges_uninitialized.h", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h?ref=144dfc68d0c0f5b99a0cd0a14b211f82afed88c6", "patch": "@@ -272,9 +272,10 @@ namespace ranges\n \t\t      && is_nothrow_assignable_v<_OutType&,\n \t\t\t\t\t\t iter_reference_t<_Iter>>)\n \t  {\n-\t    auto __d1 = ranges::distance(__ifirst, __ilast);\n-\t    auto __d2 = ranges::distance(__ofirst, __olast);\n-\t    return ranges::copy_n(__ifirst, std::min(__d1, __d2), __ofirst);\n+\t    auto __d1 = __ilast - __ifirst;\n+\t    auto __d2 = __olast - __ofirst;\n+\t    return ranges::copy_n(std::move(__ifirst), std::min(__d1, __d2),\n+\t\t\t\t  __ofirst);\n \t  }\n \telse\n \t  {\n@@ -283,7 +284,7 @@ namespace ranges\n \t\t ++__ofirst, (void)++__ifirst)\n \t      ::new (__detail::__voidify(*__ofirst)) _OutType(*__ifirst);\n \t    __guard.release();\n-\t    return {__ifirst, __ofirst};\n+\t    return {std::move(__ifirst), __ofirst};\n \t  }\n       }\n \n@@ -319,8 +320,9 @@ namespace ranges\n \t\t      && is_nothrow_assignable_v<_OutType&,\n \t\t\t\t\t\t iter_reference_t<_Iter>>)\n \t  {\n-\t    auto __d = ranges::distance(__ofirst, __olast);\n-\t    return ranges::copy_n(__ifirst, std::min(__n, __d), __ofirst);\n+\t    auto __d = __olast - __ofirst;\n+\t    return ranges::copy_n(std::move(__ifirst), std::min(__n, __d),\n+\t\t\t\t  __ofirst);\n \t  }\n \telse\n \t  {\n@@ -329,7 +331,7 @@ namespace ranges\n \t\t ++__ofirst, (void)++__ifirst, (void)--__n)\n \t      ::new (__detail::__voidify(*__ofirst)) _OutType(*__ifirst);\n \t    __guard.release();\n-\t    return {__ifirst, __ofirst};\n+\t    return {std::move(__ifirst), __ofirst};\n \t  }\n       }\n   };\n@@ -357,10 +359,10 @@ namespace ranges\n \t\t      && is_nothrow_assignable_v<_OutType&,\n \t\t\t\t\t\t iter_rvalue_reference_t<_Iter>>)\n \t  {\n-\t    auto __d1 = ranges::distance(__ifirst, __ilast);\n-\t    auto __d2 = ranges::distance(__ofirst, __olast);\n+\t    auto __d1 = __ilast - __ifirst;\n+\t    auto __d2 = __olast - __ofirst;\n \t    auto [__in, __out]\n-\t      = ranges::copy_n(std::make_move_iterator(__ifirst),\n+\t      = ranges::copy_n(std::make_move_iterator(std::move(__ifirst)),\n \t\t\t       std::min(__d1, __d2), __ofirst);\n \t    return {std::move(__in).base(), __out};\n \t  }\n@@ -372,7 +374,7 @@ namespace ranges\n \t      ::new (__detail::__voidify(*__ofirst))\n \t\t    _OutType(ranges::iter_move(__ifirst));\n \t    __guard.release();\n-\t    return {__ifirst, __ofirst};\n+\t    return {std::move(__ifirst), __ofirst};\n \t  }\n       }\n \n@@ -409,9 +411,9 @@ namespace ranges\n \t\t      && is_nothrow_assignable_v<_OutType&,\n \t\t\t\t\t\t iter_rvalue_reference_t<_Iter>>)\n \t  {\n-\t    auto __d = ranges::distance(__ofirst, __olast);\n+\t    auto __d = __olast - __ofirst;\n \t    auto [__in, __out]\n-\t      = ranges::copy_n(std::make_move_iterator(__ifirst),\n+\t      = ranges::copy_n(std::make_move_iterator(std::move(__ifirst)),\n \t\t\t       std::min(__n, __d), __ofirst);\n \t    return {std::move(__in).base(), __out};\n \t  }\n@@ -423,7 +425,7 @@ namespace ranges\n \t      ::new (__detail::__voidify(*__ofirst))\n \t\t    _OutType(ranges::iter_move(__ifirst));\n \t    __guard.release();\n-\t    return {__ifirst, __ofirst};\n+\t    return {std::move(__ifirst), __ofirst};\n \t  }\n       }\n   };\n@@ -524,7 +526,7 @@ namespace ranges\n     __destroy_fn::operator()(_Iter __first, _Sent __last) const noexcept\n     {\n       if constexpr (is_trivially_destructible_v<iter_value_t<_Iter>>)\n-\treturn ranges::next(__first, __last);\n+\treturn ranges::next(std::move(__first), __last);\n       else\n \t{\n \t  for (; __first != __last; ++__first)\n@@ -549,7 +551,7 @@ namespace ranges\n       operator()(_Iter __first, iter_difference_t<_Iter> __n) const noexcept\n       {\n \tif constexpr (is_trivially_destructible_v<iter_value_t<_Iter>>)\n-\t  return ranges::next(__first, __n);\n+\t  return ranges::next(std::move(__first), __n);\n \telse\n \t  {\n \t    for (; __n > 0; ++__first, (void)--__n)"}, {"sha": "89085d381edadf09762ef9d0256128ab647d876a", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/destroy/constrained.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fdestroy%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fdestroy%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fdestroy%2Fconstrained.cc?ref=144dfc68d0c0f5b99a0cd0a14b211f82afed88c6", "patch": "@@ -29,6 +29,9 @@\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n+using __gnu_test::test_range;\n+using __gnu_test::input_iterator_wrapper_nocopy;\n+\n namespace ranges = std::ranges;\n \n struct X\n@@ -69,6 +72,18 @@ test01()\n     }\n }\n \n+void\n+test02()\n+{\n+  // LWG 3355\n+    {\n+      int x[3] = {0};\n+      test_range<int, input_iterator_wrapper_nocopy> rx(x);\n+      ranges::destroy(rx);\n+      ranges::destroy_n(rx.begin(), 3);\n+    }\n+}\n+\n int\n main()\n {"}, {"sha": "ac5d74558d2616152e05429a74a96fe7b7830e41", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_copy/constrained.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_copy%2Fconstrained.cc?ref=144dfc68d0c0f5b99a0cd0a14b211f82afed88c6", "patch": "@@ -31,6 +31,9 @@\n \n using __gnu_test::test_input_range;\n using __gnu_test::test_forward_range;\n+using __gnu_test::test_range;\n+using __gnu_test::test_sized_range_sized_sent;\n+using __gnu_test::input_iterator_wrapper_nocopy;\n \n namespace ranges = std::ranges;\n \n@@ -150,6 +153,28 @@ test02()\n     }\n }\n \n+void\n+test03()\n+{\n+  // LWG 3355\n+    {\n+      int x[3] = {0};\n+      int y[3];\n+      test_sized_range_sized_sent<int, input_iterator_wrapper_nocopy> rx(x);\n+      ranges::uninitialized_copy(rx, y);\n+      ranges::uninitialized_copy_n(rx.begin(), 3, y, y+3);\n+    }\n+\n+    {\n+      int x[3] = {0};\n+      int y[3];\n+      test_range<int, input_iterator_wrapper_nocopy> rx(x);\n+      test_forward_range<int> ry(y);\n+      ranges::uninitialized_copy(rx, y);\n+      ranges::uninitialized_copy_n(rx.begin(), 3, ry.begin(), ry.end());\n+    }\n+}\n+\n int\n main()\n {"}, {"sha": "6b3544edc552d64ab7f30ce2b783503e4d9503ac", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_move/constrained.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_move%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144dfc68d0c0f5b99a0cd0a14b211f82afed88c6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_move%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_move%2Fconstrained.cc?ref=144dfc68d0c0f5b99a0cd0a14b211f82afed88c6", "patch": "@@ -31,6 +31,9 @@\n \n using __gnu_test::test_input_range;\n using __gnu_test::test_forward_range;\n+using __gnu_test::test_range;\n+using __gnu_test::test_sized_range_sized_sent;\n+using __gnu_test::input_iterator_wrapper_nocopy;\n \n namespace ranges = std::ranges;\n \n@@ -160,6 +163,28 @@ test02()\n     }\n }\n \n+void\n+test03()\n+{\n+  // LWG 3355\n+    {\n+      int x[3] = {0};\n+      int y[3];\n+      test_sized_range_sized_sent<int, input_iterator_wrapper_nocopy> rx(x);\n+      ranges::uninitialized_move(rx, y);\n+      ranges::uninitialized_move_n(rx.begin(), 3, y, y+3);\n+    }\n+\n+    {\n+      int x[3] = {0};\n+      int y[3];\n+      test_range<int, input_iterator_wrapper_nocopy> rx(x);\n+      test_forward_range<int> ry(y);\n+      ranges::uninitialized_move(rx, y);\n+      ranges::uninitialized_move_n(rx.begin(), 3, ry.begin(), ry.end());\n+    }\n+}\n+\n int\n main()\n {"}]}