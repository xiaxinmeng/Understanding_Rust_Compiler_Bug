{"sha": "eae6758d2b3d30b4f431b063ba98183fdac344a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFlNjc1OGQyYjNkMzBiNGY0MzFiMDYzYmE5ODE4M2ZkYWMzNDRhNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-24T08:42:37Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-24T08:42:37Z"}, "message": "decl.c (is_cplusplus_method): Check that the type of the first parameter (indirectly) has C++ convention too.\n\n\t* gcc-interface/decl.c (is_cplusplus_method): Check that the type of\n\tthe first parameter (indirectly) has C++ convention too.\n\nFrom-SVN: r230788", "tree": {"sha": "b4dbfa6c163d20f36f8325484ea23a7c647eda62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4dbfa6c163d20f36f8325484ea23a7c647eda62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eae6758d2b3d30b4f431b063ba98183fdac344a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae6758d2b3d30b4f431b063ba98183fdac344a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eae6758d2b3d30b4f431b063ba98183fdac344a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eae6758d2b3d30b4f431b063ba98183fdac344a6/comments", "author": null, "committer": null, "parents": [{"sha": "7d906d07ed736abc854db2e770d5e5e07730581c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d906d07ed736abc854db2e770d5e5e07730581c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d906d07ed736abc854db2e770d5e5e07730581c"}], "stats": {"total": 28, "additions": 24, "deletions": 4}, "files": [{"sha": "65cc3da8e4b0a9c69552b38ceab5d88a4838b902", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae6758d2b3d30b4f431b063ba98183fdac344a6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae6758d2b3d30b4f431b063ba98183fdac344a6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=eae6758d2b3d30b4f431b063ba98183fdac344a6", "patch": "@@ -1,3 +1,8 @@\n+2015-11-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (is_cplusplus_method): Check that the type of\n+\tthe first parameter (indirectly) has C++ convention too.\n+\n 2015-11-23  Olivier Hainque  <hainque@adacore.com>\n \n \t* system-aix.ads: Add Frontend_Exceptions flag."}, {"sha": "9994c679a40a66ef9237b9a1c04de78c4bd8ebc8", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eae6758d2b3d30b4f431b063ba98183fdac344a6/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eae6758d2b3d30b4f431b063ba98183fdac344a6/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=eae6758d2b3d30b4f431b063ba98183fdac344a6", "patch": "@@ -5403,9 +5403,28 @@ get_minimal_subprog_decl (Entity_Id gnat_entity)\n bool\n is_cplusplus_method (Entity_Id gnat_entity)\n {\n+  /* Check that the subprogram has C++ convention.  */\n   if (Convention (gnat_entity) != Convention_CPP)\n     return false;\n \n+  /* A constructor is a method on the C++ side.  We deal with it now because\n+     it is declared without the 'this' parameter in the sources and, although\n+     the front-end will create a version with the 'this' parameter for code\n+     generation purposes, we want to return true for both versions.  */\n+  if (Is_Constructor (gnat_entity))\n+    return true;\n+\n+  /* And that the type of the first parameter (indirectly) has it too.  */\n+  Entity_Id gnat_first = First_Formal (gnat_entity);\n+  if (No (gnat_first))\n+    return false;\n+\n+  Entity_Id gnat_type = Etype (gnat_first);\n+  if (Is_Access_Type (gnat_type))\n+    gnat_type = Directly_Designated_Type (gnat_type);\n+  if (Convention (gnat_type) != Convention_CPP)\n+    return false;\n+\n   /* This is the main case: C++ method imported as a primitive operation.\n      Note that a C++ class with no virtual functions can be imported as a\n      limited record type so the operation is not necessarily dispatching.  */\n@@ -5416,10 +5435,6 @@ is_cplusplus_method (Entity_Id gnat_entity)\n   if (Is_Subprogram (gnat_entity) && Is_Thunk (gnat_entity))\n     return true;\n \n-  /* A constructor is a method on the C++ side.  */\n-  if (Is_Constructor (gnat_entity))\n-    return true;\n-\n   /* This is set on the E_Subprogram_Type built for a dispatching call.  */\n   if (Is_Dispatch_Table_Entity (gnat_entity))\n     return true;"}]}