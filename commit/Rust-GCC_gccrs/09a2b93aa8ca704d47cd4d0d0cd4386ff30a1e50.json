{"sha": "09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlhMmI5M2FhOGNhNzA0ZDQ3Y2Q0ZDBkMGNkNDM4NmZmMzBhMWU1MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-29T02:13:52Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-29T02:13:52Z"}, "message": "mcore-protos.h: Remove the prototype for mcore_setup_incoming_varargs.\n\n\t* config/mcore/mcore-protos.h: Remove the prototype for\n\tmcore_setup_incoming_varargs.\n\t* config/mcore/mcore.c (TARGET_ASM_EXTERNAL_LIBCALL): New.\n\t(TARGET_PROMOTE_FUNCTION_ARGS): Likewise.\n\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n\t(mcore_setup_incoming_varargs): Make it static.  Receive the\n\tfirst argument by reference.  Add argument second_time.\n\t(mcore_external_libcall): New.\n\t(mcore_return_in_memory): Likewise.\n\t* config/mcore/mcore.h (PROMOTE_FUNCTION_ARGS): New.\n\t(PROMOTE_FUNCTION_RETURN): Likewise.\n\t(STRUCT_VALUE): Likewise.\n\t(RETURN_IN_MEMORY): Likewise.\n\t(SETUP_INCOMING_VARARGS): Likewise.\n\t(PROMOTE_PROTOTYPES): Likewise.\n\t(ASM_OUTPUT_EXTERNAL_LIBCALL): Likewise.\n\nFrom-SVN: r76835", "tree": {"sha": "42d7a8696bb93cd74083e2169e9588c5fbf6262e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42d7a8696bb93cd74083e2169e9588c5fbf6262e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50/comments", "author": null, "committer": null, "parents": [{"sha": "a7ed00da0403250b2a2c3536cad7a0e1fa6d7729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ed00da0403250b2a2c3536cad7a0e1fa6d7729"}], "stats": {"total": 108, "additions": 69, "deletions": 39}, "files": [{"sha": "ad1d1f441da55e189a21cccd59fc0f82675fac11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50", "patch": "@@ -1,3 +1,26 @@\n+2004-01-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/mcore/mcore-protos.h: Remove the prototype for\n+\tmcore_setup_incoming_varargs.\n+\t* config/mcore/mcore.c (TARGET_ASM_EXTERNAL_LIBCALL): New.\n+\t(TARGET_PROMOTE_FUNCTION_ARGS): Likewise.\n+\t(TARGET_PROMOTE_FUNCTION_RETURN): Likewise.\n+\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n+\t(mcore_setup_incoming_varargs): Make it static.  Receive the\n+\tfirst argument by reference.  Add argument second_time.\n+\t(mcore_external_libcall): New.\n+\t(mcore_return_in_memory): Likewise.\n+\t* config/mcore/mcore.h (PROMOTE_FUNCTION_ARGS): New.\n+\t(PROMOTE_FUNCTION_RETURN): Likewise.\n+\t(STRUCT_VALUE): Likewise.\n+\t(RETURN_IN_MEMORY): Likewise.\n+\t(SETUP_INCOMING_VARARGS): Likewise.\n+\t(PROMOTE_PROTOTYPES): Likewise.\n+\t(ASM_OUTPUT_EXTERNAL_LIBCALL): Likewise.\n+\n 2004-01-28  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/m32r/m32r-protos.h: Remove the prototype for"}, {"sha": "05272e7d9b752892bee353f953e1084ba84d29cc", "filename": "gcc/config/mcore/mcore-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h?ref=09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50", "patch": "@@ -1,5 +1,5 @@\n /* Prototypes for exported functions defined in mcore.c\n-   Copyright (C) 2000, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Nick Clifton (nickc@redhat.com)\n \n    This file is part of GCC.\n@@ -37,7 +37,6 @@ extern int          mcore_naked_function_p       \t(void);\n #ifdef TREE_CODE\n #ifdef HAVE_MACHINE_MODES\n extern int          mcore_function_arg_partial_nregs\t(CUMULATIVE_ARGS, enum machine_mode, tree, int);\n-extern void         mcore_setup_incoming_varargs\t(CUMULATIVE_ARGS, enum machine_mode, tree, int *);\n extern int          mcore_num_arg_regs           \t(enum machine_mode, tree);\n extern int          mcore_must_pass_on_stack     \t(enum machine_mode, tree);\n #endif /* HAVE_MACHINE_MODES */"}, {"sha": "167862814402a070d09ac350b96bbbe54bd31a68", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50", "patch": "@@ -1,5 +1,6 @@\n /* Output routines for Motorola MCore processor\n-   Copyright (C) 1993, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1999, 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -123,6 +124,7 @@ static int        try_constant_tricks           (long, int *, int *);\n static const char *     output_inline_const     (enum machine_mode, rtx *);\n static void       block_move_sequence           (rtx, rtx, rtx, rtx, int, int, int);\n static void       layout_mcore_frame            (struct mcore_frame *);\n+static void       mcore_setup_incoming_varargs\t(CUMULATIVE_ARGS *, enum machine_mode, tree, int *, int);\n static cond_type  is_cond_candidate             (rtx);\n static rtx        emit_new_cond_insn            (rtx, int);\n static rtx        conditionalize_block          (rtx);\n@@ -146,8 +148,14 @@ static int        mcore_const_costs            \t(rtx, RTX_CODE);\n static int        mcore_and_cost               \t(rtx);\n static int        mcore_ior_cost               \t(rtx);\n static bool       mcore_rtx_costs\t\t(rtx, int, int, int *);\n+static void       mcore_external_libcall\t(rtx);\n+static bool       mcore_return_in_memory\t(tree, tree);\n+\n \f\n /* Initialize the GCC target structure.  */\n+#undef  TARGET_ASM_EXTERNAL_LIBCALL\n+#define TARGET_ASM_EXTERNAL_LIBCALL\tmcore_external_libcall\n+\n #ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n #undef  TARGET_MERGE_DECL_ATTRIBUTES\n #define TARGET_MERGE_DECL_ATTRIBUTES\tmerge_dllimport_decl_attributes\n@@ -175,6 +183,21 @@ static bool       mcore_rtx_costs\t\t(rtx, int, int, int *);\n #undef  TARGET_MACHINE_DEPENDENT_REORG\n #define TARGET_MACHINE_DEPENDENT_REORG\tmcore_reorg\n \n+#undef  TARGET_PROMOTE_FUNCTION_ARGS\n+#define TARGET_PROMOTE_FUNCTION_ARGS\thook_bool_tree_true\n+#undef  TARGET_PROMOTE_FUNCTION_RETURN\n+#define TARGET_PROMOTE_FUNCTION_RETURN\thook_bool_tree_true\n+#undef  TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES\thook_bool_tree_true\n+\n+#undef  TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX\t\thook_rtx_tree_int_null\n+#undef  TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY\t\tmcore_return_in_memory\n+\n+#undef  TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS\tmcore_setup_incoming_varargs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Adjust the stack and return the number of bytes taken to do it.  */\n@@ -2188,22 +2211,23 @@ mcore_initial_elimination_offset (int from, int to)\n \n /* Keep track of some information about varargs for the prolog.  */\n \n-void\n-mcore_setup_incoming_varargs (CUMULATIVE_ARGS args_so_far,\n+static void\n+mcore_setup_incoming_varargs (CUMULATIVE_ARGS *args_so_far,\n \t\t\t      enum machine_mode mode, tree type,\n-\t\t\t      int * ptr_pretend_size ATTRIBUTE_UNUSED)\n+\t\t\t      int * ptr_pretend_size ATTRIBUTE_UNUSED,\n+\t\t\t      int second_time ATTRIBUTE_UNUSED)\n {\n   current_function_anonymous_args = 1;\n \n   /* We need to know how many argument registers are used before\n      the varargs start, so that we can push the remaining argument\n      registers during the prologue.  */\n-  number_of_regs_before_varargs = args_so_far + mcore_num_arg_regs (mode, type);\n+  number_of_regs_before_varargs = *args_so_far + mcore_num_arg_regs (mode, type);\n   \n   /* There is a bug somewhere in the arg handling code.\n      Until I can find it this workaround always pushes the\n      last named argument onto the stack.  */\n-  number_of_regs_before_varargs = args_so_far;\n+  number_of_regs_before_varargs = *args_so_far;\n   \n   /* The last named argument may be split between argument registers\n      and the stack.  Allow for this here.  */\n@@ -3428,3 +3452,17 @@ mcore_asm_named_section (const char *name, unsigned int flags ATTRIBUTE_UNUSED)\n   fprintf (asm_out_file, \"\\t.section %s\\n\", name);\n }\n #endif /* OBJECT_FORMAT_ELF */\n+\n+static void\n+mcore_external_libcall (rtx fun)\n+{\n+  fprintf (asm_out_file, \"\\t.import\\t\");\n+  assemble_name (asm_out_file, XSTR (fun, 0));\n+  fprintf (asm_out_file, \"\\n\");\n+}\n+\n+static bool\n+mcore_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  return int_size_in_bytes (type) > 2 * UNITS_PER_WORD;\n+}"}, {"sha": "4d79e088ce07bfed133d245c62cbd4b29601baa1", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=09a2b93aa8ca704d47cd4d0d0cd4386ff30a1e50", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for Motorola M*CORE Processor.\n-   Copyright (C) 1993, 1999, 2000, 2001, 2002, 2003\n+   Copyright (C) 1993, 1999, 2000, 2001, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n \n    This file is part of GCC.\n@@ -216,10 +216,6 @@ extern const char * mcore_stack_increment_string;\n       (UNSIGNEDP) = 1;\t\t\t\t\\\n     }\n \n-#define PROMOTE_FUNCTION_ARGS\n-\n-#define PROMOTE_FUNCTION_RETURN\n-\n /* Define this if most significant bit is lowest numbered\n    in instructions that operate on numbered bit-fields.  */\n #define BITS_BIG_ENDIAN  0\n@@ -435,9 +431,6 @@ extern int mcore_stack_increment;\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n   OFFSET = mcore_initial_elimination_offset (FROM, TO)\n \n-/* Place that structure value return address is placed.  */\n-#define STRUCT_VALUE 0\n-\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants.\n \n@@ -661,9 +654,6 @@ extern const enum reg_class reg_class_from_letter[];\n    we want to retain compatibility with older gcc versions.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n-/* How many registers to use for struct return.  */\n-#define\tRETURN_IN_MEMORY(TYPE) (int_size_in_bytes (TYPE) > 2 * UNITS_PER_WORD)\n-\n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n #define LIBCALL_VALUE(MODE)  gen_rtx (REG, MODE, FIRST_RET_REG)\n@@ -741,11 +731,6 @@ extern const enum reg_class reg_class_from_letter[];\n #define FUNCTION_ARG_PARTIAL_NREGS(CUM, MODE, TYPE, NAMED) \\\n   mcore_function_arg_partial_nregs (CUM, MODE, TYPE, NAMED)\n \n-/* Perform any needed actions needed for a function that is receiving a\n-   variable number of arguments.  */\n-#define SETUP_INCOMING_VARARGS(ASF, MODE, TYPE, PAS, ST) \\\n-  mcore_setup_incoming_varargs (ASF, MODE, TYPE, & PAS)\n-\n /* Call the function profiler with a given profile label.  */\n #define FUNCTION_PROFILER(STREAM,LABELNO)\t\t\\\n {\t\t\t\t\t\t\t\\\n@@ -962,9 +947,6 @@ extern const enum reg_class reg_class_from_letter[];\n /* Why is this defined??? -- dac */\n #define NO_FUNCTION_CSE 1\n \n-/* Chars and shorts should be passed as ints.  */\n-#define PROMOTE_PROTOTYPES 1\n-\n /* The machine modes of pointers and functions.  */\n #define Pmode          SImode\n #define FUNCTION_MODE  Pmode\n@@ -1164,18 +1146,6 @@ extern long mcore_current_compilation_timestamp;\n    regardless of whether any call sites remain.\n    This makes this aspect of the compiler non-ABI compliant.  */\n \n-/* Similar, but for libcall. FUN is an rtx.  */\n-#undef  ASM_OUTPUT_EXTERNAL_LIBCALL\n-#define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN)\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.import\\t\");\t\t\\\n-      assemble_name (FILE, XSTR (FUN, 0));\t\\\n-      fprintf (FILE, \"\\n\");\t\t\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-\n /* This says how to output an assembler line\n    to define a local common symbol....  */\n #undef  ASM_OUTPUT_LOCAL"}]}