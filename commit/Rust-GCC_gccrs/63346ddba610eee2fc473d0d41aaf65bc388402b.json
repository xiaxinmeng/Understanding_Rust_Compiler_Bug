{"sha": "63346ddba610eee2fc473d0d41aaf65bc388402b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMzNDZkZGJhNjEwZWVlMmZjNDczZDBkNDFhYWY2NWJjMzg4NDAyYg==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2008-11-01T16:42:31Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-11-01T16:42:31Z"}, "message": "re PR fortran/19925 (Implied do-loop in an initialization expression is broken)\n\n2008-11-01  Steven G. Kargl  <kargls@comcast.net>\n\n\tPR fortran/19925\n\t* trans-array.c (gfc_trans_array_constructor_value): Fix comment.\n\t(gfc_conv_array_initializer): Convert internal_error() to gfc_error_now.\n\t* array.c: Remove GFC_MAX_AC_EXPAND macro.\n\t(gfc_expand_constructor): Use gfc_option.flag_max_array_constructor.\n\t* gfortran.h (gfc_option): Add flag_max_array_constructor member.\n\t* lang.opt: Add -fmax-array-constructor option.\n\t* expr.c (gfc_match_init_expr): Fix error message to mention new option.\n\t* invoke.texi: Document new option.\n\t* options.c (gfc_init_options): Set default value for new option.\n\t(gfc_handle_option): Deal with commandline.\n\nFrom-SVN: r141518", "tree": {"sha": "830361faaebf6d74f8e768d2332ec39250a1fce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/830361faaebf6d74f8e768d2332ec39250a1fce9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63346ddba610eee2fc473d0d41aaf65bc388402b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63346ddba610eee2fc473d0d41aaf65bc388402b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63346ddba610eee2fc473d0d41aaf65bc388402b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63346ddba610eee2fc473d0d41aaf65bc388402b/comments", "author": null, "committer": null, "parents": [{"sha": "fa4262a47aa70a6f1baa2dd35d1cdb929c250da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4262a47aa70a6f1baa2dd35d1cdb929c250da6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4262a47aa70a6f1baa2dd35d1cdb929c250da6"}], "stats": {"total": 78, "additions": 61, "deletions": 17}, "files": [{"sha": "574ddc84e513d46ab8017876ad73f1228829947a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=63346ddba610eee2fc473d0d41aaf65bc388402b", "patch": "@@ -1,3 +1,17 @@\n+2008-11-01  Steven G. Kargl  <kargls@comcast.net>\n+\n+\tPR fortran/19925\n+\t* trans-array.c (gfc_trans_array_constructor_value): Fix comment.\n+\t(gfc_conv_array_initializer): Convert internal_error() to gfc_error_now.\n+\t* array.c: Remove GFC_MAX_AC_EXPAND macro.\n+\t(gfc_expand_constructor): Use gfc_option.flag_max_array_constructor.\n+\t* gfortran.h (gfc_option): Add flag_max_array_constructor member.\n+\t* lang.opt: Add -fmax-array-constructor option.\n+\t* expr.c (gfc_match_init_expr): Fix error message to mention new option.\n+\t* invoke.texi: Document new option.\n+\t* options.c (gfc_init_options): Set default value for new option.\n+\t(gfc_handle_option): Deal with commandline.\n+\n 2008-11-01  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/35681\n@@ -72,7 +86,7 @@\n \t* fortran/arith.h: Update mpfr_to_mpz prototype.\n \t* fortran/simplify.c (gfc_simplify_ceiling, gfc_simplify_floor,\n \tgfc_simplify_ifix, gfc_simplify_idint, simplify_nint): Update function\n-\tcalls to include locus\n+\tcalls to include locus.\n \n 2008-10-30  Mikael Morin  <mikael.morin@tele2.fr>\n "}, {"sha": "fe83ec685f9d5959a386265cfcddc2cce2b325e9", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=63346ddba610eee2fc473d0d41aaf65bc388402b", "patch": "@@ -24,13 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gfortran.h\"\n #include \"match.h\"\n \n-/* This parameter is the size of the largest array constructor that we\n-   will expand to an array constructor without iterators.\n-   Constructors larger than this will remain in the iterator form.  */\n-\n-#define GFC_MAX_AC_EXPAND 65535\n-\n-\n /**************** Array reference matching subroutines *****************/\n \n /* Copy an array reference structure.  */\n@@ -1463,7 +1456,7 @@ gfc_expand_constructor (gfc_expr *e)\n   gfc_expr *f;\n   gfc_try rc;\n \n-  f = gfc_get_array_element (e, GFC_MAX_AC_EXPAND);\n+  f = gfc_get_array_element (e, gfc_option.flag_max_array_constructor);\n   if (f != NULL)\n     {\n       gfc_free_expr (f);"}, {"sha": "9ac6f3c78156f9fbcfdfa798aad1e53429670a49", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=63346ddba610eee2fc473d0d41aaf65bc388402b", "patch": "@@ -1992,6 +1992,7 @@ typedef struct\n   int flag_second_underscore;\n   int flag_implicit_none;\n   int flag_max_stack_var_size;\n+  int flag_max_array_constructor;\n   int flag_range_check;\n   int flag_pack_derived;\n   int flag_repack_arrays;"}, {"sha": "8e47df4f68468770841de3c598f67ff60ea79717", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=63346ddba610eee2fc473d0d41aaf65bc388402b", "patch": "@@ -148,7 +148,8 @@ and warnings}.\n \n @item Directory Options\n @xref{Directory Options,,Options for directory search}.\n-@gccoptlist{-I@var{dir}  -J@var{dir}  -M@var{dir}  -fintrinsic-modules-path @var{dir}}\n+@gccoptlist{-I@var{dir}  -J@var{dir}  -M@var{dir}  @gol\n+-fintrinsic-modules-path @var{dir}}\n \n @item Link Options\n @xref{Link Options,,Options for influencing the linking step}.\n@@ -162,9 +163,10 @@ and warnings}.\n \n @item Code Generation Options\n @xref{Code Gen Options,,Options for code generation conventions}.\n-@gccoptlist{-fno-automatic  -ff2c  -fno-underscoring\n+@gccoptlist{-fno-automatic  -ff2c  -fno-underscoring @gol\n -fsecond-underscore @gol\n--fbounds-check -fcheck-array-temporaries  -fmax-stack-var-size=@var{n} @gol\n+-fbounds-check -fcheck-array-temporaries  -fmax-array-constructor =@var{n} @gol\n+-fmax-stack-var-size=@var{n} @gol\n -fpack-derived  -frepack-arrays  -fshort-enums  -fexternal-blas @gol\n -fblas-matmul-limit=@var{n} -frecursive -finit-local-zero @gol\n -finit-integer=@var{n} -finit-real=@var{<zero|inf|-inf|nan>} @gol\n@@ -1191,6 +1193,28 @@ sometimes useful in optimization, in order to avoid such temporaries.\n Note: The warning is only printed once per location.\n \n \n+@item -fmax-array-constructor=@var{n}\n+@opindex @code{fmax-array-constructor}\n+This option can be used to increase the upper limit permitted in \n+array constructors.  The code below requires this option to expand\n+the array at compile time.\n+\n+@smallexample\n+@code{program test}\n+@code{implicit none}\n+@code{integer j}\n+@code{integer, parameter :: n = 100000}\n+@code{integer, parameter :: i(n) = (/ (2*j, j = 1, n) /)}\n+@code{print '(10(I0,1X))', i}\n+@code{end program test}\n+@end smallexample\n+\n+@emph{Caution:  This option can lead to long compile times and excessively\n+large object files.}\n+\n+The default value for @var{n} is 65535.\n+\n+\n @item -fmax-stack-var-size=@var{n}\n @opindex @code{fmax-stack-var-size}\n This option specifies the size in bytes of the largest array that will be put"}, {"sha": "04682c191181c27105307519eda82bdbb14b78de", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=63346ddba610eee2fc473d0d41aaf65bc388402b", "patch": "@@ -284,6 +284,10 @@ finit-real=\n Fortran RejectNegative Joined\n -finit-real=<zero|nan|inf|-inf> Initialize local real variables\n \n+fmax-array-constructor=\n+Fortran RejectNegative Joined UInteger\n+-fmax-array-constructor=<n>        Maximum number of objects in an array constructor\n+\n fmax-errors=\n Fortran RejectNegative Joined UInteger\n -fmax-errors=<n>\tMaximum number of errors to report"}, {"sha": "3f49d563131cb25ceb139cd23b48b44c95457577", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=63346ddba610eee2fc473d0d41aaf65bc388402b", "patch": "@@ -65,6 +65,7 @@ gfc_init_options (unsigned int argc, const char **argv)\n   gfc_option.max_continue_free = 255;\n   gfc_option.max_identifier_length = GFC_MAX_SYMBOL_LEN;\n   gfc_option.max_subrecord_length = 0;\n+  gfc_option.flag_max_array_constructor = 65535;\n   gfc_option.convert = GFC_CONVERT_NATIVE;\n   gfc_option.record_marker = 0;\n   gfc_option.dump_parse_tree = 0;\n@@ -642,6 +643,10 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_add_intrinsic_modules_path (arg);\n       break;\n \n+    case OPT_fmax_array_constructor_:\n+      gfc_option.flag_max_array_constructor = value > 65535 ? value : 65535;\n+      break;\n+\n     case OPT_fmax_errors_:\n       gfc_option.max_errors = value;\n       break;"}, {"sha": "218c401af803fad4acd9a859210d185abf301bc8", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63346ddba610eee2fc473d0d41aaf65bc388402b/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=63346ddba610eee2fc473d0d41aaf65bc388402b", "patch": "@@ -1303,7 +1303,7 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n             }\n \t}\n \n-      /* The frontend should already have done any expansions possible\n+      /* The frontend should already have done any expansions\n \t at compile-time.  */\n       if (!c->iterator)\n \t{\n@@ -3946,10 +3946,13 @@ gfc_conv_array_initializer (tree type, gfc_expr * expr)\n           if (c->iterator)\n             {\n               /* Problems occur when we get something like\n-                 integer :: a(lots) = (/(i, i=1,lots)/)  */\n-              /* TODO: Unexpanded array initializers.  */\n-              internal_error\n-                (\"Possible frontend bug: array constructor not expanded\");\n+                 integer :: a(lots) = (/(i, i=1, lots)/)  */\n+              gfc_error_now (\"The number of elements in the array constructor \"\n+\t\t\t     \"at %L requires an increase of the allowed %d \"\n+\t\t\t     \"upper limit.   See -fmax-array-constructor \"\n+\t\t\t     \"option\", &expr->where,\n+\t\t\t     gfc_option.flag_max_array_constructor);\n+\t      return NULL_TREE;\n \t    }\n           if (mpz_cmp_si (c->n.offset, 0) != 0)\n             index = gfc_conv_mpz_to_tree (c->n.offset, gfc_index_integer_kind);"}]}