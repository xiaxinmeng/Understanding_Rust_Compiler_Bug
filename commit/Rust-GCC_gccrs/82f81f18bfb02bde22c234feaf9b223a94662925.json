{"sha": "82f81f18bfb02bde22c234feaf9b223a94662925", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJmODFmMThiZmIwMmJkZTIyYzIzNGZlYWY5YjIyM2E5NDY2MjkyNQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-05-02T10:49:10Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-05-02T10:49:10Z"}, "message": "target.h (struct calls): Add function_value_regno_p field.\n\n\t* target.h (struct calls): Add function_value_regno_p field.\n\t* target-def.h (TARGET_FUNCTION_VALUE_REGNO_P): Define.\n\t(TARGET_INITIALIZER): Use TARGET_FUNCTION_VALUE_REGNO_P.\n\t* targhooks.c (default_function_value_regno_p): New function.\n\t* targhooks.h (default_function_value_regno_p): Declare function.\n\t* rtlanal.c (keep_with_call_p): Use function_value_regno_p hook.\n\t* builtins.c. (apply_result_size): (Ditto.).\n\t* combine.c. (likely_spilled_retval_p): (Ditto.).\n\t* mode-switching.c. Include 'target.h'.\n\t(create_pre_exit): Use function_value_regno_p hook.\n\t* Makefile.in (mode-switching.o): Add dependency on TARGET_H.\n\t* doc/tm.texi (FUNCTION_VALUE_REGNO_P,\n\tTARGET_FUNCTION_VALUE_REGNO_P): Revise documentation.\n\n\t* config/i386/i386.h (TARGET_FUNCTION_VALUE_REGNO_P): Remove macro.\n\t* config/i386/i386.c (TARGET_FUNCTION_VALUE_REGNO_P): Define macro.\n\t(ix86_function_value_regno_p): Declare as static, change argument\n\ttype to const unsigned int.\n\t* config/i386/i386-protos.h (ix86_function_value_regno_p): Remove.\n\nFrom-SVN: r158970", "tree": {"sha": "135035b83149e0071966cf5b87b3d84d1448ce95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/135035b83149e0071966cf5b87b3d84d1448ce95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82f81f18bfb02bde22c234feaf9b223a94662925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f81f18bfb02bde22c234feaf9b223a94662925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f81f18bfb02bde22c234feaf9b223a94662925", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f81f18bfb02bde22c234feaf9b223a94662925/comments", "author": null, "committer": null, "parents": [{"sha": "2018489bf4900abea06fd80604f627da073dead2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2018489bf4900abea06fd80604f627da073dead2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2018489bf4900abea06fd80604f627da073dead2"}], "stats": {"total": 86, "additions": 74, "deletions": 12}, "files": [{"sha": "d0122024500e71d5cbf91a3091b9f6bb91285907", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -1,3 +1,25 @@\n+2010-05-01  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* target.h (struct calls): Add function_value_regno_p field.\n+\t* target-def.h (TARGET_FUNCTION_VALUE_REGNO_P): Define.\n+\t(TARGET_INITIALIZER): Use TARGET_FUNCTION_VALUE_REGNO_P.\n+\t* targhooks.c (default_function_value_regno_p): New function.\n+\t* targhooks.h (default_function_value_regno_p): Declare function.\n+\t* rtlanal.c (keep_with_call_p): Use function_value_regno_p hook.\n+\t* builtins.c. (apply_result_size): (Ditto.).\n+\t* combine.c. (likely_spilled_retval_p): (Ditto.).\n+\t* mode-switching.c. Include 'target.h'.\n+\t(create_pre_exit): Use function_value_regno_p hook.\n+\t* Makefile.in (mode-switching.o): Add dependency on TARGET_H.\n+\t* doc/tm.texi (FUNCTION_VALUE_REGNO_P,\n+\tTARGET_FUNCTION_VALUE_REGNO_P): Revise documentation.\n+\n+\t* config/i386/i386.h (TARGET_FUNCTION_VALUE_REGNO_P): Remove macro.\n+\t* config/i386/i386.c (TARGET_FUNCTION_VALUE_REGNO_P): Define macro.\n+\t(ix86_function_value_regno_p): Declare as static, change argument\n+\ttype to const unsigned int.\n+\t* config/i386/i386-protos.h (ix86_function_value_regno_p): Remove.\n+\n 2010-05-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43949"}, {"sha": "95185da535424ad00513aafcc3caeb588f1a6bd8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -2991,7 +2991,7 @@ lcm.o : lcm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n mode-switching.o : mode-switching.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h \\\n    $(INSN_ATTR_H) $(RECOG_H) $(BASIC_BLOCK_H) $(TM_P_H) $(FUNCTION_H) \\\n-   output.h $(TREE_PASS_H) $(TIMEVAR_H) $(REAL_H) $(DF_H)\n+   output.h $(TREE_PASS_H) $(TIMEVAR_H) $(REAL_H) $(DF_H) $(TARGET_H)\n tree-ssa-dce.o : tree-ssa-dce.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n     $(RTL_H) $(TM_P_H) $(TREE_FLOW_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) \\\n     coretypes.h $(TREE_DUMP_H) $(TREE_PASS_H) $(FLAGS_H) $(BASIC_BLOCK_H) \\"}, {"sha": "5f4b7176155485cd53604361eee28baa924543fa", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -1322,7 +1322,7 @@ apply_result_size (void)\n       size = 0;\n \n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\tif (FUNCTION_VALUE_REGNO_P (regno))\n+\tif (targetm.calls.function_value_regno_p (regno))\n \t  {\n \t    mode = reg_raw_mode[regno];\n "}, {"sha": "303f180f790c8216222e02075e9f75ed4e38c1bd", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -2076,14 +2076,14 @@ likely_spilled_retval_p (rtx insn)\n   unsigned regno, nregs;\n   /* We assume here that no machine mode needs more than\n      32 hard registers when the value overlaps with a register\n-     for which FUNCTION_VALUE_REGNO_P is true.  */\n+     for which TARGET_FUNCTION_VALUE_REGNO_P is true.  */\n   unsigned mask;\n   struct likely_spilled_retval_info info;\n \n   if (!NONJUMP_INSN_P (use) || GET_CODE (PATTERN (use)) != USE || insn == use)\n     return 0;\n   reg = XEXP (PATTERN (use), 0);\n-  if (!REG_P (reg) || !FUNCTION_VALUE_REGNO_P (REGNO (reg)))\n+  if (!REG_P (reg) || !targetm.calls.function_value_regno_p (REGNO (reg)))\n     return 0;\n   regno = REGNO (reg);\n   nregs = hard_regno_nregs[regno][GET_MODE (reg)];"}, {"sha": "48695c080b1578c1e9d13d0a77e75ae0534fa5f5", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -136,7 +136,6 @@ extern int ix86_attr_length_vex_default (rtx, int, int);\n extern enum machine_mode ix86_fp_compare_mode (enum rtx_code);\n \n extern rtx ix86_libcall_value (enum machine_mode);\n-extern bool ix86_function_value_regno_p (int);\n extern bool ix86_function_arg_regno_p (int);\n extern int ix86_function_arg_boundary (enum machine_mode, tree);\n extern bool ix86_sol10_return_in_memory (const_tree,const_tree);"}, {"sha": "61a619bed2a7f1d91a320f4a1b889f30a49c150b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -1880,6 +1880,7 @@ static bool ext_80387_constants_init = 0;\n \f\n static struct machine_function * ix86_init_machine_status (void);\n static rtx ix86_function_value (const_tree, const_tree, bool);\n+static bool ix86_function_value_regno_p (const unsigned int);\n static rtx ix86_static_chain (const_tree, bool);\n static int ix86_function_regparm (const_tree, const_tree);\n static void ix86_compute_frame_layout (struct ix86_frame *);\n@@ -6331,8 +6332,8 @@ ix86_function_arg_boundary (enum machine_mode mode, tree type)\n \n /* Return true if N is a possible register number of function value.  */\n \n-bool\n-ix86_function_value_regno_p (int regno)\n+static bool\n+ix86_function_value_regno_p (const unsigned int regno)\n {\n   switch (regno)\n     {\n@@ -30656,6 +30657,9 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #undef TARGET_FUNCTION_VALUE\n #define TARGET_FUNCTION_VALUE ix86_function_value\n \n+#undef TARGET_FUNCTION_VALUE_REGNO_P\n+#define TARGET_FUNCTION_VALUE_REGNO_P ix86_function_value_regno_p\n+\n #undef TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD ix86_secondary_reload\n "}, {"sha": "ebe32388d804d72cdf8d50214099b1fe12c6f27f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -1554,8 +1554,6 @@ enum reg_class\n #define RETURN_POPS_ARGS(FUNDECL, FUNTYPE, SIZE) \\\n   ix86_return_pops_args ((FUNDECL), (FUNTYPE), (SIZE))\n \n-#define FUNCTION_VALUE_REGNO_P(N) ix86_function_value_regno_p (N)\n-\n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n "}, {"sha": "a20d48c9f9cfa0d73659110c8035b1c190210422", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -4461,8 +4461,26 @@ suffices:\n If the machine has register windows, so that the caller and the called\n function use different registers for the return value, this macro\n should recognize only the caller's register numbers.\n+\n+This macro has been deprecated.  Use @code{TARGET_FUNCTION_VALUE_REGNO_P}\n+for a new target instead.\n @end defmac\n \n+@deftypefn {Target Hook} bool TARGET_FUNCTION_VALUE_REGNO_P (const unsigned int @var{regno})\n+A target hook that return @code{true} if @var{regno} is the number of a hard\n+register in which the values of called function may come back.\n+\n+A register whose use for returning values is limited to serving as the\n+second of a pair (for a value of type @code{double}, say) need not be\n+recognized by this target hook.\n+\n+If the machine has register windows, so that the caller and the called\n+function use different registers for the return value, this target hook\n+should recognize only the caller's register numbers.\n+\n+If this hook is not defined, then FUNCTION_VALUE_REGNO_P will be used.\n+@end deftypefn\n+\n @defmac TARGET_ENUM_VA_LIST (@var{idx}, @var{pname}, @var{ptype})\n This target macro is used in function @code{c_common_nodes_and_builtins}\n to iterate through the target specific builtin types for va_list. The"}, {"sha": "30051c6ea24f1cb1f7f45f15e07fdf91c9cb12d2", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"target.h\"\n #include \"rtl.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n@@ -262,7 +263,7 @@ create_pre_exit (int n_entities, int *entity_map, const int *num_modes)\n \t\t      case USE:\n \t\t\t/* Skip __builtin_apply pattern.  */\n \t\t\tif (GET_CODE (XEXP (return_copy_pat, 0)) == REG\n-\t\t\t    && (FUNCTION_VALUE_REGNO_P\n+\t\t\t    && (targetm.calls.function_value_regno_p\n \t\t\t\t(REGNO (XEXP (return_copy_pat, 0)))))\n \t\t\t  {\n \t\t\t    maybe_builtin_apply = 1;\n@@ -359,7 +360,8 @@ create_pre_exit (int n_entities, int *entity_map, const int *num_modes)\n \t\t\t&& copy_start + copy_num <= ret_end)\n \t\t      nregs -= copy_num;\n \t\t    else if (!maybe_builtin_apply\n-\t\t\t     || !FUNCTION_VALUE_REGNO_P (copy_start))\n+\t\t\t     || !targetm.calls.function_value_regno_p\n+\t\t\t\t (copy_start))\n \t\t      break;\n \t\t    last_insn = return_copy;\n \t\t  }"}, {"sha": "8a5df24632d324033a52967de5f24df4ad63b4af", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -3474,7 +3474,7 @@ keep_with_call_p (const_rtx insn)\n \t  && general_operand (SET_SRC (set), VOIDmode))\n \treturn true;\n       if (REG_P (SET_SRC (set))\n-\t  && FUNCTION_VALUE_REGNO_P (REGNO (SET_SRC (set)))\n+\t  && targetm.calls.function_value_regno_p (REGNO (SET_SRC (set)))\n \t  && REG_P (SET_DEST (set))\n \t  && REGNO (SET_DEST (set)) >= FIRST_PSEUDO_REGISTER)\n \treturn true;"}, {"sha": "feca6c5270c22ca3c47599227f1850cdeafa38c8", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -661,6 +661,7 @@\n \n #define TARGET_FUNCTION_VALUE default_function_value\n #define TARGET_LIBCALL_VALUE default_libcall_value\n+#define TARGET_FUNCTION_VALUE_REGNO_P default_function_value_regno_p\n #define TARGET_INTERNAL_ARG_POINTER default_internal_arg_pointer\n #define TARGET_UPDATE_STACK_BOUNDARY NULL\n #define TARGET_GET_DRAP_RTX NULL\n@@ -687,6 +688,7 @@\n    TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN,\t\t\t\\\n    TARGET_FUNCTION_VALUE,\t\t\t\t\t\\\n    TARGET_LIBCALL_VALUE,\t\t\t\t\t\\\n+   TARGET_FUNCTION_VALUE_REGNO_P,\t\t\t\t\\\n    TARGET_INTERNAL_ARG_POINTER,\t\t\t\t\t\\\n    TARGET_UPDATE_STACK_BOUNDARY,\t\t\t\t\\\n    TARGET_GET_DRAP_RTX,\t\t\t\t\t\t\\"}, {"sha": "62a1bcc3d7e3a04d37e4699451fc68894c5c7b56", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -968,6 +968,10 @@ struct gcc_target\n        calling the function FN_NAME.  */\n     rtx (*libcall_value) (enum machine_mode, const_rtx);\n \n+    /* Return true if REGNO is a possible register number for\n+       a function value as seen by the caller.  */\n+    bool (*function_value_regno_p) (const unsigned int);\n+\n     /* Return an rtx for the argument pointer incoming to the\n        current function.  */\n     rtx (*internal_arg_pointer) (void);"}, {"sha": "8df0de421f818e69c9b9c3d86f1eb9c223b462b8", "filename": "gcc/targhooks.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -619,6 +619,18 @@ default_libcall_value (enum machine_mode mode ATTRIBUTE_UNUSED,\n #endif\n }\n \n+/* The default hook for TARGET_FUNCTION_VALUE_REGNO_P.  */\n+\n+bool\n+default_function_value_regno_p (const unsigned int regno ATTRIBUTE_UNUSED)\n+{\n+#ifdef FUNCTION_VALUE_REGNO_P\n+  return FUNCTION_VALUE_REGNO_P (regno);\n+#else\n+  gcc_unreachable ();\n+#endif\n+}\n+\n rtx\n default_internal_arg_pointer (void)\n {"}, {"sha": "e70eef4d555ce32871dcf06233edfd0a0c46a3b8", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f81f18bfb02bde22c234feaf9b223a94662925/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=82f81f18bfb02bde22c234feaf9b223a94662925", "patch": "@@ -99,6 +99,7 @@ extern const char *hook_invalid_arg_for_unprototyped_fn\n extern bool hook_bool_const_rtx_commutative_p (const_rtx, int);\n extern rtx default_function_value (const_tree, const_tree, bool);\n extern rtx default_libcall_value (enum machine_mode, const_rtx);\n+extern bool default_function_value_regno_p (const unsigned int);\n extern rtx default_internal_arg_pointer (void);\n extern rtx default_static_chain (const_tree, bool);\n extern void default_trampoline_init (rtx, tree, rtx);"}]}