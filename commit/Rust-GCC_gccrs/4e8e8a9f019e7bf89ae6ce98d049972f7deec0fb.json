{"sha": "4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU4ZThhOWYwMTllN2JmODlhZTZjZTk4ZDA0OTk3MmY3ZGVlYzBmYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-01-09T14:34:20Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-01-09T14:34:20Z"}, "message": "re PR target/84010 (problematic TLS code generation on 64-bit SPARC)\n\n\tPR target/84010\n\t* config/sparc/sparc.c (sparc_legitimize_tls_address): Only use Pmode\n\tconsistently in TLS address generation and adjust code to the renaming\n\tof patterns.  Mark calls to __tls_get_addr as const.\n\t* config/sparc/sparc.md (tgd_hi22): Turn into...\n\t(tgd_hi22<P:mode>): ...this and use Pmode throughout.\n\t(tgd_lo10): Turn into...\n\t(tgd_lo10<P:mode>): ...this and use Pmode throughout.\n\t(tgd_add32): Merge into...\n\t(tgd_add64): Likewise.\n\t(tgd_add<P:mode>): ...this and use Pmode throughout.\n\t(tldm_hi22): Turn into...\n\t(tldm_hi22<P:mode>): ...this and use Pmode throughout.\n\t(tldm_lo10): Turn into...\n\t(tldm_lo10<P:mode>): ...this and use Pmode throughout.\n\t(tldm_add32): Merge into...\n\t(tldm_add64): Likewise.\n\t(tldm_add<P:mode>): ...this and use Pmode throughout.\n\t(tldm_call32): Merge into...\n\t(tldm_call64): Likewise.\n\t(tldm_call<P:mode>): ...this and use Pmode throughout.\n\t(tldo_hix22): Turn into...\n\t(tldo_hix22<P:mode>): ...this and use Pmode throughout.\n\t(tldo_lox10): Turn into...\n\t(tldo_lox10<P:mode>): ...this and use Pmode throughout.\n\t(tldo_add32): Merge into...\n\t(tldo_add64): Likewise.\n\t(tldo_add<P:mode>): ...this and use Pmode throughout.\n\t(tie_hi22): Turn into...\n\t(tie_hi22<P:mode>): ...this and use Pmode throughout.\n\t(tie_lo10): Turn into...\n\t(tie_lo10<P:mode>): ...this and use Pmode throughout.\n\t(tie_ld64): Use DImode throughout.\n\t(tie_add32): Merge into...\n\t(tie_add64): Likewise.\n\t(tie_add<P:mode>): ...this and use Pmode throughout.\n\t(tle_hix22_sp32): Merge into...\n\t(tle_hix22_sp64): Likewise.\n\t(tle_hix22<P:mode>): ...this and use Pmode throughout.\n\t(tle_lox22_sp32): Merge into...\n\t(tle_lox22_sp64): Likewise.\n\t(tle_lox22<P:mode>): ...this and use Pmode throughout.\n\t(*tldo_ldub_sp32): Merge into...\n\t(*tldo_ldub_sp64): Likewise.\n\t(*tldo_ldub<P:mode>): ...this and use Pmode throughout.\n\t(*tldo_ldub1_sp32): Merge into...\n\t(*tldo_ldub1_sp64): Likewise.\n\t(*tldo_ldub1<P:mode>): ...this and use Pmode throughout.\n\t(*tldo_ldub2_sp32): Merge into...\n\t(*tldo_ldub2_sp64): Likewise.\n\t(*tldo_ldub2<P:mode>): ...this and use Pmode throughout.\n\t(*tldo_ldsb1_sp32): Merge into...\n\t(*tldo_ldsb1_sp64): Likewise.\n\t(*tldo_ldsb1<P:mode>): ...this and use Pmode throughout.\n\t(*tldo_ldsb2_sp32): Merge into...\n\t(*tldo_ldsb2_sp64): Likewise.\n\t(*tldo_ldsb2<P:mode>): ...this and use Pmode throughout.\n\t(*tldo_ldub3_sp64): Use DImode throughout.\n\t(*tldo_ldsb3_sp64): Likewise.\n\t(*tldo_lduh_sp32): Merge into...\n\t(*tldo_lduh_sp64): Likewise.\n\t(*tldo_lduh<P:mode>): ...this and use Pmode throughout.\n\t(*tldo_lduh1_sp32): Merge into...\n\t(*tldo_lduh1_sp64): Likewise.\n\t(*tldo_lduh1<P:mode>): ...this and use Pmode throughout.\n\t(*tldo_ldsh1_sp32): Merge into...\n\t(*tldo_ldsh1_sp64): Likewise.\n\t(*tldo_ldsh1<P:mode>): ...this and use Pmode throughout.\n\t(*tldo_lduh2_sp64): Use DImode throughout.\n\t(*tldo_ldsh2_sp64): Likewise.\n\t(*tldo_lduw_sp32): Merge into...\n\t(*tldo_lduw_sp64): Likewise.\n\t(*tldo_lduw<P:mode>): ...this and use Pmode throughout.\n\t(*tldo_lduw1_sp64): Use DImode throughout.\n\t(*tldo_ldsw1_sp64): Likewise.\n\t(*tldo_ldx_sp64): Likewise.\n\t(*tldo_stb_sp32): Merge into...\n\t(*tldo_stb_sp64): Likewise.\n\t(*tldo_stb<P:mode>): ...this and use Pmode throughout.\n\t(*tldo_sth_sp32): Merge into...\n\t(*tldo_sth_sp64): Likewise.\n\t(*tldo_sth<P:mode>): ...this and use Pmode throughout.\n\t(*tldo_stw_sp32): Merge into...\n\t(*tldo_stw_sp64): Likewise.\n\t(*tldo_stw<P:mode>): ...this and use Pmode throughout.\n\t(*tldo_stx_sp64): Use DImode throughout.\n\nFrom-SVN: r267771", "tree": {"sha": "9dbcc9c6f3fb1719613302b475d7379dd0097607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dbcc9c6f3fb1719613302b475d7379dd0097607"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/comments", "author": null, "committer": null, "parents": [{"sha": "c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ff4f0fe6b9357393c7e44338c4783cf0c19759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ff4f0fe6b9357393c7e44338c4783cf0c19759"}], "stats": {"total": 977, "additions": 566, "deletions": 411}, "files": [{"sha": "b600c4e1bd6ef3ee81715c26e1972fda64831e03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 91, "deletions": 1, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "patch": "@@ -1,3 +1,93 @@\n+2019-01-09  Eric Botcazou  <ebotcazou@adacore.com>\n+            James Clarke  <jrtc27@jrtc27.com>\n+\n+\tPR target/84010\n+\t* config/sparc/sparc.c (sparc_legitimize_tls_address): Only use Pmode\n+\tconsistently in TLS address generation and adjust code to the renaming\n+\tof patterns.  Mark calls to __tls_get_addr as const.\n+\t* config/sparc/sparc.md (tgd_hi22): Turn into...\n+\t(tgd_hi22<P:mode>): ...this and use Pmode throughout.\n+\t(tgd_lo10): Turn into...\n+\t(tgd_lo10<P:mode>): ...this and use Pmode throughout.\n+\t(tgd_add32): Merge into...\n+\t(tgd_add64): Likewise.\n+\t(tgd_add<P:mode>): ...this and use Pmode throughout.\n+\t(tldm_hi22): Turn into...\n+\t(tldm_hi22<P:mode>): ...this and use Pmode throughout.\n+\t(tldm_lo10): Turn into...\n+\t(tldm_lo10<P:mode>): ...this and use Pmode throughout.\n+\t(tldm_add32): Merge into...\n+\t(tldm_add64): Likewise.\n+\t(tldm_add<P:mode>): ...this and use Pmode throughout.\n+\t(tldm_call32): Merge into...\n+\t(tldm_call64): Likewise.\n+\t(tldm_call<P:mode>): ...this and use Pmode throughout.\n+\t(tldo_hix22): Turn into...\n+\t(tldo_hix22<P:mode>): ...this and use Pmode throughout.\n+\t(tldo_lox10): Turn into...\n+\t(tldo_lox10<P:mode>): ...this and use Pmode throughout.\n+\t(tldo_add32): Merge into...\n+\t(tldo_add64): Likewise.\n+\t(tldo_add<P:mode>): ...this and use Pmode throughout.\n+\t(tie_hi22): Turn into...\n+\t(tie_hi22<P:mode>): ...this and use Pmode throughout.\n+\t(tie_lo10): Turn into...\n+\t(tie_lo10<P:mode>): ...this and use Pmode throughout.\n+\t(tie_ld64): Use DImode throughout.\n+\t(tie_add32): Merge into...\n+\t(tie_add64): Likewise.\n+\t(tie_add<P:mode>): ...this and use Pmode throughout.\n+\t(tle_hix22_sp32): Merge into...\n+\t(tle_hix22_sp64): Likewise.\n+\t(tle_hix22<P:mode>): ...this and use Pmode throughout.\n+\t(tle_lox22_sp32): Merge into...\n+\t(tle_lox22_sp64): Likewise.\n+\t(tle_lox22<P:mode>): ...this and use Pmode throughout.\n+\t(*tldo_ldub_sp32): Merge into...\n+\t(*tldo_ldub_sp64): Likewise.\n+\t(*tldo_ldub<P:mode>): ...this and use Pmode throughout.\n+\t(*tldo_ldub1_sp32): Merge into...\n+\t(*tldo_ldub1_sp64): Likewise.\n+\t(*tldo_ldub1<P:mode>): ...this and use Pmode throughout.\n+\t(*tldo_ldub2_sp32): Merge into...\n+\t(*tldo_ldub2_sp64): Likewise.\n+\t(*tldo_ldub2<P:mode>): ...this and use Pmode throughout.\n+\t(*tldo_ldsb1_sp32): Merge into...\n+\t(*tldo_ldsb1_sp64): Likewise.\n+\t(*tldo_ldsb1<P:mode>): ...this and use Pmode throughout.\n+\t(*tldo_ldsb2_sp32): Merge into...\n+\t(*tldo_ldsb2_sp64): Likewise.\n+\t(*tldo_ldsb2<P:mode>): ...this and use Pmode throughout.\n+\t(*tldo_ldub3_sp64): Use DImode throughout.\n+\t(*tldo_ldsb3_sp64): Likewise.\n+\t(*tldo_lduh_sp32): Merge into...\n+\t(*tldo_lduh_sp64): Likewise.\n+\t(*tldo_lduh<P:mode>): ...this and use Pmode throughout.\n+\t(*tldo_lduh1_sp32): Merge into...\n+\t(*tldo_lduh1_sp64): Likewise.\n+\t(*tldo_lduh1<P:mode>): ...this and use Pmode throughout.\n+\t(*tldo_ldsh1_sp32): Merge into...\n+\t(*tldo_ldsh1_sp64): Likewise.\n+\t(*tldo_ldsh1<P:mode>): ...this and use Pmode throughout.\n+\t(*tldo_lduh2_sp64): Use DImode throughout.\n+\t(*tldo_ldsh2_sp64): Likewise.\n+\t(*tldo_lduw_sp32): Merge into...\n+\t(*tldo_lduw_sp64): Likewise.\n+\t(*tldo_lduw<P:mode>): ...this and use Pmode throughout.\n+\t(*tldo_lduw1_sp64): Use DImode throughout.\n+\t(*tldo_ldsw1_sp64): Likewise.\n+\t(*tldo_ldx_sp64): Likewise.\n+\t(*tldo_stb_sp32): Merge into...\n+\t(*tldo_stb_sp64): Likewise.\n+\t(*tldo_stb<P:mode>): ...this and use Pmode throughout.\n+\t(*tldo_sth_sp32): Merge into...\n+\t(*tldo_sth_sp64): Likewise.\n+\t(*tldo_sth<P:mode>): ...this and use Pmode throughout.\n+\t(*tldo_stw_sp32): Merge into...\n+\t(*tldo_stw_sp64): Likewise.\n+\t(*tldo_stw<P:mode>): ...this and use Pmode throughout.\n+\t(*tldo_stx_sp64): Use DImode throughout.\n+\n 2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_override_options): Add case to\n@@ -11,7 +101,7 @@\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config.gcc (aarch64*-*-*): Add aarch64-bti-insert.o.\n-\t* gcc/config/aarch64/aarch64.h: Update comment for TRAMPOLINE_SIZE.\n+\t* config/aarch64/aarch64.h: Update comment for TRAMPOLINE_SIZE.\n \t* config/aarch64/aarch64.c (aarch64_asm_trampoline_template): Update\n \tif bti is enabled.\n \t* config/aarch64/aarch64-bti-insert.c: New file."}, {"sha": "dc6f94d1906957df53727262ac0064dcd0e74db1", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 59, "deletions": 34, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "patch": "@@ -4644,92 +4644,117 @@ sparc_legitimize_tls_address (rtx addr)\n   gcc_assert (can_create_pseudo_p ());\n \n   if (GET_CODE (addr) == SYMBOL_REF)\n+    /* Although the various sethi/or sequences generate SImode values, many of\n+       them can be transformed by the linker when relaxing and, if relaxing to\n+       local-exec, will become a sethi/xor pair, which is signed and therefore\n+       a full DImode value in 64-bit mode.  Thus we must use Pmode, lest these\n+       values be spilled onto the stack in 64-bit mode.  */\n     switch (SYMBOL_REF_TLS_MODEL (addr))\n       {\n       case TLS_MODEL_GLOBAL_DYNAMIC:\n \tstart_sequence ();\n-\ttemp1 = gen_reg_rtx (SImode);\n-\ttemp2 = gen_reg_rtx (SImode);\n+\ttemp1 = gen_reg_rtx (Pmode);\n+\ttemp2 = gen_reg_rtx (Pmode);\n \tret = gen_reg_rtx (Pmode);\n \to0 = gen_rtx_REG (Pmode, 8);\n \tgot = sparc_tls_got ();\n-\temit_insn (gen_tgd_hi22 (temp1, addr));\n-\temit_insn (gen_tgd_lo10 (temp2, temp1, addr));\n \tif (TARGET_ARCH32)\n \t  {\n-\t    emit_insn (gen_tgd_add32 (o0, got, temp2, addr));\n-\t    insn = emit_call_insn (gen_tgd_call32 (o0, sparc_tls_get_addr (),\n+\t    emit_insn (gen_tgd_hi22si (temp1, addr));\n+\t    emit_insn (gen_tgd_lo10si (temp2, temp1, addr));\n+\t    emit_insn (gen_tgd_addsi (o0, got, temp2, addr));\n+\t    insn = emit_call_insn (gen_tgd_callsi (o0, sparc_tls_get_addr (),\n \t\t\t\t\t\t   addr, const1_rtx));\n \t  }\n \telse\n \t  {\n-\t    emit_insn (gen_tgd_add64 (o0, got, temp2, addr));\n-\t    insn = emit_call_insn (gen_tgd_call64 (o0, sparc_tls_get_addr (),\n+\t    emit_insn (gen_tgd_hi22di (temp1, addr));\n+\t    emit_insn (gen_tgd_lo10di (temp2, temp1, addr));\n+\t    emit_insn (gen_tgd_adddi (o0, got, temp2, addr));\n+\t    insn = emit_call_insn (gen_tgd_calldi (o0, sparc_tls_get_addr (),\n \t\t\t\t\t\t   addr, const1_rtx));\n \t  }\n \tuse_reg (&CALL_INSN_FUNCTION_USAGE (insn), o0);\n+\tRTL_CONST_CALL_P (insn) = 1;\n \tinsn = get_insns ();\n \tend_sequence ();\n \temit_libcall_block (insn, ret, o0, addr);\n \tbreak;\n \n       case TLS_MODEL_LOCAL_DYNAMIC:\n \tstart_sequence ();\n-\ttemp1 = gen_reg_rtx (SImode);\n-\ttemp2 = gen_reg_rtx (SImode);\n+\ttemp1 = gen_reg_rtx (Pmode);\n+\ttemp2 = gen_reg_rtx (Pmode);\n \ttemp3 = gen_reg_rtx (Pmode);\n \tret = gen_reg_rtx (Pmode);\n \to0 = gen_rtx_REG (Pmode, 8);\n \tgot = sparc_tls_got ();\n-\temit_insn (gen_tldm_hi22 (temp1));\n-\temit_insn (gen_tldm_lo10 (temp2, temp1));\n \tif (TARGET_ARCH32)\n \t  {\n-\t    emit_insn (gen_tldm_add32 (o0, got, temp2));\n-\t    insn = emit_call_insn (gen_tldm_call32 (o0, sparc_tls_get_addr (),\n+\t    emit_insn (gen_tldm_hi22si (temp1));\n+\t    emit_insn (gen_tldm_lo10si (temp2, temp1));\n+\t    emit_insn (gen_tldm_addsi (o0, got, temp2));\n+\t    insn = emit_call_insn (gen_tldm_callsi (o0, sparc_tls_get_addr (),\n \t\t\t\t\t\t    const1_rtx));\n \t  }\n \telse\n \t  {\n-\t    emit_insn (gen_tldm_add64 (o0, got, temp2));\n-\t    insn = emit_call_insn (gen_tldm_call64 (o0, sparc_tls_get_addr (),\n+\t    emit_insn (gen_tldm_hi22di (temp1));\n+\t    emit_insn (gen_tldm_lo10di (temp2, temp1));\n+\t    emit_insn (gen_tldm_adddi (o0, got, temp2));\n+\t    insn = emit_call_insn (gen_tldm_calldi (o0, sparc_tls_get_addr (),\n \t\t\t\t\t\t    const1_rtx));\n \t  }\n \tuse_reg (&CALL_INSN_FUNCTION_USAGE (insn), o0);\n+\tRTL_CONST_CALL_P (insn) = 1;\n \tinsn = get_insns ();\n \tend_sequence ();\n+\t/* Attach a unique REG_EQUAL, to allow the RTL optimizers to\n+\t  share the LD_BASE result with other LD model accesses.  */\n \temit_libcall_block (insn, temp3, o0,\n \t\t\t    gen_rtx_UNSPEC (Pmode, gen_rtvec (1, const0_rtx),\n \t\t\t\t\t    UNSPEC_TLSLD_BASE));\n-\ttemp1 = gen_reg_rtx (SImode);\n-\ttemp2 = gen_reg_rtx (SImode);\n-\temit_insn (gen_tldo_hix22 (temp1, addr));\n-\temit_insn (gen_tldo_lox10 (temp2, temp1, addr));\n+\ttemp1 = gen_reg_rtx (Pmode);\n+\ttemp2 = gen_reg_rtx (Pmode);\n \tif (TARGET_ARCH32)\n-\t  emit_insn (gen_tldo_add32 (ret, temp3, temp2, addr));\n+\t  {\n+\t    emit_insn (gen_tldo_hix22si (temp1, addr));\n+\t    emit_insn (gen_tldo_lox10si (temp2, temp1, addr));\n+\t    emit_insn (gen_tldo_addsi (ret, temp3, temp2, addr));\n+\t  }\n \telse\n-\t  emit_insn (gen_tldo_add64 (ret, temp3, temp2, addr));\n+\t  {\n+\t    emit_insn (gen_tldo_hix22di (temp1, addr));\n+\t    emit_insn (gen_tldo_lox10di (temp2, temp1, addr));\n+\t    emit_insn (gen_tldo_adddi (ret, temp3, temp2, addr));\n+\t  }\n \tbreak;\n \n       case TLS_MODEL_INITIAL_EXEC:\n-\ttemp1 = gen_reg_rtx (SImode);\n-\ttemp2 = gen_reg_rtx (SImode);\n+\ttemp1 = gen_reg_rtx (Pmode);\n+\ttemp2 = gen_reg_rtx (Pmode);\n \ttemp3 = gen_reg_rtx (Pmode);\n \tgot = sparc_tls_got ();\n-\temit_insn (gen_tie_hi22 (temp1, addr));\n-\temit_insn (gen_tie_lo10 (temp2, temp1, addr));\n \tif (TARGET_ARCH32)\n-\t  emit_insn (gen_tie_ld32 (temp3, got, temp2, addr));\n+\t  {\n+\t    emit_insn (gen_tie_hi22si (temp1, addr));\n+\t    emit_insn (gen_tie_lo10si (temp2, temp1, addr));\n+\t    emit_insn (gen_tie_ld32 (temp3, got, temp2, addr));\n+\t  }\n \telse\n-\t  emit_insn (gen_tie_ld64 (temp3, got, temp2, addr));\n+\t  {\n+\t    emit_insn (gen_tie_hi22di (temp1, addr));\n+\t    emit_insn (gen_tie_lo10di (temp2, temp1, addr));\n+\t    emit_insn (gen_tie_ld64 (temp3, got, temp2, addr));\n+\t  }\n         if (TARGET_SUN_TLS)\n \t  {\n \t    ret = gen_reg_rtx (Pmode);\n \t    if (TARGET_ARCH32)\n-\t      emit_insn (gen_tie_add32 (ret, gen_rtx_REG (Pmode, 7),\n+\t      emit_insn (gen_tie_addsi (ret, gen_rtx_REG (Pmode, 7),\n \t\t\t\t\ttemp3, addr));\n \t    else\n-\t      emit_insn (gen_tie_add64 (ret, gen_rtx_REG (Pmode, 7),\n+\t      emit_insn (gen_tie_adddi (ret, gen_rtx_REG (Pmode, 7),\n \t\t\t\t\ttemp3, addr));\n \t  }\n \telse\n@@ -4741,13 +4766,13 @@ sparc_legitimize_tls_address (rtx addr)\n \ttemp2 = gen_reg_rtx (Pmode);\n \tif (TARGET_ARCH32)\n \t  {\n-\t    emit_insn (gen_tle_hix22_sp32 (temp1, addr));\n-\t    emit_insn (gen_tle_lox10_sp32 (temp2, temp1, addr));\n+\t    emit_insn (gen_tle_hix22si (temp1, addr));\n+\t    emit_insn (gen_tle_lox10si (temp2, temp1, addr));\n \t  }\n \telse\n \t  {\n-\t    emit_insn (gen_tle_hix22_sp64 (temp1, addr));\n-\t    emit_insn (gen_tle_lox10_sp64 (temp2, temp1, addr));\n+\t    emit_insn (gen_tle_hix22di (temp1, addr));\n+\t    emit_insn (gen_tle_lox10di (temp2, temp1, addr));\n \t  }\n \tret = gen_rtx_PLUS (Pmode, gen_rtx_REG (Pmode, 7), temp2);\n \tbreak;"}, {"sha": "e8eef80ada3fea4f665807cef4b54fa549c817c4", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 167, "deletions": 376, "changes": 543, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "patch": "@@ -7971,158 +7971,112 @@ visl\")\n \n ;; TLS support instructions.\n \n-(define_insn \"tgd_hi22\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (high:SI (unspec:SI [(match_operand 1 \"tgd_symbolic_operand\" \"\")]\n-\t\t\t    UNSPEC_TLSGD)))]\n+(define_insn \"tgd_hi22<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (high:P (unspec:P [(match_operand 1 \"tgd_symbolic_operand\" \"\")]\n+\t\t\t  UNSPEC_TLSGD)))]\n   \"TARGET_TLS\"\n   \"sethi\\\\t%%tgd_hi22(%a1), %0\")\n \n-(define_insn \"tgd_lo10\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t   (unspec:SI [(match_operand 2 \"tgd_symbolic_operand\" \"\")]\n-\t\t\t      UNSPEC_TLSGD)))]\n+(define_insn \"tgd_lo10<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(lo_sum:P (match_operand:P 1 \"register_operand\" \"r\")\n+\t\t  (unspec:P [(match_operand 2 \"tgd_symbolic_operand\" \"\")]\n+\t\t\t    UNSPEC_TLSGD)))]\n   \"TARGET_TLS\"\n   \"add\\\\t%1, %%tgd_lo10(%a2), %0\")\n \n-(define_insn \"tgd_add32\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 3 \"tgd_symbolic_operand\" \"\")]\n-\t\t\t    UNSPEC_TLSGD)))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n-  \"add\\\\t%1, %2, %0, %%tgd_add(%a3)\")\n-\n-(define_insn \"tgd_add64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 3 \"tgd_symbolic_operand\" \"\")]\n-\t\t\t    UNSPEC_TLSGD)))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n+(define_insn \"tgd_add<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(plus:P (match_operand:P 1 \"register_operand\" \"r\")\n+\t\t(unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n+\t\t\t   (match_operand 3 \"tgd_symbolic_operand\" \"\")]\n+\t\t\t  UNSPEC_TLSGD)))]\n+  \"TARGET_TLS\"\n   \"add\\\\t%1, %2, %0, %%tgd_add(%a3)\")\n \n-(define_insn \"tgd_call32\"\n+(define_insn \"tgd_call<P:mode>\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(call (mem:SI (unspec:SI [(match_operand:SI 1 \"symbolic_operand\" \"s\")\n-\t\t\t\t  (match_operand 2 \"tgd_symbolic_operand\" \"\")]\n-\t\t\t\t UNSPEC_TLSGD))\n+\t(call (mem:P (unspec:P [(match_operand:P 1 \"symbolic_operand\" \"s\")\n+\t\t\t\t(match_operand 2 \"tgd_symbolic_operand\" \"\")]\n+\t\t\t       UNSPEC_TLSGD))\n \t      (match_operand 3 \"\" \"\")))\n-   (clobber (reg:SI O7_REG))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n-  \"call\\t%a1, %%tgd_call(%a2)%#\"\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn \"tgd_call64\"\n-  [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(call (mem:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"s\")\n-\t\t\t\t  (match_operand 2 \"tgd_symbolic_operand\" \"\")]\n-\t\t\t\t UNSPEC_TLSGD))\n-\t      (match_operand 3 \"\" \"\")))\n-   (clobber (reg:DI O7_REG))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n+   (clobber (reg:P O7_REG))]\n+  \"TARGET_TLS\"\n   \"call\\t%a1, %%tgd_call(%a2)%#\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"tldm_hi22\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (high:SI (unspec:SI [(const_int 0)] UNSPEC_TLSLDM)))]\n+(define_insn \"tldm_hi22<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (high:P (unspec:P [(const_int 0)] UNSPEC_TLSLDM)))]\n   \"TARGET_TLS\"\n   \"sethi\\\\t%%tldm_hi22(%&), %0\")\n \n-(define_insn \"tldm_lo10\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t    (unspec:SI [(const_int 0)] UNSPEC_TLSLDM)))]\n+(define_insn \"tldm_lo10<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(lo_sum:P (match_operand:P 1 \"register_operand\" \"r\")\n+\t\t  (unspec:P [(const_int 0)] UNSPEC_TLSLDM)))]\n   \"TARGET_TLS\"\n   \"add\\\\t%1, %%tldm_lo10(%&), %0\")\n \n-(define_insn \"tldm_add32\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")]\n-\t\t\t    UNSPEC_TLSLDM)))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n-  \"add\\\\t%1, %2, %0, %%tldm_add(%&)\")\n-\n-(define_insn \"tldm_add64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")]\n-\t\t\t    UNSPEC_TLSLDM)))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n+(define_insn \"tldm_add<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(plus:P (match_operand:P 1 \"register_operand\" \"r\")\n+\t\t(unspec:P [(match_operand:P 2 \"register_operand\" \"r\")]\n+\t\t\t  UNSPEC_TLSLDM)))]\n+  \"TARGET_TLS\"\n   \"add\\\\t%1, %2, %0, %%tldm_add(%&)\")\n \n-(define_insn \"tldm_call32\"\n-  [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(call (mem:SI (unspec:SI [(match_operand:SI 1 \"symbolic_operand\" \"s\")]\n-\t\t\t\t UNSPEC_TLSLDM))\n-\t      (match_operand 2 \"\" \"\")))\n-   (clobber (reg:SI O7_REG))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n-  \"call\\t%a1, %%tldm_call(%&)%#\"\n-  [(set_attr \"type\" \"call\")])\n-\n-(define_insn \"tldm_call64\"\n+(define_insn \"tldm_call<P:mode>\"\n   [(set (match_operand 0 \"register_operand\" \"=r\")\n-\t(call (mem:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"s\")]\n-\t\t\t\t UNSPEC_TLSLDM))\n+\t(call (mem:P (unspec:P [(match_operand:P 1 \"symbolic_operand\" \"s\")]\n+\t\t\t       UNSPEC_TLSLDM))\n \t      (match_operand 2 \"\" \"\")))\n-   (clobber (reg:DI O7_REG))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n+   (clobber (reg:P O7_REG))]\n+  \"TARGET_TLS\"\n   \"call\\t%a1, %%tldm_call(%&)%#\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"tldo_hix22\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (high:SI (unspec:SI [(match_operand 1 \"tld_symbolic_operand\" \"\")]\n-\t\t\t    UNSPEC_TLSLDO)))]\n+(define_insn \"tldo_hix22<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (high:P (unspec:P [(match_operand 1 \"tld_symbolic_operand\" \"\")]\n+\t\t\t  UNSPEC_TLSLDO)))]\n   \"TARGET_TLS\"\n   \"sethi\\\\t%%tldo_hix22(%a1), %0\")\n \n-(define_insn \"tldo_lox10\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t   (unspec:SI [(match_operand 2 \"tld_symbolic_operand\" \"\")]\n-\t\t\t      UNSPEC_TLSLDO)))]\n+(define_insn \"tldo_lox10<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(lo_sum:P (match_operand:P 1 \"register_operand\" \"r\")\n+\t\t  (unspec:P [(match_operand 2 \"tld_symbolic_operand\" \"\")]\n+\t\t\t    UNSPEC_TLSLDO)))]\n   \"TARGET_TLS\"\n   \"xor\\\\t%1, %%tldo_lox10(%a2), %0\")\n \n-(define_insn \"tldo_add32\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t    UNSPEC_TLSLDO)))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n-  \"add\\\\t%1, %2, %0, %%tldo_add(%a3)\")\n-\n-(define_insn \"tldo_add64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t    UNSPEC_TLSLDO)))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n+(define_insn \"tldo_add<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(plus:P (match_operand:P 1 \"register_operand\" \"r\")\n+\t\t(unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n+\t\t\t   (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t  UNSPEC_TLSLDO)))]\n+  \"TARGET_TLS\"\n   \"add\\\\t%1, %2, %0, %%tldo_add(%a3)\")\n \n-(define_insn \"tie_hi22\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (high:SI (unspec:SI [(match_operand 1 \"tie_symbolic_operand\" \"\")]\n-\t\t\t    UNSPEC_TLSIE)))]\n+(define_insn \"tie_hi22<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (high:P (unspec:P [(match_operand 1 \"tie_symbolic_operand\" \"\")]\n+\t\t\t  UNSPEC_TLSIE)))]\n   \"TARGET_TLS\"\n   \"sethi\\\\t%%tie_hi22(%a1), %0\")\n \n-(define_insn \"tie_lo10\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t   (unspec:SI [(match_operand 2 \"tie_symbolic_operand\" \"\")]\n-\t\t\t      UNSPEC_TLSIE)))]\n+(define_insn \"tie_lo10<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(lo_sum:P (match_operand:P 1 \"register_operand\" \"r\")\n+\t\t  (unspec:P [(match_operand 2 \"tie_symbolic_operand\" \"\")]\n+\t\t\t    UNSPEC_TLSIE)))]\n   \"TARGET_TLS\"\n   \"add\\\\t%1, %%tie_lo10(%a2), %0\")\n \n+; Note the %%tie_ld operator\n (define_insn \"tie_ld32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n@@ -8134,170 +8088,109 @@ visl\")\n   [(set_attr \"type\" \"load\")\n    (set_attr \"subtype\" \"regular\")])\n \n+; Note the %%tie_ldx operator\n (define_insn \"tie_ld64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t    (match_operand:DI 2 \"register_operand\" \"r\")\n \t\t    (match_operand 3 \"tie_symbolic_operand\" \"\")]\n \t\t   UNSPEC_TLSIE))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"ldx\\\\t[%1 + %2], %0, %%tie_ldx(%a3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"subtype\" \"regular\")])\n \n-(define_insn \"tie_add32\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 3 \"tie_symbolic_operand\" \"\")]\n-\t\t\t    UNSPEC_TLSIE)))]\n-  \"TARGET_SUN_TLS && TARGET_ARCH32\"\n-  \"add\\\\t%1, %2, %0, %%tie_add(%a3)\")\n-\n-(define_insn \"tie_add64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t (unspec:DI [(match_operand:DI 2 \"register_operand\" \"r\")\n-\t\t\t     (match_operand 3 \"tie_symbolic_operand\" \"\")]\n-\t\t\t    UNSPEC_TLSIE)))]\n-  \"TARGET_SUN_TLS && TARGET_ARCH64\"\n+(define_insn \"tie_add<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(plus:P (match_operand:P 1 \"register_operand\" \"r\")\n+\t\t(unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n+\t\t\t   (match_operand 3 \"tie_symbolic_operand\" \"\")]\n+\t\t\t  UNSPEC_TLSIE)))]\n+  \"TARGET_SUN_TLS\"\n   \"add\\\\t%1, %2, %0, %%tie_add(%a3)\")\n \n-(define_insn \"tle_hix22_sp32\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (high:SI (unspec:SI [(match_operand 1 \"tle_symbolic_operand\" \"\")]\n-\t\t\t    UNSPEC_TLSLE)))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n+(define_insn \"tle_hix22<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (high:P (unspec:P [(match_operand 1 \"tle_symbolic_operand\" \"\")]\n+\t\t\t  UNSPEC_TLSLE)))]\n+  \"TARGET_TLS\"\n   \"sethi\\\\t%%tle_hix22(%a1), %0\")\n \n-(define_insn \"tle_lox10_sp32\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t   (unspec:SI [(match_operand 2 \"tle_symbolic_operand\" \"\")]\n-\t\t\t      UNSPEC_TLSLE)))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n-  \"xor\\\\t%1, %%tle_lox10(%a2), %0\")\n-\n-(define_insn \"tle_hix22_sp64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (high:DI (unspec:DI [(match_operand 1 \"tle_symbolic_operand\" \"\")]\n+(define_insn \"tle_lox10<P:mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+\t(lo_sum:P (match_operand:P 1 \"register_operand\" \"r\")\n+\t\t  (unspec:P [(match_operand 2 \"tle_symbolic_operand\" \"\")]\n \t\t\t    UNSPEC_TLSLE)))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n-  \"sethi\\\\t%%tle_hix22(%a1), %0\")\n-\n-(define_insn \"tle_lox10_sp64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t   (unspec:DI [(match_operand 2 \"tle_symbolic_operand\" \"\")]\n-\t\t\t      UNSPEC_TLSLE)))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n+  \"TARGET_TLS\"\n   \"xor\\\\t%1, %%tle_lox10(%a2), %0\")\n \n-;; Now patterns combining tldo_add{32,64} with some integer loads or stores\n-(define_insn \"*tldo_ldub_sp32\"\n+;; Now patterns combining tldo_add with some integer loads or stores\n+(define_insn \"*tldo_ldub<P:mode>\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n-\t(mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t (match_operand:SI 1 \"register_operand\" \"r\"))))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n+\t(mem:QI (plus:P (unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n+\t\t\t\t   (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t  UNSPEC_TLSLDO)\n+\t\t\t(match_operand:P 1 \"register_operand\" \"r\"))))]\n+  \"TARGET_TLS\"\n   \"ldub\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"subtype\" \"regular\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n-(define_insn \"*tldo_ldub1_sp32\"\n+(define_insn \"*tldo_ldub1<P:mode>\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(zero_extend:HI\n-\t  (mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t      UNSPEC_TLSLDO)\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")))))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n+\t  (mem:QI (plus:P (unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n+\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t    UNSPEC_TLSLDO)\n+\t\t\t  (match_operand:P 1 \"register_operand\" \"r\")))))]\n+  \"TARGET_TLS\"\n   \"ldub\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"subtype\" \"regular\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n-(define_insn \"*tldo_ldub2_sp32\"\n+(define_insn \"*tldo_ldub2<P:mode>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(zero_extend:SI\n-\t  (mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t      UNSPEC_TLSLDO)\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")))))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n+\t  (mem:QI (plus:P (unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n+\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t    UNSPEC_TLSLDO)\n+\t\t\t  (match_operand:P 1 \"register_operand\" \"r\")))))]\n+  \"TARGET_TLS\"\n   \"ldub\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"subtype\" \"regular\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n-(define_insn \"*tldo_ldsb1_sp32\"\n+(define_insn \"*tldo_ldsb1<P:mode>\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(sign_extend:HI\n-\t  (mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t      UNSPEC_TLSLDO)\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")))))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n+\t  (mem:QI (plus:P (unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n+\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t    UNSPEC_TLSLDO)\n+\t\t\t  (match_operand:P 1 \"register_operand\" \"r\")))))]\n+  \"TARGET_TLS\"\n   \"ldsb\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"sload\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n-(define_insn \"*tldo_ldsb2_sp32\"\n+(define_insn \"*tldo_ldsb2<P:mode>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(sign_extend:SI\n-\t  (mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t      UNSPEC_TLSLDO)\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")))))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n-  \"ldsb\\t[%1 + %2], %0, %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"sload\")\n-   (set_attr \"us3load_type\" \"3cycle\")])\n-\n-(define_insn \"*tldo_ldub_sp64\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n-\t(mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t  (mem:QI (plus:P (unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n \t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t (match_operand:DI 1 \"register_operand\" \"r\"))))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n-  \"ldub\\t[%1 + %2], %0, %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"subtype\" \"regular\")\n-   (set_attr \"us3load_type\" \"3cycle\")])\n-\n-(define_insn \"*tldo_ldub1_sp64\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:HI\n-\t  (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t      UNSPEC_TLSLDO)\n-\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n-  \"ldub\\t[%1 + %2], %0, %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"subtype\" \"regular\")\n-   (set_attr \"us3load_type\" \"3cycle\")])\n-\n-(define_insn \"*tldo_ldub2_sp64\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t  (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t      UNSPEC_TLSLDO)\n-\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n-  \"ldub\\t[%1 + %2], %0, %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"subtype\" \"regular\")\n+\t\t\t  (match_operand:P 1 \"register_operand\" \"r\")))))]\n+  \"TARGET_TLS\"\n+  \"ldsb\\t[%1 + %2], %0, %%tldo_add(%3)\"\n+  [(set_attr \"type\" \"sload\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_ldub3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t  (mem:QI (plus:DI (unspec:DI [(match_operand:DI 2 \"register_operand\" \"r\")\n \t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t      UNSPEC_TLSLDO)\n \t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n@@ -8307,34 +8200,10 @@ visl\")\n    (set_attr \"subtype\" \"regular\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n-(define_insn \"*tldo_ldsb1_sp64\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:HI\n-\t  (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t      UNSPEC_TLSLDO)\n-\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n-  \"ldsb\\t[%1 + %2], %0, %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"sload\")\n-   (set_attr \"us3load_type\" \"3cycle\")])\n-\n-(define_insn \"*tldo_ldsb2_sp64\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:SI\n-\t  (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t      UNSPEC_TLSLDO)\n-\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n-  \"ldsb\\t[%1 + %2], %0, %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"sload\")\n-   (set_attr \"us3load_type\" \"3cycle\")])\n-\n (define_insn \"*tldo_ldsb3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t  (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t  (mem:QI (plus:DI (unspec:DI [(match_operand:DI 2 \"register_operand\" \"r\")\n \t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t      UNSPEC_TLSLDO)\n \t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n@@ -8343,72 +8212,47 @@ visl\")\n   [(set_attr \"type\" \"sload\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n-(define_insn \"*tldo_lduh_sp32\"\n+(define_insn \"*tldo_lduh<P:mode>\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(mem:HI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t (match_operand:SI 1 \"register_operand\" \"r\"))))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n+\t(mem:HI (plus:P (unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n+\t\t\t\t   (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t  UNSPEC_TLSLDO)\n+\t\t\t(match_operand:P 1 \"register_operand\" \"r\"))))]\n+  \"TARGET_TLS\"\n   \"lduh\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"subtype\" \"regular\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n-(define_insn \"*tldo_lduh1_sp32\"\n+(define_insn \"*tldo_lduh1<P:mode>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(zero_extend:SI\n-\t  (mem:HI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t      UNSPEC_TLSLDO)\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")))))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n+\t  (mem:HI (plus:P (unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n+\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t    UNSPEC_TLSLDO)\n+\t\t\t  (match_operand:P 1 \"register_operand\" \"r\")))))]\n+  \"TARGET_TLS\"\n   \"lduh\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"subtype\" \"regular\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n-(define_insn \"*tldo_ldsh1_sp32\"\n+(define_insn \"*tldo_ldsh1<P:mode>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(sign_extend:SI\n-\t  (mem:HI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t      UNSPEC_TLSLDO)\n-\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")))))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n-  \"ldsh\\t[%1 + %2], %0, %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"sload\")\n-   (set_attr \"us3load_type\" \"3cycle\")])\n-\n-(define_insn \"*tldo_lduh_sp64\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t  (mem:HI (plus:P (unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n \t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t (match_operand:DI 1 \"register_operand\" \"r\"))))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n-  \"lduh\\t[%1 + %2], %0, %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"subtype\" \"regular\")\n-   (set_attr \"us3load_type\" \"3cycle\")])\n-\n-(define_insn \"*tldo_lduh1_sp64\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SI\n-\t  (mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t      UNSPEC_TLSLDO)\n-\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n-  \"lduh\\t[%1 + %2], %0, %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"subtype\" \"regular\")\n+\t\t\t  (match_operand:P 1 \"register_operand\" \"r\")))))]\n+  \"TARGET_TLS\"\n+  \"ldsh\\t[%1 + %2], %0, %%tldo_add(%3)\"\n+  [(set_attr \"type\" \"sload\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_lduh2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t  (mem:HI (plus:DI (unspec:DI [(match_operand:DI 2 \"register_operand\" \"r\")\n \t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t      UNSPEC_TLSLDO)\n \t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n@@ -8418,22 +8262,10 @@ visl\")\n    (set_attr \"subtype\" \"regular\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n-(define_insn \"*tldo_ldsh1_sp64\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:SI\n-\t  (mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t      UNSPEC_TLSLDO)\n-\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n-  \"ldsh\\t[%1 + %2], %0, %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"sload\")\n-   (set_attr \"us3load_type\" \"3cycle\")])\n-\n (define_insn \"*tldo_ldsh2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t  (mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t  (mem:HI (plus:DI (unspec:DI [(match_operand:DI 2 \"register_operand\" \"r\")\n \t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t      UNSPEC_TLSLDO)\n \t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n@@ -8442,32 +8274,21 @@ visl\")\n   [(set_attr \"type\" \"sload\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n-(define_insn \"*tldo_lduw_sp32\"\n+(define_insn \"*tldo_lduw<P:mode>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(mem:SI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t (match_operand:SI 1 \"register_operand\" \"r\"))))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n+\t(mem:SI (plus:P (unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n+\t\t\t\t   (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t  UNSPEC_TLSLDO)\n+\t\t\t(match_operand:P 1 \"register_operand\" \"r\"))))]\n+  \"TARGET_TLS\"\n   \"ld\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"subtype\" \"regular\")])\n \n-(define_insn \"*tldo_lduw_sp64\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(mem:SI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t (match_operand:DI 1 \"register_operand\" \"r\"))))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n-  \"lduw\\t[%1 + %2], %0, %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"subtype\" \"regular\")])\n-\n (define_insn \"*tldo_lduw1_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n-\t  (mem:SI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t  (mem:SI (plus:DI (unspec:DI [(match_operand:DI 2 \"register_operand\" \"r\")\n \t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t      UNSPEC_TLSLDO)\n \t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n@@ -8479,8 +8300,8 @@ visl\")\n (define_insn \"*tldo_ldsw1_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t  (mem:SI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t(match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t  (mem:SI (plus:DI (unspec:DI [(match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t      UNSPEC_TLSLDO)\n \t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n@@ -8490,7 +8311,7 @@ visl\")\n \n (define_insn \"*tldo_ldx_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(mem:DI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t(mem:DI (plus:DI (unspec:DI [(match_operand:DI 2 \"register_operand\" \"r\")\n \t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t    UNSPEC_TLSLDO)\n \t\t\t (match_operand:DI 1 \"register_operand\" \"r\"))))]\n@@ -8499,68 +8320,38 @@ visl\")\n   [(set_attr \"type\" \"load\")\n    (set_attr \"subtype\" \"regular\")])\n \n-(define_insn \"*tldo_stb_sp32\"\n-  [(set (mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))\n-\t(match_operand:QI 0 \"register_operand\" \"r\"))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n-  \"stb\\t%0, [%1 + %2], %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"store\")])\n-\n-(define_insn \"*tldo_stb_sp64\"\n-  [(set (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))\n+(define_insn \"*tldo_stb<P:mode>\"\n+  [(set (mem:QI (plus:P (unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n+\t\t\t\t   (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t  UNSPEC_TLSLDO)\n+\t\t\t(match_operand:P 1 \"register_operand\" \"r\")))\n \t(match_operand:QI 0 \"register_operand\" \"r\"))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n+  \"TARGET_TLS\"\n   \"stb\\t%0, [%1 + %2], %%tldo_add(%3)\"\n   [(set_attr \"type\" \"store\")])\n \n-(define_insn \"*tldo_sth_sp32\"\n-  [(set (mem:HI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))\n-\t(match_operand:HI 0 \"register_operand\" \"r\"))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n-  \"sth\\t%0, [%1 + %2], %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"store\")])\n-\n-(define_insn \"*tldo_sth_sp64\"\n-  [(set (mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))\n+(define_insn \"*tldo_sth<P:mode>\"\n+  [(set (mem:HI (plus:P (unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n+\t\t\t\t   (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t   UNSPEC_TLSLDO)\n+\t\t\t(match_operand:P 1 \"register_operand\" \"r\")))\n \t(match_operand:HI 0 \"register_operand\" \"r\"))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n+  \"TARGET_TLS\"\n   \"sth\\t%0, [%1 + %2], %%tldo_add(%3)\"\n   [(set_attr \"type\" \"store\")])\n \n-(define_insn \"*tldo_stw_sp32\"\n-  [(set (mem:SI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))\n+(define_insn \"*tldo_stw<P:mode>\"\n+  [(set (mem:SI (plus:P (unspec:P [(match_operand:P 2 \"register_operand\" \"r\")\n+\t\t\t\t   (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t  UNSPEC_TLSLDO)\n+\t\t\t(match_operand:P 1 \"register_operand\" \"r\")))\n \t(match_operand:SI 0 \"register_operand\" \"r\"))]\n-  \"TARGET_TLS && TARGET_ARCH32\"\n+  \"TARGET_TLS\"\n   \"st\\t%0, [%1 + %2], %%tldo_add(%3)\"\n   [(set_attr \"type\" \"store\")])\n \n-(define_insn \"*tldo_stw_sp64\"\n-  [(set (mem:SI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))\n-\t(match_operand:SI 0 \"register_operand\" \"r\"))]\n-  \"TARGET_TLS && TARGET_ARCH64\"\n-  \"stw\\t%0, [%1 + %2], %%tldo_add(%3)\"\n-  [(set_attr \"type\" \"store\")])\n-\n (define_insn \"*tldo_stx_sp64\"\n-  [(set (mem:DI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+  [(set (mem:DI (plus:DI (unspec:DI [(match_operand:DI 2 \"register_operand\" \"r\")\n \t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n \t\t\t\t    UNSPEC_TLSLDO)\n \t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))"}, {"sha": "5caca46b5d5a0b4cfcf44674c6cb0d3fd4e76047", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "patch": "@@ -1,3 +1,12 @@\n+2019-01-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/sparc/tls-ld-int8.c: New test.\n+\t* gcc.target/sparc/tls-ld-int16.c: Likewise.\n+\t* gcc.target/sparc/tls-ld-int32.c: Likewise.\n+\t* gcc.target/sparc/tls-ld-uint8.c: Likewise.\n+\t* gcc.target/sparc/tls-ld-uint16.c: Likewise.\n+\t* gcc.target/sparc/tls-ld-uint32.c: Likewise.\n+\n 2018-01-09  Sudakshina Das  <sudi.das@arm.com>\n \n \t* gcc.target/aarch64/bti-1.c: Update test to not add command line"}, {"sha": "d3d28086156eef2a02323cc1cfac77f55643761c", "filename": "gcc/testsuite/gcc.target/sparc/tls-ld-int16.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-int16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-int16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-int16.c?ref=4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }\n+/* { dg-add-options tls } */\n+\n+#include <stdint.h>\n+\n+__thread int16_t var1 __attribute__((tls_model(\"local-dynamic\")));\n+__thread int16_t var2 __attribute__((tls_model(\"local-dynamic\")));\n+\n+int16_t sum (void)\n+{\n+  return var1 + var2;\n+}\n+\n+int32_t ext32_sum (void)\n+{\n+  return (int32_t)var1 + (int32_t)var2;\n+}\n+\n+long ext_sum (void)\n+{\n+  return (long)var1 + (long)var2;\n+}\n+\n+void set (int16_t i)\n+{\n+  var1 = i;\n+  var2 = i;\n+}\n+\n+/* { dg-final { scan-assembler-times \"__tls_get_addr\" 4 } } */\n+/* { dg-final { scan-assembler-times \"lduh\\t\\[^\\n\\]*tldo_add\" 2 } } */\n+/* { dg-final { scan-assembler-times \"ldsh\\t\\[^\\n\\]*tldo_add\" 4 } } */\n+/* { dg-final { scan-assembler-times \"sth\\t\\[^\\n\\]*tldo_add\" 2 } } */"}, {"sha": "cf18147ef7273cec2f682a23dbbc58cb7f079243", "filename": "gcc/testsuite/gcc.target/sparc/tls-ld-int32.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-int32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-int32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-int32.c?ref=4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }\n+/* { dg-add-options tls } */\n+\n+#include <stdint.h>\n+\n+__thread int32_t var1 __attribute__((tls_model(\"local-dynamic\")));\n+__thread int32_t var2 __attribute__((tls_model(\"local-dynamic\")));\n+\n+int32_t sum (void)\n+{\n+  return var1 + var2;\n+}\n+\n+#if defined(__sparcv9) || defined(__arch64__)\n+long ext_sum (void)\n+{\n+  return (long)var1 + (long)var2;\n+}\n+#else\n+void *addr (void)\n+{\n+  return &var1;\n+}\n+#endif\n+\n+void set (int32_t i)\n+{\n+  var1 = i;\n+  var2 = i;\n+}\n+\n+/* { dg-final { scan-assembler-times \"__tls_get_addr\" 3 } } */\n+/* { dg-final { scan-assembler-times \"ld\\t\\[^\\n\\]*tldo_add\" 2 } } */\n+/* { dg-final { scan-assembler-times \"ldsw\\t\\[^\\n\\]*tldo_add\" 2 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"st\\t\\[^\\n\\]*tldo_add\" 2 } } */"}, {"sha": "c1925df084fb2a0cd6702ab82a658d4b3a0f5c20", "filename": "gcc/testsuite/gcc.target/sparc/tls-ld-int64.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-int64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-int64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-int64.c?ref=4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }\n+/* { dg-add-options tls } */\n+/* { dg-require-effective-target lp64 } */\n+\n+#include <stdint.h>\n+\n+__thread int64_t var1 __attribute__((tls_model(\"local-dynamic\")));\n+__thread int64_t var2 __attribute__((tls_model(\"local-dynamic\")));\n+\n+int64_t sum (void)\n+{\n+  return var1 + var2;\n+}\n+\n+void set (int64_t i)\n+{\n+  var1 = i;\n+  var2 = i;\n+}\n+\n+/* { dg-final { scan-assembler-times \"__tls_get_addr\" 2 } } */\n+/* { dg-final { scan-assembler-times \"ldx\\t\\[^\\n\\]*tldo_add\" 2 } } */\n+/* { dg-final { scan-assembler-times \"stx\\t\\[^\\n\\]*tldo_add\" 2 } } */"}, {"sha": "a07cffc37f8c47a1a2bcba08036db9daa3a59662", "filename": "gcc/testsuite/gcc.target/sparc/tls-ld-int8.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-int8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-int8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-int8.c?ref=4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }\n+/* { dg-add-options tls } */\n+\n+#include <stdint.h>\n+\n+__thread int8_t var1 __attribute__((tls_model(\"local-dynamic\")));\n+__thread int8_t var2 __attribute__((tls_model(\"local-dynamic\")));\n+\n+int8_t sum (void)\n+{\n+  return var1 + var2;\n+}\n+\n+int16_t ext16_sum (void)\n+{\n+  return (int16_t)var1 + (int16_t)var2;\n+}\n+\n+int32_t ext32_sum (void)\n+{\n+  return (int32_t)var1 + (int32_t)var2;\n+}\n+\n+long ext_sum (void)\n+{\n+  return (long)var1 + (long)var2;\n+}\n+\n+void set (int8_t i)\n+{\n+  var1 = i;\n+  var2 = i;\n+}\n+\n+/* { dg-final { scan-assembler-times \"__tls_get_addr\" 5 } } */\n+/* { dg-final { scan-assembler-times \"ldub\\t\\[^\\n\\]*tldo_add\" 2 } } */\n+/* { dg-final { scan-assembler-times \"ldsb\\t\\[^\\n\\]*tldo_add\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stb\\t\\[^\\n\\]*tldo_add\" 2 } } */"}, {"sha": "41ee687b28c513841f74e89912b56597f8895340", "filename": "gcc/testsuite/gcc.target/sparc/tls-ld-uint16.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-uint16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-uint16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-uint16.c?ref=4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }\n+/* { dg-add-options tls } */\n+\n+#include <stdint.h>\n+\n+__thread uint16_t var1 __attribute__((tls_model(\"local-dynamic\")));\n+__thread uint16_t var2 __attribute__((tls_model(\"local-dynamic\")));\n+\n+uint16_t sum (void)\n+{\n+  return var1 + var2;\n+}\n+\n+uint32_t ext32_sum (void)\n+{\n+  return (uint32_t)var1 + (uint32_t)var2;\n+}\n+\n+unsigned long ext_sum (void)\n+{\n+  return (unsigned long)var1 + (unsigned long)var2;\n+}\n+\n+void set (uint16_t i)\n+{\n+  var1 = i;\n+  var2 = i;\n+}\n+\n+/* { dg-final { scan-assembler-times \"__tls_get_addr\" 4 } } */\n+/* { dg-final { scan-assembler-times \"lduh\\t\\[^\\n\\]*tldo_add\" 6 } } */\n+/* { dg-final { scan-assembler-times \"sth\\t\\[^\\n\\]*tldo_add\" 2 } } */"}, {"sha": "9c7915372b9e76354b7f2c489f883c104952d4cc", "filename": "gcc/testsuite/gcc.target/sparc/tls-ld-uint32.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-uint32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-uint32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-uint32.c?ref=4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }\n+/* { dg-add-options tls } */\n+\n+#include <stdint.h>\n+\n+__thread uint32_t var1 __attribute__((tls_model(\"local-dynamic\")));\n+__thread uint32_t var2 __attribute__((tls_model(\"local-dynamic\")));\n+\n+uint32_t sum (void)\n+{\n+  return var1 + var2;\n+}\n+\n+#if defined(__sparcv9) || defined(__arch64__)\n+unsigned long ext_sum (void)\n+{\n+  return (unsigned long)var1 + (unsigned long)var2;\n+}\n+#else\n+void *addr (void)\n+{\n+  return &var1;\n+}\n+#endif\n+\n+void set (int32_t i)\n+{\n+  var1 = i;\n+  var2 = i;\n+}\n+\n+/* { dg-final { scan-assembler-times \"__tls_get_addr\" 3 } } */\n+/* { dg-final { scan-assembler-times \"ld\\t\\[^\\n\\]*tldo_add\" 2 } } */\n+/* { dg-final { scan-assembler-times \"lduw\\t\\[^\\n\\]*tldo_add\" 2 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"st\\t\\[^\\n\\]*tldo_add\" 2 } } */"}, {"sha": "0dcff66eb15e4dc9029102fe856e87e51fa1bb76", "filename": "gcc/testsuite/gcc.target/sparc/tls-ld-uint8.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-uint8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-uint8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ftls-ld-uint8.c?ref=4e8e8a9f019e7bf89ae6ce98d049972f7deec0fb", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }\n+/* { dg-add-options tls } */\n+\n+#include <stdint.h>\n+\n+__thread uint8_t var1 __attribute__((tls_model(\"local-dynamic\")));\n+__thread uint8_t var2 __attribute__((tls_model(\"local-dynamic\")));\n+\n+uint8_t sum (void)\n+{\n+  return var1 + var2;\n+}\n+\n+uint16_t ext16_sum (void)\n+{\n+  return (uint16_t)var1 + (uint16_t)var2;\n+}\n+\n+uint32_t ext32_sum (void)\n+{\n+  return (uint32_t)var1 + (uint32_t)var2;\n+}\n+\n+unsigned long ext_sum (void)\n+{\n+  return (unsigned long)var1 + (unsigned long)var2;\n+}\n+\n+void set (uint8_t i)\n+{\n+  var1 = i;\n+  var2 = i;\n+}\n+\n+/* { dg-final { scan-assembler-times \"__tls_get_addr\" 5 } } */\n+/* { dg-final { scan-assembler-times \"ldub\\t\\[^\\n\\]*tldo_add\" 8 } } */\n+/* { dg-final { scan-assembler-times \"stb\\t\\[^\\n\\]*tldo_add\" 2 } } */"}]}