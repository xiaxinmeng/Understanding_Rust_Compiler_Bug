{"sha": "fd973d5630bb29a2a0a90aa325b26395b8882320", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5NzNkNTYzMGJiMjlhMmEwYTkwYWEzMjViMjYzOTViODg4MjMyMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-02-19T11:39:01Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-02-19T11:39:01Z"}, "message": "* regmove.c (regmove_optimize): Avoid increasing of register pressure.\n\nFrom-SVN: r49864", "tree": {"sha": "222a2716de93e05a06cbe5eabc0d34f99a518c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/222a2716de93e05a06cbe5eabc0d34f99a518c09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd973d5630bb29a2a0a90aa325b26395b8882320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd973d5630bb29a2a0a90aa325b26395b8882320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd973d5630bb29a2a0a90aa325b26395b8882320", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd973d5630bb29a2a0a90aa325b26395b8882320/comments", "author": null, "committer": null, "parents": [{"sha": "419a71d37c276fdc2dbd8e7487ca719861b62e75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419a71d37c276fdc2dbd8e7487ca719861b62e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/419a71d37c276fdc2dbd8e7487ca719861b62e75"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "b6f6a1c1de0d1ed7be2bcb775723cb536dfe43f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd973d5630bb29a2a0a90aa325b26395b8882320/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd973d5630bb29a2a0a90aa325b26395b8882320/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd973d5630bb29a2a0a90aa325b26395b8882320", "patch": "@@ -1,3 +1,7 @@\n+Tue Feb 19 12:37:23 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* regmove.c (regmove_optimize): Avoid increasing of register pressure.\n+\n 2002-02-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \tPR other/5718"}, {"sha": "aa1c17bbcee6e595315250665e5e3844094a03c6", "filename": "gcc/regmove.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd973d5630bb29a2a0a90aa325b26395b8882320/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd973d5630bb29a2a0a90aa325b26395b8882320/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=fd973d5630bb29a2a0a90aa325b26395b8882320", "patch": "@@ -1328,19 +1328,22 @@ regmove_optimize (f, nregs, regmove_dump_file)\n \t\t}\n \t      src_class = reg_preferred_class (REGNO (src));\n \t      dst_class = reg_preferred_class (REGNO (dst));\n-\t      if (! regclass_compatible_p (src_class, dst_class))\n+\n+\t      if (! (src_note = find_reg_note (insn, REG_DEAD, src)))\n \t\t{\n-\t\t  if (!copy_src)\n-\t\t    {\n-\t\t      copy_src = src;\n-\t\t      copy_dst = dst;\n-\t\t    }\n+\t\t  /* We used to force the copy here like in other cases, but\n+\t\t     it produces worse code, as it eliminates no copy\n+\t\t     instructions and the copy emitted will be produced by\n+\t\t     reload anyway.  On patterns with multiple alternatives,\n+\t\t     there may be better sollution availble.\n+\n+\t\t     In particular this change produced slower code for numeric\n+\t\t     i387 programs.  */\n+\n \t\t  continue;\n \t\t}\n \n-\t      /* Can not modify an earlier insn to set dst if this insn\n-\t\t uses an old value in the source.  */\n-\t      if (reg_overlap_mentioned_p (dst, SET_SRC (set)))\n+\t      if (! regclass_compatible_p (src_class, dst_class))\n \t\t{\n \t\t  if (!copy_src)\n \t\t    {\n@@ -1350,7 +1353,9 @@ regmove_optimize (f, nregs, regmove_dump_file)\n \t\t  continue;\n \t\t}\n \n-\t      if (! (src_note = find_reg_note (insn, REG_DEAD, src)))\n+\t      /* Can not modify an earlier insn to set dst if this insn\n+\t\t uses an old value in the source.  */\n+\t      if (reg_overlap_mentioned_p (dst, SET_SRC (set)))\n \t\t{\n \t\t  if (!copy_src)\n \t\t    {\n@@ -1360,7 +1365,6 @@ regmove_optimize (f, nregs, regmove_dump_file)\n \t\t  continue;\n \t\t}\n \n-\n \t      /* If src is set once in a different basic block,\n \t\t and is set equal to a constant, then do not use\n \t\t it for this optimization, as this would make it"}]}