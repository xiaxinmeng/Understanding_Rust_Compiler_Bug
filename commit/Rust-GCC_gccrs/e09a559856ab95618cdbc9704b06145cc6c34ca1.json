{"sha": "e09a559856ab95618cdbc9704b06145cc6c34ca1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA5YTU1OTg1NmFiOTU2MThjZGJjOTcwNGIwNjE0NWNjNmMzNGNhMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-06T10:21:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-06T10:21:40Z"}, "message": "2014-02-06  Sergey Rybin  <rybin@adacore.com frybin>\n\n\t* gnat_ugn.texi, vms_data.ads: Add documentation of -j option for\n\tgnatmetric.\n\n2014-02-06  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Shift_Left): Handle shift counts greater\n\tthan the word size when operating in Modify_Tree_For_C mode.\n\t* sinfo.ads: Add documentation section on Modify_Tree_For_C mode.\n\n2014-02-06  Robert Dewar  <dewar@adacore.com>\n\n\t* erroutc.adb (Warning_Specifically_Suppressed.Matches):\n\tcompare is case insensitive.\n\t* gnat_rm.texi: Document that string compare for Warnings Off\n\tis now case insensitive.\n\nFrom-SVN: r207546", "tree": {"sha": "ddca44a0085e7f6847a251f1fc7eeab3f38a218d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddca44a0085e7f6847a251f1fc7eeab3f38a218d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e09a559856ab95618cdbc9704b06145cc6c34ca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09a559856ab95618cdbc9704b06145cc6c34ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e09a559856ab95618cdbc9704b06145cc6c34ca1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e09a559856ab95618cdbc9704b06145cc6c34ca1/comments", "author": null, "committer": null, "parents": [{"sha": "5216b599a622e895fb4a8f63ae45cd22d4f43281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5216b599a622e895fb4a8f63ae45cd22d4f43281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5216b599a622e895fb4a8f63ae45cd22d4f43281"}], "stats": {"total": 142, "additions": 137, "deletions": 5}, "files": [{"sha": "d61f7745d62f152197b4af19b4083c61918c91df", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e09a559856ab95618cdbc9704b06145cc6c34ca1", "patch": "@@ -1,3 +1,21 @@\n+2014-02-06  Sergey Rybin  <rybin@adacore.com frybin>\n+\n+\t* gnat_ugn.texi, vms_data.ads: Add documentation of -j option for\n+\tgnatmetric.\n+\n+2014-02-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Shift_Left): Handle shift counts greater\n+\tthan the word size when operating in Modify_Tree_For_C mode.\n+\t* sinfo.ads: Add documentation section on Modify_Tree_For_C mode.\n+\n+2014-02-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* erroutc.adb (Warning_Specifically_Suppressed.Matches):\n+\tcompare is case insensitive.\n+\t* gnat_rm.texi: Document that string compare for Warnings Off\n+\tis now case insensitive.\n+\n 2014-02-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat_rm.texi: Small wording tweak."}, {"sha": "b31f760aa806e9bcf0152daeb8bf1c9a2d1e87b4", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=e09a559856ab95618cdbc9704b06145cc6c34ca1", "patch": "@@ -1347,6 +1347,7 @@ package body Erroutc is\n       function Matches (S : String; P : String) return Boolean;\n       --  Returns true if the String S patches the pattern P, which can contain\n       --  wild card chars (*). The entire pattern must match the entire string.\n+      --  Case is ignored in the comparison (so X matches x).\n \n       -------------\n       -- Matches --\n@@ -1398,7 +1399,7 @@ package body Erroutc is\n \n             --  Dealt with end of string and *, advance if we have a match\n \n-            elsif S (SPtr) = P (PPtr) then\n+            elsif Fold_Lower (S (SPtr)) = Fold_Lower (P (PPtr)) then\n                SPtr := SPtr + 1;\n                PPtr := PPtr + 1;\n "}, {"sha": "ec9febff5f65a0ac7e271548fc76b607b60a392f", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=e09a559856ab95618cdbc9704b06145cc6c34ca1", "patch": "@@ -8787,6 +8787,7 @@ package body Exp_Ch4 is\n                   Make_Op_Shift_Left (Loc,\n                     Left_Opnd  => Left_Opnd (N),\n                     Right_Opnd => Right_Opnd (N)),\n+\n                 Right_Opnd =>\n                   Make_Op_Shift_Right (Loc,\n                     Left_Opnd  => Duplicate_Subexpr_No_Checks (Left_Opnd (N)),\n@@ -8839,6 +8840,7 @@ package body Exp_Ch4 is\n                   Make_Op_Shift_Right (Loc,\n                     Left_Opnd  => Left_Opnd (N),\n                     Right_Opnd => Right_Opnd (N)),\n+\n                 Right_Opnd =>\n                   Make_Op_Shift_Left (Loc,\n                     Left_Opnd  => Duplicate_Subexpr_No_Checks (Left_Opnd (N)),\n@@ -8857,9 +8859,64 @@ package body Exp_Ch4 is\n    -- Expand_N_Op_Shift_Left --\n    ----------------------------\n \n+   --  Note: nothing in this routine depends on left as opposed to right shifts\n+   --  so we share the routine for expanding shift right operations.\n+\n    procedure Expand_N_Op_Shift_Left (N : Node_Id) is\n    begin\n       Binary_Op_Validity_Checks (N);\n+\n+      --  If we are in Modify_Tree_For_C mode, then ensure that the right\n+      --  operand is not greater than the word size (since that would not\n+      --  be defined properly by the corresponding C shift operator).\n+\n+      if Modify_Tree_For_C then\n+         declare\n+            Right : constant Node_Id    := Right_Opnd (N);\n+            Loc   : constant Source_Ptr := Sloc (Right);\n+            Typ   : constant Entity_Id  := Etype (N);\n+            Siz   : constant Uint       := Esize (Typ);\n+            Orig  : Node_Id;\n+            OK    : Boolean;\n+            Lo    : Uint;\n+            Hi    : Uint;\n+\n+         begin\n+            if Compile_Time_Known_Value (Right) then\n+               if Expr_Value (Right) >= Siz then\n+                  Rewrite (N, Make_Integer_Literal (Loc, 0));\n+                  Analyze_And_Resolve (N, Typ);\n+               end if;\n+\n+            --  Not compile time known, find range\n+\n+            else\n+               Determine_Range (Right, OK, Lo, Hi, Assume_Valid => True);\n+\n+               --  Nothing to do if known to be OK range, otherwise expand\n+\n+               if not OK or else Hi >= Siz then\n+\n+                  --  Prevent recursion on copy of shift node\n+\n+                  Orig := Relocate_Node (N);\n+                  Set_Analyzed (Orig);\n+\n+                  --  Now do the rewrite\n+\n+                  Rewrite (N,\n+                     Make_If_Expression (Loc,\n+                       Expressions => New_List (\n+                         Make_Op_Ge (Loc,\n+                           Left_Opnd  => Duplicate_Subexpr_Move_Checks (Right),\n+                           Right_Opnd => Make_Integer_Literal (Loc, Siz)),\n+                         Make_Integer_Literal (Loc, 0),\n+                         Orig)));\n+                  Analyze_And_Resolve (N, Typ);\n+               end if;\n+            end if;\n+         end;\n+      end if;\n    end Expand_N_Op_Shift_Left;\n \n    -----------------------------\n@@ -8868,7 +8925,9 @@ package body Exp_Ch4 is\n \n    procedure Expand_N_Op_Shift_Right (N : Node_Id) is\n    begin\n-      Binary_Op_Validity_Checks (N);\n+      --  Share shift left circuit\n+\n+      Expand_N_Op_Shift_Left (N);\n    end Expand_N_Op_Shift_Right;\n \n    ----------------------------------------\n@@ -8892,6 +8951,10 @@ package body Exp_Ch4 is\n       --  Note: in almost all C compilers it would work to just shift a\n       --  signed integer right, but it's undefined and we cannot rely on it.\n \n+      --  Note: the above works fine for shift counts greater than or equal\n+      --  to the word size, since in this case (not (Shift_Right (Mask, bits)))\n+      --  generates all 1'bits.\n+\n       --  What about non-binary modulus ???\n \n       declare"}, {"sha": "dad15cd919ca8d75d6084237662ecb5dc8bd40fc", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=e09a559856ab95618cdbc9704b06145cc6c34ca1", "patch": "@@ -7435,6 +7435,7 @@ the message. For example, you can use\n message @code{warning: 960 bits of \"a\" unused}. No other regular\n expression notations are permitted. All characters other than asterisk in\n these three specific cases are treated as literal characters in the match.\n+The match is case insensitive, for example XYZ matches xyz.\n \n The above use of patterns to match the message applies only to warning\n messages generated by the front end. This form of the pragma with a"}, {"sha": "9dfedf653a8f83efea0b0ef113af93113747ea7b", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=e09a559856ab95618cdbc9704b06145cc6c34ca1", "patch": "@@ -6497,7 +6497,8 @@ an inherited operation must carry an overriding indicator.\n @emph{Check pragma casing.}\n Pragma names must be written in mixed case, that is, the\n initial letter and any letter following an underscore must be uppercase.\n-All other letters must be lowercase.\n+All other letters must be lowercase. An exception is that SPARK_Mode is\n+allowed as an alternative for Spark_Mode.\n \n @item ^r^REFERENCES^\n @emph{Check references.}\n@@ -16622,14 +16623,21 @@ line breaks. You can use this switch more than once in the same call to\n @command{gnatmetric}. You also can combine this switch with\n an explicit list of files.\n \n+@item ^-j^/PROCESSES=^@var{n}\n+@cindex @option{^-j^/PROCESSES^} (@command{gnatmetric})\n+Use @var{n} processes to carry out the tree creations (internal representations\n+of the argument sources). On a multiprocessor machine this speeds up processing\n+of big sets of argument sources. If @var{n} is 0, then the maximum number of\n+parallel tree creations is the number of core processors on the platform.\n+\n @item ^-v^/VERBOSE^\n-@cindex @option{^-v^/VERBOSE^} (@code{gnatmetric})\n+@cindex @option{^-v^/VERBOSE^} (@command{gnatmetric})\n Verbose mode;\n @command{gnatmetric} generates version information and then\n a trace of sources being processed.\n \n @item ^-q^/QUIET^\n-@cindex @option{^-q^/QUIET^} (@code{gnatmetric})\n+@cindex @option{^-q^/QUIET^} (@command{gnatmetric})\n Quiet mode.\n @end table\n "}, {"sha": "f399dabfaf6f93886012169ef18d3961c94c6151", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=e09a559856ab95618cdbc9704b06145cc6c34ca1", "patch": "@@ -614,6 +614,28 @@ package Sinfo is\n    --    refers to a node or is posted on its source location, and has the\n    --    effect of inhibiting further messages involving this same node.\n \n+   -----------------------\n+   -- Modify_Tree_For_C --\n+   -----------------------\n+\n+   --  If the flag Opt.Modify_Tree_For_C is set True, then the tree is modified\n+   --  in ways that help match the semantics better with C, easing the task of\n+   --  interfacing to C code generators (other than GCC, where the work is done\n+   --  in gigi, and there is no point in changing that), and also making life\n+   --  easier for Cprint in generating C source code.\n+\n+   --  The current modifications implemented are as follows:\n+\n+   --    N_Op_Rotate_Left, N_Op_Rotate_Right, N_Shift_Right_Arithmetic nodes\n+   --    are eliminated from the tree (since these operations do not exist in\n+   --    C), and the operations are rewritten in terms of logical shifts and\n+   --    other logical operations that do exist in C. See Exp_Ch4 expansion\n+   --    routines for these operators for details of the transformations made.\n+\n+   --    The right operand of N_Op_Shift_Right and N_Op_Shift_Left is always\n+   --    less than the word size (since other values are not well-defined in\n+   --    C). This is done using an explicit test if necessary.\n+\n    ------------------------------------\n    -- Description of Semantic Fields --\n    ------------------------------------\n@@ -7145,6 +7167,12 @@ package Sinfo is\n       --  plus fields for expression\n       --  Shift_Count_OK (Flag4-Sem)\n \n+      --  Note: N_Op_Rotate_Left, N_Op_Rotate_Right, N_Shift_Right_Arithmetic\n+      --  never appear in the expanded tree if Modify_Tree_For_C mode is set.\n+\n+      --  Note: For N_Op_Shift_Left and N_Op_Shift_Right, the right operand is\n+      --  always less than the word size if Modify_Tree_For_C mode is set.\n+\n    --------------------------\n    -- Obsolescent Features --\n    --------------------------"}, {"sha": "e9b0212f93f4e25972830966e5ada19af58aa896", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e09a559856ab95618cdbc9704b06145cc6c34ca1/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=e09a559856ab95618cdbc9704b06145cc6c34ca1", "patch": "@@ -5798,6 +5798,18 @@ package VMS_Data is\n    --   at the main project file will be parsed before the invocation of the\n    --   binder.\n \n+   S_Metric_Processes : aliased constant S := \"/PROCESSES=#\"                 &\n+                                            \"-j#\";\n+\n+   --        /NOPROCESSES (D)\n+   --        /PROCESSES=NNN\n+   --\n+   --   Use NNN processes to carry out the tree creations (internal\n+   --   representations of the argument sources). On a multiprocessor machine\n+   --   this speeds up processing of big sets of argument sources. If NNN is 0,\n+   --   then the maximum number of parallel tree creations is the number of\n+   --   core processors on the platform.\n+\n    S_Metric_Quiet    : aliased constant S := \"/QUIET \"                     &\n                                              \"-q\";\n    --        /NOQUIET (D)\n@@ -5871,6 +5883,7 @@ package VMS_Data is\n                         S_Metric_No_Local         'Access,\n                         S_Metric_No_Static_Loop   'Access,\n                         S_Metric_Project          'Access,\n+                        S_Metric_Processes        'Access,\n                         S_Metric_Quiet            'Access,\n                         S_Metric_Suffix           'Access,\n                         S_Metric_Subdirs          'Access,"}]}