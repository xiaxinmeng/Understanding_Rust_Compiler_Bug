{"sha": "07522ae90b5bae2ca95b64f3a4de60bea0cc0567", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc1MjJhZTkwYjViYWUyY2E5NWI2NGYzYTRkZTYwYmVhMGNjMDU2Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-18T12:55:29Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-18T12:55:29Z"}, "message": "libstdc++: Fix compilation with released versions of Clang\n\nClang 9 supports C++20 via -std=c++2a but doesn't support Concepts, so\nseveral of the new additions related to the Ranges library fail to\ncompile with -std=c++2a. The new definition of iterator_traits and the\ndefinition of default_sentinel_t are guarded by __cpp_lib_concepts, so\ncheck that in addition to __cplusplus > 201703L.\n\n\t* include/bits/stl_algobase.h (__lexicographical_compare_aux): Check\n\t__cpp_lib_concepts before using iter_reference_t.\n\t* include/bits/stream_iterator.h (istream_iterator): Check\n\t__cpp_lib_concepts before using default_sentinel_t.\n\t* include/bits/streambuf_iterator.h (istreambuf_iterator): Likewise.", "tree": {"sha": "95a4d7b13262a92a762c606e5f8f117f422d4c26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95a4d7b13262a92a762c606e5f8f117f422d4c26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07522ae90b5bae2ca95b64f3a4de60bea0cc0567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07522ae90b5bae2ca95b64f3a4de60bea0cc0567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07522ae90b5bae2ca95b64f3a4de60bea0cc0567", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07522ae90b5bae2ca95b64f3a4de60bea0cc0567/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbde9e2d5952ff1c50c4aeaaabb23cebafb50759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbde9e2d5952ff1c50c4aeaaabb23cebafb50759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbde9e2d5952ff1c50c4aeaaabb23cebafb50759"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "ae5fedbc66b0168ccfb2e807673a730529db7105", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07522ae90b5bae2ca95b64f3a4de60bea0cc0567/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07522ae90b5bae2ca95b64f3a4de60bea0cc0567/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=07522ae90b5bae2ca95b64f3a4de60bea0cc0567", "patch": "@@ -1,5 +1,11 @@\n 2020-03-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/stl_algobase.h (__lexicographical_compare_aux): Check\n+\t__cpp_lib_concepts before using iter_reference_t.\n+\t* include/bits/stream_iterator.h (istream_iterator): Check\n+\t__cpp_lib_concepts before using default_sentinel_t.\n+\t* include/bits/streambuf_iterator.h (istreambuf_iterator): Likewise.\n+\n \tPR libstdc++/94203\n \t* include/experimental/executor (executor::executor(Executor)): Call\n \tmake_shared directly instead of _M_create. Create _Tgt1 object."}, {"sha": "a7e92d4b4733d193dc5bf8fb7326fc1e74bffc3c", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07522ae90b5bae2ca95b64f3a4de60bea0cc0567/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07522ae90b5bae2ca95b64f3a4de60bea0cc0567/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=07522ae90b5bae2ca95b64f3a4de60bea0cc0567", "patch": "@@ -1283,7 +1283,7 @@ _GLIBCXX_END_NAMESPACE_CONTAINER\n \t && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed\n \t && __is_pointer<_II1>::__value\n \t && __is_pointer<_II2>::__value\n-#if __cplusplus > 201703L\n+#if __cplusplus > 201703L && __cpp_lib_concepts\n \t // For C++20 iterator_traits<volatile T*>::value_type is non-volatile\n \t // so __is_byte<T> could be true, but we can't use memcmp with\n \t // volatile data."}, {"sha": "bd5ba2a80c0b25569c101240ad17846c30cfe2d2", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07522ae90b5bae2ca95b64f3a4de60bea0cc0567/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07522ae90b5bae2ca95b64f3a4de60bea0cc0567/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=07522ae90b5bae2ca95b64f3a4de60bea0cc0567", "patch": "@@ -77,7 +77,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         _M_ok(__obj._M_ok)\n       { }\n \n-#if __cplusplus > 201703L\n+#if __cplusplus > 201703L && __cpp_lib_concepts\n       constexpr\n       istream_iterator(default_sentinel_t)\n       noexcept(is_nothrow_default_constructible_v<_Tp>)\n@@ -153,7 +153,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator!=(const istream_iterator& __x, const istream_iterator& __y)\n       { return !__x._M_equal(__y); }\n \n-#if __cplusplus > 201703L\n+#if __cplusplus > 201703L && __cpp_lib_concepts\n       friend bool\n       operator==(const istream_iterator& __i, default_sentinel_t)\n       { return !__i._M_stream; }"}, {"sha": "d3f1610fc8deee2992a345e79ec95f4faf87c27c", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07522ae90b5bae2ca95b64f3a4de60bea0cc0567/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07522ae90b5bae2ca95b64f3a4de60bea0cc0567/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=07522ae90b5bae2ca95b64f3a4de60bea0cc0567", "patch": "@@ -115,7 +115,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _GLIBCXX_CONSTEXPR istreambuf_iterator() _GLIBCXX_USE_NOEXCEPT\n       : _M_sbuf(0), _M_c(traits_type::eof()) { }\n \n-#if __cplusplus > 201703L\n+#if __cplusplus > 201703L && __cpp_lib_concepts\n       constexpr istreambuf_iterator(default_sentinel_t) noexcept\n       : istreambuf_iterator() { }\n #endif\n@@ -215,7 +215,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn traits_type::eq_int_type(__c, __eof);\n       }\n \n-#if __cplusplus > 201703L\n+#if __cplusplus > 201703L && __cpp_lib_concepts\n       friend bool\n       operator==(const istreambuf_iterator& __i, default_sentinel_t __s)\n       { return __i._M_at_eof(); }"}]}