{"sha": "9ff206d3865df5cb8407490aa9481029beac087f", "node_id": "C_kwDOANBUbNoAKDlmZjIwNmQzODY1ZGY1Y2I4NDA3NDkwYWE5NDgxMDI5YmVhYzA4N2Y", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-02T20:12:10Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-02T20:13:14Z"}, "message": "i386: Introduce V2QImode vectorized arithmetic [PR103861]\n\nThis patch adds basic V2QImode infrastructure and V2QImode arithmetic\noperations (plus, minus and neg).  The patched compiler can emit SSE\nvectorized QImode operations (e.g. PADDB) with partial QImode vector,\nand also synthesized double HI/LO QImode operations with integer registers.\n\nThe testcase:\n\ntypedef char __v2qi __attribute__ ((__vector_size__ (2)));\n__v2qi plus  (__v2qi a, __v2qi b) { return a + b; };\n\ncompiles with -O2 to:\n\n        movl    %edi, %edx\n        movl    %esi, %eax\n        addb    %sil, %dl\n        addb    %ah, %dh\n        movl    %edx, %eax\n        ret\n\nwhich is much better than what the unpatched compiler produces:\n\n        movl    %edi, %eax\n        movl    %esi, %edx\n        xorl    %ecx, %ecx\n        movb    %dil, %cl\n        movsbl  %dh, %edx\n        movsbl  %ah, %eax\n        addl    %edx, %eax\n        addb    %sil, %cl\n        movb    %al, %ch\n        movl    %ecx, %eax\n        ret\n\nThe V2QImode vectorization does not require vector registers, so it can\nbe enabled by default also for 32-bit targets without SSE.\n\nThe patch also enables vectorized V2QImode sign/zero extends.\n\n2021-12-30  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\tPR target/103861\n\t* config/i386/i386.h (VALID_SSE2_REG_MODE): Add V2QImode.\n\t(VALID_INT_MODE_P): Ditto.\n\t* config/i386/i386.c (ix86_secondary_reload): Handle\n\tV2QImode reloads from SSE register to memory.\n\t(vector_mode_supported_p): Always return true for V2QImode.\n\t* config/i386/i386.md (*subqi_ext<mode>_2): New insn pattern.\n\t(*negqi_ext<mode>_2): Ditto.\n\t* config/i386/mmx.md (movv2qi): New expander.\n\t(movmisalignv2qi): Ditto.\n\t(*movv2qi_internal): New insn pattern.\n\t(*pushv2qi2): Ditto.\n\t(negv2qi2 and splitters): Ditto.\n\t(<plusminus:insn>v2qi3 and splitters): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/103861\n\t* gcc.dg/store_merging_18.c (dg-options): Add -fno-tree-vectorize.\n\t* gcc.dg/store_merging_29.c (dg-options): Ditto.\n\t* gcc.target/i386/pr103861.c: New test.\n\t* gcc.target/i386/pr92658-avx512vl.c (dg-final):\n\tRemove vpmovqb scan-assembler xfail.\n\t* gcc.target/i386/pr92658-sse4.c (dg-final):\n\tRemove pmovzxbq scan-assembler xfail.\n\t* gcc.target/i386/pr92658-sse4-2.c (dg-final):\n\tRemove pmovsxbq scan-assembler xfail.\n\t* gcc.target/i386/warn-vect-op-2.c (dg-warning): Adjust warnings.", "tree": {"sha": "fb8a6fee872e0a4ddc63c25ab4dd90ee7983428e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb8a6fee872e0a4ddc63c25ab4dd90ee7983428e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ff206d3865df5cb8407490aa9481029beac087f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff206d3865df5cb8407490aa9481029beac087f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff206d3865df5cb8407490aa9481029beac087f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff206d3865df5cb8407490aa9481029beac087f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bec6e3aaa306ca7b87d6e6654acca546fa25e90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bec6e3aaa306ca7b87d6e6654acca546fa25e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bec6e3aaa306ca7b87d6e6654acca546fa25e90"}], "stats": {"total": 375, "additions": 362, "deletions": 13}, "files": [{"sha": "4e02b26b44f26d3cf1f636ae0fa656f225917026", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9ff206d3865df5cb8407490aa9481029beac087f", "patch": "@@ -19306,7 +19306,7 @@ ix86_secondary_reload (bool in_p, rtx x, reg_class_t rclass,\n     }\n \n   /* Require movement to gpr, and then store to memory.  */\n-  if ((mode == HFmode || mode == HImode)\n+  if ((mode == HFmode || mode == HImode || mode == V2QImode)\n       && !TARGET_SSE4_1\n       && SSE_CLASS_P (rclass)\n       && !in_p && MEM_P (x))\n@@ -22082,6 +22082,8 @@ ix86_vector_mode_supported_p (machine_mode mode)\n   if ((TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n       && VALID_MMX_REG_MODE_3DNOW (mode))\n     return true;\n+  if (mode == V2QImode)\n+    return true;\n   return false;\n }\n "}, {"sha": "3adb1cb22c6a6165420b6a1b8bcca6748d444eb3", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=9ff206d3865df5cb8407490aa9481029beac087f", "patch": "@@ -1039,7 +1039,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n   ((MODE) == V16QImode || (MODE) == V8HImode || (MODE) == V2DFmode\t\\\n    || (MODE) == V8HFmode || (MODE) == V4HFmode || (MODE) == V2HFmode\t\\\n    || (MODE) == V4QImode || (MODE) == V2HImode || (MODE) == V1SImode\t\\\n-   || (MODE) == V2DImode || (MODE) == DFmode || (MODE) == HFmode)\n+   || (MODE) == V2DImode || (MODE) == V2QImode || (MODE) == DFmode\t\\\n+   || (MODE) == HFmode)\n \n #define VALID_SSE_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V1TImode || (MODE) == TImode\t\t\t\t\\\n@@ -1072,7 +1073,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == SDmode || (MODE) == DDmode\t\t\t\t\\\n    || (MODE) == HFmode || (MODE) == HCmode\t\t\t\t\\\n    || (MODE) == V2HImode || (MODE) == V2HFmode\t\t\t\t\\\n-   || (MODE) == V1SImode || (MODE) == V4QImode\t\t\t\t\\\n+   || (MODE) == V1SImode || (MODE) == V4QImode || (MODE) == V2QImode\t\\\n    || (TARGET_64BIT\t\t\t\t\t\t\t\\\n        && ((MODE) == TImode || (MODE) == CTImode\t\t\t\\\n \t   || (MODE) == TFmode || (MODE) == TCmode\t\t\t\\"}, {"sha": "cd955090d4fc280b4c7eadb002327d7758bea640", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9ff206d3865df5cb8407490aa9481029beac087f", "patch": "@@ -6931,6 +6931,30 @@\n     operands[4] = gen_rtx_SIGN_EXTEND (<DPWI>mode, operands[2]);\n })\n \n+(define_insn \"*subqi_ext<mode>_2\"\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n+\t  (minus:QI\n+\t    (subreg:QI\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"0\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n+\t    (subreg:QI\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 2 \"register_operand\" \"Q\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)) 0))\n+  (clobber (reg:CC FLAGS_REG))]\n+  \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n+   rtx_equal_p (operands[0], operands[1])\"\n+  \"sub{b}\\t{%h2, %h0|%h0, %h2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"QI\")])\n+\n (define_insn \"*subv<mode>4\"\n   [(set (reg:CCO FLAGS_REG)\n \t(eq:CCO (minus:<DWI>\n@@ -10901,6 +10925,25 @@\n   [(set_attr \"type\" \"negnot\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*negqi_ext<mode>_2\"\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n+\t  (neg:QI\n+\t    (subreg:QI\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"0\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)) 0))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n+   rtx_equal_p (operands[0], operands[1])\"\n+  \"neg{b}\\t%h0\"\n+  [(set_attr \"type\" \"negnot\")\n+   (set_attr \"mode\" \"QI\")])\n+\n ;; Negate with jump on overflow.\n (define_expand \"negv<mode>3\"\n   [(parallel [(set (reg:CCO FLAGS_REG)"}, {"sha": "c4e71c28c7cddaee07a34836a93cd35d7bf9d30b", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 282, "deletions": 2, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=9ff206d3865df5cb8407490aa9481029beac087f", "patch": "@@ -261,8 +261,8 @@\n     \"=r ,m ,v,v,v,m,r,v\")\n \t(match_operand:V_32 1 \"general_operand\"\n     \"rmC,rC,C,v,m,v,v,r\"))]\n-  \"TARGET_SSE2 &&\n-   !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+  \"TARGET_SSE2\n+   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -359,6 +359,174 @@\n   DONE;\n })\n \n+(define_expand \"movv2qi\"\n+  [(set (match_operand:V2QI 0 \"nonimmediate_operand\")\n+\t(match_operand:V2QI 1 \"nonimmediate_operand\"))]\n+  \"\"\n+{\n+  ix86_expand_vector_move (V2QImode, operands);\n+  DONE;\n+})\n+\n+(define_insn \"*movv2qi_internal\"\n+  [(set (match_operand:V2QI 0 \"nonimmediate_operand\"\n+    \"=r,r,r,m ,v,v,v,m,r,v\")\n+\t(match_operand:V2QI 1 \"general_operand\"\n+    \"r ,C,m,rC,C,v,m,v,v,r\"))]\n+  \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_IMOV:\n+      if (get_attr_mode (insn) == MODE_SI)\n+\treturn \"mov{l}\\t{%k1, %k0|%k0, %k1}\";\n+      else\n+\treturn \"mov{w}\\t{%1, %0|%0, %1}\";\n+\n+    case TYPE_IMOVX:\n+      /* movzwl is faster than movw on p2 due to partial word stalls,\n+\t though not as fast as an aligned movl.  */\n+      return \"movz{wl|x}\\t{%1, %k0|%k0, %1}\";\n+\n+    case TYPE_SSELOG1:\n+      if (satisfies_constraint_C (operands[1]))\n+\treturn standard_sse_constant_opcode (insn, operands);\n+\n+      if (SSE_REG_P (operands[0]))\n+\treturn MEM_P (operands[1])\n+\t  ? \"%vpinsrw\\t{$0, %1, %d0|%d0, %1, 0}\"\n+\t  : \"%vpinsrw\\t{$0, %k1, %d0|%d0, %k1, 0}\";\n+      else\n+\treturn MEM_P (operands[0])\n+\t  ? \"%vpextrw\\t{$0, %1, %0|%0, %1, 0}\"\n+\t  : \"%vpextrw\\t{$0, %1, %k0|%k0, %1, 0}\";\n+\n+    case TYPE_SSEMOV:\n+      return ix86_output_ssemov (insn, operands);\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set (attr \"isa\")\n+\t(cond [(eq_attr \"alternative\" \"4,5,6,8,9\")\n+\t\t  (const_string \"sse2\")\n+\t       (eq_attr \"alternative\" \"7\")\n+\t\t  (const_string \"sse4\")\n+\t       ]\n+\t       (const_string \"*\")))\n+   (set (attr \"type\")\n+     (cond [(eq_attr \"alternative\" \"6,7,8,9\")\n+\t      (if_then_else (match_test \"TARGET_AVX512FP16\")\n+\t\t(const_string \"ssemov\")\n+\t\t(const_string \"sselog1\"))\n+\t    (eq_attr \"alternative\" \"4\")\n+\t      (const_string \"sselog1\")\n+\t    (eq_attr \"alternative\" \"5\")\n+\t      (const_string \"ssemov\")\n+\t    (match_test \"optimize_function_for_size_p (cfun)\")\n+\t      (const_string \"imov\")\n+\t    (and (eq_attr \"alternative\" \"0\")\n+\t\t (ior (not (match_test \"TARGET_PARTIAL_REG_STALL\"))\n+\t\t      (not (match_test \"TARGET_HIMODE_MATH\"))))\n+\t      (const_string \"imov\")\n+\t    (and (eq_attr \"alternative\" \"1,2\")\n+\t\t (match_operand:V2QI 1 \"aligned_operand\"))\n+\t      (const_string \"imov\")\n+\t    (and (match_test \"TARGET_MOVX\")\n+\t\t (eq_attr \"alternative\" \"0,2\"))\n+\t      (const_string \"imovx\")\n+\t   ]\n+\t   (const_string \"imov\")))\n+   (set (attr \"prefix\")\n+\t(cond [(eq_attr \"alternative\" \"4,5,6,7,8,9\")\n+\t\t (const_string \"maybe_evex\")\n+\t      ]\n+\t      (const_string \"orig\")))\n+   (set (attr \"mode\")\n+     (cond [(eq_attr \"alternative\" \"6,7,8,9\")\n+\t      (if_then_else (match_test \"TARGET_AVX512FP16\")\n+\t\t(const_string \"HI\")\n+\t\t(const_string \"TI\"))\n+\t    (eq_attr \"alternative\" \"4\")\n+\t      (cond [(match_test \"TARGET_AVX\")\n+\t\t       (const_string \"TI\")\n+\t\t     (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t\t  (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t       (const_string \"V4SF\")\n+\t\t    ]\n+\t\t    (const_string \"TI\"))\n+\t    (eq_attr \"alternative\" \"5\")\n+\t      (cond [(match_test \"TARGET_AVX512FP16\")\n+\t\t       (const_string \"HI\")\n+\t\t     (match_test \"TARGET_AVX\")\n+\t\t       (const_string \"TI\")\n+\t\t     (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t\t  (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t       (const_string \"V4SF\")\n+\t\t    ]\n+\t\t    (const_string \"TI\"))\n+\t    (eq_attr \"type\" \"imovx\")\n+\t      (const_string \"SI\")\n+\t    (and (eq_attr \"alternative\" \"1,2\")\n+\t\t (match_operand:V2QI 1 \"aligned_operand\"))\n+\t      (const_string \"SI\")\n+\t    (and (eq_attr \"alternative\" \"0\")\n+\t\t (ior (not (match_test \"TARGET_PARTIAL_REG_STALL\"))\n+\t\t      (not (match_test \"TARGET_HIMODE_MATH\"))))\n+\t      (const_string \"SI\")\n+\t    ]\n+\t    (const_string \"HI\")))\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"8\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_FROM_VEC\")\n+\t    (eq_attr \"alternative\" \"9\")\n+\t      (symbol_ref \"TARGET_INTER_UNIT_MOVES_TO_VEC\")\n+\t   ]\n+\t   (symbol_ref \"true\")))])\n+\n+;; We always round up to UNITS_PER_WORD bytes.\n+(define_insn \"*pushv2qi2\"\n+  [(set (match_operand:V2QI 0 \"push_operand\" \"=X,X\")\n+\t(match_operand:V2QI 1 \"nonmemory_no_elim_operand\" \"rC,v\"))]\n+  \"\"\n+  \"* return TARGET_64BIT ? \\\"push{q}\\t%q1\\\" : \\\"push{l}\\t%k1\\\";\n+   #\"\n+  [(set_attr \"isa\" \"*,sse4\")\n+   (set_attr \"type\" \"push,multi\")\n+   (set (attr \"mode\")\n+     (cond [(eq_attr \"alternative\" \"0\")\n+\t      (if_then_else (match_test \"TARGET_64BIT\")\n+\t\t(const_string \"DI\")\n+\t\t(const_string \"SI\"))\n+\t    (eq_attr \"alternative\" \"1\")\n+\t      (if_then_else (match_test \"TARGET_AVX512FP16\")\n+\t\t(const_string \"HI\")\n+\t\t(const_string \"TI\"))\n+\t   ]\n+\t   (const_string \"HI\")))])\n+\n+(define_split\n+  [(set (match_operand:V2QI 0 \"push_operand\")\n+\t(match_operand:V2QI 1 \"sse_reg_operand\"))]\n+  \"TARGET_SSE4_1 && reload_completed\"\n+  [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n+   (set (match_dup 0) (match_dup 1))]\n+{\n+  operands[2] = GEN_INT (-PUSH_ROUNDING (GET_MODE_SIZE (V2QImode)));\n+  /* Preserve memory attributes. */\n+  operands[0] = replace_equiv_address (operands[0], stack_pointer_rtx);\n+})\n+\n+(define_expand \"movmisalignv2qi\"\n+  [(set (match_operand:V2QI 0 \"nonimmediate_operand\")\n+\t(match_operand:V2QI 1 \"nonimmediate_operand\"))]\n+  \"\"\n+{\n+  ix86_expand_vector_move (V2QImode, operands);\n+  DONE;\n+})\n+\n (define_insn \"sse_movntq\"\n   [(set (match_operand:DI 0 \"memory_operand\" \"=m,m\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"y,r\")]\n@@ -1461,6 +1629,58 @@\n   \"TARGET_MMX_WITH_SSE\"\n   \"operands[2] = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\")\n \n+(define_insn \"negv2qi2\"\n+  [(set (match_operand:V2QI 0 \"register_operand\" \"=Q,&Yw\")\n+        (neg:V2QI\n+\t  (match_operand:V2QI 1 \"register_operand\" \"0,Yw\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"\"\n+  \"#\"\n+  [(set_attr \"isa\" \"*,sse2\")\n+   (set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"QI,TI\")])\n+\n+(define_split\n+  [(set (match_operand:V2QI 0 \"general_reg_operand\")\n+        (neg:V2QI\n+\t  (match_operand:V2QI 1 \"general_reg_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"reload_completed\"\n+  [(parallel\n+     [(set (strict_low_part (match_dup 0))\n+\t   (neg:QI (match_dup 1)))\n+      (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+     [(set (zero_extract:HI (match_dup 2) (const_int 8) (const_int 8))\n+\t   (subreg:HI\n+\t     (neg:QI\n+\t       (subreg:QI\n+\t         (zero_extract:HI (match_dup 3)\n+\t\t\t          (const_int 8)\n+\t\t\t\t  (const_int 8)) 0)) 0))\n+      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[3] = gen_lowpart (HImode, operands[1]);\n+  operands[2] = gen_lowpart (HImode, operands[0]);\n+  operands[1] = gen_lowpart (QImode, operands[1]);\n+  operands[0] = gen_lowpart (QImode, operands[0]);\n+})\n+\n+(define_split\n+  [(set (match_operand:V2QI 0 \"sse_reg_operand\")\n+        (neg:V2QI\n+\t  (match_operand:V2QI 1 \"sse_reg_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (match_dup 2))\n+   (set (match_dup 0)\n+\t(minus:V4QI (match_dup 0) (match_dup 1)))]\n+{\n+  operands[2] = CONST0_RTX (V4QImode);\n+  operands[1] = gen_lowpart (V4QImode, operands[1]);\n+  operands[0] = gen_lowpart (V4QImode, operands[0]);\n+})\n+\n (define_expand \"mmx_<insn><mode>3\"\n   [(set (match_operand:MMXMODEI8 0 \"register_operand\")\n \t(plusminus:MMXMODEI8\n@@ -1515,6 +1735,66 @@\n    (set_attr \"type\" \"sseadd\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"<insn>v2qi3\"\n+  [(set (match_operand:V2QI 0 \"register_operand\" \"=Q,x,Yw\")\n+        (plusminus:V2QI\n+\t  (match_operand:V2QI 1 \"register_operand\" \"<comm>0,0,Yw\")\n+\t  (match_operand:V2QI 2 \"register_operand\" \"Q,x,Yw\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"\"\n+  \"#\"\n+  [(set_attr \"isa\" \"*,sse2_noavx,avx\")\n+   (set_attr \"type\" \"multi,sseadd,sseadd\")\n+   (set_attr \"mode\" \"QI,TI,TI\")])\n+\n+(define_split\n+  [(set (match_operand:V2QI 0 \"general_reg_operand\")\n+        (plusminus:V2QI\n+\t  (match_operand:V2QI 1 \"general_reg_operand\")\n+\t  (match_operand:V2QI 2 \"general_reg_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"reload_completed\"\n+  [(parallel\n+     [(set (strict_low_part (match_dup 0))\n+\t   (plusminus:QI (match_dup 1) (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+     [(set (zero_extract:HI (match_dup 3) (const_int 8) (const_int 8))\n+\t   (subreg:HI\n+\t     (plusminus:QI\n+\t       (subreg:QI\n+\t         (zero_extract:HI (match_dup 4)\n+\t\t\t          (const_int 8)\n+\t\t\t\t  (const_int 8)) 0)\n+\t       (subreg:QI\n+\t         (zero_extract:HI (match_dup 5)\n+\t\t\t\t  (const_int 8)\n+\t\t\t\t  (const_int 8)) 0)) 0))\n+      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  operands[5] = gen_lowpart (HImode, operands[2]);\n+  operands[4] = gen_lowpart (HImode, operands[1]);\n+  operands[3] = gen_lowpart (HImode, operands[0]);\n+  operands[2] = gen_lowpart (QImode, operands[2]);\n+  operands[1] = gen_lowpart (QImode, operands[1]);\n+  operands[0] = gen_lowpart (QImode, operands[0]);\n+})\n+\n+(define_split\n+  [(set (match_operand:V2QI 0 \"sse_reg_operand\")\n+        (plusminus:V2QI\n+\t  (match_operand:V2QI 1 \"sse_reg_operand\")\n+\t  (match_operand:V2QI 2 \"sse_reg_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_SSE2 && reload_completed\"\n+  [(set (match_dup 0)\n+        (plusminus:V4QI (match_dup 1) (match_dup 2)))]\n+{\n+  operands[2] = gen_lowpart (V4QImode, operands[2]);\n+  operands[1] = gen_lowpart (V4QImode, operands[1]);\n+  operands[0] = gen_lowpart (V4QImode, operands[0]);\n+})\n+\n (define_expand \"mmx_<insn><mode>3\"\n   [(set (match_operand:MMXMODE12 0 \"register_operand\")\n \t(sat_plusminus:MMXMODE12"}, {"sha": "fdff6b4d812178a32aeccc050c88315bde46c37b", "filename": "gcc/testsuite/gcc.dg/store_merging_18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_18.c?ref=9ff206d3865df5cb8407490aa9481029beac087f", "patch": "@@ -1,6 +1,6 @@\n /* PR tree-optimization/83843 */\n /* { dg-do run } */\n-/* { dg-options \"-O2 -fdump-tree-store-merging\" } */\n+/* { dg-options \"-O2 -fno-tree-vectorize -fdump-tree-store-merging\" } */\n /* { dg-final { scan-tree-dump-times \"Merging successful\" 3 \"store-merging\" { target { store_merge && { ! arm*-*-* } } } } } */\n \n __attribute__((noipa)) void"}, {"sha": "e7afc9ddfd3153d6b11548b1eba0f9cc5fec3090", "filename": "gcc/testsuite/gcc.dg/store_merging_29.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstore_merging_29.c?ref=9ff206d3865df5cb8407490aa9481029beac087f", "patch": "@@ -1,7 +1,7 @@\n /* PR tree-optimization/88709 */\n /* { dg-do run { target int32 } } */\n /* { dg-require-effective-target store_merge } */\n-/* { dg-options \"-O2 -fdump-tree-store-merging-details\" } */\n+/* { dg-options \"-O2 -fno-tree-vectorize -fdump-tree-store-merging-details\" } */\n /* { dg-final { scan-tree-dump \"New sequence of 3 stores to replace old one of 6 stores\" \"store-merging\" { target { le && { ! arm*-*-* } } } } } */\n /* { dg-final { scan-tree-dump \"New sequence of \\[34] stores to replace old one of 6 stores\" \"store-merging\" { target { be && { ! arm*-*-* } } } } } */\n "}, {"sha": "158717645b6ecb659c4aa2813a7c7e58d6b6cd6c", "filename": "gcc/testsuite/gcc.target/i386/pr103861.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103861.c?ref=9ff206d3865df5cb8407490aa9481029beac087f", "patch": "@@ -0,0 +1,23 @@\n+/* PR target/103861 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -dp\" } */\n+\n+typedef char __v2qi __attribute__ ((__vector_size__ (2)));\n+\n+__v2qi and (__v2qi a, __v2qi b) { return a & b; };\n+\n+__v2qi andn (__v2qi a, __v2qi b) { return a & ~b; };\n+\n+__v2qi or  (__v2qi a, __v2qi b) { return a | b; };\n+\n+__v2qi xor  (__v2qi a, __v2qi b) { return a ^ b; };\n+\n+__v2qi not  (__v2qi a) { return ~a; };\n+\n+__v2qi plus  (__v2qi a, __v2qi b) { return a + b; };\n+\n+__v2qi minus  (__v2qi a, __v2qi b) { return a - b; };\n+\n+__v2qi neg  (__v2qi a) { return -a; };\n+\n+/* { dg-final { scan-assembler-not \"insvhi\" } } */"}, {"sha": "d712922634cbc47319a9bfc0eaf0ce1d6e85a6b9", "filename": "gcc/testsuite/gcc.target/i386/pr92658-avx512vl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512vl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512vl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-avx512vl.c?ref=9ff206d3865df5cb8407490aa9481029beac087f", "patch": "@@ -123,7 +123,7 @@ truncdb_128 (v16qi * dst, v4si * __restrict src)\n \n /* { dg-final { scan-assembler-times \"vpmovqd\" 2 } } */\n /* { dg-final { scan-assembler-times \"vpmovqw\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vpmovqb\\[ \\t]*%ymm\" 1 } }  */\n-/* { dg-final { scan-assembler-times \"vpmovqb\\[ \\t]*%xmm\" 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"vpmovqb\\[ \\t]*%ymm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovqb\\[ \\t]*%xmm\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovdw\" 2 } } */\n /* { dg-final { scan-assembler-times \"vpmovdb\" 2 } } */"}, {"sha": "4a76a7dadc919c27cc6fa0e668b076ac12756e7f", "filename": "gcc/testsuite/gcc.target/i386/pr92658-sse4-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4-2.c?ref=9ff206d3865df5cb8407490aa9481029beac087f", "patch": "@@ -81,7 +81,7 @@ bar_s8_s64 (v2di * dst, v16qi src)\n   dst[0] = *(v2di *) tem;\n }\n \n-/* { dg-final { scan-assembler-times \"pmovsxbq\" 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"pmovsxbq\" 2 } } */\n \n void\n foo_s16_s32 (v4si * dst, v8hi * __restrict src)"}, {"sha": "4f655a3b6a2ff070b98cd43ff452a507bc50b24b", "filename": "gcc/testsuite/gcc.target/i386/pr92658-sse4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92658-sse4.c?ref=9ff206d3865df5cb8407490aa9481029beac087f", "patch": "@@ -81,7 +81,7 @@ bar_u8_u64 (v2di * dst, v16qi src)\n   dst[0] = *(v2di *) tem;\n }\n \n-/* { dg-final { scan-assembler-times \"pmovzxbq\" 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times \"pmovzxbq\" 2 } } */\n \n void\n foo_u16_u32 (v4si * dst, v8hi * __restrict src)"}, {"sha": "5e378b6bd043eb1afcbfd6fcde359b5efc6e7b3f", "filename": "gcc/testsuite/gcc.target/i386/warn-vect-op-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff206d3865df5cb8407490aa9481029beac087f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fwarn-vect-op-2.c?ref=9ff206d3865df5cb8407490aa9481029beac087f", "patch": "@@ -11,8 +11,8 @@ int main (int argc, char *argv[])\n \t\t\t\t argc, 1, 15, 38, 12, -1, argc, 2};\n   vector (16, signed char) res[] = \n   {\n-    v0 + v1,\t\t  /* { dg-warning \"expanded in parallel\" }  */\n-    v0 - v1,              /* { dg-warning \"expanded in parallel\" }  */\n+    v0 + v1,              /* { dg-warning \"expanded piecewise\" }  */\n+    v0 - v1,              /* { dg-warning \"expanded piecewise\" }  */\n     v0 > v1,              /* { dg-warning \"expanded piecewise\" }  */\n     v0 & v1,              /* { dg-warning \"expanded in parallel\" }  */\n     __builtin_shuffle (v0, v1),        /* { dg-warning \"expanded piecewise\" }  */"}]}