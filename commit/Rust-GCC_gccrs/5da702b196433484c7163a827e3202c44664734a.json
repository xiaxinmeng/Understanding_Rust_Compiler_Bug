{"sha": "5da702b196433484c7163a827e3202c44664734a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRhNzAyYjE5NjQzMzQ4NGM3MTYzYTgyN2UzMjAyYzQ0NjY0NzM0YQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2003-04-07T18:49:11Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2003-04-07T18:49:11Z"}, "message": "invoke.texi (RS/6000 and PowerPC Options): Document -mfloat-gprs.\n\n2003-04-07  Aldy Hernandez  <aldyh@redhat.com>\n\n        * doc/invoke.texi (RS/6000 and PowerPC Options): Document\n        -mfloat-gprs.\n\n        * config/rs6000/rs6000.c: Delete rs6000_fprs.\n        Declare rs6000_float_gprs.\n        Declare rs6000_float_gprs_string.\n        (rs6000_parse_float_gprs_option): New.\n        (rs6000_override_options): Genericize rs6000_parse_* calls to use\n        rs6000_parse_yes_no_option.\n        Change check for cpu=8540, to use TARGET_E500.\n        (rs6000_parse_isel_option): Delete.\n        (rs6000_parse_spe_option): Delete.\n        (rs6000_parse_vrsave_option): Delete.\n\n        * config/rs6000/rs6000.h: Rename rs6000_fprs to rs6000_float_gprs.\n        Define rs6000_float_gprs_string.\n        (TARGET_OPTIONS): Add rs6000_float_gprs option.\n\n        * config/rs6000/eabi.h (TARGET_FPRS): Change to use rs6000_float_gprs.\n\n        * config/rs6000/eabispe.h: Set rs6000_float_gprs.\n\nFrom-SVN: r65336", "tree": {"sha": "b17b3f050d108f7ec88321f972781deab7a5ebe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b17b3f050d108f7ec88321f972781deab7a5ebe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5da702b196433484c7163a827e3202c44664734a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da702b196433484c7163a827e3202c44664734a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5da702b196433484c7163a827e3202c44664734a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da702b196433484c7163a827e3202c44664734a/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cde1d5bf91c64fd33b2b9ddd35cdc948344baed4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cde1d5bf91c64fd33b2b9ddd35cdc948344baed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cde1d5bf91c64fd33b2b9ddd35cdc948344baed4"}], "stats": {"total": 144, "additions": 86, "deletions": 58}, "files": [{"sha": "f779ed3382e6222d38b710299d66e2a153f4125b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da702b196433484c7163a827e3202c44664734a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da702b196433484c7163a827e3202c44664734a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5da702b196433484c7163a827e3202c44664734a", "patch": "@@ -1,3 +1,27 @@\n+2003-04-07  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * doc/invoke.texi (RS/6000 and PowerPC Options): Document\n+        -mfloat-gprs.\n+\n+        * config/rs6000/rs6000.c: Delete rs6000_fprs.\n+        Declare rs6000_float_gprs.\n+        Declare rs6000_float_gprs_string.\n+        (rs6000_parse_float_gprs_option): New.\n+        (rs6000_override_options): Genericize rs6000_parse_* calls to use\n+        rs6000_parse_yes_no_option.\n+        Change check for cpu=8540, to use TARGET_E500.\n+        (rs6000_parse_isel_option): Delete.\n+        (rs6000_parse_spe_option): Delete.\n+        (rs6000_parse_vrsave_option): Delete.\n+\n+        * config/rs6000/rs6000.h: Rename rs6000_fprs to rs6000_float_gprs.\n+        Define rs6000_float_gprs_string.\n+        (TARGET_OPTIONS): Add rs6000_float_gprs option.\n+\n+        * config/rs6000/eabi.h (TARGET_FPRS): Change to use rs6000_float_gprs.\n+\n+        * config/rs6000/eabispe.h: Set rs6000_float_gprs.\n+\n Mon Apr  7 14:36:24 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \tPR opt/10024"}, {"sha": "cda9a6a095a7447f17cd28e5656f484b522423ec", "filename": "gcc/config/rs6000/eabi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da702b196433484c7163a827e3202c44664734a/gcc%2Fconfig%2Frs6000%2Feabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da702b196433484c7163a827e3202c44664734a/gcc%2Fconfig%2Frs6000%2Feabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.h?ref=5da702b196433484c7163a827e3202c44664734a", "patch": "@@ -53,4 +53,4 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_SPE rs6000_spe\n #define TARGET_E500 (rs6000_cpu == PROCESSOR_PPC8540)\n #define TARGET_ISEL rs6000_isel\n-#define TARGET_FPRS rs6000_fprs\n+#define TARGET_FPRS (!rs6000_float_gprs)"}, {"sha": "f907c97a223389ea22f836293218e1094fb73f78", "filename": "gcc/config/rs6000/eabispe.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da702b196433484c7163a827e3202c44664734a/gcc%2Fconfig%2Frs6000%2Feabispe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da702b196433484c7163a827e3202c44664734a/gcc%2Fconfig%2Frs6000%2Feabispe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabispe.h?ref=5da702b196433484c7163a827e3202c44664734a", "patch": "@@ -32,7 +32,8 @@ Boston, MA 02111-1307, USA.  */\n     rs6000_cpu = PROCESSOR_PPC8540; \\\n   if (rs6000_abi_string == NULL || strstr (rs6000_abi_string, \"spe\") == NULL) \\\n     rs6000_spe_abi = 1; \\\n-  rs6000_fprs = 0; \\\n+  if (rs6000_float_gprs_string == NULL) \\\n+    rs6000_float_gprs = 1; \\\n   /* See note below.  */ \\\n   /*if (rs6000_long_double_size_string == NULL)*/ \\\n   /*  rs6000_long_double_type_size = 128;*/ \\"}, {"sha": "af179b1a93b89876e61908ef882107d8c3550d44", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 47, "deletions": 55, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da702b196433484c7163a827e3202c44664734a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da702b196433484c7163a827e3202c44664734a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5da702b196433484c7163a827e3202c44664734a", "patch": "@@ -98,8 +98,11 @@ int rs6000_isel;\n /* Whether SPE simd instructions should be generated.  */\n int rs6000_spe;\n \n-/* Nonzero if we have FPRs.  */\n-int rs6000_fprs = 1;\n+/* Nonzero if floating point operations are done in the GPRs.  */\n+int rs6000_float_gprs = 0;\n+\n+/* String from -mfloat-gprs=.  */\n+const char *rs6000_float_gprs_string;\n \n /* String from -misel=.  */\n const char *rs6000_isel_string;\n@@ -274,9 +277,7 @@ static rtx altivec_expand_abs_builtin PARAMS ((enum insn_code, tree, rtx));\n static rtx altivec_expand_predicate_builtin PARAMS ((enum insn_code, const char *, tree, rtx));\n static rtx altivec_expand_stv_builtin PARAMS ((enum insn_code, tree));\n static void rs6000_parse_abi_options PARAMS ((void));\n-static void rs6000_parse_vrsave_option PARAMS ((void));\n-static void rs6000_parse_isel_option PARAMS ((void));\n-static void rs6000_parse_spe_option (void);\n+static void rs6000_parse_yes_no_option (const char *, const char *, int *);\n static int first_altivec_reg_to_save PARAMS ((void));\n static unsigned int compute_vrsave_mask PARAMS ((void));\n static void is_altivec_return_reg PARAMS ((rtx, void *));\n@@ -702,14 +703,14 @@ rs6000_override_options (default_cpu)\n   /* Handle -mabi= options.  */\n   rs6000_parse_abi_options ();\n \n-  /* Handle -mvrsave= option.  */\n-  rs6000_parse_vrsave_option ();\n-\n-  /* Handle -misel= option.  */\n-  rs6000_parse_isel_option ();\n-\n-  /* Handle -mspe= option.  */\n-  rs6000_parse_spe_option ();\n+  /* Handle generic -mFOO=YES/NO options.  */\n+  rs6000_parse_yes_no_option (\"vrsave\", rs6000_altivec_vrsave_string,\n+\t\t\t      &rs6000_altivec_vrsave);\n+  rs6000_parse_yes_no_option (\"isel\", rs6000_isel_string,\n+\t\t\t      &rs6000_isel);\n+  rs6000_parse_yes_no_option (\"spe\", rs6000_spe_string, &rs6000_spe);\n+  rs6000_parse_yes_no_option (\"float-gprs\", rs6000_float_gprs_string,\n+\t\t\t      &rs6000_float_gprs);\n \n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n   SUBTARGET_OVERRIDE_OPTIONS;\n@@ -718,10 +719,27 @@ rs6000_override_options (default_cpu)\n   SUBSUBTARGET_OVERRIDE_OPTIONS;\n #endif\n \n-  /* The e500 does not have string instructions, and we set\n-     MASK_STRING above when optimizing for size.  */\n-  if (rs6000_cpu == PROCESSOR_PPC8540 && (target_flags & MASK_STRING) != 0)\n-    target_flags = target_flags & ~MASK_STRING;\n+  if (TARGET_E500)\n+    {\n+      /* The e500 does not have string instructions, and we set\n+\t MASK_STRING above when optimizing for size.  */\n+      if ((target_flags & MASK_STRING) != 0)\n+\ttarget_flags = target_flags & ~MASK_STRING;\n+    }\n+  else if (rs6000_select[1].string != NULL)\n+    {\n+      /* For the powerpc-eabispe configuration, we set all these by\n+\t default, so let's unset them if we manually set another\n+\t CPU that is not the E500.  */\n+      if (rs6000_abi_string == 0)\n+\trs6000_spe_abi = 0;\n+      if (rs6000_spe_string == 0)\n+\trs6000_spe = 0;\n+      if (rs6000_float_gprs_string == 0)\n+\trs6000_float_gprs = 0;\n+      if (rs6000_isel_string == 0)\n+\trs6000_isel = 0;\n+    }\n \n   /* Handle -m(no-)longcall option.  This is a bit of a cheap hack,\n      using TARGET_OPTIONS to handle a toggle switch, but we're out of\n@@ -783,48 +801,22 @@ rs6000_override_options (default_cpu)\n   init_machine_status = rs6000_init_machine_status;\n }\n \n-/* Handle -misel= option.  */\n+/* Handle generic options of the form -mfoo=yes/no.\n+   NAME is the option name.\n+   VALUE is the option value.\n+   FLAG is the pointer to the flag where to store a 1 or 0, depending on\n+   whether the option value is 'yes' or 'no' respectively.  */\n static void\n-rs6000_parse_isel_option ()\n+rs6000_parse_yes_no_option (const char *name, const char *value, int *flag)\n {\n-  if (rs6000_isel_string == 0)\n+  if (value == 0)\n     return;\n-  else if (! strcmp (rs6000_isel_string, \"yes\"))\n-    rs6000_isel = 1;\n-  else if (! strcmp (rs6000_isel_string, \"no\"))\n-    rs6000_isel = 0;\n-  else\n-    error (\"unknown -misel= option specified: '%s'\",\n-         rs6000_isel_string);\n-}\n-\n-/* Handle -mspe= option.  */\n-static void\n-rs6000_parse_spe_option (void)\n-{\n-  if (rs6000_spe_string == 0)\n-    return;\n-  else if (!strcmp (rs6000_spe_string, \"yes\"))\n-    rs6000_spe = 1;\n-  else if (!strcmp (rs6000_spe_string, \"no\"))\n-    rs6000_spe = 0;\n-  else\n-    error (\"unknown -mspe= option specified: '%s'\", rs6000_spe_string);\n-}\n-\n-/* Handle -mvrsave= options.  */\n-static void\n-rs6000_parse_vrsave_option ()\n-{\n-  /* Generate VRSAVE instructions by default.  */\n-  if (rs6000_altivec_vrsave_string == 0\n-      || ! strcmp (rs6000_altivec_vrsave_string, \"yes\"))\n-    rs6000_altivec_vrsave = 1;\n-  else if (! strcmp (rs6000_altivec_vrsave_string, \"no\"))\n-    rs6000_altivec_vrsave = 0;\n+  else if (!strcmp (value, \"yes\"))\n+    *flag = 1;\n+  else if (!strcmp (value, \"no\"))\n+    *flag = 0;\n   else\n-    error (\"unknown -mvrsave= option specified: '%s'\",\n-\t   rs6000_altivec_vrsave_string);\n+    error (\"unknown -m%s= option specified: '%s'\", name, value);\n }\n \n /* Handle -mabi= options.  */"}, {"sha": "b3262926290d408460d56d210b08173a261f0410", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da702b196433484c7163a827e3202c44664734a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da702b196433484c7163a827e3202c44664734a/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=5da702b196433484c7163a827e3202c44664734a", "patch": "@@ -390,6 +390,8 @@ extern enum processor_type rs6000_cpu;\n     N_(\"Specify yes/no if isel instructions should be generated\") },    \\\n    {\"spe=\", &rs6000_spe_string,                                         \\\n     N_(\"Specify yes/no if SPE SIMD instructions should be generated\") },\\\n+   {\"float-gprs=\", &rs6000_float_gprs_string,                           \\\n+    N_(\"Specify yes/no if using floating point in the GPRs\") },         \\\n    {\"vrsave=\", &rs6000_altivec_vrsave_string,                         \\\n     N_(\"Specify yes/no if VRSAVE instructions should be generated for AltiVec\") }, \\\n    {\"longcall\", &rs6000_longcall_switch,\t\t\t\t\\\n@@ -428,7 +430,8 @@ extern int rs6000_altivec_abi;\n extern int rs6000_spe_abi;\n extern int rs6000_isel;\n extern int rs6000_spe;\n-extern int rs6000_fprs;\n+extern int rs6000_float_gprs;\n+extern const char *rs6000_float_gprs_string;\n extern const char *rs6000_isel_string;\n extern const char *rs6000_spe_string;\n extern const char *rs6000_altivec_vrsave_string;"}, {"sha": "2655cd5568911eed7b99293530782259e8e9a105", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da702b196433484c7163a827e3202c44664734a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da702b196433484c7163a827e3202c44664734a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5da702b196433484c7163a827e3202c44664734a", "patch": "@@ -427,6 +427,7 @@ in the following sections.\n -mabi=spe -mabi=no-spe @gol\n -misel=yes -misel=no @gol\n -mspe=yes -mspe=no @gol\n+-mfloat-gprs=yes -mfloat-gprs=no @gol\n -mprototype  -mno-prototype @gol\n -msim  -mmvme  -mads  -myellowknife  -memb -msdata @gol\n -msdata=@var{opt}  -mvxworks -mwindiss -G @var{num} -pthread}\n@@ -6995,6 +6996,13 @@ This switch enables or disables the generation of ISEL instructions.\n This switch enables or disables the generation of SPE simd\n instructions.\n \n+@item -mfloat-gprs=@var{yes/no}\n+@itemx -mfloat-gprs\n+@opindex mfloat-gprs\n+This switch enables or disables the generation of floating point\n+operations on the general purpose registers for architectures that\n+support it.  This option is currently only available on the MPC8540.\n+\n @item -mfull-toc\n @itemx -mno-fp-in-toc\n @itemx -mno-sum-in-toc"}]}