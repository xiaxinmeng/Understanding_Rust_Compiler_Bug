{"sha": "b925d25d7eeccf5a259f5c744b2de8d8285e0bc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyNWQyNWQ3ZWVjY2Y1YTI1OWY1Yzc0NGIyZGU4ZDgyODVlMGJjMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-11-17T03:58:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-11-17T03:58:18Z"}, "message": "constexpr.c (cxx_eval_builtin_function_call): Use cp_fully_fold to fold arguments to __builtin_constant_p.\n\n\t* constexpr.c (cxx_eval_builtin_function_call): Use cp_fully_fold\n\tto fold arguments to __builtin_constant_p.\n\nFrom-SVN: r230453", "tree": {"sha": "0ee769b873e0e06ca40129282ee59e8a1bdec0ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ee769b873e0e06ca40129282ee59e8a1bdec0ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10db83d85ab3544c41bc49c0d3f81f68f48fdf23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10db83d85ab3544c41bc49c0d3f81f68f48fdf23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10db83d85ab3544c41bc49c0d3f81f68f48fdf23"}], "stats": {"total": 59, "additions": 43, "deletions": 16}, "files": [{"sha": "05b92528995dca597c9ab96e085f24b5dc3ca3c2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b925d25d7eeccf5a259f5c744b2de8d8285e0bc3", "patch": "@@ -1,3 +1,8 @@\n+2015-11-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (cxx_eval_builtin_function_call): Use cp_fully_fold\n+\tto fold arguments to __builtin_constant_p.\n+\n 2015-11-16  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* parser.c (cp_parser_late_parsing_cilk_simd_fn_info): Look for"}, {"sha": "459173dec07113ae74788ec33bf92e9741a10ec8", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=b925d25d7eeccf5a259f5c744b2de8d8285e0bc3", "patch": "@@ -1014,7 +1014,9 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n   int i;\n \n   /* Don't fold __builtin_constant_p within a constexpr function.  */\n-  if (DECL_FUNCTION_CODE (fun) == BUILT_IN_CONSTANT_P\n+  bool bi_const_p = (DECL_FUNCTION_CODE (fun) == BUILT_IN_CONSTANT_P);\n+\n+  if (bi_const_p\n       && current_function_decl\n       && DECL_DECLARED_CONSTEXPR_P (current_function_decl))\n     {\n@@ -1028,8 +1030,14 @@ cxx_eval_builtin_function_call (const constexpr_ctx *ctx, tree t, tree fun,\n   new_ctx.quiet = true;\n   bool dummy1 = false, dummy2 = false;\n   for (i = 0; i < nargs; ++i)\n-    args[i] = cxx_eval_constant_expression (&new_ctx, CALL_EXPR_ARG (t, i),\n-\t\t\t\t\t    lval, &dummy1, &dummy2);\n+    {\n+      args[i] = cxx_eval_constant_expression (&new_ctx, CALL_EXPR_ARG (t, i),\n+\t\t\t\t\t      lval, &dummy1, &dummy2);\n+      if (bi_const_p)\n+\t/* For __built_in_constant_p, fold all expressions with constant values\n+\t   even if they aren't C++ constant-expressions.  */\n+\targs[i] = cp_fully_fold (args[i]);\n+    }\n \n   bool save_ffbcp = force_folding_builtin_constant_p;\n   force_folding_builtin_constant_p = true;"}, {"sha": "8fe9e133407dbd301f2daa51e4d45d2aad18c9e4", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=b925d25d7eeccf5a259f5c744b2de8d8285e0bc3", "patch": "@@ -2107,20 +2107,14 @@ cp_fold (tree x)\n \tint i, m, sv = optimize, nw = sv, changed = 0;\n \ttree callee = get_callee_fndecl (x);\n \n+\t/* Some built-in function calls will be evaluated at compile-time in\n+\t   fold ().  Set optimize to 1 when folding __builtin_constant_p inside\n+\t   a constexpr function so that fold_builtin_1 doesn't fold it to 0.  */\n \tif (callee && DECL_BUILT_IN (callee) && !optimize\n \t    && DECL_IS_BUILTIN_CONSTANT_P (callee)\n \t    && current_function_decl\n \t    && DECL_DECLARED_CONSTEXPR_P (current_function_decl))\n \t  nw = 1;\n-\toptimize = nw;\n-\tr = fold (x);\n-\toptimize = sv;\n-\n-\tif (TREE_CODE (r) != CALL_EXPR)\n-\t  {\n-\t    x = cp_fold (r);\n-\t    break;\n-\t  }\n \n \tx = copy_node (x);\n \n@@ -2145,11 +2139,11 @@ cp_fold (tree x)\n \n \toptimize = nw;\n \n-\t/* Invoke maybe_constant_value for functions being declared\n-\t   constexpr, and are no AGGR_INIT_EXPRs ...\n+\t/* Invoke maybe_constant_value for functions declared\n+\t   constexpr and not called with AGGR_INIT_EXPRs.\n \t   TODO:\n-\t   Due issues in maybe_constant_value for CALL_EXPR with\n-\t   arguments passed by reference, it is disabled.  */\n+\t   Do constexpr expansion of expressions where the call itself is not\n+\t   constant, but the call followed by an INDIRECT_REF is.  */\n \tif (callee && DECL_DECLARED_CONSTEXPR_P (callee))\n           r = maybe_constant_value (x);\n \toptimize = sv;"}, {"sha": "56bcfc5e831188cd85a9ea30323fa0f2748aeb87", "filename": "gcc/testsuite/g++.dg/delayedfold/builtin-constant1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdelayedfold%2Fbuiltin-constant1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdelayedfold%2Fbuiltin-constant1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdelayedfold%2Fbuiltin-constant1.C?ref=b925d25d7eeccf5a259f5c744b2de8d8285e0bc3", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target c++11 } }\n+\n+#define SA(X) static_assert ((X),#X)\n+\n+int i;\n+\n+SA(__builtin_constant_p (i == 42 && false));"}, {"sha": "05fd28666140c05a18eda61661d1c3b4feedc49b", "filename": "gcc/testsuite/g++.dg/delayedfold/builtin-constant2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdelayedfold%2Fbuiltin-constant2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b925d25d7eeccf5a259f5c744b2de8d8285e0bc3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdelayedfold%2Fbuiltin-constant2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdelayedfold%2Fbuiltin-constant2.C?ref=b925d25d7eeccf5a259f5c744b2de8d8285e0bc3", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do run }\n+\n+int i;\n+\n+#define CV(X) (__builtin_constant_p (X) ? (X) : -1)\n+\n+int ar[] = { CV (i == 42 && false) };\n+\n+int main()\n+{\n+  if (ar[0] != 0)\n+    __builtin_abort();\n+}"}]}