{"sha": "f10d2d85c90c9c649675c248cd5a99f66288f81f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEwZDJkODVjOTBjOWM2NDk2NzVjMjQ4Y2Q1YTk5ZjY2Mjg4ZjgxZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-25T07:51:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-25T07:51:38Z"}, "message": "cfgloop.h (get_loop_exit_edges): Add extra parameter denoting loop body, defaulted to NULL.\n\n2019-11-25  Richard Biener  <rguenther@suse.de>\n\n\t* cfgloop.h (get_loop_exit_edges): Add extra parameter denoting\n\tloop body, defaulted to NULL.\n\t(single_likely_exit): Add exit vector argument\n\t* tree-ssa-loop-niter.h (loop_only_exit_p): Add loop body argument.\n\t(number_of_iterations_exit): Likewise.\n\t(number_of_iterations_exit_assumptions): Likewise.\n\t* cfgloop.c (get_loop_exit_edges): Use passed in loop body\n\tif not NULL.\n\t* cfgloopanal.c (single_likely_exit): Use passed in exit vector.\n\t* tree-ssa-loop-ivcanon.c (canonicalize_loop_induction_variables):\n\tCompute exit vector around call to single_likely_exit.\n\t* tree-ssa-loop-ivopts.c (tree_ssa_iv_optimize_loop): Pass down\n\tloop body to loop_only_exit_p.\n\t* tree-ssa-loop-niter.c (loop_only_exit_p): Get loop body from\n\tcaller.\n\t(number_of_iterations_exit_assumptions): Get loop body from caller\n\tif not NULL.\n\t(number_of_iterations_exit): Pass through new loop body arg.\n\t(infer_loop_bounds_from_undefined): Get loop body from caller.\n\t(estimate_numbers_of_iterations): Compute loop body once.\n\nFrom-SVN: r278667", "tree": {"sha": "284bcf852c57a2fa1c05c83c5138e1553cc14a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/284bcf852c57a2fa1c05c83c5138e1553cc14a03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f10d2d85c90c9c649675c248cd5a99f66288f81f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10d2d85c90c9c649675c248cd5a99f66288f81f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10d2d85c90c9c649675c248cd5a99f66288f81f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10d2d85c90c9c649675c248cd5a99f66288f81f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a34952edb758109a3b919bc149136ee9277ee3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a34952edb758109a3b919bc149136ee9277ee3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a34952edb758109a3b919bc149136ee9277ee3a"}], "stats": {"total": 108, "additions": 70, "deletions": 38}, "files": [{"sha": "f4d0ee5db7b58e49ac6f234eda53e176a661cad7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f10d2d85c90c9c649675c248cd5a99f66288f81f", "patch": "@@ -1,3 +1,26 @@\n+2019-11-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfgloop.h (get_loop_exit_edges): Add extra parameter denoting\n+\tloop body, defaulted to NULL.\n+\t(single_likely_exit): Add exit vector argument\n+\t* tree-ssa-loop-niter.h (loop_only_exit_p): Add loop body argument.\n+\t(number_of_iterations_exit): Likewise.\n+\t(number_of_iterations_exit_assumptions): Likewise.\n+\t* cfgloop.c (get_loop_exit_edges): Use passed in loop body\n+\tif not NULL.\n+\t* cfgloopanal.c (single_likely_exit): Use passed in exit vector.\n+\t* tree-ssa-loop-ivcanon.c (canonicalize_loop_induction_variables):\n+\tCompute exit vector around call to single_likely_exit.\n+\t* tree-ssa-loop-ivopts.c (tree_ssa_iv_optimize_loop): Pass down\n+\tloop body to loop_only_exit_p.\n+\t* tree-ssa-loop-niter.c (loop_only_exit_p): Get loop body from\n+\tcaller.\n+\t(number_of_iterations_exit_assumptions): Get loop body from caller\n+\tif not NULL.\n+\t(number_of_iterations_exit): Pass through new loop body arg.\n+\t(infer_loop_bounds_from_undefined): Get loop body from caller.\n+\t(estimate_numbers_of_iterations): Compute loop body once.\n+\n 2019-11-25  Richard Biener  <rguenther@suse.de>\n \n \t* cfganal.c (pre_and_rev_post_order_compute_fn): Use an"}, {"sha": "c766471aa09720f3d259bee900903cc1be558412", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=f10d2d85c90c9c649675c248cd5a99f66288f81f", "patch": "@@ -1203,12 +1203,11 @@ release_recorded_exits (function *fn)\n /* Returns the list of the exit edges of a LOOP.  */\n \n vec<edge> \n-get_loop_exit_edges (const class loop *loop)\n+get_loop_exit_edges (const class loop *loop, basic_block *body)\n {\n   vec<edge> edges = vNULL;\n   edge e;\n   unsigned i;\n-  basic_block *body;\n   edge_iterator ei;\n   struct loop_exit *exit;\n \n@@ -1223,14 +1222,20 @@ get_loop_exit_edges (const class loop *loop)\n     }\n   else\n     {\n-      body = get_loop_body (loop);\n+      bool body_from_caller = true;\n+      if (!body)\n+\t{\n+\t  body = get_loop_body (loop);\n+\t  body_from_caller = false;\n+\t}\n       for (i = 0; i < loop->num_nodes; i++)\n \tFOR_EACH_EDGE (e, ei, body[i]->succs)\n \t  {\n \t    if (!flow_bb_inside_loop_p (loop, e->dest))\n \t      edges.safe_push (e);\n \t  }\n-      free (body);\n+      if (!body_from_caller)\n+\tfree (body);\n     }\n \n   return edges;"}, {"sha": "2979febe2e07b11e1257ba262164777528c9dd22", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=f10d2d85c90c9c649675c248cd5a99f66288f81f", "patch": "@@ -379,9 +379,9 @@ extern basic_block *get_loop_body_in_custom_order (const class loop *,\n extern basic_block *get_loop_body_in_custom_order (const class loop *, void *,\n \t\t\t       int (*) (const void *, const void *, void *));\n \n-extern vec<edge> get_loop_exit_edges (const class loop *);\n+extern vec<edge> get_loop_exit_edges (const class loop *, basic_block * = NULL);\n extern edge single_exit (const class loop *);\n-extern edge single_likely_exit (class loop *loop);\n+extern edge single_likely_exit (class loop *loop, vec<edge>);\n extern unsigned num_loop_branches (const class loop *);\n \n extern edge loop_preheader_edge (const class loop *);"}, {"sha": "d78bfc66f4b30138d71e7cc4522957fbd498a2cc", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=f10d2d85c90c9c649675c248cd5a99f66288f81f", "patch": "@@ -467,16 +467,14 @@ mark_loop_exit_edges (void)\n    to noreturn call.  */\n \n edge\n-single_likely_exit (class loop *loop)\n+single_likely_exit (class loop *loop, vec<edge> exits)\n {\n   edge found = single_exit (loop);\n-  vec<edge> exits;\n   unsigned i;\n   edge ex;\n \n   if (found)\n     return found;\n-  exits = get_loop_exit_edges (loop);\n   FOR_EACH_VEC_ELT (exits, i, ex)\n     {\n       if (probably_never_executed_edge_p (cfun, ex)\n@@ -489,12 +487,8 @@ single_likely_exit (class loop *loop)\n       if (!found)\n \tfound = ex;\n       else\n-\t{\n-\t  exits.release ();\n-\t  return NULL;\n-\t}\n+\treturn NULL;\n     }\n-  exits.release ();\n   return found;\n }\n "}, {"sha": "979b250e83e017139ced476453085ab58646bf64", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=f10d2d85c90c9c649675c248cd5a99f66288f81f", "patch": "@@ -1222,8 +1222,10 @@ canonicalize_loop_induction_variables (class loop *loop,\n      by find_loop_niter_by_eval.  Be sure to keep it for future.  */\n   if (niter && TREE_CODE (niter) == INTEGER_CST)\n     {\n+      vec<edge> exits = get_loop_exit_edges  (loop);\n       record_niter_bound (loop, wi::to_widest (niter),\n-\t\t\t  exit == single_likely_exit (loop), true);\n+\t\t\t  exit == single_likely_exit (loop, exits), true);\n+      exits.release ();\n     }\n \n   /* Force re-computation of loop bounds so we can remove redundant exits.  */"}, {"sha": "3b2a493dcb94b53d80f3a992f69e304b2029f723", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=f10d2d85c90c9c649675c248cd5a99f66288f81f", "patch": "@@ -7977,7 +7977,8 @@ tree_ssa_iv_optimize_loop (struct ivopts_data *data, class loop *loop,\n   data->body_includes_call = loop_body_includes_call (body, loop->num_nodes);\n   renumber_gimple_stmt_uids_in_blocks (body, loop->num_nodes);\n \n-  data->loop_single_exit_p = exit != NULL && loop_only_exit_p (loop, exit);\n+  data->loop_single_exit_p\n+    = exit != NULL && loop_only_exit_p (loop, body, exit);\n \n   /* For each ssa name determines whether it behaves as an induction variable\n      in some loop.  */"}, {"sha": "f0dd9a0b36345e245b915db3dab33a2228421fee", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=f10d2d85c90c9c649675c248cd5a99f66288f81f", "patch": "@@ -2367,27 +2367,23 @@ simplify_using_outer_evolutions (class loop *loop, tree expr)\n /* Returns true if EXIT is the only possible exit from LOOP.  */\n \n bool\n-loop_only_exit_p (const class loop *loop, const_edge exit)\n+loop_only_exit_p (const class loop *loop, basic_block *body, const_edge exit)\n {\n-  basic_block *body;\n   gimple_stmt_iterator bsi;\n   unsigned i;\n \n   if (exit != single_exit (loop))\n     return false;\n \n-  body = get_loop_body (loop);\n   for (i = 0; i < loop->num_nodes; i++)\n     {\n       for (bsi = gsi_start_bb (body[i]); !gsi_end_p (bsi); gsi_next (&bsi))\n \tif (stmt_can_terminate_bb_p (gsi_stmt (bsi)))\n \t  {\n-\t    free (body);\n \t    return true;\n \t  }\n     }\n \n-  free (body);\n   return true;\n }\n \n@@ -2403,7 +2399,8 @@ loop_only_exit_p (const class loop *loop, const_edge exit)\n bool\n number_of_iterations_exit_assumptions (class loop *loop, edge exit,\n \t\t\t\t       class tree_niter_desc *niter,\n-\t\t\t\t       gcond **at_stmt, bool every_iteration)\n+\t\t\t\t       gcond **at_stmt, bool every_iteration,\n+\t\t\t\t       basic_block *body)\n {\n   gimple *last;\n   gcond *stmt;\n@@ -2477,8 +2474,17 @@ number_of_iterations_exit_assumptions (class loop *loop, edge exit,\n \n   iv0.base = expand_simple_operations (iv0.base);\n   iv1.base = expand_simple_operations (iv1.base);\n+  bool body_from_caller = true;\n+  if (!body)\n+    {\n+      body = get_loop_body (loop);\n+      body_from_caller = false;\n+    }\n+  bool only_exit_p = loop_only_exit_p (loop, body, exit);\n+  if (!body_from_caller)\n+    free (body);\n   if (!number_of_iterations_cond (loop, type, &iv0, code, &iv1, niter,\n-\t\t\t\t  loop_only_exit_p (loop, exit), safe))\n+\t\t\t\t  only_exit_p, safe))\n     {\n       fold_undefer_and_ignore_overflow_warnings ();\n       return false;\n@@ -2721,11 +2727,12 @@ number_of_iterations_popcount (loop_p loop, edge exit,\n bool\n number_of_iterations_exit (class loop *loop, edge exit,\n \t\t\t   class tree_niter_desc *niter,\n-\t\t\t   bool warn, bool every_iteration)\n+\t\t\t   bool warn, bool every_iteration,\n+\t\t\t   basic_block *body)\n {\n   gcond *stmt;\n   if (!number_of_iterations_exit_assumptions (loop, exit, niter,\n-\t\t\t\t\t      &stmt, every_iteration))\n+\t\t\t\t\t      &stmt, every_iteration, body))\n     return false;\n \n   if (integer_nonzerop (niter->assumptions))\n@@ -3837,16 +3844,13 @@ infer_loop_bounds_from_signedness (class loop *loop, gimple *stmt)\n */\n \n static void\n-infer_loop_bounds_from_undefined (class loop *loop)\n+infer_loop_bounds_from_undefined (class loop *loop, basic_block *bbs)\n {\n   unsigned i;\n-  basic_block *bbs;\n   gimple_stmt_iterator bsi;\n   basic_block bb;\n   bool reliable;\n \n-  bbs = get_loop_body (loop);\n-\n   for (i = 0; i < loop->num_nodes; i++)\n     {\n       bb = bbs[i];\n@@ -3871,8 +3875,6 @@ infer_loop_bounds_from_undefined (class loop *loop)\n   \t}\n \n     }\n-\n-  free (bbs);\n }\n \n /* Compare wide ints, callback for qsort.  */\n@@ -4275,8 +4277,9 @@ estimate_numbers_of_iterations (class loop *loop)\n      diagnose those loops with -Waggressive-loop-optimizations.  */\n   number_of_latch_executions (loop);\n \n-  exits = get_loop_exit_edges (loop);\n-  likely_exit = single_likely_exit (loop);\n+  basic_block *body = get_loop_body (loop);\n+  exits = get_loop_exit_edges (loop, body);\n+  likely_exit = single_likely_exit (loop, exits);\n   FOR_EACH_VEC_ELT (exits, i, ex)\n     {\n       if (ex == likely_exit)\n@@ -4296,7 +4299,8 @@ estimate_numbers_of_iterations (class loop *loop)\n \t    }\n \t}\n \n-      if (!number_of_iterations_exit (loop, ex, &niter_desc, false, false))\n+      if (!number_of_iterations_exit (loop, ex, &niter_desc,\n+\t\t\t\t      false, false, body))\n \tcontinue;\n \n       niter = niter_desc.niter;\n@@ -4313,7 +4317,7 @@ estimate_numbers_of_iterations (class loop *loop)\n   exits.release ();\n \n   if (flag_aggressive_loop_optimizations)\n-    infer_loop_bounds_from_undefined (loop);\n+    infer_loop_bounds_from_undefined (loop, body);\n \n   discover_iteration_bound_by_body_walk (loop);\n "}, {"sha": "742d3b8e140ef593f3ef8b9c9a7eaecc2bee2b91", "filename": "gcc/tree-ssa-loop-niter.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Ftree-ssa-loop-niter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10d2d85c90c9c649675c248cd5a99f66288f81f/gcc%2Ftree-ssa-loop-niter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.h?ref=f10d2d85c90c9c649675c248cd5a99f66288f81f", "patch": "@@ -22,13 +22,16 @@ along with GCC; see the file COPYING3.  If not see\n \n extern tree expand_simple_operations (tree, tree = NULL);\n extern tree simplify_using_initial_conditions (class loop *, tree);\n-extern bool loop_only_exit_p (const class loop *, const_edge);\n+extern bool loop_only_exit_p (const class loop *, basic_block *body,\n+\t\t\t      const_edge);\n extern bool number_of_iterations_exit (class loop *, edge,\n \t\t\t\t       class tree_niter_desc *niter, bool,\n-\t\t\t\t       bool every_iteration = true);\n+\t\t\t\t       bool every_iteration = true,\n+\t\t\t\t       basic_block * = NULL);\n extern bool number_of_iterations_exit_assumptions (class loop *, edge,\n \t\t\t\t\t\t   class tree_niter_desc *,\n-\t\t\t\t\t\t   gcond **, bool = true);\n+\t\t\t\t\t\t   gcond **, bool = true,\n+\t\t\t\t\t\t   basic_block * = NULL);\n extern tree find_loop_niter (class loop *, edge *);\n extern bool finite_loop_p (class loop *);\n extern tree loop_niter_by_eval (class loop *, edge);"}]}