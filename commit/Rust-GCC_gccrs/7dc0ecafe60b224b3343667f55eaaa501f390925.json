{"sha": "7dc0ecafe60b224b3343667f55eaaa501f390925", "node_id": "C_kwDOANBUbNoAKDdkYzBlY2FmZTYwYjIyNGIzMzQzNjY3ZjU1ZWFhYTUwMWYzOTA5MjU", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-09T02:19:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-09T02:19:23Z"}, "message": "analyzer: fix ICE on region creation during get_referenced_base_regions [PR108003]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/108003\n\t* call-summary.cc\n\t(call_summary_replay::convert_region_from_summary_1): Convert\n\theap_regs_in_use from auto_sbitmap to auto_bitmap.\n\t* region-model-manager.cc\n\t(region_model_manager::get_or_create_region_for_heap_alloc):\n\tConvert from sbitmap to bitmap.\n\t* region-model-manager.h: Likewise.\n\t* region-model.cc\n\t(region_model::get_or_create_region_for_heap_alloc): Convert from\n\tauto_sbitmap to auto_bitmap.\n\t(region_model::get_referenced_base_regions): Likewise.\n\t* region-model.h: Include \"bitmap.h\" rather than \"sbitmap.h\".\n\t(region_model::get_referenced_base_regions): Convert from\n\tauto_sbitmap to auto_bitmap.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/108003\n\t* g++.dg/analyzer/pr108003.C: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "45ef50950142acf2606cdd1428c2c3e1972acd07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45ef50950142acf2606cdd1428c2c3e1972acd07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dc0ecafe60b224b3343667f55eaaa501f390925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc0ecafe60b224b3343667f55eaaa501f390925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc0ecafe60b224b3343667f55eaaa501f390925", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc0ecafe60b224b3343667f55eaaa501f390925/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf80a23e19db83b7cb2220371d21642aa08261e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf80a23e19db83b7cb2220371d21642aa08261e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf80a23e19db83b7cb2220371d21642aa08261e0"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "a18a1b1b40a7a5e769fff9881ee81918e5e18525", "filename": "gcc/analyzer/call-summary.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc0ecafe60b224b3343667f55eaaa501f390925/gcc%2Fanalyzer%2Fcall-summary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc0ecafe60b224b3343667f55eaaa501f390925/gcc%2Fanalyzer%2Fcall-summary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fcall-summary.cc?ref=7dc0ecafe60b224b3343667f55eaaa501f390925", "patch": "@@ -726,7 +726,7 @@ call_summary_replay::convert_region_from_summary_1 (const region *summary_reg)\n \t/* If we have a heap-allocated region in the summary, then\n \t   it was allocated within the callee.\n \t   Create a new heap-allocated region to summarize this.  */\n-\tauto_sbitmap heap_regs_in_use (mgr->get_num_regions ());\n+\tauto_bitmap heap_regs_in_use;\n \tget_caller_model ()->get_referenced_base_regions (heap_regs_in_use);\n \treturn mgr->get_or_create_region_for_heap_alloc (heap_regs_in_use);\n       }"}, {"sha": "dad7c4114460de0f601199afbb84d8e1624a35a1", "filename": "gcc/analyzer/region-model-manager.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc0ecafe60b224b3343667f55eaaa501f390925/gcc%2Fanalyzer%2Fregion-model-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc0ecafe60b224b3343667f55eaaa501f390925/gcc%2Fanalyzer%2Fregion-model-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.cc?ref=7dc0ecafe60b224b3343667f55eaaa501f390925", "patch": "@@ -1698,7 +1698,7 @@ get_region_for_unexpected_tree_code (region_model_context *ctxt,\n \n const region *\n region_model_manager::\n-get_or_create_region_for_heap_alloc (const sbitmap &base_regs_in_use)\n+get_or_create_region_for_heap_alloc (const bitmap &base_regs_in_use)\n {\n   /* Try to reuse an existing region, if it's unreferenced in the\n      client state.  */"}, {"sha": "ca9a498f12f2b587f518045dbc3c8cede64797f4", "filename": "gcc/analyzer/region-model-manager.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc0ecafe60b224b3343667f55eaaa501f390925/gcc%2Fanalyzer%2Fregion-model-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc0ecafe60b224b3343667f55eaaa501f390925/gcc%2Fanalyzer%2Fregion-model-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-manager.h?ref=7dc0ecafe60b224b3343667f55eaaa501f390925", "patch": "@@ -155,7 +155,7 @@ class region_model_manager\n      The number of these within the analysis can grow arbitrarily.\n      They are still owned by the manager.  */\n   const region *\n-  get_or_create_region_for_heap_alloc (const sbitmap &base_regs_in_use);\n+  get_or_create_region_for_heap_alloc (const bitmap &base_regs_in_use);\n   const region *create_region_for_alloca (const frame_region *frame);\n \n   void log_stats (logger *logger, bool show_objs) const;"}, {"sha": "f6cd34f4c22c34d34d1af97ada6d8b82d85fd082", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc0ecafe60b224b3343667f55eaaa501f390925/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc0ecafe60b224b3343667f55eaaa501f390925/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=7dc0ecafe60b224b3343667f55eaaa501f390925", "patch": "@@ -4904,7 +4904,7 @@ region_model::get_or_create_region_for_heap_alloc (const svalue *size_in_bytes,\n   /* Determine which regions are referenced in this region_model, so that\n      we can reuse an existing heap_allocated_region if it's not in use on\n      this path.  */\n-  auto_sbitmap base_regs_in_use (m_mgr->get_num_regions ());\n+  auto_bitmap base_regs_in_use;\n   get_referenced_base_regions (base_regs_in_use);\n   const region *reg\n     = m_mgr->get_or_create_region_for_heap_alloc (base_regs_in_use);\n@@ -4917,7 +4917,7 @@ region_model::get_or_create_region_for_heap_alloc (const svalue *size_in_bytes,\n    reachable in this region_model.  */\n \n void\n-region_model::get_referenced_base_regions (auto_sbitmap &out_ids) const\n+region_model::get_referenced_base_regions (auto_bitmap &out_ids) const\n {\n   reachable_regions reachable_regs (const_cast<region_model *> (this));\n   m_store.for_each_cluster (reachable_regions::init_cluster_cb,"}, {"sha": "626b10d253862df0aba646a55d43fd0f46a597d6", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc0ecafe60b224b3343667f55eaaa501f390925/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc0ecafe60b224b3343667f55eaaa501f390925/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=7dc0ecafe60b224b3343667f55eaaa501f390925", "patch": "@@ -26,7 +26,7 @@ along with GCC; see the file COPYING3.  If not see\n       (Zhongxing Xu, Ted Kremenek, and Jian Zhang)\n      http://lcs.ios.ac.cn/~xuzb/canalyze/memmodel.pdf  */\n \n-#include \"sbitmap.h\"\n+#include \"bitmap.h\"\n #include \"selftest.h\"\n #include \"analyzer/svalue.h\"\n #include \"analyzer/region.h\"\n@@ -390,7 +390,7 @@ class region_model\n \t\t\t\t       region_model_context *ctxt);\n   const region *create_region_for_alloca (const svalue *size_in_bytes,\n \t\t\t\t\t  region_model_context *ctxt);\n-  void get_referenced_base_regions (auto_sbitmap &out_ids) const;\n+  void get_referenced_base_regions (auto_bitmap &out_ids) const;\n \n   tree get_representative_tree (const svalue *sval) const;\n   tree get_representative_tree (const region *reg) const;"}, {"sha": "c93e9596992e41428edc862982203205607346fd", "filename": "gcc/testsuite/g++.dg/analyzer/pr108003.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc0ecafe60b224b3343667f55eaaa501f390925/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr108003.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc0ecafe60b224b3343667f55eaaa501f390925/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr108003.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fanalyzer%2Fpr108003.C?ref=7dc0ecafe60b224b3343667f55eaaa501f390925", "patch": "@@ -0,0 +1,37 @@\n+/* Regression test for ICE.  */\n+/* { dg-additional-options \"-Wno-analyzer-possible-null-argument\" } */\n+/* { dg-additional-options \"-Wno-analyzer-malloc-leak\" } */\n+/* { dg-additional-options \"-Wno-analyzer-possible-null-dereference\" } */\n+\n+/* { dg-additional-options \"-O1 --param analyzer-max-svalue-depth=5\" } */\n+\n+struct locale {\n+  class _Impl;\n+  _Impl *_M_impl;\n+\n+  template <typename _Facet>\n+  locale (const locale &, _Facet *);\n+\n+  static locale\n+  classic ();\n+};\n+\n+struct locale::_Impl {\n+  _Impl (_Impl, int);\n+};\n+\n+template <typename _Facet>\n+locale::locale (const locale &, _Facet *)\n+{\n+  new _Impl (*_M_impl, 1);\n+}\n+\n+struct codecvt {\n+  virtual void do_max_lengththrow ();\n+};\n+\n+void\n+test01 ()\n+{\n+  locale (locale::classic (), new codecvt);\n+}"}]}