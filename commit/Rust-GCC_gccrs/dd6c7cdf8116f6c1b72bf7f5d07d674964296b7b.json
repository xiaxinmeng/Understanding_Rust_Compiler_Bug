{"sha": "dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ2YzdjZGY4MTE2ZjZjMWI3MmJmN2Y1ZDA3ZDY3NDk2NDI5NmI3Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-10-29T13:07:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-10-29T13:07:21Z"}, "message": "decimal: Minor formatting and uglification fixes.\n\n2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/decimal/decimal: Minor formatting and uglification fixes.\n\t* include/decimal/decimal.h: Likewise.\n\nFrom-SVN: r153701", "tree": {"sha": "0d18d21afb96be635b39b17e93b90ae9da514c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d18d21afb96be635b39b17e93b90ae9da514c4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b/comments", "author": null, "committer": null, "parents": [{"sha": "584573f9f34ac0835b36ed675ce0fd9afe146686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584573f9f34ac0835b36ed675ce0fd9afe146686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/584573f9f34ac0835b36ed675ce0fd9afe146686"}], "stats": {"total": 313, "additions": 133, "deletions": 180}, "files": [{"sha": "58148f0d47a3cb13fd786ca97345c1932dc43fa1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b", "patch": "@@ -1,3 +1,8 @@\n+2009-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/decimal/decimal: Minor formatting and uglification fixes.\n+\t* include/decimal/decimal.h: Likewise.\n+\n 2009-10-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_iterator_base_funcs.h: (next): Change"}, {"sha": "8ef5a91c0ca18882e5d6b2fa4a57a05b1abdb8d2", "filename": "libstdc++-v3/include/decimal/decimal", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal?ref=dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b", "patch": "@@ -107,20 +107,20 @@ namespace decimal\n \n   // 3.2.8  Binary arithmetic operators.\n #define _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(_Op, _T1, _T2, _T3)\t\\\n-  _T1 operator _Op(_T2 lhs, _T3 __rhs);\n+  _T1 operator _Op(_T2 __lhs, _T3 __rhs);\n #define _DECLARE_DECIMAL_BINARY_OP_WITH_INT(_Op, _Tp)\t\t\\\n-  _Tp operator _Op(_Tp lhs, int __rhs);\t\t\t\t\\\n-  _Tp operator _Op(_Tp lhs, unsigned int __rhs);\t\t\\\n-  _Tp operator _Op(_Tp lhs, long __rhs);\t\t\t\\\n-  _Tp operator _Op(_Tp lhs, unsigned long __rhs);\t\t\\\n-  _Tp operator _Op(_Tp lhs, long long __rhs);\t\t\t\\\n-  _Tp operator _Op(_Tp lhs, unsigned long long __rhs);\t\t\\\n-  _Tp operator _Op(int lhs, _Tp __rhs);\t\t\t\t\\\n-  _Tp operator _Op(unsigned int lhs, _Tp __rhs);\t\t\\\n-  _Tp operator _Op(long lhs, _Tp __rhs);\t\t\t\\\n-  _Tp operator _Op(unsigned long lhs, _Tp __rhs);\t\t\\\n-  _Tp operator _Op(long long lhs, _Tp __rhs);\t\t\t\\\n-  _Tp operator _Op(unsigned long long lhs, _Tp __rhs);\n+  _Tp operator _Op(_Tp __lhs, int __rhs);\t\t\t\\\n+  _Tp operator _Op(_Tp __lhs, unsigned int __rhs);\t\t\\\n+  _Tp operator _Op(_Tp __lhs, long __rhs);\t\t\t\\\n+  _Tp operator _Op(_Tp __lhs, unsigned long __rhs);\t\t\\\n+  _Tp operator _Op(_Tp __lhs, long long __rhs);\t\t\t\\\n+  _Tp operator _Op(_Tp __lhs, unsigned long long __rhs);\t\\\n+  _Tp operator _Op(int __lhs, _Tp __rhs);\t\t\t\\\n+  _Tp operator _Op(unsigned int __lhs, _Tp __rhs);\t\t\\\n+  _Tp operator _Op(long __lhs, _Tp __rhs);\t\t\t\\\n+  _Tp operator _Op(unsigned long __lhs, _Tp __rhs);\t\t\\\n+  _Tp operator _Op(long long __lhs, _Tp __rhs);\t\t\t\\\n+  _Tp operator _Op(unsigned long long __lhs, _Tp __rhs);\n \n   _DECLARE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal32, decimal32, decimal32)\n   _DECLARE_DECIMAL_BINARY_OP_WITH_INT(+, decimal32)\n@@ -178,22 +178,22 @@ namespace decimal\n #undef _DECLARE_DECIMAL_BINARY_OP_WITH_INT\n \n   // 3.2.9  Comparison operators.\n-#define _DECLARE_DECIMAL_COMPARISON(_Op, _T)\t\t\t\t\\\n-  bool operator _Op(_T lhs, decimal32  _rhs);\t\t\t\t\\\n-  bool operator _Op(_T lhs, decimal64  _rhs);\t\t\t\t\\\n-  bool operator _Op(_T lhs, decimal128  _rhs);\t\t\t\t\\\n-  bool operator _Op(_T lhs, int  _rhs);\t\t\t\t\t\\\n-  bool operator _Op(_T lhs, unsigned int  _rhs);\t\t\t\\\n-  bool operator _Op(_T lhs, long  _rhs);\t\t\t\t\\\n-  bool operator _Op(_T lhs, unsigned long  _rhs);\t\t\t\\\n-  bool operator _Op(_T lhs, long long  _rhs);\t\t\t\t\\\n-  bool operator _Op(_T lhs, unsigned long long  _rhs);\t\t\t\\\n-  bool operator _Op(int lhs, _T  _rhs);\t\t\t\t\t\\\n-  bool operator _Op(unsigned int lhs, _T  _rhs);\t\t\t\\\n-  bool operator _Op(long lhs, _T  _rhs);\t\t\t\t\\\n-  bool operator _Op(unsigned long lhs, _T  _rhs);\t\t\t\\\n-  bool operator _Op(long long lhs, _T  _rhs);\t\t\t\t\\\n-  bool operator _Op(unsigned long long lhs, _T  _rhs);\n+#define _DECLARE_DECIMAL_COMPARISON(_Op, _Tp)\t\t\t\t\\\n+  bool operator _Op(_Tp __lhs, decimal32 __rhs);\t\t\t\\\n+  bool operator _Op(_Tp __lhs, decimal64 __rhs);\t\t\t\\\n+  bool operator _Op(_Tp __lhs, decimal128 __rhs);\t\t\t\\\n+  bool operator _Op(_Tp __lhs, int __rhs);\t\t\t\t\\\n+  bool operator _Op(_Tp __lhs, unsigned int __rhs);\t\t\t\\\n+  bool operator _Op(_Tp __lhs, long __rhs);\t\t\t\t\\\n+  bool operator _Op(_Tp __lhs, unsigned long __rhs);\t\t\t\\\n+  bool operator _Op(_Tp __lhs, long long __rhs);\t\t\t\\\n+  bool operator _Op(_Tp __lhs, unsigned long long __rhs);\t\t\\\n+  bool operator _Op(int __lhs, _Tp __rhs);\t\t\t\t\\\n+  bool operator _Op(unsigned int __lhs, _Tp __rhs);\t\t\t\\\n+  bool operator _Op(long __lhs, _Tp __rhs);\t\t\t\t\\\n+  bool operator _Op(unsigned long __lhs, _Tp __rhs);\t\t\t\\\n+  bool operator _Op(long long __lhs, _Tp __rhs);\t\t\t\\\n+  bool operator _Op(unsigned long long __lhs, _Tp __rhs);\n \n   _DECLARE_DECIMAL_COMPARISON(==, decimal32)\n   _DECLARE_DECIMAL_COMPARISON(==, decimal64)"}, {"sha": "64e9b6714d347aee3a940513dbd9305a48cbcd3b", "filename": "libstdc++-v3/include/decimal/decimal.h", "status": "modified", "additions": 99, "deletions": 151, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdecimal%2Fdecimal.h?ref=dd6c7cdf8116f6c1b72bf7f5d07d674964296b7b", "patch": "@@ -41,39 +41,39 @@ namespace decimal\n {\n   // ISO/IEC TR 24733  3.2.[234].1  Construct/copy/destroy.\n \n-  inline decimal32::decimal32(decimal64 r)\t: __val(r.__getval()) {}\n-  inline decimal32::decimal32(decimal128 r)\t: __val(r.__getval()) {}\n-  inline decimal64::decimal64(decimal32 r)\t: __val(r.__getval()) {}\n-  inline decimal64::decimal64(decimal128 r)\t: __val(r.__getval()) {}\n-  inline decimal128::decimal128(decimal32 r)\t: __val(r.__getval()) {}\n-  inline decimal128::decimal128(decimal64 r)\t: __val(r.__getval()) {}\n+  inline decimal32::decimal32(decimal64 __r)\t: __val(__r.__getval()) {}\n+  inline decimal32::decimal32(decimal128 __r)\t: __val(__r.__getval()) {}\n+  inline decimal64::decimal64(decimal32 __r)\t: __val(__r.__getval()) {}\n+  inline decimal64::decimal64(decimal128 __r)\t: __val(__r.__getval()) {}\n+  inline decimal128::decimal128(decimal32 __r)\t: __val(__r.__getval()) {}\n+  inline decimal128::decimal128(decimal64 __r)\t: __val(__r.__getval()) {}\n \n   // ISO/IEC TR 24733  3.2.[234].6  Compound assignment.\n \n-#define _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_DEC(_Op1, _Op2, _T1, _T2)\t\\\n-  inline _T1& _T1::operator _Op1(_T2 __rhs)\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    __setval(__getval() _Op2 __rhs.__getval());\t\t\t\t\\\n-    return *this;\t\t\t\t\t\t\t\\\n+#define _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_DEC(_Op1, _Op2, _T1, _T2)\t \\\n+  inline _T1& _T1::operator _Op1(_T2 __rhs)\t\t\t\t \\\n+  {\t\t\t\t\t\t\t\t\t \\\n+    __setval(__getval() _Op2 __rhs.__getval());\t\t\t\t \\\n+    return *this;\t\t\t\t\t\t\t \\\n   }\n \n-#define _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_Op1, _Op2, _T1, _T2)\t\\\n-  inline _T1& _T1::operator _Op1(_T2 __rhs)\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    __setval(__getval() _Op2 __rhs);\t\t\t\t\t\\\n-    return *this;\t\t\t\t\t\t\t\\\n+#define _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_Op1, _Op2, _T1, _T2)\t \\\n+  inline _T1& _T1::operator _Op1(_T2 __rhs)\t\t\t\t \\\n+  {\t\t\t\t\t\t\t\t\t \\\n+    __setval(__getval() _Op2 __rhs);\t\t\t\t\t \\\n+    return *this;\t\t\t\t\t\t\t \\\n   }\n \n-#define _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(_O1, _O2, _T1)\t\t\\\n-  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_DEC(_O1,_O2,_T1, decimal32)\t\\\n-  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_DEC(_O1,_O2,_T1, decimal64)\t\\\n-  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_DEC(_O1,_O2,_T1, decimal128)\t\\\n-  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_O1,_O2,_T1, int)\t\t\\\n-  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_O1,_O2,_T1, unsigned int)\t\\\n-  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_O1,_O2,_T1, long)\t\t\\\n-  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_O1,_O2,_T1, unsigned long)\t\\\n-  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_O1,_O2,_T1, long long)\t\\\n-  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_O1,_O2,_T1, unsigned long long)\n+#define _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(_Op1, _Op2, _T1)\t\t \\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_DEC(_Op1, _Op2, _T1, decimal32)\t \\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_DEC(_Op1, _Op2, _T1, decimal64)\t \\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_DEC(_Op1, _Op2, _T1, decimal128)\t \\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_Op1, _Op2, _T1, int)\t\t \\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_Op1, _Op2, _T1, unsigned int) \\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_Op1, _Op2, _T1, long)\t \\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_Op1, _Op2, _T1, unsigned long)\\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_Op1, _Op2, _T1, long long)\t \\\n+  _DEFINE_DECIMAL_COMPOUND_ASSIGNMENT_INT(_Op1, _Op2, _T1, unsigned long long)\n \n   _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(+=, +, decimal32)\n   _DEFINE_DECIMAL_COMPOUND_ASSIGNMENTS(-=, -, decimal32)\n@@ -97,34 +97,22 @@ namespace decimal\n   // Extension: Conversion to integral type.\n \n   inline long long decimal32_to_long_long(decimal32 __d)\n-  {\n-    return (long long)__d.__getval();\n-  }\n+  { return (long long)__d.__getval(); }\n \n   inline long long decimal64_to_long_long(decimal64 __d)\n-  {\n-    return (long long)__d.__getval();\n-  }\n+  { return (long long)__d.__getval(); }\n \n   inline long long decimal128_to_long_long(decimal128 __d)\n-  {\n-    return (long long)__d.__getval();\n-  }\n+  { return (long long)__d.__getval(); }\n \n   inline long long decimal_to_long_long(decimal32 __d)\n-  {\n-    return (long long)__d.__getval();\n-  }\n+  { return (long long)__d.__getval(); }\n \n   inline long long decimal_to_long_long(decimal64 __d)\n-  {\n-    return (long long)__d.__getval();\n-  }\n+  { return (long long)__d.__getval(); }\n \n   inline long long decimal_to_long_long(decimal128 __d)\n-  {\n-    return (long long)__d.__getval();\n-  }\n+  { return (long long)__d.__getval(); }\n \n   // ISO/IEC TR 24733  3.2.5  Initialization from coefficient and exponent.\n \n@@ -140,7 +128,7 @@ namespace decimal\n     else\n       __multiplier = 1.E1DF;\n \n-    for (int i = 0; i < __exponent; i++)\n+    for (int __i = 0; __i < __exponent; ++__i)\n       __decexp *= __multiplier;\n \n     return __coeff * __decexp;\n@@ -158,7 +146,7 @@ namespace decimal\n     else\n       __multiplier = 1.E1DF;\n \n-    for (int i = 0; i < __exponent; i++)\n+    for (int __i = 0; __i < __exponent; ++__i)\n       __decexp *= __multiplier;\n \n     return __coeff * __decexp;\n@@ -176,7 +164,7 @@ namespace decimal\n     else\n       __multiplier = 1.E1DD;\n \n-    for (int i = 0; i < __exponent; i++)\n+    for (int __i = 0; __i < __exponent; ++__i)\n       __decexp *= __multiplier;\n \n     return __coeff * __decexp;\n@@ -194,7 +182,7 @@ namespace decimal\n     else\n       __multiplier = 1.E1DD;\n \n-    for (int i = 0; i < __exponent; i++)\n+    for (int __i = 0; __i < __exponent; ++__i)\n       __decexp *= __multiplier;\n \n     return __coeff * __decexp;\n@@ -212,13 +200,14 @@ namespace decimal\n     else\n       __multiplier = 1.E1DL;\n \n-    for (int i = 0; i < __exponent; i++)\n+    for (int __i = 0; __i < __exponent; ++__i)\n       __decexp *= __multiplier;\n \n     return __coeff * __decexp;\n   }\n \n-  static decimal128 make_decimal128(unsigned long long __coeff, int __exponent)\n+  static decimal128\n+  make_decimal128(unsigned long long __coeff, int __exponent)\n   {\n     decimal128 __decexp = 1, __multiplier;\n \n@@ -230,7 +219,7 @@ namespace decimal\n     else\n       __multiplier = 1.E1DL;\n \n-    for (int i = 0; i < __exponent; i++)\n+    for (int __i = 0; __i < __exponent; ++__i)\n       __decexp *= __multiplier;\n \n     return __coeff * __decexp;\n@@ -239,101 +228,65 @@ namespace decimal\n   // ISO/IEC TR 24733  3.2.6  Conversion to generic floating-point type.\n \n   inline float decimal32_to_float(decimal32 __d)\n-  {\n-    return (float)__d.__getval();\n-  }\n+  { return (float)__d.__getval(); }\n \n   inline float decimal64_to_float(decimal64 __d)\n-  {\n-    return (float)__d.__getval();\n-  }\n+  { return (float)__d.__getval(); }\n \n   inline float decimal128_to_float(decimal128 __d)\n-  {\n-    return (float)__d.__getval();\n-  }\n+  { return (float)__d.__getval(); }\n \n   inline float decimal_to_float(decimal32 __d)\n-  {\n-    return (float)__d.__getval();\n-  }\n+  { return (float)__d.__getval(); }\n \n   inline float decimal_to_float(decimal64 __d)\n-  {\n-    return (float)__d.__getval();\n-  }\n+  { return (float)__d.__getval(); }\n \n   inline float decimal_to_float(decimal128 __d)\n-  {\n-    return (float)__d.__getval();\n-  }\n+  { return (float)__d.__getval(); }\n \n   inline double decimal32_to_double(decimal32 __d)\n-  {\n-    return (double)__d.__getval();\n-  }\n+  { return (double)__d.__getval(); }\n \n   inline double decimal64_to_double(decimal64 __d)\n-  {\n-    return (double)__d.__getval();\n-  }\n+  { return (double)__d.__getval(); }\n \n   inline double decimal128_to_double(decimal128 __d)\n-  {\n-    return (double)__d.__getval();\n-  }\n+  { return (double)__d.__getval(); }\n \n   inline double decimal_to_double(decimal32 __d)\n-  {\n-    return (double)__d.__getval();\n-  }\n+  { return (double)__d.__getval(); }\n \n   inline double decimal_to_double(decimal64 __d)\n-  {\n-    return (double)__d.__getval();\n-  }\n+  { return (double)__d.__getval(); }\n \n   inline double decimal_to_double(decimal128 __d)\n-  {\n-    return (double)__d.__getval();\n-  }\n+  { return (double)__d.__getval(); }\n \n   inline long double decimal32_to_long_double(decimal32 __d)\n-  {\n-    return (long double)__d.__getval();\n-  }\n+  { return (long double)__d.__getval(); }\n \n   inline long double decimal64_to_long_double(decimal64 __d)\n-  {\n-    return (long double)__d.__getval();\n-  }\n+  { return (long double)__d.__getval(); }\n \n   inline long double decimal128_to_long_double(decimal128 __d)\n-  {\n-    return (long double)__d.__getval();\n-  }\n+  { return (long double)__d.__getval(); }\n \n   inline long double decimal_to_long_double(decimal32 __d)\n-  {\n-    return (long double)__d.__getval();\n-  }\n+  { return (long double)__d.__getval(); }\n \n   inline long double decimal_to_long_double(decimal64 __d)\n-  {\n-    return (long double)__d.__getval();\n-  }\n+  { return (long double)__d.__getval(); }\n \n   inline long double decimal_to_long_double(decimal128 __d)\n-  {\n-    return (long double)__d.__getval();\n-  }\n+  { return (long double)__d.__getval(); }\n \n   // ISO/IEC TR 24733  3.2.7  Unary arithmetic operators.\n \n-#define _DEFINE_DECIMAL_UNARY_OP(_Op, _T)\t\\\n-  inline _T operator _Op(_T __rhs)\t\t\\\n+#define _DEFINE_DECIMAL_UNARY_OP(_Op, _Tp)\t\\\n+  inline _Tp operator _Op(_Tp __rhs)\t\t\\\n   {\t\t\t\t\t\t\\\n-    _T __tmp;\t\t\t\t\t\\\n+    _Tp __tmp;\t\t\t\t\t\\\n     __tmp.__setval(0 _Op __rhs.__getval());\t\\\n     return __tmp;\t\t\t\t\\\n   }\n@@ -350,50 +303,50 @@ namespace decimal\n   // ISO/IEC TR 24733  3.2.8  Binary arithmetic operators.\n \n #define _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(_Op, _T1, _T2, _T3)\t\\\n-  inline _T1 operator _Op(_T2 lhs, _T3 __rhs)\t\t\t\\\n+  inline _T1 operator _Op(_T2 __lhs, _T3 __rhs)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    _T1 retval;\t\t\t\t\t\t\t\\\n-    retval.__setval(lhs.__getval() _Op __rhs.__getval());\t\\\n-    return retval;\t\t\t\t\t\t\\\n+    _T1 __retval;\t\t\t\t\t\t\\\n+    __retval.__setval(__lhs.__getval() _Op __rhs.__getval());\t\\\n+    return __retval;\t\t\t\t\t\t\\\n   }\n \n #define _DEFINE_DECIMAL_BINARY_OP_BOTH(_Op, _T1, _T2, _T3)\t\\\n-  inline _T1 operator _Op(_T2 lhs, _T3 __rhs)\t\t\t\\\n+  inline _T1 operator _Op(_T2 __lhs, _T3 __rhs)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    _T1 retval;\t\t\t\t\t\t\t\\\n-    retval.__setval(lhs.__getval() _Op __rhs.__getval());\t\\\n-    return retval;\t\t\t\t\t\t\\\n+    _T1 __retval;\t\t\t\t\t\t\\\n+    __retval.__setval(__lhs.__getval() _Op __rhs.__getval());\t\\\n+    return __retval;\t\t\t\t\t\t\\\n   }\n \n #define _DEFINE_DECIMAL_BINARY_OP_LHS(_Op, _T1, _T2)\t\t\\\n-  inline _T1 operator _Op(_T1 lhs, _T2 __rhs)\t\t\t\\\n+  inline _T1 operator _Op(_T1 __lhs, _T2 __rhs)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    _T1 retval;\t\t\t\t\t\t\t\\\n-    retval.__setval(lhs.__getval() _Op __rhs);\t\t\t\\\n-    return retval;\t\t\t\t\t\t\\\n+    _T1 __retval;\t\t\t\t\t\t\\\n+    __retval.__setval(__lhs.__getval() _Op __rhs);\t\t\\\n+    return __retval;\t\t\t\t\t\t\\\n   }\n \n #define _DEFINE_DECIMAL_BINARY_OP_RHS(_Op, _T1, _T2)\t\t\\\n-  inline _T1 operator _Op(_T2 lhs, _T1 __rhs)\t\t\t\\\n+  inline _T1 operator _Op(_T2 __lhs, _T1 __rhs)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n-    _T1 retval;\t\t\t\t\t\t\t\\\n-    retval.__setval(lhs _Op __rhs.__getval());\t\t\t\\\n-    return retval;\t\t\t\t\t\t\\\n-  }\n-\n-#define _DEFINE_DECIMAL_BINARY_OP_WITH_INT(_Op,_Tp)\t\t\\\n-  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op,_Tp, int);\t\t\t\\\n-  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op,_Tp, unsigned int);\t\t\\\n-  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op,_Tp, long);\t\t\t\\\n-  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op,_Tp, unsigned long);\t\\\n-  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op,_Tp, long long);\t\t\\\n-  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op,_Tp, unsigned long long);\t\\\n-  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op,_Tp, int);\t\t\t\\\n-  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op,_Tp, unsigned int);\t\t\\\n-  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op,_Tp, long);\t\t\t\\\n-  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op,_Tp, unsigned long);\t\\\n-  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op,_Tp, long long);\t\t\\\n-  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op,_Tp, unsigned long long);\t\\\n+    _T1 __retval;\t\t\t\t\t\t\\\n+    __retval.__setval(__lhs _Op __rhs.__getval());\t\t\\\n+    return __retval;\t\t\t\t\t\t\\\n+  }\n+\n+#define _DEFINE_DECIMAL_BINARY_OP_WITH_INT(_Op, _T1)\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op, _T1, int);\t\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op, _T1, unsigned int);\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op, _T1, long);\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op, _T1, unsigned long);\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op, _T1, long long);\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_LHS(_Op, _T1, unsigned long long);\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op, _T1, int);\t\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op, _T1, unsigned int);\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op, _T1, long);\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op, _T1, unsigned long);\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op, _T1, long long);\t\t\\\n+  _DEFINE_DECIMAL_BINARY_OP_RHS(_Op, _T1, unsigned long long);\t\\\n \n   _DEFINE_DECIMAL_BINARY_OP_WITH_DEC(+, decimal32, decimal32, decimal32)\n   _DEFINE_DECIMAL_BINARY_OP_WITH_INT(+, decimal32)\n@@ -456,21 +409,16 @@ namespace decimal\n   // ISO/IEC TR 24733  3.2.9  Comparison operators.\n \n #define _DEFINE_DECIMAL_COMPARISON_BOTH(_Op, _T1, _T2)\t\\\n-  inline bool operator _Op(_T1 lhs, _T2 __rhs)\t\t\\\n-  {\t\t\t\t\t\t\t\\\n-    return lhs.__getval() _Op __rhs.__getval();\t\t\\\n-  }\n+  inline bool operator _Op(_T1 __lhs, _T2 __rhs)\t\\\n+  { return __lhs.__getval() _Op __rhs.__getval(); }\n \n #define _DEFINE_DECIMAL_COMPARISON_LHS(_Op, _T1, _T2)\t\\\n-  inline bool operator _Op(_T1 lhs, _T2 __rhs)\t\t\\\n-  {\t\t\t\t\t\t\t\\\n-    return lhs.__getval() _Op __rhs;\t\t\t\\\n-  }\n+  inline bool operator _Op(_T1 __lhs, _T2 __rhs)\t\\\n+  { return __lhs.__getval() _Op __rhs; }\n+\n #define _DEFINE_DECIMAL_COMPARISON_RHS(_Op, _T1, _T2)\t\\\n-  inline bool operator _Op(_T1 lhs, _T2 __rhs)\t\t\\\n-  {\t\t\t\t\t\t\t\\\n-    return lhs _Op __rhs.__getval();\t\t\t\\\n-  }\n+  inline bool operator _Op(_T1 __lhs, _T2 __rhs)\t\\\n+  { return __lhs _Op __rhs.__getval(); }\n \n #define _DEFINE_DECIMAL_COMPARISONS(_Op, _Tp)\t\t\t\\\n   _DEFINE_DECIMAL_COMPARISON_BOTH(_Op, _Tp, decimal32)\t\t\\"}]}