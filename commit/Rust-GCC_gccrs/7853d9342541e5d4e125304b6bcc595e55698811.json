{"sha": "7853d9342541e5d4e125304b6bcc595e55698811", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg1M2Q5MzQyNTQxZTVkNGUxMjUzMDRiNmJjYzU5NWU1NTY5ODgxMQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2007-06-06T10:26:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:26:28Z"}, "message": "exp_dbug.adb (Get_Encoded_Name): Modified to continue providing its functionality when...\n\n2007-04-20  Javier Miranda  <miranda@adacore.com>\n\t    Nicolas Setton  <setton@adacore.com>\n\n\t* exp_dbug.adb (Get_Encoded_Name): Modified to continue providing its\n\tfunctionality when the backend is generating code.\n\tOtherwise any serious error\n\treported by the backend calling the frontend routine Error_Msg\n\tchanges the Compilation_Mode to Check_Semantics, disables the\n\tfunctionality of this routine and causes the generation of\n\tspureous additional errors.\n\n\t* exp_dbug.ads (Pointers to Unconstrained Arrays): Document the\n\tdebugging information now generated by the compiler for fat-pointer\n\ttypes.\n\tDocument the contents of DW_AT_producer in the GNAT Vendor extensions to\n\tDWARF2/3.\n\tDocument GNAT Vendor extensions to DWARF 2/3 and the \"-gdwarf+\" switch.\n\nFrom-SVN: r125402", "tree": {"sha": "306a618d496aad9d78dd0fdaf4349a1b15d973a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/306a618d496aad9d78dd0fdaf4349a1b15d973a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7853d9342541e5d4e125304b6bcc595e55698811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7853d9342541e5d4e125304b6bcc595e55698811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7853d9342541e5d4e125304b6bcc595e55698811", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7853d9342541e5d4e125304b6bcc595e55698811/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e038221c4c77097382defc24a6922246b3c315f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e038221c4c77097382defc24a6922246b3c315f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e038221c4c77097382defc24a6922246b3c315f"}], "stats": {"total": 90, "additions": 73, "deletions": 17}, "files": [{"sha": "367ed2d6775ae4701c7d235b755c0afda4931cd2", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7853d9342541e5d4e125304b6bcc595e55698811/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7853d9342541e5d4e125304b6bcc595e55698811/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=7853d9342541e5d4e125304b6bcc595e55698811", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -28,7 +28,6 @@ with Alloc;    use Alloc;\n with Atree;    use Atree;\n with Debug;    use Debug;\n with Einfo;    use Einfo;\n-with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n with Opt;      use Opt;\n@@ -492,12 +491,22 @@ package body Exp_Dbug is\n       Has_Suffix : Boolean;\n \n    begin\n-      --  If not generating code, there is no need to create encoded\n-      --  names, and problems when the back-end is called to annotate\n-      --  types without full code generation. See comments at beginning\n-      --  of Get_External_Name_With_Suffix for additional details.\n+      --  If not generating code, there is no need to create encoded names, and\n+      --  problems when the back-end is called to annotate types without full\n+      --  code generation. See comments in Get_External_Name_With_Suffix for\n+      --  additional details.\n \n-      if Operating_Mode /= Generate_Code then\n+      --  However we do create encoded names if the back end is active, even\n+      --  if Operating_Mode got reset. Otherwise any serious error reported\n+      --  by the backend calling Error_Msg changes the Compilation_Mode to\n+      --  Check_Semantics, which disables the functionality of this routine,\n+      --  causing the generation of spurious additional errors.\n+\n+      --  Couldn't we just test Original_Operating_Mode here? ???\n+\n+      if Operating_Mode /= Generate_Code\n+        and then not Generating_Code\n+      then\n          return;\n       end if;\n "}, {"sha": "3e3e992707ab383d65235d22658933e3ee68dddd", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 57, "deletions": 10, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7853d9342541e5d4e125304b6bcc595e55698811/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7853d9342541e5d4e125304b6bcc595e55698811/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=7853d9342541e5d4e125304b6bcc595e55698811", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -28,6 +28,7 @@\n --  debugger. In accordance with the Dwarf 2.2 specification, certain\n --  type names are encoded to provide information to the debugger.\n \n+with Namet; use Namet;\n with Types; use Types;\n with Uintp; use Uintp;\n \n@@ -44,11 +45,11 @@ package Exp_Dbug is\n    --  are the enclosing scopes (not including Standard at the start).\n \n    --  The encoding of the name follows this basic qualified naming scheme,\n-   --  where the encoding of individual entity names is as described in\n-   --  Namet (i.e. in particular names present in the original source are\n-   --  folded to all lower case, with upper half and wide characters encoded\n-   --  as described in Namet). Upper case letters are used only for entities\n-   --  generated by the compiler.\n+   --  where the encoding of individual entity names is as described in Namet\n+   --  (i.e. in particular names present in the original source are folded to\n+   --  all lower case, with upper half and wide characters encoded as described\n+   --  in Namet). Upper case letters are used only for entities generated by\n+   --  the compiler.\n \n    --  There are two cases, global entities, and local entities. In more formal\n    --  terms, local entities are those which have a dynamic enclosing scope,\n@@ -1247,10 +1248,19 @@ package Exp_Dbug is\n    --        The bounds may be any integral type. In the case of an enumeration\n    --        type, Enum_Rep values are used.\n \n-   --      The debugging information will sometimes reference an anonymous fat\n-   --      pointer type. Such types are given the name xxx___XUP, where xxx is\n-   --      the name of the designated type. If the debugger is asked to output\n-   --      such a type name, the appropriate form is \"access xxx\".\n+   --      For a given unconstrained array type, the compiler will generate one\n+   --      fat-pointer type whose name is \"arr___XUP\", where \"arr\" is the name\n+   --      of the array type, and use it to represent the array type itself in\n+   --      the debugging information.\n+   --      For each pointer to this unconstrained array type, the compiler will\n+   --      generate a typedef that points to the above \"arr___XUP\" fat-pointer\n+   --      type. As a consequence, when it comes to fat-pointer types:\n+\n+   --        1. The type name is given by the typedef\n+\n+   --        2. If the debugger is asked to output the type, the appropriate\n+   --           form is \"access arr\", except if the type name is \"arr___XUP\"\n+   --           for which it is the array definition.\n \n    --    Thin Pointers\n \n@@ -1501,4 +1511,41 @@ package Exp_Dbug is\n    --  are missing and deal as best as it can with the limited information\n    --  available.\n \n+   ---------------------------------\n+   -- GNAT Extensions to DWARF2/3 --\n+   ---------------------------------\n+\n+   --  If the compiler switch \"-gdwarf+\" is specified, GNAT Vendor extensions\n+   --  to DWARF2/3 are generated, with the following variations from the above\n+   --  specification.\n+\n+   --   Change in the contents of the DW_AT_name attribute.\n+   --    The operators are represented in their natural form. (Ie, the addition\n+   --    operator is written as \"+\" instead of \"Oadd\").\n+   --    The component separation string is \".\" instead of \"__\"\n+\n+   --   Introduction of DW_AT_GNAT_encoding, encoded with value 0x2301.\n+   --    Any debugging information entry representing a program entity, named\n+   --    or implicit, may have a DW_AT_GNAT_encoding attribute. The value of\n+   --    this attribute is a string representing the suffix internally added\n+   --    by GNAT for various purposes, mainly for representing debug\n+   --    information compatible with other formats.\n+\n+   --    If a debugging information entry has multiple encodings, all of them\n+   --    will be listed in DW_AT_GNAT_encoding. The separator for this list\n+   --    is ':'.\n+\n+   --   Introduction of DW_AT_GNAT_descriptive_type, encoded with value 0x2302\n+   --    Any debugging information entry representing a type may have a\n+   --    DW_AT_GNAT_descriptive_type attribute whose value is a reference,\n+   --    pointing to a debugging information entry representing another type\n+   --    associated to the type.\n+\n+   --   Modification of the contents of the DW_AT_producer string.\n+   --    When emitting full GNAT Vendor extensions to DWARF2/3, \"-gdwarf+\"\n+   --    is appended to the DW_AT_producer string.\n+   --\n+   --    When emitting only DW_AT_GNAT_descriptive_type, \"-gdwarf+-\" is\n+   --    appended to the DW_AT_producer string.\n+\n end Exp_Dbug;"}]}