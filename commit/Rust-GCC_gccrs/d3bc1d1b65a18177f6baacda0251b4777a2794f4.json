{"sha": "d3bc1d1b65a18177f6baacda0251b4777a2794f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNiYzFkMWI2NWExODE3N2Y2YmFhY2RhMDI1MWI0Nzc3YTI3OTRmNA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-06-30T16:35:16Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-06-30T16:35:16Z"}, "message": "match.pd (X - (X / Y) * Y): Use convert1 and convert2.\n\n\t* match.pd (X - (X / Y) * Y): Use convert1 and convert2.  Convert\n\tboth operands of the resulting expression.\t\n\n\t* gcc.dg/fold-minus-6.c: New test.\n\nFrom-SVN: r225195", "tree": {"sha": "9c5d36cde1742c9db75b3a2bdbaabd50eb9dc5ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c5d36cde1742c9db75b3a2bdbaabd50eb9dc5ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3bc1d1b65a18177f6baacda0251b4777a2794f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3bc1d1b65a18177f6baacda0251b4777a2794f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3bc1d1b65a18177f6baacda0251b4777a2794f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3bc1d1b65a18177f6baacda0251b4777a2794f4/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b451c27117636e7ca6f09fc4ac86a3623decf8fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b451c27117636e7ca6f09fc4ac86a3623decf8fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b451c27117636e7ca6f09fc4ac86a3623decf8fa"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "3dabe907a4425d50b302efd3183875478573c5fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3bc1d1b65a18177f6baacda0251b4777a2794f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3bc1d1b65a18177f6baacda0251b4777a2794f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3bc1d1b65a18177f6baacda0251b4777a2794f4", "patch": "@@ -1,3 +1,8 @@\n+2015-06-30  Marek Polacek  <polacek@redhat.com>\n+\n+\t* match.pd (X - (X / Y) * Y): Use convert1 and convert2.  Convert\n+\tboth operands of the resulting expression.\t\n+\n 2015-06-30  Richard Biener  <rguenther@suse.de>\n \n \t* fold-const.c (fold_binary_loc): Move ~x & ~y -> ~(x | y) and"}, {"sha": "e6728f470969ebcb85396c2c108409288df39acd", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3bc1d1b65a18177f6baacda0251b4777a2794f4/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3bc1d1b65a18177f6baacda0251b4777a2794f4/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=d3bc1d1b65a18177f6baacda0251b4777a2794f4", "patch": "@@ -240,9 +240,9 @@ along with GCC; see the file COPYING3.  If not see\n \n /* X - (X / Y) * Y is the same as X % Y.  */\n (simplify\n- (minus (convert? @0) (convert? (mult (trunc_div @0 @1) @1)))\n+ (minus (convert1? @0) (convert2? (mult (trunc_div @0 @1) @1)))\n  (if (INTEGRAL_TYPE_P (type) || VECTOR_INTEGER_TYPE_P (type))\n-  (convert (trunc_mod @0 @1))))\n+  (trunc_mod (convert @0) (convert @1))))\n \n /* Optimize TRUNC_MOD_EXPR by a power of two into a BIT_AND_EXPR,\n    i.e. \"X % C\" into \"X & (C - 1)\", if X and C are positive."}, {"sha": "95a75e569ea3680e7979dcfdcb8cda164438a113", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3bc1d1b65a18177f6baacda0251b4777a2794f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3bc1d1b65a18177f6baacda0251b4777a2794f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d3bc1d1b65a18177f6baacda0251b4777a2794f4", "patch": "@@ -1,3 +1,7 @@\n+2015-06-30  Marek Polacek  <polacek@redhat.com>\n+\n+\t* gcc.dg/fold-minus-6.c: New test.\n+\n 2015-06-30  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement N4197 - Adding u8 character literals"}, {"sha": "1c22c252f72920f0446c0d0dbd1942aeb43187e1", "filename": "gcc/testsuite/gcc.dg/fold-minus-6.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3bc1d1b65a18177f6baacda0251b4777a2794f4/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-minus-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3bc1d1b65a18177f6baacda0251b4777a2794f4/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-minus-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-minus-6.c?ref=d3bc1d1b65a18177f6baacda0251b4777a2794f4", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-cddce1\" } */\n+\n+int\n+fn1 (int x)\n+{\n+  return 42L - (42 / x) * x;\n+}\n+\n+long\n+fn2 (int x)\n+{\n+  return 42L - (42 / x) * x;\n+}\n+\n+int\n+fn3 (long int x)\n+{\n+  return 42L - (42 / x) * x;\n+}\n+\n+int\n+fn4 (int a, int b)\n+{\n+  return a - (unsigned) ((a / b) * b);\n+}\n+\n+int\n+fn5 (int a, unsigned int b)\n+{\n+  return a - ((a / b) * b);\n+}\n+\n+unsigned int\n+fn6 (int a, int b)\n+{\n+  return a - ((a / b) * b);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" / \" \"cddce1\" } } */\n+/* { dg-final { scan-tree-dump-not \" - \" \"cddce1\" } } */\n+/* { dg-final { scan-tree-dump-not \" \\\\+ \" \"cddce1\" } } */"}]}