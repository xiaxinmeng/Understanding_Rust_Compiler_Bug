{"sha": "db80e34e82422cfbf8f16d46112c790b9f48373d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI4MGUzNGU4MjQyMmNmYmY4ZjE2ZDQ2MTEyYzc5MGI5ZjQ4MzczZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-12-02T08:39:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-12-02T08:39:10Z"}, "message": "g++spec.c (lang_specific_driver): Remove unused saw_verbose_flag variable.\n\n\t* g++spec.c (lang_specific_driver): Remove unused saw_verbose_flag\n\tvariable.\n\t* pt.c (tsubst_pack_expansion): Remove unused first_arg_pack variable.\n\t* init.c (build_vec_init): Remove unused size variable.\n\t* typeck2.c (check_narrowing): Remove unused was_decl variable.\n\t* decl.c (poplevel): Remove unused tmp and real_functionbody\n\tvariables.\n\t(decls_match): Remove unused tree_name variable.\n\t(start_decl): Remove unused type variable.\n\t* parser.c (cp_parser_type_parameter): Remove unused parameter_list\n\tvariable.\n\t(cp_parser_template_id, cp_parser_explicit_instantiation,\n\tcp_parser_declarator): Remove unused token variable.\n\t(cp_parser_simple_type_specifier): Remove unused id variable.\n\t(cp_parser_parameter_declaration): Remove unused\n\tgreater_than_is_operator_p variable.\n\t(cp_parser_check_declarator_template_parameters): Remove unused\n\tmember variable.\n\t(c_parse_file): Remove unused error_occurred variable.\n\t* cp-gimplify.c (cp_gimplify_init_expr): Remove unused slot variable.\n\t* typeck.c (cp_build_function_call_vec): Remove unused name variable.\n\t* class.c (resolve_address_of_overloaded_function): Remove unused\n\tis_reference variable.\n\t(build_rtti_vtbl_entries): Remove unused basetype variable.\n\t* mangle.c (write_template_param): Remove unused parm_level and\n\tparm_type variables.\n\nFrom-SVN: r154899", "tree": {"sha": "0c7f85f56f23ba520ddfa23d8a7f285f1685291a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c7f85f56f23ba520ddfa23d8a7f285f1685291a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db80e34e82422cfbf8f16d46112c790b9f48373d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db80e34e82422cfbf8f16d46112c790b9f48373d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db80e34e82422cfbf8f16d46112c790b9f48373d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db80e34e82422cfbf8f16d46112c790b9f48373d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ab0e4a354d3024397df0238a44dfeff5f37e5e49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0e4a354d3024397df0238a44dfeff5f37e5e49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab0e4a354d3024397df0238a44dfeff5f37e5e49"}], "stats": {"total": 110, "additions": 42, "deletions": 68}, "files": [{"sha": "7b2afd3a92d0201e45e9d5f5a5bb203268e5df2f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=db80e34e82422cfbf8f16d46112c790b9f48373d", "patch": "@@ -1,3 +1,32 @@\n+2009-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++spec.c (lang_specific_driver): Remove unused saw_verbose_flag\n+\tvariable.\n+\t* pt.c (tsubst_pack_expansion): Remove unused first_arg_pack variable.\n+\t* init.c (build_vec_init): Remove unused size variable.\n+\t* typeck2.c (check_narrowing): Remove unused was_decl variable.\n+\t* decl.c (poplevel): Remove unused tmp and real_functionbody\n+\tvariables.\n+\t(decls_match): Remove unused tree_name variable.\n+\t(start_decl): Remove unused type variable.\n+\t* parser.c (cp_parser_type_parameter): Remove unused parameter_list\n+\tvariable.\n+\t(cp_parser_template_id, cp_parser_explicit_instantiation,\n+\tcp_parser_declarator): Remove unused token variable.\n+\t(cp_parser_simple_type_specifier): Remove unused id variable.\n+\t(cp_parser_parameter_declaration): Remove unused\n+\tgreater_than_is_operator_p variable.\n+\t(cp_parser_check_declarator_template_parameters): Remove unused\n+\tmember variable.\n+\t(c_parse_file): Remove unused error_occurred variable.\n+\t* cp-gimplify.c (cp_gimplify_init_expr): Remove unused slot variable.\n+\t* typeck.c (cp_build_function_call_vec): Remove unused name variable.\n+\t* class.c (resolve_address_of_overloaded_function): Remove unused\n+\tis_reference variable.\n+\t(build_rtti_vtbl_entries): Remove unused basetype variable.\n+\t* mangle.c (write_template_param): Remove unused parm_level and\n+\tparm_type variables.\n+\n 2009-12-01  Taras Glek  <taras@mozilla.com>\n \n \t* parser.c (cp_parser_class_specifier): Set class location to that"}, {"sha": "1dcc2383794e871be2d55e730fb13ad932325adf", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=db80e34e82422cfbf8f16d46112c790b9f48373d", "patch": "@@ -6059,7 +6059,6 @@ resolve_address_of_overloaded_function (tree target_type,\n        selected function.  */\n \n   int is_ptrmem = 0;\n-  int is_reference = 0;\n   /* We store the matches in a TREE_LIST rooted here.  The functions\n      are the TREE_PURPOSE, not the TREE_VALUE, in this list, for easy\n      interoperability with most_specialized_instantiation.  */\n@@ -6082,12 +6081,9 @@ resolve_address_of_overloaded_function (tree target_type,\n     /* This is OK, too.  */\n     is_ptrmem = 1;\n   else if (TREE_CODE (target_type) == FUNCTION_TYPE)\n-    {\n-      /* This is OK, too.  This comes from a conversion to reference\n-\t type.  */\n-      target_type = build_reference_type (target_type);\n-      is_reference = 1;\n-    }\n+    /* This is OK, too.  This comes from a conversion to reference\n+       type.  */\n+    target_type = build_reference_type (target_type);\n   else\n     {\n       if (flags & tf_error)\n@@ -8043,12 +8039,10 @@ build_rtti_vtbl_entries (tree binfo, vtbl_init_data* vid)\n {\n   tree b;\n   tree t;\n-  tree basetype;\n   tree offset;\n   tree decl;\n   tree init;\n \n-  basetype = BINFO_TYPE (binfo);\n   t = BINFO_TYPE (vid->rtti_binfo);\n \n   /* To find the complete object, we will first convert to our most"}, {"sha": "e0047cf116908a222c6af16ee9d93802282bcacc", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=db80e34e82422cfbf8f16d46112c790b9f48373d", "patch": "@@ -429,17 +429,13 @@ cp_gimplify_init_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n   tree from = TREE_OPERAND (*expr_p, 1);\n   tree to = TREE_OPERAND (*expr_p, 0);\n   tree t;\n-  tree slot = NULL_TREE;\n \n   /* What about code that pulls out the temp and uses it elsewhere?  I\n      think that such code never uses the TARGET_EXPR as an initializer.  If\n      I'm wrong, we'll abort because the temp won't have any RTL.  In that\n      case, I guess we'll need to replace references somehow.  */\n   if (TREE_CODE (from) == TARGET_EXPR)\n-    {\n-      slot = TARGET_EXPR_SLOT (from);\n-      from = TARGET_EXPR_INITIAL (from);\n-    }\n+    from = TARGET_EXPR_INITIAL (from);\n \n   /* Look through any COMPOUND_EXPRs, since build_compound_expr pushes them\n      inside the TARGET_EXPR.  */"}, {"sha": "8f6d33ceee7d0bab20986d35d545f5af3b204fde", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=db80e34e82422cfbf8f16d46112c790b9f48373d", "patch": "@@ -520,8 +520,6 @@ poplevel (int keep, int reverse, int functionbody)\n   /* The chain of decls was accumulated in reverse order.\n      Put it into forward order, just for cleanliness.  */\n   tree decls;\n-  int tmp = functionbody;\n-  int real_functionbody;\n   tree subblocks;\n   tree block;\n   tree decl;\n@@ -535,8 +533,8 @@ poplevel (int keep, int reverse, int functionbody)\n \n   gcc_assert (current_binding_level->kind != sk_class);\n \n-  real_functionbody = (current_binding_level->kind == sk_cleanup\n-\t\t       ? ((functionbody = 0), tmp) : functionbody);\n+  if (current_binding_level->kind == sk_cleanup)\n+    functionbody = 0;\n   subblocks = functionbody >= 0 ? current_binding_level->blocks : 0;\n \n   gcc_assert (!VEC_length(cp_class_binding,\n@@ -1035,8 +1033,6 @@ decls_match (tree newdecl, tree olddecl)\n void\n warn_extern_redeclared_static (tree newdecl, tree olddecl)\n {\n-  tree name;\n-\n   if (TREE_CODE (newdecl) == TYPE_DECL\n       || TREE_CODE (newdecl) == TEMPLATE_DECL\n       || TREE_CODE (newdecl) == CONST_DECL\n@@ -1059,7 +1055,6 @@ warn_extern_redeclared_static (tree newdecl, tree olddecl)\n       && DECL_ARTIFICIAL (olddecl))\n     return;\n \n-  name = DECL_ASSEMBLER_NAME (newdecl);\n   permerror (input_location, \"%qD was declared %<extern%> and later %<static%>\", newdecl);\n   permerror (input_location, \"previous declaration of %q+D\", olddecl);\n }\n@@ -4071,7 +4066,6 @@ start_decl (const cp_declarator *declarator,\n \t    tree *pushed_scope_p)\n {\n   tree decl;\n-  tree type;\n   tree context;\n   bool was_public;\n   int flags;\n@@ -4094,8 +4088,6 @@ start_decl (const cp_declarator *declarator,\n       || decl == error_mark_node)\n     return error_mark_node;\n \n-  type = TREE_TYPE (decl);\n-\n   context = DECL_CONTEXT (decl);\n \n   if (context)"}, {"sha": "28530880eb682f06b6ed6d598d4cacde13841cf7", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=db80e34e82422cfbf8f16d46112c790b9f48373d", "patch": "@@ -59,9 +59,6 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n   /* If nonzero, the user gave us the `-p' or `-pg' flag.  */\n   int saw_profile_flag = 0;\n \n-  /* If nonzero, the user gave us the `-v' flag.  */\n-  int saw_verbose_flag = 0;\n-\n   /* What do with libstdc++:\n      -1 means we should not link in libstdc++\n      0  means we should link in libstdc++ if it is needed\n@@ -153,8 +150,6 @@ lang_specific_driver (int *in_argc, const char *const **in_argv,\n \t    args[i] |= WITHLIBC;\n \t  else if (strcmp (argv[i], \"-pg\") == 0 || strcmp (argv[i], \"-p\") == 0)\n \t    saw_profile_flag++;\n-\t  else if (strcmp (argv[i], \"-v\") == 0)\n-\t    saw_verbose_flag = 1;\n \t  else if (strncmp (argv[i], \"-x\", 2) == 0)\n \t    {\n \t      const char * arg;"}, {"sha": "e6397446b0239ba9f21498054c9dcdaef85374c7", "filename": "gcc/cp/init.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=db80e34e82422cfbf8f16d46112c790b9f48373d", "patch": "@@ -2666,7 +2666,6 @@ build_vec_init (tree base, tree maxindex, tree init,\n {\n   tree rval;\n   tree base2 = NULL_TREE;\n-  tree size;\n   tree itype = NULL_TREE;\n   tree iterator;\n   /* The type of BASE.  */\n@@ -2724,7 +2723,6 @@ build_vec_init (tree base, tree maxindex, tree init,\n     }\n \n   maxindex = cp_convert (ptrdiff_type_node, maxindex);\n-  size = size_in_bytes (type);\n   if (TREE_CODE (atype) == ARRAY_TYPE)\n     {\n       ptype = build_pointer_type (type);"}, {"sha": "cd2b7d7dc1ff9200d3b04b3852a347330eae3675", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=db80e34e82422cfbf8f16d46112c790b9f48373d", "patch": "@@ -2809,8 +2809,6 @@ static void\n write_template_param (const tree parm)\n {\n   int parm_index;\n-  int parm_level;\n-  tree parm_type = NULL_TREE;\n \n   MANGLE_TRACE_TREE (\"template-parm\", parm);\n \n@@ -2820,13 +2818,10 @@ write_template_param (const tree parm)\n     case TEMPLATE_TEMPLATE_PARM:\n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n       parm_index = TEMPLATE_TYPE_IDX (parm);\n-      parm_level = TEMPLATE_TYPE_LEVEL (parm);\n       break;\n \n     case TEMPLATE_PARM_INDEX:\n       parm_index = TEMPLATE_PARM_IDX (parm);\n-      parm_level = TEMPLATE_PARM_LEVEL (parm);\n-      parm_type = TREE_TYPE (TEMPLATE_PARM_DECL (parm));\n       break;\n \n     default:"}, {"sha": "b74f4f23c673d32edd3e6c6a5ed4b03725a572d8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=db80e34e82422cfbf8f16d46112c790b9f48373d", "patch": "@@ -10649,14 +10649,13 @@ cp_parser_type_parameter (cp_parser* parser, bool *is_parameter_pack)\n \n     case RID_TEMPLATE:\n       {\n-\ttree parameter_list;\n \ttree identifier;\n \ttree default_argument;\n \n \t/* Look for the `<'.  */\n \tcp_parser_require (parser, CPP_LESS, \"%<<%>\");\n \t/* Parse the template-parameter-list.  */\n-\tparameter_list = cp_parser_template_parameter_list (parser);\n+\tcp_parser_template_parameter_list (parser);\n \t/* Look for the `>'.  */\n \tcp_parser_require (parser, CPP_GREATER, \"%<>%>\");\n \t/* Look for the `class' keyword.  */\n@@ -10790,7 +10789,7 @@ cp_parser_template_id (cp_parser *parser,\n   cp_token_position start_of_id = 0;\n   deferred_access_check *chk;\n   VEC (deferred_access_check,gc) *access_check;\n-  cp_token *next_token = NULL, *next_token_2 = NULL, *token = NULL;\n+  cp_token *next_token = NULL, *next_token_2 = NULL;\n   bool is_identifier;\n \n   /* If the next token corresponds to a template-id, there is no need\n@@ -10838,7 +10837,6 @@ cp_parser_template_id (cp_parser *parser,\n \n   /* Parse the template-name.  */\n   is_identifier = false;\n-  token = cp_lexer_peek_token (parser->lexer);\n   templ = cp_parser_template_name (parser, template_keyword_p,\n \t\t\t\t   check_dependency_p,\n \t\t\t\t   is_declaration,\n@@ -11515,7 +11513,6 @@ cp_parser_explicit_instantiation (cp_parser* parser)\n   int declares_class_or_enum;\n   cp_decl_specifier_seq decl_specifiers;\n   tree extension_specifier = NULL_TREE;\n-  cp_token *token;\n \n   /* Look for an (optional) storage-class-specifier or\n      function-specifier.  */\n@@ -11538,7 +11535,6 @@ cp_parser_explicit_instantiation (cp_parser* parser)\n      control while processing explicit instantiation directives.  */\n   push_deferring_access_checks (dk_no_check);\n   /* Parse a decl-specifier-seq.  */\n-  token = cp_lexer_peek_token (parser->lexer);\n   cp_parser_decl_specifier_seq (parser,\n \t\t\t\tCP_PARSER_FLAGS_OPTIONAL,\n \t\t\t\t&decl_specifiers,\n@@ -11995,8 +11991,6 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n   /* If the type-specifier was for a built-in type, we're done.  */\n   if (type)\n     {\n-      tree id;\n-\n       /* Record the type.  */\n       if (decl_specs\n \t  && (token->keyword != RID_SIGNED\n@@ -12011,7 +12005,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \tdecl_specs->any_specifiers_p = true;\n \n       /* Consume the token.  */\n-      id = cp_lexer_consume_token (parser->lexer)->u.value;\n+      cp_lexer_consume_token (parser->lexer);\n \n       /* There is no valid C++ program where a non-template type is\n \t followed by a \"<\".  That usually indicates that the user thought\n@@ -13799,7 +13793,6 @@ cp_parser_declarator (cp_parser* parser,\n \t\t      bool* parenthesized_p,\n \t\t      bool member_p)\n {\n-  cp_token *token;\n   cp_declarator *declarator;\n   enum tree_code code;\n   cp_cv_quals cv_quals;\n@@ -13814,9 +13807,6 @@ cp_parser_declarator (cp_parser* parser,\n   if (cp_parser_allow_gnu_extensions_p (parser))\n     attributes = cp_parser_attributes_opt (parser);\n \n-  /* Peek at the next token.  */\n-  token = cp_lexer_peek_token (parser->lexer);\n-\n   /* Check for the ptr-operator production.  */\n   cp_parser_parse_tentatively (parser);\n   /* Parse the ptr-operator.  */\n@@ -15011,7 +15001,6 @@ cp_parser_parameter_declaration (cp_parser *parser,\n \t\t\t\t bool *parenthesized_p)\n {\n   int declares_class_or_enum;\n-  bool greater_than_is_operator_p;\n   cp_decl_specifier_seq decl_specifiers;\n   cp_declarator *declarator;\n   tree default_argument;\n@@ -15026,7 +15015,6 @@ cp_parser_parameter_declaration (cp_parser *parser,\n      template-parameter, the first non-nested `>' is taken as the end\n      of the template parameter-list rather than a greater-than\n      operator.  */\n-  greater_than_is_operator_p = !template_parm_p;\n \n   /* Type definitions may not appear in parameter types.  */\n   saved_message = parser->type_definition_forbidden_message;\n@@ -18216,10 +18204,8 @@ cp_parser_check_declarator_template_parameters (cp_parser* parser,\n       if (declarator->u.id.qualifying_scope)\n \t{\n \t  tree scope;\n-\t  tree member;\n \n \t  scope = declarator->u.id.qualifying_scope;\n-\t  member = declarator->u.id.unqualified_name;\n \n \t  while (scope && CLASS_TYPE_P (scope))\n \t    {\n@@ -23118,7 +23104,6 @@ pragma_lex (tree *value)\n void\n c_parse_file (void)\n {\n-  bool error_occurred;\n   static bool already_called = false;\n \n   if (already_called)\n@@ -23131,7 +23116,7 @@ c_parse_file (void)\n   the_parser = cp_parser_new ();\n   push_deferring_access_checks (flag_access_control\n \t\t\t\t? dk_no_deferred : dk_no_check);\n-  error_occurred = cp_parser_translation_unit (the_parser);\n+  cp_parser_translation_unit (the_parser);\n   the_parser = NULL;\n }\n "}, {"sha": "b843400bf384b3fcc08182b5df4d48460ea1ed03", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=db80e34e82422cfbf8f16d46112c790b9f48373d", "patch": "@@ -8007,7 +8007,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n {\n   tree pattern;\n   tree pack, packs = NULL_TREE, unsubstituted_packs = NULL_TREE;\n-  tree first_arg_pack; int i, len = -1;\n+  int i, len = -1;\n   tree result;\n   int incomplete = 0;\n   bool very_local_specializations = false;\n@@ -8091,10 +8091,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n             incomplete = 1;\n \n           if (len < 0)\n-            {\n-              len = my_len;\n-              first_arg_pack = arg_pack;\n-            }\n+\t    len = my_len;\n           else if (len != my_len)\n             {\n \t      if (incomplete)"}, {"sha": "25306952f982890628ebf51a9aaf3fcd77bc7301", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=db80e34e82422cfbf8f16d46112c790b9f48373d", "patch": "@@ -3021,7 +3021,6 @@ cp_build_function_call_vec (tree function, VEC(tree,gc) **params,\n \t\t\t    tsubst_flags_t complain)\n {\n   tree fntype, fndecl;\n-  tree name = NULL_TREE;\n   int is_method;\n   tree original = function;\n   int nargs;\n@@ -3044,8 +3043,6 @@ cp_build_function_call_vec (tree function, VEC(tree,gc) **params,\n \n   if (TREE_CODE (function) == FUNCTION_DECL)\n     {\n-      name = DECL_NAME (function);\n-\n       mark_used (function);\n       fndecl = function;\n "}, {"sha": "07c2ffca4751d992c0cb512869024a458d7a4464", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db80e34e82422cfbf8f16d46112c790b9f48373d/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=db80e34e82422cfbf8f16d46112c790b9f48373d", "patch": "@@ -655,13 +655,9 @@ check_narrowing (tree type, tree init)\n   tree ftype = unlowered_expr_type (init);\n   bool ok = true;\n   REAL_VALUE_TYPE d;\n-  bool was_decl = false;\n \n   if (DECL_P (init))\n-    {\n-      was_decl = true;\n-      init = decl_constant_value (init);\n-    }\n+    init = decl_constant_value (init);\n \n   if (TREE_CODE (type) == INTEGER_TYPE\n       && TREE_CODE (ftype) == REAL_TYPE)"}]}