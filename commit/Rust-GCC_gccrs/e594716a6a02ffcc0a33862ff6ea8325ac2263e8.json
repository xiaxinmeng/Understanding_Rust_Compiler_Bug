{"sha": "e594716a6a02ffcc0a33862ff6ea8325ac2263e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU5NDcxNmE2YTAyZmZjYzBhMzM4NjJmZjZlYTgzMjVhYzIyNjNlOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-04-02T17:21:55Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-04-02T17:21:55Z"}, "message": "i386.md (*testqi_ext_3): Merge with *testqi_ext_3_rex64 using SWI48 mode attribute.\n\n\t* config/i386/i386.md (*testqi_ext_3): Merge with *testqi_ext_3_rex64\n\tusing SWI48 mode attribute.\n\nFrom-SVN: r197367", "tree": {"sha": "e13843d0ab6c4a04acef4eeda769dc1e9bd83c91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e13843d0ab6c4a04acef4eeda769dc1e9bd83c91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e594716a6a02ffcc0a33862ff6ea8325ac2263e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e594716a6a02ffcc0a33862ff6ea8325ac2263e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e594716a6a02ffcc0a33862ff6ea8325ac2263e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e594716a6a02ffcc0a33862ff6ea8325ac2263e8/comments", "author": null, "committer": null, "parents": [{"sha": "9763b6a76813ffb9b6224afd7b2c5ead90d896b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9763b6a76813ffb9b6224afd7b2c5ead90d896b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9763b6a76813ffb9b6224afd7b2c5ead90d896b9"}], "stats": {"total": 77, "additions": 32, "deletions": 45}, "files": [{"sha": "de855d7a9547505f32d8d21d2d83be55db5b82de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e594716a6a02ffcc0a33862ff6ea8325ac2263e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e594716a6a02ffcc0a33862ff6ea8325ac2263e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e594716a6a02ffcc0a33862ff6ea8325ac2263e8", "patch": "@@ -1,3 +1,8 @@\n+2013-04-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*testqi_ext_3): Merge with *testqi_ext_3_rex64\n+\tusing SWI48 mode attribute.\n+\n 2013-04-02  Wei Mi  <wmi@google.com>\n \n \t* config/i386/i386.c (ix86_rtx_costs): Set proper rtx cost for\n@@ -20,14 +25,14 @@\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/arm/arm-arches.def (armv8-a): Default to cortex-a53.\n-        * config/arm/t-arm (MD_INCLUDES): Depend on cortex-a53.md.\n-        * config/arm/cortex-a53.md: New file.\n-        * config/arm/bpabi.h (BE8_LINK_SPEC): Handle cortex-a53.\n-        * config/arm/arm.md (generic_sched, generic_vfp): Handle cortex-a53.\n-        * config/arm/arm.c (arm_issue_rate): Likewise.\n-        * config/arm/arm-tune.md: Regenerate\n-        * config/arm/arm-tables.opt: Regenerate.\n-        * config/arm/arm-cores.def: Add cortex-a53.\n+\t* config/arm/t-arm (MD_INCLUDES): Depend on cortex-a53.md.\n+\t* config/arm/cortex-a53.md: New file.\n+\t* config/arm/bpabi.h (BE8_LINK_SPEC): Handle cortex-a53.\n+\t* config/arm/arm.md (generic_sched, generic_vfp): Handle cortex-a53.\n+\t* config/arm/arm.c (arm_issue_rate): Likewise.\n+\t* config/arm/arm-tune.md: Regenerate\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm-cores.def: Add cortex-a53.\n \n 2013-04-02  Zhenqiang Chen  <zhenqiang.chen@arm.com>\n \n@@ -205,7 +210,8 @@\n \t(ipa_profile_write_summary): New function.\n \t(ipa_profile_read_summary): New function.\n \t(ipa_profile): Decide on threshold.\n-\t(pass_ipa_profile): Add ipa_profile_write_summary and ipa_profile_read_summary.\n+\t(pass_ipa_profile): Add ipa_profile_write_summary and\n+\tipa_profile_read_summary.\n \t* Makefile.in (ipa.o): Update dependencies.\n \t* lto-streamer.h (LTO_section_ipa_profile): New section.\n \n@@ -497,15 +503,15 @@\n \t(input_gimple_stmt): Input histograms.\n \t(input_bb): Update profile streaming.\n \n-2013-03-28  Kenneth Zadeck <zadeck@naturalbridge.com>\n+2013-03-28  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n    \t* genmodes.c (emit_max_int): New function.\n \t(emit_insn_modes_h): Added call to emit_max_function.\n \t* doc/rtl.texi (MAX_BITSIZE_MODE_ANY_INT, MAX_BITSIZE_MODE_ANY_MODE):\n \tAdded doc.\n \t* machmode.def: Fixed comment.\n \n-2013-03-28  Kenneth Zadeck <zadeck@naturalbridge.com>\n+2013-03-28  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n \t* combine.c (try_combine): Removed useless assert.\n \t* cselib.c (rtx_equal_for_cselib_1): Removed unnecessary parens.\n@@ -636,14 +642,12 @@\n \n 2013-03-27  Walter Lee  <walt@tilera.com>\n \n-\t* config/tilegx/tilegx.h (ASM_OUTPUT_ADDR_VEC_ELT): Delete\n-\textra tab.\n+\t* config/tilegx/tilegx.h (ASM_OUTPUT_ADDR_VEC_ELT): Delete extra tab.\n \t(ASM_OUTPUT_ADDR_DIFF_ELT): Ditto.\n \n 2013-03-27  Walter Lee  <walt@tilera.com>\n \n-\t* config/tilegx/tilegx.md (*sibcall_insn): Fix type atribute\n-\tfor jr.\n+\t* config/tilegx/tilegx.md (*sibcall_insn): Fix type atribute for jr.\n \t(*sibcall_value): Ditto.\n \n 2013-03-27  Walter Lee  <walt@tilera.com>"}, {"sha": "b9ca95b7dd5c033f65b23df8dc7b384fb97588ea", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 13, "deletions": 30, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e594716a6a02ffcc0a33862ff6ea8325ac2263e8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e594716a6a02ffcc0a33862ff6ea8325ac2263e8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e594716a6a02ffcc0a33862ff6ea8325ac2263e8", "patch": "@@ -7134,43 +7134,26 @@\n   [(set_attr \"type\" \"test\")\n    (set_attr \"mode\" \"QI\")])\n \n-(define_insn \"*testqi_ext_3_rex64\"\n-  [(set (reg FLAGS_REG)\n-        (compare (zero_extract:DI\n-\t\t   (match_operand 0 \"nonimmediate_operand\" \"rm\")\n-\t\t   (match_operand:DI 1 \"const_int_operand\")\n-\t\t   (match_operand:DI 2 \"const_int_operand\"))\n-\t\t (const_int 0)))]\n-  \"TARGET_64BIT\n-   && ix86_match_ccmode (insn, CCNOmode)\n-   && INTVAL (operands[1]) > 0\n-   && INTVAL (operands[2]) >= 0\n-   /* Ensure that resulting mask is zero or sign extended operand.  */\n-   && (INTVAL (operands[1]) + INTVAL (operands[2]) <= 32\n-       || (INTVAL (operands[1]) + INTVAL (operands[2]) == 64\n-\t   && INTVAL (operands[1]) > 32))\n-   && (GET_MODE (operands[0]) == SImode\n-       || GET_MODE (operands[0]) == DImode\n-       || GET_MODE (operands[0]) == HImode\n-       || GET_MODE (operands[0]) == QImode)\"\n-  \"#\")\n-\n ;; Combine likes to form bit extractions for some tests.  Humor it.\n (define_insn \"*testqi_ext_3\"\n   [(set (reg FLAGS_REG)\n-        (compare (zero_extract:SI\n+\t(compare (zero_extract:SWI48\n \t\t   (match_operand 0 \"nonimmediate_operand\" \"rm\")\n-\t\t   (match_operand:SI 1 \"const_int_operand\")\n-\t\t   (match_operand:SI 2 \"const_int_operand\"))\n+\t\t   (match_operand:SWI48 1 \"const_int_operand\")\n+\t\t   (match_operand:SWI48 2 \"const_int_operand\"))\n \t\t (const_int 0)))]\n   \"ix86_match_ccmode (insn, CCNOmode)\n-   && INTVAL (operands[1]) > 0\n-   && INTVAL (operands[2]) >= 0\n-   && INTVAL (operands[1]) + INTVAL (operands[2]) <= 32\n-   && (GET_MODE (operands[0]) == SImode\n-       || (TARGET_64BIT && GET_MODE (operands[0]) == DImode)\n+   && ((TARGET_64BIT && GET_MODE (operands[0]) == DImode)\n+       || GET_MODE (operands[0]) == SImode\n        || GET_MODE (operands[0]) == HImode\n-       || GET_MODE (operands[0]) == QImode)\"\n+       || GET_MODE (operands[0]) == QImode)\n+   /* Ensure that resulting mask is zero or sign extended operand.  */\n+   && INTVAL (operands[2]) >= 0\n+   && ((INTVAL (operands[1]) > 0\n+\t&& INTVAL (operands[1]) + INTVAL (operands[2]) <= 32)\n+       || (<MODE>mode == DImode\n+\t   && INTVAL (operands[1]) > 32\n+\t   && INTVAL (operands[1]) + INTVAL (operands[2]) == 64))\"\n   \"#\")\n \n (define_split"}]}