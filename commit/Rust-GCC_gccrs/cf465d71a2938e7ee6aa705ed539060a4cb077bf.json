{"sha": "cf465d71a2938e7ee6aa705ed539060a4cb077bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y0NjVkNzFhMjkzOGU3ZWU2YWE3MDVlZDUzOTA2MGE0Y2IwNzdiZg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-09-05T09:58:21Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-09-05T09:58:21Z"}, "message": "[PATCH AArch64] Add a builtin for rbit(q?)_p8; add intrinsics and tests.\n\ngcc/:\n\n\t* config/aarch64/aarch64-simd.md (aarch64_rbit<mode>): New pattern.\n\t* config/aarch64/aarch64-simd-builtins.def (rbit): New builtin.\n\t* config/aarch64/arm_neon.h (vrbit_s8, vrbit_u8, vrbitq_s8, vrbitq_u8):\n\tReplace temporary asm with call to builtin.\n\t(vrbit_p8, vrbitq_p8): New functions.\n\ngcc/testsuite/:\n\n\t* gcc.target/aarch64/simd/vrbit_1.c: New test.\n\nFrom-SVN: r214943", "tree": {"sha": "6cd5b612c461e56eb8d93e47add14cf8c94ee5b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cd5b612c461e56eb8d93e47add14cf8c94ee5b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf465d71a2938e7ee6aa705ed539060a4cb077bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf465d71a2938e7ee6aa705ed539060a4cb077bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf465d71a2938e7ee6aa705ed539060a4cb077bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf465d71a2938e7ee6aa705ed539060a4cb077bf/comments", "author": null, "committer": null, "parents": [{"sha": "08c13199cf5568393fd46481d99cf1729480548a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c13199cf5568393fd46481d99cf1729480548a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08c13199cf5568393fd46481d99cf1729480548a"}], "stats": {"total": 161, "additions": 117, "deletions": 44}, "files": [{"sha": "9f13d1ee5cbb6bc16f00821d4f220c0f0a5e124c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf465d71a2938e7ee6aa705ed539060a4cb077bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf465d71a2938e7ee6aa705ed539060a4cb077bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf465d71a2938e7ee6aa705ed539060a4cb077bf", "patch": "@@ -1,3 +1,11 @@\n+2014-09-05  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_rbit<mode>): New pattern.\n+\t* config/aarch64/aarch64-simd-builtins.def (rbit): New builtin.\n+\t* config/aarch64/arm_neon.h (vrbit_s8, vrbit_u8, vrbitq_s8, vrbitq_u8):\n+\tReplace temporary asm with call to builtin.\n+\t(vrbit_p8, vrbitq_p8): New functions.\n+\n 2014-09-05  Richard Biener  <rguenther@suse.de>\n \n \t* cfgloop.c (mark_loop_for_removal): New function."}, {"sha": "aa19130b00b76e8e397d470501f13c9dc64ccc74", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf465d71a2938e7ee6aa705ed539060a4cb077bf/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf465d71a2938e7ee6aa705ed539060a4cb077bf/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=cf465d71a2938e7ee6aa705ed539060a4cb077bf", "patch": "@@ -344,6 +344,8 @@\n \n   VAR5 (UNOPU, bswap, 10, v4hi, v8hi, v2si, v4si, v2di)\n \n+  BUILTIN_VB (UNOP, rbit, 0)\n+\n   /* Implemented by\n      aarch64_<PERMUTE:perm_insn><PERMUTE:perm_hilo><mode>.  */\n   BUILTIN_VALL (BINOP, zip1, 0)"}, {"sha": "8ffc75e171ea6dfb59d24ecb2951b7d0486b9c93", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf465d71a2938e7ee6aa705ed539060a4cb077bf/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf465d71a2938e7ee6aa705ed539060a4cb077bf/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=cf465d71a2938e7ee6aa705ed539060a4cb077bf", "patch": "@@ -294,6 +294,15 @@\n   [(set_attr \"type\" \"neon_rev<q>\")]\n )\n \n+(define_insn \"aarch64_rbit<mode>\"\n+  [(set (match_operand:VB 0 \"register_operand\" \"=w\")\n+\t(unspec:VB [(match_operand:VB 1 \"register_operand\" \"w\")]\n+\t\t   UNSPEC_RBIT))]\n+  \"TARGET_SIMD\"\n+  \"rbit\\\\t%0.<Vbtype>, %1.<Vbtype>\"\n+  [(set_attr \"type\" \"neon_rbit\")]\n+)\n+\n (define_insn \"*aarch64_mul3_elt<mode>\"\n  [(set (match_operand:VMUL 0 \"register_operand\" \"=w\")\n     (mult:VMUL"}, {"sha": "86926b9bb97963e6a9b858ffe88612f9aff0e0a9", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 38, "deletions": 44, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf465d71a2938e7ee6aa705ed539060a4cb077bf/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf465d71a2938e7ee6aa705ed539060a4cb077bf/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=cf465d71a2938e7ee6aa705ed539060a4cb077bf", "patch": "@@ -10407,50 +10407,6 @@ vqrdmulhq_n_s32 (int32x4_t a, int32_t b)\n        result;                                                          \\\n      })\n \n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-vrbit_s8 (int8x8_t a)\n-{\n-  int8x8_t result;\n-  __asm__ (\"rbit %0.8b,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-vrbit_u8 (uint8x8_t a)\n-{\n-  uint8x8_t result;\n-  __asm__ (\"rbit %0.8b,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n-vrbitq_s8 (int8x16_t a)\n-{\n-  int8x16_t result;\n-  __asm__ (\"rbit %0.16b,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n-vrbitq_u8 (uint8x16_t a)\n-{\n-  uint8x16_t result;\n-  __asm__ (\"rbit %0.16b,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vrecpe_u32 (uint32x2_t a)\n {\n@@ -20781,6 +20737,44 @@ vqsubd_u64 (uint64_t __a, uint64_t __b)\n   return __builtin_aarch64_uqsubdi_uuu (__a, __b);\n }\n \n+/* vrbit  */\n+\n+__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n+vrbit_p8 (poly8x8_t __a)\n+{\n+  return (poly8x8_t) __builtin_aarch64_rbitv8qi ((int8x8_t) __a);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vrbit_s8 (int8x8_t __a)\n+{\n+  return __builtin_aarch64_rbitv8qi (__a);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+vrbit_u8 (uint8x8_t __a)\n+{\n+  return (uint8x8_t) __builtin_aarch64_rbitv8qi ((int8x8_t) __a);\n+}\n+\n+__extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n+vrbitq_p8 (poly8x16_t __a)\n+{\n+  return (poly8x16_t) __builtin_aarch64_rbitv16qi ((int8x16_t)__a);\n+}\n+\n+__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n+vrbitq_s8 (int8x16_t __a)\n+{\n+  return __builtin_aarch64_rbitv16qi (__a);\n+}\n+\n+__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n+vrbitq_u8 (uint8x16_t __a)\n+{\n+  return (uint8x16_t) __builtin_aarch64_rbitv16qi ((int8x16_t) __a);\n+}\n+\n /* vrecpe  */\n \n __extension__ static __inline float32_t __attribute__ ((__always_inline__))"}, {"sha": "9ec19fa70d749a33bbc405d62da550fc3d1983b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf465d71a2938e7ee6aa705ed539060a4cb077bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf465d71a2938e7ee6aa705ed539060a4cb077bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf465d71a2938e7ee6aa705ed539060a4cb077bf", "patch": "@@ -1,3 +1,7 @@\n+2014-09-05  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vrbit_1.c: New test.\n+\n 2014-09-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/63148"}, {"sha": "77d13d48660e165cf113e3cd9c61d63ff2b4843e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vrbit_1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf465d71a2938e7ee6aa705ed539060a4cb077bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrbit_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf465d71a2938e7ee6aa705ed539060a4cb077bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrbit_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvrbit_1.c?ref=cf465d71a2938e7ee6aa705ed539060a4cb077bf", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+uint64_t in1 = 0x0123456789abcdefULL;\n+uint64_t expected1 = 0x80c4a2e691d5b3f7ULL;\n+\n+#define TEST8(BASETYPE, SUFFIX)\t\t\t\t\t\t\\\n+void test8_##SUFFIX ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  BASETYPE##8x8_t out = vrbit_##SUFFIX (vcreate_##SUFFIX (in1));\t\\\n+  uint64_t res = vget_lane_u64 (vreinterpret_u64_##SUFFIX (out), 0);\t\\\n+  if (res != expected1) abort ();\t\t\t\t\t\\\n+}\n+\n+uint64_t in2 = 0xdeadbeefcafebabeULL;\n+uint64_t expected2 = 0x7bb57df7537f5d7dULL;\n+\n+#define TEST16(BASETYPE, SUFFIX)\t\t\t\t\t\\\n+void test16_##SUFFIX ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  BASETYPE##8x16_t in = vcombine_##SUFFIX (vcreate_##SUFFIX (in1),\t\\\n+\t\t\t\t\t   vcreate_##SUFFIX (in2));\t\\\n+  uint64x2_t res = vreinterpretq_u64_##SUFFIX (vrbitq_##SUFFIX (in));\t\\\n+  uint64_t res1 = vgetq_lane_u64 (res, 0);\t\t\t\t\\\n+  uint64_t res2 = vgetq_lane_u64 (res, 1);\t\t\t\t\\\n+  if (res1 != expected1 || res2 != expected2) abort ();\t\t\t\\\n+}\n+\n+TEST8 (poly, p8);\n+TEST8 (int, s8);\n+TEST8 (uint, u8);\n+\n+TEST16 (poly, p8);\n+TEST16 (int, s8);\n+TEST16 (uint, u8);\n+\n+int\n+main (int argc, char **argv)\n+{\n+  test8_p8 ();\n+  test8_s8 ();\n+  test8_u8 ();\n+  test16_p8 ();\n+  test16_s8 ();\n+  test16_u8 ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"rbit\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.8\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[bB\\]\" 3 } } */\n+/* { dg-final { scan-assembler-times \"rbit\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.16\\[bB\\], ?\\[vV\\]\\[0-9\\]+\\.16\\[bB\\]\" 3 } } */\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}