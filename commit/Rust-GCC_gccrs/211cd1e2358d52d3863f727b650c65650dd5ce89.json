{"sha": "211cd1e2358d52d3863f727b650c65650dd5ce89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjExY2QxZTIzNThkNTJkMzg2M2Y3MjdiNjUwYzY1NjUwZGQ1Y2U4OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-08-01T14:59:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-08-01T14:59:51Z"}, "message": "[04/11] Add a vect_orig_stmt helper function\n\nThis patch just adds a helper function for going from a potential\npattern statement to the original scalar statement.\n\n2018-08-01  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (vect_orig_stmt): New function.\n\t* tree-vect-data-refs.c (vect_preserves_scalar_order_p): Use it.\n\t* tree-vect-loop.c (vect_model_reduction_cost): Likewise.\n\t(vect_create_epilog_for_reduction): Likewise.\n\t(vectorizable_live_operation): Likewise.\n\t* tree-vect-slp.c (vect_find_last_scalar_stmt_in_slp): Likewise.\n\t(vect_detect_hybrid_slp_stmts, vect_schedule_slp): Likewise.\n\t* tree-vect-stmts.c (vectorizable_call): Likewise.\n\t(vectorizable_simd_clone_call, vect_remove_stores): Likewise.\n\nFrom-SVN: r263217", "tree": {"sha": "476a8a7f646d5bbc213770789b6a60427671b4fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/476a8a7f646d5bbc213770789b6a60427671b4fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/211cd1e2358d52d3863f727b650c65650dd5ce89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211cd1e2358d52d3863f727b650c65650dd5ce89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/211cd1e2358d52d3863f727b650c65650dd5ce89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/211cd1e2358d52d3863f727b650c65650dd5ce89/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b0b45e582f31b496ea37a76a20b1f79b25165635", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b45e582f31b496ea37a76a20b1f79b25165635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0b45e582f31b496ea37a76a20b1f79b25165635"}], "stats": {"total": 77, "additions": 37, "deletions": 40}, "files": [{"sha": "decc5cffd4abb7ce963cfda6986b6c50da451bae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211cd1e2358d52d3863f727b650c65650dd5ce89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211cd1e2358d52d3863f727b650c65650dd5ce89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=211cd1e2358d52d3863f727b650c65650dd5ce89", "patch": "@@ -1,3 +1,15 @@\n+2018-08-01  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (vect_orig_stmt): New function.\n+\t* tree-vect-data-refs.c (vect_preserves_scalar_order_p): Use it.\n+\t* tree-vect-loop.c (vect_model_reduction_cost): Likewise.\n+\t(vect_create_epilog_for_reduction): Likewise.\n+\t(vectorizable_live_operation): Likewise.\n+\t* tree-vect-slp.c (vect_find_last_scalar_stmt_in_slp): Likewise.\n+\t(vect_detect_hybrid_slp_stmts, vect_schedule_slp): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_call): Likewise.\n+\t(vectorizable_simd_clone_call, vect_remove_stores): Likewise.\n+\n 2018-08-01  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (vect_transform_stmt): Remove grouped_store"}, {"sha": "1f09bd520cc125cf29d55753822317b799712c20", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211cd1e2358d52d3863f727b650c65650dd5ce89/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211cd1e2358d52d3863f727b650c65650dd5ce89/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=211cd1e2358d52d3863f727b650c65650dd5ce89", "patch": "@@ -214,10 +214,8 @@ vect_preserves_scalar_order_p (dr_vec_info *dr_info_a, dr_vec_info *dr_info_b)\n      (but could happen later) while reads will happen no later than their\n      current position (but could happen earlier).  Reordering is therefore\n      only possible if the first access is a write.  */\n-  if (is_pattern_stmt_p (stmtinfo_a))\n-    stmtinfo_a = STMT_VINFO_RELATED_STMT (stmtinfo_a);\n-  if (is_pattern_stmt_p (stmtinfo_b))\n-    stmtinfo_b = STMT_VINFO_RELATED_STMT (stmtinfo_b);\n+  stmtinfo_a = vect_orig_stmt (stmtinfo_a);\n+  stmtinfo_b = vect_orig_stmt (stmtinfo_b);\n   stmt_vec_info earlier_stmt_info = get_earlier_stmt (stmtinfo_a, stmtinfo_b);\n   return !DR_IS_WRITE (STMT_VINFO_DATA_REF (earlier_stmt_info));\n }"}, {"sha": "b5d1671aa6b1c60256cbd471a91b3cc6a9ab7fa9", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211cd1e2358d52d3863f727b650c65650dd5ce89/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211cd1e2358d52d3863f727b650c65650dd5ce89/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=211cd1e2358d52d3863f727b650c65650dd5ce89", "patch": "@@ -3814,10 +3814,7 @@ vect_model_reduction_cost (stmt_vec_info stmt_info, internal_fn reduc_fn,\n \n   vectype = STMT_VINFO_VECTYPE (stmt_info);\n   mode = TYPE_MODE (vectype);\n-  stmt_vec_info orig_stmt_info = STMT_VINFO_RELATED_STMT (stmt_info);\n-\n-  if (!orig_stmt_info)\n-    orig_stmt_info = stmt_info;\n+  stmt_vec_info orig_stmt_info = vect_orig_stmt (stmt_info);\n \n   code = gimple_assign_rhs_code (orig_stmt_info->stmt);\n \n@@ -4738,13 +4735,8 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs,\n          Otherwise (it is a regular reduction) - the tree-code and scalar-def\n          are taken from STMT.  */\n \n-  stmt_vec_info orig_stmt_info = STMT_VINFO_RELATED_STMT (stmt_info);\n-  if (!orig_stmt_info)\n-    {\n-      /* Regular reduction  */\n-      orig_stmt_info = stmt_info;\n-    }\n-  else\n+  stmt_vec_info orig_stmt_info = vect_orig_stmt (stmt_info);\n+  if (orig_stmt_info != stmt_info)\n     {\n       /* Reduction pattern  */\n       gcc_assert (STMT_VINFO_IN_PATTERN_P (orig_stmt_info));\n@@ -5540,11 +5532,7 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs,\n   if (REDUC_GROUP_FIRST_ELEMENT (stmt_info))\n     {\n       stmt_vec_info dest_stmt_info\n-\t= SLP_TREE_SCALAR_STMTS (slp_node)[group_size - 1];\n-      /* Handle reduction patterns.  */\n-      if (STMT_VINFO_RELATED_STMT (dest_stmt_info))\n-\tdest_stmt_info = STMT_VINFO_RELATED_STMT (dest_stmt_info);\n-\n+\t= vect_orig_stmt (SLP_TREE_SCALAR_STMTS (slp_node)[group_size - 1]);\n       scalar_dest = gimple_assign_lhs (dest_stmt_info->stmt);\n       group_size = 1;\n     }\n@@ -7898,10 +7886,8 @@ vectorizable_live_operation (stmt_vec_info stmt_info,\n       return true;\n     }\n \n-  /* If stmt has a related stmt, then use that for getting the lhs.  */\n-  gimple *stmt = (is_pattern_stmt_p (stmt_info)\n-\t\t  ? STMT_VINFO_RELATED_STMT (stmt_info)->stmt\n-\t\t  : stmt_info->stmt);\n+  /* Use the lhs of the original scalar statement.  */\n+  gimple *stmt = vect_orig_stmt (stmt_info)->stmt;\n \n   lhs = (is_a <gphi *> (stmt)) ? gimple_phi_result (stmt)\n \t: gimple_get_lhs (stmt);"}, {"sha": "f9a83dd77bae9d9c9b0ef30483bab5b44c84aa76", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211cd1e2358d52d3863f727b650c65650dd5ce89/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211cd1e2358d52d3863f727b650c65650dd5ce89/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=211cd1e2358d52d3863f727b650c65650dd5ce89", "patch": "@@ -1848,8 +1848,7 @@ vect_find_last_scalar_stmt_in_slp (slp_tree node)\n \n   for (int i = 0; SLP_TREE_SCALAR_STMTS (node).iterate (i, &stmt_vinfo); i++)\n     {\n-      if (is_pattern_stmt_p (stmt_vinfo))\n-\tstmt_vinfo = STMT_VINFO_RELATED_STMT (stmt_vinfo);\n+      stmt_vinfo = vect_orig_stmt (stmt_vinfo);\n       last = last ? get_later_stmt (stmt_vinfo, last) : stmt_vinfo;\n     }\n \n@@ -2314,10 +2313,7 @@ vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype)\n       gcc_checking_assert (PURE_SLP_STMT (stmt_vinfo));\n       /* If we get a pattern stmt here we have to use the LHS of the\n          original stmt for immediate uses.  */\n-      gimple *stmt = stmt_vinfo->stmt;\n-      if (! STMT_VINFO_IN_PATTERN_P (stmt_vinfo)\n-\t  && STMT_VINFO_RELATED_STMT (stmt_vinfo))\n-\tstmt = STMT_VINFO_RELATED_STMT (stmt_vinfo)->stmt;\n+      gimple *stmt = vect_orig_stmt (stmt_vinfo)->stmt;\n       tree def;\n       if (gimple_code (stmt) == GIMPLE_PHI)\n \tdef = gimple_phi_result (stmt);\n@@ -4087,8 +4083,7 @@ vect_schedule_slp (vec_info *vinfo)\n \t  if (!STMT_VINFO_DATA_REF (store_info))\n \t    break;\n \n-\t  if (is_pattern_stmt_p (store_info))\n-\t    store_info = STMT_VINFO_RELATED_STMT (store_info);\n+\t  store_info = vect_orig_stmt (store_info);\n \t  /* Free the attached stmt_vec_info and remove the stmt.  */\n \t  vinfo->remove_stmt (store_info);\n         }"}, {"sha": "f3a2d80f98cf3c8542d24a0d58a47ec821bd82db", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211cd1e2358d52d3863f727b650c65650dd5ce89/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211cd1e2358d52d3863f727b650c65650dd5ce89/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=211cd1e2358d52d3863f727b650c65650dd5ce89", "patch": "@@ -3628,8 +3628,7 @@ vectorizable_call (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   if (slp_node)\n     return true;\n \n-  if (is_pattern_stmt_p (stmt_info))\n-    stmt_info = STMT_VINFO_RELATED_STMT (stmt_info);\n+  stmt_info = vect_orig_stmt (stmt_info);\n   lhs = gimple_get_lhs (stmt_info->stmt);\n \n   gassign *new_stmt\n@@ -4364,10 +4363,7 @@ vectorizable_simd_clone_call (stmt_vec_info stmt_info,\n   if (scalar_dest)\n     {\n       type = TREE_TYPE (scalar_dest);\n-      if (is_pattern_stmt_p (stmt_info))\n-\tlhs = gimple_call_lhs (STMT_VINFO_RELATED_STMT (stmt_info)->stmt);\n-      else\n-\tlhs = gimple_call_lhs (stmt);\n+      lhs = gimple_call_lhs (vect_orig_stmt (stmt_info)->stmt);\n       new_stmt = gimple_build_assign (lhs, build_zero_cst (type));\n     }\n   else\n@@ -9843,8 +9839,7 @@ vect_remove_stores (stmt_vec_info first_stmt_info)\n   while (next_stmt_info)\n     {\n       stmt_vec_info tmp = DR_GROUP_NEXT_ELEMENT (next_stmt_info);\n-      if (is_pattern_stmt_p (next_stmt_info))\n-\tnext_stmt_info = STMT_VINFO_RELATED_STMT (next_stmt_info);\n+      next_stmt_info = vect_orig_stmt (next_stmt_info);\n       /* Free the attached stmt_vec_info and remove the stmt.  */\n       vinfo->remove_stmt (next_stmt_info);\n       next_stmt_info = tmp;"}, {"sha": "a8403d5299ca9841d8b7816de4e90034c144b9b5", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/211cd1e2358d52d3863f727b650c65650dd5ce89/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/211cd1e2358d52d3863f727b650c65650dd5ce89/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=211cd1e2358d52d3863f727b650c65650dd5ce89", "patch": "@@ -1120,6 +1120,17 @@ is_pattern_stmt_p (stmt_vec_info stmt_info)\n   return stmt_info->pattern_stmt_p;\n }\n \n+/* If STMT_INFO is a pattern statement, return the statement that it\n+   replaces, otherwise return STMT_INFO itself.  */\n+\n+inline stmt_vec_info\n+vect_orig_stmt (stmt_vec_info stmt_info)\n+{\n+  if (is_pattern_stmt_p (stmt_info))\n+    return STMT_VINFO_RELATED_STMT (stmt_info);\n+  return stmt_info;\n+}\n+\n /* Return true if BB is a loop header.  */\n \n static inline bool"}]}