{"sha": "e743d142aebcc694e105de1dcc588ee3e2a003f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc0M2QxNDJhZWJjYzY5NGUxMDVkZTFkY2M1ODhlZTNlMmEwMDNmNg==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2005-05-18T13:57:48Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-05-18T13:57:48Z"}, "message": "f95-lang.c (gfc_init_builtin_functions): Define BUILT_IN_TRUNC and BUILT_IN_TRUNCF instead of BUILT_IN_FLOOR and...\n\n\t* f95-lang.c (gfc_init_builtin_functions): Define BUILT_IN_TRUNC\n\tand BUILT_IN_TRUNCF instead of BUILT_IN_FLOOR and BUILT_IN_FLOORF.\n\t* trans-intrinsic.c (build_fix_expr): Change 'op' argument\n\tto correct enum type.\n\t(gfc_conv_intrinsic_aint): Likewise.  Clarify comment in front of\n\tfunction.  Add default case to switch, deal with FIX_TRUNC_EXPR\n\tinstead of FIX_FLOOR_EXPR.\n\nFrom-SVN: r99900", "tree": {"sha": "346316216ddb9ff4964b58b06b2000f123fcbedd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/346316216ddb9ff4964b58b06b2000f123fcbedd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e743d142aebcc694e105de1dcc588ee3e2a003f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e743d142aebcc694e105de1dcc588ee3e2a003f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e743d142aebcc694e105de1dcc588ee3e2a003f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e743d142aebcc694e105de1dcc588ee3e2a003f6/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33af9c08e1e52c20df5c2b7488628c037d03918a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33af9c08e1e52c20df5c2b7488628c037d03918a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33af9c08e1e52c20df5c2b7488628c037d03918a"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "714024f80231cf3dd52d966b45d915615d5bf82c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e743d142aebcc694e105de1dcc588ee3e2a003f6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e743d142aebcc694e105de1dcc588ee3e2a003f6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e743d142aebcc694e105de1dcc588ee3e2a003f6", "patch": "@@ -1,3 +1,13 @@\n+2005-05-18  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* f95-lang.c (gfc_init_builtin_functions): Define BUILT_IN_TRUNC\n+\tand BUILT_IN_TRUNCF instead of BUILT_IN_FLOOR and BUILT_IN_FLOORF.\n+\t* trans-intrinsic.c (build_fix_expr): Change 'op' argument\n+\tto correct enum type.\n+\t(gfc_conv_intrinsic_aint): Likewise.  Clarify comment in front of\n+\tfunction.  Add default case to switch, deal with FIX_TRUNC_EXPR\n+\tinstead of FIX_FLOOR_EXPR.\n+\n 2005-05-18  Feng Wang  <fengwang@nudt.edu.cn>\n \n \tPR fortran/20954"}, {"sha": "ced6799589d4f839acb375fe01ac0413b8360e62", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e743d142aebcc694e105de1dcc588ee3e2a003f6/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e743d142aebcc694e105de1dcc588ee3e2a003f6/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=e743d142aebcc694e105de1dcc588ee3e2a003f6", "patch": "@@ -790,15 +790,15 @@ gfc_init_builtin_functions (void)\n \n   /* We define these separately as the fortran versions have different\n      semantics (they return an integer type) */\n-  gfc_define_builtin (\"__builtin_floor\", mfunc_double[0], \n-\t\t      BUILT_IN_FLOOR, \"floor\", true);\n-  gfc_define_builtin (\"__builtin_floorf\", mfunc_float[0], \n-\t\t      BUILT_IN_FLOORF, \"floorf\", true);\n   gfc_define_builtin (\"__builtin_round\", mfunc_double[0], \n \t\t      BUILT_IN_ROUND, \"round\", true);\n   gfc_define_builtin (\"__builtin_roundf\", mfunc_float[0], \n \t\t      BUILT_IN_ROUNDF, \"roundf\", true);\n-  \n+  gfc_define_builtin (\"__builtin_trunc\", mfunc_double[0],\n+                      BUILT_IN_TRUNC, \"trunc\", true);\n+  gfc_define_builtin (\"__builtin_truncf\", mfunc_float[0],\n+                      BUILT_IN_TRUNCF, \"truncf\", true);\n+\n   gfc_define_builtin (\"__builtin_cabs\", func_cdouble_double, \n \t\t      BUILT_IN_CABS, \"cabs\", true);\n   gfc_define_builtin (\"__builtin_cabsf\", func_cfloat_float, "}, {"sha": "97f00dc441a15c22fbda0129883b8e69de9dabfb", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e743d142aebcc694e105de1dcc588ee3e2a003f6/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e743d142aebcc694e105de1dcc588ee3e2a003f6/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=e743d142aebcc694e105de1dcc588ee3e2a003f6", "patch": "@@ -277,7 +277,8 @@ build_round_expr (stmtblock_t * pblock, tree arg, tree type)\n    however the RTL expander only actually supports FIX_TRUNC_EXPR.  */\n \n static tree\n-build_fix_expr (stmtblock_t * pblock, tree arg, tree type, int op)\n+build_fix_expr (stmtblock_t * pblock, tree arg, tree type,\n+               enum tree_code op)\n {\n   switch (op)\n     {\n@@ -300,14 +301,15 @@ build_fix_expr (stmtblock_t * pblock, tree arg, tree type, int op)\n \n /* Round a real value using the specified rounding mode.\n    We use a temporary integer of that same kind size as the result.\n-   Values larger than can be represented by this kind are unchanged, as\n-   will not be accurate enough to represent the rounding.\n+   Values larger than those that can be represented by this kind are\n+   unchanged, as thay will not be accurate enough to represent the\n+   rounding.\n     huge = HUGE (KIND (a))\n     aint (a) = ((a > huge) || (a < -huge)) ? a : (real)(int)a\n    */\n \n static void\n-gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, int op)\n+gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, enum tree_code op)\n {\n   tree type;\n   tree itype;\n@@ -337,17 +339,21 @@ gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, int op)\n \t}\n       break;\n \n-    case FIX_FLOOR_EXPR:\n+    case FIX_TRUNC_EXPR:\n       switch (kind)\n \t{\n \tcase 4:\n-\t  n = BUILT_IN_FLOORF;\n+\t  n = BUILT_IN_TRUNCF;\n \t  break;\n \n \tcase 8:\n-\t  n = BUILT_IN_FLOOR;\n+\t  n = BUILT_IN_TRUNC;\n \t  break;\n \t}\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n     }\n \n   /* Evaluate the argument.  */"}]}