{"sha": "680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgwZDVmNjE5MGJmNWM5MGU2MDBmNDdlZThjOWU2MDRkODBiMmY3Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T13:05:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T13:05:41Z"}, "message": "[multiple changes]\n\n2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Is_Null_Record_Type): New predicate\n\tto determine whether a record type is a null record.\n\t* sem_ch3.adb (Analyze_Object_Declaration): If the type is a\n\tnull record and there is no expression in the declaration,\n\tno predicate check applies to the object.\n\n2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): The body of an\n\tinstantiated package should not cause freezing of previous contracts.\n\n2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_dim.adb (Analyze_Dimension): Handle subtype declarations\n\tthat do not come from source.\n\t(Analyze_Dimension_Subtype_Declaration): Allow confirming\n\tdimensions on subtype entity, either inherited from base type\n\tor provided by aspect specification.\n\n2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* s-gearop.ads (Matrix_Vector_Solution, Matrix_Matrix_Solution):\n\tAdd scalar formal object Zero, to allow detection and report\n\twhen the matrix is singular.\n\t* s-gearop.adb (Matrix_Vector_Solution, Matrix_Matrix_Solution):\n\tRaise Constraint_Error if the Forward_Eliminate pass has\n\tdetermined that determinant is Zero.o\n\t* s-ngrear.adb (Solve): Add actual for Zero in corresponding\n\tinstantiations.\n\t* s-ngcoar.adb (Solve): Ditto.\n\nFrom-SVN: r235499", "tree": {"sha": "ced0897ff6a0f85f50870e91078f0df69a7eedf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ced0897ff6a0f85f50870e91078f0df69a7eedf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/comments", "author": null, "committer": null, "parents": [{"sha": "14f3895c40cd3f074ca17823c30a6cbf665836b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f3895c40cd3f074ca17823c30a6cbf665836b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f3895c40cd3f074ca17823c30a6cbf665836b5"}], "stats": {"total": 186, "additions": 134, "deletions": 52}, "files": [{"sha": "0aee0a8f08be9a077e01099ba620fdf88f595e00", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "patch": "@@ -1,3 +1,36 @@\n+2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Is_Null_Record_Type): New predicate\n+\tto determine whether a record type is a null record.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): If the type is a\n+\tnull record and there is no expression in the declaration,\n+\tno predicate check applies to the object.\n+\n+2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): The body of an\n+\tinstantiated package should not cause freezing of previous contracts.\n+\n+2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_dim.adb (Analyze_Dimension): Handle subtype declarations\n+\tthat do not come from source.\n+\t(Analyze_Dimension_Subtype_Declaration): Allow confirming\n+\tdimensions on subtype entity, either inherited from base type\n+\tor provided by aspect specification.\n+\n+2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* s-gearop.ads (Matrix_Vector_Solution, Matrix_Matrix_Solution):\n+\tAdd scalar formal object Zero, to allow detection and report\n+\twhen the matrix is singular.\n+\t* s-gearop.adb (Matrix_Vector_Solution, Matrix_Matrix_Solution):\n+\tRaise Constraint_Error if the Forward_Eliminate pass has\n+\tdetermined that determinant is Zero.o\n+\t* s-ngrear.adb (Solve): Add actual for Zero in corresponding\n+\tinstantiations.\n+\t* s-ngcoar.adb (Solve): Ditto.\n+\n 2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch3.adb: Minor reformatting."}, {"sha": "e9b246574b8ccd88cd2b6aa2ceeefae0d4d1720e", "filename": "gcc/ada/a-ngcoar.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fa-ngcoar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fa-ngcoar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngcoar.adb?ref=680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2006-2012, Free Software Foundation, Inc.       --\n+--            Copyright (C) 2006-2016, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,7 +30,6 @@\n ------------------------------------------------------------------------------\n \n with System.Generic_Array_Operations; use System.Generic_Array_Operations;\n-with Ada.Numerics; use Ada.Numerics;\n \n package body Ada.Numerics.Generic_Complex_Arrays is\n \n@@ -694,11 +693,11 @@ package body Ada.Numerics.Generic_Complex_Arrays is\n       -- Solve --\n       -----------\n \n-      function Solve is\n-         new Matrix_Vector_Solution (Complex, Complex_Vector, Complex_Matrix);\n+      function Solve is new Matrix_Vector_Solution\n+        (Complex, (0.0, 0.0), Complex_Vector, Complex_Matrix);\n \n-      function Solve is\n-         new Matrix_Matrix_Solution (Complex, Complex_Matrix);\n+      function Solve is new Matrix_Matrix_Solution\n+        (Complex, (0.0, 0.0), Complex_Matrix);\n \n       -----------------\n       -- Unit_Matrix --"}, {"sha": "c3b954ab5126c4848436f64fe3a66c58c64c68f8", "filename": "gcc/ada/a-ngrear.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fa-ngrear.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fa-ngrear.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngrear.adb?ref=680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2006-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2006-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -337,10 +337,11 @@ package body Ada.Numerics.Generic_Real_Arrays is\n            Result_Matrix => Real_Matrix,\n            Operation     => \"abs\");\n \n-      function Solve is\n-         new Matrix_Vector_Solution (Real'Base, Real_Vector, Real_Matrix);\n+      function Solve is new\n+        Matrix_Vector_Solution (Real'Base, 0.0, Real_Vector, Real_Matrix);\n \n-      function Solve is new Matrix_Matrix_Solution (Real'Base, Real_Matrix);\n+      function Solve is new\n+        Matrix_Matrix_Solution (Real'Base, 0.0, Real_Matrix);\n \n       function Unit_Matrix is new\n         Generic_Array_Operations.Unit_Matrix"}, {"sha": "b6d6f22d51b22ff5acd74eb51f49e3266de4b591", "filename": "gcc/ada/s-gearop.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fs-gearop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fs-gearop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-gearop.adb?ref=680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 2006-2012, Free Software Foundation, Inc.          --\n+--         Copyright (C) 2006-2016, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,9 +30,7 @@\n ------------------------------------------------------------------------------\n \n with Ada.Numerics; use Ada.Numerics;\n-\n package body System.Generic_Array_Operations is\n-\n    function Check_Unit_Last\n      (Index : Integer;\n       Order : Positive;\n@@ -696,6 +694,11 @@ package body System.Generic_Array_Operations is\n       end loop;\n \n       Forward_Eliminate (MA, MX, Det);\n+\n+      if Det = Zero then\n+         raise Constraint_Error with \"matrix is singular\";\n+      end if;\n+\n       Back_Substitute (MA, MX);\n \n       for J in 0 .. R'Length - 1 loop\n@@ -735,6 +738,11 @@ package body System.Generic_Array_Operations is\n       end loop;\n \n       Forward_Eliminate (MA, MB, Det);\n+\n+      if Det = Zero then\n+         raise Constraint_Error with \"matrix is singular\";\n+      end if;\n+\n       Back_Substitute (MA, MB);\n \n       return MB;"}, {"sha": "7e252eefb25605427adc14efb7d5a5cb6252cb3c", "filename": "gcc/ada/s-gearop.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fs-gearop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fs-gearop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-gearop.ads?ref=680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2006-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2006-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -396,6 +396,7 @@ pragma Pure (Generic_Array_Operations);\n \n    generic\n       type Scalar is private;\n+      Zero : Scalar;\n       type Vector is array (Integer range <>) of Scalar;\n       type Matrix is array (Integer range <>, Integer range <>) of Scalar;\n       with procedure Back_Substitute (M, N : in out Matrix) is <>;\n@@ -411,6 +412,7 @@ pragma Pure (Generic_Array_Operations);\n \n    generic\n       type Scalar is private;\n+      Zero : Scalar;\n       type Matrix is array (Integer range <>, Integer range <>) of Scalar;\n       with procedure Back_Substitute (M, N : in out Matrix) is <>;\n       with procedure Forward_Eliminate"}, {"sha": "c9aa9d6b6318f7def71820823519861c53fd0557", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "patch": "@@ -3835,8 +3835,16 @@ package body Sem_Ch3 is\n             Check_Expression_Against_Static_Predicate (E, T);\n          end if;\n \n-         Insert_After (N,\n-           Make_Predicate_Check (T, New_Occurrence_Of (Id, Loc)));\n+         --  If the type is a null record and there is no explicit initial\n+         --  expression, no predicate check applies.\n+\n+         if No (E) and then Is_Null_Record_Type (T) then\n+            null;\n+\n+         else\n+            Insert_After (N,\n+              Make_Predicate_Check (T, New_Occurrence_Of (Id, Loc)));\n+         end if;\n       end if;\n \n       --  Case of unconstrained type\n@@ -13039,7 +13047,7 @@ package body Sem_Ch3 is\n       procedure Fixup_Bad_Constraint;\n       --  Called after finding a bad constraint, and after having posted an\n       --  appropriate error message. The goal is to leave type Def_Id in as\n-      --  reasonable state as possiblet.\n+      --  reasonable state as possible.\n \n       --------------------------\n       -- Fixup_Bad_Constraint --\n@@ -13112,7 +13120,7 @@ package body Sem_Ch3 is\n         and then Nkind (Parent (S)) = N_Subtype_Declaration\n         and then not Is_Itype (Def_Id)\n       then\n-         --  A little sanity check, emit an error message if the type has\n+         --  A little sanity check: emit an error message if the type has\n          --  discriminants to begin with. Type T may be a regular incomplete\n          --  type or imported via a limited with clause.\n "}, {"sha": "1a8786d7f584ed365c3fc797c76314ee9ec7c61d", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "patch": "@@ -544,35 +544,6 @@ package body Sem_Ch7 is\n    --  Start of processing for Analyze_Package_Body_Helper\n \n    begin\n-      --  A [generic] package body \"freezes\" the contract of the nearest\n-      --  enclosing package body and all other contracts encountered in the\n-      --  same declarative part up to and excluding the package body:\n-\n-      --    package body Nearest_Enclosing_Package\n-      --      with Refined_State => (State => Constit)\n-      --    is\n-      --       Constit : ...;\n-\n-      --       package body Freezes_Enclosing_Package_Body\n-      --         with Refined_State => (State_2 => Constit_2)\n-      --       is\n-      --          Constit_2 : ...;\n-\n-      --          procedure Proc\n-      --            with Refined_Depends => (Input => (Constit, Constit_2)) ...\n-\n-      --  This ensures that any annotations referenced by the contract of a\n-      --  [generic] subprogram body declared within the current package body\n-      --  are available. This form of \"freezing\" is decoupled from the usual\n-      --  Freeze_xxx mechanism because it must also work in the context of\n-      --  generics where normal freezing is disabled.\n-\n-      --  Only bodies coming from source should cause this type of \"freezing\"\n-\n-      if Comes_From_Source (N) then\n-         Analyze_Previous_Contracts (N);\n-      end if;\n-\n       --  Find corresponding package specification, and establish the current\n       --  scope. The visible defining entity for the package is the defining\n       --  occurrence in the spec. On exit from the package body, all body\n@@ -628,6 +599,42 @@ package body Sem_Ch7 is\n          end if;\n       end if;\n \n+      --  A [generic] package body \"freezes\" the contract of the nearest\n+      --  enclosing package body and all other contracts encountered in the\n+      --  same declarative part up to and excluding the package body:\n+\n+      --    package body Nearest_Enclosing_Package\n+      --      with Refined_State => (State => Constit)\n+      --    is\n+      --       Constit : ...;\n+\n+      --       package body Freezes_Enclosing_Package_Body\n+      --         with Refined_State => (State_2 => Constit_2)\n+      --       is\n+      --          Constit_2 : ...;\n+\n+      --          procedure Proc\n+      --            with Refined_Depends => (Input => (Constit, Constit_2)) ...\n+\n+      --  This ensures that any annotations referenced by the contract of a\n+      --  [generic] subprogram body declared within the current package body\n+      --  are available. This form of \"freezing\" is decoupled from the usual\n+      --  Freeze_xxx mechanism because it must also work in the context of\n+      --  generics where normal freezing is disabled.\n+\n+      --  Only bodies coming from source should cause this type of \"freezing\".\n+      --  Instantiated generic bodies are excluded because their processing is\n+      --  performed in a separate compilation pass which lacks enough semantic\n+      --  information with respect to contract analysis. It is safe to suppress\n+      --  the \"freezing\" of contracts in this case because this action already\n+      --  took place at the end of the enclosing declarative part.\n+\n+      if Comes_From_Source (N)\n+        and then not Is_Generic_Instance (Spec_Id)\n+      then\n+         Analyze_Previous_Contracts (N);\n+      end if;\n+\n       --  A package body is Ghost when the corresponding spec is Ghost. Set\n       --  the mode now to ensure that any nodes generated during analysis and\n       --  expansion are properly flagged as ignored Ghost."}, {"sha": "cabb01347fcd1170526686b49468a0de4db05694", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "patch": "@@ -1120,9 +1120,15 @@ package body Sem_Dim is\n    procedure Analyze_Dimension (N : Node_Id) is\n    begin\n       --  Aspect is an Ada 2012 feature. Note that there is no need to check\n-      --  dimensions for nodes that don't come from source.\n+      --  dimensions for nodes that don't come from source, except for subtype\n+      --  declarations where the dimensions are inherited from the base type.\n \n-      if Ada_Version < Ada_2012 or else not Comes_From_Source (N) then\n+      if Ada_Version < Ada_2012 then\n+         return;\n+\n+      elsif not Comes_From_Source (N)\n+        and then Nkind (N) /= N_Subtype_Declaration\n+      then\n          return;\n       end if;\n \n@@ -2232,10 +2238,10 @@ package body Sem_Dim is\n \n          if Exists (Dims_Of_Etyp) then\n \n-            --  If subtype already has a dimension (from Aspect_Dimension),\n-            --  it cannot inherit a dimension from its subtype.\n+            --  If subtype already has a dimension (from Aspect_Dimension), it\n+            --  cannot inherit different dimensions from its subtype.\n \n-            if Exists (Dims_Of_Id) then\n+            if Exists (Dims_Of_Id) and then Dims_Of_Etyp /= Dims_Of_Id then\n                Error_Msg_NE\n                  (\"subtype& already \" & Dimensions_Msg_Of (Id, True), N, Id);\n             else"}, {"sha": "e1b1b507dc59f8b196155976d375c3ab0cf7855a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "patch": "@@ -13110,6 +13110,20 @@ package body Sem_Util is\n       return False;\n    end Is_Nontrivial_Default_Init_Cond_Procedure;\n \n+   -------------------------\n+   -- Is_Null_Record_Type --\n+   -------------------------\n+\n+   function Is_Null_Record_Type (T : Entity_Id) return Boolean is\n+      Decl : constant Node_Id := Parent (T);\n+   begin\n+      return Nkind (Decl) = N_Full_Type_Declaration\n+        and then Nkind (Type_Definition (Decl)) = N_Record_Definition\n+        and then\n+          (No (Component_List (Type_Definition (Decl)))\n+            or else Null_Present (Component_List (Type_Definition (Decl))));\n+   end Is_Null_Record_Type;\n+\n    -------------------------\n    -- Is_Object_Reference --\n    -------------------------"}, {"sha": "fb049ef4551a80ee1928fbc20eee49e45c569651", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/680d5f6190bf5c90e600f47ee8c9e604d80b2f7b/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=680d5f6190bf5c90e600f47ee8c9e604d80b2f7b", "patch": "@@ -1481,6 +1481,10 @@ package Sem_Util is\n    --  assertion expression of pragma Default_Initial_Condition and if it does,\n    --  the encapsulated expression is nontrivial.\n \n+   function Is_Null_Record_Type (T : Entity_Id) return Boolean;\n+   --  Determine whether T is declared with a null record definition or a\n+   --  null component list.\n+\n    function Is_Object_Reference (N : Node_Id) return Boolean;\n    --  Determines if the tree referenced by N represents an object. Both\n    --  variable and constant objects return True (compare Is_Variable)."}]}