{"sha": "bcda12f4f4110d1376d822112c9c00d6287471a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNkYTEyZjRmNDExMGQxMzc2ZDgyMjExMmM5YzAwZDYyODc0NzFhNg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-07-10T11:38:18Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-07-10T11:38:18Z"}, "message": "ggc.h, [...]: Use `rtx' instead of `struct rtx_def *'...\n\n2003-07-10  Steven Bosscher  <steven@gcc.gnu.org>\n\n\t* ggc.h, integrate.h, langhooks.h, real.h, toplev.h:\n\tUse `rtx' instead of `struct rtx_def *', `rtvec' instead of\n\t`struct rtvec_dev *' and `tree' instead of `union tree_node *'\n\tin function prototypes.\n\t* varray.h (const_equiv_data): Likewise for fields.\n\t(varray_data_tag): Likewise.\n\t* output.h: Likewise, and don't forward declare union tree_node.\n\t* emit_rtl.c (const_int_htab_hash): Cast to `rtx' instead of\n\t`struct rtxvec *'.\n\t* print-tree.c (print_node): Likewise.\n\t* reload1.c: Don't redeclare current_function_decl, tree.h is\n\tincluded in this file.\n\nFrom-SVN: r69183", "tree": {"sha": "384851f1df2b0ff1a6f75866077508884ffa365a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/384851f1df2b0ff1a6f75866077508884ffa365a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcda12f4f4110d1376d822112c9c00d6287471a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcda12f4f4110d1376d822112c9c00d6287471a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcda12f4f4110d1376d822112c9c00d6287471a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcda12f4f4110d1376d822112c9c00d6287471a6/comments", "author": null, "committer": null, "parents": [{"sha": "3dbb446ebd77a551c63b958faca007983ee33231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbb446ebd77a551c63b958faca007983ee33231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dbb446ebd77a551c63b958faca007983ee33231"}], "stats": {"total": 178, "additions": 74, "deletions": 104}, "files": [{"sha": "6a1f7c570927f5aa950b28377c8d87dc2f6ee0fe", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=bcda12f4f4110d1376d822112c9c00d6287471a6", "patch": "@@ -206,7 +206,7 @@ int split_branch_probability = -1;\n static hashval_t\n const_int_htab_hash (const void *x)\n {\n-  return (hashval_t) INTVAL ((struct rtx_def *) x);\n+  return (hashval_t) INTVAL ((rtx) x);\n }\n \n /* Returns nonzero if the value represented by X (which is really a"}, {"sha": "2c56a3c525efdab43410565466f31f1c54a05aaa", "filename": "gcc/ggc.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=bcda12f4f4110d1376d822112c9c00d6287471a6", "patch": "@@ -197,14 +197,14 @@ extern void *ggc_realloc (void *, size_t);\n extern void *ggc_calloc (size_t, size_t);\n \n #define ggc_alloc_rtx(NSLOTS)\t\t\t\t\t\t  \\\n-  ((struct rtx_def *) ggc_alloc (sizeof (struct rtx_def)\t\t  \\\n-\t\t\t\t + ((NSLOTS) - 1) * sizeof (rtunion)))\n+  ((rtx) ggc_alloc (sizeof (struct rtx_def)\t\t\t\t  \\\n+\t\t    + ((NSLOTS) - 1) * sizeof (rtunion)))\n \n #define ggc_alloc_rtvec(NELT)\t\t\t\t\t\t  \\\n-  ((struct rtvec_def *) ggc_alloc (sizeof (struct rtvec_def)\t\t  \\\n-\t\t\t\t   + ((NELT) - 1) * sizeof (rtx)))\n+  ((rtvec) ggc_alloc (sizeof (struct rtvec_def)\t\t\t\t  \\\n+\t\t      + ((NELT) - 1) * sizeof (rtx)))\n \n-#define ggc_alloc_tree(LENGTH) ((union tree_node *) ggc_alloc (LENGTH))\n+#define ggc_alloc_tree(LENGTH) ((tree) ggc_alloc (LENGTH))\n \n #define htab_create_ggc(SIZE, HASH, EQ, DEL) \\\n   htab_create_alloc (SIZE, HASH, EQ, DEL, ggc_calloc, NULL)"}, {"sha": "94bf2e738d4791b1f50f91240a9a0affbf98135a", "filename": "gcc/integrate.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Fintegrate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Fintegrate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.h?ref=bcda12f4f4110d1376d822112c9c00d6287471a6", "patch": "@@ -40,7 +40,7 @@ struct inline_remap\n      copy_rtx_and_substitute.  */\n   int integrating;\n   /* Definition of function be inlined.  */\n-  union tree_node *fndecl;\n+  tree fndecl;\n   /* Place to put insns needed at start of function.  */\n   rtx insns_at_start;\n   /* Mapping from old BLOCKs to new BLOCKs.  */\n@@ -150,14 +150,12 @@ extern void allocate_initial_values (rtx *);\n \n /* Copy a declaration when one function is substituted inline into\n    another.  */\n-extern union tree_node *copy_decl_for_inlining (union tree_node *,\n-\t\t\t\t\t\tunion tree_node *,\n-\t\t\t\t\t\tunion tree_node *);\n+extern tree copy_decl_for_inlining (tree, tree, tree);\n \n /* Check whether there's any attribute in a function declaration that\n    makes the function uninlinable.  Returns false if it finds any,\n    true otherwise.  */\n-extern bool function_attribute_inlinable_p (union tree_node *);\n+extern bool function_attribute_inlinable_p (tree);\n \n extern void try_constants (rtx, struct inline_remap *);\n "}, {"sha": "398ad55c8027323facff290a849b300a5bde554d", "filename": "gcc/langhooks.h", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=bcda12f4f4110d1376d822112c9c00d6287471a6", "patch": "@@ -33,36 +33,31 @@ typedef void (*lang_print_tree_hook) (FILE *, tree, int indent);\n \n struct lang_hooks_for_tree_inlining\n {\n-  union tree_node *(*walk_subtrees) (union tree_node **, int *,\n-\t\t\t\t     union tree_node *(*)\n-\t\t\t\t     (union tree_node **, int *, void *),\n-\t\t\t\t     void *, void *);\n-  int (*cannot_inline_tree_fn) (union tree_node **);\n-  int (*disregard_inline_limits) (union tree_node *);\n-  union tree_node *(*add_pending_fn_decls) (void *, union tree_node *);\n-  int (*tree_chain_matters_p) (union tree_node *);\n-  int (*auto_var_in_fn_p) (union tree_node *, union tree_node *);\n-  union tree_node *(*copy_res_decl_for_inlining) (union tree_node *,\n-\t\t\t\t\t\t  union tree_node *,\n-\t\t\t\t\t\t  union tree_node *,\n-\t\t\t\t\t\t  void *, int *, tree);\n-  int (*anon_aggr_type_p) (union tree_node *);\n-  bool (*var_mod_type_p) (union tree_node *);\n-  int (*start_inlining) (union tree_node *);\n-  void (*end_inlining) (union tree_node *);\n-  union tree_node *(*convert_parm_for_inlining) (union tree_node *,\n-\t\t\t\t\t\t union tree_node *,\n-\t\t\t\t\t\t union tree_node *);\n-  int (*estimate_num_insns) (union tree_node *);\n+  tree (*walk_subtrees) (tree *, int *,\n+\t\t\t tree (*) (tree *, int *, void *),\n+\t\t\t void *, void *);\n+  int (*cannot_inline_tree_fn) (tree *);\n+  int (*disregard_inline_limits) (tree);\n+  tree (*add_pending_fn_decls) (void *, tree);\n+  int (*tree_chain_matters_p) (tree);\n+  int (*auto_var_in_fn_p) (tree, tree);\n+  tree (*copy_res_decl_for_inlining) (tree, tree, tree,\n+\t\t\t\t      void *, int *, tree);\n+  int (*anon_aggr_type_p) (tree);\n+  bool (*var_mod_type_p) (tree);\n+  int (*start_inlining) (tree);\n+  void (*end_inlining) (tree);\n+  tree (*convert_parm_for_inlining) (tree, tree, tree);\n+  int (*estimate_num_insns) (tree);\n };\n \n struct lang_hooks_for_callgraph\n {\n   /* Function passed as argument is needed and will be compiled.\n      Lower the representation so the calls are explicit.  */\n-  void (*lower_function) (union tree_node *);\n+  void (*lower_function) (tree);\n   /* Produce RTL for function passed as argument.  */\n-  void (*expand_function) (union tree_node *);\n+  void (*expand_function) (tree);\n };\n \n /* Lang hooks for management of language-specific data or status"}, {"sha": "fc674502765c3d3735c1e382dced6890076f1a91", "filename": "gcc/output.h", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=bcda12f4f4110d1376d822112c9c00d6287471a6", "patch": "@@ -422,10 +422,10 @@ extern FILE *rtl_dump_file;\n #endif\n \n /* Nonnull if the insn currently being emitted was a COND_EXEC pattern.  */\n-extern struct rtx_def *current_insn_predicate;\n+extern rtx current_insn_predicate;\n \n /* Last insn processed by final_scan_insn.  */\n-extern struct rtx_def *current_output_insn;\n+extern rtx current_output_insn;\n \n /* Nonzero while outputting an `asm' with operands.\n    This means that inconsistencies are the user's fault, so don't abort.\n@@ -473,25 +473,20 @@ extern unsigned int get_named_section_flags (const char *);\n extern bool set_named_section_flags (const char *, unsigned int);\n extern void named_section_flags (const char *, unsigned int);\n extern bool named_section_first_declaration (const char *);\n-\n-union tree_node;\n-extern unsigned int default_section_type_flags (union tree_node *,\n-\t\t\t\t\t\tconst char *, int);\n-extern unsigned int default_section_type_flags_1 (union tree_node *,\n-\t\t\t\t\t\t  const char *, int, int);\n+extern unsigned int default_section_type_flags (tree, const char *, int);\n+extern unsigned int default_section_type_flags_1 (tree, const char *, int, int);\n \n extern void default_no_named_section (const char *, unsigned int);\n extern void default_elf_asm_named_section (const char *, unsigned int);\n extern void default_coff_asm_named_section (const char *, unsigned int);\n extern void default_pe_asm_named_section (const char *, unsigned int);\n \n-extern void default_stabs_asm_out_destructor (struct rtx_def *, int);\n-extern void default_named_section_asm_out_destructor (struct rtx_def *, int);\n-extern void default_dtor_section_asm_out_destructor (struct rtx_def *, int);\n-extern void default_stabs_asm_out_constructor (struct rtx_def *, int);\n-extern void default_named_section_asm_out_constructor (struct rtx_def *,\n-\t\t\t\t\t\t       int);\n-extern void default_ctor_section_asm_out_constructor (struct rtx_def *, int);\n+extern void default_stabs_asm_out_destructor (rtx, int);\n+extern void default_named_section_asm_out_destructor (rtx, int);\n+extern void default_dtor_section_asm_out_destructor (rtx, int);\n+extern void default_stabs_asm_out_constructor (rtx, int);\n+extern void default_named_section_asm_out_constructor (rtx, int);\n+extern void default_ctor_section_asm_out_constructor (rtx, int);\n \n extern void default_select_section (tree, int, unsigned HOST_WIDE_INT);\n extern void default_elf_select_section (tree, int, unsigned HOST_WIDE_INT);\n@@ -514,8 +509,8 @@ extern void file_end_indicate_exec_stack (void);\n extern bool default_valid_pointer_mode (enum machine_mode);\n \n /* Emit data for vtable gc for GNU binutils.  */\n-extern void assemble_vtable_entry (struct rtx_def *, HOST_WIDE_INT);\n-extern void assemble_vtable_inherit (struct rtx_def *, struct rtx_def *);\n+extern void assemble_vtable_entry (rtx, HOST_WIDE_INT);\n+extern void assemble_vtable_inherit (rtx, rtx);\n \n extern int default_address_cost (rtx);\n "}, {"sha": "6d56d7e62fb89c3b1201bc818c072b40e5e959e3", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=bcda12f4f4110d1376d822112c9c00d6287471a6", "patch": "@@ -599,7 +599,7 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t      indent_to (file, indent + 4);\n \t      fprintf (file, \"rtl %d \", i);\n \t      if (TREE_OPERAND (node, i))\n-\t\tprint_rtl (file, (struct rtx_def *) TREE_OPERAND (node, i));\n+\t\tprint_rtl (file, (rtx) TREE_OPERAND (node, i));\n \t      else\n \t\tfprintf (file, \"(nil)\");\n \t      fprintf (file, \"\\n\");"}, {"sha": "dbce7bb54f40e4ca6a82009568390e891cc790b2", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=bcda12f4f4110d1376d822112c9c00d6287471a6", "patch": "@@ -333,7 +333,7 @@ extern REAL_VALUE_TYPE dconsthalf;\n \n /* Function to return a real value (not a tree node)\n    from a given integer constant.  */\n-REAL_VALUE_TYPE real_value_from_int_cst (union tree_node *, union tree_node *);\n+REAL_VALUE_TYPE real_value_from_int_cst (tree, tree);\n \n /* Given a CONST_DOUBLE in FROM, store into TO the value it represents.  */\n #define REAL_VALUE_FROM_CONST_DOUBLE(to, from) \\"}, {"sha": "2e152de2d28c67396b4a75ec5e2ef2f8b57658ea", "filename": "gcc/reload1.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=bcda12f4f4110d1376d822112c9c00d6287471a6", "patch": "@@ -281,12 +281,6 @@ static char *reload_insn_firstobj;\n    examine.  */\n struct insn_chain *reload_insn_chain;\n \n-#ifdef TREE_CODE\n-extern tree current_function_decl;\n-#else\n-extern union tree_node *current_function_decl;\n-#endif\n-\n /* List of all insns needing reloads.  */\n static struct insn_chain *insns_need_reload;\n \f"}, {"sha": "a36f9eb16705a04fb85f05597410d6c0eea71612", "filename": "gcc/toplev.h", "status": "modified", "additions": 29, "deletions": 41, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=bcda12f4f4110d1376d822112c9c00d6287471a6", "patch": "@@ -26,19 +26,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define skip_leading_substring(whole,  part) \\\n    (strncmp (whole, part, strlen (part)) ? NULL : whole + strlen (part))\n \n-extern int toplev_main\t\t\t(unsigned int, const char **);\n-extern int read_integral_parameter\t(const char *, const char *,\n-\t\t\t\t\t const int);\n-extern void strip_off_ending\t\t(char *, int);\n-extern const char *trim_filename\t(const char *);\n-extern void _fatal_insn_not_found\t(struct rtx_def *,\n-  \t\t\t\t\t const char *, int,\n-\t\t\t\t\t const char *)\n+extern int toplev_main (unsigned int, const char **);\n+extern int read_integral_parameter (const char *, const char *, const int);\n+extern void strip_off_ending (char *, int);\n+extern const char *trim_filename (const char *);\n+extern void _fatal_insn_not_found (rtx, const char *, int, const char *)\n      ATTRIBUTE_NORETURN;\n-extern void _fatal_insn\t\t\t(const char *,\n-\t\t\t\t\t struct rtx_def *,\n-\t\t\t\t\t const char *, int,\n-\t\t\t\t\t const char *)\n+extern void _fatal_insn (const char *, rtx, const char *, int, const char *)\n      ATTRIBUTE_NORETURN;\n \n #define fatal_insn(msgid, insn) \\\n@@ -59,35 +53,29 @@ extern void _fatal_insn\t\t\t(const char *,\n #else\n #define ATTRIBUTE_GCC_DIAG(m, n) ATTRIBUTE_NONNULL(m)\n #endif\n-extern void internal_error\t\t(const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n+extern void internal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n-extern void warning\t\t\t(const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n-extern void error\t\t\t(const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n-extern void fatal_error\t\t\t(const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n+extern void warning (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void fatal_error (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2)\n      ATTRIBUTE_NORETURN;\n-extern void pedwarn\t\t\t(const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n-extern void sorry\t\t\t(const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n-extern void inform                      (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n-\n-extern void rest_of_decl_compilation\t(union tree_node *,\n-\t\t\t\t\t const char *, int, int);\n-extern void rest_of_type_compilation\t(union tree_node *, int);\n-extern void rest_of_compilation\t\t(union tree_node *);\n-\n-extern void pedwarn_with_decl\t\t(union tree_node *,\n-\t\t\t\t\t const char *, ...);\n-extern void warning_with_decl\t\t(union tree_node *,\n-\t\t\t\t\t const char *, ...);\n-extern void error_with_decl\t\t(union tree_node *,\n-\t\t\t\t\t const char *, ...);\n-\n-extern void announce_function\t\t(union tree_node *);\n-\n-extern void error_for_asm\t\t(struct rtx_def *,\n-\t\t\t\t\t const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern void warning_for_asm\t\t(struct rtx_def *,\n-\t\t\t\t\t const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n-extern void warn_deprecated_use\t\t(union tree_node *);\n+extern void pedwarn (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void sorry (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+extern void inform (const char *, ...) ATTRIBUTE_GCC_DIAG(1,2);\n+\n+extern void rest_of_decl_compilation (tree, const char *, int, int);\n+extern void rest_of_type_compilation (tree, int);\n+extern void rest_of_compilation (tree);\n+\n+extern void pedwarn_with_decl (tree, const char *, ...);\n+extern void warning_with_decl (tree, const char *, ...);\n+extern void error_with_decl (tree, const char *, ...);\n+\n+extern void announce_function (tree);\n+\n+extern void error_for_asm (rtx, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern void warning_for_asm (rtx, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);\n+extern void warn_deprecated_use (tree);\n \n #ifdef BUFSIZ\n extern void output_quoted_string\t(FILE *, const char *);\n@@ -101,8 +89,8 @@ extern void fnotice\t\t\t(FILE *, const char *, ...)\n      ATTRIBUTE_PRINTF_2;\n #endif\n \n-extern int wrapup_global_declarations   (union tree_node **, int);\n-extern void check_global_declarations   (union tree_node **, int);\n+extern int wrapup_global_declarations (tree *, int);\n+extern void check_global_declarations (tree *, int);\n \n /* A unique local time stamp, might be zero if none is available.  */\n extern unsigned local_tick;"}, {"sha": "7cb9ff09855c6c16a736e4f5864132789fae4b93", "filename": "gcc/varray.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcda12f4f4110d1376d822112c9c00d6287471a6/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=bcda12f4f4110d1376d822112c9c00d6287471a6", "patch": "@@ -50,7 +50,7 @@ struct const_equiv_data GTY(()) {\n      pseudos that contain pointers into the replacement area allocated for\n      this inline instance.  These pseudos are then marked as being equivalent\n      to the appropriate address and substituted if valid.  */\n-  struct rtx_def *rtx;\n+  rtx rtx;\n \n   /* Record the valid age for each entry.  The entry is invalid if its\n      age is less than const_age.  */\n@@ -110,11 +110,11 @@ typedef union varray_data_tag GTY (()) {\n \t\t\t\ttag (\"VARRAY_DATA_GENERIC\")))\tgeneric[1];\n   char\t\t\t *GTY ((length (\"%0.num_elements\"),\n \t\t\t\ttag (\"VARRAY_DATA_CPTR\")))\tcptr[1];\n-  struct rtx_def\t *GTY ((length (\"%0.num_elements\"),\n+  rtx\t\t\t  GTY ((length (\"%0.num_elements\"),\n \t\t\t\ttag (\"VARRAY_DATA_RTX\")))\trtx[1];\n-  struct rtvec_def\t *GTY ((length (\"%0.num_elements\"),\n+  rtvec\t\t\t  GTY ((length (\"%0.num_elements\"),\n \t\t\t\ttag (\"VARRAY_DATA_RTVEC\")))\trtvec[1];\n-  union tree_node\t *GTY ((length (\"%0.num_elements\"),\n+  tree\t\t\t  GTY ((length (\"%0.num_elements\"),\n \t\t\t\ttag (\"VARRAY_DATA_TREE\")))\ttree[1];\n   struct bitmap_head_def *GTY ((length (\"%0.num_elements\"),\n \t\t\t\ttag (\"VARRAY_DATA_BITMAP\")))\tbitmap[1];"}]}