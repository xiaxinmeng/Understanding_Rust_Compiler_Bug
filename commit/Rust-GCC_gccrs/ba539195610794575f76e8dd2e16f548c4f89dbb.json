{"sha": "ba539195610794575f76e8dd2e16f548c4f89dbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE1MzkxOTU2MTA3OTQ1NzVmNzZlOGRkMmUxNmY1NDhjNGY4OWRiYg==", "commit": {"author": {"name": "James Norris", "email": "jnorris@codesourcery.com", "date": "2016-02-16T15:29:04Z"}, "committer": {"name": "James Norris", "email": "jnorris@gcc.gnu.org", "date": "2016-02-16T15:29:04Z"}, "message": "re PR c/64748 (OpenACC: \"is not a variable\" error with deviceptr())\n\n\tPR c/64748\n\n\tgcc/c/\n\t* c-parser.c (c_parser_oacc_data_clause_deviceptr): Allow parms.\n\n\tgcc/cp/\n\t* parser.c (cp_parser_oacc_data_clause_deviceptr): Remove checking.\n\t* semantics.c (finish_omp_clauses): Add deviceptr checking.\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/deviceptr-1.c: Add tests.\n\t* g++.dg/goacc/deviceptr-1.c: New file.\n\nFrom-SVN: r233458", "tree": {"sha": "ed6777959d63b9ec1c9b695fcc1d2726804b56d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed6777959d63b9ec1c9b695fcc1d2726804b56d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba539195610794575f76e8dd2e16f548c4f89dbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba539195610794575f76e8dd2e16f548c4f89dbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba539195610794575f76e8dd2e16f548c4f89dbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba539195610794575f76e8dd2e16f548c4f89dbb/comments", "author": null, "committer": null, "parents": [{"sha": "2a2b8f64889632aed99c358fbfddb10ab8774242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2b8f64889632aed99c358fbfddb10ab8774242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2b8f64889632aed99c358fbfddb10ab8774242"}], "stats": {"total": 91, "additions": 76, "deletions": 15}, "files": [{"sha": "b51957ee87e3df652d4787db09af61a1ad8a2afe", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=ba539195610794575f76e8dd2e16f548c4f89dbb", "patch": "@@ -1,3 +1,8 @@\n+2016-02-16  James Norris  <jnorris@codesourcery.com>\n+\n+\tPR c/64748\n+\t* c-parser.c (c_parser_oacc_data_clause_deviceptr): Allow parms.\n+\n 2016-02-12  Bernd Schmidt  <bschmidt@redhat.com>\n \n \t* c-decl.c (build_null_declspecs): Zero the entire struct."}, {"sha": "23853be205fc045adbb50019ffb7f35f31121340", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=ba539195610794575f76e8dd2e16f548c4f89dbb", "patch": "@@ -10766,7 +10766,7 @@ c_parser_oacc_data_clause_deviceptr (c_parser *parser, tree list)\n \t c_parser_omp_var_list_parens() should construct a list of\n \t locations to go along with the var list.  */\n \n-      if (!VAR_P (v))\n+      if (!VAR_P (v) && TREE_CODE (v) != PARM_DECL)\n \terror_at (loc, \"%qD is not a variable\", v);\n       else if (TREE_TYPE (v) == error_mark_node)\n \t;"}, {"sha": "743e059956a60c6c4a365381b6582d6837d13849", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ba539195610794575f76e8dd2e16f548c4f89dbb", "patch": "@@ -1,3 +1,8 @@\n+2016-02-16  James Norris  <jnorris@codesourcery.com>\n+\n+\t* parser.c (cp_parser_oacc_data_clause_deviceptr): Remove checking.\n+\t* semantics.c (finish_omp_clauses): Add deviceptr checking.\n+\n 2016-02-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/69658"}, {"sha": "b8d823787eca4b0c210c36d6f9feb027e0e31a10", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ba539195610794575f76e8dd2e16f548c4f89dbb", "patch": "@@ -30105,20 +30105,6 @@ cp_parser_oacc_data_clause_deviceptr (cp_parser *parser, tree list)\n   for (t = vars; t; t = TREE_CHAIN (t))\n     {\n       tree v = TREE_PURPOSE (t);\n-\n-      /* FIXME diagnostics: Ideally we should keep individual\n-\t locations for all the variables in the var list to make the\n-\t following errors more precise.  Perhaps\n-\t c_parser_omp_var_list_parens should construct a list of\n-\t locations to go along with the var list.  */\n-\n-      if (!VAR_P (v))\n-\terror_at (loc, \"%qD is not a variable\", v);\n-      else if (TREE_TYPE (v) == error_mark_node)\n-\t;\n-      else if (!POINTER_TYPE_P (TREE_TYPE (v)))\n-\terror_at (loc, \"%qD is not a pointer variable\", v);\n-\n       tree u = build_omp_clause (loc, OMP_CLAUSE_MAP);\n       OMP_CLAUSE_SET_MAP_KIND (u, GOMP_MAP_FORCE_DEVICEPTR);\n       OMP_CLAUSE_DECL (u) = v;"}, {"sha": "70a7aa5bdf517bb32918ad198189f09bd0b8f9ee", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ba539195610794575f76e8dd2e16f548c4f89dbb", "patch": "@@ -6634,6 +6634,14 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd)\n \t\t\tomp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n \t      remove = true;\n \t    }\n+\t  else if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n+\t\t   && OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_FORCE_DEVICEPTR\n+\t\t   && !type_dependent_expression_p (t)\n+\t\t   && !POINTER_TYPE_P (TREE_TYPE (t)))\n+\t    {\n+\t      error (\"%qD is not a pointer variable\", t);\n+\t      remove = true;\n+\t    }\n \t  else if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_MAP\n \t\t   && OMP_CLAUSE_MAP_KIND (c) == GOMP_MAP_FIRSTPRIVATE_POINTER)\n \t    {"}, {"sha": "e78c3c1b5ae3808f676659aefbebca0a138feb89", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba539195610794575f76e8dd2e16f548c4f89dbb", "patch": "@@ -1,3 +1,8 @@\n+2016-02-16  James Norris  <jnorris@codesourcery.com>\n+\n+\t* c-c++-common/goacc/deviceptr-1.c: Add tests.\n+\t* g++.dg/goacc/deviceptr-1.c: New file.\n+\n 2016-02-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/69820"}, {"sha": "08ddb1072ff8e4b6c8c966cf5682309e16964928", "filename": "gcc/testsuite/c-c++-common/goacc/deviceptr-1.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeviceptr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeviceptr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeviceptr-1.c?ref=ba539195610794575f76e8dd2e16f548c4f89dbb", "patch": "@@ -84,3 +84,17 @@ fun4 (void)\n #pragma acc parallel deviceptr(s2_p)\n   s2_p = 0;\n }\n+\n+void\n+func5 (float *fp)\n+{\n+#pragma acc data deviceptr (fp)\n+  ;\n+}\n+\n+void\n+func6 (float fp)\n+{\n+#pragma acc data deviceptr (fp)\t/* { dg-error \"is not a pointer variable\" } */\n+  ;\n+}"}, {"sha": "d6d0483129b3955eb303e17e9e3ee49dc2bab995", "filename": "gcc/testsuite/g++.dg/goacc/deviceptr-1.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fdeviceptr-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba539195610794575f76e8dd2e16f548c4f89dbb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fdeviceptr-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Fdeviceptr-1.C?ref=ba539195610794575f76e8dd2e16f548c4f89dbb", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+\n+template <typename P>\n+void\n+func1 (P p)\n+{\n+#pragma acc data deviceptr (p)// { dg-bogus \"is not a pointer\" }\n+  ;\n+}\n+\n+void\n+func2 (int *p)\n+{\n+  func1 (p);\n+}\n+\n+template <typename P>\n+void\n+func3 (P p)\n+{\n+#pragma acc data deviceptr (p)// { dg-error \"is not a pointer\" }\n+  ;\n+}\n+void\n+func4 (int p)\n+{\n+  func3 (p);\n+}\n+\n+template <int N>\n+void\n+func5 (int *p, int q)\n+{\n+#pragma acc data deviceptr (p)// { dg-bogus \"is not a pointer\" }\n+  ;\n+#pragma acc data deviceptr (q)// { dg-error \"is not a pointer\" }\n+  ;\n+}"}]}