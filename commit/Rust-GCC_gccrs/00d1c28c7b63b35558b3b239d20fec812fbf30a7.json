{"sha": "00d1c28c7b63b35558b3b239d20fec812fbf30a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkMWMyOGM3YjYzYjM1NTU4YjNiMjM5ZDIwZmVjODEyZmJmMzBhNw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-12-15T15:39:40Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-12-15T15:39:40Z"}, "message": "This patch adds the new ISA data structures.\n\nThis patch adds the new ISA data structures.  The idea is to use an\nsbitmap for carrying these around internally.  We don't make much use\nof this yet, but will increasingly migrate over to this in the\nfollowing patches.  All cores and architectures currently have both\nold and new encodings for now.\n\nFor simplicity and clarity we introduce internally the concept of\nARMv7ve.  It doesn't change any visible behaviour.\n\nThere's also a bit of tidying up of the various supported cores,\nsorting them by profile.\n\n\t* arm-isa.h: New file.\n\t* arm-protos.h: Include it.\n\t* arm-arches.def: Add new ISA field to all entries.  Drop bogus\n\tarmv8.1-a+crc architecture.\n\t* arm-cores.def: Similarly.  Group ARMv8 cores by profile.\n\t* arm-opts.h (enum processor_type): Adjust for new field.\n\t* arm.c (struct processors): New field 'isa_bits'.\n\t(all_cores, all_architectures): Initialize new field.\n\t* arm-tables.opt: Regenerated.\n\t* arm-tune.md: Regenerated.\n\nFrom-SVN: r243697", "tree": {"sha": "9a03f8f56cef2a35e568a6261afe04721f80ad93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a03f8f56cef2a35e568a6261afe04721f80ad93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d1c28c7b63b35558b3b239d20fec812fbf30a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d1c28c7b63b35558b3b239d20fec812fbf30a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d1c28c7b63b35558b3b239d20fec812fbf30a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d1c28c7b63b35558b3b239d20fec812fbf30a7/comments", "author": null, "committer": null, "parents": [{"sha": "643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/643a5717dc458643c53e6fa85aed3b3d1f36b3b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/643a5717dc458643c53e6fa85aed3b3d1f36b3b4"}], "stats": {"total": 385, "additions": 201, "deletions": 184}, "files": [{"sha": "094a47294323b10832ac3e661e878ee794e692c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00d1c28c7b63b35558b3b239d20fec812fbf30a7", "patch": "@@ -1,3 +1,16 @@\n+2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm-isa.h: New file.\n+\t* arm-protos.h: Include it.\n+\t* arm-arches.def: Add new ISA field to all entries.  Drop bogus\n+\tarmv8.1-a+crc architecture.\n+\t* arm-cores.def: Similarly.  Group ARMv8 cores by profile.\n+\t* arm-opts.h (enum processor_type): Adjust for new field.\n+\t* arm.c (struct processors): New field 'isa_bits'.\n+\t(all_cores, all_architectures): Initialize new field.\n+\t* arm-tables.opt: Regenerated.\n+\t* arm-tune.md: Regenerated.\n+\n 2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm-arches.def (ARM_ARCH): Add extra field TUNE_FLAGS, move"}, {"sha": "79e3f1f5509850afa703e615e0ebd1499ff1573e", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=00d1c28c7b63b35558b3b239d20fec812fbf30a7", "patch": "@@ -107,12 +107,12 @@ struct arm_arch_core_flag\n static const struct arm_arch_core_flag arm_arch_core_flags[] =\n {\n #undef ARM_CORE\n-#define ARM_CORE(NAME, X, IDENT, TUNE_FLAGS, ARCH, FLAGS, COSTS) \\\n+#define ARM_CORE(NAME, X, IDENT, TUNE_FLAGS, ARCH, ISA, FLAGS, COSTS)\t\\\n   {NAME, FLAGS},\n #include \"config/arm/arm-cores.def\"\n #undef ARM_CORE\n #undef ARM_ARCH\n-#define ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, FLAGS)\t\\\n+#define ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, ISA, FLAGS)\t\\\n   {NAME, FLAGS},\n #include \"config/arm/arm-arches.def\"\n #undef ARM_ARCH"}, {"sha": "02ece421727e55c963c7b877b5a870e9f600f44e", "filename": "gcc/config/arm/arm-arches.def", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-arches.def?ref=00d1c28c7b63b35558b3b239d20fec812fbf30a7", "patch": "@@ -19,50 +19,50 @@\n \n /* Before using #include to read this file, define a macro:\n \n-      ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, FLAGS)\n+      ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, ISA, FLAGS)\n \n    The NAME is the name of the architecture, represented as a string\n    constant.  The CORE is the identifier for a core representative of\n-   this architecture.  ARCH is the architecture revision.  FLAGS is\n-   the set of feature flags implied by the architecture.\n+   this architecture.  ARCH is the architecture revision.  ISA is the\n+   detailed architectural capabilities of the core (see arm-isa.h).\n+   FLAGS is the set of feature flags implied by the architecture.\n \n    genopt.sh assumes no whitespace up to the first \",\" in each entry.  */\n \n-ARM_ARCH(\"armv2\",   arm2,       (TF_CO_PROC | TF_NO_MODE32), 2,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2))\n-ARM_ARCH(\"armv2a\",  arm2,       (TF_CO_PROC | TF_NO_MODE32), 2,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2))\n-ARM_ARCH(\"armv3\",   arm6,       TF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3))\n-ARM_ARCH(\"armv3m\",  arm7m,      TF_CO_PROC, 3M,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M))\n-ARM_ARCH(\"armv4\",   arm7tdmi,   TF_CO_PROC, 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4))\n+ARM_ARCH(\"armv2\",   arm2,       (TF_CO_PROC | TF_NO_MODE32), 2,\t\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2))\n+ARM_ARCH(\"armv2a\",  arm2,       (TF_CO_PROC | TF_NO_MODE32), 2,\t\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2))\n+ARM_ARCH(\"armv3\",   arm6,       TF_CO_PROC,   \t\t     3,\t\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3))\n+ARM_ARCH(\"armv3m\",  arm7m,      TF_CO_PROC, \t\t     3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M))\n+ARM_ARCH(\"armv4\",   arm7tdmi,   TF_CO_PROC, \t\t     4,\t\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4))\n /* Strictly, FL_MODE26 is a permitted option for v4t, but there are no\n    implementations that support it, so we will leave it out for now.  */\n-ARM_ARCH(\"armv4t\",  arm7tdmi,   TF_CO_PROC, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T))\n-ARM_ARCH(\"armv5\",   arm10tdmi,  TF_CO_PROC, 5,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5))\n-ARM_ARCH(\"armv5t\",  arm10tdmi,  TF_CO_PROC, 5T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5T))\n-ARM_ARCH(\"armv5e\",  arm1026ejs, TF_CO_PROC, 5E,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5E))\n-ARM_ARCH(\"armv5te\", arm1026ejs, TF_CO_PROC, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE))\n-ARM_ARCH(\"armv6\",   arm1136js,  TF_CO_PROC, 6,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6))\n-ARM_ARCH(\"armv6j\",  arm1136js,  TF_CO_PROC, 6J,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6J))\n-ARM_ARCH(\"armv6k\",  mpcore,\tTF_CO_PROC, 6K,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6K))\n-ARM_ARCH(\"armv6z\",  arm1176jzs, TF_CO_PROC, 6Z,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6Z))\n-ARM_ARCH(\"armv6kz\", arm1176jzs, TF_CO_PROC, 6KZ,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6KZ))\n-ARM_ARCH(\"armv6zk\", arm1176jzs, TF_CO_PROC, 6KZ,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6KZ))\n-ARM_ARCH(\"armv6t2\", arm1156t2s, TF_CO_PROC, 6T2,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6T2))\n-ARM_ARCH(\"armv6-m\", cortexm1,\t0,\t      6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M))\n-ARM_ARCH(\"armv6s-m\", cortexm1,\t0,\t      6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M))\n-ARM_ARCH(\"armv7\",   cortexa8,\tTF_CO_PROC, 7,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7))\n-ARM_ARCH(\"armv7-a\", cortexa8,\tTF_CO_PROC, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A))\n-ARM_ARCH(\"armv7ve\", cortexa8,\tTF_CO_PROC, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7VE))\n-ARM_ARCH(\"armv7-r\", cortexr4,\tTF_CO_PROC, 7R,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7R))\n-ARM_ARCH(\"armv7-m\", cortexm3,\tTF_CO_PROC, 7M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7M))\n-ARM_ARCH(\"armv7e-m\", cortexm4,  TF_CO_PROC, 7EM,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7EM))\n-ARM_ARCH(\"armv8-a\", cortexa53,  TF_CO_PROC, 8A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH8A))\n-ARM_ARCH(\"armv8-a+crc\",cortexa53, TF_CO_PROC, 8A,   ARM_FSET_MAKE_CPU1 (FL_CRC32  | FL_FOR_ARCH8A))\n-ARM_ARCH(\"armv8.1-a\", cortexa53,  TF_CO_PROC, 8A,   ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_1A))\n-ARM_ARCH(\"armv8.1-a+crc\",cortexa53, TF_CO_PROC, 8A, ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_1A))\n-ARM_ARCH (\"armv8.2-a\", cortexa53,  TF_CO_PROC, 8A,  ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_2A))\n-ARM_ARCH (\"armv8.2-a+fp16\", cortexa53,  TF_CO_PROC, 8A, ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_2A | FL2_FP16INST))\n-ARM_ARCH(\"armv8-m.base\", cortexm23, 0,\t      8M_BASE, ARM_FSET_MAKE (FL_FOR_ARCH8M_BASE, FL2_CMSE))\n-ARM_ARCH(\"armv8-m.main\", cortexm7, TF_CO_PROC, 8M_MAIN, ARM_FSET_MAKE (FL_FOR_ARCH8M_MAIN, FL2_CMSE))\n-ARM_ARCH(\"armv8-m.main+dsp\", cortexm33, TF_CO_PROC, 8M_MAIN, ARM_FSET_MAKE (FL_ARCH7EM | FL_FOR_ARCH8M_MAIN, FL2_CMSE))\n-ARM_ARCH(\"iwmmxt\",  iwmmxt,     (TF_LDSCHED | TF_STRONG | TF_XSCALE), 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT))\n-ARM_ARCH(\"iwmmxt2\", iwmmxt2,    (TF_LDSCHED | TF_STRONG | TF_XSCALE), 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2))\n+ARM_ARCH(\"armv4t\",  arm7tdmi,   TF_CO_PROC,\t\t     4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T))\n+ARM_ARCH(\"armv5\",   arm10tdmi,  TF_CO_PROC, \t\t     5,\t\tISA_FEAT(ISA_ARMv5), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5))\n+ARM_ARCH(\"armv5t\",  arm10tdmi,  TF_CO_PROC, \t\t     5T,\tISA_FEAT(ISA_ARMv5t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5T))\n+ARM_ARCH(\"armv5e\",  arm1026ejs, TF_CO_PROC, \t\t     5E,\tISA_FEAT(ISA_ARMv5e), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5E))\n+ARM_ARCH(\"armv5te\", arm1026ejs, TF_CO_PROC, \t\t     5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE))\n+ARM_ARCH(\"armv6\",   arm1136js,  TF_CO_PROC, \t\t     6,\t\tISA_FEAT(ISA_ARMv6), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6))\n+ARM_ARCH(\"armv6j\",  arm1136js,  TF_CO_PROC, \t\t     6J,\tISA_FEAT(ISA_ARMv6j), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6J))\n+ARM_ARCH(\"armv6k\",  mpcore,\tTF_CO_PROC, \t\t     6K,\tISA_FEAT(ISA_ARMv6k), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6K))\n+ARM_ARCH(\"armv6z\",  arm1176jzs, TF_CO_PROC, \t\t     6Z,\tISA_FEAT(ISA_ARMv6z), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6Z))\n+ARM_ARCH(\"armv6kz\", arm1176jzs, TF_CO_PROC, \t\t     6KZ,\tISA_FEAT(ISA_ARMv6kz), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6KZ))\n+ARM_ARCH(\"armv6zk\", arm1176jzs, TF_CO_PROC, \t\t     6KZ,\tISA_FEAT(ISA_ARMv6kz), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6KZ))\n+ARM_ARCH(\"armv6t2\", arm1156t2s, TF_CO_PROC, \t\t     6T2,\tISA_FEAT(ISA_ARMv6t2), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6T2))\n+ARM_ARCH(\"armv6-m\", cortexm1,\t0,\t\t\t     6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M))\n+ARM_ARCH(\"armv6s-m\", cortexm1,\t0, \t\t\t     6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M))\n+ARM_ARCH(\"armv7\",   cortexa8,\tTF_CO_PROC,\t\t     7,\t\tISA_FEAT(ISA_ARMv7), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7))\n+ARM_ARCH(\"armv7-a\", cortexa8,\tTF_CO_PROC,\t\t     7A,\tISA_FEAT(ISA_ARMv7a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A))\n+ARM_ARCH(\"armv7ve\", cortexa8,\tTF_CO_PROC,\t\t     7A,\tISA_FEAT(ISA_ARMv7ve), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7VE))\n+ARM_ARCH(\"armv7-r\", cortexr4,\tTF_CO_PROC,\t\t     7R,\tISA_FEAT(ISA_ARMv7r), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7R))\n+ARM_ARCH(\"armv7-m\", cortexm3,\tTF_CO_PROC,\t\t     7M,\tISA_FEAT(ISA_ARMv7m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7M))\n+ARM_ARCH(\"armv7e-m\", cortexm4,  TF_CO_PROC,\t\t     7EM,\tISA_FEAT(ISA_ARMv7em), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7EM))\n+ARM_ARCH(\"armv8-a\", cortexa53,  TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH8A))\n+ARM_ARCH(\"armv8-a+crc\",cortexa53, TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32  | FL_FOR_ARCH8A))\n+ARM_ARCH(\"armv8.1-a\", cortexa53,  TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8_1a), ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_1A))\n+ARM_ARCH (\"armv8.2-a\", cortexa53,  TF_CO_PROC,\t\t     8A,\tISA_FEAT(ISA_ARMv8_2a), ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_2A))\n+ARM_ARCH (\"armv8.2-a+fp16\", cortexa53, TF_CO_PROC,\t     8A,\tISA_FEAT(ISA_ARMv8_2a) ISA_FEAT(isa_bit_fp16), ARM_FSET_MAKE (FL_CRC32 | FL_FOR_ARCH8A, FL2_FOR_ARCH8_2A | FL2_FP16INST))\n+ARM_ARCH(\"armv8-m.base\", cortexm23, 0,\t\t\t     8M_BASE,\tISA_FEAT(ISA_ARMv8m_base), ARM_FSET_MAKE (FL_FOR_ARCH8M_BASE, FL2_CMSE))\n+ARM_ARCH(\"armv8-m.main\", cortexm7, TF_CO_PROC,\t\t     8M_MAIN,\tISA_FEAT(ISA_ARMv8m_main), ARM_FSET_MAKE (FL_FOR_ARCH8M_MAIN, FL2_CMSE))\n+ARM_ARCH(\"armv8-m.main+dsp\", cortexm33, TF_CO_PROC,\t     8M_MAIN,\tISA_FEAT(ISA_ARMv8m_main) ISA_FEAT(isa_bit_ARMv7em), ARM_FSET_MAKE (FL_ARCH7EM | FL_FOR_ARCH8M_MAIN, FL2_CMSE))\n+ARM_ARCH(\"iwmmxt\",  iwmmxt, (TF_LDSCHED | TF_STRONG | TF_XSCALE), 5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT))\n+ARM_ARCH(\"iwmmxt2\", iwmmxt2, (TF_LDSCHED | TF_STRONG | TF_XSCALE), 5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt) ISA_FEAT(isa_bit_iwmmxt2), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2))"}, {"sha": "7c951f34abb9349f352b7015878b243c95f6a727", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 119, "deletions": 116, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=00d1c28c7b63b35558b3b239d20fec812fbf30a7", "patch": "@@ -25,7 +25,7 @@\n \n /* Before using #include to read this file, define a macro:\n \n-      ARM_CORE(CORE_NAME, INTERNAL_IDENT, TUNE_IDENT, TUNE_FLAGS, ARCH, FLAGS, COSTS)\n+      ARM_CORE(CORE_NAME, INTERNAL_IDENT, TUNE_IDENT, TUNE_FLAGS, ARCH, ISA, FLAGS, COSTS)\n \n    The CORE_NAME is the name of the core, represented as a string constant.\n    The INTERNAL_IDENT is the name of the core represented as an identifier.\n@@ -34,6 +34,7 @@\n    should be made, represented as an identifier.\n    TUNE_FLAGS is a set of flag bits that are used to affect tuning.\n    ARCH is the architecture revision implemented by the chip.\n+   ISA is the detailed architectural capabilities of the core (see arm-isa.h).\n    FLAGS is the set of feature flags of that core.\n    This need not include flags implied by the architecture.\n    COSTS is the name of the rtx_costs routine to use.\n@@ -44,144 +45,146 @@\n    Some tools assume no whitespace up to the first \",\" in each entry.  */\n \n /* V2/V2A Architecture Processors */\n-ARM_CORE(\"arm2\",\tarm2, arm2,\t\t(TF_CO_PROC | TF_NO_MODE32), 2,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2), slowmul)\n-ARM_CORE(\"arm250\",\tarm250, arm250,\t\t(TF_CO_PROC | TF_NO_MODE32), 2,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2), slowmul)\n-ARM_CORE(\"arm3\",\tarm3, arm3,\t\t(TF_CO_PROC | TF_NO_MODE32), 2,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2), slowmul)\n+ARM_CORE(\"arm2\",\tarm2, arm2,\t\t(TF_CO_PROC | TF_NO_MODE32),\t  2,\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2), slowmul)\n+ARM_CORE(\"arm250\",\tarm250, arm250,\t\t(TF_CO_PROC | TF_NO_MODE32), \t  2,\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2), slowmul)\n+ARM_CORE(\"arm3\",\tarm3, arm3,\t\t(TF_CO_PROC | TF_NO_MODE32), \t  2,\tISA_FEAT(ISA_ARMv2) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH2), slowmul)\n \n /* V3 Architecture Processors */\n-ARM_CORE(\"arm6\",\tarm6, arm6,\t\tTF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm60\",\tarm60, arm60,\t\tTF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm600\",\tarm600, arm600,\t\t(TF_CO_PROC | TF_WBUF), 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm610\",\tarm610, arm610,\t\tTF_WBUF, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm620\",\tarm620, arm620,\t\t(TF_CO_PROC | TF_WBUF), 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7\",\tarm7, arm7,\t\tTF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7d\",\tarm7d, arm7d,\t\tTF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7di\",\tarm7di, arm7di,\t\tTF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm70\",\tarm70, arm70,\t\tTF_CO_PROC, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm700\",\tarm700, arm700,\t\t(TF_CO_PROC | TF_WBUF), 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm700i\",\tarm700i, arm700i,\t(TF_CO_PROC | TF_WBUF), 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm710\",\tarm710, arm710,\t\tTF_WBUF, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm720\",\tarm720, arm720,\t\tTF_WBUF, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm710c\",\tarm710c, arm710c,\tTF_WBUF, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7100\",\tarm7100, arm7100,\tTF_WBUF, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-ARM_CORE(\"arm7500\",\tarm7500, arm7500,\tTF_WBUF, 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n-/* Doesn't have an external co-proc, but does have embedded fpa. */\n-ARM_CORE(\"arm7500fe\", arm7500fe, arm7500fe,\t(TF_CO_PROC | TF_WBUF), 3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm6\",\tarm6, arm6,\t\tTF_CO_PROC,\t\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm60\",\tarm60, arm60,\t\tTF_CO_PROC, \t\t     \t  3,   \tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm600\",\tarm600, arm600,\t\t(TF_CO_PROC | TF_WBUF),      \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm610\",\tarm610, arm610,\t\tTF_WBUF,      \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm620\",\tarm620, arm620,\t\t(TF_CO_PROC | TF_WBUF),      \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7\",\tarm7, arm7,\t\tTF_CO_PROC,   \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7d\",\tarm7d, arm7d,\t\tTF_CO_PROC, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7di\",\tarm7di, arm7di,\t\tTF_CO_PROC, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm70\",\tarm70, arm70,\t\tTF_CO_PROC, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm700\",\tarm700, arm700,\t\t(TF_CO_PROC | TF_WBUF),      \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm700i\",\tarm700i, arm700i,\t(TF_CO_PROC | TF_WBUF),      \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm710\",\tarm710, arm710,\t\tTF_WBUF,      \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm720\",\tarm720, arm720,\t\tTF_WBUF, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm710c\",\tarm710c, arm710c,\tTF_WBUF, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7100\",\tarm7100, arm7100,\tTF_WBUF, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7500\",\tarm7500, arm7500,\tTF_WBUF, \t\t     \t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+/* Doesn't have an external co-proc, but does have embedded fpa (fpa no-longer supported). */\n+ARM_CORE(\"arm7500fe\", arm7500fe, arm7500fe,\t(TF_CO_PROC | TF_WBUF),\t\t  3,\tISA_FEAT(ISA_ARMv3) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3), slowmul)\n \n /* V3M Architecture Processors */\n /* arm7m doesn't exist on its own, but only with D, (\"and\", and I), but\n    those don't alter the code, so arm7m is sometimes used.  */\n-ARM_CORE(\"arm7m\",   arm7m, arm7m,\t\tTF_CO_PROC, 3M,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n-ARM_CORE(\"arm7dm\",  arm7dm, arm7dm,\t\tTF_CO_PROC, 3M,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n-ARM_CORE(\"arm7dmi\", arm7dmi, arm7dmi,\t\tTF_CO_PROC, 3M,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n+ARM_CORE(\"arm7m\",   arm7m, arm7m,\t\tTF_CO_PROC,\t\t\t  3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n+ARM_CORE(\"arm7dm\",  arm7dm, arm7dm,\t\tTF_CO_PROC, \t\t     \t  3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n+ARM_CORE(\"arm7dmi\", arm7dmi, arm7dmi,\t\tTF_CO_PROC, \t\t     \t  3M,\tISA_FEAT(ISA_ARMv3m) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n \n /* V4 Architecture Processors */\n-ARM_CORE(\"arm8\",          arm8, arm8,\t\t\tTF_LDSCHED, 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), fastmul)\n-ARM_CORE(\"arm810\",        arm810, arm810,\t\tTF_LDSCHED, 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), fastmul)\n-ARM_CORE(\"strongarm\",     strongarm, strongarm,\t\t(TF_LDSCHED | TF_STRONG), 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n-ARM_CORE(\"strongarm110\",  strongarm110, strongarm110,\t(TF_LDSCHED | TF_STRONG), 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n-ARM_CORE(\"strongarm1100\", strongarm1100, strongarm1100, (TF_LDSCHED | TF_STRONG), 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n-ARM_CORE(\"strongarm1110\", strongarm1110, strongarm1110, (TF_LDSCHED | TF_STRONG), 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n-ARM_CORE(\"fa526\",         fa526, fa526,\t\t\tTF_LDSCHED, 4,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4), fastmul)\n-ARM_CORE(\"fa626\",         fa626, fa626,\t\t\tTF_LDSCHED, 4,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4), fastmul)\n+ARM_CORE(\"arm8\",          arm8, arm8,\t\t\tTF_LDSCHED,\t\t  4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), fastmul)\n+ARM_CORE(\"arm810\",        arm810, arm810,\t\tTF_LDSCHED, \t\t  4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), fastmul)\n+ARM_CORE(\"strongarm\",     strongarm, strongarm,\t\t(TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n+ARM_CORE(\"strongarm110\",  strongarm110, strongarm110,\t(TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n+ARM_CORE(\"strongarm1100\", strongarm1100, strongarm1100, (TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n+ARM_CORE(\"strongarm1110\", strongarm1110, strongarm1110, (TF_LDSCHED | TF_STRONG), 4,\tISA_FEAT(ISA_ARMv4) ISA_FEAT(isa_bit_mode26), ARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_FOR_ARCH4), strongarm)\n+ARM_CORE(\"fa526\",         fa526, fa526,\t\t\tTF_LDSCHED,   \t\t  4,\tISA_FEAT(ISA_ARMv4), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4), fastmul)\n+ARM_CORE(\"fa626\",         fa626, fa626,\t\t\tTF_LDSCHED, \t\t  4,\tISA_FEAT(ISA_ARMv4), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4), fastmul)\n \n /* V4T Architecture Processors */\n-ARM_CORE(\"arm7tdmi\",\tarm7tdmi, arm7tdmi,\tTF_CO_PROC, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm7tdmi-s\",\tarm7tdmis, arm7tdmis,\tTF_CO_PROC, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm710t\",\tarm710t, arm710t,\tTF_WBUF, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T),    fastmul)\n-ARM_CORE(\"arm720t\",\tarm720t, arm720t,\tTF_WBUF, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T),    fastmul)\n-ARM_CORE(\"arm740t\",\tarm740t, arm740t,\tTF_WBUF, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T),    fastmul)\n-ARM_CORE(\"arm9\",\tarm9, arm9,\t\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm9tdmi\",\tarm9tdmi, arm9tdmi,\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm920\",\tarm920, arm920,\t\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm920t\",\tarm920t, arm920t,\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm922t\",\tarm922t, arm922t,\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"arm940t\",\tarm940t, arm940t,\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n-ARM_CORE(\"ep9312\",\tep9312, ep9312,\t\tTF_LDSCHED, 4T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm7tdmi\",\tarm7tdmi, arm7tdmi,\tTF_CO_PROC,\t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm7tdmi-s\",\tarm7tdmis, arm7tdmis,\tTF_CO_PROC, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm710t\",\tarm710t, arm710t,\tTF_WBUF, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm720t\",\tarm720t, arm720t,\tTF_WBUF, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm740t\",\tarm740t, arm740t,\tTF_WBUF, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm9\",\tarm9, arm9,\t\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm9tdmi\",\tarm9tdmi, arm9tdmi,\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm920\",\tarm920, arm920,\t\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm920t\",\tarm920t, arm920t,\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm922t\",\tarm922t, arm922t,\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm940t\",\tarm940t, arm940t,\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"ep9312\",\tep9312, ep9312,\t\tTF_LDSCHED, \t\t\t  4T,\tISA_FEAT(ISA_ARMv4t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH4T), fastmul)\n \n /* V5T Architecture Processors */\n-ARM_CORE(\"arm10tdmi\",\tarm10tdmi, arm10tdmi,\tTF_LDSCHED, 5T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5T), fastmul)\n-ARM_CORE(\"arm1020t\",\tarm1020t, arm1020t,\tTF_LDSCHED, 5T,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5T), fastmul)\n+ARM_CORE(\"arm10tdmi\",\tarm10tdmi, arm10tdmi,\tTF_LDSCHED,\t\t\t  5T,\tISA_FEAT(ISA_ARMv5t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5T), fastmul)\n+ARM_CORE(\"arm1020t\",\tarm1020t, arm1020t,\tTF_LDSCHED, \t\t\t  5T,\tISA_FEAT(ISA_ARMv5t), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5T), fastmul)\n \n /* V5TE Architecture Processors */\n-ARM_CORE(\"arm9e\",\tarm9e, arm9e,\t\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"arm946e-s\",\tarm946es, arm946es,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"arm966e-s\",\tarm966es, arm966es,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"arm968e-s\",\tarm968es, arm968es,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"arm10e\",\tarm10e, arm10e,\t\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fastmul)\n-ARM_CORE(\"arm1020e\",\tarm1020e, arm1020e,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fastmul)\n-ARM_CORE(\"arm1022e\",\tarm1022e, arm1022e,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fastmul)\n-ARM_CORE(\"xscale\",\txscale, xscale,\t\t(TF_LDSCHED | TF_XSCALE), 5TE,\tARM_FSET_MAKE_CPU1 (FL_XSCALE | FL_FOR_ARCH5TE), xscale)\n-ARM_CORE(\"iwmmxt\",\tiwmmxt, iwmmxt,\t\t(TF_LDSCHED | TF_XSCALE), 5TE,\tARM_FSET_MAKE_CPU1 (FL_XSCALE | FL_IWMMXT | FL_FOR_ARCH5TE), xscale)\n-ARM_CORE(\"iwmmxt2\",\tiwmmxt2, iwmmxt2,\t(TF_LDSCHED | TF_XSCALE), 5TE,\tARM_FSET_MAKE_CPU1 (FL_XSCALE | FL_IWMMXT | FL_IWMMXT2 | FL_FOR_ARCH5TE), xscale)\n-ARM_CORE(\"fa606te\",\tfa606te, fa606te,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"fa626te\",\tfa626te, fa626te,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"fmp626\",\tfmp626, fmp626,\t\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n-ARM_CORE(\"fa726te\",\tfa726te, fa726te,\tTF_LDSCHED, 5TE,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fa726te)\n+ARM_CORE(\"arm9e\",\tarm9e, arm9e,\t\tTF_LDSCHED,\t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"arm946e-s\",\tarm946es, arm946es,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"arm966e-s\",\tarm966es, arm966es,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"arm968e-s\",\tarm968es, arm968es,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"arm10e\",\tarm10e, arm10e,\t\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fastmul)\n+ARM_CORE(\"arm1020e\",\tarm1020e, arm1020e,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fastmul)\n+ARM_CORE(\"arm1022e\",\tarm1022e, arm1022e,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fastmul)\n+ARM_CORE(\"xscale\",\txscale, xscale,\t\t(TF_LDSCHED | TF_XSCALE), \t  5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale), ARM_FSET_MAKE_CPU1 (FL_XSCALE | FL_FOR_ARCH5TE), xscale)\n+ARM_CORE(\"iwmmxt\",\tiwmmxt, iwmmxt,\t\t(TF_LDSCHED | TF_XSCALE), \t  5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt), ARM_FSET_MAKE_CPU1 (FL_XSCALE | FL_IWMMXT | FL_FOR_ARCH5TE), xscale)\n+ARM_CORE(\"iwmmxt2\",\tiwmmxt2, iwmmxt2,\t(TF_LDSCHED | TF_XSCALE), \t  5TE,\tISA_FEAT(ISA_ARMv5te) ISA_FEAT(isa_bit_xscale) ISA_FEAT(isa_bit_iwmmxt) ISA_FEAT(isa_bit_iwmmxt2), ARM_FSET_MAKE_CPU1 (FL_XSCALE | FL_IWMMXT | FL_IWMMXT2 | FL_FOR_ARCH5TE), xscale)\n+ARM_CORE(\"fa606te\",\tfa606te, fa606te,\tTF_LDSCHED,   \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"fa626te\",\tfa626te, fa626te,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"fmp626\",\tfmp626, fmp626,\t\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"fa726te\",\tfa726te, fa726te,\tTF_LDSCHED, \t\t\t  5TE,\tISA_FEAT(ISA_ARMv5te), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TE), fa726te)\n \n /* V5TEJ Architecture Processors */\n-ARM_CORE(\"arm926ej-s\",\tarm926ejs, arm926ejs,\tTF_LDSCHED, 5TEJ,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TEJ), 9e)\n-ARM_CORE(\"arm1026ej-s\",\tarm1026ejs, arm1026ejs,\tTF_LDSCHED, 5TEJ,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TEJ), 9e)\n+ARM_CORE(\"arm926ej-s\",\tarm926ejs, arm926ejs,\tTF_LDSCHED,\t\t\t  5TEJ,\tISA_FEAT(ISA_ARMv5tej), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TEJ), 9e)\n+ARM_CORE(\"arm1026ej-s\",\tarm1026ejs, arm1026ejs,\tTF_LDSCHED, \t\t\t  5TEJ,\tISA_FEAT(ISA_ARMv5tej), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH5TEJ), 9e)\n \n /* V6 Architecture Processors */\n-ARM_CORE(\"arm1136j-s\",\t\tarm1136js, arm1136js,\t\tTF_LDSCHED, 6J,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6J), 9e)\n-ARM_CORE(\"arm1136jf-s\",\t\tarm1136jfs, arm1136jfs,\t\tTF_LDSCHED, 6J,\tARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6J), 9e)\n-ARM_CORE(\"arm1176jz-s\",\t\tarm1176jzs, arm1176jzs,\t\tTF_LDSCHED, 6KZ,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6KZ), 9e)\n-ARM_CORE(\"arm1176jzf-s\",\tarm1176jzfs, arm1176jzfs,\tTF_LDSCHED, 6KZ,\tARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6KZ), 9e)\n-ARM_CORE(\"mpcorenovfp\",\t\tmpcorenovfp, mpcorenovfp,\tTF_LDSCHED, 6K,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6K), 9e)\n-ARM_CORE(\"mpcore\",\t\tmpcore, mpcore,\t\t\tTF_LDSCHED, 6K,\tARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6K), 9e)\n-ARM_CORE(\"arm1156t2-s\",\t\tarm1156t2s, arm1156t2s,\t\tTF_LDSCHED, 6T2,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6T2), v6t2)\n-ARM_CORE(\"arm1156t2f-s\",\tarm1156t2fs, arm1156t2fs,\tTF_LDSCHED, 6T2,\tARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6T2), v6t2)\n+ARM_CORE(\"arm1136j-s\",\t\tarm1136js, arm1136js,\t\tTF_LDSCHED,\t  6J,\tISA_FEAT(ISA_ARMv6j), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6J), 9e)\n+ARM_CORE(\"arm1136jf-s\",\t\tarm1136jfs, arm1136jfs,\t\tTF_LDSCHED, \t  6J,\tISA_FEAT(ISA_ARMv6j) ISA_FEAT(isa_bit_VFPv2), ARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6J), 9e)\n+ARM_CORE(\"arm1176jz-s\",\t\tarm1176jzs, arm1176jzs,\t\tTF_LDSCHED, \t  6KZ,\tISA_FEAT(ISA_ARMv6kz), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6KZ), 9e)\n+ARM_CORE(\"arm1176jzf-s\",\tarm1176jzfs, arm1176jzfs,\tTF_LDSCHED, \t  6KZ,\tISA_FEAT(ISA_ARMv6kz) ISA_FEAT(isa_bit_VFPv2), ARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6KZ), 9e)\n+ARM_CORE(\"mpcorenovfp\",\t\tmpcorenovfp, mpcorenovfp,\tTF_LDSCHED, \t  6K,\tISA_FEAT(ISA_ARMv6k), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6K), 9e)\n+ARM_CORE(\"mpcore\",\t\tmpcore, mpcore,\t\t\tTF_LDSCHED, \t  6K,\tISA_FEAT(ISA_ARMv6k) ISA_FEAT(isa_bit_VFPv2), ARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6K), 9e)\n+ARM_CORE(\"arm1156t2-s\",\t\tarm1156t2s, arm1156t2s,\t\tTF_LDSCHED, \t  6T2,\tISA_FEAT(ISA_ARMv6t2), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6T2), v6t2)\n+ARM_CORE(\"arm1156t2f-s\",\tarm1156t2fs, arm1156t2fs,\tTF_LDSCHED, \t  6T2,\tISA_FEAT(ISA_ARMv6t2) ISA_FEAT(isa_bit_VFPv2), ARM_FSET_MAKE_CPU1 (FL_VFPV2 | FL_FOR_ARCH6T2), v6t2)\n \n /* V6M Architecture Processors */\n-ARM_CORE(\"cortex-m1\",\t\tcortexm1, cortexm1,\t\tTF_LDSCHED, 6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n-ARM_CORE(\"cortex-m0\",\t\tcortexm0, cortexm0,\t\tTF_LDSCHED, 6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n-ARM_CORE(\"cortex-m0plus\",\tcortexm0plus, cortexm0plus,\tTF_LDSCHED, 6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m1\",\t\tcortexm1, cortexm1,\t\tTF_LDSCHED,\t  6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m0\",\t\tcortexm0, cortexm0,\t\tTF_LDSCHED, \t  6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m0plus\",\tcortexm0plus, cortexm0plus,\tTF_LDSCHED, \t  6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n \n /* V6M Architecture Processors for small-multiply implementations.  */\n-ARM_CORE(\"cortex-m1.small-multiply\",\tcortexm1smallmultiply, cortexm1,\t(TF_LDSCHED | TF_SMALLMUL), 6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n-ARM_CORE(\"cortex-m0.small-multiply\",\tcortexm0smallmultiply, cortexm0,\t(TF_LDSCHED | TF_SMALLMUL), 6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n-ARM_CORE(\"cortex-m0plus.small-multiply\",cortexm0plussmallmultiply, cortexm0plus, (TF_LDSCHED | TF_SMALLMUL), 6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m1.small-multiply\",\tcortexm1smallmultiply, cortexm1,\t(TF_LDSCHED | TF_SMALLMUL),  6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m0.small-multiply\",\tcortexm0smallmultiply, cortexm0,\t(TF_LDSCHED | TF_SMALLMUL),  6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m0plus.small-multiply\",cortexm0plussmallmultiply, cortexm0plus, (TF_LDSCHED | TF_SMALLMUL), 6M,\tISA_FEAT(ISA_ARMv6m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M), v6m)\n \n /* V7 Architecture Processors */\n-ARM_CORE(\"generic-armv7-a\",\tgenericv7a, genericv7a,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex)\n-ARM_CORE(\"cortex-a5\",\t\tcortexa5, cortexa5,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex_a5)\n-ARM_CORE(\"cortex-a7\",\t\tcortexa7, cortexa7,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a7)\n-ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex_a8)\n-ARM_CORE(\"cortex-a9\",\t\tcortexa9, cortexa9,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex_a9)\n-ARM_CORE(\"cortex-a12\",\t\tcortexa12, cortexa17,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n-ARM_CORE(\"cortex-a15\",\t\tcortexa15, cortexa15,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a15)\n-ARM_CORE(\"cortex-a17\",\t\tcortexa17, cortexa17,\t\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n-ARM_CORE(\"cortex-r4\",\t\tcortexr4, cortexr4,\t\tTF_LDSCHED, 7R,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-r4f\",\t\tcortexr4f, cortexr4f,\t\tTF_LDSCHED, 7R,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-r5\",\t\tcortexr5, cortexr5,\t\tTF_LDSCHED, 7R,\tARM_FSET_MAKE_CPU1 (FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\tTF_LDSCHED, 7R,\tARM_FSET_MAKE_CPU1 (FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-r8\",\t\tcortexr8, cortexr7,\t\tTF_LDSCHED, 7R,\tARM_FSET_MAKE_CPU1 (FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n-ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\tTF_LDSCHED, 7EM,\tARM_FSET_MAKE_CPU1 (FL_NO_VOLATILE_CE | FL_FOR_ARCH7EM), cortex_m7)\n-ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\tTF_LDSCHED, 7EM,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7EM), v7m)\n-ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\tTF_LDSCHED, 7M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7M), v7m)\n-ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), marvell_pj4)\n+ARM_CORE(\"generic-armv7-a\",\tgenericv7a, genericv7a,\t\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex)\n+ARM_CORE(\"cortex-a5\",\t\tcortexa5, cortexa5,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex_a5)\n+ARM_CORE(\"cortex-a7\",\t\tcortexa7, cortexa7,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7a) ISA_FEAT(isa_bit_adiv) ISA_FEAT(isa_bit_tdiv), ARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a7)\n+ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex_a8)\n+ARM_CORE(\"cortex-a9\",\t\tcortexa9, cortexa9,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), cortex_a9)\n+ARM_CORE(\"cortex-a12\",\t\tcortexa12, cortexa17,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7a) ISA_FEAT(isa_bit_adiv) ISA_FEAT(isa_bit_tdiv), ARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n+ARM_CORE(\"cortex-a15\",\t\tcortexa15, cortexa15,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7ve), ARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a15)\n+ARM_CORE(\"cortex-a17\",\t\tcortexa17, cortexa17,\t\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7ve), ARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n+ARM_CORE(\"cortex-r4\",\t\tcortexr4, cortexr4,\t\tTF_LDSCHED, \t  7R,\tISA_FEAT(ISA_ARMv7r), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-r4f\",\t\tcortexr4f, cortexr4f,\t\tTF_LDSCHED, \t  7R,\tISA_FEAT(ISA_ARMv7r), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-r5\",\t\tcortexr5, cortexr5,\t\tTF_LDSCHED, \t  7R,\tISA_FEAT(ISA_ARMv7r) ISA_FEAT(isa_bit_adiv), ARM_FSET_MAKE_CPU1 (FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\tTF_LDSCHED, \t  7R,\tISA_FEAT(ISA_ARMv7r) ISA_FEAT(isa_bit_adiv), ARM_FSET_MAKE_CPU1 (FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-r8\",\t\tcortexr8, cortexr7,\t\tTF_LDSCHED, \t  7R,\tISA_FEAT(ISA_ARMv7r) ISA_FEAT(isa_bit_adiv), ARM_FSET_MAKE_CPU1 (FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\tTF_LDSCHED, \t  7EM,\tISA_FEAT(ISA_ARMv7em) ISA_FEAT(isa_quirk_no_volatile_ce), ARM_FSET_MAKE_CPU1 (FL_NO_VOLATILE_CE | FL_FOR_ARCH7EM), cortex_m7)\n+ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\tTF_LDSCHED, \t  7EM,\tISA_FEAT(ISA_ARMv7em), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7EM), v7m)\n+ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\tTF_LDSCHED, \t  7M,\tISA_FEAT(ISA_ARMv7m), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7M), v7m)\n+ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH7A), marvell_pj4)\n \n /* V7 big.LITTLE implementations */\n-ARM_CORE(\"cortex-a15.cortex-a7\", cortexa15cortexa7, cortexa7,\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a15)\n-ARM_CORE(\"cortex-a17.cortex-a7\", cortexa17cortexa7, cortexa7,\tTF_LDSCHED, 7A,\tARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n-\n-/* V8 Architecture Processors */\n-ARM_CORE(\"cortex-a32\",\tcortexa32, cortexa53,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a35)\n-ARM_CORE(\"cortex-a35\",\tcortexa35, cortexa53,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a35)\n-ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a53)\n-ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa57,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n-ARM_CORE(\"cortex-a72\",\tcortexa72, cortexa57,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n-ARM_CORE(\"cortex-a73\",\tcortexa73, cortexa57,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n-ARM_CORE(\"cortex-m23\",\tcortexm23, cortexm23,\tTF_LDSCHED, 8M_BASE, ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH8M_BASE), v6m)\n-ARM_CORE(\"cortex-m33\",\tcortexm33, cortexm33,\tTF_LDSCHED, 8M_MAIN, ARM_FSET_MAKE_CPU1 (FL_ARCH7EM | FL_FOR_ARCH8M_MAIN), v7m)\n-ARM_CORE(\"exynos-m1\",\texynosm1,  exynosm1,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), exynosm1)\n-ARM_CORE(\"falkor\",\tfalkor,    cortexa57,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), qdf24xx)\n-ARM_CORE(\"qdf24xx\",\tqdf24xx,   cortexa57,\tTF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), qdf24xx)\n-ARM_CORE(\"xgene1\",      xgene1,    xgene1,      TF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH8A),            xgene1)\n-\n-/* V8 big.LITTLE implementations */\n-ARM_CORE(\"cortex-a57.cortex-a53\", cortexa57cortexa53, cortexa53, TF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n-ARM_CORE(\"cortex-a72.cortex-a53\", cortexa72cortexa53, cortexa53, TF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n-ARM_CORE(\"cortex-a73.cortex-a35\", cortexa73cortexa35, cortexa53, TF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n-ARM_CORE(\"cortex-a73.cortex-a53\", cortexa73cortexa53, cortexa53, TF_LDSCHED, 8A,\tARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n+ARM_CORE(\"cortex-a15.cortex-a7\", cortexa15cortexa7, cortexa7,\tTF_LDSCHED,\t  7A,\tISA_FEAT(ISA_ARMv7ve), ARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a15)\n+ARM_CORE(\"cortex-a17.cortex-a7\", cortexa17cortexa7, cortexa7,\tTF_LDSCHED, \t  7A,\tISA_FEAT(ISA_ARMv7ve), ARM_FSET_MAKE_CPU1 (FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n+\n+/* V8 A-profile Architecture Processors */\n+ARM_CORE(\"cortex-a32\",\tcortexa32, cortexa53,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a35)\n+ARM_CORE(\"cortex-a35\",\tcortexa35, cortexa53,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a35)\n+ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a53)\n+ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa57,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"cortex-a72\",\tcortexa72, cortexa57,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"cortex-a73\",\tcortexa73, cortexa57,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n+ARM_CORE(\"exynos-m1\",\texynosm1,  exynosm1,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), exynosm1)\n+ARM_CORE(\"falkor\",\tfalkor,    cortexa57,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), qdf24xx)\n+ARM_CORE(\"qdf24xx\",\tqdf24xx,   cortexa57,\tTF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), qdf24xx)\n+ARM_CORE(\"xgene1\",      xgene1,    xgene1,      TF_LDSCHED, \t\t\t  8A,\tISA_FEAT(ISA_ARMv8a), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH8A),            xgene1)\n+\n+/* V8 A-profile big.LITTLE implementations */\n+ARM_CORE(\"cortex-a57.cortex-a53\", cortexa57cortexa53, cortexa53, TF_LDSCHED,\t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"cortex-a72.cortex-a53\", cortexa72cortexa53, cortexa53, TF_LDSCHED, \t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"cortex-a73.cortex-a35\", cortexa73cortexa35, cortexa53, TF_LDSCHED, \t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n+ARM_CORE(\"cortex-a73.cortex-a53\", cortexa73cortexa53, cortexa53, TF_LDSCHED, \t  8A,\tISA_FEAT(ISA_ARMv8a) ISA_FEAT(isa_bit_crc32), ARM_FSET_MAKE_CPU1 (FL_CRC32 | FL_FOR_ARCH8A), cortex_a73)\n+\n+/* V8 M-profile implementations.  */\n+ARM_CORE(\"cortex-m23\",\tcortexm23, cortexm23,\tTF_LDSCHED,\t\t\t  8M_BASE, ISA_FEAT(ISA_ARMv8m_base), ARM_FSET_MAKE_CPU1 (FL_FOR_ARCH8M_BASE), v6m)\n+ARM_CORE(\"cortex-m33\",\tcortexm33, cortexm33,\tTF_LDSCHED, \t\t\t  8M_MAIN, ISA_FEAT(ISA_ARMv8m_main) ISA_FEAT(isa_bit_ARMv7em), ARM_FSET_MAKE_CPU1 (FL_ARCH7EM | FL_FOR_ARCH8M_MAIN), v7m)"}, {"sha": "a62ac46667af832d630529ecf2674ca9b80da7c4", "filename": "gcc/config/arm/arm-opts.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-opts.h?ref=00d1c28c7b63b35558b3b239d20fec812fbf30a7", "patch": "@@ -31,7 +31,7 @@\n enum processor_type\n {\n #undef ARM_CORE\n-#define ARM_CORE(NAME, INTERNAL_IDENT, IDENT, TUNE_FLAGS, ARCH, FLAGS, COSTS) \\\n+#define ARM_CORE(NAME, INTERNAL_IDENT, IDENT, TUNE_FLAGS, ARCH, ISA, FLAGS, COSTS) \\\n   TARGET_CPU_##INTERNAL_IDENT,\n #include \"arm-cores.def\"\n #undef ARM_CORE"}, {"sha": "58d2ae3dc1da578463af9ba17f021e97579a4ba7", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=00d1c28c7b63b35558b3b239d20fec812fbf30a7", "patch": "@@ -23,6 +23,7 @@\n #define GCC_ARM_PROTOS_H\n \n #include \"arm-flags.h\"\n+#include \"arm-isa.h\"\n \n extern enum unwind_info_type arm_except_unwind_info (struct gcc_options *);\n extern int use_return_insn (int, rtx);"}, {"sha": "9d833794ca85379bc04fcc05a1e42a9a89b2c248", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=00d1c28c7b63b35558b3b239d20fec812fbf30a7", "patch": "@@ -324,12 +324,6 @@ Enum(processor_type) String(cortex-a72) Value( TARGET_CPU_cortexa72)\n EnumValue\n Enum(processor_type) String(cortex-a73) Value( TARGET_CPU_cortexa73)\n \n-EnumValue\n-Enum(processor_type) String(cortex-m23) Value( TARGET_CPU_cortexm23)\n-\n-EnumValue\n-Enum(processor_type) String(cortex-m33) Value( TARGET_CPU_cortexm33)\n-\n EnumValue\n Enum(processor_type) String(exynos-m1) Value( TARGET_CPU_exynosm1)\n \n@@ -354,6 +348,12 @@ Enum(processor_type) String(cortex-a73.cortex-a35) Value( TARGET_CPU_cortexa73co\n EnumValue\n Enum(processor_type) String(cortex-a73.cortex-a53) Value( TARGET_CPU_cortexa73cortexa53)\n \n+EnumValue\n+Enum(processor_type) String(cortex-m23) Value( TARGET_CPU_cortexm23)\n+\n+EnumValue\n+Enum(processor_type) String(cortex-m33) Value( TARGET_CPU_cortexm33)\n+\n Enum\n Name(arm_arch) Type(int)\n Known ARM architectures (for use with the -march= option):\n@@ -443,28 +443,25 @@ EnumValue\n Enum(arm_arch) String(armv8.1-a) Value(27)\n \n EnumValue\n-Enum(arm_arch) String(armv8.1-a+crc) Value(28)\n-\n-EnumValue\n-Enum(arm_arch) String(armv8.2-a) Value(29)\n+Enum(arm_arch) String(armv8.2-a) Value(28)\n \n EnumValue\n-Enum(arm_arch) String(armv8.2-a+fp16) Value(30)\n+Enum(arm_arch) String(armv8.2-a+fp16) Value(29)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.base) Value(31)\n+Enum(arm_arch) String(armv8-m.base) Value(30)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.main) Value(32)\n+Enum(arm_arch) String(armv8-m.main) Value(31)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.main+dsp) Value(33)\n+Enum(arm_arch) String(armv8-m.main+dsp) Value(32)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt) Value(34)\n+Enum(arm_arch) String(iwmmxt) Value(33)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt2) Value(35)\n+Enum(arm_arch) String(iwmmxt2) Value(34)\n \n Enum\n Name(arm_fpu) Type(int)"}, {"sha": "22e4a5328793400aaae9469c21ff0f6cdb2473bf", "filename": "gcc/config/arm/arm-tune.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tune.md?ref=00d1c28c7b63b35558b3b239d20fec812fbf30a7", "patch": "@@ -34,8 +34,8 @@\n \tcortexm3,marvell_pj4,cortexa15cortexa7,\n \tcortexa17cortexa7,cortexa32,cortexa35,\n \tcortexa53,cortexa57,cortexa72,\n-\tcortexa73,cortexm23,cortexm33,\n-\texynosm1,falkor,qdf24xx,\n-\txgene1,cortexa57cortexa53,cortexa72cortexa53,\n-\tcortexa73cortexa35,cortexa73cortexa53\"\n+\tcortexa73,exynosm1,falkor,\n+\tqdf24xx,xgene1,cortexa57cortexa53,\n+\tcortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,\n+\tcortexm23,cortexm33\"\n \t(const (symbol_ref \"((enum attr_tune) arm_tune)\")))"}, {"sha": "bf04a0690bb23a7f6b5f5ccfd08aba07f0a69c91", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d1c28c7b63b35558b3b239d20fec812fbf30a7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=00d1c28c7b63b35558b3b239d20fec812fbf30a7", "patch": "@@ -953,6 +953,7 @@ struct processors\n   unsigned int tune_flags;\n   const char *arch;\n   enum base_architecture base_arch;\n+  enum isa_feature isa_bits[isa_num_bits];\n   const arm_feature_set flags;\n   const struct tune_params *const tune;\n };\n@@ -2288,12 +2289,13 @@ const struct tune_params arm_fa726te_tune =\n static const struct processors all_cores[] =\n {\n   /* ARM Cores */\n-#define ARM_CORE(NAME, X, IDENT, TUNE_FLAGS, ARCH, FLAGS, COSTS) \\\n+#define ARM_CORE(NAME, X, IDENT, TUNE_FLAGS, ARCH, ISA, FLAGS, COSTS)\t\\\n   {NAME, TARGET_CPU_##IDENT, TUNE_FLAGS, #ARCH, BASE_ARCH_##ARCH, \\\n-   FLAGS, &arm_##COSTS##_tune},\n+   {ISA isa_nobit}, FLAGS, &arm_##COSTS##_tune},\n #include \"arm-cores.def\"\n #undef ARM_CORE\n-  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, ARM_FSET_EMPTY, NULL}\n+  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit},\n+   ARM_FSET_EMPTY, NULL}\n };\n \n static const struct processors all_architectures[] =\n@@ -2302,11 +2304,12 @@ static const struct processors all_architectures[] =\n   /* We don't specify tuning costs here as it will be figured out\n      from the core.  */\n \n-#define ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, FLAGS)\t\t\t\\\n-  {NAME, TARGET_CPU_##CORE, TUNE_FLAGS, #ARCH, BASE_ARCH_##ARCH, FLAGS, NULL},\n+#define ARM_ARCH(NAME, CORE, TUNE_FLAGS, ARCH, ISA, FLAGS)\t\t\\\n+  {NAME, TARGET_CPU_##CORE, TUNE_FLAGS, #ARCH, BASE_ARCH_##ARCH,\t\\\n+  {ISA isa_nobit}, FLAGS, NULL},\n #include \"arm-arches.def\"\n #undef ARM_ARCH\n-  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, ARM_FSET_EMPTY, NULL}\n+  {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, ARM_FSET_EMPTY, NULL}\n };\n \n "}]}