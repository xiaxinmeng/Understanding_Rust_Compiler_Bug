{"sha": "5f4dd4729cbfbc2f80d075784ebefe625e038e49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY0ZGQ0NzI5Y2JmYmMyZjgwZDA3NTc4NGViZWZlNjI1ZTAzOGU0OQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-02-16T21:58:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-02-16T21:58:43Z"}, "message": "gcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_logical_op_short_circuit): New procedure.\n\t* gcc.dg/binop-xor1.c: XFAIL for logical_op_short_circuit.\n\t* gcc.dg/tree-ssa/forwprop-28.c: Use logical_op_short_circuit\n\tinstead of mips*-*-*, arc*-*-*, avr*-*-* and arm_cortex_m tests.\n\t* gcc.dg/tree-ssa/vrp47.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp87.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Likewise.  Also use\n\tlogical_op_short_circuit for the alternative test, extending\n\tit to arm_cortex_m.\n\nFrom-SVN: r207810", "tree": {"sha": "3976695806fa1849005854f595a2344ba009869d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3976695806fa1849005854f595a2344ba009869d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f4dd4729cbfbc2f80d075784ebefe625e038e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f4dd4729cbfbc2f80d075784ebefe625e038e49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f4dd4729cbfbc2f80d075784ebefe625e038e49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f4dd4729cbfbc2f80d075784ebefe625e038e49/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "518fea64fca4b49cabadda582dbbb5365aa2fb3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/518fea64fca4b49cabadda582dbbb5365aa2fb3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/518fea64fca4b49cabadda582dbbb5365aa2fb3d"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "442d6936a298bdc2ec8525c1b897c49ed28aa3e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f4dd4729cbfbc2f80d075784ebefe625e038e49", "patch": "@@ -1,3 +1,16 @@\n+2014-02-16  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_logical_op_short_circuit): New procedure.\n+\t* gcc.dg/binop-xor1.c: XFAIL for logical_op_short_circuit.\n+\t* gcc.dg/tree-ssa/forwprop-28.c: Use logical_op_short_circuit\n+\tinstead of mips*-*-*, arc*-*-*, avr*-*-* and arm_cortex_m tests.\n+\t* gcc.dg/tree-ssa/vrp47.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp87.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Likewise.  Also use\n+\tlogical_op_short_circuit for the alternative test, extending\n+\tit to arm_cortex_m.\n+\n 2014-02-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/60203"}, {"sha": "c6a19cf01d3dd11510c2c67cc52f2b5e6504ed1b", "filename": "gcc/testsuite/gcc.dg/binop-xor1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinop-xor1.c?ref=5f4dd4729cbfbc2f80d075784ebefe625e038e49", "patch": "@@ -7,5 +7,5 @@ foo (int a, int b, int c)\n   return ((a && !b && c) || (!a && b && c));\n }\n \n-/* { dg-final { scan-tree-dump-times \"\\\\\\^\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\\\\\^\" 1 \"optimized\" { xfail logical_op_short_circuit } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "3fa9d5879fc62368bb60133d6d0ae17d0bc48122", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-28.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-28.c?ref=5f4dd4729cbfbc2f80d075784ebefe625e038e49", "patch": "@@ -1,9 +1,7 @@\n-/* { dg-do compile { target { ! \"m68k*-*-* mmix*-*-* mep*-*-* bfin*-*-* v850*-*-* picochip*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* arc*-*-* hppa*-*-* mips*-*-*\"} } } */\n+/* Setting LOGICAL_OP_NON_SHORT_CIRCUIT to 0 leads to two conditional jumps\n+   when evaluating an && condition.  VRP is not able to optimize this.  */\n+/* { dg-do compile { target { ! { logical_op_short_circuit || { m68k*-*-* mmix*-*-* mep*-*-* bfin*-*-* v850*-*-* picochip*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* } } } } } */\n /* { dg-options \"-O2 -fdump-tree-forwprop1\" } */\n-/* Skip on ARM Cortex-M, where LOGICAL_OP_NON_SHORT_CIRCUIT is set to false,\n-   leading to two conditional jumps when evaluating an && condition.  Forwprop1\n-   is not able to optimize this.  */\n-/* { dg-skip-if \"\" { arm_cortex_m } } */\n \n extern char *frob (void);\n extern _Bool testit (void);"}, {"sha": "1e46634c6c0cfc839fb09efc74684d3195fc8530", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-4.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-4.c?ref=5f4dd4729cbfbc2f80d075784ebefe625e038e49", "patch": "@@ -59,10 +59,8 @@ bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n    code we missed the edge when the first conditional is false\n    (b_elt is zero, which means the second conditional is always\n    zero.  */\n-/* ARM Cortex-M defined LOGICAL_OP_NON_SHORT_CIRCUIT to false,\n-   so skip below test.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 3 \"dom1\" { target { ! { { mips*-*-* avr-*-* arc*-*-* } || { arm_cortex_m } } } } } } */\n-/* MIPS defines LOGICAL_OP_NON_SHORT_CIRCUIT to 0, so we split both\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 3 \"dom1\" { target { ! logical_op_short_circuit } } } } */\n+/* On targets that define LOGICAL_OP_NON_SHORT_CIRCUIT to 0, we split both\n    \"a_elt || b_elt\" and \"b_elt && kill_elt\" into two conditions each,\n    rather than using \"(var1 != 0) op (var2 != 0)\".  Also, as on other targets,\n    we duplicate the header of the inner \"while\" loop.  There are then\n@@ -78,9 +76,6 @@ bitmap_ior_and_compl (bitmap dst, const_bitmap a, const_bitmap b,\n       -> \"kill_elt->indx == b_elt->indx\" in the second condition,\n \t skipping the known-true \"b_elt && kill_elt\" in the second\n \t condition.  */\n-/* Likewise for arc.  */\n-/* For avr, BRANCH_COST is by default 0, so the default\n-   LOGICAL_OP_NON_SHORT_CIRCUIT definition also computes as 0.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded\" 4 \"dom1\" { target mips*-*-* avr-*-* arc*-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"Threaded\" 4 \"dom1\" { target logical_op_short_circuit } } } */\n /* { dg-final { cleanup-tree-dump \"dom1\" } } */\n "}, {"sha": "9fdba58d14d61c9abc853fea4aa87a6797672945", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp47.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp47.c?ref=5f4dd4729cbfbc2f80d075784ebefe625e038e49", "patch": "@@ -1,15 +1,11 @@\n-/* Skip on MIPS/ARC, where LOGICAL_OP_NON_SHORT_CIRCUIT inhibits the setcc\n+/* Setting LOGICAL_OP_NON_SHORT_CIRCUIT to 0 inhibits the setcc\n    optimizations that expose the VRP opportunity.  */\n-/* Skip on S/390 and avr.  Lower values in BRANCH_COST lead to two conditional\n+/* Skip on S/390.  Lower values in BRANCH_COST lead to two conditional\n    jumps when evaluating an && condition.  VRP is not able to optimize\n    this.  */\n-/* { dg-do compile { target { ! \"mips*-*-* arc*-*-* s390*-*-*  avr-*-* mn10300-*-* hppa*-*-*\" } } } */\n+/* { dg-do compile { target { ! { logical_op_short_circuit || { s390*-*-* mn10300-*-* hppa*-*-* } } } } } */\n /* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-dom1 -fdump-tree-vrp2\" } */\n /* { dg-additional-options \"-march=i586\" { target { { i?86-*-* x86_64-*-* } && ia32 } } } */\n-/* Skip on ARM Cortex-M, where LOGICAL_OP_NON_SHORT_CIRCUIT is set to false,\n-   leading to two conditional jumps when evaluating an && condition.  VRP is\n-   not able to optimize this.  */\n-/* { dg-skip-if \"\" { arm_cortex_m } } */\n \n int h(int x, int y)\n {"}, {"sha": "ab399b50efa34d91d93f8f0a9e2c6ee080eb2d16", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp87.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp87.c?ref=5f4dd4729cbfbc2f80d075784ebefe625e038e49", "patch": "@@ -1,11 +1,8 @@\n-/* { dg-do compile { target { ! \"m68k*-*-* mmix*-*-* mep*-*-* bfin*-*-* v850*-*-* picochip*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* arc*-*-* hppa*-*-* mips*-*-*\"} } } */\n+/* Setting LOGICAL_OP_NON_SHORT_CIRCUIT to 0 leads to two conditional jumps\n+   when evaluating an && condition.  VRP is not able to optimize this.  */\n+/* { dg-do compile { target { ! { logical_op_short_circuit || { m68k*-*-* mmix*-*-* mep*-*-* bfin*-*-* v850*-*-* picochip*-*-* moxie*-*-* cris*-*-* m32c*-*-* fr30*-*-* mcore*-*-* powerpc*-*-* xtensa*-*-* hppa*-*-* } } } } } */\n \n /* { dg-options \"-O2 -fdump-tree-vrp2-details -fdump-tree-cddce2-details\" } */\n-/* { dg-additional-options \"-mbranch-cost=2\" { target mips*-*-* avr-*-* } } */\n-/* Skip on ARM Cortex-M, where LOGICAL_OP_NON_SHORT_CIRCUIT is set to false,\n-   leading to two conditional jumps when evaluating an && condition.  VRP is\n-   not able to optimize this.  */\n-/* { dg-skip-if \"\" { arm_cortex_m } } */\n \n struct bitmap_head_def;\n typedef struct bitmap_head_def *bitmap;"}, {"sha": "1d38101f60741ba6a7814ba90daa46e262b0b078", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f4dd4729cbfbc2f80d075784ebefe625e038e49/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=5f4dd4729cbfbc2f80d075784ebefe625e038e49", "patch": "@@ -5690,6 +5690,18 @@ proc check_effective_target_fenv_exceptions {} {\n     } \"-std=gnu99\"]\n }\n \n+# Return 1 if LOGICAL_OP_NON_SHORT_CIRCUIT is set to 0 for the current target.\n+\n+proc check_effective_target_logical_op_short_circuit {} {\n+    if { [istarget mips*-*-*]\n+\t || [istarget arc*-*-*]\n+\t || [istarget avr*-*-*]\n+\t || [check_effective_target_arm_cortex_m] } {\n+\treturn 1\n+    }\n+    return 0\n+}\n+\n # Record that dg-final test TEST requires convential compilation.\n \n proc force_conventional_output_for { test } {"}]}