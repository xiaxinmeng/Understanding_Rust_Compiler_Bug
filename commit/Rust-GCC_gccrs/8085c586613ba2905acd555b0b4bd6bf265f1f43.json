{"sha": "8085c586613ba2905acd555b0b4bd6bf265f1f43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA4NWM1ODY2MTNiYTI5MDVhY2Q1NTViMGI0YmQ2YmYyNjVmMWY0Mw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-02-14T15:33:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-02-14T15:33:56Z"}, "message": "re PR middle-end/52244 (wrong code for function returning union between int and _Bool at O > 2, with no-early-inlining)\n\n2012-02-14  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/52244\n\tPR tree-optimization/51528\n\t* tree-sra.c (analyze_access_subtree): Only create INTEGER_TYPE\n\treplacements for integral types.\n\n\t* gcc.dg/torture/pr52244.c: New testcase.\n\nFrom-SVN: r184214", "tree": {"sha": "c501248fa589afafc35f7a550a5f38592d411785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c501248fa589afafc35f7a550a5f38592d411785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8085c586613ba2905acd555b0b4bd6bf265f1f43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8085c586613ba2905acd555b0b4bd6bf265f1f43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8085c586613ba2905acd555b0b4bd6bf265f1f43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8085c586613ba2905acd555b0b4bd6bf265f1f43/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31772c9507ed3c9f69565efa9dd80dcd8c72b0ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31772c9507ed3c9f69565efa9dd80dcd8c72b0ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31772c9507ed3c9f69565efa9dd80dcd8c72b0ba"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "407a61fdd6cd600a80a2822226ba04ff5da269a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8085c586613ba2905acd555b0b4bd6bf265f1f43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8085c586613ba2905acd555b0b4bd6bf265f1f43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8085c586613ba2905acd555b0b4bd6bf265f1f43", "patch": "@@ -1,3 +1,10 @@\n+2012-02-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52244\n+\tPR tree-optimization/51528\n+\t* tree-sra.c (analyze_access_subtree): Only create INTEGER_TYPE\n+\treplacements for integral types.\n+\n 2012-02-14  Walter Lee  <walt@tilera.com>\n \n \t* config.gcc: Handle tilegx and tilepro."}, {"sha": "963e1bfd3209f13079a74dd32ce1b305ac9dcc66", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8085c586613ba2905acd555b0b4bd6bf265f1f43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8085c586613ba2905acd555b0b4bd6bf265f1f43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8085c586613ba2905acd555b0b4bd6bf265f1f43", "patch": "@@ -1,3 +1,9 @@\n+2012-02-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52244\n+\tPR tree-optimization/51528\n+\t* gcc.dg/torture/pr52244.c: New testcase.\n+\n 2012-02-14  Walter Lee  <walt@tilera.com>\n \n \t* g++.dg/other/PR23205.C: Disable test on tile."}, {"sha": "2a29e3cf42066db2a86a99cd572d988487d574af", "filename": "gcc/testsuite/gcc.dg/torture/pr52244.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8085c586613ba2905acd555b0b4bd6bf265f1f43/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52244.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8085c586613ba2905acd555b0b4bd6bf265f1f43/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52244.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52244.c?ref=8085c586613ba2905acd555b0b4bd6bf265f1f43", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+typedef union u_r \n+{\n+  _Bool b;\n+  unsigned char c;\n+} u_t;\n+\n+u_t\n+bar (void)\n+{\n+  u_t u;\n+  u.c = 0x12;\n+  return u;\n+}\n+\n+u_t  __attribute__ ((noinline))\n+foo (void)\n+{\n+  u_t u;\n+\n+  u.b = 1;\n+  u = bar ();\n+\n+  return u;\n+}\n+\n+int main (int argc, char **argv)\n+{\n+  u_t u = foo ();\n+  if (u.c != 0x12)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "1439c43c8896c7cb5ddaaa30391331dfe701321e", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8085c586613ba2905acd555b0b4bd6bf265f1f43/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8085c586613ba2905acd555b0b4bd6bf265f1f43/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=8085c586613ba2905acd555b0b4bd6bf265f1f43", "patch": "@@ -2172,11 +2172,21 @@ analyze_access_subtree (struct access *root, struct access *parent,\n \t      && (root->grp_scalar_write || root->grp_assignment_write))))\n     {\n       bool new_integer_type;\n-      if (TREE_CODE (root->type) == ENUMERAL_TYPE)\n+      /* Always create access replacements that cover the whole access.\n+         For integral types this means the precision has to match.\n+\t Avoid assumptions based on the integral type kind, too.  */\n+      if (INTEGRAL_TYPE_P (root->type)\n+\t  && (TREE_CODE (root->type) != INTEGER_TYPE\n+\t      || TYPE_PRECISION (root->type) != root->size)\n+\t  /* But leave bitfield accesses alone.  */\n+\t  && (root->offset % BITS_PER_UNIT) == 0)\n \t{\n \t  tree rt = root->type;\n-\t  root->type = build_nonstandard_integer_type (TYPE_PRECISION (rt),\n+\t  root->type = build_nonstandard_integer_type (root->size,\n \t\t\t\t\t\t       TYPE_UNSIGNED (rt));\n+\t  root->expr = build_ref_for_offset (UNKNOWN_LOCATION,\n+\t\t\t\t\t     root->base, root->offset,\n+\t\t\t\t\t     root->type, NULL, false);\n \t  new_integer_type = true;\n \t}\n       else"}]}