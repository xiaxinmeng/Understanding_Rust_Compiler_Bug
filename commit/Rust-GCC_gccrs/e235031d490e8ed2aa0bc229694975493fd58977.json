{"sha": "e235031d490e8ed2aa0bc229694975493fd58977", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzNTAzMWQ0OTBlOGVkMmFhMGJjMjI5Njk0OTc1NDkzZmQ1ODk3Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-14T08:04:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-14T08:04:14Z"}, "message": "c++: Partially implement P1042R1: __VA_OPT__ wording clarifications [PR92319]\n\nI've noticed we claim in cxx-status.html that we implement P1042R1,\nbut it seems we don't implement any of the changes from there.\nThe following patch implements just the change that __VA_OPT__ determines\nwhether to expand to nothing or the enclosed tokens no longer based on\nwhether there were any tokens passed to __VA_ARGS__, but whether __VA_ARGS__\nexpands to any tokens (from testing apparently it has to be non-CPP_PADDING\ntokens).\n\nI'm afraid I'm completely lost about the padding preservation/removal\nchanges that are also in the paper, so haven't touched that part.\n\n2020-02-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPartially implement P1042R1: __VA_OPT__ wording clarifications\n\tPR preprocessor/92319\n\t* macro.c (expand_arg): Move declarations before vaopt_state\n\tdefinition.\n\t(class vaopt_state): Move enum update_type definition earlier.  Remove\n\tm_allowed member, add m_arg and m_update members.\n\t(vaopt_state::vaopt_state): Change last argument from bool any_args\n\tto macro_arg *arg, initialize m_arg and m_update instead of m_allowed.\n\t(vaopt_state::update): When bumping m_state from 1 to 2 and m_update\n\tis ERROR, determine if __VA_ARGS__ expansion has any non-CPP_PADDING\n\ttokens and set m_update to INCLUDE if it has any, DROP otherwise.\n\tReturn m_update instead of m_allowed ? INCLUDE : DROP in m_state >= 2.\n\t(replace_args, create_iso_definition): Adjust last argument to\n\tvaopt_state ctor.\n\n\t* c-c++-common/cpp/va-opt-4.c: New test.", "tree": {"sha": "8eb58009c5cfb5ea8faf3a5b76d1f45c3b8101d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eb58009c5cfb5ea8faf3a5b76d1f45c3b8101d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e235031d490e8ed2aa0bc229694975493fd58977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e235031d490e8ed2aa0bc229694975493fd58977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e235031d490e8ed2aa0bc229694975493fd58977", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e235031d490e8ed2aa0bc229694975493fd58977/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c595ad44fa8023f6a7e128e11e4932467fa49ec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c595ad44fa8023f6a7e128e11e4932467fa49ec1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c595ad44fa8023f6a7e128e11e4932467fa49ec1"}], "stats": {"total": 104, "additions": 85, "deletions": 19}, "files": [{"sha": "e42751e565894ab9494676c4aab5ea11f0b962ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e235031d490e8ed2aa0bc229694975493fd58977/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e235031d490e8ed2aa0bc229694975493fd58977/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e235031d490e8ed2aa0bc229694975493fd58977", "patch": "@@ -1,3 +1,9 @@\n+2020-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPartially implement P1042R1: __VA_OPT__ wording clarifications\n+\tPR preprocessor/92319\n+\t* c-c++-common/cpp/va-opt-4.c: New test.\n+\n 2020-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/93576"}, {"sha": "57241bc80fad7ec73ba8d978fe42e43b4074f2d5", "filename": "gcc/testsuite/c-c++-common/cpp/va-opt-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e235031d490e8ed2aa0bc229694975493fd58977/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e235031d490e8ed2aa0bc229694975493fd58977/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-4.c?ref=e235031d490e8ed2aa0bc229694975493fd58977", "patch": "@@ -0,0 +1,20 @@\n+/* PR preprocessor/92319 */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"-std=c++2a\" { target c++ } } */\n+\n+#define f1(...) b##__VA_OPT__(c)\n+#define e\n+#define e2 e\n+#define e3 1\n+#define e5 e3\n+t1 f1 (e);\n+/* { dg-final { scan-file va-opt-4.i \"t1 b;\" } } */\n+t2 f1 (e2);\n+/* { dg-final { scan-file va-opt-4.i \"t2 b;\" } } */\n+t3 f1 (e3);\n+/* { dg-final { scan-file va-opt-4.i \"t3 bc;\" } } */\n+t4 f1 (e4);\n+/* { dg-final { scan-file va-opt-4.i \"t4 bc;\" } } */\n+t5 f1 (e5);\n+/* { dg-final { scan-file va-opt-4.i \"t5 bc;\" } } */"}, {"sha": "307cf3add94d68f042ed179906beefe1e8d84bcd", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e235031d490e8ed2aa0bc229694975493fd58977/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e235031d490e8ed2aa0bc229694975493fd58977/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e235031d490e8ed2aa0bc229694975493fd58977", "patch": "@@ -1,3 +1,20 @@\n+2020-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPartially implement P1042R1: __VA_OPT__ wording clarifications\n+\tPR preprocessor/92319\n+\t* macro.c (expand_arg): Move declarations before vaopt_state\n+\tdefinition.\n+\t(class vaopt_state): Move enum update_type definition earlier.  Remove\n+\tm_allowed member, add m_arg and m_update members.\n+\t(vaopt_state::vaopt_state): Change last argument from bool any_args\n+\tto macro_arg *arg, initialize m_arg and m_update instead of m_allowed.\n+\t(vaopt_state::update): When bumping m_state from 1 to 2 and m_update\n+\tis ERROR, determine if __VA_ARGS__ expansion has any non-CPP_PADDING\n+\ttokens and set m_update to INCLUDE if it has any, DROP otherwise.\n+\tReturn m_update instead of m_allowed ? INCLUDE : DROP in m_state >= 2.\n+\t(replace_args, create_iso_definition): Adjust last argument to\n+\tvaopt_state ctor.\n+\n 2020-02-05  Martin Sebor  <msebor@redhat.com>\n \n \t* include/cpplib.h (cpp_builtin_type): Remove trailing comma to"}, {"sha": "2573f316bf512dfdb40cfbb6f437daac38fe1d96", "filename": "libcpp/macro.c", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e235031d490e8ed2aa0bc229694975493fd58977/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e235031d490e8ed2aa0bc229694975493fd58977/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=e235031d490e8ed2aa0bc229694975493fd58977", "patch": "@@ -93,35 +93,38 @@ struct macro_arg_saved_data {\n static const char *vaopt_paste_error =\n   N_(\"'##' cannot appear at either end of __VA_OPT__\");\n \n+static void expand_arg (cpp_reader *, macro_arg *);\n+\n /* A class for tracking __VA_OPT__ state while iterating over a\n    sequence of tokens.  This is used during both macro definition and\n    expansion.  */\n class vaopt_state {\n \n  public:\n \n+  enum update_type\n+  {\n+    ERROR,\n+    DROP,\n+    INCLUDE,\n+    BEGIN,\n+    END\n+  };\n+\n   /* Initialize the state tracker.  ANY_ARGS is true if variable\n      arguments were provided to the macro invocation.  */\n-  vaopt_state (cpp_reader *pfile, bool is_variadic, bool any_args)\n+  vaopt_state (cpp_reader *pfile, bool is_variadic, macro_arg *arg)\n     : m_pfile (pfile),\n-    m_allowed (any_args),\n+    m_arg (arg),\n     m_variadic (is_variadic),\n     m_last_was_paste (false),\n     m_state (0),\n     m_paste_location (0),\n-    m_location (0)\n+    m_location (0),\n+    m_update (ERROR)\n   {\n   }\n \n-  enum update_type\n-  {\n-    ERROR,\n-    DROP,\n-    INCLUDE,\n-    BEGIN,\n-    END\n-  };\n-\n   /* Given a token, update the state of this tracker and return a\n      boolean indicating whether the token should be be included in the\n      expansion.  */\n@@ -154,6 +157,23 @@ class vaopt_state {\n \t    return ERROR;\n \t  }\n \t++m_state;\n+\tif (m_update == ERROR)\n+\t  {\n+\t    if (m_arg == NULL)\n+\t      m_update = INCLUDE;\n+\t    else\n+\t      {\n+\t\tm_update = DROP;\n+\t\tif (!m_arg->expanded)\n+\t\t  expand_arg (m_pfile, m_arg);\n+\t\tfor (unsigned idx = 0; idx < m_arg->expanded_count; ++idx)\n+\t\t  if (m_arg->expanded[idx]->type != CPP_PADDING)\n+\t\t    {\n+\t\t      m_update = INCLUDE;\n+\t\t      break;\n+\t\t    }\n+\t      }\n+\t  }\n \treturn DROP;\n       }\n     else if (m_state >= 2)\n@@ -197,7 +217,7 @@ class vaopt_state {\n \t\treturn END;\n \t      }\n \t  }\n-\treturn m_allowed ? INCLUDE : DROP;\n+\treturn m_update;\n       }\n \n     /* Nothing to do with __VA_OPT__.  */\n@@ -219,8 +239,9 @@ class vaopt_state {\n   /* The cpp_reader.  */\n   cpp_reader *m_pfile;\n \n-  /* True if there were varargs.  */\n-  bool m_allowed;\n+  /* The __VA_ARGS__ argument.  */\n+  macro_arg *m_arg;\n+\n   /* True if the macro is variadic.  */\n   bool m_variadic;\n   /* If true, the previous token was ##.  This is used to detect when\n@@ -239,6 +260,10 @@ class vaopt_state {\n \n   /* Location of the __VA_OPT__ token.  */\n   location_t m_location;\n+\n+  /* If __VA_ARGS__ substitutes to no preprocessing tokens,\n+     INCLUDE, otherwise DROP.  ERROR when unknown yet.  */\n+  update_type m_update;\n };\n \n /* Macro expansion.  */\n@@ -256,7 +281,6 @@ static _cpp_buff *collect_args (cpp_reader *, const cpp_hashnode *,\n \t\t\t\t_cpp_buff **, unsigned *);\n static cpp_context *next_context (cpp_reader *);\n static const cpp_token *padding_token (cpp_reader *, const cpp_token *);\n-static void expand_arg (cpp_reader *, macro_arg *);\n static const cpp_token *new_string_token (cpp_reader *, uchar *, unsigned int);\n static const cpp_token *stringify_arg (cpp_reader *, macro_arg *);\n static void paste_all_tokens (cpp_reader *, const cpp_token *);\n@@ -1924,8 +1948,7 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t\t\t num_macro_tokens);\n     }\n   i = 0;\n-  vaopt_state vaopt_tracker (pfile, macro->variadic,\n-\t\t\t     args[macro->paramc - 1].count > 0);\n+  vaopt_state vaopt_tracker (pfile, macro->variadic, &args[macro->paramc - 1]);\n   const cpp_token **vaopt_start = NULL;\n   for (src = macro->exp.tokens; src < limit; src++)\n     {\n@@ -3424,7 +3447,7 @@ create_iso_definition (cpp_reader *pfile)\n       macro->count = 1;\n     }\n \n-  for (vaopt_state vaopt_tracker (pfile, macro->variadic, true);; token = NULL)\n+  for (vaopt_state vaopt_tracker (pfile, macro->variadic, NULL);; token = NULL)\n     {\n       if (!token)\n \t{"}]}