{"sha": "b5f89788219bb69aa9d4c37b3673f96c4eb339a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVmODk3ODgyMTliYjY5YWE5ZDRjMzdiMzY3M2Y5NmM0ZWIzMzlhNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-12T16:48:07Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-12T16:48:07Z"}, "message": "(unroll_loop): Don't move reg if used in copy_end and that is a\nJUMP_INSN.\n\nFrom-SVN: r9646", "tree": {"sha": "238ec9f0a4993c31c984d43d69b1f084433d735e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/238ec9f0a4993c31c984d43d69b1f084433d735e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5f89788219bb69aa9d4c37b3673f96c4eb339a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f89788219bb69aa9d4c37b3673f96c4eb339a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5f89788219bb69aa9d4c37b3673f96c4eb339a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f89788219bb69aa9d4c37b3673f96c4eb339a7/comments", "author": null, "committer": null, "parents": [{"sha": "454e0249676efa5688841900b0447fe690fb8742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/454e0249676efa5688841900b0447fe690fb8742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/454e0249676efa5688841900b0447fe690fb8742"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "050273fc89c2e4d20ce69de15e01a5d11efe63db", "filename": "gcc/unroll.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f89788219bb69aa9d4c37b3673f96c4eb339a7/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f89788219bb69aa9d4c37b3673f96c4eb339a7/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=b5f89788219bb69aa9d4c37b3673f96c4eb339a7", "patch": "@@ -728,17 +728,17 @@ unroll_loop (loop_end, insn_count, loop_start, end_insert_before,\n     int copy_start_luid = INSN_LUID (copy_start);\n     int copy_end_luid = INSN_LUID (copy_end);\n \n+    /* If a register is used in the jump insn, we must not duplicate it\n+       since it will also be used outside the loop.  */\n+    if (GET_CODE (copy_end) == JUMP_INSN)\n+      copy_end_luid--;\n+\n     for (j = FIRST_PSEUDO_REGISTER; j < maxregnum; ++j)\n-      {\n-\tint first_uid = regno_first_uid[j];\n-\tint last_uid = regno_last_uid[j];\n-\n-\tif (first_uid > 0 && first_uid <= max_uid_for_loop\n-\t    && uid_luid[first_uid] >= copy_start_luid\n-\t    && last_uid > 0 && last_uid <= max_uid_for_loop\n-\t    && uid_luid[last_uid] <= copy_end_luid)\n-\t  local_regno[j] = 1;\n-      }\n+      if (regno_first_uid[j] > 0 && regno_first_uid[j] <= max_uid_for_loop\n+\t  && uid_luid[regno_first_uid[j]] >= copy_start_luid\n+\t  && regno_last_uid[j] > 0 && regno_last_uid[j] <= max_uid_for_loop\n+\t  && uid_luid[regno_last_uid[j]] <= copy_end_luid)\n+\tlocal_regno[j] = 1;\n   }\n \n   /* If this loop requires exit tests when unrolled, check to see if we"}]}