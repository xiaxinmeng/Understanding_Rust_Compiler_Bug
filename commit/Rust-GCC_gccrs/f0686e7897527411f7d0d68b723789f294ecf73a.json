{"sha": "f0686e7897527411f7d0d68b723789f294ecf73a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA2ODZlNzg5NzUyNzQxMWY3ZDBkNjhiNzIzNzg5ZjI5NGVjZjczYQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2011-05-31T16:25:50Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2011-05-31T16:25:50Z"}, "message": "params.def (PARAM_MAX_VARTRACK_EXPR_DEPTH): New.\n\n* params.def (PARAM_MAX_VARTRACK_EXPR_DEPTH): New.\n* doc/invoke.texi: Document max-vartrack-expr-depth.\n* var-tracking.c (EXPR_DEPTH): New.\n(reverse_op, vt_expand_loc, vt_expand_loc_dummy): Use it.\n\nFrom-SVN: r174494", "tree": {"sha": "10f6fe370da39bbfb62e0e10867451db1c5a2339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10f6fe370da39bbfb62e0e10867451db1c5a2339"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0686e7897527411f7d0d68b723789f294ecf73a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0686e7897527411f7d0d68b723789f294ecf73a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0686e7897527411f7d0d68b723789f294ecf73a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0686e7897527411f7d0d68b723789f294ecf73a/comments", "author": null, "committer": null, "parents": [{"sha": "f3308413143e977215c386e3a51711380749f04f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3308413143e977215c386e3a51711380749f04f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3308413143e977215c386e3a51711380749f04f"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "e1e32af417c4be0317b4f911adbc0dd4184c3d2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0686e7897527411f7d0d68b723789f294ecf73a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0686e7897527411f7d0d68b723789f294ecf73a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0686e7897527411f7d0d68b723789f294ecf73a", "patch": "@@ -1,3 +1,10 @@\n+2011-05-31  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* params.def (PARAM_MAX_VARTRACK_EXPR_DEPTH): New.\n+\t* doc/invoke.texi: Document max-vartrack-expr-depth.\n+\t* var-tracking.c (EXPR_DEPTH): New.\n+\t(reverse_op, vt_expand_loc, vt_expand_loc_dummy): Use it.\n+\n 2011-05-31  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* config/i386/i386.c (ix86_rtx_costs): Drop NEG from sub for FMA."}, {"sha": "20ee33bb16a72e0cca24e992c648db83db6b2f91", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0686e7897527411f7d0d68b723789f294ecf73a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0686e7897527411f7d0d68b723789f294ecf73a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f0686e7897527411f7d0d68b723789f294ecf73a", "patch": "@@ -8940,6 +8940,16 @@ the function.  If the limit is exceeded even without debug insns, var\n tracking analysis is completely disabled for the function.  Setting\n the parameter to zero makes it unlimited.\n \n+@item max-vartrack-expr-depth\n+Sets a maximum number of recursion levels when attempting to map\n+variable names or debug temporaries to value expressions.  This trades\n+compile time for more complete debug information.  If this is set too\n+low, value expressions that are available and could be represented in\n+debug information may end up not being used; setting this higher may\n+enable the compiler to find more complex debug expressions, but compile\n+time may grow exponentially, and even then, it may fail to find more\n+usable expressions.  The default is 10.\n+\n @item min-nondebug-insn-uid\n Use uids starting at this parameter for nondebug insns.  The range below\n the parameter is reserved exclusively for debug insns created by"}, {"sha": "2ed0acac36c8a228fb7340fa969f2c6bb33ccd4d", "filename": "gcc/params.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0686e7897527411f7d0d68b723789f294ecf73a/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0686e7897527411f7d0d68b723789f294ecf73a/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=f0686e7897527411f7d0d68b723789f294ecf73a", "patch": "@@ -839,6 +839,14 @@ DEFPARAM (PARAM_MAX_VARTRACK_SIZE,\n \t  \"Max. size of var tracking hash tables\",\n \t  50000000, 0, 0)\n \n+/* Set maximum recursion depth for var tracking expression expansion\n+   and resolution.  */\n+\n+DEFPARAM (PARAM_MAX_VARTRACK_EXPR_DEPTH,\n+\t  \"max-vartrack-expr-depth\",\n+\t  \"Max. recursion depth for expanding var tracking expressions\",\n+\t  10, 0, 0)\n+\n /* Set minimum insn uid for non-debug insns.  */\n \n DEFPARAM (PARAM_MIN_NONDEBUG_INSN_UID,"}, {"sha": "488635d7f64a3de6b0ce945f14833eb87f97f922", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0686e7897527411f7d0d68b723789f294ecf73a/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0686e7897527411f7d0d68b723789f294ecf73a/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=f0686e7897527411f7d0d68b723789f294ecf73a", "patch": "@@ -5215,6 +5215,8 @@ add_uses_1 (rtx *x, void *cui)\n   for_each_rtx (x, add_uses, cui);\n }\n \n+#define EXPR_DEPTH (PARAM_VALUE (PARAM_MAX_VARTRACK_EXPR_DEPTH))\n+\n /* Attempt to reverse the EXPR operation in the debug info.  Say for\n    reg1 = reg2 + 6 even when reg2 is no longer live we\n    can express its value as VAL - 6.  */\n@@ -5286,7 +5288,7 @@ reverse_op (rtx val, const_rtx expr)\n       arg = XEXP (src, 1);\n       if (!CONST_INT_P (arg) && GET_CODE (arg) != SYMBOL_REF)\n \t{\n-\t  arg = cselib_expand_value_rtx (arg, scratch_regs, 5);\n+\t  arg = cselib_expand_value_rtx (arg, scratch_regs, EXPR_DEPTH);\n \t  if (arg == NULL_RTX)\n \t    return NULL_RTX;\n \t  if (!CONST_INT_P (arg) && GET_CODE (arg) != SYMBOL_REF)\n@@ -7416,7 +7418,7 @@ vt_expand_loc (rtx loc, htab_t vars, bool ignore_cur_loc)\n   data.dummy = false;\n   data.cur_loc_changed = false;\n   data.ignore_cur_loc = ignore_cur_loc;\n-  loc = cselib_expand_value_rtx_cb (loc, scratch_regs, 8,\n+  loc = cselib_expand_value_rtx_cb (loc, scratch_regs, EXPR_DEPTH,\n \t\t\t\t    vt_expand_loc_callback, &data);\n \n   if (loc && MEM_P (loc))\n@@ -7438,7 +7440,7 @@ vt_expand_loc_dummy (rtx loc, htab_t vars, bool *pcur_loc_changed)\n   data.dummy = true;\n   data.cur_loc_changed = false;\n   data.ignore_cur_loc = false;\n-  ret = cselib_dummy_expand_value_rtx_cb (loc, scratch_regs, 8,\n+  ret = cselib_dummy_expand_value_rtx_cb (loc, scratch_regs, EXPR_DEPTH,\n \t\t\t\t\t  vt_expand_loc_callback, &data);\n   *pcur_loc_changed = data.cur_loc_changed;\n   return ret;"}]}