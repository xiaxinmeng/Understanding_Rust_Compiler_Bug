{"sha": "22e54023ca7fbcbe877b51687a9a6698640ee011", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJlNTQwMjNjYTdmYmNiZTg3N2I1MTY4N2E5YTY2OTg2NDBlZTAxMQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-11-27T23:00:57Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-11-27T23:00:57Z"}, "message": "re PR target/16800 (PowerPC - Unnecessary rldicl)\n\n        PR target/16800\n        * config/rs6000/rs6000.c (rs6000_rtx_costs): Improve accuracy of\n        EQ, GTU, and LTU costs.  Add costs for GT, LT, and UNORDERED.\n        Distinguish between SImode and DImode CONST_INT.\n\nFrom-SVN: r91399", "tree": {"sha": "1f07b6f19a05e0aae2020b433c8a7b2c43c1097f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f07b6f19a05e0aae2020b433c8a7b2c43c1097f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22e54023ca7fbcbe877b51687a9a6698640ee011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e54023ca7fbcbe877b51687a9a6698640ee011", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22e54023ca7fbcbe877b51687a9a6698640ee011", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e54023ca7fbcbe877b51687a9a6698640ee011/comments", "author": null, "committer": null, "parents": [{"sha": "7482ad259b15635788b1069dcfc6c8dca402f922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7482ad259b15635788b1069dcfc6c8dca402f922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7482ad259b15635788b1069dcfc6c8dca402f922"}], "stats": {"total": 82, "additions": 59, "deletions": 23}, "files": [{"sha": "cc56027bc397f1b3544739d6d4bde0aa7dbffbd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e54023ca7fbcbe877b51687a9a6698640ee011/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e54023ca7fbcbe877b51687a9a6698640ee011/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22e54023ca7fbcbe877b51687a9a6698640ee011", "patch": "@@ -1,3 +1,10 @@\n+2004-11-28  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tPR target/16800\n+\t* config/rs6000/rs6000.c (rs6000_rtx_costs): Improve accuracy of\n+\tEQ, GTU, and LTU costs.  Add costs for GT, LT, and UNORDERED.\n+\tDistinguish between SImode and DImode CONST_INT.\n+\n 2004-11-28  Andreas Fischer <a_fisch@gmx.de>\n \t    Alan Modra  <amodra@bigpond.net.au>\n "}, {"sha": "ab80a47bdf21a5d104d237f6fef7af640eb6a8cf", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e54023ca7fbcbe877b51687a9a6698640ee011/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e54023ca7fbcbe877b51687a9a6698640ee011/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=22e54023ca7fbcbe877b51687a9a6698640ee011", "patch": "@@ -18050,16 +18050,15 @@ rs6000_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t    || outer_code == MINUS)\n \t   && (CONST_OK_FOR_LETTER_P (INTVAL (x), 'I')\n \t       || CONST_OK_FOR_LETTER_P (INTVAL (x), 'L')))\n-\t  || ((outer_code == IOR || outer_code == XOR)\n-\t      && (CONST_OK_FOR_LETTER_P (INTVAL (x), 'K')\n-\t\t  || CONST_OK_FOR_LETTER_P (INTVAL (x), 'L')))\n-\t  || ((outer_code == DIV || outer_code == UDIV\n-\t       || outer_code == MOD || outer_code == UMOD)\n-\t      && exact_log2 (INTVAL (x)) >= 0)\n \t  || (outer_code == AND\n \t      && (CONST_OK_FOR_LETTER_P (INTVAL (x), 'K')\n-\t\t  || CONST_OK_FOR_LETTER_P (INTVAL (x), 'L')\n+\t\t  || (CONST_OK_FOR_LETTER_P (INTVAL (x),\n+\t\t\t\t\t     mode == SImode ? 'L' : 'J'))\n \t\t  || mask_operand (x, VOIDmode)))\n+\t  || ((outer_code == IOR || outer_code == XOR)\n+\t      && (CONST_OK_FOR_LETTER_P (INTVAL (x), 'K')\n+\t\t  || (CONST_OK_FOR_LETTER_P (INTVAL (x),\n+\t\t\t\t\t     mode == SImode ? 'L' : 'J'))))\n \t  || outer_code == ASHIFT\n \t  || outer_code == ASHIFTRT\n \t  || outer_code == LSHIFTRT\n@@ -18068,9 +18067,21 @@ rs6000_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  || outer_code == ZERO_EXTRACT\n \t  || (outer_code == MULT\n \t      && CONST_OK_FOR_LETTER_P (INTVAL (x), 'I'))\n+\t  || ((outer_code == DIV || outer_code == UDIV\n+\t       || outer_code == MOD || outer_code == UMOD)\n+\t      && exact_log2 (INTVAL (x)) >= 0)\n \t  || (outer_code == COMPARE\n \t      && (CONST_OK_FOR_LETTER_P (INTVAL (x), 'I')\n-\t\t  || CONST_OK_FOR_LETTER_P (INTVAL (x), 'K'))))\n+\t\t  || CONST_OK_FOR_LETTER_P (INTVAL (x), 'K')))\n+\t  || (outer_code == EQ\n+\t      && (CONST_OK_FOR_LETTER_P (INTVAL (x), 'I')\n+\t\t  || CONST_OK_FOR_LETTER_P (INTVAL (x), 'K')\n+\t\t  || (CONST_OK_FOR_LETTER_P (INTVAL (x),\n+\t\t\t\t\t     mode == SImode ? 'L' : 'J'))))\n+\t  || (outer_code == GTU\n+\t      && CONST_OK_FOR_LETTER_P (INTVAL (x), 'I'))\n+\t  || (outer_code == LTU\n+\t      && CONST_OK_FOR_LETTER_P (INTVAL (x), 'P')))\n \t{\n \t  *total = 0;\n \t  return true;\n@@ -18348,26 +18359,44 @@ rs6000_rtx_costs (rtx x, int code, int outer_code, int *total)\n     case EQ:\n     case GTU:\n     case LTU:\n-      if (mode == Pmode)\n+      /* Carry bit requires mode == Pmode.\n+\t NEG or PLUS already counted so only add one.  */\n+      if (mode == Pmode\n+\t  && (outer_code == NEG || outer_code == PLUS))\n \t{\n-\t  switch (outer_code)\n+\t  *total = COSTS_N_INSNS (1);\n+\t  return true;\n+\t}\n+      if (outer_code == SET)\n+\t{\n+\t  if (XEXP (x, 1) == const0_rtx)\n \t    {\n-\t    case PLUS:\n-\t    case NEG:\n-\t      /* PLUS or NEG already counted so only add one more.  */\n-\t      *total = COSTS_N_INSNS (1);\n-\t      break;\n-\t    case SET:\n-\t      *total = COSTS_N_INSNS (3);\n-\t      break;\n-\t    case COMPARE:\n-\t      *total = 0;\n+\t      *total = COSTS_N_INSNS (2);\n \t      return true;\n-\t    default:\n-\t      break;\n \t    }\n-\t  return false;\n+\t  else if (mode == Pmode)\n+\t    {\n+\t      *total = COSTS_N_INSNS (3);\n+\t      return false;\n+\t    }\n+\t}\n+      /* FALLTHRU */\n+\n+    case GT:\n+    case LT:\n+    case UNORDERED:\n+      if (outer_code == SET && (XEXP (x, 1) == const0_rtx))\n+\t{\n+\t  *total = COSTS_N_INSNS (2);\n+\t  return true;\n \t}\n+      /* CC COMPARE.  */\n+      if (outer_code == COMPARE)\n+\t{\n+\t  *total = 0;\n+\t  return true;\n+\t}\n+      break;\n \n     default:\n       break;"}]}