{"sha": "7fb1431bfa30ac9d85fb614f786c8076ff407673", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZiMTQzMWJmYTMwYWM5ZDg1ZmI2MTRmNzg2YzgwNzZmZjQwNzY3Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-03-21T20:43:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-03-21T20:43:12Z"}, "message": "re PR target/13958 (Conversion from unsigned to double is painfully slow on P4)\n\n        PR target/13958\n        * config/i386/i386.md (\"*floatunssi<mode2>_1\"): New pattern with\n        corresponding post-reload splitters.\n        (\"floatunssi<mode>2\"): Expand to unsigned_float x87 insn pattern\n        when x87 FP math is selected.\n        * config/i386/i386-protos.h (ix86_expand_convert_uns_sixf_sse):\n        New function prototype.\n        * config/i386/i386.c (ix86_expand_convert_uns_sixf_sse): New\n        unreachable function to ease macroization of insn patterns.\n\nFrom-SVN: r133435", "tree": {"sha": "f48dc228641417cc62eedebc0140261cfaf8bac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f48dc228641417cc62eedebc0140261cfaf8bac7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fb1431bfa30ac9d85fb614f786c8076ff407673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb1431bfa30ac9d85fb614f786c8076ff407673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb1431bfa30ac9d85fb614f786c8076ff407673", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb1431bfa30ac9d85fb614f786c8076ff407673/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e1e64ec2b978e81924000db7d4009b92bb5a638", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1e64ec2b978e81924000db7d4009b92bb5a638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e1e64ec2b978e81924000db7d4009b92bb5a638"}], "stats": {"total": 94, "additions": 89, "deletions": 5}, "files": [{"sha": "3d2ad8ff0269e946897dcf9a8aefa8153ce7733f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb1431bfa30ac9d85fb614f786c8076ff407673/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb1431bfa30ac9d85fb614f786c8076ff407673/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fb1431bfa30ac9d85fb614f786c8076ff407673", "patch": "@@ -1,3 +1,15 @@\n+2008-03-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/13958\n+\t* config/i386/i386.md (\"*floatunssi<mode2>_1\"): New pattern with\n+\tcorresponding post-reload splitters.\n+\t(\"floatunssi<mode>2\"): Expand to unsigned_float x87 insn pattern\n+\twhen x87 FP math is selected.\n+\t* config/i386/i386-protos.h (ix86_expand_convert_uns_sixf_sse):\n+\tNew function prototype.\n+\t* config/i386/i386.c (ix86_expand_convert_uns_sixf_sse): New\n+\tunreachable function to ease macroization of insn patterns.\n+\n 2008-03-21  Martin Jambor  <mjambor@suse.cz>\n \n \t* tree-data-ref.c (dump_data_dependence_relation): Avoid data"}, {"sha": "ef2e0ff5db0c857c6d3e460d1f16c90035d64db2", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb1431bfa30ac9d85fb614f786c8076ff407673/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb1431bfa30ac9d85fb614f786c8076ff407673/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=7fb1431bfa30ac9d85fb614f786c8076ff407673", "patch": "@@ -91,6 +91,7 @@ extern void ix86_expand_unary_operator (enum rtx_code, enum machine_mode,\n extern rtx ix86_build_const_vector (enum machine_mode, bool, rtx);\n extern void ix86_split_convert_uns_si_sse (rtx[]);\n extern void ix86_expand_convert_uns_didf_sse (rtx, rtx);\n+extern void ix86_expand_convert_uns_sixf_sse (rtx, rtx);\n extern void ix86_expand_convert_uns_sidf_sse (rtx, rtx);\n extern void ix86_expand_convert_uns_sisf_sse (rtx, rtx);\n extern void ix86_expand_convert_sign_didf_sse (rtx, rtx);"}, {"sha": "8ddfa9f183b28c5df331704dcc57917c48c5bad4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb1431bfa30ac9d85fb614f786c8076ff407673/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb1431bfa30ac9d85fb614f786c8076ff407673/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7fb1431bfa30ac9d85fb614f786c8076ff407673", "patch": "@@ -10903,6 +10903,14 @@ ix86_expand_convert_uns_didf_sse (rtx target, rtx input)\n   ix86_expand_vector_extract (false, target, fp_xmm, 0);\n }\n \n+/* Not used, but eases macroization of patterns.  */\n+void\n+ix86_expand_convert_uns_sixf_sse (rtx target ATTRIBUTE_UNUSED,\n+\t\t\t\t  rtx input ATTRIBUTE_UNUSED)\n+{\n+  gcc_unreachable ();\n+}\n+\n /* Convert an unsigned SImode value into a DFmode.  Only currently used\n    for SSE, but applicable anywhere.  */\n "}, {"sha": "8b0a2803c11de95662b6c4a340b019fdec0a582b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 68, "deletions": 5, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb1431bfa30ac9d85fb614f786c8076ff407673/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb1431bfa30ac9d85fb614f786c8076ff407673/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7fb1431bfa30ac9d85fb614f786c8076ff407673", "patch": "@@ -5313,13 +5313,76 @@\n   DONE;\n })\n \n+;; Avoid store forwarding (partial memory) stall penalty by extending\n+;; SImode value to DImode through XMM register instead of pushing two\n+;; SImode values to stack. Note that even !TARGET_INTER_UNIT_MOVES\n+;; targets benefit from this optimization. Also note that fild\n+;; loads from memory only.\n+\n+(define_insn \"*floatunssi<mode>2_1\"\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f,f\")\n+\t(unsigned_float:X87MODEF\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \"x,m\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"=m,m\"))\n+   (clobber (match_scratch:SI 3 \"=X,x\"))]\n+  \"!TARGET_64BIT\n+   && TARGET_80387 && TARGET_SSE\"\n+  \"#\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_split\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(unsigned_float:X87MODEF\n+\t  (match_operand:SI 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"\"))\n+   (clobber (match_scratch:SI 3 \"\"))]\n+  \"!TARGET_64BIT\n+   && TARGET_80387 && TARGET_SSE\n+   && reload_completed\"\n+  [(set (match_dup 2) (match_dup 1))\n+   (set (match_dup 0)\n+\t(float:X87MODEF (match_dup 2)))]\n+  \"operands[1] = simplify_gen_subreg (DImode, operands[1], SImode, 0);\")\n+\n+(define_split\n+  [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t(unsigned_float:X87MODEF\n+\t  (match_operand:SI 1 \"memory_operand\" \"\")))\n+   (clobber (match_operand:DI 2 \"memory_operand\" \"\"))\n+   (clobber (match_scratch:SI 3 \"\"))]\n+  \"!TARGET_64BIT\n+   && TARGET_80387 && TARGET_SSE\n+   && reload_completed\"\n+  [(set (match_dup 2) (match_dup 3))\n+   (set (match_dup 0)\n+\t(float:X87MODEF (match_dup 2)))]\n+{\n+  emit_move_insn (operands[3], operands[1]);\n+  operands[3] = simplify_gen_subreg (DImode, operands[3], SImode, 0);\n+})\n+\n (define_expand \"floatunssi<mode>2\"\n-  [(use (match_operand:MODEF 0 \"register_operand\" \"\"))\n-   (use (match_operand:SI 1 \"nonimmediate_operand\" \"\"))]\n-  \"!TARGET_64BIT && SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n+  [(parallel\n+     [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n+\t   (unsigned_float:X87MODEF\n+\t     (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+      (clobber (match_dup 2))\n+      (clobber (match_scratch:SI 3 \"\"))])]\n+  \"!TARGET_64BIT\n+   && ((TARGET_80387 && TARGET_SSE)\n+       || (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH))\"\n {\n-  ix86_expand_convert_uns_si<mode>_sse (operands[0], operands[1]);\n-  DONE;\n+  if (SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+    {\n+      ix86_expand_convert_uns_si<mode>_sse (operands[0], operands[1]);\n+      DONE;\n+    }\n+  else\n+    {\n+      int slot = virtuals_instantiated ? SLOT_TEMP : SLOT_VIRTUAL;\n+      operands[2] = assign_386_stack_local (DImode, slot);\n+    }\n })\n \n (define_expand \"floatunsdisf2\""}]}