{"sha": "e1cad93084f9cd5bcdb3f3b0b6214605c8043871", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFjYWQ5MzA4NGY5Y2Q1YmNkYjNmM2IwYjYyMTQ2MDVjODA0Mzg3MQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-26T16:34:40Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-26T16:34:40Z"}, "message": "call.c (build_operator_new_call): Do namelookup and ADL here.\n\n\tgcc/cp/\n\t* call.c (build_operator_new_call): Do namelookup and ADL here.\n\t(build_new_op_1): Likewise.\n\t* name-lookup.h (lookup_function_nonclass): Delete declaration.\n\t(do_using_directive): Likewise.\n\t* name-lookup.c (set_namespace_binding, push_local_binding): Don't\n\tdeclare early.\n\t(struct scope_binding): Delete.\n\t(EMPTY_SCOPE_BINDING): Delete.\n\t(set_decl_namespace): Use OVL_P.\n\t(finish_local_using_decl): Lose unnecesary checks.\n\t(lookup_function_nonclass): Delete.\n\t(cp_emit_debug_info_for_using): Use MAYBE_BASELINK_P.\n\n\tlibcc1/\n\t* libcp1plugin.cc (plugin_add_using_namespace): Call\n\tfinish_namespace_using_directive.\n\nFrom-SVN: r248518", "tree": {"sha": "143dc4fbc11d439ac1a7854bee45cf8542e9b7a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/143dc4fbc11d439ac1a7854bee45cf8542e9b7a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1cad93084f9cd5bcdb3f3b0b6214605c8043871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1cad93084f9cd5bcdb3f3b0b6214605c8043871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1cad93084f9cd5bcdb3f3b0b6214605c8043871", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1cad93084f9cd5bcdb3f3b0b6214605c8043871/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "32196b873a1ba319e9b3fc4cccb910d8cc4d6b31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32196b873a1ba319e9b3fc4cccb910d8cc4d6b31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32196b873a1ba319e9b3fc4cccb910d8cc4d6b31"}], "stats": {"total": 69, "additions": 33, "deletions": 36}, "files": [{"sha": "88ab214c84c7151f610ff9366ebdf41c6fce9cc3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1cad93084f9cd5bcdb3f3b0b6214605c8043871/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1cad93084f9cd5bcdb3f3b0b6214605c8043871/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e1cad93084f9cd5bcdb3f3b0b6214605c8043871", "patch": "@@ -1,5 +1,18 @@\n 2017-05-26  Nathan Sidwell  <nathan@acm.org>\n \n+\t* call.c (build_operator_new_call): Do namelookup and ADL here.\n+\t(build_new_op_1): Likewise.\n+\t* name-lookup.h (lookup_function_nonclass): Delete declaration.\n+\t(do_using_directive): Likewise.\n+\t* name-lookup.c (set_namespace_binding, push_local_binding): Don't\n+\tdeclare early.\n+\t(struct scope_binding): Delete.\n+\t(EMPTY_SCOPE_BINDING): Delete.\n+\t(set_decl_namespace): Use OVL_P.\n+\t(finish_local_using_decl): Lose unnecesary checks.\n+\t(lookup_function_nonclass): Delete.\n+\t(cp_emit_debug_info_for_using): Use MAYBE_BASELINK_P.\n+\n \t* cp-tree.h (OVL_CHAIN): Check looking at OVERLOAD.\n \t(ovl_iterator): Add allow_inner field.  Adjust ctor.  Make\n \tunduplicatable."}, {"sha": "c1fcd194b762a275e78af104b4fc2fb1b153862e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1cad93084f9cd5bcdb3f3b0b6214605c8043871/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1cad93084f9cd5bcdb3f3b0b6214605c8043871/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e1cad93084f9cd5bcdb3f3b0b6214605c8043871", "patch": "@@ -4318,7 +4318,8 @@ build_operator_new_call (tree fnname, vec<tree, va_gc> **args,\n        up in the global scope.\n \n      we disregard block-scope declarations of \"operator new\".  */\n-  fns = lookup_function_nonclass (fnname, *args, /*block_p=*/false);\n+  fns = lookup_name_real (fnname, 0, 1, /*block_p=*/false, 0, 0);\n+  fns = lookup_arg_dependent (fnname, fns, *args);\n \n   if (align_arg)\n     {\n@@ -5628,11 +5629,13 @@ build_new_op_1 (location_t loc, enum tree_code code, int flags, tree arg1,\n   /* Add namespace-scope operators to the list of functions to\n      consider.  */\n   if (!memonly)\n-    add_candidates (lookup_function_nonclass (fnname, arglist,\n-\t\t\t\t\t      /*block_p=*/true),\n-\t\t    NULL_TREE, arglist, NULL_TREE,\n-\t\t    NULL_TREE, false, NULL_TREE, NULL_TREE,\n-\t\t    flags, &candidates, complain);\n+    {\n+      tree fns = lookup_name_real (fnname, 0, 1, /*block_p=*/true, 0, 0);\n+      fns = lookup_arg_dependent (fnname, fns, arglist);\n+      add_candidates (fns, NULL_TREE, arglist, NULL_TREE,\n+\t\t      NULL_TREE, false, NULL_TREE, NULL_TREE,\n+\t\t      flags, &candidates, complain);\n+    }\n \n   args[0] = arg1;\n   args[1] = arg2;"}, {"sha": "c167cd220b9eba88192ee3bb4a0c5c86c044c564", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1cad93084f9cd5bcdb3f3b0b6214605c8043871/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1cad93084f9cd5bcdb3f3b0b6214605c8043871/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=e1cad93084f9cd5bcdb3f3b0b6214605c8043871", "patch": "@@ -37,16 +37,6 @@ static cxx_binding *cxx_binding_make (tree value, tree type);\n static cp_binding_level *innermost_nonclass_level (void);\n static void set_identifier_type_value_with_scope (tree id, tree decl,\n \t\t\t\t\t\t  cp_binding_level *b);\n-static void set_namespace_binding (tree scope, tree name, tree val);\n-static void push_local_binding (tree, tree, bool);\n-\n-/* The bindings for a particular name in a particular scope.  */\n-\n-struct scope_binding {\n-  tree value;\n-  tree type;\n-};\n-#define EMPTY_SCOPE_BINDING { NULL_TREE, NULL_TREE }\n \n /* Create a local binding level for NAME.  */\n \n@@ -4243,7 +4233,7 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n       print_candidates (old);\n       return;\n     }\n-  if (!is_overloaded_fn (decl))\n+  if (!OVL_P (decl))\n     {\n       /* We might have found OLD in an inline namespace inside SCOPE.  */\n       if (TREE_CODE (decl) == TREE_CODE (old))\n@@ -4254,7 +4244,7 @@ set_decl_namespace (tree decl, tree scope, bool friendp)\n       return;\n     }\n   /* Since decl is a function, old should contain a function decl.  */\n-  if (!is_overloaded_fn (old))\n+  if (!OVL_P (old))\n     goto complain;\n   /* We handle these in check_explicit_instantiation_namespace.  */\n   if (processing_explicit_instantiation)\n@@ -4411,6 +4401,7 @@ handle_namespace_attrs (tree ns, tree attributes)\n \n   return saw_vis;\n }\n+\n /* Temporarily set the namespace for the current declaration.  */\n \n void\n@@ -4544,10 +4535,7 @@ finish_local_using_decl (tree decl, tree scope, tree name)\n   if (decl == NULL_TREE)\n     return;\n \n-  gcc_assert (building_stmt_list_p ());\n-  if (building_stmt_list_p ()\n-      && at_function_scope_p ())\n-    add_decl_expr (decl);\n+  add_decl_expr (decl);\n \n   cxx_binding *binding = find_local_binding (current_binding_level, name);\n   tree value = binding ? binding->value : NULL_TREE;\n@@ -5307,15 +5295,6 @@ lookup_name_nonclass (tree name)\n   return lookup_name_real (name, 0, 1, /*block_p=*/true, 0, 0);\n }\n \n-tree\n-lookup_function_nonclass (tree name, vec<tree, va_gc> *args, bool block_p)\n-{\n-  return\n-    lookup_arg_dependent (name,\n-\t\t\t  lookup_name_real (name, 0, 1, block_p, 0, 0),\n-\t\t\t  args);\n-}\n-\n tree\n lookup_name (tree name)\n {\n@@ -6277,8 +6256,7 @@ cp_emit_debug_info_for_using (tree t, tree context)\n   if (context == global_namespace)\n     context = NULL_TREE;\n \n-  if (BASELINK_P (t))\n-    t = BASELINK_FUNCTIONS (t);\n+  t = MAYBE_BASELINK_FUNCTIONS (t);\n \n   /* FIXME: Handle TEMPLATE_DECLs.  */\n   for (lkp_iterator iter (t); iter; ++iter)"}, {"sha": "d41ffd702b2793c1f3bf943d7b51828b7ebe85b7", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1cad93084f9cd5bcdb3f3b0b6214605c8043871/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1cad93084f9cd5bcdb3f3b0b6214605c8043871/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=e1cad93084f9cd5bcdb3f3b0b6214605c8043871", "patch": "@@ -311,7 +311,6 @@ extern void set_global_binding (tree id, tree val);\n extern tree lookup_qualified_name (tree, tree, int, bool, /*hidden*/bool = false);\n extern tree lookup_name_nonclass (tree);\n extern bool is_local_extern (tree);\n-extern tree lookup_function_nonclass (tree, vec<tree, va_gc> *, bool);\n extern bool pushdecl_class_level (tree);\n extern tree pushdecl_namespace_level (tree, bool);\n extern bool push_class_level_binding (tree, tree);\n@@ -323,7 +322,6 @@ extern void push_decl_namespace (tree);\n extern void pop_decl_namespace (void);\n extern void do_namespace_alias (tree, tree);\n extern tree do_class_using_decl (tree, tree);\n-extern void do_using_directive (tree);\n extern tree lookup_arg_dependent (tree, tree, vec<tree, va_gc> *);\n extern tree innermost_non_namespace_value (tree);\n extern cxx_binding *outer_binding (tree, cxx_binding *, bool);"}, {"sha": "76b63883938add8ffa89b9265a67d98d17225289", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1cad93084f9cd5bcdb3f3b0b6214605c8043871/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1cad93084f9cd5bcdb3f3b0b6214605c8043871/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=e1cad93084f9cd5bcdb3f3b0b6214605c8043871", "patch": "@@ -1,3 +1,8 @@\n+2017-05-26  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (plugin_add_using_namespace): Call\n+\tfinish_namespace_using_directive.\n+\n 2017-05-25  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (plugin_make_namespace_inline): Check and set"}, {"sha": "877c2642c361bea84c7518c36664e7bb0d326384", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1cad93084f9cd5bcdb3f3b0b6214605c8043871/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1cad93084f9cd5bcdb3f3b0b6214605c8043871/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=e1cad93084f9cd5bcdb3f3b0b6214605c8043871", "patch": "@@ -946,7 +946,7 @@ plugin_add_using_namespace (cc1_plugin::connection *,\n \n   gcc_assert (TREE_CODE (used_ns) == NAMESPACE_DECL);\n \n-  do_using_directive (used_ns);\n+  finish_namespace_using_directive (used_ns, NULL_TREE);\n \n   return 1;\n }"}]}