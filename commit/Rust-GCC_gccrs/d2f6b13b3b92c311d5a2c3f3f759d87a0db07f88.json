{"sha": "d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJmNmIxM2IzYjkyYzMxMWQ1YTJjM2YzZjc1OWQ4N2EwZGIwN2Y4OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-11-21T09:59:17Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-11-21T09:59:17Z"}, "message": "re PR libstdc++/38210 (num_put<>::do_put(void*) performs padding incorrectly when adjustfield==internal)\n\n2008-11-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/38210\n\t* include/bits/locale_facets.tcc (num_put<>::do_put(iter_type,\n\tios_base&, char_type, const void*)): Fix.\n\t* testsuite/22_locale/num_put/put/char/38210.cc: New.\n\t* testsuite/22_locale/num_put/put/wchar_t/38210.cc: Likewise.\n\nFrom-SVN: r142085", "tree": {"sha": "a835133fe1065cbbb3a8bafdcb4f023ad014e953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a835133fe1065cbbb3a8bafdcb4f023ad014e953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88/comments", "author": null, "committer": null, "parents": [{"sha": "c6d55c5b0eca1f85864f8b668a82248d17060333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d55c5b0eca1f85864f8b668a82248d17060333", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d55c5b0eca1f85864f8b668a82248d17060333"}], "stats": {"total": 157, "additions": 155, "deletions": 2}, "files": [{"sha": "b3a6d11809098e95bb294bb2e2ae7db142bc0dc2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88", "patch": "@@ -1,3 +1,11 @@\n+2008-11-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/38210\n+\t* include/bits/locale_facets.tcc (num_put<>::do_put(iter_type,\n+\tios_base&, char_type, const void*)): Fix.\n+\t* testsuite/22_locale/num_put/put/char/38210.cc: New.\n+\t* testsuite/22_locale/num_put/put/wchar_t/38210.cc: Likewise.\n+\n 2008-11-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/38196"}, {"sha": "4ae827f4e999319b8a09a50e1c309acb54f3233e", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88", "patch": "@@ -1151,8 +1151,7 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n     {\n       const ios_base::fmtflags __flags = __io.flags();\n       const ios_base::fmtflags __fmt = ~(ios_base::basefield\n-\t\t\t\t\t | ios_base::uppercase\n-\t\t\t\t\t | ios_base::internal);\n+\t\t\t\t\t | ios_base::uppercase);\n       __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));\n \n       typedef __gnu_cxx::__conditional_type<(sizeof(const void*)"}, {"sha": "4f43da20f770bc984014a19fccebba997426de1b", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/38210.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F38210.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F38210.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F38210.cc?ref=d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/38210\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  ostringstream oss1, oss2, oss3, oss4;\n+  string result1, result2, result3, result4;\n+\n+  const num_put<char>& ng1 = use_facet<num_put<char> >(oss1.getloc());\n+  const num_put<char>& ng2 = use_facet<num_put<char> >(oss2.getloc());\n+  const num_put<char>& ng3 = use_facet<num_put<char> >(oss3.getloc());\n+  const num_put<char>& ng4 = use_facet<num_put<char> >(oss4.getloc());\n+\n+  void* p = (void*)0x1;\n+\n+  oss1.width(5);\n+  oss1.setf(ios_base::boolalpha);\n+  ng1.put(oss1.rdbuf(), oss1, '*', p);\n+  result1 = oss1.str();\n+  VERIFY( result1 == \"**0x1\" );\n+\n+  oss2.width(5);\n+  oss2.setf(ios_base::right, ios_base::adjustfield);\n+  oss2.setf(ios_base::boolalpha);\n+  ng2.put(oss2.rdbuf(), oss2, '*', p);\n+  result2 = oss2.str();\n+  VERIFY( result2 == \"**0x1\" );\n+\n+  oss3.width(5);\n+  oss3.setf(ios_base::internal, ios_base::adjustfield);\n+  oss3.setf(ios_base::boolalpha);\n+  ng3.put(oss3.rdbuf(), oss3, '*', p);\n+  result3 = oss3.str();\n+  VERIFY( result3 == \"0x**1\" );\n+\n+  oss4.width(5);\n+  oss4.setf(ios_base::left, ios_base::adjustfield);\n+  oss4.setf(ios_base::boolalpha);\n+  ng4.put(oss4.rdbuf(), oss4, '*', p);\n+  result4 = oss4.str();\n+  VERIFY( result4 == \"0x1**\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "175c51c1c04e3548b44f474de6bfe78f8c905554", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/38210.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F38210.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F38210.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F38210.cc?ref=d2f6b13b3b92c311d5a2c3f3f759d87a0db07f88", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/38210\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  wostringstream oss1, oss2, oss3, oss4;\n+  wstring result1, result2, result3, result4;\n+\n+  const num_put<wchar_t>& ng1 = use_facet<num_put<wchar_t> >(oss1.getloc());\n+  const num_put<wchar_t>& ng2 = use_facet<num_put<wchar_t> >(oss2.getloc());\n+  const num_put<wchar_t>& ng3 = use_facet<num_put<wchar_t> >(oss3.getloc());\n+  const num_put<wchar_t>& ng4 = use_facet<num_put<wchar_t> >(oss4.getloc());\n+\n+  void* p = (void*)0x1;\n+\n+  oss1.width(5);\n+  oss1.setf(ios_base::boolalpha);\n+  ng1.put(oss1.rdbuf(), oss1, L'*', p);\n+  result1 = oss1.str();\n+  VERIFY( result1 == L\"**0x1\" );\n+\n+  oss2.width(5);\n+  oss2.setf(ios_base::right, ios_base::adjustfield);\n+  oss2.setf(ios_base::boolalpha);\n+  ng2.put(oss2.rdbuf(), oss2, L'*', p);\n+  result2 = oss2.str();\n+  VERIFY( result2 == L\"**0x1\" );\n+\n+  oss3.width(5);\n+  oss3.setf(ios_base::internal, ios_base::adjustfield);\n+  oss3.setf(ios_base::boolalpha);\n+  ng3.put(oss3.rdbuf(), oss3, L'*', p);\n+  result3 = oss3.str();\n+  VERIFY( result3 == L\"0x**1\" );\n+\n+  oss4.width(5);\n+  oss4.setf(ios_base::left, ios_base::adjustfield);\n+  oss4.setf(ios_base::boolalpha);\n+  ng4.put(oss4.rdbuf(), oss4, L'*', p);\n+  result4 = oss4.str();\n+  VERIFY( result4 == L\"0x1**\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}