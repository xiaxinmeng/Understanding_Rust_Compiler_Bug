{"sha": "38d68cf0f5dae47c558e2ea2a9bf652788a19eeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhkNjhjZjBmNWRhZTQ3YzU1OGUyZWEyYTliZjY1Mjc4OGExOWVlYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-04-18T11:08:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-04-18T11:08:00Z"}, "message": "Fix incorrect results from std::boyer_moore_searcher\n\n\t* include/std/functional (default_searcher, __boyer_moore_array_base)\n\t(__is_std_equal_to, __boyer_moore_base_t, boyer_moore_searcher)\n\t(boyer_moore_horspool_searcher): Remove redundant namespace\n\tqualification.\n\t(default_searcher::operator()): Construct return value early and\n\tadvance second member in-place.\n\t(boyer_moore_horspool_searcher::operator()): Increment random access\n\titerator directly instead of using std::next.\n\t(boyer_moore_searcher::operator()): Fix return value.\n\t* testsuite/20_util/function_objects/searchers.cc: Check both parts\n\tof return values.\n\nFrom-SVN: r246964", "tree": {"sha": "f1da49d134b59a41eab81dbf0982d1e9c2227f21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1da49d134b59a41eab81dbf0982d1e9c2227f21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38d68cf0f5dae47c558e2ea2a9bf652788a19eeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38d68cf0f5dae47c558e2ea2a9bf652788a19eeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38d68cf0f5dae47c558e2ea2a9bf652788a19eeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38d68cf0f5dae47c558e2ea2a9bf652788a19eeb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6e3e8a54cfb57df98db48d728844231f24c0661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e3e8a54cfb57df98db48d728844231f24c0661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e3e8a54cfb57df98db48d728844231f24c0661"}], "stats": {"total": 108, "additions": 81, "deletions": 27}, "files": [{"sha": "503f23411020c4c79b34a9db1f77cd12f94cc80b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d68cf0f5dae47c558e2ea2a9bf652788a19eeb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d68cf0f5dae47c558e2ea2a9bf652788a19eeb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=38d68cf0f5dae47c558e2ea2a9bf652788a19eeb", "patch": "@@ -1,3 +1,17 @@\n+2017-04-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/functional (default_searcher, __boyer_moore_array_base)\n+\t(__is_std_equal_to, __boyer_moore_base_t, boyer_moore_searcher)\n+\t(boyer_moore_horspool_searcher): Remove redundant namespace\n+\tqualification.\n+\t(default_searcher::operator()): Construct return value early and\n+\tadvance second member in-place.\n+\t(boyer_moore_horspool_searcher::operator()): Increment random access\n+\titerator directly instead of using std::next.\n+\t(boyer_moore_searcher::operator()): Fix return value.\n+\t* testsuite/20_util/function_objects/searchers.cc: Check both parts\n+\tof return values.\n+\n 2017-04-12  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/faq.xml: Update reference link to C++ ABI for Itanium."}, {"sha": "e4a82ee346f916387b753f0f77750e45b7bda8f6", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d68cf0f5dae47c558e2ea2a9bf652788a19eeb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d68cf0f5dae47c558e2ea2a9bf652788a19eeb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=38d68cf0f5dae47c558e2ea2a9bf652788a19eeb", "patch": "@@ -969,17 +969,17 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \toperator()(_ForwardIterator2 __first, _ForwardIterator2 __last) const\n \t{\n \t  _ForwardIterator2 __first_ret =\n-\t    std::search(__first, __last,\n-\t\t\tstd::get<0>(_M_m), std::get<1>(_M_m),\n+\t    std::search(__first, __last, std::get<0>(_M_m), std::get<1>(_M_m),\n \t\t\tstd::get<2>(_M_m));\n-\t  _ForwardIterator2 __second_ret = __first_ret == __last ?\n-\t    __last :  std::next(__first_ret, std::distance(std::get<0>(_M_m),\n-\t\t\t\t\t\t\t   std::get<1>(_M_m)));\n-\t  return std::make_pair(__first_ret, __second_ret);\n+\t  auto __ret = std::make_pair(__first_ret, __first_ret);\n+\t  if (__ret.first != __last)\n+\t    std::advance(__ret.second, std::distance(std::get<0>(_M_m),\n+\t\t\t\t\t\t     std::get<1>(_M_m)));\n+\t  return __ret;\n \t}\n \n     private:\n-      std::tuple<_ForwardIterator1, _ForwardIterator1, _BinaryPredicate> _M_m;\n+      tuple<_ForwardIterator1, _ForwardIterator1, _BinaryPredicate> _M_m;\n     };\n \n   template<typename _Key, typename _Tp, typename _Hash, typename _Pred>\n@@ -1025,7 +1025,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t    for (__diff_type __i = 0; __i < __patlen - 1; ++__i)\n \t      {\n \t\tauto __ch = __pat[__i];\n-\t\tusing _UCh = std::make_unsigned_t<decltype(__ch)>;\n+\t\tusing _UCh = make_unsigned_t<decltype(__ch)>;\n \t\tauto __uch = static_cast<_UCh>(__ch);\n \t\tstd::get<0>(_M_bad_char)[__uch] = __patlen - 1 - __i;\n \t      }\n@@ -1037,7 +1037,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t__diff_type\n \t_M_lookup(_Key __key, __diff_type __not_found) const\n \t{\n-\t  auto __ukey = static_cast<std::make_unsigned_t<_Key>>(__key);\n+\t  auto __ukey = static_cast<make_unsigned_t<_Key>>(__key);\n \t  if (__ukey >= _Len)\n \t    return __not_found;\n \t  return std::get<0>(_M_bad_char)[__ukey];\n@@ -1046,29 +1046,29 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       const _Pred&\n       _M_pred() const { return std::get<1>(_M_bad_char); }\n \n-      std::tuple<_GLIBCXX_STD_C::array<_Tp, _Len>, _Pred> _M_bad_char;\n+      tuple<_GLIBCXX_STD_C::array<_Tp, _Len>, _Pred> _M_bad_char;\n     };\n \n   template<typename _Pred>\n-    struct __is_std_equal_to : std::false_type { };\n+    struct __is_std_equal_to : false_type { };\n \n   template<>\n-    struct __is_std_equal_to<std::equal_to<void>> : std::true_type { };\n+    struct __is_std_equal_to<equal_to<void>> : true_type { };\n \n   // Use __boyer_moore_array_base when pattern consists of narrow characters\n   // and uses std::equal_to as the predicate.\n   template<typename _RAIter, typename _Hash, typename _Pred,\n            typename _Val = typename iterator_traits<_RAIter>::value_type,\n \t   typename _Diff = typename iterator_traits<_RAIter>::difference_type>\n     using __boyer_moore_base_t\n-      = std::conditional_t<sizeof(_Val) == 1 && is_integral<_Val>::value\n-\t\t\t   && __is_std_equal_to<_Pred>::value,\n-\t\t\t   __boyer_moore_array_base<_Diff, 256, _Pred>,\n-\t\t\t   __boyer_moore_map_base<_Val, _Diff, _Hash, _Pred>>;\n+      = conditional_t<sizeof(_Val) == 1 && is_integral<_Val>::value\n+\t\t      && __is_std_equal_to<_Pred>::value,\n+\t\t      __boyer_moore_array_base<_Diff, 256, _Pred>,\n+\t\t      __boyer_moore_map_base<_Val, _Diff, _Hash, _Pred>>;\n \n   template<typename _RAIter, typename _Hash\n-\t     = std::hash<typename std::iterator_traits<_RAIter>::value_type>,\n-\t   typename _BinaryPredicate = std::equal_to<>>\n+\t     = hash<typename iterator_traits<_RAIter>::value_type>,\n+\t   typename _BinaryPredicate = equal_to<>>\n     class boyer_moore_searcher\n     : __boyer_moore_base_t<_RAIter, _Hash, _BinaryPredicate>\n     {\n@@ -1123,8 +1123,8 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n     };\n \n   template<typename _RAIter, typename _Hash\n-\t     = std::hash<typename std::iterator_traits<_RAIter>::value_type>,\n-\t   typename _BinaryPredicate = std::equal_to<>>\n+\t     = hash<typename iterator_traits<_RAIter>::value_type>,\n+\t   typename _BinaryPredicate = equal_to<>>\n     class boyer_moore_horspool_searcher\n     : __boyer_moore_base_t<_RAIter, _Hash, _BinaryPredicate>\n     {\n@@ -1156,8 +1156,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t      for (auto __scan = __patlen - 1;\n \t\t   __pred(__first[__scan], _M_pat[__scan]); --__scan)\n \t\tif (__scan == 0)\n-\t\t  return std::make_pair(__first,\n-\t\t\t\t\tstd::next(__first, __patlen));\n+\t\t  return std::make_pair(__first, __first + __patlen);\n \t      auto __shift = _M_bad_char_shift(__first[__patlen - 1]);\n \t      __len -= __shift;\n \t      __first += __shift;\n@@ -1223,8 +1222,10 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t      --__j;\n \t    }\n \t  if (__j < 0)\n-\t    return std::make_pair(__first + __i + 1, std::next(__first,\n-\t\t\t\t\t\t\t       __patlen));\n+\t    {\n+\t      const auto __match = __first + __i + 1;\n+\t      return std::make_pair(__match, __match + __patlen);\n+\t    }\n \t  __i += std::max(_M_bad_char_shift(__first[__i]),\n \t\t\t  _M_good_suffix[__j]);\n \t}"}, {"sha": "4f7b1d4818db94c8b2d4998afde5772e217c3e21", "filename": "libstdc++-v3/testsuite/20_util/function_objects/searchers.cc", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38d68cf0f5dae47c558e2ea2a9bf652788a19eeb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38d68cf0f5dae47c558e2ea2a9bf652788a19eeb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fsearchers.cc?ref=38d68cf0f5dae47c558e2ea2a9bf652788a19eeb", "patch": "@@ -49,7 +49,8 @@ test01()\n \n   for (auto n : needles)\n   {\n-    auto ne = n + std::strlen(n);\n+    auto nlen = std::strlen(n);\n+    auto ne = n + nlen;\n     default_searcher d(n, ne);\n     boyer_moore_searcher bm(n, ne);\n     boyer_moore_horspool_searcher bmh(n, ne);\n@@ -59,10 +60,22 @@ test01()\n       auto res = std::search(h, he, n, ne);\n       auto d_res = d(h, he);\n       VERIFY( d_res.first == res );\n+      if (res == he)\n+\tVERIFY( d_res.second == d_res.first );\n+      else\n+\tVERIFY( d_res.second == (d_res.first + nlen) );\n       auto bm_res = bm(h, he);\n       VERIFY( bm_res.first == res );\n+      if (res == he)\n+\tVERIFY( bm_res.second == bm_res.first );\n+      else\n+\tVERIFY( bm_res.second == (bm_res.first + nlen) );\n       auto bmh_res = bmh(h, he);\n       VERIFY( bmh_res.first == res );\n+      if (res == he)\n+\tVERIFY( bmh_res.second == bmh_res.first );\n+      else\n+\tVERIFY( bmh_res.second == (bmh_res.first + nlen) );\n     }\n   }\n }\n@@ -82,7 +95,8 @@ test02()\n \n   for (auto n : needles)\n   {\n-    auto ne = n + std::wcslen(n);\n+    auto nlen = std::wcslen(n);\n+    auto ne = n + nlen;\n     default_searcher d(n, ne);\n     boyer_moore_searcher bm(n, ne);\n     boyer_moore_horspool_searcher bmh(n, ne);\n@@ -92,10 +106,22 @@ test02()\n       auto res = std::search(h, he, n, ne);\n       auto d_res = d(h, he);\n       VERIFY( d_res.first == res );\n+      if (res == he)\n+\tVERIFY( d_res.second == d_res.first );\n+      else\n+\tVERIFY( d_res.second == (d_res.first + nlen) );\n       auto bm_res = bm(h, he);\n       VERIFY( bm_res.first == res );\n+      if (res == he)\n+\tVERIFY( bm_res.second == bm_res.first );\n+      else\n+\tVERIFY( bm_res.second == (bm_res.first + nlen) );\n       auto bmh_res = bmh(h, he);\n       VERIFY( bmh_res.first == res );\n+      if (res == he)\n+\tVERIFY( bmh_res.second == bmh_res.first );\n+      else\n+\tVERIFY( bmh_res.second == (bmh_res.first + nlen) );\n     }\n   }\n #endif\n@@ -119,7 +145,8 @@ test03()\n \n   const char* needle = \" foo 123 \";\n   const char* haystack = \"*****foo*123******\";\n-  const char* ne = needle + std::strlen(needle);\n+  auto nlen = std::strlen(needle);\n+  const char* ne = needle + nlen;\n   const char* he = haystack + std::strlen(haystack);\n \n   default_searcher d(needle, ne, eq);\n@@ -129,10 +156,22 @@ test03()\n   auto res = std::search(haystack, he, needle, ne, eq);\n   auto d_res = d(haystack, he);\n   VERIFY( d_res.first == res );\n+  if (res == he)\n+    VERIFY( d_res.second == d_res.first );\n+  else\n+    VERIFY( d_res.second == (d_res.first + nlen) );\n   auto bm_res = bm(haystack, he);\n   VERIFY( bm_res.first == res );\n+  if (res == he)\n+    VERIFY( bm_res.second == bm_res.first );\n+  else\n+    VERIFY( bm_res.second == (bm_res.first + nlen) );\n   auto bmh_res = bmh(haystack, he);\n   VERIFY( bmh_res.first == res );\n+  if (res == he)\n+    VERIFY( bmh_res.second == bmh_res.first );\n+  else\n+    VERIFY( bmh_res.second == (bmh_res.first + nlen) );\n }\n \n int"}]}