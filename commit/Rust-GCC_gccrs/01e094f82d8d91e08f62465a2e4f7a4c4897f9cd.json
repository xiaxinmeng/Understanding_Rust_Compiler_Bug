{"sha": "01e094f82d8d91e08f62465a2e4f7a4c4897f9cd", "node_id": "C_kwDOANBUbNoAKDAxZTA5NGY4MmQ4ZDkxZTA4ZjYyNDY1YTJlNGY3YTRjNDg5N2Y5Y2Q", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-06-27T13:34:19Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-06-27T13:34:19Z"}, "message": "libstdc++: testsuite: use cmath long double overloads\n\nIn case we need to supplement the C standard library with additional\ndefinitions for float and long double, the declarations expected to be\nin the C headers may not be there.  Rely on the cmath overloads\ninstead.\n\n\nfor  libstdc++-v3/ChangeLog\n\n\t* testsuite/20_util/to_chars/long_double.cc: Use cmath\n\tlong double overloads for nexttoward and ldexp.", "tree": {"sha": "c89a7de774f880b77bd53c4ad27c5cdd5136b7a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c89a7de774f880b77bd53c4ad27c5cdd5136b7a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01e094f82d8d91e08f62465a2e4f7a4c4897f9cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e094f82d8d91e08f62465a2e4f7a4c4897f9cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01e094f82d8d91e08f62465a2e4f7a4c4897f9cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01e094f82d8d91e08f62465a2e4f7a4c4897f9cd/comments", "author": null, "committer": null, "parents": [{"sha": "8fce31f69bc6800b81eb7f274d6128162f5ec8b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fce31f69bc6800b81eb7f274d6128162f5ec8b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fce31f69bc6800b81eb7f274d6128162f5ec8b1"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "498388110b179acce8d6e809fdf85ad188cc2b73", "filename": "libstdc++-v3/testsuite/20_util/to_chars/long_double.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01e094f82d8d91e08f62465a2e4f7a4c4897f9cd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01e094f82d8d91e08f62465a2e4f7a4c4897f9cd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Flong_double.cc?ref=01e094f82d8d91e08f62465a2e4f7a4c4897f9cd", "patch": "@@ -54,11 +54,11 @@ namespace detail\n {\n   long double\n   nextupl(long double x)\n-  { return nexttowardl(x, numeric_limits<long double>::infinity()); }\n+  { return nexttoward(x, numeric_limits<long double>::infinity()); }\n \n   long double\n   nextdownl(long double x)\n-  { return nexttowardl(x, -numeric_limits<long double>::infinity()); }\n+  { return nexttoward(x, -numeric_limits<long double>::infinity()); }\n }\n \n // The long double overloads of std::to_chars currently just go through printf\n@@ -138,7 +138,7 @@ test01()\n   for (int exponent : {-11000, -3000, -300, -50, -7, 0, 7, 50, 300, 3000, 11000})\n     for (long double testcase : hex_testcases)\n       {\n-\ttestcase = ldexpl(testcase, exponent);\n+\ttestcase = ldexp(testcase, exponent);\n \tif (testcase == 0.0L || isinf(testcase))\n \t  continue;\n "}]}