{"sha": "d84dc419e692d42c3b1e0c82e972c8a6f4c71389", "node_id": "C_kwDOANBUbNoAKGQ4NGRjNDE5ZTY5MmQ0MmMzYjFlMGM4MmU5NzJjOGE2ZjRjNzEzODk", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-02-02T14:11:36Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-02-02T14:11:36Z"}, "message": "analyzer: fix -Wanalyzer-fd-type-mismatch false +ve on \"listen\" [PR108633]\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/108633\n\t* sm-fd.cc (fd_state_machine::check_for_fd_attrs): Add missing\n\t\"continue\".\n\t(fd_state_machine::on_listen): Don't issue phase-mismatch or\n\ttype-mismatch warnings for the \"invalid\" state.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/108633\n\t* gcc.dg/analyzer/fd-pr108633.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "faa674bdce3e32cbc4fcc3bbb1fc2e1ad6d716ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faa674bdce3e32cbc4fcc3bbb1fc2e1ad6d716ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d84dc419e692d42c3b1e0c82e972c8a6f4c71389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d84dc419e692d42c3b1e0c82e972c8a6f4c71389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d84dc419e692d42c3b1e0c82e972c8a6f4c71389", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d84dc419e692d42c3b1e0c82e972c8a6f4c71389/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "598e10cf415f0a53eab2b1e63980531c60d673b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598e10cf415f0a53eab2b1e63980531c60d673b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598e10cf415f0a53eab2b1e63980531c60d673b7"}], "stats": {"total": 87, "additions": 85, "deletions": 2}, "files": [{"sha": "494d802a1d44649424d7caa33bf49d1019211ca4", "filename": "gcc/analyzer/sm-fd.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84dc419e692d42c3b1e0c82e972c8a6f4c71389/gcc%2Fanalyzer%2Fsm-fd.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84dc419e692d42c3b1e0c82e972c8a6f4c71389/gcc%2Fanalyzer%2Fsm-fd.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-fd.cc?ref=d84dc419e692d42c3b1e0c82e972c8a6f4c71389", "patch": "@@ -1339,11 +1339,14 @@ fd_state_machine::check_for_fd_attrs (\n \t  if (!(is_valid_fd_p (state) || (state == m_stop)))\n \t    {\n \t      if (!is_constant_fd_p (state))\n-\t\tsm_ctxt->warn (node, stmt, arg,\n-\t\t\t       make_unique<fd_use_without_check>\n+\t\t{\n+\t\t  sm_ctxt->warn (node, stmt, arg,\n+\t\t\t\t make_unique<fd_use_without_check>\n \t\t\t\t (*this, diag_arg,\n \t\t\t\t  callee_fndecl, attr_name,\n \t\t\t\t  arg_idx));\n+\t\t  continue;\n+\t\t}\n \t    }\n \n \t  switch (fd_attr_access_dir)\n@@ -1906,6 +1909,7 @@ fd_state_machine::on_listen (const call_details &cd,\n   if (!(old_state == m_start\n \t|| old_state == m_constant_fd\n \t|| old_state == m_stop\n+\t|| old_state == m_invalid\n \t|| old_state == m_bound_stream_socket\n \t|| old_state == m_bound_unknown_socket\n \t/* Assume it's OK to call \"listen\" more than once.  */"}, {"sha": "6d923b7cfc095c1dc5431796d9f5d1a121db1ead", "filename": "gcc/testsuite/gcc.dg/analyzer/fd-pr108633.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d84dc419e692d42c3b1e0c82e972c8a6f4c71389/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-pr108633.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d84dc419e692d42c3b1e0c82e972c8a6f4c71389/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-pr108633.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffd-pr108633.c?ref=d84dc419e692d42c3b1e0c82e972c8a6f4c71389", "patch": "@@ -0,0 +1,79 @@\n+/* Reduced from qemu-7.2.0's tests/qtest/libqtest.c.  */\n+\n+#define\tEINTR 4\n+\n+#define g_assert_cmpint(n1, cmp, n2)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    gint64 __n1 = (n1), __n2 = (n2);\t\t\t\t\t\\\n+    if (__n1 cmp __n2) ; else\t\t\t\t\t\t\\\n+      g_assertion_message_cmpnum (\"\", __FILE__, __LINE__, __func__, \\\n+\t\t\t\t  #n1 \" \" #cmp \" \" #n2, (long double) __n1, #cmp, (long double) __n2, 'i'); \\\n+  } while (0)\n+\n+typedef __SIZE_TYPE__ size_t;\n+typedef unsigned int __socklen_t;\n+extern int snprintf (char *__restrict __s, size_t __maxlen,\n+       const char *__restrict __format, ...)\n+     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));\n+typedef __socklen_t socklen_t;\n+extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));\n+#define errno (*__errno_location ())\n+typedef signed long gint64;\n+typedef char gchar;\n+extern\n+void g_assertion_message_cmpnum (const char *domain,\n+\t\t\t\t const char *file,\n+\t\t\t\t int line,\n+\t\t\t\t const char *func,\n+\t\t\t\t const char *expr,\n+\t\t\t\t long double arg1,\n+\t\t\t\t const char *cmp,\n+\t\t\t\t long double arg2,\n+\t\t\t\t char numtype);\n+enum __socket_type\n+{\n+  SOCK_STREAM = 1,\n+  /* [...snip...] */\n+};\n+\n+typedef unsigned short int sa_family_t;\n+\n+typedef union {\n+  const struct sockaddr *__restrict __sockaddr__;\n+  /* [...snip...] */\n+} __CONST_SOCKADDR_ARG __attribute__ ((__transparent_union__));\n+\n+extern int socket (int __domain, int __type, int __protocol)\n+  __attribute__ ((__nothrow__ , __leaf__));\n+extern int bind (int __fd, __CONST_SOCKADDR_ARG __addr, socklen_t __len)\n+  __attribute__ ((__nothrow__ , __leaf__));\n+extern int listen (int __fd, int __n)\n+  __attribute__ ((__nothrow__ , __leaf__));\n+\n+struct sockaddr_un\n+{\n+  sa_family_t sun_family;\n+  char sun_path[108];\n+};\n+\n+int qtest_socket_server(const char *socket_path)\n+{\n+    struct sockaddr_un addr;\n+    int sock;\n+    int ret;\n+\n+    sock = socket(1, SOCK_STREAM, 0); /* { dg-message \"when 'socket' fails\" } */\n+    g_assert_cmpint(sock, !=, -1); /* this isn't marked \"noreturn\" */\n+\n+    addr.sun_family = 1;\n+    snprintf(addr.sun_path, sizeof(addr.sun_path), \"%s\", socket_path);\n+\n+    do {\n+        ret = bind(sock, (struct sockaddr *)&addr, sizeof(addr));\n+    } while (ret == -1 && errno == EINTR);\n+    g_assert_cmpint(ret, !=, -1);\n+    ret = listen(sock, 1); /* { dg-warning \"'listen' on possibly invalid file descriptor 'sock'\" } */\n+    g_assert_cmpint(ret, !=, -1);\n+\n+    return sock;\n+}"}]}