{"sha": "b43a2366d696649472d8615dec3765fecc54477a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQzYTIzNjZkNjk2NjQ5NDcyZDg2MTVkZWMzNzY1ZmVjYzU0NDc3YQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-08-16T21:14:11Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-08-16T21:14:11Z"}, "message": "re PR tree-optimization/28364 (poor optimization choices when iterating over a std::string (probably not c++-specific))\n\n\tPR tree-optimization/28364\n\t* tree-ssa-loop-ivopts.c (aff_combination_to_tree): Handle zero\n\tcorrectly.\n\t(fold_affine_expr): New function.\n\t(may_eliminate_iv): Use fold_affine_expr.\n\nFrom-SVN: r116189", "tree": {"sha": "e8173d30c8c27f0101aa05f52b4041fe6a80bf11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8173d30c8c27f0101aa05f52b4041fe6a80bf11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b43a2366d696649472d8615dec3765fecc54477a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b43a2366d696649472d8615dec3765fecc54477a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b43a2366d696649472d8615dec3765fecc54477a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b43a2366d696649472d8615dec3765fecc54477a/comments", "author": null, "committer": null, "parents": [{"sha": "c58e8676dd02e78d29512ff0f0b024ce91c62883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c58e8676dd02e78d29512ff0f0b024ce91c62883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c58e8676dd02e78d29512ff0f0b024ce91c62883"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "a4b7574b0a31eba49ebabaa6def3a52dc4801cee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43a2366d696649472d8615dec3765fecc54477a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43a2366d696649472d8615dec3765fecc54477a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b43a2366d696649472d8615dec3765fecc54477a", "patch": "@@ -1,3 +1,11 @@\n+2006-08-16  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/28364\n+\t* tree-ssa-loop-ivopts.c (aff_combination_to_tree): Handle zero\n+\tcorrectly.\n+\t(fold_affine_expr): New function.\n+\t(may_eliminate_iv): Use fold_affine_expr.\n+\n 2006-08-16  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c/27489"}, {"sha": "0e8fa94b9d62340cf470505f5d49393fb7c356a0", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b43a2366d696649472d8615dec3765fecc54477a/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b43a2366d696649472d8615dec3765fecc54477a/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=b43a2366d696649472d8615dec3765fecc54477a", "patch": "@@ -2917,10 +2917,17 @@ aff_combination_to_tree (struct affine_tree_combination *comb)\n   unsigned i;\n   unsigned HOST_WIDE_INT off, sgn;\n \n-  /* Handle the special case produced by get_computation_aff when\n-     the type does not fit in HOST_WIDE_INT.  */\n   if (comb->n == 0 && comb->offset == 0)\n-    return fold_convert (type, expr);\n+    {\n+      if (expr)\n+\t{\n+\t  /* Handle the special case produced by get_computation_aff when\n+\t     the type does not fit in HOST_WIDE_INT.  */\n+\t  return fold_convert (type, expr);\n+\t}\n+      else\n+\treturn build_int_cst (type, 0);\n+    }\n \n   gcc_assert (comb->n == MAX_AFF_ELTS || comb->rest == NULL_TREE);\n \n@@ -2943,6 +2950,21 @@ aff_combination_to_tree (struct affine_tree_combination *comb)\n \t\t\t  comb->mask);\n }\n \n+/* Folds EXPR using the affine expressions framework.  */\n+\n+static tree\n+fold_affine_expr (tree expr)\n+{\n+  tree type = TREE_TYPE (expr);\n+  struct affine_tree_combination comb;\n+\n+  if (TYPE_PRECISION (type) > HOST_BITS_PER_WIDE_INT)\n+    return expr;\n+\n+  tree_to_aff_combination (expr, type, &comb);\n+  return aff_combination_to_tree (&comb);\n+}\n+\n /* Determines the expression by that USE is expressed from induction variable\n    CAND at statement AT in LOOP.  The expression is stored in a decomposed\n    form into AFF.  Returns false if USE cannot be expressed using CAND.  */\n@@ -4029,7 +4051,7 @@ may_eliminate_iv (struct ivopts_data *data,\n \t\t\t\t      fold_convert (wider_type, nit))))\n     return false;\n \n-  *bound = cand_value_at (loop, cand, use->stmt, nit);\n+  *bound = fold_affine_expr (cand_value_at (loop, cand, use->stmt, nit));\n   return true;\n }\n "}]}