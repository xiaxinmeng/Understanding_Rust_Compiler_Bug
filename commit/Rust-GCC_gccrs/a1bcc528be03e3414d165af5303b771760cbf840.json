{"sha": "a1bcc528be03e3414d165af5303b771760cbf840", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFiY2M1MjhiZTAzZTM0MTRkMTY1YWY1MzAzYjc3MTc2MGNiZjg0MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2000-08-04T00:02:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-08-04T00:02:19Z"}, "message": "pt.c (do_type_instantiation): Add complain parm; don't complain if called recursively.\n\n        * pt.c (do_type_instantiation): Add complain parm; don't complain\n        if called recursively.\n        * cp-tree.h, parse.y: Adjust.\n\nFrom-SVN: r35467", "tree": {"sha": "0d6e82f4cfd803fb0c9a0a50ebda71967612bdc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d6e82f4cfd803fb0c9a0a50ebda71967612bdc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1bcc528be03e3414d165af5303b771760cbf840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1bcc528be03e3414d165af5303b771760cbf840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1bcc528be03e3414d165af5303b771760cbf840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1bcc528be03e3414d165af5303b771760cbf840/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57cac714619b1ad67680b91025a9029df8906715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cac714619b1ad67680b91025a9029df8906715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57cac714619b1ad67680b91025a9029df8906715"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "94aa39be42d9c4224dd5daf7df6a9b4aa081b6a5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bcc528be03e3414d165af5303b771760cbf840/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bcc528be03e3414d165af5303b771760cbf840/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a1bcc528be03e3414d165af5303b771760cbf840", "patch": "@@ -1,3 +1,9 @@\n+2000-08-02  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (do_type_instantiation): Add complain parm; don't complain\n+\tif called recursively.\n+\t* cp-tree.h, parse.y: Adjust.\n+\n 2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* decl2.c: Silently ignore -Wstrict-prototypes; warn about"}, {"sha": "a945ab4436c024adf152dc288c1888ecf2a7aec0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bcc528be03e3414d165af5303b771760cbf840/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bcc528be03e3414d165af5303b771760cbf840/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a1bcc528be03e3414d165af5303b771760cbf840", "patch": "@@ -4260,7 +4260,7 @@ extern void mark_decl_instantiated\t\tPARAMS ((tree, int));\n extern int more_specialized\t\t\tPARAMS ((tree, tree, tree));\n extern void mark_class_instantiated\t\tPARAMS ((tree, int));\n extern void do_decl_instantiation\t\tPARAMS ((tree, tree, tree));\n-extern void do_type_instantiation\t\tPARAMS ((tree, tree));\n+extern void do_type_instantiation\t\tPARAMS ((tree, tree, int));\n extern tree instantiate_decl\t\t\tPARAMS ((tree, int));\n extern tree get_bindings\t\t\tPARAMS ((tree, tree, tree));\n extern void add_tree\t\t\t\tPARAMS ((tree));"}, {"sha": "ba01496735183046af4f8c56b456115676560150", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bcc528be03e3414d165af5303b771760cbf840/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bcc528be03e3414d165af5303b771760cbf840/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=a1bcc528be03e3414d165af5303b771760cbf840", "patch": "@@ -962,7 +962,7 @@ identifier_defn:\n \n explicit_instantiation:\n \t  TEMPLATE begin_explicit_instantiation typespec ';'\n-\t\t{ do_type_instantiation ($3.t, NULL_TREE);\n+\t\t{ do_type_instantiation ($3.t, NULL_TREE, 1);\n \t\t  yyungetc (';', 1); }\n           end_explicit_instantiation\n \t| TEMPLATE begin_explicit_instantiation typed_declspecs declarator\n@@ -976,7 +976,7 @@ explicit_instantiation:\n \t\t{ do_decl_instantiation (NULL_TREE, $3, NULL_TREE); }\n           end_explicit_instantiation\n \t| SCSPEC TEMPLATE begin_explicit_instantiation typespec ';'\n-\t\t{ do_type_instantiation ($4.t, $1);\n+\t\t{ do_type_instantiation ($4.t, $1, 1);\n \t\t  yyungetc (';', 1); }\n           end_explicit_instantiation\n \t| SCSPEC TEMPLATE begin_explicit_instantiation typed_declspecs "}, {"sha": "12ba70545e8283d22a37968b5910d55a132ff091", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1bcc528be03e3414d165af5303b771760cbf840/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1bcc528be03e3414d165af5303b771760cbf840/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a1bcc528be03e3414d165af5303b771760cbf840", "patch": "@@ -9267,9 +9267,15 @@ mark_class_instantiated (t, extern_p)\n     }\n }     \n \n+/* Perform an explicit instantiation of template class T.  STORAGE, if\n+   non-null, is the RID for extern, inline or static.  COMPLAIN is\n+   non-zero if this is called from the parser, zero if called recursively,\n+   since the standard is unclear (as detailed below).  */\n+ \n void\n-do_type_instantiation (t, storage)\n+do_type_instantiation (t, storage, complain)\n      tree t, storage;\n+     int complain;\n {\n   int extern_p = 0;\n   int nomem_p = 0;\n@@ -9293,8 +9299,9 @@ do_type_instantiation (t, storage)\n \n   if (!COMPLETE_TYPE_P (t))\n     {\n-      cp_error (\"explicit instantiation of `%#T' before definition of template\",\n-\t\tt);\n+      if (complain)\n+\tcp_error (\"explicit instantiation of `%#T' before definition of template\",\n+\t\t  t);\n       return;\n     }\n \n@@ -9324,8 +9331,11 @@ do_type_instantiation (t, storage)\n \n \t No program shall both explicitly instantiate and explicitly\n \t specialize a template.  */\n-      cp_error (\"explicit instantiation of `%#T' after\", t);\n-      cp_error_at (\"explicit specialization here\", t);\n+      if (complain)\n+\t{\n+\t  cp_error (\"explicit instantiation of `%#T' after\", t);\n+\t  cp_error_at (\"explicit specialization here\", t);\n+\t}\n       return;\n     }\n   else if (CLASSTYPE_EXPLICIT_INSTANTIATION (t))\n@@ -9339,7 +9349,8 @@ do_type_instantiation (t, storage)\n \t was `extern'.  If EXTERN_P then the second is.  If -frepo, chances\n \t are we already got marked as an explicit instantion because of the\n \t repo file.  All these cases are OK.  */\n-      if (!CLASSTYPE_INTERFACE_ONLY (t) && !extern_p && !flag_use_repository)\n+      if (!CLASSTYPE_INTERFACE_ONLY (t) && !extern_p && !flag_use_repository\n+\t  && complain)\n \tcp_pedwarn (\"duplicate explicit instantiation of `%#T'\", t);\n       \n       /* If we've already instantiated the template, just return now.  */\n@@ -9398,7 +9409,7 @@ do_type_instantiation (t, storage)\n     for (tmp = CLASSTYPE_TAGS (t); tmp; tmp = TREE_CHAIN (tmp))\n       if (IS_AGGR_TYPE (TREE_VALUE (tmp))\n \t  && !uses_template_parms (CLASSTYPE_TI_ARGS (TREE_VALUE (tmp))))\n-\tdo_type_instantiation (TYPE_MAIN_DECL (TREE_VALUE (tmp)), storage);\n+\tdo_type_instantiation (TYPE_MAIN_DECL (TREE_VALUE (tmp)), storage, 0);\n   }\n }\n "}]}