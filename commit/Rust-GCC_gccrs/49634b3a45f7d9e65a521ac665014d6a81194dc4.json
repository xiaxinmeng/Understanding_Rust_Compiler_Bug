{"sha": "49634b3a45f7d9e65a521ac665014d6a81194dc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk2MzRiM2E0NWY3ZDllNjVhNTIxYWM2NjUwMTRkNmE4MTE5NGRjNA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-08-02T16:29:46Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-08-02T16:29:46Z"}, "message": "cppfiles.c (struct _cpp_file): Rename once_only_next to next_file.\n\n\t* cppfiles.c (struct _cpp_file): Rename once_only_next to\n\tnext_file.  Remove import and pragma_once, add once_only.\n\t(find_file): Add new file structures to the all_files list.\n\t(should_stack_file): Mark #import-ed files once-only, and\n\tdon't stack them if the file has already been stacked.\n\t(_cp_mark_file_once_only): Simplify.\n\t* cpphash.h (struct cpp_reader): Rename once_only_files\n\tto all_files.  Rename saw_pragma_once to seen_once_only.\n\t(_cpp_mark_file_once_only): Update prototype.\n\t* cpplib.c (do_pragma_once): Update.\ntestsuite:\n\t* import1.c, import2.c: New tests.\n\nFrom-SVN: r70106", "tree": {"sha": "2f3f5d24ede7076f17367de0a1945c6a8e563d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f3f5d24ede7076f17367de0a1945c6a8e563d8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49634b3a45f7d9e65a521ac665014d6a81194dc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49634b3a45f7d9e65a521ac665014d6a81194dc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49634b3a45f7d9e65a521ac665014d6a81194dc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49634b3a45f7d9e65a521ac665014d6a81194dc4/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf1ee30c6769682cfba0b8518349a451e04d5dcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf1ee30c6769682cfba0b8518349a451e04d5dcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf1ee30c6769682cfba0b8518349a451e04d5dcc"}], "stats": {"total": 167, "additions": 107, "deletions": 60}, "files": [{"sha": "2c12e4a646a4b6454335c31888b6d100de9542dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49634b3a45f7d9e65a521ac665014d6a81194dc4", "patch": "@@ -1,3 +1,16 @@\n+2003-08-02  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cppfiles.c (struct _cpp_file): Rename once_only_next to\n+\tnext_file.  Remove import and pragma_once, add once_only.\n+\t(find_file): Add new file structures to the all_files list.\n+\t(should_stack_file): Mark #import-ed files once-only, and\n+\tdon't stack them if the file has already been stacked.\n+\t(_cp_mark_file_once_only): Simplify.\n+\t* cpphash.h (struct cpp_reader): Rename once_only_files\n+\tto all_files.  Rename saw_pragma_once to seen_once_only.\n+\t(_cpp_mark_file_once_only): Update prototype.\n+\t* cpplib.c (do_pragma_once): Update.\n+\n 2003-08-02  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* cppfiles.c (ENOTDIR): Remove."}, {"sha": "007eb09a0b186cc8abdc6b9889c7acbfc35b1680", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 46, "deletions": 54, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=49634b3a45f7d9e65a521ac665014d6a81194dc4", "patch": "@@ -70,8 +70,8 @@ struct _cpp_file\n      been calculated yet.  */\n   const char *dir_name;\n \n-  /* Chain through #import-ed files or those  containing #pragma once.  */\n-  struct _cpp_file *once_only_next;\n+  /* Chain through all files.  */\n+  struct _cpp_file *next_file;\n \n   /* The contents of NAME after calling read_file().  */\n   const uchar *buffer;\n@@ -97,11 +97,8 @@ struct _cpp_file\n   /* Number of times the file has been stacked for preprocessing.  */\n   unsigned short stack_count;\n \n-  /* If opened with #import.  */\n-  bool import;\n-\n-  /* If contains #pragma once.  */\n-  bool pragma_once;\n+  /* If opened with #import or contains #pragma once.  */\n+  bool once_only;\n \n   /* If read() failed before.  */\n   bool dont_read;\n@@ -383,13 +380,21 @@ find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir, bool fake)\n \n       entry = search_cache (*hash_slot, file->dir);\n       if (entry)\n-\t{\n-\t  /* Cache for START_DIR too, sharing the _cpp_file structure.  */\n-\t  free ((char *) file->name);\n-\t  free (file);\n-\t  file = entry->u.file;\n-\t  break;\n-\t}\n+\tbreak;\n+    }\n+\n+  if (entry)\n+    {\n+      /* Cache for START_DIR too, sharing the _cpp_file structure.  */\n+      free ((char *) file->name);\n+      free (file);\n+      file = entry->u.file;\n+    }\n+  else\n+    {\n+      /* This is a new file; put it in the list.  */\n+      file->next_file = pfile->all_files;\n+      pfile->all_files = file;\n     }\n \n   /* Store this new result in the hash table.  */\n@@ -520,6 +525,22 @@ should_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n {\n   _cpp_file *f;\n \n+  /* Skip once-only files.  */\n+  if (file->once_only)\n+    return false;\n+\n+  /* We must mark the file once-only if #import now, before header \n+     guard checks.  Otherwise, undefining the header guard might\n+     cause the file to be re-stacked.  */\n+  if (import)\n+    {\n+      _cpp_mark_file_once_only (pfile, file);\n+\n+      /* Don't stack files that have been stacked before.  */\n+      if (file->stack_count)\n+\treturn false;\n+    }\n+\n   /* Skip if the file had a header guard and the macro is defined.\n      PCH relies on this appearing before the PCH handler below.  */\n   if (file->cmacro && file->cmacro->type == NT_MACRO)\n@@ -534,34 +555,23 @@ should_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n       return false;\n     }\n \n-  /* Did this file contain #pragma once?  */\n-  if (file->pragma_once)\n-    return false;\n-\n-  /* Are we #import-ing a previously #import-ed file?  */\n-  if (import && file->import)\n-    return false;\n-\n-  /* Read the file's contents.  */\n   if (!read_file (pfile, file))\n     return false;\n \n-  /* Nothing to check if this isn't #import and there haven't been any\n-     #pragma_once directives.  */\n-  if (!import && !pfile->saw_pragma_once)\n+  /* Now we've read the file's contents, we can stack it if there\n+     are no once-only files.  */\n+  if (!pfile->seen_once_only)\n     return true;\n \n-  /* We may have #imported it under a different name, though.  Look\n+  /* We may have read the file under a different name.  Look\n      for likely candidates and compare file contents to be sure.  */\n-  for (f = pfile->once_only_files; f; f = f->once_only_next)\n+  for (f = pfile->all_files; f; f = f->next_file)\n     {\n       if (f == file)\n \tcontinue;\n \n-      if (!f->pragma_once && !(f->import && import))\n-\tcontinue;\n-\n-      if (f->err_no == 0\n+      if ((import || f->once_only)\n+\t  && f->err_no == 0\n \t  && f->st.st_mtime == file->st.st_mtime\n \t  && f->st.st_size == file->st.st_size\n \t  && read_file (pfile, f)\n@@ -571,9 +581,6 @@ should_stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n \tbreak;\n     }\n \n-  if (import || f != NULL)\n-    _cpp_mark_file_once_only (pfile, file, import);\n-\n   return f == NULL;\n }\n \n@@ -619,27 +626,12 @@ stack_file (cpp_reader *pfile, _cpp_file *file, bool import)\n   return true;\n }\n \n-/* Mark FILE to be included once only.  IMPORT is true if because of\n-   #import, otherwise it is assumed to be #pragma once.  */\n+/* Mark FILE to be included once only.  */\n void\n-_cpp_mark_file_once_only (cpp_reader *pfile, _cpp_file *file, bool import)\n+_cpp_mark_file_once_only (cpp_reader *pfile, _cpp_file *file)\n {\n-  /* Put it on the once-only list if it's not on there already (an\n-     earlier #include with a #pragma once might have put it on there\n-     already).  */\n-  if (!file->import && !file->pragma_once)\n-    {\n-      file->once_only_next = pfile->once_only_files;\n-      pfile->once_only_files = file;\n-    }\n-\n-  if (import)\n-    file->import = true;\n-  else\n-    {\n-      pfile->saw_pragma_once = true;\n-      file->pragma_once = true;\n-    }\n+  pfile->seen_once_only = true;\n+  file->once_only = true;\n }\n \n /* Return the directory from which searching for FNAME should start,"}, {"sha": "8b8f3d896edabeae3267851ce2675540c96d4e8d", "filename": "gcc/cpphash.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=49634b3a45f7d9e65a521ac665014d6a81194dc4", "patch": "@@ -359,8 +359,8 @@ struct cpp_reader\n   struct cpp_dir *bracket_include;\t/* <> */\n   struct cpp_dir no_search_path;\t/* No path.  */\n \n-  /* Chain of files that were #import-ed or contain #pragma once.  */\n-  struct _cpp_file *once_only_files;\n+  /* Chain of all hashed _cpp_file instances.  */\n+  struct _cpp_file *all_files;\n \n   /* File and directory hash table.  */\n   struct htab *file_hash;\n@@ -371,8 +371,9 @@ struct cpp_reader\n      directory.  */\n   bool quote_ignores_source_dir;\n \n-  /* Non-zero if any file has contained #pragma once.  */\n-  bool saw_pragma_once;\n+  /* Non-zero if any file has contained #pragma once or #import has\n+     been used.  */\n+  bool seen_once_only;\n \n   /* Multiple include optimization.  */\n   const cpp_hashnode *mi_cmacro;\n@@ -514,7 +515,7 @@ extern void _cpp_init_hashtable (cpp_reader *, hash_table *);\n extern void _cpp_destroy_hashtable (cpp_reader *);\n \n /* In cppfiles.c */\n-extern void _cpp_mark_file_once_only (cpp_reader *, struct _cpp_file *, bool);\n+extern void _cpp_mark_file_once_only (cpp_reader *, struct _cpp_file *);\n extern void _cpp_fake_include (cpp_reader *, const char *);\n extern bool _cpp_stack_file (cpp_reader *, const char *);\n extern bool _cpp_stack_include (cpp_reader *, const char *, int,"}, {"sha": "844a5daec6e12d8c5e67726553b5cae1e0281e64", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=49634b3a45f7d9e65a521ac665014d6a81194dc4", "patch": "@@ -1167,7 +1167,7 @@ do_pragma_once (cpp_reader *pfile)\n     cpp_error (pfile, DL_WARNING, \"#pragma once in main file\");\n \n   check_eol (pfile);\n-  _cpp_mark_file_once_only (pfile, pfile->buffer->file, false);\n+  _cpp_mark_file_once_only (pfile, pfile->buffer->file);\n }\n \n /* Handle #pragma GCC poison, to poison one or more identifiers so"}, {"sha": "9b982ee16b291c66f58b228d5dcc9662d5e506e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49634b3a45f7d9e65a521ac665014d6a81194dc4", "patch": "@@ -1,3 +1,7 @@\n+2003-08-02  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* import1.c, import2.c: New tests.\n+\n 2003-08-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/eh/crossjump1.C: New test."}, {"sha": "d118d7fb051e43fdbdebfa21ec05689b9bf0489a", "filename": "gcc/testsuite/gcc.dg/cpp/import1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport1.c?ref=49634b3a45f7d9e65a521ac665014d6a81194dc4", "patch": "@@ -0,0 +1,16 @@\n+/* Copyright (C) 2003 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"\" } */\n+\n+/* This tests that our eagerness to apply the multiple include guard\n+   optimization to the #import doesn't stop us marking the file\n+   once-only.\n+\n+   Neil Booth, 2 August 2003.  */\n+\n+#include \"import1.h\"\n+#import \"import1.h\"\n+#undef IMPORT1_H\n+#define BUG\n+#include \"import1.h\""}, {"sha": "936c525eb7f16d2b2bac16a0209ab551e5f503e5", "filename": "gcc/testsuite/gcc.dg/cpp/import1.h", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport1.h?ref=49634b3a45f7d9e65a521ac665014d6a81194dc4", "patch": "@@ -0,0 +1,6 @@\n+#ifndef IMPORT1_H\n+#define IMPORT1_H\n+#ifdef BUG\n+#error Should not happen\n+#endif\n+#endif"}, {"sha": "5c32523880e5aa1e78e4481619b6b0b11c829691", "filename": "gcc/testsuite/gcc.dg/cpp/import2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport2.c?ref=49634b3a45f7d9e65a521ac665014d6a81194dc4", "patch": "@@ -0,0 +1,11 @@\n+/* Copyright (C) 2003 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"\" } */\n+\n+/* This tests that the file is only included once\n+   Neil Booth, 2 August 2003.  */\n+\n+#include \"import2.h\"\n+#import \"import2.h\"\n+#include \"import2.h\""}, {"sha": "c6a0fa5978a71bdc92394b01da2bfd9b311db7eb", "filename": "gcc/testsuite/gcc.dg/cpp/import2.h", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49634b3a45f7d9e65a521ac665014d6a81194dc4/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fimport2.h?ref=49634b3a45f7d9e65a521ac665014d6a81194dc4", "patch": "@@ -0,0 +1,4 @@\n+#ifdef BUG\n+#error Should not happen!\n+#endif\n+#define BUG"}]}