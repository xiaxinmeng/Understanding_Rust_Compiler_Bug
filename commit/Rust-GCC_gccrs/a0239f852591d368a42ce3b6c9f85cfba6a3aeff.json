{"sha": "a0239f852591d368a42ce3b6c9f85cfba6a3aeff", "node_id": "C_kwDOANBUbNoAKGEwMjM5Zjg1MjU5MWQzNjhhNDJjZTNiNmM5Zjg1Y2ZiYTZhM2FlZmY", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-01-03T20:47:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-01-05T00:20:05Z"}, "message": "compiler: remove duplication of Named_object traversal\n\nAdding type parameters was about to add a partial third version.\nRemove the duplication to avoid that.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/375234", "tree": {"sha": "315e607cd4e9d4acd38c3d73d83721ccf9148256", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/315e607cd4e9d4acd38c3d73d83721ccf9148256"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0239f852591d368a42ce3b6c9f85cfba6a3aeff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0239f852591d368a42ce3b6c9f85cfba6a3aeff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0239f852591d368a42ce3b6c9f85cfba6a3aeff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0239f852591d368a42ce3b6c9f85cfba6a3aeff/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d11b64b18730423f2378060f23c0ba0147962ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d11b64b18730423f2378060f23c0ba0147962ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d11b64b18730423f2378060f23c0ba0147962ad"}], "stats": {"total": 251, "additions": 100, "deletions": 151}, "files": [{"sha": "a18f3a37349ce5c6699467060aab956f5160b00b", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0239f852591d368a42ce3b6c9f85cfba6a3aeff/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0239f852591d368a42ce3b6c9f85cfba6a3aeff/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=a0239f852591d368a42ce3b6c9f85cfba6a3aeff", "patch": "@@ -1,4 +1,4 @@\n-d3be41f0a1fca20e241e1db62b4b0f5262caac55\n+9732b0766667b9235d0f35d0fb0abfe406b94d49\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "e2fd509f58a34c83a94b1c77943abc1a6091dea1", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 95, "deletions": 150, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0239f852591d368a42ce3b6c9f85cfba6a3aeff/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0239f852591d368a42ce3b6c9f85cfba6a3aeff/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=a0239f852591d368a42ce3b6c9f85cfba6a3aeff", "patch": "@@ -6890,80 +6890,12 @@ Block::traverse(Traverse* traverse)\n \t  | Traverse::traverse_expressions\n \t  | Traverse::traverse_types)) != 0)\n     {\n-      const unsigned int e_or_t = (Traverse::traverse_expressions\n-\t\t\t\t   | Traverse::traverse_types);\n-      const unsigned int e_or_t_or_s = (e_or_t\n-\t\t\t\t\t| Traverse::traverse_statements);\n       for (Bindings::const_definitions_iterator pb =\n \t     this->bindings_->begin_definitions();\n \t   pb != this->bindings_->end_definitions();\n \t   ++pb)\n \t{\n-\t  int t = TRAVERSE_CONTINUE;\n-\t  switch ((*pb)->classification())\n-\t    {\n-\t    case Named_object::NAMED_OBJECT_CONST:\n-\t      if ((traverse_mask & Traverse::traverse_constants) != 0)\n-\t\tt = traverse->constant(*pb, false);\n-\t      if (t == TRAVERSE_CONTINUE\n-\t\t  && (traverse_mask & e_or_t) != 0)\n-\t\t{\n-\t\t  Type* tc = (*pb)->const_value()->type();\n-\t\t  if (tc != NULL\n-\t\t      && Type::traverse(tc, traverse) == TRAVERSE_EXIT)\n-\t\t    return TRAVERSE_EXIT;\n-\t\t  t = (*pb)->const_value()->traverse_expression(traverse);\n-\t\t}\n-\t      break;\n-\n-\t    case Named_object::NAMED_OBJECT_VAR:\n-\t    case Named_object::NAMED_OBJECT_RESULT_VAR:\n-\t      if ((traverse_mask & Traverse::traverse_variables) != 0)\n-\t\tt = traverse->variable(*pb);\n-\t      if (t == TRAVERSE_CONTINUE\n-\t\t  && (traverse_mask & e_or_t) != 0)\n-\t\t{\n-\t\t  if ((*pb)->is_result_variable()\n-\t\t      || (*pb)->var_value()->has_type())\n-\t\t    {\n-\t\t      Type* tv = ((*pb)->is_variable()\n-\t\t\t\t  ? (*pb)->var_value()->type()\n-\t\t\t\t  : (*pb)->result_var_value()->type());\n-\t\t      if (tv != NULL\n-\t\t\t  && Type::traverse(tv, traverse) == TRAVERSE_EXIT)\n-\t\t\treturn TRAVERSE_EXIT;\n-\t\t    }\n-\t\t}\n-\t      if (t == TRAVERSE_CONTINUE\n-\t\t  && (traverse_mask & e_or_t_or_s) != 0\n-\t\t  && (*pb)->is_variable())\n-\t\tt = (*pb)->var_value()->traverse_expression(traverse,\n-\t\t\t\t\t\t\t    traverse_mask);\n-\t      break;\n-\n-\t    case Named_object::NAMED_OBJECT_FUNC:\n-\t    case Named_object::NAMED_OBJECT_FUNC_DECLARATION:\n-\t      go_unreachable();\n-\n-\t    case Named_object::NAMED_OBJECT_TYPE:\n-\t      if ((traverse_mask & e_or_t) != 0)\n-\t\tt = Type::traverse((*pb)->type_value(), traverse);\n-\t      break;\n-\n-\t    case Named_object::NAMED_OBJECT_TYPE_DECLARATION:\n-\t    case Named_object::NAMED_OBJECT_UNKNOWN:\n-\t    case Named_object::NAMED_OBJECT_ERRONEOUS:\n-\t      break;\n-\n-\t    case Named_object::NAMED_OBJECT_PACKAGE:\n-\t    case Named_object::NAMED_OBJECT_SINK:\n-\t      go_unreachable();\n-\n-\t    default:\n-\t      go_unreachable();\n-\t    }\n-\n-\t  if (t == TRAVERSE_EXIT)\n+\t  if ((*pb)->traverse(traverse, false) == TRAVERSE_EXIT)\n \t    return TRAVERSE_EXIT;\n \t}\n     }\n@@ -8673,6 +8605,99 @@ Named_object::location() const\n     }\n }\n \n+// Traverse a Named_object.\n+\n+int\n+Named_object::traverse(Traverse* traverse, bool is_global)\n+{\n+  const unsigned int traverse_mask = traverse->traverse_mask();\n+  const unsigned int e_or_t = (Traverse::traverse_expressions\n+\t\t\t       | Traverse::traverse_types);\n+  const unsigned int e_or_t_or_s = (e_or_t\n+\t\t\t\t    | Traverse::traverse_statements);\n+\n+  int t = TRAVERSE_CONTINUE;\n+  switch (this->classification_)\n+    {\n+    case Named_object::NAMED_OBJECT_CONST:\n+      if ((traverse_mask & Traverse::traverse_constants) != 0)\n+\tt = traverse->constant(this, is_global);\n+      if (t == TRAVERSE_CONTINUE\n+\t  && (traverse_mask & e_or_t) != 0)\n+\t{\n+\t  Type* tc = this->const_value()->type();\n+\t  if (tc != NULL)\n+\t    {\n+\t      if (Type::traverse(tc, traverse) == TRAVERSE_EXIT)\n+\t\treturn TRAVERSE_EXIT;\n+\t    }\n+\t  t = this->const_value()->traverse_expression(traverse);\n+\t}\n+      break;\n+\n+    case Named_object::NAMED_OBJECT_VAR:\n+    case Named_object::NAMED_OBJECT_RESULT_VAR:\n+      if ((traverse_mask & Traverse::traverse_variables) != 0)\n+\tt = traverse->variable(this);\n+      if (t == TRAVERSE_CONTINUE\n+\t  && (traverse_mask & e_or_t) != 0)\n+\t{\n+\t  if (this->is_result_variable() || this->var_value()->has_type())\n+\t    {\n+\t      Type* tv = (this->is_variable()\n+\t\t\t  ? this->var_value()->type()\n+\t\t\t  : this->result_var_value()->type());\n+\t      if (tv != NULL)\n+\t\t{\n+\t\t  if (Type::traverse(tv, traverse) == TRAVERSE_EXIT)\n+\t\t    return TRAVERSE_EXIT;\n+\t\t}\n+\t    }\n+\t}\n+      if (t == TRAVERSE_CONTINUE\n+\t  && (traverse_mask & e_or_t_or_s) != 0\n+\t  && this->is_variable())\n+\tt = this->var_value()->traverse_expression(traverse,\n+\t\t\t\t\t\t   traverse_mask);\n+      break;\n+\n+    case Named_object::NAMED_OBJECT_FUNC:\n+      if ((traverse_mask & Traverse::traverse_functions) != 0)\n+\tt = traverse->function(this);\n+      if (t == TRAVERSE_CONTINUE\n+\t  && (traverse_mask\n+\t      & (Traverse::traverse_variables\n+\t\t | Traverse::traverse_constants\n+\t\t | Traverse::traverse_functions\n+\t\t | Traverse::traverse_blocks\n+\t\t | Traverse::traverse_statements\n+\t\t | Traverse::traverse_expressions\n+\t\t | Traverse::traverse_types)) != 0)\n+\tt = this->func_value()->traverse(traverse);\n+      break;\n+\n+    case Named_object::NAMED_OBJECT_TYPE:\n+      if ((traverse_mask & e_or_t) != 0)\n+\tt = Type::traverse(this->type_value(), traverse);\n+      break;\n+\n+    case Named_object::NAMED_OBJECT_PACKAGE:\n+    case Named_object::NAMED_OBJECT_FUNC_DECLARATION:\n+    case Named_object::NAMED_OBJECT_TYPE_DECLARATION:\n+    case Named_object::NAMED_OBJECT_UNKNOWN:\n+    case Named_object::NAMED_OBJECT_ERRONEOUS:\n+      break;\n+\n+    case Named_object::NAMED_OBJECT_SINK:\n+      go_unreachable();\n+\n+    default:\n+      go_unreachable();\n+    }\n+\n+  return t;\n+}\n+\n // Export a named object.\n \n void\n@@ -9198,90 +9223,10 @@ Bindings::traverse(Traverse* traverse, bool is_global)\n   // new global objects.\n   const unsigned int e_or_t = (Traverse::traverse_expressions\n \t\t\t       | Traverse::traverse_types);\n-  const unsigned int e_or_t_or_s = (e_or_t\n-\t\t\t\t    | Traverse::traverse_statements);\n   for (size_t i = 0; i < this->named_objects_.size(); ++i)\n     {\n       Named_object* p = this->named_objects_[i];\n-      int t = TRAVERSE_CONTINUE;\n-      switch (p->classification())\n-\t{\n-\tcase Named_object::NAMED_OBJECT_CONST:\n-\t  if ((traverse_mask & Traverse::traverse_constants) != 0)\n-\t    t = traverse->constant(p, is_global);\n-\t  if (t == TRAVERSE_CONTINUE\n-\t      && (traverse_mask & e_or_t) != 0)\n-\t    {\n-\t      Type* tc = p->const_value()->type();\n-\t      if (tc != NULL\n-\t\t  && Type::traverse(tc, traverse) == TRAVERSE_EXIT)\n-\t\treturn TRAVERSE_EXIT;\n-\t      t = p->const_value()->traverse_expression(traverse);\n-\t    }\n-\t  break;\n-\n-\tcase Named_object::NAMED_OBJECT_VAR:\n-\tcase Named_object::NAMED_OBJECT_RESULT_VAR:\n-\t  if ((traverse_mask & Traverse::traverse_variables) != 0)\n-\t    t = traverse->variable(p);\n-\t  if (t == TRAVERSE_CONTINUE\n-\t      && (traverse_mask & e_or_t) != 0)\n-\t    {\n-\t      if (p->is_result_variable()\n-\t\t  || p->var_value()->has_type())\n-\t\t{\n-\t\t  Type* tv = (p->is_variable()\n-\t\t\t      ? p->var_value()->type()\n-\t\t\t      : p->result_var_value()->type());\n-\t\t  if (tv != NULL\n-\t\t      && Type::traverse(tv, traverse) == TRAVERSE_EXIT)\n-\t\t    return TRAVERSE_EXIT;\n-\t\t}\n-\t    }\n-\t  if (t == TRAVERSE_CONTINUE\n-\t      && (traverse_mask & e_or_t_or_s) != 0\n-\t      && p->is_variable())\n-\t    t = p->var_value()->traverse_expression(traverse, traverse_mask);\n-\t  break;\n-\n-\tcase Named_object::NAMED_OBJECT_FUNC:\n-\t  if ((traverse_mask & Traverse::traverse_functions) != 0)\n-\t    t = traverse->function(p);\n-\n-\t  if (t == TRAVERSE_CONTINUE\n-\t      && (traverse_mask\n-\t\t  & (Traverse::traverse_variables\n-\t\t     | Traverse::traverse_constants\n-\t\t     | Traverse::traverse_functions\n-\t\t     | Traverse::traverse_blocks\n-\t\t     | Traverse::traverse_statements\n-\t\t     | Traverse::traverse_expressions\n-\t\t     | Traverse::traverse_types)) != 0)\n-\t    t = p->func_value()->traverse(traverse);\n-\t  break;\n-\n-\tcase Named_object::NAMED_OBJECT_PACKAGE:\n-\t  // These are traversed in Gogo::traverse.\n-\t  go_assert(is_global);\n-\t  break;\n-\n-\tcase Named_object::NAMED_OBJECT_TYPE:\n-\t  if ((traverse_mask & e_or_t) != 0)\n-\t    t = Type::traverse(p->type_value(), traverse);\n-\t  break;\n-\n-\tcase Named_object::NAMED_OBJECT_TYPE_DECLARATION:\n-\tcase Named_object::NAMED_OBJECT_FUNC_DECLARATION:\n-\tcase Named_object::NAMED_OBJECT_UNKNOWN:\n-\tcase Named_object::NAMED_OBJECT_ERRONEOUS:\n-\t  break;\n-\n-\tcase Named_object::NAMED_OBJECT_SINK:\n-\tdefault:\n-\t  go_unreachable();\n-\t}\n-\n-      if (t == TRAVERSE_EXIT)\n+      if (p->traverse(traverse, is_global) == TRAVERSE_EXIT)\n \treturn TRAVERSE_EXIT;\n     }\n "}, {"sha": "2ee0fda00ae531d98a37f4e312e08b156480802c", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0239f852591d368a42ce3b6c9f85cfba6a3aeff/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0239f852591d368a42ce3b6c9f85cfba6a3aeff/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=a0239f852591d368a42ce3b6c9f85cfba6a3aeff", "patch": "@@ -3047,6 +3047,10 @@ class Named_object\n   Location\n   location() const;\n \n+  // Traverse a Named_object.\n+  int\n+  traverse(Traverse*, bool is_global);\n+\n   // Convert a variable to the backend representation.\n   Bvariable*\n   get_backend_variable(Gogo*, Named_object* function);"}]}