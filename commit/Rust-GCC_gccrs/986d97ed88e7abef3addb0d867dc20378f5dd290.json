{"sha": "986d97ed88e7abef3addb0d867dc20378f5dd290", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg2ZDk3ZWQ4OGU3YWJlZjNhZGRiMGQ4NjdkYzIwMzc4ZjVkZDI5MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@nildram.co.uk", "date": "2008-01-24T17:46:31Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-01-24T17:46:31Z"}, "message": "re PR tree-optimization/34472 (gcc.dg/struct/wo_prof_malloc_size_var.c doesn't work)\n\ngcc/\n\tPR tree-optimization/34472\n\t* ipa-struct-reorg.c (safe_cond_expr_check): Change the DATA\n\tparameter to a \"bool *\" and set *DATA to false if there is\n\tan unsafe access.  Do not delete the structure here.\n\t(check_cond_exprs): Delete it here instead.\n\t(check_cond_exprs, exclude_cold_structs): Do not increase\n\tI when removing a structure.\n\nFrom-SVN: r131798", "tree": {"sha": "02d656d3a2e8e318ab786560ad58d7de7b4687b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02d656d3a2e8e318ab786560ad58d7de7b4687b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/986d97ed88e7abef3addb0d867dc20378f5dd290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986d97ed88e7abef3addb0d867dc20378f5dd290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/986d97ed88e7abef3addb0d867dc20378f5dd290", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986d97ed88e7abef3addb0d867dc20378f5dd290/comments", "author": null, "committer": null, "parents": [{"sha": "fcc448088df39d4512d3f1fd1d85ea2c83c36cf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc448088df39d4512d3f1fd1d85ea2c83c36cf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcc448088df39d4512d3f1fd1d85ea2c83c36cf9"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "d4d310cd488764fa85feeb913a6ef05cfd576687", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986d97ed88e7abef3addb0d867dc20378f5dd290/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986d97ed88e7abef3addb0d867dc20378f5dd290/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=986d97ed88e7abef3addb0d867dc20378f5dd290", "patch": "@@ -1,3 +1,13 @@\n+2008-01-24  Richard Sandiford  <rsandifo@nildram.co.uk>\n+\n+\tPR tree-optimization/34472\n+\t* ipa-struct-reorg.c (safe_cond_expr_check): Change the DATA\n+\tparameter to a \"bool *\" and set *DATA to false if there is\n+\tan unsafe access.  Do not delete the structure here.\n+\t(check_cond_exprs): Delete it here instead.\n+\t(check_cond_exprs, exclude_cold_structs): Do not increase\n+\tI when removing a structure.\n+\n 2008-01-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/34856"}, {"sha": "04948a33c099bd18bb52332868812e12a845b6cf", "filename": "gcc/ipa-struct-reorg.c", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/986d97ed88e7abef3addb0d867dc20378f5dd290/gcc%2Fipa-struct-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/986d97ed88e7abef3addb0d867dc20378f5dd290/gcc%2Fipa-struct-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-struct-reorg.c?ref=986d97ed88e7abef3addb0d867dc20378f5dd290", "patch": "@@ -3074,26 +3074,24 @@ dump_accs (d_str str)\n }\n \n /* This function checks whether an access statement, pointed by SLOT,\n-   is a condition we are capable to transform. If not, it removes\n-   the structure with index, represented by DATA, from the vector\n-   of structures.  */\n+   is a condition we are capable to transform.  It returns false if not,\n+   setting bool *DATA to false.  */\n  \n static int\n safe_cond_expr_check (void **slot, void *data)\n {\n   struct access_site *acc = *(struct access_site **) slot;\n \n-  if (TREE_CODE (acc->stmt) == COND_EXPR)\n+  if (TREE_CODE (acc->stmt) == COND_EXPR\n+      && !is_safe_cond_expr (acc->stmt))\n     {\n-      if (!is_safe_cond_expr (acc->stmt))\n+      if (dump_file)\n \t{\n-\t  if (dump_file)\n-\t    {\n-\t      fprintf (dump_file, \"\\nUnsafe conditional statement \");\n-\t      print_generic_stmt (dump_file, acc->stmt, 0);\n-\t    }\n-\t  remove_structure (*(unsigned *) data);\n+\t  fprintf (dump_file, \"\\nUnsafe conditional statement \");\n+\t  print_generic_stmt (dump_file, acc->stmt, 0);\n \t}\n+      *(bool *) data = false;\n+      return 0;\n     }\n   return 1;\n }\n@@ -3547,9 +3545,18 @@ check_cond_exprs (void)\n   d_str str;\n   unsigned i;\n \n-  for (i = 0; VEC_iterate (structure, structures, i, str); i++)\n-    if (str->accs)\n-      htab_traverse (str->accs, safe_cond_expr_check, &i);\n+  i = 0;\n+  while (VEC_iterate (structure, structures, i, str))\n+    {\n+      bool safe_p = true;\n+\n+      if (str->accs)\n+\thtab_traverse (str->accs, safe_cond_expr_check, &safe_p);\n+      if (!safe_p)\n+\tremove_structure (i);\n+      else\n+\ti++;\n+    }\n }\n \n /* We exclude from non-field accesses of the structure \n@@ -3859,7 +3866,8 @@ exclude_cold_structs (void)\n     sum_counts (str, &hotest);\n \n   /* Remove cold structures from structures vector.  */\n-  for (i = 0; VEC_iterate (structure, structures, i, str); i++)\n+  i = 0;\n+  while (VEC_iterate (structure, structures, i, str))\n     if (str->count * 100 < (hotest * STRUCT_REORG_COLD_STRUCT_RATIO))\n       {\n \tif (dump_file)\n@@ -3870,6 +3878,8 @@ exclude_cold_structs (void)\n \t  }\n \tremove_structure (i);\n       }\n+    else\n+      i++;\n }\n \n /* This function decomposes original structure into substructures, "}]}