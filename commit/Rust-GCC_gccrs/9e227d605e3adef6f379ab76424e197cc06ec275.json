{"sha": "9e227d605e3adef6f379ab76424e197cc06ec275", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyMjdkNjA1ZTNhZGVmNmYzNzlhYjc2NDI0ZTE5N2NjMDZlYzI3NQ==", "commit": {"author": {"name": "Dehao Chen", "email": "dehao@google.com", "date": "2012-07-16T11:08:21Z"}, "committer": {"name": "Dehao Chen", "email": "dehao@gcc.gnu.org", "date": "2012-07-16T11:08:21Z"}, "message": "revert: tree.h (phi_arg_d): New field.\n\n2012-07-16  Dehao Chen  <dehao@google.com>\n\n\tRevert\n\t2012-07-10  Dehao Chen  <dehao@google.com>\n\n\t* tree.h (phi_arg_d): New field.\n\t* tree-flow-inline.h (gimple_phi_arg_block): New function.\n\t(gimple_phi_arg_block_from_edge): New function.\n\t(gimple_phi_arg_set_block): New function.\n\t(gimple_phi_arg_has_block): New function.\n\t(redirect_edge_var_map_block): New function.\n\t* tree-flow.h (_edge_var_map): New field.\n\t* tree-ssa-live.c (remove_unused_locals): Mark phi_arg's block as used.\n\t* tree-eh.c (cleanup_empty_eh_merge_phis): Add block debug info for\n\tredirect_edge_var_map_add.\n\t* tree-outof-ssa.c (_elim_graph): New field.\n\t(insert_partition_copy_on_edge): New parameter.\n\t(insert_value_copy_on_edge): New parameter.\n\t(insert_rtx_to_part_on_edge): New parameter.\n\t(insert_part_to_rtx_on_edge): New parameter.\n\t(elim_graph_add_edge): New parameter.\n\t(elim_graph_remove_succ_edge): New parameter.\n\t(FOR_EACH_ELIM_GRAPH_SUCC): New parameter.\n\t(FOR_EACH_ELIM_GRAPH_PRED): New parameter.\n\t(new_elim_graph): Add block debug info.\n\t(clear_elim_graph): Likewise.\n\t(delete_elim_graph): Likewise.\n\t(elim_graph_add_node): Likewise.\n\t(elim_graph_add_edge): Likewise.\n\t(elim_graph_remove_succ_edge): Likewise.\n\t(eliminate_build): Likewise.\n\t(elim_forward): Likewise.\n\t(elim_unvisited_predecessor): Likewise.\n\t(elim_backward): Likewise.\n\t(elim_create): Likewise.\n\t(eliminate_phi): Likewise.\n\t(insert_backedge_copies): Likewise.\n\t* tree-into-ssa.c (insert_phi_nodes_for): Add block debug info for\n\tadd_phi_arg.\n\t(rewrite_add_phi_arguments): Likewise.\n\t* tree-ssa-loop-im.c (execute_sm_if_changed): Likewise.\n\t* tree-ssa-tail-merge.c (replace_block_by): Likewise.\n\t* tree-ssa-threadupdate.c (copy_phi_args): Likewise.\n\t* tree-loop-distribution.c (update_phis_for_loop_copy): Likewise.\n\t* tree-ssa-loop-manip.c (create_iv): Likewise.\n\t(add_exit_phis_edge): Likewise.\n\t(split_loop_exit_edge): Likewise.\n\t(copy_phi_node_args): Likewise.\n\t(tree_transform_and_unroll_loop): Likewise.\n\t* value-prof.c (gimple_ic): Likewise.\n\t(gimple_stringop_fixed_value): Likewise.\n\t* tree-tailcall.c (add_successor_phi_arg): Likewise.\n\t(eliminate_tail_call): Likewise.\n\t(create_tailcall_accumulator): Likewise.\n\t(tree_optimize_tail_calls_1): Likewise.\n\t* tree-phinodes.c (add_phi_arg): Likewise.\n\t(make_phi_node): Likewise.\n\t(resize_phi_node): Likewise.\n\t(remove_phi_arg_num): Likewise.\n\t* omp-low.c (expand_parallel_call): Likewise.\n\t(expand_omp_for_static_chunk): Likewise.\n\t* tree-vect-loop-manip.c (slpeel_update_phis_for_duplicate_loop):\n\tLikewise.\n\t(slpeel_update_phi_nodes_for_guard1): Likewise.\n\t(slpeel_update_phi_nodes_for_guard2): Likewise.\n\t(slpeel_tree_duplicate_loop_to_edge_cfg): Likewise.\n\t(set_prologue_iterations): Likewise.\n\t(slpeel_tree_peel_loop_to_edge): Likewise.\n\t(vect_loop_versioning): Likewise.\n\t* tree-parloops.c (create_phi_for_local_result): Likewise.\n\t(transform_to_exit_first_loop): Likewise.\n\t(create_parallel_loop): Likewise.\n\t* ipa-split.c (split_function): Likewise.\n\t* tree-vect-loop.c (get_initial_def_for_induction): Likewise.\n\t(vect_create_epilog_for_reduction): Likewise.\n\t* tree-vect-data-refs.c (vect_setup_realignment): Likewise.\n\t* graphite-scop-detection.c (canonicalize_loop_closed_ssa): Likewise.\n\t* tree-ssa-phiopt.c (cond_store_replacement): Likewise.\n\t(cond_if_else_store_replacement_1): Likewise.\n\t* tree-cfgcleanup.c (remove_forwarder_block): Likewise.\n\t(remove_forwarder_block_with_phi): Likewise.\n\t* tree-ssa-pre.c (insert_into_preds_of_block): Likewise.\n\t* tree-predcom.c (initialize_root_vars): Likewise.\n\t(initialize_root_vars_lm): Likewise.\n\t* sese.c (sese_add_exit_phis_edge): Likewise.\n\t* tree-ssa-dce.c (forward_edge_to_pdom): Likewise.\n\t* tree-ssa.c (flush_pending_stmts): Likewise.\n\t(redirect_edge_var_map_add): Likewise.\n\t(ssa_redirect_edge): Likewise.\n\t* gimple-streamer-in.c (input_phi): Likewise.\n\t* tree-vect-stmts.c (vectorizable_load): Likewise.\n\t* tree-inline.c (copy_phis_for_bb): Likewise.\n\t* tree-ssa-phiprop.c (phiprop_insert_phi): Likewise.\n\t* tree-switch-conversion.c (fix_phi_nodes): Likewise.\n\t* tree-cfg.c (reinstall_phi_args): Likewise.\n\t(gimple_make_forwarder_block): Likewise.\n\t(add_phi_args_after_copy_edge): Likewise.\n\t(gimple_duplicate_sese_tail): Likewise.\n\nFrom-SVN: r189518", "tree": {"sha": "29b7c73df2749617967334fe587c1c7d74aa5314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29b7c73df2749617967334fe587c1c7d74aa5314"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e227d605e3adef6f379ab76424e197cc06ec275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e227d605e3adef6f379ab76424e197cc06ec275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e227d605e3adef6f379ab76424e197cc06ec275", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e227d605e3adef6f379ab76424e197cc06ec275/comments", "author": {"login": "danielcdh", "id": 694263, "node_id": "MDQ6VXNlcjY5NDI2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielcdh", "html_url": "https://github.com/danielcdh", "followers_url": "https://api.github.com/users/danielcdh/followers", "following_url": "https://api.github.com/users/danielcdh/following{/other_user}", "gists_url": "https://api.github.com/users/danielcdh/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielcdh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielcdh/subscriptions", "organizations_url": "https://api.github.com/users/danielcdh/orgs", "repos_url": "https://api.github.com/users/danielcdh/repos", "events_url": "https://api.github.com/users/danielcdh/events{/privacy}", "received_events_url": "https://api.github.com/users/danielcdh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f691d19f9ea8b226618fb4151f76634fa02472a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f691d19f9ea8b226618fb4151f76634fa02472a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f691d19f9ea8b226618fb4151f76634fa02472a4"}], "stats": {"total": 540, "additions": 221, "deletions": 319}, "files": [{"sha": "0bae7affffb4695a5185c853526c0809ec7e6a71", "filename": "gcc/ChangeLog", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -1,3 +1,102 @@\n+2012-07-16  Dehao Chen  <dehao@google.com>\n+\n+\tRevert\n+\t2012-07-10  Dehao Chen  <dehao@google.com>\n+\n+\t* tree.h (phi_arg_d): New field.\n+\t* tree-flow-inline.h (gimple_phi_arg_block): New function.\n+\t(gimple_phi_arg_block_from_edge): New function.\n+\t(gimple_phi_arg_set_block): New function.\n+\t(gimple_phi_arg_has_block): New function.\n+\t(redirect_edge_var_map_block): New function.\n+\t* tree-flow.h (_edge_var_map): New field.\n+\t* tree-ssa-live.c (remove_unused_locals): Mark phi_arg's block as used.\n+\t* tree-eh.c (cleanup_empty_eh_merge_phis): Add block debug info for\n+\tredirect_edge_var_map_add.\n+\t* tree-outof-ssa.c (_elim_graph): New field.\n+\t(insert_partition_copy_on_edge): New parameter.\n+\t(insert_value_copy_on_edge): New parameter.\n+\t(insert_rtx_to_part_on_edge): New parameter.\n+\t(insert_part_to_rtx_on_edge): New parameter.\n+\t(elim_graph_add_edge): New parameter.\n+\t(elim_graph_remove_succ_edge): New parameter.\n+\t(FOR_EACH_ELIM_GRAPH_SUCC): New parameter.\n+\t(FOR_EACH_ELIM_GRAPH_PRED): New parameter.\n+\t(new_elim_graph): Add block debug info.\n+\t(clear_elim_graph): Likewise.\n+\t(delete_elim_graph): Likewise.\n+\t(elim_graph_add_node): Likewise.\n+\t(elim_graph_add_edge): Likewise.\n+\t(elim_graph_remove_succ_edge): Likewise.\n+\t(eliminate_build): Likewise.\n+\t(elim_forward): Likewise.\n+\t(elim_unvisited_predecessor): Likewise.\n+\t(elim_backward): Likewise.\n+\t(elim_create): Likewise.\n+\t(eliminate_phi): Likewise.\n+\t(insert_backedge_copies): Likewise.\n+\t* tree-into-ssa.c (insert_phi_nodes_for): Add block debug info for\n+\tadd_phi_arg.\n+\t(rewrite_add_phi_arguments): Likewise.\n+\t* tree-ssa-loop-im.c (execute_sm_if_changed): Likewise.\n+\t* tree-ssa-tail-merge.c (replace_block_by): Likewise.\n+\t* tree-ssa-threadupdate.c (copy_phi_args): Likewise.\n+\t* tree-loop-distribution.c (update_phis_for_loop_copy): Likewise.\n+\t* tree-ssa-loop-manip.c (create_iv): Likewise.\n+\t(add_exit_phis_edge): Likewise.\n+\t(split_loop_exit_edge): Likewise.\n+\t(copy_phi_node_args): Likewise.\n+\t(tree_transform_and_unroll_loop): Likewise.\n+\t* value-prof.c (gimple_ic): Likewise.\n+\t(gimple_stringop_fixed_value): Likewise.\n+\t* tree-tailcall.c (add_successor_phi_arg): Likewise.\n+\t(eliminate_tail_call): Likewise.\n+\t(create_tailcall_accumulator): Likewise.\n+\t(tree_optimize_tail_calls_1): Likewise.\n+\t* tree-phinodes.c (add_phi_arg): Likewise.\n+\t(make_phi_node): Likewise.\n+\t(resize_phi_node): Likewise.\n+\t(remove_phi_arg_num): Likewise.\n+\t* omp-low.c (expand_parallel_call): Likewise.\n+\t(expand_omp_for_static_chunk): Likewise.\n+\t* tree-vect-loop-manip.c (slpeel_update_phis_for_duplicate_loop):\n+\tLikewise.\n+\t(slpeel_update_phi_nodes_for_guard1): Likewise.\n+\t(slpeel_update_phi_nodes_for_guard2): Likewise.\n+\t(slpeel_tree_duplicate_loop_to_edge_cfg): Likewise.\n+\t(set_prologue_iterations): Likewise.\n+\t(slpeel_tree_peel_loop_to_edge): Likewise.\n+\t(vect_loop_versioning): Likewise.\n+\t* tree-parloops.c (create_phi_for_local_result): Likewise.\n+\t(transform_to_exit_first_loop): Likewise.\n+\t(create_parallel_loop): Likewise.\n+\t* ipa-split.c (split_function): Likewise.\n+\t* tree-vect-loop.c (get_initial_def_for_induction): Likewise.\n+\t(vect_create_epilog_for_reduction): Likewise.\n+\t* tree-vect-data-refs.c (vect_setup_realignment): Likewise.\n+\t* graphite-scop-detection.c (canonicalize_loop_closed_ssa): Likewise.\n+\t* tree-ssa-phiopt.c (cond_store_replacement): Likewise.\n+\t(cond_if_else_store_replacement_1): Likewise.\n+\t* tree-cfgcleanup.c (remove_forwarder_block): Likewise.\n+\t(remove_forwarder_block_with_phi): Likewise.\n+\t* tree-ssa-pre.c (insert_into_preds_of_block): Likewise.\n+\t* tree-predcom.c (initialize_root_vars): Likewise.\n+\t(initialize_root_vars_lm): Likewise.\n+\t* sese.c (sese_add_exit_phis_edge): Likewise.\n+\t* tree-ssa-dce.c (forward_edge_to_pdom): Likewise.\n+\t* tree-ssa.c (flush_pending_stmts): Likewise.\n+\t(redirect_edge_var_map_add): Likewise.\n+\t(ssa_redirect_edge): Likewise.\n+\t* gimple-streamer-in.c (input_phi): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_load): Likewise.\n+\t* tree-inline.c (copy_phis_for_bb): Likewise.\n+\t* tree-ssa-phiprop.c (phiprop_insert_phi): Likewise.\n+\t* tree-switch-conversion.c (fix_phi_nodes): Likewise.\n+\t* tree-cfg.c (reinstall_phi_args): Likewise.\n+\t(gimple_make_forwarder_block): Likewise.\n+\t(add_phi_args_after_copy_edge): Likewise.\n+\t(gimple_duplicate_sese_tail): Likewise.\n+\n 2012-07-16 Sergey Melnikov <sergey.melnikov@intel.com>\n \n \t* config/i386/i386.md (stack_protect_set): Disable the pattern"}, {"sha": "1b6bf4bd6d78cdadb482d98b5a84971aba2fcc0f", "filename": "gcc/gimple-streamer-in.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Fgimple-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Fgimple-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-in.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -67,7 +67,7 @@ input_phi (struct lto_input_block *ib, basic_block bb, struct data_in *data_in,\n \t    break;\n \t  }\n \n-      add_phi_arg (result, def, e, arg_loc, NULL);\n+      add_phi_arg (result, def, e, arg_loc);\n     }\n \n   return result;"}, {"sha": "cfa06ab60c5b9929abf1ff5d5e5951b61fba37c0", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -1331,7 +1331,7 @@ canonicalize_loop_closed_ssa (loop_p loop)\n \t\t\t\t\t  gimple_phi_result_ptr (close_phi));\n \t\tadd_phi_arg (close_phi, arg,\n \t\t\t     gimple_phi_arg_edge (close_phi, 0),\n-\t\t\t     UNKNOWN_LOCATION, NULL);\n+\t\t\t     UNKNOWN_LOCATION);\n \t\tuse_p = gimple_phi_arg_imm_use_ptr (phi, i);\n \t\treplace_exp (use_p, res);\n \t\tupdate_stmt (phi);"}, {"sha": "1997f62538bffd8ff8372745bf72e13473d10c3c", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -1286,8 +1286,7 @@ split_function (struct split_point *split_point)\n \t\t  /* When there is PHI, just update its value.  */\n \t\t  if (TREE_CODE (retval) == SSA_NAME\n \t\t      && !gsi_end_p (psi))\n-\t\t    add_phi_arg (gsi_stmt (psi), retval, e, UNKNOWN_LOCATION,\n-\t\t\t\t NULL);\n+\t\t    add_phi_arg (gsi_stmt (psi), retval, e, UNKNOWN_LOCATION);\n \t\t  /* Otherwise update the return BB itself.\n \t\t     find_return_bb allows at most one assignment to return value,\n \t\t     so update first statement.  */"}, {"sha": "d51715e2843d40de9e3c0faafe27fa82cdf0dff2", "filename": "gcc/omp-low.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -3061,8 +3061,8 @@ expand_parallel_call (struct omp_region *region, basic_block bb,\n \t    {\n \t      gimple phi = create_phi_node (tmp_join, bb);\n \t      SSA_NAME_DEF_STMT (tmp_join) = phi;\n-\t      add_phi_arg (phi, tmp_then, e_then, UNKNOWN_LOCATION, NULL);\n-\t      add_phi_arg (phi, tmp_else, e_else, UNKNOWN_LOCATION, NULL);\n+\t      add_phi_arg (phi, tmp_then, e_then, UNKNOWN_LOCATION);\n+\t      add_phi_arg (phi, tmp_else, e_else, UNKNOWN_LOCATION);\n \t    }\n \n \t  val = tmp_join;\n@@ -4597,7 +4597,6 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n \t{\n \t  gimple nphi;\n \t  source_location locus;\n-\t  tree block;\n \n \t  phi = gsi_stmt (psi);\n \t  t = gimple_phi_result (phi);\n@@ -4607,16 +4606,14 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n \n \t  t = PHI_ARG_DEF_FROM_EDGE (phi, se);\n \t  locus = gimple_phi_arg_location_from_edge (phi, se);\n-\t  block = gimple_phi_arg_block_from_edge (phi, se);\n \n \t  /* A special case -- fd->loop.v is not yet computed in\n \t     iter_part_bb, we need to use v_extra instead.  */\n \t  if (t == fd->loop.v)\n \t    t = v_extra;\n-\t  add_phi_arg (nphi, t, ene, locus, block);\n+\t  add_phi_arg (nphi, t, ene, locus);\n \t  locus = redirect_edge_var_map_location (vm);\n-\t  block = redirect_edge_var_map_block (vm);\n-\t  add_phi_arg (nphi, redirect_edge_var_map_def (vm), re, locus, block);\n+\t  add_phi_arg (nphi, redirect_edge_var_map_def (vm), re, locus);\n \t}\n       gcc_assert (!gsi_end_p (psi) && i == VEC_length (edge_var_map, head));\n       redirect_edge_var_map_clear (re);\n@@ -4632,9 +4629,9 @@ expand_omp_for_static_chunk (struct omp_region *region, struct omp_for_data *fd)\n       phi = create_phi_node (trip_main, iter_part_bb);\n       SSA_NAME_DEF_STMT (trip_main) = phi;\n       add_phi_arg (phi, trip_back, single_succ_edge (trip_update_bb),\n-\t\t   UNKNOWN_LOCATION, NULL);\n+\t\t   UNKNOWN_LOCATION);\n       add_phi_arg (phi, trip_init, single_succ_edge (entry_bb),\n-\t\t   UNKNOWN_LOCATION, NULL);\n+\t\t   UNKNOWN_LOCATION);\n     }\n \n   set_immediate_dominator (CDI_DOMINATORS, trip_update_bb, cont_bb);"}, {"sha": "03b9f3d62aa50afc0d20e0c6f3cda8721ee8c5d4", "filename": "gcc/sese.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -349,8 +349,8 @@ sese_add_exit_phis_edge (basic_block exit, tree use, edge false_e, edge true_e)\n \n   create_new_def_for (gimple_phi_result (phi), phi,\n \t\t      gimple_phi_result_ptr (phi));\n-  add_phi_arg (phi, use, false_e, UNKNOWN_LOCATION, NULL);\n-  add_phi_arg (phi, use, true_e, UNKNOWN_LOCATION, NULL);\n+  add_phi_arg (phi, use, false_e, UNKNOWN_LOCATION);\n+  add_phi_arg (phi, use, true_e, UNKNOWN_LOCATION);\n }\n \n /* Insert in the block BB phi nodes for variables defined in REGION"}, {"sha": "239baafb8183e6553f1a9ae7cde6b7337bf7a271", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -1,3 +1,10 @@\n+2012-07-16  Dehao Chen  <dehao@google.com>\n+\n+\tRevert\n+\t2012-07-10  Dehao Chen  <dehao@google.com>\n+\n+\t* gcc.dg/debug_info_inline.c: New test.\n+\n 2012-07-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/53956"}, {"sha": "a9152615c73b819d0dfeb4ad387d6867a71f65a5", "filename": "gcc/testsuite/gcc.dg/debug_info_inline.c", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f691d19f9ea8b226618fb4151f76634fa02472a4/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug_info_inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f691d19f9ea8b226618fb4151f76634fa02472a4/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug_info_inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug_info_inline.c?ref=f691d19f9ea8b226618fb4151f76634fa02472a4", "patch": "@@ -1,24 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -g\" } */\n-\n-int g, a;\n-\n-static int foo ()\n-{\n-  int ret = a;\n-\n-  if (g > -10)\n-    return 10;\n-\n-  return ret;\n-}\n-\n-int bar()\n-{\n-  if (foo())\n-    return 0;\n-  else\n-    return 1;\n-}\n-\n-/* { dg-final { scan-assembler \"loc 1 19 0\\n.*\\n.LBB\" } } */"}, {"sha": "decd1d6dffc1d45527fc1b99fc4b0dff82fdb22f", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -2553,8 +2553,7 @@ reinstall_phi_args (edge new_edge, edge old_edge)\n \n       gcc_assert (result == gimple_phi_result (phi));\n \n-      add_phi_arg (phi, arg, new_edge, redirect_edge_var_map_location (vm),\n-\t\t   redirect_edge_var_map_block (vm));\n+      add_phi_arg (phi, arg, new_edge, redirect_edge_var_map_location (vm));\n     }\n \n   redirect_edge_var_map_clear (old_edge);\n@@ -5016,7 +5015,7 @@ gimple_make_forwarder_block (edge fallthru)\n       SSA_NAME_DEF_STMT (var) = new_phi;\n       gimple_phi_set_result (phi, make_ssa_name (SSA_NAME_VAR (var), phi));\n       add_phi_arg (new_phi, gimple_phi_result (phi), fallthru,\n-\t\t   UNKNOWN_LOCATION, NULL);\n+\t\t   UNKNOWN_LOCATION);\n     }\n \n   /* Add the arguments we have stored on edges.  */\n@@ -5477,8 +5476,7 @@ add_phi_args_after_copy_edge (edge e_copy)\n       phi_copy = gsi_stmt (psi_copy);\n       def = PHI_ARG_DEF_FROM_EDGE (phi, e);\n       add_phi_arg (phi_copy, def, e_copy,\n-\t\t   gimple_phi_arg_location_from_edge (phi, e),\n-\t\t   gimple_phi_arg_block_from_edge (phi, e));\n+\t\t   gimple_phi_arg_location_from_edge (phi, e));\n     }\n }\n \n@@ -5853,8 +5851,7 @@ gimple_duplicate_sese_tail (edge entry ATTRIBUTE_UNUSED, edge exit ATTRIBUTE_UNU\n \t  {\n \t    phi = gsi_stmt (psi);\n \t    def = PHI_ARG_DEF (phi, nexits[0]->dest_idx);\n-\t    add_phi_arg (phi, def, e, gimple_phi_arg_location_from_edge (phi, e),\n-\t\t\t gimple_phi_arg_block_from_edge (phi, e));\n+\t    add_phi_arg (phi, def, e, gimple_phi_arg_location_from_edge (phi, e));\n \t  }\n       }\n   e = redirect_edge_and_branch (nexits[1], nexits[0]->dest);\n@@ -7427,8 +7424,7 @@ gimple_lv_adjust_loop_header_phi (basic_block first, basic_block second,\n       phi1 = gsi_stmt (psi1);\n       phi2 = gsi_stmt (psi2);\n       def = PHI_ARG_DEF (phi2, e2->dest_idx);\n-      add_phi_arg (phi1, def, e, gimple_phi_arg_location_from_edge (phi2, e2),\n-\t\t   gimple_phi_arg_block_from_edge (phi2, e2));\n+      add_phi_arg (phi1, def, e, gimple_phi_arg_location_from_edge (phi2, e2));\n     }\n }\n "}, {"sha": "78583c47e1b7fb11a22fa9716b6ae104a9a32ac2", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -444,9 +444,7 @@ remove_forwarder_block (basic_block bb)\n \t    {\n \t      gimple phi = gsi_stmt (gsi);\n \t      source_location l = gimple_phi_arg_location_from_edge (phi, succ);\n-\t      tree b = gimple_phi_arg_block_from_edge (phi, succ);\n-\t      add_phi_arg (phi, gimple_phi_arg_def (phi, succ->dest_idx), s, l,\n-\t\t\t   b);\n+\t      add_phi_arg (phi, gimple_phi_arg_def (phi, succ->dest_idx), s, l);\n \t    }\n \t}\n     }\n@@ -873,7 +871,6 @@ remove_forwarder_block_with_phi (basic_block bb)\n \t  gimple phi = gsi_stmt (gsi);\n \t  tree def = gimple_phi_arg_def (phi, succ->dest_idx);\n \t  source_location locus = gimple_phi_arg_location_from_edge (phi, succ);\n-\t  tree block = gimple_phi_arg_block_from_edge (phi, succ);\n \n \t  if (TREE_CODE (def) == SSA_NAME)\n \t    {\n@@ -894,13 +891,12 @@ remove_forwarder_block_with_phi (basic_block bb)\n \t\t    {\n \t\t      def = new_arg;\n \t\t      locus = redirect_edge_var_map_location (vm);\n-\t\t      block = redirect_edge_var_map_block (vm);\n \t\t      break;\n \t\t    }\n \t\t}\n \t    }\n \n-\t  add_phi_arg (phi, def, s, locus, block);\n+\t  add_phi_arg (phi, def, s, locus);\n \t}\n \n       redirect_edge_var_map_clear (e);"}, {"sha": "3b35ca4286200c7dd506aa1b1cfb3511cb2e8ad2", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -3853,15 +3853,13 @@ cleanup_empty_eh_merge_phis (basic_block new_bb, basic_block old_bb,\n \t  FOR_EACH_EDGE (e, ei, old_bb->preds)\n \t    {\n \t      location_t oloc;\n-\t      tree oblock;\n \t      tree oop;\n \n \t      if ((e->flags & EDGE_EH) == 0)\n \t\tcontinue;\n \t      oop = gimple_phi_arg_def (ophi, e->dest_idx);\n \t      oloc = gimple_phi_arg_location (ophi, e->dest_idx);\n-\t      oblock = gimple_phi_arg_block (ophi, e->dest_idx);\n-\t      redirect_edge_var_map_add (e, nresult, oop, oloc, oblock);\n+\t      redirect_edge_var_map_add (e, nresult, oop, oloc);\n \t    }\n \t}\n       /* If we didn't find the PHI, but it's a VOP, remember to rename\n@@ -3876,9 +3874,8 @@ cleanup_empty_eh_merge_phis (basic_block new_bb, basic_block old_bb,\n \t{\n \t  location_t nloc\n \t    = gimple_phi_arg_location (nphi, old_bb_out->dest_idx);\n-\t  tree nblock = gimple_phi_arg_block (nphi, old_bb_out->dest_idx);\n \t  FOR_EACH_EDGE (e, ei, old_bb->preds)\n-\t    redirect_edge_var_map_add (e, nresult, nop, nloc, nblock);\n+\t    redirect_edge_var_map_add (e, nresult, nop, nloc);\n \t}\n     }\n "}, {"sha": "748a97c236e88f6a3122b2813e1f00e6577010a6", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -483,22 +483,6 @@ gimple_phi_arg_location_from_edge (gimple gs, edge e)\n   return gimple_phi_arg (gs, e->dest_idx)->locus;\n }\n \n-/* Return the block location of gimple argument I of phi node GS.  */\n-\n-static inline tree\n-gimple_phi_arg_block (gimple gs, size_t i)\n-{\n-  return gimple_phi_arg (gs, i)->block;\n-}\n-\n-/* Return the block location of the argument on edge E of phi node GS.  */\n-\n-static inline tree\n-gimple_phi_arg_block_from_edge (gimple gs, edge e)\n-{\n-  return gimple_phi_arg (gs, e->dest_idx)->block;\n-}\n-\n /* Set the source location of gimple argument I of phi node GS to LOC.  */\n \n static inline void\n@@ -507,14 +491,6 @@ gimple_phi_arg_set_location (gimple gs, size_t i, source_location loc)\n   gimple_phi_arg (gs, i)->locus = loc;\n }\n \n-/* Set the block location of gimple argument I of phi node GS to BLOCK.  */\n-\n-static inline void\n-gimple_phi_arg_set_block (gimple gs, size_t i, tree block)\n-{\n-  gimple_phi_arg (gs, i)->block = block;\n-}\n-\n /* Return TRUE if argument I of phi node GS has a location record.  */\n \n static inline bool\n@@ -523,13 +499,6 @@ gimple_phi_arg_has_location (gimple gs, size_t i)\n   return gimple_phi_arg_location (gs, i) != UNKNOWN_LOCATION;\n }\n \n-/* Return TRUE if argument I of phi node GS has a location record.  */\n-\n-static inline bool\n-gimple_phi_arg_has_block (gimple gs, size_t i)\n-{\n-  return gimple_phi_arg_block (gs, i) != NULL;\n-}\n \n /* Return the PHI nodes for basic block BB, or NULL if there are no\n    PHI nodes.  */\n@@ -1248,13 +1217,6 @@ redirect_edge_var_map_location (edge_var_map *v)\n   return v->locus;\n }\n \n-/* Given an edge_var_map V, return the PHI arg location.  */\n-\n-static inline tree\n-redirect_edge_var_map_block (edge_var_map *v)\n-{\n-  return v->block;\n-}\n \n /* Return an SSA_NAME node for variable VAR defined in statement STMT\n    in function cfun.  */"}, {"sha": "8f7d336037e77c42ceb363057fe37443342bbe7e", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -507,7 +507,7 @@ extern void find_referenced_vars_in (gimple);\n extern void reserve_phi_args_for_new_edge (basic_block);\n extern void add_phi_node_to_bb (gimple phi, basic_block bb);\n extern gimple create_phi_node (tree, basic_block);\n-extern void add_phi_arg (gimple, tree, edge, source_location, tree);\n+extern void add_phi_arg (gimple, tree, edge, source_location);\n extern void remove_phi_args (edge);\n extern void remove_phi_node (gimple_stmt_iterator *, bool);\n extern void remove_phi_nodes (basic_block);\n@@ -531,7 +531,6 @@ struct _edge_var_map {\n   tree result;\t\t\t/* PHI result.  */\n   tree def;\t\t\t/* PHI arg definition.  */\n   source_location locus;        /* PHI arg location.  */\n-  tree block;\t\t\t/* PHI arg block.  */\n };\n typedef struct _edge_var_map edge_var_map;\n \n@@ -542,7 +541,7 @@ DEF_VEC_ALLOC_O(edge_var_map, heap);\n typedef VEC(edge_var_map, heap) *edge_var_map_vector;\n \n extern void init_tree_ssa (struct function *);\n-extern void redirect_edge_var_map_add (edge, tree, tree, source_location, tree);\n+extern void redirect_edge_var_map_add (edge, tree, tree, source_location);\n extern void redirect_edge_var_map_clear (edge);\n extern void redirect_edge_var_map_dup (edge, edge);\n extern edge_var_map_vector redirect_edge_var_map_vector (edge);"}, {"sha": "061f4c5a99763124c5d16b8f5c21942d4a7d1eb3", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -2019,7 +2019,6 @@ copy_phis_for_bb (basic_block bb, copy_body_data *id)\n \t      tree arg;\n \t      tree new_arg;\n \t      tree block = id->block;\n-\t      tree arg_block, *n;\n \t      edge_iterator ei2;\n \n \t      /* When doing partial cloning, we allow PHIs on the entry block\n@@ -2047,15 +2046,8 @@ copy_phis_for_bb (basic_block bb, copy_body_data *id)\n \t\t  gsi_insert_seq_on_edge (new_edge, stmts);\n \t\t  inserted = true;\n \t\t}\n-\t      n = (tree *) pointer_map_contains (id->decl_map,\n-\t\tgimple_phi_arg_block_from_edge (phi, old_edge));\n-\t      if (n)\n-\t\targ_block = *n;\n-\t      else\n-\t\targ_block = NULL;\n \t      add_phi_arg (new_phi, new_arg, new_edge,\n-\t\t\t   gimple_phi_arg_location_from_edge (phi, old_edge),\n-\t\t\t   arg_block);\n+\t\t\t   gimple_phi_arg_location_from_edge (phi, old_edge));\n \t    }\n \t}\n     }"}, {"sha": "102b699c5008b2a53479658cb26ef4af7e820bc3", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -1119,7 +1119,7 @@ insert_phi_nodes_for (tree var, bitmap phi_insertion_points, bool update_p)\n \t     renamer will use the symbol on the LHS to get its\n \t     reaching definition.  */\n \t  FOR_EACH_EDGE (e, ei, bb->preds)\n-\t    add_phi_arg (phi, var, e, UNKNOWN_LOCATION, NULL);\n+\t    add_phi_arg (phi, var, e, UNKNOWN_LOCATION);\n \t}\n       else\n \t{\n@@ -1474,8 +1474,7 @@ rewrite_add_phi_arguments (basic_block bb)\n \t  phi = gsi_stmt (gsi);\n \t  currdef = get_reaching_def (SSA_NAME_VAR (gimple_phi_result (phi)));\n \t  stmt = SSA_NAME_DEF_STMT (currdef);\n-\t  add_phi_arg (phi, currdef, e, gimple_location (stmt),\n-\t\t       gimple_block (stmt));\n+\t  add_phi_arg (phi, currdef, e, gimple_location (stmt));\n \t}\n     }\n }"}, {"sha": "58ed12b1e69003953921a1552cd05da28be24034", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -171,22 +171,19 @@ update_phis_for_loop_copy (struct loop *orig_loop, struct loop *new_loop)\n     {\n       tree def;\n       source_location locus;\n-      tree block;\n       gimple phi_new = gsi_stmt (si_new);\n       gimple phi_orig = gsi_stmt (si_orig);\n \n       /* Add the first phi argument for the phi in NEW_LOOP (the one\n \t associated with the entry of NEW_LOOP)  */\n       def = PHI_ARG_DEF_FROM_EDGE (phi_orig, orig_entry_e);\n       locus = gimple_phi_arg_location_from_edge (phi_orig, orig_entry_e);\n-      block = gimple_phi_arg_block_from_edge (phi_orig, orig_entry_e);\n-      add_phi_arg (phi_new, def, new_loop_entry_e, locus, block);\n+      add_phi_arg (phi_new, def, new_loop_entry_e, locus);\n \n       /* Add the second phi argument for the phi in NEW_LOOP (the one\n \t associated with the latch of NEW_LOOP)  */\n       def = PHI_ARG_DEF_FROM_EDGE (phi_orig, orig_loop_latch);\n       locus = gimple_phi_arg_location_from_edge (phi_orig, orig_loop_latch);\n-      block = gimple_phi_arg_block_from_edge (phi_orig, orig_loop_latch);\n \n       if (TREE_CODE (def) == SSA_NAME)\n \t{\n@@ -201,8 +198,7 @@ update_phis_for_loop_copy (struct loop *orig_loop, struct loop *new_loop)\n \t/* Could be an integer.  */\n \tnew_ssa_name = def;\n \n-      add_phi_arg (phi_new, new_ssa_name, loop_latch_edge (new_loop), locus,\n-\t\t   block);\n+      add_phi_arg (phi_new, new_ssa_name, loop_latch_edge (new_loop), locus);\n     }\n }\n "}, {"sha": "f52b26030121e0d87922cc127c99e21436c6e6c5", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 25, "deletions": 76, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -78,9 +78,6 @@ typedef struct _elim_graph {\n   /* Source locus on each edge */\n   VEC(source_location,heap) *edge_locus;\n \n-  /* Block location on each edge.  */\n-  VEC(tree,heap) *edge_block;\n-\n   /* Visited vector.  */\n   sbitmap visited;\n \n@@ -99,9 +96,6 @@ typedef struct _elim_graph {\n \n   /* Source locations for any constant copies.  */\n   VEC(source_location,heap) *copy_locus;\n-\n-  /* Block locations for any constant copies.  */\n-  VEC(tree,heap) *copy_block;\n } *elim_graph;\n \n \n@@ -180,8 +174,7 @@ emit_partition_copy (rtx dest, rtx src, int unsignedsrcp, tree sizeexp)\n /* Insert a copy instruction from partition SRC to DEST onto edge E.  */\n \n static void\n-insert_partition_copy_on_edge (edge e, int dest, int src, source_location locus,\n-\t\t\t       tree block)\n+insert_partition_copy_on_edge (edge e, int dest, int src, source_location locus)\n {\n   tree var;\n   rtx seq;\n@@ -201,10 +194,7 @@ insert_partition_copy_on_edge (edge e, int dest, int src, source_location locus,\n   set_location_for_edge (e);\n   /* If a locus is provided, override the default.  */\n   if (locus)\n-    {\n-      set_curr_insn_source_location (locus);\n-      set_curr_insn_block (block);\n-    }\n+    set_curr_insn_source_location (locus);\n \n   var = partition_to_var (SA.map, src);\n   seq = emit_partition_copy (SA.partition_to_pseudo[dest],\n@@ -219,8 +209,7 @@ insert_partition_copy_on_edge (edge e, int dest, int src, source_location locus,\n    onto edge E.  */\n \n static void\n-insert_value_copy_on_edge (edge e, int dest, tree src, source_location locus,\n-\t\t\t   tree block)\n+insert_value_copy_on_edge (edge e, int dest, tree src, source_location locus)\n {\n   rtx seq, x;\n   enum machine_mode dest_mode, src_mode;\n@@ -242,10 +231,7 @@ insert_value_copy_on_edge (edge e, int dest, tree src, source_location locus,\n   set_location_for_edge (e);\n   /* If a locus is provided, override the default.  */\n   if (locus)\n-    {\n-      set_curr_insn_source_location (locus);\n-      set_curr_insn_block (block);\n-    }\n+    set_curr_insn_source_location (locus);\n \n   start_sequence ();\n \n@@ -283,7 +269,7 @@ insert_value_copy_on_edge (edge e, int dest, tree src, source_location locus,\n \n static void\n insert_rtx_to_part_on_edge (edge e, int dest, rtx src, int unsignedsrcp,\n-\t\t\t    source_location locus, tree block)\n+\t\t\t    source_location locus)\n {\n   rtx seq;\n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -301,10 +287,7 @@ insert_rtx_to_part_on_edge (edge e, int dest, rtx src, int unsignedsrcp,\n   set_location_for_edge (e);\n   /* If a locus is provided, override the default.  */\n   if (locus)\n-    {\n-      set_curr_insn_source_location (locus);\n-      set_curr_insn_block (block);\n-    }\n+    set_curr_insn_source_location (locus);\n \n   /* We give the destination as sizeexp in case src/dest are BLKmode\n      mems.  Usually we give the source.  As we result from SSA names\n@@ -321,8 +304,7 @@ insert_rtx_to_part_on_edge (edge e, int dest, rtx src, int unsignedsrcp,\n    onto edge E.  */\n \n static void\n-insert_part_to_rtx_on_edge (edge e, rtx dest, int src, source_location locus,\n-\t\t\t    tree block)\n+insert_part_to_rtx_on_edge (edge e, rtx dest, int src, source_location locus)\n {\n   tree var;\n   rtx seq;\n@@ -341,10 +323,7 @@ insert_part_to_rtx_on_edge (edge e, rtx dest, int src, source_location locus,\n   set_location_for_edge (e);\n   /* If a locus is provided, override the default.  */\n   if (locus)\n-    {\n-      set_curr_insn_source_location (locus);\n-      set_curr_insn_block (block);\n-    }\n+    set_curr_insn_source_location (locus);\n \n   var = partition_to_var (SA.map, src);\n   seq = emit_partition_copy (dest,\n@@ -368,10 +347,8 @@ new_elim_graph (int size)\n   g->const_dests = VEC_alloc (int, heap, 20);\n   g->const_copies = VEC_alloc (tree, heap, 20);\n   g->copy_locus = VEC_alloc (source_location, heap, 10);\n-  g->copy_block = VEC_alloc (tree, heap, 10);\n   g->edge_list = VEC_alloc (int, heap, 20);\n   g->edge_locus = VEC_alloc (source_location, heap, 10);\n-  g->edge_block = VEC_alloc (tree, heap, 10);\n   g->stack = VEC_alloc (int, heap, 30);\n \n   g->visited = sbitmap_alloc (size);\n@@ -388,7 +365,6 @@ clear_elim_graph (elim_graph g)\n   VEC_truncate (int, g->nodes, 0);\n   VEC_truncate (int, g->edge_list, 0);\n   VEC_truncate (source_location, g->edge_locus, 0);\n-  VEC_truncate (tree, g->edge_block, 0);\n }\n \n \n@@ -404,9 +380,7 @@ delete_elim_graph (elim_graph g)\n   VEC_free (int, heap, g->const_dests);\n   VEC_free (int, heap, g->nodes);\n   VEC_free (source_location, heap, g->copy_locus);\n-  VEC_free (tree, heap, g->copy_block);\n   VEC_free (source_location, heap, g->edge_locus);\n-  VEC_free (tree, heap, g->edge_block);\n \n   free (g);\n }\n@@ -439,22 +413,19 @@ elim_graph_add_node (elim_graph g, int node)\n /* Add the edge PRED->SUCC to graph G.  */\n \n static inline void\n-elim_graph_add_edge (elim_graph g, int pred, int succ, source_location locus,\n-\t\t     tree block)\n+elim_graph_add_edge (elim_graph g, int pred, int succ, source_location locus)\n {\n   VEC_safe_push (int, heap, g->edge_list, pred);\n   VEC_safe_push (int, heap, g->edge_list, succ);\n   VEC_safe_push (source_location, heap, g->edge_locus, locus);\n-  VEC_safe_push (tree, heap, g->edge_block, block);\n }\n \n \n /* Remove an edge from graph G for which NODE is the predecessor, and\n    return the successor node.  -1 is returned if there is no such edge.  */\n \n static inline int\n-elim_graph_remove_succ_edge (elim_graph g, int node, source_location *locus,\n-\t\t\t     tree *block)\n+elim_graph_remove_succ_edge (elim_graph g, int node, source_location *locus)\n {\n   int y;\n   unsigned x;\n@@ -466,12 +437,9 @@ elim_graph_remove_succ_edge (elim_graph g, int node, source_location *locus,\n \tVEC_replace (int, g->edge_list, x + 1, -1);\n \t*locus = VEC_index (source_location, g->edge_locus, x / 2);\n \tVEC_replace (source_location, g->edge_locus, x / 2, UNKNOWN_LOCATION);\n-\t*block = VEC_index (tree, g->edge_block, x / 2);\n-\tVEC_replace (tree, g->edge_block, x / 2, NULL);\n \treturn y;\n       }\n   *locus = UNKNOWN_LOCATION;\n-  *block = NULL;\n   return -1;\n }\n \n@@ -480,7 +448,7 @@ elim_graph_remove_succ_edge (elim_graph g, int node, source_location *locus,\n    edge list.  VAR will hold the partition number found.  CODE is the\n    code fragment executed for every node found.  */\n \n-#define FOR_EACH_ELIM_GRAPH_SUCC(GRAPH, NODE, VAR, LOCUS, BLOCK, CODE)\t\\\n+#define FOR_EACH_ELIM_GRAPH_SUCC(GRAPH, NODE, VAR, LOCUS, CODE)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   unsigned x_;\t\t\t\t\t\t\t\t\\\n   int y_;\t\t\t\t\t\t\t\t\\\n@@ -492,8 +460,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n       (void) ((VAR) = VEC_index (int, (GRAPH)->edge_list, x_ + 1));\t\\\n       (void) ((LOCUS) = VEC_index (source_location,\t\t\t\\\n \t\t\t\t   (GRAPH)->edge_locus, x_ / 2));\t\\\n-      (void) ((BLOCK) = VEC_index (tree,\t\t\t\t\\\n-\t\t\t\t   (GRAPH)->edge_block, x_ / 2));\t\\\n       CODE;\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n@@ -503,7 +469,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    GRAPH.  VAR will hold the partition number found.  CODE is the\n    code fragment executed for every node found.  */\n \n-#define FOR_EACH_ELIM_GRAPH_PRED(GRAPH, NODE, VAR, LOCUS, BLOCK, CODE)\t\\\n+#define FOR_EACH_ELIM_GRAPH_PRED(GRAPH, NODE, VAR, LOCUS, CODE)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   unsigned x_;\t\t\t\t\t\t\t\t\\\n   int y_;\t\t\t\t\t\t\t\t\\\n@@ -515,8 +481,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n       (void) ((VAR) = VEC_index (int, (GRAPH)->edge_list, x_));\t\t\\\n       (void) ((LOCUS) = VEC_index (source_location,\t\t\t\\\n \t\t\t\t   (GRAPH)->edge_locus, x_ / 2));\t\\\n-      (void) ((BLOCK) = VEC_index (tree,\t\t\t\t\\\n-\t\t\t\t   (GRAPH)->edge_block, x_ / 2));\t\\\n       CODE;\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n@@ -547,7 +511,6 @@ eliminate_build (elim_graph g)\n     {\n       gimple phi = gsi_stmt (gsi);\n       source_location locus;\n-      tree block;\n \n       p0 = var_to_partition (g->map, gimple_phi_result (phi));\n       /* Ignore results which are not in partitions.  */\n@@ -556,7 +519,6 @@ eliminate_build (elim_graph g)\n \n       Ti = PHI_ARG_DEF (phi, g->e->dest_idx);\n       locus = gimple_phi_arg_location_from_edge (phi, g->e);\n-      block = gimple_phi_arg_block_from_edge (phi, g->e);\n \n       /* If this argument is a constant, or a SSA_NAME which is being\n \t left in SSA form, just queue a copy to be emitted on this\n@@ -570,7 +532,6 @@ eliminate_build (elim_graph g)\n \t  VEC_safe_push (int, heap, g->const_dests, p0);\n \t  VEC_safe_push (tree, heap, g->const_copies, Ti);\n \t  VEC_safe_push (source_location, heap, g->copy_locus, locus);\n-\t  VEC_safe_push (tree, heap, g->copy_block, block);\n \t}\n       else\n         {\n@@ -579,7 +540,7 @@ eliminate_build (elim_graph g)\n \t    {\n \t      eliminate_name (g, p0);\n \t      eliminate_name (g, pi);\n-\t      elim_graph_add_edge (g, p0, pi, locus, block);\n+\t      elim_graph_add_edge (g, p0, pi, locus);\n \t    }\n \t}\n     }\n@@ -593,10 +554,9 @@ elim_forward (elim_graph g, int T)\n {\n   int S;\n   source_location locus;\n-  tree block;\n \n   SET_BIT (g->visited, T);\n-  FOR_EACH_ELIM_GRAPH_SUCC (g, T, S, locus, block,\n+  FOR_EACH_ELIM_GRAPH_SUCC (g, T, S, locus,\n     {\n       if (!TEST_BIT (g->visited, S))\n         elim_forward (g, S);\n@@ -612,9 +572,8 @@ elim_unvisited_predecessor (elim_graph g, int T)\n {\n   int P;\n   source_location locus;\n-  tree block;\n \n-  FOR_EACH_ELIM_GRAPH_PRED (g, T, P, locus, block,\n+  FOR_EACH_ELIM_GRAPH_PRED (g, T, P, locus,\n     {\n       if (!TEST_BIT (g->visited, P))\n         return 1;\n@@ -629,15 +588,14 @@ elim_backward (elim_graph g, int T)\n {\n   int P;\n   source_location locus;\n-  tree block;\n \n   SET_BIT (g->visited, T);\n-  FOR_EACH_ELIM_GRAPH_PRED (g, T, P, locus, block,\n+  FOR_EACH_ELIM_GRAPH_PRED (g, T, P, locus,\n     {\n       if (!TEST_BIT (g->visited, P))\n         {\n \t  elim_backward (g, P);\n-\t  insert_partition_copy_on_edge (g->e, P, T, locus, block);\n+\t  insert_partition_copy_on_edge (g->e, P, T, locus);\n \t}\n     });\n }\n@@ -666,32 +624,30 @@ elim_create (elim_graph g, int T)\n {\n   int P, S;\n   source_location locus;\n-  tree block;\n \n   if (elim_unvisited_predecessor (g, T))\n     {\n       tree var = partition_to_var (g->map, T);\n       rtx U = get_temp_reg (var);\n       int unsignedsrcp = TYPE_UNSIGNED (TREE_TYPE (var));\n \n-      insert_part_to_rtx_on_edge (g->e, U, T, UNKNOWN_LOCATION, NULL);\n-      FOR_EACH_ELIM_GRAPH_PRED (g, T, P, locus, block,\n+      insert_part_to_rtx_on_edge (g->e, U, T, UNKNOWN_LOCATION);\n+      FOR_EACH_ELIM_GRAPH_PRED (g, T, P, locus,\n \t{\n \t  if (!TEST_BIT (g->visited, P))\n \t    {\n \t      elim_backward (g, P);\n-\t      insert_rtx_to_part_on_edge (g->e, P, U, unsignedsrcp, locus,\n-\t\t\t\t\t  block);\n+\t      insert_rtx_to_part_on_edge (g->e, P, U, unsignedsrcp, locus);\n \t    }\n \t});\n     }\n   else\n     {\n-      S = elim_graph_remove_succ_edge (g, T, &locus, &block);\n+      S = elim_graph_remove_succ_edge (g, T, &locus);\n       if (S != -1)\n \t{\n \t  SET_BIT (g->visited, T);\n-\t  insert_partition_copy_on_edge (g->e, T, S, locus, block);\n+\t  insert_partition_copy_on_edge (g->e, T, S, locus);\n \t}\n     }\n }\n@@ -706,7 +662,6 @@ eliminate_phi (edge e, elim_graph g)\n \n   gcc_assert (VEC_length (tree, g->const_copies) == 0);\n   gcc_assert (VEC_length (source_location, g->copy_locus) == 0);\n-  gcc_assert (VEC_length (tree, g->copy_block) == 0);\n \n   /* Abnormal edges already have everything coalesced.  */\n   if (e->flags & EDGE_ABNORMAL)\n@@ -744,13 +699,11 @@ eliminate_phi (edge e, elim_graph g)\n       int dest;\n       tree src;\n       source_location locus;\n-      tree block;\n \n       src = VEC_pop (tree, g->const_copies);\n       dest = VEC_pop (int, g->const_dests);\n       locus = VEC_pop (source_location, g->copy_locus);\n-      block = VEC_pop (tree, g->copy_block);\n-      insert_value_copy_on_edge (e, dest, src, locus, block);\n+      insert_value_copy_on_edge (e, dest, src, locus);\n     }\n }\n \n@@ -1135,12 +1088,8 @@ insert_backedge_copies (void)\n \n \t\t  /* copy location if present.  */\n \t\t  if (gimple_phi_arg_has_location (phi, i))\n-\t\t    {\n-\t\t      gimple_set_location (stmt,\n-\t\t\t\t\t   gimple_phi_arg_location (phi, i));\n-\t\t      gimple_set_block (stmt,\n-\t\t\t\t\tgimple_phi_arg_block (phi, i));\n-\t\t    }\n+\t\t    gimple_set_location (stmt,\n+\t\t\t\t\t gimple_phi_arg_location (phi, i));\n \n \t\t  /* Insert the new statement into the block and update\n \t\t     the PHI node.  */"}, {"sha": "86036b426391ddd82ee4f889120ef49a94e4195f", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -998,7 +998,6 @@ create_phi_for_local_result (void **slot, void *data)\n   basic_block store_bb;\n   tree local_res;\n   source_location locus;\n-  tree block;\n \n   /* STORE_BB is the block where the phi\n      should be stored.  It is the destination of the loop exit.\n@@ -1018,12 +1017,11 @@ create_phi_for_local_result (void **slot, void *data)\n     = make_ssa_name (SSA_NAME_VAR (gimple_assign_lhs (reduc->reduc_stmt)),\n \t\t     NULL);\n   locus = gimple_location (reduc->reduc_stmt);\n-  block = gimple_block (reduc->reduc_stmt);\n   new_phi = create_phi_node (local_res, store_bb);\n   SSA_NAME_DEF_STMT (local_res) = new_phi;\n-  add_phi_arg (new_phi, reduc->init, e, locus, block);\n+  add_phi_arg (new_phi, reduc->init, e, locus);\n   add_phi_arg (new_phi, gimple_assign_lhs (reduc->reduc_stmt),\n-\t       FALLTHRU_EDGE (loop->latch), locus, block);\n+\t       FALLTHRU_EDGE (loop->latch), locus);\n   reduc->new_phi = new_phi;\n \n   return 1;\n@@ -1502,7 +1500,7 @@ transform_to_exit_first_loop (struct loop *loop, htab_t reduction_list, tree nit\n       SET_PHI_RESULT (phi, t);\n       nphi = create_phi_node (res, orig_header);\n       SSA_NAME_DEF_STMT (res) = nphi;\n-      add_phi_arg (nphi, t, hpred, UNKNOWN_LOCATION, NULL);\n+      add_phi_arg (nphi, t, hpred, UNKNOWN_LOCATION);\n \n       if (res == control)\n \t{\n@@ -1658,22 +1656,18 @@ create_parallel_loop (struct loop *loop, tree loop_fn, tree data,\n   for (gsi = gsi_start_phis (ex_bb); !gsi_end_p (gsi); gsi_next (&gsi))\n     {\n       source_location locus;\n-      tree block;\n       tree def;\n       phi = gsi_stmt (gsi);\n       stmt = SSA_NAME_DEF_STMT (PHI_ARG_DEF_FROM_EDGE (phi, exit));\n \n       def = PHI_ARG_DEF_FROM_EDGE (stmt, loop_preheader_edge (loop));\n       locus = gimple_phi_arg_location_from_edge (stmt,\n \t\t\t\t\t\t loop_preheader_edge (loop));\n-      block = gimple_phi_arg_block_from_edge (stmt,\n-\t\t\t\t\t      loop_preheader_edge (loop));\n-      add_phi_arg (phi, def, guard, locus, block);\n+      add_phi_arg (phi, def, guard, locus);\n \n       def = PHI_ARG_DEF_FROM_EDGE (stmt, loop_latch_edge (loop));\n       locus = gimple_phi_arg_location_from_edge (stmt, loop_latch_edge (loop));\n-      block = gimple_phi_arg_block_from_edge (stmt, loop_latch_edge (loop));\n-      add_phi_arg (phi, def, end, locus, block);\n+      add_phi_arg (phi, def, end, locus);\n     }\n   e = redirect_edge_and_branch (exit, nexit->dest);\n   PENDING_STMT (e) = NULL;"}, {"sha": "6408a52529806c8f9bb7b1d8ca58f09602e34ed5", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -205,7 +205,6 @@ make_phi_node (tree var, int len)\n       use_operand_p  imm;\n \n       gimple_phi_arg_set_location (phi, i, UNKNOWN_LOCATION);\n-      gimple_phi_arg_set_block (phi, i ,NULL);\n       imm = gimple_phi_arg_imm_use_ptr (phi, i);\n       imm->use = gimple_phi_arg_def_ptr (phi, i);\n       imm->prev = NULL;\n@@ -276,7 +275,6 @@ resize_phi_node (gimple phi, size_t len)\n       use_operand_p imm;\n \n       gimple_phi_arg_set_location (new_phi, i, UNKNOWN_LOCATION);\n-      gimple_phi_arg_set_block (new_phi, i, NULL);\n       imm = gimple_phi_arg_imm_use_ptr (new_phi, i);\n       imm->use = gimple_phi_arg_def_ptr (new_phi, i);\n       imm->prev = NULL;\n@@ -364,7 +362,7 @@ create_phi_node (tree var, basic_block bb)\n    PHI points to the reallocated phi node when we return.  */\n \n void\n-add_phi_arg (gimple phi, tree def, edge e, source_location locus, tree block)\n+add_phi_arg (gimple phi, tree def, edge e, source_location locus)\n {\n   basic_block bb = e->dest;\n \n@@ -388,7 +386,6 @@ add_phi_arg (gimple phi, tree def, edge e, source_location locus, tree block)\n \n   SET_PHI_ARG_DEF (phi, e->dest_idx, def);\n   gimple_phi_arg_set_location (phi, e->dest_idx, locus);\n-  gimple_phi_arg_set_block (phi, e->dest_idx, block);\n }\n \n \n@@ -420,8 +417,6 @@ remove_phi_arg_num (gimple phi, int i)\n       /* Move the location as well.  */\n       gimple_phi_arg_set_location (phi, i,\n \t\t\t\t   gimple_phi_arg_location (phi, num_elem - 1));\n-      gimple_phi_arg_set_block (phi, i,\n-\t\t\t\tgimple_phi_arg_block (phi, num_elem - 1));\n     }\n \n   /* Shrink the vector and return.  Note that we do not have to clear"}, {"sha": "310fe3bd1d7c6d9e33e8675084ea8cb104d23ec5", "filename": "gcc/tree-predcom.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-predcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-predcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-predcom.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -1531,8 +1531,8 @@ initialize_root_vars (struct loop *loop, chain_p chain, bitmap tmp_vars)\n \n       phi = create_phi_node (var, loop->header);\n       SSA_NAME_DEF_STMT (var) = phi;\n-      add_phi_arg (phi, init, entry, UNKNOWN_LOCATION, NULL);\n-      add_phi_arg (phi, next, latch, UNKNOWN_LOCATION, NULL);\n+      add_phi_arg (phi, init, entry, UNKNOWN_LOCATION);\n+      add_phi_arg (phi, next, latch, UNKNOWN_LOCATION);\n     }\n }\n \n@@ -1595,8 +1595,8 @@ initialize_root_vars_lm (struct loop *loop, dref root, bool written,\n       next = VEC_index (tree, *vars, 1);\n       phi = create_phi_node (var, loop->header);\n       SSA_NAME_DEF_STMT (var) = phi;\n-      add_phi_arg (phi, init, entry, UNKNOWN_LOCATION, NULL);\n-      add_phi_arg (phi, next, latch, UNKNOWN_LOCATION, NULL);\n+      add_phi_arg (phi, init, entry, UNKNOWN_LOCATION);\n+      add_phi_arg (phi, next, latch, UNKNOWN_LOCATION);\n     }\n   else\n     {"}, {"sha": "8763cfb28d2b8ded3aff1c65c06a1ab36c68ac92", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -1129,7 +1129,6 @@ forward_edge_to_pdom (edge e, basic_block post_dom_bb)\n \t  gimple phi = gsi_stmt (gsi);\n \t  tree op;\n \t  source_location locus;\n-\t  tree block;\n \n \t  /* PHIs for virtuals have no control dependency relation on them.\n \t     We are lost here and must force renaming of the symbol.  */\n@@ -1149,8 +1148,7 @@ forward_edge_to_pdom (edge e, basic_block post_dom_bb)\n \n \t  op = gimple_phi_arg_def (phi, e2->dest_idx);\n \t  locus = gimple_phi_arg_location (phi, e2->dest_idx);\n-\t  block = gimple_phi_arg_block (phi, e2->dest_idx);\n-\t  add_phi_arg (phi, op, e, locus, block);\n+\t  add_phi_arg (phi, op, e, locus);\n \t  /* The resulting PHI if not dead can only be degenerate.  */\n \t  gcc_assert (degenerate_phi_p (phi));\n \t  gsi_next (&gsi);"}, {"sha": "8f504f005fe39dfbde1817db95728e889561431c", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -765,10 +765,6 @@ remove_unused_locals (void)\n           FOR_EACH_PHI_ARG (arg_p, phi, i, SSA_OP_ALL_USES)\n             {\n \t      tree arg = USE_FROM_PTR (arg_p);\n-\t      int index = PHI_ARG_INDEX_FROM_USE (arg_p);\n-\t      tree block = gimple_phi_arg_block (phi, index);\n-\t      if (block != NULL)\n-\t\tTREE_USED (block) = true;\n \t      mark_all_vars_used (&arg, global_unused_vars);\n             }\n         }"}, {"sha": "290cb7400a16a05ea44352512c5e1c3155341dcd", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -2086,7 +2086,7 @@ execute_sm_if_changed (edge ex, tree mem, tree tmp_var, tree flag)\n \t  if (gimple_phi_arg_edge (phi, i)->src == new_bb)\n \t    {\n \t      tree arg = gimple_phi_arg_def (phi, i);\n-\t      add_phi_arg (phi, arg, then_old_edge, UNKNOWN_LOCATION, NULL);\n+\t      add_phi_arg (phi, arg, then_old_edge, UNKNOWN_LOCATION);\n \t      update_stmt (phi);\n \t    }\n       }"}, {"sha": "e2e76058251a13ccbada9c59e3fa6b0142df0922", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -121,9 +121,8 @@ create_iv (tree base, tree step, tree var, struct loop *loop,\n \n   stmt = create_phi_node (vb, loop->header);\n   SSA_NAME_DEF_STMT (vb) = stmt;\n-  add_phi_arg (stmt, initial, loop_preheader_edge (loop), UNKNOWN_LOCATION,\n-\t       NULL);\n-  add_phi_arg (stmt, va, loop_latch_edge (loop), UNKNOWN_LOCATION, NULL);\n+  add_phi_arg (stmt, initial, loop_preheader_edge (loop), UNKNOWN_LOCATION);\n+  add_phi_arg (stmt, va, loop_latch_edge (loop), UNKNOWN_LOCATION);\n }\n \n /* Add exit phis for the USE on EXIT.  */\n@@ -153,7 +152,7 @@ add_exit_phis_edge (basic_block exit, tree use)\n   create_new_def_for (gimple_phi_result (phi), phi,\n \t\t      gimple_phi_result_ptr (phi));\n   FOR_EACH_EDGE (e, ei, exit->preds)\n-    add_phi_arg (phi, use, e, UNKNOWN_LOCATION, NULL);\n+    add_phi_arg (phi, use, e, UNKNOWN_LOCATION);\n }\n \n /* Add exit phis for VAR that is used in LIVEIN.\n@@ -486,14 +485,12 @@ split_loop_exit_edge (edge exit)\n   use_operand_p op_p;\n   gimple_stmt_iterator psi;\n   source_location locus;\n-  tree block;\n \n   for (psi = gsi_start_phis (dest); !gsi_end_p (psi); gsi_next (&psi))\n     {\n       phi = gsi_stmt (psi);\n       op_p = PHI_ARG_DEF_PTR_FROM_EDGE (phi, single_succ_edge (bb));\n       locus = gimple_phi_arg_location_from_edge (phi, single_succ_edge (bb));\n-      block = gimple_phi_arg_block_from_edge (phi, single_succ_edge (bb));\n \n       name = USE_FROM_PTR (op_p);\n \n@@ -507,7 +504,7 @@ split_loop_exit_edge (edge exit)\n       new_name = duplicate_ssa_name (name, NULL);\n       new_phi = create_phi_node (new_name, bb);\n       SSA_NAME_DEF_STMT (new_name) = new_phi;\n-      add_phi_arg (new_phi, name, exit, locus, block);\n+      add_phi_arg (new_phi, name, exit, locus);\n       SET_USE (op_p, new_name);\n     }\n \n@@ -1027,8 +1024,8 @@ tree_transform_and_unroll_loop (struct loop *loop, unsigned factor,\n       phi_rest = create_phi_node (new_init, rest);\n       SSA_NAME_DEF_STMT (new_init) = phi_rest;\n \n-      add_phi_arg (phi_rest, init, precond_edge, UNKNOWN_LOCATION, NULL);\n-      add_phi_arg (phi_rest, next, new_exit, UNKNOWN_LOCATION, NULL);\n+      add_phi_arg (phi_rest, init, precond_edge, UNKNOWN_LOCATION);\n+      add_phi_arg (phi_rest, next, new_exit, UNKNOWN_LOCATION);\n       SET_USE (op, new_init);\n     }\n "}, {"sha": "46d8a2c4e603bad441d96faebceedb539ba068b4", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -1454,15 +1454,13 @@ cond_store_replacement (basic_block middle_bb, basic_block join_bb,\n   gimple newphi, new_stmt;\n   gimple_stmt_iterator gsi;\n   source_location locus;\n-  tree block;\n \n   /* Check if middle_bb contains of only one store.  */\n   if (!assign\n       || !gimple_assign_single_p (assign))\n     return false;\n \n   locus = gimple_location (assign);\n-  block = gimple_block (assign);\n   lhs = gimple_assign_lhs (assign);\n   rhs = gimple_assign_rhs1 (assign);\n   if (TREE_CODE (lhs) != MEM_REF\n@@ -1496,15 +1494,14 @@ cond_store_replacement (basic_block middle_bb, basic_block join_bb,\n   name = make_ssa_name (condstoretemp, new_stmt);\n   gimple_assign_set_lhs (new_stmt, name);\n   gimple_set_location (new_stmt, locus);\n-  gimple_set_block (new_stmt, block);\n   gsi_insert_on_edge (e1, new_stmt);\n \n   /* 4) Create a PHI node at the join block, with one argument\n         holding the old RHS, and the other holding the temporary\n         where we stored the old memory contents.  */\n   newphi = create_phi_node (condstoretemp, join_bb);\n-  add_phi_arg (newphi, rhs, e0, locus, block);\n-  add_phi_arg (newphi, name, e1, locus, block);\n+  add_phi_arg (newphi, rhs, e0, locus);\n+  add_phi_arg (newphi, name, e1, locus);\n \n   lhs = unshare_expr (lhs);\n   new_stmt = gimple_build_assign (lhs, PHI_RESULT (newphi));\n@@ -1531,7 +1528,6 @@ cond_if_else_store_replacement_1 (basic_block then_bb, basic_block else_bb,\n {\n   tree lhs_base, lhs, then_rhs, else_rhs;\n   source_location then_locus, else_locus;\n-  tree then_block, else_block;\n   gimple_stmt_iterator gsi;\n   gimple newphi, new_stmt;\n \n@@ -1557,8 +1553,6 @@ cond_if_else_store_replacement_1 (basic_block then_bb, basic_block else_bb,\n   else_rhs = gimple_assign_rhs1 (else_assign);\n   then_locus = gimple_location (then_assign);\n   else_locus = gimple_location (else_assign);\n-  then_block = gimple_block (then_assign);\n-  else_block = gimple_block (else_assign);\n \n   /* Now we've checked the constraints, so do the transformation:\n      1) Remove the stores.  */\n@@ -1582,10 +1576,8 @@ cond_if_else_store_replacement_1 (basic_block then_bb, basic_block else_bb,\n \tholding the old RHS, and the other holding the temporary\n \twhere we stored the old memory contents.  */\n   newphi = create_phi_node (condstoretemp, join_bb);\n-  add_phi_arg (newphi, then_rhs, EDGE_SUCC (then_bb, 0), then_locus,\n-\t       then_block);\n-  add_phi_arg (newphi, else_rhs, EDGE_SUCC (else_bb, 0), else_locus,\n-\t       else_block);\n+  add_phi_arg (newphi, then_rhs, EDGE_SUCC (then_bb, 0), then_locus);\n+  add_phi_arg (newphi, else_rhs, EDGE_SUCC (else_bb, 0), else_locus);\n \n   new_stmt = gimple_build_assign (lhs, PHI_RESULT (newphi));\n "}, {"sha": "306443725644e43a6aa741202c302b788ed11b77", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -159,19 +159,16 @@ phiprop_insert_phi (basic_block bb, gimple phi, gimple use_stmt,\n       tree old_arg, new_var;\n       gimple tmp;\n       source_location locus;\n-      tree block;\n \n       old_arg = PHI_ARG_DEF_FROM_EDGE (phi, e);\n       locus = gimple_phi_arg_location_from_edge (phi, e);\n-      block = gimple_phi_arg_block_from_edge (phi, e);\n       while (TREE_CODE (old_arg) == SSA_NAME\n \t     && (SSA_NAME_VERSION (old_arg) >= n\n \t         || phivn[SSA_NAME_VERSION (old_arg)].value == NULL_TREE))\n \t{\n \t  gimple def_stmt = SSA_NAME_DEF_STMT (old_arg);\n \t  old_arg = gimple_assign_rhs1 (def_stmt);\n \t  locus = gimple_location (def_stmt);\n-\t  block = gimple_block (def_stmt);\n \t}\n \n       if (TREE_CODE (old_arg) == SSA_NAME)\n@@ -206,7 +203,6 @@ phiprop_insert_phi (basic_block bb, gimple phi, gimple use_stmt,\n \t  new_var = make_ssa_name (new_var, tmp);\n \t  gimple_assign_set_lhs (tmp, new_var);\n \t  gimple_set_location (tmp, locus);\n-\t  gimple_set_block (tmp, block);\n \n \t  gsi_insert_on_edge (e, tmp);\n \t  update_stmt (tmp);\n@@ -220,7 +216,7 @@ phiprop_insert_phi (basic_block bb, gimple phi, gimple use_stmt,\n \t    }\n \t}\n \n-      add_phi_arg (new_phi, new_var, e, locus, block);\n+      add_phi_arg (new_phi, new_var, e, locus);\n     }\n \n   update_stmt (new_phi);"}, {"sha": "9adf55d18cf24bc23ee03f1d159deb81c8885f10", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -3403,10 +3403,10 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n       gcc_assert (get_expr_type (ae) == type\n \t\t  || useless_type_conversion_p (type, get_expr_type (ae)));\n       if (ae->kind == CONSTANT)\n-\tadd_phi_arg (phi, PRE_EXPR_CONSTANT (ae), pred, UNKNOWN_LOCATION, NULL);\n+\tadd_phi_arg (phi, PRE_EXPR_CONSTANT (ae), pred, UNKNOWN_LOCATION);\n       else\n \tadd_phi_arg (phi, PRE_EXPR_NAME (avail[pred->src->index]), pred,\n-\t\t     UNKNOWN_LOCATION, NULL);\n+\t\t     UNKNOWN_LOCATION);\n     }\n \n   newphi = get_or_alloc_expr_for_name (gimple_phi_result (phi));"}, {"sha": "9ec3b8a5091b1a6a67deef5157ee84be4d0bc4a5", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -1466,7 +1466,7 @@ replace_block_by (basic_block bb1, basic_block bb2)\n       bb2_phi = vop_phi (bb2);\n \n       add_phi_arg (bb2_phi, SSA_NAME_VAR (gimple_phi_result (bb2_phi)),\n-\t\t   pred_edge, UNKNOWN_LOCATION, NULL);\n+\t\t   pred_edge, UNKNOWN_LOCATION);\n     }\n \n   bb2->frequency += bb1->frequency;"}, {"sha": "65be1b926a63d004f637d32a7a8d33991baef434", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -316,9 +316,7 @@ copy_phi_args (basic_block bb, edge src_e, edge tgt_e)\n     {\n       gimple phi = gsi_stmt (gsi);\n       source_location locus = gimple_phi_arg_location (phi, src_indx);\n-      tree block = gimple_phi_arg_block (phi, src_indx);\n-      add_phi_arg (phi, gimple_phi_arg_def (phi, src_indx), tgt_e, locus,\n-\t\t   block);\n+      add_phi_arg (phi, gimple_phi_arg_def (phi, src_indx), tgt_e, locus);\n     }\n }\n "}, {"sha": "d545ffd21d29af126a1800f059b40d26e6f8704f", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -51,8 +51,7 @@ static struct pointer_map_t *edge_var_maps;\n /* Add a mapping with PHI RESULT and PHI DEF associated with edge E.  */\n \n void\n-redirect_edge_var_map_add (edge e, tree result, tree def, source_location locus,\n-\t\t\t   tree block)\n+redirect_edge_var_map_add (edge e, tree result, tree def, source_location locus)\n {\n   void **slot;\n   edge_var_map_vector old_head, head;\n@@ -71,7 +70,6 @@ redirect_edge_var_map_add (edge e, tree result, tree def, source_location locus,\n   new_node.def = def;\n   new_node.result = result;\n   new_node.locus = locus;\n-  new_node.block = block;\n \n   VEC_safe_push (edge_var_map, heap, head, &new_node);\n   if (old_head != head)\n@@ -195,17 +193,15 @@ ssa_redirect_edge (edge e, basic_block dest)\n     {\n       tree def;\n       source_location locus ;\n-      tree block;\n \n       phi = gsi_stmt (gsi);\n       def = gimple_phi_arg_def (phi, e->dest_idx);\n       locus = gimple_phi_arg_location (phi, e->dest_idx);\n-      block = gimple_phi_arg_block (phi, e->dest_idx);\n \n       if (def == NULL_TREE)\n \tcontinue;\n \n-      redirect_edge_var_map_add (e, gimple_phi_result (phi), def, locus, block);\n+      redirect_edge_var_map_add (e, gimple_phi_result (phi), def, locus);\n     }\n \n   e = redirect_edge_succ_nodup (e, dest);\n@@ -238,8 +234,7 @@ flush_pending_stmts (edge e)\n \n       phi = gsi_stmt (gsi);\n       def = redirect_edge_var_map_def (vm);\n-      add_phi_arg (phi, def, e, redirect_edge_var_map_location (vm),\n-\t\t   redirect_edge_var_map_block (vm));\n+      add_phi_arg (phi, def, e, redirect_edge_var_map_location (vm));\n     }\n \n   redirect_edge_var_map_clear (e);"}, {"sha": "80457989a476f897ebcea486854243dd07bbfa9d", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -1188,10 +1188,8 @@ fix_phi_nodes (edge e1f, edge e2f, basic_block bbf,\n        !gsi_end_p (gsi); gsi_next (&gsi), i++)\n     {\n       gimple phi = gsi_stmt (gsi);\n-      add_phi_arg (phi, info->target_inbound_names[i], e1f, UNKNOWN_LOCATION,\n-\t\t   NULL);\n-      add_phi_arg (phi, info->target_outbound_names[i], e2f, UNKNOWN_LOCATION,\n-\t\t   NULL);\n+      add_phi_arg (phi, info->target_inbound_names[i], e1f, UNKNOWN_LOCATION);\n+      add_phi_arg (phi, info->target_outbound_names[i], e2f, UNKNOWN_LOCATION);\n     }\n }\n "}, {"sha": "02e1113f4832a0bd4991e81698be6755047c59e4", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -597,7 +597,7 @@ add_successor_phi_arg (edge e, tree var, tree phi_arg)\n       break;\n \n   gcc_assert (!gsi_end_p (gsi));\n-  add_phi_arg (gsi_stmt (gsi), phi_arg, e, UNKNOWN_LOCATION, NULL);\n+  add_phi_arg (gsi_stmt (gsi), phi_arg, e, UNKNOWN_LOCATION);\n }\n \n /* Creates a GIMPLE statement which computes the operation specified by\n@@ -853,7 +853,7 @@ eliminate_tail_call (struct tailcall *t)\n       phi = gsi_stmt (gsi);\n       gcc_assert (param == SSA_NAME_VAR (PHI_RESULT (phi)));\n \n-      add_phi_arg (phi, arg, e, gimple_location (stmt), gimple_block (stmt));\n+      add_phi_arg (phi, arg, e, gimple_location (stmt));\n       gsi_next (&gsi);\n     }\n \n@@ -948,7 +948,7 @@ create_tailcall_accumulator (const char *label, basic_block bb, tree init)\n   phi = create_phi_node (tmp, bb);\n   /* RET_TYPE can be a float when -ffast-maths is enabled.  */\n   add_phi_arg (phi, fold_convert (ret_type, init), single_pred_edge (bb),\n-\t       UNKNOWN_LOCATION, NULL);\n+\t       UNKNOWN_LOCATION);\n   return PHI_RESULT (phi);\n }\n \n@@ -1012,7 +1012,7 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t\tphi = create_phi_node (name, first);\n \t\tSSA_NAME_DEF_STMT (name) = phi;\n \t\tadd_phi_arg (phi, new_name, single_pred_edge (first),\n-\t\t\t     EXPR_LOCATION (param), NULL);\n+\t\t\t     EXPR_LOCATION (param));\n \t      }\n \t  phis_constructed = true;\n \t}"}, {"sha": "bfc983b878defcd48cbb63ff9b64d709d65613fe", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -4433,7 +4433,7 @@ vect_setup_realignment (gimple stmt, gimple_stmt_iterator *gsi,\n   msq = make_ssa_name (vec_dest, NULL);\n   phi_stmt = create_phi_node (msq, containing_loop->header);\n   SSA_NAME_DEF_STMT (msq) = phi_stmt;\n-  add_phi_arg (phi_stmt, msq_init, pe, UNKNOWN_LOCATION, NULL);\n+  add_phi_arg (phi_stmt, msq_init, pe, UNKNOWN_LOCATION);\n \n   return msq;\n }"}, {"sha": "9ac0d9a04ebd50cb92a834de55c040652d275e36", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -294,15 +294,13 @@ slpeel_update_phis_for_duplicate_loop (struct loop *orig_loop,\n        gsi_next (&gsi_new), gsi_next (&gsi_orig))\n     {\n       source_location locus;\n-      tree block;\n       phi_new = gsi_stmt (gsi_new);\n       phi_orig = gsi_stmt (gsi_orig);\n \n       /* step 1.  */\n       def = PHI_ARG_DEF_FROM_EDGE (phi_orig, entry_arg_e);\n       locus = gimple_phi_arg_location_from_edge (phi_orig, entry_arg_e);\n-      block = gimple_phi_arg_block_from_edge (phi_orig, entry_arg_e);\n-      add_phi_arg (phi_new, def, new_loop_entry_e, locus, block);\n+      add_phi_arg (phi_new, def, new_loop_entry_e, locus);\n \n       /* step 2.  */\n       def = PHI_ARG_DEF_FROM_EDGE (phi_orig, orig_loop_latch);\n@@ -319,8 +317,7 @@ slpeel_update_phis_for_duplicate_loop (struct loop *orig_loop,\n \t}\n \n       /* An ordinary ssa name defined in the loop.  */\n-      add_phi_arg (phi_new, new_ssa_name, loop_latch_edge (new_loop), locus,\n-\t\t   block);\n+      add_phi_arg (phi_new, new_ssa_name, loop_latch_edge (new_loop), locus);\n \n       /* Drop any debug references outside the loop, if they would\n \t become ill-formed SSA.  */\n@@ -515,7 +512,6 @@ slpeel_update_phi_nodes_for_guard1 (edge guard_edge, struct loop *loop,\n        gsi_next (&gsi_orig), gsi_next (&gsi_update))\n     {\n       source_location loop_locus, guard_locus;\n-      tree loop_block, guard_block;\n       orig_phi = gsi_stmt (gsi_orig);\n       update_phi = gsi_stmt (gsi_update);\n \n@@ -531,19 +527,13 @@ slpeel_update_phi_nodes_for_guard1 (edge guard_edge, struct loop *loop,\n       loop_locus = gimple_phi_arg_location_from_edge (orig_phi,\n \t\t\t\t\t\t      EDGE_SUCC (loop->latch,\n \t\t\t\t\t\t\t\t 0));\n-      loop_block = gimple_phi_arg_block_from_edge (orig_phi,\n-\t\t\t\t\t\t   EDGE_SUCC (loop->latch,\n-\t\t\t\t\t\t\t      0));\n-\n       guard_arg = PHI_ARG_DEF_FROM_EDGE (orig_phi, loop_preheader_edge (loop));\n       guard_locus\n \t= gimple_phi_arg_location_from_edge (orig_phi,\n \t\t\t\t\t     loop_preheader_edge (loop));\n-      guard_block = gimple_phi_arg_block_from_edge (orig_phi,\n-\t\t\t\t\t\t    loop_preheader_edge (loop));\n \n-      add_phi_arg (new_phi, loop_arg, new_exit_e, loop_locus, loop_block);\n-      add_phi_arg (new_phi, guard_arg, guard_edge, guard_locus, guard_block);\n+      add_phi_arg (new_phi, loop_arg, new_exit_e, loop_locus);\n+      add_phi_arg (new_phi, guard_arg, guard_edge, guard_locus);\n \n       /* 1.3. Update phi in successor block.  */\n       gcc_assert (PHI_ARG_DEF_FROM_EDGE (update_phi, e) == loop_arg\n@@ -562,7 +552,7 @@ slpeel_update_phi_nodes_for_guard1 (edge guard_edge, struct loop *loop,\n                                  *new_exit_bb);\n \n       /* 2.2. NEW_EXIT_BB has one incoming edge: the exit-edge of the loop.  */\n-      add_phi_arg (new_phi, loop_arg, single_exit (loop), loop_locus, loop_block);\n+      add_phi_arg (new_phi, loop_arg, single_exit (loop), loop_locus);\n \n       /* 2.3. Update phi in successor of NEW_EXIT_BB:  */\n       gcc_assert (PHI_ARG_DEF_FROM_EDGE (update_phi2, new_exit_e) == loop_arg);\n@@ -690,8 +680,8 @@ slpeel_update_phi_nodes_for_guard2 (edge guard_edge, struct loop *loop,\n       if (new_name2)\n         guard_arg = new_name2;\n \n-      add_phi_arg (new_phi, loop_arg, new_exit_e, UNKNOWN_LOCATION, NULL);\n-      add_phi_arg (new_phi, guard_arg, guard_edge, UNKNOWN_LOCATION, NULL);\n+      add_phi_arg (new_phi, loop_arg, new_exit_e, UNKNOWN_LOCATION);\n+      add_phi_arg (new_phi, guard_arg, guard_edge, UNKNOWN_LOCATION);\n \n       /* 1.3. Update phi in successor block.  */\n       gcc_assert (PHI_ARG_DEF_FROM_EDGE (update_phi, e) == orig_def);\n@@ -706,8 +696,7 @@ slpeel_update_phi_nodes_for_guard2 (edge guard_edge, struct loop *loop,\n                                  *new_exit_bb);\n \n       /* 2.2. NEW_EXIT_BB has one incoming edge: the exit-edge of the loop.  */\n-      add_phi_arg (new_phi, loop_arg, single_exit (loop), UNKNOWN_LOCATION,\n-\t\t   NULL);\n+      add_phi_arg (new_phi, loop_arg, single_exit (loop), UNKNOWN_LOCATION);\n \n       /* 2.3. Update phi in successor of NEW_EXIT_BB:  */\n       gcc_assert (PHI_ARG_DEF_FROM_EDGE (update_phi2, new_exit_e) == loop_arg);\n@@ -744,7 +733,7 @@ slpeel_update_phi_nodes_for_guard2 (edge guard_edge, struct loop *loop,\n       /* 3.3. GUARD_BB has one incoming edge:  */\n       gcc_assert (EDGE_COUNT (guard_edge->src->preds) == 1);\n       add_phi_arg (new_phi, arg, EDGE_PRED (guard_edge->src, 0),\n-\t\t   UNKNOWN_LOCATION, NULL);\n+\t\t   UNKNOWN_LOCATION);\n \n       /* 3.4. Update phi in successor of GUARD_BB:  */\n       gcc_assert (PHI_ARG_DEF_FROM_EDGE (update_phi2, guard_edge)\n@@ -870,16 +859,14 @@ slpeel_tree_duplicate_loop_to_edge_cfg (struct loop *loop, edge e)\n \t{\n \t  edge new_loop_exit_edge;\n \t  source_location locus;\n-\t  tree block;\n \n \t  locus = gimple_phi_arg_location_from_edge (phi, single_exit (loop));\n-\t  block = gimple_phi_arg_block_from_edge (phi, single_exit (loop));\n \t  if (EDGE_SUCC (new_loop->header, 0)->dest == new_loop->latch)\n \t    new_loop_exit_edge = EDGE_SUCC (new_loop->header, 1);\n \t  else\n \t    new_loop_exit_edge = EDGE_SUCC (new_loop->header, 0);\n \n-\t  add_phi_arg (phi, phi_arg, new_loop_exit_edge, locus, block);\n+\t  add_phi_arg (phi, phi_arg, new_loop_exit_edge, locus);\n \t}\n     }\n \n@@ -918,8 +905,7 @@ slpeel_tree_duplicate_loop_to_edge_cfg (struct loop *loop, edge e)\n \t  phi_arg = PHI_ARG_DEF_FROM_EDGE (phi, entry_e);\n \t  if (phi_arg)\n \t    add_phi_arg (phi, phi_arg, new_exit_e,\n-\t\t\t gimple_phi_arg_location_from_edge (phi, entry_e),\n-\t\t\t gimple_phi_arg_block_from_edge (phi, entry_e));\n+\t\t\t gimple_phi_arg_location_from_edge (phi, entry_e));\n \t}\n \n       redirect_edge_and_branch_force (entry_e, new_loop->header);\n@@ -1103,8 +1089,8 @@ set_prologue_iterations (basic_block bb_before_first_loop,\n \n   newphi = create_phi_node (var, bb_before_first_loop);\n   add_phi_arg (newphi, prologue_after_cost_adjust_name, e_fallthru,\n-\t       UNKNOWN_LOCATION, NULL);\n-  add_phi_arg (newphi, *first_niters, e_false, UNKNOWN_LOCATION, NULL);\n+\t       UNKNOWN_LOCATION);\n+  add_phi_arg (newphi, *first_niters, e_false, UNKNOWN_LOCATION);\n \n   *first_niters = PHI_RESULT (newphi);\n }\n@@ -1207,7 +1193,7 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop,\n \t\t\t\t\t  new_phi);\n \t    use_operand_p use_p;\n \n-\t    add_phi_arg (new_phi, vop, exit_e, UNKNOWN_LOCATION, NULL);\n+\t    add_phi_arg (new_phi, vop, exit_e, UNKNOWN_LOCATION);\n \t    gimple_phi_set_result (new_phi, new_vop);\n \t    FOR_EACH_IMM_USE_STMT (stmt, imm_iter, vop)\n \t      if (stmt != new_phi && gimple_bb (stmt) != loop->header)\n@@ -2565,8 +2551,7 @@ vect_loop_versioning (loop_vec_info loop_vinfo,\n \t\t\t\t  new_exit_bb);\n       arg = PHI_ARG_DEF_FROM_EDGE (orig_phi, e);\n       add_phi_arg (new_phi, arg, new_exit_e,\n-\t\t   gimple_phi_arg_location_from_edge (orig_phi, e),\n- \t\t   gimple_phi_arg_block_from_edge (orig_phi, e));\n+\t\t   gimple_phi_arg_location_from_edge (orig_phi, e));\n       adjust_phi_and_debug_stmts (orig_phi, e, PHI_RESULT (new_phi));\n     }\n "}, {"sha": "166b69d70e4604f7e3727cb7f45725b02be5023e", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -3123,9 +3123,9 @@ get_initial_def_for_induction (gimple iv_phi)\n                                                    NULL));\n \n   /* Set the arguments of the phi node:  */\n-  add_phi_arg (induction_phi, vec_init, pe, UNKNOWN_LOCATION, NULL);\n+  add_phi_arg (induction_phi, vec_init, pe, UNKNOWN_LOCATION);\n   add_phi_arg (induction_phi, vec_def, loop_latch_edge (iv_loop),\n-\t       UNKNOWN_LOCATION, NULL);\n+\t       UNKNOWN_LOCATION);\n \n \n   /* In case that vectorization factor (VF) is bigger than the number\n@@ -3609,13 +3609,13 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n         {\n           /* Set the loop-entry arg of the reduction-phi.  */\n           add_phi_arg (phi, vec_init_def, loop_preheader_edge (loop),\n-                       UNKNOWN_LOCATION, NULL);\n+                       UNKNOWN_LOCATION);\n \n           /* Set the loop-latch arg for the reduction-phi.  */\n           if (j > 0)\n             def = vect_get_vec_def_for_stmt_copy (vect_unknown_def_type, def);\n \n-          add_phi_arg (phi, def, loop_latch_edge (loop), UNKNOWN_LOCATION, NULL);\n+          add_phi_arg (phi, def, loop_latch_edge (loop), UNKNOWN_LOCATION);\n \n           if (vect_print_dump_info (REPORT_DETAILS))\n             {\n@@ -4233,10 +4233,9 @@ vect_create_epilog_for_reduction (VEC (tree, heap) *vect_defs, gimple stmt,\n                   /* Update phi node arguments with vs0 and vs2.  */\n                   add_phi_arg (vect_phi, vect_phi_init,\n                                loop_preheader_edge (outer_loop),\n-                               UNKNOWN_LOCATION, NULL);\n+                               UNKNOWN_LOCATION);\n                   add_phi_arg (vect_phi, PHI_RESULT (inner_phi),\n-                               loop_latch_edge (outer_loop), UNKNOWN_LOCATION,\n-\t\t\t       NULL);\n+                               loop_latch_edge (outer_loop), UNKNOWN_LOCATION);\n                   if (vect_print_dump_info (REPORT_DETAILS))\n                     {\n                       fprintf (vect_dump, \"created double reduction phi \""}, {"sha": "671b229ef9a2b93b48d1fc7d8953024e3a103d32", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -5060,7 +5060,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t      if (i == vec_num - 1 && j == ncopies - 1)\n \t\t\tadd_phi_arg (phi, lsq,\n \t\t\t\t     loop_latch_edge (containing_loop),\n-\t\t\t\t     UNKNOWN_LOCATION, NULL);\n+\t\t\t\t     UNKNOWN_LOCATION);\n \t\t      msq = lsq;\n \t\t    }\n \t\t}"}, {"sha": "f5ffb1cd2a02f078ec8bd3164e95a4295e86fa2b", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -2035,7 +2035,6 @@ struct GTY(()) phi_arg_d {\n      pointer arithmetic with it.  See phi_arg_index_from_use.  */\n   struct ssa_use_operand_d imm_use;\n   tree def;\n-  tree block;\n   location_t locus;\n };\n "}, {"sha": "69051c6a7884d1d4e0088b9a40910e2bb073ce90", "filename": "gcc/value-prof.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e227d605e3adef6f379ab76424e197cc06ec275/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=9e227d605e3adef6f379ab76424e197cc06ec275", "patch": "@@ -1245,12 +1245,10 @@ gimple_ic (gimple icall_stmt, struct cgraph_node *direct_call,\n       SSA_NAME_DEF_STMT (result) = phi;\n       gimple_call_set_lhs (icall_stmt,\n \t\t\t   make_ssa_name (SSA_NAME_VAR (result), icall_stmt));\n-      add_phi_arg (phi, gimple_call_lhs (icall_stmt), e_ij, UNKNOWN_LOCATION,\n-\t\t   NULL);\n+      add_phi_arg (phi, gimple_call_lhs (icall_stmt), e_ij, UNKNOWN_LOCATION);\n       gimple_call_set_lhs (dcall_stmt,\n \t\t\t   make_ssa_name (SSA_NAME_VAR (result), dcall_stmt));\n-      add_phi_arg (phi, gimple_call_lhs (dcall_stmt), e_dj, UNKNOWN_LOCATION,\n-\t\t   NULL);\n+      add_phi_arg (phi, gimple_call_lhs (dcall_stmt), e_dj, UNKNOWN_LOCATION);\n     }\n \n   /* Build an EH edge for the direct call if necessary.  */\n@@ -1478,12 +1476,10 @@ gimple_stringop_fixed_value (gimple vcall_stmt, tree icall_size, int prob,\n       SSA_NAME_DEF_STMT (result) = phi;\n       gimple_call_set_lhs (vcall_stmt,\n \t\t\t   make_ssa_name (SSA_NAME_VAR (result), vcall_stmt));\n-      add_phi_arg (phi, gimple_call_lhs (vcall_stmt), e_vj, UNKNOWN_LOCATION,\n-\t\t   NULL);\n+      add_phi_arg (phi, gimple_call_lhs (vcall_stmt), e_vj, UNKNOWN_LOCATION);\n       gimple_call_set_lhs (icall_stmt,\n \t\t\t   make_ssa_name (SSA_NAME_VAR (result), icall_stmt));\n-      add_phi_arg (phi, gimple_call_lhs (icall_stmt), e_ij, UNKNOWN_LOCATION,\n-\t\t   NULL);\n+      add_phi_arg (phi, gimple_call_lhs (icall_stmt), e_ij, UNKNOWN_LOCATION);\n     }\n \n   /* Because these are all string op builtins, they're all nothrow.  */"}]}