{"sha": "274a4d29421e73c9b40c1641986c6ed904e20184", "node_id": "C_kwDOANBUbNoAKDI3NGE0ZDI5NDIxZTczYzliNDBjMTY0MTk4NmM2ZWQ5MDRlMjAxODQ", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2022-02-11T14:52:14Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2022-02-11T15:50:01Z"}, "message": "[PR104400] LRA: Modify exclude start hard register calculation for insn alternative\n\nv850 target has an interesting insn alternative constraint 'e!r' where e\ndenotes even general regs and e is a subset of r.  We cannot just make\nunion of exclude start hard registers for e and r and should use only\nexclude start hard registers of r.  The following patch implements this.\n\ngcc/ChangeLog:\n\n\tPR rtl-optimization/104400\n\t* lra-constraints.cc (process_alt_operands): Don't make union of\n\tthis_alternative_exclude_start_hard_regs when reg class in insn\n\talternative covers other reg classes in the same alternative.\n\ngcc/testsuite/ChangeLog:\n\n\tPR rtl-optimization/104400\n\t* gcc.target/v850/pr104400.c: New.\n\t* gcc.target/v850/v850.exp: New.", "tree": {"sha": "de7f704b51a685ddc4627264e64830f2db060f45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de7f704b51a685ddc4627264e64830f2db060f45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/274a4d29421e73c9b40c1641986c6ed904e20184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/274a4d29421e73c9b40c1641986c6ed904e20184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/274a4d29421e73c9b40c1641986c6ed904e20184", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/274a4d29421e73c9b40c1641986c6ed904e20184/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc68ad87014a331399ccb2528db3bf47fabe6f72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc68ad87014a331399ccb2528db3bf47fabe6f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc68ad87014a331399ccb2528db3bf47fabe6f72"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "fdff9e0720a31a5e405b6faedfae89553e5d4983", "filename": "gcc/lra-constraints.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/274a4d29421e73c9b40c1641986c6ed904e20184/gcc%2Flra-constraints.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/274a4d29421e73c9b40c1641986c6ed904e20184/gcc%2Flra-constraints.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.cc?ref=274a4d29421e73c9b40c1641986c6ed904e20184", "patch": "@@ -2498,9 +2498,15 @@ process_alt_operands (int only_alternative)\n \t\t  if (mode == BLKmode)\n \t\t    break;\n \t\t  this_alternative = reg_class_subunion[this_alternative][cl];\n+\t\t  if (hard_reg_set_subset_p (this_alternative_set,\n+\t\t\t\t\t     reg_class_contents[cl]))\n+\t\t    this_alternative_exclude_start_hard_regs\n+\t\t      = ira_exclude_class_mode_regs[cl][mode];\n+\t\t  else if (!hard_reg_set_subset_p (reg_class_contents[cl],\n+\t\t\t\t\t\t   this_alternative_set))\n+\t\t    this_alternative_exclude_start_hard_regs\n+\t\t      |= ira_exclude_class_mode_regs[cl][mode];\n \t\t  this_alternative_set |= reg_class_contents[cl];\n-\t\t  this_alternative_exclude_start_hard_regs\n-\t\t    |= ira_exclude_class_mode_regs[cl][mode];\n \t\t  if (costly_p)\n \t\t    {\n \t\t      this_costly_alternative"}, {"sha": "5d78a77345c9c81c80a7799b589a37548630dc6b", "filename": "gcc/testsuite/gcc.target/v850/pr104400.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/274a4d29421e73c9b40c1641986c6ed904e20184/gcc%2Ftestsuite%2Fgcc.target%2Fv850%2Fpr104400.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/274a4d29421e73c9b40c1641986c6ed904e20184/gcc%2Ftestsuite%2Fgcc.target%2Fv850%2Fpr104400.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fv850%2Fpr104400.c?ref=274a4d29421e73c9b40c1641986c6ed904e20184", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mv850e3v5\" } */\n+\n+double frob (double r)\n+{\n+    r = -r;\n+    return r;\n+}"}, {"sha": "4e8c745a0b83cd8e8879eeafa1c77262149b02d8", "filename": "gcc/testsuite/gcc.target/v850/v850.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/274a4d29421e73c9b40c1641986c6ed904e20184/gcc%2Ftestsuite%2Fgcc.target%2Fv850%2Fv850.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/274a4d29421e73c9b40c1641986c6ed904e20184/gcc%2Ftestsuite%2Fgcc.target%2Fv850%2Fv850.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fv850%2Fv850.exp?ref=274a4d29421e73c9b40c1641986c6ed904e20184", "patch": "@@ -0,0 +1,41 @@\n+# Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an v850 target.\n+if ![istarget v850*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}]}