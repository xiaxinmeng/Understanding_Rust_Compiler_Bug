{"sha": "2ffe0809cb3e9a49387a4657dea65a287b377617", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZmZTA4MDljYjNlOWE0OTM4N2E0NjU3ZGVhNjVhMjg3YjM3NzYxNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-08-19T21:18:05Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-08-19T21:18:05Z"}, "message": "Reimplement removal fix-it hints in terms of replace\n\nThis patch eliminates class fixit_remove, reimplementing\nrich_location::add_fixit_remove in terms of replacement with the\nempty string.  Deleting the removal subclass simplifies\nfixit-handling code, as we only have two concrete fixit_hint\nsubclasses to deal with, rather than three.\n\nThe patch also fixes some problems in diagnostic-show-locus.c for\nsituations where a replacement fix-it has a different range to the\nrange of the diagnostic, by unifying the drawing of the two kinds of\nfixits.  For example, this:\n\n  foo = bar.field;\n      ^\n            m_field\n\nbecomes:\n\n  foo = bar.field;\n      ^\n            -----\n            m_field\n\nshowing the range to be replaced.\n\ngcc/ChangeLog:\n\t* diagnostic-show-locus.c\n\t(layout::annotation_line_showed_range_p): New method.\n\t(layout::print_any_fixits): Remove case fixit_hint::REMOVE.\n\tReimplement case fixit_hint::REPLACE to cover removals, and\n\treplacements where the range of the replacement isn't one\n\tof the ranges in the rich_location.\n\t(test_one_liner_fixit_replace): Likewise.\n\t(selftest::test_one_liner_fixit_replace_non_equal_range): New\n\tfunction.\n\t(selftest::test_one_liner_fixit_replace_equal_secondary_range):\n\tNew function.\n\t(selftest::test_diagnostic_show_locus_one_liner): Call the new\n\tfunctions.\n\t* diagnostic.c (print_parseable_fixits): Remove case\n\tfixit_hint::REMOVE.\n\nlibcpp/ChangeLog:\n\t* include/line-map.h (fixit_hint::kind): Delete REPLACE.\n\t(class fixit_remove): Delete.\n\t* line-map.c (rich_location::add_fixit_remove): Reimplement\n\tby calling add_fixit_replace with an empty string.\n\t(fixit_remove::fixit_remove): Delete.\n\t(fixit_remove::affects_line_p): Delete.\n\nFrom-SVN: r239632", "tree": {"sha": "783b8fccab5b0d0ff9313af8bdd05fec2a5ccdc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/783b8fccab5b0d0ff9313af8bdd05fec2a5ccdc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ffe0809cb3e9a49387a4657dea65a287b377617", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ffe0809cb3e9a49387a4657dea65a287b377617", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ffe0809cb3e9a49387a4657dea65a287b377617", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ffe0809cb3e9a49387a4657dea65a287b377617/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9056349fce2a4b8cd80da5a0657b0e899a5a989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9056349fce2a4b8cd80da5a0657b0e899a5a989", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9056349fce2a4b8cd80da5a0657b0e899a5a989"}], "stats": {"total": 196, "additions": 133, "deletions": 63}, "files": [{"sha": "02c85f893f87942201331b88f753903b75034a0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffe0809cb3e9a49387a4657dea65a287b377617/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffe0809cb3e9a49387a4657dea65a287b377617/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ffe0809cb3e9a49387a4657dea65a287b377617", "patch": "@@ -1,3 +1,21 @@\n+2016-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-show-locus.c\n+\t(layout::annotation_line_showed_range_p): New method.\n+\t(layout::print_any_fixits): Remove case fixit_hint::REMOVE.\n+\tReimplement case fixit_hint::REPLACE to cover removals, and\n+\treplacements where the range of the replacement isn't one\n+\tof the ranges in the rich_location.\n+\t(test_one_liner_fixit_replace): Likewise.\n+\t(selftest::test_one_liner_fixit_replace_non_equal_range): New\n+\tfunction.\n+\t(selftest::test_one_liner_fixit_replace_equal_secondary_range):\n+\tNew function.\n+\t(selftest::test_diagnostic_show_locus_one_liner): Call the new\n+\tfunctions.\n+\t* diagnostic.c (print_parseable_fixits): Remove case\n+\tfixit_hint::REMOVE.\n+\n 2016-08-19  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/77270"}, {"sha": "32b107833a8346b6eff9e0f4edb7e2aa8da5a2a5", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 104, "deletions": 20, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffe0809cb3e9a49387a4657dea65a287b377617/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffe0809cb3e9a49387a4657dea65a287b377617/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=2ffe0809cb3e9a49387a4657dea65a287b377617", "patch": "@@ -199,6 +199,8 @@ class layout\n \n   bool print_source_line (int row, line_bounds *lbounds_out);\n   void print_annotation_line (int row, const line_bounds lbounds);\n+  bool annotation_line_showed_range_p (int line, int start_column,\n+\t\t\t\t       int finish_column) const;\n   void print_any_fixits (int row, const rich_location *richloc);\n \n   void show_ruler (int max_column) const;\n@@ -1053,6 +1055,26 @@ layout::print_annotation_line (int row, const line_bounds lbounds)\n   print_newline ();\n }\n \n+/* Subroutine of layout::print_any_fixits.\n+\n+   Determine if the annotation line printed for LINE contained\n+   the exact range from START_COLUMN to FINISH_COLUMN.  */\n+\n+bool\n+layout::annotation_line_showed_range_p (int line, int start_column,\n+\t\t\t\t\tint finish_column) const\n+{\n+  layout_range *range;\n+  int i;\n+  FOR_EACH_VEC_ELT (m_layout_ranges, i, range)\n+    if (range->m_start.m_line == line\n+\t&& range->m_start.m_column == start_column\n+\t&& range->m_finish.m_line == line\n+\t&& range->m_finish.m_column == finish_column)\n+      return true;\n+  return false;\n+}\n+\n /* If there are any fixit hints on source line ROW within RICHLOC, print them.\n    They are printed in order, attempting to combine them onto lines, but\n    starting new lines if necessary.  */\n@@ -1083,33 +1105,39 @@ layout::print_any_fixits (int row, const rich_location *richloc)\n \t      }\n \t      break;\n \n-\t    case fixit_hint::REMOVE:\n+\t    case fixit_hint::REPLACE:\n \t      {\n-\t\tfixit_remove *remove = static_cast <fixit_remove *> (hint);\n-\t\t/* This assumes the removal just affects one line.  */\n-\t\tsource_range src_range = remove->get_range ();\n+\t\tfixit_replace *replace = static_cast <fixit_replace *> (hint);\n+\t\tsource_range src_range = replace->get_range ();\n+\t\tint line = LOCATION_LINE (src_range.m_start);\n \t\tint start_column = LOCATION_COLUMN (src_range.m_start);\n \t\tint finish_column = LOCATION_COLUMN (src_range.m_finish);\n-\t\tmove_to_column (&column, start_column);\n-\t\tfor (int column = start_column; column <= finish_column; column++)\n+\n+\t\t/* If the range of the replacement wasn't printed in the\n+\t\t   annotation line, then print an extra underline to\n+\t\t   indicate exactly what is being replaced.\n+\t\t   Always show it for removals.  */\n+\t\tif (!annotation_line_showed_range_p (line, start_column,\n+\t\t\t\t\t\t     finish_column)\n+\t\t    || replace->get_length () == 0)\n \t\t  {\n+\t\t    move_to_column (&column, start_column);\n \t\t    m_colorizer.set_fixit_hint ();\n-\t\t    pp_character (m_pp, '-');\n+\t\t    for (; column <= finish_column; column++)\n+\t\t      pp_character (m_pp, '-');\n \t\t    m_colorizer.set_normal_text ();\n \t\t  }\n-\t      }\n-\t      break;\n-\n-\t    case fixit_hint::REPLACE:\n-\t      {\n-\t\tfixit_replace *replace = static_cast <fixit_replace *> (hint);\n-\t\tint start_column\n-\t\t  = LOCATION_COLUMN (replace->get_range ().m_start);\n-\t\tmove_to_column (&column, start_column);\n-\t\tm_colorizer.set_fixit_hint ();\n-\t\tpp_string (m_pp, replace->get_string ());\n-\t\tm_colorizer.set_normal_text ();\n-\t\tcolumn += replace->get_length ();\n+\t\t/* Print the replacement text.  REPLACE also covers\n+\t\t   removals, so only do this extra work (potentially starting\n+\t\t   a new line) if we have actual replacement text.  */\n+\t\tif (replace->get_length () > 0)\n+\t\t  {\n+\t\t    move_to_column (&column, start_column);\n+\t\t    m_colorizer.set_fixit_hint ();\n+\t\t    pp_string (m_pp, replace->get_string ());\n+\t\t    m_colorizer.set_normal_text ();\n+\t\t    column += replace->get_length ();\n+\t\t  }\n \t      }\n \t      break;\n \n@@ -1502,6 +1530,60 @@ test_one_liner_fixit_replace ()\n \t\tpp_formatted_text (dc.printer));\n }\n \n+/* Replace fix-it hint: replacing \"field\" with \"m_field\",\n+   but where the caret was elsewhere.  */\n+\n+static void\n+test_one_liner_fixit_replace_non_equal_range ()\n+{\n+  test_diagnostic_context dc;\n+  location_t equals = linemap_position_for_column (line_table, 5);\n+  location_t start = linemap_position_for_column (line_table, 11);\n+  location_t finish = linemap_position_for_column (line_table, 15);\n+  rich_location richloc (line_table, equals);\n+  source_range range;\n+  range.m_start = start;\n+  range.m_finish = finish;\n+  richloc.add_fixit_replace (range, \"m_field\");\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  /* The replacement range is not indicated in the annotation line, so\n+     it should be indicated via an additional underline.  */\n+  ASSERT_STREQ (\"\\n\"\n+\t\t\" foo = bar.field;\\n\"\n+\t\t\"     ^\\n\"\n+\t\t\"           -----\\n\"\n+\t\t\"           m_field\\n\",\n+\t\tpp_formatted_text (dc.printer));\n+}\n+\n+/* Replace fix-it hint: replacing \"field\" with \"m_field\",\n+   where the caret was elsewhere, but where a secondary range\n+   exactly covers \"field\".  */\n+\n+static void\n+test_one_liner_fixit_replace_equal_secondary_range ()\n+{\n+  test_diagnostic_context dc;\n+  location_t equals = linemap_position_for_column (line_table, 5);\n+  location_t start = linemap_position_for_column (line_table, 11);\n+  location_t finish = linemap_position_for_column (line_table, 15);\n+  rich_location richloc (line_table, equals);\n+  location_t field = make_location (start, start, finish);\n+  richloc.add_range (field, false);\n+  source_range range;\n+  range.m_start = start;\n+  range.m_finish = finish;\n+  richloc.add_fixit_replace (range, \"m_field\");\n+  diagnostic_show_locus (&dc, &richloc, DK_ERROR);\n+  /* The replacement range is indicated in the annotation line,\n+     so it shouldn't be indicated via an additional underline.  */\n+  ASSERT_STREQ (\"\\n\"\n+\t\t\" foo = bar.field;\\n\"\n+\t\t\"     ^     ~~~~~\\n\"\n+\t\t\"           m_field\\n\",\n+\t\tpp_formatted_text (dc.printer));\n+}\n+\n /* Run the various one-liner tests.  */\n \n static void\n@@ -1532,6 +1614,8 @@ test_diagnostic_show_locus_one_liner (const line_table_case &case_)\n   test_one_liner_fixit_insert ();\n   test_one_liner_fixit_remove ();\n   test_one_liner_fixit_replace ();\n+  test_one_liner_fixit_replace_non_equal_range ();\n+  test_one_liner_fixit_replace_equal_secondary_range ();\n }\n \n /* Run all of the selftests within this file.  */"}, {"sha": "b47da383fc3649dd2b02152841a93d8ffab32838", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffe0809cb3e9a49387a4657dea65a287b377617/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffe0809cb3e9a49387a4657dea65a287b377617/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=2ffe0809cb3e9a49387a4657dea65a287b377617", "patch": "@@ -758,10 +758,6 @@ print_parseable_fixits (pretty_printer *pp, rich_location *richloc)\n \t    }\n \t    break;\n \n-\t  case fixit_hint::REMOVE:\n-\t    print_escaped_string (pp, \"\");\n-\t    break;\n-\n \t  case fixit_hint::REPLACE:\n \t    {\n \t      const fixit_replace *replace"}, {"sha": "b0fd9b52ed823670d8ab3836c4ef61d413810516", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffe0809cb3e9a49387a4657dea65a287b377617/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffe0809cb3e9a49387a4657dea65a287b377617/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=2ffe0809cb3e9a49387a4657dea65a287b377617", "patch": "@@ -1,3 +1,12 @@\n+2016-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/line-map.h (fixit_hint::kind): Delete REPLACE.\n+\t(class fixit_remove): Delete.\n+\t* line-map.c (rich_location::add_fixit_remove): Reimplement\n+\tby calling add_fixit_replace with an empty string.\n+\t(fixit_remove::fixit_remove): Delete.\n+\t(fixit_remove::affects_line_p): Delete.\n+\n 2016-08-19  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/32187"}, {"sha": "f65931c5e527038d32cf5eac1df0bb0d0f7b84ed", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffe0809cb3e9a49387a4657dea65a287b377617/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffe0809cb3e9a49387a4657dea65a287b377617/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=2ffe0809cb3e9a49387a4657dea65a287b377617", "patch": "@@ -1422,7 +1422,7 @@ class rich_location\n class fixit_hint\n {\n public:\n-  enum kind {INSERT, REMOVE, REPLACE};\n+  enum kind {INSERT, REPLACE};\n \n   virtual ~fixit_hint () {}\n \n@@ -1453,27 +1453,6 @@ class fixit_insert : public fixit_hint\n   size_t m_len;\n };\n \n-class fixit_remove : public fixit_hint\n-{\n- public:\n-  fixit_remove (source_range src_range);\n-  ~fixit_remove () {}\n-\n-  enum kind get_kind () const { return REMOVE; }\n-  bool affects_line_p (const char *file, int line);\n-  source_location get_start_loc () const { return m_src_range.m_start; }\n-  bool maybe_get_end_loc (source_location *out) const\n-  {\n-    *out = m_src_range.m_finish;\n-    return true;\n-  }\n-\n-  source_range get_range () const { return m_src_range; }\n-\n- private:\n-  source_range m_src_range;\n-};\n-\n class fixit_replace : public fixit_hint\n {\n  public:"}, {"sha": "3890eff7ba05221ca5691668a9852de39603247f", "filename": "libcpp/line-map.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ffe0809cb3e9a49387a4657dea65a287b377617/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ffe0809cb3e9a49387a4657dea65a287b377617/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=2ffe0809cb3e9a49387a4657dea65a287b377617", "patch": "@@ -2086,8 +2086,7 @@ rich_location::add_fixit_insert (source_location where,\n void\n rich_location::add_fixit_remove (source_range src_range)\n {\n-  linemap_assert (m_num_fixit_hints < MAX_FIXIT_HINTS);\n-  m_fixit_hints[m_num_fixit_hints++] = new fixit_remove (src_range);\n+  add_fixit_replace (src_range, \"\");\n }\n \n /* Add a fixit-hint, suggesting replacement of the content at\n@@ -2130,21 +2129,6 @@ fixit_insert::affects_line_p (const char *file, int line)\n   return false;\n }\n \n-/* class fixit_remove.  */\n-\n-fixit_remove::fixit_remove (source_range src_range)\n-: m_src_range (src_range)\n-{\n-}\n-\n-/* Implementation of fixit_hint::affects_line_p for fixit_remove.  */\n-\n-bool\n-fixit_remove::affects_line_p (const char *file, int line)\n-{\n-  return m_src_range.intersects_line_p (file, line);\n-}\n-\n /* class fixit_replace.  */\n \n fixit_replace::fixit_replace (source_range src_range,"}]}