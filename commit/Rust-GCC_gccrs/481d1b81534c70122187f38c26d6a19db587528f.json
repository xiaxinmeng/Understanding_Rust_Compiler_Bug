{"sha": "481d1b81534c70122187f38c26d6a19db587528f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgxZDFiODE1MzRjNzAxMjIxODdmMzhjMjZkNmExOWRiNTg3NTI4Zg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2013-10-08T12:13:13Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-10-08T12:13:13Z"}, "message": "tree-flow.h: Remove some prototypes.\n\n\n\t* tree-flow.h: Remove some prototypes.\n\t* tree.h: Remove some protypes, add a couple.\n\t* tree.c (using_eh_for_cleanups_flag, using_eh_for_cleanups,\n\tusing_eh_for_cleanups_p): Add interface routines for front ends.\n\t* tree-eh.h: New file.  Add protoptyes.\n\t* tree-eh.c (using_eh_for_cleanups_p, using_eh_for_cleanups): Delete.\n\t(add_stmt_to_eh_lp_fn): Make static.\n\t(lower_try_finally): Use new using_eh_for_cleanups_p.\n\t* emit-rtl.c: Include tree-eh.h.\n\t* gimple.h: Include tree-eh.h.\n\nFrom-SVN: r203273", "tree": {"sha": "535698e7a260f82134c7871c7ce81f209823f3e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/535698e7a260f82134c7871c7ce81f209823f3e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/481d1b81534c70122187f38c26d6a19db587528f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481d1b81534c70122187f38c26d6a19db587528f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/481d1b81534c70122187f38c26d6a19db587528f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481d1b81534c70122187f38c26d6a19db587528f/comments", "author": null, "committer": null, "parents": [{"sha": "0e6a0e48eb5ead024d12453cb811bdf0ef5c3377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6a0e48eb5ead024d12453cb811bdf0ef5c3377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e6a0e48eb5ead024d12453cb811bdf0ef5c3377"}], "stats": {"total": 141, "additions": 89, "deletions": 52}, "files": [{"sha": "d5bc285e92f7058766ff01a74c6d12c69c9b9567", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481d1b81534c70122187f38c26d6a19db587528f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481d1b81534c70122187f38c26d6a19db587528f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=481d1b81534c70122187f38c26d6a19db587528f", "patch": "@@ -1,3 +1,16 @@\n+2013-10-08  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-flow.h: Remove some prototypes.\n+\t* tree.h: Remove some protypes, add a couple.\n+\t* tree.c (using_eh_for_cleanups_flag, using_eh_for_cleanups,\n+\tusing_eh_for_cleanups_p): Add interface routines for front ends.\n+\t* tree-eh.h: New file.  Add protoptyes.\n+\t* tree-eh.c (using_eh_for_cleanups_p, using_eh_for_cleanups): Delete.\n+\t(add_stmt_to_eh_lp_fn): Make static.\n+\t(lower_try_finally): Use new using_eh_for_cleanups_p.\n+\t* emit-rtl.c: Include tree-eh.h.\n+\t* gimple.h: Include tree-eh.h.\n+\n 2013-10-08  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/58480"}, {"sha": "b0fc846226842fd9f33c787b104379f992a60ecb", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=481d1b81534c70122187f38c26d6a19db587528f", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"params.h\"\n #include \"target.h\"\n+#include \"tree-eh.h\"\n \n struct target_rtl default_target_rtl;\n #if SWITCHABLE_TARGET"}, {"sha": "2272075c7ce3bda0398f6e6dd1babb042e418ec1", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=481d1b81534c70122187f38c26d6a19db587528f", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-alias.h\"\n #include \"internal-fn.h\"\n #include \"gimple-fold.h\"\n+#include \"tree-eh.h\"\n \n typedef gimple gimple_seq_node;\n "}, {"sha": "9eaae1170ab10aade7da24c2b17c3adb5d82650e", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=481d1b81534c70122187f38c26d6a19db587528f", "patch": "@@ -41,15 +41,6 @@ along with GCC; see the file COPYING3.  If not see\n    i.e. in hash tables. This is a structure to do this. */\n typedef union {tree *tp; tree t; gimple g;} treemple;\n \n-/* Nonzero if we are using EH to handle cleanups.  */\n-static int using_eh_for_cleanups_p = 0;\n-\n-void\n-using_eh_for_cleanups (void)\n-{\n-  using_eh_for_cleanups_p = 1;\n-}\n-\n /* Misc functions used in this file.  */\n \n /* Remember and lookup EH landing pad data for arbitrary statements.\n@@ -66,7 +57,7 @@ using_eh_for_cleanups (void)\n \n /* Add statement T in function IFUN to landing pad NUM.  */\n \n-void\n+static void\n add_stmt_to_eh_lp_fn (struct function *ifun, gimple t, int num)\n {\n   struct throw_stmt_node *n;\n@@ -1655,7 +1646,7 @@ lower_try_finally (struct leh_state *state, gimple tp)\n   this_tf.try_finally_expr = tp;\n   this_tf.top_p = tp;\n   this_tf.outer = state;\n-  if (using_eh_for_cleanups_p && !cleanup_is_dead_in (state->cur_region))\n+  if (using_eh_for_cleanups_p () && !cleanup_is_dead_in (state->cur_region))\n     {\n       this_tf.region = gen_eh_region_cleanup (state->cur_region);\n       this_state.cur_region = this_tf.region;"}, {"sha": "308f20f77ee71501c695ecb085c0e1a4b7ad4bf9", "filename": "gcc/tree-eh.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Ftree-eh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Ftree-eh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.h?ref=481d1b81534c70122187f38c26d6a19db587528f", "patch": "@@ -0,0 +1,52 @@\n+/* Header file for exception handling.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_TREE_EH_H\n+#define GCC_TREE_EH_H\n+\n+extern void using_eh_for_cleanups (void);\n+extern void add_stmt_to_eh_lp (gimple, int);\n+extern bool remove_stmt_from_eh_lp_fn (struct function *, gimple);\n+extern bool remove_stmt_from_eh_lp (gimple);\n+extern int lookup_stmt_eh_lp_fn (struct function *, gimple);\n+extern int lookup_stmt_eh_lp (gimple);\n+extern bool make_eh_dispatch_edges (gimple);\n+extern void make_eh_edges (gimple);\n+extern edge redirect_eh_edge (edge, basic_block);\n+extern void redirect_eh_dispatch_edge (gimple, edge, basic_block);\n+extern bool operation_could_trap_helper_p (enum tree_code, bool, bool, bool,\n+\t\t\t\t\t   bool, tree, bool *);\n+extern bool operation_could_trap_p (enum tree_code, bool, bool, tree);\n+extern bool tree_could_trap_p (tree);\n+extern bool stmt_could_throw_p (gimple);\n+extern bool tree_could_throw_p (tree);\n+extern bool stmt_can_throw_external (gimple);\n+extern bool stmt_can_throw_internal (gimple);\n+extern bool maybe_clean_eh_stmt_fn (struct function *, gimple);\n+extern bool maybe_clean_eh_stmt (gimple);\n+extern bool maybe_clean_or_replace_eh_stmt (gimple, gimple);\n+extern bool maybe_duplicate_eh_stmt_fn (struct function *, gimple,\n+\t\t\t\t\tstruct function *, gimple,\n+\t\t\t\t\tstruct pointer_map_t *, int);\n+extern bool maybe_duplicate_eh_stmt (gimple, gimple);\n+extern void maybe_remove_unreachable_handlers (void);\n+extern bool verify_eh_edges (gimple);\n+extern bool verify_eh_dispatch_edge (gimple);\n+\n+#endif /* GCC_TREE_EH_H */"}, {"sha": "54ba51aa68bacbfa2b4b326f1e87f2b1513d85fb", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=481d1b81534c70122187f38c26d6a19db587528f", "patch": "@@ -375,38 +375,6 @@ enum move_pos\n extern enum move_pos movement_possibility (gimple);\n char *get_lsm_tmp_name (tree, unsigned);\n \n-/* In tree-flow-inline.h  */\n-static inline bool unmodifiable_var_p (const_tree);\n-static inline bool ref_contains_array_ref (const_tree);\n-\n-/* In tree-eh.c  */\n-extern void make_eh_edges (gimple);\n-extern bool make_eh_dispatch_edges (gimple);\n-extern edge redirect_eh_edge (edge, basic_block);\n-extern void redirect_eh_dispatch_edge (gimple, edge, basic_block);\n-extern bool stmt_could_throw_p (gimple);\n-extern bool stmt_can_throw_internal (gimple);\n-extern bool stmt_can_throw_external (gimple);\n-extern void add_stmt_to_eh_lp_fn (struct function *, gimple, int);\n-extern void add_stmt_to_eh_lp (gimple, int);\n-extern bool remove_stmt_from_eh_lp (gimple);\n-extern bool remove_stmt_from_eh_lp_fn (struct function *, gimple);\n-extern int lookup_stmt_eh_lp_fn (struct function *, gimple);\n-extern int lookup_stmt_eh_lp (gimple);\n-extern bool maybe_clean_eh_stmt_fn (struct function *, gimple);\n-extern bool maybe_clean_eh_stmt (gimple);\n-extern bool maybe_clean_or_replace_eh_stmt (gimple, gimple);\n-extern bool maybe_duplicate_eh_stmt_fn (struct function *, gimple,\n-\t\t\t\t\tstruct function *, gimple,\n-\t\t\t\t\tstruct pointer_map_t *, int);\n-extern bool maybe_duplicate_eh_stmt (gimple, gimple);\n-extern bool verify_eh_edges (gimple);\n-extern bool verify_eh_dispatch_edge (gimple);\n-extern void maybe_remove_unreachable_handlers (void);\n-\n-/* In tree-ssa-pre.c  */\n-void debug_value_expressions (unsigned int);\n-\n /* In tree-loop-linear.c  */\n extern void linear_transform_loops (void);\n extern unsigned perfect_loop_nest_depth (struct loop *);"}, {"sha": "50717f0c78772dab0d6ecb6385f0cb1cdaac440f", "filename": "gcc/tree.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=481d1b81534c70122187f38c26d6a19db587528f", "patch": "@@ -12247,4 +12247,22 @@ block_may_fallthru (const_tree block)\n     }\n }\n \n+/* True if we are using EH to handle cleanups.  */\n+static bool using_eh_for_cleanups_flag = false;\n+\n+/* This routine is called from front ends to indicate eh should be used for\n+   cleanups.  */\n+void\n+using_eh_for_cleanups (void)\n+{\n+  using_eh_for_cleanups_flag = true;\n+}\n+\n+/* Query whether EH is used for cleanups.  */\n+bool\n+using_eh_for_cleanups_p (void)\n+{\n+  return using_eh_for_cleanups_flag;\n+}\n+\n #include \"gt-tree.h\""}, {"sha": "8a6a8f3f25ef1a50d46767ae2b3fa6e6f1cda49f", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481d1b81534c70122187f38c26d6a19db587528f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=481d1b81534c70122187f38c26d6a19db587528f", "patch": "@@ -4216,15 +4216,6 @@ extern rtx expand_stack_save (void);\n extern void expand_stack_restore (tree);\n extern void expand_return (tree);\n \n-/* In tree-eh.c */\n-extern void using_eh_for_cleanups (void);\n-\n-extern bool tree_could_trap_p (tree);\n-extern bool operation_could_trap_helper_p (enum tree_code, bool, bool, bool,\n-\t\t\t\t\t   bool, tree, bool *);\n-extern bool operation_could_trap_p (enum tree_code, bool, bool, tree);\n-extern bool tree_could_throw_p (tree);\n-\n /* Compare and hash for any structure which begins with a canonical\n    pointer.  Assumes all pointers are interchangeable, which is sort\n    of already assumed by gcc elsewhere IIRC.  */\n@@ -4531,6 +4522,8 @@ extern bool types_same_for_odr (tree type1, tree type2);\n extern bool contains_bitfld_component_ref_p (const_tree);\n extern bool type_in_anonymous_namespace_p (tree);\n extern bool block_may_fallthru (const_tree);\n+extern void using_eh_for_cleanups (void);\n+extern bool using_eh_for_cleanups_p (void);\n \n /* In tree-nested.c */\n extern tree build_addr (tree, tree);"}]}