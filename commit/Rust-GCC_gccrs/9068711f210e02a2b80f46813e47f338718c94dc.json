{"sha": "9068711f210e02a2b80f46813e47f338718c94dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA2ODcxMWYyMTBlMDJhMmI4MGY0NjgxM2U0N2YzMzg3MThjOTRkYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-14T12:06:54Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-14T12:08:36Z"}, "message": "c++: Instantiation with local extern [PR97395]\n\nIt turns out that pushdecl_with_scope has somewhat strange behaviour,\nwhich probably made more sense way back.  Unfortunately making it\nsomewhat saner turned into a rathole.  Instead use a\npush_nested_namespace around pushing the alias -- this is similar to\nsome of the friend handling we already have.\n\n\tgcc/cp/\n\t* name-lookup.c (push_local_extern_decl_alias): Push into alias's\n\tnamespace and use pushdecl.\n\t(do_pushdecl_with_scope): Clarify behaviour.\n\tgcc/testsuite/\n\t* g++.dg/lookup/extern-redecl2.C: New.", "tree": {"sha": "b2a62b225ec9f6fb533a3c190a8dc0f8df03d1c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2a62b225ec9f6fb533a3c190a8dc0f8df03d1c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9068711f210e02a2b80f46813e47f338718c94dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9068711f210e02a2b80f46813e47f338718c94dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9068711f210e02a2b80f46813e47f338718c94dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9068711f210e02a2b80f46813e47f338718c94dc/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "252c9967ba785aedf3b39e2cd50237d0f32fe3bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252c9967ba785aedf3b39e2cd50237d0f32fe3bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/252c9967ba785aedf3b39e2cd50237d0f32fe3bd"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "5dcaab4d1dfe9f1d4fd80ea0ffb62027ecc90eaa", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9068711f210e02a2b80f46813e47f338718c94dc/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9068711f210e02a2b80f46813e47f338718c94dc/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=9068711f210e02a2b80f46813e47f338718c94dc", "patch": "@@ -38,7 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n \n static cxx_binding *cxx_binding_make (tree value, tree type);\n static cp_binding_level *innermost_nonclass_level (void);\n-static tree do_pushdecl_with_scope (tree x, cp_binding_level *, bool hiding);\n+static tree do_pushdecl (tree decl, bool hiding);\n static void set_identifier_type_value_with_scope (tree id, tree decl,\n \t\t\t\t\t\t  cp_binding_level *b);\n static name_hint maybe_suggest_missing_std_header (location_t location,\n@@ -2975,8 +2975,9 @@ push_local_extern_decl_alias (tree decl)\n \n \t  /* Expected default linkage is from the namespace.  */\n \t  TREE_PUBLIC (alias) = TREE_PUBLIC (ns);\n-\t  alias = do_pushdecl_with_scope (alias, NAMESPACE_LEVEL (ns),\n-\t\t\t\t\t  /* hiding= */true);\n+\t  push_nested_namespace (ns);\n+\t  alias = do_pushdecl (alias, /* hiding= */true);\n+\t  pop_nested_namespace (ns);\n \t}\n     }\n \n@@ -3848,10 +3849,17 @@ constructor_name_p (tree name, tree type)\n /* Same as pushdecl, but define X in binding-level LEVEL.  We rely on the\n    caller to set DECL_CONTEXT properly.\n \n-   Note that this must only be used when X will be the new innermost\n-   binding for its name, as we tack it onto the front of IDENTIFIER_BINDING\n-   without checking to see if the current IDENTIFIER_BINDING comes from a\n-   closer binding level than LEVEL.  */\n+   Warning: For class and block-scope this must only be used when X\n+   will be the new innermost binding for its name, as we tack it onto\n+   the front of IDENTIFIER_BINDING without checking to see if the\n+   current IDENTIFIER_BINDING comes from a closer binding level than\n+   LEVEL.\n+\n+   Warning: For namespace scope, this will look in LEVEL for an\n+   existing binding to match, but if not found will push the decl into\n+   CURRENT_NAMESPACE.  Use push_nested_namespace/pushdecl/\n+   pop_nested_namespace if you really need to push it into a foreign\n+   namespace.  */\n \n static tree\n do_pushdecl_with_scope (tree x, cp_binding_level *level, bool hiding = false)"}, {"sha": "9c5caa6b6770c4de9687d08bc2bae3a0d76c0d93", "filename": "gcc/testsuite/g++.dg/lookup/extern-redecl2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9068711f210e02a2b80f46813e47f338718c94dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-redecl2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9068711f210e02a2b80f46813e47f338718c94dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-redecl2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-redecl2.C?ref=9068711f210e02a2b80f46813e47f338718c94dc", "patch": "@@ -0,0 +1,18 @@\n+// PR 97395\n+// ICE injecting hidden decl in wrong namespace\n+\n+namespace pr {\n+  template<typename WW>\n+  void\n+  kp ()\n+  {\n+    extern WW hz;\n+  }\n+\n+  void\n+  n5 ()\n+  {\n+    kp<int[]> ();\n+    kp<int[1]> ();\n+  }\n+}"}]}