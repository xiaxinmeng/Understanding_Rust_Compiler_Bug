{"sha": "1b4d2764e3d7b87e1db457f2378d70c7fd35d031", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWI0ZDI3NjRlM2Q3Yjg3ZTFkYjQ1N2YyMzc4ZDcwYzdmZDM1ZDAzMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-26T22:15:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-26T22:15:29Z"}, "message": "(find_reloads_address): When check for out of range constant plus register...\n\n(find_reloads_address): When check for out of range constant plus\nregister, accept any hard register instead of just fp, ap, sp.\n\nFrom-SVN: r10521", "tree": {"sha": "939ab542e548cd607a738859d961bee22af65766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/939ab542e548cd607a738859d961bee22af65766"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b4d2764e3d7b87e1db457f2378d70c7fd35d031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4d2764e3d7b87e1db457f2378d70c7fd35d031", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b4d2764e3d7b87e1db457f2378d70c7fd35d031", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4d2764e3d7b87e1db457f2378d70c7fd35d031/comments", "author": null, "committer": null, "parents": [{"sha": "a89088491643926984b58ed8d7349de5b80d5c30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89088491643926984b58ed8d7349de5b80d5c30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89088491643926984b58ed8d7349de5b80d5c30"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "b64cb6348981cff210b87c18e7397e863cc93f72", "filename": "gcc/reload.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4d2764e3d7b87e1db457f2378d70c7fd35d031/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4d2764e3d7b87e1db457f2378d70c7fd35d031/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=1b4d2764e3d7b87e1db457f2378d70c7fd35d031", "patch": "@@ -4240,17 +4240,15 @@ find_reloads_address (mode, memrefloc, ad, loc, opnum, type, ind_levels)\n \treturn 0;\n     }\n \n-  /* If we have address of a stack slot but it's not valid\n-     (displacement is too large), compute the sum in a register.  */\n+  /* If we have address of a stack slot but it's not valid because the\n+     displacement is too large, compute the sum in a register.\n+     Handle all base registers here, not just fp/ap/sp, because on some\n+     targets (namely SH) we can also get too large displacements from\n+     big-endian corrections.  */\n   else if (GET_CODE (ad) == PLUS\n-\t   && (XEXP (ad, 0) == frame_pointer_rtx\n-#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n-\t       || XEXP (ad, 0) == hard_frame_pointer_rtx\n-#endif\n-#if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n-\t       || XEXP (ad, 0) == arg_pointer_rtx\n-#endif\n-\t       || XEXP (ad, 0) == stack_pointer_rtx)\n+\t   && GET_CODE (XEXP (ad, 0)) == REG\n+\t   && REGNO (XEXP (ad, 0)) < FIRST_PSEUDO_REGISTER\n+\t   && REG_OK_FOR_BASE_P (XEXP (ad, 0))\n \t   && GET_CODE (XEXP (ad, 1)) == CONST_INT)\n     {\n       /* Unshare the MEM rtx so we can safely alter it.  */"}]}