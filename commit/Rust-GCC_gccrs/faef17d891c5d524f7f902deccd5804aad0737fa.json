{"sha": "faef17d891c5d524f7f902deccd5804aad0737fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFlZjE3ZDg5MWM1ZDUyNGY3ZjkwMmRlY2NkNTgwNGFhZDA3MzdmYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-03-04T12:49:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-03-04T12:49:22Z"}, "message": "re PR libstdc++/52433 ([C++11] debug mode iterators need to move)\n\n        PR libstdc++/52433\n        * include/debug/safe_iterator.h (_Safe_iterator): Add move\n        constructor and move assignment operator.\n        * testsuite/23_containers/vector/debug/52433.cc: New.\n\nFrom-SVN: r184880", "tree": {"sha": "12154c48b478dd2fb2d1d70c4db03a56eb7f12f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12154c48b478dd2fb2d1d70c4db03a56eb7f12f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faef17d891c5d524f7f902deccd5804aad0737fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faef17d891c5d524f7f902deccd5804aad0737fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faef17d891c5d524f7f902deccd5804aad0737fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faef17d891c5d524f7f902deccd5804aad0737fa/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b12866c71e00d727796101210069fb00de5c11cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b12866c71e00d727796101210069fb00de5c11cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b12866c71e00d727796101210069fb00de5c11cc"}], "stats": {"total": 83, "additions": 82, "deletions": 1}, "files": [{"sha": "800738e81bf5b2706a19b565827d537099c38a77", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faef17d891c5d524f7f902deccd5804aad0737fa/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faef17d891c5d524f7f902deccd5804aad0737fa/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=faef17d891c5d524f7f902deccd5804aad0737fa", "patch": "@@ -1,3 +1,10 @@\n+2012-03-04  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/52433\n+\t* include/debug/safe_iterator.h (_Safe_iterator): Add move\n+\tconstructor and move assignment operator.\n+\t* testsuite/23_containers/vector/debug/52433.cc: New.\n+\n 2012-03-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/limits (numeric_limits): Fix returns per C++11."}, {"sha": "65dff556317e97c0d33fbd9eff6eeb66542d0503", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faef17d891c5d524f7f902deccd5804aad0737fa/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faef17d891c5d524f7f902deccd5804aad0737fa/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=faef17d891c5d524f7f902deccd5804aad0737fa", "patch": "@@ -169,6 +169,19 @@ namespace __gnu_debug\n \t\t\t      ._M_iterator(__x, \"other\"));\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       * @brief Move construction.\n+       * @post __x is singular and unattached\n+       */\n+      _Safe_iterator(_Safe_iterator&& __x) : _M_current()\n+      {\n+\tstd::swap(_M_current, __x._M_current);\n+\tthis->_M_attach(__x._M_sequence);\n+\t__x._M_detach();\n+      }\n+#endif\n+\n       /**\n        *  @brief Converting constructor from a mutable iterator to a\n        *  constant iterator.\n@@ -208,6 +221,22 @@ namespace __gnu_debug\n \treturn *this;\n       }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       * @brief Move assignment.\n+       * @post __x is singular and unattached\n+       */\n+      _Safe_iterator&\n+      operator=(_Safe_iterator&& __x)\n+      {\n+\t_M_current = __x._M_current;\n+\t_M_attach(__x._M_sequence);\n+\t__x._M_detach();\n+\t__x._M_current = _Iterator();\n+\treturn *this;\n+      }\n+#endif\n+\n       /**\n        *  @brief Iterator dereference.\n        *  @pre iterator is dereferenceable\n@@ -422,7 +451,9 @@ namespace __gnu_debug\n       /// Is this iterator equal to the sequence's before_begin() iterator if\n       /// any?\n       bool _M_is_before_begin() const\n-      { return _BeforeBeginHelper<_Sequence>::_M_Is(base(), _M_get_sequence()); }\n+      {\n+\treturn _BeforeBeginHelper<_Sequence>::_M_Is(base(), _M_get_sequence());\n+      }\n     };\n \n   template<typename _IteratorL, typename _IteratorR, typename _Sequence>"}, {"sha": "f1f5917d1032ee80056de0b4595bfc808811d797", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/52433.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faef17d891c5d524f7f902deccd5804aad0737fa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F52433.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faef17d891c5d524f7f902deccd5804aad0737fa/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F52433.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F52433.cc?ref=faef17d891c5d524f7f902deccd5804aad0737fa", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-require-debug-mode \"\" }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// PR libstdc++/52433\n+\n+#include <vector>\n+\n+struct X\n+{\n+    std::vector<int>::iterator i;\n+\n+    X() = default;\n+    X(const X&) = default;\n+    X(X&&) = default;\n+    X& operator=(const X&) = default;\n+    X& operator=(X&&) = default;\n+};\n+\n+X test01()\n+{\n+    X x;\n+    x = X();\n+    return x;\n+}\n+"}]}