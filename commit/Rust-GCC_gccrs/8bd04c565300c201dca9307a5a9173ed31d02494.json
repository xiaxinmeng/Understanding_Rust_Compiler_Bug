{"sha": "8bd04c565300c201dca9307a5a9173ed31d02494", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJkMDRjNTY1MzAwYzIwMWRjYTkzMDdhNWE5MTczZWQzMWQwMjQ5NA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-02-28T21:09:54Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-02-28T21:09:54Z"}, "message": "Update NT code so it works\n\nFrom-SVN: r11361", "tree": {"sha": "8e8400f60c9287d5802e572a5ec95095b6bab2a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e8400f60c9287d5802e572a5ec95095b6bab2a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bd04c565300c201dca9307a5a9173ed31d02494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd04c565300c201dca9307a5a9173ed31d02494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bd04c565300c201dca9307a5a9173ed31d02494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bd04c565300c201dca9307a5a9173ed31d02494/comments", "author": null, "committer": null, "parents": [{"sha": "7c59dc5dd818d8658902070cab03c57d331b4185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c59dc5dd818d8658902070cab03c57d331b4185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c59dc5dd818d8658902070cab03c57d331b4185"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "54f552a4de7b932ecfa7ada7b0da01e216d6ab2d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 38, "deletions": 27, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bd04c565300c201dca9307a5a9173ed31d02494/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bd04c565300c201dca9307a5a9173ed31d02494/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8bd04c565300c201dca9307a5a9173ed31d02494", "patch": "@@ -4102,7 +4102,7 @@ rs6000_trampoline_template (file)\n       fprintf (file, \"\\t.ualong 0\\n\");\t\t\t/* offset  8 */\n       fprintf (file, \"\\t.ualong 0\\n\");\t\t\t/* offset 12 */\n       fprintf (file, \"\\t.ualong 0\\n\");\t\t\t/* offset 16 */\n-      fprintf (file, \"..LTRAMP1:\\n\");\t\t\t/* offset 20 */\n+      fprintf (file, \"..LTRAMP1..0:\\n\");\t\t/* offset 20 */\n       fprintf (file, \"\\tlwz %s,8(%s)\\n\", r0, r2);\t/* offset 24 */\n       fprintf (file, \"\\tlwz %s,12(%s)\\n\", sc, r2);\t/* offset 28 */\n       fprintf (file, \"\\tmtctr %s\\n\", r0);\t\t/* offset 32 */\n@@ -4153,53 +4153,64 @@ rs6000_initialize_trampoline (addr, fnaddr, cxt)\n      rtx fnaddr;\n      rtx cxt;\n {\n-  rtx reg, reg2, reg3;\n   enum machine_mode pmode = Pmode;\n+  int regsize = (TARGET_32BIT) ? 4 : 8;\n+  rtx ctx_reg = force_reg (pmode, cxt);\n \n   switch (DEFAULT_ABI)\n     {\n     default:\n       abort ();\n \n+/* Macros to shorten the code expansions below.  */\n+#define MEM_DEREF(addr) gen_rtx (MEM, pmode, memory_address (pmode, addr))\n #define MEM_PLUS(addr,offset) gen_rtx (MEM, pmode, memory_address (pmode, plus_constant (addr, offset)))\n \n     /* Under AIX, just build the 3 word function descriptor */\n     case ABI_AIX:\n-      emit_move_insn (gen_rtx (MEM, pmode, memory_address (pmode, addr)),\n-\t\t      gen_rtx (MEM, pmode, memory_address (pmode, fnaddr)));\n-\n-      emit_move_insn (MEM_PLUS (addr, 4), MEM_PLUS (fnaddr, 4));\n-      emit_move_insn (MEM_PLUS (addr, 8), force_reg (pmode, cxt));\n+      {\n+\trtx fn_reg = gen_reg_rtx (pmode);\n+\trtx toc_reg = gen_reg_rtx (pmode);\n+\temit_move_insn (fn_reg, MEM_DEREF (fnaddr));\n+\temit_move_insn (toc_reg, MEM_PLUS (fnaddr, 4));\n+\temit_move_insn (MEM_DEREF (addr), fn_reg);\n+\temit_move_insn (MEM_PLUS (addr, regsize), toc_reg);\n+\temit_move_insn (MEM_PLUS (addr, 2*regsize), ctx_reg);\n+      }\n       break;\n \n     /* Under V.4/eabi, update the two words after the bl to have the real\n        function address and the static chain.  */\n     case ABI_V4:\n     case ABI_AIX_NODESC:\n-      reg = gen_reg_rtx (pmode);\n-\n-      emit_move_insn (reg, fnaddr);\n-      emit_move_insn (MEM_PLUS (addr, 8), reg);\n-      emit_move_insn (MEM_PLUS (addr, (TARGET_64BIT ? 16 : 12)), cxt);\n-\n-      rs6000_sync_trampoline (addr);\n+      {\n+\trtx reg = gen_reg_rtx (pmode);\n+\temit_move_insn (reg, fnaddr);\n+\temit_move_insn (MEM_PLUS (addr, 8), reg);\n+\temit_move_insn (MEM_PLUS (addr, 8 + regsize), ctx_reg);\n+\trs6000_sync_trampoline (addr);\n+      }\n       break;\n \n-    /* Under NT, update the first word to point to the ..LTRAMP1 header,\n-       second word will point to the whole trampoline, third-fifth words\n+    /* Under NT, update the first word to point to the ..LTRAMP1..0 header,\n+       the second word will point to the whole trampoline, third-fifth words\n        will then have the real address, static chain, and toc value.  */\n     case ABI_NT:\n-      addr = force_reg (pmode, addr);\n-      reg = gen_reg_rtx (pmode);\n-      reg2 = gen_reg_rtx (pmode);\n-      emit_move_insn (reg, gen_rtx (SYMBOL_REF, pmode, \"..LTRAMP1\"));\n-      emit_move_insn (reg2, fnaddr);\n-      reg3 = force_reg (pmode, cxt);\n-      emit_move_insn (MEM_PLUS (addr, 4), addr);\n-      emit_move_insn (gen_rtx (MEM, pmode, addr), reg);\n-      emit_move_insn (MEM_PLUS (addr, 8), reg2);\n-      emit_move_insn (MEM_PLUS (addr, 12), reg3);\n-      emit_move_insn (MEM_PLUS (addr, 16), gen_rtx (REG, pmode, 2));\n+      {\n+\trtx tramp_reg = gen_reg_rtx (pmode);\n+\trtx fn_reg = gen_reg_rtx (pmode);\n+\trtx toc_reg = gen_reg_rtx (pmode);\n+\n+\temit_move_insn (tramp_reg, gen_rtx (SYMBOL_REF, pmode, \"..LTRAMP1..0\"));\n+\taddr = force_reg (pmode, addr);\n+\temit_move_insn (fn_reg, MEM_DEREF (fnaddr));\n+\temit_move_insn (toc_reg, MEM_PLUS (fnaddr, regsize));\n+\temit_move_insn (MEM_DEREF (addr), tramp_reg);\n+\temit_move_insn (MEM_PLUS (addr, regsize), addr);\n+\temit_move_insn (MEM_PLUS (addr, 2*regsize), fn_reg);\n+\temit_move_insn (MEM_PLUS (addr, 3*regsize), ctx_reg);\n+\temit_move_insn (MEM_PLUS (addr, 4*regsize), gen_rtx (REG, pmode, 2));\n+      }\n       break;\n     }\n "}]}