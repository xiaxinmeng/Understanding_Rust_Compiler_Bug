{"sha": "abccc9a925b684f87bb31cbd148ac58cc417801f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJjY2M5YTkyNWI2ODRmODdiYjMxY2JkMTQ4YWM1OGNjNDE3ODAxZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-12-08T21:04:45Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-12-08T21:04:45Z"}, "message": "re PR fortran/46520 (libquadmath: fails at link test on bare irons)\n\n2010-12-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/46520\n        * configure.ac: Use GCC_TRY_COMPILE_OR_LINK instead of\n        AC_TRY_LINK and cache libquad_have_float128.\n        * configure: Regenerate.\n\nFrom-SVN: r167605", "tree": {"sha": "3c8c44f8f931894129e845087f02b00a2b68dff2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c8c44f8f931894129e845087f02b00a2b68dff2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abccc9a925b684f87bb31cbd148ac58cc417801f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abccc9a925b684f87bb31cbd148ac58cc417801f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abccc9a925b684f87bb31cbd148ac58cc417801f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abccc9a925b684f87bb31cbd148ac58cc417801f/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11afe8e8c87cd525efbaab282b2c01d6a52e9d86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11afe8e8c87cd525efbaab282b2c01d6a52e9d86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11afe8e8c87cd525efbaab282b2c01d6a52e9d86"}], "stats": {"total": 90, "additions": 68, "deletions": 22}, "files": [{"sha": "7cf5219cd3c73ae84271d718036f819ee3025e35", "filename": "libquadmath/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abccc9a925b684f87bb31cbd148ac58cc417801f/libquadmath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abccc9a925b684f87bb31cbd148ac58cc417801f/libquadmath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2FChangeLog?ref=abccc9a925b684f87bb31cbd148ac58cc417801f", "patch": "@@ -1,3 +1,10 @@\n+2010-12-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/46520\n+\t* configure.ac: Use GCC_TRY_COMPILE_OR_LINK instead of\n+\tAC_TRY_LINK and cache libquad_have_float128.\n+\t* configure: Regenerate.\n+\n 2010-12-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/46543"}, {"sha": "eb370580bebb09670f2273ddca32c073e0506e0d", "filename": "libquadmath/configure", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abccc9a925b684f87bb31cbd148ac58cc417801f/libquadmath%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abccc9a925b684f87bb31cbd148ac58cc417801f/libquadmath%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure?ref=abccc9a925b684f87bb31cbd148ac58cc417801f", "patch": "@@ -11941,6 +11941,54 @@ fi\n \n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether __float128 is supported\" >&5\n $as_echo_n \"checking whether __float128 is supported... \" >&6; }\n+if test \"${libquad_cv_have_float128+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+    typedef _Complex float __attribute__((mode(TC))) __complex128;\n+\n+    __float128 foo (__float128 x)\n+    {\n+\n+     __complex128 z1, z2;\n+\n+     z1 = x;\n+     z2 = x / 7.Q;\n+     z2 /= z1;\n+\n+     return (__float128) z2;\n+    }\n+\n+    __float128 bar (__float128 x)\n+    {\n+      return x * __builtin_huge_valq ();\n+    }\n+\n+int\n+main ()\n+{\n+\n+    foo (1.2Q);\n+    bar (1.2Q);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+    libquad_cv_have_float128=yes\n+\n+else\n+\n+    libquad_cv_have_float128=no\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n   if test x$gcc_no_link = xyes; then\n   as_fn_error \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n fi\n@@ -11979,20 +12027,20 @@ main ()\n _ACEOF\n if ac_fn_c_try_link \"$LINENO\"; then :\n \n-    libquad_have_float128=yes\n+    libquad_cv_have_float128=yes\n \n else\n \n-    libquad_have_float128=no\n+    libquad_cv_have_float128=no\n \n fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libquad_have_float128\" >&5\n-$as_echo \"$libquad_have_float128\" >&6; }\n-\n-\n- if test \"x$libquad_have_float128\" = xyes; then\n+fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libquad_cv_have_float128\" >&5\n+$as_echo \"$libquad_cv_have_float128\" >&6; }\n+ if test \"x$libquad_cv_have_float128\" = xyes; then\n   BUILD_LIBQUADMATH_TRUE=\n   BUILD_LIBQUADMATH_FALSE='#'\n else"}, {"sha": "56b1fcb2792f0311a3f290ffca6434a2906f2951", "filename": "libquadmath/configure.ac", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abccc9a925b684f87bb31cbd148ac58cc417801f/libquadmath%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abccc9a925b684f87bb31cbd148ac58cc417801f/libquadmath%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libquadmath%2Fconfigure.ac?ref=abccc9a925b684f87bb31cbd148ac58cc417801f", "patch": "@@ -149,8 +149,8 @@ AM_CONDITIONAL(LIBQUAD_USE_SYMVER, [test \"x$quadmath_use_symver\" != xno])\n AM_CONDITIONAL(LIBQUAD_USE_SYMVER_GNU, [test \"x$quadmath_use_symver\" = xgnu])\n AM_CONDITIONAL(LIBQUAD_USE_SYMVER_SUN, [test \"x$quadmath_use_symver\" = xsun])\n \n-AC_MSG_CHECKING([whether __float128 is supported])\n-  AC_TRY_LINK([\n+AC_CACHE_CHECK([whether __float128 is supported], [libquad_cv_have_float128],\n+  [GCC_TRY_COMPILE_OR_LINK([\n     typedef _Complex float __attribute__((mode(TC))) __complex128;\n \n     __float128 foo (__float128 x)\n@@ -173,20 +173,11 @@ AC_MSG_CHECKING([whether __float128 is supported])\n     foo (1.2Q);\n     bar (1.2Q);\n   ],[\n-    libquad_have_float128=yes\n+    libquad_cv_have_float128=yes\n   ],[\n-    libquad_have_float128=no\n-])\n-AC_MSG_RESULT([$libquad_have_float128])\n-\n-dnl\n-dnl Enable the following for a stand-alone library:\n-dnl\n-dnl if test $libquad_have_float128 = no; then\n-dnl   AC_MSG_ERROR([__float128 support is required to build this library.])\n-dnl fi\n-\n-AM_CONDITIONAL(BUILD_LIBQUADMATH, [test \"x$libquad_have_float128\" = xyes])\n+    libquad_cv_have_float128=no\n+])])\n+AM_CONDITIONAL(BUILD_LIBQUADMATH, [test \"x$libquad_cv_have_float128\" = xyes])\n \n AC_CACHE_SAVE\n "}]}