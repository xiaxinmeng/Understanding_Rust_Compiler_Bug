{"sha": "481f29eb5efa2a11682e4be46842f12ab51cb821", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgxZjI5ZWI1ZWZhMmExMTY4MmU0YmU0Njg0MmYxMmFiNTFjYjgyMQ==", "commit": {"author": {"name": "Vincent Celier", "email": "celier@adacore.com", "date": "2009-04-24T10:31:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-24T10:31:57Z"}, "message": "gnatcmd.adb: Call Prj.Env.Initialize with the Project_Tree\n\n2009-04-24  Vincent Celier  <celier@adacore.com>\n\n\t* gnatcmd.adb: Call Prj.Env.Initialize with the Project_Tree\n\n\t* prj-env.adb: Move all global variables to the private part of the\n\tproject tree data.\n\tAccess these new components instead of the global variables no longer\n\tin existence.\n\t(Add_To_Path): New Project_Tree_Ref parameter, to access the new\n\tcomponents that were previously global variables.\n\n\t* prj-env.ads (Initialize): New Project_Tree_Ref parameter\n\t(Set_Mapping_File_Initial_State_To_Empty): New Project_Tree_Ref\n\tparameter.\n\n\t* prj-nmsc.adb (Compute_Unit_Name): New Project_Tree_Ref parameter to\n\tbe able to call Set_Mapping_File_Initial_State_To_Empty with it.\n\n\t* prj.adb (Initialize): Do not call Prj.Env.Initialize\n\t(Reset): Do not call Prj.Env.Initialize. Instead, initialize the new\n\tcomponents in the private part of the project tree data.\n\n\t* prj.ads (Private_Project_Tree_Data): new components moved from\n\tPrj.Env: Current_Source_Path_File, Current_Object_Path_File,\n\tAda_Path_Buffer, Ada_Path_Length, Ada_Prj_Include_File_Set,\n\tAda_Prj_Objects_File_Set, Fill_Mapping_File.\n\nFrom-SVN: r146696", "tree": {"sha": "b9789783f376ae23863aa326e508ce8da7b5739c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9789783f376ae23863aa326e508ce8da7b5739c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/481f29eb5efa2a11682e4be46842f12ab51cb821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481f29eb5efa2a11682e4be46842f12ab51cb821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/481f29eb5efa2a11682e4be46842f12ab51cb821", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481f29eb5efa2a11682e4be46842f12ab51cb821/comments", "author": {"login": "vcelier", "id": 8888056, "node_id": "MDQ6VXNlcjg4ODgwNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/8888056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vcelier", "html_url": "https://github.com/vcelier", "followers_url": "https://api.github.com/users/vcelier/followers", "following_url": "https://api.github.com/users/vcelier/following{/other_user}", "gists_url": "https://api.github.com/users/vcelier/gists{/gist_id}", "starred_url": "https://api.github.com/users/vcelier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vcelier/subscriptions", "organizations_url": "https://api.github.com/users/vcelier/orgs", "repos_url": "https://api.github.com/users/vcelier/repos", "events_url": "https://api.github.com/users/vcelier/events{/privacy}", "received_events_url": "https://api.github.com/users/vcelier/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30349c7400289ab4b00f07c73a2d630bb28f3b23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30349c7400289ab4b00f07c73a2d630bb28f3b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30349c7400289ab4b00f07c73a2d630bb28f3b23"}], "stats": {"total": 321, "additions": 197, "deletions": 124}, "files": [{"sha": "cf7cde3a6321fd7fac000ff0d3d6e8376df0089e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=481f29eb5efa2a11682e4be46842f12ab51cb821", "patch": "@@ -1,3 +1,30 @@\n+2009-04-24  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatcmd.adb: Call Prj.Env.Initialize with the Project_Tree\n+\n+\t* prj-env.adb: Move all global variables to the private part of the\n+\tproject tree data.\n+\tAccess these new components instead of the global variables no longer\n+\tin existence.\n+\t(Add_To_Path): New Project_Tree_Ref parameter, to access the new\n+\tcomponents that were previously global variables.\n+\n+\t* prj-env.ads (Initialize): New Project_Tree_Ref parameter\n+\t(Set_Mapping_File_Initial_State_To_Empty): New Project_Tree_Ref\n+\tparameter.\n+\n+\t* prj-nmsc.adb (Compute_Unit_Name): New Project_Tree_Ref parameter to\n+\tbe able to call Set_Mapping_File_Initial_State_To_Empty with it.\n+\n+\t* prj.adb (Initialize): Do not call Prj.Env.Initialize\n+\t(Reset): Do not call Prj.Env.Initialize. Instead, initialize the new\n+\tcomponents in the private part of the project tree data.\n+\n+\t* prj.ads (Private_Project_Tree_Data): new components moved from\n+\tPrj.Env: Current_Source_Path_File, Current_Object_Path_File,\n+\tAda_Path_Buffer, Ada_Path_Length, Ada_Prj_Include_File_Set,\n+\tAda_Prj_Objects_File_Set, Fill_Mapping_File.\n+\n 2009-04-24  Vincent Celier  <celier@adacore.com>\n \n \t* opt.ads (Unchecked_Shared_Lib_Imports): New Boolean flag."}, {"sha": "592d3028e2db8b689e212f94d2d04d3bfde3dd01", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=481f29eb5efa2a11682e4be46842f12ab51cb821", "patch": "@@ -2411,7 +2411,7 @@ begin\n \n                --  First make sure that the recorded file names are empty\n \n-               Prj.Env.Initialize;\n+               Prj.Env.Initialize (Project_Tree);\n \n                Prj.Env.Set_Ada_Paths\n                  (Project, Project_Tree, Including_Libraries => False);"}, {"sha": "e833d035aa0dc7c64214f637bb8b87bc725e50ad", "filename": "gcc/ada/prj-env.adb", "status": "modified", "additions": 89, "deletions": 85, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2Fprj-env.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2Fprj-env.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.adb?ref=481f29eb5efa2a11682e4be46842f12ab51cb821", "patch": "@@ -34,31 +34,7 @@ with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n \n package body Prj.Env is\n \n-   Current_Source_Path_File : Path_Name_Type := No_Path;\n-   --  Current value of project source path file env var.\n-   --  Used to avoid setting the env var to the same value.\n-\n-   Current_Object_Path_File : Path_Name_Type := No_Path;\n-   --  Current value of project object path file env var.\n-   --  Used to avoid setting the env var to the same value.\n-\n-   Ada_Path_Buffer : String_Access := new String (1 .. 1024);\n-   --  A buffer where values for ADA_INCLUDE_PATH\n-   --  and ADA_OBJECTS_PATH are stored.\n-\n-   Ada_Path_Length : Natural := 0;\n-   --  Index of the last valid character in Ada_Path_Buffer\n-\n-   Ada_Prj_Include_File_Set : Boolean := False;\n-   Ada_Prj_Objects_File_Set : Boolean := False;\n-   --  These flags are set to True when the corresponding environment variables\n-   --  are set and are used to give these environment variables an empty string\n-   --  value at the end of the program. This has no practical effect on most\n-   --  platforms, except on VMS where the logical names are deassigned, thus\n-   --  avoiding the pollution of the environment of the caller.\n-\n    Default_Naming    : constant Naming_Id := Naming_Table.First;\n-   Fill_Mapping_File : Boolean := True;\n \n    package Project_Boolean_Htable is new Simple_HTable\n      (Header_Num => Header_Num,\n@@ -80,7 +56,7 @@ package body Prj.Env is\n    --  Add to Ada_Path_Buffer all the source directories in string list\n    --  Source_Dirs, if any. Increment Ada_Path_Length.\n \n-   procedure Add_To_Path (Dir : String);\n+   procedure Add_To_Path (Dir : String; In_Tree : Project_Tree_Ref);\n    --  If Dir is not already in the global variable Ada_Path_Buffer, add it.\n    --  Increment Ada_Path_Length.\n    --  If Ada_Path_Length /= 0, prepend a Path_Separator character to\n@@ -170,7 +146,7 @@ package body Prj.Env is\n       if\n         In_Tree.Projects.Table (Project).Ada_Include_Path = null\n       then\n-         Ada_Path_Length := 0;\n+         In_Tree.Private_Part.Ada_Path_Length := 0;\n \n          for Index in Project_Table.First ..\n                       Project_Table.Last (In_Tree.Projects)\n@@ -180,7 +156,9 @@ package body Prj.Env is\n \n          Add (Project);\n          In_Tree.Projects.Table (Project).Ada_Include_Path :=\n-           new String'(Ada_Path_Buffer (1 .. Ada_Path_Length));\n+           new String'\n+             (In_Tree.Private_Part.Ada_Path_Buffer\n+                  (1 .. In_Tree.Private_Part.Ada_Path_Length));\n       end if;\n \n       return In_Tree.Projects.Table (Project).Ada_Include_Path;\n@@ -199,10 +177,12 @@ package body Prj.Env is\n       if Recursive then\n          return Ada_Include_Path (Project, In_Tree).all;\n       else\n-         Ada_Path_Length := 0;\n+         In_Tree.Private_Part.Ada_Path_Length := 0;\n          Add_To_Path\n            (In_Tree.Projects.Table (Project).Source_Dirs, In_Tree);\n-         return Ada_Path_Buffer (1 .. Ada_Path_Length);\n+         return\n+           In_Tree.Private_Part.Ada_Path_Buffer\n+             (1 .. In_Tree.Private_Part.Ada_Path_Length);\n       end if;\n    end Ada_Include_Path;\n \n@@ -258,17 +238,20 @@ package body Prj.Env is\n                          Contains_ALI_Files (Data.Library_ALI_Dir.Name)\n                      then\n                         Add_To_Path\n-                          (Get_Name_String (Data.Library_ALI_Dir.Name));\n+                          (Get_Name_String (Data.Library_ALI_Dir.Name),\n+                           In_Tree);\n                      else\n                         Add_To_Path\n-                          (Get_Name_String (Data.Object_Directory.Name));\n+                          (Get_Name_String (Data.Object_Directory.Name),\n+                           In_Tree);\n                      end if;\n \n                   else\n                      --  For a non library project, add the object directory\n \n                      Add_To_Path\n-                       (Get_Name_String (Data.Object_Directory.Name));\n+                       (Get_Name_String (Data.Object_Directory.Name),\n+                        In_Tree);\n                   end if;\n                end if;\n \n@@ -299,7 +282,7 @@ package body Prj.Env is\n       if\n         In_Tree.Projects.Table (Project).Ada_Objects_Path = null\n       then\n-         Ada_Path_Length := 0;\n+         In_Tree.Private_Part.Ada_Path_Length := 0;\n \n          for Index in Project_Table.First ..\n                       Project_Table.Last (In_Tree.Projects)\n@@ -309,7 +292,9 @@ package body Prj.Env is\n \n          Add (Project);\n          In_Tree.Projects.Table (Project).Ada_Objects_Path :=\n-           new String'(Ada_Path_Buffer (1 .. Ada_Path_Length));\n+           new String'\n+             (In_Tree.Private_Part.Ada_Path_Buffer\n+                  (1 .. In_Tree.Private_Part.Ada_Path_Length));\n       end if;\n \n       return In_Tree.Projects.Table (Project).Ada_Objects_Path;\n@@ -368,12 +353,12 @@ package body Prj.Env is\n    begin\n       while Current /= Nil_String loop\n          Source_Dir := In_Tree.String_Elements.Table (Current);\n-         Add_To_Path (Get_Name_String (Source_Dir.Display_Value));\n+         Add_To_Path (Get_Name_String (Source_Dir.Display_Value), In_Tree);\n          Current := Source_Dir.Next;\n       end loop;\n    end Add_To_Path;\n \n-   procedure Add_To_Path (Dir : String) is\n+   procedure Add_To_Path (Dir : String; In_Tree : Project_Tree_Ref) is\n       Len        : Natural;\n       New_Buffer : String_Access;\n       Min_Len    : Natural;\n@@ -411,16 +396,19 @@ package body Prj.Env is\n    --  Start of processing for Add_To_Path\n \n    begin\n-      if Is_Present (Ada_Path_Buffer (1 .. Ada_Path_Length), Dir) then\n+      if Is_Present (In_Tree.Private_Part.Ada_Path_Buffer\n+                       (1 .. In_Tree.Private_Part.Ada_Path_Length),\n+                     Dir)\n+      then\n \n          --  Dir is already in the path, nothing to do\n \n          return;\n       end if;\n \n-      Min_Len := Ada_Path_Length + Dir'Length;\n+      Min_Len := In_Tree.Private_Part.Ada_Path_Length + Dir'Length;\n \n-      if Ada_Path_Length > 0 then\n+      if In_Tree.Private_Part.Ada_Path_Length > 0 then\n \n          --  Add 1 for the Path_Separator character\n \n@@ -429,7 +417,7 @@ package body Prj.Env is\n \n       --  If Ada_Path_Buffer is too small, increase it\n \n-      Len := Ada_Path_Buffer'Last;\n+      Len := In_Tree.Private_Part.Ada_Path_Buffer'Last;\n \n       if Len < Min_Len then\n          loop\n@@ -438,20 +426,25 @@ package body Prj.Env is\n          end loop;\n \n          New_Buffer := new String (1 .. Len);\n-         New_Buffer (1 .. Ada_Path_Length) :=\n-           Ada_Path_Buffer (1 .. Ada_Path_Length);\n-         Free (Ada_Path_Buffer);\n-         Ada_Path_Buffer := New_Buffer;\n+         New_Buffer (1 .. In_Tree.Private_Part.Ada_Path_Length) :=\n+           In_Tree.Private_Part.Ada_Path_Buffer\n+             (1 .. In_Tree.Private_Part.Ada_Path_Length);\n+         Free (In_Tree.Private_Part.Ada_Path_Buffer);\n+         In_Tree.Private_Part.Ada_Path_Buffer := New_Buffer;\n       end if;\n \n-      if Ada_Path_Length > 0 then\n-         Ada_Path_Length := Ada_Path_Length + 1;\n-         Ada_Path_Buffer (Ada_Path_Length) := Path_Separator;\n+      if In_Tree.Private_Part.Ada_Path_Length > 0 then\n+         In_Tree.Private_Part.Ada_Path_Length :=\n+           In_Tree.Private_Part.Ada_Path_Length + 1;\n+         In_Tree.Private_Part.Ada_Path_Buffer\n+           (In_Tree.Private_Part.Ada_Path_Length) := Path_Separator;\n       end if;\n \n-      Ada_Path_Buffer\n-        (Ada_Path_Length + 1 .. Ada_Path_Length + Dir'Length) := Dir;\n-      Ada_Path_Length := Ada_Path_Length + Dir'Length;\n+      In_Tree.Private_Part.Ada_Path_Buffer\n+        (In_Tree.Private_Part.Ada_Path_Length + 1 ..\n+           In_Tree.Private_Part.Ada_Path_Length + Dir'Length) := Dir;\n+      In_Tree.Private_Part.Ada_Path_Length :=\n+        In_Tree.Private_Part.Ada_Path_Length + Dir'Length;\n    end Add_To_Path;\n \n    ------------------------\n@@ -1101,7 +1094,7 @@ package body Prj.Env is\n       end if;\n \n       if Language = No_Name then\n-         if Fill_Mapping_File then\n+         if In_Tree.Private_Part.Fill_Mapping_File then\n             for Unit in 1 .. Unit_Table.Last (In_Tree.Units) loop\n                The_Unit_Data := In_Tree.Units.Table (Unit);\n \n@@ -1142,9 +1135,9 @@ package body Prj.Env is\n                   exit when Source = No_Source;\n \n                   if Source.Language.Name = Language\n-                      and then not Source.Locally_Removed\n-                      and then Source.Replaced_By = No_Source\n-                      and then Source.Path.Name /= No_Path\n+                    and then not Source.Locally_Removed\n+                    and then Source.Replaced_By = No_Source\n+                    and then Source.Path.Name /= No_Path\n                   then\n                      if Source.Unit /= No_Name then\n                         Get_Name_String (Source.Unit);\n@@ -1180,10 +1173,12 @@ package body Prj.Env is\n       GNAT.OS_Lib.Close (File, Status);\n \n       if not Status then\n-         Prj.Com.Fail (\"disk full, could not write mapping file\");\n+\n          --  We were able to create the temporary file, so there is no problem\n          --  of protection. However, we are not able to close it, so there must\n          --  be a capacity problem that we express using \"disk full\".\n+\n+         Prj.Com.Fail (\"disk full, could not write mapping file\");\n       end if;\n    end Create_Mapping_File;\n \n@@ -1237,14 +1232,14 @@ package body Prj.Env is\n       --  the empty string. On VMS, this has the effect of deassigning\n       --  the logical names.\n \n-      if Ada_Prj_Include_File_Set then\n+      if In_Tree.Private_Part.Ada_Prj_Include_File_Set then\n          Setenv (Project_Include_Path_File, \"\");\n-         Ada_Prj_Include_File_Set := False;\n+         In_Tree.Private_Part.Ada_Prj_Include_File_Set := False;\n       end if;\n \n-      if Ada_Prj_Objects_File_Set then\n+      if In_Tree.Private_Part.Ada_Prj_Objects_File_Set then\n          Setenv (Project_Objects_Path_File, \"\");\n-         Ada_Prj_Objects_File_Set := False;\n+         In_Tree.Private_Part.Ada_Prj_Objects_File_Set := False;\n       end if;\n    end Delete_All_Path_Files;\n \n@@ -1483,6 +1478,7 @@ package body Prj.Env is\n       procedure Recurse (Prj : Project_Id) is\n          Data : Project_Data renames In_Tree.Projects.Table (Prj);\n          List : Project_List := Data.Imported_Projects;\n+\n       begin\n          if not Get (Seen, Prj) then\n             Set (Seen, Prj, True);\n@@ -1504,6 +1500,8 @@ package body Prj.Env is\n          end if;\n       end Recurse;\n \n+   --  Start of processing for For_All_Imported_Projects\n+\n    begin\n       Recurse (Project);\n       Reset (Seen);\n@@ -1534,6 +1532,9 @@ package body Prj.Env is\n       end For_Project;\n \n       procedure Get_Object_Dirs is new For_All_Imported_Projects (For_Project);\n+\n+   --  Start of processing for For_All_Object_Dirs\n+\n    begin\n       Get_Object_Dirs (Project, In_Tree);\n    end For_All_Object_Dirs;\n@@ -1557,6 +1558,7 @@ package body Prj.Env is\n          Data       : Project_Data renames In_Tree.Projects.Table (Prj);\n          Current    : String_List_Id := Data.Source_Dirs;\n          The_String : String_Element;\n+\n       begin\n          --  If there are Ada sources, call action with the name of every\n          --  source directory.\n@@ -1571,6 +1573,9 @@ package body Prj.Env is\n       end For_Project;\n \n       procedure Get_Source_Dirs is new For_All_Imported_Projects (For_Project);\n+\n+   --  Start of processing for For_All_Source_Dirs\n+\n    begin\n       Get_Source_Dirs (Project, In_Tree);\n    end For_All_Source_Dirs;\n@@ -1666,11 +1671,11 @@ package body Prj.Env is\n    -- Initialize --\n    ----------------\n \n-   procedure Initialize is\n+   procedure Initialize (In_Tree : Project_Tree_Ref) is\n    begin\n-      Fill_Mapping_File := True;\n-      Current_Source_Path_File := No_Path;\n-      Current_Object_Path_File := No_Path;\n+      In_Tree.Private_Part.Fill_Mapping_File := True;\n+      In_Tree.Private_Part.Current_Source_Path_File := No_Path;\n+      In_Tree.Private_Part.Current_Object_Path_File := No_Path;\n    end Initialize;\n \n    -------------------\n@@ -2089,43 +2094,43 @@ package body Prj.Env is\n       --  Set the env vars, if they need to be changed, and set the\n       --  corresponding flags.\n \n-      if Current_Source_Path_File /=\n+      if In_Tree.Private_Part.Current_Source_Path_File /=\n            In_Tree.Projects.Table (Project).Include_Path_File\n       then\n-         Current_Source_Path_File :=\n+         In_Tree.Private_Part.Current_Source_Path_File :=\n            In_Tree.Projects.Table (Project).Include_Path_File;\n          Set_Path_File_Var\n            (Project_Include_Path_File,\n-            Get_Name_String (Current_Source_Path_File));\n-         Ada_Prj_Include_File_Set := True;\n+            Get_Name_String (In_Tree.Private_Part.Current_Source_Path_File));\n+         In_Tree.Private_Part.Ada_Prj_Include_File_Set := True;\n       end if;\n \n       if Including_Libraries then\n-         if Current_Object_Path_File\n-           /= In_Tree.Projects.Table\n-                (Project).Objects_Path_File_With_Libs\n+         if In_Tree.Private_Part.Current_Object_Path_File /=\n+            In_Tree.Projects.Table (Project).Objects_Path_File_With_Libs\n          then\n-            Current_Object_Path_File :=\n+            In_Tree.Private_Part.Current_Object_Path_File :=\n               In_Tree.Projects.Table\n                 (Project).Objects_Path_File_With_Libs;\n             Set_Path_File_Var\n               (Project_Objects_Path_File,\n-               Get_Name_String (Current_Object_Path_File));\n-            Ada_Prj_Objects_File_Set := True;\n+               Get_Name_String\n+                 (In_Tree.Private_Part.Current_Object_Path_File));\n+            In_Tree.Private_Part.Ada_Prj_Objects_File_Set := True;\n          end if;\n \n       else\n-         if Current_Object_Path_File /=\n-           In_Tree.Projects.Table\n-             (Project).Objects_Path_File_Without_Libs\n+         if In_Tree.Private_Part.Current_Object_Path_File /=\n+            In_Tree.Projects.Table (Project).Objects_Path_File_Without_Libs\n          then\n-            Current_Object_Path_File :=\n+            In_Tree.Private_Part.Current_Object_Path_File :=\n               In_Tree.Projects.Table\n                 (Project).Objects_Path_File_Without_Libs;\n             Set_Path_File_Var\n               (Project_Objects_Path_File,\n-               Get_Name_String (Current_Object_Path_File));\n-            Ada_Prj_Objects_File_Set := True;\n+               Get_Name_String\n+                 (In_Tree.Private_Part.Current_Object_Path_File));\n+            In_Tree.Private_Part.Ada_Prj_Objects_File_Set := True;\n          end if;\n       end if;\n    end Set_Ada_Paths;\n@@ -2134,9 +2139,11 @@ package body Prj.Env is\n    -- Set_Mapping_File_Initial_State_To_Empty --\n    ---------------------------------------------\n \n-   procedure Set_Mapping_File_Initial_State_To_Empty is\n+   procedure Set_Mapping_File_Initial_State_To_Empty\n+     (In_Tree : Project_Tree_Ref)\n+   is\n    begin\n-      Fill_Mapping_File := False;\n+      In_Tree.Private_Part.Fill_Mapping_File := False;\n    end Set_Mapping_File_Initial_State_To_Empty;\n \n    -----------------------\n@@ -2145,7 +2152,6 @@ package body Prj.Env is\n \n    procedure Set_Path_File_Var (Name : String; Value : String) is\n       Host_Spec : String_Access := To_Host_File_Spec (Value);\n-\n    begin\n       if Host_Spec = null then\n          Prj.Com.Fail\n@@ -2167,9 +2173,7 @@ package body Prj.Env is\n       Result : Project_Id := Project;\n \n    begin\n-      while In_Tree.Projects.Table (Result).Extended_By /=\n-        No_Project\n-      loop\n+      while In_Tree.Projects.Table (Result).Extended_By /= No_Project loop\n          Result := In_Tree.Projects.Table (Result).Extended_By;\n       end loop;\n "}, {"sha": "a558cf99ffe2306039677de8a540a7930727b5b0", "filename": "gcc/ada/prj-env.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2Fprj-env.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2Fprj-env.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-env.ads?ref=481f29eb5efa2a11682e4be46842f12ab51cb821", "patch": "@@ -28,9 +28,8 @@\n \n package Prj.Env is\n \n-   procedure Initialize;\n-   --  Called by Prj.Initialize to perform required initialization steps for\n-   --  this package.\n+   procedure Initialize (In_Tree : Project_Tree_Ref);\n+   --  Initialize global components relative to environment variables\n \n    procedure Print_Sources (In_Tree : Project_Tree_Ref);\n    --  Output the list of sources, after Project files have been scanned\n@@ -58,7 +57,8 @@ package Prj.Env is\n    --  for the specified project, and that is not information available in\n    --  buildgpr.adb.\n \n-   procedure Set_Mapping_File_Initial_State_To_Empty;\n+   procedure Set_Mapping_File_Initial_State_To_Empty\n+     (In_Tree : Project_Tree_Ref);\n    --  When creating a mapping file, create an empty map. This case occurs when\n    --  run time source files are found in the project files. This only applies\n    --  to the Ada_Only mode."}, {"sha": "14cdb0f3cd540cd5c98995a8288f72468b0c822a", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=481f29eb5efa2a11682e4be46842f12ab51cb821", "patch": "@@ -487,7 +487,8 @@ package body Prj.Nmsc is\n       Spec_Suffix     : File_Name_Type;\n       Casing          : Casing_Type;\n       Kind            : out Source_Kind;\n-      Unit            : out Name_Id);\n+      Unit            : out Name_Id;\n+      In_Tree         : Project_Tree_Ref);\n    --  Check whether the file matches the naming scheme. If it does,\n    --  compute its unit name. If Unit is set to No_Name on exit, none of the\n    --  other out parameters are relevant.\n@@ -723,14 +724,14 @@ package body Prj.Nmsc is\n       Id.Project             := Project;\n       Id.Language            := Lang_Id;\n       Id.Lang_Kind           := Lang_Kind;\n-      Id.Compiled            :=\n-        Lang_Id.Config.Compiler_Driver /= Empty_File_Name;\n+      Id.Compiled            := Lang_Id.Config.Compiler_Driver /=\n+                                                             Empty_File_Name;\n       Id.Kind                := Kind;\n       Id.Alternate_Languages := Alternate_Languages;\n       Id.Other_Part          := Other_Part;\n \n-      Id.Object_Exists := Config.Object_Generated;\n-      Id.Object_Linked := Config.Objects_Linked;\n+      Id.Object_Exists       := Config.Object_Generated;\n+      Id.Object_Linked       := Config.Objects_Linked;\n \n       if Other_Part /= No_Source then\n          Other_Part.Other_Part := Id;\n@@ -906,9 +907,10 @@ package body Prj.Nmsc is\n             begin\n                Language := Data.Languages;\n                while Language /= No_Language_Index loop\n+\n                   --  If there are no sources for this language, check whether\n                   --  there are sources for which this is an alternate\n-                  --  language\n+                  --  language.\n \n                   if Language.First_Source = No_Source then\n                      Iter := For_Each_Source (In_Tree => In_Tree,\n@@ -2515,11 +2517,11 @@ package body Prj.Nmsc is\n                         Data.Decl.Attributes,\n                         In_Tree);\n \n-      List    : String_List_Id;\n-      Element : String_Element;\n-      Name    : File_Name_Type;\n-      Iter    : Source_Iterator;\n-      Source   : Source_Id;\n+      List      : String_List_Id;\n+      Element   : String_Element;\n+      Name      : File_Name_Type;\n+      Iter      : Source_Iterator;\n+      Source    : Source_Id;\n       Project_2 : Project_Id;\n \n    begin\n@@ -2855,8 +2857,8 @@ package body Prj.Nmsc is\n       -----------------------------------\n \n       procedure Process_Exceptions_File_Based\n-        (Lang_Id        : Language_Ptr;\n-         Kind           : Source_Kind)\n+        (Lang_Id : Language_Ptr;\n+         Kind    : Source_Kind)\n       is\n          Lang           : constant Name_Id := Lang_Id.Name;\n          Exceptions     : Array_Element_Id;\n@@ -2949,8 +2951,8 @@ package body Prj.Nmsc is\n       -----------------------------------\n \n       procedure Process_Exceptions_Unit_Based\n-        (Lang_Id        : Language_Ptr;\n-         Kind           : Source_Kind)\n+        (Lang_Id : Language_Ptr;\n+         Kind    : Source_Kind)\n       is\n          Lang              : constant Name_Id := Lang_Id.Name;\n          Exceptions        : Array_Element_Id;\n@@ -6419,7 +6421,8 @@ package body Prj.Nmsc is\n       Spec_Suffix     : File_Name_Type;\n       Casing          : Casing_Type;\n       Kind            : out Source_Kind;\n-      Unit            : out Name_Id)\n+      Unit            : out Name_Id;\n+      In_Tree         : Project_Tree_Ref)\n    is\n       Filename : constant String := Get_Name_String (File_Name);\n       Last     : Integer := Filename'Last;\n@@ -6575,7 +6578,7 @@ package body Prj.Nmsc is\n                   --  If it is potentially a run time source, disable filling\n                   --  of the mapping file to avoid warnings.\n \n-                  Set_Mapping_File_Initial_State_To_Empty;\n+                  Set_Mapping_File_Initial_State_To_Empty (In_Tree);\n                end if;\n             end if;\n          end;\n@@ -6684,7 +6687,8 @@ package body Prj.Nmsc is\n             Spec_Suffix     => Spec_Suffix_Id_Of (In_Tree, Name_Ada, Naming),\n             Casing          => Naming.Casing,\n             Kind            => Kind,\n-            Unit            => Unit_Name);\n+            Unit            => Unit_Name,\n+            In_Tree         => In_Tree);\n \n          case Kind is\n             when Spec       => Unit_Kind := Specification;\n@@ -7551,7 +7555,8 @@ package body Prj.Nmsc is\n                      Spec_Suffix     => Config.Naming_Data.Spec_Suffix,\n                      Casing          => Config.Naming_Data.Casing,\n                      Kind            => Kind,\n-                     Unit            => Unit);\n+                     Unit            => Unit,\n+                     In_Tree         => In_Tree);\n \n                   if Unit /= No_Name then\n                      Language    := Tmp_Lang;"}, {"sha": "e76ee8e55ddc55756e6f5ffe4e08c2d09d13b9b0", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=481f29eb5efa2a11682e4be46842f12ab51cb821", "patch": "@@ -29,7 +29,6 @@ with Ada.Unchecked_Deallocation;\n with Debug;\n with Osint;    use Osint;\n with Prj.Attr;\n-with Prj.Env;\n with Prj.Err;  use Prj.Err;\n with Snames;   use Snames;\n with Table;\n@@ -408,6 +407,7 @@ package body Prj is\n    procedure Language_Changed (Iter : in out Source_Iterator) is\n    begin\n       Iter.Current  := No_Source;\n+\n       if Iter.Language_Name /= No_Name then\n          while Iter.Language /= null\n            and then Iter.Language.Name /= Iter.Language_Name\n@@ -421,16 +421,20 @@ package body Prj is\n       if Iter.Language = No_Language_Index then\n          if Iter.All_Projects then\n             Iter.Project := Iter.Project + 1;\n+\n             if Iter.Project > Project_Table.Last (Iter.In_Tree.Projects) then\n                Iter.Project := No_Project;\n             else\n                Project_Changed (Iter);\n             end if;\n+\n          else\n             Iter.Project := No_Project;\n          end if;\n+\n       else\n          Iter.Current := Iter.Language.First_Source;\n+\n          if Iter.Current = No_Source then\n             Iter.Language := Iter.Language.Next;\n             Language_Changed (Iter);\n@@ -610,7 +614,6 @@ package body Prj is\n          Name_Buffer (1) := '/';\n          Slash_Id := Name_Find;\n \n-         Prj.Env.Initialize;\n          Prj.Attr.Initialize;\n          Set_Name_Table_Byte (Name_Project,  Token_Type'Pos (Tok_Project));\n          Set_Name_Table_Byte (Name_Extends,  Token_Type'Pos (Tok_Extends));\n@@ -630,8 +633,10 @@ package body Prj is\n      (Data          : Project_Data;\n       Language_Name : Name_Id) return Boolean\n    is\n-      Lang_Ind  : Language_Ptr := Data.Languages;\n+      Lang_Ind : Language_Ptr;\n+\n    begin\n+      Lang_Ind := Data.Languages;\n       while Lang_Ind /= No_Language_Index loop\n          if Lang_Ind.Name = Language_Name then\n             return True;\n@@ -673,8 +678,7 @@ package body Prj is\n \n    function Object_Name\n      (Source_File_Name   : File_Name_Type;\n-      Object_File_Suffix : Name_Id := No_Name)\n-      return File_Name_Type\n+      Object_File_Suffix : Name_Id := No_Name) return File_Name_Type\n    is\n    begin\n       if Object_File_Suffix = No_Name then\n@@ -706,9 +710,9 @@ package body Prj is\n       Default_Body_Suffix : File_Name_Type;\n       In_Tree             : Project_Tree_Ref)\n    is\n-      Lang : Name_Id;\n-      Suffix : Array_Element_Id;\n-      Found : Boolean := False;\n+      Lang    : Name_Id;\n+      Suffix  : Array_Element_Id;\n+      Found   : Boolean := False;\n       Element : Array_Element;\n \n    begin\n@@ -853,6 +857,7 @@ package body Prj is\n    procedure Free (Tree : in out Project_Tree_Ref) is\n       procedure Unchecked_Free is new Ada.Unchecked_Deallocation\n         (Project_Tree_Data, Project_Tree_Ref);\n+\n    begin\n       if Tree /= null then\n          Name_List_Table.Free (Tree.Name_Lists);\n@@ -898,8 +903,6 @@ package body Prj is\n \n    procedure Reset (Tree : Project_Tree_Ref) is\n    begin\n-      Prj.Env.Initialize;\n-\n       --  Visible tables\n \n       Name_List_Table.Init          (Tree.Name_Lists);\n@@ -945,6 +948,13 @@ package body Prj is\n             In_Tree             => Tree);\n          Tree.Private_Part.Default_Naming.Separate_Suffix :=\n            Default_Ada_Body_Suffix;\n+\n+         Tree.Private_Part.Current_Source_Path_File := No_Path;\n+         Tree.Private_Part.Current_Object_Path_File := No_Path;\n+         Tree.Private_Part.Ada_Path_Length := 0;\n+         Tree.Private_Part.Ada_Prj_Include_File_Set := False;\n+         Tree.Private_Part.Ada_Prj_Objects_File_Set := False;\n+         Tree.Private_Part.Fill_Mapping_File := True;\n       end if;\n    end Reset;\n "}, {"sha": "fb5cc0d5f908ff2d1033e11ded8fc7d3024e5f2b", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481f29eb5efa2a11682e4be46842f12ab51cb821/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=481f29eb5efa2a11682e4be46842f12ab51cb821", "patch": "@@ -1563,19 +1563,19 @@ private\n    --  Initialize.\n \n    type Source_Iterator is record\n-      In_Tree       : Project_Tree_Ref;\n+      In_Tree : Project_Tree_Ref;\n \n-      Project       : Project_Id;\n-      All_Projects  : Boolean;\n+      Project      : Project_Id;\n+      All_Projects : Boolean;\n       --  Current project and whether we should move on to the next\n \n-      Language      : Language_Ptr;\n+      Language : Language_Ptr;\n       --  Current language processed\n \n       Language_Name : Name_Id;\n       --  Only sources of this language will be returned (or all if No_Name)\n \n-      Current       : Source_Id;\n+      Current : Source_Id;\n    end record;\n \n    procedure Add_To_Buffer\n@@ -1625,6 +1625,33 @@ private\n       Source_Paths   : Source_Path_Table.Instance;\n       Object_Paths   : Object_Path_Table.Instance;\n       Default_Naming : Naming_Data;\n+\n+      Current_Source_Path_File : Path_Name_Type := No_Path;\n+      --  Current value of project source path file env var. Used to avoid\n+      --  setting the env var to the same value.\n+\n+      Current_Object_Path_File : Path_Name_Type := No_Path;\n+      --  Current value of project object path file env var. Used to avoid\n+      --  setting the env var to the same value.\n+\n+      Ada_Path_Buffer : String_Access := new String (1 .. 1024);\n+      --  A buffer where values for ADA_INCLUDE_PATH and ADA_OBJECTS_PATH are\n+      --  stored.\n+\n+      Ada_Path_Length : Natural := 0;\n+      --  Index of the last valid character in Ada_Path_Buffer\n+\n+      Ada_Prj_Include_File_Set : Boolean := False;\n+      Ada_Prj_Objects_File_Set : Boolean := False;\n+      --  These flags are set to True when the corresponding environment\n+      --  variables are set and are used to give these environment variables an\n+      --  empty string value at the end of the program. This has no practical\n+      --  effect on most platforms, except on VMS where the logical names are\n+      --  deassigned, thus avoiding the pollution of the environment of the\n+      --  caller.\n+\n+      Fill_Mapping_File : Boolean := True;\n+\n    end record;\n    --  Type to represent the part of a project tree which is private to the\n    --  Project Manager."}]}