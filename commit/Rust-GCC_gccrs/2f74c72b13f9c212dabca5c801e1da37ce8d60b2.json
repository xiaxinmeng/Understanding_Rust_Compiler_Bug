{"sha": "2f74c72b13f9c212dabca5c801e1da37ce8d60b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3NGM3MmIxM2Y5YzIxMmRhYmNhNWM4MDFlMWRhMzdjZThkNjBiMg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2015-12-04T17:21:49Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2015-12-04T17:21:49Z"}, "message": "rs6000: Implement cstore for signed Pmode register compares\n\nThis implements cstore for the last case we do not yet handle, using\nthe superopt algo from the venerable CWG.  The only integer cases we\ndo still not handle after this are for -m32 -mpowerpc64.\n\n\n\t* (cstore<mode>4_signed): New expander.\n\t(cstore<mode>4): Call it.\n\nFrom-SVN: r231284", "tree": {"sha": "f880ea6cb21ff01c9f5ff51840129c3bc3eb99f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f880ea6cb21ff01c9f5ff51840129c3bc3eb99f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f74c72b13f9c212dabca5c801e1da37ce8d60b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f74c72b13f9c212dabca5c801e1da37ce8d60b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f74c72b13f9c212dabca5c801e1da37ce8d60b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f74c72b13f9c212dabca5c801e1da37ce8d60b2/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c24689633f109abfc2b9b6c62f327c805c49fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c24689633f109abfc2b9b6c62f327c805c49fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c24689633f109abfc2b9b6c62f327c805c49fa4"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "1f108e7339a4068be4bc56421161560963d869d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f74c72b13f9c212dabca5c801e1da37ce8d60b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f74c72b13f9c212dabca5c801e1da37ce8d60b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f74c72b13f9c212dabca5c801e1da37ce8d60b2", "patch": "@@ -1,3 +1,8 @@\n+2015-12-04  Segher Boessenkool  <segher&kernel.crashing.org>\n+\n+\t* (cstore<mode>4_signed): New expander.\n+\t(cstore<mode>4): Call it.\n+\n 2015-12-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree-tailcall.c (find_tail_calls): Ignore GIMPLE_NOPs."}, {"sha": "f346cba8e08de13f9ef6151044d1e4a31f142731", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f74c72b13f9c212dabca5c801e1da37ce8d60b2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f74c72b13f9c212dabca5c801e1da37ce8d60b2/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2f74c72b13f9c212dabca5c801e1da37ce8d60b2", "patch": "@@ -10525,6 +10525,47 @@\n   DONE;\n }\")\n \n+(define_expand \"cstore<mode>4_signed\"\n+  [(use (match_operator 1 \"signed_comparison_operator\"\n+         [(match_operand:P 2 \"gpc_reg_operand\")\n+          (match_operand:P 3 \"gpc_reg_operand\")]))\n+   (clobber (match_operand:P 0 \"gpc_reg_operand\"))]\n+  \"\"\n+{\n+  enum rtx_code cond_code = GET_CODE (operands[1]);\n+\n+  rtx op0 = operands[0];\n+  rtx op1 = operands[2];\n+  rtx op2 = operands[3];\n+\n+  if (cond_code == GE || cond_code == LT)\n+    {\n+      cond_code = swap_condition (cond_code);\n+      std::swap (op1, op2);\n+    }\n+\n+  rtx tmp1 = gen_reg_rtx (<MODE>mode);\n+  rtx tmp2 = gen_reg_rtx (<MODE>mode);\n+  rtx tmp3 = gen_reg_rtx (<MODE>mode);\n+\n+  int sh = GET_MODE_BITSIZE (<MODE>mode) - 1;\n+  emit_insn (gen_lshr<mode>3 (tmp1, op1, GEN_INT (sh)));\n+  emit_insn (gen_ashr<mode>3 (tmp2, op2, GEN_INT (sh)));\n+\n+  emit_insn (gen_subf<mode>3_carry (tmp3, op1, op2));\n+\n+  if (cond_code == LE)\n+    emit_insn (gen_add<mode>3_carry_in (op0, tmp1, tmp2));\n+  else\n+    {\n+      rtx tmp4 = gen_reg_rtx (<MODE>mode);\n+      emit_insn (gen_add<mode>3_carry_in (tmp4, tmp1, tmp2));\n+      emit_insn (gen_xor<mode>3 (op0, tmp4, const1_rtx));\n+    }\n+\n+  DONE;\n+})\n+\n (define_expand \"cstore<mode>4_unsigned\"\n   [(use (match_operator 1 \"unsigned_comparison_operator\"\n          [(match_operand:P 2 \"gpc_reg_operand\" \"\")\n@@ -10751,6 +10792,12 @@\n     emit_insn (gen_cstore<mode>4_unsigned_imm (operands[0], operands[1],\n \t\t\t\t\t       operands[2], operands[3]));\n \n+  /* We also do not want to use mfcr for signed comparisons.  */\n+  else if (<MODE>mode == Pmode\n+\t   && signed_comparison_operator (operands[1], VOIDmode))\n+    emit_insn (gen_cstore<mode>4_signed (operands[0], operands[1],\n+\t\t\t\t\t operands[2], operands[3]));\n+\n   /* Everything else, use the mfcr brute force.  */\n   else\n     rs6000_emit_sCOND (<MODE>mode, operands);"}]}