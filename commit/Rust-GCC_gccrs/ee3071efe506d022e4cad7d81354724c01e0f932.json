{"sha": "ee3071efe506d022e4cad7d81354724c01e0f932", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUzMDcxZWZlNTA2ZDAyMmU0Y2FkN2Q4MTM1NDcyNGMwMWUwZjkzMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-08-01T14:33:46Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-08-01T14:33:46Z"}, "message": "parser.c (cp_parser_init_declarator, [...]): Reformat.\n\n\t* parser.c (cp_parser_init_declarator,\n\tcp_paser_member_declaration): Reformat.\n\t* pt.c (lookup_template_class, type_unification_real, unify,\n\ttype_dependent_expression_p): Reformat.\n\nFrom-SVN: r70047", "tree": {"sha": "a8415f2d4a460ecebe76e1f6f9369922be90c7b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8415f2d4a460ecebe76e1f6f9369922be90c7b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee3071efe506d022e4cad7d81354724c01e0f932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3071efe506d022e4cad7d81354724c01e0f932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee3071efe506d022e4cad7d81354724c01e0f932", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee3071efe506d022e4cad7d81354724c01e0f932/comments", "author": null, "committer": null, "parents": [{"sha": "bf42e45b205e05a710de0e9fe0fc33e668fdb891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf42e45b205e05a710de0e9fe0fc33e668fdb891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf42e45b205e05a710de0e9fe0fc33e668fdb891"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "83b901e36dfe7deba46d9edb209b68e5598212fe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3071efe506d022e4cad7d81354724c01e0f932/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3071efe506d022e4cad7d81354724c01e0f932/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee3071efe506d022e4cad7d81354724c01e0f932", "patch": "@@ -1,5 +1,10 @@\n 2003-08-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* parser.c (cp_parser_init_declarator,\n+\tcp_paser_member_declaration): Reformat.\n+\t* pt.c (lookup_template_class, type_unification_real, unify,\n+\ttype_dependent_expression_p): Reformat.\n+\n \tPR c++/11295\n \t* cp-tree.h (tubst_flags_t): Add tf_stmt_expr_cmpd,\n \ttf_stmt_expr_body."}, {"sha": "63c81720caf94e992b57677714869250f8cd0798", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3071efe506d022e4cad7d81354724c01e0f932/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3071efe506d022e4cad7d81354724c01e0f932/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ee3071efe506d022e4cad7d81354724c01e0f932", "patch": "@@ -9268,8 +9268,7 @@ cp_parser_init_declarator (cp_parser* parser,\n   friend_p = cp_parser_friend_p (decl_specifiers);\n \n   /* Check that the number of template-parameter-lists is OK.  */\n-  if (!cp_parser_check_declarator_template_parameters (parser, \n-\t\t\t\t\t\t       declarator))\n+  if (!cp_parser_check_declarator_template_parameters (parser, declarator))\n     return error_mark_node;\n \n   /* Enter the newly declared entry in the symbol table.  If we're\n@@ -9284,11 +9283,8 @@ cp_parser_init_declarator (cp_parser* parser,\n \t\t\t\t       decl_specifiers);\n \t  have_extern_spec = false;\n \t}\n-      decl = start_decl (declarator,\n-\t\t\t decl_specifiers,\n-\t\t\t is_initialized,\n-\t\t\t attributes,\n-\t\t\t prefix_attributes);\n+      decl = start_decl (declarator, decl_specifiers,\n+\t\t\t is_initialized, attributes, prefix_attributes);\n     }\n \n   /* Enter the SCOPE.  That way unqualified names appearing in the\n@@ -11850,10 +11846,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t      else\n \t\t{\n \t\t  /* Create the declaration.  */\n-\t\t  decl = grokfield (declarator, \n-\t\t\t\t    decl_specifiers, \n-\t\t\t\t    initializer,\n-\t\t\t\t    asm_specification,\n+\t\t  decl = grokfield (declarator, decl_specifiers, \n+\t\t\t\t    initializer, asm_specification,\n \t\t\t\t    attributes);\n \t\t  /* Any initialization must have been from a\n \t\t     constant-expression.  */"}, {"sha": "ef6592a7e48201c55b8bd2d18fba15f38cabcd23", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee3071efe506d022e4cad7d81354724c01e0f932/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee3071efe506d022e4cad7d81354724c01e0f932/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ee3071efe506d022e4cad7d81354724c01e0f932", "patch": "@@ -4126,9 +4126,9 @@ lookup_template_class (tree d1,\n \t       i > 0 && t != NULL_TREE;\n \t       --i, t = TREE_CHAIN (t))\n \t    {\n-\t      tree a = coerce_template_parms (TREE_VALUE (t), arglist,\n-\t\t\t\t\t      template, complain,\n-\t\t\t\t\t      /*require_all_args=*/1);\n+\t      tree a = coerce_template_parms (TREE_VALUE (t),\n+\t\t\t\t\t      arglist, template,\n+\t                                      complain, /*require_all_args=*/1);\n \n \t      /* Don't process further if one of the levels fails.  */\n \t      if (a == error_mark_node)\n@@ -8786,9 +8786,7 @@ type_unification_real (tree tparms,\n   my_friendly_assert (TREE_CODE (tparms) == TREE_VEC, 289);\n   my_friendly_assert (xparms == NULL_TREE \n \t\t      || TREE_CODE (xparms) == TREE_LIST, 290);\n-  /* ARGS could be NULL.  */\n-  if (xargs)\n-    my_friendly_assert (TREE_CODE (xargs) == TREE_LIST, 291);\n+  my_friendly_assert (!xargs || TREE_CODE (xargs) == TREE_LIST, 291);\n   my_friendly_assert (ntparms > 0, 292);\n \n   switch (strict)\n@@ -9489,8 +9487,8 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t       template <class T, class Allocator = allocator> \n \t       class vector.  */\n \n-\t    if (coerce_template_parms (argtmplvec, parmvec, parmtmpl,\n-\t\t\t\t       tf_none, 1) == error_mark_node)\n+\t    if (coerce_template_parms (argtmplvec, parmvec, parmtmpl, 0, 1)\n+\t        == error_mark_node)\n \t      return 1;\n \t  \n \t    /* Deduce arguments T, i from TT<T> or TT<i>.  \n@@ -11638,8 +11636,8 @@ type_dependent_expression_p (tree expression)\n \texpression = BASELINK_FUNCTIONS (expression);\n       if (TREE_CODE (expression) == TEMPLATE_ID_EXPR)\n \t{\n-\t  if (any_dependent_template_arguments_p (TREE_OPERAND (expression, \n-\t\t\t\t\t\t\t\t1)))\n+\t  if (any_dependent_template_arguments_p\n+\t      (TREE_OPERAND (expression, 1)))\n \t    return true;\n \t  expression = TREE_OPERAND (expression, 0);\n \t}"}]}