{"sha": "ecc5644fa3bc7f37eada2a3e9c627cd1918922e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNjNTY0NGZhM2JjN2YzN2VhZGEyYTNlOWM2MjdjZDE5MTg5MjJlMA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-14T19:33:59Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-14T21:06:32Z"}, "message": "Limit new value calculations to first order effects.\n\nWhen utilzing poor values during propagation, we mostly care about values that\nwere undefined/processed directly used in calcualting the SSA_NAME being\nprocessed.  2nd level derivations of such poor values rarely affect the\ninital calculation.  Leave them to when they are directly encountered.\n\n\t* gimple-range-cache.cc (ranger_cache::ranger_cache): Adjust.\n\t(ranger_cache::enable_new_values): Set to specified value and\n\treturn the old value.\n\t(ranger_cache::disable_new_values): Delete.\n\t(ranger_cache::fill_block_cache): Disable non 1st order derived\n\tpoor values.\n\t* gimple-range-cache.h (ranger_cache): Adjust prototypes.\n\t* gimple-range.cc (gimple_ranger::range_of_expr): Adjust.", "tree": {"sha": "98111eb5fd9cdebca136300ce17bd8d2372efa68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98111eb5fd9cdebca136300ce17bd8d2372efa68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecc5644fa3bc7f37eada2a3e9c627cd1918922e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc5644fa3bc7f37eada2a3e9c627cd1918922e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc5644fa3bc7f37eada2a3e9c627cd1918922e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc5644fa3bc7f37eada2a3e9c627cd1918922e0/comments", "author": null, "committer": null, "parents": [{"sha": "c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c37b5ddcc88e0cc0f6a4ad609eda51021df0f6bb"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "d9a57c294df25ea61fd63a8734ae429f9eb4ceba", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc5644fa3bc7f37eada2a3e9c627cd1918922e0/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc5644fa3bc7f37eada2a3e9c627cd1918922e0/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=ecc5644fa3bc7f37eada2a3e9c627cd1918922e0", "patch": "@@ -727,7 +727,7 @@ ranger_cache::ranger_cache (gimple_ranger &q) : query (q)\n       if (bb)\n \tm_gori.exports (bb);\n     }\n-  enable_new_values ();\n+  enable_new_values (true);\n }\n \n ranger_cache::~ranger_cache ()\n@@ -748,21 +748,15 @@ ranger_cache::dump (FILE *f)\n   fprintf (f, \"\\n\");\n }\n \n-// Allow the cache to flag and query new values when propagation is forced\n-// to use an unknown value.\n+// Allow or disallow the cache to flag and query new values when propagation\n+// is forced to use an unknown value.  The previous state is returned.\n \n-void\n-ranger_cache::enable_new_values ()\n-{\n-  m_new_value_p = true;\n-}\n-\n-// Disable new value querying.\n-\n-void\n-ranger_cache::disable_new_values ()\n+bool\n+ranger_cache::enable_new_values (bool state)\n {\n-  m_new_value_p = false;\n+  bool ret = m_new_value_p;\n+  m_new_value_p = state;\n+  return ret;\n }\n \n // Dump the caches for basic block BB to file F.\n@@ -1343,7 +1337,12 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n \n \t  // Calculate a range at the exit from the block so the caches feeding\n \t  // this block will be filled, and we'll get a \"better\" value.\n+\t  // Disallow additonal \"poor values\" during this phase to avoid\n+\t  // iterations that are unlikely to be profitable for this name.\n+\t  // See PR 101014.\n+\t  bool state = enable_new_values (false);\n \t  query.range_on_exit (tmp, calc_bb, rec.calc);\n+\t  enable_new_values (state);\n \t  \n \t  // Then ask for NAME to be re-evaluated on outgoing edges and \n \t  // use any new values."}, {"sha": "1a2aaceb3ed842d648297a51247e46b6a745dde3", "filename": "gcc/gimple-range-cache.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc5644fa3bc7f37eada2a3e9c627cd1918922e0/gcc%2Fgimple-range-cache.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc5644fa3bc7f37eada2a3e9c627cd1918922e0/gcc%2Fgimple-range-cache.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.h?ref=ecc5644fa3bc7f37eada2a3e9c627cd1918922e0", "patch": "@@ -101,8 +101,7 @@ class ranger_cache : public range_query\n   bool get_non_stale_global_range (irange &r, tree name);\n   void set_global_range (tree name, const irange &r);\n \n-  void enable_new_values ();\n-  void disable_new_values ();\n+  bool enable_new_values (bool state);\n   non_null_ref m_non_null;\n   gori_compute m_gori;\n "}, {"sha": "481b89b2b80cfbe32d5367670a39113d113215ca", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc5644fa3bc7f37eada2a3e9c627cd1918922e0/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc5644fa3bc7f37eada2a3e9c627cd1918922e0/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=ecc5644fa3bc7f37eada2a3e9c627cd1918922e0", "patch": "@@ -1173,9 +1173,9 @@ gimple_ranger::range_of_expr (irange &r, tree expr, gimple *stmt)\n   // trigger new value calculations.  PR 100781.\n   if (is_gimple_debug (stmt))\n     {\n-      m_cache.disable_new_values ();\n+      bool state = m_cache.enable_new_values (false);\n       m_cache.range_of_expr (r, expr, stmt);\n-      m_cache.enable_new_values ();\n+      m_cache.enable_new_values (state);\n       return true;\n     }\n   basic_block bb = gimple_bb (stmt);"}]}