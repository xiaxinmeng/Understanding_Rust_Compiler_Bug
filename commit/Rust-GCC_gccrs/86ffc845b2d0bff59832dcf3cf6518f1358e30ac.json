{"sha": "86ffc845b2d0bff59832dcf3cf6518f1358e30ac", "node_id": "C_kwDOANBUbNoAKDg2ZmZjODQ1YjJkMGJmZjU5ODMyZGNmM2NmNjUxOGYxMzU4ZTMwYWM", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-10T15:59:26Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-10T16:03:18Z"}, "message": "AArch64: do not keep negated mask and inverse mask live at the same time\n\nThe following example:\n\nvoid f11(double * restrict z, double * restrict w, double * restrict x,\n\t double * restrict y, int n)\n{\n    for (int i = 0; i < n; i++) {\n        z[i] = (w[i] > 0) ? w[i] : y[i];\n    }\n}\n\nGenerates currently:\n\n        ptrue   p2.b, all\n        ld1d    z0.d, p0/z, [x1, x2, lsl 3]\n        fcmgt   p1.d, p2/z, z0.d, #0.0\n        bic     p3.b, p2/z, p0.b, p1.b\n        ld1d    z1.d, p3/z, [x3, x2, lsl 3]\n\nand after the previous patches generates:\n\n        ptrue   p3.b, all\n        ld1d    z0.d, p0/z, [x1, x2, lsl 3]\n        fcmgt   p1.d, p0/z, z0.d, #0.0\n        fcmgt   p2.d, p3/z, z0.d, #0.0\n        not     p1.b, p0/z, p1.b\n        ld1d    z1.d, p1/z, [x3, x2, lsl 3]\n\nwhere a duplicate comparison is performed for w[i] > 0.\n\nThis is because in the vectorizer we're emitting a comparison for both a and ~a\nwhere we just need to emit one of them and invert the other.  After this patch\nwe generate:\n\n        ld1d    z0.d, p0/z, [x1, x2, lsl 3]\n        fcmgt   p1.d, p0/z, z0.d, #0.0\n        mov     p2.b, p1.b\n        not     p1.b, p0/z, p1.b\n        ld1d    z1.d, p1/z, [x3, x2, lsl 3]\n\nIn order to perform the check I have to fully expand the NOT stmts when\nrecording them as the SSA names for the top level expressions differ but\ntheir arguments don't. e.g. in _31 = ~_34 the value of _34 differs but not\nthe operands in _34.\n\nBut we only do this when the operation is an ordered one because mixing\nordered and unordered expressions can lead to de-optimized code.\n\nNote: This patch series is working incrementally towards generating the most\n      efficient code for this and other loops in small steps. The mov is\n      created by postreload when it does a late CSE.\n\ngcc/ChangeLog:\n\n\t* tree-vectorizer.h (struct scalar_cond_masked_key): Add inverted_p.\n\t(default_hash_traits<scalar_conf_masked_key>): Likewise.\n\t* tree-vect-stmts.c (vectorizable_condition): Check if inverse of mask\n\tis live.\n\t* tree-vectorizer.c (scalar_cond_masked_key::get_cond_ops_from_tree):\n\tRegister mask inverses.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/sve/pred-not-gen-1.c: Update testcase.\n\t* gcc.target/aarch64/sve/pred-not-gen-2.c: Update testcase.\n\t* gcc.target/aarch64/sve/pred-not-gen-3.c: Update testcase.\n\t* gcc.target/aarch64/sve/pred-not-gen-4.c: Update testcase.", "tree": {"sha": "91fa2fc59feb6dbd0f95dfebe316595ce4d6f7b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91fa2fc59feb6dbd0f95dfebe316595ce4d6f7b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86ffc845b2d0bff59832dcf3cf6518f1358e30ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ffc845b2d0bff59832dcf3cf6518f1358e30ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ffc845b2d0bff59832dcf3cf6518f1358e30ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ed62c929c7c44627f41627e085e15d77b2e6ed4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ed62c929c7c44627f41627e085e15d77b2e6ed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ed62c929c7c44627f41627e085e15d77b2e6ed4"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "c9a8b82c48acb44a69185c29f2cf3aa8e17dd7b3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pred-not-gen-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-not-gen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-not-gen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-not-gen-1.c?ref=86ffc845b2d0bff59832dcf3cf6518f1358e30ac", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O3 --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n \n /*\n ** f10:\n@@ -21,3 +21,4 @@ void f10(double * restrict z, double * restrict w, double * restrict x, double *\n \n /* { dg-final { scan-assembler-not {\\tbic\\t} } } */\n /* { dg-final { scan-assembler-times {\\tnot\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.d, p[0-9]+/z, z[0-9]+\\.d, #0} 1 } } */"}, {"sha": "8d78f4763643ec03b0178f7bb04d30c7275ae9ad", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pred-not-gen-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-not-gen-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-not-gen-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-not-gen-2.c?ref=86ffc845b2d0bff59832dcf3cf6518f1358e30ac", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O3 --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n \n /*\n ** f11:\n@@ -21,3 +21,4 @@ void f11(double * restrict z, double * restrict w, double * restrict x, double *\n \n /* { dg-final { scan-assembler-not {\\tbic\\t} } } */\n /* { dg-final { scan-assembler-times {\\tnot\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmgt\\tp[0-9]+\\.d, p[0-9]+/z, z[0-9]+\\.d, #0.0} 1 } } */"}, {"sha": "38fbfef2b7af62aa56cf219e0d20aa085369a6cd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pred-not-gen-3.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-not-gen-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-not-gen-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-not-gen-3.c?ref=86ffc845b2d0bff59832dcf3cf6518f1358e30ac", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O3 --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n \n /*\n ** f12:\n@@ -19,3 +19,4 @@ void f12(int * restrict z, int * restrict w, int * restrict x, int * restrict y,\n \n /* { dg-final { scan-assembler-not {\\tbic\\t} } } */\n /* { dg-final { scan-assembler-not {\\tnot\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler-times {\\tcmple\\tp[0-9]+\\.s, p[0-9]+/z, z[0-9]+\\.s, #0} 1 } } */"}, {"sha": "0001dd3fc211f5fdd6b92294b3ef651d69410159", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pred-not-gen-4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-not-gen-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-not-gen-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpred-not-gen-4.c?ref=86ffc845b2d0bff59832dcf3cf6518f1358e30ac", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O3 --save-temps\" } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n \n #include <math.h>\n \n@@ -12,3 +12,4 @@ void f13(double * restrict z, double * restrict w, double * restrict x, double *\n \n /* { dg-final { scan-assembler-not {\\tbic\\t} } } */\n /* { dg-final { scan-assembler-times {\\tnot\\tp[0-9]+\\.b, p[0-9]+/z, p[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfcmuo\\tp[0-9]+\\.d, p[0-9]+/z, z[0-9]+\\.d, z[0-9]+\\.d} 1 } } */"}, {"sha": "2284ad069e4d521f4e0bd43d34181a258cd636ef", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=86ffc845b2d0bff59832dcf3cf6518f1358e30ac", "patch": "@@ -10344,13 +10344,30 @@ vectorizable_condition (vec_info *vinfo,\n \t  else\n \t    {\n \t      bool honor_nans = HONOR_NANS (TREE_TYPE (cond.op0));\n+\t      tree_code orig_code = cond.code;\n \t      cond.code = invert_tree_comparison (cond.code, honor_nans);\n \t      if (loop_vinfo->scalar_cond_masked_set.contains (cond))\n \t\t{\n \t\t  masks = &LOOP_VINFO_MASKS (loop_vinfo);\n \t\t  cond_code = cond.code;\n \t\t  swap_cond_operands = true;\n \t\t}\n+\t      else\n+\t\t{\n+\t\t  /* Try the inverse of the current mask.  We check if the\n+\t\t     inverse mask is live and if so we generate a negate of\n+\t\t     the current mask such that we still honor NaNs.  */\n+\t\t  cond.inverted_p = true;\n+\t\t  cond.code = orig_code;\n+\t\t  if (loop_vinfo->scalar_cond_masked_set.contains (cond))\n+\t\t    {\n+\t\t      bitop1 = orig_code;\n+\t\t      bitop2 = BIT_NOT_EXPR;\n+\t\t      masks = &LOOP_VINFO_MASKS (loop_vinfo);\n+\t\t      cond_code = cond.code;\n+\t\t      swap_cond_operands = true;\n+\t\t    }\n+\t\t}\n \t    }\n \t}\n     }"}, {"sha": "f493d63d055e3587c46f4c6464c719dc6b9b8447", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=86ffc845b2d0bff59832dcf3cf6518f1358e30ac", "patch": "@@ -1678,6 +1678,7 @@ scalar_cond_masked_key::get_cond_ops_from_tree (tree t)\n       this->code = TREE_CODE (t);\n       this->op0 = TREE_OPERAND (t, 0);\n       this->op1 = TREE_OPERAND (t, 1);\n+      this->inverted_p = false;\n       return;\n     }\n \n@@ -1690,13 +1691,31 @@ scalar_cond_masked_key::get_cond_ops_from_tree (tree t)\n \t    this->code = code;\n \t    this->op0 = gimple_assign_rhs1 (stmt);\n \t    this->op1 = gimple_assign_rhs2 (stmt);\n+\t    this->inverted_p = false;\n \t    return;\n \t  }\n+\telse if (code == BIT_NOT_EXPR)\n+\t  {\n+\t    tree n_op = gimple_assign_rhs1 (stmt);\n+\t    if ((stmt = dyn_cast<gassign *> (SSA_NAME_DEF_STMT (n_op))))\n+\t      {\n+\t\tcode = gimple_assign_rhs_code (stmt);\n+\t\tif (TREE_CODE_CLASS (code) == tcc_comparison)\n+\t\t  {\n+\t\t    this->code = code;\n+\t\t    this->op0 = gimple_assign_rhs1 (stmt);\n+\t\t    this->op1 = gimple_assign_rhs2 (stmt);\n+\t\t    this->inverted_p = true;\n+\t\t    return;\n+\t\t  }\n+\t      }\n+\t  }\n       }\n \n   this->code = NE_EXPR;\n   this->op0 = t;\n   this->op1 = build_zero_cst (TREE_TYPE (t));\n+  this->inverted_p = false;\n }\n \n /* See the comment above the declaration for details.  */"}, {"sha": "bd6f334d15fae4ffbe8c5ffb496ed0a820971638", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86ffc845b2d0bff59832dcf3cf6518f1358e30ac/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=86ffc845b2d0bff59832dcf3cf6518f1358e30ac", "patch": "@@ -266,6 +266,7 @@ struct scalar_cond_masked_key\n   void get_cond_ops_from_tree (tree);\n \n   unsigned ncopies;\n+  bool inverted_p;\n   tree_code code;\n   tree op0;\n   tree op1;\n@@ -285,16 +286,18 @@ struct default_hash_traits<scalar_cond_masked_key>\n     inchash::add_expr (v.op0, h, 0);\n     inchash::add_expr (v.op1, h, 0);\n     h.add_int (v.ncopies);\n+    h.add_flag (v.inverted_p);\n     return h.end ();\n   }\n \n   static inline bool\n   equal (value_type existing, value_type candidate)\n   {\n     return (existing.ncopies == candidate.ncopies\n-           && existing.code == candidate.code\n-           && operand_equal_p (existing.op0, candidate.op0, 0)\n-           && operand_equal_p (existing.op1, candidate.op1, 0));\n+\t    && existing.code == candidate.code\n+\t    && existing.inverted_p == candidate.inverted_p\n+\t    && operand_equal_p (existing.op0, candidate.op0, 0)\n+\t    && operand_equal_p (existing.op1, candidate.op1, 0));\n   }\n \n   static const bool empty_zero_p = true;\n@@ -303,6 +306,7 @@ struct default_hash_traits<scalar_cond_masked_key>\n   mark_empty (value_type &v)\n   {\n     v.ncopies = 0;\n+    v.inverted_p = false;\n   }\n \n   static inline bool"}]}