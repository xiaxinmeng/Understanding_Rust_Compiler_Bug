{"sha": "efdb3de915dd1075975578f61bfe274ad87b5503", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZkYjNkZTkxNWRkMTA3NTk3NTU3OGY2MWJmZTI3NGFkODdiNTUwMw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2006-03-04T00:04:11Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-03-04T00:04:11Z"}, "message": "tree-sra.c (tree_sra): Return todoflags;\n\n2006-03-03  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-sra.c (tree_sra): Return todoflags;\n\t(generate_one_element): Set TODO_update_smt_usage if needed.\n\t(pass_sra): Remove TODO_update_smt_usage.\n\t* tree-ssa-forwprop.c (forward_propagate_addr_expr): Add some\n\tparameter.\n\t(tree_ssa_forward_propagate_single_use_vars): Return\n\tTODO_update_smt_usage if we need to update SMT usage.\n\t(pass_forwprop): Remove TODO_update_smt_usage.\n\nFrom-SVN: r111692", "tree": {"sha": "50268fd54b771d1fee4d2d751a5206f5adca7a71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50268fd54b771d1fee4d2d751a5206f5adca7a71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efdb3de915dd1075975578f61bfe274ad87b5503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efdb3de915dd1075975578f61bfe274ad87b5503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efdb3de915dd1075975578f61bfe274ad87b5503", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efdb3de915dd1075975578f61bfe274ad87b5503/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0efaed01c008b4100724d9984e72d82bad1e66f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0efaed01c008b4100724d9984e72d82bad1e66f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0efaed01c008b4100724d9984e72d82bad1e66f1"}], "stats": {"total": 45, "additions": 37, "deletions": 8}, "files": [{"sha": "07edcc35ff360eef3982eaf9323281eb70082a07", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdb3de915dd1075975578f61bfe274ad87b5503/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdb3de915dd1075975578f61bfe274ad87b5503/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efdb3de915dd1075975578f61bfe274ad87b5503", "patch": "@@ -1,3 +1,14 @@\n+2006-03-03  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-sra.c (tree_sra): Return todoflags;\n+\t(generate_one_element): Set TODO_update_smt_usage if needed.\n+\t(pass_sra): Remove TODO_update_smt_usage.\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr): Add some\n+\tparameter.\n+\t(tree_ssa_forward_propagate_single_use_vars): Return\n+\tTODO_update_smt_usage if we need to update SMT usage.\n+\t(pass_forwprop): Remove TODO_update_smt_usage.\n+\t\n 2006-03-03  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-ssa-operands.c: Tidy whitespace.  Fix spelling."}, {"sha": "1faff8327997d71f95d942b8e8c2dea5fe441ea7", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdb3de915dd1075975578f61bfe274ad87b5503/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdb3de915dd1075975578f61bfe274ad87b5503/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=efdb3de915dd1075975578f61bfe274ad87b5503", "patch": "@@ -75,6 +75,9 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n */\n \n \n+/* The set of todo flags to return from tree_sra.  */\n+static unsigned int todoflags;\n+\n /* The set of aggregate variables that are candidates for scalarization.  */\n static bitmap sra_candidates;\n \n@@ -1432,6 +1435,9 @@ decide_instantiations (void)\n       bitmap_and_compl_into (needs_copy_in, &done_head);\n     }\n   bitmap_clear (&done_head);\n+  \n+  if (!bitmap_empty_p (sra_candidates))\n+    todoflags |= TODO_update_smt_usage;\n \n   mark_set_for_renaming (sra_candidates);\n \n@@ -1515,6 +1521,7 @@ generate_one_element_ref (struct sra_elt *elt, tree base)\n       }\n \n     case ARRAY_TYPE:\n+      todoflags |= TODO_update_smt_usage;\n       return build4 (ARRAY_REF, elt->type, base, elt->element, NULL, NULL);\n \n     case COMPLEX_TYPE:\n@@ -2182,6 +2189,7 @@ static unsigned int\n tree_sra (void)\n {\n   /* Initialize local variables.  */\n+  todoflags = 0;\n   gcc_obstack_init (&sra_obstack);\n   sra_candidates = BITMAP_ALLOC (NULL);\n   needs_copy_in = BITMAP_ALLOC (NULL);\n@@ -2204,7 +2212,7 @@ tree_sra (void)\n   BITMAP_FREE (sra_type_decomp_cache);\n   BITMAP_FREE (sra_type_inst_cache);\n   obstack_free (&sra_obstack, NULL);\n-  return 0;\n+  return todoflags;\n }\n \n static bool\n@@ -2226,7 +2234,7 @@ struct tree_opt_pass pass_sra =\n   0,\t\t\t\t\t/* properties_provided */\n   PROP_smt_usage,\t\t        /* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_update_smt_usage | TODO_dump_func /* todo_flags_finish */\n+  TODO_dump_func /* todo_flags_finish */\n   | TODO_update_ssa\n   | TODO_ggc_collect | TODO_verify_ssa,\n   0\t\t\t\t\t/* letter */"}, {"sha": "c95d098089d213c02f09c86681ac1f6a9ce18799", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdb3de915dd1075975578f61bfe274ad87b5503/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdb3de915dd1075975578f61bfe274ad87b5503/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=efdb3de915dd1075975578f61bfe274ad87b5503", "patch": "@@ -792,14 +792,16 @@ forward_propagate_addr_expr_1 (tree stmt, tree use_stmt)\n }\n \n /* STMT is a statement of the form SSA_NAME = ADDR_EXPR <whatever>.\n+   SOME is a pointer to a boolean value indicating whether we\n+   propagated the address expression anywhere.\n \n    Try to forward propagate the ADDR_EXPR into all uses of the SSA_NAME.\n    Often this will allow for removal of an ADDR_EXPR and INDIRECT_REF\n    node or for recovery of array indexing from pointer arithmetic.\n    Returns true, if all uses have been propagated into.  */\n \n static bool\n-forward_propagate_addr_expr (tree stmt)\n+forward_propagate_addr_expr (tree stmt, bool *some)\n {\n   int stmt_loop_depth = bb_for_stmt (stmt)->loop_depth;\n   tree name = TREE_OPERAND (stmt, 0);\n@@ -809,6 +811,7 @@ forward_propagate_addr_expr (tree stmt)\n \n   FOR_EACH_IMM_USE_SAFE (imm_use, iter, name)\n     {\n+      bool result;\n       tree use_stmt = USE_STMT (imm_use);\n \n       /* If the use is not in a simple assignment statement, then\n@@ -827,8 +830,11 @@ forward_propagate_addr_expr (tree stmt)\n \t  all = false;\n \t  continue;\n \t}\n-\n-      all = forward_propagate_addr_expr_1 (stmt, use_stmt) && all;\n+      \n+      result = forward_propagate_addr_expr_1 (stmt, use_stmt);\n+      if (some)\n+\t*some |= result;\n+      all &= result;\n     }\n \n   return all;\n@@ -931,6 +937,7 @@ static unsigned int\n tree_ssa_forward_propagate_single_use_vars (void)\n {\n   basic_block bb;\n+  unsigned int todoflags = 0;\n \n   cfg_changed = false;\n \n@@ -959,10 +966,13 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \n \t      if (TREE_CODE (rhs) == ADDR_EXPR)\n \t\t{\n-\t\t  if (forward_propagate_addr_expr (stmt))\n+\t\t  bool some = false;\n+\t\t  if (forward_propagate_addr_expr (stmt, &some))\n \t\t    bsi_remove (&bsi, true);\n \t\t  else\n \t\t    bsi_next (&bsi);\n+\t\t  if (some)\n+\t\t    todoflags |= TODO_update_smt_usage;\n \t\t}\n \t      else if ((TREE_CODE (rhs) == BIT_NOT_EXPR\n \t\t        || TREE_CODE (rhs) == NEGATE_EXPR)\n@@ -991,7 +1001,7 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \n   if (cfg_changed)\n     cleanup_tree_cfg ();\n-  return 0;\n+  return todoflags;\n }\n \n \n@@ -1014,7 +1024,7 @@ struct tree_opt_pass pass_forwprop = {\n   0,\t\t\t\t/* properties_provided */\n   PROP_smt_usage,\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */\n-  TODO_update_smt_usage |TODO_dump_func /* todo_flags_finish */\n+  TODO_dump_func /* todo_flags_finish */\n   | TODO_ggc_collect\n   | TODO_update_ssa | TODO_verify_ssa,\n   0\t\t\t\t\t/* letter */"}]}