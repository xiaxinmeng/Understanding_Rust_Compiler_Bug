{"sha": "3ddffba914b25228f477c726c564ee18078e0cb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RkZmZiYTkxNGIyNTIyOGY0NzdjNzI2YzU2NGVlMTgwNzhlMGNiOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-04-28T15:57:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-28T15:57:16Z"}, "message": "i386.md (sse4_1_round<mode>2): Add avx512f alternative.\n\n\t* config/i386/i386.md (sse4_1_round<mode>2): Add avx512f alternative.\n\t* config/i386/sse.md (sse4_1_round<ssescalarmodesuffix>): Likewise.\n\n\t* gcc.target/i386/avx-vround-1.c: New test.\n\t* gcc.target/i386/avx-vround-2.c: New test.\n\t* gcc.target/i386/avx512vl-vround-1.c: New test.\n\t* gcc.target/i386/avx512vl-vround-2.c: New test.\n\nFrom-SVN: r235576", "tree": {"sha": "37ffdccc0f4d2bfd38049f8c2ccd4cbf823f6503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37ffdccc0f4d2bfd38049f8c2ccd4cbf823f6503"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ddffba914b25228f477c726c564ee18078e0cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ddffba914b25228f477c726c564ee18078e0cb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ddffba914b25228f477c726c564ee18078e0cb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ddffba914b25228f477c726c564ee18078e0cb9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97fceb9fa9ab2bf706c334f20f0ce605fae5a047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97fceb9fa9ab2bf706c334f20f0ce605fae5a047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97fceb9fa9ab2bf706c334f20f0ce605fae5a047"}], "stats": {"total": 286, "additions": 272, "deletions": 14}, "files": [{"sha": "3f99dbdad61e36b718c60807d9d632e6cd989440", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ddffba914b25228f477c726c564ee18078e0cb9", "patch": "@@ -1,3 +1,8 @@\n+2016-04-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.md (sse4_1_round<mode>2): Add avx512f alternative.\n+\t* config/i386/sse.md (sse4_1_round<ssescalarmodesuffix>): Likewise.\n+\n 2016-04-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR testsuite/70595"}, {"sha": "6befec76c0d03ea6ba09497da35e46c331e86485", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3ddffba914b25228f477c726c564ee18078e0cb9", "patch": "@@ -15497,15 +15497,19 @@\n \f\n \n (define_insn \"sse4_1_round<mode>2\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n-\t(unspec:MODEF [(match_operand:MODEF 1 \"register_operand\" \"x\")\n-\t\t       (match_operand:SI 2 \"const_0_to_15_operand\" \"n\")]\n+  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,v\")\n+\t(unspec:MODEF [(match_operand:MODEF 1 \"register_operand\" \"x,v\")\n+\t\t       (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n\")]\n \t\t      UNSPEC_ROUND))]\n   \"TARGET_ROUND\"\n-  \"%vround<ssemodesuffix>\\t{%2, %1, %d0|%d0, %1, %2}\"\n+  \"@\n+   %vround<ssemodesuffix>\\t{%2, %1, %d0|%d0, %1, %2}\n+   vrndscale<ssemodesuffix>\\t{%2, %1, %d0|%d0, %1, %2}\"\n   [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix_extra\" \"1,*\")\n+   (set_attr \"length_immediate\" \"*,1\")\n+   (set_attr \"prefix\" \"maybe_vex,evex\")\n+   (set_attr \"isa\" \"noavx512f,avx512f\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"rintxf2\""}, {"sha": "d4cdc42fd7c859b9083a72689d810f90c1682ee1", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3ddffba914b25228f477c726c564ee18078e0cb9", "patch": "@@ -14867,25 +14867,26 @@\n })\n \n (define_insn \"sse4_1_round<ssescalarmodesuffix>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=Yr,*x,x\")\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=Yr,*x,x,v\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n-\t    [(match_operand:VF_128 2 \"register_operand\" \"Yr,*x,x\")\n-\t     (match_operand:SI 3 \"const_0_to_15_operand\" \"n,n,n\")]\n+\t    [(match_operand:VF_128 2 \"register_operand\" \"Yr,*x,x,v\")\n+\t     (match_operand:SI 3 \"const_0_to_15_operand\" \"n,n,n,n\")]\n \t    UNSPEC_ROUND)\n-\t  (match_operand:VF_128 1 \"register_operand\" \"0,0,x\")\n+\t  (match_operand:VF_128 1 \"register_operand\" \"0,0,x,v\")\n \t  (const_int 1)))]\n   \"TARGET_ROUND\"\n   \"@\n    round<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n    round<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n-   vround<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   vround<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\n+   vrndscale<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+  [(set_attr \"isa\" \"noavx,noavx,avx,avx512f\")\n    (set_attr \"type\" \"ssecvt\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix_data16\" \"1,1,*\")\n+   (set_attr \"prefix_data16\" \"1,1,*,*\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"prefix\" \"orig,orig,vex,evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"round<mode>2\""}, {"sha": "6aef47cc7538f090d8c36e2f2b5c50b37d96a138", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ddffba914b25228f477c726c564ee18078e0cb9", "patch": "@@ -1,3 +1,10 @@\n+2016-04-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/avx-vround-1.c: New test.\n+\t* gcc.target/i386/avx-vround-2.c: New test.\n+\t* gcc.target/i386/avx512vl-vround-1.c: New test.\n+\t* gcc.target/i386/avx512vl-vround-2.c: New test.\n+\n 2016-04-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR testsuite/70595"}, {"sha": "b760607eacdaa7cb53e8b823adbfaa41e16afbf9", "filename": "gcc/testsuite/gcc.target/i386/avx-vround-1.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vround-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vround-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vround-1.c?ref=3ddffba914b25228f477c726c564ee18078e0cb9", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -mavx -mno-avx2\" } */\n+\n+#include <x86intrin.h>\n+\n+__attribute__((noinline, noclone)) double\n+f1 (double x)\n+{\n+  return __builtin_round (x);\n+}\n+\n+__attribute__((noinline, noclone)) float\n+f2 (float x)\n+{\n+  return __builtin_roundf (x);\n+}\n+\n+__attribute__((noinline, noclone)) __m128d\n+f3 (__m128d x, __m128d y)\n+{\n+  return _mm_round_sd (x, y, _MM_FROUND_NINT);\n+}\n+\n+__attribute__((noinline, noclone)) __m128\n+f4 (__m128 x, __m128 y)\n+{\n+  return _mm_round_ss (x, y, _MM_FROUND_NINT);\n+}\n+\n+__attribute__((noinline, noclone)) __m128d\n+f5 (__m128d x)\n+{\n+  return _mm_round_pd (x, _MM_FROUND_NINT);\n+}\n+\n+__attribute__((noinline, noclone)) __m128\n+f6 (__m128 x)\n+{\n+  return _mm_round_ps (x, _MM_FROUND_NINT);\n+}\n+\n+__attribute__((noinline, noclone)) __m256d\n+f7 (__m256d x)\n+{\n+  return _mm256_round_pd (x, _MM_FROUND_NINT);\n+}\n+\n+__attribute__((noinline, noclone)) __m256\n+f8 (__m256 x)\n+{\n+  return _mm256_round_ps (x, _MM_FROUND_NINT);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vroundsd\\[^\\n\\r\\]*xmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vroundss\\[^\\n\\r\\]*xmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vroundpd\\[^\\n\\r\\]*xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vroundps\\[^\\n\\r\\]*xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vroundpd\\[^\\n\\r\\]*ymm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vroundps\\[^\\n\\r\\]*ymm\" 1 } } */"}, {"sha": "46b5f06f30837d152fc99d29f912d66c92af184b", "filename": "gcc/testsuite/gcc.target/i386/avx-vround-2.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vround-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vround-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vround-2.c?ref=3ddffba914b25228f477c726c564ee18078e0cb9", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-Ofast -mavx -mno-avx2\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+#define SRC \"avx-vround-1.c\"\n+#endif\n+\n+#include CHECK_H\n+#include SRC\n+\n+static void\n+TEST (void)\n+{\n+  union128d a, ae;\n+  union128 b, be;\n+  union256d c, ce;\n+  union256 d, de;\n+  if (f1 (0.5) != 1.0 || f1 (1.5) != 2.0 || f1 (-0.5) != -1.0 || f1 (-1.5) != -2.0)\n+    abort ();\n+  if (f2 (0.5f) != 1.0f || f2 (1.5f) != 2.0f || f2 (-0.5f) != -1.0f || f2 (-1.5f) != -2.0f)\n+    abort ();\n+  a.x = f3 (_mm_set1_pd (7.0), _mm_set1_pd (0.5));\n+  ae.x = _mm_set_pd (7.0, 0.0);\n+  if (check_union128d (a, ae.a))\n+    abort ();\n+  a.x = f3 (_mm_set1_pd (7.0), _mm_set1_pd (1.5));\n+  ae.x = _mm_set_pd (7.0, 2.0);\n+  if (check_union128d (a, ae.a))\n+    abort ();\n+  a.x = f3 (_mm_set1_pd (7.0), _mm_set1_pd (-0.5));\n+  ae.x = _mm_set_pd (7.0, 0.0);\n+  if (check_union128d (a, ae.a))\n+    abort ();\n+  a.x = f3 (_mm_set1_pd (7.0), _mm_set1_pd (-1.5));\n+  ae.x = _mm_set_pd (7.0, -2.0);\n+  if (check_union128d (a, ae.a))\n+    abort ();\n+  b.x = f4 (_mm_set1_ps (7.0f), _mm_set1_ps (0.5f));\n+  be.x = _mm_set_ps (7.0f, 7.0f, 7.0f, 0.0f);\n+  if (check_union128 (b, be.a))\n+    abort ();\n+  b.x = f4 (_mm_set1_ps (7.0f), _mm_set1_ps (1.5f));\n+  be.x = _mm_set_ps (7.0f, 7.0f, 7.0f, 2.0f);\n+  if (check_union128 (b, be.a))\n+    abort ();\n+  b.x = f4 (_mm_set1_ps (7.0f), _mm_set1_ps (-0.5f));\n+  be.x = _mm_set_ps (7.0f, 7.0f, 7.0f, 0.0f);\n+  if (check_union128 (b, be.a))\n+    abort ();\n+  b.x = f4 (_mm_set1_ps (7.0f), _mm_set1_ps (-1.5f));\n+  be.x = _mm_set_ps (7.0f, 7.0f, 7.0f, -2.0f);\n+  if (check_union128 (b, be.a))\n+    abort ();\n+  a.x = f5 (_mm_set_pd (0.5, 1.5));\n+  ae.x = _mm_set_pd (0.0, 2.0);\n+  if (check_union128d (a, ae.a))\n+    abort ();\n+  a.x = f5 (_mm_set_pd (-0.5, -1.5));\n+  ae.x = _mm_set_pd (0.0, -2.0);\n+  if (check_union128d (a, ae.a))\n+    abort ();\n+  b.x = f6 (_mm_set_ps (0.5f, 1.5f, -0.5f, -1.5f));\n+  be.x = _mm_set_ps (0.0f, 2.0f, 0.0f, -2.0f);\n+  if (check_union128 (b, be.a))\n+    abort ();\n+  c.x = f7 (_mm256_set_pd (0.5, 1.5, -0.5, -1.5));\n+  ce.x = _mm256_set_pd (0.0, 2.0, 0.0, -2.0);\n+  if (check_union256d (c, ce.a))\n+    abort ();\n+  d.x = f8 (_mm256_set_ps (0.5f, 1.5f, -0.5f, -1.5f, 0.25f, 1.0f, -16.5f, 0.75f));\n+  de.x = _mm256_set_ps (0.0f, 2.0f, 0.0f, -2.0f, 0.0f, 1.0f, -16.0f, 1.0f);\n+  if (check_union256 (d, de.a))\n+    abort ();\n+}"}, {"sha": "55ea792fef7d0ac7521d774875cb079478c40d41", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vround-1.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vround-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vround-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vround-1.c?ref=3ddffba914b25228f477c726c564ee18078e0cb9", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-Ofast -mavx512vl\" } */\n+\n+#include <x86intrin.h>\n+\n+__attribute__((noinline, noclone)) double\n+f1 (double x)\n+{\n+  register double a __asm__ (\"xmm16\") = __builtin_round (x);\n+  __asm__ (\"\" : \"+v\" (a));\n+  return a;\n+}\n+\n+__attribute__((noinline, noclone)) float\n+f2 (float x)\n+{\n+  register float a __asm__ (\"xmm16\") = __builtin_roundf (x);\n+  __asm__ (\"\" : \"+v\" (a));\n+  return a;\n+}\n+\n+__attribute__((noinline, noclone)) __m128d\n+f3 (__m128d x, __m128d y)\n+{\n+  register __m128d a __asm__ (\"xmm16\") = x, b __asm__ (\"xmm17\") = y;\n+  __asm__ (\"\" : \"+v\" (a), \"+v\" (b));\n+  a = _mm_round_sd (a, b, _MM_FROUND_NINT);\n+  __asm__ (\"\" : \"+v\" (a));\n+  return a;\n+}\n+\n+__attribute__((noinline, noclone)) __m128\n+f4 (__m128 x, __m128 y)\n+{\n+  register __m128 a __asm__ (\"xmm16\") = x, b __asm__ (\"xmm17\") = y;\n+  __asm__ (\"\" : \"+v\" (a), \"+v\" (b));\n+  a = _mm_round_ss (a, b, _MM_FROUND_NINT);\n+  __asm__ (\"\" : \"+v\" (a));\n+  return a;\n+}\n+\n+__attribute__((noinline, noclone)) __m128d\n+f5 (__m128d x)\n+{\n+  register __m128d a __asm__ (\"xmm16\") = x;\n+  __asm__ (\"\" : \"+v\" (a));\n+  a = _mm_round_pd (a, _MM_FROUND_NINT);\n+  __asm__ (\"\" : \"+v\" (a));\n+  return a;\n+}\n+\n+__attribute__((noinline, noclone)) __m128\n+f6 (__m128 x)\n+{\n+  register __m128 a __asm__ (\"xmm16\") = x;\n+  __asm__ (\"\" : \"+v\" (a));\n+  a = _mm_round_ps (a, _MM_FROUND_NINT);\n+  __asm__ (\"\" : \"+v\" (a));\n+  return a;\n+}\n+\n+__attribute__((noinline, noclone)) __m256d\n+f7 (__m256d x)\n+{\n+  register __m256d a __asm__ (\"xmm16\") = x;\n+  __asm__ (\"\" : \"+v\" (a));\n+  a = _mm256_round_pd (a, _MM_FROUND_NINT);\n+  __asm__ (\"\" : \"+v\" (a));\n+  return a;\n+}\n+\n+__attribute__((noinline, noclone)) __m256\n+f8 (__m256 x)\n+{\n+  register __m256 a __asm__ (\"xmm16\") = x;\n+  __asm__ (\"\" : \"+v\" (a));\n+  a = _mm256_round_ps (a, _MM_FROUND_NINT);\n+  __asm__ (\"\" : \"+v\" (a));\n+  return a;\n+}\n+\n+/* Instead of vround{sd,ss,pd,ps} this should use vrndscale{sd,ss,pd,ps}\n+   counterparts, so that [xy]mm1[67] can be referenced directly in the\n+   instructions.  */\n+/* { dg-final { scan-assembler-times \"vrndscalesd\\[^\\n\\r\\]*xmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaless\\[^\\n\\r\\]*xmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalepd\\[^\\n\\r\\]*xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleps\\[^\\n\\r\\]*xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscalepd\\[^\\n\\r\\]*ymm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrndscaleps\\[^\\n\\r\\]*ymm\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vroundsd\\[^\\n\\r\\]*xmm\" } } */\n+/* { dg-final { scan-assembler-not \"vroundss\\[^\\n\\r\\]*xmm\" } } */\n+/* { dg-final { scan-assembler-not \"vroundpd\\[^\\n\\r\\]*xmm\" } } */\n+/* { dg-final { scan-assembler-not \"vroundps\\[^\\n\\r\\]*xmm\" } } */\n+/* { dg-final { scan-assembler-not \"vroundpd\\[^\\n\\r\\]*ymm\" } } */\n+/* { dg-final { scan-assembler-not \"vroundps\\[^\\n\\r\\]*ymm\" } } */"}, {"sha": "c4607dad0539d9db1372ec1ca4aa4d8fb7539b14", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vround-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vround-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ddffba914b25228f477c726c564ee18078e0cb9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vround-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vround-2.c?ref=3ddffba914b25228f477c726c564ee18078e0cb9", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-options \"-Ofast -mavx512vl\" } */\n+\n+#define CHECK_H \"avx512vl-check.h\"\n+#define TEST avx512vl_test\n+#define SRC \"avx512vl-vround-1.c\"\n+\n+#include \"avx-vround-2.c\""}]}