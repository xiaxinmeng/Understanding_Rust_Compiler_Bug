{"sha": "e30511ed4b4e31f800fa1ff212006df2740bd410", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMwNTExZWQ0YjRlMzFmODAwZmExZmYyMTIwMDZkZjI3NDBiZDQxMA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-09-08T21:03:09Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-09-08T21:03:09Z"}, "message": "objc-exception.h: New file.\n\n\t* objc/objc-exception.h: New file.\n\t* exception.c (objc_set_uncaught_exception_handler): Implemented.\n\t(objc_set_exception_matcher): Implemented.\n\t(objc_exception_throw): Use the uncaught exception handler if set.\n\t(PERSONALITY_FUNCTION): Use the exception matcher instead of the\n\thardcoded isKindOf.\n\t(isKindOf): Renamed to is_kind_of_exception_matcher.  Tidied code\n\tup.  Removed segmentation fault when value is 'nil'.\n\t* objc/objc-api.h (_objc_unexpected_exception): Mark as\n\tdeprecated.\n\t* Makefile.in (exception.lo, exception_gc.lo): Use\n\t-Wno-deprecated-declarations when compiling.\n\t(OBJC_H): Added objc-exception.h\n\nFrom-SVN: r164023", "tree": {"sha": "9b72d3e49901d1f748b383212af5d710212ac59c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b72d3e49901d1f748b383212af5d710212ac59c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e30511ed4b4e31f800fa1ff212006df2740bd410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e30511ed4b4e31f800fa1ff212006df2740bd410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e30511ed4b4e31f800fa1ff212006df2740bd410", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e30511ed4b4e31f800fa1ff212006df2740bd410/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2bfef1ad48b7acd536a8ac0edb218088f68979b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfef1ad48b7acd536a8ac0edb218088f68979b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bfef1ad48b7acd536a8ac0edb218088f68979b5"}], "stats": {"total": 266, "additions": 226, "deletions": 40}, "files": [{"sha": "f4f8e18a63526c85d1837307e229da95eeedd51d", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30511ed4b4e31f800fa1ff212006df2740bd410/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30511ed4b4e31f800fa1ff212006df2740bd410/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=e30511ed4b4e31f800fa1ff212006df2740bd410", "patch": "@@ -1,3 +1,19 @@\n+2010-09-08  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc/objc-exception.h: New file.\n+\t* exception.c (objc_set_uncaught_exception_handler): Implemented.\n+\t(objc_set_exception_matcher): Implemented.\n+\t(objc_exception_throw): Use the uncaught exception handler if set.\n+\t(PERSONALITY_FUNCTION): Use the exception matcher instead of the\n+\thardcoded isKindOf.\n+\t(isKindOf): Renamed to is_kind_of_exception_matcher.  Tidied code\n+\tup.  Removed segmentation fault when value is 'nil'.\n+\t* objc/objc-api.h (_objc_unexpected_exception): Mark as\n+\tdeprecated.\n+\t* Makefile.in (exception.lo, exception_gc.lo): Use\n+\t-Wno-deprecated-declarations when compiling.\n+\t(OBJC_H): Added objc-exception.h\n+\n 2010-09-08  Nicola Pero  <nicola@nicola.brainstorm.co.uk>\n \n \t* objc/typedstream.h: Deprecate all functions in the file.  This"}, {"sha": "d48c8dd88d96bf5497574021cb78eddc8c9cb030", "filename": "libobjc/Makefile.in", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30511ed4b4e31f800fa1ff212006df2740bd410/libobjc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30511ed4b4e31f800fa1ff212006df2740bd410/libobjc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FMakefile.in?ref=e30511ed4b4e31f800fa1ff212006df2740bd410", "patch": "@@ -143,7 +143,7 @@ all: libobjc$(libsuffix).la $(OBJC_BOEHM_GC)\n \n # User-visible header files.\n \n-OBJC_H = hash.h objc-list.h sarray.h objc.h objc-api.h \\\n+OBJC_H = hash.h objc-list.h sarray.h objc.h objc-api.h objc-exception.h \\\n \t NXConstStr.h Object.h Protocol.h encoding.h typedstream.h \\\n \t thr.h objc-decls.h\n \n@@ -152,7 +152,7 @@ OBJC_H = hash.h objc-list.h sarray.h objc.h objc-api.h \\\n OBJS =    archive.lo class.lo encoding.lo gc.lo hash.lo init.lo linking.lo \\\n \t  misc.lo nil_method.lo NXConstStr.lo Object.lo objects.lo \\\n \t  Protocol.lo sarray.lo selector.lo sendmsg.lo thr.lo \\\n-          exception.lo\n+\t  exception.lo\n \n OBJS_GC = archive_gc.lo class_gc.lo encoding_gc.lo gc_gc.lo hash_gc.lo \\\n \t  init_gc.lo linking_gc.lo misc_gc.lo nil_method_gc.lo \\\n@@ -262,13 +262,15 @@ thr_gc.lo: thr.c\n \t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) \\\n \t\t$(INCLUDES) $<\n \n+# -Wno-deprecated-declarations is to silence warnings from using \n+# _objc_unexpected_exception.\n exception.lo: exception.c\n \t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) \\\n-\t\t-fexceptions $(INCLUDES) $<\n+\t\t-fexceptions -Wno-deprecated-declarations $(INCLUDES) $<\n \n exception_gc.lo: exception.c\n \t$(LIBTOOL_COMPILE) $(CC) -c -o $@ $(ALL_CFLAGS) $(OBJC_GCFLAGS) \\\n-\t\t-fexceptions $(INCLUDES) $<\n+\t\t-fexceptions -Wno-deprecated-declarations $(INCLUDES) $<\n \n doc: info dvi pdf html\n "}, {"sha": "210beaee406538c67829fe58197aed9a601bfdae", "filename": "libobjc/exception.c", "status": "modified", "additions": 80, "deletions": 31, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30511ed4b4e31f800fa1ff212006df2740bd410/libobjc%2Fexception.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30511ed4b4e31f800fa1ff212006df2740bd410/libobjc%2Fexception.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fexception.c?ref=e30511ed4b4e31f800fa1ff212006df2740bd410", "patch": "@@ -1,5 +1,5 @@\n /* The implementation of exception handling primitives for Objective-C.\n-   Copyright (C) 2004, 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -25,9 +25,70 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <stdlib.h>\n #include \"config.h\"\n #include \"objc/objc-api.h\"\n+#include \"objc/objc-exception.h\"\n #include \"unwind.h\"\n #include \"unwind-pe.h\"\n \n+/* This hook allows libraries to sepecify special actions when an\n+   exception is thrown without a handler in place.  This is deprecated\n+   in favour of objc_set_uncaught_exception_handler ().\n+ */\n+void (*_objc_unexpected_exception) (id exception); /* !T:SAFE */\n+\n+\n+/* 'is_kind_of_exception_matcher' is our default exception matcher -\n+   it determines if the object 'exception' is of class 'catch_class',\n+   or of a subclass.\n+*/\n+static int\n+is_kind_of_exception_matcher (Class catch_class, id exception)\n+{\n+  /* NULL catch_class is catch-all (eg, @catch (id object)).  */\n+  if (catch_class == Nil)\n+    return 1;\n+\n+  /* If exception is nil (eg, @throw nil;), then it can only be catched\n+   * by a catch-all (eg, @catch (id object)).\n+   */\n+  if (exception != nil)\n+    {\n+      Class c;\n+\n+      for (c = exception->class_pointer; c != Nil; \n+\t   c = class_get_super_class (c))\n+\tif (c == catch_class)\n+\t  return 1;\n+    }\n+  return 0;\n+}\n+\n+/* The exception matcher currently in use.  */\n+static objc_exception_matcher\n+__objc_exception_matcher = is_kind_of_exception_matcher;\n+\n+objc_exception_matcher\n+objc_set_exception_matcher (objc_exception_matcher new_matcher)\n+{\n+  objc_exception_matcher old_matcher = __objc_exception_matcher;\n+  __objc_exception_matcher = new_matcher;\n+  return old_matcher;\n+}\n+\n+/* The uncaught exception handler currently in use.  */\n+static objc_uncaught_exception_handler\n+__objc_uncaught_exception_handler = NULL;\n+\n+objc_uncaught_exception_handler\n+objc_set_uncaught_exception_handler (objc_uncaught_exception_handler \n+\t\t\t\t     new_handler)\n+{\n+  objc_uncaught_exception_handler old_handler \n+    = __objc_uncaught_exception_handler;\n+  __objc_uncaught_exception_handler = new_handler;\n+  return old_handler;\n+}\n+\n+\n \f\n #ifdef __ARM_EABI_UNWINDER__\n \n@@ -84,11 +145,6 @@ struct lsda_header_info\n   unsigned char call_site_encoding;\n };\n \n-/* This hook allows libraries to sepecify special actions when an\n-   exception is thrown without a handler in place.\n- */\n-void (*_objc_unexpected_exception) (id exception); /* !T:SAFE */\n-\n static const unsigned char *\n parse_lsda_header (struct _Unwind_Context *context, const unsigned char *p,\n \t\t   struct lsda_header_info *info)\n@@ -160,25 +216,6 @@ get_ttype_entry (struct lsda_header_info *info, _Unwind_Word i)\n \n #endif\n \n-/* Like unto the method of the same name on Object, but takes an id.  */\n-/* ??? Does this bork the meta-type system?  Can/should we look up an\n-   isKindOf method on the id?  */\n-\n-static int\n-isKindOf (id value, Class target)\n-{\n-  Class c;\n-\n-  /* NULL target is catch-all.  */\n-  if (target == 0)\n-    return 1;\n-\n-  for (c = value->class_pointer; c; c = class_get_super_class (c))\n-    if (c == target)\n-      return 1;\n-  return 0;\n-}\n-\n /* Using a different personality function name causes link failures\n    when trying to mix code using different exception handling models.  */\n #ifdef SJLJ_EXCEPTIONS\n@@ -406,7 +443,7 @@ PERSONALITY_FUNCTION (int version,\n \n \t      Class catch_type = get_ttype_entry (&info, ar_filter);\n \n-\t      if (isKindOf (xh->value, catch_type))\n+\t      if ((*__objc_exception_matcher) (catch_type, xh->value))\n \t\t{\n \t\t  handler_switch_value = ar_filter;\n \t\t  saw_handler = 1;\n@@ -473,25 +510,37 @@ __objc_exception_cleanup (_Unwind_Reason_Code code __attribute__((unused)),\n }\n \n void\n-objc_exception_throw (id value)\n+objc_exception_throw (id exception)\n {\n   struct ObjcException *header = calloc (1, sizeof (*header));\n-  \n+\n   memcpy (&header->base.exception_class, &__objc_exception_class,\n \t  sizeof (__objc_exception_class));\n   header->base.exception_cleanup = __objc_exception_cleanup;\n-  header->value = value;\n+  header->value = exception;\n \n #ifdef SJLJ_EXCEPTIONS\n   _Unwind_SjLj_RaiseException (&header->base);\n #else\n   _Unwind_RaiseException (&header->base);\n #endif\n \n-  /* Some sort of unwinding error.  */\n+  /* No exception handler was installed.  Call the uncaught exception\n+     handler if any is defined.\n+   */\n+  if (__objc_uncaught_exception_handler != 0)\n+    {\n+      (*__objc_uncaught_exception_handler) (exception);\n+    }\n+\n+  /* As a last resort support the old, deprecated way of setting an\n+     uncaught exception handler.\n+  */\n   if (_objc_unexpected_exception != 0)\n     {\n-      (*_objc_unexpected_exception) (value);\n+      (*_objc_unexpected_exception) (exception);\n     }\n+\n   abort ();\n }\n+"}, {"sha": "8a634a4444288f33b1b68341fe923bb472f4ee4a", "filename": "libobjc/objc/objc-api.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30511ed4b4e31f800fa1ff212006df2740bd410/libobjc%2Fobjc%2Fobjc-api.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30511ed4b4e31f800fa1ff212006df2740bd410/libobjc%2Fobjc%2Fobjc-api.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-api.h?ref=e30511ed4b4e31f800fa1ff212006df2740bd410", "patch": "@@ -431,12 +431,14 @@ objc_EXPORT IMP (*__objc_msg_forward)(SEL);\n objc_EXPORT IMP (*__objc_msg_forward2)(id, SEL);\n \n /*\n-** Hook for uncaught exceptions.  This hook is called when an exception\n-** is thrown and no valid exception handler is in place.  The function\n-** is expected never to return.  If the function returns the result is\n-** currently undefined.\n+** Hook for uncaught exceptions.  This hook is called when an\n+** exception is thrown and no valid exception handler is in place.\n+** The function is expected never to return.  If the function returns\n+** the result is currently undefined.  This is deprecated.  Please use\n+** objc_set_uncaught_exception_handler() from objc/objc-exception.h\n+** instead.\n */\n-objc_EXPORT void (*_objc_unexpected_exception)(id);\n+objc_EXPORT void (*_objc_unexpected_exception)(id) __attribute__ ((deprecated));\n \n \n Method_t class_get_class_method(MetaClass _class, SEL aSel);"}, {"sha": "e12ff3a7e7343cbb0430a53240d9aab0dfa79522", "filename": "libobjc/objc/objc-exception.h", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e30511ed4b4e31f800fa1ff212006df2740bd410/libobjc%2Fobjc%2Fobjc-exception.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e30511ed4b4e31f800fa1ff212006df2740bd410/libobjc%2Fobjc%2Fobjc-exception.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-exception.h?ref=e30511ed4b4e31f800fa1ff212006df2740bd410", "patch": "@@ -0,0 +1,117 @@\n+/* GNU Objective C Runtime native exceptions\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+   Contributed by Nicola Pero <nicola.pero@meta-innovation.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef __objc_exception_INCLUDE_GNU\n+#define __objc_exception_INCLUDE_GNU\n+\n+#include <objc/objc.h>\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/* 'objc_exception_throw' throws the exception 'exception', which is\n+   an exception object.\n+\n+   Calls to 'objc_exception_throw' are automatically generated by the\n+   compiler: an Objective-C \"@throw exception;\" statement gets\n+   compiled into the equivalent of \"objc_exception_throw\n+   (exception);\".\n+\n+   'objc_exception_throw' searches for a @catch() that can catch the\n+   exception.  By default, @catch (MyClass object) will catch all\n+   exception objects that are of class MyClass or of a subclass of\n+   MyClass; if the exception object is 'nil', then the exception can\n+   only be caught with a catch-all exception handler where no\n+   exception class is specified (such as @catch(id object)).  This\n+   behaviour can be customized by setting an 'objc_exception_matcher'\n+   function (using objc_set_exception_matcher(), see below); if one is\n+   set, it is used instead of the default one.\n+\n+   If the exception is uncaught (there is no @catch() to catch it),\n+   the program aborts.  It is possible to customize this behaviour by\n+   setting an 'objc_uncaught_exception_handler' function (using\n+   objc_set_uncaught_exception_handler(), see below); if one is set,\n+   it is executed before abort() is called.  An uncaught exception\n+   handler is expected to never return.\n+ */\n+void objc_exception_throw (id exception);\n+\n+/* PS: the Apple runtime seems to also have objc_exception_rethrow(),\n+   objc_begin_catch() and objc_end_catch().  Currently the GNU runtime\n+   does not use them.\n+*/\n+\n+/* The following functions allow customizing to a certain extent the\n+   exception handling.  They are not thread safe and should be called\n+   during the program initialization before threads are started.  They\n+   are mostly reserved for \"Foundation\" libraries; in the case of\n+   GNUstep, gnustep-base may be using these functions to improve the\n+   standard exception handling.  You probably shouldn't use these\n+   functions unless you are writing your own Foundation library.\n+*/\n+\n+/* PS: objc_set_exception_preprocessor() (available on the Apple\n+   runtime) is not supported on the GNU runtime.  */\n+\n+/* An 'objc_exception_matcher' function is used to match an exception\n+   to a @catch clause.  'catch_class' is the class of objects caught\n+   by the @catch clause (for example, in \"@catch (Object *o)\", the\n+   catch_class is Object).  It should return 1 if the exception should\n+   be caught by a @catch with a catch_class argument, and 0 if\n+   not.  */\n+typedef int (*objc_exception_matcher)(Class catch_class, id exception);\n+\n+/* Sets a new exception matcher function, and returns the previous\n+   exception matcher function.  This function is not safe to call in a\n+   multi-threaded environment because other threads may be trying to\n+   invoke the exception matcher while you change it!  */\n+objc_exception_matcher\n+objc_set_exception_matcher (objc_exception_matcher new_matcher);\n+\n+\n+/* An 'objc_uncaught_exception_handler' function is a function that\n+   handles uncaught exceptions.  It should never return.  */\n+typedef void (*objc_uncaught_exception_handler)(id exception);\n+\n+/* Sets a new uncaught exception handler function, and returns the\n+   previous exception handler function.  This function is not safe to\n+   call in a multi-threaded environment because other threads may be\n+   trying to invoke the uncaught exception handler while you change\n+   it.\n+*/\n+objc_uncaught_exception_handler\n+objc_set_uncaught_exception_handler (objc_uncaught_exception_handler new_handler);\n+\n+\n+/* For compatibility with the Apple runtime.  */\n+#define objc_setExceptionMatcher objc_set_exception_matcher\n+#define objc_setUncaughtExceptionHandler objc_set_uncaught_exception_handler\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* not __objc_exception_INCLUDE_GNU */"}]}