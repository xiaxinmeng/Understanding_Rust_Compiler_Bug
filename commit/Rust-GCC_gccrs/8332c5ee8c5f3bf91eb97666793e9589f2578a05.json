{"sha": "8332c5ee8c5f3bf91eb97666793e9589f2578a05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMzMmM1ZWU4YzVmM2JmOTFlYjk3NjY2NzkzZTk1ODlmMjU3OGEwNQ==", "commit": {"author": {"name": "Sudakshina Das", "email": "sudi.das@arm.com", "date": "2017-12-14T10:35:38Z"}, "committer": {"name": "Sudakshina Das", "email": "sudi@gcc.gnu.org", "date": "2017-12-14T10:35:38Z"}, "message": "[PATCH PR81228][AARCH64]Fix ICE by adding LTGT in vec_cmp<mode><v_int_equiv>\n\nThis patch is a follow up to the existing discussions on\nhttps://gcc.gnu.org/ml/gcc-patches/2017-07/msg01904.html\nBin had earlier submitted this patch to fix the ICE that\noccurs because of the missing LTGT in aarch64-simd.md.\nThat discussion opened up a new bug report PR81647 for\nan inconsistent behavior.\n\nAs discussed earlier on the gcc-patches discussion and on\nthe bug report, PR81647 was occurring because of how UNEQ\nwas handled in aarch64-simd.md rather than LTGT.\nSince __builtin_islessgreater is guaranteed to not give an\nFP exception but LTGT might, __builtin_islessgreater gets\nconverted to ~UNEQ very early on in fold_builtin_unordered_cmp.\nThus I will post a separate patch for correcting how UNEQ and\nother unordered comparisons are handled in aarch64-simd.md.\n\nThis patch is only adding the missing LTGT to plug the ICE.\n\nTesting done: Checked for regressions on bootstrapped\naarch64-none-linux-gnu and added a new compile time test case\nthat gives out LTGT to make sure it doesn't ICE\n\n*** gcc/ChangeLog ***\n\n2017-12-14  Sudakshina Das  <sudi.das@arm.com>\n\t    Bin Cheng  <bin.cheng@arm.com>\n\n\tPR target/81228\n\t* config/aarch64/aarch64.c (aarch64_select_cc_mode): Move LTGT\n\tto CCFPEmode.\n\t* config/aarch64/aarch64-simd.md (vec_cmp<mode><v_int_equiv>): Add\n\tLTGT.\n\n*** gcc/testsuite/ChangeLog ***\n\n2017-12-14  Sudakshina Das  <sudi.das@arm.com>\n\n\tPR target/81228\n\t* gcc.dg/pr81228.c: New.\n\nCo-Authored-By: Bin Cheng <bin.cheng@arm.com>\n\nFrom-SVN: r255625", "tree": {"sha": "808154fcd0cba57b6501a2c0282c91e9b488b022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/808154fcd0cba57b6501a2c0282c91e9b488b022"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8332c5ee8c5f3bf91eb97666793e9589f2578a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8332c5ee8c5f3bf91eb97666793e9589f2578a05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8332c5ee8c5f3bf91eb97666793e9589f2578a05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8332c5ee8c5f3bf91eb97666793e9589f2578a05/comments", "author": {"login": "sudakshina-das-arm", "id": 28538945, "node_id": "MDQ6VXNlcjI4NTM4OTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sudakshina-das-arm", "html_url": "https://github.com/sudakshina-das-arm", "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers", "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}", "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions", "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs", "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos", "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30af63d7cbde0e47f3b9e3ad2320f7fd65dc762f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30af63d7cbde0e47f3b9e3ad2320f7fd65dc762f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30af63d7cbde0e47f3b9e3ad2320f7fd65dc762f"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "e33b45f34eaeec16ad7dc2f588c5bcfbc8c88334", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8332c5ee8c5f3bf91eb97666793e9589f2578a05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8332c5ee8c5f3bf91eb97666793e9589f2578a05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8332c5ee8c5f3bf91eb97666793e9589f2578a05", "patch": "@@ -1,3 +1,12 @@\n+2017-12-14  Sudakshina Das  <sudi.das@arm.com>\n+\t    Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR target/81228\n+\t* config/aarch64/aarch64.c (aarch64_select_cc_mode): Move LTGT\n+\tto CCFPEmode.\n+\t* config/aarch64/aarch64-simd.md (vec_cmp<mode><v_int_equiv>): Add\n+\tLTGT.\n+\n 2017-12-14  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64-cores.def (cortex-a55, cortex-a75,"}, {"sha": "f90f74fe7fd5990a97b9f4eb68f5735b7d4fb9aa", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8332c5ee8c5f3bf91eb97666793e9589f2578a05/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8332c5ee8c5f3bf91eb97666793e9589f2578a05/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=8332c5ee8c5f3bf91eb97666793e9589f2578a05", "patch": "@@ -2759,6 +2759,7 @@\n     case UNEQ:\n     case ORDERED:\n     case UNORDERED:\n+    case LTGT:\n       break;\n     default:\n       gcc_unreachable ();\n@@ -2813,6 +2814,15 @@\n       emit_insn (gen_one_cmpl<v_int_equiv>2 (operands[0], operands[0]));\n       break;\n \n+    case LTGT:\n+      /* LTGT is not guranteed to not generate a FP exception.  So let's\n+\t go the faster way : ((a > b) || (b > a)).  */\n+      emit_insn (gen_aarch64_cmgt<mode> (operands[0],\n+\t\t\t\t\t operands[2], operands[3]));\n+      emit_insn (gen_aarch64_cmgt<mode> (tmp, operands[3], operands[2]));\n+      emit_insn (gen_ior<v_int_equiv>3 (operands[0], operands[0], tmp));\n+      break;\n+\n     case UNORDERED:\n       /* Operands are ORDERED iff (a > b || b >= a), so we can compute\n \t UNORDERED as !ORDERED.  */"}, {"sha": "b9c17fc5ccc2ed20a05bb65352834a800e234f9b", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8332c5ee8c5f3bf91eb97666793e9589f2578a05/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8332c5ee8c5f3bf91eb97666793e9589f2578a05/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8332c5ee8c5f3bf91eb97666793e9589f2578a05", "patch": "@@ -4962,13 +4962,13 @@ aarch64_select_cc_mode (RTX_CODE code, rtx x, rtx y)\n \tcase UNGT:\n \tcase UNGE:\n \tcase UNEQ:\n-\tcase LTGT:\n \t  return CCFPmode;\n \n \tcase LT:\n \tcase LE:\n \tcase GT:\n \tcase GE:\n+\tcase LTGT:\n \t  return CCFPEmode;\n \n \tdefault:"}, {"sha": "51f7b33e840362dfdda48787915648bf0229a4c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8332c5ee8c5f3bf91eb97666793e9589f2578a05/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8332c5ee8c5f3bf91eb97666793e9589f2578a05/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8332c5ee8c5f3bf91eb97666793e9589f2578a05", "patch": "@@ -1,3 +1,8 @@\n+2017-12-14  Sudakshina Das  <sudi.das@arm.com>\n+\n+\tPR target/81228\n+\t* gcc.dg/pr81228.c: New.\n+\n 2017-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79650"}, {"sha": "f7eecc510ad2acaa656a1ce5df0aafffa56b3bd9", "filename": "gcc/testsuite/gcc.dg/pr81228.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8332c5ee8c5f3bf91eb97666793e9589f2578a05/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81228.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8332c5ee8c5f3bf91eb97666793e9589f2578a05/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81228.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr81228.c?ref=8332c5ee8c5f3bf91eb97666793e9589f2578a05", "patch": "@@ -0,0 +1,21 @@\n+/* PR target/81228.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-ssa\" } */\n+\n+void *a;\n+\n+void b ()\n+{\n+  char c;\n+  long d;\n+  char *e = a;\n+  for (; d; d++)\n+  {\n+    double f, g;\n+    c = g < f || g > f;\n+    e[d] = c;\n+  }\n+}\n+\n+/* Let's make sure we do have a LTGT.  */\n+/* { dg-final { scan-tree-dump \"<>\" \"ssa\" } } */"}]}