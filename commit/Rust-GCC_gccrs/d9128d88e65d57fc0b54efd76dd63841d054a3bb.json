{"sha": "d9128d88e65d57fc0b54efd76dd63841d054a3bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkxMjhkODhlNjVkNTdmYzBiNTRlZmQ3NmRkNjM4NDFkMDU0YTNiYg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2016-02-19T10:39:15Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2016-02-19T10:39:15Z"}, "message": "S/390: z13 Add missing commutative operand markers.\n\ngcc/ChangeLog:\n\n\t* config/s390/vector.md: Add missing commutative operand markers\n\tto the patterns which qualify for one.\n\t* config/s390/vx-builtins.md: Likewise.\n\nFrom-SVN: r233556", "tree": {"sha": "f3a5ab597e36933d95c0321e25f7449e8646d9f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3a5ab597e36933d95c0321e25f7449e8646d9f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9128d88e65d57fc0b54efd76dd63841d054a3bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9128d88e65d57fc0b54efd76dd63841d054a3bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9128d88e65d57fc0b54efd76dd63841d054a3bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9128d88e65d57fc0b54efd76dd63841d054a3bb/comments", "author": null, "committer": null, "parents": [{"sha": "90573e884b212c911f1804a56904974d5d9e7bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90573e884b212c911f1804a56904974d5d9e7bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90573e884b212c911f1804a56904974d5d9e7bc7"}], "stats": {"total": 94, "additions": 50, "deletions": 44}, "files": [{"sha": "083e8287817e33e0131888c353dbd12ab34ce92f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9128d88e65d57fc0b54efd76dd63841d054a3bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9128d88e65d57fc0b54efd76dd63841d054a3bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9128d88e65d57fc0b54efd76dd63841d054a3bb", "patch": "@@ -1,3 +1,9 @@\n+2016-02-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/vector.md: Add missing commutative operand markers\n+\tto the patterns which qualify for one.\n+\t* config/s390/vx-builtins.md: Likewise.\n+\n 2016-02-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/vector.md (VI, VI_QHS): Add single element vector"}, {"sha": "cc3287c78ff277f96f95a13afd7941c6dacbab2b", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9128d88e65d57fc0b54efd76dd63841d054a3bb/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9128d88e65d57fc0b54efd76dd63841d054a3bb/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=d9128d88e65d57fc0b54efd76dd63841d054a3bb", "patch": "@@ -453,8 +453,8 @@\n ; operation into two DImode ADDs.\n (define_insn \"<ti*>add<mode>3\"\n   [(set (match_operand:VIT           0 \"nonimmediate_operand\" \"=v\")\n-\t(plus:VIT (match_operand:VIT 1 \"nonimmediate_operand\"  \"v\")\n-\t\t  (match_operand:VIT 2 \"general_operand\"  \"v\")))]\n+\t(plus:VIT (match_operand:VIT 1 \"nonimmediate_operand\" \"%v\")\n+\t\t  (match_operand:VIT 2 \"general_operand\"       \"v\")))]\n   \"TARGET_VX\"\n   \"va<bhfgq>\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n@@ -471,7 +471,7 @@\n ; vmlb, vmlhw, vmlf\n (define_insn \"mul<mode>3\"\n   [(set (match_operand:VI_QHS              0 \"register_operand\" \"=v\")\n-\t(mult:VI_QHS (match_operand:VI_QHS 1 \"register_operand\"  \"v\")\n+\t(mult:VI_QHS (match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n \t\t     (match_operand:VI_QHS 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vml<bhfgq><w>\\t%v0,%v1,%v2\"\n@@ -526,7 +526,7 @@\n \n (define_insn \"and<mode>3\"\n   [(set (match_operand:VT         0 \"register_operand\" \"=v\")\n-\t(and:VT (match_operand:VT 1 \"register_operand\"  \"v\")\n+\t(and:VT (match_operand:VT 1 \"register_operand\" \"%v\")\n \t\t(match_operand:VT 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vn\\t%v0,%v1,%v2\"\n@@ -537,7 +537,7 @@\n \n (define_insn \"ior<mode>3\"\n   [(set (match_operand:VT         0 \"register_operand\" \"=v\")\n-\t(ior:VT (match_operand:VT 1 \"register_operand\"  \"v\")\n+\t(ior:VT (match_operand:VT 1 \"register_operand\" \"%v\")\n \t\t(match_operand:VT 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vo\\t%v0,%v1,%v2\"\n@@ -548,7 +548,7 @@\n \n (define_insn \"xor<mode>3\"\n   [(set (match_operand:VT         0 \"register_operand\" \"=v\")\n-\t(xor:VT (match_operand:VT 1 \"register_operand\"  \"v\")\n+\t(xor:VT (match_operand:VT 1 \"register_operand\" \"%v\")\n \t\t(match_operand:VT 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vx\\t%v0,%v1,%v2\"\n@@ -765,7 +765,7 @@\n ; vmnb, vmnh, vmnf, vmng\n (define_insn \"smin<mode>3\"\n   [(set (match_operand:VI          0 \"register_operand\" \"=v\")\n-\t(smin:VI (match_operand:VI 1 \"register_operand\"  \"v\")\n+\t(smin:VI (match_operand:VI 1 \"register_operand\" \"%v\")\n \t\t (match_operand:VI 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vmn<bhfgq>\\t%v0,%v1,%v2\"\n@@ -774,7 +774,7 @@\n ; vmxb, vmxh, vmxf, vmxg\n (define_insn \"smax<mode>3\"\n   [(set (match_operand:VI          0 \"register_operand\" \"=v\")\n-\t(smax:VI (match_operand:VI 1 \"register_operand\"  \"v\")\n+\t(smax:VI (match_operand:VI 1 \"register_operand\" \"%v\")\n \t\t (match_operand:VI 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vmx<bhfgq>\\t%v0,%v1,%v2\"\n@@ -783,7 +783,7 @@\n ; vmnlb, vmnlh, vmnlf, vmnlg\n (define_insn \"umin<mode>3\"\n   [(set (match_operand:VI          0 \"register_operand\" \"=v\")\n-\t(umin:VI (match_operand:VI 1 \"register_operand\"  \"v\")\n+\t(umin:VI (match_operand:VI 1 \"register_operand\" \"%v\")\n \t\t (match_operand:VI 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vmnl<bhfgq>\\t%v0,%v1,%v2\"\n@@ -792,16 +792,16 @@\n ; vmxlb, vmxlh, vmxlf, vmxlg\n (define_insn \"umax<mode>3\"\n   [(set (match_operand:VI          0 \"register_operand\" \"=v\")\n-\t(umax:VI (match_operand:VI 1 \"register_operand\"  \"v\")\n+\t(umax:VI (match_operand:VI 1 \"register_operand\" \"%v\")\n \t\t (match_operand:VI 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vmxl<bhfgq>\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; vmeb, vmeh, vmef\n (define_insn \"vec_widen_smult_even_<mode>\"\n-  [(set (match_operand:<vec_double>                    0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\"  \"v\")\n+  [(set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n \t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n \t\t\t     UNSPEC_VEC_SMULT_EVEN))]\n   \"TARGET_VX\"\n@@ -811,7 +811,7 @@\n ; vmleb, vmleh, vmlef\n (define_insn \"vec_widen_umult_even_<mode>\"\n   [(set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\"  \"v\")\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n \t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n \t\t\t     UNSPEC_VEC_UMULT_EVEN))]\n   \"TARGET_VX\"\n@@ -821,7 +821,7 @@\n ; vmob, vmoh, vmof\n (define_insn \"vec_widen_smult_odd_<mode>\"\n   [(set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\"  \"v\")\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n \t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n \t\t\t     UNSPEC_VEC_SMULT_ODD))]\n   \"TARGET_VX\"\n@@ -831,7 +831,7 @@\n ; vmlob, vmloh, vmlof\n (define_insn \"vec_widen_umult_odd_<mode>\"\n   [(set (match_operand:<vec_double>                 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\"  \"v\")\n+\t(unspec:<vec_double> [(match_operand:VI_QHS 1 \"register_operand\" \"%v\")\n \t\t\t      (match_operand:VI_QHS 2 \"register_operand\"  \"v\")]\n \t\t\t     UNSPEC_VEC_UMULT_ODD))]\n   \"TARGET_VX\"\n@@ -854,23 +854,23 @@\n \n (define_insn \"addv2df3\"\n   [(set (match_operand:V2DF            0 \"register_operand\" \"=v\")\n-\t(plus:V2DF (match_operand:V2DF 1 \"register_operand\"  \"v\")\n+\t(plus:V2DF (match_operand:V2DF 1 \"register_operand\" \"%v\")\n \t\t   (match_operand:V2DF 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vfadb\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n (define_insn \"subv2df3\"\n   [(set (match_operand:V2DF             0 \"register_operand\" \"=v\")\n-\t(minus:V2DF (match_operand:V2DF 1 \"register_operand\"  \"v\")\n+\t(minus:V2DF (match_operand:V2DF 1 \"register_operand\" \"%v\")\n \t\t    (match_operand:V2DF 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vfsdb\\t%v0,%v1,%v2\"\n   [(set_attr \"op_type\" \"VRR\")])\n \n (define_insn \"mulv2df3\"\n   [(set (match_operand:V2DF            0 \"register_operand\" \"=v\")\n-\t(mult:V2DF (match_operand:V2DF 1 \"register_operand\"  \"v\")\n+\t(mult:V2DF (match_operand:V2DF 1 \"register_operand\" \"%v\")\n \t\t   (match_operand:V2DF 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"vfmdb\\t%v0,%v1,%v2\"\n@@ -893,7 +893,7 @@\n \n (define_insn \"fmav2df4\"\n   [(set (match_operand:V2DF           0 \"register_operand\" \"=v\")\n-\t(fma:V2DF (match_operand:V2DF 1 \"register_operand\"  \"v\")\n+\t(fma:V2DF (match_operand:V2DF 1 \"register_operand\" \"%v\")\n \t\t  (match_operand:V2DF 2 \"register_operand\"  \"v\")\n \t\t  (match_operand:V2DF 3 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n@@ -902,7 +902,7 @@\n \n (define_insn \"fmsv2df4\"\n   [(set (match_operand:V2DF                     0 \"register_operand\" \"=v\")\n-\t(fma:V2DF (match_operand:V2DF           1 \"register_operand\"  \"v\")\n+\t(fma:V2DF (match_operand:V2DF           1 \"register_operand\" \"%v\")\n \t\t  (match_operand:V2DF           2 \"register_operand\"  \"v\")\n \t\t  (neg:V2DF (match_operand:V2DF 3 \"register_operand\"  \"v\"))))]\n   \"TARGET_VX\"\n@@ -933,7 +933,7 @@\n ; Emulate with compare + select\n (define_insn_and_split \"smaxv2df3\"\n   [(set (match_operand:V2DF            0 \"register_operand\" \"=v\")\n-\t(smax:V2DF (match_operand:V2DF 1 \"register_operand\"  \"v\")\n+\t(smax:V2DF (match_operand:V2DF 1 \"register_operand\" \"%v\")\n \t\t   (match_operand:V2DF 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"#\"\n@@ -953,7 +953,7 @@\n ; Emulate with compare + select\n (define_insn_and_split \"sminv2df3\"\n   [(set (match_operand:V2DF            0 \"register_operand\" \"=v\")\n-\t(smin:V2DF (match_operand:V2DF 1 \"register_operand\"  \"v\")\n+\t(smin:V2DF (match_operand:V2DF 1 \"register_operand\" \"%v\")\n \t\t   (match_operand:V2DF 2 \"register_operand\"  \"v\")))]\n   \"TARGET_VX\"\n   \"#\""}, {"sha": "489bbeec22df240f8accf5aff34cee36eed7a452", "filename": "gcc/config/s390/vx-builtins.md", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9128d88e65d57fc0b54efd76dd63841d054a3bb/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9128d88e65d57fc0b54efd76dd63841d054a3bb/gcc%2Fconfig%2Fs390%2Fvx-builtins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvx-builtins.md?ref=d9128d88e65d57fc0b54efd76dd63841d054a3bb", "patch": "@@ -575,7 +575,7 @@\n \n (define_insn \"vec_addc<mode>\"\n   [(set (match_operand:VI_HW                0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\"  \"v\")\n+\t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\" \"%v\")\n \t\t       (match_operand:VI_HW 2 \"register_operand\"  \"v\")]\n \t\t      UNSPEC_VEC_ADDC))]\n   \"TARGET_VX\"\n@@ -584,7 +584,7 @@\n \n (define_insn \"vec_addc_u128\"\n   [(set (match_operand:V16QI                0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\"  \"v\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"%v\")\n \t\t       (match_operand:V16QI 2 \"register_operand\"  \"v\")]\n \t\t      UNSPEC_VEC_ADDC_U128))]\n   \"TARGET_VX\"\n@@ -596,7 +596,7 @@\n \n (define_insn \"vec_adde_u128\"\n   [(set (match_operand:V16QI                0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\"  \"v\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"%v\")\n \t\t       (match_operand:V16QI 2 \"register_operand\"  \"v\")\n \t\t       (match_operand:V16QI 3 \"register_operand\"  \"v\")]\n \t\t      UNSPEC_VEC_ADDE_U128))]\n@@ -609,7 +609,7 @@\n \n (define_insn \"vec_addec_u128\"\n   [(set (match_operand:V16QI                0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\"  \"v\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"%v\")\n \t\t       (match_operand:V16QI 2 \"register_operand\"  \"v\")\n \t\t       (match_operand:V16QI 3 \"register_operand\"  \"v\")]\n \t\t      UNSPEC_VEC_ADDEC_U128))]\n@@ -672,7 +672,7 @@\n \n (define_insn \"vec_avg<mode>\"\n   [(set (match_operand:VI_HW                0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\"  \"v\")\n+\t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\" \"%v\")\n \t\t       (match_operand:VI_HW 2 \"register_operand\"  \"v\")]\n \t\t      UNSPEC_VEC_AVG))]\n   \"TARGET_VX\"\n@@ -683,7 +683,7 @@\n \n (define_insn \"vec_avgu<mode>\"\n   [(set (match_operand:VI_HW                0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\"  \"v\")\n+\t(unspec:VI_HW [(match_operand:VI_HW 1 \"register_operand\" \"%v\")\n \t\t       (match_operand:VI_HW 2 \"register_operand\"  \"v\")]\n \t\t      UNSPEC_VEC_AVGU))]\n   \"TARGET_VX\"\n@@ -871,9 +871,9 @@\n ; vmalb, vmalh, vmalf, vmalg\n (define_insn \"vec_vmal<mode>\"\n   [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\" \"v\")]\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n+\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"  \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\"  \"v\")]\n \t\t\t  UNSPEC_VEC_VMAL))]\n   \"TARGET_VX\"\n   \"vmal<bhfgq><w>\\t%v0,%v1,%v2,%v3\"\n@@ -884,9 +884,9 @@\n ; vmahb; vmahh, vmahf, vmahg\n (define_insn \"vec_vmah<mode>\"\n   [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\" \"v\")]\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n+\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"  \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\"  \"v\")]\n \t\t\t  UNSPEC_VEC_VMAH))]\n   \"TARGET_VX\"\n   \"vmah<bhfgq>\\t%v0,%v1,%v2,%v3\"\n@@ -895,9 +895,9 @@\n ; vmalhb; vmalhh, vmalhf, vmalhg\n (define_insn \"vec_vmalh<mode>\"\n   [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n-\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\" \"v\")]\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n+\t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\"  \"v\")\n+\t\t\t   (match_operand:VI_HW_QHS 3 \"register_operand\"  \"v\")]\n \t\t\t  UNSPEC_VEC_VMALH))]\n   \"TARGET_VX\"\n   \"vmalh<bhfgq>\\t%v0,%v1,%v2,%v3\"\n@@ -908,8 +908,8 @@\n ; vmaeb; vmaeh, vmaef, vmaeg\n (define_insn \"vec_vmae<mode>\"\n   [(set (match_operand:<vec_double> 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n-\t\t\t      (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n+\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\"   \"%v\")\n+\t\t\t      (match_operand:VI_HW_QHS 2 \"register_operand\"    \"v\")\n \t\t\t      (match_operand:<vec_double> 3 \"register_operand\" \"v\")]\n \t\t\t     UNSPEC_VEC_VMAE))]\n   \"TARGET_VX\"\n@@ -919,7 +919,7 @@\n ; vmaleb; vmaleh, vmalef, vmaleg\n (define_insn \"vec_vmale<mode>\"\n   [(set (match_operand:<vec_double> 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n+\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n \t\t\t      (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n \t\t\t      (match_operand:<vec_double> 3 \"register_operand\" \"v\")]\n \t\t\t     UNSPEC_VEC_VMALE))]\n@@ -932,7 +932,7 @@\n ; vmaob; vmaoh, vmaof, vmaog\n (define_insn \"vec_vmao<mode>\"\n   [(set (match_operand:<vec_double> 0 \"register_operand\" \"=v\")\n-\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n+\t(unspec:<vec_double> [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n \t\t\t      (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")\n \t\t\t      (match_operand:<vec_double> 3 \"register_operand\" \"v\")]\n \t\t\t     UNSPEC_VEC_VMAO))]\n@@ -959,7 +959,7 @@\n ; vmhb, vmhh, vmhf\n (define_insn \"vec_smulh<mode>\"\n   [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n \t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")]\n \t\t\t  UNSPEC_VEC_SMULT_HI))]\n   \"TARGET_VX\"\n@@ -969,7 +969,7 @@\n ; vmlhb, vmlhh, vmlhf\n (define_insn \"vec_umulh<mode>\"\n   [(set (match_operand:VI_HW_QHS 0 \"register_operand\" \"=v\")\n-\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"v\")\n+\t(unspec:VI_HW_QHS [(match_operand:VI_HW_QHS 1 \"register_operand\" \"%v\")\n \t\t\t   (match_operand:VI_HW_QHS 2 \"register_operand\" \"v\")]\n \t\t\t  UNSPEC_VEC_UMULT_HI))]\n   \"TARGET_VX\"\n@@ -987,7 +987,7 @@\n \n (define_insn \"vec_nor<mode>3\"\n   [(set (match_operand:VT_HW 0 \"register_operand\" \"=v\")\n-\t(not:VT_HW (ior:VT_HW (match_operand:VT_HW 1 \"register_operand\" \"v\")\n+\t(not:VT_HW (ior:VT_HW (match_operand:VT_HW 1 \"register_operand\" \"%v\")\n \t\t\t      (match_operand:VT_HW 2 \"register_operand\" \"v\"))))]\n   \"TARGET_VX\"\n   \"vno\\t%v0,%v1,%v2\""}]}