{"sha": "9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU0MWZmZWU4YzdiNjdjYzVhYjNiYzExM2RiZmQ4NGQwYTgxZmVhYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-11-18T14:51:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-11-18T14:51:10Z"}, "message": "cuintp.c: Replace host_integerp (..., 0) with tree_fits_shwi_p throughout.\n\ngcc/ada/\n\t* gcc-interface/cuintp.c: Replace host_integerp (..., 0) with\n\ttree_fits_shwi_p throughout.\n\ngcc/c-family/\n\t* c-ada-spec.c, c-common.c, c-format.c, c-pretty-print.c: Replace\n\thost_integerp (..., 0) with tree_fits_shwi_p throughout.\n\ngcc/c/\n\t* c-parser.c: Replace host_integerp (..., 0) with tree_fits_shwi_p\n\tthroughout.\n\ngcc/cp/\n\t* error.c, init.c, parser.c, semantics.c: Replace\n\thost_integerp (..., 0) with tree_fits_shwi_p throughout.\n\ngcc/go/\n\t* gofrontend/expressions.cc: Replace host_integerp (..., 0) with\n\ttree_fits_shwi_p throughout.\n\ngcc/java/\n\t* class.c, expr.c: Replace host_integerp (..., 0) with\n\ttree_fits_shwi_p throughout.\n\ngcc/\n\t* builtins.c, config/alpha/alpha.c, config/c6x/predicates.md,\n\tconfig/ia64/predicates.md, config/iq2000/iq2000.c, config/mips/mips.c,\n\tconfig/s390/s390.c, dbxout.c, dwarf2out.c, except.c, explow.c, expr.c,\n\texpr.h, fold-const.c, gimple-fold.c, gimple-ssa-strength-reduction.c,\n\tgimple.c, godump.c, graphite-scop-detection.c, graphite-sese-to-poly.c,\n\tomp-low.c, predict.c, rtlanal.c, sdbout.c, simplify-rtx.c,\n\tstor-layout.c, tree-data-ref.c, tree-dfa.c, tree-pretty-print.c,\n\ttree-sra.c, tree-ssa-alias.c, tree-ssa-forwprop.c,\n\ttree-ssa-loop-ivopts.c, tree-ssa-loop-prefetch.c, tree-ssa-math-opts.c,\n\ttree-ssa-phiopt.c, tree-ssa-reassoc.c, tree-ssa-sccvn.c,\n\ttree-ssa-strlen.c, tree-ssa-structalias.c, tree-vect-data-refs.c,\n\ttree-vect-patterns.c, tree-vectorizer.h, tree.c, var-tracking.c,\n\tvarasm.c: Replace host_integerp (..., 0) with tree_fits_shwi_p\n\tthroughout.\n\nFrom-SVN: r204955", "tree": {"sha": "afc65126a85ed1aadac8e274f889137dc1baed2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afc65126a85ed1aadac8e274f889137dc1baed2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b04268a57f6e67376cf804e6e5866cf8cbfef968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04268a57f6e67376cf804e6e5866cf8cbfef968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04268a57f6e67376cf804e6e5866cf8cbfef968"}], "stats": {"total": 333, "additions": 190, "deletions": 143}, "files": [{"sha": "48c0d01f8cb405f3dfa87ad6e4bcdd8929b45ce4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1,3 +1,20 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* builtins.c, config/alpha/alpha.c, config/c6x/predicates.md,\n+\tconfig/ia64/predicates.md, config/iq2000/iq2000.c, config/mips/mips.c,\n+\tconfig/s390/s390.c, dbxout.c, dwarf2out.c, except.c, explow.c, expr.c,\n+\texpr.h, fold-const.c, gimple-fold.c, gimple-ssa-strength-reduction.c,\n+\tgimple.c, godump.c, graphite-scop-detection.c, graphite-sese-to-poly.c,\n+\tomp-low.c, predict.c, rtlanal.c, sdbout.c, simplify-rtx.c,\n+\tstor-layout.c, tree-data-ref.c, tree-dfa.c, tree-pretty-print.c,\n+\ttree-sra.c, tree-ssa-alias.c, tree-ssa-forwprop.c,\n+\ttree-ssa-loop-ivopts.c, tree-ssa-loop-prefetch.c, tree-ssa-math-opts.c,\n+\ttree-ssa-phiopt.c, tree-ssa-reassoc.c, tree-ssa-sccvn.c,\n+\ttree-ssa-strlen.c, tree-ssa-structalias.c, tree-vect-data-refs.c,\n+\ttree-vect-patterns.c, tree-vectorizer.h, tree.c, var-tracking.c,\n+\tvarasm.c: Replace host_integerp (..., 0) with tree_fits_shwi_p\n+\tthroughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* tree.h (tree_fits_shwi_p, tree_fits_uhwi_p): Declare."}, {"sha": "facd5d61ef86f41a348e4c703bcabeacd88e8c0f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc-interface/cuintp.c: Replace host_integerp (..., 0) with\n+\ttree_fits_shwi_p throughout.\n+\n 2013-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (TARGET_ABI_OPEN_VMS): Delete as redundant."}, {"sha": "d3c19aed0e4296ad4427b44fa3459574912a729e", "filename": "gcc/ada/gcc-interface/cuintp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fada%2Fgcc-interface%2Fcuintp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fcuintp.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -153,7 +153,7 @@ UI_From_gnu (tree Input)\n   /* On 64-bit hosts, host_integerp tells whether the input fits in a\n      signed 64-bit integer.  Then a truncation tells whether it fits\n      in a signed 32-bit integer.  */\n-  if (host_integerp (Input, 0))\n+  if (tree_fits_shwi_p (Input))\n     {\n       HOST_WIDE_INT hw_input = TREE_INT_CST_LOW (Input);\n       if (hw_input == (int) hw_input)\n@@ -165,7 +165,7 @@ UI_From_gnu (tree Input)\n   /* On 32-bit hosts, host_integerp tells whether the input fits in a\n      signed 32-bit integer.  Then a sign test tells whether it fits\n      in a signed 64-bit integer.  */\n-  if (host_integerp (Input, 0))\n+  if (tree_fits_shwi_p (Input))\n     return UI_From_Int (TREE_INT_CST_LOW (Input));\n   else if (TREE_INT_CST_HIGH (Input) < 0 && TYPE_UNSIGNED (gnu_type))\n     return No_Uint;"}, {"sha": "7807b60e53963eec011eeb82a7de951075ca6cc1", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -617,7 +617,7 @@ c_strlen (tree src, int only_value)\n      a null character if we can represent it as a single HOST_WIDE_INT.  */\n   if (offset_node == 0)\n     offset = 0;\n-  else if (! host_integerp (offset_node, 0))\n+  else if (! tree_fits_shwi_p (offset_node))\n     offset = -1;\n   else\n     offset = tree_low_cst (offset_node, 0);\n@@ -5288,7 +5288,7 @@ expand_builtin_atomic_compare_exchange (enum machine_mode mode, tree exp,\n \n   weak = CALL_EXPR_ARG (exp, 3);\n   is_weak = false;\n-  if (host_integerp (weak, 0) && tree_low_cst (weak, 0) != 0)\n+  if (tree_fits_shwi_p (weak) && tree_low_cst (weak, 0) != 0)\n     is_weak = true;\n \n   oldval = expect;\n@@ -8547,7 +8547,7 @@ fold_builtin_powi (location_t loc, tree fndecl ATTRIBUTE_UNUSED,\n   if (real_onep (arg0))\n     return omit_one_operand_loc (loc, type, build_real (type, dconst1), arg1);\n \n-  if (host_integerp (arg1, 0))\n+  if (tree_fits_shwi_p (arg1))\n     {\n       HOST_WIDE_INT c = TREE_INT_CST_LOW (arg1);\n \n@@ -8871,7 +8871,7 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n \t  return NULL_TREE;\n \t}\n \n-      if (!host_integerp (len, 0))\n+      if (!tree_fits_shwi_p (len))\n \treturn NULL_TREE;\n       /* FIXME:\n          This logic lose for arguments like (type *)malloc (sizeof (type)),\n@@ -9845,7 +9845,7 @@ fold_builtin_load_exponent (location_t loc, tree arg0, tree arg1,\n       /* If both arguments are constant, then try to evaluate it.  */\n       if ((ldexp || REAL_MODE_FORMAT (TYPE_MODE (type))->b == 2)\n \t  && TREE_CODE (arg0) == REAL_CST && !TREE_OVERFLOW (arg0)\n-\t  && host_integerp (arg1, 0))\n+\t  && tree_fits_shwi_p (arg1))\n         {\n \t  /* Bound the maximum adjustment to twice the range of the\n \t     mode's valid exponents.  Use abs to ensure the range is\n@@ -13841,7 +13841,7 @@ do_mpfr_bessel_n (tree arg1, tree arg2, tree type,\n   /* To proceed, MPFR must exactly represent the target floating point\n      format, which only happens when the target base equals two.  */\n   if (REAL_MODE_FORMAT (TYPE_MODE (type))->b == 2\n-      && host_integerp (arg1, 0)\n+      && tree_fits_shwi_p (arg1)\n       && TREE_CODE (arg2) == REAL_CST && !TREE_OVERFLOW (arg2))\n     {\n       const HOST_WIDE_INT n = tree_low_cst (arg1, 0);"}, {"sha": "fde985328cd31dffc799b77f8843777bfa1cade0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-ada-spec.c, c-common.c, c-format.c, c-pretty-print.c: Replace\n+\thost_integerp (..., 0) with tree_fits_shwi_p throughout.\n+\n 2013-11-15  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* c-cilkplus.c: New file."}, {"sha": "6a5826b0a761feed643e9e23f0d5e7f65972cd8a", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1813,7 +1813,7 @@ is_simple_enum (tree node)\n       if (TREE_CODE (int_val) != INTEGER_CST)\n \tint_val = DECL_INITIAL (int_val);\n \n-      if (!host_integerp (int_val, 0))\n+      if (!tree_fits_shwi_p (int_val))\n \treturn false;\n       else if (TREE_INT_CST_LOW (int_val) != count)\n \treturn false;\n@@ -2205,7 +2205,7 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n \t to generate the (0 .. -1) range for flexible array members.  */\n       if (TREE_TYPE (node) == sizetype)\n \tnode = fold_convert (ssizetype, node);\n-      if (host_integerp (node, 0))\n+      if (tree_fits_shwi_p (node))\n \tpp_wide_integer (buffer, TREE_INT_CST_LOW (node));\n       else if (host_integerp (node, 1))\n \tpp_unsigned_wide_integer (buffer, TREE_INT_CST_LOW (node));"}, {"sha": "d0fc1aafd6b514f24dbba311557db2bff2b895b6", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -6999,7 +6999,7 @@ get_priority (tree args, bool is_destructor)\n \n   arg = TREE_VALUE (args);\n   arg = default_conversion (arg);\n-  if (!host_integerp (arg, /*pos=*/0)\n+  if (!tree_fits_shwi_p (arg)\n       || !INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n     goto invalid;\n \n@@ -11243,14 +11243,14 @@ warn_for_sign_compare (location_t location,\n       if (TREE_CODE (op1) == BIT_NOT_EXPR)\n \top1 = c_common_get_narrower (TREE_OPERAND (op1, 0), &unsignedp1);\n \n-      if (host_integerp (op0, 0) || host_integerp (op1, 0))\n+      if (tree_fits_shwi_p (op0) || tree_fits_shwi_p (op1))\n         {\n           tree primop;\n           HOST_WIDE_INT constant, mask;\n           int unsignedp;\n           unsigned int bits;\n \n-          if (host_integerp (op0, 0))\n+          if (tree_fits_shwi_p (op0))\n             {\n               primop = op1;\n               unsignedp = unsignedp1;"}, {"sha": "d0c07e4135421e2839b4c97894a53554e38d0d24", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1459,7 +1459,7 @@ check_format_arg (void *ctx, tree format_tree,\n \t  res->number_non_literal++;\n \t  return;\n \t}\n-      if (!host_integerp (arg1, 0)\n+      if (!tree_fits_shwi_p (arg1)\n \t  || (offset = tree_low_cst (arg1, 0)) < 0)\n \t{\n \t  res->number_non_literal++;\n@@ -1506,7 +1506,7 @@ check_format_arg (void *ctx, tree format_tree,\n       return;\n     }\n   if (TREE_CODE (format_tree) == ARRAY_REF\n-      && host_integerp (TREE_OPERAND (format_tree, 1), 0)\n+      && tree_fits_shwi_p (TREE_OPERAND (format_tree, 1))\n       && (offset += tree_low_cst (TREE_OPERAND (format_tree, 1), 0)) >= 0)\n     format_tree = TREE_OPERAND (format_tree, 0);\n   if (TREE_CODE (format_tree) == VAR_DECL\n@@ -1537,7 +1537,7 @@ check_format_arg (void *ctx, tree format_tree,\n       /* Variable length arrays can't be initialized.  */\n       gcc_assert (TREE_CODE (array_size) == INTEGER_CST);\n \n-      if (host_integerp (array_size, 0))\n+      if (tree_fits_shwi_p (array_size))\n \t{\n \t  HOST_WIDE_INT array_size_value = TREE_INT_CST_LOW (array_size);\n \t  if (array_size_value > 0"}, {"sha": "fd4b8579959ed58aa7dd60e75b3ce36d516bad7b", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -586,7 +586,7 @@ c_pretty_printer::direct_abstract_declarator (tree t)\n \t  tree maxval = TYPE_MAX_VALUE (TYPE_DOMAIN (t));\n \t  tree type = TREE_TYPE (maxval);\n \n-\t  if (host_integerp (maxval, 0))\n+\t  if (tree_fits_shwi_p (maxval))\n \t    pp_wide_integer (this, tree_low_cst (maxval, 0) + 1);\n \t  else\n \t    expression (fold_build2 (PLUS_EXPR, type, maxval,\n@@ -915,7 +915,7 @@ pp_c_integer_constant (c_pretty_printer *pp, tree i)\n     ? TYPE_CANONICAL (TREE_TYPE (i))\n     : TREE_TYPE (i);\n \n-  if (host_integerp (i, 0))\n+  if (tree_fits_shwi_p (i))\n     pp_wide_integer (pp, TREE_INT_CST_LOW (i));\n   else if (host_integerp (i, 1))\n     pp_unsigned_wide_integer (pp, TREE_INT_CST_LOW (i));"}, {"sha": "b2035dfb4746172c8a47c7e875258f69d3ef62ca", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-parser.c: Replace host_integerp (..., 0) with tree_fits_shwi_p\n+\tthroughout.\n+\n 2013-11-15  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* c-parser.c (c_parser_cilk_simd): New."}, {"sha": "58b2ffc0a52bc455f0cc10909fdbaacb566c46e7", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -9736,7 +9736,7 @@ c_parser_omp_clause_collapse (c_parser *parser, tree list)\n   mark_exp_read (num);\n   num = c_fully_fold (num, false, NULL);\n   if (!INTEGRAL_TYPE_P (TREE_TYPE (num))\n-      || !host_integerp (num, 0)\n+      || !tree_fits_shwi_p (num)\n       || (n = tree_low_cst (num, 0)) <= 0\n       || (int) n != n)\n     {"}, {"sha": "dbfcd01874cb0b6e7effc47b916415e037a37d6d", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -5986,7 +5986,7 @@ alpha_stdarg_optimize_hook (struct stdarg_info *si, const_gimple stmt)\n \t  else\n \t    goto escapes;\n \n-\t  if (!host_integerp (gimple_assign_rhs2 (arg2_stmt), 0))\n+\t  if (!tree_fits_shwi_p (gimple_assign_rhs2 (arg2_stmt)))\n \t    goto escapes;\n \n \t  sub = tree_low_cst (gimple_assign_rhs2 (arg2_stmt), 0);"}, {"sha": "94d9389de53f4b82b037b44266bc48b054a4d234", "filename": "gcc/config/c6x/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fconfig%2Fc6x%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fconfig%2Fc6x%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fpredicates.md?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -210,7 +210,7 @@\n         t = DECL_SIZE_UNIT (t);\n       else\n \tt = TYPE_SIZE_UNIT (TREE_TYPE (t));\n-      if (t && host_integerp (t, 0))\n+      if (t && tree_fits_shwi_p (t))\n \t{\n \t  size = tree_low_cst (t, 0);\n \t  if (size < 0)"}, {"sha": "476e06df796de2b4a5a5359a5b34b67ae9edfaf0", "filename": "gcc/config/ia64/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fconfig%2Fia64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fconfig%2Fia64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fpredicates.md?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -72,7 +72,7 @@\n \t    t = DECL_SIZE_UNIT (t);\n \t  else\n \t    t = TYPE_SIZE_UNIT (TREE_TYPE (t));\n-\t  if (t && host_integerp (t, 0))\n+\t  if (t && tree_fits_shwi_p (t))\n \t    {\n \t      size = tree_low_cst (t, 0);\n \t      if (size < 0)"}, {"sha": "71987c6112343a53023aa7f5e91da3173fecc5b8", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1289,7 +1289,7 @@ iq2000_function_arg (cumulative_args_t cum_v, enum machine_mode mode,\n \t    if (TREE_CODE (field) == FIELD_DECL\n \t\t&& TREE_CODE (TREE_TYPE (field)) == REAL_TYPE\n \t\t&& TYPE_PRECISION (TREE_TYPE (field)) == BITS_PER_WORD\n-\t\t&& host_integerp (bit_position (field), 0)\n+\t\t&& tree_fits_shwi_p (bit_position (field))\n \t\t&& int_bit_position (field) % BITS_PER_WORD == 0)\n \t      break;\n "}, {"sha": "055e36afa244af8fcf7e1392a110b245b43fbc73", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -5158,7 +5158,7 @@ mips_function_arg (cumulative_args_t cum_v, enum machine_mode mode,\n \tif (TREE_CODE (field) == FIELD_DECL\n \t    && SCALAR_FLOAT_TYPE_P (TREE_TYPE (field))\n \t    && TYPE_PRECISION (TREE_TYPE (field)) == BITS_PER_WORD\n-\t    && host_integerp (bit_position (field), 0)\n+\t    && tree_fits_shwi_p (bit_position (field))\n \t    && int_bit_position (field) % BITS_PER_WORD == 0)\n \t  break;\n "}, {"sha": "58fab9e5ca9e59c36db71d0f668adaa1e7e408c2", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -10193,7 +10193,7 @@ s390_encode_section_info (tree decl, rtx rtl, int first)\n \tSYMBOL_REF_FLAGS (XEXP (rtl, 0)) |= SYMBOL_FLAG_ALIGN1;\n       if (!DECL_SIZE (decl)\n \t  || !DECL_ALIGN (decl)\n-\t  || !host_integerp (DECL_SIZE (decl), 0)\n+\t  || !tree_fits_shwi_p (DECL_SIZE (decl))\n \t  || (DECL_ALIGN (decl) <= 64\n \t      && DECL_ALIGN (decl) != tree_low_cst (DECL_SIZE (decl), 0)))\n \tSYMBOL_REF_FLAGS (XEXP (rtl, 0)) |= SYMBOL_FLAG_NOT_NATURALLY_ALIGNED;"}, {"sha": "a131d4b258b56d475c127f3e36c392b23145a173", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* error.c, init.c, parser.c, semantics.c: Replace\n+\thost_integerp (..., 0) with tree_fits_shwi_p throughout.\n+\n 2013-11-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/59123"}, {"sha": "7f8607710c84cb7e0c4eb4defa41d8f5d9dcd3e8", "filename": "gcc/cp/error.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -851,7 +851,7 @@ dump_type_suffix (cxx_pretty_printer *pp, tree t, int flags)\n \t  tree max = TYPE_MAX_VALUE (dtype);\n \t  if (integer_all_onesp (max))\n \t    pp_character (pp, '0');\n-\t  else if (host_integerp (max, 0))\n+\t  else if (tree_fits_shwi_p (max))\n \t    pp_wide_integer (pp, tree_low_cst (max, 0) + 1);\n \t  else\n \t    {\n@@ -2285,7 +2285,7 @@ dump_expr (cxx_pretty_printer *pp, tree t, int flags)\n \t      pp_cxx_right_paren (pp);\n \t      break;\n \t    }\n-\t  else if (host_integerp (idx, 0))\n+\t  else if (tree_fits_shwi_p (idx))\n \t    {\n \t      tree virtuals;\n \t      unsigned HOST_WIDE_INT n;"}, {"sha": "c37423c4c5d2cdcaf50af3def91ec193d20a771b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -3662,7 +3662,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n \n   if (from_array\n       || ((type_build_ctor_call (type) || init || explicit_value_init_p)\n-\t  && ! (host_integerp (maxindex, 0)\n+\t  && ! (tree_fits_shwi_p (maxindex)\n \t\t&& (num_initialized_elts\n \t\t    == tree_low_cst (maxindex, 0) + 1))))\n     {"}, {"sha": "72fbd0243934c9b2eb5be4187890aca66c7a5fea", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -26962,7 +26962,7 @@ cp_parser_omp_clause_collapse (cp_parser *parser, tree list, location_t location\n     return list;\n   num = fold_non_dependent_expr (num);\n   if (!INTEGRAL_TYPE_P (TREE_TYPE (num))\n-      || !host_integerp (num, 0)\n+      || !tree_fits_shwi_p (num)\n       || (n = tree_low_cst (num, 0)) <= 0\n       || (int) n != n)\n     {"}, {"sha": "781d37386c36ed041c0f7d3cb6fd2c86863715f7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -8739,8 +8739,8 @@ cxx_eval_bit_field_ref (const constexpr_call *call, tree t,\n \treturn value;\n       if (TREE_CODE (TREE_TYPE (field)) == INTEGER_TYPE\n \t  && TREE_CODE (value) == INTEGER_CST\n-\t  && host_integerp (bitpos, 0)\n-\t  && host_integerp (DECL_SIZE (field), 0))\n+\t  && tree_fits_shwi_p (bitpos)\n+\t  && tree_fits_shwi_p (DECL_SIZE (field)))\n \t{\n \t  HOST_WIDE_INT bit = tree_low_cst (bitpos, 0);\n \t  HOST_WIDE_INT sz = tree_low_cst (DECL_SIZE (field), 0);"}, {"sha": "c486a3d00d5384f5340f24262eceaba24682f1a1", "filename": "gcc/dbxout.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1519,7 +1519,7 @@ dbxout_type_fields (tree type)\n \t  /* Omit fields whose position or size are variable or too large to\n \t     represent.  */\n \t  || (TREE_CODE (tem) == FIELD_DECL\n-\t      && (! host_integerp (bit_position (tem), 0)\n+\t      && (! tree_fits_shwi_p (bit_position (tem))\n \t\t  || ! DECL_SIZE (tem)\n \t\t  || ! host_integerp (DECL_SIZE (tem), 1))))\n \tcontinue;\n@@ -1610,7 +1610,7 @@ dbxout_type_method_1 (tree decl)\n   stabstr_C (c1);\n   stabstr_C (c2);\n \n-  if (DECL_VINDEX (decl) && host_integerp (DECL_VINDEX (decl), 0))\n+  if (DECL_VINDEX (decl) && tree_fits_shwi_p (DECL_VINDEX (decl)))\n     {\n       stabstr_D (tree_low_cst (DECL_VINDEX (decl), 0));\n       stabstr_C (';');\n@@ -1718,7 +1718,7 @@ dbxout_range_type (tree type, tree low, tree high)\n     }\n \n   stabstr_C (';');\n-  if (low && host_integerp (low, 0))\n+  if (low && tree_fits_shwi_p (low))\n     {\n       if (print_int_cst_bounds_in_octal_p (type, low, high))\n         stabstr_O (low);\n@@ -1729,7 +1729,7 @@ dbxout_range_type (tree type, tree low, tree high)\n     stabstr_C ('0');\n \n   stabstr_C (';');\n-  if (high && host_integerp (high, 0))\n+  if (high && tree_fits_shwi_p (high))\n     {\n       if (print_int_cst_bounds_in_octal_p (type, low, high))\n         stabstr_O (high);\n@@ -2516,7 +2516,7 @@ dbxout_expand_expr (tree expr)\n \t  return NULL;\n \tif (offset != NULL)\n \t  {\n-\t    if (!host_integerp (offset, 0))\n+\t    if (!tree_fits_shwi_p (offset))\n \t      return NULL;\n \t    x = adjust_address_nv (x, mode, tree_low_cst (offset, 0));\n \t  }\n@@ -2912,7 +2912,7 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n \t ??? Why do we skip emitting the type and location in this case?  */\n       if (TREE_STATIC (decl) && TREE_READONLY (decl)\n \t  && DECL_INITIAL (decl) != 0\n-\t  && host_integerp (DECL_INITIAL (decl), 0)\n+\t  && tree_fits_shwi_p (DECL_INITIAL (decl))\n \t  && ! TREE_ASM_WRITTEN (decl)\n \t  && (DECL_FILE_SCOPE_P (decl)\n \t      || TREE_CODE (DECL_CONTEXT (decl)) == BLOCK"}, {"sha": "bcfaddadae330f49c56b7fe925e8c25641814fcf", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -14246,16 +14246,16 @@ loc_list_from_tree (tree loc, int want_address)\n       }\n \n     case INTEGER_CST:\n-      if ((want_address || !host_integerp (loc, 0))\n+      if ((want_address || !tree_fits_shwi_p (loc))\n \t  && (ret = cst_pool_loc_descr (loc)))\n \thave_address = 1;\n       else if (want_address == 2\n-\t       && host_integerp (loc, 0)\n+\t       && tree_fits_shwi_p (loc)\n \t       && (ret = address_of_int_loc_descriptor\n \t       \t\t   (int_size_in_bytes (TREE_TYPE (loc)),\n \t       \t\t    tree_low_cst (loc, 0))))\n \thave_address = 1;\n-      else if (host_integerp (loc, 0))\n+      else if (tree_fits_shwi_p (loc))\n \tret = int_loc_descriptor (tree_low_cst (loc, 0));\n       else\n \t{\n@@ -14345,7 +14345,7 @@ loc_list_from_tree (tree loc, int want_address)\n \n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n-      if (host_integerp (TREE_OPERAND (loc, 1), 0))\n+      if (tree_fits_shwi_p (TREE_OPERAND (loc, 1)))\n \t{\n \t  list_ret = loc_list_from_tree (TREE_OPERAND (loc, 0), 0);\n \t  if (list_ret == 0)\n@@ -15526,7 +15526,7 @@ fortran_common (tree decl, HOST_WIDE_INT *value)\n   *value = 0;\n   if (offset != NULL)\n     {\n-      if (!host_integerp (offset, 0))\n+      if (!tree_fits_shwi_p (offset))\n \treturn NULL_TREE;\n       *value = tree_low_cst (offset, 0);\n     }\n@@ -15694,7 +15694,7 @@ native_encode_initializer (tree init, unsigned char *array, int size)\n \t  constructor_elt *ce;\n \n \t  if (TYPE_DOMAIN (type) == NULL_TREE\n-\t      || !host_integerp (TYPE_MIN_VALUE (TYPE_DOMAIN (type)), 0))\n+\t      || !tree_fits_shwi_p (TYPE_MIN_VALUE (TYPE_DOMAIN (type))))\n \t    return false;\n \n \t  fieldsize = int_size_in_bytes (TREE_TYPE (type));\n@@ -15768,7 +15768,7 @@ native_encode_initializer (tree init, unsigned char *array, int size)\n \t\t  && ! TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (field))))\n \t\treturn false;\n \t      else if (DECL_SIZE_UNIT (field) == NULL_TREE\n-\t\t       || !host_integerp (DECL_SIZE_UNIT (field), 0))\n+\t\t       || !tree_fits_shwi_p (DECL_SIZE_UNIT (field)))\n \t\treturn false;\n \t      fieldsize = tree_low_cst (DECL_SIZE_UNIT (field), 0);\n \t      pos = int_byte_position (field);\n@@ -16160,7 +16160,7 @@ add_bound_info (dw_die_ref subrange_die, enum dwarf_attribute bound_attr, tree b\n \n \t/* Use the default if possible.  */\n \tif (bound_attr == DW_AT_lower_bound\n-\t    && host_integerp (bound, 0)\n+\t    && tree_fits_shwi_p (bound)\n \t    && (dflt = lower_bound_default ()) != -1\n \t    && tree_low_cst (bound, 0) == dflt)\n \t  ;\n@@ -16394,7 +16394,7 @@ add_bit_offset_attribute (dw_die_ref die, tree decl)\n   /* We can't yet handle bit-fields whose offsets are variable, so if we\n      encounter such things, just return without generating any attribute\n      whatsoever.  Likewise for variable or too large size.  */\n-  if (! host_integerp (bit_position (decl), 0)\n+  if (! tree_fits_shwi_p (bit_position (decl))\n       || ! host_integerp (DECL_SIZE (decl), 1))\n     return;\n \n@@ -16505,7 +16505,7 @@ add_pure_or_virtual_attribute (dw_die_ref die, tree func_decl)\n     {\n       add_AT_unsigned (die, DW_AT_virtuality, DW_VIRTUALITY_virtual);\n \n-      if (host_integerp (DECL_VINDEX (func_decl), 0))\n+      if (tree_fits_shwi_p (DECL_VINDEX (func_decl)))\n \tadd_AT_loc (die, DW_AT_vtable_elem_location,\n \t\t    new_loc_descr (DW_OP_constu,\n \t\t\t\t   tree_low_cst (DECL_VINDEX (func_decl), 0),\n@@ -17055,7 +17055,7 @@ descr_info_loc (tree val, tree base_decl)\n     case VAR_DECL:\n       return loc_descriptor_from_tree (val, 0);\n     case INTEGER_CST:\n-      if (host_integerp (val, 0))\n+      if (tree_fits_shwi_p (val))\n \treturn int_loc_descriptor (tree_low_cst (val, 0));\n       break;\n     case INDIRECT_REF:\n@@ -17119,7 +17119,7 @@ add_descr_info_field (dw_die_ref die, enum dwarf_attribute attr,\n {\n   dw_loc_descr_ref loc;\n \n-  if (host_integerp (val, 0))\n+  if (tree_fits_shwi_p (val))\n     {\n       add_AT_unsigned (die, attr, tree_low_cst (val, 0));\n       return;\n@@ -17172,7 +17172,7 @@ gen_descr_array_type_die (tree type, struct array_descr_info *info,\n \t  /* If it is the default value, omit it.  */\n \t  int dflt;\n \n-\t  if (host_integerp (info->dimen[dim].lower_bound, 0)\n+\t  if (tree_fits_shwi_p (info->dimen[dim].lower_bound)\n \t      && (dflt = lower_bound_default ()) != -1\n \t      && tree_low_cst (info->dimen[dim].lower_bound, 0) == dflt)\n \t    ;\n@@ -17322,7 +17322,7 @@ gen_enumeration_type_die (tree type, dw_die_ref context_die)\n \t    value = DECL_INITIAL (value);\n \n \t  if (simple_type_size_in_bits (TREE_TYPE (value))\n-\t      <= HOST_BITS_PER_WIDE_INT || host_integerp (value, 0))\n+\t      <= HOST_BITS_PER_WIDE_INT || tree_fits_shwi_p (value))\n \t    /* DWARF2 does not provide a way of indicating whether or\n \t       not enumeration constants are signed or unsigned.  GDB\n \t       always assumes the values are signed, so we output all\n@@ -23112,7 +23112,7 @@ optimize_location_into_implicit_ptr (dw_die_ref die, tree decl)\n      we can add DW_OP_GNU_implicit_pointer.  */\n   STRIP_NOPS (init);\n   if (TREE_CODE (init) == POINTER_PLUS_EXPR\n-      && host_integerp (TREE_OPERAND (init, 1), 0))\n+      && tree_fits_shwi_p (TREE_OPERAND (init, 1)))\n     {\n       offset = tree_low_cst (TREE_OPERAND (init, 1), 0);\n       init = TREE_OPERAND (init, 0);"}, {"sha": "63d4024b793dd7778bd2ad6ed7ec62f78af52e6c", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -2050,7 +2050,7 @@ expand_builtin_eh_common (tree region_nr_t)\n   HOST_WIDE_INT region_nr;\n   eh_region region;\n \n-  gcc_assert (host_integerp (region_nr_t, 0));\n+  gcc_assert (tree_fits_shwi_p (region_nr_t));\n   region_nr = tree_low_cst (region_nr_t, 0);\n \n   region = (*cfun->eh->region_array)[region_nr];"}, {"sha": "a9457690c5a7cbfb88bfde0cd591ae5ee8d91ddc", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -282,7 +282,7 @@ int_expr_size (tree exp)\n       gcc_assert (size);\n     }\n \n-  if (size == 0 || !host_integerp (size, 0))\n+  if (size == 0 || !tree_fits_shwi_p (size))\n     return -1;\n \n   return tree_low_cst (size, 0);"}, {"sha": "5fbba60706a75fc06223b19d249d621ff7de69dd", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -5918,8 +5918,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t      mode = VOIDmode;\n \n \t    offset = DECL_FIELD_OFFSET (field);\n-\t    if (host_integerp (offset, 0)\n-\t\t&& host_integerp (bit_position (field), 0))\n+\t    if (tree_fits_shwi_p (offset)\n+\t\t&& tree_fits_shwi_p (bit_position (field)))\n \t      {\n \t\tbitpos = int_bit_position (field);\n \t\toffset = 0;\n@@ -6008,8 +6008,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \tdomain = TYPE_DOMAIN (type);\n \tconst_bounds_p = (TYPE_MIN_VALUE (domain)\n \t\t\t  && TYPE_MAX_VALUE (domain)\n-\t\t\t  && host_integerp (TYPE_MIN_VALUE (domain), 0)\n-\t\t\t  && host_integerp (TYPE_MAX_VALUE (domain), 0));\n+\t\t\t  && tree_fits_shwi_p (TYPE_MIN_VALUE (domain))\n+\t\t\t  && tree_fits_shwi_p (TYPE_MAX_VALUE (domain)));\n \n \t/* If we have constant bounds for the range of the type, get them.  */\n \tif (const_bounds_p)\n@@ -6118,8 +6118,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \n \t\t/* If the range is constant and \"small\", unroll the loop.  */\n \t\tif (const_bounds_p\n-\t\t    && host_integerp (lo_index, 0)\n-\t\t    && host_integerp (hi_index, 0)\n+\t\t    && tree_fits_shwi_p (lo_index)\n+\t\t    && tree_fits_shwi_p (hi_index)\n \t\t    && (lo = tree_low_cst (lo_index, 0),\n \t\t\thi = tree_low_cst (hi_index, 0),\n \t\t\tcount = hi - lo + 1,\n@@ -6207,7 +6207,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t    emit_label (loop_end);\n \t\t  }\n \t      }\n-\t    else if ((index != 0 && ! host_integerp (index, 0))\n+\t    else if ((index != 0 && ! tree_fits_shwi_p (index))\n \t\t     || ! host_integerp (TYPE_SIZE (elttype), 1))\n \t      {\n \t\ttree position;\n@@ -8538,7 +8538,7 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n \t indexed address, for machines that support that.  */\n \n       if (modifier == EXPAND_SUM && mode == ptr_mode\n-\t  && host_integerp (treeop1, 0))\n+\t  && tree_fits_shwi_p (treeop1))\n \t{\n \t  tree exp1 = treeop1;\n "}, {"sha": "6dc71dce6aeaaa1b6459333bc88a21fdd40068d6", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -94,7 +94,7 @@ struct locate_and_pad_arg_data\n #define ADD_PARM_SIZE(TO, INC)\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n   tree inc = (INC);\t\t\t\t\t\t\\\n-  if (host_integerp (inc, 0))\t\t\t\t\t\\\n+  if (tree_fits_shwi_p (inc))\t\t\t\t\t\\\n     (TO).constant += tree_low_cst (inc, 0);\t\t\t\\\n   else if ((TO).var == 0)\t\t\t\t\t\\\n     (TO).var = fold_convert (ssizetype, inc);\t\t\t\\\n@@ -106,7 +106,7 @@ do {\t\t\t\t\t\t\t\t\\\n #define SUB_PARM_SIZE(TO, DEC)\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n   tree dec = (DEC);\t\t\t\t\t\t\\\n-  if (host_integerp (dec, 0))\t\t\t\t\t\\\n+  if (tree_fits_shwi_p (dec))\t\t\t\t\t\\\n     (TO).constant -= tree_low_cst (dec, 0);\t\t\t\\\n   else if ((TO).var == 0)\t\t\t\t\t\\\n     (TO).var = size_binop (MINUS_EXPR, ssize_int (0),\t\t\\"}, {"sha": "d6187bf4997d9dfc1b76bec4a00bd03b3ac365d8", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -3420,7 +3420,7 @@ make_bit_field_ref (location_t loc, tree inner, tree type,\n       tree size = TYPE_SIZE (TREE_TYPE (inner));\n       if ((INTEGRAL_TYPE_P (TREE_TYPE (inner))\n \t   || POINTER_TYPE_P (TREE_TYPE (inner)))\n-\t  && host_integerp (size, 0)\n+\t  && tree_fits_shwi_p (size)\n \t  && tree_low_cst (size, 0) == bitsize)\n \treturn fold_convert_loc (loc, type, inner);\n     }\n@@ -7255,8 +7255,8 @@ fold_plusminus_mult_expr (location_t loc, enum tree_code code, tree type,\n   /* No identical multiplicands; see if we can find a common\n      power-of-two factor in non-power-of-two multiplies.  This\n      can help in multi-dimensional array access.  */\n-  else if (host_integerp (arg01, 0)\n-\t   && host_integerp (arg11, 0))\n+  else if (tree_fits_shwi_p (arg01)\n+\t   && tree_fits_shwi_p (arg11))\n     {\n       HOST_WIDE_INT int01, int11, tmp;\n       bool swap = false;\n@@ -7488,7 +7488,7 @@ native_encode_string (const_tree expr, unsigned char *ptr, int len)\n   if (TREE_CODE (type) != ARRAY_TYPE\n       || TREE_CODE (TREE_TYPE (type)) != INTEGER_TYPE\n       || GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (type))) != BITS_PER_UNIT\n-      || !host_integerp (TYPE_SIZE_UNIT (type), 0))\n+      || !tree_fits_shwi_p (TYPE_SIZE_UNIT (type)))\n     return 0;\n   total_bytes = tree_low_cst (TYPE_SIZE_UNIT (type), 0);\n   if (total_bytes > len)\n@@ -9089,7 +9089,7 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t      indirect_base0 = true;\n \t    }\n \t  offset0 = TREE_OPERAND (arg0, 1);\n-\t  if (host_integerp (offset0, 0))\n+\t  if (tree_fits_shwi_p (offset0))\n \t    {\n \t      HOST_WIDE_INT off = size_low_cst (offset0);\n \t      if ((HOST_WIDE_INT) (((unsigned HOST_WIDE_INT) off)\n@@ -9123,7 +9123,7 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t      indirect_base1 = true;\n \t    }\n \t  offset1 = TREE_OPERAND (arg1, 1);\n-\t  if (host_integerp (offset1, 0))\n+\t  if (tree_fits_shwi_p (offset1))\n \t    {\n \t      HOST_WIDE_INT off = size_low_cst (offset1);\n \t      if ((HOST_WIDE_INT) (((unsigned HOST_WIDE_INT) off)\n@@ -12676,9 +12676,9 @@ fold_binary_loc (location_t loc,\n       if (((code == LSHIFT_EXPR && TREE_CODE (arg0) == RSHIFT_EXPR)\n            || (TYPE_UNSIGNED (type)\n \t       && code == RSHIFT_EXPR && TREE_CODE (arg0) == LSHIFT_EXPR))\n-\t  && host_integerp (arg1, false)\n+\t  && tree_fits_shwi_p (arg1)\n \t  && TREE_INT_CST_LOW (arg1) < prec\n-\t  && host_integerp (TREE_OPERAND (arg0, 1), false)\n+\t  && tree_fits_shwi_p (TREE_OPERAND (arg0, 1))\n \t  && TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1)) < prec)\n \t{\n \t  HOST_WIDE_INT low0 = TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1));"}, {"sha": "88761bb42e1ca506859859640912c8189d1e99a9", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -2720,7 +2720,7 @@ get_base_constructor (tree base, HOST_WIDE_INT *bit_offset,\n     {\n       if (!integer_zerop (TREE_OPERAND (base, 1)))\n \t{\n-\t  if (!host_integerp (TREE_OPERAND (base, 1), 0))\n+\t  if (!tree_fits_shwi_p (TREE_OPERAND (base, 1)))\n \t    return NULL_TREE;\n \t  *bit_offset += (mem_ref_offset (base).low\n \t\t\t  * BITS_PER_UNIT);"}, {"sha": "51bf7c7c01fc4808745c440c61ab98905d04a7cd", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -609,7 +609,7 @@ stmt_cost (gimple gs, bool speed)\n     case MULT_EXPR:\n       rhs2 = gimple_assign_rhs2 (gs);\n \n-      if (host_integerp (rhs2, 0))\n+      if (tree_fits_shwi_p (rhs2))\n \treturn mult_by_coeff_cost (TREE_INT_CST_LOW (rhs2), lhs_mode, speed);\n \n       gcc_assert (TREE_CODE (rhs1) != INTEGER_CST);"}, {"sha": "10d7edc1a39d3ad7924ae74749ae512eee049970", "filename": "gcc/gimple.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -2098,8 +2098,8 @@ gimple_compare_field_offset (tree f1, tree f2)\n   /* Fortran and C do not always agree on what DECL_OFFSET_ALIGN\n      should be, so handle differing ones specially by decomposing\n      the offset into a byte and bit offset manually.  */\n-  if (host_integerp (DECL_FIELD_OFFSET (f1), 0)\n-      && host_integerp (DECL_FIELD_OFFSET (f2), 0))\n+  if (tree_fits_shwi_p (DECL_FIELD_OFFSET (f1))\n+      && tree_fits_shwi_p (DECL_FIELD_OFFSET (f2)))\n     {\n       unsigned HOST_WIDE_INT byte_offset1, byte_offset2;\n       unsigned HOST_WIDE_INT bit_offset1, bit_offset2;"}, {"sha": "6346004306780871dab2ae547c83ecd38980f6bc", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gofrontend/expressions.cc: Replace host_integerp (..., 0) with\n+\ttree_fits_shwi_p throughout.\n+\n 2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* go-lang.c: Include only gimplify.h and gimple.h as needed."}, {"sha": "ca1bb98f9ffb6c71f91d6f1b85af94b7e11e183c", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -3343,7 +3343,7 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n       tree int_type_tree = type_to_tree(int_type->get_backend(gogo));\n \n       expr_tree = fold_convert(int_type_tree, expr_tree);\n-      if (host_integerp(expr_tree, 0))\n+      if (tree_fits_shwi_p (expr_tree))\n \t{\n \t  HOST_WIDE_INT intval = tree_low_cst(expr_tree, 0);\n \t  std::string s;"}, {"sha": "8ae38e5f12404f5a1ec9f30b5c345e57a4986c10", "filename": "gcc/godump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -728,7 +728,7 @@ go_format_type (struct godump_container *container, tree type,\n \t  && tree_int_cst_sgn (TYPE_MIN_VALUE (TYPE_DOMAIN (type))) == 0\n \t  && TYPE_MAX_VALUE (TYPE_DOMAIN (type)) != NULL_TREE\n \t  && TREE_CODE (TYPE_MAX_VALUE (TYPE_DOMAIN (type))) == INTEGER_CST\n-\t  && host_integerp (TYPE_MAX_VALUE (TYPE_DOMAIN (type)), 0))\n+\t  && tree_fits_shwi_p (TYPE_MAX_VALUE (TYPE_DOMAIN (type))))\n \t{\n \t  char buf[100];\n \n@@ -981,7 +981,7 @@ go_output_typedef (struct godump_container *container, tree decl)\n \t  if (*slot != NULL)\n \t    macro_hash_del (*slot);\n \n-\t  if (host_integerp (TREE_VALUE (element), 0))\n+\t  if (tree_fits_shwi_p (TREE_VALUE (element)))\n \t    snprintf (buf, sizeof buf, HOST_WIDE_INT_PRINT_DEC,\n \t\t     tree_low_cst (TREE_VALUE (element), 0));\n \t  else if (host_integerp (TREE_VALUE (element), 1))"}, {"sha": "7b0ae7ea74dfe45d9071fe725a5e3336288fdc9c", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -170,10 +170,10 @@ graphite_can_represent_init (tree e)\n     case MULT_EXPR:\n       if (chrec_contains_symbols (TREE_OPERAND (e, 0)))\n \treturn graphite_can_represent_init (TREE_OPERAND (e, 0))\n-\t  && host_integerp (TREE_OPERAND (e, 1), 0);\n+\t  && tree_fits_shwi_p (TREE_OPERAND (e, 1));\n       else\n \treturn graphite_can_represent_init (TREE_OPERAND (e, 1))\n-\t  && host_integerp (TREE_OPERAND (e, 0), 0);\n+\t  && tree_fits_shwi_p (TREE_OPERAND (e, 0));\n \n     case PLUS_EXPR:\n     case POINTER_PLUS_EXPR:"}, {"sha": "1b2cd998f2cd223a6f0eec94f3fd20b1acec9b1b", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1508,9 +1508,9 @@ pdr_add_data_dimensions (isl_set *extent, scop_p scop, data_reference_p dr)\n          subscript - low >= 0 and high - subscript >= 0 in case one of\n \t the two bounds isn't known.  Do the same here?  */\n \n-      if (host_integerp (low, 0)\n+      if (tree_fits_shwi_p (low)\n \t  && high\n-\t  && host_integerp (high, 0)\n+\t  && tree_fits_shwi_p (high)\n \t  /* 1-element arrays at end of structures may extend over\n \t     their declared size.  */\n \t  && !(array_at_struct_end_p (ref)"}, {"sha": "01d50f2c111a698ff2895f627655fe7bd8fbce9f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* class.c, expr.c: Replace host_integerp (..., 0) with\n+\ttree_fits_shwi_p throughout.\n+\n 2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* java-gimplify.c: Include only gimplify.h and gimple.h as needed."}, {"sha": "5eb245e5376c92349a6f6f394e11e45e63fe4a77", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1592,7 +1592,7 @@ get_dispatch_vector (tree type)\n \t{\n \t  tree method_index = get_method_index (method);\n \t  if (method_index != NULL_TREE\n-\t      && host_integerp (method_index, 0))\n+\t      && tree_fits_shwi_p (method_index))\n \t    TREE_VEC_ELT (vtable, tree_low_cst (method_index, 0)) = method;\n \t}\n     }"}, {"sha": "0720065717cf1da24f10f9df1fe8fc18c5220a82", "filename": "gcc/java/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1049,7 +1049,7 @@ build_newarray (int atype_value, tree length)\n   tree prim_type = decode_newarray_type (atype_value);\n   tree type\n     = build_java_array_type (prim_type,\n-\t\t\t     host_integerp (length, 0) == INTEGER_CST\n+\t\t\t     tree_fits_shwi_p (length) == INTEGER_CST\n \t\t\t     ? tree_low_cst (length, 0) : -1);\n \n   /* Pass a reference to the primitive type class and save the runtime\n@@ -1069,7 +1069,7 @@ build_anewarray (tree class_type, tree length)\n {\n   tree type\n     = build_java_array_type (class_type,\n-\t\t\t     host_integerp (length, 0)\n+\t\t\t     tree_fits_shwi_p (length)\n \t\t\t     ? tree_low_cst (length, 0) : -1);\n \n   return build_call_nary (promote_type (type),"}, {"sha": "f67494b47af99d289dcee800fff9c2cefe094a37", "filename": "gcc/omp-low.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -2290,7 +2290,7 @@ check_omp_nesting_restrictions (gimple stmt, omp_context *ctx)\n \t\t\t: \"#pragma omp cancellation point\");\n \t      return false;\n \t    }\n-\t  switch (host_integerp (gimple_call_arg (stmt, 0), 0)\n+\t  switch (tree_fits_shwi_p (gimple_call_arg (stmt, 0))\n \t\t  ? tree_low_cst (gimple_call_arg (stmt, 0), 0)\n \t\t  : 0)\n \t    {\n@@ -8832,7 +8832,7 @@ lower_omp_for_lastprivate (struct omp_for_data *fd, gimple_seq *body_p,\n \n   /* When possible, use a strict equality expression.  This can let VRP\n      type optimizations deduce the value and remove a copy.  */\n-  if (host_integerp (fd->loop.step, 0))\n+  if (tree_fits_shwi_p (fd->loop.step))\n     {\n       HOST_WIDE_INT step = TREE_INT_CST_LOW (fd->loop.step);\n       if (step == 1 || step == -1)\n@@ -8852,7 +8852,7 @@ lower_omp_for_lastprivate (struct omp_for_data *fd, gimple_seq *body_p,\n       /* Optimize: v = 0; is usually cheaper than v = some_other_constant.  */\n       vinit = fd->loop.n1;\n       if (cond_code == EQ_EXPR\n-\t  && host_integerp (fd->loop.n2, 0)\n+\t  && tree_fits_shwi_p (fd->loop.n2)\n \t  && ! integer_zerop (fd->loop.n2))\n \tvinit = build_int_cst (TREE_TYPE (fd->loop.v), 0);\n       else"}, {"sha": "25367825ce928395131cf463ba108b4fe88e8f8f", "filename": "gcc/predict.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1053,14 +1053,14 @@ strips_small_constant (tree t1, tree t2)\n     return NULL;\n   else if (TREE_CODE (t1) == SSA_NAME)\n     ret = t1;\n-  else if (host_integerp (t1, 0))\n+  else if (tree_fits_shwi_p (t1))\n     value = tree_low_cst (t1, 0);\n   else\n     return NULL;\n \n   if (!t2)\n     return ret;\n-  else if (host_integerp (t2, 0))\n+  else if (tree_fits_shwi_p (t2))\n     value = tree_low_cst (t2, 0);\n   else if (TREE_CODE (t2) == SSA_NAME)\n     {\n@@ -1157,7 +1157,7 @@ is_comparison_with_loop_invariant_p (gimple stmt, struct loop *loop,\n \tcode = invert_tree_comparison (code, false);\n       bound = iv0.base;\n       base = iv1.base;\n-      if (host_integerp (iv1.step, 0))\n+      if (tree_fits_shwi_p (iv1.step))\n \tstep = iv1.step;\n       else\n \treturn false;\n@@ -1166,7 +1166,7 @@ is_comparison_with_loop_invariant_p (gimple stmt, struct loop *loop,\n     {\n       bound = iv1.base;\n       base = iv0.base;\n-      if (host_integerp (iv0.step, 0))\n+      if (tree_fits_shwi_p (iv0.step))\n \tstep = iv0.step;\n       else\n \treturn false;\n@@ -1300,9 +1300,9 @@ predict_iv_comparison (struct loop *loop, basic_block bb,\n \n   /* If loop bound, base and compare bound are all constants, we can\n      calculate the probability directly.  */\n-  if (host_integerp (loop_bound_var, 0)\n-      && host_integerp (compare_var, 0)\n-      && host_integerp (compare_base, 0))\n+  if (tree_fits_shwi_p (loop_bound_var)\n+      && tree_fits_shwi_p (compare_var)\n+      && tree_fits_shwi_p (compare_base))\n     {\n       int probability;\n       bool of, overflow = false;"}, {"sha": "4f1e4ee58260cc23775129102dd0445a7d193fce", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -279,7 +279,7 @@ rtx_addr_can_trap_p_1 (const_rtx x, HOST_WIDE_INT offset, HOST_WIDE_INT size,\n \t  if (!decl)\n \t    decl_size = -1;\n \t  else if (DECL_P (decl) && DECL_SIZE_UNIT (decl))\n-\t    decl_size = (host_integerp (DECL_SIZE_UNIT (decl), 0)\n+\t    decl_size = (tree_fits_shwi_p (DECL_SIZE_UNIT (decl))\n \t\t\t ? tree_low_cst (DECL_SIZE_UNIT (decl), 0)\n \t\t\t : -1);\n \t  else if (TREE_CODE (decl) == STRING_CST)"}, {"sha": "66682a3c21ec9c25514458ebc96b2f78d187ce14", "filename": "gcc/sdbout.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -535,8 +535,8 @@ plain_type_1 (tree type, int level)\n \t    = (TYPE_DOMAIN (type)\n \t       && TYPE_MIN_VALUE (TYPE_DOMAIN (type)) != 0\n \t       && TYPE_MAX_VALUE (TYPE_DOMAIN (type)) != 0\n-\t       && host_integerp (TYPE_MAX_VALUE (TYPE_DOMAIN (type)), 0)\n-\t       && host_integerp (TYPE_MIN_VALUE (TYPE_DOMAIN (type)), 0)\n+\t       && tree_fits_shwi_p (TYPE_MAX_VALUE (TYPE_DOMAIN (type)))\n+\t       && tree_fits_shwi_p (TYPE_MIN_VALUE (TYPE_DOMAIN (type)))\n \t       ? (tree_low_cst (TYPE_MAX_VALUE (TYPE_DOMAIN (type)), 0)\n \t\t  - tree_low_cst (TYPE_MIN_VALUE (TYPE_DOMAIN (type)), 0) + 1)\n \t       : 0);\n@@ -995,7 +995,7 @@ sdbout_field_types (tree type)\n \t&& DECL_NAME (tail)\n \t&& DECL_SIZE (tail)\n \t&& host_integerp (DECL_SIZE (tail), 1)\n-\t&& host_integerp (bit_position (tail), 0))\n+\t&& tree_fits_shwi_p (bit_position (tail)))\n       {\n \tif (POINTER_TYPE_P (TREE_TYPE (tail)))\n \t  sdbout_one_type (TREE_TYPE (TREE_TYPE (tail)));\n@@ -1152,7 +1152,7 @@ sdbout_one_type (tree type)\n \t        if (TREE_CODE (value) == CONST_DECL)\n \t          value = DECL_INITIAL (value);\n \n-\t        if (host_integerp (value, 0))\n+\t        if (tree_fits_shwi_p (value))\n \t\t  {\n \t\t    PUT_SDB_DEF (IDENTIFIER_POINTER (TREE_PURPOSE (tem)));\n \t\t    PUT_SDB_INT_VAL (tree_low_cst (value, 0));\n@@ -1174,7 +1174,7 @@ sdbout_one_type (tree type)\n \t\t&& DECL_NAME (tem)\n \t\t&& DECL_SIZE (tem)\n \t\t&& host_integerp (DECL_SIZE (tem), 1)\n-\t\t&& host_integerp (bit_position (tem), 0))\n+\t\t&& tree_fits_shwi_p (bit_position (tem)))\n \t      {\n \t\tconst char *name;\n "}, {"sha": "6e174e5575c1f4ab0df29bd721b98a380cafe019", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -298,7 +298,7 @@ delegitimize_mem_from_attrs (rtx x)\n \t\t\t\t\t&mode, &unsignedp, &volatilep, false);\n \t    if (bitsize != GET_MODE_BITSIZE (mode)\n \t\t|| (bitpos % BITS_PER_UNIT)\n-\t\t|| (toffset && !host_integerp (toffset, 0)))\n+\t\t|| (toffset && !tree_fits_shwi_p (toffset)))\n \t      decl = NULL;\n \t    else\n \t      {"}, {"sha": "d6a8687bddef5ba4872b8bcc906b836f0a027bde", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1300,8 +1300,8 @@ place_field (record_layout_info rli, tree field)\n \t  if (DECL_BIT_FIELD_TYPE (field)\n \t      && !integer_zerop (DECL_SIZE (field))\n \t      && !integer_zerop (DECL_SIZE (rli->prev_field))\n-\t      && host_integerp (DECL_SIZE (rli->prev_field), 0)\n-\t      && host_integerp (TYPE_SIZE (type), 0)\n+\t      && tree_fits_shwi_p (DECL_SIZE (rli->prev_field))\n+\t      && tree_fits_shwi_p (TYPE_SIZE (type))\n \t      && simple_cst_equal (TYPE_SIZE (type), TYPE_SIZE (prev_type)))\n \t    {\n \t      /* We're in the middle of a run of equal type size fields; make"}, {"sha": "c0ee654561c9f1424188db510ac4870c52a1e5e0", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -2838,14 +2838,14 @@ gcd_of_steps_may_divide_p (const_tree chrec, const_tree cst)\n   HOST_WIDE_INT cd = 0, val;\n   tree step;\n \n-  if (!host_integerp (cst, 0))\n+  if (!tree_fits_shwi_p (cst))\n     return true;\n   val = tree_low_cst (cst, 0);\n \n   while (TREE_CODE (chrec) == POLYNOMIAL_CHREC)\n     {\n       step = CHREC_RIGHT (chrec);\n-      if (!host_integerp (step, 0))\n+      if (!tree_fits_shwi_p (step))\n \treturn true;\n       cd = gcd (cd, tree_low_cst (step, 0));\n       chrec = CHREC_LEFT (chrec);"}, {"sha": "83fe0d81100197a6b23a23c537756d471b64d949", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -455,8 +455,8 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t\t      {\n \t\t\ttree fsize = DECL_SIZE_UNIT (field);\n \t\t\ttree ssize = TYPE_SIZE_UNIT (stype);\n-\t\t\tif (host_integerp (fsize, 0)\n-\t\t\t    && host_integerp (ssize, 0)\n+\t\t\tif (tree_fits_shwi_p (fsize)\n+\t\t\t    && tree_fits_shwi_p (ssize)\n \t\t\t    && doffset.fits_shwi ())\n \t\t\t  maxsize += ((TREE_INT_CST_LOW (ssize)\n \t\t\t\t       - TREE_INT_CST_LOW (fsize))"}, {"sha": "6a1c678df36cb3297b14755671b9a613739f6f76", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -272,7 +272,7 @@ dump_array_domain (pretty_printer *buffer, tree domain, int spc, int flags)\n \n       if (min && max\n \t  && integer_zerop (min)\n-\t  && host_integerp (max, 0))\n+\t  && tree_fits_shwi_p (max))\n \tpp_wide_integer (buffer, TREE_INT_CST_LOW (max) + 1);\n       else\n \t{"}, {"sha": "2ac9ba1f0042418a1627454e0bd018bdd22faa5c", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -752,7 +752,7 @@ type_internals_preclude_sra_p (tree type, const char **msg)\n \t        *msg = \"structure field size not fixed\";\n \t\treturn true;\n \t      }\n-\t    if (!host_integerp (bit_position (fld), 0))\n+\t    if (!tree_fits_shwi_p (bit_position (fld)))\n \t      {\n \t        *msg = \"structure field size too big\";\n \t\treturn true;\n@@ -2119,7 +2119,7 @@ expr_with_var_bounded_array_refs_p (tree expr)\n   while (handled_component_p (expr))\n     {\n       if (TREE_CODE (expr) == ARRAY_REF\n-\t  && !host_integerp (array_ref_low_bound (expr), 0))\n+\t  && !tree_fits_shwi_p (array_ref_low_bound (expr)))\n \treturn true;\n       expr = TREE_OPERAND (expr, 0);\n     }"}, {"sha": "c1028fb760623a0b8cc380b714052d2a64f47b7a", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -614,7 +614,7 @@ ao_ref_init_from_ptr_and_size (ao_ref *ref, tree ptr, tree size)\n     }\n   ref->offset += extra_offset;\n   if (size\n-      && host_integerp (size, 0)\n+      && tree_fits_shwi_p (size)\n       && TREE_INT_CST_LOW (size) * BITS_PER_UNIT / BITS_PER_UNIT\n \t == TREE_INT_CST_LOW (size))\n     ref->max_size = ref->size = TREE_INT_CST_LOW (size) * BITS_PER_UNIT;\n@@ -2108,7 +2108,7 @@ stmt_kills_ref_p_1 (gimple stmt, ao_ref *ref)\n \t    {\n \t      tree dest = gimple_call_arg (stmt, 0);\n \t      tree len = gimple_call_arg (stmt, 2);\n-\t      if (!host_integerp (len, 0))\n+\t      if (!tree_fits_shwi_p (len))\n \t\treturn false;\n \t      tree rbase = ref->base;\n \t      double_int roffset = double_int::from_shwi (ref->offset);"}, {"sha": "e793dbfe88c8d98457ee231548b0b8e2fa402d32", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1527,7 +1527,7 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n \t  char *src_buf;\n \t  use_operand_p use_p;\n \n-\t  if (!host_integerp (val2, 0)\n+\t  if (!tree_fits_shwi_p (val2)\n \t      || !host_integerp (len2, 1))\n \t    break;\n \t  if (is_gimple_call (stmt1))\n@@ -1569,7 +1569,7 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n \t      src1 = gimple_assign_rhs1 (stmt1);\n \t      if (TREE_CODE (ptr1) != MEM_REF\n \t\t  || TYPE_MODE (TREE_TYPE (ptr1)) != TYPE_MODE (char_type_node)\n-\t\t  || !host_integerp (src1, 0))\n+\t\t  || !tree_fits_shwi_p (src1))\n \t\tbreak;\n \t      ptr1 = build_fold_addr_expr (ptr1);\n \t      callee1 = NULL_TREE;\n@@ -2354,7 +2354,7 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t/* Check for one shift count being Y and the other B - Y,\n \t   with optional casts.  */\n \tif (cdef_code[i] == MINUS_EXPR\n-\t    && host_integerp (cdef_arg1[i], 0)\n+\t    && tree_fits_shwi_p (cdef_arg1[i])\n \t    && tree_low_cst (cdef_arg1[i], 0) == TYPE_PRECISION (rtype)\n \t    && TREE_CODE (cdef_arg2[i]) == SSA_NAME)\n \t  {\n@@ -2386,7 +2386,7 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t   This alternative is safe even for rotation count of 0.\n \t   One shift count is Y and the other (-Y) & (B - 1).  */\n \telse if (cdef_code[i] == BIT_AND_EXPR\n-\t\t && host_integerp (cdef_arg2[i], 0)\n+\t\t && tree_fits_shwi_p (cdef_arg2[i])\n \t\t && tree_low_cst (cdef_arg2[i], 0)\n \t\t    == TYPE_PRECISION (rtype) - 1\n \t\t && TREE_CODE (cdef_arg1[i]) == SSA_NAME"}, {"sha": "3207dae7c18dabbd0827d12d63c5c3715f32c4cc", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -3970,15 +3970,15 @@ get_loop_invariant_expr_id (struct ivopts_data *data, tree ubase,\n             {\n               tree ind = TREE_OPERAND (usym, 1);\n               if (TREE_CODE (ind) == INTEGER_CST\n-                  && host_integerp (ind, 0)\n+                  && tree_fits_shwi_p (ind)\n                   && TREE_INT_CST_LOW (ind) == 0)\n                 usym = TREE_OPERAND (usym, 0);\n             }\n           if (TREE_CODE (csym) == ARRAY_REF)\n             {\n               tree ind = TREE_OPERAND (csym, 1);\n               if (TREE_CODE (ind) == INTEGER_CST\n-                  && host_integerp (ind, 0)\n+                  && tree_fits_shwi_p (ind)\n                   && TREE_INT_CST_LOW (ind) == 0)\n                 csym = TREE_OPERAND (csym, 0);\n             }"}, {"sha": "e00989527aa44081f097cb6e4bdd4112bfa67304", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1458,7 +1458,7 @@ add_subscript_strides (tree access_fn, unsigned stride,\n       if ((unsigned) loop_depth (aloop) <= min_depth)\n \tcontinue;\n \n-      if (host_integerp (step, 0))\n+      if (tree_fits_shwi_p (step))\n \tastep = tree_low_cst (step, 0);\n       else\n \tastep = L1_CACHE_LINE_SIZE;"}, {"sha": "fb4ce58378d18179e27f28d61c1796924a2e3ea1", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1502,7 +1502,7 @@ execute_cse_sincos (void)\n \t\t    }\n \t\t  else\n \t\t    {\n-\t\t      if (!host_integerp (arg1, 0))\n+\t\t      if (!tree_fits_shwi_p (arg1))\n \t\t\tbreak;\n \n \t\t      n = TREE_INT_CST_LOW (arg1);"}, {"sha": "4fdaba26d0eb76fe3e4e0911fdbfde3522f78599", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -1360,7 +1360,7 @@ add_or_mark_expr (basic_block bb, tree exp,\n \n   if (TREE_CODE (exp) == MEM_REF\n       && TREE_CODE (TREE_OPERAND (exp, 0)) == SSA_NAME\n-      && host_integerp (TREE_OPERAND (exp, 1), 0)\n+      && tree_fits_shwi_p (TREE_OPERAND (exp, 1))\n       && (size = int_size_in_bytes (TREE_TYPE (exp))) > 0)\n     {\n       tree name = TREE_OPERAND (exp, 0);"}, {"sha": "ec5ca02b5b4074f3a441baf007ec2ebe27378d3e", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -3635,7 +3635,7 @@ acceptable_pow_call (gimple stmt, tree *base, HOST_WIDE_INT *exponent)\n       *base = gimple_call_arg (stmt, 0);\n       arg1 = gimple_call_arg (stmt, 1);\n \n-      if (!host_integerp (arg1, 0))\n+      if (!tree_fits_shwi_p (arg1))\n \treturn false;\n \n       *exponent = TREE_INT_CST_LOW (arg1);"}, {"sha": "fe01a4128dc9463fc7910b224945c4ea17ff6505", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -782,7 +782,7 @@ copy_reference_ops_from_ref (tree ref, vec<vn_reference_op_s> *result)\n \tcase MEM_REF:\n \t  /* The base address gets its own vn_reference_op_s structure.  */\n \t  temp.op0 = TREE_OPERAND (ref, 1);\n-\t  if (host_integerp (TREE_OPERAND (ref, 1), 0))\n+\t  if (tree_fits_shwi_p (TREE_OPERAND (ref, 1)))\n \t    temp.off = TREE_INT_CST_LOW (TREE_OPERAND (ref, 1));\n \t  break;\n \tcase BIT_FIELD_REF:\n@@ -1020,9 +1020,9 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n \tcase ARRAY_RANGE_REF:\n \tcase ARRAY_REF:\n \t  /* We recorded the lower bound and the element size.  */\n-\t  if (!host_integerp (op->op0, 0)\n-\t      || !host_integerp (op->op1, 0)\n-\t      || !host_integerp (op->op2, 0))\n+\t  if (!tree_fits_shwi_p (op->op0)\n+\t      || !tree_fits_shwi_p (op->op1)\n+\t      || !tree_fits_shwi_p (op->op2))\n \t    max_size = -1;\n \t  else\n \t    {\n@@ -1156,7 +1156,7 @@ vn_reference_fold_indirect (vec<vn_reference_op_s> *ops,\n       off += double_int::from_shwi (addr_offset);\n       mem_op->op0 = double_int_to_tree (TREE_TYPE (mem_op->op0), off);\n       op->op0 = build_fold_addr_expr (addr_base);\n-      if (host_integerp (mem_op->op0, 0))\n+      if (tree_fits_shwi_p (mem_op->op0))\n \tmem_op->off = TREE_INT_CST_LOW (mem_op->op0);\n       else\n \tmem_op->off = -1;\n@@ -1221,7 +1221,7 @@ vn_reference_maybe_forwprop_address (vec<vn_reference_op_s> *ops,\n     }\n \n   mem_op->op0 = double_int_to_tree (TREE_TYPE (mem_op->op0), off);\n-  if (host_integerp (mem_op->op0, 0))\n+  if (tree_fits_shwi_p (mem_op->op0))\n     mem_op->off = TREE_INT_CST_LOW (mem_op->op0);\n   else\n     mem_op->off = -1;"}, {"sha": "0e66b67bb240fdfe5f648786f88feab40a9d25f6", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -215,7 +215,7 @@ get_stridx (tree exp)\n \n   s = string_constant (exp, &o);\n   if (s != NULL_TREE\n-      && (o == NULL_TREE || host_integerp (o, 0))\n+      && (o == NULL_TREE || tree_fits_shwi_p (o))\n       && TREE_STRING_LENGTH (s) > 0)\n     {\n       HOST_WIDE_INT offset = o ? tree_low_cst (o, 0) : 0;"}, {"sha": "78693a32e893fc0c9ca583acc8323e7c1b3d1d32", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -2994,8 +2994,8 @@ process_constraint (constraint_t t)\n static HOST_WIDE_INT\n bitpos_of_field (const tree fdecl)\n {\n-  if (!host_integerp (DECL_FIELD_OFFSET (fdecl), 0)\n-      || !host_integerp (DECL_FIELD_BIT_OFFSET (fdecl), 0))\n+  if (!tree_fits_shwi_p (DECL_FIELD_OFFSET (fdecl))\n+      || !tree_fits_shwi_p (DECL_FIELD_BIT_OFFSET (fdecl)))\n     return -1;\n \n   return (TREE_INT_CST_LOW (DECL_FIELD_OFFSET (fdecl)) * BITS_PER_UNIT"}, {"sha": "380002161a216abec0b91bedcfac16e81d6e7a69", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -2547,8 +2547,8 @@ vect_analyze_data_ref_accesses (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n \t  if (!host_integerp (sza, 1)\n \t      || !host_integerp (szb, 1)\n \t      || !tree_int_cst_equal (sza, szb)\n-\t      || !host_integerp (DR_STEP (dra), 0)\n-\t      || !host_integerp (DR_STEP (drb), 0)\n+\t      || !tree_fits_shwi_p (DR_STEP (dra))\n+\t      || !tree_fits_shwi_p (DR_STEP (drb))\n \t      || !tree_int_cst_equal (DR_STEP (dra), DR_STEP (drb)))\n \t    break;\n \n@@ -2877,8 +2877,8 @@ vect_prune_runtime_alias_test_list (loop_vec_info loop_vinfo)\n \t  if (!operand_equal_p (DR_BASE_ADDRESS (dr_a1->dr),\n \t\t\t\tDR_BASE_ADDRESS (dr_a2->dr),\n \t\t\t\t0)\n-\t      || !host_integerp (dr_a1->offset, 0)\n-\t      || !host_integerp (dr_a2->offset, 0))\n+\t      || !tree_fits_shwi_p (dr_a1->offset)\n+\t      || !tree_fits_shwi_p (dr_a2->offset))\n \t    continue;\n \n \t  HOST_WIDE_INT diff = TREE_INT_CST_LOW (dr_a2->offset) -\n@@ -3069,7 +3069,7 @@ vect_check_gather (gimple stmt, loop_vec_info loop_vinfo, tree *basep,\n \t    }\n \t  break;\n \tcase MULT_EXPR:\n-\t  if (scale == 1 && host_integerp (op1, 0))\n+\t  if (scale == 1 && tree_fits_shwi_p (op1))\n \t    {\n \t      scale = tree_low_cst (op1, 0);\n \t      off = op0;"}, {"sha": "ba0f4feea6e07fbfc60e0dc9cabe83026d87c85d", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -783,7 +783,7 @@ vect_recog_pow_pattern (vec<gimple> *stmts, tree *type_in,\n   *type_out = NULL_TREE;\n \n   /* Catch squaring.  */\n-  if ((host_integerp (exp, 0)\n+  if ((tree_fits_shwi_p (exp)\n        && tree_low_cst (exp, 0) == 2)\n       || (TREE_CODE (exp) == REAL_CST\n           && REAL_VALUES_EQUAL (TREE_REAL_CST (exp), dconst2)))"}, {"sha": "a6c5b596e9b6a97c213cee6c86c1a4d24f2a578e", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -388,7 +388,7 @@ typedef struct _loop_vec_info {\n (L)->may_alias_ddrs.length () > 0\n \n #define NITERS_KNOWN_P(n)                     \\\n-(host_integerp ((n),0)                        \\\n+(tree_fits_shwi_p ((n))                        \\\n && TREE_INT_CST_LOW ((n)) > 0)\n \n #define LOOP_VINFO_NITERS_KNOWN_P(L)          \\"}, {"sha": "59c5452a9a050da79695c505e04d601f300ee13d", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -5040,7 +5040,7 @@ free_lang_data_in_decl (tree decl)\n          DECL_VINDEX referring to itself into a vtable slot number as it\n \t should.  Happens with functions that are copied and then forgotten\n \t about.  Just clear it, it won't matter anymore.  */\n-      if (DECL_VINDEX (decl) && !host_integerp (DECL_VINDEX (decl), 0))\n+      if (DECL_VINDEX (decl) && !tree_fits_shwi_p (DECL_VINDEX (decl)))\n \tDECL_VINDEX (decl) = NULL_TREE;\n     }\n   else if (TREE_CODE (decl) == VAR_DECL)"}, {"sha": "e07cbe6b55a478c80be69e5ca7a40ade652aad54", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -6290,7 +6290,7 @@ prepare_call_arguments (basic_block bb, rtx insn)\n \t\t\t  && DECL_INITIAL (SYMBOL_REF_DECL (l->loc)))\n \t\t\t{\n \t\t\t  initial = DECL_INITIAL (SYMBOL_REF_DECL (l->loc));\n-\t\t\t  if (host_integerp (initial, 0))\n+\t\t\t  if (tree_fits_shwi_p (initial))\n \t\t\t    {\n \t\t\t      item = GEN_INT (tree_low_cst (initial, 0));\n \t\t\t      item = gen_rtx_CONCAT (indmode, mem, item);"}, {"sha": "3420e2205668c53101ce1a2b5bf944d6754a101e", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "patch": "@@ -2709,7 +2709,7 @@ decode_addr_const (tree exp, struct addr_const *value)\n   while (1)\n     {\n       if (TREE_CODE (target) == COMPONENT_REF\n-\t  && host_integerp (byte_position (TREE_OPERAND (target, 1)), 0))\n+\t  && tree_fits_shwi_p (byte_position (TREE_OPERAND (target, 1))))\n \t{\n \t  offset += int_byte_position (TREE_OPERAND (target, 1));\n \t  target = TREE_OPERAND (target, 0);"}]}