{"sha": "3877a6a6c02207754657c86d81b8744b94864872", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg3N2E2YTZjMDIyMDc3NTQ2NTdjODZkODFiODc0NGI5NDg2NDg3Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-03-05T12:27:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-03-05T12:27:55Z"}, "message": "re PR tree-optimization/51721 (-Warray-bounds false positives and inconsistencies)\n\n\tPR tree-optimization/51721\n\t* tree-vrp.c (register_edge_assert_for_2): If comparing\n\tlhs of right shift by constant with an integer constant,\n\tadd ASSERT_EXPRs for the rhs1 of the right shift.\n\n\t* gcc.dg/tree-ssa/vrp63.c: New test.\n\t* gcc.dg/pr51721.c: New test.\n\nFrom-SVN: r184927", "tree": {"sha": "964f3321448b40d9bc551ee339913ed7f50467f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/964f3321448b40d9bc551ee339913ed7f50467f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3877a6a6c02207754657c86d81b8744b94864872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3877a6a6c02207754657c86d81b8744b94864872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3877a6a6c02207754657c86d81b8744b94864872", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3877a6a6c02207754657c86d81b8744b94864872/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "091fe9ca651c3e3192456904215c1346d7a26847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091fe9ca651c3e3192456904215c1346d7a26847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091fe9ca651c3e3192456904215c1346d7a26847"}], "stats": {"total": 476, "additions": 475, "deletions": 1}, "files": [{"sha": "565ca5b105efa3feb6218e15fbde0a59e81b350f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3877a6a6c02207754657c86d81b8744b94864872/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3877a6a6c02207754657c86d81b8744b94864872/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3877a6a6c02207754657c86d81b8744b94864872", "patch": "@@ -1,5 +1,10 @@\n 2012-03-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/51721\n+\t* tree-vrp.c (register_edge_assert_for_2): If comparing\n+\tlhs of right shift by constant with an integer constant,\n+\tadd ASSERT_EXPRs for the rhs1 of the right shift.\n+\n \t* cfgrtl.c (cfg_layout_merge_blocks): Cleanup.\n \n 2012-03-05  Richard Guenther  <rguenther@suse.de>"}, {"sha": "85a44107ce310d739259458d98065703501d40e6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3877a6a6c02207754657c86d81b8744b94864872/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3877a6a6c02207754657c86d81b8744b94864872/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3877a6a6c02207754657c86d81b8744b94864872", "patch": "@@ -1,3 +1,9 @@\n+2012-03-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/51721\n+\t* gcc.dg/tree-ssa/vrp63.c: New test.\n+\t* gcc.dg/pr51721.c: New test.\n+\n 2012-03-04  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/50981"}, {"sha": "b39adfb50c2a27f296fc1c21d014590d9de76348", "filename": "gcc/testsuite/gcc.dg/pr51721.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3877a6a6c02207754657c86d81b8744b94864872/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51721.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3877a6a6c02207754657c86d81b8744b94864872/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51721.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51721.c?ref=3877a6a6c02207754657c86d81b8744b94864872", "patch": "@@ -0,0 +1,31 @@\n+/* PR tree-optimization/51721 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Warray-bounds\" } */\n+\n+static int a[10], b[10], c[10], d[10];\n+\n+unsigned int\n+f (unsigned int v)\n+{\n+  return v == 17 ? 11 : v;\n+}\n+\n+unsigned int\n+g (unsigned int v)\n+{\n+  return v == 17 ? 17 : v;\n+}\n+\n+void\n+t (unsigned int s)\n+{\n+  if (s >> 1 == 0)\n+    {\n+      a[f (s)] = 0;\t/* { dg-bogus \"array subscript is above array bounds\" } */\n+      a[f (s)] = 0;\t/* { dg-bogus \"array subscript is above array bounds\" } */\n+      b[f (s)] = 0;\t/* { dg-bogus \"array subscript is above array bounds\" } */\n+      c[g (s)] = 0;\t/* { dg-bogus \"array subscript is above array bounds\" } */\n+      c[g (s)] = 0;\t/* { dg-bogus \"array subscript is above array bounds\" } */\n+      d[f (s)] = 0;\t/* { dg-bogus \"array subscript is above array bounds\" } */\n+    }\n+}"}, {"sha": "9116847de53e9f61008f4353ebfb4e986d8420b1", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp63.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3877a6a6c02207754657c86d81b8744b94864872/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp63.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3877a6a6c02207754657c86d81b8744b94864872/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp63.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp63.c?ref=3877a6a6c02207754657c86d81b8744b94864872", "patch": "@@ -0,0 +1,345 @@\n+/* PR tree-optimization/51721 */\n+/* { dg-do link } */\n+/* { dg-options \"-O2\" } */\n+\n+extern void link_error (void);\n+\n+#define BITSM1 (sizeof (int) * __CHAR_BIT__ - 1)\n+\n+void\n+f1 (unsigned int s)\n+{\n+  if (s >> 1 == 0)\n+    {\n+      if (s == 2 || s == -1U)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 1)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f2 (unsigned int s)\n+{\n+  if (s >> 4 != 3)\n+    {\n+      if (s == 48 || s == 57 || s == 63)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 47 || s == 64 || s == 0 || s == -1U)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f3 (int s)\n+{\n+  if (s >> 3 == -2)\n+    {\n+      if (s == -17 || s == -8 || s == 0\n+\t  || s == -__INT_MAX__ - 1 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == -16 || s == -12 || s == -9)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f4 (unsigned int s)\n+{\n+  if (s >> 2 < 4)\n+    {\n+      if (s == 16 || s == 20 || s == -1U)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 2 || s == 14 || s == 15)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f5 (unsigned int s)\n+{\n+  if (s >> 3 <= 7)\n+    {\n+      if (s == 64 || s == 68 || s == -1U)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 1 || s == 62 || s == 63)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f6 (unsigned int s)\n+{\n+  if (s >> 1 > 2)\n+    {\n+      if (s == 0 || s == 3 || s == 5)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 6 || s == 8 || s == -1U)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f7 (unsigned int s)\n+{\n+  if (s >> 5 >= 7)\n+    {\n+      if (s == 0 || s == 2 || s == 221 || s == 223)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 224 || s == 256 || s == 258 || s == -1U)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f8 (int s)\n+{\n+  if (s >> 2 < -3)\n+    {\n+      if (s == -12 || s == -10 || s == 0 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == -13 || s == -16 || s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f9 (int s)\n+{\n+  if (s >> 3 <= -2)\n+    {\n+      if (s == -8 || s == -6 || s == 0 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == -9 || s == -11 || s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f10 (int s)\n+{\n+  if (s >> 1 > -4)\n+    {\n+      if (s == -7 || s == -9 || s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == -6 || s == -4 || s == 0 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f11 (int s)\n+{\n+  if (s >> 3 >= -6)\n+    {\n+      if (s == -49 || s == -51 || s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == -48 || s == -46 || s == 0 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f12 (int s)\n+{\n+  if (s >> 2 < 4)\n+    {\n+      if (s == 16 || s == 20 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 2 || s == 14 || s == 15\n+\t  || s == -2 || s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f13 (int s)\n+{\n+  if (s >> 3 <= 7)\n+    {\n+      if (s == 64 || s == 68 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 1 || s == 62 || s == 63\n+\t  || s == -2 || s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f14 (int s)\n+{\n+  if (s >> 1 > 2)\n+    {\n+      if (s == 0 || s == 3 || s == 5\n+\t  || s == -2 || s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 6 || s == 8 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f15 (int s)\n+{\n+  if (s >> 5 >= 7)\n+    {\n+      if (s == 0 || s == 2 || s == 221 || s == 223\n+\t  || s == -2 || s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 224 || s == 256 || s == 258 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+}\n+\n+unsigned int\n+f16 (unsigned int s)\n+{\n+  unsigned int t = s >> BITSM1;\n+  if (t != 0)\n+    {\n+      if (s == 0 || s == 5 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 1U + __INT_MAX__ || s == 6U + __INT_MAX__ || s == -1U)\n+\tlink_error ();\n+    }\n+  return t;\n+}\n+\n+int\n+f17 (int s)\n+{\n+  int t = s >> BITSM1;\n+  if (t == 0)\n+    {\n+      if (s == -1 || s == -5 || s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 5 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  return t;\n+}\n+\n+unsigned int\n+f18 (unsigned int s)\n+{\n+  unsigned int t = s >> BITSM1;\n+  if (t >= 1)\n+    {\n+      if (s == 0 || s == 5 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 1U + __INT_MAX__ || s == 6U + __INT_MAX__ || s == -1U)\n+\tlink_error ();\n+    }\n+  return t;\n+}\n+\n+int\n+f19 (int s)\n+{\n+  int t = s >> BITSM1;\n+  if (t >= 0)\n+    {\n+      if (s == -1 || s == -5 || s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 5 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  return t;\n+}\n+\n+unsigned int\n+f20 (unsigned int s)\n+{\n+  unsigned int t = s >> BITSM1;\n+  if (t < 1)\n+    {\n+      if (s == 1U + __INT_MAX__ || s == 6U + __INT_MAX__ || s == -1U)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == 0 || s == 5 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  return t;\n+}\n+\n+int\n+f21 (int s)\n+{\n+  int t = s >> BITSM1;\n+  if (t < 0)\n+    {\n+      if (s == 0 || s == 5 || s == __INT_MAX__)\n+\tlink_error ();\n+    }\n+  else\n+    {\n+      if (s == -1 || s == -5 || s == -__INT_MAX__ - 1)\n+\tlink_error ();\n+    }\n+  return t;\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"}, {"sha": "d3922db038a84d0e161a729ec96bd56c754d8b86", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 88, "deletions": 1, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3877a6a6c02207754657c86d81b8744b94864872/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3877a6a6c02207754657c86d81b8744b94864872/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=3877a6a6c02207754657c86d81b8744b94864872", "patch": "@@ -1,5 +1,5 @@\n /* Support routines for Value Range Propagation (VRP).\n-   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>.\n \n@@ -4462,6 +4462,93 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t}\n     }\n \n+  /* Similarly add asserts for NAME == CST and NAME being defined as\n+     NAME = NAME2 >> CST2.  */\n+  if (TREE_CODE_CLASS (comp_code) == tcc_comparison\n+      && TREE_CODE (val) == INTEGER_CST)\n+    {\n+      gimple def_stmt = SSA_NAME_DEF_STMT (name);\n+      tree name2 = NULL_TREE, cst2 = NULL_TREE;\n+      tree val2 = NULL_TREE;\n+      unsigned HOST_WIDE_INT mask[2] = { 0, 0 };\n+\n+      /* Extract CST2 from the right shift.  */\n+      if (is_gimple_assign (def_stmt)\n+\t  && gimple_assign_rhs_code (def_stmt) == RSHIFT_EXPR)\n+\t{\n+\t  name2 = gimple_assign_rhs1 (def_stmt);\n+\t  cst2 = gimple_assign_rhs2 (def_stmt);\n+\t  if (TREE_CODE (name2) == SSA_NAME\n+\t      && host_integerp (cst2, 1)\n+\t      && (unsigned HOST_WIDE_INT) tree_low_cst (cst2, 1)\n+\t\t < 2 * HOST_BITS_PER_WIDE_INT\n+\t      && INTEGRAL_TYPE_P (TREE_TYPE (name2))\n+\t      && live_on_edge (e, name2)\n+\t      && !has_single_use (name2))\n+\t    {\n+\t      if ((unsigned HOST_WIDE_INT) tree_low_cst (cst2, 1)\n+\t\t  < HOST_BITS_PER_WIDE_INT)\n+\t\tmask[0] = ((unsigned HOST_WIDE_INT) 1\n+\t\t\t   << tree_low_cst (cst2, 1)) - 1;\n+\t      else\n+\t\t{\n+\t\t  mask[1] = ((unsigned HOST_WIDE_INT) 1\n+\t\t\t     << (tree_low_cst (cst2, 1)\n+\t\t\t\t - HOST_BITS_PER_WIDE_INT)) - 1;\n+\t\t  mask[0] = -1;\n+\t\t}\n+\t      val2 = fold_binary (LSHIFT_EXPR, TREE_TYPE (val), val, cst2);\n+\t    }\n+\t}\n+\n+      if (val2 != NULL_TREE\n+\t  && TREE_CODE (val2) == INTEGER_CST\n+\t  && simple_cst_equal (fold_build2 (RSHIFT_EXPR,\n+\t\t\t\t\t    TREE_TYPE (val),\n+\t\t\t\t\t    val2, cst2), val))\n+\t{\n+\t  enum tree_code new_comp_code = comp_code;\n+\t  tree tmp, new_val;\n+\n+\t  tmp = name2;\n+\t  if (comp_code == EQ_EXPR || comp_code == NE_EXPR)\n+\t    {\n+\t      if (!TYPE_UNSIGNED (TREE_TYPE (val)))\n+\t\t{\n+\t\t  unsigned int prec = TYPE_PRECISION (TREE_TYPE (val));\n+\t\t  tree type = build_nonstandard_integer_type (prec, 1);\n+\t\t  tmp = build1 (NOP_EXPR, type, name2);\n+\t\t  val2 = fold_convert (type, val2);\n+\t\t}\n+\t      tmp = fold_build2 (MINUS_EXPR, TREE_TYPE (tmp), tmp, val2);\n+\t      new_val = build_int_cst_wide (TREE_TYPE (tmp), mask[0], mask[1]);\n+\t      new_comp_code = comp_code == EQ_EXPR ? LE_EXPR : GT_EXPR;\n+\t    }\n+\t  else if (comp_code == LT_EXPR || comp_code == GE_EXPR)\n+\t    new_val = val2;\n+\t  else\n+\t    {\n+\t      new_val = build_int_cst_wide (TREE_TYPE (val2),\n+\t\t\t\t\t    mask[0], mask[1]);\n+\t      new_val = fold_binary (BIT_IOR_EXPR, TREE_TYPE (val2),\n+\t\t\t\t     val2, new_val);\n+\t    }\n+\n+\t  if (dump_file)\n+\t    {\n+\t      fprintf (dump_file, \"Adding assert for \");\n+\t      print_generic_expr (dump_file, name2, 0);\n+\t      fprintf (dump_file, \" from \");\n+\t      print_generic_expr (dump_file, tmp, 0);\n+\t      fprintf (dump_file, \"\\n\");\n+\t    }\n+\n+\t  register_new_assert_for (name2, tmp, new_comp_code, new_val,\n+\t\t\t\t   NULL, e, bsi);\n+\t  retval = true;\n+\t}\n+    }\n+\n   return retval;\n }\n "}]}