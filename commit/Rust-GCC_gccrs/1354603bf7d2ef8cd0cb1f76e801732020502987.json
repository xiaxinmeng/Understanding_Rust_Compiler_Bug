{"sha": "1354603bf7d2ef8cd0cb1f76e801732020502987", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1NDYwM2JmN2QyZWY4Y2QwY2IxZjc2ZTgwMTczMjAyMDUwMjk4Nw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-08-09T09:55:43Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-08-09T18:44:58Z"}, "message": "libstdc++: [_GLIBCXX_DEBUG] Avoid allocator operator== when always equal\n\nUse std::allocator_traits::is_always_equal to find out if we need to compare\nallocator instances on safe container allocator aware move constructor.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/debug/safe_container.h\n\t(_Safe_container(_Safe_container&&, const _Alloc&, std::true_type)): New.\n\t(_Safe_container(_Safe_container&&, const _Alloc&, std::false_type)): New.\n\t(_Safe_container(_Safe_container&&, const _Alloc&)): Use latters.", "tree": {"sha": "a80548b879db60d0cc992295157649c1b3f580f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a80548b879db60d0cc992295157649c1b3f580f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1354603bf7d2ef8cd0cb1f76e801732020502987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1354603bf7d2ef8cd0cb1f76e801732020502987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1354603bf7d2ef8cd0cb1f76e801732020502987", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1354603bf7d2ef8cd0cb1f76e801732020502987/comments", "author": null, "committer": null, "parents": [{"sha": "d55d3f5b04e81b79f34ccf23f7e2c1e736ad3b0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55d3f5b04e81b79f34ccf23f7e2c1e736ad3b0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d55d3f5b04e81b79f34ccf23f7e2c1e736ad3b0d"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "97c47167fe8fb0e2b6feaeb415a1f07db79b545a", "filename": "libstdc++-v3/include/debug/safe_container.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1354603bf7d2ef8cd0cb1f76e801732020502987/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1354603bf7d2ef8cd0cb1f76e801732020502987/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h?ref=1354603bf7d2ef8cd0cb1f76e801732020502987", "patch": "@@ -57,14 +57,25 @@ namespace __gnu_debug\n       _Safe_container(const _Safe_container&) = default;\n       _Safe_container(_Safe_container&&) = default;\n \n-      _Safe_container(_Safe_container&& __x, const _Alloc& __a)\n+    private:\n+      _Safe_container(_Safe_container&& __x, const _Alloc&, std::true_type)\n+      : _Safe_container(std::move(__x))\n+      { }\n+\n+      _Safe_container(_Safe_container&& __x, const _Alloc& __a, std::false_type)\n       : _Safe_container()\n       {\n \tif (__x._M_cont().get_allocator() == __a)\n \t  _Base::_M_swap(__x);\n \telse\n \t  __x._M_invalidate_all();\n       }\n+\n+    protected:\n+      _Safe_container(_Safe_container&& __x, const _Alloc& __a)\n+      : _Safe_container(std::move(__x), __a,\n+\t\t      typename std::allocator_traits<_Alloc>::is_always_equal{})\n+      { }\n #endif\n \n     public:"}]}