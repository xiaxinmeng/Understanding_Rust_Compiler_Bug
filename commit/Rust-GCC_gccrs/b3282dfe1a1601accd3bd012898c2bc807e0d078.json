{"sha": "b3282dfe1a1601accd3bd012898c2bc807e0d078", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMyODJkZmUxYTE2MDFhY2NkM2JkMDEyODk4YzJiYzgwN2UwZDA3OA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-12-31T13:46:08Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-12-31T13:46:08Z"}, "message": "predict.c (set_even_probabilities): Include also unlikely_count in calculation.\n\n).\n\n2018-12-31  Martin Liska  <mliska@suse.cz>\n\n\t* predict.c (set_even_probabilities): Include also\n\tunlikely_count in calculation.\n\t(combine_predictions_for_bb): Consider also HOT and\n\tCOLD labels predictions.\n\t* predict.def (PRED_HOT_LABEL): Move it just after\n\t__builtin_expect_with_probability predictor.\n\t(PRED_COLD_LABEL): Likewise.\n2018-12-31  Martin Liska  <mliska@suse.cz>\n\n\t* g++.dg/predict-2.C: New test.\n\t* g++.dg/predict-3.C: New test.\n\t* g++.dg/predict-4.C: New test.\n\t* gcc.dg/tree-ssa/attr-hotcold-2.c: Adjust test-case.\n\nFrom-SVN: r267485", "tree": {"sha": "f6a353dcdd9481af9384378d339ef833ae34ac6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6a353dcdd9481af9384378d339ef833ae34ac6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3282dfe1a1601accd3bd012898c2bc807e0d078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3282dfe1a1601accd3bd012898c2bc807e0d078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3282dfe1a1601accd3bd012898c2bc807e0d078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3282dfe1a1601accd3bd012898c2bc807e0d078/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41ee4e75ab27ebf63d1512fc56e673fdee74e8aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41ee4e75ab27ebf63d1512fc56e673fdee74e8aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41ee4e75ab27ebf63d1512fc56e673fdee74e8aa"}], "stats": {"total": 101, "additions": 89, "deletions": 12}, "files": [{"sha": "76f3ab3d9e717a0aea3ad88079485c97f428deb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3282dfe1a1601accd3bd012898c2bc807e0d078", "patch": "@@ -1,3 +1,13 @@\n+2018-12-31  Martin Liska  <mliska@suse.cz>\n+\n+\t* predict.c (set_even_probabilities): Include also\n+\tunlikely_count in calculation.\n+\t(combine_predictions_for_bb): Consider also HOT and\n+\tCOLD labels predictions.\n+\t* predict.def (PRED_HOT_LABEL): Move it just after\n+\t__builtin_expect_with_probability predictor.\n+\t(PRED_COLD_LABEL): Likewise.\n+\n 2018-12-30  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* x86-tune.def: Enable inter_unit_moves_to_vec for generic."}, {"sha": "81dbb67da4ed0c7561a426b8c7c5aabb32600e08", "filename": "gcc/predict.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=b3282dfe1a1601accd3bd012898c2bc807e0d078", "patch": "@@ -878,11 +878,18 @@ set_even_probabilities (basic_block bb,\n \t    profile_probability prob\n \t      = profile_probability::from_reg_br_prob_base (p);\n \t    profile_probability remainder = prob.invert ();\n+\t    remainder -= profile_probability::very_unlikely ()\n+\t      .apply_scale (unlikely_count, 1);\n+\t    int count = nedges - unlikely_count - 1;\n+\t    gcc_assert (count >= 0);\n+\t    profile_probability even = remainder.apply_scale (1, count);\n \n \t    if (prediction->ep_edge == e)\n \t      e->probability = prob;\n+\t    else if (unlikely_edges != NULL && unlikely_edges->contains (e))\n+\t      e->probability = profile_probability::very_unlikely ();\n \t    else\n-\t      e->probability = remainder.apply_scale (1, nedges - 1);\n+\t      e->probability = even;\n \t  }\n \telse\n \t  e->probability = profile_probability::never ();\n@@ -1217,10 +1224,12 @@ combine_predictions_for_bb (basic_block bb, bool dry_run)\n       if (preds)\n \tfor (pred = *preds; pred; pred = pred->ep_next)\n \t  {\n-\t    if (pred->ep_probability <= PROB_VERY_UNLIKELY)\n+\t    if (pred->ep_probability <= PROB_VERY_UNLIKELY\n+\t\t|| pred->ep_predictor == PRED_COLD_LABEL)\n \t      unlikely_edges.add (pred->ep_edge);\n \t    if (pred->ep_probability >= PROB_VERY_LIKELY\n-\t\t|| pred->ep_predictor == PRED_BUILTIN_EXPECT)\n+\t\t|| pred->ep_predictor == PRED_BUILTIN_EXPECT\n+\t\t|| pred->ep_predictor == PRED_HOT_LABEL)\n \t      likely_edges.add (pred);\n \t  }\n "}, {"sha": "27d0e4dc6f9f21faea4d871a95c8b36d53a337e2", "filename": "gcc/predict.def", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=b3282dfe1a1601accd3bd012898c2bc807e0d078", "patch": "@@ -78,6 +78,14 @@ DEF_PREDICTOR (PRED_BUILTIN_EXPECT_WITH_PROBABILITY,\n \t       \"__builtin_expect_with_probability\", PROB_UNINITIALIZED,\n \t       PRED_FLAG_FIRST_MATCH)\n \n+/* Branches to hot labels are likely.  */\n+DEF_PREDICTOR (PRED_HOT_LABEL, \"hot label\", HITRATE (90),\n+\t       PRED_FLAG_FIRST_MATCH)\n+\n+/* Branches to cold labels are extremely unlikely.  */\n+DEF_PREDICTOR (PRED_COLD_LABEL, \"cold label\", HITRATE (90),\n+\t       PRED_FLAG_FIRST_MATCH)\n+\n /* Use number of loop iterations guessed by the contents of the loop.  */\n DEF_PREDICTOR (PRED_LOOP_ITERATIONS_GUESSED, \"guessed loop iterations\",\n \t       PROB_UNINITIALIZED, PRED_FLAG_FIRST_MATCH)\n@@ -171,13 +179,6 @@ DEF_PREDICTOR (PRED_LOOP_GUARD, \"loop guard\", HITRATE (73), 0)\n DEF_PREDICTOR (PRED_LOOP_GUARD_WITH_RECURSION, \"loop guard with recursion\",\n \t       HITRATE (85), 0)\n \n-/* Branches to hot labels are likely.  */\n-DEF_PREDICTOR (PRED_HOT_LABEL, \"hot label\", HITRATE (85), 0)\n-\n-/* Branches to cold labels are extremely unlikely.  */\n-DEF_PREDICTOR (PRED_COLD_LABEL, \"cold label\", PROB_VERY_LIKELY,\n-\t       PRED_FLAG_FIRST_MATCH)\n-\n /* The following predictors are used in Fortran. */\n \n /* Branch leading to an integer overflow are extremely unlikely.  */"}, {"sha": "80abc872f953fbcb41c879ab5c4636d09b8bb574", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3282dfe1a1601accd3bd012898c2bc807e0d078", "patch": "@@ -1,3 +1,10 @@\n+2018-12-31  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/predict-2.C: New test.\n+\t* g++.dg/predict-3.C: New test.\n+\t* g++.dg/predict-4.C: New test.\n+\t* gcc.dg/tree-ssa/attr-hotcold-2.c: Adjust test-case.\n+\n 2018-12-30  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR testsuite/88639"}, {"sha": "1e0ac1d2c48e3dfe5b9db41f175fc8f3975e0989", "filename": "gcc/testsuite/g++.dg/predict-2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-2.C?ref=b3282dfe1a1601accd3bd012898c2bc807e0d078", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate -std=c++11\" } */\n+\n+int a, b, c;\n+\n+void\n+bar()\n+{\n+  if (a == 123)\n+    [[likely]] c = 5;\n+  else\n+    c = 5;\n+}\n+\n+/* { dg-final { scan-tree-dump \"first match heuristics: 90.00%\" \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump \"hot label heuristics of edge .*->.*: 90.00%\" \"profile_estimate\"} } */"}, {"sha": "cf3373861b9fd11382a990cc406c0e582abec315", "filename": "gcc/testsuite/g++.dg/predict-3.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-3.C?ref=b3282dfe1a1601accd3bd012898c2bc807e0d078", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate -std=c++11\" } */\n+\n+int a, b, c;\n+\n+void\n+bar ()\n+{\n+  switch (a)\n+  {\n+    case 3: __builtin_puts(\"a\"); break;\n+    case 42: __builtin_puts(\"e\"); break;\n+    [[likely]] case 333: __builtin_puts(\"i\"); break;\n+  } \n+}\n+\n+/* { dg-final { scan-tree-dump \"default.*3.33%.*case 3.*3.33%.*case 42.*3.33%.*case 333.*90.00%\" \"profile_estimate\"} } */"}, {"sha": "ab40b48a3400029f3a8271a7b5e2e4047010c882", "filename": "gcc/testsuite/g++.dg/predict-4.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpredict-4.C?ref=b3282dfe1a1601accd3bd012898c2bc807e0d078", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate -std=c++11\" } */\n+\n+int a, b, c;\n+\n+void\n+bar ()\n+{\n+  switch (a)\n+  {\n+    case 3: __builtin_puts(\"a\"); break;\n+    [[unlikely]] case 42: __builtin_puts(\"e\"); break;\n+    [[likely]] case 333: __builtin_puts(\"i\"); break;\n+  } \n+}\n+\n+/* { dg-final { scan-tree-dump \"default.*4.98%.*case 3.*4.98%.*case 42.*0.05%.*case 333.*90.00%\" \"profile_estimate\"} } */"}, {"sha": "3206d7d5e093fe0f0a1dff2d3ff3b10602d80832", "filename": "gcc/testsuite/gcc.dg/tree-ssa/attr-hotcold-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-hotcold-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3282dfe1a1601accd3bd012898c2bc807e0d078/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-hotcold-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-hotcold-2.c?ref=b3282dfe1a1601accd3bd012898c2bc807e0d078", "patch": "@@ -19,9 +19,9 @@ void f(int x, int y)\n \n /* { dg-final { scan-tree-dump-times \"hot label heuristics\" 1 \"profile_estimate\" } } */\n /* { dg-final { scan-tree-dump-times \"cold label heuristics\" 1 \"profile_estimate\" } } */\n-/* { dg-final { scan-tree-dump-times \"combined heuristics: 0\\\\\\..*\" 1 \"profile_estimate\" } } */\n+/* { dg-final { scan-tree-dump-times \"combined heuristics: 10.00%\" 1 \"profile_estimate\" } } */\n \n /* Note: we're attempting to match some number > 6000, i.e. > 60%.\n    The exact number ought to be tweekable without having to juggle\n    the testcase around too much.  */\n-/* { dg-final { scan-tree-dump-times \"combined heuristics: \\[6-9\\]\\[0-9\\]\\\\\\..*\" 1 \"profile_estimate\" } } */\n+/* { dg-final { scan-tree-dump-times \"combined heuristics: 90.00%\" 1 \"profile_estimate\" } } */"}]}