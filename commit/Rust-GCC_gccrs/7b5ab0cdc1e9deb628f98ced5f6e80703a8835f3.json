{"sha": "7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I1YWIwY2RjMWU5ZGViNjI4Zjk4Y2VkNWY2ZTgwNzAzYTg4MzVmMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-12-16T14:56:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-12-16T14:56:10Z"}, "message": "re PR middle-end/68870 (ICE on valid code at -O1, -O2 and -O3 on x86_64-linux-gnu)\n\n2015-12-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68870\n\t* tree-cfgcleanup.c (cleanup_control_expr_graph): Add first_p\n\tparameter, if set only perform trivial constant folding.\n\tQueue other blocks with conditions for later processing.\n\t(cleanup_control_flow_bb): Add first_p parameter and pass it through.\n\t(cleanup_tree_cfg_1): Pass true for the first iteration\n\tcleanup_control_expr_graph.\n\n\t* gcc.dg/torture/pr68870.c: New testcase.\n\nFrom-SVN: r231695", "tree": {"sha": "58159337d2a2ac40cdb43c20c75ebe6433122b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58159337d2a2ac40cdb43c20c75ebe6433122b00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44c068aecb0ba30a25e3086e1c2dad7f6a3f8303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c068aecb0ba30a25e3086e1c2dad7f6a3f8303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c068aecb0ba30a25e3086e1c2dad7f6a3f8303"}], "stats": {"total": 84, "additions": 70, "deletions": 14}, "files": [{"sha": "90399d58f496eb04cec263388bd0aaf263f38f9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3", "patch": "@@ -1,3 +1,13 @@\n+2015-12-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68870\n+\t* tree-cfgcleanup.c (cleanup_control_expr_graph): Add first_p\n+\tparameter, if set only perform trivial constant folding.\n+\tQueue other blocks with conditions for later processing.\n+\t(cleanup_control_flow_bb): Add first_p parameter and pass it through.\n+\t(cleanup_tree_cfg_1): Pass true for the first iteration\n+\tcleanup_control_expr_graph.\n+\n 2015-12-16  Nathan Sidwell  <nathan@acm.org>\n \n \t* config/nvptx/nvptx-protos.h (nvptx_hard_regno_mode_ok): Delete."}, {"sha": "d4ee11c6ecbd9f163a413113234a99e3e8e6056c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3", "patch": "@@ -1,3 +1,8 @@\n+2015-12-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68870\n+\t* gcc.dg/torture/pr68870.c: New testcase.\n+\n 2015-12-16  Tom de Vries  <tom@codesourcery.com>\n \n \t* g++.dg/ipa/devirt-37.C: Update for new fre2 pass."}, {"sha": "1ad0f7b604b9787fb792f57b70ddb16607fd1a74", "filename": "gcc/testsuite/gcc.dg/torture/pr68870.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68870.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68870.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68870.c?ref=7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+\n+int printf (const char *, ...);\n+\n+int a, f, g;\n+char b, d;\n+short c;\n+static short e;\n+\n+char\n+fn1 ()\n+{\n+  for (; b; b++)\n+    {\n+      int h = 5;\n+      for (a = 0; a < 1; a++)\n+\t{\n+\t  for (d = 0; d < 1; d++)\n+\t    for (c = 0; c < 1; c++)\n+\t      for (; e >= 0;)\n+\t\treturn 5;\n+\t  if (f)\n+\t    h = 0;\n+\t}\n+      if (h)\n+\tprintf (\"%d\", 0);\n+    }\n+  return g;\n+}"}, {"sha": "c5d94d07c82bb224142cb42c891ff1d30ec833b4", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=7b5ab0cdc1e9deb628f98ced5f6e80703a8835f3", "patch": "@@ -78,7 +78,8 @@ remove_fallthru_edge (vec<edge, va_gc> *ev)\n    at block BB.  */\n \n static bool\n-cleanup_control_expr_graph (basic_block bb, gimple_stmt_iterator gsi)\n+cleanup_control_expr_graph (basic_block bb, gimple_stmt_iterator gsi,\n+\t\t\t    bool first_p)\n {\n   edge taken_edge;\n   bool retval = false;\n@@ -95,15 +96,26 @@ cleanup_control_expr_graph (basic_block bb, gimple_stmt_iterator gsi)\n       switch (gimple_code (stmt))\n \t{\n \tcase GIMPLE_COND:\n-\t  {\n-\t    code_helper rcode;\n-\t    tree ops[3] = {};\n-\t    if (gimple_simplify (stmt, &rcode, ops, NULL, no_follow_ssa_edges,\n-\t\t\t\t no_follow_ssa_edges)\n-\t\t&& rcode == INTEGER_CST)\n-\t      val = ops[0];\n-\t    break;\n-\t  }\n+\t  /* During a first iteration on the CFG only remove trivially\n+\t     dead edges but mark other conditions for re-evaluation.  */\n+\t  if (first_p)\n+\t    {\n+\t      val = const_binop (gimple_cond_code (stmt), boolean_type_node,\n+\t\t\t\t gimple_cond_lhs (stmt),\n+\t\t\t\t gimple_cond_rhs (stmt));\n+\t      if (! val)\n+\t\tbitmap_set_bit (cfgcleanup_altered_bbs, bb->index);\n+\t    }\n+\t  else\n+\t    {\n+\t      code_helper rcode;\n+\t      tree ops[3] = {};\n+\t      if (gimple_simplify (stmt, &rcode, ops, NULL, no_follow_ssa_edges,\n+\t\t\t\t   no_follow_ssa_edges)\n+\t\t  && rcode == INTEGER_CST)\n+\t\tval = ops[0];\n+\t    }\n+\t  break;\n \n \tcase GIMPLE_SWITCH:\n \t  val = gimple_switch_index (as_a <gswitch *> (stmt));\n@@ -176,7 +188,7 @@ cleanup_call_ctrl_altering_flag (gimple *bb_end)\n    true if anything changes.  */\n \n static bool\n-cleanup_control_flow_bb (basic_block bb)\n+cleanup_control_flow_bb (basic_block bb, bool first_p)\n {\n   gimple_stmt_iterator gsi;\n   bool retval = false;\n@@ -199,7 +211,7 @@ cleanup_control_flow_bb (basic_block bb)\n       || gimple_code (stmt) == GIMPLE_SWITCH)\n     {\n       gcc_checking_assert (gsi_stmt (gsi_last_bb (bb)) == stmt);\n-      retval |= cleanup_control_expr_graph (bb, gsi);\n+      retval |= cleanup_control_expr_graph (bb, gsi, first_p);\n     }\n   else if (gimple_code (stmt) == GIMPLE_GOTO\n \t   && TREE_CODE (gimple_goto_dest (stmt)) == ADDR_EXPR\n@@ -680,7 +692,7 @@ cleanup_tree_cfg_1 (void)\n     {\n       bb = BASIC_BLOCK_FOR_FN (cfun, i);\n       if (bb)\n-\tretval |= cleanup_control_flow_bb (bb);\n+\tretval |= cleanup_control_flow_bb (bb, true);\n     }\n \n   /* After doing the above SSA form should be valid (or an update SSA\n@@ -708,7 +720,7 @@ cleanup_tree_cfg_1 (void)\n       if (!bb)\n \tcontinue;\n \n-      retval |= cleanup_control_flow_bb (bb);\n+      retval |= cleanup_control_flow_bb (bb, false);\n       retval |= cleanup_tree_cfg_bb (bb);\n     }\n "}]}