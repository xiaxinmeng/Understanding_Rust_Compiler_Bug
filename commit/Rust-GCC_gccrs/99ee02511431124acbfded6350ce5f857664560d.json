{"sha": "99ee02511431124acbfded6350ce5f857664560d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTllZTAyNTExNDMxMTI0YWNiZmRlZDYzNTBjZTVmODU3NjY0NTYwZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2011-04-12T19:14:49Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2011-04-12T19:14:49Z"}, "message": "re PR fortran/48360 (ICE on array assignment statement with allocatable LHS)\n\n2011-04-12  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/48360\n\tPR fortran/48456\n\t* trans-array.c (get_std_lbound): For derived type variables\n\treturn array valued component lbound.\n\n2011-04-12  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/48360\n\tPR fortran/48456\n\t* gfortran.dg/realloc_on_assign_6.f03: New test.\n\nFrom-SVN: r172339", "tree": {"sha": "e65aeb8351493c87a966a5a0d5d79d45115bb6e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e65aeb8351493c87a966a5a0d5d79d45115bb6e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99ee02511431124acbfded6350ce5f857664560d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99ee02511431124acbfded6350ce5f857664560d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99ee02511431124acbfded6350ce5f857664560d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99ee02511431124acbfded6350ce5f857664560d/comments", "author": null, "committer": null, "parents": [{"sha": "eb345401a1a2f6408fddd8538466be1143a95177", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb345401a1a2f6408fddd8538466be1143a95177", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb345401a1a2f6408fddd8538466be1143a95177"}], "stats": {"total": 152, "additions": 152, "deletions": 0}, "files": [{"sha": "c17ef429adf831b62bff4fe13f5a1960b7c1caca", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ee02511431124acbfded6350ce5f857664560d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ee02511431124acbfded6350ce5f857664560d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=99ee02511431124acbfded6350ce5f857664560d", "patch": "@@ -1,3 +1,10 @@\n+2011-04-12  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/48360\n+\tPR fortran/48456\n+\t* trans-array.c (get_std_lbound): For derived type variables\n+\treturn array valued component lbound.\n+\n 2011-04-12  Martin Jambor  <mjambor@suse.cz>\n \n \t* trans-decl.c (gfc_generate_function_code): Call"}, {"sha": "7c34b9865ea7e4347b2b8f5fd46ffbe80c63e7a2", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ee02511431124acbfded6350ce5f857664560d/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ee02511431124acbfded6350ce5f857664560d/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=99ee02511431124acbfded6350ce5f857664560d", "patch": "@@ -6810,6 +6810,8 @@ get_std_lbound (gfc_expr *expr, tree desc, int dim, bool assumed_size)\n   tree stride;\n   tree cond, cond1, cond3, cond4;\n   tree tmp;\n+  gfc_ref *ref;\n+\n   if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (desc)))\n     {\n       tmp = gfc_rank_cst[dim];\n@@ -6843,6 +6845,14 @@ get_std_lbound (gfc_expr *expr, tree desc, int dim, bool assumed_size)\n   else if (expr->expr_type == EXPR_VARIABLE)\n     {\n       tmp = TREE_TYPE (expr->symtree->n.sym->backend_decl);\n+      for (ref = expr->ref; ref; ref = ref->next)\n+\t{\n+\t  if (ref->type == REF_COMPONENT\n+\t\t&& ref->u.c.component->as\n+\t\t&& ref->next\n+\t\t&& ref->next->u.ar.type == AR_FULL)\n+\t    tmp = TREE_TYPE (ref->u.c.component->backend_decl);\n+\t}\n       return GFC_TYPE_ARRAY_LBOUND(tmp, dim);\n     }\n   else if (expr->expr_type == EXPR_FUNCTION)"}, {"sha": "afb9e8a25023335ccbeec9b53beef222e9fbc45d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ee02511431124acbfded6350ce5f857664560d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ee02511431124acbfded6350ce5f857664560d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99ee02511431124acbfded6350ce5f857664560d", "patch": "@@ -1,3 +1,9 @@\n+2011-04-12  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/48360\n+\tPR fortran/48456\n+\t* gfortran.dg/realloc_on_assign_6.f03: New test.\n+\n 2011-04-12  Kai Tietz  <ktietz@redhat.com>\n \n \t* g++.dg/ext/bitfield2.C: Add for i?86/x86_64-*-mingw*"}, {"sha": "7c170ebce27151eb3977a6a16d9e1dfb65137731", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_6.f03", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99ee02511431124acbfded6350ce5f857664560d/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99ee02511431124acbfded6350ce5f857664560d/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_6.f03?ref=99ee02511431124acbfded6350ce5f857664560d", "patch": "@@ -0,0 +1,129 @@\n+! { dg-do compile }\n+! Test the fix for PR48456 and PR48360 in which the backend\n+! declarations for components were not located in the automatic\n+! reallocation on assignments, thereby causing ICEs.\n+!\n+! Contributed by Keith Refson  <krefson@googlemail.com>\n+! and Douglas Foulds  <mixnmaster@gmail.com>\n+!\n+! This is PR48360\n+\n+module m\n+  type mm\n+     real, dimension(3,3) :: h0\n+  end type mm\n+end module m\n+\n+module gf33\n+\n+  real, allocatable, save, dimension(:,:) :: hmat\n+  \n+contains\n+  subroutine assignit\n+    \n+    use m\n+    implicit none\n+    \n+    type(mm) :: mmv\n+    \n+    hmat = mmv%h0\n+  end subroutine assignit\n+end module gf33\n+\n+! This is PR48456\n+\n+module custom_type\n+\n+integer, parameter :: dp = kind(0.d0)\n+\n+type :: my_type_sub\n+    real(dp), dimension(5) :: some_vector\n+end type my_type_sub\n+\n+type :: my_type\n+  type(my_type_sub) :: some_element\n+end type my_type\n+\n+end module custom_type\n+\n+module custom_interfaces\n+\n+interface\n+  subroutine store_data_subroutine(vec_size)\n+  implicit none\n+  integer, intent(in) :: vec_size\n+  integer :: k\n+  end subroutine store_data_subroutine\n+end interface\n+\n+end module custom_interfaces\n+\n+module store_data_test\n+\n+use custom_type\n+\n+save\n+type(my_type), dimension(:), allocatable :: some_type_to_save\n+\n+end module store_data_test\n+\n+program test\n+\n+use store_data_test\n+\n+integer :: vec_size\n+\n+vec_size = 2\n+\n+call store_data_subroutine(vec_size)\n+call print_after_transfer()\n+\n+end program test\n+\n+subroutine store_data_subroutine(vec_size)\n+\n+use custom_type\n+use store_data_test\n+\n+implicit none\n+\n+integer, intent(in) :: vec_size\n+integer :: k\n+\n+allocate(some_type_to_save(vec_size))\n+\n+do k = 1,vec_size\n+\n+  some_type_to_save(k)%some_element%some_vector(1) = 1.0_dp\n+  some_type_to_save(k)%some_element%some_vector(2) = 2.0_dp\n+  some_type_to_save(k)%some_element%some_vector(3) = 3.0_dp\n+  some_type_to_save(k)%some_element%some_vector(4) = 4.0_dp\n+  some_type_to_save(k)%some_element%some_vector(5) = 5.0_dp\n+\n+end do\n+\n+end subroutine store_data_subroutine\n+\n+subroutine print_after_transfer()\n+\n+use custom_type\n+use store_data_test\n+\n+implicit none\n+\n+real(dp), dimension(:), allocatable :: C_vec\n+integer :: k\n+\n+allocate(C_vec(5))\n+\n+do k = 1,size(some_type_to_save)\n+\n+  C_vec = some_type_to_save(k)%some_element%some_vector\n+  print *, \"C_vec\", C_vec\n+\n+end do\n+\n+end subroutine print_after_transfer\n+! { dg-final { cleanup-modules \"m gf33\" } }\n+! { dg-final { cleanup-modules \"custom_type custom_interfaces\" } }\n+! { dg-final { cleanup-modules \"store_data_test\" } }"}]}