{"sha": "08d0be2f4c377deee7b5d0d5fe7f502a75a26d05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhkMGJlMmY0YzM3N2RlZWU3YjVkMGQ1ZmU3ZjUwMmE3NWEyNmQwNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-03-05T01:57:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-03-05T01:57:10Z"}, "message": "function.h (struct sequence_stack): Remove rtl_expr.\n\n\t* function.h (struct sequence_stack): Remove rtl_expr.\n\t(struct emit_staus): Likewise.\n\t(seq_rtl_expr): Remove.\n\t* tree.h (free_temps_for_rtl_expr): Don't declare.\n\t(start_sequence_for_rtl_expr): Likewise.\n\t* rtl.h (preserve_rtl_expr_result): Likewise.\n\t* emit-rtl.c (start_sequence): Don't set sequence_rtl_expr.\n\t(start_sequence_for_rtl_expr): Remove.\n\t(push_topmost_sequence): Don't save sequence_rtl_expr.\n\t(pop_topmost_sequence): Remove comment about not restoring it.\n\t(end_sequence): Don't set seq_rtl_expr.\n\t(init_emit): Don't initialize it.\n\t(mark_sequence_stack): Don't mark it.\n\t(mark_emit_status): Likewise.\n\t* except.c (protect_with_terminate): Use\n\tstart_sequence_for_rtl_expr, not start_sequence.\n\t* expr.c (expand_expr, case RTL_EXPR): Don't call\n\tpreserve_rtl_expr_result or free_temps_for_rtl_expr.\n\t(assign_stack_temp_for_type): Don't set rtl_expr.\n\t(preserve_rtl_expr_result): Remove.\n\t(free_temps_for_rtl_expr): Likewise.\n\t(pop_temp_slots): Likewise.\n\t(mark_temp_slot): Don't mark the rtl_expr.\n\t* stmt.c (expand_start_stmt_expr): Use start_sequence, not\n\tstart_sequence_for_rtl_expr.\n\nFrom-SVN: r32333", "tree": {"sha": "4a738b18e2b2774d1e4bbf775614e65f2ec7e588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a738b18e2b2774d1e4bbf775614e65f2ec7e588"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/comments", "author": null, "committer": null, "parents": [{"sha": "5f12e98764bd830e715fdfa7c8316e07ab4d38c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f12e98764bd830e715fdfa7c8316e07ab4d38c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f12e98764bd830e715fdfa7c8316e07ab4d38c5"}], "stats": {"total": 129, "additions": 95, "deletions": 34}, "files": [{"sha": "7a3d5c78e64629aaef2bb39fb158d86fc9ba3595", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08d0be2f4c377deee7b5d0d5fe7f502a75a26d05", "patch": "@@ -1,3 +1,31 @@\n+2000-03-04  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* function.h (struct sequence_stack): Remove rtl_expr.\n+\t(struct emit_staus): Likewise.\n+\t(seq_rtl_expr): Remove.\n+\t* tree.h (free_temps_for_rtl_expr): Don't declare.\n+\t(start_sequence_for_rtl_expr): Likewise.\n+\t* rtl.h (preserve_rtl_expr_result): Likewise.\n+\t* emit-rtl.c (start_sequence): Don't set sequence_rtl_expr.\n+\t(start_sequence_for_rtl_expr): Remove.\n+\t(push_topmost_sequence): Don't save sequence_rtl_expr.\n+\t(pop_topmost_sequence): Remove comment about not restoring it.\n+\t(end_sequence): Don't set seq_rtl_expr.\n+\t(init_emit): Don't initialize it.\n+\t(mark_sequence_stack): Don't mark it.\n+\t(mark_emit_status): Likewise.\n+\t* except.c (protect_with_terminate): Use\n+\tstart_sequence_for_rtl_expr, not start_sequence.\n+\t* expr.c (expand_expr, case RTL_EXPR): Don't call\n+\tpreserve_rtl_expr_result or free_temps_for_rtl_expr.\n+\t(assign_stack_temp_for_type): Don't set rtl_expr.\n+\t(preserve_rtl_expr_result): Remove.\n+\t(free_temps_for_rtl_expr): Likewise.\n+\t(pop_temp_slots): Likewise.\n+\t(mark_temp_slot): Don't mark the rtl_expr.\n+\t* stmt.c (expand_start_stmt_expr): Use start_sequence, not\n+\tstart_sequence_for_rtl_expr.\n+\t\n 2000-03-04  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* mkdeps.c, mkdeps.h: New files."}, {"sha": "6b1b3b78e6064a49c847f6eedc5198142b990ac7", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=08d0be2f4c377deee7b5d0d5fe7f502a75a26d05", "patch": "@@ -3376,27 +3376,13 @@ start_sequence ()\n   tem->next = seq_stack;\n   tem->first = first_insn;\n   tem->last = last_insn;\n-  tem->sequence_rtl_expr = seq_rtl_expr;\n \n   seq_stack = tem;\n \n   first_insn = 0;\n   last_insn = 0;\n }\n \n-/* Similarly, but indicate that this sequence will be placed in T, an\n-   RTL_EXPR.  See the documentation for start_sequence for more\n-   information about how to use this function.  */\n-\n-void\n-start_sequence_for_rtl_expr (t)\n-     tree t;\n-{\n-  start_sequence ();\n-\n-  seq_rtl_expr = t;\n-}\n-\n /* Set up the insn chain starting with FIRST as the current sequence,\n    saving the previously current one.  See the documentation for\n    start_sequence for more information about how to use this function.  */\n@@ -3430,7 +3416,6 @@ push_topmost_sequence ()\n \n   first_insn = top->first;\n   last_insn = top->last;\n-  seq_rtl_expr = top->sequence_rtl_expr;\n }\n \n /* After emitting to the outer-level insn chain, update the outer-level\n@@ -3446,7 +3431,6 @@ pop_topmost_sequence ()\n \n   top->first = first_insn;\n   top->last = last_insn;\n-  /* ??? Why don't we save seq_rtl_expr here?  */\n \n   end_sequence ();\n }\n@@ -3471,7 +3455,6 @@ end_sequence ()\n \n   first_insn = tem->first;\n   last_insn = tem->last;\n-  seq_rtl_expr = tem->sequence_rtl_expr;\n   seq_stack = tem->next;\n \n   free (tem);\n@@ -3760,7 +3743,6 @@ init_emit ()\n   f->emit = (struct emit_status *) xmalloc (sizeof (struct emit_status));\n   first_insn = NULL;\n   last_insn = NULL;\n-  seq_rtl_expr = NULL;\n   cur_insn_uid = 1;\n   reg_rtx_no = LAST_VIRTUAL_REGISTER + 1;\n   last_linenum = 0;\n@@ -3834,7 +3816,6 @@ mark_sequence_stack (ss)\n   while (ss)\n     {\n       ggc_mark_rtx (ss->first);\n-      ggc_mark_tree (ss->sequence_rtl_expr);\n       ss = ss->next;\n     }\n }\n@@ -3856,7 +3837,6 @@ mark_emit_status (es)\n     ggc_mark_rtx (*r);\n \n   mark_sequence_stack (es->sequence_stack);\n-  ggc_mark_tree (es->sequence_rtl_expr);\n   ggc_mark_rtx (es->x_first_insn);\n }\n "}, {"sha": "c04e73479d3b7525444fac81e01225f39230dd66", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=08d0be2f4c377deee7b5d0d5fe7f502a75a26d05", "patch": "@@ -2095,7 +2095,7 @@ protect_with_terminate (e)\n       TREE_TYPE (handler) = void_type_node;\n       RTL_EXPR_RTL (handler) = const0_rtx;\n       TREE_SIDE_EFFECTS (handler) = 1;\n-      start_sequence_for_rtl_expr (handler);\n+      start_sequence ();\n \n       emit_library_call (terminate_libfunc, 0, VOIDmode, 0);\n       emit_barrier ();"}, {"sha": "544176c652a3467f0befb26cb84f0a76b75d1e7a", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=08d0be2f4c377deee7b5d0d5fe7f502a75a26d05", "patch": "@@ -6306,8 +6306,6 @@ expand_expr (exp, target, tmode, modifier)\n \t  emit_insns (RTL_EXPR_SEQUENCE (exp));\n \t  RTL_EXPR_SEQUENCE (exp) = const0_rtx;\n \t}\n-      preserve_rtl_expr_result (RTL_EXPR_RTL (exp));\n-      free_temps_for_rtl_expr (exp);\n       return RTL_EXPR_RTL (exp);\n \n     case CONSTRUCTOR:"}, {"sha": "510ddcfad8dbe917e5137144994e79c3fcda28d6", "filename": "gcc/function.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=08d0be2f4c377deee7b5d0d5fe7f502a75a26d05", "patch": "@@ -46,7 +46,6 @@ struct sequence_stack\n {\n   /* First and last insns in the chain of the saved sequence.  */\n   rtx first, last;\n-  tree sequence_rtl_expr;\n   struct sequence_stack *next;\n };\n \n@@ -77,11 +76,6 @@ struct emit_status\n   rtx x_first_insn;\n   rtx x_last_insn;\n \n-  /* RTL_EXPR within which the current sequence will be placed.  Use to\n-     prevent reuse of any temporaries within the sequence until after the\n-     RTL_EXPR is emitted.  */\n-  tree sequence_rtl_expr;\n-\n   /* Stack of pending (incomplete) sequences saved by `start_sequence'.\n      Each element describes one pending sequence.\n      The main insn-chain is saved in the last element of the chain,\n@@ -117,7 +111,6 @@ struct emit_status\n \n /* For backward compatibility... eventually these should all go away.  */\n #define reg_rtx_no (cfun->emit->x_reg_rtx_no)\n-#define seq_rtl_expr (cfun->emit->sequence_rtl_expr)\n #define regno_reg_rtx (cfun->emit->x_regno_reg_rtx)\n #define seq_stack (cfun->emit->sequence_stack)\n "}, {"sha": "4ef60db6d6efdff088a3c2b216044a5d9d8ab82d", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=08d0be2f4c377deee7b5d0d5fe7f502a75a26d05", "patch": "@@ -1508,7 +1508,6 @@ extern void reposition_prologue_and_epilogue_notes\tPARAMS ((rtx));\n extern void thread_prologue_and_epilogue_insns\t\tPARAMS ((rtx));\n extern int prologue_epilogue_contains\t\t\tPARAMS ((rtx));\n extern HOST_WIDE_INT get_frame_size\t\t\tPARAMS ((void));\n-extern void preserve_rtl_expr_result\t\t\tPARAMS ((rtx));\n extern void mark_temp_addr_taken\t\t\tPARAMS ((rtx));\n extern void update_temp_slot_address\t\t\tPARAMS ((rtx, rtx));\n extern void purge_addressof\t\t\t\tPARAMS ((rtx));"}, {"sha": "d165b83c30224f1d67dc09d29bc7b817186ae201", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=08d0be2f4c377deee7b5d0d5fe7f502a75a26d05", "patch": "@@ -2025,7 +2025,7 @@ expand_start_stmt_expr ()\n   t = make_node (RTL_EXPR);\n   resume_momentary (momentary);\n   do_pending_stack_adjust ();\n-  start_sequence_for_rtl_expr (t);\n+  start_sequence ();\n   NO_DEFER_POP;\n   expr_stmts_for_value++;\n   return t;"}, {"sha": "2097cfaa9f81ed227b89628731b8cba2247ccfba", "filename": "gcc/testsuite/g++.old-deja/g++.other/inline8.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Finline8.C?ref=08d0be2f4c377deee7b5d0d5fe7f502a75a26d05", "patch": "@@ -0,0 +1,65 @@\n+// Origin: Gerald Pfeifer <pfeifer@dbai.tuwien.ac.at>\n+// Special g++ Options: -O1\n+\n+#include <map>\n+#include <cstdlib>\n+\n+class NAMES_ITEM\n+    {\n+public:\n+    char *name;\n+\n+      NAMES_ITEM(const NAMES_ITEM& item2);\n+\n+      NAMES_ITEM(const char* name2);\n+\n+      ~NAMES_ITEM();\n+\n+      bool operator==(const NAMES_ITEM& n) const;\n+    };\n+\n+\n+NAMES_ITEM::NAMES_ITEM (const NAMES_ITEM& item2)\n+        {\n+        size_t length=strlen(item2.name);\n+\n+        name=new char[length+1];\n+        memcpy(name,item2.name,length+1);\n+        }\n+\n+NAMES_ITEM::NAMES_ITEM (const char* name2)      \n+        {\n+        size_t length=strlen(name2);\n+\n+        name=new char[length+1];\n+        memcpy(name,name2,length+1);\n+        }\n+\n+NAMES_ITEM::~NAMES_ITEM ()\n+{\n+  if (strcmp (name, \"one\") != 0)\n+    abort ();\n+  \n+  name=0;\n+}\n+\n+bool NAMES_ITEM::operator==(const NAMES_ITEM& n) const\n+{\n+  return (strcmp(name,n.name) == 0);\n+}\n+\n+bool operator<(const NAMES_ITEM& n1, const NAMES_ITEM& n2)\n+    {\n+    return (strcmp(n1.name,n2.name) < 0);\n+    }\n+\n+    typedef map<NAMES_ITEM,size_t,less<NAMES_ITEM> > lookup_t;\n+\n+    lookup_t lookup;\n+\n+\tNAMES_ITEM item (\"one\");\n+main()\n+  {\n+        lookup.insert(pair<NAMES_ITEM,size_t>(item,0));\n+  }\n+"}, {"sha": "4746360cf51f7252ae94adf59c7d3a1966317779", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08d0be2f4c377deee7b5d0d5fe7f502a75a26d05/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=08d0be2f4c377deee7b5d0d5fe7f502a75a26d05", "patch": "@@ -2452,7 +2452,6 @@ extern void preserve_temp_slots\t\tPARAMS ((struct rtx_def *));\n extern int aggregate_value_p\t\tPARAMS ((tree));\n extern tree reorder_blocks\t\tPARAMS ((tree,\n \t\t\t\t\t\tstruct rtx_def *));\n-extern void free_temps_for_rtl_expr\tPARAMS ((tree));\n extern void instantiate_virtual_regs\tPARAMS ((tree, struct rtx_def *));\n extern void unshare_all_rtl\t\tPARAMS ((tree, struct rtx_def *));\n extern int max_parm_reg_num\t\tPARAMS ((void));\n@@ -2486,7 +2485,6 @@ extern struct rtx_def *store_expr\t\tPARAMS ((tree, struct rtx_def *,\n extern void check_max_integer_computation_mode\tPARAMS ((tree));\n \n /* In emit-rtl.c */\n-extern void start_sequence_for_rtl_expr\t\tPARAMS ((tree));\n extern struct rtx_def *emit_line_note_after\tPARAMS ((char *, int,\n \t\t\t\t\t\t\tstruct rtx_def *));\n extern struct rtx_def *emit_line_note\t\tPARAMS ((char *, int));"}]}