{"sha": "17029ac2c3a874073805f11941a7b5f888923d3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcwMjlhYzJjM2E4NzQwNzM4MDVmMTE5NDFhN2I1Zjg4ODkyM2QzYQ==", "commit": {"author": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2006-03-09T21:46:14Z"}, "committer": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2006-03-09T21:46:14Z"}, "message": "trans-expr.c (gfc_add_interface_mapping): Copy 'allocatable' attribute from sym to new_sym.\n\nfortran/\n2006-03-09  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        * trans-expr.c (gfc_add_interface_mapping): Copy 'allocatable'\n        attribute from sym to new_sym.  Call build_fold_indirect_ref()\n        for allocatable arguments.\n\ntestsuite/\n2006-03-09  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        * gfortran.dg/allocatable_dummy_1.f90: Test for functions returning\n        arrays too.\n\nFrom-SVN: r111910", "tree": {"sha": "a7ae8c2256c3a5368277e817602f6d8d58322f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7ae8c2256c3a5368277e817602f6d8d58322f71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17029ac2c3a874073805f11941a7b5f888923d3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17029ac2c3a874073805f11941a7b5f888923d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17029ac2c3a874073805f11941a7b5f888923d3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17029ac2c3a874073805f11941a7b5f888923d3a/comments", "author": null, "committer": null, "parents": [{"sha": "a8c1d5f80e0b710089f7e5f6265bdc345c7b514f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c1d5f80e0b710089f7e5f6265bdc345c7b514f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c1d5f80e0b710089f7e5f6265bdc345c7b514f"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "2e3d0f2479a2126fcd3c2ac89a0c16b12e23bc9f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17029ac2c3a874073805f11941a7b5f888923d3a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17029ac2c3a874073805f11941a7b5f888923d3a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=17029ac2c3a874073805f11941a7b5f888923d3a", "patch": "@@ -1,3 +1,9 @@\n+2006-03-09  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\t* trans-expr.c (gfc_add_interface_mapping): Copy 'allocatable'\n+\tattribute from sym to new_sym.  Call build_fold_indirect_ref()\n+\tfor allocatable arguments.\n+\n 2006-03-09 Paul Thomas <pault@gcc.gnu.org>\n \n \tPR fortran/26257"}, {"sha": "d1570a7dd2ebcc282283c224a5d7e73cdaa4f838", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17029ac2c3a874073805f11941a7b5f888923d3a/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17029ac2c3a874073805f11941a7b5f888923d3a/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=17029ac2c3a874073805f11941a7b5f888923d3a", "patch": "@@ -1316,6 +1316,7 @@ gfc_add_interface_mapping (gfc_interface_mapping * mapping,\n   new_sym->attr.referenced = 1;\n   new_sym->attr.dimension = sym->attr.dimension;\n   new_sym->attr.pointer = sym->attr.pointer;\n+  new_sym->attr.allocatable = sym->attr.allocatable;\n   new_sym->attr.flavor = sym->attr.flavor;\n \n   /* Create a fake symtree for it.  */\n@@ -1367,8 +1368,9 @@ gfc_add_interface_mapping (gfc_interface_mapping * mapping,\n \tvalue = build_fold_indirect_ref (value);\n     }\n \n-  /* If the argument is a scalar or a pointer to an array, dereference it.  */\n-  else if (!sym->attr.dimension || sym->attr.pointer)\n+  /* If the argument is a scalar, a pointer to an array or an allocatable,\n+     dereference it.  */\n+  else if (!sym->attr.dimension || sym->attr.pointer || sym->attr.allocatable)\n     value = build_fold_indirect_ref (se->expr);\n   \n   /* For character(*), use the actual argument's descriptor.  */  "}, {"sha": "98ece81ed56d17d44ba92919ad00fafae4fd65a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17029ac2c3a874073805f11941a7b5f888923d3a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17029ac2c3a874073805f11941a7b5f888923d3a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17029ac2c3a874073805f11941a7b5f888923d3a", "patch": "@@ -1,3 +1,8 @@\n+2006-03-09  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\t* gfortran.dg/allocatable_dummy_1.f90: Test for functions returning\n+\tarrays too.\n+\n 2006-03-09  Diego Novillo  <dnovillo@redhat.com>\n \n         * gcc/testsuite/g++.dg/gomp: New directory."}, {"sha": "bfa9ced010f117c5eb9a1cc762ad1717bc3f20df", "filename": "gcc/testsuite/gfortran.dg/allocatable_dummy_1.f90", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17029ac2c3a874073805f11941a7b5f888923d3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17029ac2c3a874073805f11941a7b5f888923d3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_1.f90?ref=17029ac2c3a874073805f11941a7b5f888923d3a", "patch": "@@ -13,6 +13,8 @@ program alloc_dummy\n     call useit(a, b)\n     if (.NOT.all(b == [ 1, 2, 3 ])) call abort()\n \n+    if (.NOT.all(whatever(a) == [ 1, 2, 3 ])) call abort()\n+\n     call kill(a)\n     if (allocated(a)) call abort()\n \n@@ -35,6 +37,13 @@ subroutine useit(x, y)\n         y = x\n     end subroutine useit\n \n+    function whatever(x)\n+        integer, allocatable :: x(:)\n+        integer :: whatever(size(x))\n+        \n+        whatever = x\n+    end function whatever\n+\n     subroutine kill(x)\n         integer, allocatable, intent(out) :: x(:)\n     end subroutine kill"}]}