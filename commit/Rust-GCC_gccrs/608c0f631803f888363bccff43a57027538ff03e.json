{"sha": "608c0f631803f888363bccff43a57027538ff03e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA4YzBmNjMxODAzZjg4ODM2M2JjY2ZmNDNhNTcwMjc1MzhmZjAzZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-11-22T09:05:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-11-22T09:05:53Z"}, "message": "gimple-iterator.c (gimple_find_edge_insert_loc): Ignore fake edges to exit when looking for a place to insert.\n\n2017-11-22  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-iterator.c (gimple_find_edge_insert_loc): Ignore\n\tfake edges to exit when looking for a place to insert.\n\t* tree-ssa-pre.c (clear_expression_ids): Inline into callers\n\tand remove.\n\t(insert_into_preds_of_block): Commit edge insertion immediately,\n\tassert that doesn't require new BBs.\n\t(fini_pre): Release expressions.\n\t(pass_pre::execute): Shuffle things around a bit, if the fn\n\tis too large do not compute AVAIL either as this is really the\n\tquadratic bit.\n\nFrom-SVN: r255047", "tree": {"sha": "28545debd89aa0dd6f1953fb4d48e97f80f783d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28545debd89aa0dd6f1953fb4d48e97f80f783d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/608c0f631803f888363bccff43a57027538ff03e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608c0f631803f888363bccff43a57027538ff03e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/608c0f631803f888363bccff43a57027538ff03e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/608c0f631803f888363bccff43a57027538ff03e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9cf7bfd919f394595c0ac561ed67b333a39ae51e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cf7bfd919f394595c0ac561ed67b333a39ae51e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cf7bfd919f394595c0ac561ed67b333a39ae51e"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "dc96750a2da35c91c0482268713bb648796f3f97", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608c0f631803f888363bccff43a57027538ff03e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608c0f631803f888363bccff43a57027538ff03e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=608c0f631803f888363bccff43a57027538ff03e", "patch": "@@ -1,3 +1,16 @@\n+2017-11-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-iterator.c (gimple_find_edge_insert_loc): Ignore\n+\tfake edges to exit when looking for a place to insert.\n+\t* tree-ssa-pre.c (clear_expression_ids): Inline into callers\n+\tand remove.\n+\t(insert_into_preds_of_block): Commit edge insertion immediately,\n+\tassert that doesn't require new BBs.\n+\t(fini_pre): Release expressions.\n+\t(pass_pre::execute): Shuffle things around a bit, if the fn\n+\tis too large do not compute AVAIL either as this is really the\n+\tquadratic bit.\n+\n 2017-11-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/83089"}, {"sha": "9841eb14784a6f1cd81e937c20b7e189a351fc99", "filename": "gcc/gimple-iterator.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608c0f631803f888363bccff43a57027538ff03e/gcc%2Fgimple-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608c0f631803f888363bccff43a57027538ff03e/gcc%2Fgimple-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-iterator.c?ref=608c0f631803f888363bccff43a57027538ff03e", "patch": "@@ -763,7 +763,12 @@ gimple_find_edge_insert_loc (edge e, gimple_stmt_iterator *gsi,\n      Except for the entry block.  */\n   src = e->src;\n   if ((e->flags & EDGE_ABNORMAL) == 0\n-      && single_succ_p (src)\n+      && (single_succ_p (src)\n+\t  /* Do not count a fake edge as successor as added to infinite\n+\t     loops by connect_infinite_loops_to_exit.  */\n+\t  || (EDGE_COUNT (src->succs) == 2\n+\t      && (EDGE_SUCC (src, 0)->flags & EDGE_FAKE\n+\t\t  || EDGE_SUCC (src, 1)->flags & EDGE_FAKE)))\n       && src != ENTRY_BLOCK_PTR_FOR_FN (cfun))\n     {\n       *gsi = gsi_last_bb (src);"}, {"sha": "477a41ed851eb67e550347033fb69a69ea2df04a", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/608c0f631803f888363bccff43a57027538ff03e/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/608c0f631803f888363bccff43a57027538ff03e/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=608c0f631803f888363bccff43a57027538ff03e", "patch": "@@ -400,15 +400,6 @@ expression_for_id (unsigned int id)\n   return expressions[id];\n }\n \n-/* Free the expression id field in all of our expressions,\n-   and then destroy the expressions array.  */\n-\n-static void\n-clear_expression_ids (void)\n-{\n-  expressions.release ();\n-}\n-\n static object_allocator<pre_expr_d> pre_expr_pool (\"pre_expr nodes\");\n \n /* Given an SSA_NAME NAME, get or create a pre_expr to represent it.  */\n@@ -1331,7 +1322,6 @@ get_representative_for (const pre_expr e)\n }\n \n \n-\n static pre_expr\n phi_translate (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t       basic_block pred, basic_block phiblock);\n@@ -3004,7 +2994,8 @@ insert_into_preds_of_block (basic_block block, unsigned int exprnum,\n       gcc_assert (!(pred->flags & EDGE_ABNORMAL));\n       if (!gimple_seq_empty_p (stmts))\n \t{\n-\t  gsi_insert_seq_on_edge (pred, stmts);\n+\t  basic_block new_bb = gsi_insert_seq_on_edge_immediate (pred, stmts);\n+\t  gcc_assert (! new_bb);\n \t  insertions = true;\n \t}\n       if (!builtexpr)\n@@ -4127,6 +4118,7 @@ static void\n fini_pre ()\n {\n   value_expressions.release ();\n+  expressions.release ();\n   BITMAP_FREE (inserted_exprs);\n   bitmap_obstack_release (&grand_bitmap_obstack);\n   bitmap_set_pool.release ();\n@@ -4181,22 +4173,21 @@ pass_pre::execute (function *fun)\n      loop_optimizer_init may create new phis, etc.  */\n   loop_optimizer_init (LOOPS_NORMAL);\n   split_critical_edges ();\n+  scev_initialize ();\n \n   run_scc_vn (VN_WALK);\n \n   init_pre ();\n-  scev_initialize ();\n-\n-  /* Collect and value number expressions computed in each basic block.  */\n-  compute_avail ();\n \n   /* Insert can get quite slow on an incredibly large number of basic\n      blocks due to some quadratic behavior.  Until this behavior is\n      fixed, don't run it when he have an incredibly large number of\n      bb's.  If we aren't going to run insert, there is no point in\n-     computing ANTIC, either, even though it's plenty fast.  */\n+     computing ANTIC, either, even though it's plenty fast nor do\n+     we require AVAIL.  */\n   if (n_basic_blocks_for_fn (fun) < 4000)\n     {\n+      compute_avail ();\n       compute_antic ();\n       insert ();\n     }\n@@ -4211,19 +4202,19 @@ pass_pre::execute (function *fun)\n      not keeping virtual operands up-to-date.  */\n   gcc_assert (!need_ssa_update_p (fun));\n \n-  /* Remove all the redundant expressions.  */\n-  todo |= vn_eliminate (inserted_exprs);\n-\n   statistics_counter_event (fun, \"Insertions\", pre_stats.insertions);\n   statistics_counter_event (fun, \"PA inserted\", pre_stats.pa_insert);\n   statistics_counter_event (fun, \"HOIST inserted\", pre_stats.hoist_insert);\n   statistics_counter_event (fun, \"New PHIs\", pre_stats.phis);\n \n-  clear_expression_ids ();\n+  /* Remove all the redundant expressions.  */\n+  todo |= vn_eliminate (inserted_exprs);\n \n-  scev_finalize ();\n   remove_dead_inserted_code ();\n+\n   fini_pre ();\n+\n+  scev_finalize ();\n   loop_optimizer_finalize ();\n \n   /* Restore SSA info before tail-merging as that resets it as well.  */"}]}