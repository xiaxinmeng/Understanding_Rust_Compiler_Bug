{"sha": "0d433a6a905c00149293b6540201c0fe2eacb858", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ0MzNhNmE5MDVjMDAxNDkyOTNiNjU0MDIwMWMwZmUyZWFjYjg1OA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-08-25T23:41:10Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-08-25T23:41:10Z"}, "message": "ia64.c (ia64_expand_tls_address): Properly truncate result when op0 is SImode.\n\n        * config/ia64/ia64.c (ia64_expand_tls_address): Properly truncate\n        result when op0 is SImode.\n\nFrom-SVN: r70790", "tree": {"sha": "0b3bb5683d8c9352dccd2c0638f8cc57670301da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b3bb5683d8c9352dccd2c0638f8cc57670301da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d433a6a905c00149293b6540201c0fe2eacb858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d433a6a905c00149293b6540201c0fe2eacb858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d433a6a905c00149293b6540201c0fe2eacb858", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d433a6a905c00149293b6540201c0fe2eacb858/comments", "author": null, "committer": null, "parents": [{"sha": "1d10941673c5b7592235262a11ef1280121914c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d10941673c5b7592235262a11ef1280121914c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d10941673c5b7592235262a11ef1280121914c7"}], "stats": {"total": 57, "additions": 31, "deletions": 26}, "files": [{"sha": "f00426554b58046d8c43408f263f3c8a3cc6137c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d433a6a905c00149293b6540201c0fe2eacb858/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d433a6a905c00149293b6540201c0fe2eacb858/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d433a6a905c00149293b6540201c0fe2eacb858", "patch": "@@ -1,3 +1,8 @@\n+2003-08-25  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.c (ia64_expand_tls_address): Properly truncate\n+\tresult when op0 is SImode.\n+\t\n 2003-08-25  Nathanael Nerode  <neroden@twcny.rr.com>\n \n \t* fixinc/inclhack.def (svr4_sighandler_type): New fix, ported"}, {"sha": "4561345e46e3e4c9509cd8e80f0e84b289349748", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d433a6a905c00149293b6540201c0fe2eacb858/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d433a6a905c00149293b6540201c0fe2eacb858/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=0d433a6a905c00149293b6540201c0fe2eacb858", "patch": "@@ -1222,6 +1222,7 @@ static rtx\n ia64_expand_tls_address (enum tls_model tls_kind, rtx op0, rtx op1)\n {\n   rtx tga_op1, tga_op2, tga_ret, tga_eqv, tmp, insns;\n+  rtx orig_op0 = op0;\n \n   switch (tls_kind)\n     {\n@@ -1245,8 +1246,10 @@ ia64_expand_tls_address (enum tls_model tls_kind, rtx op0, rtx op1)\n       insns = get_insns ();\n       end_sequence ();\n \n+      if (GET_MODE (op0) != Pmode)\n+\top0 = tga_ret;\n       emit_libcall_block (insns, op0, tga_ret, op1);\n-      return NULL_RTX;\n+      break;\n \n     case TLS_MODEL_LOCAL_DYNAMIC:\n       /* ??? This isn't the completely proper way to do local-dynamic\n@@ -1274,19 +1277,16 @@ ia64_expand_tls_address (enum tls_model tls_kind, rtx op0, rtx op1)\n       tmp = gen_reg_rtx (Pmode);\n       emit_libcall_block (insns, tmp, tga_ret, tga_eqv);\n \n-      if (register_operand (op0, Pmode))\n-\ttga_ret = op0;\n-      else\n-\ttga_ret = gen_reg_rtx (Pmode);\n+      if (!register_operand (op0, Pmode))\n+\top0 = gen_reg_rtx (Pmode);\n       if (TARGET_TLS64)\n \t{\n-\t  emit_insn (gen_load_dtprel (tga_ret, op1));\n-\t  emit_insn (gen_adddi3 (tga_ret, tmp, tga_ret));\n+\t  emit_insn (gen_load_dtprel (op0, op1));\n+\t  emit_insn (gen_adddi3 (op0, tmp, op0));\n \t}\n       else\n-\temit_insn (gen_add_dtprel (tga_ret, tmp, op1));\n-\n-      return (tga_ret == op0 ? NULL_RTX : tga_ret);\n+\temit_insn (gen_add_dtprel (op0, tmp, op1));\n+      break;\n \n     case TLS_MODEL_INITIAL_EXEC:\n       tmp = gen_reg_rtx (Pmode);\n@@ -1295,32 +1295,32 @@ ia64_expand_tls_address (enum tls_model tls_kind, rtx op0, rtx op1)\n       RTX_UNCHANGING_P (tmp) = 1;\n       tmp = force_reg (Pmode, tmp);\n \n-      if (register_operand (op0, Pmode))\n-\top1 = op0;\n-      else\n-\top1 = gen_reg_rtx (Pmode);\n-      emit_insn (gen_adddi3 (op1, tmp, gen_thread_pointer ()));\n-\n-      return (op1 == op0 ? NULL_RTX : op1);\n+      if (!register_operand (op0, Pmode))\n+\top0 = gen_reg_rtx (Pmode);\n+      emit_insn (gen_adddi3 (op0, tmp, gen_thread_pointer ()));\n+      break;\n \n     case TLS_MODEL_LOCAL_EXEC:\n-      if (register_operand (op0, Pmode))\n-\ttmp = op0;\n-      else\n-\ttmp = gen_reg_rtx (Pmode);\n+      if (!register_operand (op0, Pmode))\n+\top0 = gen_reg_rtx (Pmode);\n       if (TARGET_TLS64)\n \t{\n-\t  emit_insn (gen_load_tprel (tmp, op1));\n-\t  emit_insn (gen_adddi3 (tmp, gen_thread_pointer (), tmp));\n+\t  emit_insn (gen_load_tprel (op0, op1));\n+\t  emit_insn (gen_adddi3 (op0, gen_thread_pointer (), op0));\n \t}\n       else\n-\temit_insn (gen_add_tprel (tmp, gen_thread_pointer (), op1));\n-\n-      return (tmp == op0 ? NULL_RTX : tmp);\n+\temit_insn (gen_add_tprel (op0, gen_thread_pointer (), op1));\n+      break;\n \n     default:\n       abort ();\n     }\n+\n+  if (orig_op0 == op0)\n+    return NULL_RTX;\n+  if (GET_MODE (orig_op0) == Pmode)\n+    return op0;\n+  return gen_lowpart (GET_MODE (orig_op0), op0);\n }\n \n rtx"}]}