{"sha": "51212b321b1c143c36e54d68e9a29d1a1125f954", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEyMTJiMzIxYjFjMTQzYzM2ZTU0ZDY4ZTlhMjlkMWExMTI1Zjk1NA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2009-03-27T22:22:30Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-03-27T22:22:30Z"}, "message": "re PR target/39472 (Add -mabi=[ms|sysv])\n\ngcc/\n\n2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/39472\n\t* config/i386/i386.c (ix86_abi): New.\n\t(override_options): Handle -mabi=.\n\t(ix86_function_arg_regno_p): Replace DEFAULT_ABI with\n\tix86_abi.\n\t(ix86_call_abi_override): Likewise.\n\t(init_cumulative_args): Likewise.\n\t(function_arg_advance): Likewise.\n\t(function_arg_64): Likewise.\n\t(function_arg): Likewise.\n\t(ix86_pass_by_reference): Likewise.\n\t(ix86_function_value_regno_p): Likewise.\n\t(ix86_build_builtin_va_list_abi): Likewise.\n\t(setup_incoming_varargs_64): Likewise.\n\t(is_va_list_char_pointer): Likewise.\n\t(ix86_init_machine_status): Likewise.\n\t(ix86_reg_parm_stack_space): Use enum calling_abi on\n\tcall_abi.\n\t(ix86_function_type_abi): Return enum calling_abi.  Rewrite\n\tfor 64bit.  Replace DEFAULT_ABI with ix86_abi.\n\t(ix86_function_abi): Make it static and return enum\n\tcalling_abi.\n\t(ix86_cfun_abi): Return enum calling_abi.  Replace DEFAULT_ABI\n\twith ix86_abi.\n\t(ix86_fn_abi_va_list): Updated.\n\n\t* config/i386/i386.h (ix86_abi): New.\n\t(STACK_BOUNDARY): Replace DEFAULT_ABI with ix86_abi.\n\t(CONDITIONAL_REGISTER_USAGE): Likewise.\n\t(CUMULATIVE_ARGS): Change call_abi type to enum calling_abi.\n\t(machine_function): Likewise.\n\n\t* config/i386/i386.md (untyped_call): Replace DEFAULT_ABI\n\twith ix86_abi.\n\t* config/i386/cygming.h (TARGET_64BIT_MS_ABI): Likewise.\n\t(STACK_BOUNDARY): Likewise.\n\t* config/i386/mingw32.h (EXTRA_OS_CPP_BUILTINS): Likewise.\n\n\t* config/i386/i386.opt (mabi=): New.\n\n\t* config/i386/i386-protos.h (ix86_cfun_abi): Changed to\n\treturn enum calling_abi.\n\t(ix86_function_type_abi): Likewise.\n\t(ix86_function_abi): Removed.\n\n\t* doc/invoke.texi: Document -mabi= option for x86.\n\ngcc/testsuite/\n\n2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/39472\n\t* gcc.target/x86_64/abi/callabi/func-2a.c: New.\n\t* gcc.target/x86_64/abi/callabi/func-2b.c: Likewise.\n\t* gcc.target/x86_64/abi/callabi/func-indirect-2a.c: Likewise.\n\t* gcc.target/x86_64/abi/callabi/func-indirect-2b.c: Likewise.\n\t* gcc.target/x86_64/abi/callabi/vaarg-4a.c: Likewise.\n\t* gcc.target/x86_64/abi/callabi/vaarg-4b.c: Likewise.\n\t* gcc.target/x86_64/abi/callabi/vaarg-5a.c: Likewise.\n\t* gcc.target/x86_64/abi/callabi/vaarg-5b.c: Likewise.\n\nFrom-SVN: r145133", "tree": {"sha": "fec28a074b7f4d51805408c4567ef1b4dfc755dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fec28a074b7f4d51805408c4567ef1b4dfc755dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51212b321b1c143c36e54d68e9a29d1a1125f954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51212b321b1c143c36e54d68e9a29d1a1125f954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51212b321b1c143c36e54d68e9a29d1a1125f954", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51212b321b1c143c36e54d68e9a29d1a1125f954/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9027c95aba77aa51f6c8777e918e6c4db3063169", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9027c95aba77aa51f6c8777e918e6c4db3063169", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9027c95aba77aa51f6c8777e918e6c4db3063169"}], "stats": {"total": 385, "additions": 334, "deletions": 51}, "files": [{"sha": "d874d24670a911a48a6a47925ec59e1ab15a33e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -1,3 +1,52 @@\n+2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/39472\n+\t* config/i386/i386.c (ix86_abi): New.\n+\t(override_options): Handle -mabi=.\n+\t(ix86_function_arg_regno_p): Replace DEFAULT_ABI with\n+\tix86_abi.\n+\t(ix86_call_abi_override): Likewise.\n+\t(init_cumulative_args): Likewise.\n+\t(function_arg_advance): Likewise.\n+\t(function_arg_64): Likewise.\n+\t(function_arg): Likewise.\n+\t(ix86_pass_by_reference): Likewise.\n+\t(ix86_function_value_regno_p): Likewise.\n+\t(ix86_build_builtin_va_list_abi): Likewise.\n+\t(setup_incoming_varargs_64): Likewise.\n+\t(is_va_list_char_pointer): Likewise.\n+\t(ix86_init_machine_status): Likewise.\n+\t(ix86_reg_parm_stack_space): Use enum calling_abi on\n+\tcall_abi.\n+\t(ix86_function_type_abi): Return enum calling_abi.  Rewrite\n+\tfor 64bit.  Replace DEFAULT_ABI with ix86_abi.\n+\t(ix86_function_abi): Make it static and return enum\n+\tcalling_abi.\n+\t(ix86_cfun_abi): Return enum calling_abi.  Replace DEFAULT_ABI\n+\twith ix86_abi.\n+\t(ix86_fn_abi_va_list): Updated.\n+\n+\t* config/i386/i386.h (ix86_abi): New.\n+\t(STACK_BOUNDARY): Replace DEFAULT_ABI with ix86_abi.\n+\t(CONDITIONAL_REGISTER_USAGE): Likewise.\n+\t(CUMULATIVE_ARGS): Change call_abi type to enum calling_abi.\n+\t(machine_function): Likewise.\n+\n+\t* config/i386/i386.md (untyped_call): Replace DEFAULT_ABI\n+\twith ix86_abi.\n+\t* config/i386/cygming.h (TARGET_64BIT_MS_ABI): Likewise.\n+\t(STACK_BOUNDARY): Likewise.\n+\t* config/i386/mingw32.h (EXTRA_OS_CPP_BUILTINS): Likewise.\n+\n+\t* config/i386/i386.opt (mabi=): New.\n+\n+\t* config/i386/i386-protos.h (ix86_cfun_abi): Changed to\n+\treturn enum calling_abi.\n+\t(ix86_function_type_abi): Likewise.\n+\t(ix86_function_abi): Removed.\n+\n+\t* doc/invoke.texi: Document -mabi= option for x86.\n+\n 2009-03-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (real_dconstp): Delete."}, {"sha": "431e926818a6ee0547e32c5cf940b73982d4694d", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -34,7 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n #undef TARGET_64BIT_MS_ABI\n-#define TARGET_64BIT_MS_ABI (!cfun ? DEFAULT_ABI == MS_ABI : TARGET_64BIT && cfun->machine->call_abi == MS_ABI)\n+#define TARGET_64BIT_MS_ABI (!cfun ? ix86_abi == MS_ABI : TARGET_64BIT && cfun->machine->call_abi == MS_ABI)\n \n #undef DEFAULT_ABI\n #define DEFAULT_ABI (TARGET_64BIT ? MS_ABI : SYSV_ABI)\n@@ -202,7 +202,7 @@ do {\t\t\t\t\t\t\\\n #define CHECK_STACK_LIMIT 4000\n \n #undef STACK_BOUNDARY\n-#define STACK_BOUNDARY\t(DEFAULT_ABI == MS_ABI ? 128 : BITS_PER_WORD)\n+#define STACK_BOUNDARY\t(ix86_abi == MS_ABI ? 128 : BITS_PER_WORD)\n \n /* By default, target has a 80387, uses IEEE compatible arithmetic,\n    returns float values in the 387 and needs stack probes."}, {"sha": "d6f5e5ae862b0e1a6d426a036e3ef4d0b6efe7f8", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -139,9 +139,8 @@ extern int ix86_function_arg_boundary (enum machine_mode, tree);\n extern bool ix86_sol10_return_in_memory (const_tree,const_tree);\n extern rtx ix86_force_to_memory (enum machine_mode, rtx);\n extern void ix86_free_from_memory (enum machine_mode);\n-extern int ix86_cfun_abi (void);\n-extern int ix86_function_abi (const_tree);\n-extern int ix86_function_type_abi (const_tree);\n+extern enum calling_abi ix86_cfun_abi (void);\n+extern enum calling_abi ix86_function_type_abi (const_tree);\n extern void ix86_call_abi_override (const_tree);\n extern tree ix86_fn_abi_va_list (tree);\n extern tree ix86_canonical_va_list_type (tree);"}, {"sha": "5f36ec3b7944ae2d1c38394b339aed3a4dd5a68c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 54, "deletions": 38, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -1743,6 +1743,9 @@ static unsigned int ix86_default_incoming_stack_boundary;\n /* Alignment for incoming stack boundary in bits.  */\n unsigned int ix86_incoming_stack_boundary;\n \n+/* The abi used by target.  */\n+enum calling_abi ix86_abi = DEFAULT_ABI;\n+\n /* Values 1-5: see jump.c */\n int ix86_branch_cost;\n \n@@ -1819,6 +1822,8 @@ static bool ix86_valid_target_attribute_inner_p (tree, char *[]);\n static bool ix86_can_inline_p (tree, tree);\n static void ix86_set_current_function (tree);\n \n+static enum calling_abi ix86_function_abi (const_tree);\n+\n \f\n /* The svr4 ABI for the i386 says that records and unions are returned\n    in memory.  */\n@@ -2716,6 +2721,18 @@ override_options (bool main_args_p)\n     error (\"bad value (%s) for %sarch=%s %s\",\n \t   ix86_arch_string, prefix, suffix, sw);\n \n+  /* Validate -mabi= value.  */\n+  if (ix86_abi_string)\n+    {\n+      if (strcmp (ix86_abi_string, \"sysv\") == 0)\n+\tix86_abi = SYSV_ABI;\n+      else if (strcmp (ix86_abi_string, \"ms\") == 0)\n+\tix86_abi = MS_ABI;\n+      else\n+\terror (\"unknown ABI (%s) for %sabi=%s %s\",\n+\t       ix86_abi_string, prefix, suffix, sw);\n+    }\n+\n   if (ix86_cmodel_string != 0)\n     {\n       if (!strcmp (ix86_cmodel_string, \"small\"))\n@@ -4515,14 +4532,14 @@ ix86_function_arg_regno_p (int regno)\n      default ABI.  */\n \n   /* RAX is used as hidden argument to va_arg functions.  */\n-  if (DEFAULT_ABI == SYSV_ABI && regno == AX_REG)\n+  if (ix86_abi == SYSV_ABI && regno == AX_REG)\n     return true;\n \n-  if (DEFAULT_ABI == MS_ABI)\n+  if (ix86_abi == MS_ABI)\n     parm_regs = x86_64_ms_abi_int_parameter_registers;\n   else\n     parm_regs = x86_64_int_parameter_registers;\n-  for (i = 0; i < (DEFAULT_ABI == MS_ABI ? X64_REGPARM_MAX\n+  for (i = 0; i < (ix86_abi == MS_ABI ? X64_REGPARM_MAX\n   \t\t\t\t\t : X86_64_REGPARM_MAX); i++)\n     if (regno == parm_regs[i])\n       return true;\n@@ -4550,7 +4567,7 @@ ix86_must_pass_in_stack (enum machine_mode mode, const_tree type)\n int\n ix86_reg_parm_stack_space (const_tree fndecl)\n {\n-  int call_abi = SYSV_ABI;\n+  enum calling_abi call_abi = SYSV_ABI;\n   if (fndecl != NULL_TREE && TREE_CODE (fndecl) == FUNCTION_DECL)\n     call_abi = ix86_function_abi (fndecl);\n   else\n@@ -4562,37 +4579,39 @@ ix86_reg_parm_stack_space (const_tree fndecl)\n \n /* Returns value SYSV_ABI, MS_ABI dependent on fntype, specifying the\n    call abi used.  */\n-int\n+enum calling_abi\n ix86_function_type_abi (const_tree fntype)\n {\n   if (TARGET_64BIT && fntype != NULL)\n     {\n-      int abi;\n-      if (DEFAULT_ABI == SYSV_ABI)\n-        abi = lookup_attribute (\"ms_abi\", TYPE_ATTRIBUTES (fntype)) ? MS_ABI : SYSV_ABI;\n-      else\n-        abi = lookup_attribute (\"sysv_abi\", TYPE_ATTRIBUTES (fntype)) ? SYSV_ABI : MS_ABI;\n-\n+      enum calling_abi abi = ix86_abi;\n+      if (abi == SYSV_ABI)\n+\t{\n+\t  if (lookup_attribute (\"ms_abi\", TYPE_ATTRIBUTES (fntype)))\n+\t    abi = MS_ABI;\n+\t}\n+      else if (lookup_attribute (\"sysv_abi\", TYPE_ATTRIBUTES (fntype)))\n+\tabi = SYSV_ABI;\n       return abi;\n     }\n-  return DEFAULT_ABI;\n+  return ix86_abi;\n }\n \n-int\n+static enum calling_abi\n ix86_function_abi (const_tree fndecl)\n {\n   if (! fndecl)\n-    return DEFAULT_ABI;\n+    return ix86_abi;\n   return ix86_function_type_abi (TREE_TYPE (fndecl));\n }\n \n /* Returns value SYSV_ABI, MS_ABI dependent on cfun, specifying the\n    call abi used.  */\n-int\n+enum calling_abi\n ix86_cfun_abi (void)\n {\n   if (! cfun || ! TARGET_64BIT)\n-    return DEFAULT_ABI;\n+    return ix86_abi;\n   return cfun->machine->call_abi;\n }\n \n@@ -4606,7 +4625,7 @@ void\n ix86_call_abi_override (const_tree fndecl)\n {\n   if (fndecl == NULL_TREE)\n-    cfun->machine->call_abi = DEFAULT_ABI;\n+    cfun->machine->call_abi = ix86_abi;\n   else\n     cfun->machine->call_abi = ix86_function_type_abi (TREE_TYPE (fndecl));\n }\n@@ -4646,17 +4665,17 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n   cum->nregs = ix86_regparm;\n   if (TARGET_64BIT)\n     {\n-      if (cum->call_abi != DEFAULT_ABI)\n-        cum->nregs = DEFAULT_ABI != SYSV_ABI ? X86_64_REGPARM_MAX\n+      if (cum->call_abi != ix86_abi)\n+        cum->nregs = ix86_abi != SYSV_ABI ? X86_64_REGPARM_MAX\n         \t\t\t\t     : X64_REGPARM_MAX;\n     }\n   if (TARGET_SSE)\n     {\n       cum->sse_nregs = SSE_REGPARM_MAX;\n       if (TARGET_64BIT)\n         {\n-          if (cum->call_abi != DEFAULT_ABI)\n-            cum->sse_nregs = DEFAULT_ABI != SYSV_ABI ? X86_64_SSE_REGPARM_MAX\n+          if (cum->call_abi != ix86_abi)\n+            cum->sse_nregs = ix86_abi != SYSV_ABI ? X86_64_SSE_REGPARM_MAX\n             \t\t\t\t\t     : X64_SSE_REGPARM_MAX;\n         }\n     }\n@@ -5582,7 +5601,7 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   if (type)\n     mode = type_natural_mode (type, NULL);\n \n-  if (TARGET_64BIT && (cum ? cum->call_abi : DEFAULT_ABI) == MS_ABI)\n+  if (TARGET_64BIT && (cum ? cum->call_abi : ix86_abi) == MS_ABI)\n     function_arg_advance_ms_64 (cum, bytes, words);\n   else if (TARGET_64BIT)\n     function_arg_advance_64 (cum, mode, type, words, named);\n@@ -5728,9 +5747,9 @@ function_arg_64 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   if (mode == VOIDmode)\n     return GEN_INT (cum->maybe_vaarg\n \t\t    ? (cum->sse_nregs < 0\n-\t\t       ? (cum->call_abi == DEFAULT_ABI\n+\t\t       ? (cum->call_abi == ix86_abi\n \t\t          ? SSE_REGPARM_MAX\n-\t\t          : (DEFAULT_ABI != SYSV_ABI ? X86_64_SSE_REGPARM_MAX\n+\t\t          : (ix86_abi != SYSV_ABI ? X86_64_SSE_REGPARM_MAX\n \t\t          \t\t\t     : X64_SSE_REGPARM_MAX))\n  \t       : cum->sse_regno)\n \t\t    : -1);\n@@ -5824,7 +5843,7 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode omode,\n   if (type && TREE_CODE (type) == VECTOR_TYPE)\n     mode = type_natural_mode (type, cum);\n \n-  if (TARGET_64BIT && (cum ? cum->call_abi : DEFAULT_ABI) == MS_ABI)\n+  if (TARGET_64BIT && (cum ? cum->call_abi : ix86_abi) == MS_ABI)\n     return function_arg_ms_64 (cum, mode, omode, named, bytes);\n   else if (TARGET_64BIT)\n     return function_arg_64 (cum, mode, omode, type, named);\n@@ -5844,7 +5863,7 @@ ix86_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n \t\t\tconst_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   /* See Windows x64 Software Convention.  */\n-  if (TARGET_64BIT && (cum ? cum->call_abi : DEFAULT_ABI) == MS_ABI)\n+  if (TARGET_64BIT && (cum ? cum->call_abi : ix86_abi) == MS_ABI)\n     {\n       int msize = (int) GET_MODE_SIZE (mode);\n       if (type)\n@@ -5984,7 +6003,7 @@ ix86_function_value_regno_p (int regno)\n       /* TODO: The function should depend on current function ABI but\n        builtins.c would need updating then. Therefore we use the\n        default ABI.  */\n-      if (TARGET_64BIT && DEFAULT_ABI == MS_ABI)\n+      if (TARGET_64BIT && ix86_abi == MS_ABI)\n \treturn false;\n       return TARGET_FLOAT_RETURNS_IN_80387;\n \n@@ -6380,13 +6399,13 @@ ix86_build_builtin_va_list_abi (enum calling_abi abi)\n static tree\n ix86_build_builtin_va_list (void)\n {\n-  tree ret = ix86_build_builtin_va_list_abi (DEFAULT_ABI);\n+  tree ret = ix86_build_builtin_va_list_abi (ix86_abi);\n \n   /* Initialize abi specific va_list builtin types.  */\n   if (TARGET_64BIT)\n     {\n       tree t;\n-      if (DEFAULT_ABI == MS_ABI)\n+      if (ix86_abi == MS_ABI)\n         {\n           t = ix86_build_builtin_va_list_abi (SYSV_ABI);\n           if (TREE_CODE (t) != RECORD_TYPE)\n@@ -6400,7 +6419,7 @@ ix86_build_builtin_va_list (void)\n             t = build_variant_type_copy (t);\n           sysv_va_list_type_node = t;\n         }\n-      if (DEFAULT_ABI != MS_ABI)\n+      if (ix86_abi != MS_ABI)\n         {\n           t = ix86_build_builtin_va_list_abi (MS_ABI);\n           if (TREE_CODE (t) != RECORD_TYPE)\n@@ -6433,8 +6452,8 @@ setup_incoming_varargs_64 (CUMULATIVE_ARGS *cum)\n   int i;\n   int regparm = ix86_regparm;\n \n-  if (cum->call_abi != DEFAULT_ABI)\n-    regparm = DEFAULT_ABI != SYSV_ABI ? X86_64_REGPARM_MAX : X64_REGPARM_MAX;\n+  if (cum->call_abi != ix86_abi)\n+    regparm = ix86_abi != SYSV_ABI ? X86_64_REGPARM_MAX : X64_REGPARM_MAX;\n \n   /* GPR size of varargs save area.  */\n   if (cfun->va_list_gpr_size)\n@@ -6587,7 +6606,7 @@ is_va_list_char_pointer (tree type)\n     return true;\n   canonic = ix86_canonical_va_list_type (type);\n   return (canonic == ms_va_list_type_node\n-          || (DEFAULT_ABI == MS_ABI && canonic == va_list_type_node));\n+          || (ix86_abi == MS_ABI && canonic == va_list_type_node));\n }\n \n /* Implement va_start.  */\n@@ -18724,7 +18743,7 @@ ix86_init_machine_status (void)\n   f = GGC_CNEW (struct machine_function);\n   f->use_fast_prologue_epilogue_nregs = -1;\n   f->tls_descriptor_call_expanded_p = 0;\n-  f->call_abi = DEFAULT_ABI;\n+  f->call_abi = ix86_abi;\n \n   return f;\n }\n@@ -29443,14 +29462,11 @@ x86_builtin_vectorization_cost (bool runtime_test)\n tree\n ix86_fn_abi_va_list (tree fndecl)\n {\n-  int abi;\n-\n   if (!TARGET_64BIT)\n     return va_list_type_node;\n   gcc_assert (fndecl != NULL_TREE);\n-  abi = ix86_function_abi ((const_tree) fndecl);\n \n-  if (abi == MS_ABI)\n+  if (ix86_function_abi ((const_tree) fndecl) == MS_ABI)\n     return ms_va_list_type_node;\n   else\n     return sysv_va_list_type_node;"}, {"sha": "e4d4463bcdc77b8fc6e2fd0878a2bd7b62e158f0", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -465,7 +465,10 @@ enum calling_abi\n   MS_ABI = 1\n };\n \n-/* The default abi form used by target.  */\n+/* The abi used by target.  */\n+extern enum calling_abi ix86_abi;\n+\n+/* The default abi used by target.  */\n #define DEFAULT_ABI SYSV_ABI\n \n /* Subtargets may reset this to 1 in order to enable 96-bit long double\n@@ -653,7 +656,7 @@ enum target_cpu_default\n \n /* Boundary (in *bits*) on which stack pointer should be aligned.  */\n #define STACK_BOUNDARY \\\n- (TARGET_64BIT && DEFAULT_ABI == MS_ABI ? 128 : BITS_PER_WORD)\n+ (TARGET_64BIT && ix86_abi == MS_ABI ? 128 : BITS_PER_WORD)\n \n /* Stack boundary of the main function guaranteed by OS.  */\n #define MAIN_STACK_BOUNDARY (TARGET_64BIT ? 128 : 32)\n@@ -949,7 +952,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       fixed_regs[j] = call_used_regs[j] = 1;\t\t\t\t\\\n     if (TARGET_64BIT\t\t\t\t\t\t\t\\\n \t&& ((cfun && cfun->machine->call_abi == MS_ABI)\t\t\t\\\n-\t    || (!cfun && DEFAULT_ABI == MS_ABI)))\t\t\t\\\n+\t    || (!cfun && ix86_abi == MS_ABI)))\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tcall_used_regs[SI_REG] = 0;\t\t\t\t\t\\\n \tcall_used_regs[DI_REG] = 0;\t\t\t\t\t\\\n@@ -1609,7 +1612,7 @@ typedef struct ix86_args {\n   int maybe_vaarg;\t\t/* true for calls to possibly vardic fncts.  */\n   int float_in_sse;\t\t/* 1 if in 32-bit mode SFmode (2 for DFmode) should\n \t\t\t\t   be passed in SSE registers.  Otherwise 0.  */\n-  int call_abi;\t\t\t/* Set to SYSV_ABI for sysv abi. Otherwise\n+  enum calling_abi call_abi;\t/* Set to SYSV_ABI for sysv abi. Otherwise\n  \t\t\t\t   MS_ABI for ms abi.  */\n } CUMULATIVE_ARGS;\n \n@@ -2428,7 +2431,7 @@ struct machine_function GTY(())\n   int tls_descriptor_call_expanded_p;\n   /* This value is used for amd64 targets and specifies the current abi\n      to be used. MS_ABI means ms abi. Otherwise SYSV_ABI means sysv abi.  */\n-  int call_abi;\n+   enum calling_abi call_abi;\n };\n \n #define ix86_stack_locals (cfun->machine->stack_locals)"}, {"sha": "a112198c381d4b9a39d0267e5dcaca86da0b23ad", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -15164,7 +15164,7 @@\n \t\t     ? gen_rtx_REG (XCmode, FIRST_FLOAT_REG) : NULL),\n \t\t    operands[0], const0_rtx,\n \t\t    GEN_INT ((TARGET_64BIT\n-\t\t\t      ? (DEFAULT_ABI == SYSV_ABI\n+\t\t\t      ? (ix86_abi == SYSV_ABI\n \t\t\t\t ? X86_64_SSE_REGPARM_MAX\n \t\t\t\t : X64_SSE_REGPARM_MAX)\n \t\t\t      : X86_32_SSE_REGPARM_MAX)"}, {"sha": "6fd218f8edefe4e498753af7551ae0363900a16b", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -228,6 +228,10 @@ mtune=\n Target RejectNegative Joined Var(ix86_tune_string)\n Schedule code for given CPU\n \n+mabi=\n+Target RejectNegative Joined Var(ix86_abi_string)\n+Generate code that conforms to the given ABI\n+\n mveclibabi=\n Target RejectNegative Joined Var(ix86_veclibabi_string)\n Vector library ABI to use"}, {"sha": "746d7d105da1ca17a72f6a1e4af2853727d746f5", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -38,7 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n       builtin_define_std (\"WINNT\");\t\t\t\t\\\n       builtin_define_with_int_value (\"_INTEGRAL_MAX_BITS\",\t\\\n \t\t\t\t     TYPE_PRECISION (intmax_type_node));\\\n-      if (TARGET_64BIT && DEFAULT_ABI == MS_ABI)\t\t\t\\\n+      if (TARGET_64BIT && ix86_abi == MS_ABI)\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__MINGW64__\");\t\t\t\\\n \t  builtin_define_std (\"WIN64\");\t\t\t\t\\"}, {"sha": "ac5b2c845800d7cee57966082f45f92be690948c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -585,7 +585,7 @@ Objective-C and Objective-C++ Dialects}.\n -m96bit-long-double  -mregparm=@var{num}  -msseregparm @gol\n -mveclibabi=@var{type} -mpc32 -mpc64 -mpc80 -mstackrealign @gol\n -momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs @gol\n--mcmodel=@var{code-model} @gol\n+-mcmodel=@var{code-model} -mabi=@var{name} @gol\n -m32  -m64 -mlarge-data-threshold=@var{num} @gol\n -mfused-madd -mno-fused-madd -msse2avx}\n \n@@ -11393,6 +11393,16 @@ when @option{-mveclibabi=acml} is used. Both @option{-ftree-vectorize} and\n @option{-funsafe-math-optimizations} have to be enabled. A SVML or ACML ABI\n compatible library will have to be specified at link time.\n \n+@item -mabi=@var{name}\n+@opindex mabi\n+Generate code for the specified calling convention.  Permissible values\n+are: @samp{sysv} for the ABI used on GNU/Linux and other systems and\n+@samp{ms} for the Microsoft ABI.  The default is to use the Microsoft\n+ABI when targeting Windows.  On all other systems, the default is the\n+SYSV ABI.  You can control this behavior for a specific function by\n+using the function attribute @samp{ms_abi}/@samp{sysv_abi}.\n+@xref{Function Attributes}.\n+\n @item -mpush-args\n @itemx -mno-push-args\n @opindex mpush-args"}, {"sha": "a67ad29873d8866de62350dd9fa43760aa0c146d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -1,3 +1,15 @@\n+2009-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/39472\n+\t* gcc.target/x86_64/abi/callabi/func-2a.c: New.\n+\t* gcc.target/x86_64/abi/callabi/func-2b.c: Likewise.\n+\t* gcc.target/x86_64/abi/callabi/func-indirect-2a.c: Likewise.\n+\t* gcc.target/x86_64/abi/callabi/func-indirect-2b.c: Likewise.\n+\t* gcc.target/x86_64/abi/callabi/vaarg-4a.c: Likewise.\n+\t* gcc.target/x86_64/abi/callabi/vaarg-4b.c: Likewise.\n+\t* gcc.target/x86_64/abi/callabi/vaarg-5a.c: Likewise.\n+\t* gcc.target/x86_64/abi/callabi/vaarg-5b.c: Likewise.\n+\n 2009-03-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/torture/builtin-explog-1.c: Remove tests that aren't true"}, {"sha": "048da6e56ac6fad10a80fd9333da74c2ea64de8b", "filename": "gcc/testsuite/gcc.target/x86_64/abi/callabi/func-2a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Ffunc-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Ffunc-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Ffunc-2a.c?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -0,0 +1,27 @@\n+/* Test for cross x86_64<->w64 abi standard calls.  */\n+/* { dg-do run { target i?86-*-linux* x86_64-*-linux* } } */\n+/* { dg-options \"-O2 -mabi=ms -std=gnu99 -ffast-math -fno-builtin\" } */\n+/* { dg-additional-sources \"func-2b.c\" } */\n+\n+extern void __attribute__ ((sysv_abi)) abort (void);\n+long double func_cross (long double, double, float, long, int, char);\n+\n+long double __attribute__ ((sysv_abi))\n+func_native (long double a, double b, float c, long d, int e, char f)\n+{\n+  long double ret;\n+  ret = a + (long double) b + (long double) c;\n+  ret *= (long double) (d + (long) e);\n+  if (f>0)\n+    ret += func_native (a,b,c,d,e,-f);\n+  return ret;\n+}\n+\n+int __attribute__ ((sysv_abi))\n+main ()\n+{\n+  if (func_cross (1.0,2.0,3.0,1,2,3)\n+      != func_native (1.0,2.0,3.0,1,2,3))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "fe85dd1860d2b2495ead3e392bb02858cc8f8bfb", "filename": "gcc/testsuite/gcc.target/x86_64/abi/callabi/func-2b.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Ffunc-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Ffunc-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Ffunc-2b.c?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -0,0 +1,13 @@\n+/* Test for cross x86_64<->w64 abi standard calls.  */\n+/* { dg-options \"-mabi=ms -std=gnu99 -ffast-math -fno-builtin\" } */\n+\n+long double func_cross (long double a, double b, float c, long d, int e,\n+\t\t\tchar f)\n+{\n+  long double ret;\n+  ret = a + (long double) b + (long double) c;\n+  ret *= (long double) (d + (long) e);\n+  if (f>0)\n+    ret += func_cross (a,b,c,d,e,-f);\n+  return ret;\n+}"}, {"sha": "730b8db9c1f9c0baa9540d5a541dc8811289e9c1", "filename": "gcc/testsuite/gcc.target/x86_64/abi/callabi/func-indirect-2a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Ffunc-indirect-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Ffunc-indirect-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Ffunc-indirect-2a.c?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -0,0 +1,17 @@\n+/* Test for cross x86_64<->w64 abi standard calls via variable.  */\n+/* { dg-do run { target i?86-*-linux* x86_64-*-linux* } } */\n+/* { dg-options \"-O2 -mabi=ms -std=gnu99 -ffast-math -fno-builtin\" } */\n+/* { dg-additional-sources \"func-indirect-2b.c\" } */\n+\n+extern void __attribute__ ((sysv_abi)) abort (void);\n+typedef int (*func)(void *, char *, char *, short, long long);\n+extern func get_callback (void);\n+\n+int __attribute__ ((sysv_abi))\n+main ()\n+{\n+  func callme = get_callback ();\n+  if (callme (0, 0, 0, 0x1234, 0x1234567890abcdefLL))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "1a9fccd97f6a2f8194f3d205d39e8a13e6c32ee5", "filename": "gcc/testsuite/gcc.target/x86_64/abi/callabi/func-indirect-2b.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Ffunc-indirect-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Ffunc-indirect-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Ffunc-indirect-2b.c?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -0,0 +1,24 @@\n+/* Test for cross x86_64<->w64 abi standard calls via variable.  */\n+/* { dg-options \"-O2 -mabi=ms -std=gnu99 -ffast-math -fno-builtin\" } */\n+\n+typedef int (*func)(void *, char *, char *, short, long long);\n+\n+static int\n+callback (void *ptr, char *string1, char *string2, short number,\n+\t  long long rand)\n+{\n+  if (ptr != 0\n+      || string1 != 0\n+      || string2 != 0\n+      || number != 0x1234\n+      || rand != 0x1234567890abcdefLL)\n+    return 1;\n+  else\n+    return 0;\n+}\n+\n+func\n+get_callback (void)\n+{\n+  return callback;\n+}"}, {"sha": "a44470431ffb9b2037854dc00fa3efc430105df2", "filename": "gcc/testsuite/gcc.target/x86_64/abi/callabi/vaarg-4a.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fvaarg-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fvaarg-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fvaarg-4a.c?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -0,0 +1,24 @@\n+/* Test for cross x86_64<->w64 abi va_list calls.  */\n+/* { dg-do run { target i?86-*-linux* x86_64-*-linux* } } */\n+/* { dg-options \"-O2 -mabi=ms -std=gnu99 -fno-builtin\" } */\n+/* { dg-additional-sources \"vaarg-4b.c\" } */\n+\n+extern __SIZE_TYPE__ __attribute__ ((sysv_abi)) strlen (const char *);\n+extern int __attribute__ ((sysv_abi)) sprintf (char *,const char *, ...);\n+extern void __attribute__ ((sysv_abi)) abort (void);\n+\n+extern void do_cpy (char *, ...);\n+\n+int __attribute__ ((sysv_abi))\n+main ()\n+{\n+  char s[256];\n+\n+  do_cpy (s, \"1\",\"2\",\"3\",\"4\", \"5\", \"6\", \"7\", \"\");\n+\n+  if (s[0] != '1' || s[1] !='2' || s[2] != '3' || s[3] != '4'\n+      || s[4] != '5' || s[5] != '6' || s[6] != '7' || s[7] != 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "f33906bd29356b919a672e7256166761b4309141", "filename": "gcc/testsuite/gcc.target/x86_64/abi/callabi/vaarg-4b.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fvaarg-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fvaarg-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fvaarg-4b.c?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -0,0 +1,31 @@\n+/* Test for cross x86_64<->w64 abi va_list calls.  */\n+/* { dg-options \"-O2 -mabi=ms -std=gnu99 -fno-builtin\" } */\n+\n+#include <stdarg.h>\n+\n+extern __SIZE_TYPE__ __attribute__ ((sysv_abi)) strlen (const char *);\n+extern int __attribute__ ((sysv_abi)) sprintf (char *, const char *, ...);\n+\n+static void\n+vdo_cpy (char *s, va_list argp)\n+{\n+  __SIZE_TYPE__ len;\n+  char *r = s;\n+  char *e;\n+  *r = 0;\n+  for (;;) {\n+    e = va_arg (argp, char *);\n+    if (*e == 0) break;\n+    sprintf (r,\"%s\", e);\n+    r += strlen (r);\n+  }\n+}\n+\n+void\n+do_cpy (char *s, ...)\n+{\n+  va_list argp;\n+  va_start (argp, s);\n+  vdo_cpy (s, argp);\n+  va_end (argp);\n+}"}, {"sha": "e9912957e7c9b356c1446ab39c4aadef25511c3d", "filename": "gcc/testsuite/gcc.target/x86_64/abi/callabi/vaarg-5a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fvaarg-5a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fvaarg-5a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fvaarg-5a.c?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -0,0 +1,17 @@\n+/* Test for cross x86_64<->w64 abi va_list calls.  */\n+/* { dg-do run { target i?86-*-linux* x86_64-*-linux* } } */\n+/* { dg-options \"-O2 -mabi=ms -std=gnu99 -fno-builtin\" } */\n+/* { dg-additional-sources \"vaarg-5b.c\" } */\n+\n+extern void __attribute__ ((sysv_abi)) abort (void);\n+extern int fct2 (int, ...);\n+\n+#define SZ_ARGS\t1ll,2ll,3ll,4ll,5ll,6ll,7ll,0ll\n+\n+int __attribute__ ((sysv_abi))\n+main()\n+{\n+  if (fct2 (-1, SZ_ARGS) != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "e5dd4727bdd48545e9b2521375f11a2623a28332", "filename": "gcc/testsuite/gcc.target/x86_64/abi/callabi/vaarg-5b.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fvaarg-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51212b321b1c143c36e54d68e9a29d1a1125f954/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fvaarg-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fvaarg-5b.c?ref=51212b321b1c143c36e54d68e9a29d1a1125f954", "patch": "@@ -0,0 +1,37 @@\n+/* Test for cross x86_64<->w64 abi va_list calls.  */\n+/* { dg-options \"-O2 -mabi=ms -std=gnu99 -fno-builtin\" } */\n+\n+#include <stdarg.h>\n+\n+#define SZ_ARGS\t1ll,2ll,3ll,4ll,5ll,6ll,7ll,0ll\n+\n+static int __attribute__ ((sysv_abi))\n+fct1 (va_list argp, ...)\n+{\n+  long long p1,p2;\n+  int ret = 1;\n+  __builtin_sysv_va_list argp_2;\n+\n+  __builtin_sysv_va_start (argp_2, argp);\n+  do {\n+    p1 = va_arg (argp_2, long long);\n+    p2 = va_arg (argp, long long);\n+    if (p1 != p2)\n+      ret = 0;\n+  } while (ret && p1 != 0);\n+  __builtin_sysv_va_end (argp_2);\n+\n+  return ret;\n+}\n+\n+int\n+fct2 (int dummy, ...)\n+{\n+  va_list argp;\n+  int ret = dummy;\n+\n+  va_start (argp, dummy);\n+  ret += fct1 (argp, SZ_ARGS);\n+  va_end (argp);\n+  return ret;\n+}"}]}