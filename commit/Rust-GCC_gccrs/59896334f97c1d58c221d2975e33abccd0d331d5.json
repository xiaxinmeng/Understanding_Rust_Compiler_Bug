{"sha": "59896334f97c1d58c221d2975e33abccd0d331d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4OTYzMzRmOTdjMWQ1OGMyMjFkMjk3NWUzM2FiY2NkMGQzMzFkNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-09-27T12:56:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-09-27T12:56:38Z"}, "message": "re PR tree-optimization/77745 (Inconsistent application of aliasing rules)\n\n2016-09-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/77745\n\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children):\n\tWhen removing redundant stores make sure to check compatibility\n\tof the TBAA state for downstream accesses.\n\t* tree-ssa-sccvn.c (visit_reference_op_store): Likewise for when\n\tvalue-numbering virtual operands for store matches.\n\n\t* g++.dg/torture/pr77745.C: New testcase.\n\nFrom-SVN: r240534", "tree": {"sha": "98081d1a890b16cf38fe47a5ae0e7aa4b27bb30d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98081d1a890b16cf38fe47a5ae0e7aa4b27bb30d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59896334f97c1d58c221d2975e33abccd0d331d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59896334f97c1d58c221d2975e33abccd0d331d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59896334f97c1d58c221d2975e33abccd0d331d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59896334f97c1d58c221d2975e33abccd0d331d5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e7e89e8c9acdbffa6546d5e6056c7b81238c88f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7e89e8c9acdbffa6546d5e6056c7b81238c88f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7e89e8c9acdbffa6546d5e6056c7b81238c88f"}], "stats": {"total": 94, "additions": 74, "deletions": 20}, "files": [{"sha": "15346afacb9ebde78f1d6876e1890f99d3fe425f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59896334f97c1d58c221d2975e33abccd0d331d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59896334f97c1d58c221d2975e33abccd0d331d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59896334f97c1d58c221d2975e33abccd0d331d5", "patch": "@@ -1,3 +1,12 @@\n+2016-09-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/77745\n+\t* tree-ssa-pre.c (eliminate_dom_walker::before_dom_children):\n+\tWhen removing redundant stores make sure to check compatibility\n+\tof the TBAA state for downstream accesses.\n+\t* tree-ssa-sccvn.c (visit_reference_op_store): Likewise for when\n+\tvalue-numbering virtual operands for store matches.\n+\n 2016-09-27  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/51244"}, {"sha": "8b6c7d6d5036e8bf77ac8e9d1f90f72778adc5e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59896334f97c1d58c221d2975e33abccd0d331d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59896334f97c1d58c221d2975e33abccd0d331d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59896334f97c1d58c221d2975e33abccd0d331d5", "patch": "@@ -1,3 +1,8 @@\n+2016-09-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/77745\n+\t* g++.dg/torture/pr77745.C: New testcase.\n+\n 2016-09-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77478"}, {"sha": "59d86b5c501ef38f52c20010fce6f7042ca6840a", "filename": "gcc/testsuite/g++.dg/torture/pr77745.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59896334f97c1d58c221d2975e33abccd0d331d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr77745.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59896334f97c1d58c221d2975e33abccd0d331d5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr77745.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr77745.C?ref=59896334f97c1d58c221d2975e33abccd0d331d5", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do run }\n+\n+inline void* operator new(__SIZE_TYPE__, void* __p) noexcept { return __p; }\n+\n+long foo(char *c1, char *c2)\n+{\n+  long *p1 = new (c1) long;\n+  *p1 = 100;\n+  long long *p2 = new (c2) long long;\n+  *p2 = 200;\n+  long *p3 = new (c2) long;\n+  *p3 = 200;\n+  return *p1;\n+}\n+int main()\n+{\n+  union {\n+      char c;\n+      long l;\n+      long long ll;\n+  } c;\n+  if (foo(&c.c, &c.c) != 200)\n+    __builtin_abort();\n+}"}, {"sha": "3675fb95fec5cf49c0056e0fe7e1af530efff74f", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59896334f97c1d58c221d2975e33abccd0d331d5/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59896334f97c1d58c221d2975e33abccd0d331d5/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=59896334f97c1d58c221d2975e33abccd0d331d5", "patch": "@@ -4431,26 +4431,34 @@ eliminate_dom_walker::before_dom_children (basic_block b)\n \t  && !is_gimple_reg (gimple_assign_lhs (stmt))\n \t  && (TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME\n \t      || is_gimple_min_invariant (gimple_assign_rhs1 (stmt))))\n-        {\n-          tree val;\n+\t{\n+\t  tree val;\n \t  tree rhs = gimple_assign_rhs1 (stmt);\n-          val = vn_reference_lookup (gimple_assign_lhs (stmt),\n-                                     gimple_vuse (stmt), VN_WALK, NULL, false);\n-          if (TREE_CODE (rhs) == SSA_NAME)\n-            rhs = VN_INFO (rhs)->valnum;\n-          if (val\n-              && operand_equal_p (val, rhs, 0))\n-            {\n-              if (dump_file && (dump_flags & TDF_DETAILS))\n-                {\n-                  fprintf (dump_file, \"Deleted redundant store \");\n-                  print_gimple_stmt (dump_file, stmt, 0, 0);\n-                }\n+\t  vn_reference_t vnresult;\n+\t  val = vn_reference_lookup (lhs, gimple_vuse (stmt), VN_WALKREWRITE,\n+\t\t\t\t     &vnresult, false);\n+\t  if (TREE_CODE (rhs) == SSA_NAME)\n+\t    rhs = VN_INFO (rhs)->valnum;\n+\t  if (val\n+\t      && operand_equal_p (val, rhs, 0))\n+\t    {\n+\t      /* We can only remove the later store if the former aliases\n+\t\t at least all accesses the later one does.  */\n+\t      alias_set_type set = get_alias_set (lhs);\n+\t      if (vnresult->set == set\n+\t\t  || alias_set_subset_of (set, vnresult->set))\n+\t\t{\n+\t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t    {\n+\t\t      fprintf (dump_file, \"Deleted redundant store \");\n+\t\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n+\t\t    }\n \n-              /* Queue stmt for removal.  */\n-              el_to_remove.safe_push (stmt);\n-\t      continue;\n-            }\n+\t\t  /* Queue stmt for removal.  */\n+\t\t  el_to_remove.safe_push (stmt);\n+\t\t  continue;\n+\t\t}\n+\t    }\n \t}\n \n       /* If this is a control statement value numbering left edges"}, {"sha": "94fd66a28c710a75aa2daab4582f9b274f26522a", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59896334f97c1d58c221d2975e33abccd0d331d5/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59896334f97c1d58c221d2975e33abccd0d331d5/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=59896334f97c1d58c221d2975e33abccd0d331d5", "patch": "@@ -3599,13 +3599,21 @@ visit_reference_op_store (tree lhs, tree op, gimple *stmt)\n      Otherwise, the vdefs for the store are used when inserting into\n      the table, since the store generates a new memory state.  */\n \n-  result = vn_reference_lookup (lhs, vuse, VN_NOWALK, NULL, false);\n-\n+  result = vn_reference_lookup (lhs, vuse, VN_NOWALK, &vnresult, false);\n   if (result)\n     {\n       if (TREE_CODE (result) == SSA_NAME)\n \tresult = SSA_VAL (result);\n       resultsame = expressions_equal_p (result, op);\n+      if (resultsame)\n+\t{\n+\t  /* If the TBAA state isn't compatible for downstream reads\n+\t     we cannot value-number the VDEFs the same.  */\n+\t  alias_set_type set = get_alias_set (lhs);\n+\t  if (vnresult->set != set\n+\t      && ! alias_set_subset_of (set, vnresult->set))\n+\t    resultsame = false;\n+\t}\n     }\n \n   if ((!result || !resultsame)"}]}