{"sha": "1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU3ZGU4M2I0MDUyYjZkZWYwYzNmZWI5OWQzYTVkZGZlYjZiYWY1MQ==", "commit": {"author": {"name": "Asher Langton", "email": "langton2@llnl.gov", "date": "2007-08-26T18:48:10Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-08-26T18:48:10Z"}, "message": "gfortran.h (gfc_option_t): Add flag_recursive.\n\n2007-08-26  Asher Langton  <langton2@llnl.gov>\n\t    Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.h (gfc_option_t): Add flag_recursive.\n\t* lang.opt: Add -frecursive option and update -fopenmp.\n\t* invoke.texi (-frecursive): Document new option.\n\t(-fopenmp,-fno-automatic,-fmax-stack-var-size): Update.\n\t* options.c (gfc_init_options, gfc_post_options,\n\tgfc_handle_option): Add -frecursive and modify -fopenmp.\n\t(gfc_post_options): Add warning for conflicting flags.\n\n2007-08-26  Asher Langton  <langton2@llnl.gov>\n\n\t* gfortran.dg/recursive_stack.f90: New.\n\t* gfortran.dg/openmp_stack.f90: New.\n\n\nCo-Authored-By: Tobias Burnus <burnus@net-b.de>\n\nFrom-SVN: r127813", "tree": {"sha": "1c85b96984255178e65742ce067ee7df205f45a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c85b96984255178e65742ce067ee7df205f45a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/comments", "author": null, "committer": null, "parents": [{"sha": "7b89fb3c289c42d6963933a055305088d5d454e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b89fb3c289c42d6963933a055305088d5d454e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b89fb3c289c42d6963933a055305088d5d454e7"}], "stats": {"total": 134, "additions": 125, "deletions": 9}, "files": [{"sha": "903b713054be1eef7ecb38efd6f03e67e3a9372b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51", "patch": "@@ -1,3 +1,14 @@\n+2007-08-26  Asher Langton  <langton2@llnl.gov>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_option_t): Add flag_recursive.\n+\t* lang.opt: Add -frecursive option and update -fopenmp.\n+\t* invoke.texi (-frecursive): Document new option.\n+\t(-fopenmp,-fno-automatic,-fmax-stack-var-size): Update.\n+\t* options.c (gfc_init_options, gfc_post_options,\n+\tgfc_handle_option): Add -frecursive and modify -fopenmp.\n+\t(gfc_post_options): Add warning for conflicting flags.\n+\n 2007-08-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/31298"}, {"sha": "383270e603affdb245a10aff6334cafc64497cec", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51", "patch": "@@ -1863,6 +1863,7 @@ typedef struct\n   int flag_openmp;\n   int flag_sign_zero;\n   int flag_module_private;\n+  int flag_recursive;\n \n   int fpe;\n "}, {"sha": "e58cb8cbee76f3d926b236590b9ea5b722f0bd10", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51", "patch": "@@ -156,7 +156,7 @@ and warnings}.\n -fsecond-underscore @gol\n -fbounds-check  -fmax-stack-var-size=@var{n} @gol\n -fpack-derived  -frepack-arrays  -fshort-enums  -fexternal-blas @gol\n--fblas-matmul-limit=@var{n}}\n+-fblas-matmul-limit=@var{n} -frecursive}\n @end table\n \n @menu\n@@ -296,7 +296,7 @@ and @code{c$omp}, @code{*$omp} and @code{!$omp} directives in fixed form,\n @code{!$} conditional compilation sentinels in free form\n and @code{c$}, @code{*$} and @code{!$} sentinels in fixed form, \n and when linking arranges for the OpenMP runtime library to be linked\n-in.\n+in.  The option @option{-fopenmp} implies @option{-frecursive}.\n \n @item -frange-check\n @opindex @code{frange-check}\n@@ -710,10 +710,13 @@ it.\n @opindex @code{fno-automatic}\n @cindex @code{SAVE} statement\n @cindex statement, @code{SAVE}\n-Treat each program unit as if the @code{SAVE} statement was specified for\n-every local variable and array referenced in it. Does not affect common\n-blocks. (Some Fortran compilers provide this option under the name\n-@option{-static}.)\n+Treat each program unit (except those marked as RECURSIVE) as if the\n+@code{SAVE} statement were specified for every local variable and array\n+referenced in it. Does not affect common blocks. (Some Fortran compilers\n+provide this option under the name @option{-static} or @option{-save}.)\n+The default, which is @option{-fautomatic}, uses the stack for local\n+variables smaller than the value given by @option{-fmax-stack-var-size}.\n+Use the option @option{-frecursive} to use no static memory. \n \n @item -ff2c\n @opindex ff2c\n@@ -865,7 +868,10 @@ substring references.\n @item -fmax-stack-var-size=@var{n}\n @opindex @code{fmax-stack-var-size}\n This option specifies the size in bytes of the largest array that will be put\n-on the stack.\n+on the stack; if the size is exceeded static memory is used (except in\n+procedures marked as RECURSIVE). Use the option @option{-frecursive} to\n+allow for recursive procedures which do not have a RECURSIVE attribute or\n+for parallel programs. Use @option{-fno-automatic} to never use the stack.\n \n This option currently only affects local arrays declared with constant\n bounds, and may not apply to all character variables.\n@@ -919,6 +925,12 @@ geometric mean of the dimensions of the argument and result matrices.\n \n The default value for @var{n} is 30.\n \n+@item -frecursive\n+@opindex @code{frecursive}\n+Allow indirect recursion by forcing all local arrays to be allocated\n+on the stack. This flag cannot be used together with\n+@option{-fmax-stack-var-size=} or @option{-fno-automatic}.\n+\n @end table\n \n @xref{Code Gen Options,,Options for Code Generation Conventions,"}, {"sha": "558cf657aac5bae608e4b5bef1037f0af3edbb3c", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51", "patch": "@@ -218,7 +218,7 @@ Set default accessibility of module entities to PRIVATE.\n \n fopenmp\n Fortran\n-Enable OpenMP\n+Enable OpenMP (also sets frecursive)\n \n fpack-derived\n Fortran\n@@ -240,6 +240,10 @@ frecord-marker=8\n Fortran RejectNegative\n Use an 8-byte record marker for unformatted files\n \n+frecursive\n+Fortran\n+Allocate local variables on the stack to allow indirect recursion\n+\n frepack-arrays\n Fortran\n Copy array sections into a contiguous block on procedure entry"}, {"sha": "3ab736236be29ded8cf89fb026f99550160e5576", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51", "patch": "@@ -86,7 +86,10 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   gfc_option.flag_f2c = 0;\n   gfc_option.flag_second_underscore = -1;\n   gfc_option.flag_implicit_none = 0;\n-  gfc_option.flag_max_stack_var_size = 32768;\n+\n+  /* Default value of flag_max_stack_var_size is set in gfc_post_options.  */\n+  gfc_option.flag_max_stack_var_size = -2;\n+\n   gfc_option.flag_range_check = 1;\n   gfc_option.flag_pack_derived = 0;\n   gfc_option.flag_repack_arrays = 0;\n@@ -103,6 +106,7 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   gfc_option.flag_d_lines = -1;\n   gfc_option.flag_openmp = 0;\n   gfc_option.flag_sign_zero = 1;\n+  gfc_option.flag_recursive = 0;\n \n   gfc_option.fpe = 0;\n \n@@ -290,6 +294,37 @@ gfc_post_options (const char **pfilename)\n   if (gfc_option.flag_second_underscore == -1)\n     gfc_option.flag_second_underscore = gfc_option.flag_f2c;\n \n+  if (!gfc_option.flag_automatic && gfc_option.flag_max_stack_var_size != -2\n+      && gfc_option.flag_max_stack_var_size != 0)\n+    gfc_warning_now (\"Flag -fno-automatic overwrites -fmax-stack-var-size=%d\",\n+\t\t     gfc_option.flag_max_stack_var_size);\n+  else if (!gfc_option.flag_automatic && gfc_option.flag_recursive)\n+    gfc_warning_now (\"Flag -fno-automatic overwrites -frecursive\");\n+  else if (!gfc_option.flag_automatic && gfc_option.flag_openmp)\n+    gfc_warning_now (\"Flag -fno-automatic overwrites -frecursive implied by \"\n+\t\t     \"-fopenmp\");\n+  else if (gfc_option.flag_max_stack_var_size != -2\n+\t   && gfc_option.flag_recursive)\n+    gfc_warning_now (\"Flag -frecursive overwrites -fmax-stack-var-size=%d\",\n+\t\t     gfc_option.flag_max_stack_var_size);\n+  else if (gfc_option.flag_max_stack_var_size != -2\n+\t   && gfc_option.flag_openmp)\n+    gfc_warning_now (\"Flag -fmax-stack-var-size=%d overwrites -frecursive \"\n+\t\t     \"implied by -fopenmp\", \n+\t\t     gfc_option.flag_max_stack_var_size);\n+\n+  /* Implied -frecursive; implemented as -fmax-stack-var-size=-1.  */\n+  if (gfc_option.flag_max_stack_var_size == -2 && gfc_option.flag_openmp)\n+    gfc_option.flag_max_stack_var_size = -1;\n+\n+  /* Set default.  */\n+  if (gfc_option.flag_max_stack_var_size == -2)\n+    gfc_option.flag_max_stack_var_size = 32768;\n+\n+  /* Implement -frecursive as -fmax-stack-var-size=-1.  */\n+  if (gfc_option.flag_recursive)\n+    gfc_option.flag_max_stack_var_size = -1;\n+\n   /* Implement -fno-automatic as -fmax-stack-var-size=0.  */\n   if (!gfc_option.flag_automatic)\n     gfc_option.flag_max_stack_var_size = 0;\n@@ -698,6 +733,11 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n \t\t\t MAX_SUBRECORD_LENGTH);\n \n       gfc_option.max_subrecord_length = value;\n+      break;\n+\n+    case OPT_frecursive:\n+      gfc_option.flag_recursive = 1;\n+      break;\n     }\n \n   return result;"}, {"sha": "d0be7eeb4e5bfa2b1cb24c4683cbce54c0f4c274", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51", "patch": "@@ -1,3 +1,8 @@\n+2007-08-26  Asher Langton  <langton2@llnl.gov>\n+\n+\t* gfortran.dg/recursive_stack.f90: New.\n+\t* gfortran.dg/openmp_stack.f90: New.\n+\n 2007-08-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/31298"}, {"sha": "97dd9156cf27d9c1ee73af428bea57f1244c3991", "filename": "gcc/testsuite/gfortran.dg/openmp_stack.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ftestsuite%2Fgfortran.dg%2Fopenmp_stack.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ftestsuite%2Fgfortran.dg%2Fopenmp_stack.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fopenmp_stack.f90?ref=1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run}\n+! { dg-options \"-fopenmp\" }\n+program openmp_stack\n+  implicit none\n+  integer id\n+  integer ilocs(2)\n+  integer omp_get_thread_num, foo\n+  call omp_set_num_threads (2)\n+!$omp parallel private (id)\n+  id = omp_get_thread_num() + 1\n+  ilocs(id) = foo()\n+!$omp end parallel\n+  ! Check that the two threads are not sharing a location for\n+  ! the array x in foo()\n+  if (ilocs(1) .eq. ilocs(2)) call abort\n+end program openmp_stack\n+\n+integer function foo ()\n+  implicit none\n+  real x(100,100)\n+  foo = loc(x)\n+end function foo"}, {"sha": "7dbe9fcd7405f2eba0ec5fb66d88f2e8a706b11a", "filename": "gcc/testsuite/gfortran.dg/recursive_stack.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_stack.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_stack.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frecursive_stack.f90?ref=1e7de83b4052b6def0c3feb99d3a5ddfeb6baf51", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run}\n+! { dg-options \"-frecursive\" }\n+program recursive_stack\n+  call foo (.true.)\n+end program recursive_stack\n+\n+subroutine foo (recurse)\n+  logical recurse\n+  integer iarray(100,100)\n+  if (recurse) then\n+     iarray(49,49) = 17\n+     call bar\n+     if (iarray(49,49) .ne. 17) call abort\n+  else\n+     iarray(49,49) = 21\n+  end if\n+end subroutine foo\n+\n+subroutine bar\n+  call foo (.false.)\n+end subroutine bar"}]}