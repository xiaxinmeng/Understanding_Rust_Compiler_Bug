{"sha": "4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNhNDdjZWQzM2NjMGQ2ZjllMzM2OTMwZDYyOGE2ZmRiZjIyZjZlMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-12-02T09:22:41Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-12-02T09:22:41Z"}, "message": "re PR target/81616 (Update -mtune=generic for the current Intel and AMD processors)\n\n\n\tPR target/81616\n\t* x86-tune.def: Remove obsolette FIXMEs.\n\t(X86_TUNE_PARTIAL_FLAG_REG_STALL): Disable for generic\n\t(X86_TUNE_FUSE_CMP_AND_BRANCH_32, X86_TUNE_FUSE_CMP_AND_BRANCH_64,\n\tX86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS, X86_TUNE_FUSE_ALU_AND_BRANCH):\n\tEnable for generic.\n\t(X86_TUNE_PAD_RETURNS): Disable for generic.\n\t* gcc.target/i386/pad-1.c: Compile for amdfam10.\n\t* gcc.target/i386/align-limit.c: Likewise.\n\nFrom-SVN: r255357", "tree": {"sha": "dd065f259e9a7ea01614ac9ca010639d7e5b6ac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd065f259e9a7ea01614ac9ca010639d7e5b6ac0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2/comments", "author": null, "committer": null, "parents": [{"sha": "30fa8e9c06f511fd3a750f7649a3ee59e1721eca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30fa8e9c06f511fd3a750f7649a3ee59e1721eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30fa8e9c06f511fd3a750f7649a3ee59e1721eca"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "8bbf08098f7a254eb01ea065c0ba8eb420073b1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2", "patch": "@@ -1,3 +1,13 @@\n+2017-12-01  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR target/81616\n+\t* x86-tune.def: Remove obsolette FIXMEs.\n+\t(X86_TUNE_PARTIAL_FLAG_REG_STALL): Disable for generic\n+\t(X86_TUNE_FUSE_CMP_AND_BRANCH_32, X86_TUNE_FUSE_CMP_AND_BRANCH_64,\n+\tX86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS, X86_TUNE_FUSE_ALU_AND_BRANCH):\n+\tEnable for generic.\n+\t(X86_TUNE_PAD_RETURNS): Disable for generic.\n+\n 2017-12-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/83170"}, {"sha": "25f28e3cfc169c1e643c32812d7436491596f124", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2", "patch": "@@ -75,12 +75,10 @@ DEF_TUNE (X86_TUNE_SSE_SPLIT_REGS, \"sse_split_regs\", m_ATHLON_K8)\n    setting full flags.\n \n    The flags does not affect generation of INC and DEC that is controlled\n-   by X86_TUNE_USE_INCDEC.\n+   by X86_TUNE_USE_INCDEC.  */\n \n-   This flag may be dropped from generic once core2-corei5 machines are\n-   rare enough.  */\n DEF_TUNE (X86_TUNE_PARTIAL_FLAG_REG_STALL, \"partial_flag_reg_stall\",\n-          m_CORE2 | m_GENERIC)\n+          m_CORE2)\n \n /* X86_TUNE_MOVX: Enable to zero extend integer registers to avoid\n    partial dependencies.  */\n@@ -96,28 +94,26 @@ DEF_TUNE (X86_TUNE_MEMORY_MISMATCH_STALL, \"memory_mismatch_stall\",\n \t  | m_KNL | m_KNM | m_AMD_MULTIPLE | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_32: Fuse compare with a subsequent\n-   conditional jump instruction for 32 bit TARGET.\n-   FIXME: revisit for generic.  */\n+   conditional jump instruction for 32 bit TARGET.  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_32, \"fuse_cmp_and_branch_32\",\n-\t  m_CORE_ALL | m_BDVER | m_ZNVER1)\n+\t  m_CORE_ALL | m_BDVER | m_ZNVER1 | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_64: Fuse compare with a subsequent\n-   conditional jump instruction for TARGET_64BIT.\n-   FIXME: revisit for generic.  */\n+   conditional jump instruction for TARGET_64BIT.  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_64, \"fuse_cmp_and_branch_64\",\n-\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_BDVER | m_ZNVER1)\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_BDVER | m_ZNVER1 | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS: Fuse compare with a\n    subsequent conditional jump instruction when the condition jump\n    check sign flag (SF) or overflow flag (OF).  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS, \"fuse_cmp_and_branch_soflags\",\n-\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_BDVER | m_ZNVER1)\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_HASWELL | m_BDVER | m_ZNVER1 | m_GENERIC)\n \n /* X86_TUNE_FUSE_ALU_AND_BRANCH: Fuse alu with a subsequent conditional\n    jump instruction when the alu instruction produces the CCFLAG consumed by\n    the conditional jump instruction. */\n DEF_TUNE (X86_TUNE_FUSE_ALU_AND_BRANCH, \"fuse_alu_and_branch\",\n-          m_SANDYBRIDGE | m_HASWELL)\n+          m_SANDYBRIDGE | m_HASWELL | m_GENERIC)\n \n \n /*****************************************************************************/\n@@ -130,12 +126,8 @@ DEF_TUNE (X86_TUNE_FUSE_ALU_AND_BRANCH, \"fuse_alu_and_branch\",\n    This increase code size by about 5% in 32bit mode, less so in 64bit mode\n    because parameters are passed in registers.  It is considerable\n    win for targets without stack engine that prevents multple push operations\n-   to happen in parallel.\n+   to happen in parallel.  */\n \n-   FIXME: the flags is incorrectly enabled for amdfam10, Bulldozer,\n-   Bobcat and Generic.  This is because disabling it causes large\n-   regression on mgrid due to IRA limitation leading to unecessary\n-   use of the frame pointer in 32bit mode.  */\n DEF_TUNE (X86_TUNE_ACCUMULATE_OUTGOING_ARGS, \"accumulate_outgoing_args\",\n \t  m_PPRO | m_P4_NOCONA | m_BONNELL | m_SILVERMONT | m_KNL | m_KNM | m_INTEL\n \t  | m_ATHLON_K8)\n@@ -194,7 +186,7 @@ DEF_TUNE (X86_TUNE_PAD_SHORT_FUNCTION, \"pad_short_function\", m_BONNELL)\n    architecture expect at most one jump per 2 byte window.  Failing to\n    pad returns leads to misaligned return stack.  */\n DEF_TUNE (X86_TUNE_PAD_RETURNS, \"pad_returns\",\n-          m_ATHLON_K8 | m_AMDFAM10 | m_GENERIC)\n+          m_ATHLON_K8 | m_AMDFAM10)\n \n /* X86_TUNE_FOUR_JUMP_LIMIT: Some CPU cores are not able to predict more\n    than 4 branch instructions in the 16 byte window.  */\n@@ -380,8 +372,7 @@ DEF_TUNE (X86_TUNE_INTER_UNIT_MOVES_FROM_VEC, \"inter_unit_moves_from_vec\",\n           ~m_ATHLON_K8)\n \n /* X86_TUNE_INTER_UNIT_CONVERSIONS: Enable float<->integer conversions\n-   to use both SSE and integer registers at a same time.\n-   FIXME: revisit importance of this for generic.  */\n+   to use both SSE and integer registers at a same time.  */\n DEF_TUNE (X86_TUNE_INTER_UNIT_CONVERSIONS, \"inter_unit_conversions\",\n           ~(m_AMDFAM10 | m_BDVER))\n "}, {"sha": "0a8ed9240ebdccaa4cb57d67de64d4d191fe094c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2", "patch": "@@ -1,3 +1,9 @@\n+2017-12-01  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR target/81616\n+\t* gcc.target/i386/pad-1.c: Compile for amdfam10.\n+\t* gcc.target/i386/align-limit.c: Likewise.\n+\n 2017-12-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/83170"}, {"sha": "d3d8dc5656e989084e090f216d3c3c5bf3d9a627", "filename": "gcc/testsuite/gcc.target/i386/align-limit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falign-limit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falign-limit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falign-limit.c?ref=4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -falign-functions=64 -flimit-function-alignment\" } */\n+/* { dg-options \"-O2 -falign-functions=64 -flimit-function-alignment -march=amdfam10\" } */\n /* { dg-final { scan-assembler \".p2align 6,,1\" } } */\n /* { dg-final { scan-assembler-not \".p2align 6,,63\" } } */\n "}, {"sha": "a175cc6ee4ebd19c00f52abda22dba114e3cd843", "filename": "gcc/testsuite/gcc.target/i386/pad-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpad-1.c?ref=4ca47ced33cc0d6f9e336930d628a6fdbf22f6e2", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fomit-frame-pointer -mtune=generic\" } */\n+/* { dg-options \"-O2 -fomit-frame-pointer -mtune=amdfam10\" } */\n /* { dg-final { scan-assembler \"rep\" { target { ! x86_64-*-mingw* } } } } */\n /* { dg-final { scan-assembler-not \"nop\" } } */\n "}]}