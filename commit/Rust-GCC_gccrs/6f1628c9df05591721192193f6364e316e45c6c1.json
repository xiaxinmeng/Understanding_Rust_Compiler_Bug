{"sha": "6f1628c9df05591721192193f6364e316e45c6c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYxNjI4YzlkZjA1NTkxNzIxMTkyMTkzZjYzNjRlMzE2ZTQ1YzZjMQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2019-09-18T18:11:24Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2019-09-18T18:11:24Z"}, "message": "[ARM] Cleanup multiply patterns\n\nCleanup the 32-bit multiply patterns.  Merge the pre-Armv6 with the Armv6\npatterns, remove useless alternatives and order the accumulator operands\nto prefer MLA Ra, Rb, Rc, Ra whenever feasible.\n\n    gcc/\n\t* config/arm/arm.md (arm_mulsi3): Remove pattern.\n\t(arm_mulsi3_v6): Likewise.\n\t(mulsi3addsi_v6): Likewise.\n\t(mulsi3subsi): Likewise.\n\t(mul): Add new multiply pattern.\n\t(mla): Likewise.\n\t(mls): Likewise.\n\nFrom-SVN: r275897", "tree": {"sha": "cb8d27de02c995c5d293149ab10e8875592b5072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb8d27de02c995c5d293149ab10e8875592b5072"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f1628c9df05591721192193f6364e316e45c6c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1628c9df05591721192193f6364e316e45c6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f1628c9df05591721192193f6364e316e45c6c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f1628c9df05591721192193f6364e316e45c6c1/comments", "author": null, "committer": null, "parents": [{"sha": "31de92e39bbeffb9f1641d292e94b48f70809ae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31de92e39bbeffb9f1641d292e94b48f70809ae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31de92e39bbeffb9f1641d292e94b48f70809ae1"}], "stats": {"total": 100, "additions": 45, "deletions": 55}, "files": [{"sha": "2b55a3f4dc7cad0f6007cc9388236fd97501b07e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1628c9df05591721192193f6364e316e45c6c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1628c9df05591721192193f6364e316e45c6c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f1628c9df05591721192193f6364e316e45c6c1", "patch": "@@ -1,3 +1,13 @@\n+2019-09-18  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/arm/arm.md (arm_mulsi3): Remove pattern.\n+\t(arm_mulsi3_v6): Likewise.\n+\t(mulsi3addsi_v6): Likewise.\n+\t(mulsi3subsi): Likewise.\n+\t(mul): Add new multiply pattern.\n+\t(mla): Likewise.\n+\t(mls): Likewise.\n+\n 2019-09-18  Richard Biener  <rguenther@suse.de>\n \n \t* tree-parloops.c (report_ploop_op): Copy from report_vect_op."}, {"sha": "4ffc7718c7abe4c6eb4bee0ab17ac476ce4e10bc", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 35, "deletions": 55, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f1628c9df05591721192193f6364e316e45c6c1/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f1628c9df05591721192193f6364e316e45c6c1/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=6f1628c9df05591721192193f6364e316e45c6c1", "patch": "@@ -1595,28 +1595,46 @@\n   \"\"\n )\n \n-;; Use `&' and then `0' to prevent the operands 0 and 1 being the same\n-(define_insn \"*arm_mulsi3\"\n-  [(set (match_operand:SI          0 \"s_register_operand\" \"=&r,&r\")\n-\t(mult:SI (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n-\t\t (match_operand:SI 1 \"s_register_operand\" \"%0,r\")))]\n-  \"TARGET_32BIT && !arm_arch6\"\n+;; Use `&' and then `0' to prevent operands 0 and 2 being the same\n+(define_insn \"*mul\"\n+  [(set (match_operand:SI          0 \"s_register_operand\" \"=l,r,&r,&r\")\n+\t(mult:SI (match_operand:SI 2 \"s_register_operand\" \"l,r,r,r\")\n+\t\t (match_operand:SI 1 \"s_register_operand\" \"%0,r,0,r\")))]\n+  \"TARGET_32BIT\"\n   \"mul%?\\\\t%0, %2, %1\"\n   [(set_attr \"type\" \"mul\")\n-   (set_attr \"predicable\" \"yes\")]\n+   (set_attr \"predicable\" \"yes\")\n+   (set_attr \"arch\" \"t2,v6,nov6,nov6\")\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"predicable_short_it\" \"yes,no,*,*\")]\n )\n \n-(define_insn \"*arm_mulsi3_v6\"\n-  [(set (match_operand:SI          0 \"s_register_operand\" \"=l,l,r\")\n-\t(mult:SI (match_operand:SI 1 \"s_register_operand\" \"0,l,r\")\n-\t\t (match_operand:SI 2 \"s_register_operand\" \"l,0,r\")))]\n-  \"TARGET_32BIT && arm_arch6\"\n-  \"mul%?\\\\t%0, %1, %2\"\n-  [(set_attr \"type\" \"mul\")\n+;; MLA and MLS instruction. Use operand 1 for the accumulator to prefer\n+;; reusing the same register.\n+\n+(define_insn \"*mla\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,&r,&r,&r\")\n+\t(plus:SI\n+\t  (mult:SI (match_operand:SI 3 \"s_register_operand\" \"r,r,r,r\")\n+\t\t   (match_operand:SI 2 \"s_register_operand\" \"%r,r,0,r\"))\n+\t  (match_operand:SI 1 \"s_register_operand\" \"r,0,r,r\")))]\n+  \"TARGET_32BIT\"\n+  \"mla%?\\\\t%0, %3, %2, %1\"\n+  [(set_attr \"type\" \"mla\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"arch\" \"t2,t2,*\")\n-   (set_attr \"length\" \"4\")\n-   (set_attr \"predicable_short_it\" \"yes,yes,no\")]\n+   (set_attr \"arch\" \"v6,nov6,nov6,nov6\")]\n+)\n+\n+(define_insn \"*mls\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(minus:SI\n+\t  (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t  (mult:SI (match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t   (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n+  \"TARGET_32BIT && arm_arch_thumb2\"\n+  \"mls%?\\\\t%0, %3, %2, %1\"\n+  [(set_attr \"type\" \"mla\")\n+   (set_attr \"predicable\" \"yes\")]\n )\n \n (define_insn \"*mulsi3_compare0\"\n@@ -1673,32 +1691,6 @@\n    (set_attr \"type\" \"muls\")]\n )\n \n-;; Unnamed templates to match MLA instruction.\n-\n-(define_insn \"*mulsi3addsi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=&r,&r,&r,&r\")\n-\t(plus:SI\n-\t  (mult:SI (match_operand:SI 2 \"s_register_operand\" \"r,r,r,r\")\n-\t\t   (match_operand:SI 1 \"s_register_operand\" \"%0,r,0,r\"))\n-\t  (match_operand:SI 3 \"s_register_operand\" \"r,r,0,0\")))]\n-  \"TARGET_32BIT && !arm_arch6\"\n-  \"mla%?\\\\t%0, %2, %1, %3\"\n-  [(set_attr \"type\" \"mla\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n-(define_insn \"*mulsi3addsi_v6\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI\n-\t  (mult:SI (match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t   (match_operand:SI 1 \"s_register_operand\" \"r\"))\n-\t  (match_operand:SI 3 \"s_register_operand\" \"r\")))]\n-  \"TARGET_32BIT && arm_arch6\"\n-  \"mla%?\\\\t%0, %2, %1, %3\"\n-  [(set_attr \"type\" \"mla\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n (define_insn \"*mulsi3addsi_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n@@ -1763,18 +1755,6 @@\n    (set_attr \"type\" \"mlas\")]\n )\n \n-(define_insn \"*mulsi3subsi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(minus:SI\n-\t  (match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t  (mult:SI (match_operand:SI 2 \"s_register_operand\" \"r\")\n-\t\t   (match_operand:SI 1 \"s_register_operand\" \"r\"))))]\n-  \"TARGET_32BIT && arm_arch_thumb2\"\n-  \"mls%?\\\\t%0, %2, %1, %3\"\n-  [(set_attr \"type\" \"mla\")\n-   (set_attr \"predicable\" \"yes\")]\n-)\n-\n (define_expand \"maddsidi4\"\n   [(set (match_operand:DI 0 \"s_register_operand\")\n \t(plus:DI"}]}