{"sha": "ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E2OTMyYWQwY2NiYmJlM2M3ODhjZDcxNTk1ZDlhMjViOGFlMGQyMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-12-09T20:28:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-12-09T20:28:39Z"}, "message": "typeck.c (check_for_casting_away_constness): Add location_t parameter and use it.\n\ngcc/cp\n2019-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* typeck.c (check_for_casting_away_constness): Add location_t\n\tparameter and use it.\n\t(maybe_warn_about_useless_cast): Likewise.\n\t(maybe_warn_about_cast_ignoring_quals): Likewise.\n\t(build_static_cast_1): Likewise.\n\t(build_static_cast): Likewise; sets the location of the returned tree.\n\t(build_reinterpret_cast_1): Likewise.\n\t(build_reinterpret_cast): Likewise; sets the location of the returned\n\ttree.\n\t(build_const_cast_1): Likewise.\n\t(build_const_cast): Likewise; sets the location of the returned tree.\n\t(cp_build_c_cast): Likewise.\n\t(build_c_cast): Adjust.\n\t(build_ptrmemfunc): Adjust calls.\n\t(cp_build_unary_op): Pass the location to invert_truthvalue_loc.\n\t* rtti.c (build_dynamic_cast_1): Add location_t parameter and\n\tuse it.\n\t(build_dynamic_cast): Likewise.\n\t* cp-tree.h: Adjust declarations.\n\t* parser.c (cp_parser_postfix_expression): Pass cp_cast_loc to\n\tthe various build_*_cast functions.\n\t(get_cast_suggestion): Adjust calls.\n\t(cp_parser_builtin_offsetof): Likewise.\n\t* decl.c (reshape_init): Adjust call.\n\t* method.c (forward_parm): Likewise.\n\t(build_comparison_op): Likewise.\n\t* pt.c (tsubst_copy_and_build): Likewise.\n\t* semantics.c (finish_omp_reduction_clause): Likewise.\n\t(cp_omp_finish_iterators): Likewise.\n\t* tree.c (cp_stabilize_reference): Likewise.\n\t(move): Likewise.\n\t* typeck2.c (build_functional_cast): Likewise.\n\n\t* typeck2.c (build_functional_cast_1): New.\n\t(build_functional_cast_1): Calls the latter and sets the location\n\tof the returned tree.\n\n/libcc1\n2019-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* libcp1plugin.cc (plugin_build_cast_expr): Adjust build_cast\n\tdeclaration.\n\ngcc/testsuite\n2019-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* c-c++-common/Wcast-align.c: Check location(s) too.\n\t* c-c++-common/Wcast-function-type.c: Likewise.\n\t* c-c++-common/Wint-to-pointer-cast-1.c: Likewise.\n\t* c-c++-common/Wint-to-pointer-cast-2.c: Likewise.\n\t* c-c++-common/Wint-to-pointer-cast-3.c: Likewise.\n\t* g++.dg/Wcast-function-type.C: Likewise.\n\t* g++.dg/addr_builtin-1.C: Likewise.\n\t* g++.dg/conversion/const2.C: Likewise.\n\t* g++.dg/conversion/dynamic1.C: Likewise.\n\t* g++.dg/conversion/ptrmem2.C: Likewise.\n\t* g++.dg/conversion/ptrmem3.C: Likewise.\n\t* g++.dg/conversion/qual3.C: Likewise.\n\t* g++.dg/conversion/reinterpret3.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-cast.C: Likewise.\n\t* g++.dg/cpp0x/lambda/lambda-conv11.C: Likewise.\n\t* g++.dg/cpp0x/nullptr04.C: Likewise.\n\t* g++.dg/cpp0x/reinterpret_cast2.C: Likewise.\n\t* g++.dg/cpp0x/rv-cast2.C: Likewise.\n\t* g++.dg/cpp1y/lambda-conv1.C: Likewise.\n\t* g++.dg/cpp1z/noexcept-type7.C: Likewise.\n\t* g++.dg/cpp2a/array-conv9.C: Likewise.\n\t* g++.dg/expr/cast11.C: Likewise.\n\t* g++.dg/expr/static_cast8.C: Likewise.\n\t* g++.dg/ext/vector6.C: Likewise.\n\t* g++.dg/other/conversion1.C: Likewise.\n\t* g++.dg/parse/pr26997.C: Likewise.\n\t* g++.dg/rtti/no-rtti.C: Likewise.\n\t* g++.dg/tc1/dr137.C: Likewise.\n\t* g++.dg/template/cast4.C: Likewise.\n\t* g++.dg/warn/Wcast-qual1.C: Likewise.\n\t* g++.dg/warn/Wcast-qual2.C: Likewise.\n\t* g++.dg/warn/Wconditionally-supported-1.C: Likewise.\n\t* g++.dg/warn/Wuseless-cast.C: Likewise.\n\t* g++.dg/warn/pr35711.C: Likewise.\n\t* g++.old-deja/g++.bugs/900227_01.C: Likewise.\n\t* g++.old-deja/g++.bugs/900404_07.C: Likewise.\n\t* g++.old-deja/g++.jason/overload1.C: Likewise.\n\t* g++.old-deja/g++.jason/rfg26.C: Likewise.\n\t* g++.old-deja/g++.jason/rvalue3.C: Likewise.\n\t* g++.old-deja/g++.jason/warning2.C: Likewise.\n\t* g++.old-deja/g++.mike/dyncast4.C: Likewise.\n\t* g++.old-deja/g++.mike/dyncast6.C: Likewise.\n\t* g++.old-deja/g++.mike/p11482.C: Likewise.\n\t* g++.old-deja/g++.mike/p2573.C: Likewise.\n\t* g++.old-deja/g++.mike/p2855.C: Likewise.\n\t* g++.old-deja/g++.mike/p7476.C: Likewise.\n\t* g++.old-deja/g++.mike/p8039.C: Likewise.\n\t* g++.old-deja/g++.other/cast2.C: Likewise.\n\t* g++.old-deja/g++.other/cast3.C: Likewise.\n\t* g++.old-deja/g++.other/dcast1.C: Likewise.\n\t* g++.old-deja/g++.other/dcast2.C: Likewise.\n\nFrom-SVN: r279138", "tree": {"sha": "ab35bcb3daba1f0f37edbaa49c7d876b4d1cfa69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab35bcb3daba1f0f37edbaa49c7d876b4d1cfa69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/comments", "author": null, "committer": null, "parents": [{"sha": "ee9256409f21eab5df5076e46d220d6a0b995f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee9256409f21eab5df5076e46d220d6a0b995f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee9256409f21eab5df5076e46d220d6a0b995f79"}], "stats": {"total": 804, "additions": 484, "deletions": 320}, "files": [{"sha": "b39a304b17d692b471cc36b6cc7571ff5a12da0c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -1,3 +1,42 @@\n+2019-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* typeck.c (check_for_casting_away_constness): Add location_t\n+\tparameter and use it.\n+\t(maybe_warn_about_useless_cast): Likewise.\n+\t(maybe_warn_about_cast_ignoring_quals): Likewise.\n+\t(build_static_cast_1): Likewise.\n+\t(build_static_cast): Likewise; sets the location of the returned tree.\n+\t(build_reinterpret_cast_1): Likewise.\n+\t(build_reinterpret_cast): Likewise; sets the location of the returned\n+\ttree.\n+\t(build_const_cast_1): Likewise.\n+\t(build_const_cast): Likewise; sets the location of the returned tree.\n+\t(cp_build_c_cast): Likewise.\n+\t(build_c_cast): Adjust.\n+\t(build_ptrmemfunc): Adjust calls.\n+\t(cp_build_unary_op): Pass the location to invert_truthvalue_loc.\n+\t* rtti.c (build_dynamic_cast_1): Add location_t parameter and\n+\tuse it.\n+\t(build_dynamic_cast): Likewise.\n+\t* cp-tree.h: Adjust declarations.\n+\t* parser.c (cp_parser_postfix_expression): Pass cp_cast_loc to\n+\tthe various build_*_cast functions.\n+\t(get_cast_suggestion): Adjust calls.\n+\t(cp_parser_builtin_offsetof): Likewise.\n+\t* decl.c (reshape_init): Adjust call.\n+\t* method.c (forward_parm): Likewise.\n+\t(build_comparison_op): Likewise.\n+\t* pt.c (tsubst_copy_and_build): Likewise.\n+\t* semantics.c (finish_omp_reduction_clause): Likewise.\n+\t(cp_omp_finish_iterators): Likewise.\n+\t* tree.c (cp_stabilize_reference): Likewise.\n+\t(move): Likewise.\n+\t* typeck2.c (build_functional_cast): Likewise.\n+\n+\t* typeck2.c (build_functional_cast_1): New.\n+\t(build_functional_cast_1): Calls the latter and sets the location\n+\tof the returned tree.\n+\n 2019-12-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cvt.c (maybe_warn_nodiscard): Add workaround for GCC 3.4-4.4 - cast"}, {"sha": "b47698e1d0ce83a07df3a29bf1c1cffa3de29b5a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -7000,7 +7000,8 @@ extern tree build_typeid\t\t\t(tree, tsubst_flags_t);\n extern tree get_tinfo_decl\t\t\t(tree);\n extern tree get_typeid\t\t\t\t(tree, tsubst_flags_t);\n extern tree build_headof\t\t\t(tree);\n-extern tree build_dynamic_cast\t\t\t(tree, tree, tsubst_flags_t);\n+extern tree build_dynamic_cast\t\t\t(location_t, tree, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern void emit_support_tinfos\t\t\t(void);\n extern bool emit_tinfo_decl\t\t\t(tree);\n \n@@ -7549,13 +7550,17 @@ extern tree build_x_compound_expr\t\t(location_t, tree, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n extern tree build_compound_expr                 (location_t, tree, tree);\n extern tree cp_build_compound_expr\t\t(tree, tree, tsubst_flags_t);\n-extern tree build_static_cast\t\t\t(tree, tree, tsubst_flags_t);\n-extern tree build_reinterpret_cast\t\t(tree, tree, tsubst_flags_t);\n-extern tree build_const_cast\t\t\t(tree, tree, tsubst_flags_t);\n+extern tree build_static_cast\t\t\t(location_t, tree, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n+extern tree build_reinterpret_cast\t\t(location_t, tree, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n+extern tree build_const_cast\t\t\t(location_t, tree, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree build_c_cast\t\t\t(location_t, tree, tree);\n extern cp_expr build_c_cast\t\t\t(location_t loc, tree type,\n \t\t\t\t\t\t cp_expr expr);\n-extern tree cp_build_c_cast\t\t\t(tree, tree, tsubst_flags_t);\n+extern tree cp_build_c_cast\t\t\t(location_t, tree, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern cp_expr build_x_modify_expr\t\t(location_t, tree,\n \t\t\t\t\t\t enum tree_code, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n@@ -7615,7 +7620,8 @@ extern int lvalue_or_else\t\t\t(tree, enum lvalue_use,\n extern void check_template_keyword\t\t(tree);\n extern bool check_raw_literal_operator\t\t(const_tree decl);\n extern bool check_literal_operator_args\t\t(const_tree, bool *, bool *);\n-extern void maybe_warn_about_useless_cast       (tree, tree, tsubst_flags_t);\n+extern void maybe_warn_about_useless_cast       (location_t, tree, tree,\n+\t\t\t\t\t\t tsubst_flags_t);\n extern tree cp_perform_integral_promotions      (tree, tsubst_flags_t);\n \n extern tree finish_left_unary_fold_expr      (tree, int);"}, {"sha": "6dec5838303faab3052b02a4ad843e97b501beb5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -6490,7 +6490,8 @@ reshape_init (tree type, tree init, tsubst_flags_t complain)\n \t{\n \t  warning_sentinel w (warn_useless_cast);\n \t  warning_sentinel w2 (warn_ignored_qualifiers);\n-\t  return cp_build_c_cast (type, elt, tf_warning_or_error);\n+\t  return cp_build_c_cast (input_location, type, elt,\n+\t\t\t\t  tf_warning_or_error);\n \t}\n       else\n \treturn error_mark_node;"}, {"sha": "83da20a0779ce167865a655184058ba77b554123", "filename": "gcc/cp/method.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -474,7 +474,8 @@ forward_parm (tree parm)\n   if (!TYPE_REF_P (type))\n     type = cp_build_reference_type (type, /*rval=*/true);\n   warning_sentinel w (warn_useless_cast);\n-  exp = build_static_cast (type, exp, tf_warning_or_error);\n+  exp = build_static_cast (input_location, type, exp,\n+\t\t\t   tf_warning_or_error);\n   if (DECL_PACK_P (parm))\n     exp = make_pack_expansion (exp);\n   return exp;\n@@ -1361,7 +1362,8 @@ build_comparison_op (tree fndecl, tsubst_flags_t complain)\n \t      if (TREE_CODE (comp) == SPACESHIP_EXPR)\n \t\tTREE_TYPE (comp) = rettype;\n \t      else\n-\t\tcomp = build_static_cast (rettype, comp, complain);\n+\t\tcomp = build_static_cast (input_location, rettype, comp,\n+\t\t\t\t\t  complain);\n \t      info.check (comp);\n \t      if (info.defining)\n \t\t{\n@@ -1395,7 +1397,8 @@ build_comparison_op (tree fndecl, tsubst_flags_t complain)\n \t    {\n \t      tree seql = lookup_comparison_result (cc_strong_ordering,\n \t\t\t\t\t\t    \"equal\", complain);\n-\t      val = build_static_cast (rettype, seql, complain);\n+\t      val = build_static_cast (input_location, rettype, seql,\n+\t\t\t\t       complain);\n \t    }\n \t  finish_return_stmt (val);\n \t}"}, {"sha": "bf6d291ba9d9354134df8d84cb89c433413d705d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -6896,36 +6896,38 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t    break;\n \t  }\n \n+\t/* Construct a location e.g. :\n+\t     reinterpret_cast <int *> (expr)\n+\t     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\t   ranging from the start of the \"*_cast\" token to the final closing\n+\t   paren, with the caret at the start.  */\n+\tlocation_t cp_cast_loc = make_location (start_loc, start_loc, end_loc);\n+\n \tswitch (keyword)\n \t  {\n \t  case RID_DYNCAST:\n \t    postfix_expression\n-\t      = build_dynamic_cast (type, expression, tf_warning_or_error);\n+\t      = build_dynamic_cast (cp_cast_loc, type, expression,\n+\t\t\t\t    tf_warning_or_error);\n \t    break;\n \t  case RID_STATCAST:\n \t    postfix_expression\n-\t      = build_static_cast (type, expression, tf_warning_or_error);\n+\t      = build_static_cast (cp_cast_loc, type, expression,\n+\t\t\t\t   tf_warning_or_error);\n \t    break;\n \t  case RID_REINTCAST:\n \t    postfix_expression\n-\t      = build_reinterpret_cast (type, expression,\n+\t      = build_reinterpret_cast (cp_cast_loc, type, expression,\n                                         tf_warning_or_error);\n \t    break;\n \t  case RID_CONSTCAST:\n \t    postfix_expression\n-\t      = build_const_cast (type, expression, tf_warning_or_error);\n+\t      = build_const_cast (cp_cast_loc, type, expression,\n+\t\t\t\t  tf_warning_or_error);\n \t    break;\n \t  default:\n \t    gcc_unreachable ();\n \t  }\n-\n-\t/* Construct a location e.g. :\n-\t     reinterpret_cast <int *> (expr)\n-\t     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n-\t   ranging from the start of the \"*_cast\" token to the final closing\n-\t   paren, with the caret at the start.  */\n-\tlocation_t cp_cast_loc = make_location (start_loc, start_loc, end_loc);\n-\tpostfix_expression.set_location (cp_cast_loc);\n       }\n       break;\n \n@@ -9151,17 +9153,18 @@ get_cast_suggestion (tree dst_type, tree orig_expr)\n     return NULL;\n \n   /* First try const_cast.  */\n-  trial = build_const_cast (dst_type, orig_expr, tf_none);\n+  trial = build_const_cast (input_location, dst_type, orig_expr, tf_none);\n   if (trial != error_mark_node)\n     return \"const_cast\";\n \n   /* If that fails, try static_cast.  */\n-  trial = build_static_cast (dst_type, orig_expr, tf_none);\n+  trial = build_static_cast (input_location, dst_type, orig_expr, tf_none);\n   if (trial != error_mark_node)\n     return \"static_cast\";\n \n   /* Finally, try reinterpret_cast.  */\n-  trial = build_reinterpret_cast (dst_type, orig_expr, tf_none);\n+  trial = build_reinterpret_cast (input_location, dst_type, orig_expr,\n+\t\t\t\t  tf_none);\n   if (trial != error_mark_node)\n     return \"reinterpret_cast\";\n \n@@ -10149,8 +10152,8 @@ cp_parser_builtin_offsetof (cp_parser *parser)\n \n   /* Build the (type *)null that begins the traditional offsetof macro.  */\n   tree object_ptr\n-    = build_static_cast (build_pointer_type (type), null_pointer_node,\n-\t\t\t tf_warning_or_error);\n+    = build_static_cast (input_location, build_pointer_type (type),\n+\t\t\t null_pointer_node, tf_warning_or_error);\n \n   /* Parse the offsetof-member-designator.  We begin as if we saw \"expr->\".  */\n   expr = cp_parser_postfix_dot_deref_expression (parser, CPP_DEREF, object_ptr,\n@@ -29278,7 +29281,6 @@ cp_parser_functional_cast (cp_parser* parser, tree type)\n \t\t\t\t\t   parser->lexer);\n   cast = build_functional_cast (combined_loc, type, expression_list,\n                                 tf_warning_or_error);\n-  cast.set_location (combined_loc);\n   \n   /* [expr.const]/1: In an integral constant expression \"only type\n      conversions to integral or enumeration type can be used\".  */"}, {"sha": "d8ab26ec675f172e66cda5cad618bd789c207254", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -19024,16 +19024,16 @@ tsubst_copy_and_build (tree t,\n \t    r = build_functional_cast (input_location, type, op, complain);\n \t    break;\n \t  case REINTERPRET_CAST_EXPR:\n-\t    r = build_reinterpret_cast (type, op, complain);\n+\t    r = build_reinterpret_cast (input_location, type, op, complain);\n \t    break;\n \t  case CONST_CAST_EXPR:\n-\t    r = build_const_cast (type, op, complain);\n+\t    r = build_const_cast (input_location, type, op, complain);\n \t    break;\n \t  case DYNAMIC_CAST_EXPR:\n-\t    r = build_dynamic_cast (type, op, complain);\n+\t    r = build_dynamic_cast (input_location, type, op, complain);\n \t    break;\n \t  case STATIC_CAST_EXPR:\n-\t    r = build_static_cast (type, op, complain);\n+\t    r = build_static_cast (input_location, type, op, complain);\n \t    break;\n \t  default:\n \t    gcc_unreachable ();"}, {"sha": "1b6b87ba8d6673aea8dab06c5d499e3ec0947966", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -123,7 +123,7 @@ static GTY (()) vec<tinfo_s, va_gc> *tinfo_descs;\n \n static tree ifnonnull (tree, tree, tsubst_flags_t);\n static tree tinfo_name (tree, bool);\n-static tree build_dynamic_cast_1 (tree, tree, tsubst_flags_t);\n+static tree build_dynamic_cast_1 (location_t, tree, tree, tsubst_flags_t);\n static tree throw_bad_cast (void);\n static tree throw_bad_typeid (void);\n static tree get_tinfo_ptr (tree);\n@@ -548,7 +548,8 @@ ifnonnull (tree test, tree result, tsubst_flags_t complain)\n    paper.  */\n \n static tree\n-build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n+build_dynamic_cast_1 (location_t loc, tree type, tree expr,\n+\t\t      tsubst_flags_t complain)\n {\n   enum tree_code tc = TREE_CODE (type);\n   tree exprtype;\n@@ -646,7 +647,7 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n     tree binfo = lookup_base (TREE_TYPE (exprtype), TREE_TYPE (type),\n \t\t\t      ba_check, NULL, complain);\n     if (binfo)\n-      return build_static_cast (type, expr, complain);\n+      return build_static_cast (loc, type, expr, complain);\n   }\n \n   /* Apply trivial conversion T -> T& for dereferenced ptrs.  */\n@@ -691,8 +692,9 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n \t\t{\n \t\t  tree expr = throw_bad_cast ();\n                   if (complain & tf_warning)\n-\t            warning (0, \"%<dynamic_cast<%#T>(%#D)%> can never succeed\",\n-\t                     type, old_expr);\n+\t            warning_at (loc, 0,\n+\t\t\t\t\"%<dynamic_cast<%#T>(%#D)%> can never succeed\",\n+\t\t\t\ttype, old_expr);\n \t\t  /* Bash it to the expected type.  */\n \t\t  TREE_TYPE (expr) = type;\n \t\t  return expr;\n@@ -706,8 +708,9 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n \t\t  && TREE_CODE (TREE_TYPE (op)) == RECORD_TYPE)\n \t\t{\n                   if (complain & tf_warning)\n-\t            warning (0, \"%<dynamic_cast<%#T>(%#D)%> can never succeed\",\n-\t                     type, op);\n+\t            warning_at (loc, 0,\n+\t\t\t\t\"%<dynamic_cast<%#T>(%#D)%> can never succeed\",\n+\t\t\t\ttype, op);\n \t\t  retval = build_int_cst (type, 0);\n \t\t  return retval;\n \t\t}\n@@ -717,7 +720,8 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n \t  if (!flag_rtti)\n \t    {\n               if (complain & tf_error)\n-\t\terror (\"%<dynamic_cast%> not permitted with %<-fno-rtti%>\");\n+\t\terror_at (loc,\n+\t\t\t  \"%<dynamic_cast%> not permitted with %<-fno-rtti%>\");\n \t      return error_mark_node;\n \t    }\n \n@@ -796,13 +800,15 @@ build_dynamic_cast_1 (tree type, tree expr, tsubst_flags_t complain)\n \n  fail:\n   if (complain & tf_error)\n-    error (\"cannot %<dynamic_cast%> %qE (of type %q#T) to type %q#T (%s)\",\n-           old_expr, TREE_TYPE (old_expr), type, errstr);\n+    error_at (loc, \"cannot %<dynamic_cast%> %qE (of type %q#T) \"\n+\t      \"to type %q#T (%s)\",\n+\t      old_expr, TREE_TYPE (old_expr), type, errstr);\n   return error_mark_node;\n }\n \n tree\n-build_dynamic_cast (tree type, tree expr, tsubst_flags_t complain)\n+build_dynamic_cast (location_t loc, tree type, tree expr,\n+\t\t    tsubst_flags_t complain)\n {\n   tree r;\n \n@@ -813,12 +819,16 @@ build_dynamic_cast (tree type, tree expr, tsubst_flags_t complain)\n     {\n       expr = build_min (DYNAMIC_CAST_EXPR, type, expr);\n       TREE_SIDE_EFFECTS (expr) = 1;\n-      return convert_from_reference (expr);\n+      r = convert_from_reference (expr);\n+      protected_set_expr_location (r, loc);\n+      return r;\n     }\n \n-  r = convert_from_reference (build_dynamic_cast_1 (type, expr, complain));\n+  r = convert_from_reference (build_dynamic_cast_1 (loc, type, expr,\n+\t\t\t\t\t\t    complain));\n   if (r != error_mark_node)\n-    maybe_warn_about_useless_cast (type, expr, complain);\n+    maybe_warn_about_useless_cast (loc, type, expr, complain);\n+  protected_set_expr_location (r, loc);\n   return r;\n }\n "}, {"sha": "42611682549fa97ee126fe8d977385619bbe54b0", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -5918,9 +5918,11 @@ finish_omp_reduction_clause (tree c, bool *need_default_ctor, bool *need_dtor)\n \t      if (need_static_cast)\n \t\t{\n \t\t  tree rtype = build_reference_type (atype);\n-\t\t  omp_out = build_static_cast (rtype, omp_out,\n+\t\t  omp_out = build_static_cast (input_location,\n+\t\t\t\t\t       rtype, omp_out,\n \t\t\t\t\t       tf_warning_or_error);\n-\t\t  omp_in = build_static_cast (rtype, omp_in,\n+\t\t  omp_in = build_static_cast (input_location,\n+\t\t\t\t\t      rtype, omp_in,\n \t\t\t\t\t      tf_warning_or_error);\n \t\t  if (omp_out == error_mark_node || omp_in == error_mark_node)\n \t\t    return true;\n@@ -5955,9 +5957,11 @@ finish_omp_reduction_clause (tree c, bool *need_default_ctor, bool *need_dtor)\n \t\t      return true;\n \t\t    }\n \t\t  tree rtype = build_reference_type (atype);\n-\t\t  omp_priv = build_static_cast (rtype, omp_priv,\n+\t\t  omp_priv = build_static_cast (input_location,\n+\t\t\t\t\t\trtype, omp_priv,\n \t\t\t\t\t\ttf_warning_or_error);\n-\t\t  omp_orig = build_static_cast (rtype, omp_orig,\n+\t\t  omp_orig = build_static_cast (input_location,\n+\t\t\t\t\t\trtype, omp_orig,\n \t\t\t\t\t\ttf_warning_or_error);\n \t\t  if (omp_priv == error_mark_node\n \t\t      || omp_orig == error_mark_node)\n@@ -6138,13 +6142,16 @@ cp_omp_finish_iterators (tree iter)\n       begin = mark_rvalue_use (begin);\n       end = mark_rvalue_use (end);\n       step = mark_rvalue_use (step);\n-      begin = cp_build_c_cast (type, begin, tf_warning_or_error);\n-      end = cp_build_c_cast (type, end, tf_warning_or_error);\n+      begin = cp_build_c_cast (input_location, type, begin,\n+\t\t\t       tf_warning_or_error);\n+      end = cp_build_c_cast (input_location, type, end,\n+\t\t\t     tf_warning_or_error);\n       orig_step = step;\n       if (!processing_template_decl)\n \tstep = orig_step = save_expr (step);\n       tree stype = POINTER_TYPE_P (type) ? sizetype : type;\n-      step = cp_build_c_cast (stype, step, tf_warning_or_error);\n+      step = cp_build_c_cast (input_location, stype, step,\n+\t\t\t      tf_warning_or_error);\n       if (POINTER_TYPE_P (type) && !processing_template_decl)\n \t{\n \t  begin = save_expr (begin);"}, {"sha": "c7c063f6df7f782a053903ac4915bcee547d409d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -425,7 +425,8 @@ cp_stabilize_reference (tree ref)\n \t  /* This inhibits warnings in, eg, cxx_mark_addressable\n \t     (c++/60955).  */\n \t  warning_sentinel s (extra_warnings);\n-\t  ref = build_static_cast (type, ref, tf_error);\n+\t  ref = build_static_cast (input_location, type, ref,\n+\t\t\t\t   tf_error);\n \t}\n     }\n \n@@ -1222,7 +1223,8 @@ move (tree expr)\n   tree type = TREE_TYPE (expr);\n   gcc_assert (!TYPE_REF_P (type));\n   type = cp_build_reference_type (type, /*rval*/true);\n-  return build_static_cast (type, expr, tf_warning_or_error);\n+  return build_static_cast (input_location, type, expr,\n+\t\t\t    tf_warning_or_error);\n }\n \n /* Used by the C++ front end to build qualified array types.  However,"}, {"sha": "d0f739895c941476b5e1f8fddd52c5d2624a608a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 130, "deletions": 108, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -6460,7 +6460,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \t\t\t\t   build_zero_cst (TREE_TYPE (arg)), complain);\n       arg = perform_implicit_conversion (boolean_type_node, arg,\n \t\t\t\t\t complain);\n-      val = invert_truthvalue_loc (input_location, arg);\n+      val = invert_truthvalue_loc (location, arg);\n       if (arg != error_mark_node)\n \treturn val;\n       errstring = _(\"in argument to unary !\");\n@@ -7093,8 +7093,9 @@ cp_build_compound_expr (tree lhs, tree rhs, tsubst_flags_t complain)\n */\n \n static bool\n-check_for_casting_away_constness (tree src_type, tree dest_type,\n-\t\t\t\t  enum tree_code cast, tsubst_flags_t complain)\n+check_for_casting_away_constness (location_t loc, tree src_type,\n+\t\t\t\t  tree dest_type, enum tree_code cast,\n+\t\t\t\t  tsubst_flags_t complain)\n {\n   /* C-style casts are allowed to cast away constness.  With\n      WARN_CAST_QUAL, we still want to issue a warning.  */\n@@ -7108,23 +7109,23 @@ check_for_casting_away_constness (tree src_type, tree dest_type,\n     {\n     case CAST_EXPR:\n       if (complain & tf_warning)\n-\twarning (OPT_Wcast_qual,\n-\t\t \"cast from type %qT to type %qT casts away qualifiers\",\n-\t\t src_type, dest_type);\n+\twarning_at (loc, OPT_Wcast_qual,\n+\t\t    \"cast from type %qT to type %qT casts away qualifiers\",\n+\t\t    src_type, dest_type);\n       return false;\n-      \n+\n     case STATIC_CAST_EXPR:\n       if (complain & tf_error)\n-\terror (\"%<static_cast%> from type %qT to type %qT casts away \"\n-\t       \"qualifiers\",\n-\t       src_type, dest_type);\n+\terror_at (loc, \"%<static_cast%> from type %qT to type %qT casts \"\n+\t\t  \"away qualifiers\",\n+\t\t  src_type, dest_type);\n       return true;\n-      \n+\n     case REINTERPRET_CAST_EXPR:\n       if (complain & tf_error)\n-\terror (\"%<reinterpret_cast%> from type %qT to type %qT casts away \"\n-\t       \"qualifiers\",\n-\t       src_type, dest_type);\n+\terror_at (loc, \"%<reinterpret_cast%> from type %qT to type %qT \"\n+\t\t  \"casts away qualifiers\",\n+\t\t  src_type, dest_type);\n       return true;\n \n     default:\n@@ -7134,7 +7135,8 @@ check_for_casting_away_constness (tree src_type, tree dest_type,\n \n /* Warns if the cast from expression EXPR to type TYPE is useless.  */\n void\n-maybe_warn_about_useless_cast (tree type, tree expr, tsubst_flags_t complain)\n+maybe_warn_about_useless_cast (location_t loc, tree type, tree expr,\n+\t\t\t       tsubst_flags_t complain)\n {\n   if (warn_useless_cast\n       && complain & tf_warning)\n@@ -7144,22 +7146,22 @@ maybe_warn_about_useless_cast (tree type, tree expr, tsubst_flags_t complain)\n \t       ? xvalue_p (expr) : lvalue_p (expr))\n \t   && same_type_p (TREE_TYPE (expr), TREE_TYPE (type)))\n \t  || same_type_p (TREE_TYPE (expr), type))\n-\twarning (OPT_Wuseless_cast, \"useless cast to type %q#T\", type);\n+\twarning_at (loc, OPT_Wuseless_cast,\n+\t\t    \"useless cast to type %q#T\", type);\n     }\n }\n \n /* Warns if the cast ignores cv-qualifiers on TYPE.  */\n-void\n-maybe_warn_about_cast_ignoring_quals (tree type, tsubst_flags_t complain)\n+static void\n+maybe_warn_about_cast_ignoring_quals (location_t loc, tree type,\n+\t\t\t\t      tsubst_flags_t complain)\n {\n   if (warn_ignored_qualifiers\n       && complain & tf_warning\n       && !CLASS_TYPE_P (type)\n       && (cp_type_quals (type) & (TYPE_QUAL_CONST|TYPE_QUAL_VOLATILE)))\n-    {\n-      warning (OPT_Wignored_qualifiers, \"type qualifiers ignored on cast \"\n-\t       \"result type\");\n-    }\n+    warning_at (loc, OPT_Wignored_qualifiers,\n+\t\t\"type qualifiers ignored on cast result type\");\n }\n \n /* Convert EXPR (an expression with pointer-to-member type) to TYPE\n@@ -7218,7 +7220,7 @@ convert_ptrmem (tree type, tree expr, bool allow_inverse_p,\n    indicate whether or not the cast was valid.  */\n \n static tree\n-build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n+build_static_cast_1 (location_t loc, tree type, tree expr, bool c_cast_p,\n \t\t     bool *valid_p, tsubst_flags_t complain)\n {\n   tree intype;\n@@ -7287,7 +7289,7 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       if (sanitize_flags_p (SANITIZE_VPTR))\n \t{\n \t  tree ubsan_check\n-\t    = cp_ubsan_maybe_instrument_downcast (input_location, type,\n+\t    = cp_ubsan_maybe_instrument_downcast (loc, type,\n \t\t\t\t\t\t  intype, expr);\n \t  if (ubsan_check)\n \t    expr = ubsan_check;\n@@ -7445,7 +7447,8 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n \treturn expr;\n \n       if (!c_cast_p\n-\t  && check_for_casting_away_constness (intype, type, STATIC_CAST_EXPR,\n+\t  && check_for_casting_away_constness (loc, intype, type,\n+\t\t\t\t\t       STATIC_CAST_EXPR,\n \t\t\t\t\t       complain))\n \treturn error_mark_node;\n       base = lookup_base (TREE_TYPE (type), TREE_TYPE (intype),\n@@ -7457,7 +7460,7 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       if (sanitize_flags_p (SANITIZE_VPTR))\n \t{\n \t  tree ubsan_check\n-\t    = cp_ubsan_maybe_instrument_downcast (input_location, type,\n+\t    = cp_ubsan_maybe_instrument_downcast (loc, type,\n \t\t\t\t\t\t  intype, expr);\n \t  if (ubsan_check)\n \t    expr = ubsan_check;\n@@ -7494,7 +7497,7 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       if (can_convert (t1, t2, complain) || can_convert (t2, t1, complain))\n \t{\n \t  if (!c_cast_p\n-\t      && check_for_casting_away_constness (intype, type,\n+\t      && check_for_casting_away_constness (loc, intype, type,\n \t\t\t\t\t\t   STATIC_CAST_EXPR,\n \t\t\t\t\t\t   complain))\n \t    return error_mark_node;\n@@ -7516,7 +7519,8 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n       && TYPE_PTROB_P (type))\n     {\n       if (!c_cast_p\n-\t  && check_for_casting_away_constness (intype, type, STATIC_CAST_EXPR,\n+\t  && check_for_casting_away_constness (loc, intype, type,\n+\t\t\t\t\t       STATIC_CAST_EXPR,\n \t\t\t\t\t       complain))\n \treturn error_mark_node;\n       if (processing_template_decl)\n@@ -7531,7 +7535,8 @@ build_static_cast_1 (tree type, tree expr, bool c_cast_p,\n /* Return an expression representing static_cast<TYPE>(EXPR).  */\n \n tree\n-build_static_cast (tree type, tree oexpr, tsubst_flags_t complain)\n+build_static_cast (location_t loc, tree type, tree oexpr,\n+\t\t   tsubst_flags_t complain)\n {\n   tree expr = oexpr;\n   tree result;\n@@ -7548,7 +7553,9 @@ build_static_cast (tree type, tree oexpr, tsubst_flags_t complain)\n       expr = build_min (STATIC_CAST_EXPR, type, oexpr);\n       /* We don't know if it will or will not have side effects.  */\n       TREE_SIDE_EFFECTS (expr) = 1;\n-      return convert_from_reference (expr);\n+      result = convert_from_reference (expr);\n+      protected_set_expr_location (result, loc);\n+      return result;\n     }\n   else if (processing_template_decl)\n     expr = build_non_dependent_expr (expr);\n@@ -7560,24 +7567,25 @@ build_static_cast (tree type, tree oexpr, tsubst_flags_t complain)\n       && TREE_TYPE (expr) == TREE_TYPE (TREE_OPERAND (expr, 0)))\n     expr = TREE_OPERAND (expr, 0);\n \n-  result = build_static_cast_1 (type, expr, /*c_cast_p=*/false, &valid_p,\n-                                complain);\n+  result = build_static_cast_1 (loc, type, expr, /*c_cast_p=*/false,\n+\t\t\t\t&valid_p, complain);\n   if (valid_p)\n     {\n       if (result != error_mark_node)\n \t{\n-\t  maybe_warn_about_useless_cast (type, expr, complain);\n-\t  maybe_warn_about_cast_ignoring_quals (type, complain);\n+\t  maybe_warn_about_useless_cast (loc, type, expr, complain);\n+\t  maybe_warn_about_cast_ignoring_quals (loc, type, complain);\n \t}\n       if (processing_template_decl)\n \tgoto tmpl;\n+      protected_set_expr_location (result, loc);\n       return result;\n     }\n \n   if (complain & tf_error)\n     {\n-      error (\"invalid %<static_cast%> from type %qT to type %qT\",\n-\t     TREE_TYPE (expr), type);\n+      error_at (loc, \"invalid %<static_cast%> from type %qT to type %qT\",\n+\t\tTREE_TYPE (expr), type);\n       if ((TYPE_PTR_P (type) || TYPE_REF_P (type))\n \t  && CLASS_TYPE_P (TREE_TYPE (type))\n \t    && !COMPLETE_TYPE_P (TREE_TYPE (type)))\n@@ -7651,8 +7659,9 @@ build_nop_reinterpret (tree type, tree expr)\n    indicate whether or not reinterpret_cast was valid.  */\n \n static tree\n-build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n-\t\t\t  bool *valid_p, tsubst_flags_t complain)\n+build_reinterpret_cast_1 (location_t loc, tree type, tree expr,\n+\t\t\t  bool c_cast_p, bool *valid_p,\n+\t\t\t  tsubst_flags_t complain)\n {\n   tree intype;\n \n@@ -7688,9 +7697,9 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n       else if (!lvalue_p (expr))\n \t{\n           if (complain & tf_error)\n-            error (\"invalid cast of an rvalue expression of type \"\n-                   \"%qT to type %qT\",\n-                   intype, type);\n+            error_at (loc, \"invalid cast of an rvalue expression of type \"\n+\t\t      \"%qT to type %qT\",\n+\t\t      intype, type);\n \t  return error_mark_node;\n \t}\n \n@@ -7701,8 +7710,8 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n           && (complain & tf_warning)\n \t  && (comptypes (TREE_TYPE (intype), TREE_TYPE (type),\n \t\t\t COMPARE_BASE | COMPARE_DERIVED)))\n-\twarning (0, \"casting %qT to %qT does not dereference pointer\",\n-\t\t intype, type);\n+\twarning_at (loc, 0, \"casting %qT to %qT does not dereference pointer\",\n+\t\t    intype, type);\n \n       expr = cp_build_addr_expr (expr, complain);\n \n@@ -7711,7 +7720,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \n       if (expr != error_mark_node)\n \texpr = build_reinterpret_cast_1\n-\t  (build_pointer_type (TREE_TYPE (type)), expr, c_cast_p,\n+\t  (loc, build_pointer_type (TREE_TYPE (type)), expr, c_cast_p,\n \t   valid_p, complain);\n       if (expr != error_mark_node)\n \t/* cp_build_indirect_ref isn't right for rvalue refs.  */\n@@ -7758,7 +7767,7 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n       if (TYPE_PRECISION (type) < TYPE_PRECISION (intype))\n         {\n           if (complain & tf_error)\n-            permerror (input_location, \"cast from %qH to %qI loses precision\",\n+            permerror (loc, \"cast from %qH to %qI loses precision\",\n                        intype, type);\n           else\n             return error_mark_node;\n@@ -7782,9 +7791,9 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n       if ((complain & tf_warning)\n \t  && !cxx_safe_function_type_cast_p (TREE_TYPE (type),\n \t\t\t\t\t     TREE_TYPE (intype)))\n-\twarning (OPT_Wcast_function_type,\n-\t\t \"cast between incompatible function types\"\n-\t\t \" from %qH to %qI\", intype, type);\n+\twarning_at (loc, OPT_Wcast_function_type,\n+\t\t    \"cast between incompatible function types\"\n+\t\t    \" from %qH to %qI\", intype, type);\n       return build_nop_reinterpret (type, expr);\n     }\n   else if (TYPE_PTRMEMFUNC_P (type) && TYPE_PTRMEMFUNC_P (intype))\n@@ -7793,16 +7802,16 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \t  && !cxx_safe_function_type_cast_p\n \t\t(TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE_RAW (type)),\n \t\t TREE_TYPE (TYPE_PTRMEMFUNC_FN_TYPE_RAW (intype))))\n-\twarning (OPT_Wcast_function_type,\n-\t\t \"cast between incompatible pointer to member types\"\n-\t\t \" from %qH to %qI\", intype, type);\n+\twarning_at (loc, OPT_Wcast_function_type,\n+\t\t    \"cast between incompatible pointer to member types\"\n+\t\t    \" from %qH to %qI\", intype, type);\n       return build_nop_reinterpret (type, expr);\n     }\n   else if ((TYPE_PTRDATAMEM_P (type) && TYPE_PTRDATAMEM_P (intype))\n \t   || (TYPE_PTROBV_P (type) && TYPE_PTROBV_P (intype)))\n     {\n       if (!c_cast_p\n-\t  && check_for_casting_away_constness (intype, type,\n+\t  && check_for_casting_away_constness (loc, intype, type,\n \t\t\t\t\t       REINTERPRET_CAST_EXPR,\n \t\t\t\t\t       complain))\n \treturn error_mark_node;\n@@ -7815,8 +7824,9 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n \t  && COMPLETE_TYPE_P (TREE_TYPE (intype))\n \t  && min_align_of_type (TREE_TYPE (type))\n \t     > min_align_of_type (TREE_TYPE (intype)))\n-\twarning (OPT_Wcast_align, \"cast from %qH to %qI \"\n-\t\t \"increases required alignment of target type\", intype, type);\n+\twarning_at (loc, OPT_Wcast_align, \"cast from %qH to %qI \"\n+\t\t    \"increases required alignment of target type\",\n+\t\t    intype, type);\n \n       if (warn_strict_aliasing <= 2)\n \t/* strict_aliasing_warning STRIP_NOPs its expr.  */\n@@ -7830,9 +7840,9 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n       if (complain & tf_warning)\n \t/* C++11 5.2.10 p8 says that \"Converting a function pointer to an\n \t   object pointer type or vice versa is conditionally-supported.\"  */\n-\twarning (OPT_Wconditionally_supported,\n-\t\t \"casting between pointer-to-function and pointer-to-object \"\n-\t\t \"is conditionally-supported\");\n+\twarning_at (loc, OPT_Wconditionally_supported,\n+\t\t    \"casting between pointer-to-function and \"\n+\t\t    \"pointer-to-object is conditionally-supported\");\n       return build_nop_reinterpret (type, expr);\n     }\n   else if (gnu_vector_type_p (type))\n@@ -7845,7 +7855,8 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n       if (valid_p)\n \t*valid_p = false;\n       if (complain & tf_error)\n-        error (\"invalid cast from type %qT to type %qT\", intype, type);\n+        error_at (loc, \"invalid cast from type %qT to type %qT\",\n+\t\t  intype, type);\n       return error_mark_node;\n     }\n \n@@ -7857,7 +7868,8 @@ build_reinterpret_cast_1 (tree type, tree expr, bool c_cast_p,\n }\n \n tree\n-build_reinterpret_cast (tree type, tree expr, tsubst_flags_t complain)\n+build_reinterpret_cast (location_t loc, tree type, tree expr,\n+\t\t\ttsubst_flags_t complain)\n {\n   tree r;\n \n@@ -7872,16 +7884,19 @@ build_reinterpret_cast (tree type, tree expr, tsubst_flags_t complain)\n \t  && type_dependent_expression_p (expr))\n \t/* There might turn out to be side effects inside expr.  */\n \tTREE_SIDE_EFFECTS (t) = 1;\n-      return convert_from_reference (t);\n+      r = convert_from_reference (t);\n+      protected_set_expr_location (r, loc);\n+      return r;\n     }\n \n-  r = build_reinterpret_cast_1 (type, expr, /*c_cast_p=*/false,\n+  r = build_reinterpret_cast_1 (loc, type, expr, /*c_cast_p=*/false,\n \t\t\t\t/*valid_p=*/NULL, complain);\n   if (r != error_mark_node)\n     {\n-      maybe_warn_about_useless_cast (type, expr, complain);\n-      maybe_warn_about_cast_ignoring_quals (type, complain);\n+      maybe_warn_about_useless_cast (loc, type, expr, complain);\n+      maybe_warn_about_cast_ignoring_quals (loc, type, complain);\n     }\n+  protected_set_expr_location (r, loc);\n   return r;\n }\n \n@@ -7893,8 +7908,8 @@ build_reinterpret_cast (tree type, tree expr, tsubst_flags_t complain)\n    whether or not the conversion succeeded.  */\n \n static tree\n-build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n-\t\t    bool *valid_p)\n+build_const_cast_1 (location_t loc, tree dst_type, tree expr,\n+\t\t    tsubst_flags_t complain, bool *valid_p)\n {\n   tree src_type;\n   tree reference_type;\n@@ -7913,19 +7928,19 @@ build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n   if (!INDIRECT_TYPE_P (dst_type) && !TYPE_PTRDATAMEM_P (dst_type))\n     {\n       if (complain & tf_error)\n-\terror (\"invalid use of %<const_cast%> with type %qT, \"\n-\t       \"which is not a pointer, \"\n-\t       \"reference, nor a pointer-to-data-member type\", dst_type);\n+\terror_at (loc, \"invalid use of %<const_cast%> with type %qT, \"\n+\t\t  \"which is not a pointer, reference, \"\n+\t\t  \"nor a pointer-to-data-member type\", dst_type);\n       return error_mark_node;\n     }\n \n   if (TREE_CODE (TREE_TYPE (dst_type)) == FUNCTION_TYPE)\n     {\n       if (complain & tf_error)\n-\terror (\"invalid use of %<const_cast%> with type %qT, \"\n-\t       \"which is a pointer or reference to a function type\",\n-\t       dst_type);\n-      return error_mark_node;\n+\terror_at (loc, \"invalid use of %<const_cast%> with type %qT, \"\n+\t\t  \"which is a pointer or reference to a function type\",\n+\t\t  dst_type);\n+       return error_mark_node;\n     }\n \n   /* A prvalue of non-class type is cv-unqualified.  */\n@@ -7964,10 +7979,10 @@ build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n       else\n \t{\n \t  if (complain & tf_error)\n-\t    error (\"invalid %<const_cast%> of an rvalue of type %qT \"\n-\t\t   \"to type %qT\",\n-\t\t   src_type, dst_type);\n-\t  return error_mark_node;\n+\t    error_at (loc, \"invalid %<const_cast%> of an rvalue of type %qT \"\n+\t\t      \"to type %qT\",\n+\t\t      src_type, dst_type);\n+ \t  return error_mark_node;\n \t}\n       dst_type = build_pointer_type (TREE_TYPE (dst_type));\n       src_type = build_pointer_type (src_type);\n@@ -7992,16 +8007,16 @@ build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n \t      *valid_p = true;\n \t      /* This cast is actually a C-style cast.  Issue a warning if\n \t\t the user is making a potentially unsafe cast.  */\n-\t      check_for_casting_away_constness (src_type, dst_type,\n+\t      check_for_casting_away_constness (loc, src_type, dst_type,\n \t\t\t\t\t\tCAST_EXPR, complain);\n \t      /* ??? comp_ptr_ttypes_const ignores TYPE_ALIGN.  */\n \t      if ((STRICT_ALIGNMENT || warn_cast_align == 2)\n \t\t  && (complain & tf_warning)\n \t\t  && min_align_of_type (TREE_TYPE (dst_type))\n \t\t     > min_align_of_type (TREE_TYPE (src_type)))\n-\t\twarning (OPT_Wcast_align, \"cast from %qH to %qI \"\n-\t\t\t \"increases required alignment of target type\",\n-\t\t\t src_type, dst_type);\n+\t\twarning_at (loc, OPT_Wcast_align, \"cast from %qH to %qI \"\n+\t\t\t    \"increases required alignment of target type\",\n+\t\t\t    src_type, dst_type);\n \t    }\n \t  if (reference_type)\n \t    {\n@@ -8029,18 +8044,19 @@ build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n       else if (valid_p\n \t       && !at_least_as_qualified_p (TREE_TYPE (dst_type),\n \t\t\t\t\t    TREE_TYPE (src_type)))\n-\tcheck_for_casting_away_constness (src_type, dst_type, CAST_EXPR,\n-\t\t\t\t\t  complain);\n+\tcheck_for_casting_away_constness (loc, src_type, dst_type,\n+\t\t\t\t\t  CAST_EXPR, complain);\n     }\n \n   if (complain & tf_error)\n-    error (\"invalid %<const_cast%> from type %qT to type %qT\",\n-\t   src_type, dst_type);\n+    error_at (loc, \"invalid %<const_cast%> from type %qT to type %qT\",\n+\t      src_type, dst_type);\n   return error_mark_node;\n }\n \n tree\n-build_const_cast (tree type, tree expr, tsubst_flags_t complain)\n+build_const_cast (location_t loc, tree type, tree expr,\n+\t\t  tsubst_flags_t complain)\n {\n   tree r;\n \n@@ -8055,24 +8071,27 @@ build_const_cast (tree type, tree expr, tsubst_flags_t complain)\n \t  && type_dependent_expression_p (expr))\n \t/* There might turn out to be side effects inside expr.  */\n \tTREE_SIDE_EFFECTS (t) = 1;\n-      return convert_from_reference (t);\n+      r = convert_from_reference (t);\n+      protected_set_expr_location (r, loc);\n+      return r;\n     }\n \n-  r = build_const_cast_1 (type, expr, complain, /*valid_p=*/NULL);\n+  r = build_const_cast_1 (loc, type, expr, complain, /*valid_p=*/NULL);\n   if (r != error_mark_node)\n     {\n-      maybe_warn_about_useless_cast (type, expr, complain);\n-      maybe_warn_about_cast_ignoring_quals (type, complain);\n+      maybe_warn_about_useless_cast (loc, type, expr, complain);\n+      maybe_warn_about_cast_ignoring_quals (loc, type, complain);\n     }\n+  protected_set_expr_location (r, loc);\n   return r;\n }\n \n /* Like cp_build_c_cast, but for the c-common bits.  */\n \n tree\n-build_c_cast (location_t /*loc*/, tree type, tree expr)\n+build_c_cast (location_t loc, tree type, tree expr)\n {\n-  return cp_build_c_cast (type, expr, tf_warning_or_error);\n+  return cp_build_c_cast (loc, type, expr, tf_warning_or_error);\n }\n \n /* Like the \"build_c_cast\" used for c-common, but using cp_expr to\n@@ -8082,7 +8101,7 @@ build_c_cast (location_t /*loc*/, tree type, tree expr)\n cp_expr\n build_c_cast (location_t loc, tree type, cp_expr expr)\n {\n-  cp_expr result = cp_build_c_cast (type, expr, tf_warning_or_error);\n+  cp_expr result = cp_build_c_cast (loc, type, expr, tf_warning_or_error);\n   result.set_location (loc);\n   return result;\n }\n@@ -8091,7 +8110,8 @@ build_c_cast (location_t loc, tree type, cp_expr expr)\n    TYPE of expression EXPR.  */\n \n tree\n-cp_build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n+cp_build_c_cast (location_t loc, tree type, tree expr,\n+\t\t tsubst_flags_t complain)\n {\n   tree value = expr;\n   tree result;\n@@ -8130,23 +8150,25 @@ cp_build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n       if (TYPE_PTR_P (TREE_TYPE (expr)))\n \t{\n           if (complain & tf_error)\n-            permerror (input_location, \"ISO C++ forbids casting to an array type %qT\", type);\n+            permerror (loc, \"ISO C++ forbids casting to an array type %qT\",\n+\t\t       type);\n           else\n             return error_mark_node;\n \t  type = build_pointer_type (TREE_TYPE (type));\n \t}\n       else\n \t{\n           if (complain & tf_error)\n-            error (\"ISO C++ forbids casting to an array type %qT\", type);\n+            error_at (loc, \"ISO C++ forbids casting to an array type %qT\",\n+\t\t      type);\n \t  return error_mark_node;\n \t}\n     }\n \n   if (FUNC_OR_METHOD_TYPE_P (type))\n     {\n       if (complain & tf_error)\n-        error (\"invalid cast to function type %qT\", type);\n+        error_at (loc, \"invalid cast to function type %qT\", type);\n       return error_mark_node;\n     }\n \n@@ -8156,28 +8178,28 @@ cp_build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n       && TYPE_PRECISION (type) > TYPE_PRECISION (TREE_TYPE (value))\n       /* Don't warn about converting any constant.  */\n       && !TREE_CONSTANT (value))\n-    warning_at (input_location, OPT_Wint_to_pointer_cast, \n+    warning_at (loc, OPT_Wint_to_pointer_cast, \n \t\t\"cast to pointer from integer of different size\");\n \n   /* A C-style cast can be a const_cast.  */\n-  result = build_const_cast_1 (type, value, complain & tf_warning,\n+  result = build_const_cast_1 (loc, type, value, complain & tf_warning,\n \t\t\t       &valid_p);\n   if (valid_p)\n     {\n       if (result != error_mark_node)\n \t{\n-\t  maybe_warn_about_useless_cast (type, value, complain);\n-\t  maybe_warn_about_cast_ignoring_quals (type, complain);\n+\t  maybe_warn_about_useless_cast (loc, type, value, complain);\n+\t  maybe_warn_about_cast_ignoring_quals (loc, type, complain);\n \t}\n       return result;\n     }\n \n   /* Or a static cast.  */\n-  result = build_static_cast_1 (type, value, /*c_cast_p=*/true,\n+  result = build_static_cast_1 (loc, type, value, /*c_cast_p=*/true,\n \t\t\t\t&valid_p, complain);\n   /* Or a reinterpret_cast.  */\n   if (!valid_p)\n-    result = build_reinterpret_cast_1 (type, value, /*c_cast_p=*/true,\n+    result = build_reinterpret_cast_1 (loc, type, value, /*c_cast_p=*/true,\n \t\t\t\t       &valid_p, complain);\n   /* The static_cast or reinterpret_cast may be followed by a\n      const_cast.  */\n@@ -8188,8 +8210,8 @@ cp_build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n     {\n       tree result_type;\n \n-      maybe_warn_about_useless_cast (type, value, complain);\n-      maybe_warn_about_cast_ignoring_quals (type, complain);\n+      maybe_warn_about_useless_cast (loc, type, value, complain);\n+      maybe_warn_about_cast_ignoring_quals (loc, type, complain);\n \n       /* Non-class rvalues always have cv-unqualified type.  */\n       if (!CLASS_TYPE_P (type))\n@@ -8204,7 +8226,7 @@ cp_build_c_cast (tree type, tree expr, tsubst_flags_t complain)\n \t to succeed.  */\n       if (!same_type_p (non_reference (type), non_reference (result_type)))\n \t{\n-\t  result = build_const_cast_1 (type, result, false, &valid_p);\n+\t  result = build_const_cast_1 (loc, type, result, false, &valid_p);\n \t  gcc_assert (valid_p);\n \t}\n       return result;\n@@ -8896,7 +8918,7 @@ build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p,\n \t  if (same_type_p (to_type, pfn_type))\n \t    return pfn;\n \t  else if (integer_zerop (n) && TREE_CODE (pfn) != CONSTRUCTOR)\n-\t    return build_reinterpret_cast (to_type, pfn, \n+\t    return build_reinterpret_cast (input_location, to_type, pfn, \n                                            complain);\n \t}\n \n@@ -8930,7 +8952,7 @@ build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p,\n   /* Handle null pointer to member function conversions.  */\n   if (null_ptr_cst_p (pfn))\n     {\n-      pfn = cp_build_c_cast (type, pfn, complain);\n+      pfn = cp_build_c_cast (input_location, type, pfn, complain);\n       return build_ptrmemfunc1 (to_type,\n \t\t\t\tinteger_zero_node,\n \t\t\t\tpfn);\n@@ -9085,7 +9107,7 @@ convert_for_assignment (tree type, tree rhs,\n \t{\n \t  warning_sentinel w (warn_useless_cast);\n \t  warning_sentinel w2 (warn_ignored_qualifiers);\n-\t  rhs = cp_build_c_cast (type, elt, complain);\n+\t  rhs = cp_build_c_cast (rhs_loc, type, elt, complain);\n \t}\n       else\n \trhs = error_mark_node;"}, {"sha": "a9b89369f078f37bbc80a95dcd1c8b0de8f512fc", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -2228,9 +2228,9 @@ build_m_component_ref (tree datum, tree component, tsubst_flags_t complain)\n \n /* Return a tree node for the expression TYPENAME '(' PARMS ')'.  */\n \n-tree\n-build_functional_cast (location_t loc, tree exp, tree parms,\n-\t\t       tsubst_flags_t complain)\n+static tree\n+build_functional_cast_1 (location_t loc, tree exp, tree parms,\n+\t\t\t tsubst_flags_t complain)\n {\n   /* This is either a call to a constructor,\n      or a C cast in C++'s `functional' notation.  */\n@@ -2319,7 +2319,7 @@ build_functional_cast (location_t loc, tree exp, tree parms,\n \n       /* This must build a C cast.  */\n       parms = build_x_compound_expr_from_list (parms, ELK_FUNC_CAST, complain);\n-      return cp_build_c_cast (type, parms, complain);\n+      return cp_build_c_cast (loc, type, parms, complain);\n     }\n \n   /* Prepare to evaluate as a call to a constructor.  If this expression\n@@ -2340,7 +2340,7 @@ build_functional_cast (location_t loc, tree exp, tree parms,\n      conversion is equivalent (in definedness, and if defined in\n      meaning) to the corresponding cast expression.  */\n   if (parms && TREE_CHAIN (parms) == NULL_TREE)\n-    return cp_build_c_cast (type, TREE_VALUE (parms), complain);\n+    return cp_build_c_cast (loc, type, TREE_VALUE (parms), complain);\n \n   /* [expr.type.conv]\n \n@@ -2368,6 +2368,15 @@ build_functional_cast (location_t loc, tree exp, tree parms,\n \n   return build_cplus_new (type, exp, complain);\n }\n+\n+tree\n+build_functional_cast (location_t loc, tree exp, tree parms,\n+\t\t       tsubst_flags_t complain)\n+{\n+  tree result = build_functional_cast_1 (loc, exp, parms, complain);\n+  protected_set_expr_location (result, loc);\n+  return result;  \n+}\n \f\n \n /* Add new exception specifier SPEC, to the LIST we currently have."}, {"sha": "88c5a051e3761b5810692299807f97a152db5325", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -1,3 +1,57 @@\n+2019-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* c-c++-common/Wcast-align.c: Check location(s) too.\n+\t* c-c++-common/Wcast-function-type.c: Likewise.\n+\t* c-c++-common/Wint-to-pointer-cast-1.c: Likewise.\n+\t* c-c++-common/Wint-to-pointer-cast-2.c: Likewise.\n+\t* c-c++-common/Wint-to-pointer-cast-3.c: Likewise.\n+\t* g++.dg/Wcast-function-type.C: Likewise.\n+\t* g++.dg/addr_builtin-1.C: Likewise.\n+\t* g++.dg/conversion/const2.C: Likewise.\n+\t* g++.dg/conversion/dynamic1.C: Likewise.\n+\t* g++.dg/conversion/ptrmem2.C: Likewise.\n+\t* g++.dg/conversion/ptrmem3.C: Likewise.\n+\t* g++.dg/conversion/qual3.C: Likewise.\n+\t* g++.dg/conversion/reinterpret3.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-cast.C: Likewise.\n+\t* g++.dg/cpp0x/lambda/lambda-conv11.C: Likewise.\n+\t* g++.dg/cpp0x/nullptr04.C: Likewise.\n+\t* g++.dg/cpp0x/reinterpret_cast2.C: Likewise.\n+\t* g++.dg/cpp0x/rv-cast2.C: Likewise.\n+\t* g++.dg/cpp1y/lambda-conv1.C: Likewise.\n+\t* g++.dg/cpp1z/noexcept-type7.C: Likewise.\n+\t* g++.dg/cpp2a/array-conv9.C: Likewise.\n+\t* g++.dg/expr/cast11.C: Likewise.\n+\t* g++.dg/expr/static_cast8.C: Likewise.\n+\t* g++.dg/ext/vector6.C: Likewise.\n+\t* g++.dg/other/conversion1.C: Likewise.\n+\t* g++.dg/parse/pr26997.C: Likewise.\n+\t* g++.dg/rtti/no-rtti.C: Likewise.\n+\t* g++.dg/tc1/dr137.C: Likewise.\n+\t* g++.dg/template/cast4.C: Likewise.\n+\t* g++.dg/warn/Wcast-qual1.C: Likewise.\n+\t* g++.dg/warn/Wcast-qual2.C: Likewise.\n+\t* g++.dg/warn/Wconditionally-supported-1.C: Likewise.\n+\t* g++.dg/warn/Wuseless-cast.C: Likewise.\n+\t* g++.dg/warn/pr35711.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900227_01.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900404_07.C: Likewise.\n+\t* g++.old-deja/g++.jason/overload1.C: Likewise.\n+\t* g++.old-deja/g++.jason/rfg26.C: Likewise.\n+\t* g++.old-deja/g++.jason/rvalue3.C: Likewise.\n+\t* g++.old-deja/g++.jason/warning2.C: Likewise.\n+\t* g++.old-deja/g++.mike/dyncast4.C: Likewise.\n+\t* g++.old-deja/g++.mike/dyncast6.C: Likewise.\n+\t* g++.old-deja/g++.mike/p11482.C: Likewise.\n+\t* g++.old-deja/g++.mike/p2573.C: Likewise.\n+\t* g++.old-deja/g++.mike/p2855.C: Likewise.\n+\t* g++.old-deja/g++.mike/p7476.C: Likewise.\n+\t* g++.old-deja/g++.mike/p8039.C: Likewise.\n+\t* g++.old-deja/g++.other/cast2.C: Likewise.\n+\t* g++.old-deja/g++.other/cast3.C: Likewise.\n+\t* g++.old-deja/g++.other/dcast1.C: Likewise.\n+\t* g++.old-deja/g++.other/dcast2.C: Likewise.\n+\n 2019-12-09  Lewis Hyatt  <lhyatt@gmail.com>\n \n \tPR preprocessor/49973"}, {"sha": "c296c7fd24913565a5cb15ba43fabc348b7bbd38", "filename": "gcc/testsuite/c-c++-common/Wcast-align.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWcast-align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWcast-align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWcast-align.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -16,8 +16,8 @@ struct t { double x; } *q;\n void\n foo (void)\n {\n-  y = (c *) x;  /* { dg-warning \"alignment\" } */\n-  z = (d *) x;  /* { dg-warning \"alignment\" } */\n+  y = (c *) x;  /* { dg-warning \"7:cast \\[^\\n\\r]* required alignment of target type\" } */\n+  z = (d *) x;  /* { dg-warning \"7:cast \\[^\\n\\r]* required alignment of target type\" } */\n   (long long *) p;  /* { dg-bogus \"alignment\" } */\n   (double *) q;     /* { dg-bogus \"alignment\" } */\n }"}, {"sha": "b49da486814642cb17cb4671a7d42d8601b495f7", "filename": "gcc/testsuite/c-c++-common/Wcast-function-type.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWcast-function-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWcast-function-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWcast-function-type.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -24,8 +24,8 @@ void\n foo (void)\n {\n   a = (f1 *) f; /* { dg-bogus   \"incompatible function types\" } */\n-  b = (f2 *) f; /* { dg-warning \"incompatible function types\" } */\n+  b = (f2 *) f; /* { dg-warning \"7:cast between incompatible function types\" } */\n   c = (f3 *) f; /* { dg-bogus   \"incompatible function types\" } */\n-  d = (f4 *) f; /* { dg-warning \"incompatible function types\" } */\n+  d = (f4 *) f; /* { dg-warning \"7:cast between incompatible function types\" } */\n   e = (f5 *) f; /* { dg-bogus   \"incompatible function types\" } */\n }"}, {"sha": "da77779427379579ec078c8584693f1854c88d3a", "filename": "gcc/testsuite/c-c++-common/Wint-to-pointer-cast-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWint-to-pointer-cast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWint-to-pointer-cast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWint-to-pointer-cast-1.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -8,5 +8,5 @@ char c;\n void *\n f (void)\n {\n-  return (void *) c; /* { dg-warning \"cast to pointer from integer of different size\" } */\n+  return (void *) c; /* { dg-warning \"10:cast to pointer from integer of different size\" } */\n }"}, {"sha": "bf2c7b1d3239adb81e4d5e38d4f32eef4b7754f9", "filename": "gcc/testsuite/c-c++-common/Wint-to-pointer-cast-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWint-to-pointer-cast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWint-to-pointer-cast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWint-to-pointer-cast-2.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -8,5 +8,5 @@ char c;\n void *\n f (void)\n {\n-  return (void *) c; /* { dg-warning \"cast to pointer from integer of different size\" } */\n+  return (void *) c; /* { dg-warning \"10:cast to pointer from integer of different size\" } */\n }"}, {"sha": "0ac35b2c5bcb1764eb16a34d27f31addfe6913f4", "filename": "gcc/testsuite/c-c++-common/Wint-to-pointer-cast-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWint-to-pointer-cast-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWint-to-pointer-cast-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWint-to-pointer-cast-3.c?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -17,6 +17,6 @@ char\n g (void)\n {\n   return (char) p;\n-/* { dg-warning \"cast from pointer to integer of different size\" \"\" { target c } .-1 } */\n-/* { dg-error \"cast from 'void\\\\*' to 'char' loses precision\" \"\" { target c++ } .-2 } */\n+/* { dg-warning \"10:cast from pointer to integer of different size\" \"\" { target c } .-1 } */\n+/* { dg-error \"10:cast from 'void\\\\*' to 'char' loses precision\" \"\" { target c++ } .-2 } */\n }"}, {"sha": "4d3ac33a392916bb2da727c20337131bbe1070cf", "filename": "gcc/testsuite/g++.dg/Wcast-function-type.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWcast-function-type.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWcast-function-type.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWcast-function-type.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -12,6 +12,6 @@ typedef void (S::*MF)(int);\n void\n foo (void)\n {\n-  MF p1 = (MF)&S::foo; /* { dg-warning \"pointer to member\" } */\n+  MF p1 = (MF)&S::foo; /* { dg-warning \"11:cast between incompatible pointer to member\" } */\n   MF p2 = (MF)&S::bar; /* { dg-bogus   \"pointer to member\" } */\n }"}, {"sha": "eebe54d316f06829a525b76803e54d9b4e8899bd", "filename": "gcc/testsuite/g++.dg/addr_builtin-1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Faddr_builtin-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Faddr_builtin-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Faddr_builtin-1.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -93,8 +93,8 @@ static F* test_taking_address_of_gcc_builtin ()\n   // Expect a diagnostic for an invalid static_cast of a function to\n   // either uintptr_t or enum, rather than one for the argument being\n   // a built-in function, since the former is more relevant than the latter.\n-  a = static_cast<uintptr_t>(__builtin_trap);       // { dg-error \"invalid\" }\n-  a = static_cast<UINTPTR_E>(__builtin_trap);       // { dg-error \"invalid\" }\n+  a = static_cast<uintptr_t>(__builtin_trap);       // { dg-error \"7:invalid .static_cast.\" }\n+  a = static_cast<UINTPTR_E>(__builtin_trap);       // { dg-error \"7:invalid .static_cast.\" }\n \n   // Reinterpret cast can cast a function to uintptr_t or enum,\n   // so verify that a diagnostic is issued for the use of a builtin."}, {"sha": "cedd35518737c0fd4f90da0ae5b593e70f4232df", "filename": "gcc/testsuite/g++.dg/conversion/const2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fconst2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fconst2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fconst2.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -7,5 +7,5 @@ typedef int D::*dm;\n bm bp;\n \n void f() {\n-  const_cast<dm>(bp); // { dg-error \"\" }\n+  const_cast<dm>(bp); // { dg-error \"3:invalid .const_cast.\" }\n }"}, {"sha": "5a2c4be51aa9f977cca1926a538a5022946196e5", "filename": "gcc/testsuite/g++.dg/conversion/dynamic1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdynamic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdynamic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fdynamic1.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -11,5 +11,5 @@ A& bar();\n \n void baz()\n {\n-  dynamic_cast<A&>( bar().foo );  // { dg-error \"cannot 'dynamic_cast'\" }\n+  dynamic_cast<A&>( bar().foo );  // { dg-error \"3:cannot 'dynamic_cast'\" }\n }"}, {"sha": "9e162fa435eb8f867f978cda9d95c35550dad6fc", "filename": "gcc/testsuite/g++.dg/conversion/ptrmem2.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem2.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -35,9 +35,9 @@ const int B::*p9 = static_cast<const int B::*>(&D::x);\n const int D::*p10 = static_cast<const int D::*>(&B::x);\n \n // Invalid conversions which decrease cv-qualification.\n-int B::*p11 = static_cast<int B::*>(p10); // { dg-error \"casts away qualifiers\" }\n-int D::*p12 = static_cast<int D::*>(p9);  // { dg-error \"casts away qualifiers\" }\n+int B::*p11 = static_cast<int B::*>(p10); // { dg-error \"15:.static_cast. from type .const int D::\\\\*. to type .int B::\\\\*. casts away qualifiers\" }\n+int D::*p12 = static_cast<int D::*>(p9);  // { dg-error \"15:.static_cast. from type .const int B::\\\\*. to type .int D::\\\\*. casts away qualifiers\" }\n \n // Attempts to change member type.\n-float B::*p13 = static_cast<float B::*>(&D::x); // { dg-error \"invalid .static_cast.\" }\n-float D::*p14 = static_cast<float D::*>(&B::x); // { dg-error \"invalid .static_cast.\" }\n+float B::*p13 = static_cast<float B::*>(&D::x); // { dg-error \"17:invalid .static_cast.\" }\n+float D::*p14 = static_cast<float D::*>(&B::x); // { dg-error \"17:invalid .static_cast.\" }"}, {"sha": "435a9398ab3b95344f8c5dc91747ed8c993a1fa5", "filename": "gcc/testsuite/g++.dg/conversion/ptrmem3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fptrmem3.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -27,5 +27,5 @@ int (A::*p7)() = static_cast<int (A::*)()>(&D::f);  // { dg-error \"\" }\n int (D::*p8)() = static_cast<int (D::*)()>(&A::f);  // { dg-error \"\" }\n \n // Attempts to change member type.\n-float (B::*p13)() = static_cast<float (B::*)()>(&D::f); // { dg-error \"\" }\n-float (D::*p14)() = static_cast<float (D::*)()>(&B::f); // { dg-error \"\" }\n+float (B::*p13)() = static_cast<float (B::*)()>(&D::f); // { dg-error \"21:invalid .static_cast.\" }\n+float (D::*p14)() = static_cast<float (D::*)()>(&B::f); // { dg-error \"21:invalid .static_cast.\" }"}, {"sha": "db93b6b60aa7ff7e29243967009f6c4390d5bc3d", "filename": "gcc/testsuite/g++.dg/conversion/qual3.C", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fqual3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fqual3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Fqual3.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -24,30 +24,30 @@ f (P p, Q q, Q2 q2, R r, S s, T t)\n   const_cast<P>(q2);\n   const_cast<Q>(p);\n   const_cast<Q2>(p);\n-  const_cast<S>(p); // { dg-error \"invalid .const_cast.\" }\n-  const_cast<P>(s); // { dg-error \"invalid .const_cast.\" }\n-  const_cast<S>(q); // { dg-error \"invalid .const_cast.\" }\n-  const_cast<S>(q2); // { dg-error \"invalid .const_cast.\" }\n-  const_cast<Q>(s); // { dg-error \"invalid .const_cast.\" }\n-  const_cast<Q2>(s); // { dg-error \"invalid .const_cast.\" }\n+  const_cast<S>(p); // { dg-error \"3:invalid .const_cast.\" }\n+  const_cast<P>(s); // { dg-error \"3:invalid .const_cast.\" }\n+  const_cast<S>(q); // { dg-error \"3:invalid .const_cast.\" }\n+  const_cast<S>(q2); // { dg-error \"3:invalid .const_cast.\" }\n+  const_cast<Q>(s); // { dg-error \"3:invalid .const_cast.\" }\n+  const_cast<Q2>(s); // { dg-error \"3:invalid .const_cast.\" }\n   const_cast<T>(s);\n   const_cast<S>(t);\n-  const_cast<T>(q); // { dg-error \"invalid .const_cast.\" }\n-  const_cast<Q>(t); // { dg-error \"invalid .const_cast.\" }\n+  const_cast<T>(q); // { dg-error \"3:invalid .const_cast.\" }\n+  const_cast<Q>(t); // { dg-error \"3:invalid .const_cast.\" }\n \n   // Test reinterpret_cast.\n-  reinterpret_cast<P>(q); // { dg-error \"casts away qualifiers\" }\n-  reinterpret_cast<P>(q2); // { dg-error \"casts away qualifiers\" }\n+  reinterpret_cast<P>(q); // { dg-error \"3:.reinterpret_cast. \\[^\\n\\r]* casts away qualifiers\" }\n+  reinterpret_cast<P>(q2); // { dg-error \"3:.reinterpret_cast. \\[^\\n\\r]* casts away qualifiers\" }\n   reinterpret_cast<Q>(p);\n   reinterpret_cast<Q2>(p);\n   reinterpret_cast<S>(p);\n-  reinterpret_cast<P>(s); // { dg-error \"casts away qualifiers\" }\n+  reinterpret_cast<P>(s); // { dg-error \"3:.reinterpret_cast. \\[^\\n\\r]* casts away qualifiers\" }\n   reinterpret_cast<S>(q);\n   reinterpret_cast<S>(q2);\n   reinterpret_cast<Q>(s);\n   reinterpret_cast<Q2>(s);\n-  reinterpret_cast<T>(s); // { dg-error \"casts away qualifiers\" }\n+  reinterpret_cast<T>(s); // { dg-error \"3:.reinterpret_cast. \\[^\\n\\r]* casts away qualifiers\" }\n   reinterpret_cast<S>(t);\n-  reinterpret_cast<T>(q); // { dg-error \"casts away qualifiers\" }\n+  reinterpret_cast<T>(q); // { dg-error \"3:.reinterpret_cast. \\[^\\n\\r]* casts away qualifiers\" }\n   reinterpret_cast<Q>(t);\n }"}, {"sha": "0ea280f318ade269a4705181ae34b18e41cc3e5e", "filename": "gcc/testsuite/g++.dg/conversion/reinterpret3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Freinterpret3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Freinterpret3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconversion%2Freinterpret3.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -3,5 +3,5 @@ struct S {};\n S s;\n \n void f() {\n-  reinterpret_cast<const S>(s); // { dg-error \"\" }\n+  reinterpret_cast<const S>(s); // { dg-error \"3:invalid cast\" }\n }"}, {"sha": "909c34e8be689599dc410f400b7a16ae6867053d", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-cast.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-cast.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -14,11 +14,11 @@ template <class T>\n constexpr bool f ()\n {\n #if __cplusplus > 201103L\n-  T *p = reinterpret_cast<T*>(sizeof (T));\n+  T *p = reinterpret_cast<T*>(sizeof (T));  // { dg-error \"not a constant expression\" \"\" { target c++14 } }\n   return p;\n #else\n-  return *reinterpret_cast<T*>(sizeof (T));\n+  return *reinterpret_cast<T*>(sizeof (T));  // { dg-error \"not a constant expression\" \"\" { target c++11_only } }\n #endif\n }\n \n-constexpr bool b = f<int>();   // { dg-error \"not a constant expression|in .constexpr. expansion of \" }\n+constexpr bool b = f<int>();   // { dg-message \"in .constexpr. expansion of \" }"}, {"sha": "7aef1c88cc0c1e367f81695819c997a59aafa743", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-conv11.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv11.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -4,7 +4,7 @@\n void foo()\n {\n   int i;\n-  static_cast<void(*)()>([i]{});  // { dg-error \"invalid 'static_cast'\" }\n-  static_cast<void(*)()>([=]{});  // { dg-error \"invalid 'static_cast'\" }\n-  static_cast<void(*)()>([&]{});  // { dg-error \"invalid 'static_cast'\" }\n+  static_cast<void(*)()>([i]{});  // { dg-error \"3:invalid 'static_cast'\" }\n+  static_cast<void(*)()>([=]{});  // { dg-error \"3:invalid 'static_cast'\" }\n+  static_cast<void(*)()>([&]{});  // { dg-error \"3:invalid 'static_cast'\" }\n }"}, {"sha": "15af84c1c867efc9b06a882f6370a44020087b12", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr04.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr04.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -4,13 +4,13 @@\n \n __extension__ typedef __INTPTR_TYPE__ intptr_t;\n \n-const int n4 = static_cast<const int>(nullptr); // { dg-error \"invalid 'static_cast' \" }\n-const short int n5 = reinterpret_cast<short int>(nullptr); // { dg-error \"loses precision\" }\n+const int n4 = static_cast<const int>(nullptr); // { dg-error \"16:invalid 'static_cast' \" }\n+const short int n5 = reinterpret_cast<short int>(nullptr); // { dg-error \"22:cast from .std::nullptr_t. to .short int. loses precision\" }\n const intptr_t n6 = reinterpret_cast<intptr_t>(nullptr);\n const intptr_t n7 = (intptr_t)nullptr;\n \n decltype(nullptr) mynull = 0;\n-const int n8 = static_cast<const int>(mynull); // { dg-error \"invalid 'static_cast' \" }\n-const short int n9 = reinterpret_cast<short int>(mynull); // { dg-error \"loses precision\" }\n+const int n8 = static_cast<const int>(mynull); // { dg-error \"16:invalid 'static_cast' \" }\n+const short int n9 = reinterpret_cast<short int>(mynull); // { dg-error \"22:cast from .std::nullptr_t. to .short int. loses precision\" }\n const intptr_t n10 = reinterpret_cast<intptr_t>(mynull);\n const intptr_t n11 = (intptr_t)mynull;"}, {"sha": "c173576e2879a6d422daf48e7e5b727e73e2218a", "filename": "gcc/testsuite/g++.dg/cpp0x/reinterpret_cast2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Freinterpret_cast2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Freinterpret_cast2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Freinterpret_cast2.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -6,5 +6,5 @@ struct S { };\n void\n foo ()\n {\n-  auto a = reinterpret_cast<S&&>(foo ());\t// { dg-error \"invalid cast of an rvalue expression of type 'void' to type\" }\n+  auto a = reinterpret_cast<S&&>(foo ());\t// { dg-error \"12:invalid cast of an rvalue expression of type 'void' to type\" }\n }"}, {"sha": "c9c087f1687690633aeb1070886509a5120e54fa", "filename": "gcc/testsuite/g++.dg/cpp0x/rv-cast2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cast2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cast2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Frv-cast2.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -10,11 +10,11 @@ struct A { };\n int main()\n {\n   const_cast<int&>(lval<int>());\n-  const_cast<int&>(xval<int>());   // { dg-error \"\" }\n-  const_cast<int&>(prval<int>());  // { dg-error \"\" }\n+  const_cast<int&>(xval<int>());   // { dg-error \"3:invalid .const_cast. of an rvalue\" }\n+  const_cast<int&>(prval<int>());  // { dg-error \"3:invalid .const_cast. of an rvalue\" }\n   const_cast<int&&>(lval<int>());\n   const_cast<int&&>(xval<int>());\n-  const_cast<int&&>(prval<int>()); // { dg-error \"\" }\n+  const_cast<int&&>(prval<int>()); // { dg-error \"3:invalid .const_cast. of an rvalue\" }\n   const_cast<A&&>(lval<A>());\n   const_cast<A&&>(xval<A>());\n   const_cast<A&&>(prval<A>());"}, {"sha": "fc567441b267f0fa7eb4f49f64127029d3c5a18c", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-conv1.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-conv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-conv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-conv1.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -4,10 +4,10 @@\n void foo()\n {\n   int i;\n-  static_cast<void(*)(int)>([i](auto){});  // { dg-error \"invalid 'static_cast'\" }\n-  static_cast<void(*)(int)>([=](auto){});  // { dg-error \"invalid 'static_cast'\" }\n-  static_cast<void(*)(int)>([&](auto){});  // { dg-error \"invalid 'static_cast'\" }\n-  static_cast<float(*)(float)>([i](auto x){ return x; });  // { dg-error \"invalid 'static_cast'\" }\n-  static_cast<float(*)(float)>([=](auto x){ return x; });  // { dg-error \"invalid 'static_cast'\" }\n-  static_cast<float(*)(float)>([&](auto x){ return x; });  // { dg-error \"invalid 'static_cast'\" }\n+  static_cast<void(*)(int)>([i](auto){});  // { dg-error \"3:invalid 'static_cast'\" }\n+  static_cast<void(*)(int)>([=](auto){});  // { dg-error \"3:invalid 'static_cast'\" }\n+  static_cast<void(*)(int)>([&](auto){});  // { dg-error \"3:invalid 'static_cast'\" }\n+  static_cast<float(*)(float)>([i](auto x){ return x; });  // { dg-error \"3:invalid 'static_cast'\" }\n+  static_cast<float(*)(float)>([=](auto x){ return x; });  // { dg-error \"3:invalid 'static_cast'\" }\n+  static_cast<float(*)(float)>([&](auto x){ return x; });  // { dg-error \"3:invalid 'static_cast'\" }\n }"}, {"sha": "aabeeda3856e139ea88a3559b723dabaf120a7e3", "filename": "gcc/testsuite/g++.dg/cpp1z/noexcept-type7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type7.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -10,5 +10,5 @@ void f()\n   NP np;\n \n   static_cast<P>(np);\n-  static_cast<NP>(p);\t\t// { dg-error \"\" }\n+  static_cast<NP>(p);\t\t// { dg-error \"3:invalid .static_cast.\" }\n }"}, {"sha": "63318c53e09154eb333f18447b4196981c912718", "filename": "gcc/testsuite/g++.dg/cpp2a/array-conv9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Farray-conv9.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -8,7 +8,7 @@ void\n test ()\n {\n   int (&r)[1] = const_cast<int(&)[1]>(arr);\n-  int (&r2)[] = const_cast<int(&)[]>(arr); // { dg-error \"invalid\" }\n+  int (&r2)[] = const_cast<int(&)[]>(arr); // { dg-error \"17:invalid .const_cast.\" }\n   int (&r3)[1] = (int(&)[1]) arr;\n   int (&r4)[] = (int(&)[]) arr;\n   int (&r5)[1] = static_cast<int(&)[1]>(arr);\n@@ -23,5 +23,5 @@ test ()\n   int(*p6)[] = (int(*)[1]) (int(*)[]) &arr;\n   int(*p7)[] = static_cast<int(*)[]>(&arr);\n   int(*p8)[] = static_cast<int(*)[1]>(&arr);\n-  int(*p9)[] = static_cast<int(*)[1]>(&arr2); // { dg-error \"invalid\" }\n+  int(*p9)[] = static_cast<int(*)[1]>(&arr2); // { dg-error \"16:invalid .static_cast.\" }\n }"}, {"sha": "baafebb3c73c55c8473beaa0585487155be472ab", "filename": "gcc/testsuite/g++.dg/expr/cast11.C", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcast11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcast11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcast11.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -13,22 +13,22 @@ struct B { int i; const char c; } b = {};\n void f1()\n {\n   int i = 0;\n-  f((long const)i);\t\t\t// { dg-warning \"qualifiers ignored\" }\n-  f((int* const)&i);\t\t\t// { dg-warning \"qualifiers ignored\" }\n-  f((int const* const)&i);\t\t// { dg-warning \"qualifiers ignored\" }\n-  f((long* const)&i);\t\t\t// { dg-warning \"qualifiers ignored\" }\n+  f((long const)i);\t\t\t// { dg-warning \"5:type qualifiers ignored\" }\n+  f((int* const)&i);\t\t\t// { dg-warning \"5:type qualifiers ignored\" }\n+  f((int const* const)&i);\t\t// { dg-warning \"5:type qualifiers ignored\" }\n+  f((long* const)&i);\t\t\t// { dg-warning \"5:type qualifiers ignored\" }\n \n-  f(static_cast<long const>(i));\t// { dg-warning \"qualifiers ignored\" }\n-  f(reinterpret_cast<long const>(&i));\t// { dg-warning \"qualifiers ignored\" }\n+  f(static_cast<long const>(i));\t// { dg-warning \"5:type qualifiers ignored\" }\n+  f(reinterpret_cast<long const>(&i));\t// { dg-warning \"5:type qualifiers ignored\" }\n \n-  f(static_cast<int* const>(&i));\t// { dg-warning \"qualifiers ignored\" }\n-  f(const_cast<int* const>(&i));\t// { dg-warning \"qualifiers ignored\" }\n-  f(reinterpret_cast<long* const>(&i));\t// { dg-warning \"qualifiers ignored\" }\n+  f(static_cast<int* const>(&i));\t// { dg-warning \"5:type qualifiers ignored\" }\n+  f(const_cast<int* const>(&i));\t// { dg-warning \"5:type qualifiers ignored\" }\n+  f(reinterpret_cast<long* const>(&i));\t// { dg-warning \"5:type qualifiers ignored\" }\n \n   using ptrmem = int B::*;\n-  f(static_cast<ptrmem const>(&B::i));\t// { dg-warning \"qualifiers ignored\" }\n-  f(const_cast<ptrmem const>(&B::i));\t// { dg-warning \"qualifiers ignored\" }\n-  f(reinterpret_cast<ptrmem const>(&B::i)); // { dg-warning \"qualifiers ignored\" }\n+  f(static_cast<ptrmem const>(&B::i));\t// { dg-warning \"5:type qualifiers ignored\" }\n+  f(const_cast<ptrmem const>(&B::i));\t// { dg-warning \"5:type qualifiers ignored\" }\n+  f(reinterpret_cast<ptrmem const>(&B::i)); // { dg-warning \"5:type qualifiers ignored\" }\n \n   // No warnings, not a cv-qualified type:\n   using ptrmem2 = const char B::*;"}, {"sha": "f8c4525e2685aa2cb158af3ad03b056ab28fe396", "filename": "gcc/testsuite/g++.dg/expr/static_cast8.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast8.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -9,9 +9,9 @@ extern C* c;\n \n void pointers(C* c, A2* a2, B1* b1)\n {\n-  (void) static_cast<A1*>(c);\t// { dg-error \"invalid 'static_cast'\" }\n-  (void) static_cast<C*>(a2);\t// { dg-error \"invalid 'static_cast'\" }\n-  (void) static_cast<B2*>(b1);\t// { dg-error \"invalid 'static_cast'\" }\n+  (void) static_cast<A1*>(c);\t// { dg-error \"10:invalid 'static_cast'\" }\n+  (void) static_cast<C*>(a2);\t// { dg-error \"10:invalid 'static_cast'\" }\n+  (void) static_cast<B2*>(b1);\t// { dg-error \"10:invalid 'static_cast'\" }\n }\n \n struct D1; // { dg-message \"note: class type 'D1' is incomplete\" }\n@@ -21,7 +21,7 @@ struct E2; // { dg-message \"note: class type 'E2' is incomplete\" }\n \n void references(C& c, D2& d2, E1& e1)\n {\n-  (void) static_cast<D1&>(c);\t// { dg-error \"invalid 'static_cast'\" }\n-  (void) static_cast<C&>(d2);\t// { dg-error \"invalid 'static_cast'\" }\n-  (void) static_cast<E2&>(e1);\t// { dg-error \"invalid 'static_cast'\" }\n+  (void) static_cast<D1&>(c);\t// { dg-error \"10:invalid 'static_cast'\" }\n+  (void) static_cast<C&>(d2);\t// { dg-error \"10:invalid 'static_cast'\" }\n+  (void) static_cast<E2&>(e1);\t// { dg-error \"10:invalid 'static_cast'\" }\n }"}, {"sha": "70e90cd5a81d49e5c9e059af10e2f9921ed46859", "filename": "gcc/testsuite/g++.dg/ext/vector6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector6.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -8,5 +8,5 @@ typedef union {__v_4F v; float a[4];} __v4F;\n void f(void)\n {\n       __v_4F b;\n-      (reinterpret_cast<__v4F>(b).a)[1] = 1; // { dg-error \"\" }\n+      (reinterpret_cast<__v4F>(b).a)[1] = 1; // { dg-error \"8:invalid cast\" }\n }"}, {"sha": "1660443012abd9ff26d9fd46df8a1815c6c5f916", "filename": "gcc/testsuite/g++.dg/other/conversion1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconversion1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconversion1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconversion1.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -13,5 +13,5 @@ int main()\n {\n   long long m;\n   \n-  (void (QObject::*)()) m;    // { dg-error \"invalid cast\" }\n+  (void (QObject::*)()) m;    // { dg-error \"3:invalid cast\" }\n }"}, {"sha": "be3589cee73451e640bd4376606a6c992763e87d", "filename": "gcc/testsuite/g++.dg/parse/pr26997.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr26997.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr26997.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr26997.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -21,7 +21,7 @@ public:\n \n C bar (void)\n {\n-  (C ())(3); // { dg-error \"invalid cast\" } \n+  (C ())(3); // { dg-error \"3:invalid cast\" } \n   return (C ());\n }\n \n@@ -41,9 +41,9 @@ void foo2 (void)\n {\n   C ()[2];\n   (C ())[2];\n-  (S ())(3); // { dg-error \"invalid cast\" } \n-  (C())*var; // { dg-error \"invalid cast\" } \n-  (C())+var;  // { dg-error \"invalid cast\" } \n+  (S ())(3); // { dg-error \"3:invalid cast\" } \n+  (C())*var; // { dg-error \"3:invalid cast\" } \n+  (C())+var;  // { dg-error \"3:invalid cast\" } \n   S()(3);\n   (S()(3));\n }"}, {"sha": "a8bd78e0f39d3a87d1e8c66b6c8abba00b101999", "filename": "gcc/testsuite/g++.dg/rtti/no-rtti.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fno-rtti.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fno-rtti.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fno-rtti.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -14,5 +14,5 @@ A* f();\n \n int main()\n {\n-   B* b = dynamic_cast<B*>(f()); // { dg-error \"\" }\n+   B* b = dynamic_cast<B*>(f()); // { dg-error \"11:.dynamic_cast. not permitted\" }\n }"}, {"sha": "3b1d260ea4a0e0dd3a12f903d078d7820a417ad5", "filename": "gcc/testsuite/g++.dg/tc1/dr137.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr137.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr137.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr137.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -9,5 +9,5 @@ const void* v;\n void foo(void)\n {\n   (void)static_cast<const volatile A *>(v);\n-  (void)static_cast<A *>(v);  // { dg-error \"\" \"static_cast cannot remove cv qualifiers\" }\n+  (void)static_cast<A *>(v);  // { dg-error \"9:.static_cast. from type .const void\\\\*. to type .A\\\\*. casts away qualifiers\" \"static_cast cannot remove cv qualifiers\" }\n }"}, {"sha": "93ec5d86e6094407da9d817e4c42c1ae7ec6328d", "filename": "gcc/testsuite/g++.dg/template/cast4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcast4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcast4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcast4.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -1,4 +1,4 @@\n template <class T> void f()\n {\n-  static_cast<int&>(42);\t// { dg-error \"static_cast\" }\n+  static_cast<int&>(42);\t// { dg-error \"3:invalid .static_cast.\" }\n }"}, {"sha": "23be6fa5c4da6a01739d2e52cdf6832aa5947735", "filename": "gcc/testsuite/g++.dg/warn/Wcast-qual1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual1.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -3,5 +3,5 @@\n \n int main(int, char**) {\n   const int foo[2] = {1,1};\n-  ((int*)foo)[0] = 0; // { dg-warning \"cast\" }\n+  ((int*)foo)[0] = 0; // { dg-warning \"4:cast\" }\n }"}, {"sha": "45db74bbef726b029bcc931098ce77b2fb6a6450", "filename": "gcc/testsuite/g++.dg/warn/Wcast-qual2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcast-qual2.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -1,4 +1,4 @@\n // PR c++/50956\n // { dg-options \"-Wcast-qual\" }\n \n-void* p = (void*)\"txt\"; // { dg-warning \"cast\" }\n+void* p = (void*)\"txt\"; // { dg-warning \"11:cast\" }"}, {"sha": "3c32edba8cecdc18771d29158e47ce2ccb159e18", "filename": "gcc/testsuite/g++.dg/warn/Wconditionally-supported-1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconditionally-supported-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconditionally-supported-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconditionally-supported-1.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -17,9 +17,9 @@ void foo ()\n   PV pv;\n   PO po;\n \n-  pf = reinterpret_cast <PF>(pv); // { dg-warning \"conditionally-supported\" }\n-  pv = reinterpret_cast <PV>(pf); // { dg-warning \"conditionally-supported\" }\n+  pf = reinterpret_cast <PF>(pv); // { dg-warning \"8:casting between pointer-to-function and pointer-to-object is conditionally-supported\" }\n+  pv = reinterpret_cast <PV>(pf); // { dg-warning \"8:casting between pointer-to-function and pointer-to-object is conditionally-supported\" }\n \n-  pf = reinterpret_cast <PF>(po); // { dg-warning \"conditionally-supported\" }\n-  po = reinterpret_cast <PO>(pf); // { dg-warning \"conditionally-supported\" }\n+  pf = reinterpret_cast <PF>(po); // { dg-warning \"8:casting between pointer-to-function and pointer-to-object is conditionally-supported\" }\n+  po = reinterpret_cast <PO>(pf); // { dg-warning \"8:casting between pointer-to-function and pointer-to-object is conditionally-supported\" }\n }"}, {"sha": "2fd6bc451026f70644f71379de80ad7408ceac32", "filename": "gcc/testsuite/g++.dg/warn/Wuseless-cast.C", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuseless-cast.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -64,28 +64,28 @@ void f()\n {\n   int n; \n \n-  (int)(n);                    // { dg-warning \"useless cast\" }\n-  static_cast<int>(n);         // { dg-warning \"useless cast\" }\n-  reinterpret_cast<int>(n);    // { dg-warning \"useless cast\" }\n+  (int)(n);                    // { dg-warning \"3:useless cast\" }\n+  static_cast<int>(n);         // { dg-warning \"3:useless cast\" }\n+  reinterpret_cast<int>(n);    // { dg-warning \"3:useless cast\" }\n \n-  (int*)(&n);                  // { dg-warning \"useless cast\" }\n-  const_cast<int*>(&n);        // { dg-warning \"useless cast\" }\n-  static_cast<int*>(&n);       // { dg-warning \"useless cast\" }\n-  reinterpret_cast<int*>(&n);  // { dg-warning \"useless cast\" }\n+  (int*)(&n);                  // { dg-warning \"3:useless cast\" }\n+  const_cast<int*>(&n);        // { dg-warning \"3:useless cast\" }\n+  static_cast<int*>(&n);       // { dg-warning \"3:useless cast\" }\n+  reinterpret_cast<int*>(&n);  // { dg-warning \"3:useless cast\" }\n \n   int& m = n;\n \n-  (int&)(m);                   // { dg-warning \"useless cast\" }\n-  const_cast<int&>(m);         // { dg-warning \"useless cast\" }\n-  static_cast<int&>(m);        // { dg-warning \"useless cast\" }\n-  reinterpret_cast<int&>(m);   // { dg-warning \"useless cast\" }\n+  (int&)(m);                   // { dg-warning \"3:useless cast\" }\n+  const_cast<int&>(m);         // { dg-warning \"3:useless cast\" }\n+  static_cast<int&>(m);        // { dg-warning \"3:useless cast\" }\n+  reinterpret_cast<int&>(m);   // { dg-warning \"3:useless cast\" }\n \n   tmpl_f1(m);\n \n-  (int&)(n);                   // { dg-warning \"useless cast\" }\n-  const_cast<int&>(n);         // { dg-warning \"useless cast\" }\n-  static_cast<int&>(n);        // { dg-warning \"useless cast\" }\n-  reinterpret_cast<int&>(n);   // { dg-warning \"useless cast\" }\n+  (int&)(n);                   // { dg-warning \"3:useless cast\" }\n+  const_cast<int&>(n);         // { dg-warning \"3:useless cast\" }\n+  static_cast<int&>(n);        // { dg-warning \"3:useless cast\" }\n+  reinterpret_cast<int&>(n);   // { dg-warning \"3:useless cast\" }\n \n   tmpl_f2(n);\n \n@@ -100,30 +100,30 @@ void f()\n \n   A a;\n \n-  (A)(a);                     // { dg-warning \"useless cast\" }\n-  static_cast<A>(a);          // { dg-warning \"useless cast\" }\n+  (A)(a);                     // { dg-warning \"3:useless cast\" }\n+  static_cast<A>(a);          // { dg-warning \"3:useless cast\" }\n \n-  (A*)(&a);                   // { dg-warning \"useless cast\" }\n-  const_cast<A*>(&a);         // { dg-warning \"useless cast\" }\n-  static_cast<A*>(&a);        // { dg-warning \"useless cast\" }\n-  reinterpret_cast<A*>(&a);   // { dg-warning \"useless cast\" }\n-  dynamic_cast<A*>(&a);       // { dg-warning \"useless cast\" }\n+  (A*)(&a);                   // { dg-warning \"3:useless cast\" }\n+  const_cast<A*>(&a);         // { dg-warning \"3:useless cast\" }\n+  static_cast<A*>(&a);        // { dg-warning \"3:useless cast\" }\n+  reinterpret_cast<A*>(&a);   // { dg-warning \"3:useless cast\" }\n+  dynamic_cast<A*>(&a);       // { dg-warning \"3:useless cast\" }\n \n   A& b = a;\n \n-  (A&)(b);                    // { dg-warning \"useless cast\" }\n-  const_cast<A&>(b);          // { dg-warning \"useless cast\" }\n-  static_cast<A&>(b);         // { dg-warning \"useless cast\" }     \n-  static_cast<A&>(b);         // { dg-warning \"useless cast\" }\n-  dynamic_cast<A&>(b);        // { dg-warning \"useless cast\" }\n+  (A&)(b);                    // { dg-warning \"3:useless cast\" }\n+  const_cast<A&>(b);          // { dg-warning \"3:useless cast\" }\n+  static_cast<A&>(b);         // { dg-warning \"3:useless cast\" }     \n+  static_cast<A&>(b);         // { dg-warning \"3:useless cast\" }\n+  dynamic_cast<A&>(b);        // { dg-warning \"3:useless cast\" }\n \n   tmpl_f3(b);\n \n-  (A&)(a);                    // { dg-warning \"useless cast\" } \n-  const_cast<A&>(a);          // { dg-warning \"useless cast\" }\n-  static_cast<A&>(a);         // { dg-warning \"useless cast\" }\n-  reinterpret_cast<A&>(a);    // { dg-warning \"useless cast\" }\n-  dynamic_cast<A&>(a);        // { dg-warning \"useless cast\" }\n+  (A&)(a);                    // { dg-warning \"3:useless cast\" } \n+  const_cast<A&>(a);          // { dg-warning \"3:useless cast\" }\n+  static_cast<A&>(a);         // { dg-warning \"3:useless cast\" }\n+  reinterpret_cast<A&>(a);    // { dg-warning \"3:useless cast\" }\n+  dynamic_cast<A&>(a);        // { dg-warning \"3:useless cast\" }\n \n   tmpl_f4(a);\n }"}, {"sha": "2a71d32bd0975017b7690914bf4cf3bf3a3acac7", "filename": "gcc/testsuite/g++.dg/warn/pr35711.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35711.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35711.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35711.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -4,5 +4,5 @@\n \n int* foo (volatile int *p)\n {\n-  return (int*)p; // { dg-warning \"cast from type 'volatile int\\\\*' to type 'int\\\\*' casts away qualifiers\" }\n+  return (int*)p; // { dg-warning \"10:cast from type 'volatile int\\\\*' to type 'int\\\\*' casts away qualifiers\" }\n }"}, {"sha": "c42557a5c16bbeeebc792ab303301bca7e3d2067", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900227_01.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900227_01.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900227_01.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900227_01.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -33,7 +33,7 @@\n \n int main ();\n \n-short s = (short) &main;\t// { dg-error \"loses precision\" \"lose\" { xfail h8*-*-* xstormy16-*-* } }\n-char c = (char) &main;\t\t// { dg-error \"loses precision\" \"lose\" }\n+short s = (short) &main;\t// { dg-error \"11:cast \\[^\\n\\r]* loses precision\" \"lose\" { xfail h8*-*-* xstormy16-*-* } }\n+char c = (char) &main;\t\t// { dg-error \"10:cast \\[^\\n\\r]* loses precision\" \"lose\" }\n \n int main () { return 0; }"}, {"sha": "eb2bf95c07afbe784c37ca135c1fde5c4781301a", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900404_07.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900404_07.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900404_07.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900404_07.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -14,5 +14,5 @@ array_type *ap;\n \n void foo ()\n {\n-  int i = *((array_type) *ap);\t/* { dg-error \"\" } missed */\n+  int i = *((array_type) *ap);\t/* { dg-error \"13:ISO C\\\\+\\\\+ forbids casting to an array type\" } missed */\n }"}, {"sha": "2aa27ae7bdeb7ff4c95c73374d6bada0194a8b61", "filename": "gcc/testsuite/g++.old-deja/g++.jason/overload1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload1.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -8,5 +8,5 @@ struct A {\n struct B: public A { };\n \n void bar (A& a) {\n-  B* bp = (B*)a;\t\t// { dg-error \"\" } \n+  B* bp = (B*)a;\t\t// { dg-error \"11:invalid cast\" } \n }"}, {"sha": "43314fd16d15127a924b4e669414bfbb1a796f15", "filename": "gcc/testsuite/g++.old-deja/g++.jason/rfg26.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frfg26.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -6,5 +6,5 @@ FTYPE f;                /* ok */\n void\n test_0 ()\n {\n-    (FTYPE) f;          /* { dg-error \"\" } casting to function type */\n+    (FTYPE) f;          /* { dg-error \"5:invalid cast to function type\" } casting to function type */\n }"}, {"sha": "49191c9e408cfe4e032e99d32ec2e81b46a82574", "filename": "gcc/testsuite/g++.old-deja/g++.jason/rvalue3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frvalue3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frvalue3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Frvalue3.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -2,5 +2,5 @@\n int main ()\n {\n    int i;\n-   int &ir = (int&)(int)i;\t// { dg-error \"\" } casting rvalue to reference type\n+   int &ir = (int&)(int)i;\t// { dg-error \"14:invalid cast of an rvalue expression\" } casting rvalue to reference type\n }"}, {"sha": "b17e06fcafe74cd6dfba471a78519905e8c4ab59", "filename": "gcc/testsuite/g++.old-deja/g++.jason/warning2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fwarning2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fwarning2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fwarning2.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -10,5 +10,5 @@ struct B: public A { void f () { } };\n int main()\n {\n   B* bp;\n-  A& ar = (A&)bp;\t\t// { dg-warning \"\" } \n+  A& ar = (A&)bp;\t\t// { dg-warning \"11:casting .B\\\\*. to .A&. does not dereference pointer\" } \n }"}, {"sha": "4bcec2cd9afde40173edbcb191802f1f73af6ea9", "filename": "gcc/testsuite/g++.old-deja/g++.mike/dyncast4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast4.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n int main() {\n   int* d;\n-  dynamic_cast<void*>(d);\t// { dg-error \"\" } \n+  dynamic_cast<void*>(d);\t// { dg-error \"3:cannot .dynamic_cast.\" } \n }"}, {"sha": "adfe13669a3a6d6e2e4387e235756aab05831faf", "filename": "gcc/testsuite/g++.old-deja/g++.mike/dyncast6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fdyncast6.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -9,5 +9,5 @@ public:\n class B : public A { };\n      \n void x (A& a) {\n-  const B& b1 = dynamic_cast<B&>((const A&)a);\t// { dg-error \"\" } opps\n+  const B& b1 = dynamic_cast<B&>((const A&)a);\t// { dg-error \"17:cannot .dynamic_cast.\" } opps\n }"}, {"sha": "1a3220492229a294fac854a2b207a03c00c924be", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p11482.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp11482.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp11482.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp11482.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -6,5 +6,5 @@ void *vp;\n enum E { bad, ok } e;\n \n void foo() {\n-  e = (E)vp;\t\t// { dg-error \"\" } \n+  e = (E)vp;\t\t// { dg-error \"7:invalid cast\" } \n }"}, {"sha": "b197a2cef64f50510941ed838aa251cee2c8e2fe", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p2573.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2573.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2573.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2573.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -9,7 +9,9 @@ public:\n };\n \n char *X::add() {\n-  char *f1 = (char *) &key;\t// { dg-error \"\" } \n-  char *f2 = (char *) &vkey;\t// { dg-error \"\" } \n+  char *f1 = (char *) &key;\t// { dg-error \"14:invalid cast\" }\n+  // { dg-error \"24:ISO C\\\\+\\\\+ forbids taking the address\" \"\" { target *-*-* } .-1 }\n+  char *f2 = (char *) &vkey;\t// { dg-error \"14:invalid cast\" }\n+  // { dg-error \"24:ISO C\\\\+\\\\+ forbids taking the address\" \"\" { target *-*-* } .-1 }\n   return f1;\n }"}, {"sha": "48a3fe42f453ea5d301e633ae563a84853e21d67", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p2855.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2855.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2855.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp2855.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -16,6 +16,6 @@ Ctest::operator const char *() const\n int main()\n {\n   Ctest obj;\n-  char* temp = (char *)obj;\t\t// { dg-error \"invalid cast\" } \n+  char* temp = (char *)obj;\t\t// { dg-error \"16:invalid cast\" } \n   temp[0] = '\\0';\n }"}, {"sha": "95f5860ca6cd4859b3f91fdc812c0f65f584e7ba", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p7476.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp7476.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp7476.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp7476.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -16,5 +16,5 @@ void HeapTracked::isObjectAllocation(HeapTracked *ptr)\n void HeapTracked::isObjectAllocation(const HeapTracked *ptr)\n {\n   const_cast<void*>(dynamic_cast<const void*>(ptr));\n-  dynamic_cast<void*>(ptr);\t\t// { dg-error \"\" } \n+  dynamic_cast<void*>(ptr);\t\t// { dg-error \"3:cannot .dynamic_cast.\" } \n }"}, {"sha": "70d36385cb25bb1fa0b9f4a443bc0c525b7fd5da", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p8039.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp8039.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp8039.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp8039.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -11,5 +11,5 @@ extern void bar(int*);\n int main()\n {\n   int (C::*mfp)() = &C::func;\n-  bar((int*)mfp);\t\t// { dg-error \"\" } no clear semantics\n+  bar((int*)mfp);\t\t// { dg-error \"7:invalid cast\" } no clear semantics\n }"}, {"sha": "6e3d089cb7c103956a5d179f1727f18641972043", "filename": "gcc/testsuite/g++.old-deja/g++.other/cast2.C", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcast2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcast2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcast2.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -10,8 +10,9 @@ int main()\n   typedef void (A::*F)();\n   F p;\n \n-  const_cast<const A>(a); // { dg-error \"\" } const_cast requires pointer/ref types\n-  const_cast<F>(p); // { dg-error \"\" } const_cast requires pointer/ref types\n-  const_cast<int (*)()>(&main); // { dg-error \"\" } function type in const_cast\n-  const_cast<int (&)()>(main); // { dg-error \"\" } function type in const_cast\n+  const_cast<const A>(a); // { dg-error \"3:invalid use of .const_cast.\" } const_cast requires pointer/ref types\n+  const_cast<F>(p); // { dg-error \"3:invalid use of .const_cast.\" } const_cast requires pointer/ref types\n+  const_cast<int (*)()>(&main); // { dg-error \"3:invalid use of .const_cast.\" } function type in const_cast\n+  // { dg-error \"26:ISO C\\\\+\\\\+ forbids taking address\" \"\" { target *-*-* } .-1 }\n+  const_cast<int (&)()>(main); // { dg-error \"3:invalid use of .const_cast.\" } function type in const_cast\n }"}, {"sha": "9d2f172fea3d33f1b50927fcd0eb6b07a12c8153", "filename": "gcc/testsuite/g++.old-deja/g++.other/cast3.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcast3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcast3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcast3.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -21,24 +21,24 @@ void fn (void *p, void const *cp, Y *yp, Y const *ycp, Z *zp, Z const *zcp)\n   static_cast <int *const *> (p);\n   static_cast <int const *const *> (p);\n   \n-  static_cast <X *> (cp);           // { dg-error \"\" } lose const\n+  static_cast <X *> (cp);           // { dg-error \"3:.static_cast. from type .const void\\\\*. to type .X\\\\*. casts away qualifiers\" } lose const\n   static_cast <X const *> (cp);\n-  static_cast <int *> (cp);         // { dg-error \"\" } lose const\n+  static_cast <int *> (cp);         // { dg-error \"3:.static_cast. from type .const void\\\\*. to type .int\\\\*. casts away qualifiers\" } lose const\n   static_cast <int const *> (cp);\n-  static_cast <int **> (cp);        // { dg-error \"\" } lose const\n-  static_cast <int const **> (cp);  // { dg-error \"\" } lose const\n+  static_cast <int **> (cp);        // { dg-error \"3:.static_cast. from type .const void\\\\*. to type .int\\\\*\\\\*. casts away qualifiers\" } lose const\n+  static_cast <int const **> (cp);  // { dg-error \"3:.static_cast. from type .const void\\\\*. to type .const int\\\\*\\\\*. casts away qualifiers\" } lose const\n   static_cast <int *const *> (cp);\n   static_cast <int const *const *> (cp);\n   \n   static_cast <Z *> (yp);\n   static_cast <Z const *> (yp);\n \n-  static_cast <Z *> (ycp);          // { dg-error \"\" } lose const\n+  static_cast <Z *> (ycp);          // { dg-error \"3:.static_cast. from type .const Y\\\\*. to type .Z\\\\*. casts away qualifiers\" } lose const\n   static_cast <Z const *> (ycp);\n \n   static_cast <Y *> (zp);\n   static_cast <Y const *> (zp);\n \n-  static_cast <Y *> (zcp);          // { dg-error \"\" } lose const\n+  static_cast <Y *> (zcp);          // { dg-error \"3:invalid .static_cast. from type .const Z\\\\*. to type .Y\\\\*.\" } lose const\n   static_cast <Y const *> (zcp);\n }"}, {"sha": "353e2afe877e3cf75d0bfaab90a422755fde8886", "filename": "gcc/testsuite/g++.old-deja/g++.other/dcast1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdcast1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdcast1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdcast1.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -10,6 +10,6 @@ extern volatile C& cr;\n \n void f ()\n {\n-  dynamic_cast<void*>(cp); // { dg-error \"\" } cannot dynamic_cast\n-  dynamic_cast<C&>(cr); // { dg-error \"\" } cannot dynamic_cast\n+  dynamic_cast<void*>(cp); // { dg-error \"3:cannot .dynamic_cast.\" } cannot dynamic_cast\n+  dynamic_cast<C&>(cr); // { dg-error \"3:cannot .dynamic_cast.\" } cannot dynamic_cast\n }"}, {"sha": "85f1ececd7a8d9f9137873acdda2348ad669fbec", "filename": "gcc/testsuite/g++.old-deja/g++.other/dcast2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdcast2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdcast2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fdcast2.C?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -11,7 +11,7 @@ struct D : public B {\n \n void foo() {\n   B x;\n-  dynamic_cast<D*>(&x); // { dg-warning \"\" } will never succeed\n+  dynamic_cast<D*>(&x); // { dg-warning \"3:.dynamic_cast\" } will never succeed\n   B* p = &x;\n   dynamic_cast<D*>(p);\n }"}, {"sha": "b288fc92b0c7676bc8bf0b0d49b72d28be5be225", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -1,3 +1,8 @@\n+2019-12-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* libcp1plugin.cc (plugin_build_cast_expr): Adjust build_cast\n+\tdeclaration.\n+\n 2019-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* libcp1plugin.cc (plugin_build_expression_list_expr): Adjust"}, {"sha": "aa9844af9d3c3a8d8a95779acc115fc34278f9df", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20", "patch": "@@ -3064,7 +3064,8 @@ plugin_build_cast_expr (cc1_plugin::connection *self,\n \t\t\tgcc_expr operand2)\n {\n   plugin_context *ctx = static_cast<plugin_context *> (self);\n-  tree (*build_cast)(tree type, tree expr, tsubst_flags_t complain) = NULL;\n+  tree (*build_cast)(location_t loc, tree type, tree expr,\n+\t\t     tsubst_flags_t complain) = NULL;\n   tree type = convert_in (operand1);\n   tree expr = convert_in (operand2);\n \n@@ -3101,7 +3102,7 @@ plugin_build_cast_expr (cc1_plugin::connection *self,\n   if (!template_dependent_p)\n     processing_template_decl--;\n \n-  tree val = build_cast (type, expr, tf_error);\n+  tree val = build_cast (input_location, type, expr, tf_error);\n \n   if (template_dependent_p)\n     processing_template_decl--;"}]}