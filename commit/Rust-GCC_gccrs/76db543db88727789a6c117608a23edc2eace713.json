{"sha": "76db543db88727789a6c117608a23edc2eace713", "node_id": "C_kwDOANBUbNoAKDc2ZGI1NDNkYjg4NzI3Nzg5YTZjMTE3NjA4YTIzZWRjMmVhY2U3MTM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-10T09:44:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-10T11:03:57Z"}, "message": "middle-end/105537 - debug processing\n\nThe following makes sure to have a consistent state of\nflag_var_tracking_assignments with the distributed handling\nin process_options and finish_options by moving everything to\nfinish_options which also restores diagnostics for\n-g0 -fvar-tracking which was lost with previous changes.\n\n2022-05-10  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/105537\n\t* toplev.cc (process_options): Move flag_var_tracking\n\thandling ...\n\t* opts.cc (finish_options): ... here.\n\n\t* gcc.dg/torture/pr105537.c: New testcase.", "tree": {"sha": "b6277c024f84b898dd2bb08d67a6a560396c3ee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6277c024f84b898dd2bb08d67a6a560396c3ee6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76db543db88727789a6c117608a23edc2eace713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76db543db88727789a6c117608a23edc2eace713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76db543db88727789a6c117608a23edc2eace713", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76db543db88727789a6c117608a23edc2eace713/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bac97ad0436afcbce24c82e6d57f11471cd8f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bac97ad0436afcbce24c82e6d57f11471cd8f10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bac97ad0436afcbce24c82e6d57f11471cd8f10"}], "stats": {"total": 85, "additions": 57, "deletions": 28}, "files": [{"sha": "c9badd241a01cf80835d905f25fdc532efa8f48f", "filename": "gcc/opts.cc", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76db543db88727789a6c117608a23edc2eace713/gcc%2Fopts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76db543db88727789a6c117608a23edc2eace713/gcc%2Fopts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.cc?ref=76db543db88727789a6c117608a23edc2eace713", "patch": "@@ -1333,10 +1333,29 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n \t && !(opts->x_flag_selective_scheduling\n \t      || opts->x_flag_selective_scheduling2));\n \n-  /* Note -fvar-tracking is enabled automatically with OPT_LEVELS_1_PLUS and\n-     so we need to drop it if we are called from optimize attribute.  */\n-  if (opts->x_debug_info_level < DINFO_LEVEL_NORMAL)\n-    opts->x_flag_var_tracking = false;\n+  /* We know which debug output will be used so we can set flag_var_tracking\n+     and flag_var_tracking_uninit if the user has not specified them.  Note\n+     we have not yet initialized debug_hooks so we might uselessly run\n+     var-tracking on targets without var_location debug hook support.  */\n+  if (opts->x_debug_info_level < DINFO_LEVEL_NORMAL\n+      || !dwarf_debuginfo_p (opts))\n+    {\n+      if ((opts_set->x_flag_var_tracking && opts->x_flag_var_tracking == 1)\n+\t  || (opts_set->x_flag_var_tracking_uninit\n+\t      && opts->x_flag_var_tracking_uninit == 1))\n+\t{\n+\t  if (opts->x_debug_info_level < DINFO_LEVEL_NORMAL)\n+\t    warning_at (UNKNOWN_LOCATION, 0,\n+\t\t\t\"variable tracking requested, but useless unless \"\n+\t\t\t\"producing debug info\");\n+\t  else\n+\t    warning_at (UNKNOWN_LOCATION, 0,\n+\t\t\t\"variable tracking requested, but not supported \"\n+\t\t\t\"by this debug format\");\n+\t}\n+      opts->x_flag_var_tracking = 0;\n+      opts->x_flag_var_tracking_uninit = 0;\n+    }\n \n   /* One could use EnabledBy, but it would lead to a circular dependency.  */\n   if (!opts_set->x_flag_var_tracking_uninit)"}, {"sha": "2e4825c47206609c17fe3ce3560e6715aded085c", "filename": "gcc/testsuite/gcc.dg/torture/pr105537.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76db543db88727789a6c117608a23edc2eace713/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr105537.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76db543db88727789a6c117608a23edc2eace713/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr105537.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr105537.c?ref=76db543db88727789a6c117608a23edc2eace713", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ffast-math -fsignaling-nans -fvar-tracking-assignments -fno-move-loop-stores -ftree-loop-distribution\" } */\n+\n+int n;\n+\n+double\n+ext1 (int);\n+\n+void\n+ext2 (double);\n+\n+int\n+sum (int v1, int v2)\n+{\n+  return v1 + v2;\n+}\n+\n+void\n+bar (void)\n+{\n+  ext2 (ext1 (n));\n+}\n+\n+__attribute__ ((optimize (\"-O3\"))) void\n+foo (int *x)\n+{\n+  static int i;\n+\n+  bar ();\n+  for (i = 0; i != 2; i = sum (i, 1))\n+    n = *x = 0;\n+}\n+\n+/* { dg-message \"other options take precedence\" \"\" { target *-*-* } 0 } */"}, {"sha": "055e0642f775d5e6d0aa80863678cf492a4e1657", "filename": "gcc/toplev.cc", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76db543db88727789a6c117608a23edc2eace713/gcc%2Ftoplev.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76db543db88727789a6c117608a23edc2eace713/gcc%2Ftoplev.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.cc?ref=76db543db88727789a6c117608a23edc2eace713", "patch": "@@ -1458,30 +1458,6 @@ process_options (bool no_backend)\n \t\tdebug_type_names[debug_set_to_format (write_symbols)]);\n     }\n \n-  /* We know which debug output will be used so we can set flag_var_tracking\n-     and flag_var_tracking_uninit if the user has not specified them.  */\n-  if (debug_info_level < DINFO_LEVEL_NORMAL\n-      || !dwarf_debuginfo_p ()\n-      || debug_hooks->var_location == do_nothing_debug_hooks.var_location)\n-    {\n-      if ((OPTION_SET_P (flag_var_tracking) && flag_var_tracking == 1)\n-\t  || (OPTION_SET_P (flag_var_tracking_uninit)\n-\t      && flag_var_tracking_uninit == 1))\n-        {\n-\t  if (debug_info_level < DINFO_LEVEL_NORMAL)\n-\t    warning_at (UNKNOWN_LOCATION, 0,\n-\t\t\t\"variable tracking requested, but useless unless \"\n-\t\t\t\"producing debug info\");\n-\t  else\n-\t    warning_at (UNKNOWN_LOCATION, 0,\n-\t\t\t\"variable tracking requested, but not supported \"\n-\t\t\t\"by this debug format\");\n-\t}\n-      flag_var_tracking = 0;\n-      flag_var_tracking_uninit = 0;\n-      flag_var_tracking_assignments = 0;\n-    }\n-\n   /* The debug hooks are used to implement -fdump-go-spec because it\n      gives a simple and stable API for all the information we need to\n      dump.  */"}]}