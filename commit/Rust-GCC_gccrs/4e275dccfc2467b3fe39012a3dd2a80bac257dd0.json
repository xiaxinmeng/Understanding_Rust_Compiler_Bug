{"sha": "4e275dccfc2467b3fe39012a3dd2a80bac257dd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUyNzVkY2NmYzI0NjdiM2ZlMzkwMTJhM2RkMmE4MGJhYzI1N2RkMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-12-21T08:14:28Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-01-11T08:18:53Z"}, "message": "Add pytest for a GCOV test-case\n\ngcc/testsuite/ChangeLog:\n\n\tPR gcov-profile/98273\n\t* lib/gcov.exp: Add run-gcov-pytest function which runs pytest.\n\t* g++.dg/gcov/pr98273.C: New test.\n\t* g++.dg/gcov/gcov.py: New test.\n\t* g++.dg/gcov/test-pr98273.py: New test.", "tree": {"sha": "9fd69b27e1ffdffec4501d0143de8e212fb148a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fd69b27e1ffdffec4501d0143de8e212fb148a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e275dccfc2467b3fe39012a3dd2a80bac257dd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e275dccfc2467b3fe39012a3dd2a80bac257dd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e275dccfc2467b3fe39012a3dd2a80bac257dd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e275dccfc2467b3fe39012a3dd2a80bac257dd0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa4586d8545f9730f9acdba8978b69f7cc026bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4586d8545f9730f9acdba8978b69f7cc026bb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4586d8545f9730f9acdba8978b69f7cc026bb6"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "a8c4ea9ae71ab120cbdea60fb80ac7e64ad26133", "filename": "gcc/testsuite/g++.dg/gcov/gcov.py", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e275dccfc2467b3fe39012a3dd2a80bac257dd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e275dccfc2467b3fe39012a3dd2a80bac257dd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fgcov.py?ref=4e275dccfc2467b3fe39012a3dd2a80bac257dd0", "patch": "@@ -0,0 +1,10 @@\n+import gzip\n+import json\n+import os\n+\n+\n+def gcov_from_env():\n+    # return parsed JSON content a GCOV_PATH file\n+    json_filename = os.environ['GCOV_PATH'] + '.gcov.json.gz'\n+    json_data = gzip.open(json_filename).read()\n+    return json.loads(json_data)"}, {"sha": "bfa83cbe4d00fbaa7c185e45c3c5a07a5d1012dd", "filename": "gcc/testsuite/g++.dg/gcov/pr98273.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e275dccfc2467b3fe39012a3dd2a80bac257dd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fpr98273.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e275dccfc2467b3fe39012a3dd2a80bac257dd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fpr98273.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Fpr98273.C?ref=4e275dccfc2467b3fe39012a3dd2a80bac257dd0", "patch": "@@ -0,0 +1,24 @@\n+/* PR gcov-profile/98273 */\n+\n+/* { dg-options \"--coverage -std=c++11\" } */\n+/* { dg-do run { target native } } */\n+\n+int\n+main ()\n+{\n+  int i = 42;\n+  {\n+    auto f = [] () {\n+      auto g = [] () {};\n+      g ();\n+      g ();\n+    };\n+    f ();\n+  }\n+  ++i;\n+  ++i;\n+  ++i;\n+  return 45 - i;\n+}\n+\n+/* { dg-final { run-gcov-pytest pr98273.C \"test-pr98273.py\" } } */"}, {"sha": "6cb39d10c1ec8b887982ec1e44b3400abb86d5d9", "filename": "gcc/testsuite/g++.dg/gcov/test-pr98273.py", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e275dccfc2467b3fe39012a3dd2a80bac257dd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Ftest-pr98273.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e275dccfc2467b3fe39012a3dd2a80bac257dd0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Ftest-pr98273.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgcov%2Ftest-pr98273.py?ref=4e275dccfc2467b3fe39012a3dd2a80bac257dd0", "patch": "@@ -0,0 +1,27 @@\n+from gcov import gcov_from_env\n+\n+import pytest\n+\n+\n+@pytest.fixture(scope='function', autouse=True)\n+def gcov():\n+    return gcov_from_env()\n+\n+\n+def test_basics(gcov):\n+    files = gcov['files']\n+    assert len(files) == 1\n+    functions = files[0]['functions']\n+    assert len(functions) == 3\n+\n+\n+def test_lines(gcov):\n+    lines = gcov['files'][0]['lines']\n+    linesdict = {}\n+    for line in lines:\n+        linesdict[int(line['line_number'])] = line\n+\n+    assert linesdict[21]['function_name'] == 'main'\n+    assert linesdict[15]['function_name'] == '_ZZ4mainENKUlvE_clEv'\n+    assert (linesdict[12]['function_name']\n+            == '_ZZZ4mainENKUlvE_clEvENKUlvE_clEv')"}, {"sha": "4bcab1d3f1d404d8a0a19b01555ca979fbf6b15e", "filename": "gcc/testsuite/lib/gcov.exp", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e275dccfc2467b3fe39012a3dd2a80bac257dd0/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e275dccfc2467b3fe39012a3dd2a80bac257dd0/gcc%2Ftestsuite%2Flib%2Fgcov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcov.exp?ref=4e275dccfc2467b3fe39012a3dd2a80bac257dd0", "patch": "@@ -247,6 +247,51 @@ proc verify-calls { testname testcase file } {\n     return $failed\n }\n \n+# Call by dg-final to run gcov --json-format which produces a JSON file\n+# that is later analysed by a pytest Python script.\n+# We pass filename of a test via GCOV_PATH environment variable.\n+\n+proc run-gcov-pytest { args } {\n+    global GCOV\n+    global srcdir subdir\n+    # Extract the test file name from the arguments.\n+    set testcase [lindex $args 0]\n+\n+    verbose \"Running $GCOV $testcase in $srcdir/$subdir\" 2\n+    set testcase [remote_download host $testcase]\n+    set result [remote_exec host $GCOV \"$testcase -i\"]\n+\n+    set result [remote_exec host \"pytest -m pytest --version\"]\n+    set status [lindex $result 0]\n+    if { $status != 0 } then {\n+      unresolved \"could not find Python interpreter and (or) pytest module for $testcase\"\n+      return\n+    }\n+\n+    set pytest_script [lindex $args 1]\n+    setenv GCOV_PATH $testcase\n+    verbose \"pytest_script: $pytest_script\" 2\n+    spawn -noecho python3 -m pytest --color=no -rA -s --tb=no $srcdir/$subdir/$pytest_script\n+\n+    set prefix \"\\[^\\r\\n\\]*\"\n+    expect {\n+      -re \"FAILED($prefix)\\[^\\r\\n\\]+\\r\\n\" {\n+       fail \"$expect_out(1,string)\"\n+       exp_continue\n+      }\n+      -re \"ERROR($prefix)\\[^\\r\\n\\]+\\r\\n\" {\n+       fail \"$expect_out(1,string)\"\n+       exp_continue\n+      }\n+      -re \"PASSED($prefix)\\[^\\r\\n\\]+\\r\\n\" {\n+       pass \"$expect_out(1,string)\"\n+       exp_continue\n+      }\n+    }\n+\n+    clean-gcov $testcase\n+}\n+\n # Called by dg-final to run gcov and analyze the results.\n #\n # ARGS consists of the optional strings \"branches\" and/or \"calls\","}]}