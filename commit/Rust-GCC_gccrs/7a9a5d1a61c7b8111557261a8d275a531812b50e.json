{"sha": "7a9a5d1a61c7b8111557261a8d275a531812b50e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E5YTVkMWE2MWM3YjgxMTE1NTcyNjFhOGQyNzVhNTMxODEyYjUwZQ==", "commit": {"author": {"name": "zhengnannan", "email": "zhengnannan@huawei.com", "date": "2020-11-11T10:37:20Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-11-11T10:37:20Z"}, "message": "AArch64: Add FLAG for arithmetic operation intrinsics [PR94442]\n\n2020-11-11  Zhiheng Xie  <xiezhiheng@huawei.com>\n\t    Nannan Zheng  <zhengnannan@huawei.com>\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add proper FLAG\n\tfor arithmetic operation intrinsics.", "tree": {"sha": "f740be2dbfa5464ec6826aaa44f0ffd5fbb36670", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f740be2dbfa5464ec6826aaa44f0ffd5fbb36670"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a9a5d1a61c7b8111557261a8d275a531812b50e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9a5d1a61c7b8111557261a8d275a531812b50e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a9a5d1a61c7b8111557261a8d275a531812b50e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9a5d1a61c7b8111557261a8d275a531812b50e/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1644ab9917ca6b96e9e683c422f1793258b9a3db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1644ab9917ca6b96e9e683c422f1793258b9a3db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1644ab9917ca6b96e9e683c422f1793258b9a3db"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "b70056aa185d3325e00fc5fb674b7512a4ad1e7c", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a9a5d1a61c7b8111557261a8d275a531812b50e/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a9a5d1a61c7b8111557261a8d275a531812b50e/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=7a9a5d1a61c7b8111557261a8d275a531812b50e", "patch": "@@ -47,7 +47,7 @@\n   VAR1 (COMBINEP, combine, 0, ALL, di)\n   BUILTIN_VB (BINOP, pmul, 0, NONE)\n   BUILTIN_VHSDF_HSDF (BINOP, fmulx, 0, FP)\n-  BUILTIN_VHSDF_DF (UNOP, sqrt, 2, ALL)\n+  BUILTIN_VHSDF_DF (UNOP, sqrt, 2, FP)\n   BUILTIN_VD_BHSI (BINOP, addp, 0, NONE)\n   VAR1 (UNOP, addp, 0, NONE, di)\n   BUILTIN_VDQ_BHSI (UNOP, clrsb, 2, ALL)\n@@ -229,9 +229,9 @@\n   BUILTIN_VSDQ_I_DI (BINOP_UUS, urshl, 0, ALL)\n \n   /* Implemented by aarch64_<sur><dotprod>{_lane}{q}<dot_mode>.  */\n-  BUILTIN_VB (TERNOP, sdot, 0, ALL)\n-  BUILTIN_VB (TERNOPU, udot, 0, ALL)\n-  BUILTIN_VB (TERNOP_SSUS, usdot, 0, ALL)\n+  BUILTIN_VB (TERNOP, sdot, 0, NONE)\n+  BUILTIN_VB (TERNOPU, udot, 0, NONE)\n+  BUILTIN_VB (TERNOP_SSUS, usdot, 0, NONE)\n   BUILTIN_VB (QUADOP_LANE, sdot_lane, 0, ALL)\n   BUILTIN_VB (QUADOPU_LANE, udot_lane, 0, ALL)\n   BUILTIN_VB (QUADOP_LANE, sdot_laneq, 0, ALL)\n@@ -304,7 +304,7 @@\n   BUILTIN_VSDQ_I (USHIFTIMM, uqshl_n, 0, ALL)\n \n   /* Implemented by aarch64_reduc_plus_<mode>.  */\n-  BUILTIN_VALL (UNOP, reduc_plus_scal_, 10, ALL)\n+  BUILTIN_VALL (UNOP, reduc_plus_scal_, 10, NONE)\n \n   /* Implemented by reduc_<maxmin_uns>_scal_<mode> (producing scalar).  */\n   BUILTIN_VDQIF_F16 (UNOP, reduc_smax_scal_, 10, NONE)\n@@ -462,19 +462,19 @@\n   BUILTIN_VALL (BINOP, trn1, 0, ALL)\n   BUILTIN_VALL (BINOP, trn2, 0, ALL)\n \n-  BUILTIN_GPF_F16 (UNOP, frecpe, 0, ALL)\n-  BUILTIN_GPF_F16 (UNOP, frecpx, 0, ALL)\n+  BUILTIN_GPF_F16 (UNOP, frecpe, 0, FP)\n+  BUILTIN_GPF_F16 (UNOP, frecpx, 0, FP)\n \n-  BUILTIN_VDQ_SI (UNOP, urecpe, 0, ALL)\n+  BUILTIN_VDQ_SI (UNOP, urecpe, 0, NONE)\n \n-  BUILTIN_VHSDF (UNOP, frecpe, 0, ALL)\n-  BUILTIN_VHSDF_HSDF (BINOP, frecps, 0, ALL)\n+  BUILTIN_VHSDF (UNOP, frecpe, 0, FP)\n+  BUILTIN_VHSDF_HSDF (BINOP, frecps, 0, FP)\n \n   /* Implemented by a mixture of abs2 patterns.  Note the DImode builtin is\n      only ever used for the int64x1_t intrinsic, there is no scalar version.  */\n-  BUILTIN_VSDQ_I_DI (UNOP, abs, 0, ALL)\n-  BUILTIN_VHSDF (UNOP, abs, 2, ALL)\n-  VAR1 (UNOP, abs, 2, ALL, hf)\n+  BUILTIN_VSDQ_I_DI (UNOP, abs, 0, AUTO_FP)\n+  BUILTIN_VHSDF (UNOP, abs, 2, AUTO_FP)\n+  VAR1 (UNOP, abs, 2, AUTO_FP, hf)\n \n   BUILTIN_VQ_HSF (UNOP, vec_unpacks_hi_, 10, FP)\n   VAR1 (BINOP, float_truncate_hi_, 0, FP, v4sf)\n@@ -508,11 +508,11 @@\n   BUILTIN_VALLDIF (STORESTRUCT, st1x4, 0, STORE)\n \n   /* Implemented by fma<mode>4.  */\n-  BUILTIN_VHSDF (TERNOP, fma, 4, ALL)\n-  VAR1 (TERNOP, fma, 4, ALL, hf)\n+  BUILTIN_VHSDF (TERNOP, fma, 4, FP)\n+  VAR1 (TERNOP, fma, 4, FP, hf)\n   /* Implemented by fnma<mode>4.  */\n-  BUILTIN_VHSDF (TERNOP, fnma, 4, ALL)\n-  VAR1 (TERNOP, fnma, 4, ALL, hf)\n+  BUILTIN_VHSDF (TERNOP, fnma, 4, FP)\n+  VAR1 (TERNOP, fnma, 4, FP, hf)\n \n   /* Implemented by aarch64_simd_bsl<mode>.  */\n   BUILTIN_VDQQH (BSL_P, simd_bsl, 0, ALL)\n@@ -595,13 +595,13 @@\n   BUILTIN_GPI (SHIFTIMM_USS, fcvtzuhf, 3, ALL)\n \n   /* Implemented by aarch64_rsqrte<mode>.  */\n-  BUILTIN_VHSDF_HSDF (UNOP, rsqrte, 0, ALL)\n+  BUILTIN_VHSDF_HSDF (UNOP, rsqrte, 0, FP)\n \n   /* Implemented by aarch64_rsqrts<mode>.  */\n-  BUILTIN_VHSDF_HSDF (BINOP, rsqrts, 0, ALL)\n+  BUILTIN_VHSDF_HSDF (BINOP, rsqrts, 0, FP)\n \n   /* Implemented by fabd<mode>3.  */\n-  BUILTIN_VHSDF_HSDF (BINOP, fabd, 3, ALL)\n+  BUILTIN_VHSDF_HSDF (BINOP, fabd, 3, FP)\n \n   /* Implemented by aarch64_faddp<mode>.  */\n   BUILTIN_VHSDF (BINOP, faddp, 0, FP)\n@@ -623,7 +623,7 @@\n   BUILTIN_VHSDF_HSDF (BINOP_USS, facge, 0, FP)\n \n   /* Implemented by sqrt<mode>2.  */\n-  VAR1 (UNOP, sqrt, 2, ALL, hf)\n+  VAR1 (UNOP, sqrt, 2, FP, hf)\n \n   /* Implemented by <optab><mode>hf2.  */\n   VAR1 (UNOP, floatdi, 2, FP, hf)\n@@ -714,7 +714,7 @@\n   BUILTIN_VSFDF (UNOP, frint64x, 0, FP)\n \n   /* Implemented by aarch64_bfdot{_lane}{q}<mode>.  */\n-  VAR2 (TERNOP, bfdot, 0, ALL, v2sf, v4sf)\n+  VAR2 (TERNOP, bfdot, 0, AUTO_FP, v2sf, v4sf)\n   VAR2 (QUADOP_LANE_PAIR, bfdot_lane, 0, ALL, v2sf, v4sf)\n   VAR2 (QUADOP_LANE_PAIR, bfdot_laneq, 0, ALL, v2sf, v4sf)\n "}]}