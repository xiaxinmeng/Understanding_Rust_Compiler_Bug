{"sha": "f457a62e63a86d5e5342eda16538a26355199856", "node_id": "C_kwDOANBUbNoAKGY0NTdhNjJlNjNhODZkNWU1MzQyZWRhMTY1MzhhMjYzNTUxOTk4NTY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-17T00:18:06Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-01-17T00:18:06Z"}, "message": "Daily bump.", "tree": {"sha": "e68e2b621d181344682b36bfebccf1efc85a0d3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e68e2b621d181344682b36bfebccf1efc85a0d3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f457a62e63a86d5e5342eda16538a26355199856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f457a62e63a86d5e5342eda16538a26355199856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f457a62e63a86d5e5342eda16538a26355199856", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f457a62e63a86d5e5342eda16538a26355199856/comments", "author": null, "committer": null, "parents": [{"sha": "35627c5fb6a51e31ae651a0c79f0775f4290a86e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35627c5fb6a51e31ae651a0c79f0775f4290a86e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35627c5fb6a51e31ae651a0c79f0775f4290a86e"}], "stats": {"total": 371, "additions": 370, "deletions": 1}, "files": [{"sha": "a5505afc0756fb665e849203e6a83b064b8e4a3f", "filename": "contrib/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f457a62e63a86d5e5342eda16538a26355199856/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f457a62e63a86d5e5342eda16538a26355199856/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=f457a62e63a86d5e5342eda16538a26355199856", "patch": "@@ -1,3 +1,15 @@\n+2023-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/108413\n+\t* update-copyright.py (LibPhobosFilter): Add __builtins.di to\n+\tskipped files.\n+\n+2023-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/108413\n+\t* update-copyright.py (TestsuiteFilter): Add .mod and .rs extensions.\n+\t(GCCCopyright): Add 'The fast_float authors' as external author.\n+\n 2023-01-15  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* config-list.mk: Update FreeBSD targets to version 13."}, {"sha": "daddbdff40f9e5c492d0ff9fb7d8965e95109514", "filename": "gcc/ChangeLog", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f457a62e63a86d5e5342eda16538a26355199856/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f457a62e63a86d5e5342eda16538a26355199856/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f457a62e63a86d5e5342eda16538a26355199856", "patch": "@@ -1,3 +1,98 @@\n+2023-01-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/105980\n+\t* config/i386/i386.cc (x86_output_mi_thunk): Disable\n+\t-mforce-indirect-call for PIC in 32-bit mode.\n+\n+2023-01-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/106077\n+\t* ipa-modref.cc (modref_access_analysis::analyze): Use\n+\tfind_always_executed_bbs.\n+\t* ipa-sra.cc (process_scan_results): Likewise.\n+\t* ipa-utils.cc (stmt_may_terminate_function_p): New function.\n+\t(find_always_executed_bbs): New function.\n+\t* ipa-utils.h (stmt_may_terminate_function_p): Declare.\n+\t(find_always_executed_bbs): Declare.\n+\n+2023-01-16  Jan Hubicka  <jh@suse.cz>\n+\n+\t* config/i386/i386.cc (ix86_vectorize_builtin_scatter): Guard scatter\n+\tby TARGET_USE_SCATTER.\n+\t* config/i386/i386.h (TARGET_USE_SCATTER_2PARTS,\n+\tTARGET_USE_SCATTER_4PARTS, TARGET_USE_SCATTER): New macros.\n+\t* config/i386/x86-tune.def (TARGET_USE_SCATTER_2PARTS,\n+\tTARGET_USE_SCATTER_4PARTS, TARGET_USE_SCATTER): New tunes.\n+\t(X86_TUNE_AVOID_256FMA_CHAINS, X86_TUNE_AVOID_512FMA_CHAINS): Disable\n+\tfor znver4.  (X86_TUNE_USE_GATHER): Disable for zen4.\n+\n+2023-01-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/55522\n+\t* config/sol2.h (ENDFILE_SPEC): Don't add crtfastmath.o for -shared.\n+\n+2023-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\tPR target/96795\n+\tPR target/107515\n+\t* config/arm/arm_mve.h (__ARM_mve_coerce2): Split types.\n+\t(__ARM_mve_coerce3): Likewise.\n+\n+2023-01-16  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* tree-ssa-loop-niter.cc (build_popcount_expr): Add IFN support.\n+\n+2023-01-16  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* tree-ssa-loop-niter.cc (number_of_iterations_cltz): New.\n+\t(number_of_iterations_bitcount): Add call to the above.\n+\t(number_of_iterations_exit_assumptions): Add EQ_EXPR case for\n+\tc[lt]z idiom recognition.\n+\n+2023-01-16  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* doc/sourcebuild.texi: Add missing target attributes.\n+\n+2023-01-16  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\tPR tree-optimization/94793\n+\t* tree-scalar-evolution.cc (expression_expensive_p): Add checks\n+\tfor c[lt]z optabs.\n+\t* tree-ssa-loop-niter.cc (build_cltz_expr): New.\n+\t(number_of_iterations_cltz_complement): New.\n+\t(number_of_iterations_bitcount): Add call to the above.\n+\n+2023-01-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/extend.texi (Common Function Attributes): Fix grammar.\n+\n+2023-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/108413\n+\t* config/riscv/riscv-vsetvl.h: Add space in between Copyright and (C).\n+\t* config/riscv/riscv-vsetvl.cc: Likewise.\n+\n+2023-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105593\n+\t* config/i386/xmmintrin.h (_mm_undefined_ps): Temporarily\n+\tdisable -Winit-self using pragma GCC diagnostic ignored.\n+\t* config/i386/emmintrin.h (_mm_undefined_pd, _mm_undefined_si128):\n+\tLikewise.\n+\t* config/i386/avxintrin.h (_mm256_undefined_pd, _mm256_undefined_ps,\n+\t_mm256_undefined_si256): Likewise.\n+\t* config/i386/avx512fintrin.h (_mm512_undefined_pd,\n+\t_mm512_undefined_ps, _mm512_undefined_epi32): Likewise.\n+\t* config/i386/avx512fp16intrin.h (_mm_undefined_ph,\n+\t_mm256_undefined_ph, _mm512_undefined_ph): Likewise.\n+\n+2023-01-16  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/108272\n+\t* config/rs6000/rs6000.cc (rs6000_opaque_type_invalid_use_p): Add the\n+\tsupport for invalid uses in inline asm, factor out the checking and\n+\terroring to lambda function check_and_error_invalid_use.\n+\n 2023-01-15  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR tree-optimization/107608"}, {"sha": "9081c2e74e5d2710820a961b37c1dce7c2478115", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f457a62e63a86d5e5342eda16538a26355199856/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f457a62e63a86d5e5342eda16538a26355199856/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f457a62e63a86d5e5342eda16538a26355199856", "patch": "@@ -1 +1 @@\n-20230116\n+20230117"}, {"sha": "cebcb42d0ff140588349ecf950db8ba1b6771b75", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f457a62e63a86d5e5342eda16538a26355199856/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f457a62e63a86d5e5342eda16538a26355199856/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f457a62e63a86d5e5342eda16538a26355199856", "patch": "@@ -1,3 +1,101 @@\n+2023-01-16  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* gcc-interface/Make-lang.in: Update copyright years.\n+\t* gcc-interface/Makefile.in: Likewise.\n+\t* gcc-interface/ada-builtin-types.def: Likewise.\n+\t* gcc-interface/ada-builtins.def: Likewise.\n+\t* gcc-interface/ada-tree.def: Likewise.\n+\t* gcc-interface/ada-tree.h: Likewise.\n+\t* gcc-interface/ada.h: Likewise.\n+\t* gcc-interface/config-lang.in: Likewise.\n+\t* gcc-interface/cuintp.cc: Likewise.\n+\t* gcc-interface/decl.cc: Likewise.\n+\t* gcc-interface/gadaint.h: Likewise.\n+\t* gcc-interface/gigi.h: Likewise.\n+\t* gcc-interface/lang-specs.h: Likewise.\n+\t* gcc-interface/lang.opt: Likewise.\n+\t* gcc-interface/misc.cc: Likewise.\n+\t* gcc-interface/system.ads: Likewise.\n+\t* gcc-interface/targtyps.cc: Likewise.\n+\t* gcc-interface/trans.cc: Likewise.\n+\t* gcc-interface/utils.cc: Likewise.\n+\t* gcc-interface/utils2.cc: Likewise.\n+\n+2023-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Allocator_For_Return): Fix typo in comment.\n+\n+2023-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Allocator_For_Return): Convert the expression\n+\tto the return object's type in the constrained array case as well.\n+\n+2023-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): For a class-wide non-\n+\tinterface stand-alone object initialized by a function call, call\n+\tRemove_Side_Effects on the expression to capture the result.\n+\n+2023-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.ads (Has_Tag_Of_Type): Declare.\n+\t* exp_util.adb (Has_Tag_Of_Type): Move to package level.  Recurse on\n+\tqualified expressions.\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Use a static reference\n+\tto the interface tag in more cases for class-wide interface objects.\n+\n+2023-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Make_CW_Equivalent_Type.Has_Tag_Of_Type): Fix pasto.\n+\n+2023-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Is_Temporary_For_Interface_Object): Delete.\n+\t(Is_Finalizable_Transient.Is_Aliased): Deal with the specific case\n+\tof temporaries generated for interface objects.\n+\n+2023-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Do not generate a back-\n+\tand-forth displacement of the object's address when using a renaming\n+\tfor an interface object with an expression of the same type.\n+\t* exp_ch4.adb (Expand_Allocator_Expression): Do not remove the side\n+\teffects of the expression up front for the simple allocators. Do not\n+\tcall the Adjust primitive if the expression is a function call.\n+\t* exp_ch6.adb (Expand_Ctrl_Function_Call): Do not expand the call\n+\tunnecessarily for a special return object.\n+\t(Expand_Simple_Function_Return): Restore the displacement of the\n+\treturn object's address in the case where the expression is the call\n+\tto a function whose result type is a type that needs finalization.\n+\t* exp_util.adb (Expand_Subtype_From_Expr): Do not remove the side\n+\teffects of the expression before calling Make_Subtype_From_Expr.\n+\t(Make_CW_Equivalent_Type): If the expression has the tag of its type\n+\tand this type has a uniform size, use 'Object_Size of this type in\n+\tlieu of 'Size of the expression to compute the expression's size.\n+\n+2023-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Make_Allocator_For_Return): Put back an interface\n+\tconversion for expressions with non-interface class-wide type.\n+\n+2023-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Also optimize aliased\n+\tobjects if their nominal subtype is not an unconstrained array.\n+\n+2023-01-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Factor out conditions\n+\tneeded for an initializating expression that is a function call to\n+\tbe renamable into the Is_Renamable_Function_Call predicate.\n+\tUse it to implement the renaming in the case of class-wide interface\n+\tobjects.  Remove an interface conversion on all paths, separate and\n+\toptimize the renaming path in the special expansion for interfaces.\n+\t(Is_Renamable_Function_Call): New predicate.\n+\t(Make_Allocator_For_Return): Put back an interface conversion.\n+\t* exp_ch6.adb (Apply_CW_Accessibility_Check): Remove useless access\n+\tchecks on RE_Tag_Ptr.\n+\n 2023-01-09  Arnaud Charlet  <charlet@adacore.com>\n \n \t* accessibility.adb, accessibility.ads, ada_get_targ.adb: Update copyright year."}, {"sha": "a9054999d151c24debc799e20904ef7b1d4d6d59", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f457a62e63a86d5e5342eda16538a26355199856/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f457a62e63a86d5e5342eda16538a26355199856/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=f457a62e63a86d5e5342eda16538a26355199856", "patch": "@@ -1,3 +1,10 @@\n+2023-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105593\n+\t* c-parser.cc (c_parser_initializer): Check warning_enabled_at\n+\tat the DECL_SOURCE_LOCATION (decl) for OPT_Winit_self instead\n+\tof warn_init_self.\n+\n 2023-01-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/108365"}, {"sha": "4ed513b20646328630ba51503afbecf22ecf63c5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f457a62e63a86d5e5342eda16538a26355199856/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f457a62e63a86d5e5342eda16538a26355199856/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f457a62e63a86d5e5342eda16538a26355199856", "patch": "@@ -1,3 +1,10 @@\n+2023-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105593\n+\t* decl.cc (cp_finish_decl): Check warning_enabled_at\n+\tat the DECL_SOURCE_LOCATION (decl) for OPT_Winit_self instead\n+\tof warn_init_self.\n+\n 2023-01-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/108365"}, {"sha": "7364f1c3538fb20b833038f63a2c6e3b3afc2a35", "filename": "gcc/m2/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f457a62e63a86d5e5342eda16538a26355199856/gcc%2Fm2%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f457a62e63a86d5e5342eda16538a26355199856/gcc%2Fm2%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2FChangeLog?ref=f457a62e63a86d5e5342eda16538a26355199856", "patch": "@@ -1,3 +1,52 @@\n+2023-01-16  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* mc-boot-ch/Glibc.c (libc_time): New function.\n+\t(libc_localtime): New function.\n+\t* mc-boot/GDynamicStrings.c: Regenerate.\n+\t* mc-boot/GFIO.c: Regenerate.\n+\t* mc-boot/GFormatStrings.c: Regenerate.\n+\t* mc-boot/GIndexing.c: Regenerate.\n+\t* mc-boot/GM2Dependent.c: Regenerate.\n+\t* mc-boot/GM2EXCEPTION.c: Regenerate.\n+\t* mc-boot/GPushBackInput.c: Regenerate.\n+\t* mc-boot/GRTExceptions.c: Regenerate.\n+\t* mc-boot/GRTint.c: Regenerate.\n+\t* mc-boot/GStdIO.c: Regenerate.\n+\t* mc-boot/GStringConvert.c: Regenerate.\n+\t* mc-boot/GSysStorage.c: Regenerate.\n+\t* mc-boot/Gdecl.c: Regenerate.\n+\t* mc-boot/GmcComment.c: Regenerate.\n+\t* mc-boot/GmcComp.c: Regenerate.\n+\t* mc-boot/GmcDebug.c: Regenerate.\n+\t* mc-boot/GmcMetaError.c: Regenerate.\n+\t* mc-boot/GmcOptions.c: Regenerate.\n+\t* mc-boot/GmcStack.c: Regenerate.\n+\t* mc-boot/GnameKey.c: Regenerate.\n+\t* mc-boot/GsymbolKey.c: Regenerate.\n+\t* mc-boot/Gkeyc.c: Regenerate.\n+\t* mc/decl.mod (putFieldRecord): Change NulName to NulKey\n+\tand fix type comparision.\n+\t* mc/mcOptions.mod (YEAR): Remove.\n+\t(getYear): New procedure function.\n+\t(displayVersion): Use result from getYear instead of YEAR.\n+\tEmit boilerplate for GPL v3.\n+\t(gplBody): Use result from getYear instead of YEAR.\n+\t(glplBody): Use result from getYear instead of YEAR.\n+\n+2023-01-16  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* gm2-compiler/M2Quads.mod (AssignUnboundedVar): Check Type\n+\tagainst NulSym and call MetaErrorT1 if necessary.\n+\t(AssignUnboundedNonVar): Check Type against NulSym and\n+\tcall MetaErrorT1 if necessary.\n+\t(BuildDesignatorPointer): Check Type1 against NulSym and\n+\tcall MetaErrorT1 if necessary.\n+\n+2023-01-16  Gaius Mulley  <gaiusmod2@gmail.com>\n+\n+\t* mc/mcOptions.mod (displayVersion): Change GPLv2 to GPLv3.\n+\t(YEAR) set to 2023.\n+\n 2023-01-15  Gaius Mulley  <gaiusmod2@gmail.com>\n \n \t* gm2-compiler/M2LexBuf.mod (isSrcToken): Add block comment."}, {"sha": "f96175e3a2b0d619211f34eb963eb3137c8622a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f457a62e63a86d5e5342eda16538a26355199856/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f457a62e63a86d5e5342eda16538a26355199856/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f457a62e63a86d5e5342eda16538a26355199856", "patch": "@@ -1,3 +1,83 @@\n+2023-01-16  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* lib/target-supports.exp (add_options_for_tls): Remove\n+\treference to Solaris 9 in comments.\n+\n+2023-01-16  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/105980\n+\t* g++.target/i386/pr105980.C: New test.\n+\n+2023-01-16  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/tree-ssa/pr106077.C: New test.\n+\n+2023-01-16  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\tPR target/96795\n+\tPR target/107515\n+\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-fp.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/mve_intrinsic_type_overloads-int.c: New test.\n+\n+2023-01-16  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* g++.dg/tree-ssa/pr86544.C: Add .POPCOUNT to tree scan regex.\n+\t* gcc.dg/tree-ssa/popcount.c: Likewise.\n+\t* gcc.dg/tree-ssa/popcount2.c: Likewise.\n+\t* gcc.dg/tree-ssa/popcount3.c: Likewise.\n+\t* gcc.target/aarch64/popcount4.c: Likewise.\n+\t* gcc.target/i386/pr95771.c: Likewise, and...\n+\t* gcc.target/i386/pr95771-2.c: ...split int128 test from above,\n+\tsince this would emit just a single IFN if a TI optab is added.\n+\n+2023-01-16  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* gcc.dg/tree-ssa/cltz-max.c: New test.\n+\t* gcc.dg/tree-ssa/clz-char.c: New test.\n+\t* gcc.dg/tree-ssa/clz-int.c: New test.\n+\t* gcc.dg/tree-ssa/clz-long-long.c: New test.\n+\t* gcc.dg/tree-ssa/clz-long.c: New test.\n+\t* gcc.dg/tree-ssa/ctz-char.c: New test.\n+\t* gcc.dg/tree-ssa/ctz-int.c: New test.\n+\t* gcc.dg/tree-ssa/ctz-long-long.c: New test.\n+\t* gcc.dg/tree-ssa/ctz-long.c: New test.\n+\n+2023-01-16  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_clz)\n+\t(check_effective_target_clzl, check_effective_target_clzll)\n+\t(check_effective_target_ctz, check_effective_target_clzl)\n+\t(check_effective_target_ctzll): New.\n+\t* gcc.dg/tree-ssa/cltz-complement-max.c: New test.\n+\t* gcc.dg/tree-ssa/clz-complement-char.c: New test.\n+\t* gcc.dg/tree-ssa/clz-complement-int.c: New test.\n+\t* gcc.dg/tree-ssa/clz-complement-long-long.c: New test.\n+\t* gcc.dg/tree-ssa/clz-complement-long.c: New test.\n+\t* gcc.dg/tree-ssa/ctz-complement-char.c: New test.\n+\t* gcc.dg/tree-ssa/ctz-complement-int.c: New test.\n+\t* gcc.dg/tree-ssa/ctz-complement-long-long.c: New test.\n+\t* gcc.dg/tree-ssa/ctz-complement-long.c: New test.\n+\n+2023-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105593\n+\t* g++.target/i386/pr105593.C: New test.\n+\n+2023-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/105593\n+\t* c-c++-common/Winit-self3.c: New test.\n+\t* c-c++-common/Winit-self4.c: New test.\n+\t* c-c++-common/Winit-self5.c: New test.\n+\n+2023-01-16  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/108272\n+\t* gcc.target/powerpc/pr108272-1.c: New test.\n+\t* gcc.target/powerpc/pr108272-2.c: New test.\n+\t* gcc.target/powerpc/pr108272-3.c: New test.\n+\t* gcc.target/powerpc/pr108272-4.c: New test.\n+\n 2023-01-14  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \t* gcc.target/aarch64/sve/acle/general/pr96463-2.c: Adjust."}, {"sha": "61d128bba43386ee25e136c2d1de1e592cf3a271", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f457a62e63a86d5e5342eda16538a26355199856/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f457a62e63a86d5e5342eda16538a26355199856/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=f457a62e63a86d5e5342eda16538a26355199856", "patch": "@@ -1,3 +1,8 @@\n+2023-01-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* configure.tgt (config_path) [target_thread_file=single]:\n+\tUse 'mingw' config.\n+\n 2023-01-07  LIU Hao  <lh_mouse@126.com>\n \n \tPR middle-end/108300"}, {"sha": "2cd76f714d8eea1f4a644b38c0e7b20c1a6d597f", "filename": "libcpp/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f457a62e63a86d5e5342eda16538a26355199856/libcpp%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f457a62e63a86d5e5342eda16538a26355199856/libcpp%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpo%2FChangeLog?ref=f457a62e63a86d5e5342eda16538a26355199856", "patch": "@@ -1,3 +1,7 @@\n+2023-01-16  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ka.po: New.\n+\n 2023-01-09  Joseph Myers  <joseph@codesourcery.com>\n \n \t* eo.po: Update."}, {"sha": "01233e9751c315ed80284d7e608529f3b624fa44", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f457a62e63a86d5e5342eda16538a26355199856/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f457a62e63a86d5e5342eda16538a26355199856/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f457a62e63a86d5e5342eda16538a26355199856", "patch": "@@ -1,3 +1,15 @@\n+2023-01-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++20/tzdb.cc (_GLIBCXX_USE_CXX11_ABI): Define to 1.\n+\n+2023-01-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/108413\n+\t* include/c_compatibility/stdatomic.h: Change copyright line to\n+\tbe consistent with other headers contributed under DCO terms.\n+\t* include/std/expected: Add full stop to copyright line.\n+\t* src/c++20/tzdb.cc: Likewise.\n+\n 2023-01-15  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/status_cxx2014.xml: Switch www.open-std.org to"}]}