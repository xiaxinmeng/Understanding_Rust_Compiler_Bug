{"sha": "df4f7565feb1b58b9f2864825dd40bd38d3c6d40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY0Zjc1NjVmZWIxYjU4YjlmMjg2NDgyNWRkNDBiZDM4ZDNjNmQ0MA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-10-23T13:12:09Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-10-23T13:12:09Z"}, "message": "Warning fixes:\n\n        * sparc.h (EXTRA_SPECS): Add missing initializers.\n        (sparc_defer_case_vector): Provide a prototype.\n        * svr4.h (ASM_OUTPUT_ASCII): Cast STRING_LIMIT to (long) when\n        comparing it to the result of a pointer subtraction.\n\nFrom-SVN: r23254", "tree": {"sha": "daed9565f86589d44f90424cc1a1fd599a4e6926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daed9565f86589d44f90424cc1a1fd599a4e6926"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df4f7565feb1b58b9f2864825dd40bd38d3c6d40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4f7565feb1b58b9f2864825dd40bd38d3c6d40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df4f7565feb1b58b9f2864825dd40bd38d3c6d40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4f7565feb1b58b9f2864825dd40bd38d3c6d40/comments", "author": null, "committer": null, "parents": [{"sha": "d1e6b55b7aad1d74979f9ea5c3029340e8e36707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e6b55b7aad1d74979f9ea5c3029340e8e36707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e6b55b7aad1d74979f9ea5c3029340e8e36707"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "a23998aa5c06058ca1a427290a33626e14934a3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4f7565feb1b58b9f2864825dd40bd38d3c6d40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4f7565feb1b58b9f2864825dd40bd38d3c6d40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df4f7565feb1b58b9f2864825dd40bd38d3c6d40", "patch": "@@ -1,3 +1,11 @@\n+Fri Oct 23 16:08:39 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* sparc.h (EXTRA_SPECS): Add missing initializers.\n+\t(sparc_defer_case_vector): Provide a prototype.\n+\n+\t* svr4.h (ASM_OUTPUT_ASCII): Cast STRING_LIMIT to (long) when\n+ \tcomparing it to the result of a pointer subtraction.\n+\n Fri Oct 23 15:34:14 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* alpha.c (override_options): Use ISDIGIT(), not isdigit().  Cast"}, {"sha": "5b50c2eb0be35d6b8e8b972b3b7a34564f007486", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4f7565feb1b58b9f2864825dd40bd38d3c6d40/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4f7565feb1b58b9f2864825dd40bd38d3c6d40/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=df4f7565feb1b58b9f2864825dd40bd38d3c6d40", "patch": "@@ -316,20 +316,20 @@ Unrecognized value in TARGET_CPU_DEFAULT.\n    Do not define this macro if it does not need to do anything.  */\n \n #define EXTRA_SPECS \\\n-  { \"cpp_cpu\",\t\tCPP_CPU_SPEC },\t\t\t\\\n-  { \"cpp_cpu_default\",\tCPP_CPU_DEFAULT_SPEC },\t\t\\\n-  { \"cpp_arch32\",\tCPP_ARCH32_SPEC },\t\t\\\n-  { \"cpp_arch64\",\tCPP_ARCH64_SPEC },\t\t\\\n-  { \"cpp_arch_default\",\tCPP_ARCH_DEFAULT_SPEC },\t\\\n-  { \"cpp_arch\",\t\tCPP_ARCH_SPEC },\t\t\\\n-  { \"cpp_endian\",\tCPP_ENDIAN_SPEC },\t\t\\\n-  { \"cpp_subtarget\",\tCPP_SUBTARGET_SPEC },\t\t\\\n-  { \"asm_cpu\",\t\tASM_CPU_SPEC },\t\t\t\\\n-  { \"asm_cpu_default\",\tASM_CPU_DEFAULT_SPEC },\t\t\\\n-  { \"asm_arch32\",\tASM_ARCH32_SPEC },\t\t\\\n-  { \"asm_arch64\",\tASM_ARCH64_SPEC },\t\t\\\n-  { \"asm_arch_default\",\tASM_ARCH_DEFAULT_SPEC },\t\\\n-  { \"asm_arch\",\t\tASM_ARCH_SPEC },\t\t\\\n+  { \"cpp_cpu\",\t\tCPP_CPU_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_cpu_default\",\tCPP_CPU_DEFAULT_SPEC, 0, 0, 0, 0 },\t\\\n+  { \"cpp_arch32\",\tCPP_ARCH32_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_arch64\",\tCPP_ARCH64_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_arch_default\",\tCPP_ARCH_DEFAULT_SPEC, 0, 0, 0, 0 },\t\\\n+  { \"cpp_arch\",\t\tCPP_ARCH_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_endian\",\tCPP_ENDIAN_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"cpp_subtarget\",\tCPP_SUBTARGET_SPEC, 0, 0, 0, 0 },\t\\\n+  { \"asm_cpu\",\t\tASM_CPU_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"asm_cpu_default\",\tASM_CPU_DEFAULT_SPEC, 0, 0, 0, 0 },\t\\\n+  { \"asm_arch32\",\tASM_ARCH32_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"asm_arch64\",\tASM_ARCH64_SPEC, 0, 0, 0, 0 },\t\t\\\n+  { \"asm_arch_default\",\tASM_ARCH_DEFAULT_SPEC, 0, 0, 0, 0 },\t\\\n+  { \"asm_arch\",\t\tASM_ARCH_SPEC, 0, 0, 0, 0 },\t\t\\\n   SUBTARGET_EXTRA_SPECS\n \n #define SUBTARGET_EXTRA_SPECS\n@@ -3029,6 +3029,7 @@ extern int ultrasparc_variable_issue ();\n \n /* This is how we hook in and defer the case-vector until the end of\n    the function.  */\n+extern void sparc_defer_case_vector ();\n \n #define ASM_OUTPUT_ADDR_VEC(LAB,VEC) \\\n   sparc_defer_case_vector ((LAB),(VEC), 0)"}, {"sha": "1211f680ee302e7b25e4bb3b5dddf9a15d4db484", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df4f7565feb1b58b9f2864825dd40bd38d3c6d40/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df4f7565feb1b58b9f2864825dd40bd38d3c6d40/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=df4f7565feb1b58b9f2864825dd40bd38d3c6d40", "patch": "@@ -950,7 +950,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  for (p = _ascii_bytes; p < limit && *p != '\\0'; p++)\t\t\\\n \t    continue;\t\t\t\t\t\t\t\\\n-\t  if (p < limit && (p - _ascii_bytes) <= STRING_LIMIT)\t\t\\\n+\t  if (p < limit && (p - _ascii_bytes) <= (long)STRING_LIMIT)\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      if (bytes_in_chunk > 0)\t\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\"}]}