{"sha": "7d9425d46b58e69667300331aa55ebddddcceaeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q5NDI1ZDQ2YjU4ZTY5NjY3MzAwMzMxYWE1NWViZGRkZGNjZWFlYg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-12-04T15:02:42Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-12-04T15:02:42Z"}, "message": "[AArch64] Don't allow -mgeneral-regs-only to change the .arch assembler directives\n\n\t* config/aarch64/aarch64.c (aarch64_override_options_internal):\n\tDo not alter target_flags due to TARGET_GENERAL_REGS_ONLY_P.\n\t* doc/invoke.texi (AArch64 options): Mention that -mgeneral-regs-only\n\tdoes not affect the assembler directives.\n\n\t* gcc.target/aarch64/mgeneral-regs_4.c: New test.\n\nFrom-SVN: r231275", "tree": {"sha": "25c1bd2e97d287b8250e979b9d72d011a999bc45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25c1bd2e97d287b8250e979b9d72d011a999bc45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d9425d46b58e69667300331aa55ebddddcceaeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9425d46b58e69667300331aa55ebddddcceaeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9425d46b58e69667300331aa55ebddddcceaeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9425d46b58e69667300331aa55ebddddcceaeb/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d471c90332bb58e3668a5aaeb24640f7d4ca821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d471c90332bb58e3668a5aaeb24640f7d4ca821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d471c90332bb58e3668a5aaeb24640f7d4ca821"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "9390f2b129ed49a0175af5c213f8d99ead097397", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9425d46b58e69667300331aa55ebddddcceaeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9425d46b58e69667300331aa55ebddddcceaeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d9425d46b58e69667300331aa55ebddddcceaeb", "patch": "@@ -1,3 +1,10 @@\n+2015-12-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_override_options_internal):\n+\tDo not alter target_flags due to TARGET_GENERAL_REGS_ONLY_P.\n+\t* doc/invoke.texi (AArch64 options): Mention that -mgeneral-regs-only\n+\tdoes not affect the assembler directives.\n+\n 2015-12-04  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_asm_file_start): Implement hook function to"}, {"sha": "ae4cfb336a827a63a6baadefcb5646a9dbfb7523", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9425d46b58e69667300331aa55ebddddcceaeb/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9425d46b58e69667300331aa55ebddddcceaeb/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7d9425d46b58e69667300331aa55ebddddcceaeb", "patch": "@@ -8118,19 +8118,6 @@ aarch64_override_options_internal (struct gcc_options *opts)\n   if (opts->x_flag_strict_volatile_bitfields < 0 && abi_version_at_least (2))\n     opts->x_flag_strict_volatile_bitfields = 1;\n \n-  /* -mgeneral-regs-only sets a mask in target_flags, make sure that\n-     aarch64_isa_flags does not contain the FP/SIMD/Crypto feature flags\n-     in case some code tries reading aarch64_isa_flags directly to check if\n-     FP is available.  Reuse the aarch64_parse_extension machinery since it\n-     knows how to disable any other flags that fp implies.  */\n-  if (TARGET_GENERAL_REGS_ONLY_P (opts->x_target_flags))\n-    {\n-      /* aarch64_parse_extension takes char* rather than const char* because\n-\t it is usually called from within other parsing functions.  */\n-      char tmp_str[] = \"+nofp\";\n-      aarch64_parse_extension (tmp_str, &opts->x_aarch64_isa_flags);\n-    }\n-\n   initialize_aarch64_code_model (opts);\n   initialize_aarch64_tls_size (opts);\n "}, {"sha": "3138c7d946eab1ceef28ea67110e6d852a451046", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9425d46b58e69667300331aa55ebddddcceaeb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9425d46b58e69667300331aa55ebddddcceaeb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7d9425d46b58e69667300331aa55ebddddcceaeb", "patch": "@@ -12480,10 +12480,9 @@ Generate big-endian code.  This is the default when GCC is configured for an\n \n @item -mgeneral-regs-only\n @opindex mgeneral-regs-only\n-Generate code which uses only the general-purpose registers.  This is equivalent\n-to feature modifier @option{nofp} of @option{-march} or @option{-mcpu}, except\n-that @option{-mgeneral-regs-only} takes precedence over any conflicting feature\n-modifier regardless of sequence.\n+Generate code which uses only the general-purpose registers.  This will prevent\n+the compiler from using floating-point and Advanced SIMD registers but will not\n+impose any restrictions on the assembler.\n \n @item -mlittle-endian\n @opindex mlittle-endian"}, {"sha": "50df41c365fce038823d211b3a41e68117cad93b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9425d46b58e69667300331aa55ebddddcceaeb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9425d46b58e69667300331aa55ebddddcceaeb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d9425d46b58e69667300331aa55ebddddcceaeb", "patch": "@@ -1,3 +1,7 @@\n+2015-12-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/mgeneral-regs_4.c: New test.\n+\n 2015-12-04  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* gcc.dg/Wframe-address.c: S/390 requires the -mbackchain option to"}, {"sha": "8eb50aafa2b71fe936c1113b80b55e10f80f9721", "filename": "gcc/testsuite/gcc.target/aarch64/mgeneral-regs_4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9425d46b58e69667300331aa55ebddddcceaeb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9425d46b58e69667300331aa55ebddddcceaeb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmgeneral-regs_4.c?ref=7d9425d46b58e69667300331aa55ebddddcceaeb", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-options \"-mgeneral-regs-only -march=armv8-a+simd+fp -O2\" } */\n+\n+int\n+test (void)\n+{\n+  return 1;\n+}\n+\n+/* { dg-final { scan-assembler \"\\.arch.*fp.*simd\" } } */"}]}