{"sha": "f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2", "node_id": "C_kwDOANBUbNoAKGY0ZWQyZTNhZTdkOWQ1OWIwZTQ2Yjg2NDhlOTgyMTY1NGM0N2UwYTI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-27T00:16:19Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-27T00:16:19Z"}, "message": "Daily bump.", "tree": {"sha": "a1ce88df839bbd32ba447b83c2e4d1774ad93908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1ce88df839bbd32ba447b83c2e4d1774ad93908"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/comments", "author": null, "committer": null, "parents": [{"sha": "9e2e47391b316493b52fbb47b4b992b0863795dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2e47391b316493b52fbb47b4b992b0863795dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2e47391b316493b52fbb47b4b992b0863795dd"}], "stats": {"total": 222, "additions": 221, "deletions": 1}, "files": [{"sha": "e1e381e19058dfa4b4d42100eceb5e81023b368b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2", "patch": "@@ -1,3 +1,74 @@\n+2021-11-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/103441\n+\t* ipa-prop.c (ipcp_transform_function): Call\n+\tdelete_unreachable_blocks_update_callgraph instead of returning\n+\tTODO_cleanup_cfg.\n+\n+2021-11-26  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* tree-object-size.c (object_sizes_grow, object_sizes_release,\n+\tobject_sizes_unknown_p, object_sizes_get, object_size_set_force,\n+\tobject_sizes_set): New functions.\n+\t(addr_object_size, compute_builtin_object_size,\n+\texpr_object_size, call_object_size, unknown_object_size,\n+\tmerge_object_sizes, plus_stmt_object_size,\n+\tcond_expr_object_size, collect_object_sizes_for,\n+\tcheck_for_plus_in_loops_1, init_object_sizes,\n+\tfini_object_sizes): Adjust.\n+\n+2021-11-26  Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\t* tree-object-size.c: New enum.\n+\t(object_sizes, computed, addr_object_size,\n+\tcompute_builtin_object_size, expr_object_size, call_object_size,\n+\tmerge_object_sizes, plus_stmt_object_size,\n+\tcollect_object_sizes_for, init_object_sizes, fini_object_sizes,\n+\tobject_sizes_execute): Replace magic numbers with enums.\n+\n+2021-11-26  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* tree-ssa-loop-ivopts.c (cand_value_at): Take a class\n+\ttree_niter_desc* argument instead of just a tree for NITER.\n+\tIf we require the iv candidate value at the end of the final\n+\tloop iteration, try using the original loop bound as the\n+\tNITER for sufficiently simple loops.\n+\t(may_eliminate_iv): Update (only) call to cand_value_at.\n+\n+2021-11-26  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-modref.c (analyze_function): Drop parameter F and dump\n+\tcgraph node name rather than cfun name.\n+\t(modref_generate): Update.\n+\t(modref_summaries::insert):Update.\n+\t(modref_summaries_lto::insert):Update.\n+\t(pass_modref::execute):Update.\n+\t(ipa_merge_modref_summary_after_inlining): Improve combining of\n+\tECF_FLAGS.\n+\n+2021-11-26  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/102943\n+\t* ipa-modref.c (update_escape_summary_1): Fix handling of min_flags.\n+\n+2021-11-26  konglin1  <lingling.kong@intel.com>\n+\n+\tPR target/102811\n+\t* config/i386/i386.c (ix86_can_change_mode_class): Allow 16 bit data in XMM register\n+\tfor TARGET_SSE2.\n+\t* config/i386/i386.md (extendhfsf2): Add extenndhfsf2 for TARGET_F16C.\n+\t(extendhfdf2): Restrict extendhfdf for TARGET_AVX512FP16 only.\n+\t(*extendhf<mode>2): Rename from extendhf<mode>2.\n+\t(truncsfhf2): Likewise.\n+\t(truncdfhf2): Likewise.\n+\t(*trunc<mode>2): Likewise.\n+\n+2021-11-26  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR middle-end/103419\n+\t* match.pd: Fix typo, use the type of second parameter, not\n+\tfirst one.\n+\n 2021-11-25  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-cp.c (ipa_value_range_from_jfunc): Remove forgotten early return."}, {"sha": "22f794c7a9cd8af07e469a51179b4a6f002e6c9d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2", "patch": "@@ -1 +1 @@\n-20211126\n+20211127"}, {"sha": "f1995bd337677777bd3fdfb6aa8b967172bef687", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2", "patch": "@@ -1,3 +1,29 @@\n+2021-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102753\n+\t* cp-tree.h (struct ptrmem_cst): Add locus member.\n+\t(PTRMEM_CST_LOCATION): Define.\n+\t* tree.c (make_ptrmem_cst): Set PTRMEM_CST_LOCATION to input_location.\n+\t(cp_expr_location): Return PTRMEM_CST_LOCATION for PTRMEM_CST.\n+\t* typeck.c (build_x_unary_op): Overwrite PTRMEM_CST_LOCATION for\n+\tPTRMEM_CST instead of calling maybe_wrap_with_location.\n+\t(cp_build_addr_expr_1): Don't diagnose taking address of\n+\timmediate functions here.  Instead when taking their address make\n+\tsure the returned ADDR_EXPR has EXPR_LOCATION set.\n+\t(expand_ptrmemfunc_cst): Copy over PTRMEM_CST_LOCATION to ADDR_EXPR's\n+\tEXPR_LOCATION.\n+\t(convert_for_assignment): Use cp_expr_loc_or_input_loc instead of\n+\tEXPR_LOC_OR_LOC.\n+\t* pt.c (tsubst_copy): Use build1_loc instead of build1.  Ensure\n+\tADDR_EXPR of immediate function has EXPR_LOCATION set.\n+\t* cp-gimplify.c (cp_fold_r): Diagnose taking address of immediate\n+\tfunctions here.  For consteval if don't walk THEN_CLAUSE.\n+\t(cp_genericize_r): Move evaluation of calls to\n+\tstd::source_location::current from here to...\n+\t(cp_fold): ... here.  Don't assert calls to immediate functions must\n+\tbe source_location_current_p, instead only constant evaluate\n+\tcalls to source_location_current_p.\n+\n 2021-11-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/101180"}, {"sha": "999f25479afef7e8f67c32c480e9787bf890d552", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2", "patch": "@@ -1,3 +1,8 @@\n+2021-11-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* d-attribs.cc (parse_optimize_options): Check index before\n+\taccessing cl_options.\n+\n 2021-11-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* decl.cc (d_finish_decl): Use HOST_WIDE_INT for type size"}, {"sha": "3dffc500ec81e56913863b8dd460547b60e13333", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2", "patch": "@@ -1,3 +1,11 @@\n+2021-11-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103411\n+\t* check.c (gfc_check_reshape): Improve check of size of source\n+\tarray for the RESHAPE intrinsic against the given shape when pad\n+\tis not given, and shape is a parameter.  Try other simplifications\n+\tof shape.\n+\n 2021-11-23  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/103392"}, {"sha": "182c649b67e7e1646a52b358fed055a16a3de99f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2", "patch": "@@ -1,3 +1,38 @@\n+2021-11-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103411\n+\t* gfortran.dg/pr68153.f90: Adjust test to improved check.\n+\t* gfortran.dg/reshape_7.f90: Likewise.\n+\t* gfortran.dg/reshape_9.f90: New test.\n+\n+2021-11-26  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.dg/wrapped-binop-simplify.c: Update expected test result.\n+\t* gcc.dg/tree-ssa/ivopts-5.c: New test case.\n+\t* gcc.dg/tree-ssa/ivopts-6.c: New test case.\n+\t* gcc.dg/tree-ssa/ivopts-7.c: New test case.\n+\t* gcc.dg/tree-ssa/ivopts-8.c: New test case.\n+\t* gcc.dg/tree-ssa/ivopts-9.c: New test case.\n+\n+2021-11-26  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.dg/ipa/inline-9.c: Update template.c\n+\n+2021-11-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/102753\n+\t* g++.dg/cpp2a/consteval20.C: Add some extra tests.\n+\t* g++.dg/cpp2a/consteval23.C: Likewise.\n+\t* g++.dg/cpp2a/consteval25.C: New test.\n+\t* g++.dg/cpp2a/srcloc20.C: New test.\n+\n+2021-11-26  konglin1  <lingling.kong@intel.com>\n+\n+\tPR target/102811\n+\t* gcc.target/i386/pr90773-21.c: Allow pextrw instead of movw.\n+\t* gcc.target/i386/pr90773-23.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vcvtps2ph-pr102811.c: New test.\n+\n 2021-11-25  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/ipa/inline10.c: New test."}, {"sha": "95b0d7d9e64a2dad9fbf01d248f3301ad2f1cc97", "filename": "libitm/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2", "patch": "@@ -1,3 +1,9 @@\n+2021-11-26  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* eh_cpp.cc (GTM::gtm_thread::init_cpp_exceptions): If the\n+\ttarget does not support HAVE_ELF_STYLE_WEAKREF then do not\n+\ttry to test the __cxa_get_globals against NULL.\n+\n 2021-06-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/91488"}, {"sha": "19e8e45fc710c20e1d0c505d99936530c0da58e7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f4ed2e3ae7d9d59b0e46b8648e9821654c47e0a2", "patch": "@@ -1,3 +1,72 @@\n+2021-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/24_iterators/move_iterator/dr3265.cc: Fix test to\n+\taccount for LWG 3435 resolution.\n+\n+2021-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_uninitialized.h (__relocate_a_1): Do not use\n+\tmemmove during constant evaluation.\n+\t* include/bits/stl_vector.h (vector::_S_use_relocate()): Do not\n+\tcheck is_constant_evaluated in always-constexpr function.\n+\n+2021-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96592\n+\t* include/std/tuple (tuple::is_constructible): Remove.\n+\n+2021-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/29_atomics/atomic_float/1.cc: Reorder directives.\n+\n+2021-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/unordered_map/modifiers/move_assign.cc:\n+\tChange dg-do compile to run.\n+\t* testsuite/27_io/basic_istream/extractors_character/wchar_t/lwg2499.cc:\n+\tLikewise.\n+\n+2021-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string_view/element_access/char/back_constexpr_neg.cc:\n+\tRemove xfail selector.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/constexpr_neg.cc:\n+\tLikewise.\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/char/front_constexpr_neg.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/back_constexpr_neg.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/constexpr_neg.cc:\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string_view/element_access/wchar_t/front_constexpr_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/span/101411.cc: Likewise.\n+\t* testsuite/25_algorithms/copy/debug/constexpr_neg.cc: Likewise.\n+\t* testsuite/25_algorithms/copy_backward/debug/constexpr_neg.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/equal/constexpr_neg.cc: Likewise.\n+\t* testsuite/25_algorithms/equal/debug/constexpr_neg.cc: Likewise.\n+\t* testsuite/25_algorithms/lower_bound/debug/constexpr_partitioned_neg.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/lower_bound/debug/constexpr_partitioned_pred_neg.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/lower_bound/debug/constexpr_valid_range_neg.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/upper_bound/debug/constexpr_partitioned_neg.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/upper_bound/debug/constexpr_partitioned_pred_neg.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/upper_bound/debug/constexpr_valid_range_neg.cc:\n+\tLikewise.\n+\n+2021-11-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/pointer_traits/lwg3545.cc: Move to_address\n+\ttests to ...\n+\t* testsuite/20_util/to_address/lwg3545.cc: ... here. Add -std\n+\toption before checking effective target.\n+\n 2021-11-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/20_util/tuple/comparison_operators/overloaded2.cc:"}]}