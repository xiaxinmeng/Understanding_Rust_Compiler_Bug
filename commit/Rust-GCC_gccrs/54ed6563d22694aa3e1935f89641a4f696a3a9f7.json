{"sha": "54ed6563d22694aa3e1935f89641a4f696a3a9f7", "node_id": "C_kwDOANBUbNoAKDU0ZWQ2NTYzZDIyNjk0YWEzZTE5MzVmODk2NDFhNGY2OTZhM2E5Zjc", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-06T11:46:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-04-07T06:17:05Z"}, "message": "middle-end/105165 - sorry instead of ICE for _Complex asm goto\n\nComplex lowering cannot currently deal with asm gotos with _Complex\noutput operands.  Emit a sorry instead of ICEing, those should not\nappear in practice.\n\n2022-04-06  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/105165\n\t* tree-complex.cc (expand_complex_asm): Sorry for asm goto\n\t_Complex outputs.\n\n\t* gcc.dg/pr105165.c: New testcase.", "tree": {"sha": "1dc0175e24fb076842a130ed1524974e860d1711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dc0175e24fb076842a130ed1524974e860d1711"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54ed6563d22694aa3e1935f89641a4f696a3a9f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ed6563d22694aa3e1935f89641a4f696a3a9f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ed6563d22694aa3e1935f89641a4f696a3a9f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ed6563d22694aa3e1935f89641a4f696a3a9f7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "176df4ccb58689aae29511b99d60a448558ede94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/176df4ccb58689aae29511b99d60a448558ede94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/176df4ccb58689aae29511b99d60a448558ede94"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "055a10528b5cb384f07b6a7c17e5916137775d52", "filename": "gcc/testsuite/gcc.dg/pr105165.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ed6563d22694aa3e1935f89641a4f696a3a9f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105165.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ed6563d22694aa3e1935f89641a4f696a3a9f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105165.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105165.c?ref=54ed6563d22694aa3e1935f89641a4f696a3a9f7", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+unsigned int _Complex a0;\n+unsigned int _Complex\n+foo (unsigned int _Complex a1, unsigned int _Complex a2)\n+{\n+  unsigned int _Complex x;\n+  asm goto (\"\" : \"=r\" (x) : : : lab); /* { dg-message \"sorry, unimplemented\" } */\n+  a0 = x;\n+ lab:\n+  return x + a1 + a2 + 1;\n+}"}, {"sha": "42db96a132b1c189401f13f6ac4c46707bdef2cd", "filename": "gcc/tree-complex.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ed6563d22694aa3e1935f89641a4f696a3a9f7/gcc%2Ftree-complex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ed6563d22694aa3e1935f89641a4f696a3a9f7/gcc%2Ftree-complex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.cc?ref=54ed6563d22694aa3e1935f89641a4f696a3a9f7", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"cfganal.h\"\n #include \"gimple-fold.h\"\n+#include \"diagnostic-core.h\"\n \n \n /* For each complex ssa name, a lattice value.  We're interested in finding\n@@ -1614,6 +1615,7 @@ expand_complex_asm (gimple_stmt_iterator *gsi)\n {\n   gasm *stmt = as_a <gasm *> (gsi_stmt (*gsi));\n   unsigned int i;\n+  bool diagnosed_p = false;\n \n   for (i = 0; i < gimple_asm_noutputs (stmt); ++i)\n     {\n@@ -1622,6 +1624,20 @@ expand_complex_asm (gimple_stmt_iterator *gsi)\n       if (TREE_CODE (op) == SSA_NAME\n \t  && TREE_CODE (TREE_TYPE (op)) == COMPLEX_TYPE)\n \t{\n+\t  if (gimple_asm_nlabels (stmt) > 0)\n+\t    {\n+\t      if (!diagnosed_p)\n+\t\t{\n+\t\t  sorry_at (gimple_location (stmt),\n+\t\t\t    \"%<asm goto%> with complex typed outputs\");\n+\t\t  diagnosed_p = true;\n+\t\t}\n+\t      /* Make sure to not ICE later, see PR105165.  */\n+\t      tree zero = build_zero_cst (TREE_TYPE (TREE_TYPE (op)));\n+\t      set_component_ssa_name (op, false, zero);\n+\t      set_component_ssa_name (op, true, zero);\n+\t      continue;\n+\t    }\n \t  tree type = TREE_TYPE (op);\n \t  tree inner_type = TREE_TYPE (type);\n \t  tree r = build1 (REALPART_EXPR, inner_type, op);"}]}