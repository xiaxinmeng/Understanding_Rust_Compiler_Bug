{"sha": "2dae9809eeaf144a5165cdfe706dd29ee156eead", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRhZTk4MDllZWFmMTQ0YTUxNjVjZGZlNzA2ZGQyOWVlMTU2ZWVhZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-05T14:12:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-05T14:12:08Z"}, "message": "(sel_get_typed_uid, sel_get_any_typed_uid): Likewise.\n\n(sel_get_any_uid, sel_get_name, sel_register_name): Likewise.\n(sel_register_typed_name): Likewise.\n\nFrom-SVN: r11447", "tree": {"sha": "92d7d402d73ac702d07ee4f94e1ee44aa2acef71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92d7d402d73ac702d07ee4f94e1ee44aa2acef71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dae9809eeaf144a5165cdfe706dd29ee156eead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dae9809eeaf144a5165cdfe706dd29ee156eead", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dae9809eeaf144a5165cdfe706dd29ee156eead", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dae9809eeaf144a5165cdfe706dd29ee156eead/comments", "author": null, "committer": null, "parents": [{"sha": "9f269265215526a5ed88dc26531b5de72e234777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f269265215526a5ed88dc26531b5de72e234777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f269265215526a5ed88dc26531b5de72e234777"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "c089d006dec629f9c0a71a8414e3e08ec53207d1", "filename": "gcc/objc/selector.c", "status": "modified", "additions": 56, "deletions": 14, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dae9809eeaf144a5165cdfe706dd29ee156eead/gcc%2Fobjc%2Fselector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dae9809eeaf144a5165cdfe706dd29ee156eead/gcc%2Fobjc%2Fselector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fselector.c?ref=2dae9809eeaf144a5165cdfe706dd29ee156eead", "patch": "@@ -1,5 +1,5 @@\n /* GNU Objective C Runtime selector related functions\n-   Copyright (C) 1993, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1996 Free Software Foundation, Inc.\n    Contributed by Kresten Krab Thorup\n \n This file is part of GNU CC.\n@@ -31,14 +31,14 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #define SELECTOR_HASH_SIZE 128\n \n /* Tables mapping selector names to uid and opposite */\n-static struct sarray* __objc_selector_array = 0; /* uid -> sel */\n-static struct sarray* __objc_selector_names = 0; /* uid -> name */\n-static cache_ptr      __objc_selector_hash  = 0; /* name -> uid */\n+static struct sarray* __objc_selector_array = 0; /* uid -> sel  !T:MUTEX */\n+static struct sarray* __objc_selector_names = 0; /* uid -> name !T:MUTEX */\n+static cache_ptr      __objc_selector_hash  = 0; /* name -> uid !T:MUTEX */\n \n static void register_selectors_from_list(MethodList_t);\n \n /* Number of selectors stored in each of the above tables */\n-int __objc_selector_max_index = 0;\n+int __objc_selector_max_index = 0;              /* !T:MUTEX */\n \n void __objc_init_selector_tables()\n {\n@@ -122,9 +122,14 @@ sel_get_typed_uid (const char *name, const char *types)\n   struct objc_list *l;\n   sidx i;\n \n+  objc_mutex_lock(__objc_runtime_mutex);\n+\n   i = (sidx) hash_value_for_key (__objc_selector_hash, name);\n   if (i == 0)\n-    return 0;\n+    {\n+      objc_mutex_unlock(__objc_runtime_mutex);\n+      return 0;\n+    }\n \n   for (l = (struct objc_list*)sarray_get (__objc_selector_array, i);\n        l; l = l->tail)\n@@ -134,15 +139,18 @@ sel_get_typed_uid (const char *name, const char *types)\n \t{\n \t  if (s->sel_types == types)\n \t    {\n+\t      objc_mutex_unlock(__objc_runtime_mutex);\n \t      return s;\n \t    }\n \t}\n       else if (sel_types_match (s->sel_types, types))\n \t{\n+\t  objc_mutex_unlock(__objc_runtime_mutex);\n \t  return s;\n \t}\n     }\n \n+  objc_mutex_unlock(__objc_runtime_mutex);\n   return 0;\n }\n \n@@ -154,18 +162,27 @@ sel_get_any_typed_uid (const char *name)\n   sidx i;\n   SEL s;\n \n+  objc_mutex_lock(__objc_runtime_mutex);\n+\n   i = (sidx) hash_value_for_key (__objc_selector_hash, name);\n   if (i == 0)\n-    return 0;\n+    {\n+      objc_mutex_unlock(__objc_runtime_mutex);\n+      return 0;\n+    }\n \n   for (l = (struct objc_list*)sarray_get (__objc_selector_array, i);\n        l; l = l->tail)\n     {\n       s = (SEL) l->head;\n       if (s->sel_types)\n-\treturn s;\n+\t{\n+\t    objc_mutex_unlock(__objc_runtime_mutex);\n+\t    return s;\n+\t}\n     }\n \n+  objc_mutex_unlock(__objc_runtime_mutex);\n   return s;\n }\n \n@@ -176,11 +193,18 @@ sel_get_any_uid (const char *name)\n   struct objc_list *l;\n   sidx i;\n \n+  objc_mutex_lock(__objc_runtime_mutex);\n+\n   i = (sidx) hash_value_for_key (__objc_selector_hash, name);\n   if (soffset_decode (i) == 0)\n-    return 0;\n+    {\n+      objc_mutex_unlock(__objc_runtime_mutex);\n+      return 0;\n+    }\n \n   l = (struct objc_list*)sarray_get (__objc_selector_array, i);\n+  objc_mutex_unlock(__objc_runtime_mutex);\n+\n   if (l == 0)\n     return 0;\n \n@@ -199,11 +223,16 @@ sel_get_uid (const char *name)\n const char*\n sel_get_name (SEL selector)\n {\n+  const char *ret;\n+\n+  objc_mutex_lock(__objc_runtime_mutex);\n   if ((soffset_decode((sidx)selector->sel_id) > 0)\n       && (soffset_decode((sidx)selector->sel_id) <= __objc_selector_max_index))\n-    return sarray_get (__objc_selector_names, (sidx) selector->sel_id);\n+    ret = sarray_get (__objc_selector_names, (sidx) selector->sel_id);\n   else\n-    return 0;\n+    ret = 0;\n+  objc_mutex_unlock(__objc_runtime_mutex);\n+  return ret;\n }\n \n BOOL\n@@ -227,7 +256,8 @@ sel_get_type (SEL selector)\n extern struct sarray* __objc_uninstalled_dtable;\n \n /* Store the passed selector name in the selector record and return its\n-   selector value (value returned by sel_get_uid). */\n+   selector value (value returned by sel_get_uid).\n+   Assumes that the calling function has locked down __objc_runtime_mutex. */\n SEL\n __sel_register_typed_name (const char *name, const char *types, \n \t\t\t   struct objc_selector *orig)\n@@ -310,12 +340,24 @@ __sel_register_typed_name (const char *name, const char *types,\n SEL\n sel_register_name (const char *name)\n {\n-  return __sel_register_typed_name (name, 0, 0);\n+  SEL ret;\n+    \n+  objc_mutex_lock(__objc_runtime_mutex);\n+  ret = __sel_register_typed_name (name, 0, 0);\n+  objc_mutex_unlock(__objc_runtime_mutex);\n+  \n+  return ret;\n }\n \n SEL\n sel_register_typed_name (const char *name, const char *type)\n {\n-  return __sel_register_typed_name (name, type, 0);\n+  SEL ret;\n+    \n+  objc_mutex_lock(__objc_runtime_mutex);\n+  ret = __sel_register_typed_name (name, type, 0);\n+  objc_mutex_unlock(__objc_runtime_mutex);\n+  \n+  return ret;\n }\n "}]}