{"sha": "b51ee78c5d021aacc3acb13cd3eba2c301ec26e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUxZWU3OGM1ZDAyMWFhY2MzYWNiMTNjZDNlYmEyYzMwMWVjMjZlNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-03-22T21:52:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-22T21:52:13Z"}, "message": "re PR tree-optimization/80072 (ICE in gimple_build_assign_1 with -O3 -march=broadwell/skylake-avx512)\n\n\tPR tree-optimization/80072\n\t* tree-ssa-reassoc.c (struct operand_entry): Change id field type\n\tto unsigned int.\n\t(next_operand_entry_id): Change type to unsigned int.\n\t(sort_by_operand_rank): Make sure to return the right return value\n\teven if unsigned fields are bigger than INT_MAX.\n\t(struct oecount): Change cnt and id type to unsigned int.\n\t(oecount_hasher::equal): Formatting fix.\n\t(oecount_cmp): Make sure to return the right return value\n\teven if unsigned fields are bigger than INT_MAX.\n\t(undistribute_ops_list): Change next_oecount_id type to unsigned int.\n\nFrom-SVN: r246408", "tree": {"sha": "51f412da10bdf371dd582de0d1a39009a04bdda0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51f412da10bdf371dd582de0d1a39009a04bdda0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b51ee78c5d021aacc3acb13cd3eba2c301ec26e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b51ee78c5d021aacc3acb13cd3eba2c301ec26e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b51ee78c5d021aacc3acb13cd3eba2c301ec26e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b51ee78c5d021aacc3acb13cd3eba2c301ec26e5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36c1cf710de19ec2556fedf49a6ebfa4758e404f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c1cf710de19ec2556fedf49a6ebfa4758e404f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36c1cf710de19ec2556fedf49a6ebfa4758e404f"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "205de5cb24bd4c711096efbfcacc8efa83dee21b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b51ee78c5d021aacc3acb13cd3eba2c301ec26e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b51ee78c5d021aacc3acb13cd3eba2c301ec26e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b51ee78c5d021aacc3acb13cd3eba2c301ec26e5", "patch": "@@ -1,5 +1,17 @@\n 2017-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/80072\n+\t* tree-ssa-reassoc.c (struct operand_entry): Change id field type\n+\tto unsigned int.\n+\t(next_operand_entry_id): Change type to unsigned int.\n+\t(sort_by_operand_rank): Make sure to return the right return value\n+\teven if unsigned fields are bigger than INT_MAX.\n+\t(struct oecount): Change cnt and id type to unsigned int.\n+\t(oecount_hasher::equal): Formatting fix.\n+\t(oecount_cmp): Make sure to return the right return value\n+\teven if unsigned fields are bigger than INT_MAX.\n+\t(undistribute_ops_list): Change next_oecount_id type to unsigned int.\n+\n \tPR c++/80129\n \t* gimplify.c (gimplify_modify_expr_rhs) <case COND_EXPR>: Clear\n \tTREE_READONLY on result if writing it more than once."}, {"sha": "9c39bb81aa68c5393ed92645de601ee87129fa65", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b51ee78c5d021aacc3acb13cd3eba2c301ec26e5/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b51ee78c5d021aacc3acb13cd3eba2c301ec26e5/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=b51ee78c5d021aacc3acb13cd3eba2c301ec26e5", "patch": "@@ -193,7 +193,7 @@ static struct\n struct operand_entry\n {\n   unsigned int rank;\n-  int id;\n+  unsigned int id;\n   tree op;\n   unsigned int count;\n   gimple *stmt_to_insert;\n@@ -204,7 +204,7 @@ static object_allocator<operand_entry> operand_entry_pool\n \n /* This is used to assign a unique ID to each struct operand_entry\n    so that qsort results are identical on different hosts.  */\n-static int next_operand_entry_id;\n+static unsigned int next_operand_entry_id;\n \n /* Starting rank number for a given basic block, so that we can rank\n    operations using unmovable instructions in that BB based on the bb\n@@ -505,12 +505,12 @@ sort_by_operand_rank (const void *pa, const void *pb)\n       else\n \t/* To make sorting result stable, we use unique IDs to determine\n \t   order.  */\n-        return oeb->id - oea->id;\n+\treturn oeb->id > oea->id ? 1 : -1;\n     }\n \n   /* Lastly, make sure the versions that are the same go next to each\n      other.  */\n-  if ((oeb->rank - oea->rank == 0)\n+  if (oeb->rank == oea->rank\n       && TREE_CODE (oea->op) == SSA_NAME\n       && TREE_CODE (oeb->op) == SSA_NAME)\n     {\n@@ -543,15 +543,15 @@ sort_by_operand_rank (const void *pa, const void *pb)\n \t}\n \n       if (SSA_NAME_VERSION (oeb->op) != SSA_NAME_VERSION (oea->op))\n-\treturn SSA_NAME_VERSION (oeb->op) - SSA_NAME_VERSION (oea->op);\n+\treturn SSA_NAME_VERSION (oeb->op) > SSA_NAME_VERSION (oea->op) ? 1 : -1;\n       else\n-\treturn oeb->id - oea->id;\n+\treturn oeb->id > oea->id ? 1 : -1;\n     }\n \n   if (oeb->rank != oea->rank)\n-    return oeb->rank - oea->rank;\n+    return oeb->rank > oea->rank ? 1 : -1;\n   else\n-    return oeb->id - oea->id;\n+    return oeb->id > oea->id ? 1 : -1;\n }\n \n /* Add an operand entry to *OPS for the tree operand OP.  */\n@@ -1055,8 +1055,8 @@ static void linearize_expr_tree (vec<operand_entry *> *, gimple *,\n \n /* Structure for tracking and counting operands.  */\n struct oecount {\n-  int cnt;\n-  int id;\n+  unsigned int cnt;\n+  unsigned int id;\n   enum tree_code oecode;\n   tree op;\n };\n@@ -1090,8 +1090,7 @@ oecount_hasher::equal (int p1, int p2)\n {\n   const oecount *c1 = &cvec[p1 - 42];\n   const oecount *c2 = &cvec[p2 - 42];\n-  return (c1->oecode == c2->oecode\n-\t  && c1->op == c2->op);\n+  return c1->oecode == c2->oecode && c1->op == c2->op;\n }\n \n /* Comparison function for qsort sorting oecount elements by count.  */\n@@ -1102,10 +1101,10 @@ oecount_cmp (const void *p1, const void *p2)\n   const oecount *c1 = (const oecount *)p1;\n   const oecount *c2 = (const oecount *)p2;\n   if (c1->cnt != c2->cnt)\n-    return c1->cnt - c2->cnt;\n+    return c1->cnt > c2->cnt ? 1 : -1;\n   else\n     /* If counts are identical, use unique IDs to stabilize qsort.  */\n-    return c1->id - c2->id;\n+    return c1->id > c2->id ? 1 : -1;\n }\n \n /* Return TRUE iff STMT represents a builtin call that raises OP\n@@ -1559,7 +1558,7 @@ undistribute_ops_list (enum tree_code opcode,\n   sbitmap_iterator sbi0;\n   vec<operand_entry *> *subops;\n   bool changed = false;\n-  int next_oecount_id = 0;\n+  unsigned int next_oecount_id = 0;\n \n   if (length <= 1\n       || opcode != PLUS_EXPR)"}]}