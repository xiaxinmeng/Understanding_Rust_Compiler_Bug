{"sha": "17e7554f421ad5c7246e6b051118afb0b1662c65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdlNzU1NGY0MjFhZDVjNzI0NmU2YjA1MTExOGFmYjBiMTY2MmM2NQ==", "commit": {"author": {"name": "Felix Natter", "email": "f.natter@ndh.net", "date": "2001-06-26T16:10:04Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-06-26T16:10:04Z"}, "message": "porting-howto.html: Fixed some errors.\n\n2001-06-26  Felix Natter  <f.natter@ndh.net>\n\n\t* docs/html/17_intro/porting-howto.html:  Fixed some errors.\n\nFrom-SVN: r43582", "tree": {"sha": "4b4facfe78008a7d334cb8e13722d1214598bd15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b4facfe78008a7d334cb8e13722d1214598bd15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17e7554f421ad5c7246e6b051118afb0b1662c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e7554f421ad5c7246e6b051118afb0b1662c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17e7554f421ad5c7246e6b051118afb0b1662c65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e7554f421ad5c7246e6b051118afb0b1662c65/comments", "author": null, "committer": null, "parents": [{"sha": "f68fc4db625bf32c800bbc49e1b62fd736b78090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68fc4db625bf32c800bbc49e1b62fd736b78090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f68fc4db625bf32c800bbc49e1b62fd736b78090"}], "stats": {"total": 1523, "additions": 801, "deletions": 722}, "files": [{"sha": "d540fbff729d149f1051ae52a510e7fc56147121", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e7554f421ad5c7246e6b051118afb0b1662c65/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e7554f421ad5c7246e6b051118afb0b1662c65/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=17e7554f421ad5c7246e6b051118afb0b1662c65", "patch": "@@ -1,3 +1,7 @@\n+2001-06-26  Felix Natter  <f.natter@ndh.net>\n+\n+\t* docs/html/17_intro/porting-howto.html:  Fixed some errors.\n+\n 2001-06-26  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/stl_iterator.h (istream_iterator::operator->): Fix"}, {"sha": "cb1160fbdad472159eed73e35fe307832267e620", "filename": "libstdc++-v3/docs/html/17_intro/porting-howto.html", "status": "modified", "additions": 797, "deletions": 722, "changes": 1519, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e7554f421ad5c7246e6b051118afb0b1662c65/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e7554f421ad5c7246e6b051118afb0b1662c65/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.html?ref=17e7554f421ad5c7246e6b051118afb0b1662c65", "patch": "@@ -1,726 +1,801 @@\n+<!DOCTYPE HTML PUBLIC \"http://www.w3.org/TR/REC-html40/loose.dtd\" \"-//W3C//DTD HTML 4.0 Transitional//EN\">\n <html>\n-  <head>\n-    <title>Libstdc++-porting-howto</title>\n-    <meta content=\"DocBook XSL Stylesheets V1.16\" name=\"generator\">\n-  </head>\n-  <body bgcolor=\"white\" text=\"black\" link=\"#0000FF\" vlink=\"#840084\" alink=\"#0000FF\">\n-    <div class=\"article\" id=\"libstdporting\">\n-      <div class=\"titlepage\">\n-        <h1 class=\"title\">\n-          <a name=\"libstdporting\">Libstdc++-porting-howto</a>\n-        </h1>\n-        <h3 class=\"author\">Felix Natter</h3>\n-        <p>\n-\t\tThis document can be distributed under the FDL\n-\t\t(<a href=\"http://www.gnu.org\">www.gnu.org</a>)\n-\t  </p>\n-        <p class=\"pubdate\">what kind of a date ? I don't drink !</p>\n-        <div class=\"revhistory\">\n-          <table width=\"100%\" border=\"1\">\n-            <tr>\n-              <th colspan=\"3\" valign=\"top\" align=\"left\"><b>Revision History</b></th>\n-            </tr>\n-            <tr>\n-              <td align=\"left\">Revision 0.5</td><td align=\"left\">Thu Jun  1 13:06:50 2000</td><td align=\"left\">fnatter</td>\n-            </tr>\n-            <tr>\n-              <td colspan=\"3\" align=\"left\">First docbook-version.</td>\n-            </tr>\n-            <tr>\n-              <td align=\"left\">Revision 0.8</td><td align=\"left\">Sun Jul 30 20:28:40 2000</td><td align=\"left\">fnatter</td>\n-            </tr>\n-            <tr>\n-              <td colspan=\"3\" align=\"left\">First released version using docbook-xml\n-\t\t  + second upload to libstdc++-page.\n-\t\t</td>\n-            </tr>\n-            <tr>\n-              <td align=\"left\">Revision 0.9</td><td align=\"left\">Wed Sep  6 02:59:32 2000</td><td align=\"left\">fnatter</td>\n-            </tr>\n-            <tr>\n-              <td colspan=\"3\" align=\"left\">5 new sections.</td>\n-            </tr>\n-          </table>\n-        </div>\n-        <div class=\"abstract\">\n-          <p>\n-            <a name=\"N2688\"></a><b>Abstract</b>\n-          </p>\n-          <p>\n-\t\tSome notes on porting applications from libstdc++-2.90 (or earlier\n-\t\tversions) to libstdc++-v3. Not speaking in terms of the GNU libstdc++\n-\t\timplementations, this means porting from earlier versions of the\n-\t\tC++-Standard to ISO 14882.\n-\t  </p>\n-        </div>\n-        <hr>\n-      </div>\n-      <div class=\"toc\">\n-        <p>\n-          <b>Table of Contents</b>\n-        </p>\n-        <dl>\n-          <dt>1. <a href=\"#sec-nsstd\">Namespace std::</a>\n-          </dt>\n-          <dd>\n-            <dl>\n-              <dt>1.1.1. <a href=\"#sec-gtkmm-hack\">Using <i>namespace\n-\t\tcomposition</i> if the project uses a separate\n-\t\tnamespace</a>\n-              </dt>\n-              <dt>1.1.2. <a href=\"#sec-emptyns\">Defining an empty namespace std</a>\n-              </dt>\n-              <dt>1.1.3. <a href=\"#sec-avoidfqn\">Avoid to use fully qualified names\n-\t  (i.e. std::string)</a>\n-              </dt>\n-              <dt>1.1.4. <a href=\"#sec-osprojects\">How some open-source-projects deal\n-\t  with this</a>\n-              </dt>\n-            </dl>\n-          </dd>\n-          <dt>2. <a href=\"#sec-nocreate\">there is no ios::nocreate/ios::noreplace\n-\t  in ISO 14882</a>\n-          </dt>\n-          <dt>3. <a href=\"#sec-stream::attach\"><b>stream::attach(int\n-\t  fd)</b> is not in the standard any more</a>\n-          </dt>\n-          <dt>4. <a href=\"#sec-headers\">The new headers</a>\n-          </dt>\n-          <dd>\n-            <dl>\n-              <dt>4.4.1. <a href=\"#sec-cheaders\">New headers replacing C-headers</a>\n-              </dt>\n-              <dt>4.4.2. <a href=\"#sec-fstream-header\">\n-\t\t<tt>&lt;fstream&gt;</tt> does\n-\t\tnot define <b>std::cout</b>,\n-\t\t<b>std::cin</b> etc.</a>\n-              </dt>\n-            </dl>\n-          </dd>\n-          <dt>5. <a href=\"#sec-iterators\">Iterators</a>\n-          </dt>\n-          <dt>6. <a href=\"#sec-macros\">\n-\t  Libc-macros (i.e. <b>isspace</b> from\n-\t  <tt>&lt;cctype&gt;</tt>)</a>\n-          </dt>\n-          <dt>7. <a href=\"#sec-stream-state\">\n-\t  State of streams\n-\t</a>\n-          </dt>\n-          <dt>8. <a href=\"#sec-vector-at\">vector::at is missing (i.e. gcc 2.95.2)</a>\n-          </dt>\n-          <dt>9. <a href=\"#sec-eof\">Using std::char_traits&lt;char&gt;::eof()</a>\n-          </dt>\n-          <dt>10. <a href=\"#sec-string-clear\">Using string::clear()/string::erase()</a>\n-          </dt>\n-          <dt>11. <a href=\"#sec-stringstream\">Using stringstream's</a>\n-          </dt>\n-          <dt>12. <a href=\"#sec-about\">About...</a>\n-          </dt>\n-        </dl>\n-      </div>\n-      <p>\n-\tIn the following, when I say portable, I will refer to \"portable among ISO\n-\t14882-implementations\". On the other hand, if I say \"backportable\" or\n-\t\"conservative\", I am talking about \"compiles with older\n-\tlibstdc++-implementations\".\n+<head>\n+<meta content=\"text/html; charset=ISO-8859-1\" http-equiv=\"Content-Type\">\n+<title>Libstdc++-porting-howto</title>\n+<meta name=\"generator\" content=\"DocBook XSL Stylesheets V1.29\">\n+</head>\n+<body bgcolor=\"white\" text=\"black\" link=\"#0000FF\" vlink=\"#840084\" alink=\"#0000FF\"><div id=\"libstdc++-porting\" class=\"article\">\n+<div class=\"titlepage\">\n+<div><h1 class=\"title\">\n+<a name=\"libstdc++-porting\"></a>Libstdc++-porting-howto</h1></div>\n+<div><h3 class=\"author\">Felix Natter</h3></div>\n+<div><div class=\"legalnotice\">\n+<p class=\"legalnotice-title\"><b>Legal Notice</b></p>\n+<p>\n+\tThis document can be distributed under the FDL\n+\t(<a href=\"http://www.gnu.org\" target=\"_top\">www.gnu.org</a>)\n+      </p>\n+</div></div>\n+<div><p class=\"pubdate\">Tue Jun  5 20:07:49 2001</p></div>\n+<div><div class=\"revhistory\"><table border=\"1\" width=\"100%\" summary=\"Revision history\">\n+<tr><th align=\"left\" valign=\"top\" colspan=\"3\"><b>Revision History</b></th></tr>\n+<tr>\n+<td align=\"left\">Revision 0.5</td>\n+<td align=\"left\">Thu Jun  1 13:06:50 2000</td>\n+<td align=\"left\">fnatter</td>\n+</tr>\n+<tr><td align=\"left\" colspan=\"3\">First docbook-version.</td></tr>\n+<tr>\n+<td align=\"left\">Revision 0.8</td>\n+<td align=\"left\">Sun Jul 30 20:28:40 2000</td>\n+<td align=\"left\">fnatter</td>\n+</tr>\n+<tr><td align=\"left\" colspan=\"3\">First released version using docbook-xml\n+\t  + second upload to libstdc++-page.\n+\t</td></tr>\n+<tr>\n+<td align=\"left\">Revision 0.9</td>\n+<td align=\"left\">Wed Sep  6 02:59:32 2000</td>\n+<td align=\"left\">fnatter</td>\n+</tr>\n+<tr><td align=\"left\" colspan=\"3\">5 new sections.</td></tr>\n+<tr>\n+<td align=\"left\">Revision 0.9.1</td>\n+<td align=\"left\">Sat Sep 23 14:20:15 2000</td>\n+<td align=\"left\">fnatter</td>\n+</tr>\n+<tr><td align=\"left\" colspan=\"3\">added information about why file-descriptors are not in the\n+\t  standard</td></tr>\n+<tr>\n+<td align=\"left\">Revision 0.9.2</td>\n+<td align=\"left\">Tue Jun  5 20:07:49 2001</td>\n+<td align=\"left\">fnatter</td>\n+</tr>\n+<tr><td align=\"left\" colspan=\"3\">\n+\t  a fix, added hint on increased portability of C-shadow-headers,\n+\t  added autoconf-test HAVE_CONTAINER_AT\n+\t</td></tr>\n+</table></div></div>\n+<div><div class=\"abstract\">\n+<p>\n+<a name=\"id2715202\"></a>\n+<b>Abstract</b>\n+</p>\n+<p>\n+\tSome notes on porting applications from libstdc++-2.90 (or earlier\n+\tversions) to libstdc++-v3. Not speaking in terms of the GNU libstdc++\n+\timplementations, this means porting from earlier versions of the\n+\tC++-Standard to ISO 14882.\n+      </p>\n+</div></div>\n+<hr>\n+</div>\n+<div class=\"toc\">\n+<p><b>Table of Contents</b></p>\n+<dl>\n+<dt>1. <a href=\"#sec-nsstd\">Namespace std::</a>\n+</dt>\n+<dd><dl>\n+<dt>1.1.1. <a href=\"#sec-gtkmm-hack\">Using <i>namespace\n+\t  composition</i> if the project uses a separate\n+\tnamespace</a>\n+</dt>\n+<dt>1.1.2. <a href=\"#sec-emptyns\">Defining an empty namespace std</a>\n+</dt>\n+<dt>1.1.3. <a href=\"#sec-avoidfqn\">Avoid to use fully qualified names\n+\t(i.e. std::string)</a>\n+</dt>\n+<dt>1.1.4. <a href=\"#sec-osprojects\">How some open-source-projects deal\n+\twith this</a>\n+</dt>\n+</dl></dd>\n+<dt>2. <a href=\"#sec-nocreate\">there is no ios::nocreate/ios::noreplace\n+      in ISO 14882</a>\n+</dt>\n+<dt>3. <a href=\"#sec-stream::attach\">\n+<b>stream::attach(int\n+\tfd)</b> is not in the standard any more</a>\n+</dt>\n+<dt>4. <a href=\"#sec-headers\">The new headers</a>\n+</dt>\n+<dd><dl>\n+<dt>4.4.1. <a href=\"#sec-cheaders\">New headers replacing C-headers</a>\n+</dt>\n+<dt>4.4.2. <a href=\"#sec-fstream-header\">\n+\t<tt>&lt;fstream&gt;</tt> does\n+\tnot define <b>std::cout</b>,\n+\t<b>std::cin</b> etc.</a>\n+</dt>\n+</dl></dd>\n+<dt>5. <a href=\"#sec-iterators\">Iterators</a>\n+</dt>\n+<dt>6. <a href=\"#sec-macros\">\n+      Libc-macros (i.e. <b>isspace</b> from\n+      <tt>&lt;cctype&gt;</tt>)</a>\n+</dt>\n+<dt>7. <a href=\"#sec-stream-state\">\n+      State of streams\n+    </a>\n+</dt>\n+<dt>8. <a href=\"#sec-vector-at\">vector::at is missing (i.e. gcc 2.95.x)</a>\n+</dt>\n+<dt>9. <a href=\"#sec-eof\">Using std::char_traits&lt;char&gt;::eof()</a>\n+</dt>\n+<dt>10. <a href=\"#sec-string-clear\">Using string::clear()/string::erase()</a>\n+</dt>\n+<dt>11. <a href=\"#sec-stringstream\">Using stringstream's</a>\n+</dt>\n+<dt>12. <a href=\"#sec-about\">About...</a>\n+</dt>\n+</dl>\n+</div>\n+<p>\n+    In the following, when I say portable, I will refer to &quot;portable among ISO\n+    14882-implementations&quot;. On the other hand, if I say &quot;backportable&quot; or\n+    &quot;conservative&quot;, I am talking about &quot;compiles with older\n+    libstdc++-implementations&quot;.\n   </p>\n-      <div class=\"section\" id=\"sec-nsstd\">\n-        <h2 class=\"title\" style=\"clear: all\">\n-          <a name=\"sec-nsstd\"><b>1. Namespace std::</b></a>\n-        </h2>\n-        <p>\n-\t  The latest C++-standard (ISO-14882) requires that the standard\n-\t  C++-library is defined in namespace std::. Thus, in order to use\n-\t  classes from the standard C++-library, you can do one of three\n-\t  things:\n-\t  <div class=\"itemizedlist\">\n-            <ul>\n-              <li>\n-                <a name=\"N2712\"></a>\n-                <p>wrap your code in <b>namespace std {\n-\t\t\t  ... }</b> =&gt; This is not an option because only symbols\n-\t\t\tfrom the standard c++-library are defined in namespace std::.\n-\t\t  </p>\n-              </li>\n-              <li>\n-                <a name=\"N2721\"></a>\n-                <p>put a kind of\n-\t\t\t<i>using-declaration</i> in your source (either\n-\t\t\t<b>using namespace std;</b> or i.e. <b>using\n-\t\t\t  std::string;</b>) =&gt; works well for source-files, but\n-\t\t\tcannot be used in header-files.\n-\t\t  </p>\n-              </li>\n-              <li>\n-                <a name=\"N2736\"></a>\n-                <p>use a <i>fully qualified name</i> for\n-\t\t\teach libstdc++-symbol (i.e. <b>std::string</b>,\n-\t\t\t<b>std::cout</b>) =&gt; can always be used\n-\t\t  </p>\n-              </li>\n-            </ul>\n-          </div>\n-\t</p>\n-        <p>\n-\t  Because there are many compilers which still use an implementation\n-\t  that does not have the standard C++-library in namespace\n-\t  <b>std::</b>, some care is required to support these as\n-\t  well.\n-\t</p>\n-        <p>\n-\t  Namespace back-portability-issues are generally not a problem with\n-\t  g++, because versions of g++ that do not have libstdc++ in\n-\t  <b>std::</b> use <b>-fno-honor-std</b>\n-\t  (ignore <b>std::</b>, <b>:: = std::</b>) by\n-\t  default. That is, the responsibility for enabling or disabling\n-\t  <b>std::</b> is on the user; the maintainer does not have\n-\t  to care about it. This probably applies to some other compilers as\n-\t  well.\n-\t</p>\n-        <p>\n-\t  The following sections list some possible solutions to support compilers\n-\t  that cannot ignore std::.\n-\t</p>\n-        <div class=\"section\" id=\"sec-gtkmm-hack\">\n-          <h3 class=\"title\">\n-            <a name=\"sec-gtkmm-hack\"><b>1.1.1. Using <i>namespace\n-\t\tcomposition</i> if the project uses a separate\n-\t\tnamespace</b></a>\n-          </h3>\n-          <p>\n-\t\t<a href=\"http://gtkmm.sourceforge.net\">Gtk--</a> defines\n-\t\tmost of its classes in namespace Gtk::. Thus, it was possible to\n-\t\tadapt Gtk-- to namespace std:: by using a C++-feature called\n-\t\t<i>namespace composition</i>. This is what happens if\n-\t\tyou put a <i>using</i>-declaration into a\n-\t\tnamespace-definition: the imported symbol(s) gets imported into the\n-\t\tcurrently active namespace(s). For example:\n-\t\t<pre class=\"programlisting\">\n-\t\t  namespace Gtk {\n-\t\t  using std::string;\n-\t\t  class Window { ... }\n-\t\t  }\n-\t\t</pre>\n-\t\tIn this example, <b>std::string</b> gets imported into\n-\t\tnamespace Gtk::.  The result is that you don't have to use\n-\t\t<b>std::string</b> in this header, but still\n-\t\t<b>std::string</b> does not get imported into\n-\t\tuser-space (the global namespace ::) unless the user does\n-\t\t<b>using namespace Gtk;</b> (which is not recommended\n-\t\tpractice for Gtk--, so it is not a problem).  Additionally, the\n-\t\t<b>using</b>-declarations are wrapped in macros that\n-\t\tare set based on autoconf-tests to either \"\" or i.e. <b>using\n-\t\t  std::string;</b> (depending on whether the system has\n-\t\tlibstdc++ in <b>std::</b> or not).  (ideas from\n-\t\t<tt>&lt;<a href=\"mailto:llewelly@dbritsch.dsl.xmission.com\">llewelly@dbritsch.dsl.xmission.com</a>&gt;</tt>, Karl Nelson\n-\t\t<tt>&lt;<a href=\"mailto:kenelson@ece.ucdavis.edu\">kenelson@ece.ucdavis.edu</a>&gt;</tt>)\n-\t  </p>\n-        </div>\n-        <div class=\"section\" id=\"sec-emptyns\">\n-          <h3 class=\"title\">\n-            <a name=\"sec-emptyns\"><b>1.1.2. Defining an empty namespace std</b></a>\n-          </h3>\n-          <p>\n-\t\tBy defining an (empty) namespace <b>std::</b> before\n-\t\tusing it, you avoid getting errors on systems where no part of the\n-\t\tlibrary is in namespace std:\n-\t\t<pre class=\"programlisting\">\n-\t\t  namespace std { }\n-\t\t  using namespace std;\n-\t\t</pre>\n-\t  </p>\n-        </div>\n-        <div class=\"section\" id=\"sec-avoidfqn\">\n-          <h3 class=\"title\">\n-            <a name=\"sec-avoidfqn\"><b>1.1.3. Avoid to use fully qualified names\n-\t  (i.e. std::string)</b></a>\n-          </h3>\n-          <p>\n-\t\tIf some compilers complain about <b>using\n-\t\t  std::string;</b>, and if the \"hack\" for gtk-- mentioned above\n-\t\tdoes not work, then it might be a good idea to define a macro\n-\t\tNS_STD, which is defined to either \"\" or \"std\"\n-\t\tbased on an autoconf-test. Then you should be able to use\n-\t\t<b>NS_STD::string</b>, which will evaluate to\n-\t\t<b>::string</b> (\"string in the global namespace\") on\n-\t\tsystems that do not put string in std::.  (This is untested)\n-\t  </p>\n-        </div>\n-        <div class=\"section\" id=\"sec-osprojects\">\n-          <h3 class=\"title\">\n-            <a name=\"sec-osprojects\"><b>1.1.4. How some open-source-projects deal\n-\t  with this</b></a>\n-          </h3>\n-          <p>\n-\t\tThis information was gathered around May 2000. It may not be correct\n-\t\tby the time you read this.\n-\t  </p>\n-          <div class=\"table\">\n-            <p>\n-              <a name=\"N2901\"></a><b>Table 1. Namespace std:: in Open-Source programs</b>\n-            </p>\n-            <table border=\"1\">\n-              <colgroup>\n-                <col>\n-                <col>\n-              </colgroup>\n-              <tbody>\n-                <tr>\n-                  <td><a href=\"http://www.clanlib.org\">clanlib</a></td><td>usual</td>\n-                </tr>\n-                <tr>\n-                  <td><a href=\"http://pingus.seul.org\">pingus</a></td><td>usual</td>\n-                </tr>\n-                <tr>\n-                  <td><a href=\"http://www.mozilla.org\">mozilla</a></td><td>usual</td>\n-                </tr>\n-                <tr>\n-                  <td><a href=\"http://www.mnemonic.org\">mnemonic</a></td><td>none</td>\n-                </tr>\n-                <tr>\n-                  <td><a href=\"http://libsigc.sourceforge.net\">\n-\t\t\t\t  libsigc++</a></td><td>conservative-impl</td>\n-                </tr>\n-              </tbody>\n-            </table>\n-          </div>\n-          <div class=\"table\">\n-            <p>\n-              <a name=\"N2978\"></a><b>Table 2. Notations for categories</b>\n-            </p>\n-            <table border=\"1\">\n-              <colgroup>\n-                <col>\n-                <col>\n-              </colgroup>\n-              <tbody>\n-                <tr>\n-                  <td>usual</td><td>mostly fully qualified names and some\n-\t\t\t\tusing-declarations (but not in headers)</td>\n-                </tr>\n-                <tr>\n-                  <td>none</td><td>no namespace std at all</td>\n-                </tr>\n-                <tr>\n-                  <td>conservative-impl</td><td>wrap all\n-\t\t\t\tnamespace-handling in macros to support compilers without\n-\t\t\t\tnamespace-support (no libstdc++ used in headers)</td>\n-                </tr>\n-              </tbody>\n-            </table>\n-          </div>\n-          <p>\n-\t\tAs you can see, this currently lacks an example of a project which\n-\t\tuses libstdc++-symbols in headers in a back-portable way (except\n-\t\tfor Gtk--: see the <a href=\"#\"></a>).\n-\t  </p>\n-        </div>\n-      </div>\n-      <div class=\"section\" id=\"sec-nocreate\">\n-        <h2 class=\"title\" style=\"clear: all\">\n-          <a name=\"sec-nocreate\"><b>2. there is no ios::nocreate/ios::noreplace\n-\t  in ISO 14882</b></a>\n-        </h2>\n-        <p>\n-\t  I have seen <b>ios::nocreate</b> being used for input-streams,\n-\t  most probably because the authors thought it would be more correct\n-\t  to specify nocreate \"explicitly\".  So you can simply leave it out\n-\t  for input-streams.\n-\t</p>\n-        <p>\n-\t  For output streams, \"nocreate\" is probably the default, unless you\n-\t  specify <b>std::ios::trunc</b> ? To be safe, you can open\n-\t  the file for reading, check if it has been opened, and then decide\n-\t  whether you want to create/replace or not. To my knowledge, even\n-\t  older implementations support <b>app</b>,\n-\t  <b>ate</b> and <b>trunc</b> (except for\n-\t  <b>app</b> ?).\n-\t</p>\n-      </div>\n-      <div class=\"section\" id=\"sec-stream::attach\">\n-        <h2 class=\"title\" style=\"clear: all\">\n-          <a name=\"sec-stream::attach\"><b>3. <b>stream::attach(int\n-\t  fd)</b> is not in the standard any more</b></a>\n-        </h2>\n-        <p>\n-\t  When using libstdc++-v3, you can use\n-\t  <div id=\"N3082\" class=\"funcsynopsis\">\n-            <p>\n-            </p>\n-            <a name=\"N3082\"></a>\n-            <pre class=\"funcsynopsisinfo\">\n-\t\t  #include &lt;fstream&gt;\n-\t\t</pre>\n-            <p>\n-              <code><code class=\"funcdef\">int <b class=\"fsfunc\">basic_filebuf</b></code>(<var class=\"pdparam\">__fd</var>, <var class=\"pdparam\">__name</var>, <var class=\"pdparam\">__mode</var>);<br>int <var class=\"pdparam\">__fd</var>;<br>const char* <var class=\"pdparam\">__name</var>;<br>ios_base::openmode <var class=\"pdparam\">__mode</var>;</code>\n-            </p>\n-            <p>\n-            </p>\n-          </div>\n-\t  For a portable solution (if there is one), you need to implement a\n-\t  subclass of <b>streambuf</b> which opens a file given a\n-\t  descriptor, and then pass an instance of this to the\n-\t  stream-constructor (from the Josuttis-book).\n-\t</p>\n-      </div>\n-      <div class=\"section\" id=\"sec-headers\">\n-        <h2 class=\"title\" style=\"clear: all\">\n-          <a name=\"sec-headers\"><b>4. The new headers</b></a>\n-        </h2>\n-        <p>\n-\t  All new headers can be seen in this <a href=\"../../testsuite/17_intro/headers.cc\">source-code</a>.\n-\t</p>\n-        <p>\n-\t  I think it is a problem for libstdc++-v3 to add links or wrappers\n-\t  for the old headers, because the implementation has changed, and\n-\t  the header name-changes indicate this. It might be preferable to\n-\t  use the new headers and tell users of old compilers that they\n-\t  should create links (which is what they will have to do sometime\n-\t  anyway).\n-\t</p>\n-        <div class=\"section\" id=\"sec-cheaders\">\n-          <h3 class=\"title\">\n-            <a name=\"sec-cheaders\"><b>4.4.1. New headers replacing C-headers</b></a>\n-          </h3>\n-          <p>\n-\t\tYou should not use the C-headers (except for system-level headers)\n-\t\tfrom C++ programs. Instead, you should use a set of headers that\n-\t\tare named by prepending 'c' and, as usual, ommiting the extension\n-\t\t(.h). For example, instead of using <tt>&lt;math.h&gt;</tt>, you should use <tt>&lt;cmath&gt;</tt>. The standard\n-\t\tspecifies that if you include the C-style header (<tt>&lt;math.h&gt;</tt> in this case), the symbols\n-\t\twill be available both in the global namespace and in namespace\n-\t\t<b>std::</b> (libstdc++-v3, version 2.90.8 currently\n-\t\tputs them in <b>std::</b> only) On the other hand, if\n-\t\tyou include only the new header (i.e. <tt>&lt;pcmath&gt;</tt>), the symbols will only be\n-\t\tdefined in namespace <b>std::</b> (and macros will be\n-\t\tconverted to inline-functions).\n-\t  </p>\n-          <p>\n-\t\tFor more information on this, and for information on how the GNU\n-\t\tC++ implementation reuses (\"shadows\") the C library-functions, have\n-\t\ta look at <a href=\"http://www.cantrip.org/cheaders.html\">\n-\t\t  www.cantrip.org</a>.\n-\t  </p>\n-        </div>\n-        <div class=\"section\" id=\"sec-fstream-header\">\n-          <h3 class=\"title\">\n-            <a name=\"sec-fstream-header\"><b>4.4.2. \n-\t\t<tt>&lt;fstream&gt;</tt> does\n-\t\tnot define <b>std::cout</b>,\n-\t\t<b>std::cin</b> etc.</b></a>\n-          </h3>\n-          <p>\n-\t\tIn previous versions of the standard, <tt>&lt;fstream.h&gt;</tt>, <tt>&lt;ostream.h&gt;</tt> and <tt>&lt;istream.h&gt;</tt> used to define\n-\t\t<b>cout</b>, <b>cin</b> and so on. Because\n-\t\tof the templatized iostreams in libstdc++-v3, you need to include\n-\t\t<tt>&lt;iostream&gt;</tt>\n-\t\texplicitly to define these.\n-\t  </p>\n-        </div>\n-      </div>\n-      <div class=\"section\" id=\"sec-iterators\">\n-        <h2 class=\"title\" style=\"clear: all\">\n-          <a name=\"sec-iterators\"><b>5. Iterators</b></a>\n-        </h2>\n-        <p>\n-\t  The following are not proper uses of iterators, but may be working\n-\t  fixes for existing uses of iterators.\n-\t  <div class=\"itemizedlist\">\n-            <ul>\n-              <li>\n-                <a name=\"N3282\"></a>\n-                <p>you cannot do\n-\t\t\t<b>ostream::operator&lt;&lt;(iterator)</b> to\n-\t\t\tprint the address of the iterator =&gt; use\n-\t\t\t<b>operator&lt;&lt; &amp;*iterator</b> instead ?\n-\t\t  </p>\n-              </li>\n-              <li>\n-                <a name=\"N3303\"></a>\n-                <p>you cannot clear an iterator's reference\n-\t\t\t(<b>iterator = 0</b>) =&gt; use\n-\t\t\t<b>iterator = iterator_type();</b> ?\n-\t\t  </p>\n-              </li>\n-              <li>\n-                <a name=\"N3316\"></a>\n-                <p>\n-                  <b>if (iterator)</b> won't work any\n-\t\t\tmore =&gt; use <b>if (iterator != iterator_type())</b>\n-\t\t\t?</p>\n-              </li>\n-            </ul>\n-          </div>\n-\t</p>\n-      </div>\n-      <div class=\"section\" id=\"sec-macros\">\n-        <h2 class=\"title\" style=\"clear: all\">\n-          <a name=\"sec-macros\"><b>6. \n-\t  Libc-macros (i.e. <b>isspace</b> from\n-\t  <tt>&lt;cctype&gt;</tt>)</b></a>\n-        </h2>\n-        <p>\n-\t  Glibc 2.0.x and 2.1.x define the <tt>&lt;ctype.h&gt;</tt> -functionality as\n-\t  macros (isspace, isalpha etc.). Libstdc++-v3 \"shadows\" these macros\n-\t  as described in the <a href=\"#\"></a>.\n-\t</p>\n-        <p>\n-\t  Older implementations of libstdc++ (g++-2 for egcs 1.x and g++-3\n-\t  for gcc 2.95.2), however, keep these functions as macros, and so it\n-\t  is not back-portable to use fully qualified names. For example:\n-\t  <pre class=\"programlisting\">\n-\t\t#include &lt;cctype&gt;\n-\t\tint main() { std::isspace('X'); }\n-\t  </pre>\n-\t  will result in something like this (unless using g++-v3):\n-\t  <pre class=\"programlisting\">\n-\t\tstd:: (__ctype_b[(int) ( ( 'X' ) )] &amp; (unsigned short int)\n-\t\t_ISspace )  ;\n-\t  </pre>\n-\t  </p>\n-        <p>\n-\t  One solution I can think of is to test for -v3 using\n-\t  autoconf-macros, and define macros for each of the C-functions\n-\t  (maybe that is possible with one \"wrapper\" macro as well ?).\n-\t</p>\n-        <p>\n-\t  Another solution which would fix g++ is to tell the user to modify a\n-\t  header-file so that g++-2 (egcs 1.x) and g++-3 (gcc 2.95.2) define a\n-\t  macro which tells <tt>&lt;ctype.h&gt;</tt> to define functions\n-\t  instead of macros:\n-\t  <pre class=\"programlisting\">\n-\t\t// This keeps isalnum, et al from being propagated as macros.\n-\t\t#if __linux__\n-\t\t#define __NO_CTYPE 1\n-\t\t#endif\n+<div class=\"section\">\n+<a name=\"sec-nsstd\"></a>\n+<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-nsstd\"></a>\n+<span class=\"label\">1.</span> <span class=\"title\">Namespace std::</span>\n+</h2></div></div>\n+<p>\n+      The latest C++-standard (ISO-14882) requires that the standard\n+      C++-library is defined in namespace std::. Thus, in order to use\n+      classes from the standard C++-library, you can do one of three\n+      things:\n+      <div class=\"itemizedlist\"><ul>\n+<li><p>\n+<a name=\"id2715113\"></a>wrap your code in <b>namespace std {\n+\t      ... }</b> =&gt; This is not an option because only symbols\n+\t    from the standard c++-library are defined in namespace std::.\n+\t  </p></li>\n+<li><p>\n+<a name=\"id2668711\"></a>put a kind of\n+\t    <i>using-declaration</i> in your source (either\n+\t    <b>using namespace std;</b> or i.e. <b>using\n+\t      std::string;</b>) =&gt; works well for source-files, but\n+\t    cannot be used in header-files.\n+\t  </p></li>\n+<li><p>\n+<a name=\"id2668731\"></a>use a <i>fully qualified name</i> for\n+\t    each libstdc++-symbol (i.e. <b>std::string</b>,\n+\t    <b>std::cout</b>) =&gt; can always be used\n+\t  </p></li>\n+</ul></div>\n+    </p>\n+<p>\n+      Because there are many compilers which still use an implementation\n+      that does not have the standard C++-library in namespace\n+      <b>std::</b>, some care is required to support these as\n+      well.\n+    </p>\n+<p>\n+      Namespace back-portability-issues are generally not a problem with\n+      g++, because versions of g++ that do not have libstdc++ in\n+      <b>std::</b> use <b>-fno-honor-std</b>\n+      (ignore <b>std::</b>, <b>:: = std::</b>) by\n+      default. That is, the responsibility for enabling or disabling\n+      <b>std::</b> is on the user; the maintainer does not have\n+      to care about it. This probably applies to some other compilers as\n+      well.\n+    </p>\n+<p>\n+      The following sections list some possible solutions to support compilers\n+      that cannot ignore std::.\n+    </p>\n+<div class=\"section\">\n+<a name=\"sec-gtkmm-hack\"></a>\n+<div class=\"titlepage\"><div><h3 class=\"title\">\n+<a name=\"sec-gtkmm-hack\"></a>\n+<span class=\"label\">1.1.1.</span> <span class=\"title\">Using <i>namespace\n+\t  composition</i> if the project uses a separate\n+\tnamespace</span>\n+</h3></div></div>\n+<p>\n+\t<a href=\"http://gtkmm.sourceforge.net\" target=\"_top\">Gtk--</a> defines\n+\tmost of its classes in namespace Gtk::. Thus, it was possible to\n+\tadapt Gtk-- to namespace std:: by using a C++-feature called\n+\t<i>namespace composition</i>. This is what happens if\n+\tyou put a <i>using</i>-declaration into a\n+\tnamespace-definition: the imported symbol(s) gets imported into the\n+\tcurrently active namespace(s). For example:\n+\t<pre class=\"programlisting\">\n+\t  namespace Gtk {\n+\t  using std::string;\n+\t  class Window { ... }\n+\t  }\n+\t</pre>\n+\tIn this example, <b>std::string</b> gets imported into\n+\tnamespace Gtk::.  The result is that you don't have to use\n+\t<b>std::string</b> in this header, but still\n+\t<b>std::string</b> does not get imported into\n+\tuser-space (the global namespace ::) unless the user does\n+\t<b>using namespace Gtk;</b> (which is not recommended\n+\tpractice for Gtk--, so it is not a problem).  Additionally, the\n+\t<b>using</b>-declarations are wrapped in macros that\n+\tare set based on autoconf-tests to either &quot;&quot; or i.e. <b>using\n+\t  std::string;</b> (depending on whether the system has\n+\tlibstdc++ in <b>std::</b> or not).  (ideas from\n+\t<tt>&lt;<a href=\"mailto:llewelly@dbritsch.dsl.xmission.com\">llewelly@dbritsch.dsl.xmission.com</a>&gt;</tt>, Karl Nelson\n+\t<tt>&lt;<a href=\"mailto:kenelson@ece.ucdavis.edu\">kenelson@ece.ucdavis.edu</a>&gt;</tt>)\n+      </p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-emptyns\"></a>\n+<div class=\"titlepage\"><div><h3 class=\"title\">\n+<a name=\"sec-emptyns\"></a>\n+<span class=\"label\">1.1.2.</span> <span class=\"title\">Defining an empty namespace std</span>\n+</h3></div></div>\n+<p>\n+\tBy defining an (empty) namespace <b>std::</b> before\n+\tusing it, you avoid getting errors on systems where no part of the\n+\tlibrary is in namespace std:\n+\t<pre class=\"programlisting\">\n+\t  namespace std { }\n+\t  using namespace std;\n+\t</pre>\n+      </p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-avoidfqn\"></a>\n+<div class=\"titlepage\"><div><h3 class=\"title\">\n+<a name=\"sec-avoidfqn\"></a>\n+<span class=\"label\">1.1.3.</span> <span class=\"title\">Avoid to use fully qualified names\n+\t(i.e. std::string)</span>\n+</h3></div></div>\n+<p>\n+\tIf some compilers complain about <b>using\n+\t  std::string;</b>, and if the &quot;hack&quot; for gtk-- mentioned above\n+\tdoes not work, then it might be a good idea to define a macro\n+\tNS_STD, which is defined to either &quot;&quot; or &quot;std&quot;\n+\tbased on an autoconf-test. Then you should be able to use\n+\t<b>NS_STD::string</b>, which will evaluate to\n+\t<b>::string</b> (&quot;string in the global namespace&quot;) on\n+\tsystems that do not put string in std::.  (This is untested)\n+      </p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-osprojects\"></a>\n+<div class=\"titlepage\"><div><h3 class=\"title\">\n+<a name=\"sec-osprojects\"></a>\n+<span class=\"label\">1.1.4.</span> <span class=\"title\">How some open-source-projects deal\n+\twith this</span>\n+</h3></div></div>\n+<p>\n+\tThis information was gathered around May 2000. It may not be correct\n+\tby the time you read this.\n+      </p>\n+<div class=\"table\">\n+<p>\n+<a name=\"id2668681\"></a>\n+<b>Table 1. Namespace std:: in Open-Source programs</b>\n+</p>\n+<table summary=\"Namespace std:: in Open-Source programs\" border=\"1\">\n+<colgroup>\n+<col>\n+<col>\n+</colgroup>\n+<tbody>\n+<tr>\n+<td><a href=\"http://www.clanlib.org\" target=\"_top\">clanlib</a></td>\n+<td>usual</td>\n+</tr>\n+<tr>\n+<td><a href=\"http://pingus.seul.org\" target=\"_top\">pingus</a></td>\n+<td>usual</td>\n+</tr>\n+<tr>\n+<td><a href=\"http://www.mozilla.org\" target=\"_top\">mozilla</a></td>\n+<td>usual</td>\n+</tr>\n+<tr>\n+<td><a href=\"http://www.mnemonic.org\" target=\"_top\">mnemonic</a></td>\n+<td>none</td>\n+</tr>\n+<tr>\n+<td><a href=\"http://libsigc.sourceforge.net\" target=\"_top\">\n+\t\t  libsigc++</a></td>\n+<td>conservative-impl</td>\n+</tr>\n+</tbody>\n+</table>\n+</div>\n+<div class=\"table\">\n+<p>\n+<a name=\"id2666288\"></a>\n+<b>Table 2. Notations for categories</b>\n+</p>\n+<table summary=\"Notations for categories\" border=\"1\">\n+<colgroup>\n+<col>\n+<col>\n+</colgroup>\n+<tbody>\n+<tr>\n+<td>usual</td>\n+<td>mostly fully qualified names and some\n+\t\tusing-declarations (but not in headers)</td>\n+</tr>\n+<tr>\n+<td>none</td>\n+<td>no namespace std at all</td>\n+</tr>\n+<tr>\n+<td>conservative-impl</td>\n+<td>wrap all\n+\t\tnamespace-handling in macros to support compilers without\n+\t\tnamespace-support (no libstdc++ used in headers)</td>\n+</tr>\n+</tbody>\n+</table>\n+</div>\n+<p>\n+\tAs you can see, this currently lacks an example of a project which\n+\tuses libstdc++-symbols in headers in a back-portable way (except\n+\tfor Gtk--: see the <a href=\"#sec-gtkmm-hack\"></a>).\n+      </p>\n+</div>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-nocreate\"></a>\n+<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-nocreate\"></a>\n+<span class=\"label\">2.</span> <span class=\"title\">there is no ios::nocreate/ios::noreplace\n+      in ISO 14882</span>\n+</h2></div></div>\n+<p>\n+      I have seen <b>ios::nocreate</b> being used for\n+      input-streams, most probably because the author thought it would be\n+      more correct to specify nocreate &quot;explicitly&quot;.  So you can simply\n+      leave it out for input-streams.\n+    </p>\n+<p>\n+      For output streams, &quot;nocreate&quot; is probably the default, unless you\n+      specify <b>std::ios::trunc</b> ? To be safe, you can open\n+      the file for reading, check if it has been opened, and then decide\n+      whether you want to create/replace or not. To my knowledge, even\n+      older implementations support <b>app</b>,\n+      <b>ate</b> and <b>trunc</b> (except for\n+      <b>app</b> ?).\n+    </p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-stream::attach\"></a>\n+<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-stream::attach\"></a>\n+<span class=\"label\">3.</span> <span class=\"title\">\n+<b>stream::attach(int\n+\tfd)</b> is not in the standard any more</span>\n+</h2></div></div>\n+<p>\n+      Phil Edwards <tt>&lt;<a href=\"mailto:pedwards@disaster.jaj.com\">pedwards@disaster.jaj.com</a>&gt;</tt> writes:\n+      It was considered and rejected.  Not all environments use file\n+      descriptors.  Of those that do, not all of them use integers to represent\n+      them.\n+    </p>\n+<p>\n+      When using libstdc++-v3, you can use\n+      <div class=\"funcsynopsis\" id=\"id2666593\">\n+<p>\n+<a name=\"id2666593\"></a>\n+<pre class=\"funcsynopsisinfo\">\n+\t  #include &lt;fstream&gt;\n+\t</pre>\n+<p><code>\n+<code class=\"funcdef\">int <b class=\"fsfunc\">basic_filebuf</b>\n+</code>(<var class=\"pdparam\">__fd</var>, <var class=\"pdparam\">__name</var>, <var class=\"pdparam\">__mode</var>);<br>int <var class=\"pdparam\">__fd</var>;<br>const char* <var class=\"pdparam\">__name</var>;<br>ios_base::openmode <var class=\"pdparam\">__mode</var>;</code></p>\n+<p>\n+</div>\n+      but the the signature of this constructor has changed often, and\n+      it might change again.\n+      For a portable solution (among systems which use\n+      filedescriptors), you need to implement a subclass of\n+      <b>streambuf</b> (or\n+      <b>basic_streambuf&lt;..&gt;</b>) which opens a file\n+      given a descriptor, and then pass an instance of this to the\n+      stream-constructor (from the Josuttis-book).\n+    </p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-headers\"></a>\n+<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-headers\"></a>\n+<span class=\"label\">4.</span> <span class=\"title\">The new headers</span>\n+</h2></div></div>\n+<p>\n+      All new headers can be seen in this <a href=\"headers_cc.txt\" target=\"_top\">\n+\tsource-code</a>.\n+    </p>\n+<p>\n+    The old C++-headers (iostream.h etc.) are available, but gcc generates\n+    a warning that you are using deprecated headers.\n+    </p>\n+<div class=\"section\">\n+<a name=\"sec-cheaders\"></a>\n+<div class=\"titlepage\"><div><h3 class=\"title\">\n+<a name=\"sec-cheaders\"></a>\n+<span class=\"label\">4.4.1.</span> <span class=\"title\">New headers replacing C-headers</span>\n+</h3></div></div>\n+<p>\n+\tYou should not use the C-headers (except for system-level\n+\theaders) from C++ programs. Instead, you should use a set of\n+\theaders that are named by prepending 'c' and, as usual,\n+\tomitting the extension (.h). For example, instead of using\n+\t<tt>&lt;math.h&gt;</tt>, you\n+\tshould use <tt>&lt;cmath&gt;</tt>. In some cases this has\n+\tthe advantage that the C++-header is more standardized than\n+\tthe C-header (i.e. <tt>&lt;ctime&gt;</tt> (almost)\n+\tcorresponds to either <tt>&lt;time.h&gt;</tt> or <tt>&lt;sys/time.h&gt;</tt>).\n \n-\t\t[ now include &lt;ctype.h&gt; ]\n-\t  </pre>\n-\t</p>\n-        <p>\n-\t  Another problem arises if you put a <b>using namespace\n-\t\tstd;</b> declaration at the top, and include <tt>&lt;ctype.h&gt;</tt>. This will result in\n-\t\tambiguities between the definitions in the global namespace\n-\t\t(<tt>&lt;ctype.h&gt;</tt>) and the\n-\t\tdefinitions in namespace <b>std::</b>\n-\t\t(<b>&lt;cctype&gt;</b>).\n-\t</p>\n-        <p>\n-\t  The solution to this problem was posted to the libstdc++-v3\n-\t  mailing-list:\n-\t  Benjamin Kosnik <tt>&lt;<a href=\"mailto:bkoz@redhat.com\">bkoz@redhat.com</a>&gt;</tt> writes:\n-\t  \"\n-\t\t--enable-cshadow-headers is currently broken. As a result, shadow\n-\t\theaders are not being searched....\n-\t  \"\n-\t</p>\n-      </div>\n-      <div class=\"section\" id=\"sec-stream-state\">\n-        <h2 class=\"title\" style=\"clear: all\">\n-          <a name=\"sec-stream-state\"><b>7. \n-\t  State of streams\n-\t</b></a>\n-        </h2>\n-        <p>\n-\t  At least some older implementations don't have\n-\t  <b>std::ios_base</b>, so you should use\n-\t  <b>std::ios::badbit</b>, <b>std::ios::failbit</b>\n-\t  and <b>std::ios::eofbit</b> and\n-\t  <b>std::ios::goodbit</b>.\n-\t</p>\n-      </div>\n-      <div class=\"section\" id=\"sec-vector-at\">\n-        <h2 class=\"title\" style=\"clear: all\">\n-          <a name=\"sec-vector-at\"><b>8. vector::at is missing (i.e. gcc 2.95.2)</b></a>\n-        </h2>\n-        <p>\n-\t  For my use, I added it to\n-\t  <tt>prefix/include/g++-3/stl_vector.h</tt>:\n-\t  <pre class=\"programlisting\">\n-  reference operator[](size_type __n) { return *(begin() + __n); }\n-  reference at(size_type __n) {\n-    if (begin() + __n &gt;= end())\n-      throw out_of_range(\"vector::at\");\n-    return *(begin() + __n);\n-  }\n-  const_reference operator[](size_type __n) const { return *(begin() + __n); }\n-  const_reference at(size_type __n) const {\n-    if (begin() + __n &gt;= end())\n-      throw out_of_range(\"vector::at\");\n-    return *(begin() + __n);\n-  }\n-\t  </pre>\n-\t</p>\n-      </div>\n-      <div class=\"section\" id=\"sec-eof\">\n-        <h2 class=\"title\" style=\"clear: all\">\n-          <a name=\"sec-eof\"><b>9. Using std::char_traits&lt;char&gt;::eof()</b></a>\n-        </h2>\n-        <p>\n-\t  <pre class=\"programlisting\">\n-\t\t#ifdef HAVE_CHAR_TRAITS\n-\t\t#define CPP_EOF std::char_traits&lt;char&gt;::eof()\n-\t\t#else\n-\t\t#define CPP_EOF EOF\n-\t\t#endif\n-\t  </pre>\n-\t</p>\n-      </div>\n-      <div class=\"section\" id=\"sec-string-clear\">\n-        <h2 class=\"title\" style=\"clear: all\">\n-          <a name=\"sec-string-clear\"><b>10. Using string::clear()/string::erase()</b></a>\n-        </h2>\n-        <p>\n-\t  There are two functions for deleting the contents of a string:\n-\t  <b>clear</b> and <b>erase</b> (the latter\n-\t  returns the string).\n-\t  <pre class=\"programlisting\">\n-\t\tvoid \n-\t\tclear() { _M_mutate(0, this-&gt;size(), 0); }\n-\t  </pre>\n-\t  <pre class=\"programlisting\">\n-      basic_string&amp; \n-      erase(size_type __pos = 0, size_type __n = npos)\n-      { \n-\t\treturn this-&gt;replace(_M_check(__pos), _M_fold(__pos, __n),\n-\t\t\t     _M_data(), _M_data()); \n-      }\n-\t  </pre>\n-\t  The implementation of <b>erase</b> seems to be more\n-\t  complicated (from libstdc++-v3), but <b>clear</b> is not\n-\t  implemented in gcc 2.95.2's libstdc++, so you should use\n-\t  <b>erase</b> (which is probably faster than\n-\t  <b>operator=(charT*)</b>).\n-\t</p>\n-      </div>\n-      <div class=\"section\" id=\"sec-stringstream\">\n-        <h2 class=\"title\" style=\"clear: all\">\n-          <a name=\"sec-stringstream\"><b>11. Using stringstream's</b></a>\n-        </h2>\n-        <p>\n-\t  Libstdc++-v3 includes the new\n-\t  <b>i/ostringstream</b>-classes, (<tt>&lt;sstream&gt;</tt>), but with older\n-\t  implementations you still have to use <b>i/ostrstream</b>\n-\t  (<tt>&lt;strstream&gt;</tt>):\n-\t  <pre class=\"programlisting\">\n-\t\t#ifdef HAVE_SSTREAM\n-\t\t#include &lt;sstream&gt;\n-\t\t#else\n-\t\t#include &lt;strstream&gt;\n-\t\t#endif\n-\t  </pre>\n-\t  <div class=\"itemizedlist\">\n-            <ul>\n-              <li>\n-                <a name=\"N3595\"></a>\n-                <p> <b>strstream</b> is considered to be\n-\t\t\tdeprecated\n-\t\t  </p>\n-              </li>\n-              <li>\n-                <a name=\"N3603\"></a>\n-                <p> <b>strstream</b> is limited to\n-\t\t\t<b>char</b>\n-\t\t  </p>\n-              </li>\n-              <li>\n-                <a name=\"N3614\"></a>\n-                <p> with <b>ostringstream</b> you don't\n-\t\t\thave to take care of terminating the string or freeing its\n-\t\t\tmemory\n-\t\t  </p>\n-              </li>\n-              <li>\n-                <a name=\"N3622\"></a>\n-                <p> <b>istringstream</b> can be re-filled\n-\t\t\t(clear(); str(input);)\n-\t\t  </p>\n-              </li>\n-            </ul>\n-          </div>\n-\t</p>\n-        <p>\n-\t  You can then use output-stringstreams like this:\n-\t  <pre class=\"programlisting\">\n-\t\t#ifdef HAVE_SSTREAM\n-\t\tstd::ostringstream oss;\n-\t\t#else\n-\t\tstd::ostrstream oss;\n-\t\t#endif\n-\t\toss &lt;&lt; \"Name=\" &lt;&lt; m_name &lt;&lt; \", number=\" &lt;&lt; m_number &lt;&lt; std::endl;\n-\t\t...\n-\t\t#ifndef HAVE_SSTREAM\n-\t\toss &lt;&lt; std::ends; // terminate the char*-string\n-\t\t#endif\n-\t\t// str() returns char* for ostrstream and a string for ostringstream\n-\t\t// this also causes ostrstream to think that the buffer's memory\n-\t\t// is yours\n-\t\tm_label.set_text(oss.str());\n-\t\t#ifndef HAVE_SSTREAM\n-\t\t// let the ostrstream take care of freeing the memory\n-\t\toss.freeze(false);\n-\t\t#endif\n-\t  </pre>\n-\t</p>\n-        <p>\n-\t  Input-stringstreams can be used similarly:\n-\t  <pre class=\"programlisting\">\n-\t\tstd::string input;\n-\t\t...\n-\t\t#ifdef HAVE_SSTREAM\n-\t\tstd::istringstream iss(input);\n-\t\t#else\n-\t\tstd::istrstream iss(input.c_str());\n-\t\t#endif\n-\t\tint i;\n-\t\tiss &gt;&gt; i; \n-\t  </pre>\n-\t  One (the only?) restriction is that an istrstream cannot be re-filled:\n-\t  <pre class=\"programlisting\">\n-\t\tstd::istringstream iss(numerator);\n-\t\tiss &gt;&gt; m_num;\n-\t\t// this is not possible with istrstream\n-\t\tiss.clear();\n-\t\tiss.str(denominator);\n-\t\tiss &gt;&gt; m_den;\n-\t  </pre>\n-\t  If you don't care about speed, you can put these conversions in\n-\t  a template-function:\n-\t  <pre class=\"programlisting\">\n-\t\ttemplate &lt;class X&gt;\n-\t\tvoid fromString(const string&amp; input, X&amp; any)\n-\t\t{\n-\t\t#ifdef HAVE_SSTREAM\n-\t\tstd::istringstream iss(input);\n-\t\t#else\n-\t\tstd::istrstream iss(input.c_str());\n-\t\t#endif\n-\t\tX temp;\n-\t\tiss &gt;&gt; temp;\n-\t\tif (iss.fail())\n-\t\t   throw runtime_error(..)\n-\t\tany = temp;\n-\t\t}\n-\t  </pre>\n-\t</p>\n-        <p>\n-\t  I have read the Josuttis book on Standard C++, so some information\n-\t  comes from there. Additionally, there is information in\n-\t  \"info iostream\", which covers the old implementation that gcc 2.95.2\n-\t  uses.\n-\t</p>\n-      </div>\n-      <div class=\"section\" id=\"sec-about\">\n-        <h2 class=\"title\" style=\"clear: all\">\n-          <a name=\"sec-about\"><b>12. About...</b></a>\n-        </h2>\n-        <p>\n-\t  Please send any experience, additions, corrections or questions to\n-\t  <a href=\"mailto:fnatter@gmx.net\">fnatter@gmx.net</a> or for\n-\t  discussion to the libstdc++-v3-mailing-list.\n-\t</p>\n-      </div>\n-    </div>\n-  </body>\n+\tThe standard specifies that if you include the C-style header\n+\t(<tt>&lt;math.h&gt;</tt> in\n+\tthis case), the symbols will be available both in the global\n+\tnamespace and in namespace <b>std::</b> (but\n+\tlibstdc++ does not yet have fully compliant headers) On the\n+\tother hand, if you include only the new header (i.e. <tt>&lt;cmath&gt;</tt>), the symbols\n+\twill only be defined in namespace <b>std::</b>\n+\t(and macros will be converted to inline-functions).\n+      </p>\n+<p>\n+\tFor more information on this, and for information on how the\n+\tGNU C++ implementation might reuse (&quot;shadow&quot;) the C\n+\tlibrary-functions, have a look at <a href=\"http://www.cantrip.org/cheaders.html\" target=\"_top\">\n+\twww.cantrip.org</a>.\n+      </p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-fstream-header\"></a>\n+<div class=\"titlepage\"><div><h3 class=\"title\">\n+<a name=\"sec-fstream-header\"></a>\n+<span class=\"label\">4.4.2.</span> <span class=\"title\">\n+\t<tt>&lt;fstream&gt;</tt> does\n+\tnot define <b>std::cout</b>,\n+\t<b>std::cin</b> etc.</span>\n+</h3></div></div>\n+<p>\n+\tIn earlier versions of the standard,\n+\t<tt>&lt;fstream.h&gt;</tt>,\n+\t<tt>&lt;ostream.h&gt;</tt>\n+\t and <tt>&lt;istream.h&gt;</tt>\n+\t  used to define\n+\t<b>cout</b>, <b>cin</b> and so on. Because\n+\tof the templatized iostreams in libstdc++-v3, you need to include\n+\t<tt>&lt;iostream&gt;</tt>\n+\texplicitly to define these.\n+      </p>\n+</div>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-iterators\"></a>\n+<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-iterators\"></a>\n+<span class=\"label\">5.</span> <span class=\"title\">Iterators</span>\n+</h2></div></div>\n+<p>\n+      The following are not proper uses of iterators, but may be working\n+      fixes for existing uses of iterators.\n+      <div class=\"itemizedlist\"><ul>\n+<li><p>\n+<a name=\"id2664787\"></a>you cannot do\n+\t    <b>ostream::operator&lt;&lt;(iterator)</b> to\n+\t    print the address of the iterator =&gt; use\n+\t    <b>operator&lt;&lt; &amp;*iterator</b> instead ?\n+\t  </p></li>\n+<li><p>\n+<a name=\"id2664753\"></a>you cannot clear an iterator's reference\n+\t    (<b>iterator = 0</b>) =&gt; use\n+\t    <b>iterator = iterator_type();</b> ?\n+\t  </p></li>\n+<li><p>\n+<a name=\"id2664806\"></a>\n+<b>if (iterator)</b> won't work any\n+\t    more =&gt; use <b>if (iterator != iterator_type())</b>\n+\t    ?</p></li>\n+</ul></div>\n+    </p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-macros\"></a>\n+<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-macros\"></a>\n+<span class=\"label\">6.</span> <span class=\"title\">\n+      Libc-macros (i.e. <b>isspace</b> from\n+      <tt>&lt;cctype&gt;</tt>)</span>\n+</h2></div></div>\n+<p>\n+      Glibc 2.0.x and 2.1.x define the <tt>&lt;ctype.h&gt;</tt> -functionality as\n+      macros (isspace, isalpha etc.). Libstdc++-v3 &quot;shadows&quot; these macros\n+      as described in the <a href=\"#sec-cheaders\"></a>.\n+    </p>\n+<p>\n+      Older implementations of libstdc++ (g++-2 for egcs 1.x and g++-3\n+      for gcc 2.95.x), however, keep these functions as macros, and so it\n+      is not back-portable to use fully qualified names. For example:\n+      <pre class=\"programlisting\">\n+\t#include &lt;cctype&gt;\n+\tint main() { std::isspace('X'); }\n+      </pre>\n+      will result in something like this (unless using g++-v3):\n+      <pre class=\"programlisting\">\n+\tstd:: (__ctype_b[(int) ( ( 'X' ) )] &amp; (unsigned short int)\n+\t_ISspace )  ;\n+      </pre>\n+    </p>\n+<p>\n+      One solution I can think of is to test for -v3 using\n+      autoconf-macros, and define macros for each of the C-functions\n+      (maybe that is possible with one &quot;wrapper&quot; macro as well ?).\n+    </p>\n+<p>\n+      Another solution which would fix g++ is to tell the user to modify a\n+      header-file so that g++-2 (egcs 1.x) and g++-3 (gcc 2.95.x) define a\n+      macro which tells <tt>&lt;ctype.h&gt;</tt> to define functions\n+      instead of macros:\n+      <pre class=\"programlisting\">\n+\t// This keeps isalnum, et al from being propagated as macros.\n+\t#if __linux__\n+\t#define __NO_CTYPE 1\n+\t#endif\n+\n+\t[ now include &lt;ctype.h&gt; ]\n+      </pre>\n+    </p>\n+<p>\n+      Another problem arises if you put a <b>using namespace\n+\tstd;</b> declaration at the top, and include <tt>&lt;ctype.h&gt;</tt>. This will result in\n+      ambiguities between the definitions in the global namespace\n+      (<tt>&lt;ctype.h&gt;</tt>) and the\n+      definitions in namespace <b>std::</b>\n+      (<b>&lt;cctype&gt;</b>).\n+    </p>\n+<p>\n+      The solution to this problem was posted to the libstdc++-v3\n+      mailing-list:\n+      Benjamin Kosnik <tt>&lt;<a href=\"mailto:bkoz@redhat.com\">bkoz@redhat.com</a>&gt;</tt> writes:\n+      `\n+\t--enable-cshadow-headers is currently broken. As a result, shadow\n+\theaders are not being searched....\n+      '\n+    </p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-stream-state\"></a>\n+<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-stream-state\"></a>\n+<span class=\"label\">7.</span> <span class=\"title\">\n+      State of streams\n+    </span>\n+</h2></div></div>\n+<p>\n+      At least some older implementations don't have\n+      <b>std::ios_base</b>, so you should use\n+      <b>std::ios::badbit</b>, <b>std::ios::failbit</b>\n+      and <b>std::ios::eofbit</b> and\n+      <b>std::ios::goodbit</b>.\n+    </p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-vector-at\"></a>\n+<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-vector-at\"></a>\n+<span class=\"label\">8.</span> <span class=\"title\">vector::at is missing (i.e. gcc 2.95.x)</span>\n+</h2></div></div>\n+<p>\n+      You could easily modify the header-files:\n+      <tt>prefix/include/g++-3/stl_vector.h</tt>:\n+      <pre class=\"programlisting\">\n+\treference operator[](size_type __n) { return *(begin() + __n); }\n+\treference at(size_type __n) {\n+\tif (begin() + __n &gt;= end())\n+\tthrow out_of_range(&quot;vector::at&quot;);\n+\treturn *(begin() + __n);\n+\t}\n+\tconst_reference operator[](size_type __n) const { return *(begin() + __n); }\n+\tconst_reference at(size_type __n) const {\n+\tif (begin() + __n &gt;= end())\n+\tthrow out_of_range(&quot;vector::at&quot;);\n+\treturn *(begin() + __n);\n+\t}\n+      </pre>\n+      (and so on for <b>deque</b> and <b>string</b>)\n+\n+      Of course a better solution is to add an autoconf-test for this:\n+      <pre class=\"programlisting\">\n+\tAC_MSG_CHECKING(for container::at)\n+\tAC_TRY_COMPILE(\n+\t[\n+\t#include &lt;vector&gt;\n+\t#include &lt;deque&gt;\n+\t#include &lt;string&gt;\n+\t\n+\tusing namespace std;\n+\t],\n+\t[\n+\tdeque&lt;int&gt; test_deque(3);\n+\ttest_deque.at(2);\n+\tvector&lt;int&gt; test_vector(2);\n+\ttest_vector.at(1);\n+\tstring test_string(&quot;test_string&quot;);\n+\ttest_string.at(3);\n+\t],\n+\t[AC_MSG_RESULT(yes)\n+\tAC_DEFINE(HAVE_CONTAINER_AT)],\n+\t[AC_MSG_RESULT(no)])\n+      </pre>\n+      If you are using other (non-GNU) compilers it might be a good idea\n+      to check for <b>string::at</b> separately.\n+    </p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-eof\"></a>\n+<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-eof\"></a>\n+<span class=\"label\">9.</span> <span class=\"title\">Using std::char_traits&lt;char&gt;::eof()</span>\n+</h2></div></div>\n+<p>\n+      <pre class=\"programlisting\">\n+\t#ifdef HAVE_CHAR_TRAITS\n+\t#define CPP_EOF std::char_traits&lt;char&gt;::eof()\n+\t#else\n+\t#define CPP_EOF EOF\n+\t#endif\n+      </pre>\n+    </p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-string-clear\"></a>\n+<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-string-clear\"></a>\n+<span class=\"label\">10.</span> <span class=\"title\">Using string::clear()/string::erase()</span>\n+</h2></div></div>\n+<p>\n+      There are two functions for deleting the contents of a string:\n+      <b>clear</b> and <b>erase</b> (the latter\n+      returns the string).\n+      <pre class=\"programlisting\">\n+\tvoid \n+\tclear() { _M_mutate(0, this-&gt;size(), 0); }\n+      </pre>\n+      <pre class=\"programlisting\">\n+\tbasic_string&amp; \n+\terase(size_type __pos = 0, size_type __n = npos)\n+\t{ \n+\treturn this-&gt;replace(_M_check(__pos), _M_fold(__pos, __n),\n+\t_M_data(), _M_data()); \n+\t}\n+      </pre>\n+      The implementation of <b>erase</b> seems to be more\n+      complicated (from libstdc++-v3), but <b>clear</b> is not\n+      implemented in gcc 2.95.x's libstdc++, so you should use\n+      <b>erase</b> (which is probably faster than\n+      <b>operator=(charT*)</b>).\n+    </p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-stringstream\"></a>\n+<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-stringstream\"></a>\n+<span class=\"label\">11.</span> <span class=\"title\">Using stringstream's</span>\n+</h2></div></div>\n+<p>\n+      Libstdc++-v3 provides the new\n+      <b>i/ostringstream</b>-classes,\n+      (<tt>&lt;sstream&gt;</tt>), but with older\n+      implementations you still have to use <b>i/ostrstream</b>\n+      (<tt>&lt;strstream&gt;</tt>):\n+      <pre class=\"programlisting\">\n+\t#ifdef HAVE_SSTREAM\n+\t#include &lt;sstream&gt;\n+\t#else\n+\t#include &lt;strstream&gt;\n+\t#endif\n+      </pre>\n+      <div class=\"itemizedlist\"><ul>\n+<li><p>\n+<a name=\"id2665237\"></a> <b>strstream</b> is considered to be\n+\t    deprecated\n+\t  </p></li>\n+<li><p>\n+<a name=\"id2665256\"></a> <b>strstream</b> is limited to\n+\t    <b>char</b>\n+\t  </p></li>\n+<li><p>\n+<a name=\"id2665271\"></a> with <b>ostringstream</b> you don't\n+\t    have to take care of terminating the string or freeing its\n+\t    memory\n+\t  </p></li>\n+<li><p>\n+<a name=\"id2665284\"></a> <b>istringstream</b> can be re-filled\n+\t    (clear(); str(input);)\n+\t  </p></li>\n+</ul></div>\n+    </p>\n+<p>\n+      You can then use output-stringstreams like this:\n+      <pre class=\"programlisting\">\n+\t#ifdef HAVE_SSTREAM\n+\tstd::ostringstream oss;\n+\t#else\n+\tstd::ostrstream oss;\n+\t#endif\n+\toss &lt;&lt; &quot;Name=&quot; &lt;&lt; m_name &lt;&lt; &quot;, number=&quot; &lt;&lt; m_number &lt;&lt; std::endl;\n+\t...\n+\t#ifndef HAVE_SSTREAM\n+\toss &lt;&lt; std::ends; // terminate the char*-string\n+\t#endif\n+\t// str() returns char* for ostrstream and a string for ostringstream\n+\t// this also causes ostrstream to think that the buffer's memory\n+\t// is yours\n+\tm_label.set_text(oss.str());\n+\t#ifndef HAVE_SSTREAM\n+\t// let the ostrstream take care of freeing the memory\n+\toss.freeze(false);\n+\t#endif\n+      </pre>\n+    </p>\n+<p>\n+      Input-stringstreams can be used similarly:\n+      <pre class=\"programlisting\">\n+\tstd::string input;\n+\t...\n+\t#ifdef HAVE_SSTREAM\n+\tstd::istringstream iss(input);\n+\t#else\n+\tstd::istrstream iss(input.c_str());\n+\t#endif\n+\tint i;\n+\tiss &gt;&gt; i; \n+      </pre>\n+      One (the only?) restriction is that an istrstream cannot be re-filled:\n+      <pre class=\"programlisting\">\n+\tstd::istringstream iss(numerator);\n+\tiss &gt;&gt; m_num;\n+\t// this is not possible with istrstream\n+\tiss.clear();\n+\tiss.str(denominator);\n+\tiss &gt;&gt; m_den;\n+      </pre>\n+      If you don't care about speed, you can put these conversions in\n+      a template-function:\n+      <pre class=\"programlisting\">\n+\ttemplate &lt;class X&gt;\n+\tvoid fromString(const string&amp; input, X&amp; any)\n+\t{\n+\t#ifdef HAVE_SSTREAM\n+\tstd::istringstream iss(input);\n+\t#else\n+\tstd::istrstream iss(input.c_str());\n+\t#endif\n+\tX temp;\n+\tiss &gt;&gt; temp;\n+\tif (iss.fail())\n+\tthrow runtime_error(..)\n+\tany = temp;\n+\t}\n+      </pre>\n+    </p>\n+<p>\n+      I have read the Josuttis book on Standard C++, so some information\n+      comes from there. Additionally, there is information in\n+      &quot;info iostream&quot;, which covers the old implementation that gcc 2.95.x\n+      uses.\n+    </p>\n+</div>\n+<div class=\"section\">\n+<a name=\"sec-about\"></a>\n+<div class=\"titlepage\"><div><h2 class=\"title\" style=\"clear: all\">\n+<a name=\"sec-about\"></a>\n+<span class=\"label\">12.</span> <span class=\"title\">About...</span>\n+</h2></div></div>\n+<p>\n+      Please send any experience, additions, corrections or questions to\n+      <a href=\"mailto:fnatter@gmx.net\" target=\"_top\">fnatter@gmx.net</a> or for\n+      discussion to the libstdc++-v3-mailing-list.\n+    </p>\n+</div>\n+</div></body>\n </html>"}]}