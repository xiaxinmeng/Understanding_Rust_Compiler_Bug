{"sha": "1d4555205a6e40cafd2dc6828e70de48959f34f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ0NTU1MjA1YTZlNDBjYWZkMmRjNjgyOGU3MGRlNDg5NTlmMzRmNg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T18:39:08Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T18:39:08Z"}, "message": "mode-switching.c: Use rtx_insn\n\ngcc/\n\t* mode-switching.c (struct seginfo): Strengthen field \"insn_ptr\"\n\tfrom rtx to rtx_insn *.\n\t(new_seginfo): Likewise for param \"insn\".\n\t(create_pre_exit): Likewise for locals \"last_insn\",\n\t\"before_return_copy\", \"return_copy\".\n\t(optimize_mode_switching): Likewise for locals \"insn\", \"ins_pos\",\n\t\"mode_set\".\n\nFrom-SVN: r214349", "tree": {"sha": "6d42041e3a0f54466db960851834fcdf4f6601f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d42041e3a0f54466db960851834fcdf4f6601f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d4555205a6e40cafd2dc6828e70de48959f34f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4555205a6e40cafd2dc6828e70de48959f34f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d4555205a6e40cafd2dc6828e70de48959f34f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4555205a6e40cafd2dc6828e70de48959f34f6/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cfa434f6d2c4ec33d29f247aab6b9b9421b5a62f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfa434f6d2c4ec33d29f247aab6b9b9421b5a62f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfa434f6d2c4ec33d29f247aab6b9b9421b5a62f"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "3c1cc8c16448345c446bbf3029a3a2370a57111b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4555205a6e40cafd2dc6828e70de48959f34f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4555205a6e40cafd2dc6828e70de48959f34f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d4555205a6e40cafd2dc6828e70de48959f34f6", "patch": "@@ -1,3 +1,13 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* mode-switching.c (struct seginfo): Strengthen field \"insn_ptr\"\n+\tfrom rtx to rtx_insn *.\n+\t(new_seginfo): Likewise for param \"insn\".\n+\t(create_pre_exit): Likewise for locals \"last_insn\",\n+\t\"before_return_copy\", \"return_copy\".\n+\t(optimize_mode_switching): Likewise for locals \"insn\", \"ins_pos\",\n+\t\"mode_set\".\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* lra-int.h (struct lra_insn_recog_data): Strengthen field \"insn\""}, {"sha": "379656d1b72ecd47ba497ee0075bc2e917c46257", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d4555205a6e40cafd2dc6828e70de48959f34f6/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d4555205a6e40cafd2dc6828e70de48959f34f6/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=1d4555205a6e40cafd2dc6828e70de48959f34f6", "patch": "@@ -70,7 +70,7 @@ along with GCC; see the file COPYING3.  If not see\n struct seginfo\n {\n   int mode;\n-  rtx insn_ptr;\n+  rtx_insn *insn_ptr;\n   int bbnum;\n   struct seginfo *next;\n   HARD_REG_SET regs_live;\n@@ -84,7 +84,7 @@ struct bb_info\n   int mode_in;\n };\n \n-static struct seginfo * new_seginfo (int, rtx, int, HARD_REG_SET);\n+static struct seginfo * new_seginfo (int, rtx_insn *, int, HARD_REG_SET);\n static void add_seginfo (struct bb_info *, struct seginfo *);\n static void reg_dies (rtx, HARD_REG_SET *);\n static void reg_becomes_live (rtx, const_rtx, void *);\n@@ -154,7 +154,7 @@ commit_mode_sets (struct edge_list *edge_list, int e, struct bb_info *info)\n    manner.  */\n \n static struct seginfo *\n-new_seginfo (int mode, rtx insn, int bb, HARD_REG_SET regs_live)\n+new_seginfo (int mode, rtx_insn *insn, int bb, HARD_REG_SET regs_live)\n {\n   struct seginfo *ptr;\n \n@@ -242,7 +242,8 @@ create_pre_exit (int n_entities, int *entity_map, const int *num_modes)\n     if (eg->flags & EDGE_FALLTHRU)\n       {\n \tbasic_block src_bb = eg->src;\n-\trtx last_insn, ret_reg;\n+\trtx_insn *last_insn;\n+\trtx ret_reg;\n \n \tgcc_assert (!pre_exit);\n \t/* If this function returns a value at the end, we have to\n@@ -259,11 +260,11 @@ create_pre_exit (int n_entities, int *entity_map, const int *num_modes)\n \t    bool short_block = false;\n \t    bool multi_reg_return = false;\n \t    bool forced_late_switch = false;\n-\t    rtx before_return_copy;\n+\t    rtx_insn *before_return_copy;\n \n \t    do\n \t      {\n-\t\trtx return_copy = PREV_INSN (last_insn);\n+\t\trtx_insn *return_copy = PREV_INSN (last_insn);\n \t\trtx return_copy_pat, copy_reg;\n \t\tint copy_start, copy_num;\n \t\tint j;\n@@ -559,7 +560,7 @@ optimize_mode_switching (void)\n       int e = entity_map[j];\n       int no_mode = num_modes[e];\n       struct bb_info *info = bb_info[j];\n-      rtx insn;\n+      rtx_insn *insn;\n \n       /* Determine what the first use (if any) need for a mode of entity E is.\n \t This will be the mode that is anticipatable for this block.\n@@ -584,7 +585,7 @@ optimize_mode_switching (void)\n \t\tbreak;\n \t    if (eg)\n \t      {\n-\t\trtx ins_pos = BB_HEAD (bb);\n+\t\trtx_insn *ins_pos = BB_HEAD (bb);\n \t\tif (LABEL_P (ins_pos))\n \t\t  ins_pos = NEXT_INSN (ins_pos);\n \t\tgcc_assert (NOTE_INSN_BASIC_BLOCK_P (ins_pos));\n@@ -785,7 +786,7 @@ optimize_mode_switching (void)\n \t      next = ptr->next;\n \t      if (ptr->mode != no_mode)\n \t\t{\n-\t\t  rtx mode_set;\n+\t\t  rtx_insn *mode_set;\n \n \t\t  rtl_profile_for_bb (bb);\n \t\t  start_sequence ();"}]}