{"sha": "b8705e613b063de5959faece2391571c707c97c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg3MDVlNjEzYjA2M2RlNTk1OWZhZWNlMjM5MTU3MWM3MDdjOTdjNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-19T20:04:35Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-19T20:04:35Z"}, "message": "(start_decl): Add code for -Wmain.\n\n(c_decode_option): Add -fhosted, -ffreestanding, and -Wmain.\n\nFrom-SVN: r13517", "tree": {"sha": "24e3fbcb3ef0dd32a98bcaa8622ee2c3116fc129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24e3fbcb3ef0dd32a98bcaa8622ee2c3116fc129"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8705e613b063de5959faece2391571c707c97c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8705e613b063de5959faece2391571c707c97c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8705e613b063de5959faece2391571c707c97c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8705e613b063de5959faece2391571c707c97c6/comments", "author": null, "committer": null, "parents": [{"sha": "8189a222b1f12b0ba99c0579915977f9312a2fde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8189a222b1f12b0ba99c0579915977f9312a2fde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8189a222b1f12b0ba99c0579915977f9312a2fde"}], "stats": {"total": 105, "additions": 103, "deletions": 2}, "files": [{"sha": "0c6e1c3d6c0976fd7f7605f9eba641080d3d1dff", "filename": "gcc/c-decl.c", "status": "modified", "additions": 103, "deletions": 2, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8705e613b063de5959faece2391571c707c97c6/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8705e613b063de5959faece2391571c707c97c6/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=b8705e613b063de5959faece2391571c707c97c6", "patch": "@@ -1,5 +1,5 @@\n /* Process declarations and variables for C compiler.\n-   Copyright (C) 1988, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -454,6 +454,10 @@ int flag_no_nonansi_builtin;\n \n int flag_traditional;\n \n+/* Nonzero means that we have builtin functions, and main is an int */\n+\n+int flag_hosted = 1;\n+\n /* Nonzero means to allow single precision math even if we're generally\n    being traditional.  */\n int flag_allow_single_precision = 0;\n@@ -545,6 +549,10 @@ int warn_parentheses;\n \n int warn_missing_braces;\n \n+/* Warn if main is suspicious.  */\n+\n+int warn_main;\n+\n /* Warn about comparison of signed and unsigned values.  */\n \n int warn_sign_compare;\n@@ -571,6 +579,19 @@ c_decode_option (p)\n     }\n   else if (!strcmp (p, \"-fallow-single-precision\"))\n     flag_allow_single_precision = 1;\n+  else if (!strcmp (p, \"-fhosted\") || !strcmp (p, \"-fno-freestanding\"))\n+    {\n+      flag_hosted = 1;\n+      flag_no_builtin = 0;\n+    }\n+  else if (!strcmp (p, \"-ffreestanding\") || !strcmp (p, \"-fno-hosted\"))\n+    {\n+      flag_hosted = 0;\n+      flag_no_builtin = 1;\n+      /* warn_main will be 2 if set by -Wall, 1 if set by -Wmain */\n+      if (warn_main == 2)\n+\twarn_main = 0;\n+    }\n   else if (!strcmp (p, \"-fnotraditional\") || !strcmp (p, \"-fno-traditional\"))\n     {\n       flag_traditional = 0;\n@@ -710,6 +731,10 @@ c_decode_option (p)\n     warn_missing_braces = 1;\n   else if (!strcmp (p, \"-Wno-missing-braces\"))\n     warn_missing_braces = 0;\n+  else if (!strcmp (p, \"-Wmain\"))\n+    warn_main = 1;\n+  else if (!strcmp (p, \"-Wno-main\"))\n+    warn_main = 0;\n   else if (!strcmp (p, \"-Wsign-compare\"))\n     warn_sign_compare = 1;\n   else if (!strcmp (p, \"-Wno-sign-compare\"))\n@@ -730,6 +755,9 @@ c_decode_option (p)\n       warn_parentheses = 1;\n       warn_missing_braces = 1;\n       warn_sign_compare = 1;\n+      /* We set this to 2 here, but 1 in -Wmain, so -ffreestanding can turn\n+\t it off only if it's not explicit.  */\n+      warn_main = 2;\n     }\n   else\n     return 0;\n@@ -3541,6 +3569,9 @@ start_decl (declarator, declspecs, initialized, attributes, prefix_attributes)\n   /* The corresponding pop_obstacks is in finish_decl.  */\n   push_obstacks_nochange ();\n \n+  if (warn_main && !strcmp (IDENTIFIER_POINTER (declarator), \"main\"))\n+    warning_with_decl (decl, \"`%s' is usually a function\");\n+\n   if (initialized)\n     /* Is it valid for this decl to have an initializer at all?\n        If not, set INITIALIZED to zero, which will indirectly\n@@ -6216,6 +6247,67 @@ start_function (declspecs, declarator, prefix_attributes, attributes, nested)\n   if (current_function_decl != 0)\n     TREE_PUBLIC (decl1) = 0;\n \n+  /* Warn for unlikely, improbable, or stupid declarations of `main'. */\n+  if (warn_main\n+      && strcmp (\"main\", IDENTIFIER_POINTER (DECL_NAME (decl1))) == 0)\n+    {\n+      tree args;\n+      int argct = 0;\n+\n+      if (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (decl1)))\n+\t   != integer_type_node)\n+\tpedwarn_with_decl (fndecl, \"return type of `%s' is not `int'\");\n+\n+      for (args = TYPE_ARG_TYPES (TREE_TYPE (decl1)); args;\n+\t   args = TREE_CHAIN (args))\n+\t{\n+\t  tree type = args ? TREE_VALUE (args) : 0;\n+\n+\t  if (type == void_type_node)\n+\t    break;\n+\n+\t  ++argct;\n+\t  switch (argct)\n+\t    {\n+\t    case 1:\n+\t      if (TYPE_MAIN_VARIANT (type) != integer_type_node)\n+\t\tpedwarn_with_decl (decl1,\n+\t\t\t\t   \"first argument of `%s' should be `int'\");\n+\t      break;\n+\n+\t    case 2:\n+\t      if (TREE_CODE (type) != POINTER_TYPE\n+\t\t  || TREE_CODE (TREE_TYPE (type)) != POINTER_TYPE\n+\t\t  || (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (type)))\n+\t\t      != char_type_node))\n+\t\tpedwarn_with_decl (decl1,\n+\t\t\t       \"second argument of `%s' should be `char **'\");\n+\t      break;\n+\n+\t    case 3:\n+\t      if (TREE_CODE (type) != POINTER_TYPE\n+\t\t  || TREE_CODE (TREE_TYPE (type)) != POINTER_TYPE\n+\t\t  || (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (type)))\n+\t\t      != char_type_node))\n+\t\tpedwarn_with_decl (decl1,\n+\t\t   \"third argument of `%s' should probably be `char **'\");\n+\t      break;\n+\t    }\n+\n+\t  /* It is intentional that this message does not mention the third\n+\t     argument, which is warned for only pedantically, because it's\n+\t     blessed by mention in an appendix of the standard. */\n+\t  if (argct > 0 && (argct < 2 || argct > 3))\n+\t    pedwarn_with_decl (decl1, \"`%s' takes only zero or two arguments\");\n+\n+\t  if (argct == 3 && pedantic)\n+\t    pedwarn_with_decl (decl1, \"third argument of `%s' is deprecated\");\n+\t}\n+\n+      if (! TREE_PUBLIC (decl1))\n+\tpedwarn_with_decl (decl1, \"`%s' is normally a non-static function\");\n+    }\n+\n   /* Record the decl so that the function name is defined.\n      If we already have a decl for this name, and it is a FUNCTION_DECL,\n      use the old decl.  */\n@@ -6872,7 +6964,16 @@ finish_function (nested)\n     {\n       if (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (fndecl)))\n \t  != integer_type_node)\n-\tpedwarn_with_decl (fndecl, \"return type of `%s' is not `int'\");\n+\t{\n+\t  /* You would expect the sense of this test to be the other way\n+\t     around, but if warn_main is set, we will already have warned,\n+\t     so this would be a duplicate.  This is the warning you get\n+\t     in some environments even if you *don't* ask for it, because\n+\t     these are environments where it may be more of a problem than\n+\t     usual.  */\n+\t  if (! warn_main)\n+\t    pedwarn_with_decl (fndecl, \"return type of `%s' is not `int'\");\n+\t}\n       else\n \t{\n #ifdef DEFAULT_MAIN_RETURN"}]}