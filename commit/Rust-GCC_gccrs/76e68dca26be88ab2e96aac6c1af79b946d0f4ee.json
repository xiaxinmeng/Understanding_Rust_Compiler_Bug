{"sha": "76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZlNjhkY2EyNmJlODhhYjJlOTZhYWM2YzFhZjc5Yjk0NmQwZjRlZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-09-20T09:15:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-09-20T09:15:43Z"}, "message": "tm.texi (TARGET_IRA_COVER_CLASSES): Define.\n\ngcc/\n\t* doc/tm.texi (TARGET_IRA_COVER_CLASSES): Define.\n\t(IRA_COVER_CLASSES): Refer to TARGET_IRA_COVER_CLASSES.\n\t* target.h (gcc_target): Add ira_cover_classes.\n\t* ira.c: Remove IRA_COVER_CLASSES guards.\n\t(setup_cover_and_important_classes): Use targetm.ira_cover_classes\n\tinstead of IRA_COVER_CLASSES.\n\t(setup_cover_and_important_classes): Remove IRA_COVER_CLASSES guard.\n\t(setup_class_translate): Likewise.\n\t(setup_reg_class_intersect_union): Likewise.\n\t(find_reg_class_closure): Replace IRA_COVER_CLASSES guard with a\n\ttest of targetm.ira_cover_classes.\n\t* opts.c (decode_options): Use targetm.ira_cover_classes instead\n\tof IRA_COVER_CLASSES.\n\t* target-def.h (TARGET_IRA_COVER_CLASSES): Define.\n\t(TARGET_INITIALIZER): Include it.\n\t* targhooks.h (default_ira_cover_classes): Declare.\n\t* targhooks.c (default_ira_cover_classes): New function.\n\nFrom-SVN: r140512", "tree": {"sha": "a9c18e21b19d7e54614cb457343b3cedb422d6bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9c18e21b19d7e54614cb457343b3cedb422d6bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d84b344a6c22cb816af1f204ff782b9f2e5166b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d84b344a6c22cb816af1f204ff782b9f2e5166b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d84b344a6c22cb816af1f204ff782b9f2e5166b5"}], "stats": {"total": 94, "additions": 67, "deletions": 27}, "files": [{"sha": "9e866f5f018c01d47a489610e1f7090e69c578fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "patch": "@@ -1,3 +1,23 @@\n+2008-09-20  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* doc/tm.texi (TARGET_IRA_COVER_CLASSES): Define.\n+\t(IRA_COVER_CLASSES): Refer to TARGET_IRA_COVER_CLASSES.\n+\t* target.h (gcc_target): Add ira_cover_classes.\n+\t* ira.c: Remove IRA_COVER_CLASSES guards.\n+\t(setup_cover_and_important_classes): Use targetm.ira_cover_classes\n+\tinstead of IRA_COVER_CLASSES.\n+\t(setup_cover_and_important_classes): Remove IRA_COVER_CLASSES guard.\n+\t(setup_class_translate): Likewise.\n+\t(setup_reg_class_intersect_union): Likewise.\n+\t(find_reg_class_closure): Replace IRA_COVER_CLASSES guard with a\n+\ttest of targetm.ira_cover_classes.\n+\t* opts.c (decode_options): Use targetm.ira_cover_classes instead\n+\tof IRA_COVER_CLASSES.\n+\t* target-def.h (TARGET_IRA_COVER_CLASSES): Define.\n+\t(TARGET_INITIALIZER): Include it.\n+\t* targhooks.h (default_ira_cover_classes): Declare.\n+\t* targhooks.c (default_ira_cover_classes): New function.\n+\n 2008-09-19  Bob Wilson  <bob.wilson@acm.org>\n \t\n \t* config/xtensa/xtensa.md (reload<mode>_literal): Handle MEM operands."}, {"sha": "dbff5761efee2a56d5c4d0c2978fd9e26541d86a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "patch": "@@ -2826,17 +2826,26 @@ as below:\n @end smallexample\n @end defmac\n \n-@defmac IRA_COVER_CLASSES\n-The macro defines cover classes for the Integrated Register Allocator\n+@deftypefn {Target Hook} {const enum reg_class *} TARGET_IRA_COVER_CLASSES ()\n+Return an array of cover classes for the Integrated Register Allocator\n (@acronym{IRA}).  Cover classes are a set of non-intersecting register\n classes covering all hard registers used for register allocation\n purposes.  If a move between two registers in the same cover class is\n possible, it should be cheaper than a load or store of the registers.\n-The macro value should be the initializer for an array of register\n-class values, with @code{LIM_REG_CLASSES} used as the end marker.\n+The array is terminated by a @code{LIM_REG_CLASSES} element.\n+\n+This hook is called once at compiler startup, after the command-line\n+options have been processed. It is then re-examined by every call to\n+@code{target_reinit}.\n \n-You must define this macro in order to use the integrated register\n+The default implementation returns @code{IRA_COVER_CLASSES}, if defined,\n+otherwise there is no default implementation.  You must define either this\n+macro or @code{IRA_COVER_CLASSES} in order to use the integrated register\n allocator for the target.\n+@end deftypefn\n+\n+@defmac IRA_COVER_CLASSES\n+See the documentation for @code{TARGET_IRA_COVER_CLASSES}.\n @end defmac\n \n @node Old Constraints"}, {"sha": "f4d399cb4910542fd7dfbdd0cf953ccc55fb6564", "filename": "gcc/ira.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "patch": "@@ -714,18 +714,17 @@ enum reg_class ira_important_classes[N_REG_CLASSES];\n    classes.  */\n int ira_important_class_nums[N_REG_CLASSES];\n \n-#ifdef IRA_COVER_CLASSES\n-\n /* Check IRA_COVER_CLASSES and sets the four global variables defined\n    above.  */\n static void\n setup_cover_and_important_classes (void)\n {\n   int i, j;\n   enum reg_class cl;\n-  static enum reg_class classes[] = IRA_COVER_CLASSES;\n+  const enum reg_class *classes;\n   HARD_REG_SET temp_hard_regset2;\n \n+  classes = targetm.ira_cover_classes ();\n   ira_reg_class_cover_size = 0;\n   for (i = 0; (cl = classes[i]) != LIM_REG_CLASSES; i++)\n     {\n@@ -761,15 +760,12 @@ setup_cover_and_important_classes (void)\n \t  }\n     }\n }\n-#endif\n \n /* Map of all register classes to corresponding cover class containing\n    the given class.  If given class is not a subset of a cover class,\n    we translate it into the cheapest cover class.  */\n enum reg_class ira_class_translate[N_REG_CLASSES];\n \n-#ifdef IRA_COVER_CLASSES\n-\n /* Set up array IRA_CLASS_TRANSLATE.  */\n static void\n setup_class_translate (void)\n@@ -837,7 +833,6 @@ setup_class_translate (void)\n       ira_class_translate[cl] = best_class;\n     }\n }\n-#endif\n \n /* The biggest important reg_class inside of intersection of the two\n    reg_classes (that is calculated taking only hard registers\n@@ -856,8 +851,6 @@ enum reg_class ira_reg_class_intersect[N_REG_CLASSES][N_REG_CLASSES];\n    reg_class_subunion value.  */\n enum reg_class ira_reg_class_union[N_REG_CLASSES][N_REG_CLASSES];\n \n-#ifdef IRA_COVER_CLASSES\n-\n /* Set up IRA_REG_CLASS_INTERSECT and IRA_REG_CLASS_UNION.  */\n static void\n setup_reg_class_intersect_union (void)\n@@ -943,8 +936,6 @@ setup_reg_class_intersect_union (void)\n     }\n }\n \n-#endif\n-\n /* Output all cover classes and the translation map into file F.  */\n static void\n print_class_cover (FILE *f)\n@@ -975,11 +966,12 @@ static void\n find_reg_class_closure (void)\n {\n   setup_reg_subclasses ();\n-#ifdef IRA_COVER_CLASSES\n-  setup_cover_and_important_classes ();\n-  setup_class_translate ();\n-  setup_reg_class_intersect_union ();\n-#endif\n+  if (targetm.ira_cover_classes)\n+    {\n+      setup_cover_and_important_classes ();\n+      setup_class_translate ();\n+      setup_reg_class_intersect_union ();\n+    }\n }\n \n \f"}, {"sha": "6e210ea7cebecadc32760078953bd5ae75f9d5bf", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "patch": "@@ -870,10 +870,9 @@ decode_options (unsigned int argc, const char **argv)\n \t}\n     }\n   \n-#ifdef IRA_COVER_CLASSES\n   /* Use IRA if it is implemented for the target.  */\n-  flag_ira = 1;\n-#endif\n+  if (targetm.ira_cover_classes)\n+    flag_ira = 1;\n \n   /* -O1 optimizations.  */\n   opt1 = (optimize >= 1);\n@@ -1097,13 +1096,11 @@ decode_options (unsigned int argc, const char **argv)\n   if (!flag_sel_sched_pipelining)\n     flag_sel_sched_pipelining_outer_loops = 0;\n \n-#ifndef IRA_COVER_CLASSES\n-  if (flag_ira)\n+  if (flag_ira && !targetm.ira_cover_classes)\n     {\n       inform (input_location, \"-fira does not work on this architecture\");\n       flag_ira = 0;\n     }\n-#endif\n \n   /* Save the current optimization options if this is the first call.  */\n   if (first_time_p)"}, {"sha": "3a332d88efd6b28d53ececd9c6dfd5b697816164", "filename": "gcc/target-def.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "patch": "@@ -631,6 +631,12 @@\n #define TARGET_HANDLE_PRAGMA_EXTERN_PREFIX 0\n #endif\n \n+#ifdef IRA_COVER_CLASSES\n+#define TARGET_IRA_COVER_CLASSES default_ira_cover_classes\n+#else\n+#define TARGET_IRA_COVER_CLASSES 0\n+#endif\n+\n #ifndef TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD default_secondary_reload\n #endif\n@@ -907,6 +913,7 @@\n   TARGET_INVALID_CONVERSION,\t\t\t\\\n   TARGET_INVALID_UNARY_OP,\t\t\t\\\n   TARGET_INVALID_BINARY_OP,\t\t\t\\\n+  TARGET_IRA_COVER_CLASSES,\t\t\t\\\n   TARGET_SECONDARY_RELOAD,\t\t\t\\\n   TARGET_EXPAND_TO_RTL_HOOK,\t\t\t\\\n   TARGET_INSTANTIATE_DECLS,\t\t\t\\"}, {"sha": "a7d601ff3ef49c858d54fac2105886b0467e5130", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "patch": "@@ -899,6 +899,9 @@ struct gcc_target\n      is not permitted on TYPE1 and TYPE2, NULL otherwise.  */\n   const char *(*invalid_binary_op) (int op, const_tree type1, const_tree type2);\n \n+  /* Return the array of IRA cover classes for the current target.  */\n+  const enum reg_class *(*ira_cover_classes) (void);\n+\n   /* Return the class for a secondary reload, and fill in extra information.  */\n   enum reg_class (*secondary_reload) (bool, rtx, enum reg_class,\n \t\t\t\t      enum machine_mode,"}, {"sha": "2ea438be336af1498c4d38756e4b08c4ed716046", "filename": "gcc/targhooks.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "patch": "@@ -575,6 +575,15 @@ default_internal_arg_pointer (void)\n     return virtual_incoming_args_rtx;\n }\n \n+#ifdef IRA_COVER_CLASSES\n+const enum reg_class *\n+default_ira_cover_classes (void)\n+{\n+  static enum reg_class classes[] = IRA_COVER_CLASSES;\n+  return classes;\n+}\n+#endif\n+\n enum reg_class\n default_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x ATTRIBUTE_UNUSED,\n \t\t\t  enum reg_class reload_class ATTRIBUTE_UNUSED,"}, {"sha": "f5a7a248369072d826bfcae1591fda76e0fb9b60", "filename": "gcc/targhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76e68dca26be88ab2e96aac6c1af79b946d0f4ee/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=76e68dca26be88ab2e96aac6c1af79b946d0f4ee", "patch": "@@ -88,6 +88,9 @@ extern const char *hook_invalid_arg_for_unprototyped_fn\n extern bool hook_bool_const_rtx_commutative_p (const_rtx, int);\n extern rtx default_function_value (const_tree, const_tree, bool);\n extern rtx default_internal_arg_pointer (void);\n+#ifdef IRA_COVER_CLASSES\n+extern const enum reg_class *default_ira_cover_classes (void);\n+#endif\n extern enum reg_class default_secondary_reload (bool, rtx, enum reg_class,\n \t\t\t\t\t\tenum machine_mode,\n \t\t\t\t\t\tsecondary_reload_info *);"}]}