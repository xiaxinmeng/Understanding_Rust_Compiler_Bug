{"sha": "8c0a7019c9734ef79c02251923102a611414e44f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMwYTcwMTljOTczNGVmNzljMDIyNTE5MjMxMDJhNjExNDE0ZTQ0Zg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-06T23:11:59Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-06T23:11:59Z"}, "message": "pa.h (target_switches): Add \"-mdisable-fpregs\" and \"-mdisable-indexing.\n\n\t* pa.h (target_switches): Add \"-mdisable-fpregs\" and\n\t\"-mdisable-indexing.\n\t(CONDITIONAL_REGISTER_USAGE): If TARGET_DISABLE_FPREGS, then mark\n\tall FP registers as fixed.\n\nFrom-SVN: r3131", "tree": {"sha": "f9423d16fe914cafd18431bbf7c4bace403b6653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9423d16fe914cafd18431bbf7c4bace403b6653"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c0a7019c9734ef79c02251923102a611414e44f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c0a7019c9734ef79c02251923102a611414e44f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c0a7019c9734ef79c02251923102a611414e44f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c0a7019c9734ef79c02251923102a611414e44f/comments", "author": null, "committer": null, "parents": [{"sha": "5ce4a0584fe88afeb9d643ead1c4962aa8ae3fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ce4a0584fe88afeb9d643ead1c4962aa8ae3fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ce4a0584fe88afeb9d643ead1c4962aa8ae3fa4"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "147b45b46431e9f1a33d583e3b18cdd76e06b657", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c0a7019c9734ef79c02251923102a611414e44f/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c0a7019c9734ef79c02251923102a611414e44f/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=8c0a7019c9734ef79c02251923102a611414e44f", "patch": "@@ -40,6 +40,13 @@ extern int target_flags;\n \n #define TARGET_SNAKE (target_flags & 1)\n \n+/* Disable all FP registers (they all become fixed).  This may be necessary\n+   for compiling kernels which perform lazy context switching of FP regs.\n+   Note if you use this option and try to perform floating point operations \n+   the compiler will abort!  */\n+\n+#define TARGET_DISABLE_FPREGS (target_flags & 2)\n+\n /* Force gcc to only use instructions which are safe when compiling kernels.\n    Specifically, avoid using add instructions with dp (r27) as an argument.\n    Use addil instructions instead.  Doing so avoids a nasty bug in the \n@@ -60,6 +67,13 @@ extern int target_flags;\n \n #define TARGET_LONG_CALLS (target_flags & 16)\n \n+/* Disable indexed addressing modes.  Necessary under MACH.\n+\n+   ??? Some problem with a high bit being set in an address having\n+   special meaning to the PA MACH ports.  */\n+\n+#define TARGET_DISABLE_INDEXING (target_flags & 32)\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n@@ -71,10 +85,12 @@ extern int target_flags;\n    {\"nosnake\", -1},\t\\\n    {\"pa-risc-1-0\", -1},\t\\\n    {\"pa-risc-1-1\", 1},\t\\\n+   {\"disable-fpregs\", 2},\\\n    {\"kernel\", 4},\t\\\n    {\"shared-libs\", 8},\t\\\n    {\"no-shared-libs\", -8},\\\n    {\"long-calls\", 16},\t\\\n+   {\"disable-indexing\", 32},\\\n    { \"\", TARGET_DEFAULT}}\n \n #ifndef TARGET_DEFAULT\n@@ -326,6 +342,17 @@ extern int target_flags;\n        if (TEST_HARD_REG_BIT (x, i)) \t\t\\\n \tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n     }\t\t\t\t\t\t\\\n+  else if (TARGET_DISABLE_FPREGS)\t\t\\\n+    {\t\t\t\t\t\t\\\n+      COPY_HARD_REG_SET (x, reg_class_contents[(int)FP_REGS]);\\\n+      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++ ) \\\n+       if (TEST_HARD_REG_BIT (x, i)) \t\t\\\n+\tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n+      COPY_HARD_REG_SET (x, reg_class_contents[(int)SNAKE_FP_REGS]);\\\n+      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++ ) \\\n+       if (TEST_HARD_REG_BIT (x, i)) \t\t\\\n+\tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n+    }\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\\\n     { \t\t\t\t\t\t\\\n       COPY_HARD_REG_SET (x, reg_class_contents[(int)FP_REGS]); \\"}]}